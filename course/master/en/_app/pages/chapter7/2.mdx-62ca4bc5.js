import{S as nd,i as od,s as rd,e as o,w as y,k as c,t as a,c as r,a as i,x as j,d as s,m as h,h as l,b as O,g as p,F as e,y as E,q as b,o as w,B as x,M as id,p as Po,v as pd,n as zo,L as Qh}from"../../chunks/vendor-1e8b365d.js";import{T as qo}from"../../chunks/Tip-62b14c6e.js";import{Y as ed}from"../../chunks/Youtube-c2a8cc39.js";import{I as Dt}from"../../chunks/IconCopyLink-483c28ba.js";import{C as A}from"../../chunks/CodeBlock-e5764662.js";import{D as ad}from"../../chunks/DocNotebookDropdown-37d928d3.js";import{F as cd}from"../../chunks/FrameworkSwitchCourse-7f8f0f31.js";function hd(Y){let d,g;return d=new ad({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section2_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section2_tf.ipynb"}]}}),{c(){y(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,k){E(d,m,k),g=!0},i(m){g||(b(d.$$.fragment,m),g=!0)},o(m){w(d.$$.fragment,m),g=!1},d(m){x(d,m)}}}function dd(Y){let d,g;return d=new ad({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section2_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section2_pt.ipynb"}]}}),{c(){y(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,k){E(d,m,k),g=!0},i(m){g||(b(d.$$.fragment,m),g=!0)},o(m){w(d.$$.fragment,m),g=!1},d(m){x(d,m)}}}function fd(Y){let d,g,m,k,C,v,$,T;return{c(){d=o("p"),g=a("\u{1F4A1} As long as your dataset consists of texts split into words with their corresponding labels, you will be able to adapt the data processing procedures described here to your own dataset. Refer back to "),m=o("a"),k=a("Chapter 5"),C=a(" if you need a refresher on how to load your own custom data in a "),v=o("code"),$=a("Dataset"),T=a("."),this.h()},l(P){d=r(P,"P",{});var I=i(d);g=l(I,"\u{1F4A1} As long as your dataset consists of texts split into words with their corresponding labels, you will be able to adapt the data processing procedures described here to your own dataset. Refer back to "),m=r(I,"A",{href:!0});var B=i(m);k=l(B,"Chapter 5"),B.forEach(s),C=l(I," if you need a refresher on how to load your own custom data in a "),v=r(I,"CODE",{});var z=i(v);$=l(z,"Dataset"),z.forEach(s),T=l(I,"."),I.forEach(s),this.h()},h(){O(m,"href","/course/chapter5")},m(P,I){p(P,d,I),e(d,g),e(d,m),e(m,k),e(d,C),e(d,v),e(v,$),e(d,T)},d(P){P&&s(d)}}}function ud(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u270F\uFE0F "),m=o("strong"),k=a("Your turn!"),C=a(" Print the same two sentences with their POS or chunking labels.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u270F\uFE0F "),m=r($,"STRONG",{});var T=i(m);k=l(T,"Your turn!"),T.forEach(s),C=l($," Print the same two sentences with their POS or chunking labels."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function md(Y){let d,g,m,k,C,v,$,T;return{c(){d=o("p"),g=a("\u270F\uFE0F "),m=o("strong"),k=a("Your turn!"),C=a(" Some researchers prefer to attribute only one label per word, and assign "),v=o("code"),$=a("-100"),T=a(" to the other subtokens in a given word. This is to avoid long words that split into lots of subtokens contributing heavily to the loss. Change the previous function to align labels with input IDs by following this rule.")},l(P){d=r(P,"P",{});var I=i(d);g=l(I,"\u270F\uFE0F "),m=r(I,"STRONG",{});var B=i(m);k=l(B,"Your turn!"),B.forEach(s),C=l(I," Some researchers prefer to attribute only one label per word, and assign "),v=r(I,"CODE",{});var z=i(v);$=l(z,"-100"),z.forEach(s),T=l(I," to the other subtokens in a given word. This is to avoid long words that split into lots of subtokens contributing heavily to the loss. Change the previous function to align labels with input IDs by following this rule."),I.forEach(s)},m(P,I){p(P,d,I),e(d,g),e(d,m),e(m,k),e(d,C),e(d,v),e(v,$),e(d,T)},d(P){P&&s(d)}}}function _d(Y){let d,g,m,k,C,v,$,T,P,I,B;return k=new Dt({}),{c(){d=o("h2"),g=o("a"),m=o("span"),y(k.$$.fragment),C=c(),v=o("span"),$=a("Fine-tuning the model with Keras"),T=c(),P=o("p"),I=a("The actual code using Keras will be very similar to before; the only changes are the way the data is collated into a batch and the metric computation function."),this.h()},l(z){d=r(z,"H2",{class:!0});var S=i(d);g=r(S,"A",{id:!0,class:!0,href:!0});var M=i(g);m=r(M,"SPAN",{});var N=i(m);j(k.$$.fragment,N),N.forEach(s),M.forEach(s),C=h(S),v=r(S,"SPAN",{});var H=i(v);$=l(H,"Fine-tuning the model with Keras"),H.forEach(s),S.forEach(s),T=h(z),P=r(z,"P",{});var Z=i(P);I=l(Z,"The actual code using Keras will be very similar to before; the only changes are the way the data is collated into a batch and the metric computation function."),Z.forEach(s),this.h()},h(){O(g,"id","finetuning-the-model-with-keras"),O(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(g,"href","#finetuning-the-model-with-keras"),O(d,"class","relative group")},m(z,S){p(z,d,S),e(d,g),e(g,m),E(k,m,null),e(d,C),e(d,v),e(v,$),p(z,T,S),p(z,P,S),e(P,I),B=!0},i(z){B||(b(k.$$.fragment,z),B=!0)},o(z){w(k.$$.fragment,z),B=!1},d(z){z&&s(d),x(k),z&&s(T),z&&s(P)}}}function bd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z;return k=new Dt({}),{c(){d=o("h2"),g=o("a"),m=o("span"),y(k.$$.fragment),C=c(),v=o("span"),$=a("Fine-tuning the model with the "),T=o("code"),P=a("Trainer"),I=a(" API"),B=c(),z=o("p"),S=a("The actual code using the "),M=o("code"),N=a("Trainer"),H=a(" will be the same as before; the only changes are the way the data is collated into a batch and the metric computation function."),this.h()},l(F){d=r(F,"H2",{class:!0});var G=i(d);g=r(G,"A",{id:!0,class:!0,href:!0});var q=i(g);m=r(q,"SPAN",{});var U=i(m);j(k.$$.fragment,U),U.forEach(s),q.forEach(s),C=h(G),v=r(G,"SPAN",{});var L=i(v);$=l(L,"Fine-tuning the model with the "),T=r(L,"CODE",{});var X=i(T);P=l(X,"Trainer"),X.forEach(s),I=l(L," API"),L.forEach(s),G.forEach(s),B=h(F),z=r(F,"P",{});var Q=i(z);S=l(Q,"The actual code using the "),M=r(Q,"CODE",{});var ee=i(M);N=l(ee,"Trainer"),ee.forEach(s),H=l(Q," will be the same as before; the only changes are the way the data is collated into a batch and the metric computation function."),Q.forEach(s),this.h()},h(){O(g,"id","finetuning-the-model-with-the-trainer-api"),O(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(g,"href","#finetuning-the-model-with-the-trainer-api"),O(d,"class","relative group")},m(F,G){p(F,d,G),e(d,g),e(g,m),E(k,m,null),e(d,C),e(d,v),e(v,$),e(v,T),e(T,P),e(v,I),p(F,B,G),p(F,z,G),e(z,S),e(z,M),e(M,N),e(z,H),Z=!0},i(F){Z||(b(k.$$.fragment,F),Z=!0)},o(F){w(k.$$.fragment,F),Z=!1},d(F){F&&s(d),x(k),F&&s(B),F&&s(z)}}}function wd(Y){let d,g;return d=new A({props:{code:`from transformers import DataCollatorForTokenClassification

data_collator = DataCollatorForTokenClassification(
    tokenizer=tokenizer, return_tensors="tf"
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForTokenClassification

data_collator = DataCollatorForTokenClassification(
    tokenizer=tokenizer, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>
)`}}),{c(){y(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,k){E(d,m,k),g=!0},i(m){g||(b(d.$$.fragment,m),g=!0)},o(m){w(d.$$.fragment,m),g=!1},d(m){x(d,m)}}}function gd(Y){let d,g;return d=new A({props:{code:`from transformers import DataCollatorForTokenClassification

data_collator = DataCollatorForTokenClassification(tokenizer=tokenizer)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForTokenClassification

data_collator = DataCollatorForTokenClassification(tokenizer=tokenizer)`}}),{c(){y(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,k){E(d,m,k),g=!0},i(m){g||(b(d.$$.fragment,m),g=!0)},o(m){w(d.$$.fragment,m),g=!1},d(m){x(d,m)}}}function vd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M;return I=new A({props:{code:`tf_train_dataset = tokenized_datasets["train"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels", "token_type_ids"],
    collate_fn=data_collator,
    shuffle=True,
    batch_size=16,
)

tf_eval_dataset = tokenized_datasets["validation"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels", "token_type_ids"],
    collate_fn=data_collator,
    shuffle=False,
    batch_size=16,
)`,highlighted:`tf_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">True</span>,
    batch_size=<span class="hljs-number">16</span>,
)

tf_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">False</span>,
    batch_size=<span class="hljs-number">16</span>,
)`}}),{c(){d=o("p"),g=a("Our data collator is ready to go! Now let\u2019s use it to make a "),m=o("code"),k=a("tf.data.Dataset"),C=a(" with the "),v=o("code"),$=a("to_tf_dataset()"),T=a(" method."),P=c(),y(I.$$.fragment),B=c(),z=o("p"),S=a("Next stop: the model itself.")},l(N){d=r(N,"P",{});var H=i(d);g=l(H,"Our data collator is ready to go! Now let\u2019s use it to make a "),m=r(H,"CODE",{});var Z=i(m);k=l(Z,"tf.data.Dataset"),Z.forEach(s),C=l(H," with the "),v=r(H,"CODE",{});var F=i(v);$=l(F,"to_tf_dataset()"),F.forEach(s),T=l(H," method."),H.forEach(s),P=h(N),j(I.$$.fragment,N),B=h(N),z=r(N,"P",{});var G=i(z);S=l(G,"Next stop: the model itself."),G.forEach(s)},m(N,H){p(N,d,H),e(d,g),e(d,m),e(m,k),e(d,C),e(d,v),e(v,$),e(d,T),p(N,P,H),E(I,N,H),p(N,B,H),p(N,z,H),e(z,S),M=!0},i(N){M||(b(I.$$.fragment,N),M=!0)},o(N){w(I.$$.fragment,N),M=!1},d(N){N&&s(d),N&&s(P),x(I,N),N&&s(B),N&&s(z)}}}function kd(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("As we can see, the second set of labels has been padded to the length of the first one using "),m=o("code"),k=a("-100"),C=a("s.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"As we can see, the second set of labels has been padded to the length of the first one using "),m=r($,"CODE",{});var T=i(m);k=l(T,"-100"),T.forEach(s),C=l($,"s."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},i:Qh,o:Qh,d(v){v&&s(d)}}}function td(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U,L,X,Q,ee,ne,K,he,J,W,R,se,fe,ge,ae,Ie,V,tt,pe,bt,Zt,st,Ks,Pt,Kt,ue,Cs,Ce,at,ve,Vt,oe,ke,Ne,Se,ja,wt,lt,Ue,$e,zt,Jt,nt,Vs,gt,Te,Ts,ye,Ea,Ds,Fe,ot,me,je,Le,Ye,qt,At,Ps,xa,It,De,Js,le,Nt,Qt,Re,St,vt,kt,Oa,Ee,zs,Ca,qs,Pe,es,rt,Qs,Xe,ea,it,ts,_e,ta,pt,Ft,As,ce,ss,ct,sa,as,ls,$t,yt,ht,Lt,Is,be,Rt,jt,ns,Ta,os,we,Ns,Be;return k=new Dt({}),K=new A({props:{code:`id2label = {str(i): label for i, label in enumerate(label_names)}
label2id = {v: k for k, v in id2label.items()}`,highlighted:`id2label = {<span class="hljs-built_in">str</span>(i): label <span class="hljs-keyword">for</span> i, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(label_names)}
label2id = {v: k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> id2label.items()}`}}),ae=new A({props:{code:`from transformers import TFAutoModelForTokenClassification

model = TFAutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForTokenClassification

model = TFAutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`}}),ue=new A({props:{code:"model.config.num_labels",highlighted:"model.config.num_labels"}}),Ce=new A({props:{code:"9",highlighted:'<span class="hljs-number">9</span>'}}),ve=new qo({props:{warning:!0,$$slots:{default:[$d]},$$scope:{ctx:Y}}}),Se=new Dt({}),nt=new A({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`}}),Fe=new A({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),Nt=new A({props:{code:`from transformers import create_optimizer
import tensorflow as tf

# Train in mixed-precision float16
# Comment this line out if you're using a GPU that will not benefit from this
tf.keras.mixed_precision.set_global_policy("mixed_float16")

# The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied
# by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,
# not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.
num_epochs = 3
num_train_steps = len(tf_train_dataset) * num_epochs

optimizer, schedule = create_optimizer(
    init_lr=2e-5,
    num_warmup_steps=0,
    num_train_steps=num_train_steps,
    weight_decay_rate=0.01,
)
model.compile(optimizer=optimizer)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-comment"># Train in mixed-precision float16</span>
<span class="hljs-comment"># Comment this line out if you&#x27;re using a GPU that will not benefit from this</span>
tf.keras.mixed_precision.set_global_policy(<span class="hljs-string">&quot;mixed_float16&quot;</span>)

<span class="hljs-comment"># The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied</span>
<span class="hljs-comment"># by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,</span>
<span class="hljs-comment"># not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.</span>
num_epochs = <span class="hljs-number">3</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_epochs

optimizer, schedule = create_optimizer(
    init_lr=<span class="hljs-number">2e-5</span>,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_train_steps=num_train_steps,
    weight_decay_rate=<span class="hljs-number">0.01</span>,
)
model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)`}}),it=new A({props:{code:`from transformers.keras_callbacks import PushToHubCallback

callback = PushToHubCallback(output_dir="bert-finetuned-ner", tokenizer=tokenizer)

model.fit(
    tf_train_dataset,
    validation_data=tf_eval_dataset,
    callbacks=[callback],
    epochs=num_epochs,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback

callback = PushToHubCallback(output_dir=<span class="hljs-string">&quot;bert-finetuned-ner&quot;</span>, tokenizer=tokenizer)

model.fit(
    tf_train_dataset,
    validation_data=tf_eval_dataset,
    callbacks=[callback],
    epochs=num_epochs,
)`}}),Rt=new qo({props:{$$slots:{default:[yd]},$$scope:{ctx:Y}}}),{c(){d=o("h3"),g=o("a"),m=o("span"),y(k.$$.fragment),C=c(),v=o("span"),$=a("Defining the model"),T=c(),P=o("p"),I=a("Since we are working on a token classification problem, we will use the "),B=o("code"),z=a("TFAutoModelForTokenClassification"),S=a(" class. The main thing to remember when defining this model is to pass along some information on the number of labels we have. The easiest way to do this is to pass that number with the "),M=o("code"),N=a("num_labels"),H=a(" argument, but if we want a nice inference widget working like the one we saw at the beginning of this section, it\u2019s better to set the correct label correspondences instead."),Z=c(),F=o("p"),G=a("They should be set by two dictionaries, "),q=o("code"),U=a("id2label"),L=a(" and "),X=o("code"),Q=a("label2id"),ee=a(", which contain the mapping from ID to label and vice versa:"),ne=c(),y(K.$$.fragment),he=c(),J=o("p"),W=a("Now we can just pass them to the "),R=o("code"),se=a("TFAutoModelForTokenClassification.from_pretrained()"),fe=a(" method, and they will be set in the model\u2019s configuration, then properly saved and uploaded to the Hub:"),ge=c(),y(ae.$$.fragment),Ie=c(),V=o("p"),tt=a("Like when we defined our "),pe=o("code"),bt=a("TFAutoModelForSequenceClassification"),Zt=a(" in "),st=o("a"),Ks=a("Chapter 3"),Pt=a(", creating the model issues a warning that some weights were not used (the ones from the pretraining head) and some other weights are randomly initialized (the ones from the new token classification head), and that this model should be trained. We will do that in a minute, but first let\u2019s double-check that our model has the right number of labels:"),Kt=c(),y(ue.$$.fragment),Cs=c(),y(Ce.$$.fragment),at=c(),y(ve.$$.fragment),Vt=c(),oe=o("h3"),ke=o("a"),Ne=o("span"),y(Se.$$.fragment),ja=c(),wt=o("span"),lt=a("Fine-tuning the model"),Ue=c(),$e=o("p"),zt=a("We are now ready to train our model! We have just a little more housekeeping to do first, though: we should log in to Hugging Face and define our training hyperparameters. If you\u2019re working in a notebook, there\u2019s a convenience function to help you with this:"),Jt=c(),y(nt.$$.fragment),Vs=c(),gt=o("p"),Te=a("This will display a widget where you can enter your Hugging Face login credentials."),Ts=c(),ye=o("p"),Ea=a("If you aren\u2019t working in a notebook, just type the following line in your terminal:"),Ds=c(),y(Fe.$$.fragment),ot=c(),me=o("p"),je=a("After logging in, we can prepare everything we need to compile our model. \u{1F917} Transformers provides a convenient "),Le=o("code"),Ye=a("create_optimizer()"),qt=a(" function that will give you an "),At=o("code"),Ps=a("AdamW"),xa=a(" optimizer with appropriate settings for the weight decay and learning rate decay, both of which will improve your model\u2019s performance compared to the built-in "),It=o("code"),De=a("Adam"),Js=a(" optimizer:"),le=c(),y(Nt.$$.fragment),Qt=c(),Re=o("p"),St=a("Note also that we don\u2019t supply a "),vt=o("code"),kt=a("loss"),Oa=a(" argument to "),Ee=o("code"),zs=a("compile()"),Ca=a(". This is because the models can actually compute loss internally \u2014 if you compile without a loss and supply your labels in the input dictionary (as we do in our datasets), then the model will train using that internal loss, which will be appropriate for the task and model type you have chosen."),qs=c(),Pe=o("p"),es=a("Next, we define a "),rt=o("code"),Qs=a("PushToHubCallback"),Xe=a(" to upload our model to the Hub during training, and fit the model with that callback:"),ea=c(),y(it.$$.fragment),ts=c(),_e=o("p"),ta=a("You can specify the full name of the repository you want to push to with the "),pt=o("code"),Ft=a("hub_model_id"),As=a(" argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ce=o("a"),ss=o("code"),ct=a("huggingface-course"),sa=a(" organization"),as=a(", we added "),ls=o("code"),$t=a('hub_model_id="huggingface-course/bert-finetuned-ner"'),yt=a(". By default, the repository used will be in your namespace and named after the output directory you set, for example "),ht=o("code"),Lt=a('"cool_huggingface_user/bert-finetuned-ner"'),Is=a("."),be=c(),y(Rt.$$.fragment),jt=c(),ns=o("p"),Ta=a("Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),os=c(),we=o("p"),Ns=a("At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a token classification task \u2014 congratulations! But how good is our model, really? We should evaluate some metrics to find out."),this.h()},l(u){d=r(u,"H3",{class:!0});var D=i(d);g=r(D,"A",{id:!0,class:!0,href:!0});var rs=i(g);m=r(rs,"SPAN",{});var Ss=i(m);j(k.$$.fragment,Ss),Ss.forEach(s),rs.forEach(s),C=h(D),v=r(D,"SPAN",{});var Bt=i(v);$=l(Bt,"Defining the model"),Bt.forEach(s),D.forEach(s),T=h(u),P=r(u,"P",{});var is=i(P);I=l(is,"Since we are working on a token classification problem, we will use the "),B=r(is,"CODE",{});var ps=i(B);z=l(ps,"TFAutoModelForTokenClassification"),ps.forEach(s),S=l(is," class. The main thing to remember when defining this model is to pass along some information on the number of labels we have. The easiest way to do this is to pass that number with the "),M=r(is,"CODE",{});var bl=i(M);N=l(bl,"num_labels"),bl.forEach(s),H=l(is," argument, but if we want a nice inference widget working like the one we saw at the beginning of this section, it\u2019s better to set the correct label correspondences instead."),is.forEach(s),Z=h(u),F=r(u,"P",{});var cs=i(F);G=l(cs,"They should be set by two dictionaries, "),q=r(cs,"CODE",{});var Fs=i(q);U=l(Fs,"id2label"),Fs.forEach(s),L=l(cs," and "),X=r(cs,"CODE",{});var Ls=i(X);Q=l(Ls,"label2id"),Ls.forEach(s),ee=l(cs,", which contain the mapping from ID to label and vice versa:"),cs.forEach(s),ne=h(u),j(K.$$.fragment,u),he=h(u),J=r(u,"P",{});var aa=i(J);W=l(aa,"Now we can just pass them to the "),R=r(aa,"CODE",{});var Rs=i(R);se=l(Rs,"TFAutoModelForTokenClassification.from_pretrained()"),Rs.forEach(s),fe=l(aa," method, and they will be set in the model\u2019s configuration, then properly saved and uploaded to the Hub:"),aa.forEach(s),ge=h(u),j(ae.$$.fragment,u),Ie=h(u),V=r(u,"P",{});var ze=i(V);tt=l(ze,"Like when we defined our "),pe=r(ze,"CODE",{});var Mt=i(pe);bt=l(Mt,"TFAutoModelForSequenceClassification"),Mt.forEach(s),Zt=l(ze," in "),st=r(ze,"A",{href:!0});var hs=i(st);Ks=l(hs,"Chapter 3"),hs.forEach(s),Pt=l(ze,", creating the model issues a warning that some weights were not used (the ones from the pretraining head) and some other weights are randomly initialized (the ones from the new token classification head), and that this model should be trained. We will do that in a minute, but first let\u2019s double-check that our model has the right number of labels:"),ze.forEach(s),Kt=h(u),j(ue.$$.fragment,u),Cs=h(u),j(Ce.$$.fragment,u),at=h(u),j(ve.$$.fragment,u),Vt=h(u),oe=r(u,"H3",{class:!0});var Et=i(oe);ke=r(Et,"A",{id:!0,class:!0,href:!0});var wl=i(ke);Ne=r(wl,"SPAN",{});var Bs=i(Ne);j(Se.$$.fragment,Bs),Bs.forEach(s),wl.forEach(s),ja=h(Et),wt=r(Et,"SPAN",{});var ds=i(wt);lt=l(ds,"Fine-tuning the model"),ds.forEach(s),Et.forEach(s),Ue=h(u),$e=r(u,"P",{});var la=i($e);zt=l(la,"We are now ready to train our model! We have just a little more housekeeping to do first, though: we should log in to Hugging Face and define our training hyperparameters. If you\u2019re working in a notebook, there\u2019s a convenience function to help you with this:"),la.forEach(s),Jt=h(u),j(nt.$$.fragment,u),Vs=h(u),gt=r(u,"P",{});var Me=i(gt);Te=l(Me,"This will display a widget where you can enter your Hugging Face login credentials."),Me.forEach(s),Ts=h(u),ye=r(u,"P",{});var Da=i(ye);Ea=l(Da,"If you aren\u2019t working in a notebook, just type the following line in your terminal:"),Da.forEach(s),Ds=h(u),j(Fe.$$.fragment,u),ot=h(u),me=r(u,"P",{});var ie=i(me);je=l(ie,"After logging in, we can prepare everything we need to compile our model. \u{1F917} Transformers provides a convenient "),Le=r(ie,"CODE",{});var gl=i(Le);Ye=l(gl,"create_optimizer()"),gl.forEach(s),qt=l(ie," function that will give you an "),At=r(ie,"CODE",{});var na=i(At);Ps=l(na,"AdamW"),na.forEach(s),xa=l(ie," optimizer with appropriate settings for the weight decay and learning rate decay, both of which will improve your model\u2019s performance compared to the built-in "),It=r(ie,"CODE",{});var Pa=i(It);De=l(Pa,"Adam"),Pa.forEach(s),Js=l(ie," optimizer:"),ie.forEach(s),le=h(u),j(Nt.$$.fragment,u),Qt=h(u),Re=r(u,"P",{});var qe=i(Re);St=l(qe,"Note also that we don\u2019t supply a "),vt=r(qe,"CODE",{});var Ze=i(vt);kt=l(Ze,"loss"),Ze.forEach(s),Oa=l(qe," argument to "),Ee=r(qe,"CODE",{});var oa=i(Ee);zs=l(oa,"compile()"),oa.forEach(s),Ca=l(qe,". This is because the models can actually compute loss internally \u2014 if you compile without a loss and supply your labels in the input dictionary (as we do in our datasets), then the model will train using that internal loss, which will be appropriate for the task and model type you have chosen."),qe.forEach(s),qs=h(u),Pe=r(u,"P",{});var xt=i(Pe);es=l(xt,"Next, we define a "),rt=r(xt,"CODE",{});var za=i(rt);Qs=l(za,"PushToHubCallback"),za.forEach(s),Xe=l(xt," to upload our model to the Hub during training, and fit the model with that callback:"),xt.forEach(s),ea=h(u),j(it.$$.fragment,u),ts=h(u),_e=r(u,"P",{});var te=i(_e);ta=l(te,"You can specify the full name of the repository you want to push to with the "),pt=r(te,"CODE",{});var Ms=i(pt);Ft=l(Ms,"hub_model_id"),Ms.forEach(s),As=l(te," argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ce=r(te,"A",{href:!0,rel:!0});var fs=i(ce);ss=r(fs,"CODE",{});var He=i(ss);ct=l(He,"huggingface-course"),He.forEach(s),sa=l(fs," organization"),fs.forEach(s),as=l(te,", we added "),ls=r(te,"CODE",{});var vl=i(ls);$t=l(vl,'hub_model_id="huggingface-course/bert-finetuned-ner"'),vl.forEach(s),yt=l(te,". By default, the repository used will be in your namespace and named after the output directory you set, for example "),ht=r(te,"CODE",{});var ra=i(ht);Lt=l(ra,'"cool_huggingface_user/bert-finetuned-ner"'),ra.forEach(s),Is=l(te,"."),te.forEach(s),be=h(u),j(Rt.$$.fragment,u),jt=h(u),ns=r(u,"P",{});var dt=i(ns);Ta=l(dt,"Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),dt.forEach(s),os=h(u),we=r(u,"P",{});var ia=i(we);Ns=l(ia,"At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a token classification task \u2014 congratulations! But how good is our model, really? We should evaluate some metrics to find out."),ia.forEach(s),this.h()},h(){O(g,"id","defining-the-model"),O(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(g,"href","#defining-the-model"),O(d,"class","relative group"),O(st,"href","/course/chapter3"),O(ke,"id","finetuning-the-model"),O(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(ke,"href","#finetuning-the-model"),O(oe,"class","relative group"),O(ce,"href","https://huggingface.co/huggingface-course"),O(ce,"rel","nofollow")},m(u,D){p(u,d,D),e(d,g),e(g,m),E(k,m,null),e(d,C),e(d,v),e(v,$),p(u,T,D),p(u,P,D),e(P,I),e(P,B),e(B,z),e(P,S),e(P,M),e(M,N),e(P,H),p(u,Z,D),p(u,F,D),e(F,G),e(F,q),e(q,U),e(F,L),e(F,X),e(X,Q),e(F,ee),p(u,ne,D),E(K,u,D),p(u,he,D),p(u,J,D),e(J,W),e(J,R),e(R,se),e(J,fe),p(u,ge,D),E(ae,u,D),p(u,Ie,D),p(u,V,D),e(V,tt),e(V,pe),e(pe,bt),e(V,Zt),e(V,st),e(st,Ks),e(V,Pt),p(u,Kt,D),E(ue,u,D),p(u,Cs,D),E(Ce,u,D),p(u,at,D),E(ve,u,D),p(u,Vt,D),p(u,oe,D),e(oe,ke),e(ke,Ne),E(Se,Ne,null),e(oe,ja),e(oe,wt),e(wt,lt),p(u,Ue,D),p(u,$e,D),e($e,zt),p(u,Jt,D),E(nt,u,D),p(u,Vs,D),p(u,gt,D),e(gt,Te),p(u,Ts,D),p(u,ye,D),e(ye,Ea),p(u,Ds,D),E(Fe,u,D),p(u,ot,D),p(u,me,D),e(me,je),e(me,Le),e(Le,Ye),e(me,qt),e(me,At),e(At,Ps),e(me,xa),e(me,It),e(It,De),e(me,Js),p(u,le,D),E(Nt,u,D),p(u,Qt,D),p(u,Re,D),e(Re,St),e(Re,vt),e(vt,kt),e(Re,Oa),e(Re,Ee),e(Ee,zs),e(Re,Ca),p(u,qs,D),p(u,Pe,D),e(Pe,es),e(Pe,rt),e(rt,Qs),e(Pe,Xe),p(u,ea,D),E(it,u,D),p(u,ts,D),p(u,_e,D),e(_e,ta),e(_e,pt),e(pt,Ft),e(_e,As),e(_e,ce),e(ce,ss),e(ss,ct),e(ce,sa),e(_e,as),e(_e,ls),e(ls,$t),e(_e,yt),e(_e,ht),e(ht,Lt),e(_e,Is),p(u,be,D),E(Rt,u,D),p(u,jt,D),p(u,ns,D),e(ns,Ta),p(u,os,D),p(u,we,D),e(we,Ns),Be=!0},i(u){Be||(b(k.$$.fragment,u),b(K.$$.fragment,u),b(ae.$$.fragment,u),b(ue.$$.fragment,u),b(Ce.$$.fragment,u),b(ve.$$.fragment,u),b(Se.$$.fragment,u),b(nt.$$.fragment,u),b(Fe.$$.fragment,u),b(Nt.$$.fragment,u),b(it.$$.fragment,u),b(Rt.$$.fragment,u),Be=!0)},o(u){w(k.$$.fragment,u),w(K.$$.fragment,u),w(ae.$$.fragment,u),w(ue.$$.fragment,u),w(Ce.$$.fragment,u),w(ve.$$.fragment,u),w(Se.$$.fragment,u),w(nt.$$.fragment,u),w(Fe.$$.fragment,u),w(Nt.$$.fragment,u),w(it.$$.fragment,u),w(Rt.$$.fragment,u),Be=!1},d(u){u&&s(d),x(k),u&&s(T),u&&s(P),u&&s(Z),u&&s(F),u&&s(ne),x(K,u),u&&s(he),u&&s(J),u&&s(ge),x(ae,u),u&&s(Ie),u&&s(V),u&&s(Kt),x(ue,u),u&&s(Cs),x(Ce,u),u&&s(at),x(ve,u),u&&s(Vt),u&&s(oe),x(Se),u&&s(Ue),u&&s($e),u&&s(Jt),x(nt,u),u&&s(Vs),u&&s(gt),u&&s(Ts),u&&s(ye),u&&s(Ds),x(Fe,u),u&&s(ot),u&&s(me),u&&s(le),x(Nt,u),u&&s(Qt),u&&s(Re),u&&s(qs),u&&s(Pe),u&&s(ea),x(it,u),u&&s(ts),u&&s(_e),u&&s(be),x(Rt,u),u&&s(jt),u&&s(ns),u&&s(os),u&&s(we)}}}function $d(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u26A0\uFE0F If you have a model with the wrong number of labels, you will get an obscure error when calling "),m=o("code"),k=a("model.fit()"),C=a(" later. This can be annoying to debug, so make sure you do this check to confirm you have the expected number of labels.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u26A0\uFE0F If you have a model with the wrong number of labels, you will get an obscure error when calling "),m=r($,"CODE",{});var T=i(m);k=l(T,"model.fit()"),T.forEach(s),C=l($," later. This can be annoying to debug, so make sure you do this check to confirm you have the expected number of labels."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function yd(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when calling "),m=o("code"),k=a("model.fit()"),C=a(" and will need to set a new name.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when calling "),m=r($,"CODE",{});var T=i(m);k=l(T,"model.fit()"),T.forEach(s),C=l($," and will need to set a new name."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function jd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U;return B=new A({props:{code:"!pip install seqeval",highlighted:"!pip install seqeval"}}),{c(){d=o("p"),g=a("The traditional framework used to evaluate token classification prediction is "),m=o("a"),k=o("em"),C=a("seqeval"),v=a(". To use this metric, we first need to install the "),$=o("em"),T=a("seqeval"),P=a(" library:"),I=c(),y(B.$$.fragment),z=c(),S=o("p"),M=a("We can then load it via the "),N=o("code"),H=a("load_metric()"),Z=a(" function like we did in "),F=o("a"),G=a("Chapter 3"),q=a(":"),this.h()},l(L){d=r(L,"P",{});var X=i(d);g=l(X,"The traditional framework used to evaluate token classification prediction is "),m=r(X,"A",{href:!0,rel:!0});var Q=i(m);k=r(Q,"EM",{});var ee=i(k);C=l(ee,"seqeval"),ee.forEach(s),Q.forEach(s),v=l(X,". To use this metric, we first need to install the "),$=r(X,"EM",{});var ne=i($);T=l(ne,"seqeval"),ne.forEach(s),P=l(X," library:"),X.forEach(s),I=h(L),j(B.$$.fragment,L),z=h(L),S=r(L,"P",{});var K=i(S);M=l(K,"We can then load it via the "),N=r(K,"CODE",{});var he=i(N);H=l(he,"load_metric()"),he.forEach(s),Z=l(K," function like we did in "),F=r(K,"A",{href:!0});var J=i(F);G=l(J,"Chapter 3"),J.forEach(s),q=l(K,":"),K.forEach(s),this.h()},h(){O(m,"href","https://github.com/chakki-works/seqeval"),O(m,"rel","nofollow"),O(F,"href","/course/chapter3")},m(L,X){p(L,d,X),e(d,g),e(d,m),e(m,k),e(k,C),e(d,v),e(d,$),e($,T),e(d,P),p(L,I,X),E(B,L,X),p(L,z,X),p(L,S,X),e(S,M),e(S,N),e(N,H),e(S,Z),e(S,F),e(F,G),e(S,q),U=!0},i(L){U||(b(B.$$.fragment,L),U=!0)},o(L){w(B.$$.fragment,L),U=!1},d(L){L&&s(d),L&&s(I),x(B,L),L&&s(z),L&&s(S)}}}function Ed(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U,L,X,Q,ee,ne,K,he,J,W;return q=new A({props:{code:"!pip install seqeval",highlighted:"!pip install seqeval"}}),{c(){d=o("p"),g=a("To have the "),m=o("code"),k=a("Trainer"),C=a(" compute a metric every epoch, we will need to define a "),v=o("code"),$=a("compute_metrics()"),T=a(" function that takes the arrays of predictions and labels, and returns a dictionary with the metric names and values."),P=c(),I=o("p"),B=a("The traditional framework used to evaluate token classification prediction is "),z=o("a"),S=o("em"),M=a("seqeval"),N=a(". To use this metric, we first need to install the "),H=o("em"),Z=a("seqeval"),F=a(" library:"),G=c(),y(q.$$.fragment),U=c(),L=o("p"),X=a("We can then load it via the "),Q=o("code"),ee=a("load_metric()"),ne=a(" function like we did in "),K=o("a"),he=a("Chapter 3"),J=a(":"),this.h()},l(R){d=r(R,"P",{});var se=i(d);g=l(se,"To have the "),m=r(se,"CODE",{});var fe=i(m);k=l(fe,"Trainer"),fe.forEach(s),C=l(se," compute a metric every epoch, we will need to define a "),v=r(se,"CODE",{});var ge=i(v);$=l(ge,"compute_metrics()"),ge.forEach(s),T=l(se," function that takes the arrays of predictions and labels, and returns a dictionary with the metric names and values."),se.forEach(s),P=h(R),I=r(R,"P",{});var ae=i(I);B=l(ae,"The traditional framework used to evaluate token classification prediction is "),z=r(ae,"A",{href:!0,rel:!0});var Ie=i(z);S=r(Ie,"EM",{});var V=i(S);M=l(V,"seqeval"),V.forEach(s),Ie.forEach(s),N=l(ae,". To use this metric, we first need to install the "),H=r(ae,"EM",{});var tt=i(H);Z=l(tt,"seqeval"),tt.forEach(s),F=l(ae," library:"),ae.forEach(s),G=h(R),j(q.$$.fragment,R),U=h(R),L=r(R,"P",{});var pe=i(L);X=l(pe,"We can then load it via the "),Q=r(pe,"CODE",{});var bt=i(Q);ee=l(bt,"load_metric()"),bt.forEach(s),ne=l(pe," function like we did in "),K=r(pe,"A",{href:!0});var Zt=i(K);he=l(Zt,"Chapter 3"),Zt.forEach(s),J=l(pe,":"),pe.forEach(s),this.h()},h(){O(z,"href","https://github.com/chakki-works/seqeval"),O(z,"rel","nofollow"),O(K,"href","/course/chapter3")},m(R,se){p(R,d,se),e(d,g),e(d,m),e(m,k),e(d,C),e(d,v),e(v,$),e(d,T),p(R,P,se),p(R,I,se),e(I,B),e(I,z),e(z,S),e(S,M),e(I,N),e(I,H),e(H,Z),e(I,F),p(R,G,se),E(q,R,se),p(R,U,se),p(R,L,se),e(L,X),e(L,Q),e(Q,ee),e(L,ne),e(L,K),e(K,he),e(L,J),W=!0},i(R){W||(b(q.$$.fragment,R),W=!0)},o(R){w(q.$$.fragment,R),W=!1},d(R){R&&s(d),R&&s(P),R&&s(I),R&&s(G),x(q,R),R&&s(U),R&&s(L)}}}function xd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G;return S=new A({props:{code:`import numpy as np

all_predictions = []
all_labels = []
for batch in tf_eval_dataset:
    logits = model.predict(batch)["logits"]
    labels = batch["labels"]
    predictions = np.argmax(logits, axis=-1)
    for prediction, label in zip(predictions, labels):
        for predicted_idx, label_idx in zip(prediction, label):
            if label_idx == -100:
                continue
            all_predictions.append(label_names[predicted_idx])
            all_labels.append(label_names[label_idx])
metric.compute(predictions=[all_predictions], references=[all_labels])`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

all_predictions = []
all_labels = []
<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tf_eval_dataset:
    logits = model.predict(batch)[<span class="hljs-string">&quot;logits&quot;</span>]
    labels = batch[<span class="hljs-string">&quot;labels&quot;</span>]
    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)
    <span class="hljs-keyword">for</span> prediction, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(predictions, labels):
        <span class="hljs-keyword">for</span> predicted_idx, label_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(prediction, label):
            <span class="hljs-keyword">if</span> label_idx == -<span class="hljs-number">100</span>:
                <span class="hljs-keyword">continue</span>
            all_predictions.append(label_names[predicted_idx])
            all_labels.append(label_names[label_idx])
metric.compute(predictions=[all_predictions], references=[all_labels])`}}),N=new A({props:{code:`{'LOC': {'precision': 0.91, 'recall': 0.92, 'f1': 0.91, 'number': 1668},
 'MISC': {'precision': 0.70, 'recall': 0.79, 'f1': 0.74, 'number': 702},
 'ORG': {'precision': 0.85, 'recall': 0.90, 'f1': 0.88, 'number': 1661},
 'PER': {'precision': 0.95, 'recall': 0.95, 'f1': 0.95, 'number': 1617},
 'overall_precision': 0.87,
 'overall_recall': 0.91,
 'overall_f1': 0.89,
 'overall_accuracy': 0.97}`,highlighted:`{<span class="hljs-string">&#x27;LOC&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">0.91</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">0.92</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.91</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1668</span>},
 <span class="hljs-string">&#x27;MISC&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">0.70</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">0.79</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.74</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">702</span>},
 <span class="hljs-string">&#x27;ORG&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">0.85</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">0.90</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.88</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1661</span>},
 <span class="hljs-string">&#x27;PER&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">0.95</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">0.95</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.95</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1617</span>},
 <span class="hljs-string">&#x27;overall_precision&#x27;</span>: <span class="hljs-number">0.87</span>,
 <span class="hljs-string">&#x27;overall_recall&#x27;</span>: <span class="hljs-number">0.91</span>,
 <span class="hljs-string">&#x27;overall_f1&#x27;</span>: <span class="hljs-number">0.89</span>,
 <span class="hljs-string">&#x27;overall_accuracy&#x27;</span>: <span class="hljs-number">0.97</span>}`}}),{c(){d=o("p"),g=a("This is sending back a lot of information! We get the precision, recall, and F1 score for each separate entity, as well as overall. Now let\u2019s see what happens if we try using our actual model predictions to compute some real scores."),m=c(),k=o("p"),C=a("TensorFlow doesn\u2019t like concatenating our predictions together, because they have variable sequence lengths. This means we can\u2019t just use "),v=o("code"),$=a("model.predict()"),T=a(" \u2014 but that\u2019s not going to stop us. We\u2019ll get some predictions a batch at a time and concatenate them into one big long list as we go, dropping the "),P=o("code"),I=a("-100"),B=a(" tokens that indicate masking/padding, then compute metrics on the list at the end:"),z=c(),y(S.$$.fragment),M=c(),y(N.$$.fragment),H=c(),Z=o("p"),F=a("How did your model do, compared to ours? If you got similar numbers, your training was a success!")},l(q){d=r(q,"P",{});var U=i(d);g=l(U,"This is sending back a lot of information! We get the precision, recall, and F1 score for each separate entity, as well as overall. Now let\u2019s see what happens if we try using our actual model predictions to compute some real scores."),U.forEach(s),m=h(q),k=r(q,"P",{});var L=i(k);C=l(L,"TensorFlow doesn\u2019t like concatenating our predictions together, because they have variable sequence lengths. This means we can\u2019t just use "),v=r(L,"CODE",{});var X=i(v);$=l(X,"model.predict()"),X.forEach(s),T=l(L," \u2014 but that\u2019s not going to stop us. We\u2019ll get some predictions a batch at a time and concatenate them into one big long list as we go, dropping the "),P=r(L,"CODE",{});var Q=i(P);I=l(Q,"-100"),Q.forEach(s),B=l(L," tokens that indicate masking/padding, then compute metrics on the list at the end:"),L.forEach(s),z=h(q),j(S.$$.fragment,q),M=h(q),j(N.$$.fragment,q),H=h(q),Z=r(q,"P",{});var ee=i(Z);F=l(ee,"How did your model do, compared to ours? If you got similar numbers, your training was a success!"),ee.forEach(s)},m(q,U){p(q,d,U),e(d,g),p(q,m,U),p(q,k,U),e(k,C),e(k,v),e(v,$),e(k,T),e(k,P),e(P,I),e(k,B),p(q,z,U),E(S,q,U),p(q,M,U),E(N,q,U),p(q,H,U),p(q,Z,U),e(Z,F),G=!0},i(q){G||(b(S.$$.fragment,q),b(N.$$.fragment,q),G=!0)},o(q){w(S.$$.fragment,q),w(N.$$.fragment,q),G=!1},d(q){q&&s(d),q&&s(m),q&&s(k),q&&s(z),x(S,q),q&&s(M),x(N,q),q&&s(H),q&&s(Z)}}}function Od(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U,L,X,Q,ee,ne,K,he,J;return G=new A({props:{code:`import numpy as np


def compute_metrics(eval_preds):
    logits, labels = eval_preds
    predictions = np.argmax(logits, axis=-1)

    # Remove ignored index (special tokens) and convert to labels
    true_labels = [[label_names[l] for l in label if l != -100] for label in labels]
    true_predictions = [
        [label_names[p] for (p, l) in zip(prediction, label) if l != -100]
        for prediction, label in zip(predictions, labels)
    ]
    all_metrics = metric.compute(predictions=true_predictions, references=true_labels)
    return {
        "precision": all_metrics["overall_precision"],
        "recall": all_metrics["overall_recall"],
        "f1": all_metrics["overall_f1"],
        "accuracy": all_metrics["overall_accuracy"],
    }`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_preds</span>):
    logits, labels = eval_preds
    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Remove ignored index (special tokens) and convert to labels</span>
    true_labels = [[label_names[l] <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> label <span class="hljs-keyword">if</span> l != -<span class="hljs-number">100</span>] <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]
    true_predictions = [
        [label_names[p] <span class="hljs-keyword">for</span> (p, l) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(prediction, label) <span class="hljs-keyword">if</span> l != -<span class="hljs-number">100</span>]
        <span class="hljs-keyword">for</span> prediction, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(predictions, labels)
    ]
    all_metrics = metric.compute(predictions=true_predictions, references=true_labels)
    <span class="hljs-keyword">return</span> {
        <span class="hljs-string">&quot;precision&quot;</span>: all_metrics[<span class="hljs-string">&quot;overall_precision&quot;</span>],
        <span class="hljs-string">&quot;recall&quot;</span>: all_metrics[<span class="hljs-string">&quot;overall_recall&quot;</span>],
        <span class="hljs-string">&quot;f1&quot;</span>: all_metrics[<span class="hljs-string">&quot;overall_f1&quot;</span>],
        <span class="hljs-string">&quot;accuracy&quot;</span>: all_metrics[<span class="hljs-string">&quot;overall_accuracy&quot;</span>],
    }`}}),{c(){d=o("p"),g=a("This is sending back a lot of information! We get the precision, recall, and F1 score for each separate entity, as well as overall. For our metric computation we will only keep the overall score, but feel free to tweak the "),m=o("code"),k=a("compute_metrics()"),C=a(" function to return all the metrics you would like reported."),v=c(),$=o("p"),T=a("This "),P=o("code"),I=a("compute_metrics()"),B=a(" function first takes the argmax of the logits to convert them to predictions (as usual, the logits and the probabilities are in the same order, so we don\u2019t need to apply the softmax). Then we have to convert both labels and predictions from integers to strings. We remove all the values where the label is "),z=o("code"),S=a("-100"),M=a(", then pass the results to the "),N=o("code"),H=a("metric.compute()"),Z=a(" method:"),F=c(),y(G.$$.fragment),q=c(),U=o("p"),L=a("Now that this is done, we are almost ready to define our "),X=o("code"),Q=a("Trainer"),ee=a(". We just need a "),ne=o("code"),K=a("model"),he=a(" to fine-tune!")},l(W){d=r(W,"P",{});var R=i(d);g=l(R,"This is sending back a lot of information! We get the precision, recall, and F1 score for each separate entity, as well as overall. For our metric computation we will only keep the overall score, but feel free to tweak the "),m=r(R,"CODE",{});var se=i(m);k=l(se,"compute_metrics()"),se.forEach(s),C=l(R," function to return all the metrics you would like reported."),R.forEach(s),v=h(W),$=r(W,"P",{});var fe=i($);T=l(fe,"This "),P=r(fe,"CODE",{});var ge=i(P);I=l(ge,"compute_metrics()"),ge.forEach(s),B=l(fe," function first takes the argmax of the logits to convert them to predictions (as usual, the logits and the probabilities are in the same order, so we don\u2019t need to apply the softmax). Then we have to convert both labels and predictions from integers to strings. We remove all the values where the label is "),z=r(fe,"CODE",{});var ae=i(z);S=l(ae,"-100"),ae.forEach(s),M=l(fe,", then pass the results to the "),N=r(fe,"CODE",{});var Ie=i(N);H=l(Ie,"metric.compute()"),Ie.forEach(s),Z=l(fe," method:"),fe.forEach(s),F=h(W),j(G.$$.fragment,W),q=h(W),U=r(W,"P",{});var V=i(U);L=l(V,"Now that this is done, we are almost ready to define our "),X=r(V,"CODE",{});var tt=i(X);Q=l(tt,"Trainer"),tt.forEach(s),ee=l(V,". We just need a "),ne=r(V,"CODE",{});var pe=i(ne);K=l(pe,"model"),pe.forEach(s),he=l(V," to fine-tune!"),V.forEach(s)},m(W,R){p(W,d,R),e(d,g),e(d,m),e(m,k),e(d,C),p(W,v,R),p(W,$,R),e($,T),e($,P),e(P,I),e($,B),e($,z),e(z,S),e($,M),e($,N),e(N,H),e($,Z),p(W,F,R),E(G,W,R),p(W,q,R),p(W,U,R),e(U,L),e(U,X),e(X,Q),e(U,ee),e(U,ne),e(ne,K),e(U,he),J=!0},i(W){J||(b(G.$$.fragment,W),J=!0)},o(W){w(G.$$.fragment,W),J=!1},d(W){W&&s(d),W&&s(v),W&&s($),W&&s(F),x(G,W),W&&s(q),W&&s(U)}}}function sd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U,L,X,Q,ee,ne,K,he,J,W,R,se,fe,ge,ae,Ie,V,tt,pe,bt,Zt,st,Ks,Pt,Kt,ue,Cs,Ce,at,ve,Vt,oe,ke,Ne,Se,ja,wt,lt,Ue,$e,zt,Jt,nt,Vs,gt,Te,Ts,ye,Ea,Ds,Fe,ot,me,je,Le,Ye,qt,At,Ps,xa,It,De,Js,le,Nt,Qt,Re,St,vt,kt,Oa,Ee,zs,Ca,qs,Pe,es,rt,Qs,Xe,ea,it,ts,_e,ta,pt,Ft,As,ce,ss,ct,sa,as,ls,$t,yt,ht,Lt,Is,be,Rt,jt,ns,Ta,os,we,Ns,Be,u,D,rs,Ss,Bt,is,ps,bl,cs,Fs,Ls,aa,Rs,ze,Mt,hs,Et,wl,Bs,ds,la,Me,Da,ie,gl,na,Pa,qe,Ze,oa,xt,za,te,Ms,fs,He,vl,ra,dt,ia,en,Ao,tn,sn,Io,an,Ln,qa,Rn,ft,ln,Bn,Aa,kl,us,No,Ia,So,Fo,nn,ms,on,Mn,Na,$l,pa,Lo,Sa,Ro,Bo,Hn,Ke,yl,Fa,Wn,Ot,Mo,rn,pn,Ho,cn,Gn,jl,Un,ca,ha,ut,La,El,_s,Wo,Ra,Go,Uo,Ba,Yo,Xo,hn,Ht,dn,Ve,Yn,da,Zo,Xn,Hs,Zn,bs,Kn,ws,Vn,Ws,gs,fn,Ma,Jn,Wt,fa,xl,Gt,Qn,Ct,Ko,Ha,vs,Vo,Wa,Jo,Qo,Ol,ua,er,Cl,Ga,eo,Ua,Ya,un,re,Xa,mn,_n,tr,Za,sr,mt,Ka,bn,ar,wn,gn,lr,vn,kn,nr,to,Gs,so,Va,ao,Ae,or,Ja,rr,ir,Qa,pr,cr,$n,ks,lo,ma,_a,xe,Tl,yn,no,el,Dl,de,hr,tl,dr,fr,sl,ur,mr,al,_r,br,Pl,ba,wr,wa,gr,vr,zl,ll,oo,Us,ro,Je,io,Tt,kr,jn,En,$r,nl,ol,yr,jr,ql;return k=new Dt({}),K=new A({props:{code:`id2label = {str(i): label for i, label in enumerate(label_names)}
label2id = {v: k for k, v in id2label.items()}`,highlighted:`id2label = {<span class="hljs-built_in">str</span>(i): label <span class="hljs-keyword">for</span> i, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(label_names)}
label2id = {v: k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> id2label.items()}`}}),ae=new A({props:{code:`from transformers import AutoModelForTokenClassification

model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForTokenClassification

model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`}}),ue=new A({props:{code:"model.config.num_labels",highlighted:"model.config.num_labels"}}),Ce=new A({props:{code:"9",highlighted:'<span class="hljs-number">9</span>'}}),ve=new qo({props:{warning:!0,$$slots:{default:[Cd]},$$scope:{ctx:Y}}}),Se=new Dt({}),Te=new A({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`}}),je=new A({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),De=new A({props:{code:`from transformers import TrainingArguments

args = TrainingArguments(
    "bert-finetuned-ner",
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=2e-5,
    num_train_epochs=3,
    weight_decay=0.01,
    push_to_hub=True,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

args = TrainingArguments(
    <span class="hljs-string">&quot;bert-finetuned-ner&quot;</span>,
    evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    save_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    learning_rate=<span class="hljs-number">2e-5</span>,
    num_train_epochs=<span class="hljs-number">3</span>,
    weight_decay=<span class="hljs-number">0.01</span>,
    push_to_hub=<span class="hljs-literal">True</span>,
)`}}),Ft=new qo({props:{$$slots:{default:[Td]},$$scope:{ctx:Y}}}),$t=new A({props:{code:`from transformers import Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=tokenizer,
)
trainer.train()`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    eval_dataset=tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=tokenizer,
)
trainer.train()`}}),we=new A({props:{code:'trainer.push_to_hub(commit_message="Training complete")',highlighted:'trainer.push_to_hub(commit_message=<span class="hljs-string">&quot;Training complete&quot;</span>)'}}),rs=new A({props:{code:"'https://huggingface.co/sgugger/bert-finetuned-ner/commit/26ab21e5b1568f9afeccdaed2d8715f571d786ed'",highlighted:'<span class="hljs-string">&#x27;https://huggingface.co/sgugger/bert-finetuned-ner/commit/26ab21e5b1568f9afeccdaed2d8715f571d786ed&#x27;</span>'}}),Et=new Dt({}),xt=new Dt({}),qa=new A({props:{code:`from torch.utils.data import DataLoader

train_dataloader = DataLoader(
    tokenized_datasets["train"],
    shuffle=True,
    collate_fn=data_collator,
    batch_size=8,
)
eval_dataloader = DataLoader(
    tokenized_datasets["validation"], collate_fn=data_collator, batch_size=8
)`,highlighted:`<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader

train_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)
eval_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>], collate_fn=data_collator, batch_size=<span class="hljs-number">8</span>
)`}}),Aa=new A({props:{code:`model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`,highlighted:`model = AutoModelForTokenClassification.from_pretrained(
    model_checkpoint,
    id2label=id2label,
    label2id=label2id,
)`}}),Na=new A({props:{code:`from torch.optim import AdamW

optimizer = AdamW(model.parameters(), lr=2e-5)`,highlighted:`<span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW

optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)`}}),Ke=new A({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`}}),Fa=new qo({props:{$$slots:{default:[Dd]},$$scope:{ctx:Y}}}),ca=new A({props:{code:`from transformers import get_scheduler

num_train_epochs = 3
num_update_steps_per_epoch = len(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

num_train_epochs = <span class="hljs-number">3</span>
num_update_steps_per_epoch = <span class="hljs-built_in">len</span>(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    <span class="hljs-string">&quot;linear&quot;</span>,
    optimizer=optimizer,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_training_steps=num_training_steps,
)`}}),Ht=new A({props:{code:`from huggingface_hub import Repository, get_full_repo_name

model_name = "bert-finetuned-ner-accelerate"
repo_name = get_full_repo_name(model_name)
repo_name`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository, get_full_repo_name

model_name = <span class="hljs-string">&quot;bert-finetuned-ner-accelerate&quot;</span>
repo_name = get_full_repo_name(model_name)
repo_name`}}),Ve=new A({props:{code:"'sgugger/bert-finetuned-ner-accelerate'",highlighted:'<span class="hljs-string">&#x27;sgugger/bert-finetuned-ner-accelerate&#x27;</span>'}}),Hs=new A({props:{code:`output_dir = "bert-finetuned-ner-accelerate"
repo = Repository(output_dir, clone_from=repo_name)`,highlighted:`output_dir = <span class="hljs-string">&quot;bert-finetuned-ner-accelerate&quot;</span>
repo = Repository(output_dir, clone_from=repo_name)`}}),Gt=new Dt({}),Ga=new A({props:{code:`def postprocess(predictions, labels):
    predictions = predictions.detach().cpu().clone().numpy()
    labels = labels.detach().cpu().clone().numpy()

    # Remove ignored index (special tokens) and convert to labels
    true_labels = [[label_names[l] for l in label if l != -100] for label in labels]
    true_predictions = [
        [label_names[p] for (p, l) in zip(prediction, label) if l != -100]
        for prediction, label in zip(predictions, labels)
    ]
    return true_labels, true_predictions`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">postprocess</span>(<span class="hljs-params">predictions, labels</span>):
    predictions = predictions.detach().cpu().clone().numpy()
    labels = labels.detach().cpu().clone().numpy()

    <span class="hljs-comment"># Remove ignored index (special tokens) and convert to labels</span>
    true_labels = [[label_names[l] <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> label <span class="hljs-keyword">if</span> l != -<span class="hljs-number">100</span>] <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> labels]
    true_predictions = [
        [label_names[p] <span class="hljs-keyword">for</span> (p, l) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(prediction, label) <span class="hljs-keyword">if</span> l != -<span class="hljs-number">100</span>]
        <span class="hljs-keyword">for</span> prediction, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(predictions, labels)
    ]
    <span class="hljs-keyword">return</span> true_labels, true_predictions`}}),_a=new A({props:{code:`from tqdm.auto import tqdm
import torch

progress_bar = tqdm(range(num_training_steps))

for epoch in range(num_train_epochs):
    # Training
    model.train()
    for batch in train_dataloader:
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

    # Evaluation
    model.eval()
    for batch in eval_dataloader:
        with torch.no_grad():
            outputs = model(**batch)

        predictions = outputs.logits.argmax(dim=-1)
        labels = batch["labels"]

        # Necessary to pad predictions and labels for being gathered
        predictions = accelerator.pad_across_processes(predictions, dim=1, pad_index=-100)
        labels = accelerator.pad_across_processes(labels, dim=1, pad_index=-100)

        predictions_gathered = accelerator.gather(predictions)
        labels_gathered = accelerator.gather(labels)

        true_predictions, true_labels = postprocess(predictions_gathered, labels_gathered)
        metric.add_batch(predictions=true_predictions, references=true_labels)

    results = metric.compute()
    print(
        f"epoch {epoch}:",
        {
            key: results[f"overall_{key}"]
            for key in ["precision", "recall", "f1", "accuracy"]
        },
    )

    # Save and upload
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    if accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=f"Training in progress epoch {epoch}", blocking=False
        )`,highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> torch

progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_train_epochs):
    <span class="hljs-comment"># Training</span>
    model.train()
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_dataloader:
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Evaluation</span>
    model.<span class="hljs-built_in">eval</span>()
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> eval_dataloader:
        <span class="hljs-keyword">with</span> torch.no_grad():
            outputs = model(**batch)

        predictions = outputs.logits.argmax(dim=-<span class="hljs-number">1</span>)
        labels = batch[<span class="hljs-string">&quot;labels&quot;</span>]

        <span class="hljs-comment"># Necessary to pad predictions and labels for being gathered</span>
        predictions = accelerator.pad_across_processes(predictions, dim=<span class="hljs-number">1</span>, pad_index=-<span class="hljs-number">100</span>)
        labels = accelerator.pad_across_processes(labels, dim=<span class="hljs-number">1</span>, pad_index=-<span class="hljs-number">100</span>)

        predictions_gathered = accelerator.gather(predictions)
        labels_gathered = accelerator.gather(labels)

        true_predictions, true_labels = postprocess(predictions_gathered, labels_gathered)
        metric.add_batch(predictions=true_predictions, references=true_labels)

    results = metric.compute()
    <span class="hljs-built_in">print</span>(
        <span class="hljs-string">f&quot;epoch <span class="hljs-subst">{epoch}</span>:&quot;</span>,
        {
            key: results[<span class="hljs-string">f&quot;overall_<span class="hljs-subst">{key}</span>&quot;</span>]
            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;precision&quot;</span>, <span class="hljs-string">&quot;recall&quot;</span>, <span class="hljs-string">&quot;f1&quot;</span>, <span class="hljs-string">&quot;accuracy&quot;</span>]
        },
    )

    <span class="hljs-comment"># Save and upload</span>
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    <span class="hljs-keyword">if</span> accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=<span class="hljs-string">f&quot;Training in progress epoch <span class="hljs-subst">{epoch}</span>&quot;</span>, blocking=<span class="hljs-literal">False</span>
        )`}}),el=new A({props:{code:`accelerator.wait_for_everyone()
unwrapped_model = accelerator.unwrap_model(model)
unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)`,highlighted:`accelerator.wait_for_everyone()
unwrapped_model = accelerator.unwrap_model(model)
unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)`}}),{c(){d=o("h3"),g=o("a"),m=o("span"),y(k.$$.fragment),C=c(),v=o("span"),$=a("Defining the model"),T=c(),P=o("p"),I=a("Since we are working on a token classification problem, we will use the "),B=o("code"),z=a("AutoModelForTokenClassification"),S=a(" class. The main thing to remember when defining this model is to pass along some information on the number of labels we have. The easiest way to do this is to pass that number with the "),M=o("code"),N=a("num_labels"),H=a(" argument, but if we want a nice inference widget working like the one we saw at the beginning of this section, it\u2019s better to set the correct label correspondences instead."),Z=c(),F=o("p"),G=a("They should be set by two dictionaries, "),q=o("code"),U=a("id2label"),L=a(" and "),X=o("code"),Q=a("label2id"),ee=a(", which contain the mappings from ID to label and vice versa:"),ne=c(),y(K.$$.fragment),he=c(),J=o("p"),W=a("Now we can just pass them to the "),R=o("code"),se=a("AutoModelForTokenClassification.from_pretrained()"),fe=a(" method, and they will be set in the model\u2019s configuration and then properly saved and uploaded to the Hub:"),ge=c(),y(ae.$$.fragment),Ie=c(),V=o("p"),tt=a("Like when we defined our "),pe=o("code"),bt=a("AutoModelForSequenceClassification"),Zt=a(" in "),st=o("a"),Ks=a("Chapter 3"),Pt=a(", creating the model issues a warning that some weights were not used (the ones from the pretraining head) and some other weights are randomly initialized (the ones from the new token classification head), and that this model should be trained. We will do that in a minute, but first let\u2019s double-check that our model has the right number of labels:"),Kt=c(),y(ue.$$.fragment),Cs=c(),y(Ce.$$.fragment),at=c(),y(ve.$$.fragment),Vt=c(),oe=o("h3"),ke=o("a"),Ne=o("span"),y(Se.$$.fragment),ja=c(),wt=o("span"),lt=a("Fine-tuning the model"),Ue=c(),$e=o("p"),zt=a("We are now ready to train our model! We just need to do two last things before we define our "),Jt=o("code"),nt=a("Trainer"),Vs=a(": log in to Hugging Face and define our training arguments. If you\u2019re working in a notebook, there\u2019s a convenience function to help you with this:"),gt=c(),y(Te.$$.fragment),Ts=c(),ye=o("p"),Ea=a("This will display a widget where you can enter your Hugging Face login credentials."),Ds=c(),Fe=o("p"),ot=a("If you aren\u2019t working in a notebook, just type the following line in your terminal:"),me=c(),y(je.$$.fragment),Le=c(),Ye=o("p"),qt=a("Once this is done, we can define our "),At=o("code"),Ps=a("TrainingArguments"),xa=a(":"),It=c(),y(De.$$.fragment),Js=c(),le=o("p"),Nt=a("You\u2019ve seen most of those before: we set some hyperparameters (like the learning rate, the number of epochs to train for, and the weight decay), and we specify "),Qt=o("code"),Re=a("push_to_hub=True"),St=a(" to indicate that we want to save the model and evaluate it at the end of every epoch, and that we want to upload our results to the Model Hub. Note that you can specify the name of the repository you want to push to with the "),vt=o("code"),kt=a("hub_model_id"),Oa=a(" argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),Ee=o("a"),zs=o("code"),Ca=a("huggingface-course"),qs=a(" organization"),Pe=a(", we added "),es=o("code"),rt=a('hub_model_id="huggingface-course/bert-finetuned-ner"'),Qs=a(" to "),Xe=o("code"),ea=a("TrainingArguments"),it=a(". By default, the repository used will be in your namespace and named after the output directory you set, so in our case it will be "),ts=o("code"),_e=a('"sgugger/bert-finetuned-ner"'),ta=a("."),pt=c(),y(Ft.$$.fragment),As=c(),ce=o("p"),ss=a("Finally, we just pass everything to the "),ct=o("code"),sa=a("Trainer"),as=a(" and launch the training:"),ls=c(),y($t.$$.fragment),yt=c(),ht=o("p"),Lt=a("Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),Is=c(),be=o("p"),Rt=a("Once the training is complete, we use the "),jt=o("code"),ns=a("push_to_hub()"),Ta=a(" method to make sure we upload the most recent version of the model:"),os=c(),y(we.$$.fragment),Ns=c(),Be=o("p"),u=a("This command returns the URL of the commit it just did, if you want to inspect it:"),D=c(),y(rs.$$.fragment),Ss=c(),Bt=o("p"),is=a("The "),ps=o("code"),bl=a("Trainer"),cs=a(" also drafts a model card with all the evaluation results and uploads it. At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a token classification task \u2014 congratulations!"),Fs=c(),Ls=o("p"),aa=a("If you want to dive a bit more deeply into the training loop, we will now show you how to do the same thing using \u{1F917} Accelerate."),Rs=c(),ze=o("h2"),Mt=o("a"),hs=o("span"),y(Et.$$.fragment),wl=c(),Bs=o("span"),ds=a("A custom training loop"),la=c(),Me=o("p"),Da=a("Let\u2019s now take a look at the full training loop, so you can easily customize the parts you need. It will look a lot like what we did in "),ie=o("a"),gl=a("Chapter 3"),na=a(", with a few changes for the evaluation."),Pa=c(),qe=o("h3"),Ze=o("a"),oa=o("span"),y(xt.$$.fragment),za=c(),te=o("span"),Ms=a("Preparing everything for training"),fs=c(),He=o("p"),vl=a("First we need to build the "),ra=o("code"),dt=a("DataLoader"),ia=a("s from our datasets. We\u2019ll reuse our "),en=o("code"),Ao=a("data_collator"),tn=a(" as a "),sn=o("code"),Io=a("collate_fn"),an=a(" and shuffle the training set, but not the validation set:"),Ln=c(),y(qa.$$.fragment),Rn=c(),ft=o("p"),ln=a("Next we reinstantiate our model, to make sure we\u2019re not continuing the fine-tuning from before but starting from the BERT pretrained model again:"),Bn=c(),y(Aa.$$.fragment),kl=c(),us=o("p"),No=a("Then we will need an optimizer. We\u2019ll use the classic "),Ia=o("code"),So=a("AdamW"),Fo=a(", which is like "),nn=o("code"),ms=a("Adam"),on=a(", but with a fix in the way weight decay is applied:"),Mn=c(),y(Na.$$.fragment),$l=c(),pa=o("p"),Lo=a("Once we have all those objects, we can send them to the "),Sa=o("code"),Ro=a("accelerator.prepare()"),Bo=a(" method:"),Hn=c(),y(Ke.$$.fragment),yl=c(),y(Fa.$$.fragment),Wn=c(),Ot=o("p"),Mo=a("Now that we have sent our "),rn=o("code"),pn=a("train_dataloader"),Ho=a(" to "),cn=o("code"),Gn=a("accelerator.prepare()"),jl=a(", we can use its length to compute the number of training steps. Remember that we should always do this after preparing the dataloader, as that method will change its length. We use a classic linear schedule from the learning rate to 0:"),Un=c(),y(ca.$$.fragment),ha=c(),ut=o("p"),La=a("Lastly, to push our model to the Hub, we will need to create a "),El=o("code"),_s=a("Repository"),Wo=a(" object in a working folder. First log in to Hugging Face, if you\u2019re not logged in already. We\u2019ll determine the repository name from the model ID we want to give our model (feel free to replace the "),Ra=o("code"),Go=a("repo_name"),Uo=a(" with your own choice; it just needs to contain your username, which is what the function "),Ba=o("code"),Yo=a("get_full_repo_name()"),Xo=a(" does):"),hn=c(),y(Ht.$$.fragment),dn=c(),y(Ve.$$.fragment),Yn=c(),da=o("p"),Zo=a("Then we can clone that repository in a local folder. If it already exists, this local folder should be an existing clone of the repository we are working with:"),Xn=c(),y(Hs.$$.fragment),Zn=c(),bs=o("p"),Kn=a("We can now upload anything we save in "),ws=o("code"),Vn=a("output_dir"),Ws=a(" by calling the "),gs=o("code"),fn=a("repo.push_to_hub()"),Ma=a(" method. This will help us upload the intermediate models at the end of each epoch."),Jn=c(),Wt=o("h3"),fa=o("a"),xl=o("span"),y(Gt.$$.fragment),Qn=c(),Ct=o("span"),Ko=a("Training loop"),Ha=c(),vs=o("p"),Vo=a("We are now ready to write the full training loop. To simplify its evaluation part, we define this "),Wa=o("code"),Jo=a("postprocess()"),Qo=a(" function that takes predictions and labels and converts them to lists of strings, like our "),Ol=o("code"),ua=a("metric"),er=a(" object expects:"),Cl=c(),y(Ga.$$.fragment),eo=c(),Ua=o("p"),Ya=a("Then we can write the training loop. After defining a progress bar to follow how training goes, the loop has three parts:"),un=c(),re=o("ul"),Xa=o("li"),mn=a("The training in itself, which is the classic iteration over the "),_n=o("code"),tr=a("train_dataloader"),Za=a(", forward pass through the model, then backward pass and optimizer step."),sr=c(),mt=o("li"),Ka=a("The evaluation, in which there is a novelty after getting the outputs of our model on a batch: since two processes may have padded the inputs and labels to different shapes, we need to use "),bn=o("code"),ar=a("accelerator.pad_across_processes()"),wn=a(" to make the predictions and labels the same shape before calling the "),gn=o("code"),lr=a("gather()"),vn=a(" method. If we don\u2019t do this, the evaluation will either error out or hang forever. Then we send the results to "),kn=o("code"),nr=a("metric.add_batch()"),to=a(" and call "),Gs=o("code"),so=a("metric.compute()"),Va=a(" once the evaluation loop is over."),ao=c(),Ae=o("li"),or=a("Saving and uploading, where we first save the model and the tokenizer, then call "),Ja=o("code"),rr=a("repo.push_to_hub()"),ir=a(". Notice that we use the argument "),Qa=o("code"),pr=a("blocking=False"),cr=a(" to tell the \u{1F917} Hub library to push in an asynchronous process. This way, training continues normally and this (long) instruction is executed in the background."),$n=c(),ks=o("p"),lo=a("Here\u2019s the complete code for the training loop:"),ma=c(),y(_a.$$.fragment),xe=c(),Tl=o("p"),yn=a("In case this is the first time you\u2019re seeing a model saved with \u{1F917} Accelerate, let\u2019s take a moment to inspect the three lines of code that go with it:"),no=c(),y(el.$$.fragment),Dl=c(),de=o("p"),hr=a("The first line is self-explanatory: it tells all the processes to wait until everyone is at that stage before continuing. This is to make sure we have the same model in every process before saving. Then we grab the "),tl=o("code"),dr=a("unwrapped_model"),fr=a(", which is the base model we defined. The "),sl=o("code"),ur=a("accelerator.prepare()"),mr=a(" method changes the model to work in distributed training, so it won\u2019t have the "),al=o("code"),_r=a("save_pretrained()"),br=a(" method anymore; the "),Pl=o("code"),ba=a("accelerator.unwrap_model()"),wr=a(" method undoes that step. Lastly, we call "),wa=o("code"),gr=a("save_pretrained()"),vr=a(" but tell that method to use "),zl=o("code"),ll=a("accelerator.save()"),oo=a(" instead of "),Us=o("code"),ro=a("torch.save()"),Je=a("."),io=c(),Tt=o("p"),kr=a("Once this is done, you should have a model that produces results pretty similar to the one trained with the "),jn=o("code"),En=a("Trainer"),$r=a(". You can check the model we trained using this code at "),nl=o("a"),ol=o("em"),yr=a("huggingface-course/bert-finetuned-ner-accelerate"),jr=a(". And if you want to test out any tweaks to the training loop, you can directly implement them by editing the code shown above!"),this.h()},l(n){d=r(n,"H3",{class:!0});var _=i(d);g=r(_,"A",{id:!0,class:!0,href:!0});var Er=i(g);m=r(Er,"SPAN",{});var Al=i(m);j(k.$$.fragment,Al),Al.forEach(s),Er.forEach(s),C=h(_),v=r(_,"SPAN",{});var xr=i(v);$=l(xr,"Defining the model"),xr.forEach(s),_.forEach(s),T=h(n),P=r(n,"P",{});var Ys=i(P);I=l(Ys,"Since we are working on a token classification problem, we will use the "),B=r(Ys,"CODE",{});var ci=i(B);z=l(ci,"AutoModelForTokenClassification"),ci.forEach(s),S=l(Ys," class. The main thing to remember when defining this model is to pass along some information on the number of labels we have. The easiest way to do this is to pass that number with the "),M=r(Ys,"CODE",{});var Or=i(M);N=l(Or,"num_labels"),Or.forEach(s),H=l(Ys," argument, but if we want a nice inference widget working like the one we saw at the beginning of this section, it\u2019s better to set the correct label correspondences instead."),Ys.forEach(s),Z=h(n),F=r(n,"P",{});var $s=i(F);G=l($s,"They should be set by two dictionaries, "),q=r($s,"CODE",{});var Cr=i(q);U=l(Cr,"id2label"),Cr.forEach(s),L=l($s," and "),X=r($s,"CODE",{});var Il=i(X);Q=l(Il,"label2id"),Il.forEach(s),ee=l($s,", which contain the mappings from ID to label and vice versa:"),$s.forEach(s),ne=h(n),j(K.$$.fragment,n),he=h(n),J=r(n,"P",{});var xn=i(J);W=l(xn,"Now we can just pass them to the "),R=r(xn,"CODE",{});var Xs=i(R);se=l(Xs,"AutoModelForTokenClassification.from_pretrained()"),Xs.forEach(s),fe=l(xn," method, and they will be set in the model\u2019s configuration and then properly saved and uploaded to the Hub:"),xn.forEach(s),ge=h(n),j(ae.$$.fragment,n),Ie=h(n),V=r(n,"P",{});var Nl=i(V);tt=l(Nl,"Like when we defined our "),pe=r(Nl,"CODE",{});var po=i(pe);bt=l(po,"AutoModelForSequenceClassification"),po.forEach(s),Zt=l(Nl," in "),st=r(Nl,"A",{href:!0});var hi=i(st);Ks=l(hi,"Chapter 3"),hi.forEach(s),Pt=l(Nl,", creating the model issues a warning that some weights were not used (the ones from the pretraining head) and some other weights are randomly initialized (the ones from the new token classification head), and that this model should be trained. We will do that in a minute, but first let\u2019s double-check that our model has the right number of labels:"),Nl.forEach(s),Kt=h(n),j(ue.$$.fragment,n),Cs=h(n),j(Ce.$$.fragment,n),at=h(n),j(ve.$$.fragment,n),Vt=h(n),oe=r(n,"H3",{class:!0});var co=i(oe);ke=r(co,"A",{id:!0,class:!0,href:!0});var ho=i(ke);Ne=r(ho,"SPAN",{});var di=i(Ne);j(Se.$$.fragment,di),di.forEach(s),ho.forEach(s),ja=h(co),wt=r(co,"SPAN",{});var fi=i(wt);lt=l(fi,"Fine-tuning the model"),fi.forEach(s),co.forEach(s),Ue=h(n),$e=r(n,"P",{});var On=i($e);zt=l(On,"We are now ready to train our model! We just need to do two last things before we define our "),Jt=r(On,"CODE",{});var rl=i(Jt);nt=l(rl,"Trainer"),rl.forEach(s),Vs=l(On,": log in to Hugging Face and define our training arguments. If you\u2019re working in a notebook, there\u2019s a convenience function to help you with this:"),On.forEach(s),gt=h(n),j(Te.$$.fragment,n),Ts=h(n),ye=r(n,"P",{});var Tr=i(ye);Ea=l(Tr,"This will display a widget where you can enter your Hugging Face login credentials."),Tr.forEach(s),Ds=h(n),Fe=r(n,"P",{});var _t=i(Fe);ot=l(_t,"If you aren\u2019t working in a notebook, just type the following line in your terminal:"),_t.forEach(s),me=h(n),j(je.$$.fragment,n),Le=h(n),Ye=r(n,"P",{});var fo=i(Ye);qt=l(fo,"Once this is done, we can define our "),At=r(fo,"CODE",{});var uo=i(At);Ps=l(uo,"TrainingArguments"),uo.forEach(s),xa=l(fo,":"),fo.forEach(s),It=h(n),j(De.$$.fragment,n),Js=h(n),le=r(n,"P",{});var Qe=i(le);Nt=l(Qe,"You\u2019ve seen most of those before: we set some hyperparameters (like the learning rate, the number of epochs to train for, and the weight decay), and we specify "),Qt=r(Qe,"CODE",{});var ui=i(Qt);Re=l(ui,"push_to_hub=True"),ui.forEach(s),St=l(Qe," to indicate that we want to save the model and evaluate it at the end of every epoch, and that we want to upload our results to the Model Hub. Note that you can specify the name of the repository you want to push to with the "),vt=r(Qe,"CODE",{});var mo=i(vt);kt=l(mo,"hub_model_id"),mo.forEach(s),Oa=l(Qe," argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),Ee=r(Qe,"A",{href:!0,rel:!0});var Dr=i(Ee);zs=r(Dr,"CODE",{});var mi=i(zs);Ca=l(mi,"huggingface-course"),mi.forEach(s),qs=l(Dr," organization"),Dr.forEach(s),Pe=l(Qe,", we added "),es=r(Qe,"CODE",{});var _o=i(es);rt=l(_o,'hub_model_id="huggingface-course/bert-finetuned-ner"'),_o.forEach(s),Qs=l(Qe," to "),Xe=r(Qe,"CODE",{});var _i=i(Xe);ea=l(_i,"TrainingArguments"),_i.forEach(s),it=l(Qe,". By default, the repository used will be in your namespace and named after the output directory you set, so in our case it will be "),ts=r(Qe,"CODE",{});var bi=i(ts);_e=l(bi,'"sgugger/bert-finetuned-ner"'),bi.forEach(s),ta=l(Qe,"."),Qe.forEach(s),pt=h(n),j(Ft.$$.fragment,n),As=h(n),ce=r(n,"P",{});var Sl=i(ce);ss=l(Sl,"Finally, we just pass everything to the "),ct=r(Sl,"CODE",{});var wi=i(ct);sa=l(wi,"Trainer"),wi.forEach(s),as=l(Sl," and launch the training:"),Sl.forEach(s),ls=h(n),j($t.$$.fragment,n),yt=h(n),ht=r(n,"P",{});var gi=i(ht);Lt=l(gi,"Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),gi.forEach(s),Is=h(n),be=r(n,"P",{});var Cn=i(be);Rt=l(Cn,"Once the training is complete, we use the "),jt=r(Cn,"CODE",{});var Fl=i(jt);ns=l(Fl,"push_to_hub()"),Fl.forEach(s),Ta=l(Cn," method to make sure we upload the most recent version of the model:"),Cn.forEach(s),os=h(n),j(we.$$.fragment,n),Ns=h(n),Be=r(n,"P",{});var Pr=i(Be);u=l(Pr,"This command returns the URL of the commit it just did, if you want to inspect it:"),Pr.forEach(s),D=h(n),j(rs.$$.fragment,n),Ss=h(n),Bt=r(n,"P",{});var il=i(Bt);is=l(il,"The "),ps=r(il,"CODE",{});var vi=i(ps);bl=l(vi,"Trainer"),vi.forEach(s),cs=l(il," also drafts a model card with all the evaluation results and uploads it. At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a token classification task \u2014 congratulations!"),il.forEach(s),Fs=h(n),Ls=r(n,"P",{});var zr=i(Ls);aa=l(zr,"If you want to dive a bit more deeply into the training loop, we will now show you how to do the same thing using \u{1F917} Accelerate."),zr.forEach(s),Rs=h(n),ze=r(n,"H2",{class:!0});var pl=i(ze);Mt=r(pl,"A",{id:!0,class:!0,href:!0});var ki=i(Mt);hs=r(ki,"SPAN",{});var qr=i(hs);j(Et.$$.fragment,qr),qr.forEach(s),ki.forEach(s),wl=h(pl),Bs=r(pl,"SPAN",{});var Ll=i(Bs);ds=l(Ll,"A custom training loop"),Ll.forEach(s),pl.forEach(s),la=h(n),Me=r(n,"P",{});var Tn=i(Me);Da=l(Tn,"Let\u2019s now take a look at the full training loop, so you can easily customize the parts you need. It will look a lot like what we did in "),ie=r(Tn,"A",{href:!0});var cl=i(ie);gl=l(cl,"Chapter 3"),cl.forEach(s),na=l(Tn,", with a few changes for the evaluation."),Tn.forEach(s),Pa=h(n),qe=r(n,"H3",{class:!0});var bo=i(qe);Ze=r(bo,"A",{id:!0,class:!0,href:!0});var Dn=i(Ze);oa=r(Dn,"SPAN",{});var $i=i(oa);j(xt.$$.fragment,$i),$i.forEach(s),Dn.forEach(s),za=h(bo),te=r(bo,"SPAN",{});var yi=i(te);Ms=l(yi,"Preparing everything for training"),yi.forEach(s),bo.forEach(s),fs=h(n),He=r(n,"P",{});var Zs=i(He);vl=l(Zs,"First we need to build the "),ra=r(Zs,"CODE",{});var ys=i(ra);dt=l(ys,"DataLoader"),ys.forEach(s),ia=l(Zs,"s from our datasets. We\u2019ll reuse our "),en=r(Zs,"CODE",{});var js=i(en);Ao=l(js,"data_collator"),js.forEach(s),tn=l(Zs," as a "),sn=r(Zs,"CODE",{});var Pn=i(sn);Io=l(Pn,"collate_fn"),Pn.forEach(s),an=l(Zs," and shuffle the training set, but not the validation set:"),Zs.forEach(s),Ln=h(n),j(qa.$$.fragment,n),Rn=h(n),ft=r(n,"P",{});var ga=i(ft);ln=l(ga,"Next we reinstantiate our model, to make sure we\u2019re not continuing the fine-tuning from before but starting from the BERT pretrained model again:"),ga.forEach(s),Bn=h(n),j(Aa.$$.fragment,n),kl=h(n),us=r(n,"P",{});var Ut=i(us);No=l(Ut,"Then we will need an optimizer. We\u2019ll use the classic "),Ia=r(Ut,"CODE",{});var wo=i(Ia);So=l(wo,"AdamW"),wo.forEach(s),Fo=l(Ut,", which is like "),nn=r(Ut,"CODE",{});var Rl=i(nn);ms=l(Rl,"Adam"),Rl.forEach(s),on=l(Ut,", but with a fix in the way weight decay is applied:"),Ut.forEach(s),Mn=h(n),j(Na.$$.fragment,n),$l=h(n),pa=r(n,"P",{});var go=i(pa);Lo=l(go,"Once we have all those objects, we can send them to the "),Sa=r(go,"CODE",{});var vo=i(Sa);Ro=l(vo,"accelerator.prepare()"),vo.forEach(s),Bo=l(go," method:"),go.forEach(s),Hn=h(n),j(Ke.$$.fragment,n),yl=h(n),j(Fa.$$.fragment,n),Wn=h(n),Ot=r(n,"P",{});var Bl=i(Ot);Mo=l(Bl,"Now that we have sent our "),rn=r(Bl,"CODE",{});var Ar=i(rn);pn=l(Ar,"train_dataloader"),Ar.forEach(s),Ho=l(Bl," to "),cn=r(Bl,"CODE",{});var Yt=i(cn);Gn=l(Yt,"accelerator.prepare()"),Yt.forEach(s),jl=l(Bl,", we can use its length to compute the number of training steps. Remember that we should always do this after preparing the dataloader, as that method will change its length. We use a classic linear schedule from the learning rate to 0:"),Bl.forEach(s),Un=h(n),j(ca.$$.fragment,n),ha=h(n),ut=r(n,"P",{});var va=i(ut);La=l(va,"Lastly, to push our model to the Hub, we will need to create a "),El=r(va,"CODE",{});var ko=i(El);_s=l(ko,"Repository"),ko.forEach(s),Wo=l(va," object in a working folder. First log in to Hugging Face, if you\u2019re not logged in already. We\u2019ll determine the repository name from the model ID we want to give our model (feel free to replace the "),Ra=r(va,"CODE",{});var ji=i(Ra);Go=l(ji,"repo_name"),ji.forEach(s),Uo=l(va," with your own choice; it just needs to contain your username, which is what the function "),Ba=r(va,"CODE",{});var Ei=i(Ba);Yo=l(Ei,"get_full_repo_name()"),Ei.forEach(s),Xo=l(va," does):"),va.forEach(s),hn=h(n),j(Ht.$$.fragment,n),dn=h(n),j(Ve.$$.fragment,n),Yn=h(n),da=r(n,"P",{});var zn=i(da);Zo=l(zn,"Then we can clone that repository in a local folder. If it already exists, this local folder should be an existing clone of the repository we are working with:"),zn.forEach(s),Xn=h(n),j(Hs.$$.fragment,n),Zn=h(n),bs=r(n,"P",{});var Ml=i(bs);Kn=l(Ml,"We can now upload anything we save in "),ws=r(Ml,"CODE",{});var xi=i(ws);Vn=l(xi,"output_dir"),xi.forEach(s),Ws=l(Ml," by calling the "),gs=r(Ml,"CODE",{});var $o=i(gs);fn=l($o,"repo.push_to_hub()"),$o.forEach(s),Ma=l(Ml," method. This will help us upload the intermediate models at the end of each epoch."),Ml.forEach(s),Jn=h(n),Wt=r(n,"H3",{class:!0});var yo=i(Wt);fa=r(yo,"A",{id:!0,class:!0,href:!0});var Oi=i(fa);xl=r(Oi,"SPAN",{});var Ir=i(xl);j(Gt.$$.fragment,Ir),Ir.forEach(s),Oi.forEach(s),Qn=h(yo),Ct=r(yo,"SPAN",{});var Xt=i(Ct);Ko=l(Xt,"Training loop"),Xt.forEach(s),yo.forEach(s),Ha=h(n),vs=r(n,"P",{});var Hl=i(vs);Vo=l(Hl,"We are now ready to write the full training loop. To simplify its evaluation part, we define this "),Wa=r(Hl,"CODE",{});var Wl=i(Wa);Jo=l(Wl,"postprocess()"),Wl.forEach(s),Qo=l(Hl," function that takes predictions and labels and converts them to lists of strings, like our "),Ol=r(Hl,"CODE",{});var jo=i(Ol);ua=l(jo,"metric"),jo.forEach(s),er=l(Hl," object expects:"),Hl.forEach(s),Cl=h(n),j(Ga.$$.fragment,n),eo=h(n),Ua=r(n,"P",{});var Ci=i(Ua);Ya=l(Ci,"Then we can write the training loop. After defining a progress bar to follow how training goes, the loop has three parts:"),Ci.forEach(s),un=h(n),re=r(n,"UL",{});var Gl=i(re);Xa=r(Gl,"LI",{});var Ul=i(Xa);mn=l(Ul,"The training in itself, which is the classic iteration over the "),_n=r(Ul,"CODE",{});var Ti=i(_n);tr=l(Ti,"train_dataloader"),Ti.forEach(s),Za=l(Ul,", forward pass through the model, then backward pass and optimizer step."),Ul.forEach(s),sr=h(Gl),mt=r(Gl,"LI",{});var Es=i(mt);Ka=l(Es,"The evaluation, in which there is a novelty after getting the outputs of our model on a batch: since two processes may have padded the inputs and labels to different shapes, we need to use "),bn=r(Es,"CODE",{});var Eo=i(bn);ar=l(Eo,"accelerator.pad_across_processes()"),Eo.forEach(s),wn=l(Es," to make the predictions and labels the same shape before calling the "),gn=r(Es,"CODE",{});var Di=i(gn);lr=l(Di,"gather()"),Di.forEach(s),vn=l(Es," method. If we don\u2019t do this, the evaluation will either error out or hang forever. Then we send the results to "),kn=r(Es,"CODE",{});var Pi=i(kn);nr=l(Pi,"metric.add_batch()"),Pi.forEach(s),to=l(Es," and call "),Gs=r(Es,"CODE",{});var Nr=i(Gs);so=l(Nr,"metric.compute()"),Nr.forEach(s),Va=l(Es," once the evaluation loop is over."),Es.forEach(s),ao=h(Gl),Ae=r(Gl,"LI",{});var et=i(Ae);or=l(et,"Saving and uploading, where we first save the model and the tokenizer, then call "),Ja=r(et,"CODE",{});var xs=i(Ja);rr=l(xs,"repo.push_to_hub()"),xs.forEach(s),ir=l(et,". Notice that we use the argument "),Qa=r(et,"CODE",{});var qn=i(Qa);pr=l(qn,"blocking=False"),qn.forEach(s),cr=l(et," to tell the \u{1F917} Hub library to push in an asynchronous process. This way, training continues normally and this (long) instruction is executed in the background."),et.forEach(s),Gl.forEach(s),$n=h(n),ks=r(n,"P",{});var An=i(ks);lo=l(An,"Here\u2019s the complete code for the training loop:"),An.forEach(s),ma=h(n),j(_a.$$.fragment,n),xe=h(n),Tl=r(n,"P",{});var zi=i(Tl);yn=l(zi,"In case this is the first time you\u2019re seeing a model saved with \u{1F917} Accelerate, let\u2019s take a moment to inspect the three lines of code that go with it:"),zi.forEach(s),no=h(n),j(el.$$.fragment,n),Dl=h(n),de=r(n,"P",{});var Oe=i(de);hr=l(Oe,"The first line is self-explanatory: it tells all the processes to wait until everyone is at that stage before continuing. This is to make sure we have the same model in every process before saving. Then we grab the "),tl=r(Oe,"CODE",{});var Yl=i(tl);dr=l(Yl,"unwrapped_model"),Yl.forEach(s),fr=l(Oe,", which is the base model we defined. The "),sl=r(Oe,"CODE",{});var Sr=i(sl);ur=l(Sr,"accelerator.prepare()"),Sr.forEach(s),mr=l(Oe," method changes the model to work in distributed training, so it won\u2019t have the "),al=r(Oe,"CODE",{});var Xl=i(al);_r=l(Xl,"save_pretrained()"),Xl.forEach(s),br=l(Oe," method anymore; the "),Pl=r(Oe,"CODE",{});var Fr=i(Pl);ba=l(Fr,"accelerator.unwrap_model()"),Fr.forEach(s),wr=l(Oe," method undoes that step. Lastly, we call "),wa=r(Oe,"CODE",{});var In=i(wa);gr=l(In,"save_pretrained()"),In.forEach(s),vr=l(Oe," but tell that method to use "),zl=r(Oe,"CODE",{});var qi=i(zl);ll=l(qi,"accelerator.save()"),qi.forEach(s),oo=l(Oe," instead of "),Us=r(Oe,"CODE",{});var Lr=i(Us);ro=l(Lr,"torch.save()"),Lr.forEach(s),Je=l(Oe,"."),Oe.forEach(s),io=h(n),Tt=r(n,"P",{});var Os=i(Tt);kr=l(Os,"Once this is done, you should have a model that produces results pretty similar to the one trained with the "),jn=r(Os,"CODE",{});var Rr=i(jn);En=l(Rr,"Trainer"),Rr.forEach(s),$r=l(Os,". You can check the model we trained using this code at "),nl=r(Os,"A",{href:!0,rel:!0});var Zl=i(nl);ol=r(Zl,"EM",{});var Br=i(ol);yr=l(Br,"huggingface-course/bert-finetuned-ner-accelerate"),Br.forEach(s),Zl.forEach(s),jr=l(Os,". And if you want to test out any tweaks to the training loop, you can directly implement them by editing the code shown above!"),Os.forEach(s),this.h()},h(){O(g,"id","defining-the-model"),O(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(g,"href","#defining-the-model"),O(d,"class","relative group"),O(st,"href","/course/chapter3"),O(ke,"id","finetuning-the-model"),O(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(ke,"href","#finetuning-the-model"),O(oe,"class","relative group"),O(Ee,"href","https://huggingface.co/huggingface-course"),O(Ee,"rel","nofollow"),O(Mt,"id","a-custom-training-loop"),O(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Mt,"href","#a-custom-training-loop"),O(ze,"class","relative group"),O(ie,"href","/course/chapter3/4"),O(Ze,"id","preparing-everything-for-training"),O(Ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Ze,"href","#preparing-everything-for-training"),O(qe,"class","relative group"),O(fa,"id","training-loop"),O(fa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(fa,"href","#training-loop"),O(Wt,"class","relative group"),O(nl,"href","https://huggingface.co/huggingface-course/bert-finetuned-ner-accelerate"),O(nl,"rel","nofollow")},m(n,_){p(n,d,_),e(d,g),e(g,m),E(k,m,null),e(d,C),e(d,v),e(v,$),p(n,T,_),p(n,P,_),e(P,I),e(P,B),e(B,z),e(P,S),e(P,M),e(M,N),e(P,H),p(n,Z,_),p(n,F,_),e(F,G),e(F,q),e(q,U),e(F,L),e(F,X),e(X,Q),e(F,ee),p(n,ne,_),E(K,n,_),p(n,he,_),p(n,J,_),e(J,W),e(J,R),e(R,se),e(J,fe),p(n,ge,_),E(ae,n,_),p(n,Ie,_),p(n,V,_),e(V,tt),e(V,pe),e(pe,bt),e(V,Zt),e(V,st),e(st,Ks),e(V,Pt),p(n,Kt,_),E(ue,n,_),p(n,Cs,_),E(Ce,n,_),p(n,at,_),E(ve,n,_),p(n,Vt,_),p(n,oe,_),e(oe,ke),e(ke,Ne),E(Se,Ne,null),e(oe,ja),e(oe,wt),e(wt,lt),p(n,Ue,_),p(n,$e,_),e($e,zt),e($e,Jt),e(Jt,nt),e($e,Vs),p(n,gt,_),E(Te,n,_),p(n,Ts,_),p(n,ye,_),e(ye,Ea),p(n,Ds,_),p(n,Fe,_),e(Fe,ot),p(n,me,_),E(je,n,_),p(n,Le,_),p(n,Ye,_),e(Ye,qt),e(Ye,At),e(At,Ps),e(Ye,xa),p(n,It,_),E(De,n,_),p(n,Js,_),p(n,le,_),e(le,Nt),e(le,Qt),e(Qt,Re),e(le,St),e(le,vt),e(vt,kt),e(le,Oa),e(le,Ee),e(Ee,zs),e(zs,Ca),e(Ee,qs),e(le,Pe),e(le,es),e(es,rt),e(le,Qs),e(le,Xe),e(Xe,ea),e(le,it),e(le,ts),e(ts,_e),e(le,ta),p(n,pt,_),E(Ft,n,_),p(n,As,_),p(n,ce,_),e(ce,ss),e(ce,ct),e(ct,sa),e(ce,as),p(n,ls,_),E($t,n,_),p(n,yt,_),p(n,ht,_),e(ht,Lt),p(n,Is,_),p(n,be,_),e(be,Rt),e(be,jt),e(jt,ns),e(be,Ta),p(n,os,_),E(we,n,_),p(n,Ns,_),p(n,Be,_),e(Be,u),p(n,D,_),E(rs,n,_),p(n,Ss,_),p(n,Bt,_),e(Bt,is),e(Bt,ps),e(ps,bl),e(Bt,cs),p(n,Fs,_),p(n,Ls,_),e(Ls,aa),p(n,Rs,_),p(n,ze,_),e(ze,Mt),e(Mt,hs),E(Et,hs,null),e(ze,wl),e(ze,Bs),e(Bs,ds),p(n,la,_),p(n,Me,_),e(Me,Da),e(Me,ie),e(ie,gl),e(Me,na),p(n,Pa,_),p(n,qe,_),e(qe,Ze),e(Ze,oa),E(xt,oa,null),e(qe,za),e(qe,te),e(te,Ms),p(n,fs,_),p(n,He,_),e(He,vl),e(He,ra),e(ra,dt),e(He,ia),e(He,en),e(en,Ao),e(He,tn),e(He,sn),e(sn,Io),e(He,an),p(n,Ln,_),E(qa,n,_),p(n,Rn,_),p(n,ft,_),e(ft,ln),p(n,Bn,_),E(Aa,n,_),p(n,kl,_),p(n,us,_),e(us,No),e(us,Ia),e(Ia,So),e(us,Fo),e(us,nn),e(nn,ms),e(us,on),p(n,Mn,_),E(Na,n,_),p(n,$l,_),p(n,pa,_),e(pa,Lo),e(pa,Sa),e(Sa,Ro),e(pa,Bo),p(n,Hn,_),E(Ke,n,_),p(n,yl,_),E(Fa,n,_),p(n,Wn,_),p(n,Ot,_),e(Ot,Mo),e(Ot,rn),e(rn,pn),e(Ot,Ho),e(Ot,cn),e(cn,Gn),e(Ot,jl),p(n,Un,_),E(ca,n,_),p(n,ha,_),p(n,ut,_),e(ut,La),e(ut,El),e(El,_s),e(ut,Wo),e(ut,Ra),e(Ra,Go),e(ut,Uo),e(ut,Ba),e(Ba,Yo),e(ut,Xo),p(n,hn,_),E(Ht,n,_),p(n,dn,_),E(Ve,n,_),p(n,Yn,_),p(n,da,_),e(da,Zo),p(n,Xn,_),E(Hs,n,_),p(n,Zn,_),p(n,bs,_),e(bs,Kn),e(bs,ws),e(ws,Vn),e(bs,Ws),e(bs,gs),e(gs,fn),e(bs,Ma),p(n,Jn,_),p(n,Wt,_),e(Wt,fa),e(fa,xl),E(Gt,xl,null),e(Wt,Qn),e(Wt,Ct),e(Ct,Ko),p(n,Ha,_),p(n,vs,_),e(vs,Vo),e(vs,Wa),e(Wa,Jo),e(vs,Qo),e(vs,Ol),e(Ol,ua),e(vs,er),p(n,Cl,_),E(Ga,n,_),p(n,eo,_),p(n,Ua,_),e(Ua,Ya),p(n,un,_),p(n,re,_),e(re,Xa),e(Xa,mn),e(Xa,_n),e(_n,tr),e(Xa,Za),e(re,sr),e(re,mt),e(mt,Ka),e(mt,bn),e(bn,ar),e(mt,wn),e(mt,gn),e(gn,lr),e(mt,vn),e(mt,kn),e(kn,nr),e(mt,to),e(mt,Gs),e(Gs,so),e(mt,Va),e(re,ao),e(re,Ae),e(Ae,or),e(Ae,Ja),e(Ja,rr),e(Ae,ir),e(Ae,Qa),e(Qa,pr),e(Ae,cr),p(n,$n,_),p(n,ks,_),e(ks,lo),p(n,ma,_),E(_a,n,_),p(n,xe,_),p(n,Tl,_),e(Tl,yn),p(n,no,_),E(el,n,_),p(n,Dl,_),p(n,de,_),e(de,hr),e(de,tl),e(tl,dr),e(de,fr),e(de,sl),e(sl,ur),e(de,mr),e(de,al),e(al,_r),e(de,br),e(de,Pl),e(Pl,ba),e(de,wr),e(de,wa),e(wa,gr),e(de,vr),e(de,zl),e(zl,ll),e(de,oo),e(de,Us),e(Us,ro),e(de,Je),p(n,io,_),p(n,Tt,_),e(Tt,kr),e(Tt,jn),e(jn,En),e(Tt,$r),e(Tt,nl),e(nl,ol),e(ol,yr),e(Tt,jr),ql=!0},i(n){ql||(b(k.$$.fragment,n),b(K.$$.fragment,n),b(ae.$$.fragment,n),b(ue.$$.fragment,n),b(Ce.$$.fragment,n),b(ve.$$.fragment,n),b(Se.$$.fragment,n),b(Te.$$.fragment,n),b(je.$$.fragment,n),b(De.$$.fragment,n),b(Ft.$$.fragment,n),b($t.$$.fragment,n),b(we.$$.fragment,n),b(rs.$$.fragment,n),b(Et.$$.fragment,n),b(xt.$$.fragment,n),b(qa.$$.fragment,n),b(Aa.$$.fragment,n),b(Na.$$.fragment,n),b(Ke.$$.fragment,n),b(Fa.$$.fragment,n),b(ca.$$.fragment,n),b(Ht.$$.fragment,n),b(Ve.$$.fragment,n),b(Hs.$$.fragment,n),b(Gt.$$.fragment,n),b(Ga.$$.fragment,n),b(_a.$$.fragment,n),b(el.$$.fragment,n),ql=!0)},o(n){w(k.$$.fragment,n),w(K.$$.fragment,n),w(ae.$$.fragment,n),w(ue.$$.fragment,n),w(Ce.$$.fragment,n),w(ve.$$.fragment,n),w(Se.$$.fragment,n),w(Te.$$.fragment,n),w(je.$$.fragment,n),w(De.$$.fragment,n),w(Ft.$$.fragment,n),w($t.$$.fragment,n),w(we.$$.fragment,n),w(rs.$$.fragment,n),w(Et.$$.fragment,n),w(xt.$$.fragment,n),w(qa.$$.fragment,n),w(Aa.$$.fragment,n),w(Na.$$.fragment,n),w(Ke.$$.fragment,n),w(Fa.$$.fragment,n),w(ca.$$.fragment,n),w(Ht.$$.fragment,n),w(Ve.$$.fragment,n),w(Hs.$$.fragment,n),w(Gt.$$.fragment,n),w(Ga.$$.fragment,n),w(_a.$$.fragment,n),w(el.$$.fragment,n),ql=!1},d(n){n&&s(d),x(k),n&&s(T),n&&s(P),n&&s(Z),n&&s(F),n&&s(ne),x(K,n),n&&s(he),n&&s(J),n&&s(ge),x(ae,n),n&&s(Ie),n&&s(V),n&&s(Kt),x(ue,n),n&&s(Cs),x(Ce,n),n&&s(at),x(ve,n),n&&s(Vt),n&&s(oe),x(Se),n&&s(Ue),n&&s($e),n&&s(gt),x(Te,n),n&&s(Ts),n&&s(ye),n&&s(Ds),n&&s(Fe),n&&s(me),x(je,n),n&&s(Le),n&&s(Ye),n&&s(It),x(De,n),n&&s(Js),n&&s(le),n&&s(pt),x(Ft,n),n&&s(As),n&&s(ce),n&&s(ls),x($t,n),n&&s(yt),n&&s(ht),n&&s(Is),n&&s(be),n&&s(os),x(we,n),n&&s(Ns),n&&s(Be),n&&s(D),x(rs,n),n&&s(Ss),n&&s(Bt),n&&s(Fs),n&&s(Ls),n&&s(Rs),n&&s(ze),x(Et),n&&s(la),n&&s(Me),n&&s(Pa),n&&s(qe),x(xt),n&&s(fs),n&&s(He),n&&s(Ln),x(qa,n),n&&s(Rn),n&&s(ft),n&&s(Bn),x(Aa,n),n&&s(kl),n&&s(us),n&&s(Mn),x(Na,n),n&&s($l),n&&s(pa),n&&s(Hn),x(Ke,n),n&&s(yl),x(Fa,n),n&&s(Wn),n&&s(Ot),n&&s(Un),x(ca,n),n&&s(ha),n&&s(ut),n&&s(hn),x(Ht,n),n&&s(dn),x(Ve,n),n&&s(Yn),n&&s(da),n&&s(Xn),x(Hs,n),n&&s(Zn),n&&s(bs),n&&s(Jn),n&&s(Wt),x(Gt),n&&s(Ha),n&&s(vs),n&&s(Cl),x(Ga,n),n&&s(eo),n&&s(Ua),n&&s(un),n&&s(re),n&&s($n),n&&s(ks),n&&s(ma),x(_a,n),n&&s(xe),n&&s(Tl),n&&s(no),x(el,n),n&&s(Dl),n&&s(de),n&&s(io),n&&s(Tt)}}}function Cd(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u26A0\uFE0F If you have a model with the wrong number of labels, you will get an obscure error when calling the "),m=o("code"),k=a("Trainer.train()"),C=a(" method later on (something like \u201CCUDA error: device-side assert triggered\u201D). This is the number one cause of bugs reported by users for such errors, so make sure you do this check to confirm that you have the expected number of labels.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u26A0\uFE0F If you have a model with the wrong number of labels, you will get an obscure error when calling the "),m=r($,"CODE",{});var T=i(m);k=l(T,"Trainer.train()"),T.forEach(s),C=l($," method later on (something like \u201CCUDA error: device-side assert triggered\u201D). This is the number one cause of bugs reported by users for such errors, so make sure you do this check to confirm that you have the expected number of labels."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function Td(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when defining your "),m=o("code"),k=a("Trainer"),C=a(" and will need to set a new name.")},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when defining your "),m=r($,"CODE",{});var T=i(m);k=l(T,"Trainer"),T.forEach(s),C=l($," and will need to set a new name."),$.forEach(s)},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function Dd(Y){let d,g,m,k,C;return{c(){d=o("p"),g=a("\u{1F6A8} If you\u2019re training on a TPU, you\u2019ll need to move all the code starting from the cell above into a dedicated training function. See "),m=o("a"),k=a("Chapter 3"),C=a(" for more details."),this.h()},l(v){d=r(v,"P",{});var $=i(d);g=l($,"\u{1F6A8} If you\u2019re training on a TPU, you\u2019ll need to move all the code starting from the cell above into a dedicated training function. See "),m=r($,"A",{href:!0});var T=i(m);k=l(T,"Chapter 3"),T.forEach(s),C=l($," for more details."),$.forEach(s),this.h()},h(){O(m,"href","/course/chapter3")},m(v,$){p(v,d,$),e(d,g),e(d,m),e(m,k),e(d,C)},d(v){v&&s(d)}}}function Pd(Y){let d,g,m,k,C,v,$,T,P,I,B,z,S,M,N,H,Z,F,G,q,U,L,X,Q,ee,ne,K,he,J,W,R,se,fe,ge,ae,Ie,V,tt,pe,bt,Zt,st,Ks,Pt,Kt,ue,Cs,Ce,at,ve,Vt,oe,ke,Ne,Se,ja,wt,lt,Ue,$e,zt,Jt,nt,Vs,gt,Te,Ts,ye,Ea,Ds,Fe,ot,me,je,Le,Ye,qt,At,Ps,xa,It,De,Js,le,Nt,Qt,Re,St,vt,kt,Oa,Ee,zs,Ca,qs,Pe,es,rt,Qs,Xe,ea,it,ts,_e,ta,pt,Ft,As,ce,ss,ct,sa,as,ls,$t,yt,ht,Lt,Is,be,Rt,jt,ns,Ta,os,we,Ns,Be,u,D,rs,Ss,Bt,is,ps,bl,cs,Fs,Ls,aa,Rs,ze,Mt,hs,Et,wl,Bs,ds,la,Me,Da,ie,gl,na,Pa,qe,Ze,oa,xt,za,te,Ms,fs,He,vl,ra,dt,ia,en,Ao,tn,sn,Io,an,Ln,qa,Rn,ft,ln,Bn,Aa,kl,us,No,Ia,So,Fo,nn,ms,on,Mn,Na,$l,pa,Lo,Sa,Ro,Bo,Hn,Ke,yl,Fa,Wn,Ot,Mo,rn,pn,Ho,cn,Gn,jl,Un,ca,ha,ut,La,El,_s,Wo,Ra,Go,Uo,Ba,Yo,Xo,hn,Ht,dn,Ve,Yn,da,Zo,Xn,Hs,Zn,bs,Kn,ws,Vn,Ws,gs,fn,Ma,Jn,Wt,fa,xl,Gt,Qn,Ct,Ko,Ha,vs,Vo,Wa,Jo,Qo,Ol,ua,er,Cl,Ga,eo,Ua,Ya,un,re,Xa,mn,_n,tr,Za,sr,mt,Ka,bn,ar,wn,gn,lr,vn,kn,nr,to,Gs,so,Va,ao,Ae,or,Ja,rr,ir,Qa,pr,cr,$n,ks,lo,ma,_a,xe,Tl,yn,no,el,Dl,de,hr,tl,dr,fr,sl,ur,mr,al,_r,br,Pl,ba,wr,wa,gr,vr,zl,ll,oo,Us,ro,Je,io,Tt,kr,jn,En,$r,nl,ol,yr,jr,ql,n,_,Er,Al,xr,Ys,ci,Or,$s,Cr,Il,xn,Xs,Nl,po,hi,co,ho,di,fi,On,rl,Tr,_t,fo,uo,Qe,ui,mo,Dr,mi,_o,_i,bi,Sl,wi,gi,Cn,Fl,Pr,il,vi,zr,pl,ki,qr,Ll,Tn,cl,bo,Dn,$i,yi,Zs,ys,js,Pn,ga,Ut,wo,Rl,go,vo,Bl,Ar,Yt,va,ko,ji,Ei,zn,Ml,xi,$o,yo,Oi,Ir,Xt,Hl,Wl,jo,Ci,Gl,Ul,Ti,Es,Eo,Di,Pi,Nr,et,xs,qn,An,zi,Oe,Yl,Sr,Xl,Fr,In,qi,Lr,Os,Rr,Zl,Br,hl,dl,Ai,Ii,Nn,xo,Ji,Mr,Np,Qi,Sp,op,fl,ul,Ni,Hr,rp,Si,Fp,ip,Wr,pp,Gr,cp,Fi,Lp,hp,Ur,dp,Li,Rp,fp,Yr,up,ml,_l,Ri,Bi,Sn,Oo,ep,Xr,Bp,tp,Mp,mp,Co,Hp,sp,Wp,Gp,_p,Zr,bp,Kr,wp,Mi,Up,gp;m=new cd({props:{fw:Y[0]}}),T=new Dt({});const Xp=[dd,hd],Vr=[];function Zp(t,f){return t[0]==="pt"?0:1}S=Zp(Y),M=Vr[S]=Xp[S](Y),Pt=new ed({props:{id:"wVHdVlPScxA"}}),zt=new Dt({}),ot=new qo({props:{$$slots:{default:[fd]},$$scope:{ctx:Y}}}),qt=new Dt({}),St=new A({props:{code:`from datasets import load_dataset

raw_datasets = load_dataset("conll2003")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

raw_datasets = load_dataset(<span class="hljs-string">&quot;conll2003&quot;</span>)`}}),Pe=new A({props:{code:"raw_datasets",highlighted:"raw_datasets"}}),rt=new A({props:{code:`DatasetDict({
    train: Dataset({
        features: ['chunk_tags', 'id', 'ner_tags', 'pos_tags', 'tokens'],
        num_rows: 14041
    })
    validation: Dataset({
        features: ['chunk_tags', 'id', 'ner_tags', 'pos_tags', 'tokens'],
        num_rows: 3250
    })
    test: Dataset({
        features: ['chunk_tags', 'id', 'ner_tags', 'pos_tags', 'tokens'],
        num_rows: 3453
    })
})`,highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;chunk_tags&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;ner_tags&#x27;</span>, <span class="hljs-string">&#x27;pos_tags&#x27;</span>, <span class="hljs-string">&#x27;tokens&#x27;</span>],
        num_rows: <span class="hljs-number">14041</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;chunk_tags&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;ner_tags&#x27;</span>, <span class="hljs-string">&#x27;pos_tags&#x27;</span>, <span class="hljs-string">&#x27;tokens&#x27;</span>],
        num_rows: <span class="hljs-number">3250</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;chunk_tags&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;ner_tags&#x27;</span>, <span class="hljs-string">&#x27;pos_tags&#x27;</span>, <span class="hljs-string">&#x27;tokens&#x27;</span>],
        num_rows: <span class="hljs-number">3453</span>
    })
})`}}),ce=new A({props:{code:'raw_datasets["train"][0]["tokens"]',highlighted:'raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;tokens&quot;</span>]'}}),ct=new A({props:{code:"['EU', 'rejects', 'German', 'call', 'to', 'boycott', 'British', 'lamb', '.']",highlighted:'[<span class="hljs-string">&#x27;EU&#x27;</span>, <span class="hljs-string">&#x27;rejects&#x27;</span>, <span class="hljs-string">&#x27;German&#x27;</span>, <span class="hljs-string">&#x27;call&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;boycott&#x27;</span>, <span class="hljs-string">&#x27;British&#x27;</span>, <span class="hljs-string">&#x27;lamb&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>]'}}),yt=new A({props:{code:'raw_datasets["train"][0]["ner_tags"]',highlighted:'raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;ner_tags&quot;</span>]'}}),Lt=new A({props:{code:"[3, 0, 7, 0, 0, 0, 7, 0, 0]",highlighted:'[<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]'}}),we=new A({props:{code:`ner_feature = raw_datasets["train"].features["ner_tags"]
ner_feature`,highlighted:`ner_feature = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].features[<span class="hljs-string">&quot;ner_tags&quot;</span>]
ner_feature`}}),Be=new A({props:{code:"Sequence(feature=ClassLabel(num_classes=9, names=['O', 'B-PER', 'I-PER', 'B-ORG', 'I-ORG', 'B-LOC', 'I-LOC', 'B-MISC', 'I-MISC'], names_file=None, id=None), length=-1, id=None)",highlighted:'<span class="hljs-type">Sequence</span>(feature=ClassLabel(num_classes=<span class="hljs-number">9</span>, names=[<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B-PER&#x27;</span>, <span class="hljs-string">&#x27;I-PER&#x27;</span>, <span class="hljs-string">&#x27;B-ORG&#x27;</span>, <span class="hljs-string">&#x27;I-ORG&#x27;</span>, <span class="hljs-string">&#x27;B-LOC&#x27;</span>, <span class="hljs-string">&#x27;I-LOC&#x27;</span>, <span class="hljs-string">&#x27;B-MISC&#x27;</span>, <span class="hljs-string">&#x27;I-MISC&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)'}}),ds=new A({props:{code:`label_names = ner_feature.feature.names
label_names`,highlighted:`label_names = ner_feature.feature.names
label_names`}}),Me=new A({props:{code:"['O', 'B-PER', 'I-PER', 'B-ORG', 'I-ORG', 'B-LOC', 'I-LOC', 'B-MISC', 'I-MISC']",highlighted:'[<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B-PER&#x27;</span>, <span class="hljs-string">&#x27;I-PER&#x27;</span>, <span class="hljs-string">&#x27;B-ORG&#x27;</span>, <span class="hljs-string">&#x27;I-ORG&#x27;</span>, <span class="hljs-string">&#x27;B-LOC&#x27;</span>, <span class="hljs-string">&#x27;I-LOC&#x27;</span>, <span class="hljs-string">&#x27;B-MISC&#x27;</span>, <span class="hljs-string">&#x27;I-MISC&#x27;</span>]'}}),ha=new A({props:{code:`words = raw_datasets["train"][0]["tokens"]
labels = raw_datasets["train"][0]["ner_tags"]
line1 = ""
line2 = ""
for word, label in zip(words, labels):
    full_label = label_names[label]
    max_length = max(len(word), len(full_label))
    line1 += word + " " * (max_length - len(word) + 1)
    line2 += full_label + " " * (max_length - len(full_label) + 1)

print(line1)
print(line2)`,highlighted:`words = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;tokens&quot;</span>]
labels = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;ner_tags&quot;</span>]
line1 = <span class="hljs-string">&quot;&quot;</span>
line2 = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> word, label <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(words, labels):
    full_label = label_names[label]
    max_length = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">len</span>(word), <span class="hljs-built_in">len</span>(full_label))
    line1 += word + <span class="hljs-string">&quot; &quot;</span> * (max_length - <span class="hljs-built_in">len</span>(word) + <span class="hljs-number">1</span>)
    line2 += full_label + <span class="hljs-string">&quot; &quot;</span> * (max_length - <span class="hljs-built_in">len</span>(full_label) + <span class="hljs-number">1</span>)

<span class="hljs-built_in">print</span>(line1)
<span class="hljs-built_in">print</span>(line2)`}}),La=new A({props:{code:`'EU    rejects German call to boycott British lamb .'
'B-ORG O       B-MISC O    O  O       B-MISC  O    O'`,highlighted:`<span class="hljs-string">&#x27;EU    rejects German call to boycott British lamb .&#x27;</span>
<span class="hljs-string">&#x27;B-ORG O       B-MISC O    O  O       B-MISC  O    O&#x27;</span>`}}),Ht=new A({props:{code:`'Germany \\'s representative to the European Union \\'s veterinary committee Werner Zwingmann said on Wednesday consumers should buy sheepmeat from countries other than Britain until the scientific advice was clearer .'
'B-LOC   O  O              O  O   B-ORG    I-ORG O  O          O         B-PER  I-PER     O    O  O         O         O      O   O         O    O         O     O    B-LOC   O     O   O          O      O   O       O'`,highlighted:`<span class="hljs-string">&#x27;Germany \\&#x27;s representative to the European Union \\&#x27;s veterinary committee Werner Zwingmann said on Wednesday consumers should buy sheepmeat from countries other than Britain until the scientific advice was clearer .&#x27;</span>
<span class="hljs-string">&#x27;B-LOC   O  O              O  O   B-ORG    I-ORG O  O          O         B-PER  I-PER     O    O  O         O         O      O   O         O    O         O     O    B-LOC   O     O   O          O      O   O       O&#x27;</span>`}}),ws=new qo({props:{$$slots:{default:[ud]},$$scope:{ctx:Y}}}),Ma=new Dt({}),Gt=new ed({props:{id:"iY2AZYdZAr0"}}),Ya=new A({props:{code:`from transformers import AutoTokenizer

model_checkpoint = "bert-base-cased"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

model_checkpoint = <span class="hljs-string">&quot;bert-base-cased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`}}),Gs=new A({props:{code:"tokenizer.is_fast",highlighted:"tokenizer.is_fast"}}),Va=new A({props:{code:"True",highlighted:'<span class="hljs-literal">True</span>'}}),ks=new A({props:{code:`inputs = tokenizer(raw_datasets["train"][0]["tokens"], is_split_into_words=True)
inputs.tokens()`,highlighted:`inputs = tokenizer(raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;tokens&quot;</span>], is_split_into_words=<span class="hljs-literal">True</span>)
inputs.tokens()`}}),ma=new A({props:{code:"['[CLS]', 'EU', 'rejects', 'German', 'call', 'to', 'boycott', 'British', 'la', '##mb', '.', '[SEP]']",highlighted:'[<span class="hljs-string">&#x27;[CLS]&#x27;</span>, <span class="hljs-string">&#x27;EU&#x27;</span>, <span class="hljs-string">&#x27;rejects&#x27;</span>, <span class="hljs-string">&#x27;German&#x27;</span>, <span class="hljs-string">&#x27;call&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>, <span class="hljs-string">&#x27;boycott&#x27;</span>, <span class="hljs-string">&#x27;British&#x27;</span>, <span class="hljs-string">&#x27;la&#x27;</span>, <span class="hljs-string">&#x27;##mb&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>]'}}),ll=new A({props:{code:"inputs.word_ids()",highlighted:"inputs.word_ids()"}}),Us=new A({props:{code:"[None, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, None]",highlighted:'[<span class="hljs-literal">None</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-literal">None</span>]'}}),Al=new A({props:{code:`def align_labels_with_tokens(labels, word_ids):
    new_labels = []
    current_word = None
    for word_id in word_ids:
        if word_id != current_word:
            # Start of a new word!
            current_word = word_id
            label = -100 if word_id is None else labels[word_id]
            new_labels.append(label)
        elif word_id is None:
            # Special token
            new_labels.append(-100)
        else:
            # Same word as previous token
            label = labels[word_id]
            # If the label is B-XXX we change it to I-XXX
            if label % 2 == 1:
                label += 1
            new_labels.append(label)

    return new_labels`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">align_labels_with_tokens</span>(<span class="hljs-params">labels, word_ids</span>):
    new_labels = []
    current_word = <span class="hljs-literal">None</span>
    <span class="hljs-keyword">for</span> word_id <span class="hljs-keyword">in</span> word_ids:
        <span class="hljs-keyword">if</span> word_id != current_word:
            <span class="hljs-comment"># Start of a new word!</span>
            current_word = word_id
            label = -<span class="hljs-number">100</span> <span class="hljs-keyword">if</span> word_id <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> labels[word_id]
            new_labels.append(label)
        <span class="hljs-keyword">elif</span> word_id <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
            <span class="hljs-comment"># Special token</span>
            new_labels.append(-<span class="hljs-number">100</span>)
        <span class="hljs-keyword">else</span>:
            <span class="hljs-comment"># Same word as previous token</span>
            label = labels[word_id]
            <span class="hljs-comment"># If the label is B-XXX we change it to I-XXX</span>
            <span class="hljs-keyword">if</span> label % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:
                label += <span class="hljs-number">1</span>
            new_labels.append(label)

    <span class="hljs-keyword">return</span> new_labels`}}),$s=new A({props:{code:`labels = raw_datasets["train"][0]["ner_tags"]
word_ids = inputs.word_ids()
print(labels)
print(align_labels_with_tokens(labels, word_ids))`,highlighted:`labels = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;ner_tags&quot;</span>]
word_ids = inputs.word_ids()
<span class="hljs-built_in">print</span>(labels)
<span class="hljs-built_in">print</span>(align_labels_with_tokens(labels, word_ids))`}}),Il=new A({props:{code:`[3, 0, 7, 0, 0, 0, 7, 0, 0]
[-100, 3, 0, 7, 0, 0, 0, 7, 0, 0, 0, -100]`,highlighted:`[<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
[-<span class="hljs-number">100</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">100</span>]`}}),rl=new qo({props:{$$slots:{default:[md]},$$scope:{ctx:Y}}}),Fl=new A({props:{code:`def tokenize_and_align_labels(examples):
    tokenized_inputs = tokenizer(
        examples["tokens"], truncation=True, is_split_into_words=True
    )
    all_labels = examples["ner_tags"]
    new_labels = []
    for i, labels in enumerate(all_labels):
        word_ids = tokenized_inputs.word_ids(i)
        new_labels.append(align_labels_with_tokens(labels, word_ids))

    tokenized_inputs["labels"] = new_labels
    return tokenized_inputs`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_and_align_labels</span>(<span class="hljs-params">examples</span>):
    tokenized_inputs = tokenizer(
        examples[<span class="hljs-string">&quot;tokens&quot;</span>], truncation=<span class="hljs-literal">True</span>, is_split_into_words=<span class="hljs-literal">True</span>
    )
    all_labels = examples[<span class="hljs-string">&quot;ner_tags&quot;</span>]
    new_labels = []
    <span class="hljs-keyword">for</span> i, labels <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(all_labels):
        word_ids = tokenized_inputs.word_ids(i)
        new_labels.append(align_labels_with_tokens(labels, word_ids))

    tokenized_inputs[<span class="hljs-string">&quot;labels&quot;</span>] = new_labels
    <span class="hljs-keyword">return</span> tokenized_inputs`}}),Ll=new A({props:{code:`tokenized_datasets = raw_datasets.map(
    tokenize_and_align_labels,
    batched=True,
    remove_columns=raw_datasets["train"].column_names,
)`,highlighted:`tokenized_datasets = raw_datasets.<span class="hljs-built_in">map</span>(
    tokenize_and_align_labels,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].column_names,
)`}});const Kp=[bd,_d],Jr=[];function Vp(t,f){return t[0]==="pt"?0:1}ys=Vp(Y),js=Jr[ys]=Kp[ys](Y),Rl=new Dt({});const Jp=[gd,wd],Qr=[];function Qp(t,f){return t[0]==="pt"?0:1}et=Qp(Y),xs=Qr[et]=Jp[et](Y),Yl=new A({props:{code:`batch = data_collator([tokenized_datasets["train"][i] for i in range(2)])
batch["labels"]`,highlighted:`batch = data_collator([tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)])
batch[<span class="hljs-string">&quot;labels&quot;</span>]`}}),Xl=new A({props:{code:`tensor([[-100,    3,    0,    7,    0,    0,    0,    7,    0,    0,    0, -100],
        [-100,    1,    2, -100, -100, -100, -100, -100, -100, -100, -100, -100]])`,highlighted:`tensor([[-<span class="hljs-number">100</span>,    <span class="hljs-number">3</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">7</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">7</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>, -<span class="hljs-number">100</span>],
        [-<span class="hljs-number">100</span>,    <span class="hljs-number">1</span>,    <span class="hljs-number">2</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>, -<span class="hljs-number">100</span>]])`}}),Os=new A({props:{code:`for i in range(2):
    print(tokenized_datasets["train"][i]["labels"])`,highlighted:`<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):
    <span class="hljs-built_in">print</span>(tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][i][<span class="hljs-string">&quot;labels&quot;</span>])`}}),Zl=new A({props:{code:`[-100, 3, 0, 7, 0, 0, 0, 7, 0, 0, 0, -100]
[-100, 1, 2, -100]`,highlighted:`[-<span class="hljs-number">100</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">100</span>]
[-<span class="hljs-number">100</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">100</span>]`}});const ec=[kd,vd],ei=[];function tc(t,f){return t[0]==="pt"?0:1}hl=tc(Y),dl=ei[hl]=ec[hl](Y);let We=Y[0]==="tf"&&td(Y);Mr=new Dt({});const sc=[Ed,jd],ti=[];function ac(t,f){return t[0]==="pt"?0:1}fl=ac(Y),ul=ti[fl]=sc[fl](Y),Hr=new A({props:{code:`from datasets import load_metric

metric = load_metric("seqeval")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric

metric = load_metric(<span class="hljs-string">&quot;seqeval&quot;</span>)`}}),Wr=new A({props:{code:`labels = raw_datasets["train"][0]["ner_tags"]
labels = [label_names[i] for i in labels]
labels`,highlighted:`labels = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;ner_tags&quot;</span>]
labels = [label_names[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> labels]
labels`}}),Gr=new A({props:{code:"['B-ORG', 'O', 'B-MISC', 'O', 'O', 'O', 'B-MISC', 'O', 'O']",highlighted:'[<span class="hljs-string">&#x27;B-ORG&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B-MISC&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B-MISC&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>]'}}),Ur=new A({props:{code:`predictions = labels.copy()
predictions[2] = "O"
metric.compute(predictions=[predictions], references=[labels])`,highlighted:`predictions = labels.copy()
predictions[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;O&quot;</span>
metric.compute(predictions=[predictions], references=[labels])`}}),Yr=new A({props:{code:`{'MISC': {'precision': 1.0, 'recall': 0.5, 'f1': 0.67, 'number': 2},
 'ORG': {'precision': 1.0, 'recall': 1.0, 'f1': 1.0, 'number': 1},
 'overall_precision': 1.0,
 'overall_recall': 0.67,
 'overall_f1': 0.8,
 'overall_accuracy': 0.89}`,highlighted:`{<span class="hljs-string">&#x27;MISC&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">0.67</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">2</span>},
 <span class="hljs-string">&#x27;ORG&#x27;</span>: {<span class="hljs-string">&#x27;precision&#x27;</span>: <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;recall&#x27;</span>: <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;number&#x27;</span>: <span class="hljs-number">1</span>},
 <span class="hljs-string">&#x27;overall_precision&#x27;</span>: <span class="hljs-number">1.0</span>,
 <span class="hljs-string">&#x27;overall_recall&#x27;</span>: <span class="hljs-number">0.67</span>,
 <span class="hljs-string">&#x27;overall_f1&#x27;</span>: <span class="hljs-number">0.8</span>,
 <span class="hljs-string">&#x27;overall_accuracy&#x27;</span>: <span class="hljs-number">0.89</span>}`}});const lc=[Od,xd],si=[];function nc(t,f){return t[0]==="pt"?0:1}ml=nc(Y),_l=si[ml]=lc[ml](Y);let Ge=Y[0]==="pt"&&sd(Y);return Xr=new Dt({}),Zr=new A({props:{code:`from transformers import pipeline

# Replace this with your own checkpoint
model_checkpoint = "huggingface-course/bert-finetuned-ner"
token_classifier = pipeline(
    "token-classification", model=model_checkpoint, aggregation_strategy="simple"
)
token_classifier("My name is Sylvain and I work at Hugging Face in Brooklyn.")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-comment"># Replace this with your own checkpoint</span>
model_checkpoint = <span class="hljs-string">&quot;huggingface-course/bert-finetuned-ner&quot;</span>
token_classifier = pipeline(
    <span class="hljs-string">&quot;token-classification&quot;</span>, model=model_checkpoint, aggregation_strategy=<span class="hljs-string">&quot;simple&quot;</span>
)
token_classifier(<span class="hljs-string">&quot;My name is Sylvain and I work at Hugging Face in Brooklyn.&quot;</span>)`}}),Kr=new A({props:{code:`[{'entity_group': 'PER', 'score': 0.9988506, 'word': 'Sylvain', 'start': 11, 'end': 18},
 {'entity_group': 'ORG', 'score': 0.9647625, 'word': 'Hugging Face', 'start': 33, 'end': 45},
 {'entity_group': 'LOC', 'score': 0.9986118, 'word': 'Brooklyn', 'start': 49, 'end': 57}]`,highlighted:`[{<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;PER&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9988506</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;Sylvain&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">18</span>},
 {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;ORG&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9647625</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;Hugging Face&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">33</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">45</span>},
 {<span class="hljs-string">&#x27;entity_group&#x27;</span>: <span class="hljs-string">&#x27;LOC&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9986118</span>, <span class="hljs-string">&#x27;word&#x27;</span>: <span class="hljs-string">&#x27;Brooklyn&#x27;</span>, <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">49</span>, <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">57</span>}]`}}),{c(){d=o("meta"),g=c(),y(m.$$.fragment),k=c(),C=o("h1"),v=o("a"),$=o("span"),y(T.$$.fragment),P=c(),I=o("span"),B=a("Token classification"),z=c(),M.c(),N=c(),H=o("p"),Z=a("The first application we\u2019ll explore is token classification. This generic task encompasses any problem that can be formulated as \u201Cattributing a label to each token in a sentence,\u201D such as:"),F=c(),G=o("ul"),q=o("li"),U=o("strong"),L=a("Named entity recognition (NER)"),X=a(": Find the entities (such as persons, locations, or organizations) in a sentence. This can be formulated as attributing a label to each token by having one class per entity and one class for \u201Cno entity.\u201D"),Q=c(),ee=o("li"),ne=o("strong"),K=a("Part-of-speech tagging (POS)"),he=a(": Mark each word in a sentence as corresponding to a particular part of speech (such as noun, verb, adjective, etc.)."),J=c(),W=o("li"),R=o("strong"),se=a("Chunking"),fe=a(": Find the tokens that belong to the same entity. This task (which can be combined with POS or NER) can be formulated as attributing one label (usually "),ge=o("code"),ae=a("B-"),Ie=a(") to any tokens that are at the beginning of a chunk, another label (usually "),V=o("code"),tt=a("I-"),pe=a(") to tokens that are inside a chunk, and a third label (usually "),bt=o("code"),Zt=a("O"),st=a(") to tokens that don\u2019t belong to any chunk."),Ks=c(),y(Pt.$$.fragment),Kt=c(),ue=o("p"),Cs=a("Of course, there are many other types of token classification problem; those are just a few representative examples. In this section, we will fine-tune a model (BERT) on a NER task, which will then be able to compute predictions like this one:"),Ce=c(),at=o("div"),ve=o("div"),Vt=c(),oe=o("p"),ke=a("You can find the model we\u2019ll train and upload to the Hub and double-check its predictions "),Ne=o("a"),Se=a("here"),ja=a("."),wt=c(),lt=o("h2"),Ue=o("a"),$e=o("span"),y(zt.$$.fragment),Jt=c(),nt=o("span"),Vs=a("Preparing the data"),gt=c(),Te=o("p"),Ts=a("First things first, we need a dataset suitable for token classification. In this section we will use the "),ye=o("a"),Ea=a("CoNLL-2003 dataset"),Ds=a(", which contains news stories from Reuters."),Fe=c(),y(ot.$$.fragment),me=c(),je=o("h3"),Le=o("a"),Ye=o("span"),y(qt.$$.fragment),At=c(),Ps=o("span"),xa=a("The CoNLL-2003 dataset"),It=c(),De=o("p"),Js=a("To load the CoNLL-2003 dataset, we use the "),le=o("code"),Nt=a("load_dataset()"),Qt=a(" method from the \u{1F917} Datasets library:"),Re=c(),y(St.$$.fragment),vt=c(),kt=o("p"),Oa=a("This will download and cache the dataset, like we saw in "),Ee=o("a"),zs=a("Chapter 3"),Ca=a(" for the GLUE MRPC dataset. Inspecting this object shows us the columns present and the split between the training, validation, and test sets:"),qs=c(),y(Pe.$$.fragment),es=c(),y(rt.$$.fragment),Qs=c(),Xe=o("p"),ea=a("In particular, we can see the dataset contains labels for the three tasks we mentioned earlier: NER, POS, and chunking. A big difference from other datasets is that the input texts are not presented as sentences or documents, but lists of words (the last column is called "),it=o("code"),ts=a("tokens"),_e=a(", but it contains words in the sense that these are pre-tokenized inputs that still need to go through the tokenizer for subword tokenization)."),ta=c(),pt=o("p"),Ft=a("Let\u2019s have a look at the first element of the training set:"),As=c(),y(ce.$$.fragment),ss=c(),y(ct.$$.fragment),sa=c(),as=o("p"),ls=a("Since we want to perform named entity recognition, we will look at the NER tags:"),$t=c(),y(yt.$$.fragment),ht=c(),y(Lt.$$.fragment),Is=c(),be=o("p"),Rt=a("Those are the labels as integers ready for training, but they\u2019re not necessarily useful when we want to inspect the data. Like for text classification, we can access the correspondence between those integers and the label names by looking at the "),jt=o("code"),ns=a("features"),Ta=a(" attribute of our dataset:"),os=c(),y(we.$$.fragment),Ns=c(),y(Be.$$.fragment),u=c(),D=o("p"),rs=a("So this column contains elements that are sequences of "),Ss=o("code"),Bt=a("ClassLabel"),is=a("s. The type of the elements of the sequence is in the "),ps=o("code"),bl=a("feature"),cs=a(" attribute of this "),Fs=o("code"),Ls=a("ner_feature"),aa=a(", and we can access the list of names by looking at the "),Rs=o("code"),ze=a("names"),Mt=a(" attribute of that "),hs=o("code"),Et=a("feature"),wl=a(":"),Bs=c(),y(ds.$$.fragment),la=c(),y(Me.$$.fragment),Da=c(),ie=o("p"),gl=a("We already saw these labels when digging into the "),na=o("code"),Pa=a("token-classification"),qe=a(" pipeline in "),Ze=o("a"),oa=a("Chapter 6"),xt=a(", but for a quick refresher:"),za=c(),te=o("ul"),Ms=o("li"),fs=o("code"),He=a("O"),vl=a(" means the word doesn\u2019t correspond to any entity."),ra=c(),dt=o("li"),ia=o("code"),en=a("B-PER"),Ao=a("/"),tn=o("code"),sn=a("I-PER"),Io=a(" means the word corresponds to the beginning of/is inside a "),an=o("em"),Ln=a("person"),qa=a(" entity."),Rn=c(),ft=o("li"),ln=o("code"),Bn=a("B-ORG"),Aa=a("/"),kl=o("code"),us=a("I-ORG"),No=a(" means the word corresponds to the beginning of/is inside an "),Ia=o("em"),So=a("organization"),Fo=a(" entity."),nn=c(),ms=o("li"),on=o("code"),Mn=a("B-LOC"),Na=a("/"),$l=o("code"),pa=a("I-LOC"),Lo=a(" means the word corresponds to the beginning of/is inside a "),Sa=o("em"),Ro=a("location"),Bo=a(" entity."),Hn=c(),Ke=o("li"),yl=o("code"),Fa=a("B-MISC"),Wn=a("/"),Ot=o("code"),Mo=a("I-MISC"),rn=a(" means the word corresponds to the beginning of/is inside a "),pn=o("em"),Ho=a("miscellaneous"),cn=a(" entity."),Gn=c(),jl=o("p"),Un=a("Now decoding the labels we saw earlier gives us this:"),ca=c(),y(ha.$$.fragment),ut=c(),y(La.$$.fragment),El=c(),_s=o("p"),Wo=a("And for an example mixing "),Ra=o("code"),Go=a("B-"),Uo=a(" and "),Ba=o("code"),Yo=a("I-"),Xo=a(" labels, here\u2019s what the same code gives us on the element of the training set at index 4:"),hn=c(),y(Ht.$$.fragment),dn=c(),Ve=o("p"),Yn=a("As we can see, entities spanning two words, like \u201CEuropean Union\u201D and \u201CWerner Zwingmann,\u201D are attributed a "),da=o("code"),Zo=a("B-"),Xn=a(" label for the first word and an "),Hs=o("code"),Zn=a("I-"),bs=a(" label for the second."),Kn=c(),y(ws.$$.fragment),Vn=c(),Ws=o("h3"),gs=o("a"),fn=o("span"),y(Ma.$$.fragment),Jn=c(),Wt=o("span"),fa=a("Processing the data"),xl=c(),y(Gt.$$.fragment),Qn=c(),Ct=o("p"),Ko=a("As usual, our texts need to be converted to token IDs before the model can make sense of them. As we saw in "),Ha=o("a"),vs=a("Chapter 6"),Vo=a(", a big difference in the case of token classification tasks is that we have pre-tokenized inputs. Fortunately, the tokenizer API can deal with that pretty easily; we just need to warn the "),Wa=o("code"),Jo=a("tokenizer"),Qo=a(" with a special flag."),Ol=c(),ua=o("p"),er=a("To begin, let\u2019s create our "),Cl=o("code"),Ga=a("tokenizer"),eo=a(" object. As we said before, we will be using a BERT pretrained model, so we\u2019ll start by downloading and caching the associated tokenizer:"),Ua=c(),y(Ya.$$.fragment),un=c(),re=o("p"),Xa=a("You can replace the "),mn=o("code"),_n=a("model_checkpoint"),tr=a(" with any other model you prefer from the "),Za=o("a"),sr=a("Hub"),mt=a(", or with a local folder in which you\u2019ve saved a pretrained model and a tokenizer. The only constraint is that the tokenizer needs to be backed by the \u{1F917} Tokenizers library, so there\u2019s a \u201Cfast\u201D version available. You can see all the architectures that come with a fast version in "),Ka=o("a"),bn=a("this big table"),ar=a(", and to check that the "),wn=o("code"),gn=a("tokenizer"),lr=a(" object you\u2019re using is indeed backed by \u{1F917} Tokenizers you can look at its "),vn=o("code"),kn=a("is_fast"),nr=a(" attribute:"),to=c(),y(Gs.$$.fragment),so=c(),y(Va.$$.fragment),ao=c(),Ae=o("p"),or=a("To tokenize a pre-tokenized input, we can use our "),Ja=o("code"),rr=a("tokenizer"),ir=a(" as usual and just add "),Qa=o("code"),pr=a("is_split_into_words=True"),cr=a(":"),$n=c(),y(ks.$$.fragment),lo=c(),y(ma.$$.fragment),_a=c(),xe=o("p"),Tl=a("As we can see, the tokenizer added the special tokens used by the model ("),yn=o("code"),no=a("[CLS]"),el=a(" at the beginning and "),Dl=o("code"),de=a("[SEP]"),hr=a(" at the end) and left most of the words untouched. The word "),tl=o("code"),dr=a("lamb"),fr=a(", however, was tokenized into two subwords, "),sl=o("code"),ur=a("la"),mr=a(" and "),al=o("code"),_r=a("##mb"),br=a(". This introduces a mismatch between our inputs and the labels: the list of labels has only 9 elements, whereas our input now has 12 tokens. Accounting for the special tokens is easy (we know they are at the beginning and the end), but we also need to make sure we align all the labels with the proper words."),Pl=c(),ba=o("p"),wr=a("Fortunately, because we\u2019re using a fast tokenizer we have access to the \u{1F917} Tokenizers superpowers, which means we can easily map each token to its corresponding word (as seen in "),wa=o("a"),gr=a("Chapter 6"),vr=a("):"),zl=c(),y(ll.$$.fragment),oo=c(),y(Us.$$.fragment),ro=c(),Je=o("p"),io=a("With a tiny bit of work, we can then expand our label list to match the tokens. The first rule we\u2019ll apply is that special tokens get a label of "),Tt=o("code"),kr=a("-100"),jn=a(". This is because by default "),En=o("code"),$r=a("-100"),nl=a(" is an index that is ignored in the loss function we will use (cross entropy). Then, each token gets the same label as the token that started the word it\u2019s inside, since they are part of the same entity. For tokens inside a word but not at the beginning, we replace the "),ol=o("code"),yr=a("B-"),jr=a(" with "),ql=o("code"),n=a("I-"),_=a(" (since the token does not begin the entity):"),Er=c(),y(Al.$$.fragment),xr=c(),Ys=o("p"),ci=a("Let\u2019s try it out on our first sentence:"),Or=c(),y($s.$$.fragment),Cr=c(),y(Il.$$.fragment),xn=c(),Xs=o("p"),Nl=a("As we can see, our function added the "),po=o("code"),hi=a("-100"),co=a(" for the two special tokens at the beginning and the end, and a new "),ho=o("code"),di=a("0"),fi=a(" for our word that was split into two tokens."),On=c(),y(rl.$$.fragment),Tr=c(),_t=o("p"),fo=a("To preprocess our whole dataset, we need to tokenize all the inputs and apply "),uo=o("code"),Qe=a("align_labels_with_tokens()"),ui=a(" on all the labels. To take advantage of the speed of our fast tokenizer, it\u2019s best to tokenize lots of texts at the same time, so we\u2019ll write a function that processes a list of examples and use the "),mo=o("code"),Dr=a("Dataset.map()"),mi=a(" method with the option "),_o=o("code"),_i=a("batched=True"),bi=a(". The only thing that is different from our previous example is that the "),Sl=o("code"),wi=a("word_ids()"),gi=a(" function needs to get the index of the example we want the word IDs of when the inputs to the tokenizer are lists of texts (or in our case, list of lists of words), so we add that too:"),Cn=c(),y(Fl.$$.fragment),Pr=c(),il=o("p"),vi=a("Note that we haven\u2019t padded our inputs yet; we\u2019ll do that later, when creating the batches with a data collator."),zr=c(),pl=o("p"),ki=a("We can now apply all that preprocessing in one go on the other splits of our dataset:"),qr=c(),y(Ll.$$.fragment),Tn=c(),cl=o("p"),bo=a("We\u2019ve done the hardest part! Now that the data has been preprocessed, the actual training will look a lot like what we did in "),Dn=o("a"),$i=a("Chapter 3"),yi=a("."),Zs=c(),js.c(),Pn=c(),ga=o("h3"),Ut=o("a"),wo=o("span"),y(Rl.$$.fragment),go=c(),vo=o("span"),Bl=a("Data collation"),Ar=c(),Yt=o("p"),va=a("We can\u2019t just use a "),ko=o("code"),ji=a("DataCollatorWithPadding"),Ei=a(" like in "),zn=o("a"),Ml=a("Chapter 3"),xi=a(" because that only pads the inputs (input IDs, attention mask, and token type IDs). Here our labels should be padded the exact same way as the inputs so that they stay the same size, using "),$o=o("code"),yo=a("-100"),Oi=a(" as a value so that the corresponding predictions are ignored in the loss computation."),Ir=c(),Xt=o("p"),Hl=a("This is all done by a "),Wl=o("a"),jo=o("code"),Ci=a("DataCollatorForTokenClassification"),Gl=a(". Like the "),Ul=o("code"),Ti=a("DataCollatorWithPadding"),Es=a(", it takes the "),Eo=o("code"),Di=a("tokenizer"),Pi=a(" used to preprocess the inputs:"),Nr=c(),xs.c(),qn=c(),An=o("p"),zi=a("To test this on a few samples, we can just call it on a list of examples from our tokenized training set:"),Oe=c(),y(Yl.$$.fragment),Sr=c(),y(Xl.$$.fragment),Fr=c(),In=o("p"),qi=a("Let\u2019s compare this to the labels for the first and second elements in our dataset:"),Lr=c(),y(Os.$$.fragment),Rr=c(),y(Zl.$$.fragment),Br=c(),dl.c(),Ai=c(),We&&We.c(),Ii=c(),Nn=o("h3"),xo=o("a"),Ji=o("span"),y(Mr.$$.fragment),Np=c(),Qi=o("span"),Sp=a("Metrics"),op=c(),ul.c(),Ni=c(),y(Hr.$$.fragment),rp=c(),Si=o("p"),Fp=a("This metric does not behave like the standard accuracy: it will actually take the lists of labels as strings, not integers, so we will need to fully decode the predictions and labels before passing them to the metric. Let\u2019s see how it works. First, we\u2019ll get the labels for our first training example:"),ip=c(),y(Wr.$$.fragment),pp=c(),y(Gr.$$.fragment),cp=c(),Fi=o("p"),Lp=a("We can then create fake predictions for those by just changing the value at index 2:"),hp=c(),y(Ur.$$.fragment),dp=c(),Li=o("p"),Rp=a("Note that the metric takes a list of predictions (not just one) and a list of labels. Here\u2019s the output:"),fp=c(),y(Yr.$$.fragment),up=c(),_l.c(),Ri=c(),Ge&&Ge.c(),Bi=c(),Sn=o("h2"),Oo=o("a"),ep=o("span"),y(Xr.$$.fragment),Bp=c(),tp=o("span"),Mp=a("Using the fine-tuned model"),mp=c(),Co=o("p"),Hp=a("We\u2019ve already shown you how you can use the model we fine-tuned on the Model Hub with the inference widget. To use it locally in a "),sp=o("code"),Wp=a("pipeline"),Gp=a(", you just have to specify the proper model identifier:"),_p=c(),y(Zr.$$.fragment),bp=c(),y(Kr.$$.fragment),wp=c(),Mi=o("p"),Up=a("Great! Our model is working as well as the default one for this pipeline!"),this.h()},l(t){const f=id('[data-svelte="svelte-1phssyn"]',document.head);d=r(f,"META",{name:!0,content:!0}),f.forEach(s),g=h(t),j(m.$$.fragment,t),k=h(t),C=r(t,"H1",{class:!0});var ai=i(C);v=r(ai,"A",{id:!0,class:!0,href:!0});var Hi=i(v);$=r(Hi,"SPAN",{});var ap=i($);j(T.$$.fragment,ap),ap.forEach(s),Hi.forEach(s),P=h(ai),I=r(ai,"SPAN",{});var lp=i(I);B=l(lp,"Token classification"),lp.forEach(s),ai.forEach(s),z=h(t),M.l(t),N=h(t),H=r(t,"P",{});var np=i(H);Z=l(np,"The first application we\u2019ll explore is token classification. This generic task encompasses any problem that can be formulated as \u201Cattributing a label to each token in a sentence,\u201D such as:"),np.forEach(s),F=h(t),G=r(t,"UL",{});var Kl=i(G);q=r(Kl,"LI",{});var li=i(q);U=r(li,"STRONG",{});var Wi=i(U);L=l(Wi,"Named entity recognition (NER)"),Wi.forEach(s),X=l(li,": Find the entities (such as persons, locations, or organizations) in a sentence. This can be formulated as attributing a label to each token by having one class per entity and one class for \u201Cno entity.\u201D"),li.forEach(s),Q=h(Kl),ee=r(Kl,"LI",{});var ni=i(ee);ne=r(ni,"STRONG",{});var Gi=i(ne);K=l(Gi,"Part-of-speech tagging (POS)"),Gi.forEach(s),he=l(ni,": Mark each word in a sentence as corresponding to a particular part of speech (such as noun, verb, adjective, etc.)."),ni.forEach(s),J=h(Kl),W=r(Kl,"LI",{});var Fn=i(W);R=r(Fn,"STRONG",{});var oc=i(R);se=l(oc,"Chunking"),oc.forEach(s),fe=l(Fn,": Find the tokens that belong to the same entity. This task (which can be combined with POS or NER) can be formulated as attributing one label (usually "),ge=r(Fn,"CODE",{});var rc=i(ge);ae=l(rc,"B-"),rc.forEach(s),Ie=l(Fn,") to any tokens that are at the beginning of a chunk, another label (usually "),V=r(Fn,"CODE",{});var ic=i(V);tt=l(ic,"I-"),ic.forEach(s),pe=l(Fn,") to tokens that are inside a chunk, and a third label (usually "),bt=r(Fn,"CODE",{});var pc=i(bt);Zt=l(pc,"O"),pc.forEach(s),st=l(Fn,") to tokens that don\u2019t belong to any chunk."),Fn.forEach(s),Kl.forEach(s),Ks=h(t),j(Pt.$$.fragment,t),Kt=h(t),ue=r(t,"P",{});var cc=i(ue);Cs=l(cc,"Of course, there are many other types of token classification problem; those are just a few representative examples. In this section, we will fine-tune a model (BERT) on a NER task, which will then be able to compute predictions like this one:"),cc.forEach(s),Ce=h(t),at=r(t,"DIV",{class:!0});var hc=i(at);ve=r(hc,"DIV",{class:!0});var ld=i(ve);ld.forEach(s),hc.forEach(s),Vt=h(t),oe=r(t,"P",{});var vp=i(oe);ke=l(vp,"You can find the model we\u2019ll train and upload to the Hub and double-check its predictions "),Ne=r(vp,"A",{href:!0,rel:!0});var dc=i(Ne);Se=l(dc,"here"),dc.forEach(s),ja=l(vp,"."),vp.forEach(s),wt=h(t),lt=r(t,"H2",{class:!0});var kp=i(lt);Ue=r(kp,"A",{id:!0,class:!0,href:!0});var fc=i(Ue);$e=r(fc,"SPAN",{});var uc=i($e);j(zt.$$.fragment,uc),uc.forEach(s),fc.forEach(s),Jt=h(kp),nt=r(kp,"SPAN",{});var mc=i(nt);Vs=l(mc,"Preparing the data"),mc.forEach(s),kp.forEach(s),gt=h(t),Te=r(t,"P",{});var $p=i(Te);Ts=l($p,"First things first, we need a dataset suitable for token classification. In this section we will use the "),ye=r($p,"A",{href:!0,rel:!0});var _c=i(ye);Ea=l(_c,"CoNLL-2003 dataset"),_c.forEach(s),Ds=l($p,", which contains news stories from Reuters."),$p.forEach(s),Fe=h(t),j(ot.$$.fragment,t),me=h(t),je=r(t,"H3",{class:!0});var yp=i(je);Le=r(yp,"A",{id:!0,class:!0,href:!0});var bc=i(Le);Ye=r(bc,"SPAN",{});var wc=i(Ye);j(qt.$$.fragment,wc),wc.forEach(s),bc.forEach(s),At=h(yp),Ps=r(yp,"SPAN",{});var gc=i(Ps);xa=l(gc,"The CoNLL-2003 dataset"),gc.forEach(s),yp.forEach(s),It=h(t),De=r(t,"P",{});var jp=i(De);Js=l(jp,"To load the CoNLL-2003 dataset, we use the "),le=r(jp,"CODE",{});var vc=i(le);Nt=l(vc,"load_dataset()"),vc.forEach(s),Qt=l(jp," method from the \u{1F917} Datasets library:"),jp.forEach(s),Re=h(t),j(St.$$.fragment,t),vt=h(t),kt=r(t,"P",{});var Ep=i(kt);Oa=l(Ep,"This will download and cache the dataset, like we saw in "),Ee=r(Ep,"A",{href:!0});var kc=i(Ee);zs=l(kc,"Chapter 3"),kc.forEach(s),Ca=l(Ep," for the GLUE MRPC dataset. Inspecting this object shows us the columns present and the split between the training, validation, and test sets:"),Ep.forEach(s),qs=h(t),j(Pe.$$.fragment,t),es=h(t),j(rt.$$.fragment,t),Qs=h(t),Xe=r(t,"P",{});var xp=i(Xe);ea=l(xp,"In particular, we can see the dataset contains labels for the three tasks we mentioned earlier: NER, POS, and chunking. A big difference from other datasets is that the input texts are not presented as sentences or documents, but lists of words (the last column is called "),it=r(xp,"CODE",{});var $c=i(it);ts=l($c,"tokens"),$c.forEach(s),_e=l(xp,", but it contains words in the sense that these are pre-tokenized inputs that still need to go through the tokenizer for subword tokenization)."),xp.forEach(s),ta=h(t),pt=r(t,"P",{});var yc=i(pt);Ft=l(yc,"Let\u2019s have a look at the first element of the training set:"),yc.forEach(s),As=h(t),j(ce.$$.fragment,t),ss=h(t),j(ct.$$.fragment,t),sa=h(t),as=r(t,"P",{});var jc=i(as);ls=l(jc,"Since we want to perform named entity recognition, we will look at the NER tags:"),jc.forEach(s),$t=h(t),j(yt.$$.fragment,t),ht=h(t),j(Lt.$$.fragment,t),Is=h(t),be=r(t,"P",{});var Op=i(be);Rt=l(Op,"Those are the labels as integers ready for training, but they\u2019re not necessarily useful when we want to inspect the data. Like for text classification, we can access the correspondence between those integers and the label names by looking at the "),jt=r(Op,"CODE",{});var Ec=i(jt);ns=l(Ec,"features"),Ec.forEach(s),Ta=l(Op," attribute of our dataset:"),Op.forEach(s),os=h(t),j(we.$$.fragment,t),Ns=h(t),j(Be.$$.fragment,t),u=h(t),D=r(t,"P",{});var ka=i(D);rs=l(ka,"So this column contains elements that are sequences of "),Ss=r(ka,"CODE",{});var xc=i(Ss);Bt=l(xc,"ClassLabel"),xc.forEach(s),is=l(ka,"s. The type of the elements of the sequence is in the "),ps=r(ka,"CODE",{});var Oc=i(ps);bl=l(Oc,"feature"),Oc.forEach(s),cs=l(ka," attribute of this "),Fs=r(ka,"CODE",{});var Cc=i(Fs);Ls=l(Cc,"ner_feature"),Cc.forEach(s),aa=l(ka,", and we can access the list of names by looking at the "),Rs=r(ka,"CODE",{});var Tc=i(Rs);ze=l(Tc,"names"),Tc.forEach(s),Mt=l(ka," attribute of that "),hs=r(ka,"CODE",{});var Dc=i(hs);Et=l(Dc,"feature"),Dc.forEach(s),wl=l(ka,":"),ka.forEach(s),Bs=h(t),j(ds.$$.fragment,t),la=h(t),j(Me.$$.fragment,t),Da=h(t),ie=r(t,"P",{});var Ui=i(ie);gl=l(Ui,"We already saw these labels when digging into the "),na=r(Ui,"CODE",{});var Pc=i(na);Pa=l(Pc,"token-classification"),Pc.forEach(s),qe=l(Ui," pipeline in "),Ze=r(Ui,"A",{href:!0});var zc=i(Ze);oa=l(zc,"Chapter 6"),zc.forEach(s),xt=l(Ui,", but for a quick refresher:"),Ui.forEach(s),za=h(t),te=r(t,"UL",{});var Vl=i(te);Ms=r(Vl,"LI",{});var Yp=i(Ms);fs=r(Yp,"CODE",{});var qc=i(fs);He=l(qc,"O"),qc.forEach(s),vl=l(Yp," means the word doesn\u2019t correspond to any entity."),Yp.forEach(s),ra=h(Vl),dt=r(Vl,"LI",{});var oi=i(dt);ia=r(oi,"CODE",{});var Ac=i(ia);en=l(Ac,"B-PER"),Ac.forEach(s),Ao=l(oi,"/"),tn=r(oi,"CODE",{});var Ic=i(tn);sn=l(Ic,"I-PER"),Ic.forEach(s),Io=l(oi," means the word corresponds to the beginning of/is inside a "),an=r(oi,"EM",{});var Nc=i(an);Ln=l(Nc,"person"),Nc.forEach(s),qa=l(oi," entity."),oi.forEach(s),Rn=h(Vl),ft=r(Vl,"LI",{});var ri=i(ft);ln=r(ri,"CODE",{});var Sc=i(ln);Bn=l(Sc,"B-ORG"),Sc.forEach(s),Aa=l(ri,"/"),kl=r(ri,"CODE",{});var Fc=i(kl);us=l(Fc,"I-ORG"),Fc.forEach(s),No=l(ri," means the word corresponds to the beginning of/is inside an "),Ia=r(ri,"EM",{});var Lc=i(Ia);So=l(Lc,"organization"),Lc.forEach(s),Fo=l(ri," entity."),ri.forEach(s),nn=h(Vl),ms=r(Vl,"LI",{});var ii=i(ms);on=r(ii,"CODE",{});var Rc=i(on);Mn=l(Rc,"B-LOC"),Rc.forEach(s),Na=l(ii,"/"),$l=r(ii,"CODE",{});var Bc=i($l);pa=l(Bc,"I-LOC"),Bc.forEach(s),Lo=l(ii," means the word corresponds to the beginning of/is inside a "),Sa=r(ii,"EM",{});var Mc=i(Sa);Ro=l(Mc,"location"),Mc.forEach(s),Bo=l(ii," entity."),ii.forEach(s),Hn=h(Vl),Ke=r(Vl,"LI",{});var pi=i(Ke);yl=r(pi,"CODE",{});var Hc=i(yl);Fa=l(Hc,"B-MISC"),Hc.forEach(s),Wn=l(pi,"/"),Ot=r(pi,"CODE",{});var Wc=i(Ot);Mo=l(Wc,"I-MISC"),Wc.forEach(s),rn=l(pi," means the word corresponds to the beginning of/is inside a "),pn=r(pi,"EM",{});var Gc=i(pn);Ho=l(Gc,"miscellaneous"),Gc.forEach(s),cn=l(pi," entity."),pi.forEach(s),Vl.forEach(s),Gn=h(t),jl=r(t,"P",{});var Uc=i(jl);Un=l(Uc,"Now decoding the labels we saw earlier gives us this:"),Uc.forEach(s),ca=h(t),j(ha.$$.fragment,t),ut=h(t),j(La.$$.fragment,t),El=h(t),_s=r(t,"P",{});var Yi=i(_s);Wo=l(Yi,"And for an example mixing "),Ra=r(Yi,"CODE",{});var Yc=i(Ra);Go=l(Yc,"B-"),Yc.forEach(s),Uo=l(Yi," and "),Ba=r(Yi,"CODE",{});var Xc=i(Ba);Yo=l(Xc,"I-"),Xc.forEach(s),Xo=l(Yi," labels, here\u2019s what the same code gives us on the element of the training set at index 4:"),Yi.forEach(s),hn=h(t),j(Ht.$$.fragment,t),dn=h(t),Ve=r(t,"P",{});var Xi=i(Ve);Yn=l(Xi,"As we can see, entities spanning two words, like \u201CEuropean Union\u201D and \u201CWerner Zwingmann,\u201D are attributed a "),da=r(Xi,"CODE",{});var Zc=i(da);Zo=l(Zc,"B-"),Zc.forEach(s),Xn=l(Xi," label for the first word and an "),Hs=r(Xi,"CODE",{});var Kc=i(Hs);Zn=l(Kc,"I-"),Kc.forEach(s),bs=l(Xi," label for the second."),Xi.forEach(s),Kn=h(t),j(ws.$$.fragment,t),Vn=h(t),Ws=r(t,"H3",{class:!0});var Cp=i(Ws);gs=r(Cp,"A",{id:!0,class:!0,href:!0});var Vc=i(gs);fn=r(Vc,"SPAN",{});var Jc=i(fn);j(Ma.$$.fragment,Jc),Jc.forEach(s),Vc.forEach(s),Jn=h(Cp),Wt=r(Cp,"SPAN",{});var Qc=i(Wt);fa=l(Qc,"Processing the data"),Qc.forEach(s),Cp.forEach(s),xl=h(t),j(Gt.$$.fragment,t),Qn=h(t),Ct=r(t,"P",{});var Zi=i(Ct);Ko=l(Zi,"As usual, our texts need to be converted to token IDs before the model can make sense of them. As we saw in "),Ha=r(Zi,"A",{href:!0});var eh=i(Ha);vs=l(eh,"Chapter 6"),eh.forEach(s),Vo=l(Zi,", a big difference in the case of token classification tasks is that we have pre-tokenized inputs. Fortunately, the tokenizer API can deal with that pretty easily; we just need to warn the "),Wa=r(Zi,"CODE",{});var th=i(Wa);Jo=l(th,"tokenizer"),th.forEach(s),Qo=l(Zi," with a special flag."),Zi.forEach(s),Ol=h(t),ua=r(t,"P",{});var Tp=i(ua);er=l(Tp,"To begin, let\u2019s create our "),Cl=r(Tp,"CODE",{});var sh=i(Cl);Ga=l(sh,"tokenizer"),sh.forEach(s),eo=l(Tp," object. As we said before, we will be using a BERT pretrained model, so we\u2019ll start by downloading and caching the associated tokenizer:"),Tp.forEach(s),Ua=h(t),j(Ya.$$.fragment,t),un=h(t),re=r(t,"P",{});var $a=i(re);Xa=l($a,"You can replace the "),mn=r($a,"CODE",{});var ah=i(mn);_n=l(ah,"model_checkpoint"),ah.forEach(s),tr=l($a," with any other model you prefer from the "),Za=r($a,"A",{href:!0,rel:!0});var lh=i(Za);sr=l(lh,"Hub"),lh.forEach(s),mt=l($a,", or with a local folder in which you\u2019ve saved a pretrained model and a tokenizer. The only constraint is that the tokenizer needs to be backed by the \u{1F917} Tokenizers library, so there\u2019s a \u201Cfast\u201D version available. You can see all the architectures that come with a fast version in "),Ka=r($a,"A",{href:!0,rel:!0});var nh=i(Ka);bn=l(nh,"this big table"),nh.forEach(s),ar=l($a,", and to check that the "),wn=r($a,"CODE",{});var oh=i(wn);gn=l(oh,"tokenizer"),oh.forEach(s),lr=l($a," object you\u2019re using is indeed backed by \u{1F917} Tokenizers you can look at its "),vn=r($a,"CODE",{});var rh=i(vn);kn=l(rh,"is_fast"),rh.forEach(s),nr=l($a," attribute:"),$a.forEach(s),to=h(t),j(Gs.$$.fragment,t),so=h(t),j(Va.$$.fragment,t),ao=h(t),Ae=r(t,"P",{});var Ki=i(Ae);or=l(Ki,"To tokenize a pre-tokenized input, we can use our "),Ja=r(Ki,"CODE",{});var ih=i(Ja);rr=l(ih,"tokenizer"),ih.forEach(s),ir=l(Ki," as usual and just add "),Qa=r(Ki,"CODE",{});var ph=i(Qa);pr=l(ph,"is_split_into_words=True"),ph.forEach(s),cr=l(Ki,":"),Ki.forEach(s),$n=h(t),j(ks.$$.fragment,t),lo=h(t),j(ma.$$.fragment,t),_a=h(t),xe=r(t,"P",{});var ya=i(xe);Tl=l(ya,"As we can see, the tokenizer added the special tokens used by the model ("),yn=r(ya,"CODE",{});var ch=i(yn);no=l(ch,"[CLS]"),ch.forEach(s),el=l(ya," at the beginning and "),Dl=r(ya,"CODE",{});var hh=i(Dl);de=l(hh,"[SEP]"),hh.forEach(s),hr=l(ya," at the end) and left most of the words untouched. The word "),tl=r(ya,"CODE",{});var dh=i(tl);dr=l(dh,"lamb"),dh.forEach(s),fr=l(ya,", however, was tokenized into two subwords, "),sl=r(ya,"CODE",{});var fh=i(sl);ur=l(fh,"la"),fh.forEach(s),mr=l(ya," and "),al=r(ya,"CODE",{});var uh=i(al);_r=l(uh,"##mb"),uh.forEach(s),br=l(ya,". This introduces a mismatch between our inputs and the labels: the list of labels has only 9 elements, whereas our input now has 12 tokens. Accounting for the special tokens is easy (we know they are at the beginning and the end), but we also need to make sure we align all the labels with the proper words."),ya.forEach(s),Pl=h(t),ba=r(t,"P",{});var Dp=i(ba);wr=l(Dp,"Fortunately, because we\u2019re using a fast tokenizer we have access to the \u{1F917} Tokenizers superpowers, which means we can easily map each token to its corresponding word (as seen in "),wa=r(Dp,"A",{href:!0});var mh=i(wa);gr=l(mh,"Chapter 6"),mh.forEach(s),vr=l(Dp,"):"),Dp.forEach(s),zl=h(t),j(ll.$$.fragment,t),oo=h(t),j(Us.$$.fragment,t),ro=h(t),Je=r(t,"P",{});var Jl=i(Je);io=l(Jl,"With a tiny bit of work, we can then expand our label list to match the tokens. The first rule we\u2019ll apply is that special tokens get a label of "),Tt=r(Jl,"CODE",{});var _h=i(Tt);kr=l(_h,"-100"),_h.forEach(s),jn=l(Jl,". This is because by default "),En=r(Jl,"CODE",{});var bh=i(En);$r=l(bh,"-100"),bh.forEach(s),nl=l(Jl," is an index that is ignored in the loss function we will use (cross entropy). Then, each token gets the same label as the token that started the word it\u2019s inside, since they are part of the same entity. For tokens inside a word but not at the beginning, we replace the "),ol=r(Jl,"CODE",{});var wh=i(ol);yr=l(wh,"B-"),wh.forEach(s),jr=l(Jl," with "),ql=r(Jl,"CODE",{});var gh=i(ql);n=l(gh,"I-"),gh.forEach(s),_=l(Jl," (since the token does not begin the entity):"),Jl.forEach(s),Er=h(t),j(Al.$$.fragment,t),xr=h(t),Ys=r(t,"P",{});var vh=i(Ys);ci=l(vh,"Let\u2019s try it out on our first sentence:"),vh.forEach(s),Or=h(t),j($s.$$.fragment,t),Cr=h(t),j(Il.$$.fragment,t),xn=h(t),Xs=r(t,"P",{});var Vi=i(Xs);Nl=l(Vi,"As we can see, our function added the "),po=r(Vi,"CODE",{});var kh=i(po);hi=l(kh,"-100"),kh.forEach(s),co=l(Vi," for the two special tokens at the beginning and the end, and a new "),ho=r(Vi,"CODE",{});var $h=i(ho);di=l($h,"0"),$h.forEach(s),fi=l(Vi," for our word that was split into two tokens."),Vi.forEach(s),On=h(t),j(rl.$$.fragment,t),Tr=h(t),_t=r(t,"P",{});var Ql=i(_t);fo=l(Ql,"To preprocess our whole dataset, we need to tokenize all the inputs and apply "),uo=r(Ql,"CODE",{});var yh=i(uo);Qe=l(yh,"align_labels_with_tokens()"),yh.forEach(s),ui=l(Ql," on all the labels. To take advantage of the speed of our fast tokenizer, it\u2019s best to tokenize lots of texts at the same time, so we\u2019ll write a function that processes a list of examples and use the "),mo=r(Ql,"CODE",{});var jh=i(mo);Dr=l(jh,"Dataset.map()"),jh.forEach(s),mi=l(Ql," method with the option "),_o=r(Ql,"CODE",{});var Eh=i(_o);_i=l(Eh,"batched=True"),Eh.forEach(s),bi=l(Ql,". The only thing that is different from our previous example is that the "),Sl=r(Ql,"CODE",{});var xh=i(Sl);wi=l(xh,"word_ids()"),xh.forEach(s),gi=l(Ql," function needs to get the index of the example we want the word IDs of when the inputs to the tokenizer are lists of texts (or in our case, list of lists of words), so we add that too:"),Ql.forEach(s),Cn=h(t),j(Fl.$$.fragment,t),Pr=h(t),il=r(t,"P",{});var Oh=i(il);vi=l(Oh,"Note that we haven\u2019t padded our inputs yet; we\u2019ll do that later, when creating the batches with a data collator."),Oh.forEach(s),zr=h(t),pl=r(t,"P",{});var Ch=i(pl);ki=l(Ch,"We can now apply all that preprocessing in one go on the other splits of our dataset:"),Ch.forEach(s),qr=h(t),j(Ll.$$.fragment,t),Tn=h(t),cl=r(t,"P",{});var Pp=i(cl);bo=l(Pp,"We\u2019ve done the hardest part! Now that the data has been preprocessed, the actual training will look a lot like what we did in "),Dn=r(Pp,"A",{href:!0});var Th=i(Dn);$i=l(Th,"Chapter 3"),Th.forEach(s),yi=l(Pp,"."),Pp.forEach(s),Zs=h(t),js.l(t),Pn=h(t),ga=r(t,"H3",{class:!0});var zp=i(ga);Ut=r(zp,"A",{id:!0,class:!0,href:!0});var Dh=i(Ut);wo=r(Dh,"SPAN",{});var Ph=i(wo);j(Rl.$$.fragment,Ph),Ph.forEach(s),Dh.forEach(s),go=h(zp),vo=r(zp,"SPAN",{});var zh=i(vo);Bl=l(zh,"Data collation"),zh.forEach(s),zp.forEach(s),Ar=h(t),Yt=r(t,"P",{});var To=i(Yt);va=l(To,"We can\u2019t just use a "),ko=r(To,"CODE",{});var qh=i(ko);ji=l(qh,"DataCollatorWithPadding"),qh.forEach(s),Ei=l(To," like in "),zn=r(To,"A",{href:!0});var Ah=i(zn);Ml=l(Ah,"Chapter 3"),Ah.forEach(s),xi=l(To," because that only pads the inputs (input IDs, attention mask, and token type IDs). Here our labels should be padded the exact same way as the inputs so that they stay the same size, using "),$o=r(To,"CODE",{});var Ih=i($o);yo=l(Ih,"-100"),Ih.forEach(s),Oi=l(To," as a value so that the corresponding predictions are ignored in the loss computation."),To.forEach(s),Ir=h(t),Xt=r(t,"P",{});var Do=i(Xt);Hl=l(Do,"This is all done by a "),Wl=r(Do,"A",{href:!0,rel:!0});var Nh=i(Wl);jo=r(Nh,"CODE",{});var Sh=i(jo);Ci=l(Sh,"DataCollatorForTokenClassification"),Sh.forEach(s),Nh.forEach(s),Gl=l(Do,". Like the "),Ul=r(Do,"CODE",{});var Fh=i(Ul);Ti=l(Fh,"DataCollatorWithPadding"),Fh.forEach(s),Es=l(Do,", it takes the "),Eo=r(Do,"CODE",{});var Lh=i(Eo);Di=l(Lh,"tokenizer"),Lh.forEach(s),Pi=l(Do," used to preprocess the inputs:"),Do.forEach(s),Nr=h(t),xs.l(t),qn=h(t),An=r(t,"P",{});var Rh=i(An);zi=l(Rh,"To test this on a few samples, we can just call it on a list of examples from our tokenized training set:"),Rh.forEach(s),Oe=h(t),j(Yl.$$.fragment,t),Sr=h(t),j(Xl.$$.fragment,t),Fr=h(t),In=r(t,"P",{});var Bh=i(In);qi=l(Bh,"Let\u2019s compare this to the labels for the first and second elements in our dataset:"),Bh.forEach(s),Lr=h(t),j(Os.$$.fragment,t),Rr=h(t),j(Zl.$$.fragment,t),Br=h(t),dl.l(t),Ai=h(t),We&&We.l(t),Ii=h(t),Nn=r(t,"H3",{class:!0});var qp=i(Nn);xo=r(qp,"A",{id:!0,class:!0,href:!0});var Mh=i(xo);Ji=r(Mh,"SPAN",{});var Hh=i(Ji);j(Mr.$$.fragment,Hh),Hh.forEach(s),Mh.forEach(s),Np=h(qp),Qi=r(qp,"SPAN",{});var Wh=i(Qi);Sp=l(Wh,"Metrics"),Wh.forEach(s),qp.forEach(s),op=h(t),ul.l(t),Ni=h(t),j(Hr.$$.fragment,t),rp=h(t),Si=r(t,"P",{});var Gh=i(Si);Fp=l(Gh,"This metric does not behave like the standard accuracy: it will actually take the lists of labels as strings, not integers, so we will need to fully decode the predictions and labels before passing them to the metric. Let\u2019s see how it works. First, we\u2019ll get the labels for our first training example:"),Gh.forEach(s),ip=h(t),j(Wr.$$.fragment,t),pp=h(t),j(Gr.$$.fragment,t),cp=h(t),Fi=r(t,"P",{});var Uh=i(Fi);Lp=l(Uh,"We can then create fake predictions for those by just changing the value at index 2:"),Uh.forEach(s),hp=h(t),j(Ur.$$.fragment,t),dp=h(t),Li=r(t,"P",{});var Yh=i(Li);Rp=l(Yh,"Note that the metric takes a list of predictions (not just one) and a list of labels. Here\u2019s the output:"),Yh.forEach(s),fp=h(t),j(Yr.$$.fragment,t),up=h(t),_l.l(t),Ri=h(t),Ge&&Ge.l(t),Bi=h(t),Sn=r(t,"H2",{class:!0});var Ap=i(Sn);Oo=r(Ap,"A",{id:!0,class:!0,href:!0});var Xh=i(Oo);ep=r(Xh,"SPAN",{});var Zh=i(ep);j(Xr.$$.fragment,Zh),Zh.forEach(s),Xh.forEach(s),Bp=h(Ap),tp=r(Ap,"SPAN",{});var Kh=i(tp);Mp=l(Kh,"Using the fine-tuned model"),Kh.forEach(s),Ap.forEach(s),mp=h(t),Co=r(t,"P",{});var Ip=i(Co);Hp=l(Ip,"We\u2019ve already shown you how you can use the model we fine-tuned on the Model Hub with the inference widget. To use it locally in a "),sp=r(Ip,"CODE",{});var Vh=i(sp);Wp=l(Vh,"pipeline"),Vh.forEach(s),Gp=l(Ip,", you just have to specify the proper model identifier:"),Ip.forEach(s),_p=h(t),j(Zr.$$.fragment,t),bp=h(t),j(Kr.$$.fragment,t),wp=h(t),Mi=r(t,"P",{});var Jh=i(Mi);Up=l(Jh,"Great! Our model is working as well as the default one for this pipeline!"),Jh.forEach(s),this.h()},h(){O(d,"name","hf:doc:metadata"),O(d,"content",JSON.stringify(zd)),O(v,"id","token-classification"),O(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(v,"href","#token-classification"),O(C,"class","relative group"),O(ve,"class","max-w-md"),O(at,"class","w-full flex justify-center"),O(Ne,"href","https://huggingface.co/huggingface-course/bert-finetuned-ner?text=My+name+is+Sylvain+and+I+work+at+Hugging+Face+in+Brooklyn"),O(Ne,"rel","nofollow"),O(Ue,"id","preparing-the-data"),O(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Ue,"href","#preparing-the-data"),O(lt,"class","relative group"),O(ye,"href","https://huggingface.co/datasets/conll2003"),O(ye,"rel","nofollow"),O(Le,"id","the-conll2003-dataset"),O(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Le,"href","#the-conll2003-dataset"),O(je,"class","relative group"),O(Ee,"href","/course/chapter3"),O(Ze,"href","/course/chapter6/3"),O(gs,"id","processing-the-data"),O(gs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(gs,"href","#processing-the-data"),O(Ws,"class","relative group"),O(Ha,"href","/course/chapter6/"),O(Za,"href","https://huggingface.co/models"),O(Za,"rel","nofollow"),O(Ka,"href","https://huggingface.co/transformers/#supported-frameworks"),O(Ka,"rel","nofollow"),O(wa,"href","/course/chapter6/3"),O(Dn,"href","/course/chapter3"),O(Ut,"id","data-collation"),O(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Ut,"href","#data-collation"),O(ga,"class","relative group"),O(zn,"href","/course/chapter3"),O(Wl,"href","https://huggingface.co/transformers/main_classes/data_collator.html#datacollatorfortokenclassification"),O(Wl,"rel","nofollow"),O(xo,"id","metrics"),O(xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(xo,"href","#metrics"),O(Nn,"class","relative group"),O(Oo,"id","using-the-finetuned-model"),O(Oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),O(Oo,"href","#using-the-finetuned-model"),O(Sn,"class","relative group")},m(t,f){e(document.head,d),p(t,g,f),E(m,t,f),p(t,k,f),p(t,C,f),e(C,v),e(v,$),E(T,$,null),e(C,P),e(C,I),e(I,B),p(t,z,f),Vr[S].m(t,f),p(t,N,f),p(t,H,f),e(H,Z),p(t,F,f),p(t,G,f),e(G,q),e(q,U),e(U,L),e(q,X),e(G,Q),e(G,ee),e(ee,ne),e(ne,K),e(ee,he),e(G,J),e(G,W),e(W,R),e(R,se),e(W,fe),e(W,ge),e(ge,ae),e(W,Ie),e(W,V),e(V,tt),e(W,pe),e(W,bt),e(bt,Zt),e(W,st),p(t,Ks,f),E(Pt,t,f),p(t,Kt,f),p(t,ue,f),e(ue,Cs),p(t,Ce,f),p(t,at,f),e(at,ve),p(t,Vt,f),p(t,oe,f),e(oe,ke),e(oe,Ne),e(Ne,Se),e(oe,ja),p(t,wt,f),p(t,lt,f),e(lt,Ue),e(Ue,$e),E(zt,$e,null),e(lt,Jt),e(lt,nt),e(nt,Vs),p(t,gt,f),p(t,Te,f),e(Te,Ts),e(Te,ye),e(ye,Ea),e(Te,Ds),p(t,Fe,f),E(ot,t,f),p(t,me,f),p(t,je,f),e(je,Le),e(Le,Ye),E(qt,Ye,null),e(je,At),e(je,Ps),e(Ps,xa),p(t,It,f),p(t,De,f),e(De,Js),e(De,le),e(le,Nt),e(De,Qt),p(t,Re,f),E(St,t,f),p(t,vt,f),p(t,kt,f),e(kt,Oa),e(kt,Ee),e(Ee,zs),e(kt,Ca),p(t,qs,f),E(Pe,t,f),p(t,es,f),E(rt,t,f),p(t,Qs,f),p(t,Xe,f),e(Xe,ea),e(Xe,it),e(it,ts),e(Xe,_e),p(t,ta,f),p(t,pt,f),e(pt,Ft),p(t,As,f),E(ce,t,f),p(t,ss,f),E(ct,t,f),p(t,sa,f),p(t,as,f),e(as,ls),p(t,$t,f),E(yt,t,f),p(t,ht,f),E(Lt,t,f),p(t,Is,f),p(t,be,f),e(be,Rt),e(be,jt),e(jt,ns),e(be,Ta),p(t,os,f),E(we,t,f),p(t,Ns,f),E(Be,t,f),p(t,u,f),p(t,D,f),e(D,rs),e(D,Ss),e(Ss,Bt),e(D,is),e(D,ps),e(ps,bl),e(D,cs),e(D,Fs),e(Fs,Ls),e(D,aa),e(D,Rs),e(Rs,ze),e(D,Mt),e(D,hs),e(hs,Et),e(D,wl),p(t,Bs,f),E(ds,t,f),p(t,la,f),E(Me,t,f),p(t,Da,f),p(t,ie,f),e(ie,gl),e(ie,na),e(na,Pa),e(ie,qe),e(ie,Ze),e(Ze,oa),e(ie,xt),p(t,za,f),p(t,te,f),e(te,Ms),e(Ms,fs),e(fs,He),e(Ms,vl),e(te,ra),e(te,dt),e(dt,ia),e(ia,en),e(dt,Ao),e(dt,tn),e(tn,sn),e(dt,Io),e(dt,an),e(an,Ln),e(dt,qa),e(te,Rn),e(te,ft),e(ft,ln),e(ln,Bn),e(ft,Aa),e(ft,kl),e(kl,us),e(ft,No),e(ft,Ia),e(Ia,So),e(ft,Fo),e(te,nn),e(te,ms),e(ms,on),e(on,Mn),e(ms,Na),e(ms,$l),e($l,pa),e(ms,Lo),e(ms,Sa),e(Sa,Ro),e(ms,Bo),e(te,Hn),e(te,Ke),e(Ke,yl),e(yl,Fa),e(Ke,Wn),e(Ke,Ot),e(Ot,Mo),e(Ke,rn),e(Ke,pn),e(pn,Ho),e(Ke,cn),p(t,Gn,f),p(t,jl,f),e(jl,Un),p(t,ca,f),E(ha,t,f),p(t,ut,f),E(La,t,f),p(t,El,f),p(t,_s,f),e(_s,Wo),e(_s,Ra),e(Ra,Go),e(_s,Uo),e(_s,Ba),e(Ba,Yo),e(_s,Xo),p(t,hn,f),E(Ht,t,f),p(t,dn,f),p(t,Ve,f),e(Ve,Yn),e(Ve,da),e(da,Zo),e(Ve,Xn),e(Ve,Hs),e(Hs,Zn),e(Ve,bs),p(t,Kn,f),E(ws,t,f),p(t,Vn,f),p(t,Ws,f),e(Ws,gs),e(gs,fn),E(Ma,fn,null),e(Ws,Jn),e(Ws,Wt),e(Wt,fa),p(t,xl,f),E(Gt,t,f),p(t,Qn,f),p(t,Ct,f),e(Ct,Ko),e(Ct,Ha),e(Ha,vs),e(Ct,Vo),e(Ct,Wa),e(Wa,Jo),e(Ct,Qo),p(t,Ol,f),p(t,ua,f),e(ua,er),e(ua,Cl),e(Cl,Ga),e(ua,eo),p(t,Ua,f),E(Ya,t,f),p(t,un,f),p(t,re,f),e(re,Xa),e(re,mn),e(mn,_n),e(re,tr),e(re,Za),e(Za,sr),e(re,mt),e(re,Ka),e(Ka,bn),e(re,ar),e(re,wn),e(wn,gn),e(re,lr),e(re,vn),e(vn,kn),e(re,nr),p(t,to,f),E(Gs,t,f),p(t,so,f),E(Va,t,f),p(t,ao,f),p(t,Ae,f),e(Ae,or),e(Ae,Ja),e(Ja,rr),e(Ae,ir),e(Ae,Qa),e(Qa,pr),e(Ae,cr),p(t,$n,f),E(ks,t,f),p(t,lo,f),E(ma,t,f),p(t,_a,f),p(t,xe,f),e(xe,Tl),e(xe,yn),e(yn,no),e(xe,el),e(xe,Dl),e(Dl,de),e(xe,hr),e(xe,tl),e(tl,dr),e(xe,fr),e(xe,sl),e(sl,ur),e(xe,mr),e(xe,al),e(al,_r),e(xe,br),p(t,Pl,f),p(t,ba,f),e(ba,wr),e(ba,wa),e(wa,gr),e(ba,vr),p(t,zl,f),E(ll,t,f),p(t,oo,f),E(Us,t,f),p(t,ro,f),p(t,Je,f),e(Je,io),e(Je,Tt),e(Tt,kr),e(Je,jn),e(Je,En),e(En,$r),e(Je,nl),e(Je,ol),e(ol,yr),e(Je,jr),e(Je,ql),e(ql,n),e(Je,_),p(t,Er,f),E(Al,t,f),p(t,xr,f),p(t,Ys,f),e(Ys,ci),p(t,Or,f),E($s,t,f),p(t,Cr,f),E(Il,t,f),p(t,xn,f),p(t,Xs,f),e(Xs,Nl),e(Xs,po),e(po,hi),e(Xs,co),e(Xs,ho),e(ho,di),e(Xs,fi),p(t,On,f),E(rl,t,f),p(t,Tr,f),p(t,_t,f),e(_t,fo),e(_t,uo),e(uo,Qe),e(_t,ui),e(_t,mo),e(mo,Dr),e(_t,mi),e(_t,_o),e(_o,_i),e(_t,bi),e(_t,Sl),e(Sl,wi),e(_t,gi),p(t,Cn,f),E(Fl,t,f),p(t,Pr,f),p(t,il,f),e(il,vi),p(t,zr,f),p(t,pl,f),e(pl,ki),p(t,qr,f),E(Ll,t,f),p(t,Tn,f),p(t,cl,f),e(cl,bo),e(cl,Dn),e(Dn,$i),e(cl,yi),p(t,Zs,f),Jr[ys].m(t,f),p(t,Pn,f),p(t,ga,f),e(ga,Ut),e(Ut,wo),E(Rl,wo,null),e(ga,go),e(ga,vo),e(vo,Bl),p(t,Ar,f),p(t,Yt,f),e(Yt,va),e(Yt,ko),e(ko,ji),e(Yt,Ei),e(Yt,zn),e(zn,Ml),e(Yt,xi),e(Yt,$o),e($o,yo),e(Yt,Oi),p(t,Ir,f),p(t,Xt,f),e(Xt,Hl),e(Xt,Wl),e(Wl,jo),e(jo,Ci),e(Xt,Gl),e(Xt,Ul),e(Ul,Ti),e(Xt,Es),e(Xt,Eo),e(Eo,Di),e(Xt,Pi),p(t,Nr,f),Qr[et].m(t,f),p(t,qn,f),p(t,An,f),e(An,zi),p(t,Oe,f),E(Yl,t,f),p(t,Sr,f),E(Xl,t,f),p(t,Fr,f),p(t,In,f),e(In,qi),p(t,Lr,f),E(Os,t,f),p(t,Rr,f),E(Zl,t,f),p(t,Br,f),ei[hl].m(t,f),p(t,Ai,f),We&&We.m(t,f),p(t,Ii,f),p(t,Nn,f),e(Nn,xo),e(xo,Ji),E(Mr,Ji,null),e(Nn,Np),e(Nn,Qi),e(Qi,Sp),p(t,op,f),ti[fl].m(t,f),p(t,Ni,f),E(Hr,t,f),p(t,rp,f),p(t,Si,f),e(Si,Fp),p(t,ip,f),E(Wr,t,f),p(t,pp,f),E(Gr,t,f),p(t,cp,f),p(t,Fi,f),e(Fi,Lp),p(t,hp,f),E(Ur,t,f),p(t,dp,f),p(t,Li,f),e(Li,Rp),p(t,fp,f),E(Yr,t,f),p(t,up,f),si[ml].m(t,f),p(t,Ri,f),Ge&&Ge.m(t,f),p(t,Bi,f),p(t,Sn,f),e(Sn,Oo),e(Oo,ep),E(Xr,ep,null),e(Sn,Bp),e(Sn,tp),e(tp,Mp),p(t,mp,f),p(t,Co,f),e(Co,Hp),e(Co,sp),e(sp,Wp),e(Co,Gp),p(t,_p,f),E(Zr,t,f),p(t,bp,f),E(Kr,t,f),p(t,wp,f),p(t,Mi,f),e(Mi,Up),gp=!0},p(t,[f]){const ai={};f&1&&(ai.fw=t[0]),m.$set(ai);let Hi=S;S=Zp(t),S!==Hi&&(zo(),w(Vr[Hi],1,1,()=>{Vr[Hi]=null}),Po(),M=Vr[S],M||(M=Vr[S]=Xp[S](t),M.c()),b(M,1),M.m(N.parentNode,N));const ap={};f&2&&(ap.$$scope={dirty:f,ctx:t}),ot.$set(ap);const lp={};f&2&&(lp.$$scope={dirty:f,ctx:t}),ws.$set(lp);const np={};f&2&&(np.$$scope={dirty:f,ctx:t}),rl.$set(np);let Kl=ys;ys=Vp(t),ys!==Kl&&(zo(),w(Jr[Kl],1,1,()=>{Jr[Kl]=null}),Po(),js=Jr[ys],js||(js=Jr[ys]=Kp[ys](t),js.c()),b(js,1),js.m(Pn.parentNode,Pn));let li=et;et=Qp(t),et!==li&&(zo(),w(Qr[li],1,1,()=>{Qr[li]=null}),Po(),xs=Qr[et],xs||(xs=Qr[et]=Jp[et](t),xs.c()),b(xs,1),xs.m(qn.parentNode,qn));let Wi=hl;hl=tc(t),hl!==Wi&&(zo(),w(ei[Wi],1,1,()=>{ei[Wi]=null}),Po(),dl=ei[hl],dl||(dl=ei[hl]=ec[hl](t),dl.c()),b(dl,1),dl.m(Ai.parentNode,Ai)),t[0]==="tf"?We?f&1&&b(We,1):(We=td(t),We.c(),b(We,1),We.m(Ii.parentNode,Ii)):We&&(zo(),w(We,1,1,()=>{We=null}),Po());let ni=fl;fl=ac(t),fl!==ni&&(zo(),w(ti[ni],1,1,()=>{ti[ni]=null}),Po(),ul=ti[fl],ul||(ul=ti[fl]=sc[fl](t),ul.c()),b(ul,1),ul.m(Ni.parentNode,Ni));let Gi=ml;ml=nc(t),ml!==Gi&&(zo(),w(si[Gi],1,1,()=>{si[Gi]=null}),Po(),_l=si[ml],_l||(_l=si[ml]=lc[ml](t),_l.c()),b(_l,1),_l.m(Ri.parentNode,Ri)),t[0]==="pt"?Ge?f&1&&b(Ge,1):(Ge=sd(t),Ge.c(),b(Ge,1),Ge.m(Bi.parentNode,Bi)):Ge&&(zo(),w(Ge,1,1,()=>{Ge=null}),Po())},i(t){gp||(b(m.$$.fragment,t),b(T.$$.fragment,t),b(M),b(Pt.$$.fragment,t),b(zt.$$.fragment,t),b(ot.$$.fragment,t),b(qt.$$.fragment,t),b(St.$$.fragment,t),b(Pe.$$.fragment,t),b(rt.$$.fragment,t),b(ce.$$.fragment,t),b(ct.$$.fragment,t),b(yt.$$.fragment,t),b(Lt.$$.fragment,t),b(we.$$.fragment,t),b(Be.$$.fragment,t),b(ds.$$.fragment,t),b(Me.$$.fragment,t),b(ha.$$.fragment,t),b(La.$$.fragment,t),b(Ht.$$.fragment,t),b(ws.$$.fragment,t),b(Ma.$$.fragment,t),b(Gt.$$.fragment,t),b(Ya.$$.fragment,t),b(Gs.$$.fragment,t),b(Va.$$.fragment,t),b(ks.$$.fragment,t),b(ma.$$.fragment,t),b(ll.$$.fragment,t),b(Us.$$.fragment,t),b(Al.$$.fragment,t),b($s.$$.fragment,t),b(Il.$$.fragment,t),b(rl.$$.fragment,t),b(Fl.$$.fragment,t),b(Ll.$$.fragment,t),b(js),b(Rl.$$.fragment,t),b(xs),b(Yl.$$.fragment,t),b(Xl.$$.fragment,t),b(Os.$$.fragment,t),b(Zl.$$.fragment,t),b(dl),b(We),b(Mr.$$.fragment,t),b(ul),b(Hr.$$.fragment,t),b(Wr.$$.fragment,t),b(Gr.$$.fragment,t),b(Ur.$$.fragment,t),b(Yr.$$.fragment,t),b(_l),b(Ge),b(Xr.$$.fragment,t),b(Zr.$$.fragment,t),b(Kr.$$.fragment,t),gp=!0)},o(t){w(m.$$.fragment,t),w(T.$$.fragment,t),w(M),w(Pt.$$.fragment,t),w(zt.$$.fragment,t),w(ot.$$.fragment,t),w(qt.$$.fragment,t),w(St.$$.fragment,t),w(Pe.$$.fragment,t),w(rt.$$.fragment,t),w(ce.$$.fragment,t),w(ct.$$.fragment,t),w(yt.$$.fragment,t),w(Lt.$$.fragment,t),w(we.$$.fragment,t),w(Be.$$.fragment,t),w(ds.$$.fragment,t),w(Me.$$.fragment,t),w(ha.$$.fragment,t),w(La.$$.fragment,t),w(Ht.$$.fragment,t),w(ws.$$.fragment,t),w(Ma.$$.fragment,t),w(Gt.$$.fragment,t),w(Ya.$$.fragment,t),w(Gs.$$.fragment,t),w(Va.$$.fragment,t),w(ks.$$.fragment,t),w(ma.$$.fragment,t),w(ll.$$.fragment,t),w(Us.$$.fragment,t),w(Al.$$.fragment,t),w($s.$$.fragment,t),w(Il.$$.fragment,t),w(rl.$$.fragment,t),w(Fl.$$.fragment,t),w(Ll.$$.fragment,t),w(js),w(Rl.$$.fragment,t),w(xs),w(Yl.$$.fragment,t),w(Xl.$$.fragment,t),w(Os.$$.fragment,t),w(Zl.$$.fragment,t),w(dl),w(We),w(Mr.$$.fragment,t),w(ul),w(Hr.$$.fragment,t),w(Wr.$$.fragment,t),w(Gr.$$.fragment,t),w(Ur.$$.fragment,t),w(Yr.$$.fragment,t),w(_l),w(Ge),w(Xr.$$.fragment,t),w(Zr.$$.fragment,t),w(Kr.$$.fragment,t),gp=!1},d(t){s(d),t&&s(g),x(m,t),t&&s(k),t&&s(C),x(T),t&&s(z),Vr[S].d(t),t&&s(N),t&&s(H),t&&s(F),t&&s(G),t&&s(Ks),x(Pt,t),t&&s(Kt),t&&s(ue),t&&s(Ce),t&&s(at),t&&s(Vt),t&&s(oe),t&&s(wt),t&&s(lt),x(zt),t&&s(gt),t&&s(Te),t&&s(Fe),x(ot,t),t&&s(me),t&&s(je),x(qt),t&&s(It),t&&s(De),t&&s(Re),x(St,t),t&&s(vt),t&&s(kt),t&&s(qs),x(Pe,t),t&&s(es),x(rt,t),t&&s(Qs),t&&s(Xe),t&&s(ta),t&&s(pt),t&&s(As),x(ce,t),t&&s(ss),x(ct,t),t&&s(sa),t&&s(as),t&&s($t),x(yt,t),t&&s(ht),x(Lt,t),t&&s(Is),t&&s(be),t&&s(os),x(we,t),t&&s(Ns),x(Be,t),t&&s(u),t&&s(D),t&&s(Bs),x(ds,t),t&&s(la),x(Me,t),t&&s(Da),t&&s(ie),t&&s(za),t&&s(te),t&&s(Gn),t&&s(jl),t&&s(ca),x(ha,t),t&&s(ut),x(La,t),t&&s(El),t&&s(_s),t&&s(hn),x(Ht,t),t&&s(dn),t&&s(Ve),t&&s(Kn),x(ws,t),t&&s(Vn),t&&s(Ws),x(Ma),t&&s(xl),x(Gt,t),t&&s(Qn),t&&s(Ct),t&&s(Ol),t&&s(ua),t&&s(Ua),x(Ya,t),t&&s(un),t&&s(re),t&&s(to),x(Gs,t),t&&s(so),x(Va,t),t&&s(ao),t&&s(Ae),t&&s($n),x(ks,t),t&&s(lo),x(ma,t),t&&s(_a),t&&s(xe),t&&s(Pl),t&&s(ba),t&&s(zl),x(ll,t),t&&s(oo),x(Us,t),t&&s(ro),t&&s(Je),t&&s(Er),x(Al,t),t&&s(xr),t&&s(Ys),t&&s(Or),x($s,t),t&&s(Cr),x(Il,t),t&&s(xn),t&&s(Xs),t&&s(On),x(rl,t),t&&s(Tr),t&&s(_t),t&&s(Cn),x(Fl,t),t&&s(Pr),t&&s(il),t&&s(zr),t&&s(pl),t&&s(qr),x(Ll,t),t&&s(Tn),t&&s(cl),t&&s(Zs),Jr[ys].d(t),t&&s(Pn),t&&s(ga),x(Rl),t&&s(Ar),t&&s(Yt),t&&s(Ir),t&&s(Xt),t&&s(Nr),Qr[et].d(t),t&&s(qn),t&&s(An),t&&s(Oe),x(Yl,t),t&&s(Sr),x(Xl,t),t&&s(Fr),t&&s(In),t&&s(Lr),x(Os,t),t&&s(Rr),x(Zl,t),t&&s(Br),ei[hl].d(t),t&&s(Ai),We&&We.d(t),t&&s(Ii),t&&s(Nn),x(Mr),t&&s(op),ti[fl].d(t),t&&s(Ni),x(Hr,t),t&&s(rp),t&&s(Si),t&&s(ip),x(Wr,t),t&&s(pp),x(Gr,t),t&&s(cp),t&&s(Fi),t&&s(hp),x(Ur,t),t&&s(dp),t&&s(Li),t&&s(fp),x(Yr,t),t&&s(up),si[ml].d(t),t&&s(Ri),Ge&&Ge.d(t),t&&s(Bi),t&&s(Sn),x(Xr),t&&s(mp),t&&s(Co),t&&s(_p),x(Zr,t),t&&s(bp),x(Kr,t),t&&s(wp),t&&s(Mi)}}}const zd={local:"token-classification",sections:[{local:"preparing-the-data",sections:[{local:"the-conll2003-dataset",title:"The CoNLL-2003 dataset"},{local:"processing-the-data",title:"Processing the data"}],title:"Preparing the data"},{local:"finetuning-the-model-with-the-trainer-api",title:"Fine-tuning the model with the `Trainer` API"},{local:"finetuning-the-model-with-keras",sections:[{local:"data-collation",title:"Data collation"},{local:"defining-the-model",title:"Defining the model"},{local:"finetuning-the-model",title:"Fine-tuning the model"},{local:"metrics",title:"Metrics"},{local:"defining-the-model",title:"Defining the model"},{local:"finetuning-the-model",title:"Fine-tuning the model"}],title:"Fine-tuning the model with Keras"},{local:"a-custom-training-loop",sections:[{local:"preparing-everything-for-training",title:"Preparing everything for training"},{local:"training-loop",title:"Training loop"}],title:"A custom training loop"},{local:"using-the-finetuned-model",title:"Using the fine-tuned model"}],title:"Token classification"};function qd(Y,d,g){let m="pt";return pd(()=>{const k=new URLSearchParams(window.location.search);g(0,m=k.get("fw")||"pt")}),[m]}class Bd extends nd{constructor(d){super();od(this,d,qd,Pd,rd,{})}}export{Bd as default,zd as metadata};
