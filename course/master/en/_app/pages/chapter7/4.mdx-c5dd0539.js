import{S as id,i as pd,s as hd,e as l,t as a,k as c,c as r,a as i,h as n,d as t,m as d,b as k,g as o,F as s,w as y,x as j,y as E,q as g,o as w,B as x,M as cd,N as dd,p as Qn,v as ud,n as eo,L as ad}from"../../chunks/vendor-1e8b365d.js";import{T as Va}from"../../chunks/Tip-62b14c6e.js";import{Y as ri}from"../../chunks/Youtube-c2a8cc39.js";import{I as ls}from"../../chunks/IconCopyLink-483c28ba.js";import{C as O}from"../../chunks/CodeBlock-e5764662.js";import{D as ld}from"../../chunks/DocNotebookDropdown-37d928d3.js";import{F as fd}from"../../chunks/FrameworkSwitchCourse-7f8f0f31.js";function md(B){let h,b;return h=new ld({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section4_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section4_tf.ipynb"}]}}),{c(){y(h.$$.fragment)},l(m){j(h.$$.fragment,m)},m(m,q){E(h,m,q),b=!0},i(m){b||(g(h.$$.fragment,m),b=!0)},o(m){w(h.$$.fragment,m),b=!1},d(m){x(h,m)}}}function _d(B){let h,b;return h=new ld({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter7/section4_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter7/section4_pt.ipynb"}]}}),{c(){y(h.$$.fragment)},l(m){j(h.$$.fragment,m)},m(m,q){E(h,m,q),b=!0},i(m){b||(g(h.$$.fragment,m),b=!0)},o(m){w(h.$$.fragment,m),b=!1},d(m){x(h,m)}}}function gd(B){let h,b,m,q,A;return{c(){h=l("p"),b=a("\u270F\uFE0F "),m=l("strong"),q=a("Your turn!"),A=a(" Another English word that is often used in French is \u201Cemail.\u201D Find the first sample in the training dataset that uses this word. How is it translated? How does the pretrained model translate the same English sentence?")},l(_){h=r(_,"P",{});var z=i(h);b=n(z,"\u270F\uFE0F "),m=r(z,"STRONG",{});var P=i(m);q=n(P,"Your turn!"),P.forEach(t),A=n(z," Another English word that is often used in French is \u201Cemail.\u201D Find the first sample in the training dataset that uses this word. How is it translated? How does the pretrained model translate the same English sentence?"),z.forEach(t)},m(_,z){o(_,h,z),s(h,b),s(h,m),s(m,q),s(h,A)},d(_){_&&t(h)}}}function wd(B){let h,b,m,q,A,_,z,P;return{c(){h=l("p"),b=a("\u{1F4A1} If you are using a multilingual tokenizer such as mBART, mBART-50, or M2M100, you will need to set the language codes of your inputs and targets in the tokenizer by setting "),m=l("code"),q=a("tokenizer.src_lang"),A=a(" and "),_=l("code"),z=a("tokenizer.tgt_lang"),P=a(" to the right values.")},l(D){h=r(D,"P",{});var T=i(h);b=n(T,"\u{1F4A1} If you are using a multilingual tokenizer such as mBART, mBART-50, or M2M100, you will need to set the language codes of your inputs and targets in the tokenizer by setting "),m=r(T,"CODE",{});var N=i(m);q=n(N,"tokenizer.src_lang"),N.forEach(t),A=n(T," and "),_=r(T,"CODE",{});var v=i(_);z=n(v,"tokenizer.tgt_lang"),v.forEach(t),P=n(T," to the right values."),T.forEach(t)},m(D,T){o(D,h,T),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P)},d(D){D&&t(h)}}}function bd(B){let h,b,m,q,A,_,z,P;return{c(){h=l("p"),b=a("\u{1F4A1} If you are using a T5 model (more specifically, one of the "),m=l("code"),q=a("t5-xxx"),A=a(" checkpoints), the model will expect the text inputs to have a prefix indicating the task at hand, such as "),_=l("code"),z=a("translate: English to French:"),P=a(".")},l(D){h=r(D,"P",{});var T=i(h);b=n(T,"\u{1F4A1} If you are using a T5 model (more specifically, one of the "),m=r(T,"CODE",{});var N=i(m);q=n(N,"t5-xxx"),N.forEach(t),A=n(T," checkpoints), the model will expect the text inputs to have a prefix indicating the task at hand, such as "),_=r(T,"CODE",{});var v=i(_);z=n(v,"translate: English to French:"),v.forEach(t),P=n(T,"."),T.forEach(t)},m(D,T){o(D,h,T),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P)},d(D){D&&t(h)}}}function $d(B){let h,b,m,q,A,_,z,P;return{c(){h=l("p"),b=a("\u26A0\uFE0F We don\u2019t pay attention to the attention mask of the targets, as the model won\u2019t expect it. Instead, the labels corresponding to a padding token should be set to "),m=l("code"),q=a("-100"),A=a(" so they are ignored in the loss computation. This will be done by our data collator later on since we are applying dynamic padding, but if you use padding here, you should adapt the preprocessing function to set all labels that correspond to the padding token to "),_=l("code"),z=a("-100"),P=a(".")},l(D){h=r(D,"P",{});var T=i(h);b=n(T,"\u26A0\uFE0F We don\u2019t pay attention to the attention mask of the targets, as the model won\u2019t expect it. Instead, the labels corresponding to a padding token should be set to "),m=r(T,"CODE",{});var N=i(m);q=n(N,"-100"),N.forEach(t),A=n(T," so they are ignored in the loss computation. This will be done by our data collator later on since we are applying dynamic padding, but if you use padding here, you should adapt the preprocessing function to set all labels that correspond to the padding token to "),_=r(T,"CODE",{});var v=i(_);z=n(v,"-100"),v.forEach(t),P=n(T,"."),T.forEach(t)},m(D,T){o(D,h,T),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P)},d(D){D&&t(h)}}}function kd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M;return q=new ls({}),U=new O({props:{code:`from transformers import TFAutoModelForSeq2SeqLM

model = TFAutoModelForSeq2SeqLM.from_pretrained(model_checkpoint, from_pt=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSeq2SeqLM

model = TFAutoModelForSeq2SeqLM.from_pretrained(model_checkpoint, from_pt=<span class="hljs-literal">True</span>)`}}),X=new Va({props:{warning:!1,$$slots:{default:[yd]},$$scope:{ctx:B}}}),{c(){h=l("h2"),b=l("a"),m=l("span"),y(q.$$.fragment),A=c(),_=l("span"),z=a("Fine-tuning the model with Keras"),P=c(),D=l("p"),T=a("First things first, we need an actual model to fine-tune. We\u2019ll use the usual "),N=l("code"),v=a("AutoModel"),S=a(" API:"),H=c(),y(U.$$.fragment),F=c(),y(X.$$.fragment),this.h()},l(I){h=r(I,"H2",{class:!0});var Y=i(h);b=r(Y,"A",{id:!0,class:!0,href:!0});var V=i(b);m=r(V,"SPAN",{});var re=i(m);j(q.$$.fragment,re),re.forEach(t),V.forEach(t),A=d(Y),_=r(Y,"SPAN",{});var he=i(_);z=n(he,"Fine-tuning the model with Keras"),he.forEach(t),Y.forEach(t),P=d(I),D=r(I,"P",{});var Q=i(D);T=n(Q,"First things first, we need an actual model to fine-tune. We\u2019ll use the usual "),N=r(Q,"CODE",{});var ee=i(N);v=n(ee,"AutoModel"),ee.forEach(t),S=n(Q," API:"),Q.forEach(t),H=d(I),j(U.$$.fragment,I),F=d(I),j(X.$$.fragment,I),this.h()},h(){k(b,"id","finetuning-the-model-with-keras"),k(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(b,"href","#finetuning-the-model-with-keras"),k(h,"class","relative group")},m(I,Y){o(I,h,Y),s(h,b),s(b,m),E(q,m,null),s(h,A),s(h,_),s(_,z),o(I,P,Y),o(I,D,Y),s(D,T),s(D,N),s(N,v),s(D,S),o(I,H,Y),E(U,I,Y),o(I,F,Y),E(X,I,Y),M=!0},i(I){M||(g(q.$$.fragment,I),g(U.$$.fragment,I),g(X.$$.fragment,I),M=!0)},o(I){w(q.$$.fragment,I),w(U.$$.fragment,I),w(X.$$.fragment,I),M=!1},d(I){I&&t(h),x(q),I&&t(P),I&&t(D),I&&t(H),x(U,I),I&&t(F),x(X,I)}}}function vd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we,J,se,ce,be,oe,ie;return q=new ls({}),oe=new O({props:{code:`from transformers import AutoModelForSeq2SeqLM

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)`}}),{c(){h=l("h2"),b=l("a"),m=l("span"),y(q.$$.fragment),A=c(),_=l("span"),z=a("Fine-tuning the model with the "),P=l("code"),D=a("Trainer"),T=a(" API"),N=c(),v=l("p"),S=a("The actual code using the "),H=l("code"),U=a("Trainer"),F=a(" will be the same as before, with just one little change: we use a "),X=l("a"),M=l("code"),I=a("Seq2SeqTrainer"),Y=a(" here, which is a subclass of "),V=l("code"),re=a("Trainer"),he=a(" that will allow us to properly deal with the evaluation, using the "),Q=l("code"),ee=a("generate()"),te=a(" method to predict outputs from the inputs. We\u2019ll dive into that in more detail when we talk about the metric computation."),G=c(),ne=l("p"),we=a("First things first, we need an actual model to fine-tune. We\u2019ll use the usual "),J=l("code"),se=a("AutoModel"),ce=a(" API:"),be=c(),y(oe.$$.fragment),this.h()},l(W){h=r(W,"H2",{class:!0});var ae=i(h);b=r(ae,"A",{id:!0,class:!0,href:!0});var Te=i(b);m=r(Te,"SPAN",{});var de=i(m);j(q.$$.fragment,de),de.forEach(t),Te.forEach(t),A=d(ae),_=r(ae,"SPAN",{});var K=i(_);z=n(K,"Fine-tuning the model with the "),P=r(K,"CODE",{});var ve=i(P);D=n(ve,"Trainer"),ve.forEach(t),T=n(K," API"),K.forEach(t),ae.forEach(t),N=d(W),v=r(W,"P",{});var le=i(v);S=n(le,"The actual code using the "),H=r(le,"CODE",{});var Ee=i(H);U=n(Ee,"Trainer"),Ee.forEach(t),F=n(le," will be the same as before, with just one little change: we use a "),X=r(le,"A",{href:!0,rel:!0});var Me=i(X);M=r(Me,"CODE",{});var ue=i(M);I=n(ue,"Seq2SeqTrainer"),ue.forEach(t),Me.forEach(t),Y=n(le," here, which is a subclass of "),V=r(le,"CODE",{});var xe=i(V);re=n(xe,"Trainer"),xe.forEach(t),he=n(le," that will allow us to properly deal with the evaluation, using the "),Q=r(le,"CODE",{});var Z=i(Q);ee=n(Z,"generate()"),Z.forEach(t),te=n(le," method to predict outputs from the inputs. We\u2019ll dive into that in more detail when we talk about the metric computation."),le.forEach(t),G=d(W),ne=r(W,"P",{});var Se=i(ne);we=n(Se,"First things first, we need an actual model to fine-tune. We\u2019ll use the usual "),J=r(Se,"CODE",{});var fe=i(J);se=n(fe,"AutoModel"),fe.forEach(t),ce=n(Se," API:"),Se.forEach(t),be=d(W),j(oe.$$.fragment,W),this.h()},h(){k(b,"id","finetuning-the-model-with-the-trainer-api"),k(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(b,"href","#finetuning-the-model-with-the-trainer-api"),k(h,"class","relative group"),k(X,"href","https://huggingface.co/transformers/main_classes/trainer.html#seq2seqtrainer"),k(X,"rel","nofollow")},m(W,ae){o(W,h,ae),s(h,b),s(b,m),E(q,m,null),s(h,A),s(h,_),s(_,z),s(_,P),s(P,D),s(_,T),o(W,N,ae),o(W,v,ae),s(v,S),s(v,H),s(H,U),s(v,F),s(v,X),s(X,M),s(M,I),s(v,Y),s(v,V),s(V,re),s(v,he),s(v,Q),s(Q,ee),s(v,te),o(W,G,ae),o(W,ne,ae),s(ne,we),s(ne,J),s(J,se),s(ne,ce),o(W,be,ae),E(oe,W,ae),ie=!0},i(W){ie||(g(q.$$.fragment,W),g(oe.$$.fragment,W),ie=!0)},o(W){w(q.$$.fragment,W),w(oe.$$.fragment,W),ie=!1},d(W){W&&t(h),x(q),W&&t(N),W&&t(v),W&&t(G),W&&t(ne),W&&t(be),x(oe,W)}}}function yd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H;return{c(){h=l("p"),b=a("\u{1F4A1} The "),m=l("code"),q=a("Helsinki-NLP/opus-mt-en-fr"),A=a(` checkpoint only has PyTorch weights, so
you\u2019ll get an error if you try to load the model without using the
`),_=l("code"),z=a("from_pt=True"),P=a(" argument in the "),D=l("code"),T=a("from_pretrained()"),N=a(` method. When you specify
`),v=l("code"),S=a("from_pt=True"),H=a(`, the library will automatically download and convert the
PyTorch weights for you. As you can see, it is very simple to switch between
frameworks in \u{1F917} Transformers!`)},l(U){h=r(U,"P",{});var F=i(h);b=n(F,"\u{1F4A1} The "),m=r(F,"CODE",{});var X=i(m);q=n(X,"Helsinki-NLP/opus-mt-en-fr"),X.forEach(t),A=n(F,` checkpoint only has PyTorch weights, so
you\u2019ll get an error if you try to load the model without using the
`),_=r(F,"CODE",{});var M=i(_);z=n(M,"from_pt=True"),M.forEach(t),P=n(F," argument in the "),D=r(F,"CODE",{});var I=i(D);T=n(I,"from_pretrained()"),I.forEach(t),N=n(F,` method. When you specify
`),v=r(F,"CODE",{});var Y=i(v);S=n(Y,"from_pt=True"),Y.forEach(t),H=n(F,`, the library will automatically download and convert the
PyTorch weights for you. As you can see, it is very simple to switch between
frameworks in \u{1F917} Transformers!`),F.forEach(t)},m(U,F){o(U,h,F),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),s(h,D),s(D,T),s(h,N),s(h,v),s(v,S),s(h,H)},d(U){U&&t(h)}}}function jd(B){let h,b;return h=new O({props:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model, return_tensors="tf")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),{c(){y(h.$$.fragment)},l(m){j(h.$$.fragment,m)},m(m,q){E(h,m,q),b=!0},i(m){b||(g(h.$$.fragment,m),b=!0)},o(m){w(h.$$.fragment,m),b=!1},d(m){x(h,m)}}}function Ed(B){let h,b;return h=new O({props:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)`}}),{c(){y(h.$$.fragment)},l(m){j(h.$$.fragment,m)},m(m,q){E(h,m,q),b=!0},i(m){b||(g(h.$$.fragment,m),b=!0)},o(m){w(h.$$.fragment,m),b=!1},d(m){x(h,m)}}}function xd(B){let h,b,m,q,A,_,z,P,D,T,N;return T=new O({props:{code:`tf_train_dataset = tokenized_datasets["train"].to_tf_dataset(
    columns=["input_ids", "attention_mask", "labels"],
    collate_fn=data_collator,
    shuffle=True,
    batch_size=32,
)
tf_eval_dataset = tokenized_datasets["validation"].to_tf_dataset(
    columns=["input_ids", "attention_mask", "labels"],
    collate_fn=data_collator,
    shuffle=False,
    batch_size=16,
)`,highlighted:`tf_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">True</span>,
    batch_size=<span class="hljs-number">32</span>,
)
tf_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">False</span>,
    batch_size=<span class="hljs-number">16</span>,
)`}}),{c(){h=l("p"),b=a("We can now use this "),m=l("code"),q=a("data_collator"),A=a(" to convert each of our datasets to a "),_=l("code"),z=a("tf.data.Dataset"),P=a(", ready for training:"),D=c(),y(T.$$.fragment)},l(v){h=r(v,"P",{});var S=i(h);b=n(S,"We can now use this "),m=r(S,"CODE",{});var H=i(m);q=n(H,"data_collator"),H.forEach(t),A=n(S," to convert each of our datasets to a "),_=r(S,"CODE",{});var U=i(_);z=n(U,"tf.data.Dataset"),U.forEach(t),P=n(S,", ready for training:"),S.forEach(t),D=d(v),j(T.$$.fragment,v)},m(v,S){o(v,h,S),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),o(v,D,S),E(T,v,S),N=!0},i(v){N||(g(T.$$.fragment,v),N=!0)},o(v){w(T.$$.fragment,v),N=!1},d(v){v&&t(h),v&&t(D),x(T,v)}}}function qd(B){let h,b,m,q,A,_,z,P;return{c(){h=l("p"),b=a("We will pass this "),m=l("code"),q=a("data_collator"),A=a(" along to the "),_=l("code"),z=a("Seq2SeqTrainer"),P=a(". Next, let\u2019s have a look at the metric.")},l(D){h=r(D,"P",{});var T=i(h);b=n(T,"We will pass this "),m=r(T,"CODE",{});var N=i(m);q=n(N,"data_collator"),N.forEach(t),A=n(T," along to the "),_=r(T,"CODE",{});var v=i(_);z=n(v,"Seq2SeqTrainer"),v.forEach(t),P=n(T,". Next, let\u2019s have a look at the metric."),T.forEach(t)},m(D,T){o(D,h,T),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P)},i:ad,o:ad,d(D){D&&t(h)}}}function nd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we;return{c(){h=l("p"),b=a("The feature that "),m=l("code"),q=a("Seq2SeqTrainer"),A=a(" adds to its superclass "),_=l("code"),z=a("Trainer"),P=a(" is the ability to use the "),D=l("code"),T=a("generate()"),N=a(" method during evaluation or prediction. During training, the model will use the "),v=l("code"),S=a("decoder_input_ids"),H=a(" with an attention mask ensuring it does not use the tokens after the token it\u2019s trying to predict, to speed up training. During inference we won\u2019t be able to use those since we won\u2019t have labels, so it\u2019s a good idea to evaluate our model with the same setup."),U=c(),F=l("p"),X=a("As we saw in "),M=l("a"),I=a("Chapter 1"),Y=a(", the decoder performs inference by predicting tokens one by one \u2014 something that\u2019s implemented behind the scenes in \u{1F917} Transformers by the "),V=l("code"),re=a("generate()"),he=a(" method. The "),Q=l("code"),ee=a("Seq2SeqTrainer"),te=a(" will let us use that method for evaluation if we set "),G=l("code"),ne=a("predict_with_generate=True"),we=a("."),this.h()},l(J){h=r(J,"P",{});var se=i(h);b=n(se,"The feature that "),m=r(se,"CODE",{});var ce=i(m);q=n(ce,"Seq2SeqTrainer"),ce.forEach(t),A=n(se," adds to its superclass "),_=r(se,"CODE",{});var be=i(_);z=n(be,"Trainer"),be.forEach(t),P=n(se," is the ability to use the "),D=r(se,"CODE",{});var oe=i(D);T=n(oe,"generate()"),oe.forEach(t),N=n(se," method during evaluation or prediction. During training, the model will use the "),v=r(se,"CODE",{});var ie=i(v);S=n(ie,"decoder_input_ids"),ie.forEach(t),H=n(se," with an attention mask ensuring it does not use the tokens after the token it\u2019s trying to predict, to speed up training. During inference we won\u2019t be able to use those since we won\u2019t have labels, so it\u2019s a good idea to evaluate our model with the same setup."),se.forEach(t),U=d(J),F=r(J,"P",{});var W=i(F);X=n(W,"As we saw in "),M=r(W,"A",{href:!0});var ae=i(M);I=n(ae,"Chapter 1"),ae.forEach(t),Y=n(W,", the decoder performs inference by predicting tokens one by one \u2014 something that\u2019s implemented behind the scenes in \u{1F917} Transformers by the "),V=r(W,"CODE",{});var Te=i(V);re=n(Te,"generate()"),Te.forEach(t),he=n(W," method. The "),Q=r(W,"CODE",{});var de=i(Q);ee=n(de,"Seq2SeqTrainer"),de.forEach(t),te=n(W," will let us use that method for evaluation if we set "),G=r(W,"CODE",{});var K=i(G);ne=n(K,"predict_with_generate=True"),K.forEach(t),we=n(W,"."),W.forEach(t),this.h()},h(){k(M,"href","/course/chapter1/6")},m(J,se){o(J,h,se),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),s(h,D),s(D,T),s(h,N),s(h,v),s(v,S),s(h,H),o(J,U,se),o(J,F,se),s(F,X),s(F,M),s(M,I),s(F,Y),s(F,V),s(V,re),s(F,he),s(F,Q),s(Q,ee),s(F,te),s(F,G),s(G,ne),s(F,we)},d(J){J&&t(h),J&&t(U),J&&t(F)}}}function Td(B){let h,b,m,q,A,_,z,P,D,T,N;return T=new O({props:{code:`import numpy as np


def compute_metrics(eval_preds):
    preds, labels = eval_preds
    # In case the model returns more than the prediction logits
    if isinstance(preds, tuple):
        preds = preds[0]

    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=True)

    # Replace -100s in the labels as we can't decode them
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Some simple post-processing
    decoded_preds = [pred.strip() for pred in decoded_preds]
    decoded_labels = [[label.strip()] for label in decoded_labels]

    result = metric.compute(predictions=decoded_preds, references=decoded_labels)
    return {"bleu": result["score"]}`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">eval_preds</span>):
    preds, labels = eval_preds
    <span class="hljs-comment"># In case the model returns more than the prediction logits</span>
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(preds, <span class="hljs-built_in">tuple</span>):
        preds = preds[<span class="hljs-number">0</span>]

    decoded_preds = tokenizer.batch_decode(preds, skip_special_tokens=<span class="hljs-literal">True</span>)

    <span class="hljs-comment"># Replace -100s in the labels as we can&#x27;t decode them</span>
    labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)

    <span class="hljs-comment"># Some simple post-processing</span>
    decoded_preds = [pred.strip() <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> decoded_preds]
    decoded_labels = [[label.strip()] <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> decoded_labels]

    result = metric.compute(predictions=decoded_preds, references=decoded_labels)
    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;bleu&quot;</span>: result[<span class="hljs-string">&quot;score&quot;</span>]}`}}),{c(){h=l("p"),b=a("To get from the model outputs to texts the metric can use, we will use the "),m=l("code"),q=a("tokenizer.batch_decode()"),A=a(" method. We just have to clean up all the "),_=l("code"),z=a("-100"),P=a("s in the labels (the tokenizer will automatically do the same for the padding token):"),D=c(),y(T.$$.fragment)},l(v){h=r(v,"P",{});var S=i(h);b=n(S,"To get from the model outputs to texts the metric can use, we will use the "),m=r(S,"CODE",{});var H=i(m);q=n(H,"tokenizer.batch_decode()"),H.forEach(t),A=n(S," method. We just have to clean up all the "),_=r(S,"CODE",{});var U=i(_);z=n(U,"-100"),U.forEach(t),P=n(S,"s in the labels (the tokenizer will automatically do the same for the padding token):"),S.forEach(t),D=d(v),j(T.$$.fragment,v)},m(v,S){o(v,h,S),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),o(v,D,S),E(T,v,S),N=!0},i(v){N||(g(T.$$.fragment,v),N=!0)},o(v){w(T.$$.fragment,v),N=!1},d(v){v&&t(h),v&&t(D),x(T,v)}}}function zd(B){let h,b,m,q,A,_,z,P,D,T,N;return T=new O({props:{code:`import numpy as np


def compute_metrics():
    all_preds = []
    all_labels = []
    sampled_dataset = tokenized_datasets["validation"].shuffle().select(range(200))
    tf_generate_dataset = sampled_dataset.to_tf_dataset(
        columns=["input_ids", "attention_mask", "labels"],
        collate_fn=data_collator,
        shuffle=False,
        batch_size=4,
    )
    for batch in tf_generate_dataset:
        predictions = model.generate(
            input_ids=batch["input_ids"], attention_mask=batch["attention_mask"]
        )
        decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
        labels = batch["labels"].numpy()
        labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
        decoded_preds = [pred.strip() for pred in decoded_preds]
        decoded_labels = [[label.strip()] for label in decoded_labels]
        all_preds.extend(decoded_preds)
        all_labels.extend(decoded_labels)

    result = metric.compute(predictions=all_preds, references=all_labels)
    return {"bleu": result["score"]}`,highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>():
    all_preds = []
    all_labels = []
    sampled_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].shuffle().select(<span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>))
    tf_generate_dataset = sampled_dataset.to_tf_dataset(
        columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
        collate_fn=data_collator,
        shuffle=<span class="hljs-literal">False</span>,
        batch_size=<span class="hljs-number">4</span>,
    )
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tf_generate_dataset:
        predictions = model.generate(
            input_ids=batch[<span class="hljs-string">&quot;input_ids&quot;</span>], attention_mask=batch[<span class="hljs-string">&quot;attention_mask&quot;</span>]
        )
        decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=<span class="hljs-literal">True</span>)
        labels = batch[<span class="hljs-string">&quot;labels&quot;</span>].numpy()
        labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
        decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)
        decoded_preds = [pred.strip() <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> decoded_preds]
        decoded_labels = [[label.strip()] <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> decoded_labels]
        all_preds.extend(decoded_preds)
        all_labels.extend(decoded_labels)

    result = metric.compute(predictions=all_preds, references=all_labels)
    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;bleu&quot;</span>: result[<span class="hljs-string">&quot;score&quot;</span>]}`}}),{c(){h=l("p"),b=a("To get from the model outputs to texts the metric can use, we will use the "),m=l("code"),q=a("tokenizer.batch_decode()"),A=a(" method. We just have to clean up all the "),_=l("code"),z=a("-100"),P=a("s in the labels; the tokenizer will automatically do the same for the padding token. Let\u2019s define a function that takes our model and a dataset and computes metrics on it. Because generation of long sequences can be slow, we subsample the validation set to make sure this doesn\u2019t take forever:"),D=c(),y(T.$$.fragment)},l(v){h=r(v,"P",{});var S=i(h);b=n(S,"To get from the model outputs to texts the metric can use, we will use the "),m=r(S,"CODE",{});var H=i(m);q=n(H,"tokenizer.batch_decode()"),H.forEach(t),A=n(S," method. We just have to clean up all the "),_=r(S,"CODE",{});var U=i(_);z=n(U,"-100"),U.forEach(t),P=n(S,"s in the labels; the tokenizer will automatically do the same for the padding token. Let\u2019s define a function that takes our model and a dataset and computes metrics on it. Because generation of long sequences can be slow, we subsample the validation set to make sure this doesn\u2019t take forever:"),S.forEach(t),D=d(v),j(T.$$.fragment,v)},m(v,S){o(v,h,S),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),o(v,D,S),E(T,v,S),N=!0},i(v){N||(g(T.$$.fragment,v),N=!0)},o(v){w(T.$$.fragment,v),N=!1},d(v){v&&t(h),v&&t(D),x(T,v)}}}function Dd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we,J,se,ce,be,oe,ie,W,ae,Te,de,K,ve,le,Ee,Me,ue,xe,Z,Se,fe,pt,mt,$e,Qe,Ue,Ce,ye,_t,me,$,R,et,qe,ze,ht,Be,_e,Re,Ke,gt,De,Oe,pe,He,Fe,Et,Ct,wt,rs,Ie,bt,xt,is,$t,Ye,qt,Tt,zt,ct,vs,Ot,ke,tt,je,kt,vt,Zt,ps,Le,yt,Jt,Ft,dt,st,It,Ge,Qt,Pe,hs,Xe,at,cs,nt,ut,es,Lt,Dt,Nt,ts,We;return S=new O({props:{code:`from transformers import Seq2SeqTrainingArguments

args = Seq2SeqTrainingArguments(
    f"marian-finetuned-kde4-en-to-fr",
    evaluation_strategy="no",
    save_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=32,
    per_device_eval_batch_size=64,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    predict_with_generate=True,
    fp16=True,
    push_to_hub=True,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainingArguments

args = Seq2SeqTrainingArguments(
    <span class="hljs-string">f&quot;marian-finetuned-kde4-en-to-fr&quot;</span>,
    evaluation_strategy=<span class="hljs-string">&quot;no&quot;</span>,
    save_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    learning_rate=<span class="hljs-number">2e-5</span>,
    per_device_train_batch_size=<span class="hljs-number">32</span>,
    per_device_eval_batch_size=<span class="hljs-number">64</span>,
    weight_decay=<span class="hljs-number">0.01</span>,
    save_total_limit=<span class="hljs-number">3</span>,
    num_train_epochs=<span class="hljs-number">3</span>,
    predict_with_generate=<span class="hljs-literal">True</span>,
    fp16=<span class="hljs-literal">True</span>,
    push_to_hub=<span class="hljs-literal">True</span>,
)`}}),R=new Va({props:{$$slots:{default:[Ad]},$$scope:{ctx:B}}}),Ke=new O({props:{code:`from transformers import Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    eval_dataset=tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics,
)`}}),He=new O({props:{code:"trainer.evaluate(max_length=max_target_length)",highlighted:"trainer.evaluate(max_length=max_target_length)"}}),Et=new O({props:{code:`{'eval_loss': 1.6964408159255981,
 'eval_bleu': 39.26865061007616,
 'eval_runtime': 965.8884,
 'eval_samples_per_second': 21.76,
 'eval_steps_per_second': 0.341}`,highlighted:`{<span class="hljs-string">&#x27;eval_loss&#x27;</span>: <span class="hljs-number">1.6964408159255981</span>,
 <span class="hljs-string">&#x27;eval_bleu&#x27;</span>: <span class="hljs-number">39.26865061007616</span>,
 <span class="hljs-string">&#x27;eval_runtime&#x27;</span>: <span class="hljs-number">965.8884</span>,
 <span class="hljs-string">&#x27;eval_samples_per_second&#x27;</span>: <span class="hljs-number">21.76</span>,
 <span class="hljs-string">&#x27;eval_steps_per_second&#x27;</span>: <span class="hljs-number">0.341</span>}`}}),$t=new O({props:{code:"trainer.train()",highlighted:"trainer.train()"}}),ke=new O({props:{code:"trainer.evaluate(max_length=max_target_length)",highlighted:"trainer.evaluate(max_length=max_target_length)"}}),je=new O({props:{code:`{'eval_loss': 0.8558505773544312,
 'eval_bleu': 52.94161337775576,
 'eval_runtime': 714.2576,
 'eval_samples_per_second': 29.426,
 'eval_steps_per_second': 0.461,
 'epoch': 3.0}`,highlighted:`{<span class="hljs-string">&#x27;eval_loss&#x27;</span>: <span class="hljs-number">0.8558505773544312</span>,
 <span class="hljs-string">&#x27;eval_bleu&#x27;</span>: <span class="hljs-number">52.94161337775576</span>,
 <span class="hljs-string">&#x27;eval_runtime&#x27;</span>: <span class="hljs-number">714.2576</span>,
 <span class="hljs-string">&#x27;eval_samples_per_second&#x27;</span>: <span class="hljs-number">29.426</span>,
 <span class="hljs-string">&#x27;eval_steps_per_second&#x27;</span>: <span class="hljs-number">0.461</span>,
 <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-number">3.0</span>}`}}),Pe=new O({props:{code:'trainer.push_to_hub(tags="translation", commit_message="Training complete")',highlighted:'trainer.push_to_hub(tags=<span class="hljs-string">&quot;translation&quot;</span>, commit_message=<span class="hljs-string">&quot;Training complete&quot;</span>)'}}),nt=new O({props:{code:"'https://huggingface.co/sgugger/marian-finetuned-kde4-en-to-fr/commit/3601d621e3baae2bc63d3311452535f8f58f6ef3'",highlighted:'<span class="hljs-string">&#x27;https://huggingface.co/sgugger/marian-finetuned-kde4-en-to-fr/commit/3601d621e3baae2bc63d3311452535f8f58f6ef3&#x27;</span>'}}),{c(){h=l("p"),b=a("Once this is done, we can define our "),m=l("code"),q=a("Seq2SeqTrainingArguments"),A=a(". Like for the "),_=l("code"),z=a("Trainer"),P=a(", we use a subclass of "),D=l("code"),T=a("TrainingArguments"),N=a(" that contains a few more fields:"),v=c(),y(S.$$.fragment),H=c(),U=l("p"),F=a("Apart from the usual hyperparameters (like learning rate, number of epochs, batch size, and some weight decay), here are a few changes compared to what we saw in the previous sections:"),X=c(),M=l("ul"),I=l("li"),Y=a("We don\u2019t set any regular evaluation, as evaluation takes a while; we will just evaluate our model once before training and after."),V=c(),re=l("li"),he=a("We set "),Q=l("code"),ee=a("fp16=True"),te=a(", which speeds up training on modern GPUs."),G=c(),ne=l("li"),we=a("We set "),J=l("code"),se=a("predict_with_generate=True"),ce=a(", as discussed above."),be=c(),oe=l("li"),ie=a("We use "),W=l("code"),ae=a("push_to_hub=True"),Te=a(" to upload the model to the Hub at the end of each epoch."),de=c(),K=l("p"),ve=a("Note that you can specify the full name of the repository you want to push to with the "),le=l("code"),Ee=a("hub_model_id"),Me=a(" argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ue=l("a"),xe=l("code"),Z=a("huggingface-course"),Se=a(" organization"),fe=a(", we added "),pt=l("code"),mt=a('hub_model_id="huggingface-course/marian-finetuned-kde4-en-to-fr"'),$e=a(" to "),Qe=l("code"),Ue=a("Seq2SeqTrainingArguments"),Ce=a(". By default, the repository used will be in your namespace and named after the output directory you set, so in our case it will be "),ye=l("code"),_t=a('"sgugger/marian-finetuned-kde4-en-to-fr"'),me=a(" (which is the model we linked to at the beginning of this section)."),$=c(),y(R.$$.fragment),et=c(),qe=l("p"),ze=a("Finally, we just pass everything to the "),ht=l("code"),Be=a("Seq2SeqTrainer"),_e=a(":"),Re=c(),y(Ke.$$.fragment),gt=c(),De=l("p"),Oe=a("Before training, we\u2019ll first look at the score our model gets, to double-check that we\u2019re not making things worse with our fine-tuning. This command will take a bit of time, so you can grab a coffee while it executes:"),pe=c(),y(He.$$.fragment),Fe=c(),y(Et.$$.fragment),Ct=c(),wt=l("p"),rs=a("A BLEU score of 39 is not too bad, which reflects the fact that our model is already good at translating English sentences to French ones."),Ie=c(),bt=l("p"),xt=a("Next is the training, which will also take a bit of time:"),is=c(),y($t.$$.fragment),Ye=c(),qt=l("p"),Tt=a("Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),zt=c(),ct=l("p"),vs=a("Once training is done, we evaluate our model again \u2014 hopefully we will see some amelioration in the BLEU score!"),Ot=c(),y(ke.$$.fragment),tt=c(),y(je.$$.fragment),kt=c(),vt=l("p"),Zt=a("That\u2019s a nearly 14-point improvement, which is great."),ps=c(),Le=l("p"),yt=a("Finally, we use the "),Jt=l("code"),Ft=a("push_to_hub()"),dt=a(" method to make sure we upload the latest version of the model. The "),st=l("code"),It=a("Trainer"),Ge=a(" also drafts a model card with all the evaluation results and uploads it. This model card contains metadata that helps the Model Hub pick the widget for the inference demo. Usually, there is no need to say anything as it can infer the right widget from the model class, but in this case, the same model class can be used for all kinds of sequence-to-sequence problems, so we specify it\u2019s a translation model:"),Qt=c(),y(Pe.$$.fragment),hs=c(),Xe=l("p"),at=a("This command returns the URL of the commit it just did, if you want to inspect it:"),cs=c(),y(nt.$$.fragment),ut=c(),es=l("p"),Lt=a("At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a translation task \u2014 congratulations!"),Dt=c(),Nt=l("p"),ts=a("If you want to dive a bit more deeply into the training loop, we will now show you how to do the same thing using \u{1F917} Accelerate."),this.h()},l(f){h=r(f,"P",{});var C=i(h);b=n(C,"Once this is done, we can define our "),m=r(C,"CODE",{});var ys=i(m);q=n(ys,"Seq2SeqTrainingArguments"),ys.forEach(t),A=n(C,". Like for the "),_=r(C,"CODE",{});var Ae=i(_);z=n(Ae,"Trainer"),Ae.forEach(t),P=n(C,", we use a subclass of "),D=r(C,"CODE",{});var Ks=i(D);T=n(Ks,"TrainingArguments"),Ks.forEach(t),N=n(C," that contains a few more fields:"),C.forEach(t),v=d(f),j(S.$$.fragment,f),H=d(f),U=r(f,"P",{});var ss=i(U);F=n(ss,"Apart from the usual hyperparameters (like learning rate, number of epochs, batch size, and some weight decay), here are a few changes compared to what we saw in the previous sections:"),ss.forEach(t),X=d(f),M=r(f,"UL",{});var Ve=i(M);I=r(Ve,"LI",{});var Ys=i(I);Y=n(Ys,"We don\u2019t set any regular evaluation, as evaluation takes a while; we will just evaluate our model once before training and after."),Ys.forEach(t),V=d(Ve),re=r(Ve,"LI",{});var Ht=i(re);he=n(Ht,"We set "),Q=r(Ht,"CODE",{});var js=i(Q);ee=n(js,"fp16=True"),js.forEach(t),te=n(Ht,", which speeds up training on modern GPUs."),Ht.forEach(t),G=d(Ve),ne=r(Ve,"LI",{});var Ze=i(ne);we=n(Ze,"We set "),J=r(Ze,"CODE",{});var ds=i(J);se=n(ds,"predict_with_generate=True"),ds.forEach(t),ce=n(Ze,", as discussed above."),Ze.forEach(t),be=d(Ve),oe=r(Ve,"LI",{});var Wt=i(oe);ie=n(Wt,"We use "),W=r(Wt,"CODE",{});var Gs=i(W);ae=n(Gs,"push_to_hub=True"),Gs.forEach(t),Te=n(Wt," to upload the model to the Hub at the end of each epoch."),Wt.forEach(t),Ve.forEach(t),de=d(f),K=r(f,"P",{});var Ne=i(K);ve=n(Ne,"Note that you can specify the full name of the repository you want to push to with the "),le=r(Ne,"CODE",{});var jt=i(le);Ee=n(jt,"hub_model_id"),jt.forEach(t),Me=n(Ne," argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ue=r(Ne,"A",{href:!0,rel:!0});var us=i(ue);xe=r(us,"CODE",{});var Mt=i(xe);Z=n(Mt,"huggingface-course"),Mt.forEach(t),Se=n(us," organization"),us.forEach(t),fe=n(Ne,", we added "),pt=r(Ne,"CODE",{});var fs=i(pt);mt=n(fs,'hub_model_id="huggingface-course/marian-finetuned-kde4-en-to-fr"'),fs.forEach(t),$e=n(Ne," to "),Qe=r(Ne,"CODE",{});var ge=i(Qe);Ue=n(ge,"Seq2SeqTrainingArguments"),ge.forEach(t),Ce=n(Ne,". By default, the repository used will be in your namespace and named after the output directory you set, so in our case it will be "),ye=r(Ne,"CODE",{});var Xs=i(ye);_t=n(Xs,'"sgugger/marian-finetuned-kde4-en-to-fr"'),Xs.forEach(t),me=n(Ne," (which is the model we linked to at the beginning of this section)."),Ne.forEach(t),$=d(f),j(R.$$.fragment,f),et=d(f),qe=r(f,"P",{});var ft=i(qe);ze=n(ft,"Finally, we just pass everything to the "),ht=r(ft,"CODE",{});var Vs=i(ht);Be=n(Vs,"Seq2SeqTrainer"),Vs.forEach(t),_e=n(ft,":"),ft.forEach(t),Re=d(f),j(Ke.$$.fragment,f),gt=d(f),De=r(f,"P",{});var Zs=i(De);Oe=n(Zs,"Before training, we\u2019ll first look at the score our model gets, to double-check that we\u2019re not making things worse with our fine-tuning. This command will take a bit of time, so you can grab a coffee while it executes:"),Zs.forEach(t),pe=d(f),j(He.$$.fragment,f),Fe=d(f),j(Et.$$.fragment,f),Ct=d(f),wt=r(f,"P",{});var Ut=i(wt);rs=n(Ut,"A BLEU score of 39 is not too bad, which reflects the fact that our model is already good at translating English sentences to French ones."),Ut.forEach(t),Ie=d(f),bt=r(f,"P",{});var Js=i(bt);xt=n(Js,"Next is the training, which will also take a bit of time:"),Js.forEach(t),is=d(f),j($t.$$.fragment,f),Ye=d(f),qt=r(f,"P",{});var Qs=i(qt);Tt=n(Qs,"Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary."),Qs.forEach(t),zt=d(f),ct=r(f,"P",{});var as=i(ct);vs=n(as,"Once training is done, we evaluate our model again \u2014 hopefully we will see some amelioration in the BLEU score!"),as.forEach(t),Ot=d(f),j(ke.$$.fragment,f),tt=d(f),j(je.$$.fragment,f),kt=d(f),vt=r(f,"P",{});var Bt=i(vt);Zt=n(Bt,"That\u2019s a nearly 14-point improvement, which is great."),Bt.forEach(t),ps=d(f),Le=r(f,"P",{});var Pt=i(Le);yt=n(Pt,"Finally, we use the "),Jt=r(Pt,"CODE",{});var Rt=i(Jt);Ft=n(Rt,"push_to_hub()"),Rt.forEach(t),dt=n(Pt," method to make sure we upload the latest version of the model. The "),st=r(Pt,"CODE",{});var Kt=i(st);It=n(Kt,"Trainer"),Kt.forEach(t),Ge=n(Pt," also drafts a model card with all the evaluation results and uploads it. This model card contains metadata that helps the Model Hub pick the widget for the inference demo. Usually, there is no need to say anything as it can infer the right widget from the model class, but in this case, the same model class can be used for all kinds of sequence-to-sequence problems, so we specify it\u2019s a translation model:"),Pt.forEach(t),Qt=d(f),j(Pe.$$.fragment,f),hs=d(f),Xe=r(f,"P",{});var ms=i(Xe);at=n(ms,"This command returns the URL of the commit it just did, if you want to inspect it:"),ms.forEach(t),cs=d(f),j(nt.$$.fragment,f),ut=d(f),es=r(f,"P",{});var ot=i(es);Lt=n(ot,"At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a translation task \u2014 congratulations!"),ot.forEach(t),Dt=d(f),Nt=r(f,"P",{});var _s=i(Nt);ts=n(_s,"If you want to dive a bit more deeply into the training loop, we will now show you how to do the same thing using \u{1F917} Accelerate."),_s.forEach(t),this.h()},h(){k(ue,"href","https://huggingface.co/huggingface-course"),k(ue,"rel","nofollow")},m(f,C){o(f,h,C),s(h,b),s(h,m),s(m,q),s(h,A),s(h,_),s(_,z),s(h,P),s(h,D),s(D,T),s(h,N),o(f,v,C),E(S,f,C),o(f,H,C),o(f,U,C),s(U,F),o(f,X,C),o(f,M,C),s(M,I),s(I,Y),s(M,V),s(M,re),s(re,he),s(re,Q),s(Q,ee),s(re,te),s(M,G),s(M,ne),s(ne,we),s(ne,J),s(J,se),s(ne,ce),s(M,be),s(M,oe),s(oe,ie),s(oe,W),s(W,ae),s(oe,Te),o(f,de,C),o(f,K,C),s(K,ve),s(K,le),s(le,Ee),s(K,Me),s(K,ue),s(ue,xe),s(xe,Z),s(ue,Se),s(K,fe),s(K,pt),s(pt,mt),s(K,$e),s(K,Qe),s(Qe,Ue),s(K,Ce),s(K,ye),s(ye,_t),s(K,me),o(f,$,C),E(R,f,C),o(f,et,C),o(f,qe,C),s(qe,ze),s(qe,ht),s(ht,Be),s(qe,_e),o(f,Re,C),E(Ke,f,C),o(f,gt,C),o(f,De,C),s(De,Oe),o(f,pe,C),E(He,f,C),o(f,Fe,C),E(Et,f,C),o(f,Ct,C),o(f,wt,C),s(wt,rs),o(f,Ie,C),o(f,bt,C),s(bt,xt),o(f,is,C),E($t,f,C),o(f,Ye,C),o(f,qt,C),s(qt,Tt),o(f,zt,C),o(f,ct,C),s(ct,vs),o(f,Ot,C),E(ke,f,C),o(f,tt,C),E(je,f,C),o(f,kt,C),o(f,vt,C),s(vt,Zt),o(f,ps,C),o(f,Le,C),s(Le,yt),s(Le,Jt),s(Jt,Ft),s(Le,dt),s(Le,st),s(st,It),s(Le,Ge),o(f,Qt,C),E(Pe,f,C),o(f,hs,C),o(f,Xe,C),s(Xe,at),o(f,cs,C),E(nt,f,C),o(f,ut,C),o(f,es,C),s(es,Lt),o(f,Dt,C),o(f,Nt,C),s(Nt,ts),We=!0},i(f){We||(g(S.$$.fragment,f),g(R.$$.fragment,f),g(Ke.$$.fragment,f),g(He.$$.fragment,f),g(Et.$$.fragment,f),g($t.$$.fragment,f),g(ke.$$.fragment,f),g(je.$$.fragment,f),g(Pe.$$.fragment,f),g(nt.$$.fragment,f),We=!0)},o(f){w(S.$$.fragment,f),w(R.$$.fragment,f),w(Ke.$$.fragment,f),w(He.$$.fragment,f),w(Et.$$.fragment,f),w($t.$$.fragment,f),w(ke.$$.fragment,f),w(je.$$.fragment,f),w(Pe.$$.fragment,f),w(nt.$$.fragment,f),We=!1},d(f){f&&t(h),f&&t(v),x(S,f),f&&t(H),f&&t(U),f&&t(X),f&&t(M),f&&t(de),f&&t(K),f&&t($),x(R,f),f&&t(et),f&&t(qe),f&&t(Re),x(Ke,f),f&&t(gt),f&&t(De),f&&t(pe),x(He,f),f&&t(Fe),x(Et,f),f&&t(Ct),f&&t(wt),f&&t(Ie),f&&t(bt),f&&t(is),x($t,f),f&&t(Ye),f&&t(qt),f&&t(zt),f&&t(ct),f&&t(Ot),x(ke,f),f&&t(tt),x(je,f),f&&t(kt),f&&t(vt),f&&t(ps),f&&t(Le),f&&t(Qt),x(Pe,f),f&&t(hs),f&&t(Xe),f&&t(cs),x(nt,f),f&&t(ut),f&&t(es),f&&t(Dt),f&&t(Nt)}}}function Pd(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we,J,se,ce,be,oe,ie,W,ae,Te,de,K,ve,le,Ee,Me,ue,xe,Z,Se,fe,pt,mt,$e,Qe,Ue,Ce,ye,_t,me;return q=new O({props:{code:"print(compute_metrics())",highlighted:'<span class="hljs-built_in">print</span>(compute_metrics())'}}),_=new O({props:{code:"{'bleu': 33.26983701454733}",highlighted:'{&#x27;bleu&#x27;: <span class="hljs-number">33.26983701454733</span>}'}}),H=new O({props:{code:`from transformers import create_optimizer
from transformers.keras_callbacks import PushToHubCallback
import tensorflow as tf

# The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied
# by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,
# not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.
num_epochs = 3
num_train_steps = len(tf_train_dataset) * num_epochs

optimizer, schedule = create_optimizer(
    init_lr=5e-5,
    num_warmup_steps=0,
    num_train_steps=num_train_steps,
    weight_decay_rate=0.01,
)
model.compile(optimizer=optimizer)

# Train in mixed-precision float16
tf.keras.mixed_precision.set_global_policy("mixed_float16")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer
<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-comment"># The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied</span>
<span class="hljs-comment"># by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,</span>
<span class="hljs-comment"># not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.</span>
num_epochs = <span class="hljs-number">3</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_epochs

optimizer, schedule = create_optimizer(
    init_lr=<span class="hljs-number">5e-5</span>,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_train_steps=num_train_steps,
    weight_decay_rate=<span class="hljs-number">0.01</span>,
)
model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)

<span class="hljs-comment"># Train in mixed-precision float16</span>
tf.keras.mixed_precision.set_global_policy(<span class="hljs-string">&quot;mixed_float16&quot;</span>)`}}),ee=new O({props:{code:`from transformers.keras_callbacks import PushToHubCallback

callback = PushToHubCallback(
    output_dir="marian-finetuned-kde4-en-to-fr", tokenizer=tokenizer
)

model.fit(
    tf_train_dataset,
    validation_data=tf_eval_dataset,
    callbacks=[callback],
    epochs=num_epochs,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback

callback = PushToHubCallback(
    output_dir=<span class="hljs-string">&quot;marian-finetuned-kde4-en-to-fr&quot;</span>, tokenizer=tokenizer
)

model.fit(
    tf_train_dataset,
    validation_data=tf_eval_dataset,
    callbacks=[callback],
    epochs=num_epochs,
)`}}),Z=new Va({props:{$$slots:{default:[Sd]},$$scope:{ctx:B}}}),$e=new O({props:{code:"print(compute_metrics())",highlighted:'<span class="hljs-built_in">print</span>(compute_metrics())'}}),Ue=new O({props:{code:"{'bleu': 57.334066271545865}",highlighted:'{&#x27;bleu&#x27;: <span class="hljs-number">57.334066271545865</span>}'}}),{c(){h=l("p"),b=a("Before we start, let\u2019s see what kind of results we get from our model without any training:"),m=c(),y(q.$$.fragment),A=c(),y(_.$$.fragment),z=c(),P=l("p"),D=a("Once this is done, we can prepare everything we need to compile and train our model. Note the use of "),T=l("code"),N=a('tf.keras.mixed_precision.set_global_policy("mixed_float16")'),v=a(" \u2014 this will tell Keras to train using float16, which can give a significant speedup on GPUs that support it (Nvidia 20xx/V100 or newer)."),S=c(),y(H.$$.fragment),U=c(),F=l("p"),X=a("Next, we define a "),M=l("code"),I=a("PushToHubCallback"),Y=a(" to upload our model to the Hub during training, as we saw in "),V=l("a"),re=a("section 2"),he=a(", and then we simply fit the model with that callback:"),Q=c(),y(ee.$$.fragment),te=c(),G=l("p"),ne=a("Note that you can specify the name of the repository you want to push to with the "),we=l("code"),J=a("hub_model_id"),se=a(" argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ce=l("a"),be=l("code"),oe=a("huggingface-course"),ie=a(" organization"),W=a(", we added "),ae=l("code"),Te=a('hub_model_id="huggingface-course/marian-finetuned-kde4-en-to-fr"'),de=a(" to "),K=l("code"),ve=a("Seq2SeqTrainingArguments"),le=a(". By default, the repository used will be in your namespace and named after the output directory you set, so here it will be "),Ee=l("code"),Me=a('"sgugger/marian-finetuned-kde4-en-to-fr"'),ue=a(" (which is the model we linked to at the beginning of this section)."),xe=c(),y(Z.$$.fragment),Se=c(),fe=l("p"),pt=a("Finally, let\u2019s see what our metrics look like now that training has finished:"),mt=c(),y($e.$$.fragment),Qe=c(),y(Ue.$$.fragment),Ce=c(),ye=l("p"),_t=a("At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a translation task \u2014 congratulations!"),this.h()},l($){h=r($,"P",{});var R=i(h);b=n(R,"Before we start, let\u2019s see what kind of results we get from our model without any training:"),R.forEach(t),m=d($),j(q.$$.fragment,$),A=d($),j(_.$$.fragment,$),z=d($),P=r($,"P",{});var et=i(P);D=n(et,"Once this is done, we can prepare everything we need to compile and train our model. Note the use of "),T=r(et,"CODE",{});var qe=i(T);N=n(qe,'tf.keras.mixed_precision.set_global_policy("mixed_float16")'),qe.forEach(t),v=n(et," \u2014 this will tell Keras to train using float16, which can give a significant speedup on GPUs that support it (Nvidia 20xx/V100 or newer)."),et.forEach(t),S=d($),j(H.$$.fragment,$),U=d($),F=r($,"P",{});var ze=i(F);X=n(ze,"Next, we define a "),M=r(ze,"CODE",{});var ht=i(M);I=n(ht,"PushToHubCallback"),ht.forEach(t),Y=n(ze," to upload our model to the Hub during training, as we saw in "),V=r(ze,"A",{href:!0});var Be=i(V);re=n(Be,"section 2"),Be.forEach(t),he=n(ze,", and then we simply fit the model with that callback:"),ze.forEach(t),Q=d($),j(ee.$$.fragment,$),te=d($),G=r($,"P",{});var _e=i(G);ne=n(_e,"Note that you can specify the name of the repository you want to push to with the "),we=r(_e,"CODE",{});var Re=i(we);J=n(Re,"hub_model_id"),Re.forEach(t),se=n(_e," argument (in particular, you will have to use this argument to push to an organization). For instance, when we pushed the model to the "),ce=r(_e,"A",{href:!0,rel:!0});var Ke=i(ce);be=r(Ke,"CODE",{});var gt=i(be);oe=n(gt,"huggingface-course"),gt.forEach(t),ie=n(Ke," organization"),Ke.forEach(t),W=n(_e,", we added "),ae=r(_e,"CODE",{});var De=i(ae);Te=n(De,'hub_model_id="huggingface-course/marian-finetuned-kde4-en-to-fr"'),De.forEach(t),de=n(_e," to "),K=r(_e,"CODE",{});var Oe=i(K);ve=n(Oe,"Seq2SeqTrainingArguments"),Oe.forEach(t),le=n(_e,". By default, the repository used will be in your namespace and named after the output directory you set, so here it will be "),Ee=r(_e,"CODE",{});var pe=i(Ee);Me=n(pe,'"sgugger/marian-finetuned-kde4-en-to-fr"'),pe.forEach(t),ue=n(_e," (which is the model we linked to at the beginning of this section)."),_e.forEach(t),xe=d($),j(Z.$$.fragment,$),Se=d($),fe=r($,"P",{});var He=i(fe);pt=n(He,"Finally, let\u2019s see what our metrics look like now that training has finished:"),He.forEach(t),mt=d($),j($e.$$.fragment,$),Qe=d($),j(Ue.$$.fragment,$),Ce=d($),ye=r($,"P",{});var Fe=i(ye);_t=n(Fe,"At this stage, you can use the inference widget on the Model Hub to test your model and share it with your friends. You have successfully fine-tuned a model on a translation task \u2014 congratulations!"),Fe.forEach(t),this.h()},h(){k(V,"href","(/course/chapter7/2)"),k(ce,"href","https://huggingface.co/huggingface-course"),k(ce,"rel","nofollow")},m($,R){o($,h,R),s(h,b),o($,m,R),E(q,$,R),o($,A,R),E(_,$,R),o($,z,R),o($,P,R),s(P,D),s(P,T),s(T,N),s(P,v),o($,S,R),E(H,$,R),o($,U,R),o($,F,R),s(F,X),s(F,M),s(M,I),s(F,Y),s(F,V),s(V,re),s(F,he),o($,Q,R),E(ee,$,R),o($,te,R),o($,G,R),s(G,ne),s(G,we),s(we,J),s(G,se),s(G,ce),s(ce,be),s(be,oe),s(ce,ie),s(G,W),s(G,ae),s(ae,Te),s(G,de),s(G,K),s(K,ve),s(G,le),s(G,Ee),s(Ee,Me),s(G,ue),o($,xe,R),E(Z,$,R),o($,Se,R),o($,fe,R),s(fe,pt),o($,mt,R),E($e,$,R),o($,Qe,R),E(Ue,$,R),o($,Ce,R),o($,ye,R),s(ye,_t),me=!0},i($){me||(g(q.$$.fragment,$),g(_.$$.fragment,$),g(H.$$.fragment,$),g(ee.$$.fragment,$),g(Z.$$.fragment,$),g($e.$$.fragment,$),g(Ue.$$.fragment,$),me=!0)},o($){w(q.$$.fragment,$),w(_.$$.fragment,$),w(H.$$.fragment,$),w(ee.$$.fragment,$),w(Z.$$.fragment,$),w($e.$$.fragment,$),w(Ue.$$.fragment,$),me=!1},d($){$&&t(h),$&&t(m),x(q,$),$&&t(A),x(_,$),$&&t(z),$&&t(P),$&&t(S),x(H,$),$&&t(U),$&&t(F),$&&t(Q),x(ee,$),$&&t(te),$&&t(G),$&&t(xe),x(Z,$),$&&t(Se),$&&t(fe),$&&t(mt),x($e,$),$&&t(Qe),x(Ue,$),$&&t(Ce),$&&t(ye)}}}function Ad(B){let h,b,m,q,A;return{c(){h=l("p"),b=a("\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when defining your "),m=l("code"),q=a("Seq2SeqTrainer"),A=a(" and will need to set a new name.")},l(_){h=r(_,"P",{});var z=i(h);b=n(z,"\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when defining your "),m=r(z,"CODE",{});var P=i(m);q=n(P,"Seq2SeqTrainer"),P.forEach(t),A=n(z," and will need to set a new name."),z.forEach(t)},m(_,z){o(_,h,z),s(h,b),s(h,m),s(m,q),s(h,A)},d(_){_&&t(h)}}}function Sd(B){let h,b,m,q,A;return{c(){h=l("p"),b=a("\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when calling "),m=l("code"),q=a("model.fit()"),A=a(" and will need to set a new name.")},l(_){h=r(_,"P",{});var z=i(h);b=n(z,"\u{1F4A1} If the output directory you are using already exists, it needs to be a local clone of the repository you want to push to. If it isn\u2019t, you\u2019ll get an error when calling "),m=r(z,"CODE",{});var P=i(m);q=n(P,"model.fit()"),P.forEach(t),A=n(z," and will need to set a new name."),z.forEach(t)},m(_,z){o(_,h,z),s(h,b),s(h,m),s(m,q),s(h,A)},d(_){_&&t(h)}}}function od(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we,J,se,ce,be,oe,ie,W,ae,Te,de,K,ve,le,Ee,Me,ue,xe,Z,Se,fe,pt,mt,$e,Qe,Ue,Ce,ye,_t,me,$,R,et,qe,ze,ht,Be,_e,Re,Ke,gt,De,Oe,pe,He,Fe,Et,Ct,wt,rs,Ie,bt,xt,is,$t,Ye,qt,Tt,zt,ct,vs,Ot,ke,tt,je,kt,vt,Zt,ps,Le,yt,Jt,Ft,dt,st,It,Ge,Qt,Pe,hs,Xe,at,cs,nt,ut,es,Lt,Dt,Nt,ts,We,f,C,ys,Ae,Ks,ss,Ve,Ys,Ht,js,Ze,ds,Wt,Gs,Ne,jt,us,Mt,fs,ge,Xs,ft,Vs,Zs,Ut,Js,Qs,as,Bt,Pt,Rt,Kt,ms,ot,_s,lt,xa,gs,Za,qa,At,ea,Es,Ta,xs;return q=new ls({}),V=new ls({}),ie=new O({props:{code:`from torch.utils.data import DataLoader

tokenized_datasets.set_format("torch")
train_dataloader = DataLoader(
    tokenized_datasets["train"],
    shuffle=True,
    collate_fn=data_collator,
    batch_size=8,
)
eval_dataloader = DataLoader(
    tokenized_datasets["validation"], collate_fn=data_collator, batch_size=8
)`,highlighted:`<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader

tokenized_datasets.set_format(<span class="hljs-string">&quot;torch&quot;</span>)
train_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>],
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)
eval_dataloader = DataLoader(
    tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>], collate_fn=data_collator, batch_size=<span class="hljs-number">8</span>
)`}}),K=new O({props:{code:"model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)",highlighted:"model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)"}}),ue=new O({props:{code:`from transformers import AdamW

optimizer = AdamW(model.parameters(), lr=2e-5)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AdamW

optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)`}}),ye=new O({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator()
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`}}),De=new O({props:{code:`from transformers import get_scheduler

num_train_epochs = 3
num_update_steps_per_epoch = len(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

num_train_epochs = <span class="hljs-number">3</span>
num_update_steps_per_epoch = <span class="hljs-built_in">len</span>(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    <span class="hljs-string">&quot;linear&quot;</span>,
    optimizer=optimizer,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_training_steps=num_training_steps,
)`}}),Ye=new O({props:{code:`from huggingface_hub import Repository, get_full_repo_name

model_name = "marian-finetuned-kde4-en-to-fr-accelerate"
repo_name = get_full_repo_name(model_name)
repo_name`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository, get_full_repo_name

model_name = <span class="hljs-string">&quot;marian-finetuned-kde4-en-to-fr-accelerate&quot;</span>
repo_name = get_full_repo_name(model_name)
repo_name`}}),Tt=new O({props:{code:"'sgugger/marian-finetuned-kde4-en-to-fr-accelerate'",highlighted:'<span class="hljs-string">&#x27;sgugger/marian-finetuned-kde4-en-to-fr-accelerate&#x27;</span>'}}),ke=new O({props:{code:`output_dir = "marian-finetuned-kde4-en-to-fr-accelerate"
repo = Repository(output_dir, clone_from=repo_name)`,highlighted:`output_dir = <span class="hljs-string">&quot;marian-finetuned-kde4-en-to-fr-accelerate&quot;</span>
repo = Repository(output_dir, clone_from=repo_name)`}}),Ge=new ls({}),We=new O({props:{code:`def postprocess(predictions, labels):
    predictions = predictions.cpu().numpy()
    labels = labels.cpu().numpy()

    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)

    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    # Some simple post-processing
    decoded_preds = [pred.strip() for pred in decoded_preds]
    decoded_labels = [[label.strip()] for label in decoded_labels]
    return decoded_preds, decoded_labels`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">postprocess</span>(<span class="hljs-params">predictions, labels</span>):
    predictions = predictions.cpu().numpy()
    labels = labels.cpu().numpy()

    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=<span class="hljs-literal">True</span>)

    <span class="hljs-comment"># Replace -100 in the labels as we can&#x27;t decode them.</span>
    labels = np.where(labels != -<span class="hljs-number">100</span>, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=<span class="hljs-literal">True</span>)

    <span class="hljs-comment"># Some simple post-processing</span>
    decoded_preds = [pred.strip() <span class="hljs-keyword">for</span> pred <span class="hljs-keyword">in</span> decoded_preds]
    decoded_labels = [[label.strip()] <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> decoded_labels]
    <span class="hljs-keyword">return</span> decoded_preds, decoded_labels`}}),Kt=new O({props:{code:`from tqdm.auto import tqdm
import torch

progress_bar = tqdm(range(num_training_steps))

for epoch in range(num_train_epochs):
    # Training
    model.train()
    for batch in train_dataloader:
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

    # Evaluation
    model.eval()
    for batch in tqdm(eval_dataloader):
        with torch.no_grad():
            generated_tokens = accelerator.unwrap_model(model).generate(
                batch["input_ids"],
                attention_mask=batch["attention_mask"],
                max_length=128,
            )
        labels = batch["labels"]

        # Necessary to pad predictions and labels for being gathered
        generated_tokens = accelerator.pad_across_processes(
            generated_tokens, dim=1, pad_index=tokenizer.pad_token_id
        )
        labels = accelerator.pad_across_processes(labels, dim=1, pad_index=-100)

        predictions_gathered = accelerator.gather(generated_tokens)
        labels_gathered = accelerator.gather(labels)

        decoded_preds, decoded_labels = postprocess(predictions_gathered, labels_gathered)
        metric.add_batch(predictions=decoded_preds, references=decoded_labels)

    results = metric.compute()
    print(f"epoch {epoch}, BLEU score: {results['score']:.2f}")

    # Save and upload
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    if accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=f"Training in progress epoch {epoch}", blocking=False
        )`,highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> torch

progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_train_epochs):
    <span class="hljs-comment"># Training</span>
    model.train()
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_dataloader:
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Evaluation</span>
    model.<span class="hljs-built_in">eval</span>()
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tqdm(eval_dataloader):
        <span class="hljs-keyword">with</span> torch.no_grad():
            generated_tokens = accelerator.unwrap_model(model).generate(
                batch[<span class="hljs-string">&quot;input_ids&quot;</span>],
                attention_mask=batch[<span class="hljs-string">&quot;attention_mask&quot;</span>],
                max_length=<span class="hljs-number">128</span>,
            )
        labels = batch[<span class="hljs-string">&quot;labels&quot;</span>]

        <span class="hljs-comment"># Necessary to pad predictions and labels for being gathered</span>
        generated_tokens = accelerator.pad_across_processes(
            generated_tokens, dim=<span class="hljs-number">1</span>, pad_index=tokenizer.pad_token_id
        )
        labels = accelerator.pad_across_processes(labels, dim=<span class="hljs-number">1</span>, pad_index=-<span class="hljs-number">100</span>)

        predictions_gathered = accelerator.gather(generated_tokens)
        labels_gathered = accelerator.gather(labels)

        decoded_preds, decoded_labels = postprocess(predictions_gathered, labels_gathered)
        metric.add_batch(predictions=decoded_preds, references=decoded_labels)

    results = metric.compute()
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;epoch <span class="hljs-subst">{epoch}</span>, BLEU score: <span class="hljs-subst">{results[<span class="hljs-string">&#x27;score&#x27;</span>]:<span class="hljs-number">.2</span>f}</span>&quot;</span>)

    <span class="hljs-comment"># Save and upload</span>
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    <span class="hljs-keyword">if</span> accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=<span class="hljs-string">f&quot;Training in progress epoch <span class="hljs-subst">{epoch}</span>&quot;</span>, blocking=<span class="hljs-literal">False</span>
        )`}}),ot=new O({props:{code:`epoch 0, BLEU score: 53.47
epoch 1, BLEU score: 54.24
epoch 2, BLEU score: 54.44`,highlighted:`epoch <span class="hljs-number">0</span>, BLEU score: <span class="hljs-number">53.47</span>
epoch <span class="hljs-number">1</span>, BLEU score: <span class="hljs-number">54.24</span>
epoch <span class="hljs-number">2</span>, BLEU score: <span class="hljs-number">54.44</span>`}}),{c(){h=l("h2"),b=l("a"),m=l("span"),y(q.$$.fragment),A=c(),_=l("span"),z=a("A custom training loop"),P=c(),D=l("p"),T=a("Let\u2019s now take a look at the full training loop, so you can easily customize the parts you need. It will look a lot like what we did in "),N=l("a"),v=a("section 2"),S=a(" and "),H=l("a"),U=a("Chapter 3"),F=a("."),X=c(),M=l("h3"),I=l("a"),Y=l("span"),y(V.$$.fragment),re=c(),he=l("span"),Q=a("Preparing everything for training"),ee=c(),te=l("p"),G=a("You\u2019ve seen all of this a few times now, so we\u2019ll go through the code quite quickly. First we\u2019ll build the "),ne=l("code"),we=a("DataLoader"),J=a("s from our datasets, after setting the datasets to the "),se=l("code"),ce=a('"torch"'),be=a(" format so we get PyTorch tensors:"),oe=c(),y(ie.$$.fragment),W=c(),ae=l("p"),Te=a("Next we reinstantiate our model, to make sure we\u2019re not continuing the fine-tuning from before but starting from the pretrained model again:"),de=c(),y(K.$$.fragment),ve=c(),le=l("p"),Ee=a("Then we will need an optimizer:"),Me=c(),y(ue.$$.fragment),xe=c(),Z=l("p"),Se=a("Once we have all those objects, we can send them to the "),fe=l("code"),pt=a("accelerator.prepare()"),mt=a(" method. Remember that if you want to train on TPUs in a Colab notebook, you will need to move all of this code into a training function, and that shouldn\u2019t execute any cell that instantiates an "),$e=l("code"),Qe=a("Accelerator"),Ue=a("."),Ce=c(),y(ye.$$.fragment),_t=c(),me=l("p"),$=a("Now that we have sent our "),R=l("code"),et=a("train_dataloader"),qe=a(" to "),ze=l("code"),ht=a("accelerator.prepare()"),Be=a(", we can use its length to compute the number of training steps. Remember we should always do this after preparing the dataloader, as that method will change the length of the "),_e=l("code"),Re=a("DataLoader"),Ke=a(". We use a classic linear schedule from the learning rate to 0:"),gt=c(),y(De.$$.fragment),Oe=c(),pe=l("p"),He=a("Lastly, to push our model to the Hub, we will need to create a "),Fe=l("code"),Et=a("Repository"),Ct=a(" object in a working folder. First log in to the Hugging Face Hub, if you\u2019re not logged in already. We\u2019ll determine the repository name from the model ID we want to give our model (feel free to replace the "),wt=l("code"),rs=a("repo_name"),Ie=a(" with your own choice; it just needs to contain your username, which is what the function "),bt=l("code"),xt=a("get_full_repo_name()"),is=a(" does):"),$t=c(),y(Ye.$$.fragment),qt=c(),y(Tt.$$.fragment),zt=c(),ct=l("p"),vs=a("Then we can clone that repository in a local folder. If it already exists, this local folder should be a clone of the repository we are working with:"),Ot=c(),y(ke.$$.fragment),tt=c(),je=l("p"),kt=a("We can now upload anything we save in "),vt=l("code"),Zt=a("output_dir"),ps=a(" by calling the "),Le=l("code"),yt=a("repo.push_to_hub()"),Jt=a(" method. This will help us upload the intermediate models at the end of each epoch."),Ft=c(),dt=l("h3"),st=l("a"),It=l("span"),y(Ge.$$.fragment),Qt=c(),Pe=l("span"),hs=a("Training loop"),Xe=c(),at=l("p"),cs=a("We are now ready to write the full training loop. To simplify its evaluation part, we define this "),nt=l("code"),ut=a("postprocess()"),es=a(" function that takes predictions and labels and converts them to the lists of strings our "),Lt=l("code"),Dt=a("metric"),Nt=a(" object will expect:"),ts=c(),y(We.$$.fragment),f=c(),C=l("p"),ys=a("The training loop looks a lot like the ones in "),Ae=l("a"),Ks=a("section 2"),ss=a(" and "),Ve=l("a"),Ys=a("Chapter 3"),Ht=a(", with a few differences in the evaluation part \u2014 so let\u2019s focus on that!"),js=c(),Ze=l("p"),ds=a("The first thing to note is that we use the "),Wt=l("code"),Gs=a("generate()"),Ne=a(" method to compute predictions, but this is a method on our base model, not the wrapped model \u{1F917} Accelerate created in the "),jt=l("code"),us=a("prepare()"),Mt=a(" method. That\u2019s why we unwrap the model first, then call this method."),fs=c(),ge=l("p"),Xs=a("The second thing is that, like with "),ft=l("a"),Vs=a("token classification"),Zs=a(", two processes may have padded the inputs and labels to different shapes, so we use "),Ut=l("code"),Js=a("accelerator.pad_across_processes()"),Qs=a(" to make the predictions and labels the same shape before calling the "),as=l("code"),Bt=a("gather()"),Pt=a(" method. If we don\u2019t do this, the evaluation will either error out or hang forever."),Rt=c(),y(Kt.$$.fragment),ms=c(),y(ot.$$.fragment),_s=c(),lt=l("p"),xa=a("Once this is done, you should have a model that has results pretty similar to the one trained with the "),gs=l("code"),Za=a("Seq2SeqTrainer"),qa=a(". You can check the one we trained using this code at "),At=l("a"),ea=l("em"),Es=a("huggingface-course/marian-finetuned-kde4-en-to-fr-accelerate"),Ta=a(". And if you want to test out any tweaks to the training loop, you can directly implement them by editing the code shown above!"),this.h()},l(u){h=r(u,"H2",{class:!0});var L=i(h);b=r(L,"A",{id:!0,class:!0,href:!0});var ta=i(b);m=r(ta,"SPAN",{});var Ja=i(m);j(q.$$.fragment,Ja),Ja.forEach(t),ta.forEach(t),A=d(L),_=r(L,"SPAN",{});var sa=i(_);z=n(sa,"A custom training loop"),sa.forEach(t),L.forEach(t),P=d(u),D=r(u,"P",{});var qs=i(D);T=n(qs,"Let\u2019s now take a look at the full training loop, so you can easily customize the parts you need. It will look a lot like what we did in "),N=r(qs,"A",{href:!0});var ga=i(N);v=n(ga,"section 2"),ga.forEach(t),S=n(qs," and "),H=r(qs,"A",{href:!0});var to=i(H);U=n(to,"Chapter 3"),to.forEach(t),F=n(qs,"."),qs.forEach(t),X=d(u),M=r(u,"H3",{class:!0});var wa=i(M);I=r(wa,"A",{id:!0,class:!0,href:!0});var aa=i(I);Y=r(aa,"SPAN",{});var Qa=i(Y);j(V.$$.fragment,Qa),Qa.forEach(t),aa.forEach(t),re=d(wa),he=r(wa,"SPAN",{});var na=i(he);Q=n(na,"Preparing everything for training"),na.forEach(t),wa.forEach(t),ee=d(u),te=r(u,"P",{});var Ts=i(te);G=n(Ts,"You\u2019ve seen all of this a few times now, so we\u2019ll go through the code quite quickly. First we\u2019ll build the "),ne=r(Ts,"CODE",{});var ba=i(ne);we=n(ba,"DataLoader"),ba.forEach(t),J=n(Ts,"s from our datasets, after setting the datasets to the "),se=r(Ts,"CODE",{});var so=i(se);ce=n(so,'"torch"'),so.forEach(t),be=n(Ts," format so we get PyTorch tensors:"),Ts.forEach(t),oe=d(u),j(ie.$$.fragment,u),W=d(u),ae=r(u,"P",{});var en=i(ae);Te=n(en,"Next we reinstantiate our model, to make sure we\u2019re not continuing the fine-tuning from before but starting from the pretrained model again:"),en.forEach(t),de=d(u),j(K.$$.fragment,u),ve=d(u),le=r(u,"P",{});var oa=i(le);Ee=n(oa,"Then we will need an optimizer:"),oa.forEach(t),Me=d(u),j(ue.$$.fragment,u),xe=d(u),Z=r(u,"P",{});var zs=i(Z);Se=n(zs,"Once we have all those objects, we can send them to the "),fe=r(zs,"CODE",{});var Ds=i(fe);pt=n(Ds,"accelerator.prepare()"),Ds.forEach(t),mt=n(zs," method. Remember that if you want to train on TPUs in a Colab notebook, you will need to move all of this code into a training function, and that shouldn\u2019t execute any cell that instantiates an "),$e=r(zs,"CODE",{});var tn=i($e);Qe=n(tn,"Accelerator"),tn.forEach(t),Ue=n(zs,"."),zs.forEach(t),Ce=d(u),j(ye.$$.fragment,u),_t=d(u),me=r(u,"P",{});var rt=i(me);$=n(rt,"Now that we have sent our "),R=r(rt,"CODE",{});var Ps=i(R);et=n(Ps,"train_dataloader"),Ps.forEach(t),qe=n(rt," to "),ze=r(rt,"CODE",{});var za=i(ze);ht=n(za,"accelerator.prepare()"),za.forEach(t),Be=n(rt,", we can use its length to compute the number of training steps. Remember we should always do this after preparing the dataloader, as that method will change the length of the "),_e=r(rt,"CODE",{});var la=i(_e);Re=n(la,"DataLoader"),la.forEach(t),Ke=n(rt,". We use a classic linear schedule from the learning rate to 0:"),rt.forEach(t),gt=d(u),j(De.$$.fragment,u),Oe=d(u),pe=r(u,"P",{});var ws=i(pe);He=n(ws,"Lastly, to push our model to the Hub, we will need to create a "),Fe=r(ws,"CODE",{});var Da=i(Fe);Et=n(Da,"Repository"),Da.forEach(t),Ct=n(ws," object in a working folder. First log in to the Hugging Face Hub, if you\u2019re not logged in already. We\u2019ll determine the repository name from the model ID we want to give our model (feel free to replace the "),wt=r(ws,"CODE",{});var ao=i(wt);rs=n(ao,"repo_name"),ao.forEach(t),Ie=n(ws," with your own choice; it just needs to contain your username, which is what the function "),bt=r(ws,"CODE",{});var sn=i(bt);xt=n(sn,"get_full_repo_name()"),sn.forEach(t),is=n(ws," does):"),ws.forEach(t),$t=d(u),j(Ye.$$.fragment,u),qt=d(u),j(Tt.$$.fragment,u),zt=d(u),ct=r(u,"P",{});var ra=i(ct);vs=n(ra,"Then we can clone that repository in a local folder. If it already exists, this local folder should be a clone of the repository we are working with:"),ra.forEach(t),Ot=d(u),j(ke.$$.fragment,u),tt=d(u),je=r(u,"P",{});var As=i(je);kt=n(As,"We can now upload anything we save in "),vt=r(As,"CODE",{});var ns=i(vt);Zt=n(ns,"output_dir"),ns.forEach(t),ps=n(As," by calling the "),Le=r(As,"CODE",{});var no=i(Le);yt=n(no,"repo.push_to_hub()"),no.forEach(t),Jt=n(As," method. This will help us upload the intermediate models at the end of each epoch."),As.forEach(t),Ft=d(u),dt=r(u,"H3",{class:!0});var ia=i(dt);st=r(ia,"A",{id:!0,class:!0,href:!0});var oo=i(st);It=r(oo,"SPAN",{});var lo=i(It);j(Ge.$$.fragment,lo),lo.forEach(t),oo.forEach(t),Qt=d(ia),Pe=r(ia,"SPAN",{});var pa=i(Pe);hs=n(pa,"Training loop"),pa.forEach(t),ia.forEach(t),Xe=d(u),at=r(u,"P",{});var ha=i(at);cs=n(ha,"We are now ready to write the full training loop. To simplify its evaluation part, we define this "),nt=r(ha,"CODE",{});var ro=i(nt);ut=n(ro,"postprocess()"),ro.forEach(t),es=n(ha," function that takes predictions and labels and converts them to the lists of strings our "),Lt=r(ha,"CODE",{});var an=i(Lt);Dt=n(an,"metric"),an.forEach(t),Nt=n(ha," object will expect:"),ha.forEach(t),ts=d(u),j(We.$$.fragment,u),f=d(u),C=r(u,"P",{});var Yt=i(C);ys=n(Yt,"The training loop looks a lot like the ones in "),Ae=r(Yt,"A",{href:!0});var nn=i(Ae);Ks=n(nn,"section 2"),nn.forEach(t),ss=n(Yt," and "),Ve=r(Yt,"A",{href:!0});var os=i(Ve);Ys=n(os,"Chapter 3"),os.forEach(t),Ht=n(Yt,", with a few differences in the evaluation part \u2014 so let\u2019s focus on that!"),Yt.forEach(t),js=d(u),Ze=r(u,"P",{});var ca=i(Ze);ds=n(ca,"The first thing to note is that we use the "),Wt=r(ca,"CODE",{});var Pa=i(Wt);Gs=n(Pa,"generate()"),Pa.forEach(t),Ne=n(ca," method to compute predictions, but this is a method on our base model, not the wrapped model \u{1F917} Accelerate created in the "),jt=r(ca,"CODE",{});var io=i(jt);us=n(io,"prepare()"),io.forEach(t),Mt=n(ca," method. That\u2019s why we unwrap the model first, then call this method."),ca.forEach(t),fs=d(u),ge=r(u,"P",{});var bs=i(ge);Xs=n(bs,"The second thing is that, like with "),ft=r(bs,"A",{href:!0});var da=i(ft);Vs=n(da,"token classification"),da.forEach(t),Zs=n(bs,", two processes may have padded the inputs and labels to different shapes, so we use "),Ut=r(bs,"CODE",{});var po=i(Ut);Js=n(po,"accelerator.pad_across_processes()"),po.forEach(t),Qs=n(bs," to make the predictions and labels the same shape before calling the "),as=r(bs,"CODE",{});var ho=i(as);Bt=n(ho,"gather()"),ho.forEach(t),Pt=n(bs," method. If we don\u2019t do this, the evaluation will either error out or hang forever."),bs.forEach(t),Rt=d(u),j(Kt.$$.fragment,u),ms=d(u),j(ot.$$.fragment,u),_s=d(u),lt=r(u,"P",{});var Ss=i(lt);xa=n(Ss,"Once this is done, you should have a model that has results pretty similar to the one trained with the "),gs=r(Ss,"CODE",{});var Cs=i(gs);Za=n(Cs,"Seq2SeqTrainer"),Cs.forEach(t),qa=n(Ss,". You can check the one we trained using this code at "),At=r(Ss,"A",{href:!0,rel:!0});var on=i(At);ea=r(on,"EM",{});var Os=i(ea);Es=n(Os,"huggingface-course/marian-finetuned-kde4-en-to-fr-accelerate"),Os.forEach(t),on.forEach(t),Ta=n(Ss,". And if you want to test out any tweaks to the training loop, you can directly implement them by editing the code shown above!"),Ss.forEach(t),this.h()},h(){k(b,"id","a-custom-training-loop"),k(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(b,"href","#a-custom-training-loop"),k(h,"class","relative group"),k(N,"href","/course/chapter7/2"),k(H,"href","/course/chapter3/4"),k(I,"id","preparing-everything-for-training"),k(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(I,"href","#preparing-everything-for-training"),k(M,"class","relative group"),k(st,"id","training-loop"),k(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(st,"href","#training-loop"),k(dt,"class","relative group"),k(Ae,"href","/course/chapter7/2"),k(Ve,"href","/course/chapter3"),k(ft,"href","/course/chapter7/2"),k(At,"href","https://huggingface.co/huggingface-course/marian-finetuned-kde4-en-to-fr-accelerate"),k(At,"rel","nofollow")},m(u,L){o(u,h,L),s(h,b),s(b,m),E(q,m,null),s(h,A),s(h,_),s(_,z),o(u,P,L),o(u,D,L),s(D,T),s(D,N),s(N,v),s(D,S),s(D,H),s(H,U),s(D,F),o(u,X,L),o(u,M,L),s(M,I),s(I,Y),E(V,Y,null),s(M,re),s(M,he),s(he,Q),o(u,ee,L),o(u,te,L),s(te,G),s(te,ne),s(ne,we),s(te,J),s(te,se),s(se,ce),s(te,be),o(u,oe,L),E(ie,u,L),o(u,W,L),o(u,ae,L),s(ae,Te),o(u,de,L),E(K,u,L),o(u,ve,L),o(u,le,L),s(le,Ee),o(u,Me,L),E(ue,u,L),o(u,xe,L),o(u,Z,L),s(Z,Se),s(Z,fe),s(fe,pt),s(Z,mt),s(Z,$e),s($e,Qe),s(Z,Ue),o(u,Ce,L),E(ye,u,L),o(u,_t,L),o(u,me,L),s(me,$),s(me,R),s(R,et),s(me,qe),s(me,ze),s(ze,ht),s(me,Be),s(me,_e),s(_e,Re),s(me,Ke),o(u,gt,L),E(De,u,L),o(u,Oe,L),o(u,pe,L),s(pe,He),s(pe,Fe),s(Fe,Et),s(pe,Ct),s(pe,wt),s(wt,rs),s(pe,Ie),s(pe,bt),s(bt,xt),s(pe,is),o(u,$t,L),E(Ye,u,L),o(u,qt,L),E(Tt,u,L),o(u,zt,L),o(u,ct,L),s(ct,vs),o(u,Ot,L),E(ke,u,L),o(u,tt,L),o(u,je,L),s(je,kt),s(je,vt),s(vt,Zt),s(je,ps),s(je,Le),s(Le,yt),s(je,Jt),o(u,Ft,L),o(u,dt,L),s(dt,st),s(st,It),E(Ge,It,null),s(dt,Qt),s(dt,Pe),s(Pe,hs),o(u,Xe,L),o(u,at,L),s(at,cs),s(at,nt),s(nt,ut),s(at,es),s(at,Lt),s(Lt,Dt),s(at,Nt),o(u,ts,L),E(We,u,L),o(u,f,L),o(u,C,L),s(C,ys),s(C,Ae),s(Ae,Ks),s(C,ss),s(C,Ve),s(Ve,Ys),s(C,Ht),o(u,js,L),o(u,Ze,L),s(Ze,ds),s(Ze,Wt),s(Wt,Gs),s(Ze,Ne),s(Ze,jt),s(jt,us),s(Ze,Mt),o(u,fs,L),o(u,ge,L),s(ge,Xs),s(ge,ft),s(ft,Vs),s(ge,Zs),s(ge,Ut),s(Ut,Js),s(ge,Qs),s(ge,as),s(as,Bt),s(ge,Pt),o(u,Rt,L),E(Kt,u,L),o(u,ms,L),E(ot,u,L),o(u,_s,L),o(u,lt,L),s(lt,xa),s(lt,gs),s(gs,Za),s(lt,qa),s(lt,At),s(At,ea),s(ea,Es),s(lt,Ta),xs=!0},i(u){xs||(g(q.$$.fragment,u),g(V.$$.fragment,u),g(ie.$$.fragment,u),g(K.$$.fragment,u),g(ue.$$.fragment,u),g(ye.$$.fragment,u),g(De.$$.fragment,u),g(Ye.$$.fragment,u),g(Tt.$$.fragment,u),g(ke.$$.fragment,u),g(Ge.$$.fragment,u),g(We.$$.fragment,u),g(Kt.$$.fragment,u),g(ot.$$.fragment,u),xs=!0)},o(u){w(q.$$.fragment,u),w(V.$$.fragment,u),w(ie.$$.fragment,u),w(K.$$.fragment,u),w(ue.$$.fragment,u),w(ye.$$.fragment,u),w(De.$$.fragment,u),w(Ye.$$.fragment,u),w(Tt.$$.fragment,u),w(ke.$$.fragment,u),w(Ge.$$.fragment,u),w(We.$$.fragment,u),w(Kt.$$.fragment,u),w(ot.$$.fragment,u),xs=!1},d(u){u&&t(h),x(q),u&&t(P),u&&t(D),u&&t(X),u&&t(M),x(V),u&&t(ee),u&&t(te),u&&t(oe),x(ie,u),u&&t(W),u&&t(ae),u&&t(de),x(K,u),u&&t(ve),u&&t(le),u&&t(Me),x(ue,u),u&&t(xe),u&&t(Z),u&&t(Ce),x(ye,u),u&&t(_t),u&&t(me),u&&t(gt),x(De,u),u&&t(Oe),u&&t(pe),u&&t($t),x(Ye,u),u&&t(qt),x(Tt,u),u&&t(zt),u&&t(ct),u&&t(Ot),x(ke,u),u&&t(tt),u&&t(je),u&&t(Ft),u&&t(dt),x(Ge),u&&t(Xe),u&&t(at),u&&t(ts),x(We,u),u&&t(f),u&&t(C),u&&t(js),u&&t(Ze),u&&t(fs),u&&t(ge),u&&t(Rt),x(Kt,u),u&&t(ms),x(ot,u),u&&t(_s),u&&t(lt)}}}function Cd(B){let h,b,m,q,A;return{c(){h=l("p"),b=a("\u270F\uFE0F "),m=l("strong"),q=a("Your turn!"),A=a(" What does the model return on the sample with the word \u201Cemail\u201D you identified earlier?")},l(_){h=r(_,"P",{});var z=i(h);b=n(z,"\u270F\uFE0F "),m=r(z,"STRONG",{});var P=i(m);q=n(P,"Your turn!"),P.forEach(t),A=n(z," What does the model return on the sample with the word \u201Cemail\u201D you identified earlier?"),z.forEach(t)},m(_,z){o(_,h,z),s(h,b),s(h,m),s(m,q),s(h,A)},d(_){_&&t(h)}}}function Od(B){let h,b,m,q,A,_,z,P,D,T,N,v,S,H,U,F,X,M,I,Y,V,re,he,Q,ee,te,G,ne,we,J,se,ce,be,oe,ie,W,ae,Te,de,K,ve,le,Ee,Me,ue,xe,Z,Se,fe,pt,mt,$e,Qe,Ue,Ce,ye,_t,me,$,R,et,qe,ze,ht,Be,_e,Re,Ke,gt,De,Oe,pe,He,Fe,Et,Ct,wt,rs,Ie,bt,xt,is,$t,Ye,qt,Tt,zt,ct,vs,Ot,ke,tt,je,kt,vt,Zt,ps,Le,yt,Jt,Ft,dt,st,It,Ge,Qt,Pe,hs,Xe,at,cs,nt,ut,es,Lt,Dt,Nt,ts,We,f,C,ys,Ae,Ks,ss,Ve,Ys,Ht,js,Ze,ds,Wt,Gs,Ne,jt,us,Mt,fs,ge,Xs,ft,Vs,Zs,Ut,Js,Qs,as,Bt,Pt,Rt,Kt,ms,ot,_s,lt,xa,gs,Za,qa,At,ea,Es,Ta,xs,u,L,ta,Ja,sa,qs,ga,to,wa,aa,Qa,na,Ts,ba,so,en,oa,zs,Ds,tn,rt,Ps,za,la,ws,Da,ao,sn,ra,As,ns,no,ia,oo,lo,pa,ha,ro,an,Yt,nn,os,ca,Pa,io,bs,da,po,ho,Ss,Cs,on,Os,ii,Vo,pi,hi,Dl,Aa,ci,Zo,di,ui,Pl,ln,Al,ua,fi,Jo,mi,_i,Qo,gi,wi,Sl,Sa,bi,el,$i,ki,Cl,co,vi,Ol,rn,Fl,uo,yi,Il,pn,Ll,hn,Nl,fo,ji,Hl,$s,Ei,tl,xi,qi,sl,Ti,zi,al,Di,Pi,Wl,cn,Ml,mo,Ai,Ul,Ca,Bl,Oa,Rl,_o,Si,Kl,dn,Yl,go,Ci,Gl,Fs,Is,wo,bo,Oi,Xl,$a,Fa,nl,un,Fi,ol,Ii,Vl,ks,Li,ll,Ni,Hi,$o,Wi,Mi,rl,Ui,Bi,Zl,it,Ri,fn,il,Ki,Yi,pl,Gi,Xi,hl,Vi,Zi,cl,Ji,Qi,dl,ep,tp,ul,sp,ap,Jl,Ls,Ns,ko,vo,np,Ql,mn,er,_n,tr,Ia,op,fl,lp,rp,sr,gn,ar,wn,nr,yo,ip,or,bn,lr,$n,rr,jo,pp,ir,kn,pr,vn,hr,Hs,Ws,Eo,ka,La,ml,yn,hp,_l,cp,cr,jn,dr,xo,Gt,dp,En,up,fp,xn,mp,_p,gl,gp,wp,wl,bp,$p,ur,Na,kp,qn,vp,yp,fr,Tn,mr,fa,jp,bl,Ep,xp,qo,qp,Tp,_r,zn,gr,To,zp,wr,zo,Dp,br,Dn,$r,Pn,kr,Xt,Pp,An,Ap,Sp,$l,Cp,Op,kl,Fp,Ip,Sn,Lp,Np,vr,Cn,yr,On,jr,Fn,Er,In,xr,Do,Hp,qr,Ms,Us,Po,Ao,Wp,Tr,va,Ha,vl,Ln,Mp,yl,Up,zr,So,Bp,Dr,Nn,Pr,Co,Rp,Ar,Oo,Kp,Sr,Hn,Cr,Bs,Rs,Fo,Io,ya,Wa,jl,Wn,Yp,El,Gp,Or,Ma,Xp,xl,Vp,Zp,Fr,Mn,Ir,Un,Lr,Lo,Jp,Nr,Bn,Hr,Rn,Wr,No,Qp,Mr,Ua,Ur;m=new fd({props:{fw:B[0]}}),P=new ls({});const eh=[_d,md],Kn=[];function th(e,p){return e[0]==="pt"?0:1}S=th(B),H=Kn[S]=eh[S](B),de=new ri({props:{id:"1JvfrvZgi6c"}}),Fe=new ls({}),kt=new ls({}),Ge=new O({props:{code:`from datasets import load_dataset, load_metric

raw_datasets = load_dataset("kde4", lang1="en", lang2="fr")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, load_metric

raw_datasets = load_dataset(<span class="hljs-string">&quot;kde4&quot;</span>, lang1=<span class="hljs-string">&quot;en&quot;</span>, lang2=<span class="hljs-string">&quot;fr&quot;</span>)`}}),We=new O({props:{code:"raw_datasets",highlighted:"raw_datasets"}}),C=new O({props:{code:`DatasetDict({
    train: Dataset({
        features: ['id', 'translation'],
        num_rows: 210173
    })
})`,highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;translation&#x27;</span>],
        num_rows: <span class="hljs-number">210173</span>
    })
})`}}),jt=new O({props:{code:`split_datasets = raw_datasets["train"].train_test_split(train_size=0.9, seed=20)
split_datasets`,highlighted:`split_datasets = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].train_test_split(train_size=<span class="hljs-number">0.9</span>, seed=<span class="hljs-number">20</span>)
split_datasets`}}),Mt=new O({props:{code:`DatasetDict({
    train: Dataset({
        features: ['id', 'translation'],
        num_rows: 189155
    })
    test: Dataset({
        features: ['id', 'translation'],
        num_rows: 21018
    })
})`,highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;translation&#x27;</span>],
        num_rows: <span class="hljs-number">189155</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;translation&#x27;</span>],
        num_rows: <span class="hljs-number">21018</span>
    })
})`}}),Bt=new O({props:{code:'split_datasets["validation"] = split_datasets.pop("test")',highlighted:'split_datasets[<span class="hljs-string">&quot;validation&quot;</span>] = split_datasets.pop(<span class="hljs-string">&quot;test&quot;</span>)'}}),ot=new O({props:{code:'split_datasets["train"][1]["translation"]',highlighted:'split_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;translation&quot;</span>]'}}),lt=new O({props:{code:`{'en': 'Default to expanded threads',
 'fr': 'Par d\xE9faut, d\xE9velopper les fils de discussion'}`,highlighted:`{<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;Default to expanded threads&#x27;</span>,
 <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;Par d\xE9faut, d\xE9velopper les fils de discussion&#x27;</span>}`}}),At=new O({props:{code:`from transformers import pipeline

model_checkpoint = "Helsinki-NLP/opus-mt-en-fr"
translator = pipeline("translation", model=model_checkpoint)
translator("Default to expanded threads")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

model_checkpoint = <span class="hljs-string">&quot;Helsinki-NLP/opus-mt-en-fr&quot;</span>
translator = pipeline(<span class="hljs-string">&quot;translation&quot;</span>, model=model_checkpoint)
translator(<span class="hljs-string">&quot;Default to expanded threads&quot;</span>)`}}),Es=new O({props:{code:"[{'translation_text': 'Par d\xE9faut pour les threads \xE9largis'}]",highlighted:'[{<span class="hljs-string">&#x27;translation_text&#x27;</span>: <span class="hljs-string">&#x27;Par d\xE9faut pour les threads \xE9largis&#x27;</span>}]'}}),ta=new O({props:{code:'split_datasets["train"][172]["translation"]',highlighted:'split_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">172</span>][<span class="hljs-string">&quot;translation&quot;</span>]'}}),sa=new O({props:{code:`{'en': 'Unable to import %1 using the OFX importer plugin. This file is not the correct format.',
 'fr': "Impossible d'importer %1 en utilisant le module d'extension d'importation OFX. Ce fichier n'a pas un format correct."}`,highlighted:`{<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;Unable to import %1 using the OFX importer plugin. This file is not the correct format.&#x27;</span>,
 <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&quot;Impossible d&#x27;importer %1 en utilisant le module d&#x27;extension d&#x27;importation OFX. Ce fichier n&#x27;a pas un format correct.&quot;</span>}`}}),aa=new O({props:{code:`translator(
    "Unable to import %1 using the OFX importer plugin. This file is not the correct format."
)`,highlighted:`translator(
    <span class="hljs-string">&quot;Unable to import %1 using the OFX importer plugin. This file is not the correct format.&quot;</span>
)`}}),na=new O({props:{code:`[{'translation_text': "Impossible d'importer %1 en utilisant le plugin d'importateur OFX. Ce fichier n'est pas le bon format."}]`,highlighted:'[{<span class="hljs-string">&#x27;translation_text&#x27;</span>: <span class="hljs-string">&quot;Impossible d&#x27;importer %1 en utilisant le plugin d&#x27;importateur OFX. Ce fichier n&#x27;est pas le bon format.&quot;</span>}]'}}),oa=new ri({props:{id:"0Oxphw4Q9fo"}}),Ds=new Va({props:{$$slots:{default:[gd]},$$scope:{ctx:B}}}),la=new ls({}),ra=new ri({props:{id:"XAR8jnZZuUs"}}),Yt=new O({props:{code:`from transformers import AutoTokenizer

model_checkpoint = "Helsinki-NLP/opus-mt-en-fr"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint, return_tensors="tf")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

model_checkpoint = <span class="hljs-string">&quot;Helsinki-NLP/opus-mt-en-fr&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),Cs=new Va({props:{$$slots:{default:[wd]},$$scope:{ctx:B}}}),ln=new O({props:{code:`with open(file_path) as f:
    content = f.read()`,highlighted:`<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path) <span class="hljs-keyword">as</span> f:
    content = f.<span class="hljs-built_in">read</span>()`}}),rn=new O({props:{code:`en_sentence = split_datasets["train"][1]["translation"]["en"]
fr_sentence = split_datasets["train"][1]["translation"]["fr"]

inputs = tokenizer(en_sentence)
with tokenizer.as_target_tokenizer():
    targets = tokenizer(fr_sentence)`,highlighted:`en_sentence = split_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;translation&quot;</span>][<span class="hljs-string">&quot;en&quot;</span>]
fr_sentence = split_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&quot;translation&quot;</span>][<span class="hljs-string">&quot;fr&quot;</span>]

inputs = tokenizer(en_sentence)
<span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
    targets = tokenizer(fr_sentence)`}}),pn=new O({props:{code:`wrong_targets = tokenizer(fr_sentence)
print(tokenizer.convert_ids_to_tokens(wrong_targets["input_ids"]))
print(tokenizer.convert_ids_to_tokens(targets["input_ids"]))`,highlighted:`wrong_targets = tokenizer(fr_sentence)
<span class="hljs-built_in">print</span>(tokenizer.convert_ids_to_tokens(wrong_targets[<span class="hljs-string">&quot;input_ids&quot;</span>]))
<span class="hljs-built_in">print</span>(tokenizer.convert_ids_to_tokens(targets[<span class="hljs-string">&quot;input_ids&quot;</span>]))`}}),hn=new O({props:{code:`['\u2581Par', '\u2581d\xE9', 'f', 'aut', ',', '\u2581d\xE9', 've', 'lop', 'per', '\u2581les', '\u2581fil', 's', '\u2581de', '\u2581discussion', '</s>']
['\u2581Par', '\u2581d\xE9faut', ',', '\u2581d\xE9velopper', '\u2581les', '\u2581fils', '\u2581de', '\u2581discussion', '</s>']`,highlighted:`[<span class="hljs-string">&#x27;\u2581Par&#x27;</span>, <span class="hljs-string">&#x27;\u2581d\xE9&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;aut&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;\u2581d\xE9&#x27;</span>, <span class="hljs-string">&#x27;ve&#x27;</span>, <span class="hljs-string">&#x27;lop&#x27;</span>, <span class="hljs-string">&#x27;per&#x27;</span>, <span class="hljs-string">&#x27;\u2581les&#x27;</span>, <span class="hljs-string">&#x27;\u2581fil&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;\u2581de&#x27;</span>, <span class="hljs-string">&#x27;\u2581discussion&#x27;</span>, <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>]
[<span class="hljs-string">&#x27;\u2581Par&#x27;</span>, <span class="hljs-string">&#x27;\u2581d\xE9faut&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;\u2581d\xE9velopper&#x27;</span>, <span class="hljs-string">&#x27;\u2581les&#x27;</span>, <span class="hljs-string">&#x27;\u2581fils&#x27;</span>, <span class="hljs-string">&#x27;\u2581de&#x27;</span>, <span class="hljs-string">&#x27;\u2581discussion&#x27;</span>, <span class="hljs-string">&#x27;&lt;/s&gt;&#x27;</span>]`}}),cn=new O({props:{code:`max_input_length = 128
max_target_length = 128


def preprocess_function(examples):
    inputs = [ex["en"] for ex in examples["translation"]]
    targets = [ex["fr"] for ex in examples["translation"]]
    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=True)

    # Set up the tokenizer for targets
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(targets, max_length=max_target_length, truncation=True)

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs`,highlighted:`max_input_length = <span class="hljs-number">128</span>
max_target_length = <span class="hljs-number">128</span>


<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
    inputs = [ex[<span class="hljs-string">&quot;en&quot;</span>] <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;translation&quot;</span>]]
    targets = [ex[<span class="hljs-string">&quot;fr&quot;</span>] <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;translation&quot;</span>]]
    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=<span class="hljs-literal">True</span>)

    <span class="hljs-comment"># Set up the tokenizer for targets</span>
    <span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
        labels = tokenizer(targets, max_length=max_target_length, truncation=<span class="hljs-literal">True</span>)

    model_inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]
    <span class="hljs-keyword">return</span> model_inputs`}}),Ca=new Va({props:{$$slots:{default:[bd]},$$scope:{ctx:B}}}),Oa=new Va({props:{warning:!0,$$slots:{default:[$d]},$$scope:{ctx:B}}}),dn=new O({props:{code:`tokenized_datasets = split_datasets.map(
    preprocess_function,
    batched=True,
    remove_columns=split_datasets["train"].column_names,
)`,highlighted:`tokenized_datasets = split_datasets.<span class="hljs-built_in">map</span>(
    preprocess_function,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=split_datasets[<span class="hljs-string">&quot;train&quot;</span>].column_names,
)`}});const sh=[vd,kd],Yn=[];function ah(e,p){return e[0]==="pt"?0:1}Fs=ah(B),Is=Yn[Fs]=sh[Fs](B),un=new ls({});const nh=[Ed,jd],Gn=[];function oh(e,p){return e[0]==="pt"?0:1}Ls=oh(B),Ns=Gn[Ls]=nh[Ls](B),mn=new O({props:{code:`batch = data_collator([tokenized_datasets["train"][i] for i in range(1, 3)])
batch.keys()`,highlighted:`batch = data_collator([tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)])
batch.keys()`}}),_n=new O({props:{code:"dict_keys(['attention_mask', 'input_ids', 'labels', 'decoder_input_ids'])",highlighted:'dict_keys([<span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;labels&#x27;</span>, <span class="hljs-string">&#x27;decoder_input_ids&#x27;</span>])'}}),gn=new O({props:{code:'batch["labels"]',highlighted:'batch[<span class="hljs-string">&quot;labels&quot;</span>]'}}),wn=new O({props:{code:`tensor([[  577,  5891,     2,  3184,    16,  2542,     5,  1710,     0,  -100,
          -100,  -100,  -100,  -100,  -100,  -100],
        [ 1211,     3,    49,  9409,  1211,     3, 29140,   817,  3124,   817,
           550,  7032,  5821,  7907, 12649,     0]])`,highlighted:`tensor([[  <span class="hljs-number">577</span>,  <span class="hljs-number">5891</span>,     <span class="hljs-number">2</span>,  <span class="hljs-number">3184</span>,    <span class="hljs-number">16</span>,  <span class="hljs-number">2542</span>,     <span class="hljs-number">5</span>,  <span class="hljs-number">1710</span>,     <span class="hljs-number">0</span>,  -<span class="hljs-number">100</span>,
          -<span class="hljs-number">100</span>,  -<span class="hljs-number">100</span>,  -<span class="hljs-number">100</span>,  -<span class="hljs-number">100</span>,  -<span class="hljs-number">100</span>,  -<span class="hljs-number">100</span>],
        [ <span class="hljs-number">1211</span>,     <span class="hljs-number">3</span>,    <span class="hljs-number">49</span>,  <span class="hljs-number">9409</span>,  <span class="hljs-number">1211</span>,     <span class="hljs-number">3</span>, <span class="hljs-number">29140</span>,   <span class="hljs-number">817</span>,  <span class="hljs-number">3124</span>,   <span class="hljs-number">817</span>,
           <span class="hljs-number">550</span>,  <span class="hljs-number">7032</span>,  <span class="hljs-number">5821</span>,  <span class="hljs-number">7907</span>, <span class="hljs-number">12649</span>,     <span class="hljs-number">0</span>]])`}}),bn=new O({props:{code:'batch["decoder_input_ids"]',highlighted:'batch[<span class="hljs-string">&quot;decoder_input_ids&quot;</span>]'}}),$n=new O({props:{code:`tensor([[59513,   577,  5891,     2,  3184,    16,  2542,     5,  1710,     0,
         59513, 59513, 59513, 59513, 59513, 59513],
        [59513,  1211,     3,    49,  9409,  1211,     3, 29140,   817,  3124,
           817,   550,  7032,  5821,  7907, 12649]])`,highlighted:`tensor([[<span class="hljs-number">59513</span>,   <span class="hljs-number">577</span>,  <span class="hljs-number">5891</span>,     <span class="hljs-number">2</span>,  <span class="hljs-number">3184</span>,    <span class="hljs-number">16</span>,  <span class="hljs-number">2542</span>,     <span class="hljs-number">5</span>,  <span class="hljs-number">1710</span>,     <span class="hljs-number">0</span>,
         <span class="hljs-number">59513</span>, <span class="hljs-number">59513</span>, <span class="hljs-number">59513</span>, <span class="hljs-number">59513</span>, <span class="hljs-number">59513</span>, <span class="hljs-number">59513</span>],
        [<span class="hljs-number">59513</span>,  <span class="hljs-number">1211</span>,     <span class="hljs-number">3</span>,    <span class="hljs-number">49</span>,  <span class="hljs-number">9409</span>,  <span class="hljs-number">1211</span>,     <span class="hljs-number">3</span>, <span class="hljs-number">29140</span>,   <span class="hljs-number">817</span>,  <span class="hljs-number">3124</span>,
           <span class="hljs-number">817</span>,   <span class="hljs-number">550</span>,  <span class="hljs-number">7032</span>,  <span class="hljs-number">5821</span>,  <span class="hljs-number">7907</span>, <span class="hljs-number">12649</span>]])`}}),kn=new O({props:{code:`for i in range(1, 3):
    print(tokenized_datasets["train"][i]["labels"])`,highlighted:`<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):
    <span class="hljs-built_in">print</span>(tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][i][<span class="hljs-string">&quot;labels&quot;</span>])`}}),vn=new O({props:{code:`[577, 5891, 2, 3184, 16, 2542, 5, 1710, 0]
[1211, 3, 49, 9409, 1211, 3, 29140, 817, 3124, 817, 550, 7032, 5821, 7907, 12649, 0]`,highlighted:`[<span class="hljs-number">577</span>, <span class="hljs-number">5891</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3184</span>, <span class="hljs-number">16</span>, <span class="hljs-number">2542</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1710</span>, <span class="hljs-number">0</span>]
[<span class="hljs-number">1211</span>, <span class="hljs-number">3</span>, <span class="hljs-number">49</span>, <span class="hljs-number">9409</span>, <span class="hljs-number">1211</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29140</span>, <span class="hljs-number">817</span>, <span class="hljs-number">3124</span>, <span class="hljs-number">817</span>, <span class="hljs-number">550</span>, <span class="hljs-number">7032</span>, <span class="hljs-number">5821</span>, <span class="hljs-number">7907</span>, <span class="hljs-number">12649</span>, <span class="hljs-number">0</span>]`}});const lh=[qd,xd],Xn=[];function rh(e,p){return e[0]==="pt"?0:1}Hs=rh(B),Ws=Xn[Hs]=lh[Hs](B),yn=new ls({}),jn=new ri({props:{id:"M05L1DhFqcw"}});let St=B[0]==="pt"&&nd();Tn=new O({props:{code:"!pip install sacrebleu",highlighted:"!pip install sacrebleu"}}),zn=new O({props:{code:`from datasets import load_metric

metric = load_metric("sacrebleu")`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric

metric = load_metric(<span class="hljs-string">&quot;sacrebleu&quot;</span>)`}}),Dn=new O({props:{code:`predictions = [
    "This plugin lets you translate web pages between several languages automatically."
]
references = [
    [
        "This plugin allows you to automatically translate web pages between several languages."
    ]
]
metric.compute(predictions=predictions, references=references)`,highlighted:`predictions = [
    <span class="hljs-string">&quot;This plugin lets you translate web pages between several languages automatically.&quot;</span>
]
references = [
    [
        <span class="hljs-string">&quot;This plugin allows you to automatically translate web pages between several languages.&quot;</span>
    ]
]
metric.compute(predictions=predictions, references=references)`}}),Pn=new O({props:{code:`{'score': 46.750469682990165,
 'counts': [11, 6, 4, 3],
 'totals': [12, 11, 10, 9],
 'precisions': [91.67, 54.54, 40.0, 33.33],
 'bp': 0.9200444146293233,
 'sys_len': 12,
 'ref_len': 13}`,highlighted:`{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">46.750469682990165</span>,
 <span class="hljs-string">&#x27;counts&#x27;</span>: [<span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>],
 <span class="hljs-string">&#x27;totals&#x27;</span>: [<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>],
 <span class="hljs-string">&#x27;precisions&#x27;</span>: [<span class="hljs-number">91.67</span>, <span class="hljs-number">54.54</span>, <span class="hljs-number">40.0</span>, <span class="hljs-number">33.33</span>],
 <span class="hljs-string">&#x27;bp&#x27;</span>: <span class="hljs-number">0.9200444146293233</span>,
 <span class="hljs-string">&#x27;sys_len&#x27;</span>: <span class="hljs-number">12</span>,
 <span class="hljs-string">&#x27;ref_len&#x27;</span>: <span class="hljs-number">13</span>}`}}),Cn=new O({props:{code:`predictions = ["This This This This"]
references = [
    [
        "This plugin allows you to automatically translate web pages between several languages."
    ]
]
metric.compute(predictions=predictions, references=references)`,highlighted:`predictions = [<span class="hljs-string">&quot;This This This This&quot;</span>]
references = [
    [
        <span class="hljs-string">&quot;This plugin allows you to automatically translate web pages between several languages.&quot;</span>
    ]
]
metric.compute(predictions=predictions, references=references)`}}),On=new O({props:{code:`{'score': 1.683602693167689,
 'counts': [1, 0, 0, 0],
 'totals': [4, 3, 2, 1],
 'precisions': [25.0, 16.67, 12.5, 12.5],
 'bp': 0.10539922456186433,
 'sys_len': 4,
 'ref_len': 13}`,highlighted:`{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.683602693167689</span>,
 <span class="hljs-string">&#x27;counts&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;totals&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],
 <span class="hljs-string">&#x27;precisions&#x27;</span>: [<span class="hljs-number">25.0</span>, <span class="hljs-number">16.67</span>, <span class="hljs-number">12.5</span>, <span class="hljs-number">12.5</span>],
 <span class="hljs-string">&#x27;bp&#x27;</span>: <span class="hljs-number">0.10539922456186433</span>,
 <span class="hljs-string">&#x27;sys_len&#x27;</span>: <span class="hljs-number">4</span>,
 <span class="hljs-string">&#x27;ref_len&#x27;</span>: <span class="hljs-number">13</span>}`}}),Fn=new O({props:{code:`predictions = ["This plugin"]
references = [
    [
        "This plugin allows you to automatically translate web pages between several languages."
    ]
]
metric.compute(predictions=predictions, references=references)`,highlighted:`predictions = [<span class="hljs-string">&quot;This plugin&quot;</span>]
references = [
    [
        <span class="hljs-string">&quot;This plugin allows you to automatically translate web pages between several languages.&quot;</span>
    ]
]
metric.compute(predictions=predictions, references=references)`}}),In=new O({props:{code:`{'score': 0.0,
 'counts': [2, 1, 0, 0],
 'totals': [2, 1, 0, 0],
 'precisions': [100.0, 100.0, 0.0, 0.0],
 'bp': 0.004086771438464067,
 'sys_len': 2,
 'ref_len': 13}`,highlighted:`{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.0</span>,
 <span class="hljs-string">&#x27;counts&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;totals&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;precisions&#x27;</span>: [<span class="hljs-number">100.0</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>],
 <span class="hljs-string">&#x27;bp&#x27;</span>: <span class="hljs-number">0.004086771438464067</span>,
 <span class="hljs-string">&#x27;sys_len&#x27;</span>: <span class="hljs-number">2</span>,
 <span class="hljs-string">&#x27;ref_len&#x27;</span>: <span class="hljs-number">13</span>}`}});const ih=[zd,Td],Vn=[];function ph(e,p){return e[0]==="tf"?0:1}Ms=ph(B),Us=Vn[Ms]=ih[Ms](B),Ln=new ls({}),Nn=new O({props:{code:`from huggingface_hub import notebook_login

notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`}}),Hn=new O({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}});const hh=[Pd,Dd],Zn=[];function ch(e,p){return e[0]==="tf"?0:1}Bs=ch(B),Rs=Zn[Bs]=hh[Bs](B);let Je=B[0]==="pt"&&od();return Wn=new ls({}),Mn=new O({props:{code:`from transformers import pipeline

# Replace this with your own checkpoint
model_checkpoint = "huggingface-course/marian-finetuned-kde4-en-to-fr"
translator = pipeline("translation", model=model_checkpoint)
translator("Default to expanded threads")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-comment"># Replace this with your own checkpoint</span>
model_checkpoint = <span class="hljs-string">&quot;huggingface-course/marian-finetuned-kde4-en-to-fr&quot;</span>
translator = pipeline(<span class="hljs-string">&quot;translation&quot;</span>, model=model_checkpoint)
translator(<span class="hljs-string">&quot;Default to expanded threads&quot;</span>)`}}),Un=new O({props:{code:"[{'translation_text': 'Par d\xE9faut, d\xE9velopper les fils de discussion'}]",highlighted:'[{<span class="hljs-string">&#x27;translation_text&#x27;</span>: <span class="hljs-string">&#x27;Par d\xE9faut, d\xE9velopper les fils de discussion&#x27;</span>}]'}}),Bn=new O({props:{code:`translator(
    "Unable to import %1 using the OFX importer plugin. This file is not the correct format."
)`,highlighted:`translator(
    <span class="hljs-string">&quot;Unable to import %1 using the OFX importer plugin. This file is not the correct format.&quot;</span>
)`}}),Rn=new O({props:{code:`[{'translation_text': "Impossible d'importer %1 en utilisant le module externe d'importation OFX. Ce fichier n'est pas le bon format."}]`,highlighted:'[{<span class="hljs-string">&#x27;translation_text&#x27;</span>: <span class="hljs-string">&quot;Impossible d&#x27;importer %1 en utilisant le module externe d&#x27;importation OFX. Ce fichier n&#x27;est pas le bon format.&quot;</span>}]'}}),Ua=new Va({props:{$$slots:{default:[Cd]},$$scope:{ctx:B}}}),{c(){h=l("meta"),b=c(),y(m.$$.fragment),q=c(),A=l("h1"),_=l("a"),z=l("span"),y(P.$$.fragment),D=c(),T=l("span"),N=a("Translation"),v=c(),H.c(),U=c(),F=l("p"),X=a("Let\u2019s now dive into translation. This is another "),M=l("a"),I=a("sequence-to-sequence task"),Y=a(", which means it\u2019s a problem that can be formulated as going from one sequence to another. In that sense the problem is pretty close to "),V=l("a"),re=a("summarization"),he=a(", and you could adapt what we will see here to other sequence-to-sequence problems such as:"),Q=c(),ee=l("ul"),te=l("li"),G=l("strong"),ne=a("Style transfer"),we=a(": Creating a model that "),J=l("em"),se=a("translates"),ce=a(" texts written in a certain style to another (e.g., formal to casual or Shakespearean English to modern English)"),be=c(),oe=l("li"),ie=l("strong"),W=a("Generative question answering"),ae=a(": Creating a model that generates answers to questions, given a context"),Te=c(),y(de.$$.fragment),K=c(),ve=l("p"),le=a("If you have a big enough corpus of texts in two (or more) languages, you can train a new translation model from scratch like we will in the section on "),Ee=l("a"),Me=a("causal language modeling"),ue=a(". It will be faster, however, to fine-tune an existing translation model, be it a multilingual one like mT5 or mBART that you want to fine-tune to a specific language pair, or even a model specialized for translation from one language to another that you want to fine-tune to your specific corpus."),xe=c(),Z=l("p"),Se=a("In this section, we will fine-tune a Marian model pretrained to translate from English to French (since a lot of Hugging Face employees speak both those languages) on the "),fe=l("a"),pt=a("KDE4 dataset"),mt=a(", which is a dataset of localized files for the "),$e=l("a"),Qe=a("KDE apps"),Ue=a(". The model we will use has been pretrained on a large corpus of French and English texts taken from the "),Ce=l("a"),ye=a("Opus dataset"),_t=a(", which actually contains the KDE4 dataset. But even if the pretrained model we use has seen that data during its pretraining, we will see that we can get a better version of it after fine-tuning."),me=c(),$=l("p"),R=a("Once we\u2019re finished, we will have a model able to make predictions like this one:"),et=c(),qe=l("div"),ze=l("div"),ht=c(),Be=l("p"),_e=a("As in the previous sections, you can find the actual model that we\u2019ll train and upload to the Hub using the code below and double-check its predictions "),Re=l("a"),Ke=a("here"),gt=a("."),De=c(),Oe=l("h2"),pe=l("a"),He=l("span"),y(Fe.$$.fragment),Et=c(),Ct=l("span"),wt=a("Preparing the data"),rs=c(),Ie=l("p"),bt=a("To fine-tune or train a translation model from scratch, we will need a dataset suitable for the task. As mentioned previously, we\u2019ll use the "),xt=l("a"),is=a("KDE4 dataset"),$t=a(" in this section, but you can adapt the code to use your own data quite easily, as long as you have pairs of sentences in the two languages you want to translate from and into. Refer back to "),Ye=l("a"),qt=a("Chapter 5"),Tt=a(" if you need a reminder of how to load your custom data in a "),zt=l("code"),ct=a("Dataset"),vs=a("."),Ot=c(),ke=l("h3"),tt=l("a"),je=l("span"),y(kt.$$.fragment),vt=c(),Zt=l("span"),ps=a("The KDE4 dataset"),Le=c(),yt=l("p"),Jt=a("As usual, we download our dataset using the "),Ft=l("code"),dt=a("load_dataset()"),st=a(" function:"),It=c(),y(Ge.$$.fragment),Qt=c(),Pe=l("p"),hs=a("If you want to work with a different pair of languages, you can specify them by their codes. A total of 92 languages are available for this dataset; you can see them all by expanding the language tags on its "),Xe=l("a"),at=a("dataset card"),cs=a("."),nt=c(),ut=l("img"),Lt=c(),Dt=l("p"),Nt=a("Let\u2019s have a look at the dataset:"),ts=c(),y(We.$$.fragment),f=c(),y(C.$$.fragment),ys=c(),Ae=l("p"),Ks=a("We have 210,173 pairs of sentences, but in one single split, so we will need to create our own validation set. As we saw in "),ss=l("a"),Ve=a("Chapter 5"),Ys=a(", a "),Ht=l("code"),js=a("Dataset"),Ze=a(" has a "),ds=l("code"),Wt=a("train_test_split()"),Gs=a(" method that can help us. We\u2019ll provide a seed for reproducibility:"),Ne=c(),y(jt.$$.fragment),us=c(),y(Mt.$$.fragment),fs=c(),ge=l("p"),Xs=a("We can rename the "),ft=l("code"),Vs=a('"test"'),Zs=a(" key to "),Ut=l("code"),Js=a('"validation"'),Qs=a(" like this:"),as=c(),y(Bt.$$.fragment),Pt=c(),Rt=l("p"),Kt=a("Now let\u2019s take a look at one element of the dataset:"),ms=c(),y(ot.$$.fragment),_s=c(),y(lt.$$.fragment),xa=c(),gs=l("p"),Za=a("We get a dictionary with two sentences in the pair of languages we requested. One particularity of this dataset full of technical computer science terms is that they are all fully translated in French. However, French engineers are often lazy and leave most computer science-specific words in English when they talk. Here, for instance, the word \u201Cthreads\u201D might well appear in a French sentence, especially in a technical conversation; but in this dataset it has been translated into the more correct \u201Cfils de discussion.\u201D The pretrained model we use, which has been pretrained on a larger corpus of French and English sentences, takes the easier option of leaving the word as is:"),qa=c(),y(At.$$.fragment),ea=c(),y(Es.$$.fragment),Ta=c(),xs=l("p"),u=a(`Another example of this behavior can be seen with the word \u201Cplugin,\u201D which isn\u2019t officially a French word but which most native speakers will understand and not bother to translate.
In the KDE4 dataset this word has been translated in French into the more official \u201Cmodule d\u2019extension\u201D:`),L=c(),y(ta.$$.fragment),Ja=c(),y(sa.$$.fragment),qs=c(),ga=l("p"),to=a("Our pretrained model, however, sticks with the compact and familiar English word:"),wa=c(),y(aa.$$.fragment),Qa=c(),y(na.$$.fragment),Ts=c(),ba=l("p"),so=a("It will be interesting to see if our fine-tuned model picks up on those particularities of the dataset (spoiler alert: it will)."),en=c(),y(oa.$$.fragment),zs=c(),y(Ds.$$.fragment),tn=c(),rt=l("h3"),Ps=l("a"),za=l("span"),y(la.$$.fragment),ws=c(),Da=l("span"),ao=a("Processing the data"),sn=c(),y(ra.$$.fragment),As=c(),ns=l("p"),no=a("You should know the drill by now: the texts all need to be converted into sets of token IDs so the model can make sense of them. For this task, we\u2019ll need to tokenize both the inputs and the targets. Our first task is to create our "),ia=l("code"),oo=a("tokenizer"),lo=a(" object. As noted earlier, we\u2019ll be using a Marian English to French pretrained model. If you are trying this code with another pair of languages, make sure to adapt the model checkpoint. The "),pa=l("a"),ha=a("Helsinki-NLP"),ro=a(" organization provides more than a thousand models in multiple languages."),an=c(),y(Yt.$$.fragment),nn=c(),os=l("p"),ca=a("You can also replace the "),Pa=l("code"),io=a("model_checkpoint"),bs=a(" with any other model you prefer from the "),da=l("a"),po=a("Hub"),ho=a(", or a local folder where you\u2019ve saved a pretrained model and a tokenizer."),Ss=c(),y(Cs.$$.fragment),on=c(),Os=l("p"),ii=a("The preparation of our data is pretty straightforward. There\u2019s just one thing to remember: you process the inputs as usual, but for the targets, you need to wrap the tokenizer inside the context manager "),Vo=l("code"),pi=a("as_target_tokenizer()"),hi=a("."),Dl=c(),Aa=l("p"),ci=a("A context manager in Python is introduced with the "),Zo=l("code"),di=a("with"),ui=a(" statement and is useful when you have two related operations to execute as a pair. The most common example of this is when you write or read a file, which is often done inside an instruction like:"),Pl=c(),y(ln.$$.fragment),Al=c(),ua=l("p"),fi=a("Here the two related operations that are executed as a pair are the actions of opening and closing the file. The object corresponding to the opened file "),Jo=l("code"),mi=a("f"),_i=a(" only exists inside the indented block under the "),Qo=l("code"),gi=a("with"),wi=a("; the opening happens before that block and the closing at the end of the block."),Sl=c(),Sa=l("p"),bi=a("In the case at hand, the context manager "),el=l("code"),$i=a("as_target_tokenizer()"),ki=a(" will set the tokenizer in the output language (here, French) before the indented block is executed, then set it back in the input language (here, English)."),Cl=c(),co=l("p"),vi=a("So, preprocessing one sample looks like this:"),Ol=c(),y(rn.$$.fragment),Fl=c(),uo=l("p"),yi=a("If we forget to tokenize the targets inside the context manager, they will be tokenized by the input tokenizer, which in the case of a Marian model is not going to go well at all:"),Il=c(),y(pn.$$.fragment),Ll=c(),y(hn.$$.fragment),Nl=c(),fo=l("p"),ji=a("As we can see, using the English tokenizer to preprocess a French sentence results in a lot more tokens, since the tokenizer doesn\u2019t know any French words (except those that also appear in the English language, like \u201Cdiscussion\u201D)."),Hl=c(),$s=l("p"),Ei=a("Both "),tl=l("code"),xi=a("inputs"),qi=a(" and "),sl=l("code"),Ti=a("targets"),zi=a(" are dictionaries with our usual keys (input IDs, attention mask, etc.), so the last step is to set a "),al=l("code"),Di=a('"labels"'),Pi=a(" key inside the inputs. We do this in the preprocessing function we will apply on the datasets:"),Wl=c(),y(cn.$$.fragment),Ml=c(),mo=l("p"),Ai=a("Note that we set similar maximum lengths for our inputs and outputs. Since the texts we\u2019re dealing with seem pretty short, we use 128."),Ul=c(),y(Ca.$$.fragment),Bl=c(),y(Oa.$$.fragment),Rl=c(),_o=l("p"),Si=a("We can now apply that preprocessing in one go on all the splits of our dataset:"),Kl=c(),y(dn.$$.fragment),Yl=c(),go=l("p"),Ci=a("Now that the data has been preprocessed, we are ready to fine-tune our pretrained model!"),Gl=c(),Is.c(),wo=c(),bo=l("p"),Oi=a("Note that this time we are using a model that was trained on a translation task and can actually be used already, so there is no warning about missing weights or newly initialized ones."),Xl=c(),$a=l("h3"),Fa=l("a"),nl=l("span"),y(un.$$.fragment),Fi=c(),ol=l("span"),Ii=a("Data collation"),Vl=c(),ks=l("p"),Li=a("We\u2019ll need a data collator to deal with the padding for dynamic batching. We can\u2019t just use a "),ll=l("code"),Ni=a("DataCollatorWithPadding"),Hi=a(" like in "),$o=l("a"),Wi=a("Chapter 3"),Mi=a(" in this case, because that only pads the inputs (input IDs, attention mask, and token type IDs). Our labels should also be padded to the maximum length encountered in the labels. And, as mentioned previously, the padding value used to pad the labels should be "),rl=l("code"),Ui=a("-100"),Bi=a(" and not the padding token of the tokenizer, to make sure those padded values are ignored in the loss computation."),Zl=c(),it=l("p"),Ri=a("This is all done by a "),fn=l("a"),il=l("code"),Ki=a("DataCollatorForSeq2Seq"),Yi=a(". Like the "),pl=l("code"),Gi=a("DataCollatorWithPadding"),Xi=a(", it takes the "),hl=l("code"),Vi=a("tokenizer"),Zi=a(" used to preprocess the inputs, but it also takes the "),cl=l("code"),Ji=a("model"),Qi=a(". This is because this data collator will also be responsible for preparing the decoder input IDs, which are shifted versions of the labels with a special token at the beginning. Since this shift is done slightly differently for different architectures, the "),dl=l("code"),ep=a("DataCollatorForSeq2Seq"),tp=a(" needs to know the "),ul=l("code"),sp=a("model"),ap=a(" object:"),Jl=c(),Ns.c(),ko=c(),vo=l("p"),np=a("To test this on a few samples, we just call it on a list of examples from our tokenized training set:"),Ql=c(),y(mn.$$.fragment),er=c(),y(_n.$$.fragment),tr=c(),Ia=l("p"),op=a("We can check our labels have been padded to the maximum length of the batch, using "),fl=l("code"),lp=a("-100"),rp=a(":"),sr=c(),y(gn.$$.fragment),ar=c(),y(wn.$$.fragment),nr=c(),yo=l("p"),ip=a("And we can also have a look at the decoder input IDs, to see that they are shifted versions of the labels:"),or=c(),y(bn.$$.fragment),lr=c(),y($n.$$.fragment),rr=c(),jo=l("p"),pp=a("Here are the labels for the first and second elements in our dataset:"),ir=c(),y(kn.$$.fragment),pr=c(),y(vn.$$.fragment),hr=c(),Ws.c(),Eo=c(),ka=l("h3"),La=l("a"),ml=l("span"),y(yn.$$.fragment),hp=c(),_l=l("span"),cp=a("Metrics"),cr=c(),y(jn.$$.fragment),dr=c(),St&&St.c(),xo=c(),Gt=l("p"),dp=a("The traditional metric used for translation is the "),En=l("a"),up=a("BLEU score"),fp=a(", introduced in "),xn=l("a"),mp=a("a 2002 article"),_p=a(" by Kishore Papineni et al. The BLEU score evaluates how close the translations are to their labels. It does not measure the intelligibility or grammatical correctness of the model\u2019s generated outputs, but uses statistical rules to ensure that all the words in the generated outputs also appear in the targets. In addition, there are rules that penalize repetitions of the same words if they are not also repeated in the targets (to avoid the model outputting sentences like "),gl=l("code"),gp=a('"the the the the the"'),wp=a(") and output sentences that are shorter than those in the targets (to avoid the model outputting sentences like "),wl=l("code"),bp=a('"the"'),$p=a(")."),ur=c(),Na=l("p"),kp=a("One weakness with BLEU is that it expects the text to already be tokenized, which makes it difficult to compare scores between models that use different tokenizers. So instead, the most commonly used metric for benchmarking translation models today is "),qn=l("a"),vp=a("SacreBLEU"),yp=a(", which addresses this weakness (and others) by standardizing the tokenization step. To use this metric, we first need to install the SacreBLEU library:"),fr=c(),y(Tn.$$.fragment),mr=c(),fa=l("p"),jp=a("We can then load it via "),bl=l("code"),Ep=a("load_metric()"),xp=a(" like we did in "),qo=l("a"),qp=a("Chapter 3"),Tp=a(":"),_r=c(),y(zn.$$.fragment),gr=c(),To=l("p"),zp=a("This metric will take texts as inputs and targets. It is designed to accept several acceptable targets, as there are often multiple acceptable translations of the same sentence \u2014 the dataset we\u2019re using only provides one, but it\u2019s not uncommon in NLP to find datasets that give several sentences as labels. So, the predictions should be a list of sentences, but the references should be a list of lists of sentences."),wr=c(),zo=l("p"),Dp=a("Let\u2019s try an example:"),br=c(),y(Dn.$$.fragment),$r=c(),y(Pn.$$.fragment),kr=c(),Xt=l("p"),Pp=a("This gets a BLEU score of 46.75, which is rather good \u2014 for reference, the original Transformer model in the "),An=l("a"),Ap=a("\u201CAttention Is All You Need\u201D paper"),Sp=a(" achieved a BLEU score of 41.8 on a similar translation task between English and French! (For more information about the individual metrics, like "),$l=l("code"),Cp=a("counts"),Op=a(" and "),kl=l("code"),Fp=a("bp"),Ip=a(", see the "),Sn=l("a"),Lp=a("SacreBLEU repository"),Np=a(".) On the other hand, if we try with the two bad types of predictions (lots of repetitions or too short) that often come out of translation models, we will get rather bad BLEU scores:"),vr=c(),y(Cn.$$.fragment),yr=c(),y(On.$$.fragment),jr=c(),y(Fn.$$.fragment),Er=c(),y(In.$$.fragment),xr=c(),Do=l("p"),Hp=a("The score can go from 0 to 100, and higher is better."),qr=c(),Us.c(),Po=c(),Ao=l("p"),Wp=a("Now that this is done, we are ready to fine-tune our model!"),Tr=c(),va=l("h3"),Ha=l("a"),vl=l("span"),y(Ln.$$.fragment),Mp=c(),yl=l("span"),Up=a("Fine-tuning the model"),zr=c(),So=l("p"),Bp=a("The first step is to log in to Hugging Face, so you\u2019re able to upload your results to the Model Hub. There\u2019s a convenience function to help you with this in a notebook:"),Dr=c(),y(Nn.$$.fragment),Pr=c(),Co=l("p"),Rp=a("This will display a widget where you can enter your Hugging Face login credentials."),Ar=c(),Oo=l("p"),Kp=a("If you aren\u2019t working in a notebook, just type the following line in your terminal:"),Sr=c(),y(Hn.$$.fragment),Cr=c(),Rs.c(),Fo=c(),Je&&Je.c(),Io=c(),ya=l("h2"),Wa=l("a"),jl=l("span"),y(Wn.$$.fragment),Yp=c(),El=l("span"),Gp=a("Using the fine-tuned model"),Or=c(),Ma=l("p"),Xp=a("We\u2019ve already shown you how you can use the model we fine-tuned on the Model Hub with the inference widget. To use it locally in a "),xl=l("code"),Vp=a("pipeline"),Zp=a(", we just have to specify the proper model identifier:"),Fr=c(),y(Mn.$$.fragment),Ir=c(),y(Un.$$.fragment),Lr=c(),Lo=l("p"),Jp=a("As expected, our pretrained model adapted its knowledge to the corpus we fine-tuned it on, and instead of leaving the English word \u201Cthreads\u201D alone, it now translates it to the French official version. It\u2019s the same for \u201Cplugin\u201D:"),Nr=c(),y(Bn.$$.fragment),Hr=c(),y(Rn.$$.fragment),Wr=c(),No=l("p"),Qp=a("Another great example of domain adaptation!"),Mr=c(),y(Ua.$$.fragment),this.h()},l(e){const p=cd('[data-svelte="svelte-1phssyn"]',document.head);h=r(p,"META",{name:!0,content:!0}),p.forEach(t),b=d(e),j(m.$$.fragment,e),q=d(e),A=r(e,"H1",{class:!0});var Jn=i(A);_=r(Jn,"A",{id:!0,class:!0,href:!0});var Ho=i(_);z=r(Ho,"SPAN",{});var ql=i(z);j(P.$$.fragment,ql),ql.forEach(t),Ho.forEach(t),D=d(Jn),T=r(Jn,"SPAN",{});var Tl=i(T);N=n(Tl,"Translation"),Tl.forEach(t),Jn.forEach(t),v=d(e),H.l(e),U=d(e),F=r(e,"P",{});var ja=i(F);X=n(ja,"Let\u2019s now dive into translation. This is another "),M=r(ja,"A",{href:!0});var zl=i(M);I=n(zl,"sequence-to-sequence task"),zl.forEach(t),Y=n(ja,", which means it\u2019s a problem that can be formulated as going from one sequence to another. In that sense the problem is pretty close to "),V=r(ja,"A",{href:!0});var Wo=i(V);re=n(Wo,"summarization"),Wo.forEach(t),he=n(ja,", and you could adapt what we will see here to other sequence-to-sequence problems such as:"),ja.forEach(t),Q=d(e),ee=r(e,"UL",{});var Ba=i(ee);te=r(Ba,"LI",{});var Ea=i(te);G=r(Ea,"STRONG",{});var Mo=i(G);ne=n(Mo,"Style transfer"),Mo.forEach(t),we=n(Ea,": Creating a model that "),J=r(Ea,"EM",{});var Uo=i(J);se=n(Uo,"translates"),Uo.forEach(t),ce=n(Ea," texts written in a certain style to another (e.g., formal to casual or Shakespearean English to modern English)"),Ea.forEach(t),be=d(Ba),oe=r(Ba,"LI",{});var Bo=i(oe);ie=r(Bo,"STRONG",{});var dh=i(ie);W=n(dh,"Generative question answering"),dh.forEach(t),ae=n(Bo,": Creating a model that generates answers to questions, given a context"),Bo.forEach(t),Ba.forEach(t),Te=d(e),j(de.$$.fragment,e),K=d(e),ve=r(e,"P",{});var Br=i(ve);le=n(Br,"If you have a big enough corpus of texts in two (or more) languages, you can train a new translation model from scratch like we will in the section on "),Ee=r(Br,"A",{href:!0});var uh=i(Ee);Me=n(uh,"causal language modeling"),uh.forEach(t),ue=n(Br,". It will be faster, however, to fine-tune an existing translation model, be it a multilingual one like mT5 or mBART that you want to fine-tune to a specific language pair, or even a model specialized for translation from one language to another that you want to fine-tune to your specific corpus."),Br.forEach(t),xe=d(e),Z=r(e,"P",{});var Ra=i(Z);Se=n(Ra,"In this section, we will fine-tune a Marian model pretrained to translate from English to French (since a lot of Hugging Face employees speak both those languages) on the "),fe=r(Ra,"A",{href:!0,rel:!0});var fh=i(fe);pt=n(fh,"KDE4 dataset"),fh.forEach(t),mt=n(Ra,", which is a dataset of localized files for the "),$e=r(Ra,"A",{href:!0,rel:!0});var mh=i($e);Qe=n(mh,"KDE apps"),mh.forEach(t),Ue=n(Ra,". The model we will use has been pretrained on a large corpus of French and English texts taken from the "),Ce=r(Ra,"A",{href:!0,rel:!0});var _h=i(Ce);ye=n(_h,"Opus dataset"),_h.forEach(t),_t=n(Ra,", which actually contains the KDE4 dataset. But even if the pretrained model we use has seen that data during its pretraining, we will see that we can get a better version of it after fine-tuning."),Ra.forEach(t),me=d(e),$=r(e,"P",{});var gh=i($);R=n(gh,"Once we\u2019re finished, we will have a model able to make predictions like this one:"),gh.forEach(t),et=d(e),qe=r(e,"DIV",{class:!0});var wh=i(qe);ze=r(wh,"DIV",{class:!0});var rd=i(ze);rd.forEach(t),wh.forEach(t),ht=d(e),Be=r(e,"P",{});var Rr=i(Be);_e=n(Rr,"As in the previous sections, you can find the actual model that we\u2019ll train and upload to the Hub using the code below and double-check its predictions "),Re=r(Rr,"A",{href:!0,rel:!0});var bh=i(Re);Ke=n(bh,"here"),bh.forEach(t),gt=n(Rr,"."),Rr.forEach(t),De=d(e),Oe=r(e,"H2",{class:!0});var Kr=i(Oe);pe=r(Kr,"A",{id:!0,class:!0,href:!0});var $h=i(pe);He=r($h,"SPAN",{});var kh=i(He);j(Fe.$$.fragment,kh),kh.forEach(t),$h.forEach(t),Et=d(Kr),Ct=r(Kr,"SPAN",{});var vh=i(Ct);wt=n(vh,"Preparing the data"),vh.forEach(t),Kr.forEach(t),rs=d(e),Ie=r(e,"P",{});var Ka=i(Ie);bt=n(Ka,"To fine-tune or train a translation model from scratch, we will need a dataset suitable for the task. As mentioned previously, we\u2019ll use the "),xt=r(Ka,"A",{href:!0,rel:!0});var yh=i(xt);is=n(yh,"KDE4 dataset"),yh.forEach(t),$t=n(Ka," in this section, but you can adapt the code to use your own data quite easily, as long as you have pairs of sentences in the two languages you want to translate from and into. Refer back to "),Ye=r(Ka,"A",{href:!0});var jh=i(Ye);qt=n(jh,"Chapter 5"),jh.forEach(t),Tt=n(Ka," if you need a reminder of how to load your custom data in a "),zt=r(Ka,"CODE",{});var Eh=i(zt);ct=n(Eh,"Dataset"),Eh.forEach(t),vs=n(Ka,"."),Ka.forEach(t),Ot=d(e),ke=r(e,"H3",{class:!0});var Yr=i(ke);tt=r(Yr,"A",{id:!0,class:!0,href:!0});var xh=i(tt);je=r(xh,"SPAN",{});var qh=i(je);j(kt.$$.fragment,qh),qh.forEach(t),xh.forEach(t),vt=d(Yr),Zt=r(Yr,"SPAN",{});var Th=i(Zt);ps=n(Th,"The KDE4 dataset"),Th.forEach(t),Yr.forEach(t),Le=d(e),yt=r(e,"P",{});var Gr=i(yt);Jt=n(Gr,"As usual, we download our dataset using the "),Ft=r(Gr,"CODE",{});var zh=i(Ft);dt=n(zh,"load_dataset()"),zh.forEach(t),st=n(Gr," function:"),Gr.forEach(t),It=d(e),j(Ge.$$.fragment,e),Qt=d(e),Pe=r(e,"P",{});var Xr=i(Pe);hs=n(Xr,"If you want to work with a different pair of languages, you can specify them by their codes. A total of 92 languages are available for this dataset; you can see them all by expanding the language tags on its "),Xe=r(Xr,"A",{href:!0,rel:!0});var Dh=i(Xe);at=n(Dh,"dataset card"),Dh.forEach(t),cs=n(Xr,"."),Xr.forEach(t),nt=d(e),ut=r(e,"IMG",{src:!0,alt:!0,width:!0}),Lt=d(e),Dt=r(e,"P",{});var Ph=i(Dt);Nt=n(Ph,"Let\u2019s have a look at the dataset:"),Ph.forEach(t),ts=d(e),j(We.$$.fragment,e),f=d(e),j(C.$$.fragment,e),ys=d(e),Ae=r(e,"P",{});var Ya=i(Ae);Ks=n(Ya,"We have 210,173 pairs of sentences, but in one single split, so we will need to create our own validation set. As we saw in "),ss=r(Ya,"A",{href:!0});var Ah=i(ss);Ve=n(Ah,"Chapter 5"),Ah.forEach(t),Ys=n(Ya,", a "),Ht=r(Ya,"CODE",{});var Sh=i(Ht);js=n(Sh,"Dataset"),Sh.forEach(t),Ze=n(Ya," has a "),ds=r(Ya,"CODE",{});var Ch=i(ds);Wt=n(Ch,"train_test_split()"),Ch.forEach(t),Gs=n(Ya," method that can help us. We\u2019ll provide a seed for reproducibility:"),Ya.forEach(t),Ne=d(e),j(jt.$$.fragment,e),us=d(e),j(Mt.$$.fragment,e),fs=d(e),ge=r(e,"P",{});var Ro=i(ge);Xs=n(Ro,"We can rename the "),ft=r(Ro,"CODE",{});var Oh=i(ft);Vs=n(Oh,'"test"'),Oh.forEach(t),Zs=n(Ro," key to "),Ut=r(Ro,"CODE",{});var Fh=i(Ut);Js=n(Fh,'"validation"'),Fh.forEach(t),Qs=n(Ro," like this:"),Ro.forEach(t),as=d(e),j(Bt.$$.fragment,e),Pt=d(e),Rt=r(e,"P",{});var Ih=i(Rt);Kt=n(Ih,"Now let\u2019s take a look at one element of the dataset:"),Ih.forEach(t),ms=d(e),j(ot.$$.fragment,e),_s=d(e),j(lt.$$.fragment,e),xa=d(e),gs=r(e,"P",{});var Lh=i(gs);Za=n(Lh,"We get a dictionary with two sentences in the pair of languages we requested. One particularity of this dataset full of technical computer science terms is that they are all fully translated in French. However, French engineers are often lazy and leave most computer science-specific words in English when they talk. Here, for instance, the word \u201Cthreads\u201D might well appear in a French sentence, especially in a technical conversation; but in this dataset it has been translated into the more correct \u201Cfils de discussion.\u201D The pretrained model we use, which has been pretrained on a larger corpus of French and English sentences, takes the easier option of leaving the word as is:"),Lh.forEach(t),qa=d(e),j(At.$$.fragment,e),ea=d(e),j(Es.$$.fragment,e),Ta=d(e),xs=r(e,"P",{});var Nh=i(xs);u=n(Nh,`Another example of this behavior can be seen with the word \u201Cplugin,\u201D which isn\u2019t officially a French word but which most native speakers will understand and not bother to translate.
In the KDE4 dataset this word has been translated in French into the more official \u201Cmodule d\u2019extension\u201D:`),Nh.forEach(t),L=d(e),j(ta.$$.fragment,e),Ja=d(e),j(sa.$$.fragment,e),qs=d(e),ga=r(e,"P",{});var Hh=i(ga);to=n(Hh,"Our pretrained model, however, sticks with the compact and familiar English word:"),Hh.forEach(t),wa=d(e),j(aa.$$.fragment,e),Qa=d(e),j(na.$$.fragment,e),Ts=d(e),ba=r(e,"P",{});var Wh=i(ba);so=n(Wh,"It will be interesting to see if our fine-tuned model picks up on those particularities of the dataset (spoiler alert: it will)."),Wh.forEach(t),en=d(e),j(oa.$$.fragment,e),zs=d(e),j(Ds.$$.fragment,e),tn=d(e),rt=r(e,"H3",{class:!0});var Vr=i(rt);Ps=r(Vr,"A",{id:!0,class:!0,href:!0});var Mh=i(Ps);za=r(Mh,"SPAN",{});var Uh=i(za);j(la.$$.fragment,Uh),Uh.forEach(t),Mh.forEach(t),ws=d(Vr),Da=r(Vr,"SPAN",{});var Bh=i(Da);ao=n(Bh,"Processing the data"),Bh.forEach(t),Vr.forEach(t),sn=d(e),j(ra.$$.fragment,e),As=d(e),ns=r(e,"P",{});var Ko=i(ns);no=n(Ko,"You should know the drill by now: the texts all need to be converted into sets of token IDs so the model can make sense of them. For this task, we\u2019ll need to tokenize both the inputs and the targets. Our first task is to create our "),ia=r(Ko,"CODE",{});var Rh=i(ia);oo=n(Rh,"tokenizer"),Rh.forEach(t),lo=n(Ko," object. As noted earlier, we\u2019ll be using a Marian English to French pretrained model. If you are trying this code with another pair of languages, make sure to adapt the model checkpoint. The "),pa=r(Ko,"A",{href:!0,rel:!0});var Kh=i(pa);ha=n(Kh,"Helsinki-NLP"),Kh.forEach(t),ro=n(Ko," organization provides more than a thousand models in multiple languages."),Ko.forEach(t),an=d(e),j(Yt.$$.fragment,e),nn=d(e),os=r(e,"P",{});var Yo=i(os);ca=n(Yo,"You can also replace the "),Pa=r(Yo,"CODE",{});var Yh=i(Pa);io=n(Yh,"model_checkpoint"),Yh.forEach(t),bs=n(Yo," with any other model you prefer from the "),da=r(Yo,"A",{href:!0,rel:!0});var Gh=i(da);po=n(Gh,"Hub"),Gh.forEach(t),ho=n(Yo,", or a local folder where you\u2019ve saved a pretrained model and a tokenizer."),Yo.forEach(t),Ss=d(e),j(Cs.$$.fragment,e),on=d(e),Os=r(e,"P",{});var Zr=i(Os);ii=n(Zr,"The preparation of our data is pretty straightforward. There\u2019s just one thing to remember: you process the inputs as usual, but for the targets, you need to wrap the tokenizer inside the context manager "),Vo=r(Zr,"CODE",{});var Xh=i(Vo);pi=n(Xh,"as_target_tokenizer()"),Xh.forEach(t),hi=n(Zr,"."),Zr.forEach(t),Dl=d(e),Aa=r(e,"P",{});var Jr=i(Aa);ci=n(Jr,"A context manager in Python is introduced with the "),Zo=r(Jr,"CODE",{});var Vh=i(Zo);di=n(Vh,"with"),Vh.forEach(t),ui=n(Jr," statement and is useful when you have two related operations to execute as a pair. The most common example of this is when you write or read a file, which is often done inside an instruction like:"),Jr.forEach(t),Pl=d(e),j(ln.$$.fragment,e),Al=d(e),ua=r(e,"P",{});var Go=i(ua);fi=n(Go,"Here the two related operations that are executed as a pair are the actions of opening and closing the file. The object corresponding to the opened file "),Jo=r(Go,"CODE",{});var Zh=i(Jo);mi=n(Zh,"f"),Zh.forEach(t),_i=n(Go," only exists inside the indented block under the "),Qo=r(Go,"CODE",{});var Jh=i(Qo);gi=n(Jh,"with"),Jh.forEach(t),wi=n(Go,"; the opening happens before that block and the closing at the end of the block."),Go.forEach(t),Sl=d(e),Sa=r(e,"P",{});var Qr=i(Sa);bi=n(Qr,"In the case at hand, the context manager "),el=r(Qr,"CODE",{});var Qh=i(el);$i=n(Qh,"as_target_tokenizer()"),Qh.forEach(t),ki=n(Qr," will set the tokenizer in the output language (here, French) before the indented block is executed, then set it back in the input language (here, English)."),Qr.forEach(t),Cl=d(e),co=r(e,"P",{});var ec=i(co);vi=n(ec,"So, preprocessing one sample looks like this:"),ec.forEach(t),Ol=d(e),j(rn.$$.fragment,e),Fl=d(e),uo=r(e,"P",{});var tc=i(uo);yi=n(tc,"If we forget to tokenize the targets inside the context manager, they will be tokenized by the input tokenizer, which in the case of a Marian model is not going to go well at all:"),tc.forEach(t),Il=d(e),j(pn.$$.fragment,e),Ll=d(e),j(hn.$$.fragment,e),Nl=d(e),fo=r(e,"P",{});var sc=i(fo);ji=n(sc,"As we can see, using the English tokenizer to preprocess a French sentence results in a lot more tokens, since the tokenizer doesn\u2019t know any French words (except those that also appear in the English language, like \u201Cdiscussion\u201D)."),sc.forEach(t),Hl=d(e),$s=r(e,"P",{});var Ga=i($s);Ei=n(Ga,"Both "),tl=r(Ga,"CODE",{});var ac=i(tl);xi=n(ac,"inputs"),ac.forEach(t),qi=n(Ga," and "),sl=r(Ga,"CODE",{});var nc=i(sl);Ti=n(nc,"targets"),nc.forEach(t),zi=n(Ga," are dictionaries with our usual keys (input IDs, attention mask, etc.), so the last step is to set a "),al=r(Ga,"CODE",{});var oc=i(al);Di=n(oc,'"labels"'),oc.forEach(t),Pi=n(Ga," key inside the inputs. We do this in the preprocessing function we will apply on the datasets:"),Ga.forEach(t),Wl=d(e),j(cn.$$.fragment,e),Ml=d(e),mo=r(e,"P",{});var lc=i(mo);Ai=n(lc,"Note that we set similar maximum lengths for our inputs and outputs. Since the texts we\u2019re dealing with seem pretty short, we use 128."),lc.forEach(t),Ul=d(e),j(Ca.$$.fragment,e),Bl=d(e),j(Oa.$$.fragment,e),Rl=d(e),_o=r(e,"P",{});var rc=i(_o);Si=n(rc,"We can now apply that preprocessing in one go on all the splits of our dataset:"),rc.forEach(t),Kl=d(e),j(dn.$$.fragment,e),Yl=d(e),go=r(e,"P",{});var ic=i(go);Ci=n(ic,"Now that the data has been preprocessed, we are ready to fine-tune our pretrained model!"),ic.forEach(t),Gl=d(e),Is.l(e),wo=d(e),bo=r(e,"P",{});var pc=i(bo);Oi=n(pc,"Note that this time we are using a model that was trained on a translation task and can actually be used already, so there is no warning about missing weights or newly initialized ones."),pc.forEach(t),Xl=d(e),$a=r(e,"H3",{class:!0});var ei=i($a);Fa=r(ei,"A",{id:!0,class:!0,href:!0});var hc=i(Fa);nl=r(hc,"SPAN",{});var cc=i(nl);j(un.$$.fragment,cc),cc.forEach(t),hc.forEach(t),Fi=d(ei),ol=r(ei,"SPAN",{});var dc=i(ol);Ii=n(dc,"Data collation"),dc.forEach(t),ei.forEach(t),Vl=d(e),ks=r(e,"P",{});var Xa=i(ks);Li=n(Xa,"We\u2019ll need a data collator to deal with the padding for dynamic batching. We can\u2019t just use a "),ll=r(Xa,"CODE",{});var uc=i(ll);Ni=n(uc,"DataCollatorWithPadding"),uc.forEach(t),Hi=n(Xa," like in "),$o=r(Xa,"A",{href:!0});var fc=i($o);Wi=n(fc,"Chapter 3"),fc.forEach(t),Mi=n(Xa," in this case, because that only pads the inputs (input IDs, attention mask, and token type IDs). Our labels should also be padded to the maximum length encountered in the labels. And, as mentioned previously, the padding value used to pad the labels should be "),rl=r(Xa,"CODE",{});var mc=i(rl);Ui=n(mc,"-100"),mc.forEach(t),Bi=n(Xa," and not the padding token of the tokenizer, to make sure those padded values are ignored in the loss computation."),Xa.forEach(t),Zl=d(e),it=r(e,"P",{});var Vt=i(it);Ri=n(Vt,"This is all done by a "),fn=r(Vt,"A",{href:!0,rel:!0});var _c=i(fn);il=r(_c,"CODE",{});var gc=i(il);Ki=n(gc,"DataCollatorForSeq2Seq"),gc.forEach(t),_c.forEach(t),Yi=n(Vt,". Like the "),pl=r(Vt,"CODE",{});var wc=i(pl);Gi=n(wc,"DataCollatorWithPadding"),wc.forEach(t),Xi=n(Vt,", it takes the "),hl=r(Vt,"CODE",{});var bc=i(hl);Vi=n(bc,"tokenizer"),bc.forEach(t),Zi=n(Vt," used to preprocess the inputs, but it also takes the "),cl=r(Vt,"CODE",{});var $c=i(cl);Ji=n($c,"model"),$c.forEach(t),Qi=n(Vt,". This is because this data collator will also be responsible for preparing the decoder input IDs, which are shifted versions of the labels with a special token at the beginning. Since this shift is done slightly differently for different architectures, the "),dl=r(Vt,"CODE",{});var kc=i(dl);ep=n(kc,"DataCollatorForSeq2Seq"),kc.forEach(t),tp=n(Vt," needs to know the "),ul=r(Vt,"CODE",{});var vc=i(ul);sp=n(vc,"model"),vc.forEach(t),ap=n(Vt," object:"),Vt.forEach(t),Jl=d(e),Ns.l(e),ko=d(e),vo=r(e,"P",{});var yc=i(vo);np=n(yc,"To test this on a few samples, we just call it on a list of examples from our tokenized training set:"),yc.forEach(t),Ql=d(e),j(mn.$$.fragment,e),er=d(e),j(_n.$$.fragment,e),tr=d(e),Ia=r(e,"P",{});var ti=i(Ia);op=n(ti,"We can check our labels have been padded to the maximum length of the batch, using "),fl=r(ti,"CODE",{});var jc=i(fl);lp=n(jc,"-100"),jc.forEach(t),rp=n(ti,":"),ti.forEach(t),sr=d(e),j(gn.$$.fragment,e),ar=d(e),j(wn.$$.fragment,e),nr=d(e),yo=r(e,"P",{});var Ec=i(yo);ip=n(Ec,"And we can also have a look at the decoder input IDs, to see that they are shifted versions of the labels:"),Ec.forEach(t),or=d(e),j(bn.$$.fragment,e),lr=d(e),j($n.$$.fragment,e),rr=d(e),jo=r(e,"P",{});var xc=i(jo);pp=n(xc,"Here are the labels for the first and second elements in our dataset:"),xc.forEach(t),ir=d(e),j(kn.$$.fragment,e),pr=d(e),j(vn.$$.fragment,e),hr=d(e),Ws.l(e),Eo=d(e),ka=r(e,"H3",{class:!0});var si=i(ka);La=r(si,"A",{id:!0,class:!0,href:!0});var qc=i(La);ml=r(qc,"SPAN",{});var Tc=i(ml);j(yn.$$.fragment,Tc),Tc.forEach(t),qc.forEach(t),hp=d(si),_l=r(si,"SPAN",{});var zc=i(_l);cp=n(zc,"Metrics"),zc.forEach(t),si.forEach(t),cr=d(e),j(jn.$$.fragment,e),dr=d(e),St&&St.l(e),xo=d(e),Gt=r(e,"P",{});var ma=i(Gt);dp=n(ma,"The traditional metric used for translation is the "),En=r(ma,"A",{href:!0,rel:!0});var Dc=i(En);up=n(Dc,"BLEU score"),Dc.forEach(t),fp=n(ma,", introduced in "),xn=r(ma,"A",{href:!0,rel:!0});var Pc=i(xn);mp=n(Pc,"a 2002 article"),Pc.forEach(t),_p=n(ma," by Kishore Papineni et al. The BLEU score evaluates how close the translations are to their labels. It does not measure the intelligibility or grammatical correctness of the model\u2019s generated outputs, but uses statistical rules to ensure that all the words in the generated outputs also appear in the targets. In addition, there are rules that penalize repetitions of the same words if they are not also repeated in the targets (to avoid the model outputting sentences like "),gl=r(ma,"CODE",{});var Ac=i(gl);gp=n(Ac,'"the the the the the"'),Ac.forEach(t),wp=n(ma,") and output sentences that are shorter than those in the targets (to avoid the model outputting sentences like "),wl=r(ma,"CODE",{});var Sc=i(wl);bp=n(Sc,'"the"'),Sc.forEach(t),$p=n(ma,")."),ma.forEach(t),ur=d(e),Na=r(e,"P",{});var ai=i(Na);kp=n(ai,"One weakness with BLEU is that it expects the text to already be tokenized, which makes it difficult to compare scores between models that use different tokenizers. So instead, the most commonly used metric for benchmarking translation models today is "),qn=r(ai,"A",{href:!0,rel:!0});var Cc=i(qn);vp=n(Cc,"SacreBLEU"),Cc.forEach(t),yp=n(ai,", which addresses this weakness (and others) by standardizing the tokenization step. To use this metric, we first need to install the SacreBLEU library:"),ai.forEach(t),fr=d(e),j(Tn.$$.fragment,e),mr=d(e),fa=r(e,"P",{});var Xo=i(fa);jp=n(Xo,"We can then load it via "),bl=r(Xo,"CODE",{});var Oc=i(bl);Ep=n(Oc,"load_metric()"),Oc.forEach(t),xp=n(Xo," like we did in "),qo=r(Xo,"A",{href:!0});var Fc=i(qo);qp=n(Fc,"Chapter 3"),Fc.forEach(t),Tp=n(Xo,":"),Xo.forEach(t),_r=d(e),j(zn.$$.fragment,e),gr=d(e),To=r(e,"P",{});var Ic=i(To);zp=n(Ic,"This metric will take texts as inputs and targets. It is designed to accept several acceptable targets, as there are often multiple acceptable translations of the same sentence \u2014 the dataset we\u2019re using only provides one, but it\u2019s not uncommon in NLP to find datasets that give several sentences as labels. So, the predictions should be a list of sentences, but the references should be a list of lists of sentences."),Ic.forEach(t),wr=d(e),zo=r(e,"P",{});var Lc=i(zo);Dp=n(Lc,"Let\u2019s try an example:"),Lc.forEach(t),br=d(e),j(Dn.$$.fragment,e),$r=d(e),j(Pn.$$.fragment,e),kr=d(e),Xt=r(e,"P",{});var _a=i(Xt);Pp=n(_a,"This gets a BLEU score of 46.75, which is rather good \u2014 for reference, the original Transformer model in the "),An=r(_a,"A",{href:!0,rel:!0});var Nc=i(An);Ap=n(Nc,"\u201CAttention Is All You Need\u201D paper"),Nc.forEach(t),Sp=n(_a," achieved a BLEU score of 41.8 on a similar translation task between English and French! (For more information about the individual metrics, like "),$l=r(_a,"CODE",{});var Hc=i($l);Cp=n(Hc,"counts"),Hc.forEach(t),Op=n(_a," and "),kl=r(_a,"CODE",{});var Wc=i(kl);Fp=n(Wc,"bp"),Wc.forEach(t),Ip=n(_a,", see the "),Sn=r(_a,"A",{href:!0,rel:!0});var Mc=i(Sn);Lp=n(Mc,"SacreBLEU repository"),Mc.forEach(t),Np=n(_a,".) On the other hand, if we try with the two bad types of predictions (lots of repetitions or too short) that often come out of translation models, we will get rather bad BLEU scores:"),_a.forEach(t),vr=d(e),j(Cn.$$.fragment,e),yr=d(e),j(On.$$.fragment,e),jr=d(e),j(Fn.$$.fragment,e),Er=d(e),j(In.$$.fragment,e),xr=d(e),Do=r(e,"P",{});var Uc=i(Do);Hp=n(Uc,"The score can go from 0 to 100, and higher is better."),Uc.forEach(t),qr=d(e),Us.l(e),Po=d(e),Ao=r(e,"P",{});var Bc=i(Ao);Wp=n(Bc,"Now that this is done, we are ready to fine-tune our model!"),Bc.forEach(t),Tr=d(e),va=r(e,"H3",{class:!0});var ni=i(va);Ha=r(ni,"A",{id:!0,class:!0,href:!0});var Rc=i(Ha);vl=r(Rc,"SPAN",{});var Kc=i(vl);j(Ln.$$.fragment,Kc),Kc.forEach(t),Rc.forEach(t),Mp=d(ni),yl=r(ni,"SPAN",{});var Yc=i(yl);Up=n(Yc,"Fine-tuning the model"),Yc.forEach(t),ni.forEach(t),zr=d(e),So=r(e,"P",{});var Gc=i(So);Bp=n(Gc,"The first step is to log in to Hugging Face, so you\u2019re able to upload your results to the Model Hub. There\u2019s a convenience function to help you with this in a notebook:"),Gc.forEach(t),Dr=d(e),j(Nn.$$.fragment,e),Pr=d(e),Co=r(e,"P",{});var Xc=i(Co);Rp=n(Xc,"This will display a widget where you can enter your Hugging Face login credentials."),Xc.forEach(t),Ar=d(e),Oo=r(e,"P",{});var Vc=i(Oo);Kp=n(Vc,"If you aren\u2019t working in a notebook, just type the following line in your terminal:"),Vc.forEach(t),Sr=d(e),j(Hn.$$.fragment,e),Cr=d(e),Rs.l(e),Fo=d(e),Je&&Je.l(e),Io=d(e),ya=r(e,"H2",{class:!0});var oi=i(ya);Wa=r(oi,"A",{id:!0,class:!0,href:!0});var Zc=i(Wa);jl=r(Zc,"SPAN",{});var Jc=i(jl);j(Wn.$$.fragment,Jc),Jc.forEach(t),Zc.forEach(t),Yp=d(oi),El=r(oi,"SPAN",{});var Qc=i(El);Gp=n(Qc,"Using the fine-tuned model"),Qc.forEach(t),oi.forEach(t),Or=d(e),Ma=r(e,"P",{});var li=i(Ma);Xp=n(li,"We\u2019ve already shown you how you can use the model we fine-tuned on the Model Hub with the inference widget. To use it locally in a "),xl=r(li,"CODE",{});var ed=i(xl);Vp=n(ed,"pipeline"),ed.forEach(t),Zp=n(li,", we just have to specify the proper model identifier:"),li.forEach(t),Fr=d(e),j(Mn.$$.fragment,e),Ir=d(e),j(Un.$$.fragment,e),Lr=d(e),Lo=r(e,"P",{});var td=i(Lo);Jp=n(td,"As expected, our pretrained model adapted its knowledge to the corpus we fine-tuned it on, and instead of leaving the English word \u201Cthreads\u201D alone, it now translates it to the French official version. It\u2019s the same for \u201Cplugin\u201D:"),td.forEach(t),Nr=d(e),j(Bn.$$.fragment,e),Hr=d(e),j(Rn.$$.fragment,e),Wr=d(e),No=r(e,"P",{});var sd=i(No);Qp=n(sd,"Another great example of domain adaptation!"),sd.forEach(t),Mr=d(e),j(Ua.$$.fragment,e),this.h()},h(){k(h,"name","hf:doc:metadata"),k(h,"content",JSON.stringify(Fd)),k(_,"id","translation"),k(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(_,"href","#translation"),k(A,"class","relative group"),k(M,"href","/course/chapter1/7"),k(V,"href","/course/chapter7/6"),k(Ee,"href","/course/chapter7/6"),k(fe,"href","https://huggingface.co/datasets/kde4"),k(fe,"rel","nofollow"),k($e,"href","https://apps.kde.org/"),k($e,"rel","nofollow"),k(Ce,"href","https://opus.nlpl.eu/"),k(Ce,"rel","nofollow"),k(ze,"class","max-w-md"),k(qe,"class","w-full flex justify-center"),k(Re,"href","https://huggingface.co/huggingface-course/marian-finetuned-kde4-en-to-fr?text=This+plugin+allows+you+to+automatically+translate+web+pages+between+several+languages."),k(Re,"rel","nofollow"),k(pe,"id","preparing-the-data"),k(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(pe,"href","#preparing-the-data"),k(Oe,"class","relative group"),k(xt,"href","https://huggingface.co/datasets/kde4"),k(xt,"rel","nofollow"),k(Ye,"href","/course/chapter5"),k(tt,"id","the-kde4-dataset"),k(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(tt,"href","#the-kde4-dataset"),k(ke,"class","relative group"),k(Xe,"href","https://huggingface.co/datasets/kde4"),k(Xe,"rel","nofollow"),dd(ut.src,es="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/language_tags.png")||k(ut,"src",es),k(ut,"alt","Language available for the KDE4 dataset."),k(ut,"width","100%"),k(ss,"href","/course/chapter5"),k(Ps,"id","processing-the-data"),k(Ps,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Ps,"href","#processing-the-data"),k(rt,"class","relative group"),k(pa,"href","https://huggingface.co/Helsinki-NLP"),k(pa,"rel","nofollow"),k(da,"href","https://huggingface.co/models"),k(da,"rel","nofollow"),k(Fa,"id","data-collation"),k(Fa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Fa,"href","#data-collation"),k($a,"class","relative group"),k($o,"href","/course/chapter3"),k(fn,"href","https://huggingface.co/transformers/main_classes/data_collator.html#datacollatorforseq2seq"),k(fn,"rel","nofollow"),k(La,"id","metrics"),k(La,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(La,"href","#metrics"),k(ka,"class","relative group"),k(En,"href","https://en.wikipedia.org/wiki/BLEU"),k(En,"rel","nofollow"),k(xn,"href","https://aclanthology.org/P02-1040.pdf"),k(xn,"rel","nofollow"),k(qn,"href","https://github.com/mjpost/sacrebleu"),k(qn,"rel","nofollow"),k(qo,"href","/course/chapter3"),k(An,"href","https://arxiv.org/pdf/1706.03762.pdf"),k(An,"rel","nofollow"),k(Sn,"href","https://github.com/mjpost/sacrebleu/blob/078c440168c6adc89ba75fe6d63f0d922d42bcfe/sacrebleu/metrics/bleu.py#L74"),k(Sn,"rel","nofollow"),k(Ha,"id","finetuning-the-model"),k(Ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Ha,"href","#finetuning-the-model"),k(va,"class","relative group"),k(Wa,"id","using-the-finetuned-model"),k(Wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),k(Wa,"href","#using-the-finetuned-model"),k(ya,"class","relative group")},m(e,p){s(document.head,h),o(e,b,p),E(m,e,p),o(e,q,p),o(e,A,p),s(A,_),s(_,z),E(P,z,null),s(A,D),s(A,T),s(T,N),o(e,v,p),Kn[S].m(e,p),o(e,U,p),o(e,F,p),s(F,X),s(F,M),s(M,I),s(F,Y),s(F,V),s(V,re),s(F,he),o(e,Q,p),o(e,ee,p),s(ee,te),s(te,G),s(G,ne),s(te,we),s(te,J),s(J,se),s(te,ce),s(ee,be),s(ee,oe),s(oe,ie),s(ie,W),s(oe,ae),o(e,Te,p),E(de,e,p),o(e,K,p),o(e,ve,p),s(ve,le),s(ve,Ee),s(Ee,Me),s(ve,ue),o(e,xe,p),o(e,Z,p),s(Z,Se),s(Z,fe),s(fe,pt),s(Z,mt),s(Z,$e),s($e,Qe),s(Z,Ue),s(Z,Ce),s(Ce,ye),s(Z,_t),o(e,me,p),o(e,$,p),s($,R),o(e,et,p),o(e,qe,p),s(qe,ze),o(e,ht,p),o(e,Be,p),s(Be,_e),s(Be,Re),s(Re,Ke),s(Be,gt),o(e,De,p),o(e,Oe,p),s(Oe,pe),s(pe,He),E(Fe,He,null),s(Oe,Et),s(Oe,Ct),s(Ct,wt),o(e,rs,p),o(e,Ie,p),s(Ie,bt),s(Ie,xt),s(xt,is),s(Ie,$t),s(Ie,Ye),s(Ye,qt),s(Ie,Tt),s(Ie,zt),s(zt,ct),s(Ie,vs),o(e,Ot,p),o(e,ke,p),s(ke,tt),s(tt,je),E(kt,je,null),s(ke,vt),s(ke,Zt),s(Zt,ps),o(e,Le,p),o(e,yt,p),s(yt,Jt),s(yt,Ft),s(Ft,dt),s(yt,st),o(e,It,p),E(Ge,e,p),o(e,Qt,p),o(e,Pe,p),s(Pe,hs),s(Pe,Xe),s(Xe,at),s(Pe,cs),o(e,nt,p),o(e,ut,p),o(e,Lt,p),o(e,Dt,p),s(Dt,Nt),o(e,ts,p),E(We,e,p),o(e,f,p),E(C,e,p),o(e,ys,p),o(e,Ae,p),s(Ae,Ks),s(Ae,ss),s(ss,Ve),s(Ae,Ys),s(Ae,Ht),s(Ht,js),s(Ae,Ze),s(Ae,ds),s(ds,Wt),s(Ae,Gs),o(e,Ne,p),E(jt,e,p),o(e,us,p),E(Mt,e,p),o(e,fs,p),o(e,ge,p),s(ge,Xs),s(ge,ft),s(ft,Vs),s(ge,Zs),s(ge,Ut),s(Ut,Js),s(ge,Qs),o(e,as,p),E(Bt,e,p),o(e,Pt,p),o(e,Rt,p),s(Rt,Kt),o(e,ms,p),E(ot,e,p),o(e,_s,p),E(lt,e,p),o(e,xa,p),o(e,gs,p),s(gs,Za),o(e,qa,p),E(At,e,p),o(e,ea,p),E(Es,e,p),o(e,Ta,p),o(e,xs,p),s(xs,u),o(e,L,p),E(ta,e,p),o(e,Ja,p),E(sa,e,p),o(e,qs,p),o(e,ga,p),s(ga,to),o(e,wa,p),E(aa,e,p),o(e,Qa,p),E(na,e,p),o(e,Ts,p),o(e,ba,p),s(ba,so),o(e,en,p),E(oa,e,p),o(e,zs,p),E(Ds,e,p),o(e,tn,p),o(e,rt,p),s(rt,Ps),s(Ps,za),E(la,za,null),s(rt,ws),s(rt,Da),s(Da,ao),o(e,sn,p),E(ra,e,p),o(e,As,p),o(e,ns,p),s(ns,no),s(ns,ia),s(ia,oo),s(ns,lo),s(ns,pa),s(pa,ha),s(ns,ro),o(e,an,p),E(Yt,e,p),o(e,nn,p),o(e,os,p),s(os,ca),s(os,Pa),s(Pa,io),s(os,bs),s(os,da),s(da,po),s(os,ho),o(e,Ss,p),E(Cs,e,p),o(e,on,p),o(e,Os,p),s(Os,ii),s(Os,Vo),s(Vo,pi),s(Os,hi),o(e,Dl,p),o(e,Aa,p),s(Aa,ci),s(Aa,Zo),s(Zo,di),s(Aa,ui),o(e,Pl,p),E(ln,e,p),o(e,Al,p),o(e,ua,p),s(ua,fi),s(ua,Jo),s(Jo,mi),s(ua,_i),s(ua,Qo),s(Qo,gi),s(ua,wi),o(e,Sl,p),o(e,Sa,p),s(Sa,bi),s(Sa,el),s(el,$i),s(Sa,ki),o(e,Cl,p),o(e,co,p),s(co,vi),o(e,Ol,p),E(rn,e,p),o(e,Fl,p),o(e,uo,p),s(uo,yi),o(e,Il,p),E(pn,e,p),o(e,Ll,p),E(hn,e,p),o(e,Nl,p),o(e,fo,p),s(fo,ji),o(e,Hl,p),o(e,$s,p),s($s,Ei),s($s,tl),s(tl,xi),s($s,qi),s($s,sl),s(sl,Ti),s($s,zi),s($s,al),s(al,Di),s($s,Pi),o(e,Wl,p),E(cn,e,p),o(e,Ml,p),o(e,mo,p),s(mo,Ai),o(e,Ul,p),E(Ca,e,p),o(e,Bl,p),E(Oa,e,p),o(e,Rl,p),o(e,_o,p),s(_o,Si),o(e,Kl,p),E(dn,e,p),o(e,Yl,p),o(e,go,p),s(go,Ci),o(e,Gl,p),Yn[Fs].m(e,p),o(e,wo,p),o(e,bo,p),s(bo,Oi),o(e,Xl,p),o(e,$a,p),s($a,Fa),s(Fa,nl),E(un,nl,null),s($a,Fi),s($a,ol),s(ol,Ii),o(e,Vl,p),o(e,ks,p),s(ks,Li),s(ks,ll),s(ll,Ni),s(ks,Hi),s(ks,$o),s($o,Wi),s(ks,Mi),s(ks,rl),s(rl,Ui),s(ks,Bi),o(e,Zl,p),o(e,it,p),s(it,Ri),s(it,fn),s(fn,il),s(il,Ki),s(it,Yi),s(it,pl),s(pl,Gi),s(it,Xi),s(it,hl),s(hl,Vi),s(it,Zi),s(it,cl),s(cl,Ji),s(it,Qi),s(it,dl),s(dl,ep),s(it,tp),s(it,ul),s(ul,sp),s(it,ap),o(e,Jl,p),Gn[Ls].m(e,p),o(e,ko,p),o(e,vo,p),s(vo,np),o(e,Ql,p),E(mn,e,p),o(e,er,p),E(_n,e,p),o(e,tr,p),o(e,Ia,p),s(Ia,op),s(Ia,fl),s(fl,lp),s(Ia,rp),o(e,sr,p),E(gn,e,p),o(e,ar,p),E(wn,e,p),o(e,nr,p),o(e,yo,p),s(yo,ip),o(e,or,p),E(bn,e,p),o(e,lr,p),E($n,e,p),o(e,rr,p),o(e,jo,p),s(jo,pp),o(e,ir,p),E(kn,e,p),o(e,pr,p),E(vn,e,p),o(e,hr,p),Xn[Hs].m(e,p),o(e,Eo,p),o(e,ka,p),s(ka,La),s(La,ml),E(yn,ml,null),s(ka,hp),s(ka,_l),s(_l,cp),o(e,cr,p),E(jn,e,p),o(e,dr,p),St&&St.m(e,p),o(e,xo,p),o(e,Gt,p),s(Gt,dp),s(Gt,En),s(En,up),s(Gt,fp),s(Gt,xn),s(xn,mp),s(Gt,_p),s(Gt,gl),s(gl,gp),s(Gt,wp),s(Gt,wl),s(wl,bp),s(Gt,$p),o(e,ur,p),o(e,Na,p),s(Na,kp),s(Na,qn),s(qn,vp),s(Na,yp),o(e,fr,p),E(Tn,e,p),o(e,mr,p),o(e,fa,p),s(fa,jp),s(fa,bl),s(bl,Ep),s(fa,xp),s(fa,qo),s(qo,qp),s(fa,Tp),o(e,_r,p),E(zn,e,p),o(e,gr,p),o(e,To,p),s(To,zp),o(e,wr,p),o(e,zo,p),s(zo,Dp),o(e,br,p),E(Dn,e,p),o(e,$r,p),E(Pn,e,p),o(e,kr,p),o(e,Xt,p),s(Xt,Pp),s(Xt,An),s(An,Ap),s(Xt,Sp),s(Xt,$l),s($l,Cp),s(Xt,Op),s(Xt,kl),s(kl,Fp),s(Xt,Ip),s(Xt,Sn),s(Sn,Lp),s(Xt,Np),o(e,vr,p),E(Cn,e,p),o(e,yr,p),E(On,e,p),o(e,jr,p),E(Fn,e,p),o(e,Er,p),E(In,e,p),o(e,xr,p),o(e,Do,p),s(Do,Hp),o(e,qr,p),Vn[Ms].m(e,p),o(e,Po,p),o(e,Ao,p),s(Ao,Wp),o(e,Tr,p),o(e,va,p),s(va,Ha),s(Ha,vl),E(Ln,vl,null),s(va,Mp),s(va,yl),s(yl,Up),o(e,zr,p),o(e,So,p),s(So,Bp),o(e,Dr,p),E(Nn,e,p),o(e,Pr,p),o(e,Co,p),s(Co,Rp),o(e,Ar,p),o(e,Oo,p),s(Oo,Kp),o(e,Sr,p),E(Hn,e,p),o(e,Cr,p),Zn[Bs].m(e,p),o(e,Fo,p),Je&&Je.m(e,p),o(e,Io,p),o(e,ya,p),s(ya,Wa),s(Wa,jl),E(Wn,jl,null),s(ya,Yp),s(ya,El),s(El,Gp),o(e,Or,p),o(e,Ma,p),s(Ma,Xp),s(Ma,xl),s(xl,Vp),s(Ma,Zp),o(e,Fr,p),E(Mn,e,p),o(e,Ir,p),E(Un,e,p),o(e,Lr,p),o(e,Lo,p),s(Lo,Jp),o(e,Nr,p),E(Bn,e,p),o(e,Hr,p),E(Rn,e,p),o(e,Wr,p),o(e,No,p),s(No,Qp),o(e,Mr,p),E(Ua,e,p),Ur=!0},p(e,[p]){const Jn={};p&1&&(Jn.fw=e[0]),m.$set(Jn);let Ho=S;S=th(e),S!==Ho&&(eo(),w(Kn[Ho],1,1,()=>{Kn[Ho]=null}),Qn(),H=Kn[S],H||(H=Kn[S]=eh[S](e),H.c()),g(H,1),H.m(U.parentNode,U));const ql={};p&2&&(ql.$$scope={dirty:p,ctx:e}),Ds.$set(ql);const Tl={};p&2&&(Tl.$$scope={dirty:p,ctx:e}),Cs.$set(Tl);const ja={};p&2&&(ja.$$scope={dirty:p,ctx:e}),Ca.$set(ja);const zl={};p&2&&(zl.$$scope={dirty:p,ctx:e}),Oa.$set(zl);let Wo=Fs;Fs=ah(e),Fs!==Wo&&(eo(),w(Yn[Wo],1,1,()=>{Yn[Wo]=null}),Qn(),Is=Yn[Fs],Is||(Is=Yn[Fs]=sh[Fs](e),Is.c()),g(Is,1),Is.m(wo.parentNode,wo));let Ba=Ls;Ls=oh(e),Ls!==Ba&&(eo(),w(Gn[Ba],1,1,()=>{Gn[Ba]=null}),Qn(),Ns=Gn[Ls],Ns||(Ns=Gn[Ls]=nh[Ls](e),Ns.c()),g(Ns,1),Ns.m(ko.parentNode,ko));let Ea=Hs;Hs=rh(e),Hs!==Ea&&(eo(),w(Xn[Ea],1,1,()=>{Xn[Ea]=null}),Qn(),Ws=Xn[Hs],Ws||(Ws=Xn[Hs]=lh[Hs](e),Ws.c()),g(Ws,1),Ws.m(Eo.parentNode,Eo)),e[0]==="pt"?St||(St=nd(),St.c(),St.m(xo.parentNode,xo)):St&&(St.d(1),St=null);let Mo=Ms;Ms=ph(e),Ms!==Mo&&(eo(),w(Vn[Mo],1,1,()=>{Vn[Mo]=null}),Qn(),Us=Vn[Ms],Us||(Us=Vn[Ms]=ih[Ms](e),Us.c()),g(Us,1),Us.m(Po.parentNode,Po));let Uo=Bs;Bs=ch(e),Bs!==Uo&&(eo(),w(Zn[Uo],1,1,()=>{Zn[Uo]=null}),Qn(),Rs=Zn[Bs],Rs||(Rs=Zn[Bs]=hh[Bs](e),Rs.c()),g(Rs,1),Rs.m(Fo.parentNode,Fo)),e[0]==="pt"?Je?p&1&&g(Je,1):(Je=od(),Je.c(),g(Je,1),Je.m(Io.parentNode,Io)):Je&&(eo(),w(Je,1,1,()=>{Je=null}),Qn());const Bo={};p&2&&(Bo.$$scope={dirty:p,ctx:e}),Ua.$set(Bo)},i(e){Ur||(g(m.$$.fragment,e),g(P.$$.fragment,e),g(H),g(de.$$.fragment,e),g(Fe.$$.fragment,e),g(kt.$$.fragment,e),g(Ge.$$.fragment,e),g(We.$$.fragment,e),g(C.$$.fragment,e),g(jt.$$.fragment,e),g(Mt.$$.fragment,e),g(Bt.$$.fragment,e),g(ot.$$.fragment,e),g(lt.$$.fragment,e),g(At.$$.fragment,e),g(Es.$$.fragment,e),g(ta.$$.fragment,e),g(sa.$$.fragment,e),g(aa.$$.fragment,e),g(na.$$.fragment,e),g(oa.$$.fragment,e),g(Ds.$$.fragment,e),g(la.$$.fragment,e),g(ra.$$.fragment,e),g(Yt.$$.fragment,e),g(Cs.$$.fragment,e),g(ln.$$.fragment,e),g(rn.$$.fragment,e),g(pn.$$.fragment,e),g(hn.$$.fragment,e),g(cn.$$.fragment,e),g(Ca.$$.fragment,e),g(Oa.$$.fragment,e),g(dn.$$.fragment,e),g(Is),g(un.$$.fragment,e),g(Ns),g(mn.$$.fragment,e),g(_n.$$.fragment,e),g(gn.$$.fragment,e),g(wn.$$.fragment,e),g(bn.$$.fragment,e),g($n.$$.fragment,e),g(kn.$$.fragment,e),g(vn.$$.fragment,e),g(Ws),g(yn.$$.fragment,e),g(jn.$$.fragment,e),g(Tn.$$.fragment,e),g(zn.$$.fragment,e),g(Dn.$$.fragment,e),g(Pn.$$.fragment,e),g(Cn.$$.fragment,e),g(On.$$.fragment,e),g(Fn.$$.fragment,e),g(In.$$.fragment,e),g(Us),g(Ln.$$.fragment,e),g(Nn.$$.fragment,e),g(Hn.$$.fragment,e),g(Rs),g(Je),g(Wn.$$.fragment,e),g(Mn.$$.fragment,e),g(Un.$$.fragment,e),g(Bn.$$.fragment,e),g(Rn.$$.fragment,e),g(Ua.$$.fragment,e),Ur=!0)},o(e){w(m.$$.fragment,e),w(P.$$.fragment,e),w(H),w(de.$$.fragment,e),w(Fe.$$.fragment,e),w(kt.$$.fragment,e),w(Ge.$$.fragment,e),w(We.$$.fragment,e),w(C.$$.fragment,e),w(jt.$$.fragment,e),w(Mt.$$.fragment,e),w(Bt.$$.fragment,e),w(ot.$$.fragment,e),w(lt.$$.fragment,e),w(At.$$.fragment,e),w(Es.$$.fragment,e),w(ta.$$.fragment,e),w(sa.$$.fragment,e),w(aa.$$.fragment,e),w(na.$$.fragment,e),w(oa.$$.fragment,e),w(Ds.$$.fragment,e),w(la.$$.fragment,e),w(ra.$$.fragment,e),w(Yt.$$.fragment,e),w(Cs.$$.fragment,e),w(ln.$$.fragment,e),w(rn.$$.fragment,e),w(pn.$$.fragment,e),w(hn.$$.fragment,e),w(cn.$$.fragment,e),w(Ca.$$.fragment,e),w(Oa.$$.fragment,e),w(dn.$$.fragment,e),w(Is),w(un.$$.fragment,e),w(Ns),w(mn.$$.fragment,e),w(_n.$$.fragment,e),w(gn.$$.fragment,e),w(wn.$$.fragment,e),w(bn.$$.fragment,e),w($n.$$.fragment,e),w(kn.$$.fragment,e),w(vn.$$.fragment,e),w(Ws),w(yn.$$.fragment,e),w(jn.$$.fragment,e),w(Tn.$$.fragment,e),w(zn.$$.fragment,e),w(Dn.$$.fragment,e),w(Pn.$$.fragment,e),w(Cn.$$.fragment,e),w(On.$$.fragment,e),w(Fn.$$.fragment,e),w(In.$$.fragment,e),w(Us),w(Ln.$$.fragment,e),w(Nn.$$.fragment,e),w(Hn.$$.fragment,e),w(Rs),w(Je),w(Wn.$$.fragment,e),w(Mn.$$.fragment,e),w(Un.$$.fragment,e),w(Bn.$$.fragment,e),w(Rn.$$.fragment,e),w(Ua.$$.fragment,e),Ur=!1},d(e){t(h),e&&t(b),x(m,e),e&&t(q),e&&t(A),x(P),e&&t(v),Kn[S].d(e),e&&t(U),e&&t(F),e&&t(Q),e&&t(ee),e&&t(Te),x(de,e),e&&t(K),e&&t(ve),e&&t(xe),e&&t(Z),e&&t(me),e&&t($),e&&t(et),e&&t(qe),e&&t(ht),e&&t(Be),e&&t(De),e&&t(Oe),x(Fe),e&&t(rs),e&&t(Ie),e&&t(Ot),e&&t(ke),x(kt),e&&t(Le),e&&t(yt),e&&t(It),x(Ge,e),e&&t(Qt),e&&t(Pe),e&&t(nt),e&&t(ut),e&&t(Lt),e&&t(Dt),e&&t(ts),x(We,e),e&&t(f),x(C,e),e&&t(ys),e&&t(Ae),e&&t(Ne),x(jt,e),e&&t(us),x(Mt,e),e&&t(fs),e&&t(ge),e&&t(as),x(Bt,e),e&&t(Pt),e&&t(Rt),e&&t(ms),x(ot,e),e&&t(_s),x(lt,e),e&&t(xa),e&&t(gs),e&&t(qa),x(At,e),e&&t(ea),x(Es,e),e&&t(Ta),e&&t(xs),e&&t(L),x(ta,e),e&&t(Ja),x(sa,e),e&&t(qs),e&&t(ga),e&&t(wa),x(aa,e),e&&t(Qa),x(na,e),e&&t(Ts),e&&t(ba),e&&t(en),x(oa,e),e&&t(zs),x(Ds,e),e&&t(tn),e&&t(rt),x(la),e&&t(sn),x(ra,e),e&&t(As),e&&t(ns),e&&t(an),x(Yt,e),e&&t(nn),e&&t(os),e&&t(Ss),x(Cs,e),e&&t(on),e&&t(Os),e&&t(Dl),e&&t(Aa),e&&t(Pl),x(ln,e),e&&t(Al),e&&t(ua),e&&t(Sl),e&&t(Sa),e&&t(Cl),e&&t(co),e&&t(Ol),x(rn,e),e&&t(Fl),e&&t(uo),e&&t(Il),x(pn,e),e&&t(Ll),x(hn,e),e&&t(Nl),e&&t(fo),e&&t(Hl),e&&t($s),e&&t(Wl),x(cn,e),e&&t(Ml),e&&t(mo),e&&t(Ul),x(Ca,e),e&&t(Bl),x(Oa,e),e&&t(Rl),e&&t(_o),e&&t(Kl),x(dn,e),e&&t(Yl),e&&t(go),e&&t(Gl),Yn[Fs].d(e),e&&t(wo),e&&t(bo),e&&t(Xl),e&&t($a),x(un),e&&t(Vl),e&&t(ks),e&&t(Zl),e&&t(it),e&&t(Jl),Gn[Ls].d(e),e&&t(ko),e&&t(vo),e&&t(Ql),x(mn,e),e&&t(er),x(_n,e),e&&t(tr),e&&t(Ia),e&&t(sr),x(gn,e),e&&t(ar),x(wn,e),e&&t(nr),e&&t(yo),e&&t(or),x(bn,e),e&&t(lr),x($n,e),e&&t(rr),e&&t(jo),e&&t(ir),x(kn,e),e&&t(pr),x(vn,e),e&&t(hr),Xn[Hs].d(e),e&&t(Eo),e&&t(ka),x(yn),e&&t(cr),x(jn,e),e&&t(dr),St&&St.d(e),e&&t(xo),e&&t(Gt),e&&t(ur),e&&t(Na),e&&t(fr),x(Tn,e),e&&t(mr),e&&t(fa),e&&t(_r),x(zn,e),e&&t(gr),e&&t(To),e&&t(wr),e&&t(zo),e&&t(br),x(Dn,e),e&&t($r),x(Pn,e),e&&t(kr),e&&t(Xt),e&&t(vr),x(Cn,e),e&&t(yr),x(On,e),e&&t(jr),x(Fn,e),e&&t(Er),x(In,e),e&&t(xr),e&&t(Do),e&&t(qr),Vn[Ms].d(e),e&&t(Po),e&&t(Ao),e&&t(Tr),e&&t(va),x(Ln),e&&t(zr),e&&t(So),e&&t(Dr),x(Nn,e),e&&t(Pr),e&&t(Co),e&&t(Ar),e&&t(Oo),e&&t(Sr),x(Hn,e),e&&t(Cr),Zn[Bs].d(e),e&&t(Fo),Je&&Je.d(e),e&&t(Io),e&&t(ya),x(Wn),e&&t(Or),e&&t(Ma),e&&t(Fr),x(Mn,e),e&&t(Ir),x(Un,e),e&&t(Lr),e&&t(Lo),e&&t(Nr),x(Bn,e),e&&t(Hr),x(Rn,e),e&&t(Wr),e&&t(No),e&&t(Mr),x(Ua,e)}}}const Fd={local:"translation",sections:[{local:"preparing-the-data",sections:[{local:"the-kde4-dataset",title:"The KDE4 dataset"},{local:"processing-the-data",title:"Processing the data"}],title:"Preparing the data"},{local:"finetuning-the-model-with-the-trainer-api",title:"Fine-tuning the model with the `Trainer` API"},{local:"finetuning-the-model-with-keras",sections:[{local:"data-collation",title:"Data collation"},{local:"metrics",title:"Metrics"},{local:"finetuning-the-model",title:"Fine-tuning the model"}],title:"Fine-tuning the model with Keras"},{local:"a-custom-training-loop",sections:[{local:"preparing-everything-for-training",title:"Preparing everything for training"},{local:"training-loop",title:"Training loop"}],title:"A custom training loop"},{local:"using-the-finetuned-model",title:"Using the fine-tuned model"}],title:"Translation"};function Id(B,h,b){let m="pt";return ud(()=>{const q=new URLSearchParams(window.location.search);b(0,m=q.get("fw")||"pt")}),[m]}class Rd extends id{constructor(h){super();pd(this,h,Id,Od,hd,{})}}export{Rd as default,Fd as metadata};
