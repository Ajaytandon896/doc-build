import{S as fr,i as dr,s as mr,e as n,k as p,w as m,t as o,M as ur,c as r,d as s,m as c,a as i,x as u,h as a,b as f,N as kr,F as t,g as h,y as k,q as w,o as v,B as b,v as wr,O as vr}from"../../chunks/vendor-e7c81d8a.js";import{T as br}from"../../chunks/Tip-989931f5.js";import{Y as pr}from"../../chunks/Youtube-365ea064.js";import{I as Lt}from"../../chunks/WidgetTextarea.svelte_svelte_type_style_lang-08e92eaf.js";import{C as R}from"../../chunks/CodeBlock-105940ae.js";import{D as gr}from"../../chunks/DocNotebookDropdown-928568b4.js";const{document:cr}=vr;function zr(Wt){let d,Y,g,E,U,_,me,M;return{c(){d=n("p"),Y=o("\u270F\uFE0F "),g=n("strong"),E=o("Try it out!"),U=o(" Load a tokenizer from the "),_=n("code"),me=o("bert-base-cased"),M=o(" checkpoint and pass the same example to it. What are the main differences you can see between the cased and uncased versions of the tokenizer?")},l(F){d=r(F,"P",{});var $=i(d);Y=a($,"\u270F\uFE0F "),g=r($,"STRONG",{});var N=i(g);E=a(N,"Try it out!"),N.forEach(s),U=a($," Load a tokenizer from the "),_=r($,"CODE",{});var ue=i(_);me=a(ue,"bert-base-cased"),ue.forEach(s),M=a($," checkpoint and pass the same example to it. What are the main differences you can see between the cased and uncased versions of the tokenizer?"),$.forEach(s)},m(F,$){h(F,d,$),t(d,Y),t(d,g),t(g,E),t(d,U),t(d,_),t(_,me),t(d,M)},d(F){F&&s(d)}}}function _r(Wt){let d,Y,g,E,U,_,me,M,F,$,N,ue,He,Rs,Jt,K,Ya,Yt,q,Us,ut,Ms,Fs,kt,Gs,Ls,Kt,G,V,wt,ke,Ws,vt,Js,Vt,we,Xt,X,Ys,ve,Ks,Vs,Qt,H,Xs,bt,Qs,Zs,gt,eo,to,Zt,be,es,ge,ts,y,so,zt,oo,ao,_t,no,ro,$t,io,lo,ss,ze,os,_e,as,Q,ho,Et,po,co,ns,Z,rs,L,ee,yt,$e,fo,xt,mo,is,Ee,ls,te,uo,Be,ko,wo,hs,x,vo,Tt,bo,go,jt,zo,_o,Pt,$o,Eo,ps,ye,cs,xe,fs,B,yo,At,xo,To,Dt,jo,Po,ds,Oe,Ao,ms,Te,us,se,Do,St,So,Co,ks,je,ws,Ie,No,vs,Re,qo,bs,Pe,gs,Ae,zs,z,Ho,Ct,Bo,Oo,Nt,Io,Ro,qt,Uo,Mo,Ht,Fo,Go,_s,Ue,Lo,$s,W,oe,Bt,De,Wo,Ot,Jo,Es,T,Se,Yo,Ko,It,Vo,Xo,Me,Qo,Zo,ys,O,ea,Rt,ta,sa,Ut,oa,aa,xs,J,ae,Mt,Ce,na,Ft,ra,Ts,Fe,ia,js,ne,Gt,j,Ge,la,ha,Le,pa,ca,We,fa,da,Je,ma,ua,P,A,Ye,ka,wa,Ke,va,ba,Ve,ga,za,Xe,_a,$a,D,Qe,Ea,ya,Ze,xa,Ta,et,ja,Pa,tt,Aa,Da,S,st,Sa,Ca,ot,Na,qa,at,Ha,Ba,nt,Oa,Ia,C,rt,Ra,Ua,it,Ma,Fa,lt,Ga,La,ht,Wa,Ps,pt,Ja,As;return _=new Lt({}),N=new gr({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter6/section4.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter6/section4.ipynb"}]}}),ke=new Lt({}),we=new pr({props:{id:"4IIC2jI9CaU"}}),be=new R({props:{codee:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
print(type(tokenizer.backend_tokenizer)),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tokenizer.backend_tokenizer))`}}),ge=new R({props:{codee:"<class 'tokenizers.Tokenizer'>,",highlighted:'&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tokenizers.Tokenizer&#x27;</span>&gt;'}}),ze=new R({props:{codee:'print(tokenizer.backend_tokenizer.normalizer.normalize_str("H\xE9ll\xF2 h\xF4w are \xFC?")),',highlighted:'<span class="hljs-built_in">print</span>(tokenizer.backend_tokenizer.normalizer.normalize_str(<span class="hljs-string">&quot;H\xE9ll\xF2 h\xF4w are \xFC?&quot;</span>))'}}),_e=new R({props:{codee:"'hello how are u?',",highlighted:'<span class="hljs-string">&#x27;hello how are u?&#x27;</span>'}}),Z=new br({props:{$$slots:{default:[zr]},$$scope:{ctx:Wt}}}),$e=new Lt({}),Ee=new pr({props:{id:"grlLV8AIXug"}}),ye=new R({props:{codee:'tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str("Hello, how are  you?"),',highlighted:'tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)'}}),xe=new R({props:{codee:"[('Hello', (0, 5)), (',', (5, 6)), ('how', (7, 10)), ('are', (11, 14)), ('you', (16, 19)), ('?', (19, 20))],",highlighted:'[(<span class="hljs-string">&#x27;Hello&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)), (<span class="hljs-string">&#x27;,&#x27;</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;how&#x27;</span>, (<span class="hljs-number">7</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;are&#x27;</span>, (<span class="hljs-number">11</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;you&#x27;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">19</span>)), (<span class="hljs-string">&#x27;?&#x27;</span>, (<span class="hljs-number">19</span>, <span class="hljs-number">20</span>))]'}}),Te=new R({props:{codee:`tokenizer = AutoTokenizer.from_pretrained("gpt2")
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str("Hello, how are  you?"),`,highlighted:`tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)`}}),je=new R({props:{codee:`[('Hello', (0, 5)), (',', (5, 6)), ('\u0120how', (6, 10)), ('\u0120are', (10, 14)), ('\u0120', (14, 15)), ('\u0120you', (15, 19)),
 ('?', (19, 20))],`,highlighted:`[(<span class="hljs-string">&#x27;Hello&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)), (<span class="hljs-string">&#x27;,&#x27;</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;\u0120how&#x27;</span>, (<span class="hljs-number">6</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;\u0120are&#x27;</span>, (<span class="hljs-number">10</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;\u0120&#x27;</span>, (<span class="hljs-number">14</span>, <span class="hljs-number">15</span>)), (<span class="hljs-string">&#x27;\u0120you&#x27;</span>, (<span class="hljs-number">15</span>, <span class="hljs-number">19</span>)),
 (<span class="hljs-string">&#x27;?&#x27;</span>, (<span class="hljs-number">19</span>, <span class="hljs-number">20</span>))]`}}),Pe=new R({props:{codee:`tokenizer = AutoTokenizer.from_pretrained("t5-small")
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str("Hello, how are  you?"),`,highlighted:`tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;t5-small&quot;</span>)
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)`}}),Ae=new R({props:{codee:"[('\u2581Hello,', (0, 6)), ('\u2581how', (7, 10)), ('\u2581are', (11, 14)), ('\u2581you?', (16, 20))],",highlighted:'[(<span class="hljs-string">&#x27;\u2581Hello,&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;\u2581how&#x27;</span>, (<span class="hljs-number">7</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;\u2581are&#x27;</span>, (<span class="hljs-number">11</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;\u2581you?&#x27;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">20</span>))]'}}),De=new Lt({}),Ce=new Lt({}),{c(){d=n("meta"),Y=p(),g=n("h1"),E=n("a"),U=n("span"),m(_.$$.fragment),me=p(),M=n("span"),F=o("Normalization and pre-tokenization"),$=p(),m(N.$$.fragment),ue=p(),He=n("p"),Rs=o("Before we dive more deeply into the three most common subword tokenization algorithms used with Transformer models (Byte-Pair Encoding [BPE], WordPiece, and Unigram), we\u2019ll first take a look at the preprocessing that each tokenizer applies to text. Here\u2019s a high-level overview of the steps in the tokenization pipeline:"),Jt=p(),K=n("img"),Yt=p(),q=n("p"),Us=o("Before splitting a text into subtokens (according to its model), the tokenizer performs two steps: "),ut=n("em"),Ms=o("normalization"),Fs=o(" and "),kt=n("em"),Gs=o("pre-tokenization"),Ls=o("."),Kt=p(),G=n("h2"),V=n("a"),wt=n("span"),m(ke.$$.fragment),Ws=p(),vt=n("span"),Js=o("Normalization"),Vt=p(),m(we.$$.fragment),Xt=p(),X=n("p"),Ys=o("The normalization step involves some general cleanup, such as removing needless whitespace, lowercasing, and/or removing accents. If you\u2019re familiar with "),ve=n("a"),Ks=o("Unicode normalization"),Vs=o(" (such as NFC or NFKC), this is also something the tokenizer may apply."),Qt=p(),H=n("p"),Xs=o("The \u{1F917} Transformers "),bt=n("code"),Qs=o("tokenizer"),Zs=o(" has an attribute called "),gt=n("code"),eo=o("backend_tokenizer"),to=o(" that provides access to the underlying tokenizer from the \u{1F917} Tokenizers library:"),Zt=p(),m(be.$$.fragment),es=p(),m(ge.$$.fragment),ts=p(),y=n("p"),so=o("The "),zt=n("code"),oo=o("normalizer"),ao=o(" attribute of the "),_t=n("code"),no=o("tokenizer"),ro=o(" object has a "),$t=n("code"),io=o("normalize_str()"),lo=o(" method that we can use to see how the normalization is performed:"),ss=p(),m(ze.$$.fragment),os=p(),m(_e.$$.fragment),as=p(),Q=n("p"),ho=o("In this example, since we picked the "),Et=n("code"),po=o("bert-base-uncased"),co=o(" checkpoint, the normalization applied lowercasing and removed the accents."),ns=p(),m(Z.$$.fragment),rs=p(),L=n("h2"),ee=n("a"),yt=n("span"),m($e.$$.fragment),fo=p(),xt=n("span"),mo=o("Pre-tokenization"),is=p(),m(Ee.$$.fragment),ls=p(),te=n("p"),uo=o("As we will see in the next sections, a tokenizer cannot be trained on raw text alone. Instead, we first need to split the texts into small entities, like words. That\u2019s where the pre-tokenization step comes in. As we saw in "),Be=n("a"),ko=o("Chapter 2"),wo=o(", a word-based tokenizer can simply split a raw text into words on whitespace and punctuation. Those words will be the boundaries of the subtokens the tokenizer can learn during its training."),hs=p(),x=n("p"),vo=o("To see how a fast tokenizer performs pre-tokenization, we can use the "),Tt=n("code"),bo=o("pre_tokenize_str()"),go=o(" method of the "),jt=n("code"),zo=o("pre_tokenizer"),_o=o(" attribute of the "),Pt=n("code"),$o=o("tokenizer"),Eo=o(" object:"),ps=p(),m(ye.$$.fragment),cs=p(),m(xe.$$.fragment),fs=p(),B=n("p"),yo=o("Notice how the tokenizer is already keeping track of the offsets, which is how it can give us the offset mapping we used in the previous section. Here the tokenizer ignores the two spaces and replaces them with just one, but the offset jumps between "),At=n("code"),xo=o("are"),To=o(" and "),Dt=n("code"),jo=o("you"),Po=o(" to account for that."),ds=p(),Oe=n("p"),Ao=o("Since we\u2019re using a BERT tokenizer, the pre-tokenization involves splitting on whitespace and punctuation. Other tokenizers can have different rules for this step. For example, if we use the GPT-2 tokenizer:"),ms=p(),m(Te.$$.fragment),us=p(),se=n("p"),Do=o("it will split on whitespace and punctuation as well, but it will keep the spaces and replace them with a "),St=n("code"),So=o("\u0120"),Co=o(" symbol, enabling it to recover the original spaces if we decode the tokens:"),ks=p(),m(je.$$.fragment),ws=p(),Ie=n("p"),No=o("Also note that unlike the BERT tokenizer, this tokenizer does not ignore the double space."),vs=p(),Re=n("p"),qo=o("For a last example, let\u2019s have a look at the T5 tokenizer, which is based on the SentencePiece algorithm:"),bs=p(),m(Pe.$$.fragment),gs=p(),m(Ae.$$.fragment),zs=p(),z=n("p"),Ho=o("Like the GPT-2 tokenizer, this one keeps spaces and replaces them with a specific token ("),Ct=n("code"),Bo=o("_"),Oo=o("), but the T5 tokenizer only splits on whitespace, not punctuation. Also note that it added a space by default at the beginning of the sentence (before "),Nt=n("code"),Io=o("Hello"),Ro=o(") and ignored the double space between "),qt=n("code"),Uo=o("are"),Mo=o(" and "),Ht=n("code"),Fo=o("you"),Go=o("."),_s=p(),Ue=n("p"),Lo=o("Now that we\u2019ve seen a little of how some different tokenizers process text, we can start to explore the underlying algorithms themselves. We\u2019ll begin with a quick look at the broadly widely applicable SentencePiece; then, over the next three sections, we\u2019ll examine how the three main algorithms used for subword tokenization work."),$s=p(),W=n("h2"),oe=n("a"),Bt=n("span"),m(De.$$.fragment),Wo=p(),Ot=n("span"),Jo=o("SentencePiece"),Es=p(),T=n("p"),Se=n("a"),Yo=o("SentencePiece"),Ko=o(" is a tokenization algorithm for the preprocessing of text that you can use with any of the models we will see in the next three sections. It considers the text as a sequence of Unicode characters, and replaces spaces with a special character, "),It=n("code"),Vo=o("\u2581"),Xo=o(". Used in conjunction with the Unigram algorithm (see "),Me=n("a"),Qo=o("section 7"),Zo=o("), it doesn\u2019t even require a pre-tokenization step, which is very useful for languages where the space character is not used (like Chinese or Japanese)."),ys=p(),O=n("p"),ea=o("The other main feature of SentencePiece is "),Rt=n("em"),ta=o("reversible tokenization"),sa=o(": since there is no special treatment of spaces, decoding the tokens is done simply by concatenating them and replacing the "),Ut=n("code"),oa=o("_"),aa=o("s with spaces \u2014 this results in the normalized text. As we saw earlier, the BERT tokenizer removes repeating spaces, so its tokenization is not reversible."),xs=p(),J=n("h2"),ae=n("a"),Mt=n("span"),m(Ce.$$.fragment),na=p(),Ft=n("span"),ra=o("Algorithm overview"),Ts=p(),Fe=n("p"),ia=o("In the following sections, we\u2019ll dive into the three main subword tokenization algorithms: BPE (used by GPT-2 and others), WordPiece (used for example by BERT), and Unigram (used by T5 and others). Before we get started, here\u2019s a quick overview of how they each work. Don\u2019t hesitate to come back to this table after reading each of the next sections if it doesn\u2019t make sense to you yet."),js=p(),ne=n("table"),Gt=n("thead"),j=n("tr"),Ge=n("th"),la=o("Model"),ha=p(),Le=n("th"),pa=o("BPE"),ca=p(),We=n("th"),fa=o("WordPiece"),da=p(),Je=n("th"),ma=o("Unigram"),ua=p(),P=n("tbody"),A=n("tr"),Ye=n("td"),ka=o("Training"),wa=p(),Ke=n("td"),va=o("Starts from a small vocabulary and learns rules to merge tokens"),ba=p(),Ve=n("td"),ga=o("Starts from a small vocabulary and learns rules to merge tokens"),za=p(),Xe=n("td"),_a=o("Starts from a large vocabulary and learns rules to remove tokens"),$a=p(),D=n("tr"),Qe=n("td"),Ea=o("Training step"),ya=p(),Ze=n("td"),xa=o("Merges the tokens corresponding to the most common pair"),Ta=p(),et=n("td"),ja=o("Merges the tokens corresponding to the pair with the best score based on the frequency of the pair, privileging pairs where each individual token is less frequent"),Pa=p(),tt=n("td"),Aa=o("Removes all the tokens in the vocabulary that will minimize the loss computed on the whole corpus"),Da=p(),S=n("tr"),st=n("td"),Sa=o("Learns"),Ca=p(),ot=n("td"),Na=o("Merge rules and a vocabulary"),qa=p(),at=n("td"),Ha=o("Just a vocabulary"),Ba=p(),nt=n("td"),Oa=o("A vocabulary with a score for each token"),Ia=p(),C=n("tr"),rt=n("td"),Ra=o("Encoding"),Ua=p(),it=n("td"),Ma=o("Splits a word into characters and applies the merges learned during training"),Fa=p(),lt=n("td"),Ga=o("Finds the longest subword starting from the beginning that is in the vocabulary, then does the same for the rest of the word"),La=p(),ht=n("td"),Wa=o("Finds the most likely split into tokens, using the scores learned during training"),Ps=p(),pt=n("p"),Ja=o("Now let\u2019s dive into BPE!"),this.h()},l(e){const l=ur('[data-svelte="svelte-1phssyn"]',cr.head);d=r(l,"META",{name:!0,content:!0}),l.forEach(s),Y=c(e),g=r(e,"H1",{class:!0});var Ne=i(g);E=r(Ne,"A",{id:!0,class:!0,href:!0});var Ka=i(E);U=r(Ka,"SPAN",{});var Va=i(U);u(_.$$.fragment,Va),Va.forEach(s),Ka.forEach(s),me=c(Ne),M=r(Ne,"SPAN",{});var Xa=i(M);F=a(Xa,"Normalization and pre-tokenization"),Xa.forEach(s),Ne.forEach(s),$=c(e),u(N.$$.fragment,e),ue=c(e),He=r(e,"P",{});var Qa=i(He);Rs=a(Qa,"Before we dive more deeply into the three most common subword tokenization algorithms used with Transformer models (Byte-Pair Encoding [BPE], WordPiece, and Unigram), we\u2019ll first take a look at the preprocessing that each tokenizer applies to text. Here\u2019s a high-level overview of the steps in the tokenization pipeline:"),Qa.forEach(s),Jt=c(e),K=r(e,"IMG",{src:!0,alt:!0,width:!0}),Yt=c(e),q=r(e,"P",{});var ct=i(q);Us=a(ct,"Before splitting a text into subtokens (according to its model), the tokenizer performs two steps: "),ut=r(ct,"EM",{});var Za=i(ut);Ms=a(Za,"normalization"),Za.forEach(s),Fs=a(ct," and "),kt=r(ct,"EM",{});var en=i(kt);Gs=a(en,"pre-tokenization"),en.forEach(s),Ls=a(ct,"."),ct.forEach(s),Kt=c(e),G=r(e,"H2",{class:!0});var Ds=i(G);V=r(Ds,"A",{id:!0,class:!0,href:!0});var tn=i(V);wt=r(tn,"SPAN",{});var sn=i(wt);u(ke.$$.fragment,sn),sn.forEach(s),tn.forEach(s),Ws=c(Ds),vt=r(Ds,"SPAN",{});var on=i(vt);Js=a(on,"Normalization"),on.forEach(s),Ds.forEach(s),Vt=c(e),u(we.$$.fragment,e),Xt=c(e),X=r(e,"P",{});var Ss=i(X);Ys=a(Ss,"The normalization step involves some general cleanup, such as removing needless whitespace, lowercasing, and/or removing accents. If you\u2019re familiar with "),ve=r(Ss,"A",{href:!0,rel:!0});var an=i(ve);Ks=a(an,"Unicode normalization"),an.forEach(s),Vs=a(Ss," (such as NFC or NFKC), this is also something the tokenizer may apply."),Ss.forEach(s),Qt=c(e),H=r(e,"P",{});var ft=i(H);Xs=a(ft,"The \u{1F917} Transformers "),bt=r(ft,"CODE",{});var nn=i(bt);Qs=a(nn,"tokenizer"),nn.forEach(s),Zs=a(ft," has an attribute called "),gt=r(ft,"CODE",{});var rn=i(gt);eo=a(rn,"backend_tokenizer"),rn.forEach(s),to=a(ft," that provides access to the underlying tokenizer from the \u{1F917} Tokenizers library:"),ft.forEach(s),Zt=c(e),u(be.$$.fragment,e),es=c(e),u(ge.$$.fragment,e),ts=c(e),y=r(e,"P",{});var re=i(y);so=a(re,"The "),zt=r(re,"CODE",{});var ln=i(zt);oo=a(ln,"normalizer"),ln.forEach(s),ao=a(re," attribute of the "),_t=r(re,"CODE",{});var hn=i(_t);no=a(hn,"tokenizer"),hn.forEach(s),ro=a(re," object has a "),$t=r(re,"CODE",{});var pn=i($t);io=a(pn,"normalize_str()"),pn.forEach(s),lo=a(re," method that we can use to see how the normalization is performed:"),re.forEach(s),ss=c(e),u(ze.$$.fragment,e),os=c(e),u(_e.$$.fragment,e),as=c(e),Q=r(e,"P",{});var Cs=i(Q);ho=a(Cs,"In this example, since we picked the "),Et=r(Cs,"CODE",{});var cn=i(Et);po=a(cn,"bert-base-uncased"),cn.forEach(s),co=a(Cs," checkpoint, the normalization applied lowercasing and removed the accents."),Cs.forEach(s),ns=c(e),u(Z.$$.fragment,e),rs=c(e),L=r(e,"H2",{class:!0});var Ns=i(L);ee=r(Ns,"A",{id:!0,class:!0,href:!0});var fn=i(ee);yt=r(fn,"SPAN",{});var dn=i(yt);u($e.$$.fragment,dn),dn.forEach(s),fn.forEach(s),fo=c(Ns),xt=r(Ns,"SPAN",{});var mn=i(xt);mo=a(mn,"Pre-tokenization"),mn.forEach(s),Ns.forEach(s),is=c(e),u(Ee.$$.fragment,e),ls=c(e),te=r(e,"P",{});var qs=i(te);uo=a(qs,"As we will see in the next sections, a tokenizer cannot be trained on raw text alone. Instead, we first need to split the texts into small entities, like words. That\u2019s where the pre-tokenization step comes in. As we saw in "),Be=r(qs,"A",{href:!0});var un=i(Be);ko=a(un,"Chapter 2"),un.forEach(s),wo=a(qs,", a word-based tokenizer can simply split a raw text into words on whitespace and punctuation. Those words will be the boundaries of the subtokens the tokenizer can learn during its training."),qs.forEach(s),hs=c(e),x=r(e,"P",{});var ie=i(x);vo=a(ie,"To see how a fast tokenizer performs pre-tokenization, we can use the "),Tt=r(ie,"CODE",{});var kn=i(Tt);bo=a(kn,"pre_tokenize_str()"),kn.forEach(s),go=a(ie," method of the "),jt=r(ie,"CODE",{});var wn=i(jt);zo=a(wn,"pre_tokenizer"),wn.forEach(s),_o=a(ie," attribute of the "),Pt=r(ie,"CODE",{});var vn=i(Pt);$o=a(vn,"tokenizer"),vn.forEach(s),Eo=a(ie," object:"),ie.forEach(s),ps=c(e),u(ye.$$.fragment,e),cs=c(e),u(xe.$$.fragment,e),fs=c(e),B=r(e,"P",{});var dt=i(B);yo=a(dt,"Notice how the tokenizer is already keeping track of the offsets, which is how it can give us the offset mapping we used in the previous section. Here the tokenizer ignores the two spaces and replaces them with just one, but the offset jumps between "),At=r(dt,"CODE",{});var bn=i(At);xo=a(bn,"are"),bn.forEach(s),To=a(dt," and "),Dt=r(dt,"CODE",{});var gn=i(Dt);jo=a(gn,"you"),gn.forEach(s),Po=a(dt," to account for that."),dt.forEach(s),ds=c(e),Oe=r(e,"P",{});var zn=i(Oe);Ao=a(zn,"Since we\u2019re using a BERT tokenizer, the pre-tokenization involves splitting on whitespace and punctuation. Other tokenizers can have different rules for this step. For example, if we use the GPT-2 tokenizer:"),zn.forEach(s),ms=c(e),u(Te.$$.fragment,e),us=c(e),se=r(e,"P",{});var Hs=i(se);Do=a(Hs,"it will split on whitespace and punctuation as well, but it will keep the spaces and replace them with a "),St=r(Hs,"CODE",{});var _n=i(St);So=a(_n,"\u0120"),_n.forEach(s),Co=a(Hs," symbol, enabling it to recover the original spaces if we decode the tokens:"),Hs.forEach(s),ks=c(e),u(je.$$.fragment,e),ws=c(e),Ie=r(e,"P",{});var $n=i(Ie);No=a($n,"Also note that unlike the BERT tokenizer, this tokenizer does not ignore the double space."),$n.forEach(s),vs=c(e),Re=r(e,"P",{});var En=i(Re);qo=a(En,"For a last example, let\u2019s have a look at the T5 tokenizer, which is based on the SentencePiece algorithm:"),En.forEach(s),bs=c(e),u(Pe.$$.fragment,e),gs=c(e),u(Ae.$$.fragment,e),zs=c(e),z=r(e,"P",{});var I=i(z);Ho=a(I,"Like the GPT-2 tokenizer, this one keeps spaces and replaces them with a specific token ("),Ct=r(I,"CODE",{});var yn=i(Ct);Bo=a(yn,"_"),yn.forEach(s),Oo=a(I,"), but the T5 tokenizer only splits on whitespace, not punctuation. Also note that it added a space by default at the beginning of the sentence (before "),Nt=r(I,"CODE",{});var xn=i(Nt);Io=a(xn,"Hello"),xn.forEach(s),Ro=a(I,") and ignored the double space between "),qt=r(I,"CODE",{});var Tn=i(qt);Uo=a(Tn,"are"),Tn.forEach(s),Mo=a(I," and "),Ht=r(I,"CODE",{});var jn=i(Ht);Fo=a(jn,"you"),jn.forEach(s),Go=a(I,"."),I.forEach(s),_s=c(e),Ue=r(e,"P",{});var Pn=i(Ue);Lo=a(Pn,"Now that we\u2019ve seen a little of how some different tokenizers process text, we can start to explore the underlying algorithms themselves. We\u2019ll begin with a quick look at the broadly widely applicable SentencePiece; then, over the next three sections, we\u2019ll examine how the three main algorithms used for subword tokenization work."),Pn.forEach(s),$s=c(e),W=r(e,"H2",{class:!0});var Bs=i(W);oe=r(Bs,"A",{id:!0,class:!0,href:!0});var An=i(oe);Bt=r(An,"SPAN",{});var Dn=i(Bt);u(De.$$.fragment,Dn),Dn.forEach(s),An.forEach(s),Wo=c(Bs),Ot=r(Bs,"SPAN",{});var Sn=i(Ot);Jo=a(Sn,"SentencePiece"),Sn.forEach(s),Bs.forEach(s),Es=c(e),T=r(e,"P",{});var qe=i(T);Se=r(qe,"A",{href:!0,rel:!0});var Cn=i(Se);Yo=a(Cn,"SentencePiece"),Cn.forEach(s),Ko=a(qe," is a tokenization algorithm for the preprocessing of text that you can use with any of the models we will see in the next three sections. It considers the text as a sequence of Unicode characters, and replaces spaces with a special character, "),It=r(qe,"CODE",{});var Nn=i(It);Vo=a(Nn,"\u2581"),Nn.forEach(s),Xo=a(qe,". Used in conjunction with the Unigram algorithm (see "),Me=r(qe,"A",{href:!0});var qn=i(Me);Qo=a(qn,"section 7"),qn.forEach(s),Zo=a(qe,"), it doesn\u2019t even require a pre-tokenization step, which is very useful for languages where the space character is not used (like Chinese or Japanese)."),qe.forEach(s),ys=c(e),O=r(e,"P",{});var mt=i(O);ea=a(mt,"The other main feature of SentencePiece is "),Rt=r(mt,"EM",{});var Hn=i(Rt);ta=a(Hn,"reversible tokenization"),Hn.forEach(s),sa=a(mt,": since there is no special treatment of spaces, decoding the tokens is done simply by concatenating them and replacing the "),Ut=r(mt,"CODE",{});var Bn=i(Ut);oa=a(Bn,"_"),Bn.forEach(s),aa=a(mt,"s with spaces \u2014 this results in the normalized text. As we saw earlier, the BERT tokenizer removes repeating spaces, so its tokenization is not reversible."),mt.forEach(s),xs=c(e),J=r(e,"H2",{class:!0});var Os=i(J);ae=r(Os,"A",{id:!0,class:!0,href:!0});var On=i(ae);Mt=r(On,"SPAN",{});var In=i(Mt);u(Ce.$$.fragment,In),In.forEach(s),On.forEach(s),na=c(Os),Ft=r(Os,"SPAN",{});var Rn=i(Ft);ra=a(Rn,"Algorithm overview"),Rn.forEach(s),Os.forEach(s),Ts=c(e),Fe=r(e,"P",{});var Un=i(Fe);ia=a(Un,"In the following sections, we\u2019ll dive into the three main subword tokenization algorithms: BPE (used by GPT-2 and others), WordPiece (used for example by BERT), and Unigram (used by T5 and others). Before we get started, here\u2019s a quick overview of how they each work. Don\u2019t hesitate to come back to this table after reading each of the next sections if it doesn\u2019t make sense to you yet."),Un.forEach(s),js=c(e),ne=r(e,"TABLE",{});var Is=i(ne);Gt=r(Is,"THEAD",{});var Mn=i(Gt);j=r(Mn,"TR",{});var le=i(j);Ge=r(le,"TH",{align:!0});var Fn=i(Ge);la=a(Fn,"Model"),Fn.forEach(s),ha=c(le),Le=r(le,"TH",{align:!0});var Gn=i(Le);pa=a(Gn,"BPE"),Gn.forEach(s),ca=c(le),We=r(le,"TH",{align:!0});var Ln=i(We);fa=a(Ln,"WordPiece"),Ln.forEach(s),da=c(le),Je=r(le,"TH",{align:!0});var Wn=i(Je);ma=a(Wn,"Unigram"),Wn.forEach(s),le.forEach(s),Mn.forEach(s),ua=c(Is),P=r(Is,"TBODY",{});var he=i(P);A=r(he,"TR",{});var pe=i(A);Ye=r(pe,"TD",{align:!0});var Jn=i(Ye);ka=a(Jn,"Training"),Jn.forEach(s),wa=c(pe),Ke=r(pe,"TD",{align:!0});var Yn=i(Ke);va=a(Yn,"Starts from a small vocabulary and learns rules to merge tokens"),Yn.forEach(s),ba=c(pe),Ve=r(pe,"TD",{align:!0});var Kn=i(Ve);ga=a(Kn,"Starts from a small vocabulary and learns rules to merge tokens"),Kn.forEach(s),za=c(pe),Xe=r(pe,"TD",{align:!0});var Vn=i(Xe);_a=a(Vn,"Starts from a large vocabulary and learns rules to remove tokens"),Vn.forEach(s),pe.forEach(s),$a=c(he),D=r(he,"TR",{});var ce=i(D);Qe=r(ce,"TD",{align:!0});var Xn=i(Qe);Ea=a(Xn,"Training step"),Xn.forEach(s),ya=c(ce),Ze=r(ce,"TD",{align:!0});var Qn=i(Ze);xa=a(Qn,"Merges the tokens corresponding to the most common pair"),Qn.forEach(s),Ta=c(ce),et=r(ce,"TD",{align:!0});var Zn=i(et);ja=a(Zn,"Merges the tokens corresponding to the pair with the best score based on the frequency of the pair, privileging pairs where each individual token is less frequent"),Zn.forEach(s),Pa=c(ce),tt=r(ce,"TD",{align:!0});var er=i(tt);Aa=a(er,"Removes all the tokens in the vocabulary that will minimize the loss computed on the whole corpus"),er.forEach(s),ce.forEach(s),Da=c(he),S=r(he,"TR",{});var fe=i(S);st=r(fe,"TD",{align:!0});var tr=i(st);Sa=a(tr,"Learns"),tr.forEach(s),Ca=c(fe),ot=r(fe,"TD",{align:!0});var sr=i(ot);Na=a(sr,"Merge rules and a vocabulary"),sr.forEach(s),qa=c(fe),at=r(fe,"TD",{align:!0});var or=i(at);Ha=a(or,"Just a vocabulary"),or.forEach(s),Ba=c(fe),nt=r(fe,"TD",{align:!0});var ar=i(nt);Oa=a(ar,"A vocabulary with a score for each token"),ar.forEach(s),fe.forEach(s),Ia=c(he),C=r(he,"TR",{});var de=i(C);rt=r(de,"TD",{align:!0});var nr=i(rt);Ra=a(nr,"Encoding"),nr.forEach(s),Ua=c(de),it=r(de,"TD",{align:!0});var rr=i(it);Ma=a(rr,"Splits a word into characters and applies the merges learned during training"),rr.forEach(s),Fa=c(de),lt=r(de,"TD",{align:!0});var ir=i(lt);Ga=a(ir,"Finds the longest subword starting from the beginning that is in the vocabulary, then does the same for the rest of the word"),ir.forEach(s),La=c(de),ht=r(de,"TD",{align:!0});var lr=i(ht);Wa=a(lr,"Finds the most likely split into tokens, using the scores learned during training"),lr.forEach(s),de.forEach(s),he.forEach(s),Is.forEach(s),Ps=c(e),pt=r(e,"P",{});var hr=i(pt);Ja=a(hr,"Now let\u2019s dive into BPE!"),hr.forEach(s),this.h()},h(){f(d,"name","hf:doc:metadata"),f(d,"content",JSON.stringify($r)),f(E,"id","normalization-and-pretokenization"),f(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(E,"href","#normalization-and-pretokenization"),f(g,"class","relative group"),kr(K.src,Ya="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter6/tokenization_pipeline.PNG")||f(K,"src",Ya),f(K,"alt","The tokenization pipeline."),f(K,"width","100%"),f(V,"id","normalization"),f(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(V,"href","#normalization"),f(G,"class","relative group"),f(ve,"href","http://www.unicode.org/reports/tr15/"),f(ve,"rel","nofollow"),f(ee,"id","pretokenization"),f(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ee,"href","#pretokenization"),f(L,"class","relative group"),f(Be,"href","/course/chapter2"),f(oe,"id","sentencepiece"),f(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(oe,"href","#sentencepiece"),f(W,"class","relative group"),f(Se,"href","https://github.com/google/sentencepiece"),f(Se,"rel","nofollow"),f(Me,"href","/course/chapter7/7"),f(ae,"id","algorithm-overview"),f(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ae,"href","#algorithm-overview"),f(J,"class","relative group"),f(Ge,"align","center"),f(Le,"align","center"),f(We,"align","center"),f(Je,"align","center"),f(Ye,"align","center"),f(Ke,"align","center"),f(Ve,"align","center"),f(Xe,"align","center"),f(Qe,"align","center"),f(Ze,"align","center"),f(et,"align","center"),f(tt,"align","center"),f(st,"align","center"),f(ot,"align","center"),f(at,"align","center"),f(nt,"align","center"),f(rt,"align","center"),f(it,"align","center"),f(lt,"align","center"),f(ht,"align","center")},m(e,l){t(cr.head,d),h(e,Y,l),h(e,g,l),t(g,E),t(E,U),k(_,U,null),t(g,me),t(g,M),t(M,F),h(e,$,l),k(N,e,l),h(e,ue,l),h(e,He,l),t(He,Rs),h(e,Jt,l),h(e,K,l),h(e,Yt,l),h(e,q,l),t(q,Us),t(q,ut),t(ut,Ms),t(q,Fs),t(q,kt),t(kt,Gs),t(q,Ls),h(e,Kt,l),h(e,G,l),t(G,V),t(V,wt),k(ke,wt,null),t(G,Ws),t(G,vt),t(vt,Js),h(e,Vt,l),k(we,e,l),h(e,Xt,l),h(e,X,l),t(X,Ys),t(X,ve),t(ve,Ks),t(X,Vs),h(e,Qt,l),h(e,H,l),t(H,Xs),t(H,bt),t(bt,Qs),t(H,Zs),t(H,gt),t(gt,eo),t(H,to),h(e,Zt,l),k(be,e,l),h(e,es,l),k(ge,e,l),h(e,ts,l),h(e,y,l),t(y,so),t(y,zt),t(zt,oo),t(y,ao),t(y,_t),t(_t,no),t(y,ro),t(y,$t),t($t,io),t(y,lo),h(e,ss,l),k(ze,e,l),h(e,os,l),k(_e,e,l),h(e,as,l),h(e,Q,l),t(Q,ho),t(Q,Et),t(Et,po),t(Q,co),h(e,ns,l),k(Z,e,l),h(e,rs,l),h(e,L,l),t(L,ee),t(ee,yt),k($e,yt,null),t(L,fo),t(L,xt),t(xt,mo),h(e,is,l),k(Ee,e,l),h(e,ls,l),h(e,te,l),t(te,uo),t(te,Be),t(Be,ko),t(te,wo),h(e,hs,l),h(e,x,l),t(x,vo),t(x,Tt),t(Tt,bo),t(x,go),t(x,jt),t(jt,zo),t(x,_o),t(x,Pt),t(Pt,$o),t(x,Eo),h(e,ps,l),k(ye,e,l),h(e,cs,l),k(xe,e,l),h(e,fs,l),h(e,B,l),t(B,yo),t(B,At),t(At,xo),t(B,To),t(B,Dt),t(Dt,jo),t(B,Po),h(e,ds,l),h(e,Oe,l),t(Oe,Ao),h(e,ms,l),k(Te,e,l),h(e,us,l),h(e,se,l),t(se,Do),t(se,St),t(St,So),t(se,Co),h(e,ks,l),k(je,e,l),h(e,ws,l),h(e,Ie,l),t(Ie,No),h(e,vs,l),h(e,Re,l),t(Re,qo),h(e,bs,l),k(Pe,e,l),h(e,gs,l),k(Ae,e,l),h(e,zs,l),h(e,z,l),t(z,Ho),t(z,Ct),t(Ct,Bo),t(z,Oo),t(z,Nt),t(Nt,Io),t(z,Ro),t(z,qt),t(qt,Uo),t(z,Mo),t(z,Ht),t(Ht,Fo),t(z,Go),h(e,_s,l),h(e,Ue,l),t(Ue,Lo),h(e,$s,l),h(e,W,l),t(W,oe),t(oe,Bt),k(De,Bt,null),t(W,Wo),t(W,Ot),t(Ot,Jo),h(e,Es,l),h(e,T,l),t(T,Se),t(Se,Yo),t(T,Ko),t(T,It),t(It,Vo),t(T,Xo),t(T,Me),t(Me,Qo),t(T,Zo),h(e,ys,l),h(e,O,l),t(O,ea),t(O,Rt),t(Rt,ta),t(O,sa),t(O,Ut),t(Ut,oa),t(O,aa),h(e,xs,l),h(e,J,l),t(J,ae),t(ae,Mt),k(Ce,Mt,null),t(J,na),t(J,Ft),t(Ft,ra),h(e,Ts,l),h(e,Fe,l),t(Fe,ia),h(e,js,l),h(e,ne,l),t(ne,Gt),t(Gt,j),t(j,Ge),t(Ge,la),t(j,ha),t(j,Le),t(Le,pa),t(j,ca),t(j,We),t(We,fa),t(j,da),t(j,Je),t(Je,ma),t(ne,ua),t(ne,P),t(P,A),t(A,Ye),t(Ye,ka),t(A,wa),t(A,Ke),t(Ke,va),t(A,ba),t(A,Ve),t(Ve,ga),t(A,za),t(A,Xe),t(Xe,_a),t(P,$a),t(P,D),t(D,Qe),t(Qe,Ea),t(D,ya),t(D,Ze),t(Ze,xa),t(D,Ta),t(D,et),t(et,ja),t(D,Pa),t(D,tt),t(tt,Aa),t(P,Da),t(P,S),t(S,st),t(st,Sa),t(S,Ca),t(S,ot),t(ot,Na),t(S,qa),t(S,at),t(at,Ha),t(S,Ba),t(S,nt),t(nt,Oa),t(P,Ia),t(P,C),t(C,rt),t(rt,Ra),t(C,Ua),t(C,it),t(it,Ma),t(C,Fa),t(C,lt),t(lt,Ga),t(C,La),t(C,ht),t(ht,Wa),h(e,Ps,l),h(e,pt,l),t(pt,Ja),As=!0},p(e,[l]){const Ne={};l&2&&(Ne.$$scope={dirty:l,ctx:e}),Z.$set(Ne)},i(e){As||(w(_.$$.fragment,e),w(N.$$.fragment,e),w(ke.$$.fragment,e),w(we.$$.fragment,e),w(be.$$.fragment,e),w(ge.$$.fragment,e),w(ze.$$.fragment,e),w(_e.$$.fragment,e),w(Z.$$.fragment,e),w($e.$$.fragment,e),w(Ee.$$.fragment,e),w(ye.$$.fragment,e),w(xe.$$.fragment,e),w(Te.$$.fragment,e),w(je.$$.fragment,e),w(Pe.$$.fragment,e),w(Ae.$$.fragment,e),w(De.$$.fragment,e),w(Ce.$$.fragment,e),As=!0)},o(e){v(_.$$.fragment,e),v(N.$$.fragment,e),v(ke.$$.fragment,e),v(we.$$.fragment,e),v(be.$$.fragment,e),v(ge.$$.fragment,e),v(ze.$$.fragment,e),v(_e.$$.fragment,e),v(Z.$$.fragment,e),v($e.$$.fragment,e),v(Ee.$$.fragment,e),v(ye.$$.fragment,e),v(xe.$$.fragment,e),v(Te.$$.fragment,e),v(je.$$.fragment,e),v(Pe.$$.fragment,e),v(Ae.$$.fragment,e),v(De.$$.fragment,e),v(Ce.$$.fragment,e),As=!1},d(e){s(d),e&&s(Y),e&&s(g),b(_),e&&s($),b(N,e),e&&s(ue),e&&s(He),e&&s(Jt),e&&s(K),e&&s(Yt),e&&s(q),e&&s(Kt),e&&s(G),b(ke),e&&s(Vt),b(we,e),e&&s(Xt),e&&s(X),e&&s(Qt),e&&s(H),e&&s(Zt),b(be,e),e&&s(es),b(ge,e),e&&s(ts),e&&s(y),e&&s(ss),b(ze,e),e&&s(os),b(_e,e),e&&s(as),e&&s(Q),e&&s(ns),b(Z,e),e&&s(rs),e&&s(L),b($e),e&&s(is),b(Ee,e),e&&s(ls),e&&s(te),e&&s(hs),e&&s(x),e&&s(ps),b(ye,e),e&&s(cs),b(xe,e),e&&s(fs),e&&s(B),e&&s(ds),e&&s(Oe),e&&s(ms),b(Te,e),e&&s(us),e&&s(se),e&&s(ks),b(je,e),e&&s(ws),e&&s(Ie),e&&s(vs),e&&s(Re),e&&s(bs),b(Pe,e),e&&s(gs),b(Ae,e),e&&s(zs),e&&s(z),e&&s(_s),e&&s(Ue),e&&s($s),e&&s(W),b(De),e&&s(Es),e&&s(T),e&&s(ys),e&&s(O),e&&s(xs),e&&s(J),b(Ce),e&&s(Ts),e&&s(Fe),e&&s(js),e&&s(ne),e&&s(Ps),e&&s(pt)}}}const $r={local:"normalization-and-pretokenization",sections:[{local:"normalization",title:"Normalization"},{local:"pretokenization",title:"Pre-tokenization"},{local:"sentencepiece",title:"SentencePiece"},{local:"algorithm-overview",title:"Algorithm overview"}],title:"Normalization and pre-tokenization"};function Er(Wt){return wr(()=>{new URL(document.location).searchParams.get("fw")}),[]}class Dr extends fr{constructor(d){super();dr(this,d,Er,_r,mr,{})}}export{Dr as default,$r as metadata};
