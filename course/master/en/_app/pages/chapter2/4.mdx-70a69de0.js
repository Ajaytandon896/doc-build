import{S as kl,i as bl,s as vl,e as n,k as h,w as k,t as l,M as yl,c as r,d as t,m as f,x as b,a as i,h as p,b as d,N as Ar,F as o,g as a,y as v,o as c,p as $l,q as w,B as y,v as gl,O as _l,n as El}from"../../chunks/vendor-e7c81d8a.js";import{T as zl}from"../../chunks/Tip-989931f5.js";import{Y as Do}from"../../chunks/Youtube-365ea064.js";import{I as B}from"../../chunks/WidgetTextarea.svelte_svelte_type_style_lang-08e92eaf.js";import{C as I}from"../../chunks/CodeBlock-105940ae.js";import{D as wl}from"../../chunks/DocNotebookDropdown-928568b4.js";import{F as Tl}from"../../chunks/FrameworkSwitch-287292d8.js";const{document:cl}=_l;function xl(D){let u,$;return u=new wl({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section4_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section4_tf.ipynb"}]}}),{c(){k(u.$$.fragment)},l(m){b(u.$$.fragment,m)},m(m,E){v(u,m,E),$=!0},i(m){$||(w(u.$$.fragment,m),$=!0)},o(m){c(u.$$.fragment,m),$=!1},d(m){y(u,m)}}}function jl(D){let u,$;return u=new wl({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/chapter2/section4_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/chapter2/section4_pt.ipynb"}]}}),{c(){k(u.$$.fragment)},l(m){b(u.$$.fragment,m)},m(m,E){v(u,m,E),$=!0},i(m){$||(w(u.$$.fragment,m),$=!0)},o(m){c(u.$$.fragment,m),$=!1},d(m){y(u,m)}}}function Pl(D){let u,$,m,E,z,g,T,x;return{c(){u=n("p"),$=l("Similar to "),m=n("code"),E=l("TFAutoModel"),z=l(", the "),g=n("code"),T=l("AutoTokenizer"),x=l(" class will grab the proper tokenizer class in the library based on the checkpoint name, and can be used directly with any checkpoint:")},l(j){u=r(j,"P",{});var _=i(u);$=p(_,"Similar to "),m=r(_,"CODE",{});var M=i(m);E=p(M,"TFAutoModel"),M.forEach(t),z=p(_,", the "),g=r(_,"CODE",{});var C=i(g);T=p(C,"AutoTokenizer"),C.forEach(t),x=p(_," class will grab the proper tokenizer class in the library based on the checkpoint name, and can be used directly with any checkpoint:"),_.forEach(t)},m(j,_){a(j,u,_),o(u,$),o(u,m),o(m,E),o(u,z),o(u,g),o(g,T),o(u,x)},d(j){j&&t(u)}}}function Al(D){let u,$,m,E,z,g,T,x;return{c(){u=n("p"),$=l("Similar to "),m=n("code"),E=l("AutoModel"),z=l(", the "),g=n("code"),T=l("AutoTokenizer"),x=l(" class will grab the proper tokenizer class in the library based on the checkpoint name, and can be used directly with any checkpoint:")},l(j){u=r(j,"P",{});var _=i(u);$=p(_,"Similar to "),m=r(_,"CODE",{});var M=i(m);E=p(M,"AutoModel"),M.forEach(t),z=p(_,", the "),g=r(_,"CODE",{});var C=i(g);T=p(C,"AutoTokenizer"),C.forEach(t),x=p(_," class will grab the proper tokenizer class in the library based on the checkpoint name, and can be used directly with any checkpoint:"),_.forEach(t)},m(j,_){a(j,u,_),o(u,$),o(u,m),o(m,E),o(u,z),o(u,g),o(g,T),o(u,x)},d(j){j&&t(u)}}}function Il(D){let u,$,m,E,z;return{c(){u=n("p"),$=l("\u270F\uFE0F "),m=n("strong"),E=l("Try it out!"),z=l(" Replicate the two last steps (tokenization and conversion to input IDs) on the input sentences we used in section 2 (\u201CI\u2019ve been waiting for a HuggingFace course my whole life.\u201D and \u201CI hate this so much!\u201D). Check that you get the same input IDs we got earlier!")},l(g){u=r(g,"P",{});var T=i(u);$=p(T,"\u270F\uFE0F "),m=r(T,"STRONG",{});var x=i(m);E=p(x,"Try it out!"),x.forEach(t),z=p(T," Replicate the two last steps (tokenization and conversion to input IDs) on the input sentences we used in section 2 (\u201CI\u2019ve been waiting for a HuggingFace course my whole life.\u201D and \u201CI hate this so much!\u201D). Check that you get the same input IDs we got earlier!"),T.forEach(t)},m(g,T){a(g,u,T),o(u,$),o(u,m),o(m,E),o(u,z)},d(g){g&&t(u)}}}function Dl(D){let u,$,m,E,z,g,T,x,j,_,M,C,q,N,nt,ge,So,rt,ya,qo,it,$a,No,_e,Co,lt,ga,Ho,pt,_a,Lo,U,ee,Nt,Ee,Ea,Ct,za,Fo,ze,Oo,te,Ta,Ht,xa,ja,Bo,Te,xe,Ir,Mo,oe,Pa,Lt,Aa,Ia,Uo,je,Wo,Pe,Ro,ht,Da,Go,ft,Sa,Jo,ut,qa,Yo,Ae,Na,Ft,Ca,Ko,se,Ha,Ot,La,Fa,Vo,W,ae,Bt,Ie,Oa,Mt,Ba,Qo,De,Xo,dt,Ma,Zo,ne,Ut,Ua,Wa,Wt,Ra,es,mt,Ga,ts,Se,qe,Dr,os,ct,Ja,ss,wt,Ya,as,re,Ka,Rt,Va,Qa,ns,R,ie,Gt,Ne,Xa,Jt,Za,rs,Ce,is,kt,en,ls,bt,tn,ps,vt,on,hs,He,Le,Sr,fs,yt,sn,us,$t,an,ds,G,le,Yt,Fe,nn,Kt,rn,ms,gt,ln,cs,H,Vt,pn,hn,Qt,fn,un,Xt,dn,ws,_t,mn,ks,J,pe,Zt,Oe,cn,eo,wn,bs,P,kn,to,bn,vn,oo,yn,$n,so,gn,_n,ao,En,zn,vs,he,Tn,no,xn,jn,ys,Be,$s,Et,Me,gs,zt,Pn,_s,Ue,Es,We,zs,Tt,An,Ts,Re,xs,A,In,ro,Dn,Sn,xt,qn,Nn,io,Cn,Hn,lo,Ln,Fn,js,Y,fe,po,Ge,On,ho,Bn,Ps,Je,As,ue,Mn,fo,Un,Wn,Is,de,Rn,uo,Gn,Jn,Ds,L,Yn,mo,Kn,Vn,co,Qn,Xn,Ss,jt,Zn,qs,K,me,wo,Ye,er,ko,tr,Ns,ce,or,bo,sr,ar,Cs,Ke,Hs,Pt,nr,Ls,Ve,Fs,S,rr,vo,ir,lr,yo,pr,hr,$o,fr,ur,Os,V,we,go,Qe,dr,_o,mr,Bs,ke,cr,Eo,wr,kr,Ms,Xe,Us,Ze,Ws,At,br,Rs,be,Gs,Q,ve,zo,et,vr,To,yr,Js,X,xo,$r,gr,jo,_r,Er,Ys,tt,Ks,ot,Vs,ye,zr,Po,Tr,xr,Qs,It,jr,Xs;m=new Tl({props:{fw:D[0]}}),x=new B({});const qr=[jl,xl],st=[];function Nr(e,s){return e[0]==="pt"?0:1}q=Nr(D),N=st[q]=qr[q](D),ge=new Do({props:{id:"VFp38yj8h3A"}}),_e=new I({props:{codee:"Jim Henson was a puppeteer,",highlighted:'<span class="hljs-comment">Jim Henson was a puppeteer</span>'}}),Ee=new B({}),ze=new Do({props:{id:"nhJxYji1aho"}}),je=new I({props:{codee:`tokenized_text = "Jim Henson was a puppeteer".split()
print(tokenized_text),`,highlighted:`tokenized_text = <span class="hljs-string">&quot;Jim Henson was a puppeteer&quot;</span>.split()
<span class="hljs-built_in">print</span>(tokenized_text)`}}),Pe=new I({props:{codee:"['Jim', 'Henson', 'was', 'a', 'puppeteer'],",highlighted:'[<span class="hljs-string">&#x27;Jim&#x27;</span>, <span class="hljs-string">&#x27;Henson&#x27;</span>, <span class="hljs-string">&#x27;was&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;puppeteer&#x27;</span>]'}}),Ie=new B({}),De=new Do({props:{id:"ssLq_EK2jLE"}}),Ne=new B({}),Ce=new Do({props:{id:"zHvTiHr506c"}}),Fe=new B({}),Oe=new B({}),Be=new I({props:{codee:`from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-cased"),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer

tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}});function Cr(e,s){return e[0]==="pt"?Al:Pl}let Zs=Cr(D),Z=Zs(D);return Me=new I({props:{codee:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased"),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),Ue=new I({props:{codee:'tokenizer("Using a Transformer network is simple"),',highlighted:'tokenizer(<span class="hljs-string">&quot;Using a Transformer network is simple&quot;</span>)'}}),We=new I({props:{codee:`{'input_ids': [101, 7993, 170, 11303, 1200, 2443, 1110, 3014, 102],
 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0],
 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1]},`,highlighted:`{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">7993</span>, <span class="hljs-number">170</span>, <span class="hljs-number">11303</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">2443</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">3014</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),Re=new I({props:{codee:'tokenizer.save_pretrained("directory_on_my_computer"),',highlighted:'tokenizer.save_pretrained(<span class="hljs-string">&quot;directory_on_my_computer&quot;</span>)'}}),Ge=new B({}),Je=new Do({props:{id:"Yffk5aydLzg"}}),Ye=new B({}),Ke=new I({props:{codee:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")

sequence = "Using a Transformer network is simple"
tokens = tokenizer.tokenize(sequence)

print(tokens),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

sequence = <span class="hljs-string">&quot;Using a Transformer network is simple&quot;</span>
tokens = tokenizer.tokenize(sequence)

<span class="hljs-built_in">print</span>(tokens)`}}),Ve=new I({props:{codee:"['Using', 'a', 'transform', '##er', 'network', 'is', 'simple'],",highlighted:'[<span class="hljs-string">&#x27;Using&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;transform&#x27;</span>, <span class="hljs-string">&#x27;##er&#x27;</span>, <span class="hljs-string">&#x27;network&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;simple&#x27;</span>]'}}),Qe=new B({}),Xe=new I({props:{codee:`ids = tokenizer.convert_tokens_to_ids(tokens)

print(ids),`,highlighted:`ids = tokenizer.convert_tokens_to_ids(tokens)

<span class="hljs-built_in">print</span>(ids)`}}),Ze=new I({props:{codee:"[7993, 170, 11303, 1200, 2443, 1110, 3014],",highlighted:'[<span class="hljs-number">7993</span>, <span class="hljs-number">170</span>, <span class="hljs-number">11303</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">2443</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">3014</span>]'}}),be=new zl({props:{$$slots:{default:[Il]},$$scope:{ctx:D}}}),et=new B({}),tt=new I({props:{codee:`decoded_string = tokenizer.decode([7993, 170, 11303, 1200, 2443, 1110, 3014])
print(decoded_string),`,highlighted:`decoded_string = tokenizer.decode([<span class="hljs-number">7993</span>, <span class="hljs-number">170</span>, <span class="hljs-number">11303</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">2443</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">3014</span>])
<span class="hljs-built_in">print</span>(decoded_string)`}}),ot=new I({props:{codee:"'Using a Transformer network is simple',",highlighted:'<span class="hljs-string">&#x27;Using a Transformer network is simple&#x27;</span>'}}),{c(){u=n("meta"),$=h(),k(m.$$.fragment),E=h(),z=n("h1"),g=n("a"),T=n("span"),k(x.$$.fragment),j=h(),_=n("span"),M=l("Tokenizers"),C=h(),N.c(),nt=h(),k(ge.$$.fragment),So=h(),rt=n("p"),ya=l("Tokenizers are one of the core components of the NLP pipeline. They serve one purpose: to translate text into data that can be processed by the model. Models can only process numbers, so tokenizers need to convert our text inputs to numerical data. In this section, we\u2019ll explore exactly what happens in the tokenization pipeline."),qo=h(),it=n("p"),$a=l("In NLP tasks, the data that is generally processed is raw text. Here\u2019s an example of such text:"),No=h(),k(_e.$$.fragment),Co=h(),lt=n("p"),ga=l("However, models can only process numbers, so we need to find a way to convert the raw text to numbers. That\u2019s what the tokenizers do, and there are a lot of ways to go about this. The goal is to find the most meaningful representation \u2014 that is, the one that makes the most sense to the model \u2014 and, if possible, the smallest representation."),Ho=h(),pt=n("p"),_a=l("Let\u2019s take a look at some examples of tokenization algorithms, and try to answer some of the questions you may have about tokenization."),Lo=h(),U=n("h2"),ee=n("a"),Nt=n("span"),k(Ee.$$.fragment),Ea=h(),Ct=n("span"),za=l("Word-based"),Fo=h(),k(ze.$$.fragment),Oo=h(),te=n("p"),Ta=l("The first type of tokenizer that comes to mind is "),Ht=n("em"),xa=l("word-based"),ja=l(". It\u2019s generally very easy to set up and use with only a few rules, and it often yields decent results. For example, in the image below, the goal is to split the raw text into words and find a numerical representation for each of them:"),Bo=h(),Te=n("div"),xe=n("img"),Mo=h(),oe=n("p"),Pa=l("There are different ways to split the text. For example, we could could use whitespace to tokenize the text into words by applying Python\u2019s "),Lt=n("code"),Aa=l("split()"),Ia=l(" function:"),Uo=h(),k(je.$$.fragment),Wo=h(),k(Pe.$$.fragment),Ro=h(),ht=n("p"),Da=l("There are also variations of word tokenizers that have extra rules for punctuation. With this kind of tokenizer, we can end up with some pretty large \u201Cvocabularies,\u201D where a vocabulary is defined by the total number of independent tokens that we have in our corpus."),Go=h(),ft=n("p"),Sa=l("Each word gets assigned an ID, starting from 0 and going up to the size of the vocabulary. The model uses these IDs to identify each word."),Jo=h(),ut=n("p"),qa=l("If we want to completely cover a language with a word-based tokenizer, we\u2019ll need to have an identifier for each word in the language, which will generate a huge amount of tokens. For example, there are over 500,000 words in the English language, so to build a map from each word to an input ID we\u2019d need to keep track of that many IDs. Furthermore, words like \u201Cdog\u201D are represented differently from words like \u201Cdogs\u201D, and the model will initially have no way of knowing that \u201Cdog\u201D and \u201Cdogs\u201D are similar: it will identify the two words as unrelated. The same applies to other similar words, like \u201Crun\u201D and \u201Crunning\u201D, which the model will not see as being similar initially."),Yo=h(),Ae=n("p"),Na=l("Finally, we need a custom token to represent words that are not in our vocabulary. This is known as the \u201Cunknown\u201D token, often represented as \u201D[UNK]\u201D or \u201D"),Ft=n("unk"),Ca=l("\u201D. It\u2019s generally a bad sign if you see that the tokenizer is producing a lot of these tokens, as it wasn\u2019t able to retrieve a sensible representation of a word and you\u2019re losing information along the way. The goal when crafting the vocabulary is to do it in such a way that the tokenizer tokenizes as few words as possible into the unknown token."),Ko=h(),se=n("p"),Ha=l("One way to reduce the amount of unknown tokens is to go one level deeper, using a "),Ot=n("em"),La=l("character-based"),Fa=l(" tokenizer."),Vo=h(),W=n("h2"),ae=n("a"),Bt=n("span"),k(Ie.$$.fragment),Oa=h(),Mt=n("span"),Ba=l("Character-based"),Qo=h(),k(De.$$.fragment),Xo=h(),dt=n("p"),Ma=l("Character-based tokenizers split the text into characters, rather than words. This has two primary benefits:"),Zo=h(),ne=n("ul"),Ut=n("li"),Ua=l("The vocabulary is much smaller."),Wa=h(),Wt=n("li"),Ra=l("There are much fewer out-of-vocabulary (unknown) tokens, since every word can be built from characters."),es=h(),mt=n("p"),Ga=l("But here too some questions arise concerning spaces and punctuation:"),ts=h(),Se=n("div"),qe=n("img"),os=h(),ct=n("p"),Ja=l("This approach isn\u2019t perfect either. Since the representation is now based on characters rather than words, one could argue that, intuitively, it\u2019s less meaningful: each character doesn\u2019t mean a lot on its own, whereas that is the case with words. However, this again differs according to the language; in Chinese, for example, each character carries more information than a character in a Latin language."),ss=h(),wt=n("p"),Ya=l("Another thing to consider is that we\u2019ll end up with a very large amount of tokens to be processed by our model: whereas a word would only be a single token with a word-based tokenizer, it can easily turn into 10 or more tokens when converted into characters."),as=h(),re=n("p"),Ka=l("To get the best of both worlds, we can use a third technique that combines the two approaches: "),Rt=n("em"),Va=l("subword tokenization"),Qa=l("."),ns=h(),R=n("h2"),ie=n("a"),Gt=n("span"),k(Ne.$$.fragment),Xa=h(),Jt=n("span"),Za=l("Subword tokenization"),rs=h(),k(Ce.$$.fragment),is=h(),kt=n("p"),en=l("Subword tokenization algorithms rely on the principle that frequently used words should not be split into smaller subwords, but rare words should be decomposed into meaningful subwords."),ls=h(),bt=n("p"),tn=l("For instance, \u201Cannoyingly\u201D might be considered a rare word and could be decomposed into \u201Cannoying\u201D and \u201Cly\u201D. These are both likely to appear more frequently as standalone subwords, while at the same time the meaning of \u201Cannoyingly\u201D is kept by the composite meaning of \u201Cannoying\u201D and \u201Cly\u201D."),ps=h(),vt=n("p"),on=l("Here is an example showing how a subword tokenization algorithm would tokenize the sequence \u201CLet\u2019s do tokenization!\u201C:"),hs=h(),He=n("div"),Le=n("img"),fs=h(),yt=n("p"),sn=l("These subwords end up providing a lot of semantic meaning: for instance, in the example above \u201Ctokenization\u201D was split into \u201Ctoken\u201D and \u201Cization\u201D, two tokens that have a semantic meaning while being space-efficient (only two tokens are needed to represent a long word). This allows us to have relatively good coverage with small vocabularies, and close to no unknown tokens."),us=h(),$t=n("p"),an=l("This approach is especially useful in agglutinative languages such as Turkish, where you can form (almost) arbitrarily long complex words by stringing together subwords."),ds=h(),G=n("h3"),le=n("a"),Yt=n("span"),k(Fe.$$.fragment),nn=h(),Kt=n("span"),rn=l("And more!"),ms=h(),gt=n("p"),ln=l("Unsurprisingly, there are many more techniques out there. To name a few:"),cs=h(),H=n("ul"),Vt=n("li"),pn=l("Byte-level BPE, as used in GPT-2"),hn=h(),Qt=n("li"),fn=l("WordPiece, as used in BERT"),un=h(),Xt=n("li"),dn=l("SentencePiece or Unigram, as used in several multilingual models"),ws=h(),_t=n("p"),mn=l("You should now have sufficient knowledge of how tokenizers work to get started with the API."),ks=h(),J=n("h2"),pe=n("a"),Zt=n("span"),k(Oe.$$.fragment),cn=h(),eo=n("span"),wn=l("Loading and saving"),bs=h(),P=n("p"),kn=l("Loading and saving tokenizers is as simple as it is with models. Actually, it\u2019s based on the same two methods: "),to=n("code"),bn=l("from_pretrained()"),vn=l(" and "),oo=n("code"),yn=l("save_pretrained()"),$n=l(". These methods will load or save the algorithm used by the tokenizer (a bit like the "),so=n("em"),gn=l("architecture"),_n=l(" of the model) as well as its vocabulary (a bit like the "),ao=n("em"),En=l("weights"),zn=l(" of the model)."),vs=h(),he=n("p"),Tn=l("Loading the BERT tokenizer trained with the same checkpoint as BERT is done the same way as loading the model, except we use the "),no=n("code"),xn=l("BertTokenizer"),jn=l(" class:"),ys=h(),k(Be.$$.fragment),$s=h(),Z.c(),Et=h(),k(Me.$$.fragment),gs=h(),zt=n("p"),Pn=l("We can now use the tokenizer as shown in the previous section:"),_s=h(),k(Ue.$$.fragment),Es=h(),k(We.$$.fragment),zs=h(),Tt=n("p"),An=l("Saving a tokenizer is identical to saving a model:"),Ts=h(),k(Re.$$.fragment),xs=h(),A=n("p"),In=l("We\u2019ll talk more about "),ro=n("code"),Dn=l("token_type_ids"),Sn=l(" in "),xt=n("a"),qn=l("Chapter 3"),Nn=l(", and we\u2019ll explain the "),io=n("code"),Cn=l("attention_mask"),Hn=l(" key a little later. First, let\u2019s see how the "),lo=n("code"),Ln=l("input_ids"),Fn=l(" are generated. To do this, we\u2019ll need to look at the intermediate methods of the tokenizer."),js=h(),Y=n("h2"),fe=n("a"),po=n("span"),k(Ge.$$.fragment),On=h(),ho=n("span"),Bn=l("Encoding"),Ps=h(),k(Je.$$.fragment),As=h(),ue=n("p"),Mn=l("Translating text to numbers is known as "),fo=n("em"),Un=l("encoding"),Wn=l(". Encoding is done in a two-step process: the tokenization, followed by the conversion to input IDs."),Is=h(),de=n("p"),Rn=l("As we\u2019ve seen, the first step is to split the text into words (or parts of words, punctuation symbols, etc.), usually called "),uo=n("em"),Gn=l("tokens"),Jn=l(". There are multiple rules that can govern that process, which is why we need to instantiate the tokenizer using the name of the model, to make sure we use the same rules that were used when the model was pretrained."),Ds=h(),L=n("p"),Yn=l("The second step is to convert those tokens into numbers, so we can build a tensor out of them and feed them to the model. To do this, the tokenizer has a "),mo=n("em"),Kn=l("vocabulary"),Vn=l(", which is the part we download when we instantiate it with the "),co=n("code"),Qn=l("from_pretrained()"),Xn=l(" method. Again, we need to use the same vocabulary used when the model was pretrained."),Ss=h(),jt=n("p"),Zn=l("To get a better understanding of the two steps, we\u2019ll explore them separately. Note that we will use some methods that perform parts of the tokenization pipeline separately to show you the intermediate results of those steps, but in practice, you should call the tokenizer directly on your inputs (as shown in the section 2)."),qs=h(),K=n("h3"),me=n("a"),wo=n("span"),k(Ye.$$.fragment),er=h(),ko=n("span"),tr=l("Tokenization"),Ns=h(),ce=n("p"),or=l("The tokenization process is done by the "),bo=n("code"),sr=l("tokenize()"),ar=l(" method of the tokenizer:"),Cs=h(),k(Ke.$$.fragment),Hs=h(),Pt=n("p"),nr=l("The output of this method is a list of strings, or tokens:"),Ls=h(),k(Ve.$$.fragment),Fs=h(),S=n("p"),rr=l("This tokenizer is a subword tokenizer: it splits the words until it obtains tokens that can be represented by its vocabulary. That\u2019s the case here with "),vo=n("code"),ir=l("transformer"),lr=l(", which is split into two tokens: "),yo=n("code"),pr=l("transform"),hr=l(" and "),$o=n("code"),fr=l("##er"),ur=l("."),Os=h(),V=n("h3"),we=n("a"),go=n("span"),k(Qe.$$.fragment),dr=h(),_o=n("span"),mr=l("From tokens to input IDs"),Bs=h(),ke=n("p"),cr=l("The conversion to input IDs is handled by the "),Eo=n("code"),wr=l("convert_tokens_to_ids()"),kr=l(" tokenizer method:"),Ms=h(),k(Xe.$$.fragment),Us=h(),k(Ze.$$.fragment),Ws=h(),At=n("p"),br=l("These outputs, once converted to the appropriate framework tensor, can then be used as inputs to a model as seen earlier in this chapter."),Rs=h(),k(be.$$.fragment),Gs=h(),Q=n("h2"),ve=n("a"),zo=n("span"),k(et.$$.fragment),vr=h(),To=n("span"),yr=l("Decoding"),Js=h(),X=n("p"),xo=n("em"),$r=l("Decoding"),gr=l(" is going the other way around: from vocabulary indices, we want to get a string. This can be done with the "),jo=n("code"),_r=l("decode()"),Er=l(" method as follows:"),Ys=h(),k(tt.$$.fragment),Ks=h(),k(ot.$$.fragment),Vs=h(),ye=n("p"),zr=l("Note that the "),Po=n("code"),Tr=l("decode"),xr=l(" method not only converts the indices back to tokens, but also groups together the tokens that were part of the same words to produce a readable sentence. This behavior will be extremely useful when we use models that predict new text (either text generated from a prompt, or for sequence-to-sequence problems like translation or summarization)."),Qs=h(),It=n("p"),jr=l("By now you should understand the atomic operations a tokenizer can handle: tokenization, conversion to IDs, and converting IDs back to a string. However, we\u2019ve just scraped the tip of the iceberg. In the following section, we\u2019ll take our approach to its limits and take a look at how to overcome them."),this.h()},l(e){const s=yl('[data-svelte="svelte-1phssyn"]',cl.head);u=r(s,"META",{name:!0,content:!0}),s.forEach(t),$=f(e),b(m.$$.fragment,e),E=f(e),z=r(e,"H1",{class:!0});var at=i(z);g=r(at,"A",{id:!0,class:!0,href:!0});var Dt=i(g);T=r(Dt,"SPAN",{});var Ao=i(T);b(x.$$.fragment,Ao),Ao.forEach(t),Dt.forEach(t),j=f(at),_=r(at,"SPAN",{});var Hr=i(_);M=p(Hr,"Tokenizers"),Hr.forEach(t),at.forEach(t),C=f(e),N.l(e),nt=f(e),b(ge.$$.fragment,e),So=f(e),rt=r(e,"P",{});var Lr=i(rt);ya=p(Lr,"Tokenizers are one of the core components of the NLP pipeline. They serve one purpose: to translate text into data that can be processed by the model. Models can only process numbers, so tokenizers need to convert our text inputs to numerical data. In this section, we\u2019ll explore exactly what happens in the tokenization pipeline."),Lr.forEach(t),qo=f(e),it=r(e,"P",{});var Fr=i(it);$a=p(Fr,"In NLP tasks, the data that is generally processed is raw text. Here\u2019s an example of such text:"),Fr.forEach(t),No=f(e),b(_e.$$.fragment,e),Co=f(e),lt=r(e,"P",{});var Or=i(lt);ga=p(Or,"However, models can only process numbers, so we need to find a way to convert the raw text to numbers. That\u2019s what the tokenizers do, and there are a lot of ways to go about this. The goal is to find the most meaningful representation \u2014 that is, the one that makes the most sense to the model \u2014 and, if possible, the smallest representation."),Or.forEach(t),Ho=f(e),pt=r(e,"P",{});var Br=i(pt);_a=p(Br,"Let\u2019s take a look at some examples of tokenization algorithms, and try to answer some of the questions you may have about tokenization."),Br.forEach(t),Lo=f(e),U=r(e,"H2",{class:!0});var ea=i(U);ee=r(ea,"A",{id:!0,class:!0,href:!0});var Mr=i(ee);Nt=r(Mr,"SPAN",{});var Ur=i(Nt);b(Ee.$$.fragment,Ur),Ur.forEach(t),Mr.forEach(t),Ea=f(ea),Ct=r(ea,"SPAN",{});var Wr=i(Ct);za=p(Wr,"Word-based"),Wr.forEach(t),ea.forEach(t),Fo=f(e),b(ze.$$.fragment,e),Oo=f(e),te=r(e,"P",{});var ta=i(te);Ta=p(ta,"The first type of tokenizer that comes to mind is "),Ht=r(ta,"EM",{});var Rr=i(Ht);xa=p(Rr,"word-based"),Rr.forEach(t),ja=p(ta,". It\u2019s generally very easy to set up and use with only a few rules, and it often yields decent results. For example, in the image below, the goal is to split the raw text into words and find a numerical representation for each of them:"),ta.forEach(t),Bo=f(e),Te=r(e,"DIV",{class:!0});var Gr=i(Te);xe=r(Gr,"IMG",{src:!0,alt:!0,width:!0}),Gr.forEach(t),Mo=f(e),oe=r(e,"P",{});var oa=i(oe);Pa=p(oa,"There are different ways to split the text. For example, we could could use whitespace to tokenize the text into words by applying Python\u2019s "),Lt=r(oa,"CODE",{});var Jr=i(Lt);Aa=p(Jr,"split()"),Jr.forEach(t),Ia=p(oa," function:"),oa.forEach(t),Uo=f(e),b(je.$$.fragment,e),Wo=f(e),b(Pe.$$.fragment,e),Ro=f(e),ht=r(e,"P",{});var Yr=i(ht);Da=p(Yr,"There are also variations of word tokenizers that have extra rules for punctuation. With this kind of tokenizer, we can end up with some pretty large \u201Cvocabularies,\u201D where a vocabulary is defined by the total number of independent tokens that we have in our corpus."),Yr.forEach(t),Go=f(e),ft=r(e,"P",{});var Kr=i(ft);Sa=p(Kr,"Each word gets assigned an ID, starting from 0 and going up to the size of the vocabulary. The model uses these IDs to identify each word."),Kr.forEach(t),Jo=f(e),ut=r(e,"P",{});var Vr=i(ut);qa=p(Vr,"If we want to completely cover a language with a word-based tokenizer, we\u2019ll need to have an identifier for each word in the language, which will generate a huge amount of tokens. For example, there are over 500,000 words in the English language, so to build a map from each word to an input ID we\u2019d need to keep track of that many IDs. Furthermore, words like \u201Cdog\u201D are represented differently from words like \u201Cdogs\u201D, and the model will initially have no way of knowing that \u201Cdog\u201D and \u201Cdogs\u201D are similar: it will identify the two words as unrelated. The same applies to other similar words, like \u201Crun\u201D and \u201Crunning\u201D, which the model will not see as being similar initially."),Vr.forEach(t),Yo=f(e),Ae=r(e,"P",{});var Pr=i(Ae);Na=p(Pr,"Finally, we need a custom token to represent words that are not in our vocabulary. This is known as the \u201Cunknown\u201D token, often represented as \u201D[UNK]\u201D or \u201D"),Ft=r(Pr,"UNK",{});var Qr=i(Ft);Ca=p(Qr,"\u201D. It\u2019s generally a bad sign if you see that the tokenizer is producing a lot of these tokens, as it wasn\u2019t able to retrieve a sensible representation of a word and you\u2019re losing information along the way. The goal when crafting the vocabulary is to do it in such a way that the tokenizer tokenizes as few words as possible into the unknown token."),Qr.forEach(t),Pr.forEach(t),Ko=f(e),se=r(e,"P",{});var sa=i(se);Ha=p(sa,"One way to reduce the amount of unknown tokens is to go one level deeper, using a "),Ot=r(sa,"EM",{});var Xr=i(Ot);La=p(Xr,"character-based"),Xr.forEach(t),Fa=p(sa," tokenizer."),sa.forEach(t),Vo=f(e),W=r(e,"H2",{class:!0});var aa=i(W);ae=r(aa,"A",{id:!0,class:!0,href:!0});var Zr=i(ae);Bt=r(Zr,"SPAN",{});var ei=i(Bt);b(Ie.$$.fragment,ei),ei.forEach(t),Zr.forEach(t),Oa=f(aa),Mt=r(aa,"SPAN",{});var ti=i(Mt);Ba=p(ti,"Character-based"),ti.forEach(t),aa.forEach(t),Qo=f(e),b(De.$$.fragment,e),Xo=f(e),dt=r(e,"P",{});var oi=i(dt);Ma=p(oi,"Character-based tokenizers split the text into characters, rather than words. This has two primary benefits:"),oi.forEach(t),Zo=f(e),ne=r(e,"UL",{});var na=i(ne);Ut=r(na,"LI",{});var si=i(Ut);Ua=p(si,"The vocabulary is much smaller."),si.forEach(t),Wa=f(na),Wt=r(na,"LI",{});var ai=i(Wt);Ra=p(ai,"There are much fewer out-of-vocabulary (unknown) tokens, since every word can be built from characters."),ai.forEach(t),na.forEach(t),es=f(e),mt=r(e,"P",{});var ni=i(mt);Ga=p(ni,"But here too some questions arise concerning spaces and punctuation:"),ni.forEach(t),ts=f(e),Se=r(e,"DIV",{class:!0});var ri=i(Se);qe=r(ri,"IMG",{src:!0,alt:!0,width:!0}),ri.forEach(t),os=f(e),ct=r(e,"P",{});var ii=i(ct);Ja=p(ii,"This approach isn\u2019t perfect either. Since the representation is now based on characters rather than words, one could argue that, intuitively, it\u2019s less meaningful: each character doesn\u2019t mean a lot on its own, whereas that is the case with words. However, this again differs according to the language; in Chinese, for example, each character carries more information than a character in a Latin language."),ii.forEach(t),ss=f(e),wt=r(e,"P",{});var li=i(wt);Ya=p(li,"Another thing to consider is that we\u2019ll end up with a very large amount of tokens to be processed by our model: whereas a word would only be a single token with a word-based tokenizer, it can easily turn into 10 or more tokens when converted into characters."),li.forEach(t),as=f(e),re=r(e,"P",{});var ra=i(re);Ka=p(ra,"To get the best of both worlds, we can use a third technique that combines the two approaches: "),Rt=r(ra,"EM",{});var pi=i(Rt);Va=p(pi,"subword tokenization"),pi.forEach(t),Qa=p(ra,"."),ra.forEach(t),ns=f(e),R=r(e,"H2",{class:!0});var ia=i(R);ie=r(ia,"A",{id:!0,class:!0,href:!0});var hi=i(ie);Gt=r(hi,"SPAN",{});var fi=i(Gt);b(Ne.$$.fragment,fi),fi.forEach(t),hi.forEach(t),Xa=f(ia),Jt=r(ia,"SPAN",{});var ui=i(Jt);Za=p(ui,"Subword tokenization"),ui.forEach(t),ia.forEach(t),rs=f(e),b(Ce.$$.fragment,e),is=f(e),kt=r(e,"P",{});var di=i(kt);en=p(di,"Subword tokenization algorithms rely on the principle that frequently used words should not be split into smaller subwords, but rare words should be decomposed into meaningful subwords."),di.forEach(t),ls=f(e),bt=r(e,"P",{});var mi=i(bt);tn=p(mi,"For instance, \u201Cannoyingly\u201D might be considered a rare word and could be decomposed into \u201Cannoying\u201D and \u201Cly\u201D. These are both likely to appear more frequently as standalone subwords, while at the same time the meaning of \u201Cannoyingly\u201D is kept by the composite meaning of \u201Cannoying\u201D and \u201Cly\u201D."),mi.forEach(t),ps=f(e),vt=r(e,"P",{});var ci=i(vt);on=p(ci,"Here is an example showing how a subword tokenization algorithm would tokenize the sequence \u201CLet\u2019s do tokenization!\u201C:"),ci.forEach(t),hs=f(e),He=r(e,"DIV",{class:!0});var wi=i(He);Le=r(wi,"IMG",{src:!0,alt:!0,width:!0}),wi.forEach(t),fs=f(e),yt=r(e,"P",{});var ki=i(yt);sn=p(ki,"These subwords end up providing a lot of semantic meaning: for instance, in the example above \u201Ctokenization\u201D was split into \u201Ctoken\u201D and \u201Cization\u201D, two tokens that have a semantic meaning while being space-efficient (only two tokens are needed to represent a long word). This allows us to have relatively good coverage with small vocabularies, and close to no unknown tokens."),ki.forEach(t),us=f(e),$t=r(e,"P",{});var bi=i($t);an=p(bi,"This approach is especially useful in agglutinative languages such as Turkish, where you can form (almost) arbitrarily long complex words by stringing together subwords."),bi.forEach(t),ds=f(e),G=r(e,"H3",{class:!0});var la=i(G);le=r(la,"A",{id:!0,class:!0,href:!0});var vi=i(le);Yt=r(vi,"SPAN",{});var yi=i(Yt);b(Fe.$$.fragment,yi),yi.forEach(t),vi.forEach(t),nn=f(la),Kt=r(la,"SPAN",{});var $i=i(Kt);rn=p($i,"And more!"),$i.forEach(t),la.forEach(t),ms=f(e),gt=r(e,"P",{});var gi=i(gt);ln=p(gi,"Unsurprisingly, there are many more techniques out there. To name a few:"),gi.forEach(t),cs=f(e),H=r(e,"UL",{});var St=i(H);Vt=r(St,"LI",{});var _i=i(Vt);pn=p(_i,"Byte-level BPE, as used in GPT-2"),_i.forEach(t),hn=f(St),Qt=r(St,"LI",{});var Ei=i(Qt);fn=p(Ei,"WordPiece, as used in BERT"),Ei.forEach(t),un=f(St),Xt=r(St,"LI",{});var zi=i(Xt);dn=p(zi,"SentencePiece or Unigram, as used in several multilingual models"),zi.forEach(t),St.forEach(t),ws=f(e),_t=r(e,"P",{});var Ti=i(_t);mn=p(Ti,"You should now have sufficient knowledge of how tokenizers work to get started with the API."),Ti.forEach(t),ks=f(e),J=r(e,"H2",{class:!0});var pa=i(J);pe=r(pa,"A",{id:!0,class:!0,href:!0});var xi=i(pe);Zt=r(xi,"SPAN",{});var ji=i(Zt);b(Oe.$$.fragment,ji),ji.forEach(t),xi.forEach(t),cn=f(pa),eo=r(pa,"SPAN",{});var Pi=i(eo);wn=p(Pi,"Loading and saving"),Pi.forEach(t),pa.forEach(t),bs=f(e),P=r(e,"P",{});var F=i(P);kn=p(F,"Loading and saving tokenizers is as simple as it is with models. Actually, it\u2019s based on the same two methods: "),to=r(F,"CODE",{});var Ai=i(to);bn=p(Ai,"from_pretrained()"),Ai.forEach(t),vn=p(F," and "),oo=r(F,"CODE",{});var Ii=i(oo);yn=p(Ii,"save_pretrained()"),Ii.forEach(t),$n=p(F,". These methods will load or save the algorithm used by the tokenizer (a bit like the "),so=r(F,"EM",{});var Di=i(so);gn=p(Di,"architecture"),Di.forEach(t),_n=p(F," of the model) as well as its vocabulary (a bit like the "),ao=r(F,"EM",{});var Si=i(ao);En=p(Si,"weights"),Si.forEach(t),zn=p(F," of the model)."),F.forEach(t),vs=f(e),he=r(e,"P",{});var ha=i(he);Tn=p(ha,"Loading the BERT tokenizer trained with the same checkpoint as BERT is done the same way as loading the model, except we use the "),no=r(ha,"CODE",{});var qi=i(no);xn=p(qi,"BertTokenizer"),qi.forEach(t),jn=p(ha," class:"),ha.forEach(t),ys=f(e),b(Be.$$.fragment,e),$s=f(e),Z.l(e),Et=f(e),b(Me.$$.fragment,e),gs=f(e),zt=r(e,"P",{});var Ni=i(zt);Pn=p(Ni,"We can now use the tokenizer as shown in the previous section:"),Ni.forEach(t),_s=f(e),b(Ue.$$.fragment,e),Es=f(e),b(We.$$.fragment,e),zs=f(e),Tt=r(e,"P",{});var Ci=i(Tt);An=p(Ci,"Saving a tokenizer is identical to saving a model:"),Ci.forEach(t),Ts=f(e),b(Re.$$.fragment,e),xs=f(e),A=r(e,"P",{});var O=i(A);In=p(O,"We\u2019ll talk more about "),ro=r(O,"CODE",{});var Hi=i(ro);Dn=p(Hi,"token_type_ids"),Hi.forEach(t),Sn=p(O," in "),xt=r(O,"A",{href:!0});var Li=i(xt);qn=p(Li,"Chapter 3"),Li.forEach(t),Nn=p(O,", and we\u2019ll explain the "),io=r(O,"CODE",{});var Fi=i(io);Cn=p(Fi,"attention_mask"),Fi.forEach(t),Hn=p(O," key a little later. First, let\u2019s see how the "),lo=r(O,"CODE",{});var Oi=i(lo);Ln=p(Oi,"input_ids"),Oi.forEach(t),Fn=p(O," are generated. To do this, we\u2019ll need to look at the intermediate methods of the tokenizer."),O.forEach(t),js=f(e),Y=r(e,"H2",{class:!0});var fa=i(Y);fe=r(fa,"A",{id:!0,class:!0,href:!0});var Bi=i(fe);po=r(Bi,"SPAN",{});var Mi=i(po);b(Ge.$$.fragment,Mi),Mi.forEach(t),Bi.forEach(t),On=f(fa),ho=r(fa,"SPAN",{});var Ui=i(ho);Bn=p(Ui,"Encoding"),Ui.forEach(t),fa.forEach(t),Ps=f(e),b(Je.$$.fragment,e),As=f(e),ue=r(e,"P",{});var ua=i(ue);Mn=p(ua,"Translating text to numbers is known as "),fo=r(ua,"EM",{});var Wi=i(fo);Un=p(Wi,"encoding"),Wi.forEach(t),Wn=p(ua,". Encoding is done in a two-step process: the tokenization, followed by the conversion to input IDs."),ua.forEach(t),Is=f(e),de=r(e,"P",{});var da=i(de);Rn=p(da,"As we\u2019ve seen, the first step is to split the text into words (or parts of words, punctuation symbols, etc.), usually called "),uo=r(da,"EM",{});var Ri=i(uo);Gn=p(Ri,"tokens"),Ri.forEach(t),Jn=p(da,". There are multiple rules that can govern that process, which is why we need to instantiate the tokenizer using the name of the model, to make sure we use the same rules that were used when the model was pretrained."),da.forEach(t),Ds=f(e),L=r(e,"P",{});var qt=i(L);Yn=p(qt,"The second step is to convert those tokens into numbers, so we can build a tensor out of them and feed them to the model. To do this, the tokenizer has a "),mo=r(qt,"EM",{});var Gi=i(mo);Kn=p(Gi,"vocabulary"),Gi.forEach(t),Vn=p(qt,", which is the part we download when we instantiate it with the "),co=r(qt,"CODE",{});var Ji=i(co);Qn=p(Ji,"from_pretrained()"),Ji.forEach(t),Xn=p(qt," method. Again, we need to use the same vocabulary used when the model was pretrained."),qt.forEach(t),Ss=f(e),jt=r(e,"P",{});var Yi=i(jt);Zn=p(Yi,"To get a better understanding of the two steps, we\u2019ll explore them separately. Note that we will use some methods that perform parts of the tokenization pipeline separately to show you the intermediate results of those steps, but in practice, you should call the tokenizer directly on your inputs (as shown in the section 2)."),Yi.forEach(t),qs=f(e),K=r(e,"H3",{class:!0});var ma=i(K);me=r(ma,"A",{id:!0,class:!0,href:!0});var Ki=i(me);wo=r(Ki,"SPAN",{});var Vi=i(wo);b(Ye.$$.fragment,Vi),Vi.forEach(t),Ki.forEach(t),er=f(ma),ko=r(ma,"SPAN",{});var Qi=i(ko);tr=p(Qi,"Tokenization"),Qi.forEach(t),ma.forEach(t),Ns=f(e),ce=r(e,"P",{});var ca=i(ce);or=p(ca,"The tokenization process is done by the "),bo=r(ca,"CODE",{});var Xi=i(bo);sr=p(Xi,"tokenize()"),Xi.forEach(t),ar=p(ca," method of the tokenizer:"),ca.forEach(t),Cs=f(e),b(Ke.$$.fragment,e),Hs=f(e),Pt=r(e,"P",{});var Zi=i(Pt);nr=p(Zi,"The output of this method is a list of strings, or tokens:"),Zi.forEach(t),Ls=f(e),b(Ve.$$.fragment,e),Fs=f(e),S=r(e,"P",{});var $e=i(S);rr=p($e,"This tokenizer is a subword tokenizer: it splits the words until it obtains tokens that can be represented by its vocabulary. That\u2019s the case here with "),vo=r($e,"CODE",{});var el=i(vo);ir=p(el,"transformer"),el.forEach(t),lr=p($e,", which is split into two tokens: "),yo=r($e,"CODE",{});var tl=i(yo);pr=p(tl,"transform"),tl.forEach(t),hr=p($e," and "),$o=r($e,"CODE",{});var ol=i($o);fr=p(ol,"##er"),ol.forEach(t),ur=p($e,"."),$e.forEach(t),Os=f(e),V=r(e,"H3",{class:!0});var wa=i(V);we=r(wa,"A",{id:!0,class:!0,href:!0});var sl=i(we);go=r(sl,"SPAN",{});var al=i(go);b(Qe.$$.fragment,al),al.forEach(t),sl.forEach(t),dr=f(wa),_o=r(wa,"SPAN",{});var nl=i(_o);mr=p(nl,"From tokens to input IDs"),nl.forEach(t),wa.forEach(t),Bs=f(e),ke=r(e,"P",{});var ka=i(ke);cr=p(ka,"The conversion to input IDs is handled by the "),Eo=r(ka,"CODE",{});var rl=i(Eo);wr=p(rl,"convert_tokens_to_ids()"),rl.forEach(t),kr=p(ka," tokenizer method:"),ka.forEach(t),Ms=f(e),b(Xe.$$.fragment,e),Us=f(e),b(Ze.$$.fragment,e),Ws=f(e),At=r(e,"P",{});var il=i(At);br=p(il,"These outputs, once converted to the appropriate framework tensor, can then be used as inputs to a model as seen earlier in this chapter."),il.forEach(t),Rs=f(e),b(be.$$.fragment,e),Gs=f(e),Q=r(e,"H2",{class:!0});var ba=i(Q);ve=r(ba,"A",{id:!0,class:!0,href:!0});var ll=i(ve);zo=r(ll,"SPAN",{});var pl=i(zo);b(et.$$.fragment,pl),pl.forEach(t),ll.forEach(t),vr=f(ba),To=r(ba,"SPAN",{});var hl=i(To);yr=p(hl,"Decoding"),hl.forEach(t),ba.forEach(t),Js=f(e),X=r(e,"P",{});var Io=i(X);xo=r(Io,"EM",{});var fl=i(xo);$r=p(fl,"Decoding"),fl.forEach(t),gr=p(Io," is going the other way around: from vocabulary indices, we want to get a string. This can be done with the "),jo=r(Io,"CODE",{});var ul=i(jo);_r=p(ul,"decode()"),ul.forEach(t),Er=p(Io," method as follows:"),Io.forEach(t),Ys=f(e),b(tt.$$.fragment,e),Ks=f(e),b(ot.$$.fragment,e),Vs=f(e),ye=r(e,"P",{});var va=i(ye);zr=p(va,"Note that the "),Po=r(va,"CODE",{});var dl=i(Po);Tr=p(dl,"decode"),dl.forEach(t),xr=p(va," method not only converts the indices back to tokens, but also groups together the tokens that were part of the same words to produce a readable sentence. This behavior will be extremely useful when we use models that predict new text (either text generated from a prompt, or for sequence-to-sequence problems like translation or summarization)."),va.forEach(t),Qs=f(e),It=r(e,"P",{});var ml=i(It);jr=p(ml,"By now you should understand the atomic operations a tokenizer can handle: tokenization, conversion to IDs, and converting IDs back to a string. However, we\u2019ve just scraped the tip of the iceberg. In the following section, we\u2019ll take our approach to its limits and take a look at how to overcome them."),ml.forEach(t),this.h()},h(){d(u,"name","hf:doc:metadata"),d(u,"content",JSON.stringify(Sl)),d(g,"id","tokenizers"),d(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g,"href","#tokenizers"),d(z,"class","relative group"),d(ee,"id","wordbased"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#wordbased"),d(U,"class","relative group"),Ar(xe.src,Ir="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/word_based_tokenization.png")||d(xe,"src",Ir),d(xe,"alt","An example of word-based tokenization."),d(xe,"width","100%"),d(Te,"class","flex justify-center"),d(ae,"id","characterbased"),d(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ae,"href","#characterbased"),d(W,"class","relative group"),Ar(qe.src,Dr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/character_based_tokenization.png")||d(qe,"src",Dr),d(qe,"alt","An example of character-based tokenization."),d(qe,"width","100%"),d(Se,"class","flex justify-center"),d(ie,"id","subword-tokenization"),d(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ie,"href","#subword-tokenization"),d(R,"class","relative group"),Ar(Le.src,Sr="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter2/bpe_subword.png")||d(Le,"src",Sr),d(Le,"alt","A subword tokenization algorithm."),d(Le,"width","100%"),d(He,"class","flex justify-center"),d(le,"id","and-more"),d(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(le,"href","#and-more"),d(G,"class","relative group"),d(pe,"id","loading-and-saving"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#loading-and-saving"),d(J,"class","relative group"),d(xt,"href","/course/chapter3"),d(fe,"id","encoding"),d(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fe,"href","#encoding"),d(Y,"class","relative group"),d(me,"id","tokenization"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#tokenization"),d(K,"class","relative group"),d(we,"id","from-tokens-to-input-ids"),d(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(we,"href","#from-tokens-to-input-ids"),d(V,"class","relative group"),d(ve,"id","decoding"),d(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ve,"href","#decoding"),d(Q,"class","relative group")},m(e,s){o(cl.head,u),a(e,$,s),v(m,e,s),a(e,E,s),a(e,z,s),o(z,g),o(g,T),v(x,T,null),o(z,j),o(z,_),o(_,M),a(e,C,s),st[q].m(e,s),a(e,nt,s),v(ge,e,s),a(e,So,s),a(e,rt,s),o(rt,ya),a(e,qo,s),a(e,it,s),o(it,$a),a(e,No,s),v(_e,e,s),a(e,Co,s),a(e,lt,s),o(lt,ga),a(e,Ho,s),a(e,pt,s),o(pt,_a),a(e,Lo,s),a(e,U,s),o(U,ee),o(ee,Nt),v(Ee,Nt,null),o(U,Ea),o(U,Ct),o(Ct,za),a(e,Fo,s),v(ze,e,s),a(e,Oo,s),a(e,te,s),o(te,Ta),o(te,Ht),o(Ht,xa),o(te,ja),a(e,Bo,s),a(e,Te,s),o(Te,xe),a(e,Mo,s),a(e,oe,s),o(oe,Pa),o(oe,Lt),o(Lt,Aa),o(oe,Ia),a(e,Uo,s),v(je,e,s),a(e,Wo,s),v(Pe,e,s),a(e,Ro,s),a(e,ht,s),o(ht,Da),a(e,Go,s),a(e,ft,s),o(ft,Sa),a(e,Jo,s),a(e,ut,s),o(ut,qa),a(e,Yo,s),a(e,Ae,s),o(Ae,Na),o(Ae,Ft),o(Ft,Ca),a(e,Ko,s),a(e,se,s),o(se,Ha),o(se,Ot),o(Ot,La),o(se,Fa),a(e,Vo,s),a(e,W,s),o(W,ae),o(ae,Bt),v(Ie,Bt,null),o(W,Oa),o(W,Mt),o(Mt,Ba),a(e,Qo,s),v(De,e,s),a(e,Xo,s),a(e,dt,s),o(dt,Ma),a(e,Zo,s),a(e,ne,s),o(ne,Ut),o(Ut,Ua),o(ne,Wa),o(ne,Wt),o(Wt,Ra),a(e,es,s),a(e,mt,s),o(mt,Ga),a(e,ts,s),a(e,Se,s),o(Se,qe),a(e,os,s),a(e,ct,s),o(ct,Ja),a(e,ss,s),a(e,wt,s),o(wt,Ya),a(e,as,s),a(e,re,s),o(re,Ka),o(re,Rt),o(Rt,Va),o(re,Qa),a(e,ns,s),a(e,R,s),o(R,ie),o(ie,Gt),v(Ne,Gt,null),o(R,Xa),o(R,Jt),o(Jt,Za),a(e,rs,s),v(Ce,e,s),a(e,is,s),a(e,kt,s),o(kt,en),a(e,ls,s),a(e,bt,s),o(bt,tn),a(e,ps,s),a(e,vt,s),o(vt,on),a(e,hs,s),a(e,He,s),o(He,Le),a(e,fs,s),a(e,yt,s),o(yt,sn),a(e,us,s),a(e,$t,s),o($t,an),a(e,ds,s),a(e,G,s),o(G,le),o(le,Yt),v(Fe,Yt,null),o(G,nn),o(G,Kt),o(Kt,rn),a(e,ms,s),a(e,gt,s),o(gt,ln),a(e,cs,s),a(e,H,s),o(H,Vt),o(Vt,pn),o(H,hn),o(H,Qt),o(Qt,fn),o(H,un),o(H,Xt),o(Xt,dn),a(e,ws,s),a(e,_t,s),o(_t,mn),a(e,ks,s),a(e,J,s),o(J,pe),o(pe,Zt),v(Oe,Zt,null),o(J,cn),o(J,eo),o(eo,wn),a(e,bs,s),a(e,P,s),o(P,kn),o(P,to),o(to,bn),o(P,vn),o(P,oo),o(oo,yn),o(P,$n),o(P,so),o(so,gn),o(P,_n),o(P,ao),o(ao,En),o(P,zn),a(e,vs,s),a(e,he,s),o(he,Tn),o(he,no),o(no,xn),o(he,jn),a(e,ys,s),v(Be,e,s),a(e,$s,s),Z.m(e,s),a(e,Et,s),v(Me,e,s),a(e,gs,s),a(e,zt,s),o(zt,Pn),a(e,_s,s),v(Ue,e,s),a(e,Es,s),v(We,e,s),a(e,zs,s),a(e,Tt,s),o(Tt,An),a(e,Ts,s),v(Re,e,s),a(e,xs,s),a(e,A,s),o(A,In),o(A,ro),o(ro,Dn),o(A,Sn),o(A,xt),o(xt,qn),o(A,Nn),o(A,io),o(io,Cn),o(A,Hn),o(A,lo),o(lo,Ln),o(A,Fn),a(e,js,s),a(e,Y,s),o(Y,fe),o(fe,po),v(Ge,po,null),o(Y,On),o(Y,ho),o(ho,Bn),a(e,Ps,s),v(Je,e,s),a(e,As,s),a(e,ue,s),o(ue,Mn),o(ue,fo),o(fo,Un),o(ue,Wn),a(e,Is,s),a(e,de,s),o(de,Rn),o(de,uo),o(uo,Gn),o(de,Jn),a(e,Ds,s),a(e,L,s),o(L,Yn),o(L,mo),o(mo,Kn),o(L,Vn),o(L,co),o(co,Qn),o(L,Xn),a(e,Ss,s),a(e,jt,s),o(jt,Zn),a(e,qs,s),a(e,K,s),o(K,me),o(me,wo),v(Ye,wo,null),o(K,er),o(K,ko),o(ko,tr),a(e,Ns,s),a(e,ce,s),o(ce,or),o(ce,bo),o(bo,sr),o(ce,ar),a(e,Cs,s),v(Ke,e,s),a(e,Hs,s),a(e,Pt,s),o(Pt,nr),a(e,Ls,s),v(Ve,e,s),a(e,Fs,s),a(e,S,s),o(S,rr),o(S,vo),o(vo,ir),o(S,lr),o(S,yo),o(yo,pr),o(S,hr),o(S,$o),o($o,fr),o(S,ur),a(e,Os,s),a(e,V,s),o(V,we),o(we,go),v(Qe,go,null),o(V,dr),o(V,_o),o(_o,mr),a(e,Bs,s),a(e,ke,s),o(ke,cr),o(ke,Eo),o(Eo,wr),o(ke,kr),a(e,Ms,s),v(Xe,e,s),a(e,Us,s),v(Ze,e,s),a(e,Ws,s),a(e,At,s),o(At,br),a(e,Rs,s),v(be,e,s),a(e,Gs,s),a(e,Q,s),o(Q,ve),o(ve,zo),v(et,zo,null),o(Q,vr),o(Q,To),o(To,yr),a(e,Js,s),a(e,X,s),o(X,xo),o(xo,$r),o(X,gr),o(X,jo),o(jo,_r),o(X,Er),a(e,Ys,s),v(tt,e,s),a(e,Ks,s),v(ot,e,s),a(e,Vs,s),a(e,ye,s),o(ye,zr),o(ye,Po),o(Po,Tr),o(ye,xr),a(e,Qs,s),a(e,It,s),o(It,jr),Xs=!0},p(e,[s]){const at={};s&1&&(at.fw=e[0]),m.$set(at);let Dt=q;q=Nr(e),q!==Dt&&(El(),c(st[Dt],1,1,()=>{st[Dt]=null}),$l(),N=st[q],N||(N=st[q]=qr[q](e),N.c()),w(N,1),N.m(nt.parentNode,nt)),Zs!==(Zs=Cr(e))&&(Z.d(1),Z=Zs(e),Z&&(Z.c(),Z.m(Et.parentNode,Et)));const Ao={};s&2&&(Ao.$$scope={dirty:s,ctx:e}),be.$set(Ao)},i(e){Xs||(w(m.$$.fragment,e),w(x.$$.fragment,e),w(N),w(ge.$$.fragment,e),w(_e.$$.fragment,e),w(Ee.$$.fragment,e),w(ze.$$.fragment,e),w(je.$$.fragment,e),w(Pe.$$.fragment,e),w(Ie.$$.fragment,e),w(De.$$.fragment,e),w(Ne.$$.fragment,e),w(Ce.$$.fragment,e),w(Fe.$$.fragment,e),w(Oe.$$.fragment,e),w(Be.$$.fragment,e),w(Me.$$.fragment,e),w(Ue.$$.fragment,e),w(We.$$.fragment,e),w(Re.$$.fragment,e),w(Ge.$$.fragment,e),w(Je.$$.fragment,e),w(Ye.$$.fragment,e),w(Ke.$$.fragment,e),w(Ve.$$.fragment,e),w(Qe.$$.fragment,e),w(Xe.$$.fragment,e),w(Ze.$$.fragment,e),w(be.$$.fragment,e),w(et.$$.fragment,e),w(tt.$$.fragment,e),w(ot.$$.fragment,e),Xs=!0)},o(e){c(m.$$.fragment,e),c(x.$$.fragment,e),c(N),c(ge.$$.fragment,e),c(_e.$$.fragment,e),c(Ee.$$.fragment,e),c(ze.$$.fragment,e),c(je.$$.fragment,e),c(Pe.$$.fragment,e),c(Ie.$$.fragment,e),c(De.$$.fragment,e),c(Ne.$$.fragment,e),c(Ce.$$.fragment,e),c(Fe.$$.fragment,e),c(Oe.$$.fragment,e),c(Be.$$.fragment,e),c(Me.$$.fragment,e),c(Ue.$$.fragment,e),c(We.$$.fragment,e),c(Re.$$.fragment,e),c(Ge.$$.fragment,e),c(Je.$$.fragment,e),c(Ye.$$.fragment,e),c(Ke.$$.fragment,e),c(Ve.$$.fragment,e),c(Qe.$$.fragment,e),c(Xe.$$.fragment,e),c(Ze.$$.fragment,e),c(be.$$.fragment,e),c(et.$$.fragment,e),c(tt.$$.fragment,e),c(ot.$$.fragment,e),Xs=!1},d(e){t(u),e&&t($),y(m,e),e&&t(E),e&&t(z),y(x),e&&t(C),st[q].d(e),e&&t(nt),y(ge,e),e&&t(So),e&&t(rt),e&&t(qo),e&&t(it),e&&t(No),y(_e,e),e&&t(Co),e&&t(lt),e&&t(Ho),e&&t(pt),e&&t(Lo),e&&t(U),y(Ee),e&&t(Fo),y(ze,e),e&&t(Oo),e&&t(te),e&&t(Bo),e&&t(Te),e&&t(Mo),e&&t(oe),e&&t(Uo),y(je,e),e&&t(Wo),y(Pe,e),e&&t(Ro),e&&t(ht),e&&t(Go),e&&t(ft),e&&t(Jo),e&&t(ut),e&&t(Yo),e&&t(Ae),e&&t(Ko),e&&t(se),e&&t(Vo),e&&t(W),y(Ie),e&&t(Qo),y(De,e),e&&t(Xo),e&&t(dt),e&&t(Zo),e&&t(ne),e&&t(es),e&&t(mt),e&&t(ts),e&&t(Se),e&&t(os),e&&t(ct),e&&t(ss),e&&t(wt),e&&t(as),e&&t(re),e&&t(ns),e&&t(R),y(Ne),e&&t(rs),y(Ce,e),e&&t(is),e&&t(kt),e&&t(ls),e&&t(bt),e&&t(ps),e&&t(vt),e&&t(hs),e&&t(He),e&&t(fs),e&&t(yt),e&&t(us),e&&t($t),e&&t(ds),e&&t(G),y(Fe),e&&t(ms),e&&t(gt),e&&t(cs),e&&t(H),e&&t(ws),e&&t(_t),e&&t(ks),e&&t(J),y(Oe),e&&t(bs),e&&t(P),e&&t(vs),e&&t(he),e&&t(ys),y(Be,e),e&&t($s),Z.d(e),e&&t(Et),y(Me,e),e&&t(gs),e&&t(zt),e&&t(_s),y(Ue,e),e&&t(Es),y(We,e),e&&t(zs),e&&t(Tt),e&&t(Ts),y(Re,e),e&&t(xs),e&&t(A),e&&t(js),e&&t(Y),y(Ge),e&&t(Ps),y(Je,e),e&&t(As),e&&t(ue),e&&t(Is),e&&t(de),e&&t(Ds),e&&t(L),e&&t(Ss),e&&t(jt),e&&t(qs),e&&t(K),y(Ye),e&&t(Ns),e&&t(ce),e&&t(Cs),y(Ke,e),e&&t(Hs),e&&t(Pt),e&&t(Ls),y(Ve,e),e&&t(Fs),e&&t(S),e&&t(Os),e&&t(V),y(Qe),e&&t(Bs),e&&t(ke),e&&t(Ms),y(Xe,e),e&&t(Us),y(Ze,e),e&&t(Ws),e&&t(At),e&&t(Rs),y(be,e),e&&t(Gs),e&&t(Q),y(et),e&&t(Js),e&&t(X),e&&t(Ys),y(tt,e),e&&t(Ks),y(ot,e),e&&t(Vs),e&&t(ye),e&&t(Qs),e&&t(It)}}}const Sl={local:"tokenizers",sections:[{local:"wordbased",title:"Word-based"},{local:"characterbased",title:"Character-based"},{local:"subword-tokenization",sections:[{local:"and-more",title:"And more!"}],title:"Subword tokenization"},{local:"loading-and-saving",title:"Loading and saving"},{local:"encoding",sections:[{local:"tokenization",title:"Tokenization"},{local:"from-tokens-to-input-ids",title:"From tokens to input IDs"}],title:"Encoding"},{local:"decoding",title:"Decoding"}],title:"Tokenizers"};function ql(D,u,$){let m="pt";return gl(()=>{const E=new URL(document.location).searchParams;$(0,m=E.get("fw")||"pt")}),[m]}class Ml extends kl{constructor(u){super();bl(this,u,ql,Dl,vl,{})}}export{Ml as default,Sl as metadata};
