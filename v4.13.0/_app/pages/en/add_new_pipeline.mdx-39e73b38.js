import{S as sl,i as tl,s as al,e as l,k as d,w as ne,t as a,L as ol,c as n,d as t,m as c,a as r,x as re,h as o,b as f,J as e,g as i,y as pe,K as ll,q as ie,o as de,B as ce}from"../../chunks/vendor-e859c359.js";import{I as Qa}from"../../chunks/IconCopyLink-5fae3b20.js";import{C as Va}from"../../chunks/CodeBlock-ce4317c2.js";import"../../chunks/CopyButton-77addb3d.js";function nl(Bs){let j,ee,m,g,he,F,Fs,ue,Gs,ms,q,Rs,fe,Ks,Qs,me,Vs,Ws,_s,_,Zs,_e,et,st,we,tt,at,ye,ot,lt,ws,h,nt,ke,rt,pt,ve,it,dt,ge,ct,ht,Ee,ut,ft,be,mt,_t,ys,G,ks,se,wt,vs,O,je,yt,kt,qe,vt,gt,gs,E,Ce,Et,bt,De,jt,qt,Te,Ct,Dt,Es,P,Oe,Tt,Ot,Pe,Pt,$t,bs,b,$e,At,xt,Ae,St,It,xe,zt,Nt,js,u,Lt,Se,Ut,Ht,Ie,Mt,Yt,ze,Jt,Xt,Ne,Bt,Ft,qs,x,Gt,Le,Rt,Kt,Cs,R,Ds,w,Qt,Ue,Vt,Wt,He,Zt,ea,Me,sa,ta,Ts,K,Os,te,aa,Ps,$,S,Ye,Q,oa,Je,la,$s,C,na,Xe,ra,pa,Be,ia,da,As,A,I,Fe,V,ca,Ge,ha,xs,z,ua,Re,fa,ma,Ss,y,_a,Ke,wa,ya,Qe,ka,va,Ve,ga,Ea,Is,D,ba,We,ja,qa,Ze,Ca,Da,zs,N,Ta,es,Oa,Pa,Ns,k,L,ss,$a,Aa,ts,xa,Sa,Ia,U,as,za,Na,os,La,Ua,Ha,H,ls,Ma,Ya,ns,Ja,Xa,Ba,M,rs,Fa,Ga,ps,Ra,Ka,Ls;return F=new Qa({}),G=new Va({props:{code:`from transformers import Pipeline

class MyPipeline(Pipeline):
    def _sanitize_parameters(self, **kwargs):
        preprocess_kwargs = {}
        if "maybe_arg" in kwargs:
            preprocess_kwargs["maybe_arg"] = kwargs["maybe_arg"]
        return preprocess_kwargs, {}, {}

    def preprocess(self, inputs, maybe_arg=2):
        model_input = Tensor(....)
        return {"model_input": model_input}

    def _forward(self, model_inputs):
        # model_inputs == {"model_input": model_input}
        outputs = self.model(**model_inputs)
        # Maybe {"logits": Tensor(...)}
        return outputs

    def postprocess(self, model_outputs):
        best_class = model_outputs["logits"].softmax(-1)
        return best_class,`,highlighted:`from transformers import Pipeline

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPipeline</span>(<span class="hljs-title">Pipeline</span>):</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_sanitize_parameters</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, **kwargs)</span></span>:
        preprocess_kwargs = {}
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;maybe_arg&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-symbol">kwargs:</span>
            preprocess_kwargs[<span class="hljs-string">&quot;maybe_arg&quot;</span>] = kwargs[<span class="hljs-string">&quot;maybe_arg&quot;</span>]
        <span class="hljs-keyword">return</span> preprocess_kwargs, {}, {}

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, inputs, maybe_arg=<span class="hljs-number">2</span>)</span></span>:
        model_input = Tensor(....)
        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;model_input&quot;</span>: model_input}

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_forward</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, model_inputs)</span></span>:
        <span class="hljs-comment"># model_inputs == {&quot;model_input&quot;: model_input}</span>
        outputs = <span class="hljs-keyword">self</span>.model(**model_inputs)
        <span class="hljs-comment"># Maybe {&quot;logits&quot;: Tensor(...)}</span>
        <span class="hljs-keyword">return</span> outputs

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postprocess</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, model_outputs)</span></span>:
        best_class = model_outputs[<span class="hljs-string">&quot;logits&quot;</span>].softmax(-<span class="hljs-number">1</span>)
        <span class="hljs-keyword">return</span> best_class`}}),R=new Va({props:{code:`pipe = pipeline("my-new-task")
pipe("This is a test")

pipe("This is a test", top_k=2),`,highlighted:`&gt;&gt;&gt; <span class="hljs-keyword">pipe</span> = pipeline(<span class="hljs-string">&quot;my-new-task&quot;</span>)
&gt;&gt;&gt; <span class="hljs-keyword">pipe</span>(<span class="hljs-string">&quot;This is a test&quot;</span>)
[{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;1-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">8</span>}, {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;2-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">1</span>}, {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;3-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">05</span>}
{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;4-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">025</span>}, {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;5-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">025</span>}]

&gt;&gt;&gt; <span class="hljs-keyword">pipe</span>(<span class="hljs-string">&quot;This is a test&quot;</span>, top_k=<span class="hljs-number">2</span>)
[{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;1-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">8</span>}, {<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;2-star&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">0</span>.<span class="hljs-number">1</span>}]`}}),K=new Va({props:{code:`def postprocess(self, model_outputs, top_k=5):
    best_class = model_outputs["logits"].softmax(-1)
    # Add logic to handle top_k
    return best_class

def _sanitize_parameters(self, **kwargs):
    preprocess_kwargs = {}
    if "maybe_arg" in kwargs:
        preprocess_kwargs["maybe_arg"] = kwargs["maybe_arg"]

    postprocess_kwargs = {}
    if "top_k" in kwargs:
        preprocess_kwargs["top_k"] = kwargs["top_k"]
    return preprocess_kwargs, {}, postprocess_kwargs,`,highlighted:`<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postprocess</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, model_outputs, top_k=<span class="hljs-number">5</span>)</span></span>:
    best_class = model_outputs[<span class="hljs-string">&quot;logits&quot;</span>].softmax(-<span class="hljs-number">1</span>)
    <span class="hljs-comment"># Add logic to handle top_k</span>
    <span class="hljs-keyword">return</span> best_class

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_sanitize_parameters</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, **kwargs)</span></span>:
    preprocess_kwargs = {}
    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;maybe_arg&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-symbol">kwargs:</span>
        preprocess_kwargs[<span class="hljs-string">&quot;maybe_arg&quot;</span>] = kwargs[<span class="hljs-string">&quot;maybe_arg&quot;</span>]

    postprocess_kwargs = {}
    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;top_k&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-symbol">kwargs:</span>
        preprocess_kwargs[<span class="hljs-string">&quot;top_k&quot;</span>] = kwargs[<span class="hljs-string">&quot;top_k&quot;</span>]
    <span class="hljs-keyword">return</span> preprocess_kwargs, {}, postprocess_kwargs`}}),Q=new Qa({}),V=new Qa({}),{c(){j=l("meta"),ee=d(),m=l("h1"),g=l("a"),he=l("span"),ne(F.$$.fragment),Fs=d(),ue=l("span"),Gs=a("How to add a pipeline to \u{1F917} Transformers?"),ms=d(),q=l("p"),Rs=a(`First and foremost, you need to decide the raw entries the pipeline will be able to take. It can be strings, raw bytes,
dictionaries or whatever seems to be the most likely desired input. Try to keep these inputs as pure Python as possible
as it makes compatibility easier (even through other languages via JSON). Those will be the `),fe=l("code"),Ks=a("inputs"),Qs=a(` of the
pipeline (`),me=l("code"),Vs=a("preprocess"),Ws=a(")."),_s=d(),_=l("p"),Zs=a("Then define the "),_e=l("code"),et=a("outputs"),st=a(". Same policy as the "),we=l("code"),tt=a("inputs"),at=a(`. The simpler, the better. Those will be the outputs of
`),ye=l("code"),ot=a("postprocess"),lt=a(" method."),ws=d(),h=l("p"),nt=a("Start by inheriting the base class "),ke=l("code"),rt=a("Pipeline"),pt=a(". with the 4 methods needed to implement "),ve=l("code"),it=a("preprocess"),dt=a(`,
`),ge=l("code"),ct=a("_forward"),ht=a(", "),Ee=l("code"),ut=a("postprocess"),ft=a(" and "),be=l("code"),mt=a("_sanitize_parameters"),_t=a("."),ys=d(),ne(G.$$.fragment),ks=d(),se=l("p"),wt=a(`The structure of this breakdown is to support relatively seamless support for CPU/GPU, while supporting doing
pre/postprocessing on the CPU on different threads`),vs=d(),O=l("p"),je=l("code"),yt=a("preprocess"),kt=a(` will take the originally defined inputs, and turn them into something feedable to the model. It might
contain more information and is usually a `),qe=l("code"),vt=a("Dict"),gt=a("."),gs=d(),E=l("p"),Ce=l("code"),Et=a("_forward"),bt=a(" is the implementation detail and is not meant to be called directly. "),De=l("code"),jt=a("forward"),qt=a(` is the preferred
called method as it contains safeguards to make sure everything is working on the expected device. If anything is
linked to a real model it belongs in the `),Te=l("code"),Ct=a("_forward"),Dt=a(" method, anything else is in the preprocess/postprocess."),Es=d(),P=l("p"),Oe=l("code"),Tt=a("postprocess"),Ot=a(" methods will take the output of "),Pe=l("code"),Pt=a("_forward"),$t=a(` and turn it into the final output that were decided
earlier.`),bs=d(),b=l("p"),$e=l("code"),At=a("_sanitize_parameters"),xt=a(` exists to allow users to pass any parameters whenever they wish, be it at initialization
time `),Ae=l("code"),St=a("pipeline(...., maybe_arg=4)"),It=a(" or at call time "),xe=l("code"),zt=a("pipe = pipeline(...); output = pipe(...., maybe_arg=4)"),Nt=a("."),js=d(),u=l("p"),Lt=a("The returns of "),Se=l("code"),Ut=a("_sanitize_parameters"),Ht=a(" are the 3 dicts of kwargs that will be passed directly to "),Ie=l("code"),Mt=a("preprocess"),Yt=a(`,
`),ze=l("code"),Jt=a("_forward"),Xt=a(" and "),Ne=l("code"),Bt=a("postprocess"),Ft=a(`. Don\u2019t fill anything if the caller didn\u2019t call with any extra parameter. That
allows to keep the default arguments in the function definition which is always more \u201Cnatural\u201D.`),qs=d(),x=l("p"),Gt=a("A classic example would be a "),Le=l("code"),Rt=a("top_k"),Kt=a(" argument in the post processing in classification tasks."),Cs=d(),ne(R.$$.fragment),Ds=d(),w=l("p"),Qt=a("In order to achieve that, we\u2019ll update our "),Ue=l("code"),Vt=a("postprocess"),Wt=a(" method with a default parameter to "),He=l("code"),Zt=a("5"),ea=a(`. and edit
`),Me=l("code"),sa=a("_sanitize_parameters"),ta=a(" to allow this new parameter."),Ts=d(),ne(K.$$.fragment),Os=d(),te=l("p"),aa=a(`Try to keep the inputs/outputs very simple and ideally JSON-serializable as it makes the pipeline usage very easy
without requiring users to understand new kind of objects. It\u2019s also relatively common to support many different types
of arguments for ease of use (audio files, can be filenames, URLs or pure bytes)`),Ps=d(),$=l("h2"),S=l("a"),Ye=l("span"),ne(Q.$$.fragment),oa=d(),Je=l("span"),la=a("Adding it to the list of supported tasks"),$s=d(),C=l("p"),na=a("Go to "),Xe=l("code"),ra=a("src/transformers/pipelines/__init__.py"),pa=a(" and fill in "),Be=l("code"),ia=a("SUPPORTED_TASKS"),da=a(` with your newly created pipeline.
If possible it should provide a default model.`),As=d(),A=l("h2"),I=l("a"),Fe=l("span"),ne(V.$$.fragment),ca=d(),Ge=l("span"),ha=a("Adding tests"),xs=d(),z=l("p"),ua=a("Create a new file "),Re=l("code"),fa=a("tests/test_pipelines_MY_PIPELINE.py"),ma=a(" with example with the other tests."),Ss=d(),y=l("p"),_a=a("The "),Ke=l("code"),wa=a("run_pipeline_test"),ya=a(` function will be very generic and run on small random models on every possible
architecture as defined by `),Qe=l("code"),ka=a("model_mapping"),va=a(" and "),Ve=l("code"),ga=a("tf_model_mapping"),Ea=a("."),Is=d(),D=l("p"),ba=a(`This is very important to test future compatibility, meaning if someone adds a new model for
`),We=l("code"),ja=a("XXXForQuestionAnswering"),qa=a(` then the pipeline test will attempt to run on it. Because the models are random it\u2019s
impossible to check for actual values, that\u2019s why There is a helper `),Ze=l("code"),Ca=a("ANY"),Da=a(` that will simply attempt to match the
output of the pipeline TYPE.`),zs=d(),N=l("p"),Ta=a("You also "),es=l("em"),Oa=a("need"),Pa=a(" to implement 2 (ideally 4) tests."),Ns=d(),k=l("ul"),L=l("li"),ss=l("code"),$a=a("test_small_model_pt"),Aa=a(` : Define 1 small model for this pipeline (doesn\u2019t matter if the results don\u2019t make sense)
and test the pipeline outputs. The results should be the same as `),ts=l("code"),xa=a("test_small_model_tf"),Sa=a("."),Ia=d(),U=l("li"),as=l("code"),za=a("test_small_model_tf"),Na=a(` : Define 1 small model for this pipeline (doesn\u2019t matter if the results don\u2019t make sense)
and test the pipeline outputs. The results should be the same as `),os=l("code"),La=a("test_small_model_pt"),Ua=a("."),Ha=d(),H=l("li"),ls=l("code"),Ma=a("test_large_model_pt"),Ya=a(" ("),ns=l("code"),Ja=a("optional"),Xa=a(`): Tests the pipeline on a real pipeline where the results are supposed to
make sense. These tests are slow and should be marked as such. Here the goal is to showcase the pipeline and to make
sure there is no drift in future releases`),Ba=d(),M=l("li"),rs=l("code"),Fa=a("test_large_model_tf"),Ga=a(" ("),ps=l("code"),Ra=a("optional"),Ka=a(`): Tests the pipeline on a real pipeline where the results are supposed to
make sense. These tests are slow and should be marked as such. Here the goal is to showcase the pipeline and to make
sure there is no drift in future releases`),this.h()},l(s){const p=ol('[data-svelte="svelte-1phssyn"]',document.head);j=n(p,"META",{name:!0,content:!0}),p.forEach(t),ee=c(s),m=n(s,"H1",{class:!0});var Us=r(m);g=n(Us,"A",{id:!0,class:!0,href:!0});var Wa=r(g);he=n(Wa,"SPAN",{});var Za=r(he);re(F.$$.fragment,Za),Za.forEach(t),Wa.forEach(t),Fs=c(Us),ue=n(Us,"SPAN",{});var eo=r(ue);Gs=o(eo,"How to add a pipeline to \u{1F917} Transformers?"),eo.forEach(t),Us.forEach(t),ms=c(s),q=n(s,"P",{});var ae=r(q);Rs=o(ae,`First and foremost, you need to decide the raw entries the pipeline will be able to take. It can be strings, raw bytes,
dictionaries or whatever seems to be the most likely desired input. Try to keep these inputs as pure Python as possible
as it makes compatibility easier (even through other languages via JSON). Those will be the `),fe=n(ae,"CODE",{});var so=r(fe);Ks=o(so,"inputs"),so.forEach(t),Qs=o(ae,` of the
pipeline (`),me=n(ae,"CODE",{});var to=r(me);Vs=o(to,"preprocess"),to.forEach(t),Ws=o(ae,")."),ae.forEach(t),_s=c(s),_=n(s,"P",{});var Y=r(_);Zs=o(Y,"Then define the "),_e=n(Y,"CODE",{});var ao=r(_e);et=o(ao,"outputs"),ao.forEach(t),st=o(Y,". Same policy as the "),we=n(Y,"CODE",{});var oo=r(we);tt=o(oo,"inputs"),oo.forEach(t),at=o(Y,`. The simpler, the better. Those will be the outputs of
`),ye=n(Y,"CODE",{});var lo=r(ye);ot=o(lo,"postprocess"),lo.forEach(t),lt=o(Y," method."),Y.forEach(t),ws=c(s),h=n(s,"P",{});var v=r(h);nt=o(v,"Start by inheriting the base class "),ke=n(v,"CODE",{});var no=r(ke);rt=o(no,"Pipeline"),no.forEach(t),pt=o(v,". with the 4 methods needed to implement "),ve=n(v,"CODE",{});var ro=r(ve);it=o(ro,"preprocess"),ro.forEach(t),dt=o(v,`,
`),ge=n(v,"CODE",{});var po=r(ge);ct=o(po,"_forward"),po.forEach(t),ht=o(v,", "),Ee=n(v,"CODE",{});var io=r(Ee);ut=o(io,"postprocess"),io.forEach(t),ft=o(v," and "),be=n(v,"CODE",{});var co=r(be);mt=o(co,"_sanitize_parameters"),co.forEach(t),_t=o(v,"."),v.forEach(t),ys=c(s),re(G.$$.fragment,s),ks=c(s),se=n(s,"P",{});var ho=r(se);wt=o(ho,`The structure of this breakdown is to support relatively seamless support for CPU/GPU, while supporting doing
pre/postprocessing on the CPU on different threads`),ho.forEach(t),vs=c(s),O=n(s,"P",{});var is=r(O);je=n(is,"CODE",{});var uo=r(je);yt=o(uo,"preprocess"),uo.forEach(t),kt=o(is,` will take the originally defined inputs, and turn them into something feedable to the model. It might
contain more information and is usually a `),qe=n(is,"CODE",{});var fo=r(qe);vt=o(fo,"Dict"),fo.forEach(t),gt=o(is,"."),is.forEach(t),gs=c(s),E=n(s,"P",{});var W=r(E);Ce=n(W,"CODE",{});var mo=r(Ce);Et=o(mo,"_forward"),mo.forEach(t),bt=o(W," is the implementation detail and is not meant to be called directly. "),De=n(W,"CODE",{});var _o=r(De);jt=o(_o,"forward"),_o.forEach(t),qt=o(W,` is the preferred
called method as it contains safeguards to make sure everything is working on the expected device. If anything is
linked to a real model it belongs in the `),Te=n(W,"CODE",{});var wo=r(Te);Ct=o(wo,"_forward"),wo.forEach(t),Dt=o(W," method, anything else is in the preprocess/postprocess."),W.forEach(t),Es=c(s),P=n(s,"P",{});var ds=r(P);Oe=n(ds,"CODE",{});var yo=r(Oe);Tt=o(yo,"postprocess"),yo.forEach(t),Ot=o(ds," methods will take the output of "),Pe=n(ds,"CODE",{});var ko=r(Pe);Pt=o(ko,"_forward"),ko.forEach(t),$t=o(ds,` and turn it into the final output that were decided
earlier.`),ds.forEach(t),bs=c(s),b=n(s,"P",{});var Z=r(b);$e=n(Z,"CODE",{});var vo=r($e);At=o(vo,"_sanitize_parameters"),vo.forEach(t),xt=o(Z,` exists to allow users to pass any parameters whenever they wish, be it at initialization
time `),Ae=n(Z,"CODE",{});var go=r(Ae);St=o(go,"pipeline(...., maybe_arg=4)"),go.forEach(t),It=o(Z," or at call time "),xe=n(Z,"CODE",{});var Eo=r(xe);zt=o(Eo,"pipe = pipeline(...); output = pipe(...., maybe_arg=4)"),Eo.forEach(t),Nt=o(Z,"."),Z.forEach(t),js=c(s),u=n(s,"P",{});var T=r(u);Lt=o(T,"The returns of "),Se=n(T,"CODE",{});var bo=r(Se);Ut=o(bo,"_sanitize_parameters"),bo.forEach(t),Ht=o(T," are the 3 dicts of kwargs that will be passed directly to "),Ie=n(T,"CODE",{});var jo=r(Ie);Mt=o(jo,"preprocess"),jo.forEach(t),Yt=o(T,`,
`),ze=n(T,"CODE",{});var qo=r(ze);Jt=o(qo,"_forward"),qo.forEach(t),Xt=o(T," and "),Ne=n(T,"CODE",{});var Co=r(Ne);Bt=o(Co,"postprocess"),Co.forEach(t),Ft=o(T,`. Don\u2019t fill anything if the caller didn\u2019t call with any extra parameter. That
allows to keep the default arguments in the function definition which is always more \u201Cnatural\u201D.`),T.forEach(t),qs=c(s),x=n(s,"P",{});var Hs=r(x);Gt=o(Hs,"A classic example would be a "),Le=n(Hs,"CODE",{});var Do=r(Le);Rt=o(Do,"top_k"),Do.forEach(t),Kt=o(Hs," argument in the post processing in classification tasks."),Hs.forEach(t),Cs=c(s),re(R.$$.fragment,s),Ds=c(s),w=n(s,"P",{});var J=r(w);Qt=o(J,"In order to achieve that, we\u2019ll update our "),Ue=n(J,"CODE",{});var To=r(Ue);Vt=o(To,"postprocess"),To.forEach(t),Wt=o(J," method with a default parameter to "),He=n(J,"CODE",{});var Oo=r(He);Zt=o(Oo,"5"),Oo.forEach(t),ea=o(J,`. and edit
`),Me=n(J,"CODE",{});var Po=r(Me);sa=o(Po,"_sanitize_parameters"),Po.forEach(t),ta=o(J," to allow this new parameter."),J.forEach(t),Ts=c(s),re(K.$$.fragment,s),Os=c(s),te=n(s,"P",{});var $o=r(te);aa=o($o,`Try to keep the inputs/outputs very simple and ideally JSON-serializable as it makes the pipeline usage very easy
without requiring users to understand new kind of objects. It\u2019s also relatively common to support many different types
of arguments for ease of use (audio files, can be filenames, URLs or pure bytes)`),$o.forEach(t),Ps=c(s),$=n(s,"H2",{class:!0});var Ms=r($);S=n(Ms,"A",{id:!0,class:!0,href:!0});var Ao=r(S);Ye=n(Ao,"SPAN",{});var xo=r(Ye);re(Q.$$.fragment,xo),xo.forEach(t),Ao.forEach(t),oa=c(Ms),Je=n(Ms,"SPAN",{});var So=r(Je);la=o(So,"Adding it to the list of supported tasks"),So.forEach(t),Ms.forEach(t),$s=c(s),C=n(s,"P",{});var oe=r(C);na=o(oe,"Go to "),Xe=n(oe,"CODE",{});var Io=r(Xe);ra=o(Io,"src/transformers/pipelines/__init__.py"),Io.forEach(t),pa=o(oe," and fill in "),Be=n(oe,"CODE",{});var zo=r(Be);ia=o(zo,"SUPPORTED_TASKS"),zo.forEach(t),da=o(oe,` with your newly created pipeline.
If possible it should provide a default model.`),oe.forEach(t),As=c(s),A=n(s,"H2",{class:!0});var Ys=r(A);I=n(Ys,"A",{id:!0,class:!0,href:!0});var No=r(I);Fe=n(No,"SPAN",{});var Lo=r(Fe);re(V.$$.fragment,Lo),Lo.forEach(t),No.forEach(t),ca=c(Ys),Ge=n(Ys,"SPAN",{});var Uo=r(Ge);ha=o(Uo,"Adding tests"),Uo.forEach(t),Ys.forEach(t),xs=c(s),z=n(s,"P",{});var Js=r(z);ua=o(Js,"Create a new file "),Re=n(Js,"CODE",{});var Ho=r(Re);fa=o(Ho,"tests/test_pipelines_MY_PIPELINE.py"),Ho.forEach(t),ma=o(Js," with example with the other tests."),Js.forEach(t),Ss=c(s),y=n(s,"P",{});var X=r(y);_a=o(X,"The "),Ke=n(X,"CODE",{});var Mo=r(Ke);wa=o(Mo,"run_pipeline_test"),Mo.forEach(t),ya=o(X,` function will be very generic and run on small random models on every possible
architecture as defined by `),Qe=n(X,"CODE",{});var Yo=r(Qe);ka=o(Yo,"model_mapping"),Yo.forEach(t),va=o(X," and "),Ve=n(X,"CODE",{});var Jo=r(Ve);ga=o(Jo,"tf_model_mapping"),Jo.forEach(t),Ea=o(X,"."),X.forEach(t),Is=c(s),D=n(s,"P",{});var le=r(D);ba=o(le,`This is very important to test future compatibility, meaning if someone adds a new model for
`),We=n(le,"CODE",{});var Xo=r(We);ja=o(Xo,"XXXForQuestionAnswering"),Xo.forEach(t),qa=o(le,` then the pipeline test will attempt to run on it. Because the models are random it\u2019s
impossible to check for actual values, that\u2019s why There is a helper `),Ze=n(le,"CODE",{});var Bo=r(Ze);Ca=o(Bo,"ANY"),Bo.forEach(t),Da=o(le,` that will simply attempt to match the
output of the pipeline TYPE.`),le.forEach(t),zs=c(s),N=n(s,"P",{});var Xs=r(N);Ta=o(Xs,"You also "),es=n(Xs,"EM",{});var Fo=r(es);Oa=o(Fo,"need"),Fo.forEach(t),Pa=o(Xs," to implement 2 (ideally 4) tests."),Xs.forEach(t),Ns=c(s),k=n(s,"UL",{});var B=r(k);L=n(B,"LI",{});var cs=r(L);ss=n(cs,"CODE",{});var Go=r(ss);$a=o(Go,"test_small_model_pt"),Go.forEach(t),Aa=o(cs,` : Define 1 small model for this pipeline (doesn\u2019t matter if the results don\u2019t make sense)
and test the pipeline outputs. The results should be the same as `),ts=n(cs,"CODE",{});var Ro=r(ts);xa=o(Ro,"test_small_model_tf"),Ro.forEach(t),Sa=o(cs,"."),cs.forEach(t),Ia=c(B),U=n(B,"LI",{});var hs=r(U);as=n(hs,"CODE",{});var Ko=r(as);za=o(Ko,"test_small_model_tf"),Ko.forEach(t),Na=o(hs,` : Define 1 small model for this pipeline (doesn\u2019t matter if the results don\u2019t make sense)
and test the pipeline outputs. The results should be the same as `),os=n(hs,"CODE",{});var Qo=r(os);La=o(Qo,"test_small_model_pt"),Qo.forEach(t),Ua=o(hs,"."),hs.forEach(t),Ha=c(B),H=n(B,"LI",{});var us=r(H);ls=n(us,"CODE",{});var Vo=r(ls);Ma=o(Vo,"test_large_model_pt"),Vo.forEach(t),Ya=o(us," ("),ns=n(us,"CODE",{});var Wo=r(ns);Ja=o(Wo,"optional"),Wo.forEach(t),Xa=o(us,`): Tests the pipeline on a real pipeline where the results are supposed to
make sense. These tests are slow and should be marked as such. Here the goal is to showcase the pipeline and to make
sure there is no drift in future releases`),us.forEach(t),Ba=c(B),M=n(B,"LI",{});var fs=r(M);rs=n(fs,"CODE",{});var Zo=r(rs);Fa=o(Zo,"test_large_model_tf"),Zo.forEach(t),Ga=o(fs," ("),ps=n(fs,"CODE",{});var el=r(ps);Ra=o(el,"optional"),el.forEach(t),Ka=o(fs,`): Tests the pipeline on a real pipeline where the results are supposed to
make sense. These tests are slow and should be marked as such. Here the goal is to showcase the pipeline and to make
sure there is no drift in future releases`),fs.forEach(t),B.forEach(t),this.h()},h(){f(j,"name","hf:doc:metadata"),f(j,"content",JSON.stringify(rl)),f(g,"id","how-to-add-a-pipeline-to-transformers"),f(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(g,"href","#how-to-add-a-pipeline-to-transformers"),f(m,"class","relative group"),f(S,"id","adding-it-to-the-list-of-supported-tasks"),f(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(S,"href","#adding-it-to-the-list-of-supported-tasks"),f($,"class","relative group"),f(I,"id","adding-tests"),f(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(I,"href","#adding-tests"),f(A,"class","relative group")},m(s,p){e(document.head,j),i(s,ee,p),i(s,m,p),e(m,g),e(g,he),pe(F,he,null),e(m,Fs),e(m,ue),e(ue,Gs),i(s,ms,p),i(s,q,p),e(q,Rs),e(q,fe),e(fe,Ks),e(q,Qs),e(q,me),e(me,Vs),e(q,Ws),i(s,_s,p),i(s,_,p),e(_,Zs),e(_,_e),e(_e,et),e(_,st),e(_,we),e(we,tt),e(_,at),e(_,ye),e(ye,ot),e(_,lt),i(s,ws,p),i(s,h,p),e(h,nt),e(h,ke),e(ke,rt),e(h,pt),e(h,ve),e(ve,it),e(h,dt),e(h,ge),e(ge,ct),e(h,ht),e(h,Ee),e(Ee,ut),e(h,ft),e(h,be),e(be,mt),e(h,_t),i(s,ys,p),pe(G,s,p),i(s,ks,p),i(s,se,p),e(se,wt),i(s,vs,p),i(s,O,p),e(O,je),e(je,yt),e(O,kt),e(O,qe),e(qe,vt),e(O,gt),i(s,gs,p),i(s,E,p),e(E,Ce),e(Ce,Et),e(E,bt),e(E,De),e(De,jt),e(E,qt),e(E,Te),e(Te,Ct),e(E,Dt),i(s,Es,p),i(s,P,p),e(P,Oe),e(Oe,Tt),e(P,Ot),e(P,Pe),e(Pe,Pt),e(P,$t),i(s,bs,p),i(s,b,p),e(b,$e),e($e,At),e(b,xt),e(b,Ae),e(Ae,St),e(b,It),e(b,xe),e(xe,zt),e(b,Nt),i(s,js,p),i(s,u,p),e(u,Lt),e(u,Se),e(Se,Ut),e(u,Ht),e(u,Ie),e(Ie,Mt),e(u,Yt),e(u,ze),e(ze,Jt),e(u,Xt),e(u,Ne),e(Ne,Bt),e(u,Ft),i(s,qs,p),i(s,x,p),e(x,Gt),e(x,Le),e(Le,Rt),e(x,Kt),i(s,Cs,p),pe(R,s,p),i(s,Ds,p),i(s,w,p),e(w,Qt),e(w,Ue),e(Ue,Vt),e(w,Wt),e(w,He),e(He,Zt),e(w,ea),e(w,Me),e(Me,sa),e(w,ta),i(s,Ts,p),pe(K,s,p),i(s,Os,p),i(s,te,p),e(te,aa),i(s,Ps,p),i(s,$,p),e($,S),e(S,Ye),pe(Q,Ye,null),e($,oa),e($,Je),e(Je,la),i(s,$s,p),i(s,C,p),e(C,na),e(C,Xe),e(Xe,ra),e(C,pa),e(C,Be),e(Be,ia),e(C,da),i(s,As,p),i(s,A,p),e(A,I),e(I,Fe),pe(V,Fe,null),e(A,ca),e(A,Ge),e(Ge,ha),i(s,xs,p),i(s,z,p),e(z,ua),e(z,Re),e(Re,fa),e(z,ma),i(s,Ss,p),i(s,y,p),e(y,_a),e(y,Ke),e(Ke,wa),e(y,ya),e(y,Qe),e(Qe,ka),e(y,va),e(y,Ve),e(Ve,ga),e(y,Ea),i(s,Is,p),i(s,D,p),e(D,ba),e(D,We),e(We,ja),e(D,qa),e(D,Ze),e(Ze,Ca),e(D,Da),i(s,zs,p),i(s,N,p),e(N,Ta),e(N,es),e(es,Oa),e(N,Pa),i(s,Ns,p),i(s,k,p),e(k,L),e(L,ss),e(ss,$a),e(L,Aa),e(L,ts),e(ts,xa),e(L,Sa),e(k,Ia),e(k,U),e(U,as),e(as,za),e(U,Na),e(U,os),e(os,La),e(U,Ua),e(k,Ha),e(k,H),e(H,ls),e(ls,Ma),e(H,Ya),e(H,ns),e(ns,Ja),e(H,Xa),e(k,Ba),e(k,M),e(M,rs),e(rs,Fa),e(M,Ga),e(M,ps),e(ps,Ra),e(M,Ka),Ls=!0},p:ll,i(s){Ls||(ie(F.$$.fragment,s),ie(G.$$.fragment,s),ie(R.$$.fragment,s),ie(K.$$.fragment,s),ie(Q.$$.fragment,s),ie(V.$$.fragment,s),Ls=!0)},o(s){de(F.$$.fragment,s),de(G.$$.fragment,s),de(R.$$.fragment,s),de(K.$$.fragment,s),de(Q.$$.fragment,s),de(V.$$.fragment,s),Ls=!1},d(s){t(j),s&&t(ee),s&&t(m),ce(F),s&&t(ms),s&&t(q),s&&t(_s),s&&t(_),s&&t(ws),s&&t(h),s&&t(ys),ce(G,s),s&&t(ks),s&&t(se),s&&t(vs),s&&t(O),s&&t(gs),s&&t(E),s&&t(Es),s&&t(P),s&&t(bs),s&&t(b),s&&t(js),s&&t(u),s&&t(qs),s&&t(x),s&&t(Cs),ce(R,s),s&&t(Ds),s&&t(w),s&&t(Ts),ce(K,s),s&&t(Os),s&&t(te),s&&t(Ps),s&&t($),ce(Q),s&&t($s),s&&t(C),s&&t(As),s&&t(A),ce(V),s&&t(xs),s&&t(z),s&&t(Ss),s&&t(y),s&&t(Is),s&&t(D),s&&t(zs),s&&t(N),s&&t(Ns),s&&t(k)}}}const rl={local:"how-to-add-a-pipeline-to-transformers",sections:[{local:"adding-it-to-the-list-of-supported-tasks",title:"Adding it to the list of supported tasks"},{local:"adding-tests",title:"Adding tests"}],title:"How to add a pipeline to \u{1F917} Transformers?"};function pl(Bs,j,ee){let{fw:m}=j;return Bs.$$set=g=>{"fw"in g&&ee(0,m=g.fw)},[m]}class ul extends sl{constructor(j){super();tl(this,j,pl,nl,al,{fw:0})}}export{ul as default,rl as metadata};
