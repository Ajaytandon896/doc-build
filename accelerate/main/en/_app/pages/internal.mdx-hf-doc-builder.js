import{S as bl,i as wl,s as $l,e as r,k as i,w as u,t as s,M as yl,c as o,d as a,m as d,a as n,x as m,h as l,b as c,G as e,g as p,y as g,q as v,o as _,B as b,v as El}from"../chunks/vendor-hf-doc-builder.js";import{T as _l}from"../chunks/Tip-hf-doc-builder.js";import{D as L}from"../chunks/Docstring-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";function Sl(st){let f,z,w,S,x;return{c(){f=r("p"),z=s("This does not support "),w=r("code"),S=s("BatchSampler"),x=s(" with varying batch size yet.")},l($){f=o($,"P",{});var y=n(f);z=l(y,"This does not support "),w=o(y,"CODE",{});var O=n(w);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m($,y){p($,f,y),e(f,z),e(f,w),e(w,S),e(f,x)},d($){$&&a(f)}}}function Dl(st){let f,z,w,S,x;return{c(){f=r("p"),z=s("This does not support "),w=r("code"),S=s("BatchSampler"),x=s(" with varying batch size yet.")},l($){f=o($,"P",{});var y=n(f);z=l(y,"This does not support "),w=o(y,"CODE",{});var O=n(w);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m($,y){p($,f,y),e(f,z),e(f,w),e(w,S),e(f,x)},d($){$&&a(f)}}}function xl(st){let f,z,w,S,x,$,y,O,_r,Pa,F,ne,vt,ze,br,_t,wr,Ia,A,Pe,$r,V,yr,Ie,Er,Sr,bt,Dr,xr,Ar,wt,Tr,kr,U,se,$t,zr,Pr,yt,Ir,Lr,Or,le,Et,Nr,Cr,St,Gr,Wr,Br,ce,Dt,qr,Fr,xt,Vr,Ur,La,H,ie,At,Le,Hr,Tt,Rr,Oa,N,Oe,Mr,kt,jr,Xr,R,Jr,zt,Kr,Qr,Pt,Yr,Zr,Na,M,de,It,Ne,eo,Lt,to,Ca,he,ao,Ot,ro,oo,Ga,T,Ce,no,Ge,so,Nt,lo,co,io,j,ho,Ct,po,fo,Gt,uo,mo,go,pe,Wa,X,fe,Wt,We,vo,Bt,_o,Ba,k,Be,bo,qe,wo,qt,$o,yo,Eo,Ft,Vt,So,Do,Fe,Ut,q,Ht,xo,Ao,Rt,To,ko,Mt,zo,Po,Io,jt,ue,Xt,Lo,Oo,Jt,No,Co,qa,J,me,Kt,Ve,Go,Qt,Wo,Fa,C,Ue,Bo,G,qo,Yt,Fo,Vo,Zt,Uo,Ho,ea,Ro,Mo,jo,ge,Va,K,ve,ta,He,Xo,aa,Jo,Ua,Q,Re,Ko,D,Qo,ra,Yo,Zo,oa,en,tn,na,an,rn,sa,on,nn,la,sn,ln,Ha,Y,_e,ca,Me,cn,ia,dn,Ra,W,je,hn,da,pn,fn,ha,un,Ma,Z,be,pa,Xe,mn,fa,gn,ja,ee,we,ua,Je,vn,ma,_n,Xa,te,Ke,bn,ae,wn,Qe,$n,yn,ga,En,Sn,Ja,re,$e,va,Ye,Dn,_a,xn,Ka,E,Ze,An,ba,Tn,kn,ye,zn,wa,Pn,In,lt,Ln,On,Ee,et,Nn,$a,Cn,Gn,Se,tt,Wn,oe,Bn,ya,qn,Fn,Ea,Vn,Un,Hn,De,at,Rn,rt,Mn,Sa,jn,Xn,Qa;return $=new B({}),ze=new B({}),Pe=new L({props:{name:"class accelerate.state.GradientState",anchor:"accelerate.state.GradientState",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/state.py#L251"}}),Le=new B({}),Oe=new L({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/optimizer.py#L38"}}),Ne=new B({}),Ce=new L({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/main/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/main/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L531",returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),pe=new _l({props:{warning:!0,$$slots:{default:[Sl]},$$scope:{ctx:st}}}),We=new B({}),Be=new L({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L297"}}),Ve=new B({}),Ue=new L({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L91"}}),ge=new _l({props:{warning:!0,$$slots:{default:[Dl]},$$scope:{ctx:st}}}),He=new B({}),Re=new L({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L216"}}),Me=new B({}),je=new L({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
The scheduler to wrap.`,name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:`<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014;
The optimizers used.`,name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/scheduler.py#L25"}}),Xe=new B({}),Je=new B({}),Ke=new L({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"fsdp_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>sync_gradients</strong> (<code>bool</code>) &#x2014; Whether to sync the gradients or not &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/state.py#L48"}}),Ye=new B({}),Ze=new L({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L52"}}),et=new L({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L99"}}),tt=new L({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L85"}}),at=new L({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L72"}}),{c(){f=r("meta"),z=i(),w=r("h1"),S=r("a"),x=r("span"),u($.$$.fragment),y=i(),O=r("span"),_r=s("Internals"),Pa=i(),F=r("h2"),ne=r("a"),vt=r("span"),u(ze.$$.fragment),br=i(),_t=r("span"),wr=s("Gradient Accumulation states"),Ia=i(),A=r("div"),u(Pe.$$.fragment),$r=i(),V=r("p"),yr=s("This is a variation of a "),Ie=r("a"),Er=s("singleton class"),Sr=s(` in the sense that all
instance of `),bt=r("code"),Dr=s("GradientState"),xr=s(" share the same state, which is initialized on the first instantiation."),Ar=i(),wt=r("p"),Tr=s(`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),kr=i(),U=r("ul"),se=r("li"),$t=r("strong"),zr=s("sync_gradients"),Pr=s(" ("),yt=r("code"),Ir=s("bool"),Lr=s(") \u2014 Whether the gradients should be synced"),Or=i(),le=r("li"),Et=r("strong"),Nr=s("end_of_dataloader"),Cr=s(" ("),St=r("code"),Gr=s("bool"),Wr=s(") \u2014 Whether we have reached the end the current dataloader"),Br=i(),ce=r("li"),Dt=r("strong"),qr=s("remainder"),Fr=s(" ("),xt=r("code"),Vr=s("int"),Ur=s(") \u2014 The number of extra samples that were added from padding the dataloader"),La=i(),H=r("h2"),ie=r("a"),At=r("span"),u(Le.$$.fragment),Hr=i(),Tt=r("span"),Rr=s("Optimizer"),Oa=i(),N=r("div"),u(Oe.$$.fragment),Mr=i(),kt=r("p"),jr=s("Internal wrapper around a torch optimizer."),Xr=i(),R=r("p"),Jr=s("Conditionally will perform "),zt=r("code"),Kr=s("step"),Qr=s(" and "),Pt=r("code"),Yr=s("zero_grad"),Zr=s(` if gradients should be synchronized when performing gradient
accumulation.`),Na=i(),M=r("h2"),de=r("a"),It=r("span"),u(Ne.$$.fragment),eo=i(),Lt=r("span"),to=s("DataLoader"),Ca=i(),he=r("p"),ao=s("The main work on your PyTorch "),Ot=r("code"),ro=s("DataLoader"),oo=s(" is done by the following function:"),Ga=i(),T=r("div"),u(Ce.$$.fragment),no=i(),Ge=r("p"),so=s("Wraps a PyTorch "),Nt=r("code"),lo=s("DataLoader"),co=s(" to generate batches for one of the processes only."),io=i(),j=r("p"),ho=s("Depending on the value of the "),Ct=r("code"),po=s("drop_last"),fo=s(" attribute of the "),Gt=r("code"),uo=s("dataloader"),mo=s(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),go=i(),u(pe.$$.fragment),Wa=i(),X=r("h3"),fe=r("a"),Wt=r("span"),u(We.$$.fragment),vo=i(),Bt=r("span"),_o=s("DataLoaderShard"),Ba=i(),k=r("div"),u(Be.$$.fragment),bo=i(),qe=r("p"),wo=s("Subclass of a PyTorch "),qt=r("code"),$o=s("DataLoader"),yo=s(" that will deal with device placement and current distributed setup."),Eo=i(),Ft=r("p"),Vt=r("strong"),So=s("Available attributes:"),Do=i(),Fe=r("ul"),Ut=r("li"),q=r("p"),Ht=r("strong"),xo=s("total_batch_size"),Ao=s(" ("),Rt=r("code"),To=s("int"),ko=s(`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Mt=r("code"),zo=s("split_batches=True"),Po=s(`; otherwise the original batch size * the total
number of processes`),Io=i(),jt=r("li"),ue=r("p"),Xt=r("strong"),Lo=s("total_dataset_length"),Oo=s(" ("),Jt=r("code"),No=s("int"),Co=s(") \u2014 Total length of the inner dataset across all processes."),qa=i(),J=r("h3"),me=r("a"),Kt=r("span"),u(Ve.$$.fragment),Go=i(),Qt=r("span"),Wo=s("BatchSamplerShard"),Fa=i(),C=r("div"),u(Ue.$$.fragment),Bo=i(),G=r("p"),qo=s("Wraps a PyTorch "),Yt=r("code"),Fo=s("BatchSampler"),Vo=s(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Zt=r("code"),Uo=s("num_processes"),Ho=s(` and that all have the same size.
Depending on the value of the `),ea=r("code"),Ro=s("drop_last"),Mo=s(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),jo=i(),u(ge.$$.fragment),Va=i(),K=r("h3"),ve=r("a"),ta=r("span"),u(He.$$.fragment),Xo=i(),aa=r("span"),Jo=s("IterableDatasetShard"),Ua=i(),Q=r("div"),u(Re.$$.fragment),Ko=i(),D=r("p"),Qo=s("Wraps a PyTorch "),ra=r("code"),Yo=s("IterableDataset"),Zo=s(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),oa=r("code"),en=s("split_batches"),tn=s(", this is either "),na=r("code"),an=s("batch_size"),rn=s(" or "),sa=r("code"),on=s("batch_size x num_processes"),nn=s(`). Depending on the value of the
`),la=r("code"),sn=s("drop_last"),ln=s(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),Ha=i(),Y=r("h2"),_e=r("a"),ca=r("span"),u(Me.$$.fragment),cn=i(),ia=r("span"),dn=s("Scheduler"),Ra=i(),W=r("div"),u(je.$$.fragment),hn=i(),da=r("p"),pn=s(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),fn=i(),ha=r("p"),un=s(`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),Ma=i(),Z=r("h2"),be=r("a"),pa=r("span"),u(Xe.$$.fragment),mn=i(),fa=r("span"),gn=s("Distributed Config"),ja=i(),ee=r("h3"),we=r("a"),ua=r("span"),u(Je.$$.fragment),vn=i(),ma=r("span"),_n=s("AcceleratorState"),Xa=i(),te=r("div"),u(Ke.$$.fragment),bn=i(),ae=r("p"),wn=s("This is a variation of a "),Qe=r("a"),$n=s("singleton class"),yn=s(` in the sense that all
instance of `),ga=r("code"),En=s("AcceleratorState"),Sn=s(" share the same state, which is initialized on the first instantiation."),Ja=i(),re=r("h2"),$e=r("a"),va=r("span"),u(Ye.$$.fragment),Dn=i(),_a=r("span"),xn=s("Tracking"),Ka=i(),E=r("div"),u(Ze.$$.fragment),An=i(),ba=r("p"),Tn=s("A base Tracker class to be used for all logging integration implementations."),kn=i(),ye=r("p"),zn=s("Each function should take in "),wa=r("code"),Pn=s("**kwargs"),In=s(` that will automatically be passed in from a base dictionary provided to
`),lt=r("a"),Ln=s("Accelerator"),On=i(),Ee=r("div"),u(et.$$.fragment),Nn=i(),$a=r("p"),Cn=s(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Gn=i(),Se=r("div"),u(tt.$$.fragment),Wn=i(),oe=r("p"),Bn=s("Logs "),ya=r("code"),qn=s("values"),Fn=s(" to the current run. Base "),Ea=r("code"),Vn=s("log"),Un=s(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),Hn=i(),De=r("div"),u(at.$$.fragment),Rn=i(),rt=r("p"),Mn=s("Logs "),Sa=r("code"),jn=s("values"),Xn=s(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),this.h()},l(t){const h=yl('[data-svelte="svelte-1phssyn"]',document.head);f=o(h,"META",{name:!0,content:!0}),h.forEach(a),z=d(t),w=o(t,"H1",{class:!0});var ot=n(w);S=o(ot,"A",{id:!0,class:!0,href:!0});var Da=n(S);x=o(Da,"SPAN",{});var Jn=n(x);m($.$$.fragment,Jn),Jn.forEach(a),Da.forEach(a),y=d(ot),O=o(ot,"SPAN",{});var Kn=n(O);_r=l(Kn,"Internals"),Kn.forEach(a),ot.forEach(a),Pa=d(t),F=o(t,"H2",{class:!0});var Ya=n(F);ne=o(Ya,"A",{id:!0,class:!0,href:!0});var Qn=n(ne);vt=o(Qn,"SPAN",{});var Yn=n(vt);m(ze.$$.fragment,Yn),Yn.forEach(a),Qn.forEach(a),br=d(Ya),_t=o(Ya,"SPAN",{});var Zn=n(_t);wr=l(Zn,"Gradient Accumulation states"),Zn.forEach(a),Ya.forEach(a),Ia=d(t),A=o(t,"DIV",{class:!0});var xe=n(A);m(Pe.$$.fragment,xe),$r=d(xe),V=o(xe,"P",{});var ct=n(V);yr=l(ct,"This is a variation of a "),Ie=o(ct,"A",{href:!0,rel:!0});var es=n(Ie);Er=l(es,"singleton class"),es.forEach(a),Sr=l(ct,` in the sense that all
instance of `),bt=o(ct,"CODE",{});var ts=n(bt);Dr=l(ts,"GradientState"),ts.forEach(a),xr=l(ct," share the same state, which is initialized on the first instantiation."),ct.forEach(a),Ar=d(xe),wt=o(xe,"P",{});var as=n(wt);Tr=l(as,`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),as.forEach(a),kr=d(xe),U=o(xe,"UL",{});var it=n(U);se=o(it,"LI",{});var xa=n(se);$t=o(xa,"STRONG",{});var rs=n($t);zr=l(rs,"sync_gradients"),rs.forEach(a),Pr=l(xa," ("),yt=o(xa,"CODE",{});var os=n(yt);Ir=l(os,"bool"),os.forEach(a),Lr=l(xa,") \u2014 Whether the gradients should be synced"),xa.forEach(a),Or=d(it),le=o(it,"LI",{});var Aa=n(le);Et=o(Aa,"STRONG",{});var ns=n(Et);Nr=l(ns,"end_of_dataloader"),ns.forEach(a),Cr=l(Aa," ("),St=o(Aa,"CODE",{});var ss=n(St);Gr=l(ss,"bool"),ss.forEach(a),Wr=l(Aa,") \u2014 Whether we have reached the end the current dataloader"),Aa.forEach(a),Br=d(it),ce=o(it,"LI",{});var Ta=n(ce);Dt=o(Ta,"STRONG",{});var ls=n(Dt);qr=l(ls,"remainder"),ls.forEach(a),Fr=l(Ta," ("),xt=o(Ta,"CODE",{});var cs=n(xt);Vr=l(cs,"int"),cs.forEach(a),Ur=l(Ta,") \u2014 The number of extra samples that were added from padding the dataloader"),Ta.forEach(a),it.forEach(a),xe.forEach(a),La=d(t),H=o(t,"H2",{class:!0});var Za=n(H);ie=o(Za,"A",{id:!0,class:!0,href:!0});var is=n(ie);At=o(is,"SPAN",{});var ds=n(At);m(Le.$$.fragment,ds),ds.forEach(a),is.forEach(a),Hr=d(Za),Tt=o(Za,"SPAN",{});var hs=n(Tt);Rr=l(hs,"Optimizer"),hs.forEach(a),Za.forEach(a),Oa=d(t),N=o(t,"DIV",{class:!0});var dt=n(N);m(Oe.$$.fragment,dt),Mr=d(dt),kt=o(dt,"P",{});var ps=n(kt);jr=l(ps,"Internal wrapper around a torch optimizer."),ps.forEach(a),Xr=d(dt),R=o(dt,"P",{});var ht=n(R);Jr=l(ht,"Conditionally will perform "),zt=o(ht,"CODE",{});var fs=n(zt);Kr=l(fs,"step"),fs.forEach(a),Qr=l(ht," and "),Pt=o(ht,"CODE",{});var us=n(Pt);Yr=l(us,"zero_grad"),us.forEach(a),Zr=l(ht,` if gradients should be synchronized when performing gradient
accumulation.`),ht.forEach(a),dt.forEach(a),Na=d(t),M=o(t,"H2",{class:!0});var er=n(M);de=o(er,"A",{id:!0,class:!0,href:!0});var ms=n(de);It=o(ms,"SPAN",{});var gs=n(It);m(Ne.$$.fragment,gs),gs.forEach(a),ms.forEach(a),eo=d(er),Lt=o(er,"SPAN",{});var vs=n(Lt);to=l(vs,"DataLoader"),vs.forEach(a),er.forEach(a),Ca=d(t),he=o(t,"P",{});var tr=n(he);ao=l(tr,"The main work on your PyTorch "),Ot=o(tr,"CODE",{});var _s=n(Ot);ro=l(_s,"DataLoader"),_s.forEach(a),oo=l(tr," is done by the following function:"),tr.forEach(a),Ga=d(t),T=o(t,"DIV",{class:!0});var Ae=n(T);m(Ce.$$.fragment,Ae),no=d(Ae),Ge=o(Ae,"P",{});var ar=n(Ge);so=l(ar,"Wraps a PyTorch "),Nt=o(ar,"CODE",{});var bs=n(Nt);lo=l(bs,"DataLoader"),bs.forEach(a),co=l(ar," to generate batches for one of the processes only."),ar.forEach(a),io=d(Ae),j=o(Ae,"P",{});var pt=n(j);ho=l(pt,"Depending on the value of the "),Ct=o(pt,"CODE",{});var ws=n(Ct);po=l(ws,"drop_last"),ws.forEach(a),fo=l(pt," attribute of the "),Gt=o(pt,"CODE",{});var $s=n(Gt);uo=l($s,"dataloader"),$s.forEach(a),mo=l(pt,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),pt.forEach(a),go=d(Ae),m(pe.$$.fragment,Ae),Ae.forEach(a),Wa=d(t),X=o(t,"H3",{class:!0});var rr=n(X);fe=o(rr,"A",{id:!0,class:!0,href:!0});var ys=n(fe);Wt=o(ys,"SPAN",{});var Es=n(Wt);m(We.$$.fragment,Es),Es.forEach(a),ys.forEach(a),vo=d(rr),Bt=o(rr,"SPAN",{});var Ss=n(Bt);_o=l(Ss,"DataLoaderShard"),Ss.forEach(a),rr.forEach(a),Ba=d(t),k=o(t,"DIV",{class:!0});var Te=n(k);m(Be.$$.fragment,Te),bo=d(Te),qe=o(Te,"P",{});var or=n(qe);wo=l(or,"Subclass of a PyTorch "),qt=o(or,"CODE",{});var Ds=n(qt);$o=l(Ds,"DataLoader"),Ds.forEach(a),yo=l(or," that will deal with device placement and current distributed setup."),or.forEach(a),Eo=d(Te),Ft=o(Te,"P",{});var xs=n(Ft);Vt=o(xs,"STRONG",{});var As=n(Vt);So=l(As,"Available attributes:"),As.forEach(a),xs.forEach(a),Do=d(Te),Fe=o(Te,"UL",{});var nr=n(Fe);Ut=o(nr,"LI",{});var Ts=n(Ut);q=o(Ts,"P",{});var nt=n(q);Ht=o(nt,"STRONG",{});var ks=n(Ht);xo=l(ks,"total_batch_size"),ks.forEach(a),Ao=l(nt," ("),Rt=o(nt,"CODE",{});var zs=n(Rt);To=l(zs,"int"),zs.forEach(a),ko=l(nt,`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),Mt=o(nt,"CODE",{});var Ps=n(Mt);zo=l(Ps,"split_batches=True"),Ps.forEach(a),Po=l(nt,`; otherwise the original batch size * the total
number of processes`),nt.forEach(a),Ts.forEach(a),Io=d(nr),jt=o(nr,"LI",{});var Is=n(jt);ue=o(Is,"P",{});var ka=n(ue);Xt=o(ka,"STRONG",{});var Ls=n(Xt);Lo=l(Ls,"total_dataset_length"),Ls.forEach(a),Oo=l(ka," ("),Jt=o(ka,"CODE",{});var Os=n(Jt);No=l(Os,"int"),Os.forEach(a),Co=l(ka,") \u2014 Total length of the inner dataset across all processes."),ka.forEach(a),Is.forEach(a),nr.forEach(a),Te.forEach(a),qa=d(t),J=o(t,"H3",{class:!0});var sr=n(J);me=o(sr,"A",{id:!0,class:!0,href:!0});var Ns=n(me);Kt=o(Ns,"SPAN",{});var Cs=n(Kt);m(Ve.$$.fragment,Cs),Cs.forEach(a),Ns.forEach(a),Go=d(sr),Qt=o(sr,"SPAN",{});var Gs=n(Qt);Wo=l(Gs,"BatchSamplerShard"),Gs.forEach(a),sr.forEach(a),Fa=d(t),C=o(t,"DIV",{class:!0});var ft=n(C);m(Ue.$$.fragment,ft),Bo=d(ft),G=o(ft,"P",{});var ke=n(G);qo=l(ke,"Wraps a PyTorch "),Yt=o(ke,"CODE",{});var Ws=n(Yt);Fo=l(Ws,"BatchSampler"),Ws.forEach(a),Vo=l(ke,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Zt=o(ke,"CODE",{});var Bs=n(Zt);Uo=l(Bs,"num_processes"),Bs.forEach(a),Ho=l(ke,` and that all have the same size.
Depending on the value of the `),ea=o(ke,"CODE",{});var qs=n(ea);Ro=l(qs,"drop_last"),qs.forEach(a),Mo=l(ke,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),ke.forEach(a),jo=d(ft),m(ge.$$.fragment,ft),ft.forEach(a),Va=d(t),K=o(t,"H3",{class:!0});var lr=n(K);ve=o(lr,"A",{id:!0,class:!0,href:!0});var Fs=n(ve);ta=o(Fs,"SPAN",{});var Vs=n(ta);m(He.$$.fragment,Vs),Vs.forEach(a),Fs.forEach(a),Xo=d(lr),aa=o(lr,"SPAN",{});var Us=n(aa);Jo=l(Us,"IterableDatasetShard"),Us.forEach(a),lr.forEach(a),Ua=d(t),Q=o(t,"DIV",{class:!0});var cr=n(Q);m(Re.$$.fragment,cr),Ko=d(cr),D=o(cr,"P",{});var P=n(D);Qo=l(P,"Wraps a PyTorch "),ra=o(P,"CODE",{});var Hs=n(ra);Yo=l(Hs,"IterableDataset"),Hs.forEach(a),Zo=l(P,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),oa=o(P,"CODE",{});var Rs=n(oa);en=l(Rs,"split_batches"),Rs.forEach(a),tn=l(P,", this is either "),na=o(P,"CODE",{});var Ms=n(na);an=l(Ms,"batch_size"),Ms.forEach(a),rn=l(P," or "),sa=o(P,"CODE",{});var js=n(sa);on=l(js,"batch_size x num_processes"),js.forEach(a),nn=l(P,`). Depending on the value of the
`),la=o(P,"CODE",{});var Xs=n(la);sn=l(Xs,"drop_last"),Xs.forEach(a),ln=l(P,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),P.forEach(a),cr.forEach(a),Ha=d(t),Y=o(t,"H2",{class:!0});var ir=n(Y);_e=o(ir,"A",{id:!0,class:!0,href:!0});var Js=n(_e);ca=o(Js,"SPAN",{});var Ks=n(ca);m(Me.$$.fragment,Ks),Ks.forEach(a),Js.forEach(a),cn=d(ir),ia=o(ir,"SPAN",{});var Qs=n(ia);dn=l(Qs,"Scheduler"),Qs.forEach(a),ir.forEach(a),Ra=d(t),W=o(t,"DIV",{class:!0});var ut=n(W);m(je.$$.fragment,ut),hn=d(ut),da=o(ut,"P",{});var Ys=n(da);pn=l(Ys,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),Ys.forEach(a),fn=d(ut),ha=o(ut,"P",{});var Zs=n(ha);un=l(Zs,`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),Zs.forEach(a),ut.forEach(a),Ma=d(t),Z=o(t,"H2",{class:!0});var dr=n(Z);be=o(dr,"A",{id:!0,class:!0,href:!0});var el=n(be);pa=o(el,"SPAN",{});var tl=n(pa);m(Xe.$$.fragment,tl),tl.forEach(a),el.forEach(a),mn=d(dr),fa=o(dr,"SPAN",{});var al=n(fa);gn=l(al,"Distributed Config"),al.forEach(a),dr.forEach(a),ja=d(t),ee=o(t,"H3",{class:!0});var hr=n(ee);we=o(hr,"A",{id:!0,class:!0,href:!0});var rl=n(we);ua=o(rl,"SPAN",{});var ol=n(ua);m(Je.$$.fragment,ol),ol.forEach(a),rl.forEach(a),vn=d(hr),ma=o(hr,"SPAN",{});var nl=n(ma);_n=l(nl,"AcceleratorState"),nl.forEach(a),hr.forEach(a),Xa=d(t),te=o(t,"DIV",{class:!0});var pr=n(te);m(Ke.$$.fragment,pr),bn=d(pr),ae=o(pr,"P",{});var mt=n(ae);wn=l(mt,"This is a variation of a "),Qe=o(mt,"A",{href:!0,rel:!0});var sl=n(Qe);$n=l(sl,"singleton class"),sl.forEach(a),yn=l(mt,` in the sense that all
instance of `),ga=o(mt,"CODE",{});var ll=n(ga);En=l(ll,"AcceleratorState"),ll.forEach(a),Sn=l(mt," share the same state, which is initialized on the first instantiation."),mt.forEach(a),pr.forEach(a),Ja=d(t),re=o(t,"H2",{class:!0});var fr=n(re);$e=o(fr,"A",{id:!0,class:!0,href:!0});var cl=n($e);va=o(cl,"SPAN",{});var il=n(va);m(Ye.$$.fragment,il),il.forEach(a),cl.forEach(a),Dn=d(fr),_a=o(fr,"SPAN",{});var dl=n(_a);xn=l(dl,"Tracking"),dl.forEach(a),fr.forEach(a),Ka=d(t),E=o(t,"DIV",{class:!0});var I=n(E);m(Ze.$$.fragment,I),An=d(I),ba=o(I,"P",{});var hl=n(ba);Tn=l(hl,"A base Tracker class to be used for all logging integration implementations."),hl.forEach(a),kn=d(I),ye=o(I,"P",{});var za=n(ye);zn=l(za,"Each function should take in "),wa=o(za,"CODE",{});var pl=n(wa);Pn=l(pl,"**kwargs"),pl.forEach(a),In=l(za,` that will automatically be passed in from a base dictionary provided to
`),lt=o(za,"A",{href:!0});var fl=n(lt);Ln=l(fl,"Accelerator"),fl.forEach(a),za.forEach(a),On=d(I),Ee=o(I,"DIV",{class:!0});var ur=n(Ee);m(et.$$.fragment,ur),Nn=d(ur),$a=o(ur,"P",{});var ul=n($a);Cn=l(ul,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),ul.forEach(a),ur.forEach(a),Gn=d(I),Se=o(I,"DIV",{class:!0});var mr=n(Se);m(tt.$$.fragment,mr),Wn=d(mr),oe=o(mr,"P",{});var gt=n(oe);Bn=l(gt,"Logs "),ya=o(gt,"CODE",{});var ml=n(ya);qn=l(ml,"values"),ml.forEach(a),Fn=l(gt," to the current run. Base "),Ea=o(gt,"CODE",{});var gl=n(Ea);Vn=l(gl,"log"),gl.forEach(a),Un=l(gt," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),gt.forEach(a),mr.forEach(a),Hn=d(I),De=o(I,"DIV",{class:!0});var gr=n(De);m(at.$$.fragment,gr),Rn=d(gr),rt=o(gr,"P",{});var vr=n(rt);Mn=l(vr,"Logs "),Sa=o(vr,"CODE",{});var vl=n(Sa);jn=l(vl,"values"),vl.forEach(a),Xn=l(vr,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),vr.forEach(a),gr.forEach(a),I.forEach(a),this.h()},h(){c(f,"name","hf:doc:metadata"),c(f,"content",JSON.stringify(Al)),c(S,"id","internals"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#internals"),c(w,"class","relative group"),c(ne,"id","accelerate.state.GradientState"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#accelerate.state.GradientState"),c(F,"class","relative group"),c(Ie,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Ie,"rel","nofollow"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ie,"id","accelerate.optimizer.AcceleratedOptimizer"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#accelerate.optimizer.AcceleratedOptimizer"),c(H,"class","relative group"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(de,"id","accelerate.data_loader.prepare_data_loader"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#accelerate.data_loader.prepare_data_loader"),c(M,"class","relative group"),c(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fe,"id","accelerate.data_loader.DataLoaderShard"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#accelerate.data_loader.DataLoaderShard"),c(X,"class","relative group"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","accelerate.data_loader.BatchSamplerShard"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#accelerate.data_loader.BatchSamplerShard"),c(J,"class","relative group"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ve,"id","accelerate.data_loader.IterableDatasetShard"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#accelerate.data_loader.IterableDatasetShard"),c(K,"class","relative group"),c(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_e,"id","accelerate.scheduler.AcceleratedScheduler"),c(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_e,"href","#accelerate.scheduler.AcceleratedScheduler"),c(Y,"class","relative group"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(be,"id","distributed-config"),c(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(be,"href","#distributed-config"),c(Z,"class","relative group"),c(we,"id","accelerate.state.AcceleratorState"),c(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(we,"href","#accelerate.state.AcceleratorState"),c(ee,"class","relative group"),c(Qe,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Qe,"rel","nofollow"),c(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($e,"id","accelerate.tracking.GeneralTracker"),c($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($e,"href","#accelerate.tracking.GeneralTracker"),c(re,"class","relative group"),c(lt,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator"),c(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,f),p(t,z,h),p(t,w,h),e(w,S),e(S,x),g($,x,null),e(w,y),e(w,O),e(O,_r),p(t,Pa,h),p(t,F,h),e(F,ne),e(ne,vt),g(ze,vt,null),e(F,br),e(F,_t),e(_t,wr),p(t,Ia,h),p(t,A,h),g(Pe,A,null),e(A,$r),e(A,V),e(V,yr),e(V,Ie),e(Ie,Er),e(V,Sr),e(V,bt),e(bt,Dr),e(V,xr),e(A,Ar),e(A,wt),e(wt,Tr),e(A,kr),e(A,U),e(U,se),e(se,$t),e($t,zr),e(se,Pr),e(se,yt),e(yt,Ir),e(se,Lr),e(U,Or),e(U,le),e(le,Et),e(Et,Nr),e(le,Cr),e(le,St),e(St,Gr),e(le,Wr),e(U,Br),e(U,ce),e(ce,Dt),e(Dt,qr),e(ce,Fr),e(ce,xt),e(xt,Vr),e(ce,Ur),p(t,La,h),p(t,H,h),e(H,ie),e(ie,At),g(Le,At,null),e(H,Hr),e(H,Tt),e(Tt,Rr),p(t,Oa,h),p(t,N,h),g(Oe,N,null),e(N,Mr),e(N,kt),e(kt,jr),e(N,Xr),e(N,R),e(R,Jr),e(R,zt),e(zt,Kr),e(R,Qr),e(R,Pt),e(Pt,Yr),e(R,Zr),p(t,Na,h),p(t,M,h),e(M,de),e(de,It),g(Ne,It,null),e(M,eo),e(M,Lt),e(Lt,to),p(t,Ca,h),p(t,he,h),e(he,ao),e(he,Ot),e(Ot,ro),e(he,oo),p(t,Ga,h),p(t,T,h),g(Ce,T,null),e(T,no),e(T,Ge),e(Ge,so),e(Ge,Nt),e(Nt,lo),e(Ge,co),e(T,io),e(T,j),e(j,ho),e(j,Ct),e(Ct,po),e(j,fo),e(j,Gt),e(Gt,uo),e(j,mo),e(T,go),g(pe,T,null),p(t,Wa,h),p(t,X,h),e(X,fe),e(fe,Wt),g(We,Wt,null),e(X,vo),e(X,Bt),e(Bt,_o),p(t,Ba,h),p(t,k,h),g(Be,k,null),e(k,bo),e(k,qe),e(qe,wo),e(qe,qt),e(qt,$o),e(qe,yo),e(k,Eo),e(k,Ft),e(Ft,Vt),e(Vt,So),e(k,Do),e(k,Fe),e(Fe,Ut),e(Ut,q),e(q,Ht),e(Ht,xo),e(q,Ao),e(q,Rt),e(Rt,To),e(q,ko),e(q,Mt),e(Mt,zo),e(q,Po),e(Fe,Io),e(Fe,jt),e(jt,ue),e(ue,Xt),e(Xt,Lo),e(ue,Oo),e(ue,Jt),e(Jt,No),e(ue,Co),p(t,qa,h),p(t,J,h),e(J,me),e(me,Kt),g(Ve,Kt,null),e(J,Go),e(J,Qt),e(Qt,Wo),p(t,Fa,h),p(t,C,h),g(Ue,C,null),e(C,Bo),e(C,G),e(G,qo),e(G,Yt),e(Yt,Fo),e(G,Vo),e(G,Zt),e(Zt,Uo),e(G,Ho),e(G,ea),e(ea,Ro),e(G,Mo),e(C,jo),g(ge,C,null),p(t,Va,h),p(t,K,h),e(K,ve),e(ve,ta),g(He,ta,null),e(K,Xo),e(K,aa),e(aa,Jo),p(t,Ua,h),p(t,Q,h),g(Re,Q,null),e(Q,Ko),e(Q,D),e(D,Qo),e(D,ra),e(ra,Yo),e(D,Zo),e(D,oa),e(oa,en),e(D,tn),e(D,na),e(na,an),e(D,rn),e(D,sa),e(sa,on),e(D,nn),e(D,la),e(la,sn),e(D,ln),p(t,Ha,h),p(t,Y,h),e(Y,_e),e(_e,ca),g(Me,ca,null),e(Y,cn),e(Y,ia),e(ia,dn),p(t,Ra,h),p(t,W,h),g(je,W,null),e(W,hn),e(W,da),e(da,pn),e(W,fn),e(W,ha),e(ha,un),p(t,Ma,h),p(t,Z,h),e(Z,be),e(be,pa),g(Xe,pa,null),e(Z,mn),e(Z,fa),e(fa,gn),p(t,ja,h),p(t,ee,h),e(ee,we),e(we,ua),g(Je,ua,null),e(ee,vn),e(ee,ma),e(ma,_n),p(t,Xa,h),p(t,te,h),g(Ke,te,null),e(te,bn),e(te,ae),e(ae,wn),e(ae,Qe),e(Qe,$n),e(ae,yn),e(ae,ga),e(ga,En),e(ae,Sn),p(t,Ja,h),p(t,re,h),e(re,$e),e($e,va),g(Ye,va,null),e(re,Dn),e(re,_a),e(_a,xn),p(t,Ka,h),p(t,E,h),g(Ze,E,null),e(E,An),e(E,ba),e(ba,Tn),e(E,kn),e(E,ye),e(ye,zn),e(ye,wa),e(wa,Pn),e(ye,In),e(ye,lt),e(lt,Ln),e(E,On),e(E,Ee),g(et,Ee,null),e(Ee,Nn),e(Ee,$a),e($a,Cn),e(E,Gn),e(E,Se),g(tt,Se,null),e(Se,Wn),e(Se,oe),e(oe,Bn),e(oe,ya),e(ya,qn),e(oe,Fn),e(oe,Ea),e(Ea,Vn),e(oe,Un),e(E,Hn),e(E,De),g(at,De,null),e(De,Rn),e(De,rt),e(rt,Mn),e(rt,Sa),e(Sa,jn),e(rt,Xn),Qa=!0},p(t,[h]){const ot={};h&2&&(ot.$$scope={dirty:h,ctx:t}),pe.$set(ot);const Da={};h&2&&(Da.$$scope={dirty:h,ctx:t}),ge.$set(Da)},i(t){Qa||(v($.$$.fragment,t),v(ze.$$.fragment,t),v(Pe.$$.fragment,t),v(Le.$$.fragment,t),v(Oe.$$.fragment,t),v(Ne.$$.fragment,t),v(Ce.$$.fragment,t),v(pe.$$.fragment,t),v(We.$$.fragment,t),v(Be.$$.fragment,t),v(Ve.$$.fragment,t),v(Ue.$$.fragment,t),v(ge.$$.fragment,t),v(He.$$.fragment,t),v(Re.$$.fragment,t),v(Me.$$.fragment,t),v(je.$$.fragment,t),v(Xe.$$.fragment,t),v(Je.$$.fragment,t),v(Ke.$$.fragment,t),v(Ye.$$.fragment,t),v(Ze.$$.fragment,t),v(et.$$.fragment,t),v(tt.$$.fragment,t),v(at.$$.fragment,t),Qa=!0)},o(t){_($.$$.fragment,t),_(ze.$$.fragment,t),_(Pe.$$.fragment,t),_(Le.$$.fragment,t),_(Oe.$$.fragment,t),_(Ne.$$.fragment,t),_(Ce.$$.fragment,t),_(pe.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Ve.$$.fragment,t),_(Ue.$$.fragment,t),_(ge.$$.fragment,t),_(He.$$.fragment,t),_(Re.$$.fragment,t),_(Me.$$.fragment,t),_(je.$$.fragment,t),_(Xe.$$.fragment,t),_(Je.$$.fragment,t),_(Ke.$$.fragment,t),_(Ye.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(at.$$.fragment,t),Qa=!1},d(t){a(f),t&&a(z),t&&a(w),b($),t&&a(Pa),t&&a(F),b(ze),t&&a(Ia),t&&a(A),b(Pe),t&&a(La),t&&a(H),b(Le),t&&a(Oa),t&&a(N),b(Oe),t&&a(Na),t&&a(M),b(Ne),t&&a(Ca),t&&a(he),t&&a(Ga),t&&a(T),b(Ce),b(pe),t&&a(Wa),t&&a(X),b(We),t&&a(Ba),t&&a(k),b(Be),t&&a(qa),t&&a(J),b(Ve),t&&a(Fa),t&&a(C),b(Ue),b(ge),t&&a(Va),t&&a(K),b(He),t&&a(Ua),t&&a(Q),b(Re),t&&a(Ha),t&&a(Y),b(Me),t&&a(Ra),t&&a(W),b(je),t&&a(Ma),t&&a(Z),b(Xe),t&&a(ja),t&&a(ee),b(Je),t&&a(Xa),t&&a(te),b(Ke),t&&a(Ja),t&&a(re),b(Ye),t&&a(Ka),t&&a(E),b(Ze),b(et),b(tt),b(at)}}}const Al={local:"internals",sections:[{local:"accelerate.state.GradientState",title:"Gradient Accumulation states"},{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"DataLoaderShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Scheduler"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"}],title:"Distributed Config"},{local:"accelerate.tracking.GeneralTracker",title:"Tracking"}],title:"Internals"};function Tl(st){return El(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ll extends bl{constructor(f){super();wl(this,f,Tl,xl,$l,{})}}export{Ll as default,Al as metadata};
