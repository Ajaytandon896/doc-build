import{S as js,i as Xs,s as Js,e as r,k as i,w as f,t as s,M as Ks,c as o,d as a,m as d,a as n,x as m,h as l,b as c,G as e,g as p,y as g,q as v,o as b,B as _,v as Qs}from"../chunks/vendor-hf-doc-builder.js";import{T as Ms}from"../chunks/Tip-hf-doc-builder.js";import{D as L}from"../chunks/Docstring-hf-doc-builder.js";import{I as B}from"../chunks/IconCopyLink-hf-doc-builder.js";function Ys(rt){let u,z,$,S,x;return{c(){u=r("p"),z=s("This does not support "),$=r("code"),S=s("BatchSampler"),x=s(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=n(u);z=l(y,"This does not support "),$=o(y,"CODE",{});var O=n($);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,z),e(u,$),e($,S),e(u,x)},d(w){w&&a(u)}}}function Zs(rt){let u,z,$,S,x;return{c(){u=r("p"),z=s("This does not support "),$=r("code"),S=s("BatchSampler"),x=s(" with varying batch size yet.")},l(w){u=o(w,"P",{});var y=n(u);z=l(y,"This does not support "),$=o(y,"CODE",{});var O=n($);S=l(O,"BatchSampler"),O.forEach(a),x=l(y," with varying batch size yet."),y.forEach(a)},m(w,y){p(w,u,y),e(u,z),e(u,$),e($,S),e(u,x)},d(w){w&&a(u)}}}function el(rt){let u,z,$,S,x,w,y,O,lr,$a,F,oe,ut,Ae,cr,ft,ir,wa,A,ke,dr,V,hr,Te,pr,ur,mt,fr,mr,gr,gt,vr,br,ze,ne,vt,_r,$r,bt,wr,yr,Er,se,_t,Sr,Dr,$t,xr,Ar,ya,U,le,wt,Pe,kr,yt,Tr,Ea,N,Ie,zr,Et,Pr,Ir,H,Lr,St,Or,Nr,Dt,Cr,Gr,Sa,R,ce,xt,Le,Wr,At,Br,Da,ie,qr,kt,Fr,Vr,xa,k,Oe,Ur,Ne,Hr,Tt,Rr,Mr,jr,M,Xr,zt,Jr,Kr,Pt,Qr,Yr,Zr,de,Aa,j,he,It,Ce,eo,Lt,to,ka,T,Ge,ao,We,ro,Ot,oo,no,so,Nt,Ct,lo,co,Gt,q,Wt,io,ho,Bt,po,uo,qt,fo,mo,Ta,X,pe,Ft,Be,go,Vt,vo,za,C,qe,bo,G,_o,Ut,$o,wo,Ht,yo,Eo,Rt,So,Do,xo,ue,Pa,J,fe,Mt,Fe,Ao,jt,ko,Ia,K,Ve,To,D,zo,Xt,Po,Io,Jt,Lo,Oo,Kt,No,Co,Qt,Go,Wo,Yt,Bo,qo,La,Q,me,Zt,Ue,Fo,ea,Vo,Oa,W,He,Uo,ta,Ho,Ro,aa,Mo,Na,Y,ge,ra,Re,jo,oa,Xo,Ca,Z,ve,na,Me,Jo,sa,Ko,Ga,ee,je,Qo,te,Yo,Xe,Zo,en,la,tn,an,Wa,ae,be,ca,Je,rn,ia,on,Ba,E,Ke,nn,da,sn,ln,_e,cn,ha,dn,hn,ot,pn,un,$e,Qe,fn,pa,mn,gn,we,Ye,vn,re,bn,ua,_n,$n,fa,wn,yn,En,ye,Ze,Sn,et,Dn,ma,xn,An,qa;return w=new B({}),Ae=new B({}),ke=new L({props:{name:"class accelerate.state.GradientState",anchor:"accelerate.state.GradientState",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/state.py#L239"}}),Pe=new B({}),Ie=new L({props:{name:"class accelerate.optimizer.AcceleratedOptimizer",anchor:"accelerate.optimizer.AcceleratedOptimizer",parameters:[{name:"optimizer",val:""},{name:"device_placement",val:" = True"},{name:"scaler",val:" = None"}],parametersDescription:[{anchor:"accelerate.optimizer.AcceleratedOptimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.optimizer.Optimizer</code>) &#x2014;
The optimizer to wrap.`,name:"optimizer"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the optimizer should handle device placement. If so, it will place the state dictionary of
<code>optimizer</code> on the right device.`,name:"device_placement"},{anchor:"accelerate.optimizer.AcceleratedOptimizer.scaler",description:`<strong>scaler</strong> (<code>torch.cuda.amp.grad_scaler.GradScaler</code>, <em>optional</em>) &#x2014;
The scaler to use in the step function if training with mixed precision.`,name:"scaler"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/optimizer.py#L38"}}),Le=new B({}),Oe=new L({props:{name:"accelerate.data_loader.prepare_data_loader",anchor:"accelerate.data_loader.prepare_data_loader",parameters:[{name:"dataloader",val:": DataLoader"},{name:"device",val:": typing.Optional[torch.device] = None"},{name:"num_processes",val:": typing.Optional[int] = None"},{name:"process_index",val:": typing.Optional[int] = None"},{name:"split_batches",val:": bool = False"},{name:"put_on_device",val:": bool = False"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"accelerate.data_loader.prepare_data_loader.dataloader",description:`<strong>dataloader</strong> (<code>torch.utils.data.dataloader.DataLoader</code>) &#x2014;
The data loader to split across several devices.`,name:"dataloader"},{anchor:"accelerate.data_loader.prepare_data_loader.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
The target device for the returned <code>DataLoader</code>.`,name:"device"},{anchor:"accelerate.data_loader.prepare_data_loader.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of processes running concurrently. Will default to the value given by
<a href="/docs/accelerate/main/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"num_processes"},{anchor:"accelerate.data_loader.prepare_data_loader.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The index of the current process. Will default to the value given by <a href="/docs/accelerate/main/en/internal#accelerate.state.AcceleratorState">AcceleratorState</a>.`,name:"process_index"},{anchor:"accelerate.data_loader.prepare_data_loader.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the resulting <code>DataLoader</code> should split the batches of the original data loader across devices or
yield full batches (in which case it will yield batches starting at the <code>process_index</code>-th and advancing of
<code>num_processes</code> batches at each iteration).</p>
<p>Another way to see this is that the observed batch size will be the same as the initial <code>dataloader</code> if
this option is set to <code>True</code>, the batch size of the initial <code>dataloader</code> multiplied by <code>num_processes</code>
otherwise.</p>
<p>Setting this option to <code>True</code> requires that the batch size of the <code>dataloader</code> is a round multiple of
<code>batch_size</code>.`,name:"split_batches"},{anchor:"accelerate.data_loader.prepare_data_loader.put_on_device",description:`<strong>put_on_device</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to put the batches on <code>device</code> (only works if the batches are nested list, tuples or
dictionaries of tensors).`,name:"put_on_device"},{anchor:"accelerate.data_loader.prepare_data_loader.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.prepare_data_loader.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the datalaoder prepared is only iterated through on the main process and then the batches
are split and broadcast to each process. Will default to <code>True</code> when the underlying dataset is an
<code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L493",returnDescription:`
<p>A new data loader that will yield the portion of the batches</p>
`,returnType:`
<p><code>torch.utils.data.dataloader.DataLoader</code></p>
`}}),de=new Ms({props:{warning:!0,$$slots:{default:[Ys]},$$scope:{ctx:rt}}}),Ce=new B({}),Ge=new L({props:{name:"class accelerate.data_loader.DataLoaderShard",anchor:"accelerate.data_loader.DataLoaderShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.DataLoaderShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.Dataset</code>) &#x2014;
The dataset to use to build this datalaoder.`,name:"dataset"},{anchor:"accelerate.data_loader.DataLoaderShard.device",description:`<strong>device</strong> (<code>torch.device</code>, <em>optional</em>) &#x2014;
If passed, the device to put all batches on.`,name:"device"},{anchor:"accelerate.data_loader.DataLoaderShard.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration. Should be one or
several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: an optional <code>torch.Generator</code></li>
</ul>`,name:"rng_types"},{anchor:"accelerate.data_loader.DataLoaderShard.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A random number generator to keep synchronized across processes.
kwargs &#x2014;
All other keyword arguments to pass to the regular <code>DataLoader</code> initialization.`,name:"generator"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L287"}}),Be=new B({}),qe=new L({props:{name:"class accelerate.data_loader.BatchSamplerShard",anchor:"accelerate.data_loader.BatchSamplerShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.BatchSamplerShard.batch_sampler",description:`<strong>batch_sampler</strong> (<code>torch.utils.data.sampler.BatchSampler</code>) &#x2014;
The batch sampler to split in several shards.`,name:"batch_sampler"},{anchor:"accelerate.data_loader.BatchSamplerShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.BatchSamplerShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.BatchSamplerShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with a sampler of <code>[[0, 1, 2, 3], [4, 5, 6, 7]]</code>, this will result in:</p>
<ul>
<li>the sampler on process 0 to yield <code>[0, 1, 2, 3]</code> and the sampler on process 1 to yield <code>[4, 5, 6, 7]</code> if
this argument is set to <code>False</code>.</li>
<li>the sampler on process 0 to yield <code>[0, 1]</code> then <code>[4, 5]</code> and the sampler on process 1 to yield <code>[2, 3]</code>
then <code>[6, 7]</code> if this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L85"}}),ue=new Ms({props:{warning:!0,$$slots:{default:[Zs]},$$scope:{ctx:rt}}}),Fe=new B({}),Ve=new L({props:{name:"class accelerate.data_loader.IterableDatasetShard",anchor:"accelerate.data_loader.IterableDatasetShard",parameters:[{name:"*args",val:""},{name:"**kwds",val:""}],parametersDescription:[{anchor:"accelerate.data_loader.IterableDatasetShard.dataset",description:`<strong>dataset</strong> (<code>torch.utils.data.dataset.IterableDataset</code>) &#x2014;
The batch sampler to split in several shards.`,name:"dataset"},{anchor:"accelerate.data_loader.IterableDatasetShard.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The size of the batches per shard (if <code>split_batches=False</code>) or the size of the batches (if
<code>split_batches=True</code>).`,name:"batch_size"},{anchor:"accelerate.data_loader.IterableDatasetShard.drop_last",description:`<strong>drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to drop the last incomplete batch or complete the last batches by using the samples from the
beginning.`,name:"drop_last"},{anchor:"accelerate.data_loader.IterableDatasetShard.num_processes",description:`<strong>num_processes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of processes running concurrently.`,name:"num_processes"},{anchor:"accelerate.data_loader.IterableDatasetShard.process_index",description:`<strong>process_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The index of the current process.`,name:"process_index"},{anchor:"accelerate.data_loader.IterableDatasetShard.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the shards should be created by splitting a batch to give a piece of it on each process, or by
yielding different full batches on each process.</p>
<p>On two processes with an iterable dataset yielding of <code>[0, 1, 2, 3, 4, 5, 6, 7]</code>, this will result in:</p>
<ul>
<li>the shard on process 0 to yield <code>[0, 1, 2, 3]</code> and the shard on process 1 to yield <code>[4, 5, 6, 7]</code> if this
argument is set to <code>False</code>.</li>
<li>the shard on process 0 to yield <code>[0, 1, 4, 5]</code> and the sampler on process 1 to yield <code>[2, 3, 6, 7]</code> if
this argument is set to <code>True</code>.</li>
</ul>`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/data_loader.py#L206"}}),Ue=new B({}),He=new L({props:{name:"class accelerate.scheduler.AcceleratedScheduler",anchor:"accelerate.scheduler.AcceleratedScheduler",parameters:[{name:"scheduler",val:""},{name:"optimizers",val:""},{name:"step_with_optimizer",val:": bool = True"},{name:"split_batches",val:": bool = False"}],parametersDescription:[{anchor:"accelerate.scheduler.AcceleratedScheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
The scheduler to wrap.`,name:"scheduler"},{anchor:"accelerate.scheduler.AcceleratedScheduler.optimizers",description:`<strong>optimizers</strong> (one or a list of <code>torch.optim.Optimizer</code>) &#x2014;
The optimizers used.`,name:"optimizers"},{anchor:"accelerate.scheduler.AcceleratedScheduler.step_with_optimizer",description:`<strong>step_with_optimizer</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the scheduler should be stepped at each optimizer step.`,name:"step_with_optimizer"},{anchor:"accelerate.scheduler.AcceleratedScheduler.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the dataloaders split one batch across the different processes (so batch size is the same
regardless of the number of processes) or create batches on each process (so batch size is the original
batch size multiplied by the number of processes).`,name:"split_batches"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/scheduler.py#L25"}}),Re=new B({}),Me=new B({}),je=new L({props:{name:"class accelerate.state.AcceleratorState",anchor:"accelerate.state.AcceleratorState",parameters:[{name:"mixed_precision",val:": str = None"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:" = None"},{name:"fsdp_plugin",val:" = None"},{name:"_from_accelerator",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>device</strong> (<code>torch.device</code>) &#x2014; The device to use. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>sync_gradients</strong> (<code>bool</code>) &#x2014; Whether to sync the gradients or not &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>distributed_type</strong> (<code>~accelerate.state.DistributedType</code>) &#x2014; The type of distributed environment currently &#x2014;
in use.`,name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>num_processes</strong> (<code>int</code>) &#x2014; The number of processes currently launched in parallel. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>process_index</strong> (<code>int</code>) &#x2014; The index of the current process. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:"<strong>-</strong> <strong>local_process_index</strong> (<code>int</code>) &#x2014; The index of the current process on the current server. &#x2014;",name:"-"},{anchor:"accelerate.state.AcceleratorState.-",description:`<strong>-</strong> <strong>mixed_precision</strong> (<code>str</code>) &#x2014; Whether or not the current script will use mixed precision. If you are using &#x2014;
mixed precision, define if you want to use FP16 or BF16 (bfloat16) as the floating point.`,name:"-"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/state.py#L48"}}),Je=new B({}),Ke=new L({props:{name:"class accelerate.tracking.GeneralTracker",anchor:"accelerate.tracking.GeneralTracker",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L52"}}),Qe=new L({props:{name:"finish",anchor:"accelerate.tracking.GeneralTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L99"}}),Ye=new L({props:{name:"log",anchor:"accelerate.tracking.GeneralTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, or <code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, or <code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.GeneralTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L85"}}),Ze=new L({props:{name:"store_init_configuration",anchor:"accelerate.tracking.GeneralTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.GeneralTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L72"}}),{c(){u=r("meta"),z=i(),$=r("h1"),S=r("a"),x=r("span"),f(w.$$.fragment),y=i(),O=r("span"),lr=s("Internals"),$a=i(),F=r("h2"),oe=r("a"),ut=r("span"),f(Ae.$$.fragment),cr=i(),ft=r("span"),ir=s("Gradient Accumulation states"),wa=i(),A=r("div"),f(ke.$$.fragment),dr=i(),V=r("p"),hr=s("This is a variation of a "),Te=r("a"),pr=s("singleton class"),ur=s(` in the sense that all
instance of `),mt=r("code"),fr=s("GradientState"),mr=s(" share the same state, which is initialized on the first instantiation."),gr=i(),gt=r("p"),vr=s(`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),br=i(),ze=r("ul"),ne=r("li"),vt=r("strong"),_r=s("sync_gradients"),$r=s(" ("),bt=r("code"),wr=s("bool"),yr=s(") \u2014 Whether the gradients should be synced"),Er=i(),se=r("li"),_t=r("strong"),Sr=s("end_of_dataloader"),Dr=s(" ("),$t=r("code"),xr=s("bool"),Ar=s(") \u2014 Whether we have reached the end the current dataloader"),ya=i(),U=r("h2"),le=r("a"),wt=r("span"),f(Pe.$$.fragment),kr=i(),yt=r("span"),Tr=s("Optimizer"),Ea=i(),N=r("div"),f(Ie.$$.fragment),zr=i(),Et=r("p"),Pr=s("Internal wrapper around a torch optimizer."),Ir=i(),H=r("p"),Lr=s("Conditionally will perform "),St=r("code"),Or=s("step"),Nr=s(" and "),Dt=r("code"),Cr=s("zero_grad"),Gr=s(` if gradients should be synchronized when performing gradient
accumulation.`),Sa=i(),R=r("h2"),ce=r("a"),xt=r("span"),f(Le.$$.fragment),Wr=i(),At=r("span"),Br=s("DataLoader"),Da=i(),ie=r("p"),qr=s("The main work on your PyTorch "),kt=r("code"),Fr=s("DataLoader"),Vr=s(" is done by the following function:"),xa=i(),k=r("div"),f(Oe.$$.fragment),Ur=i(),Ne=r("p"),Hr=s("Wraps a PyTorch "),Tt=r("code"),Rr=s("DataLoader"),Mr=s(" to generate batches for one of the processes only."),jr=i(),M=r("p"),Xr=s("Depending on the value of the "),zt=r("code"),Jr=s("drop_last"),Kr=s(" attribute of the "),Pt=r("code"),Qr=s("dataloader"),Yr=s(` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),Zr=i(),f(de.$$.fragment),Aa=i(),j=r("h3"),he=r("a"),It=r("span"),f(Ce.$$.fragment),eo=i(),Lt=r("span"),to=s("DataLoaderShard"),ka=i(),T=r("div"),f(Ge.$$.fragment),ao=i(),We=r("p"),ro=s("Subclass of a PyTorch "),Ot=r("code"),oo=s("DataLoader"),no=s(" that will deal with device placement and current distributed setup."),so=i(),Nt=r("p"),Ct=r("strong"),lo=s("Available attributes:"),co=i(),Gt=r("ul"),q=r("li"),Wt=r("strong"),io=s("total_batch_size"),ho=s(" ("),Bt=r("code"),po=s("int"),uo=s(`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),qt=r("code"),fo=s("split_batches=True"),mo=s(`; otherwise the original batch size * the total
number of processes`),Ta=i(),X=r("h3"),pe=r("a"),Ft=r("span"),f(Be.$$.fragment),go=i(),Vt=r("span"),vo=s("BatchSamplerShard"),za=i(),C=r("div"),f(qe.$$.fragment),bo=i(),G=r("p"),_o=s("Wraps a PyTorch "),Ut=r("code"),$o=s("BatchSampler"),wo=s(` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Ht=r("code"),yo=s("num_processes"),Eo=s(` and that all have the same size.
Depending on the value of the `),Rt=r("code"),So=s("drop_last"),Do=s(` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),xo=i(),f(ue.$$.fragment),Pa=i(),J=r("h3"),fe=r("a"),Mt=r("span"),f(Fe.$$.fragment),Ao=i(),jt=r("span"),ko=s("IterableDatasetShard"),Ia=i(),K=r("div"),f(Ve.$$.fragment),To=i(),D=r("p"),zo=s("Wraps a PyTorch "),Xt=r("code"),Po=s("IterableDataset"),Io=s(` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Jt=r("code"),Lo=s("split_batches"),Oo=s(", this is either "),Kt=r("code"),No=s("batch_size"),Co=s(" or "),Qt=r("code"),Go=s("batch_size x num_processes"),Wo=s(`). Depending on the value of the
`),Yt=r("code"),Bo=s("drop_last"),qo=s(` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),La=i(),Q=r("h2"),me=r("a"),Zt=r("span"),f(Ue.$$.fragment),Fo=i(),ea=r("span"),Vo=s("Scheduler"),Oa=i(),W=r("div"),f(He.$$.fragment),Uo=i(),ta=r("p"),Ho=s(`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),Ro=i(),aa=r("p"),Mo=s(`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),Na=i(),Y=r("h2"),ge=r("a"),ra=r("span"),f(Re.$$.fragment),jo=i(),oa=r("span"),Xo=s("Distributed Config"),Ca=i(),Z=r("h3"),ve=r("a"),na=r("span"),f(Me.$$.fragment),Jo=i(),sa=r("span"),Ko=s("AcceleratorState"),Ga=i(),ee=r("div"),f(je.$$.fragment),Qo=i(),te=r("p"),Yo=s("This is a variation of a "),Xe=r("a"),Zo=s("singleton class"),en=s(` in the sense that all
instance of `),la=r("code"),tn=s("AcceleratorState"),an=s(" share the same state, which is initialized on the first instantiation."),Wa=i(),ae=r("h2"),be=r("a"),ca=r("span"),f(Je.$$.fragment),rn=i(),ia=r("span"),on=s("Tracking"),Ba=i(),E=r("div"),f(Ke.$$.fragment),nn=i(),da=r("p"),sn=s("A base Tracker class to be used for all logging integration implementations."),ln=i(),_e=r("p"),cn=s("Each function should take in "),ha=r("code"),dn=s("**kwargs"),hn=s(` that will automatically be passed in from a base dictionary provided to
`),ot=r("a"),pn=s("Accelerator"),un=i(),$e=r("div"),f(Qe.$$.fragment),fn=i(),pa=r("p"),mn=s(`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),gn=i(),we=r("div"),f(Ye.$$.fragment),vn=i(),re=r("p"),bn=s("Logs "),ua=r("code"),_n=s("values"),$n=s(" to the current run. Base "),fa=r("code"),wn=s("log"),yn=s(" implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),En=i(),ye=r("div"),f(Ze.$$.fragment),Sn=i(),et=r("p"),Dn=s("Logs "),ma=r("code"),xn=s("values"),An=s(` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),this.h()},l(t){const h=Ks('[data-svelte="svelte-1phssyn"]',document.head);u=o(h,"META",{name:!0,content:!0}),h.forEach(a),z=d(t),$=o(t,"H1",{class:!0});var tt=n($);S=o(tt,"A",{id:!0,class:!0,href:!0});var ga=n(S);x=o(ga,"SPAN",{});var kn=n(x);m(w.$$.fragment,kn),kn.forEach(a),ga.forEach(a),y=d(tt),O=o(tt,"SPAN",{});var Tn=n(O);lr=l(Tn,"Internals"),Tn.forEach(a),tt.forEach(a),$a=d(t),F=o(t,"H2",{class:!0});var Fa=n(F);oe=o(Fa,"A",{id:!0,class:!0,href:!0});var zn=n(oe);ut=o(zn,"SPAN",{});var Pn=n(ut);m(Ae.$$.fragment,Pn),Pn.forEach(a),zn.forEach(a),cr=d(Fa),ft=o(Fa,"SPAN",{});var In=n(ft);ir=l(In,"Gradient Accumulation states"),In.forEach(a),Fa.forEach(a),wa=d(t),A=o(t,"DIV",{class:!0});var Ee=n(A);m(ke.$$.fragment,Ee),dr=d(Ee),V=o(Ee,"P",{});var nt=n(V);hr=l(nt,"This is a variation of a "),Te=o(nt,"A",{href:!0,rel:!0});var Ln=n(Te);pr=l(Ln,"singleton class"),Ln.forEach(a),ur=l(nt,` in the sense that all
instance of `),mt=o(nt,"CODE",{});var On=n(mt);fr=l(On,"GradientState"),On.forEach(a),mr=l(nt," share the same state, which is initialized on the first instantiation."),nt.forEach(a),gr=d(Ee),gt=o(Ee,"P",{});var Nn=n(gt);vr=l(Nn,`This specific state revolves around whether gradients should be synced and if we have reached the end of a prepared
dataloader Attributes:`),Nn.forEach(a),br=d(Ee),ze=o(Ee,"UL",{});var Va=n(ze);ne=o(Va,"LI",{});var va=n(ne);vt=o(va,"STRONG",{});var Cn=n(vt);_r=l(Cn,"sync_gradients"),Cn.forEach(a),$r=l(va," ("),bt=o(va,"CODE",{});var Gn=n(bt);wr=l(Gn,"bool"),Gn.forEach(a),yr=l(va,") \u2014 Whether the gradients should be synced"),va.forEach(a),Er=d(Va),se=o(Va,"LI",{});var ba=n(se);_t=o(ba,"STRONG",{});var Wn=n(_t);Sr=l(Wn,"end_of_dataloader"),Wn.forEach(a),Dr=l(ba," ("),$t=o(ba,"CODE",{});var Bn=n($t);xr=l(Bn,"bool"),Bn.forEach(a),Ar=l(ba,") \u2014 Whether we have reached the end the current dataloader"),ba.forEach(a),Va.forEach(a),Ee.forEach(a),ya=d(t),U=o(t,"H2",{class:!0});var Ua=n(U);le=o(Ua,"A",{id:!0,class:!0,href:!0});var qn=n(le);wt=o(qn,"SPAN",{});var Fn=n(wt);m(Pe.$$.fragment,Fn),Fn.forEach(a),qn.forEach(a),kr=d(Ua),yt=o(Ua,"SPAN",{});var Vn=n(yt);Tr=l(Vn,"Optimizer"),Vn.forEach(a),Ua.forEach(a),Ea=d(t),N=o(t,"DIV",{class:!0});var st=n(N);m(Ie.$$.fragment,st),zr=d(st),Et=o(st,"P",{});var Un=n(Et);Pr=l(Un,"Internal wrapper around a torch optimizer."),Un.forEach(a),Ir=d(st),H=o(st,"P",{});var lt=n(H);Lr=l(lt,"Conditionally will perform "),St=o(lt,"CODE",{});var Hn=n(St);Or=l(Hn,"step"),Hn.forEach(a),Nr=l(lt," and "),Dt=o(lt,"CODE",{});var Rn=n(Dt);Cr=l(Rn,"zero_grad"),Rn.forEach(a),Gr=l(lt,` if gradients should be synchronized when performing gradient
accumulation.`),lt.forEach(a),st.forEach(a),Sa=d(t),R=o(t,"H2",{class:!0});var Ha=n(R);ce=o(Ha,"A",{id:!0,class:!0,href:!0});var Mn=n(ce);xt=o(Mn,"SPAN",{});var jn=n(xt);m(Le.$$.fragment,jn),jn.forEach(a),Mn.forEach(a),Wr=d(Ha),At=o(Ha,"SPAN",{});var Xn=n(At);Br=l(Xn,"DataLoader"),Xn.forEach(a),Ha.forEach(a),Da=d(t),ie=o(t,"P",{});var Ra=n(ie);qr=l(Ra,"The main work on your PyTorch "),kt=o(Ra,"CODE",{});var Jn=n(kt);Fr=l(Jn,"DataLoader"),Jn.forEach(a),Vr=l(Ra," is done by the following function:"),Ra.forEach(a),xa=d(t),k=o(t,"DIV",{class:!0});var Se=n(k);m(Oe.$$.fragment,Se),Ur=d(Se),Ne=o(Se,"P",{});var Ma=n(Ne);Hr=l(Ma,"Wraps a PyTorch "),Tt=o(Ma,"CODE",{});var Kn=n(Tt);Rr=l(Kn,"DataLoader"),Kn.forEach(a),Mr=l(Ma," to generate batches for one of the processes only."),Ma.forEach(a),jr=d(Se),M=o(Se,"P",{});var ct=n(M);Xr=l(ct,"Depending on the value of the "),zt=o(ct,"CODE",{});var Qn=n(zt);Jr=l(Qn,"drop_last"),Qn.forEach(a),Kr=l(ct," attribute of the "),Pt=o(ct,"CODE",{});var Yn=n(Pt);Qr=l(Yn,"dataloader"),Yn.forEach(a),Yr=l(ct,` passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),ct.forEach(a),Zr=d(Se),m(de.$$.fragment,Se),Se.forEach(a),Aa=d(t),j=o(t,"H3",{class:!0});var ja=n(j);he=o(ja,"A",{id:!0,class:!0,href:!0});var Zn=n(he);It=o(Zn,"SPAN",{});var es=n(It);m(Ce.$$.fragment,es),es.forEach(a),Zn.forEach(a),eo=d(ja),Lt=o(ja,"SPAN",{});var ts=n(Lt);to=l(ts,"DataLoaderShard"),ts.forEach(a),ja.forEach(a),ka=d(t),T=o(t,"DIV",{class:!0});var De=n(T);m(Ge.$$.fragment,De),ao=d(De),We=o(De,"P",{});var Xa=n(We);ro=l(Xa,"Subclass of a PyTorch "),Ot=o(Xa,"CODE",{});var as=n(Ot);oo=l(as,"DataLoader"),as.forEach(a),no=l(Xa," that will deal with device placement and current distributed setup."),Xa.forEach(a),so=d(De),Nt=o(De,"P",{});var rs=n(Nt);Ct=o(rs,"STRONG",{});var os=n(Ct);lo=l(os,"Available attributes:"),os.forEach(a),rs.forEach(a),co=d(De),Gt=o(De,"UL",{});var ns=n(Gt);q=o(ns,"LI",{});var at=n(q);Wt=o(at,"STRONG",{});var ss=n(Wt);io=l(ss,"total_batch_size"),ss.forEach(a),ho=l(at," ("),Bt=o(at,"CODE",{});var ls=n(Bt);po=l(ls,"int"),ls.forEach(a),uo=l(at,`) \u2014 Total batch size of the dataloader across all processes.
Equal to the original batch size when `),qt=o(at,"CODE",{});var cs=n(qt);fo=l(cs,"split_batches=True"),cs.forEach(a),mo=l(at,`; otherwise the original batch size * the total
number of processes`),at.forEach(a),ns.forEach(a),De.forEach(a),Ta=d(t),X=o(t,"H3",{class:!0});var Ja=n(X);pe=o(Ja,"A",{id:!0,class:!0,href:!0});var is=n(pe);Ft=o(is,"SPAN",{});var ds=n(Ft);m(Be.$$.fragment,ds),ds.forEach(a),is.forEach(a),go=d(Ja),Vt=o(Ja,"SPAN",{});var hs=n(Vt);vo=l(hs,"BatchSamplerShard"),hs.forEach(a),Ja.forEach(a),za=d(t),C=o(t,"DIV",{class:!0});var it=n(C);m(qe.$$.fragment,it),bo=d(it),G=o(it,"P",{});var xe=n(G);_o=l(xe,"Wraps a PyTorch "),Ut=o(xe,"CODE",{});var ps=n(Ut);$o=l(ps,"BatchSampler"),ps.forEach(a),wo=l(xe,` to generate batches for one of the processes only. Instances of this class will
always yield a number of batches that is a round multiple of `),Ht=o(xe,"CODE",{});var us=n(Ht);yo=l(us,"num_processes"),us.forEach(a),Eo=l(xe,` and that all have the same size.
Depending on the value of the `),Rt=o(xe,"CODE",{});var fs=n(Rt);So=l(fs,"drop_last"),fs.forEach(a),Do=l(xe,` attribute of the batch sampler passed, it will either stop the iteration
at the first batch that would be too small / not present on all processes or loop with indices from the beginning.`),xe.forEach(a),xo=d(it),m(ue.$$.fragment,it),it.forEach(a),Pa=d(t),J=o(t,"H3",{class:!0});var Ka=n(J);fe=o(Ka,"A",{id:!0,class:!0,href:!0});var ms=n(fe);Mt=o(ms,"SPAN",{});var gs=n(Mt);m(Fe.$$.fragment,gs),gs.forEach(a),ms.forEach(a),Ao=d(Ka),jt=o(Ka,"SPAN",{});var vs=n(jt);ko=l(vs,"IterableDatasetShard"),vs.forEach(a),Ka.forEach(a),Ia=d(t),K=o(t,"DIV",{class:!0});var Qa=n(K);m(Ve.$$.fragment,Qa),To=d(Qa),D=o(Qa,"P",{});var P=n(D);zo=l(P,"Wraps a PyTorch "),Xt=o(P,"CODE",{});var bs=n(Xt);Po=l(bs,"IterableDataset"),bs.forEach(a),Io=l(P,` to generate samples for one of the processes only. Instances of this class will
always yield a number of samples that is a round multiple of the actual batch size (depending of the value of
`),Jt=o(P,"CODE",{});var _s=n(Jt);Lo=l(_s,"split_batches"),_s.forEach(a),Oo=l(P,", this is either "),Kt=o(P,"CODE",{});var $s=n(Kt);No=l($s,"batch_size"),$s.forEach(a),Co=l(P," or "),Qt=o(P,"CODE",{});var ws=n(Qt);Go=l(ws,"batch_size x num_processes"),ws.forEach(a),Wo=l(P,`). Depending on the value of the
`),Yt=o(P,"CODE",{});var ys=n(Yt);Bo=l(ys,"drop_last"),ys.forEach(a),qo=l(P,` attribute of the batch sampler passed, it will either stop the iteration at the first batch that would
be too small or loop with indices from the beginning.`),P.forEach(a),Qa.forEach(a),La=d(t),Q=o(t,"H2",{class:!0});var Ya=n(Q);me=o(Ya,"A",{id:!0,class:!0,href:!0});var Es=n(me);Zt=o(Es,"SPAN",{});var Ss=n(Zt);m(Ue.$$.fragment,Ss),Ss.forEach(a),Es.forEach(a),Fo=d(Ya),ea=o(Ya,"SPAN",{});var Ds=n(ea);Vo=l(Ds,"Scheduler"),Ds.forEach(a),Ya.forEach(a),Oa=d(t),W=o(t,"DIV",{class:!0});var dt=n(W);m(He.$$.fragment,dt),Uo=d(dt),ta=o(dt,"P",{});var xs=n(ta);Ho=l(xs,`A wrapper around a learning rate scheduler that will only step when the optimizer(s) have a training step. Useful
to avoid making a scheduler step too fast when gradients went overflow and there was no training step (in mixed
precision training)`),xs.forEach(a),Ro=d(dt),aa=o(dt,"P",{});var As=n(aa);Mo=l(As,`When performing gradient accumulation scheduler lengths should not be changed accordingly, accelerate will always
step the scheduler to account for it.`),As.forEach(a),dt.forEach(a),Na=d(t),Y=o(t,"H2",{class:!0});var Za=n(Y);ge=o(Za,"A",{id:!0,class:!0,href:!0});var ks=n(ge);ra=o(ks,"SPAN",{});var Ts=n(ra);m(Re.$$.fragment,Ts),Ts.forEach(a),ks.forEach(a),jo=d(Za),oa=o(Za,"SPAN",{});var zs=n(oa);Xo=l(zs,"Distributed Config"),zs.forEach(a),Za.forEach(a),Ca=d(t),Z=o(t,"H3",{class:!0});var er=n(Z);ve=o(er,"A",{id:!0,class:!0,href:!0});var Ps=n(ve);na=o(Ps,"SPAN",{});var Is=n(na);m(Me.$$.fragment,Is),Is.forEach(a),Ps.forEach(a),Jo=d(er),sa=o(er,"SPAN",{});var Ls=n(sa);Ko=l(Ls,"AcceleratorState"),Ls.forEach(a),er.forEach(a),Ga=d(t),ee=o(t,"DIV",{class:!0});var tr=n(ee);m(je.$$.fragment,tr),Qo=d(tr),te=o(tr,"P",{});var ht=n(te);Yo=l(ht,"This is a variation of a "),Xe=o(ht,"A",{href:!0,rel:!0});var Os=n(Xe);Zo=l(Os,"singleton class"),Os.forEach(a),en=l(ht,` in the sense that all
instance of `),la=o(ht,"CODE",{});var Ns=n(la);tn=l(Ns,"AcceleratorState"),Ns.forEach(a),an=l(ht," share the same state, which is initialized on the first instantiation."),ht.forEach(a),tr.forEach(a),Wa=d(t),ae=o(t,"H2",{class:!0});var ar=n(ae);be=o(ar,"A",{id:!0,class:!0,href:!0});var Cs=n(be);ca=o(Cs,"SPAN",{});var Gs=n(ca);m(Je.$$.fragment,Gs),Gs.forEach(a),Cs.forEach(a),rn=d(ar),ia=o(ar,"SPAN",{});var Ws=n(ia);on=l(Ws,"Tracking"),Ws.forEach(a),ar.forEach(a),Ba=d(t),E=o(t,"DIV",{class:!0});var I=n(E);m(Ke.$$.fragment,I),nn=d(I),da=o(I,"P",{});var Bs=n(da);sn=l(Bs,"A base Tracker class to be used for all logging integration implementations."),Bs.forEach(a),ln=d(I),_e=o(I,"P",{});var _a=n(_e);cn=l(_a,"Each function should take in "),ha=o(_a,"CODE",{});var qs=n(ha);dn=l(qs,"**kwargs"),qs.forEach(a),hn=l(_a,` that will automatically be passed in from a base dictionary provided to
`),ot=o(_a,"A",{href:!0});var Fs=n(ot);pn=l(Fs,"Accelerator"),Fs.forEach(a),_a.forEach(a),un=d(I),$e=o(I,"DIV",{class:!0});var rr=n($e);m(Qe.$$.fragment,rr),fn=d(rr),pa=o(rr,"P",{});var Vs=n(pa);mn=l(Vs,`Should run any finalizing functions within the tracking API. If the API should not have one, just don\u2019t
overwrite that method.`),Vs.forEach(a),rr.forEach(a),gn=d(I),we=o(I,"DIV",{class:!0});var or=n(we);m(Ye.$$.fragment,or),vn=d(or),re=o(or,"P",{});var pt=n(re);bn=l(pt,"Logs "),ua=o(pt,"CODE",{});var Us=n(ua);_n=l(Us,"values"),Us.forEach(a),$n=l(pt," to the current run. Base "),fa=o(pt,"CODE",{});var Hs=n(fa);wn=l(Hs,"log"),Hs.forEach(a),yn=l(pt," implementations of a tracking API should go in here, along with\nspecial behavior for the `step parameter."),pt.forEach(a),or.forEach(a),En=d(I),ye=o(I,"DIV",{class:!0});var nr=n(ye);m(Ze.$$.fragment,nr),Sn=d(nr),et=o(nr,"P",{});var sr=n(et);Dn=l(sr,"Logs "),ma=o(sr,"CODE",{});var Rs=n(ma);xn=l(Rs,"values"),Rs.forEach(a),An=l(sr,` as hyperparameters for the run. Implementations should use the experiment configuration
functionality of a tracking API.`),sr.forEach(a),nr.forEach(a),I.forEach(a),this.h()},h(){c(u,"name","hf:doc:metadata"),c(u,"content",JSON.stringify(tl)),c(S,"id","internals"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#internals"),c($,"class","relative group"),c(oe,"id","accelerate.state.GradientState"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#accelerate.state.GradientState"),c(F,"class","relative group"),c(Te,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Te,"rel","nofollow"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"id","accelerate.optimizer.AcceleratedOptimizer"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#accelerate.optimizer.AcceleratedOptimizer"),c(U,"class","relative group"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ce,"id","accelerate.data_loader.prepare_data_loader"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#accelerate.data_loader.prepare_data_loader"),c(R,"class","relative group"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(he,"id","accelerate.data_loader.DataLoaderShard"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#accelerate.data_loader.DataLoaderShard"),c(j,"class","relative group"),c(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pe,"id","accelerate.data_loader.BatchSamplerShard"),c(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pe,"href","#accelerate.data_loader.BatchSamplerShard"),c(X,"class","relative group"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fe,"id","accelerate.data_loader.IterableDatasetShard"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#accelerate.data_loader.IterableDatasetShard"),c(J,"class","relative group"),c(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","accelerate.scheduler.AcceleratedScheduler"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#accelerate.scheduler.AcceleratedScheduler"),c(Q,"class","relative group"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","distributed-config"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#distributed-config"),c(Y,"class","relative group"),c(ve,"id","accelerate.state.AcceleratorState"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#accelerate.state.AcceleratorState"),c(Z,"class","relative group"),c(Xe,"href","https://en.wikipedia.org/wiki/Singleton_pattern"),c(Xe,"rel","nofollow"),c(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(be,"id","accelerate.tracking.GeneralTracker"),c(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(be,"href","#accelerate.tracking.GeneralTracker"),c(ae,"class","relative group"),c(ot,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator"),c($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,h){e(document.head,u),p(t,z,h),p(t,$,h),e($,S),e(S,x),g(w,x,null),e($,y),e($,O),e(O,lr),p(t,$a,h),p(t,F,h),e(F,oe),e(oe,ut),g(Ae,ut,null),e(F,cr),e(F,ft),e(ft,ir),p(t,wa,h),p(t,A,h),g(ke,A,null),e(A,dr),e(A,V),e(V,hr),e(V,Te),e(Te,pr),e(V,ur),e(V,mt),e(mt,fr),e(V,mr),e(A,gr),e(A,gt),e(gt,vr),e(A,br),e(A,ze),e(ze,ne),e(ne,vt),e(vt,_r),e(ne,$r),e(ne,bt),e(bt,wr),e(ne,yr),e(ze,Er),e(ze,se),e(se,_t),e(_t,Sr),e(se,Dr),e(se,$t),e($t,xr),e(se,Ar),p(t,ya,h),p(t,U,h),e(U,le),e(le,wt),g(Pe,wt,null),e(U,kr),e(U,yt),e(yt,Tr),p(t,Ea,h),p(t,N,h),g(Ie,N,null),e(N,zr),e(N,Et),e(Et,Pr),e(N,Ir),e(N,H),e(H,Lr),e(H,St),e(St,Or),e(H,Nr),e(H,Dt),e(Dt,Cr),e(H,Gr),p(t,Sa,h),p(t,R,h),e(R,ce),e(ce,xt),g(Le,xt,null),e(R,Wr),e(R,At),e(At,Br),p(t,Da,h),p(t,ie,h),e(ie,qr),e(ie,kt),e(kt,Fr),e(ie,Vr),p(t,xa,h),p(t,k,h),g(Oe,k,null),e(k,Ur),e(k,Ne),e(Ne,Hr),e(Ne,Tt),e(Tt,Rr),e(Ne,Mr),e(k,jr),e(k,M),e(M,Xr),e(M,zt),e(zt,Jr),e(M,Kr),e(M,Pt),e(Pt,Qr),e(M,Yr),e(k,Zr),g(de,k,null),p(t,Aa,h),p(t,j,h),e(j,he),e(he,It),g(Ce,It,null),e(j,eo),e(j,Lt),e(Lt,to),p(t,ka,h),p(t,T,h),g(Ge,T,null),e(T,ao),e(T,We),e(We,ro),e(We,Ot),e(Ot,oo),e(We,no),e(T,so),e(T,Nt),e(Nt,Ct),e(Ct,lo),e(T,co),e(T,Gt),e(Gt,q),e(q,Wt),e(Wt,io),e(q,ho),e(q,Bt),e(Bt,po),e(q,uo),e(q,qt),e(qt,fo),e(q,mo),p(t,Ta,h),p(t,X,h),e(X,pe),e(pe,Ft),g(Be,Ft,null),e(X,go),e(X,Vt),e(Vt,vo),p(t,za,h),p(t,C,h),g(qe,C,null),e(C,bo),e(C,G),e(G,_o),e(G,Ut),e(Ut,$o),e(G,wo),e(G,Ht),e(Ht,yo),e(G,Eo),e(G,Rt),e(Rt,So),e(G,Do),e(C,xo),g(ue,C,null),p(t,Pa,h),p(t,J,h),e(J,fe),e(fe,Mt),g(Fe,Mt,null),e(J,Ao),e(J,jt),e(jt,ko),p(t,Ia,h),p(t,K,h),g(Ve,K,null),e(K,To),e(K,D),e(D,zo),e(D,Xt),e(Xt,Po),e(D,Io),e(D,Jt),e(Jt,Lo),e(D,Oo),e(D,Kt),e(Kt,No),e(D,Co),e(D,Qt),e(Qt,Go),e(D,Wo),e(D,Yt),e(Yt,Bo),e(D,qo),p(t,La,h),p(t,Q,h),e(Q,me),e(me,Zt),g(Ue,Zt,null),e(Q,Fo),e(Q,ea),e(ea,Vo),p(t,Oa,h),p(t,W,h),g(He,W,null),e(W,Uo),e(W,ta),e(ta,Ho),e(W,Ro),e(W,aa),e(aa,Mo),p(t,Na,h),p(t,Y,h),e(Y,ge),e(ge,ra),g(Re,ra,null),e(Y,jo),e(Y,oa),e(oa,Xo),p(t,Ca,h),p(t,Z,h),e(Z,ve),e(ve,na),g(Me,na,null),e(Z,Jo),e(Z,sa),e(sa,Ko),p(t,Ga,h),p(t,ee,h),g(je,ee,null),e(ee,Qo),e(ee,te),e(te,Yo),e(te,Xe),e(Xe,Zo),e(te,en),e(te,la),e(la,tn),e(te,an),p(t,Wa,h),p(t,ae,h),e(ae,be),e(be,ca),g(Je,ca,null),e(ae,rn),e(ae,ia),e(ia,on),p(t,Ba,h),p(t,E,h),g(Ke,E,null),e(E,nn),e(E,da),e(da,sn),e(E,ln),e(E,_e),e(_e,cn),e(_e,ha),e(ha,dn),e(_e,hn),e(_e,ot),e(ot,pn),e(E,un),e(E,$e),g(Qe,$e,null),e($e,fn),e($e,pa),e(pa,mn),e(E,gn),e(E,we),g(Ye,we,null),e(we,vn),e(we,re),e(re,bn),e(re,ua),e(ua,_n),e(re,$n),e(re,fa),e(fa,wn),e(re,yn),e(E,En),e(E,ye),g(Ze,ye,null),e(ye,Sn),e(ye,et),e(et,Dn),e(et,ma),e(ma,xn),e(et,An),qa=!0},p(t,[h]){const tt={};h&2&&(tt.$$scope={dirty:h,ctx:t}),de.$set(tt);const ga={};h&2&&(ga.$$scope={dirty:h,ctx:t}),ue.$set(ga)},i(t){qa||(v(w.$$.fragment,t),v(Ae.$$.fragment,t),v(ke.$$.fragment,t),v(Pe.$$.fragment,t),v(Ie.$$.fragment,t),v(Le.$$.fragment,t),v(Oe.$$.fragment,t),v(de.$$.fragment,t),v(Ce.$$.fragment,t),v(Ge.$$.fragment,t),v(Be.$$.fragment,t),v(qe.$$.fragment,t),v(ue.$$.fragment,t),v(Fe.$$.fragment,t),v(Ve.$$.fragment,t),v(Ue.$$.fragment,t),v(He.$$.fragment,t),v(Re.$$.fragment,t),v(Me.$$.fragment,t),v(je.$$.fragment,t),v(Je.$$.fragment,t),v(Ke.$$.fragment,t),v(Qe.$$.fragment,t),v(Ye.$$.fragment,t),v(Ze.$$.fragment,t),qa=!0)},o(t){b(w.$$.fragment,t),b(Ae.$$.fragment,t),b(ke.$$.fragment,t),b(Pe.$$.fragment,t),b(Ie.$$.fragment,t),b(Le.$$.fragment,t),b(Oe.$$.fragment,t),b(de.$$.fragment,t),b(Ce.$$.fragment,t),b(Ge.$$.fragment,t),b(Be.$$.fragment,t),b(qe.$$.fragment,t),b(ue.$$.fragment,t),b(Fe.$$.fragment,t),b(Ve.$$.fragment,t),b(Ue.$$.fragment,t),b(He.$$.fragment,t),b(Re.$$.fragment,t),b(Me.$$.fragment,t),b(je.$$.fragment,t),b(Je.$$.fragment,t),b(Ke.$$.fragment,t),b(Qe.$$.fragment,t),b(Ye.$$.fragment,t),b(Ze.$$.fragment,t),qa=!1},d(t){a(u),t&&a(z),t&&a($),_(w),t&&a($a),t&&a(F),_(Ae),t&&a(wa),t&&a(A),_(ke),t&&a(ya),t&&a(U),_(Pe),t&&a(Ea),t&&a(N),_(Ie),t&&a(Sa),t&&a(R),_(Le),t&&a(Da),t&&a(ie),t&&a(xa),t&&a(k),_(Oe),_(de),t&&a(Aa),t&&a(j),_(Ce),t&&a(ka),t&&a(T),_(Ge),t&&a(Ta),t&&a(X),_(Be),t&&a(za),t&&a(C),_(qe),_(ue),t&&a(Pa),t&&a(J),_(Fe),t&&a(Ia),t&&a(K),_(Ve),t&&a(La),t&&a(Q),_(Ue),t&&a(Oa),t&&a(W),_(He),t&&a(Na),t&&a(Y),_(Re),t&&a(Ca),t&&a(Z),_(Me),t&&a(Ga),t&&a(ee),_(je),t&&a(Wa),t&&a(ae),_(Je),t&&a(Ba),t&&a(E),_(Ke),_(Qe),_(Ye),_(Ze)}}}const tl={local:"internals",sections:[{local:"accelerate.state.GradientState",title:"Gradient Accumulation states"},{local:"accelerate.optimizer.AcceleratedOptimizer",title:"Optimizer"},{local:"accelerate.data_loader.prepare_data_loader",sections:[{local:"accelerate.data_loader.DataLoaderShard",title:"DataLoaderShard"},{local:"accelerate.data_loader.BatchSamplerShard",title:"BatchSamplerShard"},{local:"accelerate.data_loader.IterableDatasetShard",title:"IterableDatasetShard"}],title:"DataLoader"},{local:"accelerate.scheduler.AcceleratedScheduler",title:"Scheduler"},{local:"distributed-config",sections:[{local:"accelerate.state.AcceleratorState",title:"AcceleratorState"}],title:"Distributed Config"},{local:"accelerate.tracking.GeneralTracker",title:"Tracking"}],title:"Internals"};function al(rt){return Qs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ll extends js{constructor(u){super();Xs(this,u,al,el,Js,{})}}export{ll as default,tl as metadata};
