import{S as Gu,i as Vu,s as Ru,e as a,k as l,w as u,t as c,M as Mu,c as o,d as r,m as i,a as n,x as g,h as s,b as d,G as e,g as h,y as _,q as v,o as b,B as $,v as Wu}from"../../chunks/vendor-hf-doc-builder.js";import{T as hm}from"../../chunks/Tip-hf-doc-builder.js";import{D as w}from"../../chunks/Docstring-hf-doc-builder.js";import{C as W}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Hu(ge){let y,D;return{c(){y=a("p"),D=c("Step three is optional, but considered a best practice.")},l(E){y=o(E,"P",{});var x=n(y);D=s(x,"Step three is optional, but considered a best practice."),x.forEach(r)},m(E,x){h(E,y,x),e(y,D)},d(E){E&&r(y)}}}function Fu(ge){let y,D;return{c(){y=a("p"),D=c("Step five is mandatory when using distributed evaluation")},l(E){y=o(E,"P",{});var x=n(y);D=s(x,"Step five is mandatory when using distributed evaluation"),x.forEach(r)},m(E,x){h(E,y,x),e(y,D)},d(E){E&&r(y)}}}function Yu(ge){let y,D,E,x,H,T,Pt,F,Y,_e,S;return{c(){y=a("p"),D=c("Every "),E=a("code"),x=c("object"),H=c(" must have a "),T=a("code"),Pt=c("load_state_dict"),F=c(" and "),Y=a("code"),_e=c("state_dict"),S=c(" function to be stored.")},l(K){y=o(K,"P",{});var P=n(y);D=s(P,"Every "),E=o(P,"CODE",{});var Vr=n(E);x=s(Vr,"object"),Vr.forEach(r),H=s(P," must have a "),T=o(P,"CODE",{});var Rr=n(T);Pt=s(Rr,"load_state_dict"),Rr.forEach(r),F=s(P," and "),Y=o(P,"CODE",{});var Dt=n(Y);_e=s(Dt,"state_dict"),Dt.forEach(r),S=s(P," function to be stored."),P.forEach(r)},m(K,P){h(K,y,P),e(y,D),e(y,E),e(E,x),e(y,H),e(y,T),e(T,Pt),e(y,F),e(y,Y),e(Y,_e),e(y,S)},d(K){K&&r(y)}}}function Ku(ge){let y,D,E,x,H,T,Pt,F,Y,_e,S,K,P,Vr,Rr,Dt,Q,ve,ya,Tt,xs,wa,ks,Nn,Mr,Ps,jn,z,B,Ds,Wr,Ts,Os,Ea,Is,Ss,Ls,Ot,Ns,Hr,js,Cs,zs,j,qs,Aa,Us,Gs,xa,Vs,Rs,ka,Ms,Ws,Cn,be,zn,X,$e,Hs,Pa,Fs,Ys,Da,Ks,Qs,Fr,Bs,Yr,Xs,qn,ye,Un,we,Js,Ta,Zs,el,Gn,J,Ee,Oa,It,tl,Ia,rl,Vn,Z,Ae,Sa,St,al,La,ol,Rn,ee,Na,nl,cl,Kr,sl,ll,Mn,Lt,Wn,te,xe,ja,Nt,il,Ca,dl,Hn,re,ke,za,jt,pl,qa,hl,Fn,Pe,ml,Ua,fl,ul,Yn,Ct,Kn,De,gl,Qr,_l,vl,Qn,zt,Bn,ae,Te,Ga,qt,bl,Va,$l,Xn,Oe,yl,Ra,wl,El,Jn,Ut,Zn,Ie,Al,Br,xl,kl,ec,Gt,tc,oe,Se,Ma,Vt,Pl,Wa,Dl,rc,Xr,Tl,ac,Rt,oc,Mt,nc,ne,Le,Ha,Wt,Ol,Fa,Il,cc,Ne,Sl,Jr,Ll,Nl,sc,ce,je,Ya,Ht,jl,Ka,Cl,lc,Ce,zl,Zr,ql,Ul,ic,Ft,dc,q,Gl,ea,Vl,Rl,Qa,Ml,Wl,pc,Yt,hc,se,ze,Ba,Kt,Hl,Xa,Fl,mc,O,Yl,qe,Kl,Ja,Ql,Bl,Xl,Za,Jl,Zl,Ue,ei,eo,ti,ri,ai,to,oi,fc,le,Ge,ro,Qt,ni,ao,ci,uc,Ve,si,ta,li,ii,gc,Bt,_c,ie,Re,oo,Xt,di,no,pi,vc,m,Jt,hi,co,mi,fi,so,lo,ui,gi,A,Me,io,_i,vi,po,bi,$i,yi,We,ho,wi,Ei,ra,Ai,xi,ki,He,mo,Pi,Di,fo,Ti,Oi,Ii,Fe,uo,Si,Li,go,Ni,ji,Ci,Ye,_o,zi,qi,vo,Ui,Gi,Vi,Ke,bo,Ri,Mi,$o,Wi,Hi,Fi,Qe,yo,Yi,Ki,wo,Qi,Bi,Xi,Be,Eo,Ji,Zi,aa,ed,td,rd,Xe,Ao,ad,od,xo,nd,cd,sd,Je,ko,ld,id,Po,dd,pd,hd,Ze,Zt,md,Do,fd,ud,et,er,gd,To,_d,vd,tt,tr,bd,de,$d,Oo,yd,wd,Io,Ed,Ad,xd,rt,rr,kd,ar,Pd,So,Dd,Td,Od,at,or,Id,nr,Sd,Lo,Ld,Nd,jd,ot,cr,Cd,sr,zd,No,qd,Ud,Gd,nt,lr,Vd,jo,Rd,Md,ct,ir,Wd,Co,Hd,Fd,U,dr,Yd,pr,Kd,zo,Qd,Bd,Xd,qo,Jd,Zd,st,hr,ep,mr,tp,Uo,rp,ap,op,lt,fr,np,ur,cp,Go,sp,lp,ip,it,gr,dp,Vo,pp,hp,G,_r,mp,Ro,fp,up,Mo,gp,_p,dt,vr,vp,pe,bp,Wo,$p,yp,Ho,wp,Ep,Ap,V,br,xp,Fo,kp,Pp,Yo,Dp,Tp,R,$r,Op,yr,Ip,Ko,Sp,Lp,Np,wr,jp,Qo,Cp,zp,qp,pt,Er,Up,Bo,Gp,Vp,ht,Ar,Rp,Xo,Mp,Wp,mt,xr,Hp,Jo,Fp,Yp,ft,kr,Kp,Zo,Qp,Bp,ut,Pr,Xp,en,Jp,Zp,L,Dr,eh,Tr,th,tn,rh,ah,oh,rn,nh,ch,he,oa,an,sh,lh,ih,na,on,dh,ph,hh,ca,nn,mh,fh,uh,gt,Or,gh,Ir,_h,cn,vh,bh,$h,M,Sr,yh,me,wh,sn,Eh,Ah,ln,xh,kh,Ph,dn,Dh,Th,N,Lr,Oh,C,Ih,pn,Sh,Lh,hn,Nh,jh,mn,Ch,zh,qh,fn,Uh,Gh,_t,Vh,vt,Nr,Rh,jr,Mh,un,Wh,Hh,Fh,bt,Cr,Yh,gn,Kh,Qh,$t,zr,Bh,_n,Xh,Jh,yt,qr,Zh,fe,em,vn,tm,rm,sa,am,om,nm,wt,Ur,cm,bn,sm,bc;return T=new I({}),Tt=new I({}),be=new hm({props:{$$slots:{default:[Hu]},$$scope:{ctx:ge}}}),ye=new hm({props:{warning:!0,$$slots:{default:[Fu]},$$scope:{ctx:ge}}}),It=new I({}),St=new I({}),Lt=new W({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),Nt=new I({}),jt=new I({}),Ct=new W({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),zt=new W({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),qt=new I({}),Ut=new W({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),Gt=new W({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),Vt=new I({}),Rt=new W({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),Mt=new W({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),Wt=new I({}),Ht=new I({}),Ft=new W({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),Yt=new W({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),Kt=new I({}),Qt=new I({}),Bt=new W({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),Xt=new I({}),Jt=new w({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/main/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/main/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L80"}}),Zt=new w({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L487"}}),er=new w({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1322"}}),tr=new w({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L874"}}),rr=new w({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1239"}}),or=new w({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L906"}}),cr=new w({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L923"}}),lr=new w({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1092"}}),ir=new w({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1227"}}),dr=new w({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L932",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),hr=new w({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L950"}}),fr=new w({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1038"}}),gr=new w({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1166"}}),_r=new w({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L446"}}),vr=new w({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1072"}}),br=new w({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L437"}}),$r=new w({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L455"}}),Er=new w({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L386"}}),Ar=new w({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L413"}}),xr=new w({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L374"}}),kr=new w({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L398"}}),Pr=new w({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1003"}}),Dr=new w({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L567"}}),Or=new w({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L505"}}),Sr=new w({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L985",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Lr=new w({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1298"}}),_t=new hm({props:{$$slots:{default:[Yu]},$$scope:{ctx:ge}}}),Nr=new w({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1100"}}),Cr=new w({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1111"}}),zr=new w({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L886"}}),qr=new w({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1020"}}),Ur=new w({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1031"}}),{c(){y=a("meta"),D=l(),E=a("h1"),x=a("a"),H=a("span"),u(T.$$.fragment),Pt=l(),F=a("span"),Y=c("Accelerator"),_e=l(),S=a("p"),K=c("The "),P=a("a"),Vr=c("Accelerator"),Rr=c(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Dt=l(),Q=a("h2"),ve=a("a"),ya=a("span"),u(Tt.$$.fragment),xs=l(),wa=a("span"),ks=c("Quick adaptation of your code"),Nn=l(),Mr=a("p"),Ps=c("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),jn=l(),z=a("ol"),B=a("li"),Ds=c("Initialize an "),Wr=a("a"),Ts=c("Accelerator"),Os=c(" object (that we will call "),Ea=a("code"),Is=c("accelerator"),Ss=c(" throughout this page) as early as possible in your script."),Ls=l(),Ot=a("li"),Ns=c("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),Hr=a("a"),js=c("prepare()"),Cs=c(" method."),zs=l(),j=a("li"),qs=c("Remove all the "),Aa=a("code"),Us=c(".cuda()"),Gs=c(" or "),xa=a("code"),Vs=c(".to(device)"),Rs=c(" from your code and let the "),ka=a("code"),Ms=c("accelerator"),Ws=c(" handle the device placement for you."),Cn=l(),u(be.$$.fragment),zn=l(),X=a("ol"),$e=a("li"),Hs=c("Replace "),Pa=a("code"),Fs=c("loss.backward()"),Ys=c(" in your code with "),Da=a("code"),Ks=c("accelerator.backward(loss)"),Qs=l(),Fr=a("li"),Bs=c("Gather your predictions and labels before storing them or using them for metric computation using "),Yr=a("a"),Xs=c("gather()"),qn=l(),u(ye.$$.fragment),Un=l(),we=a("p"),Js=c(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),Ta=a("code"),Zs=c("accelerator"),el=c(":"),Gn=l(),J=a("h2"),Ee=a("a"),Oa=a("span"),u(It.$$.fragment),tl=l(),Ia=a("span"),rl=c("Advanced recommendations"),Vn=l(),Z=a("h3"),Ae=a("a"),Sa=a("span"),u(St.$$.fragment),al=l(),La=a("span"),ol=c("Printing"),Rn=l(),ee=a("p"),Na=a("code"),nl=c("print"),cl=c(" statements should be replaced by "),Kr=a("a"),sl=c("print()"),ll=c(" to be printed once per process"),Mn=l(),u(Lt.$$.fragment),Wn=l(),te=a("h3"),xe=a("a"),ja=a("span"),u(Nt.$$.fragment),il=l(),Ca=a("span"),dl=c("Executing processes"),Hn=l(),re=a("h4"),ke=a("a"),za=a("span"),u(jt.$$.fragment),pl=l(),qa=a("span"),hl=c("Once on a single server"),Fn=l(),Pe=a("p"),ml=c("For statements that should be executed once per server, use "),Ua=a("code"),fl=c("is_local_main_process"),ul=c(":"),Yn=l(),u(Ct.$$.fragment),Kn=l(),De=a("p"),gl=c("A function can be wrapped using the "),Qr=a("a"),_l=c("on_local_main_process()"),vl=c(` function to achieve the same
behavior on a function\u2019s execution:`),Qn=l(),u(zt.$$.fragment),Bn=l(),ae=a("h4"),Te=a("a"),Ga=a("span"),u(qt.$$.fragment),bl=l(),Va=a("span"),$l=c("Only ever once across all servers"),Xn=l(),Oe=a("p"),yl=c("For statements that should only ever be executed once, use "),Ra=a("code"),wl=c("is_main_process"),El=c(":"),Jn=l(),u(Ut.$$.fragment),Zn=l(),Ie=a("p"),Al=c("A function can be wrapped using the "),Br=a("a"),xl=c("on_main_process()"),kl=c(` function to achieve the same
behavior on a function\u2019s execution:`),ec=l(),u(Gt.$$.fragment),tc=l(),oe=a("h4"),Se=a("a"),Ma=a("span"),u(Vt.$$.fragment),Pl=l(),Wa=a("span"),Dl=c("On specific processes"),rc=l(),Xr=a("p"),Tl=c(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),ac=l(),u(Rt.$$.fragment),oc=l(),u(Mt.$$.fragment),nc=l(),ne=a("h3"),Le=a("a"),Ha=a("span"),u(Wt.$$.fragment),Ol=l(),Fa=a("span"),Il=c("Synchronicity control"),cc=l(),Ne=a("p"),Sl=c("Use "),Jr=a("a"),Ll=c("wait_for_everyone()"),Nl=c(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),sc=l(),ce=a("h3"),je=a("a"),Ya=a("span"),u(Ht.$$.fragment),jl=l(),Ka=a("span"),Cl=c("Saving and loading"),lc=l(),Ce=a("p"),zl=c("Use "),Zr=a("a"),ql=c("unwrap_model()"),Ul=c(" before saving to remove all special model wrappers added during the distributed process."),ic=l(),u(Ft.$$.fragment),dc=l(),q=a("p"),Gl=c("Use "),ea=a("a"),Vl=c("save()"),Rl=c(" instead of "),Qa=a("code"),Ml=c("torch.save"),Wl=c(":"),pc=l(),u(Yt.$$.fragment),hc=l(),se=a("h3"),ze=a("a"),Ba=a("span"),u(Kt.$$.fragment),Hl=l(),Xa=a("span"),Fl=c("Operations"),mc=l(),O=a("p"),Yl=c("Use "),qe=a("a"),Kl=c("clip"),Ja=a("em"),Ql=c("grad_norm"),Bl=c("()"),Xl=c(" instead of "),Za=a("code"),Jl=c("torch.nn.utils.clip_grad_norm_"),Zl=c(" and "),Ue=a("a"),ei=c("clip"),eo=a("em"),ti=c("grad_value"),ri=c("()"),ai=c(" instead of "),to=a("code"),oi=c("torch.nn.utils.clip_grad_value"),fc=l(),le=a("h3"),Ge=a("a"),ro=a("span"),u(Qt.$$.fragment),ni=l(),ao=a("span"),ci=c("Gradient Accumulation"),uc=l(),Ve=a("p"),si=c("To perform gradient accumulation use "),ta=a("a"),li=c("accumulate()"),ii=c(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),gc=l(),u(Bt.$$.fragment),_c=l(),ie=a("h2"),Re=a("a"),oo=a("span"),u(Xt.$$.fragment),di=l(),no=a("span"),pi=c("Overall API documentation:"),vc=l(),m=a("div"),u(Jt.$$.fragment),hi=l(),co=a("p"),mi=c("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),fi=l(),so=a("p"),lo=a("strong"),ui=c("Attributes:"),gi=l(),A=a("ul"),Me=a("li"),io=a("strong"),_i=c("device"),vi=c(" ("),po=a("code"),bi=c("torch.device"),$i=c(") \u2014 The device to use."),yi=l(),We=a("li"),ho=a("strong"),wi=c("distributed_type"),Ei=c(" ("),ra=a("a"),Ai=c("DistributedType"),xi=c(") \u2014 The distributed training configuration."),ki=l(),He=a("li"),mo=a("strong"),Pi=c("local_process_index"),Di=c(" ("),fo=a("code"),Ti=c("int"),Oi=c(") \u2014 The process index on the current machine."),Ii=l(),Fe=a("li"),uo=a("strong"),Si=c("mixed_precision"),Li=c(" ("),go=a("code"),Ni=c("str"),ji=c(") \u2014 The configured mixed precision mode."),Ci=l(),Ye=a("li"),_o=a("strong"),zi=c("num_processes"),qi=c(" ("),vo=a("code"),Ui=c("int"),Gi=c(") \u2014 The total number of processes used for training."),Vi=l(),Ke=a("li"),bo=a("strong"),Ri=c("optimizer_step_was_skipped"),Mi=c(" ("),$o=a("code"),Wi=c("bool"),Hi=c(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Fi=l(),Qe=a("li"),yo=a("strong"),Yi=c("process_index"),Ki=c(" ("),wo=a("code"),Qi=c("int"),Bi=c(") \u2014 The overall index of the current process among all processes."),Xi=l(),Be=a("li"),Eo=a("strong"),Ji=c("state"),Zi=c(" ("),aa=a("a"),ed=c("AcceleratorState"),td=c(") \u2014 The distributed setup state."),rd=l(),Xe=a("li"),Ao=a("strong"),ad=c("sync_gradients"),od=c(" ("),xo=a("code"),nd=c("bool"),cd=c(") \u2014 Whether the gradients are currently being synced across all processes."),sd=l(),Je=a("li"),ko=a("strong"),ld=c("use_distributed"),id=c(" ("),Po=a("code"),dd=c("bool"),pd=c(") \u2014 Whether the current configuration is for distributed training."),hd=l(),Ze=a("div"),u(Zt.$$.fragment),md=l(),Do=a("p"),fd=c("A context manager that will lightly wrap around and perform gradient accumulation automatically"),ud=l(),et=a("div"),u(er.$$.fragment),gd=l(),To=a("p"),_d=c(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),vd=l(),tt=a("div"),u(tr.$$.fragment),bd=l(),de=a("p"),$d=c("Use "),Oo=a("code"),yd=c("accelerator.backward(loss)"),wd=c(" in lieu of "),Io=a("code"),Ed=c("loss.backward()"),Ad=c("."),xd=l(),rt=a("div"),u(rr.$$.fragment),kd=l(),ar=a("p"),Pd=c("Alias for "),So=a("code"),Dd=c("Accelerate.free_memory"),Td=c(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Od=l(),at=a("div"),u(or.$$.fragment),Id=l(),nr=a("p"),Sd=c("Should be used in place of "),Lo=a("code"),Ld=c("torch.nn.utils.clip_grad_norm_"),Nd=c("."),jd=l(),ot=a("div"),u(cr.$$.fragment),Cd=l(),sr=a("p"),zd=c("Should be used in place of "),No=a("code"),qd=c("torch.nn.utils.clip_grad_value_"),Ud=c("."),Gd=l(),nt=a("div"),u(lr.$$.fragment),Vd=l(),jo=a("p"),Rd=c("Runs any special end training behaviors, such as stopping trackers"),Md=l(),ct=a("div"),u(ir.$$.fragment),Wd=l(),Co=a("p"),Hd=c(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Fd=l(),U=a("div"),u(dr.$$.fragment),Yd=l(),pr=a("p"),Kd=c("Gather the values in "),zo=a("em"),Qd=c("tensor"),Bd=c(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Xd=l(),qo=a("p"),Jd=c(`Note:
This gather happens in all processes.`),Zd=l(),st=a("div"),u(hr.$$.fragment),ep=l(),mr=a("p"),tp=c("Gathers "),Uo=a("code"),rp=c("tensor"),ap=c(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),op=l(),lt=a("div"),u(fr.$$.fragment),np=l(),ur=a("p"),cp=c("Initializes a run for all trackers stored in "),Go=a("code"),sp=c("self.log_with"),lp=c(", potentially with starting configurations"),ip=l(),it=a("div"),u(gr.$$.fragment),dp=l(),Vo=a("p"),pp=c("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),hp=l(),G=a("div"),u(_r.$$.fragment),mp=l(),Ro=a("p"),fp=c("Lets the local main process go inside a with block."),up=l(),Mo=a("p"),gp=c("The other processes will enter the with block after the main process exits."),_p=l(),dt=a("div"),u(vr.$$.fragment),vp=l(),pe=a("p"),bp=c("Logs "),Wo=a("code"),$p=c("values"),yp=c(" to all stored trackers in "),Ho=a("code"),wp=c("self.trackers"),Ep=c("."),Ap=l(),V=a("div"),u(br.$$.fragment),xp=l(),Fo=a("p"),kp=c("Lets the main process go first inside a with block."),Pp=l(),Yo=a("p"),Dp=c("The other processes will enter the with block after the main process exits."),Tp=l(),R=a("div"),u($r.$$.fragment),Op=l(),yr=a("p"),Ip=c(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Ko=a("code"),Sp=c("torch.nn.parallel.DistributedDataParallel.no_sync"),Lp=c("."),Np=l(),wr=a("p"),jp=c("If "),Qo=a("code"),Cp=c("model"),zp=c(" is not in DDP, this context manager does nothing"),qp=l(),pt=a("div"),u(Er.$$.fragment),Up=l(),Bo=a("p"),Gp=c("A decorator that will run the decorated function on the local main process only."),Vp=l(),ht=a("div"),u(Ar.$$.fragment),Rp=l(),Xo=a("p"),Mp=c("Run func on certain local process only"),Wp=l(),mt=a("div"),u(xr.$$.fragment),Hp=l(),Jo=a("p"),Fp=c("A decorator that will run the decorated function on the main process only."),Yp=l(),ft=a("div"),u(kr.$$.fragment),Kp=l(),Zo=a("p"),Qp=c("A decorator that will run the decorated function on a given process index only."),Bp=l(),ut=a("div"),u(Pr.$$.fragment),Xp=l(),en=a("p"),Jp=c(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Zp=l(),L=a("div"),u(Dr.$$.fragment),eh=l(),Tr=a("p"),th=c("Prepare all objects passed in "),tn=a("code"),rh=c("args"),ah=c(` for distributed training and mixed precision, then return them in the same
order.`),oh=l(),rn=a("p"),nh=c("Accepts the following type of objects:"),ch=l(),he=a("ul"),oa=a("li"),an=a("code"),sh=c("torch.utils.data.DataLoader"),lh=c(": PyTorch Dataloader"),ih=l(),na=a("li"),on=a("code"),dh=c("torch.nn.Module"),ph=c(": PyTorch Module"),hh=l(),ca=a("li"),nn=a("code"),mh=c("torch.optim.Optimizer"),fh=c(": PyTorch Optimizer"),uh=l(),gt=a("div"),u(Or.$$.fragment),gh=l(),Ir=a("p"),_h=c("Use in replacement of "),cn=a("code"),vh=c("print()"),bh=c(" to only print once per server."),$h=l(),M=a("div"),u(Sr.$$.fragment),yh=l(),me=a("p"),wh=c("Reduce the values in "),sn=a("em"),Eh=c("tensor"),Ah=c(" across all processes based on "),ln=a("em"),xh=c("reduction"),kh=c("."),Ph=l(),dn=a("p"),Dh=c(`Note:
All processes get the reduced value.`),Th=l(),N=a("div"),u(Lr.$$.fragment),Oh=l(),C=a("p"),Ih=c("Makes note of "),pn=a("code"),Sh=c("objects"),Lh=c(" and will save or load them in during "),hn=a("code"),Nh=c("save_state"),jh=c(" or "),mn=a("code"),Ch=c("load_state"),zh=c("."),qh=l(),fn=a("p"),Uh=c(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Gh=l(),u(_t.$$.fragment),Vh=l(),vt=a("div"),u(Nr.$$.fragment),Rh=l(),jr=a("p"),Mh=c("Save the object passed to disk once per machine. Use in place of "),un=a("code"),Wh=c("torch.save"),Hh=c("."),Fh=l(),bt=a("div"),u(Cr.$$.fragment),Yh=l(),gn=a("p"),Kh=c("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Qh=l(),$t=a("div"),u(zr.$$.fragment),Bh=l(),_n=a("p"),Xh=c("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Jh=l(),yt=a("div"),u(qr.$$.fragment),Zh=l(),fe=a("p"),em=c("Unwraps the "),vn=a("code"),tm=c("model"),rm=c(" from the additional layer possible added by "),sa=a("a"),am=c("prepare()"),om=c(`. Useful before saving
the model.`),nm=l(),wt=a("div"),u(Ur.$$.fragment),cm=l(),bn=a("p"),sm=c(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const p=Mu('[data-svelte="svelte-1phssyn"]',document.head);y=o(p,"META",{name:!0,content:!0}),p.forEach(r),D=i(t),E=o(t,"H1",{class:!0});var Gr=n(E);x=o(Gr,"A",{id:!0,class:!0,href:!0});var $n=n(x);H=o($n,"SPAN",{});var yn=n(H);g(T.$$.fragment,yn),yn.forEach(r),$n.forEach(r),Pt=i(Gr),F=o(Gr,"SPAN",{});var mm=n(F);Y=s(mm,"Accelerator"),mm.forEach(r),Gr.forEach(r),_e=i(t),S=o(t,"P",{});var $c=n(S);K=s($c,"The "),P=o($c,"A",{href:!0});var fm=n(P);Vr=s(fm,"Accelerator"),fm.forEach(r),Rr=s($c,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),$c.forEach(r),Dt=i(t),Q=o(t,"H2",{class:!0});var yc=n(Q);ve=o(yc,"A",{id:!0,class:!0,href:!0});var um=n(ve);ya=o(um,"SPAN",{});var gm=n(ya);g(Tt.$$.fragment,gm),gm.forEach(r),um.forEach(r),xs=i(yc),wa=o(yc,"SPAN",{});var _m=n(wa);ks=s(_m,"Quick adaptation of your code"),_m.forEach(r),yc.forEach(r),Nn=i(t),Mr=o(t,"P",{});var vm=n(Mr);Ps=s(vm,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),vm.forEach(r),jn=i(t),z=o(t,"OL",{});var la=n(z);B=o(la,"LI",{});var ia=n(B);Ds=s(ia,"Initialize an "),Wr=o(ia,"A",{href:!0});var bm=n(Wr);Ts=s(bm,"Accelerator"),bm.forEach(r),Os=s(ia," object (that we will call "),Ea=o(ia,"CODE",{});var $m=n(Ea);Is=s($m,"accelerator"),$m.forEach(r),Ss=s(ia," throughout this page) as early as possible in your script."),ia.forEach(r),Ls=i(la),Ot=o(la,"LI",{});var wc=n(Ot);Ns=s(wc,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),Hr=o(wc,"A",{href:!0});var ym=n(Hr);js=s(ym,"prepare()"),ym.forEach(r),Cs=s(wc," method."),wc.forEach(r),zs=i(la),j=o(la,"LI",{});var Et=n(j);qs=s(Et,"Remove all the "),Aa=o(Et,"CODE",{});var wm=n(Aa);Us=s(wm,".cuda()"),wm.forEach(r),Gs=s(Et," or "),xa=o(Et,"CODE",{});var Em=n(xa);Vs=s(Em,".to(device)"),Em.forEach(r),Rs=s(Et," from your code and let the "),ka=o(Et,"CODE",{});var Am=n(ka);Ms=s(Am,"accelerator"),Am.forEach(r),Ws=s(Et," handle the device placement for you."),Et.forEach(r),la.forEach(r),Cn=i(t),g(be.$$.fragment,t),zn=i(t),X=o(t,"OL",{start:!0});var Ec=n(X);$e=o(Ec,"LI",{});var wn=n($e);Hs=s(wn,"Replace "),Pa=o(wn,"CODE",{});var xm=n(Pa);Fs=s(xm,"loss.backward()"),xm.forEach(r),Ys=s(wn," in your code with "),Da=o(wn,"CODE",{});var km=n(Da);Ks=s(km,"accelerator.backward(loss)"),km.forEach(r),wn.forEach(r),Qs=i(Ec),Fr=o(Ec,"LI",{});var lm=n(Fr);Bs=s(lm,"Gather your predictions and labels before storing them or using them for metric computation using "),Yr=o(lm,"A",{href:!0});var Pm=n(Yr);Xs=s(Pm,"gather()"),Pm.forEach(r),lm.forEach(r),Ec.forEach(r),qn=i(t),g(ye.$$.fragment,t),Un=i(t),we=o(t,"P",{});var Ac=n(we);Js=s(Ac,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),Ta=o(Ac,"CODE",{});var Dm=n(Ta);Zs=s(Dm,"accelerator"),Dm.forEach(r),el=s(Ac,":"),Ac.forEach(r),Gn=i(t),J=o(t,"H2",{class:!0});var xc=n(J);Ee=o(xc,"A",{id:!0,class:!0,href:!0});var Tm=n(Ee);Oa=o(Tm,"SPAN",{});var Om=n(Oa);g(It.$$.fragment,Om),Om.forEach(r),Tm.forEach(r),tl=i(xc),Ia=o(xc,"SPAN",{});var Im=n(Ia);rl=s(Im,"Advanced recommendations"),Im.forEach(r),xc.forEach(r),Vn=i(t),Z=o(t,"H3",{class:!0});var kc=n(Z);Ae=o(kc,"A",{id:!0,class:!0,href:!0});var Sm=n(Ae);Sa=o(Sm,"SPAN",{});var Lm=n(Sa);g(St.$$.fragment,Lm),Lm.forEach(r),Sm.forEach(r),al=i(kc),La=o(kc,"SPAN",{});var Nm=n(La);ol=s(Nm,"Printing"),Nm.forEach(r),kc.forEach(r),Rn=i(t),ee=o(t,"P",{});var En=n(ee);Na=o(En,"CODE",{});var jm=n(Na);nl=s(jm,"print"),jm.forEach(r),cl=s(En," statements should be replaced by "),Kr=o(En,"A",{href:!0});var Cm=n(Kr);sl=s(Cm,"print()"),Cm.forEach(r),ll=s(En," to be printed once per process"),En.forEach(r),Mn=i(t),g(Lt.$$.fragment,t),Wn=i(t),te=o(t,"H3",{class:!0});var Pc=n(te);xe=o(Pc,"A",{id:!0,class:!0,href:!0});var zm=n(xe);ja=o(zm,"SPAN",{});var qm=n(ja);g(Nt.$$.fragment,qm),qm.forEach(r),zm.forEach(r),il=i(Pc),Ca=o(Pc,"SPAN",{});var Um=n(Ca);dl=s(Um,"Executing processes"),Um.forEach(r),Pc.forEach(r),Hn=i(t),re=o(t,"H4",{class:!0});var Dc=n(re);ke=o(Dc,"A",{id:!0,class:!0,href:!0});var Gm=n(ke);za=o(Gm,"SPAN",{});var Vm=n(za);g(jt.$$.fragment,Vm),Vm.forEach(r),Gm.forEach(r),pl=i(Dc),qa=o(Dc,"SPAN",{});var Rm=n(qa);hl=s(Rm,"Once on a single server"),Rm.forEach(r),Dc.forEach(r),Fn=i(t),Pe=o(t,"P",{});var Tc=n(Pe);ml=s(Tc,"For statements that should be executed once per server, use "),Ua=o(Tc,"CODE",{});var Mm=n(Ua);fl=s(Mm,"is_local_main_process"),Mm.forEach(r),ul=s(Tc,":"),Tc.forEach(r),Yn=i(t),g(Ct.$$.fragment,t),Kn=i(t),De=o(t,"P",{});var Oc=n(De);gl=s(Oc,"A function can be wrapped using the "),Qr=o(Oc,"A",{href:!0});var Wm=n(Qr);_l=s(Wm,"on_local_main_process()"),Wm.forEach(r),vl=s(Oc,` function to achieve the same
behavior on a function\u2019s execution:`),Oc.forEach(r),Qn=i(t),g(zt.$$.fragment,t),Bn=i(t),ae=o(t,"H4",{class:!0});var Ic=n(ae);Te=o(Ic,"A",{id:!0,class:!0,href:!0});var Hm=n(Te);Ga=o(Hm,"SPAN",{});var Fm=n(Ga);g(qt.$$.fragment,Fm),Fm.forEach(r),Hm.forEach(r),bl=i(Ic),Va=o(Ic,"SPAN",{});var Ym=n(Va);$l=s(Ym,"Only ever once across all servers"),Ym.forEach(r),Ic.forEach(r),Xn=i(t),Oe=o(t,"P",{});var Sc=n(Oe);yl=s(Sc,"For statements that should only ever be executed once, use "),Ra=o(Sc,"CODE",{});var Km=n(Ra);wl=s(Km,"is_main_process"),Km.forEach(r),El=s(Sc,":"),Sc.forEach(r),Jn=i(t),g(Ut.$$.fragment,t),Zn=i(t),Ie=o(t,"P",{});var Lc=n(Ie);Al=s(Lc,"A function can be wrapped using the "),Br=o(Lc,"A",{href:!0});var Qm=n(Br);xl=s(Qm,"on_main_process()"),Qm.forEach(r),kl=s(Lc,` function to achieve the same
behavior on a function\u2019s execution:`),Lc.forEach(r),ec=i(t),g(Gt.$$.fragment,t),tc=i(t),oe=o(t,"H4",{class:!0});var Nc=n(oe);Se=o(Nc,"A",{id:!0,class:!0,href:!0});var Bm=n(Se);Ma=o(Bm,"SPAN",{});var Xm=n(Ma);g(Vt.$$.fragment,Xm),Xm.forEach(r),Bm.forEach(r),Pl=i(Nc),Wa=o(Nc,"SPAN",{});var Jm=n(Wa);Dl=s(Jm,"On specific processes"),Jm.forEach(r),Nc.forEach(r),rc=i(t),Xr=o(t,"P",{});var Zm=n(Xr);Tl=s(Zm,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Zm.forEach(r),ac=i(t),g(Rt.$$.fragment,t),oc=i(t),g(Mt.$$.fragment,t),nc=i(t),ne=o(t,"H3",{class:!0});var jc=n(ne);Le=o(jc,"A",{id:!0,class:!0,href:!0});var ef=n(Le);Ha=o(ef,"SPAN",{});var tf=n(Ha);g(Wt.$$.fragment,tf),tf.forEach(r),ef.forEach(r),Ol=i(jc),Fa=o(jc,"SPAN",{});var rf=n(Fa);Il=s(rf,"Synchronicity control"),rf.forEach(r),jc.forEach(r),cc=i(t),Ne=o(t,"P",{});var Cc=n(Ne);Sl=s(Cc,"Use "),Jr=o(Cc,"A",{href:!0});var af=n(Jr);Ll=s(af,"wait_for_everyone()"),af.forEach(r),Nl=s(Cc," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Cc.forEach(r),sc=i(t),ce=o(t,"H3",{class:!0});var zc=n(ce);je=o(zc,"A",{id:!0,class:!0,href:!0});var of=n(je);Ya=o(of,"SPAN",{});var nf=n(Ya);g(Ht.$$.fragment,nf),nf.forEach(r),of.forEach(r),jl=i(zc),Ka=o(zc,"SPAN",{});var cf=n(Ka);Cl=s(cf,"Saving and loading"),cf.forEach(r),zc.forEach(r),lc=i(t),Ce=o(t,"P",{});var qc=n(Ce);zl=s(qc,"Use "),Zr=o(qc,"A",{href:!0});var sf=n(Zr);ql=s(sf,"unwrap_model()"),sf.forEach(r),Ul=s(qc," before saving to remove all special model wrappers added during the distributed process."),qc.forEach(r),ic=i(t),g(Ft.$$.fragment,t),dc=i(t),q=o(t,"P",{});var da=n(q);Gl=s(da,"Use "),ea=o(da,"A",{href:!0});var lf=n(ea);Vl=s(lf,"save()"),lf.forEach(r),Rl=s(da," instead of "),Qa=o(da,"CODE",{});var df=n(Qa);Ml=s(df,"torch.save"),df.forEach(r),Wl=s(da,":"),da.forEach(r),pc=i(t),g(Yt.$$.fragment,t),hc=i(t),se=o(t,"H3",{class:!0});var Uc=n(se);ze=o(Uc,"A",{id:!0,class:!0,href:!0});var pf=n(ze);Ba=o(pf,"SPAN",{});var hf=n(Ba);g(Kt.$$.fragment,hf),hf.forEach(r),pf.forEach(r),Hl=i(Uc),Xa=o(Uc,"SPAN",{});var mf=n(Xa);Fl=s(mf,"Operations"),mf.forEach(r),Uc.forEach(r),mc=i(t),O=o(t,"P",{});var ue=n(O);Yl=s(ue,"Use "),qe=o(ue,"A",{href:!0});var Gc=n(qe);Kl=s(Gc,"clip"),Ja=o(Gc,"EM",{});var ff=n(Ja);Ql=s(ff,"grad_norm"),ff.forEach(r),Bl=s(Gc,"()"),Gc.forEach(r),Xl=s(ue," instead of "),Za=o(ue,"CODE",{});var uf=n(Za);Jl=s(uf,"torch.nn.utils.clip_grad_norm_"),uf.forEach(r),Zl=s(ue," and "),Ue=o(ue,"A",{href:!0});var Vc=n(Ue);ei=s(Vc,"clip"),eo=o(Vc,"EM",{});var gf=n(eo);ti=s(gf,"grad_value"),gf.forEach(r),ri=s(Vc,"()"),Vc.forEach(r),ai=s(ue," instead of "),to=o(ue,"CODE",{});var _f=n(to);oi=s(_f,"torch.nn.utils.clip_grad_value"),_f.forEach(r),ue.forEach(r),fc=i(t),le=o(t,"H3",{class:!0});var Rc=n(le);Ge=o(Rc,"A",{id:!0,class:!0,href:!0});var vf=n(Ge);ro=o(vf,"SPAN",{});var bf=n(ro);g(Qt.$$.fragment,bf),bf.forEach(r),vf.forEach(r),ni=i(Rc),ao=o(Rc,"SPAN",{});var $f=n(ao);ci=s($f,"Gradient Accumulation"),$f.forEach(r),Rc.forEach(r),uc=i(t),Ve=o(t,"P",{});var Mc=n(Ve);si=s(Mc,"To perform gradient accumulation use "),ta=o(Mc,"A",{href:!0});var yf=n(ta);li=s(yf,"accumulate()"),yf.forEach(r),ii=s(Mc,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),Mc.forEach(r),gc=i(t),g(Bt.$$.fragment,t),_c=i(t),ie=o(t,"H2",{class:!0});var Wc=n(ie);Re=o(Wc,"A",{id:!0,class:!0,href:!0});var wf=n(Re);oo=o(wf,"SPAN",{});var Ef=n(oo);g(Xt.$$.fragment,Ef),Ef.forEach(r),wf.forEach(r),di=i(Wc),no=o(Wc,"SPAN",{});var Af=n(no);pi=s(Af,"Overall API documentation:"),Af.forEach(r),Wc.forEach(r),vc=i(t),m=o(t,"DIV",{class:!0});var f=n(m);g(Jt.$$.fragment,f),hi=i(f),co=o(f,"P",{});var xf=n(co);mi=s(xf,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),xf.forEach(r),fi=i(f),so=o(f,"P",{});var kf=n(so);lo=o(kf,"STRONG",{});var Pf=n(lo);ui=s(Pf,"Attributes:"),Pf.forEach(r),kf.forEach(r),gi=i(f),A=o(f,"UL",{});var k=n(A);Me=o(k,"LI",{});var An=n(Me);io=o(An,"STRONG",{});var Df=n(io);_i=s(Df,"device"),Df.forEach(r),vi=s(An," ("),po=o(An,"CODE",{});var Tf=n(po);bi=s(Tf,"torch.device"),Tf.forEach(r),$i=s(An,") \u2014 The device to use."),An.forEach(r),yi=i(k),We=o(k,"LI",{});var xn=n(We);ho=o(xn,"STRONG",{});var Of=n(ho);wi=s(Of,"distributed_type"),Of.forEach(r),Ei=s(xn," ("),ra=o(xn,"A",{href:!0});var If=n(ra);Ai=s(If,"DistributedType"),If.forEach(r),xi=s(xn,") \u2014 The distributed training configuration."),xn.forEach(r),ki=i(k),He=o(k,"LI",{});var kn=n(He);mo=o(kn,"STRONG",{});var Sf=n(mo);Pi=s(Sf,"local_process_index"),Sf.forEach(r),Di=s(kn," ("),fo=o(kn,"CODE",{});var Lf=n(fo);Ti=s(Lf,"int"),Lf.forEach(r),Oi=s(kn,") \u2014 The process index on the current machine."),kn.forEach(r),Ii=i(k),Fe=o(k,"LI",{});var Pn=n(Fe);uo=o(Pn,"STRONG",{});var Nf=n(uo);Si=s(Nf,"mixed_precision"),Nf.forEach(r),Li=s(Pn," ("),go=o(Pn,"CODE",{});var jf=n(go);Ni=s(jf,"str"),jf.forEach(r),ji=s(Pn,") \u2014 The configured mixed precision mode."),Pn.forEach(r),Ci=i(k),Ye=o(k,"LI",{});var Dn=n(Ye);_o=o(Dn,"STRONG",{});var Cf=n(_o);zi=s(Cf,"num_processes"),Cf.forEach(r),qi=s(Dn," ("),vo=o(Dn,"CODE",{});var zf=n(vo);Ui=s(zf,"int"),zf.forEach(r),Gi=s(Dn,") \u2014 The total number of processes used for training."),Dn.forEach(r),Vi=i(k),Ke=o(k,"LI",{});var Tn=n(Ke);bo=o(Tn,"STRONG",{});var qf=n(bo);Ri=s(qf,"optimizer_step_was_skipped"),qf.forEach(r),Mi=s(Tn," ("),$o=o(Tn,"CODE",{});var Uf=n($o);Wi=s(Uf,"bool"),Uf.forEach(r),Hi=s(Tn,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Tn.forEach(r),Fi=i(k),Qe=o(k,"LI",{});var On=n(Qe);yo=o(On,"STRONG",{});var Gf=n(yo);Yi=s(Gf,"process_index"),Gf.forEach(r),Ki=s(On," ("),wo=o(On,"CODE",{});var Vf=n(wo);Qi=s(Vf,"int"),Vf.forEach(r),Bi=s(On,") \u2014 The overall index of the current process among all processes."),On.forEach(r),Xi=i(k),Be=o(k,"LI",{});var In=n(Be);Eo=o(In,"STRONG",{});var Rf=n(Eo);Ji=s(Rf,"state"),Rf.forEach(r),Zi=s(In," ("),aa=o(In,"A",{href:!0});var Mf=n(aa);ed=s(Mf,"AcceleratorState"),Mf.forEach(r),td=s(In,") \u2014 The distributed setup state."),In.forEach(r),rd=i(k),Xe=o(k,"LI",{});var Sn=n(Xe);Ao=o(Sn,"STRONG",{});var Wf=n(Ao);ad=s(Wf,"sync_gradients"),Wf.forEach(r),od=s(Sn," ("),xo=o(Sn,"CODE",{});var Hf=n(xo);nd=s(Hf,"bool"),Hf.forEach(r),cd=s(Sn,") \u2014 Whether the gradients are currently being synced across all processes."),Sn.forEach(r),sd=i(k),Je=o(k,"LI",{});var Ln=n(Je);ko=o(Ln,"STRONG",{});var Ff=n(ko);ld=s(Ff,"use_distributed"),Ff.forEach(r),id=s(Ln," ("),Po=o(Ln,"CODE",{});var Yf=n(Po);dd=s(Yf,"bool"),Yf.forEach(r),pd=s(Ln,") \u2014 Whether the current configuration is for distributed training."),Ln.forEach(r),k.forEach(r),hd=i(f),Ze=o(f,"DIV",{class:!0});var Hc=n(Ze);g(Zt.$$.fragment,Hc),md=i(Hc),Do=o(Hc,"P",{});var Kf=n(Do);fd=s(Kf,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Kf.forEach(r),Hc.forEach(r),ud=i(f),et=o(f,"DIV",{class:!0});var Fc=n(et);g(er.$$.fragment,Fc),gd=i(Fc),To=o(Fc,"P",{});var Qf=n(To);_d=s(Qf,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Qf.forEach(r),Fc.forEach(r),vd=i(f),tt=o(f,"DIV",{class:!0});var Yc=n(tt);g(tr.$$.fragment,Yc),bd=i(Yc),de=o(Yc,"P",{});var pa=n(de);$d=s(pa,"Use "),Oo=o(pa,"CODE",{});var Bf=n(Oo);yd=s(Bf,"accelerator.backward(loss)"),Bf.forEach(r),wd=s(pa," in lieu of "),Io=o(pa,"CODE",{});var Xf=n(Io);Ed=s(Xf,"loss.backward()"),Xf.forEach(r),Ad=s(pa,"."),pa.forEach(r),Yc.forEach(r),xd=i(f),rt=o(f,"DIV",{class:!0});var Kc=n(rt);g(rr.$$.fragment,Kc),kd=i(Kc),ar=o(Kc,"P",{});var Qc=n(ar);Pd=s(Qc,"Alias for "),So=o(Qc,"CODE",{});var Jf=n(So);Dd=s(Jf,"Accelerate.free_memory"),Jf.forEach(r),Td=s(Qc,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Qc.forEach(r),Kc.forEach(r),Od=i(f),at=o(f,"DIV",{class:!0});var Bc=n(at);g(or.$$.fragment,Bc),Id=i(Bc),nr=o(Bc,"P",{});var Xc=n(nr);Sd=s(Xc,"Should be used in place of "),Lo=o(Xc,"CODE",{});var Zf=n(Lo);Ld=s(Zf,"torch.nn.utils.clip_grad_norm_"),Zf.forEach(r),Nd=s(Xc,"."),Xc.forEach(r),Bc.forEach(r),jd=i(f),ot=o(f,"DIV",{class:!0});var Jc=n(ot);g(cr.$$.fragment,Jc),Cd=i(Jc),sr=o(Jc,"P",{});var Zc=n(sr);zd=s(Zc,"Should be used in place of "),No=o(Zc,"CODE",{});var eu=n(No);qd=s(eu,"torch.nn.utils.clip_grad_value_"),eu.forEach(r),Ud=s(Zc,"."),Zc.forEach(r),Jc.forEach(r),Gd=i(f),nt=o(f,"DIV",{class:!0});var es=n(nt);g(lr.$$.fragment,es),Vd=i(es),jo=o(es,"P",{});var tu=n(jo);Rd=s(tu,"Runs any special end training behaviors, such as stopping trackers"),tu.forEach(r),es.forEach(r),Md=i(f),ct=o(f,"DIV",{class:!0});var ts=n(ct);g(ir.$$.fragment,ts),Wd=i(ts),Co=o(ts,"P",{});var ru=n(Co);Hd=s(ru,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),ru.forEach(r),ts.forEach(r),Fd=i(f),U=o(f,"DIV",{class:!0});var ha=n(U);g(dr.$$.fragment,ha),Yd=i(ha),pr=o(ha,"P",{});var rs=n(pr);Kd=s(rs,"Gather the values in "),zo=o(rs,"EM",{});var au=n(zo);Qd=s(au,"tensor"),au.forEach(r),Bd=s(rs,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),rs.forEach(r),Xd=i(ha),qo=o(ha,"P",{});var ou=n(qo);Jd=s(ou,`Note:
This gather happens in all processes.`),ou.forEach(r),ha.forEach(r),Zd=i(f),st=o(f,"DIV",{class:!0});var as=n(st);g(hr.$$.fragment,as),ep=i(as),mr=o(as,"P",{});var os=n(mr);tp=s(os,"Gathers "),Uo=o(os,"CODE",{});var nu=n(Uo);rp=s(nu,"tensor"),nu.forEach(r),ap=s(os,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),os.forEach(r),as.forEach(r),op=i(f),lt=o(f,"DIV",{class:!0});var ns=n(lt);g(fr.$$.fragment,ns),np=i(ns),ur=o(ns,"P",{});var cs=n(ur);cp=s(cs,"Initializes a run for all trackers stored in "),Go=o(cs,"CODE",{});var cu=n(Go);sp=s(cu,"self.log_with"),cu.forEach(r),lp=s(cs,", potentially with starting configurations"),cs.forEach(r),ns.forEach(r),ip=i(f),it=o(f,"DIV",{class:!0});var ss=n(it);g(gr.$$.fragment,ss),dp=i(ss),Vo=o(ss,"P",{});var su=n(Vo);pp=s(su,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),su.forEach(r),ss.forEach(r),hp=i(f),G=o(f,"DIV",{class:!0});var ma=n(G);g(_r.$$.fragment,ma),mp=i(ma),Ro=o(ma,"P",{});var lu=n(Ro);fp=s(lu,"Lets the local main process go inside a with block."),lu.forEach(r),up=i(ma),Mo=o(ma,"P",{});var iu=n(Mo);gp=s(iu,"The other processes will enter the with block after the main process exits."),iu.forEach(r),ma.forEach(r),_p=i(f),dt=o(f,"DIV",{class:!0});var ls=n(dt);g(vr.$$.fragment,ls),vp=i(ls),pe=o(ls,"P",{});var fa=n(pe);bp=s(fa,"Logs "),Wo=o(fa,"CODE",{});var du=n(Wo);$p=s(du,"values"),du.forEach(r),yp=s(fa," to all stored trackers in "),Ho=o(fa,"CODE",{});var pu=n(Ho);wp=s(pu,"self.trackers"),pu.forEach(r),Ep=s(fa,"."),fa.forEach(r),ls.forEach(r),Ap=i(f),V=o(f,"DIV",{class:!0});var ua=n(V);g(br.$$.fragment,ua),xp=i(ua),Fo=o(ua,"P",{});var hu=n(Fo);kp=s(hu,"Lets the main process go first inside a with block."),hu.forEach(r),Pp=i(ua),Yo=o(ua,"P",{});var mu=n(Yo);Dp=s(mu,"The other processes will enter the with block after the main process exits."),mu.forEach(r),ua.forEach(r),Tp=i(f),R=o(f,"DIV",{class:!0});var ga=n(R);g($r.$$.fragment,ga),Op=i(ga),yr=o(ga,"P",{});var is=n(yr);Ip=s(is,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Ko=o(is,"CODE",{});var fu=n(Ko);Sp=s(fu,"torch.nn.parallel.DistributedDataParallel.no_sync"),fu.forEach(r),Lp=s(is,"."),is.forEach(r),Np=i(ga),wr=o(ga,"P",{});var ds=n(wr);jp=s(ds,"If "),Qo=o(ds,"CODE",{});var uu=n(Qo);Cp=s(uu,"model"),uu.forEach(r),zp=s(ds," is not in DDP, this context manager does nothing"),ds.forEach(r),ga.forEach(r),qp=i(f),pt=o(f,"DIV",{class:!0});var ps=n(pt);g(Er.$$.fragment,ps),Up=i(ps),Bo=o(ps,"P",{});var gu=n(Bo);Gp=s(gu,"A decorator that will run the decorated function on the local main process only."),gu.forEach(r),ps.forEach(r),Vp=i(f),ht=o(f,"DIV",{class:!0});var hs=n(ht);g(Ar.$$.fragment,hs),Rp=i(hs),Xo=o(hs,"P",{});var _u=n(Xo);Mp=s(_u,"Run func on certain local process only"),_u.forEach(r),hs.forEach(r),Wp=i(f),mt=o(f,"DIV",{class:!0});var ms=n(mt);g(xr.$$.fragment,ms),Hp=i(ms),Jo=o(ms,"P",{});var vu=n(Jo);Fp=s(vu,"A decorator that will run the decorated function on the main process only."),vu.forEach(r),ms.forEach(r),Yp=i(f),ft=o(f,"DIV",{class:!0});var fs=n(ft);g(kr.$$.fragment,fs),Kp=i(fs),Zo=o(fs,"P",{});var bu=n(Zo);Qp=s(bu,"A decorator that will run the decorated function on a given process index only."),bu.forEach(r),fs.forEach(r),Bp=i(f),ut=o(f,"DIV",{class:!0});var us=n(ut);g(Pr.$$.fragment,us),Xp=i(us),en=o(us,"P",{});var $u=n(en);Jp=s($u,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),$u.forEach(r),us.forEach(r),Zp=i(f),L=o(f,"DIV",{class:!0});var At=n(L);g(Dr.$$.fragment,At),eh=i(At),Tr=o(At,"P",{});var gs=n(Tr);th=s(gs,"Prepare all objects passed in "),tn=o(gs,"CODE",{});var yu=n(tn);rh=s(yu,"args"),yu.forEach(r),ah=s(gs,` for distributed training and mixed precision, then return them in the same
order.`),gs.forEach(r),oh=i(At),rn=o(At,"P",{});var wu=n(rn);nh=s(wu,"Accepts the following type of objects:"),wu.forEach(r),ch=i(At),he=o(At,"UL",{});var _a=n(he);oa=o(_a,"LI",{});var im=n(oa);an=o(im,"CODE",{});var Eu=n(an);sh=s(Eu,"torch.utils.data.DataLoader"),Eu.forEach(r),lh=s(im,": PyTorch Dataloader"),im.forEach(r),ih=i(_a),na=o(_a,"LI",{});var dm=n(na);on=o(dm,"CODE",{});var Au=n(on);dh=s(Au,"torch.nn.Module"),Au.forEach(r),ph=s(dm,": PyTorch Module"),dm.forEach(r),hh=i(_a),ca=o(_a,"LI",{});var pm=n(ca);nn=o(pm,"CODE",{});var xu=n(nn);mh=s(xu,"torch.optim.Optimizer"),xu.forEach(r),fh=s(pm,": PyTorch Optimizer"),pm.forEach(r),_a.forEach(r),At.forEach(r),uh=i(f),gt=o(f,"DIV",{class:!0});var _s=n(gt);g(Or.$$.fragment,_s),gh=i(_s),Ir=o(_s,"P",{});var vs=n(Ir);_h=s(vs,"Use in replacement of "),cn=o(vs,"CODE",{});var ku=n(cn);vh=s(ku,"print()"),ku.forEach(r),bh=s(vs," to only print once per server."),vs.forEach(r),_s.forEach(r),$h=i(f),M=o(f,"DIV",{class:!0});var va=n(M);g(Sr.$$.fragment,va),yh=i(va),me=o(va,"P",{});var ba=n(me);wh=s(ba,"Reduce the values in "),sn=o(ba,"EM",{});var Pu=n(sn);Eh=s(Pu,"tensor"),Pu.forEach(r),Ah=s(ba," across all processes based on "),ln=o(ba,"EM",{});var Du=n(ln);xh=s(Du,"reduction"),Du.forEach(r),kh=s(ba,"."),ba.forEach(r),Ph=i(va),dn=o(va,"P",{});var Tu=n(dn);Dh=s(Tu,`Note:
All processes get the reduced value.`),Tu.forEach(r),va.forEach(r),Th=i(f),N=o(f,"DIV",{class:!0});var xt=n(N);g(Lr.$$.fragment,xt),Oh=i(xt),C=o(xt,"P",{});var kt=n(C);Ih=s(kt,"Makes note of "),pn=o(kt,"CODE",{});var Ou=n(pn);Sh=s(Ou,"objects"),Ou.forEach(r),Lh=s(kt," and will save or load them in during "),hn=o(kt,"CODE",{});var Iu=n(hn);Nh=s(Iu,"save_state"),Iu.forEach(r),jh=s(kt," or "),mn=o(kt,"CODE",{});var Su=n(mn);Ch=s(Su,"load_state"),Su.forEach(r),zh=s(kt,"."),kt.forEach(r),qh=i(xt),fn=o(xt,"P",{});var Lu=n(fn);Uh=s(Lu,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Lu.forEach(r),Gh=i(xt),g(_t.$$.fragment,xt),xt.forEach(r),Vh=i(f),vt=o(f,"DIV",{class:!0});var bs=n(vt);g(Nr.$$.fragment,bs),Rh=i(bs),jr=o(bs,"P",{});var $s=n(jr);Mh=s($s,"Save the object passed to disk once per machine. Use in place of "),un=o($s,"CODE",{});var Nu=n(un);Wh=s(Nu,"torch.save"),Nu.forEach(r),Hh=s($s,"."),$s.forEach(r),bs.forEach(r),Fh=i(f),bt=o(f,"DIV",{class:!0});var ys=n(bt);g(Cr.$$.fragment,ys),Yh=i(ys),gn=o(ys,"P",{});var ju=n(gn);Kh=s(ju,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),ju.forEach(r),ys.forEach(r),Qh=i(f),$t=o(f,"DIV",{class:!0});var ws=n($t);g(zr.$$.fragment,ws),Bh=i(ws),_n=o(ws,"P",{});var Cu=n(_n);Xh=s(Cu,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Cu.forEach(r),ws.forEach(r),Jh=i(f),yt=o(f,"DIV",{class:!0});var Es=n(yt);g(qr.$$.fragment,Es),Zh=i(Es),fe=o(Es,"P",{});var $a=n(fe);em=s($a,"Unwraps the "),vn=o($a,"CODE",{});var zu=n(vn);tm=s(zu,"model"),zu.forEach(r),rm=s($a," from the additional layer possible added by "),sa=o($a,"A",{href:!0});var qu=n(sa);am=s(qu,"prepare()"),qu.forEach(r),om=s($a,`. Useful before saving
the model.`),$a.forEach(r),Es.forEach(r),nm=i(f),wt=o(f,"DIV",{class:!0});var As=n(wt);g(Ur.$$.fragment,As),cm=i(As),bn=o(As,"P",{});var Uu=n(bn);sm=s(Uu,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),Uu.forEach(r),As.forEach(r),f.forEach(r),this.h()},h(){d(y,"name","hf:doc:metadata"),d(y,"content",JSON.stringify(Qu)),d(x,"id","accelerator"),d(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x,"href","#accelerator"),d(E,"class","relative group"),d(P,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(ve,"id","quick-adaptation-of-your-code"),d(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ve,"href","#quick-adaptation-of-your-code"),d(Q,"class","relative group"),d(Wr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(Hr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Yr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.gather"),d(X,"start","4"),d(Ee,"id","advanced-recommendations"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#advanced-recommendations"),d(J,"class","relative group"),d(Ae,"id","printing"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#printing"),d(Z,"class","relative group"),d(Kr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.print"),d(xe,"id","executing-processes"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#executing-processes"),d(te,"class","relative group"),d(ke,"id","once-on-a-single-server"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#once-on-a-single-server"),d(re,"class","relative group"),d(Qr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),d(Te,"id","only-ever-once-across-all-servers"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#only-ever-once-across-all-servers"),d(ae,"class","relative group"),d(Br,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),d(Se,"id","on-specific-processes"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#on-specific-processes"),d(oe,"class","relative group"),d(Le,"id","synchronicity-control"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#synchronicity-control"),d(ne,"class","relative group"),d(Jr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),d(je,"id","saving-and-loading"),d(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(je,"href","#saving-and-loading"),d(ce,"class","relative group"),d(Zr,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),d(ea,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save"),d(ze,"id","operations"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#operations"),d(se,"class","relative group"),d(qe,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),d(Ue,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),d(Ge,"id","gradient-accumulation"),d(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ge,"href","#gradient-accumulation"),d(le,"class","relative group"),d(ta,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),d(Re,"id","accelerate.Accelerator"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#accelerate.Accelerator"),d(ie,"class","relative group"),d(ra,"href","/docs/accelerate/main/en/package_reference/utilities#accelerate.DistributedType"),d(aa,"href","/docs/accelerate/main/en/package_reference/state#accelerate.state.AcceleratorState"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,y),h(t,D,p),h(t,E,p),e(E,x),e(x,H),_(T,H,null),e(E,Pt),e(E,F),e(F,Y),h(t,_e,p),h(t,S,p),e(S,K),e(S,P),e(P,Vr),e(S,Rr),h(t,Dt,p),h(t,Q,p),e(Q,ve),e(ve,ya),_(Tt,ya,null),e(Q,xs),e(Q,wa),e(wa,ks),h(t,Nn,p),h(t,Mr,p),e(Mr,Ps),h(t,jn,p),h(t,z,p),e(z,B),e(B,Ds),e(B,Wr),e(Wr,Ts),e(B,Os),e(B,Ea),e(Ea,Is),e(B,Ss),e(z,Ls),e(z,Ot),e(Ot,Ns),e(Ot,Hr),e(Hr,js),e(Ot,Cs),e(z,zs),e(z,j),e(j,qs),e(j,Aa),e(Aa,Us),e(j,Gs),e(j,xa),e(xa,Vs),e(j,Rs),e(j,ka),e(ka,Ms),e(j,Ws),h(t,Cn,p),_(be,t,p),h(t,zn,p),h(t,X,p),e(X,$e),e($e,Hs),e($e,Pa),e(Pa,Fs),e($e,Ys),e($e,Da),e(Da,Ks),e(X,Qs),e(X,Fr),e(Fr,Bs),e(Fr,Yr),e(Yr,Xs),h(t,qn,p),_(ye,t,p),h(t,Un,p),h(t,we,p),e(we,Js),e(we,Ta),e(Ta,Zs),e(we,el),h(t,Gn,p),h(t,J,p),e(J,Ee),e(Ee,Oa),_(It,Oa,null),e(J,tl),e(J,Ia),e(Ia,rl),h(t,Vn,p),h(t,Z,p),e(Z,Ae),e(Ae,Sa),_(St,Sa,null),e(Z,al),e(Z,La),e(La,ol),h(t,Rn,p),h(t,ee,p),e(ee,Na),e(Na,nl),e(ee,cl),e(ee,Kr),e(Kr,sl),e(ee,ll),h(t,Mn,p),_(Lt,t,p),h(t,Wn,p),h(t,te,p),e(te,xe),e(xe,ja),_(Nt,ja,null),e(te,il),e(te,Ca),e(Ca,dl),h(t,Hn,p),h(t,re,p),e(re,ke),e(ke,za),_(jt,za,null),e(re,pl),e(re,qa),e(qa,hl),h(t,Fn,p),h(t,Pe,p),e(Pe,ml),e(Pe,Ua),e(Ua,fl),e(Pe,ul),h(t,Yn,p),_(Ct,t,p),h(t,Kn,p),h(t,De,p),e(De,gl),e(De,Qr),e(Qr,_l),e(De,vl),h(t,Qn,p),_(zt,t,p),h(t,Bn,p),h(t,ae,p),e(ae,Te),e(Te,Ga),_(qt,Ga,null),e(ae,bl),e(ae,Va),e(Va,$l),h(t,Xn,p),h(t,Oe,p),e(Oe,yl),e(Oe,Ra),e(Ra,wl),e(Oe,El),h(t,Jn,p),_(Ut,t,p),h(t,Zn,p),h(t,Ie,p),e(Ie,Al),e(Ie,Br),e(Br,xl),e(Ie,kl),h(t,ec,p),_(Gt,t,p),h(t,tc,p),h(t,oe,p),e(oe,Se),e(Se,Ma),_(Vt,Ma,null),e(oe,Pl),e(oe,Wa),e(Wa,Dl),h(t,rc,p),h(t,Xr,p),e(Xr,Tl),h(t,ac,p),_(Rt,t,p),h(t,oc,p),_(Mt,t,p),h(t,nc,p),h(t,ne,p),e(ne,Le),e(Le,Ha),_(Wt,Ha,null),e(ne,Ol),e(ne,Fa),e(Fa,Il),h(t,cc,p),h(t,Ne,p),e(Ne,Sl),e(Ne,Jr),e(Jr,Ll),e(Ne,Nl),h(t,sc,p),h(t,ce,p),e(ce,je),e(je,Ya),_(Ht,Ya,null),e(ce,jl),e(ce,Ka),e(Ka,Cl),h(t,lc,p),h(t,Ce,p),e(Ce,zl),e(Ce,Zr),e(Zr,ql),e(Ce,Ul),h(t,ic,p),_(Ft,t,p),h(t,dc,p),h(t,q,p),e(q,Gl),e(q,ea),e(ea,Vl),e(q,Rl),e(q,Qa),e(Qa,Ml),e(q,Wl),h(t,pc,p),_(Yt,t,p),h(t,hc,p),h(t,se,p),e(se,ze),e(ze,Ba),_(Kt,Ba,null),e(se,Hl),e(se,Xa),e(Xa,Fl),h(t,mc,p),h(t,O,p),e(O,Yl),e(O,qe),e(qe,Kl),e(qe,Ja),e(Ja,Ql),e(qe,Bl),e(O,Xl),e(O,Za),e(Za,Jl),e(O,Zl),e(O,Ue),e(Ue,ei),e(Ue,eo),e(eo,ti),e(Ue,ri),e(O,ai),e(O,to),e(to,oi),h(t,fc,p),h(t,le,p),e(le,Ge),e(Ge,ro),_(Qt,ro,null),e(le,ni),e(le,ao),e(ao,ci),h(t,uc,p),h(t,Ve,p),e(Ve,si),e(Ve,ta),e(ta,li),e(Ve,ii),h(t,gc,p),_(Bt,t,p),h(t,_c,p),h(t,ie,p),e(ie,Re),e(Re,oo),_(Xt,oo,null),e(ie,di),e(ie,no),e(no,pi),h(t,vc,p),h(t,m,p),_(Jt,m,null),e(m,hi),e(m,co),e(co,mi),e(m,fi),e(m,so),e(so,lo),e(lo,ui),e(m,gi),e(m,A),e(A,Me),e(Me,io),e(io,_i),e(Me,vi),e(Me,po),e(po,bi),e(Me,$i),e(A,yi),e(A,We),e(We,ho),e(ho,wi),e(We,Ei),e(We,ra),e(ra,Ai),e(We,xi),e(A,ki),e(A,He),e(He,mo),e(mo,Pi),e(He,Di),e(He,fo),e(fo,Ti),e(He,Oi),e(A,Ii),e(A,Fe),e(Fe,uo),e(uo,Si),e(Fe,Li),e(Fe,go),e(go,Ni),e(Fe,ji),e(A,Ci),e(A,Ye),e(Ye,_o),e(_o,zi),e(Ye,qi),e(Ye,vo),e(vo,Ui),e(Ye,Gi),e(A,Vi),e(A,Ke),e(Ke,bo),e(bo,Ri),e(Ke,Mi),e(Ke,$o),e($o,Wi),e(Ke,Hi),e(A,Fi),e(A,Qe),e(Qe,yo),e(yo,Yi),e(Qe,Ki),e(Qe,wo),e(wo,Qi),e(Qe,Bi),e(A,Xi),e(A,Be),e(Be,Eo),e(Eo,Ji),e(Be,Zi),e(Be,aa),e(aa,ed),e(Be,td),e(A,rd),e(A,Xe),e(Xe,Ao),e(Ao,ad),e(Xe,od),e(Xe,xo),e(xo,nd),e(Xe,cd),e(A,sd),e(A,Je),e(Je,ko),e(ko,ld),e(Je,id),e(Je,Po),e(Po,dd),e(Je,pd),e(m,hd),e(m,Ze),_(Zt,Ze,null),e(Ze,md),e(Ze,Do),e(Do,fd),e(m,ud),e(m,et),_(er,et,null),e(et,gd),e(et,To),e(To,_d),e(m,vd),e(m,tt),_(tr,tt,null),e(tt,bd),e(tt,de),e(de,$d),e(de,Oo),e(Oo,yd),e(de,wd),e(de,Io),e(Io,Ed),e(de,Ad),e(m,xd),e(m,rt),_(rr,rt,null),e(rt,kd),e(rt,ar),e(ar,Pd),e(ar,So),e(So,Dd),e(ar,Td),e(m,Od),e(m,at),_(or,at,null),e(at,Id),e(at,nr),e(nr,Sd),e(nr,Lo),e(Lo,Ld),e(nr,Nd),e(m,jd),e(m,ot),_(cr,ot,null),e(ot,Cd),e(ot,sr),e(sr,zd),e(sr,No),e(No,qd),e(sr,Ud),e(m,Gd),e(m,nt),_(lr,nt,null),e(nt,Vd),e(nt,jo),e(jo,Rd),e(m,Md),e(m,ct),_(ir,ct,null),e(ct,Wd),e(ct,Co),e(Co,Hd),e(m,Fd),e(m,U),_(dr,U,null),e(U,Yd),e(U,pr),e(pr,Kd),e(pr,zo),e(zo,Qd),e(pr,Bd),e(U,Xd),e(U,qo),e(qo,Jd),e(m,Zd),e(m,st),_(hr,st,null),e(st,ep),e(st,mr),e(mr,tp),e(mr,Uo),e(Uo,rp),e(mr,ap),e(m,op),e(m,lt),_(fr,lt,null),e(lt,np),e(lt,ur),e(ur,cp),e(ur,Go),e(Go,sp),e(ur,lp),e(m,ip),e(m,it),_(gr,it,null),e(it,dp),e(it,Vo),e(Vo,pp),e(m,hp),e(m,G),_(_r,G,null),e(G,mp),e(G,Ro),e(Ro,fp),e(G,up),e(G,Mo),e(Mo,gp),e(m,_p),e(m,dt),_(vr,dt,null),e(dt,vp),e(dt,pe),e(pe,bp),e(pe,Wo),e(Wo,$p),e(pe,yp),e(pe,Ho),e(Ho,wp),e(pe,Ep),e(m,Ap),e(m,V),_(br,V,null),e(V,xp),e(V,Fo),e(Fo,kp),e(V,Pp),e(V,Yo),e(Yo,Dp),e(m,Tp),e(m,R),_($r,R,null),e(R,Op),e(R,yr),e(yr,Ip),e(yr,Ko),e(Ko,Sp),e(yr,Lp),e(R,Np),e(R,wr),e(wr,jp),e(wr,Qo),e(Qo,Cp),e(wr,zp),e(m,qp),e(m,pt),_(Er,pt,null),e(pt,Up),e(pt,Bo),e(Bo,Gp),e(m,Vp),e(m,ht),_(Ar,ht,null),e(ht,Rp),e(ht,Xo),e(Xo,Mp),e(m,Wp),e(m,mt),_(xr,mt,null),e(mt,Hp),e(mt,Jo),e(Jo,Fp),e(m,Yp),e(m,ft),_(kr,ft,null),e(ft,Kp),e(ft,Zo),e(Zo,Qp),e(m,Bp),e(m,ut),_(Pr,ut,null),e(ut,Xp),e(ut,en),e(en,Jp),e(m,Zp),e(m,L),_(Dr,L,null),e(L,eh),e(L,Tr),e(Tr,th),e(Tr,tn),e(tn,rh),e(Tr,ah),e(L,oh),e(L,rn),e(rn,nh),e(L,ch),e(L,he),e(he,oa),e(oa,an),e(an,sh),e(oa,lh),e(he,ih),e(he,na),e(na,on),e(on,dh),e(na,ph),e(he,hh),e(he,ca),e(ca,nn),e(nn,mh),e(ca,fh),e(m,uh),e(m,gt),_(Or,gt,null),e(gt,gh),e(gt,Ir),e(Ir,_h),e(Ir,cn),e(cn,vh),e(Ir,bh),e(m,$h),e(m,M),_(Sr,M,null),e(M,yh),e(M,me),e(me,wh),e(me,sn),e(sn,Eh),e(me,Ah),e(me,ln),e(ln,xh),e(me,kh),e(M,Ph),e(M,dn),e(dn,Dh),e(m,Th),e(m,N),_(Lr,N,null),e(N,Oh),e(N,C),e(C,Ih),e(C,pn),e(pn,Sh),e(C,Lh),e(C,hn),e(hn,Nh),e(C,jh),e(C,mn),e(mn,Ch),e(C,zh),e(N,qh),e(N,fn),e(fn,Uh),e(N,Gh),_(_t,N,null),e(m,Vh),e(m,vt),_(Nr,vt,null),e(vt,Rh),e(vt,jr),e(jr,Mh),e(jr,un),e(un,Wh),e(jr,Hh),e(m,Fh),e(m,bt),_(Cr,bt,null),e(bt,Yh),e(bt,gn),e(gn,Kh),e(m,Qh),e(m,$t),_(zr,$t,null),e($t,Bh),e($t,_n),e(_n,Xh),e(m,Jh),e(m,yt),_(qr,yt,null),e(yt,Zh),e(yt,fe),e(fe,em),e(fe,vn),e(vn,tm),e(fe,rm),e(fe,sa),e(sa,am),e(fe,om),e(m,nm),e(m,wt),_(Ur,wt,null),e(wt,cm),e(wt,bn),e(bn,sm),bc=!0},p(t,[p]){const Gr={};p&2&&(Gr.$$scope={dirty:p,ctx:t}),be.$set(Gr);const $n={};p&2&&($n.$$scope={dirty:p,ctx:t}),ye.$set($n);const yn={};p&2&&(yn.$$scope={dirty:p,ctx:t}),_t.$set(yn)},i(t){bc||(v(T.$$.fragment,t),v(Tt.$$.fragment,t),v(be.$$.fragment,t),v(ye.$$.fragment,t),v(It.$$.fragment,t),v(St.$$.fragment,t),v(Lt.$$.fragment,t),v(Nt.$$.fragment,t),v(jt.$$.fragment,t),v(Ct.$$.fragment,t),v(zt.$$.fragment,t),v(qt.$$.fragment,t),v(Ut.$$.fragment,t),v(Gt.$$.fragment,t),v(Vt.$$.fragment,t),v(Rt.$$.fragment,t),v(Mt.$$.fragment,t),v(Wt.$$.fragment,t),v(Ht.$$.fragment,t),v(Ft.$$.fragment,t),v(Yt.$$.fragment,t),v(Kt.$$.fragment,t),v(Qt.$$.fragment,t),v(Bt.$$.fragment,t),v(Xt.$$.fragment,t),v(Jt.$$.fragment,t),v(Zt.$$.fragment,t),v(er.$$.fragment,t),v(tr.$$.fragment,t),v(rr.$$.fragment,t),v(or.$$.fragment,t),v(cr.$$.fragment,t),v(lr.$$.fragment,t),v(ir.$$.fragment,t),v(dr.$$.fragment,t),v(hr.$$.fragment,t),v(fr.$$.fragment,t),v(gr.$$.fragment,t),v(_r.$$.fragment,t),v(vr.$$.fragment,t),v(br.$$.fragment,t),v($r.$$.fragment,t),v(Er.$$.fragment,t),v(Ar.$$.fragment,t),v(xr.$$.fragment,t),v(kr.$$.fragment,t),v(Pr.$$.fragment,t),v(Dr.$$.fragment,t),v(Or.$$.fragment,t),v(Sr.$$.fragment,t),v(Lr.$$.fragment,t),v(_t.$$.fragment,t),v(Nr.$$.fragment,t),v(Cr.$$.fragment,t),v(zr.$$.fragment,t),v(qr.$$.fragment,t),v(Ur.$$.fragment,t),bc=!0)},o(t){b(T.$$.fragment,t),b(Tt.$$.fragment,t),b(be.$$.fragment,t),b(ye.$$.fragment,t),b(It.$$.fragment,t),b(St.$$.fragment,t),b(Lt.$$.fragment,t),b(Nt.$$.fragment,t),b(jt.$$.fragment,t),b(Ct.$$.fragment,t),b(zt.$$.fragment,t),b(qt.$$.fragment,t),b(Ut.$$.fragment,t),b(Gt.$$.fragment,t),b(Vt.$$.fragment,t),b(Rt.$$.fragment,t),b(Mt.$$.fragment,t),b(Wt.$$.fragment,t),b(Ht.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Bt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(or.$$.fragment,t),b(cr.$$.fragment,t),b(lr.$$.fragment,t),b(ir.$$.fragment,t),b(dr.$$.fragment,t),b(hr.$$.fragment,t),b(fr.$$.fragment,t),b(gr.$$.fragment,t),b(_r.$$.fragment,t),b(vr.$$.fragment,t),b(br.$$.fragment,t),b($r.$$.fragment,t),b(Er.$$.fragment,t),b(Ar.$$.fragment,t),b(xr.$$.fragment,t),b(kr.$$.fragment,t),b(Pr.$$.fragment,t),b(Dr.$$.fragment,t),b(Or.$$.fragment,t),b(Sr.$$.fragment,t),b(Lr.$$.fragment,t),b(_t.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(zr.$$.fragment,t),b(qr.$$.fragment,t),b(Ur.$$.fragment,t),bc=!1},d(t){r(y),t&&r(D),t&&r(E),$(T),t&&r(_e),t&&r(S),t&&r(Dt),t&&r(Q),$(Tt),t&&r(Nn),t&&r(Mr),t&&r(jn),t&&r(z),t&&r(Cn),$(be,t),t&&r(zn),t&&r(X),t&&r(qn),$(ye,t),t&&r(Un),t&&r(we),t&&r(Gn),t&&r(J),$(It),t&&r(Vn),t&&r(Z),$(St),t&&r(Rn),t&&r(ee),t&&r(Mn),$(Lt,t),t&&r(Wn),t&&r(te),$(Nt),t&&r(Hn),t&&r(re),$(jt),t&&r(Fn),t&&r(Pe),t&&r(Yn),$(Ct,t),t&&r(Kn),t&&r(De),t&&r(Qn),$(zt,t),t&&r(Bn),t&&r(ae),$(qt),t&&r(Xn),t&&r(Oe),t&&r(Jn),$(Ut,t),t&&r(Zn),t&&r(Ie),t&&r(ec),$(Gt,t),t&&r(tc),t&&r(oe),$(Vt),t&&r(rc),t&&r(Xr),t&&r(ac),$(Rt,t),t&&r(oc),$(Mt,t),t&&r(nc),t&&r(ne),$(Wt),t&&r(cc),t&&r(Ne),t&&r(sc),t&&r(ce),$(Ht),t&&r(lc),t&&r(Ce),t&&r(ic),$(Ft,t),t&&r(dc),t&&r(q),t&&r(pc),$(Yt,t),t&&r(hc),t&&r(se),$(Kt),t&&r(mc),t&&r(O),t&&r(fc),t&&r(le),$(Qt),t&&r(uc),t&&r(Ve),t&&r(gc),$(Bt,t),t&&r(_c),t&&r(ie),$(Xt),t&&r(vc),t&&r(m),$(Jt),$(Zt),$(er),$(tr),$(rr),$(or),$(cr),$(lr),$(ir),$(dr),$(hr),$(fr),$(gr),$(_r),$(vr),$(br),$($r),$(Er),$(Ar),$(xr),$(kr),$(Pr),$(Dr),$(Or),$(Sr),$(Lr),$(_t),$(Nr),$(Cr),$(zr),$(qr),$(Ur)}}}const Qu={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function Bu(ge){return Wu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class rg extends Gu{constructor(y){super();Vu(this,y,Bu,Ku,Ru,{})}}export{rg as default,Qu as metadata};
