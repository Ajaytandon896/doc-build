import{S as O_,i as L_,s as N_,e as a,k as l,w as _,t as n,M as C_,c as o,d as r,m as i,a as s,x as v,h as c,b as d,G as e,g as m,y as $,q as b,o as y,B as w,v as q_,L as Al}from"../../chunks/vendor-hf-doc-builder.js";import{T as Pn}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as I}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as L}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as El}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function U_(T){let f,x;return{c(){f=a("p"),x=n("Step three is optional, but considered a best practice.")},l(A){f=o(A,"P",{});var E=s(f);x=c(E,"Step three is optional, but considered a best practice."),E.forEach(r)},m(A,E){m(A,f,E),e(f,x)},d(A){A&&r(f)}}}function V_(T){let f,x;return{c(){f=a("p"),x=n("Step five is mandatory when using distributed evaluation")},l(A){f=o(A,"P",{});var E=s(f);x=c(E,"Step five is mandatory when using distributed evaluation"),E.forEach(r)},m(A,E){m(A,f,E),e(f,x)},d(A){A&&r(f)}}}function G_(T){let f,x,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

with accelerator.accumulate():
    for input, output in dataloader:
        outputs = model(input)
        loss = loss_func(outputs)
        loss.backward()
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.accumulate():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span>, output <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>        outputs = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>        loss = loss_func(outputs)
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        scheduler.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()`}}),{c(){f=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(u){f=o(u,"P",{});var k=s(f);x=c(k,"Example:"),k.forEach(r),A=i(u),v(E.$$.fragment,u)},m(u,k){m(u,f,k),e(f,x),m(u,A,k),$(E,u,k),j=!0},p:Al,i(u){j||(b(E.$$.fragment,u),j=!0)},o(u){y(E.$$.fragment,u),j=!1},d(u){u&&r(f),u&&r(A),w(E,u)}}}function R_(T){let f,x,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){f=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(u){f=o(u,"P",{});var k=s(f);x=c(k,"Example:"),k.forEach(r),A=i(u),v(E.$$.fragment,u)},m(u,k){m(u,f,k),e(f,x),m(u,A,k),$(E,u,k),j=!0},p:Al,i(u){j||(b(E.$$.fragment,u),j=!0)},o(u){y(E.$$.fragment,u),j=!1},d(u){u&&r(f),u&&r(A),w(E,u)}}}function M_(T){let f,x,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_value_(model.parameters(), clip_value)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_value_(model.parameters(), clip_value)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){f=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(u){f=o(u,"P",{});var k=s(f);x=c(k,"Example:"),k.forEach(r),A=i(u),v(E.$$.fragment,u)},m(u,k){m(u,f,k),e(f,x),m(u,A,k),$(E,u,k),j=!0},p:Al,i(u){j||(b(E.$$.fragment,u),j=!0)},o(u){y(E.$$.fragment,u),j=!1},d(u){u&&r(f),u&&r(A),w(E,u)}}}function W_(T){let f,x,A,E,j;return{c(){f=a("p"),x=n("Should only be used in conjunction with "),A=a("a"),E=n("Accelerator.save_state()"),j=n("."),this.h()},l(u){f=o(u,"P",{});var k=s(f);x=c(k,"Should only be used in conjunction with "),A=o(k,"A",{href:!0});var N=s(A);E=c(N,"Accelerator.save_state()"),N.forEach(r),j=c(k,"."),k.forEach(r),this.h()},h(){d(A,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save_state")},m(u,k){m(u,f,k),e(f,x),e(f,A),e(A,E),e(f,j)},d(u){u&&r(f)}}}function H_(T){let f,x,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
input_a = next(iter(dataloader))
input_b = next(iter(dataloader))

with accelerator.no_sync():
    outputs = model(input_a)
    loss = loss_func(outputs)
    accelerator.backward(loss)
    # No synchronization across processes, only accumulate gradients
outputs = model(input_b)
accelerator.backward(loss)
# Synchronization across all processes
optimizer.step()
optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_a = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))
<span class="hljs-meta">&gt;&gt;&gt; </span>input_b = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.no_sync():
<span class="hljs-meta">... </span>    outputs = model(input_a)
<span class="hljs-meta">... </span>    loss = loss_func(outputs)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-comment"># No synchronization across processes, only accumulate gradients</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator.backward(loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Synchronization across all processes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.step()
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.zero_grad()`}}),{c(){f=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(u){f=o(u,"P",{});var k=s(f);x=c(k,"Example:"),k.forEach(r),A=i(u),v(E.$$.fragment,u)},m(u,k){m(u,f,k),e(f,x),m(u,A,k),$(E,u,k),j=!0},p:Al,i(u){j||(b(E.$$.fragment,u),j=!0)},o(u){y(E.$$.fragment,u),j=!1},d(u){u&&r(f),u&&r(A),w(E,u)}}}function F_(T){let f,x,A,E,j,u,k,N,re,ke,C;return{c(){f=a("p"),x=n("Every "),A=a("code"),E=n("object"),j=n(" must have a "),u=a("code"),k=n("load_state_dict"),N=n(" and "),re=a("code"),ke=n("state_dict"),C=n(" function to be stored.")},l(ae){f=o(ae,"P",{});var S=s(f);x=c(S,"Every "),A=o(S,"CODE",{});var ga=s(A);E=c(ga,"object"),ga.forEach(r),j=c(S," must have a "),u=o(S,"CODE",{});var _a=s(u);k=c(_a,"load_state_dict"),_a.forEach(r),N=c(S," and "),re=o(S,"CODE",{});var Mt=s(re);ke=c(Mt,"state_dict"),Mt.forEach(r),C=c(S," function to be stored."),S.forEach(r)},m(ae,S){m(ae,f,S),e(f,x),e(f,A),e(A,E),e(f,j),e(f,u),e(u,k),e(f,N),e(f,re),e(re,ke),e(f,C)},d(ae){ae&&r(f)}}}function Y_(T){let f,x;return{c(){f=a("p"),x=n(`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`)},l(A){f=o(A,"P",{});var E=s(f);x=c(E,`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`),E.forEach(r)},m(A,E){m(A,f,E),e(f,x)},d(A){A&&r(f)}}}function B_(T){let f,x,A,E,j,u,k,N,re,ke,C,ae,S,ga,_a,Mt,oe,xe,no,Wt,kl,co,xl,jn,va,Pl,Dn,W,se,jl,$a,Dl,Tl,lo,zl,Sl,Il,Ht,Ol,ba,Ll,Nl,Cl,G,ql,io,Ul,Vl,po,Gl,Rl,ho,Ml,Wl,Tn,Pe,zn,ne,je,Hl,mo,Fl,Yl,uo,Bl,Kl,ya,Ql,wa,Xl,Sn,De,In,Te,Jl,fo,Zl,ei,On,ce,ze,go,Ft,ti,_o,ri,Ln,le,Se,vo,Yt,ai,$o,oi,Nn,ie,bo,si,ni,Ea,ci,li,Cn,Bt,qn,de,Ie,yo,Kt,ii,wo,di,Un,pe,Oe,Eo,Qt,pi,Ao,hi,Vn,Le,mi,ko,ui,fi,Gn,Xt,Rn,Ne,gi,Aa,_i,vi,Mn,Jt,Wn,he,Ce,xo,Zt,$i,Po,bi,Hn,qe,yi,jo,wi,Ei,Fn,er,Yn,Ue,Ai,ka,ki,xi,Bn,tr,Kn,me,Ve,Do,rr,Pi,To,ji,Qn,xa,Di,Xn,ar,Jn,or,Zn,ue,Ge,zo,sr,Ti,So,zi,ec,Re,Si,Pa,Ii,Oi,tc,fe,Me,Io,nr,Li,Oo,Ni,rc,We,Ci,ja,qi,Ui,ac,cr,oc,H,Vi,Da,Gi,Ri,Lo,Mi,Wi,sc,lr,nc,ge,He,No,ir,Hi,Co,Fi,cc,O,Yi,Fe,Bi,qo,Ki,Qi,Xi,Uo,Ji,Zi,Ye,ed,Vo,td,rd,ad,Go,od,lc,_e,Be,Ro,dr,sd,Mo,nd,ic,Ke,cd,Ta,ld,id,dc,pr,pc,ve,Qe,Wo,hr,dd,Ho,pd,hc,h,mr,hd,Fo,md,ud,Yo,Bo,fd,gd,D,Xe,Ko,_d,vd,Qo,$d,bd,yd,Je,Xo,wd,Ed,za,Ad,kd,xd,Ze,Jo,Pd,jd,Zo,Dd,Td,zd,et,es,Sd,Id,ts,Od,Ld,Nd,tt,rs,Cd,qd,as,Ud,Vd,Gd,rt,os,Rd,Md,ss,Wd,Hd,Fd,at,ns,Yd,Bd,cs,Kd,Qd,Xd,ot,ls,Jd,Zd,Sa,ep,tp,rp,st,is,ap,op,ds,sp,np,cp,nt,ps,lp,ip,hs,dp,pp,hp,F,ur,mp,ms,up,fp,ct,gp,lt,fr,_p,us,vp,$p,Y,gr,bp,$e,yp,fs,wp,Ep,gs,Ap,kp,xp,_r,Pp,_s,jp,Dp,Tp,it,vr,zp,$r,Sp,vs,Ip,Op,Lp,B,br,Np,yr,Cp,$s,qp,Up,Vp,dt,Gp,K,wr,Rp,Er,Mp,bs,Wp,Hp,Fp,pt,Yp,ht,Ar,Bp,ys,Kp,Qp,mt,kr,Xp,ws,Jp,Zp,Q,xr,eh,Pr,th,Es,rh,ah,oh,As,sh,nh,ut,jr,ch,Dr,lh,ks,ih,dh,ph,ft,Tr,hh,zr,mh,Ia,uh,fh,gh,gt,Sr,_h,R,vh,xs,$h,bh,Ps,yh,wh,js,Eh,Ah,kh,_t,Ir,xh,Or,Ph,Ds,jh,Dh,Th,X,Lr,zh,Ts,Sh,Ih,vt,Oh,J,Nr,Lh,zs,Nh,Ch,Ss,qh,Uh,$t,Cr,Vh,be,Gh,Is,Rh,Mh,Os,Wh,Hh,Fh,Z,qr,Yh,Ls,Bh,Kh,Ns,Qh,Xh,q,Ur,Jh,Vr,Zh,Cs,em,tm,rm,Gr,am,qs,om,sm,nm,bt,cm,yt,Rr,lm,Us,im,dm,wt,Mr,pm,Vs,hm,mm,Et,Wr,um,Gs,fm,gm,At,Hr,_m,Rs,vm,$m,kt,Fr,bm,Ms,ym,wm,U,Yr,Em,Br,Am,Ws,km,xm,Pm,Hs,jm,Dm,ye,Oa,Fs,Tm,zm,Sm,La,Ys,Im,Om,Lm,Na,Bs,Nm,Cm,qm,xt,Kr,Um,Qr,Vm,Ca,Gm,Rm,Mm,Pt,Xr,Wm,Jr,Hm,qa,Fm,Ym,Bm,jt,Zr,Km,ea,Qm,Ua,Xm,Jm,Zm,Dt,ta,eu,ra,tu,Va,ru,au,ou,Tt,aa,su,oa,nu,Ks,cu,lu,iu,ee,sa,du,we,pu,Qs,hu,mu,Xs,uu,fu,gu,Js,_u,vu,V,na,$u,M,bu,Zs,yu,wu,en,Eu,Au,tn,ku,xu,Pu,rn,ju,Du,zt,Tu,St,ca,zu,la,Su,an,Iu,Ou,Lu,te,ia,Nu,on,Cu,qu,It,Uu,Ot,da,Vu,sn,Gu,Ru,Lt,pa,Mu,Ee,Wu,nn,Hu,Fu,Ga,Yu,Bu,Ku,Nt,ha,Qu,cn,Xu,mc;return u=new L({}),Wt=new L({}),Pe=new Pn({props:{$$slots:{default:[U_]},$$scope:{ctx:T}}}),De=new Pn({props:{warning:!0,$$slots:{default:[V_]},$$scope:{ctx:T}}}),Ft=new L({}),Yt=new L({}),Bt=new I({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),Kt=new L({}),Qt=new L({}),Xt=new I({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),Jt=new I({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),Zt=new L({}),er=new I({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),tr=new I({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),rr=new L({}),ar=new I({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),or=new I({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),sr=new L({}),nr=new L({}),cr=new I({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),lr=new I({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),ir=new L({}),dr=new L({}),pr=new I({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),hr=new L({}),mr=new P({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/main/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/main/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all&quot;</code> is selected, will pick up all available trackers in the environment and initialize them. Can
also accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L80"}}),ur=new P({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L507"}}),ct=new El({props:{anchor:"accelerate.Accelerator.accumulate.example",$$slots:{default:[G_]},$$scope:{ctx:T}}}),fr=new P({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1478"}}),gr=new P({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L954"}}),vr=new P({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1386"}}),br=new P({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L991"}}),dt=new El({props:{anchor:"accelerate.Accelerator.clip_grad_norm_.example",$$slots:{default:[R_]},$$scope:{ctx:T}}}),wr=new P({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1026"}}),pt=new El({props:{anchor:"accelerate.Accelerator.clip_grad_value_.example",$$slots:{default:[M_]},$$scope:{ctx:T}}}),Ar=new P({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1225"}}),kr=new P({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1374"}}),xr=new P({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1053",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),jr=new P({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1071"}}),Tr=new P({props:{name:"get_state_dict",anchor:"accelerate.Accelerator.get_state_dict",parameters:[{name:"model",val:""},{name:"unwrap",val:" = True"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_state_dict.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model sent through <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">Accelerator.prepare()</a>`,name:"model"},{anchor:"accelerate.Accelerator.get_state_dict.unwrap",description:`<strong>unwrap</strong> (<code>bool</code>, <em>optional</em>, defaults to True) &#x2014;
Whether to return the original underlying state_dict of <code>model</code> or to return the wrapped state_dict`,name:"unwrap"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1418"}}),Sr=new P({props:{name:"get_tracker",anchor:"accelerate.Accelerator.get_tracker",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_tracker.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name of a tracker, corresponding to the <code>.name</code> property.`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1191"}}),Ir=new P({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like so:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1156"}}),Lr=new P({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1307"}}),vt=new Pn({props:{$$slots:{default:[W_]},$$scope:{ctx:T}}}),Nr=new P({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L444"}}),Cr=new P({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like so:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1205"}}),qr=new P({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L435"}}),Ur=new P({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L453"}}),bt=new El({props:{anchor:"accelerate.Accelerator.no_sync.example",$$slots:{default:[H_]},$$scope:{ctx:T}}}),Rr=new P({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L384"}}),Mr=new P({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L411"}}),Wr=new P({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L372"}}),Hr=new P({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L396"}}),Fr=new P({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1121"}}),Yr=new P({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L605"}}),Kr=new P({props:{name:"prepare_data_loader",anchor:"accelerate.Accelerator.prepare_data_loader",parameters:[{name:"data_loader",val:": DataLoader"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_data_loader.data_loader",description:`<strong>data_loader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A vanilla PyTorch DataLoader to prepare`,name:"data_loader"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L897"}}),Xr=new P({props:{name:"prepare_model",anchor:"accelerate.Accelerator.prepare_model",parameters:[{name:"model",val:": Module"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model to prepare`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L677"}}),Zr=new P({props:{name:"prepare_optimizer",anchor:"accelerate.Accelerator.prepare_optimizer",parameters:[{name:"optimizer",val:": Optimizer"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_optimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
A vanilla PyTorch optimizer to prepare`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L917"}}),ta=new P({props:{name:"prepare_scheduler",anchor:"accelerate.Accelerator.prepare_scheduler",parameters:[{name:"scheduler",val:": _LRScheduler"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_scheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
A vanilla PyTorch scheduler to prepare`,name:"scheduler"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L930"}}),aa=new P({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L543"}}),sa=new P({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1103",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),na=new P({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1454"}}),zt=new Pn({props:{$$slots:{default:[F_]},$$scope:{ctx:T}}}),ca=new P({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1234"}}),ia=new P({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1245"}}),It=new Pn({props:{$$slots:{default:[Y_]},$$scope:{ctx:T}}}),da=new P({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L971"}}),pa=new P({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1138"}}),ha=new P({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1149"}}),{c(){f=a("meta"),x=l(),A=a("h1"),E=a("a"),j=a("span"),_(u.$$.fragment),k=l(),N=a("span"),re=n("Accelerator"),ke=l(),C=a("p"),ae=n("The "),S=a("a"),ga=n("Accelerator"),_a=n(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Mt=l(),oe=a("h2"),xe=a("a"),no=a("span"),_(Wt.$$.fragment),kl=l(),co=a("span"),xl=n("Quick adaptation of your code"),jn=l(),va=a("p"),Pl=n("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),Dn=l(),W=a("ol"),se=a("li"),jl=n("Initialize an "),$a=a("a"),Dl=n("Accelerator"),Tl=n(" object (that we will call "),lo=a("code"),zl=n("accelerator"),Sl=n(" throughout this page) as early as possible in your script."),Il=l(),Ht=a("li"),Ol=n("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),ba=a("a"),Ll=n("prepare()"),Nl=n(" method."),Cl=l(),G=a("li"),ql=n("Remove all the "),io=a("code"),Ul=n(".cuda()"),Vl=n(" or "),po=a("code"),Gl=n(".to(device)"),Rl=n(" from your code and let the "),ho=a("code"),Ml=n("accelerator"),Wl=n(" handle the device placement for you."),Tn=l(),_(Pe.$$.fragment),zn=l(),ne=a("ol"),je=a("li"),Hl=n("Replace "),mo=a("code"),Fl=n("loss.backward()"),Yl=n(" in your code with "),uo=a("code"),Bl=n("accelerator.backward(loss)"),Kl=l(),ya=a("li"),Ql=n("Gather your predictions and labels before storing them or using them for metric computation using "),wa=a("a"),Xl=n("gather()"),Sn=l(),_(De.$$.fragment),In=l(),Te=a("p"),Jl=n(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),fo=a("code"),Zl=n("accelerator"),ei=n(":"),On=l(),ce=a("h2"),ze=a("a"),go=a("span"),_(Ft.$$.fragment),ti=l(),_o=a("span"),ri=n("Advanced recommendations"),Ln=l(),le=a("h3"),Se=a("a"),vo=a("span"),_(Yt.$$.fragment),ai=l(),$o=a("span"),oi=n("Printing"),Nn=l(),ie=a("p"),bo=a("code"),si=n("print"),ni=n(" statements should be replaced by "),Ea=a("a"),ci=n("print()"),li=n(" to be printed once per process"),Cn=l(),_(Bt.$$.fragment),qn=l(),de=a("h3"),Ie=a("a"),yo=a("span"),_(Kt.$$.fragment),ii=l(),wo=a("span"),di=n("Executing processes"),Un=l(),pe=a("h4"),Oe=a("a"),Eo=a("span"),_(Qt.$$.fragment),pi=l(),Ao=a("span"),hi=n("Once on a single server"),Vn=l(),Le=a("p"),mi=n("For statements that should be executed once per server, use "),ko=a("code"),ui=n("is_local_main_process"),fi=n(":"),Gn=l(),_(Xt.$$.fragment),Rn=l(),Ne=a("p"),gi=n("A function can be wrapped using the "),Aa=a("a"),_i=n("on_local_main_process()"),vi=n(` function to achieve the same
behavior on a function\u2019s execution:`),Mn=l(),_(Jt.$$.fragment),Wn=l(),he=a("h4"),Ce=a("a"),xo=a("span"),_(Zt.$$.fragment),$i=l(),Po=a("span"),bi=n("Only ever once across all servers"),Hn=l(),qe=a("p"),yi=n("For statements that should only ever be executed once, use "),jo=a("code"),wi=n("is_main_process"),Ei=n(":"),Fn=l(),_(er.$$.fragment),Yn=l(),Ue=a("p"),Ai=n("A function can be wrapped using the "),ka=a("a"),ki=n("on_main_process()"),xi=n(` function to achieve the same
behavior on a function\u2019s execution:`),Bn=l(),_(tr.$$.fragment),Kn=l(),me=a("h4"),Ve=a("a"),Do=a("span"),_(rr.$$.fragment),Pi=l(),To=a("span"),ji=n("On specific processes"),Qn=l(),xa=a("p"),Di=n(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Xn=l(),_(ar.$$.fragment),Jn=l(),_(or.$$.fragment),Zn=l(),ue=a("h3"),Ge=a("a"),zo=a("span"),_(sr.$$.fragment),Ti=l(),So=a("span"),zi=n("Synchronicity control"),ec=l(),Re=a("p"),Si=n("Use "),Pa=a("a"),Ii=n("wait_for_everyone()"),Oi=n(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),tc=l(),fe=a("h3"),Me=a("a"),Io=a("span"),_(nr.$$.fragment),Li=l(),Oo=a("span"),Ni=n("Saving and loading"),rc=l(),We=a("p"),Ci=n("Use "),ja=a("a"),qi=n("unwrap_model()"),Ui=n(" before saving to remove all special model wrappers added during the distributed process."),ac=l(),_(cr.$$.fragment),oc=l(),H=a("p"),Vi=n("Use "),Da=a("a"),Gi=n("save()"),Ri=n(" instead of "),Lo=a("code"),Mi=n("torch.save"),Wi=n(":"),sc=l(),_(lr.$$.fragment),nc=l(),ge=a("h3"),He=a("a"),No=a("span"),_(ir.$$.fragment),Hi=l(),Co=a("span"),Fi=n("Operations"),cc=l(),O=a("p"),Yi=n("Use "),Fe=a("a"),Bi=n("clip"),qo=a("em"),Ki=n("grad_norm"),Qi=n("()"),Xi=n(" instead of "),Uo=a("code"),Ji=n("torch.nn.utils.clip_grad_norm_"),Zi=n(" and "),Ye=a("a"),ed=n("clip"),Vo=a("em"),td=n("grad_value"),rd=n("()"),ad=n(" instead of "),Go=a("code"),od=n("torch.nn.utils.clip_grad_value"),lc=l(),_e=a("h3"),Be=a("a"),Ro=a("span"),_(dr.$$.fragment),sd=l(),Mo=a("span"),nd=n("Gradient Accumulation"),ic=l(),Ke=a("p"),cd=n("To perform gradient accumulation use "),Ta=a("a"),ld=n("accumulate()"),id=n(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),dc=l(),_(pr.$$.fragment),pc=l(),ve=a("h2"),Qe=a("a"),Wo=a("span"),_(hr.$$.fragment),dd=l(),Ho=a("span"),pd=n("Overall API documentation:"),hc=l(),h=a("div"),_(mr.$$.fragment),hd=l(),Fo=a("p"),md=n("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),ud=l(),Yo=a("p"),Bo=a("strong"),fd=n("Available attributes:"),gd=l(),D=a("ul"),Xe=a("li"),Ko=a("strong"),_d=n("device"),vd=n(" ("),Qo=a("code"),$d=n("torch.device"),bd=n(") \u2014 The device to use."),yd=l(),Je=a("li"),Xo=a("strong"),wd=n("distributed_type"),Ed=n(" ("),za=a("a"),Ad=n("DistributedType"),kd=n(") \u2014 The distributed training configuration."),xd=l(),Ze=a("li"),Jo=a("strong"),Pd=n("local_process_index"),jd=n(" ("),Zo=a("code"),Dd=n("int"),Td=n(") \u2014 The process index on the current machine."),zd=l(),et=a("li"),es=a("strong"),Sd=n("mixed_precision"),Id=n(" ("),ts=a("code"),Od=n("str"),Ld=n(") \u2014 The configured mixed precision mode."),Nd=l(),tt=a("li"),rs=a("strong"),Cd=n("num_processes"),qd=n(" ("),as=a("code"),Ud=n("int"),Vd=n(") \u2014 The total number of processes used for training."),Gd=l(),rt=a("li"),os=a("strong"),Rd=n("optimizer_step_was_skipped"),Md=n(" ("),ss=a("code"),Wd=n("bool"),Hd=n(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Fd=l(),at=a("li"),ns=a("strong"),Yd=n("process_index"),Bd=n(" ("),cs=a("code"),Kd=n("int"),Qd=n(") \u2014 The overall index of the current process among all processes."),Xd=l(),ot=a("li"),ls=a("strong"),Jd=n("state"),Zd=n(" ("),Sa=a("a"),ep=n("AcceleratorState"),tp=n(") \u2014 The distributed setup state."),rp=l(),st=a("li"),is=a("strong"),ap=n("sync_gradients"),op=n(" ("),ds=a("code"),sp=n("bool"),np=n(") \u2014 Whether the gradients are currently being synced across all processes."),cp=l(),nt=a("li"),ps=a("strong"),lp=n("use_distributed"),ip=n(" ("),hs=a("code"),dp=n("bool"),pp=n(") \u2014 Whether the current configuration is for distributed training."),hp=l(),F=a("div"),_(ur.$$.fragment),mp=l(),ms=a("p"),up=n("A context manager that will lightly wrap around and perform gradient accumulation automatically"),fp=l(),_(ct.$$.fragment),gp=l(),lt=a("div"),_(fr.$$.fragment),_p=l(),us=a("p"),vp=n(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),$p=l(),Y=a("div"),_(gr.$$.fragment),bp=l(),$e=a("p"),yp=n("Scales the gradients in accordance to "),fs=a("code"),wp=n("Accelerator.gradient_accumulation_steps"),Ep=n(` and calls the correct
`),gs=a("code"),Ap=n("backward()"),kp=n(" based on the configuration."),xp=l(),_r=a("p"),Pp=n("Should be used in lieu of "),_s=a("code"),jp=n("loss.backward()"),Dp=n("."),Tp=l(),it=a("div"),_(vr.$$.fragment),zp=l(),$r=a("p"),Sp=n("Alias for "),vs=a("code"),Ip=n("Accelerate.free_memory"),Op=n(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Lp=l(),B=a("div"),_(br.$$.fragment),Np=l(),yr=a("p"),Cp=n("Should be used in place of "),$s=a("code"),qp=n("torch.nn.utils.clip_grad_norm_"),Up=n("."),Vp=l(),_(dt.$$.fragment),Gp=l(),K=a("div"),_(wr.$$.fragment),Rp=l(),Er=a("p"),Mp=n("Should be used in place of "),bs=a("code"),Wp=n("torch.nn.utils.clip_grad_value_"),Hp=n("."),Fp=l(),_(pt.$$.fragment),Yp=l(),ht=a("div"),_(Ar.$$.fragment),Bp=l(),ys=a("p"),Kp=n(`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),Qp=l(),mt=a("div"),_(kr.$$.fragment),Xp=l(),ws=a("p"),Jp=n(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Zp=l(),Q=a("div"),_(xr.$$.fragment),eh=l(),Pr=a("p"),th=n("Gather the values in "),Es=a("em"),rh=n("tensor"),ah=n(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),oh=l(),As=a("p"),sh=n(`Note:
This gather happens in all processes.`),nh=l(),ut=a("div"),_(jr.$$.fragment),ch=l(),Dr=a("p"),lh=n("Gathers "),ks=a("code"),ih=n("tensor"),dh=n(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),ph=l(),ft=a("div"),_(Tr.$$.fragment),hh=l(),zr=a("p"),mh=n("Returns the state dictionary of a model sent through "),Ia=a("a"),uh=n("Accelerator.prepare()"),fh=n(" in full precision"),gh=l(),gt=a("div"),_(Sr.$$.fragment),_h=l(),R=a("p"),vh=n("Returns a "),xs=a("code"),$h=n("tracker"),bh=n(" from "),Ps=a("code"),yh=n("self.trackers"),wh=n(" based on "),js=a("code"),Eh=n("name"),Ah=n(" on the main process only."),kh=l(),_t=a("div"),_(Ir.$$.fragment),xh=l(),Or=a("p"),Ph=n("Initializes a run for all trackers stored in "),Ds=a("code"),jh=n("self.log_with"),Dh=n(", potentially with starting configurations"),Th=l(),X=a("div"),_(Lr.$$.fragment),zh=l(),Ts=a("p"),Sh=n("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Ih=l(),_(vt.$$.fragment),Oh=l(),J=a("div"),_(Nr.$$.fragment),Lh=l(),zs=a("p"),Nh=n("Lets the local main process go inside a with block."),Ch=l(),Ss=a("p"),qh=n("The other processes will enter the with block after the main process exits."),Uh=l(),$t=a("div"),_(Cr.$$.fragment),Vh=l(),be=a("p"),Gh=n("Logs "),Is=a("code"),Rh=n("values"),Mh=n(" to all stored trackers in "),Os=a("code"),Wh=n("self.trackers"),Hh=n(" on the main process only."),Fh=l(),Z=a("div"),_(qr.$$.fragment),Yh=l(),Ls=a("p"),Bh=n("Lets the main process go first inside a with block."),Kh=l(),Ns=a("p"),Qh=n("The other processes will enter the with block after the main process exits."),Xh=l(),q=a("div"),_(Ur.$$.fragment),Jh=l(),Vr=a("p"),Zh=n(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Cs=a("code"),em=n("torch.nn.parallel.DistributedDataParallel.no_sync"),tm=n("."),rm=l(),Gr=a("p"),am=n("If "),qs=a("code"),om=n("model"),sm=n(" is not in DDP, this context manager does nothing"),nm=l(),_(bt.$$.fragment),cm=l(),yt=a("div"),_(Rr.$$.fragment),lm=l(),Us=a("p"),im=n("A decorator that will run the decorated function on the local main process only."),dm=l(),wt=a("div"),_(Mr.$$.fragment),pm=l(),Vs=a("p"),hm=n("A decorator that will run the decorated function on a given local process index only."),mm=l(),Et=a("div"),_(Wr.$$.fragment),um=l(),Gs=a("p"),fm=n("A decorator that will run the decorated function on the main process only."),gm=l(),At=a("div"),_(Hr.$$.fragment),_m=l(),Rs=a("p"),vm=n("A decorator that will run the decorated function on a given process index only."),$m=l(),kt=a("div"),_(Fr.$$.fragment),bm=l(),Ms=a("p"),ym=n(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),wm=l(),U=a("div"),_(Yr.$$.fragment),Em=l(),Br=a("p"),Am=n("Prepare all objects passed in "),Ws=a("code"),km=n("args"),xm=n(` for distributed training and mixed precision, then return them in the same
order.`),Pm=l(),Hs=a("p"),jm=n("Accepts the following type of objects:"),Dm=l(),ye=a("ul"),Oa=a("li"),Fs=a("code"),Tm=n("torch.utils.data.DataLoader"),zm=n(": PyTorch Dataloader"),Sm=l(),La=a("li"),Ys=a("code"),Im=n("torch.nn.Module"),Om=n(": PyTorch Module"),Lm=l(),Na=a("li"),Bs=a("code"),Nm=n("torch.optim.Optimizer"),Cm=n(": PyTorch Optimizer"),qm=l(),xt=a("div"),_(Kr.$$.fragment),Um=l(),Qr=a("p"),Vm=n(`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Ca=a("a"),Gm=n("Accelerator.prepare()"),Rm=n(" instead."),Mm=l(),Pt=a("div"),_(Xr.$$.fragment),Wm=l(),Jr=a("p"),Hm=n(`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),qa=a("a"),Fm=n("Accelerator.prepare()"),Ym=n(" instead."),Bm=l(),jt=a("div"),_(Zr.$$.fragment),Km=l(),ea=a("p"),Qm=n(`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Ua=a("a"),Xm=n("Accelerator.prepare()"),Jm=n(" instead."),Zm=l(),Dt=a("div"),_(ta.$$.fragment),eu=l(),ra=a("p"),tu=n(`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),Va=a("a"),ru=n("Accelerator.prepare()"),au=n(" instead."),ou=l(),Tt=a("div"),_(aa.$$.fragment),su=l(),oa=a("p"),nu=n("Use in replacement of "),Ks=a("code"),cu=n("print()"),lu=n(" to only print once per server."),iu=l(),ee=a("div"),_(sa.$$.fragment),du=l(),we=a("p"),pu=n("Reduce the values in "),Qs=a("em"),hu=n("tensor"),mu=n(" across all processes based on "),Xs=a("em"),uu=n("reduction"),fu=n("."),gu=l(),Js=a("p"),_u=n(`Note:
All processes get the reduced value.`),vu=l(),V=a("div"),_(na.$$.fragment),$u=l(),M=a("p"),bu=n("Makes note of "),Zs=a("code"),yu=n("objects"),wu=n(" and will save or load them in during "),en=a("code"),Eu=n("save_state"),Au=n(" or "),tn=a("code"),ku=n("load_state"),xu=n("."),Pu=l(),rn=a("p"),ju=n(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Du=l(),_(zt.$$.fragment),Tu=l(),St=a("div"),_(ca.$$.fragment),zu=l(),la=a("p"),Su=n("Save the object passed to disk once per machine. Use in place of "),an=a("code"),Iu=n("torch.save"),Ou=n("."),Lu=l(),te=a("div"),_(ia.$$.fragment),Nu=l(),on=a("p"),Cu=n("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),qu=l(),_(It.$$.fragment),Uu=l(),Ot=a("div"),_(da.$$.fragment),Vu=l(),sn=a("p"),Gu=n("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Ru=l(),Lt=a("div"),_(pa.$$.fragment),Mu=l(),Ee=a("p"),Wu=n("Unwraps the "),nn=a("code"),Hu=n("model"),Fu=n(" from the additional layer possible added by "),Ga=a("a"),Yu=n("prepare()"),Bu=n(`. Useful before saving
the model.`),Ku=l(),Nt=a("div"),_(ha.$$.fragment),Qu=l(),cn=a("p"),Xu=n(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const p=C_('[data-svelte="svelte-1phssyn"]',document.head);f=o(p,"META",{name:!0,content:!0}),p.forEach(r),x=i(t),A=o(t,"H1",{class:!0});var ma=s(A);E=o(ma,"A",{id:!0,class:!0,href:!0});var ln=s(E);j=o(ln,"SPAN",{});var dn=s(j);v(u.$$.fragment,dn),dn.forEach(r),ln.forEach(r),k=i(ma),N=o(ma,"SPAN",{});var pn=s(N);re=c(pn,"Accelerator"),pn.forEach(r),ma.forEach(r),ke=i(t),C=o(t,"P",{});var ua=s(C);ae=c(ua,"The "),S=o(ua,"A",{href:!0});var hn=s(S);ga=c(hn,"Accelerator"),hn.forEach(r),_a=c(ua,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),ua.forEach(r),Mt=i(t),oe=o(t,"H2",{class:!0});var fa=s(oe);xe=o(fa,"A",{id:!0,class:!0,href:!0});var mn=s(xe);no=o(mn,"SPAN",{});var un=s(no);v(Wt.$$.fragment,un),un.forEach(r),mn.forEach(r),kl=i(fa),co=o(fa,"SPAN",{});var rf=s(co);xl=c(rf,"Quick adaptation of your code"),rf.forEach(r),fa.forEach(r),jn=i(t),va=o(t,"P",{});var af=s(va);Pl=c(af,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),af.forEach(r),Dn=i(t),W=o(t,"OL",{});var Ra=s(W);se=o(Ra,"LI",{});var Ma=s(se);jl=c(Ma,"Initialize an "),$a=o(Ma,"A",{href:!0});var of=s($a);Dl=c(of,"Accelerator"),of.forEach(r),Tl=c(Ma," object (that we will call "),lo=o(Ma,"CODE",{});var sf=s(lo);zl=c(sf,"accelerator"),sf.forEach(r),Sl=c(Ma," throughout this page) as early as possible in your script."),Ma.forEach(r),Il=i(Ra),Ht=o(Ra,"LI",{});var uc=s(Ht);Ol=c(uc,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),ba=o(uc,"A",{href:!0});var nf=s(ba);Ll=c(nf,"prepare()"),nf.forEach(r),Nl=c(uc," method."),uc.forEach(r),Cl=i(Ra),G=o(Ra,"LI",{});var Ct=s(G);ql=c(Ct,"Remove all the "),io=o(Ct,"CODE",{});var cf=s(io);Ul=c(cf,".cuda()"),cf.forEach(r),Vl=c(Ct," or "),po=o(Ct,"CODE",{});var lf=s(po);Gl=c(lf,".to(device)"),lf.forEach(r),Rl=c(Ct," from your code and let the "),ho=o(Ct,"CODE",{});var df=s(ho);Ml=c(df,"accelerator"),df.forEach(r),Wl=c(Ct," handle the device placement for you."),Ct.forEach(r),Ra.forEach(r),Tn=i(t),v(Pe.$$.fragment,t),zn=i(t),ne=o(t,"OL",{start:!0});var fc=s(ne);je=o(fc,"LI",{});var fn=s(je);Hl=c(fn,"Replace "),mo=o(fn,"CODE",{});var pf=s(mo);Fl=c(pf,"loss.backward()"),pf.forEach(r),Yl=c(fn," in your code with "),uo=o(fn,"CODE",{});var hf=s(uo);Bl=c(hf,"accelerator.backward(loss)"),hf.forEach(r),fn.forEach(r),Kl=i(fc),ya=o(fc,"LI",{});var Ju=s(ya);Ql=c(Ju,"Gather your predictions and labels before storing them or using them for metric computation using "),wa=o(Ju,"A",{href:!0});var mf=s(wa);Xl=c(mf,"gather()"),mf.forEach(r),Ju.forEach(r),fc.forEach(r),Sn=i(t),v(De.$$.fragment,t),In=i(t),Te=o(t,"P",{});var gc=s(Te);Jl=c(gc,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),fo=o(gc,"CODE",{});var uf=s(fo);Zl=c(uf,"accelerator"),uf.forEach(r),ei=c(gc,":"),gc.forEach(r),On=i(t),ce=o(t,"H2",{class:!0});var _c=s(ce);ze=o(_c,"A",{id:!0,class:!0,href:!0});var ff=s(ze);go=o(ff,"SPAN",{});var gf=s(go);v(Ft.$$.fragment,gf),gf.forEach(r),ff.forEach(r),ti=i(_c),_o=o(_c,"SPAN",{});var _f=s(_o);ri=c(_f,"Advanced recommendations"),_f.forEach(r),_c.forEach(r),Ln=i(t),le=o(t,"H3",{class:!0});var vc=s(le);Se=o(vc,"A",{id:!0,class:!0,href:!0});var vf=s(Se);vo=o(vf,"SPAN",{});var $f=s(vo);v(Yt.$$.fragment,$f),$f.forEach(r),vf.forEach(r),ai=i(vc),$o=o(vc,"SPAN",{});var bf=s($o);oi=c(bf,"Printing"),bf.forEach(r),vc.forEach(r),Nn=i(t),ie=o(t,"P",{});var gn=s(ie);bo=o(gn,"CODE",{});var yf=s(bo);si=c(yf,"print"),yf.forEach(r),ni=c(gn," statements should be replaced by "),Ea=o(gn,"A",{href:!0});var wf=s(Ea);ci=c(wf,"print()"),wf.forEach(r),li=c(gn," to be printed once per process"),gn.forEach(r),Cn=i(t),v(Bt.$$.fragment,t),qn=i(t),de=o(t,"H3",{class:!0});var $c=s(de);Ie=o($c,"A",{id:!0,class:!0,href:!0});var Ef=s(Ie);yo=o(Ef,"SPAN",{});var Af=s(yo);v(Kt.$$.fragment,Af),Af.forEach(r),Ef.forEach(r),ii=i($c),wo=o($c,"SPAN",{});var kf=s(wo);di=c(kf,"Executing processes"),kf.forEach(r),$c.forEach(r),Un=i(t),pe=o(t,"H4",{class:!0});var bc=s(pe);Oe=o(bc,"A",{id:!0,class:!0,href:!0});var xf=s(Oe);Eo=o(xf,"SPAN",{});var Pf=s(Eo);v(Qt.$$.fragment,Pf),Pf.forEach(r),xf.forEach(r),pi=i(bc),Ao=o(bc,"SPAN",{});var jf=s(Ao);hi=c(jf,"Once on a single server"),jf.forEach(r),bc.forEach(r),Vn=i(t),Le=o(t,"P",{});var yc=s(Le);mi=c(yc,"For statements that should be executed once per server, use "),ko=o(yc,"CODE",{});var Df=s(ko);ui=c(Df,"is_local_main_process"),Df.forEach(r),fi=c(yc,":"),yc.forEach(r),Gn=i(t),v(Xt.$$.fragment,t),Rn=i(t),Ne=o(t,"P",{});var wc=s(Ne);gi=c(wc,"A function can be wrapped using the "),Aa=o(wc,"A",{href:!0});var Tf=s(Aa);_i=c(Tf,"on_local_main_process()"),Tf.forEach(r),vi=c(wc,` function to achieve the same
behavior on a function\u2019s execution:`),wc.forEach(r),Mn=i(t),v(Jt.$$.fragment,t),Wn=i(t),he=o(t,"H4",{class:!0});var Ec=s(he);Ce=o(Ec,"A",{id:!0,class:!0,href:!0});var zf=s(Ce);xo=o(zf,"SPAN",{});var Sf=s(xo);v(Zt.$$.fragment,Sf),Sf.forEach(r),zf.forEach(r),$i=i(Ec),Po=o(Ec,"SPAN",{});var If=s(Po);bi=c(If,"Only ever once across all servers"),If.forEach(r),Ec.forEach(r),Hn=i(t),qe=o(t,"P",{});var Ac=s(qe);yi=c(Ac,"For statements that should only ever be executed once, use "),jo=o(Ac,"CODE",{});var Of=s(jo);wi=c(Of,"is_main_process"),Of.forEach(r),Ei=c(Ac,":"),Ac.forEach(r),Fn=i(t),v(er.$$.fragment,t),Yn=i(t),Ue=o(t,"P",{});var kc=s(Ue);Ai=c(kc,"A function can be wrapped using the "),ka=o(kc,"A",{href:!0});var Lf=s(ka);ki=c(Lf,"on_main_process()"),Lf.forEach(r),xi=c(kc,` function to achieve the same
behavior on a function\u2019s execution:`),kc.forEach(r),Bn=i(t),v(tr.$$.fragment,t),Kn=i(t),me=o(t,"H4",{class:!0});var xc=s(me);Ve=o(xc,"A",{id:!0,class:!0,href:!0});var Nf=s(Ve);Do=o(Nf,"SPAN",{});var Cf=s(Do);v(rr.$$.fragment,Cf),Cf.forEach(r),Nf.forEach(r),Pi=i(xc),To=o(xc,"SPAN",{});var qf=s(To);ji=c(qf,"On specific processes"),qf.forEach(r),xc.forEach(r),Qn=i(t),xa=o(t,"P",{});var Uf=s(xa);Di=c(Uf,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Uf.forEach(r),Xn=i(t),v(ar.$$.fragment,t),Jn=i(t),v(or.$$.fragment,t),Zn=i(t),ue=o(t,"H3",{class:!0});var Pc=s(ue);Ge=o(Pc,"A",{id:!0,class:!0,href:!0});var Vf=s(Ge);zo=o(Vf,"SPAN",{});var Gf=s(zo);v(sr.$$.fragment,Gf),Gf.forEach(r),Vf.forEach(r),Ti=i(Pc),So=o(Pc,"SPAN",{});var Rf=s(So);zi=c(Rf,"Synchronicity control"),Rf.forEach(r),Pc.forEach(r),ec=i(t),Re=o(t,"P",{});var jc=s(Re);Si=c(jc,"Use "),Pa=o(jc,"A",{href:!0});var Mf=s(Pa);Ii=c(Mf,"wait_for_everyone()"),Mf.forEach(r),Oi=c(jc," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),jc.forEach(r),tc=i(t),fe=o(t,"H3",{class:!0});var Dc=s(fe);Me=o(Dc,"A",{id:!0,class:!0,href:!0});var Wf=s(Me);Io=o(Wf,"SPAN",{});var Hf=s(Io);v(nr.$$.fragment,Hf),Hf.forEach(r),Wf.forEach(r),Li=i(Dc),Oo=o(Dc,"SPAN",{});var Ff=s(Oo);Ni=c(Ff,"Saving and loading"),Ff.forEach(r),Dc.forEach(r),rc=i(t),We=o(t,"P",{});var Tc=s(We);Ci=c(Tc,"Use "),ja=o(Tc,"A",{href:!0});var Yf=s(ja);qi=c(Yf,"unwrap_model()"),Yf.forEach(r),Ui=c(Tc," before saving to remove all special model wrappers added during the distributed process."),Tc.forEach(r),ac=i(t),v(cr.$$.fragment,t),oc=i(t),H=o(t,"P",{});var Wa=s(H);Vi=c(Wa,"Use "),Da=o(Wa,"A",{href:!0});var Bf=s(Da);Gi=c(Bf,"save()"),Bf.forEach(r),Ri=c(Wa," instead of "),Lo=o(Wa,"CODE",{});var Kf=s(Lo);Mi=c(Kf,"torch.save"),Kf.forEach(r),Wi=c(Wa,":"),Wa.forEach(r),sc=i(t),v(lr.$$.fragment,t),nc=i(t),ge=o(t,"H3",{class:!0});var zc=s(ge);He=o(zc,"A",{id:!0,class:!0,href:!0});var Qf=s(He);No=o(Qf,"SPAN",{});var Xf=s(No);v(ir.$$.fragment,Xf),Xf.forEach(r),Qf.forEach(r),Hi=i(zc),Co=o(zc,"SPAN",{});var Jf=s(Co);Fi=c(Jf,"Operations"),Jf.forEach(r),zc.forEach(r),cc=i(t),O=o(t,"P",{});var Ae=s(O);Yi=c(Ae,"Use "),Fe=o(Ae,"A",{href:!0});var Sc=s(Fe);Bi=c(Sc,"clip"),qo=o(Sc,"EM",{});var Zf=s(qo);Ki=c(Zf,"grad_norm"),Zf.forEach(r),Qi=c(Sc,"()"),Sc.forEach(r),Xi=c(Ae," instead of "),Uo=o(Ae,"CODE",{});var eg=s(Uo);Ji=c(eg,"torch.nn.utils.clip_grad_norm_"),eg.forEach(r),Zi=c(Ae," and "),Ye=o(Ae,"A",{href:!0});var Ic=s(Ye);ed=c(Ic,"clip"),Vo=o(Ic,"EM",{});var tg=s(Vo);td=c(tg,"grad_value"),tg.forEach(r),rd=c(Ic,"()"),Ic.forEach(r),ad=c(Ae," instead of "),Go=o(Ae,"CODE",{});var rg=s(Go);od=c(rg,"torch.nn.utils.clip_grad_value"),rg.forEach(r),Ae.forEach(r),lc=i(t),_e=o(t,"H3",{class:!0});var Oc=s(_e);Be=o(Oc,"A",{id:!0,class:!0,href:!0});var ag=s(Be);Ro=o(ag,"SPAN",{});var og=s(Ro);v(dr.$$.fragment,og),og.forEach(r),ag.forEach(r),sd=i(Oc),Mo=o(Oc,"SPAN",{});var sg=s(Mo);nd=c(sg,"Gradient Accumulation"),sg.forEach(r),Oc.forEach(r),ic=i(t),Ke=o(t,"P",{});var Lc=s(Ke);cd=c(Lc,"To perform gradient accumulation use "),Ta=o(Lc,"A",{href:!0});var ng=s(Ta);ld=c(ng,"accumulate()"),ng.forEach(r),id=c(Lc,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),Lc.forEach(r),dc=i(t),v(pr.$$.fragment,t),pc=i(t),ve=o(t,"H2",{class:!0});var Nc=s(ve);Qe=o(Nc,"A",{id:!0,class:!0,href:!0});var cg=s(Qe);Wo=o(cg,"SPAN",{});var lg=s(Wo);v(hr.$$.fragment,lg),lg.forEach(r),cg.forEach(r),dd=i(Nc),Ho=o(Nc,"SPAN",{});var ig=s(Ho);pd=c(ig,"Overall API documentation:"),ig.forEach(r),Nc.forEach(r),hc=i(t),h=o(t,"DIV",{class:!0});var g=s(h);v(mr.$$.fragment,g),hd=i(g),Fo=o(g,"P",{});var dg=s(Fo);md=c(dg,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),dg.forEach(r),ud=i(g),Yo=o(g,"P",{});var pg=s(Yo);Bo=o(pg,"STRONG",{});var hg=s(Bo);fd=c(hg,"Available attributes:"),hg.forEach(r),pg.forEach(r),gd=i(g),D=o(g,"UL",{});var z=s(D);Xe=o(z,"LI",{});var _n=s(Xe);Ko=o(_n,"STRONG",{});var mg=s(Ko);_d=c(mg,"device"),mg.forEach(r),vd=c(_n," ("),Qo=o(_n,"CODE",{});var ug=s(Qo);$d=c(ug,"torch.device"),ug.forEach(r),bd=c(_n,") \u2014 The device to use."),_n.forEach(r),yd=i(z),Je=o(z,"LI",{});var vn=s(Je);Xo=o(vn,"STRONG",{});var fg=s(Xo);wd=c(fg,"distributed_type"),fg.forEach(r),Ed=c(vn," ("),za=o(vn,"A",{href:!0});var gg=s(za);Ad=c(gg,"DistributedType"),gg.forEach(r),kd=c(vn,") \u2014 The distributed training configuration."),vn.forEach(r),xd=i(z),Ze=o(z,"LI",{});var $n=s(Ze);Jo=o($n,"STRONG",{});var _g=s(Jo);Pd=c(_g,"local_process_index"),_g.forEach(r),jd=c($n," ("),Zo=o($n,"CODE",{});var vg=s(Zo);Dd=c(vg,"int"),vg.forEach(r),Td=c($n,") \u2014 The process index on the current machine."),$n.forEach(r),zd=i(z),et=o(z,"LI",{});var bn=s(et);es=o(bn,"STRONG",{});var $g=s(es);Sd=c($g,"mixed_precision"),$g.forEach(r),Id=c(bn," ("),ts=o(bn,"CODE",{});var bg=s(ts);Od=c(bg,"str"),bg.forEach(r),Ld=c(bn,") \u2014 The configured mixed precision mode."),bn.forEach(r),Nd=i(z),tt=o(z,"LI",{});var yn=s(tt);rs=o(yn,"STRONG",{});var yg=s(rs);Cd=c(yg,"num_processes"),yg.forEach(r),qd=c(yn," ("),as=o(yn,"CODE",{});var wg=s(as);Ud=c(wg,"int"),wg.forEach(r),Vd=c(yn,") \u2014 The total number of processes used for training."),yn.forEach(r),Gd=i(z),rt=o(z,"LI",{});var wn=s(rt);os=o(wn,"STRONG",{});var Eg=s(os);Rd=c(Eg,"optimizer_step_was_skipped"),Eg.forEach(r),Md=c(wn," ("),ss=o(wn,"CODE",{});var Ag=s(ss);Wd=c(Ag,"bool"),Ag.forEach(r),Hd=c(wn,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),wn.forEach(r),Fd=i(z),at=o(z,"LI",{});var En=s(at);ns=o(En,"STRONG",{});var kg=s(ns);Yd=c(kg,"process_index"),kg.forEach(r),Bd=c(En," ("),cs=o(En,"CODE",{});var xg=s(cs);Kd=c(xg,"int"),xg.forEach(r),Qd=c(En,") \u2014 The overall index of the current process among all processes."),En.forEach(r),Xd=i(z),ot=o(z,"LI",{});var An=s(ot);ls=o(An,"STRONG",{});var Pg=s(ls);Jd=c(Pg,"state"),Pg.forEach(r),Zd=c(An," ("),Sa=o(An,"A",{href:!0});var jg=s(Sa);ep=c(jg,"AcceleratorState"),jg.forEach(r),tp=c(An,") \u2014 The distributed setup state."),An.forEach(r),rp=i(z),st=o(z,"LI",{});var kn=s(st);is=o(kn,"STRONG",{});var Dg=s(is);ap=c(Dg,"sync_gradients"),Dg.forEach(r),op=c(kn," ("),ds=o(kn,"CODE",{});var Tg=s(ds);sp=c(Tg,"bool"),Tg.forEach(r),np=c(kn,") \u2014 Whether the gradients are currently being synced across all processes."),kn.forEach(r),cp=i(z),nt=o(z,"LI",{});var xn=s(nt);ps=o(xn,"STRONG",{});var zg=s(ps);lp=c(zg,"use_distributed"),zg.forEach(r),ip=c(xn," ("),hs=o(xn,"CODE",{});var Sg=s(hs);dp=c(Sg,"bool"),Sg.forEach(r),pp=c(xn,") \u2014 Whether the current configuration is for distributed training."),xn.forEach(r),z.forEach(r),hp=i(g),F=o(g,"DIV",{class:!0});var Ha=s(F);v(ur.$$.fragment,Ha),mp=i(Ha),ms=o(Ha,"P",{});var Ig=s(ms);up=c(Ig,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Ig.forEach(r),fp=i(Ha),v(ct.$$.fragment,Ha),Ha.forEach(r),gp=i(g),lt=o(g,"DIV",{class:!0});var Cc=s(lt);v(fr.$$.fragment,Cc),_p=i(Cc),us=o(Cc,"P",{});var Og=s(us);vp=c(Og,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Og.forEach(r),Cc.forEach(r),$p=i(g),Y=o(g,"DIV",{class:!0});var Fa=s(Y);v(gr.$$.fragment,Fa),bp=i(Fa),$e=o(Fa,"P",{});var Ya=s($e);yp=c(Ya,"Scales the gradients in accordance to "),fs=o(Ya,"CODE",{});var Lg=s(fs);wp=c(Lg,"Accelerator.gradient_accumulation_steps"),Lg.forEach(r),Ep=c(Ya,` and calls the correct
`),gs=o(Ya,"CODE",{});var Ng=s(gs);Ap=c(Ng,"backward()"),Ng.forEach(r),kp=c(Ya," based on the configuration."),Ya.forEach(r),xp=i(Fa),_r=o(Fa,"P",{});var qc=s(_r);Pp=c(qc,"Should be used in lieu of "),_s=o(qc,"CODE",{});var Cg=s(_s);jp=c(Cg,"loss.backward()"),Cg.forEach(r),Dp=c(qc,"."),qc.forEach(r),Fa.forEach(r),Tp=i(g),it=o(g,"DIV",{class:!0});var Uc=s(it);v(vr.$$.fragment,Uc),zp=i(Uc),$r=o(Uc,"P",{});var Vc=s($r);Sp=c(Vc,"Alias for "),vs=o(Vc,"CODE",{});var qg=s(vs);Ip=c(qg,"Accelerate.free_memory"),qg.forEach(r),Op=c(Vc,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),Vc.forEach(r),Uc.forEach(r),Lp=i(g),B=o(g,"DIV",{class:!0});var Ba=s(B);v(br.$$.fragment,Ba),Np=i(Ba),yr=o(Ba,"P",{});var Gc=s(yr);Cp=c(Gc,"Should be used in place of "),$s=o(Gc,"CODE",{});var Ug=s($s);qp=c(Ug,"torch.nn.utils.clip_grad_norm_"),Ug.forEach(r),Up=c(Gc,"."),Gc.forEach(r),Vp=i(Ba),v(dt.$$.fragment,Ba),Ba.forEach(r),Gp=i(g),K=o(g,"DIV",{class:!0});var Ka=s(K);v(wr.$$.fragment,Ka),Rp=i(Ka),Er=o(Ka,"P",{});var Rc=s(Er);Mp=c(Rc,"Should be used in place of "),bs=o(Rc,"CODE",{});var Vg=s(bs);Wp=c(Vg,"torch.nn.utils.clip_grad_value_"),Vg.forEach(r),Hp=c(Rc,"."),Rc.forEach(r),Fp=i(Ka),v(pt.$$.fragment,Ka),Ka.forEach(r),Yp=i(g),ht=o(g,"DIV",{class:!0});var Mc=s(ht);v(Ar.$$.fragment,Mc),Bp=i(Mc),ys=o(Mc,"P",{});var Gg=s(ys);Kp=c(Gg,`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),Gg.forEach(r),Mc.forEach(r),Qp=i(g),mt=o(g,"DIV",{class:!0});var Wc=s(mt);v(kr.$$.fragment,Wc),Xp=i(Wc),ws=o(Wc,"P",{});var Rg=s(ws);Jp=c(Rg,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Rg.forEach(r),Wc.forEach(r),Zp=i(g),Q=o(g,"DIV",{class:!0});var Qa=s(Q);v(xr.$$.fragment,Qa),eh=i(Qa),Pr=o(Qa,"P",{});var Hc=s(Pr);th=c(Hc,"Gather the values in "),Es=o(Hc,"EM",{});var Mg=s(Es);rh=c(Mg,"tensor"),Mg.forEach(r),ah=c(Hc,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Hc.forEach(r),oh=i(Qa),As=o(Qa,"P",{});var Wg=s(As);sh=c(Wg,`Note:
This gather happens in all processes.`),Wg.forEach(r),Qa.forEach(r),nh=i(g),ut=o(g,"DIV",{class:!0});var Fc=s(ut);v(jr.$$.fragment,Fc),ch=i(Fc),Dr=o(Fc,"P",{});var Yc=s(Dr);lh=c(Yc,"Gathers "),ks=o(Yc,"CODE",{});var Hg=s(ks);ih=c(Hg,"tensor"),Hg.forEach(r),dh=c(Yc,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Yc.forEach(r),Fc.forEach(r),ph=i(g),ft=o(g,"DIV",{class:!0});var Bc=s(ft);v(Tr.$$.fragment,Bc),hh=i(Bc),zr=o(Bc,"P",{});var Kc=s(zr);mh=c(Kc,"Returns the state dictionary of a model sent through "),Ia=o(Kc,"A",{href:!0});var Fg=s(Ia);uh=c(Fg,"Accelerator.prepare()"),Fg.forEach(r),fh=c(Kc," in full precision"),Kc.forEach(r),Bc.forEach(r),gh=i(g),gt=o(g,"DIV",{class:!0});var Qc=s(gt);v(Sr.$$.fragment,Qc),_h=i(Qc),R=o(Qc,"P",{});var qt=s(R);vh=c(qt,"Returns a "),xs=o(qt,"CODE",{});var Yg=s(xs);$h=c(Yg,"tracker"),Yg.forEach(r),bh=c(qt," from "),Ps=o(qt,"CODE",{});var Bg=s(Ps);yh=c(Bg,"self.trackers"),Bg.forEach(r),wh=c(qt," based on "),js=o(qt,"CODE",{});var Kg=s(js);Eh=c(Kg,"name"),Kg.forEach(r),Ah=c(qt," on the main process only."),qt.forEach(r),Qc.forEach(r),kh=i(g),_t=o(g,"DIV",{class:!0});var Xc=s(_t);v(Ir.$$.fragment,Xc),xh=i(Xc),Or=o(Xc,"P",{});var Jc=s(Or);Ph=c(Jc,"Initializes a run for all trackers stored in "),Ds=o(Jc,"CODE",{});var Qg=s(Ds);jh=c(Qg,"self.log_with"),Qg.forEach(r),Dh=c(Jc,", potentially with starting configurations"),Jc.forEach(r),Xc.forEach(r),Th=i(g),X=o(g,"DIV",{class:!0});var Xa=s(X);v(Lr.$$.fragment,Xa),zh=i(Xa),Ts=o(Xa,"P",{});var Xg=s(Ts);Sh=c(Xg,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Xg.forEach(r),Ih=i(Xa),v(vt.$$.fragment,Xa),Xa.forEach(r),Oh=i(g),J=o(g,"DIV",{class:!0});var Ja=s(J);v(Nr.$$.fragment,Ja),Lh=i(Ja),zs=o(Ja,"P",{});var Jg=s(zs);Nh=c(Jg,"Lets the local main process go inside a with block."),Jg.forEach(r),Ch=i(Ja),Ss=o(Ja,"P",{});var Zg=s(Ss);qh=c(Zg,"The other processes will enter the with block after the main process exits."),Zg.forEach(r),Ja.forEach(r),Uh=i(g),$t=o(g,"DIV",{class:!0});var Zc=s($t);v(Cr.$$.fragment,Zc),Vh=i(Zc),be=o(Zc,"P",{});var Za=s(be);Gh=c(Za,"Logs "),Is=o(Za,"CODE",{});var e_=s(Is);Rh=c(e_,"values"),e_.forEach(r),Mh=c(Za," to all stored trackers in "),Os=o(Za,"CODE",{});var t_=s(Os);Wh=c(t_,"self.trackers"),t_.forEach(r),Hh=c(Za," on the main process only."),Za.forEach(r),Zc.forEach(r),Fh=i(g),Z=o(g,"DIV",{class:!0});var eo=s(Z);v(qr.$$.fragment,eo),Yh=i(eo),Ls=o(eo,"P",{});var r_=s(Ls);Bh=c(r_,"Lets the main process go first inside a with block."),r_.forEach(r),Kh=i(eo),Ns=o(eo,"P",{});var a_=s(Ns);Qh=c(a_,"The other processes will enter the with block after the main process exits."),a_.forEach(r),eo.forEach(r),Xh=i(g),q=o(g,"DIV",{class:!0});var Ut=s(q);v(Ur.$$.fragment,Ut),Jh=i(Ut),Vr=o(Ut,"P",{});var el=s(Vr);Zh=c(el,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Cs=o(el,"CODE",{});var o_=s(Cs);em=c(o_,"torch.nn.parallel.DistributedDataParallel.no_sync"),o_.forEach(r),tm=c(el,"."),el.forEach(r),rm=i(Ut),Gr=o(Ut,"P",{});var tl=s(Gr);am=c(tl,"If "),qs=o(tl,"CODE",{});var s_=s(qs);om=c(s_,"model"),s_.forEach(r),sm=c(tl," is not in DDP, this context manager does nothing"),tl.forEach(r),nm=i(Ut),v(bt.$$.fragment,Ut),Ut.forEach(r),cm=i(g),yt=o(g,"DIV",{class:!0});var rl=s(yt);v(Rr.$$.fragment,rl),lm=i(rl),Us=o(rl,"P",{});var n_=s(Us);im=c(n_,"A decorator that will run the decorated function on the local main process only."),n_.forEach(r),rl.forEach(r),dm=i(g),wt=o(g,"DIV",{class:!0});var al=s(wt);v(Mr.$$.fragment,al),pm=i(al),Vs=o(al,"P",{});var c_=s(Vs);hm=c(c_,"A decorator that will run the decorated function on a given local process index only."),c_.forEach(r),al.forEach(r),mm=i(g),Et=o(g,"DIV",{class:!0});var ol=s(Et);v(Wr.$$.fragment,ol),um=i(ol),Gs=o(ol,"P",{});var l_=s(Gs);fm=c(l_,"A decorator that will run the decorated function on the main process only."),l_.forEach(r),ol.forEach(r),gm=i(g),At=o(g,"DIV",{class:!0});var sl=s(At);v(Hr.$$.fragment,sl),_m=i(sl),Rs=o(sl,"P",{});var i_=s(Rs);vm=c(i_,"A decorator that will run the decorated function on a given process index only."),i_.forEach(r),sl.forEach(r),$m=i(g),kt=o(g,"DIV",{class:!0});var nl=s(kt);v(Fr.$$.fragment,nl),bm=i(nl),Ms=o(nl,"P",{});var d_=s(Ms);ym=c(d_,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),d_.forEach(r),nl.forEach(r),wm=i(g),U=o(g,"DIV",{class:!0});var Vt=s(U);v(Yr.$$.fragment,Vt),Em=i(Vt),Br=o(Vt,"P",{});var cl=s(Br);Am=c(cl,"Prepare all objects passed in "),Ws=o(cl,"CODE",{});var p_=s(Ws);km=c(p_,"args"),p_.forEach(r),xm=c(cl,` for distributed training and mixed precision, then return them in the same
order.`),cl.forEach(r),Pm=i(Vt),Hs=o(Vt,"P",{});var h_=s(Hs);jm=c(h_,"Accepts the following type of objects:"),h_.forEach(r),Dm=i(Vt),ye=o(Vt,"UL",{});var to=s(ye);Oa=o(to,"LI",{});var Zu=s(Oa);Fs=o(Zu,"CODE",{});var m_=s(Fs);Tm=c(m_,"torch.utils.data.DataLoader"),m_.forEach(r),zm=c(Zu,": PyTorch Dataloader"),Zu.forEach(r),Sm=i(to),La=o(to,"LI",{});var ef=s(La);Ys=o(ef,"CODE",{});var u_=s(Ys);Im=c(u_,"torch.nn.Module"),u_.forEach(r),Om=c(ef,": PyTorch Module"),ef.forEach(r),Lm=i(to),Na=o(to,"LI",{});var tf=s(Na);Bs=o(tf,"CODE",{});var f_=s(Bs);Nm=c(f_,"torch.optim.Optimizer"),f_.forEach(r),Cm=c(tf,": PyTorch Optimizer"),tf.forEach(r),to.forEach(r),Vt.forEach(r),qm=i(g),xt=o(g,"DIV",{class:!0});var ll=s(xt);v(Kr.$$.fragment,ll),Um=i(ll),Qr=o(ll,"P",{});var il=s(Qr);Vm=c(il,`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Ca=o(il,"A",{href:!0});var g_=s(Ca);Gm=c(g_,"Accelerator.prepare()"),g_.forEach(r),Rm=c(il," instead."),il.forEach(r),ll.forEach(r),Mm=i(g),Pt=o(g,"DIV",{class:!0});var dl=s(Pt);v(Xr.$$.fragment,dl),Wm=i(dl),Jr=o(dl,"P",{});var pl=s(Jr);Hm=c(pl,`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),qa=o(pl,"A",{href:!0});var __=s(qa);Fm=c(__,"Accelerator.prepare()"),__.forEach(r),Ym=c(pl," instead."),pl.forEach(r),dl.forEach(r),Bm=i(g),jt=o(g,"DIV",{class:!0});var hl=s(jt);v(Zr.$$.fragment,hl),Km=i(hl),ea=o(hl,"P",{});var ml=s(ea);Qm=c(ml,`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Ua=o(ml,"A",{href:!0});var v_=s(Ua);Xm=c(v_,"Accelerator.prepare()"),v_.forEach(r),Jm=c(ml," instead."),ml.forEach(r),hl.forEach(r),Zm=i(g),Dt=o(g,"DIV",{class:!0});var ul=s(Dt);v(ta.$$.fragment,ul),eu=i(ul),ra=o(ul,"P",{});var fl=s(ra);tu=c(fl,`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),Va=o(fl,"A",{href:!0});var $_=s(Va);ru=c($_,"Accelerator.prepare()"),$_.forEach(r),au=c(fl," instead."),fl.forEach(r),ul.forEach(r),ou=i(g),Tt=o(g,"DIV",{class:!0});var gl=s(Tt);v(aa.$$.fragment,gl),su=i(gl),oa=o(gl,"P",{});var _l=s(oa);nu=c(_l,"Use in replacement of "),Ks=o(_l,"CODE",{});var b_=s(Ks);cu=c(b_,"print()"),b_.forEach(r),lu=c(_l," to only print once per server."),_l.forEach(r),gl.forEach(r),iu=i(g),ee=o(g,"DIV",{class:!0});var ro=s(ee);v(sa.$$.fragment,ro),du=i(ro),we=o(ro,"P",{});var ao=s(we);pu=c(ao,"Reduce the values in "),Qs=o(ao,"EM",{});var y_=s(Qs);hu=c(y_,"tensor"),y_.forEach(r),mu=c(ao," across all processes based on "),Xs=o(ao,"EM",{});var w_=s(Xs);uu=c(w_,"reduction"),w_.forEach(r),fu=c(ao,"."),ao.forEach(r),gu=i(ro),Js=o(ro,"P",{});var E_=s(Js);_u=c(E_,`Note:
All processes get the reduced value.`),E_.forEach(r),ro.forEach(r),vu=i(g),V=o(g,"DIV",{class:!0});var Gt=s(V);v(na.$$.fragment,Gt),$u=i(Gt),M=o(Gt,"P",{});var Rt=s(M);bu=c(Rt,"Makes note of "),Zs=o(Rt,"CODE",{});var A_=s(Zs);yu=c(A_,"objects"),A_.forEach(r),wu=c(Rt," and will save or load them in during "),en=o(Rt,"CODE",{});var k_=s(en);Eu=c(k_,"save_state"),k_.forEach(r),Au=c(Rt," or "),tn=o(Rt,"CODE",{});var x_=s(tn);ku=c(x_,"load_state"),x_.forEach(r),xu=c(Rt,"."),Rt.forEach(r),Pu=i(Gt),rn=o(Gt,"P",{});var P_=s(rn);ju=c(P_,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),P_.forEach(r),Du=i(Gt),v(zt.$$.fragment,Gt),Gt.forEach(r),Tu=i(g),St=o(g,"DIV",{class:!0});var vl=s(St);v(ca.$$.fragment,vl),zu=i(vl),la=o(vl,"P",{});var $l=s(la);Su=c($l,"Save the object passed to disk once per machine. Use in place of "),an=o($l,"CODE",{});var j_=s(an);Iu=c(j_,"torch.save"),j_.forEach(r),Ou=c($l,"."),$l.forEach(r),vl.forEach(r),Lu=i(g),te=o(g,"DIV",{class:!0});var oo=s(te);v(ia.$$.fragment,oo),Nu=i(oo),on=o(oo,"P",{});var D_=s(on);Cu=c(D_,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),D_.forEach(r),qu=i(oo),v(It.$$.fragment,oo),oo.forEach(r),Uu=i(g),Ot=o(g,"DIV",{class:!0});var bl=s(Ot);v(da.$$.fragment,bl),Vu=i(bl),sn=o(bl,"P",{});var T_=s(sn);Gu=c(T_,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),T_.forEach(r),bl.forEach(r),Ru=i(g),Lt=o(g,"DIV",{class:!0});var yl=s(Lt);v(pa.$$.fragment,yl),Mu=i(yl),Ee=o(yl,"P",{});var so=s(Ee);Wu=c(so,"Unwraps the "),nn=o(so,"CODE",{});var z_=s(nn);Hu=c(z_,"model"),z_.forEach(r),Fu=c(so," from the additional layer possible added by "),Ga=o(so,"A",{href:!0});var S_=s(Ga);Yu=c(S_,"prepare()"),S_.forEach(r),Bu=c(so,`. Useful before saving
the model.`),so.forEach(r),yl.forEach(r),Ku=i(g),Nt=o(g,"DIV",{class:!0});var wl=s(Nt);v(ha.$$.fragment,wl),Qu=i(wl),cn=o(wl,"P",{});var I_=s(cn);Xu=c(I_,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),I_.forEach(r),wl.forEach(r),g.forEach(r),this.h()},h(){d(f,"name","hf:doc:metadata"),d(f,"content",JSON.stringify(K_)),d(E,"id","accelerator"),d(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E,"href","#accelerator"),d(A,"class","relative group"),d(S,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(xe,"id","quick-adaptation-of-your-code"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#quick-adaptation-of-your-code"),d(oe,"class","relative group"),d($a,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),d(ba,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(wa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.gather"),d(ne,"start","4"),d(ze,"id","advanced-recommendations"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#advanced-recommendations"),d(ce,"class","relative group"),d(Se,"id","printing"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#printing"),d(le,"class","relative group"),d(Ea,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.print"),d(Ie,"id","executing-processes"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#executing-processes"),d(de,"class","relative group"),d(Oe,"id","once-on-a-single-server"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#once-on-a-single-server"),d(pe,"class","relative group"),d(Aa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),d(Ce,"id","only-ever-once-across-all-servers"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#only-ever-once-across-all-servers"),d(he,"class","relative group"),d(ka,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),d(Ve,"id","on-specific-processes"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#on-specific-processes"),d(me,"class","relative group"),d(Ge,"id","synchronicity-control"),d(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ge,"href","#synchronicity-control"),d(ue,"class","relative group"),d(Pa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),d(Me,"id","saving-and-loading"),d(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Me,"href","#saving-and-loading"),d(fe,"class","relative group"),d(ja,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),d(Da,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save"),d(He,"id","operations"),d(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(He,"href","#operations"),d(ge,"class","relative group"),d(Fe,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),d(Ye,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),d(Be,"id","gradient-accumulation"),d(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Be,"href","#gradient-accumulation"),d(_e,"class","relative group"),d(Ta,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),d(Qe,"id","accelerate.Accelerator"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#accelerate.Accelerator"),d(ve,"class","relative group"),d(za,"href","/docs/accelerate/main/en/package_reference/utilities#accelerate.DistributedType"),d(Sa,"href","/docs/accelerate/main/en/package_reference/state#accelerate.state.AcceleratorState"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ia,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Va,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,f),m(t,x,p),m(t,A,p),e(A,E),e(E,j),$(u,j,null),e(A,k),e(A,N),e(N,re),m(t,ke,p),m(t,C,p),e(C,ae),e(C,S),e(S,ga),e(C,_a),m(t,Mt,p),m(t,oe,p),e(oe,xe),e(xe,no),$(Wt,no,null),e(oe,kl),e(oe,co),e(co,xl),m(t,jn,p),m(t,va,p),e(va,Pl),m(t,Dn,p),m(t,W,p),e(W,se),e(se,jl),e(se,$a),e($a,Dl),e(se,Tl),e(se,lo),e(lo,zl),e(se,Sl),e(W,Il),e(W,Ht),e(Ht,Ol),e(Ht,ba),e(ba,Ll),e(Ht,Nl),e(W,Cl),e(W,G),e(G,ql),e(G,io),e(io,Ul),e(G,Vl),e(G,po),e(po,Gl),e(G,Rl),e(G,ho),e(ho,Ml),e(G,Wl),m(t,Tn,p),$(Pe,t,p),m(t,zn,p),m(t,ne,p),e(ne,je),e(je,Hl),e(je,mo),e(mo,Fl),e(je,Yl),e(je,uo),e(uo,Bl),e(ne,Kl),e(ne,ya),e(ya,Ql),e(ya,wa),e(wa,Xl),m(t,Sn,p),$(De,t,p),m(t,In,p),m(t,Te,p),e(Te,Jl),e(Te,fo),e(fo,Zl),e(Te,ei),m(t,On,p),m(t,ce,p),e(ce,ze),e(ze,go),$(Ft,go,null),e(ce,ti),e(ce,_o),e(_o,ri),m(t,Ln,p),m(t,le,p),e(le,Se),e(Se,vo),$(Yt,vo,null),e(le,ai),e(le,$o),e($o,oi),m(t,Nn,p),m(t,ie,p),e(ie,bo),e(bo,si),e(ie,ni),e(ie,Ea),e(Ea,ci),e(ie,li),m(t,Cn,p),$(Bt,t,p),m(t,qn,p),m(t,de,p),e(de,Ie),e(Ie,yo),$(Kt,yo,null),e(de,ii),e(de,wo),e(wo,di),m(t,Un,p),m(t,pe,p),e(pe,Oe),e(Oe,Eo),$(Qt,Eo,null),e(pe,pi),e(pe,Ao),e(Ao,hi),m(t,Vn,p),m(t,Le,p),e(Le,mi),e(Le,ko),e(ko,ui),e(Le,fi),m(t,Gn,p),$(Xt,t,p),m(t,Rn,p),m(t,Ne,p),e(Ne,gi),e(Ne,Aa),e(Aa,_i),e(Ne,vi),m(t,Mn,p),$(Jt,t,p),m(t,Wn,p),m(t,he,p),e(he,Ce),e(Ce,xo),$(Zt,xo,null),e(he,$i),e(he,Po),e(Po,bi),m(t,Hn,p),m(t,qe,p),e(qe,yi),e(qe,jo),e(jo,wi),e(qe,Ei),m(t,Fn,p),$(er,t,p),m(t,Yn,p),m(t,Ue,p),e(Ue,Ai),e(Ue,ka),e(ka,ki),e(Ue,xi),m(t,Bn,p),$(tr,t,p),m(t,Kn,p),m(t,me,p),e(me,Ve),e(Ve,Do),$(rr,Do,null),e(me,Pi),e(me,To),e(To,ji),m(t,Qn,p),m(t,xa,p),e(xa,Di),m(t,Xn,p),$(ar,t,p),m(t,Jn,p),$(or,t,p),m(t,Zn,p),m(t,ue,p),e(ue,Ge),e(Ge,zo),$(sr,zo,null),e(ue,Ti),e(ue,So),e(So,zi),m(t,ec,p),m(t,Re,p),e(Re,Si),e(Re,Pa),e(Pa,Ii),e(Re,Oi),m(t,tc,p),m(t,fe,p),e(fe,Me),e(Me,Io),$(nr,Io,null),e(fe,Li),e(fe,Oo),e(Oo,Ni),m(t,rc,p),m(t,We,p),e(We,Ci),e(We,ja),e(ja,qi),e(We,Ui),m(t,ac,p),$(cr,t,p),m(t,oc,p),m(t,H,p),e(H,Vi),e(H,Da),e(Da,Gi),e(H,Ri),e(H,Lo),e(Lo,Mi),e(H,Wi),m(t,sc,p),$(lr,t,p),m(t,nc,p),m(t,ge,p),e(ge,He),e(He,No),$(ir,No,null),e(ge,Hi),e(ge,Co),e(Co,Fi),m(t,cc,p),m(t,O,p),e(O,Yi),e(O,Fe),e(Fe,Bi),e(Fe,qo),e(qo,Ki),e(Fe,Qi),e(O,Xi),e(O,Uo),e(Uo,Ji),e(O,Zi),e(O,Ye),e(Ye,ed),e(Ye,Vo),e(Vo,td),e(Ye,rd),e(O,ad),e(O,Go),e(Go,od),m(t,lc,p),m(t,_e,p),e(_e,Be),e(Be,Ro),$(dr,Ro,null),e(_e,sd),e(_e,Mo),e(Mo,nd),m(t,ic,p),m(t,Ke,p),e(Ke,cd),e(Ke,Ta),e(Ta,ld),e(Ke,id),m(t,dc,p),$(pr,t,p),m(t,pc,p),m(t,ve,p),e(ve,Qe),e(Qe,Wo),$(hr,Wo,null),e(ve,dd),e(ve,Ho),e(Ho,pd),m(t,hc,p),m(t,h,p),$(mr,h,null),e(h,hd),e(h,Fo),e(Fo,md),e(h,ud),e(h,Yo),e(Yo,Bo),e(Bo,fd),e(h,gd),e(h,D),e(D,Xe),e(Xe,Ko),e(Ko,_d),e(Xe,vd),e(Xe,Qo),e(Qo,$d),e(Xe,bd),e(D,yd),e(D,Je),e(Je,Xo),e(Xo,wd),e(Je,Ed),e(Je,za),e(za,Ad),e(Je,kd),e(D,xd),e(D,Ze),e(Ze,Jo),e(Jo,Pd),e(Ze,jd),e(Ze,Zo),e(Zo,Dd),e(Ze,Td),e(D,zd),e(D,et),e(et,es),e(es,Sd),e(et,Id),e(et,ts),e(ts,Od),e(et,Ld),e(D,Nd),e(D,tt),e(tt,rs),e(rs,Cd),e(tt,qd),e(tt,as),e(as,Ud),e(tt,Vd),e(D,Gd),e(D,rt),e(rt,os),e(os,Rd),e(rt,Md),e(rt,ss),e(ss,Wd),e(rt,Hd),e(D,Fd),e(D,at),e(at,ns),e(ns,Yd),e(at,Bd),e(at,cs),e(cs,Kd),e(at,Qd),e(D,Xd),e(D,ot),e(ot,ls),e(ls,Jd),e(ot,Zd),e(ot,Sa),e(Sa,ep),e(ot,tp),e(D,rp),e(D,st),e(st,is),e(is,ap),e(st,op),e(st,ds),e(ds,sp),e(st,np),e(D,cp),e(D,nt),e(nt,ps),e(ps,lp),e(nt,ip),e(nt,hs),e(hs,dp),e(nt,pp),e(h,hp),e(h,F),$(ur,F,null),e(F,mp),e(F,ms),e(ms,up),e(F,fp),$(ct,F,null),e(h,gp),e(h,lt),$(fr,lt,null),e(lt,_p),e(lt,us),e(us,vp),e(h,$p),e(h,Y),$(gr,Y,null),e(Y,bp),e(Y,$e),e($e,yp),e($e,fs),e(fs,wp),e($e,Ep),e($e,gs),e(gs,Ap),e($e,kp),e(Y,xp),e(Y,_r),e(_r,Pp),e(_r,_s),e(_s,jp),e(_r,Dp),e(h,Tp),e(h,it),$(vr,it,null),e(it,zp),e(it,$r),e($r,Sp),e($r,vs),e(vs,Ip),e($r,Op),e(h,Lp),e(h,B),$(br,B,null),e(B,Np),e(B,yr),e(yr,Cp),e(yr,$s),e($s,qp),e(yr,Up),e(B,Vp),$(dt,B,null),e(h,Gp),e(h,K),$(wr,K,null),e(K,Rp),e(K,Er),e(Er,Mp),e(Er,bs),e(bs,Wp),e(Er,Hp),e(K,Fp),$(pt,K,null),e(h,Yp),e(h,ht),$(Ar,ht,null),e(ht,Bp),e(ht,ys),e(ys,Kp),e(h,Qp),e(h,mt),$(kr,mt,null),e(mt,Xp),e(mt,ws),e(ws,Jp),e(h,Zp),e(h,Q),$(xr,Q,null),e(Q,eh),e(Q,Pr),e(Pr,th),e(Pr,Es),e(Es,rh),e(Pr,ah),e(Q,oh),e(Q,As),e(As,sh),e(h,nh),e(h,ut),$(jr,ut,null),e(ut,ch),e(ut,Dr),e(Dr,lh),e(Dr,ks),e(ks,ih),e(Dr,dh),e(h,ph),e(h,ft),$(Tr,ft,null),e(ft,hh),e(ft,zr),e(zr,mh),e(zr,Ia),e(Ia,uh),e(zr,fh),e(h,gh),e(h,gt),$(Sr,gt,null),e(gt,_h),e(gt,R),e(R,vh),e(R,xs),e(xs,$h),e(R,bh),e(R,Ps),e(Ps,yh),e(R,wh),e(R,js),e(js,Eh),e(R,Ah),e(h,kh),e(h,_t),$(Ir,_t,null),e(_t,xh),e(_t,Or),e(Or,Ph),e(Or,Ds),e(Ds,jh),e(Or,Dh),e(h,Th),e(h,X),$(Lr,X,null),e(X,zh),e(X,Ts),e(Ts,Sh),e(X,Ih),$(vt,X,null),e(h,Oh),e(h,J),$(Nr,J,null),e(J,Lh),e(J,zs),e(zs,Nh),e(J,Ch),e(J,Ss),e(Ss,qh),e(h,Uh),e(h,$t),$(Cr,$t,null),e($t,Vh),e($t,be),e(be,Gh),e(be,Is),e(Is,Rh),e(be,Mh),e(be,Os),e(Os,Wh),e(be,Hh),e(h,Fh),e(h,Z),$(qr,Z,null),e(Z,Yh),e(Z,Ls),e(Ls,Bh),e(Z,Kh),e(Z,Ns),e(Ns,Qh),e(h,Xh),e(h,q),$(Ur,q,null),e(q,Jh),e(q,Vr),e(Vr,Zh),e(Vr,Cs),e(Cs,em),e(Vr,tm),e(q,rm),e(q,Gr),e(Gr,am),e(Gr,qs),e(qs,om),e(Gr,sm),e(q,nm),$(bt,q,null),e(h,cm),e(h,yt),$(Rr,yt,null),e(yt,lm),e(yt,Us),e(Us,im),e(h,dm),e(h,wt),$(Mr,wt,null),e(wt,pm),e(wt,Vs),e(Vs,hm),e(h,mm),e(h,Et),$(Wr,Et,null),e(Et,um),e(Et,Gs),e(Gs,fm),e(h,gm),e(h,At),$(Hr,At,null),e(At,_m),e(At,Rs),e(Rs,vm),e(h,$m),e(h,kt),$(Fr,kt,null),e(kt,bm),e(kt,Ms),e(Ms,ym),e(h,wm),e(h,U),$(Yr,U,null),e(U,Em),e(U,Br),e(Br,Am),e(Br,Ws),e(Ws,km),e(Br,xm),e(U,Pm),e(U,Hs),e(Hs,jm),e(U,Dm),e(U,ye),e(ye,Oa),e(Oa,Fs),e(Fs,Tm),e(Oa,zm),e(ye,Sm),e(ye,La),e(La,Ys),e(Ys,Im),e(La,Om),e(ye,Lm),e(ye,Na),e(Na,Bs),e(Bs,Nm),e(Na,Cm),e(h,qm),e(h,xt),$(Kr,xt,null),e(xt,Um),e(xt,Qr),e(Qr,Vm),e(Qr,Ca),e(Ca,Gm),e(Qr,Rm),e(h,Mm),e(h,Pt),$(Xr,Pt,null),e(Pt,Wm),e(Pt,Jr),e(Jr,Hm),e(Jr,qa),e(qa,Fm),e(Jr,Ym),e(h,Bm),e(h,jt),$(Zr,jt,null),e(jt,Km),e(jt,ea),e(ea,Qm),e(ea,Ua),e(Ua,Xm),e(ea,Jm),e(h,Zm),e(h,Dt),$(ta,Dt,null),e(Dt,eu),e(Dt,ra),e(ra,tu),e(ra,Va),e(Va,ru),e(ra,au),e(h,ou),e(h,Tt),$(aa,Tt,null),e(Tt,su),e(Tt,oa),e(oa,nu),e(oa,Ks),e(Ks,cu),e(oa,lu),e(h,iu),e(h,ee),$(sa,ee,null),e(ee,du),e(ee,we),e(we,pu),e(we,Qs),e(Qs,hu),e(we,mu),e(we,Xs),e(Xs,uu),e(we,fu),e(ee,gu),e(ee,Js),e(Js,_u),e(h,vu),e(h,V),$(na,V,null),e(V,$u),e(V,M),e(M,bu),e(M,Zs),e(Zs,yu),e(M,wu),e(M,en),e(en,Eu),e(M,Au),e(M,tn),e(tn,ku),e(M,xu),e(V,Pu),e(V,rn),e(rn,ju),e(V,Du),$(zt,V,null),e(h,Tu),e(h,St),$(ca,St,null),e(St,zu),e(St,la),e(la,Su),e(la,an),e(an,Iu),e(la,Ou),e(h,Lu),e(h,te),$(ia,te,null),e(te,Nu),e(te,on),e(on,Cu),e(te,qu),$(It,te,null),e(h,Uu),e(h,Ot),$(da,Ot,null),e(Ot,Vu),e(Ot,sn),e(sn,Gu),e(h,Ru),e(h,Lt),$(pa,Lt,null),e(Lt,Mu),e(Lt,Ee),e(Ee,Wu),e(Ee,nn),e(nn,Hu),e(Ee,Fu),e(Ee,Ga),e(Ga,Yu),e(Ee,Bu),e(h,Ku),e(h,Nt),$(ha,Nt,null),e(Nt,Qu),e(Nt,cn),e(cn,Xu),mc=!0},p(t,[p]){const ma={};p&2&&(ma.$$scope={dirty:p,ctx:t}),Pe.$set(ma);const ln={};p&2&&(ln.$$scope={dirty:p,ctx:t}),De.$set(ln);const dn={};p&2&&(dn.$$scope={dirty:p,ctx:t}),ct.$set(dn);const pn={};p&2&&(pn.$$scope={dirty:p,ctx:t}),dt.$set(pn);const ua={};p&2&&(ua.$$scope={dirty:p,ctx:t}),pt.$set(ua);const hn={};p&2&&(hn.$$scope={dirty:p,ctx:t}),vt.$set(hn);const fa={};p&2&&(fa.$$scope={dirty:p,ctx:t}),bt.$set(fa);const mn={};p&2&&(mn.$$scope={dirty:p,ctx:t}),zt.$set(mn);const un={};p&2&&(un.$$scope={dirty:p,ctx:t}),It.$set(un)},i(t){mc||(b(u.$$.fragment,t),b(Wt.$$.fragment,t),b(Pe.$$.fragment,t),b(De.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Bt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(ar.$$.fragment,t),b(or.$$.fragment,t),b(sr.$$.fragment,t),b(nr.$$.fragment,t),b(cr.$$.fragment,t),b(lr.$$.fragment,t),b(ir.$$.fragment,t),b(dr.$$.fragment,t),b(pr.$$.fragment,t),b(hr.$$.fragment,t),b(mr.$$.fragment,t),b(ur.$$.fragment,t),b(ct.$$.fragment,t),b(fr.$$.fragment,t),b(gr.$$.fragment,t),b(vr.$$.fragment,t),b(br.$$.fragment,t),b(dt.$$.fragment,t),b(wr.$$.fragment,t),b(pt.$$.fragment,t),b(Ar.$$.fragment,t),b(kr.$$.fragment,t),b(xr.$$.fragment,t),b(jr.$$.fragment,t),b(Tr.$$.fragment,t),b(Sr.$$.fragment,t),b(Ir.$$.fragment,t),b(Lr.$$.fragment,t),b(vt.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(qr.$$.fragment,t),b(Ur.$$.fragment,t),b(bt.$$.fragment,t),b(Rr.$$.fragment,t),b(Mr.$$.fragment,t),b(Wr.$$.fragment,t),b(Hr.$$.fragment,t),b(Fr.$$.fragment,t),b(Yr.$$.fragment,t),b(Kr.$$.fragment,t),b(Xr.$$.fragment,t),b(Zr.$$.fragment,t),b(ta.$$.fragment,t),b(aa.$$.fragment,t),b(sa.$$.fragment,t),b(na.$$.fragment,t),b(zt.$$.fragment,t),b(ca.$$.fragment,t),b(ia.$$.fragment,t),b(It.$$.fragment,t),b(da.$$.fragment,t),b(pa.$$.fragment,t),b(ha.$$.fragment,t),mc=!0)},o(t){y(u.$$.fragment,t),y(Wt.$$.fragment,t),y(Pe.$$.fragment,t),y(De.$$.fragment,t),y(Ft.$$.fragment,t),y(Yt.$$.fragment,t),y(Bt.$$.fragment,t),y(Kt.$$.fragment,t),y(Qt.$$.fragment,t),y(Xt.$$.fragment,t),y(Jt.$$.fragment,t),y(Zt.$$.fragment,t),y(er.$$.fragment,t),y(tr.$$.fragment,t),y(rr.$$.fragment,t),y(ar.$$.fragment,t),y(or.$$.fragment,t),y(sr.$$.fragment,t),y(nr.$$.fragment,t),y(cr.$$.fragment,t),y(lr.$$.fragment,t),y(ir.$$.fragment,t),y(dr.$$.fragment,t),y(pr.$$.fragment,t),y(hr.$$.fragment,t),y(mr.$$.fragment,t),y(ur.$$.fragment,t),y(ct.$$.fragment,t),y(fr.$$.fragment,t),y(gr.$$.fragment,t),y(vr.$$.fragment,t),y(br.$$.fragment,t),y(dt.$$.fragment,t),y(wr.$$.fragment,t),y(pt.$$.fragment,t),y(Ar.$$.fragment,t),y(kr.$$.fragment,t),y(xr.$$.fragment,t),y(jr.$$.fragment,t),y(Tr.$$.fragment,t),y(Sr.$$.fragment,t),y(Ir.$$.fragment,t),y(Lr.$$.fragment,t),y(vt.$$.fragment,t),y(Nr.$$.fragment,t),y(Cr.$$.fragment,t),y(qr.$$.fragment,t),y(Ur.$$.fragment,t),y(bt.$$.fragment,t),y(Rr.$$.fragment,t),y(Mr.$$.fragment,t),y(Wr.$$.fragment,t),y(Hr.$$.fragment,t),y(Fr.$$.fragment,t),y(Yr.$$.fragment,t),y(Kr.$$.fragment,t),y(Xr.$$.fragment,t),y(Zr.$$.fragment,t),y(ta.$$.fragment,t),y(aa.$$.fragment,t),y(sa.$$.fragment,t),y(na.$$.fragment,t),y(zt.$$.fragment,t),y(ca.$$.fragment,t),y(ia.$$.fragment,t),y(It.$$.fragment,t),y(da.$$.fragment,t),y(pa.$$.fragment,t),y(ha.$$.fragment,t),mc=!1},d(t){r(f),t&&r(x),t&&r(A),w(u),t&&r(ke),t&&r(C),t&&r(Mt),t&&r(oe),w(Wt),t&&r(jn),t&&r(va),t&&r(Dn),t&&r(W),t&&r(Tn),w(Pe,t),t&&r(zn),t&&r(ne),t&&r(Sn),w(De,t),t&&r(In),t&&r(Te),t&&r(On),t&&r(ce),w(Ft),t&&r(Ln),t&&r(le),w(Yt),t&&r(Nn),t&&r(ie),t&&r(Cn),w(Bt,t),t&&r(qn),t&&r(de),w(Kt),t&&r(Un),t&&r(pe),w(Qt),t&&r(Vn),t&&r(Le),t&&r(Gn),w(Xt,t),t&&r(Rn),t&&r(Ne),t&&r(Mn),w(Jt,t),t&&r(Wn),t&&r(he),w(Zt),t&&r(Hn),t&&r(qe),t&&r(Fn),w(er,t),t&&r(Yn),t&&r(Ue),t&&r(Bn),w(tr,t),t&&r(Kn),t&&r(me),w(rr),t&&r(Qn),t&&r(xa),t&&r(Xn),w(ar,t),t&&r(Jn),w(or,t),t&&r(Zn),t&&r(ue),w(sr),t&&r(ec),t&&r(Re),t&&r(tc),t&&r(fe),w(nr),t&&r(rc),t&&r(We),t&&r(ac),w(cr,t),t&&r(oc),t&&r(H),t&&r(sc),w(lr,t),t&&r(nc),t&&r(ge),w(ir),t&&r(cc),t&&r(O),t&&r(lc),t&&r(_e),w(dr),t&&r(ic),t&&r(Ke),t&&r(dc),w(pr,t),t&&r(pc),t&&r(ve),w(hr),t&&r(hc),t&&r(h),w(mr),w(ur),w(ct),w(fr),w(gr),w(vr),w(br),w(dt),w(wr),w(pt),w(Ar),w(kr),w(xr),w(jr),w(Tr),w(Sr),w(Ir),w(Lr),w(vt),w(Nr),w(Cr),w(qr),w(Ur),w(bt),w(Rr),w(Mr),w(Wr),w(Hr),w(Fr),w(Yr),w(Kr),w(Xr),w(Zr),w(ta),w(aa),w(sa),w(na),w(zt),w(ca),w(ia),w(It),w(da),w(pa),w(ha)}}}const K_={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function Q_(T){return q_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class av extends O_{constructor(f){super();L_(this,f,Q_,B_,N_,{})}}export{av as default,K_ as metadata};
