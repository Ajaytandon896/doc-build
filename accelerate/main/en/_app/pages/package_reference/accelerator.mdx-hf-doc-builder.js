import{S as Pg,i as Dg,s as Tg,e as a,k as l,w as _,t as n,M as zg,c as o,d as r,m as i,a as s,x as v,h as c,b as p,G as e,g as h,y as $,q as b,o as y,B as w,v as Sg,L as Bc}from"../../chunks/vendor-hf-doc-builder.js";import{T as nn}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as O}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as L}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Yc}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Og(T){let u,x;return{c(){u=a("p"),x=n("Step three is optional, but considered a best practice.")},l(A){u=o(A,"P",{});var E=s(u);x=c(E,"Step three is optional, but considered a best practice."),E.forEach(r)},m(A,E){h(A,u,E),e(u,x)},d(A){A&&r(u)}}}function Ig(T){let u,x;return{c(){u=a("p"),x=n("Step five is mandatory when using distributed evaluation")},l(A){u=o(A,"P",{});var E=s(u);x=c(E,"Step five is mandatory when using distributed evaluation"),E.forEach(r)},m(A,E){h(A,u,E),e(u,x)},d(A){A&&r(u)}}}function Lg(T){let u,x,A,E,j;return E=new O({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

with accelerator.accumulate():
    for input, output in dataloader:
        outputs = model(input)
        loss = loss_func(outputs)
        loss.backward()
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.accumulate():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span>, output <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>        outputs = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>        loss = loss_func(outputs)
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        scheduler.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()`}}),{c(){u=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(m){u=o(m,"P",{});var k=s(u);x=c(k,"Example:"),k.forEach(r),A=i(m),v(E.$$.fragment,m)},m(m,k){h(m,u,k),e(u,x),h(m,A,k),$(E,m,k),j=!0},p:Bc,i(m){j||(b(E.$$.fragment,m),j=!0)},o(m){y(E.$$.fragment,m),j=!1},d(m){m&&r(u),m&&r(A),w(E,m)}}}function Ng(T){let u,x,A,E,j;return E=new O({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){u=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(m){u=o(m,"P",{});var k=s(u);x=c(k,"Example:"),k.forEach(r),A=i(m),v(E.$$.fragment,m)},m(m,k){h(m,u,k),e(u,x),h(m,A,k),$(E,m,k),j=!0},p:Bc,i(m){j||(b(E.$$.fragment,m),j=!0)},o(m){y(E.$$.fragment,m),j=!1},d(m){m&&r(u),m&&r(A),w(E,m)}}}function Cg(T){let u,x,A,E,j;return E=new O({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_value_(model.parameters(), clip_value)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_value_(model.parameters(), clip_value)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){u=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(m){u=o(m,"P",{});var k=s(u);x=c(k,"Example:"),k.forEach(r),A=i(m),v(E.$$.fragment,m)},m(m,k){h(m,u,k),e(u,x),h(m,A,k),$(E,m,k),j=!0},p:Bc,i(m){j||(b(E.$$.fragment,m),j=!0)},o(m){y(E.$$.fragment,m),j=!1},d(m){m&&r(u),m&&r(A),w(E,m)}}}function qg(T){let u,x,A,E,j;return{c(){u=a("p"),x=n("Should only be used in conjunction with "),A=a("a"),E=n("Accelerator.save_state()"),j=n("."),this.h()},l(m){u=o(m,"P",{});var k=s(u);x=c(k,"Should only be used in conjunction with "),A=o(k,"A",{href:!0});var N=s(A);E=c(N,"Accelerator.save_state()"),N.forEach(r),j=c(k,"."),k.forEach(r),this.h()},h(){p(A,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save_state")},m(m,k){h(m,u,k),e(u,x),e(u,A),e(A,E),e(u,j)},d(m){m&&r(u)}}}function Ug(T){let u,x,A,E,j;return E=new O({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
input_a = next(iter(dataloader))
input_b = next(iter(dataloader))

with accelerator.no_sync():
    outputs = model(input_a)
    loss = loss_func(outputs)
    accelerator.backward(loss)
    # No synchronization across processes, only accumulate gradients
outputs = model(input_b)
accelerator.backward(loss)
# Synchronization across all processes
optimizer.step()
optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_a = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))
<span class="hljs-meta">&gt;&gt;&gt; </span>input_b = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.no_sync():
<span class="hljs-meta">... </span>    outputs = model(input_a)
<span class="hljs-meta">... </span>    loss = loss_func(outputs)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-comment"># No synchronization across processes, only accumulate gradients</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator.backward(loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Synchronization across all processes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.step()
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.zero_grad()`}}),{c(){u=a("p"),x=n("Example:"),A=l(),_(E.$$.fragment)},l(m){u=o(m,"P",{});var k=s(u);x=c(k,"Example:"),k.forEach(r),A=i(m),v(E.$$.fragment,m)},m(m,k){h(m,u,k),e(u,x),h(m,A,k),$(E,m,k),j=!0},p:Bc,i(m){j||(b(E.$$.fragment,m),j=!0)},o(m){y(E.$$.fragment,m),j=!1},d(m){m&&r(u),m&&r(A),w(E,m)}}}function Gg(T){let u,x,A,E,j,m,k,N,re,ke,C;return{c(){u=a("p"),x=n("Every "),A=a("code"),E=n("object"),j=n(" must have a "),m=a("code"),k=n("load_state_dict"),N=n(" and "),re=a("code"),ke=n("state_dict"),C=n(" function to be stored.")},l(ae){u=o(ae,"P",{});var S=s(u);x=c(S,"Every "),A=o(S,"CODE",{});var ta=s(A);E=c(ta,"object"),ta.forEach(r),j=c(S," must have a "),m=o(S,"CODE",{});var ra=s(m);k=c(ra,"load_state_dict"),ra.forEach(r),N=c(S," and "),re=o(S,"CODE",{});var qt=s(re);ke=c(qt,"state_dict"),qt.forEach(r),C=c(S," function to be stored."),S.forEach(r)},m(ae,S){h(ae,u,S),e(u,x),e(u,A),e(A,E),e(u,j),e(u,m),e(m,k),e(u,N),e(u,re),e(re,ke),e(u,C)},d(ae){ae&&r(u)}}}function Vg(T){let u,x;return{c(){u=a("p"),x=n(`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`)},l(A){u=o(A,"P",{});var E=s(u);x=c(E,`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`),E.forEach(r)},m(A,E){h(A,u,E),e(u,x)},d(A){A&&r(u)}}}function Rg(T){let u,x,A,E,j,m,k,N,re,ke,C,ae,S,ta,ra,qt,oe,xe,Ga,Ut,Kc,Va,Qc,cn,aa,Xc,ln,W,se,Jc,oa,Zc,el,Ra,tl,rl,al,Gt,ol,sa,sl,nl,cl,V,ll,Ma,il,dl,Wa,pl,hl,Ha,ml,ul,dn,je,pn,ne,Pe,fl,Fa,gl,_l,Ya,vl,$l,na,bl,ca,yl,hn,De,mn,Te,wl,Ba,El,Al,un,ce,ze,Ka,Vt,kl,Qa,xl,fn,le,Se,Xa,Rt,jl,Ja,Pl,gn,ie,Za,Dl,Tl,la,zl,Sl,_n,Mt,vn,de,Oe,eo,Wt,Ol,to,Il,$n,pe,Ie,ro,Ht,Ll,ao,Nl,bn,Le,Cl,oo,ql,Ul,yn,Ft,wn,Ne,Gl,ia,Vl,Rl,En,Yt,An,he,Ce,so,Bt,Ml,no,Wl,kn,qe,Hl,co,Fl,Yl,xn,Kt,jn,Ue,Bl,da,Kl,Ql,Pn,Qt,Dn,me,Ge,lo,Xt,Xl,io,Jl,Tn,pa,Zl,zn,Jt,Sn,Zt,On,ue,Ve,po,er,ei,ho,ti,In,Re,ri,ha,ai,oi,Ln,fe,Me,mo,tr,si,uo,ni,Nn,We,ci,ma,li,ii,Cn,rr,qn,H,di,ua,pi,hi,fo,mi,ui,Un,ar,Gn,ge,He,go,or,fi,_o,gi,Vn,I,_i,Fe,vi,vo,$i,bi,yi,$o,wi,Ei,Ye,Ai,bo,ki,xi,ji,yo,Pi,Rn,_e,Be,wo,sr,Di,Eo,Ti,Mn,Ke,zi,fa,Si,Oi,Wn,nr,Hn,ve,Qe,Ao,cr,Ii,ko,Li,Fn,f,lr,Ni,xo,Ci,qi,jo,Po,Ui,Gi,D,Xe,Do,Vi,Ri,To,Mi,Wi,Hi,Je,zo,Fi,Yi,ga,Bi,Ki,Qi,Ze,So,Xi,Ji,Oo,Zi,ed,td,et,Io,rd,ad,Lo,od,sd,nd,tt,No,cd,ld,Co,id,dd,pd,rt,qo,hd,md,Uo,ud,fd,gd,at,Go,_d,vd,Vo,$d,bd,yd,ot,Ro,wd,Ed,_a,Ad,kd,xd,st,Mo,jd,Pd,Wo,Dd,Td,zd,nt,Ho,Sd,Od,Fo,Id,Ld,Nd,F,ir,Cd,Yo,qd,Ud,ct,Gd,lt,dr,Vd,Bo,Rd,Md,Y,pr,Wd,$e,Hd,Ko,Fd,Yd,Qo,Bd,Kd,Qd,hr,Xd,Xo,Jd,Zd,ep,it,mr,tp,ur,rp,Jo,ap,op,sp,B,fr,np,gr,cp,Zo,lp,ip,dp,dt,pp,K,_r,hp,vr,mp,es,up,fp,gp,pt,_p,ht,$r,vp,ts,$p,bp,mt,br,yp,rs,wp,Ep,Q,yr,Ap,wr,kp,as,xp,jp,Pp,os,Dp,Tp,ut,Er,zp,Ar,Sp,ss,Op,Ip,Lp,ft,kr,Np,R,Cp,ns,qp,Up,cs,Gp,Vp,ls,Rp,Mp,Wp,gt,xr,Hp,jr,Fp,is,Yp,Bp,Kp,X,Pr,Qp,ds,Xp,Jp,_t,Zp,J,Dr,eh,ps,th,rh,hs,ah,oh,vt,Tr,sh,be,nh,ms,ch,lh,us,ih,dh,ph,Z,zr,hh,fs,mh,uh,gs,fh,gh,q,Sr,_h,Or,vh,_s,$h,bh,yh,Ir,wh,vs,Eh,Ah,kh,$t,xh,bt,Lr,jh,$s,Ph,Dh,yt,Nr,Th,bs,zh,Sh,wt,Cr,Oh,ys,Ih,Lh,Et,qr,Nh,ws,Ch,qh,At,Ur,Uh,Es,Gh,Vh,U,Gr,Rh,Vr,Mh,As,Wh,Hh,Fh,ks,Yh,Bh,ye,va,xs,Kh,Qh,Xh,$a,js,Jh,Zh,em,ba,Ps,tm,rm,am,kt,Rr,om,Mr,sm,Ds,nm,cm,lm,ee,Wr,im,we,dm,Ts,pm,hm,zs,mm,um,fm,Ss,gm,_m,G,Hr,vm,M,$m,Os,bm,ym,Is,wm,Em,Ls,Am,km,xm,Ns,jm,Pm,xt,Dm,jt,Fr,Tm,Yr,zm,Cs,Sm,Om,Im,te,Br,Lm,qs,Nm,Cm,Pt,qm,Dt,Kr,Um,Us,Gm,Vm,Tt,Qr,Rm,Ee,Mm,Gs,Wm,Hm,ya,Fm,Ym,Bm,zt,Xr,Km,Vs,Qm,Yn;return m=new L({}),Ut=new L({}),je=new nn({props:{$$slots:{default:[Og]},$$scope:{ctx:T}}}),De=new nn({props:{warning:!0,$$slots:{default:[Ig]},$$scope:{ctx:T}}}),Vt=new L({}),Rt=new L({}),Mt=new O({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),Wt=new L({}),Ht=new L({}),Ft=new O({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),Yt=new O({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),Bt=new L({}),Kt=new O({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),Qt=new O({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),Xt=new L({}),Jt=new O({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),Zt=new O({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),er=new L({}),tr=new L({}),rr=new O({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),ar=new O({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),or=new L({}),sr=new L({}),nr=new O({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),cr=new L({}),lr=new P({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/main/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/main/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all</code>&#x201D; is selected, will pick up all available trackers in the environment and intialize them. Can also
accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L80"}}),ir=new P({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L507"}}),ct=new Yc({props:{anchor:"accelerate.Accelerator.accumulate.example",$$slots:{default:[Lg]},$$scope:{ctx:T}}}),dr=new P({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1424"}}),pr=new P({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L912"}}),mr=new P({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1341"}}),fr=new P({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L947"}}),dt=new Yc({props:{anchor:"accelerate.Accelerator.clip_grad_norm_.example",$$slots:{default:[Ng]},$$scope:{ctx:T}}}),_r=new P({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L982"}}),pt=new Yc({props:{anchor:"accelerate.Accelerator.clip_grad_value_.example",$$slots:{default:[Cg]},$$scope:{ctx:T}}}),$r=new P({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1181"}}),br=new P({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1329"}}),yr=new P({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1009",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Er=new P({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1027"}}),kr=new P({props:{name:"get_tracker",anchor:"accelerate.Accelerator.get_tracker",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_tracker.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name of a tracker, corresponding to the <code>.name</code> property.`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1147"}}),xr=new P({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like this:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1112"}}),Pr=new P({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1262"}}),_t=new nn({props:{$$slots:{default:[qg]},$$scope:{ctx:T}}}),Dr=new P({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L444"}}),Tr=new P({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like this:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1161"}}),zr=new P({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L435"}}),Sr=new P({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L453"}}),$t=new Yc({props:{anchor:"accelerate.Accelerator.no_sync.example",$$slots:{default:[Ug]},$$scope:{ctx:T}}}),Lr=new P({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L384"}}),Nr=new P({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L411"}}),Cr=new P({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L372"}}),qr=new P({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L396"}}),Ur=new P({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1077"}}),Gr=new P({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L605"}}),Rr=new P({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L543"}}),Wr=new P({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1059",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Hr=new P({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1400"}}),xt=new nn({props:{$$slots:{default:[Gg]},$$scope:{ctx:T}}}),Fr=new P({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1189"}}),Br=new P({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1200"}}),Pt=new nn({props:{$$slots:{default:[Vg]},$$scope:{ctx:T}}}),Kr=new P({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L927"}}),Qr=new P({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1094"}}),Xr=new P({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/accelerator.py#L1105"}}),{c(){u=a("meta"),x=l(),A=a("h1"),E=a("a"),j=a("span"),_(m.$$.fragment),k=l(),N=a("span"),re=n("Accelerator"),ke=l(),C=a("p"),ae=n("The "),S=a("a"),ta=n("Accelerator"),ra=n(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),qt=l(),oe=a("h2"),xe=a("a"),Ga=a("span"),_(Ut.$$.fragment),Kc=l(),Va=a("span"),Qc=n("Quick adaptation of your code"),cn=l(),aa=a("p"),Xc=n("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),ln=l(),W=a("ol"),se=a("li"),Jc=n("Initialize an "),oa=a("a"),Zc=n("Accelerator"),el=n(" object (that we will call "),Ra=a("code"),tl=n("accelerator"),rl=n(" throughout this page) as early as possible in your script."),al=l(),Gt=a("li"),ol=n("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),sa=a("a"),sl=n("prepare()"),nl=n(" method."),cl=l(),V=a("li"),ll=n("Remove all the "),Ma=a("code"),il=n(".cuda()"),dl=n(" or "),Wa=a("code"),pl=n(".to(device)"),hl=n(" from your code and let the "),Ha=a("code"),ml=n("accelerator"),ul=n(" handle the device placement for you."),dn=l(),_(je.$$.fragment),pn=l(),ne=a("ol"),Pe=a("li"),fl=n("Replace "),Fa=a("code"),gl=n("loss.backward()"),_l=n(" in your code with "),Ya=a("code"),vl=n("accelerator.backward(loss)"),$l=l(),na=a("li"),bl=n("Gather your predictions and labels before storing them or using them for metric computation using "),ca=a("a"),yl=n("gather()"),hn=l(),_(De.$$.fragment),mn=l(),Te=a("p"),wl=n(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),Ba=a("code"),El=n("accelerator"),Al=n(":"),un=l(),ce=a("h2"),ze=a("a"),Ka=a("span"),_(Vt.$$.fragment),kl=l(),Qa=a("span"),xl=n("Advanced recommendations"),fn=l(),le=a("h3"),Se=a("a"),Xa=a("span"),_(Rt.$$.fragment),jl=l(),Ja=a("span"),Pl=n("Printing"),gn=l(),ie=a("p"),Za=a("code"),Dl=n("print"),Tl=n(" statements should be replaced by "),la=a("a"),zl=n("print()"),Sl=n(" to be printed once per process"),_n=l(),_(Mt.$$.fragment),vn=l(),de=a("h3"),Oe=a("a"),eo=a("span"),_(Wt.$$.fragment),Ol=l(),to=a("span"),Il=n("Executing processes"),$n=l(),pe=a("h4"),Ie=a("a"),ro=a("span"),_(Ht.$$.fragment),Ll=l(),ao=a("span"),Nl=n("Once on a single server"),bn=l(),Le=a("p"),Cl=n("For statements that should be executed once per server, use "),oo=a("code"),ql=n("is_local_main_process"),Ul=n(":"),yn=l(),_(Ft.$$.fragment),wn=l(),Ne=a("p"),Gl=n("A function can be wrapped using the "),ia=a("a"),Vl=n("on_local_main_process()"),Rl=n(` function to achieve the same
behavior on a function\u2019s execution:`),En=l(),_(Yt.$$.fragment),An=l(),he=a("h4"),Ce=a("a"),so=a("span"),_(Bt.$$.fragment),Ml=l(),no=a("span"),Wl=n("Only ever once across all servers"),kn=l(),qe=a("p"),Hl=n("For statements that should only ever be executed once, use "),co=a("code"),Fl=n("is_main_process"),Yl=n(":"),xn=l(),_(Kt.$$.fragment),jn=l(),Ue=a("p"),Bl=n("A function can be wrapped using the "),da=a("a"),Kl=n("on_main_process()"),Ql=n(` function to achieve the same
behavior on a function\u2019s execution:`),Pn=l(),_(Qt.$$.fragment),Dn=l(),me=a("h4"),Ge=a("a"),lo=a("span"),_(Xt.$$.fragment),Xl=l(),io=a("span"),Jl=n("On specific processes"),Tn=l(),pa=a("p"),Zl=n(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),zn=l(),_(Jt.$$.fragment),Sn=l(),_(Zt.$$.fragment),On=l(),ue=a("h3"),Ve=a("a"),po=a("span"),_(er.$$.fragment),ei=l(),ho=a("span"),ti=n("Synchronicity control"),In=l(),Re=a("p"),ri=n("Use "),ha=a("a"),ai=n("wait_for_everyone()"),oi=n(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Ln=l(),fe=a("h3"),Me=a("a"),mo=a("span"),_(tr.$$.fragment),si=l(),uo=a("span"),ni=n("Saving and loading"),Nn=l(),We=a("p"),ci=n("Use "),ma=a("a"),li=n("unwrap_model()"),ii=n(" before saving to remove all special model wrappers added during the distributed process."),Cn=l(),_(rr.$$.fragment),qn=l(),H=a("p"),di=n("Use "),ua=a("a"),pi=n("save()"),hi=n(" instead of "),fo=a("code"),mi=n("torch.save"),ui=n(":"),Un=l(),_(ar.$$.fragment),Gn=l(),ge=a("h3"),He=a("a"),go=a("span"),_(or.$$.fragment),fi=l(),_o=a("span"),gi=n("Operations"),Vn=l(),I=a("p"),_i=n("Use "),Fe=a("a"),vi=n("clip"),vo=a("em"),$i=n("grad_norm"),bi=n("()"),yi=n(" instead of "),$o=a("code"),wi=n("torch.nn.utils.clip_grad_norm_"),Ei=n(" and "),Ye=a("a"),Ai=n("clip"),bo=a("em"),ki=n("grad_value"),xi=n("()"),ji=n(" instead of "),yo=a("code"),Pi=n("torch.nn.utils.clip_grad_value"),Rn=l(),_e=a("h3"),Be=a("a"),wo=a("span"),_(sr.$$.fragment),Di=l(),Eo=a("span"),Ti=n("Gradient Accumulation"),Mn=l(),Ke=a("p"),zi=n("To perform gradient accumulation use "),fa=a("a"),Si=n("accumulate()"),Oi=n(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),Wn=l(),_(nr.$$.fragment),Hn=l(),ve=a("h2"),Qe=a("a"),Ao=a("span"),_(cr.$$.fragment),Ii=l(),ko=a("span"),Li=n("Overall API documentation:"),Fn=l(),f=a("div"),_(lr.$$.fragment),Ni=l(),xo=a("p"),Ci=n("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),qi=l(),jo=a("p"),Po=a("strong"),Ui=n("Available attributes:"),Gi=l(),D=a("ul"),Xe=a("li"),Do=a("strong"),Vi=n("device"),Ri=n(" ("),To=a("code"),Mi=n("torch.device"),Wi=n(") \u2014 The device to use."),Hi=l(),Je=a("li"),zo=a("strong"),Fi=n("distributed_type"),Yi=n(" ("),ga=a("a"),Bi=n("DistributedType"),Ki=n(") \u2014 The distributed training configuration."),Qi=l(),Ze=a("li"),So=a("strong"),Xi=n("local_process_index"),Ji=n(" ("),Oo=a("code"),Zi=n("int"),ed=n(") \u2014 The process index on the current machine."),td=l(),et=a("li"),Io=a("strong"),rd=n("mixed_precision"),ad=n(" ("),Lo=a("code"),od=n("str"),sd=n(") \u2014 The configured mixed precision mode."),nd=l(),tt=a("li"),No=a("strong"),cd=n("num_processes"),ld=n(" ("),Co=a("code"),id=n("int"),dd=n(") \u2014 The total number of processes used for training."),pd=l(),rt=a("li"),qo=a("strong"),hd=n("optimizer_step_was_skipped"),md=n(" ("),Uo=a("code"),ud=n("bool"),fd=n(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),gd=l(),at=a("li"),Go=a("strong"),_d=n("process_index"),vd=n(" ("),Vo=a("code"),$d=n("int"),bd=n(") \u2014 The overall index of the current process among all processes."),yd=l(),ot=a("li"),Ro=a("strong"),wd=n("state"),Ed=n(" ("),_a=a("a"),Ad=n("AcceleratorState"),kd=n(") \u2014 The distributed setup state."),xd=l(),st=a("li"),Mo=a("strong"),jd=n("sync_gradients"),Pd=n(" ("),Wo=a("code"),Dd=n("bool"),Td=n(") \u2014 Whether the gradients are currently being synced across all processes."),zd=l(),nt=a("li"),Ho=a("strong"),Sd=n("use_distributed"),Od=n(" ("),Fo=a("code"),Id=n("bool"),Ld=n(") \u2014 Whether the current configuration is for distributed training."),Nd=l(),F=a("div"),_(ir.$$.fragment),Cd=l(),Yo=a("p"),qd=n("A context manager that will lightly wrap around and perform gradient accumulation automatically"),Ud=l(),_(ct.$$.fragment),Gd=l(),lt=a("div"),_(dr.$$.fragment),Vd=l(),Bo=a("p"),Rd=n(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Md=l(),Y=a("div"),_(pr.$$.fragment),Wd=l(),$e=a("p"),Hd=n("Scales the gradients in accordance to "),Ko=a("code"),Fd=n("Accelerator.gradient_accumulation_steps"),Yd=n(` and calls the correct
`),Qo=a("code"),Bd=n("backward()"),Kd=n(" based on the configuration."),Qd=l(),hr=a("p"),Xd=n("Should be used in lieu of "),Xo=a("code"),Jd=n("loss.backward()"),Zd=n("."),ep=l(),it=a("div"),_(mr.$$.fragment),tp=l(),ur=a("p"),rp=n("Alias for "),Jo=a("code"),ap=n("Accelerate.free_memory"),op=n(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),sp=l(),B=a("div"),_(fr.$$.fragment),np=l(),gr=a("p"),cp=n("Should be used in place of "),Zo=a("code"),lp=n("torch.nn.utils.clip_grad_norm_"),ip=n("."),dp=l(),_(dt.$$.fragment),pp=l(),K=a("div"),_(_r.$$.fragment),hp=l(),vr=a("p"),mp=n("Should be used in place of "),es=a("code"),up=n("torch.nn.utils.clip_grad_value_"),fp=n("."),gp=l(),_(pt.$$.fragment),_p=l(),ht=a("div"),_($r.$$.fragment),vp=l(),ts=a("p"),$p=n("Runs any special end training behaviors, such as stopping trackers on the main process only."),bp=l(),mt=a("div"),_(br.$$.fragment),yp=l(),rs=a("p"),wp=n(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Ep=l(),Q=a("div"),_(yr.$$.fragment),Ap=l(),wr=a("p"),kp=n("Gather the values in "),as=a("em"),xp=n("tensor"),jp=n(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Pp=l(),os=a("p"),Dp=n(`Note:
This gather happens in all processes.`),Tp=l(),ut=a("div"),_(Er.$$.fragment),zp=l(),Ar=a("p"),Sp=n("Gathers "),ss=a("code"),Op=n("tensor"),Ip=n(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Lp=l(),ft=a("div"),_(kr.$$.fragment),Np=l(),R=a("p"),Cp=n("Returns a "),ns=a("code"),qp=n("tracker"),Up=n(" from "),cs=a("code"),Gp=n("self.trackers"),Vp=n(" based on "),ls=a("code"),Rp=n("name"),Mp=n(" on the main process only."),Wp=l(),gt=a("div"),_(xr.$$.fragment),Hp=l(),jr=a("p"),Fp=n("Initializes a run for all trackers stored in "),is=a("code"),Yp=n("self.log_with"),Bp=n(", potentially with starting configurations"),Kp=l(),X=a("div"),_(Pr.$$.fragment),Qp=l(),ds=a("p"),Xp=n("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Jp=l(),_(_t.$$.fragment),Zp=l(),J=a("div"),_(Dr.$$.fragment),eh=l(),ps=a("p"),th=n("Lets the local main process go inside a with block."),rh=l(),hs=a("p"),ah=n("The other processes will enter the with block after the main process exits."),oh=l(),vt=a("div"),_(Tr.$$.fragment),sh=l(),be=a("p"),nh=n("Logs "),ms=a("code"),ch=n("values"),lh=n(" to all stored trackers in "),us=a("code"),ih=n("self.trackers"),dh=n(" on the main process only."),ph=l(),Z=a("div"),_(zr.$$.fragment),hh=l(),fs=a("p"),mh=n("Lets the main process go first inside a with block."),uh=l(),gs=a("p"),fh=n("The other processes will enter the with block after the main process exits."),gh=l(),q=a("div"),_(Sr.$$.fragment),_h=l(),Or=a("p"),vh=n(`A context manager to disable gradient synchronizations across DDP processes by calling
`),_s=a("code"),$h=n("torch.nn.parallel.DistributedDataParallel.no_sync"),bh=n("."),yh=l(),Ir=a("p"),wh=n("If "),vs=a("code"),Eh=n("model"),Ah=n(" is not in DDP, this context manager does nothing"),kh=l(),_($t.$$.fragment),xh=l(),bt=a("div"),_(Lr.$$.fragment),jh=l(),$s=a("p"),Ph=n("A decorator that will run the decorated function on the local main process only."),Dh=l(),yt=a("div"),_(Nr.$$.fragment),Th=l(),bs=a("p"),zh=n("A decorator that will run the decorated function on a given local process index only."),Sh=l(),wt=a("div"),_(Cr.$$.fragment),Oh=l(),ys=a("p"),Ih=n("A decorator that will run the decorated function on the main process only."),Lh=l(),Et=a("div"),_(qr.$$.fragment),Nh=l(),ws=a("p"),Ch=n("A decorator that will run the decorated function on a given process index only."),qh=l(),At=a("div"),_(Ur.$$.fragment),Uh=l(),Es=a("p"),Gh=n(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Vh=l(),U=a("div"),_(Gr.$$.fragment),Rh=l(),Vr=a("p"),Mh=n("Prepare all objects passed in "),As=a("code"),Wh=n("args"),Hh=n(` for distributed training and mixed precision, then return them in the same
order.`),Fh=l(),ks=a("p"),Yh=n("Accepts the following type of objects:"),Bh=l(),ye=a("ul"),va=a("li"),xs=a("code"),Kh=n("torch.utils.data.DataLoader"),Qh=n(": PyTorch Dataloader"),Xh=l(),$a=a("li"),js=a("code"),Jh=n("torch.nn.Module"),Zh=n(": PyTorch Module"),em=l(),ba=a("li"),Ps=a("code"),tm=n("torch.optim.Optimizer"),rm=n(": PyTorch Optimizer"),am=l(),kt=a("div"),_(Rr.$$.fragment),om=l(),Mr=a("p"),sm=n("Use in replacement of "),Ds=a("code"),nm=n("print()"),cm=n(" to only print once per server."),lm=l(),ee=a("div"),_(Wr.$$.fragment),im=l(),we=a("p"),dm=n("Reduce the values in "),Ts=a("em"),pm=n("tensor"),hm=n(" across all processes based on "),zs=a("em"),mm=n("reduction"),um=n("."),fm=l(),Ss=a("p"),gm=n(`Note:
All processes get the reduced value.`),_m=l(),G=a("div"),_(Hr.$$.fragment),vm=l(),M=a("p"),$m=n("Makes note of "),Os=a("code"),bm=n("objects"),ym=n(" and will save or load them in during "),Is=a("code"),wm=n("save_state"),Em=n(" or "),Ls=a("code"),Am=n("load_state"),km=n("."),xm=l(),Ns=a("p"),jm=n(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),Pm=l(),_(xt.$$.fragment),Dm=l(),jt=a("div"),_(Fr.$$.fragment),Tm=l(),Yr=a("p"),zm=n("Save the object passed to disk once per machine. Use in place of "),Cs=a("code"),Sm=n("torch.save"),Om=n("."),Im=l(),te=a("div"),_(Br.$$.fragment),Lm=l(),qs=a("p"),Nm=n("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Cm=l(),_(Pt.$$.fragment),qm=l(),Dt=a("div"),_(Kr.$$.fragment),Um=l(),Us=a("p"),Gm=n("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Vm=l(),Tt=a("div"),_(Qr.$$.fragment),Rm=l(),Ee=a("p"),Mm=n("Unwraps the "),Gs=a("code"),Wm=n("model"),Hm=n(" from the additional layer possible added by "),ya=a("a"),Fm=n("prepare()"),Ym=n(`. Useful before saving
the model.`),Bm=l(),zt=a("div"),_(Xr.$$.fragment),Km=l(),Vs=a("p"),Qm=n(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const d=zg('[data-svelte="svelte-1phssyn"]',document.head);u=o(d,"META",{name:!0,content:!0}),d.forEach(r),x=i(t),A=o(t,"H1",{class:!0});var Jr=s(A);E=o(Jr,"A",{id:!0,class:!0,href:!0});var Rs=s(E);j=o(Rs,"SPAN",{});var Ms=s(j);v(m.$$.fragment,Ms),Ms.forEach(r),Rs.forEach(r),k=i(Jr),N=o(Jr,"SPAN",{});var Ws=s(N);re=c(Ws,"Accelerator"),Ws.forEach(r),Jr.forEach(r),ke=i(t),C=o(t,"P",{});var Zr=s(C);ae=c(Zr,"The "),S=o(Zr,"A",{href:!0});var Hs=s(S);ta=c(Hs,"Accelerator"),Hs.forEach(r),ra=c(Zr,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Zr.forEach(r),qt=i(t),oe=o(t,"H2",{class:!0});var ea=s(oe);xe=o(ea,"A",{id:!0,class:!0,href:!0});var Fs=s(xe);Ga=o(Fs,"SPAN",{});var Ys=s(Ga);v(Ut.$$.fragment,Ys),Ys.forEach(r),Fs.forEach(r),Kc=i(ea),Va=o(ea,"SPAN",{});var tu=s(Va);Qc=c(tu,"Quick adaptation of your code"),tu.forEach(r),ea.forEach(r),cn=i(t),aa=o(t,"P",{});var ru=s(aa);Xc=c(ru,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),ru.forEach(r),ln=i(t),W=o(t,"OL",{});var wa=s(W);se=o(wa,"LI",{});var Ea=s(se);Jc=c(Ea,"Initialize an "),oa=o(Ea,"A",{href:!0});var au=s(oa);Zc=c(au,"Accelerator"),au.forEach(r),el=c(Ea," object (that we will call "),Ra=o(Ea,"CODE",{});var ou=s(Ra);tl=c(ou,"accelerator"),ou.forEach(r),rl=c(Ea," throughout this page) as early as possible in your script."),Ea.forEach(r),al=i(wa),Gt=o(wa,"LI",{});var Bn=s(Gt);ol=c(Bn,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),sa=o(Bn,"A",{href:!0});var su=s(sa);sl=c(su,"prepare()"),su.forEach(r),nl=c(Bn," method."),Bn.forEach(r),cl=i(wa),V=o(wa,"LI",{});var St=s(V);ll=c(St,"Remove all the "),Ma=o(St,"CODE",{});var nu=s(Ma);il=c(nu,".cuda()"),nu.forEach(r),dl=c(St," or "),Wa=o(St,"CODE",{});var cu=s(Wa);pl=c(cu,".to(device)"),cu.forEach(r),hl=c(St," from your code and let the "),Ha=o(St,"CODE",{});var lu=s(Ha);ml=c(lu,"accelerator"),lu.forEach(r),ul=c(St," handle the device placement for you."),St.forEach(r),wa.forEach(r),dn=i(t),v(je.$$.fragment,t),pn=i(t),ne=o(t,"OL",{start:!0});var Kn=s(ne);Pe=o(Kn,"LI",{});var Bs=s(Pe);fl=c(Bs,"Replace "),Fa=o(Bs,"CODE",{});var iu=s(Fa);gl=c(iu,"loss.backward()"),iu.forEach(r),_l=c(Bs," in your code with "),Ya=o(Bs,"CODE",{});var du=s(Ya);vl=c(du,"accelerator.backward(loss)"),du.forEach(r),Bs.forEach(r),$l=i(Kn),na=o(Kn,"LI",{});var Xm=s(na);bl=c(Xm,"Gather your predictions and labels before storing them or using them for metric computation using "),ca=o(Xm,"A",{href:!0});var pu=s(ca);yl=c(pu,"gather()"),pu.forEach(r),Xm.forEach(r),Kn.forEach(r),hn=i(t),v(De.$$.fragment,t),mn=i(t),Te=o(t,"P",{});var Qn=s(Te);wl=c(Qn,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),Ba=o(Qn,"CODE",{});var hu=s(Ba);El=c(hu,"accelerator"),hu.forEach(r),Al=c(Qn,":"),Qn.forEach(r),un=i(t),ce=o(t,"H2",{class:!0});var Xn=s(ce);ze=o(Xn,"A",{id:!0,class:!0,href:!0});var mu=s(ze);Ka=o(mu,"SPAN",{});var uu=s(Ka);v(Vt.$$.fragment,uu),uu.forEach(r),mu.forEach(r),kl=i(Xn),Qa=o(Xn,"SPAN",{});var fu=s(Qa);xl=c(fu,"Advanced recommendations"),fu.forEach(r),Xn.forEach(r),fn=i(t),le=o(t,"H3",{class:!0});var Jn=s(le);Se=o(Jn,"A",{id:!0,class:!0,href:!0});var gu=s(Se);Xa=o(gu,"SPAN",{});var _u=s(Xa);v(Rt.$$.fragment,_u),_u.forEach(r),gu.forEach(r),jl=i(Jn),Ja=o(Jn,"SPAN",{});var vu=s(Ja);Pl=c(vu,"Printing"),vu.forEach(r),Jn.forEach(r),gn=i(t),ie=o(t,"P",{});var Ks=s(ie);Za=o(Ks,"CODE",{});var $u=s(Za);Dl=c($u,"print"),$u.forEach(r),Tl=c(Ks," statements should be replaced by "),la=o(Ks,"A",{href:!0});var bu=s(la);zl=c(bu,"print()"),bu.forEach(r),Sl=c(Ks," to be printed once per process"),Ks.forEach(r),_n=i(t),v(Mt.$$.fragment,t),vn=i(t),de=o(t,"H3",{class:!0});var Zn=s(de);Oe=o(Zn,"A",{id:!0,class:!0,href:!0});var yu=s(Oe);eo=o(yu,"SPAN",{});var wu=s(eo);v(Wt.$$.fragment,wu),wu.forEach(r),yu.forEach(r),Ol=i(Zn),to=o(Zn,"SPAN",{});var Eu=s(to);Il=c(Eu,"Executing processes"),Eu.forEach(r),Zn.forEach(r),$n=i(t),pe=o(t,"H4",{class:!0});var ec=s(pe);Ie=o(ec,"A",{id:!0,class:!0,href:!0});var Au=s(Ie);ro=o(Au,"SPAN",{});var ku=s(ro);v(Ht.$$.fragment,ku),ku.forEach(r),Au.forEach(r),Ll=i(ec),ao=o(ec,"SPAN",{});var xu=s(ao);Nl=c(xu,"Once on a single server"),xu.forEach(r),ec.forEach(r),bn=i(t),Le=o(t,"P",{});var tc=s(Le);Cl=c(tc,"For statements that should be executed once per server, use "),oo=o(tc,"CODE",{});var ju=s(oo);ql=c(ju,"is_local_main_process"),ju.forEach(r),Ul=c(tc,":"),tc.forEach(r),yn=i(t),v(Ft.$$.fragment,t),wn=i(t),Ne=o(t,"P",{});var rc=s(Ne);Gl=c(rc,"A function can be wrapped using the "),ia=o(rc,"A",{href:!0});var Pu=s(ia);Vl=c(Pu,"on_local_main_process()"),Pu.forEach(r),Rl=c(rc,` function to achieve the same
behavior on a function\u2019s execution:`),rc.forEach(r),En=i(t),v(Yt.$$.fragment,t),An=i(t),he=o(t,"H4",{class:!0});var ac=s(he);Ce=o(ac,"A",{id:!0,class:!0,href:!0});var Du=s(Ce);so=o(Du,"SPAN",{});var Tu=s(so);v(Bt.$$.fragment,Tu),Tu.forEach(r),Du.forEach(r),Ml=i(ac),no=o(ac,"SPAN",{});var zu=s(no);Wl=c(zu,"Only ever once across all servers"),zu.forEach(r),ac.forEach(r),kn=i(t),qe=o(t,"P",{});var oc=s(qe);Hl=c(oc,"For statements that should only ever be executed once, use "),co=o(oc,"CODE",{});var Su=s(co);Fl=c(Su,"is_main_process"),Su.forEach(r),Yl=c(oc,":"),oc.forEach(r),xn=i(t),v(Kt.$$.fragment,t),jn=i(t),Ue=o(t,"P",{});var sc=s(Ue);Bl=c(sc,"A function can be wrapped using the "),da=o(sc,"A",{href:!0});var Ou=s(da);Kl=c(Ou,"on_main_process()"),Ou.forEach(r),Ql=c(sc,` function to achieve the same
behavior on a function\u2019s execution:`),sc.forEach(r),Pn=i(t),v(Qt.$$.fragment,t),Dn=i(t),me=o(t,"H4",{class:!0});var nc=s(me);Ge=o(nc,"A",{id:!0,class:!0,href:!0});var Iu=s(Ge);lo=o(Iu,"SPAN",{});var Lu=s(lo);v(Xt.$$.fragment,Lu),Lu.forEach(r),Iu.forEach(r),Xl=i(nc),io=o(nc,"SPAN",{});var Nu=s(io);Jl=c(Nu,"On specific processes"),Nu.forEach(r),nc.forEach(r),Tn=i(t),pa=o(t,"P",{});var Cu=s(pa);Zl=c(Cu,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Cu.forEach(r),zn=i(t),v(Jt.$$.fragment,t),Sn=i(t),v(Zt.$$.fragment,t),On=i(t),ue=o(t,"H3",{class:!0});var cc=s(ue);Ve=o(cc,"A",{id:!0,class:!0,href:!0});var qu=s(Ve);po=o(qu,"SPAN",{});var Uu=s(po);v(er.$$.fragment,Uu),Uu.forEach(r),qu.forEach(r),ei=i(cc),ho=o(cc,"SPAN",{});var Gu=s(ho);ti=c(Gu,"Synchronicity control"),Gu.forEach(r),cc.forEach(r),In=i(t),Re=o(t,"P",{});var lc=s(Re);ri=c(lc,"Use "),ha=o(lc,"A",{href:!0});var Vu=s(ha);ai=c(Vu,"wait_for_everyone()"),Vu.forEach(r),oi=c(lc," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),lc.forEach(r),Ln=i(t),fe=o(t,"H3",{class:!0});var ic=s(fe);Me=o(ic,"A",{id:!0,class:!0,href:!0});var Ru=s(Me);mo=o(Ru,"SPAN",{});var Mu=s(mo);v(tr.$$.fragment,Mu),Mu.forEach(r),Ru.forEach(r),si=i(ic),uo=o(ic,"SPAN",{});var Wu=s(uo);ni=c(Wu,"Saving and loading"),Wu.forEach(r),ic.forEach(r),Nn=i(t),We=o(t,"P",{});var dc=s(We);ci=c(dc,"Use "),ma=o(dc,"A",{href:!0});var Hu=s(ma);li=c(Hu,"unwrap_model()"),Hu.forEach(r),ii=c(dc," before saving to remove all special model wrappers added during the distributed process."),dc.forEach(r),Cn=i(t),v(rr.$$.fragment,t),qn=i(t),H=o(t,"P",{});var Aa=s(H);di=c(Aa,"Use "),ua=o(Aa,"A",{href:!0});var Fu=s(ua);pi=c(Fu,"save()"),Fu.forEach(r),hi=c(Aa," instead of "),fo=o(Aa,"CODE",{});var Yu=s(fo);mi=c(Yu,"torch.save"),Yu.forEach(r),ui=c(Aa,":"),Aa.forEach(r),Un=i(t),v(ar.$$.fragment,t),Gn=i(t),ge=o(t,"H3",{class:!0});var pc=s(ge);He=o(pc,"A",{id:!0,class:!0,href:!0});var Bu=s(He);go=o(Bu,"SPAN",{});var Ku=s(go);v(or.$$.fragment,Ku),Ku.forEach(r),Bu.forEach(r),fi=i(pc),_o=o(pc,"SPAN",{});var Qu=s(_o);gi=c(Qu,"Operations"),Qu.forEach(r),pc.forEach(r),Vn=i(t),I=o(t,"P",{});var Ae=s(I);_i=c(Ae,"Use "),Fe=o(Ae,"A",{href:!0});var hc=s(Fe);vi=c(hc,"clip"),vo=o(hc,"EM",{});var Xu=s(vo);$i=c(Xu,"grad_norm"),Xu.forEach(r),bi=c(hc,"()"),hc.forEach(r),yi=c(Ae," instead of "),$o=o(Ae,"CODE",{});var Ju=s($o);wi=c(Ju,"torch.nn.utils.clip_grad_norm_"),Ju.forEach(r),Ei=c(Ae," and "),Ye=o(Ae,"A",{href:!0});var mc=s(Ye);Ai=c(mc,"clip"),bo=o(mc,"EM",{});var Zu=s(bo);ki=c(Zu,"grad_value"),Zu.forEach(r),xi=c(mc,"()"),mc.forEach(r),ji=c(Ae," instead of "),yo=o(Ae,"CODE",{});var ef=s(yo);Pi=c(ef,"torch.nn.utils.clip_grad_value"),ef.forEach(r),Ae.forEach(r),Rn=i(t),_e=o(t,"H3",{class:!0});var uc=s(_e);Be=o(uc,"A",{id:!0,class:!0,href:!0});var tf=s(Be);wo=o(tf,"SPAN",{});var rf=s(wo);v(sr.$$.fragment,rf),rf.forEach(r),tf.forEach(r),Di=i(uc),Eo=o(uc,"SPAN",{});var af=s(Eo);Ti=c(af,"Gradient Accumulation"),af.forEach(r),uc.forEach(r),Mn=i(t),Ke=o(t,"P",{});var fc=s(Ke);zi=c(fc,"To perform gradient accumulation use "),fa=o(fc,"A",{href:!0});var of=s(fa);Si=c(of,"accumulate()"),of.forEach(r),Oi=c(fc,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),fc.forEach(r),Wn=i(t),v(nr.$$.fragment,t),Hn=i(t),ve=o(t,"H2",{class:!0});var gc=s(ve);Qe=o(gc,"A",{id:!0,class:!0,href:!0});var sf=s(Qe);Ao=o(sf,"SPAN",{});var nf=s(Ao);v(cr.$$.fragment,nf),nf.forEach(r),sf.forEach(r),Ii=i(gc),ko=o(gc,"SPAN",{});var cf=s(ko);Li=c(cf,"Overall API documentation:"),cf.forEach(r),gc.forEach(r),Fn=i(t),f=o(t,"DIV",{class:!0});var g=s(f);v(lr.$$.fragment,g),Ni=i(g),xo=o(g,"P",{});var lf=s(xo);Ci=c(lf,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),lf.forEach(r),qi=i(g),jo=o(g,"P",{});var df=s(jo);Po=o(df,"STRONG",{});var pf=s(Po);Ui=c(pf,"Available attributes:"),pf.forEach(r),df.forEach(r),Gi=i(g),D=o(g,"UL",{});var z=s(D);Xe=o(z,"LI",{});var Qs=s(Xe);Do=o(Qs,"STRONG",{});var hf=s(Do);Vi=c(hf,"device"),hf.forEach(r),Ri=c(Qs," ("),To=o(Qs,"CODE",{});var mf=s(To);Mi=c(mf,"torch.device"),mf.forEach(r),Wi=c(Qs,") \u2014 The device to use."),Qs.forEach(r),Hi=i(z),Je=o(z,"LI",{});var Xs=s(Je);zo=o(Xs,"STRONG",{});var uf=s(zo);Fi=c(uf,"distributed_type"),uf.forEach(r),Yi=c(Xs," ("),ga=o(Xs,"A",{href:!0});var ff=s(ga);Bi=c(ff,"DistributedType"),ff.forEach(r),Ki=c(Xs,") \u2014 The distributed training configuration."),Xs.forEach(r),Qi=i(z),Ze=o(z,"LI",{});var Js=s(Ze);So=o(Js,"STRONG",{});var gf=s(So);Xi=c(gf,"local_process_index"),gf.forEach(r),Ji=c(Js," ("),Oo=o(Js,"CODE",{});var _f=s(Oo);Zi=c(_f,"int"),_f.forEach(r),ed=c(Js,") \u2014 The process index on the current machine."),Js.forEach(r),td=i(z),et=o(z,"LI",{});var Zs=s(et);Io=o(Zs,"STRONG",{});var vf=s(Io);rd=c(vf,"mixed_precision"),vf.forEach(r),ad=c(Zs," ("),Lo=o(Zs,"CODE",{});var $f=s(Lo);od=c($f,"str"),$f.forEach(r),sd=c(Zs,") \u2014 The configured mixed precision mode."),Zs.forEach(r),nd=i(z),tt=o(z,"LI",{});var en=s(tt);No=o(en,"STRONG",{});var bf=s(No);cd=c(bf,"num_processes"),bf.forEach(r),ld=c(en," ("),Co=o(en,"CODE",{});var yf=s(Co);id=c(yf,"int"),yf.forEach(r),dd=c(en,") \u2014 The total number of processes used for training."),en.forEach(r),pd=i(z),rt=o(z,"LI",{});var tn=s(rt);qo=o(tn,"STRONG",{});var wf=s(qo);hd=c(wf,"optimizer_step_was_skipped"),wf.forEach(r),md=c(tn," ("),Uo=o(tn,"CODE",{});var Ef=s(Uo);ud=c(Ef,"bool"),Ef.forEach(r),fd=c(tn,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),tn.forEach(r),gd=i(z),at=o(z,"LI",{});var rn=s(at);Go=o(rn,"STRONG",{});var Af=s(Go);_d=c(Af,"process_index"),Af.forEach(r),vd=c(rn," ("),Vo=o(rn,"CODE",{});var kf=s(Vo);$d=c(kf,"int"),kf.forEach(r),bd=c(rn,") \u2014 The overall index of the current process among all processes."),rn.forEach(r),yd=i(z),ot=o(z,"LI",{});var an=s(ot);Ro=o(an,"STRONG",{});var xf=s(Ro);wd=c(xf,"state"),xf.forEach(r),Ed=c(an," ("),_a=o(an,"A",{href:!0});var jf=s(_a);Ad=c(jf,"AcceleratorState"),jf.forEach(r),kd=c(an,") \u2014 The distributed setup state."),an.forEach(r),xd=i(z),st=o(z,"LI",{});var on=s(st);Mo=o(on,"STRONG",{});var Pf=s(Mo);jd=c(Pf,"sync_gradients"),Pf.forEach(r),Pd=c(on," ("),Wo=o(on,"CODE",{});var Df=s(Wo);Dd=c(Df,"bool"),Df.forEach(r),Td=c(on,") \u2014 Whether the gradients are currently being synced across all processes."),on.forEach(r),zd=i(z),nt=o(z,"LI",{});var sn=s(nt);Ho=o(sn,"STRONG",{});var Tf=s(Ho);Sd=c(Tf,"use_distributed"),Tf.forEach(r),Od=c(sn," ("),Fo=o(sn,"CODE",{});var zf=s(Fo);Id=c(zf,"bool"),zf.forEach(r),Ld=c(sn,") \u2014 Whether the current configuration is for distributed training."),sn.forEach(r),z.forEach(r),Nd=i(g),F=o(g,"DIV",{class:!0});var ka=s(F);v(ir.$$.fragment,ka),Cd=i(ka),Yo=o(ka,"P",{});var Sf=s(Yo);qd=c(Sf,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),Sf.forEach(r),Ud=i(ka),v(ct.$$.fragment,ka),ka.forEach(r),Gd=i(g),lt=o(g,"DIV",{class:!0});var _c=s(lt);v(dr.$$.fragment,_c),Vd=i(_c),Bo=o(_c,"P",{});var Of=s(Bo);Rd=c(Of,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),Of.forEach(r),_c.forEach(r),Md=i(g),Y=o(g,"DIV",{class:!0});var xa=s(Y);v(pr.$$.fragment,xa),Wd=i(xa),$e=o(xa,"P",{});var ja=s($e);Hd=c(ja,"Scales the gradients in accordance to "),Ko=o(ja,"CODE",{});var If=s(Ko);Fd=c(If,"Accelerator.gradient_accumulation_steps"),If.forEach(r),Yd=c(ja,` and calls the correct
`),Qo=o(ja,"CODE",{});var Lf=s(Qo);Bd=c(Lf,"backward()"),Lf.forEach(r),Kd=c(ja," based on the configuration."),ja.forEach(r),Qd=i(xa),hr=o(xa,"P",{});var vc=s(hr);Xd=c(vc,"Should be used in lieu of "),Xo=o(vc,"CODE",{});var Nf=s(Xo);Jd=c(Nf,"loss.backward()"),Nf.forEach(r),Zd=c(vc,"."),vc.forEach(r),xa.forEach(r),ep=i(g),it=o(g,"DIV",{class:!0});var $c=s(it);v(mr.$$.fragment,$c),tp=i($c),ur=o($c,"P",{});var bc=s(ur);rp=c(bc,"Alias for "),Jo=o(bc,"CODE",{});var Cf=s(Jo);ap=c(Cf,"Accelerate.free_memory"),Cf.forEach(r),op=c(bc,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),bc.forEach(r),$c.forEach(r),sp=i(g),B=o(g,"DIV",{class:!0});var Pa=s(B);v(fr.$$.fragment,Pa),np=i(Pa),gr=o(Pa,"P",{});var yc=s(gr);cp=c(yc,"Should be used in place of "),Zo=o(yc,"CODE",{});var qf=s(Zo);lp=c(qf,"torch.nn.utils.clip_grad_norm_"),qf.forEach(r),ip=c(yc,"."),yc.forEach(r),dp=i(Pa),v(dt.$$.fragment,Pa),Pa.forEach(r),pp=i(g),K=o(g,"DIV",{class:!0});var Da=s(K);v(_r.$$.fragment,Da),hp=i(Da),vr=o(Da,"P",{});var wc=s(vr);mp=c(wc,"Should be used in place of "),es=o(wc,"CODE",{});var Uf=s(es);up=c(Uf,"torch.nn.utils.clip_grad_value_"),Uf.forEach(r),fp=c(wc,"."),wc.forEach(r),gp=i(Da),v(pt.$$.fragment,Da),Da.forEach(r),_p=i(g),ht=o(g,"DIV",{class:!0});var Ec=s(ht);v($r.$$.fragment,Ec),vp=i(Ec),ts=o(Ec,"P",{});var Gf=s(ts);$p=c(Gf,"Runs any special end training behaviors, such as stopping trackers on the main process only."),Gf.forEach(r),Ec.forEach(r),bp=i(g),mt=o(g,"DIV",{class:!0});var Ac=s(mt);v(br.$$.fragment,Ac),yp=i(Ac),rs=o(Ac,"P",{});var Vf=s(rs);wp=c(Vf,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Vf.forEach(r),Ac.forEach(r),Ep=i(g),Q=o(g,"DIV",{class:!0});var Ta=s(Q);v(yr.$$.fragment,Ta),Ap=i(Ta),wr=o(Ta,"P",{});var kc=s(wr);kp=c(kc,"Gather the values in "),as=o(kc,"EM",{});var Rf=s(as);xp=c(Rf,"tensor"),Rf.forEach(r),jp=c(kc,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),kc.forEach(r),Pp=i(Ta),os=o(Ta,"P",{});var Mf=s(os);Dp=c(Mf,`Note:
This gather happens in all processes.`),Mf.forEach(r),Ta.forEach(r),Tp=i(g),ut=o(g,"DIV",{class:!0});var xc=s(ut);v(Er.$$.fragment,xc),zp=i(xc),Ar=o(xc,"P",{});var jc=s(Ar);Sp=c(jc,"Gathers "),ss=o(jc,"CODE",{});var Wf=s(ss);Op=c(Wf,"tensor"),Wf.forEach(r),Ip=c(jc,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),jc.forEach(r),xc.forEach(r),Lp=i(g),ft=o(g,"DIV",{class:!0});var Pc=s(ft);v(kr.$$.fragment,Pc),Np=i(Pc),R=o(Pc,"P",{});var Ot=s(R);Cp=c(Ot,"Returns a "),ns=o(Ot,"CODE",{});var Hf=s(ns);qp=c(Hf,"tracker"),Hf.forEach(r),Up=c(Ot," from "),cs=o(Ot,"CODE",{});var Ff=s(cs);Gp=c(Ff,"self.trackers"),Ff.forEach(r),Vp=c(Ot," based on "),ls=o(Ot,"CODE",{});var Yf=s(ls);Rp=c(Yf,"name"),Yf.forEach(r),Mp=c(Ot," on the main process only."),Ot.forEach(r),Pc.forEach(r),Wp=i(g),gt=o(g,"DIV",{class:!0});var Dc=s(gt);v(xr.$$.fragment,Dc),Hp=i(Dc),jr=o(Dc,"P",{});var Tc=s(jr);Fp=c(Tc,"Initializes a run for all trackers stored in "),is=o(Tc,"CODE",{});var Bf=s(is);Yp=c(Bf,"self.log_with"),Bf.forEach(r),Bp=c(Tc,", potentially with starting configurations"),Tc.forEach(r),Dc.forEach(r),Kp=i(g),X=o(g,"DIV",{class:!0});var za=s(X);v(Pr.$$.fragment,za),Qp=i(za),ds=o(za,"P",{});var Kf=s(ds);Xp=c(Kf,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Kf.forEach(r),Jp=i(za),v(_t.$$.fragment,za),za.forEach(r),Zp=i(g),J=o(g,"DIV",{class:!0});var Sa=s(J);v(Dr.$$.fragment,Sa),eh=i(Sa),ps=o(Sa,"P",{});var Qf=s(ps);th=c(Qf,"Lets the local main process go inside a with block."),Qf.forEach(r),rh=i(Sa),hs=o(Sa,"P",{});var Xf=s(hs);ah=c(Xf,"The other processes will enter the with block after the main process exits."),Xf.forEach(r),Sa.forEach(r),oh=i(g),vt=o(g,"DIV",{class:!0});var zc=s(vt);v(Tr.$$.fragment,zc),sh=i(zc),be=o(zc,"P",{});var Oa=s(be);nh=c(Oa,"Logs "),ms=o(Oa,"CODE",{});var Jf=s(ms);ch=c(Jf,"values"),Jf.forEach(r),lh=c(Oa," to all stored trackers in "),us=o(Oa,"CODE",{});var Zf=s(us);ih=c(Zf,"self.trackers"),Zf.forEach(r),dh=c(Oa," on the main process only."),Oa.forEach(r),zc.forEach(r),ph=i(g),Z=o(g,"DIV",{class:!0});var Ia=s(Z);v(zr.$$.fragment,Ia),hh=i(Ia),fs=o(Ia,"P",{});var eg=s(fs);mh=c(eg,"Lets the main process go first inside a with block."),eg.forEach(r),uh=i(Ia),gs=o(Ia,"P",{});var tg=s(gs);fh=c(tg,"The other processes will enter the with block after the main process exits."),tg.forEach(r),Ia.forEach(r),gh=i(g),q=o(g,"DIV",{class:!0});var It=s(q);v(Sr.$$.fragment,It),_h=i(It),Or=o(It,"P",{});var Sc=s(Or);vh=c(Sc,`A context manager to disable gradient synchronizations across DDP processes by calling
`),_s=o(Sc,"CODE",{});var rg=s(_s);$h=c(rg,"torch.nn.parallel.DistributedDataParallel.no_sync"),rg.forEach(r),bh=c(Sc,"."),Sc.forEach(r),yh=i(It),Ir=o(It,"P",{});var Oc=s(Ir);wh=c(Oc,"If "),vs=o(Oc,"CODE",{});var ag=s(vs);Eh=c(ag,"model"),ag.forEach(r),Ah=c(Oc," is not in DDP, this context manager does nothing"),Oc.forEach(r),kh=i(It),v($t.$$.fragment,It),It.forEach(r),xh=i(g),bt=o(g,"DIV",{class:!0});var Ic=s(bt);v(Lr.$$.fragment,Ic),jh=i(Ic),$s=o(Ic,"P",{});var og=s($s);Ph=c(og,"A decorator that will run the decorated function on the local main process only."),og.forEach(r),Ic.forEach(r),Dh=i(g),yt=o(g,"DIV",{class:!0});var Lc=s(yt);v(Nr.$$.fragment,Lc),Th=i(Lc),bs=o(Lc,"P",{});var sg=s(bs);zh=c(sg,"A decorator that will run the decorated function on a given local process index only."),sg.forEach(r),Lc.forEach(r),Sh=i(g),wt=o(g,"DIV",{class:!0});var Nc=s(wt);v(Cr.$$.fragment,Nc),Oh=i(Nc),ys=o(Nc,"P",{});var ng=s(ys);Ih=c(ng,"A decorator that will run the decorated function on the main process only."),ng.forEach(r),Nc.forEach(r),Lh=i(g),Et=o(g,"DIV",{class:!0});var Cc=s(Et);v(qr.$$.fragment,Cc),Nh=i(Cc),ws=o(Cc,"P",{});var cg=s(ws);Ch=c(cg,"A decorator that will run the decorated function on a given process index only."),cg.forEach(r),Cc.forEach(r),qh=i(g),At=o(g,"DIV",{class:!0});var qc=s(At);v(Ur.$$.fragment,qc),Uh=i(qc),Es=o(qc,"P",{});var lg=s(Es);Gh=c(lg,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),lg.forEach(r),qc.forEach(r),Vh=i(g),U=o(g,"DIV",{class:!0});var Lt=s(U);v(Gr.$$.fragment,Lt),Rh=i(Lt),Vr=o(Lt,"P",{});var Uc=s(Vr);Mh=c(Uc,"Prepare all objects passed in "),As=o(Uc,"CODE",{});var ig=s(As);Wh=c(ig,"args"),ig.forEach(r),Hh=c(Uc,` for distributed training and mixed precision, then return them in the same
order.`),Uc.forEach(r),Fh=i(Lt),ks=o(Lt,"P",{});var dg=s(ks);Yh=c(dg,"Accepts the following type of objects:"),dg.forEach(r),Bh=i(Lt),ye=o(Lt,"UL",{});var La=s(ye);va=o(La,"LI",{});var Jm=s(va);xs=o(Jm,"CODE",{});var pg=s(xs);Kh=c(pg,"torch.utils.data.DataLoader"),pg.forEach(r),Qh=c(Jm,": PyTorch Dataloader"),Jm.forEach(r),Xh=i(La),$a=o(La,"LI",{});var Zm=s($a);js=o(Zm,"CODE",{});var hg=s(js);Jh=c(hg,"torch.nn.Module"),hg.forEach(r),Zh=c(Zm,": PyTorch Module"),Zm.forEach(r),em=i(La),ba=o(La,"LI",{});var eu=s(ba);Ps=o(eu,"CODE",{});var mg=s(Ps);tm=c(mg,"torch.optim.Optimizer"),mg.forEach(r),rm=c(eu,": PyTorch Optimizer"),eu.forEach(r),La.forEach(r),Lt.forEach(r),am=i(g),kt=o(g,"DIV",{class:!0});var Gc=s(kt);v(Rr.$$.fragment,Gc),om=i(Gc),Mr=o(Gc,"P",{});var Vc=s(Mr);sm=c(Vc,"Use in replacement of "),Ds=o(Vc,"CODE",{});var ug=s(Ds);nm=c(ug,"print()"),ug.forEach(r),cm=c(Vc," to only print once per server."),Vc.forEach(r),Gc.forEach(r),lm=i(g),ee=o(g,"DIV",{class:!0});var Na=s(ee);v(Wr.$$.fragment,Na),im=i(Na),we=o(Na,"P",{});var Ca=s(we);dm=c(Ca,"Reduce the values in "),Ts=o(Ca,"EM",{});var fg=s(Ts);pm=c(fg,"tensor"),fg.forEach(r),hm=c(Ca," across all processes based on "),zs=o(Ca,"EM",{});var gg=s(zs);mm=c(gg,"reduction"),gg.forEach(r),um=c(Ca,"."),Ca.forEach(r),fm=i(Na),Ss=o(Na,"P",{});var _g=s(Ss);gm=c(_g,`Note:
All processes get the reduced value.`),_g.forEach(r),Na.forEach(r),_m=i(g),G=o(g,"DIV",{class:!0});var Nt=s(G);v(Hr.$$.fragment,Nt),vm=i(Nt),M=o(Nt,"P",{});var Ct=s(M);$m=c(Ct,"Makes note of "),Os=o(Ct,"CODE",{});var vg=s(Os);bm=c(vg,"objects"),vg.forEach(r),ym=c(Ct," and will save or load them in during "),Is=o(Ct,"CODE",{});var $g=s(Is);wm=c($g,"save_state"),$g.forEach(r),Em=c(Ct," or "),Ls=o(Ct,"CODE",{});var bg=s(Ls);Am=c(bg,"load_state"),bg.forEach(r),km=c(Ct,"."),Ct.forEach(r),xm=i(Nt),Ns=o(Nt,"P",{});var yg=s(Ns);jm=c(yg,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),yg.forEach(r),Pm=i(Nt),v(xt.$$.fragment,Nt),Nt.forEach(r),Dm=i(g),jt=o(g,"DIV",{class:!0});var Rc=s(jt);v(Fr.$$.fragment,Rc),Tm=i(Rc),Yr=o(Rc,"P",{});var Mc=s(Yr);zm=c(Mc,"Save the object passed to disk once per machine. Use in place of "),Cs=o(Mc,"CODE",{});var wg=s(Cs);Sm=c(wg,"torch.save"),wg.forEach(r),Om=c(Mc,"."),Mc.forEach(r),Rc.forEach(r),Im=i(g),te=o(g,"DIV",{class:!0});var qa=s(te);v(Br.$$.fragment,qa),Lm=i(qa),qs=o(qa,"P",{});var Eg=s(qs);Nm=c(Eg,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Eg.forEach(r),Cm=i(qa),v(Pt.$$.fragment,qa),qa.forEach(r),qm=i(g),Dt=o(g,"DIV",{class:!0});var Wc=s(Dt);v(Kr.$$.fragment,Wc),Um=i(Wc),Us=o(Wc,"P",{});var Ag=s(Us);Gm=c(Ag,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),Ag.forEach(r),Wc.forEach(r),Vm=i(g),Tt=o(g,"DIV",{class:!0});var Hc=s(Tt);v(Qr.$$.fragment,Hc),Rm=i(Hc),Ee=o(Hc,"P",{});var Ua=s(Ee);Mm=c(Ua,"Unwraps the "),Gs=o(Ua,"CODE",{});var kg=s(Gs);Wm=c(kg,"model"),kg.forEach(r),Hm=c(Ua," from the additional layer possible added by "),ya=o(Ua,"A",{href:!0});var xg=s(ya);Fm=c(xg,"prepare()"),xg.forEach(r),Ym=c(Ua,`. Useful before saving
the model.`),Ua.forEach(r),Hc.forEach(r),Bm=i(g),zt=o(g,"DIV",{class:!0});var Fc=s(zt);v(Xr.$$.fragment,Fc),Km=i(Fc),Vs=o(Fc,"P",{});var jg=s(Vs);Qm=c(jg,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),jg.forEach(r),Fc.forEach(r),g.forEach(r),this.h()},h(){p(u,"name","hf:doc:metadata"),p(u,"content",JSON.stringify(Mg)),p(E,"id","accelerator"),p(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(E,"href","#accelerator"),p(A,"class","relative group"),p(S,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),p(xe,"id","quick-adaptation-of-your-code"),p(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(xe,"href","#quick-adaptation-of-your-code"),p(oe,"class","relative group"),p(oa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator"),p(sa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),p(ca,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.gather"),p(ne,"start","4"),p(ze,"id","advanced-recommendations"),p(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ze,"href","#advanced-recommendations"),p(ce,"class","relative group"),p(Se,"id","printing"),p(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Se,"href","#printing"),p(le,"class","relative group"),p(la,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.print"),p(Oe,"id","executing-processes"),p(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Oe,"href","#executing-processes"),p(de,"class","relative group"),p(Ie,"id","once-on-a-single-server"),p(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ie,"href","#once-on-a-single-server"),p(pe,"class","relative group"),p(ia,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),p(Ce,"id","only-ever-once-across-all-servers"),p(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ce,"href","#only-ever-once-across-all-servers"),p(he,"class","relative group"),p(da,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),p(Ge,"id","on-specific-processes"),p(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ge,"href","#on-specific-processes"),p(me,"class","relative group"),p(Ve,"id","synchronicity-control"),p(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ve,"href","#synchronicity-control"),p(ue,"class","relative group"),p(ha,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),p(Me,"id","saving-and-loading"),p(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Me,"href","#saving-and-loading"),p(fe,"class","relative group"),p(ma,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),p(ua,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.save"),p(He,"id","operations"),p(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(He,"href","#operations"),p(ge,"class","relative group"),p(Fe,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),p(Ye,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),p(Be,"id","gradient-accumulation"),p(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Be,"href","#gradient-accumulation"),p(_e,"class","relative group"),p(fa,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),p(Qe,"id","accelerate.Accelerator"),p(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Qe,"href","#accelerate.Accelerator"),p(ve,"class","relative group"),p(ga,"href","/docs/accelerate/main/en/package_reference/utilities#accelerate.DistributedType"),p(_a,"href","/docs/accelerate/main/en/package_reference/state#accelerate.state.AcceleratorState"),p(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ya,"href","/docs/accelerate/main/en/package_reference/accelerator#accelerate.Accelerator.prepare"),p(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,d){e(document.head,u),h(t,x,d),h(t,A,d),e(A,E),e(E,j),$(m,j,null),e(A,k),e(A,N),e(N,re),h(t,ke,d),h(t,C,d),e(C,ae),e(C,S),e(S,ta),e(C,ra),h(t,qt,d),h(t,oe,d),e(oe,xe),e(xe,Ga),$(Ut,Ga,null),e(oe,Kc),e(oe,Va),e(Va,Qc),h(t,cn,d),h(t,aa,d),e(aa,Xc),h(t,ln,d),h(t,W,d),e(W,se),e(se,Jc),e(se,oa),e(oa,Zc),e(se,el),e(se,Ra),e(Ra,tl),e(se,rl),e(W,al),e(W,Gt),e(Gt,ol),e(Gt,sa),e(sa,sl),e(Gt,nl),e(W,cl),e(W,V),e(V,ll),e(V,Ma),e(Ma,il),e(V,dl),e(V,Wa),e(Wa,pl),e(V,hl),e(V,Ha),e(Ha,ml),e(V,ul),h(t,dn,d),$(je,t,d),h(t,pn,d),h(t,ne,d),e(ne,Pe),e(Pe,fl),e(Pe,Fa),e(Fa,gl),e(Pe,_l),e(Pe,Ya),e(Ya,vl),e(ne,$l),e(ne,na),e(na,bl),e(na,ca),e(ca,yl),h(t,hn,d),$(De,t,d),h(t,mn,d),h(t,Te,d),e(Te,wl),e(Te,Ba),e(Ba,El),e(Te,Al),h(t,un,d),h(t,ce,d),e(ce,ze),e(ze,Ka),$(Vt,Ka,null),e(ce,kl),e(ce,Qa),e(Qa,xl),h(t,fn,d),h(t,le,d),e(le,Se),e(Se,Xa),$(Rt,Xa,null),e(le,jl),e(le,Ja),e(Ja,Pl),h(t,gn,d),h(t,ie,d),e(ie,Za),e(Za,Dl),e(ie,Tl),e(ie,la),e(la,zl),e(ie,Sl),h(t,_n,d),$(Mt,t,d),h(t,vn,d),h(t,de,d),e(de,Oe),e(Oe,eo),$(Wt,eo,null),e(de,Ol),e(de,to),e(to,Il),h(t,$n,d),h(t,pe,d),e(pe,Ie),e(Ie,ro),$(Ht,ro,null),e(pe,Ll),e(pe,ao),e(ao,Nl),h(t,bn,d),h(t,Le,d),e(Le,Cl),e(Le,oo),e(oo,ql),e(Le,Ul),h(t,yn,d),$(Ft,t,d),h(t,wn,d),h(t,Ne,d),e(Ne,Gl),e(Ne,ia),e(ia,Vl),e(Ne,Rl),h(t,En,d),$(Yt,t,d),h(t,An,d),h(t,he,d),e(he,Ce),e(Ce,so),$(Bt,so,null),e(he,Ml),e(he,no),e(no,Wl),h(t,kn,d),h(t,qe,d),e(qe,Hl),e(qe,co),e(co,Fl),e(qe,Yl),h(t,xn,d),$(Kt,t,d),h(t,jn,d),h(t,Ue,d),e(Ue,Bl),e(Ue,da),e(da,Kl),e(Ue,Ql),h(t,Pn,d),$(Qt,t,d),h(t,Dn,d),h(t,me,d),e(me,Ge),e(Ge,lo),$(Xt,lo,null),e(me,Xl),e(me,io),e(io,Jl),h(t,Tn,d),h(t,pa,d),e(pa,Zl),h(t,zn,d),$(Jt,t,d),h(t,Sn,d),$(Zt,t,d),h(t,On,d),h(t,ue,d),e(ue,Ve),e(Ve,po),$(er,po,null),e(ue,ei),e(ue,ho),e(ho,ti),h(t,In,d),h(t,Re,d),e(Re,ri),e(Re,ha),e(ha,ai),e(Re,oi),h(t,Ln,d),h(t,fe,d),e(fe,Me),e(Me,mo),$(tr,mo,null),e(fe,si),e(fe,uo),e(uo,ni),h(t,Nn,d),h(t,We,d),e(We,ci),e(We,ma),e(ma,li),e(We,ii),h(t,Cn,d),$(rr,t,d),h(t,qn,d),h(t,H,d),e(H,di),e(H,ua),e(ua,pi),e(H,hi),e(H,fo),e(fo,mi),e(H,ui),h(t,Un,d),$(ar,t,d),h(t,Gn,d),h(t,ge,d),e(ge,He),e(He,go),$(or,go,null),e(ge,fi),e(ge,_o),e(_o,gi),h(t,Vn,d),h(t,I,d),e(I,_i),e(I,Fe),e(Fe,vi),e(Fe,vo),e(vo,$i),e(Fe,bi),e(I,yi),e(I,$o),e($o,wi),e(I,Ei),e(I,Ye),e(Ye,Ai),e(Ye,bo),e(bo,ki),e(Ye,xi),e(I,ji),e(I,yo),e(yo,Pi),h(t,Rn,d),h(t,_e,d),e(_e,Be),e(Be,wo),$(sr,wo,null),e(_e,Di),e(_e,Eo),e(Eo,Ti),h(t,Mn,d),h(t,Ke,d),e(Ke,zi),e(Ke,fa),e(fa,Si),e(Ke,Oi),h(t,Wn,d),$(nr,t,d),h(t,Hn,d),h(t,ve,d),e(ve,Qe),e(Qe,Ao),$(cr,Ao,null),e(ve,Ii),e(ve,ko),e(ko,Li),h(t,Fn,d),h(t,f,d),$(lr,f,null),e(f,Ni),e(f,xo),e(xo,Ci),e(f,qi),e(f,jo),e(jo,Po),e(Po,Ui),e(f,Gi),e(f,D),e(D,Xe),e(Xe,Do),e(Do,Vi),e(Xe,Ri),e(Xe,To),e(To,Mi),e(Xe,Wi),e(D,Hi),e(D,Je),e(Je,zo),e(zo,Fi),e(Je,Yi),e(Je,ga),e(ga,Bi),e(Je,Ki),e(D,Qi),e(D,Ze),e(Ze,So),e(So,Xi),e(Ze,Ji),e(Ze,Oo),e(Oo,Zi),e(Ze,ed),e(D,td),e(D,et),e(et,Io),e(Io,rd),e(et,ad),e(et,Lo),e(Lo,od),e(et,sd),e(D,nd),e(D,tt),e(tt,No),e(No,cd),e(tt,ld),e(tt,Co),e(Co,id),e(tt,dd),e(D,pd),e(D,rt),e(rt,qo),e(qo,hd),e(rt,md),e(rt,Uo),e(Uo,ud),e(rt,fd),e(D,gd),e(D,at),e(at,Go),e(Go,_d),e(at,vd),e(at,Vo),e(Vo,$d),e(at,bd),e(D,yd),e(D,ot),e(ot,Ro),e(Ro,wd),e(ot,Ed),e(ot,_a),e(_a,Ad),e(ot,kd),e(D,xd),e(D,st),e(st,Mo),e(Mo,jd),e(st,Pd),e(st,Wo),e(Wo,Dd),e(st,Td),e(D,zd),e(D,nt),e(nt,Ho),e(Ho,Sd),e(nt,Od),e(nt,Fo),e(Fo,Id),e(nt,Ld),e(f,Nd),e(f,F),$(ir,F,null),e(F,Cd),e(F,Yo),e(Yo,qd),e(F,Ud),$(ct,F,null),e(f,Gd),e(f,lt),$(dr,lt,null),e(lt,Vd),e(lt,Bo),e(Bo,Rd),e(f,Md),e(f,Y),$(pr,Y,null),e(Y,Wd),e(Y,$e),e($e,Hd),e($e,Ko),e(Ko,Fd),e($e,Yd),e($e,Qo),e(Qo,Bd),e($e,Kd),e(Y,Qd),e(Y,hr),e(hr,Xd),e(hr,Xo),e(Xo,Jd),e(hr,Zd),e(f,ep),e(f,it),$(mr,it,null),e(it,tp),e(it,ur),e(ur,rp),e(ur,Jo),e(Jo,ap),e(ur,op),e(f,sp),e(f,B),$(fr,B,null),e(B,np),e(B,gr),e(gr,cp),e(gr,Zo),e(Zo,lp),e(gr,ip),e(B,dp),$(dt,B,null),e(f,pp),e(f,K),$(_r,K,null),e(K,hp),e(K,vr),e(vr,mp),e(vr,es),e(es,up),e(vr,fp),e(K,gp),$(pt,K,null),e(f,_p),e(f,ht),$($r,ht,null),e(ht,vp),e(ht,ts),e(ts,$p),e(f,bp),e(f,mt),$(br,mt,null),e(mt,yp),e(mt,rs),e(rs,wp),e(f,Ep),e(f,Q),$(yr,Q,null),e(Q,Ap),e(Q,wr),e(wr,kp),e(wr,as),e(as,xp),e(wr,jp),e(Q,Pp),e(Q,os),e(os,Dp),e(f,Tp),e(f,ut),$(Er,ut,null),e(ut,zp),e(ut,Ar),e(Ar,Sp),e(Ar,ss),e(ss,Op),e(Ar,Ip),e(f,Lp),e(f,ft),$(kr,ft,null),e(ft,Np),e(ft,R),e(R,Cp),e(R,ns),e(ns,qp),e(R,Up),e(R,cs),e(cs,Gp),e(R,Vp),e(R,ls),e(ls,Rp),e(R,Mp),e(f,Wp),e(f,gt),$(xr,gt,null),e(gt,Hp),e(gt,jr),e(jr,Fp),e(jr,is),e(is,Yp),e(jr,Bp),e(f,Kp),e(f,X),$(Pr,X,null),e(X,Qp),e(X,ds),e(ds,Xp),e(X,Jp),$(_t,X,null),e(f,Zp),e(f,J),$(Dr,J,null),e(J,eh),e(J,ps),e(ps,th),e(J,rh),e(J,hs),e(hs,ah),e(f,oh),e(f,vt),$(Tr,vt,null),e(vt,sh),e(vt,be),e(be,nh),e(be,ms),e(ms,ch),e(be,lh),e(be,us),e(us,ih),e(be,dh),e(f,ph),e(f,Z),$(zr,Z,null),e(Z,hh),e(Z,fs),e(fs,mh),e(Z,uh),e(Z,gs),e(gs,fh),e(f,gh),e(f,q),$(Sr,q,null),e(q,_h),e(q,Or),e(Or,vh),e(Or,_s),e(_s,$h),e(Or,bh),e(q,yh),e(q,Ir),e(Ir,wh),e(Ir,vs),e(vs,Eh),e(Ir,Ah),e(q,kh),$($t,q,null),e(f,xh),e(f,bt),$(Lr,bt,null),e(bt,jh),e(bt,$s),e($s,Ph),e(f,Dh),e(f,yt),$(Nr,yt,null),e(yt,Th),e(yt,bs),e(bs,zh),e(f,Sh),e(f,wt),$(Cr,wt,null),e(wt,Oh),e(wt,ys),e(ys,Ih),e(f,Lh),e(f,Et),$(qr,Et,null),e(Et,Nh),e(Et,ws),e(ws,Ch),e(f,qh),e(f,At),$(Ur,At,null),e(At,Uh),e(At,Es),e(Es,Gh),e(f,Vh),e(f,U),$(Gr,U,null),e(U,Rh),e(U,Vr),e(Vr,Mh),e(Vr,As),e(As,Wh),e(Vr,Hh),e(U,Fh),e(U,ks),e(ks,Yh),e(U,Bh),e(U,ye),e(ye,va),e(va,xs),e(xs,Kh),e(va,Qh),e(ye,Xh),e(ye,$a),e($a,js),e(js,Jh),e($a,Zh),e(ye,em),e(ye,ba),e(ba,Ps),e(Ps,tm),e(ba,rm),e(f,am),e(f,kt),$(Rr,kt,null),e(kt,om),e(kt,Mr),e(Mr,sm),e(Mr,Ds),e(Ds,nm),e(Mr,cm),e(f,lm),e(f,ee),$(Wr,ee,null),e(ee,im),e(ee,we),e(we,dm),e(we,Ts),e(Ts,pm),e(we,hm),e(we,zs),e(zs,mm),e(we,um),e(ee,fm),e(ee,Ss),e(Ss,gm),e(f,_m),e(f,G),$(Hr,G,null),e(G,vm),e(G,M),e(M,$m),e(M,Os),e(Os,bm),e(M,ym),e(M,Is),e(Is,wm),e(M,Em),e(M,Ls),e(Ls,Am),e(M,km),e(G,xm),e(G,Ns),e(Ns,jm),e(G,Pm),$(xt,G,null),e(f,Dm),e(f,jt),$(Fr,jt,null),e(jt,Tm),e(jt,Yr),e(Yr,zm),e(Yr,Cs),e(Cs,Sm),e(Yr,Om),e(f,Im),e(f,te),$(Br,te,null),e(te,Lm),e(te,qs),e(qs,Nm),e(te,Cm),$(Pt,te,null),e(f,qm),e(f,Dt),$(Kr,Dt,null),e(Dt,Um),e(Dt,Us),e(Us,Gm),e(f,Vm),e(f,Tt),$(Qr,Tt,null),e(Tt,Rm),e(Tt,Ee),e(Ee,Mm),e(Ee,Gs),e(Gs,Wm),e(Ee,Hm),e(Ee,ya),e(ya,Fm),e(Ee,Ym),e(f,Bm),e(f,zt),$(Xr,zt,null),e(zt,Km),e(zt,Vs),e(Vs,Qm),Yn=!0},p(t,[d]){const Jr={};d&2&&(Jr.$$scope={dirty:d,ctx:t}),je.$set(Jr);const Rs={};d&2&&(Rs.$$scope={dirty:d,ctx:t}),De.$set(Rs);const Ms={};d&2&&(Ms.$$scope={dirty:d,ctx:t}),ct.$set(Ms);const Ws={};d&2&&(Ws.$$scope={dirty:d,ctx:t}),dt.$set(Ws);const Zr={};d&2&&(Zr.$$scope={dirty:d,ctx:t}),pt.$set(Zr);const Hs={};d&2&&(Hs.$$scope={dirty:d,ctx:t}),_t.$set(Hs);const ea={};d&2&&(ea.$$scope={dirty:d,ctx:t}),$t.$set(ea);const Fs={};d&2&&(Fs.$$scope={dirty:d,ctx:t}),xt.$set(Fs);const Ys={};d&2&&(Ys.$$scope={dirty:d,ctx:t}),Pt.$set(Ys)},i(t){Yn||(b(m.$$.fragment,t),b(Ut.$$.fragment,t),b(je.$$.fragment,t),b(De.$$.fragment,t),b(Vt.$$.fragment,t),b(Rt.$$.fragment,t),b(Mt.$$.fragment,t),b(Wt.$$.fragment,t),b(Ht.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Bt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(ar.$$.fragment,t),b(or.$$.fragment,t),b(sr.$$.fragment,t),b(nr.$$.fragment,t),b(cr.$$.fragment,t),b(lr.$$.fragment,t),b(ir.$$.fragment,t),b(ct.$$.fragment,t),b(dr.$$.fragment,t),b(pr.$$.fragment,t),b(mr.$$.fragment,t),b(fr.$$.fragment,t),b(dt.$$.fragment,t),b(_r.$$.fragment,t),b(pt.$$.fragment,t),b($r.$$.fragment,t),b(br.$$.fragment,t),b(yr.$$.fragment,t),b(Er.$$.fragment,t),b(kr.$$.fragment,t),b(xr.$$.fragment,t),b(Pr.$$.fragment,t),b(_t.$$.fragment,t),b(Dr.$$.fragment,t),b(Tr.$$.fragment,t),b(zr.$$.fragment,t),b(Sr.$$.fragment,t),b($t.$$.fragment,t),b(Lr.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(qr.$$.fragment,t),b(Ur.$$.fragment,t),b(Gr.$$.fragment,t),b(Rr.$$.fragment,t),b(Wr.$$.fragment,t),b(Hr.$$.fragment,t),b(xt.$$.fragment,t),b(Fr.$$.fragment,t),b(Br.$$.fragment,t),b(Pt.$$.fragment,t),b(Kr.$$.fragment,t),b(Qr.$$.fragment,t),b(Xr.$$.fragment,t),Yn=!0)},o(t){y(m.$$.fragment,t),y(Ut.$$.fragment,t),y(je.$$.fragment,t),y(De.$$.fragment,t),y(Vt.$$.fragment,t),y(Rt.$$.fragment,t),y(Mt.$$.fragment,t),y(Wt.$$.fragment,t),y(Ht.$$.fragment,t),y(Ft.$$.fragment,t),y(Yt.$$.fragment,t),y(Bt.$$.fragment,t),y(Kt.$$.fragment,t),y(Qt.$$.fragment,t),y(Xt.$$.fragment,t),y(Jt.$$.fragment,t),y(Zt.$$.fragment,t),y(er.$$.fragment,t),y(tr.$$.fragment,t),y(rr.$$.fragment,t),y(ar.$$.fragment,t),y(or.$$.fragment,t),y(sr.$$.fragment,t),y(nr.$$.fragment,t),y(cr.$$.fragment,t),y(lr.$$.fragment,t),y(ir.$$.fragment,t),y(ct.$$.fragment,t),y(dr.$$.fragment,t),y(pr.$$.fragment,t),y(mr.$$.fragment,t),y(fr.$$.fragment,t),y(dt.$$.fragment,t),y(_r.$$.fragment,t),y(pt.$$.fragment,t),y($r.$$.fragment,t),y(br.$$.fragment,t),y(yr.$$.fragment,t),y(Er.$$.fragment,t),y(kr.$$.fragment,t),y(xr.$$.fragment,t),y(Pr.$$.fragment,t),y(_t.$$.fragment,t),y(Dr.$$.fragment,t),y(Tr.$$.fragment,t),y(zr.$$.fragment,t),y(Sr.$$.fragment,t),y($t.$$.fragment,t),y(Lr.$$.fragment,t),y(Nr.$$.fragment,t),y(Cr.$$.fragment,t),y(qr.$$.fragment,t),y(Ur.$$.fragment,t),y(Gr.$$.fragment,t),y(Rr.$$.fragment,t),y(Wr.$$.fragment,t),y(Hr.$$.fragment,t),y(xt.$$.fragment,t),y(Fr.$$.fragment,t),y(Br.$$.fragment,t),y(Pt.$$.fragment,t),y(Kr.$$.fragment,t),y(Qr.$$.fragment,t),y(Xr.$$.fragment,t),Yn=!1},d(t){r(u),t&&r(x),t&&r(A),w(m),t&&r(ke),t&&r(C),t&&r(qt),t&&r(oe),w(Ut),t&&r(cn),t&&r(aa),t&&r(ln),t&&r(W),t&&r(dn),w(je,t),t&&r(pn),t&&r(ne),t&&r(hn),w(De,t),t&&r(mn),t&&r(Te),t&&r(un),t&&r(ce),w(Vt),t&&r(fn),t&&r(le),w(Rt),t&&r(gn),t&&r(ie),t&&r(_n),w(Mt,t),t&&r(vn),t&&r(de),w(Wt),t&&r($n),t&&r(pe),w(Ht),t&&r(bn),t&&r(Le),t&&r(yn),w(Ft,t),t&&r(wn),t&&r(Ne),t&&r(En),w(Yt,t),t&&r(An),t&&r(he),w(Bt),t&&r(kn),t&&r(qe),t&&r(xn),w(Kt,t),t&&r(jn),t&&r(Ue),t&&r(Pn),w(Qt,t),t&&r(Dn),t&&r(me),w(Xt),t&&r(Tn),t&&r(pa),t&&r(zn),w(Jt,t),t&&r(Sn),w(Zt,t),t&&r(On),t&&r(ue),w(er),t&&r(In),t&&r(Re),t&&r(Ln),t&&r(fe),w(tr),t&&r(Nn),t&&r(We),t&&r(Cn),w(rr,t),t&&r(qn),t&&r(H),t&&r(Un),w(ar,t),t&&r(Gn),t&&r(ge),w(or),t&&r(Vn),t&&r(I),t&&r(Rn),t&&r(_e),w(sr),t&&r(Mn),t&&r(Ke),t&&r(Wn),w(nr,t),t&&r(Hn),t&&r(ve),w(cr),t&&r(Fn),t&&r(f),w(lr),w(ir),w(ct),w(dr),w(pr),w(mr),w(fr),w(dt),w(_r),w(pt),w($r),w(br),w(yr),w(Er),w(kr),w(xr),w(Pr),w(_t),w(Dr),w(Tr),w(zr),w(Sr),w($t),w(Lr),w(Nr),w(Cr),w(qr),w(Ur),w(Gr),w(Rr),w(Wr),w(Hr),w(xt),w(Fr),w(Br),w(Pt),w(Kr),w(Qr),w(Xr)}}}const Mg={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function Wg(T){return Sg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Xg extends Pg{constructor(u){super();Dg(this,u,Wg,Rg,Tg,{})}}export{Xg as default,Mg as metadata};
