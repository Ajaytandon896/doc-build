import{S as Js,i as Ks,s as Qs,e as n,k as i,w as u,t as r,M as Xs,c as s,d as a,m as d,a as l,x as h,h as o,b as m,G as t,g as p,y as g,L as Ys,q as f,o as _,B as v,v as Zs}from"../chunks/vendor-hf-doc-builder.js";import{D as E}from"../chunks/Docstring-hf-doc-builder.js";import{C as M}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as dr}from"../chunks/IconCopyLink-hf-doc-builder.js";function el(Un){let P,ta,O,V,it,se,pr,dt,mr,aa,le,ur,Je,hr,ra,I,G,pt,ce,gr,mt,fr,oa,R,_r,ut,vr,yr,na,k,ie,kr,q,br,ht,$r,wr,gt,Er,Tr,Ar,U,de,xr,pe,jr,ft,Cr,Dr,Lr,H,me,Pr,ue,Or,_t,Ir,qr,Sr,F,he,Br,ge,zr,vt,Nr,Wr,sa,b,fe,Mr,S,Vr,yt,Gr,Rr,kt,Ur,Hr,Fr,J,_e,Jr,ve,Kr,bt,Qr,Xr,Yr,K,ye,Zr,ke,eo,$t,to,ao,ro,Q,be,oo,$e,no,wt,so,lo,la,y,we,co,B,io,Et,po,mo,Tt,uo,ho,go,At,fo,_o,X,Ee,vo,Te,yo,xt,ko,bo,$o,Y,Ae,wo,xe,Eo,jt,To,Ao,xo,Z,je,jo,Ce,Co,Ct,Do,Lo,ca,T,Po,Dt,Oo,Io,Lt,qo,So,ia,De,da,ee,Bo,Ke,zo,No,pa,Le,ma,A,Wo,Qe,Mo,Vo,Pt,Go,Ro,ua,Pe,ha,te,Uo,Xe,Ho,Fo,ga,Oe,fa,Ye,Jo,_a,Ie,va,z,ae,Ot,qe,Ko,It,Qo,ya,x,Xo,qt,Yo,Zo,St,en,tn,ka,j,Se,Bt,an,rn,Be,ze,on,zt,nn,sn,ln,Ne,cn,Nt,dn,pn,mn,We,Wt,un,hn,Mt,Me,gn,Vt,fn,_n,vn,Ve,Gt,yn,kn,Rt,N,bn,Ut,$n,wn,Ht,En,Tn,ba,Ze,An,$a,Ge,wa,$,xn,Ft,jn,Cn,Jt,Dn,Ln,Kt,Pn,On,Ea,Re,Ta,re,In,Qt,qn,Sn,Aa,Ue,xa,W,oe,Xt,He,Bn,Yt,zn,ja,C,Nn,Zt,Wn,Mn,ea,Vn,Gn,Ca,Fe,Da;return se=new dr({}),ce=new dr({}),ie=new E({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.
kwargs &#x2014;
Additional key word arguments passed along to the <code>tensorboard.SummaryWriter.__init__</code> method.`,name:"logging_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L107"}}),de=new E({props:{name:"finish",anchor:"accelerate.tracking.TensorBoardTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L169"}}),me=new E({props:{name:"log",anchor:"accelerate.tracking.TensorBoardTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.TensorBoardTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.
kwargs &#x2014;
Additional key word arguments passed along to either <code>SummaryWriter.add_scaler</code>,
<code>SummaryWriter.add_text</code>, or <code>SummaryWriter.add_scalers</code> method based on the contents of <code>values</code>.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L145"}}),he=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L132"}}),fe=new E({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.
kwargs &#x2014;
Additional key word arguments passed along to the <code>wandb.init</code> method.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L177"}}),_e=new E({props:{name:"finish",anchor:"accelerate.tracking.WandBTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L227"}}),ye=new E({props:{name:"log",anchor:"accelerate.tracking.WandBTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.WandBTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.
kwargs &#x2014;
Additional key word arguments passed along to the <code>wandb.log</code> method.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L211"}}),be=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.WandBTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L199"}}),we=new E({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.
kwargs &#x2014;
Additional key word arguments passed along to the <code>Experiment.__init__</code> method.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L235"}}),Ee=new E({props:{name:"finish",anchor:"accelerate.tracking.CometMLTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L296"}}),Ae=new E({props:{name:"log",anchor:"accelerate.tracking.CometMLTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.CometMLTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.
kwargs &#x2014;
Additional key word arguments passed along to either <code>Experiment.log_metric</code>, <code>Experiment.log_other</code>,
or <code>Experiment.log_metrics</code> method based on the contents of <code>values</code>.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L271"}}),je=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.CometMLTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L259"}}),De=new M({props:{code:`from accelerate import Accelerator
from accelerate.utils import LoggerType

accelerator = Accelerator(log_with="all")  # For all available trackers in the environment
accelerator = Accelerator(log_with="wandb")
accelerator = Accelerator(log_with=["wandb", LoggerType.TENSORBOARD])`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator
<span class="hljs-keyword">from</span> accelerate.utils <span class="hljs-keyword">import</span> LoggerType

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)  <span class="hljs-comment"># For all available trackers in the environment</span>
accelerator = Accelerator(log_with=<span class="hljs-string">&quot;wandb&quot;</span>)
accelerator = Accelerator(log_with=[<span class="hljs-string">&quot;wandb&quot;</span>, LoggerType.TENSORBOARD])`}}),Le=new M({props:{code:`hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)`,highlighted:`hps = {<span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>}
accelerator.init_trackers(<span class="hljs-string">&quot;my_project&quot;</span>, config=hps)`}}),Pe=new M({props:{code:'accelerator.log({"train_loss": 1.12, "valid_loss": 0.8}, step=1)',highlighted:'accelerator.log({<span class="hljs-string">&quot;train_loss&quot;</span>: <span class="hljs-number">1.12</span>, <span class="hljs-string">&quot;valid_loss&quot;</span>: <span class="hljs-number">0.8</span>}, step=<span class="hljs-number">1</span>)'}}),Oe=new M({props:{code:"accelerator.end_training()",highlighted:"accelerator.end_training()"}}),Ie=new M({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(log_with="all")
config = {
    "num_iterations": 5,
    "learning_rate": 1e-2,
    "loss_function": str(my_loss_function),
}

accelerator.init_trackers("example_project", config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for step, batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({"training_loss": loss}, step=step)
accelerator.end_training()`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)
config = {
    <span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>,
    <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>,
    <span class="hljs-string">&quot;loss_function&quot;</span>: <span class="hljs-built_in">str</span>(my_loss_function),
}

accelerator.init_trackers(<span class="hljs-string">&quot;example_project&quot;</span>, config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

<span class="hljs-keyword">for</span> iteration <span class="hljs-keyword">in</span> config[<span class="hljs-string">&quot;num_iterations&quot;</span>]:
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({<span class="hljs-string">&quot;training_loss&quot;</span>: loss}, step=step)
accelerator.end_training()`}}),qe=new dr({}),Ge=new M({props:{code:`from accelerate.tracking import GeneralTracker
from typing import Optional

import wandb


class MyCustomTracker(GeneralTracker):
    def __init__(self, run_name: str):
        self.run_name = run_name
        wandb.init(self.run_name)

    def store_init_configuration(self, values: dict):
        wandb.config(values)

    def log(self, values: dict, step: Optional[int] = None):
        wandb.log(values, step=step)`,highlighted:`<span class="hljs-keyword">from</span> accelerate.tracking <span class="hljs-keyword">import</span> GeneralTracker
<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>

<span class="hljs-keyword">import</span> wandb


<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCustomTracker</span>(<span class="hljs-title class_ inherited__">GeneralTracker</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, run_name: <span class="hljs-built_in">str</span></span>):
        self.run_name = run_name
        wandb.init(self.run_name)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_init_configuration</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span></span>):
        wandb.config(values)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span>, step: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span></span>):
        wandb.log(values, step=step)`}}),Re=new M({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerator(log_with=tracker)`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerator(log_with=tracker)`}}),Ue=new M({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerator(log_with=[tracker, "all"])`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerator(log_with=[tracker, <span class="hljs-string">&quot;all&quot;</span>])`}}),He=new dr({}),Fe=new M({props:{code:`from accelerate import Accelerator
+ import neptune.new as neptune

accelerator = Accelerator()
+ run = neptune.init(...)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config["num_iterations"]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
+       if accelerator.is_main_process:
+           run["logs/training/batch/loss"].log(loss)`,highlighted:`from accelerate import Accelerator
<span class="hljs-addition">+ import neptune.new as neptune</span>

accelerator = Accelerator()
<span class="hljs-addition">+ run = neptune.init(...)</span>

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config[&quot;num_iterations&quot;]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
<span class="hljs-addition">+       if accelerator.is_main_process:</span>
<span class="hljs-addition">+           run[&quot;logs/training/batch/loss&quot;].log(loss)</span>`}}),{c(){P=n("meta"),ta=i(),O=n("h1"),V=n("a"),it=n("span"),u(se.$$.fragment),pr=i(),dt=n("span"),mr=r("Tracking"),aa=i(),le=n("p"),ur=r(`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
\u{1F917} Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=n("a"),hr=r("log()"),ra=i(),I=n("h2"),G=n("a"),pt=n("span"),u(ce.$$.fragment),gr=i(),mt=n("span"),fr=r("Integrated Trackers"),oa=i(),R=n("p"),_r=r("Currently "),ut=n("code"),vr=r("Accelerate"),yr=r(" supports three trackers out-of-the-box:"),na=i(),k=n("div"),u(ie.$$.fragment),kr=i(),q=n("p"),br=r("A "),ht=n("code"),$r=r("Tracker"),wr=r(" class that supports "),gt=n("code"),Er=r("tensorboard"),Tr=r(". Should be initialized at the start of your script."),Ar=i(),U=n("div"),u(de.$$.fragment),xr=i(),pe=n("p"),jr=r("Closes "),ft=n("code"),Cr=r("TensorBoard"),Dr=r(" writer"),Lr=i(),H=n("div"),u(me.$$.fragment),Pr=i(),ue=n("p"),Or=r("Logs "),_t=n("code"),Ir=r("values"),qr=r(" to the current run."),Sr=i(),F=n("div"),u(he.$$.fragment),Br=i(),ge=n("p"),zr=r("Logs "),vt=n("code"),Nr=r("values"),Wr=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),sa=i(),b=n("div"),u(fe.$$.fragment),Mr=i(),S=n("p"),Vr=r("A "),yt=n("code"),Gr=r("Tracker"),Rr=r(" class that supports "),kt=n("code"),Ur=r("wandb"),Hr=r(". Should be initialized at the start of your script."),Fr=i(),J=n("div"),u(_e.$$.fragment),Jr=i(),ve=n("p"),Kr=r("Closes "),bt=n("code"),Qr=r("wandb"),Xr=r(" writer"),Yr=i(),K=n("div"),u(ye.$$.fragment),Zr=i(),ke=n("p"),eo=r("Logs "),$t=n("code"),to=r("values"),ao=r(" to the current run."),ro=i(),Q=n("div"),u(be.$$.fragment),oo=i(),$e=n("p"),no=r("Logs "),wt=n("code"),so=r("values"),lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),la=i(),y=n("div"),u(we.$$.fragment),co=i(),B=n("p"),io=r("A "),Et=n("code"),po=r("Tracker"),mo=r(" class that supports "),Tt=n("code"),uo=r("comet_ml"),ho=r(". Should be initialized at the start of your script."),go=i(),At=n("p"),fo=r("API keys must be stored in a Comet config file."),_o=i(),X=n("div"),u(Ee.$$.fragment),vo=i(),Te=n("p"),yo=r("Closes "),xt=n("code"),ko=r("comet-ml"),bo=r(" writer"),$o=i(),Y=n("div"),u(Ae.$$.fragment),wo=i(),xe=n("p"),Eo=r("Logs "),jt=n("code"),To=r("values"),Ao=r(" to the current run."),xo=i(),Z=n("div"),u(je.$$.fragment),jo=i(),Ce=n("p"),Co=r("Logs "),Ct=n("code"),Do=r("values"),Lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),ca=i(),T=n("p"),Po=r("To use any of them, pass in the selected type(s) to the "),Dt=n("code"),Oo=r("log_with"),Io=r(" parameter in "),Lt=n("code"),qo=r("Accelerate"),So=r(":"),ia=i(),u(De.$$.fragment),da=i(),ee=n("p"),Bo=r("At the start of your experiment "),Ke=n("a"),zo=r("init_trackers()"),No=r(" should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),pa=i(),u(Le.$$.fragment),ma=i(),A=n("p"),Wo=r("When you are ready to log any data, "),Qe=n("a"),Mo=r("log()"),Vo=r(` should be used.
A `),Pt=n("code"),Go=r("step"),Ro=r(" can also be passed in to correlate the data with a particular step in the training loop."),ua=i(),u(Pe.$$.fragment),ha=i(),te=n("p"),Uo=r("Once you\u2019ve finished training, make sure to run "),Xe=n("a"),Ho=r("end_training()"),Fo=r(" so that all the trackers can run their finish functionalities if they have any."),ga=i(),u(Oe.$$.fragment),fa=i(),Ye=n("p"),Jo=r("A full example is below:"),_a=i(),u(Ie.$$.fragment),va=i(),z=n("h2"),ae=n("a"),Ot=n("span"),u(qe.$$.fragment),Ko=i(),It=n("span"),Qo=r("Implementing Custom Trackers"),ya=i(),x=n("p"),Xo=r("To implement a new tracker to be used in "),qt=n("code"),Yo=r("Accelerator"),Zo=r(", a new one can be made through implementing the "),St=n("code"),en=r("~GeneralTracker"),tn=r(` class.
Every tracker must implement three functions:`),ka=i(),j=n("ul"),Se=n("li"),Bt=n("code"),an=r("__init__"),rn=r(": "),Be=n("ul"),ze=n("li"),on=r("Should store a "),zt=n("code"),nn=r("run_name"),sn=r(" and initialize the tracker API of the integrated library."),ln=i(),Ne=n("li"),cn=r("If a tracker stores their data locally (such as TensorBoard), a "),Nt=n("code"),dn=r("logging_dir"),pn=r(" parameter can be added."),mn=i(),We=n("li"),Wt=n("code"),un=r("store_init_configuration"),hn=r(": "),Mt=n("ul"),Me=n("li"),gn=r("Should take in a "),Vt=n("code"),fn=r("values"),_n=r(" dictionary and store them as a one-time experiment configuration"),vn=i(),Ve=n("li"),Gt=n("code"),yn=r("log"),kn=r(": "),Rt=n("ul"),N=n("li"),bn=r("Should take in a "),Ut=n("code"),$n=r("values"),wn=r(" dictionary and a "),Ht=n("code"),En=r("step"),Tn=r(", and should log them to the run"),ba=i(),Ze=n("p"),An=r("A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),$a=i(),u(Ge.$$.fragment),wa=i(),$=n("p"),xn=r("When you are ready to build your "),Ft=n("code"),jn=r("Accelerator"),Cn=r(" object, pass in an "),Jt=n("strong"),Dn=r("instance"),Ln=r(" of your tracker to "),Kt=n("code"),Pn=r("log_with"),On=r(` to have it automatically
be used with the API:`),Ea=i(),u(Re.$$.fragment),Ta=i(),re=n("p"),In=r("These also can be mixed with existing trackers, including with "),Qt=n("code"),qn=r('"all"'),Sn=r(":"),Aa=i(),u(Ue.$$.fragment),xa=i(),W=n("h2"),oe=n("a"),Xt=n("span"),u(He.$$.fragment),Bn=i(),Yt=n("span"),zn=r("When a wrapper cannot work"),ja=i(),C=n("p"),Nn=r("If a library has an API that does not follow a strict "),Zt=n("code"),Wn=r(".log"),Mn=r(" with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=n("code"),Vn=r("if accelerator.is_main_process"),Gn=r(" statement:"),Ca=i(),u(Fe.$$.fragment),this.h()},l(e){const c=Xs('[data-svelte="svelte-1phssyn"]',document.head);P=s(c,"META",{name:!0,content:!0}),c.forEach(a),ta=d(e),O=s(e,"H1",{class:!0});var La=l(O);V=s(La,"A",{id:!0,class:!0,href:!0});var Hn=l(V);it=s(Hn,"SPAN",{});var Fn=l(it);h(se.$$.fragment,Fn),Fn.forEach(a),Hn.forEach(a),pr=d(La),dt=s(La,"SPAN",{});var Jn=l(dt);mr=o(Jn,"Tracking"),Jn.forEach(a),La.forEach(a),aa=d(e),le=s(e,"P",{});var Rn=l(le);ur=o(Rn,`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
\u{1F917} Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=s(Rn,"A",{href:!0});var Kn=l(Je);hr=o(Kn,"log()"),Kn.forEach(a),Rn.forEach(a),ra=d(e),I=s(e,"H2",{class:!0});var Pa=l(I);G=s(Pa,"A",{id:!0,class:!0,href:!0});var Qn=l(G);pt=s(Qn,"SPAN",{});var Xn=l(pt);h(ce.$$.fragment,Xn),Xn.forEach(a),Qn.forEach(a),gr=d(Pa),mt=s(Pa,"SPAN",{});var Yn=l(mt);fr=o(Yn,"Integrated Trackers"),Yn.forEach(a),Pa.forEach(a),oa=d(e),R=s(e,"P",{});var Oa=l(R);_r=o(Oa,"Currently "),ut=s(Oa,"CODE",{});var Zn=l(ut);vr=o(Zn,"Accelerate"),Zn.forEach(a),yr=o(Oa," supports three trackers out-of-the-box:"),Oa.forEach(a),na=d(e),k=s(e,"DIV",{class:!0});var D=l(k);h(ie.$$.fragment,D),kr=d(D),q=s(D,"P",{});var et=l(q);br=o(et,"A "),ht=s(et,"CODE",{});var es=l(ht);$r=o(es,"Tracker"),es.forEach(a),wr=o(et," class that supports "),gt=s(et,"CODE",{});var ts=l(gt);Er=o(ts,"tensorboard"),ts.forEach(a),Tr=o(et,". Should be initialized at the start of your script."),et.forEach(a),Ar=d(D),U=s(D,"DIV",{class:!0});var Ia=l(U);h(de.$$.fragment,Ia),xr=d(Ia),pe=s(Ia,"P",{});var qa=l(pe);jr=o(qa,"Closes "),ft=s(qa,"CODE",{});var as=l(ft);Cr=o(as,"TensorBoard"),as.forEach(a),Dr=o(qa," writer"),qa.forEach(a),Ia.forEach(a),Lr=d(D),H=s(D,"DIV",{class:!0});var Sa=l(H);h(me.$$.fragment,Sa),Pr=d(Sa),ue=s(Sa,"P",{});var Ba=l(ue);Or=o(Ba,"Logs "),_t=s(Ba,"CODE",{});var rs=l(_t);Ir=o(rs,"values"),rs.forEach(a),qr=o(Ba," to the current run."),Ba.forEach(a),Sa.forEach(a),Sr=d(D),F=s(D,"DIV",{class:!0});var za=l(F);h(he.$$.fragment,za),Br=d(za),ge=s(za,"P",{});var Na=l(ge);zr=o(Na,"Logs "),vt=s(Na,"CODE",{});var os=l(vt);Nr=o(os,"values"),os.forEach(a),Wr=o(Na," as hyperparameters for the run. Should be run at the beginning of your experiment."),Na.forEach(a),za.forEach(a),D.forEach(a),sa=d(e),b=s(e,"DIV",{class:!0});var L=l(b);h(fe.$$.fragment,L),Mr=d(L),S=s(L,"P",{});var tt=l(S);Vr=o(tt,"A "),yt=s(tt,"CODE",{});var ns=l(yt);Gr=o(ns,"Tracker"),ns.forEach(a),Rr=o(tt," class that supports "),kt=s(tt,"CODE",{});var ss=l(kt);Ur=o(ss,"wandb"),ss.forEach(a),Hr=o(tt,". Should be initialized at the start of your script."),tt.forEach(a),Fr=d(L),J=s(L,"DIV",{class:!0});var Wa=l(J);h(_e.$$.fragment,Wa),Jr=d(Wa),ve=s(Wa,"P",{});var Ma=l(ve);Kr=o(Ma,"Closes "),bt=s(Ma,"CODE",{});var ls=l(bt);Qr=o(ls,"wandb"),ls.forEach(a),Xr=o(Ma," writer"),Ma.forEach(a),Wa.forEach(a),Yr=d(L),K=s(L,"DIV",{class:!0});var Va=l(K);h(ye.$$.fragment,Va),Zr=d(Va),ke=s(Va,"P",{});var Ga=l(ke);eo=o(Ga,"Logs "),$t=s(Ga,"CODE",{});var cs=l($t);to=o(cs,"values"),cs.forEach(a),ao=o(Ga," to the current run."),Ga.forEach(a),Va.forEach(a),ro=d(L),Q=s(L,"DIV",{class:!0});var Ra=l(Q);h(be.$$.fragment,Ra),oo=d(Ra),$e=s(Ra,"P",{});var Ua=l($e);no=o(Ua,"Logs "),wt=s(Ua,"CODE",{});var is=l(wt);so=o(is,"values"),is.forEach(a),lo=o(Ua," as hyperparameters for the run. Should be run at the beginning of your experiment."),Ua.forEach(a),Ra.forEach(a),L.forEach(a),la=d(e),y=s(e,"DIV",{class:!0});var w=l(y);h(we.$$.fragment,w),co=d(w),B=s(w,"P",{});var at=l(B);io=o(at,"A "),Et=s(at,"CODE",{});var ds=l(Et);po=o(ds,"Tracker"),ds.forEach(a),mo=o(at," class that supports "),Tt=s(at,"CODE",{});var ps=l(Tt);uo=o(ps,"comet_ml"),ps.forEach(a),ho=o(at,". Should be initialized at the start of your script."),at.forEach(a),go=d(w),At=s(w,"P",{});var ms=l(At);fo=o(ms,"API keys must be stored in a Comet config file."),ms.forEach(a),_o=d(w),X=s(w,"DIV",{class:!0});var Ha=l(X);h(Ee.$$.fragment,Ha),vo=d(Ha),Te=s(Ha,"P",{});var Fa=l(Te);yo=o(Fa,"Closes "),xt=s(Fa,"CODE",{});var us=l(xt);ko=o(us,"comet-ml"),us.forEach(a),bo=o(Fa," writer"),Fa.forEach(a),Ha.forEach(a),$o=d(w),Y=s(w,"DIV",{class:!0});var Ja=l(Y);h(Ae.$$.fragment,Ja),wo=d(Ja),xe=s(Ja,"P",{});var Ka=l(xe);Eo=o(Ka,"Logs "),jt=s(Ka,"CODE",{});var hs=l(jt);To=o(hs,"values"),hs.forEach(a),Ao=o(Ka," to the current run."),Ka.forEach(a),Ja.forEach(a),xo=d(w),Z=s(w,"DIV",{class:!0});var Qa=l(Z);h(je.$$.fragment,Qa),jo=d(Qa),Ce=s(Qa,"P",{});var Xa=l(Ce);Co=o(Xa,"Logs "),Ct=s(Xa,"CODE",{});var gs=l(Ct);Do=o(gs,"values"),gs.forEach(a),Lo=o(Xa," as hyperparameters for the run. Should be run at the beginning of your experiment."),Xa.forEach(a),Qa.forEach(a),w.forEach(a),ca=d(e),T=s(e,"P",{});var rt=l(T);Po=o(rt,"To use any of them, pass in the selected type(s) to the "),Dt=s(rt,"CODE",{});var fs=l(Dt);Oo=o(fs,"log_with"),fs.forEach(a),Io=o(rt," parameter in "),Lt=s(rt,"CODE",{});var _s=l(Lt);qo=o(_s,"Accelerate"),_s.forEach(a),So=o(rt,":"),rt.forEach(a),ia=d(e),h(De.$$.fragment,e),da=d(e),ee=s(e,"P",{});var Ya=l(ee);Bo=o(Ya,"At the start of your experiment "),Ke=s(Ya,"A",{href:!0});var vs=l(Ke);zo=o(vs,"init_trackers()"),vs.forEach(a),No=o(Ya," should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),Ya.forEach(a),pa=d(e),h(Le.$$.fragment,e),ma=d(e),A=s(e,"P",{});var ot=l(A);Wo=o(ot,"When you are ready to log any data, "),Qe=s(ot,"A",{href:!0});var ys=l(Qe);Mo=o(ys,"log()"),ys.forEach(a),Vo=o(ot,` should be used.
A `),Pt=s(ot,"CODE",{});var ks=l(Pt);Go=o(ks,"step"),ks.forEach(a),Ro=o(ot," can also be passed in to correlate the data with a particular step in the training loop."),ot.forEach(a),ua=d(e),h(Pe.$$.fragment,e),ha=d(e),te=s(e,"P",{});var Za=l(te);Uo=o(Za,"Once you\u2019ve finished training, make sure to run "),Xe=s(Za,"A",{href:!0});var bs=l(Xe);Ho=o(bs,"end_training()"),bs.forEach(a),Fo=o(Za," so that all the trackers can run their finish functionalities if they have any."),Za.forEach(a),ga=d(e),h(Oe.$$.fragment,e),fa=d(e),Ye=s(e,"P",{});var $s=l(Ye);Jo=o($s,"A full example is below:"),$s.forEach(a),_a=d(e),h(Ie.$$.fragment,e),va=d(e),z=s(e,"H2",{class:!0});var er=l(z);ae=s(er,"A",{id:!0,class:!0,href:!0});var ws=l(ae);Ot=s(ws,"SPAN",{});var Es=l(Ot);h(qe.$$.fragment,Es),Es.forEach(a),ws.forEach(a),Ko=d(er),It=s(er,"SPAN",{});var Ts=l(It);Qo=o(Ts,"Implementing Custom Trackers"),Ts.forEach(a),er.forEach(a),ya=d(e),x=s(e,"P",{});var nt=l(x);Xo=o(nt,"To implement a new tracker to be used in "),qt=s(nt,"CODE",{});var As=l(qt);Yo=o(As,"Accelerator"),As.forEach(a),Zo=o(nt,", a new one can be made through implementing the "),St=s(nt,"CODE",{});var xs=l(St);en=o(xs,"~GeneralTracker"),xs.forEach(a),tn=o(nt,` class.
Every tracker must implement three functions:`),nt.forEach(a),ka=d(e),j=s(e,"UL",{});var st=l(j);Se=s(st,"LI",{});var tr=l(Se);Bt=s(tr,"CODE",{});var js=l(Bt);an=o(js,"__init__"),js.forEach(a),rn=o(tr,": "),Be=s(tr,"UL",{});var ar=l(Be);ze=s(ar,"LI",{});var rr=l(ze);on=o(rr,"Should store a "),zt=s(rr,"CODE",{});var Cs=l(zt);nn=o(Cs,"run_name"),Cs.forEach(a),sn=o(rr," and initialize the tracker API of the integrated library."),rr.forEach(a),ln=d(ar),Ne=s(ar,"LI",{});var or=l(Ne);cn=o(or,"If a tracker stores their data locally (such as TensorBoard), a "),Nt=s(or,"CODE",{});var Ds=l(Nt);dn=o(Ds,"logging_dir"),Ds.forEach(a),pn=o(or," parameter can be added."),or.forEach(a),ar.forEach(a),tr.forEach(a),mn=d(st),We=s(st,"LI",{});var nr=l(We);Wt=s(nr,"CODE",{});var Ls=l(Wt);un=o(Ls,"store_init_configuration"),Ls.forEach(a),hn=o(nr,": "),Mt=s(nr,"UL",{});var Ps=l(Mt);Me=s(Ps,"LI",{});var sr=l(Me);gn=o(sr,"Should take in a "),Vt=s(sr,"CODE",{});var Os=l(Vt);fn=o(Os,"values"),Os.forEach(a),_n=o(sr," dictionary and store them as a one-time experiment configuration"),sr.forEach(a),Ps.forEach(a),nr.forEach(a),vn=d(st),Ve=s(st,"LI",{});var lr=l(Ve);Gt=s(lr,"CODE",{});var Is=l(Gt);yn=o(Is,"log"),Is.forEach(a),kn=o(lr,": "),Rt=s(lr,"UL",{});var qs=l(Rt);N=s(qs,"LI",{});var lt=l(N);bn=o(lt,"Should take in a "),Ut=s(lt,"CODE",{});var Ss=l(Ut);$n=o(Ss,"values"),Ss.forEach(a),wn=o(lt," dictionary and a "),Ht=s(lt,"CODE",{});var Bs=l(Ht);En=o(Bs,"step"),Bs.forEach(a),Tn=o(lt,", and should log them to the run"),lt.forEach(a),qs.forEach(a),lr.forEach(a),st.forEach(a),ba=d(e),Ze=s(e,"P",{});var zs=l(Ze);An=o(zs,"A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),zs.forEach(a),$a=d(e),h(Ge.$$.fragment,e),wa=d(e),$=s(e,"P",{});var ne=l($);xn=o(ne,"When you are ready to build your "),Ft=s(ne,"CODE",{});var Ns=l(Ft);jn=o(Ns,"Accelerator"),Ns.forEach(a),Cn=o(ne," object, pass in an "),Jt=s(ne,"STRONG",{});var Ws=l(Jt);Dn=o(Ws,"instance"),Ws.forEach(a),Ln=o(ne," of your tracker to "),Kt=s(ne,"CODE",{});var Ms=l(Kt);Pn=o(Ms,"log_with"),Ms.forEach(a),On=o(ne,` to have it automatically
be used with the API:`),ne.forEach(a),Ea=d(e),h(Re.$$.fragment,e),Ta=d(e),re=s(e,"P",{});var cr=l(re);In=o(cr,"These also can be mixed with existing trackers, including with "),Qt=s(cr,"CODE",{});var Vs=l(Qt);qn=o(Vs,'"all"'),Vs.forEach(a),Sn=o(cr,":"),cr.forEach(a),Aa=d(e),h(Ue.$$.fragment,e),xa=d(e),W=s(e,"H2",{class:!0});var ir=l(W);oe=s(ir,"A",{id:!0,class:!0,href:!0});var Gs=l(oe);Xt=s(Gs,"SPAN",{});var Rs=l(Xt);h(He.$$.fragment,Rs),Rs.forEach(a),Gs.forEach(a),Bn=d(ir),Yt=s(ir,"SPAN",{});var Us=l(Yt);zn=o(Us,"When a wrapper cannot work"),Us.forEach(a),ir.forEach(a),ja=d(e),C=s(e,"P",{});var ct=l(C);Nn=o(ct,"If a library has an API that does not follow a strict "),Zt=s(ct,"CODE",{});var Hs=l(Zt);Wn=o(Hs,".log"),Hs.forEach(a),Mn=o(ct," with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=s(ct,"CODE",{});var Fs=l(ea);Vn=o(Fs,"if accelerator.is_main_process"),Fs.forEach(a),Gn=o(ct," statement:"),ct.forEach(a),Ca=d(e),h(Fe.$$.fragment,e),this.h()},h(){m(P,"name","hf:doc:metadata"),m(P,"content",JSON.stringify(tl)),m(V,"id","tracking"),m(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(V,"href","#tracking"),m(O,"class","relative group"),m(Je,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.log"),m(G,"id","accelerate.tracking.TensorBoardTracker"),m(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(G,"href","#accelerate.tracking.TensorBoardTracker"),m(I,"class","relative group"),m(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ke,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.init_trackers"),m(Qe,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.log"),m(Xe,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.end_training"),m(ae,"id","implementing-custom-trackers"),m(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ae,"href","#implementing-custom-trackers"),m(z,"class","relative group"),m(oe,"id","when-a-wrapper-cannot-work"),m(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(oe,"href","#when-a-wrapper-cannot-work"),m(W,"class","relative group")},m(e,c){t(document.head,P),p(e,ta,c),p(e,O,c),t(O,V),t(V,it),g(se,it,null),t(O,pr),t(O,dt),t(dt,mr),p(e,aa,c),p(e,le,c),t(le,ur),t(le,Je),t(Je,hr),p(e,ra,c),p(e,I,c),t(I,G),t(G,pt),g(ce,pt,null),t(I,gr),t(I,mt),t(mt,fr),p(e,oa,c),p(e,R,c),t(R,_r),t(R,ut),t(ut,vr),t(R,yr),p(e,na,c),p(e,k,c),g(ie,k,null),t(k,kr),t(k,q),t(q,br),t(q,ht),t(ht,$r),t(q,wr),t(q,gt),t(gt,Er),t(q,Tr),t(k,Ar),t(k,U),g(de,U,null),t(U,xr),t(U,pe),t(pe,jr),t(pe,ft),t(ft,Cr),t(pe,Dr),t(k,Lr),t(k,H),g(me,H,null),t(H,Pr),t(H,ue),t(ue,Or),t(ue,_t),t(_t,Ir),t(ue,qr),t(k,Sr),t(k,F),g(he,F,null),t(F,Br),t(F,ge),t(ge,zr),t(ge,vt),t(vt,Nr),t(ge,Wr),p(e,sa,c),p(e,b,c),g(fe,b,null),t(b,Mr),t(b,S),t(S,Vr),t(S,yt),t(yt,Gr),t(S,Rr),t(S,kt),t(kt,Ur),t(S,Hr),t(b,Fr),t(b,J),g(_e,J,null),t(J,Jr),t(J,ve),t(ve,Kr),t(ve,bt),t(bt,Qr),t(ve,Xr),t(b,Yr),t(b,K),g(ye,K,null),t(K,Zr),t(K,ke),t(ke,eo),t(ke,$t),t($t,to),t(ke,ao),t(b,ro),t(b,Q),g(be,Q,null),t(Q,oo),t(Q,$e),t($e,no),t($e,wt),t(wt,so),t($e,lo),p(e,la,c),p(e,y,c),g(we,y,null),t(y,co),t(y,B),t(B,io),t(B,Et),t(Et,po),t(B,mo),t(B,Tt),t(Tt,uo),t(B,ho),t(y,go),t(y,At),t(At,fo),t(y,_o),t(y,X),g(Ee,X,null),t(X,vo),t(X,Te),t(Te,yo),t(Te,xt),t(xt,ko),t(Te,bo),t(y,$o),t(y,Y),g(Ae,Y,null),t(Y,wo),t(Y,xe),t(xe,Eo),t(xe,jt),t(jt,To),t(xe,Ao),t(y,xo),t(y,Z),g(je,Z,null),t(Z,jo),t(Z,Ce),t(Ce,Co),t(Ce,Ct),t(Ct,Do),t(Ce,Lo),p(e,ca,c),p(e,T,c),t(T,Po),t(T,Dt),t(Dt,Oo),t(T,Io),t(T,Lt),t(Lt,qo),t(T,So),p(e,ia,c),g(De,e,c),p(e,da,c),p(e,ee,c),t(ee,Bo),t(ee,Ke),t(Ke,zo),t(ee,No),p(e,pa,c),g(Le,e,c),p(e,ma,c),p(e,A,c),t(A,Wo),t(A,Qe),t(Qe,Mo),t(A,Vo),t(A,Pt),t(Pt,Go),t(A,Ro),p(e,ua,c),g(Pe,e,c),p(e,ha,c),p(e,te,c),t(te,Uo),t(te,Xe),t(Xe,Ho),t(te,Fo),p(e,ga,c),g(Oe,e,c),p(e,fa,c),p(e,Ye,c),t(Ye,Jo),p(e,_a,c),g(Ie,e,c),p(e,va,c),p(e,z,c),t(z,ae),t(ae,Ot),g(qe,Ot,null),t(z,Ko),t(z,It),t(It,Qo),p(e,ya,c),p(e,x,c),t(x,Xo),t(x,qt),t(qt,Yo),t(x,Zo),t(x,St),t(St,en),t(x,tn),p(e,ka,c),p(e,j,c),t(j,Se),t(Se,Bt),t(Bt,an),t(Se,rn),t(Se,Be),t(Be,ze),t(ze,on),t(ze,zt),t(zt,nn),t(ze,sn),t(Be,ln),t(Be,Ne),t(Ne,cn),t(Ne,Nt),t(Nt,dn),t(Ne,pn),t(j,mn),t(j,We),t(We,Wt),t(Wt,un),t(We,hn),t(We,Mt),t(Mt,Me),t(Me,gn),t(Me,Vt),t(Vt,fn),t(Me,_n),t(j,vn),t(j,Ve),t(Ve,Gt),t(Gt,yn),t(Ve,kn),t(Ve,Rt),t(Rt,N),t(N,bn),t(N,Ut),t(Ut,$n),t(N,wn),t(N,Ht),t(Ht,En),t(N,Tn),p(e,ba,c),p(e,Ze,c),t(Ze,An),p(e,$a,c),g(Ge,e,c),p(e,wa,c),p(e,$,c),t($,xn),t($,Ft),t(Ft,jn),t($,Cn),t($,Jt),t(Jt,Dn),t($,Ln),t($,Kt),t(Kt,Pn),t($,On),p(e,Ea,c),g(Re,e,c),p(e,Ta,c),p(e,re,c),t(re,In),t(re,Qt),t(Qt,qn),t(re,Sn),p(e,Aa,c),g(Ue,e,c),p(e,xa,c),p(e,W,c),t(W,oe),t(oe,Xt),g(He,Xt,null),t(W,Bn),t(W,Yt),t(Yt,zn),p(e,ja,c),p(e,C,c),t(C,Nn),t(C,Zt),t(Zt,Wn),t(C,Mn),t(C,ea),t(ea,Vn),t(C,Gn),p(e,Ca,c),g(Fe,e,c),Da=!0},p:Ys,i(e){Da||(f(se.$$.fragment,e),f(ce.$$.fragment,e),f(ie.$$.fragment,e),f(de.$$.fragment,e),f(me.$$.fragment,e),f(he.$$.fragment,e),f(fe.$$.fragment,e),f(_e.$$.fragment,e),f(ye.$$.fragment,e),f(be.$$.fragment,e),f(we.$$.fragment,e),f(Ee.$$.fragment,e),f(Ae.$$.fragment,e),f(je.$$.fragment,e),f(De.$$.fragment,e),f(Le.$$.fragment,e),f(Pe.$$.fragment,e),f(Oe.$$.fragment,e),f(Ie.$$.fragment,e),f(qe.$$.fragment,e),f(Ge.$$.fragment,e),f(Re.$$.fragment,e),f(Ue.$$.fragment,e),f(He.$$.fragment,e),f(Fe.$$.fragment,e),Da=!0)},o(e){_(se.$$.fragment,e),_(ce.$$.fragment,e),_(ie.$$.fragment,e),_(de.$$.fragment,e),_(me.$$.fragment,e),_(he.$$.fragment,e),_(fe.$$.fragment,e),_(_e.$$.fragment,e),_(ye.$$.fragment,e),_(be.$$.fragment,e),_(we.$$.fragment,e),_(Ee.$$.fragment,e),_(Ae.$$.fragment,e),_(je.$$.fragment,e),_(De.$$.fragment,e),_(Le.$$.fragment,e),_(Pe.$$.fragment,e),_(Oe.$$.fragment,e),_(Ie.$$.fragment,e),_(qe.$$.fragment,e),_(Ge.$$.fragment,e),_(Re.$$.fragment,e),_(Ue.$$.fragment,e),_(He.$$.fragment,e),_(Fe.$$.fragment,e),Da=!1},d(e){a(P),e&&a(ta),e&&a(O),v(se),e&&a(aa),e&&a(le),e&&a(ra),e&&a(I),v(ce),e&&a(oa),e&&a(R),e&&a(na),e&&a(k),v(ie),v(de),v(me),v(he),e&&a(sa),e&&a(b),v(fe),v(_e),v(ye),v(be),e&&a(la),e&&a(y),v(we),v(Ee),v(Ae),v(je),e&&a(ca),e&&a(T),e&&a(ia),v(De,e),e&&a(da),e&&a(ee),e&&a(pa),v(Le,e),e&&a(ma),e&&a(A),e&&a(ua),v(Pe,e),e&&a(ha),e&&a(te),e&&a(ga),v(Oe,e),e&&a(fa),e&&a(Ye),e&&a(_a),v(Ie,e),e&&a(va),e&&a(z),v(qe),e&&a(ya),e&&a(x),e&&a(ka),e&&a(j),e&&a(ba),e&&a(Ze),e&&a($a),v(Ge,e),e&&a(wa),e&&a($),e&&a(Ea),v(Re,e),e&&a(Ta),e&&a(re),e&&a(Aa),v(Ue,e),e&&a(xa),e&&a(W),v(He),e&&a(ja),e&&a(C),e&&a(Ca),v(Fe,e)}}}const tl={local:"tracking",sections:[{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"},{local:"implementing-custom-trackers",title:"Implementing Custom Trackers"},{local:"when-a-wrapper-cannot-work",title:"When a wrapper cannot work"}],title:"Tracking"};function al(Un){return Zs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ll extends Js{constructor(P){super();Ks(this,P,al,el,Qs,{})}}export{ll as default,tl as metadata};
