import{S as Jn,i as Kn,s as Qn,e as s,k as i,w as m,t as r,M as Xn,c as n,d as a,m as d,a as l,x as h,h as o,b as u,G as t,g as p,y as f,L as Yn,q as g,o as _,B as v,v as Zn}from"../chunks/vendor-hf-doc-builder.js";import{D as E}from"../chunks/Docstring-hf-doc-builder.js";import{C as W}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as dr}from"../chunks/IconCopyLink-hf-doc-builder.js";function el(Us){let P,ta,I,M,it,ne,pr,dt,ur,aa,le,mr,Je,hr,ra,O,G,pt,ce,fr,ut,gr,oa,U,_r,mt,vr,br,sa,k,ie,kr,q,yr,ht,$r,wr,ft,Er,Tr,jr,H,de,Ar,pe,xr,gt,Cr,Dr,Lr,R,ue,Pr,me,Ir,_t,Or,qr,Br,F,he,Sr,fe,Nr,vt,zr,Vr,na,y,ge,Wr,B,Mr,bt,Gr,Ur,kt,Hr,Rr,Fr,J,_e,Jr,ve,Kr,yt,Qr,Xr,Yr,K,be,Zr,ke,eo,$t,to,ao,ro,Q,ye,oo,$e,so,wt,no,lo,la,b,we,co,S,io,Et,po,uo,Tt,mo,ho,fo,jt,go,_o,X,Ee,vo,Te,bo,At,ko,yo,$o,Y,je,wo,Ae,Eo,xt,To,jo,Ao,Z,xe,xo,Ce,Co,Ct,Do,Lo,ca,T,Po,Dt,Io,Oo,Lt,qo,Bo,ia,De,da,ee,So,Ke,No,zo,pa,Le,ua,j,Vo,Qe,Wo,Mo,Pt,Go,Uo,ma,Pe,ha,te,Ho,Xe,Ro,Fo,fa,Ie,ga,Ye,Jo,_a,Oe,va,N,ae,It,qe,Ko,Ot,Qo,ba,A,Xo,qt,Yo,Zo,Bt,es,ts,ka,x,Be,St,as,rs,Se,Ne,os,Nt,ss,ns,ls,ze,cs,zt,is,ds,ps,Ve,Vt,us,ms,Wt,We,hs,Mt,fs,gs,_s,Me,Gt,vs,bs,Ut,z,ks,Ht,ys,$s,Rt,ws,Es,ya,Ze,Ts,$a,Ge,wa,$,js,Ft,As,xs,Jt,Cs,Ds,Kt,Ls,Ps,Ea,Ue,Ta,re,Is,Qt,Os,qs,ja,He,Aa,V,oe,Xt,Re,Bs,Yt,Ss,xa,C,Ns,Zt,zs,Vs,ea,Ws,Ms,Ca,Fe,Da;return ne=new dr({}),ce=new dr({}),ie=new E({props:{name:"class accelerate.tracking.TensorBoardTracker",anchor:"accelerate.tracking.TensorBoardTracker",parameters:[{name:"run_name",val:": str"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType]"}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run`,name:"run_name"},{anchor:"accelerate.tracking.TensorBoardTracker.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>) &#x2014;
Location for TensorBoard logs to be stored.`,name:"logging_dir"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L99"}}),de=new E({props:{name:"finish",anchor:"accelerate.tracking.TensorBoardTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L155"}}),ue=new E({props:{name:"log",anchor:"accelerate.tracking.TensorBoardTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.TensorBoardTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L134"}}),he=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.TensorBoardTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L121"}}),ge=new E({props:{name:"class accelerate.tracking.WandBTracker",anchor:"accelerate.tracking.WandBTracker",parameters:[{name:"run_name",val:": str"}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L163"}}),_e=new E({props:{name:"finish",anchor:"accelerate.tracking.WandBTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L208"}}),be=new E({props:{name:"log",anchor:"accelerate.tracking.WandBTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.WandBTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L194"}}),ye=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.WandBTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.WandBTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L182"}}),we=new E({props:{name:"class accelerate.tracking.CometMLTracker",anchor:"accelerate.tracking.CometMLTracker",parameters:[{name:"run_name",val:": str"}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.run_name",description:`<strong>run_name</strong> (<code>str</code>) &#x2014;
The name of the experiment run.`,name:"run_name"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L216"}}),Ee=new E({props:{name:"finish",anchor:"accelerate.tracking.CometMLTracker.finish",parameters:[],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L271"}}),je=new E({props:{name:"log",anchor:"accelerate.tracking.CometMLTracker.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.log.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of <code>str</code> to <code>float</code>/<code>int</code>) &#x2014;
Values to be logged as key-value pairs. The values need to have type <code>str</code>, <code>float</code>, <code>int</code> or <code>dict</code> of
<code>str</code> to <code>float</code>/<code>int</code>.`,name:"values"},{anchor:"accelerate.tracking.CometMLTracker.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L249"}}),xe=new E({props:{name:"store_init_configuration",anchor:"accelerate.tracking.CometMLTracker.store_init_configuration",parameters:[{name:"values",val:": dict"}],parametersDescription:[{anchor:"accelerate.tracking.CometMLTracker.store_init_configuration.values",description:`<strong>values</strong> (Dictionary <code>str</code> to <code>bool</code>, <code>str</code>, <code>float</code> or <code>int</code>) &#x2014;
Values to be stored as initial hyperparameters as key-value pairs. The values need to have type <code>bool</code>,
<code>str</code>, <code>float</code>, <code>int</code>, or <code>None</code>.`,name:"values"}],source:"https://github.com/huggingface/accelerate/blob/main/src/accelerate/tracking.py#L237"}}),De=new W({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator
<span class="hljs-keyword">from</span> accelerate.utils <span class="hljs-keyword">import</span> LoggerType

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)  <span class="hljs-comment"># For all available trackers in the environment</span>
accelerator = Accelerator(log_with=<span class="hljs-string">&quot;wandb&quot;</span>)
accelerator = Accelerator(log_with=[<span class="hljs-string">&quot;wandb&quot;</span>, LoggerType.TENSORBOARD])`}}),Le=new W({props:{code:`hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)`,highlighted:`hps = {<span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>}
accelerator.init_trackers(<span class="hljs-string">&quot;my_project&quot;</span>, config=hps)`}}),Pe=new W({props:{code:'accelerator.log({"train_loss": 1.12, "valid_loss": 0.8}, step=1)',highlighted:'accelerator.log({<span class="hljs-string">&quot;train_loss&quot;</span>: <span class="hljs-number">1.12</span>, <span class="hljs-string">&quot;valid_loss&quot;</span>: <span class="hljs-number">0.8</span>}, step=<span class="hljs-number">1</span>)'}}),Ie=new W({props:{code:"accelerator.end_training()",highlighted:"accelerator.end_training()"}}),Oe=new W({props:{code:`


`,highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(log_with=<span class="hljs-string">&quot;all&quot;</span>)
config = {
    <span class="hljs-string">&quot;num_iterations&quot;</span>: <span class="hljs-number">5</span>,
    <span class="hljs-string">&quot;learning_rate&quot;</span>: <span class="hljs-number">1e-2</span>,
    <span class="hljs-string">&quot;loss_function&quot;</span>: <span class="hljs-built_in">str</span>(my_loss_function),
}

accelerator.init_trackers(<span class="hljs-string">&quot;example_project&quot;</span>, config=config)

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

<span class="hljs-keyword">for</span> iteration <span class="hljs-keyword">in</span> config[<span class="hljs-string">&quot;num_iterations&quot;</span>]:
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        accelerator.backward(loss)
        my_optimizer.step()
        accelerator.log({<span class="hljs-string">&quot;training_loss&quot;</span>: loss}, step=step)
accelerator.end_training()`}}),qe=new dr({}),Ge=new W({props:{code:`



`,highlighted:`<span class="hljs-keyword">from</span> accelerate.tracking <span class="hljs-keyword">import</span> GeneralTracker
<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span>

<span class="hljs-keyword">import</span> wandb


<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCustomTracker</span>(<span class="hljs-title class_ inherited__">GeneralTracker</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, run_name: <span class="hljs-built_in">str</span></span>):
        self.run_name = run_name
        wandb.init(self.run_name)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">store_init_configuration</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span></span>):
        wandb.config(values)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">self, values: <span class="hljs-built_in">dict</span>, step: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">int</span>] = <span class="hljs-literal">None</span></span>):
        wandb.log(values, step=step)`}}),Ue=new W({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerator(log_with=tracker)`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerator(log_with=tracker)`}}),He=new W({props:{code:`tracker = MyCustomTracker("some_run_name")
accelerator = Accelerator(log_with=[tracker, "all"])`,highlighted:`tracker = MyCustomTracker(<span class="hljs-string">&quot;some_run_name&quot;</span>)
accelerator = Accelerator(log_with=[tracker, <span class="hljs-string">&quot;all&quot;</span>])`}}),Re=new dr({}),Fe=new W({props:{code:`

`,highlighted:`from accelerate import Accelerator
<span class="hljs-addition">+ import neptune.new as neptune</span>

accelerator = Accelerator()
<span class="hljs-addition">+ run = neptune.init(...)</span>

my_model, my_optimizer, my_training_dataloader = accelerate.prepare(my_model, my_optimizer, my_training_dataloader)
device = accelerator.device
my_model.to(device)

for iteration in config[&quot;num_iterations&quot;]:
    for batch in my_training_dataloader:
        my_optimizer.zero_grad()
        inputs, targets = batch
        inputs = inputs.to(device)
        targets = targets.to(device)
        outputs = my_model(inputs)
        loss = my_loss_function(outputs, targets)
        total_loss += loss
        accelerator.backward(loss)
        my_optimizer.step()
<span class="hljs-addition">+       if accelerator.is_main_process:</span>
<span class="hljs-addition">+           run[&quot;logs/training/batch/loss&quot;].log(loss)</span>`}}),{c(){P=s("meta"),ta=i(),I=s("h1"),M=s("a"),it=s("span"),m(ne.$$.fragment),pr=i(),dt=s("span"),ur=r("Tracking"),aa=i(),le=s("p"),mr=r(`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=s("a"),hr=r("log()"),ra=i(),O=s("h2"),G=s("a"),pt=s("span"),m(ce.$$.fragment),fr=i(),ut=s("span"),gr=r("Integrated Trackers"),oa=i(),U=s("p"),_r=r("Currently "),mt=s("code"),vr=r("Accelerate"),br=r(" supports three trackers out-of-the-box:"),sa=i(),k=s("div"),m(ie.$$.fragment),kr=i(),q=s("p"),yr=r("A "),ht=s("code"),$r=r("Tracker"),wr=r(" class that supports "),ft=s("code"),Er=r("tensorboard"),Tr=r(". Should be initialized at the start of your script."),jr=i(),H=s("div"),m(de.$$.fragment),Ar=i(),pe=s("p"),xr=r("Closes "),gt=s("code"),Cr=r("TensorBoard"),Dr=r(" writer"),Lr=i(),R=s("div"),m(ue.$$.fragment),Pr=i(),me=s("p"),Ir=r("Logs "),_t=s("code"),Or=r("values"),qr=r(" to the current run."),Br=i(),F=s("div"),m(he.$$.fragment),Sr=i(),fe=s("p"),Nr=r("Logs "),vt=s("code"),zr=r("values"),Vr=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),na=i(),y=s("div"),m(ge.$$.fragment),Wr=i(),B=s("p"),Mr=r("A "),bt=s("code"),Gr=r("Tracker"),Ur=r(" class that supports "),kt=s("code"),Hr=r("wandb"),Rr=r(". Should be initialized at the start of your script."),Fr=i(),J=s("div"),m(_e.$$.fragment),Jr=i(),ve=s("p"),Kr=r("Closes "),yt=s("code"),Qr=r("wandb"),Xr=r(" writer"),Yr=i(),K=s("div"),m(be.$$.fragment),Zr=i(),ke=s("p"),eo=r("Logs "),$t=s("code"),to=r("values"),ao=r(" to the current run."),ro=i(),Q=s("div"),m(ye.$$.fragment),oo=i(),$e=s("p"),so=r("Logs "),wt=s("code"),no=r("values"),lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),la=i(),b=s("div"),m(we.$$.fragment),co=i(),S=s("p"),io=r("A "),Et=s("code"),po=r("Tracker"),uo=r(" class that supports "),Tt=s("code"),mo=r("comet_ml"),ho=r(". Should be initialized at the start of your script."),fo=i(),jt=s("p"),go=r("API keys must be stored in a Comet config file."),_o=i(),X=s("div"),m(Ee.$$.fragment),vo=i(),Te=s("p"),bo=r("Closes "),At=s("code"),ko=r("comet-ml"),yo=r(" writer"),$o=i(),Y=s("div"),m(je.$$.fragment),wo=i(),Ae=s("p"),Eo=r("Logs "),xt=s("code"),To=r("values"),jo=r(" to the current run."),Ao=i(),Z=s("div"),m(xe.$$.fragment),xo=i(),Ce=s("p"),Co=r("Logs "),Ct=s("code"),Do=r("values"),Lo=r(" as hyperparameters for the run. Should be run at the beginning of your experiment."),ca=i(),T=s("p"),Po=r("To use any of them, pass in the selected type(s) to the "),Dt=s("code"),Io=r("log_with"),Oo=r(" parameter in "),Lt=s("code"),qo=r("Accelerate"),Bo=r(":"),ia=i(),m(De.$$.fragment),da=i(),ee=s("p"),So=r("At the start of your experiment "),Ke=s("a"),No=r("init_trackers()"),zo=r(" should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),pa=i(),m(Le.$$.fragment),ua=i(),j=s("p"),Vo=r("When you are ready to log any data, "),Qe=s("a"),Wo=r("log()"),Mo=r(` should be used.
A `),Pt=s("code"),Go=r("step"),Uo=r(" can also be passed in to correlate the data with a particular step in the training loop."),ma=i(),m(Pe.$$.fragment),ha=i(),te=s("p"),Ho=r("Once you\u2019ve finished training, make sure to run "),Xe=s("a"),Ro=r("end_training()"),Fo=r(" so that all the trackers can run their finish functionalities if they have any."),fa=i(),m(Ie.$$.fragment),ga=i(),Ye=s("p"),Jo=r("A full example is below:"),_a=i(),m(Oe.$$.fragment),va=i(),N=s("h2"),ae=s("a"),It=s("span"),m(qe.$$.fragment),Ko=i(),Ot=s("span"),Qo=r("Implementing Custom Trackers"),ba=i(),A=s("p"),Xo=r("To implement a new tracker to be used in "),qt=s("code"),Yo=r("Accelerator"),Zo=r(", a new one can be made through implementing the "),Bt=s("code"),es=r("~GeneralTracker"),ts=r(` class.
Every tracker must implement three functions:`),ka=i(),x=s("ul"),Be=s("li"),St=s("code"),as=r("__init__"),rs=r(": "),Se=s("ul"),Ne=s("li"),os=r("Should store a "),Nt=s("code"),ss=r("run_name"),ns=r(" and initialize the tracker API of the integrated library."),ls=i(),ze=s("li"),cs=r("If a tracker stores their data locally (such as TensorBoard), a "),zt=s("code"),is=r("logging_dir"),ds=r(" parameter can be added."),ps=i(),Ve=s("li"),Vt=s("code"),us=r("store_init_configuration"),ms=r(": "),Wt=s("ul"),We=s("li"),hs=r("Should take in a "),Mt=s("code"),fs=r("values"),gs=r(" dictionary and store them as a one-time experiment configuration"),_s=i(),Me=s("li"),Gt=s("code"),vs=r("log"),bs=r(": "),Ut=s("ul"),z=s("li"),ks=r("Should take in a "),Ht=s("code"),ys=r("values"),$s=r(" dictionary and a "),Rt=s("code"),ws=r("step"),Es=r(", and should log them to the run"),ya=i(),Ze=s("p"),Ts=r("A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),$a=i(),m(Ge.$$.fragment),wa=i(),$=s("p"),js=r("When you are ready to build your "),Ft=s("code"),As=r("Accelerator"),xs=r(" object, pass in an "),Jt=s("strong"),Cs=r("instance"),Ds=r(" of your tracker to "),Kt=s("code"),Ls=r("log_with"),Ps=r(` to have it automatically
be used with the API:`),Ea=i(),m(Ue.$$.fragment),Ta=i(),re=s("p"),Is=r("These also can be mixed with existing trackers, including with "),Qt=s("code"),Os=r('"all"'),qs=r(":"),ja=i(),m(He.$$.fragment),Aa=i(),V=s("h2"),oe=s("a"),Xt=s("span"),m(Re.$$.fragment),Bs=i(),Yt=s("span"),Ss=r("When a wrapper cannot work"),xa=i(),C=s("p"),Ns=r("If a library has an API that does not follow a strict "),Zt=s("code"),zs=r(".log"),Vs=r(" with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=s("code"),Ws=r("if accelerator.is_main_process"),Ms=r(" statement:"),Ca=i(),m(Fe.$$.fragment),this.h()},l(e){const c=Xn('[data-svelte="svelte-1phssyn"]',document.head);P=n(c,"META",{name:!0,content:!0}),c.forEach(a),ta=d(e),I=n(e,"H1",{class:!0});var La=l(I);M=n(La,"A",{id:!0,class:!0,href:!0});var Hs=l(M);it=n(Hs,"SPAN",{});var Rs=l(it);h(ne.$$.fragment,Rs),Rs.forEach(a),Hs.forEach(a),pr=d(La),dt=n(La,"SPAN",{});var Fs=l(dt);ur=o(Fs,"Tracking"),Fs.forEach(a),La.forEach(a),aa=d(e),le=n(e,"P",{});var Gs=l(le);mr=o(Gs,`There are a large number of experiment tracking API\u2019s available, however getting them all to work with in a multi-processing environment can oftentimes be complex.
Accelerate provides a general tracking API that can be used to log useful items during your script through `),Je=n(Gs,"A",{href:!0});var Js=l(Je);hr=o(Js,"log()"),Js.forEach(a),Gs.forEach(a),ra=d(e),O=n(e,"H2",{class:!0});var Pa=l(O);G=n(Pa,"A",{id:!0,class:!0,href:!0});var Ks=l(G);pt=n(Ks,"SPAN",{});var Qs=l(pt);h(ce.$$.fragment,Qs),Qs.forEach(a),Ks.forEach(a),fr=d(Pa),ut=n(Pa,"SPAN",{});var Xs=l(ut);gr=o(Xs,"Integrated Trackers"),Xs.forEach(a),Pa.forEach(a),oa=d(e),U=n(e,"P",{});var Ia=l(U);_r=o(Ia,"Currently "),mt=n(Ia,"CODE",{});var Ys=l(mt);vr=o(Ys,"Accelerate"),Ys.forEach(a),br=o(Ia," supports three trackers out-of-the-box:"),Ia.forEach(a),sa=d(e),k=n(e,"DIV",{class:!0});var D=l(k);h(ie.$$.fragment,D),kr=d(D),q=n(D,"P",{});var et=l(q);yr=o(et,"A "),ht=n(et,"CODE",{});var Zs=l(ht);$r=o(Zs,"Tracker"),Zs.forEach(a),wr=o(et," class that supports "),ft=n(et,"CODE",{});var en=l(ft);Er=o(en,"tensorboard"),en.forEach(a),Tr=o(et,". Should be initialized at the start of your script."),et.forEach(a),jr=d(D),H=n(D,"DIV",{class:!0});var Oa=l(H);h(de.$$.fragment,Oa),Ar=d(Oa),pe=n(Oa,"P",{});var qa=l(pe);xr=o(qa,"Closes "),gt=n(qa,"CODE",{});var tn=l(gt);Cr=o(tn,"TensorBoard"),tn.forEach(a),Dr=o(qa," writer"),qa.forEach(a),Oa.forEach(a),Lr=d(D),R=n(D,"DIV",{class:!0});var Ba=l(R);h(ue.$$.fragment,Ba),Pr=d(Ba),me=n(Ba,"P",{});var Sa=l(me);Ir=o(Sa,"Logs "),_t=n(Sa,"CODE",{});var an=l(_t);Or=o(an,"values"),an.forEach(a),qr=o(Sa," to the current run."),Sa.forEach(a),Ba.forEach(a),Br=d(D),F=n(D,"DIV",{class:!0});var Na=l(F);h(he.$$.fragment,Na),Sr=d(Na),fe=n(Na,"P",{});var za=l(fe);Nr=o(za,"Logs "),vt=n(za,"CODE",{});var rn=l(vt);zr=o(rn,"values"),rn.forEach(a),Vr=o(za," as hyperparameters for the run. Should be run at the beginning of your experiment."),za.forEach(a),Na.forEach(a),D.forEach(a),na=d(e),y=n(e,"DIV",{class:!0});var L=l(y);h(ge.$$.fragment,L),Wr=d(L),B=n(L,"P",{});var tt=l(B);Mr=o(tt,"A "),bt=n(tt,"CODE",{});var on=l(bt);Gr=o(on,"Tracker"),on.forEach(a),Ur=o(tt," class that supports "),kt=n(tt,"CODE",{});var sn=l(kt);Hr=o(sn,"wandb"),sn.forEach(a),Rr=o(tt,". Should be initialized at the start of your script."),tt.forEach(a),Fr=d(L),J=n(L,"DIV",{class:!0});var Va=l(J);h(_e.$$.fragment,Va),Jr=d(Va),ve=n(Va,"P",{});var Wa=l(ve);Kr=o(Wa,"Closes "),yt=n(Wa,"CODE",{});var nn=l(yt);Qr=o(nn,"wandb"),nn.forEach(a),Xr=o(Wa," writer"),Wa.forEach(a),Va.forEach(a),Yr=d(L),K=n(L,"DIV",{class:!0});var Ma=l(K);h(be.$$.fragment,Ma),Zr=d(Ma),ke=n(Ma,"P",{});var Ga=l(ke);eo=o(Ga,"Logs "),$t=n(Ga,"CODE",{});var ln=l($t);to=o(ln,"values"),ln.forEach(a),ao=o(Ga," to the current run."),Ga.forEach(a),Ma.forEach(a),ro=d(L),Q=n(L,"DIV",{class:!0});var Ua=l(Q);h(ye.$$.fragment,Ua),oo=d(Ua),$e=n(Ua,"P",{});var Ha=l($e);so=o(Ha,"Logs "),wt=n(Ha,"CODE",{});var cn=l(wt);no=o(cn,"values"),cn.forEach(a),lo=o(Ha," as hyperparameters for the run. Should be run at the beginning of your experiment."),Ha.forEach(a),Ua.forEach(a),L.forEach(a),la=d(e),b=n(e,"DIV",{class:!0});var w=l(b);h(we.$$.fragment,w),co=d(w),S=n(w,"P",{});var at=l(S);io=o(at,"A "),Et=n(at,"CODE",{});var dn=l(Et);po=o(dn,"Tracker"),dn.forEach(a),uo=o(at," class that supports "),Tt=n(at,"CODE",{});var pn=l(Tt);mo=o(pn,"comet_ml"),pn.forEach(a),ho=o(at,". Should be initialized at the start of your script."),at.forEach(a),fo=d(w),jt=n(w,"P",{});var un=l(jt);go=o(un,"API keys must be stored in a Comet config file."),un.forEach(a),_o=d(w),X=n(w,"DIV",{class:!0});var Ra=l(X);h(Ee.$$.fragment,Ra),vo=d(Ra),Te=n(Ra,"P",{});var Fa=l(Te);bo=o(Fa,"Closes "),At=n(Fa,"CODE",{});var mn=l(At);ko=o(mn,"comet-ml"),mn.forEach(a),yo=o(Fa," writer"),Fa.forEach(a),Ra.forEach(a),$o=d(w),Y=n(w,"DIV",{class:!0});var Ja=l(Y);h(je.$$.fragment,Ja),wo=d(Ja),Ae=n(Ja,"P",{});var Ka=l(Ae);Eo=o(Ka,"Logs "),xt=n(Ka,"CODE",{});var hn=l(xt);To=o(hn,"values"),hn.forEach(a),jo=o(Ka," to the current run."),Ka.forEach(a),Ja.forEach(a),Ao=d(w),Z=n(w,"DIV",{class:!0});var Qa=l(Z);h(xe.$$.fragment,Qa),xo=d(Qa),Ce=n(Qa,"P",{});var Xa=l(Ce);Co=o(Xa,"Logs "),Ct=n(Xa,"CODE",{});var fn=l(Ct);Do=o(fn,"values"),fn.forEach(a),Lo=o(Xa," as hyperparameters for the run. Should be run at the beginning of your experiment."),Xa.forEach(a),Qa.forEach(a),w.forEach(a),ca=d(e),T=n(e,"P",{});var rt=l(T);Po=o(rt,"To use any of them, pass in the selected type(s) to the "),Dt=n(rt,"CODE",{});var gn=l(Dt);Io=o(gn,"log_with"),gn.forEach(a),Oo=o(rt," parameter in "),Lt=n(rt,"CODE",{});var _n=l(Lt);qo=o(_n,"Accelerate"),_n.forEach(a),Bo=o(rt,":"),rt.forEach(a),ia=d(e),h(De.$$.fragment,e),da=d(e),ee=n(e,"P",{});var Ya=l(ee);So=o(Ya,"At the start of your experiment "),Ke=n(Ya,"A",{href:!0});var vn=l(Ke);No=o(vn,"init_trackers()"),vn.forEach(a),zo=o(Ya," should be used to setup your project, and potentially add any experiment hyperparameters to be logged:"),Ya.forEach(a),pa=d(e),h(Le.$$.fragment,e),ua=d(e),j=n(e,"P",{});var ot=l(j);Vo=o(ot,"When you are ready to log any data, "),Qe=n(ot,"A",{href:!0});var bn=l(Qe);Wo=o(bn,"log()"),bn.forEach(a),Mo=o(ot,` should be used.
A `),Pt=n(ot,"CODE",{});var kn=l(Pt);Go=o(kn,"step"),kn.forEach(a),Uo=o(ot," can also be passed in to correlate the data with a particular step in the training loop."),ot.forEach(a),ma=d(e),h(Pe.$$.fragment,e),ha=d(e),te=n(e,"P",{});var Za=l(te);Ho=o(Za,"Once you\u2019ve finished training, make sure to run "),Xe=n(Za,"A",{href:!0});var yn=l(Xe);Ro=o(yn,"end_training()"),yn.forEach(a),Fo=o(Za," so that all the trackers can run their finish functionalities if they have any."),Za.forEach(a),fa=d(e),h(Ie.$$.fragment,e),ga=d(e),Ye=n(e,"P",{});var $n=l(Ye);Jo=o($n,"A full example is below:"),$n.forEach(a),_a=d(e),h(Oe.$$.fragment,e),va=d(e),N=n(e,"H2",{class:!0});var er=l(N);ae=n(er,"A",{id:!0,class:!0,href:!0});var wn=l(ae);It=n(wn,"SPAN",{});var En=l(It);h(qe.$$.fragment,En),En.forEach(a),wn.forEach(a),Ko=d(er),Ot=n(er,"SPAN",{});var Tn=l(Ot);Qo=o(Tn,"Implementing Custom Trackers"),Tn.forEach(a),er.forEach(a),ba=d(e),A=n(e,"P",{});var st=l(A);Xo=o(st,"To implement a new tracker to be used in "),qt=n(st,"CODE",{});var jn=l(qt);Yo=o(jn,"Accelerator"),jn.forEach(a),Zo=o(st,", a new one can be made through implementing the "),Bt=n(st,"CODE",{});var An=l(Bt);es=o(An,"~GeneralTracker"),An.forEach(a),ts=o(st,` class.
Every tracker must implement three functions:`),st.forEach(a),ka=d(e),x=n(e,"UL",{});var nt=l(x);Be=n(nt,"LI",{});var tr=l(Be);St=n(tr,"CODE",{});var xn=l(St);as=o(xn,"__init__"),xn.forEach(a),rs=o(tr,": "),Se=n(tr,"UL",{});var ar=l(Se);Ne=n(ar,"LI",{});var rr=l(Ne);os=o(rr,"Should store a "),Nt=n(rr,"CODE",{});var Cn=l(Nt);ss=o(Cn,"run_name"),Cn.forEach(a),ns=o(rr," and initialize the tracker API of the integrated library."),rr.forEach(a),ls=d(ar),ze=n(ar,"LI",{});var or=l(ze);cs=o(or,"If a tracker stores their data locally (such as TensorBoard), a "),zt=n(or,"CODE",{});var Dn=l(zt);is=o(Dn,"logging_dir"),Dn.forEach(a),ds=o(or," parameter can be added."),or.forEach(a),ar.forEach(a),tr.forEach(a),ps=d(nt),Ve=n(nt,"LI",{});var sr=l(Ve);Vt=n(sr,"CODE",{});var Ln=l(Vt);us=o(Ln,"store_init_configuration"),Ln.forEach(a),ms=o(sr,": "),Wt=n(sr,"UL",{});var Pn=l(Wt);We=n(Pn,"LI",{});var nr=l(We);hs=o(nr,"Should take in a "),Mt=n(nr,"CODE",{});var In=l(Mt);fs=o(In,"values"),In.forEach(a),gs=o(nr," dictionary and store them as a one-time experiment configuration"),nr.forEach(a),Pn.forEach(a),sr.forEach(a),_s=d(nt),Me=n(nt,"LI",{});var lr=l(Me);Gt=n(lr,"CODE",{});var On=l(Gt);vs=o(On,"log"),On.forEach(a),bs=o(lr,": "),Ut=n(lr,"UL",{});var qn=l(Ut);z=n(qn,"LI",{});var lt=l(z);ks=o(lt,"Should take in a "),Ht=n(lt,"CODE",{});var Bn=l(Ht);ys=o(Bn,"values"),Bn.forEach(a),$s=o(lt," dictionary and a "),Rt=n(lt,"CODE",{});var Sn=l(Rt);ws=o(Sn,"step"),Sn.forEach(a),Es=o(lt,", and should log them to the run"),lt.forEach(a),qn.forEach(a),lr.forEach(a),nt.forEach(a),ya=d(e),Ze=n(e,"P",{});var Nn=l(Ze);Ts=o(Nn,"A brief example can be seen below with an integration with Weights and Biases, containing only the relevent information:"),Nn.forEach(a),$a=d(e),h(Ge.$$.fragment,e),wa=d(e),$=n(e,"P",{});var se=l($);js=o(se,"When you are ready to build your "),Ft=n(se,"CODE",{});var zn=l(Ft);As=o(zn,"Accelerator"),zn.forEach(a),xs=o(se," object, pass in an "),Jt=n(se,"STRONG",{});var Vn=l(Jt);Cs=o(Vn,"instance"),Vn.forEach(a),Ds=o(se," of your tracker to "),Kt=n(se,"CODE",{});var Wn=l(Kt);Ls=o(Wn,"log_with"),Wn.forEach(a),Ps=o(se,` to have it automatically
be used with the API:`),se.forEach(a),Ea=d(e),h(Ue.$$.fragment,e),Ta=d(e),re=n(e,"P",{});var cr=l(re);Is=o(cr,"These also can be mixed with existing trackers, including with "),Qt=n(cr,"CODE",{});var Mn=l(Qt);Os=o(Mn,'"all"'),Mn.forEach(a),qs=o(cr,":"),cr.forEach(a),ja=d(e),h(He.$$.fragment,e),Aa=d(e),V=n(e,"H2",{class:!0});var ir=l(V);oe=n(ir,"A",{id:!0,class:!0,href:!0});var Gn=l(oe);Xt=n(Gn,"SPAN",{});var Un=l(Xt);h(Re.$$.fragment,Un),Un.forEach(a),Gn.forEach(a),Bs=d(ir),Yt=n(ir,"SPAN",{});var Hn=l(Yt);Ss=o(Hn,"When a wrapper cannot work"),Hn.forEach(a),ir.forEach(a),xa=d(e),C=n(e,"P",{});var ct=l(C);Ns=o(ct,"If a library has an API that does not follow a strict "),Zt=n(ct,"CODE",{});var Rn=l(Zt);zs=o(Rn,".log"),Rn.forEach(a),Vs=o(ct," with an overall dictionary such as Neptune.AI, logging can be done manually under an "),ea=n(ct,"CODE",{});var Fn=l(ea);Ws=o(Fn,"if accelerator.is_main_process"),Fn.forEach(a),Ms=o(ct," statement:"),ct.forEach(a),Ca=d(e),h(Fe.$$.fragment,e),this.h()},h(){u(P,"name","hf:doc:metadata"),u(P,"content",JSON.stringify(tl)),u(M,"id","tracking"),u(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(M,"href","#tracking"),u(I,"class","relative group"),u(Je,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.log"),u(G,"id","accelerate.tracking.TensorBoardTracker"),u(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(G,"href","#accelerate.tracking.TensorBoardTracker"),u(O,"class","relative group"),u(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),u(Ke,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.init_trackers"),u(Qe,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.log"),u(Xe,"href","/docs/accelerate/main/en/accelerator#accelerate.Accelerator.end_training"),u(ae,"id","implementing-custom-trackers"),u(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ae,"href","#implementing-custom-trackers"),u(N,"class","relative group"),u(oe,"id","when-a-wrapper-cannot-work"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#when-a-wrapper-cannot-work"),u(V,"class","relative group")},m(e,c){t(document.head,P),p(e,ta,c),p(e,I,c),t(I,M),t(M,it),f(ne,it,null),t(I,pr),t(I,dt),t(dt,ur),p(e,aa,c),p(e,le,c),t(le,mr),t(le,Je),t(Je,hr),p(e,ra,c),p(e,O,c),t(O,G),t(G,pt),f(ce,pt,null),t(O,fr),t(O,ut),t(ut,gr),p(e,oa,c),p(e,U,c),t(U,_r),t(U,mt),t(mt,vr),t(U,br),p(e,sa,c),p(e,k,c),f(ie,k,null),t(k,kr),t(k,q),t(q,yr),t(q,ht),t(ht,$r),t(q,wr),t(q,ft),t(ft,Er),t(q,Tr),t(k,jr),t(k,H),f(de,H,null),t(H,Ar),t(H,pe),t(pe,xr),t(pe,gt),t(gt,Cr),t(pe,Dr),t(k,Lr),t(k,R),f(ue,R,null),t(R,Pr),t(R,me),t(me,Ir),t(me,_t),t(_t,Or),t(me,qr),t(k,Br),t(k,F),f(he,F,null),t(F,Sr),t(F,fe),t(fe,Nr),t(fe,vt),t(vt,zr),t(fe,Vr),p(e,na,c),p(e,y,c),f(ge,y,null),t(y,Wr),t(y,B),t(B,Mr),t(B,bt),t(bt,Gr),t(B,Ur),t(B,kt),t(kt,Hr),t(B,Rr),t(y,Fr),t(y,J),f(_e,J,null),t(J,Jr),t(J,ve),t(ve,Kr),t(ve,yt),t(yt,Qr),t(ve,Xr),t(y,Yr),t(y,K),f(be,K,null),t(K,Zr),t(K,ke),t(ke,eo),t(ke,$t),t($t,to),t(ke,ao),t(y,ro),t(y,Q),f(ye,Q,null),t(Q,oo),t(Q,$e),t($e,so),t($e,wt),t(wt,no),t($e,lo),p(e,la,c),p(e,b,c),f(we,b,null),t(b,co),t(b,S),t(S,io),t(S,Et),t(Et,po),t(S,uo),t(S,Tt),t(Tt,mo),t(S,ho),t(b,fo),t(b,jt),t(jt,go),t(b,_o),t(b,X),f(Ee,X,null),t(X,vo),t(X,Te),t(Te,bo),t(Te,At),t(At,ko),t(Te,yo),t(b,$o),t(b,Y),f(je,Y,null),t(Y,wo),t(Y,Ae),t(Ae,Eo),t(Ae,xt),t(xt,To),t(Ae,jo),t(b,Ao),t(b,Z),f(xe,Z,null),t(Z,xo),t(Z,Ce),t(Ce,Co),t(Ce,Ct),t(Ct,Do),t(Ce,Lo),p(e,ca,c),p(e,T,c),t(T,Po),t(T,Dt),t(Dt,Io),t(T,Oo),t(T,Lt),t(Lt,qo),t(T,Bo),p(e,ia,c),f(De,e,c),p(e,da,c),p(e,ee,c),t(ee,So),t(ee,Ke),t(Ke,No),t(ee,zo),p(e,pa,c),f(Le,e,c),p(e,ua,c),p(e,j,c),t(j,Vo),t(j,Qe),t(Qe,Wo),t(j,Mo),t(j,Pt),t(Pt,Go),t(j,Uo),p(e,ma,c),f(Pe,e,c),p(e,ha,c),p(e,te,c),t(te,Ho),t(te,Xe),t(Xe,Ro),t(te,Fo),p(e,fa,c),f(Ie,e,c),p(e,ga,c),p(e,Ye,c),t(Ye,Jo),p(e,_a,c),f(Oe,e,c),p(e,va,c),p(e,N,c),t(N,ae),t(ae,It),f(qe,It,null),t(N,Ko),t(N,Ot),t(Ot,Qo),p(e,ba,c),p(e,A,c),t(A,Xo),t(A,qt),t(qt,Yo),t(A,Zo),t(A,Bt),t(Bt,es),t(A,ts),p(e,ka,c),p(e,x,c),t(x,Be),t(Be,St),t(St,as),t(Be,rs),t(Be,Se),t(Se,Ne),t(Ne,os),t(Ne,Nt),t(Nt,ss),t(Ne,ns),t(Se,ls),t(Se,ze),t(ze,cs),t(ze,zt),t(zt,is),t(ze,ds),t(x,ps),t(x,Ve),t(Ve,Vt),t(Vt,us),t(Ve,ms),t(Ve,Wt),t(Wt,We),t(We,hs),t(We,Mt),t(Mt,fs),t(We,gs),t(x,_s),t(x,Me),t(Me,Gt),t(Gt,vs),t(Me,bs),t(Me,Ut),t(Ut,z),t(z,ks),t(z,Ht),t(Ht,ys),t(z,$s),t(z,Rt),t(Rt,ws),t(z,Es),p(e,ya,c),p(e,Ze,c),t(Ze,Ts),p(e,$a,c),f(Ge,e,c),p(e,wa,c),p(e,$,c),t($,js),t($,Ft),t(Ft,As),t($,xs),t($,Jt),t(Jt,Cs),t($,Ds),t($,Kt),t(Kt,Ls),t($,Ps),p(e,Ea,c),f(Ue,e,c),p(e,Ta,c),p(e,re,c),t(re,Is),t(re,Qt),t(Qt,Os),t(re,qs),p(e,ja,c),f(He,e,c),p(e,Aa,c),p(e,V,c),t(V,oe),t(oe,Xt),f(Re,Xt,null),t(V,Bs),t(V,Yt),t(Yt,Ss),p(e,xa,c),p(e,C,c),t(C,Ns),t(C,Zt),t(Zt,zs),t(C,Vs),t(C,ea),t(ea,Ws),t(C,Ms),p(e,Ca,c),f(Fe,e,c),Da=!0},p:Yn,i(e){Da||(g(ne.$$.fragment,e),g(ce.$$.fragment,e),g(ie.$$.fragment,e),g(de.$$.fragment,e),g(ue.$$.fragment,e),g(he.$$.fragment,e),g(ge.$$.fragment,e),g(_e.$$.fragment,e),g(be.$$.fragment,e),g(ye.$$.fragment,e),g(we.$$.fragment,e),g(Ee.$$.fragment,e),g(je.$$.fragment,e),g(xe.$$.fragment,e),g(De.$$.fragment,e),g(Le.$$.fragment,e),g(Pe.$$.fragment,e),g(Ie.$$.fragment,e),g(Oe.$$.fragment,e),g(qe.$$.fragment,e),g(Ge.$$.fragment,e),g(Ue.$$.fragment,e),g(He.$$.fragment,e),g(Re.$$.fragment,e),g(Fe.$$.fragment,e),Da=!0)},o(e){_(ne.$$.fragment,e),_(ce.$$.fragment,e),_(ie.$$.fragment,e),_(de.$$.fragment,e),_(ue.$$.fragment,e),_(he.$$.fragment,e),_(ge.$$.fragment,e),_(_e.$$.fragment,e),_(be.$$.fragment,e),_(ye.$$.fragment,e),_(we.$$.fragment,e),_(Ee.$$.fragment,e),_(je.$$.fragment,e),_(xe.$$.fragment,e),_(De.$$.fragment,e),_(Le.$$.fragment,e),_(Pe.$$.fragment,e),_(Ie.$$.fragment,e),_(Oe.$$.fragment,e),_(qe.$$.fragment,e),_(Ge.$$.fragment,e),_(Ue.$$.fragment,e),_(He.$$.fragment,e),_(Re.$$.fragment,e),_(Fe.$$.fragment,e),Da=!1},d(e){a(P),e&&a(ta),e&&a(I),v(ne),e&&a(aa),e&&a(le),e&&a(ra),e&&a(O),v(ce),e&&a(oa),e&&a(U),e&&a(sa),e&&a(k),v(ie),v(de),v(ue),v(he),e&&a(na),e&&a(y),v(ge),v(_e),v(be),v(ye),e&&a(la),e&&a(b),v(we),v(Ee),v(je),v(xe),e&&a(ca),e&&a(T),e&&a(ia),v(De,e),e&&a(da),e&&a(ee),e&&a(pa),v(Le,e),e&&a(ua),e&&a(j),e&&a(ma),v(Pe,e),e&&a(ha),e&&a(te),e&&a(fa),v(Ie,e),e&&a(ga),e&&a(Ye),e&&a(_a),v(Oe,e),e&&a(va),e&&a(N),v(qe),e&&a(ba),e&&a(A),e&&a(ka),e&&a(x),e&&a(ya),e&&a(Ze),e&&a($a),v(Ge,e),e&&a(wa),e&&a($),e&&a(Ea),v(Ue,e),e&&a(Ta),e&&a(re),e&&a(ja),v(He,e),e&&a(Aa),e&&a(V),v(Re),e&&a(xa),e&&a(C),e&&a(Ca),v(Fe,e)}}}const tl={local:"tracking",sections:[{local:"accelerate.tracking.TensorBoardTracker",title:"Integrated Trackers"},{local:"implementing-custom-trackers",title:"Implementing Custom Trackers"},{local:"when-a-wrapper-cannot-work",title:"When a wrapper cannot work"}],title:"Tracking"};function al(Us){return Zn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ll extends Jn{constructor(P){super();Kn(this,P,al,el,Qn,{})}}export{ll as default,tl as metadata};
