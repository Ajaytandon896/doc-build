import{S as i_,i as d_,s as p_,e as a,k as l,w as _,t as c,M as h_,c as o,d as r,m as i,a as s,x as v,h as n,b as d,G as e,g as m,y as $,q as b,o as y,B as w,v as m_,L as _l}from"../../chunks/vendor-hf-doc-builder.js";import{T as ro}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as I}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as O}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as gl}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function u_(T){let h,k;return{c(){h=a("p"),k=c("Step three is optional, but considered a best practice.")},l(A){h=o(A,"P",{});var E=s(h);k=n(E,"Step three is optional, but considered a best practice."),E.forEach(r)},m(A,E){m(A,h,E),e(h,k)},d(A){A&&r(h)}}}function f_(T){let h,k;return{c(){h=a("p"),k=c("Step five is mandatory when using distributed evaluation")},l(A){h=o(A,"P",{});var E=s(h);k=n(E,"Step five is mandatory when using distributed evaluation"),E.forEach(r)},m(A,E){m(A,h,E),e(h,k)},d(A){A&&r(h)}}}function g_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

with accelerator.accumulate():
    for input, output in dataloader:
        outputs = model(input)
        loss = loss_func(outputs)
        loss.backward()
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.accumulate():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">input</span>, output <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>        outputs = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>        loss = loss_func(outputs)
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        scheduler.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()`}}),{c(){h=a("p"),k=c("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=s(h);k=n(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){m(f,h,x),e(h,k),m(f,A,x),$(E,f,x),j=!0},p:_l,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function __(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_norm_(model.parameters(), max_grad_norm)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){h=a("p"),k=c("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=s(h);k=n(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){m(f,h,x),e(h,k),m(f,A,x),$(E,f,x),j=!0},p:_l,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function v_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator(gradient_accumulation_steps=2)
dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

for (input, target) in dataloader:
    optimizer.zero_grad()
    output = model(input)
    loss = loss_func(output, target)
    accelerator.backward(loss)
    if accelerator.sync_gradients:
        accelerator.clip_grad_value_(model.parameters(), clip_value)
    optimizer.step()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator(gradient_accumulation_steps=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer, scheduler = accelerator.prepare(dataloader, model, optimizer, scheduler)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> (<span class="hljs-built_in">input</span>, target) <span class="hljs-keyword">in</span> dataloader:
<span class="hljs-meta">... </span>    optimizer.zero_grad()
<span class="hljs-meta">... </span>    output = model(<span class="hljs-built_in">input</span>)
<span class="hljs-meta">... </span>    loss = loss_func(output, target)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> accelerator.sync_gradients:
<span class="hljs-meta">... </span>        accelerator.clip_grad_value_(model.parameters(), clip_value)
<span class="hljs-meta">... </span>    optimizer.step()`}}),{c(){h=a("p"),k=c("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=s(h);k=n(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){m(f,h,x),e(h,k),m(f,A,x),$(E,f,x),j=!0},p:_l,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function $_(T){let h,k,A,E,j;return{c(){h=a("p"),k=c("Should only be used in conjunction with "),A=a("a"),E=c("Accelerator.save_state()"),j=c("."),this.h()},l(f){h=o(f,"P",{});var x=s(h);k=n(x,"Should only be used in conjunction with "),A=o(x,"A",{href:!0});var N=s(A);E=n(N,"Accelerator.save_state()"),N.forEach(r),j=n(x,"."),x.forEach(r),this.h()},h(){d(A,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.save_state")},m(f,x){m(f,h,x),e(h,k),e(h,A),e(A,E),e(h,j)},d(f){f&&r(h)}}}function b_(T){let h,k,A,E,j;return E=new I({props:{code:`from accelerate import Accelerator

accelerator = Accelerator()
dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
input_a = next(iter(dataloader))
input_b = next(iter(dataloader))

with accelerator.no_sync():
    outputs = model(input_a)
    loss = loss_func(outputs)
    accelerator.backward(loss)
    # No synchronization across processes, only accumulate gradients
outputs = model(input_b)
accelerator.backward(loss)
# Synchronization across all processes
optimizer.step()
optimizer.zero_grad()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator = Accelerator()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader, model, optimizer = accelerator.prepare(dataloader, model, optimizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>input_a = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))
<span class="hljs-meta">&gt;&gt;&gt; </span>input_b = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> accelerator.no_sync():
<span class="hljs-meta">... </span>    outputs = model(input_a)
<span class="hljs-meta">... </span>    loss = loss_func(outputs)
<span class="hljs-meta">... </span>    accelerator.backward(loss)
<span class="hljs-meta">... </span>    <span class="hljs-comment"># No synchronization across processes, only accumulate gradients</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_b)
<span class="hljs-meta">&gt;&gt;&gt; </span>accelerator.backward(loss)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Synchronization across all processes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.step()
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer.zero_grad()`}}),{c(){h=a("p"),k=c("Example:"),A=l(),_(E.$$.fragment)},l(f){h=o(f,"P",{});var x=s(h);k=n(x,"Example:"),x.forEach(r),A=i(f),v(E.$$.fragment,f)},m(f,x){m(f,h,x),e(h,k),m(f,A,x),$(E,f,x),j=!0},p:_l,i(f){j||(b(E.$$.fragment,f),j=!0)},o(f){y(E.$$.fragment,f),j=!1},d(f){f&&r(h),f&&r(A),w(E,f)}}}function y_(T){let h,k;return{c(){h=a("p"),k=c("You don\u2019t need to prepare a model if you only use it for inference without any kind of mixed precision")},l(A){h=o(A,"P",{});var E=s(h);k=n(E,"You don\u2019t need to prepare a model if you only use it for inference without any kind of mixed precision"),E.forEach(r)},m(A,E){m(A,h,E),e(h,k)},d(A){A&&r(h)}}}function w_(T){let h,k,A,E,j,f,x,N,re,Ae,C;return{c(){h=a("p"),k=c("Every "),A=a("code"),E=c("object"),j=c(" must have a "),f=a("code"),x=c("load_state_dict"),N=c(" and "),re=a("code"),Ae=c("state_dict"),C=c(" function to be stored.")},l(ae){h=o(ae,"P",{});var S=s(h);k=n(S,"Every "),A=o(S,"CODE",{});var fa=s(A);E=n(fa,"object"),fa.forEach(r),j=n(S," must have a "),f=o(S,"CODE",{});var ga=s(f);x=n(ga,"load_state_dict"),ga.forEach(r),N=n(S," and "),re=o(S,"CODE",{});var Gt=s(re);Ae=n(Gt,"state_dict"),Gt.forEach(r),C=n(S," function to be stored."),S.forEach(r)},m(ae,S){m(ae,h,S),e(h,k),e(h,A),e(A,E),e(h,j),e(h,f),e(f,x),e(h,N),e(h,re),e(re,Ae),e(h,C)},d(ae){ae&&r(h)}}}function E_(T){let h,k;return{c(){h=a("p"),k=c(`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`)},l(A){h=o(A,"P",{});var E=s(h);k=n(E,`Should only be used when wanting to save a checkpoint during training and restoring the state in the same
environment.`),E.forEach(r)},m(A,E){m(A,h,E),e(h,k)},d(A){A&&r(h)}}}function A_(T){let h,k,A,E,j,f,x,N,re,Ae,C,ae,S,fa,ga,Gt,oe,ke,ao,Mt,vl,oo,$l,bc,_a,bl,yc,M,se,yl,va,wl,El,so,Al,kl,xl,Wt,Pl,$a,jl,Dl,Tl,V,zl,co,Sl,Il,no,Ll,Ol,lo,Nl,Cl,wc,xe,Ec,ce,Pe,ql,io,Ul,Vl,po,Rl,Gl,ba,Ml,ya,Wl,Ac,je,kc,De,Hl,ho,Fl,Yl,xc,ne,Te,mo,Ht,Bl,uo,Kl,Pc,le,ze,fo,Ft,Ql,go,Xl,jc,ie,_o,Jl,Zl,wa,ei,ti,Dc,Yt,Tc,de,Se,vo,Bt,ri,$o,ai,zc,pe,Ie,bo,Kt,oi,yo,si,Sc,Le,ci,wo,ni,li,Ic,Qt,Lc,Oe,ii,Ea,di,pi,Oc,Xt,Nc,he,Ne,Eo,Jt,hi,Ao,mi,Cc,Ce,ui,ko,fi,gi,qc,Zt,Uc,qe,_i,Aa,vi,$i,Vc,er,Rc,me,Ue,xo,tr,bi,Po,yi,Gc,ka,wi,Mc,rr,Wc,ar,Hc,ue,Ve,jo,or,Ei,Do,Ai,Fc,Re,ki,xa,xi,Pi,Yc,fe,Ge,To,sr,ji,zo,Di,Bc,Me,Ti,Pa,zi,Si,Kc,cr,Qc,W,Ii,ja,Li,Oi,So,Ni,Ci,Xc,nr,Jc,ge,We,Io,lr,qi,Lo,Ui,Zc,L,Vi,He,Ri,Oo,Gi,Mi,Wi,No,Hi,Fi,Fe,Yi,Co,Bi,Ki,Qi,qo,Xi,en,_e,Ye,Uo,ir,Ji,Vo,Zi,tn,Be,ed,Da,td,rd,rn,dr,an,ve,Ke,Ro,pr,ad,Go,od,on,u,hr,sd,Mo,cd,nd,Wo,Ho,ld,id,D,Qe,Fo,dd,pd,Yo,hd,md,ud,Xe,Bo,fd,gd,Ta,_d,vd,$d,Je,Ko,bd,yd,Qo,wd,Ed,Ad,Ze,Xo,kd,xd,Jo,Pd,jd,Dd,et,Zo,Td,zd,es,Sd,Id,Ld,tt,ts,Od,Nd,rs,Cd,qd,Ud,rt,as,Vd,Rd,os,Gd,Md,Wd,at,ss,Hd,Fd,za,Yd,Bd,Kd,ot,cs,Qd,Xd,ns,Jd,Zd,ep,st,ls,tp,rp,is,ap,op,sp,H,mr,cp,ds,np,lp,ct,ip,nt,ur,dp,ps,pp,hp,F,fr,mp,$e,up,hs,fp,gp,ms,_p,vp,$p,gr,bp,us,yp,wp,Ep,lt,_r,Ap,vr,kp,fs,xp,Pp,jp,Y,$r,Dp,br,Tp,gs,zp,Sp,Ip,it,Lp,B,yr,Op,wr,Np,_s,Cp,qp,Up,dt,Vp,pt,Er,Rp,vs,Gp,Mp,ht,Ar,Wp,$s,Hp,Fp,K,kr,Yp,xr,Bp,bs,Kp,Qp,Xp,ys,Jp,Zp,mt,Pr,eh,jr,th,ws,rh,ah,oh,ut,Dr,sh,Tr,ch,Sa,nh,lh,ih,ft,zr,dh,R,ph,Es,hh,mh,As,uh,fh,ks,gh,_h,vh,gt,Sr,$h,Ir,bh,xs,yh,wh,Eh,Q,Lr,Ah,Ps,kh,xh,_t,Ph,X,Or,jh,js,Dh,Th,Ds,zh,Sh,vt,Nr,Ih,be,Lh,Ts,Oh,Nh,zs,Ch,qh,Uh,J,Cr,Vh,Ss,Rh,Gh,Is,Mh,Wh,q,qr,Hh,Ur,Fh,Ls,Yh,Bh,Kh,Vr,Qh,Os,Xh,Jh,Zh,$t,em,bt,Rr,tm,Ns,rm,am,yt,Gr,om,Cs,sm,cm,wt,Mr,nm,qs,lm,im,Et,Wr,dm,Us,pm,hm,At,Hr,mm,Vs,um,fm,Z,Fr,gm,Yr,_m,Rs,vm,$m,bm,kt,ym,xt,Br,wm,Kr,Em,Ia,Am,km,xm,Pt,Qr,Pm,Xr,jm,La,Dm,Tm,zm,jt,Jr,Sm,Zr,Im,Oa,Lm,Om,Nm,Dt,ea,Cm,ta,qm,Na,Um,Vm,Rm,Tt,ra,Gm,aa,Mm,Gs,Wm,Hm,Fm,ee,oa,Ym,ye,Bm,Ms,Km,Qm,Ws,Xm,Jm,Zm,Hs,eu,tu,U,sa,ru,G,au,Fs,ou,su,Ys,cu,nu,Bs,lu,iu,du,Ks,pu,hu,zt,mu,St,ca,uu,na,fu,Qs,gu,_u,vu,te,la,$u,Xs,bu,yu,It,wu,Lt,ia,Eu,Js,Au,ku,Ot,da,xu,we,Pu,Zs,ju,Du,Ca,Tu,zu,Su,Nt,pa,Iu,ec,Lu,sn;return f=new O({}),Mt=new O({}),xe=new ro({props:{$$slots:{default:[u_]},$$scope:{ctx:T}}}),je=new ro({props:{warning:!0,$$slots:{default:[f_]},$$scope:{ctx:T}}}),Ht=new O({}),Ft=new O({}),Yt=new I({props:{code:`- print("My thing I want to print!")
+ accelerator.print("My thing I want to print!")`,highlighted:`<span class="hljs-deletion">- print(&quot;My thing I want to print!&quot;)</span>
<span class="hljs-addition">+ accelerator.print(&quot;My thing I want to print!&quot;)</span>`}}),Bt=new O({}),Kt=new O({}),Qt=new I({props:{code:`if accelerator.is_local_main_process:
    do_thing_once_per_server()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_local_main_process:
    do_thing_once_per_server()`}}),Xt=new I({props:{code:`@accelerator.on_local_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once_per_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once_per_server()`}}),Jt=new O({}),Zt=new I({props:{code:`if accelerator.is_main_process:
    do_thing_once()`,highlighted:`<span class="hljs-keyword">if</span> accelerator.is_main_process:
    do_thing_once()`}}),er=new I({props:{code:`@accelerator.on_main_process
def do_my_thing():
    "Something done once per server"
    do_thing_once()`,highlighted:`<span class="hljs-meta">@accelerator.on_main_process</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done once per server&quot;</span>
    do_thing_once()`}}),tr=new O({}),rr=new I({props:{code:`@accelerator.on_local_process(local_process_idx=0)
def do_my_thing():
    "Something done on process index 0 on each server"
    do_thing_on_index_zero_on_each_server()`,highlighted:`<span class="hljs-meta">@accelerator.on_local_process(<span class="hljs-params">local_process_idx=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0 on each server&quot;</span>
    do_thing_on_index_zero_on_each_server()`}}),ar=new I({props:{code:`@accelerator.on_process(process_index=0)
def do_my_thing():
    "Something done on process index 0"
    do_thing_on_index_zero()`,highlighted:`<span class="hljs-meta">@accelerator.on_process(<span class="hljs-params">process_index=<span class="hljs-number">0</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">do_my_thing</span>():
    <span class="hljs-string">&quot;Something done on process index 0&quot;</span>
    do_thing_on_index_zero()`}}),or=new O({}),sr=new O({}),cr=new I({props:{code:`model = MyModel()
model = accelerator.prepare(model)
# Unwrap
model = accelerator.unwrap_model(model)`,highlighted:`model = MyModel()
model = accelerator.prepare(model)
<span class="hljs-comment"># Unwrap</span>
model = accelerator.unwrap_model(model)`}}),nr=new I({props:{code:`  state_dict = model.state_dict()
- torch.save(state_dict, "my_state.pkl")
+ accelerator.save(state_dict, "my_state.pkl")`,highlighted:`  state_dict = model.state_dict()
<span class="hljs-deletion">- torch.save(state_dict, &quot;my_state.pkl&quot;)</span>
<span class="hljs-addition">+ accelerator.save(state_dict, &quot;my_state.pkl&quot;)</span>`}}),lr=new O({}),ir=new O({}),dr=new I({props:{code:`- accelerator = Accelerator()
+ accelerator = Accelerator(gradient_accumulation_steps=2)

  for (input, label) in training_dataloader:
+     with accelerator.accumulate(model):
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`,highlighted:`<span class="hljs-deletion">- accelerator = Accelerator()</span>
<span class="hljs-addition">+ accelerator = Accelerator(gradient_accumulation_steps=2)</span>

  for (input, label) in training_dataloader:
<span class="hljs-addition">+     with accelerator.accumulate(model):</span>
          predictions = model(input)
          loss = loss_function(predictions, labels)
          accelerator.backward(loss)
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()`}}),pr=new O({}),hr=new P({props:{name:"class accelerate.Accelerator",anchor:"accelerate.Accelerator",parameters:[{name:"device_placement",val:": bool = True"},{name:"split_batches",val:": bool = False"},{name:"fp16",val:": bool = None"},{name:"mixed_precision",val:": typing.Union[accelerate.utils.dataclasses.PrecisionType, str] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"cpu",val:": bool = False"},{name:"deepspeed_plugin",val:": DeepSpeedPlugin = None"},{name:"fsdp_plugin",val:": FullyShardedDataParallelPlugin = None"},{name:"rng_types",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.RNGType]], NoneType] = None"},{name:"log_with",val:": typing.Union[typing.List[typing.Union[str, accelerate.utils.dataclasses.LoggerType, accelerate.tracking.GeneralTracker]], NoneType] = None"},{name:"logging_dir",val:": typing.Union[str, os.PathLike, NoneType] = None"},{name:"dispatch_batches",val:": typing.Optional[bool] = None"},{name:"step_scheduler_with_optimizer",val:": bool = True"},{name:"kwargs_handlers",val:": typing.Optional[typing.List[accelerate.utils.dataclasses.KwargsHandler]] = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the accelerator should put objects on device (tensors yielded by the dataloader, model,
etc&#x2026;).`,name:"device_placement"},{anchor:"accelerate.Accelerator.split_batches",description:`<strong>split_batches</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If
<code>True</code> the actual batch size used will be the same on any kind of distributed processes, but it must be a
round multiple of the <code>num_processes</code> you are using. If <code>False</code>, actual batch size used will be the one set
in your script multiplied by the number of processes.`,name:"split_batches"},{anchor:"accelerate.Accelerator.mixed_precision",description:`<strong>mixed_precision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Whether or not to use mixed precision training (fp16 or bfloat16). Choose from &#x2018;no&#x2019;,&#x2018;fp16&#x2019;,&#x2018;bf16&#x2019;. Will
default to the value in the environment variable <code>MIXED_PRECISION</code>, which will use the default value in the
accelerate config of the current system or the flag passed with the <code>accelerate.launch</code> command. &#x2018;fp16&#x2019;
requires pytorch 1.6 or higher. &#x2018;bf16&#x2019; requires pytorch 1.10 or higher.`,name:"mixed_precision"},{anchor:"accelerate.Accelerator.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, default to 1) &#x2014;
The number of steps that should pass before gradients are accumulated. A number &gt; 1 should be combined with
<code>Accelerator.accumulate</code>.`,name:"gradient_accumulation_steps"},{anchor:"accelerate.Accelerator.cpu",description:`<strong>cpu</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to force the script to execute on CPU. Will ignore GPU available if set to <code>True</code> and force
the execution on one process only.`,name:"cpu"},{anchor:"accelerate.Accelerator.deepspeed_plugin",description:`<strong>deepspeed_plugin</strong> (<code>DeepSpeedPlugin</code>, <em>optional</em>) &#x2014;
Tweak your DeepSpeed related args using this argument. This argument is optional and can be configured
directly using <em>accelerate config</em>`,name:"deepspeed_plugin"},{anchor:"accelerate.Accelerator.fsdp_plugin",description:`<strong>fsdp_plugin</strong> (<code>FullyShardedDataParallelPlugin</code>, <em>optional</em>) &#x2014;
Tweak your FSDP related args using this argument. This argument is optional and can be configured directly
using <em>accelerate config</em>`,name:"fsdp_plugin"},{anchor:"accelerate.Accelerator.rng_types",description:`<strong>rng_types</strong> (list of <code>str</code> or <code>RNGType</code>) &#x2014;
The list of random number generators to synchronize at the beginning of each iteration in your prepared
dataloaders. Should be one or several of:</p>
<ul>
<li><code>&quot;torch&quot;</code>: the base torch random number generator</li>
<li><code>&quot;cuda&quot;</code>: the CUDA random number generator (GPU only)</li>
<li><code>&quot;xla&quot;</code>: the XLA random number generator (TPU only)</li>
<li><code>&quot;generator&quot;</code>: the <code>torch.Generator</code> of the sampler (or batch sampler if there is no sampler in your
dataloader) or of the iterable dataset (if it exists) if the underlying dataset is of that type.</li>
</ul>
<p>Will default to <code>[&quot;torch&quot;]</code> for PyTorch versions &lt;=1.5.1 and <code>[&quot;generator&quot;]</code> for PyTorch versions &gt;= 1.6.`,name:"rng_types"},{anchor:"accelerate.Accelerator.log_with",description:`<strong>log_with</strong> (list of <code>str</code>, <a href="/docs/accelerate/v0.13.2/en/package_reference/utilities#accelerate.utils.LoggerType">LoggerType</a> or <a href="/docs/accelerate/v0.13.2/en/package_reference/tracking#accelerate.tracking.GeneralTracker">GeneralTracker</a>, <em>optional</em>) &#x2014;
A list of loggers to be setup for experiment tracking. Should be one or several of:</p>
<ul>
<li><code>&quot;all&quot;</code></li>
<li><code>&quot;tensorboard&quot;</code></li>
<li><code>&quot;wandb&quot;</code></li>
<li><code>&quot;comet_ml&quot;</code>
If <code>&quot;all&quot;</code> is selected, will pick up all available trackers in the environment and initialize them. Can
also accept implementations of <code>GeneralTracker</code> for custom trackers, and can be combined with <code>&quot;all&quot;</code>.</li>
</ul>`,name:"log_with"},{anchor:"accelerate.Accelerator.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <code>os.PathLike</code>, <em>optional</em>) &#x2014;
A path to a directory for storing logs of locally-compatible loggers.`,name:"logging_dir"},{anchor:"accelerate.Accelerator.dispatch_batches",description:`<strong>dispatch_batches</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, the dataloader prepared by the Accelerator is only iterated through on the main process
and then the batches are split and broadcast to each process. Will default to <code>True</code> for <code>DataLoader</code> whose
underlying dataset is an <code>IterableDataset</code>, <code>False</code> otherwise.`,name:"dispatch_batches"},{anchor:"accelerate.Accelerator.step_scheduler_with_optimizer",description:"<strong>step_scheduler_with_optimizer</strong> (<code>bool</code>, *optional<code>, defaults to </code>True<code>) -- Set </code>True<code>if the learning rate scheduler is stepped at the same time as the optimizer,</code>False` if only\ndone under certain circumstances (at the end of each epoch, for instance).",name:"step_scheduler_with_optimizer"},{anchor:"accelerate.Accelerator.kwargs_handlers",description:`<strong>kwargs_handlers</strong> (<code>List[KwargHandler]</code>, <em>optional</em>) &#x2014;
A list of <code>KwargHandler</code> to customize how the objects related to distributed training or mixed precision
are created. See <a href="kwargs">kwargs</a> for more information.`,name:"kwargs_handlers"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L80"}}),mr=new P({props:{name:"accumulate",anchor:"accelerate.Accelerator.accumulate",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.accumulate.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L507"}}),ct=new gl({props:{anchor:"accelerate.Accelerator.accumulate.example",$$slots:{default:[g_]},$$scope:{ctx:T}}}),ur=new P({props:{name:"autocast",anchor:"accelerate.Accelerator.autocast",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1516"}}),fr=new P({props:{name:"backward",anchor:"accelerate.Accelerator.backward",parameters:[{name:"loss",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L992"}}),_r=new P({props:{name:"clear",anchor:"accelerate.Accelerator.clear",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1424"}}),$r=new P({props:{name:"clip_grad_norm_",anchor:"accelerate.Accelerator.clip_grad_norm_",parameters:[{name:"parameters",val:""},{name:"max_norm",val:""},{name:"norm_type",val:" = 2"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1029"}}),it=new gl({props:{anchor:"accelerate.Accelerator.clip_grad_norm_.example",$$slots:{default:[__]},$$scope:{ctx:T}}}),yr=new P({props:{name:"clip_grad_value_",anchor:"accelerate.Accelerator.clip_grad_value_",parameters:[{name:"parameters",val:""},{name:"clip_value",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1064"}}),dt=new gl({props:{anchor:"accelerate.Accelerator.clip_grad_value_.example",$$slots:{default:[v_]},$$scope:{ctx:T}}}),Er=new P({props:{name:"end_training",anchor:"accelerate.Accelerator.end_training",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1263"}}),Ar=new P({props:{name:"free_memory",anchor:"accelerate.Accelerator.free_memory",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1412"}}),kr=new P({props:{name:"gather",anchor:"accelerate.Accelerator.gather",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to gather across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1091",returnDescription:`
<p>The gathered tensor(s). Note that the
first dimension of the result is <em>num_processes</em> multiplied by the first dimension of the input tensors.</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),Pr=new P({props:{name:"gather_for_metrics",anchor:"accelerate.Accelerator.gather_for_metrics",parameters:[{name:"tensor",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.gather_for_metrics.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors for calculating metrics across all processes.`,name:"tensor"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1109"}}),Dr=new P({props:{name:"get_state_dict",anchor:"accelerate.Accelerator.get_state_dict",parameters:[{name:"model",val:""},{name:"unwrap",val:" = True"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_state_dict.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model sent through <a href="/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare">Accelerator.prepare()</a>`,name:"model"},{anchor:"accelerate.Accelerator.get_state_dict.unwrap",description:`<strong>unwrap</strong> (<code>bool</code>, <em>optional</em>, defaults to True) &#x2014;
Whether to return the original underlying state_dict of <code>model</code> or to return the wrapped state_dict`,name:"unwrap"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1456"}}),zr=new P({props:{name:"get_tracker",anchor:"accelerate.Accelerator.get_tracker",parameters:[{name:"name",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.get_tracker.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
The name of a tracker, corresponding to the <code>.name</code> property.`,name:"name"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1229"}}),Sr=new P({props:{name:"init_trackers",anchor:"accelerate.Accelerator.init_trackers",parameters:[{name:"project_name",val:": str"},{name:"config",val:": typing.Optional[dict] = None"},{name:"init_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.init_trackers.project_name",description:`<strong>project_name</strong> (<code>str</code>) &#x2014;
The name of the project. All trackers will save their data based on this`,name:"project_name"},{anchor:"accelerate.Accelerator.init_trackers.config",description:`<strong>config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Optional starting configuration to be logged.`,name:"config"},{anchor:"accelerate.Accelerator.init_trackers.init_kwargs",description:`<strong>init_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>__init__</code> function. Should be
formatted like so:`,name:"init_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1194"}}),Lr=new P({props:{name:"load_state",anchor:"accelerate.Accelerator.load_state",parameters:[{name:"input_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.load_state.input_dir",description:`<strong>input_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder all relevant weights and states were saved in.`,name:"input_dir"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1345"}}),_t=new ro({props:{$$slots:{default:[$_]},$$scope:{ctx:T}}}),Or=new P({props:{name:"local_main_process_first",anchor:"accelerate.Accelerator.local_main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L444"}}),Nr=new P({props:{name:"log",anchor:"accelerate.Accelerator.log",parameters:[{name:"values",val:": dict"},{name:"step",val:": typing.Optional[int] = None"},{name:"log_kwargs",val:": typing.Optional[dict] = {}"}],parametersDescription:[{anchor:"accelerate.Accelerator.log.values",description:`<strong>values</strong> (<code>dict</code>) &#x2014;
Values should be a dictionary-like object containing only types <code>int</code>, <code>float</code>, or <code>str</code>.`,name:"values"},{anchor:"accelerate.Accelerator.log.step",description:`<strong>step</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The run step. If included, the log will be affiliated with this step.`,name:"step"},{anchor:"accelerate.Accelerator.log.log_kwargs",description:`<strong>log_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
A nested dictionary of kwargs to be passed to a specific tracker&#x2019;s <code>log</code> function. Should be formatted
like so:`,name:"log_kwargs"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1243"}}),Cr=new P({props:{name:"main_process_first",anchor:"accelerate.Accelerator.main_process_first",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L435"}}),qr=new P({props:{name:"no_sync",anchor:"accelerate.Accelerator.no_sync",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.no_sync.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
PyTorch Module that was prepared with <code>Accelerator.prepare</code>`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L453"}}),$t=new gl({props:{anchor:"accelerate.Accelerator.no_sync.example",$$slots:{default:[b_]},$$scope:{ctx:T}}}),Rr=new P({props:{name:"on_local_main_process",anchor:"accelerate.Accelerator.on_local_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L384"}}),Gr=new P({props:{name:"on_local_process",anchor:"accelerate.Accelerator.on_local_process",parameters:[{name:"local_process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L411"}}),Mr=new P({props:{name:"on_main_process",anchor:"accelerate.Accelerator.on_main_process",parameters:[{name:"func",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L372"}}),Wr=new P({props:{name:"on_process",anchor:"accelerate.Accelerator.on_process",parameters:[{name:"process_idx",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L396"}}),Hr=new P({props:{name:"pad_across_processes",anchor:"accelerate.Accelerator.pad_across_processes",parameters:[{name:"tensor",val:""},{name:"dim",val:" = 0"},{name:"pad_index",val:" = 0"},{name:"pad_first",val:" = False"}],parametersDescription:[{anchor:"accelerate.Accelerator.pad_across_processes.tensor",description:`<strong>tensor</strong> (nested list/tuple/dictionary of <code>torch.Tensor</code>) &#x2014;
The data to gather.`,name:"tensor"},{anchor:"accelerate.Accelerator.pad_across_processes.dim",description:`<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The dimension on which to pad.`,name:"dim"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_index",description:`<strong>pad_index</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The value with which to pad.`,name:"pad_index"},{anchor:"accelerate.Accelerator.pad_across_processes.pad_first",description:`<strong>pad_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to pad at the beginning or the end.`,name:"pad_first"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1159"}}),Fr=new P({props:{name:"prepare",anchor:"accelerate.Accelerator.prepare",parameters:[{name:"*args",val:""},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare.*args",description:`<strong>*args</strong> (list of objects) &#x2014;
Any of the following type of objects:</p>
<ul>
<li><code>torch.utils.data.DataLoader</code>: PyTorch Dataloader</li>
<li><code>torch.nn.Module</code>: PyTorch Module</li>
<li><code>torch.optim.Optimizer</code>: PyTorch Optimizer</li>
<li><code>torch.optim.lr_scheduler._LRScheduler</code>: PyTorch LR Scheduler</li>
</ul>`,name:"*args"},{anchor:"accelerate.Accelerator.prepare.device_placement",description:`<strong>device_placement</strong> (<code>List[bool]</code>, <em>optional</em>) &#x2014;
Used to customize whether automatic device placement should be performed for each object passed. Needs
to be a list of the same length as <code>args</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L605"}}),kt=new ro({props:{$$slots:{default:[y_]},$$scope:{ctx:T}}}),Br=new P({props:{name:"prepare_data_loader",anchor:"accelerate.Accelerator.prepare_data_loader",parameters:[{name:"data_loader",val:": DataLoader"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_data_loader.data_loader",description:`<strong>data_loader</strong> (<code>torch.utils.data.DataLoader</code>) &#x2014;
A vanilla PyTorch DataLoader to prepare`,name:"data_loader"},{anchor:"accelerate.Accelerator.prepare_data_loader.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the batches on the proper device in the prepared dataloader. Will default to
<code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L926"}}),Qr=new P({props:{name:"prepare_model",anchor:"accelerate.Accelerator.prepare_model",parameters:[{name:"model",val:": Module"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
A PyTorch model to prepare. You don&#x2019;t need to prepare a model if it is used only for inference without
any kind of mixed precision`,name:"model"},{anchor:"accelerate.Accelerator.prepare_model.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the model on the proper device. Will default to <code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L701"}}),Jr=new P({props:{name:"prepare_optimizer",anchor:"accelerate.Accelerator.prepare_optimizer",parameters:[{name:"optimizer",val:": Optimizer"},{name:"device_placement",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_optimizer.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
A vanilla PyTorch optimizer to prepare`,name:"optimizer"},{anchor:"accelerate.Accelerator.prepare_optimizer.device_placement",description:`<strong>device_placement</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to place the optimizer on the proper device. Will default to <code>self.device_placement</code>.`,name:"device_placement"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L951"}}),ea=new P({props:{name:"prepare_scheduler",anchor:"accelerate.Accelerator.prepare_scheduler",parameters:[{name:"scheduler",val:": _LRScheduler"}],parametersDescription:[{anchor:"accelerate.Accelerator.prepare_scheduler.scheduler",description:`<strong>scheduler</strong> (<code>torch.optim.lr_scheduler._LRScheduler</code>) &#x2014;
A vanilla PyTorch scheduler to prepare`,name:"scheduler"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L968"}}),ra=new P({props:{name:"print",anchor:"accelerate.Accelerator.print",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L543"}}),oa=new P({props:{name:"reduce",anchor:"accelerate.Accelerator.reduce",parameters:[{name:"tensor",val:""},{name:"reduction",val:" = 'sum'"}],parametersDescription:[{anchor:"accelerate.Accelerator.reduce.tensor",description:`<strong>tensor</strong> (<code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code>) &#x2014;
The tensors to reduce across all processes.`,name:"tensor"},{anchor:"accelerate.Accelerator.reduce.reduction",description:`<strong>reduction</strong> (<code>str</code>, <em>optional</em>, defaults to &#x201C;sum&#x201D;) &#x2014;
A reduction type, can be one of &#x2018;sum&#x2019;, &#x2018;mean&#x2019;, or &#x2018;none&#x2019;. If &#x2018;none&#x2019;, will not perform any operation.`,name:"reduction"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1141",returnDescription:`
<p>The reduced tensor(s).</p>
`,returnType:`
<p><code>torch.Tensor</code>, or a nested tuple/list/dictionary of <code>torch.Tensor</code></p>
`}}),sa=new P({props:{name:"register_for_checkpointing",anchor:"accelerate.Accelerator.register_for_checkpointing",parameters:[{name:"*objects",val:""}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1492"}}),zt=new ro({props:{$$slots:{default:[w_]},$$scope:{ctx:T}}}),ca=new P({props:{name:"save",anchor:"accelerate.Accelerator.save",parameters:[{name:"obj",val:""},{name:"f",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.save.f",description:`<strong>f</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Where to save the content of <code>obj</code>.`,name:"f"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1272"}}),la=new P({props:{name:"save_state",anchor:"accelerate.Accelerator.save_state",parameters:[{name:"output_dir",val:": str"}],parametersDescription:[{anchor:"accelerate.Accelerator.save_state.output_dir",description:`<strong>output_dir</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
The name of the folder to save all relevant weights and states.`,name:"output_dir"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1283"}}),It=new ro({props:{$$slots:{default:[E_]},$$scope:{ctx:T}}}),ia=new P({props:{name:"unscale_gradients",anchor:"accelerate.Accelerator.unscale_gradients",parameters:[{name:"optimizer",val:" = None"}],parametersDescription:[{anchor:"accelerate.Accelerator.unscale_gradients.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code> or <code>List[torch.optim.Optimizer]</code>, <em>optional</em>) &#x2014;
The optimizer(s) for which to unscale gradients. If not set, will unscale gradients on all optimizers
that were passed to <a href="/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare">prepare()</a>.`,name:"optimizer"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1009"}}),da=new P({props:{name:"unwrap_model",anchor:"accelerate.Accelerator.unwrap_model",parameters:[{name:"model",val:""}],parametersDescription:[{anchor:"accelerate.Accelerator.unwrap_model.model",description:`<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014;
The model to unwrap.`,name:"model"}],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1176"}}),pa=new P({props:{name:"wait_for_everyone",anchor:"accelerate.Accelerator.wait_for_everyone",parameters:[],source:"https://github.com/huggingface/accelerate/blob/v0.13.2/src/accelerate/accelerator.py#L1187"}}),{c(){h=a("meta"),k=l(),A=a("h1"),E=a("a"),j=a("span"),_(f.$$.fragment),x=l(),N=a("span"),re=c("Accelerator"),Ae=l(),C=a("p"),ae=c("The "),S=a("a"),fa=c("Accelerator"),ga=c(` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),Gt=l(),oe=a("h2"),ke=a("a"),ao=a("span"),_(Mt.$$.fragment),vl=l(),oo=a("span"),$l=c("Quick adaptation of your code"),bc=l(),_a=a("p"),bl=c("To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),yc=l(),M=a("ol"),se=a("li"),yl=c("Initialize an "),va=a("a"),wl=c("Accelerator"),El=c(" object (that we will call "),so=a("code"),Al=c("accelerator"),kl=c(" throughout this page) as early as possible in your script."),xl=l(),Wt=a("li"),Pl=c("Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),$a=a("a"),jl=c("prepare()"),Dl=c(" method."),Tl=l(),V=a("li"),zl=c("Remove all the "),co=a("code"),Sl=c(".cuda()"),Il=c(" or "),no=a("code"),Ll=c(".to(device)"),Ol=c(" from your code and let the "),lo=a("code"),Nl=c("accelerator"),Cl=c(" handle the device placement for you."),wc=l(),_(xe.$$.fragment),Ec=l(),ce=a("ol"),Pe=a("li"),ql=c("Replace "),io=a("code"),Ul=c("loss.backward()"),Vl=c(" in your code with "),po=a("code"),Rl=c("accelerator.backward(loss)"),Gl=l(),ba=a("li"),Ml=c("Gather your predictions and labels before storing them or using them for metric computation using "),ya=a("a"),Wl=c("gather()"),Ac=l(),_(je.$$.fragment),kc=l(),De=a("p"),Hl=c(`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),ho=a("code"),Fl=c("accelerator"),Yl=c(":"),xc=l(),ne=a("h2"),Te=a("a"),mo=a("span"),_(Ht.$$.fragment),Bl=l(),uo=a("span"),Kl=c("Advanced recommendations"),Pc=l(),le=a("h3"),ze=a("a"),fo=a("span"),_(Ft.$$.fragment),Ql=l(),go=a("span"),Xl=c("Printing"),jc=l(),ie=a("p"),_o=a("code"),Jl=c("print"),Zl=c(" statements should be replaced by "),wa=a("a"),ei=c("print()"),ti=c(" to be printed once per process"),Dc=l(),_(Yt.$$.fragment),Tc=l(),de=a("h3"),Se=a("a"),vo=a("span"),_(Bt.$$.fragment),ri=l(),$o=a("span"),ai=c("Executing processes"),zc=l(),pe=a("h4"),Ie=a("a"),bo=a("span"),_(Kt.$$.fragment),oi=l(),yo=a("span"),si=c("Once on a single server"),Sc=l(),Le=a("p"),ci=c("For statements that should be executed once per server, use "),wo=a("code"),ni=c("is_local_main_process"),li=c(":"),Ic=l(),_(Qt.$$.fragment),Lc=l(),Oe=a("p"),ii=c("A function can be wrapped using the "),Ea=a("a"),di=c("on_local_main_process()"),pi=c(` function to achieve the same
behavior on a function\u2019s execution:`),Oc=l(),_(Xt.$$.fragment),Nc=l(),he=a("h4"),Ne=a("a"),Eo=a("span"),_(Jt.$$.fragment),hi=l(),Ao=a("span"),mi=c("Only ever once across all servers"),Cc=l(),Ce=a("p"),ui=c("For statements that should only ever be executed once, use "),ko=a("code"),fi=c("is_main_process"),gi=c(":"),qc=l(),_(Zt.$$.fragment),Uc=l(),qe=a("p"),_i=c("A function can be wrapped using the "),Aa=a("a"),vi=c("on_main_process()"),$i=c(` function to achieve the same
behavior on a function\u2019s execution:`),Vc=l(),_(er.$$.fragment),Rc=l(),me=a("h4"),Ue=a("a"),xo=a("span"),_(tr.$$.fragment),bi=l(),Po=a("span"),yi=c("On specific processes"),Gc=l(),ka=a("p"),wi=c(`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),Mc=l(),_(rr.$$.fragment),Wc=l(),_(ar.$$.fragment),Hc=l(),ue=a("h3"),Ve=a("a"),jo=a("span"),_(or.$$.fragment),Ei=l(),Do=a("span"),Ai=c("Synchronicity control"),Fc=l(),Re=a("p"),ki=c("Use "),xa=a("a"),xi=c("wait_for_everyone()"),Pi=c(" to make sure all processes join that point before continuing. (Useful before a model save for instance)"),Yc=l(),fe=a("h3"),Ge=a("a"),To=a("span"),_(sr.$$.fragment),ji=l(),zo=a("span"),Di=c("Saving and loading"),Bc=l(),Me=a("p"),Ti=c("Use "),Pa=a("a"),zi=c("unwrap_model()"),Si=c(" before saving to remove all special model wrappers added during the distributed process."),Kc=l(),_(cr.$$.fragment),Qc=l(),W=a("p"),Ii=c("Use "),ja=a("a"),Li=c("save()"),Oi=c(" instead of "),So=a("code"),Ni=c("torch.save"),Ci=c(":"),Xc=l(),_(nr.$$.fragment),Jc=l(),ge=a("h3"),We=a("a"),Io=a("span"),_(lr.$$.fragment),qi=l(),Lo=a("span"),Ui=c("Operations"),Zc=l(),L=a("p"),Vi=c("Use "),He=a("a"),Ri=c("clip"),Oo=a("em"),Gi=c("grad_norm"),Mi=c("()"),Wi=c(" instead of "),No=a("code"),Hi=c("torch.nn.utils.clip_grad_norm_"),Fi=c(" and "),Fe=a("a"),Yi=c("clip"),Co=a("em"),Bi=c("grad_value"),Ki=c("()"),Qi=c(" instead of "),qo=a("code"),Xi=c("torch.nn.utils.clip_grad_value"),en=l(),_e=a("h3"),Ye=a("a"),Uo=a("span"),_(ir.$$.fragment),Ji=l(),Vo=a("span"),Zi=c("Gradient Accumulation"),tn=l(),Be=a("p"),ed=c("To perform gradient accumulation use "),Da=a("a"),td=c("accumulate()"),rd=c(` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),rn=l(),_(dr.$$.fragment),an=l(),ve=a("h2"),Ke=a("a"),Ro=a("span"),_(pr.$$.fragment),ad=l(),Go=a("span"),od=c("Overall API documentation:"),on=l(),u=a("div"),_(hr.$$.fragment),sd=l(),Mo=a("p"),cd=c("Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),nd=l(),Wo=a("p"),Ho=a("strong"),ld=c("Available attributes:"),id=l(),D=a("ul"),Qe=a("li"),Fo=a("strong"),dd=c("device"),pd=c(" ("),Yo=a("code"),hd=c("torch.device"),md=c(") \u2014 The device to use."),ud=l(),Xe=a("li"),Bo=a("strong"),fd=c("distributed_type"),gd=c(" ("),Ta=a("a"),_d=c("DistributedType"),vd=c(") \u2014 The distributed training configuration."),$d=l(),Je=a("li"),Ko=a("strong"),bd=c("local_process_index"),yd=c(" ("),Qo=a("code"),wd=c("int"),Ed=c(") \u2014 The process index on the current machine."),Ad=l(),Ze=a("li"),Xo=a("strong"),kd=c("mixed_precision"),xd=c(" ("),Jo=a("code"),Pd=c("str"),jd=c(") \u2014 The configured mixed precision mode."),Dd=l(),et=a("li"),Zo=a("strong"),Td=c("num_processes"),zd=c(" ("),es=a("code"),Sd=c("int"),Id=c(") \u2014 The total number of processes used for training."),Ld=l(),tt=a("li"),ts=a("strong"),Od=c("optimizer_step_was_skipped"),Nd=c(" ("),rs=a("code"),Cd=c("bool"),qd=c(`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),Ud=l(),rt=a("li"),as=a("strong"),Vd=c("process_index"),Rd=c(" ("),os=a("code"),Gd=c("int"),Md=c(") \u2014 The overall index of the current process among all processes."),Wd=l(),at=a("li"),ss=a("strong"),Hd=c("state"),Fd=c(" ("),za=a("a"),Yd=c("AcceleratorState"),Bd=c(") \u2014 The distributed setup state."),Kd=l(),ot=a("li"),cs=a("strong"),Qd=c("sync_gradients"),Xd=c(" ("),ns=a("code"),Jd=c("bool"),Zd=c(") \u2014 Whether the gradients are currently being synced across all processes."),ep=l(),st=a("li"),ls=a("strong"),tp=c("use_distributed"),rp=c(" ("),is=a("code"),ap=c("bool"),op=c(") \u2014 Whether the current configuration is for distributed training."),sp=l(),H=a("div"),_(mr.$$.fragment),cp=l(),ds=a("p"),np=c("A context manager that will lightly wrap around and perform gradient accumulation automatically"),lp=l(),_(ct.$$.fragment),ip=l(),nt=a("div"),_(ur.$$.fragment),dp=l(),ps=a("p"),pp=c(`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),hp=l(),F=a("div"),_(fr.$$.fragment),mp=l(),$e=a("p"),up=c("Scales the gradients in accordance to "),hs=a("code"),fp=c("Accelerator.gradient_accumulation_steps"),gp=c(` and calls the correct
`),ms=a("code"),_p=c("backward()"),vp=c(" based on the configuration."),$p=l(),gr=a("p"),bp=c("Should be used in lieu of "),us=a("code"),yp=c("loss.backward()"),wp=c("."),Ep=l(),lt=a("div"),_(_r.$$.fragment),Ap=l(),vr=a("p"),kp=c("Alias for "),fs=a("code"),xp=c("Accelerate.free_memory"),Pp=c(`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),jp=l(),Y=a("div"),_($r.$$.fragment),Dp=l(),br=a("p"),Tp=c("Should be used in place of "),gs=a("code"),zp=c("torch.nn.utils.clip_grad_norm_"),Sp=c("."),Ip=l(),_(it.$$.fragment),Lp=l(),B=a("div"),_(yr.$$.fragment),Op=l(),wr=a("p"),Np=c("Should be used in place of "),_s=a("code"),Cp=c("torch.nn.utils.clip_grad_value_"),qp=c("."),Up=l(),_(dt.$$.fragment),Vp=l(),pt=a("div"),_(Er.$$.fragment),Rp=l(),vs=a("p"),Gp=c(`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),Mp=l(),ht=a("div"),_(Ar.$$.fragment),Wp=l(),$s=a("p"),Hp=c(`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),Fp=l(),K=a("div"),_(kr.$$.fragment),Yp=l(),xr=a("p"),Bp=c("Gather the values in "),bs=a("em"),Kp=c("tensor"),Qp=c(` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),Xp=l(),ys=a("p"),Jp=c(`Note:
This gather happens in all processes.`),Zp=l(),mt=a("div"),_(Pr.$$.fragment),eh=l(),jr=a("p"),th=c("Gathers "),ws=a("code"),rh=c("tensor"),ah=c(` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),oh=l(),ut=a("div"),_(Dr.$$.fragment),sh=l(),Tr=a("p"),ch=c("Returns the state dictionary of a model sent through "),Sa=a("a"),nh=c("Accelerator.prepare()"),lh=c(" in full precision"),ih=l(),ft=a("div"),_(zr.$$.fragment),dh=l(),R=a("p"),ph=c("Returns a "),Es=a("code"),hh=c("tracker"),mh=c(" from "),As=a("code"),uh=c("self.trackers"),fh=c(" based on "),ks=a("code"),gh=c("name"),_h=c(" on the main process only."),vh=l(),gt=a("div"),_(Sr.$$.fragment),$h=l(),Ir=a("p"),bh=c("Initializes a run for all trackers stored in "),xs=a("code"),yh=c("self.log_with"),wh=c(", potentially with starting configurations"),Eh=l(),Q=a("div"),_(Lr.$$.fragment),Ah=l(),Ps=a("p"),kh=c("Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),xh=l(),_(_t.$$.fragment),Ph=l(),X=a("div"),_(Or.$$.fragment),jh=l(),js=a("p"),Dh=c("Lets the local main process go inside a with block."),Th=l(),Ds=a("p"),zh=c("The other processes will enter the with block after the main process exits."),Sh=l(),vt=a("div"),_(Nr.$$.fragment),Ih=l(),be=a("p"),Lh=c("Logs "),Ts=a("code"),Oh=c("values"),Nh=c(" to all stored trackers in "),zs=a("code"),Ch=c("self.trackers"),qh=c(" on the main process only."),Uh=l(),J=a("div"),_(Cr.$$.fragment),Vh=l(),Ss=a("p"),Rh=c("Lets the main process go first inside a with block."),Gh=l(),Is=a("p"),Mh=c("The other processes will enter the with block after the main process exits."),Wh=l(),q=a("div"),_(qr.$$.fragment),Hh=l(),Ur=a("p"),Fh=c(`A context manager to disable gradient synchronizations across DDP processes by calling
`),Ls=a("code"),Yh=c("torch.nn.parallel.DistributedDataParallel.no_sync"),Bh=c("."),Kh=l(),Vr=a("p"),Qh=c("If "),Os=a("code"),Xh=c("model"),Jh=c(" is not in DDP, this context manager does nothing"),Zh=l(),_($t.$$.fragment),em=l(),bt=a("div"),_(Rr.$$.fragment),tm=l(),Ns=a("p"),rm=c("A decorator that will run the decorated function on the local main process only."),am=l(),yt=a("div"),_(Gr.$$.fragment),om=l(),Cs=a("p"),sm=c("A decorator that will run the decorated function on a given local process index only."),cm=l(),wt=a("div"),_(Mr.$$.fragment),nm=l(),qs=a("p"),lm=c("A decorator that will run the decorated function on the main process only."),im=l(),Et=a("div"),_(Wr.$$.fragment),dm=l(),Us=a("p"),pm=c("A decorator that will run the decorated function on a given process index only."),hm=l(),At=a("div"),_(Hr.$$.fragment),mm=l(),Vs=a("p"),um=c(`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),fm=l(),Z=a("div"),_(Fr.$$.fragment),gm=l(),Yr=a("p"),_m=c("Prepare all objects passed in "),Rs=a("code"),vm=c("args"),$m=c(` for distributed training and mixed precision, then return them in the same
order.`),bm=l(),_(kt.$$.fragment),ym=l(),xt=a("div"),_(Br.$$.fragment),wm=l(),Kr=a("p"),Em=c(`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Ia=a("a"),Am=c("Accelerator.prepare()"),km=c(" instead."),xm=l(),Pt=a("div"),_(Qr.$$.fragment),Pm=l(),Xr=a("p"),jm=c(`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),La=a("a"),Dm=c("Accelerator.prepare()"),Tm=c(" instead."),zm=l(),jt=a("div"),_(Jr.$$.fragment),Sm=l(),Zr=a("p"),Im=c(`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Oa=a("a"),Lm=c("Accelerator.prepare()"),Om=c(" instead."),Nm=l(),Dt=a("div"),_(ea.$$.fragment),Cm=l(),ta=a("p"),qm=c(`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),Na=a("a"),Um=c("Accelerator.prepare()"),Vm=c(" instead."),Rm=l(),Tt=a("div"),_(ra.$$.fragment),Gm=l(),aa=a("p"),Mm=c("Use in replacement of "),Gs=a("code"),Wm=c("print()"),Hm=c(" to only print once per server."),Fm=l(),ee=a("div"),_(oa.$$.fragment),Ym=l(),ye=a("p"),Bm=c("Reduce the values in "),Ms=a("em"),Km=c("tensor"),Qm=c(" across all processes based on "),Ws=a("em"),Xm=c("reduction"),Jm=c("."),Zm=l(),Hs=a("p"),eu=c(`Note:
All processes get the reduced value.`),tu=l(),U=a("div"),_(sa.$$.fragment),ru=l(),G=a("p"),au=c("Makes note of "),Fs=a("code"),ou=c("objects"),su=c(" and will save or load them in during "),Ys=a("code"),cu=c("save_state"),nu=c(" or "),Bs=a("code"),lu=c("load_state"),iu=c("."),du=l(),Ks=a("p"),pu=c(`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),hu=l(),_(zt.$$.fragment),mu=l(),St=a("div"),_(ca.$$.fragment),uu=l(),na=a("p"),fu=c("Save the object passed to disk once per machine. Use in place of "),Qs=a("code"),gu=c("torch.save"),_u=c("."),vu=l(),te=a("div"),_(la.$$.fragment),$u=l(),Xs=a("p"),bu=c("Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),yu=l(),_(It.$$.fragment),wu=l(),Lt=a("div"),_(ia.$$.fragment),Eu=l(),Js=a("p"),Au=c("Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),ku=l(),Ot=a("div"),_(da.$$.fragment),xu=l(),we=a("p"),Pu=c("Unwraps the "),Zs=a("code"),ju=c("model"),Du=c(" from the additional layer possible added by "),Ca=a("a"),Tu=c("prepare()"),zu=c(`. Useful before saving
the model.`),Su=l(),Nt=a("div"),_(pa.$$.fragment),Iu=l(),ec=a("p"),Lu=c(`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),this.h()},l(t){const p=h_('[data-svelte="svelte-1phssyn"]',document.head);h=o(p,"META",{name:!0,content:!0}),p.forEach(r),k=i(t),A=o(t,"H1",{class:!0});var ha=s(A);E=o(ha,"A",{id:!0,class:!0,href:!0});var tc=s(E);j=o(tc,"SPAN",{});var rc=s(j);v(f.$$.fragment,rc),rc.forEach(r),tc.forEach(r),x=i(ha),N=o(ha,"SPAN",{});var ac=s(N);re=n(ac,"Accelerator"),ac.forEach(r),ha.forEach(r),Ae=i(t),C=o(t,"P",{});var ma=s(C);ae=n(ma,"The "),S=o(ma,"A",{href:!0});var oc=s(S);fa=n(oc,"Accelerator"),oc.forEach(r),ga=n(ma,` is the main class provided by \u{1F917} Accelerate.
It serves at the main entrypoint for the API.`),ma.forEach(r),Gt=i(t),oe=o(t,"H2",{class:!0});var ua=s(oe);ke=o(ua,"A",{id:!0,class:!0,href:!0});var sc=s(ke);ao=o(sc,"SPAN",{});var cc=s(ao);v(Mt.$$.fragment,cc),cc.forEach(r),sc.forEach(r),vl=i(ua),oo=o(ua,"SPAN",{});var nc=s(oo);$l=n(nc,"Quick adaptation of your code"),nc.forEach(r),ua.forEach(r),bc=i(t),_a=o(t,"P",{});var Nu=s(_a);bl=n(Nu,"To quickly adapt your script to work on any kind of setup with \u{1F917} Accelerate just:"),Nu.forEach(r),yc=i(t),M=o(t,"OL",{});var qa=s(M);se=o(qa,"LI",{});var Ua=s(se);yl=n(Ua,"Initialize an "),va=o(Ua,"A",{href:!0});var Cu=s(va);wl=n(Cu,"Accelerator"),Cu.forEach(r),El=n(Ua," object (that we will call "),so=o(Ua,"CODE",{});var qu=s(so);Al=n(qu,"accelerator"),qu.forEach(r),kl=n(Ua," throughout this page) as early as possible in your script."),Ua.forEach(r),xl=i(qa),Wt=o(qa,"LI",{});var cn=s(Wt);Pl=n(cn,"Pass your dataloader(s), model(s), optimizer(s), and scheduler(s) to the "),$a=o(cn,"A",{href:!0});var Uu=s($a);jl=n(Uu,"prepare()"),Uu.forEach(r),Dl=n(cn," method."),cn.forEach(r),Tl=i(qa),V=o(qa,"LI",{});var Ct=s(V);zl=n(Ct,"Remove all the "),co=o(Ct,"CODE",{});var Vu=s(co);Sl=n(Vu,".cuda()"),Vu.forEach(r),Il=n(Ct," or "),no=o(Ct,"CODE",{});var Ru=s(no);Ll=n(Ru,".to(device)"),Ru.forEach(r),Ol=n(Ct," from your code and let the "),lo=o(Ct,"CODE",{});var Gu=s(lo);Nl=n(Gu,"accelerator"),Gu.forEach(r),Cl=n(Ct," handle the device placement for you."),Ct.forEach(r),qa.forEach(r),wc=i(t),v(xe.$$.fragment,t),Ec=i(t),ce=o(t,"OL",{start:!0});var nn=s(ce);Pe=o(nn,"LI",{});var lc=s(Pe);ql=n(lc,"Replace "),io=o(lc,"CODE",{});var Mu=s(io);Ul=n(Mu,"loss.backward()"),Mu.forEach(r),Vl=n(lc," in your code with "),po=o(lc,"CODE",{});var Wu=s(po);Rl=n(Wu,"accelerator.backward(loss)"),Wu.forEach(r),lc.forEach(r),Gl=i(nn),ba=o(nn,"LI",{});var Ou=s(ba);Ml=n(Ou,"Gather your predictions and labels before storing them or using them for metric computation using "),ya=o(Ou,"A",{href:!0});var Hu=s(ya);Wl=n(Hu,"gather()"),Hu.forEach(r),Ou.forEach(r),nn.forEach(r),Ac=i(t),v(je.$$.fragment,t),kc=i(t),De=o(t,"P",{});var ln=s(De);Hl=n(ln,`In most cases this is all that is needed. The next section lists a few more advanced use cases and nice features
you should search for and replace by the corresponding methods of your `),ho=o(ln,"CODE",{});var Fu=s(ho);Fl=n(Fu,"accelerator"),Fu.forEach(r),Yl=n(ln,":"),ln.forEach(r),xc=i(t),ne=o(t,"H2",{class:!0});var dn=s(ne);Te=o(dn,"A",{id:!0,class:!0,href:!0});var Yu=s(Te);mo=o(Yu,"SPAN",{});var Bu=s(mo);v(Ht.$$.fragment,Bu),Bu.forEach(r),Yu.forEach(r),Bl=i(dn),uo=o(dn,"SPAN",{});var Ku=s(uo);Kl=n(Ku,"Advanced recommendations"),Ku.forEach(r),dn.forEach(r),Pc=i(t),le=o(t,"H3",{class:!0});var pn=s(le);ze=o(pn,"A",{id:!0,class:!0,href:!0});var Qu=s(ze);fo=o(Qu,"SPAN",{});var Xu=s(fo);v(Ft.$$.fragment,Xu),Xu.forEach(r),Qu.forEach(r),Ql=i(pn),go=o(pn,"SPAN",{});var Ju=s(go);Xl=n(Ju,"Printing"),Ju.forEach(r),pn.forEach(r),jc=i(t),ie=o(t,"P",{});var ic=s(ie);_o=o(ic,"CODE",{});var Zu=s(_o);Jl=n(Zu,"print"),Zu.forEach(r),Zl=n(ic," statements should be replaced by "),wa=o(ic,"A",{href:!0});var ef=s(wa);ei=n(ef,"print()"),ef.forEach(r),ti=n(ic," to be printed once per process"),ic.forEach(r),Dc=i(t),v(Yt.$$.fragment,t),Tc=i(t),de=o(t,"H3",{class:!0});var hn=s(de);Se=o(hn,"A",{id:!0,class:!0,href:!0});var tf=s(Se);vo=o(tf,"SPAN",{});var rf=s(vo);v(Bt.$$.fragment,rf),rf.forEach(r),tf.forEach(r),ri=i(hn),$o=o(hn,"SPAN",{});var af=s($o);ai=n(af,"Executing processes"),af.forEach(r),hn.forEach(r),zc=i(t),pe=o(t,"H4",{class:!0});var mn=s(pe);Ie=o(mn,"A",{id:!0,class:!0,href:!0});var of=s(Ie);bo=o(of,"SPAN",{});var sf=s(bo);v(Kt.$$.fragment,sf),sf.forEach(r),of.forEach(r),oi=i(mn),yo=o(mn,"SPAN",{});var cf=s(yo);si=n(cf,"Once on a single server"),cf.forEach(r),mn.forEach(r),Sc=i(t),Le=o(t,"P",{});var un=s(Le);ci=n(un,"For statements that should be executed once per server, use "),wo=o(un,"CODE",{});var nf=s(wo);ni=n(nf,"is_local_main_process"),nf.forEach(r),li=n(un,":"),un.forEach(r),Ic=i(t),v(Qt.$$.fragment,t),Lc=i(t),Oe=o(t,"P",{});var fn=s(Oe);ii=n(fn,"A function can be wrapped using the "),Ea=o(fn,"A",{href:!0});var lf=s(Ea);di=n(lf,"on_local_main_process()"),lf.forEach(r),pi=n(fn,` function to achieve the same
behavior on a function\u2019s execution:`),fn.forEach(r),Oc=i(t),v(Xt.$$.fragment,t),Nc=i(t),he=o(t,"H4",{class:!0});var gn=s(he);Ne=o(gn,"A",{id:!0,class:!0,href:!0});var df=s(Ne);Eo=o(df,"SPAN",{});var pf=s(Eo);v(Jt.$$.fragment,pf),pf.forEach(r),df.forEach(r),hi=i(gn),Ao=o(gn,"SPAN",{});var hf=s(Ao);mi=n(hf,"Only ever once across all servers"),hf.forEach(r),gn.forEach(r),Cc=i(t),Ce=o(t,"P",{});var _n=s(Ce);ui=n(_n,"For statements that should only ever be executed once, use "),ko=o(_n,"CODE",{});var mf=s(ko);fi=n(mf,"is_main_process"),mf.forEach(r),gi=n(_n,":"),_n.forEach(r),qc=i(t),v(Zt.$$.fragment,t),Uc=i(t),qe=o(t,"P",{});var vn=s(qe);_i=n(vn,"A function can be wrapped using the "),Aa=o(vn,"A",{href:!0});var uf=s(Aa);vi=n(uf,"on_main_process()"),uf.forEach(r),$i=n(vn,` function to achieve the same
behavior on a function\u2019s execution:`),vn.forEach(r),Vc=i(t),v(er.$$.fragment,t),Rc=i(t),me=o(t,"H4",{class:!0});var $n=s(me);Ue=o($n,"A",{id:!0,class:!0,href:!0});var ff=s(Ue);xo=o(ff,"SPAN",{});var gf=s(xo);v(tr.$$.fragment,gf),gf.forEach(r),ff.forEach(r),bi=i($n),Po=o($n,"SPAN",{});var _f=s(Po);yi=n(_f,"On specific processes"),_f.forEach(r),$n.forEach(r),Gc=i(t),ka=o(t,"P",{});var vf=s(ka);wi=n(vf,`If a function should be ran on a specific overall or local process index, there are similar decorators
to achieve this:`),vf.forEach(r),Mc=i(t),v(rr.$$.fragment,t),Wc=i(t),v(ar.$$.fragment,t),Hc=i(t),ue=o(t,"H3",{class:!0});var bn=s(ue);Ve=o(bn,"A",{id:!0,class:!0,href:!0});var $f=s(Ve);jo=o($f,"SPAN",{});var bf=s(jo);v(or.$$.fragment,bf),bf.forEach(r),$f.forEach(r),Ei=i(bn),Do=o(bn,"SPAN",{});var yf=s(Do);Ai=n(yf,"Synchronicity control"),yf.forEach(r),bn.forEach(r),Fc=i(t),Re=o(t,"P",{});var yn=s(Re);ki=n(yn,"Use "),xa=o(yn,"A",{href:!0});var wf=s(xa);xi=n(wf,"wait_for_everyone()"),wf.forEach(r),Pi=n(yn," to make sure all processes join that point before continuing. (Useful before a model save for instance)"),yn.forEach(r),Yc=i(t),fe=o(t,"H3",{class:!0});var wn=s(fe);Ge=o(wn,"A",{id:!0,class:!0,href:!0});var Ef=s(Ge);To=o(Ef,"SPAN",{});var Af=s(To);v(sr.$$.fragment,Af),Af.forEach(r),Ef.forEach(r),ji=i(wn),zo=o(wn,"SPAN",{});var kf=s(zo);Di=n(kf,"Saving and loading"),kf.forEach(r),wn.forEach(r),Bc=i(t),Me=o(t,"P",{});var En=s(Me);Ti=n(En,"Use "),Pa=o(En,"A",{href:!0});var xf=s(Pa);zi=n(xf,"unwrap_model()"),xf.forEach(r),Si=n(En," before saving to remove all special model wrappers added during the distributed process."),En.forEach(r),Kc=i(t),v(cr.$$.fragment,t),Qc=i(t),W=o(t,"P",{});var Va=s(W);Ii=n(Va,"Use "),ja=o(Va,"A",{href:!0});var Pf=s(ja);Li=n(Pf,"save()"),Pf.forEach(r),Oi=n(Va," instead of "),So=o(Va,"CODE",{});var jf=s(So);Ni=n(jf,"torch.save"),jf.forEach(r),Ci=n(Va,":"),Va.forEach(r),Xc=i(t),v(nr.$$.fragment,t),Jc=i(t),ge=o(t,"H3",{class:!0});var An=s(ge);We=o(An,"A",{id:!0,class:!0,href:!0});var Df=s(We);Io=o(Df,"SPAN",{});var Tf=s(Io);v(lr.$$.fragment,Tf),Tf.forEach(r),Df.forEach(r),qi=i(An),Lo=o(An,"SPAN",{});var zf=s(Lo);Ui=n(zf,"Operations"),zf.forEach(r),An.forEach(r),Zc=i(t),L=o(t,"P",{});var Ee=s(L);Vi=n(Ee,"Use "),He=o(Ee,"A",{href:!0});var kn=s(He);Ri=n(kn,"clip"),Oo=o(kn,"EM",{});var Sf=s(Oo);Gi=n(Sf,"grad_norm"),Sf.forEach(r),Mi=n(kn,"()"),kn.forEach(r),Wi=n(Ee," instead of "),No=o(Ee,"CODE",{});var If=s(No);Hi=n(If,"torch.nn.utils.clip_grad_norm_"),If.forEach(r),Fi=n(Ee," and "),Fe=o(Ee,"A",{href:!0});var xn=s(Fe);Yi=n(xn,"clip"),Co=o(xn,"EM",{});var Lf=s(Co);Bi=n(Lf,"grad_value"),Lf.forEach(r),Ki=n(xn,"()"),xn.forEach(r),Qi=n(Ee," instead of "),qo=o(Ee,"CODE",{});var Of=s(qo);Xi=n(Of,"torch.nn.utils.clip_grad_value"),Of.forEach(r),Ee.forEach(r),en=i(t),_e=o(t,"H3",{class:!0});var Pn=s(_e);Ye=o(Pn,"A",{id:!0,class:!0,href:!0});var Nf=s(Ye);Uo=o(Nf,"SPAN",{});var Cf=s(Uo);v(ir.$$.fragment,Cf),Cf.forEach(r),Nf.forEach(r),Ji=i(Pn),Vo=o(Pn,"SPAN",{});var qf=s(Vo);Zi=n(qf,"Gradient Accumulation"),qf.forEach(r),Pn.forEach(r),tn=i(t),Be=o(t,"P",{});var jn=s(Be);ed=n(jn,"To perform gradient accumulation use "),Da=o(jn,"A",{href:!0});var Uf=s(Da);td=n(Uf,"accumulate()"),Uf.forEach(r),rd=n(jn,` and specify a gradient_accumulation_steps.
This will also automatically ensure the gradients are synced or unsynced when on
multi-device training, check if the step should actually be performed, and auto-scale the loss:`),jn.forEach(r),rn=i(t),v(dr.$$.fragment,t),an=i(t),ve=o(t,"H2",{class:!0});var Dn=s(ve);Ke=o(Dn,"A",{id:!0,class:!0,href:!0});var Vf=s(Ke);Ro=o(Vf,"SPAN",{});var Rf=s(Ro);v(pr.$$.fragment,Rf),Rf.forEach(r),Vf.forEach(r),ad=i(Dn),Go=o(Dn,"SPAN",{});var Gf=s(Go);od=n(Gf,"Overall API documentation:"),Gf.forEach(r),Dn.forEach(r),on=i(t),u=o(t,"DIV",{class:!0});var g=s(u);v(hr.$$.fragment,g),sd=i(g),Mo=o(g,"P",{});var Mf=s(Mo);cd=n(Mf,"Creates an instance of an accelerator for distributed training (on multi-GPU, TPU) or mixed precision training."),Mf.forEach(r),nd=i(g),Wo=o(g,"P",{});var Wf=s(Wo);Ho=o(Wf,"STRONG",{});var Hf=s(Ho);ld=n(Hf,"Available attributes:"),Hf.forEach(r),Wf.forEach(r),id=i(g),D=o(g,"UL",{});var z=s(D);Qe=o(z,"LI",{});var dc=s(Qe);Fo=o(dc,"STRONG",{});var Ff=s(Fo);dd=n(Ff,"device"),Ff.forEach(r),pd=n(dc," ("),Yo=o(dc,"CODE",{});var Yf=s(Yo);hd=n(Yf,"torch.device"),Yf.forEach(r),md=n(dc,") \u2014 The device to use."),dc.forEach(r),ud=i(z),Xe=o(z,"LI",{});var pc=s(Xe);Bo=o(pc,"STRONG",{});var Bf=s(Bo);fd=n(Bf,"distributed_type"),Bf.forEach(r),gd=n(pc," ("),Ta=o(pc,"A",{href:!0});var Kf=s(Ta);_d=n(Kf,"DistributedType"),Kf.forEach(r),vd=n(pc,") \u2014 The distributed training configuration."),pc.forEach(r),$d=i(z),Je=o(z,"LI",{});var hc=s(Je);Ko=o(hc,"STRONG",{});var Qf=s(Ko);bd=n(Qf,"local_process_index"),Qf.forEach(r),yd=n(hc," ("),Qo=o(hc,"CODE",{});var Xf=s(Qo);wd=n(Xf,"int"),Xf.forEach(r),Ed=n(hc,") \u2014 The process index on the current machine."),hc.forEach(r),Ad=i(z),Ze=o(z,"LI",{});var mc=s(Ze);Xo=o(mc,"STRONG",{});var Jf=s(Xo);kd=n(Jf,"mixed_precision"),Jf.forEach(r),xd=n(mc," ("),Jo=o(mc,"CODE",{});var Zf=s(Jo);Pd=n(Zf,"str"),Zf.forEach(r),jd=n(mc,") \u2014 The configured mixed precision mode."),mc.forEach(r),Dd=i(z),et=o(z,"LI",{});var uc=s(et);Zo=o(uc,"STRONG",{});var eg=s(Zo);Td=n(eg,"num_processes"),eg.forEach(r),zd=n(uc," ("),es=o(uc,"CODE",{});var tg=s(es);Sd=n(tg,"int"),tg.forEach(r),Id=n(uc,") \u2014 The total number of processes used for training."),uc.forEach(r),Ld=i(z),tt=o(z,"LI",{});var fc=s(tt);ts=o(fc,"STRONG",{});var rg=s(ts);Od=n(rg,"optimizer_step_was_skipped"),rg.forEach(r),Nd=n(fc," ("),rs=o(fc,"CODE",{});var ag=s(rs);Cd=n(ag,"bool"),ag.forEach(r),qd=n(fc,`) \u2014 Whether or not the optimizer update was skipped (because of
gradient overflow in mixed precision), in which
case the learning rate should not be changed.`),fc.forEach(r),Ud=i(z),rt=o(z,"LI",{});var gc=s(rt);as=o(gc,"STRONG",{});var og=s(as);Vd=n(og,"process_index"),og.forEach(r),Rd=n(gc," ("),os=o(gc,"CODE",{});var sg=s(os);Gd=n(sg,"int"),sg.forEach(r),Md=n(gc,") \u2014 The overall index of the current process among all processes."),gc.forEach(r),Wd=i(z),at=o(z,"LI",{});var _c=s(at);ss=o(_c,"STRONG",{});var cg=s(ss);Hd=n(cg,"state"),cg.forEach(r),Fd=n(_c," ("),za=o(_c,"A",{href:!0});var ng=s(za);Yd=n(ng,"AcceleratorState"),ng.forEach(r),Bd=n(_c,") \u2014 The distributed setup state."),_c.forEach(r),Kd=i(z),ot=o(z,"LI",{});var vc=s(ot);cs=o(vc,"STRONG",{});var lg=s(cs);Qd=n(lg,"sync_gradients"),lg.forEach(r),Xd=n(vc," ("),ns=o(vc,"CODE",{});var ig=s(ns);Jd=n(ig,"bool"),ig.forEach(r),Zd=n(vc,") \u2014 Whether the gradients are currently being synced across all processes."),vc.forEach(r),ep=i(z),st=o(z,"LI",{});var $c=s(st);ls=o($c,"STRONG",{});var dg=s(ls);tp=n(dg,"use_distributed"),dg.forEach(r),rp=n($c," ("),is=o($c,"CODE",{});var pg=s(is);ap=n(pg,"bool"),pg.forEach(r),op=n($c,") \u2014 Whether the current configuration is for distributed training."),$c.forEach(r),z.forEach(r),sp=i(g),H=o(g,"DIV",{class:!0});var Ra=s(H);v(mr.$$.fragment,Ra),cp=i(Ra),ds=o(Ra,"P",{});var hg=s(ds);np=n(hg,"A context manager that will lightly wrap around and perform gradient accumulation automatically"),hg.forEach(r),lp=i(Ra),v(ct.$$.fragment,Ra),Ra.forEach(r),ip=i(g),nt=o(g,"DIV",{class:!0});var Tn=s(nt);v(ur.$$.fragment,Tn),dp=i(Tn),ps=o(Tn,"P",{});var mg=s(ps);pp=n(mg,`Will apply automatic mixed-precision inside the block inside this context manager, if it is enabled. Nothing
different will happen otherwise.`),mg.forEach(r),Tn.forEach(r),hp=i(g),F=o(g,"DIV",{class:!0});var Ga=s(F);v(fr.$$.fragment,Ga),mp=i(Ga),$e=o(Ga,"P",{});var Ma=s($e);up=n(Ma,"Scales the gradients in accordance to "),hs=o(Ma,"CODE",{});var ug=s(hs);fp=n(ug,"Accelerator.gradient_accumulation_steps"),ug.forEach(r),gp=n(Ma,` and calls the correct
`),ms=o(Ma,"CODE",{});var fg=s(ms);_p=n(fg,"backward()"),fg.forEach(r),vp=n(Ma," based on the configuration."),Ma.forEach(r),$p=i(Ga),gr=o(Ga,"P",{});var zn=s(gr);bp=n(zn,"Should be used in lieu of "),us=o(zn,"CODE",{});var gg=s(us);yp=n(gg,"loss.backward()"),gg.forEach(r),wp=n(zn,"."),zn.forEach(r),Ga.forEach(r),Ep=i(g),lt=o(g,"DIV",{class:!0});var Sn=s(lt);v(_r.$$.fragment,Sn),Ap=i(Sn),vr=o(Sn,"P",{});var In=s(vr);kp=n(In,"Alias for "),fs=o(In,"CODE",{});var _g=s(fs);xp=n(_g,"Accelerate.free_memory"),_g.forEach(r),Pp=n(In,`, releases all references to the internal objects stored and call the
garbage collector. You should call this method between two trainings with different models/optimizers.`),In.forEach(r),Sn.forEach(r),jp=i(g),Y=o(g,"DIV",{class:!0});var Wa=s(Y);v($r.$$.fragment,Wa),Dp=i(Wa),br=o(Wa,"P",{});var Ln=s(br);Tp=n(Ln,"Should be used in place of "),gs=o(Ln,"CODE",{});var vg=s(gs);zp=n(vg,"torch.nn.utils.clip_grad_norm_"),vg.forEach(r),Sp=n(Ln,"."),Ln.forEach(r),Ip=i(Wa),v(it.$$.fragment,Wa),Wa.forEach(r),Lp=i(g),B=o(g,"DIV",{class:!0});var Ha=s(B);v(yr.$$.fragment,Ha),Op=i(Ha),wr=o(Ha,"P",{});var On=s(wr);Np=n(On,"Should be used in place of "),_s=o(On,"CODE",{});var $g=s(_s);Cp=n($g,"torch.nn.utils.clip_grad_value_"),$g.forEach(r),qp=n(On,"."),On.forEach(r),Up=i(Ha),v(dt.$$.fragment,Ha),Ha.forEach(r),Vp=i(g),pt=o(g,"DIV",{class:!0});var Nn=s(pt);v(Er.$$.fragment,Nn),Rp=i(Nn),vs=o(Nn,"P",{});var bg=s(vs);Gp=n(bg,`Runs any special end training behaviors, such as stopping trackers on the main process only. Should always be
called at the end of your script if using experiment tracking.`),bg.forEach(r),Nn.forEach(r),Mp=i(g),ht=o(g,"DIV",{class:!0});var Cn=s(ht);v(Ar.$$.fragment,Cn),Wp=i(Cn),$s=o(Cn,"P",{});var yg=s($s);Hp=n(yg,`Will release all references to the internal objects stored and call the garbage collector. You should call this
method between two trainings with different models/optimizers.`),yg.forEach(r),Cn.forEach(r),Fp=i(g),K=o(g,"DIV",{class:!0});var Fa=s(K);v(kr.$$.fragment,Fa),Yp=i(Fa),xr=o(Fa,"P",{});var qn=s(xr);Bp=n(qn,"Gather the values in "),bs=o(qn,"EM",{});var wg=s(bs);Kp=n(wg,"tensor"),wg.forEach(r),Qp=n(qn,` across all processes and concatenate them on the first dimension. Useful to
regroup the predictions from all processes when doing evaluation.`),qn.forEach(r),Xp=i(Fa),ys=o(Fa,"P",{});var Eg=s(ys);Jp=n(Eg,`Note:
This gather happens in all processes.`),Eg.forEach(r),Fa.forEach(r),Zp=i(g),mt=o(g,"DIV",{class:!0});var Un=s(mt);v(Pr.$$.fragment,Un),eh=i(Un),jr=o(Un,"P",{});var Vn=s(jr);th=n(Vn,"Gathers "),ws=o(Vn,"CODE",{});var Ag=s(ws);rh=n(Ag,"tensor"),Ag.forEach(r),ah=n(Vn,` and potentially drops duplicates in the last batch if on a distributed system. Should be used
for gathering the inputs and targets for metric calculation.`),Vn.forEach(r),Un.forEach(r),oh=i(g),ut=o(g,"DIV",{class:!0});var Rn=s(ut);v(Dr.$$.fragment,Rn),sh=i(Rn),Tr=o(Rn,"P",{});var Gn=s(Tr);ch=n(Gn,"Returns the state dictionary of a model sent through "),Sa=o(Gn,"A",{href:!0});var kg=s(Sa);nh=n(kg,"Accelerator.prepare()"),kg.forEach(r),lh=n(Gn," in full precision"),Gn.forEach(r),Rn.forEach(r),ih=i(g),ft=o(g,"DIV",{class:!0});var Mn=s(ft);v(zr.$$.fragment,Mn),dh=i(Mn),R=o(Mn,"P",{});var qt=s(R);ph=n(qt,"Returns a "),Es=o(qt,"CODE",{});var xg=s(Es);hh=n(xg,"tracker"),xg.forEach(r),mh=n(qt," from "),As=o(qt,"CODE",{});var Pg=s(As);uh=n(Pg,"self.trackers"),Pg.forEach(r),fh=n(qt," based on "),ks=o(qt,"CODE",{});var jg=s(ks);gh=n(jg,"name"),jg.forEach(r),_h=n(qt," on the main process only."),qt.forEach(r),Mn.forEach(r),vh=i(g),gt=o(g,"DIV",{class:!0});var Wn=s(gt);v(Sr.$$.fragment,Wn),$h=i(Wn),Ir=o(Wn,"P",{});var Hn=s(Ir);bh=n(Hn,"Initializes a run for all trackers stored in "),xs=o(Hn,"CODE",{});var Dg=s(xs);yh=n(Dg,"self.log_with"),Dg.forEach(r),wh=n(Hn,", potentially with starting configurations"),Hn.forEach(r),Wn.forEach(r),Eh=i(g),Q=o(g,"DIV",{class:!0});var Ya=s(Q);v(Lr.$$.fragment,Ya),Ah=i(Ya),Ps=o(Ya,"P",{});var Tg=s(Ps);kh=n(Tg,"Loads the current states of the model, optimizer, scaler, RNG generators, and registered objects."),Tg.forEach(r),xh=i(Ya),v(_t.$$.fragment,Ya),Ya.forEach(r),Ph=i(g),X=o(g,"DIV",{class:!0});var Ba=s(X);v(Or.$$.fragment,Ba),jh=i(Ba),js=o(Ba,"P",{});var zg=s(js);Dh=n(zg,"Lets the local main process go inside a with block."),zg.forEach(r),Th=i(Ba),Ds=o(Ba,"P",{});var Sg=s(Ds);zh=n(Sg,"The other processes will enter the with block after the main process exits."),Sg.forEach(r),Ba.forEach(r),Sh=i(g),vt=o(g,"DIV",{class:!0});var Fn=s(vt);v(Nr.$$.fragment,Fn),Ih=i(Fn),be=o(Fn,"P",{});var Ka=s(be);Lh=n(Ka,"Logs "),Ts=o(Ka,"CODE",{});var Ig=s(Ts);Oh=n(Ig,"values"),Ig.forEach(r),Nh=n(Ka," to all stored trackers in "),zs=o(Ka,"CODE",{});var Lg=s(zs);Ch=n(Lg,"self.trackers"),Lg.forEach(r),qh=n(Ka," on the main process only."),Ka.forEach(r),Fn.forEach(r),Uh=i(g),J=o(g,"DIV",{class:!0});var Qa=s(J);v(Cr.$$.fragment,Qa),Vh=i(Qa),Ss=o(Qa,"P",{});var Og=s(Ss);Rh=n(Og,"Lets the main process go first inside a with block."),Og.forEach(r),Gh=i(Qa),Is=o(Qa,"P",{});var Ng=s(Is);Mh=n(Ng,"The other processes will enter the with block after the main process exits."),Ng.forEach(r),Qa.forEach(r),Wh=i(g),q=o(g,"DIV",{class:!0});var Ut=s(q);v(qr.$$.fragment,Ut),Hh=i(Ut),Ur=o(Ut,"P",{});var Yn=s(Ur);Fh=n(Yn,`A context manager to disable gradient synchronizations across DDP processes by calling
`),Ls=o(Yn,"CODE",{});var Cg=s(Ls);Yh=n(Cg,"torch.nn.parallel.DistributedDataParallel.no_sync"),Cg.forEach(r),Bh=n(Yn,"."),Yn.forEach(r),Kh=i(Ut),Vr=o(Ut,"P",{});var Bn=s(Vr);Qh=n(Bn,"If "),Os=o(Bn,"CODE",{});var qg=s(Os);Xh=n(qg,"model"),qg.forEach(r),Jh=n(Bn," is not in DDP, this context manager does nothing"),Bn.forEach(r),Zh=i(Ut),v($t.$$.fragment,Ut),Ut.forEach(r),em=i(g),bt=o(g,"DIV",{class:!0});var Kn=s(bt);v(Rr.$$.fragment,Kn),tm=i(Kn),Ns=o(Kn,"P",{});var Ug=s(Ns);rm=n(Ug,"A decorator that will run the decorated function on the local main process only."),Ug.forEach(r),Kn.forEach(r),am=i(g),yt=o(g,"DIV",{class:!0});var Qn=s(yt);v(Gr.$$.fragment,Qn),om=i(Qn),Cs=o(Qn,"P",{});var Vg=s(Cs);sm=n(Vg,"A decorator that will run the decorated function on a given local process index only."),Vg.forEach(r),Qn.forEach(r),cm=i(g),wt=o(g,"DIV",{class:!0});var Xn=s(wt);v(Mr.$$.fragment,Xn),nm=i(Xn),qs=o(Xn,"P",{});var Rg=s(qs);lm=n(Rg,"A decorator that will run the decorated function on the main process only."),Rg.forEach(r),Xn.forEach(r),im=i(g),Et=o(g,"DIV",{class:!0});var Jn=s(Et);v(Wr.$$.fragment,Jn),dm=i(Jn),Us=o(Jn,"P",{});var Gg=s(Us);pm=n(Gg,"A decorator that will run the decorated function on a given process index only."),Gg.forEach(r),Jn.forEach(r),hm=i(g),At=o(g,"DIV",{class:!0});var Zn=s(At);v(Hr.$$.fragment,Zn),mm=i(Zn),Vs=o(Zn,"P",{});var Mg=s(Vs);um=n(Mg,`Recursively pad the tensors in a nested list/tuple/dictionary of tensors from all devices to the same size so
they can safely be gathered.`),Mg.forEach(r),Zn.forEach(r),fm=i(g),Z=o(g,"DIV",{class:!0});var Xa=s(Z);v(Fr.$$.fragment,Xa),gm=i(Xa),Yr=o(Xa,"P",{});var el=s(Yr);_m=n(el,"Prepare all objects passed in "),Rs=o(el,"CODE",{});var Wg=s(Rs);vm=n(Wg,"args"),Wg.forEach(r),$m=n(el,` for distributed training and mixed precision, then return them in the same
order.`),el.forEach(r),bm=i(Xa),v(kt.$$.fragment,Xa),Xa.forEach(r),ym=i(g),xt=o(g,"DIV",{class:!0});var tl=s(xt);v(Br.$$.fragment,tl),wm=i(tl),Kr=o(tl,"P",{});var rl=s(Kr);Em=n(rl,`Prepares a PyTorch DataLoader for training in any distributed setup. It is recommended to use
`),Ia=o(rl,"A",{href:!0});var Hg=s(Ia);Am=n(Hg,"Accelerator.prepare()"),Hg.forEach(r),km=n(rl," instead."),rl.forEach(r),tl.forEach(r),xm=i(g),Pt=o(g,"DIV",{class:!0});var al=s(Pt);v(Qr.$$.fragment,al),Pm=i(al),Xr=o(al,"P",{});var ol=s(Xr);jm=n(ol,`Prepares a PyTorch model for training in any distributed setup. It is recommended to use
`),La=o(ol,"A",{href:!0});var Fg=s(La);Dm=n(Fg,"Accelerator.prepare()"),Fg.forEach(r),Tm=n(ol," instead."),ol.forEach(r),al.forEach(r),zm=i(g),jt=o(g,"DIV",{class:!0});var sl=s(jt);v(Jr.$$.fragment,sl),Sm=i(sl),Zr=o(sl,"P",{});var cl=s(Zr);Im=n(cl,`Prepares a PyTorch Optimizer for training in any distributed setup. It is recommended to use
`),Oa=o(cl,"A",{href:!0});var Yg=s(Oa);Lm=n(Yg,"Accelerator.prepare()"),Yg.forEach(r),Om=n(cl," instead."),cl.forEach(r),sl.forEach(r),Nm=i(g),Dt=o(g,"DIV",{class:!0});var nl=s(Dt);v(ea.$$.fragment,nl),Cm=i(nl),ta=o(nl,"P",{});var ll=s(ta);qm=n(ll,`Prepares a PyTorch Scheduler for training in any distributed setup. It is recommended to use
`),Na=o(ll,"A",{href:!0});var Bg=s(Na);Um=n(Bg,"Accelerator.prepare()"),Bg.forEach(r),Vm=n(ll," instead."),ll.forEach(r),nl.forEach(r),Rm=i(g),Tt=o(g,"DIV",{class:!0});var il=s(Tt);v(ra.$$.fragment,il),Gm=i(il),aa=o(il,"P",{});var dl=s(aa);Mm=n(dl,"Use in replacement of "),Gs=o(dl,"CODE",{});var Kg=s(Gs);Wm=n(Kg,"print()"),Kg.forEach(r),Hm=n(dl," to only print once per server."),dl.forEach(r),il.forEach(r),Fm=i(g),ee=o(g,"DIV",{class:!0});var Ja=s(ee);v(oa.$$.fragment,Ja),Ym=i(Ja),ye=o(Ja,"P",{});var Za=s(ye);Bm=n(Za,"Reduce the values in "),Ms=o(Za,"EM",{});var Qg=s(Ms);Km=n(Qg,"tensor"),Qg.forEach(r),Qm=n(Za," across all processes based on "),Ws=o(Za,"EM",{});var Xg=s(Ws);Xm=n(Xg,"reduction"),Xg.forEach(r),Jm=n(Za,"."),Za.forEach(r),Zm=i(Ja),Hs=o(Ja,"P",{});var Jg=s(Hs);eu=n(Jg,`Note:
All processes get the reduced value.`),Jg.forEach(r),Ja.forEach(r),tu=i(g),U=o(g,"DIV",{class:!0});var Vt=s(U);v(sa.$$.fragment,Vt),ru=i(Vt),G=o(Vt,"P",{});var Rt=s(G);au=n(Rt,"Makes note of "),Fs=o(Rt,"CODE",{});var Zg=s(Fs);ou=n(Zg,"objects"),Zg.forEach(r),su=n(Rt," and will save or load them in during "),Ys=o(Rt,"CODE",{});var e_=s(Ys);cu=n(e_,"save_state"),e_.forEach(r),nu=n(Rt," or "),Bs=o(Rt,"CODE",{});var t_=s(Bs);lu=n(t_,"load_state"),t_.forEach(r),iu=n(Rt,"."),Rt.forEach(r),du=i(Vt),Ks=o(Vt,"P",{});var r_=s(Ks);pu=n(r_,`These should be utilized when the state is being loaded or saved in the same script. It is not designed to be
used in different scripts`),r_.forEach(r),hu=i(Vt),v(zt.$$.fragment,Vt),Vt.forEach(r),mu=i(g),St=o(g,"DIV",{class:!0});var pl=s(St);v(ca.$$.fragment,pl),uu=i(pl),na=o(pl,"P",{});var hl=s(na);fu=n(hl,"Save the object passed to disk once per machine. Use in place of "),Qs=o(hl,"CODE",{});var a_=s(Qs);gu=n(a_,"torch.save"),a_.forEach(r),_u=n(hl,"."),hl.forEach(r),pl.forEach(r),vu=i(g),te=o(g,"DIV",{class:!0});var eo=s(te);v(la.$$.fragment,eo),$u=i(eo),Xs=o(eo,"P",{});var o_=s(Xs);bu=n(o_,"Saves the current states of the model, optimizer, scaler, RNG generators, and registered objects."),o_.forEach(r),yu=i(eo),v(It.$$.fragment,eo),eo.forEach(r),wu=i(g),Lt=o(g,"DIV",{class:!0});var ml=s(Lt);v(ia.$$.fragment,ml),Eu=i(ml),Js=o(ml,"P",{});var s_=s(Js);Au=n(s_,"Unscale the gradients in mixed precision training with AMP. This is a noop in all other settings."),s_.forEach(r),ml.forEach(r),ku=i(g),Ot=o(g,"DIV",{class:!0});var ul=s(Ot);v(da.$$.fragment,ul),xu=i(ul),we=o(ul,"P",{});var to=s(we);Pu=n(to,"Unwraps the "),Zs=o(to,"CODE",{});var c_=s(Zs);ju=n(c_,"model"),c_.forEach(r),Du=n(to," from the additional layer possible added by "),Ca=o(to,"A",{href:!0});var n_=s(Ca);Tu=n(n_,"prepare()"),n_.forEach(r),zu=n(to,`. Useful before saving
the model.`),to.forEach(r),ul.forEach(r),Su=i(g),Nt=o(g,"DIV",{class:!0});var fl=s(Nt);v(pa.$$.fragment,fl),Iu=i(fl),ec=o(fl,"P",{});var l_=s(ec);Lu=n(l_,`Will stop the execution of the current process until every other process has reached that point (so this does
nothing when the script is only run in one process). Useful to do before saving a model.`),l_.forEach(r),fl.forEach(r),g.forEach(r),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(k_)),d(E,"id","accelerator"),d(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E,"href","#accelerator"),d(A,"class","relative group"),d(S,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator"),d(ke,"id","quick-adaptation-of-your-code"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#quick-adaptation-of-your-code"),d(oe,"class","relative group"),d(va,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator"),d($a,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(ya,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.gather"),d(ce,"start","4"),d(Te,"id","advanced-recommendations"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#advanced-recommendations"),d(ne,"class","relative group"),d(ze,"id","printing"),d(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ze,"href","#printing"),d(le,"class","relative group"),d(wa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.print"),d(Se,"id","executing-processes"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#executing-processes"),d(de,"class","relative group"),d(Ie,"id","once-on-a-single-server"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#once-on-a-single-server"),d(pe,"class","relative group"),d(Ea,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.on_local_main_process"),d(Ne,"id","only-ever-once-across-all-servers"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#only-ever-once-across-all-servers"),d(he,"class","relative group"),d(Aa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.on_main_process"),d(Ue,"id","on-specific-processes"),d(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ue,"href","#on-specific-processes"),d(me,"class","relative group"),d(Ve,"id","synchronicity-control"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#synchronicity-control"),d(ue,"class","relative group"),d(xa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone"),d(Ge,"id","saving-and-loading"),d(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ge,"href","#saving-and-loading"),d(fe,"class","relative group"),d(Pa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.unwrap_model"),d(ja,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.save"),d(We,"id","operations"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#operations"),d(ge,"class","relative group"),d(He,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_norm_"),d(Fe,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.clip_grad_value_"),d(Ye,"id","gradient-accumulation"),d(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ye,"href","#gradient-accumulation"),d(_e,"class","relative group"),d(Da,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.accumulate"),d(Ke,"id","accelerate.Accelerator"),d(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ke,"href","#accelerate.Accelerator"),d(ve,"class","relative group"),d(Ta,"href","/docs/accelerate/v0.13.2/en/package_reference/utilities#accelerate.DistributedType"),d(za,"href","/docs/accelerate/v0.13.2/en/package_reference/state#accelerate.state.AcceleratorState"),d(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ia,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oa,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Na,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/accelerate/v0.13.2/en/package_reference/accelerator#accelerate.Accelerator.prepare"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,h),m(t,k,p),m(t,A,p),e(A,E),e(E,j),$(f,j,null),e(A,x),e(A,N),e(N,re),m(t,Ae,p),m(t,C,p),e(C,ae),e(C,S),e(S,fa),e(C,ga),m(t,Gt,p),m(t,oe,p),e(oe,ke),e(ke,ao),$(Mt,ao,null),e(oe,vl),e(oe,oo),e(oo,$l),m(t,bc,p),m(t,_a,p),e(_a,bl),m(t,yc,p),m(t,M,p),e(M,se),e(se,yl),e(se,va),e(va,wl),e(se,El),e(se,so),e(so,Al),e(se,kl),e(M,xl),e(M,Wt),e(Wt,Pl),e(Wt,$a),e($a,jl),e(Wt,Dl),e(M,Tl),e(M,V),e(V,zl),e(V,co),e(co,Sl),e(V,Il),e(V,no),e(no,Ll),e(V,Ol),e(V,lo),e(lo,Nl),e(V,Cl),m(t,wc,p),$(xe,t,p),m(t,Ec,p),m(t,ce,p),e(ce,Pe),e(Pe,ql),e(Pe,io),e(io,Ul),e(Pe,Vl),e(Pe,po),e(po,Rl),e(ce,Gl),e(ce,ba),e(ba,Ml),e(ba,ya),e(ya,Wl),m(t,Ac,p),$(je,t,p),m(t,kc,p),m(t,De,p),e(De,Hl),e(De,ho),e(ho,Fl),e(De,Yl),m(t,xc,p),m(t,ne,p),e(ne,Te),e(Te,mo),$(Ht,mo,null),e(ne,Bl),e(ne,uo),e(uo,Kl),m(t,Pc,p),m(t,le,p),e(le,ze),e(ze,fo),$(Ft,fo,null),e(le,Ql),e(le,go),e(go,Xl),m(t,jc,p),m(t,ie,p),e(ie,_o),e(_o,Jl),e(ie,Zl),e(ie,wa),e(wa,ei),e(ie,ti),m(t,Dc,p),$(Yt,t,p),m(t,Tc,p),m(t,de,p),e(de,Se),e(Se,vo),$(Bt,vo,null),e(de,ri),e(de,$o),e($o,ai),m(t,zc,p),m(t,pe,p),e(pe,Ie),e(Ie,bo),$(Kt,bo,null),e(pe,oi),e(pe,yo),e(yo,si),m(t,Sc,p),m(t,Le,p),e(Le,ci),e(Le,wo),e(wo,ni),e(Le,li),m(t,Ic,p),$(Qt,t,p),m(t,Lc,p),m(t,Oe,p),e(Oe,ii),e(Oe,Ea),e(Ea,di),e(Oe,pi),m(t,Oc,p),$(Xt,t,p),m(t,Nc,p),m(t,he,p),e(he,Ne),e(Ne,Eo),$(Jt,Eo,null),e(he,hi),e(he,Ao),e(Ao,mi),m(t,Cc,p),m(t,Ce,p),e(Ce,ui),e(Ce,ko),e(ko,fi),e(Ce,gi),m(t,qc,p),$(Zt,t,p),m(t,Uc,p),m(t,qe,p),e(qe,_i),e(qe,Aa),e(Aa,vi),e(qe,$i),m(t,Vc,p),$(er,t,p),m(t,Rc,p),m(t,me,p),e(me,Ue),e(Ue,xo),$(tr,xo,null),e(me,bi),e(me,Po),e(Po,yi),m(t,Gc,p),m(t,ka,p),e(ka,wi),m(t,Mc,p),$(rr,t,p),m(t,Wc,p),$(ar,t,p),m(t,Hc,p),m(t,ue,p),e(ue,Ve),e(Ve,jo),$(or,jo,null),e(ue,Ei),e(ue,Do),e(Do,Ai),m(t,Fc,p),m(t,Re,p),e(Re,ki),e(Re,xa),e(xa,xi),e(Re,Pi),m(t,Yc,p),m(t,fe,p),e(fe,Ge),e(Ge,To),$(sr,To,null),e(fe,ji),e(fe,zo),e(zo,Di),m(t,Bc,p),m(t,Me,p),e(Me,Ti),e(Me,Pa),e(Pa,zi),e(Me,Si),m(t,Kc,p),$(cr,t,p),m(t,Qc,p),m(t,W,p),e(W,Ii),e(W,ja),e(ja,Li),e(W,Oi),e(W,So),e(So,Ni),e(W,Ci),m(t,Xc,p),$(nr,t,p),m(t,Jc,p),m(t,ge,p),e(ge,We),e(We,Io),$(lr,Io,null),e(ge,qi),e(ge,Lo),e(Lo,Ui),m(t,Zc,p),m(t,L,p),e(L,Vi),e(L,He),e(He,Ri),e(He,Oo),e(Oo,Gi),e(He,Mi),e(L,Wi),e(L,No),e(No,Hi),e(L,Fi),e(L,Fe),e(Fe,Yi),e(Fe,Co),e(Co,Bi),e(Fe,Ki),e(L,Qi),e(L,qo),e(qo,Xi),m(t,en,p),m(t,_e,p),e(_e,Ye),e(Ye,Uo),$(ir,Uo,null),e(_e,Ji),e(_e,Vo),e(Vo,Zi),m(t,tn,p),m(t,Be,p),e(Be,ed),e(Be,Da),e(Da,td),e(Be,rd),m(t,rn,p),$(dr,t,p),m(t,an,p),m(t,ve,p),e(ve,Ke),e(Ke,Ro),$(pr,Ro,null),e(ve,ad),e(ve,Go),e(Go,od),m(t,on,p),m(t,u,p),$(hr,u,null),e(u,sd),e(u,Mo),e(Mo,cd),e(u,nd),e(u,Wo),e(Wo,Ho),e(Ho,ld),e(u,id),e(u,D),e(D,Qe),e(Qe,Fo),e(Fo,dd),e(Qe,pd),e(Qe,Yo),e(Yo,hd),e(Qe,md),e(D,ud),e(D,Xe),e(Xe,Bo),e(Bo,fd),e(Xe,gd),e(Xe,Ta),e(Ta,_d),e(Xe,vd),e(D,$d),e(D,Je),e(Je,Ko),e(Ko,bd),e(Je,yd),e(Je,Qo),e(Qo,wd),e(Je,Ed),e(D,Ad),e(D,Ze),e(Ze,Xo),e(Xo,kd),e(Ze,xd),e(Ze,Jo),e(Jo,Pd),e(Ze,jd),e(D,Dd),e(D,et),e(et,Zo),e(Zo,Td),e(et,zd),e(et,es),e(es,Sd),e(et,Id),e(D,Ld),e(D,tt),e(tt,ts),e(ts,Od),e(tt,Nd),e(tt,rs),e(rs,Cd),e(tt,qd),e(D,Ud),e(D,rt),e(rt,as),e(as,Vd),e(rt,Rd),e(rt,os),e(os,Gd),e(rt,Md),e(D,Wd),e(D,at),e(at,ss),e(ss,Hd),e(at,Fd),e(at,za),e(za,Yd),e(at,Bd),e(D,Kd),e(D,ot),e(ot,cs),e(cs,Qd),e(ot,Xd),e(ot,ns),e(ns,Jd),e(ot,Zd),e(D,ep),e(D,st),e(st,ls),e(ls,tp),e(st,rp),e(st,is),e(is,ap),e(st,op),e(u,sp),e(u,H),$(mr,H,null),e(H,cp),e(H,ds),e(ds,np),e(H,lp),$(ct,H,null),e(u,ip),e(u,nt),$(ur,nt,null),e(nt,dp),e(nt,ps),e(ps,pp),e(u,hp),e(u,F),$(fr,F,null),e(F,mp),e(F,$e),e($e,up),e($e,hs),e(hs,fp),e($e,gp),e($e,ms),e(ms,_p),e($e,vp),e(F,$p),e(F,gr),e(gr,bp),e(gr,us),e(us,yp),e(gr,wp),e(u,Ep),e(u,lt),$(_r,lt,null),e(lt,Ap),e(lt,vr),e(vr,kp),e(vr,fs),e(fs,xp),e(vr,Pp),e(u,jp),e(u,Y),$($r,Y,null),e(Y,Dp),e(Y,br),e(br,Tp),e(br,gs),e(gs,zp),e(br,Sp),e(Y,Ip),$(it,Y,null),e(u,Lp),e(u,B),$(yr,B,null),e(B,Op),e(B,wr),e(wr,Np),e(wr,_s),e(_s,Cp),e(wr,qp),e(B,Up),$(dt,B,null),e(u,Vp),e(u,pt),$(Er,pt,null),e(pt,Rp),e(pt,vs),e(vs,Gp),e(u,Mp),e(u,ht),$(Ar,ht,null),e(ht,Wp),e(ht,$s),e($s,Hp),e(u,Fp),e(u,K),$(kr,K,null),e(K,Yp),e(K,xr),e(xr,Bp),e(xr,bs),e(bs,Kp),e(xr,Qp),e(K,Xp),e(K,ys),e(ys,Jp),e(u,Zp),e(u,mt),$(Pr,mt,null),e(mt,eh),e(mt,jr),e(jr,th),e(jr,ws),e(ws,rh),e(jr,ah),e(u,oh),e(u,ut),$(Dr,ut,null),e(ut,sh),e(ut,Tr),e(Tr,ch),e(Tr,Sa),e(Sa,nh),e(Tr,lh),e(u,ih),e(u,ft),$(zr,ft,null),e(ft,dh),e(ft,R),e(R,ph),e(R,Es),e(Es,hh),e(R,mh),e(R,As),e(As,uh),e(R,fh),e(R,ks),e(ks,gh),e(R,_h),e(u,vh),e(u,gt),$(Sr,gt,null),e(gt,$h),e(gt,Ir),e(Ir,bh),e(Ir,xs),e(xs,yh),e(Ir,wh),e(u,Eh),e(u,Q),$(Lr,Q,null),e(Q,Ah),e(Q,Ps),e(Ps,kh),e(Q,xh),$(_t,Q,null),e(u,Ph),e(u,X),$(Or,X,null),e(X,jh),e(X,js),e(js,Dh),e(X,Th),e(X,Ds),e(Ds,zh),e(u,Sh),e(u,vt),$(Nr,vt,null),e(vt,Ih),e(vt,be),e(be,Lh),e(be,Ts),e(Ts,Oh),e(be,Nh),e(be,zs),e(zs,Ch),e(be,qh),e(u,Uh),e(u,J),$(Cr,J,null),e(J,Vh),e(J,Ss),e(Ss,Rh),e(J,Gh),e(J,Is),e(Is,Mh),e(u,Wh),e(u,q),$(qr,q,null),e(q,Hh),e(q,Ur),e(Ur,Fh),e(Ur,Ls),e(Ls,Yh),e(Ur,Bh),e(q,Kh),e(q,Vr),e(Vr,Qh),e(Vr,Os),e(Os,Xh),e(Vr,Jh),e(q,Zh),$($t,q,null),e(u,em),e(u,bt),$(Rr,bt,null),e(bt,tm),e(bt,Ns),e(Ns,rm),e(u,am),e(u,yt),$(Gr,yt,null),e(yt,om),e(yt,Cs),e(Cs,sm),e(u,cm),e(u,wt),$(Mr,wt,null),e(wt,nm),e(wt,qs),e(qs,lm),e(u,im),e(u,Et),$(Wr,Et,null),e(Et,dm),e(Et,Us),e(Us,pm),e(u,hm),e(u,At),$(Hr,At,null),e(At,mm),e(At,Vs),e(Vs,um),e(u,fm),e(u,Z),$(Fr,Z,null),e(Z,gm),e(Z,Yr),e(Yr,_m),e(Yr,Rs),e(Rs,vm),e(Yr,$m),e(Z,bm),$(kt,Z,null),e(u,ym),e(u,xt),$(Br,xt,null),e(xt,wm),e(xt,Kr),e(Kr,Em),e(Kr,Ia),e(Ia,Am),e(Kr,km),e(u,xm),e(u,Pt),$(Qr,Pt,null),e(Pt,Pm),e(Pt,Xr),e(Xr,jm),e(Xr,La),e(La,Dm),e(Xr,Tm),e(u,zm),e(u,jt),$(Jr,jt,null),e(jt,Sm),e(jt,Zr),e(Zr,Im),e(Zr,Oa),e(Oa,Lm),e(Zr,Om),e(u,Nm),e(u,Dt),$(ea,Dt,null),e(Dt,Cm),e(Dt,ta),e(ta,qm),e(ta,Na),e(Na,Um),e(ta,Vm),e(u,Rm),e(u,Tt),$(ra,Tt,null),e(Tt,Gm),e(Tt,aa),e(aa,Mm),e(aa,Gs),e(Gs,Wm),e(aa,Hm),e(u,Fm),e(u,ee),$(oa,ee,null),e(ee,Ym),e(ee,ye),e(ye,Bm),e(ye,Ms),e(Ms,Km),e(ye,Qm),e(ye,Ws),e(Ws,Xm),e(ye,Jm),e(ee,Zm),e(ee,Hs),e(Hs,eu),e(u,tu),e(u,U),$(sa,U,null),e(U,ru),e(U,G),e(G,au),e(G,Fs),e(Fs,ou),e(G,su),e(G,Ys),e(Ys,cu),e(G,nu),e(G,Bs),e(Bs,lu),e(G,iu),e(U,du),e(U,Ks),e(Ks,pu),e(U,hu),$(zt,U,null),e(u,mu),e(u,St),$(ca,St,null),e(St,uu),e(St,na),e(na,fu),e(na,Qs),e(Qs,gu),e(na,_u),e(u,vu),e(u,te),$(la,te,null),e(te,$u),e(te,Xs),e(Xs,bu),e(te,yu),$(It,te,null),e(u,wu),e(u,Lt),$(ia,Lt,null),e(Lt,Eu),e(Lt,Js),e(Js,Au),e(u,ku),e(u,Ot),$(da,Ot,null),e(Ot,xu),e(Ot,we),e(we,Pu),e(we,Zs),e(Zs,ju),e(we,Du),e(we,Ca),e(Ca,Tu),e(we,zu),e(u,Su),e(u,Nt),$(pa,Nt,null),e(Nt,Iu),e(Nt,ec),e(ec,Lu),sn=!0},p(t,[p]){const ha={};p&2&&(ha.$$scope={dirty:p,ctx:t}),xe.$set(ha);const tc={};p&2&&(tc.$$scope={dirty:p,ctx:t}),je.$set(tc);const rc={};p&2&&(rc.$$scope={dirty:p,ctx:t}),ct.$set(rc);const ac={};p&2&&(ac.$$scope={dirty:p,ctx:t}),it.$set(ac);const ma={};p&2&&(ma.$$scope={dirty:p,ctx:t}),dt.$set(ma);const oc={};p&2&&(oc.$$scope={dirty:p,ctx:t}),_t.$set(oc);const ua={};p&2&&(ua.$$scope={dirty:p,ctx:t}),$t.$set(ua);const sc={};p&2&&(sc.$$scope={dirty:p,ctx:t}),kt.$set(sc);const cc={};p&2&&(cc.$$scope={dirty:p,ctx:t}),zt.$set(cc);const nc={};p&2&&(nc.$$scope={dirty:p,ctx:t}),It.$set(nc)},i(t){sn||(b(f.$$.fragment,t),b(Mt.$$.fragment,t),b(xe.$$.fragment,t),b(je.$$.fragment,t),b(Ht.$$.fragment,t),b(Ft.$$.fragment,t),b(Yt.$$.fragment,t),b(Bt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Xt.$$.fragment,t),b(Jt.$$.fragment,t),b(Zt.$$.fragment,t),b(er.$$.fragment,t),b(tr.$$.fragment,t),b(rr.$$.fragment,t),b(ar.$$.fragment,t),b(or.$$.fragment,t),b(sr.$$.fragment,t),b(cr.$$.fragment,t),b(nr.$$.fragment,t),b(lr.$$.fragment,t),b(ir.$$.fragment,t),b(dr.$$.fragment,t),b(pr.$$.fragment,t),b(hr.$$.fragment,t),b(mr.$$.fragment,t),b(ct.$$.fragment,t),b(ur.$$.fragment,t),b(fr.$$.fragment,t),b(_r.$$.fragment,t),b($r.$$.fragment,t),b(it.$$.fragment,t),b(yr.$$.fragment,t),b(dt.$$.fragment,t),b(Er.$$.fragment,t),b(Ar.$$.fragment,t),b(kr.$$.fragment,t),b(Pr.$$.fragment,t),b(Dr.$$.fragment,t),b(zr.$$.fragment,t),b(Sr.$$.fragment,t),b(Lr.$$.fragment,t),b(_t.$$.fragment,t),b(Or.$$.fragment,t),b(Nr.$$.fragment,t),b(Cr.$$.fragment,t),b(qr.$$.fragment,t),b($t.$$.fragment,t),b(Rr.$$.fragment,t),b(Gr.$$.fragment,t),b(Mr.$$.fragment,t),b(Wr.$$.fragment,t),b(Hr.$$.fragment,t),b(Fr.$$.fragment,t),b(kt.$$.fragment,t),b(Br.$$.fragment,t),b(Qr.$$.fragment,t),b(Jr.$$.fragment,t),b(ea.$$.fragment,t),b(ra.$$.fragment,t),b(oa.$$.fragment,t),b(sa.$$.fragment,t),b(zt.$$.fragment,t),b(ca.$$.fragment,t),b(la.$$.fragment,t),b(It.$$.fragment,t),b(ia.$$.fragment,t),b(da.$$.fragment,t),b(pa.$$.fragment,t),sn=!0)},o(t){y(f.$$.fragment,t),y(Mt.$$.fragment,t),y(xe.$$.fragment,t),y(je.$$.fragment,t),y(Ht.$$.fragment,t),y(Ft.$$.fragment,t),y(Yt.$$.fragment,t),y(Bt.$$.fragment,t),y(Kt.$$.fragment,t),y(Qt.$$.fragment,t),y(Xt.$$.fragment,t),y(Jt.$$.fragment,t),y(Zt.$$.fragment,t),y(er.$$.fragment,t),y(tr.$$.fragment,t),y(rr.$$.fragment,t),y(ar.$$.fragment,t),y(or.$$.fragment,t),y(sr.$$.fragment,t),y(cr.$$.fragment,t),y(nr.$$.fragment,t),y(lr.$$.fragment,t),y(ir.$$.fragment,t),y(dr.$$.fragment,t),y(pr.$$.fragment,t),y(hr.$$.fragment,t),y(mr.$$.fragment,t),y(ct.$$.fragment,t),y(ur.$$.fragment,t),y(fr.$$.fragment,t),y(_r.$$.fragment,t),y($r.$$.fragment,t),y(it.$$.fragment,t),y(yr.$$.fragment,t),y(dt.$$.fragment,t),y(Er.$$.fragment,t),y(Ar.$$.fragment,t),y(kr.$$.fragment,t),y(Pr.$$.fragment,t),y(Dr.$$.fragment,t),y(zr.$$.fragment,t),y(Sr.$$.fragment,t),y(Lr.$$.fragment,t),y(_t.$$.fragment,t),y(Or.$$.fragment,t),y(Nr.$$.fragment,t),y(Cr.$$.fragment,t),y(qr.$$.fragment,t),y($t.$$.fragment,t),y(Rr.$$.fragment,t),y(Gr.$$.fragment,t),y(Mr.$$.fragment,t),y(Wr.$$.fragment,t),y(Hr.$$.fragment,t),y(Fr.$$.fragment,t),y(kt.$$.fragment,t),y(Br.$$.fragment,t),y(Qr.$$.fragment,t),y(Jr.$$.fragment,t),y(ea.$$.fragment,t),y(ra.$$.fragment,t),y(oa.$$.fragment,t),y(sa.$$.fragment,t),y(zt.$$.fragment,t),y(ca.$$.fragment,t),y(la.$$.fragment,t),y(It.$$.fragment,t),y(ia.$$.fragment,t),y(da.$$.fragment,t),y(pa.$$.fragment,t),sn=!1},d(t){r(h),t&&r(k),t&&r(A),w(f),t&&r(Ae),t&&r(C),t&&r(Gt),t&&r(oe),w(Mt),t&&r(bc),t&&r(_a),t&&r(yc),t&&r(M),t&&r(wc),w(xe,t),t&&r(Ec),t&&r(ce),t&&r(Ac),w(je,t),t&&r(kc),t&&r(De),t&&r(xc),t&&r(ne),w(Ht),t&&r(Pc),t&&r(le),w(Ft),t&&r(jc),t&&r(ie),t&&r(Dc),w(Yt,t),t&&r(Tc),t&&r(de),w(Bt),t&&r(zc),t&&r(pe),w(Kt),t&&r(Sc),t&&r(Le),t&&r(Ic),w(Qt,t),t&&r(Lc),t&&r(Oe),t&&r(Oc),w(Xt,t),t&&r(Nc),t&&r(he),w(Jt),t&&r(Cc),t&&r(Ce),t&&r(qc),w(Zt,t),t&&r(Uc),t&&r(qe),t&&r(Vc),w(er,t),t&&r(Rc),t&&r(me),w(tr),t&&r(Gc),t&&r(ka),t&&r(Mc),w(rr,t),t&&r(Wc),w(ar,t),t&&r(Hc),t&&r(ue),w(or),t&&r(Fc),t&&r(Re),t&&r(Yc),t&&r(fe),w(sr),t&&r(Bc),t&&r(Me),t&&r(Kc),w(cr,t),t&&r(Qc),t&&r(W),t&&r(Xc),w(nr,t),t&&r(Jc),t&&r(ge),w(lr),t&&r(Zc),t&&r(L),t&&r(en),t&&r(_e),w(ir),t&&r(tn),t&&r(Be),t&&r(rn),w(dr,t),t&&r(an),t&&r(ve),w(pr),t&&r(on),t&&r(u),w(hr),w(mr),w(ct),w(ur),w(fr),w(_r),w($r),w(it),w(yr),w(dt),w(Er),w(Ar),w(kr),w(Pr),w(Dr),w(zr),w(Sr),w(Lr),w(_t),w(Or),w(Nr),w(Cr),w(qr),w($t),w(Rr),w(Gr),w(Mr),w(Wr),w(Hr),w(Fr),w(kt),w(Br),w(Qr),w(Jr),w(ea),w(ra),w(oa),w(sa),w(zt),w(ca),w(la),w(It),w(ia),w(da),w(pa)}}}const k_={local:"accelerator",sections:[{local:"quick-adaptation-of-your-code",title:"Quick adaptation of your code"},{local:"advanced-recommendations",sections:[{local:"printing",title:"Printing"},{local:"executing-processes",sections:[{local:"once-on-a-single-server",title:"Once on a single server"},{local:"only-ever-once-across-all-servers",title:"Only ever once across all servers"},{local:"on-specific-processes",title:"On specific processes"}],title:"Executing processes"},{local:"synchronicity-control",title:"Synchronicity control"},{local:"saving-and-loading",title:"Saving and loading"},{local:"operations",title:"Operations"},{local:"gradient-accumulation",title:"Gradient Accumulation"}],title:"Advanced recommendations"},{local:"accelerate.Accelerator",title:"Overall API documentation:"}],title:"Accelerator"};function x_(T){return m_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class I_ extends i_{constructor(h){super();d_(this,h,x_,A_,p_,{})}}export{I_ as default,k_ as metadata};
