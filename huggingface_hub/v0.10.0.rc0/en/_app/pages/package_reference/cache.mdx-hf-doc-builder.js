import{S as _o,i as mo,s as bo,e as n,k as h,w as v,t as c,M as $o,c as r,d as a,m as l,a as s,x as y,h as i,b as f,G as e,g as b,y as E,q as C,o as w,B as x,v as vo,L as ln}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ne}from"../../chunks/Tip-hf-doc-builder.js";import{D as L}from"../../chunks/Docstring-hf-doc-builder.js";import{C as fn}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as J}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as hn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function yo(F){let o,u;return o=new fn({props:{code:`from huggingface_hub import scan_cache_dir

hf_cache_info = scan_cache_dir()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_cache_info = scan_cache_dir()
HFCacheInfo(
    size_on_disk=<span class="hljs-number">3398085269</span>,
    repos=<span class="hljs-built_in">frozenset</span>({
        CachedRepoInfo(
            repo_id=<span class="hljs-string">&#x27;t5-small&#x27;</span>,
            repo_type=<span class="hljs-string">&#x27;model&#x27;</span>,
            repo_path=PosixPath(...),
            size_on_disk=<span class="hljs-number">970726914</span>,
            nb_files=<span class="hljs-number">11</span>,
            revisions=<span class="hljs-built_in">frozenset</span>({
                CachedRevisionInfo(
                    commit_hash=<span class="hljs-string">&#x27;d78aea13fa7ecd06c29e3e46195d6341255065d5&#x27;</span>,
                    size_on_disk=<span class="hljs-number">970726339</span>,
                    snapshot_path=PosixPath(...),
                    files=<span class="hljs-built_in">frozenset</span>({
                        CachedFileInfo(
                            file_name=<span class="hljs-string">&#x27;config.json&#x27;</span>,
                            size_on_disk=<span class="hljs-number">1197</span>
                            file_path=PosixPath(...),
                            blob_path=PosixPath(...),
                        ),
                        CachedFileInfo(...),
                        ...
                    }),
                ),
                CachedRevisionInfo(...),
                ...
            }),
        ),
        CachedRepoInfo(...),
        ...
    }),
    warnings=[
        CorruptedCacheException(<span class="hljs-string">&quot;Snapshots dir doesn&#x27;t exist in cached repo: ...&quot;</span>),
        CorruptedCacheException(...),
        ...
    ],
)`}}),{c(){v(o.$$.fragment)},l(d){y(o.$$.fragment,d)},m(d,m){E(o,d,m),u=!0},p:ln,i(d){u||(C(o.$$.fragment,d),u=!0)},o(d){w(o.$$.fragment,d),u=!1},d(d){x(o,d)}}}function Eo(F){let o,u,d,m,_,p,$,I;return $=new fn({props:{code:`> huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`,highlighted:`&gt; huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`}}),{c(){o=n("p"),u=c("You can also print a detailed report directly from the "),d=n("code"),m=c("huggingface-cli"),_=c(" using:"),p=h(),v($.$$.fragment)},l(S){o=r(S,"P",{});var z=s(o);u=i(z,"You can also print a detailed report directly from the "),d=r(z,"CODE",{});var P=s(d);m=i(P,"huggingface-cli"),P.forEach(a),_=i(z," using:"),z.forEach(a),p=l(S),y($.$$.fragment,S)},m(S,z){b(S,o,z),e(o,u),e(o,d),e(d,m),e(o,_),b(S,p,z),E($,S,z),I=!0},p:ln,i(S){I||(C($.$$.fragment,S),I=!0)},o(S){w($.$$.fragment,S),I=!1},d(S){S&&a(o),S&&a(p),x($,S)}}}function Co(F){let o,u,d,m,_;return{c(){o=n("p"),u=c("Here "),d=n("code"),m=c("size_on_disk"),_=c(` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`)},l(p){o=r(p,"P",{});var $=s(o);u=i($,"Here "),d=r($,"CODE",{});var I=s(d);m=i(I,"size_on_disk"),I.forEach(a),_=i($,` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`),$.forEach(a)},m(p,$){b(p,o,$),e(o,u),e(o,d),e(d,m),e(o,_)},d(p){p&&a(o)}}}function wo(F){let o,u,d,m,_;return m=new fn({props:{code:`from huggingface_hub import scan_cache_dir
cache_info = scan_cache_dir()
delete_strategy = cache_info.delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa"
)
print(f"Will free {delete_strategy.expected_freed_size_str}.")
delete_strategy.execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>cache_info = scan_cache_dir()
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy = cache_info.delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Will free <span class="hljs-subst">{delete_strategy.expected_freed_size_str}</span>.&quot;</span>)
Will free <span class="hljs-number">7.9</span>K.
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy.execute()
Cache deletion done. Saved <span class="hljs-number">7.9</span>K.`}}),{c(){o=n("p"),u=c("Examples:"),d=h(),v(m.$$.fragment)},l(p){o=r(p,"P",{});var $=s(o);u=i($,"Examples:"),$.forEach(a),d=l(p),y(m.$$.fragment,p)},m(p,$){b(p,o,$),e(o,u),b(p,d,$),E(m,p,$),_=!0},p:ln,i(p){_||(C(m.$$.fragment,p),_=!0)},o(p){w(m.$$.fragment,p),_=!1},d(p){p&&a(o),p&&a(d),x(m,p)}}}function xo(F){let o,u;return o=new fn({props:{code:`from huggingface_hub import scan_cache_dir
scan_cache_dir().delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa",
    "e2983b237dccf3ab4937c97fa717319a9ca1a96d",
    "6c0e6080953db56375760c0471a8c5f2929baf11",
).execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>scan_cache_dir().delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;e2983b237dccf3ab4937c97fa717319a9ca1a96d&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;6c0e6080953db56375760c0471a8c5f2929baf11&quot;</span>,
<span class="hljs-meta">... </span>).execute()
Cache deletion done. Saved <span class="hljs-number">8.6</span>G.`}}),{c(){v(o.$$.fragment)},l(d){y(o.$$.fragment,d)},m(d,m){E(o,d,m),u=!0},p:ln,i(d){u||(C(o.$$.fragment,d),u=!0)},o(d){w(o.$$.fragment,d),u=!1},d(d){x(o,d)}}}function Io(F){let o,u,d,m,_,p,$,I,S,z;return{c(){o=n("p"),u=n("code"),d=c("delete_revisions"),m=c(" returns a "),_=n("a"),p=c("DeleteCacheStrategy"),$=c(` object that needs to
be executed. The `),I=n("a"),S=c("DeleteCacheStrategy"),z=c(` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),this.h()},l(P){o=r(P,"P",{});var k=s(o);u=r(k,"CODE",{});var j=s(u);d=i(j,"delete_revisions"),j.forEach(a),m=i(k," returns a "),_=r(k,"A",{href:!0});var V=s(_);p=i(V,"DeleteCacheStrategy"),V.forEach(a),$=i(k,` object that needs to
be executed. The `),I=r(k,"A",{href:!0});var K=s(I);S=i(K,"DeleteCacheStrategy"),K.forEach(a),z=i(k,` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),k.forEach(a),this.h()},h(){f(_,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy"),f(I,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy")},m(P,k){b(P,o,k),e(o,u),e(u,d),e(o,m),e(o,_),e(_,p),e(o,$),e(o,I),e(I,S),e(o,z)},d(P){P&&a(o)}}}function ko(F){let o,u,d,m;return{c(){o=n("p"),u=n("code"),d=c("size_on_disk"),m=c(` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(_){o=r(_,"P",{});var p=s(o);u=r(p,"CODE",{});var $=s(u);d=i($,"size_on_disk"),$.forEach(a),m=i(p,` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),p.forEach(a)},m(_,p){b(_,o,p),e(o,u),e(u,d),e(o,m)},d(_){_&&a(o)}}}function So(F){let o,u,d,m,_,p,$,I,S,z;return{c(){o=n("p"),u=n("code"),d=c("last_accessed"),m=c(" and "),_=n("code"),p=c("last_modified"),$=c(` reliability can depend on the OS you are using.
See `),I=n("a"),S=c("python documentation"),z=c(`
for more details.`),this.h()},l(P){o=r(P,"P",{});var k=s(o);u=r(k,"CODE",{});var j=s(u);d=i(j,"last_accessed"),j.forEach(a),m=i(k," and "),_=r(k,"CODE",{});var V=s(_);p=i(V,"last_modified"),V.forEach(a),$=i(k,` reliability can depend on the OS you are using.
See `),I=r(k,"A",{href:!0,rel:!0});var K=s(I);S=i(K,"python documentation"),K.forEach(a),z=i(k,`
for more details.`),k.forEach(a),this.h()},h(){f(I,"href","https://docs.python.org/3/library/os.html#os.stat_result"),f(I,"rel","nofollow")},m(P,k){b(P,o,k),e(o,u),e(u,d),e(o,m),e(o,_),e(_,p),e(o,$),e(o,I),e(I,S),e(o,z)},d(P){P&&a(o)}}}function Po(F){let o,u,d,m;return{c(){o=n("p"),u=n("code"),d=c("last_accessed"),m=c(` cannot be determined correctly on a single revision as blob files
are shared across revisions.`)},l(_){o=r(_,"P",{});var p=s(o);u=r(p,"CODE",{});var $=s(u);d=i($,"last_accessed"),$.forEach(a),m=i(p,` cannot be determined correctly on a single revision as blob files
are shared across revisions.`),p.forEach(a)},m(_,p){b(_,o,p),e(o,u),e(u,d),e(o,m)},d(_){_&&a(o)}}}function zo(F){let o,u,d,m;return{c(){o=n("p"),u=n("code"),d=c("size_on_disk"),m=c(` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(_){o=r(_,"P",{});var p=s(o);u=r(p,"CODE",{});var $=s(u);d=i($,"size_on_disk"),$.forEach(a),m=i(p,` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),p.forEach(a)},m(_,p){b(_,o,p),e(o,u),e(u,d),e(o,m)},d(_){_&&a(o)}}}function Fo(F){let o,u,d,m,_,p,$,I,S,z;return{c(){o=n("p"),u=n("code"),d=c("blob_last_accessed"),m=c(" and "),_=n("code"),p=c("blob_last_modified"),$=c(` reliability can depend on the OS you
are using. See `),I=n("a"),S=c("python documentation"),z=c(`
for more details.`),this.h()},l(P){o=r(P,"P",{});var k=s(o);u=r(k,"CODE",{});var j=s(u);d=i(j,"blob_last_accessed"),j.forEach(a),m=i(k," and "),_=r(k,"CODE",{});var V=s(_);p=i(V,"blob_last_modified"),V.forEach(a),$=i(k,` reliability can depend on the OS you
are using. See `),I=r(k,"A",{href:!0,rel:!0});var K=s(I);S=i(K,"python documentation"),K.forEach(a),z=i(k,`
for more details.`),k.forEach(a),this.h()},h(){f(I,"href","https://docs.python.org/3/library/os.html#os.stat_result"),f(I,"rel","nofollow")},m(P,k){b(P,o,k),e(o,u),e(u,d),e(o,m),e(o,_),e(_,p),e(o,$),e(o,I),e(I,S),e(o,z)},d(P){P&&a(o)}}}function Do(F){let o,u,d,m,_,p,$,I,S,z,P,k,j,V,K,Ia,ee,de,Dt,Le,dn,Ht,gn,ka,te,ge,Rt,Oe,pn,At,un,Sa,D,Ue,_n,Ve,mn,vt,bn,$n,vn,G,yn,jt,En,Cn,yt,wn,xn,Et,In,kn,Sn,pe,Pn,ue,zn,Ke,Fn,Be,Dn,Ct,Hn,Rn,Pa,ae,_e,qt,Me,An,Tt,jn,za,me,qn,wt,Tn,Nn,Fa,ne,be,Nt,Ge,Ln,Lt,On,Da,q,Je,Un,Ot,Vn,Kn,Ye,Bn,xt,Mn,Gn,Jn,$e,Yn,A,We,Wn,Ut,Zn,Qn,Vt,Xn,er,ve,tr,ye,ar,Ee,Ha,re,Ce,Kt,Ze,nr,Bt,rr,Ra,R,Qe,sr,Mt,or,cr,we,ir,xe,hr,Y,Xe,lr,Gt,fr,dr,Jt,gr,pr,Ie,et,ur,tt,_r,Yt,mr,br,Aa,se,ke,Wt,at,$r,Zt,vr,ja,H,nt,yr,Qt,Er,Cr,oe,wr,Xt,xr,Ir,ea,kr,Sr,Pr,Se,zr,Pe,Fr,W,rt,Dr,ta,Hr,Rr,aa,Ar,jr,ze,st,qr,na,Tr,qa,ce,Fe,ra,ot,Nr,sa,Lr,Ta,O,ct,Or,oa,Ur,Vr,De,Kr,Z,it,Br,ca,Mr,Gr,ia,Jr,Na,ie,He,ha,ht,Yr,la,Wr,La,U,lt,Zr,fa,Qr,Xr,ft,es,It,ts,as,ns,Q,dt,rs,da,ss,os,ga,cs,Oa,he,Re,pa,gt,is,ua,hs,Ua,le,Ae,_a,pt,ls,ma,fs,Va,fe,ut,ds,ba,gs,Ka;return p=new J({}),Le=new J({}),Oe=new J({}),Ue=new L({props:{name:"huggingface_hub.scan_cache_dir",anchor:"huggingface_hub.scan_cache_dir",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.scan_cache_dir.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, <code>optional</code>) &#x2014;
Cache directory to cache. Defaults to the default HF cache directory.`,name:"cache_dir"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L492",raiseDescription:`
<ul>
<li><a
  href="https://docs.python.org/3/library/exceptions.html#ValueError"
  rel="nofollow"
><code>ValueError</code></a> \u2014
If directory to scan is missing or is a file.</li>
</ul>
`,raiseType:`
<p><code>ValueError</code></p>
`}}),pe=new hn({props:{anchor:"huggingface_hub.scan_cache_dir.example",$$slots:{default:[yo]},$$scope:{ctx:F}}}),ue=new hn({props:{anchor:"huggingface_hub.scan_cache_dir.example-2",$$slots:{default:[Eo]},$$scope:{ctx:F}}}),Ke=new Ne({props:{warning:!0}}),Me=new J({}),Ge=new J({}),Je=new L({props:{name:"class huggingface_hub.HFCacheInfo",anchor:"huggingface_hub.HFCacheInfo",parameters:[{name:"size_on_disk",val:": int"},{name:"repos",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRepoInfo]"},{name:"warnings",val:": typing.List[huggingface_hub.utils._cache_manager.CorruptedCacheException]"}],parametersDescription:[{anchor:"huggingface_hub.HFCacheInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of all valid repo sizes in the cache-system.`,name:"size_on_disk"},{anchor:"huggingface_hub.HFCacheInfo.repos",description:`<strong>repos</strong> (<code>FrozenSet[CachedRepoInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.CachedRepoInfo">~CachedRepoInfo</a> describing all valid cached repos found on the
cache-system while scanning.`,name:"repos"},{anchor:"huggingface_hub.HFCacheInfo.warnings",description:`<strong>warnings</strong> (<code>List[CorruptedCacheException]</code>) &#x2014;
List of <a href="/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.CorruptedCacheException">~CorruptedCacheException</a> that occurred while scanning the cache.
Those exceptions are captured so that the scan can continue. Corrupted repos
are skipped from the scan.`,name:"warnings"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L345"}}),$e=new Ne({props:{warning:!0,$$slots:{default:[Co]},$$scope:{ctx:F}}}),We=new L({props:{name:"delete_revisions",anchor:"huggingface_hub.HFCacheInfo.delete_revisions",parameters:[{name:"*revisions",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L383"}}),ve=new hn({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example",$$slots:{default:[wo]},$$scope:{ctx:F}}}),ye=new hn({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example-2",$$slots:{default:[xo]},$$scope:{ctx:F}}}),Ee=new Ne({props:{warning:!0,$$slots:{default:[Io]},$$scope:{ctx:F}}}),Ze=new J({}),Qe=new L({props:{name:"class huggingface_hub.CachedRepoInfo",anchor:"huggingface_hub.CachedRepoInfo",parameters:[{name:"repo_id",val:": str"},{name:"repo_type",val:": typing.Literal['model', 'dataset', 'space']"},{name:"repo_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"nb_files",val:": int"},{name:"revisions",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRevisionInfo]"},{name:"last_accessed",val:": float"},{name:"last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedRepoInfo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
Repo id of the repo on the Hub. Example: <code>&quot;google/fleurs&quot;</code>.`,name:"repo_id"},{anchor:"huggingface_hub.CachedRepoInfo.repo_type",description:`<strong>repo_type</strong> (<code>Literal[&quot;dataset&quot;, &quot;model&quot;, &quot;space&quot;]</code>) &#x2014;
Type of the cached repo.`,name:"repo_type"},{anchor:"huggingface_hub.CachedRepoInfo.repo_path",description:`<strong>repo_path</strong> (<code>Path</code>) &#x2014;
Local path to the cached repo.`,name:"repo_path"},{anchor:"huggingface_hub.CachedRepoInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes in the cached repo.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRepoInfo.nb_files",description:`<strong>nb_files</strong> (<code>int</code>) &#x2014;
Total number of blob files in the cached repo.`,name:"nb_files"},{anchor:"huggingface_hub.CachedRepoInfo.revisions",description:`<strong>revisions</strong> (<code>FrozenSet[CachedRevisionInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.CachedRevisionInfo">~CachedRevisionInfo</a> describing all revisions cached in the repo.`,name:"revisions"},{anchor:"huggingface_hub.CachedRepoInfo.last_accessed",description:`<strong>last_accessed</strong> (<code>float</code>) &#x2014;
Timestamp of the last time a blob file of the repo has been accessed.`,name:"last_accessed"},{anchor:"huggingface_hub.CachedRepoInfo.last_modified",description:`<strong>last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time a blob file of the repo has been modified/created.`,name:"last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L183"}}),we=new Ne({props:{warning:!0,$$slots:{default:[ko]},$$scope:{ctx:F}}}),xe=new Ne({props:{warning:!0,$$slots:{default:[So]},$$scope:{ctx:F}}}),Xe=new L({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRepoInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L251"}}),et=new L({props:{name:"refs",anchor:"huggingface_hub.CachedRepoInfo.refs",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L260"}}),at=new J({}),nt=new L({props:{name:"class huggingface_hub.CachedRevisionInfo",anchor:"huggingface_hub.CachedRevisionInfo",parameters:[{name:"commit_hash",val:": str"},{name:"snapshot_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"files",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedFileInfo]"},{name:"refs",val:": typing.FrozenSet[str]"},{name:"last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedRevisionInfo.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>) &#x2014;
Hash of the revision (unique).
Example: <code>&quot;9338f7b671827df886678df2bdd7cc7b4f36dffd&quot;</code>.`,name:"commit_hash"},{anchor:"huggingface_hub.CachedRevisionInfo.snapshot_path",description:`<strong>snapshot_path</strong> (<code>Path</code>) &#x2014;
Path to the revision directory in the <code>snapshots</code> folder. It contains the
exact tree structure as the repo on the Hub.
files &#x2014; (<code>FrozenSet[CachedFileInfo]</code>):
Set of <a href="/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.CachedFileInfo">~CachedFileInfo</a> describing all files contained in the snapshot.`,name:"snapshot_path"},{anchor:"huggingface_hub.CachedRevisionInfo.refs",description:`<strong>refs</strong> (<code>FrozenSet[str]</code>) &#x2014;
Set of <code>refs</code> pointing to this revision. If the revision has no <code>refs</code>, it
is considered detached.
Example: <code>{&quot;main&quot;, &quot;2.4.0&quot;}</code> or <code>{&quot;refs/pr/1&quot;}</code>.`,name:"refs"},{anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes that are symlink-ed by the revision.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRevisionInfo.last_modified",description:`<strong>last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the revision has been created/modified.`,name:"last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L106"}}),Se=new Ne({props:{warning:!0,$$slots:{default:[Po]},$$scope:{ctx:F}}}),Pe=new Ne({props:{warning:!0,$$slots:{default:[zo]},$$scope:{ctx:F}}}),rt=new L({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L165"}}),st=new L({props:{name:"nb_files",anchor:"huggingface_hub.CachedRevisionInfo.nb_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L174"}}),ot=new J({}),ct=new L({props:{name:"class huggingface_hub.CachedFileInfo",anchor:"huggingface_hub.CachedFileInfo",parameters:[{name:"file_name",val:": str"},{name:"file_path",val:": Path"},{name:"blob_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"blob_last_accessed",val:": float"},{name:"blob_last_modified",val:": float"}],parametersDescription:[{anchor:"huggingface_hub.CachedFileInfo.file_name",description:`<strong>file_name</strong> (<code>str</code>) &#x2014;
Name of the file. Example: <code>config.json</code>.`,name:"file_name"},{anchor:"huggingface_hub.CachedFileInfo.file_path",description:`<strong>file_path</strong> (<code>Path</code>) &#x2014;
Path of the file in the <code>snapshots</code> directory. The file path is a symlink
referring to a blob in the <code>blobs</code> folder.`,name:"file_path"},{anchor:"huggingface_hub.CachedFileInfo.blob_path",description:`<strong>blob_path</strong> (<code>Path</code>) &#x2014;
Path of the blob file. This is equivalent to <code>file_path.resolve()</code>.`,name:"blob_path"},{anchor:"huggingface_hub.CachedFileInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Size of the blob file in bytes.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedFileInfo.blob_last_accessed",description:`<strong>blob_last_accessed</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the blob file has been accessed (from any
revision).`,name:"blob_last_accessed"},{anchor:"huggingface_hub.CachedFileInfo.blob_last_modified",description:`<strong>blob_last_modified</strong> (<code>float</code>) &#x2014;
Timestamp of the last time the blob file has been modified/created.`,name:"blob_last_modified"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L39"}}),De=new Ne({props:{warning:!0,$$slots:{default:[Fo]},$$scope:{ctx:F}}}),it=new L({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedFileInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L95"}}),ht=new J({}),lt=new L({props:{name:"class huggingface_hub.DeleteCacheStrategy",anchor:"huggingface_hub.DeleteCacheStrategy",parameters:[{name:"expected_freed_size",val:": int"},{name:"blobs",val:": typing.FrozenSet[pathlib.Path]"},{name:"refs",val:": typing.FrozenSet[pathlib.Path]"},{name:"repos",val:": typing.FrozenSet[pathlib.Path]"},{name:"snapshots",val:": typing.FrozenSet[pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size",description:`<strong>expected_freed_size</strong> (<code>float</code>) &#x2014;
Expected freed size once strategy is executed.`,name:"expected_freed_size"},{anchor:"huggingface_hub.DeleteCacheStrategy.blobs",description:`<strong>blobs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of blob file paths to be deleted.`,name:"blobs"},{anchor:"huggingface_hub.DeleteCacheStrategy.refs",description:`<strong>refs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of reference file paths to be deleted.`,name:"refs"},{anchor:"huggingface_hub.DeleteCacheStrategy.repos",description:`<strong>repos</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of entire repo paths to be deleted.`,name:"repos"},{anchor:"huggingface_hub.DeleteCacheStrategy.snapshots",description:`<strong>snapshots</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of snapshots to be deleted (directory of symlinks).`,name:"snapshots"}],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L269"}}),dt=new L({props:{name:"expected_freed_size_str",anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L294"}}),gt=new J({}),pt=new J({}),ut=new L({props:{name:"class huggingface_hub.CorruptedCacheException",anchor:"huggingface_hub.CorruptedCacheException",parameters:"",source:"https://github.com/huggingface/huggingface_hub/blob/v0.10.0.rc0/src/huggingface_hub/utils/_cache_manager.py#L34"}}),{c(){o=n("meta"),u=h(),d=n("h1"),m=n("a"),_=n("span"),v(p.$$.fragment),$=h(),I=n("span"),S=c("Cache-system reference"),z=h(),P=n("p"),k=c(`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),j=n("a"),V=c("cache-system guide"),K=c(`
for a detailed presentation of caching at HF.`),Ia=h(),ee=n("h2"),de=n("a"),Dt=n("span"),v(Le.$$.fragment),dn=h(),Ht=n("span"),gn=c("Helpers"),ka=h(),te=n("h3"),ge=n("a"),Rt=n("span"),v(Oe.$$.fragment),pn=h(),At=n("span"),un=c("scan_cache_dir"),Sa=h(),D=n("div"),v(Ue.$$.fragment),_n=h(),Ve=n("p"),mn=c("Scan the entire HF cache-system and return a "),vt=n("a"),bn=c("~HFCacheInfo"),$n=c(" structure."),vn=h(),G=n("p"),yn=c("Use "),jt=n("code"),En=c("scan_cache_dir"),Cn=c(` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),yt=n("a"),wn=c("~CorruptedCacheException"),xn=c(`
will be thrown internally but captured and returned in the `),Et=n("a"),In=c("~HFCacheInfo"),kn=c(`
structure. Only valid repos get a proper report.`),Sn=h(),v(pe.$$.fragment),Pn=h(),v(ue.$$.fragment),zn=h(),v(Ke.$$.fragment),Fn=h(),Be=n("p"),Dn=c("Returns: a "),Ct=n("a"),Hn=c("~HFCacheInfo"),Rn=c(" object."),Pa=h(),ae=n("h2"),_e=n("a"),qt=n("span"),v(Me.$$.fragment),An=h(),Tt=n("span"),jn=c("Data structures"),za=h(),me=n("p"),qn=c("All structures are built and returned by "),wt=n("a"),Tn=c("scan_cache_dir()"),Nn=c(" and are immutable."),Fa=h(),ne=n("h3"),be=n("a"),Nt=n("span"),v(Ge.$$.fragment),Ln=h(),Lt=n("span"),On=c("HFCacheInfo"),Da=h(),q=n("div"),v(Je.$$.fragment),Un=h(),Ot=n("p"),Vn=c("Frozen data structure holding information about the entire cache-system."),Kn=h(),Ye=n("p"),Bn=c("This data structure is returned by "),xt=n("a"),Mn=c("scan_cache_dir()"),Gn=c(" and is immutable."),Jn=h(),v($e.$$.fragment),Yn=h(),A=n("div"),v(We.$$.fragment),Wn=h(),Ut=n("p"),Zn=c("Prepare the strategy to delete one or more revisions cached locally."),Qn=h(),Vt=n("p"),Xn=c(`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),er=h(),v(ve.$$.fragment),tr=h(),v(ye.$$.fragment),ar=h(),v(Ee.$$.fragment),Ha=h(),re=n("h3"),Ce=n("a"),Kt=n("span"),v(Ze.$$.fragment),nr=h(),Bt=n("span"),rr=c("CachedRepoInfo"),Ra=h(),R=n("div"),v(Qe.$$.fragment),sr=h(),Mt=n("p"),or=c("Frozen data structure holding information about a cached repository."),cr=h(),v(we.$$.fragment),ir=h(),v(xe.$$.fragment),hr=h(),Y=n("div"),v(Xe.$$.fragment),lr=h(),Gt=n("p"),fr=c("(property) Sum of the blob file sizes as a human-readable string."),dr=h(),Jt=n("p"),gr=c("Example: \u201C42.2K\u201D."),pr=h(),Ie=n("div"),v(et.$$.fragment),ur=h(),tt=n("p"),_r=c("(property) Mapping between "),Yt=n("code"),mr=c("refs"),br=c(" and revision data structures."),Aa=h(),se=n("h3"),ke=n("a"),Wt=n("span"),v(at.$$.fragment),$r=h(),Zt=n("span"),vr=c("CachedRevisionInfo"),ja=h(),H=n("div"),v(nt.$$.fragment),yr=h(),Qt=n("p"),Er=c("Frozen data structure holding information about a revision."),Cr=h(),oe=n("p"),wr=c("A revision correspond to a folder in the "),Xt=n("code"),xr=c("snapshots"),Ir=c(` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),ea=n("code"),kr=c("refs"),Sr=c(" or be \u201Cdetached\u201D (no refs)."),Pr=h(),v(Se.$$.fragment),zr=h(),v(Pe.$$.fragment),Fr=h(),W=n("div"),v(rt.$$.fragment),Dr=h(),ta=n("p"),Hr=c("(property) Sum of the blob file sizes as a human-readable string."),Rr=h(),aa=n("p"),Ar=c("Example: \u201C42.2K\u201D."),jr=h(),ze=n("div"),v(st.$$.fragment),qr=h(),na=n("p"),Tr=c("(property) Total number of files in the revision."),qa=h(),ce=n("h3"),Fe=n("a"),ra=n("span"),v(ot.$$.fragment),Nr=h(),sa=n("span"),Lr=c("CachedFileInfo"),Ta=h(),O=n("div"),v(ct.$$.fragment),Or=h(),oa=n("p"),Ur=c("Frozen data structure holding information about a single cached file."),Vr=h(),v(De.$$.fragment),Kr=h(),Z=n("div"),v(it.$$.fragment),Br=h(),ca=n("p"),Mr=c("(property) Size of the blob file as a human-readable string."),Gr=h(),ia=n("p"),Jr=c("Example: \u201C42.2K\u201D."),Na=h(),ie=n("h3"),He=n("a"),ha=n("span"),v(ht.$$.fragment),Yr=h(),la=n("span"),Wr=c("DeleteCacheStrategy"),La=h(),U=n("div"),v(lt.$$.fragment),Zr=h(),fa=n("p"),Qr=c("Frozen data structure holding the strategy to delete cached revisions."),Xr=h(),ft=n("p"),es=c(`This object is not meant to be instantiated programmatically but to be returned by
`),It=n("a"),ts=c("delete_revisions()"),as=c(". See documentation for usage example."),ns=h(),Q=n("div"),v(dt.$$.fragment),rs=h(),da=n("p"),ss=c("(property) Expected size that will be freed as a human-readable string."),os=h(),ga=n("p"),cs=c("Example: \u201C42.2K\u201D."),Oa=h(),he=n("h2"),Re=n("a"),pa=n("span"),v(gt.$$.fragment),is=h(),ua=n("span"),hs=c("Exceptions"),Ua=h(),le=n("h3"),Ae=n("a"),_a=n("span"),v(pt.$$.fragment),ls=h(),ma=n("span"),fs=c("CorruptedCacheException"),Va=h(),fe=n("div"),v(ut.$$.fragment),ds=h(),ba=n("p"),gs=c("Exception for any unexpected structure in the Huggingface cache-system."),this.h()},l(t){const g=$o('[data-svelte="svelte-1phssyn"]',document.head);o=r(g,"META",{name:!0,content:!0}),g.forEach(a),u=l(t),d=r(t,"H1",{class:!0});var _t=s(d);m=r(_t,"A",{id:!0,class:!0,href:!0});var $a=s(m);_=r($a,"SPAN",{});var va=s(_);y(p.$$.fragment,va),va.forEach(a),$a.forEach(a),$=l(_t),I=r(_t,"SPAN",{});var ya=s(I);S=i(ya,"Cache-system reference"),ya.forEach(a),_t.forEach(a),z=l(t),P=r(t,"P",{});var mt=s(P);k=i(mt,`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),j=r(mt,"A",{href:!0});var Ea=s(j);V=i(Ea,"cache-system guide"),Ea.forEach(a),K=i(mt,`
for a detailed presentation of caching at HF.`),mt.forEach(a),Ia=l(t),ee=r(t,"H2",{class:!0});var bt=s(ee);de=r(bt,"A",{id:!0,class:!0,href:!0});var Ca=s(de);Dt=r(Ca,"SPAN",{});var wa=s(Dt);y(Le.$$.fragment,wa),wa.forEach(a),Ca.forEach(a),dn=l(bt),Ht=r(bt,"SPAN",{});var xa=s(Ht);gn=i(xa,"Helpers"),xa.forEach(a),bt.forEach(a),ka=l(t),te=r(t,"H3",{class:!0});var $t=s(te);ge=r($t,"A",{id:!0,class:!0,href:!0});var ps=s(ge);Rt=r(ps,"SPAN",{});var us=s(Rt);y(Oe.$$.fragment,us),us.forEach(a),ps.forEach(a),pn=l($t),At=r($t,"SPAN",{});var _s=s(At);un=i(_s,"scan_cache_dir"),_s.forEach(a),$t.forEach(a),Sa=l(t),D=r(t,"DIV",{class:!0});var T=s(D);y(Ue.$$.fragment,T),_n=l(T),Ve=r(T,"P",{});var Ba=s(Ve);mn=i(Ba,"Scan the entire HF cache-system and return a "),vt=r(Ba,"A",{href:!0});var ms=s(vt);bn=i(ms,"~HFCacheInfo"),ms.forEach(a),$n=i(Ba," structure."),Ba.forEach(a),vn=l(T),G=r(T,"P",{});var je=s(G);yn=i(je,"Use "),jt=r(je,"CODE",{});var bs=s(jt);En=i(bs,"scan_cache_dir"),bs.forEach(a),Cn=i(je,` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),yt=r(je,"A",{href:!0});var $s=s(yt);wn=i($s,"~CorruptedCacheException"),$s.forEach(a),xn=i(je,`
will be thrown internally but captured and returned in the `),Et=r(je,"A",{href:!0});var vs=s(Et);In=i(vs,"~HFCacheInfo"),vs.forEach(a),kn=i(je,`
structure. Only valid repos get a proper report.`),je.forEach(a),Sn=l(T),y(pe.$$.fragment,T),Pn=l(T),y(ue.$$.fragment,T),zn=l(T),y(Ke.$$.fragment,T),Fn=l(T),Be=r(T,"P",{});var Ma=s(Be);Dn=i(Ma,"Returns: a "),Ct=r(Ma,"A",{href:!0});var ys=s(Ct);Hn=i(ys,"~HFCacheInfo"),ys.forEach(a),Rn=i(Ma," object."),Ma.forEach(a),T.forEach(a),Pa=l(t),ae=r(t,"H2",{class:!0});var Ga=s(ae);_e=r(Ga,"A",{id:!0,class:!0,href:!0});var Es=s(_e);qt=r(Es,"SPAN",{});var Cs=s(qt);y(Me.$$.fragment,Cs),Cs.forEach(a),Es.forEach(a),An=l(Ga),Tt=r(Ga,"SPAN",{});var ws=s(Tt);jn=i(ws,"Data structures"),ws.forEach(a),Ga.forEach(a),za=l(t),me=r(t,"P",{});var Ja=s(me);qn=i(Ja,"All structures are built and returned by "),wt=r(Ja,"A",{href:!0});var xs=s(wt);Tn=i(xs,"scan_cache_dir()"),xs.forEach(a),Nn=i(Ja," and are immutable."),Ja.forEach(a),Fa=l(t),ne=r(t,"H3",{class:!0});var Ya=s(ne);be=r(Ya,"A",{id:!0,class:!0,href:!0});var Is=s(be);Nt=r(Is,"SPAN",{});var ks=s(Nt);y(Ge.$$.fragment,ks),ks.forEach(a),Is.forEach(a),Ln=l(Ya),Lt=r(Ya,"SPAN",{});var Ss=s(Lt);On=i(Ss,"HFCacheInfo"),Ss.forEach(a),Ya.forEach(a),Da=l(t),q=r(t,"DIV",{class:!0});var X=s(q);y(Je.$$.fragment,X),Un=l(X),Ot=r(X,"P",{});var Ps=s(Ot);Vn=i(Ps,"Frozen data structure holding information about the entire cache-system."),Ps.forEach(a),Kn=l(X),Ye=r(X,"P",{});var Wa=s(Ye);Bn=i(Wa,"This data structure is returned by "),xt=r(Wa,"A",{href:!0});var zs=s(xt);Mn=i(zs,"scan_cache_dir()"),zs.forEach(a),Gn=i(Wa," and is immutable."),Wa.forEach(a),Jn=l(X),y($e.$$.fragment,X),Yn=l(X),A=r(X,"DIV",{class:!0});var B=s(A);y(We.$$.fragment,B),Wn=l(B),Ut=r(B,"P",{});var Fs=s(Ut);Zn=i(Fs,"Prepare the strategy to delete one or more revisions cached locally."),Fs.forEach(a),Qn=l(B),Vt=r(B,"P",{});var Ds=s(Vt);Xn=i(Ds,`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),Ds.forEach(a),er=l(B),y(ve.$$.fragment,B),tr=l(B),y(ye.$$.fragment,B),ar=l(B),y(Ee.$$.fragment,B),B.forEach(a),X.forEach(a),Ha=l(t),re=r(t,"H3",{class:!0});var Za=s(re);Ce=r(Za,"A",{id:!0,class:!0,href:!0});var Hs=s(Ce);Kt=r(Hs,"SPAN",{});var Rs=s(Kt);y(Ze.$$.fragment,Rs),Rs.forEach(a),Hs.forEach(a),nr=l(Za),Bt=r(Za,"SPAN",{});var As=s(Bt);rr=i(As,"CachedRepoInfo"),As.forEach(a),Za.forEach(a),Ra=l(t),R=r(t,"DIV",{class:!0});var M=s(R);y(Qe.$$.fragment,M),sr=l(M),Mt=r(M,"P",{});var js=s(Mt);or=i(js,"Frozen data structure holding information about a cached repository."),js.forEach(a),cr=l(M),y(we.$$.fragment,M),ir=l(M),y(xe.$$.fragment,M),hr=l(M),Y=r(M,"DIV",{class:!0});var kt=s(Y);y(Xe.$$.fragment,kt),lr=l(kt),Gt=r(kt,"P",{});var qs=s(Gt);fr=i(qs,"(property) Sum of the blob file sizes as a human-readable string."),qs.forEach(a),dr=l(kt),Jt=r(kt,"P",{});var Ts=s(Jt);gr=i(Ts,"Example: \u201C42.2K\u201D."),Ts.forEach(a),kt.forEach(a),pr=l(M),Ie=r(M,"DIV",{class:!0});var Qa=s(Ie);y(et.$$.fragment,Qa),ur=l(Qa),tt=r(Qa,"P",{});var Xa=s(tt);_r=i(Xa,"(property) Mapping between "),Yt=r(Xa,"CODE",{});var Ns=s(Yt);mr=i(Ns,"refs"),Ns.forEach(a),br=i(Xa," and revision data structures."),Xa.forEach(a),Qa.forEach(a),M.forEach(a),Aa=l(t),se=r(t,"H3",{class:!0});var en=s(se);ke=r(en,"A",{id:!0,class:!0,href:!0});var Ls=s(ke);Wt=r(Ls,"SPAN",{});var Os=s(Wt);y(at.$$.fragment,Os),Os.forEach(a),Ls.forEach(a),$r=l(en),Zt=r(en,"SPAN",{});var Us=s(Zt);vr=i(Us,"CachedRevisionInfo"),Us.forEach(a),en.forEach(a),ja=l(t),H=r(t,"DIV",{class:!0});var N=s(H);y(nt.$$.fragment,N),yr=l(N),Qt=r(N,"P",{});var Vs=s(Qt);Er=i(Vs,"Frozen data structure holding information about a revision."),Vs.forEach(a),Cr=l(N),oe=r(N,"P",{});var St=s(oe);wr=i(St,"A revision correspond to a folder in the "),Xt=r(St,"CODE",{});var Ks=s(Xt);xr=i(Ks,"snapshots"),Ks.forEach(a),Ir=i(St,` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),ea=r(St,"CODE",{});var Bs=s(ea);kr=i(Bs,"refs"),Bs.forEach(a),Sr=i(St," or be \u201Cdetached\u201D (no refs)."),St.forEach(a),Pr=l(N),y(Se.$$.fragment,N),zr=l(N),y(Pe.$$.fragment,N),Fr=l(N),W=r(N,"DIV",{class:!0});var Pt=s(W);y(rt.$$.fragment,Pt),Dr=l(Pt),ta=r(Pt,"P",{});var Ms=s(ta);Hr=i(Ms,"(property) Sum of the blob file sizes as a human-readable string."),Ms.forEach(a),Rr=l(Pt),aa=r(Pt,"P",{});var Gs=s(aa);Ar=i(Gs,"Example: \u201C42.2K\u201D."),Gs.forEach(a),Pt.forEach(a),jr=l(N),ze=r(N,"DIV",{class:!0});var tn=s(ze);y(st.$$.fragment,tn),qr=l(tn),na=r(tn,"P",{});var Js=s(na);Tr=i(Js,"(property) Total number of files in the revision."),Js.forEach(a),tn.forEach(a),N.forEach(a),qa=l(t),ce=r(t,"H3",{class:!0});var an=s(ce);Fe=r(an,"A",{id:!0,class:!0,href:!0});var Ys=s(Fe);ra=r(Ys,"SPAN",{});var Ws=s(ra);y(ot.$$.fragment,Ws),Ws.forEach(a),Ys.forEach(a),Nr=l(an),sa=r(an,"SPAN",{});var Zs=s(sa);Lr=i(Zs,"CachedFileInfo"),Zs.forEach(a),an.forEach(a),Ta=l(t),O=r(t,"DIV",{class:!0});var qe=s(O);y(ct.$$.fragment,qe),Or=l(qe),oa=r(qe,"P",{});var Qs=s(oa);Ur=i(Qs,"Frozen data structure holding information about a single cached file."),Qs.forEach(a),Vr=l(qe),y(De.$$.fragment,qe),Kr=l(qe),Z=r(qe,"DIV",{class:!0});var zt=s(Z);y(it.$$.fragment,zt),Br=l(zt),ca=r(zt,"P",{});var Xs=s(ca);Mr=i(Xs,"(property) Size of the blob file as a human-readable string."),Xs.forEach(a),Gr=l(zt),ia=r(zt,"P",{});var eo=s(ia);Jr=i(eo,"Example: \u201C42.2K\u201D."),eo.forEach(a),zt.forEach(a),qe.forEach(a),Na=l(t),ie=r(t,"H3",{class:!0});var nn=s(ie);He=r(nn,"A",{id:!0,class:!0,href:!0});var to=s(He);ha=r(to,"SPAN",{});var ao=s(ha);y(ht.$$.fragment,ao),ao.forEach(a),to.forEach(a),Yr=l(nn),la=r(nn,"SPAN",{});var no=s(la);Wr=i(no,"DeleteCacheStrategy"),no.forEach(a),nn.forEach(a),La=l(t),U=r(t,"DIV",{class:!0});var Te=s(U);y(lt.$$.fragment,Te),Zr=l(Te),fa=r(Te,"P",{});var ro=s(fa);Qr=i(ro,"Frozen data structure holding the strategy to delete cached revisions."),ro.forEach(a),Xr=l(Te),ft=r(Te,"P",{});var rn=s(ft);es=i(rn,`This object is not meant to be instantiated programmatically but to be returned by
`),It=r(rn,"A",{href:!0});var so=s(It);ts=i(so,"delete_revisions()"),so.forEach(a),as=i(rn,". See documentation for usage example."),rn.forEach(a),ns=l(Te),Q=r(Te,"DIV",{class:!0});var Ft=s(Q);y(dt.$$.fragment,Ft),rs=l(Ft),da=r(Ft,"P",{});var oo=s(da);ss=i(oo,"(property) Expected size that will be freed as a human-readable string."),oo.forEach(a),os=l(Ft),ga=r(Ft,"P",{});var co=s(ga);cs=i(co,"Example: \u201C42.2K\u201D."),co.forEach(a),Ft.forEach(a),Te.forEach(a),Oa=l(t),he=r(t,"H2",{class:!0});var sn=s(he);Re=r(sn,"A",{id:!0,class:!0,href:!0});var io=s(Re);pa=r(io,"SPAN",{});var ho=s(pa);y(gt.$$.fragment,ho),ho.forEach(a),io.forEach(a),is=l(sn),ua=r(sn,"SPAN",{});var lo=s(ua);hs=i(lo,"Exceptions"),lo.forEach(a),sn.forEach(a),Ua=l(t),le=r(t,"H3",{class:!0});var on=s(le);Ae=r(on,"A",{id:!0,class:!0,href:!0});var fo=s(Ae);_a=r(fo,"SPAN",{});var go=s(_a);y(pt.$$.fragment,go),go.forEach(a),fo.forEach(a),ls=l(on),ma=r(on,"SPAN",{});var po=s(ma);fs=i(po,"CorruptedCacheException"),po.forEach(a),on.forEach(a),Va=l(t),fe=r(t,"DIV",{class:!0});var cn=s(fe);y(ut.$$.fragment,cn),ds=l(cn),ba=r(cn,"P",{});var uo=s(ba);gs=i(uo,"Exception for any unexpected structure in the Huggingface cache-system."),uo.forEach(a),cn.forEach(a),this.h()},h(){f(o,"name","hf:doc:metadata"),f(o,"content",JSON.stringify(Ho)),f(m,"id","cachesystem-reference"),f(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(m,"href","#cachesystem-reference"),f(d,"class","relative group"),f(j,"href","../how-to-cache"),f(de,"id","helpers"),f(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(de,"href","#helpers"),f(ee,"class","relative group"),f(ge,"id","huggingface_hub.scan_cache_dir"),f(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ge,"href","#huggingface_hub.scan_cache_dir"),f(te,"class","relative group"),f(vt,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(yt,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.CorruptedCacheException"),f(Et,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(Ct,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(_e,"id","data-structures"),f(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_e,"href","#data-structures"),f(ae,"class","relative group"),f(wt,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(be,"id","huggingface_hub.HFCacheInfo"),f(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(be,"href","#huggingface_hub.HFCacheInfo"),f(ne,"class","relative group"),f(xt,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ce,"id","huggingface_hub.CachedRepoInfo"),f(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ce,"href","#huggingface_hub.CachedRepoInfo"),f(re,"class","relative group"),f(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ke,"id","huggingface_hub.CachedRevisionInfo"),f(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ke,"href","#huggingface_hub.CachedRevisionInfo"),f(se,"class","relative group"),f(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Fe,"id","huggingface_hub.CachedFileInfo"),f(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Fe,"href","#huggingface_hub.CachedFileInfo"),f(ce,"class","relative group"),f(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(He,"id","huggingface_hub.DeleteCacheStrategy"),f(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(He,"href","#huggingface_hub.DeleteCacheStrategy"),f(ie,"class","relative group"),f(It,"href","/docs/huggingface_hub/v0.10.0.rc0/en/package_reference/cache#huggingface_hub.HFCacheInfo.delete_revisions"),f(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Re,"id","exceptions"),f(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Re,"href","#exceptions"),f(he,"class","relative group"),f(Ae,"id","huggingface_hub.CorruptedCacheException"),f(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ae,"href","#huggingface_hub.CorruptedCacheException"),f(le,"class","relative group"),f(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,g){e(document.head,o),b(t,u,g),b(t,d,g),e(d,m),e(m,_),E(p,_,null),e(d,$),e(d,I),e(I,S),b(t,z,g),b(t,P,g),e(P,k),e(P,j),e(j,V),e(P,K),b(t,Ia,g),b(t,ee,g),e(ee,de),e(de,Dt),E(Le,Dt,null),e(ee,dn),e(ee,Ht),e(Ht,gn),b(t,ka,g),b(t,te,g),e(te,ge),e(ge,Rt),E(Oe,Rt,null),e(te,pn),e(te,At),e(At,un),b(t,Sa,g),b(t,D,g),E(Ue,D,null),e(D,_n),e(D,Ve),e(Ve,mn),e(Ve,vt),e(vt,bn),e(Ve,$n),e(D,vn),e(D,G),e(G,yn),e(G,jt),e(jt,En),e(G,Cn),e(G,yt),e(yt,wn),e(G,xn),e(G,Et),e(Et,In),e(G,kn),e(D,Sn),E(pe,D,null),e(D,Pn),E(ue,D,null),e(D,zn),E(Ke,D,null),e(D,Fn),e(D,Be),e(Be,Dn),e(Be,Ct),e(Ct,Hn),e(Be,Rn),b(t,Pa,g),b(t,ae,g),e(ae,_e),e(_e,qt),E(Me,qt,null),e(ae,An),e(ae,Tt),e(Tt,jn),b(t,za,g),b(t,me,g),e(me,qn),e(me,wt),e(wt,Tn),e(me,Nn),b(t,Fa,g),b(t,ne,g),e(ne,be),e(be,Nt),E(Ge,Nt,null),e(ne,Ln),e(ne,Lt),e(Lt,On),b(t,Da,g),b(t,q,g),E(Je,q,null),e(q,Un),e(q,Ot),e(Ot,Vn),e(q,Kn),e(q,Ye),e(Ye,Bn),e(Ye,xt),e(xt,Mn),e(Ye,Gn),e(q,Jn),E($e,q,null),e(q,Yn),e(q,A),E(We,A,null),e(A,Wn),e(A,Ut),e(Ut,Zn),e(A,Qn),e(A,Vt),e(Vt,Xn),e(A,er),E(ve,A,null),e(A,tr),E(ye,A,null),e(A,ar),E(Ee,A,null),b(t,Ha,g),b(t,re,g),e(re,Ce),e(Ce,Kt),E(Ze,Kt,null),e(re,nr),e(re,Bt),e(Bt,rr),b(t,Ra,g),b(t,R,g),E(Qe,R,null),e(R,sr),e(R,Mt),e(Mt,or),e(R,cr),E(we,R,null),e(R,ir),E(xe,R,null),e(R,hr),e(R,Y),E(Xe,Y,null),e(Y,lr),e(Y,Gt),e(Gt,fr),e(Y,dr),e(Y,Jt),e(Jt,gr),e(R,pr),e(R,Ie),E(et,Ie,null),e(Ie,ur),e(Ie,tt),e(tt,_r),e(tt,Yt),e(Yt,mr),e(tt,br),b(t,Aa,g),b(t,se,g),e(se,ke),e(ke,Wt),E(at,Wt,null),e(se,$r),e(se,Zt),e(Zt,vr),b(t,ja,g),b(t,H,g),E(nt,H,null),e(H,yr),e(H,Qt),e(Qt,Er),e(H,Cr),e(H,oe),e(oe,wr),e(oe,Xt),e(Xt,xr),e(oe,Ir),e(oe,ea),e(ea,kr),e(oe,Sr),e(H,Pr),E(Se,H,null),e(H,zr),E(Pe,H,null),e(H,Fr),e(H,W),E(rt,W,null),e(W,Dr),e(W,ta),e(ta,Hr),e(W,Rr),e(W,aa),e(aa,Ar),e(H,jr),e(H,ze),E(st,ze,null),e(ze,qr),e(ze,na),e(na,Tr),b(t,qa,g),b(t,ce,g),e(ce,Fe),e(Fe,ra),E(ot,ra,null),e(ce,Nr),e(ce,sa),e(sa,Lr),b(t,Ta,g),b(t,O,g),E(ct,O,null),e(O,Or),e(O,oa),e(oa,Ur),e(O,Vr),E(De,O,null),e(O,Kr),e(O,Z),E(it,Z,null),e(Z,Br),e(Z,ca),e(ca,Mr),e(Z,Gr),e(Z,ia),e(ia,Jr),b(t,Na,g),b(t,ie,g),e(ie,He),e(He,ha),E(ht,ha,null),e(ie,Yr),e(ie,la),e(la,Wr),b(t,La,g),b(t,U,g),E(lt,U,null),e(U,Zr),e(U,fa),e(fa,Qr),e(U,Xr),e(U,ft),e(ft,es),e(ft,It),e(It,ts),e(ft,as),e(U,ns),e(U,Q),E(dt,Q,null),e(Q,rs),e(Q,da),e(da,ss),e(Q,os),e(Q,ga),e(ga,cs),b(t,Oa,g),b(t,he,g),e(he,Re),e(Re,pa),E(gt,pa,null),e(he,is),e(he,ua),e(ua,hs),b(t,Ua,g),b(t,le,g),e(le,Ae),e(Ae,_a),E(pt,_a,null),e(le,ls),e(le,ma),e(ma,fs),b(t,Va,g),b(t,fe,g),E(ut,fe,null),e(fe,ds),e(fe,ba),e(ba,gs),Ka=!0},p(t,[g]){const _t={};g&2&&(_t.$$scope={dirty:g,ctx:t}),pe.$set(_t);const $a={};g&2&&($a.$$scope={dirty:g,ctx:t}),ue.$set($a);const va={};g&2&&(va.$$scope={dirty:g,ctx:t}),$e.$set(va);const ya={};g&2&&(ya.$$scope={dirty:g,ctx:t}),ve.$set(ya);const mt={};g&2&&(mt.$$scope={dirty:g,ctx:t}),ye.$set(mt);const Ea={};g&2&&(Ea.$$scope={dirty:g,ctx:t}),Ee.$set(Ea);const bt={};g&2&&(bt.$$scope={dirty:g,ctx:t}),we.$set(bt);const Ca={};g&2&&(Ca.$$scope={dirty:g,ctx:t}),xe.$set(Ca);const wa={};g&2&&(wa.$$scope={dirty:g,ctx:t}),Se.$set(wa);const xa={};g&2&&(xa.$$scope={dirty:g,ctx:t}),Pe.$set(xa);const $t={};g&2&&($t.$$scope={dirty:g,ctx:t}),De.$set($t)},i(t){Ka||(C(p.$$.fragment,t),C(Le.$$.fragment,t),C(Oe.$$.fragment,t),C(Ue.$$.fragment,t),C(pe.$$.fragment,t),C(ue.$$.fragment,t),C(Ke.$$.fragment,t),C(Me.$$.fragment,t),C(Ge.$$.fragment,t),C(Je.$$.fragment,t),C($e.$$.fragment,t),C(We.$$.fragment,t),C(ve.$$.fragment,t),C(ye.$$.fragment,t),C(Ee.$$.fragment,t),C(Ze.$$.fragment,t),C(Qe.$$.fragment,t),C(we.$$.fragment,t),C(xe.$$.fragment,t),C(Xe.$$.fragment,t),C(et.$$.fragment,t),C(at.$$.fragment,t),C(nt.$$.fragment,t),C(Se.$$.fragment,t),C(Pe.$$.fragment,t),C(rt.$$.fragment,t),C(st.$$.fragment,t),C(ot.$$.fragment,t),C(ct.$$.fragment,t),C(De.$$.fragment,t),C(it.$$.fragment,t),C(ht.$$.fragment,t),C(lt.$$.fragment,t),C(dt.$$.fragment,t),C(gt.$$.fragment,t),C(pt.$$.fragment,t),C(ut.$$.fragment,t),Ka=!0)},o(t){w(p.$$.fragment,t),w(Le.$$.fragment,t),w(Oe.$$.fragment,t),w(Ue.$$.fragment,t),w(pe.$$.fragment,t),w(ue.$$.fragment,t),w(Ke.$$.fragment,t),w(Me.$$.fragment,t),w(Ge.$$.fragment,t),w(Je.$$.fragment,t),w($e.$$.fragment,t),w(We.$$.fragment,t),w(ve.$$.fragment,t),w(ye.$$.fragment,t),w(Ee.$$.fragment,t),w(Ze.$$.fragment,t),w(Qe.$$.fragment,t),w(we.$$.fragment,t),w(xe.$$.fragment,t),w(Xe.$$.fragment,t),w(et.$$.fragment,t),w(at.$$.fragment,t),w(nt.$$.fragment,t),w(Se.$$.fragment,t),w(Pe.$$.fragment,t),w(rt.$$.fragment,t),w(st.$$.fragment,t),w(ot.$$.fragment,t),w(ct.$$.fragment,t),w(De.$$.fragment,t),w(it.$$.fragment,t),w(ht.$$.fragment,t),w(lt.$$.fragment,t),w(dt.$$.fragment,t),w(gt.$$.fragment,t),w(pt.$$.fragment,t),w(ut.$$.fragment,t),Ka=!1},d(t){a(o),t&&a(u),t&&a(d),x(p),t&&a(z),t&&a(P),t&&a(Ia),t&&a(ee),x(Le),t&&a(ka),t&&a(te),x(Oe),t&&a(Sa),t&&a(D),x(Ue),x(pe),x(ue),x(Ke),t&&a(Pa),t&&a(ae),x(Me),t&&a(za),t&&a(me),t&&a(Fa),t&&a(ne),x(Ge),t&&a(Da),t&&a(q),x(Je),x($e),x(We),x(ve),x(ye),x(Ee),t&&a(Ha),t&&a(re),x(Ze),t&&a(Ra),t&&a(R),x(Qe),x(we),x(xe),x(Xe),x(et),t&&a(Aa),t&&a(se),x(at),t&&a(ja),t&&a(H),x(nt),x(Se),x(Pe),x(rt),x(st),t&&a(qa),t&&a(ce),x(ot),t&&a(Ta),t&&a(O),x(ct),x(De),x(it),t&&a(Na),t&&a(ie),x(ht),t&&a(La),t&&a(U),x(lt),x(dt),t&&a(Oa),t&&a(he),x(gt),t&&a(Ua),t&&a(le),x(pt),t&&a(Va),t&&a(fe),x(ut)}}}const Ho={local:"cachesystem-reference",sections:[{local:"helpers",sections:[{local:"huggingface_hub.scan_cache_dir",title:"scan_cache_dir"}],title:"Helpers"},{local:"data-structures",sections:[{local:"huggingface_hub.HFCacheInfo",title:"HFCacheInfo"},{local:"huggingface_hub.CachedRepoInfo",title:"CachedRepoInfo"},{local:"huggingface_hub.CachedRevisionInfo",title:"CachedRevisionInfo"},{local:"huggingface_hub.CachedFileInfo",title:"CachedFileInfo"},{local:"huggingface_hub.DeleteCacheStrategy",title:"DeleteCacheStrategy"}],title:"Data structures"},{local:"exceptions",sections:[{local:"huggingface_hub.CorruptedCacheException",title:"CorruptedCacheException"}],title:"Exceptions"}],title:"Cache-system reference"};function Ro(F){return vo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Oo extends _o{constructor(o){super();mo(this,o,Ro,Do,bo,{})}}export{Oo as default,Ho as metadata};
