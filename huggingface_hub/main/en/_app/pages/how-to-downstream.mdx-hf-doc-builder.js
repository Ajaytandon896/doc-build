import{S as Zt,i as el,s as al,e as l,k as d,w as g,t as n,M as ol,c as s,d as o,m as p,a as r,x as _,h as t,b as f,P as Xt,G as a,g as h,y as w,L as nl,q as m,o as v,B as b,v as tl}from"../chunks/vendor-hf-doc-builder.js";import{I as lo}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as O}from"../chunks/CodeBlock-hf-doc-builder.js";function ll(Kn){let C,ga,S,R,Ie,z,so,Re,ro,_a,M,io,Me,ho,fo,wa,k,Be,po,co,Fe,uo,go,Ge,_o,ma,H,B,We,K,wo,Je,mo,va,j,vo,Ye,bo,yo,pe,$o,Eo,ba,Q,ya,T,ce,Qn,xo,ue,Xn,$a,ge,ko,Ea,X,xa,_e,jo,ka,Z,ja,q,qo,Ve,Do,Po,ze,Ao,Oo,qa,ee,Da,L,F,Ke,ae,Co,Qe,So,Pa,E,we,Ho,To,me,Lo,No,ve,Uo,Io,Aa,D,Ro,be,Mo,Bo,ye,Fo,Go,Oa,oe,Ca,x,$e,Wo,Jo,Ee,Yo,Vo,xe,zo,Ko,Sa,ne,Ha,N,G,Xe,te,Qo,Ze,Xo,Ta,U,ke,Zo,en,je,an,on,La,qe,nn,Na,le,Ua,I,De,tn,ln,ea,sn,rn,Ia,se,Ra,P,hn,Pe,fn,dn,Ae,pn,cn,Ma,c,un,Oe,gn,_n,aa,wn,mn,oa,vn,bn,na,yn,$n,ta,En,xn,Ba,W,kn,re,la,jn,qn,Fa,J,Dn,sa,Pn,An,Ga,ie,Wa,y,On,ra,Cn,Sn,ia,Hn,Tn,ha,Ln,Nn,Ja,he,Ya,Y,Un,Ce,In,Rn,Va,u,Mn,fa,Bn,Fn,da,Gn,Wn,pa,Jn,Yn,Se,Vn,zn,za;return z=new lo({}),K=new lo({}),Q=new O({props:{code:`from huggingface_hub import hf_hub_url
hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/main/config.json&#x27;</span>`}}),X=new O({props:{code:`hf_hub_url(repo_id="lysandre/arxiv-nlp", 
           filename="config.json", 
           revision="877b84a8f93f2d619faa2a6e514a32beef88ab0a",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, 
<span class="hljs-meta">... </span>           filename=<span class="hljs-string">&quot;config.json&quot;</span>, 
<span class="hljs-meta">... </span>           revision=<span class="hljs-string">&quot;877b84a8f93f2d619faa2a6e514a32beef88ab0a&quot;</span>,
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/lysandre/arxiv-nlp/resolve/877b84a8f93f2d619faa2a6e514a32beef88ab0a/config.json&#x27;</span>`}}),Z=new O({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="main")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)'}}),ee=new O({props:{code:'hf_hub_url(repo_id="lysandre/arxiv-nlp", filename="config.json", revision="v1.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>, revision=<span class="hljs-string">&quot;v1.0&quot;</span>)'}}),ae=new lo({}),oe=new O({props:{code:`from huggingface_hub import hf_hub_url, cached_download
config_file_url = hf_hub_url("lysandre/arxiv-nlp", filename="config.json")
cached_download(config_file_url)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url, cached_download
<span class="hljs-meta">&gt;&gt;&gt; </span>config_file_url = hf_hub_url(<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>cached_download(config_file_url)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/bc0e8cc2f8271b322304e8bb84b3b7580701d53a335ab2d75da19c249e2eeebb.066dae6fdb1e2b8cce60c35cc0f78ed1451d9b341c78de19f3ad469d10a8cbb1&#x27;</span>`}}),ne=new O({props:{code:`from huggingface_hub import hf_hub_download
hf_hub_download(repo_id="lysandre/arxiv-nlp", filename="config.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download
<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, filename=<span class="hljs-string">&quot;config.json&quot;</span>)`}}),te=new lo({}),le=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>)
<span class="hljs-string">&#x27;/home/lysandre/.cache/huggingface/hub/lysandre__arxiv-nlp.894a9adde21d9a3e3843e6d5aeaaf01875c7fade&#x27;</span>`}}),se=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", revision="main")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, revision=<span class="hljs-string">&quot;main&quot;</span>)`}}),ie=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", allow_regex="*.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, allow_regex=<span class="hljs-string">&quot;*.json&quot;</span>)`}}),he=new O({props:{code:`from huggingface_hub import snapshot_download
snapshot_download(repo_id="lysandre/arxiv-nlp", ignore_regex=["*.msgpack", "*.h5"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> snapshot_download
<span class="hljs-meta">&gt;&gt;&gt; </span>snapshot_download(repo_id=<span class="hljs-string">&quot;lysandre/arxiv-nlp&quot;</span>, ignore_regex=[<span class="hljs-string">&quot;*.msgpack&quot;</span>, <span class="hljs-string">&quot;*.h5&quot;</span>])`}}),{c(){C=l("meta"),ga=d(),S=l("h1"),R=l("a"),Ie=l("span"),g(z.$$.fragment),so=d(),Re=l("span"),ro=n("Download files from the Hub"),_a=d(),M=l("p"),io=n("The "),Me=l("code"),ho=n("huggingface_hub"),fo=n(` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),wa=d(),k=l("ul"),Be=l("li"),po=n("Specify a file to download from the Hub."),co=d(),Fe=l("li"),uo=n("Download and cache a file on your disk."),go=d(),Ge=l("li"),_o=n("Download all the files in a repository."),ma=d(),H=l("h2"),B=l("a"),We=l("span"),g(K.$$.fragment),wo=d(),Je=l("span"),mo=n("Choose a file to download"),va=d(),j=l("p"),vo=n("Use the "),Ye=l("code"),bo=n("filename"),yo=n(" parameter in the "),pe=l("a"),$o=n("hf_hub_url()"),Eo=n(` function to retrieve the URL of a
specific file to download:`),ba=d(),g(Q.$$.fragment),ya=d(),T=l("div"),ce=l("img"),xo=d(),ue=l("img"),$a=d(),ge=l("p"),ko=n(`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),Ea=d(),g(X.$$.fragment),xa=d(),_e=l("p"),jo=n("To specify a file revision with the branch name:"),ka=d(),g(Z.$$.fragment),ja=d(),q=l("p"),qo=n("To specify a file revision with a tag identifier. For example, if you want "),Ve=l("code"),Do=n("v1.0"),Po=n(` of the
`),ze=l("code"),Ao=n("config.json"),Oo=n(" file:"),qa=d(),g(ee.$$.fragment),Da=d(),L=l("h2"),F=l("a"),Ke=l("span"),g(ae.$$.fragment),Co=d(),Qe=l("span"),So=n("Download and store a file"),Pa=d(),E=l("p"),we=l("a"),Ho=n("cached_download()"),To=n(` is used to download and cache a file on your local disk. Once a file
is stored in your cache, you don\u2019t have to redownload it the next time you use it.
`),me=l("a"),Lo=n("cached_download()"),No=n(` is a hands-free solution for staying up to date with new file
versions. When a downloaded file is updated in the remote repository,
`),ve=l("a"),Uo=n("cached_download()"),Io=n(" will automatically download and store it."),Aa=d(),D=l("p"),Ro=n("Begin by retrieving the file URL with "),be=l("a"),Mo=n("hf_hub_url()"),Bo=n(`, and then pass the specified URL to
`),ye=l("a"),Fo=n("cached_download()"),Go=n(" to download the file:"),Oa=d(),g(oe.$$.fragment),Ca=d(),x=l("p"),$e=l("a"),Wo=n("hf_hub_url()"),Jo=n(" and "),Ee=l("a"),Yo=n("cached_download()"),Vo=n(` work hand-in-hand to download a file. This is
such a standard workflow that `),xe=l("a"),zo=n("hf_hub_download()"),Ko=n(` is a wrapper that calls both of these
functions.`),Sa=d(),g(ne.$$.fragment),Ha=d(),N=l("h2"),G=l("a"),Xe=l("span"),g(te.$$.fragment),Qo=d(),Ze=l("span"),Xo=n("Download an entire repository"),Ta=d(),U=l("p"),ke=l("a"),Zo=n("snapshot_download()"),en=n(` downloads an entire repository at a given revision. Like
`),je=l("a"),an=n("cached_download()"),on=n(`, all downloaded files are cached on your local disk. However, even
if only a single file is updated, the entire repository will be redownloaded.`),La=d(),qe=l("p"),nn=n("Download a whole repository as shown in the following:"),Na=d(),g(le.$$.fragment),Ua=d(),I=l("p"),De=l("a"),tn=n("snapshot_download()"),ln=n(` downloads the latest revision by default. If you want a specific
repository revision, use the `),ea=l("code"),sn=n("revision"),rn=n(" parameter:"),Ia=d(),g(se.$$.fragment),Ra=d(),P=l("p"),hn=n("In general, it is usually better to download files with "),Pe=l("a"),fn=n("hf_hub_download()"),dn=n(` - if you
already know the file name - to avoid redownloading an entire repository.
`),Ae=l("a"),pn=n("snapshot_download()"),cn=n(" is helpful when you are unaware of which files to download."),Ma=d(),c=l("p"),un=n(`However, you don\u2019t always want to download the contents of an entire repository with
`),Oe=l("a"),gn=n("snapshot_download()"),_n=n(`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),aa=l("code"),wn=n("allow_regex"),mn=n(" and "),oa=l("code"),vn=n("ignore_regex"),bn=n(`. Use the
`),na=l("code"),yn=n("allow_regex"),$n=n(" and "),ta=l("code"),En=n("ignore_regex"),xn=n(` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),Ba=d(),W=l("p"),kn=n(`The regex matching is based on
`),re=l("a"),la=l("code"),jn=n("fnmatch"),qn=n(`, which provides support for
Unix shell-style wildcards.`),Fa=d(),J=l("p"),Dn=n("For example, you can use "),sa=l("code"),Pn=n("allow_regex"),An=n(" to only download JSON configuration files:"),Ga=d(),g(ie.$$.fragment),Wa=d(),y=l("p"),On=n("On the other hand, "),ra=l("code"),Cn=n("ignore_regex"),Sn=n(` can exclude certain files from being downloaded. The
following example ignores the `),ia=l("code"),Hn=n(".msgpack"),Tn=n(" and "),ha=l("code"),Ln=n(".h5"),Nn=n(" file extensions:"),Ja=d(),g(he.$$.fragment),Ya=d(),Y=l("p"),Un=n(`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),Ce=l("a"),In=n("snapshot_download()"),Rn=n("."),Va=d(),u=l("p"),Mn=n("Note that passing "),fa=l("code"),Bn=n("allow_regex"),Fn=n(" or "),da=l("code"),Gn=n("ignore_regex"),Wn=n(" does "),pa=l("strong"),Jn=n("not"),Yn=n(` prevent
`),Se=l("a"),Vn=n("snapshot_download()"),zn=n(` from redownloading the entire model repository if an ignored file
is changed.`),this.h()},l(e){const i=ol('[data-svelte="svelte-1phssyn"]',document.head);C=s(i,"META",{name:!0,content:!0}),i.forEach(o),ga=p(e),S=s(e,"H1",{class:!0});var Ka=r(S);R=s(Ka,"A",{id:!0,class:!0,href:!0});var Zn=r(R);Ie=s(Zn,"SPAN",{});var et=r(Ie);_(z.$$.fragment,et),et.forEach(o),Zn.forEach(o),so=p(Ka),Re=s(Ka,"SPAN",{});var at=r(Re);ro=t(at,"Download files from the Hub"),at.forEach(o),Ka.forEach(o),_a=p(e),M=s(e,"P",{});var Qa=r(M);io=t(Qa,"The "),Me=s(Qa,"CODE",{});var ot=r(Me);ho=t(ot,"huggingface_hub"),ot.forEach(o),fo=t(Qa,` library provides functions to download files from the repositories
stored on the Hub. You can use these functions independently or integrate them into your
own library, making it more convenient for your users to interact with the Hub. This
guide will show you how to:`),Qa.forEach(o),wa=p(e),k=s(e,"UL",{});var He=r(k);Be=s(He,"LI",{});var nt=r(Be);po=t(nt,"Specify a file to download from the Hub."),nt.forEach(o),co=p(He),Fe=s(He,"LI",{});var tt=r(Fe);uo=t(tt,"Download and cache a file on your disk."),tt.forEach(o),go=p(He),Ge=s(He,"LI",{});var lt=r(Ge);_o=t(lt,"Download all the files in a repository."),lt.forEach(o),He.forEach(o),ma=p(e),H=s(e,"H2",{class:!0});var Xa=r(H);B=s(Xa,"A",{id:!0,class:!0,href:!0});var st=r(B);We=s(st,"SPAN",{});var rt=r(We);_(K.$$.fragment,rt),rt.forEach(o),st.forEach(o),wo=p(Xa),Je=s(Xa,"SPAN",{});var it=r(Je);mo=t(it,"Choose a file to download"),it.forEach(o),Xa.forEach(o),va=p(e),j=s(e,"P",{});var Te=r(j);vo=t(Te,"Use the "),Ye=s(Te,"CODE",{});var ht=r(Ye);bo=t(ht,"filename"),ht.forEach(o),yo=t(Te," parameter in the "),pe=s(Te,"A",{href:!0});var ft=r(pe);$o=t(ft,"hf_hub_url()"),ft.forEach(o),Eo=t(Te,` function to retrieve the URL of a
specific file to download:`),Te.forEach(o),ba=p(e),_(Q.$$.fragment,e),ya=p(e),T=s(e,"DIV",{class:!0});var Za=r(T);ce=s(Za,"IMG",{class:!0,src:!0}),xo=p(Za),ue=s(Za,"IMG",{class:!0,src:!0}),Za.forEach(o),$a=p(e),ge=s(e,"P",{});var dt=r(ge);ko=t(dt,`Specify a particular file version by providing the file revision, which can be the
branch name, a tag, or a commit hash. When using the commit hash, it must be the
full-length hash instead of a 7-character commit hash:`),dt.forEach(o),Ea=p(e),_(X.$$.fragment,e),xa=p(e),_e=s(e,"P",{});var pt=r(_e);jo=t(pt,"To specify a file revision with the branch name:"),pt.forEach(o),ka=p(e),_(Z.$$.fragment,e),ja=p(e),q=s(e,"P",{});var Le=r(q);qo=t(Le,"To specify a file revision with a tag identifier. For example, if you want "),Ve=s(Le,"CODE",{});var ct=r(Ve);Do=t(ct,"v1.0"),ct.forEach(o),Po=t(Le,` of the
`),ze=s(Le,"CODE",{});var ut=r(ze);Ao=t(ut,"config.json"),ut.forEach(o),Oo=t(Le," file:"),Le.forEach(o),qa=p(e),_(ee.$$.fragment,e),Da=p(e),L=s(e,"H2",{class:!0});var eo=r(L);F=s(eo,"A",{id:!0,class:!0,href:!0});var gt=r(F);Ke=s(gt,"SPAN",{});var _t=r(Ke);_(ae.$$.fragment,_t),_t.forEach(o),gt.forEach(o),Co=p(eo),Qe=s(eo,"SPAN",{});var wt=r(Qe);So=t(wt,"Download and store a file"),wt.forEach(o),eo.forEach(o),Pa=p(e),E=s(e,"P",{});var fe=r(E);we=s(fe,"A",{href:!0});var mt=r(we);Ho=t(mt,"cached_download()"),mt.forEach(o),To=t(fe,` is used to download and cache a file on your local disk. Once a file
is stored in your cache, you don\u2019t have to redownload it the next time you use it.
`),me=s(fe,"A",{href:!0});var vt=r(me);Lo=t(vt,"cached_download()"),vt.forEach(o),No=t(fe,` is a hands-free solution for staying up to date with new file
versions. When a downloaded file is updated in the remote repository,
`),ve=s(fe,"A",{href:!0});var bt=r(ve);Uo=t(bt,"cached_download()"),bt.forEach(o),Io=t(fe," will automatically download and store it."),fe.forEach(o),Aa=p(e),D=s(e,"P",{});var Ne=r(D);Ro=t(Ne,"Begin by retrieving the file URL with "),be=s(Ne,"A",{href:!0});var yt=r(be);Mo=t(yt,"hf_hub_url()"),yt.forEach(o),Bo=t(Ne,`, and then pass the specified URL to
`),ye=s(Ne,"A",{href:!0});var $t=r(ye);Fo=t($t,"cached_download()"),$t.forEach(o),Go=t(Ne," to download the file:"),Ne.forEach(o),Oa=p(e),_(oe.$$.fragment,e),Ca=p(e),x=s(e,"P",{});var de=r(x);$e=s(de,"A",{href:!0});var Et=r($e);Wo=t(Et,"hf_hub_url()"),Et.forEach(o),Jo=t(de," and "),Ee=s(de,"A",{href:!0});var xt=r(Ee);Yo=t(xt,"cached_download()"),xt.forEach(o),Vo=t(de,` work hand-in-hand to download a file. This is
such a standard workflow that `),xe=s(de,"A",{href:!0});var kt=r(xe);zo=t(kt,"hf_hub_download()"),kt.forEach(o),Ko=t(de,` is a wrapper that calls both of these
functions.`),de.forEach(o),Sa=p(e),_(ne.$$.fragment,e),Ha=p(e),N=s(e,"H2",{class:!0});var ao=r(N);G=s(ao,"A",{id:!0,class:!0,href:!0});var jt=r(G);Xe=s(jt,"SPAN",{});var qt=r(Xe);_(te.$$.fragment,qt),qt.forEach(o),jt.forEach(o),Qo=p(ao),Ze=s(ao,"SPAN",{});var Dt=r(Ze);Xo=t(Dt,"Download an entire repository"),Dt.forEach(o),ao.forEach(o),Ta=p(e),U=s(e,"P",{});var ca=r(U);ke=s(ca,"A",{href:!0});var Pt=r(ke);Zo=t(Pt,"snapshot_download()"),Pt.forEach(o),en=t(ca,` downloads an entire repository at a given revision. Like
`),je=s(ca,"A",{href:!0});var At=r(je);an=t(At,"cached_download()"),At.forEach(o),on=t(ca,`, all downloaded files are cached on your local disk. However, even
if only a single file is updated, the entire repository will be redownloaded.`),ca.forEach(o),La=p(e),qe=s(e,"P",{});var Ot=r(qe);nn=t(Ot,"Download a whole repository as shown in the following:"),Ot.forEach(o),Na=p(e),_(le.$$.fragment,e),Ua=p(e),I=s(e,"P",{});var ua=r(I);De=s(ua,"A",{href:!0});var Ct=r(De);tn=t(Ct,"snapshot_download()"),Ct.forEach(o),ln=t(ua,` downloads the latest revision by default. If you want a specific
repository revision, use the `),ea=s(ua,"CODE",{});var St=r(ea);sn=t(St,"revision"),St.forEach(o),rn=t(ua," parameter:"),ua.forEach(o),Ia=p(e),_(se.$$.fragment,e),Ra=p(e),P=s(e,"P",{});var Ue=r(P);hn=t(Ue,"In general, it is usually better to download files with "),Pe=s(Ue,"A",{href:!0});var Ht=r(Pe);fn=t(Ht,"hf_hub_download()"),Ht.forEach(o),dn=t(Ue,` - if you
already know the file name - to avoid redownloading an entire repository.
`),Ae=s(Ue,"A",{href:!0});var Tt=r(Ae);pn=t(Tt,"snapshot_download()"),Tt.forEach(o),cn=t(Ue," is helpful when you are unaware of which files to download."),Ue.forEach(o),Ma=p(e),c=s(e,"P",{});var $=r(c);un=t($,`However, you don\u2019t always want to download the contents of an entire repository with
`),Oe=s($,"A",{href:!0});var Lt=r(Oe);gn=t(Lt,"snapshot_download()"),Lt.forEach(o),_n=t($,`. Even if you don\u2019t know the file name, you can download specific
files if you know the file type with `),aa=s($,"CODE",{});var Nt=r(aa);wn=t(Nt,"allow_regex"),Nt.forEach(o),mn=t($," and "),oa=s($,"CODE",{});var Ut=r(oa);vn=t(Ut,"ignore_regex"),Ut.forEach(o),bn=t($,`. Use the
`),na=s($,"CODE",{});var It=r(na);yn=t(It,"allow_regex"),It.forEach(o),$n=t($," and "),ta=s($,"CODE",{});var Rt=r(ta);En=t(Rt,"ignore_regex"),Rt.forEach(o),xn=t($,` arguments to specify which files to download. These
parameters accept either a single regex or a list of regexes.`),$.forEach(o),Ba=p(e),W=s(e,"P",{});var oo=r(W);kn=t(oo,`The regex matching is based on
`),re=s(oo,"A",{href:!0,rel:!0});var Mt=r(re);la=s(Mt,"CODE",{});var Bt=r(la);jn=t(Bt,"fnmatch"),Bt.forEach(o),Mt.forEach(o),qn=t(oo,`, which provides support for
Unix shell-style wildcards.`),oo.forEach(o),Fa=p(e),J=s(e,"P",{});var no=r(J);Dn=t(no,"For example, you can use "),sa=s(no,"CODE",{});var Ft=r(sa);Pn=t(Ft,"allow_regex"),Ft.forEach(o),An=t(no," to only download JSON configuration files:"),no.forEach(o),Ga=p(e),_(ie.$$.fragment,e),Wa=p(e),y=s(e,"P",{});var V=r(y);On=t(V,"On the other hand, "),ra=s(V,"CODE",{});var Gt=r(ra);Cn=t(Gt,"ignore_regex"),Gt.forEach(o),Sn=t(V,` can exclude certain files from being downloaded. The
following example ignores the `),ia=s(V,"CODE",{});var Wt=r(ia);Hn=t(Wt,".msgpack"),Wt.forEach(o),Tn=t(V," and "),ha=s(V,"CODE",{});var Jt=r(ha);Ln=t(Jt,".h5"),Jt.forEach(o),Nn=t(V," file extensions:"),V.forEach(o),Ja=p(e),_(he.$$.fragment,e),Ya=p(e),Y=s(e,"P",{});var to=r(Y);Un=t(to,`Passing a regex can be especially useful when repositories contain files that are never
expected to be downloaded by `),Ce=s(to,"A",{href:!0});var Yt=r(Ce);In=t(Yt,"snapshot_download()"),Yt.forEach(o),Rn=t(to,"."),to.forEach(o),Va=p(e),u=s(e,"P",{});var A=r(u);Mn=t(A,"Note that passing "),fa=s(A,"CODE",{});var Vt=r(fa);Bn=t(Vt,"allow_regex"),Vt.forEach(o),Fn=t(A," or "),da=s(A,"CODE",{});var zt=r(da);Gn=t(zt,"ignore_regex"),zt.forEach(o),Wn=t(A," does "),pa=s(A,"STRONG",{});var Kt=r(pa);Jn=t(Kt,"not"),Kt.forEach(o),Yn=t(A,` prevent
`),Se=s(A,"A",{href:!0});var Qt=r(Se);Vn=t(Qt,"snapshot_download()"),Qt.forEach(o),zn=t(A,` from redownloading the entire model repository if an ignored file
is changed.`),A.forEach(o),this.h()},h(){f(C,"name","hf:doc:metadata"),f(C,"content",JSON.stringify(sl)),f(R,"id","download-files-from-the-hub"),f(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(R,"href","#download-files-from-the-hub"),f(S,"class","relative group"),f(B,"id","choose-a-file-to-download"),f(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(B,"href","#choose-a-file-to-download"),f(H,"class","relative group"),f(pe,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(ce,"class","block dark:hidden"),Xt(ce.src,Qn="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo.png")||f(ce,"src",Qn),f(ue,"class","hidden dark:block"),Xt(ue.src,Xn="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/repo-dark.png")||f(ue,"src",Xn),f(T,"class","flex justify-center"),f(F,"id","download-and-store-a-file"),f(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(F,"href","#download-and-store-a-file"),f(L,"class","relative group"),f(we,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f(me,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f(ve,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f(be,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(ye,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f($e,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url"),f(Ee,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f(xe,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),f(G,"id","download-an-entire-repository"),f(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(G,"href","#download-an-entire-repository"),f(N,"class","relative group"),f(ke,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(je,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.cached_download"),f(De,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Pe,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_download"),f(Ae,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Oe,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(re,"href","https://docs.python.org/3/library/fnmatch.html"),f(re,"rel","nofollow"),f(Ce,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download"),f(Se,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.snapshot_download")},m(e,i){a(document.head,C),h(e,ga,i),h(e,S,i),a(S,R),a(R,Ie),w(z,Ie,null),a(S,so),a(S,Re),a(Re,ro),h(e,_a,i),h(e,M,i),a(M,io),a(M,Me),a(Me,ho),a(M,fo),h(e,wa,i),h(e,k,i),a(k,Be),a(Be,po),a(k,co),a(k,Fe),a(Fe,uo),a(k,go),a(k,Ge),a(Ge,_o),h(e,ma,i),h(e,H,i),a(H,B),a(B,We),w(K,We,null),a(H,wo),a(H,Je),a(Je,mo),h(e,va,i),h(e,j,i),a(j,vo),a(j,Ye),a(Ye,bo),a(j,yo),a(j,pe),a(pe,$o),a(j,Eo),h(e,ba,i),w(Q,e,i),h(e,ya,i),h(e,T,i),a(T,ce),a(T,xo),a(T,ue),h(e,$a,i),h(e,ge,i),a(ge,ko),h(e,Ea,i),w(X,e,i),h(e,xa,i),h(e,_e,i),a(_e,jo),h(e,ka,i),w(Z,e,i),h(e,ja,i),h(e,q,i),a(q,qo),a(q,Ve),a(Ve,Do),a(q,Po),a(q,ze),a(ze,Ao),a(q,Oo),h(e,qa,i),w(ee,e,i),h(e,Da,i),h(e,L,i),a(L,F),a(F,Ke),w(ae,Ke,null),a(L,Co),a(L,Qe),a(Qe,So),h(e,Pa,i),h(e,E,i),a(E,we),a(we,Ho),a(E,To),a(E,me),a(me,Lo),a(E,No),a(E,ve),a(ve,Uo),a(E,Io),h(e,Aa,i),h(e,D,i),a(D,Ro),a(D,be),a(be,Mo),a(D,Bo),a(D,ye),a(ye,Fo),a(D,Go),h(e,Oa,i),w(oe,e,i),h(e,Ca,i),h(e,x,i),a(x,$e),a($e,Wo),a(x,Jo),a(x,Ee),a(Ee,Yo),a(x,Vo),a(x,xe),a(xe,zo),a(x,Ko),h(e,Sa,i),w(ne,e,i),h(e,Ha,i),h(e,N,i),a(N,G),a(G,Xe),w(te,Xe,null),a(N,Qo),a(N,Ze),a(Ze,Xo),h(e,Ta,i),h(e,U,i),a(U,ke),a(ke,Zo),a(U,en),a(U,je),a(je,an),a(U,on),h(e,La,i),h(e,qe,i),a(qe,nn),h(e,Na,i),w(le,e,i),h(e,Ua,i),h(e,I,i),a(I,De),a(De,tn),a(I,ln),a(I,ea),a(ea,sn),a(I,rn),h(e,Ia,i),w(se,e,i),h(e,Ra,i),h(e,P,i),a(P,hn),a(P,Pe),a(Pe,fn),a(P,dn),a(P,Ae),a(Ae,pn),a(P,cn),h(e,Ma,i),h(e,c,i),a(c,un),a(c,Oe),a(Oe,gn),a(c,_n),a(c,aa),a(aa,wn),a(c,mn),a(c,oa),a(oa,vn),a(c,bn),a(c,na),a(na,yn),a(c,$n),a(c,ta),a(ta,En),a(c,xn),h(e,Ba,i),h(e,W,i),a(W,kn),a(W,re),a(re,la),a(la,jn),a(W,qn),h(e,Fa,i),h(e,J,i),a(J,Dn),a(J,sa),a(sa,Pn),a(J,An),h(e,Ga,i),w(ie,e,i),h(e,Wa,i),h(e,y,i),a(y,On),a(y,ra),a(ra,Cn),a(y,Sn),a(y,ia),a(ia,Hn),a(y,Tn),a(y,ha),a(ha,Ln),a(y,Nn),h(e,Ja,i),w(he,e,i),h(e,Ya,i),h(e,Y,i),a(Y,Un),a(Y,Ce),a(Ce,In),a(Y,Rn),h(e,Va,i),h(e,u,i),a(u,Mn),a(u,fa),a(fa,Bn),a(u,Fn),a(u,da),a(da,Gn),a(u,Wn),a(u,pa),a(pa,Jn),a(u,Yn),a(u,Se),a(Se,Vn),a(u,zn),za=!0},p:nl,i(e){za||(m(z.$$.fragment,e),m(K.$$.fragment,e),m(Q.$$.fragment,e),m(X.$$.fragment,e),m(Z.$$.fragment,e),m(ee.$$.fragment,e),m(ae.$$.fragment,e),m(oe.$$.fragment,e),m(ne.$$.fragment,e),m(te.$$.fragment,e),m(le.$$.fragment,e),m(se.$$.fragment,e),m(ie.$$.fragment,e),m(he.$$.fragment,e),za=!0)},o(e){v(z.$$.fragment,e),v(K.$$.fragment,e),v(Q.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(ee.$$.fragment,e),v(ae.$$.fragment,e),v(oe.$$.fragment,e),v(ne.$$.fragment,e),v(te.$$.fragment,e),v(le.$$.fragment,e),v(se.$$.fragment,e),v(ie.$$.fragment,e),v(he.$$.fragment,e),za=!1},d(e){o(C),e&&o(ga),e&&o(S),b(z),e&&o(_a),e&&o(M),e&&o(wa),e&&o(k),e&&o(ma),e&&o(H),b(K),e&&o(va),e&&o(j),e&&o(ba),b(Q,e),e&&o(ya),e&&o(T),e&&o($a),e&&o(ge),e&&o(Ea),b(X,e),e&&o(xa),e&&o(_e),e&&o(ka),b(Z,e),e&&o(ja),e&&o(q),e&&o(qa),b(ee,e),e&&o(Da),e&&o(L),b(ae),e&&o(Pa),e&&o(E),e&&o(Aa),e&&o(D),e&&o(Oa),b(oe,e),e&&o(Ca),e&&o(x),e&&o(Sa),b(ne,e),e&&o(Ha),e&&o(N),b(te),e&&o(Ta),e&&o(U),e&&o(La),e&&o(qe),e&&o(Na),b(le,e),e&&o(Ua),e&&o(I),e&&o(Ia),b(se,e),e&&o(Ra),e&&o(P),e&&o(Ma),e&&o(c),e&&o(Ba),e&&o(W),e&&o(Fa),e&&o(J),e&&o(Ga),b(ie,e),e&&o(Wa),e&&o(y),e&&o(Ja),b(he,e),e&&o(Ya),e&&o(Y),e&&o(Va),e&&o(u)}}}const sl={local:"download-files-from-the-hub",sections:[{local:"choose-a-file-to-download",title:"Choose a file to download"},{local:"download-and-store-a-file",title:"Download and store a file"},{local:"download-an-entire-repository",title:"Download an entire repository"}],title:"Download files from the Hub"};function rl(Kn){return tl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dl extends Zt{constructor(C){super();el(this,C,rl,ll,al,{})}}export{dl as default,sl as metadata};
