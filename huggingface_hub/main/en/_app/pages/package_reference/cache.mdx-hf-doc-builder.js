import{S as oo,i as so,s as io,e as n,k as h,w as _,t as s,M as co,c as r,d as t,m as l,a as o,x as b,h as i,b as c,G as a,g,y as v,q as $,o as y,B as E,v as ho,L as no}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ct}from"../../chunks/Tip-hf-doc-builder.js";import{D as T}from"../../chunks/Docstring-hf-doc-builder.js";import{C as ro}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as B}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as to}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function lo(A){let f,m;return f=new ro({props:{code:`from huggingface_hub import scan_cache_dir

hf_cache_info = scan_cache_dir()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_cache_info = scan_cache_dir()
HFCacheInfo(
    size_on_disk=<span class="hljs-number">3398085269</span>,
    repos=<span class="hljs-built_in">frozenset</span>({
        CachedRepoInfo(
            repo_id=<span class="hljs-string">&#x27;t5-small&#x27;</span>,
            repo_type=<span class="hljs-string">&#x27;model&#x27;</span>,
            repo_path=PosixPath(...),
            size_on_disk=<span class="hljs-number">970726914</span>,
            nb_files=<span class="hljs-number">11</span>,
            revisions=<span class="hljs-built_in">frozenset</span>({
                CachedRevisionInfo(
                    commit_hash=<span class="hljs-string">&#x27;d78aea13fa7ecd06c29e3e46195d6341255065d5&#x27;</span>,
                    size_on_disk=<span class="hljs-number">970726339</span>,
                    snapshot_path=PosixPath(...),
                    files=<span class="hljs-built_in">frozenset</span>({
                        CachedFileInfo(
                            file_name=<span class="hljs-string">&#x27;config.json&#x27;</span>,
                            size_on_disk=<span class="hljs-number">1197</span>
                            file_path=PosixPath(...),
                            blob_path=PosixPath(...),
                        ),
                        CachedFileInfo(...),
                        ...
                    }),
                ),
                CachedRevisionInfo(...),
                ...
            }),
        ),
        CachedRepoInfo(...),
        ...
    }),
    warnings=[
        CorruptedCacheException(<span class="hljs-string">&quot;Snapshots dir doesn&#x27;t exist in cached repo: ...&quot;</span>),
        CorruptedCacheException(...),
        ...
    ],
)`}}),{c(){_(f.$$.fragment)},l(d){b(f.$$.fragment,d)},m(d,C){v(f,d,C),m=!0},p:no,i(d){m||($(f.$$.fragment,d),m=!0)},o(d){y(f.$$.fragment,d),m=!1},d(d){E(f,d)}}}function fo(A){let f,m,d,C,w,p,I,S;return I=new ro({props:{code:`> huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`,highlighted:`&gt; huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`}}),{c(){f=n("p"),m=s("You can also print a detailed report directly from the "),d=n("code"),C=s("huggingface-cli"),w=s(" using:"),p=h(),_(I.$$.fragment)},l(x){f=r(x,"P",{});var H=o(f);m=i(H,"You can also print a detailed report directly from the "),d=r(H,"CODE",{});var N=o(d);C=i(N,"huggingface-cli"),N.forEach(t),w=i(H," using:"),H.forEach(t),p=l(x),b(I.$$.fragment,x)},m(x,H){g(x,f,H),a(f,m),a(f,d),a(d,C),a(f,w),g(x,p,H),v(I,x,H),S=!0},p:no,i(x){S||($(I.$$.fragment,x),S=!0)},o(x){y(I.$$.fragment,x),S=!1},d(x){x&&t(f),x&&t(p),E(I,x)}}}function uo(A){let f,m,d,C,w;return{c(){f=n("p"),m=s("Here "),d=n("code"),C=s("size_on_disk"),w=s(` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`)},l(p){f=r(p,"P",{});var I=o(f);m=i(I,"Here "),d=r(I,"CODE",{});var S=o(d);C=i(S,"size_on_disk"),S.forEach(t),w=i(I,` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`),I.forEach(t)},m(p,I){g(p,f,I),a(f,m),a(f,d),a(d,C),a(f,w)},d(p){p&&t(f)}}}function go(A){let f,m,d,C;return{c(){f=n("p"),m=n("code"),d=s("size_on_disk"),C=s(` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(w){f=r(w,"P",{});var p=o(f);m=r(p,"CODE",{});var I=o(m);d=i(I,"size_on_disk"),I.forEach(t),C=i(p,` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),p.forEach(t)},m(w,p){g(w,f,p),a(f,m),a(m,d),a(f,C)},d(w){w&&t(f)}}}function po(A){let f,m,d,C;return{c(){f=n("p"),m=n("code"),d=s("size_on_disk"),C=s(` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(w){f=r(w,"P",{});var p=o(f);m=r(p,"CODE",{});var I=o(m);d=i(I,"size_on_disk"),I.forEach(t),C=i(p,` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),p.forEach(t)},m(w,p){g(w,f,p),a(f,m),a(m,d),a(f,C)},d(w){w&&t(f)}}}function mo(A){let f,m,d,C,w,p,I,S,x,H,N,wt,Je,It,xt,Va,K,te,sa,ye,kt,ia,Pt,Ba,M,ne,ca,Ee,zt,ha,Ft,Ka,k,Ce,St,we,Ht,Ye,Rt,At,Dt,L,Nt,la,Lt,qt,Ze,Tt,jt,Qe,Ot,Ut,Vt,re,Bt,oe,Kt,Ie,Mt,xe,Gt,We,Jt,Yt,Ma,G,se,fa,ke,Zt,ua,Qt,Ga,ie,Wt,Xe,Xt,en,Ja,J,ce,ga,Pe,an,da,tn,Ya,R,ze,nn,pa,rn,on,Fe,sn,ea,cn,hn,ln,he,Za,Y,le,ma,Se,fn,_a,un,Qa,z,He,gn,ba,dn,pn,fe,mn,j,Re,_n,va,bn,vn,$a,$n,yn,ue,Ae,En,De,Cn,ya,wn,In,Wa,Z,ge,Ea,Ne,xn,Ca,kn,Xa,P,Le,Pn,wa,zn,Fn,Q,Sn,Ia,Hn,Rn,xa,An,Dn,Nn,de,Ln,O,qe,qn,ka,Tn,jn,Pa,On,Un,pe,Te,Vn,za,Bn,et,W,me,Fa,je,Kn,Sa,Mn,at,q,Oe,Gn,Ha,Jn,Yn,U,Ue,Zn,Ra,Qn,Wn,Aa,Xn,tt,X,_e,Da,Ve,er,Na,ar,nt,ee,be,La,Be,tr,qa,nr,rt,ae,Ke,rr,Ta,or,ot;return p=new B({}),ye=new B({}),Ee=new B({}),Ce=new T({props:{name:"huggingface_hub.scan_cache_dir",anchor:"huggingface_hub.scan_cache_dir",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.scan_cache_dir.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, <code>optional</code>) &#x2014;
Cache directory to cache. Defaults to the default HF cache directory.`,name:"cache_dir"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L209",raiseDescription:`
<ul>
<li><a
  href="https://docs.python.org/3/library/exceptions.html#ValueError"
  rel="nofollow"
><code>ValueError</code></a> \u2014
If directory to scan is missing or is a file.</li>
</ul>
`,raiseType:`
<p><code>ValueError</code></p>
`}}),re=new to({props:{anchor:"huggingface_hub.scan_cache_dir.example",$$slots:{default:[lo]},$$scope:{ctx:A}}}),oe=new to({props:{anchor:"huggingface_hub.scan_cache_dir.example-2",$$slots:{default:[fo]},$$scope:{ctx:A}}}),Ie=new Ct({props:{warning:!0}}),ke=new B({}),Pe=new B({}),ze=new T({props:{name:"class huggingface_hub.HFCacheInfo",anchor:"huggingface_hub.HFCacheInfo",parameters:[{name:"size_on_disk",val:": int"},{name:"repos",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRepoInfo]"},{name:"warnings",val:": typing.List[huggingface_hub.utils._cache_manager.CorruptedCacheException]"}],parametersDescription:[{anchor:"huggingface_hub.HFCacheInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of all valid repo sizes in the cache-system.`,name:"size_on_disk"},{anchor:"huggingface_hub.HFCacheInfo.repos",description:`<strong>repos</strong> (<code>FrozenSet[CachedRepoInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedRepoInfo">~CachedRepoInfo</a> describing all valid cached repos found on the
cache-system while scanning.`,name:"repos"},{anchor:"huggingface_hub.HFCacheInfo.warnings",description:`<strong>warnings</strong> (<code>List[CorruptedCacheException]</code>) &#x2014;
List of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CorruptedCacheException">~CorruptedCacheException</a> that occurred while scanning the cache.
Those exceptions are captured so that the scan can continue. Corrupted repos
are skipped from the scan.`,name:"warnings"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L170"}}),he=new Ct({props:{warning:!0,$$slots:{default:[uo]},$$scope:{ctx:A}}}),Se=new B({}),He=new T({props:{name:"class huggingface_hub.CachedRepoInfo",anchor:"huggingface_hub.CachedRepoInfo",parameters:[{name:"repo_id",val:": str"},{name:"repo_type",val:": typing.Literal['model', 'dataset', 'space']"},{name:"repo_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"nb_files",val:": int"},{name:"revisions",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRevisionInfo]"}],parametersDescription:[{anchor:"huggingface_hub.CachedRepoInfo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
Repo id of the repo on the Hub. Example: <code>&quot;google/fleurs&quot;</code>.`,name:"repo_id"},{anchor:"huggingface_hub.CachedRepoInfo.repo_type",description:`<strong>repo_type</strong> (<code>Literal[&quot;dataset&quot;, &quot;model&quot;, &quot;space&quot;]</code>) &#x2014;
Type of the cached repo.`,name:"repo_type"},{anchor:"huggingface_hub.CachedRepoInfo.repo_path",description:`<strong>repo_path</strong> (<code>Path</code>) &#x2014;
Local path to the cached repo.`,name:"repo_path"},{anchor:"huggingface_hub.CachedRepoInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes in the cached repo.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRepoInfo.nb_files",description:`<strong>nb_files</strong> (<code>int</code>) &#x2014;
Total number of blob files in the cached repo.`,name:"nb_files"},{anchor:"huggingface_hub.CachedRepoInfo.revisions",description:`<strong>revisions</strong> (<code>FrozenSet[CachedRevisionInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedRevisionInfo">~CachedRevisionInfo</a> describing all revisions cached in the repo.`,name:"revisions"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L119"}}),fe=new Ct({props:{warning:!0,$$slots:{default:[go]},$$scope:{ctx:A}}}),Re=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRepoInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L152"}}),Ae=new T({props:{name:"refs",anchor:"huggingface_hub.CachedRepoInfo.refs",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L161"}}),Ne=new B({}),Le=new T({props:{name:"class huggingface_hub.CachedRevisionInfo",anchor:"huggingface_hub.CachedRevisionInfo",parameters:[{name:"commit_hash",val:": str"},{name:"snapshot_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"files",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedFileInfo]"},{name:"refs",val:": typing.FrozenSet[str]"}],parametersDescription:[{anchor:"huggingface_hub.CachedRevisionInfo.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>) &#x2014;
Hash of the revision (unique).
Example: <code>&quot;9338f7b671827df886678df2bdd7cc7b4f36dffd&quot;</code>.`,name:"commit_hash"},{anchor:"huggingface_hub.CachedRevisionInfo.snapshot_path",description:`<strong>snapshot_path</strong> (<code>Path</code>) &#x2014;
Path to the revision directory in the <code>snapshots</code> folder. It contains the
exact tree structure as the repo on the Hub.`,name:"snapshot_path"},{anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes that are symlink-ed by the revision.
files &#x2014; (<code>FrozenSet[CachedFileInfo]</code>):
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedFileInfo">~CachedFileInfo</a> describing all files contained in the snapshot.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRevisionInfo.refs",description:`<strong>refs</strong> (<code>FrozenSet[str]</code>) &#x2014;
Set of <code>refs</code> pointing to this revision. If the revision has no <code>refs</code>, it
is considered detached.
Example: <code>{&quot;main&quot;, &quot;2.4.0&quot;}</code> or <code>{&quot;refs/pr/1&quot;}</code>.`,name:"refs"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L63"}}),de=new Ct({props:{warning:!0,$$slots:{default:[po]},$$scope:{ctx:A}}}),qe=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L101"}}),Te=new T({props:{name:"nb_files",anchor:"huggingface_hub.CachedRevisionInfo.nb_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L110"}}),je=new B({}),Oe=new T({props:{name:"class huggingface_hub.CachedFileInfo",anchor:"huggingface_hub.CachedFileInfo",parameters:[{name:"file_name",val:": str"},{name:"file_path",val:": Path"},{name:"blob_path",val:": Path"},{name:"size_on_disk",val:": int"}],parametersDescription:[{anchor:"huggingface_hub.CachedFileInfo.file_name",description:`<strong>file_name</strong> (<code>str</code>) &#x2014;
Name of the file. Example: <code>config.json</code>.`,name:"file_name"},{anchor:"huggingface_hub.CachedFileInfo.file_path",description:`<strong>file_path</strong> (<code>Path</code>) &#x2014;
Path of the file in the <code>snapshots</code> directory. The file path is a symlink
referring to a blob in the <code>blobs</code> folder.`,name:"file_path"},{anchor:"huggingface_hub.CachedFileInfo.blob_path",description:`<strong>blob_path</strong> (<code>Path</code>) &#x2014;
Path of the blob file. This is equivalent to <code>file_path.resolve()</code>.`,name:"blob_path"},{anchor:"huggingface_hub.CachedFileInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Size of the blob file in bytes.`,name:"size_on_disk"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L32"}}),Ue=new T({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedFileInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L52"}}),Ve=new B({}),Be=new B({}),Ke=new T({props:{name:"class huggingface_hub.CorruptedCacheException",anchor:"huggingface_hub.CorruptedCacheException",parameters:"",source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L27"}}),{c(){f=n("meta"),m=h(),d=n("h1"),C=n("a"),w=n("span"),_(p.$$.fragment),I=h(),S=n("span"),x=s("Cache-system reference"),H=h(),N=n("p"),wt=s(`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),Je=n("a"),It=s("cache-system guide"),xt=s(`
for a detailed presentation of caching at HF.`),Va=h(),K=n("h2"),te=n("a"),sa=n("span"),_(ye.$$.fragment),kt=h(),ia=n("span"),Pt=s("Helpers"),Ba=h(),M=n("h3"),ne=n("a"),ca=n("span"),_(Ee.$$.fragment),zt=h(),ha=n("span"),Ft=s("scan_cache_dir"),Ka=h(),k=n("div"),_(Ce.$$.fragment),St=h(),we=n("p"),Ht=s("Scan the entire HF cache-system and return a "),Ye=n("a"),Rt=s("~HFCacheInfo"),At=s(" structure."),Dt=h(),L=n("p"),Nt=s("Use "),la=n("code"),Lt=s("scan_cache_dir"),qt=s(` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),Ze=n("a"),Tt=s("~CorruptedCacheException"),jt=s(`
will be thrown internally but captured and returned in the `),Qe=n("a"),Ot=s("~HFCacheInfo"),Ut=s(`
structure. Only valid repos get a proper report.`),Vt=h(),_(re.$$.fragment),Bt=h(),_(oe.$$.fragment),Kt=h(),_(Ie.$$.fragment),Mt=h(),xe=n("p"),Gt=s("Returns: a "),We=n("a"),Jt=s("~HFCacheInfo"),Yt=s(" object."),Ma=h(),G=n("h2"),se=n("a"),fa=n("span"),_(ke.$$.fragment),Zt=h(),ua=n("span"),Qt=s("Data structures"),Ga=h(),ie=n("p"),Wt=s("All structures are built and returned by "),Xe=n("a"),Xt=s("scan_cache_dir()"),en=s(" and are immutable."),Ja=h(),J=n("h3"),ce=n("a"),ga=n("span"),_(Pe.$$.fragment),an=h(),da=n("span"),tn=s("HFCacheInfo"),Ya=h(),R=n("div"),_(ze.$$.fragment),nn=h(),pa=n("p"),rn=s("Frozen data structure holding information about the entire cache-system."),on=h(),Fe=n("p"),sn=s("This data structure is returned by "),ea=n("a"),cn=s("scan_cache_dir()"),hn=s(" and is immutable."),ln=h(),_(he.$$.fragment),Za=h(),Y=n("h3"),le=n("a"),ma=n("span"),_(Se.$$.fragment),fn=h(),_a=n("span"),un=s("CachedRepoInfo"),Qa=h(),z=n("div"),_(He.$$.fragment),gn=h(),ba=n("p"),dn=s("Frozen data structure holding information about a cached repository."),pn=h(),_(fe.$$.fragment),mn=h(),j=n("div"),_(Re.$$.fragment),_n=h(),va=n("p"),bn=s("(property) Sum of the blob file sizes as a human-readable string."),vn=h(),$a=n("p"),$n=s("Example: \u201C42.2K\u201D."),yn=h(),ue=n("div"),_(Ae.$$.fragment),En=h(),De=n("p"),Cn=s("(property) Mapping between "),ya=n("code"),wn=s("refs"),In=s(" and revision data structures."),Wa=h(),Z=n("h3"),ge=n("a"),Ea=n("span"),_(Ne.$$.fragment),xn=h(),Ca=n("span"),kn=s("CachedRevisionInfo"),Xa=h(),P=n("div"),_(Le.$$.fragment),Pn=h(),wa=n("p"),zn=s("Frozen data structure holding information about a revision."),Fn=h(),Q=n("p"),Sn=s("A revision correspond to a folder in the "),Ia=n("code"),Hn=s("snapshots"),Rn=s(` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),xa=n("code"),An=s("refs"),Dn=s(" or be \u201Cdetached\u201D (no refs)."),Nn=h(),_(de.$$.fragment),Ln=h(),O=n("div"),_(qe.$$.fragment),qn=h(),ka=n("p"),Tn=s("(property) Sum of the blob file sizes as a human-readable string."),jn=h(),Pa=n("p"),On=s("Example: \u201C42.2K\u201D."),Un=h(),pe=n("div"),_(Te.$$.fragment),Vn=h(),za=n("p"),Bn=s("(property) Total number of files in the revision."),et=h(),W=n("h3"),me=n("a"),Fa=n("span"),_(je.$$.fragment),Kn=h(),Sa=n("span"),Mn=s("CachedFileInfo"),at=h(),q=n("div"),_(Oe.$$.fragment),Gn=h(),Ha=n("p"),Jn=s("Frozen data structure holding information about a single cached file."),Yn=h(),U=n("div"),_(Ue.$$.fragment),Zn=h(),Ra=n("p"),Qn=s("(property) Size of the blob file as a human-readable string."),Wn=h(),Aa=n("p"),Xn=s("Example: \u201C42.2K\u201D."),tt=h(),X=n("h2"),_e=n("a"),Da=n("span"),_(Ve.$$.fragment),er=h(),Na=n("span"),ar=s("Exceptions"),nt=h(),ee=n("h3"),be=n("a"),La=n("span"),_(Be.$$.fragment),tr=h(),qa=n("span"),nr=s("CorruptedCacheException"),rt=h(),ae=n("div"),_(Ke.$$.fragment),rr=h(),Ta=n("p"),or=s("Exception for any unexpected structure in the Huggingface cache-system."),this.h()},l(e){const u=co('[data-svelte="svelte-1phssyn"]',document.head);f=r(u,"META",{name:!0,content:!0}),u.forEach(t),m=l(e),d=r(e,"H1",{class:!0});var Me=o(d);C=r(Me,"A",{id:!0,class:!0,href:!0});var ja=o(C);w=r(ja,"SPAN",{});var Oa=o(w);b(p.$$.fragment,Oa),Oa.forEach(t),ja.forEach(t),I=l(Me),S=r(Me,"SPAN",{});var Ua=o(S);x=i(Ua,"Cache-system reference"),Ua.forEach(t),Me.forEach(t),H=l(e),N=r(e,"P",{});var Ge=o(N);wt=i(Ge,`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),Je=r(Ge,"A",{href:!0});var sr=o(Je);It=i(sr,"cache-system guide"),sr.forEach(t),xt=i(Ge,`
for a detailed presentation of caching at HF.`),Ge.forEach(t),Va=l(e),K=r(e,"H2",{class:!0});var st=o(K);te=r(st,"A",{id:!0,class:!0,href:!0});var ir=o(te);sa=r(ir,"SPAN",{});var cr=o(sa);b(ye.$$.fragment,cr),cr.forEach(t),ir.forEach(t),kt=l(st),ia=r(st,"SPAN",{});var hr=o(ia);Pt=i(hr,"Helpers"),hr.forEach(t),st.forEach(t),Ba=l(e),M=r(e,"H3",{class:!0});var it=o(M);ne=r(it,"A",{id:!0,class:!0,href:!0});var lr=o(ne);ca=r(lr,"SPAN",{});var fr=o(ca);b(Ee.$$.fragment,fr),fr.forEach(t),lr.forEach(t),zt=l(it),ha=r(it,"SPAN",{});var ur=o(ha);Ft=i(ur,"scan_cache_dir"),ur.forEach(t),it.forEach(t),Ka=l(e),k=r(e,"DIV",{class:!0});var F=o(k);b(Ce.$$.fragment,F),St=l(F),we=r(F,"P",{});var ct=o(we);Ht=i(ct,"Scan the entire HF cache-system and return a "),Ye=r(ct,"A",{href:!0});var gr=o(Ye);Rt=i(gr,"~HFCacheInfo"),gr.forEach(t),At=i(ct," structure."),ct.forEach(t),Dt=l(F),L=r(F,"P",{});var ve=o(L);Nt=i(ve,"Use "),la=r(ve,"CODE",{});var dr=o(la);Lt=i(dr,"scan_cache_dir"),dr.forEach(t),qt=i(ve,` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),Ze=r(ve,"A",{href:!0});var pr=o(Ze);Tt=i(pr,"~CorruptedCacheException"),pr.forEach(t),jt=i(ve,`
will be thrown internally but captured and returned in the `),Qe=r(ve,"A",{href:!0});var mr=o(Qe);Ot=i(mr,"~HFCacheInfo"),mr.forEach(t),Ut=i(ve,`
structure. Only valid repos get a proper report.`),ve.forEach(t),Vt=l(F),b(re.$$.fragment,F),Bt=l(F),b(oe.$$.fragment,F),Kt=l(F),b(Ie.$$.fragment,F),Mt=l(F),xe=r(F,"P",{});var ht=o(xe);Gt=i(ht,"Returns: a "),We=r(ht,"A",{href:!0});var _r=o(We);Jt=i(_r,"~HFCacheInfo"),_r.forEach(t),Yt=i(ht," object."),ht.forEach(t),F.forEach(t),Ma=l(e),G=r(e,"H2",{class:!0});var lt=o(G);se=r(lt,"A",{id:!0,class:!0,href:!0});var br=o(se);fa=r(br,"SPAN",{});var vr=o(fa);b(ke.$$.fragment,vr),vr.forEach(t),br.forEach(t),Zt=l(lt),ua=r(lt,"SPAN",{});var $r=o(ua);Qt=i($r,"Data structures"),$r.forEach(t),lt.forEach(t),Ga=l(e),ie=r(e,"P",{});var ft=o(ie);Wt=i(ft,"All structures are built and returned by "),Xe=r(ft,"A",{href:!0});var yr=o(Xe);Xt=i(yr,"scan_cache_dir()"),yr.forEach(t),en=i(ft," and are immutable."),ft.forEach(t),Ja=l(e),J=r(e,"H3",{class:!0});var ut=o(J);ce=r(ut,"A",{id:!0,class:!0,href:!0});var Er=o(ce);ga=r(Er,"SPAN",{});var Cr=o(ga);b(Pe.$$.fragment,Cr),Cr.forEach(t),Er.forEach(t),an=l(ut),da=r(ut,"SPAN",{});var wr=o(da);tn=i(wr,"HFCacheInfo"),wr.forEach(t),ut.forEach(t),Ya=l(e),R=r(e,"DIV",{class:!0});var $e=o(R);b(ze.$$.fragment,$e),nn=l($e),pa=r($e,"P",{});var Ir=o(pa);rn=i(Ir,"Frozen data structure holding information about the entire cache-system."),Ir.forEach(t),on=l($e),Fe=r($e,"P",{});var gt=o(Fe);sn=i(gt,"This data structure is returned by "),ea=r(gt,"A",{href:!0});var xr=o(ea);cn=i(xr,"scan_cache_dir()"),xr.forEach(t),hn=i(gt," and is immutable."),gt.forEach(t),ln=l($e),b(he.$$.fragment,$e),$e.forEach(t),Za=l(e),Y=r(e,"H3",{class:!0});var dt=o(Y);le=r(dt,"A",{id:!0,class:!0,href:!0});var kr=o(le);ma=r(kr,"SPAN",{});var Pr=o(ma);b(Se.$$.fragment,Pr),Pr.forEach(t),kr.forEach(t),fn=l(dt),_a=r(dt,"SPAN",{});var zr=o(_a);un=i(zr,"CachedRepoInfo"),zr.forEach(t),dt.forEach(t),Qa=l(e),z=r(e,"DIV",{class:!0});var V=o(z);b(He.$$.fragment,V),gn=l(V),ba=r(V,"P",{});var Fr=o(ba);dn=i(Fr,"Frozen data structure holding information about a cached repository."),Fr.forEach(t),pn=l(V),b(fe.$$.fragment,V),mn=l(V),j=r(V,"DIV",{class:!0});var aa=o(j);b(Re.$$.fragment,aa),_n=l(aa),va=r(aa,"P",{});var Sr=o(va);bn=i(Sr,"(property) Sum of the blob file sizes as a human-readable string."),Sr.forEach(t),vn=l(aa),$a=r(aa,"P",{});var Hr=o($a);$n=i(Hr,"Example: \u201C42.2K\u201D."),Hr.forEach(t),aa.forEach(t),yn=l(V),ue=r(V,"DIV",{class:!0});var pt=o(ue);b(Ae.$$.fragment,pt),En=l(pt),De=r(pt,"P",{});var mt=o(De);Cn=i(mt,"(property) Mapping between "),ya=r(mt,"CODE",{});var Rr=o(ya);wn=i(Rr,"refs"),Rr.forEach(t),In=i(mt," and revision data structures."),mt.forEach(t),pt.forEach(t),V.forEach(t),Wa=l(e),Z=r(e,"H3",{class:!0});var _t=o(Z);ge=r(_t,"A",{id:!0,class:!0,href:!0});var Ar=o(ge);Ea=r(Ar,"SPAN",{});var Dr=o(Ea);b(Ne.$$.fragment,Dr),Dr.forEach(t),Ar.forEach(t),xn=l(_t),Ca=r(_t,"SPAN",{});var Nr=o(Ca);kn=i(Nr,"CachedRevisionInfo"),Nr.forEach(t),_t.forEach(t),Xa=l(e),P=r(e,"DIV",{class:!0});var D=o(P);b(Le.$$.fragment,D),Pn=l(D),wa=r(D,"P",{});var Lr=o(wa);zn=i(Lr,"Frozen data structure holding information about a revision."),Lr.forEach(t),Fn=l(D),Q=r(D,"P",{});var ta=o(Q);Sn=i(ta,"A revision correspond to a folder in the "),Ia=r(ta,"CODE",{});var qr=o(Ia);Hn=i(qr,"snapshots"),qr.forEach(t),Rn=i(ta,` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),xa=r(ta,"CODE",{});var Tr=o(xa);An=i(Tr,"refs"),Tr.forEach(t),Dn=i(ta," or be \u201Cdetached\u201D (no refs)."),ta.forEach(t),Nn=l(D),b(de.$$.fragment,D),Ln=l(D),O=r(D,"DIV",{class:!0});var na=o(O);b(qe.$$.fragment,na),qn=l(na),ka=r(na,"P",{});var jr=o(ka);Tn=i(jr,"(property) Sum of the blob file sizes as a human-readable string."),jr.forEach(t),jn=l(na),Pa=r(na,"P",{});var Or=o(Pa);On=i(Or,"Example: \u201C42.2K\u201D."),Or.forEach(t),na.forEach(t),Un=l(D),pe=r(D,"DIV",{class:!0});var bt=o(pe);b(Te.$$.fragment,bt),Vn=l(bt),za=r(bt,"P",{});var Ur=o(za);Bn=i(Ur,"(property) Total number of files in the revision."),Ur.forEach(t),bt.forEach(t),D.forEach(t),et=l(e),W=r(e,"H3",{class:!0});var vt=o(W);me=r(vt,"A",{id:!0,class:!0,href:!0});var Vr=o(me);Fa=r(Vr,"SPAN",{});var Br=o(Fa);b(je.$$.fragment,Br),Br.forEach(t),Vr.forEach(t),Kn=l(vt),Sa=r(vt,"SPAN",{});var Kr=o(Sa);Mn=i(Kr,"CachedFileInfo"),Kr.forEach(t),vt.forEach(t),at=l(e),q=r(e,"DIV",{class:!0});var ra=o(q);b(Oe.$$.fragment,ra),Gn=l(ra),Ha=r(ra,"P",{});var Mr=o(Ha);Jn=i(Mr,"Frozen data structure holding information about a single cached file."),Mr.forEach(t),Yn=l(ra),U=r(ra,"DIV",{class:!0});var oa=o(U);b(Ue.$$.fragment,oa),Zn=l(oa),Ra=r(oa,"P",{});var Gr=o(Ra);Qn=i(Gr,"(property) Size of the blob file as a human-readable string."),Gr.forEach(t),Wn=l(oa),Aa=r(oa,"P",{});var Jr=o(Aa);Xn=i(Jr,"Example: \u201C42.2K\u201D."),Jr.forEach(t),oa.forEach(t),ra.forEach(t),tt=l(e),X=r(e,"H2",{class:!0});var $t=o(X);_e=r($t,"A",{id:!0,class:!0,href:!0});var Yr=o(_e);Da=r(Yr,"SPAN",{});var Zr=o(Da);b(Ve.$$.fragment,Zr),Zr.forEach(t),Yr.forEach(t),er=l($t),Na=r($t,"SPAN",{});var Qr=o(Na);ar=i(Qr,"Exceptions"),Qr.forEach(t),$t.forEach(t),nt=l(e),ee=r(e,"H3",{class:!0});var yt=o(ee);be=r(yt,"A",{id:!0,class:!0,href:!0});var Wr=o(be);La=r(Wr,"SPAN",{});var Xr=o(La);b(Be.$$.fragment,Xr),Xr.forEach(t),Wr.forEach(t),tr=l(yt),qa=r(yt,"SPAN",{});var eo=o(qa);nr=i(eo,"CorruptedCacheException"),eo.forEach(t),yt.forEach(t),rt=l(e),ae=r(e,"DIV",{class:!0});var Et=o(ae);b(Ke.$$.fragment,Et),rr=l(Et),Ta=r(Et,"P",{});var ao=o(Ta);or=i(ao,"Exception for any unexpected structure in the Huggingface cache-system."),ao.forEach(t),Et.forEach(t),this.h()},h(){c(f,"name","hf:doc:metadata"),c(f,"content",JSON.stringify(_o)),c(C,"id","cachesystem-reference"),c(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C,"href","#cachesystem-reference"),c(d,"class","relative group"),c(Je,"href","../how-to-cache"),c(te,"id","helpers"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#helpers"),c(K,"class","relative group"),c(ne,"id","huggingface_hub.scan_cache_dir"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#huggingface_hub.scan_cache_dir"),c(M,"class","relative group"),c(Ye,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),c(Ze,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CorruptedCacheException"),c(Qe,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),c(We,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),c(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(se,"id","data-structures"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#data-structures"),c(G,"class","relative group"),c(Xe,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.scan_cache_dir"),c(ce,"id","huggingface_hub.HFCacheInfo"),c(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ce,"href","#huggingface_hub.HFCacheInfo"),c(J,"class","relative group"),c(ea,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.scan_cache_dir"),c(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(le,"id","huggingface_hub.CachedRepoInfo"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#huggingface_hub.CachedRepoInfo"),c(Y,"class","relative group"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","huggingface_hub.CachedRevisionInfo"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#huggingface_hub.CachedRevisionInfo"),c(Z,"class","relative group"),c(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","huggingface_hub.CachedFileInfo"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#huggingface_hub.CachedFileInfo"),c(W,"class","relative group"),c(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_e,"id","exceptions"),c(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_e,"href","#exceptions"),c(X,"class","relative group"),c(be,"id","huggingface_hub.CorruptedCacheException"),c(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(be,"href","#huggingface_hub.CorruptedCacheException"),c(ee,"class","relative group"),c(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,u){a(document.head,f),g(e,m,u),g(e,d,u),a(d,C),a(C,w),v(p,w,null),a(d,I),a(d,S),a(S,x),g(e,H,u),g(e,N,u),a(N,wt),a(N,Je),a(Je,It),a(N,xt),g(e,Va,u),g(e,K,u),a(K,te),a(te,sa),v(ye,sa,null),a(K,kt),a(K,ia),a(ia,Pt),g(e,Ba,u),g(e,M,u),a(M,ne),a(ne,ca),v(Ee,ca,null),a(M,zt),a(M,ha),a(ha,Ft),g(e,Ka,u),g(e,k,u),v(Ce,k,null),a(k,St),a(k,we),a(we,Ht),a(we,Ye),a(Ye,Rt),a(we,At),a(k,Dt),a(k,L),a(L,Nt),a(L,la),a(la,Lt),a(L,qt),a(L,Ze),a(Ze,Tt),a(L,jt),a(L,Qe),a(Qe,Ot),a(L,Ut),a(k,Vt),v(re,k,null),a(k,Bt),v(oe,k,null),a(k,Kt),v(Ie,k,null),a(k,Mt),a(k,xe),a(xe,Gt),a(xe,We),a(We,Jt),a(xe,Yt),g(e,Ma,u),g(e,G,u),a(G,se),a(se,fa),v(ke,fa,null),a(G,Zt),a(G,ua),a(ua,Qt),g(e,Ga,u),g(e,ie,u),a(ie,Wt),a(ie,Xe),a(Xe,Xt),a(ie,en),g(e,Ja,u),g(e,J,u),a(J,ce),a(ce,ga),v(Pe,ga,null),a(J,an),a(J,da),a(da,tn),g(e,Ya,u),g(e,R,u),v(ze,R,null),a(R,nn),a(R,pa),a(pa,rn),a(R,on),a(R,Fe),a(Fe,sn),a(Fe,ea),a(ea,cn),a(Fe,hn),a(R,ln),v(he,R,null),g(e,Za,u),g(e,Y,u),a(Y,le),a(le,ma),v(Se,ma,null),a(Y,fn),a(Y,_a),a(_a,un),g(e,Qa,u),g(e,z,u),v(He,z,null),a(z,gn),a(z,ba),a(ba,dn),a(z,pn),v(fe,z,null),a(z,mn),a(z,j),v(Re,j,null),a(j,_n),a(j,va),a(va,bn),a(j,vn),a(j,$a),a($a,$n),a(z,yn),a(z,ue),v(Ae,ue,null),a(ue,En),a(ue,De),a(De,Cn),a(De,ya),a(ya,wn),a(De,In),g(e,Wa,u),g(e,Z,u),a(Z,ge),a(ge,Ea),v(Ne,Ea,null),a(Z,xn),a(Z,Ca),a(Ca,kn),g(e,Xa,u),g(e,P,u),v(Le,P,null),a(P,Pn),a(P,wa),a(wa,zn),a(P,Fn),a(P,Q),a(Q,Sn),a(Q,Ia),a(Ia,Hn),a(Q,Rn),a(Q,xa),a(xa,An),a(Q,Dn),a(P,Nn),v(de,P,null),a(P,Ln),a(P,O),v(qe,O,null),a(O,qn),a(O,ka),a(ka,Tn),a(O,jn),a(O,Pa),a(Pa,On),a(P,Un),a(P,pe),v(Te,pe,null),a(pe,Vn),a(pe,za),a(za,Bn),g(e,et,u),g(e,W,u),a(W,me),a(me,Fa),v(je,Fa,null),a(W,Kn),a(W,Sa),a(Sa,Mn),g(e,at,u),g(e,q,u),v(Oe,q,null),a(q,Gn),a(q,Ha),a(Ha,Jn),a(q,Yn),a(q,U),v(Ue,U,null),a(U,Zn),a(U,Ra),a(Ra,Qn),a(U,Wn),a(U,Aa),a(Aa,Xn),g(e,tt,u),g(e,X,u),a(X,_e),a(_e,Da),v(Ve,Da,null),a(X,er),a(X,Na),a(Na,ar),g(e,nt,u),g(e,ee,u),a(ee,be),a(be,La),v(Be,La,null),a(ee,tr),a(ee,qa),a(qa,nr),g(e,rt,u),g(e,ae,u),v(Ke,ae,null),a(ae,rr),a(ae,Ta),a(Ta,or),ot=!0},p(e,[u]){const Me={};u&2&&(Me.$$scope={dirty:u,ctx:e}),re.$set(Me);const ja={};u&2&&(ja.$$scope={dirty:u,ctx:e}),oe.$set(ja);const Oa={};u&2&&(Oa.$$scope={dirty:u,ctx:e}),he.$set(Oa);const Ua={};u&2&&(Ua.$$scope={dirty:u,ctx:e}),fe.$set(Ua);const Ge={};u&2&&(Ge.$$scope={dirty:u,ctx:e}),de.$set(Ge)},i(e){ot||($(p.$$.fragment,e),$(ye.$$.fragment,e),$(Ee.$$.fragment,e),$(Ce.$$.fragment,e),$(re.$$.fragment,e),$(oe.$$.fragment,e),$(Ie.$$.fragment,e),$(ke.$$.fragment,e),$(Pe.$$.fragment,e),$(ze.$$.fragment,e),$(he.$$.fragment,e),$(Se.$$.fragment,e),$(He.$$.fragment,e),$(fe.$$.fragment,e),$(Re.$$.fragment,e),$(Ae.$$.fragment,e),$(Ne.$$.fragment,e),$(Le.$$.fragment,e),$(de.$$.fragment,e),$(qe.$$.fragment,e),$(Te.$$.fragment,e),$(je.$$.fragment,e),$(Oe.$$.fragment,e),$(Ue.$$.fragment,e),$(Ve.$$.fragment,e),$(Be.$$.fragment,e),$(Ke.$$.fragment,e),ot=!0)},o(e){y(p.$$.fragment,e),y(ye.$$.fragment,e),y(Ee.$$.fragment,e),y(Ce.$$.fragment,e),y(re.$$.fragment,e),y(oe.$$.fragment,e),y(Ie.$$.fragment,e),y(ke.$$.fragment,e),y(Pe.$$.fragment,e),y(ze.$$.fragment,e),y(he.$$.fragment,e),y(Se.$$.fragment,e),y(He.$$.fragment,e),y(fe.$$.fragment,e),y(Re.$$.fragment,e),y(Ae.$$.fragment,e),y(Ne.$$.fragment,e),y(Le.$$.fragment,e),y(de.$$.fragment,e),y(qe.$$.fragment,e),y(Te.$$.fragment,e),y(je.$$.fragment,e),y(Oe.$$.fragment,e),y(Ue.$$.fragment,e),y(Ve.$$.fragment,e),y(Be.$$.fragment,e),y(Ke.$$.fragment,e),ot=!1},d(e){t(f),e&&t(m),e&&t(d),E(p),e&&t(H),e&&t(N),e&&t(Va),e&&t(K),E(ye),e&&t(Ba),e&&t(M),E(Ee),e&&t(Ka),e&&t(k),E(Ce),E(re),E(oe),E(Ie),e&&t(Ma),e&&t(G),E(ke),e&&t(Ga),e&&t(ie),e&&t(Ja),e&&t(J),E(Pe),e&&t(Ya),e&&t(R),E(ze),E(he),e&&t(Za),e&&t(Y),E(Se),e&&t(Qa),e&&t(z),E(He),E(fe),E(Re),E(Ae),e&&t(Wa),e&&t(Z),E(Ne),e&&t(Xa),e&&t(P),E(Le),E(de),E(qe),E(Te),e&&t(et),e&&t(W),E(je),e&&t(at),e&&t(q),E(Oe),E(Ue),e&&t(tt),e&&t(X),E(Ve),e&&t(nt),e&&t(ee),E(Be),e&&t(rt),e&&t(ae),E(Ke)}}}const _o={local:"cachesystem-reference",sections:[{local:"helpers",sections:[{local:"huggingface_hub.scan_cache_dir",title:"scan_cache_dir"}],title:"Helpers"},{local:"data-structures",sections:[{local:"huggingface_hub.HFCacheInfo",title:"HFCacheInfo"},{local:"huggingface_hub.CachedRepoInfo",title:"CachedRepoInfo"},{local:"huggingface_hub.CachedRevisionInfo",title:"CachedRevisionInfo"},{local:"huggingface_hub.CachedFileInfo",title:"CachedFileInfo"}],title:"Data structures"},{local:"exceptions",sections:[{local:"huggingface_hub.CorruptedCacheException",title:"CorruptedCacheException"}],title:"Exceptions"}],title:"Cache-system reference"};function bo(A){return ho(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Io extends oo{constructor(f){super();so(this,f,bo,mo,io,{})}}export{Io as default,_o as metadata};
