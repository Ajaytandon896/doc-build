import{S as ho,i as lo,s as fo,e as n,k as h,w as b,t as c,M as go,c as r,d as t,m as l,a as s,x as $,h as i,b as f,G as e,g as u,y as v,q as y,o as E,B as C,v as po,L as rn}from"../../chunks/vendor-hf-doc-builder.js";import{T as $t}from"../../chunks/Tip-hf-doc-builder.js";import{D as q}from"../../chunks/Docstring-hf-doc-builder.js";import{C as sn}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as K}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as nn}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function uo(P){let o,m;return o=new sn({props:{code:`from huggingface_hub import scan_cache_dir

hf_cache_info = scan_cache_dir()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_cache_info = scan_cache_dir()
HFCacheInfo(
    size_on_disk=<span class="hljs-number">3398085269</span>,
    repos=<span class="hljs-built_in">frozenset</span>({
        CachedRepoInfo(
            repo_id=<span class="hljs-string">&#x27;t5-small&#x27;</span>,
            repo_type=<span class="hljs-string">&#x27;model&#x27;</span>,
            repo_path=PosixPath(...),
            size_on_disk=<span class="hljs-number">970726914</span>,
            nb_files=<span class="hljs-number">11</span>,
            revisions=<span class="hljs-built_in">frozenset</span>({
                CachedRevisionInfo(
                    commit_hash=<span class="hljs-string">&#x27;d78aea13fa7ecd06c29e3e46195d6341255065d5&#x27;</span>,
                    size_on_disk=<span class="hljs-number">970726339</span>,
                    snapshot_path=PosixPath(...),
                    files=<span class="hljs-built_in">frozenset</span>({
                        CachedFileInfo(
                            file_name=<span class="hljs-string">&#x27;config.json&#x27;</span>,
                            size_on_disk=<span class="hljs-number">1197</span>
                            file_path=PosixPath(...),
                            blob_path=PosixPath(...),
                        ),
                        CachedFileInfo(...),
                        ...
                    }),
                ),
                CachedRevisionInfo(...),
                ...
            }),
        ),
        CachedRepoInfo(...),
        ...
    }),
    warnings=[
        CorruptedCacheException(<span class="hljs-string">&quot;Snapshots dir doesn&#x27;t exist in cached repo: ...&quot;</span>),
        CorruptedCacheException(...),
        ...
    ],
)`}}),{c(){b(o.$$.fragment)},l(p){$(o.$$.fragment,p)},m(p,_){v(o,p,_),m=!0},p:rn,i(p){m||(y(o.$$.fragment,p),m=!0)},o(p){E(o.$$.fragment,p),m=!1},d(p){C(o,p)}}}function mo(P){let o,m,p,_,w,d,x,k;return x=new sn({props:{code:`> huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`,highlighted:`&gt; huggingface-cli scan-cache
REPO ID                     REPO TYPE SIZE ON DISK NB FILES REFS                LOCAL PATH
--------------------------- --------- ------------ -------- ------------------- -------------------------------------------------------------------------
glue                        dataset         116.3K       15 1.17.0, main, 2.4.0 /Users/lucain/.cache/huggingface/hub/datasets--glue
google/fleurs               dataset          64.9M        6 main, refs/pr/1     /Users/lucain/.cache/huggingface/hub/datasets--google--fleurs
Jean-Baptiste/camembert-ner model           441.0M        7 main                /Users/lucain/.cache/huggingface/hub/models--Jean-Baptiste--camembert-ner
bert-base-cased             model             1.9G       13 main                /Users/lucain/.cache/huggingface/hub/models--bert-base-cased
t5-base                     model            10.1K        3 main                /Users/lucain/.cache/huggingface/hub/models--t5-base
t5-small                    model           970.7M       11 refs/pr/1, main     /Users/lucain/.cache/huggingface/hub/models--t5-small

Done in 0.0s. Scanned 6 repo(s) for a total of 3.4G.
Got 1 warning(s) while scanning. Use -vvv to print details.`}}),{c(){o=n("p"),m=c("You can also print a detailed report directly from the "),p=n("code"),_=c("huggingface-cli"),w=c(" using:"),d=h(),b(x.$$.fragment)},l(I){o=r(I,"P",{});var z=s(o);m=i(z,"You can also print a detailed report directly from the "),p=r(z,"CODE",{});var F=s(p);_=i(F,"huggingface-cli"),F.forEach(t),w=i(z," using:"),z.forEach(t),d=l(I),$(x.$$.fragment,I)},m(I,z){u(I,o,z),e(o,m),e(o,p),e(p,_),e(o,w),u(I,d,z),v(x,I,z),k=!0},p:rn,i(I){k||(y(x.$$.fragment,I),k=!0)},o(I){E(x.$$.fragment,I),k=!1},d(I){I&&t(o),I&&t(d),C(x,I)}}}function _o(P){let o,m,p,_,w;return{c(){o=n("p"),m=c("Here "),p=n("code"),_=c("size_on_disk"),w=c(` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`)},l(d){o=r(d,"P",{});var x=s(o);m=i(x,"Here "),p=r(x,"CODE",{});var k=s(p);_=i(k,"size_on_disk"),k.forEach(t),w=i(x,` is equal to the sum of all repo sizes (only blobs). However if
some cached repos are corrupted, their sizes are not taken into account.`),x.forEach(t)},m(d,x){u(d,o,x),e(o,m),e(o,p),e(p,_),e(o,w)},d(d){d&&t(o)}}}function bo(P){let o,m,p,_,w;return _=new sn({props:{code:`from huggingface_hub import scan_cache_dir
cache_info = scan_cache_dir()
delete_strategy = cache_info.delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa"
)
print(f"Will free {delete_strategy.expected_freed_size_str}.")
delete_strategy.execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>cache_info = scan_cache_dir()
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy = cache_info.delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Will free <span class="hljs-subst">{delete_strategy.expected_freed_size_str}</span>.&quot;</span>)
Will free <span class="hljs-number">7.9</span>K.
<span class="hljs-meta">&gt;&gt;&gt; </span>delete_strategy.execute()
Cache deletion done. Saved <span class="hljs-number">7.9</span>K.`}}),{c(){o=n("p"),m=c("Examples:"),p=h(),b(_.$$.fragment)},l(d){o=r(d,"P",{});var x=s(o);m=i(x,"Examples:"),x.forEach(t),p=l(d),$(_.$$.fragment,d)},m(d,x){u(d,o,x),e(o,m),u(d,p,x),v(_,d,x),w=!0},p:rn,i(d){w||(y(_.$$.fragment,d),w=!0)},o(d){E(_.$$.fragment,d),w=!1},d(d){d&&t(o),d&&t(p),C(_,d)}}}function $o(P){let o,m;return o=new sn({props:{code:`from huggingface_hub import scan_cache_dir
scan_cache_dir().delete_revisions(
    "81fd1d6e7847c99f5862c9fb81387956d99ec7aa",
    "e2983b237dccf3ab4937c97fa717319a9ca1a96d",
    "6c0e6080953db56375760c0471a8c5f2929baf11",
).execute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> scan_cache_dir
<span class="hljs-meta">&gt;&gt;&gt; </span>scan_cache_dir().delete_revisions(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;81fd1d6e7847c99f5862c9fb81387956d99ec7aa&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;e2983b237dccf3ab4937c97fa717319a9ca1a96d&quot;</span>,
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;6c0e6080953db56375760c0471a8c5f2929baf11&quot;</span>,
<span class="hljs-meta">... </span>).execute()
Cache deletion done. Saved <span class="hljs-number">8.6</span>G.`}}),{c(){b(o.$$.fragment)},l(p){$(o.$$.fragment,p)},m(p,_){v(o,p,_),m=!0},p:rn,i(p){m||(y(o.$$.fragment,p),m=!0)},o(p){E(o.$$.fragment,p),m=!1},d(p){C(o,p)}}}function vo(P){let o,m,p,_,w,d,x,k,I,z;return{c(){o=n("p"),m=n("code"),p=c("delete_revisions"),_=c(" returns a "),w=n("a"),d=c("DeleteCacheStrategy"),x=c(` object that needs to
be executed. The `),k=n("a"),I=c("DeleteCacheStrategy"),z=c(` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),this.h()},l(F){o=r(F,"P",{});var N=s(o);m=r(N,"CODE",{});var Z=s(m);p=i(Z,"delete_revisions"),Z.forEach(t),_=i(N," returns a "),w=r(N,"A",{href:!0});var ga=s(w);d=i(ga,"DeleteCacheStrategy"),ga.forEach(t),x=i(N,` object that needs to
be executed. The `),k=r(N,"A",{href:!0});var pa=s(k);I=i(pa,"DeleteCacheStrategy"),pa.forEach(t),z=i(N,` is not meant to be modified but
allows having a dry run before actually executing the deletion.`),N.forEach(t),this.h()},h(){f(w,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy"),f(k,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy")},m(F,N){u(F,o,N),e(o,m),e(m,p),e(o,_),e(o,w),e(w,d),e(o,x),e(o,k),e(k,I),e(o,z)},d(F){F&&t(o)}}}function yo(P){let o,m,p,_;return{c(){o=n("p"),m=n("code"),p=c("size_on_disk"),_=c(` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(w){o=r(w,"P",{});var d=s(o);m=r(d,"CODE",{});var x=s(m);p=i(x,"size_on_disk"),x.forEach(t),_=i(d,` is not necessarily the sum of all revisions sizes because of
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),d.forEach(t)},m(w,d){u(w,o,d),e(o,m),e(m,p),e(o,_)},d(w){w&&t(o)}}}function Eo(P){let o,m,p,_;return{c(){o=n("p"),m=n("code"),p=c("size_on_disk"),_=c(` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`)},l(w){o=r(w,"P",{});var d=s(o);m=r(d,"CODE",{});var x=s(m);p=i(x,"size_on_disk"),x.forEach(t),_=i(d,` is not necessarily the sum of all file sizes because of possible
duplicated files. Besides, only blobs are taken into account, not the (negligible)
size of folders and symlinks.`),d.forEach(t)},m(w,d){u(w,o,d),e(o,m),e(m,p),e(o,_)},d(w){w&&t(o)}}}function Co(P){let o,m,p,_,w,d,x,k,I,z,F,N,Z,ga,pa,vt,Q,le,ka,He,on,Sa,cn,yt,X,fe,Pa,Re,hn,za,ln,Et,S,Ae,fn,je,gn,da,pn,dn,un,U,mn,Fa,_n,bn,ua,$n,vn,ma,yn,En,Cn,ge,wn,pe,xn,qe,In,Ne,kn,_a,Sn,Pn,Ct,ee,de,Da,Le,zn,Ha,Fn,wt,ue,Dn,ba,Hn,Rn,xt,ae,me,Ra,Te,An,Aa,jn,It,R,Oe,qn,ja,Nn,Ln,Ue,Tn,$a,On,Un,Vn,_e,Kn,H,Ve,Bn,qa,Mn,Gn,Na,Jn,Yn,be,Wn,$e,Zn,ve,kt,te,ye,La,Ke,Qn,Ta,Xn,St,A,Be,er,Oa,ar,tr,Ee,nr,B,Me,rr,Ua,sr,or,Va,cr,ir,Ce,Ge,hr,Je,lr,Ka,fr,gr,Pt,ne,we,Ba,Ye,pr,Ma,dr,zt,D,We,ur,Ga,mr,_r,re,br,Ja,$r,vr,Ya,yr,Er,Cr,xe,wr,M,Ze,xr,Wa,Ir,kr,Za,Sr,Pr,Ie,Qe,zr,Qa,Fr,Ft,se,ke,Xa,Xe,Dr,et,Hr,Dt,V,ea,Rr,at,Ar,jr,G,aa,qr,tt,Nr,Lr,nt,Tr,Ht,oe,Se,rt,ta,Or,st,Ur,Rt,L,na,Vr,ot,Kr,Br,ra,Mr,va,Gr,Jr,Yr,J,sa,Wr,ct,Zr,Qr,it,Xr,At,ce,Pe,ht,oa,es,lt,as,jt,ie,ze,ft,ca,ts,gt,ns,qt,he,ia,rs,pt,ss,Nt;return d=new K({}),He=new K({}),Re=new K({}),Ae=new q({props:{name:"huggingface_hub.scan_cache_dir",anchor:"huggingface_hub.scan_cache_dir",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.scan_cache_dir.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, <code>optional</code>) &#x2014;
Cache directory to cache. Defaults to the default HF cache directory.`,name:"cache_dir"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L399",raiseDescription:`
<ul>
<li><a
  href="https://docs.python.org/3/library/exceptions.html#ValueError"
  rel="nofollow"
><code>ValueError</code></a> \u2014
If directory to scan is missing or is a file.</li>
</ul>
`,raiseType:`
<p><code>ValueError</code></p>
`}}),ge=new nn({props:{anchor:"huggingface_hub.scan_cache_dir.example",$$slots:{default:[uo]},$$scope:{ctx:P}}}),pe=new nn({props:{anchor:"huggingface_hub.scan_cache_dir.example-2",$$slots:{default:[mo]},$$scope:{ctx:P}}}),qe=new $t({props:{warning:!0}}),Le=new K({}),Te=new K({}),Oe=new q({props:{name:"class huggingface_hub.HFCacheInfo",anchor:"huggingface_hub.HFCacheInfo",parameters:[{name:"size_on_disk",val:": int"},{name:"repos",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRepoInfo]"},{name:"warnings",val:": typing.List[huggingface_hub.utils._cache_manager.CorruptedCacheException]"}],parametersDescription:[{anchor:"huggingface_hub.HFCacheInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of all valid repo sizes in the cache-system.`,name:"size_on_disk"},{anchor:"huggingface_hub.HFCacheInfo.repos",description:`<strong>repos</strong> (<code>FrozenSet[CachedRepoInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedRepoInfo">~CachedRepoInfo</a> describing all valid cached repos found on the
cache-system while scanning.`,name:"repos"},{anchor:"huggingface_hub.HFCacheInfo.warnings",description:`<strong>warnings</strong> (<code>List[CorruptedCacheException]</code>) &#x2014;
List of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CorruptedCacheException">~CorruptedCacheException</a> that occurred while scanning the cache.
Those exceptions are captured so that the scan can continue. Corrupted repos
are skipped from the scan.`,name:"warnings"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L252"}}),_e=new $t({props:{warning:!0,$$slots:{default:[_o]},$$scope:{ctx:P}}}),Ve=new q({props:{name:"delete_revisions",anchor:"huggingface_hub.HFCacheInfo.delete_revisions",parameters:[{name:"*revisions",val:": str"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L290"}}),be=new nn({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example",$$slots:{default:[bo]},$$scope:{ctx:P}}}),$e=new nn({props:{anchor:"huggingface_hub.HFCacheInfo.delete_revisions.example-2",$$slots:{default:[$o]},$$scope:{ctx:P}}}),ve=new $t({props:{warning:!0,$$slots:{default:[vo]},$$scope:{ctx:P}}}),Ke=new K({}),Be=new q({props:{name:"class huggingface_hub.CachedRepoInfo",anchor:"huggingface_hub.CachedRepoInfo",parameters:[{name:"repo_id",val:": str"},{name:"repo_type",val:": typing.Literal['model', 'dataset', 'space']"},{name:"repo_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"nb_files",val:": int"},{name:"revisions",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedRevisionInfo]"}],parametersDescription:[{anchor:"huggingface_hub.CachedRepoInfo.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
Repo id of the repo on the Hub. Example: <code>&quot;google/fleurs&quot;</code>.`,name:"repo_id"},{anchor:"huggingface_hub.CachedRepoInfo.repo_type",description:`<strong>repo_type</strong> (<code>Literal[&quot;dataset&quot;, &quot;model&quot;, &quot;space&quot;]</code>) &#x2014;
Type of the cached repo.`,name:"repo_type"},{anchor:"huggingface_hub.CachedRepoInfo.repo_path",description:`<strong>repo_path</strong> (<code>Path</code>) &#x2014;
Local path to the cached repo.`,name:"repo_path"},{anchor:"huggingface_hub.CachedRepoInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes in the cached repo.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRepoInfo.nb_files",description:`<strong>nb_files</strong> (<code>int</code>) &#x2014;
Total number of blob files in the cached repo.`,name:"nb_files"},{anchor:"huggingface_hub.CachedRepoInfo.revisions",description:`<strong>revisions</strong> (<code>FrozenSet[CachedRevisionInfo]</code>) &#x2014;
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedRevisionInfo">~CachedRevisionInfo</a> describing all revisions cached in the repo.`,name:"revisions"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L125"}}),Ee=new $t({props:{warning:!0,$$slots:{default:[yo]},$$scope:{ctx:P}}}),Me=new q({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRepoInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L158"}}),Ge=new q({props:{name:"refs",anchor:"huggingface_hub.CachedRepoInfo.refs",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L167"}}),Ye=new K({}),We=new q({props:{name:"class huggingface_hub.CachedRevisionInfo",anchor:"huggingface_hub.CachedRevisionInfo",parameters:[{name:"commit_hash",val:": str"},{name:"snapshot_path",val:": Path"},{name:"size_on_disk",val:": int"},{name:"files",val:": typing.FrozenSet[huggingface_hub.utils._cache_manager.CachedFileInfo]"},{name:"refs",val:": typing.FrozenSet[str]"}],parametersDescription:[{anchor:"huggingface_hub.CachedRevisionInfo.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>) &#x2014;
Hash of the revision (unique).
Example: <code>&quot;9338f7b671827df886678df2bdd7cc7b4f36dffd&quot;</code>.`,name:"commit_hash"},{anchor:"huggingface_hub.CachedRevisionInfo.snapshot_path",description:`<strong>snapshot_path</strong> (<code>Path</code>) &#x2014;
Path to the revision directory in the <code>snapshots</code> folder. It contains the
exact tree structure as the repo on the Hub.`,name:"snapshot_path"},{anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Sum of the blob file sizes that are symlink-ed by the revision.
files &#x2014; (<code>FrozenSet[CachedFileInfo]</code>):
Set of <a href="/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CachedFileInfo">~CachedFileInfo</a> describing all files contained in the snapshot.`,name:"size_on_disk"},{anchor:"huggingface_hub.CachedRevisionInfo.refs",description:`<strong>refs</strong> (<code>FrozenSet[str]</code>) &#x2014;
Set of <code>refs</code> pointing to this revision. If the revision has no <code>refs</code>, it
is considered detached.
Example: <code>{&quot;main&quot;, &quot;2.4.0&quot;}</code> or <code>{&quot;refs/pr/1&quot;}</code>.`,name:"refs"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L69"}}),xe=new $t({props:{warning:!0,$$slots:{default:[Eo]},$$scope:{ctx:P}}}),Ze=new q({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedRevisionInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L107"}}),Qe=new q({props:{name:"nb_files",anchor:"huggingface_hub.CachedRevisionInfo.nb_files",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L116"}}),Xe=new K({}),ea=new q({props:{name:"class huggingface_hub.CachedFileInfo",anchor:"huggingface_hub.CachedFileInfo",parameters:[{name:"file_name",val:": str"},{name:"file_path",val:": Path"},{name:"blob_path",val:": Path"},{name:"size_on_disk",val:": int"}],parametersDescription:[{anchor:"huggingface_hub.CachedFileInfo.file_name",description:`<strong>file_name</strong> (<code>str</code>) &#x2014;
Name of the file. Example: <code>config.json</code>.`,name:"file_name"},{anchor:"huggingface_hub.CachedFileInfo.file_path",description:`<strong>file_path</strong> (<code>Path</code>) &#x2014;
Path of the file in the <code>snapshots</code> directory. The file path is a symlink
referring to a blob in the <code>blobs</code> folder.`,name:"file_path"},{anchor:"huggingface_hub.CachedFileInfo.blob_path",description:`<strong>blob_path</strong> (<code>Path</code>) &#x2014;
Path of the blob file. This is equivalent to <code>file_path.resolve()</code>.`,name:"blob_path"},{anchor:"huggingface_hub.CachedFileInfo.size_on_disk",description:`<strong>size_on_disk</strong> (<code>int</code>) &#x2014;
Size of the blob file in bytes.`,name:"size_on_disk"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L38"}}),aa=new q({props:{name:"size_on_disk_str",anchor:"huggingface_hub.CachedFileInfo.size_on_disk_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L58"}}),ta=new K({}),na=new q({props:{name:"class huggingface_hub.DeleteCacheStrategy",anchor:"huggingface_hub.DeleteCacheStrategy",parameters:[{name:"expected_freed_size",val:": int"},{name:"blobs",val:": typing.FrozenSet[pathlib.Path]"},{name:"refs",val:": typing.FrozenSet[pathlib.Path]"},{name:"repos",val:": typing.FrozenSet[pathlib.Path]"},{name:"snapshots",val:": typing.FrozenSet[pathlib.Path]"}],parametersDescription:[{anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size",description:`<strong>expected_freed_size</strong> (<code>float</code>) &#x2014;
Expected freed size once strategy is executed.`,name:"expected_freed_size"},{anchor:"huggingface_hub.DeleteCacheStrategy.blobs",description:`<strong>blobs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of blob file paths to be deleted.`,name:"blobs"},{anchor:"huggingface_hub.DeleteCacheStrategy.refs",description:`<strong>refs</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of reference file paths to be deleted.`,name:"refs"},{anchor:"huggingface_hub.DeleteCacheStrategy.repos",description:`<strong>repos</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of entire repo paths to be deleted.`,name:"repos"},{anchor:"huggingface_hub.DeleteCacheStrategy.snapshots",description:`<strong>snapshots</strong> (<code>FrozenSet[Path]</code>) &#x2014;
Set of snapshots to be deleted (directory of symlinks).`,name:"snapshots"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L176"}}),sa=new q({props:{name:"expected_freed_size_str",anchor:"huggingface_hub.DeleteCacheStrategy.expected_freed_size_str",parameters:[],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L201"}}),oa=new K({}),ca=new K({}),ia=new q({props:{name:"class huggingface_hub.CorruptedCacheException",anchor:"huggingface_hub.CorruptedCacheException",parameters:"",source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/utils/_cache_manager.py#L33"}}),{c(){o=n("meta"),m=h(),p=n("h1"),_=n("a"),w=n("span"),b(d.$$.fragment),x=h(),k=n("span"),I=c("Cache-system reference"),z=h(),F=n("p"),N=c(`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),Z=n("a"),ga=c("cache-system guide"),pa=c(`
for a detailed presentation of caching at HF.`),vt=h(),Q=n("h2"),le=n("a"),ka=n("span"),b(He.$$.fragment),on=h(),Sa=n("span"),cn=c("Helpers"),yt=h(),X=n("h3"),fe=n("a"),Pa=n("span"),b(Re.$$.fragment),hn=h(),za=n("span"),ln=c("scan_cache_dir"),Et=h(),S=n("div"),b(Ae.$$.fragment),fn=h(),je=n("p"),gn=c("Scan the entire HF cache-system and return a "),da=n("a"),pn=c("~HFCacheInfo"),dn=c(" structure."),un=h(),U=n("p"),mn=c("Use "),Fa=n("code"),_n=c("scan_cache_dir"),bn=c(` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),ua=n("a"),$n=c("~CorruptedCacheException"),vn=c(`
will be thrown internally but captured and returned in the `),ma=n("a"),yn=c("~HFCacheInfo"),En=c(`
structure. Only valid repos get a proper report.`),Cn=h(),b(ge.$$.fragment),wn=h(),b(pe.$$.fragment),xn=h(),b(qe.$$.fragment),In=h(),Ne=n("p"),kn=c("Returns: a "),_a=n("a"),Sn=c("~HFCacheInfo"),Pn=c(" object."),Ct=h(),ee=n("h2"),de=n("a"),Da=n("span"),b(Le.$$.fragment),zn=h(),Ha=n("span"),Fn=c("Data structures"),wt=h(),ue=n("p"),Dn=c("All structures are built and returned by "),ba=n("a"),Hn=c("scan_cache_dir()"),Rn=c(" and are immutable."),xt=h(),ae=n("h3"),me=n("a"),Ra=n("span"),b(Te.$$.fragment),An=h(),Aa=n("span"),jn=c("HFCacheInfo"),It=h(),R=n("div"),b(Oe.$$.fragment),qn=h(),ja=n("p"),Nn=c("Frozen data structure holding information about the entire cache-system."),Ln=h(),Ue=n("p"),Tn=c("This data structure is returned by "),$a=n("a"),On=c("scan_cache_dir()"),Un=c(" and is immutable."),Vn=h(),b(_e.$$.fragment),Kn=h(),H=n("div"),b(Ve.$$.fragment),Bn=h(),qa=n("p"),Mn=c("Prepare the strategy to delete one or more revisions cached locally."),Gn=h(),Na=n("p"),Jn=c(`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),Yn=h(),b(be.$$.fragment),Wn=h(),b($e.$$.fragment),Zn=h(),b(ve.$$.fragment),kt=h(),te=n("h3"),ye=n("a"),La=n("span"),b(Ke.$$.fragment),Qn=h(),Ta=n("span"),Xn=c("CachedRepoInfo"),St=h(),A=n("div"),b(Be.$$.fragment),er=h(),Oa=n("p"),ar=c("Frozen data structure holding information about a cached repository."),tr=h(),b(Ee.$$.fragment),nr=h(),B=n("div"),b(Me.$$.fragment),rr=h(),Ua=n("p"),sr=c("(property) Sum of the blob file sizes as a human-readable string."),or=h(),Va=n("p"),cr=c("Example: \u201C42.2K\u201D."),ir=h(),Ce=n("div"),b(Ge.$$.fragment),hr=h(),Je=n("p"),lr=c("(property) Mapping between "),Ka=n("code"),fr=c("refs"),gr=c(" and revision data structures."),Pt=h(),ne=n("h3"),we=n("a"),Ba=n("span"),b(Ye.$$.fragment),pr=h(),Ma=n("span"),dr=c("CachedRevisionInfo"),zt=h(),D=n("div"),b(We.$$.fragment),ur=h(),Ga=n("p"),mr=c("Frozen data structure holding information about a revision."),_r=h(),re=n("p"),br=c("A revision correspond to a folder in the "),Ja=n("code"),$r=c("snapshots"),vr=c(` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),Ya=n("code"),yr=c("refs"),Er=c(" or be \u201Cdetached\u201D (no refs)."),Cr=h(),b(xe.$$.fragment),wr=h(),M=n("div"),b(Ze.$$.fragment),xr=h(),Wa=n("p"),Ir=c("(property) Sum of the blob file sizes as a human-readable string."),kr=h(),Za=n("p"),Sr=c("Example: \u201C42.2K\u201D."),Pr=h(),Ie=n("div"),b(Qe.$$.fragment),zr=h(),Qa=n("p"),Fr=c("(property) Total number of files in the revision."),Ft=h(),se=n("h3"),ke=n("a"),Xa=n("span"),b(Xe.$$.fragment),Dr=h(),et=n("span"),Hr=c("CachedFileInfo"),Dt=h(),V=n("div"),b(ea.$$.fragment),Rr=h(),at=n("p"),Ar=c("Frozen data structure holding information about a single cached file."),jr=h(),G=n("div"),b(aa.$$.fragment),qr=h(),tt=n("p"),Nr=c("(property) Size of the blob file as a human-readable string."),Lr=h(),nt=n("p"),Tr=c("Example: \u201C42.2K\u201D."),Ht=h(),oe=n("h3"),Se=n("a"),rt=n("span"),b(ta.$$.fragment),Or=h(),st=n("span"),Ur=c("DeleteCacheStrategy"),Rt=h(),L=n("div"),b(na.$$.fragment),Vr=h(),ot=n("p"),Kr=c("Frozen data structure holding the strategy to delete cached revisions."),Br=h(),ra=n("p"),Mr=c(`This object is not meant to be instantiated programmatically but to be returned by
`),va=n("a"),Gr=c("delete_revisions()"),Jr=c(". See documentation for usage example."),Yr=h(),J=n("div"),b(sa.$$.fragment),Wr=h(),ct=n("p"),Zr=c("(property) Expected size that will be freed as a human-readable string."),Qr=h(),it=n("p"),Xr=c("Example: \u201C42.2K\u201D."),At=h(),ce=n("h2"),Pe=n("a"),ht=n("span"),b(oa.$$.fragment),es=h(),lt=n("span"),as=c("Exceptions"),jt=h(),ie=n("h3"),ze=n("a"),ft=n("span"),b(ca.$$.fragment),ts=h(),gt=n("span"),ns=c("CorruptedCacheException"),qt=h(),he=n("div"),b(ia.$$.fragment),rs=h(),pt=n("p"),ss=c("Exception for any unexpected structure in the Huggingface cache-system."),this.h()},l(a){const g=go('[data-svelte="svelte-1phssyn"]',document.head);o=r(g,"META",{name:!0,content:!0}),g.forEach(t),m=l(a),p=r(a,"H1",{class:!0});var ha=s(p);_=r(ha,"A",{id:!0,class:!0,href:!0});var dt=s(_);w=r(dt,"SPAN",{});var ut=s(w);$(d.$$.fragment,ut),ut.forEach(t),dt.forEach(t),x=l(ha),k=r(ha,"SPAN",{});var mt=s(k);I=i(mt,"Cache-system reference"),mt.forEach(t),ha.forEach(t),z=l(a),F=r(a,"P",{});var la=s(F);N=i(la,`The caching system was updated in v0.8.0 to become the central cache-system shared
across libraries that depend on the Hub. Read the `),Z=r(la,"A",{href:!0});var _t=s(Z);ga=i(_t,"cache-system guide"),_t.forEach(t),pa=i(la,`
for a detailed presentation of caching at HF.`),la.forEach(t),vt=l(a),Q=r(a,"H2",{class:!0});var fa=s(Q);le=r(fa,"A",{id:!0,class:!0,href:!0});var bt=s(le);ka=r(bt,"SPAN",{});var os=s(ka);$(He.$$.fragment,os),os.forEach(t),bt.forEach(t),on=l(fa),Sa=r(fa,"SPAN",{});var cs=s(Sa);cn=i(cs,"Helpers"),cs.forEach(t),fa.forEach(t),yt=l(a),X=r(a,"H3",{class:!0});var Lt=s(X);fe=r(Lt,"A",{id:!0,class:!0,href:!0});var is=s(fe);Pa=r(is,"SPAN",{});var hs=s(Pa);$(Re.$$.fragment,hs),hs.forEach(t),is.forEach(t),hn=l(Lt),za=r(Lt,"SPAN",{});var ls=s(za);ln=i(ls,"scan_cache_dir"),ls.forEach(t),Lt.forEach(t),Et=l(a),S=r(a,"DIV",{class:!0});var j=s(S);$(Ae.$$.fragment,j),fn=l(j),je=r(j,"P",{});var Tt=s(je);gn=i(Tt,"Scan the entire HF cache-system and return a "),da=r(Tt,"A",{href:!0});var fs=s(da);pn=i(fs,"~HFCacheInfo"),fs.forEach(t),dn=i(Tt," structure."),Tt.forEach(t),un=l(j),U=r(j,"P",{});var Fe=s(U);mn=i(Fe,"Use "),Fa=r(Fe,"CODE",{});var gs=s(Fa);_n=i(gs,"scan_cache_dir"),gs.forEach(t),bn=i(Fe,` in order to programmatically scan your cache-system. The cache
will be scanned repo by repo. If a repo is corrupted, a `),ua=r(Fe,"A",{href:!0});var ps=s(ua);$n=i(ps,"~CorruptedCacheException"),ps.forEach(t),vn=i(Fe,`
will be thrown internally but captured and returned in the `),ma=r(Fe,"A",{href:!0});var ds=s(ma);yn=i(ds,"~HFCacheInfo"),ds.forEach(t),En=i(Fe,`
structure. Only valid repos get a proper report.`),Fe.forEach(t),Cn=l(j),$(ge.$$.fragment,j),wn=l(j),$(pe.$$.fragment,j),xn=l(j),$(qe.$$.fragment,j),In=l(j),Ne=r(j,"P",{});var Ot=s(Ne);kn=i(Ot,"Returns: a "),_a=r(Ot,"A",{href:!0});var us=s(_a);Sn=i(us,"~HFCacheInfo"),us.forEach(t),Pn=i(Ot," object."),Ot.forEach(t),j.forEach(t),Ct=l(a),ee=r(a,"H2",{class:!0});var Ut=s(ee);de=r(Ut,"A",{id:!0,class:!0,href:!0});var ms=s(de);Da=r(ms,"SPAN",{});var _s=s(Da);$(Le.$$.fragment,_s),_s.forEach(t),ms.forEach(t),zn=l(Ut),Ha=r(Ut,"SPAN",{});var bs=s(Ha);Fn=i(bs,"Data structures"),bs.forEach(t),Ut.forEach(t),wt=l(a),ue=r(a,"P",{});var Vt=s(ue);Dn=i(Vt,"All structures are built and returned by "),ba=r(Vt,"A",{href:!0});var $s=s(ba);Hn=i($s,"scan_cache_dir()"),$s.forEach(t),Rn=i(Vt," and are immutable."),Vt.forEach(t),xt=l(a),ae=r(a,"H3",{class:!0});var Kt=s(ae);me=r(Kt,"A",{id:!0,class:!0,href:!0});var vs=s(me);Ra=r(vs,"SPAN",{});var ys=s(Ra);$(Te.$$.fragment,ys),ys.forEach(t),vs.forEach(t),An=l(Kt),Aa=r(Kt,"SPAN",{});var Es=s(Aa);jn=i(Es,"HFCacheInfo"),Es.forEach(t),Kt.forEach(t),It=l(a),R=r(a,"DIV",{class:!0});var Y=s(R);$(Oe.$$.fragment,Y),qn=l(Y),ja=r(Y,"P",{});var Cs=s(ja);Nn=i(Cs,"Frozen data structure holding information about the entire cache-system."),Cs.forEach(t),Ln=l(Y),Ue=r(Y,"P",{});var Bt=s(Ue);Tn=i(Bt,"This data structure is returned by "),$a=r(Bt,"A",{href:!0});var ws=s($a);On=i(ws,"scan_cache_dir()"),ws.forEach(t),Un=i(Bt," and is immutable."),Bt.forEach(t),Vn=l(Y),$(_e.$$.fragment,Y),Kn=l(Y),H=r(Y,"DIV",{class:!0});var T=s(H);$(Ve.$$.fragment,T),Bn=l(T),qa=r(T,"P",{});var xs=s(qa);Mn=i(xs,"Prepare the strategy to delete one or more revisions cached locally."),xs.forEach(t),Gn=l(T),Na=r(T,"P",{});var Is=s(Na);Jn=i(Is,`Input revisions can be any revision hash. If a revision hash is not found in the
local cache, a warning is thrown but no error is raised. Revisions can be from
different cached repos since hashes are unique across repos,`),Is.forEach(t),Yn=l(T),$(be.$$.fragment,T),Wn=l(T),$($e.$$.fragment,T),Zn=l(T),$(ve.$$.fragment,T),T.forEach(t),Y.forEach(t),kt=l(a),te=r(a,"H3",{class:!0});var Mt=s(te);ye=r(Mt,"A",{id:!0,class:!0,href:!0});var ks=s(ye);La=r(ks,"SPAN",{});var Ss=s(La);$(Ke.$$.fragment,Ss),Ss.forEach(t),ks.forEach(t),Qn=l(Mt),Ta=r(Mt,"SPAN",{});var Ps=s(Ta);Xn=i(Ps,"CachedRepoInfo"),Ps.forEach(t),Mt.forEach(t),St=l(a),A=r(a,"DIV",{class:!0});var W=s(A);$(Be.$$.fragment,W),er=l(W),Oa=r(W,"P",{});var zs=s(Oa);ar=i(zs,"Frozen data structure holding information about a cached repository."),zs.forEach(t),tr=l(W),$(Ee.$$.fragment,W),nr=l(W),B=r(W,"DIV",{class:!0});var ya=s(B);$(Me.$$.fragment,ya),rr=l(ya),Ua=r(ya,"P",{});var Fs=s(Ua);sr=i(Fs,"(property) Sum of the blob file sizes as a human-readable string."),Fs.forEach(t),or=l(ya),Va=r(ya,"P",{});var Ds=s(Va);cr=i(Ds,"Example: \u201C42.2K\u201D."),Ds.forEach(t),ya.forEach(t),ir=l(W),Ce=r(W,"DIV",{class:!0});var Gt=s(Ce);$(Ge.$$.fragment,Gt),hr=l(Gt),Je=r(Gt,"P",{});var Jt=s(Je);lr=i(Jt,"(property) Mapping between "),Ka=r(Jt,"CODE",{});var Hs=s(Ka);fr=i(Hs,"refs"),Hs.forEach(t),gr=i(Jt," and revision data structures."),Jt.forEach(t),Gt.forEach(t),W.forEach(t),Pt=l(a),ne=r(a,"H3",{class:!0});var Yt=s(ne);we=r(Yt,"A",{id:!0,class:!0,href:!0});var Rs=s(we);Ba=r(Rs,"SPAN",{});var As=s(Ba);$(Ye.$$.fragment,As),As.forEach(t),Rs.forEach(t),pr=l(Yt),Ma=r(Yt,"SPAN",{});var js=s(Ma);dr=i(js,"CachedRevisionInfo"),js.forEach(t),Yt.forEach(t),zt=l(a),D=r(a,"DIV",{class:!0});var O=s(D);$(We.$$.fragment,O),ur=l(O),Ga=r(O,"P",{});var qs=s(Ga);mr=i(qs,"Frozen data structure holding information about a revision."),qs.forEach(t),_r=l(O),re=r(O,"P",{});var Ea=s(re);br=i(Ea,"A revision correspond to a folder in the "),Ja=r(Ea,"CODE",{});var Ns=s(Ja);$r=i(Ns,"snapshots"),Ns.forEach(t),vr=i(Ea,` folder and is populated with
the exact tree structure as the repo on the Hub but contains only symlinks. A
revision can be either referenced by 1 or more `),Ya=r(Ea,"CODE",{});var Ls=s(Ya);yr=i(Ls,"refs"),Ls.forEach(t),Er=i(Ea," or be \u201Cdetached\u201D (no refs)."),Ea.forEach(t),Cr=l(O),$(xe.$$.fragment,O),wr=l(O),M=r(O,"DIV",{class:!0});var Ca=s(M);$(Ze.$$.fragment,Ca),xr=l(Ca),Wa=r(Ca,"P",{});var Ts=s(Wa);Ir=i(Ts,"(property) Sum of the blob file sizes as a human-readable string."),Ts.forEach(t),kr=l(Ca),Za=r(Ca,"P",{});var Os=s(Za);Sr=i(Os,"Example: \u201C42.2K\u201D."),Os.forEach(t),Ca.forEach(t),Pr=l(O),Ie=r(O,"DIV",{class:!0});var Wt=s(Ie);$(Qe.$$.fragment,Wt),zr=l(Wt),Qa=r(Wt,"P",{});var Us=s(Qa);Fr=i(Us,"(property) Total number of files in the revision."),Us.forEach(t),Wt.forEach(t),O.forEach(t),Ft=l(a),se=r(a,"H3",{class:!0});var Zt=s(se);ke=r(Zt,"A",{id:!0,class:!0,href:!0});var Vs=s(ke);Xa=r(Vs,"SPAN",{});var Ks=s(Xa);$(Xe.$$.fragment,Ks),Ks.forEach(t),Vs.forEach(t),Dr=l(Zt),et=r(Zt,"SPAN",{});var Bs=s(et);Hr=i(Bs,"CachedFileInfo"),Bs.forEach(t),Zt.forEach(t),Dt=l(a),V=r(a,"DIV",{class:!0});var wa=s(V);$(ea.$$.fragment,wa),Rr=l(wa),at=r(wa,"P",{});var Ms=s(at);Ar=i(Ms,"Frozen data structure holding information about a single cached file."),Ms.forEach(t),jr=l(wa),G=r(wa,"DIV",{class:!0});var xa=s(G);$(aa.$$.fragment,xa),qr=l(xa),tt=r(xa,"P",{});var Gs=s(tt);Nr=i(Gs,"(property) Size of the blob file as a human-readable string."),Gs.forEach(t),Lr=l(xa),nt=r(xa,"P",{});var Js=s(nt);Tr=i(Js,"Example: \u201C42.2K\u201D."),Js.forEach(t),xa.forEach(t),wa.forEach(t),Ht=l(a),oe=r(a,"H3",{class:!0});var Qt=s(oe);Se=r(Qt,"A",{id:!0,class:!0,href:!0});var Ys=s(Se);rt=r(Ys,"SPAN",{});var Ws=s(rt);$(ta.$$.fragment,Ws),Ws.forEach(t),Ys.forEach(t),Or=l(Qt),st=r(Qt,"SPAN",{});var Zs=s(st);Ur=i(Zs,"DeleteCacheStrategy"),Zs.forEach(t),Qt.forEach(t),Rt=l(a),L=r(a,"DIV",{class:!0});var De=s(L);$(na.$$.fragment,De),Vr=l(De),ot=r(De,"P",{});var Qs=s(ot);Kr=i(Qs,"Frozen data structure holding the strategy to delete cached revisions."),Qs.forEach(t),Br=l(De),ra=r(De,"P",{});var Xt=s(ra);Mr=i(Xt,`This object is not meant to be instantiated programmatically but to be returned by
`),va=r(Xt,"A",{href:!0});var Xs=s(va);Gr=i(Xs,"delete_revisions()"),Xs.forEach(t),Jr=i(Xt,". See documentation for usage example."),Xt.forEach(t),Yr=l(De),J=r(De,"DIV",{class:!0});var Ia=s(J);$(sa.$$.fragment,Ia),Wr=l(Ia),ct=r(Ia,"P",{});var eo=s(ct);Zr=i(eo,"(property) Expected size that will be freed as a human-readable string."),eo.forEach(t),Qr=l(Ia),it=r(Ia,"P",{});var ao=s(it);Xr=i(ao,"Example: \u201C42.2K\u201D."),ao.forEach(t),Ia.forEach(t),De.forEach(t),At=l(a),ce=r(a,"H2",{class:!0});var en=s(ce);Pe=r(en,"A",{id:!0,class:!0,href:!0});var to=s(Pe);ht=r(to,"SPAN",{});var no=s(ht);$(oa.$$.fragment,no),no.forEach(t),to.forEach(t),es=l(en),lt=r(en,"SPAN",{});var ro=s(lt);as=i(ro,"Exceptions"),ro.forEach(t),en.forEach(t),jt=l(a),ie=r(a,"H3",{class:!0});var an=s(ie);ze=r(an,"A",{id:!0,class:!0,href:!0});var so=s(ze);ft=r(so,"SPAN",{});var oo=s(ft);$(ca.$$.fragment,oo),oo.forEach(t),so.forEach(t),ts=l(an),gt=r(an,"SPAN",{});var co=s(gt);ns=i(co,"CorruptedCacheException"),co.forEach(t),an.forEach(t),qt=l(a),he=r(a,"DIV",{class:!0});var tn=s(he);$(ia.$$.fragment,tn),rs=l(tn),pt=r(tn,"P",{});var io=s(pt);ss=i(io,"Exception for any unexpected structure in the Huggingface cache-system."),io.forEach(t),tn.forEach(t),this.h()},h(){f(o,"name","hf:doc:metadata"),f(o,"content",JSON.stringify(wo)),f(_,"id","cachesystem-reference"),f(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(_,"href","#cachesystem-reference"),f(p,"class","relative group"),f(Z,"href","../how-to-cache"),f(le,"id","helpers"),f(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(le,"href","#helpers"),f(Q,"class","relative group"),f(fe,"id","huggingface_hub.scan_cache_dir"),f(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(fe,"href","#huggingface_hub.scan_cache_dir"),f(X,"class","relative group"),f(da,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(ua,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.CorruptedCacheException"),f(ma,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(_a,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo"),f(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(de,"id","data-structures"),f(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(de,"href","#data-structures"),f(ee,"class","relative group"),f(ba,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(me,"id","huggingface_hub.HFCacheInfo"),f(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(me,"href","#huggingface_hub.HFCacheInfo"),f(ae,"class","relative group"),f($a,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.scan_cache_dir"),f(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ye,"id","huggingface_hub.CachedRepoInfo"),f(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ye,"href","#huggingface_hub.CachedRepoInfo"),f(te,"class","relative group"),f(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(we,"id","huggingface_hub.CachedRevisionInfo"),f(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(we,"href","#huggingface_hub.CachedRevisionInfo"),f(ne,"class","relative group"),f(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ke,"id","huggingface_hub.CachedFileInfo"),f(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ke,"href","#huggingface_hub.CachedFileInfo"),f(se,"class","relative group"),f(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Se,"id","huggingface_hub.DeleteCacheStrategy"),f(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Se,"href","#huggingface_hub.DeleteCacheStrategy"),f(oe,"class","relative group"),f(va,"href","/docs/huggingface_hub/main/en/package_reference/cache#huggingface_hub.HFCacheInfo.delete_revisions"),f(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Pe,"id","exceptions"),f(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Pe,"href","#exceptions"),f(ce,"class","relative group"),f(ze,"id","huggingface_hub.CorruptedCacheException"),f(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ze,"href","#huggingface_hub.CorruptedCacheException"),f(ie,"class","relative group"),f(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(a,g){e(document.head,o),u(a,m,g),u(a,p,g),e(p,_),e(_,w),v(d,w,null),e(p,x),e(p,k),e(k,I),u(a,z,g),u(a,F,g),e(F,N),e(F,Z),e(Z,ga),e(F,pa),u(a,vt,g),u(a,Q,g),e(Q,le),e(le,ka),v(He,ka,null),e(Q,on),e(Q,Sa),e(Sa,cn),u(a,yt,g),u(a,X,g),e(X,fe),e(fe,Pa),v(Re,Pa,null),e(X,hn),e(X,za),e(za,ln),u(a,Et,g),u(a,S,g),v(Ae,S,null),e(S,fn),e(S,je),e(je,gn),e(je,da),e(da,pn),e(je,dn),e(S,un),e(S,U),e(U,mn),e(U,Fa),e(Fa,_n),e(U,bn),e(U,ua),e(ua,$n),e(U,vn),e(U,ma),e(ma,yn),e(U,En),e(S,Cn),v(ge,S,null),e(S,wn),v(pe,S,null),e(S,xn),v(qe,S,null),e(S,In),e(S,Ne),e(Ne,kn),e(Ne,_a),e(_a,Sn),e(Ne,Pn),u(a,Ct,g),u(a,ee,g),e(ee,de),e(de,Da),v(Le,Da,null),e(ee,zn),e(ee,Ha),e(Ha,Fn),u(a,wt,g),u(a,ue,g),e(ue,Dn),e(ue,ba),e(ba,Hn),e(ue,Rn),u(a,xt,g),u(a,ae,g),e(ae,me),e(me,Ra),v(Te,Ra,null),e(ae,An),e(ae,Aa),e(Aa,jn),u(a,It,g),u(a,R,g),v(Oe,R,null),e(R,qn),e(R,ja),e(ja,Nn),e(R,Ln),e(R,Ue),e(Ue,Tn),e(Ue,$a),e($a,On),e(Ue,Un),e(R,Vn),v(_e,R,null),e(R,Kn),e(R,H),v(Ve,H,null),e(H,Bn),e(H,qa),e(qa,Mn),e(H,Gn),e(H,Na),e(Na,Jn),e(H,Yn),v(be,H,null),e(H,Wn),v($e,H,null),e(H,Zn),v(ve,H,null),u(a,kt,g),u(a,te,g),e(te,ye),e(ye,La),v(Ke,La,null),e(te,Qn),e(te,Ta),e(Ta,Xn),u(a,St,g),u(a,A,g),v(Be,A,null),e(A,er),e(A,Oa),e(Oa,ar),e(A,tr),v(Ee,A,null),e(A,nr),e(A,B),v(Me,B,null),e(B,rr),e(B,Ua),e(Ua,sr),e(B,or),e(B,Va),e(Va,cr),e(A,ir),e(A,Ce),v(Ge,Ce,null),e(Ce,hr),e(Ce,Je),e(Je,lr),e(Je,Ka),e(Ka,fr),e(Je,gr),u(a,Pt,g),u(a,ne,g),e(ne,we),e(we,Ba),v(Ye,Ba,null),e(ne,pr),e(ne,Ma),e(Ma,dr),u(a,zt,g),u(a,D,g),v(We,D,null),e(D,ur),e(D,Ga),e(Ga,mr),e(D,_r),e(D,re),e(re,br),e(re,Ja),e(Ja,$r),e(re,vr),e(re,Ya),e(Ya,yr),e(re,Er),e(D,Cr),v(xe,D,null),e(D,wr),e(D,M),v(Ze,M,null),e(M,xr),e(M,Wa),e(Wa,Ir),e(M,kr),e(M,Za),e(Za,Sr),e(D,Pr),e(D,Ie),v(Qe,Ie,null),e(Ie,zr),e(Ie,Qa),e(Qa,Fr),u(a,Ft,g),u(a,se,g),e(se,ke),e(ke,Xa),v(Xe,Xa,null),e(se,Dr),e(se,et),e(et,Hr),u(a,Dt,g),u(a,V,g),v(ea,V,null),e(V,Rr),e(V,at),e(at,Ar),e(V,jr),e(V,G),v(aa,G,null),e(G,qr),e(G,tt),e(tt,Nr),e(G,Lr),e(G,nt),e(nt,Tr),u(a,Ht,g),u(a,oe,g),e(oe,Se),e(Se,rt),v(ta,rt,null),e(oe,Or),e(oe,st),e(st,Ur),u(a,Rt,g),u(a,L,g),v(na,L,null),e(L,Vr),e(L,ot),e(ot,Kr),e(L,Br),e(L,ra),e(ra,Mr),e(ra,va),e(va,Gr),e(ra,Jr),e(L,Yr),e(L,J),v(sa,J,null),e(J,Wr),e(J,ct),e(ct,Zr),e(J,Qr),e(J,it),e(it,Xr),u(a,At,g),u(a,ce,g),e(ce,Pe),e(Pe,ht),v(oa,ht,null),e(ce,es),e(ce,lt),e(lt,as),u(a,jt,g),u(a,ie,g),e(ie,ze),e(ze,ft),v(ca,ft,null),e(ie,ts),e(ie,gt),e(gt,ns),u(a,qt,g),u(a,he,g),v(ia,he,null),e(he,rs),e(he,pt),e(pt,ss),Nt=!0},p(a,[g]){const ha={};g&2&&(ha.$$scope={dirty:g,ctx:a}),ge.$set(ha);const dt={};g&2&&(dt.$$scope={dirty:g,ctx:a}),pe.$set(dt);const ut={};g&2&&(ut.$$scope={dirty:g,ctx:a}),_e.$set(ut);const mt={};g&2&&(mt.$$scope={dirty:g,ctx:a}),be.$set(mt);const la={};g&2&&(la.$$scope={dirty:g,ctx:a}),$e.$set(la);const _t={};g&2&&(_t.$$scope={dirty:g,ctx:a}),ve.$set(_t);const fa={};g&2&&(fa.$$scope={dirty:g,ctx:a}),Ee.$set(fa);const bt={};g&2&&(bt.$$scope={dirty:g,ctx:a}),xe.$set(bt)},i(a){Nt||(y(d.$$.fragment,a),y(He.$$.fragment,a),y(Re.$$.fragment,a),y(Ae.$$.fragment,a),y(ge.$$.fragment,a),y(pe.$$.fragment,a),y(qe.$$.fragment,a),y(Le.$$.fragment,a),y(Te.$$.fragment,a),y(Oe.$$.fragment,a),y(_e.$$.fragment,a),y(Ve.$$.fragment,a),y(be.$$.fragment,a),y($e.$$.fragment,a),y(ve.$$.fragment,a),y(Ke.$$.fragment,a),y(Be.$$.fragment,a),y(Ee.$$.fragment,a),y(Me.$$.fragment,a),y(Ge.$$.fragment,a),y(Ye.$$.fragment,a),y(We.$$.fragment,a),y(xe.$$.fragment,a),y(Ze.$$.fragment,a),y(Qe.$$.fragment,a),y(Xe.$$.fragment,a),y(ea.$$.fragment,a),y(aa.$$.fragment,a),y(ta.$$.fragment,a),y(na.$$.fragment,a),y(sa.$$.fragment,a),y(oa.$$.fragment,a),y(ca.$$.fragment,a),y(ia.$$.fragment,a),Nt=!0)},o(a){E(d.$$.fragment,a),E(He.$$.fragment,a),E(Re.$$.fragment,a),E(Ae.$$.fragment,a),E(ge.$$.fragment,a),E(pe.$$.fragment,a),E(qe.$$.fragment,a),E(Le.$$.fragment,a),E(Te.$$.fragment,a),E(Oe.$$.fragment,a),E(_e.$$.fragment,a),E(Ve.$$.fragment,a),E(be.$$.fragment,a),E($e.$$.fragment,a),E(ve.$$.fragment,a),E(Ke.$$.fragment,a),E(Be.$$.fragment,a),E(Ee.$$.fragment,a),E(Me.$$.fragment,a),E(Ge.$$.fragment,a),E(Ye.$$.fragment,a),E(We.$$.fragment,a),E(xe.$$.fragment,a),E(Ze.$$.fragment,a),E(Qe.$$.fragment,a),E(Xe.$$.fragment,a),E(ea.$$.fragment,a),E(aa.$$.fragment,a),E(ta.$$.fragment,a),E(na.$$.fragment,a),E(sa.$$.fragment,a),E(oa.$$.fragment,a),E(ca.$$.fragment,a),E(ia.$$.fragment,a),Nt=!1},d(a){t(o),a&&t(m),a&&t(p),C(d),a&&t(z),a&&t(F),a&&t(vt),a&&t(Q),C(He),a&&t(yt),a&&t(X),C(Re),a&&t(Et),a&&t(S),C(Ae),C(ge),C(pe),C(qe),a&&t(Ct),a&&t(ee),C(Le),a&&t(wt),a&&t(ue),a&&t(xt),a&&t(ae),C(Te),a&&t(It),a&&t(R),C(Oe),C(_e),C(Ve),C(be),C($e),C(ve),a&&t(kt),a&&t(te),C(Ke),a&&t(St),a&&t(A),C(Be),C(Ee),C(Me),C(Ge),a&&t(Pt),a&&t(ne),C(Ye),a&&t(zt),a&&t(D),C(We),C(xe),C(Ze),C(Qe),a&&t(Ft),a&&t(se),C(Xe),a&&t(Dt),a&&t(V),C(ea),C(aa),a&&t(Ht),a&&t(oe),C(ta),a&&t(Rt),a&&t(L),C(na),C(sa),a&&t(At),a&&t(ce),C(oa),a&&t(jt),a&&t(ie),C(ca),a&&t(qt),a&&t(he),C(ia)}}}const wo={local:"cachesystem-reference",sections:[{local:"helpers",sections:[{local:"huggingface_hub.scan_cache_dir",title:"scan_cache_dir"}],title:"Helpers"},{local:"data-structures",sections:[{local:"huggingface_hub.HFCacheInfo",title:"HFCacheInfo"},{local:"huggingface_hub.CachedRepoInfo",title:"CachedRepoInfo"},{local:"huggingface_hub.CachedRevisionInfo",title:"CachedRevisionInfo"},{local:"huggingface_hub.CachedFileInfo",title:"CachedFileInfo"},{local:"huggingface_hub.DeleteCacheStrategy",title:"DeleteCacheStrategy"}],title:"Data structures"},{local:"exceptions",sections:[{local:"huggingface_hub.CorruptedCacheException",title:"CorruptedCacheException"}],title:"Exceptions"}],title:"Cache-system reference"};function xo(P){return po(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Do extends ho{constructor(o){super();lo(this,o,xo,Co,fo,{})}}export{Do as default,wo as metadata};
