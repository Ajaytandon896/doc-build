import{S as Ma,i as Va,s as Ba,e as a,k as d,w as O,t as i,M as Ga,c as n,d as o,m as h,a as r,x as H,h as l,b as s,G as e,g as f,y as S,q,o as C,B as R,v as za,L as Wa}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xt}from"../../chunks/Tip-hf-doc-builder.js";import{D as jo}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Ka}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ie}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ja}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Qa(pe){let _,L,v,c,m,u,w,j,B,E,A,k,M,$,g,y,K,G,N,x,D,F,he,Z,I,P,b,V,ge,J,_e,ce,ae,ee,Q,X,ne,We,me,oe,Ke,te,Ee,be,ve,$e,Je;return{c(){_=a("p"),L=i("Raises the following errors:"),v=d(),c=a("ul"),m=a("li"),u=a("a"),w=a("code"),j=i("EnvironmentError"),B=i(`
if `),E=a("code"),A=i("use_auth_token=True"),k=i(" and the token cannot be found."),M=d(),$=a("li"),g=a("a"),y=a("code"),K=i("OSError"),G=i(`
if ETag cannot be determined.`),N=d(),x=a("li"),D=a("a"),F=a("code"),he=i("ValueError"),Z=i(`
if some parameter value is invalid`),I=d(),P=a("li"),b=a("a"),V=i("RepositoryNotFoundError"),ge=i(`
If the repository to download from cannot be found. This may be because it doesn\u2019t exist,
or because it is set to `),J=a("code"),_e=i("private"),ce=i(" and you do not have access."),ae=d(),ee=a("li"),Q=a("a"),X=i("RevisionNotFoundError"),ne=i(`
If the revision to download from cannot be found.`),We=d(),me=a("li"),oe=a("a"),Ke=i("EntryNotFoundError"),te=i(`
If the file to download cannot be found.`),Ee=d(),be=a("li"),ve=a("a"),$e=i("LocalEntryNotFoundError"),Je=i(`
If network is disabled or unavailable and file is not found in cache.`),this.h()},l(z){_=n(z,"P",{});var re=r(_);L=l(re,"Raises the following errors:"),re.forEach(o),v=h(z),c=n(z,"UL",{});var U=r(c);m=n(U,"LI",{});var xe=r(m);u=n(xe,"A",{href:!0,rel:!0});var Oe=r(u);w=n(Oe,"CODE",{});var so=r(w);j=l(so,"EnvironmentError"),so.forEach(o),Oe.forEach(o),B=l(xe,`
if `),E=n(xe,"CODE",{});var ho=r(E);A=l(ho,"use_auth_token=True"),ho.forEach(o),k=l(xe," and the token cannot be found."),xe.forEach(o),M=h(U),$=n(U,"LI",{});var ie=r($);g=n(ie,"A",{href:!0,rel:!0});var Qe=r(g);y=n(Qe,"CODE",{});var le=r(y);K=l(le,"OSError"),le.forEach(o),Qe.forEach(o),G=l(ie,`
if ETag cannot be determined.`),ie.forEach(o),N=h(U),x=n(U,"LI",{});var se=r(x);D=n(se,"A",{href:!0,rel:!0});var He=r(D);F=n(He,"CODE",{});var we=r(F);he=l(we,"ValueError"),we.forEach(o),He.forEach(o),Z=l(se,`
if some parameter value is invalid`),se.forEach(o),I=h(U),P=n(U,"LI",{});var ke=r(P);b=n(ke,"A",{href:!0});var Se=r(b);V=l(Se,"RepositoryNotFoundError"),Se.forEach(o),ge=l(ke,`
If the repository to download from cannot be found. This may be because it doesn\u2019t exist,
or because it is set to `),J=n(ke,"CODE",{});var co=r(J);_e=l(co,"private"),co.forEach(o),ce=l(ke," and you do not have access."),ke.forEach(o),ae=h(U),ee=n(U,"LI",{});var qe=r(ee);Q=n(qe,"A",{href:!0});var T=r(Q);X=l(T,"RevisionNotFoundError"),T.forEach(o),ne=l(qe,`
If the revision to download from cannot be found.`),qe.forEach(o),We=h(U),me=n(U,"LI",{});var fe=r(me);oe=n(fe,"A",{href:!0});var fo=r(oe);Ke=l(fo,"EntryNotFoundError"),fo.forEach(o),te=l(fe,`
If the file to download cannot be found.`),fe.forEach(o),Ee=h(U),be=n(U,"LI",{});var Ne=r(be);ve=n(Ne,"A",{href:!0});var uo=r(ve);$e=l(uo,"LocalEntryNotFoundError"),uo.forEach(o),Je=l(Ne,`
If network is disabled or unavailable and file is not found in cache.`),Ne.forEach(o),U.forEach(o),this.h()},h(){s(u,"href","https://docs.python.org/3/library/exceptions.html#EnvironmentError"),s(u,"rel","nofollow"),s(g,"href","https://docs.python.org/3/library/exceptions.html#OSError"),s(g,"rel","nofollow"),s(D,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),s(D,"rel","nofollow"),s(b,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError"),s(Q,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError"),s(oe,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError"),s(ve,"href","/docs/huggingface_hub/main/en/package_reference/utilities#huggingface_hub.utils.LocalEntryNotFoundError")},m(z,re){f(z,_,re),e(_,L),f(z,v,re),f(z,c,re),e(c,m),e(m,u),e(u,w),e(w,j),e(m,B),e(m,E),e(E,A),e(m,k),e(c,M),e(c,$),e($,g),e(g,y),e(y,K),e($,G),e(c,N),e(c,x),e(x,D),e(D,F),e(F,he),e(x,Z),e(c,I),e(c,P),e(P,b),e(b,V),e(P,ge),e(P,J),e(J,_e),e(P,ce),e(c,ae),e(c,ee),e(ee,Q),e(Q,X),e(ee,ne),e(c,We),e(c,me),e(me,oe),e(oe,Ke),e(me,te),e(c,Ee),e(c,be),e(be,ve),e(ve,$e),e(be,Je)},d(z){z&&o(_),z&&o(v),z&&o(c)}}}function Xa(pe){let _,L,v,c,m;return c=new Ka({props:{code:`from huggingface_hub import hf_hub_url

hf_hub_url(
    repo_id="julien-c/EsperBERTo-small", filename="pytorch_model.bin"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_url

<span class="hljs-meta">&gt;&gt;&gt; </span>hf_hub_url(
<span class="hljs-meta">... </span>    repo_id=<span class="hljs-string">&quot;julien-c/EsperBERTo-small&quot;</span>, filename=<span class="hljs-string">&quot;pytorch_model.bin&quot;</span>
<span class="hljs-meta">... </span>)
<span class="hljs-string">&#x27;https://huggingface.co/julien-c/EsperBERTo-small/resolve/main/pytorch_model.bin&#x27;</span>`}}),{c(){_=a("p"),L=i("Example:"),v=d(),O(c.$$.fragment)},l(u){_=n(u,"P",{});var w=r(_);L=l(w,"Example:"),w.forEach(o),v=h(u),H(c.$$.fragment,u)},m(u,w){f(u,_,w),e(_,L),f(u,v,w),S(c,u,w),m=!0},p:Wa,i(u){m||(q(c.$$.fragment,u),m=!0)},o(u){C(c.$$.fragment,u),m=!1},d(u){u&&o(_),u&&o(v),R(c,u)}}}function Ya(pe){let _,L,v,c,m,u,w,j,B,E,A,k,M,$;return{c(){_=a("p"),L=i("Notes:"),v=d(),c=a("p"),m=i(`Cloudfront is replicated over the globe so downloads are way faster for
the end user (and it also lowers our bandwidth costs).`),u=d(),w=a("p"),j=i(`Cloudfront aggressively caches files by default (default TTL is 24
hours), however this is not an issue here because we implement a
git-based versioning system on huggingface.co, which means that we store
the files on S3/Cloudfront in a content-addressable way (i.e., the file
name is its hash). Using content-addressable filenames means cache can\u2019t
ever be stale.`),B=d(),E=a("p"),A=i(`In terms of client-side caching from this library, we base our caching
on the objects\u2019 entity tag (`),k=a("code"),M=i("ETag"),$=i(`), which is an identifier of a
specific version of a resource [1]_. An object\u2019s ETag is: its git-sha1
if stored in git, or its sha256 if stored in git-lfs.`)},l(g){_=n(g,"P",{});var y=r(_);L=l(y,"Notes:"),y.forEach(o),v=h(g),c=n(g,"P",{});var K=r(c);m=l(K,`Cloudfront is replicated over the globe so downloads are way faster for
the end user (and it also lowers our bandwidth costs).`),K.forEach(o),u=h(g),w=n(g,"P",{});var G=r(w);j=l(G,`Cloudfront aggressively caches files by default (default TTL is 24
hours), however this is not an issue here because we implement a
git-based versioning system on huggingface.co, which means that we store
the files on S3/Cloudfront in a content-addressable way (i.e., the file
name is its hash). Using content-addressable filenames means cache can\u2019t
ever be stale.`),G.forEach(o),B=h(g),E=n(g,"P",{});var N=r(E);A=l(N,`In terms of client-side caching from this library, we base our caching
on the objects\u2019 entity tag (`),k=n(N,"CODE",{});var x=r(k);M=l(x,"ETag"),x.forEach(o),$=l(N,`), which is an identifier of a
specific version of a resource [1]_. An object\u2019s ETag is: its git-sha1
if stored in git, or its sha256 if stored in git-lfs.`),N.forEach(o)},m(g,y){f(g,_,y),e(_,L),f(g,v,y),f(g,c,y),e(c,m),f(g,u,y),f(g,w,y),e(w,j),f(g,B,y),f(g,E,y),e(E,A),e(E,k),e(k,M),e(E,$)},d(g){g&&o(_),g&&o(v),g&&o(c),g&&o(u),g&&o(w),g&&o(B),g&&o(E)}}}function Za(pe){let _,L,v,c,m,u,w,j,B,E,A,k,M,$,g,y,K,G,N,x,D,F,he,Z;return{c(){_=a("p"),L=i("Raises the following errors:"),v=d(),c=a("ul"),m=a("li"),u=a("a"),w=a("code"),j=i("EnvironmentError"),B=i(`
if `),E=a("code"),A=i("use_auth_token=True"),k=i(" and the token cannot be found."),M=d(),$=a("li"),g=a("a"),y=a("code"),K=i("OSError"),G=i(` if
ETag cannot be determined.`),N=d(),x=a("li"),D=a("a"),F=a("code"),he=i("ValueError"),Z=i(`
if some parameter value is invalid`),this.h()},l(I){_=n(I,"P",{});var P=r(_);L=l(P,"Raises the following errors:"),P.forEach(o),v=h(I),c=n(I,"UL",{});var b=r(c);m=n(b,"LI",{});var V=r(m);u=n(V,"A",{href:!0,rel:!0});var ge=r(u);w=n(ge,"CODE",{});var J=r(w);j=l(J,"EnvironmentError"),J.forEach(o),ge.forEach(o),B=l(V,`
if `),E=n(V,"CODE",{});var _e=r(E);A=l(_e,"use_auth_token=True"),_e.forEach(o),k=l(V," and the token cannot be found."),V.forEach(o),M=h(b),$=n(b,"LI",{});var ce=r($);g=n(ce,"A",{href:!0,rel:!0});var ae=r(g);y=n(ae,"CODE",{});var ee=r(y);K=l(ee,"OSError"),ee.forEach(o),ae.forEach(o),G=l(ce,` if
ETag cannot be determined.`),ce.forEach(o),N=h(b),x=n(b,"LI",{});var Q=r(x);D=n(Q,"A",{href:!0,rel:!0});var X=r(D);F=n(X,"CODE",{});var ne=r(F);he=l(ne,"ValueError"),ne.forEach(o),X.forEach(o),Z=l(Q,`
if some parameter value is invalid`),Q.forEach(o),b.forEach(o),this.h()},h(){s(u,"href","https://docs.python.org/3/library/exceptions.html#EnvironmentError"),s(u,"rel","nofollow"),s(g,"href","https://docs.python.org/3/library/exceptions.html#OSError"),s(g,"rel","nofollow"),s(D,"href","https://docs.python.org/3/library/exceptions.html#ValueError"),s(D,"rel","nofollow")},m(I,P){f(I,_,P),e(_,L),f(I,v,P),f(I,c,P),e(c,m),e(m,u),e(u,w),e(w,j),e(m,B),e(m,E),e(E,A),e(m,k),e(c,M),e(c,$),e($,g),e(g,y),e(y,K),e($,G),e(c,N),e(c,x),e(x,D),e(D,F),e(F,he),e(x,Z)},d(I){I&&o(_),I&&o(v),I&&o(c)}}}function en(pe){let _,L,v,c,m,u,w,j,B,E,A,k,M,$,g,y,K,G,N,x,D,F,he,Z,I,P,b,V,ge,J,_e,ce,ae,ee,Q,X,ne,We,me,oe,Ke,te,Ee,be,ve,$e,Je,z,re,U,xe,Oe,so,ho,ie,Qe,le,se,He,we,ke,Se,co,qe,T,fe,fo,Ne,uo,ct,wo,ft,ut,Ce,pt,Re,gt,yo,_t,mt,Eo,po,bt,Xe,vt,Mo,Te,Ue,$o,Ye,wt,xo,yt,Vo,W,Ze,Et,ko,$t,xt,No,kt,Nt,To,Tt,At,je,Bo,Ae,Me,Ao,eo,Dt,Do,Lt,Go,De,Ve,Lo,oo,Pt,Po,Ft,zo,Le,to,It,Fo,Ot,Wo,Pe,Be,Io,ao,Ht,Oo,St,Ko,ue,no,qt,Ho,Ct,Rt,ro,Ut,go,jt,Mt,Jo,Fe,Ge,So,io,Vt,qo,Bt,Qo,_o,Gt,Xo,ze,zt,mo,Wt,Kt,Yo;return u=new Ie({}),$=new Ie({}),F=new Ie({}),V=new jo({props:{name:"huggingface_hub.hf_hub_download",anchor:"huggingface_hub.hf_hub_download",parameters:[{name:"repo_id",val:": str"},{name:"filename",val:": str"},{name:"subfolder",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"library_name",val:": typing.Optional[str] = None"},{name:"library_version",val:": typing.Optional[str] = None"},{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"user_agent",val:": typing.Union[typing.Dict, str, NoneType] = None"},{name:"force_download",val:": typing.Optional[bool] = False"},{name:"force_filename",val:": typing.Optional[str] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"etag_timeout",val:": typing.Optional[float] = 10"},{name:"resume_download",val:": typing.Optional[bool] = False"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"local_files_only",val:": typing.Optional[bool] = False"},{name:"legacy_cache_layout",val:": typing.Optional[bool] = False"}],parametersDescription:[{anchor:"huggingface_hub.hf_hub_download.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A user or an organization name and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.hf_hub_download.filename",description:`<strong>filename</strong> (<code>str</code>) &#x2014;
The name of the file in the repo.`,name:"filename"},{anchor:"huggingface_hub.hf_hub_download.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional value corresponding to a folder inside the model repo.`,name:"subfolder"},{anchor:"huggingface_hub.hf_hub_download.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.hf_hub_download.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"},{anchor:"huggingface_hub.hf_hub_download.library_name",description:`<strong>library_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the library to which the object corresponds.`,name:"library_name"},{anchor:"huggingface_hub.hf_hub_download.library_version",description:`<strong>library_version</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The version of the library.`,name:"library_version"},{anchor:"huggingface_hub.hf_hub_download.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <code>Path</code>, <em>optional</em>) &#x2014;
Path to the folder where cached files are stored.`,name:"cache_dir"},{anchor:"huggingface_hub.hf_hub_download.user_agent",description:`<strong>user_agent</strong> (<code>dict</code>, <code>str</code>, <em>optional</em>) &#x2014;
The user-agent info in the form of a dictionary or a string.`,name:"user_agent"},{anchor:"huggingface_hub.hf_hub_download.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether the file should be downloaded even if it already exists in
the local cache.`,name:"force_download"},{anchor:"huggingface_hub.hf_hub_download.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.hf_hub_download.etag_timeout",description:`<strong>etag_timeout</strong> (<code>float</code>, <em>optional</em>, defaults to <code>10</code>) &#x2014;
When fetching ETag, how many seconds to wait for the server to send
data before giving up which is passed to <code>requests.request</code>.`,name:"etag_timeout"},{anchor:"huggingface_hub.hf_hub_download.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, resume a previously interrupted download.`,name:"resume_download"},{anchor:"huggingface_hub.hf_hub_download.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code>, <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"use_auth_token"},{anchor:"huggingface_hub.hf_hub_download.local_files_only",description:`<strong>local_files_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, avoid downloading the file and return the path to the
local cached file if it exists.`,name:"local_files_only"},{anchor:"huggingface_hub.hf_hub_download.legacy_cache_layout",description:`<strong>legacy_cache_layout</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, uses the legacy file cache layout i.e. just call <a href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url">hf_hub_url()</a>
then <code>cached_download</code>. This is deprecated as the new cache layout is
more powerful.`,name:"legacy_cache_layout"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L924",returnDescription:`
<p>Local path (string) of file or if networking is off, last version of
file cached on disk.</p>
`}}),ie=new Xt({props:{$$slots:{default:[Qa]},$$scope:{ctx:pe}}}),we=new Ie({}),fe=new jo({props:{name:"huggingface_hub.hf_hub_url",anchor:"huggingface_hub.hf_hub_url",parameters:[{name:"repo_id",val:": str"},{name:"filename",val:": str"},{name:"subfolder",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"huggingface_hub.hf_hub_url.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A namespace (user or an organization) name and a repo name separated
by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.hf_hub_url.filename",description:`<strong>filename</strong> (<code>str</code>) &#x2014;
The name of the file in the repo.`,name:"filename"},{anchor:"huggingface_hub.hf_hub_url.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional value corresponding to a folder inside the repo.`,name:"subfolder"},{anchor:"huggingface_hub.hf_hub_url.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.hf_hub_url.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L204"}}),Ce=new Ja({props:{anchor:"huggingface_hub.hf_hub_url.example",$$slots:{default:[Xa]},$$scope:{ctx:pe}}}),Re=new Xt({props:{$$slots:{default:[Ya]},$$scope:{ctx:pe}}}),Ye=new Ie({}),Ze=new jo({props:{name:"huggingface_hub.snapshot_download",anchor:"huggingface_hub.snapshot_download",parameters:[{name:"repo_id",val:": str"},{name:"revision",val:": typing.Optional[str] = None"},{name:"repo_type",val:": typing.Optional[str] = None"},{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"library_name",val:": typing.Optional[str] = None"},{name:"library_version",val:": typing.Optional[str] = None"},{name:"user_agent",val:": typing.Union[typing.Dict, str, NoneType] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"etag_timeout",val:": typing.Optional[float] = 10"},{name:"resume_download",val:": typing.Optional[bool] = False"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"local_files_only",val:": typing.Optional[bool] = False"},{name:"allow_regex",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"ignore_regex",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"allow_patterns",val:": typing.Union[typing.List[str], str, NoneType] = None"},{name:"ignore_patterns",val:": typing.Union[typing.List[str], str, NoneType] = None"}],parametersDescription:[{anchor:"huggingface_hub.snapshot_download.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
A user or an organization name and a repo name separated by a <code>/</code>.`,name:"repo_id"},{anchor:"huggingface_hub.snapshot_download.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional Git revision id which can be a branch name, a tag, or a
commit hash.`,name:"revision"},{anchor:"huggingface_hub.snapshot_download.repo_type",description:`<strong>repo_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Set to <code>&quot;dataset&quot;</code> or <code>&quot;space&quot;</code> if uploading to a dataset or space,
<code>None</code> or <code>&quot;model&quot;</code> if uploading to a model. Default is <code>None</code>.`,name:"repo_type"},{anchor:"huggingface_hub.snapshot_download.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <code>Path</code>, <em>optional</em>) &#x2014;
Path to the folder where cached files are stored.`,name:"cache_dir"},{anchor:"huggingface_hub.snapshot_download.library_name",description:`<strong>library_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the library to which the object corresponds.`,name:"library_name"},{anchor:"huggingface_hub.snapshot_download.library_version",description:`<strong>library_version</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The version of the library.`,name:"library_version"},{anchor:"huggingface_hub.snapshot_download.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, <code>dict</code>, <em>optional</em>) &#x2014;
The user-agent info in the form of a dictionary or a string.`,name:"user_agent"},{anchor:"huggingface_hub.snapshot_download.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.snapshot_download.etag_timeout",description:`<strong>etag_timeout</strong> (<code>float</code>, <em>optional</em>, defaults to <code>10</code>) &#x2014;
When fetching ETag, how many seconds to wait for the server to send
data before giving up which is passed to <code>requests.request</code>.`,name:"etag_timeout"},{anchor:"huggingface_hub.snapshot_download.resume_download",description:"<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False) -- If </code>True`, resume a previously interrupted download.",name:"resume_download"},{anchor:"huggingface_hub.snapshot_download.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code>, <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"use_auth_token"},{anchor:"huggingface_hub.snapshot_download.local_files_only",description:`<strong>local_files_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, avoid downloading the file and return the path to the
local cached file if it exists.`,name:"local_files_only"},{anchor:"huggingface_hub.snapshot_download.allow_patterns",description:`<strong>allow_patterns</strong> (<code>List[str]</code> or <code>str</code>, <em>optional</em>) &#x2014;
If provided, only files matching at least one pattern are downloaded.`,name:"allow_patterns"},{anchor:"huggingface_hub.snapshot_download.ignore_patterns",description:`<strong>ignore_patterns</strong> (<code>List[str]</code> or <code>str</code>, <em>optional</em>) &#x2014;
If provided, files matching any of the patterns are not downloaded.`,name:"ignore_patterns"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/_snapshot_download.py#L15",returnDescription:`
<p>Local folder path (string) of repo snapshot</p>
`}}),je=new Xt({props:{$$slots:{default:[Za]},$$scope:{ctx:pe}}}),eo=new Ie({}),oo=new Ie({}),to=new jo({props:{name:"huggingface_hub.get_hf_file_metadata",anchor:"huggingface_hub.get_hf_file_metadata",parameters:[{name:"url",val:": str"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"timeout",val:": typing.Optional[float] = 10"}],parametersDescription:[{anchor:"huggingface_hub.get_hf_file_metadata.url",description:`<strong>url</strong> (<code>str</code>) &#x2014;
File url, for example returned by <a href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.hf_hub_url">hf_hub_url()</a>.`,name:"url"},{anchor:"huggingface_hub.get_hf_file_metadata.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
A token to be used for the download.<ul>
<li>If <code>True</code>, the token is read from the HuggingFace config
folder.</li>
<li>If <code>False</code> or <code>None</code>, no token is provided.</li>
<li>If a string, it&#x2019;s used as the authentication token.</li>
</ul>`,name:"use_auth_token"},{anchor:"huggingface_hub.get_hf_file_metadata.proxies",description:`<strong>proxies</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary mapping protocol to the URL of the proxy passed to
<code>requests.request</code>.`,name:"proxies"},{anchor:"huggingface_hub.get_hf_file_metadata.etag_timeout",description:`<strong>etag_timeout</strong> (<code>float</code>, <em>optional</em>, defaults to 10) &#x2014;
How many seconds to wait for the server to send metadata before giving up.`,name:"etag_timeout"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L1407",returnDescription:`
<p>A <a
  href="/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.HfFileMetadata"
>HfFileMetadata</a> object containing metadata such as location, etag and
commit_hash.</p>
`}}),ao=new Ie({}),no=new jo({props:{name:"class huggingface_hub.HfFileMetadata",anchor:"huggingface_hub.HfFileMetadata",parameters:[{name:"commit_hash",val:": typing.Optional[str]"},{name:"etag",val:": typing.Optional[str]"},{name:"location",val:": str"}],parametersDescription:[{anchor:"huggingface_hub.HfFileMetadata.commit_hash",description:`<strong>commit_hash</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The commit_hash related to the file.`,name:"commit_hash"},{anchor:"huggingface_hub.HfFileMetadata.etag",description:`<strong>etag</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Etag of the file on the server.`,name:"etag"},{anchor:"huggingface_hub.HfFileMetadata.location",description:`<strong>location</strong> (<code>str</code>) &#x2014;
Location where to download the file. Can be a Hub url or not (CDN).`,name:"location"}],source:"https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/file_download.py#L180"}}),io=new Ie({}),{c(){_=a("meta"),L=d(),v=a("h1"),c=a("a"),m=a("span"),O(u.$$.fragment),w=d(),j=a("span"),B=i("Downloading files"),E=d(),A=a("h2"),k=a("a"),M=a("span"),O($.$$.fragment),g=d(),y=a("span"),K=i("Download a single file"),G=d(),N=a("h3"),x=a("a"),D=a("span"),O(F.$$.fragment),he=d(),Z=a("span"),I=i("hf_hub_download"),P=d(),b=a("div"),O(V.$$.fragment),ge=d(),J=a("p"),_e=i("Download a given file if it\u2019s not already present in the local cache."),ce=d(),ae=a("p"),ee=i("The new cache file layout looks like this:"),Q=d(),X=a("ul"),ne=a("li"),We=i("The cache directory contains one subfolder per repo_id (namespaced by repo type)"),me=d(),oe=a("li"),Ke=i("inside each repo folder:"),te=a("ul"),Ee=a("li"),be=i("refs is a list of the latest known revision => commit_hash pairs"),ve=d(),$e=a("li"),Je=i(`blobs contains the actual file blobs (identified by their git-sha or sha256, depending on
whether they\u2019re LFS files or not)`),z=d(),re=a("li"),U=i(`snapshots contains one subfolder per commit, each \u201Ccommit\u201D contains the subset of the files
that have been resolved at that particular commit. Each filename is a symlink to the blob
at that particular commit.`),xe=d(),Oe=a("p"),so=i(`[  96]  .
\u2514\u2500\u2500 [ 160]  models\u2014julien-c\u2014EsperBERTo-small
\u251C\u2500\u2500 [ 160]  blobs
\u2502   \u251C\u2500\u2500 [321M]  403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
\u2502   \u251C\u2500\u2500 [ 398]  7cb18dc9bafbfcf74629a4b760af1b160957a83e
\u2502   \u2514\u2500\u2500 [1.4K]  d7edf6bd2a681fb0175f7735299831ee1b22b812
\u251C\u2500\u2500 [  96]  refs
\u2502   \u2514\u2500\u2500 [  40]  main
\u2514\u2500\u2500 [ 128]  snapshots
\u251C\u2500\u2500 [ 128]  2439f60ef33a0d46d85da5001d52aeda5b00ce9f
\u2502   \u251C\u2500\u2500 [  52]  README.md -> ../../blobs/d7edf6bd2a681fb0175f7735299831ee1b22b812
\u2502   \u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
\u2514\u2500\u2500 [ 128]  bbc77c8132af1cc5cf678da3f1ddf2de43606d48
\u251C\u2500\u2500 [  52]  README.md -> ../../blobs/7cb18dc9bafbfcf74629a4b760af1b160957a83e
\u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd`),ho=d(),O(ie.$$.fragment),Qe=d(),le=a("h3"),se=a("a"),He=a("span"),O(we.$$.fragment),ke=d(),Se=a("span"),co=i("hf_hub_url"),qe=d(),T=a("div"),O(fe.$$.fragment),fo=d(),Ne=a("p"),uo=i("Construct the URL of a file from the given information."),ct=d(),wo=a("p"),ft=i(`The resolved address can either be a huggingface.co-hosted url, or a link to
Cloudfront (a Content Delivery Network, or CDN) for large files which are
more than a few MBs.`),ut=d(),O(Ce.$$.fragment),pt=d(),O(Re.$$.fragment),gt=d(),yo=a("p"),_t=i("References:"),mt=d(),Eo=a("ul"),po=a("li"),bt=i("[1] "),Xe=a("a"),vt=i("https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),Mo=d(),Te=a("h2"),Ue=a("a"),$o=a("span"),O(Ye.$$.fragment),wt=d(),xo=a("span"),yt=i("Download a snapshot of the repo"),Vo=d(),W=a("div"),O(Ze.$$.fragment),Et=d(),ko=a("p"),$t=i("Download all files of a repo."),xt=d(),No=a("p"),kt=i(`Downloads a whole snapshot of a repo\u2019s files at the specified revision. This
is useful when you want all files from a repo, because you don\u2019t know which
ones you will need a priori. All files are nested inside a folder in order
to keep their actual filename relative to that folder.`),Nt=d(),To=a("p"),Tt=i(`An alternative would be to just clone a repo but this would require that the
user always has git and git-lfs installed, and properly configured.`),At=d(),O(je.$$.fragment),Bo=d(),Ae=a("h2"),Me=a("a"),Ao=a("span"),O(eo.$$.fragment),Dt=d(),Do=a("span"),Lt=i("Get metadata about a file"),Go=d(),De=a("h3"),Ve=a("a"),Lo=a("span"),O(oo.$$.fragment),Pt=d(),Po=a("span"),Ft=i("get_hf_file_metadata"),zo=d(),Le=a("div"),O(to.$$.fragment),It=d(),Fo=a("p"),Ot=i("Fetch metadata of a file versioned on the Hub for a given url."),Wo=d(),Pe=a("h3"),Be=a("a"),Io=a("span"),O(ao.$$.fragment),Ht=d(),Oo=a("span"),St=i("HfFileMetadata"),Ko=d(),ue=a("div"),O(no.$$.fragment),qt=d(),Ho=a("p"),Ct=i("Data structure containing information about a file versioned on the Hub."),Rt=d(),ro=a("p"),Ut=i("Returned by "),go=a("a"),jt=i("get_hf_file_metadata()"),Mt=i(" based on a URL."),Jo=d(),Fe=a("h2"),Ge=a("a"),So=a("span"),O(io.$$.fragment),Vt=d(),qo=a("span"),Bt=i("Caching"),Qo=d(),_o=a("p"),Gt=i(`The methods displayed above are designed to work with a caching system that prevents
re-downloading files. The caching system was updated in v0.8.0 to become the central
cache-system shared across libraries that depend on the Hub.`),Xo=d(),ze=a("p"),zt=i("Read the "),mo=a("a"),Wt=i("cache-system guide"),Kt=i(` for a detailed presentation of caching at
at HF.`),this.h()},l(t){const p=Ga('[data-svelte="svelte-1phssyn"]',document.head);_=n(p,"META",{name:!0,content:!0}),p.forEach(o),L=h(t),v=n(t,"H1",{class:!0});var lo=r(v);c=n(lo,"A",{id:!0,class:!0,href:!0});var Co=r(c);m=n(Co,"SPAN",{});var Ro=r(m);H(u.$$.fragment,Ro),Ro.forEach(o),Co.forEach(o),w=h(lo),j=n(lo,"SPAN",{});var Uo=r(j);B=l(Uo,"Downloading files"),Uo.forEach(o),lo.forEach(o),E=h(t),A=n(t,"H2",{class:!0});var Zo=r(A);k=n(Zo,"A",{id:!0,class:!0,href:!0});var Yt=r(k);M=n(Yt,"SPAN",{});var Zt=r(M);H($.$$.fragment,Zt),Zt.forEach(o),Yt.forEach(o),g=h(Zo),y=n(Zo,"SPAN",{});var ea=r(y);K=l(ea,"Download a single file"),ea.forEach(o),Zo.forEach(o),G=h(t),N=n(t,"H3",{class:!0});var et=r(N);x=n(et,"A",{id:!0,class:!0,href:!0});var oa=r(x);D=n(oa,"SPAN",{});var ta=r(D);H(F.$$.fragment,ta),ta.forEach(o),oa.forEach(o),he=h(et),Z=n(et,"SPAN",{});var aa=r(Z);I=l(aa,"hf_hub_download"),aa.forEach(o),et.forEach(o),P=h(t),b=n(t,"DIV",{class:!0});var de=r(b);H(V.$$.fragment,de),ge=h(de),J=n(de,"P",{});var na=r(J);_e=l(na,"Download a given file if it\u2019s not already present in the local cache."),na.forEach(o),ce=h(de),ae=n(de,"P",{});var ra=r(ae);ee=l(ra,"The new cache file layout looks like this:"),ra.forEach(o),Q=h(de),X=n(de,"UL",{});var ot=r(X);ne=n(ot,"LI",{});var ia=r(ne);We=l(ia,"The cache directory contains one subfolder per repo_id (namespaced by repo type)"),ia.forEach(o),me=h(ot),oe=n(ot,"LI",{});var Jt=r(oe);Ke=l(Jt,"inside each repo folder:"),te=n(Jt,"UL",{});var bo=r(te);Ee=n(bo,"LI",{});var la=r(Ee);be=l(la,"refs is a list of the latest known revision => commit_hash pairs"),la.forEach(o),ve=h(bo),$e=n(bo,"LI",{});var sa=r($e);Je=l(sa,`blobs contains the actual file blobs (identified by their git-sha or sha256, depending on
whether they\u2019re LFS files or not)`),sa.forEach(o),z=h(bo),re=n(bo,"LI",{});var da=r(re);U=l(da,`snapshots contains one subfolder per commit, each \u201Ccommit\u201D contains the subset of the files
that have been resolved at that particular commit. Each filename is a symlink to the blob
at that particular commit.`),da.forEach(o),bo.forEach(o),Jt.forEach(o),ot.forEach(o),xe=h(de),Oe=n(de,"P",{});var ha=r(Oe);so=l(ha,`[  96]  .
\u2514\u2500\u2500 [ 160]  models\u2014julien-c\u2014EsperBERTo-small
\u251C\u2500\u2500 [ 160]  blobs
\u2502   \u251C\u2500\u2500 [321M]  403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
\u2502   \u251C\u2500\u2500 [ 398]  7cb18dc9bafbfcf74629a4b760af1b160957a83e
\u2502   \u2514\u2500\u2500 [1.4K]  d7edf6bd2a681fb0175f7735299831ee1b22b812
\u251C\u2500\u2500 [  96]  refs
\u2502   \u2514\u2500\u2500 [  40]  main
\u2514\u2500\u2500 [ 128]  snapshots
\u251C\u2500\u2500 [ 128]  2439f60ef33a0d46d85da5001d52aeda5b00ce9f
\u2502   \u251C\u2500\u2500 [  52]  README.md -> ../../blobs/d7edf6bd2a681fb0175f7735299831ee1b22b812
\u2502   \u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
\u2514\u2500\u2500 [ 128]  bbc77c8132af1cc5cf678da3f1ddf2de43606d48
\u251C\u2500\u2500 [  52]  README.md -> ../../blobs/7cb18dc9bafbfcf74629a4b760af1b160957a83e
\u2514\u2500\u2500 [  76]  pytorch_model.bin -> ../../blobs/403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd`),ha.forEach(o),ho=h(de),H(ie.$$.fragment,de),de.forEach(o),Qe=h(t),le=n(t,"H3",{class:!0});var tt=r(le);se=n(tt,"A",{id:!0,class:!0,href:!0});var ca=r(se);He=n(ca,"SPAN",{});var fa=r(He);H(we.$$.fragment,fa),fa.forEach(o),ca.forEach(o),ke=h(tt),Se=n(tt,"SPAN",{});var ua=r(Se);co=l(ua,"hf_hub_url"),ua.forEach(o),tt.forEach(o),qe=h(t),T=n(t,"DIV",{class:!0});var Y=r(T);H(fe.$$.fragment,Y),fo=h(Y),Ne=n(Y,"P",{});var pa=r(Ne);uo=l(pa,"Construct the URL of a file from the given information."),pa.forEach(o),ct=h(Y),wo=n(Y,"P",{});var ga=r(wo);ft=l(ga,`The resolved address can either be a huggingface.co-hosted url, or a link to
Cloudfront (a Content Delivery Network, or CDN) for large files which are
more than a few MBs.`),ga.forEach(o),ut=h(Y),H(Ce.$$.fragment,Y),pt=h(Y),H(Re.$$.fragment,Y),gt=h(Y),yo=n(Y,"P",{});var _a=r(yo);_t=l(_a,"References:"),_a.forEach(o),mt=h(Y),Eo=n(Y,"UL",{});var ma=r(Eo);po=n(ma,"LI",{});var Qt=r(po);bt=l(Qt,"[1] "),Xe=n(Qt,"A",{href:!0,rel:!0});var ba=r(Xe);vt=l(ba,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),ba.forEach(o),Qt.forEach(o),ma.forEach(o),Y.forEach(o),Mo=h(t),Te=n(t,"H2",{class:!0});var at=r(Te);Ue=n(at,"A",{id:!0,class:!0,href:!0});var va=r(Ue);$o=n(va,"SPAN",{});var wa=r($o);H(Ye.$$.fragment,wa),wa.forEach(o),va.forEach(o),wt=h(at),xo=n(at,"SPAN",{});var ya=r(xo);yt=l(ya,"Download a snapshot of the repo"),ya.forEach(o),at.forEach(o),Vo=h(t),W=n(t,"DIV",{class:!0});var ye=r(W);H(Ze.$$.fragment,ye),Et=h(ye),ko=n(ye,"P",{});var Ea=r(ko);$t=l(Ea,"Download all files of a repo."),Ea.forEach(o),xt=h(ye),No=n(ye,"P",{});var $a=r(No);kt=l($a,`Downloads a whole snapshot of a repo\u2019s files at the specified revision. This
is useful when you want all files from a repo, because you don\u2019t know which
ones you will need a priori. All files are nested inside a folder in order
to keep their actual filename relative to that folder.`),$a.forEach(o),Nt=h(ye),To=n(ye,"P",{});var xa=r(To);Tt=l(xa,`An alternative would be to just clone a repo but this would require that the
user always has git and git-lfs installed, and properly configured.`),xa.forEach(o),At=h(ye),H(je.$$.fragment,ye),ye.forEach(o),Bo=h(t),Ae=n(t,"H2",{class:!0});var nt=r(Ae);Me=n(nt,"A",{id:!0,class:!0,href:!0});var ka=r(Me);Ao=n(ka,"SPAN",{});var Na=r(Ao);H(eo.$$.fragment,Na),Na.forEach(o),ka.forEach(o),Dt=h(nt),Do=n(nt,"SPAN",{});var Ta=r(Do);Lt=l(Ta,"Get metadata about a file"),Ta.forEach(o),nt.forEach(o),Go=h(t),De=n(t,"H3",{class:!0});var rt=r(De);Ve=n(rt,"A",{id:!0,class:!0,href:!0});var Aa=r(Ve);Lo=n(Aa,"SPAN",{});var Da=r(Lo);H(oo.$$.fragment,Da),Da.forEach(o),Aa.forEach(o),Pt=h(rt),Po=n(rt,"SPAN",{});var La=r(Po);Ft=l(La,"get_hf_file_metadata"),La.forEach(o),rt.forEach(o),zo=h(t),Le=n(t,"DIV",{class:!0});var it=r(Le);H(to.$$.fragment,it),It=h(it),Fo=n(it,"P",{});var Pa=r(Fo);Ot=l(Pa,"Fetch metadata of a file versioned on the Hub for a given url."),Pa.forEach(o),it.forEach(o),Wo=h(t),Pe=n(t,"H3",{class:!0});var lt=r(Pe);Be=n(lt,"A",{id:!0,class:!0,href:!0});var Fa=r(Be);Io=n(Fa,"SPAN",{});var Ia=r(Io);H(ao.$$.fragment,Ia),Ia.forEach(o),Fa.forEach(o),Ht=h(lt),Oo=n(lt,"SPAN",{});var Oa=r(Oo);St=l(Oa,"HfFileMetadata"),Oa.forEach(o),lt.forEach(o),Ko=h(t),ue=n(t,"DIV",{class:!0});var vo=r(ue);H(no.$$.fragment,vo),qt=h(vo),Ho=n(vo,"P",{});var Ha=r(Ho);Ct=l(Ha,"Data structure containing information about a file versioned on the Hub."),Ha.forEach(o),Rt=h(vo),ro=n(vo,"P",{});var st=r(ro);Ut=l(st,"Returned by "),go=n(st,"A",{href:!0});var Sa=r(go);jt=l(Sa,"get_hf_file_metadata()"),Sa.forEach(o),Mt=l(st," based on a URL."),st.forEach(o),vo.forEach(o),Jo=h(t),Fe=n(t,"H2",{class:!0});var dt=r(Fe);Ge=n(dt,"A",{id:!0,class:!0,href:!0});var qa=r(Ge);So=n(qa,"SPAN",{});var Ca=r(So);H(io.$$.fragment,Ca),Ca.forEach(o),qa.forEach(o),Vt=h(dt),qo=n(dt,"SPAN",{});var Ra=r(qo);Bt=l(Ra,"Caching"),Ra.forEach(o),dt.forEach(o),Qo=h(t),_o=n(t,"P",{});var Ua=r(_o);Gt=l(Ua,`The methods displayed above are designed to work with a caching system that prevents
re-downloading files. The caching system was updated in v0.8.0 to become the central
cache-system shared across libraries that depend on the Hub.`),Ua.forEach(o),Xo=h(t),ze=n(t,"P",{});var ht=r(ze);zt=l(ht,"Read the "),mo=n(ht,"A",{href:!0});var ja=r(mo);Wt=l(ja,"cache-system guide"),ja.forEach(o),Kt=l(ht,` for a detailed presentation of caching at
at HF.`),ht.forEach(o),this.h()},h(){s(_,"name","hf:doc:metadata"),s(_,"content",JSON.stringify(on)),s(c,"id","downloading-files"),s(c,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(c,"href","#downloading-files"),s(v,"class","relative group"),s(k,"id","download-a-single-file"),s(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(k,"href","#download-a-single-file"),s(A,"class","relative group"),s(x,"id","huggingface_hub.hf_hub_download"),s(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(x,"href","#huggingface_hub.hf_hub_download"),s(N,"class","relative group"),s(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(se,"id","huggingface_hub.hf_hub_url"),s(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(se,"href","#huggingface_hub.hf_hub_url"),s(le,"class","relative group"),s(Xe,"href","https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag"),s(Xe,"rel","nofollow"),s(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Ue,"id","huggingface_hub.snapshot_download"),s(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(Ue,"href","#huggingface_hub.snapshot_download"),s(Te,"class","relative group"),s(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Me,"id","get-metadata-about-a-file"),s(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(Me,"href","#get-metadata-about-a-file"),s(Ae,"class","relative group"),s(Ve,"id","huggingface_hub.get_hf_file_metadata"),s(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(Ve,"href","#huggingface_hub.get_hf_file_metadata"),s(De,"class","relative group"),s(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Be,"id","huggingface_hub.HfFileMetadata"),s(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(Be,"href","#huggingface_hub.HfFileMetadata"),s(Pe,"class","relative group"),s(go,"href","/docs/huggingface_hub/main/en/package_reference/file_download#huggingface_hub.get_hf_file_metadata"),s(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(Ge,"id","caching"),s(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(Ge,"href","#caching"),s(Fe,"class","relative group"),s(mo,"href","../how-to-cache")},m(t,p){e(document.head,_),f(t,L,p),f(t,v,p),e(v,c),e(c,m),S(u,m,null),e(v,w),e(v,j),e(j,B),f(t,E,p),f(t,A,p),e(A,k),e(k,M),S($,M,null),e(A,g),e(A,y),e(y,K),f(t,G,p),f(t,N,p),e(N,x),e(x,D),S(F,D,null),e(N,he),e(N,Z),e(Z,I),f(t,P,p),f(t,b,p),S(V,b,null),e(b,ge),e(b,J),e(J,_e),e(b,ce),e(b,ae),e(ae,ee),e(b,Q),e(b,X),e(X,ne),e(ne,We),e(X,me),e(X,oe),e(oe,Ke),e(oe,te),e(te,Ee),e(Ee,be),e(te,ve),e(te,$e),e($e,Je),e(te,z),e(te,re),e(re,U),e(b,xe),e(b,Oe),e(Oe,so),e(b,ho),S(ie,b,null),f(t,Qe,p),f(t,le,p),e(le,se),e(se,He),S(we,He,null),e(le,ke),e(le,Se),e(Se,co),f(t,qe,p),f(t,T,p),S(fe,T,null),e(T,fo),e(T,Ne),e(Ne,uo),e(T,ct),e(T,wo),e(wo,ft),e(T,ut),S(Ce,T,null),e(T,pt),S(Re,T,null),e(T,gt),e(T,yo),e(yo,_t),e(T,mt),e(T,Eo),e(Eo,po),e(po,bt),e(po,Xe),e(Xe,vt),f(t,Mo,p),f(t,Te,p),e(Te,Ue),e(Ue,$o),S(Ye,$o,null),e(Te,wt),e(Te,xo),e(xo,yt),f(t,Vo,p),f(t,W,p),S(Ze,W,null),e(W,Et),e(W,ko),e(ko,$t),e(W,xt),e(W,No),e(No,kt),e(W,Nt),e(W,To),e(To,Tt),e(W,At),S(je,W,null),f(t,Bo,p),f(t,Ae,p),e(Ae,Me),e(Me,Ao),S(eo,Ao,null),e(Ae,Dt),e(Ae,Do),e(Do,Lt),f(t,Go,p),f(t,De,p),e(De,Ve),e(Ve,Lo),S(oo,Lo,null),e(De,Pt),e(De,Po),e(Po,Ft),f(t,zo,p),f(t,Le,p),S(to,Le,null),e(Le,It),e(Le,Fo),e(Fo,Ot),f(t,Wo,p),f(t,Pe,p),e(Pe,Be),e(Be,Io),S(ao,Io,null),e(Pe,Ht),e(Pe,Oo),e(Oo,St),f(t,Ko,p),f(t,ue,p),S(no,ue,null),e(ue,qt),e(ue,Ho),e(Ho,Ct),e(ue,Rt),e(ue,ro),e(ro,Ut),e(ro,go),e(go,jt),e(ro,Mt),f(t,Jo,p),f(t,Fe,p),e(Fe,Ge),e(Ge,So),S(io,So,null),e(Fe,Vt),e(Fe,qo),e(qo,Bt),f(t,Qo,p),f(t,_o,p),e(_o,Gt),f(t,Xo,p),f(t,ze,p),e(ze,zt),e(ze,mo),e(mo,Wt),e(ze,Kt),Yo=!0},p(t,[p]){const lo={};p&2&&(lo.$$scope={dirty:p,ctx:t}),ie.$set(lo);const Co={};p&2&&(Co.$$scope={dirty:p,ctx:t}),Ce.$set(Co);const Ro={};p&2&&(Ro.$$scope={dirty:p,ctx:t}),Re.$set(Ro);const Uo={};p&2&&(Uo.$$scope={dirty:p,ctx:t}),je.$set(Uo)},i(t){Yo||(q(u.$$.fragment,t),q($.$$.fragment,t),q(F.$$.fragment,t),q(V.$$.fragment,t),q(ie.$$.fragment,t),q(we.$$.fragment,t),q(fe.$$.fragment,t),q(Ce.$$.fragment,t),q(Re.$$.fragment,t),q(Ye.$$.fragment,t),q(Ze.$$.fragment,t),q(je.$$.fragment,t),q(eo.$$.fragment,t),q(oo.$$.fragment,t),q(to.$$.fragment,t),q(ao.$$.fragment,t),q(no.$$.fragment,t),q(io.$$.fragment,t),Yo=!0)},o(t){C(u.$$.fragment,t),C($.$$.fragment,t),C(F.$$.fragment,t),C(V.$$.fragment,t),C(ie.$$.fragment,t),C(we.$$.fragment,t),C(fe.$$.fragment,t),C(Ce.$$.fragment,t),C(Re.$$.fragment,t),C(Ye.$$.fragment,t),C(Ze.$$.fragment,t),C(je.$$.fragment,t),C(eo.$$.fragment,t),C(oo.$$.fragment,t),C(to.$$.fragment,t),C(ao.$$.fragment,t),C(no.$$.fragment,t),C(io.$$.fragment,t),Yo=!1},d(t){o(_),t&&o(L),t&&o(v),R(u),t&&o(E),t&&o(A),R($),t&&o(G),t&&o(N),R(F),t&&o(P),t&&o(b),R(V),R(ie),t&&o(Qe),t&&o(le),R(we),t&&o(qe),t&&o(T),R(fe),R(Ce),R(Re),t&&o(Mo),t&&o(Te),R(Ye),t&&o(Vo),t&&o(W),R(Ze),R(je),t&&o(Bo),t&&o(Ae),R(eo),t&&o(Go),t&&o(De),R(oo),t&&o(zo),t&&o(Le),R(to),t&&o(Wo),t&&o(Pe),R(ao),t&&o(Ko),t&&o(ue),R(no),t&&o(Jo),t&&o(Fe),R(io),t&&o(Qo),t&&o(_o),t&&o(Xo),t&&o(ze)}}}const on={local:"downloading-files",sections:[{local:"download-a-single-file",sections:[{local:"huggingface_hub.hf_hub_download",title:"hf_hub_download"},{local:"huggingface_hub.hf_hub_url",title:"hf_hub_url"}],title:"Download a single file"},{local:"huggingface_hub.snapshot_download",title:"Download a snapshot of the repo"},{local:"get-metadata-about-a-file",sections:[{local:"huggingface_hub.get_hf_file_metadata",title:"get_hf_file_metadata"},{local:"huggingface_hub.HfFileMetadata",title:"HfFileMetadata"}],title:"Get metadata about a file"},{local:"caching",title:"Caching"}],title:"Downloading files"};function tn(pe){return za(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class hn extends Ma{constructor(_){super();Va(this,_,tn,en,Ba,{})}}export{hn as default,on as metadata};
