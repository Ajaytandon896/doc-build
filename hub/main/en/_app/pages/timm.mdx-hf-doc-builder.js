import{S as Oo,i as So,s as Lo,e as o,k as h,w as b,t as a,N as Do,c as r,d as s,m as p,a as i,x as _,h as l,b as n,P as Ye,G as t,g as c,y as v,L as Go,q as w,o as y,B as $,v as Fo}from"../chunks/vendor-hf-doc-builder.js";import{I as Je}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as He}from"../chunks/CodeBlock-hf-doc-builder.js";function No(jl){let P,At,H,N,Ve,ee,js,We,ks,Pt,I,Ke,As,Ps,te,Hs,Is,Ht,u,qs,Xe,Ts,Cs,Qe,Os,Ss,Ze,Ls,Ds,se,Gs,Fs,It,k,Ns,et,Us,Ms,ae,Bs,Rs,qt,Ie,zs,Tt,E,le,Ys,qe,Js,Vs,Ws,oe,Ks,tt,Xs,Qs,Zs,re,ea,Te,ta,sa,aa,ie,la,Ce,oa,ra,Ct,q,U,st,ne,ia,at,na,Ot,d,ma,lt,ca,ha,ot,pa,fa,rt,da,ua,it,ga,ba,nt,_a,va,St,me,Lt,M,wa,mt,ya,$a,Dt,T,Oe,kl,Ea,Se,Al,Gt,C,Le,Pl,xa,De,Hl,Ft,O,B,ct,ce,ja,ht,ka,Nt,R,Aa,pt,Pa,Ha,Ut,he,Mt,Ge,Ia,Bt,pe,Rt,S,z,ft,fe,qa,dt,Ta,zt,Y,Ca,ut,Oa,Sa,Yt,Fe,La,Jt,de,Vt,J,Da,gt,Ga,Fa,Wt,ue,Kt,V,Na,bt,Ua,Ma,Xt,ge,Qt,L,W,_t,be,Ba,vt,Ra,Zt,f,za,wt,Ya,Ja,Ne,Va,Wa,_e,Ka,Xa,yt,Qa,Za,Ue,el,tl,$t,sl,al,es,D,Me,Il,ll,Be,ql,ts,ve,ss,G,K,Et,we,ol,xt,rl,as,x,ye,il,$e,nl,ml,cl,Ee,hl,xe,pl,fl,dl,F,ul,je,gl,bl,ke,_l,vl,wl,X,Ae,yl,$l,Pe,El,xl,ls;return ee=new Je({}),ne=new Je({}),me=new He({props:{code:`import timm

# Loading https://huggingface.co/timm/eca_nfnet_l0
model = timm.create_model("hf-hub:timm/eca_nfnet_l0", pretrained=True)`,highlighted:`<span class="hljs-keyword">import</span> timm

<span class="hljs-comment"># Loading https://huggingface.co/timm/eca_nfnet_l0</span>
model = timm.create_model(<span class="hljs-string">&quot;hf-hub:timm/eca_nfnet_l0&quot;</span>, pretrained=<span class="hljs-literal">True</span>)`}}),ce=new Je({}),he=new He({props:{code:`import timm
import torch
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

# Load from Hub \u{1F525}
model = timm.create_model(
    'hf-hub:nateraw/resnet50-oxford-iiit-pet',
    pretrained=True
)

# Set model to eval mode for inference
model.eval()

# Create Transform
transform = create_transform(**resolve_data_config(model.pretrained_cfg, model=model))

# Get the labels from the model config
labels = model.pretrained_cfg['labels']
top_k = min(len(labels), 5)

# Use your own image file here...
image = Image.open('boxer.jpg').convert('RGB')

# Process PIL image with transforms and add a batch dimension
x = transform(image).unsqueeze(0)

# Pass inputs to model forward function to get outputs
out = model(x)

# Apply softmax to get predicted probabilities for each class
probabilities = torch.nn.functional.softmax(out[0], dim=0)

# Grab the values and indices of top 5 predicted classes
values, indices = torch.topk(probabilities, top_k)

# Prepare a nice dict of top k predictions
predictions = [
    {"label": labels[i], "score": v.item()}
    for i, v in zip(indices, values)
]
print(predictions)`,highlighted:`<span class="hljs-keyword">import</span> timm
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-comment"># Load from Hub \u{1F525}</span>
model = timm.create_model(
    <span class="hljs-string">&#x27;hf-hub:nateraw/resnet50-oxford-iiit-pet&#x27;</span>,
    pretrained=<span class="hljs-literal">True</span>
)

<span class="hljs-comment"># Set model to eval mode for inference</span>
model.<span class="hljs-built_in">eval</span>()

<span class="hljs-comment"># Create Transform</span>
transform = create_transform(**resolve_data_config(model.pretrained_cfg, model=model))

<span class="hljs-comment"># Get the labels from the model config</span>
labels = model.pretrained_cfg[<span class="hljs-string">&#x27;labels&#x27;</span>]
top_k = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(labels), <span class="hljs-number">5</span>)

<span class="hljs-comment"># Use your own image file here...</span>
image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;boxer.jpg&#x27;</span>).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)

<span class="hljs-comment"># Process PIL image with transforms and add a batch dimension</span>
x = transform(image).unsqueeze(<span class="hljs-number">0</span>)

<span class="hljs-comment"># Pass inputs to model forward function to get outputs</span>
out = model(x)

<span class="hljs-comment"># Apply softmax to get predicted probabilities for each class</span>
probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)

<span class="hljs-comment"># Grab the values and indices of top 5 predicted classes</span>
values, indices = torch.topk(probabilities, top_k)

<span class="hljs-comment"># Prepare a nice dict of top k predictions</span>
predictions = [
    {<span class="hljs-string">&quot;label&quot;</span>: labels[i], <span class="hljs-string">&quot;score&quot;</span>: v.item()}
    <span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(indices, values)
]
<span class="hljs-built_in">print</span>(predictions)`}}),pe=new He({props:{code:`[
    {'label': 'american_pit_bull_terrier', 'score': 0.9999998807907104},
    {'label': 'staffordshire_bull_terrier', 'score': 1.0000000149011612e-07},
    {'label': 'miniature_pinscher', 'score': 1.0000000149011612e-07},
    {'label': 'chihuahua', 'score': 1.0000000149011612e-07},
    {'label': 'beagle', 'score': 1.0000000149011612e-07}
]`,highlighted:`[
    {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;american_pit_bull_terrier&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9999998807907104</span>},
    {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;staffordshire_bull_terrier&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.0000000149011612e-07</span>},
    {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;miniature_pinscher&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.0000000149011612e-07</span>},
    {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;chihuahua&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.0000000149011612e-07</span>},
    {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;beagle&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">1.0000000149011612e-07</span>}
]`}}),fe=new Je({}),de=new He({props:{code:`python -m pip install huggingface_hub
huggingface-cli login`,highlighted:`python -m pip install huggingface_hub
huggingface-cli login`}}),ue=new He({props:{code:`from huggingface_hub import notebook_login
notebook_login()`,highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login
notebook_login()`}}),ge=new He({props:{code:`import timm

# Build or load a model, e.g. timm's pretrained resnet18
model = timm.create_model('resnet18', pretrained=True, num_classes=4)

###########################
# [Fine tune your model...]
###########################

# Push it to the \u{1F917} Hub
timm.models.hub.push_to_hf_hub(
    model,
    'resnet18-random-classifier',
    model_config={'labels': ['a', 'b', 'c', 'd']}
)

# Load your model from the Hub
model_reloaded = timm.create_model(
    'hf-hub:<your-username>/resnet18-random-classifier',
    pretrained=True
)`,highlighted:`<span class="hljs-keyword">import</span> timm

<span class="hljs-comment"># Build or load a model, e.g. timm&#x27;s pretrained resnet18</span>
model = timm.create_model(<span class="hljs-string">&#x27;resnet18&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=<span class="hljs-number">4</span>)

<span class="hljs-comment">###########################</span>
<span class="hljs-comment"># [Fine tune your model...]</span>
<span class="hljs-comment">###########################</span>

<span class="hljs-comment"># Push it to the \u{1F917} Hub</span>
timm.models.hub.push_to_hf_hub(
    model,
    <span class="hljs-string">&#x27;resnet18-random-classifier&#x27;</span>,
    model_config={<span class="hljs-string">&#x27;labels&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]}
)

<span class="hljs-comment"># Load your model from the Hub</span>
model_reloaded = timm.create_model(
    <span class="hljs-string">&#x27;hf-hub:&lt;your-username&gt;/resnet18-random-classifier&#x27;</span>,
    pretrained=<span class="hljs-literal">True</span>
)`}}),be=new Je({}),ve=new He({props:{code:`curl https://api-inference.huggingface.co/models/nateraw/timm-resnet50-beans \\
        -X POST \\
        --data-binary '@beans.jpeg' \\
        -H "Authorization: Bearer {$HF_API_TOKEN}"
# [{"label":"angular_leaf_spot","score":0.9845947027206421},{"label":"bean_rust","score":0.01368315052241087},{"label":"healthy","score":0.001722085871733725}]`,highlighted:`curl https://api-inference.huggingface.co/models/nateraw/timm-resnet50-beans \\
        -X POST \\
        --data-binary <span class="hljs-string">&#x27;@beans.jpeg&#x27;</span> \\
        -H <span class="hljs-string">&quot;Authorization: Bearer {<span class="hljs-variable">$HF_API_TOKEN</span>}&quot;</span>
<span class="hljs-comment"># [{&quot;label&quot;:&quot;angular_leaf_spot&quot;,&quot;score&quot;:0.9845947027206421},{&quot;label&quot;:&quot;bean_rust&quot;,&quot;score&quot;:0.01368315052241087},{&quot;label&quot;:&quot;healthy&quot;,&quot;score&quot;:0.001722085871733725}]</span>`}}),we=new Je({}),{c(){P=o("meta"),At=h(),H=o("h1"),N=o("a"),Ve=o("span"),b(ee.$$.fragment),js=h(),We=o("span"),ks=a("Using timm at Hugging Face"),Pt=h(),I=o("p"),Ke=o("code"),As=a("timm"),Ps=a(", also known as "),te=o("a"),Hs=a("pytorch-image-models"),Is=a(", is an open-source collection of state-of-the-art PyTorch image models, pretrained weights, and utility scripts for training, inference, and validation."),Ht=h(),u=o("p"),qs=a("This documentation focuses on "),Xe=o("code"),Ts=a("timm"),Cs=a(" functionality in the Hugging Face Hub instead of the "),Qe=o("code"),Os=a("timm"),Ss=a(" library itself. For detailed information about the "),Ze=o("code"),Ls=a("timm"),Ds=a(" library, visit "),se=o("a"),Gs=a("its documentation"),Fs=a("."),It=h(),k=o("p"),Ns=a("You can find a number of "),et=o("code"),Us=a("timm"),Ms=a(" models on the Hub using the filters on the left of the "),ae=o("a"),Bs=a("models page"),Rs=a("."),qt=h(),Ie=o("p"),zs=a("All models on the Hub come with several useful features:"),Tt=h(),E=o("ol"),le=o("li"),Ys=a("An automatically generated model card, which model authors can complete with "),qe=o("a"),Js=a("information about their model"),Vs=a("."),Ws=h(),oe=o("li"),Ks=a("Metadata tags help users discover the relevant "),tt=o("code"),Xs=a("timm"),Qs=a(" models."),Zs=h(),re=o("li"),ea=a("An "),Te=o("a"),ta=a("interactive widget"),sa=a(" you can use to play with the model directly in the browser."),aa=h(),ie=o("li"),la=a("An "),Ce=o("a"),oa=a("Inference API"),ra=a(" that allows users to make inference requests."),Ct=h(),q=o("h2"),U=o("a"),st=o("span"),b(ne.$$.fragment),ia=h(),at=o("span"),na=a("Using existing models from the Hub"),Ot=h(),d=o("p"),ma=a("Any "),lt=o("code"),ca=a("timm"),ha=a(" model from the Hugging Face Hub can be loaded with a single line of code as long as you have "),ot=o("code"),pa=a("timm"),fa=a(" installed! Once you\u2019ve selected a model from the Hub, pass the model\u2019s ID prefixed with "),rt=o("code"),da=a("hf-hub:"),ua=a(" to "),it=o("code"),ga=a("timm"),ba=a("\u2019s "),nt=o("code"),_a=a("create_model"),va=a(" method to download and instantiate the model."),St=h(),b(me.$$.fragment),Lt=h(),M=o("p"),wa=a("If you want to see how to load a specific model, you can click "),mt=o("strong"),ya=a("Use in timm"),$a=a(" and you will be given a working snippet to load it!"),Dt=h(),T=o("div"),Oe=o("img"),Ea=h(),Se=o("img"),Gt=h(),C=o("div"),Le=o("img"),xa=h(),De=o("img"),Ft=h(),O=o("h3"),B=o("a"),ct=o("span"),b(ce.$$.fragment),ja=h(),ht=o("span"),ka=a("Inference"),Nt=h(),R=o("p"),Aa=a("The snippet below shows how you can perform inference on a "),pt=o("code"),Pa=a("timm"),Ha=a(" model loaded from the Hub:"),Ut=h(),b(he.$$.fragment),Mt=h(),Ge=o("p"),Ia=a("This should leave you with a list of predictions, like this:"),Bt=h(),b(pe.$$.fragment),Rt=h(),S=o("h2"),z=o("a"),ft=o("span"),b(fe.$$.fragment),qa=h(),dt=o("span"),Ta=a("Sharing your models"),zt=h(),Y=o("p"),Ca=a("You can share your "),ut=o("code"),Oa=a("timm"),Sa=a(" models directly to the Hugging Face Hub. This will publish a new version of your model to the Hugging Face Hub, creating a model repo for you if it doesn\u2019t already exist."),Yt=h(),Fe=o("p"),La=a("Before pushing a model, make sure that you\u2019ve logged in to Hugging Face:"),Jt=h(),b(de.$$.fragment),Vt=h(),J=o("p"),Da=a("Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, once you\u2019ve installed "),gt=o("code"),Ga=a("huggingface_hub"),Fa=a(" you can log in with:"),Wt=h(),b(ue.$$.fragment),Kt=h(),V=o("p"),Na=a("Then, push your model using the "),bt=o("code"),Ua=a("push_to_hf_hub"),Ma=a(" method:"),Xt=h(),b(ge.$$.fragment),Qt=h(),L=o("h2"),W=o("a"),_t=o("span"),b(be.$$.fragment),Ba=h(),vt=o("span"),Ra=a("Inference Widget and API"),Zt=h(),f=o("p"),za=a("All "),wt=o("code"),Ya=a("timm"),Ja=a(" models on the Hub are automatically equipped with an "),Ne=o("a"),Va=a("inference widget"),Wa=a(", pictured below for "),_e=o("a"),Ka=a("nateraw/timm-resnet50-beans"),Xa=a(". Additionally, "),yt=o("code"),Qa=a("timm"),Za=a(" models are available through the "),Ue=o("a"),el=a("Inference API"),tl=a(", which you can access through HTTP with cURL, Python\u2019s "),$t=o("code"),sl=a("requests"),al=a(" library, or your preferred method for making network requests."),es=h(),D=o("div"),Me=o("img"),ll=h(),Be=o("img"),ts=h(),b(ve.$$.fragment),ss=h(),G=o("h2"),K=o("a"),Et=o("span"),b(we.$$.fragment),ol=h(),xt=o("span"),rl=a("Additional resources"),as=h(),x=o("ul"),ye=o("li"),il=a("timm (pytorch-image-models) "),$e=o("a"),nl=a("GitHub Repo"),ml=a("."),cl=h(),Ee=o("li"),hl=a("timm "),xe=o("a"),pl=a("documentation"),fl=a("."),dl=h(),F=o("li"),ul=a("Additional documentation at "),je=o("a"),gl=a("timmdocs"),bl=a(" by "),ke=o("a"),_l=a("Aman Arora"),vl=a("."),wl=h(),X=o("li"),Ae=o("a"),yl=a("Getting Started with PyTorch Image Models (timm): A Practitioner\u2019s Guide"),$l=a(" by "),Pe=o("a"),El=a("Chris Hughes"),xl=a("."),this.h()},l(e){const m=Do('[data-svelte="svelte-1phssyn"]',document.head);P=r(m,"META",{name:!0,content:!0}),m.forEach(s),At=p(e),H=r(e,"H1",{class:!0});var os=i(H);N=r(os,"A",{id:!0,class:!0,href:!0});var Tl=i(N);Ve=r(Tl,"SPAN",{});var Cl=i(Ve);_(ee.$$.fragment,Cl),Cl.forEach(s),Tl.forEach(s),js=p(os),We=r(os,"SPAN",{});var Ol=i(We);ks=l(Ol,"Using timm at Hugging Face"),Ol.forEach(s),os.forEach(s),Pt=p(e),I=r(e,"P",{});var jt=i(I);Ke=r(jt,"CODE",{});var Sl=i(Ke);As=l(Sl,"timm"),Sl.forEach(s),Ps=l(jt,", also known as "),te=r(jt,"A",{href:!0,rel:!0});var Ll=i(te);Hs=l(Ll,"pytorch-image-models"),Ll.forEach(s),Is=l(jt,", is an open-source collection of state-of-the-art PyTorch image models, pretrained weights, and utility scripts for training, inference, and validation."),jt.forEach(s),Ht=p(e),u=r(e,"P",{});var A=i(u);qs=l(A,"This documentation focuses on "),Xe=r(A,"CODE",{});var Dl=i(Xe);Ts=l(Dl,"timm"),Dl.forEach(s),Cs=l(A," functionality in the Hugging Face Hub instead of the "),Qe=r(A,"CODE",{});var Gl=i(Qe);Os=l(Gl,"timm"),Gl.forEach(s),Ss=l(A," library itself. For detailed information about the "),Ze=r(A,"CODE",{});var Fl=i(Ze);Ls=l(Fl,"timm"),Fl.forEach(s),Ds=l(A," library, visit "),se=r(A,"A",{href:!0,rel:!0});var Nl=i(se);Gs=l(Nl,"its documentation"),Nl.forEach(s),Fs=l(A,"."),A.forEach(s),It=p(e),k=r(e,"P",{});var Re=i(k);Ns=l(Re,"You can find a number of "),et=r(Re,"CODE",{});var Ul=i(et);Us=l(Ul,"timm"),Ul.forEach(s),Ms=l(Re," models on the Hub using the filters on the left of the "),ae=r(Re,"A",{href:!0,rel:!0});var Ml=i(ae);Bs=l(Ml,"models page"),Ml.forEach(s),Rs=l(Re,"."),Re.forEach(s),qt=p(e),Ie=r(e,"P",{});var Bl=i(Ie);zs=l(Bl,"All models on the Hub come with several useful features:"),Bl.forEach(s),Tt=p(e),E=r(e,"OL",{});var Q=i(E);le=r(Q,"LI",{});var rs=i(le);Ys=l(rs,"An automatically generated model card, which model authors can complete with "),qe=r(rs,"A",{href:!0});var Rl=i(qe);Js=l(Rl,"information about their model"),Rl.forEach(s),Vs=l(rs,"."),rs.forEach(s),Ws=p(Q),oe=r(Q,"LI",{});var is=i(oe);Ks=l(is,"Metadata tags help users discover the relevant "),tt=r(is,"CODE",{});var zl=i(tt);Xs=l(zl,"timm"),zl.forEach(s),Qs=l(is," models."),is.forEach(s),Zs=p(Q),re=r(Q,"LI",{});var ns=i(re);ea=l(ns,"An "),Te=r(ns,"A",{href:!0});var Yl=i(Te);ta=l(Yl,"interactive widget"),Yl.forEach(s),sa=l(ns," you can use to play with the model directly in the browser."),ns.forEach(s),aa=p(Q),ie=r(Q,"LI",{});var ms=i(ie);la=l(ms,"An "),Ce=r(ms,"A",{href:!0});var Jl=i(Ce);oa=l(Jl,"Inference API"),Jl.forEach(s),ra=l(ms," that allows users to make inference requests."),ms.forEach(s),Q.forEach(s),Ct=p(e),q=r(e,"H2",{class:!0});var cs=i(q);U=r(cs,"A",{id:!0,class:!0,href:!0});var Vl=i(U);st=r(Vl,"SPAN",{});var Wl=i(st);_(ne.$$.fragment,Wl),Wl.forEach(s),Vl.forEach(s),ia=p(cs),at=r(cs,"SPAN",{});var Kl=i(at);na=l(Kl,"Using existing models from the Hub"),Kl.forEach(s),cs.forEach(s),Ot=p(e),d=r(e,"P",{});var j=i(d);ma=l(j,"Any "),lt=r(j,"CODE",{});var Xl=i(lt);ca=l(Xl,"timm"),Xl.forEach(s),ha=l(j," model from the Hugging Face Hub can be loaded with a single line of code as long as you have "),ot=r(j,"CODE",{});var Ql=i(ot);pa=l(Ql,"timm"),Ql.forEach(s),fa=l(j," installed! Once you\u2019ve selected a model from the Hub, pass the model\u2019s ID prefixed with "),rt=r(j,"CODE",{});var Zl=i(rt);da=l(Zl,"hf-hub:"),Zl.forEach(s),ua=l(j," to "),it=r(j,"CODE",{});var eo=i(it);ga=l(eo,"timm"),eo.forEach(s),ba=l(j,"\u2019s "),nt=r(j,"CODE",{});var to=i(nt);_a=l(to,"create_model"),to.forEach(s),va=l(j," method to download and instantiate the model."),j.forEach(s),St=p(e),_(me.$$.fragment,e),Lt=p(e),M=r(e,"P",{});var hs=i(M);wa=l(hs,"If you want to see how to load a specific model, you can click "),mt=r(hs,"STRONG",{});var so=i(mt);ya=l(so,"Use in timm"),so.forEach(s),$a=l(hs," and you will be given a working snippet to load it!"),hs.forEach(s),Dt=p(e),T=r(e,"DIV",{class:!0});var ps=i(T);Oe=r(ps,"IMG",{class:!0,src:!0}),Ea=p(ps),Se=r(ps,"IMG",{class:!0,src:!0}),ps.forEach(s),Gt=p(e),C=r(e,"DIV",{class:!0});var fs=i(C);Le=r(fs,"IMG",{class:!0,src:!0}),xa=p(fs),De=r(fs,"IMG",{class:!0,src:!0}),fs.forEach(s),Ft=p(e),O=r(e,"H3",{class:!0});var ds=i(O);B=r(ds,"A",{id:!0,class:!0,href:!0});var ao=i(B);ct=r(ao,"SPAN",{});var lo=i(ct);_(ce.$$.fragment,lo),lo.forEach(s),ao.forEach(s),ja=p(ds),ht=r(ds,"SPAN",{});var oo=i(ht);ka=l(oo,"Inference"),oo.forEach(s),ds.forEach(s),Nt=p(e),R=r(e,"P",{});var us=i(R);Aa=l(us,"The snippet below shows how you can perform inference on a "),pt=r(us,"CODE",{});var ro=i(pt);Pa=l(ro,"timm"),ro.forEach(s),Ha=l(us," model loaded from the Hub:"),us.forEach(s),Ut=p(e),_(he.$$.fragment,e),Mt=p(e),Ge=r(e,"P",{});var io=i(Ge);Ia=l(io,"This should leave you with a list of predictions, like this:"),io.forEach(s),Bt=p(e),_(pe.$$.fragment,e),Rt=p(e),S=r(e,"H2",{class:!0});var gs=i(S);z=r(gs,"A",{id:!0,class:!0,href:!0});var no=i(z);ft=r(no,"SPAN",{});var mo=i(ft);_(fe.$$.fragment,mo),mo.forEach(s),no.forEach(s),qa=p(gs),dt=r(gs,"SPAN",{});var co=i(dt);Ta=l(co,"Sharing your models"),co.forEach(s),gs.forEach(s),zt=p(e),Y=r(e,"P",{});var bs=i(Y);Ca=l(bs,"You can share your "),ut=r(bs,"CODE",{});var ho=i(ut);Oa=l(ho,"timm"),ho.forEach(s),Sa=l(bs," models directly to the Hugging Face Hub. This will publish a new version of your model to the Hugging Face Hub, creating a model repo for you if it doesn\u2019t already exist."),bs.forEach(s),Yt=p(e),Fe=r(e,"P",{});var po=i(Fe);La=l(po,"Before pushing a model, make sure that you\u2019ve logged in to Hugging Face:"),po.forEach(s),Jt=p(e),_(de.$$.fragment,e),Vt=p(e),J=r(e,"P",{});var _s=i(J);Da=l(_s,"Alternatively, if you prefer working from a Jupyter or Colaboratory notebook, once you\u2019ve installed "),gt=r(_s,"CODE",{});var fo=i(gt);Ga=l(fo,"huggingface_hub"),fo.forEach(s),Fa=l(_s," you can log in with:"),_s.forEach(s),Wt=p(e),_(ue.$$.fragment,e),Kt=p(e),V=r(e,"P",{});var vs=i(V);Na=l(vs,"Then, push your model using the "),bt=r(vs,"CODE",{});var uo=i(bt);Ua=l(uo,"push_to_hf_hub"),uo.forEach(s),Ma=l(vs," method:"),vs.forEach(s),Xt=p(e),_(ge.$$.fragment,e),Qt=p(e),L=r(e,"H2",{class:!0});var ws=i(L);W=r(ws,"A",{id:!0,class:!0,href:!0});var go=i(W);_t=r(go,"SPAN",{});var bo=i(_t);_(be.$$.fragment,bo),bo.forEach(s),go.forEach(s),Ba=p(ws),vt=r(ws,"SPAN",{});var _o=i(vt);Ra=l(_o,"Inference Widget and API"),_o.forEach(s),ws.forEach(s),Zt=p(e),f=r(e,"P",{});var g=i(f);za=l(g,"All "),wt=r(g,"CODE",{});var vo=i(wt);Ya=l(vo,"timm"),vo.forEach(s),Ja=l(g," models on the Hub are automatically equipped with an "),Ne=r(g,"A",{href:!0});var wo=i(Ne);Va=l(wo,"inference widget"),wo.forEach(s),Wa=l(g,", pictured below for "),_e=r(g,"A",{href:!0,rel:!0});var yo=i(_e);Ka=l(yo,"nateraw/timm-resnet50-beans"),yo.forEach(s),Xa=l(g,". Additionally, "),yt=r(g,"CODE",{});var $o=i(yt);Qa=l($o,"timm"),$o.forEach(s),Za=l(g," models are available through the "),Ue=r(g,"A",{href:!0});var Eo=i(Ue);el=l(Eo,"Inference API"),Eo.forEach(s),tl=l(g,", which you can access through HTTP with cURL, Python\u2019s "),$t=r(g,"CODE",{});var xo=i($t);sl=l(xo,"requests"),xo.forEach(s),al=l(g," library, or your preferred method for making network requests."),g.forEach(s),es=p(e),D=r(e,"DIV",{class:!0});var ys=i(D);Me=r(ys,"IMG",{class:!0,src:!0}),ll=p(ys),Be=r(ys,"IMG",{class:!0,src:!0}),ys.forEach(s),ts=p(e),_(ve.$$.fragment,e),ss=p(e),G=r(e,"H2",{class:!0});var $s=i(G);K=r($s,"A",{id:!0,class:!0,href:!0});var jo=i(K);Et=r(jo,"SPAN",{});var ko=i(Et);_(we.$$.fragment,ko),ko.forEach(s),jo.forEach(s),ol=p($s),xt=r($s,"SPAN",{});var Ao=i(xt);rl=l(Ao,"Additional resources"),Ao.forEach(s),$s.forEach(s),as=p(e),x=r(e,"UL",{});var Z=i(x);ye=r(Z,"LI",{});var Es=i(ye);il=l(Es,"timm (pytorch-image-models) "),$e=r(Es,"A",{href:!0,rel:!0});var Po=i($e);nl=l(Po,"GitHub Repo"),Po.forEach(s),ml=l(Es,"."),Es.forEach(s),cl=p(Z),Ee=r(Z,"LI",{});var xs=i(Ee);hl=l(xs,"timm "),xe=r(xs,"A",{href:!0,rel:!0});var Ho=i(xe);pl=l(Ho,"documentation"),Ho.forEach(s),fl=l(xs,"."),xs.forEach(s),dl=p(Z),F=r(Z,"LI",{});var ze=i(F);ul=l(ze,"Additional documentation at "),je=r(ze,"A",{href:!0,rel:!0});var Io=i(je);gl=l(Io,"timmdocs"),Io.forEach(s),bl=l(ze," by "),ke=r(ze,"A",{href:!0,rel:!0});var qo=i(ke);_l=l(qo,"Aman Arora"),qo.forEach(s),vl=l(ze,"."),ze.forEach(s),wl=p(Z),X=r(Z,"LI",{});var kt=i(X);Ae=r(kt,"A",{href:!0,rel:!0});var To=i(Ae);yl=l(To,"Getting Started with PyTorch Image Models (timm): A Practitioner\u2019s Guide"),To.forEach(s),$l=l(kt," by "),Pe=r(kt,"A",{href:!0,rel:!0});var Co=i(Pe);El=l(Co,"Chris Hughes"),Co.forEach(s),xl=l(kt,"."),kt.forEach(s),Z.forEach(s),this.h()},h(){n(P,"name","hf:doc:metadata"),n(P,"content",JSON.stringify(Uo)),n(N,"id","using-timm-at-hugging-face"),n(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(N,"href","#using-timm-at-hugging-face"),n(H,"class","relative group"),n(te,"href","https://github.com/rwightman/pytorch-image-models"),n(te,"rel","nofollow"),n(se,"href","https://huggingface.co/docs/timm"),n(se,"rel","nofollow"),n(ae,"href","https://huggingface.co/models?library=timm&sort=downloads"),n(ae,"rel","nofollow"),n(qe,"href","./model-cards"),n(Te,"href","./models-widgets"),n(Ce,"href","./models-inference"),n(U,"id","using-existing-models-from-the-hub"),n(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(U,"href","#using-existing-models-from-the-hub"),n(q,"class","relative group"),n(Oe,"class","block dark:hidden"),Ye(Oe.src,kl="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_snippet1.png")||n(Oe,"src",kl),n(Se,"class","hidden dark:block"),Ye(Se.src,Al="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_snippet1-dark.png")||n(Se,"src",Al),n(T,"class","flex justify-center"),n(Le,"class","block dark:hidden"),Ye(Le.src,Pl="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_snippet2.png")||n(Le,"src",Pl),n(De,"class","hidden dark:block"),Ye(De.src,Hl="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_snippet2-dark.png")||n(De,"src",Hl),n(C,"class","flex justify-center"),n(B,"id","inference"),n(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(B,"href","#inference"),n(O,"class","relative group"),n(z,"id","sharing-your-models"),n(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(z,"href","#sharing-your-models"),n(S,"class","relative group"),n(W,"id","inference-widget-and-api"),n(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(W,"href","#inference-widget-and-api"),n(L,"class","relative group"),n(Ne,"href","./models-widgets"),n(_e,"href","https://huggingface.co/nateraw/timm-resnet50-beans"),n(_e,"rel","nofollow"),n(Ue,"href","./models-inference"),n(Me,"class","block dark:hidden"),Ye(Me.src,Il="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_widget.png")||n(Me,"src",Il),n(Be,"class","hidden dark:block"),Ye(Be.src,ql="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/libraries-timm_widget-dark.png")||n(Be,"src",ql),n(D,"class","flex justify-center"),n(K,"id","additional-resources"),n(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(K,"href","#additional-resources"),n(G,"class","relative group"),n($e,"href","https://github.com/rwightman/pytorch-image-models"),n($e,"rel","nofollow"),n(xe,"href","https://huggingface.co/docs/timm"),n(xe,"rel","nofollow"),n(je,"href","https://timm.fast.ai"),n(je,"rel","nofollow"),n(ke,"href","https://github.com/amaarora"),n(ke,"rel","nofollow"),n(Ae,"href","https://towardsdatascience.com/getting-started-with-pytorch-image-models-timm-a-practitioners-guide-4e77b4bf9055"),n(Ae,"rel","nofollow"),n(Pe,"href","https://github.com/Chris-hughes10"),n(Pe,"rel","nofollow")},m(e,m){t(document.head,P),c(e,At,m),c(e,H,m),t(H,N),t(N,Ve),v(ee,Ve,null),t(H,js),t(H,We),t(We,ks),c(e,Pt,m),c(e,I,m),t(I,Ke),t(Ke,As),t(I,Ps),t(I,te),t(te,Hs),t(I,Is),c(e,Ht,m),c(e,u,m),t(u,qs),t(u,Xe),t(Xe,Ts),t(u,Cs),t(u,Qe),t(Qe,Os),t(u,Ss),t(u,Ze),t(Ze,Ls),t(u,Ds),t(u,se),t(se,Gs),t(u,Fs),c(e,It,m),c(e,k,m),t(k,Ns),t(k,et),t(et,Us),t(k,Ms),t(k,ae),t(ae,Bs),t(k,Rs),c(e,qt,m),c(e,Ie,m),t(Ie,zs),c(e,Tt,m),c(e,E,m),t(E,le),t(le,Ys),t(le,qe),t(qe,Js),t(le,Vs),t(E,Ws),t(E,oe),t(oe,Ks),t(oe,tt),t(tt,Xs),t(oe,Qs),t(E,Zs),t(E,re),t(re,ea),t(re,Te),t(Te,ta),t(re,sa),t(E,aa),t(E,ie),t(ie,la),t(ie,Ce),t(Ce,oa),t(ie,ra),c(e,Ct,m),c(e,q,m),t(q,U),t(U,st),v(ne,st,null),t(q,ia),t(q,at),t(at,na),c(e,Ot,m),c(e,d,m),t(d,ma),t(d,lt),t(lt,ca),t(d,ha),t(d,ot),t(ot,pa),t(d,fa),t(d,rt),t(rt,da),t(d,ua),t(d,it),t(it,ga),t(d,ba),t(d,nt),t(nt,_a),t(d,va),c(e,St,m),v(me,e,m),c(e,Lt,m),c(e,M,m),t(M,wa),t(M,mt),t(mt,ya),t(M,$a),c(e,Dt,m),c(e,T,m),t(T,Oe),t(T,Ea),t(T,Se),c(e,Gt,m),c(e,C,m),t(C,Le),t(C,xa),t(C,De),c(e,Ft,m),c(e,O,m),t(O,B),t(B,ct),v(ce,ct,null),t(O,ja),t(O,ht),t(ht,ka),c(e,Nt,m),c(e,R,m),t(R,Aa),t(R,pt),t(pt,Pa),t(R,Ha),c(e,Ut,m),v(he,e,m),c(e,Mt,m),c(e,Ge,m),t(Ge,Ia),c(e,Bt,m),v(pe,e,m),c(e,Rt,m),c(e,S,m),t(S,z),t(z,ft),v(fe,ft,null),t(S,qa),t(S,dt),t(dt,Ta),c(e,zt,m),c(e,Y,m),t(Y,Ca),t(Y,ut),t(ut,Oa),t(Y,Sa),c(e,Yt,m),c(e,Fe,m),t(Fe,La),c(e,Jt,m),v(de,e,m),c(e,Vt,m),c(e,J,m),t(J,Da),t(J,gt),t(gt,Ga),t(J,Fa),c(e,Wt,m),v(ue,e,m),c(e,Kt,m),c(e,V,m),t(V,Na),t(V,bt),t(bt,Ua),t(V,Ma),c(e,Xt,m),v(ge,e,m),c(e,Qt,m),c(e,L,m),t(L,W),t(W,_t),v(be,_t,null),t(L,Ba),t(L,vt),t(vt,Ra),c(e,Zt,m),c(e,f,m),t(f,za),t(f,wt),t(wt,Ya),t(f,Ja),t(f,Ne),t(Ne,Va),t(f,Wa),t(f,_e),t(_e,Ka),t(f,Xa),t(f,yt),t(yt,Qa),t(f,Za),t(f,Ue),t(Ue,el),t(f,tl),t(f,$t),t($t,sl),t(f,al),c(e,es,m),c(e,D,m),t(D,Me),t(D,ll),t(D,Be),c(e,ts,m),v(ve,e,m),c(e,ss,m),c(e,G,m),t(G,K),t(K,Et),v(we,Et,null),t(G,ol),t(G,xt),t(xt,rl),c(e,as,m),c(e,x,m),t(x,ye),t(ye,il),t(ye,$e),t($e,nl),t(ye,ml),t(x,cl),t(x,Ee),t(Ee,hl),t(Ee,xe),t(xe,pl),t(Ee,fl),t(x,dl),t(x,F),t(F,ul),t(F,je),t(je,gl),t(F,bl),t(F,ke),t(ke,_l),t(F,vl),t(x,wl),t(x,X),t(X,Ae),t(Ae,yl),t(X,$l),t(X,Pe),t(Pe,El),t(X,xl),ls=!0},p:Go,i(e){ls||(w(ee.$$.fragment,e),w(ne.$$.fragment,e),w(me.$$.fragment,e),w(ce.$$.fragment,e),w(he.$$.fragment,e),w(pe.$$.fragment,e),w(fe.$$.fragment,e),w(de.$$.fragment,e),w(ue.$$.fragment,e),w(ge.$$.fragment,e),w(be.$$.fragment,e),w(ve.$$.fragment,e),w(we.$$.fragment,e),ls=!0)},o(e){y(ee.$$.fragment,e),y(ne.$$.fragment,e),y(me.$$.fragment,e),y(ce.$$.fragment,e),y(he.$$.fragment,e),y(pe.$$.fragment,e),y(fe.$$.fragment,e),y(de.$$.fragment,e),y(ue.$$.fragment,e),y(ge.$$.fragment,e),y(be.$$.fragment,e),y(ve.$$.fragment,e),y(we.$$.fragment,e),ls=!1},d(e){s(P),e&&s(At),e&&s(H),$(ee),e&&s(Pt),e&&s(I),e&&s(Ht),e&&s(u),e&&s(It),e&&s(k),e&&s(qt),e&&s(Ie),e&&s(Tt),e&&s(E),e&&s(Ct),e&&s(q),$(ne),e&&s(Ot),e&&s(d),e&&s(St),$(me,e),e&&s(Lt),e&&s(M),e&&s(Dt),e&&s(T),e&&s(Gt),e&&s(C),e&&s(Ft),e&&s(O),$(ce),e&&s(Nt),e&&s(R),e&&s(Ut),$(he,e),e&&s(Mt),e&&s(Ge),e&&s(Bt),$(pe,e),e&&s(Rt),e&&s(S),$(fe),e&&s(zt),e&&s(Y),e&&s(Yt),e&&s(Fe),e&&s(Jt),$(de,e),e&&s(Vt),e&&s(J),e&&s(Wt),$(ue,e),e&&s(Kt),e&&s(V),e&&s(Xt),$(ge,e),e&&s(Qt),e&&s(L),$(be),e&&s(Zt),e&&s(f),e&&s(es),e&&s(D),e&&s(ts),$(ve,e),e&&s(ss),e&&s(G),$(we),e&&s(as),e&&s(x)}}}const Uo={local:"using-timm-at-hugging-face",sections:[{local:"using-existing-models-from-the-hub",sections:[{local:"inference",title:"Inference"}],title:"Using existing models from the Hub"},{local:"sharing-your-models",title:"Sharing your models"},{local:"inference-widget-and-api",title:"Inference Widget and API"},{local:"additional-resources",title:"Additional resources"}],title:"Using timm at Hugging Face"};function Mo(jl){return Fo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Yo extends Oo{constructor(P){super();So(this,P,Mo,No,Lo,{})}}export{Yo as default,Uo as metadata};
