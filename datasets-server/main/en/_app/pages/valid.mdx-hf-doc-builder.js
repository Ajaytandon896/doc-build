import{S as Me,i as Ue,s as Be,F as Xe,e as m,c as $,a as g,d as r,b as w,g as h,H as Fe,I as ze,J as Ke,q,o as b,k as y,w as E,t as u,M as Qe,m as k,x as T,h as c,G as l,y as P,B as A,v as We,L as ie}from"../chunks/vendor-hf-doc-builder.js";import{I as Ye,C as Q}from"../chunks/CodeBlock-hf-doc-builder.js";import{I as Ze,M as Ie}from"../chunks/InferenceApi-hf-doc-builder.js";function et(i){let t,n;const e=i[3].default,a=Xe(e,i,i[2],null);return{c(){t=m("div"),a&&a.c(),this.h()},l(o){t=$(o,"DIV",{class:!0});var d=g(t);a&&a.l(d),d.forEach(r),this.h()},h(){w(t,"class","course-tip "+(i[0]==="orange"?"course-tip-orange":"")+" bg-gradient-to-br dark:bg-gradient-to-r before:border-"+i[0]+"-500 dark:before:border-"+i[0]+"-800 from-"+i[0]+"-50 dark:from-gray-900 to-white dark:to-gray-950 border border-"+i[0]+"-50 text-"+i[0]+"-700 dark:text-gray-400")},m(o,d){h(o,t,d),a&&a.m(t,null),n=!0},p(o,[d]){a&&a.p&&(!n||d&4)&&Fe(a,e,o,o[2],n?Ke(e,o[2],d,null):ze(o[2]),null)},i(o){n||(q(a,o),n=!0)},o(o){b(a,o),n=!1},d(o){o&&r(t),a&&a.d(o)}}}function tt(i,t,n){let{$$slots:e={},$$scope:a}=t,{warning:o=!1}=t;const d=o?"orange":"green";return i.$$set=v=>{"warning"in v&&n(1,o=v.warning),"$$scope"in v&&n(2,a=v.$$scope)},[d,o,a,e]}class st extends Me{constructor(t){super();Ue(this,t,tt,et,Be,{warning:1})}}function at(i){let t,n=" ",e,a,o,d,v;return{c(){t=u("Currently, only the"),e=u(n),a=y(),o=m("a"),d=u("streamable"),v=u(` datasets
  are supported, to allow extracting the 100 first rows without downloading the
  whole dataset.`),this.h()},l(f){t=c(f,"Currently, only the"),e=c(f,n),a=k(f),o=$(f,"A",{href:!0});var j=g(o);d=c(j,"streamable"),j.forEach(r),v=c(f,` datasets
  are supported, to allow extracting the 100 first rows without downloading the
  whole dataset.`),this.h()},h(){w(o,"href","https://huggingface.co/docs/datasets/stream")},m(f,j){h(f,t,j),h(f,e,j),h(f,a,j),h(f,o,j),l(o,d),h(f,v,j)},p:ie,d(f){f&&r(t),f&&r(e),f&&r(a),f&&r(o),f&&r(v)}}}function nt(i){let t,n;return t=new Q({props:{code:`import json
import requests
API_URL = "https://datasets-server.huggingface.co/valid"
def query():
    response = requests.request("GET", API_URL)
    return json.loads(response.content.decode("utf-8"))
data = query()`,highlighted:`<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> json.loads(response.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))
data = query()`}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p:ie,i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function rt(i){let t,n;return t=new Ie({props:{$$slots:{default:[nt]},$$scope:{ctx:i}}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p(e,a){const o={};a&2&&(o.$$scope={dirty:a,ctx:e}),t.$set(o)},i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function ot(i){let t,n;return t=new Q({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/valid",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p:ie,i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function lt(i){let t,n;return t=new Ie({props:{$$slots:{default:[ot]},$$scope:{ctx:i}}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p(e,a){const o={};a&2&&(o.$$scope={dirty:a,ctx:e}),t.$set(o)},i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function pt(i){let t,n;return t=new Q({props:{code:`curl https://datasets-server.huggingface.co/valid \\
        -X GET`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">valid</span> \\
        -X <span class="hljs-keyword">GET</span>`}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p:ie,i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function it(i){let t,n;return t=new Ie({props:{$$slots:{default:[pt]},$$scope:{ctx:i}}}),{c(){E(t.$$.fragment)},l(e){T(t.$$.fragment,e)},m(e,a){P(t,e,a),n=!0},p(e,a){const o={};a&2&&(o.$$scope={dirty:a,ctx:e}),t.$set(o)},i(e){n||(q(t.$$.fragment,e),n=!0)},o(e){b(t.$$.fragment,e),n=!1},d(e){A(t,e)}}}function ut(i){let t,n,e,a,o,d,v,f,j,W,S,ue,G,ce,fe,Y,R,Z,x,he,X,de,me,F,$e,ge,ee,N,te,U,we,se,_,_e,O,ve,je,L,ye,ke,H,qe,be,J,Ee,Te,ae,C,ne,D,Pe,z,Ae,xe,re,V,oe;return d=new Ye({}),R=new st({props:{warning:!0,$$slots:{default:[at]},$$scope:{ctx:i}}}),N=new Q({props:{code:"https://datasets-server.huggingface.co/valid",highlighted:'https:<span class="hljs-regexp">//</span>datasets-server.huggingface.co/valid'}}),C=new Ze({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[it],js:[lt],python:[rt]},$$scope:{ctx:i}}}),V=new Q({props:{code:`{
  "valid": [
    "0n1xus/codexglue",
    "0n1xus/pytorrent-standalone",
    "0x7194633/rupile",
    "51la5/keyword-extraction",
    ...
  ]
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;valid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;0n1xus/codexglue&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;0n1xus/pytorrent-standalone&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;0x7194633/rupile&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;51la5/keyword-extraction&quot;</span><span class="hljs-punctuation">,</span>
    ...
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>`}}),{c(){t=m("meta"),n=y(),e=m("h1"),a=m("a"),o=m("span"),E(d.$$.fragment),v=y(),f=m("span"),j=u("Valid datasets"),W=y(),S=m("p"),ue=u("Some Hub repositories cannot be loaded with the "),G=m("a"),ce=u("\u{1F917} Datasets"),fe=u(" library, for example because the data has still to be uploaded, or the format is not supported. The API endpoints will return an error for such datasets."),Y=y(),E(R.$$.fragment),Z=y(),x=m("p"),he=u("The "),X=m("code"),de=u("/valid"),me=u(" endpoint gives the "),F=m("strong"),$e=u("list of the Hub datasets"),ge=u(" that work without an error."),ee=y(),E(N.$$.fragment),te=y(),U=m("p"),we=u("The endpoint takes no query parameters."),se=y(),_=m("p"),_e=u("Try it in your "),O=m("a"),ve=u("browser"),je=u(", with "),L=m("a"),ye=u("Postman"),ke=u(", with "),H=m("a"),qe=u("RapidAPI"),be=u(", with "),J=m("a"),Ee=u("ReDoc"),Te=u(", or programmatically:"),ae=y(),E(C.$$.fragment),ne=y(),D=m("p"),Pe=u("The response is a JSON. The list of names of the valid datasets is nested under the "),z=m("code"),Ae=u("valid"),xe=u(" key:"),re=y(),E(V.$$.fragment),this.h()},l(s){const p=Qe('[data-svelte="svelte-1phssyn"]',document.head);t=$(p,"META",{name:!0,content:!0}),p.forEach(r),n=k(s),e=$(s,"H1",{class:!0});var M=g(e);a=$(M,"A",{id:!0,class:!0,href:!0});var K=g(a);o=$(K,"SPAN",{});var Se=g(o);T(d.$$.fragment,Se),Se.forEach(r),K.forEach(r),v=k(M),f=$(M,"SPAN",{});var Re=g(f);j=c(Re,"Valid datasets"),Re.forEach(r),M.forEach(r),W=k(s),S=$(s,"P",{});var le=g(S);ue=c(le,"Some Hub repositories cannot be loaded with the "),G=$(le,"A",{href:!0,rel:!0});var Ce=g(G);ce=c(Ce,"\u{1F917} Datasets"),Ce.forEach(r),fe=c(le," library, for example because the data has still to be uploaded, or the format is not supported. The API endpoints will return an error for such datasets."),le.forEach(r),Y=k(s),T(R.$$.fragment,s),Z=k(s),x=$(s,"P",{});var B=g(x);he=c(B,"The "),X=$(B,"CODE",{});var De=g(X);de=c(De,"/valid"),De.forEach(r),me=c(B," endpoint gives the "),F=$(B,"STRONG",{});var Ge=g(F);$e=c(Ge,"list of the Hub datasets"),Ge.forEach(r),ge=c(B," that work without an error."),B.forEach(r),ee=k(s),T(N.$$.fragment,s),te=k(s),U=$(s,"P",{});var Ne=g(U);we=c(Ne,"The endpoint takes no query parameters."),Ne.forEach(r),se=k(s),_=$(s,"P",{});var I=g(_);_e=c(I,"Try it in your "),O=$(I,"A",{href:!0,rel:!0});var Oe=g(O);ve=c(Oe,"browser"),Oe.forEach(r),je=c(I,", with "),L=$(I,"A",{href:!0,rel:!0});var Le=g(L);ye=c(Le,"Postman"),Le.forEach(r),ke=c(I,", with "),H=$(I,"A",{href:!0,rel:!0});var He=g(H);qe=c(He,"RapidAPI"),He.forEach(r),be=c(I,", with "),J=$(I,"A",{href:!0,rel:!0});var Je=g(J);Ee=c(Je,"ReDoc"),Je.forEach(r),Te=c(I,", or programmatically:"),I.forEach(r),ae=k(s),T(C.$$.fragment,s),ne=k(s),D=$(s,"P",{});var pe=g(D);Pe=c(pe,"The response is a JSON. The list of names of the valid datasets is nested under the "),z=$(pe,"CODE",{});var Ve=g(z);Ae=c(Ve,"valid"),Ve.forEach(r),xe=c(pe," key:"),pe.forEach(r),re=k(s),T(V.$$.fragment,s),this.h()},h(){w(t,"name","hf:doc:metadata"),w(t,"content",JSON.stringify(ct)),w(a,"id","valid-datasets"),w(a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(a,"href","#valid-datasets"),w(e,"class","relative group"),w(G,"href","https://github.com/huggingface/datasets"),w(G,"rel","nofollow"),w(O,"href","https://datasets-server.huggingface.co/valid"),w(O,"rel","nofollow"),w(L,"href","https://www.postman.com/huggingface/workspace/hugging-face-apis/request/23242779-17b761d0-b2b8-4638-a4f7-73be9049c324"),w(L,"rel","nofollow"),w(H,"href","https://rapidapi.com/hugging-face-hugging-face-default/api/hugging-face-datasets-api"),w(H,"rel","nofollow"),w(J,"href","https://redocly.github.io/redoc/?url=https://datasets-server.huggingface.co/openapi.json#operation/listValidDatasets"),w(J,"rel","nofollow")},m(s,p){l(document.head,t),h(s,n,p),h(s,e,p),l(e,a),l(a,o),P(d,o,null),l(e,v),l(e,f),l(f,j),h(s,W,p),h(s,S,p),l(S,ue),l(S,G),l(G,ce),l(S,fe),h(s,Y,p),P(R,s,p),h(s,Z,p),h(s,x,p),l(x,he),l(x,X),l(X,de),l(x,me),l(x,F),l(F,$e),l(x,ge),h(s,ee,p),P(N,s,p),h(s,te,p),h(s,U,p),l(U,we),h(s,se,p),h(s,_,p),l(_,_e),l(_,O),l(O,ve),l(_,je),l(_,L),l(L,ye),l(_,ke),l(_,H),l(H,qe),l(_,be),l(_,J),l(J,Ee),l(_,Te),h(s,ae,p),P(C,s,p),h(s,ne,p),h(s,D,p),l(D,Pe),l(D,z),l(z,Ae),l(D,xe),h(s,re,p),P(V,s,p),oe=!0},p(s,[p]){const M={};p&2&&(M.$$scope={dirty:p,ctx:s}),R.$set(M);const K={};p&2&&(K.$$scope={dirty:p,ctx:s}),C.$set(K)},i(s){oe||(q(d.$$.fragment,s),q(R.$$.fragment,s),q(N.$$.fragment,s),q(C.$$.fragment,s),q(V.$$.fragment,s),oe=!0)},o(s){b(d.$$.fragment,s),b(R.$$.fragment,s),b(N.$$.fragment,s),b(C.$$.fragment,s),b(V.$$.fragment,s),oe=!1},d(s){r(t),s&&r(n),s&&r(e),A(d),s&&r(W),s&&r(S),s&&r(Y),A(R,s),s&&r(Z),s&&r(x),s&&r(ee),A(N,s),s&&r(te),s&&r(U),s&&r(se),s&&r(_),s&&r(ae),A(C,s),s&&r(ne),s&&r(D),s&&r(re),A(V,s)}}}const ct={local:"valid-datasets",title:"Valid datasets"};function ft(i){return We(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $t extends Me{constructor(t){super();Ue(this,t,ft,ut,Be,{})}}export{$t as default,ct as metadata};
