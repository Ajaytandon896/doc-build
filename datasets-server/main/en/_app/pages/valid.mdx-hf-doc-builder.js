import{S as Ms,i as Xs,s as Vs,e as f,k as m,w as _,t as c,M as Fs,c as h,d as n,m as g,a as d,x as y,h as u,b as w,G as l,g as p,y as j,q as k,o as q,B as E,v as Qs,L as se}from"../chunks/vendor-hf-doc-builder.js";import{T as zs,I as Ks,M as oe}from"../chunks/InferenceApi-hf-doc-builder.js";import{I as Es}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as I}from"../chunks/CodeBlock-hf-doc-builder.js";function Ws($){let t,a=" ",e,r,i,b,O;return{c(){t=c("Currently, only "),e=c(a),r=m(),i=f("a"),b=c("streamable"),O=c(` datasets
  are supported so Datasets Server can extract the 100 first rows without downloading the
  whole dataset. This is especially useful for previewing large datasets where downloading
  the whole dataset may take hours!`),this.h()},l(v){t=u(v,"Currently, only "),e=u(v,a),r=g(v),i=h(v,"A",{href:!0});var A=d(i);b=u(A,"streamable"),A.forEach(n),O=u(v,` datasets
  are supported so Datasets Server can extract the 100 first rows without downloading the
  whole dataset. This is especially useful for previewing large datasets where downloading
  the whole dataset may take hours!`),this.h()},h(){w(i,"href","https://huggingface.co/docs/datasets/stream")},m(v,A){p(v,t,A),p(v,e,A),p(v,r,A),p(v,i,A),l(i,b),p(v,O,A)},p:se,d(v){v&&n(t),v&&n(e),v&&n(r),v&&n(i),v&&n(O)}}}function Ys($){let t,a;return t=new I({props:{code:`import requests
API_URL = "https://datasets-server.huggingface.co/valid"
def query():
    response = requests.request("GET", API_URL)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function Zs($){let t,a;return t=new oe({props:{$$slots:{default:[Ys]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function et($){let t,a;return t=new I({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/valid",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function st($){let t,a;return t=new oe({props:{$$slots:{default:[et]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function tt($){let t,a;return t=new I({props:{code:`curl https://datasets-server.huggingface.co/valid \\
        -X GET`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">valid</span> \\
        -X <span class="hljs-keyword">GET</span>`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function at($){let t,a;return t=new oe({props:{$$slots:{default:[tt]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function nt($){let t,a;return t=new I({props:{code:`import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes"
def query():
    response = requests.request("GET", API_URL, headers=headers)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL, headers=headers)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function rt($){let t,a;return t=new oe({props:{$$slots:{default:[nt]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function lt($){let t,a;return t=new I({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function ot($){let t,a;return t=new oe({props:{$$slots:{default:[lt]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function it($){let t,a;return t=new I({props:{code:`curl https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes \\
        -X GET \\
        -H "Authorization: Bearer \${API_TOKEN}"`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">is</span>-<span class="hljs-keyword">valid</span>?dataset=rotten_tomatoes \\
        -X <span class="hljs-keyword">GET</span> \\
        -H &quot;Authorization: Bearer \${API_TOKEN}&quot;`}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p:se,i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function pt($){let t,a;return t=new oe({props:{$$slots:{default:[it]},$$scope:{ctx:$}}}),{c(){_(t.$$.fragment)},l(e){y(t.$$.fragment,e)},m(e,r){j(t,e,r),a=!0},p(e,r){const i={};r&2&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){a||(k(t.$$.fragment,e),a=!0)},o(e){q(t.$$.fragment,e),a=!1},d(e){E(t,e)}}}function ct($){let t,a,e,r;return{c(){t=c("Remember if a dataset is "),a=f("a"),e=c("gated"),r=c(", you'll need to provide your user token to submit a successful query!"),this.h()},l(i){t=u(i,"Remember if a dataset is "),a=h(i,"A",{href:!0});var b=d(a);e=u(b,"gated"),b.forEach(n),r=u(i,", you'll need to provide your user token to submit a successful query!"),this.h()},h(){w(a,"href","./quick_start#gated-datasets")},m(i,b){p(i,t,b),p(i,a,b),l(a,e),p(i,r,b)},d(i){i&&n(t),i&&n(a),i&&n(r)}}}function ut($){let t,a,e,r,i,b,O,v,A,_e,te,Me,ye,S,ae,ie,Xe,Ve,Fe,ne,pe,Qe,We,je,N,Ye,K,Ze,es,ke,C,qe,P,ss,M,ts,as,X,ns,rs,V,ls,os,Ee,T,G,ce,F,is,ue,ps,be,R,cs,fe,us,fs,Ae,D,Pe,L,hs,he,ds,$s,Te,Q,xe,x,B,de,W,ms,$e,gs,Ie,U,ws,me,vs,_s,Oe,H,Se,re,ys,Ne,Y,Ce,le,js,Ge,Z,Re,J,De;return b=new Es({}),C=new zs({props:{warning:!0,$$slots:{default:[Ws]},$$scope:{ctx:$}}}),F=new Es({}),D=new Ks({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[at],js:[st],python:[Zs]},$$scope:{ctx:$}}}),Q=new I({props:{code:`{
  "valid": [
    "0n1xus/codexglue",
    "0n1xus/pytorrent-standalone",
    "0x7194633/rupile",
    "51la5/keyword-extraction",
    ...
  ]
}`,highlighted:`<span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;valid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;0n1xus/codexglue&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;0n1xus/pytorrent-standalone&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;0x7194633/rupile&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;51la5/keyword-extraction&quot;</span><span class="hljs-punctuation">,</span>
    ...
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>`}}),W=new Es({}),H=new Ks({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[pt],js:[ot],python:[rt]},$$scope:{ctx:$}}}),Y=new I({props:{code:'{"valid": true}',highlighted:'<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;valid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>'}}),Z=new I({props:{code:'{"valid": false}',highlighted:'<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;valid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>'}}),J=new zs({props:{$$slots:{default:[ct]},$$scope:{ctx:$}}}),{c(){t=f("meta"),a=m(),e=f("h1"),r=f("a"),i=f("span"),_(b.$$.fragment),O=m(),v=f("span"),A=c("Check dataset validity"),_e=m(),te=f("p"),Me=c("Before you download a dataset from the Hub, it is helpful to know which datasets are available or if a specific dataset you\u2019re interested in is available. Datasets Server provides two endpoints for verifying whether a dataset is valid or not:"),ye=m(),S=f("ul"),ae=f("li"),ie=f("code"),Xe=c("/valid"),Ve=c(" returns a list of all the datasets that work without any errors."),Fe=m(),ne=f("li"),pe=f("code"),Qe=c("/is-valid"),We=c(" checks if a specific dataset works without any errors."),je=m(),N=f("p"),Ye=c("The API endpoints will return an error for datasets that cannot be loaded with the "),K=f("a"),Ze=c("\u{1F917} Datasets"),es=c(" library, for example, because the data hasn\u2019t been uploaded or the format is not supported."),ke=m(),_(C.$$.fragment),qe=m(),P=f("p"),ss=c("This guide shows you how to check dataset validity programmatically, but free to try it out with "),M=f("a"),ts=c("Postman"),as=c(", "),X=f("a"),ns=c("RapidAPI"),rs=c(", or "),V=f("a"),ls=c("ReDoc"),os=c("."),Ee=m(),T=f("h2"),G=f("a"),ce=f("span"),_(F.$$.fragment),is=m(),ue=f("span"),ps=c("Get all valid datasets"),be=m(),R=f("p"),cs=c("The "),fe=f("code"),us=c("/valid"),fs=c(" endpoint returns a list of Hub datasets that are expected to load without any errors. This endpoint takes no query parameters:"),Ae=m(),_(D.$$.fragment),Pe=m(),L=f("p"),hs=c("The endpoint response is a JSON containing a list valid datasets nested under the "),he=f("code"),ds=c("valid"),$s=c(" key:"),Te=m(),_(Q.$$.fragment),xe=m(),x=f("h2"),B=f("a"),de=f("span"),_(W.$$.fragment),ms=m(),$e=f("span"),gs=c("Check if a dataset is valid"),Ie=m(),U=f("p"),ws=c("On the other hand, "),me=f("code"),vs=c("/is-valid"),_s=c(" checks whether a specific dataset loads without any error. This endpoint\u2019s query parameter requires you to specify the name of the dataset:"),Oe=m(),_(H.$$.fragment),Se=m(),re=f("p"),ys=c("The response looks like this if a dataset is valid:"),Ne=m(),_(Y.$$.fragment),Ce=m(),le=f("p"),js=c("If a dataset is not valid, then the response looks like:"),Ge=m(),_(Z.$$.fragment),Re=m(),_(J.$$.fragment),this.h()},l(s){const o=Fs('[data-svelte="svelte-1phssyn"]',document.head);t=h(o,"META",{name:!0,content:!0}),o.forEach(n),a=g(s),e=h(s,"H1",{class:!0});var ee=d(e);r=h(ee,"A",{id:!0,class:!0,href:!0});var ge=d(r);i=h(ge,"SPAN",{});var we=d(i);y(b.$$.fragment,we),we.forEach(n),ge.forEach(n),O=g(ee),v=h(ee,"SPAN",{});var ve=d(v);A=u(ve,"Check dataset validity"),ve.forEach(n),ee.forEach(n),_e=g(s),te=h(s,"P",{});var bs=d(te);Me=u(bs,"Before you download a dataset from the Hub, it is helpful to know which datasets are available or if a specific dataset you\u2019re interested in is available. Datasets Server provides two endpoints for verifying whether a dataset is valid or not:"),bs.forEach(n),ye=g(s),S=h(s,"UL",{});var Le=d(S);ae=h(Le,"LI",{});var ks=d(ae);ie=h(ks,"CODE",{});var As=d(ie);Xe=u(As,"/valid"),As.forEach(n),Ve=u(ks," returns a list of all the datasets that work without any errors."),ks.forEach(n),Fe=g(Le),ne=h(Le,"LI",{});var qs=d(ne);pe=h(qs,"CODE",{});var Ps=d(pe);Qe=u(Ps,"/is-valid"),Ps.forEach(n),We=u(qs," checks if a specific dataset works without any errors."),qs.forEach(n),Le.forEach(n),je=g(s),N=h(s,"P",{});var Be=d(N);Ye=u(Be,"The API endpoints will return an error for datasets that cannot be loaded with the "),K=h(Be,"A",{href:!0,rel:!0});var Ts=d(K);Ze=u(Ts,"\u{1F917} Datasets"),Ts.forEach(n),es=u(Be," library, for example, because the data hasn\u2019t been uploaded or the format is not supported."),Be.forEach(n),ke=g(s),y(C.$$.fragment,s),qe=g(s),P=h(s,"P",{});var z=d(P);ss=u(z,"This guide shows you how to check dataset validity programmatically, but free to try it out with "),M=h(z,"A",{href:!0,rel:!0});var xs=d(M);ts=u(xs,"Postman"),xs.forEach(n),as=u(z,", "),X=h(z,"A",{href:!0,rel:!0});var Is=d(X);ns=u(Is,"RapidAPI"),Is.forEach(n),rs=u(z,", or "),V=h(z,"A",{href:!0,rel:!0});var Os=d(V);ls=u(Os,"ReDoc"),Os.forEach(n),os=u(z,"."),z.forEach(n),Ee=g(s),T=h(s,"H2",{class:!0});var Ue=d(T);G=h(Ue,"A",{id:!0,class:!0,href:!0});var Ss=d(G);ce=h(Ss,"SPAN",{});var Ns=d(ce);y(F.$$.fragment,Ns),Ns.forEach(n),Ss.forEach(n),is=g(Ue),ue=h(Ue,"SPAN",{});var Cs=d(ue);ps=u(Cs,"Get all valid datasets"),Cs.forEach(n),Ue.forEach(n),be=g(s),R=h(s,"P",{});var He=d(R);cs=u(He,"The "),fe=h(He,"CODE",{});var Gs=d(fe);us=u(Gs,"/valid"),Gs.forEach(n),fs=u(He," endpoint returns a list of Hub datasets that are expected to load without any errors. This endpoint takes no query parameters:"),He.forEach(n),Ae=g(s),y(D.$$.fragment,s),Pe=g(s),L=h(s,"P",{});var Je=d(L);hs=u(Je,"The endpoint response is a JSON containing a list valid datasets nested under the "),he=h(Je,"CODE",{});var Rs=d(he);ds=u(Rs,"valid"),Rs.forEach(n),$s=u(Je," key:"),Je.forEach(n),Te=g(s),y(Q.$$.fragment,s),xe=g(s),x=h(s,"H2",{class:!0});var ze=d(x);B=h(ze,"A",{id:!0,class:!0,href:!0});var Ds=d(B);de=h(Ds,"SPAN",{});var Ls=d(de);y(W.$$.fragment,Ls),Ls.forEach(n),Ds.forEach(n),ms=g(ze),$e=h(ze,"SPAN",{});var Bs=d($e);gs=u(Bs,"Check if a dataset is valid"),Bs.forEach(n),ze.forEach(n),Ie=g(s),U=h(s,"P",{});var Ke=d(U);ws=u(Ke,"On the other hand, "),me=h(Ke,"CODE",{});var Us=d(me);vs=u(Us,"/is-valid"),Us.forEach(n),_s=u(Ke," checks whether a specific dataset loads without any error. This endpoint\u2019s query parameter requires you to specify the name of the dataset:"),Ke.forEach(n),Oe=g(s),y(H.$$.fragment,s),Se=g(s),re=h(s,"P",{});var Hs=d(re);ys=u(Hs,"The response looks like this if a dataset is valid:"),Hs.forEach(n),Ne=g(s),y(Y.$$.fragment,s),Ce=g(s),le=h(s,"P",{});var Js=d(le);js=u(Js,"If a dataset is not valid, then the response looks like:"),Js.forEach(n),Ge=g(s),y(Z.$$.fragment,s),Re=g(s),y(J.$$.fragment,s),this.h()},h(){w(t,"name","hf:doc:metadata"),w(t,"content",JSON.stringify(ft)),w(r,"id","check-dataset-validity"),w(r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(r,"href","#check-dataset-validity"),w(e,"class","relative group"),w(K,"href","https://github.com/huggingface/datasets"),w(K,"rel","nofollow"),w(M,"href","https://www.postman.com/huggingface/workspace/hugging-face-apis/request/23242779-17b761d0-b2b8-4638-a4f7-73be9049c324"),w(M,"rel","nofollow"),w(X,"href","https://rapidapi.com/hugging-face-hugging-face-default/api/hugging-face-datasets-api"),w(X,"rel","nofollow"),w(V,"href","https://redocly.github.io/redoc/?url=https://datasets-server.huggingface.co/openapi.json#operation/listValidDatasets"),w(V,"rel","nofollow"),w(G,"id","get-all-valid-datasets"),w(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(G,"href","#get-all-valid-datasets"),w(T,"class","relative group"),w(B,"id","check-if-a-dataset-is-valid"),w(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(B,"href","#check-if-a-dataset-is-valid"),w(x,"class","relative group")},m(s,o){l(document.head,t),p(s,a,o),p(s,e,o),l(e,r),l(r,i),j(b,i,null),l(e,O),l(e,v),l(v,A),p(s,_e,o),p(s,te,o),l(te,Me),p(s,ye,o),p(s,S,o),l(S,ae),l(ae,ie),l(ie,Xe),l(ae,Ve),l(S,Fe),l(S,ne),l(ne,pe),l(pe,Qe),l(ne,We),p(s,je,o),p(s,N,o),l(N,Ye),l(N,K),l(K,Ze),l(N,es),p(s,ke,o),j(C,s,o),p(s,qe,o),p(s,P,o),l(P,ss),l(P,M),l(M,ts),l(P,as),l(P,X),l(X,ns),l(P,rs),l(P,V),l(V,ls),l(P,os),p(s,Ee,o),p(s,T,o),l(T,G),l(G,ce),j(F,ce,null),l(T,is),l(T,ue),l(ue,ps),p(s,be,o),p(s,R,o),l(R,cs),l(R,fe),l(fe,us),l(R,fs),p(s,Ae,o),j(D,s,o),p(s,Pe,o),p(s,L,o),l(L,hs),l(L,he),l(he,ds),l(L,$s),p(s,Te,o),j(Q,s,o),p(s,xe,o),p(s,x,o),l(x,B),l(B,de),j(W,de,null),l(x,ms),l(x,$e),l($e,gs),p(s,Ie,o),p(s,U,o),l(U,ws),l(U,me),l(me,vs),l(U,_s),p(s,Oe,o),j(H,s,o),p(s,Se,o),p(s,re,o),l(re,ys),p(s,Ne,o),j(Y,s,o),p(s,Ce,o),p(s,le,o),l(le,js),p(s,Ge,o),j(Z,s,o),p(s,Re,o),j(J,s,o),De=!0},p(s,[o]){const ee={};o&2&&(ee.$$scope={dirty:o,ctx:s}),C.$set(ee);const ge={};o&2&&(ge.$$scope={dirty:o,ctx:s}),D.$set(ge);const we={};o&2&&(we.$$scope={dirty:o,ctx:s}),H.$set(we);const ve={};o&2&&(ve.$$scope={dirty:o,ctx:s}),J.$set(ve)},i(s){De||(k(b.$$.fragment,s),k(C.$$.fragment,s),k(F.$$.fragment,s),k(D.$$.fragment,s),k(Q.$$.fragment,s),k(W.$$.fragment,s),k(H.$$.fragment,s),k(Y.$$.fragment,s),k(Z.$$.fragment,s),k(J.$$.fragment,s),De=!0)},o(s){q(b.$$.fragment,s),q(C.$$.fragment,s),q(F.$$.fragment,s),q(D.$$.fragment,s),q(Q.$$.fragment,s),q(W.$$.fragment,s),q(H.$$.fragment,s),q(Y.$$.fragment,s),q(Z.$$.fragment,s),q(J.$$.fragment,s),De=!1},d(s){n(t),s&&n(a),s&&n(e),E(b),s&&n(_e),s&&n(te),s&&n(ye),s&&n(S),s&&n(je),s&&n(N),s&&n(ke),E(C,s),s&&n(qe),s&&n(P),s&&n(Ee),s&&n(T),E(F),s&&n(be),s&&n(R),s&&n(Ae),E(D,s),s&&n(Pe),s&&n(L),s&&n(Te),E(Q,s),s&&n(xe),s&&n(x),E(W),s&&n(Ie),s&&n(U),s&&n(Oe),E(H,s),s&&n(Se),s&&n(re),s&&n(Ne),E(Y,s),s&&n(Ce),s&&n(le),s&&n(Ge),E(Z,s),s&&n(Re),E(J,s)}}}const ft={local:"check-dataset-validity",sections:[{local:"get-all-valid-datasets",title:"Get all valid datasets"},{local:"check-if-a-dataset-is-valid",title:"Check if a dataset is valid"}],title:"Check dataset validity"};function ht($){return Qs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wt extends Ms{constructor(t){super();Xs(this,t,ht,ut,Vs,{})}}export{wt as default,ft as metadata};
