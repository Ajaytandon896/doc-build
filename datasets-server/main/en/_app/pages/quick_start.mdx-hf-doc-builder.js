import{S as pr,i as cr,s as ir,e as l,k as d,w as _,t as i,M as fr,c as p,d as r,m as $,a as c,x as w,h as f,b as q,G as a,g,y as v,q as j,o as y,B as k,v as ur,L as G}from"../chunks/vendor-hf-doc-builder.js";import{T as hr,I as Ne,M as I}from"../chunks/InferenceApi-hf-doc-builder.js";import{I as Le}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as b}from"../chunks/CodeBlock-hf-doc-builder.js";function dr(m){let e,n,t,o,h,x,nt,R,kt,Y,D,Et,V,A,W,rt;return{c(){e=i("Sign up for a "),n=l("a"),t=i("Hugging Face account"),o=i(" if you don't already have one! While you can use Datasets Server without a Hugging Face account, you won't be able to access "),h=l("a"),x=i("gated datasets"),nt=i(" like "),R=l("a"),kt=i("CommonVoice"),Y=i(" and "),D=l("a"),Et=i("ImageNet"),V=i(" without providing a "),A=l("a"),W=i("user token"),rt=i(" which you can find in your user settings."),this.h()},l(E){e=f(E,"Sign up for a "),n=p(E,"A",{href:!0});var T=c(n);t=f(T,"Hugging Face account"),T.forEach(r),o=f(E," if you don't already have one! While you can use Datasets Server without a Hugging Face account, you won't be able to access "),h=p(E,"A",{href:!0});var Ot=c(h);x=f(Ot,"gated datasets"),Ot.forEach(r),nt=f(E," like "),R=p(E,"A",{href:!0});var Nt=c(R);kt=f(Nt,"CommonVoice"),Nt.forEach(r),Y=f(E," and "),D=p(E,"A",{href:!0});var ot=c(D);Et=f(ot,"ImageNet"),ot.forEach(r),V=f(E," without providing a "),A=p(E,"A",{href:!0});var Lt=c(A);W=f(Lt,"user token"),Lt.forEach(r),rt=f(E," which you can find in your user settings."),this.h()},h(){q(n,"href","https://huggingface.co/join"),q(h,"href","https://huggingface.co/docs/hub/datasets-gated"),q(R,"href","https://huggingface.co/datasets/mozilla-foundation/common_voice_10_0"),q(D,"href","https://huggingface.co/datasets/imagenet-1k"),q(A,"href","https://huggingface.co/settings/tokens")},m(E,T){g(E,e,T),g(E,n,T),a(n,t),g(E,o,T),g(E,h,T),a(h,x),g(E,nt,T),g(E,R,T),a(R,kt),g(E,Y,T),g(E,D,T),a(D,Et),g(E,V,T),g(E,A,T),a(A,W),g(E,rt,T)},d(E){E&&r(e),E&&r(n),E&&r(o),E&&r(h),E&&r(nt),E&&r(R),E&&r(Y),E&&r(D),E&&r(V),E&&r(A),E&&r(rt)}}}function $r(m){let e,n;return e=new b({props:{code:`import requests
headers = {"Authorization": f"Bearer {API_TOKEN}"}
API_URL = "https://datasets-server.huggingface.co/is-valid?dataset=mozilla-foundation/common_voice_10_0"
def query():
    response = requests.request("GET", API_URL, headers=headers)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{API_TOKEN}</span>&quot;</span>}
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=mozilla-foundation/common_voice_10_0&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL, headers=headers)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function mr(m){let e,n;return e=new I({props:{$$slots:{default:[$r]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function gr(m){let e,n;return e=new b({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes",
        {
            headers: { Authorization: \`Bearer \${API_TOKEN}\` },
            method: "GET",
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes&quot;</span>,
        {
            <span class="hljs-attr">headers</span>: { <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">\`Bearer <span class="hljs-subst">\${API_TOKEN}</span>\`</span> },
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function _r(m){let e,n;return e=new I({props:{$$slots:{default:[gr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function wr(m){let e,n;return e=new b({props:{code:`curl https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes \\
        -X GET \\
        -H "Authorization: Bearer \${API_TOKEN}"`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">is</span>-<span class="hljs-keyword">valid</span>?dataset=rotten_tomatoes \\
        -X <span class="hljs-keyword">GET</span> \\
        -H &quot;Authorization: Bearer \${API_TOKEN}&quot;`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function vr(m){let e,n;return e=new I({props:{$$slots:{default:[wr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function jr(m){let e,n;return e=new b({props:{code:`import requests
API_URL = "https://datasets-server.huggingface.co/valid"
def query():
    response = requests.request("GET", API_URL)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function yr(m){let e,n;return e=new I({props:{$$slots:{default:[jr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function kr(m){let e,n;return e=new b({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/valid",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/valid&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Er(m){let e,n;return e=new I({props:{$$slots:{default:[kr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function qr(m){let e,n;return e=new b({props:{code:`curl https://datasets-server.huggingface.co/valid \\
        -X GET`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">valid</span> \\
        -X <span class="hljs-keyword">GET</span>`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Tr(m){let e,n;return e=new I({props:{$$slots:{default:[qr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Ar(m){let e,n;return e=new b({props:{code:`import requests
API_URL = "https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes"
def query():
    response = requests.request("GET", API_URL)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function br(m){let e,n;return e=new I({props:{$$slots:{default:[Ar]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Pr(m){let e,n;return e=new b({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Gr(m){let e,n;return e=new I({props:{$$slots:{default:[Pr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Ir(m){let e,n;return e=new b({props:{code:`curl https://datasets-server.huggingface.co/is-valid?dataset=rotten_tomatoes \\
        -X GET`,highlighted:`curl https://datasets-<span class="hljs-keyword">server</span>.huggingface.co/<span class="hljs-keyword">is</span>-<span class="hljs-keyword">valid</span>?dataset=rotten_tomatoes \\
        -X <span class="hljs-keyword">GET</span>`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Dr(m){let e,n;return e=new I({props:{$$slots:{default:[Ir]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Rr(m){let e,n;return e=new b({props:{code:`import requests
API_URL = "https://datasets-server.huggingface.co/splits?dataset=rotten_tomatoes"
def query():
    response = requests.request("GET", API_URL)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/splits?dataset=rotten_tomatoes&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Sr(m){let e,n;return e=new I({props:{$$slots:{default:[Rr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Or(m){let e,n;return e=new b({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/splits?dataset=rotten_tomatoes",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/splits?dataset=rotten_tomatoes&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Nr(m){let e,n;return e=new I({props:{$$slots:{default:[Or]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Lr(m){let e,n;return e=new b({props:{code:`curl https://datasets-server.huggingface.co/splits?dataset=rotten_tomatoes \\
        -X GET`,highlighted:`curl https:<span class="hljs-comment">//datasets-server.huggingface.co/splits?dataset=rotten_tomatoes \\
        -X GET</span>`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Cr(m){let e,n;return e=new I({props:{$$slots:{default:[Lr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Ur(m){let e,n;return e=new b({props:{code:`import requests
API_URL = "https://datasets-server.huggingface.co/first-rows?dataset=rotten_tomatoes&config=default&split=train"
def query():
    response = requests.request("GET", API_URL)
    return response.json()
data = query()`,highlighted:`<span class="hljs-keyword">import</span> requests
API_URL = <span class="hljs-string">&quot;https://datasets-server.huggingface.co/first-rows?dataset=rotten_tomatoes&amp;config=default&amp;split=train&quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>():
    response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, API_URL)
    <span class="hljs-keyword">return</span> response.json()
data = query()`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Hr(m){let e,n;return e=new I({props:{$$slots:{default:[Ur]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function xr(m){let e,n;return e=new b({props:{code:`import fetch from "node-fetch";
async function query(data) {
    const response = await fetch(
        "https://datasets-server.huggingface.co/first-rows?dataset=rotten_tomatoes&config=default&split=train",
        {
            method: "GET"
        }
    );
    const result = await response.json();
    return result;
}
query().then((response) => {
    console.log(JSON.stringify(response));
});`,highlighted:`<span class="hljs-keyword">import</span> fetch <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node-fetch&quot;</span>;
<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(
        <span class="hljs-string">&quot;https://datasets-server.huggingface.co/first-rows?dataset=rotten_tomatoes&amp;config=default&amp;split=train&quot;</span>,
        {
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>
        }
    );
    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();
    <span class="hljs-keyword">return</span> result;
}
<span class="hljs-title function_">query</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response));
});`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Jr(m){let e,n;return e=new I({props:{$$slots:{default:[xr]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Br(m){let e,n;return e=new b({props:{code:`curl https://datasets-server.huggingface.co/first-rows?dataset=rotten_tomatoes&config=default&split=train \\
        -X GET`,highlighted:`curl https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>datasets<span class="hljs-operator">-</span>server.huggingface.co<span class="hljs-operator">/</span><span class="hljs-keyword">first</span><span class="hljs-operator">-</span><span class="hljs-keyword">rows</span>?dataset<span class="hljs-operator">=</span>rotten_tomatoes<span class="hljs-operator">&amp;</span>config<span class="hljs-operator">=</span><span class="hljs-keyword">default</span><span class="hljs-operator">&amp;</span>split<span class="hljs-operator">=</span>train \\
        <span class="hljs-operator">-</span>X <span class="hljs-keyword">GET</span>`}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p:G,i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function zr(m){let e,n;return e=new I({props:{$$slots:{default:[Br]},$$scope:{ctx:m}}}),{c(){_(e.$$.fragment)},l(t){w(e.$$.fragment,t)},m(t,o){v(e,t,o),n=!0},p(t,o){const h={};o&2&&(h.$$scope={dirty:o,ctx:t}),e.$set(h)},i(t){n||(j(e.$$.fragment,t),n=!0)},o(t){y(e.$$.fragment,t),n=!1},d(t){k(e,t)}}}function Xr(m){let e,n,t,o,h,x,nt,R,kt,Y,D,Et,V,A,W,rt,E,T,Ot,Nt,ot,Lt,Ce,Ct,ws,Ue,lt,Qt,S,Yt,vs,js,Vt,ys,ks,Wt,Es,qs,Zt,Ts,As,He,bs,J,O,te,Ut,Ps,Gs,ee,Is,Ds,se,Rs,Ss,ae,Os,Ns,xe,Ls,N,ne,Ht,Cs,Us,re,Hs,xs,oe,Js,Bs,xt,le,zs,Xs,Fs,Je,Ms,L,pe,Jt,Ks,Qs,ce,Ys,Vs,ie,Ws,Zs,Bt,fe,ta,ea,sa,Be,aa,C,ue,zt,na,ra,he,oa,la,de,pa,ca,P,ia,$e,fa,ua,ha,da,me,$a,ma,ga,_a,ge,wa,va,ja,ze,Xe,Xt,ya,Fe,pt,Me,U,ka,qt,Ea,qa,Tt,Ta,Aa,At,ba,Pa,Ke,Ft,Ga,Qe,bt,Ye,Z,ct,_e,Pt,Ia,we,Da,Ve,it,Ra,ve,Sa,Oa,We,ft,Ze,tt,ut,je,Gt,Na,ye,La,ts,ht,Ca,ke,Ua,Ha,es,dt,ss,B,xa,It,Ja,Ba,Ee,za,Xa,as,$t,ns,et,mt,qe,Dt,Fa,Te,Ma,rs,gt,Ka,Ae,Qa,Ya,os,_t,ls,st,wt,be,Rt,Va,Pe,Wa,ps,z,Za,Ge,tn,en,Ie,sn,an,cs,vt,is;return x=new Le({}),pt=new hr({props:{$$slots:{default:[dr]},$$scope:{ctx:m}}}),bt=new b({props:{code:"https://datasets-server.huggingface.co",highlighted:'https:<span class="hljs-regexp">//</span>datasets-server.huggingface.co'}}),Pt=new Le({}),ft=new Ne({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[vr],js:[_r],python:[mr]},$$scope:{ctx:m}}}),Gt=new Le({}),dt=new Ne({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[Tr],js:[Er],python:[yr]},$$scope:{ctx:m}}}),$t=new Ne({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[Dr],js:[Gr],python:[br]},$$scope:{ctx:m}}}),Dt=new Le({}),_t=new Ne({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[Cr],js:[Nr],python:[Sr]},$$scope:{ctx:m}}}),Rt=new Le({}),vt=new Ne({props:{python:!0,js:!0,curl:!0,$$slots:{curl:[zr],js:[Jr],python:[Hr]},$$scope:{ctx:m}}}),{c(){e=l("meta"),n=d(),t=l("h1"),o=l("a"),h=l("span"),_(x.$$.fragment),nt=d(),R=l("span"),kt=i("Quickstart"),Y=d(),D=l("p"),Et=i("In this quickstart, you\u2019ll learn how to use the Datasets Server\u2019s REST API to:"),V=d(),A=l("ul"),W=l("li"),rt=i("Check whether a dataset on the Hub is functional."),E=d(),T=l("li"),Ot=i("Return the configuration and splits of a dataset."),Nt=d(),ot=l("li"),Lt=i("Preview the first 100 rows of a dataset."),Ce=d(),Ct=l("p"),ws=i("Each feature is served through an endpoint summarized in the table below:"),Ue=d(),lt=l("table"),Qt=l("thead"),S=l("tr"),Yt=l("th"),vs=i("Endpoint"),js=d(),Vt=l("th"),ys=i("Method"),ks=d(),Wt=l("th"),Es=i("Description"),qs=d(),Zt=l("th"),Ts=i("Query parameters"),As=d(),He=l("th"),bs=d(),J=l("tbody"),O=l("tr"),te=l("td"),Ut=l("a"),Ps=i("/valid"),Gs=d(),ee=l("td"),Is=i("GET"),Ds=d(),se=l("td"),Rs=i("Get the list of datasets hosted in the Hub and supported by the datasets server."),Ss=d(),ae=l("td"),Os=i("none"),Ns=d(),xe=l("td"),Ls=d(),N=l("tr"),ne=l("td"),Ht=l("a"),Cs=i("/is-valid"),Us=d(),re=l("td"),Hs=i("GET"),xs=d(),oe=l("td"),Js=i("Check whether a specific dataset is valid."),Bs=d(),xt=l("td"),le=l("code"),zs=i("dataset"),Xs=i(": name of the dataset"),Fs=d(),Je=l("td"),Ms=d(),L=l("tr"),pe=l("td"),Jt=l("a"),Ks=i("/splits"),Qs=d(),ce=l("td"),Ys=i("GET"),Vs=d(),ie=l("td"),Ws=i("Get the list of configurations and splits of a dataset."),Zs=d(),Bt=l("td"),fe=l("code"),ta=i("dataset"),ea=i(": name of the dataset"),sa=d(),Be=l("td"),aa=d(),C=l("tr"),ue=l("td"),zt=l("a"),na=i("/first-rows"),ra=d(),he=l("td"),oa=i("GET"),la=d(),de=l("td"),pa=i("Get the columns (with data type) and first rows of a dataset split."),ca=d(),P=l("td"),ia=i("- "),$e=l("code"),fa=i("dataset"),ua=i(": name of the dataset"),ha=l("br"),da=i("- "),me=l("code"),$a=i("config"),ma=i(": name of the config"),ga=l("br"),_a=i("- "),ge=l("code"),wa=i("split"),va=i(": name of the split"),ja=d(),ze=l("td"),Xe=d(),Xt=l("p"),ya=i("There is no installation or setup required to use Datasets Server."),Fe=d(),_(pt.$$.fragment),Me=d(),U=l("p"),ka=i("Feel free to try out the API in "),qt=l("a"),Ea=i("Postman"),qa=i(", "),Tt=l("a"),Ta=i("ReDoc"),Aa=i(" or "),At=l("a"),ba=i("RapidAPI"),Pa=i(". This quickstart will show you how to query the endpoints programmatically."),Ke=d(),Ft=l("p"),Ga=i("The base URL of the REST API is:"),Qe=d(),_(bt.$$.fragment),Ye=d(),Z=l("h2"),ct=l("a"),_e=l("span"),_(Pt.$$.fragment),Ia=d(),we=l("span"),Da=i("Gated datasets"),Ve=d(),it=l("p"),Ra=i("For gated datasets, you\u2019ll need to provide your user token in "),ve=l("code"),Sa=i("headers"),Oa=i(" of your query. Otherwise, you\u2019ll get an error message to retry with authentication."),We=d(),_(ft.$$.fragment),Ze=d(),tt=l("h2"),ut=l("a"),je=l("span"),_(Gt.$$.fragment),Na=d(),ye=l("span"),La=i("Check dataset validity"),ts=d(),ht=l("p"),Ca=i("The "),ke=l("code"),Ua=i("/valid"),Ha=i(" endpoint returns a JSON list of datasets stored on the Hub that load without any errors:"),es=d(),_(dt.$$.fragment),ss=d(),B=l("p"),xa=i("To check whether a specific dataset is valid, for example, "),It=l("a"),Ja=i("Rotten Tomatoes"),Ba=i(", use the "),Ee=l("code"),za=i("/is-valid"),Xa=i(" endpoint instead:"),as=d(),_($t.$$.fragment),ns=d(),et=l("h2"),mt=l("a"),qe=l("span"),_(Dt.$$.fragment),Fa=d(),Te=l("span"),Ma=i("List configurations and splits"),rs=d(),gt=l("p"),Ka=i("The "),Ae=l("code"),Qa=i("/splits"),Ya=i(" endpoint returns a JSON list of the splits in a dataset:"),os=d(),_(_t.$$.fragment),ls=d(),st=l("h2"),wt=l("a"),be=l("span"),_(Rt.$$.fragment),Va=d(),Pe=l("span"),Wa=i("Preview a dataset"),ps=d(),z=l("p"),Za=i("The "),Ge=l("code"),tn=i("/first-rows"),en=i(" endpoint returns a JSON list of the first 100 rows of a dataset. You should specify the dataset name, configuration name (you can find out the configuration name from the "),Ie=l("code"),sn=i("/splits"),an=i(" endpoint), and split name of the dataset you\u2019d like to preview:"),cs=d(),_(vt.$$.fragment),this.h()},l(s){const u=fr('[data-svelte="svelte-1phssyn"]',document.head);e=p(u,"META",{name:!0,content:!0}),u.forEach(r),n=$(s),t=p(s,"H1",{class:!0});var St=c(t);o=p(St,"A",{id:!0,class:!0,href:!0});var De=c(o);h=p(De,"SPAN",{});var Re=c(h);w(x.$$.fragment,Re),Re.forEach(r),De.forEach(r),nt=$(St),R=p(St,"SPAN",{});var Se=c(R);kt=f(Se,"Quickstart"),Se.forEach(r),St.forEach(r),Y=$(s),D=p(s,"P",{});var Oe=c(D);Et=f(Oe,"In this quickstart, you\u2019ll learn how to use the Datasets Server\u2019s REST API to:"),Oe.forEach(r),V=$(s),A=p(s,"UL",{});var at=c(A);W=p(at,"LI",{});var on=c(W);rt=f(on,"Check whether a dataset on the Hub is functional."),on.forEach(r),E=$(at),T=p(at,"LI",{});var ln=c(T);Ot=f(ln,"Return the configuration and splits of a dataset."),ln.forEach(r),Nt=$(at),ot=p(at,"LI",{});var pn=c(ot);Lt=f(pn,"Preview the first 100 rows of a dataset."),pn.forEach(r),at.forEach(r),Ce=$(s),Ct=p(s,"P",{});var cn=c(Ct);ws=f(cn,"Each feature is served through an endpoint summarized in the table below:"),cn.forEach(r),Ue=$(s),lt=p(s,"TABLE",{});var fs=c(lt);Qt=p(fs,"THEAD",{});var fn=c(Qt);S=p(fn,"TR",{});var X=c(S);Yt=p(X,"TH",{});var un=c(Yt);vs=f(un,"Endpoint"),un.forEach(r),js=$(X),Vt=p(X,"TH",{});var hn=c(Vt);ys=f(hn,"Method"),hn.forEach(r),ks=$(X),Wt=p(X,"TH",{});var dn=c(Wt);Es=f(dn,"Description"),dn.forEach(r),qs=$(X),Zt=p(X,"TH",{});var $n=c(Zt);Ts=f($n,"Query parameters"),$n.forEach(r),As=$(X),He=p(X,"TH",{}),c(He).forEach(r),X.forEach(r),fn.forEach(r),bs=$(fs),J=p(fs,"TBODY",{});var jt=c(J);O=p(jt,"TR",{});var F=c(O);te=p(F,"TD",{});var mn=c(te);Ut=p(mn,"A",{href:!0});var gn=c(Ut);Ps=f(gn,"/valid"),gn.forEach(r),mn.forEach(r),Gs=$(F),ee=p(F,"TD",{});var _n=c(ee);Is=f(_n,"GET"),_n.forEach(r),Ds=$(F),se=p(F,"TD",{});var wn=c(se);Rs=f(wn,"Get the list of datasets hosted in the Hub and supported by the datasets server."),wn.forEach(r),Ss=$(F),ae=p(F,"TD",{});var vn=c(ae);Os=f(vn,"none"),vn.forEach(r),Ns=$(F),xe=p(F,"TD",{}),c(xe).forEach(r),F.forEach(r),Ls=$(jt),N=p(jt,"TR",{});var M=c(N);ne=p(M,"TD",{});var jn=c(ne);Ht=p(jn,"A",{href:!0});var yn=c(Ht);Cs=f(yn,"/is-valid"),yn.forEach(r),jn.forEach(r),Us=$(M),re=p(M,"TD",{});var kn=c(re);Hs=f(kn,"GET"),kn.forEach(r),xs=$(M),oe=p(M,"TD",{});var En=c(oe);Js=f(En,"Check whether a specific dataset is valid."),En.forEach(r),Bs=$(M),xt=p(M,"TD",{});var nn=c(xt);le=p(nn,"CODE",{});var qn=c(le);zs=f(qn,"dataset"),qn.forEach(r),Xs=f(nn,": name of the dataset"),nn.forEach(r),Fs=$(M),Je=p(M,"TD",{}),c(Je).forEach(r),M.forEach(r),Ms=$(jt),L=p(jt,"TR",{});var K=c(L);pe=p(K,"TD",{});var Tn=c(pe);Jt=p(Tn,"A",{href:!0});var An=c(Jt);Ks=f(An,"/splits"),An.forEach(r),Tn.forEach(r),Qs=$(K),ce=p(K,"TD",{});var bn=c(ce);Ys=f(bn,"GET"),bn.forEach(r),Vs=$(K),ie=p(K,"TD",{});var Pn=c(ie);Ws=f(Pn,"Get the list of configurations and splits of a dataset."),Pn.forEach(r),Zs=$(K),Bt=p(K,"TD",{});var rn=c(Bt);fe=p(rn,"CODE",{});var Gn=c(fe);ta=f(Gn,"dataset"),Gn.forEach(r),ea=f(rn,": name of the dataset"),rn.forEach(r),sa=$(K),Be=p(K,"TD",{}),c(Be).forEach(r),K.forEach(r),aa=$(jt),C=p(jt,"TR",{});var Q=c(C);ue=p(Q,"TD",{});var In=c(ue);zt=p(In,"A",{href:!0});var Dn=c(zt);na=f(Dn,"/first-rows"),Dn.forEach(r),In.forEach(r),ra=$(Q),he=p(Q,"TD",{});var Rn=c(he);oa=f(Rn,"GET"),Rn.forEach(r),la=$(Q),de=p(Q,"TD",{});var Sn=c(de);pa=f(Sn,"Get the columns (with data type) and first rows of a dataset split."),Sn.forEach(r),ca=$(Q),P=p(Q,"TD",{});var H=c(P);ia=f(H,"- "),$e=p(H,"CODE",{});var On=c($e);fa=f(On,"dataset"),On.forEach(r),ua=f(H,": name of the dataset"),ha=p(H,"BR",{}),da=f(H,"- "),me=p(H,"CODE",{});var Nn=c(me);$a=f(Nn,"config"),Nn.forEach(r),ma=f(H,": name of the config"),ga=p(H,"BR",{}),_a=f(H,"- "),ge=p(H,"CODE",{});var Ln=c(ge);wa=f(Ln,"split"),Ln.forEach(r),va=f(H,": name of the split"),H.forEach(r),ja=$(Q),ze=p(Q,"TD",{}),c(ze).forEach(r),Q.forEach(r),jt.forEach(r),fs.forEach(r),Xe=$(s),Xt=p(s,"P",{});var Cn=c(Xt);ya=f(Cn,"There is no installation or setup required to use Datasets Server."),Cn.forEach(r),Fe=$(s),w(pt.$$.fragment,s),Me=$(s),U=p(s,"P",{});var yt=c(U);ka=f(yt,"Feel free to try out the API in "),qt=p(yt,"A",{href:!0,rel:!0});var Un=c(qt);Ea=f(Un,"Postman"),Un.forEach(r),qa=f(yt,", "),Tt=p(yt,"A",{href:!0,rel:!0});var Hn=c(Tt);Ta=f(Hn,"ReDoc"),Hn.forEach(r),Aa=f(yt," or "),At=p(yt,"A",{href:!0,rel:!0});var xn=c(At);ba=f(xn,"RapidAPI"),xn.forEach(r),Pa=f(yt,". This quickstart will show you how to query the endpoints programmatically."),yt.forEach(r),Ke=$(s),Ft=p(s,"P",{});var Jn=c(Ft);Ga=f(Jn,"The base URL of the REST API is:"),Jn.forEach(r),Qe=$(s),w(bt.$$.fragment,s),Ye=$(s),Z=p(s,"H2",{class:!0});var us=c(Z);ct=p(us,"A",{id:!0,class:!0,href:!0});var Bn=c(ct);_e=p(Bn,"SPAN",{});var zn=c(_e);w(Pt.$$.fragment,zn),zn.forEach(r),Bn.forEach(r),Ia=$(us),we=p(us,"SPAN",{});var Xn=c(we);Da=f(Xn,"Gated datasets"),Xn.forEach(r),us.forEach(r),Ve=$(s),it=p(s,"P",{});var hs=c(it);Ra=f(hs,"For gated datasets, you\u2019ll need to provide your user token in "),ve=p(hs,"CODE",{});var Fn=c(ve);Sa=f(Fn,"headers"),Fn.forEach(r),Oa=f(hs," of your query. Otherwise, you\u2019ll get an error message to retry with authentication."),hs.forEach(r),We=$(s),w(ft.$$.fragment,s),Ze=$(s),tt=p(s,"H2",{class:!0});var ds=c(tt);ut=p(ds,"A",{id:!0,class:!0,href:!0});var Mn=c(ut);je=p(Mn,"SPAN",{});var Kn=c(je);w(Gt.$$.fragment,Kn),Kn.forEach(r),Mn.forEach(r),Na=$(ds),ye=p(ds,"SPAN",{});var Qn=c(ye);La=f(Qn,"Check dataset validity"),Qn.forEach(r),ds.forEach(r),ts=$(s),ht=p(s,"P",{});var $s=c(ht);Ca=f($s,"The "),ke=p($s,"CODE",{});var Yn=c(ke);Ua=f(Yn,"/valid"),Yn.forEach(r),Ha=f($s," endpoint returns a JSON list of datasets stored on the Hub that load without any errors:"),$s.forEach(r),es=$(s),w(dt.$$.fragment,s),ss=$(s),B=p(s,"P",{});var Mt=c(B);xa=f(Mt,"To check whether a specific dataset is valid, for example, "),It=p(Mt,"A",{href:!0,rel:!0});var Vn=c(It);Ja=f(Vn,"Rotten Tomatoes"),Vn.forEach(r),Ba=f(Mt,", use the "),Ee=p(Mt,"CODE",{});var Wn=c(Ee);za=f(Wn,"/is-valid"),Wn.forEach(r),Xa=f(Mt," endpoint instead:"),Mt.forEach(r),as=$(s),w($t.$$.fragment,s),ns=$(s),et=p(s,"H2",{class:!0});var ms=c(et);mt=p(ms,"A",{id:!0,class:!0,href:!0});var Zn=c(mt);qe=p(Zn,"SPAN",{});var tr=c(qe);w(Dt.$$.fragment,tr),tr.forEach(r),Zn.forEach(r),Fa=$(ms),Te=p(ms,"SPAN",{});var er=c(Te);Ma=f(er,"List configurations and splits"),er.forEach(r),ms.forEach(r),rs=$(s),gt=p(s,"P",{});var gs=c(gt);Ka=f(gs,"The "),Ae=p(gs,"CODE",{});var sr=c(Ae);Qa=f(sr,"/splits"),sr.forEach(r),Ya=f(gs," endpoint returns a JSON list of the splits in a dataset:"),gs.forEach(r),os=$(s),w(_t.$$.fragment,s),ls=$(s),st=p(s,"H2",{class:!0});var _s=c(st);wt=p(_s,"A",{id:!0,class:!0,href:!0});var ar=c(wt);be=p(ar,"SPAN",{});var nr=c(be);w(Rt.$$.fragment,nr),nr.forEach(r),ar.forEach(r),Va=$(_s),Pe=p(_s,"SPAN",{});var rr=c(Pe);Wa=f(rr,"Preview a dataset"),rr.forEach(r),_s.forEach(r),ps=$(s),z=p(s,"P",{});var Kt=c(z);Za=f(Kt,"The "),Ge=p(Kt,"CODE",{});var or=c(Ge);tn=f(or,"/first-rows"),or.forEach(r),en=f(Kt," endpoint returns a JSON list of the first 100 rows of a dataset. You should specify the dataset name, configuration name (you can find out the configuration name from the "),Ie=p(Kt,"CODE",{});var lr=c(Ie);sn=f(lr,"/splits"),lr.forEach(r),an=f(Kt," endpoint), and split name of the dataset you\u2019d like to preview:"),Kt.forEach(r),cs=$(s),w(vt.$$.fragment,s),this.h()},h(){q(e,"name","hf:doc:metadata"),q(e,"content",JSON.stringify(Fr)),q(o,"id","quickstart"),q(o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(o,"href","#quickstart"),q(t,"class","relative group"),q(Ut,"href","./valid"),q(Ht,"href","./valid"),q(Jt,"href","./splits"),q(zt,"href","./first-rows"),q(qt,"href","https://www.postman.com/huggingface/workspace/hugging-face-apis/documentation/23242779-d068584e-96d1-4d92-a703-7cb12cbd8053"),q(qt,"rel","nofollow"),q(Tt,"href","https://redocly.github.io/redoc/?url=https://datasets-server.huggingface.co/openapi.json"),q(Tt,"rel","nofollow"),q(At,"href","https://rapidapi.com/hugging-face-hugging-face-default/api/hugging-face-datasets-api/"),q(At,"rel","nofollow"),q(ct,"id","gated-datasets"),q(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(ct,"href","#gated-datasets"),q(Z,"class","relative group"),q(ut,"id","check-dataset-validity"),q(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(ut,"href","#check-dataset-validity"),q(tt,"class","relative group"),q(It,"href","https://huggingface.co/datasets/rotten_tomatoes"),q(It,"rel","nofollow"),q(mt,"id","list-configurations-and-splits"),q(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(mt,"href","#list-configurations-and-splits"),q(et,"class","relative group"),q(wt,"id","preview-a-dataset"),q(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),q(wt,"href","#preview-a-dataset"),q(st,"class","relative group")},m(s,u){a(document.head,e),g(s,n,u),g(s,t,u),a(t,o),a(o,h),v(x,h,null),a(t,nt),a(t,R),a(R,kt),g(s,Y,u),g(s,D,u),a(D,Et),g(s,V,u),g(s,A,u),a(A,W),a(W,rt),a(A,E),a(A,T),a(T,Ot),a(A,Nt),a(A,ot),a(ot,Lt),g(s,Ce,u),g(s,Ct,u),a(Ct,ws),g(s,Ue,u),g(s,lt,u),a(lt,Qt),a(Qt,S),a(S,Yt),a(Yt,vs),a(S,js),a(S,Vt),a(Vt,ys),a(S,ks),a(S,Wt),a(Wt,Es),a(S,qs),a(S,Zt),a(Zt,Ts),a(S,As),a(S,He),a(lt,bs),a(lt,J),a(J,O),a(O,te),a(te,Ut),a(Ut,Ps),a(O,Gs),a(O,ee),a(ee,Is),a(O,Ds),a(O,se),a(se,Rs),a(O,Ss),a(O,ae),a(ae,Os),a(O,Ns),a(O,xe),a(J,Ls),a(J,N),a(N,ne),a(ne,Ht),a(Ht,Cs),a(N,Us),a(N,re),a(re,Hs),a(N,xs),a(N,oe),a(oe,Js),a(N,Bs),a(N,xt),a(xt,le),a(le,zs),a(xt,Xs),a(N,Fs),a(N,Je),a(J,Ms),a(J,L),a(L,pe),a(pe,Jt),a(Jt,Ks),a(L,Qs),a(L,ce),a(ce,Ys),a(L,Vs),a(L,ie),a(ie,Ws),a(L,Zs),a(L,Bt),a(Bt,fe),a(fe,ta),a(Bt,ea),a(L,sa),a(L,Be),a(J,aa),a(J,C),a(C,ue),a(ue,zt),a(zt,na),a(C,ra),a(C,he),a(he,oa),a(C,la),a(C,de),a(de,pa),a(C,ca),a(C,P),a(P,ia),a(P,$e),a($e,fa),a(P,ua),a(P,ha),a(P,da),a(P,me),a(me,$a),a(P,ma),a(P,ga),a(P,_a),a(P,ge),a(ge,wa),a(P,va),a(C,ja),a(C,ze),g(s,Xe,u),g(s,Xt,u),a(Xt,ya),g(s,Fe,u),v(pt,s,u),g(s,Me,u),g(s,U,u),a(U,ka),a(U,qt),a(qt,Ea),a(U,qa),a(U,Tt),a(Tt,Ta),a(U,Aa),a(U,At),a(At,ba),a(U,Pa),g(s,Ke,u),g(s,Ft,u),a(Ft,Ga),g(s,Qe,u),v(bt,s,u),g(s,Ye,u),g(s,Z,u),a(Z,ct),a(ct,_e),v(Pt,_e,null),a(Z,Ia),a(Z,we),a(we,Da),g(s,Ve,u),g(s,it,u),a(it,Ra),a(it,ve),a(ve,Sa),a(it,Oa),g(s,We,u),v(ft,s,u),g(s,Ze,u),g(s,tt,u),a(tt,ut),a(ut,je),v(Gt,je,null),a(tt,Na),a(tt,ye),a(ye,La),g(s,ts,u),g(s,ht,u),a(ht,Ca),a(ht,ke),a(ke,Ua),a(ht,Ha),g(s,es,u),v(dt,s,u),g(s,ss,u),g(s,B,u),a(B,xa),a(B,It),a(It,Ja),a(B,Ba),a(B,Ee),a(Ee,za),a(B,Xa),g(s,as,u),v($t,s,u),g(s,ns,u),g(s,et,u),a(et,mt),a(mt,qe),v(Dt,qe,null),a(et,Fa),a(et,Te),a(Te,Ma),g(s,rs,u),g(s,gt,u),a(gt,Ka),a(gt,Ae),a(Ae,Qa),a(gt,Ya),g(s,os,u),v(_t,s,u),g(s,ls,u),g(s,st,u),a(st,wt),a(wt,be),v(Rt,be,null),a(st,Va),a(st,Pe),a(Pe,Wa),g(s,ps,u),g(s,z,u),a(z,Za),a(z,Ge),a(Ge,tn),a(z,en),a(z,Ie),a(Ie,sn),a(z,an),g(s,cs,u),v(vt,s,u),is=!0},p(s,[u]){const St={};u&2&&(St.$$scope={dirty:u,ctx:s}),pt.$set(St);const De={};u&2&&(De.$$scope={dirty:u,ctx:s}),ft.$set(De);const Re={};u&2&&(Re.$$scope={dirty:u,ctx:s}),dt.$set(Re);const Se={};u&2&&(Se.$$scope={dirty:u,ctx:s}),$t.$set(Se);const Oe={};u&2&&(Oe.$$scope={dirty:u,ctx:s}),_t.$set(Oe);const at={};u&2&&(at.$$scope={dirty:u,ctx:s}),vt.$set(at)},i(s){is||(j(x.$$.fragment,s),j(pt.$$.fragment,s),j(bt.$$.fragment,s),j(Pt.$$.fragment,s),j(ft.$$.fragment,s),j(Gt.$$.fragment,s),j(dt.$$.fragment,s),j($t.$$.fragment,s),j(Dt.$$.fragment,s),j(_t.$$.fragment,s),j(Rt.$$.fragment,s),j(vt.$$.fragment,s),is=!0)},o(s){y(x.$$.fragment,s),y(pt.$$.fragment,s),y(bt.$$.fragment,s),y(Pt.$$.fragment,s),y(ft.$$.fragment,s),y(Gt.$$.fragment,s),y(dt.$$.fragment,s),y($t.$$.fragment,s),y(Dt.$$.fragment,s),y(_t.$$.fragment,s),y(Rt.$$.fragment,s),y(vt.$$.fragment,s),is=!1},d(s){r(e),s&&r(n),s&&r(t),k(x),s&&r(Y),s&&r(D),s&&r(V),s&&r(A),s&&r(Ce),s&&r(Ct),s&&r(Ue),s&&r(lt),s&&r(Xe),s&&r(Xt),s&&r(Fe),k(pt,s),s&&r(Me),s&&r(U),s&&r(Ke),s&&r(Ft),s&&r(Qe),k(bt,s),s&&r(Ye),s&&r(Z),k(Pt),s&&r(Ve),s&&r(it),s&&r(We),k(ft,s),s&&r(Ze),s&&r(tt),k(Gt),s&&r(ts),s&&r(ht),s&&r(es),k(dt,s),s&&r(ss),s&&r(B),s&&r(as),k($t,s),s&&r(ns),s&&r(et),k(Dt),s&&r(rs),s&&r(gt),s&&r(os),k(_t,s),s&&r(ls),s&&r(st),k(Rt),s&&r(ps),s&&r(z),s&&r(cs),k(vt,s)}}}const Fr={local:"quickstart",sections:[{local:"gated-datasets",title:"Gated datasets"},{local:"check-dataset-validity",title:"Check dataset validity"},{local:"list-configurations-and-splits",title:"List configurations and splits"},{local:"preview-a-dataset",title:"Preview a dataset"}],title:"Quickstart"};function Mr(m){return ur(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wr extends pr{constructor(e){super();cr(this,e,Mr,Xr,ir,{})}}export{Wr as default,Fr as metadata};
