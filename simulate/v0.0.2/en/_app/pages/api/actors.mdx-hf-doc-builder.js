import{S as De,i as Me,s as Ie,e as a,k as s,w as V,t as p,M as Ue,c as n,d as o,m as c,a as r,x as q,h,b as g,G as t,g as b,y as B,L as Fe,q as W,o as H,B as G,v as Ve}from"../../chunks/vendor-hf-doc-builder.js";import{D as ee}from"../../chunks/Docstring-hf-doc-builder.js";import{I as qe}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Be($e){let f,J,u,v,P,$,te,R,oe,j,l,w,ae,T,ne,re,A,x,ie,O,se,z,i,E,ce,k,le,me,D,de,pe,y,M,he,ge,I,fe,ue,U,ye,ve,_,N,Ae,F,_e,K,L,be,Q;return $=new qe({}),w=new ee({props:{name:"class simulate.SimpleActor",anchor:"simulate.SimpleActor",parameters:[{name:"name",val:": typing.Optional[str] = None"},{name:"position",val:": typing.Optional[typing.List[float]] = None"},{name:"rotation",val:": typing.Optional[typing.List[float]] = None"},{name:"scaling",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"transformation_matrix",val:": typing.Optional[numpy.ndarray] = None"},{name:"material",val:": typing.Optional[simulate.assets.material.Material] = None"},{name:"parent",val:": typing.Optional[ForwardRef('Asset')] = None"},{name:"children",val:": typing.Union[ForwardRef('Asset'), typing.List[ForwardRef('Asset')], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"simulate.SimpleActor.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
Name of the actor.`,name:"name"},{anchor:"simulate.SimpleActor.position",description:`<strong>position</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
Position of the actor in the scene.`,name:"position"},{anchor:"simulate.SimpleActor.rotation",description:`<strong>rotation</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
Rotation of the actor in the scene.`,name:"rotation"},{anchor:"simulate.SimpleActor.scaling",description:`<strong>scaling</strong> (<code>Union[float, List[float]]</code>, <em>optional</em>, defaults to <code>1.0</code>) &#x2014;
Scaling of the actor in the scene.`,name:"scaling"},{anchor:"simulate.SimpleActor.transformation_matrix",description:`<strong>transformation_matrix</strong> (<code>np.ndarray</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Transformation matrix of the actor in the scene.`,name:"transformation_matrix"},{anchor:"simulate.SimpleActor.parent",description:`<strong>parent</strong> (<code>Asset</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Parent of the actor in the scene.`,name:"parent"},{anchor:"simulate.SimpleActor.children",description:`<strong>children</strong> (<code>Asset</code> or <code>List[Asset]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Children of the actor in the scene.`,name:"children"}],source:"https://github.com/huggingface/simulate/blob/v0.0.2/src/simulate/assets/actors.py#L30"}}),x=new ee({props:{name:"copy",anchor:"simulate.SimpleActor.copy",parameters:[{name:"with_children",val:": bool = True"},{name:"**kwargs",val:": typing.Any"}],parametersDescription:[{anchor:"simulate.SimpleActor.copy.with_children",description:`<strong>with_children</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to copy the children of the asset.`,name:"with_children"}],source:"https://github.com/huggingface/simulate/blob/v0.0.2/src/simulate/assets/actors.py#L99",returnDescription:`
<p>The copied asset.</p>
`,returnType:`
<p>copy (<code>SimpleActor</code>)</p>
`}}),E=new ee({props:{name:"class simulate.EgocentricCameraActor",anchor:"simulate.EgocentricCameraActor",parameters:[{name:"mass",val:": float = 1.0"},{name:"name",val:": typing.Optional[str] = None"},{name:"position",val:": typing.Optional[typing.List[float]] = None"},{name:"rotation",val:": typing.Optional[typing.List[float]] = None"},{name:"scaling",val:": typing.Union[float, typing.List[float], NoneType] = None"},{name:"camera_height",val:": int = 40"},{name:"camera_width",val:": int = 40"},{name:"camera_tag",val:": typing.Optional[str] = 'CameraSensor'"},{name:"transformation_matrix",val:": typing.Optional[numpy.ndarray] = None"},{name:"material",val:": typing.Optional[simulate.assets.material.Material] = None"},{name:"parent",val:": typing.Optional[ForwardRef('Asset')] = None"},{name:"children",val:": typing.Union[ForwardRef('Asset'), typing.List[ForwardRef('Asset')], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"simulate.EgocentricCameraActor.mass",description:`<strong>mass</strong> (<code>float</code>, <em>optional</em>, defaults to <code>1.0</code>) &#x2014;
Mass of the actor.`,name:"mass"},{anchor:"simulate.EgocentricCameraActor.name",description:`<strong>name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Name of the actor.`,name:"name"},{anchor:"simulate.EgocentricCameraActor.position",description:`<strong>position</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 1.05, 0.0]</code>) &#x2014;
Position of the actor in the scene.`,name:"position"},{anchor:"simulate.EgocentricCameraActor.rotation",description:`<strong>rotation</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>[0.0, 0.0, 0.0]</code>) &#x2014;
Rotation of the actor in the scene.`,name:"rotation"},{anchor:"simulate.EgocentricCameraActor.scaling",description:`<strong>scaling</strong> (<code>float</code> or <code>List[float]</code>, <em>optional</em>, defaults to <code>1.0</code>) &#x2014;
Scaling of the actor in the scene.`,name:"scaling"},{anchor:"simulate.EgocentricCameraActor.camera_height",description:`<strong>camera_height</strong> (<code>int</code>, <em>optional</em>, defaults to <code>40</code>) &#x2014;
Height of the camera above the actor.`,name:"camera_height"},{anchor:"simulate.EgocentricCameraActor.camera_width",description:`<strong>camera_width</strong> (<code>int</code>, <em>optional</em>, defaults to <code>40</code>) &#x2014;
Width of the camera above the actor.`,name:"camera_width"},{anchor:"simulate.EgocentricCameraActor.transformation_matrix",description:`<strong>transformation_matrix</strong> (<code>np.ndarray</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Transformation matrix of the actor in the scene.`,name:"transformation_matrix"},{anchor:"simulate.EgocentricCameraActor.parent",description:`<strong>parent</strong> (<code>Asset</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Parent of the actor in the scene.`,name:"parent"},{anchor:"simulate.EgocentricCameraActor.children",description:`<strong>children</strong> (<code>Asset</code> or <code>List[Asset]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Children of the actor in the scene.`,name:"children"}],source:"https://github.com/huggingface/simulate/blob/v0.0.2/src/simulate/assets/actors.py#L134"}}),N=new ee({props:{name:"copy",anchor:"simulate.EgocentricCameraActor.copy",parameters:[{name:"with_children",val:": bool = True"},{name:"**kwargs",val:": typing.Any"}],parametersDescription:[{anchor:"simulate.EgocentricCameraActor.copy.with_children",description:`<strong>with_children</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to copy the children of the asset.`,name:"with_children"}],source:"https://github.com/huggingface/simulate/blob/v0.0.2/src/simulate/assets/actors.py#L219",returnDescription:`
<p>The copied asset.</p>
`,returnType:`
<p>copy (<code>EgocentricCameraActor</code>)</p>
`}}),{c(){f=a("meta"),J=s(),u=a("h1"),v=a("a"),P=a("span"),V($.$$.fragment),te=s(),R=a("span"),oe=p("Actors"),j=s(),l=a("div"),V(w.$$.fragment),ae=s(),T=a("p"),ne=p("Creates a bare-bones RL agent in the scene."),re=s(),A=a("div"),V(x.$$.fragment),ie=s(),O=a("p"),se=p("Make a copy of the Asset. Parent and children are not attached to the copy."),z=s(),i=a("div"),V(E.$$.fragment),ce=s(),k=a("p"),le=p("Create an Egocentric RL Actor in the Scene \u2014 essentially a basic first-person agent."),me=s(),D=a("p"),de=p("An egocentric actor is a capsule asset with:"),pe=s(),y=a("ul"),M=a("li"),he=p("a Camera as a child asset for observation device"),ge=s(),I=a("li"),fe=p("a RigidBodyComponent component with a mass of 1.0"),ue=s(),U=a("li"),ye=p("a discrete actuator"),ve=s(),_=a("div"),V(N.$$.fragment),Ae=s(),F=a("p"),_e=p("Make a copy of the Asset. Parent and children are not attached to the copy."),K=s(),L=a("p"),be=p("Under construction \u{1F6A7}."),this.h()},l(e){const m=Ue('[data-svelte="svelte-1phssyn"]',document.head);f=n(m,"META",{name:!0,content:!0}),m.forEach(o),J=c(e),u=n(e,"H1",{class:!0});var X=r(u);v=n(X,"A",{id:!0,class:!0,href:!0});var we=r(v);P=n(we,"SPAN",{});var xe=r(P);q($.$$.fragment,xe),xe.forEach(o),we.forEach(o),te=c(X),R=n(X,"SPAN",{});var Ee=r(R);oe=h(Ee,"Actors"),Ee.forEach(o),X.forEach(o),j=c(e),l=n(e,"DIV",{class:!0});var C=r(l);q(w.$$.fragment,C),ae=c(C),T=n(C,"P",{});var Ne=r(T);ne=h(Ne,"Creates a bare-bones RL agent in the scene."),Ne.forEach(o),re=c(C),A=n(C,"DIV",{class:!0});var Y=r(A);q(x.$$.fragment,Y),ie=c(Y),O=n(Y,"P",{});var Le=r(O);se=h(Le,"Make a copy of the Asset. Parent and children are not attached to the copy."),Le.forEach(o),Y.forEach(o),C.forEach(o),z=c(e),i=n(e,"DIV",{class:!0});var d=r(i);q(E.$$.fragment,d),ce=c(d),k=n(d,"P",{});var Ce=r(k);le=h(Ce,"Create an Egocentric RL Actor in the Scene \u2014 essentially a basic first-person agent."),Ce.forEach(o),me=c(d),D=n(d,"P",{});var Se=r(D);de=h(Se,"An egocentric actor is a capsule asset with:"),Se.forEach(o),pe=c(d),y=n(d,"UL",{});var S=r(y);M=n(S,"LI",{});var Pe=r(M);he=h(Pe,"a Camera as a child asset for observation device"),Pe.forEach(o),ge=c(S),I=n(S,"LI",{});var Re=r(I);fe=h(Re,"a RigidBodyComponent component with a mass of 1.0"),Re.forEach(o),ue=c(S),U=n(S,"LI",{});var Te=r(U);ye=h(Te,"a discrete actuator"),Te.forEach(o),S.forEach(o),ve=c(d),_=n(d,"DIV",{class:!0});var Z=r(_);q(N.$$.fragment,Z),Ae=c(Z),F=n(Z,"P",{});var Oe=r(F);_e=h(Oe,"Make a copy of the Asset. Parent and children are not attached to the copy."),Oe.forEach(o),Z.forEach(o),d.forEach(o),K=c(e),L=n(e,"P",{});var ke=r(L);be=h(ke,"Under construction \u{1F6A7}."),ke.forEach(o),this.h()},h(){g(f,"name","hf:doc:metadata"),g(f,"content",JSON.stringify(We)),g(v,"id","simulate.SimpleActor"),g(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),g(v,"href","#simulate.SimpleActor"),g(u,"class","relative group"),g(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),g(l,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),g(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),g(i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,f),b(e,J,m),b(e,u,m),t(u,v),t(v,P),B($,P,null),t(u,te),t(u,R),t(R,oe),b(e,j,m),b(e,l,m),B(w,l,null),t(l,ae),t(l,T),t(T,ne),t(l,re),t(l,A),B(x,A,null),t(A,ie),t(A,O),t(O,se),b(e,z,m),b(e,i,m),B(E,i,null),t(i,ce),t(i,k),t(k,le),t(i,me),t(i,D),t(D,de),t(i,pe),t(i,y),t(y,M),t(M,he),t(y,ge),t(y,I),t(I,fe),t(y,ue),t(y,U),t(U,ye),t(i,ve),t(i,_),B(N,_,null),t(_,Ae),t(_,F),t(F,_e),b(e,K,m),b(e,L,m),t(L,be),Q=!0},p:Fe,i(e){Q||(W($.$$.fragment,e),W(w.$$.fragment,e),W(x.$$.fragment,e),W(E.$$.fragment,e),W(N.$$.fragment,e),Q=!0)},o(e){H($.$$.fragment,e),H(w.$$.fragment,e),H(x.$$.fragment,e),H(E.$$.fragment,e),H(N.$$.fragment,e),Q=!1},d(e){o(f),e&&o(J),e&&o(u),G($),e&&o(j),e&&o(l),G(w),G(x),e&&o(z),e&&o(i),G(E),G(N),e&&o(K),e&&o(L)}}}const We={local:"simulate.SimpleActor",title:"Actors"};function He($e){return Ve(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ze extends De{constructor(f){super();Me(this,f,He,Be,Ie,{})}}export{ze as default,We as metadata};
