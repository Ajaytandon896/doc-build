import{S as Ne,i as Fe,s as qe,e as a,k as l,w as S,t as u,M as Me,c as r,d as n,m as c,a as o,x as A,h as f,b as s,G as t,g as E,y as V,L as We,q as k,o as U,B as C,v as Be}from"../../chunks/vendor-hf-doc-builder.js";import{D as M}from"../../chunks/Docstring-hf-doc-builder.js";import{I as He}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Je(Pe){let h,K,v,g,W,w,oe,B,se,Q,i,L,ie,G,le,D,ce,me,_,O,pe,H,de,ue,b,R,fe,J,he,ve,$,P,ge,j,_e,X,m,T,be,N,$e,x,ye,Ee,y,I,we,z,Le,Y,F,De,Z;return w=new He({}),L=new M({props:{name:"class simulate.RLEnv",anchor:"simulate.RLEnv",parameters:[{name:"scene_or_map_fn",val:": typing.Union[typing.Callable, simulate.scene.Scene]"},{name:"n_maps",val:": typing.Optional[int] = 1"},{name:"n_show",val:": typing.Optional[int] = 1"},{name:"time_step",val:": typing.Optional[float] = 0.03333333333333333"},{name:"frame_skip",val:": typing.Optional[int] = 4"},{name:"**engine_kwargs",val:""}],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/rl_env.py#L40"}}),O=new M({props:{name:"reset",anchor:"simulate.RLEnv.reset",parameters:[],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/rl_env.py#L188",returnDescription:`
<p>the observation of the environment after reset.</p>
`,returnType:`
<p>obs (<code>Dict</code>)</p>
`}}),R=new M({props:{name:"sample_action",anchor:"simulate.RLEnv.sample_action",parameters:[],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/rl_env.py#L223",returnDescription:`
<p>TODO</p>
`,returnType:`
<p>action</p>
`}}),P=new M({props:{name:"step",anchor:"simulate.RLEnv.step",parameters:[{name:"action",val:": typing.Union[typing.Dict, typing.List, numpy.ndarray]"}],parametersDescription:[{anchor:"simulate.RLEnv.step.action",description:"<strong>action</strong> (<code>Dict</code> or <code>List</code>) &#x2014; TODO verify, a dict with actuator tags as keys and as values a Tensor of shape (n_show, n_actors, n_actions)",name:"action"}],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/rl_env.py#L113",returnDescription:`
<p>TODO
reward (<code>float</code>): TODO
done (<code>bool</code>): TODO
info: TODO</p>
`,returnType:`
<p>observation (<code>Dict</code>)</p>
`}}),T=new M({props:{name:"class simulate.ParallelRLEnv",anchor:"simulate.ParallelRLEnv",parameters:[{name:"env_fn",val:": typing.Callable"},{name:"n_parallel",val:": int"},{name:"starting_port",val:": int = 55001"}],parametersDescription:[{anchor:"simulate.ParallelRLEnv.env_fn",description:"<strong>env_fn</strong> (<code>Callable</code>) &#x2014; a generator function that returns a RLEnv for generating instances of the desired environment.",name:"env_fn"},{anchor:"simulate.ParallelRLEnv.n_parallel",description:"<strong>n_parallel</strong> (<code>int</code>) &#x2014; the number of executable instances to create.",name:"n_parallel"},{anchor:"simulate.ParallelRLEnv.starting_port",description:"<strong>starting_port</strong> (`int) &#x2014; initial communication port for spawned executables.",name:"starting_port"}],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/parallel_rl_env.py#L33"}}),I=new M({props:{name:"step",anchor:"simulate.ParallelRLEnv.step",parameters:[{name:"actions",val:": typing.Union[<built-in function array>, NoneType] = None"}],parametersDescription:[{anchor:"simulate.ParallelRLEnv.step.actions",description:"<strong>actions</strong> (<code>Dict</code> or <code>List</code>) &#x2014; TODO verify, a dict with actuator tags as keys and as values a Tensor of shape (n_show, n_actors, n_actions)",name:"actions"}],source:"https://github.com/huggingface/simulate/blob/main/src/simulate/rl/parallel_rl_env.py#L62",returnDescription:`
<p>TODO
all_reward (<code>float</code>): TODO
all_done (<code>bool</code>): TODO
all_info: TODO</p>
`,returnType:`
<p>all_observation (<code>Dict</code>)</p>
`}}),{c(){h=a("meta"),K=l(),v=a("h1"),g=a("a"),W=a("span"),S(w.$$.fragment),oe=l(),B=a("span"),se=u("RL Environment Wrappers"),Q=l(),i=a("div"),S(L.$$.fragment),ie=l(),G=a("p"),le=u(`RL environment wrapper for Simulate scene. Uses functionality from the VecEnv in stable baselines 3
For more information on VecEnv, see the source
`),D=a("a"),ce=u("https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),me=l(),_=a("div"),S(O.$$.fragment),pe=l(),H=a("p"),de=u("Resets the actors and the scene of the environment."),ue=l(),b=a("div"),S(R.$$.fragment),fe=l(),J=a("p"),he=u("Samples an action from the actors in the environment. This function loads the configuration of maps and actors to return the correct shape across multiple configurations."),ve=l(),$=a("div"),S(P.$$.fragment),ge=l(),j=a("p"),_e=u("The step function for the environment, follows the API from OpenAI Gym."),X=l(),m=a("div"),S(T.$$.fragment),be=l(),N=a("p"),$e=u(`Parallel RL environment wrapper for Simulate scene. Spawns multiple backend executables to run in parallel, in addition to the optionality of multiple maps.
Uses functionality from the VecEnv in stable baselines 3. For more information on VecEnv, see the source
`),x=a("a"),ye=u("https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),Ee=l(),y=a("div"),S(I.$$.fragment),we=l(),z=a("p"),Le=u("The step function for the environment, follows the API from OpenAI Gym."),Y=l(),F=a("p"),De=u("Under construction \u{1F6A7}."),this.h()},l(e){const p=Me('[data-svelte="svelte-1phssyn"]',document.head);h=r(p,"META",{name:!0,content:!0}),p.forEach(n),K=c(e),v=r(e,"H1",{class:!0});var ee=o(v);g=r(ee,"A",{id:!0,class:!0,href:!0});var Te=o(g);W=r(Te,"SPAN",{});var xe=o(W);A(w.$$.fragment,xe),xe.forEach(n),Te.forEach(n),oe=c(ee),B=r(ee,"SPAN",{});var Ie=o(B);se=f(Ie,"RL Environment Wrappers"),Ie.forEach(n),ee.forEach(n),Q=c(e),i=r(e,"DIV",{class:!0});var d=o(i);A(L.$$.fragment,d),ie=c(d),G=r(d,"P",{});var Oe=o(G);le=f(Oe,`RL environment wrapper for Simulate scene. Uses functionality from the VecEnv in stable baselines 3
For more information on VecEnv, see the source
`),D=r(Oe,"A",{href:!0,rel:!0});var Se=o(D);ce=f(Se,"https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),Se.forEach(n),Oe.forEach(n),me=c(d),_=r(d,"DIV",{class:!0});var te=o(_);A(O.$$.fragment,te),pe=c(te),H=r(te,"P",{});var Ae=o(H);de=f(Ae,"Resets the actors and the scene of the environment."),Ae.forEach(n),te.forEach(n),ue=c(d),b=r(d,"DIV",{class:!0});var ne=o(b);A(R.$$.fragment,ne),fe=c(ne),J=r(ne,"P",{});var Ve=o(J);he=f(Ve,"Samples an action from the actors in the environment. This function loads the configuration of maps and actors to return the correct shape across multiple configurations."),Ve.forEach(n),ne.forEach(n),ve=c(d),$=r(d,"DIV",{class:!0});var ae=o($);A(P.$$.fragment,ae),ge=c(ae),j=r(ae,"P",{});var ke=o(j);_e=f(ke,"The step function for the environment, follows the API from OpenAI Gym."),ke.forEach(n),ae.forEach(n),d.forEach(n),X=c(e),m=r(e,"DIV",{class:!0});var q=o(m);A(T.$$.fragment,q),be=c(q),N=r(q,"P",{});var Re=o(N);$e=f(Re,`Parallel RL environment wrapper for Simulate scene. Spawns multiple backend executables to run in parallel, in addition to the optionality of multiple maps.
Uses functionality from the VecEnv in stable baselines 3. For more information on VecEnv, see the source
`),x=r(Re,"A",{href:!0,rel:!0});var Ue=o(x);ye=f(Ue,"https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),Ue.forEach(n),Re.forEach(n),Ee=c(q),y=r(q,"DIV",{class:!0});var re=o(y);A(I.$$.fragment,re),we=c(re),z=r(re,"P",{});var Ce=o(z);Le=f(Ce,"The step function for the environment, follows the API from OpenAI Gym."),Ce.forEach(n),re.forEach(n),q.forEach(n),Y=c(e),F=r(e,"P",{});var Ge=o(F);De=f(Ge,"Under construction \u{1F6A7}."),Ge.forEach(n),this.h()},h(){s(h,"name","hf:doc:metadata"),s(h,"content",JSON.stringify(je)),s(g,"id","simulate.RLEnv"),s(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),s(g,"href","#simulate.RLEnv"),s(v,"class","relative group"),s(D,"href","https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),s(D,"rel","nofollow"),s(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(i,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(x,"href","https://stable-baselines3.readthedocs.io/en/master/guide/vec_envs.html"),s(x,"rel","nofollow"),s(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),s(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){t(document.head,h),E(e,K,p),E(e,v,p),t(v,g),t(g,W),V(w,W,null),t(v,oe),t(v,B),t(B,se),E(e,Q,p),E(e,i,p),V(L,i,null),t(i,ie),t(i,G),t(G,le),t(G,D),t(D,ce),t(i,me),t(i,_),V(O,_,null),t(_,pe),t(_,H),t(H,de),t(i,ue),t(i,b),V(R,b,null),t(b,fe),t(b,J),t(J,he),t(i,ve),t(i,$),V(P,$,null),t($,ge),t($,j),t(j,_e),E(e,X,p),E(e,m,p),V(T,m,null),t(m,be),t(m,N),t(N,$e),t(N,x),t(x,ye),t(m,Ee),t(m,y),V(I,y,null),t(y,we),t(y,z),t(z,Le),E(e,Y,p),E(e,F,p),t(F,De),Z=!0},p:We,i(e){Z||(k(w.$$.fragment,e),k(L.$$.fragment,e),k(O.$$.fragment,e),k(R.$$.fragment,e),k(P.$$.fragment,e),k(T.$$.fragment,e),k(I.$$.fragment,e),Z=!0)},o(e){U(w.$$.fragment,e),U(L.$$.fragment,e),U(O.$$.fragment,e),U(R.$$.fragment,e),U(P.$$.fragment,e),U(T.$$.fragment,e),U(I.$$.fragment,e),Z=!1},d(e){n(h),e&&n(K),e&&n(v),C(w),e&&n(Q),e&&n(i),C(L),C(O),C(R),C(P),e&&n(X),e&&n(m),C(T),C(I),e&&n(Y),e&&n(F)}}}const je={local:"simulate.RLEnv",title:"RL Environment Wrappers"};function ze(Pe){return Be(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ye extends Ne{constructor(h){super();Fe(this,h,ze,Je,qe,{})}}export{Ye as default,je as metadata};
