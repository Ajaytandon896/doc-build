import{S as gs,i as ys,s as ws,O as Aa,P as Ca,a as n,d as s,b as h,g as p,G as t,L as bs,e as a,k as u,t as o,c as l,m as d,h as i,f as No,j as Mo,w as S,x,y as A,Q as vs,q as C,o as L,B as O,R as Ro,T as Bo,M as Uo,N as qo,v as Ho}from"../chunks/vendor-hf-doc-builder.js";import{I as K}from"../chunks/IconCopyLink-hf-doc-builder.js";function zo(g){const r=document.createElement("textarea");document.body.appendChild(r),r.value=g,r.select(),document.execCommand("copy"),document.body.removeChild(r)}function Go(g){let r,f,v,b;return{c(){r=Aa("svg"),f=Aa("path"),v=Aa("path"),b=Aa("rect"),this.h()},l(w){r=Ca(w,"svg",{class:!0,xmlns:!0,"aria-hidden":!0,fill:!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var m=n(r);f=Ca(m,"path",{d:!0,transform:!0}),n(f).forEach(s),v=Ca(m,"path",{d:!0,transform:!0}),n(v).forEach(s),b=Ca(m,"rect",{fill:!0,width:!0,height:!0}),n(b).forEach(s),m.forEach(s),this.h()},h(){h(f,"d","M28,10V28H10V10H28m0-2H10a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V10a2,2,0,0,0-2-2Z"),h(f,"transform","translate(0)"),h(v,"d","M4,18H2V4A2,2,0,0,1,4,2H18V4H4Z"),h(v,"transform","translate(0)"),h(b,"fill","none"),h(b,"width","32"),h(b,"height","32"),h(r,"class",g[0]),h(r,"xmlns","http://www.w3.org/2000/svg"),h(r,"aria-hidden","true"),h(r,"fill","currentColor"),h(r,"focusable","false"),h(r,"role","img"),h(r,"width","1em"),h(r,"height","1em"),h(r,"preserveAspectRatio","xMidYMid meet"),h(r,"viewBox","0 0 32 32")},m(w,m){p(w,r,m),t(r,f),t(r,v),t(r,b)},p(w,[m]){m&1&&h(r,"class",w[0])},i:bs,o:bs,d(w){w&&s(r)}}}function Vo(g,r,f){let{classNames:v=""}=r;return g.$$set=b=>{"classNames"in b&&f(0,v=b.classNames)},[v]}class Qo extends gs{constructor(r){super();ys(this,r,Vo,Go,ws,{classNames:0})}}function Fo(g){let r,f,v,b,w;return{c(){r=a("div"),f=a("div"),v=u(),b=o(g[1]),this.h()},l(m){r=l(m,"DIV",{class:!0});var k=n(r);f=l(k,"DIV",{class:!0,style:!0}),n(f).forEach(s),v=d(k),b=i(k,g[1]),k.forEach(s),this.h()},h(){h(f,"class","absolute bottom-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-black border-4 border-t-0"),No(f,"border-left-color","transparent"),No(f,"border-right-color","transparent"),h(r,"class",w="absolute pointer-events-none transition-opacity bg-black text-white py-1 px-2 leading-tight rounded font-normal shadow "+g[2]+" "+g[0])},m(m,k){p(m,r,k),t(r,f),t(r,v),t(r,b)},p(m,[k]){k&2&&Mo(b,m[1]),k&5&&w!==(w="absolute pointer-events-none transition-opacity bg-black text-white py-1 px-2 leading-tight rounded font-normal shadow "+m[2]+" "+m[0])&&h(r,"class",w)},i:bs,o:bs,d(m){m&&s(r)}}}function Ko(g,r,f){let{classNames:v=""}=r,{label:b="Copied"}=r,{position:w="left-1/2 top-full transform -translate-x-1/2 translate-y-2"}=r;return g.$$set=m=>{"classNames"in m&&f(0,v=m.classNames),"label"in m&&f(1,b=m.label),"position"in m&&f(2,w=m.position)},[v,b,w]}class Wo extends gs{constructor(r){super();ys(this,r,Ko,Fo,ws,{classNames:0,label:1,position:2})}}function Yo(g){let r,f,v,b,w,m,k,P,$;return f=new Qo({}),b=new Wo({props:{classNames:g[4]?"opacity-100":"opacity-0"}}),{c(){r=a("button"),S(f.$$.fragment),v=u(),S(b.$$.fragment),this.h()},l(y){r=l(y,"BUTTON",{class:!0,title:!0,type:!0});var j=n(r);x(f.$$.fragment,j),v=d(j),x(b.$$.fragment,j),j.forEach(s),this.h()},h(){h(r,"class",w="inline-flex items-center relative text-sm focus:text-green-500 cursor-pointer focus:outline-none "+g[0]+" "+(g[2]==="text"?"mx-0.5":"")+" "+(g[2]==="button"?"btn":"")+" "+(g[2]==="button-clear"?"py-1 px-2 border rounded-lg shadow-sm":"")+" "+(!g[4]&&["button-clear","text"].includes(g[2])?"text-gray-600":"")+" "+(g[4]?"text-green-500":"")),h(r,"title",m=g[3]||g[1]||"Copy to clipboard"),h(r,"type","button")},m(y,j){p(y,r,j),A(f,r,null),t(r,v),A(b,r,null),k=!0,P||($=vs(r,"click",g[5]),P=!0)},p(y,[j]){const W={};j&16&&(W.classNames=y[4]?"opacity-100":"opacity-0"),b.$set(W),(!k||j&21&&w!==(w="inline-flex items-center relative text-sm focus:text-green-500 cursor-pointer focus:outline-none "+y[0]+" "+(y[2]==="text"?"mx-0.5":"")+" "+(y[2]==="button"?"btn":"")+" "+(y[2]==="button-clear"?"py-1 px-2 border rounded-lg shadow-sm":"")+" "+(!y[4]&&["button-clear","text"].includes(y[2])?"text-gray-600":"")+" "+(y[4]?"text-green-500":"")))&&h(r,"class",w),(!k||j&10&&m!==(m=y[3]||y[1]||"Copy to clipboard"))&&h(r,"title",m)},i(y){k||(C(f.$$.fragment,y),C(b.$$.fragment,y),k=!0)},o(y){L(f.$$.fragment,y),L(b.$$.fragment,y),k=!1},d(y){y&&s(r),O(f),O(b),P=!1,$()}}}function Zo(g,r,f){let{classNames:v=""}=r,{label:b=""}=r,{style:w="text"}=r,{title:m=""}=r,{value:k}=r,P=!1,$;Ro(()=>{$&&clearTimeout($)});function y(){zo(k),f(4,P=!0),$&&clearTimeout($),$=setTimeout(()=>{f(4,P=!1)},1e3)}return g.$$set=j=>{"classNames"in j&&f(0,v=j.classNames),"label"in j&&f(1,b=j.label),"style"in j&&f(2,w=j.style),"title"in j&&f(3,m=j.title),"value"in j&&f(6,k=j.value)},[v,b,w,m,P,y,k]}class Jo extends gs{constructor(r){super();ys(this,r,Zo,Yo,ws,{classNames:0,label:1,style:2,title:3,value:6})}}function Xo(g){let r,f,v,b,w,m,k,P;return v=new Jo({props:{classNames:"transition duration-200 ease-in-out "+(g[2]&&"opacity-0"),label:"code excerpt",value:g[0]}}),{c(){r=a("div"),f=a("div"),S(v.$$.fragment),b=u(),w=a("pre"),this.h()},l($){r=l($,"DIV",{class:!0});var y=n(r);f=l(y,"DIV",{class:!0});var j=n(f);x(v.$$.fragment,j),j.forEach(s),b=d(y),w=l(y,"PRE",{});var W=n(w);W.forEach(s),y.forEach(s),this.h()},h(){h(f,"class","absolute top-2.5 right-4"),h(r,"class","code-block relative")},m($,y){p($,r,y),t(r,f),A(v,f,null),t(r,b),t(r,w),w.innerHTML=g[1],m=!0,k||(P=[vs(r,"mouseover",g[3]),vs(r,"focus",g[3]),vs(r,"mouseout",g[4]),vs(r,"blur",g[4])],k=!0)},p($,[y]){const j={};y&4&&(j.classNames="transition duration-200 ease-in-out "+($[2]&&"opacity-0")),y&1&&(j.value=$[0]),v.$set(j),(!m||y&2)&&(w.innerHTML=$[1])},i($){m||(C(v.$$.fragment,$),m=!0)},o($){L(v.$$.fragment,$),m=!1},d($){$&&s(r),O(v),k=!1,Bo(P)}}}function ei(g,r,f){let v=!0,{code:b=""}=r,{highlighted:w=""}=r;function m(){f(2,v=!1)}function k(){f(2,v=!0)}return g.$$set=P=>{"code"in P&&f(0,b=P.code),"highlighted"in P&&f(1,w=P.highlighted)},[b,w,v,m,k]}class he extends gs{constructor(r){super();ys(this,r,ei,Xo,ws,{code:0,highlighted:1})}}function ti(g){let r,f,v,b,w,m,k,P,$,y,j,W,ue,La,Oa,_s,Te,Ia,js,De,Ta,Es,Y,Da,Ne,Na,qa,ks,qe,Ma,$s,de,Ps,D,Ra,st,Ba,Ua,at,Ha,za,Ss,fe,xs,q,Z,lt,me,Ga,nt,Va,As,Me,Qa,Cs,J,Fa,Re,Ka,Wa,Ls,M,X,rt,ve,Ya,ot,Za,Os,I,Ja,it,Xa,el,ct,tl,sl,pt,al,ll,Is,be,Ts,T,nl,rl,Be,Vn,ol,il,cl,R,ee,ht,ge,pl,ut,hl,Ds,Ue,ul,Ns,ye,qs,te,dl,dt,fl,ml,Ms,He,vl,Rs,_,se,ft,bl,gl,mt,yl,wl,_l,vt,bt,jl,El,gt,yt,kl,$l,wt,_t,Pl,Sl,jt,Et,xl,Al,kt,$t,Cl,Ll,Pt,St,Ol,Il,xt,At,Tl,Dl,Ct,Lt,Nl,ql,Ot,It,Ml,Rl,Tt,Dt,Bl,Ul,Nt,qt,Hl,zl,Mt,Rt,Gl,Vl,Bt,Ut,Ql,Fl,Ht,zt,Kl,Wl,Gt,Vt,Yl,Zl,Qt,Ft,Jl,Bs,ae,Xl,we,en,tn,Us,_e,Hs,ze,sn,zs,Gs,Vs,je,Qn,Qs,Fs,Ks,B,le,Kt,Ee,an,Wt,ln,Ws,Ge,nn,Ys,N,U,rn,Yt,on,cn,Zt,pn,hn,un,H,dn,Jt,fn,mn,Xt,vn,bn,gn,ke,yn,es,wn,_n,Zs,Ve,jn,Js,ne,$e,En,ts,kn,$n,Pn,z,Sn,ss,xn,An,as,Cn,Ln,Xs,Qe,On,ea,Pe,ta,G,re,ls,Se,In,ns,Tn,sa,V,oe,rs,xe,Dn,os,Nn,aa,Fe,qn,la,Q,ie,is,Ae,Mn,cs,Rn,na,Ke,Bn,ra,We,ps,hs,us,Un,oa,F,ce,ds,Ce,Hn,fs,zn,ia,Le,ca,Ye,Gn,pa,Oe,ha;return m=new K({}),de=new he({props:{code:"pip install --upgrade simulate",highlighted:'pip install <span class="hljs-comment">--upgrade simulate</span>'}}),fe=new he({props:{code:"make style",highlighted:'<span class="hljs-attribute">make style</span>'}}),me=new K({}),ve=new K({}),be=new he({props:{code:`from simulate import Scene

scene = Scene.create_from('tests/test_assets/fixtures/Box.gltf')  # either local (priority) or on the hub with full path to file
scene = Scene.create_from('simulate-tests/Box/glTF/Box.gltf', is_local=False)  # Set priority to the hub file

scene.save('local_dir/file.gltf')  # Save to a local file
scene.push_to_hub('simulate-tests/Debug/glTF/Box.gltf')  # Save to the hub`,highlighted:`from simulate import Scene

scene = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Scene</span>.</span></span>create<span class="hljs-constructor">_from(&#x27;<span class="hljs-params">tests</span><span class="hljs-operator">/</span><span class="hljs-params">test_assets</span><span class="hljs-operator">/</span><span class="hljs-params">fixtures</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;)</span>  # either local (priority) <span class="hljs-keyword">or</span> on the hub <span class="hljs-keyword">with</span> full path <span class="hljs-keyword">to</span> file
scene = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Scene</span>.</span></span>create<span class="hljs-constructor">_from(&#x27;<span class="hljs-params">simulate</span>-<span class="hljs-params">tests</span><span class="hljs-operator">/</span>Box<span class="hljs-operator">/</span><span class="hljs-params">glTF</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;, <span class="hljs-params">is_local</span>=False)</span>  # Set priority <span class="hljs-keyword">to</span> the hub file

scene.save(&#x27;local_dir/file.gltf&#x27;)  # Save <span class="hljs-keyword">to</span> a local file
scene.push<span class="hljs-constructor">_to_hub(&#x27;<span class="hljs-params">simulate</span>-<span class="hljs-params">tests</span><span class="hljs-operator">/</span>Debug<span class="hljs-operator">/</span><span class="hljs-params">glTF</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;)</span>  # Save <span class="hljs-keyword">to</span> the hub`}}),ge=new K({}),ye=new he({props:{code:`

scene
Scene(dimensionality=3, engine='PyVistaEngine')
\u2514\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
    \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
`,highlighted:`import simulate as sm

<span class="hljs-built_in">scene</span> = sm.Scene()
<span class="hljs-built_in">scene</span> += sm.Plane() + sm.Sphere(<span class="hljs-built_in">position</span>=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-built_in">radius</span>=<span class="hljs-number">0.2</span>)

&gt;&gt;&gt; <span class="hljs-built_in">scene</span>
&gt;&gt;&gt; Scene(dimensionality=<span class="hljs-number">3</span>, engine=&#x27;PyVistaEngine&#x27;)
&gt;&gt;&gt; \u2514\u2500\u2500 plane_01 (Plane - Mesh: <span class="hljs-number">121</span> <span class="hljs-built_in">points</span>, <span class="hljs-number">100</span> cells)
&gt;&gt;&gt;     \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: <span class="hljs-number">842</span> <span class="hljs-built_in">points</span>, <span class="hljs-number">870</span> cells)

<span class="hljs-built_in">scene</span>.<span class="hljs-built_in">show</span>()`}}),_e=new he({props:{code:"python examples/basic/objects.py",highlighted:'python examples<span class="hljs-regexp">/basic/</span>objects.py'}}),Ee=new K({}),Pe=new he({props:{code:`
scene
Scene(dimensionality=3, engine='pyvista')
\u251C\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
\u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
\u251C\u2500\u2500 sphere_03 (Sphere - Mesh: 842 points, 870 cells)
\u2514\u2500\u2500 sphere_04 (Sphere - Mesh: 842 points, 870 cells)

scene.remove(scene.sphere_04)
Scene(dimensionality=3, engine='pyvista')
\u251C\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
\u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
\u2514\u2500\u2500 sphere_03 (Sphere - Mesh: 842 points, 870 cells)`,highlighted:`<span class="hljs-comment"># Add two copy of the sphere to the scene as children of the root node (using list will add all objects on the same level)</span>
<span class="hljs-comment"># Using \`.copy()\` will create a copy of an object (the copy doesn&#x27;t have any parent or children)</span>
scene += [scene.plane_01.sphere_02.copy(), scene.plane_01.sphere_02.copy()]

&gt;&gt;&gt; scene
&gt;&gt;&gt; Scene(dimensionality=3, engine=&#x27;pyvista&#x27;)
&gt;&gt;&gt; \u251C\u2500\u2500 plane_01 (Plane - Mesh:<span class="hljs-number"> 121 </span>points,<span class="hljs-number"> 100 </span>cells)
&gt;&gt;&gt; \u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u251C\u2500\u2500 sphere_03 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u2514\u2500\u2500 sphere_04 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)

<span class="hljs-comment"># Remove the last added sphere</span>
&gt;&gt;&gt; scene.remove(scene.sphere_04)
&gt;&gt;&gt; Scene(dimensionality=3, engine=&#x27;pyvista&#x27;)
&gt;&gt;&gt; \u251C\u2500\u2500 plane_01 (Plane - Mesh:<span class="hljs-number"> 121 </span>points,<span class="hljs-number"> 100 </span>cells)
&gt;&gt;&gt; \u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u2514\u2500\u2500 sphere_03 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)`}}),Se=new K({}),xe=new K({}),Ae=new K({}),Ce=new K({}),Le=new he({props:{code:`
<h3 class="relative group">
	<a 
		id="visualization-engine" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#visualization-engine"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Visualization engine
	</span>
</h3>


A default vizualization engine is provided with the vtk backend of \`pyvista\`.

Starting the vizualization engine can be done simply with \`.show()\`.`,highlighted:`
&lt;h3 id=<span class="hljs-string">&quot;visualization-engine&quot;</span>&gt;Visualization engine&lt;/h3&gt;

A <span class="hljs-keyword">default</span> vizualization engine <span class="hljs-keyword">is</span> provided <span class="hljs-keyword">with</span> the vtk backend of <span class="hljs-string">\`pyvista\`</span>.

Starting the vizualization engine can be done simply <span class="hljs-keyword">with</span> <span class="hljs-string">\`.show()\`</span>.`}}),Oe=new he({props:{code:`
You can find bridges to other rendering/simulation engines in the \`integrations\` directory.

<h1 class="relative group">
	<a 
		id="reinforcement-learning-rl-with-simulate" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#reinforcement-learning-rl-with-simulate"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Reinforcement Learning (RL) with Simulate
	</span>
</h1>


Simulate is designed to provide easy and scalable integration with reinforcement learning algorithms.
The core abstraction is through the [RLEnv](/docs/simulate/main/en/api/rl_env#simulate.RLEnv) class that wraps a \`Scene\`.
The [RLEnv](/docs/simulate/main/en/api/rl_env#simulate.RLEnv) allows an [Actuator](/docs/simulate/main/en/api/actuators#simulate.Actuator) to be manipulated by an external agent or policy.

It is core to the design of Simulate that we are *not creating* Agents, but rather providing an interface for applications of machine learning and embodied AI.
The core API for RL applications can be seen below, where Simulate constrains the information that flows from the Scene to the external agent through an Actuator abstraction.

<p align="center">
    <br>
    <img src="https://user-images.githubusercontent.com/10695622/192663853-a7543091-8d45-4fba-b8dc-2b632d66a35f.png" width="500"/>
    <br>
</p>

At release, we include a set of pre-designed \`Actor\`'s that can act or navigate a scene. An \`Actor\` inherits from an \`Object3D\` and has sensors, actuators, and action mappings.


<h3 class="relative group">
	<a 
		id="tips" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#tips"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Tips
	</span>
</h3>


If you are running on GCP, remember to not install \`pyvistaqt\`, and if you did so, uninstall it in your environment, since QT doesn't work well on GCP.
`,highlighted:`
You can find bridges <span class="hljs-keyword">to</span> other rendering/simulation engines <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> \`integrations\` directory.

&lt;h1 <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;reinforcement-learning-rl-with-simulate&quot;</span>&gt;Reinforcement Learning (RL) <span class="hljs-keyword">with</span> Simulate&lt;/h1&gt;

Simulate <span class="hljs-keyword">is</span> designed <span class="hljs-keyword">to</span> provide easy <span class="hljs-keyword">and</span> scalable integration <span class="hljs-keyword">with</span> reinforcement learning algorithms.
The core abstraction <span class="hljs-keyword">is</span> <span class="hljs-keyword">through</span> <span class="hljs-keyword">the</span> [RLEnv](/docs/simulate/main/en/api/rl_env<span class="hljs-comment">#simulate.RLEnv) class that wraps a \`Scene\`.</span>
The [RLEnv](/docs/simulate/main/en/api/rl_env<span class="hljs-comment">#simulate.RLEnv) allows an [Actuator](/docs/simulate/main/en/api/actuators#simulate.Actuator) to be manipulated by an external agent or policy.</span>

It <span class="hljs-keyword">is</span> core <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> design <span class="hljs-keyword">of</span> Simulate <span class="hljs-keyword">that</span> we are *<span class="hljs-keyword">not</span> creating* Agents, <span class="hljs-keyword">but</span> rather providing an interface <span class="hljs-keyword">for</span> applications <span class="hljs-keyword">of</span> machine learning <span class="hljs-keyword">and</span> embodied AI.
The core API <span class="hljs-keyword">for</span> RL applications can be seen <span class="hljs-keyword">below</span>, <span class="hljs-keyword">where</span> Simulate constrains <span class="hljs-keyword">the</span> information <span class="hljs-keyword">that</span> flows <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> Scene <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> external agent <span class="hljs-keyword">through</span> an Actuator abstraction.

&lt;p align=<span class="hljs-string">&quot;center&quot;</span>&gt;
    &lt;br&gt;
    &lt;img src=<span class="hljs-string">&quot;https://user-images.githubusercontent.com/10695622/192663853-a7543091-8d45-4fba-b8dc-2b632d66a35f.png&quot;</span> width=<span class="hljs-string">&quot;500&quot;</span>/&gt;
    &lt;br&gt;
&lt;/p&gt;

At release, we include a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> pre-designed \`Actor\`&#x27;s <span class="hljs-keyword">that</span> can act <span class="hljs-keyword">or</span> navigate a scene. An \`Actor\` inherits <span class="hljs-keyword">from</span> an \`Object3D\` <span class="hljs-keyword">and</span> has sensors, actuators, <span class="hljs-keyword">and</span> action mappings.


&lt;h3 <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;Tips&lt;/h3&gt;

If you are <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> GCP, remember <span class="hljs-keyword">to</span> <span class="hljs-keyword">not</span> install \`pyvistaqt\`, <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span> you did so, uninstall <span class="hljs-keyword">it</span> <span class="hljs-keyword">in</span> your environment, <span class="hljs-keyword">since</span> QT doesn&#x27;t work well <span class="hljs-keyword">on</span> GCP.
`}}),{c(){r=a("meta"),f=u(),v=a("h1"),b=a("a"),w=a("span"),S(m.$$.fragment),k=u(),P=a("span"),$=o("Quicktour"),y=u(),j=a("p"),W=o("Simulate\u2019s API is inspired by the great "),ue=a("a"),La=o("Kubric\u2019s API"),Oa=o(`.
The user create a scene and add assets in it (objects, cameras, lights if needed).
Once the scene is created you can save/share it and also render or do simulations using one of the backend rendering/simulation engines (at the moment Unity, Blender and Godot). The saving/sharing format is engine agnostic and using the industry standard glTF format for saving scenes.`),_s=u(),Te=a("p"),Ia=o("Let\u2019s do a quick exploration together."),js=u(),De=a("p"),Ta=o("We\u2019ll use the default backend which is a simple"),Es=u(),Y=a("p"),Da=o("To install and contribute (from "),Ne=a("a"),Na=o("CONTRIBUTING.md"),qa=o(")"),ks=u(),qe=a("p"),Ma=o("Create a virtual env and then install the code style/quality tools as well as the code base locally"),$s=u(),S(de.$$.fragment),Ps=u(),D=a("p"),Ra=o("Before you merge a PR, fix the style (we use "),st=a("code"),Ba=o("isort"),Ua=o(" + "),at=a("code"),Ha=o("black"),za=o(")"),Ss=u(),S(fe.$$.fragment),xs=u(),q=a("h2"),Z=a("a"),lt=a("span"),S(me.$$.fragment),Ga=u(),nt=a("span"),Va=o("Project Structure"),As=u(),Me=a("p"),Qa=o("The Python API is located in src/simulate. It allows creation and loading of scenes, and sending commands to the backend."),Cs=u(),J=a("p"),Fa=o("The backend, currently just Unity, is located in "),Re=a("a"),Ka=o("integrations/Unity"),Wa=o(`.
This is currently a Unity editor project, which must be opened in Unity 2021.3.2f1.
In the future, this will be built as an executable, and spawned by the Python API.`),Ls=u(),M=a("h2"),X=a("a"),rt=a("span"),S(ve.$$.fragment),Ya=u(),ot=a("span"),Za=o("Loading a scene from the hub or a local file"),Os=u(),I=a("p"),Ja=o("Loading a scene from a local file or the hub is done with "),it=a("code"),Xa=o("Scene.create_from()"),el=o(", saving or pushing to the hub with "),ct=a("code"),tl=o("scene.save()"),sl=o(" or "),pt=a("code"),al=o("scene.push_to_hub()"),ll=o(":"),Is=u(),S(be.$$.fragment),Ts=u(),T=a("p"),nl=a("br"),rl=u(),Be=a("img"),ol=u(),il=a("br"),cl=o(`
&lt;p>
`),R=a("h2"),ee=a("a"),ht=a("span"),S(ge.$$.fragment),pl=u(),ut=a("span"),hl=o("Creating a Scene and adding/managing Objects in the scene"),Ds=u(),Ue=a("p"),ul=o("Basic example of creating a scene with a plane and a sphere above it:"),Ns=u(),S(ye.$$.fragment),qs=u(),te=a("p"),dl=o("An object (as well as the Scene) is just a node in a tree provided with optional mesh (as "),dt=a("code"),fl=o("pyvista.PolyData"),ml=o(" structure) and material and/or light, camera, agents special objects."),Ms=u(),He=a("p"),vl=o("The following objects creation helpers are currently provided:"),Rs=u(),_=a("ul"),se=a("li"),ft=a("code"),bl=o("Object3D"),gl=o(" any object with a "),mt=a("code"),yl=o("pyvista.PolyData"),wl=o(" mesh and/or material"),_l=u(),vt=a("li"),bt=a("code"),jl=o("Plane"),El=u(),gt=a("li"),yt=a("code"),kl=o("Sphere"),$l=u(),wt=a("li"),_t=a("code"),Pl=o("Capsule"),Sl=u(),jt=a("li"),Et=a("code"),xl=o("Cylinder"),Al=u(),kt=a("li"),$t=a("code"),Cl=o("Box"),Ll=u(),Pt=a("li"),St=a("code"),Ol=o("Cone"),Il=u(),xt=a("li"),At=a("code"),Tl=o("Line"),Dl=u(),Ct=a("li"),Lt=a("code"),Nl=o("MultipleLines"),ql=u(),Ot=a("li"),It=a("code"),Ml=o("Tube"),Rl=u(),Tt=a("li"),Dt=a("code"),Bl=o("Polygon"),Ul=u(),Nt=a("li"),qt=a("code"),Hl=o("Ring"),zl=u(),Mt=a("li"),Rt=a("code"),Gl=o("Text3D"),Vl=u(),Bt=a("li"),Ut=a("code"),Ql=o("Triangle"),Fl=u(),Ht=a("li"),zt=a("code"),Kl=o("Rectangle"),Wl=u(),Gt=a("li"),Vt=a("code"),Yl=o("Circle"),Zl=u(),Qt=a("li"),Ft=a("code"),Jl=o("StructuredGrid"),Bs=u(),ae=a("p"),Xl=o("Most of these objects can be visualized by running the following "),we=a("a"),en=o("example"),tn=o(":"),Us=u(),S(_e.$$.fragment),Hs=u(),ze=a("p"),sn=o("<p align=\u201Ccenter\u201D>"),zs=u(),Gs=a("br"),Vs=u(),je=a("img"),Qs=u(),Fs=a("br"),Ks=o(`
&lt;p>
`),B=a("h3"),le=a("a"),Kt=a("span"),S(Ee.$$.fragment),an=u(),Wt=a("span"),ln=o("Objects are organized in a tree structure"),Ws=u(),Ge=a("p"),nn=o("Adding/removing objects:"),Ys=u(),N=a("ul"),U=a("li"),rn=o("Using the addition ("),Yt=a("code"),on=o("+"),cn=o(") operator (or alternatively the method "),Zt=a("code"),pn=o(".add(object)"),hn=o(") will add an object as a child of a previous object."),un=u(),H=a("li"),dn=o("Objects can be removed with the subtraction ("),Jt=a("code"),fn=o("-"),mn=o(") operator or the "),Xt=a("code"),vn=o(".remove(object)"),bn=o(" command."),gn=u(),ke=a("li"),yn=o("The whole scene can be cleared with "),es=a("code"),wn=o(".clear()"),_n=o("."),Zs=u(),Ve=a("p"),jn=o("Accessing objects:"),Js=u(),ne=a("ul"),$e=a("li"),En=o("Objects can be directly accessed as attributes of their parents using their names (given with  "),ts=a("code"),kn=o("name"),$n=o(" attribute at creation or automatically generated from the class name + creation counter)."),Pn=u(),z=a("li"),Sn=o("Objects can also be accessed from their names with "),ss=a("code"),xn=o(".get(name)"),An=o(" or by navigating in the tree using the various "),as=a("code"),Cn=o("tree_*"),Ln=o(" attributes available on any node."),Xs=u(),Qe=a("p"),On=o("Here are a couple of examples of manipulations:"),ea=u(),S(Pe.$$.fragment),ta=u(),G=a("h3"),re=a("a"),ls=a("span"),S(Se.$$.fragment),In=u(),ns=a("span"),Tn=o("Objects can be translated, rotated, scaled"),sa=o(`

Here are a couple of examples:
\`\`\`
# Let's translate our floor (with the first sphere, it's child)
scene.plane_01.translate_x(1)
`),V=a("h1"),oe=a("a"),rs=a("span"),S(xe.$$.fragment),Dn=u(),os=a("span"),Nn=o("Let\u2019s scale the second sphere uniformly"),aa=u(),Fe=a("p"),qn=o("scene.sphere_03.scale(0.1)"),la=u(),Q=a("h1"),ie=a("a"),is=a("span"),S(Ae.$$.fragment),Mn=u(),cs=a("span"),Rn=o("Inspect the current position and scaling values"),na=u(),Ke=a("p"),Bn=o("print(scene.plane_01.position)"),ra=u(),We=a("blockquote"),ps=a("blockquote"),hs=a("blockquote"),us=a("p"),Un=o(`array([1., 0., 0.])
print(scene.sphere_03.scaling)
array([0.1, 0.1, 0.1])`),oa=u(),F=a("h1"),ce=a("a"),ds=a("span"),S(Ce.$$.fragment),Hn=u(),fs=a("span"),zn=o("We can also translate from a vector and rotate from a quaternion or along the various axis"),ia=u(),S(Le.$$.fragment),ca=u(),Ye=a("p"),Gn=o("scene.show()"),pa=u(),S(Oe.$$.fragment),this.h()},l(e){const c=Uo('[data-svelte="svelte-1phssyn"]',document.head);r=l(c,"META",{name:!0,content:!0}),c.forEach(s),f=d(e),v=l(e,"H1",{class:!0});var ua=n(v);b=l(ua,"A",{id:!0,class:!0,href:!0});var Fn=n(b);w=l(Fn,"SPAN",{});var Kn=n(w);x(m.$$.fragment,Kn),Kn.forEach(s),Fn.forEach(s),k=d(ua),P=l(ua,"SPAN",{});var Wn=n(P);$=i(Wn,"Quicktour"),Wn.forEach(s),ua.forEach(s),y=d(e),j=l(e,"P",{});var da=n(j);W=i(da,"Simulate\u2019s API is inspired by the great "),ue=l(da,"A",{href:!0,rel:!0});var Yn=n(ue);La=i(Yn,"Kubric\u2019s API"),Yn.forEach(s),Oa=i(da,`.
The user create a scene and add assets in it (objects, cameras, lights if needed).
Once the scene is created you can save/share it and also render or do simulations using one of the backend rendering/simulation engines (at the moment Unity, Blender and Godot). The saving/sharing format is engine agnostic and using the industry standard glTF format for saving scenes.`),da.forEach(s),_s=d(e),Te=l(e,"P",{});var Zn=n(Te);Ia=i(Zn,"Let\u2019s do a quick exploration together."),Zn.forEach(s),js=d(e),De=l(e,"P",{});var Jn=n(De);Ta=i(Jn,"We\u2019ll use the default backend which is a simple"),Jn.forEach(s),Es=d(e),Y=l(e,"P",{});var fa=n(Y);Da=i(fa,"To install and contribute (from "),Ne=l(fa,"A",{href:!0});var Xn=n(Ne);Na=i(Xn,"CONTRIBUTING.md"),Xn.forEach(s),qa=i(fa,")"),fa.forEach(s),ks=d(e),qe=l(e,"P",{});var er=n(qe);Ma=i(er,"Create a virtual env and then install the code style/quality tools as well as the code base locally"),er.forEach(s),$s=d(e),x(de.$$.fragment,e),Ps=d(e),D=l(e,"P",{});var Ze=n(D);Ra=i(Ze,"Before you merge a PR, fix the style (we use "),st=l(Ze,"CODE",{});var tr=n(st);Ba=i(tr,"isort"),tr.forEach(s),Ua=i(Ze," + "),at=l(Ze,"CODE",{});var sr=n(at);Ha=i(sr,"black"),sr.forEach(s),za=i(Ze,")"),Ze.forEach(s),Ss=d(e),x(fe.$$.fragment,e),xs=d(e),q=l(e,"H2",{class:!0});var ma=n(q);Z=l(ma,"A",{id:!0,class:!0,href:!0});var ar=n(Z);lt=l(ar,"SPAN",{});var lr=n(lt);x(me.$$.fragment,lr),lr.forEach(s),ar.forEach(s),Ga=d(ma),nt=l(ma,"SPAN",{});var nr=n(nt);Va=i(nr,"Project Structure"),nr.forEach(s),ma.forEach(s),As=d(e),Me=l(e,"P",{});var rr=n(Me);Qa=i(rr,"The Python API is located in src/simulate. It allows creation and loading of scenes, and sending commands to the backend."),rr.forEach(s),Cs=d(e),J=l(e,"P",{});var va=n(J);Fa=i(va,"The backend, currently just Unity, is located in "),Re=l(va,"A",{href:!0});var or=n(Re);Ka=i(or,"integrations/Unity"),or.forEach(s),Wa=i(va,`.
This is currently a Unity editor project, which must be opened in Unity 2021.3.2f1.
In the future, this will be built as an executable, and spawned by the Python API.`),va.forEach(s),Ls=d(e),M=l(e,"H2",{class:!0});var ba=n(M);X=l(ba,"A",{id:!0,class:!0,href:!0});var ir=n(X);rt=l(ir,"SPAN",{});var cr=n(rt);x(ve.$$.fragment,cr),cr.forEach(s),ir.forEach(s),Ya=d(ba),ot=l(ba,"SPAN",{});var pr=n(ot);Za=i(pr,"Loading a scene from the hub or a local file"),pr.forEach(s),ba.forEach(s),Os=d(e),I=l(e,"P",{});var pe=n(I);Ja=i(pe,"Loading a scene from a local file or the hub is done with "),it=l(pe,"CODE",{});var hr=n(it);Xa=i(hr,"Scene.create_from()"),hr.forEach(s),el=i(pe,", saving or pushing to the hub with "),ct=l(pe,"CODE",{});var ur=n(ct);tl=i(ur,"scene.save()"),ur.forEach(s),sl=i(pe," or "),pt=l(pe,"CODE",{});var dr=n(pt);al=i(dr,"scene.push_to_hub()"),dr.forEach(s),ll=i(pe,":"),pe.forEach(s),Is=d(e),x(be.$$.fragment,e),Ts=d(e),T=l(e,"P",{align:!0});var Ie=n(T);nl=l(Ie,"BR",{}),rl=d(Ie),Be=l(Ie,"IMG",{src:!0,width:!0}),ol=d(Ie),il=l(Ie,"BR",{}),cl=i(Ie,`
&lt;p>
`),Ie.forEach(s),R=l(e,"H2",{class:!0});var ga=n(R);ee=l(ga,"A",{id:!0,class:!0,href:!0});var fr=n(ee);ht=l(fr,"SPAN",{});var mr=n(ht);x(ge.$$.fragment,mr),mr.forEach(s),fr.forEach(s),pl=d(ga),ut=l(ga,"SPAN",{});var vr=n(ut);hl=i(vr,"Creating a Scene and adding/managing Objects in the scene"),vr.forEach(s),ga.forEach(s),Ds=d(e),Ue=l(e,"P",{});var br=n(Ue);ul=i(br,"Basic example of creating a scene with a plane and a sphere above it:"),br.forEach(s),Ns=d(e),x(ye.$$.fragment,e),qs=d(e),te=l(e,"P",{});var ya=n(te);dl=i(ya,"An object (as well as the Scene) is just a node in a tree provided with optional mesh (as "),dt=l(ya,"CODE",{});var gr=n(dt);fl=i(gr,"pyvista.PolyData"),gr.forEach(s),ml=i(ya," structure) and material and/or light, camera, agents special objects."),ya.forEach(s),Ms=d(e),He=l(e,"P",{});var yr=n(He);vl=i(yr,"The following objects creation helpers are currently provided:"),yr.forEach(s),Rs=d(e),_=l(e,"UL",{});var E=n(_);se=l(E,"LI",{});var ms=n(se);ft=l(ms,"CODE",{});var wr=n(ft);bl=i(wr,"Object3D"),wr.forEach(s),gl=i(ms," any object with a "),mt=l(ms,"CODE",{});var _r=n(mt);yl=i(_r,"pyvista.PolyData"),_r.forEach(s),wl=i(ms," mesh and/or material"),ms.forEach(s),_l=d(E),vt=l(E,"LI",{});var jr=n(vt);bt=l(jr,"CODE",{});var Er=n(bt);jl=i(Er,"Plane"),Er.forEach(s),jr.forEach(s),El=d(E),gt=l(E,"LI",{});var kr=n(gt);yt=l(kr,"CODE",{});var $r=n(yt);kl=i($r,"Sphere"),$r.forEach(s),kr.forEach(s),$l=d(E),wt=l(E,"LI",{});var Pr=n(wt);_t=l(Pr,"CODE",{});var Sr=n(_t);Pl=i(Sr,"Capsule"),Sr.forEach(s),Pr.forEach(s),Sl=d(E),jt=l(E,"LI",{});var xr=n(jt);Et=l(xr,"CODE",{});var Ar=n(Et);xl=i(Ar,"Cylinder"),Ar.forEach(s),xr.forEach(s),Al=d(E),kt=l(E,"LI",{});var Cr=n(kt);$t=l(Cr,"CODE",{});var Lr=n($t);Cl=i(Lr,"Box"),Lr.forEach(s),Cr.forEach(s),Ll=d(E),Pt=l(E,"LI",{});var Or=n(Pt);St=l(Or,"CODE",{});var Ir=n(St);Ol=i(Ir,"Cone"),Ir.forEach(s),Or.forEach(s),Il=d(E),xt=l(E,"LI",{});var Tr=n(xt);At=l(Tr,"CODE",{});var Dr=n(At);Tl=i(Dr,"Line"),Dr.forEach(s),Tr.forEach(s),Dl=d(E),Ct=l(E,"LI",{});var Nr=n(Ct);Lt=l(Nr,"CODE",{});var qr=n(Lt);Nl=i(qr,"MultipleLines"),qr.forEach(s),Nr.forEach(s),ql=d(E),Ot=l(E,"LI",{});var Mr=n(Ot);It=l(Mr,"CODE",{});var Rr=n(It);Ml=i(Rr,"Tube"),Rr.forEach(s),Mr.forEach(s),Rl=d(E),Tt=l(E,"LI",{});var Br=n(Tt);Dt=l(Br,"CODE",{});var Ur=n(Dt);Bl=i(Ur,"Polygon"),Ur.forEach(s),Br.forEach(s),Ul=d(E),Nt=l(E,"LI",{});var Hr=n(Nt);qt=l(Hr,"CODE",{});var zr=n(qt);Hl=i(zr,"Ring"),zr.forEach(s),Hr.forEach(s),zl=d(E),Mt=l(E,"LI",{});var Gr=n(Mt);Rt=l(Gr,"CODE",{});var Vr=n(Rt);Gl=i(Vr,"Text3D"),Vr.forEach(s),Gr.forEach(s),Vl=d(E),Bt=l(E,"LI",{});var Qr=n(Bt);Ut=l(Qr,"CODE",{});var Fr=n(Ut);Ql=i(Fr,"Triangle"),Fr.forEach(s),Qr.forEach(s),Fl=d(E),Ht=l(E,"LI",{});var Kr=n(Ht);zt=l(Kr,"CODE",{});var Wr=n(zt);Kl=i(Wr,"Rectangle"),Wr.forEach(s),Kr.forEach(s),Wl=d(E),Gt=l(E,"LI",{});var Yr=n(Gt);Vt=l(Yr,"CODE",{});var Zr=n(Vt);Yl=i(Zr,"Circle"),Zr.forEach(s),Yr.forEach(s),Zl=d(E),Qt=l(E,"LI",{});var Jr=n(Qt);Ft=l(Jr,"CODE",{});var Xr=n(Ft);Jl=i(Xr,"StructuredGrid"),Xr.forEach(s),Jr.forEach(s),E.forEach(s),Bs=d(e),ae=l(e,"P",{});var wa=n(ae);Xl=i(wa,"Most of these objects can be visualized by running the following "),we=l(wa,"A",{href:!0,rel:!0});var eo=n(we);en=i(eo,"example"),eo.forEach(s),tn=i(wa,":"),wa.forEach(s),Us=d(e),x(_e.$$.fragment,e),Hs=d(e),ze=l(e,"P",{});var to=n(ze);sn=i(to,"<p align=\u201Ccenter\u201D>"),to.forEach(s),zs=d(e),Gs=l(e,"BR",{}),Vs=d(e),je=l(e,"IMG",{src:!0,width:!0}),Qs=d(e),Fs=l(e,"BR",{}),Ks=i(e,`
&lt;p>
`),B=l(e,"H3",{class:!0});var _a=n(B);le=l(_a,"A",{id:!0,class:!0,href:!0});var so=n(le);Kt=l(so,"SPAN",{});var ao=n(Kt);x(Ee.$$.fragment,ao),ao.forEach(s),so.forEach(s),an=d(_a),Wt=l(_a,"SPAN",{});var lo=n(Wt);ln=i(lo,"Objects are organized in a tree structure"),lo.forEach(s),_a.forEach(s),Ws=d(e),Ge=l(e,"P",{});var no=n(Ge);nn=i(no,"Adding/removing objects:"),no.forEach(s),Ys=d(e),N=l(e,"UL",{});var Je=n(N);U=l(Je,"LI",{});var Xe=n(U);rn=i(Xe,"Using the addition ("),Yt=l(Xe,"CODE",{});var ro=n(Yt);on=i(ro,"+"),ro.forEach(s),cn=i(Xe,") operator (or alternatively the method "),Zt=l(Xe,"CODE",{});var oo=n(Zt);pn=i(oo,".add(object)"),oo.forEach(s),hn=i(Xe,") will add an object as a child of a previous object."),Xe.forEach(s),un=d(Je),H=l(Je,"LI",{});var et=n(H);dn=i(et,"Objects can be removed with the subtraction ("),Jt=l(et,"CODE",{});var io=n(Jt);fn=i(io,"-"),io.forEach(s),mn=i(et,") operator or the "),Xt=l(et,"CODE",{});var co=n(Xt);vn=i(co,".remove(object)"),co.forEach(s),bn=i(et," command."),et.forEach(s),gn=d(Je),ke=l(Je,"LI",{});var ja=n(ke);yn=i(ja,"The whole scene can be cleared with "),es=l(ja,"CODE",{});var po=n(es);wn=i(po,".clear()"),po.forEach(s),_n=i(ja,"."),ja.forEach(s),Je.forEach(s),Zs=d(e),Ve=l(e,"P",{});var ho=n(Ve);jn=i(ho,"Accessing objects:"),ho.forEach(s),Js=d(e),ne=l(e,"UL",{});var Ea=n(ne);$e=l(Ea,"LI",{});var ka=n($e);En=i(ka,"Objects can be directly accessed as attributes of their parents using their names (given with  "),ts=l(ka,"CODE",{});var uo=n(ts);kn=i(uo,"name"),uo.forEach(s),$n=i(ka," attribute at creation or automatically generated from the class name + creation counter)."),ka.forEach(s),Pn=d(Ea),z=l(Ea,"LI",{});var tt=n(z);Sn=i(tt,"Objects can also be accessed from their names with "),ss=l(tt,"CODE",{});var fo=n(ss);xn=i(fo,".get(name)"),fo.forEach(s),An=i(tt," or by navigating in the tree using the various "),as=l(tt,"CODE",{});var mo=n(as);Cn=i(mo,"tree_*"),mo.forEach(s),Ln=i(tt," attributes available on any node."),tt.forEach(s),Ea.forEach(s),Xs=d(e),Qe=l(e,"P",{});var vo=n(Qe);On=i(vo,"Here are a couple of examples of manipulations:"),vo.forEach(s),ea=d(e),x(Pe.$$.fragment,e),ta=d(e),G=l(e,"H3",{class:!0});var $a=n(G);re=l($a,"A",{id:!0,class:!0,href:!0});var bo=n(re);ls=l(bo,"SPAN",{});var go=n(ls);x(Se.$$.fragment,go),go.forEach(s),bo.forEach(s),In=d($a),ns=l($a,"SPAN",{});var yo=n(ns);Tn=i(yo,"Objects can be translated, rotated, scaled"),yo.forEach(s),$a.forEach(s),sa=i(e,`

Here are a couple of examples:
\`\`\`
# Let's translate our floor (with the first sphere, it's child)
scene.plane_01.translate_x(1)
`),V=l(e,"H1",{class:!0});var Pa=n(V);oe=l(Pa,"A",{id:!0,class:!0,href:!0});var wo=n(oe);rs=l(wo,"SPAN",{});var _o=n(rs);x(xe.$$.fragment,_o),_o.forEach(s),wo.forEach(s),Dn=d(Pa),os=l(Pa,"SPAN",{});var jo=n(os);Nn=i(jo,"Let\u2019s scale the second sphere uniformly"),jo.forEach(s),Pa.forEach(s),aa=d(e),Fe=l(e,"P",{});var Eo=n(Fe);qn=i(Eo,"scene.sphere_03.scale(0.1)"),Eo.forEach(s),la=d(e),Q=l(e,"H1",{class:!0});var Sa=n(Q);ie=l(Sa,"A",{id:!0,class:!0,href:!0});var ko=n(ie);is=l(ko,"SPAN",{});var $o=n(is);x(Ae.$$.fragment,$o),$o.forEach(s),ko.forEach(s),Mn=d(Sa),cs=l(Sa,"SPAN",{});var Po=n(cs);Rn=i(Po,"Inspect the current position and scaling values"),Po.forEach(s),Sa.forEach(s),na=d(e),Ke=l(e,"P",{});var So=n(Ke);Bn=i(So,"print(scene.plane_01.position)"),So.forEach(s),ra=d(e),We=l(e,"BLOCKQUOTE",{});var xo=n(We);ps=l(xo,"BLOCKQUOTE",{});var Ao=n(ps);hs=l(Ao,"BLOCKQUOTE",{});var Co=n(hs);us=l(Co,"P",{});var Lo=n(us);Un=i(Lo,`array([1., 0., 0.])
print(scene.sphere_03.scaling)
array([0.1, 0.1, 0.1])`),Lo.forEach(s),Co.forEach(s),Ao.forEach(s),xo.forEach(s),oa=d(e),F=l(e,"H1",{class:!0});var xa=n(F);ce=l(xa,"A",{id:!0,class:!0,href:!0});var Oo=n(ce);ds=l(Oo,"SPAN",{});var Io=n(ds);x(Ce.$$.fragment,Io),Io.forEach(s),Oo.forEach(s),Hn=d(xa),fs=l(xa,"SPAN",{});var To=n(fs);zn=i(To,"We can also translate from a vector and rotate from a quaternion or along the various axis"),To.forEach(s),xa.forEach(s),ia=d(e),x(Le.$$.fragment,e),ca=d(e),Ye=l(e,"P",{});var Do=n(Ye);Gn=i(Do,"scene.show()"),Do.forEach(s),pa=d(e),x(Oe.$$.fragment,e),this.h()},h(){h(r,"name","hf:doc:metadata"),h(r,"content",JSON.stringify(si)),h(b,"id","quicktour"),h(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(b,"href","#quicktour"),h(v,"class","relative group"),h(ue,"href","https://github.com/google-research/kubric"),h(ue,"rel","nofollow"),h(Ne,"href","CONTRIBUTING.md"),h(Z,"id","project-structure"),h(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Z,"href","#project-structure"),h(q,"class","relative group"),h(Re,"href","integrations/Unity"),h(X,"id","loading-a-scene-from-the-hub-or-a-local-file"),h(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(X,"href","#loading-a-scene-from-the-hub-or-a-local-file"),h(M,"class","relative group"),qo(Be.src,Vn="https://user-images.githubusercontent.com/10695622/191554717-acba4764-a4f4-4609-834a-39ddb50b844a.png")||h(Be,"src",Vn),h(Be,"width","400"),h(T,"align","center"),h(ee,"id","creating-a-scene-and-addingmanaging-objects-in-the-scene"),h(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ee,"href","#creating-a-scene-and-addingmanaging-objects-in-the-scene"),h(R,"class","relative group"),h(we,"href","https://github.com/huggingface/simulate/tree/main/examples/objects.py"),h(we,"rel","nofollow"),qo(je.src,Qn="https://user-images.githubusercontent.com/10695622/191562825-49d4c692-a1ed-44e9-bdb9-da5f0bfb9828.png")||h(je,"src",Qn),h(je,"width","400"),h(le,"id","objects-are-organized-in-a-tree-structure"),h(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(le,"href","#objects-are-organized-in-a-tree-structure"),h(B,"class","relative group"),h(re,"id","objects-can-be-translated-rotated-scaled"),h(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(re,"href","#objects-can-be-translated-rotated-scaled"),h(G,"class","relative group"),h(oe,"id","let\u2019s-scale-the-second-sphere-uniformly"),h(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oe,"href","#let\u2019s-scale-the-second-sphere-uniformly"),h(V,"class","relative group"),h(ie,"id","inspect-the-current-position-and-scaling-values"),h(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ie,"href","#inspect-the-current-position-and-scaling-values"),h(Q,"class","relative group"),h(ce,"id","we-can-also-translate-from-a-vector-and-rotate-from-a-quaternion-or-along-the-various-axis"),h(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ce,"href","#we-can-also-translate-from-a-vector-and-rotate-from-a-quaternion-or-along-the-various-axis"),h(F,"class","relative group")},m(e,c){t(document.head,r),p(e,f,c),p(e,v,c),t(v,b),t(b,w),A(m,w,null),t(v,k),t(v,P),t(P,$),p(e,y,c),p(e,j,c),t(j,W),t(j,ue),t(ue,La),t(j,Oa),p(e,_s,c),p(e,Te,c),t(Te,Ia),p(e,js,c),p(e,De,c),t(De,Ta),p(e,Es,c),p(e,Y,c),t(Y,Da),t(Y,Ne),t(Ne,Na),t(Y,qa),p(e,ks,c),p(e,qe,c),t(qe,Ma),p(e,$s,c),A(de,e,c),p(e,Ps,c),p(e,D,c),t(D,Ra),t(D,st),t(st,Ba),t(D,Ua),t(D,at),t(at,Ha),t(D,za),p(e,Ss,c),A(fe,e,c),p(e,xs,c),p(e,q,c),t(q,Z),t(Z,lt),A(me,lt,null),t(q,Ga),t(q,nt),t(nt,Va),p(e,As,c),p(e,Me,c),t(Me,Qa),p(e,Cs,c),p(e,J,c),t(J,Fa),t(J,Re),t(Re,Ka),t(J,Wa),p(e,Ls,c),p(e,M,c),t(M,X),t(X,rt),A(ve,rt,null),t(M,Ya),t(M,ot),t(ot,Za),p(e,Os,c),p(e,I,c),t(I,Ja),t(I,it),t(it,Xa),t(I,el),t(I,ct),t(ct,tl),t(I,sl),t(I,pt),t(pt,al),t(I,ll),p(e,Is,c),A(be,e,c),p(e,Ts,c),p(e,T,c),t(T,nl),t(T,rl),t(T,Be),t(T,ol),t(T,il),t(T,cl),p(e,R,c),t(R,ee),t(ee,ht),A(ge,ht,null),t(R,pl),t(R,ut),t(ut,hl),p(e,Ds,c),p(e,Ue,c),t(Ue,ul),p(e,Ns,c),A(ye,e,c),p(e,qs,c),p(e,te,c),t(te,dl),t(te,dt),t(dt,fl),t(te,ml),p(e,Ms,c),p(e,He,c),t(He,vl),p(e,Rs,c),p(e,_,c),t(_,se),t(se,ft),t(ft,bl),t(se,gl),t(se,mt),t(mt,yl),t(se,wl),t(_,_l),t(_,vt),t(vt,bt),t(bt,jl),t(_,El),t(_,gt),t(gt,yt),t(yt,kl),t(_,$l),t(_,wt),t(wt,_t),t(_t,Pl),t(_,Sl),t(_,jt),t(jt,Et),t(Et,xl),t(_,Al),t(_,kt),t(kt,$t),t($t,Cl),t(_,Ll),t(_,Pt),t(Pt,St),t(St,Ol),t(_,Il),t(_,xt),t(xt,At),t(At,Tl),t(_,Dl),t(_,Ct),t(Ct,Lt),t(Lt,Nl),t(_,ql),t(_,Ot),t(Ot,It),t(It,Ml),t(_,Rl),t(_,Tt),t(Tt,Dt),t(Dt,Bl),t(_,Ul),t(_,Nt),t(Nt,qt),t(qt,Hl),t(_,zl),t(_,Mt),t(Mt,Rt),t(Rt,Gl),t(_,Vl),t(_,Bt),t(Bt,Ut),t(Ut,Ql),t(_,Fl),t(_,Ht),t(Ht,zt),t(zt,Kl),t(_,Wl),t(_,Gt),t(Gt,Vt),t(Vt,Yl),t(_,Zl),t(_,Qt),t(Qt,Ft),t(Ft,Jl),p(e,Bs,c),p(e,ae,c),t(ae,Xl),t(ae,we),t(we,en),t(ae,tn),p(e,Us,c),A(_e,e,c),p(e,Hs,c),p(e,ze,c),t(ze,sn),p(e,zs,c),p(e,Gs,c),p(e,Vs,c),p(e,je,c),p(e,Qs,c),p(e,Fs,c),p(e,Ks,c),p(e,B,c),t(B,le),t(le,Kt),A(Ee,Kt,null),t(B,an),t(B,Wt),t(Wt,ln),p(e,Ws,c),p(e,Ge,c),t(Ge,nn),p(e,Ys,c),p(e,N,c),t(N,U),t(U,rn),t(U,Yt),t(Yt,on),t(U,cn),t(U,Zt),t(Zt,pn),t(U,hn),t(N,un),t(N,H),t(H,dn),t(H,Jt),t(Jt,fn),t(H,mn),t(H,Xt),t(Xt,vn),t(H,bn),t(N,gn),t(N,ke),t(ke,yn),t(ke,es),t(es,wn),t(ke,_n),p(e,Zs,c),p(e,Ve,c),t(Ve,jn),p(e,Js,c),p(e,ne,c),t(ne,$e),t($e,En),t($e,ts),t(ts,kn),t($e,$n),t(ne,Pn),t(ne,z),t(z,Sn),t(z,ss),t(ss,xn),t(z,An),t(z,as),t(as,Cn),t(z,Ln),p(e,Xs,c),p(e,Qe,c),t(Qe,On),p(e,ea,c),A(Pe,e,c),p(e,ta,c),p(e,G,c),t(G,re),t(re,ls),A(Se,ls,null),t(G,In),t(G,ns),t(ns,Tn),p(e,sa,c),p(e,V,c),t(V,oe),t(oe,rs),A(xe,rs,null),t(V,Dn),t(V,os),t(os,Nn),p(e,aa,c),p(e,Fe,c),t(Fe,qn),p(e,la,c),p(e,Q,c),t(Q,ie),t(ie,is),A(Ae,is,null),t(Q,Mn),t(Q,cs),t(cs,Rn),p(e,na,c),p(e,Ke,c),t(Ke,Bn),p(e,ra,c),p(e,We,c),t(We,ps),t(ps,hs),t(hs,us),t(us,Un),p(e,oa,c),p(e,F,c),t(F,ce),t(ce,ds),A(Ce,ds,null),t(F,Hn),t(F,fs),t(fs,zn),p(e,ia,c),A(Le,e,c),p(e,ca,c),p(e,Ye,c),t(Ye,Gn),p(e,pa,c),A(Oe,e,c),ha=!0},p:bs,i(e){ha||(C(m.$$.fragment,e),C(de.$$.fragment,e),C(fe.$$.fragment,e),C(me.$$.fragment,e),C(ve.$$.fragment,e),C(be.$$.fragment,e),C(ge.$$.fragment,e),C(ye.$$.fragment,e),C(_e.$$.fragment,e),C(Ee.$$.fragment,e),C(Pe.$$.fragment,e),C(Se.$$.fragment,e),C(xe.$$.fragment,e),C(Ae.$$.fragment,e),C(Ce.$$.fragment,e),C(Le.$$.fragment,e),C(Oe.$$.fragment,e),ha=!0)},o(e){L(m.$$.fragment,e),L(de.$$.fragment,e),L(fe.$$.fragment,e),L(me.$$.fragment,e),L(ve.$$.fragment,e),L(be.$$.fragment,e),L(ge.$$.fragment,e),L(ye.$$.fragment,e),L(_e.$$.fragment,e),L(Ee.$$.fragment,e),L(Pe.$$.fragment,e),L(Se.$$.fragment,e),L(xe.$$.fragment,e),L(Ae.$$.fragment,e),L(Ce.$$.fragment,e),L(Le.$$.fragment,e),L(Oe.$$.fragment,e),ha=!1},d(e){s(r),e&&s(f),e&&s(v),O(m),e&&s(y),e&&s(j),e&&s(_s),e&&s(Te),e&&s(js),e&&s(De),e&&s(Es),e&&s(Y),e&&s(ks),e&&s(qe),e&&s($s),O(de,e),e&&s(Ps),e&&s(D),e&&s(Ss),O(fe,e),e&&s(xs),e&&s(q),O(me),e&&s(As),e&&s(Me),e&&s(Cs),e&&s(J),e&&s(Ls),e&&s(M),O(ve),e&&s(Os),e&&s(I),e&&s(Is),O(be,e),e&&s(Ts),e&&s(T),e&&s(R),O(ge),e&&s(Ds),e&&s(Ue),e&&s(Ns),O(ye,e),e&&s(qs),e&&s(te),e&&s(Ms),e&&s(He),e&&s(Rs),e&&s(_),e&&s(Bs),e&&s(ae),e&&s(Us),O(_e,e),e&&s(Hs),e&&s(ze),e&&s(zs),e&&s(Gs),e&&s(Vs),e&&s(je),e&&s(Qs),e&&s(Fs),e&&s(Ks),e&&s(B),O(Ee),e&&s(Ws),e&&s(Ge),e&&s(Ys),e&&s(N),e&&s(Zs),e&&s(Ve),e&&s(Js),e&&s(ne),e&&s(Xs),e&&s(Qe),e&&s(ea),O(Pe,e),e&&s(ta),e&&s(G),O(Se),e&&s(sa),e&&s(V),O(xe),e&&s(aa),e&&s(Fe),e&&s(la),e&&s(Q),O(Ae),e&&s(na),e&&s(Ke),e&&s(ra),e&&s(We),e&&s(oa),e&&s(F),O(Ce),e&&s(ia),O(Le,e),e&&s(ca),e&&s(Ye),e&&s(pa),O(Oe,e)}}}const si={local:"reinforcement-learning-rl-with-simulate",sections:[{local:"tips",title:"Tips"}],title:"Reinforcement Learning (RL) with Simulate"};function ai(g){return Ho(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ri extends gs{constructor(r){super();ys(this,r,ai,ti,ws,{})}}export{ri as default,si as metadata};
