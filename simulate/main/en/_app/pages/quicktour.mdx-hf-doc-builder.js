import{S as xo,i as Ao,s as Lo,e as t,k as p,w as m,t as r,M as Co,c as l,d as a,m as h,a as n,x as v,h as o,b as d,N as Po,G as s,g as c,y as g,L as Oo,q as b,o as w,B as y,v as Io}from"../chunks/vendor-hf-doc-builder.js";import{I as M}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as te}from"../chunks/CodeBlock-hf-doc-builder.js";function To(qn){let S,ha,P,N,We,le,gt,Ye,bt,da,U,wt,ne,yt,_t,ua,$e,jt,fa,Se,Et,ma,z,kt,Pe,$t,St,va,xe,Pt,ga,re,ba,k,xt,Je,At,Lt,Xe,Ct,Ot,wa,oe,ya,x,G,Ze,ie,It,es,Tt,_a,Ae,Dt,ja,H,qt,Le,Rt,Bt,Ea,A,F,ss,ce,Mt,as,Nt,ka,_,Ut,ts,zt,Gt,ls,Ht,Ft,ns,Qt,Kt,$a,pe,Sa,j,Vt,Wt,Ce,Rn,Yt,Jt,Pa,L,Q,rs,he,Xt,os,Zt,xa,Oe,el,Aa,de,La,K,sl,is,al,tl,Ca,Ie,ll,Oa,u,V,cs,nl,rl,ps,ol,il,cl,hs,ds,pl,hl,us,fs,dl,ul,ms,vs,fl,ml,gs,bs,vl,gl,ws,ys,bl,wl,_s,js,yl,_l,Es,ks,jl,El,$s,Ss,kl,$l,Ps,xs,Sl,Pl,As,Ls,xl,Al,Cs,Os,Ll,Cl,Is,Ts,Ol,Il,Ds,qs,Tl,Dl,Rs,Bs,ql,Rl,Ms,Ns,Bl,Ml,Us,zs,Nl,Ia,W,Ul,ue,zl,Gl,Ta,fe,Da,E,Hl,Fl,Te,Bn,Ql,Kl,qa,C,Y,Gs,me,Vl,Hs,Wl,Ra,De,Yl,Ba,$,O,Jl,Fs,Xl,Zl,Qs,en,sn,an,I,tn,Ks,ln,nn,Vs,rn,on,cn,ve,pn,Ws,hn,dn,Ma,qe,un,Na,J,ge,fn,Ys,mn,vn,gn,T,bn,Js,wn,yn,Xs,_n,jn,Ua,Re,En,za,be,Ga,D,X,Zs,we,kn,ea,$n,Ha,q,Z,sa,ye,Sn,aa,Pn,Fa,Be,xn,Qa,R,ee,ta,_e,An,la,Ln,Ka,Me,Cn,Va,Ne,na,ra,oa,On,Wa,B,se,ia,je,In,ca,Tn,Ya,Ee,Ja,Ue,Dn,Xa,ke,Za;return le=new M({}),re=new te({props:{code:"pip install --upgrade simulate",highlighted:'pip install <span class="hljs-comment">--upgrade simulate</span>'}}),oe=new te({props:{code:"make style",highlighted:'<span class="hljs-attribute">make style</span>'}}),ie=new M({}),ce=new M({}),pe=new te({props:{code:`from simulate import Scene

scene = Scene.create_from('tests/test_assets/fixtures/Box.gltf')  # either local (priority) or on the hub with full path to file
scene = Scene.create_from('simulate-tests/Box/glTF/Box.gltf', is_local=False)  # Set priority to the hub file

scene.save('local_dir/file.gltf')  # Save to a local file
scene.push_to_hub('simulate-tests/Debug/glTF/Box.gltf')  # Save to the hub`,highlighted:`from simulate import Scene

scene = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Scene</span>.</span></span>create<span class="hljs-constructor">_from(&#x27;<span class="hljs-params">tests</span><span class="hljs-operator">/</span><span class="hljs-params">test_assets</span><span class="hljs-operator">/</span><span class="hljs-params">fixtures</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;)</span>  # either local (priority) <span class="hljs-keyword">or</span> on the hub <span class="hljs-keyword">with</span> full path <span class="hljs-keyword">to</span> file
scene = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Scene</span>.</span></span>create<span class="hljs-constructor">_from(&#x27;<span class="hljs-params">simulate</span>-<span class="hljs-params">tests</span><span class="hljs-operator">/</span>Box<span class="hljs-operator">/</span><span class="hljs-params">glTF</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;, <span class="hljs-params">is_local</span>=False)</span>  # Set priority <span class="hljs-keyword">to</span> the hub file

scene.save(&#x27;local_dir/file.gltf&#x27;)  # Save <span class="hljs-keyword">to</span> a local file
scene.push<span class="hljs-constructor">_to_hub(&#x27;<span class="hljs-params">simulate</span>-<span class="hljs-params">tests</span><span class="hljs-operator">/</span>Debug<span class="hljs-operator">/</span><span class="hljs-params">glTF</span><span class="hljs-operator">/</span>Box.<span class="hljs-params">gltf</span>&#x27;)</span>  # Save <span class="hljs-keyword">to</span> the hub`}}),he=new M({}),de=new te({props:{code:`

scene
Scene(dimensionality=3, engine='PyVistaEngine')
\u2514\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
    \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
`,highlighted:`import simulate as sm

<span class="hljs-built_in">scene</span> = sm.Scene()
<span class="hljs-built_in">scene</span> += sm.Plane() + sm.Sphere(<span class="hljs-built_in">position</span>=[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-built_in">radius</span>=<span class="hljs-number">0.2</span>)

&gt;&gt;&gt; <span class="hljs-built_in">scene</span>
&gt;&gt;&gt; Scene(dimensionality=<span class="hljs-number">3</span>, engine=&#x27;PyVistaEngine&#x27;)
&gt;&gt;&gt; \u2514\u2500\u2500 plane_01 (Plane - Mesh: <span class="hljs-number">121</span> <span class="hljs-built_in">points</span>, <span class="hljs-number">100</span> cells)
&gt;&gt;&gt;     \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: <span class="hljs-number">842</span> <span class="hljs-built_in">points</span>, <span class="hljs-number">870</span> cells)

<span class="hljs-built_in">scene</span>.<span class="hljs-built_in">show</span>()`}}),fe=new te({props:{code:"python examples/basic/objects.py",highlighted:'python examples<span class="hljs-regexp">/basic/</span>objects.py'}}),me=new M({}),be=new te({props:{code:`
scene
Scene(dimensionality=3, engine='pyvista')
\u251C\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
\u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
\u251C\u2500\u2500 sphere_03 (Sphere - Mesh: 842 points, 870 cells)
\u2514\u2500\u2500 sphere_04 (Sphere - Mesh: 842 points, 870 cells)

scene.remove(scene.sphere_04)
Scene(dimensionality=3, engine='pyvista')
\u251C\u2500\u2500 plane_01 (Plane - Mesh: 121 points, 100 cells)
\u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh: 842 points, 870 cells)
\u2514\u2500\u2500 sphere_03 (Sphere - Mesh: 842 points, 870 cells)`,highlighted:`<span class="hljs-comment"># Add two copy of the sphere to the scene as children of the root node (using list will add all objects on the same level)</span>
<span class="hljs-comment"># Using \`.copy()\` will create a copy of an object (the copy doesn&#x27;t have any parent or children)</span>
scene += [scene.plane_01.sphere_02.copy(), scene.plane_01.sphere_02.copy()]

&gt;&gt;&gt; scene
&gt;&gt;&gt; Scene(dimensionality=3, engine=&#x27;pyvista&#x27;)
&gt;&gt;&gt; \u251C\u2500\u2500 plane_01 (Plane - Mesh:<span class="hljs-number"> 121 </span>points,<span class="hljs-number"> 100 </span>cells)
&gt;&gt;&gt; \u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u251C\u2500\u2500 sphere_03 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u2514\u2500\u2500 sphere_04 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)

<span class="hljs-comment"># Remove the last added sphere</span>
&gt;&gt;&gt; scene.remove(scene.sphere_04)
&gt;&gt;&gt; Scene(dimensionality=3, engine=&#x27;pyvista&#x27;)
&gt;&gt;&gt; \u251C\u2500\u2500 plane_01 (Plane - Mesh:<span class="hljs-number"> 121 </span>points,<span class="hljs-number"> 100 </span>cells)
&gt;&gt;&gt; \u2502   \u2514\u2500\u2500 sphere_02 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)
&gt;&gt;&gt; \u2514\u2500\u2500 sphere_03 (Sphere - Mesh:<span class="hljs-number"> 842 </span>points,<span class="hljs-number"> 870 </span>cells)`}}),we=new M({}),ye=new M({}),_e=new M({}),je=new M({}),Ee=new te({props:{code:`
<h3 class="relative group">
	<a 
		id="visualization-engine" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#visualization-engine"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Visualization engine
	</span>
</h3>


A default vizualization engine is provided with the vtk backend of \`pyvista\`.

Starting the vizualization engine can be done simply with \`.show()\`.`,highlighted:`
&lt;h3 id=<span class="hljs-string">&quot;visualization-engine&quot;</span>&gt;Visualization engine&lt;/h3&gt;

A <span class="hljs-keyword">default</span> vizualization engine <span class="hljs-keyword">is</span> provided <span class="hljs-keyword">with</span> the vtk backend of <span class="hljs-string">\`pyvista\`</span>.

Starting the vizualization engine can be done simply <span class="hljs-keyword">with</span> <span class="hljs-string">\`.show()\`</span>.`}}),ke=new te({props:{code:`
You can find bridges to other rendering/simulation engines in the \`integrations\` directory.

<h1 class="relative group">
	<a 
		id="reinforcement-learning-rl-with-simulate" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#reinforcement-learning-rl-with-simulate"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Reinforcement Learning (RL) with Simulate
	</span>
</h1>


Simulate is designed to provide easy and scalable integration with reinforcement learning algorithms.
The core abstraction is through the [RLEnv](/docs/simulate/main/en/api/rl_env#simulate.RLEnv) class that wraps a \`Scene\`.
The [RLEnv](/docs/simulate/main/en/api/rl_env#simulate.RLEnv) allows an [Actuator](/docs/simulate/main/en/api/actuators#simulate.Actuator) to be manipulated by an external agent or policy.

It is core to the design of Simulate that we are *not creating* Agents, but rather providing an interface for applications of machine learning and embodied AI.
The core API for RL applications can be seen below, where Simulate constrains the information that flows from the Scene to the external agent through an Actuator abstraction.

<p align="center">
    <br>
    <img src="https://user-images.githubusercontent.com/10695622/192663853-a7543091-8d45-4fba-b8dc-2b632d66a35f.png" width="500"/>
    <br>
</p>

At release, we include a set of pre-designed \`Actor\`'s that can act or navigate a scene. An \`Actor\` inherits from an \`Object3D\` and has sensors, actuators, and action mappings.


<h3 class="relative group">
	<a 
		id="tips" 
		class="header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full" 
		href="#tips"
	>
		<span><IconCopyLink/></span>
	</a>
	<span>
		Tips
	</span>
</h3>


If you are running on GCP, remember to not install \`pyvistaqt\`, and if you did so, uninstall it in your environment, since QT doesn't work well on GCP.
`,highlighted:`
You can find bridges <span class="hljs-keyword">to</span> other rendering/simulation engines <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> \`integrations\` directory.

&lt;h1 <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;reinforcement-learning-rl-with-simulate&quot;</span>&gt;Reinforcement Learning (RL) <span class="hljs-keyword">with</span> Simulate&lt;/h1&gt;

Simulate <span class="hljs-keyword">is</span> designed <span class="hljs-keyword">to</span> provide easy <span class="hljs-keyword">and</span> scalable integration <span class="hljs-keyword">with</span> reinforcement learning algorithms.
The core abstraction <span class="hljs-keyword">is</span> <span class="hljs-keyword">through</span> <span class="hljs-keyword">the</span> [RLEnv](/docs/simulate/main/en/api/rl_env<span class="hljs-comment">#simulate.RLEnv) class that wraps a \`Scene\`.</span>
The [RLEnv](/docs/simulate/main/en/api/rl_env<span class="hljs-comment">#simulate.RLEnv) allows an [Actuator](/docs/simulate/main/en/api/actuators#simulate.Actuator) to be manipulated by an external agent or policy.</span>

It <span class="hljs-keyword">is</span> core <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> design <span class="hljs-keyword">of</span> Simulate <span class="hljs-keyword">that</span> we are *<span class="hljs-keyword">not</span> creating* Agents, <span class="hljs-keyword">but</span> rather providing an interface <span class="hljs-keyword">for</span> applications <span class="hljs-keyword">of</span> machine learning <span class="hljs-keyword">and</span> embodied AI.
The core API <span class="hljs-keyword">for</span> RL applications can be seen <span class="hljs-keyword">below</span>, <span class="hljs-keyword">where</span> Simulate constrains <span class="hljs-keyword">the</span> information <span class="hljs-keyword">that</span> flows <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> Scene <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> external agent <span class="hljs-keyword">through</span> an Actuator abstraction.

&lt;p align=<span class="hljs-string">&quot;center&quot;</span>&gt;
    &lt;br&gt;
    &lt;img src=<span class="hljs-string">&quot;https://user-images.githubusercontent.com/10695622/192663853-a7543091-8d45-4fba-b8dc-2b632d66a35f.png&quot;</span> width=<span class="hljs-string">&quot;500&quot;</span>/&gt;
    &lt;br&gt;
&lt;/p&gt;

At release, we include a <span class="hljs-keyword">set</span> <span class="hljs-keyword">of</span> pre-designed \`Actor\`&#x27;s <span class="hljs-keyword">that</span> can act <span class="hljs-keyword">or</span> navigate a scene. An \`Actor\` inherits <span class="hljs-keyword">from</span> an \`Object3D\` <span class="hljs-keyword">and</span> has sensors, actuators, <span class="hljs-keyword">and</span> action mappings.


&lt;h3 <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;Tips&lt;/h3&gt;

If you are <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> GCP, remember <span class="hljs-keyword">to</span> <span class="hljs-keyword">not</span> install \`pyvistaqt\`, <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span> you did so, uninstall <span class="hljs-keyword">it</span> <span class="hljs-keyword">in</span> your environment, <span class="hljs-keyword">since</span> QT doesn&#x27;t work well <span class="hljs-keyword">on</span> GCP.
`}}),{c(){S=t("meta"),ha=p(),P=t("h1"),N=t("a"),We=t("span"),m(le.$$.fragment),gt=p(),Ye=t("span"),bt=r("Quicktour"),da=p(),U=t("p"),wt=r("Simulate\u2019s API is inspired by the great "),ne=t("a"),yt=r("Kubric\u2019s API"),_t=r(`.
The user create a scene and add assets in it (objects, cameras, lights if needed).
Once the scene is created you can save/share it and also render or do simulations using one of the backend rendering/simulation engines (at the moment Unity, Blender and Godot). The saving/sharing format is engine agnostic and using the industry standard glTF format for saving scenes.`),ua=p(),$e=t("p"),jt=r("Let\u2019s do a quick exploration together."),fa=p(),Se=t("p"),Et=r("We\u2019ll use the default backend which is a simple"),ma=p(),z=t("p"),kt=r("To install and contribute (from "),Pe=t("a"),$t=r("CONTRIBUTING.md"),St=r(")"),va=p(),xe=t("p"),Pt=r("Create a virtual env and then install the code style/quality tools as well as the code base locally"),ga=p(),m(re.$$.fragment),ba=p(),k=t("p"),xt=r("Before you merge a PR, fix the style (we use "),Je=t("code"),At=r("isort"),Lt=r(" + "),Xe=t("code"),Ct=r("black"),Ot=r(")"),wa=p(),m(oe.$$.fragment),ya=p(),x=t("h2"),G=t("a"),Ze=t("span"),m(ie.$$.fragment),It=p(),es=t("span"),Tt=r("Project Structure"),_a=p(),Ae=t("p"),Dt=r("The Python API is located in src/simulate. It allows creation and loading of scenes, and sending commands to the backend."),ja=p(),H=t("p"),qt=r("The backend, currently just Unity, is located in "),Le=t("a"),Rt=r("integrations/Unity"),Bt=r(`.
This is currently a Unity editor project, which must be opened in Unity 2021.3.2f1.
In the future, this will be built as an executable, and spawned by the Python API.`),Ea=p(),A=t("h2"),F=t("a"),ss=t("span"),m(ce.$$.fragment),Mt=p(),as=t("span"),Nt=r("Loading a scene from the hub or a local file"),ka=p(),_=t("p"),Ut=r("Loading a scene from a local file or the hub is done with "),ts=t("code"),zt=r("Scene.create_from()"),Gt=r(", saving or pushing to the hub with "),ls=t("code"),Ht=r("scene.save()"),Ft=r(" or "),ns=t("code"),Qt=r("scene.push_to_hub()"),Kt=r(":"),$a=p(),m(pe.$$.fragment),Sa=p(),j=t("p"),Vt=t("br"),Wt=p(),Ce=t("img"),Yt=p(),Jt=t("br"),Pa=p(),L=t("h2"),Q=t("a"),rs=t("span"),m(he.$$.fragment),Xt=p(),os=t("span"),Zt=r("Creating a Scene and adding/managing Objects in the scene"),xa=p(),Oe=t("p"),el=r("Basic example of creating a scene with a plane and a sphere above it:"),Aa=p(),m(de.$$.fragment),La=p(),K=t("p"),sl=r("An object (as well as the Scene) is just a node in a tree provided with optional mesh (as "),is=t("code"),al=r("pyvista.PolyData"),tl=r(" structure) and material and/or light, camera, agents special objects."),Ca=p(),Ie=t("p"),ll=r("The following objects creation helpers are currently provided:"),Oa=p(),u=t("ul"),V=t("li"),cs=t("code"),nl=r("Object3D"),rl=r(" any object with a "),ps=t("code"),ol=r("pyvista.PolyData"),il=r(" mesh and/or material"),cl=p(),hs=t("li"),ds=t("code"),pl=r("Plane"),hl=p(),us=t("li"),fs=t("code"),dl=r("Sphere"),ul=p(),ms=t("li"),vs=t("code"),fl=r("Capsule"),ml=p(),gs=t("li"),bs=t("code"),vl=r("Cylinder"),gl=p(),ws=t("li"),ys=t("code"),bl=r("Box"),wl=p(),_s=t("li"),js=t("code"),yl=r("Cone"),_l=p(),Es=t("li"),ks=t("code"),jl=r("Line"),El=p(),$s=t("li"),Ss=t("code"),kl=r("MultipleLines"),$l=p(),Ps=t("li"),xs=t("code"),Sl=r("Tube"),Pl=p(),As=t("li"),Ls=t("code"),xl=r("Polygon"),Al=p(),Cs=t("li"),Os=t("code"),Ll=r("Ring"),Cl=p(),Is=t("li"),Ts=t("code"),Ol=r("Text3D"),Il=p(),Ds=t("li"),qs=t("code"),Tl=r("Triangle"),Dl=p(),Rs=t("li"),Bs=t("code"),ql=r("Rectangle"),Rl=p(),Ms=t("li"),Ns=t("code"),Bl=r("Circle"),Ml=p(),Us=t("li"),zs=t("code"),Nl=r("StructuredGrid"),Ia=p(),W=t("p"),Ul=r("Most of these objects can be visualized by running the following "),ue=t("a"),zl=r("example"),Gl=r(":"),Ta=p(),m(fe.$$.fragment),Da=p(),E=t("p"),Hl=t("br"),Fl=p(),Te=t("img"),Ql=p(),Kl=t("br"),qa=p(),C=t("h3"),Y=t("a"),Gs=t("span"),m(me.$$.fragment),Vl=p(),Hs=t("span"),Wl=r("Objects are organized in a tree structure"),Ra=p(),De=t("p"),Yl=r("Adding/removing objects:"),Ba=p(),$=t("ul"),O=t("li"),Jl=r("Using the addition ("),Fs=t("code"),Xl=r("+"),Zl=r(") operator (or alternatively the method "),Qs=t("code"),en=r(".add(object)"),sn=r(") will add an object as a child of a previous object."),an=p(),I=t("li"),tn=r("Objects can be removed with the subtraction ("),Ks=t("code"),ln=r("-"),nn=r(") operator or the "),Vs=t("code"),rn=r(".remove(object)"),on=r(" command."),cn=p(),ve=t("li"),pn=r("The whole scene can be cleared with "),Ws=t("code"),hn=r(".clear()"),dn=r("."),Ma=p(),qe=t("p"),un=r("Accessing objects:"),Na=p(),J=t("ul"),ge=t("li"),fn=r("Objects can be directly accessed as attributes of their parents using their names (given with  "),Ys=t("code"),mn=r("name"),vn=r(" attribute at creation or automatically generated from the class name + creation counter)."),gn=p(),T=t("li"),bn=r("Objects can also be accessed from their names with "),Js=t("code"),wn=r(".get(name)"),yn=r(" or by navigating in the tree using the various "),Xs=t("code"),_n=r("tree_*"),jn=r(" attributes available on any node."),Ua=p(),Re=t("p"),En=r("Here are a couple of examples of manipulations:"),za=p(),m(be.$$.fragment),Ga=p(),D=t("h3"),X=t("a"),Zs=t("span"),m(we.$$.fragment),kn=p(),ea=t("span"),$n=r("Objects can be translated, rotated, scaled"),Ha=r(`

Here are a couple of examples:
\`\`\`
# Let's translate our floor (with the first sphere, it's child)
scene.plane_01.translate_x(1)
`),q=t("h1"),Z=t("a"),sa=t("span"),m(ye.$$.fragment),Sn=p(),aa=t("span"),Pn=r("Let\u2019s scale the second sphere uniformly"),Fa=p(),Be=t("p"),xn=r("scene.sphere_03.scale(0.1)"),Qa=p(),R=t("h1"),ee=t("a"),ta=t("span"),m(_e.$$.fragment),An=p(),la=t("span"),Ln=r("Inspect the current position and scaling values"),Ka=p(),Me=t("p"),Cn=r("print(scene.plane_01.position)"),Va=p(),Ne=t("blockquote"),na=t("blockquote"),ra=t("blockquote"),oa=t("p"),On=r(`array([1., 0., 0.])
print(scene.sphere_03.scaling)
array([0.1, 0.1, 0.1])`),Wa=p(),B=t("h1"),se=t("a"),ia=t("span"),m(je.$$.fragment),In=p(),ca=t("span"),Tn=r("We can also translate from a vector and rotate from a quaternion or along the various axis"),Ya=p(),m(Ee.$$.fragment),Ja=p(),Ue=t("p"),Dn=r("scene.show()"),Xa=p(),m(ke.$$.fragment),this.h()},l(e){const i=Co('[data-svelte="svelte-1phssyn"]',document.head);S=l(i,"META",{name:!0,content:!0}),i.forEach(a),ha=h(e),P=l(e,"H1",{class:!0});var et=n(P);N=l(et,"A",{id:!0,class:!0,href:!0});var Mn=n(N);We=l(Mn,"SPAN",{});var Nn=n(We);v(le.$$.fragment,Nn),Nn.forEach(a),Mn.forEach(a),gt=h(et),Ye=l(et,"SPAN",{});var Un=n(Ye);bt=o(Un,"Quicktour"),Un.forEach(a),et.forEach(a),da=h(e),U=l(e,"P",{});var st=n(U);wt=o(st,"Simulate\u2019s API is inspired by the great "),ne=l(st,"A",{href:!0,rel:!0});var zn=n(ne);yt=o(zn,"Kubric\u2019s API"),zn.forEach(a),_t=o(st,`.
The user create a scene and add assets in it (objects, cameras, lights if needed).
Once the scene is created you can save/share it and also render or do simulations using one of the backend rendering/simulation engines (at the moment Unity, Blender and Godot). The saving/sharing format is engine agnostic and using the industry standard glTF format for saving scenes.`),st.forEach(a),ua=h(e),$e=l(e,"P",{});var Gn=n($e);jt=o(Gn,"Let\u2019s do a quick exploration together."),Gn.forEach(a),fa=h(e),Se=l(e,"P",{});var Hn=n(Se);Et=o(Hn,"We\u2019ll use the default backend which is a simple"),Hn.forEach(a),ma=h(e),z=l(e,"P",{});var at=n(z);kt=o(at,"To install and contribute (from "),Pe=l(at,"A",{href:!0});var Fn=n(Pe);$t=o(Fn,"CONTRIBUTING.md"),Fn.forEach(a),St=o(at,")"),at.forEach(a),va=h(e),xe=l(e,"P",{});var Qn=n(xe);Pt=o(Qn,"Create a virtual env and then install the code style/quality tools as well as the code base locally"),Qn.forEach(a),ga=h(e),v(re.$$.fragment,e),ba=h(e),k=l(e,"P",{});var ze=n(k);xt=o(ze,"Before you merge a PR, fix the style (we use "),Je=l(ze,"CODE",{});var Kn=n(Je);At=o(Kn,"isort"),Kn.forEach(a),Lt=o(ze," + "),Xe=l(ze,"CODE",{});var Vn=n(Xe);Ct=o(Vn,"black"),Vn.forEach(a),Ot=o(ze,")"),ze.forEach(a),wa=h(e),v(oe.$$.fragment,e),ya=h(e),x=l(e,"H2",{class:!0});var tt=n(x);G=l(tt,"A",{id:!0,class:!0,href:!0});var Wn=n(G);Ze=l(Wn,"SPAN",{});var Yn=n(Ze);v(ie.$$.fragment,Yn),Yn.forEach(a),Wn.forEach(a),It=h(tt),es=l(tt,"SPAN",{});var Jn=n(es);Tt=o(Jn,"Project Structure"),Jn.forEach(a),tt.forEach(a),_a=h(e),Ae=l(e,"P",{});var Xn=n(Ae);Dt=o(Xn,"The Python API is located in src/simulate. It allows creation and loading of scenes, and sending commands to the backend."),Xn.forEach(a),ja=h(e),H=l(e,"P",{});var lt=n(H);qt=o(lt,"The backend, currently just Unity, is located in "),Le=l(lt,"A",{href:!0});var Zn=n(Le);Rt=o(Zn,"integrations/Unity"),Zn.forEach(a),Bt=o(lt,`.
This is currently a Unity editor project, which must be opened in Unity 2021.3.2f1.
In the future, this will be built as an executable, and spawned by the Python API.`),lt.forEach(a),Ea=h(e),A=l(e,"H2",{class:!0});var nt=n(A);F=l(nt,"A",{id:!0,class:!0,href:!0});var er=n(F);ss=l(er,"SPAN",{});var sr=n(ss);v(ce.$$.fragment,sr),sr.forEach(a),er.forEach(a),Mt=h(nt),as=l(nt,"SPAN",{});var ar=n(as);Nt=o(ar,"Loading a scene from the hub or a local file"),ar.forEach(a),nt.forEach(a),ka=h(e),_=l(e,"P",{});var ae=n(_);Ut=o(ae,"Loading a scene from a local file or the hub is done with "),ts=l(ae,"CODE",{});var tr=n(ts);zt=o(tr,"Scene.create_from()"),tr.forEach(a),Gt=o(ae,", saving or pushing to the hub with "),ls=l(ae,"CODE",{});var lr=n(ls);Ht=o(lr,"scene.save()"),lr.forEach(a),Ft=o(ae," or "),ns=l(ae,"CODE",{});var nr=n(ns);Qt=o(nr,"scene.push_to_hub()"),nr.forEach(a),Kt=o(ae,":"),ae.forEach(a),$a=h(e),v(pe.$$.fragment,e),Sa=h(e),j=l(e,"P",{align:!0});var Ge=n(j);Vt=l(Ge,"BR",{}),Wt=h(Ge),Ce=l(Ge,"IMG",{src:!0,width:!0}),Yt=h(Ge),Jt=l(Ge,"BR",{}),Ge.forEach(a),Pa=h(e),L=l(e,"H2",{class:!0});var rt=n(L);Q=l(rt,"A",{id:!0,class:!0,href:!0});var rr=n(Q);rs=l(rr,"SPAN",{});var or=n(rs);v(he.$$.fragment,or),or.forEach(a),rr.forEach(a),Xt=h(rt),os=l(rt,"SPAN",{});var ir=n(os);Zt=o(ir,"Creating a Scene and adding/managing Objects in the scene"),ir.forEach(a),rt.forEach(a),xa=h(e),Oe=l(e,"P",{});var cr=n(Oe);el=o(cr,"Basic example of creating a scene with a plane and a sphere above it:"),cr.forEach(a),Aa=h(e),v(de.$$.fragment,e),La=h(e),K=l(e,"P",{});var ot=n(K);sl=o(ot,"An object (as well as the Scene) is just a node in a tree provided with optional mesh (as "),is=l(ot,"CODE",{});var pr=n(is);al=o(pr,"pyvista.PolyData"),pr.forEach(a),tl=o(ot," structure) and material and/or light, camera, agents special objects."),ot.forEach(a),Ca=h(e),Ie=l(e,"P",{});var hr=n(Ie);ll=o(hr,"The following objects creation helpers are currently provided:"),hr.forEach(a),Oa=h(e),u=l(e,"UL",{});var f=n(u);V=l(f,"LI",{});var pa=n(V);cs=l(pa,"CODE",{});var dr=n(cs);nl=o(dr,"Object3D"),dr.forEach(a),rl=o(pa," any object with a "),ps=l(pa,"CODE",{});var ur=n(ps);ol=o(ur,"pyvista.PolyData"),ur.forEach(a),il=o(pa," mesh and/or material"),pa.forEach(a),cl=h(f),hs=l(f,"LI",{});var fr=n(hs);ds=l(fr,"CODE",{});var mr=n(ds);pl=o(mr,"Plane"),mr.forEach(a),fr.forEach(a),hl=h(f),us=l(f,"LI",{});var vr=n(us);fs=l(vr,"CODE",{});var gr=n(fs);dl=o(gr,"Sphere"),gr.forEach(a),vr.forEach(a),ul=h(f),ms=l(f,"LI",{});var br=n(ms);vs=l(br,"CODE",{});var wr=n(vs);fl=o(wr,"Capsule"),wr.forEach(a),br.forEach(a),ml=h(f),gs=l(f,"LI",{});var yr=n(gs);bs=l(yr,"CODE",{});var _r=n(bs);vl=o(_r,"Cylinder"),_r.forEach(a),yr.forEach(a),gl=h(f),ws=l(f,"LI",{});var jr=n(ws);ys=l(jr,"CODE",{});var Er=n(ys);bl=o(Er,"Box"),Er.forEach(a),jr.forEach(a),wl=h(f),_s=l(f,"LI",{});var kr=n(_s);js=l(kr,"CODE",{});var $r=n(js);yl=o($r,"Cone"),$r.forEach(a),kr.forEach(a),_l=h(f),Es=l(f,"LI",{});var Sr=n(Es);ks=l(Sr,"CODE",{});var Pr=n(ks);jl=o(Pr,"Line"),Pr.forEach(a),Sr.forEach(a),El=h(f),$s=l(f,"LI",{});var xr=n($s);Ss=l(xr,"CODE",{});var Ar=n(Ss);kl=o(Ar,"MultipleLines"),Ar.forEach(a),xr.forEach(a),$l=h(f),Ps=l(f,"LI",{});var Lr=n(Ps);xs=l(Lr,"CODE",{});var Cr=n(xs);Sl=o(Cr,"Tube"),Cr.forEach(a),Lr.forEach(a),Pl=h(f),As=l(f,"LI",{});var Or=n(As);Ls=l(Or,"CODE",{});var Ir=n(Ls);xl=o(Ir,"Polygon"),Ir.forEach(a),Or.forEach(a),Al=h(f),Cs=l(f,"LI",{});var Tr=n(Cs);Os=l(Tr,"CODE",{});var Dr=n(Os);Ll=o(Dr,"Ring"),Dr.forEach(a),Tr.forEach(a),Cl=h(f),Is=l(f,"LI",{});var qr=n(Is);Ts=l(qr,"CODE",{});var Rr=n(Ts);Ol=o(Rr,"Text3D"),Rr.forEach(a),qr.forEach(a),Il=h(f),Ds=l(f,"LI",{});var Br=n(Ds);qs=l(Br,"CODE",{});var Mr=n(qs);Tl=o(Mr,"Triangle"),Mr.forEach(a),Br.forEach(a),Dl=h(f),Rs=l(f,"LI",{});var Nr=n(Rs);Bs=l(Nr,"CODE",{});var Ur=n(Bs);ql=o(Ur,"Rectangle"),Ur.forEach(a),Nr.forEach(a),Rl=h(f),Ms=l(f,"LI",{});var zr=n(Ms);Ns=l(zr,"CODE",{});var Gr=n(Ns);Bl=o(Gr,"Circle"),Gr.forEach(a),zr.forEach(a),Ml=h(f),Us=l(f,"LI",{});var Hr=n(Us);zs=l(Hr,"CODE",{});var Fr=n(zs);Nl=o(Fr,"StructuredGrid"),Fr.forEach(a),Hr.forEach(a),f.forEach(a),Ia=h(e),W=l(e,"P",{});var it=n(W);Ul=o(it,"Most of these objects can be visualized by running the following "),ue=l(it,"A",{href:!0,rel:!0});var Qr=n(ue);zl=o(Qr,"example"),Qr.forEach(a),Gl=o(it,":"),it.forEach(a),Ta=h(e),v(fe.$$.fragment,e),Da=h(e),E=l(e,"P",{align:!0});var He=n(E);Hl=l(He,"BR",{}),Fl=h(He),Te=l(He,"IMG",{src:!0,width:!0}),Ql=h(He),Kl=l(He,"BR",{}),He.forEach(a),qa=h(e),C=l(e,"H3",{class:!0});var ct=n(C);Y=l(ct,"A",{id:!0,class:!0,href:!0});var Kr=n(Y);Gs=l(Kr,"SPAN",{});var Vr=n(Gs);v(me.$$.fragment,Vr),Vr.forEach(a),Kr.forEach(a),Vl=h(ct),Hs=l(ct,"SPAN",{});var Wr=n(Hs);Wl=o(Wr,"Objects are organized in a tree structure"),Wr.forEach(a),ct.forEach(a),Ra=h(e),De=l(e,"P",{});var Yr=n(De);Yl=o(Yr,"Adding/removing objects:"),Yr.forEach(a),Ba=h(e),$=l(e,"UL",{});var Fe=n($);O=l(Fe,"LI",{});var Qe=n(O);Jl=o(Qe,"Using the addition ("),Fs=l(Qe,"CODE",{});var Jr=n(Fs);Xl=o(Jr,"+"),Jr.forEach(a),Zl=o(Qe,") operator (or alternatively the method "),Qs=l(Qe,"CODE",{});var Xr=n(Qs);en=o(Xr,".add(object)"),Xr.forEach(a),sn=o(Qe,") will add an object as a child of a previous object."),Qe.forEach(a),an=h(Fe),I=l(Fe,"LI",{});var Ke=n(I);tn=o(Ke,"Objects can be removed with the subtraction ("),Ks=l(Ke,"CODE",{});var Zr=n(Ks);ln=o(Zr,"-"),Zr.forEach(a),nn=o(Ke,") operator or the "),Vs=l(Ke,"CODE",{});var eo=n(Vs);rn=o(eo,".remove(object)"),eo.forEach(a),on=o(Ke," command."),Ke.forEach(a),cn=h(Fe),ve=l(Fe,"LI",{});var pt=n(ve);pn=o(pt,"The whole scene can be cleared with "),Ws=l(pt,"CODE",{});var so=n(Ws);hn=o(so,".clear()"),so.forEach(a),dn=o(pt,"."),pt.forEach(a),Fe.forEach(a),Ma=h(e),qe=l(e,"P",{});var ao=n(qe);un=o(ao,"Accessing objects:"),ao.forEach(a),Na=h(e),J=l(e,"UL",{});var ht=n(J);ge=l(ht,"LI",{});var dt=n(ge);fn=o(dt,"Objects can be directly accessed as attributes of their parents using their names (given with  "),Ys=l(dt,"CODE",{});var to=n(Ys);mn=o(to,"name"),to.forEach(a),vn=o(dt," attribute at creation or automatically generated from the class name + creation counter)."),dt.forEach(a),gn=h(ht),T=l(ht,"LI",{});var Ve=n(T);bn=o(Ve,"Objects can also be accessed from their names with "),Js=l(Ve,"CODE",{});var lo=n(Js);wn=o(lo,".get(name)"),lo.forEach(a),yn=o(Ve," or by navigating in the tree using the various "),Xs=l(Ve,"CODE",{});var no=n(Xs);_n=o(no,"tree_*"),no.forEach(a),jn=o(Ve," attributes available on any node."),Ve.forEach(a),ht.forEach(a),Ua=h(e),Re=l(e,"P",{});var ro=n(Re);En=o(ro,"Here are a couple of examples of manipulations:"),ro.forEach(a),za=h(e),v(be.$$.fragment,e),Ga=h(e),D=l(e,"H3",{class:!0});var ut=n(D);X=l(ut,"A",{id:!0,class:!0,href:!0});var oo=n(X);Zs=l(oo,"SPAN",{});var io=n(Zs);v(we.$$.fragment,io),io.forEach(a),oo.forEach(a),kn=h(ut),ea=l(ut,"SPAN",{});var co=n(ea);$n=o(co,"Objects can be translated, rotated, scaled"),co.forEach(a),ut.forEach(a),Ha=o(e,`

Here are a couple of examples:
\`\`\`
# Let's translate our floor (with the first sphere, it's child)
scene.plane_01.translate_x(1)
`),q=l(e,"H1",{class:!0});var ft=n(q);Z=l(ft,"A",{id:!0,class:!0,href:!0});var po=n(Z);sa=l(po,"SPAN",{});var ho=n(sa);v(ye.$$.fragment,ho),ho.forEach(a),po.forEach(a),Sn=h(ft),aa=l(ft,"SPAN",{});var uo=n(aa);Pn=o(uo,"Let\u2019s scale the second sphere uniformly"),uo.forEach(a),ft.forEach(a),Fa=h(e),Be=l(e,"P",{});var fo=n(Be);xn=o(fo,"scene.sphere_03.scale(0.1)"),fo.forEach(a),Qa=h(e),R=l(e,"H1",{class:!0});var mt=n(R);ee=l(mt,"A",{id:!0,class:!0,href:!0});var mo=n(ee);ta=l(mo,"SPAN",{});var vo=n(ta);v(_e.$$.fragment,vo),vo.forEach(a),mo.forEach(a),An=h(mt),la=l(mt,"SPAN",{});var go=n(la);Ln=o(go,"Inspect the current position and scaling values"),go.forEach(a),mt.forEach(a),Ka=h(e),Me=l(e,"P",{});var bo=n(Me);Cn=o(bo,"print(scene.plane_01.position)"),bo.forEach(a),Va=h(e),Ne=l(e,"BLOCKQUOTE",{});var wo=n(Ne);na=l(wo,"BLOCKQUOTE",{});var yo=n(na);ra=l(yo,"BLOCKQUOTE",{});var _o=n(ra);oa=l(_o,"P",{});var jo=n(oa);On=o(jo,`array([1., 0., 0.])
print(scene.sphere_03.scaling)
array([0.1, 0.1, 0.1])`),jo.forEach(a),_o.forEach(a),yo.forEach(a),wo.forEach(a),Wa=h(e),B=l(e,"H1",{class:!0});var vt=n(B);se=l(vt,"A",{id:!0,class:!0,href:!0});var Eo=n(se);ia=l(Eo,"SPAN",{});var ko=n(ia);v(je.$$.fragment,ko),ko.forEach(a),Eo.forEach(a),In=h(vt),ca=l(vt,"SPAN",{});var $o=n(ca);Tn=o($o,"We can also translate from a vector and rotate from a quaternion or along the various axis"),$o.forEach(a),vt.forEach(a),Ya=h(e),v(Ee.$$.fragment,e),Ja=h(e),Ue=l(e,"P",{});var So=n(Ue);Dn=o(So,"scene.show()"),So.forEach(a),Xa=h(e),v(ke.$$.fragment,e),this.h()},h(){d(S,"name","hf:doc:metadata"),d(S,"content",JSON.stringify(Do)),d(N,"id","quicktour"),d(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N,"href","#quicktour"),d(P,"class","relative group"),d(ne,"href","https://github.com/google-research/kubric"),d(ne,"rel","nofollow"),d(Pe,"href","CONTRIBUTING.md"),d(G,"id","project-structure"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#project-structure"),d(x,"class","relative group"),d(Le,"href","integrations/Unity"),d(F,"id","loading-a-scene-from-the-hub-or-a-local-file"),d(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F,"href","#loading-a-scene-from-the-hub-or-a-local-file"),d(A,"class","relative group"),Po(Ce.src,Rn="https://user-images.githubusercontent.com/10695622/191554717-acba4764-a4f4-4609-834a-39ddb50b844a.png")||d(Ce,"src",Rn),d(Ce,"width","400"),d(j,"align","center"),d(Q,"id","creating-a-scene-and-addingmanaging-objects-in-the-scene"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#creating-a-scene-and-addingmanaging-objects-in-the-scene"),d(L,"class","relative group"),d(ue,"href","https://github.com/huggingface/simulate/tree/main/examples/objects.py"),d(ue,"rel","nofollow"),Po(Te.src,Bn="https://user-images.githubusercontent.com/10695622/191562825-49d4c692-a1ed-44e9-bdb9-da5f0bfb9828.png")||d(Te,"src",Bn),d(Te,"width","400"),d(E,"align","center"),d(Y,"id","objects-are-organized-in-a-tree-structure"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#objects-are-organized-in-a-tree-structure"),d(C,"class","relative group"),d(X,"id","objects-can-be-translated-rotated-scaled"),d(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X,"href","#objects-can-be-translated-rotated-scaled"),d(D,"class","relative group"),d(Z,"id","let\u2019s-scale-the-second-sphere-uniformly"),d(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z,"href","#let\u2019s-scale-the-second-sphere-uniformly"),d(q,"class","relative group"),d(ee,"id","inspect-the-current-position-and-scaling-values"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#inspect-the-current-position-and-scaling-values"),d(R,"class","relative group"),d(se,"id","we-can-also-translate-from-a-vector-and-rotate-from-a-quaternion-or-along-the-various-axis"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#we-can-also-translate-from-a-vector-and-rotate-from-a-quaternion-or-along-the-various-axis"),d(B,"class","relative group")},m(e,i){s(document.head,S),c(e,ha,i),c(e,P,i),s(P,N),s(N,We),g(le,We,null),s(P,gt),s(P,Ye),s(Ye,bt),c(e,da,i),c(e,U,i),s(U,wt),s(U,ne),s(ne,yt),s(U,_t),c(e,ua,i),c(e,$e,i),s($e,jt),c(e,fa,i),c(e,Se,i),s(Se,Et),c(e,ma,i),c(e,z,i),s(z,kt),s(z,Pe),s(Pe,$t),s(z,St),c(e,va,i),c(e,xe,i),s(xe,Pt),c(e,ga,i),g(re,e,i),c(e,ba,i),c(e,k,i),s(k,xt),s(k,Je),s(Je,At),s(k,Lt),s(k,Xe),s(Xe,Ct),s(k,Ot),c(e,wa,i),g(oe,e,i),c(e,ya,i),c(e,x,i),s(x,G),s(G,Ze),g(ie,Ze,null),s(x,It),s(x,es),s(es,Tt),c(e,_a,i),c(e,Ae,i),s(Ae,Dt),c(e,ja,i),c(e,H,i),s(H,qt),s(H,Le),s(Le,Rt),s(H,Bt),c(e,Ea,i),c(e,A,i),s(A,F),s(F,ss),g(ce,ss,null),s(A,Mt),s(A,as),s(as,Nt),c(e,ka,i),c(e,_,i),s(_,Ut),s(_,ts),s(ts,zt),s(_,Gt),s(_,ls),s(ls,Ht),s(_,Ft),s(_,ns),s(ns,Qt),s(_,Kt),c(e,$a,i),g(pe,e,i),c(e,Sa,i),c(e,j,i),s(j,Vt),s(j,Wt),s(j,Ce),s(j,Yt),s(j,Jt),c(e,Pa,i),c(e,L,i),s(L,Q),s(Q,rs),g(he,rs,null),s(L,Xt),s(L,os),s(os,Zt),c(e,xa,i),c(e,Oe,i),s(Oe,el),c(e,Aa,i),g(de,e,i),c(e,La,i),c(e,K,i),s(K,sl),s(K,is),s(is,al),s(K,tl),c(e,Ca,i),c(e,Ie,i),s(Ie,ll),c(e,Oa,i),c(e,u,i),s(u,V),s(V,cs),s(cs,nl),s(V,rl),s(V,ps),s(ps,ol),s(V,il),s(u,cl),s(u,hs),s(hs,ds),s(ds,pl),s(u,hl),s(u,us),s(us,fs),s(fs,dl),s(u,ul),s(u,ms),s(ms,vs),s(vs,fl),s(u,ml),s(u,gs),s(gs,bs),s(bs,vl),s(u,gl),s(u,ws),s(ws,ys),s(ys,bl),s(u,wl),s(u,_s),s(_s,js),s(js,yl),s(u,_l),s(u,Es),s(Es,ks),s(ks,jl),s(u,El),s(u,$s),s($s,Ss),s(Ss,kl),s(u,$l),s(u,Ps),s(Ps,xs),s(xs,Sl),s(u,Pl),s(u,As),s(As,Ls),s(Ls,xl),s(u,Al),s(u,Cs),s(Cs,Os),s(Os,Ll),s(u,Cl),s(u,Is),s(Is,Ts),s(Ts,Ol),s(u,Il),s(u,Ds),s(Ds,qs),s(qs,Tl),s(u,Dl),s(u,Rs),s(Rs,Bs),s(Bs,ql),s(u,Rl),s(u,Ms),s(Ms,Ns),s(Ns,Bl),s(u,Ml),s(u,Us),s(Us,zs),s(zs,Nl),c(e,Ia,i),c(e,W,i),s(W,Ul),s(W,ue),s(ue,zl),s(W,Gl),c(e,Ta,i),g(fe,e,i),c(e,Da,i),c(e,E,i),s(E,Hl),s(E,Fl),s(E,Te),s(E,Ql),s(E,Kl),c(e,qa,i),c(e,C,i),s(C,Y),s(Y,Gs),g(me,Gs,null),s(C,Vl),s(C,Hs),s(Hs,Wl),c(e,Ra,i),c(e,De,i),s(De,Yl),c(e,Ba,i),c(e,$,i),s($,O),s(O,Jl),s(O,Fs),s(Fs,Xl),s(O,Zl),s(O,Qs),s(Qs,en),s(O,sn),s($,an),s($,I),s(I,tn),s(I,Ks),s(Ks,ln),s(I,nn),s(I,Vs),s(Vs,rn),s(I,on),s($,cn),s($,ve),s(ve,pn),s(ve,Ws),s(Ws,hn),s(ve,dn),c(e,Ma,i),c(e,qe,i),s(qe,un),c(e,Na,i),c(e,J,i),s(J,ge),s(ge,fn),s(ge,Ys),s(Ys,mn),s(ge,vn),s(J,gn),s(J,T),s(T,bn),s(T,Js),s(Js,wn),s(T,yn),s(T,Xs),s(Xs,_n),s(T,jn),c(e,Ua,i),c(e,Re,i),s(Re,En),c(e,za,i),g(be,e,i),c(e,Ga,i),c(e,D,i),s(D,X),s(X,Zs),g(we,Zs,null),s(D,kn),s(D,ea),s(ea,$n),c(e,Ha,i),c(e,q,i),s(q,Z),s(Z,sa),g(ye,sa,null),s(q,Sn),s(q,aa),s(aa,Pn),c(e,Fa,i),c(e,Be,i),s(Be,xn),c(e,Qa,i),c(e,R,i),s(R,ee),s(ee,ta),g(_e,ta,null),s(R,An),s(R,la),s(la,Ln),c(e,Ka,i),c(e,Me,i),s(Me,Cn),c(e,Va,i),c(e,Ne,i),s(Ne,na),s(na,ra),s(ra,oa),s(oa,On),c(e,Wa,i),c(e,B,i),s(B,se),s(se,ia),g(je,ia,null),s(B,In),s(B,ca),s(ca,Tn),c(e,Ya,i),g(Ee,e,i),c(e,Ja,i),c(e,Ue,i),s(Ue,Dn),c(e,Xa,i),g(ke,e,i),Za=!0},p:Oo,i(e){Za||(b(le.$$.fragment,e),b(re.$$.fragment,e),b(oe.$$.fragment,e),b(ie.$$.fragment,e),b(ce.$$.fragment,e),b(pe.$$.fragment,e),b(he.$$.fragment,e),b(de.$$.fragment,e),b(fe.$$.fragment,e),b(me.$$.fragment,e),b(be.$$.fragment,e),b(we.$$.fragment,e),b(ye.$$.fragment,e),b(_e.$$.fragment,e),b(je.$$.fragment,e),b(Ee.$$.fragment,e),b(ke.$$.fragment,e),Za=!0)},o(e){w(le.$$.fragment,e),w(re.$$.fragment,e),w(oe.$$.fragment,e),w(ie.$$.fragment,e),w(ce.$$.fragment,e),w(pe.$$.fragment,e),w(he.$$.fragment,e),w(de.$$.fragment,e),w(fe.$$.fragment,e),w(me.$$.fragment,e),w(be.$$.fragment,e),w(we.$$.fragment,e),w(ye.$$.fragment,e),w(_e.$$.fragment,e),w(je.$$.fragment,e),w(Ee.$$.fragment,e),w(ke.$$.fragment,e),Za=!1},d(e){a(S),e&&a(ha),e&&a(P),y(le),e&&a(da),e&&a(U),e&&a(ua),e&&a($e),e&&a(fa),e&&a(Se),e&&a(ma),e&&a(z),e&&a(va),e&&a(xe),e&&a(ga),y(re,e),e&&a(ba),e&&a(k),e&&a(wa),y(oe,e),e&&a(ya),e&&a(x),y(ie),e&&a(_a),e&&a(Ae),e&&a(ja),e&&a(H),e&&a(Ea),e&&a(A),y(ce),e&&a(ka),e&&a(_),e&&a($a),y(pe,e),e&&a(Sa),e&&a(j),e&&a(Pa),e&&a(L),y(he),e&&a(xa),e&&a(Oe),e&&a(Aa),y(de,e),e&&a(La),e&&a(K),e&&a(Ca),e&&a(Ie),e&&a(Oa),e&&a(u),e&&a(Ia),e&&a(W),e&&a(Ta),y(fe,e),e&&a(Da),e&&a(E),e&&a(qa),e&&a(C),y(me),e&&a(Ra),e&&a(De),e&&a(Ba),e&&a($),e&&a(Ma),e&&a(qe),e&&a(Na),e&&a(J),e&&a(Ua),e&&a(Re),e&&a(za),y(be,e),e&&a(Ga),e&&a(D),y(we),e&&a(Ha),e&&a(q),y(ye),e&&a(Fa),e&&a(Be),e&&a(Qa),e&&a(R),y(_e),e&&a(Ka),e&&a(Me),e&&a(Va),e&&a(Ne),e&&a(Wa),e&&a(B),y(je),e&&a(Ya),y(Ee,e),e&&a(Ja),e&&a(Ue),e&&a(Xa),y(ke,e)}}}const Do={local:"reinforcement-learning-rl-with-simulate",sections:[{local:"tips",title:"Tips"}],title:"Reinforcement Learning (RL) with Simulate"};function qo(qn){return Io(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class No extends xo{constructor(S){super();Ao(this,S,qo,To,Lo,{})}}export{No as default,Do as metadata};
