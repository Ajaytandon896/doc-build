import{S as pt,i as mt,s as ut,e as s,k as m,w as st,t as y,M as ht,c as o,d as a,m as u,a as i,x as ot,h as v,b as _,G as e,g as A,y as it,L as ft,q as rt,o as lt,B as ct,v as dt}from"../../chunks/vendor-hf-doc-builder.js";import{D as gt}from"../../chunks/Docstring-hf-doc-builder.js";import{I as yt}from"../../chunks/IconCopyLink-hf-doc-builder.js";function vt(F){let l,M,c,h,w,f,T,$,D,S,n,d,q,x,R,C,E,W,B,L,G,H,g,N,J,V,P,j,U,b,z,k;return f=new yt({}),d=new gt({props:{name:"class simulate.Actuator",anchor:"simulate.Actuator",parameters:[{name:"mapping",val:": typing.List[simulate.assets.action_mapping.ActionMapping]"},{name:"actuator_tag",val:": typing.Optional[str] = None"},{name:"n",val:": typing.Optional[int] = None"},{name:"low",val:": typing.Union[float, typing.List[float], numpy.ndarray, NoneType] = None"},{name:"high",val:": typing.Union[float, typing.List[float], numpy.ndarray, NoneType] = None"},{name:"shape",val:": typing.Optional[typing.List[int]] = None"},{name:"dtype",val:": str = 'float32'"},{name:"seed",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"simulate.Actuator.(we",description:"<strong>(we</strong> always have a scene-level gym dict space). &#x2014;",name:"(we"},{anchor:"simulate.Actuator.n",description:`<strong>n</strong> (int or List[int]) &#x2014; for discrete actions, the number of possible actions
for multi-binary actions, the number of possible binary actions or a list of the number of possible actions
for each dimension
low &#x2014; low bound of continuous action space dimensions, either a float or list of floats
high &#x2014; high bound of continuous action space dimensions, either a float or list of floats
shape &#x2014; shape of continuous action space, should match low/high
dtype &#x2014; sampling type for continuous action spaces only`,name:"n"}],source:"https://github.com/huggingface/simulate/blob/v0.0.1/src/simulate/assets/actuator.py#L41"}}),{c(){l=s("meta"),M=m(),c=s("h1"),h=s("a"),w=s("span"),st(f.$$.fragment),T=m(),$=s("span"),D=y("Actuators"),S=m(),n=s("div"),st(d.$$.fragment),q=m(),x=s("p"),R=y("An Asset Actuator can be used to move an asset in the scene."),C=m(),E=s("p"),W=y("The actuator is designed to be a part of an Actor that manipulates a scene."),B=m(),L=s("p"),G=y("We define:"),H=m(),g=s("ul"),N=s("li"),J=y(`the space were the actions operate (discrete, continuous), it\u2019s similar to gym spaces in RL,
self.action_space is a gym.space (define the space action happens in and allow to sample)`),V=m(),P=s("li"),j=y(`a mapping to the physics engine behavior
self.mapping is a list of ActionMapping (to physics engine behaviors)`),U=m(),b=s("p"),z=y("Under construction \u{1F6A7}."),this.h()},l(t){const p=ht('[data-svelte="svelte-1phssyn"]',document.head);l=o(p,"META",{name:!0,content:!0}),p.forEach(a),M=u(t),c=o(t,"H1",{class:!0});var I=i(c);h=o(I,"A",{id:!0,class:!0,href:!0});var K=i(h);w=o(K,"SPAN",{});var Q=i(w);ot(f.$$.fragment,Q),Q.forEach(a),K.forEach(a),T=u(I),$=o(I,"SPAN",{});var X=i($);D=v(X,"Actuators"),X.forEach(a),I.forEach(a),S=u(t),n=o(t,"DIV",{class:!0});var r=i(n);ot(d.$$.fragment,r),q=u(r),x=o(r,"P",{});var Y=i(x);R=v(Y,"An Asset Actuator can be used to move an asset in the scene."),Y.forEach(a),C=u(r),E=o(r,"P",{});var Z=i(E);W=v(Z,"The actuator is designed to be a part of an Actor that manipulates a scene."),Z.forEach(a),B=u(r),L=o(r,"P",{});var tt=i(L);G=v(tt,"We define:"),tt.forEach(a),H=u(r),g=o(r,"UL",{});var O=i(g);N=o(O,"LI",{});var et=i(N);J=v(et,`the space were the actions operate (discrete, continuous), it\u2019s similar to gym spaces in RL,
self.action_space is a gym.space (define the space action happens in and allow to sample)`),et.forEach(a),V=u(O),P=o(O,"LI",{});var at=i(P);j=v(at,`a mapping to the physics engine behavior
self.mapping is a list of ActionMapping (to physics engine behaviors)`),at.forEach(a),O.forEach(a),r.forEach(a),U=u(t),b=o(t,"P",{});var nt=i(b);z=v(nt,"Under construction \u{1F6A7}."),nt.forEach(a),this.h()},h(){_(l,"name","hf:doc:metadata"),_(l,"content",JSON.stringify(_t)),_(h,"id","simulate.Actuator"),_(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(h,"href","#simulate.Actuator"),_(c,"class","relative group"),_(n,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,l),A(t,M,p),A(t,c,p),e(c,h),e(h,w),it(f,w,null),e(c,T),e(c,$),e($,D),A(t,S,p),A(t,n,p),it(d,n,null),e(n,q),e(n,x),e(x,R),e(n,C),e(n,E),e(E,W),e(n,B),e(n,L),e(L,G),e(n,H),e(n,g),e(g,N),e(N,J),e(g,V),e(g,P),e(P,j),A(t,U,p),A(t,b,p),e(b,z),k=!0},p:ft,i(t){k||(rt(f.$$.fragment,t),rt(d.$$.fragment,t),k=!0)},o(t){lt(f.$$.fragment,t),lt(d.$$.fragment,t),k=!1},d(t){a(l),t&&a(M),t&&a(c),ct(f),t&&a(S),t&&a(n),ct(d),t&&a(U),t&&a(b)}}}const _t={local:"simulate.Actuator",title:"Actuators"};function bt(F){return dt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xt extends pt{constructor(l){super();mt(this,l,bt,vt,ut,{})}}export{xt as default,_t as metadata};
