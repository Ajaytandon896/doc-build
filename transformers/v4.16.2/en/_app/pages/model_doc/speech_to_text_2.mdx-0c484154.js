import{S as fi,i as mi,s as ui,e as a,k as l,w as m,t as r,L as _i,c as n,d as o,m as d,a as c,x as u,h as s,b as i,J as e,g as p,y as _,q as g,o as v,B as T}from"../../chunks/vendor-b1433968.js";import{T as pi}from"../../chunks/Tip-c3840994.js";import{D as W}from"../../chunks/Docstring-ff504c58.js";import{C as jr}from"../../chunks/CodeBlock-5eeb61a8.js";import{I as gt}from"../../chunks/IconCopyLink-7029626d.js";import"../../chunks/CopyButton-40b92840.js";function gi(ye){let f,q,x,S,F,w,B,D;return{c(){f=a("p"),q=r("This class method is simply calling AutoFeatureExtractor\u2019s "),x=a("code"),S=r("from_pretrained"),F=r(` and
Speech2Text2Tokenizer\u2019s `),w=a("code"),B=r("from_pretrained"),D=r(`. Please refer to the
docstrings of the methods above for more information.`)},l(z){f=n(z,"P",{});var b=c(f);q=s(b,"This class method is simply calling AutoFeatureExtractor\u2019s "),x=n(b,"CODE",{});var C=c(x);S=s(C,"from_pretrained"),C.forEach(o),F=s(b,` and
Speech2Text2Tokenizer\u2019s `),w=n(b,"CODE",{});var A=c(w);B=s(A,"from_pretrained"),A.forEach(o),D=s(b,`. Please refer to the
docstrings of the methods above for more information.`),b.forEach(o)},m(z,b){p(z,f,b),e(f,q),e(f,x),e(x,S),e(f,F),e(f,w),e(w,B),e(f,D)},d(z){z&&o(f)}}}function vi(ye){let f,q,x,S,F,w,B,D;return{c(){f=a("p"),q=r("This class method is simply calling "),x=a("code"),S=r("save_pretrained"),F=r(` and
`),w=a("code"),B=r("save_pretrained"),D=r(`. Please refer to the docstrings of the methods
above for more information.`)},l(z){f=n(z,"P",{});var b=c(f);q=s(b,"This class method is simply calling "),x=n(b,"CODE",{});var C=c(x);S=s(C,"save_pretrained"),C.forEach(o),F=s(b,` and
`),w=n(b,"CODE",{});var A=c(w);B=s(A,"save_pretrained"),A.forEach(o),D=s(b,`. Please refer to the docstrings of the methods
above for more information.`),b.forEach(o)},m(z,b){p(z,f,b),e(f,q),e(f,x),e(x,S),e(f,F),e(f,w),e(w,B),e(f,D)},d(z){z&&o(f)}}}function Ti(ye){let f,q,x,S,F,w,B,D,z,b,C,A,so,Ee,qr,ao,Ar,Io,H,Mr,vt,Lr,Fr,Pe,Dr,Ir,Wo,$,Wr,no,Vr,Nr,co,Br,Or,Tt,Ur,Rr,xt,Hr,Jr,kt,Gr,Kr,io,Qr,Xr,Vo,ie,Yr,ze,Zr,es,No,le,ts,Ce,os,rs,Bo,bt,ss,Oo,J,je,as,qe,ns,cs,is,Ae,ls,St,ds,hs,ps,Me,fs,Le,ms,us,Uo,ee,de,lo,Fe,_s,ho,gs,Ro,G,vs,wt,Ts,xs,$t,ks,bs,Ho,P,Ss,yt,ws,$s,Et,ys,Es,Pt,Ps,zs,zt,Cs,js,Ct,qs,As,Jo,jt,po,Ms,Go,De,Ko,qt,Ie,fo,Ls,Fs,mo,Ds,Qo,We,Xo,he,Is,Ve,Ws,Vs,Yo,te,pe,uo,Ne,Ns,_o,Bs,Zo,j,Be,Os,oe,Us,At,Rs,Hs,Oe,Js,Gs,Ks,re,Qs,Mt,Xs,Ys,Lt,Zs,ea,ta,go,oa,ra,Ue,er,se,fe,vo,Re,sa,To,aa,tr,E,He,na,xo,ca,ia,Je,la,Ft,da,ha,pa,me,Ge,fa,ko,ma,ua,K,Ke,_a,bo,ga,va,Qe,Ta,So,xa,ka,ba,wo,or,ae,ue,$o,Xe,Sa,yo,wa,rr,k,Ye,$a,Eo,ya,Ea,M,Dt,Pa,za,It,Ca,ja,Wt,qa,Aa,Ze,Po,Ma,La,Fa,Vt,Da,Ia,Wa,_e,et,Va,O,Na,zo,Ba,Oa,Nt,Ua,Ra,tt,Co,Ha,Ja,Ga,Ka,Q,ot,Qa,rt,Xa,Bt,Ya,Za,en,ge,tn,X,st,on,ne,rn,jo,sn,an,Ot,nn,cn,ln,ve,dn,Te,at,hn,nt,pn,Ut,fn,mn,un,xe,ct,_n,it,gn,Rt,vn,Tn,xn,ke,lt,kn,qo,bn,sr,ce,be,Ao,dt,Sn,Mo,wn,ar,I,ht,$n,U,yn,Ht,En,Pn,Lo,zn,Cn,Jt,jn,qn,An,pt,Mn,ft,Ln,Fn,Dn,Y,mt,In,Fo,Wn,Vn,ut,nr;return w=new gt({}),Ee=new gt({}),Fe=new gt({}),De=new jr({props:{code:`import torch
from transformers import Speech2Text2Processor, SpeechEncoderDecoderModel
from datasets import load_dataset
import soundfile as sf

model = SpeechEncoderDecoderModel.from_pretrained("facebook/s2t-wav2vec2-large-en-de")
processor = Speech2Text2Processor.from_pretrained("facebook/s2t-wav2vec2-large-en-de")


def map_to_array(batch):
    speech, _ = sf.read(batch["file"])
    batch["speech"] = speech
    return batch


ds = load_dataset("hf-internal-testing/librispeech_asr_dummy", "clean", split="validation")
ds = ds.map(map_to_array)

inputs = processor(ds["speech"][0], sampling_rate=16_000, return_tensors="pt")
generated_ids = model.generate(input_ids=inputs["input_values"], attention_mask=inputs["attention_mask"])

transcription = processor.batch_decode(generated_ids),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Speech2Text2Processor, SpeechEncoderDecoderModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> soundfile <span class="hljs-keyword">as</span> sf

<span class="hljs-meta">&gt;&gt;&gt; </span>model = SpeechEncoderDecoderModel.from_pretrained(<span class="hljs-string">&quot;facebook/s2t-wav2vec2-large-en-de&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = Speech2Text2Processor.from_pretrained(<span class="hljs-string">&quot;facebook/s2t-wav2vec2-large-en-de&quot;</span>)


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">map_to_array</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    speech, _ = sf.read(batch[<span class="hljs-string">&quot;file&quot;</span>])
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;speech&quot;</span>] = speech
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> batch


<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_dummy&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(map_to_array)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(ds[<span class="hljs-string">&quot;speech&quot;</span>][<span class="hljs-number">0</span>], sampling_rate=<span class="hljs-number">16_000</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>generated_ids = model.generate(input_ids=inputs[<span class="hljs-string">&quot;input_values&quot;</span>], attention_mask=inputs[<span class="hljs-string">&quot;attention_mask&quot;</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>transcription = processor.batch_decode(generated_ids)`}}),We=new jr({props:{code:`from datasets import load_dataset
from transformers import pipeline

librispeech_en = load_dataset("hf-internal-testing/librispeech_asr_dummy", "clean", split="validation")
asr = pipeline(
    "automatic-speech-recognition",
    model="facebook/s2t-wav2vec2-large-en-de",
    feature_extractor="facebook/s2t-wav2vec2-large-en-de",
)

translation_de = asr(librispeech_en[0]["file"]),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>librispeech_en = load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_dummy&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>asr = pipeline(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>,
<span class="hljs-meta">... </span>    model=<span class="hljs-string">&quot;facebook/s2t-wav2vec2-large-en-de&quot;</span>,
<span class="hljs-meta">... </span>    feature_extractor=<span class="hljs-string">&quot;facebook/s2t-wav2vec2-large-en-de&quot;</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>translation_de = asr(librispeech_en[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;file&quot;</span>])`}}),Ne=new gt({}),Be=new W({props:{name:"class transformers.Speech2Text2Config",anchor:"transformers.Speech2Text2Config",parameters:[{name:"vocab_size",val:" = 10000"},{name:"decoder_layers",val:" = 6"},{name:"decoder_ffn_dim",val:" = 2048"},{name:"decoder_attention_heads",val:" = 4"},{name:"decoder_layerdrop",val:" = 0.0"},{name:"use_cache",val:" = True"},{name:"activation_function",val:" = 'relu'"},{name:"d_model",val:" = 256"},{name:"dropout",val:" = 0.1"},{name:"attention_dropout",val:" = 0.0"},{name:"activation_dropout",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"decoder_start_token_id",val:" = 2"},{name:"classifier_dropout",val:" = 0.0"},{name:"scale_embedding",val:" = True"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"max_source_positions",val:" = 6000"},{name:"max_target_positions",val:" = 1024"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/configuration_speech_to_text_2.py#L29",parametersDescription:[{anchor:"transformers.Speech2Text2Config.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 50265) &#x2014;
Vocabulary size of the Speech2Text model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/v4.16.2/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a>`,name:"vocab_size"},{anchor:"transformers.Speech2Text2Config.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimensionality of the layers and the pooler layer.`,name:"d_model"},{anchor:"transformers.Speech2Text2Config.decoder_layers",description:`<strong>decoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of decoder layers.`,name:"decoder_layers"},{anchor:"transformers.Speech2Text2Config.decoder_attention_heads",description:`<strong>decoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"decoder_attention_heads"},{anchor:"transformers.Speech2Text2Config.decoder_ffn_dim",description:`<strong>decoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"decoder_ffn_dim"},{anchor:"transformers.Speech2Text2Config.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the pooler. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.Speech2Text2Config.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, and pooler.`,name:"dropout"},{anchor:"transformers.Speech2Text2Config.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.Speech2Text2Config.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.`,name:"activation_dropout"},{anchor:"transformers.Speech2Text2Config.classifier_dropout",description:`<strong>classifier_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for classifier.`,name:"classifier_dropout"},{anchor:"transformers.Speech2Text2Config.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.
<a href="https://arxiv.org/abs/1909.11556%3E%60" rel="nofollow">https://arxiv.org/abs/1909.11556&gt;\`</a>__ for more details. decoder_layerdrop: (<code>float</code>, <em>optional</em>, defaults to
0.0): The LayerDrop probability for the decoder. See the [LayerDrop paper](see
<a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>) for more details.`,name:"init_std"},{anchor:"transformers.Speech2Text2Config.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.Speech2Text2Config.max_source_positions",description:`<strong>max_source_positions</strong> (<code>int</code>, <em>optional</em>, defaults to 6000) &#x2014;
The maximum sequence length of log-mel filter-bank features that this model might ever be used with.
max_target_positions &#x2014; (<code>int</code>, <em>optional</em>, defaults to 1024):
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_source_positions"}]}}),Ue=new jr({props:{code:`from transformers import Speech2Text2ForCausalLM, Speech2Text2Config

# Initializing a Speech2Text2 s2t_transformer_s style configuration
configuration = Speech2Text2Config()

# Initializing a model from the s2t_transformer_s style configuration
model = Speech2Text2ForCausalLM(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Speech2Text2ForCausalLM, Speech2Text2Config

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Speech2Text2 s2t_transformer_s style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = Speech2Text2Config()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the s2t_transformer_s style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = Speech2Text2ForCausalLM(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Re=new gt({}),He=new W({props:{name:"class transformers.Speech2Text2Tokenizer",anchor:"transformers.Speech2Text2Tokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"pad_token",val:" = '<pad>'"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"do_lower_case",val:" = False"},{name:"merges_file",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/tokenization_speech_to_text_2.py#L67",parametersDescription:[{anchor:"transformers.Speech2Text2Tokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
File containing the vocabulary.`,name:"vocab_file"},{anchor:"transformers.Speech2Text2Tokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sentence token.`,name:"bos_token"},{anchor:"transformers.Speech2Text2Tokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sentence token.`,name:"eos_token"},{anchor:"transformers.Speech2Text2Tokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.Speech2Text2Tokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.</p>
<p>**kwargs &#x2014;
Additional keyword arguments passed along to <a href="/docs/transformers/v4.16.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>`,name:"pad_token"}]}}),Ge=new W({props:{name:"batch_decode",anchor:"transformers.PreTrainedTokenizerBase.batch_decode",parameters:[{name:"sequences",val:": typing.Union[typing.List[int], typing.List[typing.List[int]], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')]"},{name:"skip_special_tokens",val:": bool = False"},{name:"clean_up_tokenization_spaces",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/tokenization_utils_base.py#L3230",parametersDescription:[{anchor:"transformers.PreTrainedTokenizerBase.batch_decode.sequences",description:`<strong>sequences</strong> (<code>Union[List[int], List[List[int]], np.ndarray, torch.Tensor, tf.Tensor]</code>) &#x2014;
List of tokenized input ids. Can be obtained using the <code>__call__</code> method.`,name:"sequences"},{anchor:"transformers.PreTrainedTokenizerBase.batch_decode.skip_special_tokens",description:`<strong>skip_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to remove special tokens in the decoding.`,name:"skip_special_tokens"},{anchor:"transformers.PreTrainedTokenizerBase.batch_decode.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to clean up the tokenization spaces.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.PreTrainedTokenizerBase.batch_decode.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the underlying model specific decode method.`,name:"kwargs"}],returnDescription:`
<p>The list of decoded sentences.</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),Ke=new W({props:{name:"decode",anchor:"transformers.PreTrainedTokenizerBase.decode",parameters:[{name:"token_ids",val:": typing.Union[int, typing.List[int], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')]"},{name:"skip_special_tokens",val:": bool = False"},{name:"clean_up_tokenization_spaces",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/tokenization_utils_base.py#L3263",parametersDescription:[{anchor:"transformers.PreTrainedTokenizerBase.decode.token_ids",description:`<strong>token_ids</strong> (<code>Union[int, List[int], np.ndarray, torch.Tensor, tf.Tensor]</code>) &#x2014;
List of tokenized input ids. Can be obtained using the <code>__call__</code> method.`,name:"token_ids"},{anchor:"transformers.PreTrainedTokenizerBase.decode.skip_special_tokens",description:`<strong>skip_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to remove special tokens in the decoding.`,name:"skip_special_tokens"},{anchor:"transformers.PreTrainedTokenizerBase.decode.clean_up_tokenization_spaces",description:`<strong>clean_up_tokenization_spaces</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to clean up the tokenization spaces.`,name:"clean_up_tokenization_spaces"},{anchor:"transformers.PreTrainedTokenizerBase.decode.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the underlying model specific decode method.`,name:"kwargs"}],returnDescription:`
<p>The decoded sentence.</p>
`,returnType:`
<p><code>str</code></p>
`}}),Xe=new gt({}),Ye=new W({props:{name:"class transformers.Speech2Text2Processor",anchor:"transformers.Speech2Text2Processor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L25",parametersDescription:[{anchor:"transformers.Speech2Text2Processor.feature_extractor",description:`<strong>feature_extractor</strong> (<code>AutoFeatureExtractor</code>) &#x2014;
An instance of <a href="/docs/transformers/v4.16.2/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. The feature extractor is a required input.`,name:"feature_extractor"},{anchor:"transformers.Speech2Text2Processor.tokenizer",description:`<strong>tokenizer</strong> (<code>Speech2Text2Tokenizer</code>) &#x2014;
An instance of <a href="/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer">Speech2Text2Tokenizer</a>. The tokenizer is a required input.`,name:"tokenizer"}]}}),et=new W({props:{name:"__call__",anchor:"transformers.Speech2Text2Processor.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L110"}}),ot=new W({props:{name:"from_pretrained",anchor:"transformers.Speech2Text2Processor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L77",parametersDescription:[{anchor:"transformers.Speech2Text2Processor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<code>save_pretrained</code> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both <code>PreTrainedFeatureExtractor</code> and
<a href="/docs/transformers/v4.16.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a></li>
</ul>`,name:"pretrained_model_name_or_path"}]}}),ge=new pi({props:{$$slots:{default:[gi]},$$scope:{ctx:ye}}}),st=new W({props:{name:"save_pretrained",anchor:"transformers.Speech2Text2Processor.save_pretrained",parameters:[{name:"save_directory",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L54",parametersDescription:[{anchor:"transformers.Speech2Text2Processor.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"}]}}),ve=new pi({props:{$$slots:{default:[vi]},$$scope:{ctx:ye}}}),at=new W({props:{name:"batch_decode",anchor:"transformers.Speech2Text2Processor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L120"}}),ct=new W({props:{name:"decode",anchor:"transformers.Speech2Text2Processor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L127"}}),lt=new W({props:{name:"as_target_processor",anchor:"transformers.Speech2Text2Processor.as_target_processor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/processing_speech_to_text_2.py#L134"}}),dt=new gt({}),ht=new W({props:{name:"class transformers.Speech2Text2ForCausalLM",anchor:"transformers.Speech2Text2ForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/modeling_speech_to_text_2.py#L743",parametersDescription:[{anchor:"transformers.Speech2Text2ForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/v4.16.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),mt=new W({props:{name:"forward",anchor:"transformers.Speech2Text2ForCausalLM.forward",parameters:[{name:"input_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"encoder_hidden_states",val:" = None"},{name:"encoder_attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"cross_attn_head_mask",val:" = None"},{name:"past_key_values",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/v4.16.2/src/transformers/models/speech_to_text_2/modeling_speech_to_text_2.py#L774",parametersDescription:[{anchor:"transformers.Speech2Text2ForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you
provide it.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer">Speech2Text2Tokenizer</a>. See <a href="/docs/transformers/v4.16.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.16.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong>  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention
if the model is configured as a decoder.`,name:"encoder_hidden_states"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.encoder_attention_mask",description:`<strong>encoder_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used
in the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:`,name:"encoder_attention_mask"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.cross_attn_head_mask",description:`<strong>cross_attn_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the cross-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"cross_attn_head_mask"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of
shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of
shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>. The two additional
tensors are only required when the model is used as a decoder in a Sequence to Sequence model.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the
cross-attention blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those
that don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of
all <code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are ignored
(masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"labels"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding
(see <code>past_key_values</code>).</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>`,name:"use_cache"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under
returned tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors
for more detail.`,name:"output_hidden_states"},{anchor:"transformers.Speech2Text2ForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.16.2/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/v4.16.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>transformers.modeling_outputs.CausalLMOutputWithCrossAttentions</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"
>Speech2Text2Config</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Cross attentions weights after the attention softmax, used to compute the weighted average in the
cross-attention heads.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> tuples of length <code>config.n_layers</code>, with each tuple containing the cached key,
value states of the self-attention and the cross-attention layers if model is used in encoder-decoder
setting. Only relevant if <code>config.is_decoder = True</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.16.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>transformers.modeling_outputs.CausalLMOutputWithCrossAttentions</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ut=new jr({props:{code:`from transformers import (
    SpeechEncoderDecoderModel,
    Speech2Text2ForCausalLM,
    Wav2Vec2Model,
    Speech2Text2Config,
    Wav2Vec2Config,
)

encoder = Wav2Vec2Model(Wav2Vec2Config())
decoder = Speech2Text2ForCausalLM(Speech2Text2Config())

model = SpeechEncoderDecoderModel(encoder=encoder, decoder=decoder),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> (
<span class="hljs-meta">... </span>    SpeechEncoderDecoderModel,
<span class="hljs-meta">... </span>    Speech2Text2ForCausalLM,
<span class="hljs-meta">... </span>    Wav2Vec2Model,
<span class="hljs-meta">... </span>    Speech2Text2Config,
<span class="hljs-meta">... </span>    Wav2Vec2Config,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>encoder = Wav2Vec2Model(Wav2Vec2Config())
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder = Speech2Text2ForCausalLM(Speech2Text2Config())
<span class="hljs-comment"># init speech2text model</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>model = SpeechEncoderDecoderModel(encoder=encoder, decoder=decoder)`}}),{c(){f=a("meta"),q=l(),x=a("h1"),S=a("a"),F=a("span"),m(w.$$.fragment),B=l(),D=a("span"),z=r("Speech2Text2"),b=l(),C=a("h2"),A=a("a"),so=a("span"),m(Ee.$$.fragment),qr=l(),ao=a("span"),Ar=r("Overview"),Io=l(),H=a("p"),Mr=r("The Speech2Text2 model is used together with "),vt=a("a"),Lr=r("Wav2Vec2"),Fr=r(` for Speech Translation models proposed in
`),Pe=a("a"),Dr=r("Large-Scale Self- and Semi-Supervised Learning for Speech Translation"),Ir=r(` by
Changhan Wang, Anne Wu, Juan Pino, Alexei Baevski, Michael Auli, Alexis Conneau.`),Wo=l(),$=a("p"),Wr=r("Speech2Text2 is a "),no=a("em"),Vr=r("decoder-only"),Nr=r(" transformer model that can be used with any speech "),co=a("em"),Br=r("encoder-only"),Or=r(`, such as
`),Tt=a("a"),Ur=r("Wav2Vec2"),Rr=r(" or "),xt=a("a"),Hr=r("HuBERT"),Jr=r(` for Speech-to-Text tasks. Please refer to the
`),kt=a("a"),Gr=r("SpeechEncoderDecoder"),Kr=r(" class on how to combine Speech2Text2 with any speech "),io=a("em"),Qr=r("encoder-only"),Xr=r(`
model.`),Vo=l(),ie=a("p"),Yr=r("This model was contributed by "),ze=a("a"),Zr=r("Patrick von Platen"),es=r("."),No=l(),le=a("p"),ts=r("The original code can be found "),Ce=a("a"),os=r("here"),rs=r("."),Bo=l(),bt=a("p"),ss=r("Tips:"),Oo=l(),J=a("ul"),je=a("li"),as=r(`Speech2Text2 achieves state-of-the-art results on the CoVoST Speech Translation dataset. For more information, see
the `),qe=a("a"),ns=r("official models"),cs=r(" ."),is=l(),Ae=a("li"),ls=r("Speech2Text2 is always used within the "),St=a("a"),ds=r("SpeechEncoderDecoder"),hs=r(" framework."),ps=l(),Me=a("li"),fs=r("Speech2Text2\u2019s tokenizer is based on "),Le=a("a"),ms=r("fastBPE"),us=r("."),Uo=l(),ee=a("h2"),de=a("a"),lo=a("span"),m(Fe.$$.fragment),_s=l(),ho=a("span"),gs=r("Inference"),Ro=l(),G=a("p"),vs=r("Speech2Text2\u2019s "),wt=a("a"),Ts=r("SpeechEncoderDecoderModel"),xs=r(` model accepts raw waveform input values from speech and
makes use of `),$t=a("a"),ks=r("generate()"),bs=r(` to translate the input speech
autoregressively to the target language.`),Ho=l(),P=a("p"),Ss=r("The "),yt=a("a"),ws=r("Wav2Vec2FeatureExtractor"),$s=r(` class is responsible for preprocessing the input speech and
`),Et=a("a"),ys=r("Speech2Text2Tokenizer"),Es=r(` decodes the generated target tokens to the target string. The
`),Pt=a("a"),Ps=r("Speech2Text2Processor"),zs=r(" wraps "),zt=a("a"),Cs=r("Wav2Vec2FeatureExtractor"),js=r(` and
`),Ct=a("a"),qs=r("Speech2Text2Tokenizer"),As=r(` into a single instance to both extract the input features and decode the
predicted token ids.`),Jo=l(),jt=a("ul"),po=a("li"),Ms=r("Step-by-step Speech Translation"),Go=l(),m(De.$$.fragment),Ko=l(),qt=a("ul"),Ie=a("li"),fo=a("p"),Ls=r("Speech Translation via Pipelines"),Fs=l(),mo=a("p"),Ds=r("The automatic speech recognition pipeline can also be used to translate speech in just a couple lines of code"),Qo=l(),m(We.$$.fragment),Xo=l(),he=a("p"),Is=r("See "),Ve=a("a"),Ws=r("model hub"),Vs=r(" to look for Speech2Text2 checkpoints."),Yo=l(),te=a("h2"),pe=a("a"),uo=a("span"),m(Ne.$$.fragment),Ns=l(),_o=a("span"),Bs=r("Speech2Text2Config"),Zo=l(),j=a("div"),m(Be.$$.fragment),Os=l(),oe=a("p"),Us=r("This is the configuration class to store the configuration of a "),At=a("a"),Rs=r("Speech2Text2ForCausalLM"),Hs=r(`. It is used to
instantiate an Speech2Text2 model according to the specified arguments, defining the model architecture.
Instantiating a configuration with the defaults will yield a similar configuration to that of the Speech2Text2
`),Oe=a("a"),Js=r("facebook/s2t-small-librispeech-asr"),Gs=r(" architecture."),Ks=l(),re=a("p"),Qs=r("Configuration objects inherit from "),Mt=a("a"),Xs=r("PretrainedConfig"),Ys=r(` and can be used to control the model outputs. Read the
documentation from `),Lt=a("a"),Zs=r("PretrainedConfig"),ea=r(" for more information."),ta=l(),go=a("p"),oa=r("Example:"),ra=l(),m(Ue.$$.fragment),er=l(),se=a("h2"),fe=a("a"),vo=a("span"),m(Re.$$.fragment),sa=l(),To=a("span"),aa=r("Speech2TextTokenizer"),tr=l(),E=a("div"),m(He.$$.fragment),na=l(),xo=a("p"),ca=r("Constructs a Speech2Text2Tokenizer."),ia=l(),Je=a("p"),la=r("This tokenizer inherits from "),Ft=a("a"),da=r("PreTrainedTokenizer"),ha=r(` which contains some of the main methods. Users should refer to
the superclass for more information regarding such methods.`),pa=l(),me=a("div"),m(Ge.$$.fragment),fa=l(),ko=a("p"),ma=r("Convert a list of lists of token ids into a list of strings by calling decode."),ua=l(),K=a("div"),m(Ke.$$.fragment),_a=l(),bo=a("p"),ga=r(`Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special
tokens and clean up tokenization spaces.`),va=l(),Qe=a("p"),Ta=r("Similar to doing "),So=a("code"),xa=r("self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))"),ka=r("."),ba=l(),wo=a("div"),or=l(),ae=a("h2"),ue=a("a"),$o=a("span"),m(Xe.$$.fragment),Sa=l(),yo=a("span"),wa=r("Speech2Text2Processor"),rr=l(),k=a("div"),m(Ye.$$.fragment),$a=l(),Eo=a("p"),ya=r(`Constructs a Speech2Text2 processor which wraps a Speech2Text2 feature extractor and a Speech2Text2 tokenizer into
a single processor.`),Ea=l(),M=a("p"),Dt=a("a"),Pa=r("Speech2Text2Processor"),za=r(" offers all the functionalities of "),It=a("a"),Ca=r("AutoFeatureExtractor"),ja=r(" and "),Wt=a("a"),qa=r("Speech2Text2Tokenizer"),Aa=r(`.
See the `),Ze=a("a"),Po=a("strong"),Ma=r("call"),La=r("()"),Fa=r(" and "),Vt=a("a"),Da=r("decode()"),Ia=r(" for more information."),Wa=l(),_e=a("div"),m(et.$$.fragment),Va=l(),O=a("p"),Na=r(`When used in normal mode, this method forwards all its arguments to AutoFeatureExtractor\u2019s
`),zo=a("code"),Ba=r("__call__()"),Oa=r(`and returns its output. If used in the context
`),Nt=a("a"),Ua=r("as_target_processor()"),Ra=r(` this method forwards all its arguments to
Speech2Text2Tokenizer\u2019s `),tt=a("a"),Co=a("strong"),Ha=r("call"),Ja=r("()"),Ga=r(`. Please refer to the doctsring of the above two
methods for more information.`),Ka=l(),Q=a("div"),m(ot.$$.fragment),Qa=l(),rt=a("p"),Xa=r("Instantiate a "),Bt=a("a"),Ya=r("Speech2Text2Processor"),Za=r(" from a pretrained Speech2Text2 processor."),en=l(),m(ge.$$.fragment),tn=l(),X=a("div"),m(st.$$.fragment),on=l(),ne=a("p"),rn=r(`Save a Speech2Text2 feature extractor object and Speech2Text2 tokenizer object to the directory
`),jo=a("code"),sn=r("save_directory"),an=r(", so that it can be re-loaded using the "),Ot=a("a"),nn=r("from_pretrained()"),cn=r(` class
method.`),ln=l(),m(ve.$$.fragment),dn=l(),Te=a("div"),m(at.$$.fragment),hn=l(),nt=a("p"),pn=r("This method forwards all its arguments to Speech2Text2Tokenizer\u2019s "),Ut=a("a"),fn=r("batch_decode()"),mn=r(`. Please
refer to the docstring of this method for more information.`),un=l(),xe=a("div"),m(ct.$$.fragment),_n=l(),it=a("p"),gn=r("This method forwards all its arguments to Speech2Text2Tokenizer\u2019s "),Rt=a("a"),vn=r("decode()"),Tn=r(`. Please refer
to the docstring of this method for more information.`),xn=l(),ke=a("div"),m(lt.$$.fragment),kn=l(),qo=a("p"),bn=r(`Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning
Speech2Text2.`),sr=l(),ce=a("h2"),be=a("a"),Ao=a("span"),m(dt.$$.fragment),Sn=l(),Mo=a("span"),wn=r("Speech2Text2ForCausalLM"),ar=l(),I=a("div"),m(ht.$$.fragment),$n=l(),U=a("p"),yn=r("The Speech2Text2 Decoder with a language modeling head. Can be used as the decoder part of "),Ht=a("a"),En=r("EncoderDecoderModel"),Pn=r(" and "),Lo=a("code"),zn=r("SpeechEncoderDecoder"),Cn=r(`.
This model inherits from `),Jt=a("a"),jn=r("PreTrainedModel"),qn=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),An=l(),pt=a("p"),Mn=r("This model is also a PyTorch "),ft=a("a"),Ln=r("torch.nn.Module"),Fn=r(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Dn=l(),Y=a("div"),m(mt.$$.fragment),In=l(),Fo=a("p"),Wn=r("Example:"),Vn=l(),m(ut.$$.fragment),this.h()},l(t){const h=_i('[data-svelte="svelte-1phssyn"]',document.head);f=n(h,"META",{name:!0,content:!0}),h.forEach(o),q=d(t),x=n(t,"H1",{class:!0});var _t=c(x);S=n(_t,"A",{id:!0,class:!0,href:!0});var Do=c(S);F=n(Do,"SPAN",{});var On=c(F);u(w.$$.fragment,On),On.forEach(o),Do.forEach(o),B=d(_t),D=n(_t,"SPAN",{});var Un=c(D);z=s(Un,"Speech2Text2"),Un.forEach(o),_t.forEach(o),b=d(t),C=n(t,"H2",{class:!0});var cr=c(C);A=n(cr,"A",{id:!0,class:!0,href:!0});var Rn=c(A);so=n(Rn,"SPAN",{});var Hn=c(so);u(Ee.$$.fragment,Hn),Hn.forEach(o),Rn.forEach(o),qr=d(cr),ao=n(cr,"SPAN",{});var Jn=c(ao);Ar=s(Jn,"Overview"),Jn.forEach(o),cr.forEach(o),Io=d(t),H=n(t,"P",{});var Gt=c(H);Mr=s(Gt,"The Speech2Text2 model is used together with "),vt=n(Gt,"A",{href:!0});var Gn=c(vt);Lr=s(Gn,"Wav2Vec2"),Gn.forEach(o),Fr=s(Gt,` for Speech Translation models proposed in
`),Pe=n(Gt,"A",{href:!0,rel:!0});var Kn=c(Pe);Dr=s(Kn,"Large-Scale Self- and Semi-Supervised Learning for Speech Translation"),Kn.forEach(o),Ir=s(Gt,` by
Changhan Wang, Anne Wu, Juan Pino, Alexei Baevski, Michael Auli, Alexis Conneau.`),Gt.forEach(o),Wo=d(t),$=n(t,"P",{});var L=c($);Wr=s(L,"Speech2Text2 is a "),no=n(L,"EM",{});var Qn=c(no);Vr=s(Qn,"decoder-only"),Qn.forEach(o),Nr=s(L," transformer model that can be used with any speech "),co=n(L,"EM",{});var Xn=c(co);Br=s(Xn,"encoder-only"),Xn.forEach(o),Or=s(L,`, such as
`),Tt=n(L,"A",{href:!0});var Yn=c(Tt);Ur=s(Yn,"Wav2Vec2"),Yn.forEach(o),Rr=s(L," or "),xt=n(L,"A",{href:!0});var Zn=c(xt);Hr=s(Zn,"HuBERT"),Zn.forEach(o),Jr=s(L,` for Speech-to-Text tasks. Please refer to the
`),kt=n(L,"A",{href:!0});var ec=c(kt);Gr=s(ec,"SpeechEncoderDecoder"),ec.forEach(o),Kr=s(L," class on how to combine Speech2Text2 with any speech "),io=n(L,"EM",{});var tc=c(io);Qr=s(tc,"encoder-only"),tc.forEach(o),Xr=s(L,`
model.`),L.forEach(o),Vo=d(t),ie=n(t,"P",{});var ir=c(ie);Yr=s(ir,"This model was contributed by "),ze=n(ir,"A",{href:!0,rel:!0});var oc=c(ze);Zr=s(oc,"Patrick von Platen"),oc.forEach(o),es=s(ir,"."),ir.forEach(o),No=d(t),le=n(t,"P",{});var lr=c(le);ts=s(lr,"The original code can be found "),Ce=n(lr,"A",{href:!0,rel:!0});var rc=c(Ce);os=s(rc,"here"),rc.forEach(o),rs=s(lr,"."),lr.forEach(o),Bo=d(t),bt=n(t,"P",{});var sc=c(bt);ss=s(sc,"Tips:"),sc.forEach(o),Oo=d(t),J=n(t,"UL",{});var Kt=c(J);je=n(Kt,"LI",{});var dr=c(je);as=s(dr,`Speech2Text2 achieves state-of-the-art results on the CoVoST Speech Translation dataset. For more information, see
the `),qe=n(dr,"A",{href:!0,rel:!0});var ac=c(qe);ns=s(ac,"official models"),ac.forEach(o),cs=s(dr," ."),dr.forEach(o),is=d(Kt),Ae=n(Kt,"LI",{});var hr=c(Ae);ls=s(hr,"Speech2Text2 is always used within the "),St=n(hr,"A",{href:!0});var nc=c(St);ds=s(nc,"SpeechEncoderDecoder"),nc.forEach(o),hs=s(hr," framework."),hr.forEach(o),ps=d(Kt),Me=n(Kt,"LI",{});var pr=c(Me);fs=s(pr,"Speech2Text2\u2019s tokenizer is based on "),Le=n(pr,"A",{href:!0,rel:!0});var cc=c(Le);ms=s(cc,"fastBPE"),cc.forEach(o),us=s(pr,"."),pr.forEach(o),Kt.forEach(o),Uo=d(t),ee=n(t,"H2",{class:!0});var fr=c(ee);de=n(fr,"A",{id:!0,class:!0,href:!0});var ic=c(de);lo=n(ic,"SPAN",{});var lc=c(lo);u(Fe.$$.fragment,lc),lc.forEach(o),ic.forEach(o),_s=d(fr),ho=n(fr,"SPAN",{});var dc=c(ho);gs=s(dc,"Inference"),dc.forEach(o),fr.forEach(o),Ro=d(t),G=n(t,"P",{});var Qt=c(G);vs=s(Qt,"Speech2Text2\u2019s "),wt=n(Qt,"A",{href:!0});var hc=c(wt);Ts=s(hc,"SpeechEncoderDecoderModel"),hc.forEach(o),xs=s(Qt,` model accepts raw waveform input values from speech and
makes use of `),$t=n(Qt,"A",{href:!0});var pc=c($t);ks=s(pc,"generate()"),pc.forEach(o),bs=s(Qt,` to translate the input speech
autoregressively to the target language.`),Qt.forEach(o),Ho=d(t),P=n(t,"P",{});var V=c(P);Ss=s(V,"The "),yt=n(V,"A",{href:!0});var fc=c(yt);ws=s(fc,"Wav2Vec2FeatureExtractor"),fc.forEach(o),$s=s(V,` class is responsible for preprocessing the input speech and
`),Et=n(V,"A",{href:!0});var mc=c(Et);ys=s(mc,"Speech2Text2Tokenizer"),mc.forEach(o),Es=s(V,` decodes the generated target tokens to the target string. The
`),Pt=n(V,"A",{href:!0});var uc=c(Pt);Ps=s(uc,"Speech2Text2Processor"),uc.forEach(o),zs=s(V," wraps "),zt=n(V,"A",{href:!0});var _c=c(zt);Cs=s(_c,"Wav2Vec2FeatureExtractor"),_c.forEach(o),js=s(V,` and
`),Ct=n(V,"A",{href:!0});var gc=c(Ct);qs=s(gc,"Speech2Text2Tokenizer"),gc.forEach(o),As=s(V,` into a single instance to both extract the input features and decode the
predicted token ids.`),V.forEach(o),Jo=d(t),jt=n(t,"UL",{});var vc=c(jt);po=n(vc,"LI",{});var Tc=c(po);Ms=s(Tc,"Step-by-step Speech Translation"),Tc.forEach(o),vc.forEach(o),Go=d(t),u(De.$$.fragment,t),Ko=d(t),qt=n(t,"UL",{});var xc=c(qt);Ie=n(xc,"LI",{});var mr=c(Ie);fo=n(mr,"P",{});var kc=c(fo);Ls=s(kc,"Speech Translation via Pipelines"),kc.forEach(o),Fs=d(mr),mo=n(mr,"P",{});var bc=c(mo);Ds=s(bc,"The automatic speech recognition pipeline can also be used to translate speech in just a couple lines of code"),bc.forEach(o),mr.forEach(o),xc.forEach(o),Qo=d(t),u(We.$$.fragment,t),Xo=d(t),he=n(t,"P",{});var ur=c(he);Is=s(ur,"See "),Ve=n(ur,"A",{href:!0,rel:!0});var Sc=c(Ve);Ws=s(Sc,"model hub"),Sc.forEach(o),Vs=s(ur," to look for Speech2Text2 checkpoints."),ur.forEach(o),Yo=d(t),te=n(t,"H2",{class:!0});var _r=c(te);pe=n(_r,"A",{id:!0,class:!0,href:!0});var wc=c(pe);uo=n(wc,"SPAN",{});var $c=c(uo);u(Ne.$$.fragment,$c),$c.forEach(o),wc.forEach(o),Ns=d(_r),_o=n(_r,"SPAN",{});var yc=c(_o);Bs=s(yc,"Speech2Text2Config"),yc.forEach(o),_r.forEach(o),Zo=d(t),j=n(t,"DIV",{class:!0});var Z=c(j);u(Be.$$.fragment,Z),Os=d(Z),oe=n(Z,"P",{});var Xt=c(oe);Us=s(Xt,"This is the configuration class to store the configuration of a "),At=n(Xt,"A",{href:!0});var Ec=c(At);Rs=s(Ec,"Speech2Text2ForCausalLM"),Ec.forEach(o),Hs=s(Xt,`. It is used to
instantiate an Speech2Text2 model according to the specified arguments, defining the model architecture.
Instantiating a configuration with the defaults will yield a similar configuration to that of the Speech2Text2
`),Oe=n(Xt,"A",{href:!0,rel:!0});var Pc=c(Oe);Js=s(Pc,"facebook/s2t-small-librispeech-asr"),Pc.forEach(o),Gs=s(Xt," architecture."),Xt.forEach(o),Ks=d(Z),re=n(Z,"P",{});var Yt=c(re);Qs=s(Yt,"Configuration objects inherit from "),Mt=n(Yt,"A",{href:!0});var zc=c(Mt);Xs=s(zc,"PretrainedConfig"),zc.forEach(o),Ys=s(Yt,` and can be used to control the model outputs. Read the
documentation from `),Lt=n(Yt,"A",{href:!0});var Cc=c(Lt);Zs=s(Cc,"PretrainedConfig"),Cc.forEach(o),ea=s(Yt," for more information."),Yt.forEach(o),ta=d(Z),go=n(Z,"P",{});var jc=c(go);oa=s(jc,"Example:"),jc.forEach(o),ra=d(Z),u(Ue.$$.fragment,Z),Z.forEach(o),er=d(t),se=n(t,"H2",{class:!0});var gr=c(se);fe=n(gr,"A",{id:!0,class:!0,href:!0});var qc=c(fe);vo=n(qc,"SPAN",{});var Ac=c(vo);u(Re.$$.fragment,Ac),Ac.forEach(o),qc.forEach(o),sa=d(gr),To=n(gr,"SPAN",{});var Mc=c(To);aa=s(Mc,"Speech2TextTokenizer"),Mc.forEach(o),gr.forEach(o),tr=d(t),E=n(t,"DIV",{class:!0});var N=c(E);u(He.$$.fragment,N),na=d(N),xo=n(N,"P",{});var Lc=c(xo);ca=s(Lc,"Constructs a Speech2Text2Tokenizer."),Lc.forEach(o),ia=d(N),Je=n(N,"P",{});var vr=c(Je);la=s(vr,"This tokenizer inherits from "),Ft=n(vr,"A",{href:!0});var Fc=c(Ft);da=s(Fc,"PreTrainedTokenizer"),Fc.forEach(o),ha=s(vr,` which contains some of the main methods. Users should refer to
the superclass for more information regarding such methods.`),vr.forEach(o),pa=d(N),me=n(N,"DIV",{class:!0});var Tr=c(me);u(Ge.$$.fragment,Tr),fa=d(Tr),ko=n(Tr,"P",{});var Dc=c(ko);ma=s(Dc,"Convert a list of lists of token ids into a list of strings by calling decode."),Dc.forEach(o),Tr.forEach(o),ua=d(N),K=n(N,"DIV",{class:!0});var Zt=c(K);u(Ke.$$.fragment,Zt),_a=d(Zt),bo=n(Zt,"P",{});var Ic=c(bo);ga=s(Ic,`Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special
tokens and clean up tokenization spaces.`),Ic.forEach(o),va=d(Zt),Qe=n(Zt,"P",{});var xr=c(Qe);Ta=s(xr,"Similar to doing "),So=n(xr,"CODE",{});var Wc=c(So);xa=s(Wc,"self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))"),Wc.forEach(o),ka=s(xr,"."),xr.forEach(o),Zt.forEach(o),ba=d(N),wo=n(N,"DIV",{class:!0}),c(wo).forEach(o),N.forEach(o),or=d(t),ae=n(t,"H2",{class:!0});var kr=c(ae);ue=n(kr,"A",{id:!0,class:!0,href:!0});var Vc=c(ue);$o=n(Vc,"SPAN",{});var Nc=c($o);u(Xe.$$.fragment,Nc),Nc.forEach(o),Vc.forEach(o),Sa=d(kr),yo=n(kr,"SPAN",{});var Bc=c(yo);wa=s(Bc,"Speech2Text2Processor"),Bc.forEach(o),kr.forEach(o),rr=d(t),k=n(t,"DIV",{class:!0});var y=c(k);u(Ye.$$.fragment,y),$a=d(y),Eo=n(y,"P",{});var Oc=c(Eo);ya=s(Oc,`Constructs a Speech2Text2 processor which wraps a Speech2Text2 feature extractor and a Speech2Text2 tokenizer into
a single processor.`),Oc.forEach(o),Ea=d(y),M=n(y,"P",{});var R=c(M);Dt=n(R,"A",{href:!0});var Uc=c(Dt);Pa=s(Uc,"Speech2Text2Processor"),Uc.forEach(o),za=s(R," offers all the functionalities of "),It=n(R,"A",{href:!0});var Rc=c(It);Ca=s(Rc,"AutoFeatureExtractor"),Rc.forEach(o),ja=s(R," and "),Wt=n(R,"A",{href:!0});var Hc=c(Wt);qa=s(Hc,"Speech2Text2Tokenizer"),Hc.forEach(o),Aa=s(R,`.
See the `),Ze=n(R,"A",{href:!0});var Nn=c(Ze);Po=n(Nn,"STRONG",{});var Jc=c(Po);Ma=s(Jc,"call"),Jc.forEach(o),La=s(Nn,"()"),Nn.forEach(o),Fa=s(R," and "),Vt=n(R,"A",{href:!0});var Gc=c(Vt);Da=s(Gc,"decode()"),Gc.forEach(o),Ia=s(R," for more information."),R.forEach(o),Wa=d(y),_e=n(y,"DIV",{class:!0});var br=c(_e);u(et.$$.fragment,br),Va=d(br),O=n(br,"P",{});var Se=c(O);Na=s(Se,`When used in normal mode, this method forwards all its arguments to AutoFeatureExtractor\u2019s
`),zo=n(Se,"CODE",{});var Kc=c(zo);Ba=s(Kc,"__call__()"),Kc.forEach(o),Oa=s(Se,`and returns its output. If used in the context
`),Nt=n(Se,"A",{href:!0});var Qc=c(Nt);Ua=s(Qc,"as_target_processor()"),Qc.forEach(o),Ra=s(Se,` this method forwards all its arguments to
Speech2Text2Tokenizer\u2019s `),tt=n(Se,"A",{href:!0});var Bn=c(tt);Co=n(Bn,"STRONG",{});var Xc=c(Co);Ha=s(Xc,"call"),Xc.forEach(o),Ja=s(Bn,"()"),Bn.forEach(o),Ga=s(Se,`. Please refer to the doctsring of the above two
methods for more information.`),Se.forEach(o),br.forEach(o),Ka=d(y),Q=n(y,"DIV",{class:!0});var eo=c(Q);u(ot.$$.fragment,eo),Qa=d(eo),rt=n(eo,"P",{});var Sr=c(rt);Xa=s(Sr,"Instantiate a "),Bt=n(Sr,"A",{href:!0});var Yc=c(Bt);Ya=s(Yc,"Speech2Text2Processor"),Yc.forEach(o),Za=s(Sr," from a pretrained Speech2Text2 processor."),Sr.forEach(o),en=d(eo),u(ge.$$.fragment,eo),eo.forEach(o),tn=d(y),X=n(y,"DIV",{class:!0});var to=c(X);u(st.$$.fragment,to),on=d(to),ne=n(to,"P",{});var oo=c(ne);rn=s(oo,`Save a Speech2Text2 feature extractor object and Speech2Text2 tokenizer object to the directory
`),jo=n(oo,"CODE",{});var Zc=c(jo);sn=s(Zc,"save_directory"),Zc.forEach(o),an=s(oo,", so that it can be re-loaded using the "),Ot=n(oo,"A",{href:!0});var ei=c(Ot);nn=s(ei,"from_pretrained()"),ei.forEach(o),cn=s(oo,` class
method.`),oo.forEach(o),ln=d(to),u(ve.$$.fragment,to),to.forEach(o),dn=d(y),Te=n(y,"DIV",{class:!0});var wr=c(Te);u(at.$$.fragment,wr),hn=d(wr),nt=n(wr,"P",{});var $r=c(nt);pn=s($r,"This method forwards all its arguments to Speech2Text2Tokenizer\u2019s "),Ut=n($r,"A",{href:!0});var ti=c(Ut);fn=s(ti,"batch_decode()"),ti.forEach(o),mn=s($r,`. Please
refer to the docstring of this method for more information.`),$r.forEach(o),wr.forEach(o),un=d(y),xe=n(y,"DIV",{class:!0});var yr=c(xe);u(ct.$$.fragment,yr),_n=d(yr),it=n(yr,"P",{});var Er=c(it);gn=s(Er,"This method forwards all its arguments to Speech2Text2Tokenizer\u2019s "),Rt=n(Er,"A",{href:!0});var oi=c(Rt);vn=s(oi,"decode()"),oi.forEach(o),Tn=s(Er,`. Please refer
to the docstring of this method for more information.`),Er.forEach(o),yr.forEach(o),xn=d(y),ke=n(y,"DIV",{class:!0});var Pr=c(ke);u(lt.$$.fragment,Pr),kn=d(Pr),qo=n(Pr,"P",{});var ri=c(qo);bn=s(ri,`Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning
Speech2Text2.`),ri.forEach(o),Pr.forEach(o),y.forEach(o),sr=d(t),ce=n(t,"H2",{class:!0});var zr=c(ce);be=n(zr,"A",{id:!0,class:!0,href:!0});var si=c(be);Ao=n(si,"SPAN",{});var ai=c(Ao);u(dt.$$.fragment,ai),ai.forEach(o),si.forEach(o),Sn=d(zr),Mo=n(zr,"SPAN",{});var ni=c(Mo);wn=s(ni,"Speech2Text2ForCausalLM"),ni.forEach(o),zr.forEach(o),ar=d(t),I=n(t,"DIV",{class:!0});var we=c(I);u(ht.$$.fragment,we),$n=d(we),U=n(we,"P",{});var $e=c(U);yn=s($e,"The Speech2Text2 Decoder with a language modeling head. Can be used as the decoder part of "),Ht=n($e,"A",{href:!0});var ci=c(Ht);En=s(ci,"EncoderDecoderModel"),ci.forEach(o),Pn=s($e," and "),Lo=n($e,"CODE",{});var ii=c(Lo);zn=s(ii,"SpeechEncoderDecoder"),ii.forEach(o),Cn=s($e,`.
This model inherits from `),Jt=n($e,"A",{href:!0});var li=c(Jt);jn=s(li,"PreTrainedModel"),li.forEach(o),qn=s($e,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),$e.forEach(o),An=d(we),pt=n(we,"P",{});var Cr=c(pt);Mn=s(Cr,"This model is also a PyTorch "),ft=n(Cr,"A",{href:!0,rel:!0});var di=c(ft);Ln=s(di,"torch.nn.Module"),di.forEach(o),Fn=s(Cr,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Cr.forEach(o),Dn=d(we),Y=n(we,"DIV",{class:!0});var ro=c(Y);u(mt.$$.fragment,ro),In=d(ro),Fo=n(ro,"P",{});var hi=c(Fo);Wn=s(hi,"Example:"),hi.forEach(o),Vn=d(ro),u(ut.$$.fragment,ro),ro.forEach(o),we.forEach(o),this.h()},h(){i(f,"name","hf:doc:metadata"),i(f,"content",JSON.stringify(xi)),i(S,"id","speech2text2"),i(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(S,"href","#speech2text2"),i(x,"class","relative group"),i(A,"id","overview"),i(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(A,"href","#overview"),i(C,"class","relative group"),i(vt,"href","wav2vec2"),i(Pe,"href","https://arxiv.org/abs/2104.06678"),i(Pe,"rel","nofollow"),i(Tt,"href","wav2vec2"),i(xt,"href","hubert"),i(kt,"href","speech-encoder-decoder"),i(ze,"href","https://huggingface.co/patrickvonplaten"),i(ze,"rel","nofollow"),i(Ce,"href","https://github.com/pytorch/fairseq/blob/1f7ef9ed1e1061f8c7f88f8b94c7186834398690/fairseq/models/wav2vec/wav2vec2_asr.py#L266"),i(Ce,"rel","nofollow"),i(qe,"href","https://huggingface.co/models?other=speech2text2"),i(qe,"rel","nofollow"),i(St,"href","speech-encoder-decoder"),i(Le,"href","https://github.com/glample/fastBPE"),i(Le,"rel","nofollow"),i(de,"id","inference"),i(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(de,"href","#inference"),i(ee,"class","relative group"),i(wt,"href","/docs/transformers/v4.16.2/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),i($t,"href","/docs/transformers/v4.16.2/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),i(yt,"href","/docs/transformers/v4.16.2/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),i(Et,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),i(Pt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),i(zt,"href","/docs/transformers/v4.16.2/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),i(Ct,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),i(Ve,"href","https://huggingface.co/models?filter=speech2text2"),i(Ve,"rel","nofollow"),i(pe,"id","transformers.Speech2Text2Config"),i(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(pe,"href","#transformers.Speech2Text2Config"),i(te,"class","relative group"),i(At,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),i(Oe,"href","https://huggingface.co/facebook/s2t-small-librispeech-asr"),i(Oe,"rel","nofollow"),i(Mt,"href","/docs/transformers/v4.16.2/en/main_classes/configuration#transformers.PretrainedConfig"),i(Lt,"href","/docs/transformers/v4.16.2/en/main_classes/configuration#transformers.PretrainedConfig"),i(j,"class","docstring"),i(fe,"id","transformers.Speech2Text2Tokenizer"),i(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(fe,"href","#transformers.Speech2Text2Tokenizer"),i(se,"class","relative group"),i(Ft,"href","/docs/transformers/v4.16.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),i(me,"class","docstring"),i(K,"class","docstring"),i(wo,"class","docstring"),i(E,"class","docstring"),i(ue,"id","transformers.Speech2Text2Processor"),i(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ue,"href","#transformers.Speech2Text2Processor"),i(ae,"class","relative group"),i(Dt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),i(It,"href","/docs/transformers/v4.16.2/en/model_doc/auto#transformers.AutoFeatureExtractor"),i(Wt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),i(Ze,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor.__call__"),i(Vt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor.decode"),i(Nt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor.as_target_processor"),i(tt,"href","/docs/transformers/v4.16.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__"),i(_e,"class","docstring"),i(Bt,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),i(Q,"class","docstring"),i(Ot,"href","/docs/transformers/v4.16.2/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor.from_pretrained"),i(X,"class","docstring"),i(Ut,"href","/docs/transformers/v4.16.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode"),i(Te,"class","docstring"),i(Rt,"href","/docs/transformers/v4.16.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode"),i(xe,"class","docstring"),i(ke,"class","docstring"),i(k,"class","docstring"),i(be,"id","transformers.Speech2Text2ForCausalLM"),i(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(be,"href","#transformers.Speech2Text2ForCausalLM"),i(ce,"class","relative group"),i(Ht,"href","/docs/transformers/v4.16.2/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),i(Jt,"href","/docs/transformers/v4.16.2/en/main_classes/model#transformers.PreTrainedModel"),i(ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),i(ft,"rel","nofollow"),i(Y,"class","docstring"),i(I,"class","docstring")},m(t,h){e(document.head,f),p(t,q,h),p(t,x,h),e(x,S),e(S,F),_(w,F,null),e(x,B),e(x,D),e(D,z),p(t,b,h),p(t,C,h),e(C,A),e(A,so),_(Ee,so,null),e(C,qr),e(C,ao),e(ao,Ar),p(t,Io,h),p(t,H,h),e(H,Mr),e(H,vt),e(vt,Lr),e(H,Fr),e(H,Pe),e(Pe,Dr),e(H,Ir),p(t,Wo,h),p(t,$,h),e($,Wr),e($,no),e(no,Vr),e($,Nr),e($,co),e(co,Br),e($,Or),e($,Tt),e(Tt,Ur),e($,Rr),e($,xt),e(xt,Hr),e($,Jr),e($,kt),e(kt,Gr),e($,Kr),e($,io),e(io,Qr),e($,Xr),p(t,Vo,h),p(t,ie,h),e(ie,Yr),e(ie,ze),e(ze,Zr),e(ie,es),p(t,No,h),p(t,le,h),e(le,ts),e(le,Ce),e(Ce,os),e(le,rs),p(t,Bo,h),p(t,bt,h),e(bt,ss),p(t,Oo,h),p(t,J,h),e(J,je),e(je,as),e(je,qe),e(qe,ns),e(je,cs),e(J,is),e(J,Ae),e(Ae,ls),e(Ae,St),e(St,ds),e(Ae,hs),e(J,ps),e(J,Me),e(Me,fs),e(Me,Le),e(Le,ms),e(Me,us),p(t,Uo,h),p(t,ee,h),e(ee,de),e(de,lo),_(Fe,lo,null),e(ee,_s),e(ee,ho),e(ho,gs),p(t,Ro,h),p(t,G,h),e(G,vs),e(G,wt),e(wt,Ts),e(G,xs),e(G,$t),e($t,ks),e(G,bs),p(t,Ho,h),p(t,P,h),e(P,Ss),e(P,yt),e(yt,ws),e(P,$s),e(P,Et),e(Et,ys),e(P,Es),e(P,Pt),e(Pt,Ps),e(P,zs),e(P,zt),e(zt,Cs),e(P,js),e(P,Ct),e(Ct,qs),e(P,As),p(t,Jo,h),p(t,jt,h),e(jt,po),e(po,Ms),p(t,Go,h),_(De,t,h),p(t,Ko,h),p(t,qt,h),e(qt,Ie),e(Ie,fo),e(fo,Ls),e(Ie,Fs),e(Ie,mo),e(mo,Ds),p(t,Qo,h),_(We,t,h),p(t,Xo,h),p(t,he,h),e(he,Is),e(he,Ve),e(Ve,Ws),e(he,Vs),p(t,Yo,h),p(t,te,h),e(te,pe),e(pe,uo),_(Ne,uo,null),e(te,Ns),e(te,_o),e(_o,Bs),p(t,Zo,h),p(t,j,h),_(Be,j,null),e(j,Os),e(j,oe),e(oe,Us),e(oe,At),e(At,Rs),e(oe,Hs),e(oe,Oe),e(Oe,Js),e(oe,Gs),e(j,Ks),e(j,re),e(re,Qs),e(re,Mt),e(Mt,Xs),e(re,Ys),e(re,Lt),e(Lt,Zs),e(re,ea),e(j,ta),e(j,go),e(go,oa),e(j,ra),_(Ue,j,null),p(t,er,h),p(t,se,h),e(se,fe),e(fe,vo),_(Re,vo,null),e(se,sa),e(se,To),e(To,aa),p(t,tr,h),p(t,E,h),_(He,E,null),e(E,na),e(E,xo),e(xo,ca),e(E,ia),e(E,Je),e(Je,la),e(Je,Ft),e(Ft,da),e(Je,ha),e(E,pa),e(E,me),_(Ge,me,null),e(me,fa),e(me,ko),e(ko,ma),e(E,ua),e(E,K),_(Ke,K,null),e(K,_a),e(K,bo),e(bo,ga),e(K,va),e(K,Qe),e(Qe,Ta),e(Qe,So),e(So,xa),e(Qe,ka),e(E,ba),e(E,wo),p(t,or,h),p(t,ae,h),e(ae,ue),e(ue,$o),_(Xe,$o,null),e(ae,Sa),e(ae,yo),e(yo,wa),p(t,rr,h),p(t,k,h),_(Ye,k,null),e(k,$a),e(k,Eo),e(Eo,ya),e(k,Ea),e(k,M),e(M,Dt),e(Dt,Pa),e(M,za),e(M,It),e(It,Ca),e(M,ja),e(M,Wt),e(Wt,qa),e(M,Aa),e(M,Ze),e(Ze,Po),e(Po,Ma),e(Ze,La),e(M,Fa),e(M,Vt),e(Vt,Da),e(M,Ia),e(k,Wa),e(k,_e),_(et,_e,null),e(_e,Va),e(_e,O),e(O,Na),e(O,zo),e(zo,Ba),e(O,Oa),e(O,Nt),e(Nt,Ua),e(O,Ra),e(O,tt),e(tt,Co),e(Co,Ha),e(tt,Ja),e(O,Ga),e(k,Ka),e(k,Q),_(ot,Q,null),e(Q,Qa),e(Q,rt),e(rt,Xa),e(rt,Bt),e(Bt,Ya),e(rt,Za),e(Q,en),_(ge,Q,null),e(k,tn),e(k,X),_(st,X,null),e(X,on),e(X,ne),e(ne,rn),e(ne,jo),e(jo,sn),e(ne,an),e(ne,Ot),e(Ot,nn),e(ne,cn),e(X,ln),_(ve,X,null),e(k,dn),e(k,Te),_(at,Te,null),e(Te,hn),e(Te,nt),e(nt,pn),e(nt,Ut),e(Ut,fn),e(nt,mn),e(k,un),e(k,xe),_(ct,xe,null),e(xe,_n),e(xe,it),e(it,gn),e(it,Rt),e(Rt,vn),e(it,Tn),e(k,xn),e(k,ke),_(lt,ke,null),e(ke,kn),e(ke,qo),e(qo,bn),p(t,sr,h),p(t,ce,h),e(ce,be),e(be,Ao),_(dt,Ao,null),e(ce,Sn),e(ce,Mo),e(Mo,wn),p(t,ar,h),p(t,I,h),_(ht,I,null),e(I,$n),e(I,U),e(U,yn),e(U,Ht),e(Ht,En),e(U,Pn),e(U,Lo),e(Lo,zn),e(U,Cn),e(U,Jt),e(Jt,jn),e(U,qn),e(I,An),e(I,pt),e(pt,Mn),e(pt,ft),e(ft,Ln),e(pt,Fn),e(I,Dn),e(I,Y),_(mt,Y,null),e(Y,In),e(Y,Fo),e(Fo,Wn),e(Y,Vn),_(ut,Y,null),nr=!0},p(t,[h]){const _t={};h&2&&(_t.$$scope={dirty:h,ctx:t}),ge.$set(_t);const Do={};h&2&&(Do.$$scope={dirty:h,ctx:t}),ve.$set(Do)},i(t){nr||(g(w.$$.fragment,t),g(Ee.$$.fragment,t),g(Fe.$$.fragment,t),g(De.$$.fragment,t),g(We.$$.fragment,t),g(Ne.$$.fragment,t),g(Be.$$.fragment,t),g(Ue.$$.fragment,t),g(Re.$$.fragment,t),g(He.$$.fragment,t),g(Ge.$$.fragment,t),g(Ke.$$.fragment,t),g(Xe.$$.fragment,t),g(Ye.$$.fragment,t),g(et.$$.fragment,t),g(ot.$$.fragment,t),g(ge.$$.fragment,t),g(st.$$.fragment,t),g(ve.$$.fragment,t),g(at.$$.fragment,t),g(ct.$$.fragment,t),g(lt.$$.fragment,t),g(dt.$$.fragment,t),g(ht.$$.fragment,t),g(mt.$$.fragment,t),g(ut.$$.fragment,t),nr=!0)},o(t){v(w.$$.fragment,t),v(Ee.$$.fragment,t),v(Fe.$$.fragment,t),v(De.$$.fragment,t),v(We.$$.fragment,t),v(Ne.$$.fragment,t),v(Be.$$.fragment,t),v(Ue.$$.fragment,t),v(Re.$$.fragment,t),v(He.$$.fragment,t),v(Ge.$$.fragment,t),v(Ke.$$.fragment,t),v(Xe.$$.fragment,t),v(Ye.$$.fragment,t),v(et.$$.fragment,t),v(ot.$$.fragment,t),v(ge.$$.fragment,t),v(st.$$.fragment,t),v(ve.$$.fragment,t),v(at.$$.fragment,t),v(ct.$$.fragment,t),v(lt.$$.fragment,t),v(dt.$$.fragment,t),v(ht.$$.fragment,t),v(mt.$$.fragment,t),v(ut.$$.fragment,t),nr=!1},d(t){o(f),t&&o(q),t&&o(x),T(w),t&&o(b),t&&o(C),T(Ee),t&&o(Io),t&&o(H),t&&o(Wo),t&&o($),t&&o(Vo),t&&o(ie),t&&o(No),t&&o(le),t&&o(Bo),t&&o(bt),t&&o(Oo),t&&o(J),t&&o(Uo),t&&o(ee),T(Fe),t&&o(Ro),t&&o(G),t&&o(Ho),t&&o(P),t&&o(Jo),t&&o(jt),t&&o(Go),T(De,t),t&&o(Ko),t&&o(qt),t&&o(Qo),T(We,t),t&&o(Xo),t&&o(he),t&&o(Yo),t&&o(te),T(Ne),t&&o(Zo),t&&o(j),T(Be),T(Ue),t&&o(er),t&&o(se),T(Re),t&&o(tr),t&&o(E),T(He),T(Ge),T(Ke),t&&o(or),t&&o(ae),T(Xe),t&&o(rr),t&&o(k),T(Ye),T(et),T(ot),T(ge),T(st),T(ve),T(at),T(ct),T(lt),t&&o(sr),t&&o(ce),T(dt),t&&o(ar),t&&o(I),T(ht),T(mt),T(ut)}}}const xi={local:"speech2text2",sections:[{local:"overview",title:"Overview"},{local:"inference",title:"Inference"},{local:"transformers.Speech2Text2Config",title:"Speech2Text2Config"},{local:"transformers.Speech2Text2Tokenizer",title:"Speech2TextTokenizer"},{local:"transformers.Speech2Text2Processor",title:"Speech2Text2Processor"},{local:"transformers.Speech2Text2ForCausalLM",title:"Speech2Text2ForCausalLM"}],title:"Speech2Text2"};function ki(ye,f,q){let{fw:x}=f;return ye.$$set=S=>{"fw"in S&&q(0,x=S.fw)},[x]}class Pi extends fi{constructor(f){super();mi(this,f,ki,Ti,ui,{fw:0})}}export{Pi as default,xi as metadata};
