import{S as w4,i as L4,s as E4,e as o,k as c,w as f,t as a,M as P4,c as n,d as r,m as l,a as s,x as g,h as i,b as d,F as t,g as m,y as h,q as u,o as _,B as b,v as F4,L as D4}from"../../chunks/vendor-6b77c823.js";import{D as v}from"../../chunks/Docstring-1088f2fb.js";import{C as f$}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as qe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as S4}from"../../chunks/ExampleCodeBlock-5212b321.js";function z4(Ql){let w,Ge;return w=new f$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(w.$$.fragment)},l(k){g(w.$$.fragment,k)},m(k,Be){h(w,k,Be),Ge=!0},p:D4,i(k){Ge||(u(w.$$.fragment,k),Ge=!0)},o(k){_(w.$$.fragment,k),Ge=!1},d(k){b(w,k)}}}function O4(Ql){let w,Ge,k,Be,ji,tr,ym,Hi,km,Zl,y,xm,In,wm,Lm,Cn,Em,Pm,An,Fm,Dm,Wn,Sm,zm,Nn,Om,qm,Vn,Bm,Im,Mn,Cm,Am,ed,Gn,Wm,td,je,gt,Ri,rr,Nm,Ki,Vm,rd,V,Mm,jn,Gm,jm,Hn,Hm,Rm,Rn,Km,Um,od,Kn,Ym,nd,or,sd,Ie,Xm,Ui,Jm,Qm,Un,Zm,ef,ad,M,Yn,Yi,tf,rf,of,Xn,Xi,nf,sf,af,Jn,Ji,cf,lf,df,Qn,Qi,pf,mf,id,x,ff,Zi,gf,hf,ec,uf,_f,tc,bf,vf,rc,$f,Tf,oc,yf,kf,nc,xf,wf,cd,S,Lf,sc,Ef,Pf,ac,Ff,Df,ic,Sf,zf,cc,Of,qf,ld,z,Bf,lc,If,Cf,dc,Af,Wf,pc,Nf,Vf,mc,Mf,Gf,dd,nr,pd,ht,jf,fc,Hf,Rf,md,O,Kf,gc,Uf,Yf,hc,Xf,Jf,uc,Qf,Zf,_c,eg,tg,fd,Zn,rg,gd,He,ut,bc,sr,og,vc,ng,hd,Re,ar,sg,$c,ag,ud,Ke,ir,ig,Tc,cg,_d,R,cr,lg,yc,dg,pg,_t,lr,mg,kc,fg,bd,Ue,bt,xc,dr,gg,wc,hg,vd,Ye,pr,ug,Lc,_g,$d,Xe,mr,bg,Ec,vg,Td,K,fr,$g,Pc,Tg,yg,vt,gr,kg,Fc,xg,yd,Je,$t,Dc,hr,wg,Sc,Lg,kd,Qe,ur,Eg,zc,Pg,xd,Ze,_r,Fg,Oc,Dg,wd,et,Tt,qc,br,Sg,Bc,zg,Ld,tt,vr,Og,Ic,qg,Ed,rt,$r,Bg,Cc,Ig,Pd,ot,yt,Ac,Tr,Cg,Wc,Ag,Fd,kt,Wg,es,Ng,Vg,Dd,U,yr,Mg,Nc,Gg,jg,xt,kr,Hg,Vc,Rg,Sd,Y,xr,Kg,L,Ug,ts,Yg,Xg,rs,Jg,Qg,Mc,Zg,eh,Gc,jc,th,rh,os,oh,nh,ns,sh,ah,ih,ss,wr,zd,X,Lr,ch,Hc,lh,dh,wt,Er,ph,Rc,mh,Od,J,Pr,fh,as,is,gh,hh,uh,cs,Fr,qd,Q,Dr,_h,ls,ds,bh,vh,$h,ps,Sr,Bd,Z,zr,Th,ms,fs,yh,kh,xh,gs,Or,Id,ee,qr,wh,hs,us,Lh,Eh,Ph,_s,Br,Cd,te,Ir,Fh,bs,vs,Dh,Sh,zh,$s,Cr,Ad,re,Ar,Oh,Lt,Ts,qh,Bh,Wr,Ih,Ch,Ah,ys,Nr,Wd,oe,Vr,Wh,ks,xs,Nh,Vh,Mh,ws,Mr,Nd,ne,Gr,Gh,Et,Ls,jh,Hh,jr,Rh,Kh,Uh,Es,Hr,Vd,se,Rr,Yh,Ce,Ps,Xh,Jh,Fs,Qh,Zh,Kr,eu,tu,ru,Ds,Ur,Md,ae,Yr,ou,Ss,zs,nu,su,au,Os,Xr,Gd,ie,Jr,iu,Pt,qs,cu,lu,Kc,du,pu,mu,Bs,Qr,jd,ce,Zr,fu,G,Is,gu,hu,Uc,uu,_u,Yc,bu,vu,Xc,$u,Tu,yu,Cs,eo,Hd,le,to,ku,Jc,xu,wu,Ft,ro,Lu,Qc,Eu,Rd,de,oo,Pu,C,Fu,As,Du,Su,Zc,zu,Ou,el,tl,qu,Bu,Ws,Iu,Cu,Au,Ns,no,Kd,pe,so,Wu,rl,Nu,Vu,Dt,ao,Mu,ol,Gu,Ud,me,io,ju,Vs,Ms,Hu,Ru,Ku,Gs,co,Yd,fe,lo,Uu,js,Hs,Yu,Xu,Ju,Rs,po,Xd,ge,mo,Qu,Ks,Us,Zu,e_,t_,Ys,fo,Jd,he,go,r_,Xs,Js,o_,n_,s_,Qs,ho,Qd,ue,uo,a_,Zs,ea,i_,c_,l_,ta,_o,Zd,_e,bo,d_,St,ra,p_,m_,vo,f_,g_,h_,oa,$o,ep,be,To,u_,na,sa,__,b_,v_,aa,yo,tp,ve,ko,$_,nl,T_,y_,zt,xo,k_,sl,x_,rp,$e,wo,w_,E,L_,ia,E_,P_,ca,F_,D_,al,S_,z_,il,cl,O_,q_,la,B_,I_,da,C_,A_,W_,pa,Lo,op,Te,Eo,N_,ll,V_,M_,Ot,Po,G_,dl,j_,np,ye,Fo,H_,ma,fa,R_,K_,U_,ga,Do,sp,ke,So,Y_,ha,ua,X_,J_,Q_,_a,zo,ap,xe,Oo,Z_,ba,va,eb,tb,rb,$a,qo,ip,we,Bo,ob,Ta,ya,nb,sb,ab,ka,Io,cp,Le,Co,ib,qt,xa,cb,lb,pl,db,pb,mb,wa,Ao,lp,Ee,Wo,fb,La,Ea,gb,hb,ub,Pa,No,dp,nt,Bt,ml,Vo,_b,fl,bb,pp,It,vb,Fa,$b,Tb,mp,Pe,Mo,yb,gl,kb,xb,Da,Go,fp,st,jo,wb,Sa,Ho,gp,Fe,Ro,Lb,Ko,Eb,hl,Pb,Fb,Db,za,Uo,hp,De,Yo,Sb,Xo,zb,ul,Ob,qb,Bb,Oa,Jo,up,at,Ct,_l,Qo,Ib,bl,Cb,_p,At,Ab,qa,Wb,Nb,bp,$,Zo,Vb,vl,Mb,Gb,$l,jb,Hb,Wt,Rb,Tl,Kb,Ub,Nt,en,Yb,yl,Xb,Jb,Vt,tn,Qb,kl,Zb,ev,Mt,rn,tv,xl,rv,ov,Gt,on,nv,nn,sv,wl,av,iv,cv,jt,sn,lv,Ll,dv,pv,Ht,an,mv,El,fv,gv,Ae,cn,hv,ln,uv,Pl,_v,bv,vv,Fl,$v,vp,it,dn,Tv,Ba,Ia,yv,kv,$p,ct,pn,xv,mn,wv,Ca,Lv,Ev,Tp,A,fn,Pv,Dl,Fv,Dv,F,gn,Sv,Sl,zv,Ov,lt,qv,zl,Bv,Iv,Ol,Cv,Av,Wv,ql,Bl,Nv,Vv,Se,Mv,Il,Gv,jv,Cl,Hv,Rv,Al,Kv,Uv,Yv,Wl,Xv,Jv,Rt,hn,Qv,Nl,Zv,yp,dt,Kt,Vl,un,e1,Ml,t1,kp,W,_n,r1,pt,o1,Aa,n1,s1,Wa,a1,i1,c1,Na,bn,l1,Va,vn,xp,P,$n,d1,Ma,Ga,p1,m1,f1,Tn,g1,yn,h1,u1,_1,ja,b1,kn,v1,$1,Ha,xn,T1,Ra,wn,wp,N,Ln,y1,Ka,Ua,k1,x1,w1,Ya,En,L1,Xa,Pn,Lp,mt,Ut,Gl,Fn,E1,jl,P1,Ep,ze,Dn,F1,Hl,D1,S1,Ja,z1,Sn,O1,Pp,Oe,zn,q1,Rl,B1,I1,Qa,C1,On,A1,Fp;return tr=new qe({}),rr=new qe({}),or=new f$({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),nr=new f$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),sr=new qe({}),ar=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L61"}}),ir=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L89"}}),cr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_utils.py#L44"}}),lr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/flax/struct.py#L120"}}),dr=new qe({}),pr=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L131"}}),mr=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L160"}}),fr=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_utils.py#L58"}}),gr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/flax/struct.py#L120"}}),hr=new qe({}),ur=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L203"}}),_r=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L238"}}),br=new qe({}),vr=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L289"}}),$r=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L324"}}),Tr=new qe({}),yr=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L51"}}),kr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),xr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L73"}}),wr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Lr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L62"}}),Er=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Pr=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L96"}}),Fr=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L117"}}),Dr=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L124"}}),Sr=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L139"}}),zr=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L144"}}),Or=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L160"}}),qr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L170"}}),Br=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L193"}}),Ir=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L212"}}),Cr=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L233"}}),Ar=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L312"}}),Nr=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L327"}}),Vr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L379"}}),Mr=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L421"}}),Gr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L507"}}),Hr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L524"}}),Rr=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L533"}}),Ur=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L564"}}),Yr=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L593"}}),Xr=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L605"}}),Jr=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L614"}}),Qr=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L629"}}),Zr=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L638"}}),eo=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_logits_process.py#L645"}}),to=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L50"}}),ro=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),oo=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L72"}}),no=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),so=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L61"}}),ao=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),io=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L95"}}),co=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L110"}}),lo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L144"}}),po=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L166"}}),mo=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L115"}}),fo=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L136"}}),go=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L198"}}),ho=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L219"}}),uo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L270"}}),_o=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L333"}}),bo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L353"}}),$o=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L391"}}),To=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L233"}}),yo=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_logits_process.py#L262"}}),ko=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L50"}}),xo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wo=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L72"}}),Lo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Eo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L61"}}),Po=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Fo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L95"}}),Do=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L110"}}),So=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L115"}}),zo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L137"}}),Oo=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L157"}}),qo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L178"}}),Bo=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L193"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L205"}}),Co=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L215"}}),Ao=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L230"}}),Wo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L240"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_flax_logits_process.py#L261"}}),Vo=new qe({}),Mo=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L33"}}),Go=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),jo=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L110"}}),Ho=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Ro=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L41"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Yo=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L88"}}),Jo=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Qo=new qe({}),Zo=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L5"}}),Wt=new S4({props:{anchor:"transformers.Constraint.example",$$slots:{default:[z4]},$$scope:{ctx:Ql}}}),en=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),tn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),rn=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L60"}}),on=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L104"}}),sn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L94"}}),an=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L24"}}),cn=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),dn=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L129"}}),pn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L260"}}),fn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L349"}}),gn=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L381"}}),hn=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_constraints.py#L416"}}),un=new qe({}),_n=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L88"}}),bn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),vn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),$n=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L120"}}),xn=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L206"}}),wn=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L291"}}),Ln=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L356"}}),En=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L450",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Pn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_beam_search.py#L725"}}),Fn=new qe({}),Dn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_utils.py#L3285"}}),zn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/generation_tf_utils.py#L2336"}}),{c(){w=o("meta"),Ge=c(),k=o("h1"),Be=o("a"),ji=o("span"),f(tr.$$.fragment),ym=c(),Hi=o("span"),km=a("Utilities for Generation"),Zl=c(),y=o("p"),xm=a("This page lists all the utility functions used by "),In=o("a"),wm=a("generate()"),Lm=a(`,
`),Cn=o("a"),Em=a("greedy_search()"),Pm=a(`,
`),An=o("a"),Fm=a("sample()"),Dm=a(`,
`),Wn=o("a"),Sm=a("beam_search()"),zm=a(`,
`),Nn=o("a"),Om=a("beam_sample()"),qm=a(`,
`),Vn=o("a"),Bm=a("group_beam_search()"),Im=a(`, and
`),Mn=o("a"),Cm=a("constrained_beam_search()"),Am=a("."),ed=c(),Gn=o("p"),Wm=a("Most of those are only useful if you are studying the code of the generate methods in the library."),td=c(),je=o("h2"),gt=o("a"),Ri=o("span"),f(rr.$$.fragment),Nm=c(),Ki=o("span"),Vm=a("Generate Outputs"),rd=c(),V=o("p"),Mm=a("The output of "),jn=o("a"),Gm=a("generate()"),jm=a(` is an instance of a subclass of
`),Hn=o("a"),Hm=a("ModelOutput"),Rm=a(`. This output is a data structure containing all the information returned
by `),Rn=o("a"),Km=a("generate()"),Um=a(", but that can also be used as tuple or dictionary."),od=c(),Kn=o("p"),Ym=a("Here\u2019s an example:"),nd=c(),f(or.$$.fragment),sd=c(),Ie=o("p"),Xm=a("The "),Ui=o("code"),Jm=a("generation_output"),Qm=a(" object is a "),Un=o("a"),Zm=a("GreedySearchDecoderOnlyOutput"),ef=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),ad=c(),M=o("ul"),Yn=o("li"),Yi=o("code"),tf=a("sequences"),rf=a(": the generated sequences of tokens"),of=c(),Xn=o("li"),Xi=o("code"),nf=a("scores"),sf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),af=c(),Jn=o("li"),Ji=o("code"),cf=a("hidden_states"),lf=a(" (optional): the hidden states of the model, for each generation step"),df=c(),Qn=o("li"),Qi=o("code"),pf=a("attentions"),mf=a(" (optional): the attention weights of the model, for each generation step"),id=c(),x=o("p"),ff=a("Here we have the "),Zi=o("code"),gf=a("scores"),hf=a(" since we passed along "),ec=o("code"),uf=a("output_scores=True"),_f=a(", but we don\u2019t have "),tc=o("code"),bf=a("hidden_states"),vf=a(` and
`),rc=o("code"),$f=a("attentions"),Tf=a(" because we didn\u2019t pass "),oc=o("code"),yf=a("output_hidden_states=True"),kf=a(" or "),nc=o("code"),xf=a("output_attentions=True"),wf=a("."),cd=c(),S=o("p"),Lf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),sc=o("code"),Ef=a("None"),Pf=a(". Here for instance "),ac=o("code"),Ff=a("generation_output.scores"),Df=a(` are all the generated prediction scores of the
language modeling head, and `),ic=o("code"),Sf=a("generation_output.attentions"),zf=a(" is "),cc=o("code"),Of=a("None"),qf=a("."),ld=c(),z=o("p"),Bf=a("When using our "),lc=o("code"),If=a("generation_output"),Cf=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),dc=o("code"),Af=a("None"),Wf=a(` values.
Here, for instance, it has two elements, `),pc=o("code"),Nf=a("loss"),Vf=a(" then "),mc=o("code"),Mf=a("logits"),Gf=a(", so"),dd=c(),f(nr.$$.fragment),pd=c(),ht=o("p"),jf=a("will return the tuple "),fc=o("code"),Hf=a("(generation_output.sequences, generation_output.scores)"),Rf=a(" for instance."),md=c(),O=o("p"),Kf=a("When using our "),gc=o("code"),Uf=a("generation_output"),Yf=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),hc=o("code"),Xf=a("None"),Jf=a(`
values. Here, for instance, it has two keys that are `),uc=o("code"),Qf=a("sequences"),Zf=a(" and "),_c=o("code"),eg=a("scores"),tg=a("."),fd=c(),Zn=o("p"),rg=a("We document here all output types."),gd=c(),He=o("h3"),ut=o("a"),bc=o("span"),f(sr.$$.fragment),og=c(),vc=o("span"),ng=a("GreedySearchOutput"),hd=c(),Re=o("div"),f(ar.$$.fragment),sg=c(),$c=o("p"),ag=a("Base class for outputs of decoder-only generation models using greedy search."),ud=c(),Ke=o("div"),f(ir.$$.fragment),ig=c(),Tc=o("p"),cg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),_d=c(),R=o("div"),f(cr.$$.fragment),lg=c(),yc=o("p"),dg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),pg=c(),_t=o("div"),f(lr.$$.fragment),mg=c(),kc=o("p"),fg=a("\u201CReturns a new object replacing the specified fields with new values."),bd=c(),Ue=o("h3"),bt=o("a"),xc=o("span"),f(dr.$$.fragment),gg=c(),wc=o("span"),hg=a("SampleOutput"),vd=c(),Ye=o("div"),f(pr.$$.fragment),ug=c(),Lc=o("p"),_g=a("Base class for outputs of decoder-only generation models using sampling."),$d=c(),Xe=o("div"),f(mr.$$.fragment),bg=c(),Ec=o("p"),vg=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Td=c(),K=o("div"),f(fr.$$.fragment),$g=c(),Pc=o("p"),Tg=a("Flax Base class for outputs of decoder-only generation models using sampling."),yg=c(),vt=o("div"),f(gr.$$.fragment),kg=c(),Fc=o("p"),xg=a("\u201CReturns a new object replacing the specified fields with new values."),yd=c(),Je=o("h3"),$t=o("a"),Dc=o("span"),f(hr.$$.fragment),wg=c(),Sc=o("span"),Lg=a("BeamSearchOutput"),kd=c(),Qe=o("div"),f(ur.$$.fragment),Eg=c(),zc=o("p"),Pg=a("Base class for outputs of decoder-only generation models using beam search."),xd=c(),Ze=o("div"),f(_r.$$.fragment),Fg=c(),Oc=o("p"),Dg=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),wd=c(),et=o("h3"),Tt=o("a"),qc=o("span"),f(br.$$.fragment),Sg=c(),Bc=o("span"),zg=a("BeamSampleOutput"),Ld=c(),tt=o("div"),f(vr.$$.fragment),Og=c(),Ic=o("p"),qg=a("Base class for outputs of decoder-only generation models using beam sample."),Ed=c(),rt=o("div"),f($r.$$.fragment),Bg=c(),Cc=o("p"),Ig=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Pd=c(),ot=o("h2"),yt=o("a"),Ac=o("span"),f(Tr.$$.fragment),Cg=c(),Wc=o("span"),Ag=a("LogitsProcessor"),Fd=c(),kt=o("p"),Wg=a("A "),es=o("a"),Ng=a("LogitsProcessor"),Vg=a(` can be used to modify the prediction scores of a language model head for
generation.`),Dd=c(),U=o("div"),f(yr.$$.fragment),Mg=c(),Nc=o("p"),Gg=a("Abstract base class for all logit processors that can be applied during generation."),jg=c(),xt=o("div"),f(kr.$$.fragment),Hg=c(),Vc=o("p"),Rg=a("Torch method for processing logits."),Sd=c(),Y=o("div"),f(xr.$$.fragment),Kg=c(),L=o("p"),Ug=a("This class can be used to create a list of "),ts=o("a"),Yg=a("LogitsProcessor"),Xg=a(" or "),rs=o("a"),Jg=a("LogitsWarper"),Qg=a(` to subsequently process a
`),Mc=o("code"),Zg=a("scores"),eh=a(" input tensor. This class inherits from list and adds a specific "),Gc=o("em"),jc=o("strong"),th=a("call"),rh=a(` method to apply each
`),os=o("a"),oh=a("LogitsProcessor"),nh=a(" or "),ns=o("a"),sh=a("LogitsWarper"),ah=a(" to the inputs."),ih=c(),ss=o("div"),f(wr.$$.fragment),zd=c(),X=o("div"),f(Lr.$$.fragment),ch=c(),Hc=o("p"),lh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),dh=c(),wt=o("div"),f(Er.$$.fragment),ph=c(),Rc=o("p"),mh=a("Torch method for warping logits."),Od=c(),J=o("div"),f(Pr.$$.fragment),fh=c(),as=o("p"),is=o("a"),gh=a("LogitsProcessor"),hh=a(" enforcing a min-length by setting EOS probability to 0."),uh=c(),cs=o("div"),f(Fr.$$.fragment),qd=c(),Q=o("div"),f(Dr.$$.fragment),_h=c(),ls=o("p"),ds=o("a"),bh=a("LogitsWarper"),vh=a(" for temperature (exponential scaling output probability distribution)."),$h=c(),ps=o("div"),f(Sr.$$.fragment),Bd=c(),Z=o("div"),f(zr.$$.fragment),Th=c(),ms=o("p"),fs=o("a"),yh=a("LogitsProcessor"),kh=a(" enforcing an exponential penalty on repeated sequences."),xh=c(),gs=o("div"),f(Or.$$.fragment),Id=c(),ee=o("div"),f(qr.$$.fragment),wh=c(),hs=o("p"),us=o("a"),Lh=a("LogitsWarper"),Eh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Ph=c(),_s=o("div"),f(Br.$$.fragment),Cd=c(),te=o("div"),f(Ir.$$.fragment),Fh=c(),bs=o("p"),vs=o("a"),Dh=a("LogitsWarper"),Sh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),zh=c(),$s=o("div"),f(Cr.$$.fragment),Ad=c(),re=o("div"),f(Ar.$$.fragment),Oh=c(),Lt=o("p"),Ts=o("a"),qh=a("LogitsProcessor"),Bh=a(` that enforces no repetition of n-grams. See
`),Wr=o("a"),Ih=a("Fairseq"),Ch=a("."),Ah=c(),ys=o("div"),f(Nr.$$.fragment),Wd=c(),oe=o("div"),f(Vr.$$.fragment),Wh=c(),ks=o("p"),xs=o("a"),Nh=a("LogitsProcessor"),Vh=a(" that enforces that specified sequences will never be sampled."),Mh=c(),ws=o("div"),f(Mr.$$.fragment),Nd=c(),ne=o("div"),f(Gr.$$.fragment),Gh=c(),Et=o("p"),Ls=o("a"),jh=a("LogitsProcessor"),Hh=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),jr=o("a"),Rh=a("Autoregressive Entity Retrieval"),Kh=a(" for more information."),Uh=c(),Es=o("div"),f(Hr.$$.fragment),Vd=c(),se=o("div"),f(Rr.$$.fragment),Yh=c(),Ce=o("p"),Ps=o("a"),Xh=a("LogitsProcessor"),Jh=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Fs=o("a"),Qh=a("PreTrainedModel.group_beam_search()"),Zh=a(". See "),Kr=o("a"),eu=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),tu=a(" for more details."),ru=c(),Ds=o("div"),f(Ur.$$.fragment),Md=c(),ae=o("div"),f(Yr.$$.fragment),ou=c(),Ss=o("p"),zs=o("a"),nu=a("LogitsProcessor"),su=a(" that enforces the specified token as the first generated token."),au=c(),Os=o("div"),f(Xr.$$.fragment),Gd=c(),ie=o("div"),f(Jr.$$.fragment),iu=c(),Pt=o("p"),qs=o("a"),cu=a("LogitsProcessor"),lu=a(" that enforces the specified token as the last generated token when "),Kc=o("code"),du=a("max_length"),pu=a(" is reached."),mu=c(),Bs=o("div"),f(Qr.$$.fragment),jd=c(),ce=o("div"),f(Zr.$$.fragment),fu=c(),G=o("p"),Is=o("a"),gu=a("LogitsProcessor"),hu=a(" that removes all "),Uc=o("code"),uu=a("nan"),_u=a(" and "),Yc=o("code"),bu=a("inf"),vu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Xc=o("code"),$u=a("max_length"),Tu=a(` is
reached.`),yu=c(),Cs=o("div"),f(eo.$$.fragment),Hd=c(),le=o("div"),f(to.$$.fragment),ku=c(),Jc=o("p"),xu=a("Abstract base class for all logit processors that can be applied during generation."),wu=c(),Ft=o("div"),f(ro.$$.fragment),Lu=c(),Qc=o("p"),Eu=a("TF method for processing logits."),Rd=c(),de=o("div"),f(oo.$$.fragment),Pu=c(),C=o("p"),Fu=a("This class can be used to create a list of "),As=o("a"),Du=a("TFLogitsProcessor"),Su=a(" to subsequently process a "),Zc=o("code"),zu=a("scores"),Ou=a(` input tensor.
This class inherits from list and adds a specific `),el=o("em"),tl=o("strong"),qu=a("call"),Bu=a(" method to apply each "),Ws=o("a"),Iu=a("TFLogitsProcessor"),Cu=a(` to the
inputs.`),Au=c(),Ns=o("div"),f(no.$$.fragment),Kd=c(),pe=o("div"),f(so.$$.fragment),Wu=c(),rl=o("p"),Nu=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Vu=c(),Dt=o("div"),f(ao.$$.fragment),Mu=c(),ol=o("p"),Gu=a("TF method for warping logits."),Ud=c(),me=o("div"),f(io.$$.fragment),ju=c(),Vs=o("p"),Ms=o("a"),Hu=a("TFLogitsWarper"),Ru=a(" for temperature (exponential scaling output probability distribution)."),Ku=c(),Gs=o("div"),f(co.$$.fragment),Yd=c(),fe=o("div"),f(lo.$$.fragment),Uu=c(),js=o("p"),Hs=o("a"),Yu=a("TFLogitsWarper"),Xu=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),Ju=c(),Rs=o("div"),f(po.$$.fragment),Xd=c(),ge=o("div"),f(mo.$$.fragment),Qu=c(),Ks=o("p"),Us=o("a"),Zu=a("TFLogitsWarper"),e_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),t_=c(),Ys=o("div"),f(fo.$$.fragment),Jd=c(),he=o("div"),f(go.$$.fragment),r_=c(),Xs=o("p"),Js=o("a"),o_=a("TFLogitsProcessor"),n_=a(" enforcing a min-length by setting EOS probability to 0."),s_=c(),Qs=o("div"),f(ho.$$.fragment),Qd=c(),ue=o("div"),f(uo.$$.fragment),a_=c(),Zs=o("p"),ea=o("a"),i_=a("TFLogitsProcessor"),c_=a(" that enforces that specified sequences will never be sampled."),l_=c(),ta=o("div"),f(_o.$$.fragment),Zd=c(),_e=o("div"),f(bo.$$.fragment),d_=c(),St=o("p"),ra=o("a"),p_=a("TFLogitsProcessor"),m_=a(` that enforces no repetition of n-grams. See
`),vo=o("a"),f_=a("Fairseq"),g_=a("."),h_=c(),oa=o("div"),f($o.$$.fragment),ep=c(),be=o("div"),f(To.$$.fragment),u_=c(),na=o("p"),sa=o("a"),__=a("TFLogitsProcessor"),b_=a(" enforcing an exponential penalty on repeated sequences."),v_=c(),aa=o("div"),f(yo.$$.fragment),tp=c(),ve=o("div"),f(ko.$$.fragment),$_=c(),nl=o("p"),T_=a("Abstract base class for all logit processors that can be applied during generation."),y_=c(),zt=o("div"),f(xo.$$.fragment),k_=c(),sl=o("p"),x_=a("Flax method for processing logits."),rp=c(),$e=o("div"),f(wo.$$.fragment),w_=c(),E=o("p"),L_=a("This class can be used to create a list of "),ia=o("a"),E_=a("FlaxLogitsProcessor"),P_=a(" or "),ca=o("a"),F_=a("FlaxLogitsWarper"),D_=a(` to subsequently process
a `),al=o("code"),S_=a("scores"),z_=a(" input tensor. This class inherits from list and adds a specific "),il=o("em"),cl=o("strong"),O_=a("call"),q_=a(` method to apply each
`),la=o("a"),B_=a("FlaxLogitsProcessor"),I_=a(" or "),da=o("a"),C_=a("FlaxLogitsWarper"),A_=a(" to the inputs."),W_=c(),pa=o("div"),f(Lo.$$.fragment),op=c(),Te=o("div"),f(Eo.$$.fragment),N_=c(),ll=o("p"),V_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),M_=c(),Ot=o("div"),f(Po.$$.fragment),G_=c(),dl=o("p"),j_=a("Flax method for warping logits."),np=c(),ye=o("div"),f(Fo.$$.fragment),H_=c(),ma=o("p"),fa=o("a"),R_=a("FlaxLogitsWarper"),K_=a(" for temperature (exponential scaling output probability distribution)."),U_=c(),ga=o("div"),f(Do.$$.fragment),sp=c(),ke=o("div"),f(So.$$.fragment),Y_=c(),ha=o("p"),ua=o("a"),X_=a("FlaxLogitsWarper"),J_=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Q_=c(),_a=o("div"),f(zo.$$.fragment),ap=c(),xe=o("div"),f(Oo.$$.fragment),Z_=c(),ba=o("p"),va=o("a"),eb=a("FlaxLogitsWarper"),tb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),rb=c(),$a=o("div"),f(qo.$$.fragment),ip=c(),we=o("div"),f(Bo.$$.fragment),ob=c(),Ta=o("p"),ya=o("a"),nb=a("FlaxLogitsProcessor"),sb=a(" that enforces the specified token as the first generated token."),ab=c(),ka=o("div"),f(Io.$$.fragment),cp=c(),Le=o("div"),f(Co.$$.fragment),ib=c(),qt=o("p"),xa=o("a"),cb=a("FlaxLogitsProcessor"),lb=a(" that enforces the specified token as the last generated token when "),pl=o("code"),db=a("max_length"),pb=a(" is reached."),mb=c(),wa=o("div"),f(Ao.$$.fragment),lp=c(),Ee=o("div"),f(Wo.$$.fragment),fb=c(),La=o("p"),Ea=o("a"),gb=a("FlaxLogitsProcessor"),hb=a(" enforcing a min-length by setting EOS probability to 0."),ub=c(),Pa=o("div"),f(No.$$.fragment),dp=c(),nt=o("h2"),Bt=o("a"),ml=o("span"),f(Vo.$$.fragment),_b=c(),fl=o("span"),bb=a("StoppingCriteria"),pp=c(),It=o("p"),vb=a("A "),Fa=o("a"),$b=a("StoppingCriteria"),Tb=a(" can be used to change when to stop generation (other than EOS token)."),mp=c(),Pe=o("div"),f(Mo.$$.fragment),yb=c(),gl=o("p"),kb=a("Abstract base class for all stopping criteria that can be applied during generation."),xb=c(),Da=o("div"),f(Go.$$.fragment),fp=c(),st=o("div"),f(jo.$$.fragment),wb=c(),Sa=o("div"),f(Ho.$$.fragment),gp=c(),Fe=o("div"),f(Ro.$$.fragment),Lb=c(),Ko=o("p"),Eb=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),hl=o("code"),Pb=a("max_length"),Fb=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Db=c(),za=o("div"),f(Uo.$$.fragment),hp=c(),De=o("div"),f(Yo.$$.fragment),Sb=c(),Xo=o("p"),zb=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),ul=o("code"),Ob=a("initial_time"),qb=a("."),Bb=c(),Oa=o("div"),f(Jo.$$.fragment),up=c(),at=o("h2"),Ct=o("a"),_l=o("span"),f(Qo.$$.fragment),Ib=c(),bl=o("span"),Cb=a("Constraints"),_p=c(),At=o("p"),Ab=a("A "),qa=o("a"),Wb=a("Constraint"),Nb=a(" can be used to force the generation to include specific tokens or sequences in the output."),bp=c(),$=o("div"),f(Zo.$$.fragment),Vb=c(),vl=o("p"),Mb=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Gb=c(),$l=o("p"),jb=a("All classes that inherit Constraint must follow the requirement that"),Hb=c(),f(Wt.$$.fragment),Rb=c(),Tl=o("p"),Kb=a("will always terminate (halt)."),Ub=c(),Nt=o("div"),f(en.$$.fragment),Yb=c(),yl=o("p"),Xb=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Jb=c(),Vt=o("div"),f(tn.$$.fragment),Qb=c(),kl=o("p"),Zb=a("Creates a new instance of this constraint."),ev=c(),Mt=o("div"),f(rn.$$.fragment),tv=c(),xl=o("p"),rv=a("Reads in a token and returns whether it creates progress."),ov=c(),Gt=o("div"),f(on.$$.fragment),nv=c(),nn=o("p"),sv=a("Returns the number of remaining steps of "),wl=o("code"),av=a("advance()"),iv=a(" in order to complete this constraint."),cv=c(),jt=o("div"),f(sn.$$.fragment),lv=c(),Ll=o("p"),dv=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),pv=c(),Ht=o("div"),f(an.$$.fragment),mv=c(),El=o("p"),fv=a("Tests whether this constraint has been properly defined."),gv=c(),Ae=o("div"),f(cn.$$.fragment),hv=c(),ln=o("p"),uv=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Pl=o("code"),_v=a("does_advance(self, token_id: int)"),bv=a("."),vv=c(),Fl=o("p"),$v=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),vp=c(),it=o("div"),f(dn.$$.fragment),Tv=c(),Ba=o("p"),Ia=o("a"),yv=a("Constraint"),kv=a(" enforcing that an ordered sequence of tokens is included in the output."),$p=c(),ct=o("div"),f(pn.$$.fragment),xv=c(),mn=o("p"),wv=a("A special "),Ca=o("a"),Lv=a("Constraint"),Ev=a(" that is fulfilled by fulfilling just one of several constraints."),Tp=c(),A=o("div"),f(fn.$$.fragment),Pv=c(),Dl=o("p"),Fv=a("A class for beam scorers to track its progress through a list of constraints."),Dv=c(),F=o("div"),f(gn.$$.fragment),Sv=c(),Sl=o("p"),zv=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Ov=c(),lt=o("p"),qv=a("Given constraints "),zl=o("code"),Bv=a("c_i = {t_ij | j == # of tokens}"),Iv=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ol=o("code"),Cv=a("c_i"),Av=a(", we return:"),Wv=c(),ql=o("p"),Bl=o("code"),Nv=a("[t_k1 for k in indices of unfulfilled constraints]"),Vv=c(),Se=o("p"),Mv=a(`If we are in the middle of a constraint, then we return:
`),Il=o("code"),Gv=a("[t_ij]"),jv=a(", where "),Cl=o("code"),Hv=a("i"),Rv=a(" is the index of the inprogress constraint, "),Al=o("code"),Kv=a("j"),Uv=a(" is the next step for the constraint."),Yv=c(),Wl=o("p"),Xv=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Jv=c(),Rt=o("div"),f(hn.$$.fragment),Qv=c(),Nl=o("p"),Zv=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),yp=c(),dt=o("h2"),Kt=o("a"),Vl=o("span"),f(un.$$.fragment),e1=c(),Ml=o("span"),t1=a("BeamSearch"),kp=c(),W=o("div"),f(_n.$$.fragment),r1=c(),pt=o("p"),o1=a("Abstract base class for all beam scorers that are used for "),Aa=o("a"),n1=a("beam_search()"),s1=a(` and
`),Wa=o("a"),a1=a("beam_sample()"),i1=a("."),c1=c(),Na=o("div"),f(bn.$$.fragment),l1=c(),Va=o("div"),f(vn.$$.fragment),xp=c(),P=o("div"),f($n.$$.fragment),d1=c(),Ma=o("p"),Ga=o("a"),p1=a("BeamScorer"),m1=a(" implementing standard beam search decoding."),f1=c(),Tn=o("p"),g1=a("Adapted in part from "),yn=o("a"),h1=a(`Facebook\u2019s XLM beam search
code`),u1=a("."),_1=c(),ja=o("p"),b1=a("Reference for the diverse beam search algorithm and implementation "),kn=o("a"),v1=a(`Ashwin Kalyan\u2019s DBS
implementation`),$1=c(),Ha=o("div"),f(xn.$$.fragment),T1=c(),Ra=o("div"),f(wn.$$.fragment),wp=c(),N=o("div"),f(Ln.$$.fragment),y1=c(),Ka=o("p"),Ua=o("a"),k1=a("BeamScorer"),x1=a(" implementing constrained beam search decoding."),w1=c(),Ya=o("div"),f(En.$$.fragment),L1=c(),Xa=o("div"),f(Pn.$$.fragment),Lp=c(),mt=o("h2"),Ut=o("a"),Gl=o("span"),f(Fn.$$.fragment),E1=c(),jl=o("span"),P1=a("Utilities"),Ep=c(),ze=o("div"),f(Dn.$$.fragment),F1=c(),Hl=o("p"),D1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),S1=c(),Ja=o("p"),z1=a("From: "),Sn=o("a"),O1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Pp=c(),Oe=o("div"),f(zn.$$.fragment),q1=c(),Rl=o("p"),B1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),I1=c(),Qa=o("p"),C1=a("From: "),On=o("a"),A1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=P4('[data-svelte="svelte-1phssyn"]',document.head);w=n(p,"META",{name:!0,content:!0}),p.forEach(r),Ge=l(e),k=n(e,"H1",{class:!0});var qn=s(k);Be=n(qn,"A",{id:!0,class:!0,href:!0});var g$=s(Be);ji=n(g$,"SPAN",{});var h$=s(ji);g(tr.$$.fragment,h$),h$.forEach(r),g$.forEach(r),ym=l(qn),Hi=n(qn,"SPAN",{});var u$=s(Hi);km=i(u$,"Utilities for Generation"),u$.forEach(r),qn.forEach(r),Zl=l(e),y=n(e,"P",{});var D=s(y);xm=i(D,"This page lists all the utility functions used by "),In=n(D,"A",{href:!0});var _$=s(In);wm=i(_$,"generate()"),_$.forEach(r),Lm=i(D,`,
`),Cn=n(D,"A",{href:!0});var b$=s(Cn);Em=i(b$,"greedy_search()"),b$.forEach(r),Pm=i(D,`,
`),An=n(D,"A",{href:!0});var v$=s(An);Fm=i(v$,"sample()"),v$.forEach(r),Dm=i(D,`,
`),Wn=n(D,"A",{href:!0});var $$=s(Wn);Sm=i($$,"beam_search()"),$$.forEach(r),zm=i(D,`,
`),Nn=n(D,"A",{href:!0});var T$=s(Nn);Om=i(T$,"beam_sample()"),T$.forEach(r),qm=i(D,`,
`),Vn=n(D,"A",{href:!0});var y$=s(Vn);Bm=i(y$,"group_beam_search()"),y$.forEach(r),Im=i(D,`, and
`),Mn=n(D,"A",{href:!0});var k$=s(Mn);Cm=i(k$,"constrained_beam_search()"),k$.forEach(r),Am=i(D,"."),D.forEach(r),ed=l(e),Gn=n(e,"P",{});var x$=s(Gn);Wm=i(x$,"Most of those are only useful if you are studying the code of the generate methods in the library."),x$.forEach(r),td=l(e),je=n(e,"H2",{class:!0});var Dp=s(je);gt=n(Dp,"A",{id:!0,class:!0,href:!0});var w$=s(gt);Ri=n(w$,"SPAN",{});var L$=s(Ri);g(rr.$$.fragment,L$),L$.forEach(r),w$.forEach(r),Nm=l(Dp),Ki=n(Dp,"SPAN",{});var E$=s(Ki);Vm=i(E$,"Generate Outputs"),E$.forEach(r),Dp.forEach(r),rd=l(e),V=n(e,"P",{});var Yt=s(V);Mm=i(Yt,"The output of "),jn=n(Yt,"A",{href:!0});var P$=s(jn);Gm=i(P$,"generate()"),P$.forEach(r),jm=i(Yt,` is an instance of a subclass of
`),Hn=n(Yt,"A",{href:!0});var F$=s(Hn);Hm=i(F$,"ModelOutput"),F$.forEach(r),Rm=i(Yt,`. This output is a data structure containing all the information returned
by `),Rn=n(Yt,"A",{href:!0});var D$=s(Rn);Km=i(D$,"generate()"),D$.forEach(r),Um=i(Yt,", but that can also be used as tuple or dictionary."),Yt.forEach(r),od=l(e),Kn=n(e,"P",{});var S$=s(Kn);Ym=i(S$,"Here\u2019s an example:"),S$.forEach(r),nd=l(e),g(or.$$.fragment,e),sd=l(e),Ie=n(e,"P",{});var Za=s(Ie);Xm=i(Za,"The "),Ui=n(Za,"CODE",{});var z$=s(Ui);Jm=i(z$,"generation_output"),z$.forEach(r),Qm=i(Za," object is a "),Un=n(Za,"A",{href:!0});var O$=s(Un);Zm=i(O$,"GreedySearchDecoderOnlyOutput"),O$.forEach(r),ef=i(Za,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Za.forEach(r),ad=l(e),M=n(e,"UL",{});var Xt=s(M);Yn=n(Xt,"LI",{});var W1=s(Yn);Yi=n(W1,"CODE",{});var q$=s(Yi);tf=i(q$,"sequences"),q$.forEach(r),rf=i(W1,": the generated sequences of tokens"),W1.forEach(r),of=l(Xt),Xn=n(Xt,"LI",{});var N1=s(Xn);Xi=n(N1,"CODE",{});var B$=s(Xi);nf=i(B$,"scores"),B$.forEach(r),sf=i(N1," (optional): the prediction scores of the language modelling head, for each generation step"),N1.forEach(r),af=l(Xt),Jn=n(Xt,"LI",{});var V1=s(Jn);Ji=n(V1,"CODE",{});var I$=s(Ji);cf=i(I$,"hidden_states"),I$.forEach(r),lf=i(V1," (optional): the hidden states of the model, for each generation step"),V1.forEach(r),df=l(Xt),Qn=n(Xt,"LI",{});var M1=s(Qn);Qi=n(M1,"CODE",{});var C$=s(Qi);pf=i(C$,"attentions"),C$.forEach(r),mf=i(M1," (optional): the attention weights of the model, for each generation step"),M1.forEach(r),Xt.forEach(r),id=l(e),x=n(e,"P",{});var q=s(x);ff=i(q,"Here we have the "),Zi=n(q,"CODE",{});var A$=s(Zi);gf=i(A$,"scores"),A$.forEach(r),hf=i(q," since we passed along "),ec=n(q,"CODE",{});var W$=s(ec);uf=i(W$,"output_scores=True"),W$.forEach(r),_f=i(q,", but we don\u2019t have "),tc=n(q,"CODE",{});var N$=s(tc);bf=i(N$,"hidden_states"),N$.forEach(r),vf=i(q,` and
`),rc=n(q,"CODE",{});var V$=s(rc);$f=i(V$,"attentions"),V$.forEach(r),Tf=i(q," because we didn\u2019t pass "),oc=n(q,"CODE",{});var M$=s(oc);yf=i(M$,"output_hidden_states=True"),M$.forEach(r),kf=i(q," or "),nc=n(q,"CODE",{});var G$=s(nc);xf=i(G$,"output_attentions=True"),G$.forEach(r),wf=i(q,"."),q.forEach(r),cd=l(e),S=n(e,"P",{});var We=s(S);Lf=i(We,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),sc=n(We,"CODE",{});var j$=s(sc);Ef=i(j$,"None"),j$.forEach(r),Pf=i(We,". Here for instance "),ac=n(We,"CODE",{});var H$=s(ac);Ff=i(H$,"generation_output.scores"),H$.forEach(r),Df=i(We,` are all the generated prediction scores of the
language modeling head, and `),ic=n(We,"CODE",{});var R$=s(ic);Sf=i(R$,"generation_output.attentions"),R$.forEach(r),zf=i(We," is "),cc=n(We,"CODE",{});var K$=s(cc);Of=i(K$,"None"),K$.forEach(r),qf=i(We,"."),We.forEach(r),ld=l(e),z=n(e,"P",{});var Ne=s(z);Bf=i(Ne,"When using our "),lc=n(Ne,"CODE",{});var U$=s(lc);If=i(U$,"generation_output"),U$.forEach(r),Cf=i(Ne," object as a tuple, it only keeps the attributes that don\u2019t have "),dc=n(Ne,"CODE",{});var Y$=s(dc);Af=i(Y$,"None"),Y$.forEach(r),Wf=i(Ne,` values.
Here, for instance, it has two elements, `),pc=n(Ne,"CODE",{});var X$=s(pc);Nf=i(X$,"loss"),X$.forEach(r),Vf=i(Ne," then "),mc=n(Ne,"CODE",{});var J$=s(mc);Mf=i(J$,"logits"),J$.forEach(r),Gf=i(Ne,", so"),Ne.forEach(r),dd=l(e),g(nr.$$.fragment,e),pd=l(e),ht=n(e,"P",{});var Sp=s(ht);jf=i(Sp,"will return the tuple "),fc=n(Sp,"CODE",{});var Q$=s(fc);Hf=i(Q$,"(generation_output.sequences, generation_output.scores)"),Q$.forEach(r),Rf=i(Sp," for instance."),Sp.forEach(r),md=l(e),O=n(e,"P",{});var Ve=s(O);Kf=i(Ve,"When using our "),gc=n(Ve,"CODE",{});var Z$=s(gc);Uf=i(Z$,"generation_output"),Z$.forEach(r),Yf=i(Ve," object as a dictionary, it only keeps the attributes that don\u2019t have "),hc=n(Ve,"CODE",{});var e0=s(hc);Xf=i(e0,"None"),e0.forEach(r),Jf=i(Ve,`
values. Here, for instance, it has two keys that are `),uc=n(Ve,"CODE",{});var t0=s(uc);Qf=i(t0,"sequences"),t0.forEach(r),Zf=i(Ve," and "),_c=n(Ve,"CODE",{});var r0=s(_c);eg=i(r0,"scores"),r0.forEach(r),tg=i(Ve,"."),Ve.forEach(r),fd=l(e),Zn=n(e,"P",{});var o0=s(Zn);rg=i(o0,"We document here all output types."),o0.forEach(r),gd=l(e),He=n(e,"H3",{class:!0});var zp=s(He);ut=n(zp,"A",{id:!0,class:!0,href:!0});var n0=s(ut);bc=n(n0,"SPAN",{});var s0=s(bc);g(sr.$$.fragment,s0),s0.forEach(r),n0.forEach(r),og=l(zp),vc=n(zp,"SPAN",{});var a0=s(vc);ng=i(a0,"GreedySearchOutput"),a0.forEach(r),zp.forEach(r),hd=l(e),Re=n(e,"DIV",{class:!0});var Op=s(Re);g(ar.$$.fragment,Op),sg=l(Op),$c=n(Op,"P",{});var i0=s($c);ag=i(i0,"Base class for outputs of decoder-only generation models using greedy search."),i0.forEach(r),Op.forEach(r),ud=l(e),Ke=n(e,"DIV",{class:!0});var qp=s(Ke);g(ir.$$.fragment,qp),ig=l(qp),Tc=n(qp,"P",{});var c0=s(Tc);cg=i(c0,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),c0.forEach(r),qp.forEach(r),_d=l(e),R=n(e,"DIV",{class:!0});var ei=s(R);g(cr.$$.fragment,ei),lg=l(ei),yc=n(ei,"P",{});var l0=s(yc);dg=i(l0,"Flax Base class for outputs of decoder-only generation models using greedy search."),l0.forEach(r),pg=l(ei),_t=n(ei,"DIV",{class:!0});var Bp=s(_t);g(lr.$$.fragment,Bp),mg=l(Bp),kc=n(Bp,"P",{});var d0=s(kc);fg=i(d0,"\u201CReturns a new object replacing the specified fields with new values."),d0.forEach(r),Bp.forEach(r),ei.forEach(r),bd=l(e),Ue=n(e,"H3",{class:!0});var Ip=s(Ue);bt=n(Ip,"A",{id:!0,class:!0,href:!0});var p0=s(bt);xc=n(p0,"SPAN",{});var m0=s(xc);g(dr.$$.fragment,m0),m0.forEach(r),p0.forEach(r),gg=l(Ip),wc=n(Ip,"SPAN",{});var f0=s(wc);hg=i(f0,"SampleOutput"),f0.forEach(r),Ip.forEach(r),vd=l(e),Ye=n(e,"DIV",{class:!0});var Cp=s(Ye);g(pr.$$.fragment,Cp),ug=l(Cp),Lc=n(Cp,"P",{});var g0=s(Lc);_g=i(g0,"Base class for outputs of decoder-only generation models using sampling."),g0.forEach(r),Cp.forEach(r),$d=l(e),Xe=n(e,"DIV",{class:!0});var Ap=s(Xe);g(mr.$$.fragment,Ap),bg=l(Ap),Ec=n(Ap,"P",{});var h0=s(Ec);vg=i(h0,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),h0.forEach(r),Ap.forEach(r),Td=l(e),K=n(e,"DIV",{class:!0});var ti=s(K);g(fr.$$.fragment,ti),$g=l(ti),Pc=n(ti,"P",{});var u0=s(Pc);Tg=i(u0,"Flax Base class for outputs of decoder-only generation models using sampling."),u0.forEach(r),yg=l(ti),vt=n(ti,"DIV",{class:!0});var Wp=s(vt);g(gr.$$.fragment,Wp),kg=l(Wp),Fc=n(Wp,"P",{});var _0=s(Fc);xg=i(_0,"\u201CReturns a new object replacing the specified fields with new values."),_0.forEach(r),Wp.forEach(r),ti.forEach(r),yd=l(e),Je=n(e,"H3",{class:!0});var Np=s(Je);$t=n(Np,"A",{id:!0,class:!0,href:!0});var b0=s($t);Dc=n(b0,"SPAN",{});var v0=s(Dc);g(hr.$$.fragment,v0),v0.forEach(r),b0.forEach(r),wg=l(Np),Sc=n(Np,"SPAN",{});var $0=s(Sc);Lg=i($0,"BeamSearchOutput"),$0.forEach(r),Np.forEach(r),kd=l(e),Qe=n(e,"DIV",{class:!0});var Vp=s(Qe);g(ur.$$.fragment,Vp),Eg=l(Vp),zc=n(Vp,"P",{});var T0=s(zc);Pg=i(T0,"Base class for outputs of decoder-only generation models using beam search."),T0.forEach(r),Vp.forEach(r),xd=l(e),Ze=n(e,"DIV",{class:!0});var Mp=s(Ze);g(_r.$$.fragment,Mp),Fg=l(Mp),Oc=n(Mp,"P",{});var y0=s(Oc);Dg=i(y0,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),y0.forEach(r),Mp.forEach(r),wd=l(e),et=n(e,"H3",{class:!0});var Gp=s(et);Tt=n(Gp,"A",{id:!0,class:!0,href:!0});var k0=s(Tt);qc=n(k0,"SPAN",{});var x0=s(qc);g(br.$$.fragment,x0),x0.forEach(r),k0.forEach(r),Sg=l(Gp),Bc=n(Gp,"SPAN",{});var w0=s(Bc);zg=i(w0,"BeamSampleOutput"),w0.forEach(r),Gp.forEach(r),Ld=l(e),tt=n(e,"DIV",{class:!0});var jp=s(tt);g(vr.$$.fragment,jp),Og=l(jp),Ic=n(jp,"P",{});var L0=s(Ic);qg=i(L0,"Base class for outputs of decoder-only generation models using beam sample."),L0.forEach(r),jp.forEach(r),Ed=l(e),rt=n(e,"DIV",{class:!0});var Hp=s(rt);g($r.$$.fragment,Hp),Bg=l(Hp),Cc=n(Hp,"P",{});var E0=s(Cc);Ig=i(E0,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),E0.forEach(r),Hp.forEach(r),Pd=l(e),ot=n(e,"H2",{class:!0});var Rp=s(ot);yt=n(Rp,"A",{id:!0,class:!0,href:!0});var P0=s(yt);Ac=n(P0,"SPAN",{});var F0=s(Ac);g(Tr.$$.fragment,F0),F0.forEach(r),P0.forEach(r),Cg=l(Rp),Wc=n(Rp,"SPAN",{});var D0=s(Wc);Ag=i(D0,"LogitsProcessor"),D0.forEach(r),Rp.forEach(r),Fd=l(e),kt=n(e,"P",{});var Kp=s(kt);Wg=i(Kp,"A "),es=n(Kp,"A",{href:!0});var S0=s(es);Ng=i(S0,"LogitsProcessor"),S0.forEach(r),Vg=i(Kp,` can be used to modify the prediction scores of a language model head for
generation.`),Kp.forEach(r),Dd=l(e),U=n(e,"DIV",{class:!0});var ri=s(U);g(yr.$$.fragment,ri),Mg=l(ri),Nc=n(ri,"P",{});var z0=s(Nc);Gg=i(z0,"Abstract base class for all logit processors that can be applied during generation."),z0.forEach(r),jg=l(ri),xt=n(ri,"DIV",{class:!0});var Up=s(xt);g(kr.$$.fragment,Up),Hg=l(Up),Vc=n(Up,"P",{});var O0=s(Vc);Rg=i(O0,"Torch method for processing logits."),O0.forEach(r),Up.forEach(r),ri.forEach(r),Sd=l(e),Y=n(e,"DIV",{class:!0});var oi=s(Y);g(xr.$$.fragment,oi),Kg=l(oi),L=n(oi,"P",{});var B=s(L);Ug=i(B,"This class can be used to create a list of "),ts=n(B,"A",{href:!0});var q0=s(ts);Yg=i(q0,"LogitsProcessor"),q0.forEach(r),Xg=i(B," or "),rs=n(B,"A",{href:!0});var B0=s(rs);Jg=i(B0,"LogitsWarper"),B0.forEach(r),Qg=i(B,` to subsequently process a
`),Mc=n(B,"CODE",{});var I0=s(Mc);Zg=i(I0,"scores"),I0.forEach(r),eh=i(B," input tensor. This class inherits from list and adds a specific "),Gc=n(B,"EM",{});var C0=s(Gc);jc=n(C0,"STRONG",{});var A0=s(jc);th=i(A0,"call"),A0.forEach(r),C0.forEach(r),rh=i(B,` method to apply each
`),os=n(B,"A",{href:!0});var W0=s(os);oh=i(W0,"LogitsProcessor"),W0.forEach(r),nh=i(B," or "),ns=n(B,"A",{href:!0});var N0=s(ns);sh=i(N0,"LogitsWarper"),N0.forEach(r),ah=i(B," to the inputs."),B.forEach(r),ih=l(oi),ss=n(oi,"DIV",{class:!0});var V0=s(ss);g(wr.$$.fragment,V0),V0.forEach(r),oi.forEach(r),zd=l(e),X=n(e,"DIV",{class:!0});var ni=s(X);g(Lr.$$.fragment,ni),ch=l(ni),Hc=n(ni,"P",{});var M0=s(Hc);lh=i(M0,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),M0.forEach(r),dh=l(ni),wt=n(ni,"DIV",{class:!0});var Yp=s(wt);g(Er.$$.fragment,Yp),ph=l(Yp),Rc=n(Yp,"P",{});var G0=s(Rc);mh=i(G0,"Torch method for warping logits."),G0.forEach(r),Yp.forEach(r),ni.forEach(r),Od=l(e),J=n(e,"DIV",{class:!0});var si=s(J);g(Pr.$$.fragment,si),fh=l(si),as=n(si,"P",{});var G1=s(as);is=n(G1,"A",{href:!0});var j0=s(is);gh=i(j0,"LogitsProcessor"),j0.forEach(r),hh=i(G1," enforcing a min-length by setting EOS probability to 0."),G1.forEach(r),uh=l(si),cs=n(si,"DIV",{class:!0});var H0=s(cs);g(Fr.$$.fragment,H0),H0.forEach(r),si.forEach(r),qd=l(e),Q=n(e,"DIV",{class:!0});var ai=s(Q);g(Dr.$$.fragment,ai),_h=l(ai),ls=n(ai,"P",{});var j1=s(ls);ds=n(j1,"A",{href:!0});var R0=s(ds);bh=i(R0,"LogitsWarper"),R0.forEach(r),vh=i(j1," for temperature (exponential scaling output probability distribution)."),j1.forEach(r),$h=l(ai),ps=n(ai,"DIV",{class:!0});var K0=s(ps);g(Sr.$$.fragment,K0),K0.forEach(r),ai.forEach(r),Bd=l(e),Z=n(e,"DIV",{class:!0});var ii=s(Z);g(zr.$$.fragment,ii),Th=l(ii),ms=n(ii,"P",{});var H1=s(ms);fs=n(H1,"A",{href:!0});var U0=s(fs);yh=i(U0,"LogitsProcessor"),U0.forEach(r),kh=i(H1," enforcing an exponential penalty on repeated sequences."),H1.forEach(r),xh=l(ii),gs=n(ii,"DIV",{class:!0});var Y0=s(gs);g(Or.$$.fragment,Y0),Y0.forEach(r),ii.forEach(r),Id=l(e),ee=n(e,"DIV",{class:!0});var ci=s(ee);g(qr.$$.fragment,ci),wh=l(ci),hs=n(ci,"P",{});var R1=s(hs);us=n(R1,"A",{href:!0});var X0=s(us);Lh=i(X0,"LogitsWarper"),X0.forEach(r),Eh=i(R1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),R1.forEach(r),Ph=l(ci),_s=n(ci,"DIV",{class:!0});var J0=s(_s);g(Br.$$.fragment,J0),J0.forEach(r),ci.forEach(r),Cd=l(e),te=n(e,"DIV",{class:!0});var li=s(te);g(Ir.$$.fragment,li),Fh=l(li),bs=n(li,"P",{});var K1=s(bs);vs=n(K1,"A",{href:!0});var Q0=s(vs);Dh=i(Q0,"LogitsWarper"),Q0.forEach(r),Sh=i(K1," that performs top-k, i.e. restricting to the k highest probability elements."),K1.forEach(r),zh=l(li),$s=n(li,"DIV",{class:!0});var Z0=s($s);g(Cr.$$.fragment,Z0),Z0.forEach(r),li.forEach(r),Ad=l(e),re=n(e,"DIV",{class:!0});var di=s(re);g(Ar.$$.fragment,di),Oh=l(di),Lt=n(di,"P",{});var Kl=s(Lt);Ts=n(Kl,"A",{href:!0});var e2=s(Ts);qh=i(e2,"LogitsProcessor"),e2.forEach(r),Bh=i(Kl,` that enforces no repetition of n-grams. See
`),Wr=n(Kl,"A",{href:!0,rel:!0});var t2=s(Wr);Ih=i(t2,"Fairseq"),t2.forEach(r),Ch=i(Kl,"."),Kl.forEach(r),Ah=l(di),ys=n(di,"DIV",{class:!0});var r2=s(ys);g(Nr.$$.fragment,r2),r2.forEach(r),di.forEach(r),Wd=l(e),oe=n(e,"DIV",{class:!0});var pi=s(oe);g(Vr.$$.fragment,pi),Wh=l(pi),ks=n(pi,"P",{});var U1=s(ks);xs=n(U1,"A",{href:!0});var o2=s(xs);Nh=i(o2,"LogitsProcessor"),o2.forEach(r),Vh=i(U1," that enforces that specified sequences will never be sampled."),U1.forEach(r),Mh=l(pi),ws=n(pi,"DIV",{class:!0});var n2=s(ws);g(Mr.$$.fragment,n2),n2.forEach(r),pi.forEach(r),Nd=l(e),ne=n(e,"DIV",{class:!0});var mi=s(ne);g(Gr.$$.fragment,mi),Gh=l(mi),Et=n(mi,"P",{});var Ul=s(Et);Ls=n(Ul,"A",{href:!0});var s2=s(Ls);jh=i(s2,"LogitsProcessor"),s2.forEach(r),Hh=i(Ul,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),jr=n(Ul,"A",{href:!0,rel:!0});var a2=s(jr);Rh=i(a2,"Autoregressive Entity Retrieval"),a2.forEach(r),Kh=i(Ul," for more information."),Ul.forEach(r),Uh=l(mi),Es=n(mi,"DIV",{class:!0});var i2=s(Es);g(Hr.$$.fragment,i2),i2.forEach(r),mi.forEach(r),Vd=l(e),se=n(e,"DIV",{class:!0});var fi=s(se);g(Rr.$$.fragment,fi),Yh=l(fi),Ce=n(fi,"P",{});var Bn=s(Ce);Ps=n(Bn,"A",{href:!0});var c2=s(Ps);Xh=i(c2,"LogitsProcessor"),c2.forEach(r),Jh=i(Bn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Fs=n(Bn,"A",{href:!0});var l2=s(Fs);Qh=i(l2,"PreTrainedModel.group_beam_search()"),l2.forEach(r),Zh=i(Bn,". See "),Kr=n(Bn,"A",{href:!0,rel:!0});var d2=s(Kr);eu=i(d2,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),d2.forEach(r),tu=i(Bn," for more details."),Bn.forEach(r),ru=l(fi),Ds=n(fi,"DIV",{class:!0});var p2=s(Ds);g(Ur.$$.fragment,p2),p2.forEach(r),fi.forEach(r),Md=l(e),ae=n(e,"DIV",{class:!0});var gi=s(ae);g(Yr.$$.fragment,gi),ou=l(gi),Ss=n(gi,"P",{});var Y1=s(Ss);zs=n(Y1,"A",{href:!0});var m2=s(zs);nu=i(m2,"LogitsProcessor"),m2.forEach(r),su=i(Y1," that enforces the specified token as the first generated token."),Y1.forEach(r),au=l(gi),Os=n(gi,"DIV",{class:!0});var f2=s(Os);g(Xr.$$.fragment,f2),f2.forEach(r),gi.forEach(r),Gd=l(e),ie=n(e,"DIV",{class:!0});var hi=s(ie);g(Jr.$$.fragment,hi),iu=l(hi),Pt=n(hi,"P",{});var Yl=s(Pt);qs=n(Yl,"A",{href:!0});var g2=s(qs);cu=i(g2,"LogitsProcessor"),g2.forEach(r),lu=i(Yl," that enforces the specified token as the last generated token when "),Kc=n(Yl,"CODE",{});var h2=s(Kc);du=i(h2,"max_length"),h2.forEach(r),pu=i(Yl," is reached."),Yl.forEach(r),mu=l(hi),Bs=n(hi,"DIV",{class:!0});var u2=s(Bs);g(Qr.$$.fragment,u2),u2.forEach(r),hi.forEach(r),jd=l(e),ce=n(e,"DIV",{class:!0});var ui=s(ce);g(Zr.$$.fragment,ui),fu=l(ui),G=n(ui,"P",{});var ft=s(G);Is=n(ft,"A",{href:!0});var _2=s(Is);gu=i(_2,"LogitsProcessor"),_2.forEach(r),hu=i(ft," that removes all "),Uc=n(ft,"CODE",{});var b2=s(Uc);uu=i(b2,"nan"),b2.forEach(r),_u=i(ft," and "),Yc=n(ft,"CODE",{});var v2=s(Yc);bu=i(v2,"inf"),v2.forEach(r),vu=i(ft,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Xc=n(ft,"CODE",{});var $2=s(Xc);$u=i($2,"max_length"),$2.forEach(r),Tu=i(ft,` is
reached.`),ft.forEach(r),yu=l(ui),Cs=n(ui,"DIV",{class:!0});var T2=s(Cs);g(eo.$$.fragment,T2),T2.forEach(r),ui.forEach(r),Hd=l(e),le=n(e,"DIV",{class:!0});var _i=s(le);g(to.$$.fragment,_i),ku=l(_i),Jc=n(_i,"P",{});var y2=s(Jc);xu=i(y2,"Abstract base class for all logit processors that can be applied during generation."),y2.forEach(r),wu=l(_i),Ft=n(_i,"DIV",{class:!0});var Xp=s(Ft);g(ro.$$.fragment,Xp),Lu=l(Xp),Qc=n(Xp,"P",{});var k2=s(Qc);Eu=i(k2,"TF method for processing logits."),k2.forEach(r),Xp.forEach(r),_i.forEach(r),Rd=l(e),de=n(e,"DIV",{class:!0});var bi=s(de);g(oo.$$.fragment,bi),Pu=l(bi),C=n(bi,"P",{});var Me=s(C);Fu=i(Me,"This class can be used to create a list of "),As=n(Me,"A",{href:!0});var x2=s(As);Du=i(x2,"TFLogitsProcessor"),x2.forEach(r),Su=i(Me," to subsequently process a "),Zc=n(Me,"CODE",{});var w2=s(Zc);zu=i(w2,"scores"),w2.forEach(r),Ou=i(Me,` input tensor.
This class inherits from list and adds a specific `),el=n(Me,"EM",{});var L2=s(el);tl=n(L2,"STRONG",{});var E2=s(tl);qu=i(E2,"call"),E2.forEach(r),L2.forEach(r),Bu=i(Me," method to apply each "),Ws=n(Me,"A",{href:!0});var P2=s(Ws);Iu=i(P2,"TFLogitsProcessor"),P2.forEach(r),Cu=i(Me,` to the
inputs.`),Me.forEach(r),Au=l(bi),Ns=n(bi,"DIV",{class:!0});var F2=s(Ns);g(no.$$.fragment,F2),F2.forEach(r),bi.forEach(r),Kd=l(e),pe=n(e,"DIV",{class:!0});var vi=s(pe);g(so.$$.fragment,vi),Wu=l(vi),rl=n(vi,"P",{});var D2=s(rl);Nu=i(D2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),D2.forEach(r),Vu=l(vi),Dt=n(vi,"DIV",{class:!0});var Jp=s(Dt);g(ao.$$.fragment,Jp),Mu=l(Jp),ol=n(Jp,"P",{});var S2=s(ol);Gu=i(S2,"TF method for warping logits."),S2.forEach(r),Jp.forEach(r),vi.forEach(r),Ud=l(e),me=n(e,"DIV",{class:!0});var $i=s(me);g(io.$$.fragment,$i),ju=l($i),Vs=n($i,"P",{});var X1=s(Vs);Ms=n(X1,"A",{href:!0});var z2=s(Ms);Hu=i(z2,"TFLogitsWarper"),z2.forEach(r),Ru=i(X1," for temperature (exponential scaling output probability distribution)."),X1.forEach(r),Ku=l($i),Gs=n($i,"DIV",{class:!0});var O2=s(Gs);g(co.$$.fragment,O2),O2.forEach(r),$i.forEach(r),Yd=l(e),fe=n(e,"DIV",{class:!0});var Ti=s(fe);g(lo.$$.fragment,Ti),Uu=l(Ti),js=n(Ti,"P",{});var J1=s(js);Hs=n(J1,"A",{href:!0});var q2=s(Hs);Yu=i(q2,"TFLogitsWarper"),q2.forEach(r),Xu=i(J1," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),J1.forEach(r),Ju=l(Ti),Rs=n(Ti,"DIV",{class:!0});var B2=s(Rs);g(po.$$.fragment,B2),B2.forEach(r),Ti.forEach(r),Xd=l(e),ge=n(e,"DIV",{class:!0});var yi=s(ge);g(mo.$$.fragment,yi),Qu=l(yi),Ks=n(yi,"P",{});var Q1=s(Ks);Us=n(Q1,"A",{href:!0});var I2=s(Us);Zu=i(I2,"TFLogitsWarper"),I2.forEach(r),e_=i(Q1," that performs top-k, i.e. restricting to the k highest probability elements."),Q1.forEach(r),t_=l(yi),Ys=n(yi,"DIV",{class:!0});var C2=s(Ys);g(fo.$$.fragment,C2),C2.forEach(r),yi.forEach(r),Jd=l(e),he=n(e,"DIV",{class:!0});var ki=s(he);g(go.$$.fragment,ki),r_=l(ki),Xs=n(ki,"P",{});var Z1=s(Xs);Js=n(Z1,"A",{href:!0});var A2=s(Js);o_=i(A2,"TFLogitsProcessor"),A2.forEach(r),n_=i(Z1," enforcing a min-length by setting EOS probability to 0."),Z1.forEach(r),s_=l(ki),Qs=n(ki,"DIV",{class:!0});var W2=s(Qs);g(ho.$$.fragment,W2),W2.forEach(r),ki.forEach(r),Qd=l(e),ue=n(e,"DIV",{class:!0});var xi=s(ue);g(uo.$$.fragment,xi),a_=l(xi),Zs=n(xi,"P",{});var e$=s(Zs);ea=n(e$,"A",{href:!0});var N2=s(ea);i_=i(N2,"TFLogitsProcessor"),N2.forEach(r),c_=i(e$," that enforces that specified sequences will never be sampled."),e$.forEach(r),l_=l(xi),ta=n(xi,"DIV",{class:!0});var V2=s(ta);g(_o.$$.fragment,V2),V2.forEach(r),xi.forEach(r),Zd=l(e),_e=n(e,"DIV",{class:!0});var wi=s(_e);g(bo.$$.fragment,wi),d_=l(wi),St=n(wi,"P",{});var Xl=s(St);ra=n(Xl,"A",{href:!0});var M2=s(ra);p_=i(M2,"TFLogitsProcessor"),M2.forEach(r),m_=i(Xl,` that enforces no repetition of n-grams. See
`),vo=n(Xl,"A",{href:!0,rel:!0});var G2=s(vo);f_=i(G2,"Fairseq"),G2.forEach(r),g_=i(Xl,"."),Xl.forEach(r),h_=l(wi),oa=n(wi,"DIV",{class:!0});var j2=s(oa);g($o.$$.fragment,j2),j2.forEach(r),wi.forEach(r),ep=l(e),be=n(e,"DIV",{class:!0});var Li=s(be);g(To.$$.fragment,Li),u_=l(Li),na=n(Li,"P",{});var t$=s(na);sa=n(t$,"A",{href:!0});var H2=s(sa);__=i(H2,"TFLogitsProcessor"),H2.forEach(r),b_=i(t$," enforcing an exponential penalty on repeated sequences."),t$.forEach(r),v_=l(Li),aa=n(Li,"DIV",{class:!0});var R2=s(aa);g(yo.$$.fragment,R2),R2.forEach(r),Li.forEach(r),tp=l(e),ve=n(e,"DIV",{class:!0});var Ei=s(ve);g(ko.$$.fragment,Ei),$_=l(Ei),nl=n(Ei,"P",{});var K2=s(nl);T_=i(K2,"Abstract base class for all logit processors that can be applied during generation."),K2.forEach(r),y_=l(Ei),zt=n(Ei,"DIV",{class:!0});var Qp=s(zt);g(xo.$$.fragment,Qp),k_=l(Qp),sl=n(Qp,"P",{});var U2=s(sl);x_=i(U2,"Flax method for processing logits."),U2.forEach(r),Qp.forEach(r),Ei.forEach(r),rp=l(e),$e=n(e,"DIV",{class:!0});var Pi=s($e);g(wo.$$.fragment,Pi),w_=l(Pi),E=n(Pi,"P",{});var I=s(E);L_=i(I,"This class can be used to create a list of "),ia=n(I,"A",{href:!0});var Y2=s(ia);E_=i(Y2,"FlaxLogitsProcessor"),Y2.forEach(r),P_=i(I," or "),ca=n(I,"A",{href:!0});var X2=s(ca);F_=i(X2,"FlaxLogitsWarper"),X2.forEach(r),D_=i(I,` to subsequently process
a `),al=n(I,"CODE",{});var J2=s(al);S_=i(J2,"scores"),J2.forEach(r),z_=i(I," input tensor. This class inherits from list and adds a specific "),il=n(I,"EM",{});var Q2=s(il);cl=n(Q2,"STRONG",{});var Z2=s(cl);O_=i(Z2,"call"),Z2.forEach(r),Q2.forEach(r),q_=i(I,` method to apply each
`),la=n(I,"A",{href:!0});var eT=s(la);B_=i(eT,"FlaxLogitsProcessor"),eT.forEach(r),I_=i(I," or "),da=n(I,"A",{href:!0});var tT=s(da);C_=i(tT,"FlaxLogitsWarper"),tT.forEach(r),A_=i(I," to the inputs."),I.forEach(r),W_=l(Pi),pa=n(Pi,"DIV",{class:!0});var rT=s(pa);g(Lo.$$.fragment,rT),rT.forEach(r),Pi.forEach(r),op=l(e),Te=n(e,"DIV",{class:!0});var Fi=s(Te);g(Eo.$$.fragment,Fi),N_=l(Fi),ll=n(Fi,"P",{});var oT=s(ll);V_=i(oT,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),oT.forEach(r),M_=l(Fi),Ot=n(Fi,"DIV",{class:!0});var Zp=s(Ot);g(Po.$$.fragment,Zp),G_=l(Zp),dl=n(Zp,"P",{});var nT=s(dl);j_=i(nT,"Flax method for warping logits."),nT.forEach(r),Zp.forEach(r),Fi.forEach(r),np=l(e),ye=n(e,"DIV",{class:!0});var Di=s(ye);g(Fo.$$.fragment,Di),H_=l(Di),ma=n(Di,"P",{});var r$=s(ma);fa=n(r$,"A",{href:!0});var sT=s(fa);R_=i(sT,"FlaxLogitsWarper"),sT.forEach(r),K_=i(r$," for temperature (exponential scaling output probability distribution)."),r$.forEach(r),U_=l(Di),ga=n(Di,"DIV",{class:!0});var aT=s(ga);g(Do.$$.fragment,aT),aT.forEach(r),Di.forEach(r),sp=l(e),ke=n(e,"DIV",{class:!0});var Si=s(ke);g(So.$$.fragment,Si),Y_=l(Si),ha=n(Si,"P",{});var o$=s(ha);ua=n(o$,"A",{href:!0});var iT=s(ua);X_=i(iT,"FlaxLogitsWarper"),iT.forEach(r),J_=i(o$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),o$.forEach(r),Q_=l(Si),_a=n(Si,"DIV",{class:!0});var cT=s(_a);g(zo.$$.fragment,cT),cT.forEach(r),Si.forEach(r),ap=l(e),xe=n(e,"DIV",{class:!0});var zi=s(xe);g(Oo.$$.fragment,zi),Z_=l(zi),ba=n(zi,"P",{});var n$=s(ba);va=n(n$,"A",{href:!0});var lT=s(va);eb=i(lT,"FlaxLogitsWarper"),lT.forEach(r),tb=i(n$," that performs top-k, i.e. restricting to the k highest probability elements."),n$.forEach(r),rb=l(zi),$a=n(zi,"DIV",{class:!0});var dT=s($a);g(qo.$$.fragment,dT),dT.forEach(r),zi.forEach(r),ip=l(e),we=n(e,"DIV",{class:!0});var Oi=s(we);g(Bo.$$.fragment,Oi),ob=l(Oi),Ta=n(Oi,"P",{});var s$=s(Ta);ya=n(s$,"A",{href:!0});var pT=s(ya);nb=i(pT,"FlaxLogitsProcessor"),pT.forEach(r),sb=i(s$," that enforces the specified token as the first generated token."),s$.forEach(r),ab=l(Oi),ka=n(Oi,"DIV",{class:!0});var mT=s(ka);g(Io.$$.fragment,mT),mT.forEach(r),Oi.forEach(r),cp=l(e),Le=n(e,"DIV",{class:!0});var qi=s(Le);g(Co.$$.fragment,qi),ib=l(qi),qt=n(qi,"P",{});var Jl=s(qt);xa=n(Jl,"A",{href:!0});var fT=s(xa);cb=i(fT,"FlaxLogitsProcessor"),fT.forEach(r),lb=i(Jl," that enforces the specified token as the last generated token when "),pl=n(Jl,"CODE",{});var gT=s(pl);db=i(gT,"max_length"),gT.forEach(r),pb=i(Jl," is reached."),Jl.forEach(r),mb=l(qi),wa=n(qi,"DIV",{class:!0});var hT=s(wa);g(Ao.$$.fragment,hT),hT.forEach(r),qi.forEach(r),lp=l(e),Ee=n(e,"DIV",{class:!0});var Bi=s(Ee);g(Wo.$$.fragment,Bi),fb=l(Bi),La=n(Bi,"P",{});var a$=s(La);Ea=n(a$,"A",{href:!0});var uT=s(Ea);gb=i(uT,"FlaxLogitsProcessor"),uT.forEach(r),hb=i(a$," enforcing a min-length by setting EOS probability to 0."),a$.forEach(r),ub=l(Bi),Pa=n(Bi,"DIV",{class:!0});var _T=s(Pa);g(No.$$.fragment,_T),_T.forEach(r),Bi.forEach(r),dp=l(e),nt=n(e,"H2",{class:!0});var em=s(nt);Bt=n(em,"A",{id:!0,class:!0,href:!0});var bT=s(Bt);ml=n(bT,"SPAN",{});var vT=s(ml);g(Vo.$$.fragment,vT),vT.forEach(r),bT.forEach(r),_b=l(em),fl=n(em,"SPAN",{});var $T=s(fl);bb=i($T,"StoppingCriteria"),$T.forEach(r),em.forEach(r),pp=l(e),It=n(e,"P",{});var tm=s(It);vb=i(tm,"A "),Fa=n(tm,"A",{href:!0});var TT=s(Fa);$b=i(TT,"StoppingCriteria"),TT.forEach(r),Tb=i(tm," can be used to change when to stop generation (other than EOS token)."),tm.forEach(r),mp=l(e),Pe=n(e,"DIV",{class:!0});var Ii=s(Pe);g(Mo.$$.fragment,Ii),yb=l(Ii),gl=n(Ii,"P",{});var yT=s(gl);kb=i(yT,"Abstract base class for all stopping criteria that can be applied during generation."),yT.forEach(r),xb=l(Ii),Da=n(Ii,"DIV",{class:!0});var kT=s(Da);g(Go.$$.fragment,kT),kT.forEach(r),Ii.forEach(r),fp=l(e),st=n(e,"DIV",{class:!0});var rm=s(st);g(jo.$$.fragment,rm),wb=l(rm),Sa=n(rm,"DIV",{class:!0});var xT=s(Sa);g(Ho.$$.fragment,xT),xT.forEach(r),rm.forEach(r),gp=l(e),Fe=n(e,"DIV",{class:!0});var Ci=s(Fe);g(Ro.$$.fragment,Ci),Lb=l(Ci),Ko=n(Ci,"P",{});var om=s(Ko);Eb=i(om,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),hl=n(om,"CODE",{});var wT=s(hl);Pb=i(wT,"max_length"),wT.forEach(r),Fb=i(om,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),om.forEach(r),Db=l(Ci),za=n(Ci,"DIV",{class:!0});var LT=s(za);g(Uo.$$.fragment,LT),LT.forEach(r),Ci.forEach(r),hp=l(e),De=n(e,"DIV",{class:!0});var Ai=s(De);g(Yo.$$.fragment,Ai),Sb=l(Ai),Xo=n(Ai,"P",{});var nm=s(Xo);zb=i(nm,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),ul=n(nm,"CODE",{});var ET=s(ul);Ob=i(ET,"initial_time"),ET.forEach(r),qb=i(nm,"."),nm.forEach(r),Bb=l(Ai),Oa=n(Ai,"DIV",{class:!0});var PT=s(Oa);g(Jo.$$.fragment,PT),PT.forEach(r),Ai.forEach(r),up=l(e),at=n(e,"H2",{class:!0});var sm=s(at);Ct=n(sm,"A",{id:!0,class:!0,href:!0});var FT=s(Ct);_l=n(FT,"SPAN",{});var DT=s(_l);g(Qo.$$.fragment,DT),DT.forEach(r),FT.forEach(r),Ib=l(sm),bl=n(sm,"SPAN",{});var ST=s(bl);Cb=i(ST,"Constraints"),ST.forEach(r),sm.forEach(r),_p=l(e),At=n(e,"P",{});var am=s(At);Ab=i(am,"A "),qa=n(am,"A",{href:!0});var zT=s(qa);Wb=i(zT,"Constraint"),zT.forEach(r),Nb=i(am," can be used to force the generation to include specific tokens or sequences in the output."),am.forEach(r),bp=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(Zo.$$.fragment,T),Vb=l(T),vl=n(T,"P",{});var OT=s(vl);Mb=i(OT,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),OT.forEach(r),Gb=l(T),$l=n(T,"P",{});var qT=s($l);jb=i(qT,"All classes that inherit Constraint must follow the requirement that"),qT.forEach(r),Hb=l(T),g(Wt.$$.fragment,T),Rb=l(T),Tl=n(T,"P",{});var BT=s(Tl);Kb=i(BT,"will always terminate (halt)."),BT.forEach(r),Ub=l(T),Nt=n(T,"DIV",{class:!0});var im=s(Nt);g(en.$$.fragment,im),Yb=l(im),yl=n(im,"P",{});var IT=s(yl);Xb=i(IT,"When called, returns the token that would take this constraint one step closer to being fulfilled."),IT.forEach(r),im.forEach(r),Jb=l(T),Vt=n(T,"DIV",{class:!0});var cm=s(Vt);g(tn.$$.fragment,cm),Qb=l(cm),kl=n(cm,"P",{});var CT=s(kl);Zb=i(CT,"Creates a new instance of this constraint."),CT.forEach(r),cm.forEach(r),ev=l(T),Mt=n(T,"DIV",{class:!0});var lm=s(Mt);g(rn.$$.fragment,lm),tv=l(lm),xl=n(lm,"P",{});var AT=s(xl);rv=i(AT,"Reads in a token and returns whether it creates progress."),AT.forEach(r),lm.forEach(r),ov=l(T),Gt=n(T,"DIV",{class:!0});var dm=s(Gt);g(on.$$.fragment,dm),nv=l(dm),nn=n(dm,"P",{});var pm=s(nn);sv=i(pm,"Returns the number of remaining steps of "),wl=n(pm,"CODE",{});var WT=s(wl);av=i(WT,"advance()"),WT.forEach(r),iv=i(pm," in order to complete this constraint."),pm.forEach(r),dm.forEach(r),cv=l(T),jt=n(T,"DIV",{class:!0});var mm=s(jt);g(sn.$$.fragment,mm),lv=l(mm),Ll=n(mm,"P",{});var NT=s(Ll);dv=i(NT,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),NT.forEach(r),mm.forEach(r),pv=l(T),Ht=n(T,"DIV",{class:!0});var fm=s(Ht);g(an.$$.fragment,fm),mv=l(fm),El=n(fm,"P",{});var VT=s(El);fv=i(VT,"Tests whether this constraint has been properly defined."),VT.forEach(r),fm.forEach(r),gv=l(T),Ae=n(T,"DIV",{class:!0});var Wi=s(Ae);g(cn.$$.fragment,Wi),hv=l(Wi),ln=n(Wi,"P",{});var gm=s(ln);uv=i(gm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Pl=n(gm,"CODE",{});var MT=s(Pl);_v=i(MT,"does_advance(self, token_id: int)"),MT.forEach(r),bv=i(gm,"."),gm.forEach(r),vv=l(Wi),Fl=n(Wi,"P",{});var GT=s(Fl);$v=i(GT,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),GT.forEach(r),Wi.forEach(r),T.forEach(r),vp=l(e),it=n(e,"DIV",{class:!0});var hm=s(it);g(dn.$$.fragment,hm),Tv=l(hm),Ba=n(hm,"P",{});var i$=s(Ba);Ia=n(i$,"A",{href:!0});var jT=s(Ia);yv=i(jT,"Constraint"),jT.forEach(r),kv=i(i$," enforcing that an ordered sequence of tokens is included in the output."),i$.forEach(r),hm.forEach(r),$p=l(e),ct=n(e,"DIV",{class:!0});var um=s(ct);g(pn.$$.fragment,um),xv=l(um),mn=n(um,"P",{});var _m=s(mn);wv=i(_m,"A special "),Ca=n(_m,"A",{href:!0});var HT=s(Ca);Lv=i(HT,"Constraint"),HT.forEach(r),Ev=i(_m," that is fulfilled by fulfilling just one of several constraints."),_m.forEach(r),um.forEach(r),Tp=l(e),A=n(e,"DIV",{class:!0});var Jt=s(A);g(fn.$$.fragment,Jt),Pv=l(Jt),Dl=n(Jt,"P",{});var RT=s(Dl);Fv=i(RT,"A class for beam scorers to track its progress through a list of constraints."),RT.forEach(r),Dv=l(Jt),F=n(Jt,"DIV",{class:!0});var j=s(F);g(gn.$$.fragment,j),Sv=l(j),Sl=n(j,"P",{});var KT=s(Sl);zv=i(KT,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),KT.forEach(r),Ov=l(j),lt=n(j,"P",{});var Ni=s(lt);qv=i(Ni,"Given constraints "),zl=n(Ni,"CODE",{});var UT=s(zl);Bv=i(UT,"c_i = {t_ij | j == # of tokens}"),UT.forEach(r),Iv=i(Ni,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ol=n(Ni,"CODE",{});var YT=s(Ol);Cv=i(YT,"c_i"),YT.forEach(r),Av=i(Ni,", we return:"),Ni.forEach(r),Wv=l(j),ql=n(j,"P",{});var XT=s(ql);Bl=n(XT,"CODE",{});var JT=s(Bl);Nv=i(JT,"[t_k1 for k in indices of unfulfilled constraints]"),JT.forEach(r),XT.forEach(r),Vv=l(j),Se=n(j,"P",{});var Qt=s(Se);Mv=i(Qt,`If we are in the middle of a constraint, then we return:
`),Il=n(Qt,"CODE",{});var QT=s(Il);Gv=i(QT,"[t_ij]"),QT.forEach(r),jv=i(Qt,", where "),Cl=n(Qt,"CODE",{});var ZT=s(Cl);Hv=i(ZT,"i"),ZT.forEach(r),Rv=i(Qt," is the index of the inprogress constraint, "),Al=n(Qt,"CODE",{});var e4=s(Al);Kv=i(e4,"j"),e4.forEach(r),Uv=i(Qt," is the next step for the constraint."),Qt.forEach(r),Yv=l(j),Wl=n(j,"P",{});var t4=s(Wl);Xv=i(t4,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),t4.forEach(r),j.forEach(r),Jv=l(Jt),Rt=n(Jt,"DIV",{class:!0});var bm=s(Rt);g(hn.$$.fragment,bm),Qv=l(bm),Nl=n(bm,"P",{});var r4=s(Nl);Zv=i(r4,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),r4.forEach(r),bm.forEach(r),Jt.forEach(r),yp=l(e),dt=n(e,"H2",{class:!0});var vm=s(dt);Kt=n(vm,"A",{id:!0,class:!0,href:!0});var o4=s(Kt);Vl=n(o4,"SPAN",{});var n4=s(Vl);g(un.$$.fragment,n4),n4.forEach(r),o4.forEach(r),e1=l(vm),Ml=n(vm,"SPAN",{});var s4=s(Ml);t1=i(s4,"BeamSearch"),s4.forEach(r),vm.forEach(r),kp=l(e),W=n(e,"DIV",{class:!0});var Zt=s(W);g(_n.$$.fragment,Zt),r1=l(Zt),pt=n(Zt,"P",{});var Vi=s(pt);o1=i(Vi,"Abstract base class for all beam scorers that are used for "),Aa=n(Vi,"A",{href:!0});var a4=s(Aa);n1=i(a4,"beam_search()"),a4.forEach(r),s1=i(Vi,` and
`),Wa=n(Vi,"A",{href:!0});var i4=s(Wa);a1=i(i4,"beam_sample()"),i4.forEach(r),i1=i(Vi,"."),Vi.forEach(r),c1=l(Zt),Na=n(Zt,"DIV",{class:!0});var c4=s(Na);g(bn.$$.fragment,c4),c4.forEach(r),l1=l(Zt),Va=n(Zt,"DIV",{class:!0});var l4=s(Va);g(vn.$$.fragment,l4),l4.forEach(r),Zt.forEach(r),xp=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g($n.$$.fragment,H),d1=l(H),Ma=n(H,"P",{});var c$=s(Ma);Ga=n(c$,"A",{href:!0});var d4=s(Ga);p1=i(d4,"BeamScorer"),d4.forEach(r),m1=i(c$," implementing standard beam search decoding."),c$.forEach(r),f1=l(H),Tn=n(H,"P",{});var $m=s(Tn);g1=i($m,"Adapted in part from "),yn=n($m,"A",{href:!0,rel:!0});var p4=s(yn);h1=i(p4,`Facebook\u2019s XLM beam search
code`),p4.forEach(r),u1=i($m,"."),$m.forEach(r),_1=l(H),ja=n(H,"P",{});var l$=s(ja);b1=i(l$,"Reference for the diverse beam search algorithm and implementation "),kn=n(l$,"A",{href:!0,rel:!0});var m4=s(kn);v1=i(m4,`Ashwin Kalyan\u2019s DBS
implementation`),m4.forEach(r),l$.forEach(r),$1=l(H),Ha=n(H,"DIV",{class:!0});var f4=s(Ha);g(xn.$$.fragment,f4),f4.forEach(r),T1=l(H),Ra=n(H,"DIV",{class:!0});var g4=s(Ra);g(wn.$$.fragment,g4),g4.forEach(r),H.forEach(r),wp=l(e),N=n(e,"DIV",{class:!0});var er=s(N);g(Ln.$$.fragment,er),y1=l(er),Ka=n(er,"P",{});var d$=s(Ka);Ua=n(d$,"A",{href:!0});var h4=s(Ua);k1=i(h4,"BeamScorer"),h4.forEach(r),x1=i(d$," implementing constrained beam search decoding."),d$.forEach(r),w1=l(er),Ya=n(er,"DIV",{class:!0});var u4=s(Ya);g(En.$$.fragment,u4),u4.forEach(r),L1=l(er),Xa=n(er,"DIV",{class:!0});var _4=s(Xa);g(Pn.$$.fragment,_4),_4.forEach(r),er.forEach(r),Lp=l(e),mt=n(e,"H2",{class:!0});var Tm=s(mt);Ut=n(Tm,"A",{id:!0,class:!0,href:!0});var b4=s(Ut);Gl=n(b4,"SPAN",{});var v4=s(Gl);g(Fn.$$.fragment,v4),v4.forEach(r),b4.forEach(r),E1=l(Tm),jl=n(Tm,"SPAN",{});var $4=s(jl);P1=i($4,"Utilities"),$4.forEach(r),Tm.forEach(r),Ep=l(e),ze=n(e,"DIV",{class:!0});var Mi=s(ze);g(Dn.$$.fragment,Mi),F1=l(Mi),Hl=n(Mi,"P",{});var T4=s(Hl);D1=i(T4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),T4.forEach(r),S1=l(Mi),Ja=n(Mi,"P",{});var p$=s(Ja);z1=i(p$,"From: "),Sn=n(p$,"A",{href:!0,rel:!0});var y4=s(Sn);O1=i(y4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),y4.forEach(r),p$.forEach(r),Mi.forEach(r),Pp=l(e),Oe=n(e,"DIV",{class:!0});var Gi=s(Oe);g(zn.$$.fragment,Gi),q1=l(Gi),Rl=n(Gi,"P",{});var k4=s(Rl);B1=i(k4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),k4.forEach(r),I1=l(Gi),Qa=n(Gi,"P",{});var m$=s(Qa);C1=i(m$,"From: "),On=n(m$,"A",{href:!0,rel:!0});var x4=s(On);A1=i(x4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),x4.forEach(r),m$.forEach(r),Gi.forEach(r),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(q4)),d(Be,"id","utilities-for-generation"),d(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Be,"href","#utilities-for-generation"),d(k,"class","relative group"),d(In,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Cn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(An,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Wn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Nn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Vn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Mn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(gt,"id","generate-outputs"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#generate-outputs"),d(je,"class","relative group"),d(jn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Hn,"href","/docs/transformers/v4.18.0/en/main_classes/output#transformers.utils.ModelOutput"),d(Rn,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Un,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ut,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ut,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(He,"class","relative group"),d(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Ue,"class","relative group"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Je,"class","relative group"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(et,"class","relative group"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"id","transformers.LogitsProcessor"),d(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yt,"href","#transformers.LogitsProcessor"),d(ot,"class","relative group"),d(es,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ts,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(rs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsWarper"),d(os,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(ns,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsWarper"),d(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(is,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ds,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsWarper"),d(ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(us,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsWarper"),d(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsWarper"),d($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ts,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(Wr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Wr,"rel","nofollow"),d(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ls,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(jr,"href","https://arxiv.org/abs/2010.00904"),d(jr,"rel","nofollow"),d(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ps,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(Fs,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Kr,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Kr,"rel","nofollow"),d(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Is,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.LogitsProcessor"),d(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(As,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ws,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ms,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hs,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Us,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Js,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ea,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(vo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(vo,"rel","nofollow"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ia,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ca,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(la,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(da,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fa,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ua,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(va,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ya,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xa,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ea,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bt,"id","transformers.StoppingCriteria"),d(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bt,"href","#transformers.StoppingCriteria"),d(nt,"class","relative group"),d(Fa,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.StoppingCriteria"),d(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"id","transformers.Constraint"),d(Ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ct,"href","#transformers.Constraint"),d(at,"class","relative group"),d(qa,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.Constraint"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ia,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.Constraint"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.Constraint"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"id","transformers.BeamScorer"),d(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kt,"href","#transformers.BeamScorer"),d(dt,"class","relative group"),d(Aa,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Wa,"href","/docs/transformers/v4.18.0/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.BeamScorer"),d(yn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(yn,"rel","nofollow"),d(kn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(kn,"rel","nofollow"),d(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"href","/docs/transformers/v4.18.0/en/internal/generation_utils#transformers.BeamScorer"),d(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"id","transformers.top_k_top_p_filtering"),d(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ut,"href","#transformers.top_k_top_p_filtering"),d(mt,"class","relative group"),d(Sn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Sn,"rel","nofollow"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(On,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(On,"rel","nofollow"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,p){t(document.head,w),m(e,Ge,p),m(e,k,p),t(k,Be),t(Be,ji),h(tr,ji,null),t(k,ym),t(k,Hi),t(Hi,km),m(e,Zl,p),m(e,y,p),t(y,xm),t(y,In),t(In,wm),t(y,Lm),t(y,Cn),t(Cn,Em),t(y,Pm),t(y,An),t(An,Fm),t(y,Dm),t(y,Wn),t(Wn,Sm),t(y,zm),t(y,Nn),t(Nn,Om),t(y,qm),t(y,Vn),t(Vn,Bm),t(y,Im),t(y,Mn),t(Mn,Cm),t(y,Am),m(e,ed,p),m(e,Gn,p),t(Gn,Wm),m(e,td,p),m(e,je,p),t(je,gt),t(gt,Ri),h(rr,Ri,null),t(je,Nm),t(je,Ki),t(Ki,Vm),m(e,rd,p),m(e,V,p),t(V,Mm),t(V,jn),t(jn,Gm),t(V,jm),t(V,Hn),t(Hn,Hm),t(V,Rm),t(V,Rn),t(Rn,Km),t(V,Um),m(e,od,p),m(e,Kn,p),t(Kn,Ym),m(e,nd,p),h(or,e,p),m(e,sd,p),m(e,Ie,p),t(Ie,Xm),t(Ie,Ui),t(Ui,Jm),t(Ie,Qm),t(Ie,Un),t(Un,Zm),t(Ie,ef),m(e,ad,p),m(e,M,p),t(M,Yn),t(Yn,Yi),t(Yi,tf),t(Yn,rf),t(M,of),t(M,Xn),t(Xn,Xi),t(Xi,nf),t(Xn,sf),t(M,af),t(M,Jn),t(Jn,Ji),t(Ji,cf),t(Jn,lf),t(M,df),t(M,Qn),t(Qn,Qi),t(Qi,pf),t(Qn,mf),m(e,id,p),m(e,x,p),t(x,ff),t(x,Zi),t(Zi,gf),t(x,hf),t(x,ec),t(ec,uf),t(x,_f),t(x,tc),t(tc,bf),t(x,vf),t(x,rc),t(rc,$f),t(x,Tf),t(x,oc),t(oc,yf),t(x,kf),t(x,nc),t(nc,xf),t(x,wf),m(e,cd,p),m(e,S,p),t(S,Lf),t(S,sc),t(sc,Ef),t(S,Pf),t(S,ac),t(ac,Ff),t(S,Df),t(S,ic),t(ic,Sf),t(S,zf),t(S,cc),t(cc,Of),t(S,qf),m(e,ld,p),m(e,z,p),t(z,Bf),t(z,lc),t(lc,If),t(z,Cf),t(z,dc),t(dc,Af),t(z,Wf),t(z,pc),t(pc,Nf),t(z,Vf),t(z,mc),t(mc,Mf),t(z,Gf),m(e,dd,p),h(nr,e,p),m(e,pd,p),m(e,ht,p),t(ht,jf),t(ht,fc),t(fc,Hf),t(ht,Rf),m(e,md,p),m(e,O,p),t(O,Kf),t(O,gc),t(gc,Uf),t(O,Yf),t(O,hc),t(hc,Xf),t(O,Jf),t(O,uc),t(uc,Qf),t(O,Zf),t(O,_c),t(_c,eg),t(O,tg),m(e,fd,p),m(e,Zn,p),t(Zn,rg),m(e,gd,p),m(e,He,p),t(He,ut),t(ut,bc),h(sr,bc,null),t(He,og),t(He,vc),t(vc,ng),m(e,hd,p),m(e,Re,p),h(ar,Re,null),t(Re,sg),t(Re,$c),t($c,ag),m(e,ud,p),m(e,Ke,p),h(ir,Ke,null),t(Ke,ig),t(Ke,Tc),t(Tc,cg),m(e,_d,p),m(e,R,p),h(cr,R,null),t(R,lg),t(R,yc),t(yc,dg),t(R,pg),t(R,_t),h(lr,_t,null),t(_t,mg),t(_t,kc),t(kc,fg),m(e,bd,p),m(e,Ue,p),t(Ue,bt),t(bt,xc),h(dr,xc,null),t(Ue,gg),t(Ue,wc),t(wc,hg),m(e,vd,p),m(e,Ye,p),h(pr,Ye,null),t(Ye,ug),t(Ye,Lc),t(Lc,_g),m(e,$d,p),m(e,Xe,p),h(mr,Xe,null),t(Xe,bg),t(Xe,Ec),t(Ec,vg),m(e,Td,p),m(e,K,p),h(fr,K,null),t(K,$g),t(K,Pc),t(Pc,Tg),t(K,yg),t(K,vt),h(gr,vt,null),t(vt,kg),t(vt,Fc),t(Fc,xg),m(e,yd,p),m(e,Je,p),t(Je,$t),t($t,Dc),h(hr,Dc,null),t(Je,wg),t(Je,Sc),t(Sc,Lg),m(e,kd,p),m(e,Qe,p),h(ur,Qe,null),t(Qe,Eg),t(Qe,zc),t(zc,Pg),m(e,xd,p),m(e,Ze,p),h(_r,Ze,null),t(Ze,Fg),t(Ze,Oc),t(Oc,Dg),m(e,wd,p),m(e,et,p),t(et,Tt),t(Tt,qc),h(br,qc,null),t(et,Sg),t(et,Bc),t(Bc,zg),m(e,Ld,p),m(e,tt,p),h(vr,tt,null),t(tt,Og),t(tt,Ic),t(Ic,qg),m(e,Ed,p),m(e,rt,p),h($r,rt,null),t(rt,Bg),t(rt,Cc),t(Cc,Ig),m(e,Pd,p),m(e,ot,p),t(ot,yt),t(yt,Ac),h(Tr,Ac,null),t(ot,Cg),t(ot,Wc),t(Wc,Ag),m(e,Fd,p),m(e,kt,p),t(kt,Wg),t(kt,es),t(es,Ng),t(kt,Vg),m(e,Dd,p),m(e,U,p),h(yr,U,null),t(U,Mg),t(U,Nc),t(Nc,Gg),t(U,jg),t(U,xt),h(kr,xt,null),t(xt,Hg),t(xt,Vc),t(Vc,Rg),m(e,Sd,p),m(e,Y,p),h(xr,Y,null),t(Y,Kg),t(Y,L),t(L,Ug),t(L,ts),t(ts,Yg),t(L,Xg),t(L,rs),t(rs,Jg),t(L,Qg),t(L,Mc),t(Mc,Zg),t(L,eh),t(L,Gc),t(Gc,jc),t(jc,th),t(L,rh),t(L,os),t(os,oh),t(L,nh),t(L,ns),t(ns,sh),t(L,ah),t(Y,ih),t(Y,ss),h(wr,ss,null),m(e,zd,p),m(e,X,p),h(Lr,X,null),t(X,ch),t(X,Hc),t(Hc,lh),t(X,dh),t(X,wt),h(Er,wt,null),t(wt,ph),t(wt,Rc),t(Rc,mh),m(e,Od,p),m(e,J,p),h(Pr,J,null),t(J,fh),t(J,as),t(as,is),t(is,gh),t(as,hh),t(J,uh),t(J,cs),h(Fr,cs,null),m(e,qd,p),m(e,Q,p),h(Dr,Q,null),t(Q,_h),t(Q,ls),t(ls,ds),t(ds,bh),t(ls,vh),t(Q,$h),t(Q,ps),h(Sr,ps,null),m(e,Bd,p),m(e,Z,p),h(zr,Z,null),t(Z,Th),t(Z,ms),t(ms,fs),t(fs,yh),t(ms,kh),t(Z,xh),t(Z,gs),h(Or,gs,null),m(e,Id,p),m(e,ee,p),h(qr,ee,null),t(ee,wh),t(ee,hs),t(hs,us),t(us,Lh),t(hs,Eh),t(ee,Ph),t(ee,_s),h(Br,_s,null),m(e,Cd,p),m(e,te,p),h(Ir,te,null),t(te,Fh),t(te,bs),t(bs,vs),t(vs,Dh),t(bs,Sh),t(te,zh),t(te,$s),h(Cr,$s,null),m(e,Ad,p),m(e,re,p),h(Ar,re,null),t(re,Oh),t(re,Lt),t(Lt,Ts),t(Ts,qh),t(Lt,Bh),t(Lt,Wr),t(Wr,Ih),t(Lt,Ch),t(re,Ah),t(re,ys),h(Nr,ys,null),m(e,Wd,p),m(e,oe,p),h(Vr,oe,null),t(oe,Wh),t(oe,ks),t(ks,xs),t(xs,Nh),t(ks,Vh),t(oe,Mh),t(oe,ws),h(Mr,ws,null),m(e,Nd,p),m(e,ne,p),h(Gr,ne,null),t(ne,Gh),t(ne,Et),t(Et,Ls),t(Ls,jh),t(Et,Hh),t(Et,jr),t(jr,Rh),t(Et,Kh),t(ne,Uh),t(ne,Es),h(Hr,Es,null),m(e,Vd,p),m(e,se,p),h(Rr,se,null),t(se,Yh),t(se,Ce),t(Ce,Ps),t(Ps,Xh),t(Ce,Jh),t(Ce,Fs),t(Fs,Qh),t(Ce,Zh),t(Ce,Kr),t(Kr,eu),t(Ce,tu),t(se,ru),t(se,Ds),h(Ur,Ds,null),m(e,Md,p),m(e,ae,p),h(Yr,ae,null),t(ae,ou),t(ae,Ss),t(Ss,zs),t(zs,nu),t(Ss,su),t(ae,au),t(ae,Os),h(Xr,Os,null),m(e,Gd,p),m(e,ie,p),h(Jr,ie,null),t(ie,iu),t(ie,Pt),t(Pt,qs),t(qs,cu),t(Pt,lu),t(Pt,Kc),t(Kc,du),t(Pt,pu),t(ie,mu),t(ie,Bs),h(Qr,Bs,null),m(e,jd,p),m(e,ce,p),h(Zr,ce,null),t(ce,fu),t(ce,G),t(G,Is),t(Is,gu),t(G,hu),t(G,Uc),t(Uc,uu),t(G,_u),t(G,Yc),t(Yc,bu),t(G,vu),t(G,Xc),t(Xc,$u),t(G,Tu),t(ce,yu),t(ce,Cs),h(eo,Cs,null),m(e,Hd,p),m(e,le,p),h(to,le,null),t(le,ku),t(le,Jc),t(Jc,xu),t(le,wu),t(le,Ft),h(ro,Ft,null),t(Ft,Lu),t(Ft,Qc),t(Qc,Eu),m(e,Rd,p),m(e,de,p),h(oo,de,null),t(de,Pu),t(de,C),t(C,Fu),t(C,As),t(As,Du),t(C,Su),t(C,Zc),t(Zc,zu),t(C,Ou),t(C,el),t(el,tl),t(tl,qu),t(C,Bu),t(C,Ws),t(Ws,Iu),t(C,Cu),t(de,Au),t(de,Ns),h(no,Ns,null),m(e,Kd,p),m(e,pe,p),h(so,pe,null),t(pe,Wu),t(pe,rl),t(rl,Nu),t(pe,Vu),t(pe,Dt),h(ao,Dt,null),t(Dt,Mu),t(Dt,ol),t(ol,Gu),m(e,Ud,p),m(e,me,p),h(io,me,null),t(me,ju),t(me,Vs),t(Vs,Ms),t(Ms,Hu),t(Vs,Ru),t(me,Ku),t(me,Gs),h(co,Gs,null),m(e,Yd,p),m(e,fe,p),h(lo,fe,null),t(fe,Uu),t(fe,js),t(js,Hs),t(Hs,Yu),t(js,Xu),t(fe,Ju),t(fe,Rs),h(po,Rs,null),m(e,Xd,p),m(e,ge,p),h(mo,ge,null),t(ge,Qu),t(ge,Ks),t(Ks,Us),t(Us,Zu),t(Ks,e_),t(ge,t_),t(ge,Ys),h(fo,Ys,null),m(e,Jd,p),m(e,he,p),h(go,he,null),t(he,r_),t(he,Xs),t(Xs,Js),t(Js,o_),t(Xs,n_),t(he,s_),t(he,Qs),h(ho,Qs,null),m(e,Qd,p),m(e,ue,p),h(uo,ue,null),t(ue,a_),t(ue,Zs),t(Zs,ea),t(ea,i_),t(Zs,c_),t(ue,l_),t(ue,ta),h(_o,ta,null),m(e,Zd,p),m(e,_e,p),h(bo,_e,null),t(_e,d_),t(_e,St),t(St,ra),t(ra,p_),t(St,m_),t(St,vo),t(vo,f_),t(St,g_),t(_e,h_),t(_e,oa),h($o,oa,null),m(e,ep,p),m(e,be,p),h(To,be,null),t(be,u_),t(be,na),t(na,sa),t(sa,__),t(na,b_),t(be,v_),t(be,aa),h(yo,aa,null),m(e,tp,p),m(e,ve,p),h(ko,ve,null),t(ve,$_),t(ve,nl),t(nl,T_),t(ve,y_),t(ve,zt),h(xo,zt,null),t(zt,k_),t(zt,sl),t(sl,x_),m(e,rp,p),m(e,$e,p),h(wo,$e,null),t($e,w_),t($e,E),t(E,L_),t(E,ia),t(ia,E_),t(E,P_),t(E,ca),t(ca,F_),t(E,D_),t(E,al),t(al,S_),t(E,z_),t(E,il),t(il,cl),t(cl,O_),t(E,q_),t(E,la),t(la,B_),t(E,I_),t(E,da),t(da,C_),t(E,A_),t($e,W_),t($e,pa),h(Lo,pa,null),m(e,op,p),m(e,Te,p),h(Eo,Te,null),t(Te,N_),t(Te,ll),t(ll,V_),t(Te,M_),t(Te,Ot),h(Po,Ot,null),t(Ot,G_),t(Ot,dl),t(dl,j_),m(e,np,p),m(e,ye,p),h(Fo,ye,null),t(ye,H_),t(ye,ma),t(ma,fa),t(fa,R_),t(ma,K_),t(ye,U_),t(ye,ga),h(Do,ga,null),m(e,sp,p),m(e,ke,p),h(So,ke,null),t(ke,Y_),t(ke,ha),t(ha,ua),t(ua,X_),t(ha,J_),t(ke,Q_),t(ke,_a),h(zo,_a,null),m(e,ap,p),m(e,xe,p),h(Oo,xe,null),t(xe,Z_),t(xe,ba),t(ba,va),t(va,eb),t(ba,tb),t(xe,rb),t(xe,$a),h(qo,$a,null),m(e,ip,p),m(e,we,p),h(Bo,we,null),t(we,ob),t(we,Ta),t(Ta,ya),t(ya,nb),t(Ta,sb),t(we,ab),t(we,ka),h(Io,ka,null),m(e,cp,p),m(e,Le,p),h(Co,Le,null),t(Le,ib),t(Le,qt),t(qt,xa),t(xa,cb),t(qt,lb),t(qt,pl),t(pl,db),t(qt,pb),t(Le,mb),t(Le,wa),h(Ao,wa,null),m(e,lp,p),m(e,Ee,p),h(Wo,Ee,null),t(Ee,fb),t(Ee,La),t(La,Ea),t(Ea,gb),t(La,hb),t(Ee,ub),t(Ee,Pa),h(No,Pa,null),m(e,dp,p),m(e,nt,p),t(nt,Bt),t(Bt,ml),h(Vo,ml,null),t(nt,_b),t(nt,fl),t(fl,bb),m(e,pp,p),m(e,It,p),t(It,vb),t(It,Fa),t(Fa,$b),t(It,Tb),m(e,mp,p),m(e,Pe,p),h(Mo,Pe,null),t(Pe,yb),t(Pe,gl),t(gl,kb),t(Pe,xb),t(Pe,Da),h(Go,Da,null),m(e,fp,p),m(e,st,p),h(jo,st,null),t(st,wb),t(st,Sa),h(Ho,Sa,null),m(e,gp,p),m(e,Fe,p),h(Ro,Fe,null),t(Fe,Lb),t(Fe,Ko),t(Ko,Eb),t(Ko,hl),t(hl,Pb),t(Ko,Fb),t(Fe,Db),t(Fe,za),h(Uo,za,null),m(e,hp,p),m(e,De,p),h(Yo,De,null),t(De,Sb),t(De,Xo),t(Xo,zb),t(Xo,ul),t(ul,Ob),t(Xo,qb),t(De,Bb),t(De,Oa),h(Jo,Oa,null),m(e,up,p),m(e,at,p),t(at,Ct),t(Ct,_l),h(Qo,_l,null),t(at,Ib),t(at,bl),t(bl,Cb),m(e,_p,p),m(e,At,p),t(At,Ab),t(At,qa),t(qa,Wb),t(At,Nb),m(e,bp,p),m(e,$,p),h(Zo,$,null),t($,Vb),t($,vl),t(vl,Mb),t($,Gb),t($,$l),t($l,jb),t($,Hb),h(Wt,$,null),t($,Rb),t($,Tl),t(Tl,Kb),t($,Ub),t($,Nt),h(en,Nt,null),t(Nt,Yb),t(Nt,yl),t(yl,Xb),t($,Jb),t($,Vt),h(tn,Vt,null),t(Vt,Qb),t(Vt,kl),t(kl,Zb),t($,ev),t($,Mt),h(rn,Mt,null),t(Mt,tv),t(Mt,xl),t(xl,rv),t($,ov),t($,Gt),h(on,Gt,null),t(Gt,nv),t(Gt,nn),t(nn,sv),t(nn,wl),t(wl,av),t(nn,iv),t($,cv),t($,jt),h(sn,jt,null),t(jt,lv),t(jt,Ll),t(Ll,dv),t($,pv),t($,Ht),h(an,Ht,null),t(Ht,mv),t(Ht,El),t(El,fv),t($,gv),t($,Ae),h(cn,Ae,null),t(Ae,hv),t(Ae,ln),t(ln,uv),t(ln,Pl),t(Pl,_v),t(ln,bv),t(Ae,vv),t(Ae,Fl),t(Fl,$v),m(e,vp,p),m(e,it,p),h(dn,it,null),t(it,Tv),t(it,Ba),t(Ba,Ia),t(Ia,yv),t(Ba,kv),m(e,$p,p),m(e,ct,p),h(pn,ct,null),t(ct,xv),t(ct,mn),t(mn,wv),t(mn,Ca),t(Ca,Lv),t(mn,Ev),m(e,Tp,p),m(e,A,p),h(fn,A,null),t(A,Pv),t(A,Dl),t(Dl,Fv),t(A,Dv),t(A,F),h(gn,F,null),t(F,Sv),t(F,Sl),t(Sl,zv),t(F,Ov),t(F,lt),t(lt,qv),t(lt,zl),t(zl,Bv),t(lt,Iv),t(lt,Ol),t(Ol,Cv),t(lt,Av),t(F,Wv),t(F,ql),t(ql,Bl),t(Bl,Nv),t(F,Vv),t(F,Se),t(Se,Mv),t(Se,Il),t(Il,Gv),t(Se,jv),t(Se,Cl),t(Cl,Hv),t(Se,Rv),t(Se,Al),t(Al,Kv),t(Se,Uv),t(F,Yv),t(F,Wl),t(Wl,Xv),t(A,Jv),t(A,Rt),h(hn,Rt,null),t(Rt,Qv),t(Rt,Nl),t(Nl,Zv),m(e,yp,p),m(e,dt,p),t(dt,Kt),t(Kt,Vl),h(un,Vl,null),t(dt,e1),t(dt,Ml),t(Ml,t1),m(e,kp,p),m(e,W,p),h(_n,W,null),t(W,r1),t(W,pt),t(pt,o1),t(pt,Aa),t(Aa,n1),t(pt,s1),t(pt,Wa),t(Wa,a1),t(pt,i1),t(W,c1),t(W,Na),h(bn,Na,null),t(W,l1),t(W,Va),h(vn,Va,null),m(e,xp,p),m(e,P,p),h($n,P,null),t(P,d1),t(P,Ma),t(Ma,Ga),t(Ga,p1),t(Ma,m1),t(P,f1),t(P,Tn),t(Tn,g1),t(Tn,yn),t(yn,h1),t(Tn,u1),t(P,_1),t(P,ja),t(ja,b1),t(ja,kn),t(kn,v1),t(P,$1),t(P,Ha),h(xn,Ha,null),t(P,T1),t(P,Ra),h(wn,Ra,null),m(e,wp,p),m(e,N,p),h(Ln,N,null),t(N,y1),t(N,Ka),t(Ka,Ua),t(Ua,k1),t(Ka,x1),t(N,w1),t(N,Ya),h(En,Ya,null),t(N,L1),t(N,Xa),h(Pn,Xa,null),m(e,Lp,p),m(e,mt,p),t(mt,Ut),t(Ut,Gl),h(Fn,Gl,null),t(mt,E1),t(mt,jl),t(jl,P1),m(e,Ep,p),m(e,ze,p),h(Dn,ze,null),t(ze,F1),t(ze,Hl),t(Hl,D1),t(ze,S1),t(ze,Ja),t(Ja,z1),t(Ja,Sn),t(Sn,O1),m(e,Pp,p),m(e,Oe,p),h(zn,Oe,null),t(Oe,q1),t(Oe,Rl),t(Rl,B1),t(Oe,I1),t(Oe,Qa),t(Qa,C1),t(Qa,On),t(On,A1),Fp=!0},p(e,[p]){const qn={};p&2&&(qn.$$scope={dirty:p,ctx:e}),Wt.$set(qn)},i(e){Fp||(u(tr.$$.fragment,e),u(rr.$$.fragment,e),u(or.$$.fragment,e),u(nr.$$.fragment,e),u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(pr.$$.fragment,e),u(mr.$$.fragment,e),u(fr.$$.fragment,e),u(gr.$$.fragment,e),u(hr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(br.$$.fragment,e),u(vr.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(xr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(Sr.$$.fragment,e),u(zr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Cr.$$.fragment,e),u(Ar.$$.fragment,e),u(Nr.$$.fragment,e),u(Vr.$$.fragment,e),u(Mr.$$.fragment,e),u(Gr.$$.fragment,e),u(Hr.$$.fragment,e),u(Rr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(po.$$.fragment,e),u(mo.$$.fragment,e),u(fo.$$.fragment,e),u(go.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(_o.$$.fragment,e),u(bo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(xo.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(zo.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Co.$$.fragment,e),u(Ao.$$.fragment,e),u(Wo.$$.fragment,e),u(No.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(Wt.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(rn.$$.fragment,e),u(on.$$.fragment,e),u(sn.$$.fragment,e),u(an.$$.fragment,e),u(cn.$$.fragment,e),u(dn.$$.fragment,e),u(pn.$$.fragment,e),u(fn.$$.fragment,e),u(gn.$$.fragment,e),u(hn.$$.fragment,e),u(un.$$.fragment,e),u(_n.$$.fragment,e),u(bn.$$.fragment,e),u(vn.$$.fragment,e),u($n.$$.fragment,e),u(xn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(En.$$.fragment,e),u(Pn.$$.fragment,e),u(Fn.$$.fragment,e),u(Dn.$$.fragment,e),u(zn.$$.fragment,e),Fp=!0)},o(e){_(tr.$$.fragment,e),_(rr.$$.fragment,e),_(or.$$.fragment,e),_(nr.$$.fragment,e),_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(pr.$$.fragment,e),_(mr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Cr.$$.fragment,e),_(Ar.$$.fragment,e),_(Nr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(Hr.$$.fragment,e),_(Rr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(ho.$$.fragment,e),_(uo.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Co.$$.fragment,e),_(Ao.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(Wt.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(on.$$.fragment,e),_(sn.$$.fragment,e),_(an.$$.fragment,e),_(cn.$$.fragment,e),_(dn.$$.fragment,e),_(pn.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(hn.$$.fragment,e),_(un.$$.fragment,e),_(_n.$$.fragment,e),_(bn.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(xn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(zn.$$.fragment,e),Fp=!1},d(e){r(w),e&&r(Ge),e&&r(k),b(tr),e&&r(Zl),e&&r(y),e&&r(ed),e&&r(Gn),e&&r(td),e&&r(je),b(rr),e&&r(rd),e&&r(V),e&&r(od),e&&r(Kn),e&&r(nd),b(or,e),e&&r(sd),e&&r(Ie),e&&r(ad),e&&r(M),e&&r(id),e&&r(x),e&&r(cd),e&&r(S),e&&r(ld),e&&r(z),e&&r(dd),b(nr,e),e&&r(pd),e&&r(ht),e&&r(md),e&&r(O),e&&r(fd),e&&r(Zn),e&&r(gd),e&&r(He),b(sr),e&&r(hd),e&&r(Re),b(ar),e&&r(ud),e&&r(Ke),b(ir),e&&r(_d),e&&r(R),b(cr),b(lr),e&&r(bd),e&&r(Ue),b(dr),e&&r(vd),e&&r(Ye),b(pr),e&&r($d),e&&r(Xe),b(mr),e&&r(Td),e&&r(K),b(fr),b(gr),e&&r(yd),e&&r(Je),b(hr),e&&r(kd),e&&r(Qe),b(ur),e&&r(xd),e&&r(Ze),b(_r),e&&r(wd),e&&r(et),b(br),e&&r(Ld),e&&r(tt),b(vr),e&&r(Ed),e&&r(rt),b($r),e&&r(Pd),e&&r(ot),b(Tr),e&&r(Fd),e&&r(kt),e&&r(Dd),e&&r(U),b(yr),b(kr),e&&r(Sd),e&&r(Y),b(xr),b(wr),e&&r(zd),e&&r(X),b(Lr),b(Er),e&&r(Od),e&&r(J),b(Pr),b(Fr),e&&r(qd),e&&r(Q),b(Dr),b(Sr),e&&r(Bd),e&&r(Z),b(zr),b(Or),e&&r(Id),e&&r(ee),b(qr),b(Br),e&&r(Cd),e&&r(te),b(Ir),b(Cr),e&&r(Ad),e&&r(re),b(Ar),b(Nr),e&&r(Wd),e&&r(oe),b(Vr),b(Mr),e&&r(Nd),e&&r(ne),b(Gr),b(Hr),e&&r(Vd),e&&r(se),b(Rr),b(Ur),e&&r(Md),e&&r(ae),b(Yr),b(Xr),e&&r(Gd),e&&r(ie),b(Jr),b(Qr),e&&r(jd),e&&r(ce),b(Zr),b(eo),e&&r(Hd),e&&r(le),b(to),b(ro),e&&r(Rd),e&&r(de),b(oo),b(no),e&&r(Kd),e&&r(pe),b(so),b(ao),e&&r(Ud),e&&r(me),b(io),b(co),e&&r(Yd),e&&r(fe),b(lo),b(po),e&&r(Xd),e&&r(ge),b(mo),b(fo),e&&r(Jd),e&&r(he),b(go),b(ho),e&&r(Qd),e&&r(ue),b(uo),b(_o),e&&r(Zd),e&&r(_e),b(bo),b($o),e&&r(ep),e&&r(be),b(To),b(yo),e&&r(tp),e&&r(ve),b(ko),b(xo),e&&r(rp),e&&r($e),b(wo),b(Lo),e&&r(op),e&&r(Te),b(Eo),b(Po),e&&r(np),e&&r(ye),b(Fo),b(Do),e&&r(sp),e&&r(ke),b(So),b(zo),e&&r(ap),e&&r(xe),b(Oo),b(qo),e&&r(ip),e&&r(we),b(Bo),b(Io),e&&r(cp),e&&r(Le),b(Co),b(Ao),e&&r(lp),e&&r(Ee),b(Wo),b(No),e&&r(dp),e&&r(nt),b(Vo),e&&r(pp),e&&r(It),e&&r(mp),e&&r(Pe),b(Mo),b(Go),e&&r(fp),e&&r(st),b(jo),b(Ho),e&&r(gp),e&&r(Fe),b(Ro),b(Uo),e&&r(hp),e&&r(De),b(Yo),b(Jo),e&&r(up),e&&r(at),b(Qo),e&&r(_p),e&&r(At),e&&r(bp),e&&r($),b(Zo),b(Wt),b(en),b(tn),b(rn),b(on),b(sn),b(an),b(cn),e&&r(vp),e&&r(it),b(dn),e&&r($p),e&&r(ct),b(pn),e&&r(Tp),e&&r(A),b(fn),b(gn),b(hn),e&&r(yp),e&&r(dt),b(un),e&&r(kp),e&&r(W),b(_n),b(bn),b(vn),e&&r(xp),e&&r(P),b($n),b(xn),b(wn),e&&r(wp),e&&r(N),b(Ln),b(En),b(Pn),e&&r(Lp),e&&r(mt),b(Fn),e&&r(Ep),e&&r(ze),b(Dn),e&&r(Pp),e&&r(Oe),b(zn)}}}const q4={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function B4(Ql){return F4(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class V4 extends w4{constructor(w){super();L4(this,w,B4,O4,E4,{})}}export{V4 as default,q4 as metadata};
