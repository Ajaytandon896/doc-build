import{S as Ui,i as Ki,s as Wi,e as r,k as l,w as h,t as a,M as Xi,c as s,d as o,m as d,a as n,x as g,h as i,b as f,F as t,g as p,y as _,q as v,o as b,B as $,v as Ji}from"../../chunks/vendor-6b77c823.js";import{T as oo}from"../../chunks/Tip-39098574.js";import{D as T}from"../../chunks/Docstring-17b815d9.js";import{C as Yi}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ro}from"../../chunks/IconCopyLink-7a11ce68.js";function Zi(z){let m,k,u,y,A,q,G,O,D,j,S,L,Q,F,P,B,E;return{c(){m=r("p"),k=a("One of "),u=r("code"),y=a("start_states"),A=a(" or "),q=r("code"),G=a("start_positions"),O=a(" should be not "),D=r("code"),j=a("None"),S=a(". If both are set, "),L=r("code"),Q=a("start_positions"),F=a(` overrides
`),P=r("code"),B=a("start_states"),E=a(".")},l(x){m=s(x,"P",{});var w=n(m);k=i(w,"One of "),u=s(w,"CODE",{});var I=n(u);y=i(I,"start_states"),I.forEach(o),A=i(w," or "),q=s(w,"CODE",{});var fe=n(q);G=i(fe,"start_positions"),fe.forEach(o),O=i(w," should be not "),D=s(w,"CODE",{});var R=n(D);j=i(R,"None"),R.forEach(o),S=i(w,". If both are set, "),L=s(w,"CODE",{});var ue=n(L);Q=i(ue,"start_positions"),ue.forEach(o),F=i(w,` overrides
`),P=s(w,"CODE",{});var ie=n(P);B=i(ie,"start_states"),ie.forEach(o),E=i(w,"."),w.forEach(o)},m(x,w){p(x,m,w),t(m,k),t(m,u),t(u,y),t(m,A),t(m,q),t(q,G),t(m,O),t(m,D),t(D,j),t(m,S),t(m,L),t(L,Q),t(m,F),t(m,P),t(P,B),t(m,E)},d(x){x&&o(m)}}}function el(z){let m,k,u,y,A,q,G,O,D,j,S,L,Q,F,P,B,E;return{c(){m=r("p"),k=a("One of "),u=r("code"),y=a("start_states"),A=a(" or "),q=r("code"),G=a("start_positions"),O=a(" should be not "),D=r("code"),j=a("None"),S=a(". If both are set, "),L=r("code"),Q=a("start_positions"),F=a(` overrides
`),P=r("code"),B=a("start_states"),E=a(".")},l(x){m=s(x,"P",{});var w=n(m);k=i(w,"One of "),u=s(w,"CODE",{});var I=n(u);y=i(I,"start_states"),I.forEach(o),A=i(w," or "),q=s(w,"CODE",{});var fe=n(q);G=i(fe,"start_positions"),fe.forEach(o),O=i(w," should be not "),D=s(w,"CODE",{});var R=n(D);j=i(R,"None"),R.forEach(o),S=i(w,". If both are set, "),L=s(w,"CODE",{});var ue=n(L);Q=i(ue,"start_positions"),ue.forEach(o),F=i(w,` overrides
`),P=s(w,"CODE",{});var ie=n(P);B=i(ie,"start_states"),ie.forEach(o),E=i(w,"."),w.forEach(o)},m(x,w){p(x,m,w),t(m,k),t(m,u),t(u,y),t(m,A),t(m,q),t(q,G),t(m,O),t(m,D),t(D,j),t(m,S),t(m,L),t(L,Q),t(m,F),t(m,P),t(P,B),t(m,E)},d(x){x&&o(m)}}}function tl(z){let m,k;return{c(){m=r("p"),k=a("This API is experimental and may have some slight breaking changes in the next releases.")},l(u){m=s(u,"P",{});var y=n(m);k=i(y,"This API is experimental and may have some slight breaking changes in the next releases."),y.forEach(o)},m(u,y){p(u,m,y),t(m,k)},d(u){u&&o(m)}}}function ol(z){let m,k;return{c(){m=r("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(u){m=s(u,"P",{});var y=n(m);k=i(y,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),y.forEach(o)},m(u,y){p(u,m,y),t(m,k)},d(u){u&&o(m)}}}function rl(z){let m,k;return{c(){m=r("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(u){m=s(u,"P",{});var y=n(m);k=i(y,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),y.forEach(o)},m(u,y){p(u,m,y),t(m,k)},d(u){u&&o(m)}}}function sl(z){let m,k;return{c(){m=r("p"),k=a("Any label of -100 will be ignored (along with the corresponding logits) in the loss computation.")},l(u){m=s(u,"P",{});var y=n(m);k=i(y,"Any label of -100 will be ignored (along with the corresponding logits) in the loss computation."),y.forEach(o)},m(u,y){p(u,m,y),t(m,k)},d(u){u&&o(m)}}}function nl(z){let m,k,u,y,A,q,G,O,D,j,S,L,Q,F,P,B,E,x,w,I,fe,R,ue,ie,U,Ge,ss,so,ns,as,no,is,mr,K,Re,ls,ao,ds,cs,St,Ue,pr,W,Ke,ms,io,ps,fs,Pe,We,us,Ce,fr,X,Xe,hs,lo,gs,_s,ze,Je,vs,Se,ur,he,Ye,bs,Ze,$s,Ft,ys,ws,hr,J,et,Ts,co,ks,xs,At,tt,gr,Y,ot,qs,mo,Es,Ds,Fe,rt,Ls,po,Ps,_r,ge,Ae,fo,st,Cs,uo,zs,vr,C,nt,Ss,N,Fs,ho,As,Os,go,Is,Ns,_o,Hs,Ms,vo,Vs,js,Qs,H,Bs,bo,Gs,Rs,$o,Us,Ks,yo,Ws,Xs,wo,Js,Ys,Zs,To,en,tn,at,br,_e,it,on,lt,rn,ko,sn,nn,$r,Z,dt,an,xo,ln,dn,qo,cn,yr,ee,ct,mn,Eo,pn,fn,Do,un,wr,te,mt,hn,Lo,gn,_n,Po,vn,Tr,ve,Oe,Co,pt,bn,zo,$n,kr,oe,ft,yn,So,wn,Tn,Fo,kn,xr,M,ut,xn,Ao,qn,En,Oo,Dn,Ln,le,ht,Pn,Io,Cn,zn,gt,Sn,_t,Fn,An,qr,re,vt,On,No,In,Nn,de,bt,Hn,Ho,Mn,Vn,Ie,Er,be,Ne,Mo,$t,jn,Vo,Qn,Dr,se,yt,Bn,jo,Gn,Rn,He,Lr,ne,wt,Un,Qo,Kn,Wn,Me,Pr,$e,Tt,Xn,Bo,Jn,Cr,ye,kt,Yn,Go,Zn,zr,we,xt,ea,Ro,ta,Sr,ae,qt,oa,Uo,ra,sa,Ve,Fr,Te,je,Ko,Et,na,Wo,aa,Ar,ke,Dt,ia,Lt,la,Xo,da,ca,Or,V,Pt,ma,Jo,pa,fa,Yo,ua,ha,xe,qe,ga,Zo,_a,va,er,ba,$a,ya,Ee,wa,tr,Ta,ka,or,xa,qa,Ea,De,Da,rr,La,Pa,sr,Ca,za,Ir,Le,Ct,Sa,nr,Fa,Nr;return q=new ro({}),I=new ro({}),Ge=new T({props:{name:"class transformers.Conv1D",anchor:"transformers.Conv1D",parameters:[{name:"nf",val:""},{name:"nx",val:""}],parametersDescription:[{anchor:"transformers.Conv1D.nf",description:"<strong>nf</strong> (<code>int</code>) &#x2014; The number of output features.",name:"nf"},{anchor:"transformers.Conv1D.nx",description:"<strong>nx</strong> (<code>int</code>) &#x2014; The number of input features.",name:"nx"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2306"}}),Re=new T({props:{name:"class transformers.modeling_utils.PoolerStartLogits",anchor:"transformers.modeling_utils.PoolerStartLogits",parameters:[{name:"config",val:": PretrainedConfig"}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerStartLogits.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2332"}}),Ue=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerStartLogits.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerStartLogits.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerStartLogits.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2345",returnDescription:`
<p>The start logits for SQuAD.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Ke=new T({props:{name:"class transformers.modeling_utils.PoolerEndLogits",anchor:"transformers.modeling_utils.PoolerEndLogits",parameters:[{name:"config",val:": PretrainedConfig"}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerEndLogits.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model and the <code>layer_norm_eps</code>
to use.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2370"}}),We=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerEndLogits.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.start_states",description:`<strong>start_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>, <em>optional</em>) &#x2014;
The hidden states of the first tokens for the labeled span.`,name:"start_states"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
The position of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.PoolerEndLogits.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2387",returnDescription:`
<p>The end logits for SQuAD.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Ce=new oo({props:{$$slots:{default:[Zi]},$$scope:{ctx:z}}}),Xe=new T({props:{name:"class transformers.modeling_utils.PoolerAnswerClass",anchor:"transformers.modeling_utils.PoolerAnswerClass",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerAnswerClass.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2439"}}),Je=new T({props:{name:"forward",anchor:"transformers.modeling_utils.PoolerAnswerClass.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
The final hidden states of the model.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.start_states",description:`<strong>start_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>, <em>optional</em>) &#x2014;
The hidden states of the first tokens for the labeled span.`,name:"start_states"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
The position of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.PoolerAnswerClass.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Position of the CLS token for each sentence in the batch. If <code>None</code>, takes the last token.`,name:"cls_index"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2454",returnDescription:`
<p>The SQuAD 2.0 answer class.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),Se=new oo({props:{$$slots:{default:[el]},$$scope:{ctx:z}}}),Ye=new T({props:{name:"class transformers.modeling_utils.SquadHeadOutput",anchor:"transformers.modeling_utils.SquadHeadOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_top_log_probs",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_top_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"end_top_log_probs",val:": typing.Optional[torch.FloatTensor] = None"},{name:"end_top_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_logits",val:": typing.Optional[torch.FloatTensor] = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.SquadHeadOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned if both <code>start_positions</code> and <code>end_positions</code> are provided) &#x2014;
Classification loss as the sum of start token, end token (and is_impossible if provided) classification
losses.`,name:"loss"},{anchor:"transformers.modeling_utils.SquadHeadOutput.start_top_log_probs",description:`<strong>start_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the top config.start_n_top start token possibilities (beam-search).`,name:"start_top_log_probs"},{anchor:"transformers.modeling_utils.SquadHeadOutput.start_top_index",description:`<strong>start_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Indices for the top config.start_n_top start token possibilities (beam-search).`,name:"start_top_index"},{anchor:"transformers.modeling_utils.SquadHeadOutput.end_top_log_probs",description:`<strong>end_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities
(beam-search).`,name:"end_top_log_probs"},{anchor:"transformers.modeling_utils.SquadHeadOutput.end_top_index",description:`<strong>end_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Indices for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities (beam-search).`,name:"end_top_index"},{anchor:"transformers.modeling_utils.SquadHeadOutput.cls_logits",description:`<strong>cls_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) &#x2014;
Log probabilities for the <code>is_impossible</code> label of the answers.`,name:"cls_logits"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2505"}}),et=new T({props:{name:"class transformers.modeling_utils.SQuADHead",anchor:"transformers.modeling_utils.SQuADHead",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.modeling_utils.SQuADHead.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model, will be used to grab the <code>hidden_size</code> of the model and the <code>layer_norm_eps</code>
to use.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2535"}}),tt=new T({props:{name:"forward",anchor:"transformers.modeling_utils.SQuADHead.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"end_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"},{name:"is_impossible",val:": typing.Optional[torch.LongTensor] = None"},{name:"p_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"return_dict",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.SQuADHead.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len, hidden_size)</code>) &#x2014;
Final hidden states of the model on the sequence tokens.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.SQuADHead.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Positions of the first token for the labeled span.`,name:"start_positions"},{anchor:"transformers.modeling_utils.SQuADHead.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Positions of the last token for the labeled span.`,name:"end_positions"},{anchor:"transformers.modeling_utils.SQuADHead.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Position of the CLS token for each sentence in the batch. If <code>None</code>, takes the last token.`,name:"cls_index"},{anchor:"transformers.modeling_utils.SQuADHead.forward.is_impossible",description:`<strong>is_impossible</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Whether the question has a possible answer in the paragraph or not.`,name:"is_impossible"},{anchor:"transformers.modeling_utils.SQuADHead.forward.p_mask",description:`<strong>p_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, seq_len)</code>, <em>optional</em>) &#x2014;
Mask for tokens at invalid position, such as query and special symbols (PAD, SEP, CLS). 1.0 means token
should be masked.`,name:"p_mask"},{anchor:"transformers.modeling_utils.SQuADHead.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2554",returnDescription:`
<p>A <a
  href="/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.modeling_utils.SquadHeadOutput"
>transformers.modeling_utils.SquadHeadOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.configuration_utils.PretrainedConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned if both <code>start_positions</code> and <code>end_positions</code> are provided) \u2014 Classification loss as the sum of start token, end token (and is_impossible if provided) classification
losses.</li>
<li><strong>start_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the top config.start_n_top start token possibilities (beam-search).</li>
<li><strong>start_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Indices for the top config.start_n_top start token possibilities (beam-search).</li>
<li><strong>end_top_log_probs</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities
(beam-search).</li>
<li><strong>end_top_index</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, config.start_n_top * config.end_n_top)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Indices for the top <code>config.start_n_top * config.end_n_top</code> end token possibilities (beam-search).</li>
<li><strong>cls_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>, returned if <code>start_positions</code> or <code>end_positions</code> is not provided) \u2014 Log probabilities for the <code>is_impossible</code> label of the answers.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.modeling_utils.SquadHeadOutput"
>transformers.modeling_utils.SquadHeadOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ot=new T({props:{name:"class transformers.modeling_utils.SequenceSummary",anchor:"transformers.modeling_utils.SequenceSummary",parameters:[{name:"config",val:": PretrainedConfig"}],parametersDescription:[{anchor:"transformers.modeling_utils.SequenceSummary.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model. Relevant arguments in the config class of the model are (refer to the actual
config class of your model for the default values it uses):</p>
<ul>
<li>
<p><strong>summary_type</strong> (<code>str</code>) &#x2014; The method to use to make this summary. Accepted values are:</p>
<ul>
<li><code>&quot;last&quot;</code> &#x2014; Take the last token hidden state (like XLNet)</li>
<li><code>&quot;first&quot;</code> &#x2014; Take the first token hidden state (like Bert)</li>
<li><code>&quot;mean&quot;</code> &#x2014; Take the mean of all tokens hidden states</li>
<li><code>&quot;cls_index&quot;</code> &#x2014; Supply a Tensor of classification token position (GPT/GPT-2)</li>
<li><code>&quot;attn&quot;</code> &#x2014; Not implemented now, use multi-head attention</li>
</ul>
</li>
<li>
<p><strong>summary_use_proj</strong> (<code>bool</code>) &#x2014; Add a projection after the vector extraction.</p>
</li>
<li>
<p><strong>summary_proj_to_labels</strong> (<code>bool</code>) &#x2014; If <code>True</code>, the projection outputs to <code>config.num_labels</code> classes
(otherwise to <code>config.hidden_size</code>).</p>
</li>
<li>
<p><strong>summary_activation</strong> (<code>Optional[str]</code>) &#x2014; Set to <code>&quot;tanh&quot;</code> to add a tanh activation to the output,
another string or <code>None</code> will add no activation.</p>
</li>
<li>
<p><strong>summary_first_dropout</strong> (<code>float</code>) &#x2014; Optional dropout probability before the projection and activation.</p>
</li>
<li>
<p><strong>summary_last_dropout</strong> (<code>float</code>)&#x2014; Optional dropout probability after the projection and activation.</p>
</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2652"}}),rt=new T({props:{name:"forward",anchor:"transformers.modeling_utils.SequenceSummary.forward",parameters:[{name:"hidden_states",val:": FloatTensor"},{name:"cls_index",val:": typing.Optional[torch.LongTensor] = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.SequenceSummary.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>[batch_size, seq_len, hidden_size]</code>) &#x2014;
The hidden states of the last layer.`,name:"hidden_states"},{anchor:"transformers.modeling_utils.SequenceSummary.forward.cls_index",description:`<strong>cls_index</strong> (<code>torch.LongTensor</code> of shape <code>[batch_size]</code> or <code>[batch_size, ...]</code> where &#x2026; are optional leading dimensions of <code>hidden_states</code>, <em>optional</em>) &#x2014;
Used if <code>summary_type == &quot;cls_index&quot;</code> and takes the last token of the sequence as classification token.`,name:"cls_index"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2707",returnDescription:`
<p>The summary of the sequence hidden states.</p>
`,returnType:`
<p><code>torch.FloatTensor</code></p>
`}}),st=new ro({}),nt=new T({props:{name:"transformers.apply_chunking_to_forward",anchor:"transformers.apply_chunking_to_forward",parameters:[{name:"forward_fn",val:": typing.Callable[..., torch.Tensor]"},{name:"chunk_size",val:": int"},{name:"chunk_dim",val:": int"},{name:"*input_tensors",val:""}],parametersDescription:[{anchor:"transformers.apply_chunking_to_forward.forward_fn",description:`<strong>forward_fn</strong> (<code>Callable[..., torch.Tensor]</code>) &#x2014;
The forward function of the model.`,name:"forward_fn"},{anchor:"transformers.apply_chunking_to_forward.chunk_size",description:`<strong>chunk_size</strong> (<code>int</code>) &#x2014;
The chunk size of a chunked tensor: <code>num_chunks = len(input_tensors[0]) / chunk_size</code>.`,name:"chunk_size"},{anchor:"transformers.apply_chunking_to_forward.chunk_dim",description:`<strong>chunk_dim</strong> (<code>int</code>) &#x2014;
The dimension over which the <code>input_tensors</code> should be chunked.`,name:"chunk_dim"},{anchor:"transformers.apply_chunking_to_forward.input_tensors",description:`<strong>input_tensors</strong> (<code>Tuple[torch.Tensor]</code>) &#x2014;
The input tensors of <code>forward_fn</code> which will be chunked`,name:"input_tensors"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2856",returnDescription:`
<p>A tensor with the same shape as the <code>forward_fn</code> would have given if applied\`.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),at=new Yi({props:{code:`# rename the usual forward() fn to forward_chunk()
def forward_chunk(self, hidden_states):
    hidden_states = self.decoder(hidden_states)
    return hidden_states


# implement a chunked forward function
def forward(self, hidden_states):
    return apply_chunking_to_forward(self.forward_chunk, self.chunk_size_lm_head, self.seq_len_dim, hidden_states)`,highlighted:`<span class="hljs-comment"># rename the usual forward() fn to forward_chunk()</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">forward_chunk</span>(<span class="hljs-params">self, hidden_states</span>):
    hidden_states = self.decoder(hidden_states)
    <span class="hljs-keyword">return</span> hidden_states


<span class="hljs-comment"># implement a chunked forward function</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, hidden_states</span>):
    <span class="hljs-keyword">return</span> apply_chunking_to_forward(self.forward_chunk, self.chunk_size_lm_head, self.seq_len_dim, hidden_states)`}}),it=new T({props:{name:"transformers.modeling_utils.find_pruneable_heads_and_indices",anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices",parameters:[{name:"heads",val:": typing.List[int]"},{name:"n_heads",val:": int"},{name:"head_size",val:": int"},{name:"already_pruned_heads",val:": typing.Set[int]"}],parametersDescription:[{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.heads",description:"<strong>heads</strong> (<code>List[int]</code>) &#x2014; List of the indices of heads to prune.",name:"heads"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.n_heads",description:"<strong>n_heads</strong> (<code>int</code>) &#x2014; The number of heads in the model.",name:"n_heads"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.head_size",description:"<strong>head_size</strong> (<code>int</code>) &#x2014; The size of each head.",name:"head_size"},{anchor:"transformers.modeling_utils.find_pruneable_heads_and_indices.already_pruned_heads",description:"<strong>already_pruned_heads</strong> (<code>Set[int]</code>) &#x2014; A set of already pruned heads.",name:"already_pruned_heads"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L100",returnDescription:`
<p>A tuple with the remaining heads and their corresponding indices.</p>
`,returnType:`
<p><code>Tuple[Set[int], torch.LongTensor]</code></p>
`}}),dt=new T({props:{name:"transformers.prune_layer",anchor:"transformers.prune_layer",parameters:[{name:"layer",val:": typing.Union[torch.nn.modules.linear.Linear, transformers.modeling_utils.Conv1D]"},{name:"index",val:": LongTensor"},{name:"dim",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.prune_layer.layer",description:"<strong>layer</strong> (<code>Union[torch.nn.Linear, Conv1D]</code>) &#x2014; The layer to prune.",name:"layer"},{anchor:"transformers.prune_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.prune_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>) &#x2014; The dimension on which to keep the indices.",name:"dim"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2832",returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><code>torch.nn.Linear</code> or <a
  href="/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.Conv1D"
>Conv1D</a></p>
`}}),ct=new T({props:{name:"transformers.modeling_utils.prune_conv1d_layer",anchor:"transformers.modeling_utils.prune_conv1d_layer",parameters:[{name:"layer",val:": Conv1D"},{name:"index",val:": LongTensor"},{name:"dim",val:": int = 1"}],parametersDescription:[{anchor:"transformers.modeling_utils.prune_conv1d_layer.layer",description:'<strong>layer</strong> (<a href="/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.Conv1D">Conv1D</a>) &#x2014; The layer to prune.',name:"layer"},{anchor:"transformers.modeling_utils.prune_conv1d_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.modeling_utils.prune_conv1d_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014; The dimension on which to keep the indices.",name:"dim"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2799",returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><a
  href="/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.Conv1D"
>Conv1D</a></p>
`}}),mt=new T({props:{name:"transformers.modeling_utils.prune_linear_layer",anchor:"transformers.modeling_utils.prune_linear_layer",parameters:[{name:"layer",val:": Linear"},{name:"index",val:": LongTensor"},{name:"dim",val:": int = 0"}],parametersDescription:[{anchor:"transformers.modeling_utils.prune_linear_layer.layer",description:"<strong>layer</strong> (<code>torch.nn.Linear</code>) &#x2014; The layer to prune.",name:"layer"},{anchor:"transformers.modeling_utils.prune_linear_layer.index",description:"<strong>index</strong> (<code>torch.LongTensor</code>) &#x2014; The indices to keep in the layer.",name:"index"},{anchor:"transformers.modeling_utils.prune_linear_layer.dim",description:"<strong>dim</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014; The dimension on which to keep the indices.",name:"dim"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_utils.py#L2765",returnDescription:`
<p>The pruned layer as a new layer with <code>requires_grad=True</code>.</p>
`,returnType:`
<p><code>torch.nn.Linear</code></p>
`}}),pt=new ro({}),ft=new T({props:{name:"class transformers.modeling_tf_utils.TFConv1D",anchor:"transformers.modeling_tf_utils.TFConv1D",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFConv1D.nf",description:`<strong>nf</strong> (<code>int</code>) &#x2014;
The number of output features.`,name:"nf"},{anchor:"transformers.modeling_tf_utils.TFConv1D.nx",description:`<strong>nx</strong> (<code>int</code>) &#x2014;
The number of input features.`,name:"nx"},{anchor:"transformers.modeling_tf_utils.TFConv1D.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation to use to initialize the weights.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L1898"}}),ut=new T({props:{name:"class transformers.TFSharedEmbeddings",anchor:"transformers.TFSharedEmbeddings",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSharedEmbeddings.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>) &#x2014;
The size of the vocabulary, e.g., the number of unique tokens.`,name:"vocab_size"},{anchor:"transformers.TFSharedEmbeddings.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>) &#x2014;
The size of the embedding vectors.`,name:"hidden_size"},{anchor:"transformers.TFSharedEmbeddings.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The standard deviation to use when initializing the weights. If no value is provided, it will default to
{@html &quot;<span class="\\&quot;katex\\&quot;"><span class="\\&quot;katex-mathml\\&quot;"><math xmlns="\\&quot;http://www.w3.org/1998/Math/MathML\\&quot;"><semantics><mrow><mn>1</mn><mi mathvariant="\\&quot;normal\\&quot;">/</mi><msqrt><mrow><mi>h</mi><mi>i</mi><mi>d</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi mathvariant="\\&quot;normal\\&quot;">_</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msqrt></mrow><annotation encoding="\\&quot;application/x-tex\\&quot;">1/\\\\sqrt{hidden\\\\_size}</annotation></semantics></math></span><span class="\\&quot;katex-html\\&quot;" aria-hidden="\\&quot;true\\&quot;"><span class="\\&quot;base\\&quot;"><span class="\\&quot;strut\\&quot;" style="\\&quot;height:1.24em;vertical-align:-0.3628em;\\&quot;"></span><span class="\\&quot;mord\\&quot;">1/</span><span class="\\&quot;mord" sqrt\\"><span class="\\&quot;vlist-t" vlist-t2\\"><span class="\\&quot;vlist-r\\&quot;"><span class="\\&quot;vlist\\&quot;" style="\\&quot;height:0.8772em;\\&quot;"><span class="\\&quot;svg-align\\&quot;" style="\\&quot;top:-3.2em;\\&quot;"><span class="\\&quot;pstrut\\&quot;" style="\\&quot;height:3.2em;\\&quot;"></span><span class="\\&quot;mord\\&quot;" style="\\&quot;padding-left:1em;\\&quot;"><span class="\\&quot;mord" mathnormal\\">hi</span><span class="\\&quot;mord" mathnormal\\">dd</span><span class="\\&quot;mord" mathnormal\\">e</span><span class="\\&quot;mord" mathnormal\\">n</span><span class="\\&quot;mord\\&quot;" style="\\&quot;margin-right:0.02778em;\\&quot;">_</span><span class="\\&quot;mord" mathnormal\\">s</span><span class="\\&quot;mord" mathnormal\\">i</span><span class="\\&quot;mord" mathnormal\\">ze</span></span></span><span style="\\&quot;top:-2.8372em;\\&quot;"><span class="\\&quot;pstrut\\&quot;" style="\\&quot;height:3.2em;\\&quot;"></span><span class="\\&quot;hide-tail\\&quot;" style="\\&quot;min-width:1.02em;height:1.28em;\\&quot;"><svg xmlns="\\&quot;http://www.w3.org/2000/svg\\&quot;" width="400em" height="1.28em" viewBox="0 0 400000 1296" preserveAspectRatio="xMinYMin slice"><path d="M263,681c0.7,0,18,39.7,52,119\\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\\nc340,-704.7,510.7,-1060.3,512,-1067\\nl0 -0\\nc4.7,-7.3,11,-11,19,-11\\nH40000v40H1012.3\\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\\nM1001 80h400000v40h-400000z"/></svg></span></span></span><span class="\\&quot;vlist-s\\&quot;">&#x200B;</span></span><span class="\\&quot;vlist-r\\&quot;"><span class="\\&quot;vlist\\&quot;" style="\\&quot;height:0.3628em;\\&quot;"><span></span></span></span></span></span></span></span></span>&quot;}.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L1938"}}),ht=new T({props:{name:"call",anchor:"transformers.TFSharedEmbeddings.call",parameters:[{name:"inputs",val:": Tensor"},{name:"mode",val:": str = 'embedding'"}],parametersDescription:[{anchor:"transformers.TFSharedEmbeddings.call.inputs",description:`<strong>inputs</strong> (<code>tf.Tensor</code>) &#x2014;
In embedding mode, should be an int64 tensor with shape <code>[batch_size, length]</code>.</p>
<p>In linear mode, should be a float tensor with shape <code>[batch_size, length, hidden_size]</code>.`,name:"inputs"},{anchor:"transformers.TFSharedEmbeddings.call.mode",description:`<strong>mode</strong> (<code>str</code>, defaults to <code>&quot;embedding&quot;</code>) &#x2014;
A valid value is either <code>&quot;embedding&quot;</code> or <code>&quot;linear&quot;</code>, the first one indicates that the layer should be
used as an embedding layer, the second one that the layer should be used as a linear decoder.`,name:"mode"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L1983",returnDescription:`
<p>In embedding mode, the output is a float32 embedding tensor, with shape <code>[batch_size, length, embedding_size]</code>.</p>
<p>In linear mode, the output is a float32 with shape <code>[batch_size, length, vocab_size]</code>.</p>
`,returnType:`
<p><code>tf.Tensor</code></p>
`}}),vt=new T({props:{name:"class transformers.TFSequenceSummary",anchor:"transformers.TFSequenceSummary",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSequenceSummary.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The config used by the model. Relevant arguments in the config class of the model are (refer to the actual
config class of your model for the default values it uses):</p>
<ul>
<li>
<p><strong>summary_type</strong> (<code>str</code>) &#x2014; The method to use to make this summary. Accepted values are:</p>
<ul>
<li><code>&quot;last&quot;</code> &#x2014; Take the last token hidden state (like XLNet)</li>
<li><code>&quot;first&quot;</code> &#x2014; Take the first token hidden state (like Bert)</li>
<li><code>&quot;mean&quot;</code> &#x2014; Take the mean of all tokens hidden states</li>
<li><code>&quot;cls_index&quot;</code> &#x2014; Supply a Tensor of classification token position (GPT/GPT-2)</li>
<li><code>&quot;attn&quot;</code> &#x2014; Not implemented now, use multi-head attention</li>
</ul>
</li>
<li>
<p><strong>summary_use_proj</strong> (<code>bool</code>) &#x2014; Add a projection after the vector extraction.</p>
</li>
<li>
<p><strong>summary_proj_to_labels</strong> (<code>bool</code>) &#x2014; If <code>True</code>, the projection outputs to <code>config.num_labels</code> classes
(otherwise to <code>config.hidden_size</code>).</p>
</li>
<li>
<p><strong>summary_activation</strong> (<code>Optional[str]</code>) &#x2014; Set to <code>&quot;tanh&quot;</code> to add a tanh activation to the output,
another string or <code>None</code> will add no activation.</p>
</li>
<li>
<p><strong>summary_first_dropout</strong> (<code>float</code>) &#x2014; Optional dropout probability before the projection and activation.</p>
</li>
<li>
<p><strong>summary_last_dropout</strong> (<code>float</code>)&#x2014; Optional dropout probability after the projection and activation.</p>
</li>
</ul>`,name:"config"},{anchor:"transformers.TFSequenceSummary.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, defaults to 0.02) &#x2014; The standard deviation to use to initialize the weights.
kwargs &#x2014;
Additional keyword arguments passed along to the <code>__init__</code> of <code>tf.keras.layers.Layer</code>.`,name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L2036"}}),bt=new T({props:{name:"register_for_auto_class",anchor:"transformers.TFSequenceSummary.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'TFAutoModel'"}],parametersDescription:[{anchor:"transformers.TFSequenceSummary.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;TFAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L2151"}}),Ie=new oo({props:{warning:!0,$$slots:{default:[tl]},$$scope:{ctx:z}}}),$t=new ro({}),yt=new T({props:{name:"class transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",anchor:"transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L171"}}),He=new oo({props:{$$slots:{default:[ol]},$$scope:{ctx:z}}}),wt=new T({props:{name:"class transformers.modeling_tf_utils.TFMaskedLanguageModelingLoss",anchor:"transformers.modeling_tf_utils.TFMaskedLanguageModelingLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L262"}}),Me=new oo({props:{$$slots:{default:[rl]},$$scope:{ctx:z}}}),Tt=new T({props:{name:"class transformers.modeling_tf_utils.TFMultipleChoiceLoss",anchor:"transformers.modeling_tf_utils.TFMultipleChoiceLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L252"}}),kt=new T({props:{name:"class transformers.modeling_tf_utils.TFQuestionAnsweringLoss",anchor:"transformers.modeling_tf_utils.TFQuestionAnsweringLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L193"}}),xt=new T({props:{name:"class transformers.modeling_tf_utils.TFSequenceClassificationLoss",anchor:"transformers.modeling_tf_utils.TFSequenceClassificationLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L236"}}),qt=new T({props:{name:"class transformers.modeling_tf_utils.TFTokenClassificationLoss",anchor:"transformers.modeling_tf_utils.TFTokenClassificationLoss",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L208"}}),Ve=new oo({props:{$$slots:{default:[sl]},$$scope:{ctx:z}}}),Et=new ro({}),Dt=new T({props:{name:"transformers.modeling_tf_utils.get_initializer",anchor:"transformers.modeling_tf_utils.get_initializer",parameters:[{name:"initializer_range",val:": float = 0.02"}],parametersDescription:[{anchor:"transformers.modeling_tf_utils.get_initializer.initializer_range",description:"<strong>initializer_range</strong> (<em>float</em>, defaults to 0.02) &#x2014; Standard deviation of the initializer range.",name:"initializer_range"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L2178",returnDescription:`
<p>The truncated normal initializer.</p>
`,returnType:`
<p><code>tf.initializers.TruncatedNormal</code></p>
`}}),Pt=new T({props:{name:"transformers.modeling_tf_utils.keras_serializable",anchor:"transformers.modeling_tf_utils.keras_serializable",parameters:[],parametersDescription:[{anchor:"transformers.modeling_tf_utils.keras_serializable.cls",description:`<strong>cls</strong> (a <code>tf.keras.layers.Layers subclass</code>) &#x2014;
Typically a <code>TF.MainLayer</code> class in this project, in general must accept a <code>config</code> argument to its
initializer.`,name:"cls"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/modeling_tf_utils.py#L106",returnDescription:`
<p>The same class object, with modifications for Keras deserialization.</p>
`}}),Ct=new T({props:{name:"transformers.shape_list",anchor:"transformers.shape_list",parameters:[{name:"tensor",val:": typing.Union[tensorflow.python.framework.ops.Tensor, numpy.ndarray]"}],parametersDescription:[{anchor:"transformers.shape_list.tensor",description:"<strong>tensor</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code>) &#x2014; The tensor we want the shape of.",name:"tensor"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/tf_utils.py#L31",returnDescription:`
<p>The shape of the tensor as a list.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),{c(){m=r("meta"),k=l(),u=r("h1"),y=r("a"),A=r("span"),h(q.$$.fragment),G=l(),O=r("span"),D=a("Custom Layers and Utilities"),j=l(),S=r("p"),L=a("This page lists all the custom layers used by the library, as well as the utility functions it provides for modeling."),Q=l(),F=r("p"),P=a("Most of those are only useful if you are studying the code of the models in the library."),B=l(),E=r("h2"),x=r("a"),w=r("span"),h(I.$$.fragment),fe=l(),R=r("span"),ue=a("Pytorch custom modules"),ie=l(),U=r("div"),h(Ge.$$.fragment),ss=l(),so=r("p"),ns=a("1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),as=l(),no=r("p"),is=a("Basically works like a linear layer but the weights are transposed."),mr=l(),K=r("div"),h(Re.$$.fragment),ls=l(),ao=r("p"),ds=a("Compute SQuAD start logits from sequence hidden states."),cs=l(),St=r("div"),h(Ue.$$.fragment),pr=l(),W=r("div"),h(Ke.$$.fragment),ms=l(),io=r("p"),ps=a("Compute SQuAD end logits from sequence hidden states."),fs=l(),Pe=r("div"),h(We.$$.fragment),us=l(),h(Ce.$$.fragment),fr=l(),X=r("div"),h(Xe.$$.fragment),hs=l(),lo=r("p"),gs=a("Compute SQuAD 2.0 answer class from classification and start tokens hidden states."),_s=l(),ze=r("div"),h(Je.$$.fragment),vs=l(),h(Se.$$.fragment),ur=l(),he=r("div"),h(Ye.$$.fragment),bs=l(),Ze=r("p"),$s=a("Base class for outputs of question answering models using a "),Ft=r("a"),ys=a("SQuADHead"),ws=a("."),hr=l(),J=r("div"),h(et.$$.fragment),Ts=l(),co=r("p"),ks=a("A SQuAD head inspired by XLNet."),xs=l(),At=r("div"),h(tt.$$.fragment),gr=l(),Y=r("div"),h(ot.$$.fragment),qs=l(),mo=r("p"),Es=a("Compute a single vector summary of a sequence hidden states."),Ds=l(),Fe=r("div"),h(rt.$$.fragment),Ls=l(),po=r("p"),Ps=a("Compute a single vector summary of a sequence hidden states."),_r=l(),ge=r("h2"),Ae=r("a"),fo=r("span"),h(st.$$.fragment),Cs=l(),uo=r("span"),zs=a("PyTorch Helper Functions"),vr=l(),C=r("div"),h(nt.$$.fragment),Ss=l(),N=r("p"),Fs=a("This function chunks the "),ho=r("code"),As=a("input_tensors"),Os=a(" into smaller input tensor parts of size "),go=r("code"),Is=a("chunk_size"),Ns=a(` over the dimension
`),_o=r("code"),Hs=a("chunk_dim"),Ms=a(". It then applies a layer "),vo=r("code"),Vs=a("forward_fn"),js=a(" to each chunk independently to save memory."),Qs=l(),H=r("p"),Bs=a("If the "),bo=r("code"),Gs=a("forward_fn"),Rs=a(" is independent across the "),$o=r("code"),Us=a("chunk_dim"),Ks=a(` this function will yield the same result as directly
applying `),yo=r("code"),Ws=a("forward_fn"),Xs=a(" to "),wo=r("code"),Js=a("input_tensors"),Ys=a("."),Zs=l(),To=r("p"),en=a("Examples:"),tn=l(),h(at.$$.fragment),br=l(),_e=r("div"),h(it.$$.fragment),on=l(),lt=r("p"),rn=a("Finds the heads and their indices taking "),ko=r("code"),sn=a("already_pruned_heads"),nn=a(" into account."),$r=l(),Z=r("div"),h(dt.$$.fragment),an=l(),xo=r("p"),ln=a("Prune a Conv1D or linear layer to keep only entries in index."),dn=l(),qo=r("p"),cn=a("Used to remove heads."),yr=l(),ee=r("div"),h(ct.$$.fragment),mn=l(),Eo=r("p"),pn=a(`Prune a Conv1D layer to keep only entries in index. A Conv1D work as a Linear layer (see e.g. BERT) but the weights
are transposed.`),fn=l(),Do=r("p"),un=a("Used to remove heads."),wr=l(),te=r("div"),h(mt.$$.fragment),hn=l(),Lo=r("p"),gn=a("Prune a linear layer to keep only entries in index."),_n=l(),Po=r("p"),vn=a("Used to remove heads."),Tr=l(),ve=r("h2"),Oe=r("a"),Co=r("span"),h(pt.$$.fragment),bn=l(),zo=r("span"),$n=a("TensorFlow custom layers"),kr=l(),oe=r("div"),h(ft.$$.fragment),yn=l(),So=r("p"),wn=a("1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),Tn=l(),Fo=r("p"),kn=a("Basically works like a linear layer but the weights are transposed."),xr=l(),M=r("div"),h(ut.$$.fragment),xn=l(),Ao=r("p"),qn=a("Construct shared token embeddings."),En=l(),Oo=r("p"),Dn=a(`The weights of the embedding layer is usually shared with the weights of the linear decoder when doing language
modeling.`),Ln=l(),le=r("div"),h(ht.$$.fragment),Pn=l(),Io=r("p"),Cn=a("Get token embeddings of inputs or decode final hidden state."),zn=l(),gt=r("p"),Sn=a(`Shared weights logic is adapted from
`),_t=r("a"),Fn=a("here"),An=a("."),qr=l(),re=r("div"),h(vt.$$.fragment),On=l(),No=r("p"),In=a("Compute a single vector summary of a sequence hidden states."),Nn=l(),de=r("div"),h(bt.$$.fragment),Hn=l(),Ho=r("p"),Mn=a(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Vn=l(),h(Ie.$$.fragment),Er=l(),be=r("h2"),Ne=r("a"),Mo=r("span"),h($t.$$.fragment),jn=l(),Vo=r("span"),Qn=a("TensorFlow loss functions"),Dr=l(),se=r("div"),h(yt.$$.fragment),Bn=l(),jo=r("p"),Gn=a("Loss function suitable for causal language modeling (CLM), that is, the task of guessing the next token."),Rn=l(),h(He.$$.fragment),Lr=l(),ne=r("div"),h(wt.$$.fragment),Un=l(),Qo=r("p"),Kn=a("Loss function suitable for masked language modeling (MLM), that is, the task of guessing the masked tokens."),Wn=l(),h(Me.$$.fragment),Pr=l(),$e=r("div"),h(Tt.$$.fragment),Xn=l(),Bo=r("p"),Jn=a("Loss function suitable for multiple choice tasks."),Cr=l(),ye=r("div"),h(kt.$$.fragment),Yn=l(),Go=r("p"),Zn=a("Loss function suitable for question answering."),zr=l(),we=r("div"),h(xt.$$.fragment),ea=l(),Ro=r("p"),ta=a("Loss function suitable for sequence classification."),Sr=l(),ae=r("div"),h(qt.$$.fragment),oa=l(),Uo=r("p"),ra=a("Loss function suitable for token classification."),sa=l(),h(Ve.$$.fragment),Fr=l(),Te=r("h2"),je=r("a"),Ko=r("span"),h(Et.$$.fragment),na=l(),Wo=r("span"),aa=a("TensorFlow Helper Functions"),Ar=l(),ke=r("div"),h(Dt.$$.fragment),ia=l(),Lt=r("p"),la=a("Creates a "),Xo=r("code"),da=a("tf.initializers.TruncatedNormal"),ca=a(" with the given range."),Or=l(),V=r("div"),h(Pt.$$.fragment),ma=l(),Jo=r("p"),pa=a("Decorate a Keras Layer class to support Keras serialization."),fa=l(),Yo=r("p"),ua=a("This is done by:"),ha=l(),xe=r("ol"),qe=r("li"),ga=a("Adding a "),Zo=r("code"),_a=a("transformers_config"),va=a(" dict to the Keras config dictionary in "),er=r("code"),ba=a("get_config"),$a=a(` (called by Keras at
serialization time.`),ya=l(),Ee=r("li"),wa=a("Wrapping "),tr=r("code"),Ta=a("__init__"),ka=a(" to accept that "),or=r("code"),xa=a("transformers_config"),qa=a(` dict (passed by Keras at deserialization time) and
convert it to a config object for the actual layer initializer.`),Ea=l(),De=r("li"),Da=a(`Registering the class as a custom object in Keras (if the Tensorflow version supports this), so that it does not
need to be supplied in `),rr=r("code"),La=a("custom_objects"),Pa=a(" in the call to "),sr=r("code"),Ca=a("tf.keras.models.load_model"),za=a("."),Ir=l(),Le=r("div"),h(Ct.$$.fragment),Sa=l(),nr=r("p"),Fa=a("Deal with dynamic shape in tensorflow cleanly."),this.h()},l(e){const c=Xi('[data-svelte="svelte-1phssyn"]',document.head);m=s(c,"META",{name:!0,content:!0}),c.forEach(o),k=d(e),u=s(e,"H1",{class:!0});var zt=n(u);y=s(zt,"A",{id:!0,class:!0,href:!0});var ar=n(y);A=s(ar,"SPAN",{});var ir=n(A);g(q.$$.fragment,ir),ir.forEach(o),ar.forEach(o),G=d(zt),O=s(zt,"SPAN",{});var lr=n(O);D=i(lr,"Custom Layers and Utilities"),lr.forEach(o),zt.forEach(o),j=d(e),S=s(e,"P",{});var dr=n(S);L=i(dr,"This page lists all the custom layers used by the library, as well as the utility functions it provides for modeling."),dr.forEach(o),Q=d(e),F=s(e,"P",{});var cr=n(F);P=i(cr,"Most of those are only useful if you are studying the code of the models in the library."),cr.forEach(o),B=d(e),E=s(e,"H2",{class:!0});var Hr=n(E);x=s(Hr,"A",{id:!0,class:!0,href:!0});var Aa=n(x);w=s(Aa,"SPAN",{});var Oa=n(w);g(I.$$.fragment,Oa),Oa.forEach(o),Aa.forEach(o),fe=d(Hr),R=s(Hr,"SPAN",{});var Ia=n(R);ue=i(Ia,"Pytorch custom modules"),Ia.forEach(o),Hr.forEach(o),ie=d(e),U=s(e,"DIV",{class:!0});var Ot=n(U);g(Ge.$$.fragment,Ot),ss=d(Ot),so=s(Ot,"P",{});var Na=n(so);ns=i(Na,"1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),Na.forEach(o),as=d(Ot),no=s(Ot,"P",{});var Ha=n(no);is=i(Ha,"Basically works like a linear layer but the weights are transposed."),Ha.forEach(o),Ot.forEach(o),mr=d(e),K=s(e,"DIV",{class:!0});var It=n(K);g(Re.$$.fragment,It),ls=d(It),ao=s(It,"P",{});var Ma=n(ao);ds=i(Ma,"Compute SQuAD start logits from sequence hidden states."),Ma.forEach(o),cs=d(It),St=s(It,"DIV",{class:!0});var Va=n(St);g(Ue.$$.fragment,Va),Va.forEach(o),It.forEach(o),pr=d(e),W=s(e,"DIV",{class:!0});var Nt=n(W);g(Ke.$$.fragment,Nt),ms=d(Nt),io=s(Nt,"P",{});var ja=n(io);ps=i(ja,"Compute SQuAD end logits from sequence hidden states."),ja.forEach(o),fs=d(Nt),Pe=s(Nt,"DIV",{class:!0});var Mr=n(Pe);g(We.$$.fragment,Mr),us=d(Mr),g(Ce.$$.fragment,Mr),Mr.forEach(o),Nt.forEach(o),fr=d(e),X=s(e,"DIV",{class:!0});var Ht=n(X);g(Xe.$$.fragment,Ht),hs=d(Ht),lo=s(Ht,"P",{});var Qa=n(lo);gs=i(Qa,"Compute SQuAD 2.0 answer class from classification and start tokens hidden states."),Qa.forEach(o),_s=d(Ht),ze=s(Ht,"DIV",{class:!0});var Vr=n(ze);g(Je.$$.fragment,Vr),vs=d(Vr),g(Se.$$.fragment,Vr),Vr.forEach(o),Ht.forEach(o),ur=d(e),he=s(e,"DIV",{class:!0});var jr=n(he);g(Ye.$$.fragment,jr),bs=d(jr),Ze=s(jr,"P",{});var Qr=n(Ze);$s=i(Qr,"Base class for outputs of question answering models using a "),Ft=s(Qr,"A",{href:!0});var Ba=n(Ft);ys=i(Ba,"SQuADHead"),Ba.forEach(o),ws=i(Qr,"."),Qr.forEach(o),jr.forEach(o),hr=d(e),J=s(e,"DIV",{class:!0});var Mt=n(J);g(et.$$.fragment,Mt),Ts=d(Mt),co=s(Mt,"P",{});var Ga=n(co);ks=i(Ga,"A SQuAD head inspired by XLNet."),Ga.forEach(o),xs=d(Mt),At=s(Mt,"DIV",{class:!0});var Ra=n(At);g(tt.$$.fragment,Ra),Ra.forEach(o),Mt.forEach(o),gr=d(e),Y=s(e,"DIV",{class:!0});var Vt=n(Y);g(ot.$$.fragment,Vt),qs=d(Vt),mo=s(Vt,"P",{});var Ua=n(mo);Es=i(Ua,"Compute a single vector summary of a sequence hidden states."),Ua.forEach(o),Ds=d(Vt),Fe=s(Vt,"DIV",{class:!0});var Br=n(Fe);g(rt.$$.fragment,Br),Ls=d(Br),po=s(Br,"P",{});var Ka=n(po);Ps=i(Ka,"Compute a single vector summary of a sequence hidden states."),Ka.forEach(o),Br.forEach(o),Vt.forEach(o),_r=d(e),ge=s(e,"H2",{class:!0});var Gr=n(ge);Ae=s(Gr,"A",{id:!0,class:!0,href:!0});var Wa=n(Ae);fo=s(Wa,"SPAN",{});var Xa=n(fo);g(st.$$.fragment,Xa),Xa.forEach(o),Wa.forEach(o),Cs=d(Gr),uo=s(Gr,"SPAN",{});var Ja=n(uo);zs=i(Ja,"PyTorch Helper Functions"),Ja.forEach(o),Gr.forEach(o),vr=d(e),C=s(e,"DIV",{class:!0});var ce=n(C);g(nt.$$.fragment,ce),Ss=d(ce),N=s(ce,"P",{});var me=n(N);Fs=i(me,"This function chunks the "),ho=s(me,"CODE",{});var Ya=n(ho);As=i(Ya,"input_tensors"),Ya.forEach(o),Os=i(me," into smaller input tensor parts of size "),go=s(me,"CODE",{});var Za=n(go);Is=i(Za,"chunk_size"),Za.forEach(o),Ns=i(me,` over the dimension
`),_o=s(me,"CODE",{});var ei=n(_o);Hs=i(ei,"chunk_dim"),ei.forEach(o),Ms=i(me,". It then applies a layer "),vo=s(me,"CODE",{});var ti=n(vo);Vs=i(ti,"forward_fn"),ti.forEach(o),js=i(me," to each chunk independently to save memory."),me.forEach(o),Qs=d(ce),H=s(ce,"P",{});var pe=n(H);Bs=i(pe,"If the "),bo=s(pe,"CODE",{});var oi=n(bo);Gs=i(oi,"forward_fn"),oi.forEach(o),Rs=i(pe," is independent across the "),$o=s(pe,"CODE",{});var ri=n($o);Us=i(ri,"chunk_dim"),ri.forEach(o),Ks=i(pe,` this function will yield the same result as directly
applying `),yo=s(pe,"CODE",{});var si=n(yo);Ws=i(si,"forward_fn"),si.forEach(o),Xs=i(pe," to "),wo=s(pe,"CODE",{});var ni=n(wo);Js=i(ni,"input_tensors"),ni.forEach(o),Ys=i(pe,"."),pe.forEach(o),Zs=d(ce),To=s(ce,"P",{});var ai=n(To);en=i(ai,"Examples:"),ai.forEach(o),tn=d(ce),g(at.$$.fragment,ce),ce.forEach(o),br=d(e),_e=s(e,"DIV",{class:!0});var Rr=n(_e);g(it.$$.fragment,Rr),on=d(Rr),lt=s(Rr,"P",{});var Ur=n(lt);rn=i(Ur,"Finds the heads and their indices taking "),ko=s(Ur,"CODE",{});var ii=n(ko);sn=i(ii,"already_pruned_heads"),ii.forEach(o),nn=i(Ur," into account."),Ur.forEach(o),Rr.forEach(o),$r=d(e),Z=s(e,"DIV",{class:!0});var jt=n(Z);g(dt.$$.fragment,jt),an=d(jt),xo=s(jt,"P",{});var li=n(xo);ln=i(li,"Prune a Conv1D or linear layer to keep only entries in index."),li.forEach(o),dn=d(jt),qo=s(jt,"P",{});var di=n(qo);cn=i(di,"Used to remove heads."),di.forEach(o),jt.forEach(o),yr=d(e),ee=s(e,"DIV",{class:!0});var Qt=n(ee);g(ct.$$.fragment,Qt),mn=d(Qt),Eo=s(Qt,"P",{});var ci=n(Eo);pn=i(ci,`Prune a Conv1D layer to keep only entries in index. A Conv1D work as a Linear layer (see e.g. BERT) but the weights
are transposed.`),ci.forEach(o),fn=d(Qt),Do=s(Qt,"P",{});var mi=n(Do);un=i(mi,"Used to remove heads."),mi.forEach(o),Qt.forEach(o),wr=d(e),te=s(e,"DIV",{class:!0});var Bt=n(te);g(mt.$$.fragment,Bt),hn=d(Bt),Lo=s(Bt,"P",{});var pi=n(Lo);gn=i(pi,"Prune a linear layer to keep only entries in index."),pi.forEach(o),_n=d(Bt),Po=s(Bt,"P",{});var fi=n(Po);vn=i(fi,"Used to remove heads."),fi.forEach(o),Bt.forEach(o),Tr=d(e),ve=s(e,"H2",{class:!0});var Kr=n(ve);Oe=s(Kr,"A",{id:!0,class:!0,href:!0});var ui=n(Oe);Co=s(ui,"SPAN",{});var hi=n(Co);g(pt.$$.fragment,hi),hi.forEach(o),ui.forEach(o),bn=d(Kr),zo=s(Kr,"SPAN",{});var gi=n(zo);$n=i(gi,"TensorFlow custom layers"),gi.forEach(o),Kr.forEach(o),kr=d(e),oe=s(e,"DIV",{class:!0});var Gt=n(oe);g(ft.$$.fragment,Gt),yn=d(Gt),So=s(Gt,"P",{});var _i=n(So);wn=i(_i,"1D-convolutional layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)."),_i.forEach(o),Tn=d(Gt),Fo=s(Gt,"P",{});var vi=n(Fo);kn=i(vi,"Basically works like a linear layer but the weights are transposed."),vi.forEach(o),Gt.forEach(o),xr=d(e),M=s(e,"DIV",{class:!0});var Qe=n(M);g(ut.$$.fragment,Qe),xn=d(Qe),Ao=s(Qe,"P",{});var bi=n(Ao);qn=i(bi,"Construct shared token embeddings."),bi.forEach(o),En=d(Qe),Oo=s(Qe,"P",{});var $i=n(Oo);Dn=i($i,`The weights of the embedding layer is usually shared with the weights of the linear decoder when doing language
modeling.`),$i.forEach(o),Ln=d(Qe),le=s(Qe,"DIV",{class:!0});var Rt=n(le);g(ht.$$.fragment,Rt),Pn=d(Rt),Io=s(Rt,"P",{});var yi=n(Io);Cn=i(yi,"Get token embeddings of inputs or decode final hidden state."),yi.forEach(o),zn=d(Rt),gt=s(Rt,"P",{});var Wr=n(gt);Sn=i(Wr,`Shared weights logic is adapted from
`),_t=s(Wr,"A",{href:!0,rel:!0});var wi=n(_t);Fn=i(wi,"here"),wi.forEach(o),An=i(Wr,"."),Wr.forEach(o),Rt.forEach(o),Qe.forEach(o),qr=d(e),re=s(e,"DIV",{class:!0});var Ut=n(re);g(vt.$$.fragment,Ut),On=d(Ut),No=s(Ut,"P",{});var Ti=n(No);In=i(Ti,"Compute a single vector summary of a sequence hidden states."),Ti.forEach(o),Nn=d(Ut),de=s(Ut,"DIV",{class:!0});var Kt=n(de);g(bt.$$.fragment,Kt),Hn=d(Kt),Ho=s(Kt,"P",{});var ki=n(Ho);Mn=i(ki,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ki.forEach(o),Vn=d(Kt),g(Ie.$$.fragment,Kt),Kt.forEach(o),Ut.forEach(o),Er=d(e),be=s(e,"H2",{class:!0});var Xr=n(be);Ne=s(Xr,"A",{id:!0,class:!0,href:!0});var xi=n(Ne);Mo=s(xi,"SPAN",{});var qi=n(Mo);g($t.$$.fragment,qi),qi.forEach(o),xi.forEach(o),jn=d(Xr),Vo=s(Xr,"SPAN",{});var Ei=n(Vo);Qn=i(Ei,"TensorFlow loss functions"),Ei.forEach(o),Xr.forEach(o),Dr=d(e),se=s(e,"DIV",{class:!0});var Wt=n(se);g(yt.$$.fragment,Wt),Bn=d(Wt),jo=s(Wt,"P",{});var Di=n(jo);Gn=i(Di,"Loss function suitable for causal language modeling (CLM), that is, the task of guessing the next token."),Di.forEach(o),Rn=d(Wt),g(He.$$.fragment,Wt),Wt.forEach(o),Lr=d(e),ne=s(e,"DIV",{class:!0});var Xt=n(ne);g(wt.$$.fragment,Xt),Un=d(Xt),Qo=s(Xt,"P",{});var Li=n(Qo);Kn=i(Li,"Loss function suitable for masked language modeling (MLM), that is, the task of guessing the masked tokens."),Li.forEach(o),Wn=d(Xt),g(Me.$$.fragment,Xt),Xt.forEach(o),Pr=d(e),$e=s(e,"DIV",{class:!0});var Jr=n($e);g(Tt.$$.fragment,Jr),Xn=d(Jr),Bo=s(Jr,"P",{});var Pi=n(Bo);Jn=i(Pi,"Loss function suitable for multiple choice tasks."),Pi.forEach(o),Jr.forEach(o),Cr=d(e),ye=s(e,"DIV",{class:!0});var Yr=n(ye);g(kt.$$.fragment,Yr),Yn=d(Yr),Go=s(Yr,"P",{});var Ci=n(Go);Zn=i(Ci,"Loss function suitable for question answering."),Ci.forEach(o),Yr.forEach(o),zr=d(e),we=s(e,"DIV",{class:!0});var Zr=n(we);g(xt.$$.fragment,Zr),ea=d(Zr),Ro=s(Zr,"P",{});var zi=n(Ro);ta=i(zi,"Loss function suitable for sequence classification."),zi.forEach(o),Zr.forEach(o),Sr=d(e),ae=s(e,"DIV",{class:!0});var Jt=n(ae);g(qt.$$.fragment,Jt),oa=d(Jt),Uo=s(Jt,"P",{});var Si=n(Uo);ra=i(Si,"Loss function suitable for token classification."),Si.forEach(o),sa=d(Jt),g(Ve.$$.fragment,Jt),Jt.forEach(o),Fr=d(e),Te=s(e,"H2",{class:!0});var es=n(Te);je=s(es,"A",{id:!0,class:!0,href:!0});var Fi=n(je);Ko=s(Fi,"SPAN",{});var Ai=n(Ko);g(Et.$$.fragment,Ai),Ai.forEach(o),Fi.forEach(o),na=d(es),Wo=s(es,"SPAN",{});var Oi=n(Wo);aa=i(Oi,"TensorFlow Helper Functions"),Oi.forEach(o),es.forEach(o),Ar=d(e),ke=s(e,"DIV",{class:!0});var ts=n(ke);g(Dt.$$.fragment,ts),ia=d(ts),Lt=s(ts,"P",{});var os=n(Lt);la=i(os,"Creates a "),Xo=s(os,"CODE",{});var Ii=n(Xo);da=i(Ii,"tf.initializers.TruncatedNormal"),Ii.forEach(o),ca=i(os," with the given range."),os.forEach(o),ts.forEach(o),Or=d(e),V=s(e,"DIV",{class:!0});var Be=n(V);g(Pt.$$.fragment,Be),ma=d(Be),Jo=s(Be,"P",{});var Ni=n(Jo);pa=i(Ni,"Decorate a Keras Layer class to support Keras serialization."),Ni.forEach(o),fa=d(Be),Yo=s(Be,"P",{});var Hi=n(Yo);ua=i(Hi,"This is done by:"),Hi.forEach(o),ha=d(Be),xe=s(Be,"OL",{});var Yt=n(xe);qe=s(Yt,"LI",{});var Zt=n(qe);ga=i(Zt,"Adding a "),Zo=s(Zt,"CODE",{});var Mi=n(Zo);_a=i(Mi,"transformers_config"),Mi.forEach(o),va=i(Zt," dict to the Keras config dictionary in "),er=s(Zt,"CODE",{});var Vi=n(er);ba=i(Vi,"get_config"),Vi.forEach(o),$a=i(Zt,` (called by Keras at
serialization time.`),Zt.forEach(o),ya=d(Yt),Ee=s(Yt,"LI",{});var eo=n(Ee);wa=i(eo,"Wrapping "),tr=s(eo,"CODE",{});var ji=n(tr);Ta=i(ji,"__init__"),ji.forEach(o),ka=i(eo," to accept that "),or=s(eo,"CODE",{});var Qi=n(or);xa=i(Qi,"transformers_config"),Qi.forEach(o),qa=i(eo,` dict (passed by Keras at deserialization time) and
convert it to a config object for the actual layer initializer.`),eo.forEach(o),Ea=d(Yt),De=s(Yt,"LI",{});var to=n(De);Da=i(to,`Registering the class as a custom object in Keras (if the Tensorflow version supports this), so that it does not
need to be supplied in `),rr=s(to,"CODE",{});var Bi=n(rr);La=i(Bi,"custom_objects"),Bi.forEach(o),Pa=i(to," in the call to "),sr=s(to,"CODE",{});var Gi=n(sr);Ca=i(Gi,"tf.keras.models.load_model"),Gi.forEach(o),za=i(to,"."),to.forEach(o),Yt.forEach(o),Be.forEach(o),Ir=d(e),Le=s(e,"DIV",{class:!0});var rs=n(Le);g(Ct.$$.fragment,rs),Sa=d(rs),nr=s(rs,"P",{});var Ri=n(nr);Fa=i(Ri,"Deal with dynamic shape in tensorflow cleanly."),Ri.forEach(o),rs.forEach(o),this.h()},h(){f(m,"name","hf:doc:metadata"),f(m,"content",JSON.stringify(al)),f(y,"id","custom-layers-and-utilities"),f(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(y,"href","#custom-layers-and-utilities"),f(u,"class","relative group"),f(x,"id","transformers.Conv1D"),f(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(x,"href","#transformers.Conv1D"),f(E,"class","relative group"),f(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ft,"href","/docs/transformers/v4.18.0/en/internal/modeling_utils#transformers.modeling_utils.SQuADHead"),f(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ae,"id","transformers.apply_chunking_to_forward"),f(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ae,"href","#transformers.apply_chunking_to_forward"),f(ge,"class","relative group"),f(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Oe,"id","transformers.modeling_tf_utils.TFConv1D"),f(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Oe,"href","#transformers.modeling_tf_utils.TFConv1D"),f(ve,"class","relative group"),f(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(_t,"href","https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24"),f(_t,"rel","nofollow"),f(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Ne,"id","transformers.modeling_tf_utils.TFCausalLanguageModelingLoss"),f(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ne,"href","#transformers.modeling_tf_utils.TFCausalLanguageModelingLoss"),f(be,"class","relative group"),f(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(je,"id","transformers.modeling_tf_utils.get_initializer"),f(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(je,"href","#transformers.modeling_tf_utils.get_initializer"),f(Te,"class","relative group"),f(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),f(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,c){t(document.head,m),p(e,k,c),p(e,u,c),t(u,y),t(y,A),_(q,A,null),t(u,G),t(u,O),t(O,D),p(e,j,c),p(e,S,c),t(S,L),p(e,Q,c),p(e,F,c),t(F,P),p(e,B,c),p(e,E,c),t(E,x),t(x,w),_(I,w,null),t(E,fe),t(E,R),t(R,ue),p(e,ie,c),p(e,U,c),_(Ge,U,null),t(U,ss),t(U,so),t(so,ns),t(U,as),t(U,no),t(no,is),p(e,mr,c),p(e,K,c),_(Re,K,null),t(K,ls),t(K,ao),t(ao,ds),t(K,cs),t(K,St),_(Ue,St,null),p(e,pr,c),p(e,W,c),_(Ke,W,null),t(W,ms),t(W,io),t(io,ps),t(W,fs),t(W,Pe),_(We,Pe,null),t(Pe,us),_(Ce,Pe,null),p(e,fr,c),p(e,X,c),_(Xe,X,null),t(X,hs),t(X,lo),t(lo,gs),t(X,_s),t(X,ze),_(Je,ze,null),t(ze,vs),_(Se,ze,null),p(e,ur,c),p(e,he,c),_(Ye,he,null),t(he,bs),t(he,Ze),t(Ze,$s),t(Ze,Ft),t(Ft,ys),t(Ze,ws),p(e,hr,c),p(e,J,c),_(et,J,null),t(J,Ts),t(J,co),t(co,ks),t(J,xs),t(J,At),_(tt,At,null),p(e,gr,c),p(e,Y,c),_(ot,Y,null),t(Y,qs),t(Y,mo),t(mo,Es),t(Y,Ds),t(Y,Fe),_(rt,Fe,null),t(Fe,Ls),t(Fe,po),t(po,Ps),p(e,_r,c),p(e,ge,c),t(ge,Ae),t(Ae,fo),_(st,fo,null),t(ge,Cs),t(ge,uo),t(uo,zs),p(e,vr,c),p(e,C,c),_(nt,C,null),t(C,Ss),t(C,N),t(N,Fs),t(N,ho),t(ho,As),t(N,Os),t(N,go),t(go,Is),t(N,Ns),t(N,_o),t(_o,Hs),t(N,Ms),t(N,vo),t(vo,Vs),t(N,js),t(C,Qs),t(C,H),t(H,Bs),t(H,bo),t(bo,Gs),t(H,Rs),t(H,$o),t($o,Us),t(H,Ks),t(H,yo),t(yo,Ws),t(H,Xs),t(H,wo),t(wo,Js),t(H,Ys),t(C,Zs),t(C,To),t(To,en),t(C,tn),_(at,C,null),p(e,br,c),p(e,_e,c),_(it,_e,null),t(_e,on),t(_e,lt),t(lt,rn),t(lt,ko),t(ko,sn),t(lt,nn),p(e,$r,c),p(e,Z,c),_(dt,Z,null),t(Z,an),t(Z,xo),t(xo,ln),t(Z,dn),t(Z,qo),t(qo,cn),p(e,yr,c),p(e,ee,c),_(ct,ee,null),t(ee,mn),t(ee,Eo),t(Eo,pn),t(ee,fn),t(ee,Do),t(Do,un),p(e,wr,c),p(e,te,c),_(mt,te,null),t(te,hn),t(te,Lo),t(Lo,gn),t(te,_n),t(te,Po),t(Po,vn),p(e,Tr,c),p(e,ve,c),t(ve,Oe),t(Oe,Co),_(pt,Co,null),t(ve,bn),t(ve,zo),t(zo,$n),p(e,kr,c),p(e,oe,c),_(ft,oe,null),t(oe,yn),t(oe,So),t(So,wn),t(oe,Tn),t(oe,Fo),t(Fo,kn),p(e,xr,c),p(e,M,c),_(ut,M,null),t(M,xn),t(M,Ao),t(Ao,qn),t(M,En),t(M,Oo),t(Oo,Dn),t(M,Ln),t(M,le),_(ht,le,null),t(le,Pn),t(le,Io),t(Io,Cn),t(le,zn),t(le,gt),t(gt,Sn),t(gt,_t),t(_t,Fn),t(gt,An),p(e,qr,c),p(e,re,c),_(vt,re,null),t(re,On),t(re,No),t(No,In),t(re,Nn),t(re,de),_(bt,de,null),t(de,Hn),t(de,Ho),t(Ho,Mn),t(de,Vn),_(Ie,de,null),p(e,Er,c),p(e,be,c),t(be,Ne),t(Ne,Mo),_($t,Mo,null),t(be,jn),t(be,Vo),t(Vo,Qn),p(e,Dr,c),p(e,se,c),_(yt,se,null),t(se,Bn),t(se,jo),t(jo,Gn),t(se,Rn),_(He,se,null),p(e,Lr,c),p(e,ne,c),_(wt,ne,null),t(ne,Un),t(ne,Qo),t(Qo,Kn),t(ne,Wn),_(Me,ne,null),p(e,Pr,c),p(e,$e,c),_(Tt,$e,null),t($e,Xn),t($e,Bo),t(Bo,Jn),p(e,Cr,c),p(e,ye,c),_(kt,ye,null),t(ye,Yn),t(ye,Go),t(Go,Zn),p(e,zr,c),p(e,we,c),_(xt,we,null),t(we,ea),t(we,Ro),t(Ro,ta),p(e,Sr,c),p(e,ae,c),_(qt,ae,null),t(ae,oa),t(ae,Uo),t(Uo,ra),t(ae,sa),_(Ve,ae,null),p(e,Fr,c),p(e,Te,c),t(Te,je),t(je,Ko),_(Et,Ko,null),t(Te,na),t(Te,Wo),t(Wo,aa),p(e,Ar,c),p(e,ke,c),_(Dt,ke,null),t(ke,ia),t(ke,Lt),t(Lt,la),t(Lt,Xo),t(Xo,da),t(Lt,ca),p(e,Or,c),p(e,V,c),_(Pt,V,null),t(V,ma),t(V,Jo),t(Jo,pa),t(V,fa),t(V,Yo),t(Yo,ua),t(V,ha),t(V,xe),t(xe,qe),t(qe,ga),t(qe,Zo),t(Zo,_a),t(qe,va),t(qe,er),t(er,ba),t(qe,$a),t(xe,ya),t(xe,Ee),t(Ee,wa),t(Ee,tr),t(tr,Ta),t(Ee,ka),t(Ee,or),t(or,xa),t(Ee,qa),t(xe,Ea),t(xe,De),t(De,Da),t(De,rr),t(rr,La),t(De,Pa),t(De,sr),t(sr,Ca),t(De,za),p(e,Ir,c),p(e,Le,c),_(Ct,Le,null),t(Le,Sa),t(Le,nr),t(nr,Fa),Nr=!0},p(e,[c]){const zt={};c&2&&(zt.$$scope={dirty:c,ctx:e}),Ce.$set(zt);const ar={};c&2&&(ar.$$scope={dirty:c,ctx:e}),Se.$set(ar);const ir={};c&2&&(ir.$$scope={dirty:c,ctx:e}),Ie.$set(ir);const lr={};c&2&&(lr.$$scope={dirty:c,ctx:e}),He.$set(lr);const dr={};c&2&&(dr.$$scope={dirty:c,ctx:e}),Me.$set(dr);const cr={};c&2&&(cr.$$scope={dirty:c,ctx:e}),Ve.$set(cr)},i(e){Nr||(v(q.$$.fragment,e),v(I.$$.fragment,e),v(Ge.$$.fragment,e),v(Re.$$.fragment,e),v(Ue.$$.fragment,e),v(Ke.$$.fragment,e),v(We.$$.fragment,e),v(Ce.$$.fragment,e),v(Xe.$$.fragment,e),v(Je.$$.fragment,e),v(Se.$$.fragment,e),v(Ye.$$.fragment,e),v(et.$$.fragment,e),v(tt.$$.fragment,e),v(ot.$$.fragment,e),v(rt.$$.fragment,e),v(st.$$.fragment,e),v(nt.$$.fragment,e),v(at.$$.fragment,e),v(it.$$.fragment,e),v(dt.$$.fragment,e),v(ct.$$.fragment,e),v(mt.$$.fragment,e),v(pt.$$.fragment,e),v(ft.$$.fragment,e),v(ut.$$.fragment,e),v(ht.$$.fragment,e),v(vt.$$.fragment,e),v(bt.$$.fragment,e),v(Ie.$$.fragment,e),v($t.$$.fragment,e),v(yt.$$.fragment,e),v(He.$$.fragment,e),v(wt.$$.fragment,e),v(Me.$$.fragment,e),v(Tt.$$.fragment,e),v(kt.$$.fragment,e),v(xt.$$.fragment,e),v(qt.$$.fragment,e),v(Ve.$$.fragment,e),v(Et.$$.fragment,e),v(Dt.$$.fragment,e),v(Pt.$$.fragment,e),v(Ct.$$.fragment,e),Nr=!0)},o(e){b(q.$$.fragment,e),b(I.$$.fragment,e),b(Ge.$$.fragment,e),b(Re.$$.fragment,e),b(Ue.$$.fragment,e),b(Ke.$$.fragment,e),b(We.$$.fragment,e),b(Ce.$$.fragment,e),b(Xe.$$.fragment,e),b(Je.$$.fragment,e),b(Se.$$.fragment,e),b(Ye.$$.fragment,e),b(et.$$.fragment,e),b(tt.$$.fragment,e),b(ot.$$.fragment,e),b(rt.$$.fragment,e),b(st.$$.fragment,e),b(nt.$$.fragment,e),b(at.$$.fragment,e),b(it.$$.fragment,e),b(dt.$$.fragment,e),b(ct.$$.fragment,e),b(mt.$$.fragment,e),b(pt.$$.fragment,e),b(ft.$$.fragment,e),b(ut.$$.fragment,e),b(ht.$$.fragment,e),b(vt.$$.fragment,e),b(bt.$$.fragment,e),b(Ie.$$.fragment,e),b($t.$$.fragment,e),b(yt.$$.fragment,e),b(He.$$.fragment,e),b(wt.$$.fragment,e),b(Me.$$.fragment,e),b(Tt.$$.fragment,e),b(kt.$$.fragment,e),b(xt.$$.fragment,e),b(qt.$$.fragment,e),b(Ve.$$.fragment,e),b(Et.$$.fragment,e),b(Dt.$$.fragment,e),b(Pt.$$.fragment,e),b(Ct.$$.fragment,e),Nr=!1},d(e){o(m),e&&o(k),e&&o(u),$(q),e&&o(j),e&&o(S),e&&o(Q),e&&o(F),e&&o(B),e&&o(E),$(I),e&&o(ie),e&&o(U),$(Ge),e&&o(mr),e&&o(K),$(Re),$(Ue),e&&o(pr),e&&o(W),$(Ke),$(We),$(Ce),e&&o(fr),e&&o(X),$(Xe),$(Je),$(Se),e&&o(ur),e&&o(he),$(Ye),e&&o(hr),e&&o(J),$(et),$(tt),e&&o(gr),e&&o(Y),$(ot),$(rt),e&&o(_r),e&&o(ge),$(st),e&&o(vr),e&&o(C),$(nt),$(at),e&&o(br),e&&o(_e),$(it),e&&o($r),e&&o(Z),$(dt),e&&o(yr),e&&o(ee),$(ct),e&&o(wr),e&&o(te),$(mt),e&&o(Tr),e&&o(ve),$(pt),e&&o(kr),e&&o(oe),$(ft),e&&o(xr),e&&o(M),$(ut),$(ht),e&&o(qr),e&&o(re),$(vt),$(bt),$(Ie),e&&o(Er),e&&o(be),$($t),e&&o(Dr),e&&o(se),$(yt),$(He),e&&o(Lr),e&&o(ne),$(wt),$(Me),e&&o(Pr),e&&o($e),$(Tt),e&&o(Cr),e&&o(ye),$(kt),e&&o(zr),e&&o(we),$(xt),e&&o(Sr),e&&o(ae),$(qt),$(Ve),e&&o(Fr),e&&o(Te),$(Et),e&&o(Ar),e&&o(ke),$(Dt),e&&o(Or),e&&o(V),$(Pt),e&&o(Ir),e&&o(Le),$(Ct)}}}const al={local:"custom-layers-and-utilities",sections:[{local:"transformers.Conv1D",title:"Pytorch custom modules"},{local:"transformers.apply_chunking_to_forward",title:"PyTorch Helper Functions"},{local:"transformers.modeling_tf_utils.TFConv1D",title:"TensorFlow custom layers"},{local:"transformers.modeling_tf_utils.TFCausalLanguageModelingLoss",title:"TensorFlow loss functions"},{local:"transformers.modeling_tf_utils.get_initializer",title:"TensorFlow Helper Functions"}],title:"Custom Layers and Utilities"};function il(z){return Ji(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fl extends Ui{constructor(m){super();Ki(this,m,il,nl,Wi,{})}}export{fl as default,al as metadata};
