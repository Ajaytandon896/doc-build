import{S as Hr,i as Qr,s as Xr,e as n,k as d,w as p,t as r,M as Kr,c as s,d as o,m as c,a,x as u,h as i,b as l,F as e,g as m,y as _,q as g,o as v,B as T,v as Yr}from"../../chunks/vendor-6b77c823.js";import{T as Ur}from"../../chunks/Tip-39098574.js";import{D as L}from"../../chunks/Docstring-af1d0ae0.js";import{C as Xo}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as tt}from"../../chunks/IconCopyLink-7a11ce68.js";function Jr(ot){let f,P,k,F,C;return{c(){f=n("p"),P=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),k=n("code"),F=r("Module"),C=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){f=s(y,"P",{});var w=a(f);P=i(w,"Although the recipe for forward pass needs to be defined within this function, one should call the "),k=s(w,"CODE",{});var A=a(k);F=i(A,"Module"),A.forEach(o),C=i(w,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),w.forEach(o)},m(y,w){m(y,f,w),e(f,P),e(f,k),e(k,F),e(f,C)},d(y){y&&o(f)}}}function Zr(ot){let f,P,k,F,C;return{c(){f=n("p"),P=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),k=n("code"),F=r("Module"),C=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(y){f=s(y,"P",{});var w=a(f);P=i(w,"Although the recipe for forward pass needs to be defined within this function, one should call the "),k=s(w,"CODE",{});var A=a(k);F=i(A,"Module"),A.forEach(o),C=i(w,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),w.forEach(o)},m(y,w){m(y,f,w),e(f,P),e(f,k),e(k,F),e(f,C)},d(y){y&&o(f)}}}function ei(ot){let f,P,k,F,C,y,w,A,Ko,po,U,$t,Yo,Jo,ve,Zo,en,uo,H,ae,zt,Te,tn,qt,on,_o,re,nn,ke,sn,an,go,nt,rn,vo,st,Et,dn,To,j,cn,be,ln,hn,ye,mn,fn,ko,Q,ie,xt,we,pn,Ct,un,bo,at,X,_n,rt,gn,vn,it,Tn,kn,yo,K,de,Pt,Me,bn,It,yn,wo,M,Fe,wn,Se,Mn,dt,Fn,Sn,$n,Y,zn,ct,qn,En,lt,xn,Cn,Pn,At,In,An,$e,Dn,ce,ze,Nn,J,Ln,Dt,jn,On,Nt,Gn,Wn,Mo,Z,le,Lt,qe,Rn,jt,Bn,Fo,b,Ee,Vn,Ot,Un,Hn,D,Gt,Qn,Xn,Wt,Kn,Yn,N,Jn,Rt,Zn,es,Bt,ts,os,Vt,ns,ss,as,xe,rs,Ut,is,ds,cs,Ce,ls,ht,hs,ms,fs,O,Pe,ps,Ht,us,_s,Ie,mt,gs,Qt,vs,Ts,ft,ks,Xt,bs,ys,he,Ae,ws,De,Ms,Kt,Fs,Ss,$s,q,Ne,zs,Yt,qs,Es,Le,xs,ee,Cs,Jt,Ps,Is,Zt,As,Ds,Ns,eo,Ls,js,pt,je,So,te,me,to,Oe,Os,oo,Gs,$o,$,Ge,Ws,no,Rs,Bs,We,Vs,ut,Us,Hs,Qs,Re,Xs,Be,Ks,Ys,Js,E,Ve,Zs,oe,ea,_t,ta,oa,so,na,sa,aa,fe,ra,ao,ia,da,Ue,zo,ne,pe,ro,He,ca,io,la,qo,z,Qe,ha,co,ma,fa,Xe,pa,gt,ua,_a,ga,Ke,va,Ye,Ta,ka,ba,x,Je,ya,se,wa,vt,Ma,Fa,lo,Sa,$a,za,ue,qa,ho,Ea,xa,Ze,Eo;return y=new tt({}),Te=new tt({}),we=new tt({}),Me=new tt({}),Fe=new L({props:{name:"class transformers.FSMTConfig",anchor:"transformers.FSMTConfig",parameters:[{name:"langs",val:" = ['en', 'de']"},{name:"src_vocab_size",val:" = 42024"},{name:"tgt_vocab_size",val:" = 42024"},{name:"activation_function",val:" = 'relu'"},{name:"d_model",val:" = 1024"},{name:"max_length",val:" = 200"},{name:"max_position_embeddings",val:" = 1024"},{name:"encoder_ffn_dim",val:" = 4096"},{name:"encoder_layers",val:" = 12"},{name:"encoder_attention_heads",val:" = 16"},{name:"encoder_layerdrop",val:" = 0.0"},{name:"decoder_ffn_dim",val:" = 4096"},{name:"decoder_layers",val:" = 12"},{name:"decoder_attention_heads",val:" = 16"},{name:"decoder_layerdrop",val:" = 0.0"},{name:"attention_dropout",val:" = 0.0"},{name:"dropout",val:" = 0.1"},{name:"activation_dropout",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"decoder_start_token_id",val:" = 2"},{name:"is_encoder_decoder",val:" = True"},{name:"scale_embedding",val:" = True"},{name:"tie_word_embeddings",val:" = False"},{name:"num_beams",val:" = 5"},{name:"length_penalty",val:" = 1.0"},{name:"early_stopping",val:" = False"},{name:"use_cache",val:" = True"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"forced_eos_token_id",val:" = 2"},{name:"**common_kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/configuration_fsmt.py#L41",parametersDescription:[{anchor:"transformers.FSMTConfig.langs",description:`<strong>langs</strong> (<code>List[str]</code>) &#x2014;
A list with source language and target_language (e.g., [&#x2018;en&#x2019;, &#x2018;ru&#x2019;]).`,name:"langs"},{anchor:"transformers.FSMTConfig.src_vocab_size",description:`<strong>src_vocab_size</strong> (<code>int</code>) &#x2014;
Vocabulary size of the encoder. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed to the forward method in the encoder.`,name:"src_vocab_size"},{anchor:"transformers.FSMTConfig.tgt_vocab_size",description:`<strong>tgt_vocab_size</strong> (<code>int</code>) &#x2014;
Vocabulary size of the decoder. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed to the forward method in the decoder.`,name:"tgt_vocab_size"},{anchor:"transformers.FSMTConfig.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimensionality of the layers and the pooler layer.`,name:"d_model"},{anchor:"transformers.FSMTConfig.encoder_layers",description:`<strong>encoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of encoder layers.`,name:"encoder_layers"},{anchor:"transformers.FSMTConfig.decoder_layers",description:`<strong>decoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of decoder layers.`,name:"decoder_layers"},{anchor:"transformers.FSMTConfig.encoder_attention_heads",description:`<strong>encoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"encoder_attention_heads"},{anchor:"transformers.FSMTConfig.decoder_attention_heads",description:`<strong>decoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"decoder_attention_heads"},{anchor:"transformers.FSMTConfig.decoder_ffn_dim",description:`<strong>decoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"decoder_ffn_dim"},{anchor:"transformers.FSMTConfig.encoder_ffn_dim",description:`<strong>encoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"encoder_ffn_dim"},{anchor:"transformers.FSMTConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.FSMTConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.FSMTConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.FSMTConfig.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.`,name:"activation_dropout"},{anchor:"transformers.FSMTConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.FSMTConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.FSMTConfig.scale_embedding",description:`<strong>scale_embedding</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Scale embeddings by diving by sqrt(d_model).`,name:"scale_embedding"},{anchor:"transformers.FSMTConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Beginning of stream token id.`,name:"bos_token_id"},{anchor:"transformers.FSMTConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Padding token id.`,name:"pad_token_id"},{anchor:"transformers.FSMTConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
End of stream token id.`,name:"eos_token_id"},{anchor:"transformers.FSMTConfig.decoder_start_token_id",description:`<strong>decoder_start_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
This model starts decoding with <code>eos_token_id</code>
encoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
Google &#x201C;layerdrop arxiv&#x201D;, as its not explainable in one line.
decoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
Google &#x201C;layerdrop arxiv&#x201D;, as its not explainable in one line.`,name:"decoder_start_token_id"},{anchor:"transformers.FSMTConfig.is_encoder_decoder",description:`<strong>is_encoder_decoder</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether this is an encoder/decoder model.`,name:"is_encoder_decoder"},{anchor:"transformers.FSMTConfig.tie_word_embeddings",description:`<strong>tie_word_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to tie input and output embeddings.`,name:"tie_word_embeddings"},{anchor:"transformers.FSMTConfig.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>, defaults to 5) &#x2014;
Number of beams for beam search that will be used by default in the <code>generate</code> method of the model. 1 means
no beam search.`,name:"num_beams"},{anchor:"transformers.FSMTConfig.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Exponential penalty to the length that will be used by default in the <code>generate</code> method of the model.`,name:"length_penalty"},{anchor:"transformers.FSMTConfig.early_stopping",description:`<strong>early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Flag that will be used by default in the <code>generate</code> method of the model. Whether to stop the beam search
when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"early_stopping"},{anchor:"transformers.FSMTConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.FSMTConfig.forced_eos_token_id",description:`<strong>forced_eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached. Usually set to
<code>eos_token_id</code>.`,name:"forced_eos_token_id"}]}}),$e=new Xo({props:{code:`from transformers import FSMTConfig, FSMTModel

config = FSMTConfig.from_pretrained("facebook/wmt19-en-ru")
model = FSMTModel(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FSMTConfig, FSMTModel

<span class="hljs-meta">&gt;&gt;&gt; </span>config = FSMTConfig.from_pretrained(<span class="hljs-string">&quot;facebook/wmt19-en-ru&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FSMTModel(config)`}}),ze=new L({props:{name:"to_dict",anchor:"transformers.FSMTConfig.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/configuration_fsmt.py#L209",returnDescription:`
<p>Dictionary of all the attributes that make up this configuration instance,</p>
`,returnType:`
<p><code>Dict[str, any]</code></p>
`}}),qe=new tt({}),Ee=new L({props:{name:"class transformers.FSMTTokenizer",anchor:"transformers.FSMTTokenizer",parameters:[{name:"langs",val:" = None"},{name:"src_vocab_file",val:" = None"},{name:"tgt_vocab_file",val:" = None"},{name:"merges_file",val:" = None"},{name:"do_lower_case",val:" = False"},{name:"unk_token",val:" = '<unk>'"},{name:"bos_token",val:" = '<s>'"},{name:"sep_token",val:" = '</s>'"},{name:"pad_token",val:" = '<pad>'"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/tokenization_fsmt.py#L137",parametersDescription:[{anchor:"transformers.FSMTTokenizer.langs",description:`<strong>langs</strong> (<code>List[str]</code>) &#x2014;
A list of two languages to translate from and to, for instance <code>[&quot;en&quot;, &quot;ru&quot;]</code>.`,name:"langs"},{anchor:"transformers.FSMTTokenizer.src_vocab_file",description:`<strong>src_vocab_file</strong> (<code>str</code>) &#x2014;
File containing the vocabulary for the source language.`,name:"src_vocab_file"},{anchor:"transformers.FSMTTokenizer.tgt_vocab_file",description:`<strong>tgt_vocab_file</strong> (<code>st</code>) &#x2014;
File containing the vocabulary for the target language.`,name:"tgt_vocab_file"},{anchor:"transformers.FSMTTokenizer.merges_file",description:`<strong>merges_file</strong> (<code>str</code>) &#x2014;
File containing the merges.`,name:"merges_file"},{anchor:"transformers.FSMTTokenizer.do_lower_case",description:`<strong>do_lower_case</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to lowercase the input when tokenizing.`,name:"do_lower_case"},{anchor:"transformers.FSMTTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.FSMTTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.FSMTTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.FSMTTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"}]}}),Pe=new L({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.FSMTTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/tokenization_fsmt.py#L397",parametersDescription:[{anchor:"transformers.FSMTTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.FSMTTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ae=new L({props:{name:"get_special_tokens_mask",anchor:"transformers.FSMTTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/tokenization_fsmt.py#L423",parametersDescription:[{anchor:"transformers.FSMTTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.FSMTTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.FSMTTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ne=new L({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.FSMTTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/tokenization_fsmt.py#L451",parametersDescription:[{anchor:"transformers.FSMTTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.FSMTTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#token-type-ids">token type IDs</a> according to the given sequence(s).</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Le=new Xo({props:{code:`0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1
| first sequence    | second sequence |`,highlighted:`0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1 1
| first sequence    | second sequence |`}}),je=new L({props:{name:"save_vocabulary",anchor:"transformers.FSMTTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/tokenization_fsmt.py#L484"}}),Oe=new tt({}),Ge=new L({props:{name:"class transformers.FSMTModel",anchor:"transformers.FSMTModel",parameters:[{name:"config",val:": FSMTConfig"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/modeling_fsmt.py#L989",parametersDescription:[{anchor:"transformers.FSMTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ve=new L({props:{name:"forward",anchor:"transformers.FSMTModel.forward",parameters:[{name:"input_ids",val:""},{name:"attention_mask",val:" = None"},{name:"decoder_input_ids",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"decoder_head_mask",val:" = None"},{name:"cross_attn_head_mask",val:" = None"},{name:"encoder_outputs",val:": typing.Optional[typing.Tuple] = None"},{name:"past_key_values",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/modeling_fsmt.py#L1003",parametersDescription:[{anchor:"transformers.FSMTModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>IIndices can be obtained using <code>FSTMTokenizer</code>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FSMTModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.FSMTModel.forward.decoder_input_ids",description:`<strong>decoder_input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, target_sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of decoder input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTTokenizer">FSMTTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#decoder-input-ids">What are decoder input IDs?</a></p>
<p>FSMT uses the <code>eos_token_id</code> as the starting token for <code>decoder_input_ids</code> generation. If <code>past_key_values</code>
is used, optionally only the last <code>decoder_input_ids</code> have to be input (see <code>past_key_values</code>).`,name:"decoder_input_ids"},{anchor:"transformers.FSMTModel.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, target_sequence_length)</code>, <em>optional</em>) &#x2014;
Default behavior: generate a tensor that ignores pad tokens in <code>decoder_input_ids</code>. Causal mask will also
be used by default.`,name:"decoder_attention_mask"},{anchor:"transformers.FSMTModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(encoder_layers, encoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules in the encoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FSMTModel.forward.decoder_head_mask",description:`<strong>decoder_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules in the decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"decoder_head_mask"},{anchor:"transformers.FSMTModel.forward.cross_attn_head_mask",description:`<strong>cross_attn_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the cross-attention modules in the decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"cross_attn_head_mask"},{anchor:"transformers.FSMTModel.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>Tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code> is a sequence of hidden-states at
the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.FSMTModel.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code> with each tuple having 4 tensors of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>) &#x2014;
Contains precomputed key and value hidden-states of the attention blocks. Can be used to speed up decoding.
If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those that
don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all
<code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.FSMTModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.FSMTModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FSMTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FSMTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.modeling_outputs.Seq2SeqModelOutput"
>transformers.modeling_outputs.Seq2SeqModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig"
>FSMTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</p>
<p>If <code>past_key_values</code> is used only the last hidden-state of the sequences of shape <code>(batch_size, 1, hidden_size)</code> is output.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.</p>
</li>
<li>
<p><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</p>
</li>
<li>
<p><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.modeling_outputs.Seq2SeqModelOutput"
>transformers.modeling_outputs.Seq2SeqModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),fe=new Ur({props:{$$slots:{default:[Jr]},$$scope:{ctx:ot}}}),Ue=new Xo({props:{code:`from transformers import FSMTTokenizer, FSMTModel
import torch

tokenizer = FSMTTokenizer.from_pretrained("facebook/wmt19-ru-en")
model = FSMTModel.from_pretrained("facebook/wmt19-ru-en")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FSMTTokenizer, FSMTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = FSMTTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/wmt19-ru-en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FSMTModel.from_pretrained(<span class="hljs-string">&quot;facebook/wmt19-ru-en&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),He=new tt({}),Qe=new L({props:{name:"class transformers.FSMTForConditionalGeneration",anchor:"transformers.FSMTForConditionalGeneration",parameters:[{name:"config",val:": FSMTConfig"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/modeling_fsmt.py#L1113",parametersDescription:[{anchor:"transformers.FSMTForConditionalGeneration.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Je=new L({props:{name:"forward",anchor:"transformers.FSMTForConditionalGeneration.forward",parameters:[{name:"input_ids",val:""},{name:"attention_mask",val:" = None"},{name:"decoder_input_ids",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"decoder_head_mask",val:" = None"},{name:"cross_attn_head_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"past_key_values",val:" = None"},{name:"labels",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/fsmt/modeling_fsmt.py#L1129",parametersDescription:[{anchor:"transformers.FSMTForConditionalGeneration.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>IIndices can be obtained using <code>FSTMTokenizer</code>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FSMTForConditionalGeneration.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.FSMTForConditionalGeneration.forward.decoder_input_ids",description:`<strong>decoder_input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, target_sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of decoder input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTTokenizer">FSMTTokenizer</a>. See <a href="/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#decoder-input-ids">What are decoder input IDs?</a></p>
<p>FSMT uses the <code>eos_token_id</code> as the starting token for <code>decoder_input_ids</code> generation. If <code>past_key_values</code>
is used, optionally only the last <code>decoder_input_ids</code> have to be input (see <code>past_key_values</code>).`,name:"decoder_input_ids"},{anchor:"transformers.FSMTForConditionalGeneration.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, target_sequence_length)</code>, <em>optional</em>) &#x2014;
Default behavior: generate a tensor that ignores pad tokens in <code>decoder_input_ids</code>. Causal mask will also
be used by default.`,name:"decoder_attention_mask"},{anchor:"transformers.FSMTForConditionalGeneration.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(encoder_layers, encoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules in the encoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FSMTForConditionalGeneration.forward.decoder_head_mask",description:`<strong>decoder_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules in the decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"decoder_head_mask"},{anchor:"transformers.FSMTForConditionalGeneration.forward.cross_attn_head_mask",description:`<strong>cross_attn_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the cross-attention modules in the decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"cross_attn_head_mask"},{anchor:"transformers.FSMTForConditionalGeneration.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>Tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code> is a sequence of hidden-states at
the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.FSMTForConditionalGeneration.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>Tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code> with each tuple having 4 tensors of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>) &#x2014;
Contains precomputed key and value hidden-states of the attention blocks. Can be used to speed up decoding.
If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those that
don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all
<code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.FSMTForConditionalGeneration.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.FSMTForConditionalGeneration.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FSMTForConditionalGeneration.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FSMTForConditionalGeneration.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.FSMTForConditionalGeneration.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are ignored
(masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.modeling_outputs.Seq2SeqLMOutput"
>transformers.modeling_outputs.Seq2SeqLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig"
>FSMTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional tensors of shape
<code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention
blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
<li>
<p><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the decoder at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.</p>
</li>
<li>
<p><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</p>
</li>
<li>
<p><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the encoder at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the encoder, after the attention softmax, used to compute the weighted average in the
self-attention heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/v4.18.0/en/main_classes/output#transformers.modeling_outputs.Seq2SeqLMOutput"
>transformers.modeling_outputs.Seq2SeqLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ue=new Ur({props:{$$slots:{default:[Zr]},$$scope:{ctx:ot}}}),Ze=new Xo({props:{code:`from transformers import FSMTTokenizer, FSMTForConditionalGeneration

mname = "facebook/wmt19-ru-en"
model = FSMTForConditionalGeneration.from_pretrained(mname)
tokenizer = FSMTTokenizer.from_pretrained(mname)

src_text = "\u041C\u0430\u0448\u0438\u043D\u043D\u043E\u0435 \u043E\u0431\u0443\u0447\u0435\u043D\u0438\u0435 - \u044D\u0442\u043E \u0437\u0434\u043E\u0440\u043E\u0432\u043E, \u043D\u0435 \u0442\u0430\u043A \u043B\u0438?"
input_ids = tokenizer(src_text, return_tensors="pt").input_ids
outputs = model.generate(input_ids, num_beams=5, num_return_sequences=3)
tokenizer.decode(outputs[0], skip_special_tokens=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FSMTTokenizer, FSMTForConditionalGeneration

<span class="hljs-meta">&gt;&gt;&gt; </span>mname = <span class="hljs-string">&quot;facebook/wmt19-ru-en&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FSMTForConditionalGeneration.from_pretrained(mname)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = FSMTTokenizer.from_pretrained(mname)

<span class="hljs-meta">&gt;&gt;&gt; </span>src_text = <span class="hljs-string">&quot;\u041C\u0430\u0448\u0438\u043D\u043D\u043E\u0435 \u043E\u0431\u0443\u0447\u0435\u043D\u0438\u0435 - \u044D\u0442\u043E \u0437\u0434\u043E\u0440\u043E\u0432\u043E, \u043D\u0435 \u0442\u0430\u043A \u043B\u0438?&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(src_text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model.generate(input_ids, num_beams=<span class="hljs-number">5</span>, num_return_sequences=<span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(outputs[<span class="hljs-number">0</span>], skip_special_tokens=<span class="hljs-literal">True</span>)
<span class="hljs-string">&quot;Machine learning is great, isn&#x27;t it?&quot;</span>`}}),{c(){f=n("meta"),P=d(),k=n("h1"),F=n("a"),C=n("span"),p(y.$$.fragment),w=d(),A=n("span"),Ko=r("FSMT"),po=d(),U=n("p"),$t=n("strong"),Yo=r("DISCLAIMER:"),Jo=r(" If you see something strange, file a "),ve=n("a"),Zo=r("Github Issue"),en=r(` and assign
@stas00.`),uo=d(),H=n("h2"),ae=n("a"),zt=n("span"),p(Te.$$.fragment),tn=d(),qt=n("span"),on=r("Overview"),_o=d(),re=n("p"),nn=r("FSMT (FairSeq MachineTranslation) models were introduced in "),ke=n("a"),sn=r("Facebook FAIR\u2019s WMT19 News Translation Task Submission"),an=r(" by Nathan Ng, Kyra Yee, Alexei Baevski, Myle Ott, Michael Auli, Sergey Edunov."),go=d(),nt=n("p"),rn=r("The abstract of the paper is the following:"),vo=d(),st=n("p"),Et=n("em"),dn=r(`This paper describes Facebook FAIR\u2019s submission to the WMT19 shared news translation task. We participate in two
language pairs and four language directions, English <-> German and English <-> Russian. Following our submission from
last year, our baseline systems are large BPE-based transformer models trained with the Fairseq sequence modeling
toolkit which rely on sampled back-translations. This year we experiment with different bitext data filtering schemes,
as well as with adding filtered back-translated data. We also ensemble and fine-tune our models on domain-specific
data, then decode using noisy channel model reranking. Our submissions are ranked first in all four directions of the
human evaluation campaign. On En->De, our system significantly outperforms other systems as well as human translations.
This system improves upon our WMT\u201918 submission by 4.5 BLEU points.`),To=d(),j=n("p"),cn=r("This model was contributed by "),be=n("a"),ln=r("stas"),hn=r(`. The original code can be found
`),ye=n("a"),mn=r("here"),fn=r("."),ko=d(),Q=n("h2"),ie=n("a"),xt=n("span"),p(we.$$.fragment),pn=d(),Ct=n("span"),un=r("Implementation Notes"),bo=d(),at=n("ul"),X=n("li"),_n=r(`FSMT uses source and target vocabulary pairs that aren\u2019t combined into one. It doesn\u2019t share embeddings tokens
either. Its tokenizer is very similar to `),rt=n("a"),gn=r("XLMTokenizer"),vn=r(` and the main model is derived from
`),it=n("a"),Tn=r("BartModel"),kn=r("."),yo=d(),K=n("h2"),de=n("a"),Pt=n("span"),p(Me.$$.fragment),bn=d(),It=n("span"),yn=r("FSMTConfig"),wo=d(),M=n("div"),p(Fe.$$.fragment),wn=d(),Se=n("p"),Mn=r("This is the configuration class to store the configuration of a "),dt=n("a"),Fn=r("FSMTModel"),Sn=r(`. It is used to instantiate a FSMT
model according to the specified arguments, defining the model architecture.`),$n=d(),Y=n("p"),zn=r("Configuration objects inherit from "),ct=n("a"),qn=r("PretrainedConfig"),En=r(` and can be used to control the model outputs. Read the
documentation from `),lt=n("a"),xn=r("PretrainedConfig"),Cn=r(" for more information."),Pn=d(),At=n("p"),In=r("Examples:"),An=d(),p($e.$$.fragment),Dn=d(),ce=n("div"),p(ze.$$.fragment),Nn=d(),J=n("p"),Ln=r("Serializes this instance to a Python dictionary. Override the default "),Dt=n("em"),jn=r("to_dict()"),On=r(" from "),Nt=n("em"),Gn=r("PretrainedConfig"),Wn=r("."),Mo=d(),Z=n("h2"),le=n("a"),Lt=n("span"),p(qe.$$.fragment),Rn=d(),jt=n("span"),Bn=r("FSMTTokenizer"),Fo=d(),b=n("div"),p(Ee.$$.fragment),Vn=d(),Ot=n("p"),Un=r("Construct an FAIRSEQ Transformer tokenizer. Based on Byte-Pair Encoding. The tokenization process is the following:"),Hn=d(),D=n("ul"),Gt=n("li"),Qn=r("Moses preprocessing and tokenization."),Xn=d(),Wt=n("li"),Kn=r("Normalizing all inputs text."),Yn=d(),N=n("li"),Jn=r("The arguments "),Rt=n("code"),Zn=r("special_tokens"),es=r(" and the function "),Bt=n("code"),ts=r("set_special_tokens"),os=r(`, can be used to add additional symbols (like
\u201D`),Vt=n("strong"),ns=r("classify"),ss=r("\u201D) to a vocabulary."),as=d(),xe=n("li"),rs=r("The argument "),Ut=n("code"),is=r("langs"),ds=r(" defines a pair of languages."),cs=d(),Ce=n("p"),ls=r("This tokenizer inherits from "),ht=n("a"),hs=r("PreTrainedTokenizer"),ms=r(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),fs=d(),O=n("div"),p(Pe.$$.fragment),ps=d(),Ht=n("p"),us=r(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A FAIRSEQ Transformer sequence has the following format:`),_s=d(),Ie=n("ul"),mt=n("li"),gs=r("single sequence: "),Qt=n("code"),vs=r("<s> X </s>"),Ts=d(),ft=n("li"),ks=r("pair of sequences: "),Xt=n("code"),bs=r("<s> A </s> B </s>"),ys=d(),he=n("div"),p(Ae.$$.fragment),ws=d(),De=n("p"),Ms=r(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Kt=n("code"),Fs=r("prepare_for_model"),Ss=r(" method."),$s=d(),q=n("div"),p(Ne.$$.fragment),zs=d(),Yt=n("p"),qs=r(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. A FAIRSEQ
Transformer sequence pair mask has the following format:`),Es=d(),p(Le.$$.fragment),xs=d(),ee=n("p"),Cs=r("If "),Jt=n("code"),Ps=r("token_ids_1"),Is=r(" is "),Zt=n("code"),As=r("None"),Ds=r(", this method only returns the first portion of the mask (0s)."),Ns=d(),eo=n("p"),Ls=r(`Creates a mask from the two sequences passed to be used in a sequence-pair classification task. An
FAIRSEQ_TRANSFORMER sequence pair mask has the following format:`),js=d(),pt=n("div"),p(je.$$.fragment),So=d(),te=n("h2"),me=n("a"),to=n("span"),p(Oe.$$.fragment),Os=d(),oo=n("span"),Gs=r("FSMTModel"),$o=d(),$=n("div"),p(Ge.$$.fragment),Ws=d(),no=n("p"),Rs=r("The bare FSMT Model outputting raw hidden-states without any specific head on top."),Bs=d(),We=n("p"),Vs=r("This model inherits from "),ut=n("a"),Us=r("PreTrainedModel"),Hs=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qs=d(),Re=n("p"),Xs=r("This model is also a PyTorch "),Be=n("a"),Ks=r("torch.nn.Module"),Ys=r(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Js=d(),E=n("div"),p(Ve.$$.fragment),Zs=d(),oe=n("p"),ea=r("The "),_t=n("a"),ta=r("FSMTModel"),oa=r(" forward method, overrides the "),so=n("code"),na=r("__call__"),sa=r(" special method."),aa=d(),p(fe.$$.fragment),ra=d(),ao=n("p"),ia=r("Example:"),da=d(),p(Ue.$$.fragment),zo=d(),ne=n("h2"),pe=n("a"),ro=n("span"),p(He.$$.fragment),ca=d(),io=n("span"),la=r("FSMTForConditionalGeneration"),qo=d(),z=n("div"),p(Qe.$$.fragment),ha=d(),co=n("p"),ma=r("The FSMT Model with a language modeling head. Can be used for summarization."),fa=d(),Xe=n("p"),pa=r("This model inherits from "),gt=n("a"),ua=r("PreTrainedModel"),_a=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ga=d(),Ke=n("p"),va=r("This model is also a PyTorch "),Ye=n("a"),Ta=r("torch.nn.Module"),ka=r(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ba=d(),x=n("div"),p(Je.$$.fragment),ya=d(),se=n("p"),wa=r("The "),vt=n("a"),Ma=r("FSMTForConditionalGeneration"),Fa=r(" forward method, overrides the "),lo=n("code"),Sa=r("__call__"),$a=r(" special method."),za=d(),p(ue.$$.fragment),qa=d(),ho=n("p"),Ea=r("Translation example::"),xa=d(),p(Ze.$$.fragment),this.h()},l(t){const h=Kr('[data-svelte="svelte-1phssyn"]',document.head);f=s(h,"META",{name:!0,content:!0}),h.forEach(o),P=c(t),k=s(t,"H1",{class:!0});var et=a(k);F=s(et,"A",{id:!0,class:!0,href:!0});var mo=a(F);C=s(mo,"SPAN",{});var Ia=a(C);u(y.$$.fragment,Ia),Ia.forEach(o),mo.forEach(o),w=c(et),A=s(et,"SPAN",{});var Aa=a(A);Ko=i(Aa,"FSMT"),Aa.forEach(o),et.forEach(o),po=c(t),U=s(t,"P",{});var fo=a(U);$t=s(fo,"STRONG",{});var Da=a($t);Yo=i(Da,"DISCLAIMER:"),Da.forEach(o),Jo=i(fo," If you see something strange, file a "),ve=s(fo,"A",{href:!0,rel:!0});var Na=a(ve);Zo=i(Na,"Github Issue"),Na.forEach(o),en=i(fo,` and assign
@stas00.`),fo.forEach(o),uo=c(t),H=s(t,"H2",{class:!0});var xo=a(H);ae=s(xo,"A",{id:!0,class:!0,href:!0});var La=a(ae);zt=s(La,"SPAN",{});var ja=a(zt);u(Te.$$.fragment,ja),ja.forEach(o),La.forEach(o),tn=c(xo),qt=s(xo,"SPAN",{});var Oa=a(qt);on=i(Oa,"Overview"),Oa.forEach(o),xo.forEach(o),_o=c(t),re=s(t,"P",{});var Co=a(re);nn=i(Co,"FSMT (FairSeq MachineTranslation) models were introduced in "),ke=s(Co,"A",{href:!0,rel:!0});var Ga=a(ke);sn=i(Ga,"Facebook FAIR\u2019s WMT19 News Translation Task Submission"),Ga.forEach(o),an=i(Co," by Nathan Ng, Kyra Yee, Alexei Baevski, Myle Ott, Michael Auli, Sergey Edunov."),Co.forEach(o),go=c(t),nt=s(t,"P",{});var Wa=a(nt);rn=i(Wa,"The abstract of the paper is the following:"),Wa.forEach(o),vo=c(t),st=s(t,"P",{});var Ra=a(st);Et=s(Ra,"EM",{});var Ba=a(Et);dn=i(Ba,`This paper describes Facebook FAIR\u2019s submission to the WMT19 shared news translation task. We participate in two
language pairs and four language directions, English <-> German and English <-> Russian. Following our submission from
last year, our baseline systems are large BPE-based transformer models trained with the Fairseq sequence modeling
toolkit which rely on sampled back-translations. This year we experiment with different bitext data filtering schemes,
as well as with adding filtered back-translated data. We also ensemble and fine-tune our models on domain-specific
data, then decode using noisy channel model reranking. Our submissions are ranked first in all four directions of the
human evaluation campaign. On En->De, our system significantly outperforms other systems as well as human translations.
This system improves upon our WMT\u201918 submission by 4.5 BLEU points.`),Ba.forEach(o),Ra.forEach(o),To=c(t),j=s(t,"P",{});var Tt=a(j);cn=i(Tt,"This model was contributed by "),be=s(Tt,"A",{href:!0,rel:!0});var Va=a(be);ln=i(Va,"stas"),Va.forEach(o),hn=i(Tt,`. The original code can be found
`),ye=s(Tt,"A",{href:!0,rel:!0});var Ua=a(ye);mn=i(Ua,"here"),Ua.forEach(o),fn=i(Tt,"."),Tt.forEach(o),ko=c(t),Q=s(t,"H2",{class:!0});var Po=a(Q);ie=s(Po,"A",{id:!0,class:!0,href:!0});var Ha=a(ie);xt=s(Ha,"SPAN",{});var Qa=a(xt);u(we.$$.fragment,Qa),Qa.forEach(o),Ha.forEach(o),pn=c(Po),Ct=s(Po,"SPAN",{});var Xa=a(Ct);un=i(Xa,"Implementation Notes"),Xa.forEach(o),Po.forEach(o),bo=c(t),at=s(t,"UL",{});var Ka=a(at);X=s(Ka,"LI",{});var kt=a(X);_n=i(kt,`FSMT uses source and target vocabulary pairs that aren\u2019t combined into one. It doesn\u2019t share embeddings tokens
either. Its tokenizer is very similar to `),rt=s(kt,"A",{href:!0});var Ya=a(rt);gn=i(Ya,"XLMTokenizer"),Ya.forEach(o),vn=i(kt,` and the main model is derived from
`),it=s(kt,"A",{href:!0});var Ja=a(it);Tn=i(Ja,"BartModel"),Ja.forEach(o),kn=i(kt,"."),kt.forEach(o),Ka.forEach(o),yo=c(t),K=s(t,"H2",{class:!0});var Io=a(K);de=s(Io,"A",{id:!0,class:!0,href:!0});var Za=a(de);Pt=s(Za,"SPAN",{});var er=a(Pt);u(Me.$$.fragment,er),er.forEach(o),Za.forEach(o),bn=c(Io),It=s(Io,"SPAN",{});var tr=a(It);yn=i(tr,"FSMTConfig"),tr.forEach(o),Io.forEach(o),wo=c(t),M=s(t,"DIV",{class:!0});var I=a(M);u(Fe.$$.fragment,I),wn=c(I),Se=s(I,"P",{});var Ao=a(Se);Mn=i(Ao,"This is the configuration class to store the configuration of a "),dt=s(Ao,"A",{href:!0});var or=a(dt);Fn=i(or,"FSMTModel"),or.forEach(o),Sn=i(Ao,`. It is used to instantiate a FSMT
model according to the specified arguments, defining the model architecture.`),Ao.forEach(o),$n=c(I),Y=s(I,"P",{});var bt=a(Y);zn=i(bt,"Configuration objects inherit from "),ct=s(bt,"A",{href:!0});var nr=a(ct);qn=i(nr,"PretrainedConfig"),nr.forEach(o),En=i(bt,` and can be used to control the model outputs. Read the
documentation from `),lt=s(bt,"A",{href:!0});var sr=a(lt);xn=i(sr,"PretrainedConfig"),sr.forEach(o),Cn=i(bt," for more information."),bt.forEach(o),Pn=c(I),At=s(I,"P",{});var ar=a(At);In=i(ar,"Examples:"),ar.forEach(o),An=c(I),u($e.$$.fragment,I),Dn=c(I),ce=s(I,"DIV",{class:!0});var Do=a(ce);u(ze.$$.fragment,Do),Nn=c(Do),J=s(Do,"P",{});var yt=a(J);Ln=i(yt,"Serializes this instance to a Python dictionary. Override the default "),Dt=s(yt,"EM",{});var rr=a(Dt);jn=i(rr,"to_dict()"),rr.forEach(o),On=i(yt," from "),Nt=s(yt,"EM",{});var ir=a(Nt);Gn=i(ir,"PretrainedConfig"),ir.forEach(o),Wn=i(yt,"."),yt.forEach(o),Do.forEach(o),I.forEach(o),Mo=c(t),Z=s(t,"H2",{class:!0});var No=a(Z);le=s(No,"A",{id:!0,class:!0,href:!0});var dr=a(le);Lt=s(dr,"SPAN",{});var cr=a(Lt);u(qe.$$.fragment,cr),cr.forEach(o),dr.forEach(o),Rn=c(No),jt=s(No,"SPAN",{});var lr=a(jt);Bn=i(lr,"FSMTTokenizer"),lr.forEach(o),No.forEach(o),Fo=c(t),b=s(t,"DIV",{class:!0});var S=a(b);u(Ee.$$.fragment,S),Vn=c(S),Ot=s(S,"P",{});var hr=a(Ot);Un=i(hr,"Construct an FAIRSEQ Transformer tokenizer. Based on Byte-Pair Encoding. The tokenization process is the following:"),hr.forEach(o),Hn=c(S),D=s(S,"UL",{});var _e=a(D);Gt=s(_e,"LI",{});var mr=a(Gt);Qn=i(mr,"Moses preprocessing and tokenization."),mr.forEach(o),Xn=c(_e),Wt=s(_e,"LI",{});var fr=a(Wt);Kn=i(fr,"Normalizing all inputs text."),fr.forEach(o),Yn=c(_e),N=s(_e,"LI",{});var ge=a(N);Jn=i(ge,"The arguments "),Rt=s(ge,"CODE",{});var pr=a(Rt);Zn=i(pr,"special_tokens"),pr.forEach(o),es=i(ge," and the function "),Bt=s(ge,"CODE",{});var ur=a(Bt);ts=i(ur,"set_special_tokens"),ur.forEach(o),os=i(ge,`, can be used to add additional symbols (like
\u201D`),Vt=s(ge,"STRONG",{});var _r=a(Vt);ns=i(_r,"classify"),_r.forEach(o),ss=i(ge,"\u201D) to a vocabulary."),ge.forEach(o),as=c(_e),xe=s(_e,"LI",{});var Lo=a(xe);rs=i(Lo,"The argument "),Ut=s(Lo,"CODE",{});var gr=a(Ut);is=i(gr,"langs"),gr.forEach(o),ds=i(Lo," defines a pair of languages."),Lo.forEach(o),_e.forEach(o),cs=c(S),Ce=s(S,"P",{});var jo=a(Ce);ls=i(jo,"This tokenizer inherits from "),ht=s(jo,"A",{href:!0});var vr=a(ht);hs=i(vr,"PreTrainedTokenizer"),vr.forEach(o),ms=i(jo,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),jo.forEach(o),fs=c(S),O=s(S,"DIV",{class:!0});var wt=a(O);u(Pe.$$.fragment,wt),ps=c(wt),Ht=s(wt,"P",{});var Tr=a(Ht);us=i(Tr,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A FAIRSEQ Transformer sequence has the following format:`),Tr.forEach(o),_s=c(wt),Ie=s(wt,"UL",{});var Oo=a(Ie);mt=s(Oo,"LI",{});var Ca=a(mt);gs=i(Ca,"single sequence: "),Qt=s(Ca,"CODE",{});var kr=a(Qt);vs=i(kr,"<s> X </s>"),kr.forEach(o),Ca.forEach(o),Ts=c(Oo),ft=s(Oo,"LI",{});var Pa=a(ft);ks=i(Pa,"pair of sequences: "),Xt=s(Pa,"CODE",{});var br=a(Xt);bs=i(br,"<s> A </s> B </s>"),br.forEach(o),Pa.forEach(o),Oo.forEach(o),wt.forEach(o),ys=c(S),he=s(S,"DIV",{class:!0});var Go=a(he);u(Ae.$$.fragment,Go),ws=c(Go),De=s(Go,"P",{});var Wo=a(De);Ms=i(Wo,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Kt=s(Wo,"CODE",{});var yr=a(Kt);Fs=i(yr,"prepare_for_model"),yr.forEach(o),Ss=i(Wo," method."),Wo.forEach(o),Go.forEach(o),$s=c(S),q=s(S,"DIV",{class:!0});var G=a(q);u(Ne.$$.fragment,G),zs=c(G),Yt=s(G,"P",{});var wr=a(Yt);qs=i(wr,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. A FAIRSEQ
Transformer sequence pair mask has the following format:`),wr.forEach(o),Es=c(G),u(Le.$$.fragment,G),xs=c(G),ee=s(G,"P",{});var Mt=a(ee);Cs=i(Mt,"If "),Jt=s(Mt,"CODE",{});var Mr=a(Jt);Ps=i(Mr,"token_ids_1"),Mr.forEach(o),Is=i(Mt," is "),Zt=s(Mt,"CODE",{});var Fr=a(Zt);As=i(Fr,"None"),Fr.forEach(o),Ds=i(Mt,", this method only returns the first portion of the mask (0s)."),Mt.forEach(o),Ns=c(G),eo=s(G,"P",{});var Sr=a(eo);Ls=i(Sr,`Creates a mask from the two sequences passed to be used in a sequence-pair classification task. An
FAIRSEQ_TRANSFORMER sequence pair mask has the following format:`),Sr.forEach(o),G.forEach(o),js=c(S),pt=s(S,"DIV",{class:!0});var $r=a(pt);u(je.$$.fragment,$r),$r.forEach(o),S.forEach(o),So=c(t),te=s(t,"H2",{class:!0});var Ro=a(te);me=s(Ro,"A",{id:!0,class:!0,href:!0});var zr=a(me);to=s(zr,"SPAN",{});var qr=a(to);u(Oe.$$.fragment,qr),qr.forEach(o),zr.forEach(o),Os=c(Ro),oo=s(Ro,"SPAN",{});var Er=a(oo);Gs=i(Er,"FSMTModel"),Er.forEach(o),Ro.forEach(o),$o=c(t),$=s(t,"DIV",{class:!0});var W=a($);u(Ge.$$.fragment,W),Ws=c(W),no=s(W,"P",{});var xr=a(no);Rs=i(xr,"The bare FSMT Model outputting raw hidden-states without any specific head on top."),xr.forEach(o),Bs=c(W),We=s(W,"P",{});var Bo=a(We);Vs=i(Bo,"This model inherits from "),ut=s(Bo,"A",{href:!0});var Cr=a(ut);Us=i(Cr,"PreTrainedModel"),Cr.forEach(o),Hs=i(Bo,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Bo.forEach(o),Qs=c(W),Re=s(W,"P",{});var Vo=a(Re);Xs=i(Vo,"This model is also a PyTorch "),Be=s(Vo,"A",{href:!0,rel:!0});var Pr=a(Be);Ks=i(Pr,"torch.nn.Module"),Pr.forEach(o),Ys=i(Vo,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vo.forEach(o),Js=c(W),E=s(W,"DIV",{class:!0});var R=a(E);u(Ve.$$.fragment,R),Zs=c(R),oe=s(R,"P",{});var Ft=a(oe);ea=i(Ft,"The "),_t=s(Ft,"A",{href:!0});var Ir=a(_t);ta=i(Ir,"FSMTModel"),Ir.forEach(o),oa=i(Ft," forward method, overrides the "),so=s(Ft,"CODE",{});var Ar=a(so);na=i(Ar,"__call__"),Ar.forEach(o),sa=i(Ft," special method."),Ft.forEach(o),aa=c(R),u(fe.$$.fragment,R),ra=c(R),ao=s(R,"P",{});var Dr=a(ao);ia=i(Dr,"Example:"),Dr.forEach(o),da=c(R),u(Ue.$$.fragment,R),R.forEach(o),W.forEach(o),zo=c(t),ne=s(t,"H2",{class:!0});var Uo=a(ne);pe=s(Uo,"A",{id:!0,class:!0,href:!0});var Nr=a(pe);ro=s(Nr,"SPAN",{});var Lr=a(ro);u(He.$$.fragment,Lr),Lr.forEach(o),Nr.forEach(o),ca=c(Uo),io=s(Uo,"SPAN",{});var jr=a(io);la=i(jr,"FSMTForConditionalGeneration"),jr.forEach(o),Uo.forEach(o),qo=c(t),z=s(t,"DIV",{class:!0});var B=a(z);u(Qe.$$.fragment,B),ha=c(B),co=s(B,"P",{});var Or=a(co);ma=i(Or,"The FSMT Model with a language modeling head. Can be used for summarization."),Or.forEach(o),fa=c(B),Xe=s(B,"P",{});var Ho=a(Xe);pa=i(Ho,"This model inherits from "),gt=s(Ho,"A",{href:!0});var Gr=a(gt);ua=i(Gr,"PreTrainedModel"),Gr.forEach(o),_a=i(Ho,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ho.forEach(o),ga=c(B),Ke=s(B,"P",{});var Qo=a(Ke);va=i(Qo,"This model is also a PyTorch "),Ye=s(Qo,"A",{href:!0,rel:!0});var Wr=a(Ye);Ta=i(Wr,"torch.nn.Module"),Wr.forEach(o),ka=i(Qo,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Qo.forEach(o),ba=c(B),x=s(B,"DIV",{class:!0});var V=a(x);u(Je.$$.fragment,V),ya=c(V),se=s(V,"P",{});var St=a(se);wa=i(St,"The "),vt=s(St,"A",{href:!0});var Rr=a(vt);Ma=i(Rr,"FSMTForConditionalGeneration"),Rr.forEach(o),Fa=i(St," forward method, overrides the "),lo=s(St,"CODE",{});var Br=a(lo);Sa=i(Br,"__call__"),Br.forEach(o),$a=i(St," special method."),St.forEach(o),za=c(V),u(ue.$$.fragment,V),qa=c(V),ho=s(V,"P",{});var Vr=a(ho);Ea=i(Vr,"Translation example::"),Vr.forEach(o),xa=c(V),u(Ze.$$.fragment,V),V.forEach(o),B.forEach(o),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(ti)),l(F,"id","fsmt"),l(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(F,"href","#fsmt"),l(k,"class","relative group"),l(ve,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),l(ve,"rel","nofollow"),l(ae,"id","overview"),l(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ae,"href","#overview"),l(H,"class","relative group"),l(ke,"href","https://arxiv.org/abs/1907.06616"),l(ke,"rel","nofollow"),l(be,"href","https://huggingface.co/stas"),l(be,"rel","nofollow"),l(ye,"href","https://github.com/pytorch/fairseq/tree/master/examples/wmt19"),l(ye,"rel","nofollow"),l(ie,"id","implementation-notes"),l(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ie,"href","#implementation-notes"),l(Q,"class","relative group"),l(rt,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMTokenizer"),l(it,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartModel"),l(de,"id","transformers.FSMTConfig"),l(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(de,"href","#transformers.FSMTConfig"),l(K,"class","relative group"),l(dt,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel"),l(ct,"href","/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig"),l(lt,"href","/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig"),l(ce,"class","docstring"),l(M,"class","docstring"),l(le,"id","transformers.FSMTTokenizer"),l(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(le,"href","#transformers.FSMTTokenizer"),l(Z,"class","relative group"),l(ht,"href","/docs/transformers/v4.18.0/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(O,"class","docstring"),l(he,"class","docstring"),l(q,"class","docstring"),l(pt,"class","docstring"),l(b,"class","docstring"),l(me,"id","transformers.FSMTModel"),l(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(me,"href","#transformers.FSMTModel"),l(te,"class","relative group"),l(ut,"href","/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel"),l(Be,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Be,"rel","nofollow"),l(_t,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel"),l(E,"class","docstring"),l($,"class","docstring"),l(pe,"id","transformers.FSMTForConditionalGeneration"),l(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(pe,"href","#transformers.FSMTForConditionalGeneration"),l(ne,"class","relative group"),l(gt,"href","/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel"),l(Ye,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Ye,"rel","nofollow"),l(vt,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),l(x,"class","docstring"),l(z,"class","docstring")},m(t,h){e(document.head,f),m(t,P,h),m(t,k,h),e(k,F),e(F,C),_(y,C,null),e(k,w),e(k,A),e(A,Ko),m(t,po,h),m(t,U,h),e(U,$t),e($t,Yo),e(U,Jo),e(U,ve),e(ve,Zo),e(U,en),m(t,uo,h),m(t,H,h),e(H,ae),e(ae,zt),_(Te,zt,null),e(H,tn),e(H,qt),e(qt,on),m(t,_o,h),m(t,re,h),e(re,nn),e(re,ke),e(ke,sn),e(re,an),m(t,go,h),m(t,nt,h),e(nt,rn),m(t,vo,h),m(t,st,h),e(st,Et),e(Et,dn),m(t,To,h),m(t,j,h),e(j,cn),e(j,be),e(be,ln),e(j,hn),e(j,ye),e(ye,mn),e(j,fn),m(t,ko,h),m(t,Q,h),e(Q,ie),e(ie,xt),_(we,xt,null),e(Q,pn),e(Q,Ct),e(Ct,un),m(t,bo,h),m(t,at,h),e(at,X),e(X,_n),e(X,rt),e(rt,gn),e(X,vn),e(X,it),e(it,Tn),e(X,kn),m(t,yo,h),m(t,K,h),e(K,de),e(de,Pt),_(Me,Pt,null),e(K,bn),e(K,It),e(It,yn),m(t,wo,h),m(t,M,h),_(Fe,M,null),e(M,wn),e(M,Se),e(Se,Mn),e(Se,dt),e(dt,Fn),e(Se,Sn),e(M,$n),e(M,Y),e(Y,zn),e(Y,ct),e(ct,qn),e(Y,En),e(Y,lt),e(lt,xn),e(Y,Cn),e(M,Pn),e(M,At),e(At,In),e(M,An),_($e,M,null),e(M,Dn),e(M,ce),_(ze,ce,null),e(ce,Nn),e(ce,J),e(J,Ln),e(J,Dt),e(Dt,jn),e(J,On),e(J,Nt),e(Nt,Gn),e(J,Wn),m(t,Mo,h),m(t,Z,h),e(Z,le),e(le,Lt),_(qe,Lt,null),e(Z,Rn),e(Z,jt),e(jt,Bn),m(t,Fo,h),m(t,b,h),_(Ee,b,null),e(b,Vn),e(b,Ot),e(Ot,Un),e(b,Hn),e(b,D),e(D,Gt),e(Gt,Qn),e(D,Xn),e(D,Wt),e(Wt,Kn),e(D,Yn),e(D,N),e(N,Jn),e(N,Rt),e(Rt,Zn),e(N,es),e(N,Bt),e(Bt,ts),e(N,os),e(N,Vt),e(Vt,ns),e(N,ss),e(D,as),e(D,xe),e(xe,rs),e(xe,Ut),e(Ut,is),e(xe,ds),e(b,cs),e(b,Ce),e(Ce,ls),e(Ce,ht),e(ht,hs),e(Ce,ms),e(b,fs),e(b,O),_(Pe,O,null),e(O,ps),e(O,Ht),e(Ht,us),e(O,_s),e(O,Ie),e(Ie,mt),e(mt,gs),e(mt,Qt),e(Qt,vs),e(Ie,Ts),e(Ie,ft),e(ft,ks),e(ft,Xt),e(Xt,bs),e(b,ys),e(b,he),_(Ae,he,null),e(he,ws),e(he,De),e(De,Ms),e(De,Kt),e(Kt,Fs),e(De,Ss),e(b,$s),e(b,q),_(Ne,q,null),e(q,zs),e(q,Yt),e(Yt,qs),e(q,Es),_(Le,q,null),e(q,xs),e(q,ee),e(ee,Cs),e(ee,Jt),e(Jt,Ps),e(ee,Is),e(ee,Zt),e(Zt,As),e(ee,Ds),e(q,Ns),e(q,eo),e(eo,Ls),e(b,js),e(b,pt),_(je,pt,null),m(t,So,h),m(t,te,h),e(te,me),e(me,to),_(Oe,to,null),e(te,Os),e(te,oo),e(oo,Gs),m(t,$o,h),m(t,$,h),_(Ge,$,null),e($,Ws),e($,no),e(no,Rs),e($,Bs),e($,We),e(We,Vs),e(We,ut),e(ut,Us),e(We,Hs),e($,Qs),e($,Re),e(Re,Xs),e(Re,Be),e(Be,Ks),e(Re,Ys),e($,Js),e($,E),_(Ve,E,null),e(E,Zs),e(E,oe),e(oe,ea),e(oe,_t),e(_t,ta),e(oe,oa),e(oe,so),e(so,na),e(oe,sa),e(E,aa),_(fe,E,null),e(E,ra),e(E,ao),e(ao,ia),e(E,da),_(Ue,E,null),m(t,zo,h),m(t,ne,h),e(ne,pe),e(pe,ro),_(He,ro,null),e(ne,ca),e(ne,io),e(io,la),m(t,qo,h),m(t,z,h),_(Qe,z,null),e(z,ha),e(z,co),e(co,ma),e(z,fa),e(z,Xe),e(Xe,pa),e(Xe,gt),e(gt,ua),e(Xe,_a),e(z,ga),e(z,Ke),e(Ke,va),e(Ke,Ye),e(Ye,Ta),e(Ke,ka),e(z,ba),e(z,x),_(Je,x,null),e(x,ya),e(x,se),e(se,wa),e(se,vt),e(vt,Ma),e(se,Fa),e(se,lo),e(lo,Sa),e(se,$a),e(x,za),_(ue,x,null),e(x,qa),e(x,ho),e(ho,Ea),e(x,xa),_(Ze,x,null),Eo=!0},p(t,[h]){const et={};h&2&&(et.$$scope={dirty:h,ctx:t}),fe.$set(et);const mo={};h&2&&(mo.$$scope={dirty:h,ctx:t}),ue.$set(mo)},i(t){Eo||(g(y.$$.fragment,t),g(Te.$$.fragment,t),g(we.$$.fragment,t),g(Me.$$.fragment,t),g(Fe.$$.fragment,t),g($e.$$.fragment,t),g(ze.$$.fragment,t),g(qe.$$.fragment,t),g(Ee.$$.fragment,t),g(Pe.$$.fragment,t),g(Ae.$$.fragment,t),g(Ne.$$.fragment,t),g(Le.$$.fragment,t),g(je.$$.fragment,t),g(Oe.$$.fragment,t),g(Ge.$$.fragment,t),g(Ve.$$.fragment,t),g(fe.$$.fragment,t),g(Ue.$$.fragment,t),g(He.$$.fragment,t),g(Qe.$$.fragment,t),g(Je.$$.fragment,t),g(ue.$$.fragment,t),g(Ze.$$.fragment,t),Eo=!0)},o(t){v(y.$$.fragment,t),v(Te.$$.fragment,t),v(we.$$.fragment,t),v(Me.$$.fragment,t),v(Fe.$$.fragment,t),v($e.$$.fragment,t),v(ze.$$.fragment,t),v(qe.$$.fragment,t),v(Ee.$$.fragment,t),v(Pe.$$.fragment,t),v(Ae.$$.fragment,t),v(Ne.$$.fragment,t),v(Le.$$.fragment,t),v(je.$$.fragment,t),v(Oe.$$.fragment,t),v(Ge.$$.fragment,t),v(Ve.$$.fragment,t),v(fe.$$.fragment,t),v(Ue.$$.fragment,t),v(He.$$.fragment,t),v(Qe.$$.fragment,t),v(Je.$$.fragment,t),v(ue.$$.fragment,t),v(Ze.$$.fragment,t),Eo=!1},d(t){o(f),t&&o(P),t&&o(k),T(y),t&&o(po),t&&o(U),t&&o(uo),t&&o(H),T(Te),t&&o(_o),t&&o(re),t&&o(go),t&&o(nt),t&&o(vo),t&&o(st),t&&o(To),t&&o(j),t&&o(ko),t&&o(Q),T(we),t&&o(bo),t&&o(at),t&&o(yo),t&&o(K),T(Me),t&&o(wo),t&&o(M),T(Fe),T($e),T(ze),t&&o(Mo),t&&o(Z),T(qe),t&&o(Fo),t&&o(b),T(Ee),T(Pe),T(Ae),T(Ne),T(Le),T(je),t&&o(So),t&&o(te),T(Oe),t&&o($o),t&&o($),T(Ge),T(Ve),T(fe),T(Ue),t&&o(zo),t&&o(ne),T(He),t&&o(qo),t&&o(z),T(Qe),T(Je),T(ue),T(Ze)}}}const ti={local:"fsmt",sections:[{local:"overview",title:"Overview"},{local:"implementation-notes",title:"Implementation Notes"},{local:"transformers.FSMTConfig",title:"FSMTConfig"},{local:"transformers.FSMTTokenizer",title:"FSMTTokenizer"},{local:"transformers.FSMTModel",title:"FSMTModel"},{local:"transformers.FSMTForConditionalGeneration",title:"FSMTForConditionalGeneration"}],title:"FSMT"};function oi(ot){return Yr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class di extends Hr{constructor(f){super();Qr(this,f,oi,ei,Xr,{})}}export{di as default,ti as metadata};
