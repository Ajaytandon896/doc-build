import{S as $4t,i as k4t,s as S4t,e as a,k as l,w as F,t as o,M as R4t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as v,y as M,q as E,o as C,B as w,v as B4t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as v7r}from"../../chunks/Tip-39098574.js";import{D as k}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function P4t(A){let g,b,u,m,p,d,h,Fo,Ql,Wc,Yr,Wl,Hl,Rw,Hc,Be,Ge,Ul,Fn,Bw,Tn,Mn,Pw,Jl,En,Iw,Yl,Uc,va;return{c(){g=a("p"),b=o("If your "),u=a("code"),m=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),Ql=a("code"),Wc=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),Wl=a("code"),Hl=o('"new-model"'),Rw=o(")."),Hc=l(),Be=a("p"),Ge=o("Likewise, if your "),Ul=a("code"),Fn=o("NewModel"),Bw=o(" is a subclass of "),Tn=a("a"),Mn=o("PreTrainedModel"),Pw=o(`, make sure its
`),Jl=a("code"),En=o("config_class"),Iw=o(` attribute is set to the same class you use when registering the model (here
`),Yl=a("code"),Uc=o("NewModelConfig"),va=o(")."),this.h()},l(Oe){g=n(Oe,"P",{});var Ee=s(g);b=r(Ee,"If your "),u=n(Ee,"CODE",{});var D7=s(u);m=r(D7,"NewModelConfig"),D7.forEach(t),p=r(Ee," is a subclass of "),d=n(Ee,"CODE",{});var Kl=s(d);h=r(Kl,"PretrainedConfig"),Kl.forEach(t),Fo=r(Ee,`, make sure its
`),Ql=n(Ee,"CODE",{});var G7=s(Ql);Wc=r(G7,"model_type"),G7.forEach(t),Yr=r(Ee," attribute is set to the same key you use when registering the config (here "),Wl=n(Ee,"CODE",{});var O7=s(Wl);Hl=r(O7,'"new-model"'),O7.forEach(t),Rw=r(Ee,")."),Ee.forEach(t),Hc=i(Oe),Be=n(Oe,"P",{});var To=s(Be);Ge=r(To,"Likewise, if your "),Ul=n(To,"CODE",{});var ba=s(Ul);Fn=r(ba,"NewModel"),ba.forEach(t),Bw=r(To," is a subclass of "),Tn=n(To,"A",{href:!0});var V7=s(Tn);Mn=r(V7,"PreTrainedModel"),V7.forEach(t),Pw=r(To,`, make sure its
`),Jl=n(To,"CODE",{});var Jc=s(Jl);En=r(Jc,"config_class"),Jc.forEach(t),Iw=r(To,` attribute is set to the same class you use when registering the model (here
`),Yl=n(To,"CODE",{});var X7=s(Yl);Uc=r(X7,"NewModelConfig"),X7.forEach(t),va=r(To,")."),To.forEach(t),this.h()},h(){c(Tn,"href","/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel")},m(Oe,Ee){v(Oe,g,Ee),e(g,b),e(g,u),e(u,m),e(g,p),e(g,d),e(d,h),e(g,Fo),e(g,Ql),e(Ql,Wc),e(g,Yr),e(g,Wl),e(Wl,Hl),e(g,Rw),v(Oe,Hc,Ee),v(Oe,Be,Ee),e(Be,Ge),e(Be,Ul),e(Ul,Fn),e(Be,Bw),e(Be,Tn),e(Tn,Mn),e(Be,Pw),e(Be,Jl),e(Jl,En),e(Be,Iw),e(Be,Yl),e(Yl,Uc),e(Be,va)},d(Oe){Oe&&t(g),Oe&&t(Hc),Oe&&t(Be)}}}function I4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function q4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function N4t(A){let g,b,u,m,p;return{c(){g=a("p"),b=o("Passing "),u=a("code"),m=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Passing "),u=n(h,"CODE",{});var Fo=s(u);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){v(d,g,h),e(g,b),e(g,u),e(u,m),e(g,p)},d(d){d&&t(g)}}}function j4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function D4t(A){let g,b,u,m,p;return{c(){g=a("p"),b=o("Passing "),u=a("code"),m=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Passing "),u=n(h,"CODE",{});var Fo=s(u);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){v(d,g,h),e(g,b),e(g,u),e(u,m),e(g,p)},d(d){d&&t(g)}}}function G4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function O4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function V4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function X4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function z4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Q4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function W4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function H4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function U4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function J4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Y4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function K4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Z4t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function e2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function o2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function r2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function t2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function a2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function n2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function s2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function l2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function i2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function d2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function c2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function f2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function m2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function g2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function h2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function u2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function p2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function _2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function v2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function b2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function F2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function T2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function M2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function E2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function C2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function w2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function A2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function y2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function L2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function x2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function $2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function k2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function S2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function R2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function B2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function P2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function I2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function q2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function N2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function j2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function D2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function G2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function O2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function V2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function X2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function z2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Q2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function W2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function H2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function U2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function J2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Y2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function K2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function Z2t(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function eFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function oFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function rFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function tFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function aFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function nFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function sFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function lFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function iFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function dFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function cFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function fFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function mFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function gFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function hFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function uFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function pFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function _Ft(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function vFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function bFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function FFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function TFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function MFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function EFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function CFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function wFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function AFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function yFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function LFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function xFt(A){let g,b,u,m,p;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),b=o("Examples:"),u=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);b=r(h,"Examples:"),h.forEach(t),u=i(d),T(m.$$.fragment,d)},m(d,h){v(d,g,h),e(g,b),v(d,u,h),M(m,d,h),p=!0},p:I,i(d){p||(E(m.$$.fragment,d),p=!0)},o(d){C(m.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(m,d)}}}function $Ft(A){let g,b,u,m,p,d,h,Fo,Ql,Wc,Yr,Wl,Hl,Rw,Hc,Be,Ge,Ul,Fn,Bw,Tn,Mn,Pw,Jl,En,Iw,Yl,Uc,va,Oe,Ee,D7,Kl,G7,O7,To,ba,V7,Jc,X7,_Pe,fke,Zl,Yc,pY,qw,vPe,_Y,bPe,mke,Cn,FPe,vY,TPe,MPe,bY,EPe,CPe,gke,Nw,hke,z7,wPe,uke,Kc,pke,ei,Zc,FY,jw,APe,TY,yPe,_ke,Mo,Dw,LPe,Gw,xPe,Q7,$Pe,kPe,SPe,Ow,RPe,MY,BPe,PPe,IPe,Fr,Vw,qPe,EY,NPe,jPe,oi,DPe,CY,GPe,OPe,wY,VPe,XPe,zPe,y,ef,AY,QPe,WPe,W7,HPe,UPe,JPe,of,yY,YPe,KPe,H7,ZPe,eIe,oIe,rf,LY,rIe,tIe,U7,aIe,nIe,sIe,tf,xY,lIe,iIe,J7,dIe,cIe,fIe,af,$Y,mIe,gIe,Y7,hIe,uIe,pIe,nf,kY,_Ie,vIe,K7,bIe,FIe,TIe,sf,SY,MIe,EIe,Z7,CIe,wIe,AIe,lf,RY,yIe,LIe,e9,xIe,$Ie,kIe,df,BY,SIe,RIe,o9,BIe,PIe,IIe,cf,PY,qIe,NIe,r9,jIe,DIe,GIe,ff,IY,OIe,VIe,t9,XIe,zIe,QIe,mf,qY,WIe,HIe,a9,UIe,JIe,YIe,gf,NY,KIe,ZIe,n9,eqe,oqe,rqe,hf,jY,tqe,aqe,s9,nqe,sqe,lqe,uf,DY,iqe,dqe,l9,cqe,fqe,mqe,pf,GY,gqe,hqe,i9,uqe,pqe,_qe,_f,OY,vqe,bqe,d9,Fqe,Tqe,Mqe,vf,VY,Eqe,Cqe,c9,wqe,Aqe,yqe,bf,XY,Lqe,xqe,f9,$qe,kqe,Sqe,Ff,zY,Rqe,Bqe,m9,Pqe,Iqe,qqe,Tf,QY,Nqe,jqe,g9,Dqe,Gqe,Oqe,Mf,WY,Vqe,Xqe,h9,zqe,Qqe,Wqe,Ef,HY,Hqe,Uqe,u9,Jqe,Yqe,Kqe,Cf,UY,Zqe,eNe,p9,oNe,rNe,tNe,wf,JY,aNe,nNe,_9,sNe,lNe,iNe,Af,YY,dNe,cNe,v9,fNe,mNe,gNe,yf,KY,hNe,uNe,b9,pNe,_Ne,vNe,Lf,ZY,bNe,FNe,F9,TNe,MNe,ENe,xf,eK,CNe,wNe,T9,ANe,yNe,LNe,$f,oK,xNe,$Ne,M9,kNe,SNe,RNe,kf,rK,BNe,PNe,E9,INe,qNe,NNe,Sf,tK,jNe,DNe,C9,GNe,ONe,VNe,Rf,aK,XNe,zNe,w9,QNe,WNe,HNe,Bf,nK,UNe,JNe,A9,YNe,KNe,ZNe,Pf,sK,eje,oje,y9,rje,tje,aje,If,lK,nje,sje,L9,lje,ije,dje,qf,iK,cje,fje,x9,mje,gje,hje,Nf,dK,uje,pje,$9,_je,vje,bje,jf,cK,Fje,Tje,k9,Mje,Eje,Cje,Df,fK,wje,Aje,S9,yje,Lje,xje,Gf,mK,$je,kje,R9,Sje,Rje,Bje,Of,gK,Pje,Ije,B9,qje,Nje,jje,Vf,hK,Dje,Gje,P9,Oje,Vje,Xje,Xf,uK,zje,Qje,I9,Wje,Hje,Uje,zf,pK,Jje,Yje,q9,Kje,Zje,eDe,Qf,_K,oDe,rDe,N9,tDe,aDe,nDe,Wf,vK,sDe,lDe,j9,iDe,dDe,cDe,Hf,bK,fDe,mDe,D9,gDe,hDe,uDe,Uf,FK,pDe,_De,G9,vDe,bDe,FDe,Jf,TK,TDe,MDe,O9,EDe,CDe,wDe,Yf,MK,ADe,yDe,V9,LDe,xDe,$De,Kf,EK,kDe,SDe,X9,RDe,BDe,PDe,Zf,CK,IDe,qDe,z9,NDe,jDe,DDe,em,wK,GDe,ODe,Q9,VDe,XDe,zDe,om,AK,QDe,WDe,W9,HDe,UDe,JDe,rm,yK,YDe,KDe,H9,ZDe,eGe,oGe,tm,LK,rGe,tGe,U9,aGe,nGe,sGe,am,xK,lGe,iGe,J9,dGe,cGe,fGe,nm,$K,mGe,gGe,Y9,hGe,uGe,pGe,sm,kK,_Ge,vGe,K9,bGe,FGe,TGe,lm,SK,MGe,EGe,Z9,CGe,wGe,AGe,im,RK,yGe,LGe,e$,xGe,$Ge,kGe,dm,BK,SGe,RGe,o$,BGe,PGe,IGe,cm,PK,qGe,NGe,r$,jGe,DGe,GGe,fm,IK,OGe,VGe,t$,XGe,zGe,QGe,mm,qK,WGe,HGe,a$,UGe,JGe,YGe,gm,NK,KGe,ZGe,n$,eOe,oOe,rOe,hm,jK,tOe,aOe,s$,nOe,sOe,lOe,um,DK,iOe,dOe,l$,cOe,fOe,mOe,pm,GK,gOe,hOe,i$,uOe,pOe,_Oe,_m,OK,vOe,bOe,d$,FOe,TOe,MOe,vm,VK,EOe,COe,c$,wOe,AOe,yOe,bm,XK,LOe,xOe,f$,$Oe,kOe,SOe,Fm,zK,ROe,BOe,m$,POe,IOe,qOe,Tm,QK,NOe,jOe,g$,DOe,GOe,OOe,Mm,WK,VOe,XOe,h$,zOe,QOe,WOe,Em,HK,HOe,UOe,u$,JOe,YOe,KOe,Cm,UK,ZOe,eVe,p$,oVe,rVe,tVe,wm,JK,aVe,nVe,_$,sVe,lVe,iVe,Am,YK,dVe,cVe,v$,fVe,mVe,gVe,ym,KK,hVe,uVe,b$,pVe,_Ve,vVe,Lm,ZK,bVe,FVe,F$,TVe,MVe,EVe,xm,eZ,CVe,wVe,T$,AVe,yVe,LVe,$m,oZ,xVe,$Ve,M$,kVe,SVe,RVe,km,rZ,BVe,PVe,E$,IVe,qVe,NVe,Sm,tZ,jVe,DVe,C$,GVe,OVe,VVe,Rm,aZ,XVe,zVe,w$,QVe,WVe,HVe,Bm,nZ,UVe,JVe,A$,YVe,KVe,ZVe,Pm,sZ,eXe,oXe,y$,rXe,tXe,aXe,Im,lZ,nXe,sXe,L$,lXe,iXe,dXe,qm,iZ,cXe,fXe,x$,mXe,gXe,hXe,Nm,dZ,uXe,pXe,$$,_Xe,vXe,bXe,jm,cZ,FXe,TXe,k$,MXe,EXe,CXe,Dm,fZ,wXe,AXe,S$,yXe,LXe,xXe,Gm,mZ,$Xe,kXe,R$,SXe,RXe,BXe,Om,gZ,PXe,IXe,B$,qXe,NXe,jXe,Vm,hZ,DXe,GXe,P$,OXe,VXe,XXe,Xm,uZ,zXe,QXe,I$,WXe,HXe,UXe,zm,pZ,JXe,YXe,q$,KXe,ZXe,eze,Qm,oze,Wm,Xw,rze,_Z,tze,vke,ri,Hm,vZ,zw,aze,bZ,nze,bke,Eo,Qw,sze,Ww,lze,N$,ize,dze,cze,Hw,fze,FZ,mze,gze,hze,Tr,Uw,uze,TZ,pze,_ze,Fa,vze,MZ,bze,Fze,EZ,Tze,Mze,CZ,Eze,Cze,wze,S,wn,wZ,Aze,yze,j$,Lze,xze,D$,$ze,kze,Sze,An,AZ,Rze,Bze,G$,Pze,Ize,O$,qze,Nze,jze,yn,yZ,Dze,Gze,V$,Oze,Vze,X$,Xze,zze,Qze,Um,LZ,Wze,Hze,z$,Uze,Jze,Yze,Ln,xZ,Kze,Zze,Q$,eQe,oQe,W$,rQe,tQe,aQe,Jm,$Z,nQe,sQe,H$,lQe,iQe,dQe,Ym,kZ,cQe,fQe,U$,mQe,gQe,hQe,Km,SZ,uQe,pQe,J$,_Qe,vQe,bQe,xn,RZ,FQe,TQe,Y$,MQe,EQe,K$,CQe,wQe,AQe,$n,BZ,yQe,LQe,Z$,xQe,$Qe,ek,kQe,SQe,RQe,kn,PZ,BQe,PQe,ok,IQe,qQe,rk,NQe,jQe,DQe,Zm,IZ,GQe,OQe,tk,VQe,XQe,zQe,eg,qZ,QQe,WQe,ak,HQe,UQe,JQe,Sn,NZ,YQe,KQe,nk,ZQe,eWe,sk,oWe,rWe,tWe,og,jZ,aWe,nWe,lk,sWe,lWe,iWe,Rn,DZ,dWe,cWe,ik,fWe,mWe,dk,gWe,hWe,uWe,Bn,GZ,pWe,_We,ck,vWe,bWe,fk,FWe,TWe,MWe,Pn,OZ,EWe,CWe,mk,wWe,AWe,VZ,yWe,LWe,xWe,rg,XZ,$We,kWe,gk,SWe,RWe,BWe,In,zZ,PWe,IWe,hk,qWe,NWe,uk,jWe,DWe,GWe,tg,QZ,OWe,VWe,pk,XWe,zWe,QWe,qn,WZ,WWe,HWe,_k,UWe,JWe,vk,YWe,KWe,ZWe,Nn,HZ,eHe,oHe,bk,rHe,tHe,Fk,aHe,nHe,sHe,jn,UZ,lHe,iHe,Tk,dHe,cHe,Mk,fHe,mHe,gHe,ag,JZ,hHe,uHe,Ek,pHe,_He,vHe,Dn,YZ,bHe,FHe,Ck,THe,MHe,wk,EHe,CHe,wHe,ng,KZ,AHe,yHe,Ak,LHe,xHe,$He,Gn,ZZ,kHe,SHe,yk,RHe,BHe,Lk,PHe,IHe,qHe,On,eee,NHe,jHe,xk,DHe,GHe,$k,OHe,VHe,XHe,Vn,oee,zHe,QHe,kk,WHe,HHe,Sk,UHe,JHe,YHe,Xn,ree,KHe,ZHe,Rk,eUe,oUe,Bk,rUe,tUe,aUe,sg,tee,nUe,sUe,Pk,lUe,iUe,dUe,zn,aee,cUe,fUe,Ik,mUe,gUe,qk,hUe,uUe,pUe,Qn,nee,_Ue,vUe,Nk,bUe,FUe,jk,TUe,MUe,EUe,Wn,see,CUe,wUe,Dk,AUe,yUe,Gk,LUe,xUe,$Ue,Hn,lee,kUe,SUe,Ok,RUe,BUe,Vk,PUe,IUe,qUe,Un,iee,NUe,jUe,Xk,DUe,GUe,zk,OUe,VUe,XUe,Jn,dee,zUe,QUe,Qk,WUe,HUe,Wk,UUe,JUe,YUe,lg,cee,KUe,ZUe,Hk,eJe,oJe,rJe,Yn,fee,tJe,aJe,Uk,nJe,sJe,Jk,lJe,iJe,dJe,ig,mee,cJe,fJe,Yk,mJe,gJe,hJe,dg,gee,uJe,pJe,Kk,_Je,vJe,bJe,Kn,hee,FJe,TJe,Zk,MJe,EJe,eS,CJe,wJe,AJe,Zn,uee,yJe,LJe,oS,xJe,$Je,rS,kJe,SJe,RJe,cg,pee,BJe,PJe,tS,IJe,qJe,NJe,es,_ee,jJe,DJe,aS,GJe,OJe,nS,VJe,XJe,zJe,os,vee,QJe,WJe,sS,HJe,UJe,lS,JJe,YJe,KJe,rs,bee,ZJe,eYe,iS,oYe,rYe,dS,tYe,aYe,nYe,ts,Fee,sYe,lYe,cS,iYe,dYe,fS,cYe,fYe,mYe,as,Tee,gYe,hYe,mS,uYe,pYe,gS,_Ye,vYe,bYe,fg,Mee,FYe,TYe,hS,MYe,EYe,CYe,mg,Eee,wYe,AYe,uS,yYe,LYe,xYe,gg,Cee,$Ye,kYe,pS,SYe,RYe,BYe,hg,wee,PYe,IYe,_S,qYe,NYe,jYe,ns,Aee,DYe,GYe,vS,OYe,VYe,bS,XYe,zYe,QYe,ug,yee,WYe,HYe,FS,UYe,JYe,YYe,ss,Lee,KYe,ZYe,TS,eKe,oKe,MS,rKe,tKe,aKe,ls,xee,nKe,sKe,ES,lKe,iKe,CS,dKe,cKe,fKe,is,$ee,mKe,gKe,wS,hKe,uKe,AS,pKe,_Ke,vKe,ds,kee,bKe,FKe,yS,TKe,MKe,LS,EKe,CKe,wKe,cs,See,AKe,yKe,xS,LKe,xKe,$S,$Ke,kKe,SKe,fs,Ree,RKe,BKe,kS,PKe,IKe,SS,qKe,NKe,jKe,pg,Bee,DKe,GKe,RS,OKe,VKe,XKe,_g,Pee,zKe,QKe,BS,WKe,HKe,UKe,ms,Iee,JKe,YKe,PS,KKe,ZKe,IS,eZe,oZe,rZe,gs,qee,tZe,aZe,qS,nZe,sZe,NS,lZe,iZe,dZe,hs,Nee,cZe,fZe,jS,mZe,gZe,DS,hZe,uZe,pZe,vg,jee,_Ze,vZe,GS,bZe,FZe,TZe,bg,Dee,MZe,EZe,OS,CZe,wZe,AZe,Fg,Gee,yZe,LZe,VS,xZe,$Ze,kZe,Tg,Oee,SZe,RZe,XS,BZe,PZe,IZe,us,Vee,qZe,NZe,zS,jZe,DZe,QS,GZe,OZe,VZe,Mg,Xee,XZe,zZe,WS,QZe,WZe,HZe,Eg,zee,UZe,JZe,HS,YZe,KZe,ZZe,ps,Qee,eeo,oeo,US,reo,teo,JS,aeo,neo,seo,_s,Wee,leo,ieo,YS,deo,ceo,KS,feo,meo,geo,Cg,heo,wg,Jw,ueo,Hee,peo,Fke,ti,Ag,Uee,Yw,_eo,Jee,veo,Tke,Co,Kw,beo,Zw,Feo,ZS,Teo,Meo,Eeo,eA,Ceo,Yee,weo,Aeo,yeo,Ve,oA,Leo,Kee,xeo,$eo,Ta,keo,Zee,Seo,Reo,eoe,Beo,Peo,ooe,Ieo,qeo,Neo,me,yg,roe,jeo,Deo,eR,Geo,Oeo,Veo,Lg,toe,Xeo,zeo,oR,Qeo,Weo,Heo,xg,aoe,Ueo,Jeo,rR,Yeo,Keo,Zeo,$g,noe,eoo,ooo,tR,roo,too,aoo,kg,soe,noo,soo,aR,loo,ioo,doo,Sg,loe,coo,foo,nR,moo,goo,hoo,Rg,ioe,uoo,poo,sR,_oo,voo,boo,Bg,doe,Foo,Too,lR,Moo,Eoo,Coo,Pg,coe,woo,Aoo,iR,yoo,Loo,xoo,Ig,foe,$oo,koo,dR,Soo,Roo,Boo,qg,moe,Poo,Ioo,cR,qoo,Noo,joo,Ng,goe,Doo,Goo,fR,Ooo,Voo,Xoo,jg,hoe,zoo,Qoo,mR,Woo,Hoo,Uoo,Dg,uoe,Joo,Yoo,gR,Koo,Zoo,ero,Gg,poe,oro,rro,hR,tro,aro,nro,Og,_oe,sro,lro,uR,iro,dro,cro,Vg,voe,fro,mro,pR,gro,hro,uro,Xg,boe,pro,_ro,_R,vro,bro,Fro,zg,Tro,Qg,Mro,Wg,rA,Ero,Foe,Cro,Mke,ai,Hg,Toe,tA,wro,Moe,Aro,Eke,wo,aA,yro,nA,Lro,vR,xro,$ro,kro,sA,Sro,Eoe,Rro,Bro,Pro,Xe,lA,Iro,Coe,qro,Nro,ni,jro,woe,Dro,Gro,Aoe,Oro,Vro,Xro,Pe,Ug,yoe,zro,Qro,bR,Wro,Hro,Uro,Jg,Loe,Jro,Yro,FR,Kro,Zro,eto,Yg,xoe,oto,rto,TR,tto,ato,nto,Kg,$oe,sto,lto,MR,ito,dto,cto,Zg,koe,fto,mto,ER,gto,hto,uto,eh,Soe,pto,_to,CR,vto,bto,Fto,oh,Roe,Tto,Mto,wR,Eto,Cto,wto,rh,Boe,Ato,yto,AR,Lto,xto,$to,th,kto,ah,Sto,nh,iA,Rto,Poe,Bto,Cke,si,sh,Ioe,dA,Pto,qoe,Ito,wke,Ao,cA,qto,li,Nto,yR,jto,Dto,LR,Gto,Oto,Vto,fA,Xto,Noe,zto,Qto,Wto,Kr,mA,Hto,joe,Uto,Jto,ii,Yto,Doe,Kto,Zto,xR,eao,oao,rao,lh,tao,ze,gA,aao,Goe,nao,sao,Ma,lao,Ooe,iao,dao,Voe,cao,fao,Xoe,mao,gao,hao,x,ih,zoe,uao,pao,$R,_ao,vao,bao,dh,Qoe,Fao,Tao,kR,Mao,Eao,Cao,ch,Woe,wao,Aao,SR,yao,Lao,xao,fh,Hoe,$ao,kao,RR,Sao,Rao,Bao,mh,Uoe,Pao,Iao,BR,qao,Nao,jao,gh,Joe,Dao,Gao,PR,Oao,Vao,Xao,hh,Yoe,zao,Qao,IR,Wao,Hao,Uao,uh,Koe,Jao,Yao,qR,Kao,Zao,eno,ph,Zoe,ono,rno,NR,tno,ano,nno,_h,ere,sno,lno,jR,ino,dno,cno,vh,ore,fno,mno,DR,gno,hno,uno,bh,rre,pno,_no,GR,vno,bno,Fno,Fh,tre,Tno,Mno,OR,Eno,Cno,wno,Th,are,Ano,yno,VR,Lno,xno,$no,Mh,nre,kno,Sno,XR,Rno,Bno,Pno,Eh,sre,Ino,qno,zR,Nno,jno,Dno,Ch,lre,Gno,Ono,QR,Vno,Xno,zno,wh,ire,Qno,Wno,WR,Hno,Uno,Jno,Ah,dre,Yno,Kno,HR,Zno,eso,oso,yh,cre,rso,tso,UR,aso,nso,sso,Lh,fre,lso,iso,JR,dso,cso,fso,xh,mre,mso,gso,YR,hso,uso,pso,$h,gre,_so,vso,KR,bso,Fso,Tso,kh,hre,Mso,Eso,ZR,Cso,wso,Aso,Sh,ure,yso,Lso,eB,xso,$so,kso,Rh,pre,Sso,Rso,oB,Bso,Pso,Iso,Bh,_re,qso,Nso,rB,jso,Dso,Gso,Ph,vre,Oso,Vso,tB,Xso,zso,Qso,Ih,bre,Wso,Hso,aB,Uso,Jso,Yso,vs,Fre,Kso,Zso,nB,elo,olo,sB,rlo,tlo,alo,qh,Tre,nlo,slo,lB,llo,ilo,dlo,Nh,Mre,clo,flo,iB,mlo,glo,hlo,jh,Ere,ulo,plo,dB,_lo,vlo,blo,Dh,Cre,Flo,Tlo,cB,Mlo,Elo,Clo,Gh,wre,wlo,Alo,fB,ylo,Llo,xlo,Oh,Are,$lo,klo,mB,Slo,Rlo,Blo,Vh,yre,Plo,Ilo,gB,qlo,Nlo,jlo,Xh,Lre,Dlo,Glo,hB,Olo,Vlo,Xlo,zh,xre,zlo,Qlo,uB,Wlo,Hlo,Ulo,Qh,$re,Jlo,Ylo,pB,Klo,Zlo,eio,Wh,kre,oio,rio,_B,tio,aio,nio,Hh,Sre,sio,lio,vB,iio,dio,cio,Uh,Rre,fio,mio,bB,gio,hio,uio,Jh,Bre,pio,_io,FB,vio,bio,Fio,Yh,Pre,Tio,Mio,TB,Eio,Cio,wio,Kh,Ire,Aio,yio,MB,Lio,xio,$io,Zh,qre,kio,Sio,EB,Rio,Bio,Pio,eu,Nre,Iio,qio,CB,Nio,jio,Dio,ou,jre,Gio,Oio,wB,Vio,Xio,zio,ru,Dre,Qio,Wio,AB,Hio,Uio,Jio,tu,Gre,Yio,Kio,yB,Zio,edo,odo,au,Ore,rdo,tdo,LB,ado,ndo,sdo,nu,Vre,ldo,ido,xB,ddo,cdo,fdo,su,Xre,mdo,gdo,$B,hdo,udo,pdo,lu,zre,_do,vdo,kB,bdo,Fdo,Tdo,iu,Qre,Mdo,Edo,SB,Cdo,wdo,Ado,du,Wre,ydo,Ldo,RB,xdo,$do,kdo,cu,Hre,Sdo,Rdo,BB,Bdo,Pdo,Ido,fu,Ure,qdo,Ndo,PB,jdo,Ddo,Gdo,mu,Jre,Odo,Vdo,IB,Xdo,zdo,Qdo,gu,Yre,Wdo,Hdo,qB,Udo,Jdo,Ydo,hu,Kre,Kdo,Zdo,NB,eco,oco,rco,uu,Zre,tco,aco,jB,nco,sco,lco,pu,ete,ico,dco,DB,cco,fco,mco,_u,ote,gco,hco,GB,uco,pco,_co,vu,rte,vco,bco,OB,Fco,Tco,Mco,bu,tte,Eco,Cco,VB,wco,Aco,yco,Fu,ate,Lco,xco,XB,$co,kco,Sco,Tu,nte,Rco,Bco,zB,Pco,Ico,qco,Mu,ste,Nco,jco,QB,Dco,Gco,Oco,Eu,lte,Vco,Xco,WB,zco,Qco,Wco,Cu,ite,Hco,Uco,HB,Jco,Yco,Kco,wu,dte,Zco,efo,UB,ofo,rfo,tfo,Au,cte,afo,nfo,JB,sfo,lfo,ifo,yu,fte,dfo,cfo,YB,ffo,mfo,gfo,Lu,mte,hfo,ufo,KB,pfo,_fo,vfo,xu,gte,bfo,Ffo,ZB,Tfo,Mfo,Efo,$u,hte,Cfo,wfo,eP,Afo,yfo,Lfo,ku,ute,xfo,$fo,oP,kfo,Sfo,Rfo,Su,pte,Bfo,Pfo,rP,Ifo,qfo,Nfo,Ru,_te,jfo,Dfo,tP,Gfo,Ofo,Vfo,Bu,vte,Xfo,zfo,aP,Qfo,Wfo,Hfo,Pu,bte,Ufo,Jfo,nP,Yfo,Kfo,Zfo,Iu,Fte,emo,omo,sP,rmo,tmo,amo,qu,Tte,nmo,smo,lP,lmo,imo,dmo,Nu,Mte,cmo,fmo,iP,mmo,gmo,hmo,ju,Ete,umo,pmo,dP,_mo,vmo,bmo,Du,Cte,Fmo,Tmo,cP,Mmo,Emo,Cmo,Gu,wte,wmo,Amo,fP,ymo,Lmo,xmo,Ou,Ate,$mo,kmo,mP,Smo,Rmo,Bmo,Vu,yte,Pmo,Imo,gP,qmo,Nmo,jmo,Xu,Lte,Dmo,Gmo,hP,Omo,Vmo,Xmo,zu,zmo,xte,Qmo,Wmo,$te,Hmo,Umo,Qu,Ake,di,Wu,kte,hA,Jmo,Ste,Ymo,yke,yo,uA,Kmo,ci,Zmo,uP,ego,ogo,pP,rgo,tgo,ago,pA,ngo,Rte,sgo,lgo,igo,Zr,_A,dgo,Bte,cgo,fgo,fi,mgo,Pte,ggo,hgo,_P,ugo,pgo,_go,Hu,vgo,Qe,vA,bgo,Ite,Fgo,Tgo,Ea,Mgo,qte,Ego,Cgo,Nte,wgo,Ago,jte,ygo,Lgo,xgo,G,Uu,Dte,$go,kgo,vP,Sgo,Rgo,Bgo,Ju,Gte,Pgo,Igo,bP,qgo,Ngo,jgo,Yu,Ote,Dgo,Ggo,FP,Ogo,Vgo,Xgo,Ku,Vte,zgo,Qgo,TP,Wgo,Hgo,Ugo,Zu,Xte,Jgo,Ygo,MP,Kgo,Zgo,eho,ep,zte,oho,rho,EP,tho,aho,nho,op,Qte,sho,lho,CP,iho,dho,cho,rp,Wte,fho,mho,wP,gho,hho,uho,tp,Hte,pho,_ho,AP,vho,bho,Fho,ap,Ute,Tho,Mho,yP,Eho,Cho,who,np,Jte,Aho,yho,LP,Lho,xho,$ho,sp,Yte,kho,Sho,xP,Rho,Bho,Pho,lp,Kte,Iho,qho,$P,Nho,jho,Dho,ip,Zte,Gho,Oho,kP,Vho,Xho,zho,dp,eae,Qho,Who,SP,Hho,Uho,Jho,cp,oae,Yho,Kho,RP,Zho,euo,ouo,fp,rae,ruo,tuo,BP,auo,nuo,suo,mp,tae,luo,iuo,PP,duo,cuo,fuo,gp,aae,muo,guo,IP,huo,uuo,puo,hp,nae,_uo,vuo,qP,buo,Fuo,Tuo,up,sae,Muo,Euo,NP,Cuo,wuo,Auo,pp,lae,yuo,Luo,jP,xuo,$uo,kuo,_p,iae,Suo,Ruo,DP,Buo,Puo,Iuo,vp,dae,quo,Nuo,GP,juo,Duo,Guo,bp,cae,Ouo,Vuo,OP,Xuo,zuo,Quo,Fp,fae,Wuo,Huo,VP,Uuo,Juo,Yuo,Tp,mae,Kuo,Zuo,XP,epo,opo,rpo,Mp,gae,tpo,apo,zP,npo,spo,lpo,Ep,hae,ipo,dpo,QP,cpo,fpo,mpo,Cp,uae,gpo,hpo,WP,upo,ppo,_po,wp,pae,vpo,bpo,HP,Fpo,Tpo,Mpo,Ap,_ae,Epo,Cpo,UP,wpo,Apo,ypo,yp,vae,Lpo,xpo,JP,$po,kpo,Spo,Lp,bae,Rpo,Bpo,YP,Ppo,Ipo,qpo,xp,Fae,Npo,jpo,KP,Dpo,Gpo,Opo,$p,Tae,Vpo,Xpo,ZP,zpo,Qpo,Wpo,kp,Mae,Hpo,Upo,eI,Jpo,Ypo,Kpo,Sp,Eae,Zpo,e_o,oI,o_o,r_o,t_o,Rp,Cae,a_o,n_o,rI,s_o,l_o,i_o,Bp,d_o,wae,c_o,f_o,Aae,m_o,g_o,Pp,Lke,mi,Ip,yae,bA,h_o,Lae,u_o,xke,Lo,FA,p_o,gi,__o,tI,v_o,b_o,aI,F_o,T_o,M_o,TA,E_o,xae,C_o,w_o,A_o,et,MA,y_o,$ae,L_o,x_o,hi,$_o,kae,k_o,S_o,nI,R_o,B_o,P_o,qp,I_o,We,EA,q_o,Sae,N_o,j_o,Ca,D_o,Rae,G_o,O_o,Bae,V_o,X_o,Pae,z_o,Q_o,W_o,z,Np,Iae,H_o,U_o,sI,J_o,Y_o,K_o,jp,qae,Z_o,evo,lI,ovo,rvo,tvo,Dp,Nae,avo,nvo,iI,svo,lvo,ivo,Gp,jae,dvo,cvo,dI,fvo,mvo,gvo,Op,Dae,hvo,uvo,cI,pvo,_vo,vvo,Vp,Gae,bvo,Fvo,fI,Tvo,Mvo,Evo,Xp,Oae,Cvo,wvo,mI,Avo,yvo,Lvo,zp,Vae,xvo,$vo,gI,kvo,Svo,Rvo,Qp,Xae,Bvo,Pvo,hI,Ivo,qvo,Nvo,Wp,zae,jvo,Dvo,uI,Gvo,Ovo,Vvo,Hp,Qae,Xvo,zvo,pI,Qvo,Wvo,Hvo,Up,Wae,Uvo,Jvo,_I,Yvo,Kvo,Zvo,Jp,Hae,e1o,o1o,vI,r1o,t1o,a1o,Yp,Uae,n1o,s1o,bI,l1o,i1o,d1o,Kp,Jae,c1o,f1o,FI,m1o,g1o,h1o,Zp,Yae,u1o,p1o,TI,_1o,v1o,b1o,e_,Kae,F1o,T1o,MI,M1o,E1o,C1o,o_,Zae,w1o,A1o,EI,y1o,L1o,x1o,r_,ene,$1o,k1o,CI,S1o,R1o,B1o,t_,one,P1o,I1o,wI,q1o,N1o,j1o,a_,rne,D1o,G1o,AI,O1o,V1o,X1o,n_,tne,z1o,Q1o,yI,W1o,H1o,U1o,s_,ane,J1o,Y1o,LI,K1o,Z1o,ebo,l_,nne,obo,rbo,xI,tbo,abo,nbo,i_,sne,sbo,lbo,$I,ibo,dbo,cbo,d_,lne,fbo,mbo,kI,gbo,hbo,ubo,c_,ine,pbo,_bo,SI,vbo,bbo,Fbo,f_,dne,Tbo,Mbo,RI,Ebo,Cbo,wbo,m_,cne,Abo,ybo,BI,Lbo,xbo,$bo,g_,fne,kbo,Sbo,PI,Rbo,Bbo,Pbo,h_,mne,Ibo,qbo,II,Nbo,jbo,Dbo,u_,gne,Gbo,Obo,qI,Vbo,Xbo,zbo,p_,hne,Qbo,Wbo,NI,Hbo,Ubo,Jbo,__,une,Ybo,Kbo,jI,Zbo,e4o,o4o,v_,pne,r4o,t4o,DI,a4o,n4o,s4o,b_,l4o,_ne,i4o,d4o,vne,c4o,f4o,F_,$ke,ui,T_,bne,CA,m4o,Fne,g4o,kke,xo,wA,h4o,pi,u4o,GI,p4o,_4o,OI,v4o,b4o,F4o,AA,T4o,Tne,M4o,E4o,C4o,ot,yA,w4o,Mne,A4o,y4o,_i,L4o,Ene,x4o,$4o,VI,k4o,S4o,R4o,M_,B4o,He,LA,P4o,Cne,I4o,q4o,wa,N4o,wne,j4o,D4o,Ane,G4o,O4o,yne,V4o,X4o,z4o,Q,E_,Lne,Q4o,W4o,XI,H4o,U4o,J4o,C_,xne,Y4o,K4o,zI,Z4o,e2o,o2o,w_,$ne,r2o,t2o,QI,a2o,n2o,s2o,A_,kne,l2o,i2o,WI,d2o,c2o,f2o,y_,Sne,m2o,g2o,HI,h2o,u2o,p2o,L_,Rne,_2o,v2o,UI,b2o,F2o,T2o,x_,Bne,M2o,E2o,JI,C2o,w2o,A2o,$_,Pne,y2o,L2o,YI,x2o,$2o,k2o,k_,Ine,S2o,R2o,KI,B2o,P2o,I2o,S_,qne,q2o,N2o,ZI,j2o,D2o,G2o,R_,Nne,O2o,V2o,eq,X2o,z2o,Q2o,B_,jne,W2o,H2o,oq,U2o,J2o,Y2o,P_,Dne,K2o,Z2o,rq,eFo,oFo,rFo,I_,Gne,tFo,aFo,tq,nFo,sFo,lFo,q_,One,iFo,dFo,aq,cFo,fFo,mFo,N_,Vne,gFo,hFo,nq,uFo,pFo,_Fo,j_,Xne,vFo,bFo,sq,FFo,TFo,MFo,D_,zne,EFo,CFo,lq,wFo,AFo,yFo,G_,Qne,LFo,xFo,iq,$Fo,kFo,SFo,O_,Wne,RFo,BFo,dq,PFo,IFo,qFo,V_,Hne,NFo,jFo,cq,DFo,GFo,OFo,X_,Une,VFo,XFo,fq,zFo,QFo,WFo,z_,Jne,HFo,UFo,mq,JFo,YFo,KFo,Q_,Yne,ZFo,e0o,gq,o0o,r0o,t0o,W_,Kne,a0o,n0o,hq,s0o,l0o,i0o,H_,Zne,d0o,c0o,uq,f0o,m0o,g0o,U_,ese,h0o,u0o,pq,p0o,_0o,v0o,J_,ose,b0o,F0o,_q,T0o,M0o,E0o,Y_,rse,C0o,w0o,vq,A0o,y0o,L0o,K_,tse,x0o,$0o,bq,k0o,S0o,R0o,Z_,ase,B0o,P0o,nse,I0o,q0o,N0o,ev,sse,j0o,D0o,Fq,G0o,O0o,V0o,ov,lse,X0o,z0o,Tq,Q0o,W0o,H0o,rv,ise,U0o,J0o,Mq,Y0o,K0o,Z0o,tv,dse,eTo,oTo,Eq,rTo,tTo,aTo,av,nTo,cse,sTo,lTo,fse,iTo,dTo,nv,Ske,vi,sv,mse,xA,cTo,gse,fTo,Rke,$o,$A,mTo,bi,gTo,Cq,hTo,uTo,wq,pTo,_To,vTo,kA,bTo,hse,FTo,TTo,MTo,rt,SA,ETo,use,CTo,wTo,Fi,ATo,pse,yTo,LTo,Aq,xTo,$To,kTo,lv,STo,Ue,RA,RTo,_se,BTo,PTo,Aa,ITo,vse,qTo,NTo,bse,jTo,DTo,Fse,GTo,OTo,VTo,ue,iv,Tse,XTo,zTo,yq,QTo,WTo,HTo,dv,Mse,UTo,JTo,Lq,YTo,KTo,ZTo,cv,Ese,e8o,o8o,xq,r8o,t8o,a8o,fv,Cse,n8o,s8o,$q,l8o,i8o,d8o,mv,wse,c8o,f8o,kq,m8o,g8o,h8o,gv,Ase,u8o,p8o,Sq,_8o,v8o,b8o,hv,yse,F8o,T8o,Rq,M8o,E8o,C8o,uv,Lse,w8o,A8o,Bq,y8o,L8o,x8o,pv,xse,$8o,k8o,Pq,S8o,R8o,B8o,_v,$se,P8o,I8o,Iq,q8o,N8o,j8o,vv,kse,D8o,G8o,qq,O8o,V8o,X8o,bv,Sse,z8o,Q8o,Nq,W8o,H8o,U8o,Fv,Rse,J8o,Y8o,jq,K8o,Z8o,eMo,Tv,Bse,oMo,rMo,Dq,tMo,aMo,nMo,Mv,Pse,sMo,lMo,Gq,iMo,dMo,cMo,Ev,Ise,fMo,mMo,Oq,gMo,hMo,uMo,Cv,pMo,qse,_Mo,vMo,Nse,bMo,FMo,wv,Bke,Ti,Av,jse,BA,TMo,Dse,MMo,Pke,ko,PA,EMo,Mi,CMo,Vq,wMo,AMo,Xq,yMo,LMo,xMo,IA,$Mo,Gse,kMo,SMo,RMo,tt,qA,BMo,Ose,PMo,IMo,Ei,qMo,Vse,NMo,jMo,zq,DMo,GMo,OMo,yv,VMo,Je,NA,XMo,Xse,zMo,QMo,ya,WMo,zse,HMo,UMo,Qse,JMo,YMo,Wse,KMo,ZMo,eEo,q,Lv,Hse,oEo,rEo,Qq,tEo,aEo,nEo,xv,Use,sEo,lEo,Wq,iEo,dEo,cEo,$v,Jse,fEo,mEo,Hq,gEo,hEo,uEo,kv,Yse,pEo,_Eo,Uq,vEo,bEo,FEo,Sv,Kse,TEo,MEo,Jq,EEo,CEo,wEo,Rv,Zse,AEo,yEo,Yq,LEo,xEo,$Eo,Bv,ele,kEo,SEo,Kq,REo,BEo,PEo,Pv,ole,IEo,qEo,Zq,NEo,jEo,DEo,Iv,rle,GEo,OEo,eN,VEo,XEo,zEo,qv,tle,QEo,WEo,oN,HEo,UEo,JEo,Nv,ale,YEo,KEo,rN,ZEo,e5o,o5o,jv,nle,r5o,t5o,tN,a5o,n5o,s5o,Dv,sle,l5o,i5o,aN,d5o,c5o,f5o,Gv,lle,m5o,g5o,nN,h5o,u5o,p5o,Ov,ile,_5o,v5o,sN,b5o,F5o,T5o,Vv,dle,M5o,E5o,lN,C5o,w5o,A5o,Xv,cle,y5o,L5o,iN,x5o,$5o,k5o,zv,fle,S5o,R5o,dN,B5o,P5o,I5o,Qv,mle,q5o,N5o,cN,j5o,D5o,G5o,Wv,gle,O5o,V5o,fN,X5o,z5o,Q5o,Hv,hle,W5o,H5o,mN,U5o,J5o,Y5o,Uv,ule,K5o,Z5o,gN,eCo,oCo,rCo,Jv,ple,tCo,aCo,hN,nCo,sCo,lCo,Yv,_le,iCo,dCo,uN,cCo,fCo,mCo,Kv,vle,gCo,hCo,pN,uCo,pCo,_Co,Zv,ble,vCo,bCo,_N,FCo,TCo,MCo,e1,Fle,ECo,CCo,vN,wCo,ACo,yCo,o1,Tle,LCo,xCo,bN,$Co,kCo,SCo,r1,Mle,RCo,BCo,FN,PCo,ICo,qCo,t1,Ele,NCo,jCo,TN,DCo,GCo,OCo,a1,Cle,VCo,XCo,MN,zCo,QCo,WCo,n1,wle,HCo,UCo,EN,JCo,YCo,KCo,s1,Ale,ZCo,e3o,CN,o3o,r3o,t3o,l1,yle,a3o,n3o,wN,s3o,l3o,i3o,i1,Lle,d3o,c3o,AN,f3o,m3o,g3o,d1,xle,h3o,u3o,yN,p3o,_3o,v3o,c1,$le,b3o,F3o,LN,T3o,M3o,E3o,f1,kle,C3o,w3o,xN,A3o,y3o,L3o,m1,Sle,x3o,$3o,$N,k3o,S3o,R3o,g1,Rle,B3o,P3o,kN,I3o,q3o,N3o,h1,Ble,j3o,D3o,SN,G3o,O3o,V3o,u1,Ple,X3o,z3o,RN,Q3o,W3o,H3o,p1,Ile,U3o,J3o,BN,Y3o,K3o,Z3o,_1,qle,ewo,owo,PN,rwo,two,awo,v1,Nle,nwo,swo,IN,lwo,iwo,dwo,b1,jle,cwo,fwo,qN,mwo,gwo,hwo,F1,uwo,Dle,pwo,_wo,Gle,vwo,bwo,T1,Ike,Ci,M1,Ole,jA,Fwo,Vle,Two,qke,So,DA,Mwo,wi,Ewo,NN,Cwo,wwo,jN,Awo,ywo,Lwo,GA,xwo,Xle,$wo,kwo,Swo,at,OA,Rwo,zle,Bwo,Pwo,Ai,Iwo,Qle,qwo,Nwo,DN,jwo,Dwo,Gwo,E1,Owo,Ye,VA,Vwo,Wle,Xwo,zwo,La,Qwo,Hle,Wwo,Hwo,Ule,Uwo,Jwo,Jle,Ywo,Kwo,Zwo,Y,C1,Yle,eAo,oAo,GN,rAo,tAo,aAo,w1,Kle,nAo,sAo,ON,lAo,iAo,dAo,A1,Zle,cAo,fAo,VN,mAo,gAo,hAo,y1,eie,uAo,pAo,XN,_Ao,vAo,bAo,L1,oie,FAo,TAo,zN,MAo,EAo,CAo,x1,rie,wAo,AAo,QN,yAo,LAo,xAo,$1,tie,$Ao,kAo,WN,SAo,RAo,BAo,k1,aie,PAo,IAo,HN,qAo,NAo,jAo,S1,nie,DAo,GAo,UN,OAo,VAo,XAo,R1,sie,zAo,QAo,JN,WAo,HAo,UAo,B1,lie,JAo,YAo,YN,KAo,ZAo,e6o,P1,iie,o6o,r6o,KN,t6o,a6o,n6o,I1,die,s6o,l6o,ZN,i6o,d6o,c6o,q1,cie,f6o,m6o,ej,g6o,h6o,u6o,N1,fie,p6o,_6o,oj,v6o,b6o,F6o,j1,mie,T6o,M6o,rj,E6o,C6o,w6o,D1,gie,A6o,y6o,tj,L6o,x6o,$6o,G1,hie,k6o,S6o,aj,R6o,B6o,P6o,O1,uie,I6o,q6o,nj,N6o,j6o,D6o,V1,pie,G6o,O6o,sj,V6o,X6o,z6o,X1,_ie,Q6o,W6o,lj,H6o,U6o,J6o,z1,vie,Y6o,K6o,ij,Z6o,eyo,oyo,Q1,bie,ryo,tyo,dj,ayo,nyo,syo,W1,Fie,lyo,iyo,cj,dyo,cyo,fyo,H1,Tie,myo,gyo,fj,hyo,uyo,pyo,U1,Mie,_yo,vyo,mj,byo,Fyo,Tyo,J1,Eie,Myo,Eyo,gj,Cyo,wyo,Ayo,Y1,Cie,yyo,Lyo,hj,xyo,$yo,kyo,K1,Syo,wie,Ryo,Byo,Aie,Pyo,Iyo,Z1,Nke,yi,eb,yie,XA,qyo,Lie,Nyo,jke,Ro,zA,jyo,Li,Dyo,uj,Gyo,Oyo,pj,Vyo,Xyo,zyo,QA,Qyo,xie,Wyo,Hyo,Uyo,nt,WA,Jyo,$ie,Yyo,Kyo,xi,Zyo,kie,eLo,oLo,_j,rLo,tLo,aLo,ob,nLo,Ke,HA,sLo,Sie,lLo,iLo,xa,dLo,Rie,cLo,fLo,Bie,mLo,gLo,Pie,hLo,uLo,pLo,Wr,rb,Iie,_Lo,vLo,vj,bLo,FLo,TLo,tb,qie,MLo,ELo,bj,CLo,wLo,ALo,ab,Nie,yLo,LLo,Fj,xLo,$Lo,kLo,nb,jie,SLo,RLo,Tj,BLo,PLo,ILo,sb,Die,qLo,NLo,Mj,jLo,DLo,GLo,lb,OLo,Gie,VLo,XLo,Oie,zLo,QLo,ib,Dke,$i,db,Vie,UA,WLo,Xie,HLo,Gke,Bo,JA,ULo,ki,JLo,Ej,YLo,KLo,Cj,ZLo,exo,oxo,YA,rxo,zie,txo,axo,nxo,st,KA,sxo,Qie,lxo,ixo,Si,dxo,Wie,cxo,fxo,wj,mxo,gxo,hxo,cb,uxo,Ze,ZA,pxo,Hie,_xo,vxo,$a,bxo,Uie,Fxo,Txo,Jie,Mxo,Exo,Yie,Cxo,wxo,Axo,U,fb,Kie,yxo,Lxo,Aj,xxo,$xo,kxo,mb,Zie,Sxo,Rxo,yj,Bxo,Pxo,Ixo,gb,ede,qxo,Nxo,Lj,jxo,Dxo,Gxo,hb,ode,Oxo,Vxo,xj,Xxo,zxo,Qxo,ub,rde,Wxo,Hxo,$j,Uxo,Jxo,Yxo,pb,tde,Kxo,Zxo,kj,e7o,o7o,r7o,_b,ade,t7o,a7o,Sj,n7o,s7o,l7o,vb,nde,i7o,d7o,Rj,c7o,f7o,m7o,bb,sde,g7o,h7o,Bj,u7o,p7o,_7o,Fb,lde,v7o,b7o,Pj,F7o,T7o,M7o,Tb,ide,E7o,C7o,Ij,w7o,A7o,y7o,Mb,dde,L7o,x7o,qj,$7o,k7o,S7o,Eb,cde,R7o,B7o,Nj,P7o,I7o,q7o,Cb,fde,N7o,j7o,jj,D7o,G7o,O7o,wb,mde,V7o,X7o,Dj,z7o,Q7o,W7o,Ab,gde,H7o,U7o,Gj,J7o,Y7o,K7o,yb,hde,Z7o,e9o,Oj,o9o,r9o,t9o,Lb,ude,a9o,n9o,Vj,s9o,l9o,i9o,xb,pde,d9o,c9o,Xj,f9o,m9o,g9o,$b,_de,h9o,u9o,zj,p9o,_9o,v9o,kb,vde,b9o,F9o,Qj,T9o,M9o,E9o,Sb,bde,C9o,w9o,Wj,A9o,y9o,L9o,Rb,Fde,x9o,$9o,Hj,k9o,S9o,R9o,Bb,Tde,B9o,P9o,Uj,I9o,q9o,N9o,Pb,Mde,j9o,D9o,Jj,G9o,O9o,V9o,Ib,Ede,X9o,z9o,Yj,Q9o,W9o,H9o,qb,Cde,U9o,J9o,Kj,Y9o,K9o,Z9o,Nb,wde,e$o,o$o,Zj,r$o,t$o,a$o,jb,Ade,n$o,s$o,eD,l$o,i$o,d$o,Db,yde,c$o,f$o,oD,m$o,g$o,h$o,Gb,Lde,u$o,p$o,rD,_$o,v$o,b$o,Ob,xde,F$o,T$o,tD,M$o,E$o,C$o,Vb,$de,w$o,A$o,aD,y$o,L$o,x$o,Xb,$$o,kde,k$o,S$o,Sde,R$o,B$o,zb,Oke,Ri,Qb,Rde,e6,P$o,Bde,I$o,Vke,Po,o6,q$o,Bi,N$o,nD,j$o,D$o,sD,G$o,O$o,V$o,r6,X$o,Pde,z$o,Q$o,W$o,lt,t6,H$o,Ide,U$o,J$o,Pi,Y$o,qde,K$o,Z$o,lD,eko,oko,rko,Wb,tko,eo,a6,ako,Nde,nko,sko,ka,lko,jde,iko,dko,Dde,cko,fko,Gde,mko,gko,hko,O,Hb,Ode,uko,pko,iD,_ko,vko,bko,Ub,Vde,Fko,Tko,dD,Mko,Eko,Cko,Jb,Xde,wko,Ako,cD,yko,Lko,xko,Yb,zde,$ko,kko,fD,Sko,Rko,Bko,Kb,Qde,Pko,Iko,mD,qko,Nko,jko,Zb,Wde,Dko,Gko,gD,Oko,Vko,Xko,e4,Hde,zko,Qko,hD,Wko,Hko,Uko,o4,Ude,Jko,Yko,uD,Kko,Zko,eSo,r4,Jde,oSo,rSo,pD,tSo,aSo,nSo,t4,Yde,sSo,lSo,_D,iSo,dSo,cSo,a4,Kde,fSo,mSo,vD,gSo,hSo,uSo,n4,Zde,pSo,_So,bD,vSo,bSo,FSo,s4,ece,TSo,MSo,FD,ESo,CSo,wSo,l4,oce,ASo,ySo,TD,LSo,xSo,$So,i4,rce,kSo,SSo,MD,RSo,BSo,PSo,d4,tce,ISo,qSo,ED,NSo,jSo,DSo,c4,ace,GSo,OSo,CD,VSo,XSo,zSo,f4,nce,QSo,WSo,wD,HSo,USo,JSo,m4,sce,YSo,KSo,AD,ZSo,eRo,oRo,g4,lce,rRo,tRo,yD,aRo,nRo,sRo,h4,ice,lRo,iRo,LD,dRo,cRo,fRo,u4,dce,mRo,gRo,xD,hRo,uRo,pRo,p4,cce,_Ro,vRo,$D,bRo,FRo,TRo,_4,fce,MRo,ERo,kD,CRo,wRo,ARo,v4,mce,yRo,LRo,SD,xRo,$Ro,kRo,b4,gce,SRo,RRo,RD,BRo,PRo,IRo,F4,hce,qRo,NRo,BD,jRo,DRo,GRo,T4,uce,ORo,VRo,PD,XRo,zRo,QRo,M4,pce,WRo,HRo,ID,URo,JRo,YRo,E4,_ce,KRo,ZRo,qD,eBo,oBo,rBo,C4,vce,tBo,aBo,ND,nBo,sBo,lBo,w4,bce,iBo,dBo,jD,cBo,fBo,mBo,A4,Fce,gBo,hBo,DD,uBo,pBo,_Bo,y4,Tce,vBo,bBo,GD,FBo,TBo,MBo,L4,Mce,EBo,CBo,OD,wBo,ABo,yBo,x4,Ece,LBo,xBo,VD,$Bo,kBo,SBo,$4,Cce,RBo,BBo,XD,PBo,IBo,qBo,k4,wce,NBo,jBo,zD,DBo,GBo,OBo,S4,Ace,VBo,XBo,QD,zBo,QBo,WBo,R4,HBo,yce,UBo,JBo,Lce,YBo,KBo,B4,Xke,Ii,P4,xce,n6,ZBo,$ce,ePo,zke,Io,s6,oPo,qi,rPo,WD,tPo,aPo,HD,nPo,sPo,lPo,l6,iPo,kce,dPo,cPo,fPo,it,i6,mPo,Sce,gPo,hPo,Ni,uPo,Rce,pPo,_Po,UD,vPo,bPo,FPo,I4,TPo,oo,d6,MPo,Bce,EPo,CPo,Sa,wPo,Pce,APo,yPo,Ice,LPo,xPo,qce,$Po,kPo,SPo,Nce,q4,jce,RPo,BPo,JD,PPo,IPo,qPo,N4,NPo,Dce,jPo,DPo,Gce,GPo,OPo,j4,Qke,ji,D4,Oce,c6,VPo,Vce,XPo,Wke,qo,f6,zPo,Di,QPo,YD,WPo,HPo,KD,UPo,JPo,YPo,m6,KPo,Xce,ZPo,eIo,oIo,dt,g6,rIo,zce,tIo,aIo,Gi,nIo,Qce,sIo,lIo,ZD,iIo,dIo,cIo,G4,fIo,ro,h6,mIo,Wce,gIo,hIo,Ra,uIo,Hce,pIo,_Io,Uce,vIo,bIo,Jce,FIo,TIo,MIo,Fe,O4,Yce,EIo,CIo,eG,wIo,AIo,yIo,V4,Kce,LIo,xIo,oG,$Io,kIo,SIo,bs,Zce,RIo,BIo,rG,PIo,IIo,tG,qIo,NIo,jIo,X4,efe,DIo,GIo,aG,OIo,VIo,XIo,ct,ofe,zIo,QIo,nG,WIo,HIo,sG,UIo,JIo,lG,YIo,KIo,ZIo,z4,rfe,eqo,oqo,iG,rqo,tqo,aqo,Q4,tfe,nqo,sqo,dG,lqo,iqo,dqo,W4,afe,cqo,fqo,cG,mqo,gqo,hqo,H4,nfe,uqo,pqo,fG,_qo,vqo,bqo,U4,sfe,Fqo,Tqo,mG,Mqo,Eqo,Cqo,J4,lfe,wqo,Aqo,gG,yqo,Lqo,xqo,Y4,$qo,ife,kqo,Sqo,dfe,Rqo,Bqo,K4,Hke,Oi,Z4,cfe,u6,Pqo,ffe,Iqo,Uke,No,p6,qqo,Vi,Nqo,hG,jqo,Dqo,uG,Gqo,Oqo,Vqo,_6,Xqo,mfe,zqo,Qqo,Wqo,ft,v6,Hqo,gfe,Uqo,Jqo,Xi,Yqo,hfe,Kqo,Zqo,pG,eNo,oNo,rNo,e2,tNo,to,b6,aNo,ufe,nNo,sNo,Ba,lNo,pfe,iNo,dNo,_fe,cNo,fNo,vfe,mNo,gNo,hNo,bfe,o2,Ffe,uNo,pNo,_G,_No,vNo,bNo,r2,FNo,Tfe,TNo,MNo,Mfe,ENo,CNo,t2,Jke,zi,a2,Efe,F6,wNo,Cfe,ANo,Yke,jo,T6,yNo,Qi,LNo,vG,xNo,$No,bG,kNo,SNo,RNo,M6,BNo,wfe,PNo,INo,qNo,mt,E6,NNo,Afe,jNo,DNo,Wi,GNo,yfe,ONo,VNo,FG,XNo,zNo,QNo,n2,WNo,ao,C6,HNo,Lfe,UNo,JNo,Pa,YNo,xfe,KNo,ZNo,$fe,ejo,ojo,kfe,rjo,tjo,ajo,Ie,s2,Sfe,njo,sjo,TG,ljo,ijo,djo,l2,Rfe,cjo,fjo,MG,mjo,gjo,hjo,i2,Bfe,ujo,pjo,EG,_jo,vjo,bjo,d2,Pfe,Fjo,Tjo,CG,Mjo,Ejo,Cjo,c2,Ife,wjo,Ajo,wG,yjo,Ljo,xjo,f2,qfe,$jo,kjo,AG,Sjo,Rjo,Bjo,m2,Nfe,Pjo,Ijo,yG,qjo,Njo,jjo,g2,jfe,Djo,Gjo,LG,Ojo,Vjo,Xjo,h2,zjo,Dfe,Qjo,Wjo,Gfe,Hjo,Ujo,u2,Kke,Hi,p2,Ofe,w6,Jjo,Vfe,Yjo,Zke,Do,A6,Kjo,Ui,Zjo,xG,eDo,oDo,$G,rDo,tDo,aDo,y6,nDo,Xfe,sDo,lDo,iDo,gt,L6,dDo,zfe,cDo,fDo,Ji,mDo,Qfe,gDo,hDo,kG,uDo,pDo,_Do,_2,vDo,no,x6,bDo,Wfe,FDo,TDo,Ia,MDo,Hfe,EDo,CDo,Ufe,wDo,ADo,Jfe,yDo,LDo,xDo,qa,v2,Yfe,$Do,kDo,SG,SDo,RDo,BDo,b2,Kfe,PDo,IDo,RG,qDo,NDo,jDo,F2,Zfe,DDo,GDo,BG,ODo,VDo,XDo,T2,eme,zDo,QDo,PG,WDo,HDo,UDo,M2,JDo,ome,YDo,KDo,rme,ZDo,eGo,E2,eSe,Yi,C2,tme,$6,oGo,ame,rGo,oSe,Go,k6,tGo,Ki,aGo,IG,nGo,sGo,qG,lGo,iGo,dGo,S6,cGo,nme,fGo,mGo,gGo,ht,R6,hGo,sme,uGo,pGo,Zi,_Go,lme,vGo,bGo,NG,FGo,TGo,MGo,w2,EGo,so,B6,CGo,ime,wGo,AGo,Na,yGo,dme,LGo,xGo,cme,$Go,kGo,fme,SGo,RGo,BGo,qe,A2,mme,PGo,IGo,jG,qGo,NGo,jGo,y2,gme,DGo,GGo,DG,OGo,VGo,XGo,L2,hme,zGo,QGo,GG,WGo,HGo,UGo,x2,ume,JGo,YGo,OG,KGo,ZGo,eOo,$2,pme,oOo,rOo,VG,tOo,aOo,nOo,k2,_me,sOo,lOo,XG,iOo,dOo,cOo,S2,vme,fOo,mOo,zG,gOo,hOo,uOo,R2,bme,pOo,_Oo,QG,vOo,bOo,FOo,B2,TOo,Fme,MOo,EOo,Tme,COo,wOo,P2,rSe,ed,I2,Mme,P6,AOo,Eme,yOo,tSe,Oo,I6,LOo,od,xOo,WG,$Oo,kOo,HG,SOo,ROo,BOo,q6,POo,Cme,IOo,qOo,NOo,ut,N6,jOo,wme,DOo,GOo,rd,OOo,Ame,VOo,XOo,UG,zOo,QOo,WOo,q2,HOo,lo,j6,UOo,yme,JOo,YOo,ja,KOo,Lme,ZOo,eVo,xme,oVo,rVo,$me,tVo,aVo,nVo,D6,N2,kme,sVo,lVo,JG,iVo,dVo,cVo,j2,Sme,fVo,mVo,YG,gVo,hVo,uVo,D2,pVo,Rme,_Vo,vVo,Bme,bVo,FVo,G2,aSe,td,O2,Pme,G6,TVo,Ime,MVo,nSe,Vo,O6,EVo,ad,CVo,KG,wVo,AVo,ZG,yVo,LVo,xVo,V6,$Vo,qme,kVo,SVo,RVo,pt,X6,BVo,Nme,PVo,IVo,nd,qVo,jme,NVo,jVo,eO,DVo,GVo,OVo,V2,VVo,io,z6,XVo,Dme,zVo,QVo,Da,WVo,Gme,HVo,UVo,Ome,JVo,YVo,Vme,KVo,ZVo,eXo,Ga,X2,Xme,oXo,rXo,oO,tXo,aXo,nXo,z2,zme,sXo,lXo,rO,iXo,dXo,cXo,Q2,Qme,fXo,mXo,tO,gXo,hXo,uXo,W2,Wme,pXo,_Xo,aO,vXo,bXo,FXo,H2,TXo,Hme,MXo,EXo,Ume,CXo,wXo,U2,sSe,sd,J2,Jme,Q6,AXo,Yme,yXo,lSe,Xo,W6,LXo,ld,xXo,nO,$Xo,kXo,sO,SXo,RXo,BXo,H6,PXo,Kme,IXo,qXo,NXo,_t,U6,jXo,Zme,DXo,GXo,id,OXo,ege,VXo,XXo,lO,zXo,QXo,WXo,Y2,HXo,co,J6,UXo,oge,JXo,YXo,Oa,KXo,rge,ZXo,ezo,tge,ozo,rzo,age,tzo,azo,nzo,dd,K2,nge,szo,lzo,iO,izo,dzo,czo,Z2,sge,fzo,mzo,dO,gzo,hzo,uzo,eF,lge,pzo,_zo,cO,vzo,bzo,Fzo,oF,Tzo,ige,Mzo,Ezo,dge,Czo,wzo,rF,iSe,cd,tF,cge,Y6,Azo,fge,yzo,dSe,zo,K6,Lzo,fd,xzo,fO,$zo,kzo,mO,Szo,Rzo,Bzo,Z6,Pzo,mge,Izo,qzo,Nzo,vt,ey,jzo,gge,Dzo,Gzo,md,Ozo,hge,Vzo,Xzo,gO,zzo,Qzo,Wzo,aF,Hzo,fo,oy,Uzo,uge,Jzo,Yzo,Va,Kzo,pge,Zzo,eQo,_ge,oQo,rQo,vge,tQo,aQo,nQo,bge,nF,Fge,sQo,lQo,hO,iQo,dQo,cQo,sF,fQo,Tge,mQo,gQo,Mge,hQo,uQo,lF,cSe,gd,iF,Ege,ry,pQo,Cge,_Qo,fSe,Qo,ty,vQo,hd,bQo,uO,FQo,TQo,pO,MQo,EQo,CQo,ay,wQo,wge,AQo,yQo,LQo,bt,ny,xQo,Age,$Qo,kQo,ud,SQo,yge,RQo,BQo,_O,PQo,IQo,qQo,dF,NQo,mo,sy,jQo,Lge,DQo,GQo,Xa,OQo,xge,VQo,XQo,$ge,zQo,QQo,kge,WQo,HQo,UQo,Sge,cF,Rge,JQo,YQo,vO,KQo,ZQo,eWo,fF,oWo,Bge,rWo,tWo,Pge,aWo,nWo,mF,mSe,pd,gF,Ige,ly,sWo,qge,lWo,gSe,Wo,iy,iWo,_d,dWo,bO,cWo,fWo,FO,mWo,gWo,hWo,dy,uWo,Nge,pWo,_Wo,vWo,Ft,cy,bWo,jge,FWo,TWo,vd,MWo,Dge,EWo,CWo,TO,wWo,AWo,yWo,hF,LWo,go,fy,xWo,Gge,$Wo,kWo,za,SWo,Oge,RWo,BWo,Vge,PWo,IWo,Xge,qWo,NWo,jWo,bd,uF,zge,DWo,GWo,MO,OWo,VWo,XWo,pF,Qge,zWo,QWo,EO,WWo,HWo,UWo,_F,Wge,JWo,YWo,CO,KWo,ZWo,eHo,vF,oHo,Hge,rHo,tHo,Uge,aHo,nHo,bF,hSe,Fd,FF,Jge,my,sHo,Yge,lHo,uSe,Ho,gy,iHo,Td,dHo,wO,cHo,fHo,AO,mHo,gHo,hHo,hy,uHo,Kge,pHo,_Ho,vHo,Tt,uy,bHo,Zge,FHo,THo,Md,MHo,ehe,EHo,CHo,yO,wHo,AHo,yHo,TF,LHo,ho,py,xHo,ohe,$Ho,kHo,Qa,SHo,rhe,RHo,BHo,the,PHo,IHo,ahe,qHo,NHo,jHo,nhe,MF,she,DHo,GHo,LO,OHo,VHo,XHo,EF,zHo,lhe,QHo,WHo,ihe,HHo,UHo,CF,pSe,Ed,wF,dhe,_y,JHo,che,YHo,_Se,Uo,vy,KHo,Cd,ZHo,xO,eUo,oUo,$O,rUo,tUo,aUo,by,nUo,fhe,sUo,lUo,iUo,Mt,Fy,dUo,mhe,cUo,fUo,wd,mUo,ghe,gUo,hUo,kO,uUo,pUo,_Uo,AF,vUo,Mr,Ty,bUo,hhe,FUo,TUo,Wa,MUo,uhe,EUo,CUo,phe,wUo,AUo,_he,yUo,LUo,xUo,j,yF,vhe,$Uo,kUo,SO,SUo,RUo,BUo,LF,bhe,PUo,IUo,RO,qUo,NUo,jUo,xF,Fhe,DUo,GUo,BO,OUo,VUo,XUo,$F,The,zUo,QUo,PO,WUo,HUo,UUo,kF,Mhe,JUo,YUo,IO,KUo,ZUo,eJo,SF,Ehe,oJo,rJo,qO,tJo,aJo,nJo,RF,Che,sJo,lJo,NO,iJo,dJo,cJo,BF,whe,fJo,mJo,jO,gJo,hJo,uJo,PF,Ahe,pJo,_Jo,DO,vJo,bJo,FJo,IF,yhe,TJo,MJo,GO,EJo,CJo,wJo,qF,Lhe,AJo,yJo,OO,LJo,xJo,$Jo,NF,xhe,kJo,SJo,VO,RJo,BJo,PJo,jF,$he,IJo,qJo,XO,NJo,jJo,DJo,DF,khe,GJo,OJo,zO,VJo,XJo,zJo,GF,She,QJo,WJo,QO,HJo,UJo,JJo,OF,Rhe,YJo,KJo,WO,ZJo,eYo,oYo,Fs,Bhe,rYo,tYo,HO,aYo,nYo,UO,sYo,lYo,iYo,VF,Phe,dYo,cYo,JO,fYo,mYo,gYo,XF,Ihe,hYo,uYo,YO,pYo,_Yo,vYo,zF,qhe,bYo,FYo,KO,TYo,MYo,EYo,QF,Nhe,CYo,wYo,ZO,AYo,yYo,LYo,WF,jhe,xYo,$Yo,eV,kYo,SYo,RYo,HF,Dhe,BYo,PYo,oV,IYo,qYo,NYo,UF,Ghe,jYo,DYo,rV,GYo,OYo,VYo,JF,Ohe,XYo,zYo,tV,QYo,WYo,HYo,YF,Vhe,UYo,JYo,aV,YYo,KYo,ZYo,KF,Xhe,eKo,oKo,nV,rKo,tKo,aKo,ZF,zhe,nKo,sKo,sV,lKo,iKo,dKo,e0,Qhe,cKo,fKo,lV,mKo,gKo,hKo,o0,Whe,uKo,pKo,iV,_Ko,vKo,bKo,r0,Hhe,FKo,TKo,dV,MKo,EKo,CKo,t0,Uhe,wKo,AKo,cV,yKo,LKo,xKo,a0,Jhe,$Ko,kKo,fV,SKo,RKo,BKo,n0,Yhe,PKo,IKo,mV,qKo,NKo,jKo,s0,Khe,DKo,GKo,gV,OKo,VKo,XKo,l0,Zhe,zKo,QKo,hV,WKo,HKo,UKo,i0,eue,JKo,YKo,uV,KKo,ZKo,eZo,d0,oue,oZo,rZo,pV,tZo,aZo,nZo,c0,rue,sZo,lZo,_V,iZo,dZo,cZo,f0,tue,fZo,mZo,vV,gZo,hZo,uZo,m0,aue,pZo,_Zo,bV,vZo,bZo,FZo,g0,nue,TZo,MZo,FV,EZo,CZo,wZo,h0,sue,AZo,yZo,TV,LZo,xZo,$Zo,u0,lue,kZo,SZo,MV,RZo,BZo,PZo,p0,vSe,Ad,_0,iue,My,IZo,due,qZo,bSe,Jo,Ey,NZo,yd,jZo,EV,DZo,GZo,CV,OZo,VZo,XZo,Cy,zZo,cue,QZo,WZo,HZo,Et,wy,UZo,fue,JZo,YZo,Ld,KZo,mue,ZZo,eer,wV,oer,rer,ter,v0,aer,Er,Ay,ner,gue,ser,ler,Ha,ier,hue,der,cer,uue,fer,mer,pue,ger,her,uer,ae,b0,_ue,per,_er,AV,ver,ber,Fer,F0,vue,Ter,Mer,yV,Eer,Cer,wer,T0,bue,Aer,yer,LV,Ler,xer,$er,M0,Fue,ker,Ser,xV,Rer,Ber,Per,E0,Tue,Ier,qer,$V,Ner,jer,Der,C0,Mue,Ger,Oer,kV,Ver,Xer,zer,w0,Eue,Qer,Wer,SV,Her,Uer,Jer,A0,Cue,Yer,Ker,RV,Zer,eor,oor,y0,wue,ror,tor,BV,aor,nor,sor,L0,Aue,lor,ior,PV,dor,cor,mor,x0,yue,gor,hor,IV,uor,por,_or,$0,Lue,vor,bor,qV,For,Tor,Mor,k0,xue,Eor,Cor,NV,wor,Aor,yor,S0,$ue,Lor,xor,jV,$or,kor,Sor,R0,kue,Ror,Bor,DV,Por,Ior,qor,B0,Sue,Nor,jor,GV,Dor,Gor,Oor,P0,Rue,Vor,Xor,OV,zor,Qor,Wor,I0,Bue,Hor,Uor,VV,Jor,Yor,Kor,q0,Pue,Zor,err,XV,orr,rrr,trr,N0,Iue,arr,nrr,zV,srr,lrr,irr,j0,que,drr,crr,QV,frr,mrr,grr,D0,Nue,hrr,urr,WV,prr,_rr,vrr,G0,jue,brr,Frr,HV,Trr,Mrr,Err,O0,FSe,xd,V0,Due,yy,Crr,Gue,wrr,TSe,Yo,Ly,Arr,$d,yrr,UV,Lrr,xrr,JV,$rr,krr,Srr,xy,Rrr,Oue,Brr,Prr,Irr,Ct,$y,qrr,Vue,Nrr,jrr,kd,Drr,Xue,Grr,Orr,YV,Vrr,Xrr,zrr,X0,Qrr,Cr,ky,Wrr,zue,Hrr,Urr,Ua,Jrr,Que,Yrr,Krr,Wue,Zrr,etr,Hue,otr,rtr,ttr,ve,z0,Uue,atr,ntr,KV,str,ltr,itr,Q0,Jue,dtr,ctr,ZV,ftr,mtr,gtr,W0,Yue,htr,utr,eX,ptr,_tr,vtr,H0,Kue,btr,Ftr,oX,Ttr,Mtr,Etr,U0,Zue,Ctr,wtr,rX,Atr,ytr,Ltr,J0,epe,xtr,$tr,tX,ktr,Str,Rtr,Y0,ope,Btr,Ptr,aX,Itr,qtr,Ntr,K0,rpe,jtr,Dtr,nX,Gtr,Otr,Vtr,Z0,tpe,Xtr,ztr,sX,Qtr,Wtr,Htr,eT,ape,Utr,Jtr,lX,Ytr,Ktr,Ztr,oT,npe,ear,oar,iX,rar,tar,aar,rT,spe,nar,sar,dX,lar,iar,dar,tT,MSe,Sd,aT,lpe,Sy,car,ipe,far,ESe,Ko,Ry,mar,Rd,gar,cX,har,uar,fX,par,_ar,bar,By,Far,dpe,Tar,Mar,Ear,wt,Py,Car,cpe,war,Aar,Bd,yar,fpe,Lar,xar,mX,$ar,kar,Sar,nT,Rar,wr,Iy,Bar,mpe,Par,Iar,Ja,qar,gpe,Nar,jar,hpe,Dar,Gar,upe,Oar,Var,Xar,qy,sT,ppe,zar,Qar,gX,War,Har,Uar,lT,_pe,Jar,Yar,hX,Kar,Zar,enr,iT,CSe,Pd,dT,vpe,Ny,onr,bpe,rnr,wSe,Zo,jy,tnr,Id,anr,uX,nnr,snr,pX,lnr,inr,dnr,Dy,cnr,Fpe,fnr,mnr,gnr,At,Gy,hnr,Tpe,unr,pnr,qd,_nr,Mpe,vnr,bnr,_X,Fnr,Tnr,Mnr,cT,Enr,Ar,Oy,Cnr,Epe,wnr,Anr,Ya,ynr,Cpe,Lnr,xnr,wpe,$nr,knr,Ape,Snr,Rnr,Bnr,se,fT,ype,Pnr,Inr,vX,qnr,Nnr,jnr,mT,Lpe,Dnr,Gnr,bX,Onr,Vnr,Xnr,gT,xpe,znr,Qnr,FX,Wnr,Hnr,Unr,hT,$pe,Jnr,Ynr,TX,Knr,Znr,esr,uT,kpe,osr,rsr,MX,tsr,asr,nsr,pT,Spe,ssr,lsr,EX,isr,dsr,csr,_T,Rpe,fsr,msr,CX,gsr,hsr,usr,vT,Bpe,psr,_sr,wX,vsr,bsr,Fsr,bT,Ppe,Tsr,Msr,AX,Esr,Csr,wsr,FT,Ipe,Asr,ysr,yX,Lsr,xsr,$sr,TT,qpe,ksr,Ssr,LX,Rsr,Bsr,Psr,MT,Npe,Isr,qsr,xX,Nsr,jsr,Dsr,ET,jpe,Gsr,Osr,$X,Vsr,Xsr,zsr,CT,Dpe,Qsr,Wsr,kX,Hsr,Usr,Jsr,wT,Gpe,Ysr,Ksr,SX,Zsr,elr,olr,AT,Ope,rlr,tlr,RX,alr,nlr,slr,yT,Vpe,llr,ilr,BX,dlr,clr,flr,LT,Xpe,mlr,glr,PX,hlr,ulr,plr,xT,zpe,_lr,vlr,IX,blr,Flr,Tlr,$T,Qpe,Mlr,Elr,qX,Clr,wlr,Alr,kT,ASe,Nd,ST,Wpe,Vy,ylr,Hpe,Llr,ySe,er,Xy,xlr,jd,$lr,NX,klr,Slr,jX,Rlr,Blr,Plr,zy,Ilr,Upe,qlr,Nlr,jlr,yt,Qy,Dlr,Jpe,Glr,Olr,Dd,Vlr,Ype,Xlr,zlr,DX,Qlr,Wlr,Hlr,RT,Ulr,yr,Wy,Jlr,Kpe,Ylr,Klr,Ka,Zlr,Zpe,eir,oir,e_e,rir,tir,o_e,air,nir,sir,Ce,BT,r_e,lir,iir,GX,dir,cir,fir,PT,t_e,mir,gir,OX,hir,uir,pir,IT,a_e,_ir,vir,VX,bir,Fir,Tir,qT,n_e,Mir,Eir,XX,Cir,wir,Air,NT,s_e,yir,Lir,zX,xir,$ir,kir,jT,l_e,Sir,Rir,QX,Bir,Pir,Iir,DT,i_e,qir,Nir,WX,jir,Dir,Gir,GT,d_e,Oir,Vir,HX,Xir,zir,Qir,OT,c_e,Wir,Hir,UX,Uir,Jir,Yir,VT,f_e,Kir,Zir,JX,edr,odr,rdr,XT,LSe,Gd,zT,m_e,Hy,tdr,g_e,adr,xSe,or,Uy,ndr,Od,sdr,YX,ldr,idr,KX,ddr,cdr,fdr,Jy,mdr,h_e,gdr,hdr,udr,Lt,Yy,pdr,u_e,_dr,vdr,Vd,bdr,p_e,Fdr,Tdr,ZX,Mdr,Edr,Cdr,QT,wdr,Lr,Ky,Adr,__e,ydr,Ldr,Za,xdr,v_e,$dr,kdr,b_e,Sdr,Rdr,F_e,Bdr,Pdr,Idr,Z,WT,T_e,qdr,Ndr,ez,jdr,Ddr,Gdr,HT,M_e,Odr,Vdr,oz,Xdr,zdr,Qdr,UT,E_e,Wdr,Hdr,rz,Udr,Jdr,Ydr,JT,C_e,Kdr,Zdr,tz,ecr,ocr,rcr,YT,w_e,tcr,acr,az,ncr,scr,lcr,KT,A_e,icr,dcr,nz,ccr,fcr,mcr,ZT,y_e,gcr,hcr,sz,ucr,pcr,_cr,e8,L_e,vcr,bcr,lz,Fcr,Tcr,Mcr,o8,x_e,Ecr,Ccr,iz,wcr,Acr,ycr,r8,$_e,Lcr,xcr,dz,$cr,kcr,Scr,t8,k_e,Rcr,Bcr,cz,Pcr,Icr,qcr,a8,S_e,Ncr,jcr,fz,Dcr,Gcr,Ocr,n8,R_e,Vcr,Xcr,mz,zcr,Qcr,Wcr,s8,B_e,Hcr,Ucr,gz,Jcr,Ycr,Kcr,l8,P_e,Zcr,efr,hz,ofr,rfr,tfr,i8,I_e,afr,nfr,uz,sfr,lfr,ifr,d8,q_e,dfr,cfr,pz,ffr,mfr,gfr,c8,N_e,hfr,ufr,_z,pfr,_fr,vfr,f8,j_e,bfr,Ffr,vz,Tfr,Mfr,Efr,m8,D_e,Cfr,wfr,bz,Afr,yfr,Lfr,g8,G_e,xfr,$fr,Fz,kfr,Sfr,Rfr,h8,O_e,Bfr,Pfr,Tz,Ifr,qfr,Nfr,u8,V_e,jfr,Dfr,Mz,Gfr,Ofr,Vfr,p8,X_e,Xfr,zfr,Ez,Qfr,Wfr,Hfr,_8,z_e,Ufr,Jfr,Cz,Yfr,Kfr,Zfr,v8,Q_e,emr,omr,wz,rmr,tmr,amr,b8,$Se,Xd,F8,W_e,Zy,nmr,H_e,smr,kSe,rr,eL,lmr,zd,imr,Az,dmr,cmr,yz,fmr,mmr,gmr,oL,hmr,U_e,umr,pmr,_mr,xt,rL,vmr,J_e,bmr,Fmr,Qd,Tmr,Y_e,Mmr,Emr,Lz,Cmr,wmr,Amr,T8,ymr,xr,tL,Lmr,K_e,xmr,$mr,en,kmr,Z_e,Smr,Rmr,eve,Bmr,Pmr,ove,Imr,qmr,Nmr,ge,M8,rve,jmr,Dmr,xz,Gmr,Omr,Vmr,E8,tve,Xmr,zmr,$z,Qmr,Wmr,Hmr,C8,ave,Umr,Jmr,kz,Ymr,Kmr,Zmr,w8,nve,egr,ogr,Sz,rgr,tgr,agr,A8,sve,ngr,sgr,Rz,lgr,igr,dgr,y8,lve,cgr,fgr,Bz,mgr,ggr,hgr,L8,ive,ugr,pgr,Pz,_gr,vgr,bgr,x8,dve,Fgr,Tgr,Iz,Mgr,Egr,Cgr,$8,cve,wgr,Agr,qz,ygr,Lgr,xgr,k8,fve,$gr,kgr,Nz,Sgr,Rgr,Bgr,S8,mve,Pgr,Igr,jz,qgr,Ngr,jgr,R8,gve,Dgr,Ggr,Dz,Ogr,Vgr,Xgr,B8,hve,zgr,Qgr,Gz,Wgr,Hgr,Ugr,P8,uve,Jgr,Ygr,Oz,Kgr,Zgr,ehr,I8,pve,ohr,rhr,Vz,thr,ahr,nhr,q8,_ve,shr,lhr,Xz,ihr,dhr,chr,N8,vve,fhr,mhr,zz,ghr,hhr,uhr,j8,SSe,Wd,D8,bve,aL,phr,Fve,_hr,RSe,tr,nL,vhr,Hd,bhr,Qz,Fhr,Thr,Wz,Mhr,Ehr,Chr,sL,whr,Tve,Ahr,yhr,Lhr,$t,lL,xhr,Mve,$hr,khr,Ud,Shr,Eve,Rhr,Bhr,Hz,Phr,Ihr,qhr,G8,Nhr,$r,iL,jhr,Cve,Dhr,Ghr,on,Ohr,wve,Vhr,Xhr,Ave,zhr,Qhr,yve,Whr,Hhr,Uhr,Lve,O8,xve,Jhr,Yhr,Uz,Khr,Zhr,eur,V8,BSe,Jd,X8,$ve,dL,our,kve,rur,PSe,ar,cL,tur,Yd,aur,Jz,nur,sur,Yz,lur,iur,dur,fL,cur,Sve,fur,mur,gur,kt,mL,hur,Rve,uur,pur,Kd,_ur,Bve,vur,bur,Kz,Fur,Tur,Mur,z8,Eur,kr,gL,Cur,Pve,wur,Aur,rn,yur,Ive,Lur,xur,qve,$ur,kur,Nve,Sur,Rur,Bur,le,Q8,jve,Pur,Iur,Zz,qur,Nur,jur,W8,Dve,Dur,Gur,eQ,Our,Vur,Xur,H8,Gve,zur,Qur,oQ,Wur,Hur,Uur,U8,Ove,Jur,Yur,rQ,Kur,Zur,epr,J8,Vve,opr,rpr,tQ,tpr,apr,npr,Y8,Xve,spr,lpr,aQ,ipr,dpr,cpr,K8,zve,fpr,mpr,nQ,gpr,hpr,upr,Z8,Qve,ppr,_pr,sQ,vpr,bpr,Fpr,eM,Wve,Tpr,Mpr,lQ,Epr,Cpr,wpr,oM,Hve,Apr,ypr,iQ,Lpr,xpr,$pr,rM,Uve,kpr,Spr,dQ,Rpr,Bpr,Ppr,tM,Jve,Ipr,qpr,cQ,Npr,jpr,Dpr,aM,Yve,Gpr,Opr,fQ,Vpr,Xpr,zpr,nM,Kve,Qpr,Wpr,mQ,Hpr,Upr,Jpr,sM,Zve,Ypr,Kpr,gQ,Zpr,e_r,o_r,lM,e1e,r_r,t_r,hQ,a_r,n_r,s_r,iM,o1e,l_r,i_r,uQ,d_r,c_r,f_r,dM,r1e,m_r,g_r,pQ,h_r,u_r,p_r,cM,t1e,__r,v_r,_Q,b_r,F_r,T_r,fM,a1e,M_r,E_r,vQ,C_r,w_r,A_r,mM,ISe,Zd,gM,n1e,hL,y_r,s1e,L_r,qSe,nr,uL,x_r,ec,$_r,bQ,k_r,S_r,FQ,R_r,B_r,P_r,pL,I_r,l1e,q_r,N_r,j_r,St,_L,D_r,i1e,G_r,O_r,oc,V_r,d1e,X_r,z_r,TQ,Q_r,W_r,H_r,hM,U_r,Sr,vL,J_r,c1e,Y_r,K_r,tn,Z_r,f1e,evr,ovr,m1e,rvr,tvr,g1e,avr,nvr,svr,ie,uM,h1e,lvr,ivr,MQ,dvr,cvr,fvr,pM,u1e,mvr,gvr,EQ,hvr,uvr,pvr,_M,p1e,_vr,vvr,CQ,bvr,Fvr,Tvr,vM,_1e,Mvr,Evr,wQ,Cvr,wvr,Avr,bM,v1e,yvr,Lvr,AQ,xvr,$vr,kvr,FM,b1e,Svr,Rvr,yQ,Bvr,Pvr,Ivr,TM,F1e,qvr,Nvr,LQ,jvr,Dvr,Gvr,MM,T1e,Ovr,Vvr,xQ,Xvr,zvr,Qvr,EM,M1e,Wvr,Hvr,$Q,Uvr,Jvr,Yvr,CM,E1e,Kvr,Zvr,kQ,e1r,o1r,r1r,wM,C1e,t1r,a1r,SQ,n1r,s1r,l1r,AM,w1e,i1r,d1r,RQ,c1r,f1r,m1r,yM,A1e,g1r,h1r,BQ,u1r,p1r,_1r,LM,y1e,v1r,b1r,PQ,F1r,T1r,M1r,xM,L1e,E1r,C1r,IQ,w1r,A1r,y1r,$M,x1e,L1r,x1r,qQ,$1r,k1r,S1r,kM,$1e,R1r,B1r,NQ,P1r,I1r,q1r,SM,k1e,N1r,j1r,jQ,D1r,G1r,O1r,RM,S1e,V1r,X1r,DQ,z1r,Q1r,W1r,BM,R1e,H1r,U1r,GQ,J1r,Y1r,K1r,PM,NSe,rc,IM,B1e,bL,Z1r,P1e,ebr,jSe,sr,FL,obr,tc,rbr,OQ,tbr,abr,VQ,nbr,sbr,lbr,TL,ibr,I1e,dbr,cbr,fbr,Rt,ML,mbr,q1e,gbr,hbr,ac,ubr,N1e,pbr,_br,XQ,vbr,bbr,Fbr,qM,Tbr,Rr,EL,Mbr,j1e,Ebr,Cbr,an,wbr,D1e,Abr,ybr,G1e,Lbr,xbr,O1e,$br,kbr,Sbr,V1e,NM,X1e,Rbr,Bbr,zQ,Pbr,Ibr,qbr,jM,DSe,nc,DM,z1e,CL,Nbr,Q1e,jbr,GSe,lr,wL,Dbr,sc,Gbr,QQ,Obr,Vbr,WQ,Xbr,zbr,Qbr,AL,Wbr,W1e,Hbr,Ubr,Jbr,Bt,yL,Ybr,H1e,Kbr,Zbr,lc,e4r,U1e,o4r,r4r,HQ,t4r,a4r,n4r,GM,s4r,Br,LL,l4r,J1e,i4r,d4r,nn,c4r,Y1e,f4r,m4r,K1e,g4r,h4r,Z1e,u4r,p4r,_4r,ebe,OM,obe,v4r,b4r,UQ,F4r,T4r,M4r,VM,OSe,ic,XM,rbe,xL,E4r,tbe,C4r,VSe,ir,$L,w4r,dc,A4r,JQ,y4r,L4r,YQ,x4r,$4r,k4r,kL,S4r,abe,R4r,B4r,P4r,Pt,SL,I4r,nbe,q4r,N4r,cc,j4r,sbe,D4r,G4r,KQ,O4r,V4r,X4r,zM,z4r,Pr,RL,Q4r,lbe,W4r,H4r,sn,U4r,ibe,J4r,Y4r,dbe,K4r,Z4r,cbe,e2r,o2r,r2r,oe,QM,fbe,t2r,a2r,ZQ,n2r,s2r,l2r,WM,mbe,i2r,d2r,eW,c2r,f2r,m2r,HM,gbe,g2r,h2r,oW,u2r,p2r,_2r,UM,hbe,v2r,b2r,rW,F2r,T2r,M2r,JM,ube,E2r,C2r,tW,w2r,A2r,y2r,YM,pbe,L2r,x2r,aW,$2r,k2r,S2r,KM,_be,R2r,B2r,nW,P2r,I2r,q2r,ZM,vbe,N2r,j2r,sW,D2r,G2r,O2r,eE,bbe,V2r,X2r,lW,z2r,Q2r,W2r,oE,Fbe,H2r,U2r,iW,J2r,Y2r,K2r,rE,Tbe,Z2r,eFr,dW,oFr,rFr,tFr,tE,Mbe,aFr,nFr,cW,sFr,lFr,iFr,aE,Ebe,dFr,cFr,fW,fFr,mFr,gFr,nE,Cbe,hFr,uFr,mW,pFr,_Fr,vFr,sE,wbe,bFr,FFr,gW,TFr,MFr,EFr,lE,Abe,CFr,wFr,hW,AFr,yFr,LFr,iE,ybe,xFr,$Fr,uW,kFr,SFr,RFr,dE,Lbe,BFr,PFr,pW,IFr,qFr,NFr,cE,xbe,jFr,DFr,_W,GFr,OFr,VFr,fE,$be,XFr,zFr,vW,QFr,WFr,HFr,mE,kbe,UFr,JFr,bW,YFr,KFr,ZFr,gE,Sbe,e0r,o0r,FW,r0r,t0r,a0r,hE,Rbe,n0r,s0r,TW,l0r,i0r,d0r,uE,Bbe,c0r,f0r,MW,m0r,g0r,h0r,pE,Pbe,u0r,p0r,EW,_0r,v0r,b0r,_E,XSe,fc,vE,Ibe,BL,F0r,qbe,T0r,zSe,dr,PL,M0r,mc,E0r,CW,C0r,w0r,wW,A0r,y0r,L0r,IL,x0r,Nbe,$0r,k0r,S0r,It,qL,R0r,jbe,B0r,P0r,gc,I0r,Dbe,q0r,N0r,AW,j0r,D0r,G0r,bE,O0r,Ir,NL,V0r,Gbe,X0r,z0r,ln,Q0r,Obe,W0r,H0r,Vbe,U0r,J0r,Xbe,Y0r,K0r,Z0r,Hr,FE,zbe,eTr,oTr,yW,rTr,tTr,aTr,TE,Qbe,nTr,sTr,LW,lTr,iTr,dTr,ME,Wbe,cTr,fTr,xW,mTr,gTr,hTr,EE,Hbe,uTr,pTr,$W,_Tr,vTr,bTr,CE,Ube,FTr,TTr,kW,MTr,ETr,CTr,wE,QSe,hc,AE,Jbe,jL,wTr,Ybe,ATr,WSe,cr,DL,yTr,uc,LTr,SW,xTr,$Tr,RW,kTr,STr,RTr,GL,BTr,Kbe,PTr,ITr,qTr,qt,OL,NTr,Zbe,jTr,DTr,pc,GTr,e4e,OTr,VTr,BW,XTr,zTr,QTr,yE,WTr,qr,VL,HTr,o4e,UTr,JTr,dn,YTr,r4e,KTr,ZTr,t4e,e8r,o8r,a4e,r8r,t8r,a8r,be,LE,n4e,n8r,s8r,PW,l8r,i8r,d8r,xE,s4e,c8r,f8r,IW,m8r,g8r,h8r,$E,l4e,u8r,p8r,qW,_8r,v8r,b8r,kE,i4e,F8r,T8r,NW,M8r,E8r,C8r,SE,d4e,w8r,A8r,jW,y8r,L8r,x8r,RE,c4e,$8r,k8r,DW,S8r,R8r,B8r,BE,f4e,P8r,I8r,GW,q8r,N8r,j8r,PE,m4e,D8r,G8r,OW,O8r,V8r,X8r,IE,g4e,z8r,Q8r,VW,W8r,H8r,U8r,qE,h4e,J8r,Y8r,XW,K8r,Z8r,eMr,NE,u4e,oMr,rMr,zW,tMr,aMr,nMr,jE,p4e,sMr,lMr,QW,iMr,dMr,cMr,DE,HSe,_c,GE,_4e,XL,fMr,v4e,mMr,USe,fr,zL,gMr,vc,hMr,WW,uMr,pMr,HW,_Mr,vMr,bMr,QL,FMr,b4e,TMr,MMr,EMr,Nt,WL,CMr,F4e,wMr,AMr,bc,yMr,T4e,LMr,xMr,UW,$Mr,kMr,SMr,OE,RMr,Nr,HL,BMr,M4e,PMr,IMr,cn,qMr,E4e,NMr,jMr,C4e,DMr,GMr,w4e,OMr,VMr,XMr,we,VE,A4e,zMr,QMr,JW,WMr,HMr,UMr,XE,y4e,JMr,YMr,YW,KMr,ZMr,eEr,zE,L4e,oEr,rEr,KW,tEr,aEr,nEr,QE,x4e,sEr,lEr,ZW,iEr,dEr,cEr,WE,$4e,fEr,mEr,eH,gEr,hEr,uEr,HE,k4e,pEr,_Er,oH,vEr,bEr,FEr,UE,S4e,TEr,MEr,rH,EEr,CEr,wEr,JE,R4e,AEr,yEr,tH,LEr,xEr,$Er,YE,B4e,kEr,SEr,aH,REr,BEr,PEr,KE,P4e,IEr,qEr,nH,NEr,jEr,DEr,ZE,JSe,Fc,e5,I4e,UL,GEr,q4e,OEr,YSe,mr,JL,VEr,Tc,XEr,sH,zEr,QEr,lH,WEr,HEr,UEr,YL,JEr,N4e,YEr,KEr,ZEr,jt,KL,e5r,j4e,o5r,r5r,Mc,t5r,D4e,a5r,n5r,iH,s5r,l5r,i5r,o5,d5r,jr,ZL,c5r,G4e,f5r,m5r,fn,g5r,O4e,h5r,u5r,V4e,p5r,_5r,X4e,v5r,b5r,F5r,xe,r5,z4e,T5r,M5r,dH,E5r,C5r,w5r,t5,Q4e,A5r,y5r,cH,L5r,x5r,$5r,a5,W4e,k5r,S5r,fH,R5r,B5r,P5r,n5,H4e,I5r,q5r,mH,N5r,j5r,D5r,s5,U4e,G5r,O5r,gH,V5r,X5r,z5r,l5,J4e,Q5r,W5r,hH,H5r,U5r,J5r,i5,Y4e,Y5r,K5r,uH,Z5r,eCr,oCr,d5,K4e,rCr,tCr,pH,aCr,nCr,sCr,c5,Z4e,lCr,iCr,_H,dCr,cCr,fCr,f5,KSe,Ec,m5,e2e,ex,mCr,o2e,gCr,ZSe,gr,ox,hCr,Cc,uCr,vH,pCr,_Cr,bH,vCr,bCr,FCr,rx,TCr,r2e,MCr,ECr,CCr,Dt,tx,wCr,t2e,ACr,yCr,wc,LCr,a2e,xCr,$Cr,FH,kCr,SCr,RCr,g5,BCr,Dr,ax,PCr,n2e,ICr,qCr,mn,NCr,s2e,jCr,DCr,l2e,GCr,OCr,i2e,VCr,XCr,zCr,Ae,h5,d2e,QCr,WCr,TH,HCr,UCr,JCr,u5,c2e,YCr,KCr,MH,ZCr,e3r,o3r,p5,f2e,r3r,t3r,EH,a3r,n3r,s3r,_5,m2e,l3r,i3r,CH,d3r,c3r,f3r,v5,g2e,m3r,g3r,wH,h3r,u3r,p3r,b5,h2e,_3r,v3r,AH,b3r,F3r,T3r,F5,u2e,M3r,E3r,yH,C3r,w3r,A3r,T5,p2e,y3r,L3r,LH,x3r,$3r,k3r,M5,_2e,S3r,R3r,xH,B3r,P3r,I3r,E5,v2e,q3r,N3r,$H,j3r,D3r,G3r,C5,eRe,Ac,w5,b2e,nx,O3r,F2e,V3r,oRe,hr,sx,X3r,yc,z3r,kH,Q3r,W3r,SH,H3r,U3r,J3r,lx,Y3r,T2e,K3r,Z3r,ewr,Gt,ix,owr,M2e,rwr,twr,Lc,awr,E2e,nwr,swr,RH,lwr,iwr,dwr,A5,cwr,Gr,dx,fwr,C2e,mwr,gwr,gn,hwr,w2e,uwr,pwr,A2e,_wr,vwr,y2e,bwr,Fwr,Twr,ye,y5,L2e,Mwr,Ewr,BH,Cwr,wwr,Awr,L5,x2e,ywr,Lwr,PH,xwr,$wr,kwr,x5,$2e,Swr,Rwr,IH,Bwr,Pwr,Iwr,$5,k2e,qwr,Nwr,qH,jwr,Dwr,Gwr,k5,S2e,Owr,Vwr,NH,Xwr,zwr,Qwr,S5,R2e,Wwr,Hwr,jH,Uwr,Jwr,Ywr,R5,B2e,Kwr,Zwr,DH,eAr,oAr,rAr,B5,P2e,tAr,aAr,GH,nAr,sAr,lAr,P5,I2e,iAr,dAr,OH,cAr,fAr,mAr,I5,q2e,gAr,hAr,VH,uAr,pAr,_Ar,q5,rRe,xc,N5,N2e,cx,vAr,j2e,bAr,tRe,ur,fx,FAr,$c,TAr,XH,MAr,EAr,zH,CAr,wAr,AAr,mx,yAr,D2e,LAr,xAr,$Ar,Ot,gx,kAr,G2e,SAr,RAr,kc,BAr,O2e,PAr,IAr,QH,qAr,NAr,jAr,j5,DAr,Or,hx,GAr,V2e,OAr,VAr,hn,XAr,X2e,zAr,QAr,z2e,WAr,HAr,Q2e,UAr,JAr,YAr,Ne,D5,W2e,KAr,ZAr,WH,e6r,o6r,r6r,G5,H2e,t6r,a6r,HH,n6r,s6r,l6r,O5,U2e,i6r,d6r,UH,c6r,f6r,m6r,V5,J2e,g6r,h6r,JH,u6r,p6r,_6r,X5,Y2e,v6r,b6r,YH,F6r,T6r,M6r,z5,K2e,E6r,C6r,KH,w6r,A6r,y6r,Q5,Z2e,L6r,x6r,ZH,$6r,k6r,S6r,W5,eFe,R6r,B6r,eU,P6r,I6r,q6r,H5,aRe,Sc,U5,oFe,ux,N6r,rFe,j6r,nRe,pr,px,D6r,Rc,G6r,oU,O6r,V6r,rU,X6r,z6r,Q6r,_x,W6r,tFe,H6r,U6r,J6r,Vt,vx,Y6r,aFe,K6r,Z6r,Bc,eyr,nFe,oyr,ryr,tU,tyr,ayr,nyr,J5,syr,Vr,bx,lyr,sFe,iyr,dyr,un,cyr,lFe,fyr,myr,iFe,gyr,hyr,dFe,uyr,pyr,_yr,je,Y5,cFe,vyr,byr,aU,Fyr,Tyr,Myr,K5,fFe,Eyr,Cyr,nU,wyr,Ayr,yyr,Z5,mFe,Lyr,xyr,sU,$yr,kyr,Syr,eC,gFe,Ryr,Byr,lU,Pyr,Iyr,qyr,oC,hFe,Nyr,jyr,iU,Dyr,Gyr,Oyr,rC,uFe,Vyr,Xyr,dU,zyr,Qyr,Wyr,tC,pFe,Hyr,Uyr,cU,Jyr,Yyr,Kyr,aC,_Fe,Zyr,eLr,fU,oLr,rLr,tLr,nC,sRe,Pc,sC,vFe,Fx,aLr,bFe,nLr,lRe,_r,Tx,sLr,Ic,lLr,mU,iLr,dLr,gU,cLr,fLr,mLr,Mx,gLr,FFe,hLr,uLr,pLr,Xt,Ex,_Lr,TFe,vLr,bLr,qc,FLr,MFe,TLr,MLr,hU,ELr,CLr,wLr,lC,ALr,Xr,Cx,yLr,EFe,LLr,xLr,pn,$Lr,CFe,kLr,SLr,wFe,RLr,BLr,AFe,PLr,ILr,qLr,yFe,iC,LFe,NLr,jLr,uU,DLr,GLr,OLr,dC,iRe,Nc,cC,xFe,wx,VLr,$Fe,XLr,dRe,vr,Ax,zLr,jc,QLr,pU,WLr,HLr,_U,ULr,JLr,YLr,yx,KLr,kFe,ZLr,exr,oxr,zt,Lx,rxr,SFe,txr,axr,Dc,nxr,RFe,sxr,lxr,vU,ixr,dxr,cxr,fC,fxr,zr,xx,mxr,BFe,gxr,hxr,_n,uxr,PFe,pxr,_xr,IFe,vxr,bxr,qFe,Fxr,Txr,Mxr,$x,mC,NFe,Exr,Cxr,bU,wxr,Axr,yxr,gC,jFe,Lxr,xxr,FU,$xr,kxr,Sxr,hC,cRe,Gc,uC,DFe,kx,Rxr,GFe,Bxr,fRe,br,Sx,Pxr,Oc,Ixr,TU,qxr,Nxr,MU,jxr,Dxr,Gxr,Rx,Oxr,OFe,Vxr,Xxr,zxr,Qt,Bx,Qxr,VFe,Wxr,Hxr,Vc,Uxr,XFe,Jxr,Yxr,EU,Kxr,Zxr,e7r,pC,o7r,Qr,Px,r7r,zFe,t7r,a7r,vn,n7r,QFe,s7r,l7r,WFe,i7r,d7r,HFe,c7r,f7r,m7r,UFe,_C,JFe,g7r,h7r,CU,u7r,p7r,_7r,vC,mRe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),qw=new ee({}),Nw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Kc=new v7r({props:{warning:!0,$$slots:{default:[P4t]},$$scope:{ctx:A}}}),jw=new ee({}),Dw=new k({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L541"}}),Vw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L564"}}),Qm=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[I4t]},$$scope:{ctx:A}}}),Xw=new k({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L686"}}),zw=new ee({}),Qw=new k({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L351"}}),Uw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/v4.18.0/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L365"}}),Cg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[q4t]},$$scope:{ctx:A}}}),Jw=new k({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L561"}}),Yw=new ee({}),Kw=new k({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),oA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/v4.18.0/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L185"}}),zg=new v7r({props:{$$slots:{default:[N4t]},$$scope:{ctx:A}}}),Qg=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[j4t]},$$scope:{ctx:A}}}),rA=new k({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L312"}}),tA=new ee({}),aA=new k({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L70"}}),lA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L84"}}),th=new v7r({props:{$$slots:{default:[D4t]},$$scope:{ctx:A}}}),ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[G4t]},$$scope:{ctx:A}}}),iA=new k({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L237"}}),dA=new ee({}),cA=new k({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L707"}}),mA=new k({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),lh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[O4t]},$$scope:{ctx:A}}}),gA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Qu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[V4t]},$$scope:{ctx:A}}}),hA=new ee({}),uA=new k({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L714"}}),_A=new k({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Hu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[X4t]},$$scope:{ctx:A}}}),vA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Pp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[z4t]},$$scope:{ctx:A}}}),bA=new ee({}),FA=new k({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L729"}}),MA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),qp=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Q4t]},$$scope:{ctx:A}}}),EA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),F_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[W4t]},$$scope:{ctx:A}}}),CA=new ee({}),wA=new k({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L736"}}),yA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),M_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[H4t]},$$scope:{ctx:A}}}),LA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[U4t]},$$scope:{ctx:A}}}),xA=new ee({}),$A=new k({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L743"}}),SA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[J4t]},$$scope:{ctx:A}}}),RA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Y4t]},$$scope:{ctx:A}}}),BA=new ee({}),PA=new k({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L752"}}),qA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[K4t]},$$scope:{ctx:A}}}),NA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Z4t]},$$scope:{ctx:A}}}),jA=new ee({}),DA=new k({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L786"}}),OA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[e2t]},$$scope:{ctx:A}}}),VA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[o2t]},$$scope:{ctx:A}}}),XA=new ee({}),zA=new k({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L793"}}),WA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[r2t]},$$scope:{ctx:A}}}),HA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),ib=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[t2t]},$$scope:{ctx:A}}}),UA=new ee({}),JA=new k({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L779"}}),KA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),cb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[a2t]},$$scope:{ctx:A}}}),ZA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[n2t]},$$scope:{ctx:A}}}),e6=new ee({}),o6=new k({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L761"}}),t6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[s2t]},$$scope:{ctx:A}}}),a6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),B4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[l2t]},$$scope:{ctx:A}}}),n6=new ee({}),s6=new k({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L768"}}),i6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[i2t]},$$scope:{ctx:A}}}),d6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[d2t]},$$scope:{ctx:A}}}),c6=new ee({}),f6=new k({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L802"}}),g6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[c2t]},$$scope:{ctx:A}}}),h6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[f2t]},$$scope:{ctx:A}}}),u6=new ee({}),p6=new k({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L841"}}),v6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[m2t]},$$scope:{ctx:A}}}),b6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[g2t]},$$scope:{ctx:A}}}),F6=new ee({}),T6=new k({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L848"}}),E6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[h2t]},$$scope:{ctx:A}}}),C6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[u2t]},$$scope:{ctx:A}}}),w6=new ee({}),A6=new k({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L871"}}),L6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[p2t]},$$scope:{ctx:A}}}),x6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[_2t]},$$scope:{ctx:A}}}),$6=new ee({}),k6=new k({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L855"}}),R6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[v2t]},$$scope:{ctx:A}}}),B6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[b2t]},$$scope:{ctx:A}}}),P6=new ee({}),I6=new k({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L862"}}),N6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[F2t]},$$scope:{ctx:A}}}),j6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[T2t]},$$scope:{ctx:A}}}),G6=new ee({}),O6=new k({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L880"}}),X6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[M2t]},$$scope:{ctx:A}}}),z6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),U2=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[E2t]},$$scope:{ctx:A}}}),Q6=new ee({}),W6=new k({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L887"}}),U6=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Y2=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[C2t]},$$scope:{ctx:A}}}),J6=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[w2t]},$$scope:{ctx:A}}}),Y6=new ee({}),K6=new k({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L834"}}),ey=new k({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[A2t]},$$scope:{ctx:A}}}),oy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[y2t]},$$scope:{ctx:A}}}),ry=new ee({}),ty=new k({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L809"}}),ny=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[L2t]},$$scope:{ctx:A}}}),sy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[x2t]},$$scope:{ctx:A}}}),ly=new ee({}),iy=new k({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L816"}}),cy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[$2t]},$$scope:{ctx:A}}}),fy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[k2t]},$$scope:{ctx:A}}}),my=new ee({}),gy=new k({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L825"}}),uy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[S2t]},$$scope:{ctx:A}}}),py=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[R2t]},$$scope:{ctx:A}}}),_y=new ee({}),vy=new k({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Fy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[B2t]},$$scope:{ctx:A}}}),Ty=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[P2t]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new k({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),wy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[I2t]},$$scope:{ctx:A}}}),Ay=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[q2t]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new k({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),$y=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[N2t]},$$scope:{ctx:A}}}),ky=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[j2t]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new k({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Py=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[D2t]},$$scope:{ctx:A}}}),Iy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G2t]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new k({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Gy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[O2t]},$$scope:{ctx:A}}}),Oy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[V2t]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new k({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Qy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[X2t]},$$scope:{ctx:A}}}),Wy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[z2t]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new k({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Yy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q2t]},$$scope:{ctx:A}}}),Ky=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[W2t]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new k({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),rL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),T8=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[H2t]},$$scope:{ctx:A}}}),tL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[U2t]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new k({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),lL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[J2t]},$$scope:{ctx:A}}}),iL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Y2t]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new k({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),mL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),z8=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[K2t]},$$scope:{ctx:A}}}),gL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Z2t]},$$scope:{ctx:A}}}),hL=new ee({}),uL=new k({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),_L=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eFt]},$$scope:{ctx:A}}}),vL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oFt]},$$scope:{ctx:A}}}),bL=new ee({}),FL=new k({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ML=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rFt]},$$scope:{ctx:A}}}),EL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tFt]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new k({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),yL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aFt]},$$scope:{ctx:A}}}),LL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nFt]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new k({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),SL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sFt]},$$scope:{ctx:A}}}),RL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lFt]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new k({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),qL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),bE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iFt]},$$scope:{ctx:A}}}),NL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dFt]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new k({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),OL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cFt]},$$scope:{ctx:A}}}),VL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fFt]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new k({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),WL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mFt]},$$scope:{ctx:A}}}),HL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gFt]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new k({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),KL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hFt]},$$scope:{ctx:A}}}),ZL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uFt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new k({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),tx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pFt]},$$scope:{ctx:A}}}),ax=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_Ft]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new k({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),ix=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vFt]},$$scope:{ctx:A}}}),dx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bFt]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new k({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),gx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FFt]},$$scope:{ctx:A}}}),hx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TFt]},$$scope:{ctx:A}}}),ux=new ee({}),px=new k({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),vx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MFt]},$$scope:{ctx:A}}}),bx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EFt]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new k({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Ex=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CFt]},$$scope:{ctx:A}}}),Cx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wFt]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new k({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Lx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[AFt]},$$scope:{ctx:A}}}),xx=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yFt]},$$scope:{ctx:A}}}),kx=new ee({}),Sx=new k({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Bx=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LFt]},$$scope:{ctx:A}}}),Px=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xFt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),b=l(),u=a("h1"),m=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),Ql=o("Auto Classes"),Wc=l(),Yr=a("p"),Wl=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=a("code"),Rw=o("from_pretrained()"),Hc=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),Ge=a("p"),Ul=o("Instantiating one of "),Fn=a("a"),Bw=o("AutoConfig"),Tn=o(", "),Mn=a("a"),Pw=o("AutoModel"),Jl=o(`, and
`),En=a("a"),Iw=o("AutoTokenizer"),Yl=o(" will directly create a class of the relevant architecture. For instance"),Uc=l(),F(va.$$.fragment),Oe=l(),Ee=a("p"),D7=o("will create a model that is an instance of "),Kl=a("a"),G7=o("BertModel"),O7=o("."),To=l(),ba=a("p"),V7=o("There is one class of "),Jc=a("code"),X7=o("AutoModel"),_Pe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fke=l(),Zl=a("h2"),Yc=a("a"),pY=a("span"),F(qw.$$.fragment),vPe=l(),_Y=a("span"),bPe=o("Extending the Auto Classes"),mke=l(),Cn=a("p"),FPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vY=a("code"),TPe=o("NewModel"),MPe=o(", make sure you have a "),bY=a("code"),EPe=o("NewModelConfig"),CPe=o(` then you can add those to the auto
classes like this:`),gke=l(),F(Nw.$$.fragment),hke=l(),z7=a("p"),wPe=o("You will then be able to use the auto classes like you would usually do!"),uke=l(),F(Kc.$$.fragment),pke=l(),ei=a("h2"),Zc=a("a"),FY=a("span"),F(jw.$$.fragment),APe=l(),TY=a("span"),yPe=o("AutoConfig"),_ke=l(),Mo=a("div"),F(Dw.$$.fragment),LPe=l(),Gw=a("p"),xPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q7=a("a"),$Pe=o("from_pretrained()"),kPe=o(" class method."),SPe=l(),Ow=a("p"),RPe=o("This class cannot be instantiated directly using "),MY=a("code"),BPe=o("__init__()"),PPe=o(" (throws an error)."),IPe=l(),Fr=a("div"),F(Vw.$$.fragment),qPe=l(),EY=a("p"),NPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jPe=l(),oi=a("p"),DPe=o("The configuration class to instantiate is selected based on the "),CY=a("code"),GPe=o("model_type"),OPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wY=a("code"),VPe=o("pretrained_model_name_or_path"),XPe=o(":"),zPe=l(),y=a("ul"),ef=a("li"),AY=a("strong"),QPe=o("albert"),WPe=o(" \u2014 "),W7=a("a"),HPe=o("AlbertConfig"),UPe=o(" (ALBERT model)"),JPe=l(),of=a("li"),yY=a("strong"),YPe=o("bart"),KPe=o(" \u2014 "),H7=a("a"),ZPe=o("BartConfig"),eIe=o(" (BART model)"),oIe=l(),rf=a("li"),LY=a("strong"),rIe=o("beit"),tIe=o(" \u2014 "),U7=a("a"),aIe=o("BeitConfig"),nIe=o(" (BEiT model)"),sIe=l(),tf=a("li"),xY=a("strong"),lIe=o("bert"),iIe=o(" \u2014 "),J7=a("a"),dIe=o("BertConfig"),cIe=o(" (BERT model)"),fIe=l(),af=a("li"),$Y=a("strong"),mIe=o("bert-generation"),gIe=o(" \u2014 "),Y7=a("a"),hIe=o("BertGenerationConfig"),uIe=o(" (Bert Generation model)"),pIe=l(),nf=a("li"),kY=a("strong"),_Ie=o("big_bird"),vIe=o(" \u2014 "),K7=a("a"),bIe=o("BigBirdConfig"),FIe=o(" (BigBird model)"),TIe=l(),sf=a("li"),SY=a("strong"),MIe=o("bigbird_pegasus"),EIe=o(" \u2014 "),Z7=a("a"),CIe=o("BigBirdPegasusConfig"),wIe=o(" (BigBirdPegasus model)"),AIe=l(),lf=a("li"),RY=a("strong"),yIe=o("blenderbot"),LIe=o(" \u2014 "),e9=a("a"),xIe=o("BlenderbotConfig"),$Ie=o(" (Blenderbot model)"),kIe=l(),df=a("li"),BY=a("strong"),SIe=o("blenderbot-small"),RIe=o(" \u2014 "),o9=a("a"),BIe=o("BlenderbotSmallConfig"),PIe=o(" (BlenderbotSmall model)"),IIe=l(),cf=a("li"),PY=a("strong"),qIe=o("camembert"),NIe=o(" \u2014 "),r9=a("a"),jIe=o("CamembertConfig"),DIe=o(" (CamemBERT model)"),GIe=l(),ff=a("li"),IY=a("strong"),OIe=o("canine"),VIe=o(" \u2014 "),t9=a("a"),XIe=o("CanineConfig"),zIe=o(" (Canine model)"),QIe=l(),mf=a("li"),qY=a("strong"),WIe=o("clip"),HIe=o(" \u2014 "),a9=a("a"),UIe=o("CLIPConfig"),JIe=o(" (CLIP model)"),YIe=l(),gf=a("li"),NY=a("strong"),KIe=o("convbert"),ZIe=o(" \u2014 "),n9=a("a"),eqe=o("ConvBertConfig"),oqe=o(" (ConvBERT model)"),rqe=l(),hf=a("li"),jY=a("strong"),tqe=o("convnext"),aqe=o(" \u2014 "),s9=a("a"),nqe=o("ConvNextConfig"),sqe=o(" (ConvNext model)"),lqe=l(),uf=a("li"),DY=a("strong"),iqe=o("ctrl"),dqe=o(" \u2014 "),l9=a("a"),cqe=o("CTRLConfig"),fqe=o(" (CTRL model)"),mqe=l(),pf=a("li"),GY=a("strong"),gqe=o("data2vec-audio"),hqe=o(" \u2014 "),i9=a("a"),uqe=o("Data2VecAudioConfig"),pqe=o(" (Data2VecAudio model)"),_qe=l(),_f=a("li"),OY=a("strong"),vqe=o("data2vec-text"),bqe=o(" \u2014 "),d9=a("a"),Fqe=o("Data2VecTextConfig"),Tqe=o(" (Data2VecText model)"),Mqe=l(),vf=a("li"),VY=a("strong"),Eqe=o("deberta"),Cqe=o(" \u2014 "),c9=a("a"),wqe=o("DebertaConfig"),Aqe=o(" (DeBERTa model)"),yqe=l(),bf=a("li"),XY=a("strong"),Lqe=o("deberta-v2"),xqe=o(" \u2014 "),f9=a("a"),$qe=o("DebertaV2Config"),kqe=o(" (DeBERTa-v2 model)"),Sqe=l(),Ff=a("li"),zY=a("strong"),Rqe=o("decision_transformer"),Bqe=o(" \u2014 "),m9=a("a"),Pqe=o("DecisionTransformerConfig"),Iqe=o(" (Decision Transformer model)"),qqe=l(),Tf=a("li"),QY=a("strong"),Nqe=o("deit"),jqe=o(" \u2014 "),g9=a("a"),Dqe=o("DeiTConfig"),Gqe=o(" (DeiT model)"),Oqe=l(),Mf=a("li"),WY=a("strong"),Vqe=o("detr"),Xqe=o(" \u2014 "),h9=a("a"),zqe=o("DetrConfig"),Qqe=o(" (DETR model)"),Wqe=l(),Ef=a("li"),HY=a("strong"),Hqe=o("distilbert"),Uqe=o(" \u2014 "),u9=a("a"),Jqe=o("DistilBertConfig"),Yqe=o(" (DistilBERT model)"),Kqe=l(),Cf=a("li"),UY=a("strong"),Zqe=o("dpr"),eNe=o(" \u2014 "),p9=a("a"),oNe=o("DPRConfig"),rNe=o(" (DPR model)"),tNe=l(),wf=a("li"),JY=a("strong"),aNe=o("dpt"),nNe=o(" \u2014 "),_9=a("a"),sNe=o("DPTConfig"),lNe=o(" (DPT model)"),iNe=l(),Af=a("li"),YY=a("strong"),dNe=o("electra"),cNe=o(" \u2014 "),v9=a("a"),fNe=o("ElectraConfig"),mNe=o(" (ELECTRA model)"),gNe=l(),yf=a("li"),KY=a("strong"),hNe=o("encoder-decoder"),uNe=o(" \u2014 "),b9=a("a"),pNe=o("EncoderDecoderConfig"),_Ne=o(" (Encoder decoder model)"),vNe=l(),Lf=a("li"),ZY=a("strong"),bNe=o("flaubert"),FNe=o(" \u2014 "),F9=a("a"),TNe=o("FlaubertConfig"),MNe=o(" (FlauBERT model)"),ENe=l(),xf=a("li"),eK=a("strong"),CNe=o("fnet"),wNe=o(" \u2014 "),T9=a("a"),ANe=o("FNetConfig"),yNe=o(" (FNet model)"),LNe=l(),$f=a("li"),oK=a("strong"),xNe=o("fsmt"),$Ne=o(" \u2014 "),M9=a("a"),kNe=o("FSMTConfig"),SNe=o(" (FairSeq Machine-Translation model)"),RNe=l(),kf=a("li"),rK=a("strong"),BNe=o("funnel"),PNe=o(" \u2014 "),E9=a("a"),INe=o("FunnelConfig"),qNe=o(" (Funnel Transformer model)"),NNe=l(),Sf=a("li"),tK=a("strong"),jNe=o("glpn"),DNe=o(" \u2014 "),C9=a("a"),GNe=o("GLPNConfig"),ONe=o(" (GLPN model)"),VNe=l(),Rf=a("li"),aK=a("strong"),XNe=o("gpt2"),zNe=o(" \u2014 "),w9=a("a"),QNe=o("GPT2Config"),WNe=o(" (OpenAI GPT-2 model)"),HNe=l(),Bf=a("li"),nK=a("strong"),UNe=o("gpt_neo"),JNe=o(" \u2014 "),A9=a("a"),YNe=o("GPTNeoConfig"),KNe=o(" (GPT Neo model)"),ZNe=l(),Pf=a("li"),sK=a("strong"),eje=o("gptj"),oje=o(" \u2014 "),y9=a("a"),rje=o("GPTJConfig"),tje=o(" (GPT-J model)"),aje=l(),If=a("li"),lK=a("strong"),nje=o("hubert"),sje=o(" \u2014 "),L9=a("a"),lje=o("HubertConfig"),ije=o(" (Hubert model)"),dje=l(),qf=a("li"),iK=a("strong"),cje=o("ibert"),fje=o(" \u2014 "),x9=a("a"),mje=o("IBertConfig"),gje=o(" (I-BERT model)"),hje=l(),Nf=a("li"),dK=a("strong"),uje=o("imagegpt"),pje=o(" \u2014 "),$9=a("a"),_je=o("ImageGPTConfig"),vje=o(" (ImageGPT model)"),bje=l(),jf=a("li"),cK=a("strong"),Fje=o("layoutlm"),Tje=o(" \u2014 "),k9=a("a"),Mje=o("LayoutLMConfig"),Eje=o(" (LayoutLM model)"),Cje=l(),Df=a("li"),fK=a("strong"),wje=o("layoutlmv2"),Aje=o(" \u2014 "),S9=a("a"),yje=o("LayoutLMv2Config"),Lje=o(" (LayoutLMv2 model)"),xje=l(),Gf=a("li"),mK=a("strong"),$je=o("led"),kje=o(" \u2014 "),R9=a("a"),Sje=o("LEDConfig"),Rje=o(" (LED model)"),Bje=l(),Of=a("li"),gK=a("strong"),Pje=o("longformer"),Ije=o(" \u2014 "),B9=a("a"),qje=o("LongformerConfig"),Nje=o(" (Longformer model)"),jje=l(),Vf=a("li"),hK=a("strong"),Dje=o("luke"),Gje=o(" \u2014 "),P9=a("a"),Oje=o("LukeConfig"),Vje=o(" (LUKE model)"),Xje=l(),Xf=a("li"),uK=a("strong"),zje=o("lxmert"),Qje=o(" \u2014 "),I9=a("a"),Wje=o("LxmertConfig"),Hje=o(" (LXMERT model)"),Uje=l(),zf=a("li"),pK=a("strong"),Jje=o("m2m_100"),Yje=o(" \u2014 "),q9=a("a"),Kje=o("M2M100Config"),Zje=o(" (M2M100 model)"),eDe=l(),Qf=a("li"),_K=a("strong"),oDe=o("marian"),rDe=o(" \u2014 "),N9=a("a"),tDe=o("MarianConfig"),aDe=o(" (Marian model)"),nDe=l(),Wf=a("li"),vK=a("strong"),sDe=o("maskformer"),lDe=o(" \u2014 "),j9=a("a"),iDe=o("MaskFormerConfig"),dDe=o(" (MaskFormer model)"),cDe=l(),Hf=a("li"),bK=a("strong"),fDe=o("mbart"),mDe=o(" \u2014 "),D9=a("a"),gDe=o("MBartConfig"),hDe=o(" (mBART model)"),uDe=l(),Uf=a("li"),FK=a("strong"),pDe=o("megatron-bert"),_De=o(" \u2014 "),G9=a("a"),vDe=o("MegatronBertConfig"),bDe=o(" (MegatronBert model)"),FDe=l(),Jf=a("li"),TK=a("strong"),TDe=o("mobilebert"),MDe=o(" \u2014 "),O9=a("a"),EDe=o("MobileBertConfig"),CDe=o(" (MobileBERT model)"),wDe=l(),Yf=a("li"),MK=a("strong"),ADe=o("mpnet"),yDe=o(" \u2014 "),V9=a("a"),LDe=o("MPNetConfig"),xDe=o(" (MPNet model)"),$De=l(),Kf=a("li"),EK=a("strong"),kDe=o("mt5"),SDe=o(" \u2014 "),X9=a("a"),RDe=o("MT5Config"),BDe=o(" (mT5 model)"),PDe=l(),Zf=a("li"),CK=a("strong"),IDe=o("nystromformer"),qDe=o(" \u2014 "),z9=a("a"),NDe=o("NystromformerConfig"),jDe=o(" (Nystromformer model)"),DDe=l(),em=a("li"),wK=a("strong"),GDe=o("openai-gpt"),ODe=o(" \u2014 "),Q9=a("a"),VDe=o("OpenAIGPTConfig"),XDe=o(" (OpenAI GPT model)"),zDe=l(),om=a("li"),AK=a("strong"),QDe=o("pegasus"),WDe=o(" \u2014 "),W9=a("a"),HDe=o("PegasusConfig"),UDe=o(" (Pegasus model)"),JDe=l(),rm=a("li"),yK=a("strong"),YDe=o("perceiver"),KDe=o(" \u2014 "),H9=a("a"),ZDe=o("PerceiverConfig"),eGe=o(" (Perceiver model)"),oGe=l(),tm=a("li"),LK=a("strong"),rGe=o("plbart"),tGe=o(" \u2014 "),U9=a("a"),aGe=o("PLBartConfig"),nGe=o(" (PLBart model)"),sGe=l(),am=a("li"),xK=a("strong"),lGe=o("poolformer"),iGe=o(" \u2014 "),J9=a("a"),dGe=o("PoolFormerConfig"),cGe=o(" (PoolFormer model)"),fGe=l(),nm=a("li"),$K=a("strong"),mGe=o("prophetnet"),gGe=o(" \u2014 "),Y9=a("a"),hGe=o("ProphetNetConfig"),uGe=o(" (ProphetNet model)"),pGe=l(),sm=a("li"),kK=a("strong"),_Ge=o("qdqbert"),vGe=o(" \u2014 "),K9=a("a"),bGe=o("QDQBertConfig"),FGe=o(" (QDQBert model)"),TGe=l(),lm=a("li"),SK=a("strong"),MGe=o("rag"),EGe=o(" \u2014 "),Z9=a("a"),CGe=o("RagConfig"),wGe=o(" (RAG model)"),AGe=l(),im=a("li"),RK=a("strong"),yGe=o("realm"),LGe=o(" \u2014 "),e$=a("a"),xGe=o("RealmConfig"),$Ge=o(" (Realm model)"),kGe=l(),dm=a("li"),BK=a("strong"),SGe=o("reformer"),RGe=o(" \u2014 "),o$=a("a"),BGe=o("ReformerConfig"),PGe=o(" (Reformer model)"),IGe=l(),cm=a("li"),PK=a("strong"),qGe=o("rembert"),NGe=o(" \u2014 "),r$=a("a"),jGe=o("RemBertConfig"),DGe=o(" (RemBERT model)"),GGe=l(),fm=a("li"),IK=a("strong"),OGe=o("resnet"),VGe=o(" \u2014 "),t$=a("a"),XGe=o("ResNetConfig"),zGe=o(" (ResNet model)"),QGe=l(),mm=a("li"),qK=a("strong"),WGe=o("retribert"),HGe=o(" \u2014 "),a$=a("a"),UGe=o("RetriBertConfig"),JGe=o(" (RetriBERT model)"),YGe=l(),gm=a("li"),NK=a("strong"),KGe=o("roberta"),ZGe=o(" \u2014 "),n$=a("a"),eOe=o("RobertaConfig"),oOe=o(" (RoBERTa model)"),rOe=l(),hm=a("li"),jK=a("strong"),tOe=o("roformer"),aOe=o(" \u2014 "),s$=a("a"),nOe=o("RoFormerConfig"),sOe=o(" (RoFormer model)"),lOe=l(),um=a("li"),DK=a("strong"),iOe=o("segformer"),dOe=o(" \u2014 "),l$=a("a"),cOe=o("SegformerConfig"),fOe=o(" (SegFormer model)"),mOe=l(),pm=a("li"),GK=a("strong"),gOe=o("sew"),hOe=o(" \u2014 "),i$=a("a"),uOe=o("SEWConfig"),pOe=o(" (SEW model)"),_Oe=l(),_m=a("li"),OK=a("strong"),vOe=o("sew-d"),bOe=o(" \u2014 "),d$=a("a"),FOe=o("SEWDConfig"),TOe=o(" (SEW-D model)"),MOe=l(),vm=a("li"),VK=a("strong"),EOe=o("speech-encoder-decoder"),COe=o(" \u2014 "),c$=a("a"),wOe=o("SpeechEncoderDecoderConfig"),AOe=o(" (Speech Encoder decoder model)"),yOe=l(),bm=a("li"),XK=a("strong"),LOe=o("speech_to_text"),xOe=o(" \u2014 "),f$=a("a"),$Oe=o("Speech2TextConfig"),kOe=o(" (Speech2Text model)"),SOe=l(),Fm=a("li"),zK=a("strong"),ROe=o("speech_to_text_2"),BOe=o(" \u2014 "),m$=a("a"),POe=o("Speech2Text2Config"),IOe=o(" (Speech2Text2 model)"),qOe=l(),Tm=a("li"),QK=a("strong"),NOe=o("splinter"),jOe=o(" \u2014 "),g$=a("a"),DOe=o("SplinterConfig"),GOe=o(" (Splinter model)"),OOe=l(),Mm=a("li"),WK=a("strong"),VOe=o("squeezebert"),XOe=o(" \u2014 "),h$=a("a"),zOe=o("SqueezeBertConfig"),QOe=o(" (SqueezeBERT model)"),WOe=l(),Em=a("li"),HK=a("strong"),HOe=o("swin"),UOe=o(" \u2014 "),u$=a("a"),JOe=o("SwinConfig"),YOe=o(" (Swin model)"),KOe=l(),Cm=a("li"),UK=a("strong"),ZOe=o("t5"),eVe=o(" \u2014 "),p$=a("a"),oVe=o("T5Config"),rVe=o(" (T5 model)"),tVe=l(),wm=a("li"),JK=a("strong"),aVe=o("tapas"),nVe=o(" \u2014 "),_$=a("a"),sVe=o("TapasConfig"),lVe=o(" (TAPAS model)"),iVe=l(),Am=a("li"),YK=a("strong"),dVe=o("transfo-xl"),cVe=o(" \u2014 "),v$=a("a"),fVe=o("TransfoXLConfig"),mVe=o(" (Transformer-XL model)"),gVe=l(),ym=a("li"),KK=a("strong"),hVe=o("trocr"),uVe=o(" \u2014 "),b$=a("a"),pVe=o("TrOCRConfig"),_Ve=o(" (TrOCR model)"),vVe=l(),Lm=a("li"),ZK=a("strong"),bVe=o("unispeech"),FVe=o(" \u2014 "),F$=a("a"),TVe=o("UniSpeechConfig"),MVe=o(" (UniSpeech model)"),EVe=l(),xm=a("li"),eZ=a("strong"),CVe=o("unispeech-sat"),wVe=o(" \u2014 "),T$=a("a"),AVe=o("UniSpeechSatConfig"),yVe=o(" (UniSpeechSat model)"),LVe=l(),$m=a("li"),oZ=a("strong"),xVe=o("van"),$Ve=o(" \u2014 "),M$=a("a"),kVe=o("VanConfig"),SVe=o(" (VAN model)"),RVe=l(),km=a("li"),rZ=a("strong"),BVe=o("vilt"),PVe=o(" \u2014 "),E$=a("a"),IVe=o("ViltConfig"),qVe=o(" (ViLT model)"),NVe=l(),Sm=a("li"),tZ=a("strong"),jVe=o("vision-encoder-decoder"),DVe=o(" \u2014 "),C$=a("a"),GVe=o("VisionEncoderDecoderConfig"),OVe=o(" (Vision Encoder decoder model)"),VVe=l(),Rm=a("li"),aZ=a("strong"),XVe=o("vision-text-dual-encoder"),zVe=o(" \u2014 "),w$=a("a"),QVe=o("VisionTextDualEncoderConfig"),WVe=o(" (VisionTextDualEncoder model)"),HVe=l(),Bm=a("li"),nZ=a("strong"),UVe=o("visual_bert"),JVe=o(" \u2014 "),A$=a("a"),YVe=o("VisualBertConfig"),KVe=o(" (VisualBert model)"),ZVe=l(),Pm=a("li"),sZ=a("strong"),eXe=o("vit"),oXe=o(" \u2014 "),y$=a("a"),rXe=o("ViTConfig"),tXe=o(" (ViT model)"),aXe=l(),Im=a("li"),lZ=a("strong"),nXe=o("vit_mae"),sXe=o(" \u2014 "),L$=a("a"),lXe=o("ViTMAEConfig"),iXe=o(" (ViTMAE model)"),dXe=l(),qm=a("li"),iZ=a("strong"),cXe=o("wav2vec2"),fXe=o(" \u2014 "),x$=a("a"),mXe=o("Wav2Vec2Config"),gXe=o(" (Wav2Vec2 model)"),hXe=l(),Nm=a("li"),dZ=a("strong"),uXe=o("wavlm"),pXe=o(" \u2014 "),$$=a("a"),_Xe=o("WavLMConfig"),vXe=o(" (WavLM model)"),bXe=l(),jm=a("li"),cZ=a("strong"),FXe=o("xglm"),TXe=o(" \u2014 "),k$=a("a"),MXe=o("XGLMConfig"),EXe=o(" (XGLM model)"),CXe=l(),Dm=a("li"),fZ=a("strong"),wXe=o("xlm"),AXe=o(" \u2014 "),S$=a("a"),yXe=o("XLMConfig"),LXe=o(" (XLM model)"),xXe=l(),Gm=a("li"),mZ=a("strong"),$Xe=o("xlm-prophetnet"),kXe=o(" \u2014 "),R$=a("a"),SXe=o("XLMProphetNetConfig"),RXe=o(" (XLMProphetNet model)"),BXe=l(),Om=a("li"),gZ=a("strong"),PXe=o("xlm-roberta"),IXe=o(" \u2014 "),B$=a("a"),qXe=o("XLMRobertaConfig"),NXe=o(" (XLM-RoBERTa model)"),jXe=l(),Vm=a("li"),hZ=a("strong"),DXe=o("xlm-roberta-xl"),GXe=o(" \u2014 "),P$=a("a"),OXe=o("XLMRobertaXLConfig"),VXe=o(" (XLM-RoBERTa-XL model)"),XXe=l(),Xm=a("li"),uZ=a("strong"),zXe=o("xlnet"),QXe=o(" \u2014 "),I$=a("a"),WXe=o("XLNetConfig"),HXe=o(" (XLNet model)"),UXe=l(),zm=a("li"),pZ=a("strong"),JXe=o("yoso"),YXe=o(" \u2014 "),q$=a("a"),KXe=o("YosoConfig"),ZXe=o(" (YOSO model)"),eze=l(),F(Qm.$$.fragment),oze=l(),Wm=a("div"),F(Xw.$$.fragment),rze=l(),_Z=a("p"),tze=o("Register a new configuration for this class."),vke=l(),ri=a("h2"),Hm=a("a"),vZ=a("span"),F(zw.$$.fragment),aze=l(),bZ=a("span"),nze=o("AutoTokenizer"),bke=l(),Eo=a("div"),F(Qw.$$.fragment),sze=l(),Ww=a("p"),lze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),N$=a("a"),ize=o("AutoTokenizer.from_pretrained()"),dze=o(" class method."),cze=l(),Hw=a("p"),fze=o("This class cannot be instantiated directly using "),FZ=a("code"),mze=o("__init__()"),gze=o(" (throws an error)."),hze=l(),Tr=a("div"),F(Uw.$$.fragment),uze=l(),TZ=a("p"),pze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_ze=l(),Fa=a("p"),vze=o("The tokenizer class to instantiate is selected based on the "),MZ=a("code"),bze=o("model_type"),Fze=o(` property of the config object (either
passed as an argument or loaded from `),EZ=a("code"),Tze=o("pretrained_model_name_or_path"),Mze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CZ=a("code"),Eze=o("pretrained_model_name_or_path"),Cze=o(":"),wze=l(),S=a("ul"),wn=a("li"),wZ=a("strong"),Aze=o("albert"),yze=o(" \u2014 "),j$=a("a"),Lze=o("AlbertTokenizer"),xze=o(" or "),D$=a("a"),$ze=o("AlbertTokenizerFast"),kze=o(" (ALBERT model)"),Sze=l(),An=a("li"),AZ=a("strong"),Rze=o("bart"),Bze=o(" \u2014 "),G$=a("a"),Pze=o("BartTokenizer"),Ize=o(" or "),O$=a("a"),qze=o("BartTokenizerFast"),Nze=o(" (BART model)"),jze=l(),yn=a("li"),yZ=a("strong"),Dze=o("barthez"),Gze=o(" \u2014 "),V$=a("a"),Oze=o("BarthezTokenizer"),Vze=o(" or "),X$=a("a"),Xze=o("BarthezTokenizerFast"),zze=o(" (BARThez model)"),Qze=l(),Um=a("li"),LZ=a("strong"),Wze=o("bartpho"),Hze=o(" \u2014 "),z$=a("a"),Uze=o("BartphoTokenizer"),Jze=o(" (BARTpho model)"),Yze=l(),Ln=a("li"),xZ=a("strong"),Kze=o("bert"),Zze=o(" \u2014 "),Q$=a("a"),eQe=o("BertTokenizer"),oQe=o(" or "),W$=a("a"),rQe=o("BertTokenizerFast"),tQe=o(" (BERT model)"),aQe=l(),Jm=a("li"),$Z=a("strong"),nQe=o("bert-generation"),sQe=o(" \u2014 "),H$=a("a"),lQe=o("BertGenerationTokenizer"),iQe=o(" (Bert Generation model)"),dQe=l(),Ym=a("li"),kZ=a("strong"),cQe=o("bert-japanese"),fQe=o(" \u2014 "),U$=a("a"),mQe=o("BertJapaneseTokenizer"),gQe=o(" (BertJapanese model)"),hQe=l(),Km=a("li"),SZ=a("strong"),uQe=o("bertweet"),pQe=o(" \u2014 "),J$=a("a"),_Qe=o("BertweetTokenizer"),vQe=o(" (Bertweet model)"),bQe=l(),xn=a("li"),RZ=a("strong"),FQe=o("big_bird"),TQe=o(" \u2014 "),Y$=a("a"),MQe=o("BigBirdTokenizer"),EQe=o(" or "),K$=a("a"),CQe=o("BigBirdTokenizerFast"),wQe=o(" (BigBird model)"),AQe=l(),$n=a("li"),BZ=a("strong"),yQe=o("bigbird_pegasus"),LQe=o(" \u2014 "),Z$=a("a"),xQe=o("PegasusTokenizer"),$Qe=o(" or "),ek=a("a"),kQe=o("PegasusTokenizerFast"),SQe=o(" (BigBirdPegasus model)"),RQe=l(),kn=a("li"),PZ=a("strong"),BQe=o("blenderbot"),PQe=o(" \u2014 "),ok=a("a"),IQe=o("BlenderbotTokenizer"),qQe=o(" or "),rk=a("a"),NQe=o("BlenderbotTokenizerFast"),jQe=o(" (Blenderbot model)"),DQe=l(),Zm=a("li"),IZ=a("strong"),GQe=o("blenderbot-small"),OQe=o(" \u2014 "),tk=a("a"),VQe=o("BlenderbotSmallTokenizer"),XQe=o(" (BlenderbotSmall model)"),zQe=l(),eg=a("li"),qZ=a("strong"),QQe=o("byt5"),WQe=o(" \u2014 "),ak=a("a"),HQe=o("ByT5Tokenizer"),UQe=o(" (ByT5 model)"),JQe=l(),Sn=a("li"),NZ=a("strong"),YQe=o("camembert"),KQe=o(" \u2014 "),nk=a("a"),ZQe=o("CamembertTokenizer"),eWe=o(" or "),sk=a("a"),oWe=o("CamembertTokenizerFast"),rWe=o(" (CamemBERT model)"),tWe=l(),og=a("li"),jZ=a("strong"),aWe=o("canine"),nWe=o(" \u2014 "),lk=a("a"),sWe=o("CanineTokenizer"),lWe=o(" (Canine model)"),iWe=l(),Rn=a("li"),DZ=a("strong"),dWe=o("clip"),cWe=o(" \u2014 "),ik=a("a"),fWe=o("CLIPTokenizer"),mWe=o(" or "),dk=a("a"),gWe=o("CLIPTokenizerFast"),hWe=o(" (CLIP model)"),uWe=l(),Bn=a("li"),GZ=a("strong"),pWe=o("convbert"),_We=o(" \u2014 "),ck=a("a"),vWe=o("ConvBertTokenizer"),bWe=o(" or "),fk=a("a"),FWe=o("ConvBertTokenizerFast"),TWe=o(" (ConvBERT model)"),MWe=l(),Pn=a("li"),OZ=a("strong"),EWe=o("cpm"),CWe=o(" \u2014 "),mk=a("a"),wWe=o("CpmTokenizer"),AWe=o(" or "),VZ=a("code"),yWe=o("CpmTokenizerFast"),LWe=o(" (CPM model)"),xWe=l(),rg=a("li"),XZ=a("strong"),$We=o("ctrl"),kWe=o(" \u2014 "),gk=a("a"),SWe=o("CTRLTokenizer"),RWe=o(" (CTRL model)"),BWe=l(),In=a("li"),zZ=a("strong"),PWe=o("deberta"),IWe=o(" \u2014 "),hk=a("a"),qWe=o("DebertaTokenizer"),NWe=o(" or "),uk=a("a"),jWe=o("DebertaTokenizerFast"),DWe=o(" (DeBERTa model)"),GWe=l(),tg=a("li"),QZ=a("strong"),OWe=o("deberta-v2"),VWe=o(" \u2014 "),pk=a("a"),XWe=o("DebertaV2Tokenizer"),zWe=o(" (DeBERTa-v2 model)"),QWe=l(),qn=a("li"),WZ=a("strong"),WWe=o("distilbert"),HWe=o(" \u2014 "),_k=a("a"),UWe=o("DistilBertTokenizer"),JWe=o(" or "),vk=a("a"),YWe=o("DistilBertTokenizerFast"),KWe=o(" (DistilBERT model)"),ZWe=l(),Nn=a("li"),HZ=a("strong"),eHe=o("dpr"),oHe=o(" \u2014 "),bk=a("a"),rHe=o("DPRQuestionEncoderTokenizer"),tHe=o(" or "),Fk=a("a"),aHe=o("DPRQuestionEncoderTokenizerFast"),nHe=o(" (DPR model)"),sHe=l(),jn=a("li"),UZ=a("strong"),lHe=o("electra"),iHe=o(" \u2014 "),Tk=a("a"),dHe=o("ElectraTokenizer"),cHe=o(" or "),Mk=a("a"),fHe=o("ElectraTokenizerFast"),mHe=o(" (ELECTRA model)"),gHe=l(),ag=a("li"),JZ=a("strong"),hHe=o("flaubert"),uHe=o(" \u2014 "),Ek=a("a"),pHe=o("FlaubertTokenizer"),_He=o(" (FlauBERT model)"),vHe=l(),Dn=a("li"),YZ=a("strong"),bHe=o("fnet"),FHe=o(" \u2014 "),Ck=a("a"),THe=o("FNetTokenizer"),MHe=o(" or "),wk=a("a"),EHe=o("FNetTokenizerFast"),CHe=o(" (FNet model)"),wHe=l(),ng=a("li"),KZ=a("strong"),AHe=o("fsmt"),yHe=o(" \u2014 "),Ak=a("a"),LHe=o("FSMTTokenizer"),xHe=o(" (FairSeq Machine-Translation model)"),$He=l(),Gn=a("li"),ZZ=a("strong"),kHe=o("funnel"),SHe=o(" \u2014 "),yk=a("a"),RHe=o("FunnelTokenizer"),BHe=o(" or "),Lk=a("a"),PHe=o("FunnelTokenizerFast"),IHe=o(" (Funnel Transformer model)"),qHe=l(),On=a("li"),eee=a("strong"),NHe=o("gpt2"),jHe=o(" \u2014 "),xk=a("a"),DHe=o("GPT2Tokenizer"),GHe=o(" or "),$k=a("a"),OHe=o("GPT2TokenizerFast"),VHe=o(" (OpenAI GPT-2 model)"),XHe=l(),Vn=a("li"),oee=a("strong"),zHe=o("gpt_neo"),QHe=o(" \u2014 "),kk=a("a"),WHe=o("GPT2Tokenizer"),HHe=o(" or "),Sk=a("a"),UHe=o("GPT2TokenizerFast"),JHe=o(" (GPT Neo model)"),YHe=l(),Xn=a("li"),ree=a("strong"),KHe=o("herbert"),ZHe=o(" \u2014 "),Rk=a("a"),eUe=o("HerbertTokenizer"),oUe=o(" or "),Bk=a("a"),rUe=o("HerbertTokenizerFast"),tUe=o(" (HerBERT model)"),aUe=l(),sg=a("li"),tee=a("strong"),nUe=o("hubert"),sUe=o(" \u2014 "),Pk=a("a"),lUe=o("Wav2Vec2CTCTokenizer"),iUe=o(" (Hubert model)"),dUe=l(),zn=a("li"),aee=a("strong"),cUe=o("ibert"),fUe=o(" \u2014 "),Ik=a("a"),mUe=o("RobertaTokenizer"),gUe=o(" or "),qk=a("a"),hUe=o("RobertaTokenizerFast"),uUe=o(" (I-BERT model)"),pUe=l(),Qn=a("li"),nee=a("strong"),_Ue=o("layoutlm"),vUe=o(" \u2014 "),Nk=a("a"),bUe=o("LayoutLMTokenizer"),FUe=o(" or "),jk=a("a"),TUe=o("LayoutLMTokenizerFast"),MUe=o(" (LayoutLM model)"),EUe=l(),Wn=a("li"),see=a("strong"),CUe=o("layoutlmv2"),wUe=o(" \u2014 "),Dk=a("a"),AUe=o("LayoutLMv2Tokenizer"),yUe=o(" or "),Gk=a("a"),LUe=o("LayoutLMv2TokenizerFast"),xUe=o(" (LayoutLMv2 model)"),$Ue=l(),Hn=a("li"),lee=a("strong"),kUe=o("layoutxlm"),SUe=o(" \u2014 "),Ok=a("a"),RUe=o("LayoutXLMTokenizer"),BUe=o(" or "),Vk=a("a"),PUe=o("LayoutXLMTokenizerFast"),IUe=o(" (LayoutXLM model)"),qUe=l(),Un=a("li"),iee=a("strong"),NUe=o("led"),jUe=o(" \u2014 "),Xk=a("a"),DUe=o("LEDTokenizer"),GUe=o(" or "),zk=a("a"),OUe=o("LEDTokenizerFast"),VUe=o(" (LED model)"),XUe=l(),Jn=a("li"),dee=a("strong"),zUe=o("longformer"),QUe=o(" \u2014 "),Qk=a("a"),WUe=o("LongformerTokenizer"),HUe=o(" or "),Wk=a("a"),UUe=o("LongformerTokenizerFast"),JUe=o(" (Longformer model)"),YUe=l(),lg=a("li"),cee=a("strong"),KUe=o("luke"),ZUe=o(" \u2014 "),Hk=a("a"),eJe=o("LukeTokenizer"),oJe=o(" (LUKE model)"),rJe=l(),Yn=a("li"),fee=a("strong"),tJe=o("lxmert"),aJe=o(" \u2014 "),Uk=a("a"),nJe=o("LxmertTokenizer"),sJe=o(" or "),Jk=a("a"),lJe=o("LxmertTokenizerFast"),iJe=o(" (LXMERT model)"),dJe=l(),ig=a("li"),mee=a("strong"),cJe=o("m2m_100"),fJe=o(" \u2014 "),Yk=a("a"),mJe=o("M2M100Tokenizer"),gJe=o(" (M2M100 model)"),hJe=l(),dg=a("li"),gee=a("strong"),uJe=o("marian"),pJe=o(" \u2014 "),Kk=a("a"),_Je=o("MarianTokenizer"),vJe=o(" (Marian model)"),bJe=l(),Kn=a("li"),hee=a("strong"),FJe=o("mbart"),TJe=o(" \u2014 "),Zk=a("a"),MJe=o("MBartTokenizer"),EJe=o(" or "),eS=a("a"),CJe=o("MBartTokenizerFast"),wJe=o(" (mBART model)"),AJe=l(),Zn=a("li"),uee=a("strong"),yJe=o("mbart50"),LJe=o(" \u2014 "),oS=a("a"),xJe=o("MBart50Tokenizer"),$Je=o(" or "),rS=a("a"),kJe=o("MBart50TokenizerFast"),SJe=o(" (mBART-50 model)"),RJe=l(),cg=a("li"),pee=a("strong"),BJe=o("mluke"),PJe=o(" \u2014 "),tS=a("a"),IJe=o("MLukeTokenizer"),qJe=o(" (mLUKE model)"),NJe=l(),es=a("li"),_ee=a("strong"),jJe=o("mobilebert"),DJe=o(" \u2014 "),aS=a("a"),GJe=o("MobileBertTokenizer"),OJe=o(" or "),nS=a("a"),VJe=o("MobileBertTokenizerFast"),XJe=o(" (MobileBERT model)"),zJe=l(),os=a("li"),vee=a("strong"),QJe=o("mpnet"),WJe=o(" \u2014 "),sS=a("a"),HJe=o("MPNetTokenizer"),UJe=o(" or "),lS=a("a"),JJe=o("MPNetTokenizerFast"),YJe=o(" (MPNet model)"),KJe=l(),rs=a("li"),bee=a("strong"),ZJe=o("mt5"),eYe=o(" \u2014 "),iS=a("a"),oYe=o("MT5Tokenizer"),rYe=o(" or "),dS=a("a"),tYe=o("MT5TokenizerFast"),aYe=o(" (mT5 model)"),nYe=l(),ts=a("li"),Fee=a("strong"),sYe=o("openai-gpt"),lYe=o(" \u2014 "),cS=a("a"),iYe=o("OpenAIGPTTokenizer"),dYe=o(" or "),fS=a("a"),cYe=o("OpenAIGPTTokenizerFast"),fYe=o(" (OpenAI GPT model)"),mYe=l(),as=a("li"),Tee=a("strong"),gYe=o("pegasus"),hYe=o(" \u2014 "),mS=a("a"),uYe=o("PegasusTokenizer"),pYe=o(" or "),gS=a("a"),_Ye=o("PegasusTokenizerFast"),vYe=o(" (Pegasus model)"),bYe=l(),fg=a("li"),Mee=a("strong"),FYe=o("perceiver"),TYe=o(" \u2014 "),hS=a("a"),MYe=o("PerceiverTokenizer"),EYe=o(" (Perceiver model)"),CYe=l(),mg=a("li"),Eee=a("strong"),wYe=o("phobert"),AYe=o(" \u2014 "),uS=a("a"),yYe=o("PhobertTokenizer"),LYe=o(" (PhoBERT model)"),xYe=l(),gg=a("li"),Cee=a("strong"),$Ye=o("plbart"),kYe=o(" \u2014 "),pS=a("a"),SYe=o("PLBartTokenizer"),RYe=o(" (PLBart model)"),BYe=l(),hg=a("li"),wee=a("strong"),PYe=o("prophetnet"),IYe=o(" \u2014 "),_S=a("a"),qYe=o("ProphetNetTokenizer"),NYe=o(" (ProphetNet model)"),jYe=l(),ns=a("li"),Aee=a("strong"),DYe=o("qdqbert"),GYe=o(" \u2014 "),vS=a("a"),OYe=o("BertTokenizer"),VYe=o(" or "),bS=a("a"),XYe=o("BertTokenizerFast"),zYe=o(" (QDQBert model)"),QYe=l(),ug=a("li"),yee=a("strong"),WYe=o("rag"),HYe=o(" \u2014 "),FS=a("a"),UYe=o("RagTokenizer"),JYe=o(" (RAG model)"),YYe=l(),ss=a("li"),Lee=a("strong"),KYe=o("realm"),ZYe=o(" \u2014 "),TS=a("a"),eKe=o("RealmTokenizer"),oKe=o(" or "),MS=a("a"),rKe=o("RealmTokenizerFast"),tKe=o(" (Realm model)"),aKe=l(),ls=a("li"),xee=a("strong"),nKe=o("reformer"),sKe=o(" \u2014 "),ES=a("a"),lKe=o("ReformerTokenizer"),iKe=o(" or "),CS=a("a"),dKe=o("ReformerTokenizerFast"),cKe=o(" (Reformer model)"),fKe=l(),is=a("li"),$ee=a("strong"),mKe=o("rembert"),gKe=o(" \u2014 "),wS=a("a"),hKe=o("RemBertTokenizer"),uKe=o(" or "),AS=a("a"),pKe=o("RemBertTokenizerFast"),_Ke=o(" (RemBERT model)"),vKe=l(),ds=a("li"),kee=a("strong"),bKe=o("retribert"),FKe=o(" \u2014 "),yS=a("a"),TKe=o("RetriBertTokenizer"),MKe=o(" or "),LS=a("a"),EKe=o("RetriBertTokenizerFast"),CKe=o(" (RetriBERT model)"),wKe=l(),cs=a("li"),See=a("strong"),AKe=o("roberta"),yKe=o(" \u2014 "),xS=a("a"),LKe=o("RobertaTokenizer"),xKe=o(" or "),$S=a("a"),$Ke=o("RobertaTokenizerFast"),kKe=o(" (RoBERTa model)"),SKe=l(),fs=a("li"),Ree=a("strong"),RKe=o("roformer"),BKe=o(" \u2014 "),kS=a("a"),PKe=o("RoFormerTokenizer"),IKe=o(" or "),SS=a("a"),qKe=o("RoFormerTokenizerFast"),NKe=o(" (RoFormer model)"),jKe=l(),pg=a("li"),Bee=a("strong"),DKe=o("speech_to_text"),GKe=o(" \u2014 "),RS=a("a"),OKe=o("Speech2TextTokenizer"),VKe=o(" (Speech2Text model)"),XKe=l(),_g=a("li"),Pee=a("strong"),zKe=o("speech_to_text_2"),QKe=o(" \u2014 "),BS=a("a"),WKe=o("Speech2Text2Tokenizer"),HKe=o(" (Speech2Text2 model)"),UKe=l(),ms=a("li"),Iee=a("strong"),JKe=o("splinter"),YKe=o(" \u2014 "),PS=a("a"),KKe=o("SplinterTokenizer"),ZKe=o(" or "),IS=a("a"),eZe=o("SplinterTokenizerFast"),oZe=o(" (Splinter model)"),rZe=l(),gs=a("li"),qee=a("strong"),tZe=o("squeezebert"),aZe=o(" \u2014 "),qS=a("a"),nZe=o("SqueezeBertTokenizer"),sZe=o(" or "),NS=a("a"),lZe=o("SqueezeBertTokenizerFast"),iZe=o(" (SqueezeBERT model)"),dZe=l(),hs=a("li"),Nee=a("strong"),cZe=o("t5"),fZe=o(" \u2014 "),jS=a("a"),mZe=o("T5Tokenizer"),gZe=o(" or "),DS=a("a"),hZe=o("T5TokenizerFast"),uZe=o(" (T5 model)"),pZe=l(),vg=a("li"),jee=a("strong"),_Ze=o("tapas"),vZe=o(" \u2014 "),GS=a("a"),bZe=o("TapasTokenizer"),FZe=o(" (TAPAS model)"),TZe=l(),bg=a("li"),Dee=a("strong"),MZe=o("transfo-xl"),EZe=o(" \u2014 "),OS=a("a"),CZe=o("TransfoXLTokenizer"),wZe=o(" (Transformer-XL model)"),AZe=l(),Fg=a("li"),Gee=a("strong"),yZe=o("wav2vec2"),LZe=o(" \u2014 "),VS=a("a"),xZe=o("Wav2Vec2CTCTokenizer"),$Ze=o(" (Wav2Vec2 model)"),kZe=l(),Tg=a("li"),Oee=a("strong"),SZe=o("wav2vec2_phoneme"),RZe=o(" \u2014 "),XS=a("a"),BZe=o("Wav2Vec2PhonemeCTCTokenizer"),PZe=o(" (Wav2Vec2Phoneme model)"),IZe=l(),us=a("li"),Vee=a("strong"),qZe=o("xglm"),NZe=o(" \u2014 "),zS=a("a"),jZe=o("XGLMTokenizer"),DZe=o(" or "),QS=a("a"),GZe=o("XGLMTokenizerFast"),OZe=o(" (XGLM model)"),VZe=l(),Mg=a("li"),Xee=a("strong"),XZe=o("xlm"),zZe=o(" \u2014 "),WS=a("a"),QZe=o("XLMTokenizer"),WZe=o(" (XLM model)"),HZe=l(),Eg=a("li"),zee=a("strong"),UZe=o("xlm-prophetnet"),JZe=o(" \u2014 "),HS=a("a"),YZe=o("XLMProphetNetTokenizer"),KZe=o(" (XLMProphetNet model)"),ZZe=l(),ps=a("li"),Qee=a("strong"),eeo=o("xlm-roberta"),oeo=o(" \u2014 "),US=a("a"),reo=o("XLMRobertaTokenizer"),teo=o(" or "),JS=a("a"),aeo=o("XLMRobertaTokenizerFast"),neo=o(" (XLM-RoBERTa model)"),seo=l(),_s=a("li"),Wee=a("strong"),leo=o("xlnet"),ieo=o(" \u2014 "),YS=a("a"),deo=o("XLNetTokenizer"),ceo=o(" or "),KS=a("a"),feo=o("XLNetTokenizerFast"),meo=o(" (XLNet model)"),geo=l(),F(Cg.$$.fragment),heo=l(),wg=a("div"),F(Jw.$$.fragment),ueo=l(),Hee=a("p"),peo=o("Register a new tokenizer in this mapping."),Fke=l(),ti=a("h2"),Ag=a("a"),Uee=a("span"),F(Yw.$$.fragment),_eo=l(),Jee=a("span"),veo=o("AutoFeatureExtractor"),Tke=l(),Co=a("div"),F(Kw.$$.fragment),beo=l(),Zw=a("p"),Feo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZS=a("a"),Teo=o("AutoFeatureExtractor.from_pretrained()"),Meo=o(" class method."),Eeo=l(),eA=a("p"),Ceo=o("This class cannot be instantiated directly using "),Yee=a("code"),weo=o("__init__()"),Aeo=o(" (throws an error)."),yeo=l(),Ve=a("div"),F(oA.$$.fragment),Leo=l(),Kee=a("p"),xeo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$eo=l(),Ta=a("p"),keo=o("The feature extractor class to instantiate is selected based on the "),Zee=a("code"),Seo=o("model_type"),Reo=o(` property of the config object
(either passed as an argument or loaded from `),eoe=a("code"),Beo=o("pretrained_model_name_or_path"),Peo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ooe=a("code"),Ieo=o("pretrained_model_name_or_path"),qeo=o(":"),Neo=l(),me=a("ul"),yg=a("li"),roe=a("strong"),jeo=o("beit"),Deo=o(" \u2014 "),eR=a("a"),Geo=o("BeitFeatureExtractor"),Oeo=o(" (BEiT model)"),Veo=l(),Lg=a("li"),toe=a("strong"),Xeo=o("clip"),zeo=o(" \u2014 "),oR=a("a"),Qeo=o("CLIPFeatureExtractor"),Weo=o(" (CLIP model)"),Heo=l(),xg=a("li"),aoe=a("strong"),Ueo=o("convnext"),Jeo=o(" \u2014 "),rR=a("a"),Yeo=o("ConvNextFeatureExtractor"),Keo=o(" (ConvNext model)"),Zeo=l(),$g=a("li"),noe=a("strong"),eoo=o("deit"),ooo=o(" \u2014 "),tR=a("a"),roo=o("DeiTFeatureExtractor"),too=o(" (DeiT model)"),aoo=l(),kg=a("li"),soe=a("strong"),noo=o("detr"),soo=o(" \u2014 "),aR=a("a"),loo=o("DetrFeatureExtractor"),ioo=o(" (DETR model)"),doo=l(),Sg=a("li"),loe=a("strong"),coo=o("hubert"),foo=o(" \u2014 "),nR=a("a"),moo=o("Wav2Vec2FeatureExtractor"),goo=o(" (Hubert model)"),hoo=l(),Rg=a("li"),ioe=a("strong"),uoo=o("layoutlmv2"),poo=o(" \u2014 "),sR=a("a"),_oo=o("LayoutLMv2FeatureExtractor"),voo=o(" (LayoutLMv2 model)"),boo=l(),Bg=a("li"),doe=a("strong"),Foo=o("maskformer"),Too=o(" \u2014 "),lR=a("a"),Moo=o("MaskFormerFeatureExtractor"),Eoo=o(" (MaskFormer model)"),Coo=l(),Pg=a("li"),coe=a("strong"),woo=o("perceiver"),Aoo=o(" \u2014 "),iR=a("a"),yoo=o("PerceiverFeatureExtractor"),Loo=o(" (Perceiver model)"),xoo=l(),Ig=a("li"),foe=a("strong"),$oo=o("poolformer"),koo=o(" \u2014 "),dR=a("a"),Soo=o("PoolFormerFeatureExtractor"),Roo=o(" (PoolFormer model)"),Boo=l(),qg=a("li"),moe=a("strong"),Poo=o("resnet"),Ioo=o(" \u2014 "),cR=a("a"),qoo=o("ConvNextFeatureExtractor"),Noo=o(" (ResNet model)"),joo=l(),Ng=a("li"),goe=a("strong"),Doo=o("segformer"),Goo=o(" \u2014 "),fR=a("a"),Ooo=o("SegformerFeatureExtractor"),Voo=o(" (SegFormer model)"),Xoo=l(),jg=a("li"),hoe=a("strong"),zoo=o("speech_to_text"),Qoo=o(" \u2014 "),mR=a("a"),Woo=o("Speech2TextFeatureExtractor"),Hoo=o(" (Speech2Text model)"),Uoo=l(),Dg=a("li"),uoe=a("strong"),Joo=o("swin"),Yoo=o(" \u2014 "),gR=a("a"),Koo=o("ViTFeatureExtractor"),Zoo=o(" (Swin model)"),ero=l(),Gg=a("li"),poe=a("strong"),oro=o("van"),rro=o(" \u2014 "),hR=a("a"),tro=o("ConvNextFeatureExtractor"),aro=o(" (VAN model)"),nro=l(),Og=a("li"),_oe=a("strong"),sro=o("vit"),lro=o(" \u2014 "),uR=a("a"),iro=o("ViTFeatureExtractor"),dro=o(" (ViT model)"),cro=l(),Vg=a("li"),voe=a("strong"),fro=o("vit_mae"),mro=o(" \u2014 "),pR=a("a"),gro=o("ViTFeatureExtractor"),hro=o(" (ViTMAE model)"),uro=l(),Xg=a("li"),boe=a("strong"),pro=o("wav2vec2"),_ro=o(" \u2014 "),_R=a("a"),vro=o("Wav2Vec2FeatureExtractor"),bro=o(" (Wav2Vec2 model)"),Fro=l(),F(zg.$$.fragment),Tro=l(),F(Qg.$$.fragment),Mro=l(),Wg=a("div"),F(rA.$$.fragment),Ero=l(),Foe=a("p"),Cro=o("Register a new feature extractor for this class."),Mke=l(),ai=a("h2"),Hg=a("a"),Toe=a("span"),F(tA.$$.fragment),wro=l(),Moe=a("span"),Aro=o("AutoProcessor"),Eke=l(),wo=a("div"),F(aA.$$.fragment),yro=l(),nA=a("p"),Lro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vR=a("a"),xro=o("AutoProcessor.from_pretrained()"),$ro=o(" class method."),kro=l(),sA=a("p"),Sro=o("This class cannot be instantiated directly using "),Eoe=a("code"),Rro=o("__init__()"),Bro=o(" (throws an error)."),Pro=l(),Xe=a("div"),F(lA.$$.fragment),Iro=l(),Coe=a("p"),qro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Nro=l(),ni=a("p"),jro=o("The processor class to instantiate is selected based on the "),woe=a("code"),Dro=o("model_type"),Gro=o(` property of the config object (either
passed as an argument or loaded from `),Aoe=a("code"),Oro=o("pretrained_model_name_or_path"),Vro=o(" if possible):"),Xro=l(),Pe=a("ul"),Ug=a("li"),yoe=a("strong"),zro=o("clip"),Qro=o(" \u2014 "),bR=a("a"),Wro=o("CLIPProcessor"),Hro=o(" (CLIP model)"),Uro=l(),Jg=a("li"),Loe=a("strong"),Jro=o("layoutlmv2"),Yro=o(" \u2014 "),FR=a("a"),Kro=o("LayoutLMv2Processor"),Zro=o(" (LayoutLMv2 model)"),eto=l(),Yg=a("li"),xoe=a("strong"),oto=o("layoutxlm"),rto=o(" \u2014 "),TR=a("a"),tto=o("LayoutXLMProcessor"),ato=o(" (LayoutXLM model)"),nto=l(),Kg=a("li"),$oe=a("strong"),sto=o("speech_to_text"),lto=o(" \u2014 "),MR=a("a"),ito=o("Speech2TextProcessor"),dto=o(" (Speech2Text model)"),cto=l(),Zg=a("li"),koe=a("strong"),fto=o("speech_to_text_2"),mto=o(" \u2014 "),ER=a("a"),gto=o("Speech2Text2Processor"),hto=o(" (Speech2Text2 model)"),uto=l(),eh=a("li"),Soe=a("strong"),pto=o("trocr"),_to=o(" \u2014 "),CR=a("a"),vto=o("TrOCRProcessor"),bto=o(" (TrOCR model)"),Fto=l(),oh=a("li"),Roe=a("strong"),Tto=o("vision-text-dual-encoder"),Mto=o(" \u2014 "),wR=a("a"),Eto=o("VisionTextDualEncoderProcessor"),Cto=o(" (VisionTextDualEncoder model)"),wto=l(),rh=a("li"),Boe=a("strong"),Ato=o("wav2vec2"),yto=o(" \u2014 "),AR=a("a"),Lto=o("Wav2Vec2Processor"),xto=o(" (Wav2Vec2 model)"),$to=l(),F(th.$$.fragment),kto=l(),F(ah.$$.fragment),Sto=l(),nh=a("div"),F(iA.$$.fragment),Rto=l(),Poe=a("p"),Bto=o("Register a new processor for this class."),Cke=l(),si=a("h2"),sh=a("a"),Ioe=a("span"),F(dA.$$.fragment),Pto=l(),qoe=a("span"),Ito=o("AutoModel"),wke=l(),Ao=a("div"),F(cA.$$.fragment),qto=l(),li=a("p"),Nto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yR=a("a"),jto=o("from_pretrained()"),Dto=o(" class method or the "),LR=a("a"),Gto=o("from_config()"),Oto=o(` class
method.`),Vto=l(),fA=a("p"),Xto=o("This class cannot be instantiated directly using "),Noe=a("code"),zto=o("__init__()"),Qto=o(" (throws an error)."),Wto=l(),Kr=a("div"),F(mA.$$.fragment),Hto=l(),joe=a("p"),Uto=o("Instantiates one of the base model classes of the library from a configuration."),Jto=l(),ii=a("p"),Yto=o(`Note:
Loading a model from its configuration file does `),Doe=a("strong"),Kto=o("not"),Zto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xR=a("a"),eao=o("from_pretrained()"),oao=o(" to load the model weights."),rao=l(),F(lh.$$.fragment),tao=l(),ze=a("div"),F(gA.$$.fragment),aao=l(),Goe=a("p"),nao=o("Instantiate one of the base model classes of the library from a pretrained model."),sao=l(),Ma=a("p"),lao=o("The model class to instantiate is selected based on the "),Ooe=a("code"),iao=o("model_type"),dao=o(` property of the config object (either
passed as an argument or loaded from `),Voe=a("code"),cao=o("pretrained_model_name_or_path"),fao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=a("code"),mao=o("pretrained_model_name_or_path"),gao=o(":"),hao=l(),x=a("ul"),ih=a("li"),zoe=a("strong"),uao=o("albert"),pao=o(" \u2014 "),$R=a("a"),_ao=o("AlbertModel"),vao=o(" (ALBERT model)"),bao=l(),dh=a("li"),Qoe=a("strong"),Fao=o("bart"),Tao=o(" \u2014 "),kR=a("a"),Mao=o("BartModel"),Eao=o(" (BART model)"),Cao=l(),ch=a("li"),Woe=a("strong"),wao=o("beit"),Aao=o(" \u2014 "),SR=a("a"),yao=o("BeitModel"),Lao=o(" (BEiT model)"),xao=l(),fh=a("li"),Hoe=a("strong"),$ao=o("bert"),kao=o(" \u2014 "),RR=a("a"),Sao=o("BertModel"),Rao=o(" (BERT model)"),Bao=l(),mh=a("li"),Uoe=a("strong"),Pao=o("bert-generation"),Iao=o(" \u2014 "),BR=a("a"),qao=o("BertGenerationEncoder"),Nao=o(" (Bert Generation model)"),jao=l(),gh=a("li"),Joe=a("strong"),Dao=o("big_bird"),Gao=o(" \u2014 "),PR=a("a"),Oao=o("BigBirdModel"),Vao=o(" (BigBird model)"),Xao=l(),hh=a("li"),Yoe=a("strong"),zao=o("bigbird_pegasus"),Qao=o(" \u2014 "),IR=a("a"),Wao=o("BigBirdPegasusModel"),Hao=o(" (BigBirdPegasus model)"),Uao=l(),uh=a("li"),Koe=a("strong"),Jao=o("blenderbot"),Yao=o(" \u2014 "),qR=a("a"),Kao=o("BlenderbotModel"),Zao=o(" (Blenderbot model)"),eno=l(),ph=a("li"),Zoe=a("strong"),ono=o("blenderbot-small"),rno=o(" \u2014 "),NR=a("a"),tno=o("BlenderbotSmallModel"),ano=o(" (BlenderbotSmall model)"),nno=l(),_h=a("li"),ere=a("strong"),sno=o("camembert"),lno=o(" \u2014 "),jR=a("a"),ino=o("CamembertModel"),dno=o(" (CamemBERT model)"),cno=l(),vh=a("li"),ore=a("strong"),fno=o("canine"),mno=o(" \u2014 "),DR=a("a"),gno=o("CanineModel"),hno=o(" (Canine model)"),uno=l(),bh=a("li"),rre=a("strong"),pno=o("clip"),_no=o(" \u2014 "),GR=a("a"),vno=o("CLIPModel"),bno=o(" (CLIP model)"),Fno=l(),Fh=a("li"),tre=a("strong"),Tno=o("convbert"),Mno=o(" \u2014 "),OR=a("a"),Eno=o("ConvBertModel"),Cno=o(" (ConvBERT model)"),wno=l(),Th=a("li"),are=a("strong"),Ano=o("convnext"),yno=o(" \u2014 "),VR=a("a"),Lno=o("ConvNextModel"),xno=o(" (ConvNext model)"),$no=l(),Mh=a("li"),nre=a("strong"),kno=o("ctrl"),Sno=o(" \u2014 "),XR=a("a"),Rno=o("CTRLModel"),Bno=o(" (CTRL model)"),Pno=l(),Eh=a("li"),sre=a("strong"),Ino=o("data2vec-audio"),qno=o(" \u2014 "),zR=a("a"),Nno=o("Data2VecAudioModel"),jno=o(" (Data2VecAudio model)"),Dno=l(),Ch=a("li"),lre=a("strong"),Gno=o("data2vec-text"),Ono=o(" \u2014 "),QR=a("a"),Vno=o("Data2VecTextModel"),Xno=o(" (Data2VecText model)"),zno=l(),wh=a("li"),ire=a("strong"),Qno=o("deberta"),Wno=o(" \u2014 "),WR=a("a"),Hno=o("DebertaModel"),Uno=o(" (DeBERTa model)"),Jno=l(),Ah=a("li"),dre=a("strong"),Yno=o("deberta-v2"),Kno=o(" \u2014 "),HR=a("a"),Zno=o("DebertaV2Model"),eso=o(" (DeBERTa-v2 model)"),oso=l(),yh=a("li"),cre=a("strong"),rso=o("decision_transformer"),tso=o(" \u2014 "),UR=a("a"),aso=o("DecisionTransformerModel"),nso=o(" (Decision Transformer model)"),sso=l(),Lh=a("li"),fre=a("strong"),lso=o("deit"),iso=o(" \u2014 "),JR=a("a"),dso=o("DeiTModel"),cso=o(" (DeiT model)"),fso=l(),xh=a("li"),mre=a("strong"),mso=o("detr"),gso=o(" \u2014 "),YR=a("a"),hso=o("DetrModel"),uso=o(" (DETR model)"),pso=l(),$h=a("li"),gre=a("strong"),_so=o("distilbert"),vso=o(" \u2014 "),KR=a("a"),bso=o("DistilBertModel"),Fso=o(" (DistilBERT model)"),Tso=l(),kh=a("li"),hre=a("strong"),Mso=o("dpr"),Eso=o(" \u2014 "),ZR=a("a"),Cso=o("DPRQuestionEncoder"),wso=o(" (DPR model)"),Aso=l(),Sh=a("li"),ure=a("strong"),yso=o("dpt"),Lso=o(" \u2014 "),eB=a("a"),xso=o("DPTModel"),$so=o(" (DPT model)"),kso=l(),Rh=a("li"),pre=a("strong"),Sso=o("electra"),Rso=o(" \u2014 "),oB=a("a"),Bso=o("ElectraModel"),Pso=o(" (ELECTRA model)"),Iso=l(),Bh=a("li"),_re=a("strong"),qso=o("flaubert"),Nso=o(" \u2014 "),rB=a("a"),jso=o("FlaubertModel"),Dso=o(" (FlauBERT model)"),Gso=l(),Ph=a("li"),vre=a("strong"),Oso=o("fnet"),Vso=o(" \u2014 "),tB=a("a"),Xso=o("FNetModel"),zso=o(" (FNet model)"),Qso=l(),Ih=a("li"),bre=a("strong"),Wso=o("fsmt"),Hso=o(" \u2014 "),aB=a("a"),Uso=o("FSMTModel"),Jso=o(" (FairSeq Machine-Translation model)"),Yso=l(),vs=a("li"),Fre=a("strong"),Kso=o("funnel"),Zso=o(" \u2014 "),nB=a("a"),elo=o("FunnelModel"),olo=o(" or "),sB=a("a"),rlo=o("FunnelBaseModel"),tlo=o(" (Funnel Transformer model)"),alo=l(),qh=a("li"),Tre=a("strong"),nlo=o("glpn"),slo=o(" \u2014 "),lB=a("a"),llo=o("GLPNModel"),ilo=o(" (GLPN model)"),dlo=l(),Nh=a("li"),Mre=a("strong"),clo=o("gpt2"),flo=o(" \u2014 "),iB=a("a"),mlo=o("GPT2Model"),glo=o(" (OpenAI GPT-2 model)"),hlo=l(),jh=a("li"),Ere=a("strong"),ulo=o("gpt_neo"),plo=o(" \u2014 "),dB=a("a"),_lo=o("GPTNeoModel"),vlo=o(" (GPT Neo model)"),blo=l(),Dh=a("li"),Cre=a("strong"),Flo=o("gptj"),Tlo=o(" \u2014 "),cB=a("a"),Mlo=o("GPTJModel"),Elo=o(" (GPT-J model)"),Clo=l(),Gh=a("li"),wre=a("strong"),wlo=o("hubert"),Alo=o(" \u2014 "),fB=a("a"),ylo=o("HubertModel"),Llo=o(" (Hubert model)"),xlo=l(),Oh=a("li"),Are=a("strong"),$lo=o("ibert"),klo=o(" \u2014 "),mB=a("a"),Slo=o("IBertModel"),Rlo=o(" (I-BERT model)"),Blo=l(),Vh=a("li"),yre=a("strong"),Plo=o("imagegpt"),Ilo=o(" \u2014 "),gB=a("a"),qlo=o("ImageGPTModel"),Nlo=o(" (ImageGPT model)"),jlo=l(),Xh=a("li"),Lre=a("strong"),Dlo=o("layoutlm"),Glo=o(" \u2014 "),hB=a("a"),Olo=o("LayoutLMModel"),Vlo=o(" (LayoutLM model)"),Xlo=l(),zh=a("li"),xre=a("strong"),zlo=o("layoutlmv2"),Qlo=o(" \u2014 "),uB=a("a"),Wlo=o("LayoutLMv2Model"),Hlo=o(" (LayoutLMv2 model)"),Ulo=l(),Qh=a("li"),$re=a("strong"),Jlo=o("led"),Ylo=o(" \u2014 "),pB=a("a"),Klo=o("LEDModel"),Zlo=o(" (LED model)"),eio=l(),Wh=a("li"),kre=a("strong"),oio=o("longformer"),rio=o(" \u2014 "),_B=a("a"),tio=o("LongformerModel"),aio=o(" (Longformer model)"),nio=l(),Hh=a("li"),Sre=a("strong"),sio=o("luke"),lio=o(" \u2014 "),vB=a("a"),iio=o("LukeModel"),dio=o(" (LUKE model)"),cio=l(),Uh=a("li"),Rre=a("strong"),fio=o("lxmert"),mio=o(" \u2014 "),bB=a("a"),gio=o("LxmertModel"),hio=o(" (LXMERT model)"),uio=l(),Jh=a("li"),Bre=a("strong"),pio=o("m2m_100"),_io=o(" \u2014 "),FB=a("a"),vio=o("M2M100Model"),bio=o(" (M2M100 model)"),Fio=l(),Yh=a("li"),Pre=a("strong"),Tio=o("marian"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("MarianModel"),Cio=o(" (Marian model)"),wio=l(),Kh=a("li"),Ire=a("strong"),Aio=o("maskformer"),yio=o(" \u2014 "),MB=a("a"),Lio=o("MaskFormerModel"),xio=o(" (MaskFormer model)"),$io=l(),Zh=a("li"),qre=a("strong"),kio=o("mbart"),Sio=o(" \u2014 "),EB=a("a"),Rio=o("MBartModel"),Bio=o(" (mBART model)"),Pio=l(),eu=a("li"),Nre=a("strong"),Iio=o("megatron-bert"),qio=o(" \u2014 "),CB=a("a"),Nio=o("MegatronBertModel"),jio=o(" (MegatronBert model)"),Dio=l(),ou=a("li"),jre=a("strong"),Gio=o("mobilebert"),Oio=o(" \u2014 "),wB=a("a"),Vio=o("MobileBertModel"),Xio=o(" (MobileBERT model)"),zio=l(),ru=a("li"),Dre=a("strong"),Qio=o("mpnet"),Wio=o(" \u2014 "),AB=a("a"),Hio=o("MPNetModel"),Uio=o(" (MPNet model)"),Jio=l(),tu=a("li"),Gre=a("strong"),Yio=o("mt5"),Kio=o(" \u2014 "),yB=a("a"),Zio=o("MT5Model"),edo=o(" (mT5 model)"),odo=l(),au=a("li"),Ore=a("strong"),rdo=o("nystromformer"),tdo=o(" \u2014 "),LB=a("a"),ado=o("NystromformerModel"),ndo=o(" (Nystromformer model)"),sdo=l(),nu=a("li"),Vre=a("strong"),ldo=o("openai-gpt"),ido=o(" \u2014 "),xB=a("a"),ddo=o("OpenAIGPTModel"),cdo=o(" (OpenAI GPT model)"),fdo=l(),su=a("li"),Xre=a("strong"),mdo=o("pegasus"),gdo=o(" \u2014 "),$B=a("a"),hdo=o("PegasusModel"),udo=o(" (Pegasus model)"),pdo=l(),lu=a("li"),zre=a("strong"),_do=o("perceiver"),vdo=o(" \u2014 "),kB=a("a"),bdo=o("PerceiverModel"),Fdo=o(" (Perceiver model)"),Tdo=l(),iu=a("li"),Qre=a("strong"),Mdo=o("plbart"),Edo=o(" \u2014 "),SB=a("a"),Cdo=o("PLBartModel"),wdo=o(" (PLBart model)"),Ado=l(),du=a("li"),Wre=a("strong"),ydo=o("poolformer"),Ldo=o(" \u2014 "),RB=a("a"),xdo=o("PoolFormerModel"),$do=o(" (PoolFormer model)"),kdo=l(),cu=a("li"),Hre=a("strong"),Sdo=o("prophetnet"),Rdo=o(" \u2014 "),BB=a("a"),Bdo=o("ProphetNetModel"),Pdo=o(" (ProphetNet model)"),Ido=l(),fu=a("li"),Ure=a("strong"),qdo=o("qdqbert"),Ndo=o(" \u2014 "),PB=a("a"),jdo=o("QDQBertModel"),Ddo=o(" (QDQBert model)"),Gdo=l(),mu=a("li"),Jre=a("strong"),Odo=o("reformer"),Vdo=o(" \u2014 "),IB=a("a"),Xdo=o("ReformerModel"),zdo=o(" (Reformer model)"),Qdo=l(),gu=a("li"),Yre=a("strong"),Wdo=o("rembert"),Hdo=o(" \u2014 "),qB=a("a"),Udo=o("RemBertModel"),Jdo=o(" (RemBERT model)"),Ydo=l(),hu=a("li"),Kre=a("strong"),Kdo=o("resnet"),Zdo=o(" \u2014 "),NB=a("a"),eco=o("ResNetModel"),oco=o(" (ResNet model)"),rco=l(),uu=a("li"),Zre=a("strong"),tco=o("retribert"),aco=o(" \u2014 "),jB=a("a"),nco=o("RetriBertModel"),sco=o(" (RetriBERT model)"),lco=l(),pu=a("li"),ete=a("strong"),ico=o("roberta"),dco=o(" \u2014 "),DB=a("a"),cco=o("RobertaModel"),fco=o(" (RoBERTa model)"),mco=l(),_u=a("li"),ote=a("strong"),gco=o("roformer"),hco=o(" \u2014 "),GB=a("a"),uco=o("RoFormerModel"),pco=o(" (RoFormer model)"),_co=l(),vu=a("li"),rte=a("strong"),vco=o("segformer"),bco=o(" \u2014 "),OB=a("a"),Fco=o("SegformerModel"),Tco=o(" (SegFormer model)"),Mco=l(),bu=a("li"),tte=a("strong"),Eco=o("sew"),Cco=o(" \u2014 "),VB=a("a"),wco=o("SEWModel"),Aco=o(" (SEW model)"),yco=l(),Fu=a("li"),ate=a("strong"),Lco=o("sew-d"),xco=o(" \u2014 "),XB=a("a"),$co=o("SEWDModel"),kco=o(" (SEW-D model)"),Sco=l(),Tu=a("li"),nte=a("strong"),Rco=o("speech_to_text"),Bco=o(" \u2014 "),zB=a("a"),Pco=o("Speech2TextModel"),Ico=o(" (Speech2Text model)"),qco=l(),Mu=a("li"),ste=a("strong"),Nco=o("splinter"),jco=o(" \u2014 "),QB=a("a"),Dco=o("SplinterModel"),Gco=o(" (Splinter model)"),Oco=l(),Eu=a("li"),lte=a("strong"),Vco=o("squeezebert"),Xco=o(" \u2014 "),WB=a("a"),zco=o("SqueezeBertModel"),Qco=o(" (SqueezeBERT model)"),Wco=l(),Cu=a("li"),ite=a("strong"),Hco=o("swin"),Uco=o(" \u2014 "),HB=a("a"),Jco=o("SwinModel"),Yco=o(" (Swin model)"),Kco=l(),wu=a("li"),dte=a("strong"),Zco=o("t5"),efo=o(" \u2014 "),UB=a("a"),ofo=o("T5Model"),rfo=o(" (T5 model)"),tfo=l(),Au=a("li"),cte=a("strong"),afo=o("tapas"),nfo=o(" \u2014 "),JB=a("a"),sfo=o("TapasModel"),lfo=o(" (TAPAS model)"),ifo=l(),yu=a("li"),fte=a("strong"),dfo=o("transfo-xl"),cfo=o(" \u2014 "),YB=a("a"),ffo=o("TransfoXLModel"),mfo=o(" (Transformer-XL model)"),gfo=l(),Lu=a("li"),mte=a("strong"),hfo=o("unispeech"),ufo=o(" \u2014 "),KB=a("a"),pfo=o("UniSpeechModel"),_fo=o(" (UniSpeech model)"),vfo=l(),xu=a("li"),gte=a("strong"),bfo=o("unispeech-sat"),Ffo=o(" \u2014 "),ZB=a("a"),Tfo=o("UniSpeechSatModel"),Mfo=o(" (UniSpeechSat model)"),Efo=l(),$u=a("li"),hte=a("strong"),Cfo=o("van"),wfo=o(" \u2014 "),eP=a("a"),Afo=o("VanModel"),yfo=o(" (VAN model)"),Lfo=l(),ku=a("li"),ute=a("strong"),xfo=o("vilt"),$fo=o(" \u2014 "),oP=a("a"),kfo=o("ViltModel"),Sfo=o(" (ViLT model)"),Rfo=l(),Su=a("li"),pte=a("strong"),Bfo=o("vision-text-dual-encoder"),Pfo=o(" \u2014 "),rP=a("a"),Ifo=o("VisionTextDualEncoderModel"),qfo=o(" (VisionTextDualEncoder model)"),Nfo=l(),Ru=a("li"),_te=a("strong"),jfo=o("visual_bert"),Dfo=o(" \u2014 "),tP=a("a"),Gfo=o("VisualBertModel"),Ofo=o(" (VisualBert model)"),Vfo=l(),Bu=a("li"),vte=a("strong"),Xfo=o("vit"),zfo=o(" \u2014 "),aP=a("a"),Qfo=o("ViTModel"),Wfo=o(" (ViT model)"),Hfo=l(),Pu=a("li"),bte=a("strong"),Ufo=o("vit_mae"),Jfo=o(" \u2014 "),nP=a("a"),Yfo=o("ViTMAEModel"),Kfo=o(" (ViTMAE model)"),Zfo=l(),Iu=a("li"),Fte=a("strong"),emo=o("wav2vec2"),omo=o(" \u2014 "),sP=a("a"),rmo=o("Wav2Vec2Model"),tmo=o(" (Wav2Vec2 model)"),amo=l(),qu=a("li"),Tte=a("strong"),nmo=o("wavlm"),smo=o(" \u2014 "),lP=a("a"),lmo=o("WavLMModel"),imo=o(" (WavLM model)"),dmo=l(),Nu=a("li"),Mte=a("strong"),cmo=o("xglm"),fmo=o(" \u2014 "),iP=a("a"),mmo=o("XGLMModel"),gmo=o(" (XGLM model)"),hmo=l(),ju=a("li"),Ete=a("strong"),umo=o("xlm"),pmo=o(" \u2014 "),dP=a("a"),_mo=o("XLMModel"),vmo=o(" (XLM model)"),bmo=l(),Du=a("li"),Cte=a("strong"),Fmo=o("xlm-prophetnet"),Tmo=o(" \u2014 "),cP=a("a"),Mmo=o("XLMProphetNetModel"),Emo=o(" (XLMProphetNet model)"),Cmo=l(),Gu=a("li"),wte=a("strong"),wmo=o("xlm-roberta"),Amo=o(" \u2014 "),fP=a("a"),ymo=o("XLMRobertaModel"),Lmo=o(" (XLM-RoBERTa model)"),xmo=l(),Ou=a("li"),Ate=a("strong"),$mo=o("xlm-roberta-xl"),kmo=o(" \u2014 "),mP=a("a"),Smo=o("XLMRobertaXLModel"),Rmo=o(" (XLM-RoBERTa-XL model)"),Bmo=l(),Vu=a("li"),yte=a("strong"),Pmo=o("xlnet"),Imo=o(" \u2014 "),gP=a("a"),qmo=o("XLNetModel"),Nmo=o(" (XLNet model)"),jmo=l(),Xu=a("li"),Lte=a("strong"),Dmo=o("yoso"),Gmo=o(" \u2014 "),hP=a("a"),Omo=o("YosoModel"),Vmo=o(" (YOSO model)"),Xmo=l(),zu=a("p"),zmo=o("The model is set in evaluation mode by default using "),xte=a("code"),Qmo=o("model.eval()"),Wmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=a("code"),Hmo=o("model.train()"),Umo=l(),F(Qu.$$.fragment),Ake=l(),di=a("h2"),Wu=a("a"),kte=a("span"),F(hA.$$.fragment),Jmo=l(),Ste=a("span"),Ymo=o("AutoModelForPreTraining"),yke=l(),yo=a("div"),F(uA.$$.fragment),Kmo=l(),ci=a("p"),Zmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uP=a("a"),ego=o("from_pretrained()"),ogo=o(" class method or the "),pP=a("a"),rgo=o("from_config()"),tgo=o(` class
method.`),ago=l(),pA=a("p"),ngo=o("This class cannot be instantiated directly using "),Rte=a("code"),sgo=o("__init__()"),lgo=o(" (throws an error)."),igo=l(),Zr=a("div"),F(_A.$$.fragment),dgo=l(),Bte=a("p"),cgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fgo=l(),fi=a("p"),mgo=o(`Note:
Loading a model from its configuration file does `),Pte=a("strong"),ggo=o("not"),hgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_P=a("a"),ugo=o("from_pretrained()"),pgo=o(" to load the model weights."),_go=l(),F(Hu.$$.fragment),vgo=l(),Qe=a("div"),F(vA.$$.fragment),bgo=l(),Ite=a("p"),Fgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tgo=l(),Ea=a("p"),Mgo=o("The model class to instantiate is selected based on the "),qte=a("code"),Ego=o("model_type"),Cgo=o(` property of the config object (either
passed as an argument or loaded from `),Nte=a("code"),wgo=o("pretrained_model_name_or_path"),Ago=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=a("code"),ygo=o("pretrained_model_name_or_path"),Lgo=o(":"),xgo=l(),G=a("ul"),Uu=a("li"),Dte=a("strong"),$go=o("albert"),kgo=o(" \u2014 "),vP=a("a"),Sgo=o("AlbertForPreTraining"),Rgo=o(" (ALBERT model)"),Bgo=l(),Ju=a("li"),Gte=a("strong"),Pgo=o("bart"),Igo=o(" \u2014 "),bP=a("a"),qgo=o("BartForConditionalGeneration"),Ngo=o(" (BART model)"),jgo=l(),Yu=a("li"),Ote=a("strong"),Dgo=o("bert"),Ggo=o(" \u2014 "),FP=a("a"),Ogo=o("BertForPreTraining"),Vgo=o(" (BERT model)"),Xgo=l(),Ku=a("li"),Vte=a("strong"),zgo=o("big_bird"),Qgo=o(" \u2014 "),TP=a("a"),Wgo=o("BigBirdForPreTraining"),Hgo=o(" (BigBird model)"),Ugo=l(),Zu=a("li"),Xte=a("strong"),Jgo=o("camembert"),Ygo=o(" \u2014 "),MP=a("a"),Kgo=o("CamembertForMaskedLM"),Zgo=o(" (CamemBERT model)"),eho=l(),ep=a("li"),zte=a("strong"),oho=o("ctrl"),rho=o(" \u2014 "),EP=a("a"),tho=o("CTRLLMHeadModel"),aho=o(" (CTRL model)"),nho=l(),op=a("li"),Qte=a("strong"),sho=o("data2vec-text"),lho=o(" \u2014 "),CP=a("a"),iho=o("Data2VecTextForMaskedLM"),dho=o(" (Data2VecText model)"),cho=l(),rp=a("li"),Wte=a("strong"),fho=o("deberta"),mho=o(" \u2014 "),wP=a("a"),gho=o("DebertaForMaskedLM"),hho=o(" (DeBERTa model)"),uho=l(),tp=a("li"),Hte=a("strong"),pho=o("deberta-v2"),_ho=o(" \u2014 "),AP=a("a"),vho=o("DebertaV2ForMaskedLM"),bho=o(" (DeBERTa-v2 model)"),Fho=l(),ap=a("li"),Ute=a("strong"),Tho=o("distilbert"),Mho=o(" \u2014 "),yP=a("a"),Eho=o("DistilBertForMaskedLM"),Cho=o(" (DistilBERT model)"),who=l(),np=a("li"),Jte=a("strong"),Aho=o("electra"),yho=o(" \u2014 "),LP=a("a"),Lho=o("ElectraForPreTraining"),xho=o(" (ELECTRA model)"),$ho=l(),sp=a("li"),Yte=a("strong"),kho=o("flaubert"),Sho=o(" \u2014 "),xP=a("a"),Rho=o("FlaubertWithLMHeadModel"),Bho=o(" (FlauBERT model)"),Pho=l(),lp=a("li"),Kte=a("strong"),Iho=o("fnet"),qho=o(" \u2014 "),$P=a("a"),Nho=o("FNetForPreTraining"),jho=o(" (FNet model)"),Dho=l(),ip=a("li"),Zte=a("strong"),Gho=o("fsmt"),Oho=o(" \u2014 "),kP=a("a"),Vho=o("FSMTForConditionalGeneration"),Xho=o(" (FairSeq Machine-Translation model)"),zho=l(),dp=a("li"),eae=a("strong"),Qho=o("funnel"),Who=o(" \u2014 "),SP=a("a"),Hho=o("FunnelForPreTraining"),Uho=o(" (Funnel Transformer model)"),Jho=l(),cp=a("li"),oae=a("strong"),Yho=o("gpt2"),Kho=o(" \u2014 "),RP=a("a"),Zho=o("GPT2LMHeadModel"),euo=o(" (OpenAI GPT-2 model)"),ouo=l(),fp=a("li"),rae=a("strong"),ruo=o("ibert"),tuo=o(" \u2014 "),BP=a("a"),auo=o("IBertForMaskedLM"),nuo=o(" (I-BERT model)"),suo=l(),mp=a("li"),tae=a("strong"),luo=o("layoutlm"),iuo=o(" \u2014 "),PP=a("a"),duo=o("LayoutLMForMaskedLM"),cuo=o(" (LayoutLM model)"),fuo=l(),gp=a("li"),aae=a("strong"),muo=o("longformer"),guo=o(" \u2014 "),IP=a("a"),huo=o("LongformerForMaskedLM"),uuo=o(" (Longformer model)"),puo=l(),hp=a("li"),nae=a("strong"),_uo=o("lxmert"),vuo=o(" \u2014 "),qP=a("a"),buo=o("LxmertForPreTraining"),Fuo=o(" (LXMERT model)"),Tuo=l(),up=a("li"),sae=a("strong"),Muo=o("megatron-bert"),Euo=o(" \u2014 "),NP=a("a"),Cuo=o("MegatronBertForPreTraining"),wuo=o(" (MegatronBert model)"),Auo=l(),pp=a("li"),lae=a("strong"),yuo=o("mobilebert"),Luo=o(" \u2014 "),jP=a("a"),xuo=o("MobileBertForPreTraining"),$uo=o(" (MobileBERT model)"),kuo=l(),_p=a("li"),iae=a("strong"),Suo=o("mpnet"),Ruo=o(" \u2014 "),DP=a("a"),Buo=o("MPNetForMaskedLM"),Puo=o(" (MPNet model)"),Iuo=l(),vp=a("li"),dae=a("strong"),quo=o("openai-gpt"),Nuo=o(" \u2014 "),GP=a("a"),juo=o("OpenAIGPTLMHeadModel"),Duo=o(" (OpenAI GPT model)"),Guo=l(),bp=a("li"),cae=a("strong"),Ouo=o("retribert"),Vuo=o(" \u2014 "),OP=a("a"),Xuo=o("RetriBertModel"),zuo=o(" (RetriBERT model)"),Quo=l(),Fp=a("li"),fae=a("strong"),Wuo=o("roberta"),Huo=o(" \u2014 "),VP=a("a"),Uuo=o("RobertaForMaskedLM"),Juo=o(" (RoBERTa model)"),Yuo=l(),Tp=a("li"),mae=a("strong"),Kuo=o("squeezebert"),Zuo=o(" \u2014 "),XP=a("a"),epo=o("SqueezeBertForMaskedLM"),opo=o(" (SqueezeBERT model)"),rpo=l(),Mp=a("li"),gae=a("strong"),tpo=o("t5"),apo=o(" \u2014 "),zP=a("a"),npo=o("T5ForConditionalGeneration"),spo=o(" (T5 model)"),lpo=l(),Ep=a("li"),hae=a("strong"),ipo=o("tapas"),dpo=o(" \u2014 "),QP=a("a"),cpo=o("TapasForMaskedLM"),fpo=o(" (TAPAS model)"),mpo=l(),Cp=a("li"),uae=a("strong"),gpo=o("transfo-xl"),hpo=o(" \u2014 "),WP=a("a"),upo=o("TransfoXLLMHeadModel"),ppo=o(" (Transformer-XL model)"),_po=l(),wp=a("li"),pae=a("strong"),vpo=o("unispeech"),bpo=o(" \u2014 "),HP=a("a"),Fpo=o("UniSpeechForPreTraining"),Tpo=o(" (UniSpeech model)"),Mpo=l(),Ap=a("li"),_ae=a("strong"),Epo=o("unispeech-sat"),Cpo=o(" \u2014 "),UP=a("a"),wpo=o("UniSpeechSatForPreTraining"),Apo=o(" (UniSpeechSat model)"),ypo=l(),yp=a("li"),vae=a("strong"),Lpo=o("visual_bert"),xpo=o(" \u2014 "),JP=a("a"),$po=o("VisualBertForPreTraining"),kpo=o(" (VisualBert model)"),Spo=l(),Lp=a("li"),bae=a("strong"),Rpo=o("vit_mae"),Bpo=o(" \u2014 "),YP=a("a"),Ppo=o("ViTMAEForPreTraining"),Ipo=o(" (ViTMAE model)"),qpo=l(),xp=a("li"),Fae=a("strong"),Npo=o("wav2vec2"),jpo=o(" \u2014 "),KP=a("a"),Dpo=o("Wav2Vec2ForPreTraining"),Gpo=o(" (Wav2Vec2 model)"),Opo=l(),$p=a("li"),Tae=a("strong"),Vpo=o("xlm"),Xpo=o(" \u2014 "),ZP=a("a"),zpo=o("XLMWithLMHeadModel"),Qpo=o(" (XLM model)"),Wpo=l(),kp=a("li"),Mae=a("strong"),Hpo=o("xlm-roberta"),Upo=o(" \u2014 "),eI=a("a"),Jpo=o("XLMRobertaForMaskedLM"),Ypo=o(" (XLM-RoBERTa model)"),Kpo=l(),Sp=a("li"),Eae=a("strong"),Zpo=o("xlm-roberta-xl"),e_o=o(" \u2014 "),oI=a("a"),o_o=o("XLMRobertaXLForMaskedLM"),r_o=o(" (XLM-RoBERTa-XL model)"),t_o=l(),Rp=a("li"),Cae=a("strong"),a_o=o("xlnet"),n_o=o(" \u2014 "),rI=a("a"),s_o=o("XLNetLMHeadModel"),l_o=o(" (XLNet model)"),i_o=l(),Bp=a("p"),d_o=o("The model is set in evaluation mode by default using "),wae=a("code"),c_o=o("model.eval()"),f_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aae=a("code"),m_o=o("model.train()"),g_o=l(),F(Pp.$$.fragment),Lke=l(),mi=a("h2"),Ip=a("a"),yae=a("span"),F(bA.$$.fragment),h_o=l(),Lae=a("span"),u_o=o("AutoModelForCausalLM"),xke=l(),Lo=a("div"),F(FA.$$.fragment),p_o=l(),gi=a("p"),__o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tI=a("a"),v_o=o("from_pretrained()"),b_o=o(" class method or the "),aI=a("a"),F_o=o("from_config()"),T_o=o(` class
method.`),M_o=l(),TA=a("p"),E_o=o("This class cannot be instantiated directly using "),xae=a("code"),C_o=o("__init__()"),w_o=o(" (throws an error)."),A_o=l(),et=a("div"),F(MA.$$.fragment),y_o=l(),$ae=a("p"),L_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x_o=l(),hi=a("p"),$_o=o(`Note:
Loading a model from its configuration file does `),kae=a("strong"),k_o=o("not"),S_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=a("a"),R_o=o("from_pretrained()"),B_o=o(" to load the model weights."),P_o=l(),F(qp.$$.fragment),I_o=l(),We=a("div"),F(EA.$$.fragment),q_o=l(),Sae=a("p"),N_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j_o=l(),Ca=a("p"),D_o=o("The model class to instantiate is selected based on the "),Rae=a("code"),G_o=o("model_type"),O_o=o(` property of the config object (either
passed as an argument or loaded from `),Bae=a("code"),V_o=o("pretrained_model_name_or_path"),X_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=a("code"),z_o=o("pretrained_model_name_or_path"),Q_o=o(":"),W_o=l(),z=a("ul"),Np=a("li"),Iae=a("strong"),H_o=o("bart"),U_o=o(" \u2014 "),sI=a("a"),J_o=o("BartForCausalLM"),Y_o=o(" (BART model)"),K_o=l(),jp=a("li"),qae=a("strong"),Z_o=o("bert"),evo=o(" \u2014 "),lI=a("a"),ovo=o("BertLMHeadModel"),rvo=o(" (BERT model)"),tvo=l(),Dp=a("li"),Nae=a("strong"),avo=o("bert-generation"),nvo=o(" \u2014 "),iI=a("a"),svo=o("BertGenerationDecoder"),lvo=o(" (Bert Generation model)"),ivo=l(),Gp=a("li"),jae=a("strong"),dvo=o("big_bird"),cvo=o(" \u2014 "),dI=a("a"),fvo=o("BigBirdForCausalLM"),mvo=o(" (BigBird model)"),gvo=l(),Op=a("li"),Dae=a("strong"),hvo=o("bigbird_pegasus"),uvo=o(" \u2014 "),cI=a("a"),pvo=o("BigBirdPegasusForCausalLM"),_vo=o(" (BigBirdPegasus model)"),vvo=l(),Vp=a("li"),Gae=a("strong"),bvo=o("blenderbot"),Fvo=o(" \u2014 "),fI=a("a"),Tvo=o("BlenderbotForCausalLM"),Mvo=o(" (Blenderbot model)"),Evo=l(),Xp=a("li"),Oae=a("strong"),Cvo=o("blenderbot-small"),wvo=o(" \u2014 "),mI=a("a"),Avo=o("BlenderbotSmallForCausalLM"),yvo=o(" (BlenderbotSmall model)"),Lvo=l(),zp=a("li"),Vae=a("strong"),xvo=o("camembert"),$vo=o(" \u2014 "),gI=a("a"),kvo=o("CamembertForCausalLM"),Svo=o(" (CamemBERT model)"),Rvo=l(),Qp=a("li"),Xae=a("strong"),Bvo=o("ctrl"),Pvo=o(" \u2014 "),hI=a("a"),Ivo=o("CTRLLMHeadModel"),qvo=o(" (CTRL model)"),Nvo=l(),Wp=a("li"),zae=a("strong"),jvo=o("data2vec-text"),Dvo=o(" \u2014 "),uI=a("a"),Gvo=o("Data2VecTextForCausalLM"),Ovo=o(" (Data2VecText model)"),Vvo=l(),Hp=a("li"),Qae=a("strong"),Xvo=o("electra"),zvo=o(" \u2014 "),pI=a("a"),Qvo=o("ElectraForCausalLM"),Wvo=o(" (ELECTRA model)"),Hvo=l(),Up=a("li"),Wae=a("strong"),Uvo=o("gpt2"),Jvo=o(" \u2014 "),_I=a("a"),Yvo=o("GPT2LMHeadModel"),Kvo=o(" (OpenAI GPT-2 model)"),Zvo=l(),Jp=a("li"),Hae=a("strong"),e1o=o("gpt_neo"),o1o=o(" \u2014 "),vI=a("a"),r1o=o("GPTNeoForCausalLM"),t1o=o(" (GPT Neo model)"),a1o=l(),Yp=a("li"),Uae=a("strong"),n1o=o("gptj"),s1o=o(" \u2014 "),bI=a("a"),l1o=o("GPTJForCausalLM"),i1o=o(" (GPT-J model)"),d1o=l(),Kp=a("li"),Jae=a("strong"),c1o=o("marian"),f1o=o(" \u2014 "),FI=a("a"),m1o=o("MarianForCausalLM"),g1o=o(" (Marian model)"),h1o=l(),Zp=a("li"),Yae=a("strong"),u1o=o("mbart"),p1o=o(" \u2014 "),TI=a("a"),_1o=o("MBartForCausalLM"),v1o=o(" (mBART model)"),b1o=l(),e_=a("li"),Kae=a("strong"),F1o=o("megatron-bert"),T1o=o(" \u2014 "),MI=a("a"),M1o=o("MegatronBertForCausalLM"),E1o=o(" (MegatronBert model)"),C1o=l(),o_=a("li"),Zae=a("strong"),w1o=o("openai-gpt"),A1o=o(" \u2014 "),EI=a("a"),y1o=o("OpenAIGPTLMHeadModel"),L1o=o(" (OpenAI GPT model)"),x1o=l(),r_=a("li"),ene=a("strong"),$1o=o("pegasus"),k1o=o(" \u2014 "),CI=a("a"),S1o=o("PegasusForCausalLM"),R1o=o(" (Pegasus model)"),B1o=l(),t_=a("li"),one=a("strong"),P1o=o("plbart"),I1o=o(" \u2014 "),wI=a("a"),q1o=o("PLBartForCausalLM"),N1o=o(" (PLBart model)"),j1o=l(),a_=a("li"),rne=a("strong"),D1o=o("prophetnet"),G1o=o(" \u2014 "),AI=a("a"),O1o=o("ProphetNetForCausalLM"),V1o=o(" (ProphetNet model)"),X1o=l(),n_=a("li"),tne=a("strong"),z1o=o("qdqbert"),Q1o=o(" \u2014 "),yI=a("a"),W1o=o("QDQBertLMHeadModel"),H1o=o(" (QDQBert model)"),U1o=l(),s_=a("li"),ane=a("strong"),J1o=o("reformer"),Y1o=o(" \u2014 "),LI=a("a"),K1o=o("ReformerModelWithLMHead"),Z1o=o(" (Reformer model)"),ebo=l(),l_=a("li"),nne=a("strong"),obo=o("rembert"),rbo=o(" \u2014 "),xI=a("a"),tbo=o("RemBertForCausalLM"),abo=o(" (RemBERT model)"),nbo=l(),i_=a("li"),sne=a("strong"),sbo=o("roberta"),lbo=o(" \u2014 "),$I=a("a"),ibo=o("RobertaForCausalLM"),dbo=o(" (RoBERTa model)"),cbo=l(),d_=a("li"),lne=a("strong"),fbo=o("roformer"),mbo=o(" \u2014 "),kI=a("a"),gbo=o("RoFormerForCausalLM"),hbo=o(" (RoFormer model)"),ubo=l(),c_=a("li"),ine=a("strong"),pbo=o("speech_to_text_2"),_bo=o(" \u2014 "),SI=a("a"),vbo=o("Speech2Text2ForCausalLM"),bbo=o(" (Speech2Text2 model)"),Fbo=l(),f_=a("li"),dne=a("strong"),Tbo=o("transfo-xl"),Mbo=o(" \u2014 "),RI=a("a"),Ebo=o("TransfoXLLMHeadModel"),Cbo=o(" (Transformer-XL model)"),wbo=l(),m_=a("li"),cne=a("strong"),Abo=o("trocr"),ybo=o(" \u2014 "),BI=a("a"),Lbo=o("TrOCRForCausalLM"),xbo=o(" (TrOCR model)"),$bo=l(),g_=a("li"),fne=a("strong"),kbo=o("xglm"),Sbo=o(" \u2014 "),PI=a("a"),Rbo=o("XGLMForCausalLM"),Bbo=o(" (XGLM model)"),Pbo=l(),h_=a("li"),mne=a("strong"),Ibo=o("xlm"),qbo=o(" \u2014 "),II=a("a"),Nbo=o("XLMWithLMHeadModel"),jbo=o(" (XLM model)"),Dbo=l(),u_=a("li"),gne=a("strong"),Gbo=o("xlm-prophetnet"),Obo=o(" \u2014 "),qI=a("a"),Vbo=o("XLMProphetNetForCausalLM"),Xbo=o(" (XLMProphetNet model)"),zbo=l(),p_=a("li"),hne=a("strong"),Qbo=o("xlm-roberta"),Wbo=o(" \u2014 "),NI=a("a"),Hbo=o("XLMRobertaForCausalLM"),Ubo=o(" (XLM-RoBERTa model)"),Jbo=l(),__=a("li"),une=a("strong"),Ybo=o("xlm-roberta-xl"),Kbo=o(" \u2014 "),jI=a("a"),Zbo=o("XLMRobertaXLForCausalLM"),e4o=o(" (XLM-RoBERTa-XL model)"),o4o=l(),v_=a("li"),pne=a("strong"),r4o=o("xlnet"),t4o=o(" \u2014 "),DI=a("a"),a4o=o("XLNetLMHeadModel"),n4o=o(" (XLNet model)"),s4o=l(),b_=a("p"),l4o=o("The model is set in evaluation mode by default using "),_ne=a("code"),i4o=o("model.eval()"),d4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=a("code"),c4o=o("model.train()"),f4o=l(),F(F_.$$.fragment),$ke=l(),ui=a("h2"),T_=a("a"),bne=a("span"),F(CA.$$.fragment),m4o=l(),Fne=a("span"),g4o=o("AutoModelForMaskedLM"),kke=l(),xo=a("div"),F(wA.$$.fragment),h4o=l(),pi=a("p"),u4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GI=a("a"),p4o=o("from_pretrained()"),_4o=o(" class method or the "),OI=a("a"),v4o=o("from_config()"),b4o=o(` class
method.`),F4o=l(),AA=a("p"),T4o=o("This class cannot be instantiated directly using "),Tne=a("code"),M4o=o("__init__()"),E4o=o(" (throws an error)."),C4o=l(),ot=a("div"),F(yA.$$.fragment),w4o=l(),Mne=a("p"),A4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y4o=l(),_i=a("p"),L4o=o(`Note:
Loading a model from its configuration file does `),Ene=a("strong"),x4o=o("not"),$4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=a("a"),k4o=o("from_pretrained()"),S4o=o(" to load the model weights."),R4o=l(),F(M_.$$.fragment),B4o=l(),He=a("div"),F(LA.$$.fragment),P4o=l(),Cne=a("p"),I4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q4o=l(),wa=a("p"),N4o=o("The model class to instantiate is selected based on the "),wne=a("code"),j4o=o("model_type"),D4o=o(` property of the config object (either
passed as an argument or loaded from `),Ane=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yne=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(":"),z4o=l(),Q=a("ul"),E_=a("li"),Lne=a("strong"),Q4o=o("albert"),W4o=o(" \u2014 "),XI=a("a"),H4o=o("AlbertForMaskedLM"),U4o=o(" (ALBERT model)"),J4o=l(),C_=a("li"),xne=a("strong"),Y4o=o("bart"),K4o=o(" \u2014 "),zI=a("a"),Z4o=o("BartForConditionalGeneration"),e2o=o(" (BART model)"),o2o=l(),w_=a("li"),$ne=a("strong"),r2o=o("bert"),t2o=o(" \u2014 "),QI=a("a"),a2o=o("BertForMaskedLM"),n2o=o(" (BERT model)"),s2o=l(),A_=a("li"),kne=a("strong"),l2o=o("big_bird"),i2o=o(" \u2014 "),WI=a("a"),d2o=o("BigBirdForMaskedLM"),c2o=o(" (BigBird model)"),f2o=l(),y_=a("li"),Sne=a("strong"),m2o=o("camembert"),g2o=o(" \u2014 "),HI=a("a"),h2o=o("CamembertForMaskedLM"),u2o=o(" (CamemBERT model)"),p2o=l(),L_=a("li"),Rne=a("strong"),_2o=o("convbert"),v2o=o(" \u2014 "),UI=a("a"),b2o=o("ConvBertForMaskedLM"),F2o=o(" (ConvBERT model)"),T2o=l(),x_=a("li"),Bne=a("strong"),M2o=o("data2vec-text"),E2o=o(" \u2014 "),JI=a("a"),C2o=o("Data2VecTextForMaskedLM"),w2o=o(" (Data2VecText model)"),A2o=l(),$_=a("li"),Pne=a("strong"),y2o=o("deberta"),L2o=o(" \u2014 "),YI=a("a"),x2o=o("DebertaForMaskedLM"),$2o=o(" (DeBERTa model)"),k2o=l(),k_=a("li"),Ine=a("strong"),S2o=o("deberta-v2"),R2o=o(" \u2014 "),KI=a("a"),B2o=o("DebertaV2ForMaskedLM"),P2o=o(" (DeBERTa-v2 model)"),I2o=l(),S_=a("li"),qne=a("strong"),q2o=o("distilbert"),N2o=o(" \u2014 "),ZI=a("a"),j2o=o("DistilBertForMaskedLM"),D2o=o(" (DistilBERT model)"),G2o=l(),R_=a("li"),Nne=a("strong"),O2o=o("electra"),V2o=o(" \u2014 "),eq=a("a"),X2o=o("ElectraForMaskedLM"),z2o=o(" (ELECTRA model)"),Q2o=l(),B_=a("li"),jne=a("strong"),W2o=o("flaubert"),H2o=o(" \u2014 "),oq=a("a"),U2o=o("FlaubertWithLMHeadModel"),J2o=o(" (FlauBERT model)"),Y2o=l(),P_=a("li"),Dne=a("strong"),K2o=o("fnet"),Z2o=o(" \u2014 "),rq=a("a"),eFo=o("FNetForMaskedLM"),oFo=o(" (FNet model)"),rFo=l(),I_=a("li"),Gne=a("strong"),tFo=o("funnel"),aFo=o(" \u2014 "),tq=a("a"),nFo=o("FunnelForMaskedLM"),sFo=o(" (Funnel Transformer model)"),lFo=l(),q_=a("li"),One=a("strong"),iFo=o("ibert"),dFo=o(" \u2014 "),aq=a("a"),cFo=o("IBertForMaskedLM"),fFo=o(" (I-BERT model)"),mFo=l(),N_=a("li"),Vne=a("strong"),gFo=o("layoutlm"),hFo=o(" \u2014 "),nq=a("a"),uFo=o("LayoutLMForMaskedLM"),pFo=o(" (LayoutLM model)"),_Fo=l(),j_=a("li"),Xne=a("strong"),vFo=o("longformer"),bFo=o(" \u2014 "),sq=a("a"),FFo=o("LongformerForMaskedLM"),TFo=o(" (Longformer model)"),MFo=l(),D_=a("li"),zne=a("strong"),EFo=o("mbart"),CFo=o(" \u2014 "),lq=a("a"),wFo=o("MBartForConditionalGeneration"),AFo=o(" (mBART model)"),yFo=l(),G_=a("li"),Qne=a("strong"),LFo=o("megatron-bert"),xFo=o(" \u2014 "),iq=a("a"),$Fo=o("MegatronBertForMaskedLM"),kFo=o(" (MegatronBert model)"),SFo=l(),O_=a("li"),Wne=a("strong"),RFo=o("mobilebert"),BFo=o(" \u2014 "),dq=a("a"),PFo=o("MobileBertForMaskedLM"),IFo=o(" (MobileBERT model)"),qFo=l(),V_=a("li"),Hne=a("strong"),NFo=o("mpnet"),jFo=o(" \u2014 "),cq=a("a"),DFo=o("MPNetForMaskedLM"),GFo=o(" (MPNet model)"),OFo=l(),X_=a("li"),Une=a("strong"),VFo=o("nystromformer"),XFo=o(" \u2014 "),fq=a("a"),zFo=o("NystromformerForMaskedLM"),QFo=o(" (Nystromformer model)"),WFo=l(),z_=a("li"),Jne=a("strong"),HFo=o("perceiver"),UFo=o(" \u2014 "),mq=a("a"),JFo=o("PerceiverForMaskedLM"),YFo=o(" (Perceiver model)"),KFo=l(),Q_=a("li"),Yne=a("strong"),ZFo=o("qdqbert"),e0o=o(" \u2014 "),gq=a("a"),o0o=o("QDQBertForMaskedLM"),r0o=o(" (QDQBert model)"),t0o=l(),W_=a("li"),Kne=a("strong"),a0o=o("reformer"),n0o=o(" \u2014 "),hq=a("a"),s0o=o("ReformerForMaskedLM"),l0o=o(" (Reformer model)"),i0o=l(),H_=a("li"),Zne=a("strong"),d0o=o("rembert"),c0o=o(" \u2014 "),uq=a("a"),f0o=o("RemBertForMaskedLM"),m0o=o(" (RemBERT model)"),g0o=l(),U_=a("li"),ese=a("strong"),h0o=o("roberta"),u0o=o(" \u2014 "),pq=a("a"),p0o=o("RobertaForMaskedLM"),_0o=o(" (RoBERTa model)"),v0o=l(),J_=a("li"),ose=a("strong"),b0o=o("roformer"),F0o=o(" \u2014 "),_q=a("a"),T0o=o("RoFormerForMaskedLM"),M0o=o(" (RoFormer model)"),E0o=l(),Y_=a("li"),rse=a("strong"),C0o=o("squeezebert"),w0o=o(" \u2014 "),vq=a("a"),A0o=o("SqueezeBertForMaskedLM"),y0o=o(" (SqueezeBERT model)"),L0o=l(),K_=a("li"),tse=a("strong"),x0o=o("tapas"),$0o=o(" \u2014 "),bq=a("a"),k0o=o("TapasForMaskedLM"),S0o=o(" (TAPAS model)"),R0o=l(),Z_=a("li"),ase=a("strong"),B0o=o("wav2vec2"),P0o=o(" \u2014 "),nse=a("code"),I0o=o("Wav2Vec2ForMaskedLM"),q0o=o(" (Wav2Vec2 model)"),N0o=l(),ev=a("li"),sse=a("strong"),j0o=o("xlm"),D0o=o(" \u2014 "),Fq=a("a"),G0o=o("XLMWithLMHeadModel"),O0o=o(" (XLM model)"),V0o=l(),ov=a("li"),lse=a("strong"),X0o=o("xlm-roberta"),z0o=o(" \u2014 "),Tq=a("a"),Q0o=o("XLMRobertaForMaskedLM"),W0o=o(" (XLM-RoBERTa model)"),H0o=l(),rv=a("li"),ise=a("strong"),U0o=o("xlm-roberta-xl"),J0o=o(" \u2014 "),Mq=a("a"),Y0o=o("XLMRobertaXLForMaskedLM"),K0o=o(" (XLM-RoBERTa-XL model)"),Z0o=l(),tv=a("li"),dse=a("strong"),eTo=o("yoso"),oTo=o(" \u2014 "),Eq=a("a"),rTo=o("YosoForMaskedLM"),tTo=o(" (YOSO model)"),aTo=l(),av=a("p"),nTo=o("The model is set in evaluation mode by default using "),cse=a("code"),sTo=o("model.eval()"),lTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=a("code"),iTo=o("model.train()"),dTo=l(),F(nv.$$.fragment),Ske=l(),vi=a("h2"),sv=a("a"),mse=a("span"),F(xA.$$.fragment),cTo=l(),gse=a("span"),fTo=o("AutoModelForSeq2SeqLM"),Rke=l(),$o=a("div"),F($A.$$.fragment),mTo=l(),bi=a("p"),gTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cq=a("a"),hTo=o("from_pretrained()"),uTo=o(" class method or the "),wq=a("a"),pTo=o("from_config()"),_To=o(` class
method.`),vTo=l(),kA=a("p"),bTo=o("This class cannot be instantiated directly using "),hse=a("code"),FTo=o("__init__()"),TTo=o(" (throws an error)."),MTo=l(),rt=a("div"),F(SA.$$.fragment),ETo=l(),use=a("p"),CTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wTo=l(),Fi=a("p"),ATo=o(`Note:
Loading a model from its configuration file does `),pse=a("strong"),yTo=o("not"),LTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=a("a"),xTo=o("from_pretrained()"),$To=o(" to load the model weights."),kTo=l(),F(lv.$$.fragment),STo=l(),Ue=a("div"),F(RA.$$.fragment),RTo=l(),_se=a("p"),BTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PTo=l(),Aa=a("p"),ITo=o("The model class to instantiate is selected based on the "),vse=a("code"),qTo=o("model_type"),NTo=o(` property of the config object (either
passed as an argument or loaded from `),bse=a("code"),jTo=o("pretrained_model_name_or_path"),DTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fse=a("code"),GTo=o("pretrained_model_name_or_path"),OTo=o(":"),VTo=l(),ue=a("ul"),iv=a("li"),Tse=a("strong"),XTo=o("bart"),zTo=o(" \u2014 "),yq=a("a"),QTo=o("BartForConditionalGeneration"),WTo=o(" (BART model)"),HTo=l(),dv=a("li"),Mse=a("strong"),UTo=o("bigbird_pegasus"),JTo=o(" \u2014 "),Lq=a("a"),YTo=o("BigBirdPegasusForConditionalGeneration"),KTo=o(" (BigBirdPegasus model)"),ZTo=l(),cv=a("li"),Ese=a("strong"),e8o=o("blenderbot"),o8o=o(" \u2014 "),xq=a("a"),r8o=o("BlenderbotForConditionalGeneration"),t8o=o(" (Blenderbot model)"),a8o=l(),fv=a("li"),Cse=a("strong"),n8o=o("blenderbot-small"),s8o=o(" \u2014 "),$q=a("a"),l8o=o("BlenderbotSmallForConditionalGeneration"),i8o=o(" (BlenderbotSmall model)"),d8o=l(),mv=a("li"),wse=a("strong"),c8o=o("encoder-decoder"),f8o=o(" \u2014 "),kq=a("a"),m8o=o("EncoderDecoderModel"),g8o=o(" (Encoder decoder model)"),h8o=l(),gv=a("li"),Ase=a("strong"),u8o=o("fsmt"),p8o=o(" \u2014 "),Sq=a("a"),_8o=o("FSMTForConditionalGeneration"),v8o=o(" (FairSeq Machine-Translation model)"),b8o=l(),hv=a("li"),yse=a("strong"),F8o=o("led"),T8o=o(" \u2014 "),Rq=a("a"),M8o=o("LEDForConditionalGeneration"),E8o=o(" (LED model)"),C8o=l(),uv=a("li"),Lse=a("strong"),w8o=o("m2m_100"),A8o=o(" \u2014 "),Bq=a("a"),y8o=o("M2M100ForConditionalGeneration"),L8o=o(" (M2M100 model)"),x8o=l(),pv=a("li"),xse=a("strong"),$8o=o("marian"),k8o=o(" \u2014 "),Pq=a("a"),S8o=o("MarianMTModel"),R8o=o(" (Marian model)"),B8o=l(),_v=a("li"),$se=a("strong"),P8o=o("mbart"),I8o=o(" \u2014 "),Iq=a("a"),q8o=o("MBartForConditionalGeneration"),N8o=o(" (mBART model)"),j8o=l(),vv=a("li"),kse=a("strong"),D8o=o("mt5"),G8o=o(" \u2014 "),qq=a("a"),O8o=o("MT5ForConditionalGeneration"),V8o=o(" (mT5 model)"),X8o=l(),bv=a("li"),Sse=a("strong"),z8o=o("pegasus"),Q8o=o(" \u2014 "),Nq=a("a"),W8o=o("PegasusForConditionalGeneration"),H8o=o(" (Pegasus model)"),U8o=l(),Fv=a("li"),Rse=a("strong"),J8o=o("plbart"),Y8o=o(" \u2014 "),jq=a("a"),K8o=o("PLBartForConditionalGeneration"),Z8o=o(" (PLBart model)"),eMo=l(),Tv=a("li"),Bse=a("strong"),oMo=o("prophetnet"),rMo=o(" \u2014 "),Dq=a("a"),tMo=o("ProphetNetForConditionalGeneration"),aMo=o(" (ProphetNet model)"),nMo=l(),Mv=a("li"),Pse=a("strong"),sMo=o("t5"),lMo=o(" \u2014 "),Gq=a("a"),iMo=o("T5ForConditionalGeneration"),dMo=o(" (T5 model)"),cMo=l(),Ev=a("li"),Ise=a("strong"),fMo=o("xlm-prophetnet"),mMo=o(" \u2014 "),Oq=a("a"),gMo=o("XLMProphetNetForConditionalGeneration"),hMo=o(" (XLMProphetNet model)"),uMo=l(),Cv=a("p"),pMo=o("The model is set in evaluation mode by default using "),qse=a("code"),_Mo=o("model.eval()"),vMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nse=a("code"),bMo=o("model.train()"),FMo=l(),F(wv.$$.fragment),Bke=l(),Ti=a("h2"),Av=a("a"),jse=a("span"),F(BA.$$.fragment),TMo=l(),Dse=a("span"),MMo=o("AutoModelForSequenceClassification"),Pke=l(),ko=a("div"),F(PA.$$.fragment),EMo=l(),Mi=a("p"),CMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vq=a("a"),wMo=o("from_pretrained()"),AMo=o(" class method or the "),Xq=a("a"),yMo=o("from_config()"),LMo=o(` class
method.`),xMo=l(),IA=a("p"),$Mo=o("This class cannot be instantiated directly using "),Gse=a("code"),kMo=o("__init__()"),SMo=o(" (throws an error)."),RMo=l(),tt=a("div"),F(qA.$$.fragment),BMo=l(),Ose=a("p"),PMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IMo=l(),Ei=a("p"),qMo=o(`Note:
Loading a model from its configuration file does `),Vse=a("strong"),NMo=o("not"),jMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zq=a("a"),DMo=o("from_pretrained()"),GMo=o(" to load the model weights."),OMo=l(),F(yv.$$.fragment),VMo=l(),Je=a("div"),F(NA.$$.fragment),XMo=l(),Xse=a("p"),zMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QMo=l(),ya=a("p"),WMo=o("The model class to instantiate is selected based on the "),zse=a("code"),HMo=o("model_type"),UMo=o(` property of the config object (either
passed as an argument or loaded from `),Qse=a("code"),JMo=o("pretrained_model_name_or_path"),YMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wse=a("code"),KMo=o("pretrained_model_name_or_path"),ZMo=o(":"),eEo=l(),q=a("ul"),Lv=a("li"),Hse=a("strong"),oEo=o("albert"),rEo=o(" \u2014 "),Qq=a("a"),tEo=o("AlbertForSequenceClassification"),aEo=o(" (ALBERT model)"),nEo=l(),xv=a("li"),Use=a("strong"),sEo=o("bart"),lEo=o(" \u2014 "),Wq=a("a"),iEo=o("BartForSequenceClassification"),dEo=o(" (BART model)"),cEo=l(),$v=a("li"),Jse=a("strong"),fEo=o("bert"),mEo=o(" \u2014 "),Hq=a("a"),gEo=o("BertForSequenceClassification"),hEo=o(" (BERT model)"),uEo=l(),kv=a("li"),Yse=a("strong"),pEo=o("big_bird"),_Eo=o(" \u2014 "),Uq=a("a"),vEo=o("BigBirdForSequenceClassification"),bEo=o(" (BigBird model)"),FEo=l(),Sv=a("li"),Kse=a("strong"),TEo=o("bigbird_pegasus"),MEo=o(" \u2014 "),Jq=a("a"),EEo=o("BigBirdPegasusForSequenceClassification"),CEo=o(" (BigBirdPegasus model)"),wEo=l(),Rv=a("li"),Zse=a("strong"),AEo=o("camembert"),yEo=o(" \u2014 "),Yq=a("a"),LEo=o("CamembertForSequenceClassification"),xEo=o(" (CamemBERT model)"),$Eo=l(),Bv=a("li"),ele=a("strong"),kEo=o("canine"),SEo=o(" \u2014 "),Kq=a("a"),REo=o("CanineForSequenceClassification"),BEo=o(" (Canine model)"),PEo=l(),Pv=a("li"),ole=a("strong"),IEo=o("convbert"),qEo=o(" \u2014 "),Zq=a("a"),NEo=o("ConvBertForSequenceClassification"),jEo=o(" (ConvBERT model)"),DEo=l(),Iv=a("li"),rle=a("strong"),GEo=o("ctrl"),OEo=o(" \u2014 "),eN=a("a"),VEo=o("CTRLForSequenceClassification"),XEo=o(" (CTRL model)"),zEo=l(),qv=a("li"),tle=a("strong"),QEo=o("data2vec-text"),WEo=o(" \u2014 "),oN=a("a"),HEo=o("Data2VecTextForSequenceClassification"),UEo=o(" (Data2VecText model)"),JEo=l(),Nv=a("li"),ale=a("strong"),YEo=o("deberta"),KEo=o(" \u2014 "),rN=a("a"),ZEo=o("DebertaForSequenceClassification"),e5o=o(" (DeBERTa model)"),o5o=l(),jv=a("li"),nle=a("strong"),r5o=o("deberta-v2"),t5o=o(" \u2014 "),tN=a("a"),a5o=o("DebertaV2ForSequenceClassification"),n5o=o(" (DeBERTa-v2 model)"),s5o=l(),Dv=a("li"),sle=a("strong"),l5o=o("distilbert"),i5o=o(" \u2014 "),aN=a("a"),d5o=o("DistilBertForSequenceClassification"),c5o=o(" (DistilBERT model)"),f5o=l(),Gv=a("li"),lle=a("strong"),m5o=o("electra"),g5o=o(" \u2014 "),nN=a("a"),h5o=o("ElectraForSequenceClassification"),u5o=o(" (ELECTRA model)"),p5o=l(),Ov=a("li"),ile=a("strong"),_5o=o("flaubert"),v5o=o(" \u2014 "),sN=a("a"),b5o=o("FlaubertForSequenceClassification"),F5o=o(" (FlauBERT model)"),T5o=l(),Vv=a("li"),dle=a("strong"),M5o=o("fnet"),E5o=o(" \u2014 "),lN=a("a"),C5o=o("FNetForSequenceClassification"),w5o=o(" (FNet model)"),A5o=l(),Xv=a("li"),cle=a("strong"),y5o=o("funnel"),L5o=o(" \u2014 "),iN=a("a"),x5o=o("FunnelForSequenceClassification"),$5o=o(" (Funnel Transformer model)"),k5o=l(),zv=a("li"),fle=a("strong"),S5o=o("gpt2"),R5o=o(" \u2014 "),dN=a("a"),B5o=o("GPT2ForSequenceClassification"),P5o=o(" (OpenAI GPT-2 model)"),I5o=l(),Qv=a("li"),mle=a("strong"),q5o=o("gpt_neo"),N5o=o(" \u2014 "),cN=a("a"),j5o=o("GPTNeoForSequenceClassification"),D5o=o(" (GPT Neo model)"),G5o=l(),Wv=a("li"),gle=a("strong"),O5o=o("gptj"),V5o=o(" \u2014 "),fN=a("a"),X5o=o("GPTJForSequenceClassification"),z5o=o(" (GPT-J model)"),Q5o=l(),Hv=a("li"),hle=a("strong"),W5o=o("ibert"),H5o=o(" \u2014 "),mN=a("a"),U5o=o("IBertForSequenceClassification"),J5o=o(" (I-BERT model)"),Y5o=l(),Uv=a("li"),ule=a("strong"),K5o=o("layoutlm"),Z5o=o(" \u2014 "),gN=a("a"),eCo=o("LayoutLMForSequenceClassification"),oCo=o(" (LayoutLM model)"),rCo=l(),Jv=a("li"),ple=a("strong"),tCo=o("layoutlmv2"),aCo=o(" \u2014 "),hN=a("a"),nCo=o("LayoutLMv2ForSequenceClassification"),sCo=o(" (LayoutLMv2 model)"),lCo=l(),Yv=a("li"),_le=a("strong"),iCo=o("led"),dCo=o(" \u2014 "),uN=a("a"),cCo=o("LEDForSequenceClassification"),fCo=o(" (LED model)"),mCo=l(),Kv=a("li"),vle=a("strong"),gCo=o("longformer"),hCo=o(" \u2014 "),pN=a("a"),uCo=o("LongformerForSequenceClassification"),pCo=o(" (Longformer model)"),_Co=l(),Zv=a("li"),ble=a("strong"),vCo=o("mbart"),bCo=o(" \u2014 "),_N=a("a"),FCo=o("MBartForSequenceClassification"),TCo=o(" (mBART model)"),MCo=l(),e1=a("li"),Fle=a("strong"),ECo=o("megatron-bert"),CCo=o(" \u2014 "),vN=a("a"),wCo=o("MegatronBertForSequenceClassification"),ACo=o(" (MegatronBert model)"),yCo=l(),o1=a("li"),Tle=a("strong"),LCo=o("mobilebert"),xCo=o(" \u2014 "),bN=a("a"),$Co=o("MobileBertForSequenceClassification"),kCo=o(" (MobileBERT model)"),SCo=l(),r1=a("li"),Mle=a("strong"),RCo=o("mpnet"),BCo=o(" \u2014 "),FN=a("a"),PCo=o("MPNetForSequenceClassification"),ICo=o(" (MPNet model)"),qCo=l(),t1=a("li"),Ele=a("strong"),NCo=o("nystromformer"),jCo=o(" \u2014 "),TN=a("a"),DCo=o("NystromformerForSequenceClassification"),GCo=o(" (Nystromformer model)"),OCo=l(),a1=a("li"),Cle=a("strong"),VCo=o("openai-gpt"),XCo=o(" \u2014 "),MN=a("a"),zCo=o("OpenAIGPTForSequenceClassification"),QCo=o(" (OpenAI GPT model)"),WCo=l(),n1=a("li"),wle=a("strong"),HCo=o("perceiver"),UCo=o(" \u2014 "),EN=a("a"),JCo=o("PerceiverForSequenceClassification"),YCo=o(" (Perceiver model)"),KCo=l(),s1=a("li"),Ale=a("strong"),ZCo=o("plbart"),e3o=o(" \u2014 "),CN=a("a"),o3o=o("PLBartForSequenceClassification"),r3o=o(" (PLBart model)"),t3o=l(),l1=a("li"),yle=a("strong"),a3o=o("qdqbert"),n3o=o(" \u2014 "),wN=a("a"),s3o=o("QDQBertForSequenceClassification"),l3o=o(" (QDQBert model)"),i3o=l(),i1=a("li"),Lle=a("strong"),d3o=o("reformer"),c3o=o(" \u2014 "),AN=a("a"),f3o=o("ReformerForSequenceClassification"),m3o=o(" (Reformer model)"),g3o=l(),d1=a("li"),xle=a("strong"),h3o=o("rembert"),u3o=o(" \u2014 "),yN=a("a"),p3o=o("RemBertForSequenceClassification"),_3o=o(" (RemBERT model)"),v3o=l(),c1=a("li"),$le=a("strong"),b3o=o("roberta"),F3o=o(" \u2014 "),LN=a("a"),T3o=o("RobertaForSequenceClassification"),M3o=o(" (RoBERTa model)"),E3o=l(),f1=a("li"),kle=a("strong"),C3o=o("roformer"),w3o=o(" \u2014 "),xN=a("a"),A3o=o("RoFormerForSequenceClassification"),y3o=o(" (RoFormer model)"),L3o=l(),m1=a("li"),Sle=a("strong"),x3o=o("squeezebert"),$3o=o(" \u2014 "),$N=a("a"),k3o=o("SqueezeBertForSequenceClassification"),S3o=o(" (SqueezeBERT model)"),R3o=l(),g1=a("li"),Rle=a("strong"),B3o=o("tapas"),P3o=o(" \u2014 "),kN=a("a"),I3o=o("TapasForSequenceClassification"),q3o=o(" (TAPAS model)"),N3o=l(),h1=a("li"),Ble=a("strong"),j3o=o("transfo-xl"),D3o=o(" \u2014 "),SN=a("a"),G3o=o("TransfoXLForSequenceClassification"),O3o=o(" (Transformer-XL model)"),V3o=l(),u1=a("li"),Ple=a("strong"),X3o=o("xlm"),z3o=o(" \u2014 "),RN=a("a"),Q3o=o("XLMForSequenceClassification"),W3o=o(" (XLM model)"),H3o=l(),p1=a("li"),Ile=a("strong"),U3o=o("xlm-roberta"),J3o=o(" \u2014 "),BN=a("a"),Y3o=o("XLMRobertaForSequenceClassification"),K3o=o(" (XLM-RoBERTa model)"),Z3o=l(),_1=a("li"),qle=a("strong"),ewo=o("xlm-roberta-xl"),owo=o(" \u2014 "),PN=a("a"),rwo=o("XLMRobertaXLForSequenceClassification"),two=o(" (XLM-RoBERTa-XL model)"),awo=l(),v1=a("li"),Nle=a("strong"),nwo=o("xlnet"),swo=o(" \u2014 "),IN=a("a"),lwo=o("XLNetForSequenceClassification"),iwo=o(" (XLNet model)"),dwo=l(),b1=a("li"),jle=a("strong"),cwo=o("yoso"),fwo=o(" \u2014 "),qN=a("a"),mwo=o("YosoForSequenceClassification"),gwo=o(" (YOSO model)"),hwo=l(),F1=a("p"),uwo=o("The model is set in evaluation mode by default using "),Dle=a("code"),pwo=o("model.eval()"),_wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),vwo=o("model.train()"),bwo=l(),F(T1.$$.fragment),Ike=l(),Ci=a("h2"),M1=a("a"),Ole=a("span"),F(jA.$$.fragment),Fwo=l(),Vle=a("span"),Two=o("AutoModelForMultipleChoice"),qke=l(),So=a("div"),F(DA.$$.fragment),Mwo=l(),wi=a("p"),Ewo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NN=a("a"),Cwo=o("from_pretrained()"),wwo=o(" class method or the "),jN=a("a"),Awo=o("from_config()"),ywo=o(` class
method.`),Lwo=l(),GA=a("p"),xwo=o("This class cannot be instantiated directly using "),Xle=a("code"),$wo=o("__init__()"),kwo=o(" (throws an error)."),Swo=l(),at=a("div"),F(OA.$$.fragment),Rwo=l(),zle=a("p"),Bwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pwo=l(),Ai=a("p"),Iwo=o(`Note:
Loading a model from its configuration file does `),Qle=a("strong"),qwo=o("not"),Nwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=a("a"),jwo=o("from_pretrained()"),Dwo=o(" to load the model weights."),Gwo=l(),F(E1.$$.fragment),Owo=l(),Ye=a("div"),F(VA.$$.fragment),Vwo=l(),Wle=a("p"),Xwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zwo=l(),La=a("p"),Qwo=o("The model class to instantiate is selected based on the "),Hle=a("code"),Wwo=o("model_type"),Hwo=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),Uwo=o("pretrained_model_name_or_path"),Jwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=a("code"),Ywo=o("pretrained_model_name_or_path"),Kwo=o(":"),Zwo=l(),Y=a("ul"),C1=a("li"),Yle=a("strong"),eAo=o("albert"),oAo=o(" \u2014 "),GN=a("a"),rAo=o("AlbertForMultipleChoice"),tAo=o(" (ALBERT model)"),aAo=l(),w1=a("li"),Kle=a("strong"),nAo=o("bert"),sAo=o(" \u2014 "),ON=a("a"),lAo=o("BertForMultipleChoice"),iAo=o(" (BERT model)"),dAo=l(),A1=a("li"),Zle=a("strong"),cAo=o("big_bird"),fAo=o(" \u2014 "),VN=a("a"),mAo=o("BigBirdForMultipleChoice"),gAo=o(" (BigBird model)"),hAo=l(),y1=a("li"),eie=a("strong"),uAo=o("camembert"),pAo=o(" \u2014 "),XN=a("a"),_Ao=o("CamembertForMultipleChoice"),vAo=o(" (CamemBERT model)"),bAo=l(),L1=a("li"),oie=a("strong"),FAo=o("canine"),TAo=o(" \u2014 "),zN=a("a"),MAo=o("CanineForMultipleChoice"),EAo=o(" (Canine model)"),CAo=l(),x1=a("li"),rie=a("strong"),wAo=o("convbert"),AAo=o(" \u2014 "),QN=a("a"),yAo=o("ConvBertForMultipleChoice"),LAo=o(" (ConvBERT model)"),xAo=l(),$1=a("li"),tie=a("strong"),$Ao=o("data2vec-text"),kAo=o(" \u2014 "),WN=a("a"),SAo=o("Data2VecTextForMultipleChoice"),RAo=o(" (Data2VecText model)"),BAo=l(),k1=a("li"),aie=a("strong"),PAo=o("distilbert"),IAo=o(" \u2014 "),HN=a("a"),qAo=o("DistilBertForMultipleChoice"),NAo=o(" (DistilBERT model)"),jAo=l(),S1=a("li"),nie=a("strong"),DAo=o("electra"),GAo=o(" \u2014 "),UN=a("a"),OAo=o("ElectraForMultipleChoice"),VAo=o(" (ELECTRA model)"),XAo=l(),R1=a("li"),sie=a("strong"),zAo=o("flaubert"),QAo=o(" \u2014 "),JN=a("a"),WAo=o("FlaubertForMultipleChoice"),HAo=o(" (FlauBERT model)"),UAo=l(),B1=a("li"),lie=a("strong"),JAo=o("fnet"),YAo=o(" \u2014 "),YN=a("a"),KAo=o("FNetForMultipleChoice"),ZAo=o(" (FNet model)"),e6o=l(),P1=a("li"),iie=a("strong"),o6o=o("funnel"),r6o=o(" \u2014 "),KN=a("a"),t6o=o("FunnelForMultipleChoice"),a6o=o(" (Funnel Transformer model)"),n6o=l(),I1=a("li"),die=a("strong"),s6o=o("ibert"),l6o=o(" \u2014 "),ZN=a("a"),i6o=o("IBertForMultipleChoice"),d6o=o(" (I-BERT model)"),c6o=l(),q1=a("li"),cie=a("strong"),f6o=o("longformer"),m6o=o(" \u2014 "),ej=a("a"),g6o=o("LongformerForMultipleChoice"),h6o=o(" (Longformer model)"),u6o=l(),N1=a("li"),fie=a("strong"),p6o=o("megatron-bert"),_6o=o(" \u2014 "),oj=a("a"),v6o=o("MegatronBertForMultipleChoice"),b6o=o(" (MegatronBert model)"),F6o=l(),j1=a("li"),mie=a("strong"),T6o=o("mobilebert"),M6o=o(" \u2014 "),rj=a("a"),E6o=o("MobileBertForMultipleChoice"),C6o=o(" (MobileBERT model)"),w6o=l(),D1=a("li"),gie=a("strong"),A6o=o("mpnet"),y6o=o(" \u2014 "),tj=a("a"),L6o=o("MPNetForMultipleChoice"),x6o=o(" (MPNet model)"),$6o=l(),G1=a("li"),hie=a("strong"),k6o=o("nystromformer"),S6o=o(" \u2014 "),aj=a("a"),R6o=o("NystromformerForMultipleChoice"),B6o=o(" (Nystromformer model)"),P6o=l(),O1=a("li"),uie=a("strong"),I6o=o("qdqbert"),q6o=o(" \u2014 "),nj=a("a"),N6o=o("QDQBertForMultipleChoice"),j6o=o(" (QDQBert model)"),D6o=l(),V1=a("li"),pie=a("strong"),G6o=o("rembert"),O6o=o(" \u2014 "),sj=a("a"),V6o=o("RemBertForMultipleChoice"),X6o=o(" (RemBERT model)"),z6o=l(),X1=a("li"),_ie=a("strong"),Q6o=o("roberta"),W6o=o(" \u2014 "),lj=a("a"),H6o=o("RobertaForMultipleChoice"),U6o=o(" (RoBERTa model)"),J6o=l(),z1=a("li"),vie=a("strong"),Y6o=o("roformer"),K6o=o(" \u2014 "),ij=a("a"),Z6o=o("RoFormerForMultipleChoice"),eyo=o(" (RoFormer model)"),oyo=l(),Q1=a("li"),bie=a("strong"),ryo=o("squeezebert"),tyo=o(" \u2014 "),dj=a("a"),ayo=o("SqueezeBertForMultipleChoice"),nyo=o(" (SqueezeBERT model)"),syo=l(),W1=a("li"),Fie=a("strong"),lyo=o("xlm"),iyo=o(" \u2014 "),cj=a("a"),dyo=o("XLMForMultipleChoice"),cyo=o(" (XLM model)"),fyo=l(),H1=a("li"),Tie=a("strong"),myo=o("xlm-roberta"),gyo=o(" \u2014 "),fj=a("a"),hyo=o("XLMRobertaForMultipleChoice"),uyo=o(" (XLM-RoBERTa model)"),pyo=l(),U1=a("li"),Mie=a("strong"),_yo=o("xlm-roberta-xl"),vyo=o(" \u2014 "),mj=a("a"),byo=o("XLMRobertaXLForMultipleChoice"),Fyo=o(" (XLM-RoBERTa-XL model)"),Tyo=l(),J1=a("li"),Eie=a("strong"),Myo=o("xlnet"),Eyo=o(" \u2014 "),gj=a("a"),Cyo=o("XLNetForMultipleChoice"),wyo=o(" (XLNet model)"),Ayo=l(),Y1=a("li"),Cie=a("strong"),yyo=o("yoso"),Lyo=o(" \u2014 "),hj=a("a"),xyo=o("YosoForMultipleChoice"),$yo=o(" (YOSO model)"),kyo=l(),K1=a("p"),Syo=o("The model is set in evaluation mode by default using "),wie=a("code"),Ryo=o("model.eval()"),Byo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),Pyo=o("model.train()"),Iyo=l(),F(Z1.$$.fragment),Nke=l(),yi=a("h2"),eb=a("a"),yie=a("span"),F(XA.$$.fragment),qyo=l(),Lie=a("span"),Nyo=o("AutoModelForNextSentencePrediction"),jke=l(),Ro=a("div"),F(zA.$$.fragment),jyo=l(),Li=a("p"),Dyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uj=a("a"),Gyo=o("from_pretrained()"),Oyo=o(" class method or the "),pj=a("a"),Vyo=o("from_config()"),Xyo=o(` class
method.`),zyo=l(),QA=a("p"),Qyo=o("This class cannot be instantiated directly using "),xie=a("code"),Wyo=o("__init__()"),Hyo=o(" (throws an error)."),Uyo=l(),nt=a("div"),F(WA.$$.fragment),Jyo=l(),$ie=a("p"),Yyo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kyo=l(),xi=a("p"),Zyo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),eLo=o("not"),oLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),rLo=o("from_pretrained()"),tLo=o(" to load the model weights."),aLo=l(),F(ob.$$.fragment),nLo=l(),Ke=a("div"),F(HA.$$.fragment),sLo=l(),Sie=a("p"),lLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iLo=l(),xa=a("p"),dLo=o("The model class to instantiate is selected based on the "),Rie=a("code"),cLo=o("model_type"),fLo=o(` property of the config object (either
passed as an argument or loaded from `),Bie=a("code"),mLo=o("pretrained_model_name_or_path"),gLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),hLo=o("pretrained_model_name_or_path"),uLo=o(":"),pLo=l(),Wr=a("ul"),rb=a("li"),Iie=a("strong"),_Lo=o("bert"),vLo=o(" \u2014 "),vj=a("a"),bLo=o("BertForNextSentencePrediction"),FLo=o(" (BERT model)"),TLo=l(),tb=a("li"),qie=a("strong"),MLo=o("fnet"),ELo=o(" \u2014 "),bj=a("a"),CLo=o("FNetForNextSentencePrediction"),wLo=o(" (FNet model)"),ALo=l(),ab=a("li"),Nie=a("strong"),yLo=o("megatron-bert"),LLo=o(" \u2014 "),Fj=a("a"),xLo=o("MegatronBertForNextSentencePrediction"),$Lo=o(" (MegatronBert model)"),kLo=l(),nb=a("li"),jie=a("strong"),SLo=o("mobilebert"),RLo=o(" \u2014 "),Tj=a("a"),BLo=o("MobileBertForNextSentencePrediction"),PLo=o(" (MobileBERT model)"),ILo=l(),sb=a("li"),Die=a("strong"),qLo=o("qdqbert"),NLo=o(" \u2014 "),Mj=a("a"),jLo=o("QDQBertForNextSentencePrediction"),DLo=o(" (QDQBert model)"),GLo=l(),lb=a("p"),OLo=o("The model is set in evaluation mode by default using "),Gie=a("code"),VLo=o("model.eval()"),XLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=a("code"),zLo=o("model.train()"),QLo=l(),F(ib.$$.fragment),Dke=l(),$i=a("h2"),db=a("a"),Vie=a("span"),F(UA.$$.fragment),WLo=l(),Xie=a("span"),HLo=o("AutoModelForTokenClassification"),Gke=l(),Bo=a("div"),F(JA.$$.fragment),ULo=l(),ki=a("p"),JLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ej=a("a"),YLo=o("from_pretrained()"),KLo=o(" class method or the "),Cj=a("a"),ZLo=o("from_config()"),exo=o(` class
method.`),oxo=l(),YA=a("p"),rxo=o("This class cannot be instantiated directly using "),zie=a("code"),txo=o("__init__()"),axo=o(" (throws an error)."),nxo=l(),st=a("div"),F(KA.$$.fragment),sxo=l(),Qie=a("p"),lxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ixo=l(),Si=a("p"),dxo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),cxo=o("not"),fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=a("a"),mxo=o("from_pretrained()"),gxo=o(" to load the model weights."),hxo=l(),F(cb.$$.fragment),uxo=l(),Ze=a("div"),F(ZA.$$.fragment),pxo=l(),Hie=a("p"),_xo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vxo=l(),$a=a("p"),bxo=o("The model class to instantiate is selected based on the "),Uie=a("code"),Fxo=o("model_type"),Txo=o(` property of the config object (either
passed as an argument or loaded from `),Jie=a("code"),Mxo=o("pretrained_model_name_or_path"),Exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=a("code"),Cxo=o("pretrained_model_name_or_path"),wxo=o(":"),Axo=l(),U=a("ul"),fb=a("li"),Kie=a("strong"),yxo=o("albert"),Lxo=o(" \u2014 "),Aj=a("a"),xxo=o("AlbertForTokenClassification"),$xo=o(" (ALBERT model)"),kxo=l(),mb=a("li"),Zie=a("strong"),Sxo=o("bert"),Rxo=o(" \u2014 "),yj=a("a"),Bxo=o("BertForTokenClassification"),Pxo=o(" (BERT model)"),Ixo=l(),gb=a("li"),ede=a("strong"),qxo=o("big_bird"),Nxo=o(" \u2014 "),Lj=a("a"),jxo=o("BigBirdForTokenClassification"),Dxo=o(" (BigBird model)"),Gxo=l(),hb=a("li"),ode=a("strong"),Oxo=o("camembert"),Vxo=o(" \u2014 "),xj=a("a"),Xxo=o("CamembertForTokenClassification"),zxo=o(" (CamemBERT model)"),Qxo=l(),ub=a("li"),rde=a("strong"),Wxo=o("canine"),Hxo=o(" \u2014 "),$j=a("a"),Uxo=o("CanineForTokenClassification"),Jxo=o(" (Canine model)"),Yxo=l(),pb=a("li"),tde=a("strong"),Kxo=o("convbert"),Zxo=o(" \u2014 "),kj=a("a"),e7o=o("ConvBertForTokenClassification"),o7o=o(" (ConvBERT model)"),r7o=l(),_b=a("li"),ade=a("strong"),t7o=o("data2vec-text"),a7o=o(" \u2014 "),Sj=a("a"),n7o=o("Data2VecTextForTokenClassification"),s7o=o(" (Data2VecText model)"),l7o=l(),vb=a("li"),nde=a("strong"),i7o=o("deberta"),d7o=o(" \u2014 "),Rj=a("a"),c7o=o("DebertaForTokenClassification"),f7o=o(" (DeBERTa model)"),m7o=l(),bb=a("li"),sde=a("strong"),g7o=o("deberta-v2"),h7o=o(" \u2014 "),Bj=a("a"),u7o=o("DebertaV2ForTokenClassification"),p7o=o(" (DeBERTa-v2 model)"),_7o=l(),Fb=a("li"),lde=a("strong"),v7o=o("distilbert"),b7o=o(" \u2014 "),Pj=a("a"),F7o=o("DistilBertForTokenClassification"),T7o=o(" (DistilBERT model)"),M7o=l(),Tb=a("li"),ide=a("strong"),E7o=o("electra"),C7o=o(" \u2014 "),Ij=a("a"),w7o=o("ElectraForTokenClassification"),A7o=o(" (ELECTRA model)"),y7o=l(),Mb=a("li"),dde=a("strong"),L7o=o("flaubert"),x7o=o(" \u2014 "),qj=a("a"),$7o=o("FlaubertForTokenClassification"),k7o=o(" (FlauBERT model)"),S7o=l(),Eb=a("li"),cde=a("strong"),R7o=o("fnet"),B7o=o(" \u2014 "),Nj=a("a"),P7o=o("FNetForTokenClassification"),I7o=o(" (FNet model)"),q7o=l(),Cb=a("li"),fde=a("strong"),N7o=o("funnel"),j7o=o(" \u2014 "),jj=a("a"),D7o=o("FunnelForTokenClassification"),G7o=o(" (Funnel Transformer model)"),O7o=l(),wb=a("li"),mde=a("strong"),V7o=o("gpt2"),X7o=o(" \u2014 "),Dj=a("a"),z7o=o("GPT2ForTokenClassification"),Q7o=o(" (OpenAI GPT-2 model)"),W7o=l(),Ab=a("li"),gde=a("strong"),H7o=o("ibert"),U7o=o(" \u2014 "),Gj=a("a"),J7o=o("IBertForTokenClassification"),Y7o=o(" (I-BERT model)"),K7o=l(),yb=a("li"),hde=a("strong"),Z7o=o("layoutlm"),e9o=o(" \u2014 "),Oj=a("a"),o9o=o("LayoutLMForTokenClassification"),r9o=o(" (LayoutLM model)"),t9o=l(),Lb=a("li"),ude=a("strong"),a9o=o("layoutlmv2"),n9o=o(" \u2014 "),Vj=a("a"),s9o=o("LayoutLMv2ForTokenClassification"),l9o=o(" (LayoutLMv2 model)"),i9o=l(),xb=a("li"),pde=a("strong"),d9o=o("longformer"),c9o=o(" \u2014 "),Xj=a("a"),f9o=o("LongformerForTokenClassification"),m9o=o(" (Longformer model)"),g9o=l(),$b=a("li"),_de=a("strong"),h9o=o("megatron-bert"),u9o=o(" \u2014 "),zj=a("a"),p9o=o("MegatronBertForTokenClassification"),_9o=o(" (MegatronBert model)"),v9o=l(),kb=a("li"),vde=a("strong"),b9o=o("mobilebert"),F9o=o(" \u2014 "),Qj=a("a"),T9o=o("MobileBertForTokenClassification"),M9o=o(" (MobileBERT model)"),E9o=l(),Sb=a("li"),bde=a("strong"),C9o=o("mpnet"),w9o=o(" \u2014 "),Wj=a("a"),A9o=o("MPNetForTokenClassification"),y9o=o(" (MPNet model)"),L9o=l(),Rb=a("li"),Fde=a("strong"),x9o=o("nystromformer"),$9o=o(" \u2014 "),Hj=a("a"),k9o=o("NystromformerForTokenClassification"),S9o=o(" (Nystromformer model)"),R9o=l(),Bb=a("li"),Tde=a("strong"),B9o=o("qdqbert"),P9o=o(" \u2014 "),Uj=a("a"),I9o=o("QDQBertForTokenClassification"),q9o=o(" (QDQBert model)"),N9o=l(),Pb=a("li"),Mde=a("strong"),j9o=o("rembert"),D9o=o(" \u2014 "),Jj=a("a"),G9o=o("RemBertForTokenClassification"),O9o=o(" (RemBERT model)"),V9o=l(),Ib=a("li"),Ede=a("strong"),X9o=o("roberta"),z9o=o(" \u2014 "),Yj=a("a"),Q9o=o("RobertaForTokenClassification"),W9o=o(" (RoBERTa model)"),H9o=l(),qb=a("li"),Cde=a("strong"),U9o=o("roformer"),J9o=o(" \u2014 "),Kj=a("a"),Y9o=o("RoFormerForTokenClassification"),K9o=o(" (RoFormer model)"),Z9o=l(),Nb=a("li"),wde=a("strong"),e$o=o("squeezebert"),o$o=o(" \u2014 "),Zj=a("a"),r$o=o("SqueezeBertForTokenClassification"),t$o=o(" (SqueezeBERT model)"),a$o=l(),jb=a("li"),Ade=a("strong"),n$o=o("xlm"),s$o=o(" \u2014 "),eD=a("a"),l$o=o("XLMForTokenClassification"),i$o=o(" (XLM model)"),d$o=l(),Db=a("li"),yde=a("strong"),c$o=o("xlm-roberta"),f$o=o(" \u2014 "),oD=a("a"),m$o=o("XLMRobertaForTokenClassification"),g$o=o(" (XLM-RoBERTa model)"),h$o=l(),Gb=a("li"),Lde=a("strong"),u$o=o("xlm-roberta-xl"),p$o=o(" \u2014 "),rD=a("a"),_$o=o("XLMRobertaXLForTokenClassification"),v$o=o(" (XLM-RoBERTa-XL model)"),b$o=l(),Ob=a("li"),xde=a("strong"),F$o=o("xlnet"),T$o=o(" \u2014 "),tD=a("a"),M$o=o("XLNetForTokenClassification"),E$o=o(" (XLNet model)"),C$o=l(),Vb=a("li"),$de=a("strong"),w$o=o("yoso"),A$o=o(" \u2014 "),aD=a("a"),y$o=o("YosoForTokenClassification"),L$o=o(" (YOSO model)"),x$o=l(),Xb=a("p"),$$o=o("The model is set in evaluation mode by default using "),kde=a("code"),k$o=o("model.eval()"),S$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),R$o=o("model.train()"),B$o=l(),F(zb.$$.fragment),Oke=l(),Ri=a("h2"),Qb=a("a"),Rde=a("span"),F(e6.$$.fragment),P$o=l(),Bde=a("span"),I$o=o("AutoModelForQuestionAnswering"),Vke=l(),Po=a("div"),F(o6.$$.fragment),q$o=l(),Bi=a("p"),N$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nD=a("a"),j$o=o("from_pretrained()"),D$o=o(" class method or the "),sD=a("a"),G$o=o("from_config()"),O$o=o(` class
method.`),V$o=l(),r6=a("p"),X$o=o("This class cannot be instantiated directly using "),Pde=a("code"),z$o=o("__init__()"),Q$o=o(" (throws an error)."),W$o=l(),lt=a("div"),F(t6.$$.fragment),H$o=l(),Ide=a("p"),U$o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J$o=l(),Pi=a("p"),Y$o=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),K$o=o("not"),Z$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),eko=o("from_pretrained()"),oko=o(" to load the model weights."),rko=l(),F(Wb.$$.fragment),tko=l(),eo=a("div"),F(a6.$$.fragment),ako=l(),Nde=a("p"),nko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sko=l(),ka=a("p"),lko=o("The model class to instantiate is selected based on the "),jde=a("code"),iko=o("model_type"),dko=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),cko=o("pretrained_model_name_or_path"),fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(":"),hko=l(),O=a("ul"),Hb=a("li"),Ode=a("strong"),uko=o("albert"),pko=o(" \u2014 "),iD=a("a"),_ko=o("AlbertForQuestionAnswering"),vko=o(" (ALBERT model)"),bko=l(),Ub=a("li"),Vde=a("strong"),Fko=o("bart"),Tko=o(" \u2014 "),dD=a("a"),Mko=o("BartForQuestionAnswering"),Eko=o(" (BART model)"),Cko=l(),Jb=a("li"),Xde=a("strong"),wko=o("bert"),Ako=o(" \u2014 "),cD=a("a"),yko=o("BertForQuestionAnswering"),Lko=o(" (BERT model)"),xko=l(),Yb=a("li"),zde=a("strong"),$ko=o("big_bird"),kko=o(" \u2014 "),fD=a("a"),Sko=o("BigBirdForQuestionAnswering"),Rko=o(" (BigBird model)"),Bko=l(),Kb=a("li"),Qde=a("strong"),Pko=o("bigbird_pegasus"),Iko=o(" \u2014 "),mD=a("a"),qko=o("BigBirdPegasusForQuestionAnswering"),Nko=o(" (BigBirdPegasus model)"),jko=l(),Zb=a("li"),Wde=a("strong"),Dko=o("camembert"),Gko=o(" \u2014 "),gD=a("a"),Oko=o("CamembertForQuestionAnswering"),Vko=o(" (CamemBERT model)"),Xko=l(),e4=a("li"),Hde=a("strong"),zko=o("canine"),Qko=o(" \u2014 "),hD=a("a"),Wko=o("CanineForQuestionAnswering"),Hko=o(" (Canine model)"),Uko=l(),o4=a("li"),Ude=a("strong"),Jko=o("convbert"),Yko=o(" \u2014 "),uD=a("a"),Kko=o("ConvBertForQuestionAnswering"),Zko=o(" (ConvBERT model)"),eSo=l(),r4=a("li"),Jde=a("strong"),oSo=o("data2vec-text"),rSo=o(" \u2014 "),pD=a("a"),tSo=o("Data2VecTextForQuestionAnswering"),aSo=o(" (Data2VecText model)"),nSo=l(),t4=a("li"),Yde=a("strong"),sSo=o("deberta"),lSo=o(" \u2014 "),_D=a("a"),iSo=o("DebertaForQuestionAnswering"),dSo=o(" (DeBERTa model)"),cSo=l(),a4=a("li"),Kde=a("strong"),fSo=o("deberta-v2"),mSo=o(" \u2014 "),vD=a("a"),gSo=o("DebertaV2ForQuestionAnswering"),hSo=o(" (DeBERTa-v2 model)"),uSo=l(),n4=a("li"),Zde=a("strong"),pSo=o("distilbert"),_So=o(" \u2014 "),bD=a("a"),vSo=o("DistilBertForQuestionAnswering"),bSo=o(" (DistilBERT model)"),FSo=l(),s4=a("li"),ece=a("strong"),TSo=o("electra"),MSo=o(" \u2014 "),FD=a("a"),ESo=o("ElectraForQuestionAnswering"),CSo=o(" (ELECTRA model)"),wSo=l(),l4=a("li"),oce=a("strong"),ASo=o("flaubert"),ySo=o(" \u2014 "),TD=a("a"),LSo=o("FlaubertForQuestionAnsweringSimple"),xSo=o(" (FlauBERT model)"),$So=l(),i4=a("li"),rce=a("strong"),kSo=o("fnet"),SSo=o(" \u2014 "),MD=a("a"),RSo=o("FNetForQuestionAnswering"),BSo=o(" (FNet model)"),PSo=l(),d4=a("li"),tce=a("strong"),ISo=o("funnel"),qSo=o(" \u2014 "),ED=a("a"),NSo=o("FunnelForQuestionAnswering"),jSo=o(" (Funnel Transformer model)"),DSo=l(),c4=a("li"),ace=a("strong"),GSo=o("gptj"),OSo=o(" \u2014 "),CD=a("a"),VSo=o("GPTJForQuestionAnswering"),XSo=o(" (GPT-J model)"),zSo=l(),f4=a("li"),nce=a("strong"),QSo=o("ibert"),WSo=o(" \u2014 "),wD=a("a"),HSo=o("IBertForQuestionAnswering"),USo=o(" (I-BERT model)"),JSo=l(),m4=a("li"),sce=a("strong"),YSo=o("layoutlmv2"),KSo=o(" \u2014 "),AD=a("a"),ZSo=o("LayoutLMv2ForQuestionAnswering"),eRo=o(" (LayoutLMv2 model)"),oRo=l(),g4=a("li"),lce=a("strong"),rRo=o("led"),tRo=o(" \u2014 "),yD=a("a"),aRo=o("LEDForQuestionAnswering"),nRo=o(" (LED model)"),sRo=l(),h4=a("li"),ice=a("strong"),lRo=o("longformer"),iRo=o(" \u2014 "),LD=a("a"),dRo=o("LongformerForQuestionAnswering"),cRo=o(" (Longformer model)"),fRo=l(),u4=a("li"),dce=a("strong"),mRo=o("lxmert"),gRo=o(" \u2014 "),xD=a("a"),hRo=o("LxmertForQuestionAnswering"),uRo=o(" (LXMERT model)"),pRo=l(),p4=a("li"),cce=a("strong"),_Ro=o("mbart"),vRo=o(" \u2014 "),$D=a("a"),bRo=o("MBartForQuestionAnswering"),FRo=o(" (mBART model)"),TRo=l(),_4=a("li"),fce=a("strong"),MRo=o("megatron-bert"),ERo=o(" \u2014 "),kD=a("a"),CRo=o("MegatronBertForQuestionAnswering"),wRo=o(" (MegatronBert model)"),ARo=l(),v4=a("li"),mce=a("strong"),yRo=o("mobilebert"),LRo=o(" \u2014 "),SD=a("a"),xRo=o("MobileBertForQuestionAnswering"),$Ro=o(" (MobileBERT model)"),kRo=l(),b4=a("li"),gce=a("strong"),SRo=o("mpnet"),RRo=o(" \u2014 "),RD=a("a"),BRo=o("MPNetForQuestionAnswering"),PRo=o(" (MPNet model)"),IRo=l(),F4=a("li"),hce=a("strong"),qRo=o("nystromformer"),NRo=o(" \u2014 "),BD=a("a"),jRo=o("NystromformerForQuestionAnswering"),DRo=o(" (Nystromformer model)"),GRo=l(),T4=a("li"),uce=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),PD=a("a"),XRo=o("QDQBertForQuestionAnswering"),zRo=o(" (QDQBert model)"),QRo=l(),M4=a("li"),pce=a("strong"),WRo=o("reformer"),HRo=o(" \u2014 "),ID=a("a"),URo=o("ReformerForQuestionAnswering"),JRo=o(" (Reformer model)"),YRo=l(),E4=a("li"),_ce=a("strong"),KRo=o("rembert"),ZRo=o(" \u2014 "),qD=a("a"),eBo=o("RemBertForQuestionAnswering"),oBo=o(" (RemBERT model)"),rBo=l(),C4=a("li"),vce=a("strong"),tBo=o("roberta"),aBo=o(" \u2014 "),ND=a("a"),nBo=o("RobertaForQuestionAnswering"),sBo=o(" (RoBERTa model)"),lBo=l(),w4=a("li"),bce=a("strong"),iBo=o("roformer"),dBo=o(" \u2014 "),jD=a("a"),cBo=o("RoFormerForQuestionAnswering"),fBo=o(" (RoFormer model)"),mBo=l(),A4=a("li"),Fce=a("strong"),gBo=o("splinter"),hBo=o(" \u2014 "),DD=a("a"),uBo=o("SplinterForQuestionAnswering"),pBo=o(" (Splinter model)"),_Bo=l(),y4=a("li"),Tce=a("strong"),vBo=o("squeezebert"),bBo=o(" \u2014 "),GD=a("a"),FBo=o("SqueezeBertForQuestionAnswering"),TBo=o(" (SqueezeBERT model)"),MBo=l(),L4=a("li"),Mce=a("strong"),EBo=o("xlm"),CBo=o(" \u2014 "),OD=a("a"),wBo=o("XLMForQuestionAnsweringSimple"),ABo=o(" (XLM model)"),yBo=l(),x4=a("li"),Ece=a("strong"),LBo=o("xlm-roberta"),xBo=o(" \u2014 "),VD=a("a"),$Bo=o("XLMRobertaForQuestionAnswering"),kBo=o(" (XLM-RoBERTa model)"),SBo=l(),$4=a("li"),Cce=a("strong"),RBo=o("xlm-roberta-xl"),BBo=o(" \u2014 "),XD=a("a"),PBo=o("XLMRobertaXLForQuestionAnswering"),IBo=o(" (XLM-RoBERTa-XL model)"),qBo=l(),k4=a("li"),wce=a("strong"),NBo=o("xlnet"),jBo=o(" \u2014 "),zD=a("a"),DBo=o("XLNetForQuestionAnsweringSimple"),GBo=o(" (XLNet model)"),OBo=l(),S4=a("li"),Ace=a("strong"),VBo=o("yoso"),XBo=o(" \u2014 "),QD=a("a"),zBo=o("YosoForQuestionAnswering"),QBo=o(" (YOSO model)"),WBo=l(),R4=a("p"),HBo=o("The model is set in evaluation mode by default using "),yce=a("code"),UBo=o("model.eval()"),JBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),YBo=o("model.train()"),KBo=l(),F(B4.$$.fragment),Xke=l(),Ii=a("h2"),P4=a("a"),xce=a("span"),F(n6.$$.fragment),ZBo=l(),$ce=a("span"),ePo=o("AutoModelForTableQuestionAnswering"),zke=l(),Io=a("div"),F(s6.$$.fragment),oPo=l(),qi=a("p"),rPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WD=a("a"),tPo=o("from_pretrained()"),aPo=o(" class method or the "),HD=a("a"),nPo=o("from_config()"),sPo=o(` class
method.`),lPo=l(),l6=a("p"),iPo=o("This class cannot be instantiated directly using "),kce=a("code"),dPo=o("__init__()"),cPo=o(" (throws an error)."),fPo=l(),it=a("div"),F(i6.$$.fragment),mPo=l(),Sce=a("p"),gPo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hPo=l(),Ni=a("p"),uPo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),pPo=o("not"),_Po=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),vPo=o("from_pretrained()"),bPo=o(" to load the model weights."),FPo=l(),F(I4.$$.fragment),TPo=l(),oo=a("div"),F(d6.$$.fragment),MPo=l(),Bce=a("p"),EPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CPo=l(),Sa=a("p"),wPo=o("The model class to instantiate is selected based on the "),Pce=a("code"),APo=o("model_type"),yPo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),LPo=o("pretrained_model_name_or_path"),xPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),$Po=o("pretrained_model_name_or_path"),kPo=o(":"),SPo=l(),Nce=a("ul"),q4=a("li"),jce=a("strong"),RPo=o("tapas"),BPo=o(" \u2014 "),JD=a("a"),PPo=o("TapasForQuestionAnswering"),IPo=o(" (TAPAS model)"),qPo=l(),N4=a("p"),NPo=o("The model is set in evaluation mode by default using "),Dce=a("code"),jPo=o("model.eval()"),DPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),GPo=o("model.train()"),OPo=l(),F(j4.$$.fragment),Qke=l(),ji=a("h2"),D4=a("a"),Oce=a("span"),F(c6.$$.fragment),VPo=l(),Vce=a("span"),XPo=o("AutoModelForImageClassification"),Wke=l(),qo=a("div"),F(f6.$$.fragment),zPo=l(),Di=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YD=a("a"),WPo=o("from_pretrained()"),HPo=o(" class method or the "),KD=a("a"),UPo=o("from_config()"),JPo=o(` class
method.`),YPo=l(),m6=a("p"),KPo=o("This class cannot be instantiated directly using "),Xce=a("code"),ZPo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),dt=a("div"),F(g6.$$.fragment),rIo=l(),zce=a("p"),tIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aIo=l(),Gi=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(G4.$$.fragment),fIo=l(),ro=a("div"),F(h6.$$.fragment),mIo=l(),Wce=a("p"),gIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hIo=l(),Ra=a("p"),uIo=o("The model class to instantiate is selected based on the "),Hce=a("code"),pIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),Uce=a("code"),vIo=o("pretrained_model_name_or_path"),bIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),Fe=a("ul"),O4=a("li"),Yce=a("strong"),EIo=o("beit"),CIo=o(" \u2014 "),eG=a("a"),wIo=o("BeitForImageClassification"),AIo=o(" (BEiT model)"),yIo=l(),V4=a("li"),Kce=a("strong"),LIo=o("convnext"),xIo=o(" \u2014 "),oG=a("a"),$Io=o("ConvNextForImageClassification"),kIo=o(" (ConvNext model)"),SIo=l(),bs=a("li"),Zce=a("strong"),RIo=o("deit"),BIo=o(" \u2014 "),rG=a("a"),PIo=o("DeiTForImageClassification"),IIo=o(" or "),tG=a("a"),qIo=o("DeiTForImageClassificationWithTeacher"),NIo=o(" (DeiT model)"),jIo=l(),X4=a("li"),efe=a("strong"),DIo=o("imagegpt"),GIo=o(" \u2014 "),aG=a("a"),OIo=o("ImageGPTForImageClassification"),VIo=o(" (ImageGPT model)"),XIo=l(),ct=a("li"),ofe=a("strong"),zIo=o("perceiver"),QIo=o(" \u2014 "),nG=a("a"),WIo=o("PerceiverForImageClassificationLearned"),HIo=o(" or "),sG=a("a"),UIo=o("PerceiverForImageClassificationFourier"),JIo=o(" or "),lG=a("a"),YIo=o("PerceiverForImageClassificationConvProcessing"),KIo=o(" (Perceiver model)"),ZIo=l(),z4=a("li"),rfe=a("strong"),eqo=o("poolformer"),oqo=o(" \u2014 "),iG=a("a"),rqo=o("PoolFormerForImageClassification"),tqo=o(" (PoolFormer model)"),aqo=l(),Q4=a("li"),tfe=a("strong"),nqo=o("resnet"),sqo=o(" \u2014 "),dG=a("a"),lqo=o("ResNetForImageClassification"),iqo=o(" (ResNet model)"),dqo=l(),W4=a("li"),afe=a("strong"),cqo=o("segformer"),fqo=o(" \u2014 "),cG=a("a"),mqo=o("SegformerForImageClassification"),gqo=o(" (SegFormer model)"),hqo=l(),H4=a("li"),nfe=a("strong"),uqo=o("swin"),pqo=o(" \u2014 "),fG=a("a"),_qo=o("SwinForImageClassification"),vqo=o(" (Swin model)"),bqo=l(),U4=a("li"),sfe=a("strong"),Fqo=o("van"),Tqo=o(" \u2014 "),mG=a("a"),Mqo=o("VanForImageClassification"),Eqo=o(" (VAN model)"),Cqo=l(),J4=a("li"),lfe=a("strong"),wqo=o("vit"),Aqo=o(" \u2014 "),gG=a("a"),yqo=o("ViTForImageClassification"),Lqo=o(" (ViT model)"),xqo=l(),Y4=a("p"),$qo=o("The model is set in evaluation mode by default using "),ife=a("code"),kqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),Rqo=o("model.train()"),Bqo=l(),F(K4.$$.fragment),Hke=l(),Oi=a("h2"),Z4=a("a"),cfe=a("span"),F(u6.$$.fragment),Pqo=l(),ffe=a("span"),Iqo=o("AutoModelForVision2Seq"),Uke=l(),No=a("div"),F(p6.$$.fragment),qqo=l(),Vi=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hG=a("a"),jqo=o("from_pretrained()"),Dqo=o(" class method or the "),uG=a("a"),Gqo=o("from_config()"),Oqo=o(` class
method.`),Vqo=l(),_6=a("p"),Xqo=o("This class cannot be instantiated directly using "),mfe=a("code"),zqo=o("__init__()"),Qqo=o(" (throws an error)."),Wqo=l(),ft=a("div"),F(v6.$$.fragment),Hqo=l(),gfe=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jqo=l(),Xi=a("p"),Yqo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),Kqo=o("not"),Zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),eNo=o("from_pretrained()"),oNo=o(" to load the model weights."),rNo=l(),F(e2.$$.fragment),tNo=l(),to=a("div"),F(b6.$$.fragment),aNo=l(),ufe=a("p"),nNo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sNo=l(),Ba=a("p"),lNo=o("The model class to instantiate is selected based on the "),pfe=a("code"),iNo=o("model_type"),dNo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),mNo=o("pretrained_model_name_or_path"),gNo=o(":"),hNo=l(),bfe=a("ul"),o2=a("li"),Ffe=a("strong"),uNo=o("vision-encoder-decoder"),pNo=o(" \u2014 "),_G=a("a"),_No=o("VisionEncoderDecoderModel"),vNo=o(" (Vision Encoder decoder model)"),bNo=l(),r2=a("p"),FNo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),TNo=o("model.eval()"),MNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),ENo=o("model.train()"),CNo=l(),F(t2.$$.fragment),Jke=l(),zi=a("h2"),a2=a("a"),Efe=a("span"),F(F6.$$.fragment),wNo=l(),Cfe=a("span"),ANo=o("AutoModelForAudioClassification"),Yke=l(),jo=a("div"),F(T6.$$.fragment),yNo=l(),Qi=a("p"),LNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vG=a("a"),xNo=o("from_pretrained()"),$No=o(" class method or the "),bG=a("a"),kNo=o("from_config()"),SNo=o(` class
method.`),RNo=l(),M6=a("p"),BNo=o("This class cannot be instantiated directly using "),wfe=a("code"),PNo=o("__init__()"),INo=o(" (throws an error)."),qNo=l(),mt=a("div"),F(E6.$$.fragment),NNo=l(),Afe=a("p"),jNo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),DNo=l(),Wi=a("p"),GNo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),ONo=o("not"),VNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),XNo=o("from_pretrained()"),zNo=o(" to load the model weights."),QNo=l(),F(n2.$$.fragment),WNo=l(),ao=a("div"),F(C6.$$.fragment),HNo=l(),Lfe=a("p"),UNo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),JNo=l(),Pa=a("p"),YNo=o("The model class to instantiate is selected based on the "),xfe=a("code"),KNo=o("model_type"),ZNo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),ejo=o("pretrained_model_name_or_path"),ojo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),rjo=o("pretrained_model_name_or_path"),tjo=o(":"),ajo=l(),Ie=a("ul"),s2=a("li"),Sfe=a("strong"),njo=o("data2vec-audio"),sjo=o(" \u2014 "),TG=a("a"),ljo=o("Data2VecAudioForSequenceClassification"),ijo=o(" (Data2VecAudio model)"),djo=l(),l2=a("li"),Rfe=a("strong"),cjo=o("hubert"),fjo=o(" \u2014 "),MG=a("a"),mjo=o("HubertForSequenceClassification"),gjo=o(" (Hubert model)"),hjo=l(),i2=a("li"),Bfe=a("strong"),ujo=o("sew"),pjo=o(" \u2014 "),EG=a("a"),_jo=o("SEWForSequenceClassification"),vjo=o(" (SEW model)"),bjo=l(),d2=a("li"),Pfe=a("strong"),Fjo=o("sew-d"),Tjo=o(" \u2014 "),CG=a("a"),Mjo=o("SEWDForSequenceClassification"),Ejo=o(" (SEW-D model)"),Cjo=l(),c2=a("li"),Ife=a("strong"),wjo=o("unispeech"),Ajo=o(" \u2014 "),wG=a("a"),yjo=o("UniSpeechForSequenceClassification"),Ljo=o(" (UniSpeech model)"),xjo=l(),f2=a("li"),qfe=a("strong"),$jo=o("unispeech-sat"),kjo=o(" \u2014 "),AG=a("a"),Sjo=o("UniSpeechSatForSequenceClassification"),Rjo=o(" (UniSpeechSat model)"),Bjo=l(),m2=a("li"),Nfe=a("strong"),Pjo=o("wav2vec2"),Ijo=o(" \u2014 "),yG=a("a"),qjo=o("Wav2Vec2ForSequenceClassification"),Njo=o(" (Wav2Vec2 model)"),jjo=l(),g2=a("li"),jfe=a("strong"),Djo=o("wavlm"),Gjo=o(" \u2014 "),LG=a("a"),Ojo=o("WavLMForSequenceClassification"),Vjo=o(" (WavLM model)"),Xjo=l(),h2=a("p"),zjo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),Qjo=o("model.eval()"),Wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),Hjo=o("model.train()"),Ujo=l(),F(u2.$$.fragment),Kke=l(),Hi=a("h2"),p2=a("a"),Ofe=a("span"),F(w6.$$.fragment),Jjo=l(),Vfe=a("span"),Yjo=o("AutoModelForAudioFrameClassification"),Zke=l(),Do=a("div"),F(A6.$$.fragment),Kjo=l(),Ui=a("p"),Zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xG=a("a"),eDo=o("from_pretrained()"),oDo=o(" class method or the "),$G=a("a"),rDo=o("from_config()"),tDo=o(` class
method.`),aDo=l(),y6=a("p"),nDo=o("This class cannot be instantiated directly using "),Xfe=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),gt=a("div"),F(L6.$$.fragment),dDo=l(),zfe=a("p"),cDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fDo=l(),Ji=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),Qfe=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),uDo=o("from_pretrained()"),pDo=o(" to load the model weights."),_Do=l(),F(_2.$$.fragment),vDo=l(),no=a("div"),F(x6.$$.fragment),bDo=l(),Wfe=a("p"),FDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TDo=l(),Ia=a("p"),MDo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),EDo=o("model_type"),CDo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),wDo=o("pretrained_model_name_or_path"),ADo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),yDo=o("pretrained_model_name_or_path"),LDo=o(":"),xDo=l(),qa=a("ul"),v2=a("li"),Yfe=a("strong"),$Do=o("data2vec-audio"),kDo=o(" \u2014 "),SG=a("a"),SDo=o("Data2VecAudioForAudioFrameClassification"),RDo=o(" (Data2VecAudio model)"),BDo=l(),b2=a("li"),Kfe=a("strong"),PDo=o("unispeech-sat"),IDo=o(" \u2014 "),RG=a("a"),qDo=o("UniSpeechSatForAudioFrameClassification"),NDo=o(" (UniSpeechSat model)"),jDo=l(),F2=a("li"),Zfe=a("strong"),DDo=o("wav2vec2"),GDo=o(" \u2014 "),BG=a("a"),ODo=o("Wav2Vec2ForAudioFrameClassification"),VDo=o(" (Wav2Vec2 model)"),XDo=l(),T2=a("li"),eme=a("strong"),zDo=o("wavlm"),QDo=o(" \u2014 "),PG=a("a"),WDo=o("WavLMForAudioFrameClassification"),HDo=o(" (WavLM model)"),UDo=l(),M2=a("p"),JDo=o("The model is set in evaluation mode by default using "),ome=a("code"),YDo=o("model.eval()"),KDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),ZDo=o("model.train()"),eGo=l(),F(E2.$$.fragment),eSe=l(),Yi=a("h2"),C2=a("a"),tme=a("span"),F($6.$$.fragment),oGo=l(),ame=a("span"),rGo=o("AutoModelForCTC"),oSe=l(),Go=a("div"),F(k6.$$.fragment),tGo=l(),Ki=a("p"),aGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IG=a("a"),nGo=o("from_pretrained()"),sGo=o(" class method or the "),qG=a("a"),lGo=o("from_config()"),iGo=o(` class
method.`),dGo=l(),S6=a("p"),cGo=o("This class cannot be instantiated directly using "),nme=a("code"),fGo=o("__init__()"),mGo=o(" (throws an error)."),gGo=l(),ht=a("div"),F(R6.$$.fragment),hGo=l(),sme=a("p"),uGo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pGo=l(),Zi=a("p"),_Go=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),vGo=o("not"),bGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),FGo=o("from_pretrained()"),TGo=o(" to load the model weights."),MGo=l(),F(w2.$$.fragment),EGo=l(),so=a("div"),F(B6.$$.fragment),CGo=l(),ime=a("p"),wGo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),AGo=l(),Na=a("p"),yGo=o("The model class to instantiate is selected based on the "),dme=a("code"),LGo=o("model_type"),xGo=o(` property of the config object (either
passed as an argument or loaded from `),cme=a("code"),$Go=o("pretrained_model_name_or_path"),kGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=a("code"),SGo=o("pretrained_model_name_or_path"),RGo=o(":"),BGo=l(),qe=a("ul"),A2=a("li"),mme=a("strong"),PGo=o("data2vec-audio"),IGo=o(" \u2014 "),jG=a("a"),qGo=o("Data2VecAudioForCTC"),NGo=o(" (Data2VecAudio model)"),jGo=l(),y2=a("li"),gme=a("strong"),DGo=o("hubert"),GGo=o(" \u2014 "),DG=a("a"),OGo=o("HubertForCTC"),VGo=o(" (Hubert model)"),XGo=l(),L2=a("li"),hme=a("strong"),zGo=o("sew"),QGo=o(" \u2014 "),GG=a("a"),WGo=o("SEWForCTC"),HGo=o(" (SEW model)"),UGo=l(),x2=a("li"),ume=a("strong"),JGo=o("sew-d"),YGo=o(" \u2014 "),OG=a("a"),KGo=o("SEWDForCTC"),ZGo=o(" (SEW-D model)"),eOo=l(),$2=a("li"),pme=a("strong"),oOo=o("unispeech"),rOo=o(" \u2014 "),VG=a("a"),tOo=o("UniSpeechForCTC"),aOo=o(" (UniSpeech model)"),nOo=l(),k2=a("li"),_me=a("strong"),sOo=o("unispeech-sat"),lOo=o(" \u2014 "),XG=a("a"),iOo=o("UniSpeechSatForCTC"),dOo=o(" (UniSpeechSat model)"),cOo=l(),S2=a("li"),vme=a("strong"),fOo=o("wav2vec2"),mOo=o(" \u2014 "),zG=a("a"),gOo=o("Wav2Vec2ForCTC"),hOo=o(" (Wav2Vec2 model)"),uOo=l(),R2=a("li"),bme=a("strong"),pOo=o("wavlm"),_Oo=o(" \u2014 "),QG=a("a"),vOo=o("WavLMForCTC"),bOo=o(" (WavLM model)"),FOo=l(),B2=a("p"),TOo=o("The model is set in evaluation mode by default using "),Fme=a("code"),MOo=o("model.eval()"),EOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),COo=o("model.train()"),wOo=l(),F(P2.$$.fragment),rSe=l(),ed=a("h2"),I2=a("a"),Mme=a("span"),F(P6.$$.fragment),AOo=l(),Eme=a("span"),yOo=o("AutoModelForSpeechSeq2Seq"),tSe=l(),Oo=a("div"),F(I6.$$.fragment),LOo=l(),od=a("p"),xOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WG=a("a"),$Oo=o("from_pretrained()"),kOo=o(" class method or the "),HG=a("a"),SOo=o("from_config()"),ROo=o(` class
method.`),BOo=l(),q6=a("p"),POo=o("This class cannot be instantiated directly using "),Cme=a("code"),IOo=o("__init__()"),qOo=o(" (throws an error)."),NOo=l(),ut=a("div"),F(N6.$$.fragment),jOo=l(),wme=a("p"),DOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GOo=l(),rd=a("p"),OOo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),VOo=o("not"),XOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),zOo=o("from_pretrained()"),QOo=o(" to load the model weights."),WOo=l(),F(q2.$$.fragment),HOo=l(),lo=a("div"),F(j6.$$.fragment),UOo=l(),yme=a("p"),JOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YOo=l(),ja=a("p"),KOo=o("The model class to instantiate is selected based on the "),Lme=a("code"),ZOo=o("model_type"),eVo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),oVo=o("pretrained_model_name_or_path"),rVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),tVo=o("pretrained_model_name_or_path"),aVo=o(":"),nVo=l(),D6=a("ul"),N2=a("li"),kme=a("strong"),sVo=o("speech-encoder-decoder"),lVo=o(" \u2014 "),JG=a("a"),iVo=o("SpeechEncoderDecoderModel"),dVo=o(" (Speech Encoder decoder model)"),cVo=l(),j2=a("li"),Sme=a("strong"),fVo=o("speech_to_text"),mVo=o(" \u2014 "),YG=a("a"),gVo=o("Speech2TextForConditionalGeneration"),hVo=o(" (Speech2Text model)"),uVo=l(),D2=a("p"),pVo=o("The model is set in evaluation mode by default using "),Rme=a("code"),_Vo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),bVo=o("model.train()"),FVo=l(),F(G2.$$.fragment),aSe=l(),td=a("h2"),O2=a("a"),Pme=a("span"),F(G6.$$.fragment),TVo=l(),Ime=a("span"),MVo=o("AutoModelForAudioXVector"),nSe=l(),Vo=a("div"),F(O6.$$.fragment),EVo=l(),ad=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KG=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),ZG=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),V6=a("p"),$Vo=o("This class cannot be instantiated directly using "),qme=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),pt=a("div"),F(X6.$$.fragment),BVo=l(),Nme=a("p"),PVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),IVo=l(),nd=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(V2.$$.fragment),VVo=l(),io=a("div"),F(z6.$$.fragment),XVo=l(),Dme=a("p"),zVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),QVo=l(),Da=a("p"),WVo=o("The model class to instantiate is selected based on the "),Gme=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),Ga=a("ul"),X2=a("li"),Xme=a("strong"),oXo=o("data2vec-audio"),rXo=o(" \u2014 "),oO=a("a"),tXo=o("Data2VecAudioForXVector"),aXo=o(" (Data2VecAudio model)"),nXo=l(),z2=a("li"),zme=a("strong"),sXo=o("unispeech-sat"),lXo=o(" \u2014 "),rO=a("a"),iXo=o("UniSpeechSatForXVector"),dXo=o(" (UniSpeechSat model)"),cXo=l(),Q2=a("li"),Qme=a("strong"),fXo=o("wav2vec2"),mXo=o(" \u2014 "),tO=a("a"),gXo=o("Wav2Vec2ForXVector"),hXo=o(" (Wav2Vec2 model)"),uXo=l(),W2=a("li"),Wme=a("strong"),pXo=o("wavlm"),_Xo=o(" \u2014 "),aO=a("a"),vXo=o("WavLMForXVector"),bXo=o(" (WavLM model)"),FXo=l(),H2=a("p"),TXo=o("The model is set in evaluation mode by default using "),Hme=a("code"),MXo=o("model.eval()"),EXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),CXo=o("model.train()"),wXo=l(),F(U2.$$.fragment),sSe=l(),sd=a("h2"),J2=a("a"),Jme=a("span"),F(Q6.$$.fragment),AXo=l(),Yme=a("span"),yXo=o("AutoModelForMaskedImageModeling"),lSe=l(),Xo=a("div"),F(W6.$$.fragment),LXo=l(),ld=a("p"),xXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nO=a("a"),$Xo=o("from_pretrained()"),kXo=o(" class method or the "),sO=a("a"),SXo=o("from_config()"),RXo=o(` class
method.`),BXo=l(),H6=a("p"),PXo=o("This class cannot be instantiated directly using "),Kme=a("code"),IXo=o("__init__()"),qXo=o(" (throws an error)."),NXo=l(),_t=a("div"),F(U6.$$.fragment),jXo=l(),Zme=a("p"),DXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GXo=l(),id=a("p"),OXo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),VXo=o("not"),XXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),zXo=o("from_pretrained()"),QXo=o(" to load the model weights."),WXo=l(),F(Y2.$$.fragment),HXo=l(),co=a("div"),F(J6.$$.fragment),UXo=l(),oge=a("p"),JXo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),YXo=l(),Oa=a("p"),KXo=o("The model class to instantiate is selected based on the "),rge=a("code"),ZXo=o("model_type"),ezo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(":"),nzo=l(),dd=a("ul"),K2=a("li"),nge=a("strong"),szo=o("deit"),lzo=o(" \u2014 "),iO=a("a"),izo=o("DeiTForMaskedImageModeling"),dzo=o(" (DeiT model)"),czo=l(),Z2=a("li"),sge=a("strong"),fzo=o("swin"),mzo=o(" \u2014 "),dO=a("a"),gzo=o("SwinForMaskedImageModeling"),hzo=o(" (Swin model)"),uzo=l(),eF=a("li"),lge=a("strong"),pzo=o("vit"),_zo=o(" \u2014 "),cO=a("a"),vzo=o("ViTForMaskedImageModeling"),bzo=o(" (ViT model)"),Fzo=l(),oF=a("p"),Tzo=o("The model is set in evaluation mode by default using "),ige=a("code"),Mzo=o("model.eval()"),Ezo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),Czo=o("model.train()"),wzo=l(),F(rF.$$.fragment),iSe=l(),cd=a("h2"),tF=a("a"),cge=a("span"),F(Y6.$$.fragment),Azo=l(),fge=a("span"),yzo=o("AutoModelForObjectDetection"),dSe=l(),zo=a("div"),F(K6.$$.fragment),Lzo=l(),fd=a("p"),xzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fO=a("a"),$zo=o("from_pretrained()"),kzo=o(" class method or the "),mO=a("a"),Szo=o("from_config()"),Rzo=o(` class
method.`),Bzo=l(),Z6=a("p"),Pzo=o("This class cannot be instantiated directly using "),mge=a("code"),Izo=o("__init__()"),qzo=o(" (throws an error)."),Nzo=l(),vt=a("div"),F(ey.$$.fragment),jzo=l(),gge=a("p"),Dzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Gzo=l(),md=a("p"),Ozo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),Vzo=o("not"),Xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),zzo=o("from_pretrained()"),Qzo=o(" to load the model weights."),Wzo=l(),F(aF.$$.fragment),Hzo=l(),fo=a("div"),F(oy.$$.fragment),Uzo=l(),uge=a("p"),Jzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Yzo=l(),Va=a("p"),Kzo=o("The model class to instantiate is selected based on the "),pge=a("code"),Zzo=o("model_type"),eQo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(":"),nQo=l(),bge=a("ul"),nF=a("li"),Fge=a("strong"),sQo=o("detr"),lQo=o(" \u2014 "),hO=a("a"),iQo=o("DetrForObjectDetection"),dQo=o(" (DETR model)"),cQo=l(),sF=a("p"),fQo=o("The model is set in evaluation mode by default using "),Tge=a("code"),mQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),hQo=o("model.train()"),uQo=l(),F(lF.$$.fragment),cSe=l(),gd=a("h2"),iF=a("a"),Ege=a("span"),F(ry.$$.fragment),pQo=l(),Cge=a("span"),_Qo=o("AutoModelForImageSegmentation"),fSe=l(),Qo=a("div"),F(ty.$$.fragment),vQo=l(),hd=a("p"),bQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uO=a("a"),FQo=o("from_pretrained()"),TQo=o(" class method or the "),pO=a("a"),MQo=o("from_config()"),EQo=o(` class
method.`),CQo=l(),ay=a("p"),wQo=o("This class cannot be instantiated directly using "),wge=a("code"),AQo=o("__init__()"),yQo=o(" (throws an error)."),LQo=l(),bt=a("div"),F(ny.$$.fragment),xQo=l(),Age=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kQo=l(),ud=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),RQo=o("not"),BQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),PQo=o("from_pretrained()"),IQo=o(" to load the model weights."),qQo=l(),F(dF.$$.fragment),NQo=l(),mo=a("div"),F(sy.$$.fragment),jQo=l(),Lge=a("p"),DQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),GQo=l(),Xa=a("p"),OQo=o("The model class to instantiate is selected based on the "),xge=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),WQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),Sge=a("ul"),cF=a("li"),Rge=a("strong"),JQo=o("detr"),YQo=o(" \u2014 "),vO=a("a"),KQo=o("DetrForSegmentation"),ZQo=o(" (DETR model)"),eWo=l(),fF=a("p"),oWo=o("The model is set in evaluation mode by default using "),Bge=a("code"),rWo=o("model.eval()"),tWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),aWo=o("model.train()"),nWo=l(),F(mF.$$.fragment),mSe=l(),pd=a("h2"),gF=a("a"),Ige=a("span"),F(ly.$$.fragment),sWo=l(),qge=a("span"),lWo=o("AutoModelForSemanticSegmentation"),gSe=l(),Wo=a("div"),F(iy.$$.fragment),iWo=l(),_d=a("p"),dWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bO=a("a"),cWo=o("from_pretrained()"),fWo=o(" class method or the "),FO=a("a"),mWo=o("from_config()"),gWo=o(` class
method.`),hWo=l(),dy=a("p"),uWo=o("This class cannot be instantiated directly using "),Nge=a("code"),pWo=o("__init__()"),_Wo=o(" (throws an error)."),vWo=l(),Ft=a("div"),F(cy.$$.fragment),bWo=l(),jge=a("p"),FWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),TWo=l(),vd=a("p"),MWo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),EWo=o("not"),CWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),wWo=o("from_pretrained()"),AWo=o(" to load the model weights."),yWo=l(),F(hF.$$.fragment),LWo=l(),go=a("div"),F(fy.$$.fragment),xWo=l(),Gge=a("p"),$Wo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kWo=l(),za=a("p"),SWo=o("The model class to instantiate is selected based on the "),Oge=a("code"),RWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),PWo=o("pretrained_model_name_or_path"),IWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),qWo=o("pretrained_model_name_or_path"),NWo=o(":"),jWo=l(),bd=a("ul"),uF=a("li"),zge=a("strong"),DWo=o("beit"),GWo=o(" \u2014 "),MO=a("a"),OWo=o("BeitForSemanticSegmentation"),VWo=o(" (BEiT model)"),XWo=l(),pF=a("li"),Qge=a("strong"),zWo=o("dpt"),QWo=o(" \u2014 "),EO=a("a"),WWo=o("DPTForSemanticSegmentation"),HWo=o(" (DPT model)"),UWo=l(),_F=a("li"),Wge=a("strong"),JWo=o("segformer"),YWo=o(" \u2014 "),CO=a("a"),KWo=o("SegformerForSemanticSegmentation"),ZWo=o(" (SegFormer model)"),eHo=l(),vF=a("p"),oHo=o("The model is set in evaluation mode by default using "),Hge=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),aHo=o("model.train()"),nHo=l(),F(bF.$$.fragment),hSe=l(),Fd=a("h2"),FF=a("a"),Jge=a("span"),F(my.$$.fragment),sHo=l(),Yge=a("span"),lHo=o("AutoModelForInstanceSegmentation"),uSe=l(),Ho=a("div"),F(gy.$$.fragment),iHo=l(),Td=a("p"),dHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wO=a("a"),cHo=o("from_pretrained()"),fHo=o(" class method or the "),AO=a("a"),mHo=o("from_config()"),gHo=o(` class
method.`),hHo=l(),hy=a("p"),uHo=o("This class cannot be instantiated directly using "),Kge=a("code"),pHo=o("__init__()"),_Ho=o(" (throws an error)."),vHo=l(),Tt=a("div"),F(uy.$$.fragment),bHo=l(),Zge=a("p"),FHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),THo=l(),Md=a("p"),MHo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),EHo=o("not"),CHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),wHo=o("from_pretrained()"),AHo=o(" to load the model weights."),yHo=l(),F(TF.$$.fragment),LHo=l(),ho=a("div"),F(py.$$.fragment),xHo=l(),ohe=a("p"),$Ho=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kHo=l(),Qa=a("p"),SHo=o("The model class to instantiate is selected based on the "),rhe=a("code"),RHo=o("model_type"),BHo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),PHo=o("pretrained_model_name_or_path"),IHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),qHo=o("pretrained_model_name_or_path"),NHo=o(":"),jHo=l(),nhe=a("ul"),MF=a("li"),she=a("strong"),DHo=o("maskformer"),GHo=o(" \u2014 "),LO=a("a"),OHo=o("MaskFormerForInstanceSegmentation"),VHo=o(" (MaskFormer model)"),XHo=l(),EF=a("p"),zHo=o("The model is set in evaluation mode by default using "),lhe=a("code"),QHo=o("model.eval()"),WHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),HHo=o("model.train()"),UHo=l(),F(CF.$$.fragment),pSe=l(),Ed=a("h2"),wF=a("a"),dhe=a("span"),F(_y.$$.fragment),JHo=l(),che=a("span"),YHo=o("TFAutoModel"),_Se=l(),Uo=a("div"),F(vy.$$.fragment),KHo=l(),Cd=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xO=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),$O=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),by=a("p"),nUo=o("This class cannot be instantiated directly using "),fhe=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),Mt=a("div"),F(Fy.$$.fragment),dUo=l(),mhe=a("p"),cUo=o("Instantiates one of the base model classes of the library from a configuration."),fUo=l(),wd=a("p"),mUo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=a("a"),uUo=o("from_pretrained()"),pUo=o(" to load the model weights."),_Uo=l(),F(AF.$$.fragment),vUo=l(),Mr=a("div"),F(Ty.$$.fragment),bUo=l(),hhe=a("p"),FUo=o("Instantiate one of the base model classes of the library from a pretrained model."),TUo=l(),Wa=a("p"),MUo=o("The model class to instantiate is selected based on the "),uhe=a("code"),EUo=o("model_type"),CUo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(":"),xUo=l(),j=a("ul"),yF=a("li"),vhe=a("strong"),$Uo=o("albert"),kUo=o(" \u2014 "),SO=a("a"),SUo=o("TFAlbertModel"),RUo=o(" (ALBERT model)"),BUo=l(),LF=a("li"),bhe=a("strong"),PUo=o("bart"),IUo=o(" \u2014 "),RO=a("a"),qUo=o("TFBartModel"),NUo=o(" (BART model)"),jUo=l(),xF=a("li"),Fhe=a("strong"),DUo=o("bert"),GUo=o(" \u2014 "),BO=a("a"),OUo=o("TFBertModel"),VUo=o(" (BERT model)"),XUo=l(),$F=a("li"),The=a("strong"),zUo=o("blenderbot"),QUo=o(" \u2014 "),PO=a("a"),WUo=o("TFBlenderbotModel"),HUo=o(" (Blenderbot model)"),UUo=l(),kF=a("li"),Mhe=a("strong"),JUo=o("blenderbot-small"),YUo=o(" \u2014 "),IO=a("a"),KUo=o("TFBlenderbotSmallModel"),ZUo=o(" (BlenderbotSmall model)"),eJo=l(),SF=a("li"),Ehe=a("strong"),oJo=o("camembert"),rJo=o(" \u2014 "),qO=a("a"),tJo=o("TFCamembertModel"),aJo=o(" (CamemBERT model)"),nJo=l(),RF=a("li"),Che=a("strong"),sJo=o("clip"),lJo=o(" \u2014 "),NO=a("a"),iJo=o("TFCLIPModel"),dJo=o(" (CLIP model)"),cJo=l(),BF=a("li"),whe=a("strong"),fJo=o("convbert"),mJo=o(" \u2014 "),jO=a("a"),gJo=o("TFConvBertModel"),hJo=o(" (ConvBERT model)"),uJo=l(),PF=a("li"),Ahe=a("strong"),pJo=o("convnext"),_Jo=o(" \u2014 "),DO=a("a"),vJo=o("TFConvNextModel"),bJo=o(" (ConvNext model)"),FJo=l(),IF=a("li"),yhe=a("strong"),TJo=o("ctrl"),MJo=o(" \u2014 "),GO=a("a"),EJo=o("TFCTRLModel"),CJo=o(" (CTRL model)"),wJo=l(),qF=a("li"),Lhe=a("strong"),AJo=o("deberta"),yJo=o(" \u2014 "),OO=a("a"),LJo=o("TFDebertaModel"),xJo=o(" (DeBERTa model)"),$Jo=l(),NF=a("li"),xhe=a("strong"),kJo=o("deberta-v2"),SJo=o(" \u2014 "),VO=a("a"),RJo=o("TFDebertaV2Model"),BJo=o(" (DeBERTa-v2 model)"),PJo=l(),jF=a("li"),$he=a("strong"),IJo=o("distilbert"),qJo=o(" \u2014 "),XO=a("a"),NJo=o("TFDistilBertModel"),jJo=o(" (DistilBERT model)"),DJo=l(),DF=a("li"),khe=a("strong"),GJo=o("dpr"),OJo=o(" \u2014 "),zO=a("a"),VJo=o("TFDPRQuestionEncoder"),XJo=o(" (DPR model)"),zJo=l(),GF=a("li"),She=a("strong"),QJo=o("electra"),WJo=o(" \u2014 "),QO=a("a"),HJo=o("TFElectraModel"),UJo=o(" (ELECTRA model)"),JJo=l(),OF=a("li"),Rhe=a("strong"),YJo=o("flaubert"),KJo=o(" \u2014 "),WO=a("a"),ZJo=o("TFFlaubertModel"),eYo=o(" (FlauBERT model)"),oYo=l(),Fs=a("li"),Bhe=a("strong"),rYo=o("funnel"),tYo=o(" \u2014 "),HO=a("a"),aYo=o("TFFunnelModel"),nYo=o(" or "),UO=a("a"),sYo=o("TFFunnelBaseModel"),lYo=o(" (Funnel Transformer model)"),iYo=l(),VF=a("li"),Phe=a("strong"),dYo=o("gpt2"),cYo=o(" \u2014 "),JO=a("a"),fYo=o("TFGPT2Model"),mYo=o(" (OpenAI GPT-2 model)"),gYo=l(),XF=a("li"),Ihe=a("strong"),hYo=o("gptj"),uYo=o(" \u2014 "),YO=a("a"),pYo=o("TFGPTJModel"),_Yo=o(" (GPT-J model)"),vYo=l(),zF=a("li"),qhe=a("strong"),bYo=o("hubert"),FYo=o(" \u2014 "),KO=a("a"),TYo=o("TFHubertModel"),MYo=o(" (Hubert model)"),EYo=l(),QF=a("li"),Nhe=a("strong"),CYo=o("layoutlm"),wYo=o(" \u2014 "),ZO=a("a"),AYo=o("TFLayoutLMModel"),yYo=o(" (LayoutLM model)"),LYo=l(),WF=a("li"),jhe=a("strong"),xYo=o("led"),$Yo=o(" \u2014 "),eV=a("a"),kYo=o("TFLEDModel"),SYo=o(" (LED model)"),RYo=l(),HF=a("li"),Dhe=a("strong"),BYo=o("longformer"),PYo=o(" \u2014 "),oV=a("a"),IYo=o("TFLongformerModel"),qYo=o(" (Longformer model)"),NYo=l(),UF=a("li"),Ghe=a("strong"),jYo=o("lxmert"),DYo=o(" \u2014 "),rV=a("a"),GYo=o("TFLxmertModel"),OYo=o(" (LXMERT model)"),VYo=l(),JF=a("li"),Ohe=a("strong"),XYo=o("marian"),zYo=o(" \u2014 "),tV=a("a"),QYo=o("TFMarianModel"),WYo=o(" (Marian model)"),HYo=l(),YF=a("li"),Vhe=a("strong"),UYo=o("mbart"),JYo=o(" \u2014 "),aV=a("a"),YYo=o("TFMBartModel"),KYo=o(" (mBART model)"),ZYo=l(),KF=a("li"),Xhe=a("strong"),eKo=o("mobilebert"),oKo=o(" \u2014 "),nV=a("a"),rKo=o("TFMobileBertModel"),tKo=o(" (MobileBERT model)"),aKo=l(),ZF=a("li"),zhe=a("strong"),nKo=o("mpnet"),sKo=o(" \u2014 "),sV=a("a"),lKo=o("TFMPNetModel"),iKo=o(" (MPNet model)"),dKo=l(),e0=a("li"),Qhe=a("strong"),cKo=o("mt5"),fKo=o(" \u2014 "),lV=a("a"),mKo=o("TFMT5Model"),gKo=o(" (mT5 model)"),hKo=l(),o0=a("li"),Whe=a("strong"),uKo=o("openai-gpt"),pKo=o(" \u2014 "),iV=a("a"),_Ko=o("TFOpenAIGPTModel"),vKo=o(" (OpenAI GPT model)"),bKo=l(),r0=a("li"),Hhe=a("strong"),FKo=o("pegasus"),TKo=o(" \u2014 "),dV=a("a"),MKo=o("TFPegasusModel"),EKo=o(" (Pegasus model)"),CKo=l(),t0=a("li"),Uhe=a("strong"),wKo=o("rembert"),AKo=o(" \u2014 "),cV=a("a"),yKo=o("TFRemBertModel"),LKo=o(" (RemBERT model)"),xKo=l(),a0=a("li"),Jhe=a("strong"),$Ko=o("roberta"),kKo=o(" \u2014 "),fV=a("a"),SKo=o("TFRobertaModel"),RKo=o(" (RoBERTa model)"),BKo=l(),n0=a("li"),Yhe=a("strong"),PKo=o("roformer"),IKo=o(" \u2014 "),mV=a("a"),qKo=o("TFRoFormerModel"),NKo=o(" (RoFormer model)"),jKo=l(),s0=a("li"),Khe=a("strong"),DKo=o("speech_to_text"),GKo=o(" \u2014 "),gV=a("a"),OKo=o("TFSpeech2TextModel"),VKo=o(" (Speech2Text model)"),XKo=l(),l0=a("li"),Zhe=a("strong"),zKo=o("t5"),QKo=o(" \u2014 "),hV=a("a"),WKo=o("TFT5Model"),HKo=o(" (T5 model)"),UKo=l(),i0=a("li"),eue=a("strong"),JKo=o("tapas"),YKo=o(" \u2014 "),uV=a("a"),KKo=o("TFTapasModel"),ZKo=o(" (TAPAS model)"),eZo=l(),d0=a("li"),oue=a("strong"),oZo=o("transfo-xl"),rZo=o(" \u2014 "),pV=a("a"),tZo=o("TFTransfoXLModel"),aZo=o(" (Transformer-XL model)"),nZo=l(),c0=a("li"),rue=a("strong"),sZo=o("vit"),lZo=o(" \u2014 "),_V=a("a"),iZo=o("TFViTModel"),dZo=o(" (ViT model)"),cZo=l(),f0=a("li"),tue=a("strong"),fZo=o("vit_mae"),mZo=o(" \u2014 "),vV=a("a"),gZo=o("TFViTMAEModel"),hZo=o(" (ViTMAE model)"),uZo=l(),m0=a("li"),aue=a("strong"),pZo=o("wav2vec2"),_Zo=o(" \u2014 "),bV=a("a"),vZo=o("TFWav2Vec2Model"),bZo=o(" (Wav2Vec2 model)"),FZo=l(),g0=a("li"),nue=a("strong"),TZo=o("xlm"),MZo=o(" \u2014 "),FV=a("a"),EZo=o("TFXLMModel"),CZo=o(" (XLM model)"),wZo=l(),h0=a("li"),sue=a("strong"),AZo=o("xlm-roberta"),yZo=o(" \u2014 "),TV=a("a"),LZo=o("TFXLMRobertaModel"),xZo=o(" (XLM-RoBERTa model)"),$Zo=l(),u0=a("li"),lue=a("strong"),kZo=o("xlnet"),SZo=o(" \u2014 "),MV=a("a"),RZo=o("TFXLNetModel"),BZo=o(" (XLNet model)"),PZo=l(),F(p0.$$.fragment),vSe=l(),Ad=a("h2"),_0=a("a"),iue=a("span"),F(My.$$.fragment),IZo=l(),due=a("span"),qZo=o("TFAutoModelForPreTraining"),bSe=l(),Jo=a("div"),F(Ey.$$.fragment),NZo=l(),yd=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EV=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),CV=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),Cy=a("p"),zZo=o("This class cannot be instantiated directly using "),cue=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),Et=a("div"),F(wy.$$.fragment),UZo=l(),fue=a("p"),JZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YZo=l(),Ld=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),F(v0.$$.fragment),aer=l(),Er=a("div"),F(Ay.$$.fragment),ner=l(),gue=a("p"),ser=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ler=l(),Ha=a("p"),ier=o("The model class to instantiate is selected based on the "),hue=a("code"),der=o("model_type"),cer=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),fer=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(":"),uer=l(),ae=a("ul"),b0=a("li"),_ue=a("strong"),per=o("albert"),_er=o(" \u2014 "),AV=a("a"),ver=o("TFAlbertForPreTraining"),ber=o(" (ALBERT model)"),Fer=l(),F0=a("li"),vue=a("strong"),Ter=o("bart"),Mer=o(" \u2014 "),yV=a("a"),Eer=o("TFBartForConditionalGeneration"),Cer=o(" (BART model)"),wer=l(),T0=a("li"),bue=a("strong"),Aer=o("bert"),yer=o(" \u2014 "),LV=a("a"),Ler=o("TFBertForPreTraining"),xer=o(" (BERT model)"),$er=l(),M0=a("li"),Fue=a("strong"),ker=o("camembert"),Ser=o(" \u2014 "),xV=a("a"),Rer=o("TFCamembertForMaskedLM"),Ber=o(" (CamemBERT model)"),Per=l(),E0=a("li"),Tue=a("strong"),Ier=o("ctrl"),qer=o(" \u2014 "),$V=a("a"),Ner=o("TFCTRLLMHeadModel"),jer=o(" (CTRL model)"),Der=l(),C0=a("li"),Mue=a("strong"),Ger=o("distilbert"),Oer=o(" \u2014 "),kV=a("a"),Ver=o("TFDistilBertForMaskedLM"),Xer=o(" (DistilBERT model)"),zer=l(),w0=a("li"),Eue=a("strong"),Qer=o("electra"),Wer=o(" \u2014 "),SV=a("a"),Her=o("TFElectraForPreTraining"),Uer=o(" (ELECTRA model)"),Jer=l(),A0=a("li"),Cue=a("strong"),Yer=o("flaubert"),Ker=o(" \u2014 "),RV=a("a"),Zer=o("TFFlaubertWithLMHeadModel"),eor=o(" (FlauBERT model)"),oor=l(),y0=a("li"),wue=a("strong"),ror=o("funnel"),tor=o(" \u2014 "),BV=a("a"),aor=o("TFFunnelForPreTraining"),nor=o(" (Funnel Transformer model)"),sor=l(),L0=a("li"),Aue=a("strong"),lor=o("gpt2"),ior=o(" \u2014 "),PV=a("a"),dor=o("TFGPT2LMHeadModel"),cor=o(" (OpenAI GPT-2 model)"),mor=l(),x0=a("li"),yue=a("strong"),gor=o("layoutlm"),hor=o(" \u2014 "),IV=a("a"),uor=o("TFLayoutLMForMaskedLM"),por=o(" (LayoutLM model)"),_or=l(),$0=a("li"),Lue=a("strong"),vor=o("lxmert"),bor=o(" \u2014 "),qV=a("a"),For=o("TFLxmertForPreTraining"),Tor=o(" (LXMERT model)"),Mor=l(),k0=a("li"),xue=a("strong"),Eor=o("mobilebert"),Cor=o(" \u2014 "),NV=a("a"),wor=o("TFMobileBertForPreTraining"),Aor=o(" (MobileBERT model)"),yor=l(),S0=a("li"),$ue=a("strong"),Lor=o("mpnet"),xor=o(" \u2014 "),jV=a("a"),$or=o("TFMPNetForMaskedLM"),kor=o(" (MPNet model)"),Sor=l(),R0=a("li"),kue=a("strong"),Ror=o("openai-gpt"),Bor=o(" \u2014 "),DV=a("a"),Por=o("TFOpenAIGPTLMHeadModel"),Ior=o(" (OpenAI GPT model)"),qor=l(),B0=a("li"),Sue=a("strong"),Nor=o("roberta"),jor=o(" \u2014 "),GV=a("a"),Dor=o("TFRobertaForMaskedLM"),Gor=o(" (RoBERTa model)"),Oor=l(),P0=a("li"),Rue=a("strong"),Vor=o("t5"),Xor=o(" \u2014 "),OV=a("a"),zor=o("TFT5ForConditionalGeneration"),Qor=o(" (T5 model)"),Wor=l(),I0=a("li"),Bue=a("strong"),Hor=o("tapas"),Uor=o(" \u2014 "),VV=a("a"),Jor=o("TFTapasForMaskedLM"),Yor=o(" (TAPAS model)"),Kor=l(),q0=a("li"),Pue=a("strong"),Zor=o("transfo-xl"),err=o(" \u2014 "),XV=a("a"),orr=o("TFTransfoXLLMHeadModel"),rrr=o(" (Transformer-XL model)"),trr=l(),N0=a("li"),Iue=a("strong"),arr=o("vit_mae"),nrr=o(" \u2014 "),zV=a("a"),srr=o("TFViTMAEForPreTraining"),lrr=o(" (ViTMAE model)"),irr=l(),j0=a("li"),que=a("strong"),drr=o("xlm"),crr=o(" \u2014 "),QV=a("a"),frr=o("TFXLMWithLMHeadModel"),mrr=o(" (XLM model)"),grr=l(),D0=a("li"),Nue=a("strong"),hrr=o("xlm-roberta"),urr=o(" \u2014 "),WV=a("a"),prr=o("TFXLMRobertaForMaskedLM"),_rr=o(" (XLM-RoBERTa model)"),vrr=l(),G0=a("li"),jue=a("strong"),brr=o("xlnet"),Frr=o(" \u2014 "),HV=a("a"),Trr=o("TFXLNetLMHeadModel"),Mrr=o(" (XLNet model)"),Err=l(),F(O0.$$.fragment),FSe=l(),xd=a("h2"),V0=a("a"),Due=a("span"),F(yy.$$.fragment),Crr=l(),Gue=a("span"),wrr=o("TFAutoModelForCausalLM"),TSe=l(),Yo=a("div"),F(Ly.$$.fragment),Arr=l(),$d=a("p"),yrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UV=a("a"),Lrr=o("from_pretrained()"),xrr=o(" class method or the "),JV=a("a"),$rr=o("from_config()"),krr=o(` class
method.`),Srr=l(),xy=a("p"),Rrr=o("This class cannot be instantiated directly using "),Oue=a("code"),Brr=o("__init__()"),Prr=o(" (throws an error)."),Irr=l(),Ct=a("div"),F($y.$$.fragment),qrr=l(),Vue=a("p"),Nrr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jrr=l(),kd=a("p"),Drr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),Grr=o("not"),Orr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" to load the model weights."),zrr=l(),F(X0.$$.fragment),Qrr=l(),Cr=a("div"),F(ky.$$.fragment),Wrr=l(),zue=a("p"),Hrr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Urr=l(),Ua=a("p"),Jrr=o("The model class to instantiate is selected based on the "),Que=a("code"),Yrr=o("model_type"),Krr=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),otr=o("pretrained_model_name_or_path"),rtr=o(":"),ttr=l(),ve=a("ul"),z0=a("li"),Uue=a("strong"),atr=o("bert"),ntr=o(" \u2014 "),KV=a("a"),str=o("TFBertLMHeadModel"),ltr=o(" (BERT model)"),itr=l(),Q0=a("li"),Jue=a("strong"),dtr=o("camembert"),ctr=o(" \u2014 "),ZV=a("a"),ftr=o("TFCamembertForCausalLM"),mtr=o(" (CamemBERT model)"),gtr=l(),W0=a("li"),Yue=a("strong"),htr=o("ctrl"),utr=o(" \u2014 "),eX=a("a"),ptr=o("TFCTRLLMHeadModel"),_tr=o(" (CTRL model)"),vtr=l(),H0=a("li"),Kue=a("strong"),btr=o("gpt2"),Ftr=o(" \u2014 "),oX=a("a"),Ttr=o("TFGPT2LMHeadModel"),Mtr=o(" (OpenAI GPT-2 model)"),Etr=l(),U0=a("li"),Zue=a("strong"),Ctr=o("gptj"),wtr=o(" \u2014 "),rX=a("a"),Atr=o("TFGPTJForCausalLM"),ytr=o(" (GPT-J model)"),Ltr=l(),J0=a("li"),epe=a("strong"),xtr=o("openai-gpt"),$tr=o(" \u2014 "),tX=a("a"),ktr=o("TFOpenAIGPTLMHeadModel"),Str=o(" (OpenAI GPT model)"),Rtr=l(),Y0=a("li"),ope=a("strong"),Btr=o("rembert"),Ptr=o(" \u2014 "),aX=a("a"),Itr=o("TFRemBertForCausalLM"),qtr=o(" (RemBERT model)"),Ntr=l(),K0=a("li"),rpe=a("strong"),jtr=o("roberta"),Dtr=o(" \u2014 "),nX=a("a"),Gtr=o("TFRobertaForCausalLM"),Otr=o(" (RoBERTa model)"),Vtr=l(),Z0=a("li"),tpe=a("strong"),Xtr=o("roformer"),ztr=o(" \u2014 "),sX=a("a"),Qtr=o("TFRoFormerForCausalLM"),Wtr=o(" (RoFormer model)"),Htr=l(),eT=a("li"),ape=a("strong"),Utr=o("transfo-xl"),Jtr=o(" \u2014 "),lX=a("a"),Ytr=o("TFTransfoXLLMHeadModel"),Ktr=o(" (Transformer-XL model)"),Ztr=l(),oT=a("li"),npe=a("strong"),ear=o("xlm"),oar=o(" \u2014 "),iX=a("a"),rar=o("TFXLMWithLMHeadModel"),tar=o(" (XLM model)"),aar=l(),rT=a("li"),spe=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),dX=a("a"),lar=o("TFXLNetLMHeadModel"),iar=o(" (XLNet model)"),dar=l(),F(tT.$$.fragment),MSe=l(),Sd=a("h2"),aT=a("a"),lpe=a("span"),F(Sy.$$.fragment),car=l(),ipe=a("span"),far=o("TFAutoModelForImageClassification"),ESe=l(),Ko=a("div"),F(Ry.$$.fragment),mar=l(),Rd=a("p"),gar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=a("a"),har=o("from_pretrained()"),uar=o(" class method or the "),fX=a("a"),par=o("from_config()"),_ar=o(` class
method.`),bar=l(),By=a("p"),Far=o("This class cannot be instantiated directly using "),dpe=a("code"),Tar=o("__init__()"),Mar=o(" (throws an error)."),Ear=l(),wt=a("div"),F(Py.$$.fragment),Car=l(),cpe=a("p"),war=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Aar=l(),Bd=a("p"),yar=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),Lar=o("not"),xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),$ar=o("from_pretrained()"),kar=o(" to load the model weights."),Sar=l(),F(nT.$$.fragment),Rar=l(),wr=a("div"),F(Iy.$$.fragment),Bar=l(),mpe=a("p"),Par=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Iar=l(),Ja=a("p"),qar=o("The model class to instantiate is selected based on the "),gpe=a("code"),Nar=o("model_type"),jar=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),Dar=o("pretrained_model_name_or_path"),Gar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),Oar=o("pretrained_model_name_or_path"),Var=o(":"),Xar=l(),qy=a("ul"),sT=a("li"),ppe=a("strong"),zar=o("convnext"),Qar=o(" \u2014 "),gX=a("a"),War=o("TFConvNextForImageClassification"),Har=o(" (ConvNext model)"),Uar=l(),lT=a("li"),_pe=a("strong"),Jar=o("vit"),Yar=o(" \u2014 "),hX=a("a"),Kar=o("TFViTForImageClassification"),Zar=o(" (ViT model)"),enr=l(),F(iT.$$.fragment),CSe=l(),Pd=a("h2"),dT=a("a"),vpe=a("span"),F(Ny.$$.fragment),onr=l(),bpe=a("span"),rnr=o("TFAutoModelForMaskedLM"),wSe=l(),Zo=a("div"),F(jy.$$.fragment),tnr=l(),Id=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uX=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),pX=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),Dy=a("p"),cnr=o("This class cannot be instantiated directly using "),Fpe=a("code"),fnr=o("__init__()"),mnr=o(" (throws an error)."),gnr=l(),At=a("div"),F(Gy.$$.fragment),hnr=l(),Tpe=a("p"),unr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pnr=l(),qd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),vnr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(cT.$$.fragment),Enr=l(),Ar=a("div"),F(Oy.$$.fragment),Cnr=l(),Epe=a("p"),wnr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Anr=l(),Ya=a("p"),ynr=o("The model class to instantiate is selected based on the "),Cpe=a("code"),Lnr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Bnr=l(),se=a("ul"),fT=a("li"),ype=a("strong"),Pnr=o("albert"),Inr=o(" \u2014 "),vX=a("a"),qnr=o("TFAlbertForMaskedLM"),Nnr=o(" (ALBERT model)"),jnr=l(),mT=a("li"),Lpe=a("strong"),Dnr=o("bert"),Gnr=o(" \u2014 "),bX=a("a"),Onr=o("TFBertForMaskedLM"),Vnr=o(" (BERT model)"),Xnr=l(),gT=a("li"),xpe=a("strong"),znr=o("camembert"),Qnr=o(" \u2014 "),FX=a("a"),Wnr=o("TFCamembertForMaskedLM"),Hnr=o(" (CamemBERT model)"),Unr=l(),hT=a("li"),$pe=a("strong"),Jnr=o("convbert"),Ynr=o(" \u2014 "),TX=a("a"),Knr=o("TFConvBertForMaskedLM"),Znr=o(" (ConvBERT model)"),esr=l(),uT=a("li"),kpe=a("strong"),osr=o("deberta"),rsr=o(" \u2014 "),MX=a("a"),tsr=o("TFDebertaForMaskedLM"),asr=o(" (DeBERTa model)"),nsr=l(),pT=a("li"),Spe=a("strong"),ssr=o("deberta-v2"),lsr=o(" \u2014 "),EX=a("a"),isr=o("TFDebertaV2ForMaskedLM"),dsr=o(" (DeBERTa-v2 model)"),csr=l(),_T=a("li"),Rpe=a("strong"),fsr=o("distilbert"),msr=o(" \u2014 "),CX=a("a"),gsr=o("TFDistilBertForMaskedLM"),hsr=o(" (DistilBERT model)"),usr=l(),vT=a("li"),Bpe=a("strong"),psr=o("electra"),_sr=o(" \u2014 "),wX=a("a"),vsr=o("TFElectraForMaskedLM"),bsr=o(" (ELECTRA model)"),Fsr=l(),bT=a("li"),Ppe=a("strong"),Tsr=o("flaubert"),Msr=o(" \u2014 "),AX=a("a"),Esr=o("TFFlaubertWithLMHeadModel"),Csr=o(" (FlauBERT model)"),wsr=l(),FT=a("li"),Ipe=a("strong"),Asr=o("funnel"),ysr=o(" \u2014 "),yX=a("a"),Lsr=o("TFFunnelForMaskedLM"),xsr=o(" (Funnel Transformer model)"),$sr=l(),TT=a("li"),qpe=a("strong"),ksr=o("layoutlm"),Ssr=o(" \u2014 "),LX=a("a"),Rsr=o("TFLayoutLMForMaskedLM"),Bsr=o(" (LayoutLM model)"),Psr=l(),MT=a("li"),Npe=a("strong"),Isr=o("longformer"),qsr=o(" \u2014 "),xX=a("a"),Nsr=o("TFLongformerForMaskedLM"),jsr=o(" (Longformer model)"),Dsr=l(),ET=a("li"),jpe=a("strong"),Gsr=o("mobilebert"),Osr=o(" \u2014 "),$X=a("a"),Vsr=o("TFMobileBertForMaskedLM"),Xsr=o(" (MobileBERT model)"),zsr=l(),CT=a("li"),Dpe=a("strong"),Qsr=o("mpnet"),Wsr=o(" \u2014 "),kX=a("a"),Hsr=o("TFMPNetForMaskedLM"),Usr=o(" (MPNet model)"),Jsr=l(),wT=a("li"),Gpe=a("strong"),Ysr=o("rembert"),Ksr=o(" \u2014 "),SX=a("a"),Zsr=o("TFRemBertForMaskedLM"),elr=o(" (RemBERT model)"),olr=l(),AT=a("li"),Ope=a("strong"),rlr=o("roberta"),tlr=o(" \u2014 "),RX=a("a"),alr=o("TFRobertaForMaskedLM"),nlr=o(" (RoBERTa model)"),slr=l(),yT=a("li"),Vpe=a("strong"),llr=o("roformer"),ilr=o(" \u2014 "),BX=a("a"),dlr=o("TFRoFormerForMaskedLM"),clr=o(" (RoFormer model)"),flr=l(),LT=a("li"),Xpe=a("strong"),mlr=o("tapas"),glr=o(" \u2014 "),PX=a("a"),hlr=o("TFTapasForMaskedLM"),ulr=o(" (TAPAS model)"),plr=l(),xT=a("li"),zpe=a("strong"),_lr=o("xlm"),vlr=o(" \u2014 "),IX=a("a"),blr=o("TFXLMWithLMHeadModel"),Flr=o(" (XLM model)"),Tlr=l(),$T=a("li"),Qpe=a("strong"),Mlr=o("xlm-roberta"),Elr=o(" \u2014 "),qX=a("a"),Clr=o("TFXLMRobertaForMaskedLM"),wlr=o(" (XLM-RoBERTa model)"),Alr=l(),F(kT.$$.fragment),ASe=l(),Nd=a("h2"),ST=a("a"),Wpe=a("span"),F(Vy.$$.fragment),ylr=l(),Hpe=a("span"),Llr=o("TFAutoModelForSeq2SeqLM"),ySe=l(),er=a("div"),F(Xy.$$.fragment),xlr=l(),jd=a("p"),$lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NX=a("a"),klr=o("from_pretrained()"),Slr=o(" class method or the "),jX=a("a"),Rlr=o("from_config()"),Blr=o(` class
method.`),Plr=l(),zy=a("p"),Ilr=o("This class cannot be instantiated directly using "),Upe=a("code"),qlr=o("__init__()"),Nlr=o(" (throws an error)."),jlr=l(),yt=a("div"),F(Qy.$$.fragment),Dlr=l(),Jpe=a("p"),Glr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Olr=l(),Dd=a("p"),Vlr=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),Xlr=o("not"),zlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Qlr=o("from_pretrained()"),Wlr=o(" to load the model weights."),Hlr=l(),F(RT.$$.fragment),Ulr=l(),yr=a("div"),F(Wy.$$.fragment),Jlr=l(),Kpe=a("p"),Ylr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Klr=l(),Ka=a("p"),Zlr=o("The model class to instantiate is selected based on the "),Zpe=a("code"),eir=o("model_type"),oir=o(` property of the config object (either
passed as an argument or loaded from `),e_e=a("code"),rir=o("pretrained_model_name_or_path"),tir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=a("code"),air=o("pretrained_model_name_or_path"),nir=o(":"),sir=l(),Ce=a("ul"),BT=a("li"),r_e=a("strong"),lir=o("bart"),iir=o(" \u2014 "),GX=a("a"),dir=o("TFBartForConditionalGeneration"),cir=o(" (BART model)"),fir=l(),PT=a("li"),t_e=a("strong"),mir=o("blenderbot"),gir=o(" \u2014 "),OX=a("a"),hir=o("TFBlenderbotForConditionalGeneration"),uir=o(" (Blenderbot model)"),pir=l(),IT=a("li"),a_e=a("strong"),_ir=o("blenderbot-small"),vir=o(" \u2014 "),VX=a("a"),bir=o("TFBlenderbotSmallForConditionalGeneration"),Fir=o(" (BlenderbotSmall model)"),Tir=l(),qT=a("li"),n_e=a("strong"),Mir=o("encoder-decoder"),Eir=o(" \u2014 "),XX=a("a"),Cir=o("TFEncoderDecoderModel"),wir=o(" (Encoder decoder model)"),Air=l(),NT=a("li"),s_e=a("strong"),yir=o("led"),Lir=o(" \u2014 "),zX=a("a"),xir=o("TFLEDForConditionalGeneration"),$ir=o(" (LED model)"),kir=l(),jT=a("li"),l_e=a("strong"),Sir=o("marian"),Rir=o(" \u2014 "),QX=a("a"),Bir=o("TFMarianMTModel"),Pir=o(" (Marian model)"),Iir=l(),DT=a("li"),i_e=a("strong"),qir=o("mbart"),Nir=o(" \u2014 "),WX=a("a"),jir=o("TFMBartForConditionalGeneration"),Dir=o(" (mBART model)"),Gir=l(),GT=a("li"),d_e=a("strong"),Oir=o("mt5"),Vir=o(" \u2014 "),HX=a("a"),Xir=o("TFMT5ForConditionalGeneration"),zir=o(" (mT5 model)"),Qir=l(),OT=a("li"),c_e=a("strong"),Wir=o("pegasus"),Hir=o(" \u2014 "),UX=a("a"),Uir=o("TFPegasusForConditionalGeneration"),Jir=o(" (Pegasus model)"),Yir=l(),VT=a("li"),f_e=a("strong"),Kir=o("t5"),Zir=o(" \u2014 "),JX=a("a"),edr=o("TFT5ForConditionalGeneration"),odr=o(" (T5 model)"),rdr=l(),F(XT.$$.fragment),LSe=l(),Gd=a("h2"),zT=a("a"),m_e=a("span"),F(Hy.$$.fragment),tdr=l(),g_e=a("span"),adr=o("TFAutoModelForSequenceClassification"),xSe=l(),or=a("div"),F(Uy.$$.fragment),ndr=l(),Od=a("p"),sdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YX=a("a"),ldr=o("from_pretrained()"),idr=o(" class method or the "),KX=a("a"),ddr=o("from_config()"),cdr=o(` class
method.`),fdr=l(),Jy=a("p"),mdr=o("This class cannot be instantiated directly using "),h_e=a("code"),gdr=o("__init__()"),hdr=o(" (throws an error)."),udr=l(),Lt=a("div"),F(Yy.$$.fragment),pdr=l(),u_e=a("p"),_dr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vdr=l(),Vd=a("p"),bdr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Fdr=o("not"),Tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Mdr=o("from_pretrained()"),Edr=o(" to load the model weights."),Cdr=l(),F(QT.$$.fragment),wdr=l(),Lr=a("div"),F(Ky.$$.fragment),Adr=l(),__e=a("p"),ydr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ldr=l(),Za=a("p"),xdr=o("The model class to instantiate is selected based on the "),v_e=a("code"),$dr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),Sdr=o("pretrained_model_name_or_path"),Rdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),Bdr=o("pretrained_model_name_or_path"),Pdr=o(":"),Idr=l(),Z=a("ul"),WT=a("li"),T_e=a("strong"),qdr=o("albert"),Ndr=o(" \u2014 "),ez=a("a"),jdr=o("TFAlbertForSequenceClassification"),Ddr=o(" (ALBERT model)"),Gdr=l(),HT=a("li"),M_e=a("strong"),Odr=o("bert"),Vdr=o(" \u2014 "),oz=a("a"),Xdr=o("TFBertForSequenceClassification"),zdr=o(" (BERT model)"),Qdr=l(),UT=a("li"),E_e=a("strong"),Wdr=o("camembert"),Hdr=o(" \u2014 "),rz=a("a"),Udr=o("TFCamembertForSequenceClassification"),Jdr=o(" (CamemBERT model)"),Ydr=l(),JT=a("li"),C_e=a("strong"),Kdr=o("convbert"),Zdr=o(" \u2014 "),tz=a("a"),ecr=o("TFConvBertForSequenceClassification"),ocr=o(" (ConvBERT model)"),rcr=l(),YT=a("li"),w_e=a("strong"),tcr=o("ctrl"),acr=o(" \u2014 "),az=a("a"),ncr=o("TFCTRLForSequenceClassification"),scr=o(" (CTRL model)"),lcr=l(),KT=a("li"),A_e=a("strong"),icr=o("deberta"),dcr=o(" \u2014 "),nz=a("a"),ccr=o("TFDebertaForSequenceClassification"),fcr=o(" (DeBERTa model)"),mcr=l(),ZT=a("li"),y_e=a("strong"),gcr=o("deberta-v2"),hcr=o(" \u2014 "),sz=a("a"),ucr=o("TFDebertaV2ForSequenceClassification"),pcr=o(" (DeBERTa-v2 model)"),_cr=l(),e8=a("li"),L_e=a("strong"),vcr=o("distilbert"),bcr=o(" \u2014 "),lz=a("a"),Fcr=o("TFDistilBertForSequenceClassification"),Tcr=o(" (DistilBERT model)"),Mcr=l(),o8=a("li"),x_e=a("strong"),Ecr=o("electra"),Ccr=o(" \u2014 "),iz=a("a"),wcr=o("TFElectraForSequenceClassification"),Acr=o(" (ELECTRA model)"),ycr=l(),r8=a("li"),$_e=a("strong"),Lcr=o("flaubert"),xcr=o(" \u2014 "),dz=a("a"),$cr=o("TFFlaubertForSequenceClassification"),kcr=o(" (FlauBERT model)"),Scr=l(),t8=a("li"),k_e=a("strong"),Rcr=o("funnel"),Bcr=o(" \u2014 "),cz=a("a"),Pcr=o("TFFunnelForSequenceClassification"),Icr=o(" (Funnel Transformer model)"),qcr=l(),a8=a("li"),S_e=a("strong"),Ncr=o("gpt2"),jcr=o(" \u2014 "),fz=a("a"),Dcr=o("TFGPT2ForSequenceClassification"),Gcr=o(" (OpenAI GPT-2 model)"),Ocr=l(),n8=a("li"),R_e=a("strong"),Vcr=o("gptj"),Xcr=o(" \u2014 "),mz=a("a"),zcr=o("TFGPTJForSequenceClassification"),Qcr=o(" (GPT-J model)"),Wcr=l(),s8=a("li"),B_e=a("strong"),Hcr=o("layoutlm"),Ucr=o(" \u2014 "),gz=a("a"),Jcr=o("TFLayoutLMForSequenceClassification"),Ycr=o(" (LayoutLM model)"),Kcr=l(),l8=a("li"),P_e=a("strong"),Zcr=o("longformer"),efr=o(" \u2014 "),hz=a("a"),ofr=o("TFLongformerForSequenceClassification"),rfr=o(" (Longformer model)"),tfr=l(),i8=a("li"),I_e=a("strong"),afr=o("mobilebert"),nfr=o(" \u2014 "),uz=a("a"),sfr=o("TFMobileBertForSequenceClassification"),lfr=o(" (MobileBERT model)"),ifr=l(),d8=a("li"),q_e=a("strong"),dfr=o("mpnet"),cfr=o(" \u2014 "),pz=a("a"),ffr=o("TFMPNetForSequenceClassification"),mfr=o(" (MPNet model)"),gfr=l(),c8=a("li"),N_e=a("strong"),hfr=o("openai-gpt"),ufr=o(" \u2014 "),_z=a("a"),pfr=o("TFOpenAIGPTForSequenceClassification"),_fr=o(" (OpenAI GPT model)"),vfr=l(),f8=a("li"),j_e=a("strong"),bfr=o("rembert"),Ffr=o(" \u2014 "),vz=a("a"),Tfr=o("TFRemBertForSequenceClassification"),Mfr=o(" (RemBERT model)"),Efr=l(),m8=a("li"),D_e=a("strong"),Cfr=o("roberta"),wfr=o(" \u2014 "),bz=a("a"),Afr=o("TFRobertaForSequenceClassification"),yfr=o(" (RoBERTa model)"),Lfr=l(),g8=a("li"),G_e=a("strong"),xfr=o("roformer"),$fr=o(" \u2014 "),Fz=a("a"),kfr=o("TFRoFormerForSequenceClassification"),Sfr=o(" (RoFormer model)"),Rfr=l(),h8=a("li"),O_e=a("strong"),Bfr=o("tapas"),Pfr=o(" \u2014 "),Tz=a("a"),Ifr=o("TFTapasForSequenceClassification"),qfr=o(" (TAPAS model)"),Nfr=l(),u8=a("li"),V_e=a("strong"),jfr=o("transfo-xl"),Dfr=o(" \u2014 "),Mz=a("a"),Gfr=o("TFTransfoXLForSequenceClassification"),Ofr=o(" (Transformer-XL model)"),Vfr=l(),p8=a("li"),X_e=a("strong"),Xfr=o("xlm"),zfr=o(" \u2014 "),Ez=a("a"),Qfr=o("TFXLMForSequenceClassification"),Wfr=o(" (XLM model)"),Hfr=l(),_8=a("li"),z_e=a("strong"),Ufr=o("xlm-roberta"),Jfr=o(" \u2014 "),Cz=a("a"),Yfr=o("TFXLMRobertaForSequenceClassification"),Kfr=o(" (XLM-RoBERTa model)"),Zfr=l(),v8=a("li"),Q_e=a("strong"),emr=o("xlnet"),omr=o(" \u2014 "),wz=a("a"),rmr=o("TFXLNetForSequenceClassification"),tmr=o(" (XLNet model)"),amr=l(),F(b8.$$.fragment),$Se=l(),Xd=a("h2"),F8=a("a"),W_e=a("span"),F(Zy.$$.fragment),nmr=l(),H_e=a("span"),smr=o("TFAutoModelForMultipleChoice"),kSe=l(),rr=a("div"),F(eL.$$.fragment),lmr=l(),zd=a("p"),imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Az=a("a"),dmr=o("from_pretrained()"),cmr=o(" class method or the "),yz=a("a"),fmr=o("from_config()"),mmr=o(` class
method.`),gmr=l(),oL=a("p"),hmr=o("This class cannot be instantiated directly using "),U_e=a("code"),umr=o("__init__()"),pmr=o(" (throws an error)."),_mr=l(),xt=a("div"),F(rL.$$.fragment),vmr=l(),J_e=a("p"),bmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fmr=l(),Qd=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Mmr=o("not"),Emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Cmr=o("from_pretrained()"),wmr=o(" to load the model weights."),Amr=l(),F(T8.$$.fragment),ymr=l(),xr=a("div"),F(tL.$$.fragment),Lmr=l(),K_e=a("p"),xmr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$mr=l(),en=a("p"),kmr=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Smr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Bmr=o("pretrained_model_name_or_path"),Pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Imr=o("pretrained_model_name_or_path"),qmr=o(":"),Nmr=l(),ge=a("ul"),M8=a("li"),rve=a("strong"),jmr=o("albert"),Dmr=o(" \u2014 "),xz=a("a"),Gmr=o("TFAlbertForMultipleChoice"),Omr=o(" (ALBERT model)"),Vmr=l(),E8=a("li"),tve=a("strong"),Xmr=o("bert"),zmr=o(" \u2014 "),$z=a("a"),Qmr=o("TFBertForMultipleChoice"),Wmr=o(" (BERT model)"),Hmr=l(),C8=a("li"),ave=a("strong"),Umr=o("camembert"),Jmr=o(" \u2014 "),kz=a("a"),Ymr=o("TFCamembertForMultipleChoice"),Kmr=o(" (CamemBERT model)"),Zmr=l(),w8=a("li"),nve=a("strong"),egr=o("convbert"),ogr=o(" \u2014 "),Sz=a("a"),rgr=o("TFConvBertForMultipleChoice"),tgr=o(" (ConvBERT model)"),agr=l(),A8=a("li"),sve=a("strong"),ngr=o("distilbert"),sgr=o(" \u2014 "),Rz=a("a"),lgr=o("TFDistilBertForMultipleChoice"),igr=o(" (DistilBERT model)"),dgr=l(),y8=a("li"),lve=a("strong"),cgr=o("electra"),fgr=o(" \u2014 "),Bz=a("a"),mgr=o("TFElectraForMultipleChoice"),ggr=o(" (ELECTRA model)"),hgr=l(),L8=a("li"),ive=a("strong"),ugr=o("flaubert"),pgr=o(" \u2014 "),Pz=a("a"),_gr=o("TFFlaubertForMultipleChoice"),vgr=o(" (FlauBERT model)"),bgr=l(),x8=a("li"),dve=a("strong"),Fgr=o("funnel"),Tgr=o(" \u2014 "),Iz=a("a"),Mgr=o("TFFunnelForMultipleChoice"),Egr=o(" (Funnel Transformer model)"),Cgr=l(),$8=a("li"),cve=a("strong"),wgr=o("longformer"),Agr=o(" \u2014 "),qz=a("a"),ygr=o("TFLongformerForMultipleChoice"),Lgr=o(" (Longformer model)"),xgr=l(),k8=a("li"),fve=a("strong"),$gr=o("mobilebert"),kgr=o(" \u2014 "),Nz=a("a"),Sgr=o("TFMobileBertForMultipleChoice"),Rgr=o(" (MobileBERT model)"),Bgr=l(),S8=a("li"),mve=a("strong"),Pgr=o("mpnet"),Igr=o(" \u2014 "),jz=a("a"),qgr=o("TFMPNetForMultipleChoice"),Ngr=o(" (MPNet model)"),jgr=l(),R8=a("li"),gve=a("strong"),Dgr=o("rembert"),Ggr=o(" \u2014 "),Dz=a("a"),Ogr=o("TFRemBertForMultipleChoice"),Vgr=o(" (RemBERT model)"),Xgr=l(),B8=a("li"),hve=a("strong"),zgr=o("roberta"),Qgr=o(" \u2014 "),Gz=a("a"),Wgr=o("TFRobertaForMultipleChoice"),Hgr=o(" (RoBERTa model)"),Ugr=l(),P8=a("li"),uve=a("strong"),Jgr=o("roformer"),Ygr=o(" \u2014 "),Oz=a("a"),Kgr=o("TFRoFormerForMultipleChoice"),Zgr=o(" (RoFormer model)"),ehr=l(),I8=a("li"),pve=a("strong"),ohr=o("xlm"),rhr=o(" \u2014 "),Vz=a("a"),thr=o("TFXLMForMultipleChoice"),ahr=o(" (XLM model)"),nhr=l(),q8=a("li"),_ve=a("strong"),shr=o("xlm-roberta"),lhr=o(" \u2014 "),Xz=a("a"),ihr=o("TFXLMRobertaForMultipleChoice"),dhr=o(" (XLM-RoBERTa model)"),chr=l(),N8=a("li"),vve=a("strong"),fhr=o("xlnet"),mhr=o(" \u2014 "),zz=a("a"),ghr=o("TFXLNetForMultipleChoice"),hhr=o(" (XLNet model)"),uhr=l(),F(j8.$$.fragment),SSe=l(),Wd=a("h2"),D8=a("a"),bve=a("span"),F(aL.$$.fragment),phr=l(),Fve=a("span"),_hr=o("TFAutoModelForTableQuestionAnswering"),RSe=l(),tr=a("div"),F(nL.$$.fragment),vhr=l(),Hd=a("p"),bhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=a("a"),Fhr=o("from_pretrained()"),Thr=o(" class method or the "),Wz=a("a"),Mhr=o("from_config()"),Ehr=o(` class
method.`),Chr=l(),sL=a("p"),whr=o("This class cannot be instantiated directly using "),Tve=a("code"),Ahr=o("__init__()"),yhr=o(" (throws an error)."),Lhr=l(),$t=a("div"),F(lL.$$.fragment),xhr=l(),Mve=a("p"),$hr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),khr=l(),Ud=a("p"),Shr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Rhr=o("not"),Bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Phr=o("from_pretrained()"),Ihr=o(" to load the model weights."),qhr=l(),F(G8.$$.fragment),Nhr=l(),$r=a("div"),F(iL.$$.fragment),jhr=l(),Cve=a("p"),Dhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ghr=l(),on=a("p"),Ohr=o("The model class to instantiate is selected based on the "),wve=a("code"),Vhr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),zhr=o("pretrained_model_name_or_path"),Qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),Whr=o("pretrained_model_name_or_path"),Hhr=o(":"),Uhr=l(),Lve=a("ul"),O8=a("li"),xve=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),Uz=a("a"),Khr=o("TFTapasForQuestionAnswering"),Zhr=o(" (TAPAS model)"),eur=l(),F(V8.$$.fragment),BSe=l(),Jd=a("h2"),X8=a("a"),$ve=a("span"),F(dL.$$.fragment),our=l(),kve=a("span"),rur=o("TFAutoModelForTokenClassification"),PSe=l(),ar=a("div"),F(cL.$$.fragment),tur=l(),Yd=a("p"),aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jz=a("a"),nur=o("from_pretrained()"),sur=o(" class method or the "),Yz=a("a"),lur=o("from_config()"),iur=o(` class
method.`),dur=l(),fL=a("p"),cur=o("This class cannot be instantiated directly using "),Sve=a("code"),fur=o("__init__()"),mur=o(" (throws an error)."),gur=l(),kt=a("div"),F(mL.$$.fragment),hur=l(),Rve=a("p"),uur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pur=l(),Kd=a("p"),_ur=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),vur=o("not"),bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),Fur=o("from_pretrained()"),Tur=o(" to load the model weights."),Mur=l(),F(z8.$$.fragment),Eur=l(),kr=a("div"),F(gL.$$.fragment),Cur=l(),Pve=a("p"),wur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Aur=l(),rn=a("p"),yur=o("The model class to instantiate is selected based on the "),Ive=a("code"),Lur=o("model_type"),xur=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),Sur=o("pretrained_model_name_or_path"),Rur=o(":"),Bur=l(),le=a("ul"),Q8=a("li"),jve=a("strong"),Pur=o("albert"),Iur=o(" \u2014 "),Zz=a("a"),qur=o("TFAlbertForTokenClassification"),Nur=o(" (ALBERT model)"),jur=l(),W8=a("li"),Dve=a("strong"),Dur=o("bert"),Gur=o(" \u2014 "),eQ=a("a"),Our=o("TFBertForTokenClassification"),Vur=o(" (BERT model)"),Xur=l(),H8=a("li"),Gve=a("strong"),zur=o("camembert"),Qur=o(" \u2014 "),oQ=a("a"),Wur=o("TFCamembertForTokenClassification"),Hur=o(" (CamemBERT model)"),Uur=l(),U8=a("li"),Ove=a("strong"),Jur=o("convbert"),Yur=o(" \u2014 "),rQ=a("a"),Kur=o("TFConvBertForTokenClassification"),Zur=o(" (ConvBERT model)"),epr=l(),J8=a("li"),Vve=a("strong"),opr=o("deberta"),rpr=o(" \u2014 "),tQ=a("a"),tpr=o("TFDebertaForTokenClassification"),apr=o(" (DeBERTa model)"),npr=l(),Y8=a("li"),Xve=a("strong"),spr=o("deberta-v2"),lpr=o(" \u2014 "),aQ=a("a"),ipr=o("TFDebertaV2ForTokenClassification"),dpr=o(" (DeBERTa-v2 model)"),cpr=l(),K8=a("li"),zve=a("strong"),fpr=o("distilbert"),mpr=o(" \u2014 "),nQ=a("a"),gpr=o("TFDistilBertForTokenClassification"),hpr=o(" (DistilBERT model)"),upr=l(),Z8=a("li"),Qve=a("strong"),ppr=o("electra"),_pr=o(" \u2014 "),sQ=a("a"),vpr=o("TFElectraForTokenClassification"),bpr=o(" (ELECTRA model)"),Fpr=l(),eM=a("li"),Wve=a("strong"),Tpr=o("flaubert"),Mpr=o(" \u2014 "),lQ=a("a"),Epr=o("TFFlaubertForTokenClassification"),Cpr=o(" (FlauBERT model)"),wpr=l(),oM=a("li"),Hve=a("strong"),Apr=o("funnel"),ypr=o(" \u2014 "),iQ=a("a"),Lpr=o("TFFunnelForTokenClassification"),xpr=o(" (Funnel Transformer model)"),$pr=l(),rM=a("li"),Uve=a("strong"),kpr=o("layoutlm"),Spr=o(" \u2014 "),dQ=a("a"),Rpr=o("TFLayoutLMForTokenClassification"),Bpr=o(" (LayoutLM model)"),Ppr=l(),tM=a("li"),Jve=a("strong"),Ipr=o("longformer"),qpr=o(" \u2014 "),cQ=a("a"),Npr=o("TFLongformerForTokenClassification"),jpr=o(" (Longformer model)"),Dpr=l(),aM=a("li"),Yve=a("strong"),Gpr=o("mobilebert"),Opr=o(" \u2014 "),fQ=a("a"),Vpr=o("TFMobileBertForTokenClassification"),Xpr=o(" (MobileBERT model)"),zpr=l(),nM=a("li"),Kve=a("strong"),Qpr=o("mpnet"),Wpr=o(" \u2014 "),mQ=a("a"),Hpr=o("TFMPNetForTokenClassification"),Upr=o(" (MPNet model)"),Jpr=l(),sM=a("li"),Zve=a("strong"),Ypr=o("rembert"),Kpr=o(" \u2014 "),gQ=a("a"),Zpr=o("TFRemBertForTokenClassification"),e_r=o(" (RemBERT model)"),o_r=l(),lM=a("li"),e1e=a("strong"),r_r=o("roberta"),t_r=o(" \u2014 "),hQ=a("a"),a_r=o("TFRobertaForTokenClassification"),n_r=o(" (RoBERTa model)"),s_r=l(),iM=a("li"),o1e=a("strong"),l_r=o("roformer"),i_r=o(" \u2014 "),uQ=a("a"),d_r=o("TFRoFormerForTokenClassification"),c_r=o(" (RoFormer model)"),f_r=l(),dM=a("li"),r1e=a("strong"),m_r=o("xlm"),g_r=o(" \u2014 "),pQ=a("a"),h_r=o("TFXLMForTokenClassification"),u_r=o(" (XLM model)"),p_r=l(),cM=a("li"),t1e=a("strong"),__r=o("xlm-roberta"),v_r=o(" \u2014 "),_Q=a("a"),b_r=o("TFXLMRobertaForTokenClassification"),F_r=o(" (XLM-RoBERTa model)"),T_r=l(),fM=a("li"),a1e=a("strong"),M_r=o("xlnet"),E_r=o(" \u2014 "),vQ=a("a"),C_r=o("TFXLNetForTokenClassification"),w_r=o(" (XLNet model)"),A_r=l(),F(mM.$$.fragment),ISe=l(),Zd=a("h2"),gM=a("a"),n1e=a("span"),F(hL.$$.fragment),y_r=l(),s1e=a("span"),L_r=o("TFAutoModelForQuestionAnswering"),qSe=l(),nr=a("div"),F(uL.$$.fragment),x_r=l(),ec=a("p"),$_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" class method or the "),FQ=a("a"),R_r=o("from_config()"),B_r=o(` class
method.`),P_r=l(),pL=a("p"),I_r=o("This class cannot be instantiated directly using "),l1e=a("code"),q_r=o("__init__()"),N_r=o(" (throws an error)."),j_r=l(),St=a("div"),F(_L.$$.fragment),D_r=l(),i1e=a("p"),G_r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),O_r=l(),oc=a("p"),V_r=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),X_r=o("not"),z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Q_r=o("from_pretrained()"),W_r=o(" to load the model weights."),H_r=l(),F(hM.$$.fragment),U_r=l(),Sr=a("div"),F(vL.$$.fragment),J_r=l(),c1e=a("p"),Y_r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K_r=l(),tn=a("p"),Z_r=o("The model class to instantiate is selected based on the "),f1e=a("code"),evr=o("model_type"),ovr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(":"),svr=l(),ie=a("ul"),uM=a("li"),h1e=a("strong"),lvr=o("albert"),ivr=o(" \u2014 "),MQ=a("a"),dvr=o("TFAlbertForQuestionAnswering"),cvr=o(" (ALBERT model)"),fvr=l(),pM=a("li"),u1e=a("strong"),mvr=o("bert"),gvr=o(" \u2014 "),EQ=a("a"),hvr=o("TFBertForQuestionAnswering"),uvr=o(" (BERT model)"),pvr=l(),_M=a("li"),p1e=a("strong"),_vr=o("camembert"),vvr=o(" \u2014 "),CQ=a("a"),bvr=o("TFCamembertForQuestionAnswering"),Fvr=o(" (CamemBERT model)"),Tvr=l(),vM=a("li"),_1e=a("strong"),Mvr=o("convbert"),Evr=o(" \u2014 "),wQ=a("a"),Cvr=o("TFConvBertForQuestionAnswering"),wvr=o(" (ConvBERT model)"),Avr=l(),bM=a("li"),v1e=a("strong"),yvr=o("deberta"),Lvr=o(" \u2014 "),AQ=a("a"),xvr=o("TFDebertaForQuestionAnswering"),$vr=o(" (DeBERTa model)"),kvr=l(),FM=a("li"),b1e=a("strong"),Svr=o("deberta-v2"),Rvr=o(" \u2014 "),yQ=a("a"),Bvr=o("TFDebertaV2ForQuestionAnswering"),Pvr=o(" (DeBERTa-v2 model)"),Ivr=l(),TM=a("li"),F1e=a("strong"),qvr=o("distilbert"),Nvr=o(" \u2014 "),LQ=a("a"),jvr=o("TFDistilBertForQuestionAnswering"),Dvr=o(" (DistilBERT model)"),Gvr=l(),MM=a("li"),T1e=a("strong"),Ovr=o("electra"),Vvr=o(" \u2014 "),xQ=a("a"),Xvr=o("TFElectraForQuestionAnswering"),zvr=o(" (ELECTRA model)"),Qvr=l(),EM=a("li"),M1e=a("strong"),Wvr=o("flaubert"),Hvr=o(" \u2014 "),$Q=a("a"),Uvr=o("TFFlaubertForQuestionAnsweringSimple"),Jvr=o(" (FlauBERT model)"),Yvr=l(),CM=a("li"),E1e=a("strong"),Kvr=o("funnel"),Zvr=o(" \u2014 "),kQ=a("a"),e1r=o("TFFunnelForQuestionAnswering"),o1r=o(" (Funnel Transformer model)"),r1r=l(),wM=a("li"),C1e=a("strong"),t1r=o("gptj"),a1r=o(" \u2014 "),SQ=a("a"),n1r=o("TFGPTJForQuestionAnswering"),s1r=o(" (GPT-J model)"),l1r=l(),AM=a("li"),w1e=a("strong"),i1r=o("longformer"),d1r=o(" \u2014 "),RQ=a("a"),c1r=o("TFLongformerForQuestionAnswering"),f1r=o(" (Longformer model)"),m1r=l(),yM=a("li"),A1e=a("strong"),g1r=o("mobilebert"),h1r=o(" \u2014 "),BQ=a("a"),u1r=o("TFMobileBertForQuestionAnswering"),p1r=o(" (MobileBERT model)"),_1r=l(),LM=a("li"),y1e=a("strong"),v1r=o("mpnet"),b1r=o(" \u2014 "),PQ=a("a"),F1r=o("TFMPNetForQuestionAnswering"),T1r=o(" (MPNet model)"),M1r=l(),xM=a("li"),L1e=a("strong"),E1r=o("rembert"),C1r=o(" \u2014 "),IQ=a("a"),w1r=o("TFRemBertForQuestionAnswering"),A1r=o(" (RemBERT model)"),y1r=l(),$M=a("li"),x1e=a("strong"),L1r=o("roberta"),x1r=o(" \u2014 "),qQ=a("a"),$1r=o("TFRobertaForQuestionAnswering"),k1r=o(" (RoBERTa model)"),S1r=l(),kM=a("li"),$1e=a("strong"),R1r=o("roformer"),B1r=o(" \u2014 "),NQ=a("a"),P1r=o("TFRoFormerForQuestionAnswering"),I1r=o(" (RoFormer model)"),q1r=l(),SM=a("li"),k1e=a("strong"),N1r=o("xlm"),j1r=o(" \u2014 "),jQ=a("a"),D1r=o("TFXLMForQuestionAnsweringSimple"),G1r=o(" (XLM model)"),O1r=l(),RM=a("li"),S1e=a("strong"),V1r=o("xlm-roberta"),X1r=o(" \u2014 "),DQ=a("a"),z1r=o("TFXLMRobertaForQuestionAnswering"),Q1r=o(" (XLM-RoBERTa model)"),W1r=l(),BM=a("li"),R1e=a("strong"),H1r=o("xlnet"),U1r=o(" \u2014 "),GQ=a("a"),J1r=o("TFXLNetForQuestionAnsweringSimple"),Y1r=o(" (XLNet model)"),K1r=l(),F(PM.$$.fragment),NSe=l(),rc=a("h2"),IM=a("a"),B1e=a("span"),F(bL.$$.fragment),Z1r=l(),P1e=a("span"),ebr=o("TFAutoModelForVision2Seq"),jSe=l(),sr=a("div"),F(FL.$$.fragment),obr=l(),tc=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),VQ=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),TL=a("p"),ibr=o("This class cannot be instantiated directly using "),I1e=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),fbr=l(),Rt=a("div"),F(ML.$$.fragment),mbr=l(),q1e=a("p"),gbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hbr=l(),ac=a("p"),ubr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),pbr=o("not"),_br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),vbr=o("from_pretrained()"),bbr=o(" to load the model weights."),Fbr=l(),F(qM.$$.fragment),Tbr=l(),Rr=a("div"),F(EL.$$.fragment),Mbr=l(),j1e=a("p"),Ebr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cbr=l(),an=a("p"),wbr=o("The model class to instantiate is selected based on the "),D1e=a("code"),Abr=o("model_type"),ybr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),Lbr=o("pretrained_model_name_or_path"),xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),$br=o("pretrained_model_name_or_path"),kbr=o(":"),Sbr=l(),V1e=a("ul"),NM=a("li"),X1e=a("strong"),Rbr=o("vision-encoder-decoder"),Bbr=o(" \u2014 "),zQ=a("a"),Pbr=o("TFVisionEncoderDecoderModel"),Ibr=o(" (Vision Encoder decoder model)"),qbr=l(),F(jM.$$.fragment),DSe=l(),nc=a("h2"),DM=a("a"),z1e=a("span"),F(CL.$$.fragment),Nbr=l(),Q1e=a("span"),jbr=o("TFAutoModelForSpeechSeq2Seq"),GSe=l(),lr=a("div"),F(wL.$$.fragment),Dbr=l(),sc=a("p"),Gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QQ=a("a"),Obr=o("from_pretrained()"),Vbr=o(" class method or the "),WQ=a("a"),Xbr=o("from_config()"),zbr=o(` class
method.`),Qbr=l(),AL=a("p"),Wbr=o("This class cannot be instantiated directly using "),W1e=a("code"),Hbr=o("__init__()"),Ubr=o(" (throws an error)."),Jbr=l(),Bt=a("div"),F(yL.$$.fragment),Ybr=l(),H1e=a("p"),Kbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zbr=l(),lc=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),t4r=o("from_pretrained()"),a4r=o(" to load the model weights."),n4r=l(),F(GM.$$.fragment),s4r=l(),Br=a("div"),F(LL.$$.fragment),l4r=l(),J1e=a("p"),i4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),d4r=l(),nn=a("p"),c4r=o("The model class to instantiate is selected based on the "),Y1e=a("code"),f4r=o("model_type"),m4r=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),u4r=o("pretrained_model_name_or_path"),p4r=o(":"),_4r=l(),ebe=a("ul"),OM=a("li"),obe=a("strong"),v4r=o("speech_to_text"),b4r=o(" \u2014 "),UQ=a("a"),F4r=o("TFSpeech2TextForConditionalGeneration"),T4r=o(" (Speech2Text model)"),M4r=l(),F(VM.$$.fragment),OSe=l(),ic=a("h2"),XM=a("a"),rbe=a("span"),F(xL.$$.fragment),E4r=l(),tbe=a("span"),C4r=o("FlaxAutoModel"),VSe=l(),ir=a("div"),F($L.$$.fragment),w4r=l(),dc=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JQ=a("a"),y4r=o("from_pretrained()"),L4r=o(" class method or the "),YQ=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),kL=a("p"),S4r=o("This class cannot be instantiated directly using "),abe=a("code"),R4r=o("__init__()"),B4r=o(" (throws an error)."),P4r=l(),Pt=a("div"),F(SL.$$.fragment),I4r=l(),nbe=a("p"),q4r=o("Instantiates one of the base model classes of the library from a configuration."),N4r=l(),cc=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(zM.$$.fragment),z4r=l(),Pr=a("div"),F(RL.$$.fragment),Q4r=l(),lbe=a("p"),W4r=o("Instantiate one of the base model classes of the library from a pretrained model."),H4r=l(),sn=a("p"),U4r=o("The model class to instantiate is selected based on the "),ibe=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(":"),r2r=l(),oe=a("ul"),QM=a("li"),fbe=a("strong"),t2r=o("albert"),a2r=o(" \u2014 "),ZQ=a("a"),n2r=o("FlaxAlbertModel"),s2r=o(" (ALBERT model)"),l2r=l(),WM=a("li"),mbe=a("strong"),i2r=o("bart"),d2r=o(" \u2014 "),eW=a("a"),c2r=o("FlaxBartModel"),f2r=o(" (BART model)"),m2r=l(),HM=a("li"),gbe=a("strong"),g2r=o("beit"),h2r=o(" \u2014 "),oW=a("a"),u2r=o("FlaxBeitModel"),p2r=o(" (BEiT model)"),_2r=l(),UM=a("li"),hbe=a("strong"),v2r=o("bert"),b2r=o(" \u2014 "),rW=a("a"),F2r=o("FlaxBertModel"),T2r=o(" (BERT model)"),M2r=l(),JM=a("li"),ube=a("strong"),E2r=o("big_bird"),C2r=o(" \u2014 "),tW=a("a"),w2r=o("FlaxBigBirdModel"),A2r=o(" (BigBird model)"),y2r=l(),YM=a("li"),pbe=a("strong"),L2r=o("blenderbot"),x2r=o(" \u2014 "),aW=a("a"),$2r=o("FlaxBlenderbotModel"),k2r=o(" (Blenderbot model)"),S2r=l(),KM=a("li"),_be=a("strong"),R2r=o("blenderbot-small"),B2r=o(" \u2014 "),nW=a("a"),P2r=o("FlaxBlenderbotSmallModel"),I2r=o(" (BlenderbotSmall model)"),q2r=l(),ZM=a("li"),vbe=a("strong"),N2r=o("clip"),j2r=o(" \u2014 "),sW=a("a"),D2r=o("FlaxCLIPModel"),G2r=o(" (CLIP model)"),O2r=l(),eE=a("li"),bbe=a("strong"),V2r=o("distilbert"),X2r=o(" \u2014 "),lW=a("a"),z2r=o("FlaxDistilBertModel"),Q2r=o(" (DistilBERT model)"),W2r=l(),oE=a("li"),Fbe=a("strong"),H2r=o("electra"),U2r=o(" \u2014 "),iW=a("a"),J2r=o("FlaxElectraModel"),Y2r=o(" (ELECTRA model)"),K2r=l(),rE=a("li"),Tbe=a("strong"),Z2r=o("gpt2"),eFr=o(" \u2014 "),dW=a("a"),oFr=o("FlaxGPT2Model"),rFr=o(" (OpenAI GPT-2 model)"),tFr=l(),tE=a("li"),Mbe=a("strong"),aFr=o("gpt_neo"),nFr=o(" \u2014 "),cW=a("a"),sFr=o("FlaxGPTNeoModel"),lFr=o(" (GPT Neo model)"),iFr=l(),aE=a("li"),Ebe=a("strong"),dFr=o("gptj"),cFr=o(" \u2014 "),fW=a("a"),fFr=o("FlaxGPTJModel"),mFr=o(" (GPT-J model)"),gFr=l(),nE=a("li"),Cbe=a("strong"),hFr=o("marian"),uFr=o(" \u2014 "),mW=a("a"),pFr=o("FlaxMarianModel"),_Fr=o(" (Marian model)"),vFr=l(),sE=a("li"),wbe=a("strong"),bFr=o("mbart"),FFr=o(" \u2014 "),gW=a("a"),TFr=o("FlaxMBartModel"),MFr=o(" (mBART model)"),EFr=l(),lE=a("li"),Abe=a("strong"),CFr=o("mt5"),wFr=o(" \u2014 "),hW=a("a"),AFr=o("FlaxMT5Model"),yFr=o(" (mT5 model)"),LFr=l(),iE=a("li"),ybe=a("strong"),xFr=o("pegasus"),$Fr=o(" \u2014 "),uW=a("a"),kFr=o("FlaxPegasusModel"),SFr=o(" (Pegasus model)"),RFr=l(),dE=a("li"),Lbe=a("strong"),BFr=o("roberta"),PFr=o(" \u2014 "),pW=a("a"),IFr=o("FlaxRobertaModel"),qFr=o(" (RoBERTa model)"),NFr=l(),cE=a("li"),xbe=a("strong"),jFr=o("roformer"),DFr=o(" \u2014 "),_W=a("a"),GFr=o("FlaxRoFormerModel"),OFr=o(" (RoFormer model)"),VFr=l(),fE=a("li"),$be=a("strong"),XFr=o("t5"),zFr=o(" \u2014 "),vW=a("a"),QFr=o("FlaxT5Model"),WFr=o(" (T5 model)"),HFr=l(),mE=a("li"),kbe=a("strong"),UFr=o("vision-text-dual-encoder"),JFr=o(" \u2014 "),bW=a("a"),YFr=o("FlaxVisionTextDualEncoderModel"),KFr=o(" (VisionTextDualEncoder model)"),ZFr=l(),gE=a("li"),Sbe=a("strong"),e0r=o("vit"),o0r=o(" \u2014 "),FW=a("a"),r0r=o("FlaxViTModel"),t0r=o(" (ViT model)"),a0r=l(),hE=a("li"),Rbe=a("strong"),n0r=o("wav2vec2"),s0r=o(" \u2014 "),TW=a("a"),l0r=o("FlaxWav2Vec2Model"),i0r=o(" (Wav2Vec2 model)"),d0r=l(),uE=a("li"),Bbe=a("strong"),c0r=o("xglm"),f0r=o(" \u2014 "),MW=a("a"),m0r=o("FlaxXGLMModel"),g0r=o(" (XGLM model)"),h0r=l(),pE=a("li"),Pbe=a("strong"),u0r=o("xlm-roberta"),p0r=o(" \u2014 "),EW=a("a"),_0r=o("FlaxXLMRobertaModel"),v0r=o(" (XLM-RoBERTa model)"),b0r=l(),F(_E.$$.fragment),XSe=l(),fc=a("h2"),vE=a("a"),Ibe=a("span"),F(BL.$$.fragment),F0r=l(),qbe=a("span"),T0r=o("FlaxAutoModelForCausalLM"),zSe=l(),dr=a("div"),F(PL.$$.fragment),M0r=l(),mc=a("p"),E0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CW=a("a"),C0r=o("from_pretrained()"),w0r=o(" class method or the "),wW=a("a"),A0r=o("from_config()"),y0r=o(` class
method.`),L0r=l(),IL=a("p"),x0r=o("This class cannot be instantiated directly using "),Nbe=a("code"),$0r=o("__init__()"),k0r=o(" (throws an error)."),S0r=l(),It=a("div"),F(qL.$$.fragment),R0r=l(),jbe=a("p"),B0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P0r=l(),gc=a("p"),I0r=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),q0r=o("not"),N0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),j0r=o("from_pretrained()"),D0r=o(" to load the model weights."),G0r=l(),F(bE.$$.fragment),O0r=l(),Ir=a("div"),F(NL.$$.fragment),V0r=l(),Gbe=a("p"),X0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z0r=l(),ln=a("p"),Q0r=o("The model class to instantiate is selected based on the "),Obe=a("code"),W0r=o("model_type"),H0r=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(":"),Z0r=l(),Hr=a("ul"),FE=a("li"),zbe=a("strong"),eTr=o("bart"),oTr=o(" \u2014 "),yW=a("a"),rTr=o("FlaxBartForCausalLM"),tTr=o(" (BART model)"),aTr=l(),TE=a("li"),Qbe=a("strong"),nTr=o("gpt2"),sTr=o(" \u2014 "),LW=a("a"),lTr=o("FlaxGPT2LMHeadModel"),iTr=o(" (OpenAI GPT-2 model)"),dTr=l(),ME=a("li"),Wbe=a("strong"),cTr=o("gpt_neo"),fTr=o(" \u2014 "),xW=a("a"),mTr=o("FlaxGPTNeoForCausalLM"),gTr=o(" (GPT Neo model)"),hTr=l(),EE=a("li"),Hbe=a("strong"),uTr=o("gptj"),pTr=o(" \u2014 "),$W=a("a"),_Tr=o("FlaxGPTJForCausalLM"),vTr=o(" (GPT-J model)"),bTr=l(),CE=a("li"),Ube=a("strong"),FTr=o("xglm"),TTr=o(" \u2014 "),kW=a("a"),MTr=o("FlaxXGLMForCausalLM"),ETr=o(" (XGLM model)"),CTr=l(),F(wE.$$.fragment),QSe=l(),hc=a("h2"),AE=a("a"),Jbe=a("span"),F(jL.$$.fragment),wTr=l(),Ybe=a("span"),ATr=o("FlaxAutoModelForPreTraining"),WSe=l(),cr=a("div"),F(DL.$$.fragment),yTr=l(),uc=a("p"),LTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=a("a"),xTr=o("from_pretrained()"),$Tr=o(" class method or the "),RW=a("a"),kTr=o("from_config()"),STr=o(` class
method.`),RTr=l(),GL=a("p"),BTr=o("This class cannot be instantiated directly using "),Kbe=a("code"),PTr=o("__init__()"),ITr=o(" (throws an error)."),qTr=l(),qt=a("div"),F(OL.$$.fragment),NTr=l(),Zbe=a("p"),jTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DTr=l(),pc=a("p"),GTr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),OTr=o("not"),VTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=a("a"),XTr=o("from_pretrained()"),zTr=o(" to load the model weights."),QTr=l(),F(yE.$$.fragment),WTr=l(),qr=a("div"),F(VL.$$.fragment),HTr=l(),o4e=a("p"),UTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JTr=l(),dn=a("p"),YTr=o("The model class to instantiate is selected based on the "),r4e=a("code"),KTr=o("model_type"),ZTr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),r8r=o("pretrained_model_name_or_path"),t8r=o(":"),a8r=l(),be=a("ul"),LE=a("li"),n4e=a("strong"),n8r=o("albert"),s8r=o(" \u2014 "),PW=a("a"),l8r=o("FlaxAlbertForPreTraining"),i8r=o(" (ALBERT model)"),d8r=l(),xE=a("li"),s4e=a("strong"),c8r=o("bart"),f8r=o(" \u2014 "),IW=a("a"),m8r=o("FlaxBartForConditionalGeneration"),g8r=o(" (BART model)"),h8r=l(),$E=a("li"),l4e=a("strong"),u8r=o("bert"),p8r=o(" \u2014 "),qW=a("a"),_8r=o("FlaxBertForPreTraining"),v8r=o(" (BERT model)"),b8r=l(),kE=a("li"),i4e=a("strong"),F8r=o("big_bird"),T8r=o(" \u2014 "),NW=a("a"),M8r=o("FlaxBigBirdForPreTraining"),E8r=o(" (BigBird model)"),C8r=l(),SE=a("li"),d4e=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),jW=a("a"),y8r=o("FlaxElectraForPreTraining"),L8r=o(" (ELECTRA model)"),x8r=l(),RE=a("li"),c4e=a("strong"),$8r=o("mbart"),k8r=o(" \u2014 "),DW=a("a"),S8r=o("FlaxMBartForConditionalGeneration"),R8r=o(" (mBART model)"),B8r=l(),BE=a("li"),f4e=a("strong"),P8r=o("mt5"),I8r=o(" \u2014 "),GW=a("a"),q8r=o("FlaxMT5ForConditionalGeneration"),N8r=o(" (mT5 model)"),j8r=l(),PE=a("li"),m4e=a("strong"),D8r=o("roberta"),G8r=o(" \u2014 "),OW=a("a"),O8r=o("FlaxRobertaForMaskedLM"),V8r=o(" (RoBERTa model)"),X8r=l(),IE=a("li"),g4e=a("strong"),z8r=o("roformer"),Q8r=o(" \u2014 "),VW=a("a"),W8r=o("FlaxRoFormerForMaskedLM"),H8r=o(" (RoFormer model)"),U8r=l(),qE=a("li"),h4e=a("strong"),J8r=o("t5"),Y8r=o(" \u2014 "),XW=a("a"),K8r=o("FlaxT5ForConditionalGeneration"),Z8r=o(" (T5 model)"),eMr=l(),NE=a("li"),u4e=a("strong"),oMr=o("wav2vec2"),rMr=o(" \u2014 "),zW=a("a"),tMr=o("FlaxWav2Vec2ForPreTraining"),aMr=o(" (Wav2Vec2 model)"),nMr=l(),jE=a("li"),p4e=a("strong"),sMr=o("xlm-roberta"),lMr=o(" \u2014 "),QW=a("a"),iMr=o("FlaxXLMRobertaForMaskedLM"),dMr=o(" (XLM-RoBERTa model)"),cMr=l(),F(DE.$$.fragment),HSe=l(),_c=a("h2"),GE=a("a"),_4e=a("span"),F(XL.$$.fragment),fMr=l(),v4e=a("span"),mMr=o("FlaxAutoModelForMaskedLM"),USe=l(),fr=a("div"),F(zL.$$.fragment),gMr=l(),vc=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=a("a"),uMr=o("from_pretrained()"),pMr=o(" class method or the "),HW=a("a"),_Mr=o("from_config()"),vMr=o(` class
method.`),bMr=l(),QL=a("p"),FMr=o("This class cannot be instantiated directly using "),b4e=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),Nt=a("div"),F(WL.$$.fragment),CMr=l(),F4e=a("p"),wMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AMr=l(),bc=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),LMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(OE.$$.fragment),RMr=l(),Nr=a("div"),F(HL.$$.fragment),BMr=l(),M4e=a("p"),PMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IMr=l(),cn=a("p"),qMr=o("The model class to instantiate is selected based on the "),E4e=a("code"),NMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),we=a("ul"),VE=a("li"),A4e=a("strong"),zMr=o("albert"),QMr=o(" \u2014 "),JW=a("a"),WMr=o("FlaxAlbertForMaskedLM"),HMr=o(" (ALBERT model)"),UMr=l(),XE=a("li"),y4e=a("strong"),JMr=o("bart"),YMr=o(" \u2014 "),YW=a("a"),KMr=o("FlaxBartForConditionalGeneration"),ZMr=o(" (BART model)"),eEr=l(),zE=a("li"),L4e=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),KW=a("a"),tEr=o("FlaxBertForMaskedLM"),aEr=o(" (BERT model)"),nEr=l(),QE=a("li"),x4e=a("strong"),sEr=o("big_bird"),lEr=o(" \u2014 "),ZW=a("a"),iEr=o("FlaxBigBirdForMaskedLM"),dEr=o(" (BigBird model)"),cEr=l(),WE=a("li"),$4e=a("strong"),fEr=o("distilbert"),mEr=o(" \u2014 "),eH=a("a"),gEr=o("FlaxDistilBertForMaskedLM"),hEr=o(" (DistilBERT model)"),uEr=l(),HE=a("li"),k4e=a("strong"),pEr=o("electra"),_Er=o(" \u2014 "),oH=a("a"),vEr=o("FlaxElectraForMaskedLM"),bEr=o(" (ELECTRA model)"),FEr=l(),UE=a("li"),S4e=a("strong"),TEr=o("mbart"),MEr=o(" \u2014 "),rH=a("a"),EEr=o("FlaxMBartForConditionalGeneration"),CEr=o(" (mBART model)"),wEr=l(),JE=a("li"),R4e=a("strong"),AEr=o("roberta"),yEr=o(" \u2014 "),tH=a("a"),LEr=o("FlaxRobertaForMaskedLM"),xEr=o(" (RoBERTa model)"),$Er=l(),YE=a("li"),B4e=a("strong"),kEr=o("roformer"),SEr=o(" \u2014 "),aH=a("a"),REr=o("FlaxRoFormerForMaskedLM"),BEr=o(" (RoFormer model)"),PEr=l(),KE=a("li"),P4e=a("strong"),IEr=o("xlm-roberta"),qEr=o(" \u2014 "),nH=a("a"),NEr=o("FlaxXLMRobertaForMaskedLM"),jEr=o(" (XLM-RoBERTa model)"),DEr=l(),F(ZE.$$.fragment),JSe=l(),Fc=a("h2"),e5=a("a"),I4e=a("span"),F(UL.$$.fragment),GEr=l(),q4e=a("span"),OEr=o("FlaxAutoModelForSeq2SeqLM"),YSe=l(),mr=a("div"),F(JL.$$.fragment),VEr=l(),Tc=a("p"),XEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=a("a"),zEr=o("from_pretrained()"),QEr=o(" class method or the "),lH=a("a"),WEr=o("from_config()"),HEr=o(` class
method.`),UEr=l(),YL=a("p"),JEr=o("This class cannot be instantiated directly using "),N4e=a("code"),YEr=o("__init__()"),KEr=o(" (throws an error)."),ZEr=l(),jt=a("div"),F(KL.$$.fragment),e5r=l(),j4e=a("p"),o5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r5r=l(),Mc=a("p"),t5r=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),a5r=o("not"),n5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),s5r=o("from_pretrained()"),l5r=o(" to load the model weights."),i5r=l(),F(o5.$$.fragment),d5r=l(),jr=a("div"),F(ZL.$$.fragment),c5r=l(),G4e=a("p"),f5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m5r=l(),fn=a("p"),g5r=o("The model class to instantiate is selected based on the "),O4e=a("code"),h5r=o("model_type"),u5r=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),p5r=o("pretrained_model_name_or_path"),_5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),v5r=o("pretrained_model_name_or_path"),b5r=o(":"),F5r=l(),xe=a("ul"),r5=a("li"),z4e=a("strong"),T5r=o("bart"),M5r=o(" \u2014 "),dH=a("a"),E5r=o("FlaxBartForConditionalGeneration"),C5r=o(" (BART model)"),w5r=l(),t5=a("li"),Q4e=a("strong"),A5r=o("blenderbot"),y5r=o(" \u2014 "),cH=a("a"),L5r=o("FlaxBlenderbotForConditionalGeneration"),x5r=o(" (Blenderbot model)"),$5r=l(),a5=a("li"),W4e=a("strong"),k5r=o("blenderbot-small"),S5r=o(" \u2014 "),fH=a("a"),R5r=o("FlaxBlenderbotSmallForConditionalGeneration"),B5r=o(" (BlenderbotSmall model)"),P5r=l(),n5=a("li"),H4e=a("strong"),I5r=o("encoder-decoder"),q5r=o(" \u2014 "),mH=a("a"),N5r=o("FlaxEncoderDecoderModel"),j5r=o(" (Encoder decoder model)"),D5r=l(),s5=a("li"),U4e=a("strong"),G5r=o("marian"),O5r=o(" \u2014 "),gH=a("a"),V5r=o("FlaxMarianMTModel"),X5r=o(" (Marian model)"),z5r=l(),l5=a("li"),J4e=a("strong"),Q5r=o("mbart"),W5r=o(" \u2014 "),hH=a("a"),H5r=o("FlaxMBartForConditionalGeneration"),U5r=o(" (mBART model)"),J5r=l(),i5=a("li"),Y4e=a("strong"),Y5r=o("mt5"),K5r=o(" \u2014 "),uH=a("a"),Z5r=o("FlaxMT5ForConditionalGeneration"),eCr=o(" (mT5 model)"),oCr=l(),d5=a("li"),K4e=a("strong"),rCr=o("pegasus"),tCr=o(" \u2014 "),pH=a("a"),aCr=o("FlaxPegasusForConditionalGeneration"),nCr=o(" (Pegasus model)"),sCr=l(),c5=a("li"),Z4e=a("strong"),lCr=o("t5"),iCr=o(" \u2014 "),_H=a("a"),dCr=o("FlaxT5ForConditionalGeneration"),cCr=o(" (T5 model)"),fCr=l(),F(f5.$$.fragment),KSe=l(),Ec=a("h2"),m5=a("a"),e2e=a("span"),F(ex.$$.fragment),mCr=l(),o2e=a("span"),gCr=o("FlaxAutoModelForSequenceClassification"),ZSe=l(),gr=a("div"),F(ox.$$.fragment),hCr=l(),Cc=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vH=a("a"),pCr=o("from_pretrained()"),_Cr=o(" class method or the "),bH=a("a"),vCr=o("from_config()"),bCr=o(` class
method.`),FCr=l(),rx=a("p"),TCr=o("This class cannot be instantiated directly using "),r2e=a("code"),MCr=o("__init__()"),ECr=o(" (throws an error)."),CCr=l(),Dt=a("div"),F(tx.$$.fragment),wCr=l(),t2e=a("p"),ACr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yCr=l(),wc=a("p"),LCr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),xCr=o("not"),$Cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),kCr=o("from_pretrained()"),SCr=o(" to load the model weights."),RCr=l(),F(g5.$$.fragment),BCr=l(),Dr=a("div"),F(ax.$$.fragment),PCr=l(),n2e=a("p"),ICr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qCr=l(),mn=a("p"),NCr=o("The model class to instantiate is selected based on the "),s2e=a("code"),jCr=o("model_type"),DCr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),GCr=o("pretrained_model_name_or_path"),OCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(":"),zCr=l(),Ae=a("ul"),h5=a("li"),d2e=a("strong"),QCr=o("albert"),WCr=o(" \u2014 "),TH=a("a"),HCr=o("FlaxAlbertForSequenceClassification"),UCr=o(" (ALBERT model)"),JCr=l(),u5=a("li"),c2e=a("strong"),YCr=o("bart"),KCr=o(" \u2014 "),MH=a("a"),ZCr=o("FlaxBartForSequenceClassification"),e3r=o(" (BART model)"),o3r=l(),p5=a("li"),f2e=a("strong"),r3r=o("bert"),t3r=o(" \u2014 "),EH=a("a"),a3r=o("FlaxBertForSequenceClassification"),n3r=o(" (BERT model)"),s3r=l(),_5=a("li"),m2e=a("strong"),l3r=o("big_bird"),i3r=o(" \u2014 "),CH=a("a"),d3r=o("FlaxBigBirdForSequenceClassification"),c3r=o(" (BigBird model)"),f3r=l(),v5=a("li"),g2e=a("strong"),m3r=o("distilbert"),g3r=o(" \u2014 "),wH=a("a"),h3r=o("FlaxDistilBertForSequenceClassification"),u3r=o(" (DistilBERT model)"),p3r=l(),b5=a("li"),h2e=a("strong"),_3r=o("electra"),v3r=o(" \u2014 "),AH=a("a"),b3r=o("FlaxElectraForSequenceClassification"),F3r=o(" (ELECTRA model)"),T3r=l(),F5=a("li"),u2e=a("strong"),M3r=o("mbart"),E3r=o(" \u2014 "),yH=a("a"),C3r=o("FlaxMBartForSequenceClassification"),w3r=o(" (mBART model)"),A3r=l(),T5=a("li"),p2e=a("strong"),y3r=o("roberta"),L3r=o(" \u2014 "),LH=a("a"),x3r=o("FlaxRobertaForSequenceClassification"),$3r=o(" (RoBERTa model)"),k3r=l(),M5=a("li"),_2e=a("strong"),S3r=o("roformer"),R3r=o(" \u2014 "),xH=a("a"),B3r=o("FlaxRoFormerForSequenceClassification"),P3r=o(" (RoFormer model)"),I3r=l(),E5=a("li"),v2e=a("strong"),q3r=o("xlm-roberta"),N3r=o(" \u2014 "),$H=a("a"),j3r=o("FlaxXLMRobertaForSequenceClassification"),D3r=o(" (XLM-RoBERTa model)"),G3r=l(),F(C5.$$.fragment),eRe=l(),Ac=a("h2"),w5=a("a"),b2e=a("span"),F(nx.$$.fragment),O3r=l(),F2e=a("span"),V3r=o("FlaxAutoModelForQuestionAnswering"),oRe=l(),hr=a("div"),F(sx.$$.fragment),X3r=l(),yc=a("p"),z3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kH=a("a"),Q3r=o("from_pretrained()"),W3r=o(" class method or the "),SH=a("a"),H3r=o("from_config()"),U3r=o(` class
method.`),J3r=l(),lx=a("p"),Y3r=o("This class cannot be instantiated directly using "),T2e=a("code"),K3r=o("__init__()"),Z3r=o(" (throws an error)."),ewr=l(),Gt=a("div"),F(ix.$$.fragment),owr=l(),M2e=a("p"),rwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),twr=l(),Lc=a("p"),awr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),nwr=o("not"),swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),lwr=o("from_pretrained()"),iwr=o(" to load the model weights."),dwr=l(),F(A5.$$.fragment),cwr=l(),Gr=a("div"),F(dx.$$.fragment),fwr=l(),C2e=a("p"),mwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gwr=l(),gn=a("p"),hwr=o("The model class to instantiate is selected based on the "),w2e=a("code"),uwr=o("model_type"),pwr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),_wr=o("pretrained_model_name_or_path"),vwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),bwr=o("pretrained_model_name_or_path"),Fwr=o(":"),Twr=l(),ye=a("ul"),y5=a("li"),L2e=a("strong"),Mwr=o("albert"),Ewr=o(" \u2014 "),BH=a("a"),Cwr=o("FlaxAlbertForQuestionAnswering"),wwr=o(" (ALBERT model)"),Awr=l(),L5=a("li"),x2e=a("strong"),ywr=o("bart"),Lwr=o(" \u2014 "),PH=a("a"),xwr=o("FlaxBartForQuestionAnswering"),$wr=o(" (BART model)"),kwr=l(),x5=a("li"),$2e=a("strong"),Swr=o("bert"),Rwr=o(" \u2014 "),IH=a("a"),Bwr=o("FlaxBertForQuestionAnswering"),Pwr=o(" (BERT model)"),Iwr=l(),$5=a("li"),k2e=a("strong"),qwr=o("big_bird"),Nwr=o(" \u2014 "),qH=a("a"),jwr=o("FlaxBigBirdForQuestionAnswering"),Dwr=o(" (BigBird model)"),Gwr=l(),k5=a("li"),S2e=a("strong"),Owr=o("distilbert"),Vwr=o(" \u2014 "),NH=a("a"),Xwr=o("FlaxDistilBertForQuestionAnswering"),zwr=o(" (DistilBERT model)"),Qwr=l(),S5=a("li"),R2e=a("strong"),Wwr=o("electra"),Hwr=o(" \u2014 "),jH=a("a"),Uwr=o("FlaxElectraForQuestionAnswering"),Jwr=o(" (ELECTRA model)"),Ywr=l(),R5=a("li"),B2e=a("strong"),Kwr=o("mbart"),Zwr=o(" \u2014 "),DH=a("a"),eAr=o("FlaxMBartForQuestionAnswering"),oAr=o(" (mBART model)"),rAr=l(),B5=a("li"),P2e=a("strong"),tAr=o("roberta"),aAr=o(" \u2014 "),GH=a("a"),nAr=o("FlaxRobertaForQuestionAnswering"),sAr=o(" (RoBERTa model)"),lAr=l(),P5=a("li"),I2e=a("strong"),iAr=o("roformer"),dAr=o(" \u2014 "),OH=a("a"),cAr=o("FlaxRoFormerForQuestionAnswering"),fAr=o(" (RoFormer model)"),mAr=l(),I5=a("li"),q2e=a("strong"),gAr=o("xlm-roberta"),hAr=o(" \u2014 "),VH=a("a"),uAr=o("FlaxXLMRobertaForQuestionAnswering"),pAr=o(" (XLM-RoBERTa model)"),_Ar=l(),F(q5.$$.fragment),rRe=l(),xc=a("h2"),N5=a("a"),N2e=a("span"),F(cx.$$.fragment),vAr=l(),j2e=a("span"),bAr=o("FlaxAutoModelForTokenClassification"),tRe=l(),ur=a("div"),F(fx.$$.fragment),FAr=l(),$c=a("p"),TAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XH=a("a"),MAr=o("from_pretrained()"),EAr=o(" class method or the "),zH=a("a"),CAr=o("from_config()"),wAr=o(` class
method.`),AAr=l(),mx=a("p"),yAr=o("This class cannot be instantiated directly using "),D2e=a("code"),LAr=o("__init__()"),xAr=o(" (throws an error)."),$Ar=l(),Ot=a("div"),F(gx.$$.fragment),kAr=l(),G2e=a("p"),SAr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RAr=l(),kc=a("p"),BAr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),PAr=o("not"),IAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),qAr=o("from_pretrained()"),NAr=o(" to load the model weights."),jAr=l(),F(j5.$$.fragment),DAr=l(),Or=a("div"),F(hx.$$.fragment),GAr=l(),V2e=a("p"),OAr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VAr=l(),hn=a("p"),XAr=o("The model class to instantiate is selected based on the "),X2e=a("code"),zAr=o("model_type"),QAr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),WAr=o("pretrained_model_name_or_path"),HAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),UAr=o("pretrained_model_name_or_path"),JAr=o(":"),YAr=l(),Ne=a("ul"),D5=a("li"),W2e=a("strong"),KAr=o("albert"),ZAr=o(" \u2014 "),WH=a("a"),e6r=o("FlaxAlbertForTokenClassification"),o6r=o(" (ALBERT model)"),r6r=l(),G5=a("li"),H2e=a("strong"),t6r=o("bert"),a6r=o(" \u2014 "),HH=a("a"),n6r=o("FlaxBertForTokenClassification"),s6r=o(" (BERT model)"),l6r=l(),O5=a("li"),U2e=a("strong"),i6r=o("big_bird"),d6r=o(" \u2014 "),UH=a("a"),c6r=o("FlaxBigBirdForTokenClassification"),f6r=o(" (BigBird model)"),m6r=l(),V5=a("li"),J2e=a("strong"),g6r=o("distilbert"),h6r=o(" \u2014 "),JH=a("a"),u6r=o("FlaxDistilBertForTokenClassification"),p6r=o(" (DistilBERT model)"),_6r=l(),X5=a("li"),Y2e=a("strong"),v6r=o("electra"),b6r=o(" \u2014 "),YH=a("a"),F6r=o("FlaxElectraForTokenClassification"),T6r=o(" (ELECTRA model)"),M6r=l(),z5=a("li"),K2e=a("strong"),E6r=o("roberta"),C6r=o(" \u2014 "),KH=a("a"),w6r=o("FlaxRobertaForTokenClassification"),A6r=o(" (RoBERTa model)"),y6r=l(),Q5=a("li"),Z2e=a("strong"),L6r=o("roformer"),x6r=o(" \u2014 "),ZH=a("a"),$6r=o("FlaxRoFormerForTokenClassification"),k6r=o(" (RoFormer model)"),S6r=l(),W5=a("li"),eFe=a("strong"),R6r=o("xlm-roberta"),B6r=o(" \u2014 "),eU=a("a"),P6r=o("FlaxXLMRobertaForTokenClassification"),I6r=o(" (XLM-RoBERTa model)"),q6r=l(),F(H5.$$.fragment),aRe=l(),Sc=a("h2"),U5=a("a"),oFe=a("span"),F(ux.$$.fragment),N6r=l(),rFe=a("span"),j6r=o("FlaxAutoModelForMultipleChoice"),nRe=l(),pr=a("div"),F(px.$$.fragment),D6r=l(),Rc=a("p"),G6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oU=a("a"),O6r=o("from_pretrained()"),V6r=o(" class method or the "),rU=a("a"),X6r=o("from_config()"),z6r=o(` class
method.`),Q6r=l(),_x=a("p"),W6r=o("This class cannot be instantiated directly using "),tFe=a("code"),H6r=o("__init__()"),U6r=o(" (throws an error)."),J6r=l(),Vt=a("div"),F(vx.$$.fragment),Y6r=l(),aFe=a("p"),K6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z6r=l(),Bc=a("p"),eyr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),oyr=o("not"),ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),tyr=o("from_pretrained()"),ayr=o(" to load the model weights."),nyr=l(),F(J5.$$.fragment),syr=l(),Vr=a("div"),F(bx.$$.fragment),lyr=l(),sFe=a("p"),iyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dyr=l(),un=a("p"),cyr=o("The model class to instantiate is selected based on the "),lFe=a("code"),fyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),uyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),je=a("ul"),Y5=a("li"),cFe=a("strong"),vyr=o("albert"),byr=o(" \u2014 "),aU=a("a"),Fyr=o("FlaxAlbertForMultipleChoice"),Tyr=o(" (ALBERT model)"),Myr=l(),K5=a("li"),fFe=a("strong"),Eyr=o("bert"),Cyr=o(" \u2014 "),nU=a("a"),wyr=o("FlaxBertForMultipleChoice"),Ayr=o(" (BERT model)"),yyr=l(),Z5=a("li"),mFe=a("strong"),Lyr=o("big_bird"),xyr=o(" \u2014 "),sU=a("a"),$yr=o("FlaxBigBirdForMultipleChoice"),kyr=o(" (BigBird model)"),Syr=l(),eC=a("li"),gFe=a("strong"),Ryr=o("distilbert"),Byr=o(" \u2014 "),lU=a("a"),Pyr=o("FlaxDistilBertForMultipleChoice"),Iyr=o(" (DistilBERT model)"),qyr=l(),oC=a("li"),hFe=a("strong"),Nyr=o("electra"),jyr=o(" \u2014 "),iU=a("a"),Dyr=o("FlaxElectraForMultipleChoice"),Gyr=o(" (ELECTRA model)"),Oyr=l(),rC=a("li"),uFe=a("strong"),Vyr=o("roberta"),Xyr=o(" \u2014 "),dU=a("a"),zyr=o("FlaxRobertaForMultipleChoice"),Qyr=o(" (RoBERTa model)"),Wyr=l(),tC=a("li"),pFe=a("strong"),Hyr=o("roformer"),Uyr=o(" \u2014 "),cU=a("a"),Jyr=o("FlaxRoFormerForMultipleChoice"),Yyr=o(" (RoFormer model)"),Kyr=l(),aC=a("li"),_Fe=a("strong"),Zyr=o("xlm-roberta"),eLr=o(" \u2014 "),fU=a("a"),oLr=o("FlaxXLMRobertaForMultipleChoice"),rLr=o(" (XLM-RoBERTa model)"),tLr=l(),F(nC.$$.fragment),sRe=l(),Pc=a("h2"),sC=a("a"),vFe=a("span"),F(Fx.$$.fragment),aLr=l(),bFe=a("span"),nLr=o("FlaxAutoModelForNextSentencePrediction"),lRe=l(),_r=a("div"),F(Tx.$$.fragment),sLr=l(),Ic=a("p"),lLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mU=a("a"),iLr=o("from_pretrained()"),dLr=o(" class method or the "),gU=a("a"),cLr=o("from_config()"),fLr=o(` class
method.`),mLr=l(),Mx=a("p"),gLr=o("This class cannot be instantiated directly using "),FFe=a("code"),hLr=o("__init__()"),uLr=o(" (throws an error)."),pLr=l(),Xt=a("div"),F(Ex.$$.fragment),_Lr=l(),TFe=a("p"),vLr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bLr=l(),qc=a("p"),FLr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),TLr=o("not"),MLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),ELr=o("from_pretrained()"),CLr=o(" to load the model weights."),wLr=l(),F(lC.$$.fragment),ALr=l(),Xr=a("div"),F(Cx.$$.fragment),yLr=l(),EFe=a("p"),LLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xLr=l(),pn=a("p"),$Lr=o("The model class to instantiate is selected based on the "),CFe=a("code"),kLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),PLr=o("pretrained_model_name_or_path"),ILr=o(":"),qLr=l(),yFe=a("ul"),iC=a("li"),LFe=a("strong"),NLr=o("bert"),jLr=o(" \u2014 "),uU=a("a"),DLr=o("FlaxBertForNextSentencePrediction"),GLr=o(" (BERT model)"),OLr=l(),F(dC.$$.fragment),iRe=l(),Nc=a("h2"),cC=a("a"),xFe=a("span"),F(wx.$$.fragment),VLr=l(),$Fe=a("span"),XLr=o("FlaxAutoModelForImageClassification"),dRe=l(),vr=a("div"),F(Ax.$$.fragment),zLr=l(),jc=a("p"),QLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pU=a("a"),WLr=o("from_pretrained()"),HLr=o(" class method or the "),_U=a("a"),ULr=o("from_config()"),JLr=o(` class
method.`),YLr=l(),yx=a("p"),KLr=o("This class cannot be instantiated directly using "),kFe=a("code"),ZLr=o("__init__()"),exr=o(" (throws an error)."),oxr=l(),zt=a("div"),F(Lx.$$.fragment),rxr=l(),SFe=a("p"),txr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),axr=l(),Dc=a("p"),nxr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),sxr=o("not"),lxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),ixr=o("from_pretrained()"),dxr=o(" to load the model weights."),cxr=l(),F(fC.$$.fragment),fxr=l(),zr=a("div"),F(xx.$$.fragment),mxr=l(),BFe=a("p"),gxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hxr=l(),_n=a("p"),uxr=o("The model class to instantiate is selected based on the "),PFe=a("code"),pxr=o("model_type"),_xr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),vxr=o("pretrained_model_name_or_path"),bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),Fxr=o("pretrained_model_name_or_path"),Txr=o(":"),Mxr=l(),$x=a("ul"),mC=a("li"),NFe=a("strong"),Exr=o("beit"),Cxr=o(" \u2014 "),bU=a("a"),wxr=o("FlaxBeitForImageClassification"),Axr=o(" (BEiT model)"),yxr=l(),gC=a("li"),jFe=a("strong"),Lxr=o("vit"),xxr=o(" \u2014 "),FU=a("a"),$xr=o("FlaxViTForImageClassification"),kxr=o(" (ViT model)"),Sxr=l(),F(hC.$$.fragment),cRe=l(),Gc=a("h2"),uC=a("a"),DFe=a("span"),F(kx.$$.fragment),Rxr=l(),GFe=a("span"),Bxr=o("FlaxAutoModelForVision2Seq"),fRe=l(),br=a("div"),F(Sx.$$.fragment),Pxr=l(),Oc=a("p"),Ixr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=a("a"),qxr=o("from_pretrained()"),Nxr=o(" class method or the "),MU=a("a"),jxr=o("from_config()"),Dxr=o(` class
method.`),Gxr=l(),Rx=a("p"),Oxr=o("This class cannot be instantiated directly using "),OFe=a("code"),Vxr=o("__init__()"),Xxr=o(" (throws an error)."),zxr=l(),Qt=a("div"),F(Bx.$$.fragment),Qxr=l(),VFe=a("p"),Wxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hxr=l(),Vc=a("p"),Uxr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Jxr=o("not"),Yxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),Kxr=o("from_pretrained()"),Zxr=o(" to load the model weights."),e7r=l(),F(pC.$$.fragment),o7r=l(),Qr=a("div"),F(Px.$$.fragment),r7r=l(),zFe=a("p"),t7r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a7r=l(),vn=a("p"),n7r=o("The model class to instantiate is selected based on the "),QFe=a("code"),s7r=o("model_type"),l7r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(":"),m7r=l(),UFe=a("ul"),_C=a("li"),JFe=a("strong"),g7r=o("vision-encoder-decoder"),h7r=o(" \u2014 "),CU=a("a"),u7r=o("FlaxVisionEncoderDecoderModel"),p7r=o(" (Vision Encoder decoder model)"),_7r=l(),F(vC.$$.fragment),this.h()},l(f){const _=R4t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),b=i(f),u=n(f,"H1",{class:!0});var Ix=s(u);m=n(Ix,"A",{id:!0,class:!0,href:!0});var YFe=s(m);p=n(YFe,"SPAN",{});var KFe=s(p);T(d.$$.fragment,KFe),KFe.forEach(t),YFe.forEach(t),h=i(Ix),Fo=n(Ix,"SPAN",{});var ZFe=s(Fo);Ql=r(ZFe,"Auto Classes"),ZFe.forEach(t),Ix.forEach(t),Wc=i(f),Yr=n(f,"P",{});var qx=s(Yr);Wl=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=n(qx,"CODE",{});var e0e=s(Hl);Rw=r(e0e,"from_pretrained()"),e0e.forEach(t),Hc=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),Be=i(f),Ge=n(f,"P",{});var bn=s(Ge);Ul=r(bn,"Instantiating one of "),Fn=n(bn,"A",{href:!0});var o0e=s(Fn);Bw=r(o0e,"AutoConfig"),o0e.forEach(t),Tn=r(bn,", "),Mn=n(bn,"A",{href:!0});var r0e=s(Mn);Pw=r(r0e,"AutoModel"),r0e.forEach(t),Jl=r(bn,`, and
`),En=n(bn,"A",{href:!0});var t0e=s(En);Iw=r(t0e,"AutoTokenizer"),t0e.forEach(t),Yl=r(bn," will directly create a class of the relevant architecture. For instance"),bn.forEach(t),Uc=i(f),T(va.$$.fragment,f),Oe=i(f),Ee=n(f,"P",{});var Nx=s(Ee);D7=r(Nx,"will create a model that is an instance of "),Kl=n(Nx,"A",{href:!0});var a0e=s(Kl);G7=r(a0e,"BertModel"),a0e.forEach(t),O7=r(Nx,"."),Nx.forEach(t),To=i(f),ba=n(f,"P",{});var jx=s(ba);V7=r(jx,"There is one class of "),Jc=n(jx,"CODE",{});var n0e=s(Jc);X7=r(n0e,"AutoModel"),n0e.forEach(t),_Pe=r(jx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jx.forEach(t),fke=i(f),Zl=n(f,"H2",{class:!0});var Dx=s(Zl);Yc=n(Dx,"A",{id:!0,class:!0,href:!0});var s0e=s(Yc);pY=n(s0e,"SPAN",{});var l0e=s(pY);T(qw.$$.fragment,l0e),l0e.forEach(t),s0e.forEach(t),vPe=i(Dx),_Y=n(Dx,"SPAN",{});var i0e=s(_Y);bPe=r(i0e,"Extending the Auto Classes"),i0e.forEach(t),Dx.forEach(t),mke=i(f),Cn=n(f,"P",{});var Xc=s(Cn);FPe=r(Xc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vY=n(Xc,"CODE",{});var d0e=s(vY);TPe=r(d0e,"NewModel"),d0e.forEach(t),MPe=r(Xc,", make sure you have a "),bY=n(Xc,"CODE",{});var c0e=s(bY);EPe=r(c0e,"NewModelConfig"),c0e.forEach(t),CPe=r(Xc,` then you can add those to the auto
classes like this:`),Xc.forEach(t),gke=i(f),T(Nw.$$.fragment,f),hke=i(f),z7=n(f,"P",{});var f0e=s(z7);wPe=r(f0e,"You will then be able to use the auto classes like you would usually do!"),f0e.forEach(t),uke=i(f),T(Kc.$$.fragment,f),pke=i(f),ei=n(f,"H2",{class:!0});var Gx=s(ei);Zc=n(Gx,"A",{id:!0,class:!0,href:!0});var m0e=s(Zc);FY=n(m0e,"SPAN",{});var g0e=s(FY);T(jw.$$.fragment,g0e),g0e.forEach(t),m0e.forEach(t),APe=i(Gx),TY=n(Gx,"SPAN",{});var h0e=s(TY);yPe=r(h0e,"AutoConfig"),h0e.forEach(t),Gx.forEach(t),_ke=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(Dw.$$.fragment,Ur),LPe=i(Ur),Gw=n(Ur,"P",{});var Ox=s(Gw);xPe=r(Ox,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q7=n(Ox,"A",{href:!0});var u0e=s(Q7);$Pe=r(u0e,"from_pretrained()"),u0e.forEach(t),kPe=r(Ox," class method."),Ox.forEach(t),SPe=i(Ur),Ow=n(Ur,"P",{});var Vx=s(Ow);RPe=r(Vx,"This class cannot be instantiated directly using "),MY=n(Vx,"CODE",{});var p0e=s(MY);BPe=r(p0e,"__init__()"),p0e.forEach(t),PPe=r(Vx," (throws an error)."),Vx.forEach(t),IPe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(Vw.$$.fragment,Jr),qPe=i(Jr),EY=n(Jr,"P",{});var _0e=s(EY);NPe=r(_0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),_0e.forEach(t),jPe=i(Jr),oi=n(Jr,"P",{});var zc=s(oi);DPe=r(zc,"The configuration class to instantiate is selected based on the "),CY=n(zc,"CODE",{});var v0e=s(CY);GPe=r(v0e,"model_type"),v0e.forEach(t),OPe=r(zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wY=n(zc,"CODE",{});var b0e=s(wY);VPe=r(b0e,"pretrained_model_name_or_path"),b0e.forEach(t),XPe=r(zc,":"),zc.forEach(t),zPe=i(Jr),y=n(Jr,"UL",{});var L=s(y);ef=n(L,"LI",{});var bC=s(ef);AY=n(bC,"STRONG",{});var F0e=s(AY);QPe=r(F0e,"albert"),F0e.forEach(t),WPe=r(bC," \u2014 "),W7=n(bC,"A",{href:!0});var T0e=s(W7);HPe=r(T0e,"AlbertConfig"),T0e.forEach(t),UPe=r(bC," (ALBERT model)"),bC.forEach(t),JPe=i(L),of=n(L,"LI",{});var FC=s(of);yY=n(FC,"STRONG",{});var M0e=s(yY);YPe=r(M0e,"bart"),M0e.forEach(t),KPe=r(FC," \u2014 "),H7=n(FC,"A",{href:!0});var E0e=s(H7);ZPe=r(E0e,"BartConfig"),E0e.forEach(t),eIe=r(FC," (BART model)"),FC.forEach(t),oIe=i(L),rf=n(L,"LI",{});var TC=s(rf);LY=n(TC,"STRONG",{});var C0e=s(LY);rIe=r(C0e,"beit"),C0e.forEach(t),tIe=r(TC," \u2014 "),U7=n(TC,"A",{href:!0});var w0e=s(U7);aIe=r(w0e,"BeitConfig"),w0e.forEach(t),nIe=r(TC," (BEiT model)"),TC.forEach(t),sIe=i(L),tf=n(L,"LI",{});var MC=s(tf);xY=n(MC,"STRONG",{});var A0e=s(xY);lIe=r(A0e,"bert"),A0e.forEach(t),iIe=r(MC," \u2014 "),J7=n(MC,"A",{href:!0});var y0e=s(J7);dIe=r(y0e,"BertConfig"),y0e.forEach(t),cIe=r(MC," (BERT model)"),MC.forEach(t),fIe=i(L),af=n(L,"LI",{});var EC=s(af);$Y=n(EC,"STRONG",{});var L0e=s($Y);mIe=r(L0e,"bert-generation"),L0e.forEach(t),gIe=r(EC," \u2014 "),Y7=n(EC,"A",{href:!0});var x0e=s(Y7);hIe=r(x0e,"BertGenerationConfig"),x0e.forEach(t),uIe=r(EC," (Bert Generation model)"),EC.forEach(t),pIe=i(L),nf=n(L,"LI",{});var CC=s(nf);kY=n(CC,"STRONG",{});var $0e=s(kY);_Ie=r($0e,"big_bird"),$0e.forEach(t),vIe=r(CC," \u2014 "),K7=n(CC,"A",{href:!0});var k0e=s(K7);bIe=r(k0e,"BigBirdConfig"),k0e.forEach(t),FIe=r(CC," (BigBird model)"),CC.forEach(t),TIe=i(L),sf=n(L,"LI",{});var wC=s(sf);SY=n(wC,"STRONG",{});var S0e=s(SY);MIe=r(S0e,"bigbird_pegasus"),S0e.forEach(t),EIe=r(wC," \u2014 "),Z7=n(wC,"A",{href:!0});var R0e=s(Z7);CIe=r(R0e,"BigBirdPegasusConfig"),R0e.forEach(t),wIe=r(wC," (BigBirdPegasus model)"),wC.forEach(t),AIe=i(L),lf=n(L,"LI",{});var AC=s(lf);RY=n(AC,"STRONG",{});var B0e=s(RY);yIe=r(B0e,"blenderbot"),B0e.forEach(t),LIe=r(AC," \u2014 "),e9=n(AC,"A",{href:!0});var P0e=s(e9);xIe=r(P0e,"BlenderbotConfig"),P0e.forEach(t),$Ie=r(AC," (Blenderbot model)"),AC.forEach(t),kIe=i(L),df=n(L,"LI",{});var yC=s(df);BY=n(yC,"STRONG",{});var I0e=s(BY);SIe=r(I0e,"blenderbot-small"),I0e.forEach(t),RIe=r(yC," \u2014 "),o9=n(yC,"A",{href:!0});var q0e=s(o9);BIe=r(q0e,"BlenderbotSmallConfig"),q0e.forEach(t),PIe=r(yC," (BlenderbotSmall model)"),yC.forEach(t),IIe=i(L),cf=n(L,"LI",{});var LC=s(cf);PY=n(LC,"STRONG",{});var N0e=s(PY);qIe=r(N0e,"camembert"),N0e.forEach(t),NIe=r(LC," \u2014 "),r9=n(LC,"A",{href:!0});var j0e=s(r9);jIe=r(j0e,"CamembertConfig"),j0e.forEach(t),DIe=r(LC," (CamemBERT model)"),LC.forEach(t),GIe=i(L),ff=n(L,"LI",{});var xC=s(ff);IY=n(xC,"STRONG",{});var D0e=s(IY);OIe=r(D0e,"canine"),D0e.forEach(t),VIe=r(xC," \u2014 "),t9=n(xC,"A",{href:!0});var G0e=s(t9);XIe=r(G0e,"CanineConfig"),G0e.forEach(t),zIe=r(xC," (Canine model)"),xC.forEach(t),QIe=i(L),mf=n(L,"LI",{});var $C=s(mf);qY=n($C,"STRONG",{});var O0e=s(qY);WIe=r(O0e,"clip"),O0e.forEach(t),HIe=r($C," \u2014 "),a9=n($C,"A",{href:!0});var V0e=s(a9);UIe=r(V0e,"CLIPConfig"),V0e.forEach(t),JIe=r($C," (CLIP model)"),$C.forEach(t),YIe=i(L),gf=n(L,"LI",{});var kC=s(gf);NY=n(kC,"STRONG",{});var X0e=s(NY);KIe=r(X0e,"convbert"),X0e.forEach(t),ZIe=r(kC," \u2014 "),n9=n(kC,"A",{href:!0});var z0e=s(n9);eqe=r(z0e,"ConvBertConfig"),z0e.forEach(t),oqe=r(kC," (ConvBERT model)"),kC.forEach(t),rqe=i(L),hf=n(L,"LI",{});var SC=s(hf);jY=n(SC,"STRONG",{});var Q0e=s(jY);tqe=r(Q0e,"convnext"),Q0e.forEach(t),aqe=r(SC," \u2014 "),s9=n(SC,"A",{href:!0});var W0e=s(s9);nqe=r(W0e,"ConvNextConfig"),W0e.forEach(t),sqe=r(SC," (ConvNext model)"),SC.forEach(t),lqe=i(L),uf=n(L,"LI",{});var RC=s(uf);DY=n(RC,"STRONG",{});var H0e=s(DY);iqe=r(H0e,"ctrl"),H0e.forEach(t),dqe=r(RC," \u2014 "),l9=n(RC,"A",{href:!0});var U0e=s(l9);cqe=r(U0e,"CTRLConfig"),U0e.forEach(t),fqe=r(RC," (CTRL model)"),RC.forEach(t),mqe=i(L),pf=n(L,"LI",{});var BC=s(pf);GY=n(BC,"STRONG",{});var J0e=s(GY);gqe=r(J0e,"data2vec-audio"),J0e.forEach(t),hqe=r(BC," \u2014 "),i9=n(BC,"A",{href:!0});var Y0e=s(i9);uqe=r(Y0e,"Data2VecAudioConfig"),Y0e.forEach(t),pqe=r(BC," (Data2VecAudio model)"),BC.forEach(t),_qe=i(L),_f=n(L,"LI",{});var PC=s(_f);OY=n(PC,"STRONG",{});var K0e=s(OY);vqe=r(K0e,"data2vec-text"),K0e.forEach(t),bqe=r(PC," \u2014 "),d9=n(PC,"A",{href:!0});var Z0e=s(d9);Fqe=r(Z0e,"Data2VecTextConfig"),Z0e.forEach(t),Tqe=r(PC," (Data2VecText model)"),PC.forEach(t),Mqe=i(L),vf=n(L,"LI",{});var IC=s(vf);VY=n(IC,"STRONG",{});var eTe=s(VY);Eqe=r(eTe,"deberta"),eTe.forEach(t),Cqe=r(IC," \u2014 "),c9=n(IC,"A",{href:!0});var oTe=s(c9);wqe=r(oTe,"DebertaConfig"),oTe.forEach(t),Aqe=r(IC," (DeBERTa model)"),IC.forEach(t),yqe=i(L),bf=n(L,"LI",{});var qC=s(bf);XY=n(qC,"STRONG",{});var rTe=s(XY);Lqe=r(rTe,"deberta-v2"),rTe.forEach(t),xqe=r(qC," \u2014 "),f9=n(qC,"A",{href:!0});var tTe=s(f9);$qe=r(tTe,"DebertaV2Config"),tTe.forEach(t),kqe=r(qC," (DeBERTa-v2 model)"),qC.forEach(t),Sqe=i(L),Ff=n(L,"LI",{});var NC=s(Ff);zY=n(NC,"STRONG",{});var aTe=s(zY);Rqe=r(aTe,"decision_transformer"),aTe.forEach(t),Bqe=r(NC," \u2014 "),m9=n(NC,"A",{href:!0});var nTe=s(m9);Pqe=r(nTe,"DecisionTransformerConfig"),nTe.forEach(t),Iqe=r(NC," (Decision Transformer model)"),NC.forEach(t),qqe=i(L),Tf=n(L,"LI",{});var jC=s(Tf);QY=n(jC,"STRONG",{});var sTe=s(QY);Nqe=r(sTe,"deit"),sTe.forEach(t),jqe=r(jC," \u2014 "),g9=n(jC,"A",{href:!0});var lTe=s(g9);Dqe=r(lTe,"DeiTConfig"),lTe.forEach(t),Gqe=r(jC," (DeiT model)"),jC.forEach(t),Oqe=i(L),Mf=n(L,"LI",{});var DC=s(Mf);WY=n(DC,"STRONG",{});var iTe=s(WY);Vqe=r(iTe,"detr"),iTe.forEach(t),Xqe=r(DC," \u2014 "),h9=n(DC,"A",{href:!0});var dTe=s(h9);zqe=r(dTe,"DetrConfig"),dTe.forEach(t),Qqe=r(DC," (DETR model)"),DC.forEach(t),Wqe=i(L),Ef=n(L,"LI",{});var cTe=s(Ef);HY=n(cTe,"STRONG",{});var b7r=s(HY);Hqe=r(b7r,"distilbert"),b7r.forEach(t),Uqe=r(cTe," \u2014 "),u9=n(cTe,"A",{href:!0});var F7r=s(u9);Jqe=r(F7r,"DistilBertConfig"),F7r.forEach(t),Yqe=r(cTe," (DistilBERT model)"),cTe.forEach(t),Kqe=i(L),Cf=n(L,"LI",{});var fTe=s(Cf);UY=n(fTe,"STRONG",{});var T7r=s(UY);Zqe=r(T7r,"dpr"),T7r.forEach(t),eNe=r(fTe," \u2014 "),p9=n(fTe,"A",{href:!0});var M7r=s(p9);oNe=r(M7r,"DPRConfig"),M7r.forEach(t),rNe=r(fTe," (DPR model)"),fTe.forEach(t),tNe=i(L),wf=n(L,"LI",{});var mTe=s(wf);JY=n(mTe,"STRONG",{});var E7r=s(JY);aNe=r(E7r,"dpt"),E7r.forEach(t),nNe=r(mTe," \u2014 "),_9=n(mTe,"A",{href:!0});var C7r=s(_9);sNe=r(C7r,"DPTConfig"),C7r.forEach(t),lNe=r(mTe," (DPT model)"),mTe.forEach(t),iNe=i(L),Af=n(L,"LI",{});var gTe=s(Af);YY=n(gTe,"STRONG",{});var w7r=s(YY);dNe=r(w7r,"electra"),w7r.forEach(t),cNe=r(gTe," \u2014 "),v9=n(gTe,"A",{href:!0});var A7r=s(v9);fNe=r(A7r,"ElectraConfig"),A7r.forEach(t),mNe=r(gTe," (ELECTRA model)"),gTe.forEach(t),gNe=i(L),yf=n(L,"LI",{});var hTe=s(yf);KY=n(hTe,"STRONG",{});var y7r=s(KY);hNe=r(y7r,"encoder-decoder"),y7r.forEach(t),uNe=r(hTe," \u2014 "),b9=n(hTe,"A",{href:!0});var L7r=s(b9);pNe=r(L7r,"EncoderDecoderConfig"),L7r.forEach(t),_Ne=r(hTe," (Encoder decoder model)"),hTe.forEach(t),vNe=i(L),Lf=n(L,"LI",{});var uTe=s(Lf);ZY=n(uTe,"STRONG",{});var x7r=s(ZY);bNe=r(x7r,"flaubert"),x7r.forEach(t),FNe=r(uTe," \u2014 "),F9=n(uTe,"A",{href:!0});var $7r=s(F9);TNe=r($7r,"FlaubertConfig"),$7r.forEach(t),MNe=r(uTe," (FlauBERT model)"),uTe.forEach(t),ENe=i(L),xf=n(L,"LI",{});var pTe=s(xf);eK=n(pTe,"STRONG",{});var k7r=s(eK);CNe=r(k7r,"fnet"),k7r.forEach(t),wNe=r(pTe," \u2014 "),T9=n(pTe,"A",{href:!0});var S7r=s(T9);ANe=r(S7r,"FNetConfig"),S7r.forEach(t),yNe=r(pTe," (FNet model)"),pTe.forEach(t),LNe=i(L),$f=n(L,"LI",{});var _Te=s($f);oK=n(_Te,"STRONG",{});var R7r=s(oK);xNe=r(R7r,"fsmt"),R7r.forEach(t),$Ne=r(_Te," \u2014 "),M9=n(_Te,"A",{href:!0});var B7r=s(M9);kNe=r(B7r,"FSMTConfig"),B7r.forEach(t),SNe=r(_Te," (FairSeq Machine-Translation model)"),_Te.forEach(t),RNe=i(L),kf=n(L,"LI",{});var vTe=s(kf);rK=n(vTe,"STRONG",{});var P7r=s(rK);BNe=r(P7r,"funnel"),P7r.forEach(t),PNe=r(vTe," \u2014 "),E9=n(vTe,"A",{href:!0});var I7r=s(E9);INe=r(I7r,"FunnelConfig"),I7r.forEach(t),qNe=r(vTe," (Funnel Transformer model)"),vTe.forEach(t),NNe=i(L),Sf=n(L,"LI",{});var bTe=s(Sf);tK=n(bTe,"STRONG",{});var q7r=s(tK);jNe=r(q7r,"glpn"),q7r.forEach(t),DNe=r(bTe," \u2014 "),C9=n(bTe,"A",{href:!0});var N7r=s(C9);GNe=r(N7r,"GLPNConfig"),N7r.forEach(t),ONe=r(bTe," (GLPN model)"),bTe.forEach(t),VNe=i(L),Rf=n(L,"LI",{});var FTe=s(Rf);aK=n(FTe,"STRONG",{});var j7r=s(aK);XNe=r(j7r,"gpt2"),j7r.forEach(t),zNe=r(FTe," \u2014 "),w9=n(FTe,"A",{href:!0});var D7r=s(w9);QNe=r(D7r,"GPT2Config"),D7r.forEach(t),WNe=r(FTe," (OpenAI GPT-2 model)"),FTe.forEach(t),HNe=i(L),Bf=n(L,"LI",{});var TTe=s(Bf);nK=n(TTe,"STRONG",{});var G7r=s(nK);UNe=r(G7r,"gpt_neo"),G7r.forEach(t),JNe=r(TTe," \u2014 "),A9=n(TTe,"A",{href:!0});var O7r=s(A9);YNe=r(O7r,"GPTNeoConfig"),O7r.forEach(t),KNe=r(TTe," (GPT Neo model)"),TTe.forEach(t),ZNe=i(L),Pf=n(L,"LI",{});var MTe=s(Pf);sK=n(MTe,"STRONG",{});var V7r=s(sK);eje=r(V7r,"gptj"),V7r.forEach(t),oje=r(MTe," \u2014 "),y9=n(MTe,"A",{href:!0});var X7r=s(y9);rje=r(X7r,"GPTJConfig"),X7r.forEach(t),tje=r(MTe," (GPT-J model)"),MTe.forEach(t),aje=i(L),If=n(L,"LI",{});var ETe=s(If);lK=n(ETe,"STRONG",{});var z7r=s(lK);nje=r(z7r,"hubert"),z7r.forEach(t),sje=r(ETe," \u2014 "),L9=n(ETe,"A",{href:!0});var Q7r=s(L9);lje=r(Q7r,"HubertConfig"),Q7r.forEach(t),ije=r(ETe," (Hubert model)"),ETe.forEach(t),dje=i(L),qf=n(L,"LI",{});var CTe=s(qf);iK=n(CTe,"STRONG",{});var W7r=s(iK);cje=r(W7r,"ibert"),W7r.forEach(t),fje=r(CTe," \u2014 "),x9=n(CTe,"A",{href:!0});var H7r=s(x9);mje=r(H7r,"IBertConfig"),H7r.forEach(t),gje=r(CTe," (I-BERT model)"),CTe.forEach(t),hje=i(L),Nf=n(L,"LI",{});var wTe=s(Nf);dK=n(wTe,"STRONG",{});var U7r=s(dK);uje=r(U7r,"imagegpt"),U7r.forEach(t),pje=r(wTe," \u2014 "),$9=n(wTe,"A",{href:!0});var J7r=s($9);_je=r(J7r,"ImageGPTConfig"),J7r.forEach(t),vje=r(wTe," (ImageGPT model)"),wTe.forEach(t),bje=i(L),jf=n(L,"LI",{});var ATe=s(jf);cK=n(ATe,"STRONG",{});var Y7r=s(cK);Fje=r(Y7r,"layoutlm"),Y7r.forEach(t),Tje=r(ATe," \u2014 "),k9=n(ATe,"A",{href:!0});var K7r=s(k9);Mje=r(K7r,"LayoutLMConfig"),K7r.forEach(t),Eje=r(ATe," (LayoutLM model)"),ATe.forEach(t),Cje=i(L),Df=n(L,"LI",{});var yTe=s(Df);fK=n(yTe,"STRONG",{});var Z7r=s(fK);wje=r(Z7r,"layoutlmv2"),Z7r.forEach(t),Aje=r(yTe," \u2014 "),S9=n(yTe,"A",{href:!0});var e9r=s(S9);yje=r(e9r,"LayoutLMv2Config"),e9r.forEach(t),Lje=r(yTe," (LayoutLMv2 model)"),yTe.forEach(t),xje=i(L),Gf=n(L,"LI",{});var LTe=s(Gf);mK=n(LTe,"STRONG",{});var o9r=s(mK);$je=r(o9r,"led"),o9r.forEach(t),kje=r(LTe," \u2014 "),R9=n(LTe,"A",{href:!0});var r9r=s(R9);Sje=r(r9r,"LEDConfig"),r9r.forEach(t),Rje=r(LTe," (LED model)"),LTe.forEach(t),Bje=i(L),Of=n(L,"LI",{});var xTe=s(Of);gK=n(xTe,"STRONG",{});var t9r=s(gK);Pje=r(t9r,"longformer"),t9r.forEach(t),Ije=r(xTe," \u2014 "),B9=n(xTe,"A",{href:!0});var a9r=s(B9);qje=r(a9r,"LongformerConfig"),a9r.forEach(t),Nje=r(xTe," (Longformer model)"),xTe.forEach(t),jje=i(L),Vf=n(L,"LI",{});var $Te=s(Vf);hK=n($Te,"STRONG",{});var n9r=s(hK);Dje=r(n9r,"luke"),n9r.forEach(t),Gje=r($Te," \u2014 "),P9=n($Te,"A",{href:!0});var s9r=s(P9);Oje=r(s9r,"LukeConfig"),s9r.forEach(t),Vje=r($Te," (LUKE model)"),$Te.forEach(t),Xje=i(L),Xf=n(L,"LI",{});var kTe=s(Xf);uK=n(kTe,"STRONG",{});var l9r=s(uK);zje=r(l9r,"lxmert"),l9r.forEach(t),Qje=r(kTe," \u2014 "),I9=n(kTe,"A",{href:!0});var i9r=s(I9);Wje=r(i9r,"LxmertConfig"),i9r.forEach(t),Hje=r(kTe," (LXMERT model)"),kTe.forEach(t),Uje=i(L),zf=n(L,"LI",{});var STe=s(zf);pK=n(STe,"STRONG",{});var d9r=s(pK);Jje=r(d9r,"m2m_100"),d9r.forEach(t),Yje=r(STe," \u2014 "),q9=n(STe,"A",{href:!0});var c9r=s(q9);Kje=r(c9r,"M2M100Config"),c9r.forEach(t),Zje=r(STe," (M2M100 model)"),STe.forEach(t),eDe=i(L),Qf=n(L,"LI",{});var RTe=s(Qf);_K=n(RTe,"STRONG",{});var f9r=s(_K);oDe=r(f9r,"marian"),f9r.forEach(t),rDe=r(RTe," \u2014 "),N9=n(RTe,"A",{href:!0});var m9r=s(N9);tDe=r(m9r,"MarianConfig"),m9r.forEach(t),aDe=r(RTe," (Marian model)"),RTe.forEach(t),nDe=i(L),Wf=n(L,"LI",{});var BTe=s(Wf);vK=n(BTe,"STRONG",{});var g9r=s(vK);sDe=r(g9r,"maskformer"),g9r.forEach(t),lDe=r(BTe," \u2014 "),j9=n(BTe,"A",{href:!0});var h9r=s(j9);iDe=r(h9r,"MaskFormerConfig"),h9r.forEach(t),dDe=r(BTe," (MaskFormer model)"),BTe.forEach(t),cDe=i(L),Hf=n(L,"LI",{});var PTe=s(Hf);bK=n(PTe,"STRONG",{});var u9r=s(bK);fDe=r(u9r,"mbart"),u9r.forEach(t),mDe=r(PTe," \u2014 "),D9=n(PTe,"A",{href:!0});var p9r=s(D9);gDe=r(p9r,"MBartConfig"),p9r.forEach(t),hDe=r(PTe," (mBART model)"),PTe.forEach(t),uDe=i(L),Uf=n(L,"LI",{});var ITe=s(Uf);FK=n(ITe,"STRONG",{});var _9r=s(FK);pDe=r(_9r,"megatron-bert"),_9r.forEach(t),_De=r(ITe," \u2014 "),G9=n(ITe,"A",{href:!0});var v9r=s(G9);vDe=r(v9r,"MegatronBertConfig"),v9r.forEach(t),bDe=r(ITe," (MegatronBert model)"),ITe.forEach(t),FDe=i(L),Jf=n(L,"LI",{});var qTe=s(Jf);TK=n(qTe,"STRONG",{});var b9r=s(TK);TDe=r(b9r,"mobilebert"),b9r.forEach(t),MDe=r(qTe," \u2014 "),O9=n(qTe,"A",{href:!0});var F9r=s(O9);EDe=r(F9r,"MobileBertConfig"),F9r.forEach(t),CDe=r(qTe," (MobileBERT model)"),qTe.forEach(t),wDe=i(L),Yf=n(L,"LI",{});var NTe=s(Yf);MK=n(NTe,"STRONG",{});var T9r=s(MK);ADe=r(T9r,"mpnet"),T9r.forEach(t),yDe=r(NTe," \u2014 "),V9=n(NTe,"A",{href:!0});var M9r=s(V9);LDe=r(M9r,"MPNetConfig"),M9r.forEach(t),xDe=r(NTe," (MPNet model)"),NTe.forEach(t),$De=i(L),Kf=n(L,"LI",{});var jTe=s(Kf);EK=n(jTe,"STRONG",{});var E9r=s(EK);kDe=r(E9r,"mt5"),E9r.forEach(t),SDe=r(jTe," \u2014 "),X9=n(jTe,"A",{href:!0});var C9r=s(X9);RDe=r(C9r,"MT5Config"),C9r.forEach(t),BDe=r(jTe," (mT5 model)"),jTe.forEach(t),PDe=i(L),Zf=n(L,"LI",{});var DTe=s(Zf);CK=n(DTe,"STRONG",{});var w9r=s(CK);IDe=r(w9r,"nystromformer"),w9r.forEach(t),qDe=r(DTe," \u2014 "),z9=n(DTe,"A",{href:!0});var A9r=s(z9);NDe=r(A9r,"NystromformerConfig"),A9r.forEach(t),jDe=r(DTe," (Nystromformer model)"),DTe.forEach(t),DDe=i(L),em=n(L,"LI",{});var GTe=s(em);wK=n(GTe,"STRONG",{});var y9r=s(wK);GDe=r(y9r,"openai-gpt"),y9r.forEach(t),ODe=r(GTe," \u2014 "),Q9=n(GTe,"A",{href:!0});var L9r=s(Q9);VDe=r(L9r,"OpenAIGPTConfig"),L9r.forEach(t),XDe=r(GTe," (OpenAI GPT model)"),GTe.forEach(t),zDe=i(L),om=n(L,"LI",{});var OTe=s(om);AK=n(OTe,"STRONG",{});var x9r=s(AK);QDe=r(x9r,"pegasus"),x9r.forEach(t),WDe=r(OTe," \u2014 "),W9=n(OTe,"A",{href:!0});var $9r=s(W9);HDe=r($9r,"PegasusConfig"),$9r.forEach(t),UDe=r(OTe," (Pegasus model)"),OTe.forEach(t),JDe=i(L),rm=n(L,"LI",{});var VTe=s(rm);yK=n(VTe,"STRONG",{});var k9r=s(yK);YDe=r(k9r,"perceiver"),k9r.forEach(t),KDe=r(VTe," \u2014 "),H9=n(VTe,"A",{href:!0});var S9r=s(H9);ZDe=r(S9r,"PerceiverConfig"),S9r.forEach(t),eGe=r(VTe," (Perceiver model)"),VTe.forEach(t),oGe=i(L),tm=n(L,"LI",{});var XTe=s(tm);LK=n(XTe,"STRONG",{});var R9r=s(LK);rGe=r(R9r,"plbart"),R9r.forEach(t),tGe=r(XTe," \u2014 "),U9=n(XTe,"A",{href:!0});var B9r=s(U9);aGe=r(B9r,"PLBartConfig"),B9r.forEach(t),nGe=r(XTe," (PLBart model)"),XTe.forEach(t),sGe=i(L),am=n(L,"LI",{});var zTe=s(am);xK=n(zTe,"STRONG",{});var P9r=s(xK);lGe=r(P9r,"poolformer"),P9r.forEach(t),iGe=r(zTe," \u2014 "),J9=n(zTe,"A",{href:!0});var I9r=s(J9);dGe=r(I9r,"PoolFormerConfig"),I9r.forEach(t),cGe=r(zTe," (PoolFormer model)"),zTe.forEach(t),fGe=i(L),nm=n(L,"LI",{});var QTe=s(nm);$K=n(QTe,"STRONG",{});var q9r=s($K);mGe=r(q9r,"prophetnet"),q9r.forEach(t),gGe=r(QTe," \u2014 "),Y9=n(QTe,"A",{href:!0});var N9r=s(Y9);hGe=r(N9r,"ProphetNetConfig"),N9r.forEach(t),uGe=r(QTe," (ProphetNet model)"),QTe.forEach(t),pGe=i(L),sm=n(L,"LI",{});var WTe=s(sm);kK=n(WTe,"STRONG",{});var j9r=s(kK);_Ge=r(j9r,"qdqbert"),j9r.forEach(t),vGe=r(WTe," \u2014 "),K9=n(WTe,"A",{href:!0});var D9r=s(K9);bGe=r(D9r,"QDQBertConfig"),D9r.forEach(t),FGe=r(WTe," (QDQBert model)"),WTe.forEach(t),TGe=i(L),lm=n(L,"LI",{});var HTe=s(lm);SK=n(HTe,"STRONG",{});var G9r=s(SK);MGe=r(G9r,"rag"),G9r.forEach(t),EGe=r(HTe," \u2014 "),Z9=n(HTe,"A",{href:!0});var O9r=s(Z9);CGe=r(O9r,"RagConfig"),O9r.forEach(t),wGe=r(HTe," (RAG model)"),HTe.forEach(t),AGe=i(L),im=n(L,"LI",{});var UTe=s(im);RK=n(UTe,"STRONG",{});var V9r=s(RK);yGe=r(V9r,"realm"),V9r.forEach(t),LGe=r(UTe," \u2014 "),e$=n(UTe,"A",{href:!0});var X9r=s(e$);xGe=r(X9r,"RealmConfig"),X9r.forEach(t),$Ge=r(UTe," (Realm model)"),UTe.forEach(t),kGe=i(L),dm=n(L,"LI",{});var JTe=s(dm);BK=n(JTe,"STRONG",{});var z9r=s(BK);SGe=r(z9r,"reformer"),z9r.forEach(t),RGe=r(JTe," \u2014 "),o$=n(JTe,"A",{href:!0});var Q9r=s(o$);BGe=r(Q9r,"ReformerConfig"),Q9r.forEach(t),PGe=r(JTe," (Reformer model)"),JTe.forEach(t),IGe=i(L),cm=n(L,"LI",{});var YTe=s(cm);PK=n(YTe,"STRONG",{});var W9r=s(PK);qGe=r(W9r,"rembert"),W9r.forEach(t),NGe=r(YTe," \u2014 "),r$=n(YTe,"A",{href:!0});var H9r=s(r$);jGe=r(H9r,"RemBertConfig"),H9r.forEach(t),DGe=r(YTe," (RemBERT model)"),YTe.forEach(t),GGe=i(L),fm=n(L,"LI",{});var KTe=s(fm);IK=n(KTe,"STRONG",{});var U9r=s(IK);OGe=r(U9r,"resnet"),U9r.forEach(t),VGe=r(KTe," \u2014 "),t$=n(KTe,"A",{href:!0});var J9r=s(t$);XGe=r(J9r,"ResNetConfig"),J9r.forEach(t),zGe=r(KTe," (ResNet model)"),KTe.forEach(t),QGe=i(L),mm=n(L,"LI",{});var ZTe=s(mm);qK=n(ZTe,"STRONG",{});var Y9r=s(qK);WGe=r(Y9r,"retribert"),Y9r.forEach(t),HGe=r(ZTe," \u2014 "),a$=n(ZTe,"A",{href:!0});var K9r=s(a$);UGe=r(K9r,"RetriBertConfig"),K9r.forEach(t),JGe=r(ZTe," (RetriBERT model)"),ZTe.forEach(t),YGe=i(L),gm=n(L,"LI",{});var e8e=s(gm);NK=n(e8e,"STRONG",{});var Z9r=s(NK);KGe=r(Z9r,"roberta"),Z9r.forEach(t),ZGe=r(e8e," \u2014 "),n$=n(e8e,"A",{href:!0});var e$r=s(n$);eOe=r(e$r,"RobertaConfig"),e$r.forEach(t),oOe=r(e8e," (RoBERTa model)"),e8e.forEach(t),rOe=i(L),hm=n(L,"LI",{});var o8e=s(hm);jK=n(o8e,"STRONG",{});var o$r=s(jK);tOe=r(o$r,"roformer"),o$r.forEach(t),aOe=r(o8e," \u2014 "),s$=n(o8e,"A",{href:!0});var r$r=s(s$);nOe=r(r$r,"RoFormerConfig"),r$r.forEach(t),sOe=r(o8e," (RoFormer model)"),o8e.forEach(t),lOe=i(L),um=n(L,"LI",{});var r8e=s(um);DK=n(r8e,"STRONG",{});var t$r=s(DK);iOe=r(t$r,"segformer"),t$r.forEach(t),dOe=r(r8e," \u2014 "),l$=n(r8e,"A",{href:!0});var a$r=s(l$);cOe=r(a$r,"SegformerConfig"),a$r.forEach(t),fOe=r(r8e," (SegFormer model)"),r8e.forEach(t),mOe=i(L),pm=n(L,"LI",{});var t8e=s(pm);GK=n(t8e,"STRONG",{});var n$r=s(GK);gOe=r(n$r,"sew"),n$r.forEach(t),hOe=r(t8e," \u2014 "),i$=n(t8e,"A",{href:!0});var s$r=s(i$);uOe=r(s$r,"SEWConfig"),s$r.forEach(t),pOe=r(t8e," (SEW model)"),t8e.forEach(t),_Oe=i(L),_m=n(L,"LI",{});var a8e=s(_m);OK=n(a8e,"STRONG",{});var l$r=s(OK);vOe=r(l$r,"sew-d"),l$r.forEach(t),bOe=r(a8e," \u2014 "),d$=n(a8e,"A",{href:!0});var i$r=s(d$);FOe=r(i$r,"SEWDConfig"),i$r.forEach(t),TOe=r(a8e," (SEW-D model)"),a8e.forEach(t),MOe=i(L),vm=n(L,"LI",{});var n8e=s(vm);VK=n(n8e,"STRONG",{});var d$r=s(VK);EOe=r(d$r,"speech-encoder-decoder"),d$r.forEach(t),COe=r(n8e," \u2014 "),c$=n(n8e,"A",{href:!0});var c$r=s(c$);wOe=r(c$r,"SpeechEncoderDecoderConfig"),c$r.forEach(t),AOe=r(n8e," (Speech Encoder decoder model)"),n8e.forEach(t),yOe=i(L),bm=n(L,"LI",{});var s8e=s(bm);XK=n(s8e,"STRONG",{});var f$r=s(XK);LOe=r(f$r,"speech_to_text"),f$r.forEach(t),xOe=r(s8e," \u2014 "),f$=n(s8e,"A",{href:!0});var m$r=s(f$);$Oe=r(m$r,"Speech2TextConfig"),m$r.forEach(t),kOe=r(s8e," (Speech2Text model)"),s8e.forEach(t),SOe=i(L),Fm=n(L,"LI",{});var l8e=s(Fm);zK=n(l8e,"STRONG",{});var g$r=s(zK);ROe=r(g$r,"speech_to_text_2"),g$r.forEach(t),BOe=r(l8e," \u2014 "),m$=n(l8e,"A",{href:!0});var h$r=s(m$);POe=r(h$r,"Speech2Text2Config"),h$r.forEach(t),IOe=r(l8e," (Speech2Text2 model)"),l8e.forEach(t),qOe=i(L),Tm=n(L,"LI",{});var i8e=s(Tm);QK=n(i8e,"STRONG",{});var u$r=s(QK);NOe=r(u$r,"splinter"),u$r.forEach(t),jOe=r(i8e," \u2014 "),g$=n(i8e,"A",{href:!0});var p$r=s(g$);DOe=r(p$r,"SplinterConfig"),p$r.forEach(t),GOe=r(i8e," (Splinter model)"),i8e.forEach(t),OOe=i(L),Mm=n(L,"LI",{});var d8e=s(Mm);WK=n(d8e,"STRONG",{});var _$r=s(WK);VOe=r(_$r,"squeezebert"),_$r.forEach(t),XOe=r(d8e," \u2014 "),h$=n(d8e,"A",{href:!0});var v$r=s(h$);zOe=r(v$r,"SqueezeBertConfig"),v$r.forEach(t),QOe=r(d8e," (SqueezeBERT model)"),d8e.forEach(t),WOe=i(L),Em=n(L,"LI",{});var c8e=s(Em);HK=n(c8e,"STRONG",{});var b$r=s(HK);HOe=r(b$r,"swin"),b$r.forEach(t),UOe=r(c8e," \u2014 "),u$=n(c8e,"A",{href:!0});var F$r=s(u$);JOe=r(F$r,"SwinConfig"),F$r.forEach(t),YOe=r(c8e," (Swin model)"),c8e.forEach(t),KOe=i(L),Cm=n(L,"LI",{});var f8e=s(Cm);UK=n(f8e,"STRONG",{});var T$r=s(UK);ZOe=r(T$r,"t5"),T$r.forEach(t),eVe=r(f8e," \u2014 "),p$=n(f8e,"A",{href:!0});var M$r=s(p$);oVe=r(M$r,"T5Config"),M$r.forEach(t),rVe=r(f8e," (T5 model)"),f8e.forEach(t),tVe=i(L),wm=n(L,"LI",{});var m8e=s(wm);JK=n(m8e,"STRONG",{});var E$r=s(JK);aVe=r(E$r,"tapas"),E$r.forEach(t),nVe=r(m8e," \u2014 "),_$=n(m8e,"A",{href:!0});var C$r=s(_$);sVe=r(C$r,"TapasConfig"),C$r.forEach(t),lVe=r(m8e," (TAPAS model)"),m8e.forEach(t),iVe=i(L),Am=n(L,"LI",{});var g8e=s(Am);YK=n(g8e,"STRONG",{});var w$r=s(YK);dVe=r(w$r,"transfo-xl"),w$r.forEach(t),cVe=r(g8e," \u2014 "),v$=n(g8e,"A",{href:!0});var A$r=s(v$);fVe=r(A$r,"TransfoXLConfig"),A$r.forEach(t),mVe=r(g8e," (Transformer-XL model)"),g8e.forEach(t),gVe=i(L),ym=n(L,"LI",{});var h8e=s(ym);KK=n(h8e,"STRONG",{});var y$r=s(KK);hVe=r(y$r,"trocr"),y$r.forEach(t),uVe=r(h8e," \u2014 "),b$=n(h8e,"A",{href:!0});var L$r=s(b$);pVe=r(L$r,"TrOCRConfig"),L$r.forEach(t),_Ve=r(h8e," (TrOCR model)"),h8e.forEach(t),vVe=i(L),Lm=n(L,"LI",{});var u8e=s(Lm);ZK=n(u8e,"STRONG",{});var x$r=s(ZK);bVe=r(x$r,"unispeech"),x$r.forEach(t),FVe=r(u8e," \u2014 "),F$=n(u8e,"A",{href:!0});var $$r=s(F$);TVe=r($$r,"UniSpeechConfig"),$$r.forEach(t),MVe=r(u8e," (UniSpeech model)"),u8e.forEach(t),EVe=i(L),xm=n(L,"LI",{});var p8e=s(xm);eZ=n(p8e,"STRONG",{});var k$r=s(eZ);CVe=r(k$r,"unispeech-sat"),k$r.forEach(t),wVe=r(p8e," \u2014 "),T$=n(p8e,"A",{href:!0});var S$r=s(T$);AVe=r(S$r,"UniSpeechSatConfig"),S$r.forEach(t),yVe=r(p8e," (UniSpeechSat model)"),p8e.forEach(t),LVe=i(L),$m=n(L,"LI",{});var _8e=s($m);oZ=n(_8e,"STRONG",{});var R$r=s(oZ);xVe=r(R$r,"van"),R$r.forEach(t),$Ve=r(_8e," \u2014 "),M$=n(_8e,"A",{href:!0});var B$r=s(M$);kVe=r(B$r,"VanConfig"),B$r.forEach(t),SVe=r(_8e," (VAN model)"),_8e.forEach(t),RVe=i(L),km=n(L,"LI",{});var v8e=s(km);rZ=n(v8e,"STRONG",{});var P$r=s(rZ);BVe=r(P$r,"vilt"),P$r.forEach(t),PVe=r(v8e," \u2014 "),E$=n(v8e,"A",{href:!0});var I$r=s(E$);IVe=r(I$r,"ViltConfig"),I$r.forEach(t),qVe=r(v8e," (ViLT model)"),v8e.forEach(t),NVe=i(L),Sm=n(L,"LI",{});var b8e=s(Sm);tZ=n(b8e,"STRONG",{});var q$r=s(tZ);jVe=r(q$r,"vision-encoder-decoder"),q$r.forEach(t),DVe=r(b8e," \u2014 "),C$=n(b8e,"A",{href:!0});var N$r=s(C$);GVe=r(N$r,"VisionEncoderDecoderConfig"),N$r.forEach(t),OVe=r(b8e," (Vision Encoder decoder model)"),b8e.forEach(t),VVe=i(L),Rm=n(L,"LI",{});var F8e=s(Rm);aZ=n(F8e,"STRONG",{});var j$r=s(aZ);XVe=r(j$r,"vision-text-dual-encoder"),j$r.forEach(t),zVe=r(F8e," \u2014 "),w$=n(F8e,"A",{href:!0});var D$r=s(w$);QVe=r(D$r,"VisionTextDualEncoderConfig"),D$r.forEach(t),WVe=r(F8e," (VisionTextDualEncoder model)"),F8e.forEach(t),HVe=i(L),Bm=n(L,"LI",{});var T8e=s(Bm);nZ=n(T8e,"STRONG",{});var G$r=s(nZ);UVe=r(G$r,"visual_bert"),G$r.forEach(t),JVe=r(T8e," \u2014 "),A$=n(T8e,"A",{href:!0});var O$r=s(A$);YVe=r(O$r,"VisualBertConfig"),O$r.forEach(t),KVe=r(T8e," (VisualBert model)"),T8e.forEach(t),ZVe=i(L),Pm=n(L,"LI",{});var M8e=s(Pm);sZ=n(M8e,"STRONG",{});var V$r=s(sZ);eXe=r(V$r,"vit"),V$r.forEach(t),oXe=r(M8e," \u2014 "),y$=n(M8e,"A",{href:!0});var X$r=s(y$);rXe=r(X$r,"ViTConfig"),X$r.forEach(t),tXe=r(M8e," (ViT model)"),M8e.forEach(t),aXe=i(L),Im=n(L,"LI",{});var E8e=s(Im);lZ=n(E8e,"STRONG",{});var z$r=s(lZ);nXe=r(z$r,"vit_mae"),z$r.forEach(t),sXe=r(E8e," \u2014 "),L$=n(E8e,"A",{href:!0});var Q$r=s(L$);lXe=r(Q$r,"ViTMAEConfig"),Q$r.forEach(t),iXe=r(E8e," (ViTMAE model)"),E8e.forEach(t),dXe=i(L),qm=n(L,"LI",{});var C8e=s(qm);iZ=n(C8e,"STRONG",{});var W$r=s(iZ);cXe=r(W$r,"wav2vec2"),W$r.forEach(t),fXe=r(C8e," \u2014 "),x$=n(C8e,"A",{href:!0});var H$r=s(x$);mXe=r(H$r,"Wav2Vec2Config"),H$r.forEach(t),gXe=r(C8e," (Wav2Vec2 model)"),C8e.forEach(t),hXe=i(L),Nm=n(L,"LI",{});var w8e=s(Nm);dZ=n(w8e,"STRONG",{});var U$r=s(dZ);uXe=r(U$r,"wavlm"),U$r.forEach(t),pXe=r(w8e," \u2014 "),$$=n(w8e,"A",{href:!0});var J$r=s($$);_Xe=r(J$r,"WavLMConfig"),J$r.forEach(t),vXe=r(w8e," (WavLM model)"),w8e.forEach(t),bXe=i(L),jm=n(L,"LI",{});var A8e=s(jm);cZ=n(A8e,"STRONG",{});var Y$r=s(cZ);FXe=r(Y$r,"xglm"),Y$r.forEach(t),TXe=r(A8e," \u2014 "),k$=n(A8e,"A",{href:!0});var K$r=s(k$);MXe=r(K$r,"XGLMConfig"),K$r.forEach(t),EXe=r(A8e," (XGLM model)"),A8e.forEach(t),CXe=i(L),Dm=n(L,"LI",{});var y8e=s(Dm);fZ=n(y8e,"STRONG",{});var Z$r=s(fZ);wXe=r(Z$r,"xlm"),Z$r.forEach(t),AXe=r(y8e," \u2014 "),S$=n(y8e,"A",{href:!0});var ekr=s(S$);yXe=r(ekr,"XLMConfig"),ekr.forEach(t),LXe=r(y8e," (XLM model)"),y8e.forEach(t),xXe=i(L),Gm=n(L,"LI",{});var L8e=s(Gm);mZ=n(L8e,"STRONG",{});var okr=s(mZ);$Xe=r(okr,"xlm-prophetnet"),okr.forEach(t),kXe=r(L8e," \u2014 "),R$=n(L8e,"A",{href:!0});var rkr=s(R$);SXe=r(rkr,"XLMProphetNetConfig"),rkr.forEach(t),RXe=r(L8e," (XLMProphetNet model)"),L8e.forEach(t),BXe=i(L),Om=n(L,"LI",{});var x8e=s(Om);gZ=n(x8e,"STRONG",{});var tkr=s(gZ);PXe=r(tkr,"xlm-roberta"),tkr.forEach(t),IXe=r(x8e," \u2014 "),B$=n(x8e,"A",{href:!0});var akr=s(B$);qXe=r(akr,"XLMRobertaConfig"),akr.forEach(t),NXe=r(x8e," (XLM-RoBERTa model)"),x8e.forEach(t),jXe=i(L),Vm=n(L,"LI",{});var $8e=s(Vm);hZ=n($8e,"STRONG",{});var nkr=s(hZ);DXe=r(nkr,"xlm-roberta-xl"),nkr.forEach(t),GXe=r($8e," \u2014 "),P$=n($8e,"A",{href:!0});var skr=s(P$);OXe=r(skr,"XLMRobertaXLConfig"),skr.forEach(t),VXe=r($8e," (XLM-RoBERTa-XL model)"),$8e.forEach(t),XXe=i(L),Xm=n(L,"LI",{});var k8e=s(Xm);uZ=n(k8e,"STRONG",{});var lkr=s(uZ);zXe=r(lkr,"xlnet"),lkr.forEach(t),QXe=r(k8e," \u2014 "),I$=n(k8e,"A",{href:!0});var ikr=s(I$);WXe=r(ikr,"XLNetConfig"),ikr.forEach(t),HXe=r(k8e," (XLNet model)"),k8e.forEach(t),UXe=i(L),zm=n(L,"LI",{});var S8e=s(zm);pZ=n(S8e,"STRONG",{});var dkr=s(pZ);JXe=r(dkr,"yoso"),dkr.forEach(t),YXe=r(S8e," \u2014 "),q$=n(S8e,"A",{href:!0});var ckr=s(q$);KXe=r(ckr,"YosoConfig"),ckr.forEach(t),ZXe=r(S8e," (YOSO model)"),S8e.forEach(t),L.forEach(t),eze=i(Jr),T(Qm.$$.fragment,Jr),Jr.forEach(t),oze=i(Ur),Wm=n(Ur,"DIV",{class:!0});var gRe=s(Wm);T(Xw.$$.fragment,gRe),rze=i(gRe),_Z=n(gRe,"P",{});var fkr=s(_Z);tze=r(fkr,"Register a new configuration for this class."),fkr.forEach(t),gRe.forEach(t),Ur.forEach(t),vke=i(f),ri=n(f,"H2",{class:!0});var hRe=s(ri);Hm=n(hRe,"A",{id:!0,class:!0,href:!0});var mkr=s(Hm);vZ=n(mkr,"SPAN",{});var gkr=s(vZ);T(zw.$$.fragment,gkr),gkr.forEach(t),mkr.forEach(t),aze=i(hRe),bZ=n(hRe,"SPAN",{});var hkr=s(bZ);nze=r(hkr,"AutoTokenizer"),hkr.forEach(t),hRe.forEach(t),bke=i(f),Eo=n(f,"DIV",{class:!0});var Ts=s(Eo);T(Qw.$$.fragment,Ts),sze=i(Ts),Ww=n(Ts,"P",{});var uRe=s(Ww);lze=r(uRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),N$=n(uRe,"A",{href:!0});var ukr=s(N$);ize=r(ukr,"AutoTokenizer.from_pretrained()"),ukr.forEach(t),dze=r(uRe," class method."),uRe.forEach(t),cze=i(Ts),Hw=n(Ts,"P",{});var pRe=s(Hw);fze=r(pRe,"This class cannot be instantiated directly using "),FZ=n(pRe,"CODE",{});var pkr=s(FZ);mze=r(pkr,"__init__()"),pkr.forEach(t),gze=r(pRe," (throws an error)."),pRe.forEach(t),hze=i(Ts),Tr=n(Ts,"DIV",{class:!0});var Ms=s(Tr);T(Uw.$$.fragment,Ms),uze=i(Ms),TZ=n(Ms,"P",{});var _kr=s(TZ);pze=r(_kr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_kr.forEach(t),_ze=i(Ms),Fa=n(Ms,"P",{});var GC=s(Fa);vze=r(GC,"The tokenizer class to instantiate is selected based on the "),MZ=n(GC,"CODE",{});var vkr=s(MZ);bze=r(vkr,"model_type"),vkr.forEach(t),Fze=r(GC,` property of the config object (either
passed as an argument or loaded from `),EZ=n(GC,"CODE",{});var bkr=s(EZ);Tze=r(bkr,"pretrained_model_name_or_path"),bkr.forEach(t),Mze=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CZ=n(GC,"CODE",{});var Fkr=s(CZ);Eze=r(Fkr,"pretrained_model_name_or_path"),Fkr.forEach(t),Cze=r(GC,":"),GC.forEach(t),wze=i(Ms),S=n(Ms,"UL",{});var R=s(S);wn=n(R,"LI",{});var Xx=s(wn);wZ=n(Xx,"STRONG",{});var Tkr=s(wZ);Aze=r(Tkr,"albert"),Tkr.forEach(t),yze=r(Xx," \u2014 "),j$=n(Xx,"A",{href:!0});var Mkr=s(j$);Lze=r(Mkr,"AlbertTokenizer"),Mkr.forEach(t),xze=r(Xx," or "),D$=n(Xx,"A",{href:!0});var Ekr=s(D$);$ze=r(Ekr,"AlbertTokenizerFast"),Ekr.forEach(t),kze=r(Xx," (ALBERT model)"),Xx.forEach(t),Sze=i(R),An=n(R,"LI",{});var zx=s(An);AZ=n(zx,"STRONG",{});var Ckr=s(AZ);Rze=r(Ckr,"bart"),Ckr.forEach(t),Bze=r(zx," \u2014 "),G$=n(zx,"A",{href:!0});var wkr=s(G$);Pze=r(wkr,"BartTokenizer"),wkr.forEach(t),Ize=r(zx," or "),O$=n(zx,"A",{href:!0});var Akr=s(O$);qze=r(Akr,"BartTokenizerFast"),Akr.forEach(t),Nze=r(zx," (BART model)"),zx.forEach(t),jze=i(R),yn=n(R,"LI",{});var Qx=s(yn);yZ=n(Qx,"STRONG",{});var ykr=s(yZ);Dze=r(ykr,"barthez"),ykr.forEach(t),Gze=r(Qx," \u2014 "),V$=n(Qx,"A",{href:!0});var Lkr=s(V$);Oze=r(Lkr,"BarthezTokenizer"),Lkr.forEach(t),Vze=r(Qx," or "),X$=n(Qx,"A",{href:!0});var xkr=s(X$);Xze=r(xkr,"BarthezTokenizerFast"),xkr.forEach(t),zze=r(Qx," (BARThez model)"),Qx.forEach(t),Qze=i(R),Um=n(R,"LI",{});var R8e=s(Um);LZ=n(R8e,"STRONG",{});var $kr=s(LZ);Wze=r($kr,"bartpho"),$kr.forEach(t),Hze=r(R8e," \u2014 "),z$=n(R8e,"A",{href:!0});var kkr=s(z$);Uze=r(kkr,"BartphoTokenizer"),kkr.forEach(t),Jze=r(R8e," (BARTpho model)"),R8e.forEach(t),Yze=i(R),Ln=n(R,"LI",{});var Wx=s(Ln);xZ=n(Wx,"STRONG",{});var Skr=s(xZ);Kze=r(Skr,"bert"),Skr.forEach(t),Zze=r(Wx," \u2014 "),Q$=n(Wx,"A",{href:!0});var Rkr=s(Q$);eQe=r(Rkr,"BertTokenizer"),Rkr.forEach(t),oQe=r(Wx," or "),W$=n(Wx,"A",{href:!0});var Bkr=s(W$);rQe=r(Bkr,"BertTokenizerFast"),Bkr.forEach(t),tQe=r(Wx," (BERT model)"),Wx.forEach(t),aQe=i(R),Jm=n(R,"LI",{});var B8e=s(Jm);$Z=n(B8e,"STRONG",{});var Pkr=s($Z);nQe=r(Pkr,"bert-generation"),Pkr.forEach(t),sQe=r(B8e," \u2014 "),H$=n(B8e,"A",{href:!0});var Ikr=s(H$);lQe=r(Ikr,"BertGenerationTokenizer"),Ikr.forEach(t),iQe=r(B8e," (Bert Generation model)"),B8e.forEach(t),dQe=i(R),Ym=n(R,"LI",{});var P8e=s(Ym);kZ=n(P8e,"STRONG",{});var qkr=s(kZ);cQe=r(qkr,"bert-japanese"),qkr.forEach(t),fQe=r(P8e," \u2014 "),U$=n(P8e,"A",{href:!0});var Nkr=s(U$);mQe=r(Nkr,"BertJapaneseTokenizer"),Nkr.forEach(t),gQe=r(P8e," (BertJapanese model)"),P8e.forEach(t),hQe=i(R),Km=n(R,"LI",{});var I8e=s(Km);SZ=n(I8e,"STRONG",{});var jkr=s(SZ);uQe=r(jkr,"bertweet"),jkr.forEach(t),pQe=r(I8e," \u2014 "),J$=n(I8e,"A",{href:!0});var Dkr=s(J$);_Qe=r(Dkr,"BertweetTokenizer"),Dkr.forEach(t),vQe=r(I8e," (Bertweet model)"),I8e.forEach(t),bQe=i(R),xn=n(R,"LI",{});var Hx=s(xn);RZ=n(Hx,"STRONG",{});var Gkr=s(RZ);FQe=r(Gkr,"big_bird"),Gkr.forEach(t),TQe=r(Hx," \u2014 "),Y$=n(Hx,"A",{href:!0});var Okr=s(Y$);MQe=r(Okr,"BigBirdTokenizer"),Okr.forEach(t),EQe=r(Hx," or "),K$=n(Hx,"A",{href:!0});var Vkr=s(K$);CQe=r(Vkr,"BigBirdTokenizerFast"),Vkr.forEach(t),wQe=r(Hx," (BigBird model)"),Hx.forEach(t),AQe=i(R),$n=n(R,"LI",{});var Ux=s($n);BZ=n(Ux,"STRONG",{});var Xkr=s(BZ);yQe=r(Xkr,"bigbird_pegasus"),Xkr.forEach(t),LQe=r(Ux," \u2014 "),Z$=n(Ux,"A",{href:!0});var zkr=s(Z$);xQe=r(zkr,"PegasusTokenizer"),zkr.forEach(t),$Qe=r(Ux," or "),ek=n(Ux,"A",{href:!0});var Qkr=s(ek);kQe=r(Qkr,"PegasusTokenizerFast"),Qkr.forEach(t),SQe=r(Ux," (BigBirdPegasus model)"),Ux.forEach(t),RQe=i(R),kn=n(R,"LI",{});var Jx=s(kn);PZ=n(Jx,"STRONG",{});var Wkr=s(PZ);BQe=r(Wkr,"blenderbot"),Wkr.forEach(t),PQe=r(Jx," \u2014 "),ok=n(Jx,"A",{href:!0});var Hkr=s(ok);IQe=r(Hkr,"BlenderbotTokenizer"),Hkr.forEach(t),qQe=r(Jx," or "),rk=n(Jx,"A",{href:!0});var Ukr=s(rk);NQe=r(Ukr,"BlenderbotTokenizerFast"),Ukr.forEach(t),jQe=r(Jx," (Blenderbot model)"),Jx.forEach(t),DQe=i(R),Zm=n(R,"LI",{});var q8e=s(Zm);IZ=n(q8e,"STRONG",{});var Jkr=s(IZ);GQe=r(Jkr,"blenderbot-small"),Jkr.forEach(t),OQe=r(q8e," \u2014 "),tk=n(q8e,"A",{href:!0});var Ykr=s(tk);VQe=r(Ykr,"BlenderbotSmallTokenizer"),Ykr.forEach(t),XQe=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),zQe=i(R),eg=n(R,"LI",{});var N8e=s(eg);qZ=n(N8e,"STRONG",{});var Kkr=s(qZ);QQe=r(Kkr,"byt5"),Kkr.forEach(t),WQe=r(N8e," \u2014 "),ak=n(N8e,"A",{href:!0});var Zkr=s(ak);HQe=r(Zkr,"ByT5Tokenizer"),Zkr.forEach(t),UQe=r(N8e," (ByT5 model)"),N8e.forEach(t),JQe=i(R),Sn=n(R,"LI",{});var Yx=s(Sn);NZ=n(Yx,"STRONG",{});var eSr=s(NZ);YQe=r(eSr,"camembert"),eSr.forEach(t),KQe=r(Yx," \u2014 "),nk=n(Yx,"A",{href:!0});var oSr=s(nk);ZQe=r(oSr,"CamembertTokenizer"),oSr.forEach(t),eWe=r(Yx," or "),sk=n(Yx,"A",{href:!0});var rSr=s(sk);oWe=r(rSr,"CamembertTokenizerFast"),rSr.forEach(t),rWe=r(Yx," (CamemBERT model)"),Yx.forEach(t),tWe=i(R),og=n(R,"LI",{});var j8e=s(og);jZ=n(j8e,"STRONG",{});var tSr=s(jZ);aWe=r(tSr,"canine"),tSr.forEach(t),nWe=r(j8e," \u2014 "),lk=n(j8e,"A",{href:!0});var aSr=s(lk);sWe=r(aSr,"CanineTokenizer"),aSr.forEach(t),lWe=r(j8e," (Canine model)"),j8e.forEach(t),iWe=i(R),Rn=n(R,"LI",{});var Kx=s(Rn);DZ=n(Kx,"STRONG",{});var nSr=s(DZ);dWe=r(nSr,"clip"),nSr.forEach(t),cWe=r(Kx," \u2014 "),ik=n(Kx,"A",{href:!0});var sSr=s(ik);fWe=r(sSr,"CLIPTokenizer"),sSr.forEach(t),mWe=r(Kx," or "),dk=n(Kx,"A",{href:!0});var lSr=s(dk);gWe=r(lSr,"CLIPTokenizerFast"),lSr.forEach(t),hWe=r(Kx," (CLIP model)"),Kx.forEach(t),uWe=i(R),Bn=n(R,"LI",{});var Zx=s(Bn);GZ=n(Zx,"STRONG",{});var iSr=s(GZ);pWe=r(iSr,"convbert"),iSr.forEach(t),_We=r(Zx," \u2014 "),ck=n(Zx,"A",{href:!0});var dSr=s(ck);vWe=r(dSr,"ConvBertTokenizer"),dSr.forEach(t),bWe=r(Zx," or "),fk=n(Zx,"A",{href:!0});var cSr=s(fk);FWe=r(cSr,"ConvBertTokenizerFast"),cSr.forEach(t),TWe=r(Zx," (ConvBERT model)"),Zx.forEach(t),MWe=i(R),Pn=n(R,"LI",{});var e7=s(Pn);OZ=n(e7,"STRONG",{});var fSr=s(OZ);EWe=r(fSr,"cpm"),fSr.forEach(t),CWe=r(e7," \u2014 "),mk=n(e7,"A",{href:!0});var mSr=s(mk);wWe=r(mSr,"CpmTokenizer"),mSr.forEach(t),AWe=r(e7," or "),VZ=n(e7,"CODE",{});var gSr=s(VZ);yWe=r(gSr,"CpmTokenizerFast"),gSr.forEach(t),LWe=r(e7," (CPM model)"),e7.forEach(t),xWe=i(R),rg=n(R,"LI",{});var D8e=s(rg);XZ=n(D8e,"STRONG",{});var hSr=s(XZ);$We=r(hSr,"ctrl"),hSr.forEach(t),kWe=r(D8e," \u2014 "),gk=n(D8e,"A",{href:!0});var uSr=s(gk);SWe=r(uSr,"CTRLTokenizer"),uSr.forEach(t),RWe=r(D8e," (CTRL model)"),D8e.forEach(t),BWe=i(R),In=n(R,"LI",{});var o7=s(In);zZ=n(o7,"STRONG",{});var pSr=s(zZ);PWe=r(pSr,"deberta"),pSr.forEach(t),IWe=r(o7," \u2014 "),hk=n(o7,"A",{href:!0});var _Sr=s(hk);qWe=r(_Sr,"DebertaTokenizer"),_Sr.forEach(t),NWe=r(o7," or "),uk=n(o7,"A",{href:!0});var vSr=s(uk);jWe=r(vSr,"DebertaTokenizerFast"),vSr.forEach(t),DWe=r(o7," (DeBERTa model)"),o7.forEach(t),GWe=i(R),tg=n(R,"LI",{});var G8e=s(tg);QZ=n(G8e,"STRONG",{});var bSr=s(QZ);OWe=r(bSr,"deberta-v2"),bSr.forEach(t),VWe=r(G8e," \u2014 "),pk=n(G8e,"A",{href:!0});var FSr=s(pk);XWe=r(FSr,"DebertaV2Tokenizer"),FSr.forEach(t),zWe=r(G8e," (DeBERTa-v2 model)"),G8e.forEach(t),QWe=i(R),qn=n(R,"LI",{});var r7=s(qn);WZ=n(r7,"STRONG",{});var TSr=s(WZ);WWe=r(TSr,"distilbert"),TSr.forEach(t),HWe=r(r7," \u2014 "),_k=n(r7,"A",{href:!0});var MSr=s(_k);UWe=r(MSr,"DistilBertTokenizer"),MSr.forEach(t),JWe=r(r7," or "),vk=n(r7,"A",{href:!0});var ESr=s(vk);YWe=r(ESr,"DistilBertTokenizerFast"),ESr.forEach(t),KWe=r(r7," (DistilBERT model)"),r7.forEach(t),ZWe=i(R),Nn=n(R,"LI",{});var t7=s(Nn);HZ=n(t7,"STRONG",{});var CSr=s(HZ);eHe=r(CSr,"dpr"),CSr.forEach(t),oHe=r(t7," \u2014 "),bk=n(t7,"A",{href:!0});var wSr=s(bk);rHe=r(wSr,"DPRQuestionEncoderTokenizer"),wSr.forEach(t),tHe=r(t7," or "),Fk=n(t7,"A",{href:!0});var ASr=s(Fk);aHe=r(ASr,"DPRQuestionEncoderTokenizerFast"),ASr.forEach(t),nHe=r(t7," (DPR model)"),t7.forEach(t),sHe=i(R),jn=n(R,"LI",{});var a7=s(jn);UZ=n(a7,"STRONG",{});var ySr=s(UZ);lHe=r(ySr,"electra"),ySr.forEach(t),iHe=r(a7," \u2014 "),Tk=n(a7,"A",{href:!0});var LSr=s(Tk);dHe=r(LSr,"ElectraTokenizer"),LSr.forEach(t),cHe=r(a7," or "),Mk=n(a7,"A",{href:!0});var xSr=s(Mk);fHe=r(xSr,"ElectraTokenizerFast"),xSr.forEach(t),mHe=r(a7," (ELECTRA model)"),a7.forEach(t),gHe=i(R),ag=n(R,"LI",{});var O8e=s(ag);JZ=n(O8e,"STRONG",{});var $Sr=s(JZ);hHe=r($Sr,"flaubert"),$Sr.forEach(t),uHe=r(O8e," \u2014 "),Ek=n(O8e,"A",{href:!0});var kSr=s(Ek);pHe=r(kSr,"FlaubertTokenizer"),kSr.forEach(t),_He=r(O8e," (FlauBERT model)"),O8e.forEach(t),vHe=i(R),Dn=n(R,"LI",{});var n7=s(Dn);YZ=n(n7,"STRONG",{});var SSr=s(YZ);bHe=r(SSr,"fnet"),SSr.forEach(t),FHe=r(n7," \u2014 "),Ck=n(n7,"A",{href:!0});var RSr=s(Ck);THe=r(RSr,"FNetTokenizer"),RSr.forEach(t),MHe=r(n7," or "),wk=n(n7,"A",{href:!0});var BSr=s(wk);EHe=r(BSr,"FNetTokenizerFast"),BSr.forEach(t),CHe=r(n7," (FNet model)"),n7.forEach(t),wHe=i(R),ng=n(R,"LI",{});var V8e=s(ng);KZ=n(V8e,"STRONG",{});var PSr=s(KZ);AHe=r(PSr,"fsmt"),PSr.forEach(t),yHe=r(V8e," \u2014 "),Ak=n(V8e,"A",{href:!0});var ISr=s(Ak);LHe=r(ISr,"FSMTTokenizer"),ISr.forEach(t),xHe=r(V8e," (FairSeq Machine-Translation model)"),V8e.forEach(t),$He=i(R),Gn=n(R,"LI",{});var s7=s(Gn);ZZ=n(s7,"STRONG",{});var qSr=s(ZZ);kHe=r(qSr,"funnel"),qSr.forEach(t),SHe=r(s7," \u2014 "),yk=n(s7,"A",{href:!0});var NSr=s(yk);RHe=r(NSr,"FunnelTokenizer"),NSr.forEach(t),BHe=r(s7," or "),Lk=n(s7,"A",{href:!0});var jSr=s(Lk);PHe=r(jSr,"FunnelTokenizerFast"),jSr.forEach(t),IHe=r(s7," (Funnel Transformer model)"),s7.forEach(t),qHe=i(R),On=n(R,"LI",{});var l7=s(On);eee=n(l7,"STRONG",{});var DSr=s(eee);NHe=r(DSr,"gpt2"),DSr.forEach(t),jHe=r(l7," \u2014 "),xk=n(l7,"A",{href:!0});var GSr=s(xk);DHe=r(GSr,"GPT2Tokenizer"),GSr.forEach(t),GHe=r(l7," or "),$k=n(l7,"A",{href:!0});var OSr=s($k);OHe=r(OSr,"GPT2TokenizerFast"),OSr.forEach(t),VHe=r(l7," (OpenAI GPT-2 model)"),l7.forEach(t),XHe=i(R),Vn=n(R,"LI",{});var i7=s(Vn);oee=n(i7,"STRONG",{});var VSr=s(oee);zHe=r(VSr,"gpt_neo"),VSr.forEach(t),QHe=r(i7," \u2014 "),kk=n(i7,"A",{href:!0});var XSr=s(kk);WHe=r(XSr,"GPT2Tokenizer"),XSr.forEach(t),HHe=r(i7," or "),Sk=n(i7,"A",{href:!0});var zSr=s(Sk);UHe=r(zSr,"GPT2TokenizerFast"),zSr.forEach(t),JHe=r(i7," (GPT Neo model)"),i7.forEach(t),YHe=i(R),Xn=n(R,"LI",{});var d7=s(Xn);ree=n(d7,"STRONG",{});var QSr=s(ree);KHe=r(QSr,"herbert"),QSr.forEach(t),ZHe=r(d7," \u2014 "),Rk=n(d7,"A",{href:!0});var WSr=s(Rk);eUe=r(WSr,"HerbertTokenizer"),WSr.forEach(t),oUe=r(d7," or "),Bk=n(d7,"A",{href:!0});var HSr=s(Bk);rUe=r(HSr,"HerbertTokenizerFast"),HSr.forEach(t),tUe=r(d7," (HerBERT model)"),d7.forEach(t),aUe=i(R),sg=n(R,"LI",{});var X8e=s(sg);tee=n(X8e,"STRONG",{});var USr=s(tee);nUe=r(USr,"hubert"),USr.forEach(t),sUe=r(X8e," \u2014 "),Pk=n(X8e,"A",{href:!0});var JSr=s(Pk);lUe=r(JSr,"Wav2Vec2CTCTokenizer"),JSr.forEach(t),iUe=r(X8e," (Hubert model)"),X8e.forEach(t),dUe=i(R),zn=n(R,"LI",{});var c7=s(zn);aee=n(c7,"STRONG",{});var YSr=s(aee);cUe=r(YSr,"ibert"),YSr.forEach(t),fUe=r(c7," \u2014 "),Ik=n(c7,"A",{href:!0});var KSr=s(Ik);mUe=r(KSr,"RobertaTokenizer"),KSr.forEach(t),gUe=r(c7," or "),qk=n(c7,"A",{href:!0});var ZSr=s(qk);hUe=r(ZSr,"RobertaTokenizerFast"),ZSr.forEach(t),uUe=r(c7," (I-BERT model)"),c7.forEach(t),pUe=i(R),Qn=n(R,"LI",{});var f7=s(Qn);nee=n(f7,"STRONG",{});var eRr=s(nee);_Ue=r(eRr,"layoutlm"),eRr.forEach(t),vUe=r(f7," \u2014 "),Nk=n(f7,"A",{href:!0});var oRr=s(Nk);bUe=r(oRr,"LayoutLMTokenizer"),oRr.forEach(t),FUe=r(f7," or "),jk=n(f7,"A",{href:!0});var rRr=s(jk);TUe=r(rRr,"LayoutLMTokenizerFast"),rRr.forEach(t),MUe=r(f7," (LayoutLM model)"),f7.forEach(t),EUe=i(R),Wn=n(R,"LI",{});var m7=s(Wn);see=n(m7,"STRONG",{});var tRr=s(see);CUe=r(tRr,"layoutlmv2"),tRr.forEach(t),wUe=r(m7," \u2014 "),Dk=n(m7,"A",{href:!0});var aRr=s(Dk);AUe=r(aRr,"LayoutLMv2Tokenizer"),aRr.forEach(t),yUe=r(m7," or "),Gk=n(m7,"A",{href:!0});var nRr=s(Gk);LUe=r(nRr,"LayoutLMv2TokenizerFast"),nRr.forEach(t),xUe=r(m7," (LayoutLMv2 model)"),m7.forEach(t),$Ue=i(R),Hn=n(R,"LI",{});var g7=s(Hn);lee=n(g7,"STRONG",{});var sRr=s(lee);kUe=r(sRr,"layoutxlm"),sRr.forEach(t),SUe=r(g7," \u2014 "),Ok=n(g7,"A",{href:!0});var lRr=s(Ok);RUe=r(lRr,"LayoutXLMTokenizer"),lRr.forEach(t),BUe=r(g7," or "),Vk=n(g7,"A",{href:!0});var iRr=s(Vk);PUe=r(iRr,"LayoutXLMTokenizerFast"),iRr.forEach(t),IUe=r(g7," (LayoutXLM model)"),g7.forEach(t),qUe=i(R),Un=n(R,"LI",{});var h7=s(Un);iee=n(h7,"STRONG",{});var dRr=s(iee);NUe=r(dRr,"led"),dRr.forEach(t),jUe=r(h7," \u2014 "),Xk=n(h7,"A",{href:!0});var cRr=s(Xk);DUe=r(cRr,"LEDTokenizer"),cRr.forEach(t),GUe=r(h7," or "),zk=n(h7,"A",{href:!0});var fRr=s(zk);OUe=r(fRr,"LEDTokenizerFast"),fRr.forEach(t),VUe=r(h7," (LED model)"),h7.forEach(t),XUe=i(R),Jn=n(R,"LI",{});var u7=s(Jn);dee=n(u7,"STRONG",{});var mRr=s(dee);zUe=r(mRr,"longformer"),mRr.forEach(t),QUe=r(u7," \u2014 "),Qk=n(u7,"A",{href:!0});var gRr=s(Qk);WUe=r(gRr,"LongformerTokenizer"),gRr.forEach(t),HUe=r(u7," or "),Wk=n(u7,"A",{href:!0});var hRr=s(Wk);UUe=r(hRr,"LongformerTokenizerFast"),hRr.forEach(t),JUe=r(u7," (Longformer model)"),u7.forEach(t),YUe=i(R),lg=n(R,"LI",{});var z8e=s(lg);cee=n(z8e,"STRONG",{});var uRr=s(cee);KUe=r(uRr,"luke"),uRr.forEach(t),ZUe=r(z8e," \u2014 "),Hk=n(z8e,"A",{href:!0});var pRr=s(Hk);eJe=r(pRr,"LukeTokenizer"),pRr.forEach(t),oJe=r(z8e," (LUKE model)"),z8e.forEach(t),rJe=i(R),Yn=n(R,"LI",{});var p7=s(Yn);fee=n(p7,"STRONG",{});var _Rr=s(fee);tJe=r(_Rr,"lxmert"),_Rr.forEach(t),aJe=r(p7," \u2014 "),Uk=n(p7,"A",{href:!0});var vRr=s(Uk);nJe=r(vRr,"LxmertTokenizer"),vRr.forEach(t),sJe=r(p7," or "),Jk=n(p7,"A",{href:!0});var bRr=s(Jk);lJe=r(bRr,"LxmertTokenizerFast"),bRr.forEach(t),iJe=r(p7," (LXMERT model)"),p7.forEach(t),dJe=i(R),ig=n(R,"LI",{});var Q8e=s(ig);mee=n(Q8e,"STRONG",{});var FRr=s(mee);cJe=r(FRr,"m2m_100"),FRr.forEach(t),fJe=r(Q8e," \u2014 "),Yk=n(Q8e,"A",{href:!0});var TRr=s(Yk);mJe=r(TRr,"M2M100Tokenizer"),TRr.forEach(t),gJe=r(Q8e," (M2M100 model)"),Q8e.forEach(t),hJe=i(R),dg=n(R,"LI",{});var W8e=s(dg);gee=n(W8e,"STRONG",{});var MRr=s(gee);uJe=r(MRr,"marian"),MRr.forEach(t),pJe=r(W8e," \u2014 "),Kk=n(W8e,"A",{href:!0});var ERr=s(Kk);_Je=r(ERr,"MarianTokenizer"),ERr.forEach(t),vJe=r(W8e," (Marian model)"),W8e.forEach(t),bJe=i(R),Kn=n(R,"LI",{});var _7=s(Kn);hee=n(_7,"STRONG",{});var CRr=s(hee);FJe=r(CRr,"mbart"),CRr.forEach(t),TJe=r(_7," \u2014 "),Zk=n(_7,"A",{href:!0});var wRr=s(Zk);MJe=r(wRr,"MBartTokenizer"),wRr.forEach(t),EJe=r(_7," or "),eS=n(_7,"A",{href:!0});var ARr=s(eS);CJe=r(ARr,"MBartTokenizerFast"),ARr.forEach(t),wJe=r(_7," (mBART model)"),_7.forEach(t),AJe=i(R),Zn=n(R,"LI",{});var v7=s(Zn);uee=n(v7,"STRONG",{});var yRr=s(uee);yJe=r(yRr,"mbart50"),yRr.forEach(t),LJe=r(v7," \u2014 "),oS=n(v7,"A",{href:!0});var LRr=s(oS);xJe=r(LRr,"MBart50Tokenizer"),LRr.forEach(t),$Je=r(v7," or "),rS=n(v7,"A",{href:!0});var xRr=s(rS);kJe=r(xRr,"MBart50TokenizerFast"),xRr.forEach(t),SJe=r(v7," (mBART-50 model)"),v7.forEach(t),RJe=i(R),cg=n(R,"LI",{});var H8e=s(cg);pee=n(H8e,"STRONG",{});var $Rr=s(pee);BJe=r($Rr,"mluke"),$Rr.forEach(t),PJe=r(H8e," \u2014 "),tS=n(H8e,"A",{href:!0});var kRr=s(tS);IJe=r(kRr,"MLukeTokenizer"),kRr.forEach(t),qJe=r(H8e," (mLUKE model)"),H8e.forEach(t),NJe=i(R),es=n(R,"LI",{});var b7=s(es);_ee=n(b7,"STRONG",{});var SRr=s(_ee);jJe=r(SRr,"mobilebert"),SRr.forEach(t),DJe=r(b7," \u2014 "),aS=n(b7,"A",{href:!0});var RRr=s(aS);GJe=r(RRr,"MobileBertTokenizer"),RRr.forEach(t),OJe=r(b7," or "),nS=n(b7,"A",{href:!0});var BRr=s(nS);VJe=r(BRr,"MobileBertTokenizerFast"),BRr.forEach(t),XJe=r(b7," (MobileBERT model)"),b7.forEach(t),zJe=i(R),os=n(R,"LI",{});var F7=s(os);vee=n(F7,"STRONG",{});var PRr=s(vee);QJe=r(PRr,"mpnet"),PRr.forEach(t),WJe=r(F7," \u2014 "),sS=n(F7,"A",{href:!0});var IRr=s(sS);HJe=r(IRr,"MPNetTokenizer"),IRr.forEach(t),UJe=r(F7," or "),lS=n(F7,"A",{href:!0});var qRr=s(lS);JJe=r(qRr,"MPNetTokenizerFast"),qRr.forEach(t),YJe=r(F7," (MPNet model)"),F7.forEach(t),KJe=i(R),rs=n(R,"LI",{});var T7=s(rs);bee=n(T7,"STRONG",{});var NRr=s(bee);ZJe=r(NRr,"mt5"),NRr.forEach(t),eYe=r(T7," \u2014 "),iS=n(T7,"A",{href:!0});var jRr=s(iS);oYe=r(jRr,"MT5Tokenizer"),jRr.forEach(t),rYe=r(T7," or "),dS=n(T7,"A",{href:!0});var DRr=s(dS);tYe=r(DRr,"MT5TokenizerFast"),DRr.forEach(t),aYe=r(T7," (mT5 model)"),T7.forEach(t),nYe=i(R),ts=n(R,"LI",{});var M7=s(ts);Fee=n(M7,"STRONG",{});var GRr=s(Fee);sYe=r(GRr,"openai-gpt"),GRr.forEach(t),lYe=r(M7," \u2014 "),cS=n(M7,"A",{href:!0});var ORr=s(cS);iYe=r(ORr,"OpenAIGPTTokenizer"),ORr.forEach(t),dYe=r(M7," or "),fS=n(M7,"A",{href:!0});var VRr=s(fS);cYe=r(VRr,"OpenAIGPTTokenizerFast"),VRr.forEach(t),fYe=r(M7," (OpenAI GPT model)"),M7.forEach(t),mYe=i(R),as=n(R,"LI",{});var E7=s(as);Tee=n(E7,"STRONG",{});var XRr=s(Tee);gYe=r(XRr,"pegasus"),XRr.forEach(t),hYe=r(E7," \u2014 "),mS=n(E7,"A",{href:!0});var zRr=s(mS);uYe=r(zRr,"PegasusTokenizer"),zRr.forEach(t),pYe=r(E7," or "),gS=n(E7,"A",{href:!0});var QRr=s(gS);_Ye=r(QRr,"PegasusTokenizerFast"),QRr.forEach(t),vYe=r(E7," (Pegasus model)"),E7.forEach(t),bYe=i(R),fg=n(R,"LI",{});var U8e=s(fg);Mee=n(U8e,"STRONG",{});var WRr=s(Mee);FYe=r(WRr,"perceiver"),WRr.forEach(t),TYe=r(U8e," \u2014 "),hS=n(U8e,"A",{href:!0});var HRr=s(hS);MYe=r(HRr,"PerceiverTokenizer"),HRr.forEach(t),EYe=r(U8e," (Perceiver model)"),U8e.forEach(t),CYe=i(R),mg=n(R,"LI",{});var J8e=s(mg);Eee=n(J8e,"STRONG",{});var URr=s(Eee);wYe=r(URr,"phobert"),URr.forEach(t),AYe=r(J8e," \u2014 "),uS=n(J8e,"A",{href:!0});var JRr=s(uS);yYe=r(JRr,"PhobertTokenizer"),JRr.forEach(t),LYe=r(J8e," (PhoBERT model)"),J8e.forEach(t),xYe=i(R),gg=n(R,"LI",{});var Y8e=s(gg);Cee=n(Y8e,"STRONG",{});var YRr=s(Cee);$Ye=r(YRr,"plbart"),YRr.forEach(t),kYe=r(Y8e," \u2014 "),pS=n(Y8e,"A",{href:!0});var KRr=s(pS);SYe=r(KRr,"PLBartTokenizer"),KRr.forEach(t),RYe=r(Y8e," (PLBart model)"),Y8e.forEach(t),BYe=i(R),hg=n(R,"LI",{});var K8e=s(hg);wee=n(K8e,"STRONG",{});var ZRr=s(wee);PYe=r(ZRr,"prophetnet"),ZRr.forEach(t),IYe=r(K8e," \u2014 "),_S=n(K8e,"A",{href:!0});var eBr=s(_S);qYe=r(eBr,"ProphetNetTokenizer"),eBr.forEach(t),NYe=r(K8e," (ProphetNet model)"),K8e.forEach(t),jYe=i(R),ns=n(R,"LI",{});var C7=s(ns);Aee=n(C7,"STRONG",{});var oBr=s(Aee);DYe=r(oBr,"qdqbert"),oBr.forEach(t),GYe=r(C7," \u2014 "),vS=n(C7,"A",{href:!0});var rBr=s(vS);OYe=r(rBr,"BertTokenizer"),rBr.forEach(t),VYe=r(C7," or "),bS=n(C7,"A",{href:!0});var tBr=s(bS);XYe=r(tBr,"BertTokenizerFast"),tBr.forEach(t),zYe=r(C7," (QDQBert model)"),C7.forEach(t),QYe=i(R),ug=n(R,"LI",{});var Z8e=s(ug);yee=n(Z8e,"STRONG",{});var aBr=s(yee);WYe=r(aBr,"rag"),aBr.forEach(t),HYe=r(Z8e," \u2014 "),FS=n(Z8e,"A",{href:!0});var nBr=s(FS);UYe=r(nBr,"RagTokenizer"),nBr.forEach(t),JYe=r(Z8e," (RAG model)"),Z8e.forEach(t),YYe=i(R),ss=n(R,"LI",{});var w7=s(ss);Lee=n(w7,"STRONG",{});var sBr=s(Lee);KYe=r(sBr,"realm"),sBr.forEach(t),ZYe=r(w7," \u2014 "),TS=n(w7,"A",{href:!0});var lBr=s(TS);eKe=r(lBr,"RealmTokenizer"),lBr.forEach(t),oKe=r(w7," or "),MS=n(w7,"A",{href:!0});var iBr=s(MS);rKe=r(iBr,"RealmTokenizerFast"),iBr.forEach(t),tKe=r(w7," (Realm model)"),w7.forEach(t),aKe=i(R),ls=n(R,"LI",{});var A7=s(ls);xee=n(A7,"STRONG",{});var dBr=s(xee);nKe=r(dBr,"reformer"),dBr.forEach(t),sKe=r(A7," \u2014 "),ES=n(A7,"A",{href:!0});var cBr=s(ES);lKe=r(cBr,"ReformerTokenizer"),cBr.forEach(t),iKe=r(A7," or "),CS=n(A7,"A",{href:!0});var fBr=s(CS);dKe=r(fBr,"ReformerTokenizerFast"),fBr.forEach(t),cKe=r(A7," (Reformer model)"),A7.forEach(t),fKe=i(R),is=n(R,"LI",{});var y7=s(is);$ee=n(y7,"STRONG",{});var mBr=s($ee);mKe=r(mBr,"rembert"),mBr.forEach(t),gKe=r(y7," \u2014 "),wS=n(y7,"A",{href:!0});var gBr=s(wS);hKe=r(gBr,"RemBertTokenizer"),gBr.forEach(t),uKe=r(y7," or "),AS=n(y7,"A",{href:!0});var hBr=s(AS);pKe=r(hBr,"RemBertTokenizerFast"),hBr.forEach(t),_Ke=r(y7," (RemBERT model)"),y7.forEach(t),vKe=i(R),ds=n(R,"LI",{});var L7=s(ds);kee=n(L7,"STRONG",{});var uBr=s(kee);bKe=r(uBr,"retribert"),uBr.forEach(t),FKe=r(L7," \u2014 "),yS=n(L7,"A",{href:!0});var pBr=s(yS);TKe=r(pBr,"RetriBertTokenizer"),pBr.forEach(t),MKe=r(L7," or "),LS=n(L7,"A",{href:!0});var _Br=s(LS);EKe=r(_Br,"RetriBertTokenizerFast"),_Br.forEach(t),CKe=r(L7," (RetriBERT model)"),L7.forEach(t),wKe=i(R),cs=n(R,"LI",{});var x7=s(cs);See=n(x7,"STRONG",{});var vBr=s(See);AKe=r(vBr,"roberta"),vBr.forEach(t),yKe=r(x7," \u2014 "),xS=n(x7,"A",{href:!0});var bBr=s(xS);LKe=r(bBr,"RobertaTokenizer"),bBr.forEach(t),xKe=r(x7," or "),$S=n(x7,"A",{href:!0});var FBr=s($S);$Ke=r(FBr,"RobertaTokenizerFast"),FBr.forEach(t),kKe=r(x7," (RoBERTa model)"),x7.forEach(t),SKe=i(R),fs=n(R,"LI",{});var $7=s(fs);Ree=n($7,"STRONG",{});var TBr=s(Ree);RKe=r(TBr,"roformer"),TBr.forEach(t),BKe=r($7," \u2014 "),kS=n($7,"A",{href:!0});var MBr=s(kS);PKe=r(MBr,"RoFormerTokenizer"),MBr.forEach(t),IKe=r($7," or "),SS=n($7,"A",{href:!0});var EBr=s(SS);qKe=r(EBr,"RoFormerTokenizerFast"),EBr.forEach(t),NKe=r($7," (RoFormer model)"),$7.forEach(t),jKe=i(R),pg=n(R,"LI",{});var eMe=s(pg);Bee=n(eMe,"STRONG",{});var CBr=s(Bee);DKe=r(CBr,"speech_to_text"),CBr.forEach(t),GKe=r(eMe," \u2014 "),RS=n(eMe,"A",{href:!0});var wBr=s(RS);OKe=r(wBr,"Speech2TextTokenizer"),wBr.forEach(t),VKe=r(eMe," (Speech2Text model)"),eMe.forEach(t),XKe=i(R),_g=n(R,"LI",{});var oMe=s(_g);Pee=n(oMe,"STRONG",{});var ABr=s(Pee);zKe=r(ABr,"speech_to_text_2"),ABr.forEach(t),QKe=r(oMe," \u2014 "),BS=n(oMe,"A",{href:!0});var yBr=s(BS);WKe=r(yBr,"Speech2Text2Tokenizer"),yBr.forEach(t),HKe=r(oMe," (Speech2Text2 model)"),oMe.forEach(t),UKe=i(R),ms=n(R,"LI",{});var k7=s(ms);Iee=n(k7,"STRONG",{});var LBr=s(Iee);JKe=r(LBr,"splinter"),LBr.forEach(t),YKe=r(k7," \u2014 "),PS=n(k7,"A",{href:!0});var xBr=s(PS);KKe=r(xBr,"SplinterTokenizer"),xBr.forEach(t),ZKe=r(k7," or "),IS=n(k7,"A",{href:!0});var $Br=s(IS);eZe=r($Br,"SplinterTokenizerFast"),$Br.forEach(t),oZe=r(k7," (Splinter model)"),k7.forEach(t),rZe=i(R),gs=n(R,"LI",{});var S7=s(gs);qee=n(S7,"STRONG",{});var kBr=s(qee);tZe=r(kBr,"squeezebert"),kBr.forEach(t),aZe=r(S7," \u2014 "),qS=n(S7,"A",{href:!0});var SBr=s(qS);nZe=r(SBr,"SqueezeBertTokenizer"),SBr.forEach(t),sZe=r(S7," or "),NS=n(S7,"A",{href:!0});var RBr=s(NS);lZe=r(RBr,"SqueezeBertTokenizerFast"),RBr.forEach(t),iZe=r(S7," (SqueezeBERT model)"),S7.forEach(t),dZe=i(R),hs=n(R,"LI",{});var R7=s(hs);Nee=n(R7,"STRONG",{});var BBr=s(Nee);cZe=r(BBr,"t5"),BBr.forEach(t),fZe=r(R7," \u2014 "),jS=n(R7,"A",{href:!0});var PBr=s(jS);mZe=r(PBr,"T5Tokenizer"),PBr.forEach(t),gZe=r(R7," or "),DS=n(R7,"A",{href:!0});var IBr=s(DS);hZe=r(IBr,"T5TokenizerFast"),IBr.forEach(t),uZe=r(R7," (T5 model)"),R7.forEach(t),pZe=i(R),vg=n(R,"LI",{});var rMe=s(vg);jee=n(rMe,"STRONG",{});var qBr=s(jee);_Ze=r(qBr,"tapas"),qBr.forEach(t),vZe=r(rMe," \u2014 "),GS=n(rMe,"A",{href:!0});var NBr=s(GS);bZe=r(NBr,"TapasTokenizer"),NBr.forEach(t),FZe=r(rMe," (TAPAS model)"),rMe.forEach(t),TZe=i(R),bg=n(R,"LI",{});var tMe=s(bg);Dee=n(tMe,"STRONG",{});var jBr=s(Dee);MZe=r(jBr,"transfo-xl"),jBr.forEach(t),EZe=r(tMe," \u2014 "),OS=n(tMe,"A",{href:!0});var DBr=s(OS);CZe=r(DBr,"TransfoXLTokenizer"),DBr.forEach(t),wZe=r(tMe," (Transformer-XL model)"),tMe.forEach(t),AZe=i(R),Fg=n(R,"LI",{});var aMe=s(Fg);Gee=n(aMe,"STRONG",{});var GBr=s(Gee);yZe=r(GBr,"wav2vec2"),GBr.forEach(t),LZe=r(aMe," \u2014 "),VS=n(aMe,"A",{href:!0});var OBr=s(VS);xZe=r(OBr,"Wav2Vec2CTCTokenizer"),OBr.forEach(t),$Ze=r(aMe," (Wav2Vec2 model)"),aMe.forEach(t),kZe=i(R),Tg=n(R,"LI",{});var nMe=s(Tg);Oee=n(nMe,"STRONG",{});var VBr=s(Oee);SZe=r(VBr,"wav2vec2_phoneme"),VBr.forEach(t),RZe=r(nMe," \u2014 "),XS=n(nMe,"A",{href:!0});var XBr=s(XS);BZe=r(XBr,"Wav2Vec2PhonemeCTCTokenizer"),XBr.forEach(t),PZe=r(nMe," (Wav2Vec2Phoneme model)"),nMe.forEach(t),IZe=i(R),us=n(R,"LI",{});var B7=s(us);Vee=n(B7,"STRONG",{});var zBr=s(Vee);qZe=r(zBr,"xglm"),zBr.forEach(t),NZe=r(B7," \u2014 "),zS=n(B7,"A",{href:!0});var QBr=s(zS);jZe=r(QBr,"XGLMTokenizer"),QBr.forEach(t),DZe=r(B7," or "),QS=n(B7,"A",{href:!0});var WBr=s(QS);GZe=r(WBr,"XGLMTokenizerFast"),WBr.forEach(t),OZe=r(B7," (XGLM model)"),B7.forEach(t),VZe=i(R),Mg=n(R,"LI",{});var sMe=s(Mg);Xee=n(sMe,"STRONG",{});var HBr=s(Xee);XZe=r(HBr,"xlm"),HBr.forEach(t),zZe=r(sMe," \u2014 "),WS=n(sMe,"A",{href:!0});var UBr=s(WS);QZe=r(UBr,"XLMTokenizer"),UBr.forEach(t),WZe=r(sMe," (XLM model)"),sMe.forEach(t),HZe=i(R),Eg=n(R,"LI",{});var lMe=s(Eg);zee=n(lMe,"STRONG",{});var JBr=s(zee);UZe=r(JBr,"xlm-prophetnet"),JBr.forEach(t),JZe=r(lMe," \u2014 "),HS=n(lMe,"A",{href:!0});var YBr=s(HS);YZe=r(YBr,"XLMProphetNetTokenizer"),YBr.forEach(t),KZe=r(lMe," (XLMProphetNet model)"),lMe.forEach(t),ZZe=i(R),ps=n(R,"LI",{});var P7=s(ps);Qee=n(P7,"STRONG",{});var KBr=s(Qee);eeo=r(KBr,"xlm-roberta"),KBr.forEach(t),oeo=r(P7," \u2014 "),US=n(P7,"A",{href:!0});var ZBr=s(US);reo=r(ZBr,"XLMRobertaTokenizer"),ZBr.forEach(t),teo=r(P7," or "),JS=n(P7,"A",{href:!0});var ePr=s(JS);aeo=r(ePr,"XLMRobertaTokenizerFast"),ePr.forEach(t),neo=r(P7," (XLM-RoBERTa model)"),P7.forEach(t),seo=i(R),_s=n(R,"LI",{});var I7=s(_s);Wee=n(I7,"STRONG",{});var oPr=s(Wee);leo=r(oPr,"xlnet"),oPr.forEach(t),ieo=r(I7," \u2014 "),YS=n(I7,"A",{href:!0});var rPr=s(YS);deo=r(rPr,"XLNetTokenizer"),rPr.forEach(t),ceo=r(I7," or "),KS=n(I7,"A",{href:!0});var tPr=s(KS);feo=r(tPr,"XLNetTokenizerFast"),tPr.forEach(t),meo=r(I7," (XLNet model)"),I7.forEach(t),R.forEach(t),geo=i(Ms),T(Cg.$$.fragment,Ms),Ms.forEach(t),heo=i(Ts),wg=n(Ts,"DIV",{class:!0});var _Re=s(wg);T(Jw.$$.fragment,_Re),ueo=i(_Re),Hee=n(_Re,"P",{});var aPr=s(Hee);peo=r(aPr,"Register a new tokenizer in this mapping."),aPr.forEach(t),_Re.forEach(t),Ts.forEach(t),Fke=i(f),ti=n(f,"H2",{class:!0});var vRe=s(ti);Ag=n(vRe,"A",{id:!0,class:!0,href:!0});var nPr=s(Ag);Uee=n(nPr,"SPAN",{});var sPr=s(Uee);T(Yw.$$.fragment,sPr),sPr.forEach(t),nPr.forEach(t),_eo=i(vRe),Jee=n(vRe,"SPAN",{});var lPr=s(Jee);veo=r(lPr,"AutoFeatureExtractor"),lPr.forEach(t),vRe.forEach(t),Tke=i(f),Co=n(f,"DIV",{class:!0});var Es=s(Co);T(Kw.$$.fragment,Es),beo=i(Es),Zw=n(Es,"P",{});var bRe=s(Zw);Feo=r(bRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ZS=n(bRe,"A",{href:!0});var iPr=s(ZS);Teo=r(iPr,"AutoFeatureExtractor.from_pretrained()"),iPr.forEach(t),Meo=r(bRe," class method."),bRe.forEach(t),Eeo=i(Es),eA=n(Es,"P",{});var FRe=s(eA);Ceo=r(FRe,"This class cannot be instantiated directly using "),Yee=n(FRe,"CODE",{});var dPr=s(Yee);weo=r(dPr,"__init__()"),dPr.forEach(t),Aeo=r(FRe," (throws an error)."),FRe.forEach(t),yeo=i(Es),Ve=n(Es,"DIV",{class:!0});var Wt=s(Ve);T(oA.$$.fragment,Wt),Leo=i(Wt),Kee=n(Wt,"P",{});var cPr=s(Kee);xeo=r(cPr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cPr.forEach(t),$eo=i(Wt),Ta=n(Wt,"P",{});var OC=s(Ta);keo=r(OC,"The feature extractor class to instantiate is selected based on the "),Zee=n(OC,"CODE",{});var fPr=s(Zee);Seo=r(fPr,"model_type"),fPr.forEach(t),Reo=r(OC,` property of the config object
(either passed as an argument or loaded from `),eoe=n(OC,"CODE",{});var mPr=s(eoe);Beo=r(mPr,"pretrained_model_name_or_path"),mPr.forEach(t),Peo=r(OC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ooe=n(OC,"CODE",{});var gPr=s(ooe);Ieo=r(gPr,"pretrained_model_name_or_path"),gPr.forEach(t),qeo=r(OC,":"),OC.forEach(t),Neo=i(Wt),me=n(Wt,"UL",{});var he=s(me);yg=n(he,"LI",{});var iMe=s(yg);roe=n(iMe,"STRONG",{});var hPr=s(roe);jeo=r(hPr,"beit"),hPr.forEach(t),Deo=r(iMe," \u2014 "),eR=n(iMe,"A",{href:!0});var uPr=s(eR);Geo=r(uPr,"BeitFeatureExtractor"),uPr.forEach(t),Oeo=r(iMe," (BEiT model)"),iMe.forEach(t),Veo=i(he),Lg=n(he,"LI",{});var dMe=s(Lg);toe=n(dMe,"STRONG",{});var pPr=s(toe);Xeo=r(pPr,"clip"),pPr.forEach(t),zeo=r(dMe," \u2014 "),oR=n(dMe,"A",{href:!0});var _Pr=s(oR);Qeo=r(_Pr,"CLIPFeatureExtractor"),_Pr.forEach(t),Weo=r(dMe," (CLIP model)"),dMe.forEach(t),Heo=i(he),xg=n(he,"LI",{});var cMe=s(xg);aoe=n(cMe,"STRONG",{});var vPr=s(aoe);Ueo=r(vPr,"convnext"),vPr.forEach(t),Jeo=r(cMe," \u2014 "),rR=n(cMe,"A",{href:!0});var bPr=s(rR);Yeo=r(bPr,"ConvNextFeatureExtractor"),bPr.forEach(t),Keo=r(cMe," (ConvNext model)"),cMe.forEach(t),Zeo=i(he),$g=n(he,"LI",{});var fMe=s($g);noe=n(fMe,"STRONG",{});var FPr=s(noe);eoo=r(FPr,"deit"),FPr.forEach(t),ooo=r(fMe," \u2014 "),tR=n(fMe,"A",{href:!0});var TPr=s(tR);roo=r(TPr,"DeiTFeatureExtractor"),TPr.forEach(t),too=r(fMe," (DeiT model)"),fMe.forEach(t),aoo=i(he),kg=n(he,"LI",{});var mMe=s(kg);soe=n(mMe,"STRONG",{});var MPr=s(soe);noo=r(MPr,"detr"),MPr.forEach(t),soo=r(mMe," \u2014 "),aR=n(mMe,"A",{href:!0});var EPr=s(aR);loo=r(EPr,"DetrFeatureExtractor"),EPr.forEach(t),ioo=r(mMe," (DETR model)"),mMe.forEach(t),doo=i(he),Sg=n(he,"LI",{});var gMe=s(Sg);loe=n(gMe,"STRONG",{});var CPr=s(loe);coo=r(CPr,"hubert"),CPr.forEach(t),foo=r(gMe," \u2014 "),nR=n(gMe,"A",{href:!0});var wPr=s(nR);moo=r(wPr,"Wav2Vec2FeatureExtractor"),wPr.forEach(t),goo=r(gMe," (Hubert model)"),gMe.forEach(t),hoo=i(he),Rg=n(he,"LI",{});var hMe=s(Rg);ioe=n(hMe,"STRONG",{});var APr=s(ioe);uoo=r(APr,"layoutlmv2"),APr.forEach(t),poo=r(hMe," \u2014 "),sR=n(hMe,"A",{href:!0});var yPr=s(sR);_oo=r(yPr,"LayoutLMv2FeatureExtractor"),yPr.forEach(t),voo=r(hMe," (LayoutLMv2 model)"),hMe.forEach(t),boo=i(he),Bg=n(he,"LI",{});var uMe=s(Bg);doe=n(uMe,"STRONG",{});var LPr=s(doe);Foo=r(LPr,"maskformer"),LPr.forEach(t),Too=r(uMe," \u2014 "),lR=n(uMe,"A",{href:!0});var xPr=s(lR);Moo=r(xPr,"MaskFormerFeatureExtractor"),xPr.forEach(t),Eoo=r(uMe," (MaskFormer model)"),uMe.forEach(t),Coo=i(he),Pg=n(he,"LI",{});var pMe=s(Pg);coe=n(pMe,"STRONG",{});var $Pr=s(coe);woo=r($Pr,"perceiver"),$Pr.forEach(t),Aoo=r(pMe," \u2014 "),iR=n(pMe,"A",{href:!0});var kPr=s(iR);yoo=r(kPr,"PerceiverFeatureExtractor"),kPr.forEach(t),Loo=r(pMe," (Perceiver model)"),pMe.forEach(t),xoo=i(he),Ig=n(he,"LI",{});var _Me=s(Ig);foe=n(_Me,"STRONG",{});var SPr=s(foe);$oo=r(SPr,"poolformer"),SPr.forEach(t),koo=r(_Me," \u2014 "),dR=n(_Me,"A",{href:!0});var RPr=s(dR);Soo=r(RPr,"PoolFormerFeatureExtractor"),RPr.forEach(t),Roo=r(_Me," (PoolFormer model)"),_Me.forEach(t),Boo=i(he),qg=n(he,"LI",{});var vMe=s(qg);moe=n(vMe,"STRONG",{});var BPr=s(moe);Poo=r(BPr,"resnet"),BPr.forEach(t),Ioo=r(vMe," \u2014 "),cR=n(vMe,"A",{href:!0});var PPr=s(cR);qoo=r(PPr,"ConvNextFeatureExtractor"),PPr.forEach(t),Noo=r(vMe," (ResNet model)"),vMe.forEach(t),joo=i(he),Ng=n(he,"LI",{});var bMe=s(Ng);goe=n(bMe,"STRONG",{});var IPr=s(goe);Doo=r(IPr,"segformer"),IPr.forEach(t),Goo=r(bMe," \u2014 "),fR=n(bMe,"A",{href:!0});var qPr=s(fR);Ooo=r(qPr,"SegformerFeatureExtractor"),qPr.forEach(t),Voo=r(bMe," (SegFormer model)"),bMe.forEach(t),Xoo=i(he),jg=n(he,"LI",{});var FMe=s(jg);hoe=n(FMe,"STRONG",{});var NPr=s(hoe);zoo=r(NPr,"speech_to_text"),NPr.forEach(t),Qoo=r(FMe," \u2014 "),mR=n(FMe,"A",{href:!0});var jPr=s(mR);Woo=r(jPr,"Speech2TextFeatureExtractor"),jPr.forEach(t),Hoo=r(FMe," (Speech2Text model)"),FMe.forEach(t),Uoo=i(he),Dg=n(he,"LI",{});var TMe=s(Dg);uoe=n(TMe,"STRONG",{});var DPr=s(uoe);Joo=r(DPr,"swin"),DPr.forEach(t),Yoo=r(TMe," \u2014 "),gR=n(TMe,"A",{href:!0});var GPr=s(gR);Koo=r(GPr,"ViTFeatureExtractor"),GPr.forEach(t),Zoo=r(TMe," (Swin model)"),TMe.forEach(t),ero=i(he),Gg=n(he,"LI",{});var MMe=s(Gg);poe=n(MMe,"STRONG",{});var OPr=s(poe);oro=r(OPr,"van"),OPr.forEach(t),rro=r(MMe," \u2014 "),hR=n(MMe,"A",{href:!0});var VPr=s(hR);tro=r(VPr,"ConvNextFeatureExtractor"),VPr.forEach(t),aro=r(MMe," (VAN model)"),MMe.forEach(t),nro=i(he),Og=n(he,"LI",{});var EMe=s(Og);_oe=n(EMe,"STRONG",{});var XPr=s(_oe);sro=r(XPr,"vit"),XPr.forEach(t),lro=r(EMe," \u2014 "),uR=n(EMe,"A",{href:!0});var zPr=s(uR);iro=r(zPr,"ViTFeatureExtractor"),zPr.forEach(t),dro=r(EMe," (ViT model)"),EMe.forEach(t),cro=i(he),Vg=n(he,"LI",{});var CMe=s(Vg);voe=n(CMe,"STRONG",{});var QPr=s(voe);fro=r(QPr,"vit_mae"),QPr.forEach(t),mro=r(CMe," \u2014 "),pR=n(CMe,"A",{href:!0});var WPr=s(pR);gro=r(WPr,"ViTFeatureExtractor"),WPr.forEach(t),hro=r(CMe," (ViTMAE model)"),CMe.forEach(t),uro=i(he),Xg=n(he,"LI",{});var wMe=s(Xg);boe=n(wMe,"STRONG",{});var HPr=s(boe);pro=r(HPr,"wav2vec2"),HPr.forEach(t),_ro=r(wMe," \u2014 "),_R=n(wMe,"A",{href:!0});var UPr=s(_R);vro=r(UPr,"Wav2Vec2FeatureExtractor"),UPr.forEach(t),bro=r(wMe," (Wav2Vec2 model)"),wMe.forEach(t),he.forEach(t),Fro=i(Wt),T(zg.$$.fragment,Wt),Tro=i(Wt),T(Qg.$$.fragment,Wt),Wt.forEach(t),Mro=i(Es),Wg=n(Es,"DIV",{class:!0});var TRe=s(Wg);T(rA.$$.fragment,TRe),Ero=i(TRe),Foe=n(TRe,"P",{});var JPr=s(Foe);Cro=r(JPr,"Register a new feature extractor for this class."),JPr.forEach(t),TRe.forEach(t),Es.forEach(t),Mke=i(f),ai=n(f,"H2",{class:!0});var MRe=s(ai);Hg=n(MRe,"A",{id:!0,class:!0,href:!0});var YPr=s(Hg);Toe=n(YPr,"SPAN",{});var KPr=s(Toe);T(tA.$$.fragment,KPr),KPr.forEach(t),YPr.forEach(t),wro=i(MRe),Moe=n(MRe,"SPAN",{});var ZPr=s(Moe);Aro=r(ZPr,"AutoProcessor"),ZPr.forEach(t),MRe.forEach(t),Eke=i(f),wo=n(f,"DIV",{class:!0});var Cs=s(wo);T(aA.$$.fragment,Cs),yro=i(Cs),nA=n(Cs,"P",{});var ERe=s(nA);Lro=r(ERe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vR=n(ERe,"A",{href:!0});var eIr=s(vR);xro=r(eIr,"AutoProcessor.from_pretrained()"),eIr.forEach(t),$ro=r(ERe," class method."),ERe.forEach(t),kro=i(Cs),sA=n(Cs,"P",{});var CRe=s(sA);Sro=r(CRe,"This class cannot be instantiated directly using "),Eoe=n(CRe,"CODE",{});var oIr=s(Eoe);Rro=r(oIr,"__init__()"),oIr.forEach(t),Bro=r(CRe," (throws an error)."),CRe.forEach(t),Pro=i(Cs),Xe=n(Cs,"DIV",{class:!0});var Ht=s(Xe);T(lA.$$.fragment,Ht),Iro=i(Ht),Coe=n(Ht,"P",{});var rIr=s(Coe);qro=r(rIr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),rIr.forEach(t),Nro=i(Ht),ni=n(Ht,"P",{});var wU=s(ni);jro=r(wU,"The processor class to instantiate is selected based on the "),woe=n(wU,"CODE",{});var tIr=s(woe);Dro=r(tIr,"model_type"),tIr.forEach(t),Gro=r(wU,` property of the config object (either
passed as an argument or loaded from `),Aoe=n(wU,"CODE",{});var aIr=s(Aoe);Oro=r(aIr,"pretrained_model_name_or_path"),aIr.forEach(t),Vro=r(wU," if possible):"),wU.forEach(t),Xro=i(Ht),Pe=n(Ht,"UL",{});var uo=s(Pe);Ug=n(uo,"LI",{});var AMe=s(Ug);yoe=n(AMe,"STRONG",{});var nIr=s(yoe);zro=r(nIr,"clip"),nIr.forEach(t),Qro=r(AMe," \u2014 "),bR=n(AMe,"A",{href:!0});var sIr=s(bR);Wro=r(sIr,"CLIPProcessor"),sIr.forEach(t),Hro=r(AMe," (CLIP model)"),AMe.forEach(t),Uro=i(uo),Jg=n(uo,"LI",{});var yMe=s(Jg);Loe=n(yMe,"STRONG",{});var lIr=s(Loe);Jro=r(lIr,"layoutlmv2"),lIr.forEach(t),Yro=r(yMe," \u2014 "),FR=n(yMe,"A",{href:!0});var iIr=s(FR);Kro=r(iIr,"LayoutLMv2Processor"),iIr.forEach(t),Zro=r(yMe," (LayoutLMv2 model)"),yMe.forEach(t),eto=i(uo),Yg=n(uo,"LI",{});var LMe=s(Yg);xoe=n(LMe,"STRONG",{});var dIr=s(xoe);oto=r(dIr,"layoutxlm"),dIr.forEach(t),rto=r(LMe," \u2014 "),TR=n(LMe,"A",{href:!0});var cIr=s(TR);tto=r(cIr,"LayoutXLMProcessor"),cIr.forEach(t),ato=r(LMe," (LayoutXLM model)"),LMe.forEach(t),nto=i(uo),Kg=n(uo,"LI",{});var xMe=s(Kg);$oe=n(xMe,"STRONG",{});var fIr=s($oe);sto=r(fIr,"speech_to_text"),fIr.forEach(t),lto=r(xMe," \u2014 "),MR=n(xMe,"A",{href:!0});var mIr=s(MR);ito=r(mIr,"Speech2TextProcessor"),mIr.forEach(t),dto=r(xMe," (Speech2Text model)"),xMe.forEach(t),cto=i(uo),Zg=n(uo,"LI",{});var $Me=s(Zg);koe=n($Me,"STRONG",{});var gIr=s(koe);fto=r(gIr,"speech_to_text_2"),gIr.forEach(t),mto=r($Me," \u2014 "),ER=n($Me,"A",{href:!0});var hIr=s(ER);gto=r(hIr,"Speech2Text2Processor"),hIr.forEach(t),hto=r($Me," (Speech2Text2 model)"),$Me.forEach(t),uto=i(uo),eh=n(uo,"LI",{});var kMe=s(eh);Soe=n(kMe,"STRONG",{});var uIr=s(Soe);pto=r(uIr,"trocr"),uIr.forEach(t),_to=r(kMe," \u2014 "),CR=n(kMe,"A",{href:!0});var pIr=s(CR);vto=r(pIr,"TrOCRProcessor"),pIr.forEach(t),bto=r(kMe," (TrOCR model)"),kMe.forEach(t),Fto=i(uo),oh=n(uo,"LI",{});var SMe=s(oh);Roe=n(SMe,"STRONG",{});var _Ir=s(Roe);Tto=r(_Ir,"vision-text-dual-encoder"),_Ir.forEach(t),Mto=r(SMe," \u2014 "),wR=n(SMe,"A",{href:!0});var vIr=s(wR);Eto=r(vIr,"VisionTextDualEncoderProcessor"),vIr.forEach(t),Cto=r(SMe," (VisionTextDualEncoder model)"),SMe.forEach(t),wto=i(uo),rh=n(uo,"LI",{});var RMe=s(rh);Boe=n(RMe,"STRONG",{});var bIr=s(Boe);Ato=r(bIr,"wav2vec2"),bIr.forEach(t),yto=r(RMe," \u2014 "),AR=n(RMe,"A",{href:!0});var FIr=s(AR);Lto=r(FIr,"Wav2Vec2Processor"),FIr.forEach(t),xto=r(RMe," (Wav2Vec2 model)"),RMe.forEach(t),uo.forEach(t),$to=i(Ht),T(th.$$.fragment,Ht),kto=i(Ht),T(ah.$$.fragment,Ht),Ht.forEach(t),Sto=i(Cs),nh=n(Cs,"DIV",{class:!0});var wRe=s(nh);T(iA.$$.fragment,wRe),Rto=i(wRe),Poe=n(wRe,"P",{});var TIr=s(Poe);Bto=r(TIr,"Register a new processor for this class."),TIr.forEach(t),wRe.forEach(t),Cs.forEach(t),Cke=i(f),si=n(f,"H2",{class:!0});var ARe=s(si);sh=n(ARe,"A",{id:!0,class:!0,href:!0});var MIr=s(sh);Ioe=n(MIr,"SPAN",{});var EIr=s(Ioe);T(dA.$$.fragment,EIr),EIr.forEach(t),MIr.forEach(t),Pto=i(ARe),qoe=n(ARe,"SPAN",{});var CIr=s(qoe);Ito=r(CIr,"AutoModel"),CIr.forEach(t),ARe.forEach(t),wke=i(f),Ao=n(f,"DIV",{class:!0});var ws=s(Ao);T(cA.$$.fragment,ws),qto=i(ws),li=n(ws,"P",{});var AU=s(li);Nto=r(AU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yR=n(AU,"A",{href:!0});var wIr=s(yR);jto=r(wIr,"from_pretrained()"),wIr.forEach(t),Dto=r(AU," class method or the "),LR=n(AU,"A",{href:!0});var AIr=s(LR);Gto=r(AIr,"from_config()"),AIr.forEach(t),Oto=r(AU,` class
method.`),AU.forEach(t),Vto=i(ws),fA=n(ws,"P",{});var yRe=s(fA);Xto=r(yRe,"This class cannot be instantiated directly using "),Noe=n(yRe,"CODE",{});var yIr=s(Noe);zto=r(yIr,"__init__()"),yIr.forEach(t),Qto=r(yRe," (throws an error)."),yRe.forEach(t),Wto=i(ws),Kr=n(ws,"DIV",{class:!0});var VC=s(Kr);T(mA.$$.fragment,VC),Hto=i(VC),joe=n(VC,"P",{});var LIr=s(joe);Uto=r(LIr,"Instantiates one of the base model classes of the library from a configuration."),LIr.forEach(t),Jto=i(VC),ii=n(VC,"P",{});var yU=s(ii);Yto=r(yU,`Note:
Loading a model from its configuration file does `),Doe=n(yU,"STRONG",{});var xIr=s(Doe);Kto=r(xIr,"not"),xIr.forEach(t),Zto=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xR=n(yU,"A",{href:!0});var $Ir=s(xR);eao=r($Ir,"from_pretrained()"),$Ir.forEach(t),oao=r(yU," to load the model weights."),yU.forEach(t),rao=i(VC),T(lh.$$.fragment,VC),VC.forEach(t),tao=i(ws),ze=n(ws,"DIV",{class:!0});var Ut=s(ze);T(gA.$$.fragment,Ut),aao=i(Ut),Goe=n(Ut,"P",{});var kIr=s(Goe);nao=r(kIr,"Instantiate one of the base model classes of the library from a pretrained model."),kIr.forEach(t),sao=i(Ut),Ma=n(Ut,"P",{});var XC=s(Ma);lao=r(XC,"The model class to instantiate is selected based on the "),Ooe=n(XC,"CODE",{});var SIr=s(Ooe);iao=r(SIr,"model_type"),SIr.forEach(t),dao=r(XC,` property of the config object (either
passed as an argument or loaded from `),Voe=n(XC,"CODE",{});var RIr=s(Voe);cao=r(RIr,"pretrained_model_name_or_path"),RIr.forEach(t),fao=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=n(XC,"CODE",{});var BIr=s(Xoe);mao=r(BIr,"pretrained_model_name_or_path"),BIr.forEach(t),gao=r(XC,":"),XC.forEach(t),hao=i(Ut),x=n(Ut,"UL",{});var $=s(x);ih=n($,"LI",{});var BMe=s(ih);zoe=n(BMe,"STRONG",{});var PIr=s(zoe);uao=r(PIr,"albert"),PIr.forEach(t),pao=r(BMe," \u2014 "),$R=n(BMe,"A",{href:!0});var IIr=s($R);_ao=r(IIr,"AlbertModel"),IIr.forEach(t),vao=r(BMe," (ALBERT model)"),BMe.forEach(t),bao=i($),dh=n($,"LI",{});var PMe=s(dh);Qoe=n(PMe,"STRONG",{});var qIr=s(Qoe);Fao=r(qIr,"bart"),qIr.forEach(t),Tao=r(PMe," \u2014 "),kR=n(PMe,"A",{href:!0});var NIr=s(kR);Mao=r(NIr,"BartModel"),NIr.forEach(t),Eao=r(PMe," (BART model)"),PMe.forEach(t),Cao=i($),ch=n($,"LI",{});var IMe=s(ch);Woe=n(IMe,"STRONG",{});var jIr=s(Woe);wao=r(jIr,"beit"),jIr.forEach(t),Aao=r(IMe," \u2014 "),SR=n(IMe,"A",{href:!0});var DIr=s(SR);yao=r(DIr,"BeitModel"),DIr.forEach(t),Lao=r(IMe," (BEiT model)"),IMe.forEach(t),xao=i($),fh=n($,"LI",{});var qMe=s(fh);Hoe=n(qMe,"STRONG",{});var GIr=s(Hoe);$ao=r(GIr,"bert"),GIr.forEach(t),kao=r(qMe," \u2014 "),RR=n(qMe,"A",{href:!0});var OIr=s(RR);Sao=r(OIr,"BertModel"),OIr.forEach(t),Rao=r(qMe," (BERT model)"),qMe.forEach(t),Bao=i($),mh=n($,"LI",{});var NMe=s(mh);Uoe=n(NMe,"STRONG",{});var VIr=s(Uoe);Pao=r(VIr,"bert-generation"),VIr.forEach(t),Iao=r(NMe," \u2014 "),BR=n(NMe,"A",{href:!0});var XIr=s(BR);qao=r(XIr,"BertGenerationEncoder"),XIr.forEach(t),Nao=r(NMe," (Bert Generation model)"),NMe.forEach(t),jao=i($),gh=n($,"LI",{});var jMe=s(gh);Joe=n(jMe,"STRONG",{});var zIr=s(Joe);Dao=r(zIr,"big_bird"),zIr.forEach(t),Gao=r(jMe," \u2014 "),PR=n(jMe,"A",{href:!0});var QIr=s(PR);Oao=r(QIr,"BigBirdModel"),QIr.forEach(t),Vao=r(jMe," (BigBird model)"),jMe.forEach(t),Xao=i($),hh=n($,"LI",{});var DMe=s(hh);Yoe=n(DMe,"STRONG",{});var WIr=s(Yoe);zao=r(WIr,"bigbird_pegasus"),WIr.forEach(t),Qao=r(DMe," \u2014 "),IR=n(DMe,"A",{href:!0});var HIr=s(IR);Wao=r(HIr,"BigBirdPegasusModel"),HIr.forEach(t),Hao=r(DMe," (BigBirdPegasus model)"),DMe.forEach(t),Uao=i($),uh=n($,"LI",{});var GMe=s(uh);Koe=n(GMe,"STRONG",{});var UIr=s(Koe);Jao=r(UIr,"blenderbot"),UIr.forEach(t),Yao=r(GMe," \u2014 "),qR=n(GMe,"A",{href:!0});var JIr=s(qR);Kao=r(JIr,"BlenderbotModel"),JIr.forEach(t),Zao=r(GMe," (Blenderbot model)"),GMe.forEach(t),eno=i($),ph=n($,"LI",{});var OMe=s(ph);Zoe=n(OMe,"STRONG",{});var YIr=s(Zoe);ono=r(YIr,"blenderbot-small"),YIr.forEach(t),rno=r(OMe," \u2014 "),NR=n(OMe,"A",{href:!0});var KIr=s(NR);tno=r(KIr,"BlenderbotSmallModel"),KIr.forEach(t),ano=r(OMe," (BlenderbotSmall model)"),OMe.forEach(t),nno=i($),_h=n($,"LI",{});var VMe=s(_h);ere=n(VMe,"STRONG",{});var ZIr=s(ere);sno=r(ZIr,"camembert"),ZIr.forEach(t),lno=r(VMe," \u2014 "),jR=n(VMe,"A",{href:!0});var eqr=s(jR);ino=r(eqr,"CamembertModel"),eqr.forEach(t),dno=r(VMe," (CamemBERT model)"),VMe.forEach(t),cno=i($),vh=n($,"LI",{});var XMe=s(vh);ore=n(XMe,"STRONG",{});var oqr=s(ore);fno=r(oqr,"canine"),oqr.forEach(t),mno=r(XMe," \u2014 "),DR=n(XMe,"A",{href:!0});var rqr=s(DR);gno=r(rqr,"CanineModel"),rqr.forEach(t),hno=r(XMe," (Canine model)"),XMe.forEach(t),uno=i($),bh=n($,"LI",{});var zMe=s(bh);rre=n(zMe,"STRONG",{});var tqr=s(rre);pno=r(tqr,"clip"),tqr.forEach(t),_no=r(zMe," \u2014 "),GR=n(zMe,"A",{href:!0});var aqr=s(GR);vno=r(aqr,"CLIPModel"),aqr.forEach(t),bno=r(zMe," (CLIP model)"),zMe.forEach(t),Fno=i($),Fh=n($,"LI",{});var QMe=s(Fh);tre=n(QMe,"STRONG",{});var nqr=s(tre);Tno=r(nqr,"convbert"),nqr.forEach(t),Mno=r(QMe," \u2014 "),OR=n(QMe,"A",{href:!0});var sqr=s(OR);Eno=r(sqr,"ConvBertModel"),sqr.forEach(t),Cno=r(QMe," (ConvBERT model)"),QMe.forEach(t),wno=i($),Th=n($,"LI",{});var WMe=s(Th);are=n(WMe,"STRONG",{});var lqr=s(are);Ano=r(lqr,"convnext"),lqr.forEach(t),yno=r(WMe," \u2014 "),VR=n(WMe,"A",{href:!0});var iqr=s(VR);Lno=r(iqr,"ConvNextModel"),iqr.forEach(t),xno=r(WMe," (ConvNext model)"),WMe.forEach(t),$no=i($),Mh=n($,"LI",{});var HMe=s(Mh);nre=n(HMe,"STRONG",{});var dqr=s(nre);kno=r(dqr,"ctrl"),dqr.forEach(t),Sno=r(HMe," \u2014 "),XR=n(HMe,"A",{href:!0});var cqr=s(XR);Rno=r(cqr,"CTRLModel"),cqr.forEach(t),Bno=r(HMe," (CTRL model)"),HMe.forEach(t),Pno=i($),Eh=n($,"LI",{});var UMe=s(Eh);sre=n(UMe,"STRONG",{});var fqr=s(sre);Ino=r(fqr,"data2vec-audio"),fqr.forEach(t),qno=r(UMe," \u2014 "),zR=n(UMe,"A",{href:!0});var mqr=s(zR);Nno=r(mqr,"Data2VecAudioModel"),mqr.forEach(t),jno=r(UMe," (Data2VecAudio model)"),UMe.forEach(t),Dno=i($),Ch=n($,"LI",{});var JMe=s(Ch);lre=n(JMe,"STRONG",{});var gqr=s(lre);Gno=r(gqr,"data2vec-text"),gqr.forEach(t),Ono=r(JMe," \u2014 "),QR=n(JMe,"A",{href:!0});var hqr=s(QR);Vno=r(hqr,"Data2VecTextModel"),hqr.forEach(t),Xno=r(JMe," (Data2VecText model)"),JMe.forEach(t),zno=i($),wh=n($,"LI",{});var YMe=s(wh);ire=n(YMe,"STRONG",{});var uqr=s(ire);Qno=r(uqr,"deberta"),uqr.forEach(t),Wno=r(YMe," \u2014 "),WR=n(YMe,"A",{href:!0});var pqr=s(WR);Hno=r(pqr,"DebertaModel"),pqr.forEach(t),Uno=r(YMe," (DeBERTa model)"),YMe.forEach(t),Jno=i($),Ah=n($,"LI",{});var KMe=s(Ah);dre=n(KMe,"STRONG",{});var _qr=s(dre);Yno=r(_qr,"deberta-v2"),_qr.forEach(t),Kno=r(KMe," \u2014 "),HR=n(KMe,"A",{href:!0});var vqr=s(HR);Zno=r(vqr,"DebertaV2Model"),vqr.forEach(t),eso=r(KMe," (DeBERTa-v2 model)"),KMe.forEach(t),oso=i($),yh=n($,"LI",{});var ZMe=s(yh);cre=n(ZMe,"STRONG",{});var bqr=s(cre);rso=r(bqr,"decision_transformer"),bqr.forEach(t),tso=r(ZMe," \u2014 "),UR=n(ZMe,"A",{href:!0});var Fqr=s(UR);aso=r(Fqr,"DecisionTransformerModel"),Fqr.forEach(t),nso=r(ZMe," (Decision Transformer model)"),ZMe.forEach(t),sso=i($),Lh=n($,"LI",{});var eEe=s(Lh);fre=n(eEe,"STRONG",{});var Tqr=s(fre);lso=r(Tqr,"deit"),Tqr.forEach(t),iso=r(eEe," \u2014 "),JR=n(eEe,"A",{href:!0});var Mqr=s(JR);dso=r(Mqr,"DeiTModel"),Mqr.forEach(t),cso=r(eEe," (DeiT model)"),eEe.forEach(t),fso=i($),xh=n($,"LI",{});var oEe=s(xh);mre=n(oEe,"STRONG",{});var Eqr=s(mre);mso=r(Eqr,"detr"),Eqr.forEach(t),gso=r(oEe," \u2014 "),YR=n(oEe,"A",{href:!0});var Cqr=s(YR);hso=r(Cqr,"DetrModel"),Cqr.forEach(t),uso=r(oEe," (DETR model)"),oEe.forEach(t),pso=i($),$h=n($,"LI",{});var rEe=s($h);gre=n(rEe,"STRONG",{});var wqr=s(gre);_so=r(wqr,"distilbert"),wqr.forEach(t),vso=r(rEe," \u2014 "),KR=n(rEe,"A",{href:!0});var Aqr=s(KR);bso=r(Aqr,"DistilBertModel"),Aqr.forEach(t),Fso=r(rEe," (DistilBERT model)"),rEe.forEach(t),Tso=i($),kh=n($,"LI",{});var tEe=s(kh);hre=n(tEe,"STRONG",{});var yqr=s(hre);Mso=r(yqr,"dpr"),yqr.forEach(t),Eso=r(tEe," \u2014 "),ZR=n(tEe,"A",{href:!0});var Lqr=s(ZR);Cso=r(Lqr,"DPRQuestionEncoder"),Lqr.forEach(t),wso=r(tEe," (DPR model)"),tEe.forEach(t),Aso=i($),Sh=n($,"LI",{});var aEe=s(Sh);ure=n(aEe,"STRONG",{});var xqr=s(ure);yso=r(xqr,"dpt"),xqr.forEach(t),Lso=r(aEe," \u2014 "),eB=n(aEe,"A",{href:!0});var $qr=s(eB);xso=r($qr,"DPTModel"),$qr.forEach(t),$so=r(aEe," (DPT model)"),aEe.forEach(t),kso=i($),Rh=n($,"LI",{});var nEe=s(Rh);pre=n(nEe,"STRONG",{});var kqr=s(pre);Sso=r(kqr,"electra"),kqr.forEach(t),Rso=r(nEe," \u2014 "),oB=n(nEe,"A",{href:!0});var Sqr=s(oB);Bso=r(Sqr,"ElectraModel"),Sqr.forEach(t),Pso=r(nEe," (ELECTRA model)"),nEe.forEach(t),Iso=i($),Bh=n($,"LI",{});var sEe=s(Bh);_re=n(sEe,"STRONG",{});var Rqr=s(_re);qso=r(Rqr,"flaubert"),Rqr.forEach(t),Nso=r(sEe," \u2014 "),rB=n(sEe,"A",{href:!0});var Bqr=s(rB);jso=r(Bqr,"FlaubertModel"),Bqr.forEach(t),Dso=r(sEe," (FlauBERT model)"),sEe.forEach(t),Gso=i($),Ph=n($,"LI",{});var lEe=s(Ph);vre=n(lEe,"STRONG",{});var Pqr=s(vre);Oso=r(Pqr,"fnet"),Pqr.forEach(t),Vso=r(lEe," \u2014 "),tB=n(lEe,"A",{href:!0});var Iqr=s(tB);Xso=r(Iqr,"FNetModel"),Iqr.forEach(t),zso=r(lEe," (FNet model)"),lEe.forEach(t),Qso=i($),Ih=n($,"LI",{});var iEe=s(Ih);bre=n(iEe,"STRONG",{});var qqr=s(bre);Wso=r(qqr,"fsmt"),qqr.forEach(t),Hso=r(iEe," \u2014 "),aB=n(iEe,"A",{href:!0});var Nqr=s(aB);Uso=r(Nqr,"FSMTModel"),Nqr.forEach(t),Jso=r(iEe," (FairSeq Machine-Translation model)"),iEe.forEach(t),Yso=i($),vs=n($,"LI",{});var q7=s(vs);Fre=n(q7,"STRONG",{});var jqr=s(Fre);Kso=r(jqr,"funnel"),jqr.forEach(t),Zso=r(q7," \u2014 "),nB=n(q7,"A",{href:!0});var Dqr=s(nB);elo=r(Dqr,"FunnelModel"),Dqr.forEach(t),olo=r(q7," or "),sB=n(q7,"A",{href:!0});var Gqr=s(sB);rlo=r(Gqr,"FunnelBaseModel"),Gqr.forEach(t),tlo=r(q7," (Funnel Transformer model)"),q7.forEach(t),alo=i($),qh=n($,"LI",{});var dEe=s(qh);Tre=n(dEe,"STRONG",{});var Oqr=s(Tre);nlo=r(Oqr,"glpn"),Oqr.forEach(t),slo=r(dEe," \u2014 "),lB=n(dEe,"A",{href:!0});var Vqr=s(lB);llo=r(Vqr,"GLPNModel"),Vqr.forEach(t),ilo=r(dEe," (GLPN model)"),dEe.forEach(t),dlo=i($),Nh=n($,"LI",{});var cEe=s(Nh);Mre=n(cEe,"STRONG",{});var Xqr=s(Mre);clo=r(Xqr,"gpt2"),Xqr.forEach(t),flo=r(cEe," \u2014 "),iB=n(cEe,"A",{href:!0});var zqr=s(iB);mlo=r(zqr,"GPT2Model"),zqr.forEach(t),glo=r(cEe," (OpenAI GPT-2 model)"),cEe.forEach(t),hlo=i($),jh=n($,"LI",{});var fEe=s(jh);Ere=n(fEe,"STRONG",{});var Qqr=s(Ere);ulo=r(Qqr,"gpt_neo"),Qqr.forEach(t),plo=r(fEe," \u2014 "),dB=n(fEe,"A",{href:!0});var Wqr=s(dB);_lo=r(Wqr,"GPTNeoModel"),Wqr.forEach(t),vlo=r(fEe," (GPT Neo model)"),fEe.forEach(t),blo=i($),Dh=n($,"LI",{});var mEe=s(Dh);Cre=n(mEe,"STRONG",{});var Hqr=s(Cre);Flo=r(Hqr,"gptj"),Hqr.forEach(t),Tlo=r(mEe," \u2014 "),cB=n(mEe,"A",{href:!0});var Uqr=s(cB);Mlo=r(Uqr,"GPTJModel"),Uqr.forEach(t),Elo=r(mEe," (GPT-J model)"),mEe.forEach(t),Clo=i($),Gh=n($,"LI",{});var gEe=s(Gh);wre=n(gEe,"STRONG",{});var Jqr=s(wre);wlo=r(Jqr,"hubert"),Jqr.forEach(t),Alo=r(gEe," \u2014 "),fB=n(gEe,"A",{href:!0});var Yqr=s(fB);ylo=r(Yqr,"HubertModel"),Yqr.forEach(t),Llo=r(gEe," (Hubert model)"),gEe.forEach(t),xlo=i($),Oh=n($,"LI",{});var hEe=s(Oh);Are=n(hEe,"STRONG",{});var Kqr=s(Are);$lo=r(Kqr,"ibert"),Kqr.forEach(t),klo=r(hEe," \u2014 "),mB=n(hEe,"A",{href:!0});var Zqr=s(mB);Slo=r(Zqr,"IBertModel"),Zqr.forEach(t),Rlo=r(hEe," (I-BERT model)"),hEe.forEach(t),Blo=i($),Vh=n($,"LI",{});var uEe=s(Vh);yre=n(uEe,"STRONG",{});var eNr=s(yre);Plo=r(eNr,"imagegpt"),eNr.forEach(t),Ilo=r(uEe," \u2014 "),gB=n(uEe,"A",{href:!0});var oNr=s(gB);qlo=r(oNr,"ImageGPTModel"),oNr.forEach(t),Nlo=r(uEe," (ImageGPT model)"),uEe.forEach(t),jlo=i($),Xh=n($,"LI",{});var pEe=s(Xh);Lre=n(pEe,"STRONG",{});var rNr=s(Lre);Dlo=r(rNr,"layoutlm"),rNr.forEach(t),Glo=r(pEe," \u2014 "),hB=n(pEe,"A",{href:!0});var tNr=s(hB);Olo=r(tNr,"LayoutLMModel"),tNr.forEach(t),Vlo=r(pEe," (LayoutLM model)"),pEe.forEach(t),Xlo=i($),zh=n($,"LI",{});var _Ee=s(zh);xre=n(_Ee,"STRONG",{});var aNr=s(xre);zlo=r(aNr,"layoutlmv2"),aNr.forEach(t),Qlo=r(_Ee," \u2014 "),uB=n(_Ee,"A",{href:!0});var nNr=s(uB);Wlo=r(nNr,"LayoutLMv2Model"),nNr.forEach(t),Hlo=r(_Ee," (LayoutLMv2 model)"),_Ee.forEach(t),Ulo=i($),Qh=n($,"LI",{});var vEe=s(Qh);$re=n(vEe,"STRONG",{});var sNr=s($re);Jlo=r(sNr,"led"),sNr.forEach(t),Ylo=r(vEe," \u2014 "),pB=n(vEe,"A",{href:!0});var lNr=s(pB);Klo=r(lNr,"LEDModel"),lNr.forEach(t),Zlo=r(vEe," (LED model)"),vEe.forEach(t),eio=i($),Wh=n($,"LI",{});var bEe=s(Wh);kre=n(bEe,"STRONG",{});var iNr=s(kre);oio=r(iNr,"longformer"),iNr.forEach(t),rio=r(bEe," \u2014 "),_B=n(bEe,"A",{href:!0});var dNr=s(_B);tio=r(dNr,"LongformerModel"),dNr.forEach(t),aio=r(bEe," (Longformer model)"),bEe.forEach(t),nio=i($),Hh=n($,"LI",{});var FEe=s(Hh);Sre=n(FEe,"STRONG",{});var cNr=s(Sre);sio=r(cNr,"luke"),cNr.forEach(t),lio=r(FEe," \u2014 "),vB=n(FEe,"A",{href:!0});var fNr=s(vB);iio=r(fNr,"LukeModel"),fNr.forEach(t),dio=r(FEe," (LUKE model)"),FEe.forEach(t),cio=i($),Uh=n($,"LI",{});var TEe=s(Uh);Rre=n(TEe,"STRONG",{});var mNr=s(Rre);fio=r(mNr,"lxmert"),mNr.forEach(t),mio=r(TEe," \u2014 "),bB=n(TEe,"A",{href:!0});var gNr=s(bB);gio=r(gNr,"LxmertModel"),gNr.forEach(t),hio=r(TEe," (LXMERT model)"),TEe.forEach(t),uio=i($),Jh=n($,"LI",{});var MEe=s(Jh);Bre=n(MEe,"STRONG",{});var hNr=s(Bre);pio=r(hNr,"m2m_100"),hNr.forEach(t),_io=r(MEe," \u2014 "),FB=n(MEe,"A",{href:!0});var uNr=s(FB);vio=r(uNr,"M2M100Model"),uNr.forEach(t),bio=r(MEe," (M2M100 model)"),MEe.forEach(t),Fio=i($),Yh=n($,"LI",{});var EEe=s(Yh);Pre=n(EEe,"STRONG",{});var pNr=s(Pre);Tio=r(pNr,"marian"),pNr.forEach(t),Mio=r(EEe," \u2014 "),TB=n(EEe,"A",{href:!0});var _Nr=s(TB);Eio=r(_Nr,"MarianModel"),_Nr.forEach(t),Cio=r(EEe," (Marian model)"),EEe.forEach(t),wio=i($),Kh=n($,"LI",{});var CEe=s(Kh);Ire=n(CEe,"STRONG",{});var vNr=s(Ire);Aio=r(vNr,"maskformer"),vNr.forEach(t),yio=r(CEe," \u2014 "),MB=n(CEe,"A",{href:!0});var bNr=s(MB);Lio=r(bNr,"MaskFormerModel"),bNr.forEach(t),xio=r(CEe," (MaskFormer model)"),CEe.forEach(t),$io=i($),Zh=n($,"LI",{});var wEe=s(Zh);qre=n(wEe,"STRONG",{});var FNr=s(qre);kio=r(FNr,"mbart"),FNr.forEach(t),Sio=r(wEe," \u2014 "),EB=n(wEe,"A",{href:!0});var TNr=s(EB);Rio=r(TNr,"MBartModel"),TNr.forEach(t),Bio=r(wEe," (mBART model)"),wEe.forEach(t),Pio=i($),eu=n($,"LI",{});var AEe=s(eu);Nre=n(AEe,"STRONG",{});var MNr=s(Nre);Iio=r(MNr,"megatron-bert"),MNr.forEach(t),qio=r(AEe," \u2014 "),CB=n(AEe,"A",{href:!0});var ENr=s(CB);Nio=r(ENr,"MegatronBertModel"),ENr.forEach(t),jio=r(AEe," (MegatronBert model)"),AEe.forEach(t),Dio=i($),ou=n($,"LI",{});var yEe=s(ou);jre=n(yEe,"STRONG",{});var CNr=s(jre);Gio=r(CNr,"mobilebert"),CNr.forEach(t),Oio=r(yEe," \u2014 "),wB=n(yEe,"A",{href:!0});var wNr=s(wB);Vio=r(wNr,"MobileBertModel"),wNr.forEach(t),Xio=r(yEe," (MobileBERT model)"),yEe.forEach(t),zio=i($),ru=n($,"LI",{});var LEe=s(ru);Dre=n(LEe,"STRONG",{});var ANr=s(Dre);Qio=r(ANr,"mpnet"),ANr.forEach(t),Wio=r(LEe," \u2014 "),AB=n(LEe,"A",{href:!0});var yNr=s(AB);Hio=r(yNr,"MPNetModel"),yNr.forEach(t),Uio=r(LEe," (MPNet model)"),LEe.forEach(t),Jio=i($),tu=n($,"LI",{});var xEe=s(tu);Gre=n(xEe,"STRONG",{});var LNr=s(Gre);Yio=r(LNr,"mt5"),LNr.forEach(t),Kio=r(xEe," \u2014 "),yB=n(xEe,"A",{href:!0});var xNr=s(yB);Zio=r(xNr,"MT5Model"),xNr.forEach(t),edo=r(xEe," (mT5 model)"),xEe.forEach(t),odo=i($),au=n($,"LI",{});var $Ee=s(au);Ore=n($Ee,"STRONG",{});var $Nr=s(Ore);rdo=r($Nr,"nystromformer"),$Nr.forEach(t),tdo=r($Ee," \u2014 "),LB=n($Ee,"A",{href:!0});var kNr=s(LB);ado=r(kNr,"NystromformerModel"),kNr.forEach(t),ndo=r($Ee," (Nystromformer model)"),$Ee.forEach(t),sdo=i($),nu=n($,"LI",{});var kEe=s(nu);Vre=n(kEe,"STRONG",{});var SNr=s(Vre);ldo=r(SNr,"openai-gpt"),SNr.forEach(t),ido=r(kEe," \u2014 "),xB=n(kEe,"A",{href:!0});var RNr=s(xB);ddo=r(RNr,"OpenAIGPTModel"),RNr.forEach(t),cdo=r(kEe," (OpenAI GPT model)"),kEe.forEach(t),fdo=i($),su=n($,"LI",{});var SEe=s(su);Xre=n(SEe,"STRONG",{});var BNr=s(Xre);mdo=r(BNr,"pegasus"),BNr.forEach(t),gdo=r(SEe," \u2014 "),$B=n(SEe,"A",{href:!0});var PNr=s($B);hdo=r(PNr,"PegasusModel"),PNr.forEach(t),udo=r(SEe," (Pegasus model)"),SEe.forEach(t),pdo=i($),lu=n($,"LI",{});var REe=s(lu);zre=n(REe,"STRONG",{});var INr=s(zre);_do=r(INr,"perceiver"),INr.forEach(t),vdo=r(REe," \u2014 "),kB=n(REe,"A",{href:!0});var qNr=s(kB);bdo=r(qNr,"PerceiverModel"),qNr.forEach(t),Fdo=r(REe," (Perceiver model)"),REe.forEach(t),Tdo=i($),iu=n($,"LI",{});var BEe=s(iu);Qre=n(BEe,"STRONG",{});var NNr=s(Qre);Mdo=r(NNr,"plbart"),NNr.forEach(t),Edo=r(BEe," \u2014 "),SB=n(BEe,"A",{href:!0});var jNr=s(SB);Cdo=r(jNr,"PLBartModel"),jNr.forEach(t),wdo=r(BEe," (PLBart model)"),BEe.forEach(t),Ado=i($),du=n($,"LI",{});var PEe=s(du);Wre=n(PEe,"STRONG",{});var DNr=s(Wre);ydo=r(DNr,"poolformer"),DNr.forEach(t),Ldo=r(PEe," \u2014 "),RB=n(PEe,"A",{href:!0});var GNr=s(RB);xdo=r(GNr,"PoolFormerModel"),GNr.forEach(t),$do=r(PEe," (PoolFormer model)"),PEe.forEach(t),kdo=i($),cu=n($,"LI",{});var IEe=s(cu);Hre=n(IEe,"STRONG",{});var ONr=s(Hre);Sdo=r(ONr,"prophetnet"),ONr.forEach(t),Rdo=r(IEe," \u2014 "),BB=n(IEe,"A",{href:!0});var VNr=s(BB);Bdo=r(VNr,"ProphetNetModel"),VNr.forEach(t),Pdo=r(IEe," (ProphetNet model)"),IEe.forEach(t),Ido=i($),fu=n($,"LI",{});var qEe=s(fu);Ure=n(qEe,"STRONG",{});var XNr=s(Ure);qdo=r(XNr,"qdqbert"),XNr.forEach(t),Ndo=r(qEe," \u2014 "),PB=n(qEe,"A",{href:!0});var zNr=s(PB);jdo=r(zNr,"QDQBertModel"),zNr.forEach(t),Ddo=r(qEe," (QDQBert model)"),qEe.forEach(t),Gdo=i($),mu=n($,"LI",{});var NEe=s(mu);Jre=n(NEe,"STRONG",{});var QNr=s(Jre);Odo=r(QNr,"reformer"),QNr.forEach(t),Vdo=r(NEe," \u2014 "),IB=n(NEe,"A",{href:!0});var WNr=s(IB);Xdo=r(WNr,"ReformerModel"),WNr.forEach(t),zdo=r(NEe," (Reformer model)"),NEe.forEach(t),Qdo=i($),gu=n($,"LI",{});var jEe=s(gu);Yre=n(jEe,"STRONG",{});var HNr=s(Yre);Wdo=r(HNr,"rembert"),HNr.forEach(t),Hdo=r(jEe," \u2014 "),qB=n(jEe,"A",{href:!0});var UNr=s(qB);Udo=r(UNr,"RemBertModel"),UNr.forEach(t),Jdo=r(jEe," (RemBERT model)"),jEe.forEach(t),Ydo=i($),hu=n($,"LI",{});var DEe=s(hu);Kre=n(DEe,"STRONG",{});var JNr=s(Kre);Kdo=r(JNr,"resnet"),JNr.forEach(t),Zdo=r(DEe," \u2014 "),NB=n(DEe,"A",{href:!0});var YNr=s(NB);eco=r(YNr,"ResNetModel"),YNr.forEach(t),oco=r(DEe," (ResNet model)"),DEe.forEach(t),rco=i($),uu=n($,"LI",{});var GEe=s(uu);Zre=n(GEe,"STRONG",{});var KNr=s(Zre);tco=r(KNr,"retribert"),KNr.forEach(t),aco=r(GEe," \u2014 "),jB=n(GEe,"A",{href:!0});var ZNr=s(jB);nco=r(ZNr,"RetriBertModel"),ZNr.forEach(t),sco=r(GEe," (RetriBERT model)"),GEe.forEach(t),lco=i($),pu=n($,"LI",{});var OEe=s(pu);ete=n(OEe,"STRONG",{});var ejr=s(ete);ico=r(ejr,"roberta"),ejr.forEach(t),dco=r(OEe," \u2014 "),DB=n(OEe,"A",{href:!0});var ojr=s(DB);cco=r(ojr,"RobertaModel"),ojr.forEach(t),fco=r(OEe," (RoBERTa model)"),OEe.forEach(t),mco=i($),_u=n($,"LI",{});var VEe=s(_u);ote=n(VEe,"STRONG",{});var rjr=s(ote);gco=r(rjr,"roformer"),rjr.forEach(t),hco=r(VEe," \u2014 "),GB=n(VEe,"A",{href:!0});var tjr=s(GB);uco=r(tjr,"RoFormerModel"),tjr.forEach(t),pco=r(VEe," (RoFormer model)"),VEe.forEach(t),_co=i($),vu=n($,"LI",{});var XEe=s(vu);rte=n(XEe,"STRONG",{});var ajr=s(rte);vco=r(ajr,"segformer"),ajr.forEach(t),bco=r(XEe," \u2014 "),OB=n(XEe,"A",{href:!0});var njr=s(OB);Fco=r(njr,"SegformerModel"),njr.forEach(t),Tco=r(XEe," (SegFormer model)"),XEe.forEach(t),Mco=i($),bu=n($,"LI",{});var zEe=s(bu);tte=n(zEe,"STRONG",{});var sjr=s(tte);Eco=r(sjr,"sew"),sjr.forEach(t),Cco=r(zEe," \u2014 "),VB=n(zEe,"A",{href:!0});var ljr=s(VB);wco=r(ljr,"SEWModel"),ljr.forEach(t),Aco=r(zEe," (SEW model)"),zEe.forEach(t),yco=i($),Fu=n($,"LI",{});var QEe=s(Fu);ate=n(QEe,"STRONG",{});var ijr=s(ate);Lco=r(ijr,"sew-d"),ijr.forEach(t),xco=r(QEe," \u2014 "),XB=n(QEe,"A",{href:!0});var djr=s(XB);$co=r(djr,"SEWDModel"),djr.forEach(t),kco=r(QEe," (SEW-D model)"),QEe.forEach(t),Sco=i($),Tu=n($,"LI",{});var WEe=s(Tu);nte=n(WEe,"STRONG",{});var cjr=s(nte);Rco=r(cjr,"speech_to_text"),cjr.forEach(t),Bco=r(WEe," \u2014 "),zB=n(WEe,"A",{href:!0});var fjr=s(zB);Pco=r(fjr,"Speech2TextModel"),fjr.forEach(t),Ico=r(WEe," (Speech2Text model)"),WEe.forEach(t),qco=i($),Mu=n($,"LI",{});var HEe=s(Mu);ste=n(HEe,"STRONG",{});var mjr=s(ste);Nco=r(mjr,"splinter"),mjr.forEach(t),jco=r(HEe," \u2014 "),QB=n(HEe,"A",{href:!0});var gjr=s(QB);Dco=r(gjr,"SplinterModel"),gjr.forEach(t),Gco=r(HEe," (Splinter model)"),HEe.forEach(t),Oco=i($),Eu=n($,"LI",{});var UEe=s(Eu);lte=n(UEe,"STRONG",{});var hjr=s(lte);Vco=r(hjr,"squeezebert"),hjr.forEach(t),Xco=r(UEe," \u2014 "),WB=n(UEe,"A",{href:!0});var ujr=s(WB);zco=r(ujr,"SqueezeBertModel"),ujr.forEach(t),Qco=r(UEe," (SqueezeBERT model)"),UEe.forEach(t),Wco=i($),Cu=n($,"LI",{});var JEe=s(Cu);ite=n(JEe,"STRONG",{});var pjr=s(ite);Hco=r(pjr,"swin"),pjr.forEach(t),Uco=r(JEe," \u2014 "),HB=n(JEe,"A",{href:!0});var _jr=s(HB);Jco=r(_jr,"SwinModel"),_jr.forEach(t),Yco=r(JEe," (Swin model)"),JEe.forEach(t),Kco=i($),wu=n($,"LI",{});var YEe=s(wu);dte=n(YEe,"STRONG",{});var vjr=s(dte);Zco=r(vjr,"t5"),vjr.forEach(t),efo=r(YEe," \u2014 "),UB=n(YEe,"A",{href:!0});var bjr=s(UB);ofo=r(bjr,"T5Model"),bjr.forEach(t),rfo=r(YEe," (T5 model)"),YEe.forEach(t),tfo=i($),Au=n($,"LI",{});var KEe=s(Au);cte=n(KEe,"STRONG",{});var Fjr=s(cte);afo=r(Fjr,"tapas"),Fjr.forEach(t),nfo=r(KEe," \u2014 "),JB=n(KEe,"A",{href:!0});var Tjr=s(JB);sfo=r(Tjr,"TapasModel"),Tjr.forEach(t),lfo=r(KEe," (TAPAS model)"),KEe.forEach(t),ifo=i($),yu=n($,"LI",{});var ZEe=s(yu);fte=n(ZEe,"STRONG",{});var Mjr=s(fte);dfo=r(Mjr,"transfo-xl"),Mjr.forEach(t),cfo=r(ZEe," \u2014 "),YB=n(ZEe,"A",{href:!0});var Ejr=s(YB);ffo=r(Ejr,"TransfoXLModel"),Ejr.forEach(t),mfo=r(ZEe," (Transformer-XL model)"),ZEe.forEach(t),gfo=i($),Lu=n($,"LI",{});var e5e=s(Lu);mte=n(e5e,"STRONG",{});var Cjr=s(mte);hfo=r(Cjr,"unispeech"),Cjr.forEach(t),ufo=r(e5e," \u2014 "),KB=n(e5e,"A",{href:!0});var wjr=s(KB);pfo=r(wjr,"UniSpeechModel"),wjr.forEach(t),_fo=r(e5e," (UniSpeech model)"),e5e.forEach(t),vfo=i($),xu=n($,"LI",{});var o5e=s(xu);gte=n(o5e,"STRONG",{});var Ajr=s(gte);bfo=r(Ajr,"unispeech-sat"),Ajr.forEach(t),Ffo=r(o5e," \u2014 "),ZB=n(o5e,"A",{href:!0});var yjr=s(ZB);Tfo=r(yjr,"UniSpeechSatModel"),yjr.forEach(t),Mfo=r(o5e," (UniSpeechSat model)"),o5e.forEach(t),Efo=i($),$u=n($,"LI",{});var r5e=s($u);hte=n(r5e,"STRONG",{});var Ljr=s(hte);Cfo=r(Ljr,"van"),Ljr.forEach(t),wfo=r(r5e," \u2014 "),eP=n(r5e,"A",{href:!0});var xjr=s(eP);Afo=r(xjr,"VanModel"),xjr.forEach(t),yfo=r(r5e," (VAN model)"),r5e.forEach(t),Lfo=i($),ku=n($,"LI",{});var t5e=s(ku);ute=n(t5e,"STRONG",{});var $jr=s(ute);xfo=r($jr,"vilt"),$jr.forEach(t),$fo=r(t5e," \u2014 "),oP=n(t5e,"A",{href:!0});var kjr=s(oP);kfo=r(kjr,"ViltModel"),kjr.forEach(t),Sfo=r(t5e," (ViLT model)"),t5e.forEach(t),Rfo=i($),Su=n($,"LI",{});var a5e=s(Su);pte=n(a5e,"STRONG",{});var Sjr=s(pte);Bfo=r(Sjr,"vision-text-dual-encoder"),Sjr.forEach(t),Pfo=r(a5e," \u2014 "),rP=n(a5e,"A",{href:!0});var Rjr=s(rP);Ifo=r(Rjr,"VisionTextDualEncoderModel"),Rjr.forEach(t),qfo=r(a5e," (VisionTextDualEncoder model)"),a5e.forEach(t),Nfo=i($),Ru=n($,"LI",{});var n5e=s(Ru);_te=n(n5e,"STRONG",{});var Bjr=s(_te);jfo=r(Bjr,"visual_bert"),Bjr.forEach(t),Dfo=r(n5e," \u2014 "),tP=n(n5e,"A",{href:!0});var Pjr=s(tP);Gfo=r(Pjr,"VisualBertModel"),Pjr.forEach(t),Ofo=r(n5e," (VisualBert model)"),n5e.forEach(t),Vfo=i($),Bu=n($,"LI",{});var s5e=s(Bu);vte=n(s5e,"STRONG",{});var Ijr=s(vte);Xfo=r(Ijr,"vit"),Ijr.forEach(t),zfo=r(s5e," \u2014 "),aP=n(s5e,"A",{href:!0});var qjr=s(aP);Qfo=r(qjr,"ViTModel"),qjr.forEach(t),Wfo=r(s5e," (ViT model)"),s5e.forEach(t),Hfo=i($),Pu=n($,"LI",{});var l5e=s(Pu);bte=n(l5e,"STRONG",{});var Njr=s(bte);Ufo=r(Njr,"vit_mae"),Njr.forEach(t),Jfo=r(l5e," \u2014 "),nP=n(l5e,"A",{href:!0});var jjr=s(nP);Yfo=r(jjr,"ViTMAEModel"),jjr.forEach(t),Kfo=r(l5e," (ViTMAE model)"),l5e.forEach(t),Zfo=i($),Iu=n($,"LI",{});var i5e=s(Iu);Fte=n(i5e,"STRONG",{});var Djr=s(Fte);emo=r(Djr,"wav2vec2"),Djr.forEach(t),omo=r(i5e," \u2014 "),sP=n(i5e,"A",{href:!0});var Gjr=s(sP);rmo=r(Gjr,"Wav2Vec2Model"),Gjr.forEach(t),tmo=r(i5e," (Wav2Vec2 model)"),i5e.forEach(t),amo=i($),qu=n($,"LI",{});var d5e=s(qu);Tte=n(d5e,"STRONG",{});var Ojr=s(Tte);nmo=r(Ojr,"wavlm"),Ojr.forEach(t),smo=r(d5e," \u2014 "),lP=n(d5e,"A",{href:!0});var Vjr=s(lP);lmo=r(Vjr,"WavLMModel"),Vjr.forEach(t),imo=r(d5e," (WavLM model)"),d5e.forEach(t),dmo=i($),Nu=n($,"LI",{});var c5e=s(Nu);Mte=n(c5e,"STRONG",{});var Xjr=s(Mte);cmo=r(Xjr,"xglm"),Xjr.forEach(t),fmo=r(c5e," \u2014 "),iP=n(c5e,"A",{href:!0});var zjr=s(iP);mmo=r(zjr,"XGLMModel"),zjr.forEach(t),gmo=r(c5e," (XGLM model)"),c5e.forEach(t),hmo=i($),ju=n($,"LI",{});var f5e=s(ju);Ete=n(f5e,"STRONG",{});var Qjr=s(Ete);umo=r(Qjr,"xlm"),Qjr.forEach(t),pmo=r(f5e," \u2014 "),dP=n(f5e,"A",{href:!0});var Wjr=s(dP);_mo=r(Wjr,"XLMModel"),Wjr.forEach(t),vmo=r(f5e," (XLM model)"),f5e.forEach(t),bmo=i($),Du=n($,"LI",{});var m5e=s(Du);Cte=n(m5e,"STRONG",{});var Hjr=s(Cte);Fmo=r(Hjr,"xlm-prophetnet"),Hjr.forEach(t),Tmo=r(m5e," \u2014 "),cP=n(m5e,"A",{href:!0});var Ujr=s(cP);Mmo=r(Ujr,"XLMProphetNetModel"),Ujr.forEach(t),Emo=r(m5e," (XLMProphetNet model)"),m5e.forEach(t),Cmo=i($),Gu=n($,"LI",{});var g5e=s(Gu);wte=n(g5e,"STRONG",{});var Jjr=s(wte);wmo=r(Jjr,"xlm-roberta"),Jjr.forEach(t),Amo=r(g5e," \u2014 "),fP=n(g5e,"A",{href:!0});var Yjr=s(fP);ymo=r(Yjr,"XLMRobertaModel"),Yjr.forEach(t),Lmo=r(g5e," (XLM-RoBERTa model)"),g5e.forEach(t),xmo=i($),Ou=n($,"LI",{});var h5e=s(Ou);Ate=n(h5e,"STRONG",{});var Kjr=s(Ate);$mo=r(Kjr,"xlm-roberta-xl"),Kjr.forEach(t),kmo=r(h5e," \u2014 "),mP=n(h5e,"A",{href:!0});var Zjr=s(mP);Smo=r(Zjr,"XLMRobertaXLModel"),Zjr.forEach(t),Rmo=r(h5e," (XLM-RoBERTa-XL model)"),h5e.forEach(t),Bmo=i($),Vu=n($,"LI",{});var u5e=s(Vu);yte=n(u5e,"STRONG",{});var eDr=s(yte);Pmo=r(eDr,"xlnet"),eDr.forEach(t),Imo=r(u5e," \u2014 "),gP=n(u5e,"A",{href:!0});var oDr=s(gP);qmo=r(oDr,"XLNetModel"),oDr.forEach(t),Nmo=r(u5e," (XLNet model)"),u5e.forEach(t),jmo=i($),Xu=n($,"LI",{});var p5e=s(Xu);Lte=n(p5e,"STRONG",{});var rDr=s(Lte);Dmo=r(rDr,"yoso"),rDr.forEach(t),Gmo=r(p5e," \u2014 "),hP=n(p5e,"A",{href:!0});var tDr=s(hP);Omo=r(tDr,"YosoModel"),tDr.forEach(t),Vmo=r(p5e," (YOSO model)"),p5e.forEach(t),$.forEach(t),Xmo=i(Ut),zu=n(Ut,"P",{});var _5e=s(zu);zmo=r(_5e,"The model is set in evaluation mode by default using "),xte=n(_5e,"CODE",{});var aDr=s(xte);Qmo=r(aDr,"model.eval()"),aDr.forEach(t),Wmo=r(_5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=n(_5e,"CODE",{});var nDr=s($te);Hmo=r(nDr,"model.train()"),nDr.forEach(t),_5e.forEach(t),Umo=i(Ut),T(Qu.$$.fragment,Ut),Ut.forEach(t),ws.forEach(t),Ake=i(f),di=n(f,"H2",{class:!0});var LRe=s(di);Wu=n(LRe,"A",{id:!0,class:!0,href:!0});var sDr=s(Wu);kte=n(sDr,"SPAN",{});var lDr=s(kte);T(hA.$$.fragment,lDr),lDr.forEach(t),sDr.forEach(t),Jmo=i(LRe),Ste=n(LRe,"SPAN",{});var iDr=s(Ste);Ymo=r(iDr,"AutoModelForPreTraining"),iDr.forEach(t),LRe.forEach(t),yke=i(f),yo=n(f,"DIV",{class:!0});var As=s(yo);T(uA.$$.fragment,As),Kmo=i(As),ci=n(As,"P",{});var LU=s(ci);Zmo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uP=n(LU,"A",{href:!0});var dDr=s(uP);ego=r(dDr,"from_pretrained()"),dDr.forEach(t),ogo=r(LU," class method or the "),pP=n(LU,"A",{href:!0});var cDr=s(pP);rgo=r(cDr,"from_config()"),cDr.forEach(t),tgo=r(LU,` class
method.`),LU.forEach(t),ago=i(As),pA=n(As,"P",{});var xRe=s(pA);ngo=r(xRe,"This class cannot be instantiated directly using "),Rte=n(xRe,"CODE",{});var fDr=s(Rte);sgo=r(fDr,"__init__()"),fDr.forEach(t),lgo=r(xRe," (throws an error)."),xRe.forEach(t),igo=i(As),Zr=n(As,"DIV",{class:!0});var zC=s(Zr);T(_A.$$.fragment,zC),dgo=i(zC),Bte=n(zC,"P",{});var mDr=s(Bte);cgo=r(mDr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mDr.forEach(t),fgo=i(zC),fi=n(zC,"P",{});var xU=s(fi);mgo=r(xU,`Note:
Loading a model from its configuration file does `),Pte=n(xU,"STRONG",{});var gDr=s(Pte);ggo=r(gDr,"not"),gDr.forEach(t),hgo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_P=n(xU,"A",{href:!0});var hDr=s(_P);ugo=r(hDr,"from_pretrained()"),hDr.forEach(t),pgo=r(xU," to load the model weights."),xU.forEach(t),_go=i(zC),T(Hu.$$.fragment,zC),zC.forEach(t),vgo=i(As),Qe=n(As,"DIV",{class:!0});var Jt=s(Qe);T(vA.$$.fragment,Jt),bgo=i(Jt),Ite=n(Jt,"P",{});var uDr=s(Ite);Fgo=r(uDr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uDr.forEach(t),Tgo=i(Jt),Ea=n(Jt,"P",{});var QC=s(Ea);Mgo=r(QC,"The model class to instantiate is selected based on the "),qte=n(QC,"CODE",{});var pDr=s(qte);Ego=r(pDr,"model_type"),pDr.forEach(t),Cgo=r(QC,` property of the config object (either
passed as an argument or loaded from `),Nte=n(QC,"CODE",{});var _Dr=s(Nte);wgo=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),Ago=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jte=n(QC,"CODE",{});var vDr=s(jte);ygo=r(vDr,"pretrained_model_name_or_path"),vDr.forEach(t),Lgo=r(QC,":"),QC.forEach(t),xgo=i(Jt),G=n(Jt,"UL",{});var V=s(G);Uu=n(V,"LI",{});var v5e=s(Uu);Dte=n(v5e,"STRONG",{});var bDr=s(Dte);$go=r(bDr,"albert"),bDr.forEach(t),kgo=r(v5e," \u2014 "),vP=n(v5e,"A",{href:!0});var FDr=s(vP);Sgo=r(FDr,"AlbertForPreTraining"),FDr.forEach(t),Rgo=r(v5e," (ALBERT model)"),v5e.forEach(t),Bgo=i(V),Ju=n(V,"LI",{});var b5e=s(Ju);Gte=n(b5e,"STRONG",{});var TDr=s(Gte);Pgo=r(TDr,"bart"),TDr.forEach(t),Igo=r(b5e," \u2014 "),bP=n(b5e,"A",{href:!0});var MDr=s(bP);qgo=r(MDr,"BartForConditionalGeneration"),MDr.forEach(t),Ngo=r(b5e," (BART model)"),b5e.forEach(t),jgo=i(V),Yu=n(V,"LI",{});var F5e=s(Yu);Ote=n(F5e,"STRONG",{});var EDr=s(Ote);Dgo=r(EDr,"bert"),EDr.forEach(t),Ggo=r(F5e," \u2014 "),FP=n(F5e,"A",{href:!0});var CDr=s(FP);Ogo=r(CDr,"BertForPreTraining"),CDr.forEach(t),Vgo=r(F5e," (BERT model)"),F5e.forEach(t),Xgo=i(V),Ku=n(V,"LI",{});var T5e=s(Ku);Vte=n(T5e,"STRONG",{});var wDr=s(Vte);zgo=r(wDr,"big_bird"),wDr.forEach(t),Qgo=r(T5e," \u2014 "),TP=n(T5e,"A",{href:!0});var ADr=s(TP);Wgo=r(ADr,"BigBirdForPreTraining"),ADr.forEach(t),Hgo=r(T5e," (BigBird model)"),T5e.forEach(t),Ugo=i(V),Zu=n(V,"LI",{});var M5e=s(Zu);Xte=n(M5e,"STRONG",{});var yDr=s(Xte);Jgo=r(yDr,"camembert"),yDr.forEach(t),Ygo=r(M5e," \u2014 "),MP=n(M5e,"A",{href:!0});var LDr=s(MP);Kgo=r(LDr,"CamembertForMaskedLM"),LDr.forEach(t),Zgo=r(M5e," (CamemBERT model)"),M5e.forEach(t),eho=i(V),ep=n(V,"LI",{});var E5e=s(ep);zte=n(E5e,"STRONG",{});var xDr=s(zte);oho=r(xDr,"ctrl"),xDr.forEach(t),rho=r(E5e," \u2014 "),EP=n(E5e,"A",{href:!0});var $Dr=s(EP);tho=r($Dr,"CTRLLMHeadModel"),$Dr.forEach(t),aho=r(E5e," (CTRL model)"),E5e.forEach(t),nho=i(V),op=n(V,"LI",{});var C5e=s(op);Qte=n(C5e,"STRONG",{});var kDr=s(Qte);sho=r(kDr,"data2vec-text"),kDr.forEach(t),lho=r(C5e," \u2014 "),CP=n(C5e,"A",{href:!0});var SDr=s(CP);iho=r(SDr,"Data2VecTextForMaskedLM"),SDr.forEach(t),dho=r(C5e," (Data2VecText model)"),C5e.forEach(t),cho=i(V),rp=n(V,"LI",{});var w5e=s(rp);Wte=n(w5e,"STRONG",{});var RDr=s(Wte);fho=r(RDr,"deberta"),RDr.forEach(t),mho=r(w5e," \u2014 "),wP=n(w5e,"A",{href:!0});var BDr=s(wP);gho=r(BDr,"DebertaForMaskedLM"),BDr.forEach(t),hho=r(w5e," (DeBERTa model)"),w5e.forEach(t),uho=i(V),tp=n(V,"LI",{});var A5e=s(tp);Hte=n(A5e,"STRONG",{});var PDr=s(Hte);pho=r(PDr,"deberta-v2"),PDr.forEach(t),_ho=r(A5e," \u2014 "),AP=n(A5e,"A",{href:!0});var IDr=s(AP);vho=r(IDr,"DebertaV2ForMaskedLM"),IDr.forEach(t),bho=r(A5e," (DeBERTa-v2 model)"),A5e.forEach(t),Fho=i(V),ap=n(V,"LI",{});var y5e=s(ap);Ute=n(y5e,"STRONG",{});var qDr=s(Ute);Tho=r(qDr,"distilbert"),qDr.forEach(t),Mho=r(y5e," \u2014 "),yP=n(y5e,"A",{href:!0});var NDr=s(yP);Eho=r(NDr,"DistilBertForMaskedLM"),NDr.forEach(t),Cho=r(y5e," (DistilBERT model)"),y5e.forEach(t),who=i(V),np=n(V,"LI",{});var L5e=s(np);Jte=n(L5e,"STRONG",{});var jDr=s(Jte);Aho=r(jDr,"electra"),jDr.forEach(t),yho=r(L5e," \u2014 "),LP=n(L5e,"A",{href:!0});var DDr=s(LP);Lho=r(DDr,"ElectraForPreTraining"),DDr.forEach(t),xho=r(L5e," (ELECTRA model)"),L5e.forEach(t),$ho=i(V),sp=n(V,"LI",{});var x5e=s(sp);Yte=n(x5e,"STRONG",{});var GDr=s(Yte);kho=r(GDr,"flaubert"),GDr.forEach(t),Sho=r(x5e," \u2014 "),xP=n(x5e,"A",{href:!0});var ODr=s(xP);Rho=r(ODr,"FlaubertWithLMHeadModel"),ODr.forEach(t),Bho=r(x5e," (FlauBERT model)"),x5e.forEach(t),Pho=i(V),lp=n(V,"LI",{});var $5e=s(lp);Kte=n($5e,"STRONG",{});var VDr=s(Kte);Iho=r(VDr,"fnet"),VDr.forEach(t),qho=r($5e," \u2014 "),$P=n($5e,"A",{href:!0});var XDr=s($P);Nho=r(XDr,"FNetForPreTraining"),XDr.forEach(t),jho=r($5e," (FNet model)"),$5e.forEach(t),Dho=i(V),ip=n(V,"LI",{});var k5e=s(ip);Zte=n(k5e,"STRONG",{});var zDr=s(Zte);Gho=r(zDr,"fsmt"),zDr.forEach(t),Oho=r(k5e," \u2014 "),kP=n(k5e,"A",{href:!0});var QDr=s(kP);Vho=r(QDr,"FSMTForConditionalGeneration"),QDr.forEach(t),Xho=r(k5e," (FairSeq Machine-Translation model)"),k5e.forEach(t),zho=i(V),dp=n(V,"LI",{});var S5e=s(dp);eae=n(S5e,"STRONG",{});var WDr=s(eae);Qho=r(WDr,"funnel"),WDr.forEach(t),Who=r(S5e," \u2014 "),SP=n(S5e,"A",{href:!0});var HDr=s(SP);Hho=r(HDr,"FunnelForPreTraining"),HDr.forEach(t),Uho=r(S5e," (Funnel Transformer model)"),S5e.forEach(t),Jho=i(V),cp=n(V,"LI",{});var R5e=s(cp);oae=n(R5e,"STRONG",{});var UDr=s(oae);Yho=r(UDr,"gpt2"),UDr.forEach(t),Kho=r(R5e," \u2014 "),RP=n(R5e,"A",{href:!0});var JDr=s(RP);Zho=r(JDr,"GPT2LMHeadModel"),JDr.forEach(t),euo=r(R5e," (OpenAI GPT-2 model)"),R5e.forEach(t),ouo=i(V),fp=n(V,"LI",{});var B5e=s(fp);rae=n(B5e,"STRONG",{});var YDr=s(rae);ruo=r(YDr,"ibert"),YDr.forEach(t),tuo=r(B5e," \u2014 "),BP=n(B5e,"A",{href:!0});var KDr=s(BP);auo=r(KDr,"IBertForMaskedLM"),KDr.forEach(t),nuo=r(B5e," (I-BERT model)"),B5e.forEach(t),suo=i(V),mp=n(V,"LI",{});var P5e=s(mp);tae=n(P5e,"STRONG",{});var ZDr=s(tae);luo=r(ZDr,"layoutlm"),ZDr.forEach(t),iuo=r(P5e," \u2014 "),PP=n(P5e,"A",{href:!0});var eGr=s(PP);duo=r(eGr,"LayoutLMForMaskedLM"),eGr.forEach(t),cuo=r(P5e," (LayoutLM model)"),P5e.forEach(t),fuo=i(V),gp=n(V,"LI",{});var I5e=s(gp);aae=n(I5e,"STRONG",{});var oGr=s(aae);muo=r(oGr,"longformer"),oGr.forEach(t),guo=r(I5e," \u2014 "),IP=n(I5e,"A",{href:!0});var rGr=s(IP);huo=r(rGr,"LongformerForMaskedLM"),rGr.forEach(t),uuo=r(I5e," (Longformer model)"),I5e.forEach(t),puo=i(V),hp=n(V,"LI",{});var q5e=s(hp);nae=n(q5e,"STRONG",{});var tGr=s(nae);_uo=r(tGr,"lxmert"),tGr.forEach(t),vuo=r(q5e," \u2014 "),qP=n(q5e,"A",{href:!0});var aGr=s(qP);buo=r(aGr,"LxmertForPreTraining"),aGr.forEach(t),Fuo=r(q5e," (LXMERT model)"),q5e.forEach(t),Tuo=i(V),up=n(V,"LI",{});var N5e=s(up);sae=n(N5e,"STRONG",{});var nGr=s(sae);Muo=r(nGr,"megatron-bert"),nGr.forEach(t),Euo=r(N5e," \u2014 "),NP=n(N5e,"A",{href:!0});var sGr=s(NP);Cuo=r(sGr,"MegatronBertForPreTraining"),sGr.forEach(t),wuo=r(N5e," (MegatronBert model)"),N5e.forEach(t),Auo=i(V),pp=n(V,"LI",{});var j5e=s(pp);lae=n(j5e,"STRONG",{});var lGr=s(lae);yuo=r(lGr,"mobilebert"),lGr.forEach(t),Luo=r(j5e," \u2014 "),jP=n(j5e,"A",{href:!0});var iGr=s(jP);xuo=r(iGr,"MobileBertForPreTraining"),iGr.forEach(t),$uo=r(j5e," (MobileBERT model)"),j5e.forEach(t),kuo=i(V),_p=n(V,"LI",{});var D5e=s(_p);iae=n(D5e,"STRONG",{});var dGr=s(iae);Suo=r(dGr,"mpnet"),dGr.forEach(t),Ruo=r(D5e," \u2014 "),DP=n(D5e,"A",{href:!0});var cGr=s(DP);Buo=r(cGr,"MPNetForMaskedLM"),cGr.forEach(t),Puo=r(D5e," (MPNet model)"),D5e.forEach(t),Iuo=i(V),vp=n(V,"LI",{});var G5e=s(vp);dae=n(G5e,"STRONG",{});var fGr=s(dae);quo=r(fGr,"openai-gpt"),fGr.forEach(t),Nuo=r(G5e," \u2014 "),GP=n(G5e,"A",{href:!0});var mGr=s(GP);juo=r(mGr,"OpenAIGPTLMHeadModel"),mGr.forEach(t),Duo=r(G5e," (OpenAI GPT model)"),G5e.forEach(t),Guo=i(V),bp=n(V,"LI",{});var O5e=s(bp);cae=n(O5e,"STRONG",{});var gGr=s(cae);Ouo=r(gGr,"retribert"),gGr.forEach(t),Vuo=r(O5e," \u2014 "),OP=n(O5e,"A",{href:!0});var hGr=s(OP);Xuo=r(hGr,"RetriBertModel"),hGr.forEach(t),zuo=r(O5e," (RetriBERT model)"),O5e.forEach(t),Quo=i(V),Fp=n(V,"LI",{});var V5e=s(Fp);fae=n(V5e,"STRONG",{});var uGr=s(fae);Wuo=r(uGr,"roberta"),uGr.forEach(t),Huo=r(V5e," \u2014 "),VP=n(V5e,"A",{href:!0});var pGr=s(VP);Uuo=r(pGr,"RobertaForMaskedLM"),pGr.forEach(t),Juo=r(V5e," (RoBERTa model)"),V5e.forEach(t),Yuo=i(V),Tp=n(V,"LI",{});var X5e=s(Tp);mae=n(X5e,"STRONG",{});var _Gr=s(mae);Kuo=r(_Gr,"squeezebert"),_Gr.forEach(t),Zuo=r(X5e," \u2014 "),XP=n(X5e,"A",{href:!0});var vGr=s(XP);epo=r(vGr,"SqueezeBertForMaskedLM"),vGr.forEach(t),opo=r(X5e," (SqueezeBERT model)"),X5e.forEach(t),rpo=i(V),Mp=n(V,"LI",{});var z5e=s(Mp);gae=n(z5e,"STRONG",{});var bGr=s(gae);tpo=r(bGr,"t5"),bGr.forEach(t),apo=r(z5e," \u2014 "),zP=n(z5e,"A",{href:!0});var FGr=s(zP);npo=r(FGr,"T5ForConditionalGeneration"),FGr.forEach(t),spo=r(z5e," (T5 model)"),z5e.forEach(t),lpo=i(V),Ep=n(V,"LI",{});var Q5e=s(Ep);hae=n(Q5e,"STRONG",{});var TGr=s(hae);ipo=r(TGr,"tapas"),TGr.forEach(t),dpo=r(Q5e," \u2014 "),QP=n(Q5e,"A",{href:!0});var MGr=s(QP);cpo=r(MGr,"TapasForMaskedLM"),MGr.forEach(t),fpo=r(Q5e," (TAPAS model)"),Q5e.forEach(t),mpo=i(V),Cp=n(V,"LI",{});var W5e=s(Cp);uae=n(W5e,"STRONG",{});var EGr=s(uae);gpo=r(EGr,"transfo-xl"),EGr.forEach(t),hpo=r(W5e," \u2014 "),WP=n(W5e,"A",{href:!0});var CGr=s(WP);upo=r(CGr,"TransfoXLLMHeadModel"),CGr.forEach(t),ppo=r(W5e," (Transformer-XL model)"),W5e.forEach(t),_po=i(V),wp=n(V,"LI",{});var H5e=s(wp);pae=n(H5e,"STRONG",{});var wGr=s(pae);vpo=r(wGr,"unispeech"),wGr.forEach(t),bpo=r(H5e," \u2014 "),HP=n(H5e,"A",{href:!0});var AGr=s(HP);Fpo=r(AGr,"UniSpeechForPreTraining"),AGr.forEach(t),Tpo=r(H5e," (UniSpeech model)"),H5e.forEach(t),Mpo=i(V),Ap=n(V,"LI",{});var U5e=s(Ap);_ae=n(U5e,"STRONG",{});var yGr=s(_ae);Epo=r(yGr,"unispeech-sat"),yGr.forEach(t),Cpo=r(U5e," \u2014 "),UP=n(U5e,"A",{href:!0});var LGr=s(UP);wpo=r(LGr,"UniSpeechSatForPreTraining"),LGr.forEach(t),Apo=r(U5e," (UniSpeechSat model)"),U5e.forEach(t),ypo=i(V),yp=n(V,"LI",{});var J5e=s(yp);vae=n(J5e,"STRONG",{});var xGr=s(vae);Lpo=r(xGr,"visual_bert"),xGr.forEach(t),xpo=r(J5e," \u2014 "),JP=n(J5e,"A",{href:!0});var $Gr=s(JP);$po=r($Gr,"VisualBertForPreTraining"),$Gr.forEach(t),kpo=r(J5e," (VisualBert model)"),J5e.forEach(t),Spo=i(V),Lp=n(V,"LI",{});var Y5e=s(Lp);bae=n(Y5e,"STRONG",{});var kGr=s(bae);Rpo=r(kGr,"vit_mae"),kGr.forEach(t),Bpo=r(Y5e," \u2014 "),YP=n(Y5e,"A",{href:!0});var SGr=s(YP);Ppo=r(SGr,"ViTMAEForPreTraining"),SGr.forEach(t),Ipo=r(Y5e," (ViTMAE model)"),Y5e.forEach(t),qpo=i(V),xp=n(V,"LI",{});var K5e=s(xp);Fae=n(K5e,"STRONG",{});var RGr=s(Fae);Npo=r(RGr,"wav2vec2"),RGr.forEach(t),jpo=r(K5e," \u2014 "),KP=n(K5e,"A",{href:!0});var BGr=s(KP);Dpo=r(BGr,"Wav2Vec2ForPreTraining"),BGr.forEach(t),Gpo=r(K5e," (Wav2Vec2 model)"),K5e.forEach(t),Opo=i(V),$p=n(V,"LI",{});var Z5e=s($p);Tae=n(Z5e,"STRONG",{});var PGr=s(Tae);Vpo=r(PGr,"xlm"),PGr.forEach(t),Xpo=r(Z5e," \u2014 "),ZP=n(Z5e,"A",{href:!0});var IGr=s(ZP);zpo=r(IGr,"XLMWithLMHeadModel"),IGr.forEach(t),Qpo=r(Z5e," (XLM model)"),Z5e.forEach(t),Wpo=i(V),kp=n(V,"LI",{});var eCe=s(kp);Mae=n(eCe,"STRONG",{});var qGr=s(Mae);Hpo=r(qGr,"xlm-roberta"),qGr.forEach(t),Upo=r(eCe," \u2014 "),eI=n(eCe,"A",{href:!0});var NGr=s(eI);Jpo=r(NGr,"XLMRobertaForMaskedLM"),NGr.forEach(t),Ypo=r(eCe," (XLM-RoBERTa model)"),eCe.forEach(t),Kpo=i(V),Sp=n(V,"LI",{});var oCe=s(Sp);Eae=n(oCe,"STRONG",{});var jGr=s(Eae);Zpo=r(jGr,"xlm-roberta-xl"),jGr.forEach(t),e_o=r(oCe," \u2014 "),oI=n(oCe,"A",{href:!0});var DGr=s(oI);o_o=r(DGr,"XLMRobertaXLForMaskedLM"),DGr.forEach(t),r_o=r(oCe," (XLM-RoBERTa-XL model)"),oCe.forEach(t),t_o=i(V),Rp=n(V,"LI",{});var rCe=s(Rp);Cae=n(rCe,"STRONG",{});var GGr=s(Cae);a_o=r(GGr,"xlnet"),GGr.forEach(t),n_o=r(rCe," \u2014 "),rI=n(rCe,"A",{href:!0});var OGr=s(rI);s_o=r(OGr,"XLNetLMHeadModel"),OGr.forEach(t),l_o=r(rCe," (XLNet model)"),rCe.forEach(t),V.forEach(t),i_o=i(Jt),Bp=n(Jt,"P",{});var tCe=s(Bp);d_o=r(tCe,"The model is set in evaluation mode by default using "),wae=n(tCe,"CODE",{});var VGr=s(wae);c_o=r(VGr,"model.eval()"),VGr.forEach(t),f_o=r(tCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aae=n(tCe,"CODE",{});var XGr=s(Aae);m_o=r(XGr,"model.train()"),XGr.forEach(t),tCe.forEach(t),g_o=i(Jt),T(Pp.$$.fragment,Jt),Jt.forEach(t),As.forEach(t),Lke=i(f),mi=n(f,"H2",{class:!0});var $Re=s(mi);Ip=n($Re,"A",{id:!0,class:!0,href:!0});var zGr=s(Ip);yae=n(zGr,"SPAN",{});var QGr=s(yae);T(bA.$$.fragment,QGr),QGr.forEach(t),zGr.forEach(t),h_o=i($Re),Lae=n($Re,"SPAN",{});var WGr=s(Lae);u_o=r(WGr,"AutoModelForCausalLM"),WGr.forEach(t),$Re.forEach(t),xke=i(f),Lo=n(f,"DIV",{class:!0});var ys=s(Lo);T(FA.$$.fragment,ys),p_o=i(ys),gi=n(ys,"P",{});var $U=s(gi);__o=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tI=n($U,"A",{href:!0});var HGr=s(tI);v_o=r(HGr,"from_pretrained()"),HGr.forEach(t),b_o=r($U," class method or the "),aI=n($U,"A",{href:!0});var UGr=s(aI);F_o=r(UGr,"from_config()"),UGr.forEach(t),T_o=r($U,` class
method.`),$U.forEach(t),M_o=i(ys),TA=n(ys,"P",{});var kRe=s(TA);E_o=r(kRe,"This class cannot be instantiated directly using "),xae=n(kRe,"CODE",{});var JGr=s(xae);C_o=r(JGr,"__init__()"),JGr.forEach(t),w_o=r(kRe," (throws an error)."),kRe.forEach(t),A_o=i(ys),et=n(ys,"DIV",{class:!0});var WC=s(et);T(MA.$$.fragment,WC),y_o=i(WC),$ae=n(WC,"P",{});var YGr=s($ae);L_o=r(YGr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YGr.forEach(t),x_o=i(WC),hi=n(WC,"P",{});var kU=s(hi);$_o=r(kU,`Note:
Loading a model from its configuration file does `),kae=n(kU,"STRONG",{});var KGr=s(kae);k_o=r(KGr,"not"),KGr.forEach(t),S_o=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nI=n(kU,"A",{href:!0});var ZGr=s(nI);R_o=r(ZGr,"from_pretrained()"),ZGr.forEach(t),B_o=r(kU," to load the model weights."),kU.forEach(t),P_o=i(WC),T(qp.$$.fragment,WC),WC.forEach(t),I_o=i(ys),We=n(ys,"DIV",{class:!0});var Yt=s(We);T(EA.$$.fragment,Yt),q_o=i(Yt),Sae=n(Yt,"P",{});var eOr=s(Sae);N_o=r(eOr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eOr.forEach(t),j_o=i(Yt),Ca=n(Yt,"P",{});var HC=s(Ca);D_o=r(HC,"The model class to instantiate is selected based on the "),Rae=n(HC,"CODE",{});var oOr=s(Rae);G_o=r(oOr,"model_type"),oOr.forEach(t),O_o=r(HC,` property of the config object (either
passed as an argument or loaded from `),Bae=n(HC,"CODE",{});var rOr=s(Bae);V_o=r(rOr,"pretrained_model_name_or_path"),rOr.forEach(t),X_o=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pae=n(HC,"CODE",{});var tOr=s(Pae);z_o=r(tOr,"pretrained_model_name_or_path"),tOr.forEach(t),Q_o=r(HC,":"),HC.forEach(t),W_o=i(Yt),z=n(Yt,"UL",{});var W=s(z);Np=n(W,"LI",{});var aCe=s(Np);Iae=n(aCe,"STRONG",{});var aOr=s(Iae);H_o=r(aOr,"bart"),aOr.forEach(t),U_o=r(aCe," \u2014 "),sI=n(aCe,"A",{href:!0});var nOr=s(sI);J_o=r(nOr,"BartForCausalLM"),nOr.forEach(t),Y_o=r(aCe," (BART model)"),aCe.forEach(t),K_o=i(W),jp=n(W,"LI",{});var nCe=s(jp);qae=n(nCe,"STRONG",{});var sOr=s(qae);Z_o=r(sOr,"bert"),sOr.forEach(t),evo=r(nCe," \u2014 "),lI=n(nCe,"A",{href:!0});var lOr=s(lI);ovo=r(lOr,"BertLMHeadModel"),lOr.forEach(t),rvo=r(nCe," (BERT model)"),nCe.forEach(t),tvo=i(W),Dp=n(W,"LI",{});var sCe=s(Dp);Nae=n(sCe,"STRONG",{});var iOr=s(Nae);avo=r(iOr,"bert-generation"),iOr.forEach(t),nvo=r(sCe," \u2014 "),iI=n(sCe,"A",{href:!0});var dOr=s(iI);svo=r(dOr,"BertGenerationDecoder"),dOr.forEach(t),lvo=r(sCe," (Bert Generation model)"),sCe.forEach(t),ivo=i(W),Gp=n(W,"LI",{});var lCe=s(Gp);jae=n(lCe,"STRONG",{});var cOr=s(jae);dvo=r(cOr,"big_bird"),cOr.forEach(t),cvo=r(lCe," \u2014 "),dI=n(lCe,"A",{href:!0});var fOr=s(dI);fvo=r(fOr,"BigBirdForCausalLM"),fOr.forEach(t),mvo=r(lCe," (BigBird model)"),lCe.forEach(t),gvo=i(W),Op=n(W,"LI",{});var iCe=s(Op);Dae=n(iCe,"STRONG",{});var mOr=s(Dae);hvo=r(mOr,"bigbird_pegasus"),mOr.forEach(t),uvo=r(iCe," \u2014 "),cI=n(iCe,"A",{href:!0});var gOr=s(cI);pvo=r(gOr,"BigBirdPegasusForCausalLM"),gOr.forEach(t),_vo=r(iCe," (BigBirdPegasus model)"),iCe.forEach(t),vvo=i(W),Vp=n(W,"LI",{});var dCe=s(Vp);Gae=n(dCe,"STRONG",{});var hOr=s(Gae);bvo=r(hOr,"blenderbot"),hOr.forEach(t),Fvo=r(dCe," \u2014 "),fI=n(dCe,"A",{href:!0});var uOr=s(fI);Tvo=r(uOr,"BlenderbotForCausalLM"),uOr.forEach(t),Mvo=r(dCe," (Blenderbot model)"),dCe.forEach(t),Evo=i(W),Xp=n(W,"LI",{});var cCe=s(Xp);Oae=n(cCe,"STRONG",{});var pOr=s(Oae);Cvo=r(pOr,"blenderbot-small"),pOr.forEach(t),wvo=r(cCe," \u2014 "),mI=n(cCe,"A",{href:!0});var _Or=s(mI);Avo=r(_Or,"BlenderbotSmallForCausalLM"),_Or.forEach(t),yvo=r(cCe," (BlenderbotSmall model)"),cCe.forEach(t),Lvo=i(W),zp=n(W,"LI",{});var fCe=s(zp);Vae=n(fCe,"STRONG",{});var vOr=s(Vae);xvo=r(vOr,"camembert"),vOr.forEach(t),$vo=r(fCe," \u2014 "),gI=n(fCe,"A",{href:!0});var bOr=s(gI);kvo=r(bOr,"CamembertForCausalLM"),bOr.forEach(t),Svo=r(fCe," (CamemBERT model)"),fCe.forEach(t),Rvo=i(W),Qp=n(W,"LI",{});var mCe=s(Qp);Xae=n(mCe,"STRONG",{});var FOr=s(Xae);Bvo=r(FOr,"ctrl"),FOr.forEach(t),Pvo=r(mCe," \u2014 "),hI=n(mCe,"A",{href:!0});var TOr=s(hI);Ivo=r(TOr,"CTRLLMHeadModel"),TOr.forEach(t),qvo=r(mCe," (CTRL model)"),mCe.forEach(t),Nvo=i(W),Wp=n(W,"LI",{});var gCe=s(Wp);zae=n(gCe,"STRONG",{});var MOr=s(zae);jvo=r(MOr,"data2vec-text"),MOr.forEach(t),Dvo=r(gCe," \u2014 "),uI=n(gCe,"A",{href:!0});var EOr=s(uI);Gvo=r(EOr,"Data2VecTextForCausalLM"),EOr.forEach(t),Ovo=r(gCe," (Data2VecText model)"),gCe.forEach(t),Vvo=i(W),Hp=n(W,"LI",{});var hCe=s(Hp);Qae=n(hCe,"STRONG",{});var COr=s(Qae);Xvo=r(COr,"electra"),COr.forEach(t),zvo=r(hCe," \u2014 "),pI=n(hCe,"A",{href:!0});var wOr=s(pI);Qvo=r(wOr,"ElectraForCausalLM"),wOr.forEach(t),Wvo=r(hCe," (ELECTRA model)"),hCe.forEach(t),Hvo=i(W),Up=n(W,"LI",{});var uCe=s(Up);Wae=n(uCe,"STRONG",{});var AOr=s(Wae);Uvo=r(AOr,"gpt2"),AOr.forEach(t),Jvo=r(uCe," \u2014 "),_I=n(uCe,"A",{href:!0});var yOr=s(_I);Yvo=r(yOr,"GPT2LMHeadModel"),yOr.forEach(t),Kvo=r(uCe," (OpenAI GPT-2 model)"),uCe.forEach(t),Zvo=i(W),Jp=n(W,"LI",{});var pCe=s(Jp);Hae=n(pCe,"STRONG",{});var LOr=s(Hae);e1o=r(LOr,"gpt_neo"),LOr.forEach(t),o1o=r(pCe," \u2014 "),vI=n(pCe,"A",{href:!0});var xOr=s(vI);r1o=r(xOr,"GPTNeoForCausalLM"),xOr.forEach(t),t1o=r(pCe," (GPT Neo model)"),pCe.forEach(t),a1o=i(W),Yp=n(W,"LI",{});var _Ce=s(Yp);Uae=n(_Ce,"STRONG",{});var $Or=s(Uae);n1o=r($Or,"gptj"),$Or.forEach(t),s1o=r(_Ce," \u2014 "),bI=n(_Ce,"A",{href:!0});var kOr=s(bI);l1o=r(kOr,"GPTJForCausalLM"),kOr.forEach(t),i1o=r(_Ce," (GPT-J model)"),_Ce.forEach(t),d1o=i(W),Kp=n(W,"LI",{});var vCe=s(Kp);Jae=n(vCe,"STRONG",{});var SOr=s(Jae);c1o=r(SOr,"marian"),SOr.forEach(t),f1o=r(vCe," \u2014 "),FI=n(vCe,"A",{href:!0});var ROr=s(FI);m1o=r(ROr,"MarianForCausalLM"),ROr.forEach(t),g1o=r(vCe," (Marian model)"),vCe.forEach(t),h1o=i(W),Zp=n(W,"LI",{});var bCe=s(Zp);Yae=n(bCe,"STRONG",{});var BOr=s(Yae);u1o=r(BOr,"mbart"),BOr.forEach(t),p1o=r(bCe," \u2014 "),TI=n(bCe,"A",{href:!0});var POr=s(TI);_1o=r(POr,"MBartForCausalLM"),POr.forEach(t),v1o=r(bCe," (mBART model)"),bCe.forEach(t),b1o=i(W),e_=n(W,"LI",{});var FCe=s(e_);Kae=n(FCe,"STRONG",{});var IOr=s(Kae);F1o=r(IOr,"megatron-bert"),IOr.forEach(t),T1o=r(FCe," \u2014 "),MI=n(FCe,"A",{href:!0});var qOr=s(MI);M1o=r(qOr,"MegatronBertForCausalLM"),qOr.forEach(t),E1o=r(FCe," (MegatronBert model)"),FCe.forEach(t),C1o=i(W),o_=n(W,"LI",{});var TCe=s(o_);Zae=n(TCe,"STRONG",{});var NOr=s(Zae);w1o=r(NOr,"openai-gpt"),NOr.forEach(t),A1o=r(TCe," \u2014 "),EI=n(TCe,"A",{href:!0});var jOr=s(EI);y1o=r(jOr,"OpenAIGPTLMHeadModel"),jOr.forEach(t),L1o=r(TCe," (OpenAI GPT model)"),TCe.forEach(t),x1o=i(W),r_=n(W,"LI",{});var MCe=s(r_);ene=n(MCe,"STRONG",{});var DOr=s(ene);$1o=r(DOr,"pegasus"),DOr.forEach(t),k1o=r(MCe," \u2014 "),CI=n(MCe,"A",{href:!0});var GOr=s(CI);S1o=r(GOr,"PegasusForCausalLM"),GOr.forEach(t),R1o=r(MCe," (Pegasus model)"),MCe.forEach(t),B1o=i(W),t_=n(W,"LI",{});var ECe=s(t_);one=n(ECe,"STRONG",{});var OOr=s(one);P1o=r(OOr,"plbart"),OOr.forEach(t),I1o=r(ECe," \u2014 "),wI=n(ECe,"A",{href:!0});var VOr=s(wI);q1o=r(VOr,"PLBartForCausalLM"),VOr.forEach(t),N1o=r(ECe," (PLBart model)"),ECe.forEach(t),j1o=i(W),a_=n(W,"LI",{});var CCe=s(a_);rne=n(CCe,"STRONG",{});var XOr=s(rne);D1o=r(XOr,"prophetnet"),XOr.forEach(t),G1o=r(CCe," \u2014 "),AI=n(CCe,"A",{href:!0});var zOr=s(AI);O1o=r(zOr,"ProphetNetForCausalLM"),zOr.forEach(t),V1o=r(CCe," (ProphetNet model)"),CCe.forEach(t),X1o=i(W),n_=n(W,"LI",{});var wCe=s(n_);tne=n(wCe,"STRONG",{});var QOr=s(tne);z1o=r(QOr,"qdqbert"),QOr.forEach(t),Q1o=r(wCe," \u2014 "),yI=n(wCe,"A",{href:!0});var WOr=s(yI);W1o=r(WOr,"QDQBertLMHeadModel"),WOr.forEach(t),H1o=r(wCe," (QDQBert model)"),wCe.forEach(t),U1o=i(W),s_=n(W,"LI",{});var ACe=s(s_);ane=n(ACe,"STRONG",{});var HOr=s(ane);J1o=r(HOr,"reformer"),HOr.forEach(t),Y1o=r(ACe," \u2014 "),LI=n(ACe,"A",{href:!0});var UOr=s(LI);K1o=r(UOr,"ReformerModelWithLMHead"),UOr.forEach(t),Z1o=r(ACe," (Reformer model)"),ACe.forEach(t),ebo=i(W),l_=n(W,"LI",{});var yCe=s(l_);nne=n(yCe,"STRONG",{});var JOr=s(nne);obo=r(JOr,"rembert"),JOr.forEach(t),rbo=r(yCe," \u2014 "),xI=n(yCe,"A",{href:!0});var YOr=s(xI);tbo=r(YOr,"RemBertForCausalLM"),YOr.forEach(t),abo=r(yCe," (RemBERT model)"),yCe.forEach(t),nbo=i(W),i_=n(W,"LI",{});var LCe=s(i_);sne=n(LCe,"STRONG",{});var KOr=s(sne);sbo=r(KOr,"roberta"),KOr.forEach(t),lbo=r(LCe," \u2014 "),$I=n(LCe,"A",{href:!0});var ZOr=s($I);ibo=r(ZOr,"RobertaForCausalLM"),ZOr.forEach(t),dbo=r(LCe," (RoBERTa model)"),LCe.forEach(t),cbo=i(W),d_=n(W,"LI",{});var xCe=s(d_);lne=n(xCe,"STRONG",{});var eVr=s(lne);fbo=r(eVr,"roformer"),eVr.forEach(t),mbo=r(xCe," \u2014 "),kI=n(xCe,"A",{href:!0});var oVr=s(kI);gbo=r(oVr,"RoFormerForCausalLM"),oVr.forEach(t),hbo=r(xCe," (RoFormer model)"),xCe.forEach(t),ubo=i(W),c_=n(W,"LI",{});var $Ce=s(c_);ine=n($Ce,"STRONG",{});var rVr=s(ine);pbo=r(rVr,"speech_to_text_2"),rVr.forEach(t),_bo=r($Ce," \u2014 "),SI=n($Ce,"A",{href:!0});var tVr=s(SI);vbo=r(tVr,"Speech2Text2ForCausalLM"),tVr.forEach(t),bbo=r($Ce," (Speech2Text2 model)"),$Ce.forEach(t),Fbo=i(W),f_=n(W,"LI",{});var kCe=s(f_);dne=n(kCe,"STRONG",{});var aVr=s(dne);Tbo=r(aVr,"transfo-xl"),aVr.forEach(t),Mbo=r(kCe," \u2014 "),RI=n(kCe,"A",{href:!0});var nVr=s(RI);Ebo=r(nVr,"TransfoXLLMHeadModel"),nVr.forEach(t),Cbo=r(kCe," (Transformer-XL model)"),kCe.forEach(t),wbo=i(W),m_=n(W,"LI",{});var SCe=s(m_);cne=n(SCe,"STRONG",{});var sVr=s(cne);Abo=r(sVr,"trocr"),sVr.forEach(t),ybo=r(SCe," \u2014 "),BI=n(SCe,"A",{href:!0});var lVr=s(BI);Lbo=r(lVr,"TrOCRForCausalLM"),lVr.forEach(t),xbo=r(SCe," (TrOCR model)"),SCe.forEach(t),$bo=i(W),g_=n(W,"LI",{});var RCe=s(g_);fne=n(RCe,"STRONG",{});var iVr=s(fne);kbo=r(iVr,"xglm"),iVr.forEach(t),Sbo=r(RCe," \u2014 "),PI=n(RCe,"A",{href:!0});var dVr=s(PI);Rbo=r(dVr,"XGLMForCausalLM"),dVr.forEach(t),Bbo=r(RCe," (XGLM model)"),RCe.forEach(t),Pbo=i(W),h_=n(W,"LI",{});var BCe=s(h_);mne=n(BCe,"STRONG",{});var cVr=s(mne);Ibo=r(cVr,"xlm"),cVr.forEach(t),qbo=r(BCe," \u2014 "),II=n(BCe,"A",{href:!0});var fVr=s(II);Nbo=r(fVr,"XLMWithLMHeadModel"),fVr.forEach(t),jbo=r(BCe," (XLM model)"),BCe.forEach(t),Dbo=i(W),u_=n(W,"LI",{});var PCe=s(u_);gne=n(PCe,"STRONG",{});var mVr=s(gne);Gbo=r(mVr,"xlm-prophetnet"),mVr.forEach(t),Obo=r(PCe," \u2014 "),qI=n(PCe,"A",{href:!0});var gVr=s(qI);Vbo=r(gVr,"XLMProphetNetForCausalLM"),gVr.forEach(t),Xbo=r(PCe," (XLMProphetNet model)"),PCe.forEach(t),zbo=i(W),p_=n(W,"LI",{});var ICe=s(p_);hne=n(ICe,"STRONG",{});var hVr=s(hne);Qbo=r(hVr,"xlm-roberta"),hVr.forEach(t),Wbo=r(ICe," \u2014 "),NI=n(ICe,"A",{href:!0});var uVr=s(NI);Hbo=r(uVr,"XLMRobertaForCausalLM"),uVr.forEach(t),Ubo=r(ICe," (XLM-RoBERTa model)"),ICe.forEach(t),Jbo=i(W),__=n(W,"LI",{});var qCe=s(__);une=n(qCe,"STRONG",{});var pVr=s(une);Ybo=r(pVr,"xlm-roberta-xl"),pVr.forEach(t),Kbo=r(qCe," \u2014 "),jI=n(qCe,"A",{href:!0});var _Vr=s(jI);Zbo=r(_Vr,"XLMRobertaXLForCausalLM"),_Vr.forEach(t),e4o=r(qCe," (XLM-RoBERTa-XL model)"),qCe.forEach(t),o4o=i(W),v_=n(W,"LI",{});var NCe=s(v_);pne=n(NCe,"STRONG",{});var vVr=s(pne);r4o=r(vVr,"xlnet"),vVr.forEach(t),t4o=r(NCe," \u2014 "),DI=n(NCe,"A",{href:!0});var bVr=s(DI);a4o=r(bVr,"XLNetLMHeadModel"),bVr.forEach(t),n4o=r(NCe," (XLNet model)"),NCe.forEach(t),W.forEach(t),s4o=i(Yt),b_=n(Yt,"P",{});var jCe=s(b_);l4o=r(jCe,"The model is set in evaluation mode by default using "),_ne=n(jCe,"CODE",{});var FVr=s(_ne);i4o=r(FVr,"model.eval()"),FVr.forEach(t),d4o=r(jCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=n(jCe,"CODE",{});var TVr=s(vne);c4o=r(TVr,"model.train()"),TVr.forEach(t),jCe.forEach(t),f4o=i(Yt),T(F_.$$.fragment,Yt),Yt.forEach(t),ys.forEach(t),$ke=i(f),ui=n(f,"H2",{class:!0});var SRe=s(ui);T_=n(SRe,"A",{id:!0,class:!0,href:!0});var MVr=s(T_);bne=n(MVr,"SPAN",{});var EVr=s(bne);T(CA.$$.fragment,EVr),EVr.forEach(t),MVr.forEach(t),m4o=i(SRe),Fne=n(SRe,"SPAN",{});var CVr=s(Fne);g4o=r(CVr,"AutoModelForMaskedLM"),CVr.forEach(t),SRe.forEach(t),kke=i(f),xo=n(f,"DIV",{class:!0});var Ls=s(xo);T(wA.$$.fragment,Ls),h4o=i(Ls),pi=n(Ls,"P",{});var SU=s(pi);u4o=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GI=n(SU,"A",{href:!0});var wVr=s(GI);p4o=r(wVr,"from_pretrained()"),wVr.forEach(t),_4o=r(SU," class method or the "),OI=n(SU,"A",{href:!0});var AVr=s(OI);v4o=r(AVr,"from_config()"),AVr.forEach(t),b4o=r(SU,` class
method.`),SU.forEach(t),F4o=i(Ls),AA=n(Ls,"P",{});var RRe=s(AA);T4o=r(RRe,"This class cannot be instantiated directly using "),Tne=n(RRe,"CODE",{});var yVr=s(Tne);M4o=r(yVr,"__init__()"),yVr.forEach(t),E4o=r(RRe," (throws an error)."),RRe.forEach(t),C4o=i(Ls),ot=n(Ls,"DIV",{class:!0});var UC=s(ot);T(yA.$$.fragment,UC),w4o=i(UC),Mne=n(UC,"P",{});var LVr=s(Mne);A4o=r(LVr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LVr.forEach(t),y4o=i(UC),_i=n(UC,"P",{});var RU=s(_i);L4o=r(RU,`Note:
Loading a model from its configuration file does `),Ene=n(RU,"STRONG",{});var xVr=s(Ene);x4o=r(xVr,"not"),xVr.forEach(t),$4o=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VI=n(RU,"A",{href:!0});var $Vr=s(VI);k4o=r($Vr,"from_pretrained()"),$Vr.forEach(t),S4o=r(RU," to load the model weights."),RU.forEach(t),R4o=i(UC),T(M_.$$.fragment,UC),UC.forEach(t),B4o=i(Ls),He=n(Ls,"DIV",{class:!0});var Kt=s(He);T(LA.$$.fragment,Kt),P4o=i(Kt),Cne=n(Kt,"P",{});var kVr=s(Cne);I4o=r(kVr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kVr.forEach(t),q4o=i(Kt),wa=n(Kt,"P",{});var JC=s(wa);N4o=r(JC,"The model class to instantiate is selected based on the "),wne=n(JC,"CODE",{});var SVr=s(wne);j4o=r(SVr,"model_type"),SVr.forEach(t),D4o=r(JC,` property of the config object (either
passed as an argument or loaded from `),Ane=n(JC,"CODE",{});var RVr=s(Ane);G4o=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),O4o=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yne=n(JC,"CODE",{});var BVr=s(yne);V4o=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),X4o=r(JC,":"),JC.forEach(t),z4o=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);E_=n(H,"LI",{});var DCe=s(E_);Lne=n(DCe,"STRONG",{});var PVr=s(Lne);Q4o=r(PVr,"albert"),PVr.forEach(t),W4o=r(DCe," \u2014 "),XI=n(DCe,"A",{href:!0});var IVr=s(XI);H4o=r(IVr,"AlbertForMaskedLM"),IVr.forEach(t),U4o=r(DCe," (ALBERT model)"),DCe.forEach(t),J4o=i(H),C_=n(H,"LI",{});var GCe=s(C_);xne=n(GCe,"STRONG",{});var qVr=s(xne);Y4o=r(qVr,"bart"),qVr.forEach(t),K4o=r(GCe," \u2014 "),zI=n(GCe,"A",{href:!0});var NVr=s(zI);Z4o=r(NVr,"BartForConditionalGeneration"),NVr.forEach(t),e2o=r(GCe," (BART model)"),GCe.forEach(t),o2o=i(H),w_=n(H,"LI",{});var OCe=s(w_);$ne=n(OCe,"STRONG",{});var jVr=s($ne);r2o=r(jVr,"bert"),jVr.forEach(t),t2o=r(OCe," \u2014 "),QI=n(OCe,"A",{href:!0});var DVr=s(QI);a2o=r(DVr,"BertForMaskedLM"),DVr.forEach(t),n2o=r(OCe," (BERT model)"),OCe.forEach(t),s2o=i(H),A_=n(H,"LI",{});var VCe=s(A_);kne=n(VCe,"STRONG",{});var GVr=s(kne);l2o=r(GVr,"big_bird"),GVr.forEach(t),i2o=r(VCe," \u2014 "),WI=n(VCe,"A",{href:!0});var OVr=s(WI);d2o=r(OVr,"BigBirdForMaskedLM"),OVr.forEach(t),c2o=r(VCe," (BigBird model)"),VCe.forEach(t),f2o=i(H),y_=n(H,"LI",{});var XCe=s(y_);Sne=n(XCe,"STRONG",{});var VVr=s(Sne);m2o=r(VVr,"camembert"),VVr.forEach(t),g2o=r(XCe," \u2014 "),HI=n(XCe,"A",{href:!0});var XVr=s(HI);h2o=r(XVr,"CamembertForMaskedLM"),XVr.forEach(t),u2o=r(XCe," (CamemBERT model)"),XCe.forEach(t),p2o=i(H),L_=n(H,"LI",{});var zCe=s(L_);Rne=n(zCe,"STRONG",{});var zVr=s(Rne);_2o=r(zVr,"convbert"),zVr.forEach(t),v2o=r(zCe," \u2014 "),UI=n(zCe,"A",{href:!0});var QVr=s(UI);b2o=r(QVr,"ConvBertForMaskedLM"),QVr.forEach(t),F2o=r(zCe," (ConvBERT model)"),zCe.forEach(t),T2o=i(H),x_=n(H,"LI",{});var QCe=s(x_);Bne=n(QCe,"STRONG",{});var WVr=s(Bne);M2o=r(WVr,"data2vec-text"),WVr.forEach(t),E2o=r(QCe," \u2014 "),JI=n(QCe,"A",{href:!0});var HVr=s(JI);C2o=r(HVr,"Data2VecTextForMaskedLM"),HVr.forEach(t),w2o=r(QCe," (Data2VecText model)"),QCe.forEach(t),A2o=i(H),$_=n(H,"LI",{});var WCe=s($_);Pne=n(WCe,"STRONG",{});var UVr=s(Pne);y2o=r(UVr,"deberta"),UVr.forEach(t),L2o=r(WCe," \u2014 "),YI=n(WCe,"A",{href:!0});var JVr=s(YI);x2o=r(JVr,"DebertaForMaskedLM"),JVr.forEach(t),$2o=r(WCe," (DeBERTa model)"),WCe.forEach(t),k2o=i(H),k_=n(H,"LI",{});var HCe=s(k_);Ine=n(HCe,"STRONG",{});var YVr=s(Ine);S2o=r(YVr,"deberta-v2"),YVr.forEach(t),R2o=r(HCe," \u2014 "),KI=n(HCe,"A",{href:!0});var KVr=s(KI);B2o=r(KVr,"DebertaV2ForMaskedLM"),KVr.forEach(t),P2o=r(HCe," (DeBERTa-v2 model)"),HCe.forEach(t),I2o=i(H),S_=n(H,"LI",{});var UCe=s(S_);qne=n(UCe,"STRONG",{});var ZVr=s(qne);q2o=r(ZVr,"distilbert"),ZVr.forEach(t),N2o=r(UCe," \u2014 "),ZI=n(UCe,"A",{href:!0});var eXr=s(ZI);j2o=r(eXr,"DistilBertForMaskedLM"),eXr.forEach(t),D2o=r(UCe," (DistilBERT model)"),UCe.forEach(t),G2o=i(H),R_=n(H,"LI",{});var JCe=s(R_);Nne=n(JCe,"STRONG",{});var oXr=s(Nne);O2o=r(oXr,"electra"),oXr.forEach(t),V2o=r(JCe," \u2014 "),eq=n(JCe,"A",{href:!0});var rXr=s(eq);X2o=r(rXr,"ElectraForMaskedLM"),rXr.forEach(t),z2o=r(JCe," (ELECTRA model)"),JCe.forEach(t),Q2o=i(H),B_=n(H,"LI",{});var YCe=s(B_);jne=n(YCe,"STRONG",{});var tXr=s(jne);W2o=r(tXr,"flaubert"),tXr.forEach(t),H2o=r(YCe," \u2014 "),oq=n(YCe,"A",{href:!0});var aXr=s(oq);U2o=r(aXr,"FlaubertWithLMHeadModel"),aXr.forEach(t),J2o=r(YCe," (FlauBERT model)"),YCe.forEach(t),Y2o=i(H),P_=n(H,"LI",{});var KCe=s(P_);Dne=n(KCe,"STRONG",{});var nXr=s(Dne);K2o=r(nXr,"fnet"),nXr.forEach(t),Z2o=r(KCe," \u2014 "),rq=n(KCe,"A",{href:!0});var sXr=s(rq);eFo=r(sXr,"FNetForMaskedLM"),sXr.forEach(t),oFo=r(KCe," (FNet model)"),KCe.forEach(t),rFo=i(H),I_=n(H,"LI",{});var ZCe=s(I_);Gne=n(ZCe,"STRONG",{});var lXr=s(Gne);tFo=r(lXr,"funnel"),lXr.forEach(t),aFo=r(ZCe," \u2014 "),tq=n(ZCe,"A",{href:!0});var iXr=s(tq);nFo=r(iXr,"FunnelForMaskedLM"),iXr.forEach(t),sFo=r(ZCe," (Funnel Transformer model)"),ZCe.forEach(t),lFo=i(H),q_=n(H,"LI",{});var e3e=s(q_);One=n(e3e,"STRONG",{});var dXr=s(One);iFo=r(dXr,"ibert"),dXr.forEach(t),dFo=r(e3e," \u2014 "),aq=n(e3e,"A",{href:!0});var cXr=s(aq);cFo=r(cXr,"IBertForMaskedLM"),cXr.forEach(t),fFo=r(e3e," (I-BERT model)"),e3e.forEach(t),mFo=i(H),N_=n(H,"LI",{});var o3e=s(N_);Vne=n(o3e,"STRONG",{});var fXr=s(Vne);gFo=r(fXr,"layoutlm"),fXr.forEach(t),hFo=r(o3e," \u2014 "),nq=n(o3e,"A",{href:!0});var mXr=s(nq);uFo=r(mXr,"LayoutLMForMaskedLM"),mXr.forEach(t),pFo=r(o3e," (LayoutLM model)"),o3e.forEach(t),_Fo=i(H),j_=n(H,"LI",{});var r3e=s(j_);Xne=n(r3e,"STRONG",{});var gXr=s(Xne);vFo=r(gXr,"longformer"),gXr.forEach(t),bFo=r(r3e," \u2014 "),sq=n(r3e,"A",{href:!0});var hXr=s(sq);FFo=r(hXr,"LongformerForMaskedLM"),hXr.forEach(t),TFo=r(r3e," (Longformer model)"),r3e.forEach(t),MFo=i(H),D_=n(H,"LI",{});var t3e=s(D_);zne=n(t3e,"STRONG",{});var uXr=s(zne);EFo=r(uXr,"mbart"),uXr.forEach(t),CFo=r(t3e," \u2014 "),lq=n(t3e,"A",{href:!0});var pXr=s(lq);wFo=r(pXr,"MBartForConditionalGeneration"),pXr.forEach(t),AFo=r(t3e," (mBART model)"),t3e.forEach(t),yFo=i(H),G_=n(H,"LI",{});var a3e=s(G_);Qne=n(a3e,"STRONG",{});var _Xr=s(Qne);LFo=r(_Xr,"megatron-bert"),_Xr.forEach(t),xFo=r(a3e," \u2014 "),iq=n(a3e,"A",{href:!0});var vXr=s(iq);$Fo=r(vXr,"MegatronBertForMaskedLM"),vXr.forEach(t),kFo=r(a3e," (MegatronBert model)"),a3e.forEach(t),SFo=i(H),O_=n(H,"LI",{});var n3e=s(O_);Wne=n(n3e,"STRONG",{});var bXr=s(Wne);RFo=r(bXr,"mobilebert"),bXr.forEach(t),BFo=r(n3e," \u2014 "),dq=n(n3e,"A",{href:!0});var FXr=s(dq);PFo=r(FXr,"MobileBertForMaskedLM"),FXr.forEach(t),IFo=r(n3e," (MobileBERT model)"),n3e.forEach(t),qFo=i(H),V_=n(H,"LI",{});var s3e=s(V_);Hne=n(s3e,"STRONG",{});var TXr=s(Hne);NFo=r(TXr,"mpnet"),TXr.forEach(t),jFo=r(s3e," \u2014 "),cq=n(s3e,"A",{href:!0});var MXr=s(cq);DFo=r(MXr,"MPNetForMaskedLM"),MXr.forEach(t),GFo=r(s3e," (MPNet model)"),s3e.forEach(t),OFo=i(H),X_=n(H,"LI",{});var l3e=s(X_);Une=n(l3e,"STRONG",{});var EXr=s(Une);VFo=r(EXr,"nystromformer"),EXr.forEach(t),XFo=r(l3e," \u2014 "),fq=n(l3e,"A",{href:!0});var CXr=s(fq);zFo=r(CXr,"NystromformerForMaskedLM"),CXr.forEach(t),QFo=r(l3e," (Nystromformer model)"),l3e.forEach(t),WFo=i(H),z_=n(H,"LI",{});var i3e=s(z_);Jne=n(i3e,"STRONG",{});var wXr=s(Jne);HFo=r(wXr,"perceiver"),wXr.forEach(t),UFo=r(i3e," \u2014 "),mq=n(i3e,"A",{href:!0});var AXr=s(mq);JFo=r(AXr,"PerceiverForMaskedLM"),AXr.forEach(t),YFo=r(i3e," (Perceiver model)"),i3e.forEach(t),KFo=i(H),Q_=n(H,"LI",{});var d3e=s(Q_);Yne=n(d3e,"STRONG",{});var yXr=s(Yne);ZFo=r(yXr,"qdqbert"),yXr.forEach(t),e0o=r(d3e," \u2014 "),gq=n(d3e,"A",{href:!0});var LXr=s(gq);o0o=r(LXr,"QDQBertForMaskedLM"),LXr.forEach(t),r0o=r(d3e," (QDQBert model)"),d3e.forEach(t),t0o=i(H),W_=n(H,"LI",{});var c3e=s(W_);Kne=n(c3e,"STRONG",{});var xXr=s(Kne);a0o=r(xXr,"reformer"),xXr.forEach(t),n0o=r(c3e," \u2014 "),hq=n(c3e,"A",{href:!0});var $Xr=s(hq);s0o=r($Xr,"ReformerForMaskedLM"),$Xr.forEach(t),l0o=r(c3e," (Reformer model)"),c3e.forEach(t),i0o=i(H),H_=n(H,"LI",{});var f3e=s(H_);Zne=n(f3e,"STRONG",{});var kXr=s(Zne);d0o=r(kXr,"rembert"),kXr.forEach(t),c0o=r(f3e," \u2014 "),uq=n(f3e,"A",{href:!0});var SXr=s(uq);f0o=r(SXr,"RemBertForMaskedLM"),SXr.forEach(t),m0o=r(f3e," (RemBERT model)"),f3e.forEach(t),g0o=i(H),U_=n(H,"LI",{});var m3e=s(U_);ese=n(m3e,"STRONG",{});var RXr=s(ese);h0o=r(RXr,"roberta"),RXr.forEach(t),u0o=r(m3e," \u2014 "),pq=n(m3e,"A",{href:!0});var BXr=s(pq);p0o=r(BXr,"RobertaForMaskedLM"),BXr.forEach(t),_0o=r(m3e," (RoBERTa model)"),m3e.forEach(t),v0o=i(H),J_=n(H,"LI",{});var g3e=s(J_);ose=n(g3e,"STRONG",{});var PXr=s(ose);b0o=r(PXr,"roformer"),PXr.forEach(t),F0o=r(g3e," \u2014 "),_q=n(g3e,"A",{href:!0});var IXr=s(_q);T0o=r(IXr,"RoFormerForMaskedLM"),IXr.forEach(t),M0o=r(g3e," (RoFormer model)"),g3e.forEach(t),E0o=i(H),Y_=n(H,"LI",{});var h3e=s(Y_);rse=n(h3e,"STRONG",{});var qXr=s(rse);C0o=r(qXr,"squeezebert"),qXr.forEach(t),w0o=r(h3e," \u2014 "),vq=n(h3e,"A",{href:!0});var NXr=s(vq);A0o=r(NXr,"SqueezeBertForMaskedLM"),NXr.forEach(t),y0o=r(h3e," (SqueezeBERT model)"),h3e.forEach(t),L0o=i(H),K_=n(H,"LI",{});var u3e=s(K_);tse=n(u3e,"STRONG",{});var jXr=s(tse);x0o=r(jXr,"tapas"),jXr.forEach(t),$0o=r(u3e," \u2014 "),bq=n(u3e,"A",{href:!0});var DXr=s(bq);k0o=r(DXr,"TapasForMaskedLM"),DXr.forEach(t),S0o=r(u3e," (TAPAS model)"),u3e.forEach(t),R0o=i(H),Z_=n(H,"LI",{});var p3e=s(Z_);ase=n(p3e,"STRONG",{});var GXr=s(ase);B0o=r(GXr,"wav2vec2"),GXr.forEach(t),P0o=r(p3e," \u2014 "),nse=n(p3e,"CODE",{});var OXr=s(nse);I0o=r(OXr,"Wav2Vec2ForMaskedLM"),OXr.forEach(t),q0o=r(p3e," (Wav2Vec2 model)"),p3e.forEach(t),N0o=i(H),ev=n(H,"LI",{});var _3e=s(ev);sse=n(_3e,"STRONG",{});var VXr=s(sse);j0o=r(VXr,"xlm"),VXr.forEach(t),D0o=r(_3e," \u2014 "),Fq=n(_3e,"A",{href:!0});var XXr=s(Fq);G0o=r(XXr,"XLMWithLMHeadModel"),XXr.forEach(t),O0o=r(_3e," (XLM model)"),_3e.forEach(t),V0o=i(H),ov=n(H,"LI",{});var v3e=s(ov);lse=n(v3e,"STRONG",{});var zXr=s(lse);X0o=r(zXr,"xlm-roberta"),zXr.forEach(t),z0o=r(v3e," \u2014 "),Tq=n(v3e,"A",{href:!0});var QXr=s(Tq);Q0o=r(QXr,"XLMRobertaForMaskedLM"),QXr.forEach(t),W0o=r(v3e," (XLM-RoBERTa model)"),v3e.forEach(t),H0o=i(H),rv=n(H,"LI",{});var b3e=s(rv);ise=n(b3e,"STRONG",{});var WXr=s(ise);U0o=r(WXr,"xlm-roberta-xl"),WXr.forEach(t),J0o=r(b3e," \u2014 "),Mq=n(b3e,"A",{href:!0});var HXr=s(Mq);Y0o=r(HXr,"XLMRobertaXLForMaskedLM"),HXr.forEach(t),K0o=r(b3e," (XLM-RoBERTa-XL model)"),b3e.forEach(t),Z0o=i(H),tv=n(H,"LI",{});var F3e=s(tv);dse=n(F3e,"STRONG",{});var UXr=s(dse);eTo=r(UXr,"yoso"),UXr.forEach(t),oTo=r(F3e," \u2014 "),Eq=n(F3e,"A",{href:!0});var JXr=s(Eq);rTo=r(JXr,"YosoForMaskedLM"),JXr.forEach(t),tTo=r(F3e," (YOSO model)"),F3e.forEach(t),H.forEach(t),aTo=i(Kt),av=n(Kt,"P",{});var T3e=s(av);nTo=r(T3e,"The model is set in evaluation mode by default using "),cse=n(T3e,"CODE",{});var YXr=s(cse);sTo=r(YXr,"model.eval()"),YXr.forEach(t),lTo=r(T3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fse=n(T3e,"CODE",{});var KXr=s(fse);iTo=r(KXr,"model.train()"),KXr.forEach(t),T3e.forEach(t),dTo=i(Kt),T(nv.$$.fragment,Kt),Kt.forEach(t),Ls.forEach(t),Ske=i(f),vi=n(f,"H2",{class:!0});var BRe=s(vi);sv=n(BRe,"A",{id:!0,class:!0,href:!0});var ZXr=s(sv);mse=n(ZXr,"SPAN",{});var ezr=s(mse);T(xA.$$.fragment,ezr),ezr.forEach(t),ZXr.forEach(t),cTo=i(BRe),gse=n(BRe,"SPAN",{});var ozr=s(gse);fTo=r(ozr,"AutoModelForSeq2SeqLM"),ozr.forEach(t),BRe.forEach(t),Rke=i(f),$o=n(f,"DIV",{class:!0});var xs=s($o);T($A.$$.fragment,xs),mTo=i(xs),bi=n(xs,"P",{});var BU=s(bi);gTo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cq=n(BU,"A",{href:!0});var rzr=s(Cq);hTo=r(rzr,"from_pretrained()"),rzr.forEach(t),uTo=r(BU," class method or the "),wq=n(BU,"A",{href:!0});var tzr=s(wq);pTo=r(tzr,"from_config()"),tzr.forEach(t),_To=r(BU,` class
method.`),BU.forEach(t),vTo=i(xs),kA=n(xs,"P",{});var PRe=s(kA);bTo=r(PRe,"This class cannot be instantiated directly using "),hse=n(PRe,"CODE",{});var azr=s(hse);FTo=r(azr,"__init__()"),azr.forEach(t),TTo=r(PRe," (throws an error)."),PRe.forEach(t),MTo=i(xs),rt=n(xs,"DIV",{class:!0});var YC=s(rt);T(SA.$$.fragment,YC),ETo=i(YC),use=n(YC,"P",{});var nzr=s(use);CTo=r(nzr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nzr.forEach(t),wTo=i(YC),Fi=n(YC,"P",{});var PU=s(Fi);ATo=r(PU,`Note:
Loading a model from its configuration file does `),pse=n(PU,"STRONG",{});var szr=s(pse);yTo=r(szr,"not"),szr.forEach(t),LTo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aq=n(PU,"A",{href:!0});var lzr=s(Aq);xTo=r(lzr,"from_pretrained()"),lzr.forEach(t),$To=r(PU," to load the model weights."),PU.forEach(t),kTo=i(YC),T(lv.$$.fragment,YC),YC.forEach(t),STo=i(xs),Ue=n(xs,"DIV",{class:!0});var Zt=s(Ue);T(RA.$$.fragment,Zt),RTo=i(Zt),_se=n(Zt,"P",{});var izr=s(_se);BTo=r(izr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),izr.forEach(t),PTo=i(Zt),Aa=n(Zt,"P",{});var KC=s(Aa);ITo=r(KC,"The model class to instantiate is selected based on the "),vse=n(KC,"CODE",{});var dzr=s(vse);qTo=r(dzr,"model_type"),dzr.forEach(t),NTo=r(KC,` property of the config object (either
passed as an argument or loaded from `),bse=n(KC,"CODE",{});var czr=s(bse);jTo=r(czr,"pretrained_model_name_or_path"),czr.forEach(t),DTo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fse=n(KC,"CODE",{});var fzr=s(Fse);GTo=r(fzr,"pretrained_model_name_or_path"),fzr.forEach(t),OTo=r(KC,":"),KC.forEach(t),VTo=i(Zt),ue=n(Zt,"UL",{});var _e=s(ue);iv=n(_e,"LI",{});var M3e=s(iv);Tse=n(M3e,"STRONG",{});var mzr=s(Tse);XTo=r(mzr,"bart"),mzr.forEach(t),zTo=r(M3e," \u2014 "),yq=n(M3e,"A",{href:!0});var gzr=s(yq);QTo=r(gzr,"BartForConditionalGeneration"),gzr.forEach(t),WTo=r(M3e," (BART model)"),M3e.forEach(t),HTo=i(_e),dv=n(_e,"LI",{});var E3e=s(dv);Mse=n(E3e,"STRONG",{});var hzr=s(Mse);UTo=r(hzr,"bigbird_pegasus"),hzr.forEach(t),JTo=r(E3e," \u2014 "),Lq=n(E3e,"A",{href:!0});var uzr=s(Lq);YTo=r(uzr,"BigBirdPegasusForConditionalGeneration"),uzr.forEach(t),KTo=r(E3e," (BigBirdPegasus model)"),E3e.forEach(t),ZTo=i(_e),cv=n(_e,"LI",{});var C3e=s(cv);Ese=n(C3e,"STRONG",{});var pzr=s(Ese);e8o=r(pzr,"blenderbot"),pzr.forEach(t),o8o=r(C3e," \u2014 "),xq=n(C3e,"A",{href:!0});var _zr=s(xq);r8o=r(_zr,"BlenderbotForConditionalGeneration"),_zr.forEach(t),t8o=r(C3e," (Blenderbot model)"),C3e.forEach(t),a8o=i(_e),fv=n(_e,"LI",{});var w3e=s(fv);Cse=n(w3e,"STRONG",{});var vzr=s(Cse);n8o=r(vzr,"blenderbot-small"),vzr.forEach(t),s8o=r(w3e," \u2014 "),$q=n(w3e,"A",{href:!0});var bzr=s($q);l8o=r(bzr,"BlenderbotSmallForConditionalGeneration"),bzr.forEach(t),i8o=r(w3e," (BlenderbotSmall model)"),w3e.forEach(t),d8o=i(_e),mv=n(_e,"LI",{});var A3e=s(mv);wse=n(A3e,"STRONG",{});var Fzr=s(wse);c8o=r(Fzr,"encoder-decoder"),Fzr.forEach(t),f8o=r(A3e," \u2014 "),kq=n(A3e,"A",{href:!0});var Tzr=s(kq);m8o=r(Tzr,"EncoderDecoderModel"),Tzr.forEach(t),g8o=r(A3e," (Encoder decoder model)"),A3e.forEach(t),h8o=i(_e),gv=n(_e,"LI",{});var y3e=s(gv);Ase=n(y3e,"STRONG",{});var Mzr=s(Ase);u8o=r(Mzr,"fsmt"),Mzr.forEach(t),p8o=r(y3e," \u2014 "),Sq=n(y3e,"A",{href:!0});var Ezr=s(Sq);_8o=r(Ezr,"FSMTForConditionalGeneration"),Ezr.forEach(t),v8o=r(y3e," (FairSeq Machine-Translation model)"),y3e.forEach(t),b8o=i(_e),hv=n(_e,"LI",{});var L3e=s(hv);yse=n(L3e,"STRONG",{});var Czr=s(yse);F8o=r(Czr,"led"),Czr.forEach(t),T8o=r(L3e," \u2014 "),Rq=n(L3e,"A",{href:!0});var wzr=s(Rq);M8o=r(wzr,"LEDForConditionalGeneration"),wzr.forEach(t),E8o=r(L3e," (LED model)"),L3e.forEach(t),C8o=i(_e),uv=n(_e,"LI",{});var x3e=s(uv);Lse=n(x3e,"STRONG",{});var Azr=s(Lse);w8o=r(Azr,"m2m_100"),Azr.forEach(t),A8o=r(x3e," \u2014 "),Bq=n(x3e,"A",{href:!0});var yzr=s(Bq);y8o=r(yzr,"M2M100ForConditionalGeneration"),yzr.forEach(t),L8o=r(x3e," (M2M100 model)"),x3e.forEach(t),x8o=i(_e),pv=n(_e,"LI",{});var $3e=s(pv);xse=n($3e,"STRONG",{});var Lzr=s(xse);$8o=r(Lzr,"marian"),Lzr.forEach(t),k8o=r($3e," \u2014 "),Pq=n($3e,"A",{href:!0});var xzr=s(Pq);S8o=r(xzr,"MarianMTModel"),xzr.forEach(t),R8o=r($3e," (Marian model)"),$3e.forEach(t),B8o=i(_e),_v=n(_e,"LI",{});var k3e=s(_v);$se=n(k3e,"STRONG",{});var $zr=s($se);P8o=r($zr,"mbart"),$zr.forEach(t),I8o=r(k3e," \u2014 "),Iq=n(k3e,"A",{href:!0});var kzr=s(Iq);q8o=r(kzr,"MBartForConditionalGeneration"),kzr.forEach(t),N8o=r(k3e," (mBART model)"),k3e.forEach(t),j8o=i(_e),vv=n(_e,"LI",{});var S3e=s(vv);kse=n(S3e,"STRONG",{});var Szr=s(kse);D8o=r(Szr,"mt5"),Szr.forEach(t),G8o=r(S3e," \u2014 "),qq=n(S3e,"A",{href:!0});var Rzr=s(qq);O8o=r(Rzr,"MT5ForConditionalGeneration"),Rzr.forEach(t),V8o=r(S3e," (mT5 model)"),S3e.forEach(t),X8o=i(_e),bv=n(_e,"LI",{});var R3e=s(bv);Sse=n(R3e,"STRONG",{});var Bzr=s(Sse);z8o=r(Bzr,"pegasus"),Bzr.forEach(t),Q8o=r(R3e," \u2014 "),Nq=n(R3e,"A",{href:!0});var Pzr=s(Nq);W8o=r(Pzr,"PegasusForConditionalGeneration"),Pzr.forEach(t),H8o=r(R3e," (Pegasus model)"),R3e.forEach(t),U8o=i(_e),Fv=n(_e,"LI",{});var B3e=s(Fv);Rse=n(B3e,"STRONG",{});var Izr=s(Rse);J8o=r(Izr,"plbart"),Izr.forEach(t),Y8o=r(B3e," \u2014 "),jq=n(B3e,"A",{href:!0});var qzr=s(jq);K8o=r(qzr,"PLBartForConditionalGeneration"),qzr.forEach(t),Z8o=r(B3e," (PLBart model)"),B3e.forEach(t),eMo=i(_e),Tv=n(_e,"LI",{});var P3e=s(Tv);Bse=n(P3e,"STRONG",{});var Nzr=s(Bse);oMo=r(Nzr,"prophetnet"),Nzr.forEach(t),rMo=r(P3e," \u2014 "),Dq=n(P3e,"A",{href:!0});var jzr=s(Dq);tMo=r(jzr,"ProphetNetForConditionalGeneration"),jzr.forEach(t),aMo=r(P3e," (ProphetNet model)"),P3e.forEach(t),nMo=i(_e),Mv=n(_e,"LI",{});var I3e=s(Mv);Pse=n(I3e,"STRONG",{});var Dzr=s(Pse);sMo=r(Dzr,"t5"),Dzr.forEach(t),lMo=r(I3e," \u2014 "),Gq=n(I3e,"A",{href:!0});var Gzr=s(Gq);iMo=r(Gzr,"T5ForConditionalGeneration"),Gzr.forEach(t),dMo=r(I3e," (T5 model)"),I3e.forEach(t),cMo=i(_e),Ev=n(_e,"LI",{});var q3e=s(Ev);Ise=n(q3e,"STRONG",{});var Ozr=s(Ise);fMo=r(Ozr,"xlm-prophetnet"),Ozr.forEach(t),mMo=r(q3e," \u2014 "),Oq=n(q3e,"A",{href:!0});var Vzr=s(Oq);gMo=r(Vzr,"XLMProphetNetForConditionalGeneration"),Vzr.forEach(t),hMo=r(q3e," (XLMProphetNet model)"),q3e.forEach(t),_e.forEach(t),uMo=i(Zt),Cv=n(Zt,"P",{});var N3e=s(Cv);pMo=r(N3e,"The model is set in evaluation mode by default using "),qse=n(N3e,"CODE",{});var Xzr=s(qse);_Mo=r(Xzr,"model.eval()"),Xzr.forEach(t),vMo=r(N3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nse=n(N3e,"CODE",{});var zzr=s(Nse);bMo=r(zzr,"model.train()"),zzr.forEach(t),N3e.forEach(t),FMo=i(Zt),T(wv.$$.fragment,Zt),Zt.forEach(t),xs.forEach(t),Bke=i(f),Ti=n(f,"H2",{class:!0});var IRe=s(Ti);Av=n(IRe,"A",{id:!0,class:!0,href:!0});var Qzr=s(Av);jse=n(Qzr,"SPAN",{});var Wzr=s(jse);T(BA.$$.fragment,Wzr),Wzr.forEach(t),Qzr.forEach(t),TMo=i(IRe),Dse=n(IRe,"SPAN",{});var Hzr=s(Dse);MMo=r(Hzr,"AutoModelForSequenceClassification"),Hzr.forEach(t),IRe.forEach(t),Pke=i(f),ko=n(f,"DIV",{class:!0});var $s=s(ko);T(PA.$$.fragment,$s),EMo=i($s),Mi=n($s,"P",{});var IU=s(Mi);CMo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vq=n(IU,"A",{href:!0});var Uzr=s(Vq);wMo=r(Uzr,"from_pretrained()"),Uzr.forEach(t),AMo=r(IU," class method or the "),Xq=n(IU,"A",{href:!0});var Jzr=s(Xq);yMo=r(Jzr,"from_config()"),Jzr.forEach(t),LMo=r(IU,` class
method.`),IU.forEach(t),xMo=i($s),IA=n($s,"P",{});var qRe=s(IA);$Mo=r(qRe,"This class cannot be instantiated directly using "),Gse=n(qRe,"CODE",{});var Yzr=s(Gse);kMo=r(Yzr,"__init__()"),Yzr.forEach(t),SMo=r(qRe," (throws an error)."),qRe.forEach(t),RMo=i($s),tt=n($s,"DIV",{class:!0});var ZC=s(tt);T(qA.$$.fragment,ZC),BMo=i(ZC),Ose=n(ZC,"P",{});var Kzr=s(Ose);PMo=r(Kzr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kzr.forEach(t),IMo=i(ZC),Ei=n(ZC,"P",{});var qU=s(Ei);qMo=r(qU,`Note:
Loading a model from its configuration file does `),Vse=n(qU,"STRONG",{});var Zzr=s(Vse);NMo=r(Zzr,"not"),Zzr.forEach(t),jMo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zq=n(qU,"A",{href:!0});var eQr=s(zq);DMo=r(eQr,"from_pretrained()"),eQr.forEach(t),GMo=r(qU," to load the model weights."),qU.forEach(t),OMo=i(ZC),T(yv.$$.fragment,ZC),ZC.forEach(t),VMo=i($s),Je=n($s,"DIV",{class:!0});var ea=s(Je);T(NA.$$.fragment,ea),XMo=i(ea),Xse=n(ea,"P",{});var oQr=s(Xse);zMo=r(oQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oQr.forEach(t),QMo=i(ea),ya=n(ea,"P",{});var e3=s(ya);WMo=r(e3,"The model class to instantiate is selected based on the "),zse=n(e3,"CODE",{});var rQr=s(zse);HMo=r(rQr,"model_type"),rQr.forEach(t),UMo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Qse=n(e3,"CODE",{});var tQr=s(Qse);JMo=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),YMo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wse=n(e3,"CODE",{});var aQr=s(Wse);KMo=r(aQr,"pretrained_model_name_or_path"),aQr.forEach(t),ZMo=r(e3,":"),e3.forEach(t),eEo=i(ea),q=n(ea,"UL",{});var N=s(q);Lv=n(N,"LI",{});var j3e=s(Lv);Hse=n(j3e,"STRONG",{});var nQr=s(Hse);oEo=r(nQr,"albert"),nQr.forEach(t),rEo=r(j3e," \u2014 "),Qq=n(j3e,"A",{href:!0});var sQr=s(Qq);tEo=r(sQr,"AlbertForSequenceClassification"),sQr.forEach(t),aEo=r(j3e," (ALBERT model)"),j3e.forEach(t),nEo=i(N),xv=n(N,"LI",{});var D3e=s(xv);Use=n(D3e,"STRONG",{});var lQr=s(Use);sEo=r(lQr,"bart"),lQr.forEach(t),lEo=r(D3e," \u2014 "),Wq=n(D3e,"A",{href:!0});var iQr=s(Wq);iEo=r(iQr,"BartForSequenceClassification"),iQr.forEach(t),dEo=r(D3e," (BART model)"),D3e.forEach(t),cEo=i(N),$v=n(N,"LI",{});var G3e=s($v);Jse=n(G3e,"STRONG",{});var dQr=s(Jse);fEo=r(dQr,"bert"),dQr.forEach(t),mEo=r(G3e," \u2014 "),Hq=n(G3e,"A",{href:!0});var cQr=s(Hq);gEo=r(cQr,"BertForSequenceClassification"),cQr.forEach(t),hEo=r(G3e," (BERT model)"),G3e.forEach(t),uEo=i(N),kv=n(N,"LI",{});var O3e=s(kv);Yse=n(O3e,"STRONG",{});var fQr=s(Yse);pEo=r(fQr,"big_bird"),fQr.forEach(t),_Eo=r(O3e," \u2014 "),Uq=n(O3e,"A",{href:!0});var mQr=s(Uq);vEo=r(mQr,"BigBirdForSequenceClassification"),mQr.forEach(t),bEo=r(O3e," (BigBird model)"),O3e.forEach(t),FEo=i(N),Sv=n(N,"LI",{});var V3e=s(Sv);Kse=n(V3e,"STRONG",{});var gQr=s(Kse);TEo=r(gQr,"bigbird_pegasus"),gQr.forEach(t),MEo=r(V3e," \u2014 "),Jq=n(V3e,"A",{href:!0});var hQr=s(Jq);EEo=r(hQr,"BigBirdPegasusForSequenceClassification"),hQr.forEach(t),CEo=r(V3e," (BigBirdPegasus model)"),V3e.forEach(t),wEo=i(N),Rv=n(N,"LI",{});var X3e=s(Rv);Zse=n(X3e,"STRONG",{});var uQr=s(Zse);AEo=r(uQr,"camembert"),uQr.forEach(t),yEo=r(X3e," \u2014 "),Yq=n(X3e,"A",{href:!0});var pQr=s(Yq);LEo=r(pQr,"CamembertForSequenceClassification"),pQr.forEach(t),xEo=r(X3e," (CamemBERT model)"),X3e.forEach(t),$Eo=i(N),Bv=n(N,"LI",{});var z3e=s(Bv);ele=n(z3e,"STRONG",{});var _Qr=s(ele);kEo=r(_Qr,"canine"),_Qr.forEach(t),SEo=r(z3e," \u2014 "),Kq=n(z3e,"A",{href:!0});var vQr=s(Kq);REo=r(vQr,"CanineForSequenceClassification"),vQr.forEach(t),BEo=r(z3e," (Canine model)"),z3e.forEach(t),PEo=i(N),Pv=n(N,"LI",{});var Q3e=s(Pv);ole=n(Q3e,"STRONG",{});var bQr=s(ole);IEo=r(bQr,"convbert"),bQr.forEach(t),qEo=r(Q3e," \u2014 "),Zq=n(Q3e,"A",{href:!0});var FQr=s(Zq);NEo=r(FQr,"ConvBertForSequenceClassification"),FQr.forEach(t),jEo=r(Q3e," (ConvBERT model)"),Q3e.forEach(t),DEo=i(N),Iv=n(N,"LI",{});var W3e=s(Iv);rle=n(W3e,"STRONG",{});var TQr=s(rle);GEo=r(TQr,"ctrl"),TQr.forEach(t),OEo=r(W3e," \u2014 "),eN=n(W3e,"A",{href:!0});var MQr=s(eN);VEo=r(MQr,"CTRLForSequenceClassification"),MQr.forEach(t),XEo=r(W3e," (CTRL model)"),W3e.forEach(t),zEo=i(N),qv=n(N,"LI",{});var H3e=s(qv);tle=n(H3e,"STRONG",{});var EQr=s(tle);QEo=r(EQr,"data2vec-text"),EQr.forEach(t),WEo=r(H3e," \u2014 "),oN=n(H3e,"A",{href:!0});var CQr=s(oN);HEo=r(CQr,"Data2VecTextForSequenceClassification"),CQr.forEach(t),UEo=r(H3e," (Data2VecText model)"),H3e.forEach(t),JEo=i(N),Nv=n(N,"LI",{});var U3e=s(Nv);ale=n(U3e,"STRONG",{});var wQr=s(ale);YEo=r(wQr,"deberta"),wQr.forEach(t),KEo=r(U3e," \u2014 "),rN=n(U3e,"A",{href:!0});var AQr=s(rN);ZEo=r(AQr,"DebertaForSequenceClassification"),AQr.forEach(t),e5o=r(U3e," (DeBERTa model)"),U3e.forEach(t),o5o=i(N),jv=n(N,"LI",{});var J3e=s(jv);nle=n(J3e,"STRONG",{});var yQr=s(nle);r5o=r(yQr,"deberta-v2"),yQr.forEach(t),t5o=r(J3e," \u2014 "),tN=n(J3e,"A",{href:!0});var LQr=s(tN);a5o=r(LQr,"DebertaV2ForSequenceClassification"),LQr.forEach(t),n5o=r(J3e," (DeBERTa-v2 model)"),J3e.forEach(t),s5o=i(N),Dv=n(N,"LI",{});var Y3e=s(Dv);sle=n(Y3e,"STRONG",{});var xQr=s(sle);l5o=r(xQr,"distilbert"),xQr.forEach(t),i5o=r(Y3e," \u2014 "),aN=n(Y3e,"A",{href:!0});var $Qr=s(aN);d5o=r($Qr,"DistilBertForSequenceClassification"),$Qr.forEach(t),c5o=r(Y3e," (DistilBERT model)"),Y3e.forEach(t),f5o=i(N),Gv=n(N,"LI",{});var K3e=s(Gv);lle=n(K3e,"STRONG",{});var kQr=s(lle);m5o=r(kQr,"electra"),kQr.forEach(t),g5o=r(K3e," \u2014 "),nN=n(K3e,"A",{href:!0});var SQr=s(nN);h5o=r(SQr,"ElectraForSequenceClassification"),SQr.forEach(t),u5o=r(K3e," (ELECTRA model)"),K3e.forEach(t),p5o=i(N),Ov=n(N,"LI",{});var Z3e=s(Ov);ile=n(Z3e,"STRONG",{});var RQr=s(ile);_5o=r(RQr,"flaubert"),RQr.forEach(t),v5o=r(Z3e," \u2014 "),sN=n(Z3e,"A",{href:!0});var BQr=s(sN);b5o=r(BQr,"FlaubertForSequenceClassification"),BQr.forEach(t),F5o=r(Z3e," (FlauBERT model)"),Z3e.forEach(t),T5o=i(N),Vv=n(N,"LI",{});var ewe=s(Vv);dle=n(ewe,"STRONG",{});var PQr=s(dle);M5o=r(PQr,"fnet"),PQr.forEach(t),E5o=r(ewe," \u2014 "),lN=n(ewe,"A",{href:!0});var IQr=s(lN);C5o=r(IQr,"FNetForSequenceClassification"),IQr.forEach(t),w5o=r(ewe," (FNet model)"),ewe.forEach(t),A5o=i(N),Xv=n(N,"LI",{});var owe=s(Xv);cle=n(owe,"STRONG",{});var qQr=s(cle);y5o=r(qQr,"funnel"),qQr.forEach(t),L5o=r(owe," \u2014 "),iN=n(owe,"A",{href:!0});var NQr=s(iN);x5o=r(NQr,"FunnelForSequenceClassification"),NQr.forEach(t),$5o=r(owe," (Funnel Transformer model)"),owe.forEach(t),k5o=i(N),zv=n(N,"LI",{});var rwe=s(zv);fle=n(rwe,"STRONG",{});var jQr=s(fle);S5o=r(jQr,"gpt2"),jQr.forEach(t),R5o=r(rwe," \u2014 "),dN=n(rwe,"A",{href:!0});var DQr=s(dN);B5o=r(DQr,"GPT2ForSequenceClassification"),DQr.forEach(t),P5o=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),I5o=i(N),Qv=n(N,"LI",{});var twe=s(Qv);mle=n(twe,"STRONG",{});var GQr=s(mle);q5o=r(GQr,"gpt_neo"),GQr.forEach(t),N5o=r(twe," \u2014 "),cN=n(twe,"A",{href:!0});var OQr=s(cN);j5o=r(OQr,"GPTNeoForSequenceClassification"),OQr.forEach(t),D5o=r(twe," (GPT Neo model)"),twe.forEach(t),G5o=i(N),Wv=n(N,"LI",{});var awe=s(Wv);gle=n(awe,"STRONG",{});var VQr=s(gle);O5o=r(VQr,"gptj"),VQr.forEach(t),V5o=r(awe," \u2014 "),fN=n(awe,"A",{href:!0});var XQr=s(fN);X5o=r(XQr,"GPTJForSequenceClassification"),XQr.forEach(t),z5o=r(awe," (GPT-J model)"),awe.forEach(t),Q5o=i(N),Hv=n(N,"LI",{});var nwe=s(Hv);hle=n(nwe,"STRONG",{});var zQr=s(hle);W5o=r(zQr,"ibert"),zQr.forEach(t),H5o=r(nwe," \u2014 "),mN=n(nwe,"A",{href:!0});var QQr=s(mN);U5o=r(QQr,"IBertForSequenceClassification"),QQr.forEach(t),J5o=r(nwe," (I-BERT model)"),nwe.forEach(t),Y5o=i(N),Uv=n(N,"LI",{});var swe=s(Uv);ule=n(swe,"STRONG",{});var WQr=s(ule);K5o=r(WQr,"layoutlm"),WQr.forEach(t),Z5o=r(swe," \u2014 "),gN=n(swe,"A",{href:!0});var HQr=s(gN);eCo=r(HQr,"LayoutLMForSequenceClassification"),HQr.forEach(t),oCo=r(swe," (LayoutLM model)"),swe.forEach(t),rCo=i(N),Jv=n(N,"LI",{});var lwe=s(Jv);ple=n(lwe,"STRONG",{});var UQr=s(ple);tCo=r(UQr,"layoutlmv2"),UQr.forEach(t),aCo=r(lwe," \u2014 "),hN=n(lwe,"A",{href:!0});var JQr=s(hN);nCo=r(JQr,"LayoutLMv2ForSequenceClassification"),JQr.forEach(t),sCo=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),lCo=i(N),Yv=n(N,"LI",{});var iwe=s(Yv);_le=n(iwe,"STRONG",{});var YQr=s(_le);iCo=r(YQr,"led"),YQr.forEach(t),dCo=r(iwe," \u2014 "),uN=n(iwe,"A",{href:!0});var KQr=s(uN);cCo=r(KQr,"LEDForSequenceClassification"),KQr.forEach(t),fCo=r(iwe," (LED model)"),iwe.forEach(t),mCo=i(N),Kv=n(N,"LI",{});var dwe=s(Kv);vle=n(dwe,"STRONG",{});var ZQr=s(vle);gCo=r(ZQr,"longformer"),ZQr.forEach(t),hCo=r(dwe," \u2014 "),pN=n(dwe,"A",{href:!0});var eWr=s(pN);uCo=r(eWr,"LongformerForSequenceClassification"),eWr.forEach(t),pCo=r(dwe," (Longformer model)"),dwe.forEach(t),_Co=i(N),Zv=n(N,"LI",{});var cwe=s(Zv);ble=n(cwe,"STRONG",{});var oWr=s(ble);vCo=r(oWr,"mbart"),oWr.forEach(t),bCo=r(cwe," \u2014 "),_N=n(cwe,"A",{href:!0});var rWr=s(_N);FCo=r(rWr,"MBartForSequenceClassification"),rWr.forEach(t),TCo=r(cwe," (mBART model)"),cwe.forEach(t),MCo=i(N),e1=n(N,"LI",{});var fwe=s(e1);Fle=n(fwe,"STRONG",{});var tWr=s(Fle);ECo=r(tWr,"megatron-bert"),tWr.forEach(t),CCo=r(fwe," \u2014 "),vN=n(fwe,"A",{href:!0});var aWr=s(vN);wCo=r(aWr,"MegatronBertForSequenceClassification"),aWr.forEach(t),ACo=r(fwe," (MegatronBert model)"),fwe.forEach(t),yCo=i(N),o1=n(N,"LI",{});var mwe=s(o1);Tle=n(mwe,"STRONG",{});var nWr=s(Tle);LCo=r(nWr,"mobilebert"),nWr.forEach(t),xCo=r(mwe," \u2014 "),bN=n(mwe,"A",{href:!0});var sWr=s(bN);$Co=r(sWr,"MobileBertForSequenceClassification"),sWr.forEach(t),kCo=r(mwe," (MobileBERT model)"),mwe.forEach(t),SCo=i(N),r1=n(N,"LI",{});var gwe=s(r1);Mle=n(gwe,"STRONG",{});var lWr=s(Mle);RCo=r(lWr,"mpnet"),lWr.forEach(t),BCo=r(gwe," \u2014 "),FN=n(gwe,"A",{href:!0});var iWr=s(FN);PCo=r(iWr,"MPNetForSequenceClassification"),iWr.forEach(t),ICo=r(gwe," (MPNet model)"),gwe.forEach(t),qCo=i(N),t1=n(N,"LI",{});var hwe=s(t1);Ele=n(hwe,"STRONG",{});var dWr=s(Ele);NCo=r(dWr,"nystromformer"),dWr.forEach(t),jCo=r(hwe," \u2014 "),TN=n(hwe,"A",{href:!0});var cWr=s(TN);DCo=r(cWr,"NystromformerForSequenceClassification"),cWr.forEach(t),GCo=r(hwe," (Nystromformer model)"),hwe.forEach(t),OCo=i(N),a1=n(N,"LI",{});var uwe=s(a1);Cle=n(uwe,"STRONG",{});var fWr=s(Cle);VCo=r(fWr,"openai-gpt"),fWr.forEach(t),XCo=r(uwe," \u2014 "),MN=n(uwe,"A",{href:!0});var mWr=s(MN);zCo=r(mWr,"OpenAIGPTForSequenceClassification"),mWr.forEach(t),QCo=r(uwe," (OpenAI GPT model)"),uwe.forEach(t),WCo=i(N),n1=n(N,"LI",{});var pwe=s(n1);wle=n(pwe,"STRONG",{});var gWr=s(wle);HCo=r(gWr,"perceiver"),gWr.forEach(t),UCo=r(pwe," \u2014 "),EN=n(pwe,"A",{href:!0});var hWr=s(EN);JCo=r(hWr,"PerceiverForSequenceClassification"),hWr.forEach(t),YCo=r(pwe," (Perceiver model)"),pwe.forEach(t),KCo=i(N),s1=n(N,"LI",{});var _we=s(s1);Ale=n(_we,"STRONG",{});var uWr=s(Ale);ZCo=r(uWr,"plbart"),uWr.forEach(t),e3o=r(_we," \u2014 "),CN=n(_we,"A",{href:!0});var pWr=s(CN);o3o=r(pWr,"PLBartForSequenceClassification"),pWr.forEach(t),r3o=r(_we," (PLBart model)"),_we.forEach(t),t3o=i(N),l1=n(N,"LI",{});var vwe=s(l1);yle=n(vwe,"STRONG",{});var _Wr=s(yle);a3o=r(_Wr,"qdqbert"),_Wr.forEach(t),n3o=r(vwe," \u2014 "),wN=n(vwe,"A",{href:!0});var vWr=s(wN);s3o=r(vWr,"QDQBertForSequenceClassification"),vWr.forEach(t),l3o=r(vwe," (QDQBert model)"),vwe.forEach(t),i3o=i(N),i1=n(N,"LI",{});var bwe=s(i1);Lle=n(bwe,"STRONG",{});var bWr=s(Lle);d3o=r(bWr,"reformer"),bWr.forEach(t),c3o=r(bwe," \u2014 "),AN=n(bwe,"A",{href:!0});var FWr=s(AN);f3o=r(FWr,"ReformerForSequenceClassification"),FWr.forEach(t),m3o=r(bwe," (Reformer model)"),bwe.forEach(t),g3o=i(N),d1=n(N,"LI",{});var Fwe=s(d1);xle=n(Fwe,"STRONG",{});var TWr=s(xle);h3o=r(TWr,"rembert"),TWr.forEach(t),u3o=r(Fwe," \u2014 "),yN=n(Fwe,"A",{href:!0});var MWr=s(yN);p3o=r(MWr,"RemBertForSequenceClassification"),MWr.forEach(t),_3o=r(Fwe," (RemBERT model)"),Fwe.forEach(t),v3o=i(N),c1=n(N,"LI",{});var Twe=s(c1);$le=n(Twe,"STRONG",{});var EWr=s($le);b3o=r(EWr,"roberta"),EWr.forEach(t),F3o=r(Twe," \u2014 "),LN=n(Twe,"A",{href:!0});var CWr=s(LN);T3o=r(CWr,"RobertaForSequenceClassification"),CWr.forEach(t),M3o=r(Twe," (RoBERTa model)"),Twe.forEach(t),E3o=i(N),f1=n(N,"LI",{});var Mwe=s(f1);kle=n(Mwe,"STRONG",{});var wWr=s(kle);C3o=r(wWr,"roformer"),wWr.forEach(t),w3o=r(Mwe," \u2014 "),xN=n(Mwe,"A",{href:!0});var AWr=s(xN);A3o=r(AWr,"RoFormerForSequenceClassification"),AWr.forEach(t),y3o=r(Mwe," (RoFormer model)"),Mwe.forEach(t),L3o=i(N),m1=n(N,"LI",{});var Ewe=s(m1);Sle=n(Ewe,"STRONG",{});var yWr=s(Sle);x3o=r(yWr,"squeezebert"),yWr.forEach(t),$3o=r(Ewe," \u2014 "),$N=n(Ewe,"A",{href:!0});var LWr=s($N);k3o=r(LWr,"SqueezeBertForSequenceClassification"),LWr.forEach(t),S3o=r(Ewe," (SqueezeBERT model)"),Ewe.forEach(t),R3o=i(N),g1=n(N,"LI",{});var Cwe=s(g1);Rle=n(Cwe,"STRONG",{});var xWr=s(Rle);B3o=r(xWr,"tapas"),xWr.forEach(t),P3o=r(Cwe," \u2014 "),kN=n(Cwe,"A",{href:!0});var $Wr=s(kN);I3o=r($Wr,"TapasForSequenceClassification"),$Wr.forEach(t),q3o=r(Cwe," (TAPAS model)"),Cwe.forEach(t),N3o=i(N),h1=n(N,"LI",{});var wwe=s(h1);Ble=n(wwe,"STRONG",{});var kWr=s(Ble);j3o=r(kWr,"transfo-xl"),kWr.forEach(t),D3o=r(wwe," \u2014 "),SN=n(wwe,"A",{href:!0});var SWr=s(SN);G3o=r(SWr,"TransfoXLForSequenceClassification"),SWr.forEach(t),O3o=r(wwe," (Transformer-XL model)"),wwe.forEach(t),V3o=i(N),u1=n(N,"LI",{});var Awe=s(u1);Ple=n(Awe,"STRONG",{});var RWr=s(Ple);X3o=r(RWr,"xlm"),RWr.forEach(t),z3o=r(Awe," \u2014 "),RN=n(Awe,"A",{href:!0});var BWr=s(RN);Q3o=r(BWr,"XLMForSequenceClassification"),BWr.forEach(t),W3o=r(Awe," (XLM model)"),Awe.forEach(t),H3o=i(N),p1=n(N,"LI",{});var ywe=s(p1);Ile=n(ywe,"STRONG",{});var PWr=s(Ile);U3o=r(PWr,"xlm-roberta"),PWr.forEach(t),J3o=r(ywe," \u2014 "),BN=n(ywe,"A",{href:!0});var IWr=s(BN);Y3o=r(IWr,"XLMRobertaForSequenceClassification"),IWr.forEach(t),K3o=r(ywe," (XLM-RoBERTa model)"),ywe.forEach(t),Z3o=i(N),_1=n(N,"LI",{});var Lwe=s(_1);qle=n(Lwe,"STRONG",{});var qWr=s(qle);ewo=r(qWr,"xlm-roberta-xl"),qWr.forEach(t),owo=r(Lwe," \u2014 "),PN=n(Lwe,"A",{href:!0});var NWr=s(PN);rwo=r(NWr,"XLMRobertaXLForSequenceClassification"),NWr.forEach(t),two=r(Lwe," (XLM-RoBERTa-XL model)"),Lwe.forEach(t),awo=i(N),v1=n(N,"LI",{});var xwe=s(v1);Nle=n(xwe,"STRONG",{});var jWr=s(Nle);nwo=r(jWr,"xlnet"),jWr.forEach(t),swo=r(xwe," \u2014 "),IN=n(xwe,"A",{href:!0});var DWr=s(IN);lwo=r(DWr,"XLNetForSequenceClassification"),DWr.forEach(t),iwo=r(xwe," (XLNet model)"),xwe.forEach(t),dwo=i(N),b1=n(N,"LI",{});var $we=s(b1);jle=n($we,"STRONG",{});var GWr=s(jle);cwo=r(GWr,"yoso"),GWr.forEach(t),fwo=r($we," \u2014 "),qN=n($we,"A",{href:!0});var OWr=s(qN);mwo=r(OWr,"YosoForSequenceClassification"),OWr.forEach(t),gwo=r($we," (YOSO model)"),$we.forEach(t),N.forEach(t),hwo=i(ea),F1=n(ea,"P",{});var kwe=s(F1);uwo=r(kwe,"The model is set in evaluation mode by default using "),Dle=n(kwe,"CODE",{});var VWr=s(Dle);pwo=r(VWr,"model.eval()"),VWr.forEach(t),_wo=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(kwe,"CODE",{});var XWr=s(Gle);vwo=r(XWr,"model.train()"),XWr.forEach(t),kwe.forEach(t),bwo=i(ea),T(T1.$$.fragment,ea),ea.forEach(t),$s.forEach(t),Ike=i(f),Ci=n(f,"H2",{class:!0});var NRe=s(Ci);M1=n(NRe,"A",{id:!0,class:!0,href:!0});var zWr=s(M1);Ole=n(zWr,"SPAN",{});var QWr=s(Ole);T(jA.$$.fragment,QWr),QWr.forEach(t),zWr.forEach(t),Fwo=i(NRe),Vle=n(NRe,"SPAN",{});var WWr=s(Vle);Two=r(WWr,"AutoModelForMultipleChoice"),WWr.forEach(t),NRe.forEach(t),qke=i(f),So=n(f,"DIV",{class:!0});var ks=s(So);T(DA.$$.fragment,ks),Mwo=i(ks),wi=n(ks,"P",{});var NU=s(wi);Ewo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NN=n(NU,"A",{href:!0});var HWr=s(NN);Cwo=r(HWr,"from_pretrained()"),HWr.forEach(t),wwo=r(NU," class method or the "),jN=n(NU,"A",{href:!0});var UWr=s(jN);Awo=r(UWr,"from_config()"),UWr.forEach(t),ywo=r(NU,` class
method.`),NU.forEach(t),Lwo=i(ks),GA=n(ks,"P",{});var jRe=s(GA);xwo=r(jRe,"This class cannot be instantiated directly using "),Xle=n(jRe,"CODE",{});var JWr=s(Xle);$wo=r(JWr,"__init__()"),JWr.forEach(t),kwo=r(jRe," (throws an error)."),jRe.forEach(t),Swo=i(ks),at=n(ks,"DIV",{class:!0});var o3=s(at);T(OA.$$.fragment,o3),Rwo=i(o3),zle=n(o3,"P",{});var YWr=s(zle);Bwo=r(YWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YWr.forEach(t),Pwo=i(o3),Ai=n(o3,"P",{});var jU=s(Ai);Iwo=r(jU,`Note:
Loading a model from its configuration file does `),Qle=n(jU,"STRONG",{});var KWr=s(Qle);qwo=r(KWr,"not"),KWr.forEach(t),Nwo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=n(jU,"A",{href:!0});var ZWr=s(DN);jwo=r(ZWr,"from_pretrained()"),ZWr.forEach(t),Dwo=r(jU," to load the model weights."),jU.forEach(t),Gwo=i(o3),T(E1.$$.fragment,o3),o3.forEach(t),Owo=i(ks),Ye=n(ks,"DIV",{class:!0});var oa=s(Ye);T(VA.$$.fragment,oa),Vwo=i(oa),Wle=n(oa,"P",{});var eHr=s(Wle);Xwo=r(eHr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eHr.forEach(t),zwo=i(oa),La=n(oa,"P",{});var r3=s(La);Qwo=r(r3,"The model class to instantiate is selected based on the "),Hle=n(r3,"CODE",{});var oHr=s(Hle);Wwo=r(oHr,"model_type"),oHr.forEach(t),Hwo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Ule=n(r3,"CODE",{});var rHr=s(Ule);Uwo=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),Jwo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=n(r3,"CODE",{});var tHr=s(Jle);Ywo=r(tHr,"pretrained_model_name_or_path"),tHr.forEach(t),Kwo=r(r3,":"),r3.forEach(t),Zwo=i(oa),Y=n(oa,"UL",{});var K=s(Y);C1=n(K,"LI",{});var Swe=s(C1);Yle=n(Swe,"STRONG",{});var aHr=s(Yle);eAo=r(aHr,"albert"),aHr.forEach(t),oAo=r(Swe," \u2014 "),GN=n(Swe,"A",{href:!0});var nHr=s(GN);rAo=r(nHr,"AlbertForMultipleChoice"),nHr.forEach(t),tAo=r(Swe," (ALBERT model)"),Swe.forEach(t),aAo=i(K),w1=n(K,"LI",{});var Rwe=s(w1);Kle=n(Rwe,"STRONG",{});var sHr=s(Kle);nAo=r(sHr,"bert"),sHr.forEach(t),sAo=r(Rwe," \u2014 "),ON=n(Rwe,"A",{href:!0});var lHr=s(ON);lAo=r(lHr,"BertForMultipleChoice"),lHr.forEach(t),iAo=r(Rwe," (BERT model)"),Rwe.forEach(t),dAo=i(K),A1=n(K,"LI",{});var Bwe=s(A1);Zle=n(Bwe,"STRONG",{});var iHr=s(Zle);cAo=r(iHr,"big_bird"),iHr.forEach(t),fAo=r(Bwe," \u2014 "),VN=n(Bwe,"A",{href:!0});var dHr=s(VN);mAo=r(dHr,"BigBirdForMultipleChoice"),dHr.forEach(t),gAo=r(Bwe," (BigBird model)"),Bwe.forEach(t),hAo=i(K),y1=n(K,"LI",{});var Pwe=s(y1);eie=n(Pwe,"STRONG",{});var cHr=s(eie);uAo=r(cHr,"camembert"),cHr.forEach(t),pAo=r(Pwe," \u2014 "),XN=n(Pwe,"A",{href:!0});var fHr=s(XN);_Ao=r(fHr,"CamembertForMultipleChoice"),fHr.forEach(t),vAo=r(Pwe," (CamemBERT model)"),Pwe.forEach(t),bAo=i(K),L1=n(K,"LI",{});var Iwe=s(L1);oie=n(Iwe,"STRONG",{});var mHr=s(oie);FAo=r(mHr,"canine"),mHr.forEach(t),TAo=r(Iwe," \u2014 "),zN=n(Iwe,"A",{href:!0});var gHr=s(zN);MAo=r(gHr,"CanineForMultipleChoice"),gHr.forEach(t),EAo=r(Iwe," (Canine model)"),Iwe.forEach(t),CAo=i(K),x1=n(K,"LI",{});var qwe=s(x1);rie=n(qwe,"STRONG",{});var hHr=s(rie);wAo=r(hHr,"convbert"),hHr.forEach(t),AAo=r(qwe," \u2014 "),QN=n(qwe,"A",{href:!0});var uHr=s(QN);yAo=r(uHr,"ConvBertForMultipleChoice"),uHr.forEach(t),LAo=r(qwe," (ConvBERT model)"),qwe.forEach(t),xAo=i(K),$1=n(K,"LI",{});var Nwe=s($1);tie=n(Nwe,"STRONG",{});var pHr=s(tie);$Ao=r(pHr,"data2vec-text"),pHr.forEach(t),kAo=r(Nwe," \u2014 "),WN=n(Nwe,"A",{href:!0});var _Hr=s(WN);SAo=r(_Hr,"Data2VecTextForMultipleChoice"),_Hr.forEach(t),RAo=r(Nwe," (Data2VecText model)"),Nwe.forEach(t),BAo=i(K),k1=n(K,"LI",{});var jwe=s(k1);aie=n(jwe,"STRONG",{});var vHr=s(aie);PAo=r(vHr,"distilbert"),vHr.forEach(t),IAo=r(jwe," \u2014 "),HN=n(jwe,"A",{href:!0});var bHr=s(HN);qAo=r(bHr,"DistilBertForMultipleChoice"),bHr.forEach(t),NAo=r(jwe," (DistilBERT model)"),jwe.forEach(t),jAo=i(K),S1=n(K,"LI",{});var Dwe=s(S1);nie=n(Dwe,"STRONG",{});var FHr=s(nie);DAo=r(FHr,"electra"),FHr.forEach(t),GAo=r(Dwe," \u2014 "),UN=n(Dwe,"A",{href:!0});var THr=s(UN);OAo=r(THr,"ElectraForMultipleChoice"),THr.forEach(t),VAo=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),XAo=i(K),R1=n(K,"LI",{});var Gwe=s(R1);sie=n(Gwe,"STRONG",{});var MHr=s(sie);zAo=r(MHr,"flaubert"),MHr.forEach(t),QAo=r(Gwe," \u2014 "),JN=n(Gwe,"A",{href:!0});var EHr=s(JN);WAo=r(EHr,"FlaubertForMultipleChoice"),EHr.forEach(t),HAo=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),UAo=i(K),B1=n(K,"LI",{});var Owe=s(B1);lie=n(Owe,"STRONG",{});var CHr=s(lie);JAo=r(CHr,"fnet"),CHr.forEach(t),YAo=r(Owe," \u2014 "),YN=n(Owe,"A",{href:!0});var wHr=s(YN);KAo=r(wHr,"FNetForMultipleChoice"),wHr.forEach(t),ZAo=r(Owe," (FNet model)"),Owe.forEach(t),e6o=i(K),P1=n(K,"LI",{});var Vwe=s(P1);iie=n(Vwe,"STRONG",{});var AHr=s(iie);o6o=r(AHr,"funnel"),AHr.forEach(t),r6o=r(Vwe," \u2014 "),KN=n(Vwe,"A",{href:!0});var yHr=s(KN);t6o=r(yHr,"FunnelForMultipleChoice"),yHr.forEach(t),a6o=r(Vwe," (Funnel Transformer model)"),Vwe.forEach(t),n6o=i(K),I1=n(K,"LI",{});var Xwe=s(I1);die=n(Xwe,"STRONG",{});var LHr=s(die);s6o=r(LHr,"ibert"),LHr.forEach(t),l6o=r(Xwe," \u2014 "),ZN=n(Xwe,"A",{href:!0});var xHr=s(ZN);i6o=r(xHr,"IBertForMultipleChoice"),xHr.forEach(t),d6o=r(Xwe," (I-BERT model)"),Xwe.forEach(t),c6o=i(K),q1=n(K,"LI",{});var zwe=s(q1);cie=n(zwe,"STRONG",{});var $Hr=s(cie);f6o=r($Hr,"longformer"),$Hr.forEach(t),m6o=r(zwe," \u2014 "),ej=n(zwe,"A",{href:!0});var kHr=s(ej);g6o=r(kHr,"LongformerForMultipleChoice"),kHr.forEach(t),h6o=r(zwe," (Longformer model)"),zwe.forEach(t),u6o=i(K),N1=n(K,"LI",{});var Qwe=s(N1);fie=n(Qwe,"STRONG",{});var SHr=s(fie);p6o=r(SHr,"megatron-bert"),SHr.forEach(t),_6o=r(Qwe," \u2014 "),oj=n(Qwe,"A",{href:!0});var RHr=s(oj);v6o=r(RHr,"MegatronBertForMultipleChoice"),RHr.forEach(t),b6o=r(Qwe," (MegatronBert model)"),Qwe.forEach(t),F6o=i(K),j1=n(K,"LI",{});var Wwe=s(j1);mie=n(Wwe,"STRONG",{});var BHr=s(mie);T6o=r(BHr,"mobilebert"),BHr.forEach(t),M6o=r(Wwe," \u2014 "),rj=n(Wwe,"A",{href:!0});var PHr=s(rj);E6o=r(PHr,"MobileBertForMultipleChoice"),PHr.forEach(t),C6o=r(Wwe," (MobileBERT model)"),Wwe.forEach(t),w6o=i(K),D1=n(K,"LI",{});var Hwe=s(D1);gie=n(Hwe,"STRONG",{});var IHr=s(gie);A6o=r(IHr,"mpnet"),IHr.forEach(t),y6o=r(Hwe," \u2014 "),tj=n(Hwe,"A",{href:!0});var qHr=s(tj);L6o=r(qHr,"MPNetForMultipleChoice"),qHr.forEach(t),x6o=r(Hwe," (MPNet model)"),Hwe.forEach(t),$6o=i(K),G1=n(K,"LI",{});var Uwe=s(G1);hie=n(Uwe,"STRONG",{});var NHr=s(hie);k6o=r(NHr,"nystromformer"),NHr.forEach(t),S6o=r(Uwe," \u2014 "),aj=n(Uwe,"A",{href:!0});var jHr=s(aj);R6o=r(jHr,"NystromformerForMultipleChoice"),jHr.forEach(t),B6o=r(Uwe," (Nystromformer model)"),Uwe.forEach(t),P6o=i(K),O1=n(K,"LI",{});var Jwe=s(O1);uie=n(Jwe,"STRONG",{});var DHr=s(uie);I6o=r(DHr,"qdqbert"),DHr.forEach(t),q6o=r(Jwe," \u2014 "),nj=n(Jwe,"A",{href:!0});var GHr=s(nj);N6o=r(GHr,"QDQBertForMultipleChoice"),GHr.forEach(t),j6o=r(Jwe," (QDQBert model)"),Jwe.forEach(t),D6o=i(K),V1=n(K,"LI",{});var Ywe=s(V1);pie=n(Ywe,"STRONG",{});var OHr=s(pie);G6o=r(OHr,"rembert"),OHr.forEach(t),O6o=r(Ywe," \u2014 "),sj=n(Ywe,"A",{href:!0});var VHr=s(sj);V6o=r(VHr,"RemBertForMultipleChoice"),VHr.forEach(t),X6o=r(Ywe," (RemBERT model)"),Ywe.forEach(t),z6o=i(K),X1=n(K,"LI",{});var Kwe=s(X1);_ie=n(Kwe,"STRONG",{});var XHr=s(_ie);Q6o=r(XHr,"roberta"),XHr.forEach(t),W6o=r(Kwe," \u2014 "),lj=n(Kwe,"A",{href:!0});var zHr=s(lj);H6o=r(zHr,"RobertaForMultipleChoice"),zHr.forEach(t),U6o=r(Kwe," (RoBERTa model)"),Kwe.forEach(t),J6o=i(K),z1=n(K,"LI",{});var Zwe=s(z1);vie=n(Zwe,"STRONG",{});var QHr=s(vie);Y6o=r(QHr,"roformer"),QHr.forEach(t),K6o=r(Zwe," \u2014 "),ij=n(Zwe,"A",{href:!0});var WHr=s(ij);Z6o=r(WHr,"RoFormerForMultipleChoice"),WHr.forEach(t),eyo=r(Zwe," (RoFormer model)"),Zwe.forEach(t),oyo=i(K),Q1=n(K,"LI",{});var eAe=s(Q1);bie=n(eAe,"STRONG",{});var HHr=s(bie);ryo=r(HHr,"squeezebert"),HHr.forEach(t),tyo=r(eAe," \u2014 "),dj=n(eAe,"A",{href:!0});var UHr=s(dj);ayo=r(UHr,"SqueezeBertForMultipleChoice"),UHr.forEach(t),nyo=r(eAe," (SqueezeBERT model)"),eAe.forEach(t),syo=i(K),W1=n(K,"LI",{});var oAe=s(W1);Fie=n(oAe,"STRONG",{});var JHr=s(Fie);lyo=r(JHr,"xlm"),JHr.forEach(t),iyo=r(oAe," \u2014 "),cj=n(oAe,"A",{href:!0});var YHr=s(cj);dyo=r(YHr,"XLMForMultipleChoice"),YHr.forEach(t),cyo=r(oAe," (XLM model)"),oAe.forEach(t),fyo=i(K),H1=n(K,"LI",{});var rAe=s(H1);Tie=n(rAe,"STRONG",{});var KHr=s(Tie);myo=r(KHr,"xlm-roberta"),KHr.forEach(t),gyo=r(rAe," \u2014 "),fj=n(rAe,"A",{href:!0});var ZHr=s(fj);hyo=r(ZHr,"XLMRobertaForMultipleChoice"),ZHr.forEach(t),uyo=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),pyo=i(K),U1=n(K,"LI",{});var tAe=s(U1);Mie=n(tAe,"STRONG",{});var eUr=s(Mie);_yo=r(eUr,"xlm-roberta-xl"),eUr.forEach(t),vyo=r(tAe," \u2014 "),mj=n(tAe,"A",{href:!0});var oUr=s(mj);byo=r(oUr,"XLMRobertaXLForMultipleChoice"),oUr.forEach(t),Fyo=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),Tyo=i(K),J1=n(K,"LI",{});var aAe=s(J1);Eie=n(aAe,"STRONG",{});var rUr=s(Eie);Myo=r(rUr,"xlnet"),rUr.forEach(t),Eyo=r(aAe," \u2014 "),gj=n(aAe,"A",{href:!0});var tUr=s(gj);Cyo=r(tUr,"XLNetForMultipleChoice"),tUr.forEach(t),wyo=r(aAe," (XLNet model)"),aAe.forEach(t),Ayo=i(K),Y1=n(K,"LI",{});var nAe=s(Y1);Cie=n(nAe,"STRONG",{});var aUr=s(Cie);yyo=r(aUr,"yoso"),aUr.forEach(t),Lyo=r(nAe," \u2014 "),hj=n(nAe,"A",{href:!0});var nUr=s(hj);xyo=r(nUr,"YosoForMultipleChoice"),nUr.forEach(t),$yo=r(nAe," (YOSO model)"),nAe.forEach(t),K.forEach(t),kyo=i(oa),K1=n(oa,"P",{});var sAe=s(K1);Syo=r(sAe,"The model is set in evaluation mode by default using "),wie=n(sAe,"CODE",{});var sUr=s(wie);Ryo=r(sUr,"model.eval()"),sUr.forEach(t),Byo=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(sAe,"CODE",{});var lUr=s(Aie);Pyo=r(lUr,"model.train()"),lUr.forEach(t),sAe.forEach(t),Iyo=i(oa),T(Z1.$$.fragment,oa),oa.forEach(t),ks.forEach(t),Nke=i(f),yi=n(f,"H2",{class:!0});var DRe=s(yi);eb=n(DRe,"A",{id:!0,class:!0,href:!0});var iUr=s(eb);yie=n(iUr,"SPAN",{});var dUr=s(yie);T(XA.$$.fragment,dUr),dUr.forEach(t),iUr.forEach(t),qyo=i(DRe),Lie=n(DRe,"SPAN",{});var cUr=s(Lie);Nyo=r(cUr,"AutoModelForNextSentencePrediction"),cUr.forEach(t),DRe.forEach(t),jke=i(f),Ro=n(f,"DIV",{class:!0});var Ss=s(Ro);T(zA.$$.fragment,Ss),jyo=i(Ss),Li=n(Ss,"P",{});var DU=s(Li);Dyo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uj=n(DU,"A",{href:!0});var fUr=s(uj);Gyo=r(fUr,"from_pretrained()"),fUr.forEach(t),Oyo=r(DU," class method or the "),pj=n(DU,"A",{href:!0});var mUr=s(pj);Vyo=r(mUr,"from_config()"),mUr.forEach(t),Xyo=r(DU,` class
method.`),DU.forEach(t),zyo=i(Ss),QA=n(Ss,"P",{});var GRe=s(QA);Qyo=r(GRe,"This class cannot be instantiated directly using "),xie=n(GRe,"CODE",{});var gUr=s(xie);Wyo=r(gUr,"__init__()"),gUr.forEach(t),Hyo=r(GRe," (throws an error)."),GRe.forEach(t),Uyo=i(Ss),nt=n(Ss,"DIV",{class:!0});var t3=s(nt);T(WA.$$.fragment,t3),Jyo=i(t3),$ie=n(t3,"P",{});var hUr=s($ie);Yyo=r(hUr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hUr.forEach(t),Kyo=i(t3),xi=n(t3,"P",{});var GU=s(xi);Zyo=r(GU,`Note:
Loading a model from its configuration file does `),kie=n(GU,"STRONG",{});var uUr=s(kie);eLo=r(uUr,"not"),uUr.forEach(t),oLo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(GU,"A",{href:!0});var pUr=s(_j);rLo=r(pUr,"from_pretrained()"),pUr.forEach(t),tLo=r(GU," to load the model weights."),GU.forEach(t),aLo=i(t3),T(ob.$$.fragment,t3),t3.forEach(t),nLo=i(Ss),Ke=n(Ss,"DIV",{class:!0});var ra=s(Ke);T(HA.$$.fragment,ra),sLo=i(ra),Sie=n(ra,"P",{});var _Ur=s(Sie);lLo=r(_Ur,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Ur.forEach(t),iLo=i(ra),xa=n(ra,"P",{});var a3=s(xa);dLo=r(a3,"The model class to instantiate is selected based on the "),Rie=n(a3,"CODE",{});var vUr=s(Rie);cLo=r(vUr,"model_type"),vUr.forEach(t),fLo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Bie=n(a3,"CODE",{});var bUr=s(Bie);mLo=r(bUr,"pretrained_model_name_or_path"),bUr.forEach(t),gLo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(a3,"CODE",{});var FUr=s(Pie);hLo=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),uLo=r(a3,":"),a3.forEach(t),pLo=i(ra),Wr=n(ra,"UL",{});var Rs=s(Wr);rb=n(Rs,"LI",{});var lAe=s(rb);Iie=n(lAe,"STRONG",{});var TUr=s(Iie);_Lo=r(TUr,"bert"),TUr.forEach(t),vLo=r(lAe," \u2014 "),vj=n(lAe,"A",{href:!0});var MUr=s(vj);bLo=r(MUr,"BertForNextSentencePrediction"),MUr.forEach(t),FLo=r(lAe," (BERT model)"),lAe.forEach(t),TLo=i(Rs),tb=n(Rs,"LI",{});var iAe=s(tb);qie=n(iAe,"STRONG",{});var EUr=s(qie);MLo=r(EUr,"fnet"),EUr.forEach(t),ELo=r(iAe," \u2014 "),bj=n(iAe,"A",{href:!0});var CUr=s(bj);CLo=r(CUr,"FNetForNextSentencePrediction"),CUr.forEach(t),wLo=r(iAe," (FNet model)"),iAe.forEach(t),ALo=i(Rs),ab=n(Rs,"LI",{});var dAe=s(ab);Nie=n(dAe,"STRONG",{});var wUr=s(Nie);yLo=r(wUr,"megatron-bert"),wUr.forEach(t),LLo=r(dAe," \u2014 "),Fj=n(dAe,"A",{href:!0});var AUr=s(Fj);xLo=r(AUr,"MegatronBertForNextSentencePrediction"),AUr.forEach(t),$Lo=r(dAe," (MegatronBert model)"),dAe.forEach(t),kLo=i(Rs),nb=n(Rs,"LI",{});var cAe=s(nb);jie=n(cAe,"STRONG",{});var yUr=s(jie);SLo=r(yUr,"mobilebert"),yUr.forEach(t),RLo=r(cAe," \u2014 "),Tj=n(cAe,"A",{href:!0});var LUr=s(Tj);BLo=r(LUr,"MobileBertForNextSentencePrediction"),LUr.forEach(t),PLo=r(cAe," (MobileBERT model)"),cAe.forEach(t),ILo=i(Rs),sb=n(Rs,"LI",{});var fAe=s(sb);Die=n(fAe,"STRONG",{});var xUr=s(Die);qLo=r(xUr,"qdqbert"),xUr.forEach(t),NLo=r(fAe," \u2014 "),Mj=n(fAe,"A",{href:!0});var $Ur=s(Mj);jLo=r($Ur,"QDQBertForNextSentencePrediction"),$Ur.forEach(t),DLo=r(fAe," (QDQBert model)"),fAe.forEach(t),Rs.forEach(t),GLo=i(ra),lb=n(ra,"P",{});var mAe=s(lb);OLo=r(mAe,"The model is set in evaluation mode by default using "),Gie=n(mAe,"CODE",{});var kUr=s(Gie);VLo=r(kUr,"model.eval()"),kUr.forEach(t),XLo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=n(mAe,"CODE",{});var SUr=s(Oie);zLo=r(SUr,"model.train()"),SUr.forEach(t),mAe.forEach(t),QLo=i(ra),T(ib.$$.fragment,ra),ra.forEach(t),Ss.forEach(t),Dke=i(f),$i=n(f,"H2",{class:!0});var ORe=s($i);db=n(ORe,"A",{id:!0,class:!0,href:!0});var RUr=s(db);Vie=n(RUr,"SPAN",{});var BUr=s(Vie);T(UA.$$.fragment,BUr),BUr.forEach(t),RUr.forEach(t),WLo=i(ORe),Xie=n(ORe,"SPAN",{});var PUr=s(Xie);HLo=r(PUr,"AutoModelForTokenClassification"),PUr.forEach(t),ORe.forEach(t),Gke=i(f),Bo=n(f,"DIV",{class:!0});var Bs=s(Bo);T(JA.$$.fragment,Bs),ULo=i(Bs),ki=n(Bs,"P",{});var OU=s(ki);JLo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ej=n(OU,"A",{href:!0});var IUr=s(Ej);YLo=r(IUr,"from_pretrained()"),IUr.forEach(t),KLo=r(OU," class method or the "),Cj=n(OU,"A",{href:!0});var qUr=s(Cj);ZLo=r(qUr,"from_config()"),qUr.forEach(t),exo=r(OU,` class
method.`),OU.forEach(t),oxo=i(Bs),YA=n(Bs,"P",{});var VRe=s(YA);rxo=r(VRe,"This class cannot be instantiated directly using "),zie=n(VRe,"CODE",{});var NUr=s(zie);txo=r(NUr,"__init__()"),NUr.forEach(t),axo=r(VRe," (throws an error)."),VRe.forEach(t),nxo=i(Bs),st=n(Bs,"DIV",{class:!0});var n3=s(st);T(KA.$$.fragment,n3),sxo=i(n3),Qie=n(n3,"P",{});var jUr=s(Qie);lxo=r(jUr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jUr.forEach(t),ixo=i(n3),Si=n(n3,"P",{});var VU=s(Si);dxo=r(VU,`Note:
Loading a model from its configuration file does `),Wie=n(VU,"STRONG",{});var DUr=s(Wie);cxo=r(DUr,"not"),DUr.forEach(t),fxo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wj=n(VU,"A",{href:!0});var GUr=s(wj);mxo=r(GUr,"from_pretrained()"),GUr.forEach(t),gxo=r(VU," to load the model weights."),VU.forEach(t),hxo=i(n3),T(cb.$$.fragment,n3),n3.forEach(t),uxo=i(Bs),Ze=n(Bs,"DIV",{class:!0});var ta=s(Ze);T(ZA.$$.fragment,ta),pxo=i(ta),Hie=n(ta,"P",{});var OUr=s(Hie);_xo=r(OUr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OUr.forEach(t),vxo=i(ta),$a=n(ta,"P",{});var s3=s($a);bxo=r(s3,"The model class to instantiate is selected based on the "),Uie=n(s3,"CODE",{});var VUr=s(Uie);Fxo=r(VUr,"model_type"),VUr.forEach(t),Txo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Jie=n(s3,"CODE",{});var XUr=s(Jie);Mxo=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),Exo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=n(s3,"CODE",{});var zUr=s(Yie);Cxo=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),wxo=r(s3,":"),s3.forEach(t),Axo=i(ta),U=n(ta,"UL",{});var J=s(U);fb=n(J,"LI",{});var gAe=s(fb);Kie=n(gAe,"STRONG",{});var QUr=s(Kie);yxo=r(QUr,"albert"),QUr.forEach(t),Lxo=r(gAe," \u2014 "),Aj=n(gAe,"A",{href:!0});var WUr=s(Aj);xxo=r(WUr,"AlbertForTokenClassification"),WUr.forEach(t),$xo=r(gAe," (ALBERT model)"),gAe.forEach(t),kxo=i(J),mb=n(J,"LI",{});var hAe=s(mb);Zie=n(hAe,"STRONG",{});var HUr=s(Zie);Sxo=r(HUr,"bert"),HUr.forEach(t),Rxo=r(hAe," \u2014 "),yj=n(hAe,"A",{href:!0});var UUr=s(yj);Bxo=r(UUr,"BertForTokenClassification"),UUr.forEach(t),Pxo=r(hAe," (BERT model)"),hAe.forEach(t),Ixo=i(J),gb=n(J,"LI",{});var uAe=s(gb);ede=n(uAe,"STRONG",{});var JUr=s(ede);qxo=r(JUr,"big_bird"),JUr.forEach(t),Nxo=r(uAe," \u2014 "),Lj=n(uAe,"A",{href:!0});var YUr=s(Lj);jxo=r(YUr,"BigBirdForTokenClassification"),YUr.forEach(t),Dxo=r(uAe," (BigBird model)"),uAe.forEach(t),Gxo=i(J),hb=n(J,"LI",{});var pAe=s(hb);ode=n(pAe,"STRONG",{});var KUr=s(ode);Oxo=r(KUr,"camembert"),KUr.forEach(t),Vxo=r(pAe," \u2014 "),xj=n(pAe,"A",{href:!0});var ZUr=s(xj);Xxo=r(ZUr,"CamembertForTokenClassification"),ZUr.forEach(t),zxo=r(pAe," (CamemBERT model)"),pAe.forEach(t),Qxo=i(J),ub=n(J,"LI",{});var _Ae=s(ub);rde=n(_Ae,"STRONG",{});var eJr=s(rde);Wxo=r(eJr,"canine"),eJr.forEach(t),Hxo=r(_Ae," \u2014 "),$j=n(_Ae,"A",{href:!0});var oJr=s($j);Uxo=r(oJr,"CanineForTokenClassification"),oJr.forEach(t),Jxo=r(_Ae," (Canine model)"),_Ae.forEach(t),Yxo=i(J),pb=n(J,"LI",{});var vAe=s(pb);tde=n(vAe,"STRONG",{});var rJr=s(tde);Kxo=r(rJr,"convbert"),rJr.forEach(t),Zxo=r(vAe," \u2014 "),kj=n(vAe,"A",{href:!0});var tJr=s(kj);e7o=r(tJr,"ConvBertForTokenClassification"),tJr.forEach(t),o7o=r(vAe," (ConvBERT model)"),vAe.forEach(t),r7o=i(J),_b=n(J,"LI",{});var bAe=s(_b);ade=n(bAe,"STRONG",{});var aJr=s(ade);t7o=r(aJr,"data2vec-text"),aJr.forEach(t),a7o=r(bAe," \u2014 "),Sj=n(bAe,"A",{href:!0});var nJr=s(Sj);n7o=r(nJr,"Data2VecTextForTokenClassification"),nJr.forEach(t),s7o=r(bAe," (Data2VecText model)"),bAe.forEach(t),l7o=i(J),vb=n(J,"LI",{});var FAe=s(vb);nde=n(FAe,"STRONG",{});var sJr=s(nde);i7o=r(sJr,"deberta"),sJr.forEach(t),d7o=r(FAe," \u2014 "),Rj=n(FAe,"A",{href:!0});var lJr=s(Rj);c7o=r(lJr,"DebertaForTokenClassification"),lJr.forEach(t),f7o=r(FAe," (DeBERTa model)"),FAe.forEach(t),m7o=i(J),bb=n(J,"LI",{});var TAe=s(bb);sde=n(TAe,"STRONG",{});var iJr=s(sde);g7o=r(iJr,"deberta-v2"),iJr.forEach(t),h7o=r(TAe," \u2014 "),Bj=n(TAe,"A",{href:!0});var dJr=s(Bj);u7o=r(dJr,"DebertaV2ForTokenClassification"),dJr.forEach(t),p7o=r(TAe," (DeBERTa-v2 model)"),TAe.forEach(t),_7o=i(J),Fb=n(J,"LI",{});var MAe=s(Fb);lde=n(MAe,"STRONG",{});var cJr=s(lde);v7o=r(cJr,"distilbert"),cJr.forEach(t),b7o=r(MAe," \u2014 "),Pj=n(MAe,"A",{href:!0});var fJr=s(Pj);F7o=r(fJr,"DistilBertForTokenClassification"),fJr.forEach(t),T7o=r(MAe," (DistilBERT model)"),MAe.forEach(t),M7o=i(J),Tb=n(J,"LI",{});var EAe=s(Tb);ide=n(EAe,"STRONG",{});var mJr=s(ide);E7o=r(mJr,"electra"),mJr.forEach(t),C7o=r(EAe," \u2014 "),Ij=n(EAe,"A",{href:!0});var gJr=s(Ij);w7o=r(gJr,"ElectraForTokenClassification"),gJr.forEach(t),A7o=r(EAe," (ELECTRA model)"),EAe.forEach(t),y7o=i(J),Mb=n(J,"LI",{});var CAe=s(Mb);dde=n(CAe,"STRONG",{});var hJr=s(dde);L7o=r(hJr,"flaubert"),hJr.forEach(t),x7o=r(CAe," \u2014 "),qj=n(CAe,"A",{href:!0});var uJr=s(qj);$7o=r(uJr,"FlaubertForTokenClassification"),uJr.forEach(t),k7o=r(CAe," (FlauBERT model)"),CAe.forEach(t),S7o=i(J),Eb=n(J,"LI",{});var wAe=s(Eb);cde=n(wAe,"STRONG",{});var pJr=s(cde);R7o=r(pJr,"fnet"),pJr.forEach(t),B7o=r(wAe," \u2014 "),Nj=n(wAe,"A",{href:!0});var _Jr=s(Nj);P7o=r(_Jr,"FNetForTokenClassification"),_Jr.forEach(t),I7o=r(wAe," (FNet model)"),wAe.forEach(t),q7o=i(J),Cb=n(J,"LI",{});var AAe=s(Cb);fde=n(AAe,"STRONG",{});var vJr=s(fde);N7o=r(vJr,"funnel"),vJr.forEach(t),j7o=r(AAe," \u2014 "),jj=n(AAe,"A",{href:!0});var bJr=s(jj);D7o=r(bJr,"FunnelForTokenClassification"),bJr.forEach(t),G7o=r(AAe," (Funnel Transformer model)"),AAe.forEach(t),O7o=i(J),wb=n(J,"LI",{});var yAe=s(wb);mde=n(yAe,"STRONG",{});var FJr=s(mde);V7o=r(FJr,"gpt2"),FJr.forEach(t),X7o=r(yAe," \u2014 "),Dj=n(yAe,"A",{href:!0});var TJr=s(Dj);z7o=r(TJr,"GPT2ForTokenClassification"),TJr.forEach(t),Q7o=r(yAe," (OpenAI GPT-2 model)"),yAe.forEach(t),W7o=i(J),Ab=n(J,"LI",{});var LAe=s(Ab);gde=n(LAe,"STRONG",{});var MJr=s(gde);H7o=r(MJr,"ibert"),MJr.forEach(t),U7o=r(LAe," \u2014 "),Gj=n(LAe,"A",{href:!0});var EJr=s(Gj);J7o=r(EJr,"IBertForTokenClassification"),EJr.forEach(t),Y7o=r(LAe," (I-BERT model)"),LAe.forEach(t),K7o=i(J),yb=n(J,"LI",{});var xAe=s(yb);hde=n(xAe,"STRONG",{});var CJr=s(hde);Z7o=r(CJr,"layoutlm"),CJr.forEach(t),e9o=r(xAe," \u2014 "),Oj=n(xAe,"A",{href:!0});var wJr=s(Oj);o9o=r(wJr,"LayoutLMForTokenClassification"),wJr.forEach(t),r9o=r(xAe," (LayoutLM model)"),xAe.forEach(t),t9o=i(J),Lb=n(J,"LI",{});var $Ae=s(Lb);ude=n($Ae,"STRONG",{});var AJr=s(ude);a9o=r(AJr,"layoutlmv2"),AJr.forEach(t),n9o=r($Ae," \u2014 "),Vj=n($Ae,"A",{href:!0});var yJr=s(Vj);s9o=r(yJr,"LayoutLMv2ForTokenClassification"),yJr.forEach(t),l9o=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),i9o=i(J),xb=n(J,"LI",{});var kAe=s(xb);pde=n(kAe,"STRONG",{});var LJr=s(pde);d9o=r(LJr,"longformer"),LJr.forEach(t),c9o=r(kAe," \u2014 "),Xj=n(kAe,"A",{href:!0});var xJr=s(Xj);f9o=r(xJr,"LongformerForTokenClassification"),xJr.forEach(t),m9o=r(kAe," (Longformer model)"),kAe.forEach(t),g9o=i(J),$b=n(J,"LI",{});var SAe=s($b);_de=n(SAe,"STRONG",{});var $Jr=s(_de);h9o=r($Jr,"megatron-bert"),$Jr.forEach(t),u9o=r(SAe," \u2014 "),zj=n(SAe,"A",{href:!0});var kJr=s(zj);p9o=r(kJr,"MegatronBertForTokenClassification"),kJr.forEach(t),_9o=r(SAe," (MegatronBert model)"),SAe.forEach(t),v9o=i(J),kb=n(J,"LI",{});var RAe=s(kb);vde=n(RAe,"STRONG",{});var SJr=s(vde);b9o=r(SJr,"mobilebert"),SJr.forEach(t),F9o=r(RAe," \u2014 "),Qj=n(RAe,"A",{href:!0});var RJr=s(Qj);T9o=r(RJr,"MobileBertForTokenClassification"),RJr.forEach(t),M9o=r(RAe," (MobileBERT model)"),RAe.forEach(t),E9o=i(J),Sb=n(J,"LI",{});var BAe=s(Sb);bde=n(BAe,"STRONG",{});var BJr=s(bde);C9o=r(BJr,"mpnet"),BJr.forEach(t),w9o=r(BAe," \u2014 "),Wj=n(BAe,"A",{href:!0});var PJr=s(Wj);A9o=r(PJr,"MPNetForTokenClassification"),PJr.forEach(t),y9o=r(BAe," (MPNet model)"),BAe.forEach(t),L9o=i(J),Rb=n(J,"LI",{});var PAe=s(Rb);Fde=n(PAe,"STRONG",{});var IJr=s(Fde);x9o=r(IJr,"nystromformer"),IJr.forEach(t),$9o=r(PAe," \u2014 "),Hj=n(PAe,"A",{href:!0});var qJr=s(Hj);k9o=r(qJr,"NystromformerForTokenClassification"),qJr.forEach(t),S9o=r(PAe," (Nystromformer model)"),PAe.forEach(t),R9o=i(J),Bb=n(J,"LI",{});var IAe=s(Bb);Tde=n(IAe,"STRONG",{});var NJr=s(Tde);B9o=r(NJr,"qdqbert"),NJr.forEach(t),P9o=r(IAe," \u2014 "),Uj=n(IAe,"A",{href:!0});var jJr=s(Uj);I9o=r(jJr,"QDQBertForTokenClassification"),jJr.forEach(t),q9o=r(IAe," (QDQBert model)"),IAe.forEach(t),N9o=i(J),Pb=n(J,"LI",{});var qAe=s(Pb);Mde=n(qAe,"STRONG",{});var DJr=s(Mde);j9o=r(DJr,"rembert"),DJr.forEach(t),D9o=r(qAe," \u2014 "),Jj=n(qAe,"A",{href:!0});var GJr=s(Jj);G9o=r(GJr,"RemBertForTokenClassification"),GJr.forEach(t),O9o=r(qAe," (RemBERT model)"),qAe.forEach(t),V9o=i(J),Ib=n(J,"LI",{});var NAe=s(Ib);Ede=n(NAe,"STRONG",{});var OJr=s(Ede);X9o=r(OJr,"roberta"),OJr.forEach(t),z9o=r(NAe," \u2014 "),Yj=n(NAe,"A",{href:!0});var VJr=s(Yj);Q9o=r(VJr,"RobertaForTokenClassification"),VJr.forEach(t),W9o=r(NAe," (RoBERTa model)"),NAe.forEach(t),H9o=i(J),qb=n(J,"LI",{});var jAe=s(qb);Cde=n(jAe,"STRONG",{});var XJr=s(Cde);U9o=r(XJr,"roformer"),XJr.forEach(t),J9o=r(jAe," \u2014 "),Kj=n(jAe,"A",{href:!0});var zJr=s(Kj);Y9o=r(zJr,"RoFormerForTokenClassification"),zJr.forEach(t),K9o=r(jAe," (RoFormer model)"),jAe.forEach(t),Z9o=i(J),Nb=n(J,"LI",{});var DAe=s(Nb);wde=n(DAe,"STRONG",{});var QJr=s(wde);e$o=r(QJr,"squeezebert"),QJr.forEach(t),o$o=r(DAe," \u2014 "),Zj=n(DAe,"A",{href:!0});var WJr=s(Zj);r$o=r(WJr,"SqueezeBertForTokenClassification"),WJr.forEach(t),t$o=r(DAe," (SqueezeBERT model)"),DAe.forEach(t),a$o=i(J),jb=n(J,"LI",{});var GAe=s(jb);Ade=n(GAe,"STRONG",{});var HJr=s(Ade);n$o=r(HJr,"xlm"),HJr.forEach(t),s$o=r(GAe," \u2014 "),eD=n(GAe,"A",{href:!0});var UJr=s(eD);l$o=r(UJr,"XLMForTokenClassification"),UJr.forEach(t),i$o=r(GAe," (XLM model)"),GAe.forEach(t),d$o=i(J),Db=n(J,"LI",{});var OAe=s(Db);yde=n(OAe,"STRONG",{});var JJr=s(yde);c$o=r(JJr,"xlm-roberta"),JJr.forEach(t),f$o=r(OAe," \u2014 "),oD=n(OAe,"A",{href:!0});var YJr=s(oD);m$o=r(YJr,"XLMRobertaForTokenClassification"),YJr.forEach(t),g$o=r(OAe," (XLM-RoBERTa model)"),OAe.forEach(t),h$o=i(J),Gb=n(J,"LI",{});var VAe=s(Gb);Lde=n(VAe,"STRONG",{});var KJr=s(Lde);u$o=r(KJr,"xlm-roberta-xl"),KJr.forEach(t),p$o=r(VAe," \u2014 "),rD=n(VAe,"A",{href:!0});var ZJr=s(rD);_$o=r(ZJr,"XLMRobertaXLForTokenClassification"),ZJr.forEach(t),v$o=r(VAe," (XLM-RoBERTa-XL model)"),VAe.forEach(t),b$o=i(J),Ob=n(J,"LI",{});var XAe=s(Ob);xde=n(XAe,"STRONG",{});var eYr=s(xde);F$o=r(eYr,"xlnet"),eYr.forEach(t),T$o=r(XAe," \u2014 "),tD=n(XAe,"A",{href:!0});var oYr=s(tD);M$o=r(oYr,"XLNetForTokenClassification"),oYr.forEach(t),E$o=r(XAe," (XLNet model)"),XAe.forEach(t),C$o=i(J),Vb=n(J,"LI",{});var zAe=s(Vb);$de=n(zAe,"STRONG",{});var rYr=s($de);w$o=r(rYr,"yoso"),rYr.forEach(t),A$o=r(zAe," \u2014 "),aD=n(zAe,"A",{href:!0});var tYr=s(aD);y$o=r(tYr,"YosoForTokenClassification"),tYr.forEach(t),L$o=r(zAe," (YOSO model)"),zAe.forEach(t),J.forEach(t),x$o=i(ta),Xb=n(ta,"P",{});var QAe=s(Xb);$$o=r(QAe,"The model is set in evaluation mode by default using "),kde=n(QAe,"CODE",{});var aYr=s(kde);k$o=r(aYr,"model.eval()"),aYr.forEach(t),S$o=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(QAe,"CODE",{});var nYr=s(Sde);R$o=r(nYr,"model.train()"),nYr.forEach(t),QAe.forEach(t),B$o=i(ta),T(zb.$$.fragment,ta),ta.forEach(t),Bs.forEach(t),Oke=i(f),Ri=n(f,"H2",{class:!0});var XRe=s(Ri);Qb=n(XRe,"A",{id:!0,class:!0,href:!0});var sYr=s(Qb);Rde=n(sYr,"SPAN",{});var lYr=s(Rde);T(e6.$$.fragment,lYr),lYr.forEach(t),sYr.forEach(t),P$o=i(XRe),Bde=n(XRe,"SPAN",{});var iYr=s(Bde);I$o=r(iYr,"AutoModelForQuestionAnswering"),iYr.forEach(t),XRe.forEach(t),Vke=i(f),Po=n(f,"DIV",{class:!0});var Ps=s(Po);T(o6.$$.fragment,Ps),q$o=i(Ps),Bi=n(Ps,"P",{});var XU=s(Bi);N$o=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nD=n(XU,"A",{href:!0});var dYr=s(nD);j$o=r(dYr,"from_pretrained()"),dYr.forEach(t),D$o=r(XU," class method or the "),sD=n(XU,"A",{href:!0});var cYr=s(sD);G$o=r(cYr,"from_config()"),cYr.forEach(t),O$o=r(XU,` class
method.`),XU.forEach(t),V$o=i(Ps),r6=n(Ps,"P",{});var zRe=s(r6);X$o=r(zRe,"This class cannot be instantiated directly using "),Pde=n(zRe,"CODE",{});var fYr=s(Pde);z$o=r(fYr,"__init__()"),fYr.forEach(t),Q$o=r(zRe," (throws an error)."),zRe.forEach(t),W$o=i(Ps),lt=n(Ps,"DIV",{class:!0});var l3=s(lt);T(t6.$$.fragment,l3),H$o=i(l3),Ide=n(l3,"P",{});var mYr=s(Ide);U$o=r(mYr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mYr.forEach(t),J$o=i(l3),Pi=n(l3,"P",{});var zU=s(Pi);Y$o=r(zU,`Note:
Loading a model from its configuration file does `),qde=n(zU,"STRONG",{});var gYr=s(qde);K$o=r(gYr,"not"),gYr.forEach(t),Z$o=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(zU,"A",{href:!0});var hYr=s(lD);eko=r(hYr,"from_pretrained()"),hYr.forEach(t),oko=r(zU," to load the model weights."),zU.forEach(t),rko=i(l3),T(Wb.$$.fragment,l3),l3.forEach(t),tko=i(Ps),eo=n(Ps,"DIV",{class:!0});var aa=s(eo);T(a6.$$.fragment,aa),ako=i(aa),Nde=n(aa,"P",{});var uYr=s(Nde);nko=r(uYr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uYr.forEach(t),sko=i(aa),ka=n(aa,"P",{});var i3=s(ka);lko=r(i3,"The model class to instantiate is selected based on the "),jde=n(i3,"CODE",{});var pYr=s(jde);iko=r(pYr,"model_type"),pYr.forEach(t),dko=r(i3,` property of the config object (either
passed as an argument or loaded from `),Dde=n(i3,"CODE",{});var _Yr=s(Dde);cko=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),fko=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(i3,"CODE",{});var vYr=s(Gde);mko=r(vYr,"pretrained_model_name_or_path"),vYr.forEach(t),gko=r(i3,":"),i3.forEach(t),hko=i(aa),O=n(aa,"UL",{});var X=s(O);Hb=n(X,"LI",{});var WAe=s(Hb);Ode=n(WAe,"STRONG",{});var bYr=s(Ode);uko=r(bYr,"albert"),bYr.forEach(t),pko=r(WAe," \u2014 "),iD=n(WAe,"A",{href:!0});var FYr=s(iD);_ko=r(FYr,"AlbertForQuestionAnswering"),FYr.forEach(t),vko=r(WAe," (ALBERT model)"),WAe.forEach(t),bko=i(X),Ub=n(X,"LI",{});var HAe=s(Ub);Vde=n(HAe,"STRONG",{});var TYr=s(Vde);Fko=r(TYr,"bart"),TYr.forEach(t),Tko=r(HAe," \u2014 "),dD=n(HAe,"A",{href:!0});var MYr=s(dD);Mko=r(MYr,"BartForQuestionAnswering"),MYr.forEach(t),Eko=r(HAe," (BART model)"),HAe.forEach(t),Cko=i(X),Jb=n(X,"LI",{});var UAe=s(Jb);Xde=n(UAe,"STRONG",{});var EYr=s(Xde);wko=r(EYr,"bert"),EYr.forEach(t),Ako=r(UAe," \u2014 "),cD=n(UAe,"A",{href:!0});var CYr=s(cD);yko=r(CYr,"BertForQuestionAnswering"),CYr.forEach(t),Lko=r(UAe," (BERT model)"),UAe.forEach(t),xko=i(X),Yb=n(X,"LI",{});var JAe=s(Yb);zde=n(JAe,"STRONG",{});var wYr=s(zde);$ko=r(wYr,"big_bird"),wYr.forEach(t),kko=r(JAe," \u2014 "),fD=n(JAe,"A",{href:!0});var AYr=s(fD);Sko=r(AYr,"BigBirdForQuestionAnswering"),AYr.forEach(t),Rko=r(JAe," (BigBird model)"),JAe.forEach(t),Bko=i(X),Kb=n(X,"LI",{});var YAe=s(Kb);Qde=n(YAe,"STRONG",{});var yYr=s(Qde);Pko=r(yYr,"bigbird_pegasus"),yYr.forEach(t),Iko=r(YAe," \u2014 "),mD=n(YAe,"A",{href:!0});var LYr=s(mD);qko=r(LYr,"BigBirdPegasusForQuestionAnswering"),LYr.forEach(t),Nko=r(YAe," (BigBirdPegasus model)"),YAe.forEach(t),jko=i(X),Zb=n(X,"LI",{});var KAe=s(Zb);Wde=n(KAe,"STRONG",{});var xYr=s(Wde);Dko=r(xYr,"camembert"),xYr.forEach(t),Gko=r(KAe," \u2014 "),gD=n(KAe,"A",{href:!0});var $Yr=s(gD);Oko=r($Yr,"CamembertForQuestionAnswering"),$Yr.forEach(t),Vko=r(KAe," (CamemBERT model)"),KAe.forEach(t),Xko=i(X),e4=n(X,"LI",{});var ZAe=s(e4);Hde=n(ZAe,"STRONG",{});var kYr=s(Hde);zko=r(kYr,"canine"),kYr.forEach(t),Qko=r(ZAe," \u2014 "),hD=n(ZAe,"A",{href:!0});var SYr=s(hD);Wko=r(SYr,"CanineForQuestionAnswering"),SYr.forEach(t),Hko=r(ZAe," (Canine model)"),ZAe.forEach(t),Uko=i(X),o4=n(X,"LI",{});var e6e=s(o4);Ude=n(e6e,"STRONG",{});var RYr=s(Ude);Jko=r(RYr,"convbert"),RYr.forEach(t),Yko=r(e6e," \u2014 "),uD=n(e6e,"A",{href:!0});var BYr=s(uD);Kko=r(BYr,"ConvBertForQuestionAnswering"),BYr.forEach(t),Zko=r(e6e," (ConvBERT model)"),e6e.forEach(t),eSo=i(X),r4=n(X,"LI",{});var o6e=s(r4);Jde=n(o6e,"STRONG",{});var PYr=s(Jde);oSo=r(PYr,"data2vec-text"),PYr.forEach(t),rSo=r(o6e," \u2014 "),pD=n(o6e,"A",{href:!0});var IYr=s(pD);tSo=r(IYr,"Data2VecTextForQuestionAnswering"),IYr.forEach(t),aSo=r(o6e," (Data2VecText model)"),o6e.forEach(t),nSo=i(X),t4=n(X,"LI",{});var r6e=s(t4);Yde=n(r6e,"STRONG",{});var qYr=s(Yde);sSo=r(qYr,"deberta"),qYr.forEach(t),lSo=r(r6e," \u2014 "),_D=n(r6e,"A",{href:!0});var NYr=s(_D);iSo=r(NYr,"DebertaForQuestionAnswering"),NYr.forEach(t),dSo=r(r6e," (DeBERTa model)"),r6e.forEach(t),cSo=i(X),a4=n(X,"LI",{});var t6e=s(a4);Kde=n(t6e,"STRONG",{});var jYr=s(Kde);fSo=r(jYr,"deberta-v2"),jYr.forEach(t),mSo=r(t6e," \u2014 "),vD=n(t6e,"A",{href:!0});var DYr=s(vD);gSo=r(DYr,"DebertaV2ForQuestionAnswering"),DYr.forEach(t),hSo=r(t6e," (DeBERTa-v2 model)"),t6e.forEach(t),uSo=i(X),n4=n(X,"LI",{});var a6e=s(n4);Zde=n(a6e,"STRONG",{});var GYr=s(Zde);pSo=r(GYr,"distilbert"),GYr.forEach(t),_So=r(a6e," \u2014 "),bD=n(a6e,"A",{href:!0});var OYr=s(bD);vSo=r(OYr,"DistilBertForQuestionAnswering"),OYr.forEach(t),bSo=r(a6e," (DistilBERT model)"),a6e.forEach(t),FSo=i(X),s4=n(X,"LI",{});var n6e=s(s4);ece=n(n6e,"STRONG",{});var VYr=s(ece);TSo=r(VYr,"electra"),VYr.forEach(t),MSo=r(n6e," \u2014 "),FD=n(n6e,"A",{href:!0});var XYr=s(FD);ESo=r(XYr,"ElectraForQuestionAnswering"),XYr.forEach(t),CSo=r(n6e," (ELECTRA model)"),n6e.forEach(t),wSo=i(X),l4=n(X,"LI",{});var s6e=s(l4);oce=n(s6e,"STRONG",{});var zYr=s(oce);ASo=r(zYr,"flaubert"),zYr.forEach(t),ySo=r(s6e," \u2014 "),TD=n(s6e,"A",{href:!0});var QYr=s(TD);LSo=r(QYr,"FlaubertForQuestionAnsweringSimple"),QYr.forEach(t),xSo=r(s6e," (FlauBERT model)"),s6e.forEach(t),$So=i(X),i4=n(X,"LI",{});var l6e=s(i4);rce=n(l6e,"STRONG",{});var WYr=s(rce);kSo=r(WYr,"fnet"),WYr.forEach(t),SSo=r(l6e," \u2014 "),MD=n(l6e,"A",{href:!0});var HYr=s(MD);RSo=r(HYr,"FNetForQuestionAnswering"),HYr.forEach(t),BSo=r(l6e," (FNet model)"),l6e.forEach(t),PSo=i(X),d4=n(X,"LI",{});var i6e=s(d4);tce=n(i6e,"STRONG",{});var UYr=s(tce);ISo=r(UYr,"funnel"),UYr.forEach(t),qSo=r(i6e," \u2014 "),ED=n(i6e,"A",{href:!0});var JYr=s(ED);NSo=r(JYr,"FunnelForQuestionAnswering"),JYr.forEach(t),jSo=r(i6e," (Funnel Transformer model)"),i6e.forEach(t),DSo=i(X),c4=n(X,"LI",{});var d6e=s(c4);ace=n(d6e,"STRONG",{});var YYr=s(ace);GSo=r(YYr,"gptj"),YYr.forEach(t),OSo=r(d6e," \u2014 "),CD=n(d6e,"A",{href:!0});var KYr=s(CD);VSo=r(KYr,"GPTJForQuestionAnswering"),KYr.forEach(t),XSo=r(d6e," (GPT-J model)"),d6e.forEach(t),zSo=i(X),f4=n(X,"LI",{});var c6e=s(f4);nce=n(c6e,"STRONG",{});var ZYr=s(nce);QSo=r(ZYr,"ibert"),ZYr.forEach(t),WSo=r(c6e," \u2014 "),wD=n(c6e,"A",{href:!0});var eKr=s(wD);HSo=r(eKr,"IBertForQuestionAnswering"),eKr.forEach(t),USo=r(c6e," (I-BERT model)"),c6e.forEach(t),JSo=i(X),m4=n(X,"LI",{});var f6e=s(m4);sce=n(f6e,"STRONG",{});var oKr=s(sce);YSo=r(oKr,"layoutlmv2"),oKr.forEach(t),KSo=r(f6e," \u2014 "),AD=n(f6e,"A",{href:!0});var rKr=s(AD);ZSo=r(rKr,"LayoutLMv2ForQuestionAnswering"),rKr.forEach(t),eRo=r(f6e," (LayoutLMv2 model)"),f6e.forEach(t),oRo=i(X),g4=n(X,"LI",{});var m6e=s(g4);lce=n(m6e,"STRONG",{});var tKr=s(lce);rRo=r(tKr,"led"),tKr.forEach(t),tRo=r(m6e," \u2014 "),yD=n(m6e,"A",{href:!0});var aKr=s(yD);aRo=r(aKr,"LEDForQuestionAnswering"),aKr.forEach(t),nRo=r(m6e," (LED model)"),m6e.forEach(t),sRo=i(X),h4=n(X,"LI",{});var g6e=s(h4);ice=n(g6e,"STRONG",{});var nKr=s(ice);lRo=r(nKr,"longformer"),nKr.forEach(t),iRo=r(g6e," \u2014 "),LD=n(g6e,"A",{href:!0});var sKr=s(LD);dRo=r(sKr,"LongformerForQuestionAnswering"),sKr.forEach(t),cRo=r(g6e," (Longformer model)"),g6e.forEach(t),fRo=i(X),u4=n(X,"LI",{});var h6e=s(u4);dce=n(h6e,"STRONG",{});var lKr=s(dce);mRo=r(lKr,"lxmert"),lKr.forEach(t),gRo=r(h6e," \u2014 "),xD=n(h6e,"A",{href:!0});var iKr=s(xD);hRo=r(iKr,"LxmertForQuestionAnswering"),iKr.forEach(t),uRo=r(h6e," (LXMERT model)"),h6e.forEach(t),pRo=i(X),p4=n(X,"LI",{});var u6e=s(p4);cce=n(u6e,"STRONG",{});var dKr=s(cce);_Ro=r(dKr,"mbart"),dKr.forEach(t),vRo=r(u6e," \u2014 "),$D=n(u6e,"A",{href:!0});var cKr=s($D);bRo=r(cKr,"MBartForQuestionAnswering"),cKr.forEach(t),FRo=r(u6e," (mBART model)"),u6e.forEach(t),TRo=i(X),_4=n(X,"LI",{});var p6e=s(_4);fce=n(p6e,"STRONG",{});var fKr=s(fce);MRo=r(fKr,"megatron-bert"),fKr.forEach(t),ERo=r(p6e," \u2014 "),kD=n(p6e,"A",{href:!0});var mKr=s(kD);CRo=r(mKr,"MegatronBertForQuestionAnswering"),mKr.forEach(t),wRo=r(p6e," (MegatronBert model)"),p6e.forEach(t),ARo=i(X),v4=n(X,"LI",{});var _6e=s(v4);mce=n(_6e,"STRONG",{});var gKr=s(mce);yRo=r(gKr,"mobilebert"),gKr.forEach(t),LRo=r(_6e," \u2014 "),SD=n(_6e,"A",{href:!0});var hKr=s(SD);xRo=r(hKr,"MobileBertForQuestionAnswering"),hKr.forEach(t),$Ro=r(_6e," (MobileBERT model)"),_6e.forEach(t),kRo=i(X),b4=n(X,"LI",{});var v6e=s(b4);gce=n(v6e,"STRONG",{});var uKr=s(gce);SRo=r(uKr,"mpnet"),uKr.forEach(t),RRo=r(v6e," \u2014 "),RD=n(v6e,"A",{href:!0});var pKr=s(RD);BRo=r(pKr,"MPNetForQuestionAnswering"),pKr.forEach(t),PRo=r(v6e," (MPNet model)"),v6e.forEach(t),IRo=i(X),F4=n(X,"LI",{});var b6e=s(F4);hce=n(b6e,"STRONG",{});var _Kr=s(hce);qRo=r(_Kr,"nystromformer"),_Kr.forEach(t),NRo=r(b6e," \u2014 "),BD=n(b6e,"A",{href:!0});var vKr=s(BD);jRo=r(vKr,"NystromformerForQuestionAnswering"),vKr.forEach(t),DRo=r(b6e," (Nystromformer model)"),b6e.forEach(t),GRo=i(X),T4=n(X,"LI",{});var F6e=s(T4);uce=n(F6e,"STRONG",{});var bKr=s(uce);ORo=r(bKr,"qdqbert"),bKr.forEach(t),VRo=r(F6e," \u2014 "),PD=n(F6e,"A",{href:!0});var FKr=s(PD);XRo=r(FKr,"QDQBertForQuestionAnswering"),FKr.forEach(t),zRo=r(F6e," (QDQBert model)"),F6e.forEach(t),QRo=i(X),M4=n(X,"LI",{});var T6e=s(M4);pce=n(T6e,"STRONG",{});var TKr=s(pce);WRo=r(TKr,"reformer"),TKr.forEach(t),HRo=r(T6e," \u2014 "),ID=n(T6e,"A",{href:!0});var MKr=s(ID);URo=r(MKr,"ReformerForQuestionAnswering"),MKr.forEach(t),JRo=r(T6e," (Reformer model)"),T6e.forEach(t),YRo=i(X),E4=n(X,"LI",{});var M6e=s(E4);_ce=n(M6e,"STRONG",{});var EKr=s(_ce);KRo=r(EKr,"rembert"),EKr.forEach(t),ZRo=r(M6e," \u2014 "),qD=n(M6e,"A",{href:!0});var CKr=s(qD);eBo=r(CKr,"RemBertForQuestionAnswering"),CKr.forEach(t),oBo=r(M6e," (RemBERT model)"),M6e.forEach(t),rBo=i(X),C4=n(X,"LI",{});var E6e=s(C4);vce=n(E6e,"STRONG",{});var wKr=s(vce);tBo=r(wKr,"roberta"),wKr.forEach(t),aBo=r(E6e," \u2014 "),ND=n(E6e,"A",{href:!0});var AKr=s(ND);nBo=r(AKr,"RobertaForQuestionAnswering"),AKr.forEach(t),sBo=r(E6e," (RoBERTa model)"),E6e.forEach(t),lBo=i(X),w4=n(X,"LI",{});var C6e=s(w4);bce=n(C6e,"STRONG",{});var yKr=s(bce);iBo=r(yKr,"roformer"),yKr.forEach(t),dBo=r(C6e," \u2014 "),jD=n(C6e,"A",{href:!0});var LKr=s(jD);cBo=r(LKr,"RoFormerForQuestionAnswering"),LKr.forEach(t),fBo=r(C6e," (RoFormer model)"),C6e.forEach(t),mBo=i(X),A4=n(X,"LI",{});var w6e=s(A4);Fce=n(w6e,"STRONG",{});var xKr=s(Fce);gBo=r(xKr,"splinter"),xKr.forEach(t),hBo=r(w6e," \u2014 "),DD=n(w6e,"A",{href:!0});var $Kr=s(DD);uBo=r($Kr,"SplinterForQuestionAnswering"),$Kr.forEach(t),pBo=r(w6e," (Splinter model)"),w6e.forEach(t),_Bo=i(X),y4=n(X,"LI",{});var A6e=s(y4);Tce=n(A6e,"STRONG",{});var kKr=s(Tce);vBo=r(kKr,"squeezebert"),kKr.forEach(t),bBo=r(A6e," \u2014 "),GD=n(A6e,"A",{href:!0});var SKr=s(GD);FBo=r(SKr,"SqueezeBertForQuestionAnswering"),SKr.forEach(t),TBo=r(A6e," (SqueezeBERT model)"),A6e.forEach(t),MBo=i(X),L4=n(X,"LI",{});var y6e=s(L4);Mce=n(y6e,"STRONG",{});var RKr=s(Mce);EBo=r(RKr,"xlm"),RKr.forEach(t),CBo=r(y6e," \u2014 "),OD=n(y6e,"A",{href:!0});var BKr=s(OD);wBo=r(BKr,"XLMForQuestionAnsweringSimple"),BKr.forEach(t),ABo=r(y6e," (XLM model)"),y6e.forEach(t),yBo=i(X),x4=n(X,"LI",{});var L6e=s(x4);Ece=n(L6e,"STRONG",{});var PKr=s(Ece);LBo=r(PKr,"xlm-roberta"),PKr.forEach(t),xBo=r(L6e," \u2014 "),VD=n(L6e,"A",{href:!0});var IKr=s(VD);$Bo=r(IKr,"XLMRobertaForQuestionAnswering"),IKr.forEach(t),kBo=r(L6e," (XLM-RoBERTa model)"),L6e.forEach(t),SBo=i(X),$4=n(X,"LI",{});var x6e=s($4);Cce=n(x6e,"STRONG",{});var qKr=s(Cce);RBo=r(qKr,"xlm-roberta-xl"),qKr.forEach(t),BBo=r(x6e," \u2014 "),XD=n(x6e,"A",{href:!0});var NKr=s(XD);PBo=r(NKr,"XLMRobertaXLForQuestionAnswering"),NKr.forEach(t),IBo=r(x6e," (XLM-RoBERTa-XL model)"),x6e.forEach(t),qBo=i(X),k4=n(X,"LI",{});var $6e=s(k4);wce=n($6e,"STRONG",{});var jKr=s(wce);NBo=r(jKr,"xlnet"),jKr.forEach(t),jBo=r($6e," \u2014 "),zD=n($6e,"A",{href:!0});var DKr=s(zD);DBo=r(DKr,"XLNetForQuestionAnsweringSimple"),DKr.forEach(t),GBo=r($6e," (XLNet model)"),$6e.forEach(t),OBo=i(X),S4=n(X,"LI",{});var k6e=s(S4);Ace=n(k6e,"STRONG",{});var GKr=s(Ace);VBo=r(GKr,"yoso"),GKr.forEach(t),XBo=r(k6e," \u2014 "),QD=n(k6e,"A",{href:!0});var OKr=s(QD);zBo=r(OKr,"YosoForQuestionAnswering"),OKr.forEach(t),QBo=r(k6e," (YOSO model)"),k6e.forEach(t),X.forEach(t),WBo=i(aa),R4=n(aa,"P",{});var S6e=s(R4);HBo=r(S6e,"The model is set in evaluation mode by default using "),yce=n(S6e,"CODE",{});var VKr=s(yce);UBo=r(VKr,"model.eval()"),VKr.forEach(t),JBo=r(S6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(S6e,"CODE",{});var XKr=s(Lce);YBo=r(XKr,"model.train()"),XKr.forEach(t),S6e.forEach(t),KBo=i(aa),T(B4.$$.fragment,aa),aa.forEach(t),Ps.forEach(t),Xke=i(f),Ii=n(f,"H2",{class:!0});var QRe=s(Ii);P4=n(QRe,"A",{id:!0,class:!0,href:!0});var zKr=s(P4);xce=n(zKr,"SPAN",{});var QKr=s(xce);T(n6.$$.fragment,QKr),QKr.forEach(t),zKr.forEach(t),ZBo=i(QRe),$ce=n(QRe,"SPAN",{});var WKr=s($ce);ePo=r(WKr,"AutoModelForTableQuestionAnswering"),WKr.forEach(t),QRe.forEach(t),zke=i(f),Io=n(f,"DIV",{class:!0});var Is=s(Io);T(s6.$$.fragment,Is),oPo=i(Is),qi=n(Is,"P",{});var QU=s(qi);rPo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),WD=n(QU,"A",{href:!0});var HKr=s(WD);tPo=r(HKr,"from_pretrained()"),HKr.forEach(t),aPo=r(QU," class method or the "),HD=n(QU,"A",{href:!0});var UKr=s(HD);nPo=r(UKr,"from_config()"),UKr.forEach(t),sPo=r(QU,` class
method.`),QU.forEach(t),lPo=i(Is),l6=n(Is,"P",{});var WRe=s(l6);iPo=r(WRe,"This class cannot be instantiated directly using "),kce=n(WRe,"CODE",{});var JKr=s(kce);dPo=r(JKr,"__init__()"),JKr.forEach(t),cPo=r(WRe," (throws an error)."),WRe.forEach(t),fPo=i(Is),it=n(Is,"DIV",{class:!0});var d3=s(it);T(i6.$$.fragment,d3),mPo=i(d3),Sce=n(d3,"P",{});var YKr=s(Sce);gPo=r(YKr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YKr.forEach(t),hPo=i(d3),Ni=n(d3,"P",{});var WU=s(Ni);uPo=r(WU,`Note:
Loading a model from its configuration file does `),Rce=n(WU,"STRONG",{});var KKr=s(Rce);pPo=r(KKr,"not"),KKr.forEach(t),_Po=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(WU,"A",{href:!0});var ZKr=s(UD);vPo=r(ZKr,"from_pretrained()"),ZKr.forEach(t),bPo=r(WU," to load the model weights."),WU.forEach(t),FPo=i(d3),T(I4.$$.fragment,d3),d3.forEach(t),TPo=i(Is),oo=n(Is,"DIV",{class:!0});var na=s(oo);T(d6.$$.fragment,na),MPo=i(na),Bce=n(na,"P",{});var eZr=s(Bce);EPo=r(eZr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eZr.forEach(t),CPo=i(na),Sa=n(na,"P",{});var c3=s(Sa);wPo=r(c3,"The model class to instantiate is selected based on the "),Pce=n(c3,"CODE",{});var oZr=s(Pce);APo=r(oZr,"model_type"),oZr.forEach(t),yPo=r(c3,` property of the config object (either
passed as an argument or loaded from `),Ice=n(c3,"CODE",{});var rZr=s(Ice);LPo=r(rZr,"pretrained_model_name_or_path"),rZr.forEach(t),xPo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(c3,"CODE",{});var tZr=s(qce);$Po=r(tZr,"pretrained_model_name_or_path"),tZr.forEach(t),kPo=r(c3,":"),c3.forEach(t),SPo=i(na),Nce=n(na,"UL",{});var aZr=s(Nce);q4=n(aZr,"LI",{});var R6e=s(q4);jce=n(R6e,"STRONG",{});var nZr=s(jce);RPo=r(nZr,"tapas"),nZr.forEach(t),BPo=r(R6e," \u2014 "),JD=n(R6e,"A",{href:!0});var sZr=s(JD);PPo=r(sZr,"TapasForQuestionAnswering"),sZr.forEach(t),IPo=r(R6e," (TAPAS model)"),R6e.forEach(t),aZr.forEach(t),qPo=i(na),N4=n(na,"P",{});var B6e=s(N4);NPo=r(B6e,"The model is set in evaluation mode by default using "),Dce=n(B6e,"CODE",{});var lZr=s(Dce);jPo=r(lZr,"model.eval()"),lZr.forEach(t),DPo=r(B6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(B6e,"CODE",{});var iZr=s(Gce);GPo=r(iZr,"model.train()"),iZr.forEach(t),B6e.forEach(t),OPo=i(na),T(j4.$$.fragment,na),na.forEach(t),Is.forEach(t),Qke=i(f),ji=n(f,"H2",{class:!0});var HRe=s(ji);D4=n(HRe,"A",{id:!0,class:!0,href:!0});var dZr=s(D4);Oce=n(dZr,"SPAN",{});var cZr=s(Oce);T(c6.$$.fragment,cZr),cZr.forEach(t),dZr.forEach(t),VPo=i(HRe),Vce=n(HRe,"SPAN",{});var fZr=s(Vce);XPo=r(fZr,"AutoModelForImageClassification"),fZr.forEach(t),HRe.forEach(t),Wke=i(f),qo=n(f,"DIV",{class:!0});var qs=s(qo);T(f6.$$.fragment,qs),zPo=i(qs),Di=n(qs,"P",{});var HU=s(Di);QPo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YD=n(HU,"A",{href:!0});var mZr=s(YD);WPo=r(mZr,"from_pretrained()"),mZr.forEach(t),HPo=r(HU," class method or the "),KD=n(HU,"A",{href:!0});var gZr=s(KD);UPo=r(gZr,"from_config()"),gZr.forEach(t),JPo=r(HU,` class
method.`),HU.forEach(t),YPo=i(qs),m6=n(qs,"P",{});var URe=s(m6);KPo=r(URe,"This class cannot be instantiated directly using "),Xce=n(URe,"CODE",{});var hZr=s(Xce);ZPo=r(hZr,"__init__()"),hZr.forEach(t),eIo=r(URe," (throws an error)."),URe.forEach(t),oIo=i(qs),dt=n(qs,"DIV",{class:!0});var f3=s(dt);T(g6.$$.fragment,f3),rIo=i(f3),zce=n(f3,"P",{});var uZr=s(zce);tIo=r(uZr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uZr.forEach(t),aIo=i(f3),Gi=n(f3,"P",{});var UU=s(Gi);nIo=r(UU,`Note:
Loading a model from its configuration file does `),Qce=n(UU,"STRONG",{});var pZr=s(Qce);sIo=r(pZr,"not"),pZr.forEach(t),lIo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(UU,"A",{href:!0});var _Zr=s(ZD);iIo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),dIo=r(UU," to load the model weights."),UU.forEach(t),cIo=i(f3),T(G4.$$.fragment,f3),f3.forEach(t),fIo=i(qs),ro=n(qs,"DIV",{class:!0});var sa=s(ro);T(h6.$$.fragment,sa),mIo=i(sa),Wce=n(sa,"P",{});var vZr=s(Wce);gIo=r(vZr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vZr.forEach(t),hIo=i(sa),Ra=n(sa,"P",{});var m3=s(Ra);uIo=r(m3,"The model class to instantiate is selected based on the "),Hce=n(m3,"CODE",{});var bZr=s(Hce);pIo=r(bZr,"model_type"),bZr.forEach(t),_Io=r(m3,` property of the config object (either
passed as an argument or loaded from `),Uce=n(m3,"CODE",{});var FZr=s(Uce);vIo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),bIo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=n(m3,"CODE",{});var TZr=s(Jce);FIo=r(TZr,"pretrained_model_name_or_path"),TZr.forEach(t),TIo=r(m3,":"),m3.forEach(t),MIo=i(sa),Fe=n(sa,"UL",{});var Le=s(Fe);O4=n(Le,"LI",{});var P6e=s(O4);Yce=n(P6e,"STRONG",{});var MZr=s(Yce);EIo=r(MZr,"beit"),MZr.forEach(t),CIo=r(P6e," \u2014 "),eG=n(P6e,"A",{href:!0});var EZr=s(eG);wIo=r(EZr,"BeitForImageClassification"),EZr.forEach(t),AIo=r(P6e," (BEiT model)"),P6e.forEach(t),yIo=i(Le),V4=n(Le,"LI",{});var I6e=s(V4);Kce=n(I6e,"STRONG",{});var CZr=s(Kce);LIo=r(CZr,"convnext"),CZr.forEach(t),xIo=r(I6e," \u2014 "),oG=n(I6e,"A",{href:!0});var wZr=s(oG);$Io=r(wZr,"ConvNextForImageClassification"),wZr.forEach(t),kIo=r(I6e," (ConvNext model)"),I6e.forEach(t),SIo=i(Le),bs=n(Le,"LI",{});var N7=s(bs);Zce=n(N7,"STRONG",{});var AZr=s(Zce);RIo=r(AZr,"deit"),AZr.forEach(t),BIo=r(N7," \u2014 "),rG=n(N7,"A",{href:!0});var yZr=s(rG);PIo=r(yZr,"DeiTForImageClassification"),yZr.forEach(t),IIo=r(N7," or "),tG=n(N7,"A",{href:!0});var LZr=s(tG);qIo=r(LZr,"DeiTForImageClassificationWithTeacher"),LZr.forEach(t),NIo=r(N7," (DeiT model)"),N7.forEach(t),jIo=i(Le),X4=n(Le,"LI",{});var q6e=s(X4);efe=n(q6e,"STRONG",{});var xZr=s(efe);DIo=r(xZr,"imagegpt"),xZr.forEach(t),GIo=r(q6e," \u2014 "),aG=n(q6e,"A",{href:!0});var $Zr=s(aG);OIo=r($Zr,"ImageGPTForImageClassification"),$Zr.forEach(t),VIo=r(q6e," (ImageGPT model)"),q6e.forEach(t),XIo=i(Le),ct=n(Le,"LI",{});var Qc=s(ct);ofe=n(Qc,"STRONG",{});var kZr=s(ofe);zIo=r(kZr,"perceiver"),kZr.forEach(t),QIo=r(Qc," \u2014 "),nG=n(Qc,"A",{href:!0});var SZr=s(nG);WIo=r(SZr,"PerceiverForImageClassificationLearned"),SZr.forEach(t),HIo=r(Qc," or "),sG=n(Qc,"A",{href:!0});var RZr=s(sG);UIo=r(RZr,"PerceiverForImageClassificationFourier"),RZr.forEach(t),JIo=r(Qc," or "),lG=n(Qc,"A",{href:!0});var BZr=s(lG);YIo=r(BZr,"PerceiverForImageClassificationConvProcessing"),BZr.forEach(t),KIo=r(Qc," (Perceiver model)"),Qc.forEach(t),ZIo=i(Le),z4=n(Le,"LI",{});var N6e=s(z4);rfe=n(N6e,"STRONG",{});var PZr=s(rfe);eqo=r(PZr,"poolformer"),PZr.forEach(t),oqo=r(N6e," \u2014 "),iG=n(N6e,"A",{href:!0});var IZr=s(iG);rqo=r(IZr,"PoolFormerForImageClassification"),IZr.forEach(t),tqo=r(N6e," (PoolFormer model)"),N6e.forEach(t),aqo=i(Le),Q4=n(Le,"LI",{});var j6e=s(Q4);tfe=n(j6e,"STRONG",{});var qZr=s(tfe);nqo=r(qZr,"resnet"),qZr.forEach(t),sqo=r(j6e," \u2014 "),dG=n(j6e,"A",{href:!0});var NZr=s(dG);lqo=r(NZr,"ResNetForImageClassification"),NZr.forEach(t),iqo=r(j6e," (ResNet model)"),j6e.forEach(t),dqo=i(Le),W4=n(Le,"LI",{});var D6e=s(W4);afe=n(D6e,"STRONG",{});var jZr=s(afe);cqo=r(jZr,"segformer"),jZr.forEach(t),fqo=r(D6e," \u2014 "),cG=n(D6e,"A",{href:!0});var DZr=s(cG);mqo=r(DZr,"SegformerForImageClassification"),DZr.forEach(t),gqo=r(D6e," (SegFormer model)"),D6e.forEach(t),hqo=i(Le),H4=n(Le,"LI",{});var G6e=s(H4);nfe=n(G6e,"STRONG",{});var GZr=s(nfe);uqo=r(GZr,"swin"),GZr.forEach(t),pqo=r(G6e," \u2014 "),fG=n(G6e,"A",{href:!0});var OZr=s(fG);_qo=r(OZr,"SwinForImageClassification"),OZr.forEach(t),vqo=r(G6e," (Swin model)"),G6e.forEach(t),bqo=i(Le),U4=n(Le,"LI",{});var O6e=s(U4);sfe=n(O6e,"STRONG",{});var VZr=s(sfe);Fqo=r(VZr,"van"),VZr.forEach(t),Tqo=r(O6e," \u2014 "),mG=n(O6e,"A",{href:!0});var XZr=s(mG);Mqo=r(XZr,"VanForImageClassification"),XZr.forEach(t),Eqo=r(O6e," (VAN model)"),O6e.forEach(t),Cqo=i(Le),J4=n(Le,"LI",{});var V6e=s(J4);lfe=n(V6e,"STRONG",{});var zZr=s(lfe);wqo=r(zZr,"vit"),zZr.forEach(t),Aqo=r(V6e," \u2014 "),gG=n(V6e,"A",{href:!0});var QZr=s(gG);yqo=r(QZr,"ViTForImageClassification"),QZr.forEach(t),Lqo=r(V6e," (ViT model)"),V6e.forEach(t),Le.forEach(t),xqo=i(sa),Y4=n(sa,"P",{});var X6e=s(Y4);$qo=r(X6e,"The model is set in evaluation mode by default using "),ife=n(X6e,"CODE",{});var WZr=s(ife);kqo=r(WZr,"model.eval()"),WZr.forEach(t),Sqo=r(X6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(X6e,"CODE",{});var HZr=s(dfe);Rqo=r(HZr,"model.train()"),HZr.forEach(t),X6e.forEach(t),Bqo=i(sa),T(K4.$$.fragment,sa),sa.forEach(t),qs.forEach(t),Hke=i(f),Oi=n(f,"H2",{class:!0});var JRe=s(Oi);Z4=n(JRe,"A",{id:!0,class:!0,href:!0});var UZr=s(Z4);cfe=n(UZr,"SPAN",{});var JZr=s(cfe);T(u6.$$.fragment,JZr),JZr.forEach(t),UZr.forEach(t),Pqo=i(JRe),ffe=n(JRe,"SPAN",{});var YZr=s(ffe);Iqo=r(YZr,"AutoModelForVision2Seq"),YZr.forEach(t),JRe.forEach(t),Uke=i(f),No=n(f,"DIV",{class:!0});var Ns=s(No);T(p6.$$.fragment,Ns),qqo=i(Ns),Vi=n(Ns,"P",{});var JU=s(Vi);Nqo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hG=n(JU,"A",{href:!0});var KZr=s(hG);jqo=r(KZr,"from_pretrained()"),KZr.forEach(t),Dqo=r(JU," class method or the "),uG=n(JU,"A",{href:!0});var ZZr=s(uG);Gqo=r(ZZr,"from_config()"),ZZr.forEach(t),Oqo=r(JU,` class
method.`),JU.forEach(t),Vqo=i(Ns),_6=n(Ns,"P",{});var YRe=s(_6);Xqo=r(YRe,"This class cannot be instantiated directly using "),mfe=n(YRe,"CODE",{});var eet=s(mfe);zqo=r(eet,"__init__()"),eet.forEach(t),Qqo=r(YRe," (throws an error)."),YRe.forEach(t),Wqo=i(Ns),ft=n(Ns,"DIV",{class:!0});var g3=s(ft);T(v6.$$.fragment,g3),Hqo=i(g3),gfe=n(g3,"P",{});var oet=s(gfe);Uqo=r(oet,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oet.forEach(t),Jqo=i(g3),Xi=n(g3,"P",{});var YU=s(Xi);Yqo=r(YU,`Note:
Loading a model from its configuration file does `),hfe=n(YU,"STRONG",{});var ret=s(hfe);Kqo=r(ret,"not"),ret.forEach(t),Zqo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(YU,"A",{href:!0});var tet=s(pG);eNo=r(tet,"from_pretrained()"),tet.forEach(t),oNo=r(YU," to load the model weights."),YU.forEach(t),rNo=i(g3),T(e2.$$.fragment,g3),g3.forEach(t),tNo=i(Ns),to=n(Ns,"DIV",{class:!0});var la=s(to);T(b6.$$.fragment,la),aNo=i(la),ufe=n(la,"P",{});var aet=s(ufe);nNo=r(aet,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aet.forEach(t),sNo=i(la),Ba=n(la,"P",{});var h3=s(Ba);lNo=r(h3,"The model class to instantiate is selected based on the "),pfe=n(h3,"CODE",{});var net=s(pfe);iNo=r(net,"model_type"),net.forEach(t),dNo=r(h3,` property of the config object (either
passed as an argument or loaded from `),_fe=n(h3,"CODE",{});var set=s(_fe);cNo=r(set,"pretrained_model_name_or_path"),set.forEach(t),fNo=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(h3,"CODE",{});var iet=s(vfe);mNo=r(iet,"pretrained_model_name_or_path"),iet.forEach(t),gNo=r(h3,":"),h3.forEach(t),hNo=i(la),bfe=n(la,"UL",{});var det=s(bfe);o2=n(det,"LI",{});var z6e=s(o2);Ffe=n(z6e,"STRONG",{});var cet=s(Ffe);uNo=r(cet,"vision-encoder-decoder"),cet.forEach(t),pNo=r(z6e," \u2014 "),_G=n(z6e,"A",{href:!0});var fet=s(_G);_No=r(fet,"VisionEncoderDecoderModel"),fet.forEach(t),vNo=r(z6e," (Vision Encoder decoder model)"),z6e.forEach(t),det.forEach(t),bNo=i(la),r2=n(la,"P",{});var Q6e=s(r2);FNo=r(Q6e,"The model is set in evaluation mode by default using "),Tfe=n(Q6e,"CODE",{});var met=s(Tfe);TNo=r(met,"model.eval()"),met.forEach(t),MNo=r(Q6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(Q6e,"CODE",{});var get=s(Mfe);ENo=r(get,"model.train()"),get.forEach(t),Q6e.forEach(t),CNo=i(la),T(t2.$$.fragment,la),la.forEach(t),Ns.forEach(t),Jke=i(f),zi=n(f,"H2",{class:!0});var KRe=s(zi);a2=n(KRe,"A",{id:!0,class:!0,href:!0});var het=s(a2);Efe=n(het,"SPAN",{});var uet=s(Efe);T(F6.$$.fragment,uet),uet.forEach(t),het.forEach(t),wNo=i(KRe),Cfe=n(KRe,"SPAN",{});var pet=s(Cfe);ANo=r(pet,"AutoModelForAudioClassification"),pet.forEach(t),KRe.forEach(t),Yke=i(f),jo=n(f,"DIV",{class:!0});var js=s(jo);T(T6.$$.fragment,js),yNo=i(js),Qi=n(js,"P",{});var KU=s(Qi);LNo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vG=n(KU,"A",{href:!0});var _et=s(vG);xNo=r(_et,"from_pretrained()"),_et.forEach(t),$No=r(KU," class method or the "),bG=n(KU,"A",{href:!0});var vet=s(bG);kNo=r(vet,"from_config()"),vet.forEach(t),SNo=r(KU,` class
method.`),KU.forEach(t),RNo=i(js),M6=n(js,"P",{});var ZRe=s(M6);BNo=r(ZRe,"This class cannot be instantiated directly using "),wfe=n(ZRe,"CODE",{});var bet=s(wfe);PNo=r(bet,"__init__()"),bet.forEach(t),INo=r(ZRe," (throws an error)."),ZRe.forEach(t),qNo=i(js),mt=n(js,"DIV",{class:!0});var u3=s(mt);T(E6.$$.fragment,u3),NNo=i(u3),Afe=n(u3,"P",{});var Fet=s(Afe);jNo=r(Fet,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Fet.forEach(t),DNo=i(u3),Wi=n(u3,"P",{});var ZU=s(Wi);GNo=r(ZU,`Note:
Loading a model from its configuration file does `),yfe=n(ZU,"STRONG",{});var Tet=s(yfe);ONo=r(Tet,"not"),Tet.forEach(t),VNo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(ZU,"A",{href:!0});var Met=s(FG);XNo=r(Met,"from_pretrained()"),Met.forEach(t),zNo=r(ZU," to load the model weights."),ZU.forEach(t),QNo=i(u3),T(n2.$$.fragment,u3),u3.forEach(t),WNo=i(js),ao=n(js,"DIV",{class:!0});var ia=s(ao);T(C6.$$.fragment,ia),HNo=i(ia),Lfe=n(ia,"P",{});var Eet=s(Lfe);UNo=r(Eet,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Eet.forEach(t),JNo=i(ia),Pa=n(ia,"P",{});var p3=s(Pa);YNo=r(p3,"The model class to instantiate is selected based on the "),xfe=n(p3,"CODE",{});var Cet=s(xfe);KNo=r(Cet,"model_type"),Cet.forEach(t),ZNo=r(p3,` property of the config object (either
passed as an argument or loaded from `),$fe=n(p3,"CODE",{});var wet=s($fe);ejo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),ojo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(p3,"CODE",{});var Aet=s(kfe);rjo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),tjo=r(p3,":"),p3.forEach(t),ajo=i(ia),Ie=n(ia,"UL",{});var po=s(Ie);s2=n(po,"LI",{});var W6e=s(s2);Sfe=n(W6e,"STRONG",{});var yet=s(Sfe);njo=r(yet,"data2vec-audio"),yet.forEach(t),sjo=r(W6e," \u2014 "),TG=n(W6e,"A",{href:!0});var Let=s(TG);ljo=r(Let,"Data2VecAudioForSequenceClassification"),Let.forEach(t),ijo=r(W6e," (Data2VecAudio model)"),W6e.forEach(t),djo=i(po),l2=n(po,"LI",{});var H6e=s(l2);Rfe=n(H6e,"STRONG",{});var xet=s(Rfe);cjo=r(xet,"hubert"),xet.forEach(t),fjo=r(H6e," \u2014 "),MG=n(H6e,"A",{href:!0});var $et=s(MG);mjo=r($et,"HubertForSequenceClassification"),$et.forEach(t),gjo=r(H6e," (Hubert model)"),H6e.forEach(t),hjo=i(po),i2=n(po,"LI",{});var U6e=s(i2);Bfe=n(U6e,"STRONG",{});var ket=s(Bfe);ujo=r(ket,"sew"),ket.forEach(t),pjo=r(U6e," \u2014 "),EG=n(U6e,"A",{href:!0});var Set=s(EG);_jo=r(Set,"SEWForSequenceClassification"),Set.forEach(t),vjo=r(U6e," (SEW model)"),U6e.forEach(t),bjo=i(po),d2=n(po,"LI",{});var J6e=s(d2);Pfe=n(J6e,"STRONG",{});var Ret=s(Pfe);Fjo=r(Ret,"sew-d"),Ret.forEach(t),Tjo=r(J6e," \u2014 "),CG=n(J6e,"A",{href:!0});var Bet=s(CG);Mjo=r(Bet,"SEWDForSequenceClassification"),Bet.forEach(t),Ejo=r(J6e," (SEW-D model)"),J6e.forEach(t),Cjo=i(po),c2=n(po,"LI",{});var Y6e=s(c2);Ife=n(Y6e,"STRONG",{});var Pet=s(Ife);wjo=r(Pet,"unispeech"),Pet.forEach(t),Ajo=r(Y6e," \u2014 "),wG=n(Y6e,"A",{href:!0});var Iet=s(wG);yjo=r(Iet,"UniSpeechForSequenceClassification"),Iet.forEach(t),Ljo=r(Y6e," (UniSpeech model)"),Y6e.forEach(t),xjo=i(po),f2=n(po,"LI",{});var K6e=s(f2);qfe=n(K6e,"STRONG",{});var qet=s(qfe);$jo=r(qet,"unispeech-sat"),qet.forEach(t),kjo=r(K6e," \u2014 "),AG=n(K6e,"A",{href:!0});var Net=s(AG);Sjo=r(Net,"UniSpeechSatForSequenceClassification"),Net.forEach(t),Rjo=r(K6e," (UniSpeechSat model)"),K6e.forEach(t),Bjo=i(po),m2=n(po,"LI",{});var Z6e=s(m2);Nfe=n(Z6e,"STRONG",{});var jet=s(Nfe);Pjo=r(jet,"wav2vec2"),jet.forEach(t),Ijo=r(Z6e," \u2014 "),yG=n(Z6e,"A",{href:!0});var Det=s(yG);qjo=r(Det,"Wav2Vec2ForSequenceClassification"),Det.forEach(t),Njo=r(Z6e," (Wav2Vec2 model)"),Z6e.forEach(t),jjo=i(po),g2=n(po,"LI",{});var eye=s(g2);jfe=n(eye,"STRONG",{});var Get=s(jfe);Djo=r(Get,"wavlm"),Get.forEach(t),Gjo=r(eye," \u2014 "),LG=n(eye,"A",{href:!0});var Oet=s(LG);Ojo=r(Oet,"WavLMForSequenceClassification"),Oet.forEach(t),Vjo=r(eye," (WavLM model)"),eye.forEach(t),po.forEach(t),Xjo=i(ia),h2=n(ia,"P",{});var oye=s(h2);zjo=r(oye,"The model is set in evaluation mode by default using "),Dfe=n(oye,"CODE",{});var Vet=s(Dfe);Qjo=r(Vet,"model.eval()"),Vet.forEach(t),Wjo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(oye,"CODE",{});var Xet=s(Gfe);Hjo=r(Xet,"model.train()"),Xet.forEach(t),oye.forEach(t),Ujo=i(ia),T(u2.$$.fragment,ia),ia.forEach(t),js.forEach(t),Kke=i(f),Hi=n(f,"H2",{class:!0});var eBe=s(Hi);p2=n(eBe,"A",{id:!0,class:!0,href:!0});var zet=s(p2);Ofe=n(zet,"SPAN",{});var Qet=s(Ofe);T(w6.$$.fragment,Qet),Qet.forEach(t),zet.forEach(t),Jjo=i(eBe),Vfe=n(eBe,"SPAN",{});var Wet=s(Vfe);Yjo=r(Wet,"AutoModelForAudioFrameClassification"),Wet.forEach(t),eBe.forEach(t),Zke=i(f),Do=n(f,"DIV",{class:!0});var Ds=s(Do);T(A6.$$.fragment,Ds),Kjo=i(Ds),Ui=n(Ds,"P",{});var eJ=s(Ui);Zjo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xG=n(eJ,"A",{href:!0});var Het=s(xG);eDo=r(Het,"from_pretrained()"),Het.forEach(t),oDo=r(eJ," class method or the "),$G=n(eJ,"A",{href:!0});var Uet=s($G);rDo=r(Uet,"from_config()"),Uet.forEach(t),tDo=r(eJ,` class
method.`),eJ.forEach(t),aDo=i(Ds),y6=n(Ds,"P",{});var oBe=s(y6);nDo=r(oBe,"This class cannot be instantiated directly using "),Xfe=n(oBe,"CODE",{});var Jet=s(Xfe);sDo=r(Jet,"__init__()"),Jet.forEach(t),lDo=r(oBe," (throws an error)."),oBe.forEach(t),iDo=i(Ds),gt=n(Ds,"DIV",{class:!0});var _3=s(gt);T(L6.$$.fragment,_3),dDo=i(_3),zfe=n(_3,"P",{});var Yet=s(zfe);cDo=r(Yet,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Yet.forEach(t),fDo=i(_3),Ji=n(_3,"P",{});var oJ=s(Ji);mDo=r(oJ,`Note:
Loading a model from its configuration file does `),Qfe=n(oJ,"STRONG",{});var Ket=s(Qfe);gDo=r(Ket,"not"),Ket.forEach(t),hDo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(oJ,"A",{href:!0});var Zet=s(kG);uDo=r(Zet,"from_pretrained()"),Zet.forEach(t),pDo=r(oJ," to load the model weights."),oJ.forEach(t),_Do=i(_3),T(_2.$$.fragment,_3),_3.forEach(t),vDo=i(Ds),no=n(Ds,"DIV",{class:!0});var da=s(no);T(x6.$$.fragment,da),bDo=i(da),Wfe=n(da,"P",{});var eot=s(Wfe);FDo=r(eot,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eot.forEach(t),TDo=i(da),Ia=n(da,"P",{});var v3=s(Ia);MDo=r(v3,"The model class to instantiate is selected based on the "),Hfe=n(v3,"CODE",{});var oot=s(Hfe);EDo=r(oot,"model_type"),oot.forEach(t),CDo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(v3,"CODE",{});var rot=s(Ufe);wDo=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),ADo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(v3,"CODE",{});var tot=s(Jfe);yDo=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),LDo=r(v3,":"),v3.forEach(t),xDo=i(da),qa=n(da,"UL",{});var b3=s(qa);v2=n(b3,"LI",{});var rye=s(v2);Yfe=n(rye,"STRONG",{});var aot=s(Yfe);$Do=r(aot,"data2vec-audio"),aot.forEach(t),kDo=r(rye," \u2014 "),SG=n(rye,"A",{href:!0});var not=s(SG);SDo=r(not,"Data2VecAudioForAudioFrameClassification"),not.forEach(t),RDo=r(rye," (Data2VecAudio model)"),rye.forEach(t),BDo=i(b3),b2=n(b3,"LI",{});var tye=s(b2);Kfe=n(tye,"STRONG",{});var sot=s(Kfe);PDo=r(sot,"unispeech-sat"),sot.forEach(t),IDo=r(tye," \u2014 "),RG=n(tye,"A",{href:!0});var lot=s(RG);qDo=r(lot,"UniSpeechSatForAudioFrameClassification"),lot.forEach(t),NDo=r(tye," (UniSpeechSat model)"),tye.forEach(t),jDo=i(b3),F2=n(b3,"LI",{});var aye=s(F2);Zfe=n(aye,"STRONG",{});var iot=s(Zfe);DDo=r(iot,"wav2vec2"),iot.forEach(t),GDo=r(aye," \u2014 "),BG=n(aye,"A",{href:!0});var dot=s(BG);ODo=r(dot,"Wav2Vec2ForAudioFrameClassification"),dot.forEach(t),VDo=r(aye," (Wav2Vec2 model)"),aye.forEach(t),XDo=i(b3),T2=n(b3,"LI",{});var nye=s(T2);eme=n(nye,"STRONG",{});var cot=s(eme);zDo=r(cot,"wavlm"),cot.forEach(t),QDo=r(nye," \u2014 "),PG=n(nye,"A",{href:!0});var fot=s(PG);WDo=r(fot,"WavLMForAudioFrameClassification"),fot.forEach(t),HDo=r(nye," (WavLM model)"),nye.forEach(t),b3.forEach(t),UDo=i(da),M2=n(da,"P",{});var sye=s(M2);JDo=r(sye,"The model is set in evaluation mode by default using "),ome=n(sye,"CODE",{});var mot=s(ome);YDo=r(mot,"model.eval()"),mot.forEach(t),KDo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(sye,"CODE",{});var got=s(rme);ZDo=r(got,"model.train()"),got.forEach(t),sye.forEach(t),eGo=i(da),T(E2.$$.fragment,da),da.forEach(t),Ds.forEach(t),eSe=i(f),Yi=n(f,"H2",{class:!0});var rBe=s(Yi);C2=n(rBe,"A",{id:!0,class:!0,href:!0});var hot=s(C2);tme=n(hot,"SPAN",{});var uot=s(tme);T($6.$$.fragment,uot),uot.forEach(t),hot.forEach(t),oGo=i(rBe),ame=n(rBe,"SPAN",{});var pot=s(ame);rGo=r(pot,"AutoModelForCTC"),pot.forEach(t),rBe.forEach(t),oSe=i(f),Go=n(f,"DIV",{class:!0});var Gs=s(Go);T(k6.$$.fragment,Gs),tGo=i(Gs),Ki=n(Gs,"P",{});var rJ=s(Ki);aGo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),IG=n(rJ,"A",{href:!0});var _ot=s(IG);nGo=r(_ot,"from_pretrained()"),_ot.forEach(t),sGo=r(rJ," class method or the "),qG=n(rJ,"A",{href:!0});var vot=s(qG);lGo=r(vot,"from_config()"),vot.forEach(t),iGo=r(rJ,` class
method.`),rJ.forEach(t),dGo=i(Gs),S6=n(Gs,"P",{});var tBe=s(S6);cGo=r(tBe,"This class cannot be instantiated directly using "),nme=n(tBe,"CODE",{});var bot=s(nme);fGo=r(bot,"__init__()"),bot.forEach(t),mGo=r(tBe," (throws an error)."),tBe.forEach(t),gGo=i(Gs),ht=n(Gs,"DIV",{class:!0});var F3=s(ht);T(R6.$$.fragment,F3),hGo=i(F3),sme=n(F3,"P",{});var Fot=s(sme);uGo=r(Fot,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fot.forEach(t),pGo=i(F3),Zi=n(F3,"P",{});var tJ=s(Zi);_Go=r(tJ,`Note:
Loading a model from its configuration file does `),lme=n(tJ,"STRONG",{});var Tot=s(lme);vGo=r(Tot,"not"),Tot.forEach(t),bGo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(tJ,"A",{href:!0});var Mot=s(NG);FGo=r(Mot,"from_pretrained()"),Mot.forEach(t),TGo=r(tJ," to load the model weights."),tJ.forEach(t),MGo=i(F3),T(w2.$$.fragment,F3),F3.forEach(t),EGo=i(Gs),so=n(Gs,"DIV",{class:!0});var ca=s(so);T(B6.$$.fragment,ca),CGo=i(ca),ime=n(ca,"P",{});var Eot=s(ime);wGo=r(Eot,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Eot.forEach(t),AGo=i(ca),Na=n(ca,"P",{});var T3=s(Na);yGo=r(T3,"The model class to instantiate is selected based on the "),dme=n(T3,"CODE",{});var Cot=s(dme);LGo=r(Cot,"model_type"),Cot.forEach(t),xGo=r(T3,` property of the config object (either
passed as an argument or loaded from `),cme=n(T3,"CODE",{});var wot=s(cme);$Go=r(wot,"pretrained_model_name_or_path"),wot.forEach(t),kGo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fme=n(T3,"CODE",{});var Aot=s(fme);SGo=r(Aot,"pretrained_model_name_or_path"),Aot.forEach(t),RGo=r(T3,":"),T3.forEach(t),BGo=i(ca),qe=n(ca,"UL",{});var _o=s(qe);A2=n(_o,"LI",{});var lye=s(A2);mme=n(lye,"STRONG",{});var yot=s(mme);PGo=r(yot,"data2vec-audio"),yot.forEach(t),IGo=r(lye," \u2014 "),jG=n(lye,"A",{href:!0});var Lot=s(jG);qGo=r(Lot,"Data2VecAudioForCTC"),Lot.forEach(t),NGo=r(lye," (Data2VecAudio model)"),lye.forEach(t),jGo=i(_o),y2=n(_o,"LI",{});var iye=s(y2);gme=n(iye,"STRONG",{});var xot=s(gme);DGo=r(xot,"hubert"),xot.forEach(t),GGo=r(iye," \u2014 "),DG=n(iye,"A",{href:!0});var $ot=s(DG);OGo=r($ot,"HubertForCTC"),$ot.forEach(t),VGo=r(iye," (Hubert model)"),iye.forEach(t),XGo=i(_o),L2=n(_o,"LI",{});var dye=s(L2);hme=n(dye,"STRONG",{});var kot=s(hme);zGo=r(kot,"sew"),kot.forEach(t),QGo=r(dye," \u2014 "),GG=n(dye,"A",{href:!0});var Sot=s(GG);WGo=r(Sot,"SEWForCTC"),Sot.forEach(t),HGo=r(dye," (SEW model)"),dye.forEach(t),UGo=i(_o),x2=n(_o,"LI",{});var cye=s(x2);ume=n(cye,"STRONG",{});var Rot=s(ume);JGo=r(Rot,"sew-d"),Rot.forEach(t),YGo=r(cye," \u2014 "),OG=n(cye,"A",{href:!0});var Bot=s(OG);KGo=r(Bot,"SEWDForCTC"),Bot.forEach(t),ZGo=r(cye," (SEW-D model)"),cye.forEach(t),eOo=i(_o),$2=n(_o,"LI",{});var fye=s($2);pme=n(fye,"STRONG",{});var Pot=s(pme);oOo=r(Pot,"unispeech"),Pot.forEach(t),rOo=r(fye," \u2014 "),VG=n(fye,"A",{href:!0});var Iot=s(VG);tOo=r(Iot,"UniSpeechForCTC"),Iot.forEach(t),aOo=r(fye," (UniSpeech model)"),fye.forEach(t),nOo=i(_o),k2=n(_o,"LI",{});var mye=s(k2);_me=n(mye,"STRONG",{});var qot=s(_me);sOo=r(qot,"unispeech-sat"),qot.forEach(t),lOo=r(mye," \u2014 "),XG=n(mye,"A",{href:!0});var Not=s(XG);iOo=r(Not,"UniSpeechSatForCTC"),Not.forEach(t),dOo=r(mye," (UniSpeechSat model)"),mye.forEach(t),cOo=i(_o),S2=n(_o,"LI",{});var gye=s(S2);vme=n(gye,"STRONG",{});var jot=s(vme);fOo=r(jot,"wav2vec2"),jot.forEach(t),mOo=r(gye," \u2014 "),zG=n(gye,"A",{href:!0});var Dot=s(zG);gOo=r(Dot,"Wav2Vec2ForCTC"),Dot.forEach(t),hOo=r(gye," (Wav2Vec2 model)"),gye.forEach(t),uOo=i(_o),R2=n(_o,"LI",{});var hye=s(R2);bme=n(hye,"STRONG",{});var Got=s(bme);pOo=r(Got,"wavlm"),Got.forEach(t),_Oo=r(hye," \u2014 "),QG=n(hye,"A",{href:!0});var Oot=s(QG);vOo=r(Oot,"WavLMForCTC"),Oot.forEach(t),bOo=r(hye," (WavLM model)"),hye.forEach(t),_o.forEach(t),FOo=i(ca),B2=n(ca,"P",{});var uye=s(B2);TOo=r(uye,"The model is set in evaluation mode by default using "),Fme=n(uye,"CODE",{});var Vot=s(Fme);MOo=r(Vot,"model.eval()"),Vot.forEach(t),EOo=r(uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(uye,"CODE",{});var Xot=s(Tme);COo=r(Xot,"model.train()"),Xot.forEach(t),uye.forEach(t),wOo=i(ca),T(P2.$$.fragment,ca),ca.forEach(t),Gs.forEach(t),rSe=i(f),ed=n(f,"H2",{class:!0});var aBe=s(ed);I2=n(aBe,"A",{id:!0,class:!0,href:!0});var zot=s(I2);Mme=n(zot,"SPAN",{});var Qot=s(Mme);T(P6.$$.fragment,Qot),Qot.forEach(t),zot.forEach(t),AOo=i(aBe),Eme=n(aBe,"SPAN",{});var Wot=s(Eme);yOo=r(Wot,"AutoModelForSpeechSeq2Seq"),Wot.forEach(t),aBe.forEach(t),tSe=i(f),Oo=n(f,"DIV",{class:!0});var Os=s(Oo);T(I6.$$.fragment,Os),LOo=i(Os),od=n(Os,"P",{});var aJ=s(od);xOo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WG=n(aJ,"A",{href:!0});var Hot=s(WG);$Oo=r(Hot,"from_pretrained()"),Hot.forEach(t),kOo=r(aJ," class method or the "),HG=n(aJ,"A",{href:!0});var Uot=s(HG);SOo=r(Uot,"from_config()"),Uot.forEach(t),ROo=r(aJ,` class
method.`),aJ.forEach(t),BOo=i(Os),q6=n(Os,"P",{});var nBe=s(q6);POo=r(nBe,"This class cannot be instantiated directly using "),Cme=n(nBe,"CODE",{});var Jot=s(Cme);IOo=r(Jot,"__init__()"),Jot.forEach(t),qOo=r(nBe," (throws an error)."),nBe.forEach(t),NOo=i(Os),ut=n(Os,"DIV",{class:!0});var M3=s(ut);T(N6.$$.fragment,M3),jOo=i(M3),wme=n(M3,"P",{});var Yot=s(wme);DOo=r(Yot,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yot.forEach(t),GOo=i(M3),rd=n(M3,"P",{});var nJ=s(rd);OOo=r(nJ,`Note:
Loading a model from its configuration file does `),Ame=n(nJ,"STRONG",{});var Kot=s(Ame);VOo=r(Kot,"not"),Kot.forEach(t),XOo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n(nJ,"A",{href:!0});var Zot=s(UG);zOo=r(Zot,"from_pretrained()"),Zot.forEach(t),QOo=r(nJ," to load the model weights."),nJ.forEach(t),WOo=i(M3),T(q2.$$.fragment,M3),M3.forEach(t),HOo=i(Os),lo=n(Os,"DIV",{class:!0});var fa=s(lo);T(j6.$$.fragment,fa),UOo=i(fa),yme=n(fa,"P",{});var ert=s(yme);JOo=r(ert,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ert.forEach(t),YOo=i(fa),ja=n(fa,"P",{});var E3=s(ja);KOo=r(E3,"The model class to instantiate is selected based on the "),Lme=n(E3,"CODE",{});var ort=s(Lme);ZOo=r(ort,"model_type"),ort.forEach(t),eVo=r(E3,` property of the config object (either
passed as an argument or loaded from `),xme=n(E3,"CODE",{});var rrt=s(xme);oVo=r(rrt,"pretrained_model_name_or_path"),rrt.forEach(t),rVo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(E3,"CODE",{});var trt=s($me);tVo=r(trt,"pretrained_model_name_or_path"),trt.forEach(t),aVo=r(E3,":"),E3.forEach(t),nVo=i(fa),D6=n(fa,"UL",{});var sBe=s(D6);N2=n(sBe,"LI",{});var pye=s(N2);kme=n(pye,"STRONG",{});var art=s(kme);sVo=r(art,"speech-encoder-decoder"),art.forEach(t),lVo=r(pye," \u2014 "),JG=n(pye,"A",{href:!0});var nrt=s(JG);iVo=r(nrt,"SpeechEncoderDecoderModel"),nrt.forEach(t),dVo=r(pye," (Speech Encoder decoder model)"),pye.forEach(t),cVo=i(sBe),j2=n(sBe,"LI",{});var _ye=s(j2);Sme=n(_ye,"STRONG",{});var srt=s(Sme);fVo=r(srt,"speech_to_text"),srt.forEach(t),mVo=r(_ye," \u2014 "),YG=n(_ye,"A",{href:!0});var lrt=s(YG);gVo=r(lrt,"Speech2TextForConditionalGeneration"),lrt.forEach(t),hVo=r(_ye," (Speech2Text model)"),_ye.forEach(t),sBe.forEach(t),uVo=i(fa),D2=n(fa,"P",{});var vye=s(D2);pVo=r(vye,"The model is set in evaluation mode by default using "),Rme=n(vye,"CODE",{});var irt=s(Rme);_Vo=r(irt,"model.eval()"),irt.forEach(t),vVo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(vye,"CODE",{});var drt=s(Bme);bVo=r(drt,"model.train()"),drt.forEach(t),vye.forEach(t),FVo=i(fa),T(G2.$$.fragment,fa),fa.forEach(t),Os.forEach(t),aSe=i(f),td=n(f,"H2",{class:!0});var lBe=s(td);O2=n(lBe,"A",{id:!0,class:!0,href:!0});var crt=s(O2);Pme=n(crt,"SPAN",{});var frt=s(Pme);T(G6.$$.fragment,frt),frt.forEach(t),crt.forEach(t),TVo=i(lBe),Ime=n(lBe,"SPAN",{});var mrt=s(Ime);MVo=r(mrt,"AutoModelForAudioXVector"),mrt.forEach(t),lBe.forEach(t),nSe=i(f),Vo=n(f,"DIV",{class:!0});var Vs=s(Vo);T(O6.$$.fragment,Vs),EVo=i(Vs),ad=n(Vs,"P",{});var sJ=s(ad);CVo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KG=n(sJ,"A",{href:!0});var grt=s(KG);wVo=r(grt,"from_pretrained()"),grt.forEach(t),AVo=r(sJ," class method or the "),ZG=n(sJ,"A",{href:!0});var hrt=s(ZG);yVo=r(hrt,"from_config()"),hrt.forEach(t),LVo=r(sJ,` class
method.`),sJ.forEach(t),xVo=i(Vs),V6=n(Vs,"P",{});var iBe=s(V6);$Vo=r(iBe,"This class cannot be instantiated directly using "),qme=n(iBe,"CODE",{});var urt=s(qme);kVo=r(urt,"__init__()"),urt.forEach(t),SVo=r(iBe," (throws an error)."),iBe.forEach(t),RVo=i(Vs),pt=n(Vs,"DIV",{class:!0});var C3=s(pt);T(X6.$$.fragment,C3),BVo=i(C3),Nme=n(C3,"P",{});var prt=s(Nme);PVo=r(prt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),prt.forEach(t),IVo=i(C3),nd=n(C3,"P",{});var lJ=s(nd);qVo=r(lJ,`Note:
Loading a model from its configuration file does `),jme=n(lJ,"STRONG",{});var _rt=s(jme);NVo=r(_rt,"not"),_rt.forEach(t),jVo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(lJ,"A",{href:!0});var vrt=s(eO);DVo=r(vrt,"from_pretrained()"),vrt.forEach(t),GVo=r(lJ," to load the model weights."),lJ.forEach(t),OVo=i(C3),T(V2.$$.fragment,C3),C3.forEach(t),VVo=i(Vs),io=n(Vs,"DIV",{class:!0});var ma=s(io);T(z6.$$.fragment,ma),XVo=i(ma),Dme=n(ma,"P",{});var brt=s(Dme);zVo=r(brt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),brt.forEach(t),QVo=i(ma),Da=n(ma,"P",{});var w3=s(Da);WVo=r(w3,"The model class to instantiate is selected based on the "),Gme=n(w3,"CODE",{});var Frt=s(Gme);HVo=r(Frt,"model_type"),Frt.forEach(t),UVo=r(w3,` property of the config object (either
passed as an argument or loaded from `),Ome=n(w3,"CODE",{});var Trt=s(Ome);JVo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),YVo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(w3,"CODE",{});var Mrt=s(Vme);KVo=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),ZVo=r(w3,":"),w3.forEach(t),eXo=i(ma),Ga=n(ma,"UL",{});var A3=s(Ga);X2=n(A3,"LI",{});var bye=s(X2);Xme=n(bye,"STRONG",{});var Ert=s(Xme);oXo=r(Ert,"data2vec-audio"),Ert.forEach(t),rXo=r(bye," \u2014 "),oO=n(bye,"A",{href:!0});var Crt=s(oO);tXo=r(Crt,"Data2VecAudioForXVector"),Crt.forEach(t),aXo=r(bye," (Data2VecAudio model)"),bye.forEach(t),nXo=i(A3),z2=n(A3,"LI",{});var Fye=s(z2);zme=n(Fye,"STRONG",{});var wrt=s(zme);sXo=r(wrt,"unispeech-sat"),wrt.forEach(t),lXo=r(Fye," \u2014 "),rO=n(Fye,"A",{href:!0});var Art=s(rO);iXo=r(Art,"UniSpeechSatForXVector"),Art.forEach(t),dXo=r(Fye," (UniSpeechSat model)"),Fye.forEach(t),cXo=i(A3),Q2=n(A3,"LI",{});var Tye=s(Q2);Qme=n(Tye,"STRONG",{});var yrt=s(Qme);fXo=r(yrt,"wav2vec2"),yrt.forEach(t),mXo=r(Tye," \u2014 "),tO=n(Tye,"A",{href:!0});var Lrt=s(tO);gXo=r(Lrt,"Wav2Vec2ForXVector"),Lrt.forEach(t),hXo=r(Tye," (Wav2Vec2 model)"),Tye.forEach(t),uXo=i(A3),W2=n(A3,"LI",{});var Mye=s(W2);Wme=n(Mye,"STRONG",{});var xrt=s(Wme);pXo=r(xrt,"wavlm"),xrt.forEach(t),_Xo=r(Mye," \u2014 "),aO=n(Mye,"A",{href:!0});var $rt=s(aO);vXo=r($rt,"WavLMForXVector"),$rt.forEach(t),bXo=r(Mye," (WavLM model)"),Mye.forEach(t),A3.forEach(t),FXo=i(ma),H2=n(ma,"P",{});var Eye=s(H2);TXo=r(Eye,"The model is set in evaluation mode by default using "),Hme=n(Eye,"CODE",{});var krt=s(Hme);MXo=r(krt,"model.eval()"),krt.forEach(t),EXo=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(Eye,"CODE",{});var Srt=s(Ume);CXo=r(Srt,"model.train()"),Srt.forEach(t),Eye.forEach(t),wXo=i(ma),T(U2.$$.fragment,ma),ma.forEach(t),Vs.forEach(t),sSe=i(f),sd=n(f,"H2",{class:!0});var dBe=s(sd);J2=n(dBe,"A",{id:!0,class:!0,href:!0});var Rrt=s(J2);Jme=n(Rrt,"SPAN",{});var Brt=s(Jme);T(Q6.$$.fragment,Brt),Brt.forEach(t),Rrt.forEach(t),AXo=i(dBe),Yme=n(dBe,"SPAN",{});var Prt=s(Yme);yXo=r(Prt,"AutoModelForMaskedImageModeling"),Prt.forEach(t),dBe.forEach(t),lSe=i(f),Xo=n(f,"DIV",{class:!0});var Xs=s(Xo);T(W6.$$.fragment,Xs),LXo=i(Xs),ld=n(Xs,"P",{});var iJ=s(ld);xXo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nO=n(iJ,"A",{href:!0});var Irt=s(nO);$Xo=r(Irt,"from_pretrained()"),Irt.forEach(t),kXo=r(iJ," class method or the "),sO=n(iJ,"A",{href:!0});var qrt=s(sO);SXo=r(qrt,"from_config()"),qrt.forEach(t),RXo=r(iJ,` class
method.`),iJ.forEach(t),BXo=i(Xs),H6=n(Xs,"P",{});var cBe=s(H6);PXo=r(cBe,"This class cannot be instantiated directly using "),Kme=n(cBe,"CODE",{});var Nrt=s(Kme);IXo=r(Nrt,"__init__()"),Nrt.forEach(t),qXo=r(cBe," (throws an error)."),cBe.forEach(t),NXo=i(Xs),_t=n(Xs,"DIV",{class:!0});var y3=s(_t);T(U6.$$.fragment,y3),jXo=i(y3),Zme=n(y3,"P",{});var jrt=s(Zme);DXo=r(jrt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),jrt.forEach(t),GXo=i(y3),id=n(y3,"P",{});var dJ=s(id);OXo=r(dJ,`Note:
Loading a model from its configuration file does `),ege=n(dJ,"STRONG",{});var Drt=s(ege);VXo=r(Drt,"not"),Drt.forEach(t),XXo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(dJ,"A",{href:!0});var Grt=s(lO);zXo=r(Grt,"from_pretrained()"),Grt.forEach(t),QXo=r(dJ," to load the model weights."),dJ.forEach(t),WXo=i(y3),T(Y2.$$.fragment,y3),y3.forEach(t),HXo=i(Xs),co=n(Xs,"DIV",{class:!0});var ga=s(co);T(J6.$$.fragment,ga),UXo=i(ga),oge=n(ga,"P",{});var Ort=s(oge);JXo=r(Ort,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ort.forEach(t),YXo=i(ga),Oa=n(ga,"P",{});var L3=s(Oa);KXo=r(L3,"The model class to instantiate is selected based on the "),rge=n(L3,"CODE",{});var Vrt=s(rge);ZXo=r(Vrt,"model_type"),Vrt.forEach(t),ezo=r(L3,` property of the config object (either
passed as an argument or loaded from `),tge=n(L3,"CODE",{});var Xrt=s(tge);ozo=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),rzo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(L3,"CODE",{});var zrt=s(age);tzo=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),azo=r(L3,":"),L3.forEach(t),nzo=i(ga),dd=n(ga,"UL",{});var cJ=s(dd);K2=n(cJ,"LI",{});var Cye=s(K2);nge=n(Cye,"STRONG",{});var Qrt=s(nge);szo=r(Qrt,"deit"),Qrt.forEach(t),lzo=r(Cye," \u2014 "),iO=n(Cye,"A",{href:!0});var Wrt=s(iO);izo=r(Wrt,"DeiTForMaskedImageModeling"),Wrt.forEach(t),dzo=r(Cye," (DeiT model)"),Cye.forEach(t),czo=i(cJ),Z2=n(cJ,"LI",{});var wye=s(Z2);sge=n(wye,"STRONG",{});var Hrt=s(sge);fzo=r(Hrt,"swin"),Hrt.forEach(t),mzo=r(wye," \u2014 "),dO=n(wye,"A",{href:!0});var Urt=s(dO);gzo=r(Urt,"SwinForMaskedImageModeling"),Urt.forEach(t),hzo=r(wye," (Swin model)"),wye.forEach(t),uzo=i(cJ),eF=n(cJ,"LI",{});var Aye=s(eF);lge=n(Aye,"STRONG",{});var Jrt=s(lge);pzo=r(Jrt,"vit"),Jrt.forEach(t),_zo=r(Aye," \u2014 "),cO=n(Aye,"A",{href:!0});var Yrt=s(cO);vzo=r(Yrt,"ViTForMaskedImageModeling"),Yrt.forEach(t),bzo=r(Aye," (ViT model)"),Aye.forEach(t),cJ.forEach(t),Fzo=i(ga),oF=n(ga,"P",{});var yye=s(oF);Tzo=r(yye,"The model is set in evaluation mode by default using "),ige=n(yye,"CODE",{});var Krt=s(ige);Mzo=r(Krt,"model.eval()"),Krt.forEach(t),Ezo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(yye,"CODE",{});var Zrt=s(dge);Czo=r(Zrt,"model.train()"),Zrt.forEach(t),yye.forEach(t),wzo=i(ga),T(rF.$$.fragment,ga),ga.forEach(t),Xs.forEach(t),iSe=i(f),cd=n(f,"H2",{class:!0});var fBe=s(cd);tF=n(fBe,"A",{id:!0,class:!0,href:!0});var ett=s(tF);cge=n(ett,"SPAN",{});var ott=s(cge);T(Y6.$$.fragment,ott),ott.forEach(t),ett.forEach(t),Azo=i(fBe),fge=n(fBe,"SPAN",{});var rtt=s(fge);yzo=r(rtt,"AutoModelForObjectDetection"),rtt.forEach(t),fBe.forEach(t),dSe=i(f),zo=n(f,"DIV",{class:!0});var zs=s(zo);T(K6.$$.fragment,zs),Lzo=i(zs),fd=n(zs,"P",{});var fJ=s(fd);xzo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fO=n(fJ,"A",{href:!0});var ttt=s(fO);$zo=r(ttt,"from_pretrained()"),ttt.forEach(t),kzo=r(fJ," class method or the "),mO=n(fJ,"A",{href:!0});var att=s(mO);Szo=r(att,"from_config()"),att.forEach(t),Rzo=r(fJ,` class
method.`),fJ.forEach(t),Bzo=i(zs),Z6=n(zs,"P",{});var mBe=s(Z6);Pzo=r(mBe,"This class cannot be instantiated directly using "),mge=n(mBe,"CODE",{});var ntt=s(mge);Izo=r(ntt,"__init__()"),ntt.forEach(t),qzo=r(mBe," (throws an error)."),mBe.forEach(t),Nzo=i(zs),vt=n(zs,"DIV",{class:!0});var x3=s(vt);T(ey.$$.fragment,x3),jzo=i(x3),gge=n(x3,"P",{});var stt=s(gge);Dzo=r(stt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),stt.forEach(t),Gzo=i(x3),md=n(x3,"P",{});var mJ=s(md);Ozo=r(mJ,`Note:
Loading a model from its configuration file does `),hge=n(mJ,"STRONG",{});var ltt=s(hge);Vzo=r(ltt,"not"),ltt.forEach(t),Xzo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(mJ,"A",{href:!0});var itt=s(gO);zzo=r(itt,"from_pretrained()"),itt.forEach(t),Qzo=r(mJ," to load the model weights."),mJ.forEach(t),Wzo=i(x3),T(aF.$$.fragment,x3),x3.forEach(t),Hzo=i(zs),fo=n(zs,"DIV",{class:!0});var ha=s(fo);T(oy.$$.fragment,ha),Uzo=i(ha),uge=n(ha,"P",{});var dtt=s(uge);Jzo=r(dtt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dtt.forEach(t),Yzo=i(ha),Va=n(ha,"P",{});var $3=s(Va);Kzo=r($3,"The model class to instantiate is selected based on the "),pge=n($3,"CODE",{});var ctt=s(pge);Zzo=r(ctt,"model_type"),ctt.forEach(t),eQo=r($3,` property of the config object (either
passed as an argument or loaded from `),_ge=n($3,"CODE",{});var ftt=s(_ge);oQo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),rQo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n($3,"CODE",{});var mtt=s(vge);tQo=r(mtt,"pretrained_model_name_or_path"),mtt.forEach(t),aQo=r($3,":"),$3.forEach(t),nQo=i(ha),bge=n(ha,"UL",{});var gtt=s(bge);nF=n(gtt,"LI",{});var Lye=s(nF);Fge=n(Lye,"STRONG",{});var htt=s(Fge);sQo=r(htt,"detr"),htt.forEach(t),lQo=r(Lye," \u2014 "),hO=n(Lye,"A",{href:!0});var utt=s(hO);iQo=r(utt,"DetrForObjectDetection"),utt.forEach(t),dQo=r(Lye," (DETR model)"),Lye.forEach(t),gtt.forEach(t),cQo=i(ha),sF=n(ha,"P",{});var xye=s(sF);fQo=r(xye,"The model is set in evaluation mode by default using "),Tge=n(xye,"CODE",{});var ptt=s(Tge);mQo=r(ptt,"model.eval()"),ptt.forEach(t),gQo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(xye,"CODE",{});var _tt=s(Mge);hQo=r(_tt,"model.train()"),_tt.forEach(t),xye.forEach(t),uQo=i(ha),T(lF.$$.fragment,ha),ha.forEach(t),zs.forEach(t),cSe=i(f),gd=n(f,"H2",{class:!0});var gBe=s(gd);iF=n(gBe,"A",{id:!0,class:!0,href:!0});var vtt=s(iF);Ege=n(vtt,"SPAN",{});var btt=s(Ege);T(ry.$$.fragment,btt),btt.forEach(t),vtt.forEach(t),pQo=i(gBe),Cge=n(gBe,"SPAN",{});var Ftt=s(Cge);_Qo=r(Ftt,"AutoModelForImageSegmentation"),Ftt.forEach(t),gBe.forEach(t),fSe=i(f),Qo=n(f,"DIV",{class:!0});var Qs=s(Qo);T(ty.$$.fragment,Qs),vQo=i(Qs),hd=n(Qs,"P",{});var gJ=s(hd);bQo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uO=n(gJ,"A",{href:!0});var Ttt=s(uO);FQo=r(Ttt,"from_pretrained()"),Ttt.forEach(t),TQo=r(gJ," class method or the "),pO=n(gJ,"A",{href:!0});var Mtt=s(pO);MQo=r(Mtt,"from_config()"),Mtt.forEach(t),EQo=r(gJ,` class
method.`),gJ.forEach(t),CQo=i(Qs),ay=n(Qs,"P",{});var hBe=s(ay);wQo=r(hBe,"This class cannot be instantiated directly using "),wge=n(hBe,"CODE",{});var Ett=s(wge);AQo=r(Ett,"__init__()"),Ett.forEach(t),yQo=r(hBe," (throws an error)."),hBe.forEach(t),LQo=i(Qs),bt=n(Qs,"DIV",{class:!0});var k3=s(bt);T(ny.$$.fragment,k3),xQo=i(k3),Age=n(k3,"P",{});var Ctt=s(Age);$Qo=r(Ctt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ctt.forEach(t),kQo=i(k3),ud=n(k3,"P",{});var hJ=s(ud);SQo=r(hJ,`Note:
Loading a model from its configuration file does `),yge=n(hJ,"STRONG",{});var wtt=s(yge);RQo=r(wtt,"not"),wtt.forEach(t),BQo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(hJ,"A",{href:!0});var Att=s(_O);PQo=r(Att,"from_pretrained()"),Att.forEach(t),IQo=r(hJ," to load the model weights."),hJ.forEach(t),qQo=i(k3),T(dF.$$.fragment,k3),k3.forEach(t),NQo=i(Qs),mo=n(Qs,"DIV",{class:!0});var ua=s(mo);T(sy.$$.fragment,ua),jQo=i(ua),Lge=n(ua,"P",{});var ytt=s(Lge);DQo=r(ytt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ytt.forEach(t),GQo=i(ua),Xa=n(ua,"P",{});var S3=s(Xa);OQo=r(S3,"The model class to instantiate is selected based on the "),xge=n(S3,"CODE",{});var Ltt=s(xge);VQo=r(Ltt,"model_type"),Ltt.forEach(t),XQo=r(S3,` property of the config object (either
passed as an argument or loaded from `),$ge=n(S3,"CODE",{});var xtt=s($ge);zQo=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),QQo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(S3,"CODE",{});var $tt=s(kge);WQo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),HQo=r(S3,":"),S3.forEach(t),UQo=i(ua),Sge=n(ua,"UL",{});var ktt=s(Sge);cF=n(ktt,"LI",{});var $ye=s(cF);Rge=n($ye,"STRONG",{});var Stt=s(Rge);JQo=r(Stt,"detr"),Stt.forEach(t),YQo=r($ye," \u2014 "),vO=n($ye,"A",{href:!0});var Rtt=s(vO);KQo=r(Rtt,"DetrForSegmentation"),Rtt.forEach(t),ZQo=r($ye," (DETR model)"),$ye.forEach(t),ktt.forEach(t),eWo=i(ua),fF=n(ua,"P",{});var kye=s(fF);oWo=r(kye,"The model is set in evaluation mode by default using "),Bge=n(kye,"CODE",{});var Btt=s(Bge);rWo=r(Btt,"model.eval()"),Btt.forEach(t),tWo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(kye,"CODE",{});var Ptt=s(Pge);aWo=r(Ptt,"model.train()"),Ptt.forEach(t),kye.forEach(t),nWo=i(ua),T(mF.$$.fragment,ua),ua.forEach(t),Qs.forEach(t),mSe=i(f),pd=n(f,"H2",{class:!0});var uBe=s(pd);gF=n(uBe,"A",{id:!0,class:!0,href:!0});var Itt=s(gF);Ige=n(Itt,"SPAN",{});var qtt=s(Ige);T(ly.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),sWo=i(uBe),qge=n(uBe,"SPAN",{});var Ntt=s(qge);lWo=r(Ntt,"AutoModelForSemanticSegmentation"),Ntt.forEach(t),uBe.forEach(t),gSe=i(f),Wo=n(f,"DIV",{class:!0});var Ws=s(Wo);T(iy.$$.fragment,Ws),iWo=i(Ws),_d=n(Ws,"P",{});var uJ=s(_d);dWo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bO=n(uJ,"A",{href:!0});var jtt=s(bO);cWo=r(jtt,"from_pretrained()"),jtt.forEach(t),fWo=r(uJ," class method or the "),FO=n(uJ,"A",{href:!0});var Dtt=s(FO);mWo=r(Dtt,"from_config()"),Dtt.forEach(t),gWo=r(uJ,` class
method.`),uJ.forEach(t),hWo=i(Ws),dy=n(Ws,"P",{});var pBe=s(dy);uWo=r(pBe,"This class cannot be instantiated directly using "),Nge=n(pBe,"CODE",{});var Gtt=s(Nge);pWo=r(Gtt,"__init__()"),Gtt.forEach(t),_Wo=r(pBe," (throws an error)."),pBe.forEach(t),vWo=i(Ws),Ft=n(Ws,"DIV",{class:!0});var R3=s(Ft);T(cy.$$.fragment,R3),bWo=i(R3),jge=n(R3,"P",{});var Ott=s(jge);FWo=r(Ott,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ott.forEach(t),TWo=i(R3),vd=n(R3,"P",{});var pJ=s(vd);MWo=r(pJ,`Note:
Loading a model from its configuration file does `),Dge=n(pJ,"STRONG",{});var Vtt=s(Dge);EWo=r(Vtt,"not"),Vtt.forEach(t),CWo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(pJ,"A",{href:!0});var Xtt=s(TO);wWo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),AWo=r(pJ," to load the model weights."),pJ.forEach(t),yWo=i(R3),T(hF.$$.fragment,R3),R3.forEach(t),LWo=i(Ws),go=n(Ws,"DIV",{class:!0});var pa=s(go);T(fy.$$.fragment,pa),xWo=i(pa),Gge=n(pa,"P",{});var ztt=s(Gge);$Wo=r(ztt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ztt.forEach(t),kWo=i(pa),za=n(pa,"P",{});var B3=s(za);SWo=r(B3,"The model class to instantiate is selected based on the "),Oge=n(B3,"CODE",{});var Qtt=s(Oge);RWo=r(Qtt,"model_type"),Qtt.forEach(t),BWo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Vge=n(B3,"CODE",{});var Wtt=s(Vge);PWo=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),IWo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(B3,"CODE",{});var Htt=s(Xge);qWo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),NWo=r(B3,":"),B3.forEach(t),jWo=i(pa),bd=n(pa,"UL",{});var _J=s(bd);uF=n(_J,"LI",{});var Sye=s(uF);zge=n(Sye,"STRONG",{});var Utt=s(zge);DWo=r(Utt,"beit"),Utt.forEach(t),GWo=r(Sye," \u2014 "),MO=n(Sye,"A",{href:!0});var Jtt=s(MO);OWo=r(Jtt,"BeitForSemanticSegmentation"),Jtt.forEach(t),VWo=r(Sye," (BEiT model)"),Sye.forEach(t),XWo=i(_J),pF=n(_J,"LI",{});var Rye=s(pF);Qge=n(Rye,"STRONG",{});var Ytt=s(Qge);zWo=r(Ytt,"dpt"),Ytt.forEach(t),QWo=r(Rye," \u2014 "),EO=n(Rye,"A",{href:!0});var Ktt=s(EO);WWo=r(Ktt,"DPTForSemanticSegmentation"),Ktt.forEach(t),HWo=r(Rye," (DPT model)"),Rye.forEach(t),UWo=i(_J),_F=n(_J,"LI",{});var Bye=s(_F);Wge=n(Bye,"STRONG",{});var Ztt=s(Wge);JWo=r(Ztt,"segformer"),Ztt.forEach(t),YWo=r(Bye," \u2014 "),CO=n(Bye,"A",{href:!0});var eat=s(CO);KWo=r(eat,"SegformerForSemanticSegmentation"),eat.forEach(t),ZWo=r(Bye," (SegFormer model)"),Bye.forEach(t),_J.forEach(t),eHo=i(pa),vF=n(pa,"P",{});var Pye=s(vF);oHo=r(Pye,"The model is set in evaluation mode by default using "),Hge=n(Pye,"CODE",{});var oat=s(Hge);rHo=r(oat,"model.eval()"),oat.forEach(t),tHo=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(Pye,"CODE",{});var rat=s(Uge);aHo=r(rat,"model.train()"),rat.forEach(t),Pye.forEach(t),nHo=i(pa),T(bF.$$.fragment,pa),pa.forEach(t),Ws.forEach(t),hSe=i(f),Fd=n(f,"H2",{class:!0});var _Be=s(Fd);FF=n(_Be,"A",{id:!0,class:!0,href:!0});var tat=s(FF);Jge=n(tat,"SPAN",{});var aat=s(Jge);T(my.$$.fragment,aat),aat.forEach(t),tat.forEach(t),sHo=i(_Be),Yge=n(_Be,"SPAN",{});var nat=s(Yge);lHo=r(nat,"AutoModelForInstanceSegmentation"),nat.forEach(t),_Be.forEach(t),uSe=i(f),Ho=n(f,"DIV",{class:!0});var Hs=s(Ho);T(gy.$$.fragment,Hs),iHo=i(Hs),Td=n(Hs,"P",{});var vJ=s(Td);dHo=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wO=n(vJ,"A",{href:!0});var sat=s(wO);cHo=r(sat,"from_pretrained()"),sat.forEach(t),fHo=r(vJ," class method or the "),AO=n(vJ,"A",{href:!0});var lat=s(AO);mHo=r(lat,"from_config()"),lat.forEach(t),gHo=r(vJ,` class
method.`),vJ.forEach(t),hHo=i(Hs),hy=n(Hs,"P",{});var vBe=s(hy);uHo=r(vBe,"This class cannot be instantiated directly using "),Kge=n(vBe,"CODE",{});var iat=s(Kge);pHo=r(iat,"__init__()"),iat.forEach(t),_Ho=r(vBe," (throws an error)."),vBe.forEach(t),vHo=i(Hs),Tt=n(Hs,"DIV",{class:!0});var P3=s(Tt);T(uy.$$.fragment,P3),bHo=i(P3),Zge=n(P3,"P",{});var dat=s(Zge);FHo=r(dat,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dat.forEach(t),THo=i(P3),Md=n(P3,"P",{});var bJ=s(Md);MHo=r(bJ,`Note:
Loading a model from its configuration file does `),ehe=n(bJ,"STRONG",{});var cat=s(ehe);EHo=r(cat,"not"),cat.forEach(t),CHo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(bJ,"A",{href:!0});var fat=s(yO);wHo=r(fat,"from_pretrained()"),fat.forEach(t),AHo=r(bJ," to load the model weights."),bJ.forEach(t),yHo=i(P3),T(TF.$$.fragment,P3),P3.forEach(t),LHo=i(Hs),ho=n(Hs,"DIV",{class:!0});var _a=s(ho);T(py.$$.fragment,_a),xHo=i(_a),ohe=n(_a,"P",{});var mat=s(ohe);$Ho=r(mat,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mat.forEach(t),kHo=i(_a),Qa=n(_a,"P",{});var I3=s(Qa);SHo=r(I3,"The model class to instantiate is selected based on the "),rhe=n(I3,"CODE",{});var gat=s(rhe);RHo=r(gat,"model_type"),gat.forEach(t),BHo=r(I3,` property of the config object (either
passed as an argument or loaded from `),the=n(I3,"CODE",{});var hat=s(the);PHo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),IHo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(I3,"CODE",{});var uat=s(ahe);qHo=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),NHo=r(I3,":"),I3.forEach(t),jHo=i(_a),nhe=n(_a,"UL",{});var pat=s(nhe);MF=n(pat,"LI",{});var Iye=s(MF);she=n(Iye,"STRONG",{});var _at=s(she);DHo=r(_at,"maskformer"),_at.forEach(t),GHo=r(Iye," \u2014 "),LO=n(Iye,"A",{href:!0});var vat=s(LO);OHo=r(vat,"MaskFormerForInstanceSegmentation"),vat.forEach(t),VHo=r(Iye," (MaskFormer model)"),Iye.forEach(t),pat.forEach(t),XHo=i(_a),EF=n(_a,"P",{});var qye=s(EF);zHo=r(qye,"The model is set in evaluation mode by default using "),lhe=n(qye,"CODE",{});var bat=s(lhe);QHo=r(bat,"model.eval()"),bat.forEach(t),WHo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(qye,"CODE",{});var Fat=s(ihe);HHo=r(Fat,"model.train()"),Fat.forEach(t),qye.forEach(t),UHo=i(_a),T(CF.$$.fragment,_a),_a.forEach(t),Hs.forEach(t),pSe=i(f),Ed=n(f,"H2",{class:!0});var bBe=s(Ed);wF=n(bBe,"A",{id:!0,class:!0,href:!0});var Tat=s(wF);dhe=n(Tat,"SPAN",{});var Mat=s(dhe);T(_y.$$.fragment,Mat),Mat.forEach(t),Tat.forEach(t),JHo=i(bBe),che=n(bBe,"SPAN",{});var Eat=s(che);YHo=r(Eat,"TFAutoModel"),Eat.forEach(t),bBe.forEach(t),_Se=i(f),Uo=n(f,"DIV",{class:!0});var Us=s(Uo);T(vy.$$.fragment,Us),KHo=i(Us),Cd=n(Us,"P",{});var FJ=s(Cd);ZHo=r(FJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xO=n(FJ,"A",{href:!0});var Cat=s(xO);eUo=r(Cat,"from_pretrained()"),Cat.forEach(t),oUo=r(FJ," class method or the "),$O=n(FJ,"A",{href:!0});var wat=s($O);rUo=r(wat,"from_config()"),wat.forEach(t),tUo=r(FJ,` class
method.`),FJ.forEach(t),aUo=i(Us),by=n(Us,"P",{});var FBe=s(by);nUo=r(FBe,"This class cannot be instantiated directly using "),fhe=n(FBe,"CODE",{});var Aat=s(fhe);sUo=r(Aat,"__init__()"),Aat.forEach(t),lUo=r(FBe," (throws an error)."),FBe.forEach(t),iUo=i(Us),Mt=n(Us,"DIV",{class:!0});var q3=s(Mt);T(Fy.$$.fragment,q3),dUo=i(q3),mhe=n(q3,"P",{});var yat=s(mhe);cUo=r(yat,"Instantiates one of the base model classes of the library from a configuration."),yat.forEach(t),fUo=i(q3),wd=n(q3,"P",{});var TJ=s(wd);mUo=r(TJ,`Note:
Loading a model from its configuration file does `),ghe=n(TJ,"STRONG",{});var Lat=s(ghe);gUo=r(Lat,"not"),Lat.forEach(t),hUo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=n(TJ,"A",{href:!0});var xat=s(kO);uUo=r(xat,"from_pretrained()"),xat.forEach(t),pUo=r(TJ," to load the model weights."),TJ.forEach(t),_Uo=i(q3),T(AF.$$.fragment,q3),q3.forEach(t),vUo=i(Us),Mr=n(Us,"DIV",{class:!0});var Js=s(Mr);T(Ty.$$.fragment,Js),bUo=i(Js),hhe=n(Js,"P",{});var $at=s(hhe);FUo=r($at,"Instantiate one of the base model classes of the library from a pretrained model."),$at.forEach(t),TUo=i(Js),Wa=n(Js,"P",{});var N3=s(Wa);MUo=r(N3,"The model class to instantiate is selected based on the "),uhe=n(N3,"CODE",{});var kat=s(uhe);EUo=r(kat,"model_type"),kat.forEach(t),CUo=r(N3,` property of the config object (either
passed as an argument or loaded from `),phe=n(N3,"CODE",{});var Sat=s(phe);wUo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),AUo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(N3,"CODE",{});var Rat=s(_he);yUo=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),LUo=r(N3,":"),N3.forEach(t),xUo=i(Js),j=n(Js,"UL",{});var D=s(j);yF=n(D,"LI",{});var Nye=s(yF);vhe=n(Nye,"STRONG",{});var Bat=s(vhe);$Uo=r(Bat,"albert"),Bat.forEach(t),kUo=r(Nye," \u2014 "),SO=n(Nye,"A",{href:!0});var Pat=s(SO);SUo=r(Pat,"TFAlbertModel"),Pat.forEach(t),RUo=r(Nye," (ALBERT model)"),Nye.forEach(t),BUo=i(D),LF=n(D,"LI",{});var jye=s(LF);bhe=n(jye,"STRONG",{});var Iat=s(bhe);PUo=r(Iat,"bart"),Iat.forEach(t),IUo=r(jye," \u2014 "),RO=n(jye,"A",{href:!0});var qat=s(RO);qUo=r(qat,"TFBartModel"),qat.forEach(t),NUo=r(jye," (BART model)"),jye.forEach(t),jUo=i(D),xF=n(D,"LI",{});var Dye=s(xF);Fhe=n(Dye,"STRONG",{});var Nat=s(Fhe);DUo=r(Nat,"bert"),Nat.forEach(t),GUo=r(Dye," \u2014 "),BO=n(Dye,"A",{href:!0});var jat=s(BO);OUo=r(jat,"TFBertModel"),jat.forEach(t),VUo=r(Dye," (BERT model)"),Dye.forEach(t),XUo=i(D),$F=n(D,"LI",{});var Gye=s($F);The=n(Gye,"STRONG",{});var Dat=s(The);zUo=r(Dat,"blenderbot"),Dat.forEach(t),QUo=r(Gye," \u2014 "),PO=n(Gye,"A",{href:!0});var Gat=s(PO);WUo=r(Gat,"TFBlenderbotModel"),Gat.forEach(t),HUo=r(Gye," (Blenderbot model)"),Gye.forEach(t),UUo=i(D),kF=n(D,"LI",{});var Oye=s(kF);Mhe=n(Oye,"STRONG",{});var Oat=s(Mhe);JUo=r(Oat,"blenderbot-small"),Oat.forEach(t),YUo=r(Oye," \u2014 "),IO=n(Oye,"A",{href:!0});var Vat=s(IO);KUo=r(Vat,"TFBlenderbotSmallModel"),Vat.forEach(t),ZUo=r(Oye," (BlenderbotSmall model)"),Oye.forEach(t),eJo=i(D),SF=n(D,"LI",{});var Vye=s(SF);Ehe=n(Vye,"STRONG",{});var Xat=s(Ehe);oJo=r(Xat,"camembert"),Xat.forEach(t),rJo=r(Vye," \u2014 "),qO=n(Vye,"A",{href:!0});var zat=s(qO);tJo=r(zat,"TFCamembertModel"),zat.forEach(t),aJo=r(Vye," (CamemBERT model)"),Vye.forEach(t),nJo=i(D),RF=n(D,"LI",{});var Xye=s(RF);Che=n(Xye,"STRONG",{});var Qat=s(Che);sJo=r(Qat,"clip"),Qat.forEach(t),lJo=r(Xye," \u2014 "),NO=n(Xye,"A",{href:!0});var Wat=s(NO);iJo=r(Wat,"TFCLIPModel"),Wat.forEach(t),dJo=r(Xye," (CLIP model)"),Xye.forEach(t),cJo=i(D),BF=n(D,"LI",{});var zye=s(BF);whe=n(zye,"STRONG",{});var Hat=s(whe);fJo=r(Hat,"convbert"),Hat.forEach(t),mJo=r(zye," \u2014 "),jO=n(zye,"A",{href:!0});var Uat=s(jO);gJo=r(Uat,"TFConvBertModel"),Uat.forEach(t),hJo=r(zye," (ConvBERT model)"),zye.forEach(t),uJo=i(D),PF=n(D,"LI",{});var Qye=s(PF);Ahe=n(Qye,"STRONG",{});var Jat=s(Ahe);pJo=r(Jat,"convnext"),Jat.forEach(t),_Jo=r(Qye," \u2014 "),DO=n(Qye,"A",{href:!0});var Yat=s(DO);vJo=r(Yat,"TFConvNextModel"),Yat.forEach(t),bJo=r(Qye," (ConvNext model)"),Qye.forEach(t),FJo=i(D),IF=n(D,"LI",{});var Wye=s(IF);yhe=n(Wye,"STRONG",{});var Kat=s(yhe);TJo=r(Kat,"ctrl"),Kat.forEach(t),MJo=r(Wye," \u2014 "),GO=n(Wye,"A",{href:!0});var Zat=s(GO);EJo=r(Zat,"TFCTRLModel"),Zat.forEach(t),CJo=r(Wye," (CTRL model)"),Wye.forEach(t),wJo=i(D),qF=n(D,"LI",{});var Hye=s(qF);Lhe=n(Hye,"STRONG",{});var ent=s(Lhe);AJo=r(ent,"deberta"),ent.forEach(t),yJo=r(Hye," \u2014 "),OO=n(Hye,"A",{href:!0});var ont=s(OO);LJo=r(ont,"TFDebertaModel"),ont.forEach(t),xJo=r(Hye," (DeBERTa model)"),Hye.forEach(t),$Jo=i(D),NF=n(D,"LI",{});var Uye=s(NF);xhe=n(Uye,"STRONG",{});var rnt=s(xhe);kJo=r(rnt,"deberta-v2"),rnt.forEach(t),SJo=r(Uye," \u2014 "),VO=n(Uye,"A",{href:!0});var tnt=s(VO);RJo=r(tnt,"TFDebertaV2Model"),tnt.forEach(t),BJo=r(Uye," (DeBERTa-v2 model)"),Uye.forEach(t),PJo=i(D),jF=n(D,"LI",{});var Jye=s(jF);$he=n(Jye,"STRONG",{});var ant=s($he);IJo=r(ant,"distilbert"),ant.forEach(t),qJo=r(Jye," \u2014 "),XO=n(Jye,"A",{href:!0});var nnt=s(XO);NJo=r(nnt,"TFDistilBertModel"),nnt.forEach(t),jJo=r(Jye," (DistilBERT model)"),Jye.forEach(t),DJo=i(D),DF=n(D,"LI",{});var Yye=s(DF);khe=n(Yye,"STRONG",{});var snt=s(khe);GJo=r(snt,"dpr"),snt.forEach(t),OJo=r(Yye," \u2014 "),zO=n(Yye,"A",{href:!0});var lnt=s(zO);VJo=r(lnt,"TFDPRQuestionEncoder"),lnt.forEach(t),XJo=r(Yye," (DPR model)"),Yye.forEach(t),zJo=i(D),GF=n(D,"LI",{});var Kye=s(GF);She=n(Kye,"STRONG",{});var int=s(She);QJo=r(int,"electra"),int.forEach(t),WJo=r(Kye," \u2014 "),QO=n(Kye,"A",{href:!0});var dnt=s(QO);HJo=r(dnt,"TFElectraModel"),dnt.forEach(t),UJo=r(Kye," (ELECTRA model)"),Kye.forEach(t),JJo=i(D),OF=n(D,"LI",{});var Zye=s(OF);Rhe=n(Zye,"STRONG",{});var cnt=s(Rhe);YJo=r(cnt,"flaubert"),cnt.forEach(t),KJo=r(Zye," \u2014 "),WO=n(Zye,"A",{href:!0});var fnt=s(WO);ZJo=r(fnt,"TFFlaubertModel"),fnt.forEach(t),eYo=r(Zye," (FlauBERT model)"),Zye.forEach(t),oYo=i(D),Fs=n(D,"LI",{});var j7=s(Fs);Bhe=n(j7,"STRONG",{});var mnt=s(Bhe);rYo=r(mnt,"funnel"),mnt.forEach(t),tYo=r(j7," \u2014 "),HO=n(j7,"A",{href:!0});var gnt=s(HO);aYo=r(gnt,"TFFunnelModel"),gnt.forEach(t),nYo=r(j7," or "),UO=n(j7,"A",{href:!0});var hnt=s(UO);sYo=r(hnt,"TFFunnelBaseModel"),hnt.forEach(t),lYo=r(j7," (Funnel Transformer model)"),j7.forEach(t),iYo=i(D),VF=n(D,"LI",{});var eLe=s(VF);Phe=n(eLe,"STRONG",{});var unt=s(Phe);dYo=r(unt,"gpt2"),unt.forEach(t),cYo=r(eLe," \u2014 "),JO=n(eLe,"A",{href:!0});var pnt=s(JO);fYo=r(pnt,"TFGPT2Model"),pnt.forEach(t),mYo=r(eLe," (OpenAI GPT-2 model)"),eLe.forEach(t),gYo=i(D),XF=n(D,"LI",{});var oLe=s(XF);Ihe=n(oLe,"STRONG",{});var _nt=s(Ihe);hYo=r(_nt,"gptj"),_nt.forEach(t),uYo=r(oLe," \u2014 "),YO=n(oLe,"A",{href:!0});var vnt=s(YO);pYo=r(vnt,"TFGPTJModel"),vnt.forEach(t),_Yo=r(oLe," (GPT-J model)"),oLe.forEach(t),vYo=i(D),zF=n(D,"LI",{});var rLe=s(zF);qhe=n(rLe,"STRONG",{});var bnt=s(qhe);bYo=r(bnt,"hubert"),bnt.forEach(t),FYo=r(rLe," \u2014 "),KO=n(rLe,"A",{href:!0});var Fnt=s(KO);TYo=r(Fnt,"TFHubertModel"),Fnt.forEach(t),MYo=r(rLe," (Hubert model)"),rLe.forEach(t),EYo=i(D),QF=n(D,"LI",{});var tLe=s(QF);Nhe=n(tLe,"STRONG",{});var Tnt=s(Nhe);CYo=r(Tnt,"layoutlm"),Tnt.forEach(t),wYo=r(tLe," \u2014 "),ZO=n(tLe,"A",{href:!0});var Mnt=s(ZO);AYo=r(Mnt,"TFLayoutLMModel"),Mnt.forEach(t),yYo=r(tLe," (LayoutLM model)"),tLe.forEach(t),LYo=i(D),WF=n(D,"LI",{});var aLe=s(WF);jhe=n(aLe,"STRONG",{});var Ent=s(jhe);xYo=r(Ent,"led"),Ent.forEach(t),$Yo=r(aLe," \u2014 "),eV=n(aLe,"A",{href:!0});var Cnt=s(eV);kYo=r(Cnt,"TFLEDModel"),Cnt.forEach(t),SYo=r(aLe," (LED model)"),aLe.forEach(t),RYo=i(D),HF=n(D,"LI",{});var nLe=s(HF);Dhe=n(nLe,"STRONG",{});var wnt=s(Dhe);BYo=r(wnt,"longformer"),wnt.forEach(t),PYo=r(nLe," \u2014 "),oV=n(nLe,"A",{href:!0});var Ant=s(oV);IYo=r(Ant,"TFLongformerModel"),Ant.forEach(t),qYo=r(nLe," (Longformer model)"),nLe.forEach(t),NYo=i(D),UF=n(D,"LI",{});var sLe=s(UF);Ghe=n(sLe,"STRONG",{});var ynt=s(Ghe);jYo=r(ynt,"lxmert"),ynt.forEach(t),DYo=r(sLe," \u2014 "),rV=n(sLe,"A",{href:!0});var Lnt=s(rV);GYo=r(Lnt,"TFLxmertModel"),Lnt.forEach(t),OYo=r(sLe," (LXMERT model)"),sLe.forEach(t),VYo=i(D),JF=n(D,"LI",{});var lLe=s(JF);Ohe=n(lLe,"STRONG",{});var xnt=s(Ohe);XYo=r(xnt,"marian"),xnt.forEach(t),zYo=r(lLe," \u2014 "),tV=n(lLe,"A",{href:!0});var $nt=s(tV);QYo=r($nt,"TFMarianModel"),$nt.forEach(t),WYo=r(lLe," (Marian model)"),lLe.forEach(t),HYo=i(D),YF=n(D,"LI",{});var iLe=s(YF);Vhe=n(iLe,"STRONG",{});var knt=s(Vhe);UYo=r(knt,"mbart"),knt.forEach(t),JYo=r(iLe," \u2014 "),aV=n(iLe,"A",{href:!0});var Snt=s(aV);YYo=r(Snt,"TFMBartModel"),Snt.forEach(t),KYo=r(iLe," (mBART model)"),iLe.forEach(t),ZYo=i(D),KF=n(D,"LI",{});var dLe=s(KF);Xhe=n(dLe,"STRONG",{});var Rnt=s(Xhe);eKo=r(Rnt,"mobilebert"),Rnt.forEach(t),oKo=r(dLe," \u2014 "),nV=n(dLe,"A",{href:!0});var Bnt=s(nV);rKo=r(Bnt,"TFMobileBertModel"),Bnt.forEach(t),tKo=r(dLe," (MobileBERT model)"),dLe.forEach(t),aKo=i(D),ZF=n(D,"LI",{});var cLe=s(ZF);zhe=n(cLe,"STRONG",{});var Pnt=s(zhe);nKo=r(Pnt,"mpnet"),Pnt.forEach(t),sKo=r(cLe," \u2014 "),sV=n(cLe,"A",{href:!0});var Int=s(sV);lKo=r(Int,"TFMPNetModel"),Int.forEach(t),iKo=r(cLe," (MPNet model)"),cLe.forEach(t),dKo=i(D),e0=n(D,"LI",{});var fLe=s(e0);Qhe=n(fLe,"STRONG",{});var qnt=s(Qhe);cKo=r(qnt,"mt5"),qnt.forEach(t),fKo=r(fLe," \u2014 "),lV=n(fLe,"A",{href:!0});var Nnt=s(lV);mKo=r(Nnt,"TFMT5Model"),Nnt.forEach(t),gKo=r(fLe," (mT5 model)"),fLe.forEach(t),hKo=i(D),o0=n(D,"LI",{});var mLe=s(o0);Whe=n(mLe,"STRONG",{});var jnt=s(Whe);uKo=r(jnt,"openai-gpt"),jnt.forEach(t),pKo=r(mLe," \u2014 "),iV=n(mLe,"A",{href:!0});var Dnt=s(iV);_Ko=r(Dnt,"TFOpenAIGPTModel"),Dnt.forEach(t),vKo=r(mLe," (OpenAI GPT model)"),mLe.forEach(t),bKo=i(D),r0=n(D,"LI",{});var gLe=s(r0);Hhe=n(gLe,"STRONG",{});var Gnt=s(Hhe);FKo=r(Gnt,"pegasus"),Gnt.forEach(t),TKo=r(gLe," \u2014 "),dV=n(gLe,"A",{href:!0});var Ont=s(dV);MKo=r(Ont,"TFPegasusModel"),Ont.forEach(t),EKo=r(gLe," (Pegasus model)"),gLe.forEach(t),CKo=i(D),t0=n(D,"LI",{});var hLe=s(t0);Uhe=n(hLe,"STRONG",{});var Vnt=s(Uhe);wKo=r(Vnt,"rembert"),Vnt.forEach(t),AKo=r(hLe," \u2014 "),cV=n(hLe,"A",{href:!0});var Xnt=s(cV);yKo=r(Xnt,"TFRemBertModel"),Xnt.forEach(t),LKo=r(hLe," (RemBERT model)"),hLe.forEach(t),xKo=i(D),a0=n(D,"LI",{});var uLe=s(a0);Jhe=n(uLe,"STRONG",{});var znt=s(Jhe);$Ko=r(znt,"roberta"),znt.forEach(t),kKo=r(uLe," \u2014 "),fV=n(uLe,"A",{href:!0});var Qnt=s(fV);SKo=r(Qnt,"TFRobertaModel"),Qnt.forEach(t),RKo=r(uLe," (RoBERTa model)"),uLe.forEach(t),BKo=i(D),n0=n(D,"LI",{});var pLe=s(n0);Yhe=n(pLe,"STRONG",{});var Wnt=s(Yhe);PKo=r(Wnt,"roformer"),Wnt.forEach(t),IKo=r(pLe," \u2014 "),mV=n(pLe,"A",{href:!0});var Hnt=s(mV);qKo=r(Hnt,"TFRoFormerModel"),Hnt.forEach(t),NKo=r(pLe," (RoFormer model)"),pLe.forEach(t),jKo=i(D),s0=n(D,"LI",{});var _Le=s(s0);Khe=n(_Le,"STRONG",{});var Unt=s(Khe);DKo=r(Unt,"speech_to_text"),Unt.forEach(t),GKo=r(_Le," \u2014 "),gV=n(_Le,"A",{href:!0});var Jnt=s(gV);OKo=r(Jnt,"TFSpeech2TextModel"),Jnt.forEach(t),VKo=r(_Le," (Speech2Text model)"),_Le.forEach(t),XKo=i(D),l0=n(D,"LI",{});var vLe=s(l0);Zhe=n(vLe,"STRONG",{});var Ynt=s(Zhe);zKo=r(Ynt,"t5"),Ynt.forEach(t),QKo=r(vLe," \u2014 "),hV=n(vLe,"A",{href:!0});var Knt=s(hV);WKo=r(Knt,"TFT5Model"),Knt.forEach(t),HKo=r(vLe," (T5 model)"),vLe.forEach(t),UKo=i(D),i0=n(D,"LI",{});var bLe=s(i0);eue=n(bLe,"STRONG",{});var Znt=s(eue);JKo=r(Znt,"tapas"),Znt.forEach(t),YKo=r(bLe," \u2014 "),uV=n(bLe,"A",{href:!0});var est=s(uV);KKo=r(est,"TFTapasModel"),est.forEach(t),ZKo=r(bLe," (TAPAS model)"),bLe.forEach(t),eZo=i(D),d0=n(D,"LI",{});var FLe=s(d0);oue=n(FLe,"STRONG",{});var ost=s(oue);oZo=r(ost,"transfo-xl"),ost.forEach(t),rZo=r(FLe," \u2014 "),pV=n(FLe,"A",{href:!0});var rst=s(pV);tZo=r(rst,"TFTransfoXLModel"),rst.forEach(t),aZo=r(FLe," (Transformer-XL model)"),FLe.forEach(t),nZo=i(D),c0=n(D,"LI",{});var TLe=s(c0);rue=n(TLe,"STRONG",{});var tst=s(rue);sZo=r(tst,"vit"),tst.forEach(t),lZo=r(TLe," \u2014 "),_V=n(TLe,"A",{href:!0});var ast=s(_V);iZo=r(ast,"TFViTModel"),ast.forEach(t),dZo=r(TLe," (ViT model)"),TLe.forEach(t),cZo=i(D),f0=n(D,"LI",{});var MLe=s(f0);tue=n(MLe,"STRONG",{});var nst=s(tue);fZo=r(nst,"vit_mae"),nst.forEach(t),mZo=r(MLe," \u2014 "),vV=n(MLe,"A",{href:!0});var sst=s(vV);gZo=r(sst,"TFViTMAEModel"),sst.forEach(t),hZo=r(MLe," (ViTMAE model)"),MLe.forEach(t),uZo=i(D),m0=n(D,"LI",{});var ELe=s(m0);aue=n(ELe,"STRONG",{});var lst=s(aue);pZo=r(lst,"wav2vec2"),lst.forEach(t),_Zo=r(ELe," \u2014 "),bV=n(ELe,"A",{href:!0});var ist=s(bV);vZo=r(ist,"TFWav2Vec2Model"),ist.forEach(t),bZo=r(ELe," (Wav2Vec2 model)"),ELe.forEach(t),FZo=i(D),g0=n(D,"LI",{});var CLe=s(g0);nue=n(CLe,"STRONG",{});var dst=s(nue);TZo=r(dst,"xlm"),dst.forEach(t),MZo=r(CLe," \u2014 "),FV=n(CLe,"A",{href:!0});var cst=s(FV);EZo=r(cst,"TFXLMModel"),cst.forEach(t),CZo=r(CLe," (XLM model)"),CLe.forEach(t),wZo=i(D),h0=n(D,"LI",{});var wLe=s(h0);sue=n(wLe,"STRONG",{});var fst=s(sue);AZo=r(fst,"xlm-roberta"),fst.forEach(t),yZo=r(wLe," \u2014 "),TV=n(wLe,"A",{href:!0});var mst=s(TV);LZo=r(mst,"TFXLMRobertaModel"),mst.forEach(t),xZo=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),$Zo=i(D),u0=n(D,"LI",{});var ALe=s(u0);lue=n(ALe,"STRONG",{});var gst=s(lue);kZo=r(gst,"xlnet"),gst.forEach(t),SZo=r(ALe," \u2014 "),MV=n(ALe,"A",{href:!0});var hst=s(MV);RZo=r(hst,"TFXLNetModel"),hst.forEach(t),BZo=r(ALe," (XLNet model)"),ALe.forEach(t),D.forEach(t),PZo=i(Js),T(p0.$$.fragment,Js),Js.forEach(t),Us.forEach(t),vSe=i(f),Ad=n(f,"H2",{class:!0});var TBe=s(Ad);_0=n(TBe,"A",{id:!0,class:!0,href:!0});var ust=s(_0);iue=n(ust,"SPAN",{});var pst=s(iue);T(My.$$.fragment,pst),pst.forEach(t),ust.forEach(t),IZo=i(TBe),due=n(TBe,"SPAN",{});var _st=s(due);qZo=r(_st,"TFAutoModelForPreTraining"),_st.forEach(t),TBe.forEach(t),bSe=i(f),Jo=n(f,"DIV",{class:!0});var Ys=s(Jo);T(Ey.$$.fragment,Ys),NZo=i(Ys),yd=n(Ys,"P",{});var MJ=s(yd);jZo=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EV=n(MJ,"A",{href:!0});var vst=s(EV);DZo=r(vst,"from_pretrained()"),vst.forEach(t),GZo=r(MJ," class method or the "),CV=n(MJ,"A",{href:!0});var bst=s(CV);OZo=r(bst,"from_config()"),bst.forEach(t),VZo=r(MJ,` class
method.`),MJ.forEach(t),XZo=i(Ys),Cy=n(Ys,"P",{});var MBe=s(Cy);zZo=r(MBe,"This class cannot be instantiated directly using "),cue=n(MBe,"CODE",{});var Fst=s(cue);QZo=r(Fst,"__init__()"),Fst.forEach(t),WZo=r(MBe," (throws an error)."),MBe.forEach(t),HZo=i(Ys),Et=n(Ys,"DIV",{class:!0});var j3=s(Et);T(wy.$$.fragment,j3),UZo=i(j3),fue=n(j3,"P",{});var Tst=s(fue);JZo=r(Tst,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tst.forEach(t),YZo=i(j3),Ld=n(j3,"P",{});var EJ=s(Ld);KZo=r(EJ,`Note:
Loading a model from its configuration file does `),mue=n(EJ,"STRONG",{});var Mst=s(mue);ZZo=r(Mst,"not"),Mst.forEach(t),eer=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(EJ,"A",{href:!0});var Est=s(wV);oer=r(Est,"from_pretrained()"),Est.forEach(t),rer=r(EJ," to load the model weights."),EJ.forEach(t),ter=i(j3),T(v0.$$.fragment,j3),j3.forEach(t),aer=i(Ys),Er=n(Ys,"DIV",{class:!0});var Ks=s(Er);T(Ay.$$.fragment,Ks),ner=i(Ks),gue=n(Ks,"P",{});var Cst=s(gue);ser=r(Cst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cst.forEach(t),ler=i(Ks),Ha=n(Ks,"P",{});var D3=s(Ha);ier=r(D3,"The model class to instantiate is selected based on the "),hue=n(D3,"CODE",{});var wst=s(hue);der=r(wst,"model_type"),wst.forEach(t),cer=r(D3,` property of the config object (either
passed as an argument or loaded from `),uue=n(D3,"CODE",{});var Ast=s(uue);fer=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),mer=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(D3,"CODE",{});var yst=s(pue);ger=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),her=r(D3,":"),D3.forEach(t),uer=i(Ks),ae=n(Ks,"UL",{});var ne=s(ae);b0=n(ne,"LI",{});var yLe=s(b0);_ue=n(yLe,"STRONG",{});var Lst=s(_ue);per=r(Lst,"albert"),Lst.forEach(t),_er=r(yLe," \u2014 "),AV=n(yLe,"A",{href:!0});var xst=s(AV);ver=r(xst,"TFAlbertForPreTraining"),xst.forEach(t),ber=r(yLe," (ALBERT model)"),yLe.forEach(t),Fer=i(ne),F0=n(ne,"LI",{});var LLe=s(F0);vue=n(LLe,"STRONG",{});var $st=s(vue);Ter=r($st,"bart"),$st.forEach(t),Mer=r(LLe," \u2014 "),yV=n(LLe,"A",{href:!0});var kst=s(yV);Eer=r(kst,"TFBartForConditionalGeneration"),kst.forEach(t),Cer=r(LLe," (BART model)"),LLe.forEach(t),wer=i(ne),T0=n(ne,"LI",{});var xLe=s(T0);bue=n(xLe,"STRONG",{});var Sst=s(bue);Aer=r(Sst,"bert"),Sst.forEach(t),yer=r(xLe," \u2014 "),LV=n(xLe,"A",{href:!0});var Rst=s(LV);Ler=r(Rst,"TFBertForPreTraining"),Rst.forEach(t),xer=r(xLe," (BERT model)"),xLe.forEach(t),$er=i(ne),M0=n(ne,"LI",{});var $Le=s(M0);Fue=n($Le,"STRONG",{});var Bst=s(Fue);ker=r(Bst,"camembert"),Bst.forEach(t),Ser=r($Le," \u2014 "),xV=n($Le,"A",{href:!0});var Pst=s(xV);Rer=r(Pst,"TFCamembertForMaskedLM"),Pst.forEach(t),Ber=r($Le," (CamemBERT model)"),$Le.forEach(t),Per=i(ne),E0=n(ne,"LI",{});var kLe=s(E0);Tue=n(kLe,"STRONG",{});var Ist=s(Tue);Ier=r(Ist,"ctrl"),Ist.forEach(t),qer=r(kLe," \u2014 "),$V=n(kLe,"A",{href:!0});var qst=s($V);Ner=r(qst,"TFCTRLLMHeadModel"),qst.forEach(t),jer=r(kLe," (CTRL model)"),kLe.forEach(t),Der=i(ne),C0=n(ne,"LI",{});var SLe=s(C0);Mue=n(SLe,"STRONG",{});var Nst=s(Mue);Ger=r(Nst,"distilbert"),Nst.forEach(t),Oer=r(SLe," \u2014 "),kV=n(SLe,"A",{href:!0});var jst=s(kV);Ver=r(jst,"TFDistilBertForMaskedLM"),jst.forEach(t),Xer=r(SLe," (DistilBERT model)"),SLe.forEach(t),zer=i(ne),w0=n(ne,"LI",{});var RLe=s(w0);Eue=n(RLe,"STRONG",{});var Dst=s(Eue);Qer=r(Dst,"electra"),Dst.forEach(t),Wer=r(RLe," \u2014 "),SV=n(RLe,"A",{href:!0});var Gst=s(SV);Her=r(Gst,"TFElectraForPreTraining"),Gst.forEach(t),Uer=r(RLe," (ELECTRA model)"),RLe.forEach(t),Jer=i(ne),A0=n(ne,"LI",{});var BLe=s(A0);Cue=n(BLe,"STRONG",{});var Ost=s(Cue);Yer=r(Ost,"flaubert"),Ost.forEach(t),Ker=r(BLe," \u2014 "),RV=n(BLe,"A",{href:!0});var Vst=s(RV);Zer=r(Vst,"TFFlaubertWithLMHeadModel"),Vst.forEach(t),eor=r(BLe," (FlauBERT model)"),BLe.forEach(t),oor=i(ne),y0=n(ne,"LI",{});var PLe=s(y0);wue=n(PLe,"STRONG",{});var Xst=s(wue);ror=r(Xst,"funnel"),Xst.forEach(t),tor=r(PLe," \u2014 "),BV=n(PLe,"A",{href:!0});var zst=s(BV);aor=r(zst,"TFFunnelForPreTraining"),zst.forEach(t),nor=r(PLe," (Funnel Transformer model)"),PLe.forEach(t),sor=i(ne),L0=n(ne,"LI",{});var ILe=s(L0);Aue=n(ILe,"STRONG",{});var Qst=s(Aue);lor=r(Qst,"gpt2"),Qst.forEach(t),ior=r(ILe," \u2014 "),PV=n(ILe,"A",{href:!0});var Wst=s(PV);dor=r(Wst,"TFGPT2LMHeadModel"),Wst.forEach(t),cor=r(ILe," (OpenAI GPT-2 model)"),ILe.forEach(t),mor=i(ne),x0=n(ne,"LI",{});var qLe=s(x0);yue=n(qLe,"STRONG",{});var Hst=s(yue);gor=r(Hst,"layoutlm"),Hst.forEach(t),hor=r(qLe," \u2014 "),IV=n(qLe,"A",{href:!0});var Ust=s(IV);uor=r(Ust,"TFLayoutLMForMaskedLM"),Ust.forEach(t),por=r(qLe," (LayoutLM model)"),qLe.forEach(t),_or=i(ne),$0=n(ne,"LI",{});var NLe=s($0);Lue=n(NLe,"STRONG",{});var Jst=s(Lue);vor=r(Jst,"lxmert"),Jst.forEach(t),bor=r(NLe," \u2014 "),qV=n(NLe,"A",{href:!0});var Yst=s(qV);For=r(Yst,"TFLxmertForPreTraining"),Yst.forEach(t),Tor=r(NLe," (LXMERT model)"),NLe.forEach(t),Mor=i(ne),k0=n(ne,"LI",{});var jLe=s(k0);xue=n(jLe,"STRONG",{});var Kst=s(xue);Eor=r(Kst,"mobilebert"),Kst.forEach(t),Cor=r(jLe," \u2014 "),NV=n(jLe,"A",{href:!0});var Zst=s(NV);wor=r(Zst,"TFMobileBertForPreTraining"),Zst.forEach(t),Aor=r(jLe," (MobileBERT model)"),jLe.forEach(t),yor=i(ne),S0=n(ne,"LI",{});var DLe=s(S0);$ue=n(DLe,"STRONG",{});var elt=s($ue);Lor=r(elt,"mpnet"),elt.forEach(t),xor=r(DLe," \u2014 "),jV=n(DLe,"A",{href:!0});var olt=s(jV);$or=r(olt,"TFMPNetForMaskedLM"),olt.forEach(t),kor=r(DLe," (MPNet model)"),DLe.forEach(t),Sor=i(ne),R0=n(ne,"LI",{});var GLe=s(R0);kue=n(GLe,"STRONG",{});var rlt=s(kue);Ror=r(rlt,"openai-gpt"),rlt.forEach(t),Bor=r(GLe," \u2014 "),DV=n(GLe,"A",{href:!0});var tlt=s(DV);Por=r(tlt,"TFOpenAIGPTLMHeadModel"),tlt.forEach(t),Ior=r(GLe," (OpenAI GPT model)"),GLe.forEach(t),qor=i(ne),B0=n(ne,"LI",{});var OLe=s(B0);Sue=n(OLe,"STRONG",{});var alt=s(Sue);Nor=r(alt,"roberta"),alt.forEach(t),jor=r(OLe," \u2014 "),GV=n(OLe,"A",{href:!0});var nlt=s(GV);Dor=r(nlt,"TFRobertaForMaskedLM"),nlt.forEach(t),Gor=r(OLe," (RoBERTa model)"),OLe.forEach(t),Oor=i(ne),P0=n(ne,"LI",{});var VLe=s(P0);Rue=n(VLe,"STRONG",{});var slt=s(Rue);Vor=r(slt,"t5"),slt.forEach(t),Xor=r(VLe," \u2014 "),OV=n(VLe,"A",{href:!0});var llt=s(OV);zor=r(llt,"TFT5ForConditionalGeneration"),llt.forEach(t),Qor=r(VLe," (T5 model)"),VLe.forEach(t),Wor=i(ne),I0=n(ne,"LI",{});var XLe=s(I0);Bue=n(XLe,"STRONG",{});var ilt=s(Bue);Hor=r(ilt,"tapas"),ilt.forEach(t),Uor=r(XLe," \u2014 "),VV=n(XLe,"A",{href:!0});var dlt=s(VV);Jor=r(dlt,"TFTapasForMaskedLM"),dlt.forEach(t),Yor=r(XLe," (TAPAS model)"),XLe.forEach(t),Kor=i(ne),q0=n(ne,"LI",{});var zLe=s(q0);Pue=n(zLe,"STRONG",{});var clt=s(Pue);Zor=r(clt,"transfo-xl"),clt.forEach(t),err=r(zLe," \u2014 "),XV=n(zLe,"A",{href:!0});var flt=s(XV);orr=r(flt,"TFTransfoXLLMHeadModel"),flt.forEach(t),rrr=r(zLe," (Transformer-XL model)"),zLe.forEach(t),trr=i(ne),N0=n(ne,"LI",{});var QLe=s(N0);Iue=n(QLe,"STRONG",{});var mlt=s(Iue);arr=r(mlt,"vit_mae"),mlt.forEach(t),nrr=r(QLe," \u2014 "),zV=n(QLe,"A",{href:!0});var glt=s(zV);srr=r(glt,"TFViTMAEForPreTraining"),glt.forEach(t),lrr=r(QLe," (ViTMAE model)"),QLe.forEach(t),irr=i(ne),j0=n(ne,"LI",{});var WLe=s(j0);que=n(WLe,"STRONG",{});var hlt=s(que);drr=r(hlt,"xlm"),hlt.forEach(t),crr=r(WLe," \u2014 "),QV=n(WLe,"A",{href:!0});var ult=s(QV);frr=r(ult,"TFXLMWithLMHeadModel"),ult.forEach(t),mrr=r(WLe," (XLM model)"),WLe.forEach(t),grr=i(ne),D0=n(ne,"LI",{});var HLe=s(D0);Nue=n(HLe,"STRONG",{});var plt=s(Nue);hrr=r(plt,"xlm-roberta"),plt.forEach(t),urr=r(HLe," \u2014 "),WV=n(HLe,"A",{href:!0});var _lt=s(WV);prr=r(_lt,"TFXLMRobertaForMaskedLM"),_lt.forEach(t),_rr=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),vrr=i(ne),G0=n(ne,"LI",{});var ULe=s(G0);jue=n(ULe,"STRONG",{});var vlt=s(jue);brr=r(vlt,"xlnet"),vlt.forEach(t),Frr=r(ULe," \u2014 "),HV=n(ULe,"A",{href:!0});var blt=s(HV);Trr=r(blt,"TFXLNetLMHeadModel"),blt.forEach(t),Mrr=r(ULe," (XLNet model)"),ULe.forEach(t),ne.forEach(t),Err=i(Ks),T(O0.$$.fragment,Ks),Ks.forEach(t),Ys.forEach(t),FSe=i(f),xd=n(f,"H2",{class:!0});var EBe=s(xd);V0=n(EBe,"A",{id:!0,class:!0,href:!0});var Flt=s(V0);Due=n(Flt,"SPAN",{});var Tlt=s(Due);T(yy.$$.fragment,Tlt),Tlt.forEach(t),Flt.forEach(t),Crr=i(EBe),Gue=n(EBe,"SPAN",{});var Mlt=s(Gue);wrr=r(Mlt,"TFAutoModelForCausalLM"),Mlt.forEach(t),EBe.forEach(t),TSe=i(f),Yo=n(f,"DIV",{class:!0});var Zs=s(Yo);T(Ly.$$.fragment,Zs),Arr=i(Zs),$d=n(Zs,"P",{});var CJ=s($d);yrr=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UV=n(CJ,"A",{href:!0});var Elt=s(UV);Lrr=r(Elt,"from_pretrained()"),Elt.forEach(t),xrr=r(CJ," class method or the "),JV=n(CJ,"A",{href:!0});var Clt=s(JV);$rr=r(Clt,"from_config()"),Clt.forEach(t),krr=r(CJ,` class
method.`),CJ.forEach(t),Srr=i(Zs),xy=n(Zs,"P",{});var CBe=s(xy);Rrr=r(CBe,"This class cannot be instantiated directly using "),Oue=n(CBe,"CODE",{});var wlt=s(Oue);Brr=r(wlt,"__init__()"),wlt.forEach(t),Prr=r(CBe," (throws an error)."),CBe.forEach(t),Irr=i(Zs),Ct=n(Zs,"DIV",{class:!0});var G3=s(Ct);T($y.$$.fragment,G3),qrr=i(G3),Vue=n(G3,"P",{});var Alt=s(Vue);Nrr=r(Alt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Alt.forEach(t),jrr=i(G3),kd=n(G3,"P",{});var wJ=s(kd);Drr=r(wJ,`Note:
Loading a model from its configuration file does `),Xue=n(wJ,"STRONG",{});var ylt=s(Xue);Grr=r(ylt,"not"),ylt.forEach(t),Orr=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(wJ,"A",{href:!0});var Llt=s(YV);Vrr=r(Llt,"from_pretrained()"),Llt.forEach(t),Xrr=r(wJ," to load the model weights."),wJ.forEach(t),zrr=i(G3),T(X0.$$.fragment,G3),G3.forEach(t),Qrr=i(Zs),Cr=n(Zs,"DIV",{class:!0});var el=s(Cr);T(ky.$$.fragment,el),Wrr=i(el),zue=n(el,"P",{});var xlt=s(zue);Hrr=r(xlt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xlt.forEach(t),Urr=i(el),Ua=n(el,"P",{});var O3=s(Ua);Jrr=r(O3,"The model class to instantiate is selected based on the "),Que=n(O3,"CODE",{});var $lt=s(Que);Yrr=r($lt,"model_type"),$lt.forEach(t),Krr=r(O3,` property of the config object (either
passed as an argument or loaded from `),Wue=n(O3,"CODE",{});var klt=s(Wue);Zrr=r(klt,"pretrained_model_name_or_path"),klt.forEach(t),etr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(O3,"CODE",{});var Slt=s(Hue);otr=r(Slt,"pretrained_model_name_or_path"),Slt.forEach(t),rtr=r(O3,":"),O3.forEach(t),ttr=i(el),ve=n(el,"UL",{});var Te=s(ve);z0=n(Te,"LI",{});var JLe=s(z0);Uue=n(JLe,"STRONG",{});var Rlt=s(Uue);atr=r(Rlt,"bert"),Rlt.forEach(t),ntr=r(JLe," \u2014 "),KV=n(JLe,"A",{href:!0});var Blt=s(KV);str=r(Blt,"TFBertLMHeadModel"),Blt.forEach(t),ltr=r(JLe," (BERT model)"),JLe.forEach(t),itr=i(Te),Q0=n(Te,"LI",{});var YLe=s(Q0);Jue=n(YLe,"STRONG",{});var Plt=s(Jue);dtr=r(Plt,"camembert"),Plt.forEach(t),ctr=r(YLe," \u2014 "),ZV=n(YLe,"A",{href:!0});var Ilt=s(ZV);ftr=r(Ilt,"TFCamembertForCausalLM"),Ilt.forEach(t),mtr=r(YLe," (CamemBERT model)"),YLe.forEach(t),gtr=i(Te),W0=n(Te,"LI",{});var KLe=s(W0);Yue=n(KLe,"STRONG",{});var qlt=s(Yue);htr=r(qlt,"ctrl"),qlt.forEach(t),utr=r(KLe," \u2014 "),eX=n(KLe,"A",{href:!0});var Nlt=s(eX);ptr=r(Nlt,"TFCTRLLMHeadModel"),Nlt.forEach(t),_tr=r(KLe," (CTRL model)"),KLe.forEach(t),vtr=i(Te),H0=n(Te,"LI",{});var ZLe=s(H0);Kue=n(ZLe,"STRONG",{});var jlt=s(Kue);btr=r(jlt,"gpt2"),jlt.forEach(t),Ftr=r(ZLe," \u2014 "),oX=n(ZLe,"A",{href:!0});var Dlt=s(oX);Ttr=r(Dlt,"TFGPT2LMHeadModel"),Dlt.forEach(t),Mtr=r(ZLe," (OpenAI GPT-2 model)"),ZLe.forEach(t),Etr=i(Te),U0=n(Te,"LI",{});var exe=s(U0);Zue=n(exe,"STRONG",{});var Glt=s(Zue);Ctr=r(Glt,"gptj"),Glt.forEach(t),wtr=r(exe," \u2014 "),rX=n(exe,"A",{href:!0});var Olt=s(rX);Atr=r(Olt,"TFGPTJForCausalLM"),Olt.forEach(t),ytr=r(exe," (GPT-J model)"),exe.forEach(t),Ltr=i(Te),J0=n(Te,"LI",{});var oxe=s(J0);epe=n(oxe,"STRONG",{});var Vlt=s(epe);xtr=r(Vlt,"openai-gpt"),Vlt.forEach(t),$tr=r(oxe," \u2014 "),tX=n(oxe,"A",{href:!0});var Xlt=s(tX);ktr=r(Xlt,"TFOpenAIGPTLMHeadModel"),Xlt.forEach(t),Str=r(oxe," (OpenAI GPT model)"),oxe.forEach(t),Rtr=i(Te),Y0=n(Te,"LI",{});var rxe=s(Y0);ope=n(rxe,"STRONG",{});var zlt=s(ope);Btr=r(zlt,"rembert"),zlt.forEach(t),Ptr=r(rxe," \u2014 "),aX=n(rxe,"A",{href:!0});var Qlt=s(aX);Itr=r(Qlt,"TFRemBertForCausalLM"),Qlt.forEach(t),qtr=r(rxe," (RemBERT model)"),rxe.forEach(t),Ntr=i(Te),K0=n(Te,"LI",{});var txe=s(K0);rpe=n(txe,"STRONG",{});var Wlt=s(rpe);jtr=r(Wlt,"roberta"),Wlt.forEach(t),Dtr=r(txe," \u2014 "),nX=n(txe,"A",{href:!0});var Hlt=s(nX);Gtr=r(Hlt,"TFRobertaForCausalLM"),Hlt.forEach(t),Otr=r(txe," (RoBERTa model)"),txe.forEach(t),Vtr=i(Te),Z0=n(Te,"LI",{});var axe=s(Z0);tpe=n(axe,"STRONG",{});var Ult=s(tpe);Xtr=r(Ult,"roformer"),Ult.forEach(t),ztr=r(axe," \u2014 "),sX=n(axe,"A",{href:!0});var Jlt=s(sX);Qtr=r(Jlt,"TFRoFormerForCausalLM"),Jlt.forEach(t),Wtr=r(axe," (RoFormer model)"),axe.forEach(t),Htr=i(Te),eT=n(Te,"LI",{});var nxe=s(eT);ape=n(nxe,"STRONG",{});var Ylt=s(ape);Utr=r(Ylt,"transfo-xl"),Ylt.forEach(t),Jtr=r(nxe," \u2014 "),lX=n(nxe,"A",{href:!0});var Klt=s(lX);Ytr=r(Klt,"TFTransfoXLLMHeadModel"),Klt.forEach(t),Ktr=r(nxe," (Transformer-XL model)"),nxe.forEach(t),Ztr=i(Te),oT=n(Te,"LI",{});var sxe=s(oT);npe=n(sxe,"STRONG",{});var Zlt=s(npe);ear=r(Zlt,"xlm"),Zlt.forEach(t),oar=r(sxe," \u2014 "),iX=n(sxe,"A",{href:!0});var eit=s(iX);rar=r(eit,"TFXLMWithLMHeadModel"),eit.forEach(t),tar=r(sxe," (XLM model)"),sxe.forEach(t),aar=i(Te),rT=n(Te,"LI",{});var lxe=s(rT);spe=n(lxe,"STRONG",{});var oit=s(spe);nar=r(oit,"xlnet"),oit.forEach(t),sar=r(lxe," \u2014 "),dX=n(lxe,"A",{href:!0});var rit=s(dX);lar=r(rit,"TFXLNetLMHeadModel"),rit.forEach(t),iar=r(lxe," (XLNet model)"),lxe.forEach(t),Te.forEach(t),dar=i(el),T(tT.$$.fragment,el),el.forEach(t),Zs.forEach(t),MSe=i(f),Sd=n(f,"H2",{class:!0});var wBe=s(Sd);aT=n(wBe,"A",{id:!0,class:!0,href:!0});var tit=s(aT);lpe=n(tit,"SPAN",{});var ait=s(lpe);T(Sy.$$.fragment,ait),ait.forEach(t),tit.forEach(t),car=i(wBe),ipe=n(wBe,"SPAN",{});var nit=s(ipe);far=r(nit,"TFAutoModelForImageClassification"),nit.forEach(t),wBe.forEach(t),ESe=i(f),Ko=n(f,"DIV",{class:!0});var ol=s(Ko);T(Ry.$$.fragment,ol),mar=i(ol),Rd=n(ol,"P",{});var AJ=s(Rd);gar=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=n(AJ,"A",{href:!0});var sit=s(cX);har=r(sit,"from_pretrained()"),sit.forEach(t),uar=r(AJ," class method or the "),fX=n(AJ,"A",{href:!0});var lit=s(fX);par=r(lit,"from_config()"),lit.forEach(t),_ar=r(AJ,` class
method.`),AJ.forEach(t),bar=i(ol),By=n(ol,"P",{});var ABe=s(By);Far=r(ABe,"This class cannot be instantiated directly using "),dpe=n(ABe,"CODE",{});var iit=s(dpe);Tar=r(iit,"__init__()"),iit.forEach(t),Mar=r(ABe," (throws an error)."),ABe.forEach(t),Ear=i(ol),wt=n(ol,"DIV",{class:!0});var V3=s(wt);T(Py.$$.fragment,V3),Car=i(V3),cpe=n(V3,"P",{});var dit=s(cpe);war=r(dit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dit.forEach(t),Aar=i(V3),Bd=n(V3,"P",{});var yJ=s(Bd);yar=r(yJ,`Note:
Loading a model from its configuration file does `),fpe=n(yJ,"STRONG",{});var cit=s(fpe);Lar=r(cit,"not"),cit.forEach(t),xar=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(yJ,"A",{href:!0});var fit=s(mX);$ar=r(fit,"from_pretrained()"),fit.forEach(t),kar=r(yJ," to load the model weights."),yJ.forEach(t),Sar=i(V3),T(nT.$$.fragment,V3),V3.forEach(t),Rar=i(ol),wr=n(ol,"DIV",{class:!0});var rl=s(wr);T(Iy.$$.fragment,rl),Bar=i(rl),mpe=n(rl,"P",{});var mit=s(mpe);Par=r(mit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mit.forEach(t),Iar=i(rl),Ja=n(rl,"P",{});var X3=s(Ja);qar=r(X3,"The model class to instantiate is selected based on the "),gpe=n(X3,"CODE",{});var git=s(gpe);Nar=r(git,"model_type"),git.forEach(t),jar=r(X3,` property of the config object (either
passed as an argument or loaded from `),hpe=n(X3,"CODE",{});var hit=s(hpe);Dar=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),Gar=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(X3,"CODE",{});var uit=s(upe);Oar=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),Var=r(X3,":"),X3.forEach(t),Xar=i(rl),qy=n(rl,"UL",{});var yBe=s(qy);sT=n(yBe,"LI",{});var ixe=s(sT);ppe=n(ixe,"STRONG",{});var pit=s(ppe);zar=r(pit,"convnext"),pit.forEach(t),Qar=r(ixe," \u2014 "),gX=n(ixe,"A",{href:!0});var _it=s(gX);War=r(_it,"TFConvNextForImageClassification"),_it.forEach(t),Har=r(ixe," (ConvNext model)"),ixe.forEach(t),Uar=i(yBe),lT=n(yBe,"LI",{});var dxe=s(lT);_pe=n(dxe,"STRONG",{});var vit=s(_pe);Jar=r(vit,"vit"),vit.forEach(t),Yar=r(dxe," \u2014 "),hX=n(dxe,"A",{href:!0});var bit=s(hX);Kar=r(bit,"TFViTForImageClassification"),bit.forEach(t),Zar=r(dxe," (ViT model)"),dxe.forEach(t),yBe.forEach(t),enr=i(rl),T(iT.$$.fragment,rl),rl.forEach(t),ol.forEach(t),CSe=i(f),Pd=n(f,"H2",{class:!0});var LBe=s(Pd);dT=n(LBe,"A",{id:!0,class:!0,href:!0});var Fit=s(dT);vpe=n(Fit,"SPAN",{});var Tit=s(vpe);T(Ny.$$.fragment,Tit),Tit.forEach(t),Fit.forEach(t),onr=i(LBe),bpe=n(LBe,"SPAN",{});var Mit=s(bpe);rnr=r(Mit,"TFAutoModelForMaskedLM"),Mit.forEach(t),LBe.forEach(t),wSe=i(f),Zo=n(f,"DIV",{class:!0});var tl=s(Zo);T(jy.$$.fragment,tl),tnr=i(tl),Id=n(tl,"P",{});var LJ=s(Id);anr=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uX=n(LJ,"A",{href:!0});var Eit=s(uX);nnr=r(Eit,"from_pretrained()"),Eit.forEach(t),snr=r(LJ," class method or the "),pX=n(LJ,"A",{href:!0});var Cit=s(pX);lnr=r(Cit,"from_config()"),Cit.forEach(t),inr=r(LJ,` class
method.`),LJ.forEach(t),dnr=i(tl),Dy=n(tl,"P",{});var xBe=s(Dy);cnr=r(xBe,"This class cannot be instantiated directly using "),Fpe=n(xBe,"CODE",{});var wit=s(Fpe);fnr=r(wit,"__init__()"),wit.forEach(t),mnr=r(xBe," (throws an error)."),xBe.forEach(t),gnr=i(tl),At=n(tl,"DIV",{class:!0});var z3=s(At);T(Gy.$$.fragment,z3),hnr=i(z3),Tpe=n(z3,"P",{});var Ait=s(Tpe);unr=r(Ait,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ait.forEach(t),pnr=i(z3),qd=n(z3,"P",{});var xJ=s(qd);_nr=r(xJ,`Note:
Loading a model from its configuration file does `),Mpe=n(xJ,"STRONG",{});var yit=s(Mpe);vnr=r(yit,"not"),yit.forEach(t),bnr=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(xJ,"A",{href:!0});var Lit=s(_X);Fnr=r(Lit,"from_pretrained()"),Lit.forEach(t),Tnr=r(xJ," to load the model weights."),xJ.forEach(t),Mnr=i(z3),T(cT.$$.fragment,z3),z3.forEach(t),Enr=i(tl),Ar=n(tl,"DIV",{class:!0});var al=s(Ar);T(Oy.$$.fragment,al),Cnr=i(al),Epe=n(al,"P",{});var xit=s(Epe);wnr=r(xit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xit.forEach(t),Anr=i(al),Ya=n(al,"P",{});var Q3=s(Ya);ynr=r(Q3,"The model class to instantiate is selected based on the "),Cpe=n(Q3,"CODE",{});var $it=s(Cpe);Lnr=r($it,"model_type"),$it.forEach(t),xnr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),wpe=n(Q3,"CODE",{});var kit=s(wpe);$nr=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),knr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(Q3,"CODE",{});var Sit=s(Ape);Snr=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),Rnr=r(Q3,":"),Q3.forEach(t),Bnr=i(al),se=n(al,"UL",{});var de=s(se);fT=n(de,"LI",{});var cxe=s(fT);ype=n(cxe,"STRONG",{});var Rit=s(ype);Pnr=r(Rit,"albert"),Rit.forEach(t),Inr=r(cxe," \u2014 "),vX=n(cxe,"A",{href:!0});var Bit=s(vX);qnr=r(Bit,"TFAlbertForMaskedLM"),Bit.forEach(t),Nnr=r(cxe," (ALBERT model)"),cxe.forEach(t),jnr=i(de),mT=n(de,"LI",{});var fxe=s(mT);Lpe=n(fxe,"STRONG",{});var Pit=s(Lpe);Dnr=r(Pit,"bert"),Pit.forEach(t),Gnr=r(fxe," \u2014 "),bX=n(fxe,"A",{href:!0});var Iit=s(bX);Onr=r(Iit,"TFBertForMaskedLM"),Iit.forEach(t),Vnr=r(fxe," (BERT model)"),fxe.forEach(t),Xnr=i(de),gT=n(de,"LI",{});var mxe=s(gT);xpe=n(mxe,"STRONG",{});var qit=s(xpe);znr=r(qit,"camembert"),qit.forEach(t),Qnr=r(mxe," \u2014 "),FX=n(mxe,"A",{href:!0});var Nit=s(FX);Wnr=r(Nit,"TFCamembertForMaskedLM"),Nit.forEach(t),Hnr=r(mxe," (CamemBERT model)"),mxe.forEach(t),Unr=i(de),hT=n(de,"LI",{});var gxe=s(hT);$pe=n(gxe,"STRONG",{});var jit=s($pe);Jnr=r(jit,"convbert"),jit.forEach(t),Ynr=r(gxe," \u2014 "),TX=n(gxe,"A",{href:!0});var Dit=s(TX);Knr=r(Dit,"TFConvBertForMaskedLM"),Dit.forEach(t),Znr=r(gxe," (ConvBERT model)"),gxe.forEach(t),esr=i(de),uT=n(de,"LI",{});var hxe=s(uT);kpe=n(hxe,"STRONG",{});var Git=s(kpe);osr=r(Git,"deberta"),Git.forEach(t),rsr=r(hxe," \u2014 "),MX=n(hxe,"A",{href:!0});var Oit=s(MX);tsr=r(Oit,"TFDebertaForMaskedLM"),Oit.forEach(t),asr=r(hxe," (DeBERTa model)"),hxe.forEach(t),nsr=i(de),pT=n(de,"LI",{});var uxe=s(pT);Spe=n(uxe,"STRONG",{});var Vit=s(Spe);ssr=r(Vit,"deberta-v2"),Vit.forEach(t),lsr=r(uxe," \u2014 "),EX=n(uxe,"A",{href:!0});var Xit=s(EX);isr=r(Xit,"TFDebertaV2ForMaskedLM"),Xit.forEach(t),dsr=r(uxe," (DeBERTa-v2 model)"),uxe.forEach(t),csr=i(de),_T=n(de,"LI",{});var pxe=s(_T);Rpe=n(pxe,"STRONG",{});var zit=s(Rpe);fsr=r(zit,"distilbert"),zit.forEach(t),msr=r(pxe," \u2014 "),CX=n(pxe,"A",{href:!0});var Qit=s(CX);gsr=r(Qit,"TFDistilBertForMaskedLM"),Qit.forEach(t),hsr=r(pxe," (DistilBERT model)"),pxe.forEach(t),usr=i(de),vT=n(de,"LI",{});var _xe=s(vT);Bpe=n(_xe,"STRONG",{});var Wit=s(Bpe);psr=r(Wit,"electra"),Wit.forEach(t),_sr=r(_xe," \u2014 "),wX=n(_xe,"A",{href:!0});var Hit=s(wX);vsr=r(Hit,"TFElectraForMaskedLM"),Hit.forEach(t),bsr=r(_xe," (ELECTRA model)"),_xe.forEach(t),Fsr=i(de),bT=n(de,"LI",{});var vxe=s(bT);Ppe=n(vxe,"STRONG",{});var Uit=s(Ppe);Tsr=r(Uit,"flaubert"),Uit.forEach(t),Msr=r(vxe," \u2014 "),AX=n(vxe,"A",{href:!0});var Jit=s(AX);Esr=r(Jit,"TFFlaubertWithLMHeadModel"),Jit.forEach(t),Csr=r(vxe," (FlauBERT model)"),vxe.forEach(t),wsr=i(de),FT=n(de,"LI",{});var bxe=s(FT);Ipe=n(bxe,"STRONG",{});var Yit=s(Ipe);Asr=r(Yit,"funnel"),Yit.forEach(t),ysr=r(bxe," \u2014 "),yX=n(bxe,"A",{href:!0});var Kit=s(yX);Lsr=r(Kit,"TFFunnelForMaskedLM"),Kit.forEach(t),xsr=r(bxe," (Funnel Transformer model)"),bxe.forEach(t),$sr=i(de),TT=n(de,"LI",{});var Fxe=s(TT);qpe=n(Fxe,"STRONG",{});var Zit=s(qpe);ksr=r(Zit,"layoutlm"),Zit.forEach(t),Ssr=r(Fxe," \u2014 "),LX=n(Fxe,"A",{href:!0});var edt=s(LX);Rsr=r(edt,"TFLayoutLMForMaskedLM"),edt.forEach(t),Bsr=r(Fxe," (LayoutLM model)"),Fxe.forEach(t),Psr=i(de),MT=n(de,"LI",{});var Txe=s(MT);Npe=n(Txe,"STRONG",{});var odt=s(Npe);Isr=r(odt,"longformer"),odt.forEach(t),qsr=r(Txe," \u2014 "),xX=n(Txe,"A",{href:!0});var rdt=s(xX);Nsr=r(rdt,"TFLongformerForMaskedLM"),rdt.forEach(t),jsr=r(Txe," (Longformer model)"),Txe.forEach(t),Dsr=i(de),ET=n(de,"LI",{});var Mxe=s(ET);jpe=n(Mxe,"STRONG",{});var tdt=s(jpe);Gsr=r(tdt,"mobilebert"),tdt.forEach(t),Osr=r(Mxe," \u2014 "),$X=n(Mxe,"A",{href:!0});var adt=s($X);Vsr=r(adt,"TFMobileBertForMaskedLM"),adt.forEach(t),Xsr=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),zsr=i(de),CT=n(de,"LI",{});var Exe=s(CT);Dpe=n(Exe,"STRONG",{});var ndt=s(Dpe);Qsr=r(ndt,"mpnet"),ndt.forEach(t),Wsr=r(Exe," \u2014 "),kX=n(Exe,"A",{href:!0});var sdt=s(kX);Hsr=r(sdt,"TFMPNetForMaskedLM"),sdt.forEach(t),Usr=r(Exe," (MPNet model)"),Exe.forEach(t),Jsr=i(de),wT=n(de,"LI",{});var Cxe=s(wT);Gpe=n(Cxe,"STRONG",{});var ldt=s(Gpe);Ysr=r(ldt,"rembert"),ldt.forEach(t),Ksr=r(Cxe," \u2014 "),SX=n(Cxe,"A",{href:!0});var idt=s(SX);Zsr=r(idt,"TFRemBertForMaskedLM"),idt.forEach(t),elr=r(Cxe," (RemBERT model)"),Cxe.forEach(t),olr=i(de),AT=n(de,"LI",{});var wxe=s(AT);Ope=n(wxe,"STRONG",{});var ddt=s(Ope);rlr=r(ddt,"roberta"),ddt.forEach(t),tlr=r(wxe," \u2014 "),RX=n(wxe,"A",{href:!0});var cdt=s(RX);alr=r(cdt,"TFRobertaForMaskedLM"),cdt.forEach(t),nlr=r(wxe," (RoBERTa model)"),wxe.forEach(t),slr=i(de),yT=n(de,"LI",{});var Axe=s(yT);Vpe=n(Axe,"STRONG",{});var fdt=s(Vpe);llr=r(fdt,"roformer"),fdt.forEach(t),ilr=r(Axe," \u2014 "),BX=n(Axe,"A",{href:!0});var mdt=s(BX);dlr=r(mdt,"TFRoFormerForMaskedLM"),mdt.forEach(t),clr=r(Axe," (RoFormer model)"),Axe.forEach(t),flr=i(de),LT=n(de,"LI",{});var yxe=s(LT);Xpe=n(yxe,"STRONG",{});var gdt=s(Xpe);mlr=r(gdt,"tapas"),gdt.forEach(t),glr=r(yxe," \u2014 "),PX=n(yxe,"A",{href:!0});var hdt=s(PX);hlr=r(hdt,"TFTapasForMaskedLM"),hdt.forEach(t),ulr=r(yxe," (TAPAS model)"),yxe.forEach(t),plr=i(de),xT=n(de,"LI",{});var Lxe=s(xT);zpe=n(Lxe,"STRONG",{});var udt=s(zpe);_lr=r(udt,"xlm"),udt.forEach(t),vlr=r(Lxe," \u2014 "),IX=n(Lxe,"A",{href:!0});var pdt=s(IX);blr=r(pdt,"TFXLMWithLMHeadModel"),pdt.forEach(t),Flr=r(Lxe," (XLM model)"),Lxe.forEach(t),Tlr=i(de),$T=n(de,"LI",{});var xxe=s($T);Qpe=n(xxe,"STRONG",{});var _dt=s(Qpe);Mlr=r(_dt,"xlm-roberta"),_dt.forEach(t),Elr=r(xxe," \u2014 "),qX=n(xxe,"A",{href:!0});var vdt=s(qX);Clr=r(vdt,"TFXLMRobertaForMaskedLM"),vdt.forEach(t),wlr=r(xxe," (XLM-RoBERTa model)"),xxe.forEach(t),de.forEach(t),Alr=i(al),T(kT.$$.fragment,al),al.forEach(t),tl.forEach(t),ASe=i(f),Nd=n(f,"H2",{class:!0});var $Be=s(Nd);ST=n($Be,"A",{id:!0,class:!0,href:!0});var bdt=s(ST);Wpe=n(bdt,"SPAN",{});var Fdt=s(Wpe);T(Vy.$$.fragment,Fdt),Fdt.forEach(t),bdt.forEach(t),ylr=i($Be),Hpe=n($Be,"SPAN",{});var Tdt=s(Hpe);Llr=r(Tdt,"TFAutoModelForSeq2SeqLM"),Tdt.forEach(t),$Be.forEach(t),ySe=i(f),er=n(f,"DIV",{class:!0});var nl=s(er);T(Xy.$$.fragment,nl),xlr=i(nl),jd=n(nl,"P",{});var $J=s(jd);$lr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NX=n($J,"A",{href:!0});var Mdt=s(NX);klr=r(Mdt,"from_pretrained()"),Mdt.forEach(t),Slr=r($J," class method or the "),jX=n($J,"A",{href:!0});var Edt=s(jX);Rlr=r(Edt,"from_config()"),Edt.forEach(t),Blr=r($J,` class
method.`),$J.forEach(t),Plr=i(nl),zy=n(nl,"P",{});var kBe=s(zy);Ilr=r(kBe,"This class cannot be instantiated directly using "),Upe=n(kBe,"CODE",{});var Cdt=s(Upe);qlr=r(Cdt,"__init__()"),Cdt.forEach(t),Nlr=r(kBe," (throws an error)."),kBe.forEach(t),jlr=i(nl),yt=n(nl,"DIV",{class:!0});var W3=s(yt);T(Qy.$$.fragment,W3),Dlr=i(W3),Jpe=n(W3,"P",{});var wdt=s(Jpe);Glr=r(wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wdt.forEach(t),Olr=i(W3),Dd=n(W3,"P",{});var kJ=s(Dd);Vlr=r(kJ,`Note:
Loading a model from its configuration file does `),Ype=n(kJ,"STRONG",{});var Adt=s(Ype);Xlr=r(Adt,"not"),Adt.forEach(t),zlr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(kJ,"A",{href:!0});var ydt=s(DX);Qlr=r(ydt,"from_pretrained()"),ydt.forEach(t),Wlr=r(kJ," to load the model weights."),kJ.forEach(t),Hlr=i(W3),T(RT.$$.fragment,W3),W3.forEach(t),Ulr=i(nl),yr=n(nl,"DIV",{class:!0});var sl=s(yr);T(Wy.$$.fragment,sl),Jlr=i(sl),Kpe=n(sl,"P",{});var Ldt=s(Kpe);Ylr=r(Ldt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldt.forEach(t),Klr=i(sl),Ka=n(sl,"P",{});var H3=s(Ka);Zlr=r(H3,"The model class to instantiate is selected based on the "),Zpe=n(H3,"CODE",{});var xdt=s(Zpe);eir=r(xdt,"model_type"),xdt.forEach(t),oir=r(H3,` property of the config object (either
passed as an argument or loaded from `),e_e=n(H3,"CODE",{});var $dt=s(e_e);rir=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),tir=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o_e=n(H3,"CODE",{});var kdt=s(o_e);air=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),nir=r(H3,":"),H3.forEach(t),sir=i(sl),Ce=n(sl,"UL",{});var $e=s(Ce);BT=n($e,"LI",{});var $xe=s(BT);r_e=n($xe,"STRONG",{});var Sdt=s(r_e);lir=r(Sdt,"bart"),Sdt.forEach(t),iir=r($xe," \u2014 "),GX=n($xe,"A",{href:!0});var Rdt=s(GX);dir=r(Rdt,"TFBartForConditionalGeneration"),Rdt.forEach(t),cir=r($xe," (BART model)"),$xe.forEach(t),fir=i($e),PT=n($e,"LI",{});var kxe=s(PT);t_e=n(kxe,"STRONG",{});var Bdt=s(t_e);mir=r(Bdt,"blenderbot"),Bdt.forEach(t),gir=r(kxe," \u2014 "),OX=n(kxe,"A",{href:!0});var Pdt=s(OX);hir=r(Pdt,"TFBlenderbotForConditionalGeneration"),Pdt.forEach(t),uir=r(kxe," (Blenderbot model)"),kxe.forEach(t),pir=i($e),IT=n($e,"LI",{});var Sxe=s(IT);a_e=n(Sxe,"STRONG",{});var Idt=s(a_e);_ir=r(Idt,"blenderbot-small"),Idt.forEach(t),vir=r(Sxe," \u2014 "),VX=n(Sxe,"A",{href:!0});var qdt=s(VX);bir=r(qdt,"TFBlenderbotSmallForConditionalGeneration"),qdt.forEach(t),Fir=r(Sxe," (BlenderbotSmall model)"),Sxe.forEach(t),Tir=i($e),qT=n($e,"LI",{});var Rxe=s(qT);n_e=n(Rxe,"STRONG",{});var Ndt=s(n_e);Mir=r(Ndt,"encoder-decoder"),Ndt.forEach(t),Eir=r(Rxe," \u2014 "),XX=n(Rxe,"A",{href:!0});var jdt=s(XX);Cir=r(jdt,"TFEncoderDecoderModel"),jdt.forEach(t),wir=r(Rxe," (Encoder decoder model)"),Rxe.forEach(t),Air=i($e),NT=n($e,"LI",{});var Bxe=s(NT);s_e=n(Bxe,"STRONG",{});var Ddt=s(s_e);yir=r(Ddt,"led"),Ddt.forEach(t),Lir=r(Bxe," \u2014 "),zX=n(Bxe,"A",{href:!0});var Gdt=s(zX);xir=r(Gdt,"TFLEDForConditionalGeneration"),Gdt.forEach(t),$ir=r(Bxe," (LED model)"),Bxe.forEach(t),kir=i($e),jT=n($e,"LI",{});var Pxe=s(jT);l_e=n(Pxe,"STRONG",{});var Odt=s(l_e);Sir=r(Odt,"marian"),Odt.forEach(t),Rir=r(Pxe," \u2014 "),QX=n(Pxe,"A",{href:!0});var Vdt=s(QX);Bir=r(Vdt,"TFMarianMTModel"),Vdt.forEach(t),Pir=r(Pxe," (Marian model)"),Pxe.forEach(t),Iir=i($e),DT=n($e,"LI",{});var Ixe=s(DT);i_e=n(Ixe,"STRONG",{});var Xdt=s(i_e);qir=r(Xdt,"mbart"),Xdt.forEach(t),Nir=r(Ixe," \u2014 "),WX=n(Ixe,"A",{href:!0});var zdt=s(WX);jir=r(zdt,"TFMBartForConditionalGeneration"),zdt.forEach(t),Dir=r(Ixe," (mBART model)"),Ixe.forEach(t),Gir=i($e),GT=n($e,"LI",{});var qxe=s(GT);d_e=n(qxe,"STRONG",{});var Qdt=s(d_e);Oir=r(Qdt,"mt5"),Qdt.forEach(t),Vir=r(qxe," \u2014 "),HX=n(qxe,"A",{href:!0});var Wdt=s(HX);Xir=r(Wdt,"TFMT5ForConditionalGeneration"),Wdt.forEach(t),zir=r(qxe," (mT5 model)"),qxe.forEach(t),Qir=i($e),OT=n($e,"LI",{});var Nxe=s(OT);c_e=n(Nxe,"STRONG",{});var Hdt=s(c_e);Wir=r(Hdt,"pegasus"),Hdt.forEach(t),Hir=r(Nxe," \u2014 "),UX=n(Nxe,"A",{href:!0});var Udt=s(UX);Uir=r(Udt,"TFPegasusForConditionalGeneration"),Udt.forEach(t),Jir=r(Nxe," (Pegasus model)"),Nxe.forEach(t),Yir=i($e),VT=n($e,"LI",{});var jxe=s(VT);f_e=n(jxe,"STRONG",{});var Jdt=s(f_e);Kir=r(Jdt,"t5"),Jdt.forEach(t),Zir=r(jxe," \u2014 "),JX=n(jxe,"A",{href:!0});var Ydt=s(JX);edr=r(Ydt,"TFT5ForConditionalGeneration"),Ydt.forEach(t),odr=r(jxe," (T5 model)"),jxe.forEach(t),$e.forEach(t),rdr=i(sl),T(XT.$$.fragment,sl),sl.forEach(t),nl.forEach(t),LSe=i(f),Gd=n(f,"H2",{class:!0});var SBe=s(Gd);zT=n(SBe,"A",{id:!0,class:!0,href:!0});var Kdt=s(zT);m_e=n(Kdt,"SPAN",{});var Zdt=s(m_e);T(Hy.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),tdr=i(SBe),g_e=n(SBe,"SPAN",{});var ect=s(g_e);adr=r(ect,"TFAutoModelForSequenceClassification"),ect.forEach(t),SBe.forEach(t),xSe=i(f),or=n(f,"DIV",{class:!0});var ll=s(or);T(Uy.$$.fragment,ll),ndr=i(ll),Od=n(ll,"P",{});var SJ=s(Od);sdr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YX=n(SJ,"A",{href:!0});var oct=s(YX);ldr=r(oct,"from_pretrained()"),oct.forEach(t),idr=r(SJ," class method or the "),KX=n(SJ,"A",{href:!0});var rct=s(KX);ddr=r(rct,"from_config()"),rct.forEach(t),cdr=r(SJ,` class
method.`),SJ.forEach(t),fdr=i(ll),Jy=n(ll,"P",{});var RBe=s(Jy);mdr=r(RBe,"This class cannot be instantiated directly using "),h_e=n(RBe,"CODE",{});var tct=s(h_e);gdr=r(tct,"__init__()"),tct.forEach(t),hdr=r(RBe," (throws an error)."),RBe.forEach(t),udr=i(ll),Lt=n(ll,"DIV",{class:!0});var U3=s(Lt);T(Yy.$$.fragment,U3),pdr=i(U3),u_e=n(U3,"P",{});var act=s(u_e);_dr=r(act,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),act.forEach(t),vdr=i(U3),Vd=n(U3,"P",{});var RJ=s(Vd);bdr=r(RJ,`Note:
Loading a model from its configuration file does `),p_e=n(RJ,"STRONG",{});var nct=s(p_e);Fdr=r(nct,"not"),nct.forEach(t),Tdr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(RJ,"A",{href:!0});var sct=s(ZX);Mdr=r(sct,"from_pretrained()"),sct.forEach(t),Edr=r(RJ," to load the model weights."),RJ.forEach(t),Cdr=i(U3),T(QT.$$.fragment,U3),U3.forEach(t),wdr=i(ll),Lr=n(ll,"DIV",{class:!0});var il=s(Lr);T(Ky.$$.fragment,il),Adr=i(il),__e=n(il,"P",{});var lct=s(__e);ydr=r(lct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lct.forEach(t),Ldr=i(il),Za=n(il,"P",{});var J3=s(Za);xdr=r(J3,"The model class to instantiate is selected based on the "),v_e=n(J3,"CODE",{});var ict=s(v_e);$dr=r(ict,"model_type"),ict.forEach(t),kdr=r(J3,` property of the config object (either
passed as an argument or loaded from `),b_e=n(J3,"CODE",{});var dct=s(b_e);Sdr=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),Rdr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(J3,"CODE",{});var cct=s(F_e);Bdr=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),Pdr=r(J3,":"),J3.forEach(t),Idr=i(il),Z=n(il,"UL",{});var re=s(Z);WT=n(re,"LI",{});var Dxe=s(WT);T_e=n(Dxe,"STRONG",{});var fct=s(T_e);qdr=r(fct,"albert"),fct.forEach(t),Ndr=r(Dxe," \u2014 "),ez=n(Dxe,"A",{href:!0});var mct=s(ez);jdr=r(mct,"TFAlbertForSequenceClassification"),mct.forEach(t),Ddr=r(Dxe," (ALBERT model)"),Dxe.forEach(t),Gdr=i(re),HT=n(re,"LI",{});var Gxe=s(HT);M_e=n(Gxe,"STRONG",{});var gct=s(M_e);Odr=r(gct,"bert"),gct.forEach(t),Vdr=r(Gxe," \u2014 "),oz=n(Gxe,"A",{href:!0});var hct=s(oz);Xdr=r(hct,"TFBertForSequenceClassification"),hct.forEach(t),zdr=r(Gxe," (BERT model)"),Gxe.forEach(t),Qdr=i(re),UT=n(re,"LI",{});var Oxe=s(UT);E_e=n(Oxe,"STRONG",{});var uct=s(E_e);Wdr=r(uct,"camembert"),uct.forEach(t),Hdr=r(Oxe," \u2014 "),rz=n(Oxe,"A",{href:!0});var pct=s(rz);Udr=r(pct,"TFCamembertForSequenceClassification"),pct.forEach(t),Jdr=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),Ydr=i(re),JT=n(re,"LI",{});var Vxe=s(JT);C_e=n(Vxe,"STRONG",{});var _ct=s(C_e);Kdr=r(_ct,"convbert"),_ct.forEach(t),Zdr=r(Vxe," \u2014 "),tz=n(Vxe,"A",{href:!0});var vct=s(tz);ecr=r(vct,"TFConvBertForSequenceClassification"),vct.forEach(t),ocr=r(Vxe," (ConvBERT model)"),Vxe.forEach(t),rcr=i(re),YT=n(re,"LI",{});var Xxe=s(YT);w_e=n(Xxe,"STRONG",{});var bct=s(w_e);tcr=r(bct,"ctrl"),bct.forEach(t),acr=r(Xxe," \u2014 "),az=n(Xxe,"A",{href:!0});var Fct=s(az);ncr=r(Fct,"TFCTRLForSequenceClassification"),Fct.forEach(t),scr=r(Xxe," (CTRL model)"),Xxe.forEach(t),lcr=i(re),KT=n(re,"LI",{});var zxe=s(KT);A_e=n(zxe,"STRONG",{});var Tct=s(A_e);icr=r(Tct,"deberta"),Tct.forEach(t),dcr=r(zxe," \u2014 "),nz=n(zxe,"A",{href:!0});var Mct=s(nz);ccr=r(Mct,"TFDebertaForSequenceClassification"),Mct.forEach(t),fcr=r(zxe," (DeBERTa model)"),zxe.forEach(t),mcr=i(re),ZT=n(re,"LI",{});var Qxe=s(ZT);y_e=n(Qxe,"STRONG",{});var Ect=s(y_e);gcr=r(Ect,"deberta-v2"),Ect.forEach(t),hcr=r(Qxe," \u2014 "),sz=n(Qxe,"A",{href:!0});var Cct=s(sz);ucr=r(Cct,"TFDebertaV2ForSequenceClassification"),Cct.forEach(t),pcr=r(Qxe," (DeBERTa-v2 model)"),Qxe.forEach(t),_cr=i(re),e8=n(re,"LI",{});var Wxe=s(e8);L_e=n(Wxe,"STRONG",{});var wct=s(L_e);vcr=r(wct,"distilbert"),wct.forEach(t),bcr=r(Wxe," \u2014 "),lz=n(Wxe,"A",{href:!0});var Act=s(lz);Fcr=r(Act,"TFDistilBertForSequenceClassification"),Act.forEach(t),Tcr=r(Wxe," (DistilBERT model)"),Wxe.forEach(t),Mcr=i(re),o8=n(re,"LI",{});var Hxe=s(o8);x_e=n(Hxe,"STRONG",{});var yct=s(x_e);Ecr=r(yct,"electra"),yct.forEach(t),Ccr=r(Hxe," \u2014 "),iz=n(Hxe,"A",{href:!0});var Lct=s(iz);wcr=r(Lct,"TFElectraForSequenceClassification"),Lct.forEach(t),Acr=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),ycr=i(re),r8=n(re,"LI",{});var Uxe=s(r8);$_e=n(Uxe,"STRONG",{});var xct=s($_e);Lcr=r(xct,"flaubert"),xct.forEach(t),xcr=r(Uxe," \u2014 "),dz=n(Uxe,"A",{href:!0});var $ct=s(dz);$cr=r($ct,"TFFlaubertForSequenceClassification"),$ct.forEach(t),kcr=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),Scr=i(re),t8=n(re,"LI",{});var Jxe=s(t8);k_e=n(Jxe,"STRONG",{});var kct=s(k_e);Rcr=r(kct,"funnel"),kct.forEach(t),Bcr=r(Jxe," \u2014 "),cz=n(Jxe,"A",{href:!0});var Sct=s(cz);Pcr=r(Sct,"TFFunnelForSequenceClassification"),Sct.forEach(t),Icr=r(Jxe," (Funnel Transformer model)"),Jxe.forEach(t),qcr=i(re),a8=n(re,"LI",{});var Yxe=s(a8);S_e=n(Yxe,"STRONG",{});var Rct=s(S_e);Ncr=r(Rct,"gpt2"),Rct.forEach(t),jcr=r(Yxe," \u2014 "),fz=n(Yxe,"A",{href:!0});var Bct=s(fz);Dcr=r(Bct,"TFGPT2ForSequenceClassification"),Bct.forEach(t),Gcr=r(Yxe," (OpenAI GPT-2 model)"),Yxe.forEach(t),Ocr=i(re),n8=n(re,"LI",{});var Kxe=s(n8);R_e=n(Kxe,"STRONG",{});var Pct=s(R_e);Vcr=r(Pct,"gptj"),Pct.forEach(t),Xcr=r(Kxe," \u2014 "),mz=n(Kxe,"A",{href:!0});var Ict=s(mz);zcr=r(Ict,"TFGPTJForSequenceClassification"),Ict.forEach(t),Qcr=r(Kxe," (GPT-J model)"),Kxe.forEach(t),Wcr=i(re),s8=n(re,"LI",{});var Zxe=s(s8);B_e=n(Zxe,"STRONG",{});var qct=s(B_e);Hcr=r(qct,"layoutlm"),qct.forEach(t),Ucr=r(Zxe," \u2014 "),gz=n(Zxe,"A",{href:!0});var Nct=s(gz);Jcr=r(Nct,"TFLayoutLMForSequenceClassification"),Nct.forEach(t),Ycr=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),Kcr=i(re),l8=n(re,"LI",{});var e7e=s(l8);P_e=n(e7e,"STRONG",{});var jct=s(P_e);Zcr=r(jct,"longformer"),jct.forEach(t),efr=r(e7e," \u2014 "),hz=n(e7e,"A",{href:!0});var Dct=s(hz);ofr=r(Dct,"TFLongformerForSequenceClassification"),Dct.forEach(t),rfr=r(e7e," (Longformer model)"),e7e.forEach(t),tfr=i(re),i8=n(re,"LI",{});var o7e=s(i8);I_e=n(o7e,"STRONG",{});var Gct=s(I_e);afr=r(Gct,"mobilebert"),Gct.forEach(t),nfr=r(o7e," \u2014 "),uz=n(o7e,"A",{href:!0});var Oct=s(uz);sfr=r(Oct,"TFMobileBertForSequenceClassification"),Oct.forEach(t),lfr=r(o7e," (MobileBERT model)"),o7e.forEach(t),ifr=i(re),d8=n(re,"LI",{});var r7e=s(d8);q_e=n(r7e,"STRONG",{});var Vct=s(q_e);dfr=r(Vct,"mpnet"),Vct.forEach(t),cfr=r(r7e," \u2014 "),pz=n(r7e,"A",{href:!0});var Xct=s(pz);ffr=r(Xct,"TFMPNetForSequenceClassification"),Xct.forEach(t),mfr=r(r7e," (MPNet model)"),r7e.forEach(t),gfr=i(re),c8=n(re,"LI",{});var t7e=s(c8);N_e=n(t7e,"STRONG",{});var zct=s(N_e);hfr=r(zct,"openai-gpt"),zct.forEach(t),ufr=r(t7e," \u2014 "),_z=n(t7e,"A",{href:!0});var Qct=s(_z);pfr=r(Qct,"TFOpenAIGPTForSequenceClassification"),Qct.forEach(t),_fr=r(t7e," (OpenAI GPT model)"),t7e.forEach(t),vfr=i(re),f8=n(re,"LI",{});var a7e=s(f8);j_e=n(a7e,"STRONG",{});var Wct=s(j_e);bfr=r(Wct,"rembert"),Wct.forEach(t),Ffr=r(a7e," \u2014 "),vz=n(a7e,"A",{href:!0});var Hct=s(vz);Tfr=r(Hct,"TFRemBertForSequenceClassification"),Hct.forEach(t),Mfr=r(a7e," (RemBERT model)"),a7e.forEach(t),Efr=i(re),m8=n(re,"LI",{});var n7e=s(m8);D_e=n(n7e,"STRONG",{});var Uct=s(D_e);Cfr=r(Uct,"roberta"),Uct.forEach(t),wfr=r(n7e," \u2014 "),bz=n(n7e,"A",{href:!0});var Jct=s(bz);Afr=r(Jct,"TFRobertaForSequenceClassification"),Jct.forEach(t),yfr=r(n7e," (RoBERTa model)"),n7e.forEach(t),Lfr=i(re),g8=n(re,"LI",{});var s7e=s(g8);G_e=n(s7e,"STRONG",{});var Yct=s(G_e);xfr=r(Yct,"roformer"),Yct.forEach(t),$fr=r(s7e," \u2014 "),Fz=n(s7e,"A",{href:!0});var Kct=s(Fz);kfr=r(Kct,"TFRoFormerForSequenceClassification"),Kct.forEach(t),Sfr=r(s7e," (RoFormer model)"),s7e.forEach(t),Rfr=i(re),h8=n(re,"LI",{});var l7e=s(h8);O_e=n(l7e,"STRONG",{});var Zct=s(O_e);Bfr=r(Zct,"tapas"),Zct.forEach(t),Pfr=r(l7e," \u2014 "),Tz=n(l7e,"A",{href:!0});var eft=s(Tz);Ifr=r(eft,"TFTapasForSequenceClassification"),eft.forEach(t),qfr=r(l7e," (TAPAS model)"),l7e.forEach(t),Nfr=i(re),u8=n(re,"LI",{});var i7e=s(u8);V_e=n(i7e,"STRONG",{});var oft=s(V_e);jfr=r(oft,"transfo-xl"),oft.forEach(t),Dfr=r(i7e," \u2014 "),Mz=n(i7e,"A",{href:!0});var rft=s(Mz);Gfr=r(rft,"TFTransfoXLForSequenceClassification"),rft.forEach(t),Ofr=r(i7e," (Transformer-XL model)"),i7e.forEach(t),Vfr=i(re),p8=n(re,"LI",{});var d7e=s(p8);X_e=n(d7e,"STRONG",{});var tft=s(X_e);Xfr=r(tft,"xlm"),tft.forEach(t),zfr=r(d7e," \u2014 "),Ez=n(d7e,"A",{href:!0});var aft=s(Ez);Qfr=r(aft,"TFXLMForSequenceClassification"),aft.forEach(t),Wfr=r(d7e," (XLM model)"),d7e.forEach(t),Hfr=i(re),_8=n(re,"LI",{});var c7e=s(_8);z_e=n(c7e,"STRONG",{});var nft=s(z_e);Ufr=r(nft,"xlm-roberta"),nft.forEach(t),Jfr=r(c7e," \u2014 "),Cz=n(c7e,"A",{href:!0});var sft=s(Cz);Yfr=r(sft,"TFXLMRobertaForSequenceClassification"),sft.forEach(t),Kfr=r(c7e," (XLM-RoBERTa model)"),c7e.forEach(t),Zfr=i(re),v8=n(re,"LI",{});var f7e=s(v8);Q_e=n(f7e,"STRONG",{});var lft=s(Q_e);emr=r(lft,"xlnet"),lft.forEach(t),omr=r(f7e," \u2014 "),wz=n(f7e,"A",{href:!0});var ift=s(wz);rmr=r(ift,"TFXLNetForSequenceClassification"),ift.forEach(t),tmr=r(f7e," (XLNet model)"),f7e.forEach(t),re.forEach(t),amr=i(il),T(b8.$$.fragment,il),il.forEach(t),ll.forEach(t),$Se=i(f),Xd=n(f,"H2",{class:!0});var BBe=s(Xd);F8=n(BBe,"A",{id:!0,class:!0,href:!0});var dft=s(F8);W_e=n(dft,"SPAN",{});var cft=s(W_e);T(Zy.$$.fragment,cft),cft.forEach(t),dft.forEach(t),nmr=i(BBe),H_e=n(BBe,"SPAN",{});var fft=s(H_e);smr=r(fft,"TFAutoModelForMultipleChoice"),fft.forEach(t),BBe.forEach(t),kSe=i(f),rr=n(f,"DIV",{class:!0});var dl=s(rr);T(eL.$$.fragment,dl),lmr=i(dl),zd=n(dl,"P",{});var BJ=s(zd);imr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Az=n(BJ,"A",{href:!0});var mft=s(Az);dmr=r(mft,"from_pretrained()"),mft.forEach(t),cmr=r(BJ," class method or the "),yz=n(BJ,"A",{href:!0});var gft=s(yz);fmr=r(gft,"from_config()"),gft.forEach(t),mmr=r(BJ,` class
method.`),BJ.forEach(t),gmr=i(dl),oL=n(dl,"P",{});var PBe=s(oL);hmr=r(PBe,"This class cannot be instantiated directly using "),U_e=n(PBe,"CODE",{});var hft=s(U_e);umr=r(hft,"__init__()"),hft.forEach(t),pmr=r(PBe," (throws an error)."),PBe.forEach(t),_mr=i(dl),xt=n(dl,"DIV",{class:!0});var Y3=s(xt);T(rL.$$.fragment,Y3),vmr=i(Y3),J_e=n(Y3,"P",{});var uft=s(J_e);bmr=r(uft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uft.forEach(t),Fmr=i(Y3),Qd=n(Y3,"P",{});var PJ=s(Qd);Tmr=r(PJ,`Note:
Loading a model from its configuration file does `),Y_e=n(PJ,"STRONG",{});var pft=s(Y_e);Mmr=r(pft,"not"),pft.forEach(t),Emr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(PJ,"A",{href:!0});var _ft=s(Lz);Cmr=r(_ft,"from_pretrained()"),_ft.forEach(t),wmr=r(PJ," to load the model weights."),PJ.forEach(t),Amr=i(Y3),T(T8.$$.fragment,Y3),Y3.forEach(t),ymr=i(dl),xr=n(dl,"DIV",{class:!0});var cl=s(xr);T(tL.$$.fragment,cl),Lmr=i(cl),K_e=n(cl,"P",{});var vft=s(K_e);xmr=r(vft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vft.forEach(t),$mr=i(cl),en=n(cl,"P",{});var K3=s(en);kmr=r(K3,"The model class to instantiate is selected based on the "),Z_e=n(K3,"CODE",{});var bft=s(Z_e);Smr=r(bft,"model_type"),bft.forEach(t),Rmr=r(K3,` property of the config object (either
passed as an argument or loaded from `),eve=n(K3,"CODE",{});var Fft=s(eve);Bmr=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),Pmr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(K3,"CODE",{});var Tft=s(ove);Imr=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),qmr=r(K3,":"),K3.forEach(t),Nmr=i(cl),ge=n(cl,"UL",{});var pe=s(ge);M8=n(pe,"LI",{});var m7e=s(M8);rve=n(m7e,"STRONG",{});var Mft=s(rve);jmr=r(Mft,"albert"),Mft.forEach(t),Dmr=r(m7e," \u2014 "),xz=n(m7e,"A",{href:!0});var Eft=s(xz);Gmr=r(Eft,"TFAlbertForMultipleChoice"),Eft.forEach(t),Omr=r(m7e," (ALBERT model)"),m7e.forEach(t),Vmr=i(pe),E8=n(pe,"LI",{});var g7e=s(E8);tve=n(g7e,"STRONG",{});var Cft=s(tve);Xmr=r(Cft,"bert"),Cft.forEach(t),zmr=r(g7e," \u2014 "),$z=n(g7e,"A",{href:!0});var wft=s($z);Qmr=r(wft,"TFBertForMultipleChoice"),wft.forEach(t),Wmr=r(g7e," (BERT model)"),g7e.forEach(t),Hmr=i(pe),C8=n(pe,"LI",{});var h7e=s(C8);ave=n(h7e,"STRONG",{});var Aft=s(ave);Umr=r(Aft,"camembert"),Aft.forEach(t),Jmr=r(h7e," \u2014 "),kz=n(h7e,"A",{href:!0});var yft=s(kz);Ymr=r(yft,"TFCamembertForMultipleChoice"),yft.forEach(t),Kmr=r(h7e," (CamemBERT model)"),h7e.forEach(t),Zmr=i(pe),w8=n(pe,"LI",{});var u7e=s(w8);nve=n(u7e,"STRONG",{});var Lft=s(nve);egr=r(Lft,"convbert"),Lft.forEach(t),ogr=r(u7e," \u2014 "),Sz=n(u7e,"A",{href:!0});var xft=s(Sz);rgr=r(xft,"TFConvBertForMultipleChoice"),xft.forEach(t),tgr=r(u7e," (ConvBERT model)"),u7e.forEach(t),agr=i(pe),A8=n(pe,"LI",{});var p7e=s(A8);sve=n(p7e,"STRONG",{});var $ft=s(sve);ngr=r($ft,"distilbert"),$ft.forEach(t),sgr=r(p7e," \u2014 "),Rz=n(p7e,"A",{href:!0});var kft=s(Rz);lgr=r(kft,"TFDistilBertForMultipleChoice"),kft.forEach(t),igr=r(p7e," (DistilBERT model)"),p7e.forEach(t),dgr=i(pe),y8=n(pe,"LI",{});var _7e=s(y8);lve=n(_7e,"STRONG",{});var Sft=s(lve);cgr=r(Sft,"electra"),Sft.forEach(t),fgr=r(_7e," \u2014 "),Bz=n(_7e,"A",{href:!0});var Rft=s(Bz);mgr=r(Rft,"TFElectraForMultipleChoice"),Rft.forEach(t),ggr=r(_7e," (ELECTRA model)"),_7e.forEach(t),hgr=i(pe),L8=n(pe,"LI",{});var v7e=s(L8);ive=n(v7e,"STRONG",{});var Bft=s(ive);ugr=r(Bft,"flaubert"),Bft.forEach(t),pgr=r(v7e," \u2014 "),Pz=n(v7e,"A",{href:!0});var Pft=s(Pz);_gr=r(Pft,"TFFlaubertForMultipleChoice"),Pft.forEach(t),vgr=r(v7e," (FlauBERT model)"),v7e.forEach(t),bgr=i(pe),x8=n(pe,"LI",{});var b7e=s(x8);dve=n(b7e,"STRONG",{});var Ift=s(dve);Fgr=r(Ift,"funnel"),Ift.forEach(t),Tgr=r(b7e," \u2014 "),Iz=n(b7e,"A",{href:!0});var qft=s(Iz);Mgr=r(qft,"TFFunnelForMultipleChoice"),qft.forEach(t),Egr=r(b7e," (Funnel Transformer model)"),b7e.forEach(t),Cgr=i(pe),$8=n(pe,"LI",{});var F7e=s($8);cve=n(F7e,"STRONG",{});var Nft=s(cve);wgr=r(Nft,"longformer"),Nft.forEach(t),Agr=r(F7e," \u2014 "),qz=n(F7e,"A",{href:!0});var jft=s(qz);ygr=r(jft,"TFLongformerForMultipleChoice"),jft.forEach(t),Lgr=r(F7e," (Longformer model)"),F7e.forEach(t),xgr=i(pe),k8=n(pe,"LI",{});var T7e=s(k8);fve=n(T7e,"STRONG",{});var Dft=s(fve);$gr=r(Dft,"mobilebert"),Dft.forEach(t),kgr=r(T7e," \u2014 "),Nz=n(T7e,"A",{href:!0});var Gft=s(Nz);Sgr=r(Gft,"TFMobileBertForMultipleChoice"),Gft.forEach(t),Rgr=r(T7e," (MobileBERT model)"),T7e.forEach(t),Bgr=i(pe),S8=n(pe,"LI",{});var M7e=s(S8);mve=n(M7e,"STRONG",{});var Oft=s(mve);Pgr=r(Oft,"mpnet"),Oft.forEach(t),Igr=r(M7e," \u2014 "),jz=n(M7e,"A",{href:!0});var Vft=s(jz);qgr=r(Vft,"TFMPNetForMultipleChoice"),Vft.forEach(t),Ngr=r(M7e," (MPNet model)"),M7e.forEach(t),jgr=i(pe),R8=n(pe,"LI",{});var E7e=s(R8);gve=n(E7e,"STRONG",{});var Xft=s(gve);Dgr=r(Xft,"rembert"),Xft.forEach(t),Ggr=r(E7e," \u2014 "),Dz=n(E7e,"A",{href:!0});var zft=s(Dz);Ogr=r(zft,"TFRemBertForMultipleChoice"),zft.forEach(t),Vgr=r(E7e," (RemBERT model)"),E7e.forEach(t),Xgr=i(pe),B8=n(pe,"LI",{});var C7e=s(B8);hve=n(C7e,"STRONG",{});var Qft=s(hve);zgr=r(Qft,"roberta"),Qft.forEach(t),Qgr=r(C7e," \u2014 "),Gz=n(C7e,"A",{href:!0});var Wft=s(Gz);Wgr=r(Wft,"TFRobertaForMultipleChoice"),Wft.forEach(t),Hgr=r(C7e," (RoBERTa model)"),C7e.forEach(t),Ugr=i(pe),P8=n(pe,"LI",{});var w7e=s(P8);uve=n(w7e,"STRONG",{});var Hft=s(uve);Jgr=r(Hft,"roformer"),Hft.forEach(t),Ygr=r(w7e," \u2014 "),Oz=n(w7e,"A",{href:!0});var Uft=s(Oz);Kgr=r(Uft,"TFRoFormerForMultipleChoice"),Uft.forEach(t),Zgr=r(w7e," (RoFormer model)"),w7e.forEach(t),ehr=i(pe),I8=n(pe,"LI",{});var A7e=s(I8);pve=n(A7e,"STRONG",{});var Jft=s(pve);ohr=r(Jft,"xlm"),Jft.forEach(t),rhr=r(A7e," \u2014 "),Vz=n(A7e,"A",{href:!0});var Yft=s(Vz);thr=r(Yft,"TFXLMForMultipleChoice"),Yft.forEach(t),ahr=r(A7e," (XLM model)"),A7e.forEach(t),nhr=i(pe),q8=n(pe,"LI",{});var y7e=s(q8);_ve=n(y7e,"STRONG",{});var Kft=s(_ve);shr=r(Kft,"xlm-roberta"),Kft.forEach(t),lhr=r(y7e," \u2014 "),Xz=n(y7e,"A",{href:!0});var Zft=s(Xz);ihr=r(Zft,"TFXLMRobertaForMultipleChoice"),Zft.forEach(t),dhr=r(y7e," (XLM-RoBERTa model)"),y7e.forEach(t),chr=i(pe),N8=n(pe,"LI",{});var L7e=s(N8);vve=n(L7e,"STRONG",{});var emt=s(vve);fhr=r(emt,"xlnet"),emt.forEach(t),mhr=r(L7e," \u2014 "),zz=n(L7e,"A",{href:!0});var omt=s(zz);ghr=r(omt,"TFXLNetForMultipleChoice"),omt.forEach(t),hhr=r(L7e," (XLNet model)"),L7e.forEach(t),pe.forEach(t),uhr=i(cl),T(j8.$$.fragment,cl),cl.forEach(t),dl.forEach(t),SSe=i(f),Wd=n(f,"H2",{class:!0});var IBe=s(Wd);D8=n(IBe,"A",{id:!0,class:!0,href:!0});var rmt=s(D8);bve=n(rmt,"SPAN",{});var tmt=s(bve);T(aL.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),phr=i(IBe),Fve=n(IBe,"SPAN",{});var amt=s(Fve);_hr=r(amt,"TFAutoModelForTableQuestionAnswering"),amt.forEach(t),IBe.forEach(t),RSe=i(f),tr=n(f,"DIV",{class:!0});var fl=s(tr);T(nL.$$.fragment,fl),vhr=i(fl),Hd=n(fl,"P",{});var IJ=s(Hd);bhr=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=n(IJ,"A",{href:!0});var nmt=s(Qz);Fhr=r(nmt,"from_pretrained()"),nmt.forEach(t),Thr=r(IJ," class method or the "),Wz=n(IJ,"A",{href:!0});var smt=s(Wz);Mhr=r(smt,"from_config()"),smt.forEach(t),Ehr=r(IJ,` class
method.`),IJ.forEach(t),Chr=i(fl),sL=n(fl,"P",{});var qBe=s(sL);whr=r(qBe,"This class cannot be instantiated directly using "),Tve=n(qBe,"CODE",{});var lmt=s(Tve);Ahr=r(lmt,"__init__()"),lmt.forEach(t),yhr=r(qBe," (throws an error)."),qBe.forEach(t),Lhr=i(fl),$t=n(fl,"DIV",{class:!0});var Z3=s($t);T(lL.$$.fragment,Z3),xhr=i(Z3),Mve=n(Z3,"P",{});var imt=s(Mve);$hr=r(imt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),imt.forEach(t),khr=i(Z3),Ud=n(Z3,"P",{});var qJ=s(Ud);Shr=r(qJ,`Note:
Loading a model from its configuration file does `),Eve=n(qJ,"STRONG",{});var dmt=s(Eve);Rhr=r(dmt,"not"),dmt.forEach(t),Bhr=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(qJ,"A",{href:!0});var cmt=s(Hz);Phr=r(cmt,"from_pretrained()"),cmt.forEach(t),Ihr=r(qJ," to load the model weights."),qJ.forEach(t),qhr=i(Z3),T(G8.$$.fragment,Z3),Z3.forEach(t),Nhr=i(fl),$r=n(fl,"DIV",{class:!0});var ml=s($r);T(iL.$$.fragment,ml),jhr=i(ml),Cve=n(ml,"P",{});var fmt=s(Cve);Dhr=r(fmt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fmt.forEach(t),Ghr=i(ml),on=n(ml,"P",{});var ew=s(on);Ohr=r(ew,"The model class to instantiate is selected based on the "),wve=n(ew,"CODE",{});var mmt=s(wve);Vhr=r(mmt,"model_type"),mmt.forEach(t),Xhr=r(ew,` property of the config object (either
passed as an argument or loaded from `),Ave=n(ew,"CODE",{});var gmt=s(Ave);zhr=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),Qhr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(ew,"CODE",{});var hmt=s(yve);Whr=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),Hhr=r(ew,":"),ew.forEach(t),Uhr=i(ml),Lve=n(ml,"UL",{});var umt=s(Lve);O8=n(umt,"LI",{});var x7e=s(O8);xve=n(x7e,"STRONG",{});var pmt=s(xve);Jhr=r(pmt,"tapas"),pmt.forEach(t),Yhr=r(x7e," \u2014 "),Uz=n(x7e,"A",{href:!0});var _mt=s(Uz);Khr=r(_mt,"TFTapasForQuestionAnswering"),_mt.forEach(t),Zhr=r(x7e," (TAPAS model)"),x7e.forEach(t),umt.forEach(t),eur=i(ml),T(V8.$$.fragment,ml),ml.forEach(t),fl.forEach(t),BSe=i(f),Jd=n(f,"H2",{class:!0});var NBe=s(Jd);X8=n(NBe,"A",{id:!0,class:!0,href:!0});var vmt=s(X8);$ve=n(vmt,"SPAN",{});var bmt=s($ve);T(dL.$$.fragment,bmt),bmt.forEach(t),vmt.forEach(t),our=i(NBe),kve=n(NBe,"SPAN",{});var Fmt=s(kve);rur=r(Fmt,"TFAutoModelForTokenClassification"),Fmt.forEach(t),NBe.forEach(t),PSe=i(f),ar=n(f,"DIV",{class:!0});var gl=s(ar);T(cL.$$.fragment,gl),tur=i(gl),Yd=n(gl,"P",{});var NJ=s(Yd);aur=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jz=n(NJ,"A",{href:!0});var Tmt=s(Jz);nur=r(Tmt,"from_pretrained()"),Tmt.forEach(t),sur=r(NJ," class method or the "),Yz=n(NJ,"A",{href:!0});var Mmt=s(Yz);lur=r(Mmt,"from_config()"),Mmt.forEach(t),iur=r(NJ,` class
method.`),NJ.forEach(t),dur=i(gl),fL=n(gl,"P",{});var jBe=s(fL);cur=r(jBe,"This class cannot be instantiated directly using "),Sve=n(jBe,"CODE",{});var Emt=s(Sve);fur=r(Emt,"__init__()"),Emt.forEach(t),mur=r(jBe," (throws an error)."),jBe.forEach(t),gur=i(gl),kt=n(gl,"DIV",{class:!0});var ow=s(kt);T(mL.$$.fragment,ow),hur=i(ow),Rve=n(ow,"P",{});var Cmt=s(Rve);uur=r(Cmt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cmt.forEach(t),pur=i(ow),Kd=n(ow,"P",{});var jJ=s(Kd);_ur=r(jJ,`Note:
Loading a model from its configuration file does `),Bve=n(jJ,"STRONG",{});var wmt=s(Bve);vur=r(wmt,"not"),wmt.forEach(t),bur=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(jJ,"A",{href:!0});var Amt=s(Kz);Fur=r(Amt,"from_pretrained()"),Amt.forEach(t),Tur=r(jJ," to load the model weights."),jJ.forEach(t),Mur=i(ow),T(z8.$$.fragment,ow),ow.forEach(t),Eur=i(gl),kr=n(gl,"DIV",{class:!0});var hl=s(kr);T(gL.$$.fragment,hl),Cur=i(hl),Pve=n(hl,"P",{});var ymt=s(Pve);wur=r(ymt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ymt.forEach(t),Aur=i(hl),rn=n(hl,"P",{});var rw=s(rn);yur=r(rw,"The model class to instantiate is selected based on the "),Ive=n(rw,"CODE",{});var Lmt=s(Ive);Lur=r(Lmt,"model_type"),Lmt.forEach(t),xur=r(rw,` property of the config object (either
passed as an argument or loaded from `),qve=n(rw,"CODE",{});var xmt=s(qve);$ur=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),kur=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(rw,"CODE",{});var $mt=s(Nve);Sur=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),Rur=r(rw,":"),rw.forEach(t),Bur=i(hl),le=n(hl,"UL",{});var ce=s(le);Q8=n(ce,"LI",{});var $7e=s(Q8);jve=n($7e,"STRONG",{});var kmt=s(jve);Pur=r(kmt,"albert"),kmt.forEach(t),Iur=r($7e," \u2014 "),Zz=n($7e,"A",{href:!0});var Smt=s(Zz);qur=r(Smt,"TFAlbertForTokenClassification"),Smt.forEach(t),Nur=r($7e," (ALBERT model)"),$7e.forEach(t),jur=i(ce),W8=n(ce,"LI",{});var k7e=s(W8);Dve=n(k7e,"STRONG",{});var Rmt=s(Dve);Dur=r(Rmt,"bert"),Rmt.forEach(t),Gur=r(k7e," \u2014 "),eQ=n(k7e,"A",{href:!0});var Bmt=s(eQ);Our=r(Bmt,"TFBertForTokenClassification"),Bmt.forEach(t),Vur=r(k7e," (BERT model)"),k7e.forEach(t),Xur=i(ce),H8=n(ce,"LI",{});var S7e=s(H8);Gve=n(S7e,"STRONG",{});var Pmt=s(Gve);zur=r(Pmt,"camembert"),Pmt.forEach(t),Qur=r(S7e," \u2014 "),oQ=n(S7e,"A",{href:!0});var Imt=s(oQ);Wur=r(Imt,"TFCamembertForTokenClassification"),Imt.forEach(t),Hur=r(S7e," (CamemBERT model)"),S7e.forEach(t),Uur=i(ce),U8=n(ce,"LI",{});var R7e=s(U8);Ove=n(R7e,"STRONG",{});var qmt=s(Ove);Jur=r(qmt,"convbert"),qmt.forEach(t),Yur=r(R7e," \u2014 "),rQ=n(R7e,"A",{href:!0});var Nmt=s(rQ);Kur=r(Nmt,"TFConvBertForTokenClassification"),Nmt.forEach(t),Zur=r(R7e," (ConvBERT model)"),R7e.forEach(t),epr=i(ce),J8=n(ce,"LI",{});var B7e=s(J8);Vve=n(B7e,"STRONG",{});var jmt=s(Vve);opr=r(jmt,"deberta"),jmt.forEach(t),rpr=r(B7e," \u2014 "),tQ=n(B7e,"A",{href:!0});var Dmt=s(tQ);tpr=r(Dmt,"TFDebertaForTokenClassification"),Dmt.forEach(t),apr=r(B7e," (DeBERTa model)"),B7e.forEach(t),npr=i(ce),Y8=n(ce,"LI",{});var P7e=s(Y8);Xve=n(P7e,"STRONG",{});var Gmt=s(Xve);spr=r(Gmt,"deberta-v2"),Gmt.forEach(t),lpr=r(P7e," \u2014 "),aQ=n(P7e,"A",{href:!0});var Omt=s(aQ);ipr=r(Omt,"TFDebertaV2ForTokenClassification"),Omt.forEach(t),dpr=r(P7e," (DeBERTa-v2 model)"),P7e.forEach(t),cpr=i(ce),K8=n(ce,"LI",{});var I7e=s(K8);zve=n(I7e,"STRONG",{});var Vmt=s(zve);fpr=r(Vmt,"distilbert"),Vmt.forEach(t),mpr=r(I7e," \u2014 "),nQ=n(I7e,"A",{href:!0});var Xmt=s(nQ);gpr=r(Xmt,"TFDistilBertForTokenClassification"),Xmt.forEach(t),hpr=r(I7e," (DistilBERT model)"),I7e.forEach(t),upr=i(ce),Z8=n(ce,"LI",{});var q7e=s(Z8);Qve=n(q7e,"STRONG",{});var zmt=s(Qve);ppr=r(zmt,"electra"),zmt.forEach(t),_pr=r(q7e," \u2014 "),sQ=n(q7e,"A",{href:!0});var Qmt=s(sQ);vpr=r(Qmt,"TFElectraForTokenClassification"),Qmt.forEach(t),bpr=r(q7e," (ELECTRA model)"),q7e.forEach(t),Fpr=i(ce),eM=n(ce,"LI",{});var N7e=s(eM);Wve=n(N7e,"STRONG",{});var Wmt=s(Wve);Tpr=r(Wmt,"flaubert"),Wmt.forEach(t),Mpr=r(N7e," \u2014 "),lQ=n(N7e,"A",{href:!0});var Hmt=s(lQ);Epr=r(Hmt,"TFFlaubertForTokenClassification"),Hmt.forEach(t),Cpr=r(N7e," (FlauBERT model)"),N7e.forEach(t),wpr=i(ce),oM=n(ce,"LI",{});var j7e=s(oM);Hve=n(j7e,"STRONG",{});var Umt=s(Hve);Apr=r(Umt,"funnel"),Umt.forEach(t),ypr=r(j7e," \u2014 "),iQ=n(j7e,"A",{href:!0});var Jmt=s(iQ);Lpr=r(Jmt,"TFFunnelForTokenClassification"),Jmt.forEach(t),xpr=r(j7e," (Funnel Transformer model)"),j7e.forEach(t),$pr=i(ce),rM=n(ce,"LI",{});var D7e=s(rM);Uve=n(D7e,"STRONG",{});var Ymt=s(Uve);kpr=r(Ymt,"layoutlm"),Ymt.forEach(t),Spr=r(D7e," \u2014 "),dQ=n(D7e,"A",{href:!0});var Kmt=s(dQ);Rpr=r(Kmt,"TFLayoutLMForTokenClassification"),Kmt.forEach(t),Bpr=r(D7e," (LayoutLM model)"),D7e.forEach(t),Ppr=i(ce),tM=n(ce,"LI",{});var G7e=s(tM);Jve=n(G7e,"STRONG",{});var Zmt=s(Jve);Ipr=r(Zmt,"longformer"),Zmt.forEach(t),qpr=r(G7e," \u2014 "),cQ=n(G7e,"A",{href:!0});var egt=s(cQ);Npr=r(egt,"TFLongformerForTokenClassification"),egt.forEach(t),jpr=r(G7e," (Longformer model)"),G7e.forEach(t),Dpr=i(ce),aM=n(ce,"LI",{});var O7e=s(aM);Yve=n(O7e,"STRONG",{});var ogt=s(Yve);Gpr=r(ogt,"mobilebert"),ogt.forEach(t),Opr=r(O7e," \u2014 "),fQ=n(O7e,"A",{href:!0});var rgt=s(fQ);Vpr=r(rgt,"TFMobileBertForTokenClassification"),rgt.forEach(t),Xpr=r(O7e," (MobileBERT model)"),O7e.forEach(t),zpr=i(ce),nM=n(ce,"LI",{});var V7e=s(nM);Kve=n(V7e,"STRONG",{});var tgt=s(Kve);Qpr=r(tgt,"mpnet"),tgt.forEach(t),Wpr=r(V7e," \u2014 "),mQ=n(V7e,"A",{href:!0});var agt=s(mQ);Hpr=r(agt,"TFMPNetForTokenClassification"),agt.forEach(t),Upr=r(V7e," (MPNet model)"),V7e.forEach(t),Jpr=i(ce),sM=n(ce,"LI",{});var X7e=s(sM);Zve=n(X7e,"STRONG",{});var ngt=s(Zve);Ypr=r(ngt,"rembert"),ngt.forEach(t),Kpr=r(X7e," \u2014 "),gQ=n(X7e,"A",{href:!0});var sgt=s(gQ);Zpr=r(sgt,"TFRemBertForTokenClassification"),sgt.forEach(t),e_r=r(X7e," (RemBERT model)"),X7e.forEach(t),o_r=i(ce),lM=n(ce,"LI",{});var z7e=s(lM);e1e=n(z7e,"STRONG",{});var lgt=s(e1e);r_r=r(lgt,"roberta"),lgt.forEach(t),t_r=r(z7e," \u2014 "),hQ=n(z7e,"A",{href:!0});var igt=s(hQ);a_r=r(igt,"TFRobertaForTokenClassification"),igt.forEach(t),n_r=r(z7e," (RoBERTa model)"),z7e.forEach(t),s_r=i(ce),iM=n(ce,"LI",{});var Q7e=s(iM);o1e=n(Q7e,"STRONG",{});var dgt=s(o1e);l_r=r(dgt,"roformer"),dgt.forEach(t),i_r=r(Q7e," \u2014 "),uQ=n(Q7e,"A",{href:!0});var cgt=s(uQ);d_r=r(cgt,"TFRoFormerForTokenClassification"),cgt.forEach(t),c_r=r(Q7e," (RoFormer model)"),Q7e.forEach(t),f_r=i(ce),dM=n(ce,"LI",{});var W7e=s(dM);r1e=n(W7e,"STRONG",{});var fgt=s(r1e);m_r=r(fgt,"xlm"),fgt.forEach(t),g_r=r(W7e," \u2014 "),pQ=n(W7e,"A",{href:!0});var mgt=s(pQ);h_r=r(mgt,"TFXLMForTokenClassification"),mgt.forEach(t),u_r=r(W7e," (XLM model)"),W7e.forEach(t),p_r=i(ce),cM=n(ce,"LI",{});var H7e=s(cM);t1e=n(H7e,"STRONG",{});var ggt=s(t1e);__r=r(ggt,"xlm-roberta"),ggt.forEach(t),v_r=r(H7e," \u2014 "),_Q=n(H7e,"A",{href:!0});var hgt=s(_Q);b_r=r(hgt,"TFXLMRobertaForTokenClassification"),hgt.forEach(t),F_r=r(H7e," (XLM-RoBERTa model)"),H7e.forEach(t),T_r=i(ce),fM=n(ce,"LI",{});var U7e=s(fM);a1e=n(U7e,"STRONG",{});var ugt=s(a1e);M_r=r(ugt,"xlnet"),ugt.forEach(t),E_r=r(U7e," \u2014 "),vQ=n(U7e,"A",{href:!0});var pgt=s(vQ);C_r=r(pgt,"TFXLNetForTokenClassification"),pgt.forEach(t),w_r=r(U7e," (XLNet model)"),U7e.forEach(t),ce.forEach(t),A_r=i(hl),T(mM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),ISe=i(f),Zd=n(f,"H2",{class:!0});var DBe=s(Zd);gM=n(DBe,"A",{id:!0,class:!0,href:!0});var _gt=s(gM);n1e=n(_gt,"SPAN",{});var vgt=s(n1e);T(hL.$$.fragment,vgt),vgt.forEach(t),_gt.forEach(t),y_r=i(DBe),s1e=n(DBe,"SPAN",{});var bgt=s(s1e);L_r=r(bgt,"TFAutoModelForQuestionAnswering"),bgt.forEach(t),DBe.forEach(t),qSe=i(f),nr=n(f,"DIV",{class:!0});var ul=s(nr);T(uL.$$.fragment,ul),x_r=i(ul),ec=n(ul,"P",{});var DJ=s(ec);$_r=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bQ=n(DJ,"A",{href:!0});var Fgt=s(bQ);k_r=r(Fgt,"from_pretrained()"),Fgt.forEach(t),S_r=r(DJ," class method or the "),FQ=n(DJ,"A",{href:!0});var Tgt=s(FQ);R_r=r(Tgt,"from_config()"),Tgt.forEach(t),B_r=r(DJ,` class
method.`),DJ.forEach(t),P_r=i(ul),pL=n(ul,"P",{});var GBe=s(pL);I_r=r(GBe,"This class cannot be instantiated directly using "),l1e=n(GBe,"CODE",{});var Mgt=s(l1e);q_r=r(Mgt,"__init__()"),Mgt.forEach(t),N_r=r(GBe," (throws an error)."),GBe.forEach(t),j_r=i(ul),St=n(ul,"DIV",{class:!0});var tw=s(St);T(_L.$$.fragment,tw),D_r=i(tw),i1e=n(tw,"P",{});var Egt=s(i1e);G_r=r(Egt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Egt.forEach(t),O_r=i(tw),oc=n(tw,"P",{});var GJ=s(oc);V_r=r(GJ,`Note:
Loading a model from its configuration file does `),d1e=n(GJ,"STRONG",{});var Cgt=s(d1e);X_r=r(Cgt,"not"),Cgt.forEach(t),z_r=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(GJ,"A",{href:!0});var wgt=s(TQ);Q_r=r(wgt,"from_pretrained()"),wgt.forEach(t),W_r=r(GJ," to load the model weights."),GJ.forEach(t),H_r=i(tw),T(hM.$$.fragment,tw),tw.forEach(t),U_r=i(ul),Sr=n(ul,"DIV",{class:!0});var pl=s(Sr);T(vL.$$.fragment,pl),J_r=i(pl),c1e=n(pl,"P",{});var Agt=s(c1e);Y_r=r(Agt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Agt.forEach(t),K_r=i(pl),tn=n(pl,"P",{});var aw=s(tn);Z_r=r(aw,"The model class to instantiate is selected based on the "),f1e=n(aw,"CODE",{});var ygt=s(f1e);evr=r(ygt,"model_type"),ygt.forEach(t),ovr=r(aw,` property of the config object (either
passed as an argument or loaded from `),m1e=n(aw,"CODE",{});var Lgt=s(m1e);rvr=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),tvr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(aw,"CODE",{});var xgt=s(g1e);avr=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),nvr=r(aw,":"),aw.forEach(t),svr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);uM=n(fe,"LI",{});var J7e=s(uM);h1e=n(J7e,"STRONG",{});var $gt=s(h1e);lvr=r($gt,"albert"),$gt.forEach(t),ivr=r(J7e," \u2014 "),MQ=n(J7e,"A",{href:!0});var kgt=s(MQ);dvr=r(kgt,"TFAlbertForQuestionAnswering"),kgt.forEach(t),cvr=r(J7e," (ALBERT model)"),J7e.forEach(t),fvr=i(fe),pM=n(fe,"LI",{});var Y7e=s(pM);u1e=n(Y7e,"STRONG",{});var Sgt=s(u1e);mvr=r(Sgt,"bert"),Sgt.forEach(t),gvr=r(Y7e," \u2014 "),EQ=n(Y7e,"A",{href:!0});var Rgt=s(EQ);hvr=r(Rgt,"TFBertForQuestionAnswering"),Rgt.forEach(t),uvr=r(Y7e," (BERT model)"),Y7e.forEach(t),pvr=i(fe),_M=n(fe,"LI",{});var K7e=s(_M);p1e=n(K7e,"STRONG",{});var Bgt=s(p1e);_vr=r(Bgt,"camembert"),Bgt.forEach(t),vvr=r(K7e," \u2014 "),CQ=n(K7e,"A",{href:!0});var Pgt=s(CQ);bvr=r(Pgt,"TFCamembertForQuestionAnswering"),Pgt.forEach(t),Fvr=r(K7e," (CamemBERT model)"),K7e.forEach(t),Tvr=i(fe),vM=n(fe,"LI",{});var Z7e=s(vM);_1e=n(Z7e,"STRONG",{});var Igt=s(_1e);Mvr=r(Igt,"convbert"),Igt.forEach(t),Evr=r(Z7e," \u2014 "),wQ=n(Z7e,"A",{href:!0});var qgt=s(wQ);Cvr=r(qgt,"TFConvBertForQuestionAnswering"),qgt.forEach(t),wvr=r(Z7e," (ConvBERT model)"),Z7e.forEach(t),Avr=i(fe),bM=n(fe,"LI",{});var e9e=s(bM);v1e=n(e9e,"STRONG",{});var Ngt=s(v1e);yvr=r(Ngt,"deberta"),Ngt.forEach(t),Lvr=r(e9e," \u2014 "),AQ=n(e9e,"A",{href:!0});var jgt=s(AQ);xvr=r(jgt,"TFDebertaForQuestionAnswering"),jgt.forEach(t),$vr=r(e9e," (DeBERTa model)"),e9e.forEach(t),kvr=i(fe),FM=n(fe,"LI",{});var o9e=s(FM);b1e=n(o9e,"STRONG",{});var Dgt=s(b1e);Svr=r(Dgt,"deberta-v2"),Dgt.forEach(t),Rvr=r(o9e," \u2014 "),yQ=n(o9e,"A",{href:!0});var Ggt=s(yQ);Bvr=r(Ggt,"TFDebertaV2ForQuestionAnswering"),Ggt.forEach(t),Pvr=r(o9e," (DeBERTa-v2 model)"),o9e.forEach(t),Ivr=i(fe),TM=n(fe,"LI",{});var r9e=s(TM);F1e=n(r9e,"STRONG",{});var Ogt=s(F1e);qvr=r(Ogt,"distilbert"),Ogt.forEach(t),Nvr=r(r9e," \u2014 "),LQ=n(r9e,"A",{href:!0});var Vgt=s(LQ);jvr=r(Vgt,"TFDistilBertForQuestionAnswering"),Vgt.forEach(t),Dvr=r(r9e," (DistilBERT model)"),r9e.forEach(t),Gvr=i(fe),MM=n(fe,"LI",{});var t9e=s(MM);T1e=n(t9e,"STRONG",{});var Xgt=s(T1e);Ovr=r(Xgt,"electra"),Xgt.forEach(t),Vvr=r(t9e," \u2014 "),xQ=n(t9e,"A",{href:!0});var zgt=s(xQ);Xvr=r(zgt,"TFElectraForQuestionAnswering"),zgt.forEach(t),zvr=r(t9e," (ELECTRA model)"),t9e.forEach(t),Qvr=i(fe),EM=n(fe,"LI",{});var a9e=s(EM);M1e=n(a9e,"STRONG",{});var Qgt=s(M1e);Wvr=r(Qgt,"flaubert"),Qgt.forEach(t),Hvr=r(a9e," \u2014 "),$Q=n(a9e,"A",{href:!0});var Wgt=s($Q);Uvr=r(Wgt,"TFFlaubertForQuestionAnsweringSimple"),Wgt.forEach(t),Jvr=r(a9e," (FlauBERT model)"),a9e.forEach(t),Yvr=i(fe),CM=n(fe,"LI",{});var n9e=s(CM);E1e=n(n9e,"STRONG",{});var Hgt=s(E1e);Kvr=r(Hgt,"funnel"),Hgt.forEach(t),Zvr=r(n9e," \u2014 "),kQ=n(n9e,"A",{href:!0});var Ugt=s(kQ);e1r=r(Ugt,"TFFunnelForQuestionAnswering"),Ugt.forEach(t),o1r=r(n9e," (Funnel Transformer model)"),n9e.forEach(t),r1r=i(fe),wM=n(fe,"LI",{});var s9e=s(wM);C1e=n(s9e,"STRONG",{});var Jgt=s(C1e);t1r=r(Jgt,"gptj"),Jgt.forEach(t),a1r=r(s9e," \u2014 "),SQ=n(s9e,"A",{href:!0});var Ygt=s(SQ);n1r=r(Ygt,"TFGPTJForQuestionAnswering"),Ygt.forEach(t),s1r=r(s9e," (GPT-J model)"),s9e.forEach(t),l1r=i(fe),AM=n(fe,"LI",{});var l9e=s(AM);w1e=n(l9e,"STRONG",{});var Kgt=s(w1e);i1r=r(Kgt,"longformer"),Kgt.forEach(t),d1r=r(l9e," \u2014 "),RQ=n(l9e,"A",{href:!0});var Zgt=s(RQ);c1r=r(Zgt,"TFLongformerForQuestionAnswering"),Zgt.forEach(t),f1r=r(l9e," (Longformer model)"),l9e.forEach(t),m1r=i(fe),yM=n(fe,"LI",{});var i9e=s(yM);A1e=n(i9e,"STRONG",{});var eht=s(A1e);g1r=r(eht,"mobilebert"),eht.forEach(t),h1r=r(i9e," \u2014 "),BQ=n(i9e,"A",{href:!0});var oht=s(BQ);u1r=r(oht,"TFMobileBertForQuestionAnswering"),oht.forEach(t),p1r=r(i9e," (MobileBERT model)"),i9e.forEach(t),_1r=i(fe),LM=n(fe,"LI",{});var d9e=s(LM);y1e=n(d9e,"STRONG",{});var rht=s(y1e);v1r=r(rht,"mpnet"),rht.forEach(t),b1r=r(d9e," \u2014 "),PQ=n(d9e,"A",{href:!0});var tht=s(PQ);F1r=r(tht,"TFMPNetForQuestionAnswering"),tht.forEach(t),T1r=r(d9e," (MPNet model)"),d9e.forEach(t),M1r=i(fe),xM=n(fe,"LI",{});var c9e=s(xM);L1e=n(c9e,"STRONG",{});var aht=s(L1e);E1r=r(aht,"rembert"),aht.forEach(t),C1r=r(c9e," \u2014 "),IQ=n(c9e,"A",{href:!0});var nht=s(IQ);w1r=r(nht,"TFRemBertForQuestionAnswering"),nht.forEach(t),A1r=r(c9e," (RemBERT model)"),c9e.forEach(t),y1r=i(fe),$M=n(fe,"LI",{});var f9e=s($M);x1e=n(f9e,"STRONG",{});var sht=s(x1e);L1r=r(sht,"roberta"),sht.forEach(t),x1r=r(f9e," \u2014 "),qQ=n(f9e,"A",{href:!0});var lht=s(qQ);$1r=r(lht,"TFRobertaForQuestionAnswering"),lht.forEach(t),k1r=r(f9e," (RoBERTa model)"),f9e.forEach(t),S1r=i(fe),kM=n(fe,"LI",{});var m9e=s(kM);$1e=n(m9e,"STRONG",{});var iht=s($1e);R1r=r(iht,"roformer"),iht.forEach(t),B1r=r(m9e," \u2014 "),NQ=n(m9e,"A",{href:!0});var dht=s(NQ);P1r=r(dht,"TFRoFormerForQuestionAnswering"),dht.forEach(t),I1r=r(m9e," (RoFormer model)"),m9e.forEach(t),q1r=i(fe),SM=n(fe,"LI",{});var g9e=s(SM);k1e=n(g9e,"STRONG",{});var cht=s(k1e);N1r=r(cht,"xlm"),cht.forEach(t),j1r=r(g9e," \u2014 "),jQ=n(g9e,"A",{href:!0});var fht=s(jQ);D1r=r(fht,"TFXLMForQuestionAnsweringSimple"),fht.forEach(t),G1r=r(g9e," (XLM model)"),g9e.forEach(t),O1r=i(fe),RM=n(fe,"LI",{});var h9e=s(RM);S1e=n(h9e,"STRONG",{});var mht=s(S1e);V1r=r(mht,"xlm-roberta"),mht.forEach(t),X1r=r(h9e," \u2014 "),DQ=n(h9e,"A",{href:!0});var ght=s(DQ);z1r=r(ght,"TFXLMRobertaForQuestionAnswering"),ght.forEach(t),Q1r=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),W1r=i(fe),BM=n(fe,"LI",{});var u9e=s(BM);R1e=n(u9e,"STRONG",{});var hht=s(R1e);H1r=r(hht,"xlnet"),hht.forEach(t),U1r=r(u9e," \u2014 "),GQ=n(u9e,"A",{href:!0});var uht=s(GQ);J1r=r(uht,"TFXLNetForQuestionAnsweringSimple"),uht.forEach(t),Y1r=r(u9e," (XLNet model)"),u9e.forEach(t),fe.forEach(t),K1r=i(pl),T(PM.$$.fragment,pl),pl.forEach(t),ul.forEach(t),NSe=i(f),rc=n(f,"H2",{class:!0});var OBe=s(rc);IM=n(OBe,"A",{id:!0,class:!0,href:!0});var pht=s(IM);B1e=n(pht,"SPAN",{});var _ht=s(B1e);T(bL.$$.fragment,_ht),_ht.forEach(t),pht.forEach(t),Z1r=i(OBe),P1e=n(OBe,"SPAN",{});var vht=s(P1e);ebr=r(vht,"TFAutoModelForVision2Seq"),vht.forEach(t),OBe.forEach(t),jSe=i(f),sr=n(f,"DIV",{class:!0});var _l=s(sr);T(FL.$$.fragment,_l),obr=i(_l),tc=n(_l,"P",{});var OJ=s(tc);rbr=r(OJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=n(OJ,"A",{href:!0});var bht=s(OQ);tbr=r(bht,"from_pretrained()"),bht.forEach(t),abr=r(OJ," class method or the "),VQ=n(OJ,"A",{href:!0});var Fht=s(VQ);nbr=r(Fht,"from_config()"),Fht.forEach(t),sbr=r(OJ,` class
method.`),OJ.forEach(t),lbr=i(_l),TL=n(_l,"P",{});var VBe=s(TL);ibr=r(VBe,"This class cannot be instantiated directly using "),I1e=n(VBe,"CODE",{});var Tht=s(I1e);dbr=r(Tht,"__init__()"),Tht.forEach(t),cbr=r(VBe," (throws an error)."),VBe.forEach(t),fbr=i(_l),Rt=n(_l,"DIV",{class:!0});var nw=s(Rt);T(ML.$$.fragment,nw),mbr=i(nw),q1e=n(nw,"P",{});var Mht=s(q1e);gbr=r(Mht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mht.forEach(t),hbr=i(nw),ac=n(nw,"P",{});var VJ=s(ac);ubr=r(VJ,`Note:
Loading a model from its configuration file does `),N1e=n(VJ,"STRONG",{});var Eht=s(N1e);pbr=r(Eht,"not"),Eht.forEach(t),_br=r(VJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(VJ,"A",{href:!0});var Cht=s(XQ);vbr=r(Cht,"from_pretrained()"),Cht.forEach(t),bbr=r(VJ," to load the model weights."),VJ.forEach(t),Fbr=i(nw),T(qM.$$.fragment,nw),nw.forEach(t),Tbr=i(_l),Rr=n(_l,"DIV",{class:!0});var vl=s(Rr);T(EL.$$.fragment,vl),Mbr=i(vl),j1e=n(vl,"P",{});var wht=s(j1e);Ebr=r(wht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wht.forEach(t),Cbr=i(vl),an=n(vl,"P",{});var sw=s(an);wbr=r(sw,"The model class to instantiate is selected based on the "),D1e=n(sw,"CODE",{});var Aht=s(D1e);Abr=r(Aht,"model_type"),Aht.forEach(t),ybr=r(sw,` property of the config object (either
passed as an argument or loaded from `),G1e=n(sw,"CODE",{});var yht=s(G1e);Lbr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),xbr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(sw,"CODE",{});var Lht=s(O1e);$br=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),kbr=r(sw,":"),sw.forEach(t),Sbr=i(vl),V1e=n(vl,"UL",{});var xht=s(V1e);NM=n(xht,"LI",{});var p9e=s(NM);X1e=n(p9e,"STRONG",{});var $ht=s(X1e);Rbr=r($ht,"vision-encoder-decoder"),$ht.forEach(t),Bbr=r(p9e," \u2014 "),zQ=n(p9e,"A",{href:!0});var kht=s(zQ);Pbr=r(kht,"TFVisionEncoderDecoderModel"),kht.forEach(t),Ibr=r(p9e," (Vision Encoder decoder model)"),p9e.forEach(t),xht.forEach(t),qbr=i(vl),T(jM.$$.fragment,vl),vl.forEach(t),_l.forEach(t),DSe=i(f),nc=n(f,"H2",{class:!0});var XBe=s(nc);DM=n(XBe,"A",{id:!0,class:!0,href:!0});var Sht=s(DM);z1e=n(Sht,"SPAN",{});var Rht=s(z1e);T(CL.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),Nbr=i(XBe),Q1e=n(XBe,"SPAN",{});var Bht=s(Q1e);jbr=r(Bht,"TFAutoModelForSpeechSeq2Seq"),Bht.forEach(t),XBe.forEach(t),GSe=i(f),lr=n(f,"DIV",{class:!0});var bl=s(lr);T(wL.$$.fragment,bl),Dbr=i(bl),sc=n(bl,"P",{});var XJ=s(sc);Gbr=r(XJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QQ=n(XJ,"A",{href:!0});var Pht=s(QQ);Obr=r(Pht,"from_pretrained()"),Pht.forEach(t),Vbr=r(XJ," class method or the "),WQ=n(XJ,"A",{href:!0});var Iht=s(WQ);Xbr=r(Iht,"from_config()"),Iht.forEach(t),zbr=r(XJ,` class
method.`),XJ.forEach(t),Qbr=i(bl),AL=n(bl,"P",{});var zBe=s(AL);Wbr=r(zBe,"This class cannot be instantiated directly using "),W1e=n(zBe,"CODE",{});var qht=s(W1e);Hbr=r(qht,"__init__()"),qht.forEach(t),Ubr=r(zBe," (throws an error)."),zBe.forEach(t),Jbr=i(bl),Bt=n(bl,"DIV",{class:!0});var lw=s(Bt);T(yL.$$.fragment,lw),Ybr=i(lw),H1e=n(lw,"P",{});var Nht=s(H1e);Kbr=r(Nht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Nht.forEach(t),Zbr=i(lw),lc=n(lw,"P",{});var zJ=s(lc);e4r=r(zJ,`Note:
Loading a model from its configuration file does `),U1e=n(zJ,"STRONG",{});var jht=s(U1e);o4r=r(jht,"not"),jht.forEach(t),r4r=r(zJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(zJ,"A",{href:!0});var Dht=s(HQ);t4r=r(Dht,"from_pretrained()"),Dht.forEach(t),a4r=r(zJ," to load the model weights."),zJ.forEach(t),n4r=i(lw),T(GM.$$.fragment,lw),lw.forEach(t),s4r=i(bl),Br=n(bl,"DIV",{class:!0});var Fl=s(Br);T(LL.$$.fragment,Fl),l4r=i(Fl),J1e=n(Fl,"P",{});var Ght=s(J1e);i4r=r(Ght,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ght.forEach(t),d4r=i(Fl),nn=n(Fl,"P",{});var iw=s(nn);c4r=r(iw,"The model class to instantiate is selected based on the "),Y1e=n(iw,"CODE",{});var Oht=s(Y1e);f4r=r(Oht,"model_type"),Oht.forEach(t),m4r=r(iw,` property of the config object (either
passed as an argument or loaded from `),K1e=n(iw,"CODE",{});var Vht=s(K1e);g4r=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),h4r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(iw,"CODE",{});var Xht=s(Z1e);u4r=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),p4r=r(iw,":"),iw.forEach(t),_4r=i(Fl),ebe=n(Fl,"UL",{});var zht=s(ebe);OM=n(zht,"LI",{});var _9e=s(OM);obe=n(_9e,"STRONG",{});var Qht=s(obe);v4r=r(Qht,"speech_to_text"),Qht.forEach(t),b4r=r(_9e," \u2014 "),UQ=n(_9e,"A",{href:!0});var Wht=s(UQ);F4r=r(Wht,"TFSpeech2TextForConditionalGeneration"),Wht.forEach(t),T4r=r(_9e," (Speech2Text model)"),_9e.forEach(t),zht.forEach(t),M4r=i(Fl),T(VM.$$.fragment,Fl),Fl.forEach(t),bl.forEach(t),OSe=i(f),ic=n(f,"H2",{class:!0});var QBe=s(ic);XM=n(QBe,"A",{id:!0,class:!0,href:!0});var Hht=s(XM);rbe=n(Hht,"SPAN",{});var Uht=s(rbe);T(xL.$$.fragment,Uht),Uht.forEach(t),Hht.forEach(t),E4r=i(QBe),tbe=n(QBe,"SPAN",{});var Jht=s(tbe);C4r=r(Jht,"FlaxAutoModel"),Jht.forEach(t),QBe.forEach(t),VSe=i(f),ir=n(f,"DIV",{class:!0});var Tl=s(ir);T($L.$$.fragment,Tl),w4r=i(Tl),dc=n(Tl,"P",{});var QJ=s(dc);A4r=r(QJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JQ=n(QJ,"A",{href:!0});var Yht=s(JQ);y4r=r(Yht,"from_pretrained()"),Yht.forEach(t),L4r=r(QJ," class method or the "),YQ=n(QJ,"A",{href:!0});var Kht=s(YQ);x4r=r(Kht,"from_config()"),Kht.forEach(t),$4r=r(QJ,` class
method.`),QJ.forEach(t),k4r=i(Tl),kL=n(Tl,"P",{});var WBe=s(kL);S4r=r(WBe,"This class cannot be instantiated directly using "),abe=n(WBe,"CODE",{});var Zht=s(abe);R4r=r(Zht,"__init__()"),Zht.forEach(t),B4r=r(WBe," (throws an error)."),WBe.forEach(t),P4r=i(Tl),Pt=n(Tl,"DIV",{class:!0});var dw=s(Pt);T(SL.$$.fragment,dw),I4r=i(dw),nbe=n(dw,"P",{});var eut=s(nbe);q4r=r(eut,"Instantiates one of the base model classes of the library from a configuration."),eut.forEach(t),N4r=i(dw),cc=n(dw,"P",{});var WJ=s(cc);j4r=r(WJ,`Note:
Loading a model from its configuration file does `),sbe=n(WJ,"STRONG",{});var out=s(sbe);D4r=r(out,"not"),out.forEach(t),G4r=r(WJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(WJ,"A",{href:!0});var rut=s(KQ);O4r=r(rut,"from_pretrained()"),rut.forEach(t),V4r=r(WJ," to load the model weights."),WJ.forEach(t),X4r=i(dw),T(zM.$$.fragment,dw),dw.forEach(t),z4r=i(Tl),Pr=n(Tl,"DIV",{class:!0});var Ml=s(Pr);T(RL.$$.fragment,Ml),Q4r=i(Ml),lbe=n(Ml,"P",{});var tut=s(lbe);W4r=r(tut,"Instantiate one of the base model classes of the library from a pretrained model."),tut.forEach(t),H4r=i(Ml),sn=n(Ml,"P",{});var cw=s(sn);U4r=r(cw,"The model class to instantiate is selected based on the "),ibe=n(cw,"CODE",{});var aut=s(ibe);J4r=r(aut,"model_type"),aut.forEach(t),Y4r=r(cw,` property of the config object (either
passed as an argument or loaded from `),dbe=n(cw,"CODE",{});var nut=s(dbe);K4r=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Z4r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(cw,"CODE",{});var sut=s(cbe);e2r=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),o2r=r(cw,":"),cw.forEach(t),r2r=i(Ml),oe=n(Ml,"UL",{});var te=s(oe);QM=n(te,"LI",{});var v9e=s(QM);fbe=n(v9e,"STRONG",{});var lut=s(fbe);t2r=r(lut,"albert"),lut.forEach(t),a2r=r(v9e," \u2014 "),ZQ=n(v9e,"A",{href:!0});var iut=s(ZQ);n2r=r(iut,"FlaxAlbertModel"),iut.forEach(t),s2r=r(v9e," (ALBERT model)"),v9e.forEach(t),l2r=i(te),WM=n(te,"LI",{});var b9e=s(WM);mbe=n(b9e,"STRONG",{});var dut=s(mbe);i2r=r(dut,"bart"),dut.forEach(t),d2r=r(b9e," \u2014 "),eW=n(b9e,"A",{href:!0});var cut=s(eW);c2r=r(cut,"FlaxBartModel"),cut.forEach(t),f2r=r(b9e," (BART model)"),b9e.forEach(t),m2r=i(te),HM=n(te,"LI",{});var F9e=s(HM);gbe=n(F9e,"STRONG",{});var fut=s(gbe);g2r=r(fut,"beit"),fut.forEach(t),h2r=r(F9e," \u2014 "),oW=n(F9e,"A",{href:!0});var mut=s(oW);u2r=r(mut,"FlaxBeitModel"),mut.forEach(t),p2r=r(F9e," (BEiT model)"),F9e.forEach(t),_2r=i(te),UM=n(te,"LI",{});var T9e=s(UM);hbe=n(T9e,"STRONG",{});var gut=s(hbe);v2r=r(gut,"bert"),gut.forEach(t),b2r=r(T9e," \u2014 "),rW=n(T9e,"A",{href:!0});var hut=s(rW);F2r=r(hut,"FlaxBertModel"),hut.forEach(t),T2r=r(T9e," (BERT model)"),T9e.forEach(t),M2r=i(te),JM=n(te,"LI",{});var M9e=s(JM);ube=n(M9e,"STRONG",{});var uut=s(ube);E2r=r(uut,"big_bird"),uut.forEach(t),C2r=r(M9e," \u2014 "),tW=n(M9e,"A",{href:!0});var put=s(tW);w2r=r(put,"FlaxBigBirdModel"),put.forEach(t),A2r=r(M9e," (BigBird model)"),M9e.forEach(t),y2r=i(te),YM=n(te,"LI",{});var E9e=s(YM);pbe=n(E9e,"STRONG",{});var _ut=s(pbe);L2r=r(_ut,"blenderbot"),_ut.forEach(t),x2r=r(E9e," \u2014 "),aW=n(E9e,"A",{href:!0});var vut=s(aW);$2r=r(vut,"FlaxBlenderbotModel"),vut.forEach(t),k2r=r(E9e," (Blenderbot model)"),E9e.forEach(t),S2r=i(te),KM=n(te,"LI",{});var C9e=s(KM);_be=n(C9e,"STRONG",{});var but=s(_be);R2r=r(but,"blenderbot-small"),but.forEach(t),B2r=r(C9e," \u2014 "),nW=n(C9e,"A",{href:!0});var Fut=s(nW);P2r=r(Fut,"FlaxBlenderbotSmallModel"),Fut.forEach(t),I2r=r(C9e," (BlenderbotSmall model)"),C9e.forEach(t),q2r=i(te),ZM=n(te,"LI",{});var w9e=s(ZM);vbe=n(w9e,"STRONG",{});var Tut=s(vbe);N2r=r(Tut,"clip"),Tut.forEach(t),j2r=r(w9e," \u2014 "),sW=n(w9e,"A",{href:!0});var Mut=s(sW);D2r=r(Mut,"FlaxCLIPModel"),Mut.forEach(t),G2r=r(w9e," (CLIP model)"),w9e.forEach(t),O2r=i(te),eE=n(te,"LI",{});var A9e=s(eE);bbe=n(A9e,"STRONG",{});var Eut=s(bbe);V2r=r(Eut,"distilbert"),Eut.forEach(t),X2r=r(A9e," \u2014 "),lW=n(A9e,"A",{href:!0});var Cut=s(lW);z2r=r(Cut,"FlaxDistilBertModel"),Cut.forEach(t),Q2r=r(A9e," (DistilBERT model)"),A9e.forEach(t),W2r=i(te),oE=n(te,"LI",{});var y9e=s(oE);Fbe=n(y9e,"STRONG",{});var wut=s(Fbe);H2r=r(wut,"electra"),wut.forEach(t),U2r=r(y9e," \u2014 "),iW=n(y9e,"A",{href:!0});var Aut=s(iW);J2r=r(Aut,"FlaxElectraModel"),Aut.forEach(t),Y2r=r(y9e," (ELECTRA model)"),y9e.forEach(t),K2r=i(te),rE=n(te,"LI",{});var L9e=s(rE);Tbe=n(L9e,"STRONG",{});var yut=s(Tbe);Z2r=r(yut,"gpt2"),yut.forEach(t),eFr=r(L9e," \u2014 "),dW=n(L9e,"A",{href:!0});var Lut=s(dW);oFr=r(Lut,"FlaxGPT2Model"),Lut.forEach(t),rFr=r(L9e," (OpenAI GPT-2 model)"),L9e.forEach(t),tFr=i(te),tE=n(te,"LI",{});var x9e=s(tE);Mbe=n(x9e,"STRONG",{});var xut=s(Mbe);aFr=r(xut,"gpt_neo"),xut.forEach(t),nFr=r(x9e," \u2014 "),cW=n(x9e,"A",{href:!0});var $ut=s(cW);sFr=r($ut,"FlaxGPTNeoModel"),$ut.forEach(t),lFr=r(x9e," (GPT Neo model)"),x9e.forEach(t),iFr=i(te),aE=n(te,"LI",{});var $9e=s(aE);Ebe=n($9e,"STRONG",{});var kut=s(Ebe);dFr=r(kut,"gptj"),kut.forEach(t),cFr=r($9e," \u2014 "),fW=n($9e,"A",{href:!0});var Sut=s(fW);fFr=r(Sut,"FlaxGPTJModel"),Sut.forEach(t),mFr=r($9e," (GPT-J model)"),$9e.forEach(t),gFr=i(te),nE=n(te,"LI",{});var k9e=s(nE);Cbe=n(k9e,"STRONG",{});var Rut=s(Cbe);hFr=r(Rut,"marian"),Rut.forEach(t),uFr=r(k9e," \u2014 "),mW=n(k9e,"A",{href:!0});var But=s(mW);pFr=r(But,"FlaxMarianModel"),But.forEach(t),_Fr=r(k9e," (Marian model)"),k9e.forEach(t),vFr=i(te),sE=n(te,"LI",{});var S9e=s(sE);wbe=n(S9e,"STRONG",{});var Put=s(wbe);bFr=r(Put,"mbart"),Put.forEach(t),FFr=r(S9e," \u2014 "),gW=n(S9e,"A",{href:!0});var Iut=s(gW);TFr=r(Iut,"FlaxMBartModel"),Iut.forEach(t),MFr=r(S9e," (mBART model)"),S9e.forEach(t),EFr=i(te),lE=n(te,"LI",{});var R9e=s(lE);Abe=n(R9e,"STRONG",{});var qut=s(Abe);CFr=r(qut,"mt5"),qut.forEach(t),wFr=r(R9e," \u2014 "),hW=n(R9e,"A",{href:!0});var Nut=s(hW);AFr=r(Nut,"FlaxMT5Model"),Nut.forEach(t),yFr=r(R9e," (mT5 model)"),R9e.forEach(t),LFr=i(te),iE=n(te,"LI",{});var B9e=s(iE);ybe=n(B9e,"STRONG",{});var jut=s(ybe);xFr=r(jut,"pegasus"),jut.forEach(t),$Fr=r(B9e," \u2014 "),uW=n(B9e,"A",{href:!0});var Dut=s(uW);kFr=r(Dut,"FlaxPegasusModel"),Dut.forEach(t),SFr=r(B9e," (Pegasus model)"),B9e.forEach(t),RFr=i(te),dE=n(te,"LI",{});var P9e=s(dE);Lbe=n(P9e,"STRONG",{});var Gut=s(Lbe);BFr=r(Gut,"roberta"),Gut.forEach(t),PFr=r(P9e," \u2014 "),pW=n(P9e,"A",{href:!0});var Out=s(pW);IFr=r(Out,"FlaxRobertaModel"),Out.forEach(t),qFr=r(P9e," (RoBERTa model)"),P9e.forEach(t),NFr=i(te),cE=n(te,"LI",{});var I9e=s(cE);xbe=n(I9e,"STRONG",{});var Vut=s(xbe);jFr=r(Vut,"roformer"),Vut.forEach(t),DFr=r(I9e," \u2014 "),_W=n(I9e,"A",{href:!0});var Xut=s(_W);GFr=r(Xut,"FlaxRoFormerModel"),Xut.forEach(t),OFr=r(I9e," (RoFormer model)"),I9e.forEach(t),VFr=i(te),fE=n(te,"LI",{});var q9e=s(fE);$be=n(q9e,"STRONG",{});var zut=s($be);XFr=r(zut,"t5"),zut.forEach(t),zFr=r(q9e," \u2014 "),vW=n(q9e,"A",{href:!0});var Qut=s(vW);QFr=r(Qut,"FlaxT5Model"),Qut.forEach(t),WFr=r(q9e," (T5 model)"),q9e.forEach(t),HFr=i(te),mE=n(te,"LI",{});var N9e=s(mE);kbe=n(N9e,"STRONG",{});var Wut=s(kbe);UFr=r(Wut,"vision-text-dual-encoder"),Wut.forEach(t),JFr=r(N9e," \u2014 "),bW=n(N9e,"A",{href:!0});var Hut=s(bW);YFr=r(Hut,"FlaxVisionTextDualEncoderModel"),Hut.forEach(t),KFr=r(N9e," (VisionTextDualEncoder model)"),N9e.forEach(t),ZFr=i(te),gE=n(te,"LI",{});var j9e=s(gE);Sbe=n(j9e,"STRONG",{});var Uut=s(Sbe);e0r=r(Uut,"vit"),Uut.forEach(t),o0r=r(j9e," \u2014 "),FW=n(j9e,"A",{href:!0});var Jut=s(FW);r0r=r(Jut,"FlaxViTModel"),Jut.forEach(t),t0r=r(j9e," (ViT model)"),j9e.forEach(t),a0r=i(te),hE=n(te,"LI",{});var D9e=s(hE);Rbe=n(D9e,"STRONG",{});var Yut=s(Rbe);n0r=r(Yut,"wav2vec2"),Yut.forEach(t),s0r=r(D9e," \u2014 "),TW=n(D9e,"A",{href:!0});var Kut=s(TW);l0r=r(Kut,"FlaxWav2Vec2Model"),Kut.forEach(t),i0r=r(D9e," (Wav2Vec2 model)"),D9e.forEach(t),d0r=i(te),uE=n(te,"LI",{});var G9e=s(uE);Bbe=n(G9e,"STRONG",{});var Zut=s(Bbe);c0r=r(Zut,"xglm"),Zut.forEach(t),f0r=r(G9e," \u2014 "),MW=n(G9e,"A",{href:!0});var ept=s(MW);m0r=r(ept,"FlaxXGLMModel"),ept.forEach(t),g0r=r(G9e," (XGLM model)"),G9e.forEach(t),h0r=i(te),pE=n(te,"LI",{});var O9e=s(pE);Pbe=n(O9e,"STRONG",{});var opt=s(Pbe);u0r=r(opt,"xlm-roberta"),opt.forEach(t),p0r=r(O9e," \u2014 "),EW=n(O9e,"A",{href:!0});var rpt=s(EW);_0r=r(rpt,"FlaxXLMRobertaModel"),rpt.forEach(t),v0r=r(O9e," (XLM-RoBERTa model)"),O9e.forEach(t),te.forEach(t),b0r=i(Ml),T(_E.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),XSe=i(f),fc=n(f,"H2",{class:!0});var HBe=s(fc);vE=n(HBe,"A",{id:!0,class:!0,href:!0});var tpt=s(vE);Ibe=n(tpt,"SPAN",{});var apt=s(Ibe);T(BL.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),F0r=i(HBe),qbe=n(HBe,"SPAN",{});var npt=s(qbe);T0r=r(npt,"FlaxAutoModelForCausalLM"),npt.forEach(t),HBe.forEach(t),zSe=i(f),dr=n(f,"DIV",{class:!0});var El=s(dr);T(PL.$$.fragment,El),M0r=i(El),mc=n(El,"P",{});var HJ=s(mc);E0r=r(HJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CW=n(HJ,"A",{href:!0});var spt=s(CW);C0r=r(spt,"from_pretrained()"),spt.forEach(t),w0r=r(HJ," class method or the "),wW=n(HJ,"A",{href:!0});var lpt=s(wW);A0r=r(lpt,"from_config()"),lpt.forEach(t),y0r=r(HJ,` class
method.`),HJ.forEach(t),L0r=i(El),IL=n(El,"P",{});var UBe=s(IL);x0r=r(UBe,"This class cannot be instantiated directly using "),Nbe=n(UBe,"CODE",{});var ipt=s(Nbe);$0r=r(ipt,"__init__()"),ipt.forEach(t),k0r=r(UBe," (throws an error)."),UBe.forEach(t),S0r=i(El),It=n(El,"DIV",{class:!0});var fw=s(It);T(qL.$$.fragment,fw),R0r=i(fw),jbe=n(fw,"P",{});var dpt=s(jbe);B0r=r(dpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dpt.forEach(t),P0r=i(fw),gc=n(fw,"P",{});var UJ=s(gc);I0r=r(UJ,`Note:
Loading a model from its configuration file does `),Dbe=n(UJ,"STRONG",{});var cpt=s(Dbe);q0r=r(cpt,"not"),cpt.forEach(t),N0r=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(UJ,"A",{href:!0});var fpt=s(AW);j0r=r(fpt,"from_pretrained()"),fpt.forEach(t),D0r=r(UJ," to load the model weights."),UJ.forEach(t),G0r=i(fw),T(bE.$$.fragment,fw),fw.forEach(t),O0r=i(El),Ir=n(El,"DIV",{class:!0});var Cl=s(Ir);T(NL.$$.fragment,Cl),V0r=i(Cl),Gbe=n(Cl,"P",{});var mpt=s(Gbe);X0r=r(mpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mpt.forEach(t),z0r=i(Cl),ln=n(Cl,"P",{});var mw=s(ln);Q0r=r(mw,"The model class to instantiate is selected based on the "),Obe=n(mw,"CODE",{});var gpt=s(Obe);W0r=r(gpt,"model_type"),gpt.forEach(t),H0r=r(mw,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(mw,"CODE",{});var hpt=s(Vbe);U0r=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),J0r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(mw,"CODE",{});var upt=s(Xbe);Y0r=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),K0r=r(mw,":"),mw.forEach(t),Z0r=i(Cl),Hr=n(Cl,"UL",{});var wl=s(Hr);FE=n(wl,"LI",{});var V9e=s(FE);zbe=n(V9e,"STRONG",{});var ppt=s(zbe);eTr=r(ppt,"bart"),ppt.forEach(t),oTr=r(V9e," \u2014 "),yW=n(V9e,"A",{href:!0});var _pt=s(yW);rTr=r(_pt,"FlaxBartForCausalLM"),_pt.forEach(t),tTr=r(V9e," (BART model)"),V9e.forEach(t),aTr=i(wl),TE=n(wl,"LI",{});var X9e=s(TE);Qbe=n(X9e,"STRONG",{});var vpt=s(Qbe);nTr=r(vpt,"gpt2"),vpt.forEach(t),sTr=r(X9e," \u2014 "),LW=n(X9e,"A",{href:!0});var bpt=s(LW);lTr=r(bpt,"FlaxGPT2LMHeadModel"),bpt.forEach(t),iTr=r(X9e," (OpenAI GPT-2 model)"),X9e.forEach(t),dTr=i(wl),ME=n(wl,"LI",{});var z9e=s(ME);Wbe=n(z9e,"STRONG",{});var Fpt=s(Wbe);cTr=r(Fpt,"gpt_neo"),Fpt.forEach(t),fTr=r(z9e," \u2014 "),xW=n(z9e,"A",{href:!0});var Tpt=s(xW);mTr=r(Tpt,"FlaxGPTNeoForCausalLM"),Tpt.forEach(t),gTr=r(z9e," (GPT Neo model)"),z9e.forEach(t),hTr=i(wl),EE=n(wl,"LI",{});var Q9e=s(EE);Hbe=n(Q9e,"STRONG",{});var Mpt=s(Hbe);uTr=r(Mpt,"gptj"),Mpt.forEach(t),pTr=r(Q9e," \u2014 "),$W=n(Q9e,"A",{href:!0});var Ept=s($W);_Tr=r(Ept,"FlaxGPTJForCausalLM"),Ept.forEach(t),vTr=r(Q9e," (GPT-J model)"),Q9e.forEach(t),bTr=i(wl),CE=n(wl,"LI",{});var W9e=s(CE);Ube=n(W9e,"STRONG",{});var Cpt=s(Ube);FTr=r(Cpt,"xglm"),Cpt.forEach(t),TTr=r(W9e," \u2014 "),kW=n(W9e,"A",{href:!0});var wpt=s(kW);MTr=r(wpt,"FlaxXGLMForCausalLM"),wpt.forEach(t),ETr=r(W9e," (XGLM model)"),W9e.forEach(t),wl.forEach(t),CTr=i(Cl),T(wE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),QSe=i(f),hc=n(f,"H2",{class:!0});var JBe=s(hc);AE=n(JBe,"A",{id:!0,class:!0,href:!0});var Apt=s(AE);Jbe=n(Apt,"SPAN",{});var ypt=s(Jbe);T(jL.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),wTr=i(JBe),Ybe=n(JBe,"SPAN",{});var Lpt=s(Ybe);ATr=r(Lpt,"FlaxAutoModelForPreTraining"),Lpt.forEach(t),JBe.forEach(t),WSe=i(f),cr=n(f,"DIV",{class:!0});var Al=s(cr);T(DL.$$.fragment,Al),yTr=i(Al),uc=n(Al,"P",{});var JJ=s(uc);LTr=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SW=n(JJ,"A",{href:!0});var xpt=s(SW);xTr=r(xpt,"from_pretrained()"),xpt.forEach(t),$Tr=r(JJ," class method or the "),RW=n(JJ,"A",{href:!0});var $pt=s(RW);kTr=r($pt,"from_config()"),$pt.forEach(t),STr=r(JJ,` class
method.`),JJ.forEach(t),RTr=i(Al),GL=n(Al,"P",{});var YBe=s(GL);BTr=r(YBe,"This class cannot be instantiated directly using "),Kbe=n(YBe,"CODE",{});var kpt=s(Kbe);PTr=r(kpt,"__init__()"),kpt.forEach(t),ITr=r(YBe," (throws an error)."),YBe.forEach(t),qTr=i(Al),qt=n(Al,"DIV",{class:!0});var gw=s(qt);T(OL.$$.fragment,gw),NTr=i(gw),Zbe=n(gw,"P",{});var Spt=s(Zbe);jTr=r(Spt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Spt.forEach(t),DTr=i(gw),pc=n(gw,"P",{});var YJ=s(pc);GTr=r(YJ,`Note:
Loading a model from its configuration file does `),e4e=n(YJ,"STRONG",{});var Rpt=s(e4e);OTr=r(Rpt,"not"),Rpt.forEach(t),VTr=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BW=n(YJ,"A",{href:!0});var Bpt=s(BW);XTr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),zTr=r(YJ," to load the model weights."),YJ.forEach(t),QTr=i(gw),T(yE.$$.fragment,gw),gw.forEach(t),WTr=i(Al),qr=n(Al,"DIV",{class:!0});var yl=s(qr);T(VL.$$.fragment,yl),HTr=i(yl),o4e=n(yl,"P",{});var Ppt=s(o4e);UTr=r(Ppt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ppt.forEach(t),JTr=i(yl),dn=n(yl,"P",{});var hw=s(dn);YTr=r(hw,"The model class to instantiate is selected based on the "),r4e=n(hw,"CODE",{});var Ipt=s(r4e);KTr=r(Ipt,"model_type"),Ipt.forEach(t),ZTr=r(hw,` property of the config object (either
passed as an argument or loaded from `),t4e=n(hw,"CODE",{});var qpt=s(t4e);e8r=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),o8r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(hw,"CODE",{});var Npt=s(a4e);r8r=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),t8r=r(hw,":"),hw.forEach(t),a8r=i(yl),be=n(yl,"UL",{});var Me=s(be);LE=n(Me,"LI",{});var H9e=s(LE);n4e=n(H9e,"STRONG",{});var jpt=s(n4e);n8r=r(jpt,"albert"),jpt.forEach(t),s8r=r(H9e," \u2014 "),PW=n(H9e,"A",{href:!0});var Dpt=s(PW);l8r=r(Dpt,"FlaxAlbertForPreTraining"),Dpt.forEach(t),i8r=r(H9e," (ALBERT model)"),H9e.forEach(t),d8r=i(Me),xE=n(Me,"LI",{});var U9e=s(xE);s4e=n(U9e,"STRONG",{});var Gpt=s(s4e);c8r=r(Gpt,"bart"),Gpt.forEach(t),f8r=r(U9e," \u2014 "),IW=n(U9e,"A",{href:!0});var Opt=s(IW);m8r=r(Opt,"FlaxBartForConditionalGeneration"),Opt.forEach(t),g8r=r(U9e," (BART model)"),U9e.forEach(t),h8r=i(Me),$E=n(Me,"LI",{});var J9e=s($E);l4e=n(J9e,"STRONG",{});var Vpt=s(l4e);u8r=r(Vpt,"bert"),Vpt.forEach(t),p8r=r(J9e," \u2014 "),qW=n(J9e,"A",{href:!0});var Xpt=s(qW);_8r=r(Xpt,"FlaxBertForPreTraining"),Xpt.forEach(t),v8r=r(J9e," (BERT model)"),J9e.forEach(t),b8r=i(Me),kE=n(Me,"LI",{});var Y9e=s(kE);i4e=n(Y9e,"STRONG",{});var zpt=s(i4e);F8r=r(zpt,"big_bird"),zpt.forEach(t),T8r=r(Y9e," \u2014 "),NW=n(Y9e,"A",{href:!0});var Qpt=s(NW);M8r=r(Qpt,"FlaxBigBirdForPreTraining"),Qpt.forEach(t),E8r=r(Y9e," (BigBird model)"),Y9e.forEach(t),C8r=i(Me),SE=n(Me,"LI",{});var K9e=s(SE);d4e=n(K9e,"STRONG",{});var Wpt=s(d4e);w8r=r(Wpt,"electra"),Wpt.forEach(t),A8r=r(K9e," \u2014 "),jW=n(K9e,"A",{href:!0});var Hpt=s(jW);y8r=r(Hpt,"FlaxElectraForPreTraining"),Hpt.forEach(t),L8r=r(K9e," (ELECTRA model)"),K9e.forEach(t),x8r=i(Me),RE=n(Me,"LI",{});var Z9e=s(RE);c4e=n(Z9e,"STRONG",{});var Upt=s(c4e);$8r=r(Upt,"mbart"),Upt.forEach(t),k8r=r(Z9e," \u2014 "),DW=n(Z9e,"A",{href:!0});var Jpt=s(DW);S8r=r(Jpt,"FlaxMBartForConditionalGeneration"),Jpt.forEach(t),R8r=r(Z9e," (mBART model)"),Z9e.forEach(t),B8r=i(Me),BE=n(Me,"LI",{});var e$e=s(BE);f4e=n(e$e,"STRONG",{});var Ypt=s(f4e);P8r=r(Ypt,"mt5"),Ypt.forEach(t),I8r=r(e$e," \u2014 "),GW=n(e$e,"A",{href:!0});var Kpt=s(GW);q8r=r(Kpt,"FlaxMT5ForConditionalGeneration"),Kpt.forEach(t),N8r=r(e$e," (mT5 model)"),e$e.forEach(t),j8r=i(Me),PE=n(Me,"LI",{});var o$e=s(PE);m4e=n(o$e,"STRONG",{});var Zpt=s(m4e);D8r=r(Zpt,"roberta"),Zpt.forEach(t),G8r=r(o$e," \u2014 "),OW=n(o$e,"A",{href:!0});var e_t=s(OW);O8r=r(e_t,"FlaxRobertaForMaskedLM"),e_t.forEach(t),V8r=r(o$e," (RoBERTa model)"),o$e.forEach(t),X8r=i(Me),IE=n(Me,"LI",{});var r$e=s(IE);g4e=n(r$e,"STRONG",{});var o_t=s(g4e);z8r=r(o_t,"roformer"),o_t.forEach(t),Q8r=r(r$e," \u2014 "),VW=n(r$e,"A",{href:!0});var r_t=s(VW);W8r=r(r_t,"FlaxRoFormerForMaskedLM"),r_t.forEach(t),H8r=r(r$e," (RoFormer model)"),r$e.forEach(t),U8r=i(Me),qE=n(Me,"LI",{});var t$e=s(qE);h4e=n(t$e,"STRONG",{});var t_t=s(h4e);J8r=r(t_t,"t5"),t_t.forEach(t),Y8r=r(t$e," \u2014 "),XW=n(t$e,"A",{href:!0});var a_t=s(XW);K8r=r(a_t,"FlaxT5ForConditionalGeneration"),a_t.forEach(t),Z8r=r(t$e," (T5 model)"),t$e.forEach(t),eMr=i(Me),NE=n(Me,"LI",{});var a$e=s(NE);u4e=n(a$e,"STRONG",{});var n_t=s(u4e);oMr=r(n_t,"wav2vec2"),n_t.forEach(t),rMr=r(a$e," \u2014 "),zW=n(a$e,"A",{href:!0});var s_t=s(zW);tMr=r(s_t,"FlaxWav2Vec2ForPreTraining"),s_t.forEach(t),aMr=r(a$e," (Wav2Vec2 model)"),a$e.forEach(t),nMr=i(Me),jE=n(Me,"LI",{});var n$e=s(jE);p4e=n(n$e,"STRONG",{});var l_t=s(p4e);sMr=r(l_t,"xlm-roberta"),l_t.forEach(t),lMr=r(n$e," \u2014 "),QW=n(n$e,"A",{href:!0});var i_t=s(QW);iMr=r(i_t,"FlaxXLMRobertaForMaskedLM"),i_t.forEach(t),dMr=r(n$e," (XLM-RoBERTa model)"),n$e.forEach(t),Me.forEach(t),cMr=i(yl),T(DE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),HSe=i(f),_c=n(f,"H2",{class:!0});var KBe=s(_c);GE=n(KBe,"A",{id:!0,class:!0,href:!0});var d_t=s(GE);_4e=n(d_t,"SPAN",{});var c_t=s(_4e);T(XL.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),fMr=i(KBe),v4e=n(KBe,"SPAN",{});var f_t=s(v4e);mMr=r(f_t,"FlaxAutoModelForMaskedLM"),f_t.forEach(t),KBe.forEach(t),USe=i(f),fr=n(f,"DIV",{class:!0});var Ll=s(fr);T(zL.$$.fragment,Ll),gMr=i(Ll),vc=n(Ll,"P",{});var KJ=s(vc);hMr=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=n(KJ,"A",{href:!0});var m_t=s(WW);uMr=r(m_t,"from_pretrained()"),m_t.forEach(t),pMr=r(KJ," class method or the "),HW=n(KJ,"A",{href:!0});var g_t=s(HW);_Mr=r(g_t,"from_config()"),g_t.forEach(t),vMr=r(KJ,` class
method.`),KJ.forEach(t),bMr=i(Ll),QL=n(Ll,"P",{});var ZBe=s(QL);FMr=r(ZBe,"This class cannot be instantiated directly using "),b4e=n(ZBe,"CODE",{});var h_t=s(b4e);TMr=r(h_t,"__init__()"),h_t.forEach(t),MMr=r(ZBe," (throws an error)."),ZBe.forEach(t),EMr=i(Ll),Nt=n(Ll,"DIV",{class:!0});var uw=s(Nt);T(WL.$$.fragment,uw),CMr=i(uw),F4e=n(uw,"P",{});var u_t=s(F4e);wMr=r(u_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u_t.forEach(t),AMr=i(uw),bc=n(uw,"P",{});var ZJ=s(bc);yMr=r(ZJ,`Note:
Loading a model from its configuration file does `),T4e=n(ZJ,"STRONG",{});var p_t=s(T4e);LMr=r(p_t,"not"),p_t.forEach(t),xMr=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(ZJ,"A",{href:!0});var __t=s(UW);$Mr=r(__t,"from_pretrained()"),__t.forEach(t),kMr=r(ZJ," to load the model weights."),ZJ.forEach(t),SMr=i(uw),T(OE.$$.fragment,uw),uw.forEach(t),RMr=i(Ll),Nr=n(Ll,"DIV",{class:!0});var xl=s(Nr);T(HL.$$.fragment,xl),BMr=i(xl),M4e=n(xl,"P",{});var v_t=s(M4e);PMr=r(v_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v_t.forEach(t),IMr=i(xl),cn=n(xl,"P",{});var pw=s(cn);qMr=r(pw,"The model class to instantiate is selected based on the "),E4e=n(pw,"CODE",{});var b_t=s(E4e);NMr=r(b_t,"model_type"),b_t.forEach(t),jMr=r(pw,` property of the config object (either
passed as an argument or loaded from `),C4e=n(pw,"CODE",{});var F_t=s(C4e);DMr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),GMr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(pw,"CODE",{});var T_t=s(w4e);OMr=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),VMr=r(pw,":"),pw.forEach(t),XMr=i(xl),we=n(xl,"UL",{});var ke=s(we);VE=n(ke,"LI",{});var s$e=s(VE);A4e=n(s$e,"STRONG",{});var M_t=s(A4e);zMr=r(M_t,"albert"),M_t.forEach(t),QMr=r(s$e," \u2014 "),JW=n(s$e,"A",{href:!0});var E_t=s(JW);WMr=r(E_t,"FlaxAlbertForMaskedLM"),E_t.forEach(t),HMr=r(s$e," (ALBERT model)"),s$e.forEach(t),UMr=i(ke),XE=n(ke,"LI",{});var l$e=s(XE);y4e=n(l$e,"STRONG",{});var C_t=s(y4e);JMr=r(C_t,"bart"),C_t.forEach(t),YMr=r(l$e," \u2014 "),YW=n(l$e,"A",{href:!0});var w_t=s(YW);KMr=r(w_t,"FlaxBartForConditionalGeneration"),w_t.forEach(t),ZMr=r(l$e," (BART model)"),l$e.forEach(t),eEr=i(ke),zE=n(ke,"LI",{});var i$e=s(zE);L4e=n(i$e,"STRONG",{});var A_t=s(L4e);oEr=r(A_t,"bert"),A_t.forEach(t),rEr=r(i$e," \u2014 "),KW=n(i$e,"A",{href:!0});var y_t=s(KW);tEr=r(y_t,"FlaxBertForMaskedLM"),y_t.forEach(t),aEr=r(i$e," (BERT model)"),i$e.forEach(t),nEr=i(ke),QE=n(ke,"LI",{});var d$e=s(QE);x4e=n(d$e,"STRONG",{});var L_t=s(x4e);sEr=r(L_t,"big_bird"),L_t.forEach(t),lEr=r(d$e," \u2014 "),ZW=n(d$e,"A",{href:!0});var x_t=s(ZW);iEr=r(x_t,"FlaxBigBirdForMaskedLM"),x_t.forEach(t),dEr=r(d$e," (BigBird model)"),d$e.forEach(t),cEr=i(ke),WE=n(ke,"LI",{});var c$e=s(WE);$4e=n(c$e,"STRONG",{});var $_t=s($4e);fEr=r($_t,"distilbert"),$_t.forEach(t),mEr=r(c$e," \u2014 "),eH=n(c$e,"A",{href:!0});var k_t=s(eH);gEr=r(k_t,"FlaxDistilBertForMaskedLM"),k_t.forEach(t),hEr=r(c$e," (DistilBERT model)"),c$e.forEach(t),uEr=i(ke),HE=n(ke,"LI",{});var f$e=s(HE);k4e=n(f$e,"STRONG",{});var S_t=s(k4e);pEr=r(S_t,"electra"),S_t.forEach(t),_Er=r(f$e," \u2014 "),oH=n(f$e,"A",{href:!0});var R_t=s(oH);vEr=r(R_t,"FlaxElectraForMaskedLM"),R_t.forEach(t),bEr=r(f$e," (ELECTRA model)"),f$e.forEach(t),FEr=i(ke),UE=n(ke,"LI",{});var m$e=s(UE);S4e=n(m$e,"STRONG",{});var B_t=s(S4e);TEr=r(B_t,"mbart"),B_t.forEach(t),MEr=r(m$e," \u2014 "),rH=n(m$e,"A",{href:!0});var P_t=s(rH);EEr=r(P_t,"FlaxMBartForConditionalGeneration"),P_t.forEach(t),CEr=r(m$e," (mBART model)"),m$e.forEach(t),wEr=i(ke),JE=n(ke,"LI",{});var g$e=s(JE);R4e=n(g$e,"STRONG",{});var I_t=s(R4e);AEr=r(I_t,"roberta"),I_t.forEach(t),yEr=r(g$e," \u2014 "),tH=n(g$e,"A",{href:!0});var q_t=s(tH);LEr=r(q_t,"FlaxRobertaForMaskedLM"),q_t.forEach(t),xEr=r(g$e," (RoBERTa model)"),g$e.forEach(t),$Er=i(ke),YE=n(ke,"LI",{});var h$e=s(YE);B4e=n(h$e,"STRONG",{});var N_t=s(B4e);kEr=r(N_t,"roformer"),N_t.forEach(t),SEr=r(h$e," \u2014 "),aH=n(h$e,"A",{href:!0});var j_t=s(aH);REr=r(j_t,"FlaxRoFormerForMaskedLM"),j_t.forEach(t),BEr=r(h$e," (RoFormer model)"),h$e.forEach(t),PEr=i(ke),KE=n(ke,"LI",{});var u$e=s(KE);P4e=n(u$e,"STRONG",{});var D_t=s(P4e);IEr=r(D_t,"xlm-roberta"),D_t.forEach(t),qEr=r(u$e," \u2014 "),nH=n(u$e,"A",{href:!0});var G_t=s(nH);NEr=r(G_t,"FlaxXLMRobertaForMaskedLM"),G_t.forEach(t),jEr=r(u$e," (XLM-RoBERTa model)"),u$e.forEach(t),ke.forEach(t),DEr=i(xl),T(ZE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),JSe=i(f),Fc=n(f,"H2",{class:!0});var ePe=s(Fc);e5=n(ePe,"A",{id:!0,class:!0,href:!0});var O_t=s(e5);I4e=n(O_t,"SPAN",{});var V_t=s(I4e);T(UL.$$.fragment,V_t),V_t.forEach(t),O_t.forEach(t),GEr=i(ePe),q4e=n(ePe,"SPAN",{});var X_t=s(q4e);OEr=r(X_t,"FlaxAutoModelForSeq2SeqLM"),X_t.forEach(t),ePe.forEach(t),YSe=i(f),mr=n(f,"DIV",{class:!0});var $l=s(mr);T(JL.$$.fragment,$l),VEr=i($l),Tc=n($l,"P",{});var eY=s(Tc);XEr=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=n(eY,"A",{href:!0});var z_t=s(sH);zEr=r(z_t,"from_pretrained()"),z_t.forEach(t),QEr=r(eY," class method or the "),lH=n(eY,"A",{href:!0});var Q_t=s(lH);WEr=r(Q_t,"from_config()"),Q_t.forEach(t),HEr=r(eY,` class
method.`),eY.forEach(t),UEr=i($l),YL=n($l,"P",{});var oPe=s(YL);JEr=r(oPe,"This class cannot be instantiated directly using "),N4e=n(oPe,"CODE",{});var W_t=s(N4e);YEr=r(W_t,"__init__()"),W_t.forEach(t),KEr=r(oPe," (throws an error)."),oPe.forEach(t),ZEr=i($l),jt=n($l,"DIV",{class:!0});var _w=s(jt);T(KL.$$.fragment,_w),e5r=i(_w),j4e=n(_w,"P",{});var H_t=s(j4e);o5r=r(H_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H_t.forEach(t),r5r=i(_w),Mc=n(_w,"P",{});var oY=s(Mc);t5r=r(oY,`Note:
Loading a model from its configuration file does `),D4e=n(oY,"STRONG",{});var U_t=s(D4e);a5r=r(U_t,"not"),U_t.forEach(t),n5r=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(oY,"A",{href:!0});var J_t=s(iH);s5r=r(J_t,"from_pretrained()"),J_t.forEach(t),l5r=r(oY," to load the model weights."),oY.forEach(t),i5r=i(_w),T(o5.$$.fragment,_w),_w.forEach(t),d5r=i($l),jr=n($l,"DIV",{class:!0});var kl=s(jr);T(ZL.$$.fragment,kl),c5r=i(kl),G4e=n(kl,"P",{});var Y_t=s(G4e);f5r=r(Y_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y_t.forEach(t),m5r=i(kl),fn=n(kl,"P",{});var vw=s(fn);g5r=r(vw,"The model class to instantiate is selected based on the "),O4e=n(vw,"CODE",{});var K_t=s(O4e);h5r=r(K_t,"model_type"),K_t.forEach(t),u5r=r(vw,` property of the config object (either
passed as an argument or loaded from `),V4e=n(vw,"CODE",{});var Z_t=s(V4e);p5r=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),_5r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(vw,"CODE",{});var evt=s(X4e);v5r=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),b5r=r(vw,":"),vw.forEach(t),F5r=i(kl),xe=n(kl,"UL",{});var De=s(xe);r5=n(De,"LI",{});var p$e=s(r5);z4e=n(p$e,"STRONG",{});var ovt=s(z4e);T5r=r(ovt,"bart"),ovt.forEach(t),M5r=r(p$e," \u2014 "),dH=n(p$e,"A",{href:!0});var rvt=s(dH);E5r=r(rvt,"FlaxBartForConditionalGeneration"),rvt.forEach(t),C5r=r(p$e," (BART model)"),p$e.forEach(t),w5r=i(De),t5=n(De,"LI",{});var _$e=s(t5);Q4e=n(_$e,"STRONG",{});var tvt=s(Q4e);A5r=r(tvt,"blenderbot"),tvt.forEach(t),y5r=r(_$e," \u2014 "),cH=n(_$e,"A",{href:!0});var avt=s(cH);L5r=r(avt,"FlaxBlenderbotForConditionalGeneration"),avt.forEach(t),x5r=r(_$e," (Blenderbot model)"),_$e.forEach(t),$5r=i(De),a5=n(De,"LI",{});var v$e=s(a5);W4e=n(v$e,"STRONG",{});var nvt=s(W4e);k5r=r(nvt,"blenderbot-small"),nvt.forEach(t),S5r=r(v$e," \u2014 "),fH=n(v$e,"A",{href:!0});var svt=s(fH);R5r=r(svt,"FlaxBlenderbotSmallForConditionalGeneration"),svt.forEach(t),B5r=r(v$e," (BlenderbotSmall model)"),v$e.forEach(t),P5r=i(De),n5=n(De,"LI",{});var b$e=s(n5);H4e=n(b$e,"STRONG",{});var lvt=s(H4e);I5r=r(lvt,"encoder-decoder"),lvt.forEach(t),q5r=r(b$e," \u2014 "),mH=n(b$e,"A",{href:!0});var ivt=s(mH);N5r=r(ivt,"FlaxEncoderDecoderModel"),ivt.forEach(t),j5r=r(b$e," (Encoder decoder model)"),b$e.forEach(t),D5r=i(De),s5=n(De,"LI",{});var F$e=s(s5);U4e=n(F$e,"STRONG",{});var dvt=s(U4e);G5r=r(dvt,"marian"),dvt.forEach(t),O5r=r(F$e," \u2014 "),gH=n(F$e,"A",{href:!0});var cvt=s(gH);V5r=r(cvt,"FlaxMarianMTModel"),cvt.forEach(t),X5r=r(F$e," (Marian model)"),F$e.forEach(t),z5r=i(De),l5=n(De,"LI",{});var T$e=s(l5);J4e=n(T$e,"STRONG",{});var fvt=s(J4e);Q5r=r(fvt,"mbart"),fvt.forEach(t),W5r=r(T$e," \u2014 "),hH=n(T$e,"A",{href:!0});var mvt=s(hH);H5r=r(mvt,"FlaxMBartForConditionalGeneration"),mvt.forEach(t),U5r=r(T$e," (mBART model)"),T$e.forEach(t),J5r=i(De),i5=n(De,"LI",{});var M$e=s(i5);Y4e=n(M$e,"STRONG",{});var gvt=s(Y4e);Y5r=r(gvt,"mt5"),gvt.forEach(t),K5r=r(M$e," \u2014 "),uH=n(M$e,"A",{href:!0});var hvt=s(uH);Z5r=r(hvt,"FlaxMT5ForConditionalGeneration"),hvt.forEach(t),eCr=r(M$e," (mT5 model)"),M$e.forEach(t),oCr=i(De),d5=n(De,"LI",{});var E$e=s(d5);K4e=n(E$e,"STRONG",{});var uvt=s(K4e);rCr=r(uvt,"pegasus"),uvt.forEach(t),tCr=r(E$e," \u2014 "),pH=n(E$e,"A",{href:!0});var pvt=s(pH);aCr=r(pvt,"FlaxPegasusForConditionalGeneration"),pvt.forEach(t),nCr=r(E$e," (Pegasus model)"),E$e.forEach(t),sCr=i(De),c5=n(De,"LI",{});var C$e=s(c5);Z4e=n(C$e,"STRONG",{});var _vt=s(Z4e);lCr=r(_vt,"t5"),_vt.forEach(t),iCr=r(C$e," \u2014 "),_H=n(C$e,"A",{href:!0});var vvt=s(_H);dCr=r(vvt,"FlaxT5ForConditionalGeneration"),vvt.forEach(t),cCr=r(C$e," (T5 model)"),C$e.forEach(t),De.forEach(t),fCr=i(kl),T(f5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),KSe=i(f),Ec=n(f,"H2",{class:!0});var rPe=s(Ec);m5=n(rPe,"A",{id:!0,class:!0,href:!0});var bvt=s(m5);e2e=n(bvt,"SPAN",{});var Fvt=s(e2e);T(ex.$$.fragment,Fvt),Fvt.forEach(t),bvt.forEach(t),mCr=i(rPe),o2e=n(rPe,"SPAN",{});var Tvt=s(o2e);gCr=r(Tvt,"FlaxAutoModelForSequenceClassification"),Tvt.forEach(t),rPe.forEach(t),ZSe=i(f),gr=n(f,"DIV",{class:!0});var Sl=s(gr);T(ox.$$.fragment,Sl),hCr=i(Sl),Cc=n(Sl,"P",{});var rY=s(Cc);uCr=r(rY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vH=n(rY,"A",{href:!0});var Mvt=s(vH);pCr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),_Cr=r(rY," class method or the "),bH=n(rY,"A",{href:!0});var Evt=s(bH);vCr=r(Evt,"from_config()"),Evt.forEach(t),bCr=r(rY,` class
method.`),rY.forEach(t),FCr=i(Sl),rx=n(Sl,"P",{});var tPe=s(rx);TCr=r(tPe,"This class cannot be instantiated directly using "),r2e=n(tPe,"CODE",{});var Cvt=s(r2e);MCr=r(Cvt,"__init__()"),Cvt.forEach(t),ECr=r(tPe," (throws an error)."),tPe.forEach(t),CCr=i(Sl),Dt=n(Sl,"DIV",{class:!0});var bw=s(Dt);T(tx.$$.fragment,bw),wCr=i(bw),t2e=n(bw,"P",{});var wvt=s(t2e);ACr=r(wvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wvt.forEach(t),yCr=i(bw),wc=n(bw,"P",{});var tY=s(wc);LCr=r(tY,`Note:
Loading a model from its configuration file does `),a2e=n(tY,"STRONG",{});var Avt=s(a2e);xCr=r(Avt,"not"),Avt.forEach(t),$Cr=r(tY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(tY,"A",{href:!0});var yvt=s(FH);kCr=r(yvt,"from_pretrained()"),yvt.forEach(t),SCr=r(tY," to load the model weights."),tY.forEach(t),RCr=i(bw),T(g5.$$.fragment,bw),bw.forEach(t),BCr=i(Sl),Dr=n(Sl,"DIV",{class:!0});var Rl=s(Dr);T(ax.$$.fragment,Rl),PCr=i(Rl),n2e=n(Rl,"P",{});var Lvt=s(n2e);ICr=r(Lvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lvt.forEach(t),qCr=i(Rl),mn=n(Rl,"P",{});var Fw=s(mn);NCr=r(Fw,"The model class to instantiate is selected based on the "),s2e=n(Fw,"CODE",{});var xvt=s(s2e);jCr=r(xvt,"model_type"),xvt.forEach(t),DCr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),l2e=n(Fw,"CODE",{});var $vt=s(l2e);GCr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),OCr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(Fw,"CODE",{});var kvt=s(i2e);VCr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),XCr=r(Fw,":"),Fw.forEach(t),zCr=i(Rl),Ae=n(Rl,"UL",{});var Se=s(Ae);h5=n(Se,"LI",{});var w$e=s(h5);d2e=n(w$e,"STRONG",{});var Svt=s(d2e);QCr=r(Svt,"albert"),Svt.forEach(t),WCr=r(w$e," \u2014 "),TH=n(w$e,"A",{href:!0});var Rvt=s(TH);HCr=r(Rvt,"FlaxAlbertForSequenceClassification"),Rvt.forEach(t),UCr=r(w$e," (ALBERT model)"),w$e.forEach(t),JCr=i(Se),u5=n(Se,"LI",{});var A$e=s(u5);c2e=n(A$e,"STRONG",{});var Bvt=s(c2e);YCr=r(Bvt,"bart"),Bvt.forEach(t),KCr=r(A$e," \u2014 "),MH=n(A$e,"A",{href:!0});var Pvt=s(MH);ZCr=r(Pvt,"FlaxBartForSequenceClassification"),Pvt.forEach(t),e3r=r(A$e," (BART model)"),A$e.forEach(t),o3r=i(Se),p5=n(Se,"LI",{});var y$e=s(p5);f2e=n(y$e,"STRONG",{});var Ivt=s(f2e);r3r=r(Ivt,"bert"),Ivt.forEach(t),t3r=r(y$e," \u2014 "),EH=n(y$e,"A",{href:!0});var qvt=s(EH);a3r=r(qvt,"FlaxBertForSequenceClassification"),qvt.forEach(t),n3r=r(y$e," (BERT model)"),y$e.forEach(t),s3r=i(Se),_5=n(Se,"LI",{});var L$e=s(_5);m2e=n(L$e,"STRONG",{});var Nvt=s(m2e);l3r=r(Nvt,"big_bird"),Nvt.forEach(t),i3r=r(L$e," \u2014 "),CH=n(L$e,"A",{href:!0});var jvt=s(CH);d3r=r(jvt,"FlaxBigBirdForSequenceClassification"),jvt.forEach(t),c3r=r(L$e," (BigBird model)"),L$e.forEach(t),f3r=i(Se),v5=n(Se,"LI",{});var x$e=s(v5);g2e=n(x$e,"STRONG",{});var Dvt=s(g2e);m3r=r(Dvt,"distilbert"),Dvt.forEach(t),g3r=r(x$e," \u2014 "),wH=n(x$e,"A",{href:!0});var Gvt=s(wH);h3r=r(Gvt,"FlaxDistilBertForSequenceClassification"),Gvt.forEach(t),u3r=r(x$e," (DistilBERT model)"),x$e.forEach(t),p3r=i(Se),b5=n(Se,"LI",{});var $$e=s(b5);h2e=n($$e,"STRONG",{});var Ovt=s(h2e);_3r=r(Ovt,"electra"),Ovt.forEach(t),v3r=r($$e," \u2014 "),AH=n($$e,"A",{href:!0});var Vvt=s(AH);b3r=r(Vvt,"FlaxElectraForSequenceClassification"),Vvt.forEach(t),F3r=r($$e," (ELECTRA model)"),$$e.forEach(t),T3r=i(Se),F5=n(Se,"LI",{});var k$e=s(F5);u2e=n(k$e,"STRONG",{});var Xvt=s(u2e);M3r=r(Xvt,"mbart"),Xvt.forEach(t),E3r=r(k$e," \u2014 "),yH=n(k$e,"A",{href:!0});var zvt=s(yH);C3r=r(zvt,"FlaxMBartForSequenceClassification"),zvt.forEach(t),w3r=r(k$e," (mBART model)"),k$e.forEach(t),A3r=i(Se),T5=n(Se,"LI",{});var S$e=s(T5);p2e=n(S$e,"STRONG",{});var Qvt=s(p2e);y3r=r(Qvt,"roberta"),Qvt.forEach(t),L3r=r(S$e," \u2014 "),LH=n(S$e,"A",{href:!0});var Wvt=s(LH);x3r=r(Wvt,"FlaxRobertaForSequenceClassification"),Wvt.forEach(t),$3r=r(S$e," (RoBERTa model)"),S$e.forEach(t),k3r=i(Se),M5=n(Se,"LI",{});var R$e=s(M5);_2e=n(R$e,"STRONG",{});var Hvt=s(_2e);S3r=r(Hvt,"roformer"),Hvt.forEach(t),R3r=r(R$e," \u2014 "),xH=n(R$e,"A",{href:!0});var Uvt=s(xH);B3r=r(Uvt,"FlaxRoFormerForSequenceClassification"),Uvt.forEach(t),P3r=r(R$e," (RoFormer model)"),R$e.forEach(t),I3r=i(Se),E5=n(Se,"LI",{});var B$e=s(E5);v2e=n(B$e,"STRONG",{});var Jvt=s(v2e);q3r=r(Jvt,"xlm-roberta"),Jvt.forEach(t),N3r=r(B$e," \u2014 "),$H=n(B$e,"A",{href:!0});var Yvt=s($H);j3r=r(Yvt,"FlaxXLMRobertaForSequenceClassification"),Yvt.forEach(t),D3r=r(B$e," (XLM-RoBERTa model)"),B$e.forEach(t),Se.forEach(t),G3r=i(Rl),T(C5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),eRe=i(f),Ac=n(f,"H2",{class:!0});var aPe=s(Ac);w5=n(aPe,"A",{id:!0,class:!0,href:!0});var Kvt=s(w5);b2e=n(Kvt,"SPAN",{});var Zvt=s(b2e);T(nx.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),O3r=i(aPe),F2e=n(aPe,"SPAN",{});var e1t=s(F2e);V3r=r(e1t,"FlaxAutoModelForQuestionAnswering"),e1t.forEach(t),aPe.forEach(t),oRe=i(f),hr=n(f,"DIV",{class:!0});var Bl=s(hr);T(sx.$$.fragment,Bl),X3r=i(Bl),yc=n(Bl,"P",{});var aY=s(yc);z3r=r(aY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kH=n(aY,"A",{href:!0});var o1t=s(kH);Q3r=r(o1t,"from_pretrained()"),o1t.forEach(t),W3r=r(aY," class method or the "),SH=n(aY,"A",{href:!0});var r1t=s(SH);H3r=r(r1t,"from_config()"),r1t.forEach(t),U3r=r(aY,` class
method.`),aY.forEach(t),J3r=i(Bl),lx=n(Bl,"P",{});var nPe=s(lx);Y3r=r(nPe,"This class cannot be instantiated directly using "),T2e=n(nPe,"CODE",{});var t1t=s(T2e);K3r=r(t1t,"__init__()"),t1t.forEach(t),Z3r=r(nPe," (throws an error)."),nPe.forEach(t),ewr=i(Bl),Gt=n(Bl,"DIV",{class:!0});var Tw=s(Gt);T(ix.$$.fragment,Tw),owr=i(Tw),M2e=n(Tw,"P",{});var a1t=s(M2e);rwr=r(a1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a1t.forEach(t),twr=i(Tw),Lc=n(Tw,"P",{});var nY=s(Lc);awr=r(nY,`Note:
Loading a model from its configuration file does `),E2e=n(nY,"STRONG",{});var n1t=s(E2e);nwr=r(n1t,"not"),n1t.forEach(t),swr=r(nY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(nY,"A",{href:!0});var s1t=s(RH);lwr=r(s1t,"from_pretrained()"),s1t.forEach(t),iwr=r(nY," to load the model weights."),nY.forEach(t),dwr=i(Tw),T(A5.$$.fragment,Tw),Tw.forEach(t),cwr=i(Bl),Gr=n(Bl,"DIV",{class:!0});var Pl=s(Gr);T(dx.$$.fragment,Pl),fwr=i(Pl),C2e=n(Pl,"P",{});var l1t=s(C2e);mwr=r(l1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l1t.forEach(t),gwr=i(Pl),gn=n(Pl,"P",{});var Mw=s(gn);hwr=r(Mw,"The model class to instantiate is selected based on the "),w2e=n(Mw,"CODE",{});var i1t=s(w2e);uwr=r(i1t,"model_type"),i1t.forEach(t),pwr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),A2e=n(Mw,"CODE",{});var d1t=s(A2e);_wr=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),vwr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(Mw,"CODE",{});var c1t=s(y2e);bwr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Fwr=r(Mw,":"),Mw.forEach(t),Twr=i(Pl),ye=n(Pl,"UL",{});var Re=s(ye);y5=n(Re,"LI",{});var P$e=s(y5);L2e=n(P$e,"STRONG",{});var f1t=s(L2e);Mwr=r(f1t,"albert"),f1t.forEach(t),Ewr=r(P$e," \u2014 "),BH=n(P$e,"A",{href:!0});var m1t=s(BH);Cwr=r(m1t,"FlaxAlbertForQuestionAnswering"),m1t.forEach(t),wwr=r(P$e," (ALBERT model)"),P$e.forEach(t),Awr=i(Re),L5=n(Re,"LI",{});var I$e=s(L5);x2e=n(I$e,"STRONG",{});var g1t=s(x2e);ywr=r(g1t,"bart"),g1t.forEach(t),Lwr=r(I$e," \u2014 "),PH=n(I$e,"A",{href:!0});var h1t=s(PH);xwr=r(h1t,"FlaxBartForQuestionAnswering"),h1t.forEach(t),$wr=r(I$e," (BART model)"),I$e.forEach(t),kwr=i(Re),x5=n(Re,"LI",{});var q$e=s(x5);$2e=n(q$e,"STRONG",{});var u1t=s($2e);Swr=r(u1t,"bert"),u1t.forEach(t),Rwr=r(q$e," \u2014 "),IH=n(q$e,"A",{href:!0});var p1t=s(IH);Bwr=r(p1t,"FlaxBertForQuestionAnswering"),p1t.forEach(t),Pwr=r(q$e," (BERT model)"),q$e.forEach(t),Iwr=i(Re),$5=n(Re,"LI",{});var N$e=s($5);k2e=n(N$e,"STRONG",{});var _1t=s(k2e);qwr=r(_1t,"big_bird"),_1t.forEach(t),Nwr=r(N$e," \u2014 "),qH=n(N$e,"A",{href:!0});var v1t=s(qH);jwr=r(v1t,"FlaxBigBirdForQuestionAnswering"),v1t.forEach(t),Dwr=r(N$e," (BigBird model)"),N$e.forEach(t),Gwr=i(Re),k5=n(Re,"LI",{});var j$e=s(k5);S2e=n(j$e,"STRONG",{});var b1t=s(S2e);Owr=r(b1t,"distilbert"),b1t.forEach(t),Vwr=r(j$e," \u2014 "),NH=n(j$e,"A",{href:!0});var F1t=s(NH);Xwr=r(F1t,"FlaxDistilBertForQuestionAnswering"),F1t.forEach(t),zwr=r(j$e," (DistilBERT model)"),j$e.forEach(t),Qwr=i(Re),S5=n(Re,"LI",{});var D$e=s(S5);R2e=n(D$e,"STRONG",{});var T1t=s(R2e);Wwr=r(T1t,"electra"),T1t.forEach(t),Hwr=r(D$e," \u2014 "),jH=n(D$e,"A",{href:!0});var M1t=s(jH);Uwr=r(M1t,"FlaxElectraForQuestionAnswering"),M1t.forEach(t),Jwr=r(D$e," (ELECTRA model)"),D$e.forEach(t),Ywr=i(Re),R5=n(Re,"LI",{});var G$e=s(R5);B2e=n(G$e,"STRONG",{});var E1t=s(B2e);Kwr=r(E1t,"mbart"),E1t.forEach(t),Zwr=r(G$e," \u2014 "),DH=n(G$e,"A",{href:!0});var C1t=s(DH);eAr=r(C1t,"FlaxMBartForQuestionAnswering"),C1t.forEach(t),oAr=r(G$e," (mBART model)"),G$e.forEach(t),rAr=i(Re),B5=n(Re,"LI",{});var O$e=s(B5);P2e=n(O$e,"STRONG",{});var w1t=s(P2e);tAr=r(w1t,"roberta"),w1t.forEach(t),aAr=r(O$e," \u2014 "),GH=n(O$e,"A",{href:!0});var A1t=s(GH);nAr=r(A1t,"FlaxRobertaForQuestionAnswering"),A1t.forEach(t),sAr=r(O$e," (RoBERTa model)"),O$e.forEach(t),lAr=i(Re),P5=n(Re,"LI",{});var V$e=s(P5);I2e=n(V$e,"STRONG",{});var y1t=s(I2e);iAr=r(y1t,"roformer"),y1t.forEach(t),dAr=r(V$e," \u2014 "),OH=n(V$e,"A",{href:!0});var L1t=s(OH);cAr=r(L1t,"FlaxRoFormerForQuestionAnswering"),L1t.forEach(t),fAr=r(V$e," (RoFormer model)"),V$e.forEach(t),mAr=i(Re),I5=n(Re,"LI",{});var X$e=s(I5);q2e=n(X$e,"STRONG",{});var x1t=s(q2e);gAr=r(x1t,"xlm-roberta"),x1t.forEach(t),hAr=r(X$e," \u2014 "),VH=n(X$e,"A",{href:!0});var $1t=s(VH);uAr=r($1t,"FlaxXLMRobertaForQuestionAnswering"),$1t.forEach(t),pAr=r(X$e," (XLM-RoBERTa model)"),X$e.forEach(t),Re.forEach(t),_Ar=i(Pl),T(q5.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),rRe=i(f),xc=n(f,"H2",{class:!0});var sPe=s(xc);N5=n(sPe,"A",{id:!0,class:!0,href:!0});var k1t=s(N5);N2e=n(k1t,"SPAN",{});var S1t=s(N2e);T(cx.$$.fragment,S1t),S1t.forEach(t),k1t.forEach(t),vAr=i(sPe),j2e=n(sPe,"SPAN",{});var R1t=s(j2e);bAr=r(R1t,"FlaxAutoModelForTokenClassification"),R1t.forEach(t),sPe.forEach(t),tRe=i(f),ur=n(f,"DIV",{class:!0});var Il=s(ur);T(fx.$$.fragment,Il),FAr=i(Il),$c=n(Il,"P",{});var sY=s($c);TAr=r(sY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XH=n(sY,"A",{href:!0});var B1t=s(XH);MAr=r(B1t,"from_pretrained()"),B1t.forEach(t),EAr=r(sY," class method or the "),zH=n(sY,"A",{href:!0});var P1t=s(zH);CAr=r(P1t,"from_config()"),P1t.forEach(t),wAr=r(sY,` class
method.`),sY.forEach(t),AAr=i(Il),mx=n(Il,"P",{});var lPe=s(mx);yAr=r(lPe,"This class cannot be instantiated directly using "),D2e=n(lPe,"CODE",{});var I1t=s(D2e);LAr=r(I1t,"__init__()"),I1t.forEach(t),xAr=r(lPe," (throws an error)."),lPe.forEach(t),$Ar=i(Il),Ot=n(Il,"DIV",{class:!0});var Ew=s(Ot);T(gx.$$.fragment,Ew),kAr=i(Ew),G2e=n(Ew,"P",{});var q1t=s(G2e);SAr=r(q1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q1t.forEach(t),RAr=i(Ew),kc=n(Ew,"P",{});var lY=s(kc);BAr=r(lY,`Note:
Loading a model from its configuration file does `),O2e=n(lY,"STRONG",{});var N1t=s(O2e);PAr=r(N1t,"not"),N1t.forEach(t),IAr=r(lY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(lY,"A",{href:!0});var j1t=s(QH);qAr=r(j1t,"from_pretrained()"),j1t.forEach(t),NAr=r(lY," to load the model weights."),lY.forEach(t),jAr=i(Ew),T(j5.$$.fragment,Ew),Ew.forEach(t),DAr=i(Il),Or=n(Il,"DIV",{class:!0});var ql=s(Or);T(hx.$$.fragment,ql),GAr=i(ql),V2e=n(ql,"P",{});var D1t=s(V2e);OAr=r(D1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D1t.forEach(t),VAr=i(ql),hn=n(ql,"P",{});var Cw=s(hn);XAr=r(Cw,"The model class to instantiate is selected based on the "),X2e=n(Cw,"CODE",{});var G1t=s(X2e);zAr=r(G1t,"model_type"),G1t.forEach(t),QAr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),z2e=n(Cw,"CODE",{});var O1t=s(z2e);WAr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),HAr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(Cw,"CODE",{});var V1t=s(Q2e);UAr=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),JAr=r(Cw,":"),Cw.forEach(t),YAr=i(ql),Ne=n(ql,"UL",{});var vo=s(Ne);D5=n(vo,"LI",{});var z$e=s(D5);W2e=n(z$e,"STRONG",{});var X1t=s(W2e);KAr=r(X1t,"albert"),X1t.forEach(t),ZAr=r(z$e," \u2014 "),WH=n(z$e,"A",{href:!0});var z1t=s(WH);e6r=r(z1t,"FlaxAlbertForTokenClassification"),z1t.forEach(t),o6r=r(z$e," (ALBERT model)"),z$e.forEach(t),r6r=i(vo),G5=n(vo,"LI",{});var Q$e=s(G5);H2e=n(Q$e,"STRONG",{});var Q1t=s(H2e);t6r=r(Q1t,"bert"),Q1t.forEach(t),a6r=r(Q$e," \u2014 "),HH=n(Q$e,"A",{href:!0});var W1t=s(HH);n6r=r(W1t,"FlaxBertForTokenClassification"),W1t.forEach(t),s6r=r(Q$e," (BERT model)"),Q$e.forEach(t),l6r=i(vo),O5=n(vo,"LI",{});var W$e=s(O5);U2e=n(W$e,"STRONG",{});var H1t=s(U2e);i6r=r(H1t,"big_bird"),H1t.forEach(t),d6r=r(W$e," \u2014 "),UH=n(W$e,"A",{href:!0});var U1t=s(UH);c6r=r(U1t,"FlaxBigBirdForTokenClassification"),U1t.forEach(t),f6r=r(W$e," (BigBird model)"),W$e.forEach(t),m6r=i(vo),V5=n(vo,"LI",{});var H$e=s(V5);J2e=n(H$e,"STRONG",{});var J1t=s(J2e);g6r=r(J1t,"distilbert"),J1t.forEach(t),h6r=r(H$e," \u2014 "),JH=n(H$e,"A",{href:!0});var Y1t=s(JH);u6r=r(Y1t,"FlaxDistilBertForTokenClassification"),Y1t.forEach(t),p6r=r(H$e," (DistilBERT model)"),H$e.forEach(t),_6r=i(vo),X5=n(vo,"LI",{});var U$e=s(X5);Y2e=n(U$e,"STRONG",{});var K1t=s(Y2e);v6r=r(K1t,"electra"),K1t.forEach(t),b6r=r(U$e," \u2014 "),YH=n(U$e,"A",{href:!0});var Z1t=s(YH);F6r=r(Z1t,"FlaxElectraForTokenClassification"),Z1t.forEach(t),T6r=r(U$e," (ELECTRA model)"),U$e.forEach(t),M6r=i(vo),z5=n(vo,"LI",{});var J$e=s(z5);K2e=n(J$e,"STRONG",{});var ebt=s(K2e);E6r=r(ebt,"roberta"),ebt.forEach(t),C6r=r(J$e," \u2014 "),KH=n(J$e,"A",{href:!0});var obt=s(KH);w6r=r(obt,"FlaxRobertaForTokenClassification"),obt.forEach(t),A6r=r(J$e," (RoBERTa model)"),J$e.forEach(t),y6r=i(vo),Q5=n(vo,"LI",{});var Y$e=s(Q5);Z2e=n(Y$e,"STRONG",{});var rbt=s(Z2e);L6r=r(rbt,"roformer"),rbt.forEach(t),x6r=r(Y$e," \u2014 "),ZH=n(Y$e,"A",{href:!0});var tbt=s(ZH);$6r=r(tbt,"FlaxRoFormerForTokenClassification"),tbt.forEach(t),k6r=r(Y$e," (RoFormer model)"),Y$e.forEach(t),S6r=i(vo),W5=n(vo,"LI",{});var K$e=s(W5);eFe=n(K$e,"STRONG",{});var abt=s(eFe);R6r=r(abt,"xlm-roberta"),abt.forEach(t),B6r=r(K$e," \u2014 "),eU=n(K$e,"A",{href:!0});var nbt=s(eU);P6r=r(nbt,"FlaxXLMRobertaForTokenClassification"),nbt.forEach(t),I6r=r(K$e," (XLM-RoBERTa model)"),K$e.forEach(t),vo.forEach(t),q6r=i(ql),T(H5.$$.fragment,ql),ql.forEach(t),Il.forEach(t),aRe=i(f),Sc=n(f,"H2",{class:!0});var iPe=s(Sc);U5=n(iPe,"A",{id:!0,class:!0,href:!0});var sbt=s(U5);oFe=n(sbt,"SPAN",{});var lbt=s(oFe);T(ux.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),N6r=i(iPe),rFe=n(iPe,"SPAN",{});var ibt=s(rFe);j6r=r(ibt,"FlaxAutoModelForMultipleChoice"),ibt.forEach(t),iPe.forEach(t),nRe=i(f),pr=n(f,"DIV",{class:!0});var Nl=s(pr);T(px.$$.fragment,Nl),D6r=i(Nl),Rc=n(Nl,"P",{});var iY=s(Rc);G6r=r(iY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oU=n(iY,"A",{href:!0});var dbt=s(oU);O6r=r(dbt,"from_pretrained()"),dbt.forEach(t),V6r=r(iY," class method or the "),rU=n(iY,"A",{href:!0});var cbt=s(rU);X6r=r(cbt,"from_config()"),cbt.forEach(t),z6r=r(iY,` class
method.`),iY.forEach(t),Q6r=i(Nl),_x=n(Nl,"P",{});var dPe=s(_x);W6r=r(dPe,"This class cannot be instantiated directly using "),tFe=n(dPe,"CODE",{});var fbt=s(tFe);H6r=r(fbt,"__init__()"),fbt.forEach(t),U6r=r(dPe," (throws an error)."),dPe.forEach(t),J6r=i(Nl),Vt=n(Nl,"DIV",{class:!0});var ww=s(Vt);T(vx.$$.fragment,ww),Y6r=i(ww),aFe=n(ww,"P",{});var mbt=s(aFe);K6r=r(mbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mbt.forEach(t),Z6r=i(ww),Bc=n(ww,"P",{});var dY=s(Bc);eyr=r(dY,`Note:
Loading a model from its configuration file does `),nFe=n(dY,"STRONG",{});var gbt=s(nFe);oyr=r(gbt,"not"),gbt.forEach(t),ryr=r(dY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(dY,"A",{href:!0});var hbt=s(tU);tyr=r(hbt,"from_pretrained()"),hbt.forEach(t),ayr=r(dY," to load the model weights."),dY.forEach(t),nyr=i(ww),T(J5.$$.fragment,ww),ww.forEach(t),syr=i(Nl),Vr=n(Nl,"DIV",{class:!0});var jl=s(Vr);T(bx.$$.fragment,jl),lyr=i(jl),sFe=n(jl,"P",{});var ubt=s(sFe);iyr=r(ubt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ubt.forEach(t),dyr=i(jl),un=n(jl,"P",{});var Aw=s(un);cyr=r(Aw,"The model class to instantiate is selected based on the "),lFe=n(Aw,"CODE",{});var pbt=s(lFe);fyr=r(pbt,"model_type"),pbt.forEach(t),myr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),iFe=n(Aw,"CODE",{});var _bt=s(iFe);gyr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),hyr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(Aw,"CODE",{});var vbt=s(dFe);uyr=r(vbt,"pretrained_model_name_or_path"),vbt.forEach(t),pyr=r(Aw,":"),Aw.forEach(t),_yr=i(jl),je=n(jl,"UL",{});var bo=s(je);Y5=n(bo,"LI",{});var Z$e=s(Y5);cFe=n(Z$e,"STRONG",{});var bbt=s(cFe);vyr=r(bbt,"albert"),bbt.forEach(t),byr=r(Z$e," \u2014 "),aU=n(Z$e,"A",{href:!0});var Fbt=s(aU);Fyr=r(Fbt,"FlaxAlbertForMultipleChoice"),Fbt.forEach(t),Tyr=r(Z$e," (ALBERT model)"),Z$e.forEach(t),Myr=i(bo),K5=n(bo,"LI",{});var eke=s(K5);fFe=n(eke,"STRONG",{});var Tbt=s(fFe);Eyr=r(Tbt,"bert"),Tbt.forEach(t),Cyr=r(eke," \u2014 "),nU=n(eke,"A",{href:!0});var Mbt=s(nU);wyr=r(Mbt,"FlaxBertForMultipleChoice"),Mbt.forEach(t),Ayr=r(eke," (BERT model)"),eke.forEach(t),yyr=i(bo),Z5=n(bo,"LI",{});var oke=s(Z5);mFe=n(oke,"STRONG",{});var Ebt=s(mFe);Lyr=r(Ebt,"big_bird"),Ebt.forEach(t),xyr=r(oke," \u2014 "),sU=n(oke,"A",{href:!0});var Cbt=s(sU);$yr=r(Cbt,"FlaxBigBirdForMultipleChoice"),Cbt.forEach(t),kyr=r(oke," (BigBird model)"),oke.forEach(t),Syr=i(bo),eC=n(bo,"LI",{});var rke=s(eC);gFe=n(rke,"STRONG",{});var wbt=s(gFe);Ryr=r(wbt,"distilbert"),wbt.forEach(t),Byr=r(rke," \u2014 "),lU=n(rke,"A",{href:!0});var Abt=s(lU);Pyr=r(Abt,"FlaxDistilBertForMultipleChoice"),Abt.forEach(t),Iyr=r(rke," (DistilBERT model)"),rke.forEach(t),qyr=i(bo),oC=n(bo,"LI",{});var tke=s(oC);hFe=n(tke,"STRONG",{});var ybt=s(hFe);Nyr=r(ybt,"electra"),ybt.forEach(t),jyr=r(tke," \u2014 "),iU=n(tke,"A",{href:!0});var Lbt=s(iU);Dyr=r(Lbt,"FlaxElectraForMultipleChoice"),Lbt.forEach(t),Gyr=r(tke," (ELECTRA model)"),tke.forEach(t),Oyr=i(bo),rC=n(bo,"LI",{});var ake=s(rC);uFe=n(ake,"STRONG",{});var xbt=s(uFe);Vyr=r(xbt,"roberta"),xbt.forEach(t),Xyr=r(ake," \u2014 "),dU=n(ake,"A",{href:!0});var $bt=s(dU);zyr=r($bt,"FlaxRobertaForMultipleChoice"),$bt.forEach(t),Qyr=r(ake," (RoBERTa model)"),ake.forEach(t),Wyr=i(bo),tC=n(bo,"LI",{});var nke=s(tC);pFe=n(nke,"STRONG",{});var kbt=s(pFe);Hyr=r(kbt,"roformer"),kbt.forEach(t),Uyr=r(nke," \u2014 "),cU=n(nke,"A",{href:!0});var Sbt=s(cU);Jyr=r(Sbt,"FlaxRoFormerForMultipleChoice"),Sbt.forEach(t),Yyr=r(nke," (RoFormer model)"),nke.forEach(t),Kyr=i(bo),aC=n(bo,"LI",{});var ske=s(aC);_Fe=n(ske,"STRONG",{});var Rbt=s(_Fe);Zyr=r(Rbt,"xlm-roberta"),Rbt.forEach(t),eLr=r(ske," \u2014 "),fU=n(ske,"A",{href:!0});var Bbt=s(fU);oLr=r(Bbt,"FlaxXLMRobertaForMultipleChoice"),Bbt.forEach(t),rLr=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),bo.forEach(t),tLr=i(jl),T(nC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),sRe=i(f),Pc=n(f,"H2",{class:!0});var cPe=s(Pc);sC=n(cPe,"A",{id:!0,class:!0,href:!0});var Pbt=s(sC);vFe=n(Pbt,"SPAN",{});var Ibt=s(vFe);T(Fx.$$.fragment,Ibt),Ibt.forEach(t),Pbt.forEach(t),aLr=i(cPe),bFe=n(cPe,"SPAN",{});var qbt=s(bFe);nLr=r(qbt,"FlaxAutoModelForNextSentencePrediction"),qbt.forEach(t),cPe.forEach(t),lRe=i(f),_r=n(f,"DIV",{class:!0});var Dl=s(_r);T(Tx.$$.fragment,Dl),sLr=i(Dl),Ic=n(Dl,"P",{});var cY=s(Ic);lLr=r(cY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mU=n(cY,"A",{href:!0});var Nbt=s(mU);iLr=r(Nbt,"from_pretrained()"),Nbt.forEach(t),dLr=r(cY," class method or the "),gU=n(cY,"A",{href:!0});var jbt=s(gU);cLr=r(jbt,"from_config()"),jbt.forEach(t),fLr=r(cY,` class
method.`),cY.forEach(t),mLr=i(Dl),Mx=n(Dl,"P",{});var fPe=s(Mx);gLr=r(fPe,"This class cannot be instantiated directly using "),FFe=n(fPe,"CODE",{});var Dbt=s(FFe);hLr=r(Dbt,"__init__()"),Dbt.forEach(t),uLr=r(fPe," (throws an error)."),fPe.forEach(t),pLr=i(Dl),Xt=n(Dl,"DIV",{class:!0});var yw=s(Xt);T(Ex.$$.fragment,yw),_Lr=i(yw),TFe=n(yw,"P",{});var Gbt=s(TFe);vLr=r(Gbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gbt.forEach(t),bLr=i(yw),qc=n(yw,"P",{});var fY=s(qc);FLr=r(fY,`Note:
Loading a model from its configuration file does `),MFe=n(fY,"STRONG",{});var Obt=s(MFe);TLr=r(Obt,"not"),Obt.forEach(t),MLr=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(fY,"A",{href:!0});var Vbt=s(hU);ELr=r(Vbt,"from_pretrained()"),Vbt.forEach(t),CLr=r(fY," to load the model weights."),fY.forEach(t),wLr=i(yw),T(lC.$$.fragment,yw),yw.forEach(t),ALr=i(Dl),Xr=n(Dl,"DIV",{class:!0});var Gl=s(Xr);T(Cx.$$.fragment,Gl),yLr=i(Gl),EFe=n(Gl,"P",{});var Xbt=s(EFe);LLr=r(Xbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xbt.forEach(t),xLr=i(Gl),pn=n(Gl,"P",{});var Lw=s(pn);$Lr=r(Lw,"The model class to instantiate is selected based on the "),CFe=n(Lw,"CODE",{});var zbt=s(CFe);kLr=r(zbt,"model_type"),zbt.forEach(t),SLr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),wFe=n(Lw,"CODE",{});var Qbt=s(wFe);RLr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),BLr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(Lw,"CODE",{});var Wbt=s(AFe);PLr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),ILr=r(Lw,":"),Lw.forEach(t),qLr=i(Gl),yFe=n(Gl,"UL",{});var Hbt=s(yFe);iC=n(Hbt,"LI",{});var lke=s(iC);LFe=n(lke,"STRONG",{});var Ubt=s(LFe);NLr=r(Ubt,"bert"),Ubt.forEach(t),jLr=r(lke," \u2014 "),uU=n(lke,"A",{href:!0});var Jbt=s(uU);DLr=r(Jbt,"FlaxBertForNextSentencePrediction"),Jbt.forEach(t),GLr=r(lke," (BERT model)"),lke.forEach(t),Hbt.forEach(t),OLr=i(Gl),T(dC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),iRe=i(f),Nc=n(f,"H2",{class:!0});var mPe=s(Nc);cC=n(mPe,"A",{id:!0,class:!0,href:!0});var Ybt=s(cC);xFe=n(Ybt,"SPAN",{});var Kbt=s(xFe);T(wx.$$.fragment,Kbt),Kbt.forEach(t),Ybt.forEach(t),VLr=i(mPe),$Fe=n(mPe,"SPAN",{});var Zbt=s($Fe);XLr=r(Zbt,"FlaxAutoModelForImageClassification"),Zbt.forEach(t),mPe.forEach(t),dRe=i(f),vr=n(f,"DIV",{class:!0});var Ol=s(vr);T(Ax.$$.fragment,Ol),zLr=i(Ol),jc=n(Ol,"P",{});var mY=s(jc);QLr=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pU=n(mY,"A",{href:!0});var e4t=s(pU);WLr=r(e4t,"from_pretrained()"),e4t.forEach(t),HLr=r(mY," class method or the "),_U=n(mY,"A",{href:!0});var o4t=s(_U);ULr=r(o4t,"from_config()"),o4t.forEach(t),JLr=r(mY,` class
method.`),mY.forEach(t),YLr=i(Ol),yx=n(Ol,"P",{});var gPe=s(yx);KLr=r(gPe,"This class cannot be instantiated directly using "),kFe=n(gPe,"CODE",{});var r4t=s(kFe);ZLr=r(r4t,"__init__()"),r4t.forEach(t),exr=r(gPe," (throws an error)."),gPe.forEach(t),oxr=i(Ol),zt=n(Ol,"DIV",{class:!0});var xw=s(zt);T(Lx.$$.fragment,xw),rxr=i(xw),SFe=n(xw,"P",{});var t4t=s(SFe);txr=r(t4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t4t.forEach(t),axr=i(xw),Dc=n(xw,"P",{});var gY=s(Dc);nxr=r(gY,`Note:
Loading a model from its configuration file does `),RFe=n(gY,"STRONG",{});var a4t=s(RFe);sxr=r(a4t,"not"),a4t.forEach(t),lxr=r(gY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(gY,"A",{href:!0});var n4t=s(vU);ixr=r(n4t,"from_pretrained()"),n4t.forEach(t),dxr=r(gY," to load the model weights."),gY.forEach(t),cxr=i(xw),T(fC.$$.fragment,xw),xw.forEach(t),fxr=i(Ol),zr=n(Ol,"DIV",{class:!0});var Vl=s(zr);T(xx.$$.fragment,Vl),mxr=i(Vl),BFe=n(Vl,"P",{});var s4t=s(BFe);gxr=r(s4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s4t.forEach(t),hxr=i(Vl),_n=n(Vl,"P",{});var $w=s(_n);uxr=r($w,"The model class to instantiate is selected based on the "),PFe=n($w,"CODE",{});var l4t=s(PFe);pxr=r(l4t,"model_type"),l4t.forEach(t),_xr=r($w,` property of the config object (either
passed as an argument or loaded from `),IFe=n($w,"CODE",{});var i4t=s(IFe);vxr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),bxr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n($w,"CODE",{});var d4t=s(qFe);Fxr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),Txr=r($w,":"),$w.forEach(t),Mxr=i(Vl),$x=n(Vl,"UL",{});var hPe=s($x);mC=n(hPe,"LI",{});var ike=s(mC);NFe=n(ike,"STRONG",{});var c4t=s(NFe);Exr=r(c4t,"beit"),c4t.forEach(t),Cxr=r(ike," \u2014 "),bU=n(ike,"A",{href:!0});var f4t=s(bU);wxr=r(f4t,"FlaxBeitForImageClassification"),f4t.forEach(t),Axr=r(ike," (BEiT model)"),ike.forEach(t),yxr=i(hPe),gC=n(hPe,"LI",{});var dke=s(gC);jFe=n(dke,"STRONG",{});var m4t=s(jFe);Lxr=r(m4t,"vit"),m4t.forEach(t),xxr=r(dke," \u2014 "),FU=n(dke,"A",{href:!0});var g4t=s(FU);$xr=r(g4t,"FlaxViTForImageClassification"),g4t.forEach(t),kxr=r(dke," (ViT model)"),dke.forEach(t),hPe.forEach(t),Sxr=i(Vl),T(hC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),cRe=i(f),Gc=n(f,"H2",{class:!0});var uPe=s(Gc);uC=n(uPe,"A",{id:!0,class:!0,href:!0});var h4t=s(uC);DFe=n(h4t,"SPAN",{});var u4t=s(DFe);T(kx.$$.fragment,u4t),u4t.forEach(t),h4t.forEach(t),Rxr=i(uPe),GFe=n(uPe,"SPAN",{});var p4t=s(GFe);Bxr=r(p4t,"FlaxAutoModelForVision2Seq"),p4t.forEach(t),uPe.forEach(t),fRe=i(f),br=n(f,"DIV",{class:!0});var Xl=s(br);T(Sx.$$.fragment,Xl),Pxr=i(Xl),Oc=n(Xl,"P",{});var hY=s(Oc);Ixr=r(hY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=n(hY,"A",{href:!0});var _4t=s(TU);qxr=r(_4t,"from_pretrained()"),_4t.forEach(t),Nxr=r(hY," class method or the "),MU=n(hY,"A",{href:!0});var v4t=s(MU);jxr=r(v4t,"from_config()"),v4t.forEach(t),Dxr=r(hY,` class
method.`),hY.forEach(t),Gxr=i(Xl),Rx=n(Xl,"P",{});var pPe=s(Rx);Oxr=r(pPe,"This class cannot be instantiated directly using "),OFe=n(pPe,"CODE",{});var b4t=s(OFe);Vxr=r(b4t,"__init__()"),b4t.forEach(t),Xxr=r(pPe," (throws an error)."),pPe.forEach(t),zxr=i(Xl),Qt=n(Xl,"DIV",{class:!0});var kw=s(Qt);T(Bx.$$.fragment,kw),Qxr=i(kw),VFe=n(kw,"P",{});var F4t=s(VFe);Wxr=r(F4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F4t.forEach(t),Hxr=i(kw),Vc=n(kw,"P",{});var uY=s(Vc);Uxr=r(uY,`Note:
Loading a model from its configuration file does `),XFe=n(uY,"STRONG",{});var T4t=s(XFe);Jxr=r(T4t,"not"),T4t.forEach(t),Yxr=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(uY,"A",{href:!0});var M4t=s(EU);Kxr=r(M4t,"from_pretrained()"),M4t.forEach(t),Zxr=r(uY," to load the model weights."),uY.forEach(t),e7r=i(kw),T(pC.$$.fragment,kw),kw.forEach(t),o7r=i(Xl),Qr=n(Xl,"DIV",{class:!0});var zl=s(Qr);T(Px.$$.fragment,zl),r7r=i(zl),zFe=n(zl,"P",{});var E4t=s(zFe);t7r=r(E4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),E4t.forEach(t),a7r=i(zl),vn=n(zl,"P",{});var Sw=s(vn);n7r=r(Sw,"The model class to instantiate is selected based on the "),QFe=n(Sw,"CODE",{});var C4t=s(QFe);s7r=r(C4t,"model_type"),C4t.forEach(t),l7r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),WFe=n(Sw,"CODE",{});var w4t=s(WFe);i7r=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),d7r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(Sw,"CODE",{});var A4t=s(HFe);c7r=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),f7r=r(Sw,":"),Sw.forEach(t),m7r=i(zl),UFe=n(zl,"UL",{});var y4t=s(UFe);_C=n(y4t,"LI",{});var cke=s(_C);JFe=n(cke,"STRONG",{});var L4t=s(JFe);g7r=r(L4t,"vision-encoder-decoder"),L4t.forEach(t),h7r=r(cke," \u2014 "),CU=n(cke,"A",{href:!0});var x4t=s(CU);u7r=r(x4t,"FlaxVisionEncoderDecoderModel"),x4t.forEach(t),p7r=r(cke," (Vision Encoder decoder model)"),cke.forEach(t),y4t.forEach(t),_7r=i(zl),T(vC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kFt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(u,"class","relative group"),c(Fn,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoConfig"),c(Mn,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoModel"),c(En,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoTokenizer"),c(Kl,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel"),c(Yc,"id","extending-the-auto-classes"),c(Yc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yc,"href","#extending-the-auto-classes"),c(Zl,"class","relative group"),c(Zc,"id","transformers.AutoConfig"),c(Zc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zc,"href","#transformers.AutoConfig"),c(ei,"class","relative group"),c(Q7,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(W7,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig"),c(H7,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig"),c(U7,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig"),c(J7,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig"),c(Y7,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K7,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z7,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(e9,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(o9,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(r9,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig"),c(t9,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig"),c(a9,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig"),c(n9,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig"),c(s9,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig"),c(l9,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig"),c(i9,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(d9,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(c9,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig"),c(f9,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(m9,"href","/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(g9,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig"),c(h9,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig"),c(u9,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig"),c(p9,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig"),c(_9,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig"),c(v9,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig"),c(b9,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(F9,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig"),c(T9,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig"),c(M9,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig"),c(E9,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig"),c(C9,"href","/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNConfig"),c(w9,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config"),c(A9,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(y9,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig"),c(L9,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig"),c(x9,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig"),c($9,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(k9,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(S9,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(R9,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig"),c(B9,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig"),c(P9,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeConfig"),c(I9,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig"),c(q9,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config"),c(N9,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig"),c(j9,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(D9,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig"),c(G9,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(O9,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(V9,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig"),c(X9,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config"),c(z9,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Q9,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(W9,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig"),c(H9,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig"),c(U9,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig"),c(J9,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Y9,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(K9,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Z9,"href","/docs/transformers/v4.18.0/en/model_doc/rag#transformers.RagConfig"),c(e$,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmConfig"),c(o$,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig"),c(r$,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig"),c(t$,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig"),c(a$,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig"),c(n$,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig"),c(s$,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig"),c(l$,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig"),c(i$,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig"),c(d$,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig"),c(c$,"href","/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(f$,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(m$,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(g$,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig"),c(h$,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(u$,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig"),c(p$,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config"),c(_$,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig"),c(v$,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(b$,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRConfig"),c(F$,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(T$,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(M$,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig"),c(E$,"href","/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltConfig"),c(C$,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(w$,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(A$,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(y$,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig"),c(L$,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(x$,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c($$,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig"),c(k$,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig"),c(S$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig"),c(R$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(B$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(P$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(I$,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig"),c(q$,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wm,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hm,"id","transformers.AutoTokenizer"),c(Hm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hm,"href","#transformers.AutoTokenizer"),c(ri,"class","relative group"),c(N$,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(j$,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertTokenizer"),c(D$,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(G$,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartTokenizer"),c(O$,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartTokenizerFast"),c(V$,"href","/docs/transformers/v4.18.0/en/model_doc/barthez#transformers.BarthezTokenizer"),c(X$,"href","/docs/transformers/v4.18.0/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(z$,"href","/docs/transformers/v4.18.0/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Q$,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer"),c(W$,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(H$,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(U$,"href","/docs/transformers/v4.18.0/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(J$,"href","/docs/transformers/v4.18.0/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Y$,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(K$,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Z$,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ek,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ok,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(rk,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(tk,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ak,"href","/docs/transformers/v4.18.0/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(nk,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertTokenizer"),c(sk,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(lk,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineTokenizer"),c(ik,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPTokenizer"),c(dk,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ck,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(fk,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(mk,"href","/docs/transformers/v4.18.0/en/model_doc/cpm#transformers.CpmTokenizer"),c(gk,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(hk,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaTokenizer"),c(uk,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(pk,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_k,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(vk,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bk,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Fk,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(Tk,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraTokenizer"),c(Mk,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Ek,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Ck,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetTokenizer"),c(wk,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Ak,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(yk,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Lk,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(xk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($k,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Sk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Rk,"href","/docs/transformers/v4.18.0/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Bk,"href","/docs/transformers/v4.18.0/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Pk,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ik,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qk,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Nk,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(jk,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Dk,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Gk,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Ok,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Vk,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Xk,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDTokenizer"),c(zk,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDTokenizerFast"),c(Qk,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Wk,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Hk,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeTokenizer"),c(Uk,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Jk,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Yk,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Kk,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianTokenizer"),c(Zk,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartTokenizer"),c(eS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(oS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(rS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(tS,"href","/docs/transformers/v4.18.0/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aS,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nS,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sS,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lS,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5Tokenizer"),c(dS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5TokenizerFast"),c(cS,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fS,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(mS,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(gS,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(hS,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(uS,"href","/docs/transformers/v4.18.0/en/model_doc/phobert#transformers.PhobertTokenizer"),c(pS,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_S,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vS,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer"),c(bS,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizerFast"),c(FS,"href","/docs/transformers/v4.18.0/en/model_doc/rag#transformers.RagTokenizer"),c(TS,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmTokenizer"),c(MS,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmTokenizerFast"),c(ES,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerTokenizer"),c(CS,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(wS,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertTokenizer"),c(AS,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(yS,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(LS,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(xS,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizer"),c($S,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kS,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(SS,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(RS,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(BS,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(PS,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterTokenizer"),c(IS,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(qS,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(NS,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(jS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5Tokenizer"),c(DS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GS,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasTokenizer"),c(OS,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(VS,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XS,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(zS,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMTokenizer"),c(QS,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(WS,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMTokenizer"),c(HS,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(US,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(JS,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(YS,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(KS,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoFeatureExtractor"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoFeatureExtractor"),c(ti,"class","relative group"),c(ZS,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(eR,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(oR,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rR,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tR,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aR,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lR,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(iR,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(dR,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(cR,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fR,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(mR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(gR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hR,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_R,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoProcessor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoProcessor"),c(ai,"class","relative group"),c(vR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(bR,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPProcessor"),c(FR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(TR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(MR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ER,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CR,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wR,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoModel"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoModel"),c(si,"class","relative group"),c(yR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($R,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertModel"),c(kR,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartModel"),c(SR,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitModel"),c(RR,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel"),c(BR,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(PR,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdModel"),c(IR,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(qR,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(NR,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(jR,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertModel"),c(DR,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineModel"),c(GR,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPModel"),c(OR,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertModel"),c(VR,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextModel"),c(XR,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLModel"),c(zR,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(QR,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(WR,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaModel"),c(HR,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(UR,"href","/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(JR,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTModel"),c(YR,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrModel"),c(KR,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertModel"),c(ZR,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(eB,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTModel"),c(oB,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraModel"),c(rB,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertModel"),c(tB,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetModel"),c(aB,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel"),c(nB,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelModel"),c(sB,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lB,"href","/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNModel"),c(iB,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Model"),c(dB,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cB,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJModel"),c(fB,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertModel"),c(mB,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertModel"),c(gB,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(hB,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uB,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pB,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDModel"),c(_B,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerModel"),c(vB,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeModel"),c(bB,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertModel"),c(FB,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Model"),c(TB,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianModel"),c(MB,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerModel"),c(EB,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartModel"),c(CB,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(wB,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertModel"),c(AB,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetModel"),c(yB,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Model"),c(LB,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerModel"),c(xB,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c($B,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusModel"),c(kB,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverModel"),c(SB,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartModel"),c(RB,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerModel"),c(BB,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(PB,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertModel"),c(IB,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModel"),c(qB,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertModel"),c(NB,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetModel"),c(jB,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel"),c(DB,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaModel"),c(GB,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerModel"),c(OB,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerModel"),c(VB,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWModel"),c(XB,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDModel"),c(zB,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(QB,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterModel"),c(WB,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(HB,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinModel"),c(UB,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Model"),c(JB,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasModel"),c(YB,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(KB,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ZB,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(eP,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanModel"),c(oP,"href","/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltModel"),c(rP,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(tP,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertModel"),c(aP,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTModel"),c(nP,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(sP,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(lP,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMModel"),c(iP,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMModel"),c(dP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMModel"),c(cP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gP,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetModel"),c(hP,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoModel"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"id","transformers.AutoModelForPreTraining"),c(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wu,"href","#transformers.AutoModelForPreTraining"),c(di,"class","relative group"),c(uP,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pP,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_P,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vP,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForPreTraining"),c(bP,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FP,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForPreTraining"),c(TP,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(MP,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(EP,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CP,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wP,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(AP,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yP,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LP,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xP,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($P,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kP,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SP,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(RP,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BP,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(PP,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(IP,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qP,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NP,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jP,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(DP,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GP,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OP,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel"),c(VP,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XP,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(zP,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(QP,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(WP,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(HP,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(UP,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(JP,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(YP,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(KP,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(ZP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rI,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"id","transformers.AutoModelForCausalLM"),c(Ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ip,"href","#transformers.AutoModelForCausalLM"),c(mi,"class","relative group"),c(tI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sI,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForCausalLM"),c(lI,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertLMHeadModel"),c(iI,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dI,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cI,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fI,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mI,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gI,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hI,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uI,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pI,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_I,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vI,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(bI,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(FI,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianForCausalLM"),c(TI,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForCausalLM"),c(MI,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(EI,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CI,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wI,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AI,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yI,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(LI,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xI,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($I,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kI,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SI,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RI,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BI,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(PI,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(II,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(NI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DI,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T_,"id","transformers.AutoModelForMaskedLM"),c(T_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T_,"href","#transformers.AutoModelForMaskedLM"),c(ui,"class","relative group"),c(GI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XI,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zI,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QI,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMaskedLM"),c(WI,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HI,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UI,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JI,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YI,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KI,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZI,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(eq,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oq,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rq,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tq,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aq,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nq,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sq,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lq,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iq,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dq,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cq,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fq,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mq,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gq,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hq,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uq,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(pq,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_q,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vq,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bq,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fq,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Tq,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Mq,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Eq,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForSeq2SeqLM"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForSeq2SeqLM"),c(vi,"class","relative group"),c(Cq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yq,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lq,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xq,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($q,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kq,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Sq,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rq,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Bq,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Pq,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianMTModel"),c(Iq,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qq,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Nq,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jq,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Dq,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Gq,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Oq,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForSequenceClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForSequenceClassification"),c(Ti,"class","relative group"),c(Vq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qq,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Wq,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Hq,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Uq,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Jq,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Yq,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Kq,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Zq,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(eN,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(oN,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(rN,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(tN,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(aN,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(nN,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(sN,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(lN,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(iN,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(dN,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(cN,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(fN,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mN,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(gN,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(hN,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uN,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pN,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_N,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vN,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(bN,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(FN,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(TN,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(MN,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(EN,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(CN,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(wN,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(AN,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(yN,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(LN,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(xN,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c($N,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(kN,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(SN,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(RN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(BN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(PN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(IN,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(qN,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForMultipleChoice"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForMultipleChoice"),c(Ci,"class","relative group"),c(NN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GN,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ON,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMultipleChoice"),c(VN,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(XN,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(zN,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QN,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(WN,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HN,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UN,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(JN,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(YN,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(KN,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(ZN,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ej,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(oj,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rj,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tj,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aj,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(nj,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(sj,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(lj,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(ij,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(dj,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(cj,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(fj,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(mj,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(gj,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(hj,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eb,"id","transformers.AutoModelForNextSentencePrediction"),c(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eb,"href","#transformers.AutoModelForNextSentencePrediction"),c(yi,"class","relative group"),c(uj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vj,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(bj,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Fj,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Tj,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Mj,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(db,"id","transformers.AutoModelForTokenClassification"),c(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(db,"href","#transformers.AutoModelForTokenClassification"),c($i,"class","relative group"),c(Ej,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aj,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(yj,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForTokenClassification"),c(Lj,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(xj,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c($j,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForTokenClassification"),c(kj,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Sj,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Rj,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Bj,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Pj,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Ij,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(qj,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Nj,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(jj,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Dj,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Gj,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Oj,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Vj,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Xj,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(zj,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Qj,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Wj,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Hj,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Uj,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Jj,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Yj,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Kj,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Zj,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(eD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(oD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(rD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(tD,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(aD,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForQuestionAnswering"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForQuestionAnswering"),c(Ri,"class","relative group"),c(nD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(dD,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(cD,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(fD,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(mD,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(gD,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(hD,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(uD,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pD,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_D,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(vD,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(bD,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(FD,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(TD,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(MD,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ED,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(CD,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(wD,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(AD,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yD,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LD,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xD,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($D,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kD,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SD,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RD,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(BD,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(PD,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(ID,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qD,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(ND,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jD,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(DD,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GD,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(OD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(VD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(XD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zD,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(QD,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForTableQuestionAnswering"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ii,"class","relative group"),c(WD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForImageClassification"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForImageClassification"),c(ji,"class","relative group"),c(YD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForImageClassification"),c(oG,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rG,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassification"),c(tG,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(aG,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(nG,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(sG,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(lG,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(iG,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(dG,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(cG,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(fG,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForImageClassification"),c(mG,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanForImageClassification"),c(gG,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForImageClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.AutoModelForVision2Seq"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.AutoModelForVision2Seq"),c(Oi,"class","relative group"),c(hG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForAudioClassification"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForAudioClassification"),c(zi,"class","relative group"),c(vG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(MG,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(EG,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CG,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(wG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(AG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(LG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForAudioFrameClassification"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Hi,"class","relative group"),c(xG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($G,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SG,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(RG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(PG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForCTC"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForCTC"),c(Yi,"class","relative group"),c(IG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(DG,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForCTC"),c(GG,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForCTC"),c(OG,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForCTC"),c(VG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(XG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(zG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(QG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForCTC"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ed,"class","relative group"),c(WG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JG,"href","/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(YG,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O2,"id","transformers.AutoModelForAudioXVector"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForAudioXVector"),c(td,"class","relative group"),c(KG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oO,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(rO,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(tO,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(aO,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForXVector"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J2,"id","transformers.AutoModelForMaskedImageModeling"),c(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J2,"href","#transformers.AutoModelForMaskedImageModeling"),c(sd,"class","relative group"),c(nO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dO,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cO,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForObjectDetection"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForObjectDetection"),c(cd,"class","relative group"),c(fO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForImageSegmentation"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForImageSegmentation"),c(gd,"class","relative group"),c(uO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForSegmentation"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForSemanticSegmentation"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForSemanticSegmentation"),c(pd,"class","relative group"),c(bO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(EO,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(CO,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForInstanceSegmentation"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fd,"class","relative group"),c(wO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.TFAutoModel"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.TFAutoModel"),c(Ed,"class","relative group"),c(xO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($O,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SO,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertModel"),c(RO,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartModel"),c(BO,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertModel"),c(PO,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(IO,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(qO,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertModel"),c(NO,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.TFCLIPModel"),c(jO,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertModel"),c(DO,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextModel"),c(GO,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLModel"),c(OO,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaModel"),c(VO,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(XO,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(zO,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(QO,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraModel"),c(WO,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(HO,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelModel"),c(UO,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(JO,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2Model"),c(YO,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJModel"),c(KO,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.TFHubertModel"),c(ZO,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(eV,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDModel"),c(oV,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerModel"),c(rV,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertModel"),c(tV,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianModel"),c(aV,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartModel"),c(nV,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(sV,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetModel"),c(lV,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5Model"),c(iV,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(dV,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusModel"),c(cV,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertModel"),c(fV,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaModel"),c(mV,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerModel"),c(gV,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(hV,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5Model"),c(uV,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasModel"),c(pV,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(_V,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTModel"),c(vV,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(bV,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(FV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMModel"),c(TV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(MV,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.TFAutoModelForPreTraining"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.TFAutoModelForPreTraining"),c(Ad,"class","relative group"),c(EV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AV,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yV,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LV,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForPreTraining"),c(xV,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c($V,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kV,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(SV,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(RV,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BV,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(PV,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IV,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qV,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(NV,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jV,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DV,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(GV,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OV,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(VV,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XV,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(zV,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(QV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(HV,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.TFAutoModelForCausalLM"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.TFAutoModelForCausalLM"),c(xd,"class","relative group"),c(UV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(ZV,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(eX,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oX,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(rX,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(tX,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aX,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(nX,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(sX,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(lX,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(iX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dX,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.TFAutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.TFAutoModelForImageClassification"),c(Sd,"class","relative group"),c(cX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(hX,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.TFAutoModelForMaskedLM"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.TFAutoModelForMaskedLM"),c(Pd,"class","relative group"),c(uX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bX,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FX,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TX,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MX,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EX,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CX,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wX,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AX,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yX,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LX,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xX,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($X,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kX,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SX,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RX,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BX,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(PX,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.TFAutoModelForSeq2SeqLM"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Nd,"class","relative group"),c(NX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OX,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VX,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XX,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zX,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(QX,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianMTModel"),c(WX,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HX,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UX,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JX,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModelForSequenceClassification"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Gd,"class","relative group"),c(YX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oz,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(rz,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tz,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(az,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lz,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iz,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dz,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cz,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fz,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mz,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gz,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hz,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(uz,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(pz,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(_z,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vz,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bz,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Fz,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Tz,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Mz,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Ez,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Cz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wz,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F8,"id","transformers.TFAutoModelForMultipleChoice"),c(F8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F8,"href","#transformers.TFAutoModelForMultipleChoice"),c(Xd,"class","relative group"),c(Az,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($z,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kz,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Sz,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Rz,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Bz,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Pz,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Iz,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qz,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Nz,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jz,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Dz,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Gz,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Oz,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Vz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Xz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zz,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Wd,"class","relative group"),c(Qz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X8,"id","transformers.TFAutoModelForTokenClassification"),c(X8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X8,"href","#transformers.TFAutoModelForTokenClassification"),c(Jd,"class","relative group"),c(Jz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eQ,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oQ,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rQ,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tQ,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aQ,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nQ,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sQ,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lQ,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iQ,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dQ,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cQ,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fQ,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mQ,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gQ,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hQ,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(uQ,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(pQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(_Q,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(vQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForQuestionAnswering"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Zd,"class","relative group"),c(bQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EQ,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wQ,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AQ,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(yQ,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(LQ,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xQ,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($Q,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kQ,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SQ,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RQ,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BQ,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PQ,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qQ,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(NQ,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForVision2Seq"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForVision2Seq"),c(rc,"class","relative group"),c(OQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(nc,"class","relative group"),c(QQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.FlaxAutoModel"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.FlaxAutoModel"),c(ic,"class","relative group"),c(JQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartModel"),c(oW,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitModel"),c(rW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertModel"),c(tW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aW,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nW,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(sW,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lW,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iW,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraModel"),c(dW,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cW,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fW,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mW,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianModel"),c(gW,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartModel"),c(hW,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5Model"),c(uW,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pW,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_W,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(vW,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5Model"),c(bW,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FW,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTModel"),c(TW,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MW,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EW,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.FlaxAutoModelForCausalLM"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.FlaxAutoModelForCausalLM"),c(fc,"class","relative group"),c(CW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(LW,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(xW,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c($W,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(kW,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.FlaxAutoModelForPreTraining"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModelForPreTraining"),c(hc,"class","relative group"),c(SW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(IW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(jW,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(DW,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(GW,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(OW,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VW,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XW,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zW,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(QW,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForMaskedLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(_c,"class","relative group"),c(WW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(YW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ZW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(eH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(oH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(rH,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(tH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(aH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(nH,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(sH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cH,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(fH,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(mH,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(gH,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(hH,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uH,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pH,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_H,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(vH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(MH,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(EH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(CH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(wH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(AH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(yH,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(LH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(xH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c($H,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ac,"class","relative group"),c(kH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PH,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(IH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(qH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(jH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(DH,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(GH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(OH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(VH,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForTokenClassification"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(xc,"class","relative group"),c(XH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(HH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(UH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(JH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(YH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(KH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(ZH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(eU,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Sc,"class","relative group"),c(oU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(nU,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(sU,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(lU,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(iU,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(dU,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(cU,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(fU,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Pc,"class","relative group"),c(mU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.FlaxAutoModelForImageClassification"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Nc,"class","relative group"),c(pU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(FU,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForVision2Seq"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(TU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),v(f,b,_),v(f,u,_),e(u,m),e(m,p),M(d,p,null),e(u,h),e(u,Fo),e(Fo,Ql),v(f,Wc,_),v(f,Yr,_),e(Yr,Wl),e(Yr,Hl),e(Hl,Rw),e(Yr,Hc),v(f,Be,_),v(f,Ge,_),e(Ge,Ul),e(Ge,Fn),e(Fn,Bw),e(Ge,Tn),e(Ge,Mn),e(Mn,Pw),e(Ge,Jl),e(Ge,En),e(En,Iw),e(Ge,Yl),v(f,Uc,_),M(va,f,_),v(f,Oe,_),v(f,Ee,_),e(Ee,D7),e(Ee,Kl),e(Kl,G7),e(Ee,O7),v(f,To,_),v(f,ba,_),e(ba,V7),e(ba,Jc),e(Jc,X7),e(ba,_Pe),v(f,fke,_),v(f,Zl,_),e(Zl,Yc),e(Yc,pY),M(qw,pY,null),e(Zl,vPe),e(Zl,_Y),e(_Y,bPe),v(f,mke,_),v(f,Cn,_),e(Cn,FPe),e(Cn,vY),e(vY,TPe),e(Cn,MPe),e(Cn,bY),e(bY,EPe),e(Cn,CPe),v(f,gke,_),M(Nw,f,_),v(f,hke,_),v(f,z7,_),e(z7,wPe),v(f,uke,_),M(Kc,f,_),v(f,pke,_),v(f,ei,_),e(ei,Zc),e(Zc,FY),M(jw,FY,null),e(ei,APe),e(ei,TY),e(TY,yPe),v(f,_ke,_),v(f,Mo,_),M(Dw,Mo,null),e(Mo,LPe),e(Mo,Gw),e(Gw,xPe),e(Gw,Q7),e(Q7,$Pe),e(Gw,kPe),e(Mo,SPe),e(Mo,Ow),e(Ow,RPe),e(Ow,MY),e(MY,BPe),e(Ow,PPe),e(Mo,IPe),e(Mo,Fr),M(Vw,Fr,null),e(Fr,qPe),e(Fr,EY),e(EY,NPe),e(Fr,jPe),e(Fr,oi),e(oi,DPe),e(oi,CY),e(CY,GPe),e(oi,OPe),e(oi,wY),e(wY,VPe),e(oi,XPe),e(Fr,zPe),e(Fr,y),e(y,ef),e(ef,AY),e(AY,QPe),e(ef,WPe),e(ef,W7),e(W7,HPe),e(ef,UPe),e(y,JPe),e(y,of),e(of,yY),e(yY,YPe),e(of,KPe),e(of,H7),e(H7,ZPe),e(of,eIe),e(y,oIe),e(y,rf),e(rf,LY),e(LY,rIe),e(rf,tIe),e(rf,U7),e(U7,aIe),e(rf,nIe),e(y,sIe),e(y,tf),e(tf,xY),e(xY,lIe),e(tf,iIe),e(tf,J7),e(J7,dIe),e(tf,cIe),e(y,fIe),e(y,af),e(af,$Y),e($Y,mIe),e(af,gIe),e(af,Y7),e(Y7,hIe),e(af,uIe),e(y,pIe),e(y,nf),e(nf,kY),e(kY,_Ie),e(nf,vIe),e(nf,K7),e(K7,bIe),e(nf,FIe),e(y,TIe),e(y,sf),e(sf,SY),e(SY,MIe),e(sf,EIe),e(sf,Z7),e(Z7,CIe),e(sf,wIe),e(y,AIe),e(y,lf),e(lf,RY),e(RY,yIe),e(lf,LIe),e(lf,e9),e(e9,xIe),e(lf,$Ie),e(y,kIe),e(y,df),e(df,BY),e(BY,SIe),e(df,RIe),e(df,o9),e(o9,BIe),e(df,PIe),e(y,IIe),e(y,cf),e(cf,PY),e(PY,qIe),e(cf,NIe),e(cf,r9),e(r9,jIe),e(cf,DIe),e(y,GIe),e(y,ff),e(ff,IY),e(IY,OIe),e(ff,VIe),e(ff,t9),e(t9,XIe),e(ff,zIe),e(y,QIe),e(y,mf),e(mf,qY),e(qY,WIe),e(mf,HIe),e(mf,a9),e(a9,UIe),e(mf,JIe),e(y,YIe),e(y,gf),e(gf,NY),e(NY,KIe),e(gf,ZIe),e(gf,n9),e(n9,eqe),e(gf,oqe),e(y,rqe),e(y,hf),e(hf,jY),e(jY,tqe),e(hf,aqe),e(hf,s9),e(s9,nqe),e(hf,sqe),e(y,lqe),e(y,uf),e(uf,DY),e(DY,iqe),e(uf,dqe),e(uf,l9),e(l9,cqe),e(uf,fqe),e(y,mqe),e(y,pf),e(pf,GY),e(GY,gqe),e(pf,hqe),e(pf,i9),e(i9,uqe),e(pf,pqe),e(y,_qe),e(y,_f),e(_f,OY),e(OY,vqe),e(_f,bqe),e(_f,d9),e(d9,Fqe),e(_f,Tqe),e(y,Mqe),e(y,vf),e(vf,VY),e(VY,Eqe),e(vf,Cqe),e(vf,c9),e(c9,wqe),e(vf,Aqe),e(y,yqe),e(y,bf),e(bf,XY),e(XY,Lqe),e(bf,xqe),e(bf,f9),e(f9,$qe),e(bf,kqe),e(y,Sqe),e(y,Ff),e(Ff,zY),e(zY,Rqe),e(Ff,Bqe),e(Ff,m9),e(m9,Pqe),e(Ff,Iqe),e(y,qqe),e(y,Tf),e(Tf,QY),e(QY,Nqe),e(Tf,jqe),e(Tf,g9),e(g9,Dqe),e(Tf,Gqe),e(y,Oqe),e(y,Mf),e(Mf,WY),e(WY,Vqe),e(Mf,Xqe),e(Mf,h9),e(h9,zqe),e(Mf,Qqe),e(y,Wqe),e(y,Ef),e(Ef,HY),e(HY,Hqe),e(Ef,Uqe),e(Ef,u9),e(u9,Jqe),e(Ef,Yqe),e(y,Kqe),e(y,Cf),e(Cf,UY),e(UY,Zqe),e(Cf,eNe),e(Cf,p9),e(p9,oNe),e(Cf,rNe),e(y,tNe),e(y,wf),e(wf,JY),e(JY,aNe),e(wf,nNe),e(wf,_9),e(_9,sNe),e(wf,lNe),e(y,iNe),e(y,Af),e(Af,YY),e(YY,dNe),e(Af,cNe),e(Af,v9),e(v9,fNe),e(Af,mNe),e(y,gNe),e(y,yf),e(yf,KY),e(KY,hNe),e(yf,uNe),e(yf,b9),e(b9,pNe),e(yf,_Ne),e(y,vNe),e(y,Lf),e(Lf,ZY),e(ZY,bNe),e(Lf,FNe),e(Lf,F9),e(F9,TNe),e(Lf,MNe),e(y,ENe),e(y,xf),e(xf,eK),e(eK,CNe),e(xf,wNe),e(xf,T9),e(T9,ANe),e(xf,yNe),e(y,LNe),e(y,$f),e($f,oK),e(oK,xNe),e($f,$Ne),e($f,M9),e(M9,kNe),e($f,SNe),e(y,RNe),e(y,kf),e(kf,rK),e(rK,BNe),e(kf,PNe),e(kf,E9),e(E9,INe),e(kf,qNe),e(y,NNe),e(y,Sf),e(Sf,tK),e(tK,jNe),e(Sf,DNe),e(Sf,C9),e(C9,GNe),e(Sf,ONe),e(y,VNe),e(y,Rf),e(Rf,aK),e(aK,XNe),e(Rf,zNe),e(Rf,w9),e(w9,QNe),e(Rf,WNe),e(y,HNe),e(y,Bf),e(Bf,nK),e(nK,UNe),e(Bf,JNe),e(Bf,A9),e(A9,YNe),e(Bf,KNe),e(y,ZNe),e(y,Pf),e(Pf,sK),e(sK,eje),e(Pf,oje),e(Pf,y9),e(y9,rje),e(Pf,tje),e(y,aje),e(y,If),e(If,lK),e(lK,nje),e(If,sje),e(If,L9),e(L9,lje),e(If,ije),e(y,dje),e(y,qf),e(qf,iK),e(iK,cje),e(qf,fje),e(qf,x9),e(x9,mje),e(qf,gje),e(y,hje),e(y,Nf),e(Nf,dK),e(dK,uje),e(Nf,pje),e(Nf,$9),e($9,_je),e(Nf,vje),e(y,bje),e(y,jf),e(jf,cK),e(cK,Fje),e(jf,Tje),e(jf,k9),e(k9,Mje),e(jf,Eje),e(y,Cje),e(y,Df),e(Df,fK),e(fK,wje),e(Df,Aje),e(Df,S9),e(S9,yje),e(Df,Lje),e(y,xje),e(y,Gf),e(Gf,mK),e(mK,$je),e(Gf,kje),e(Gf,R9),e(R9,Sje),e(Gf,Rje),e(y,Bje),e(y,Of),e(Of,gK),e(gK,Pje),e(Of,Ije),e(Of,B9),e(B9,qje),e(Of,Nje),e(y,jje),e(y,Vf),e(Vf,hK),e(hK,Dje),e(Vf,Gje),e(Vf,P9),e(P9,Oje),e(Vf,Vje),e(y,Xje),e(y,Xf),e(Xf,uK),e(uK,zje),e(Xf,Qje),e(Xf,I9),e(I9,Wje),e(Xf,Hje),e(y,Uje),e(y,zf),e(zf,pK),e(pK,Jje),e(zf,Yje),e(zf,q9),e(q9,Kje),e(zf,Zje),e(y,eDe),e(y,Qf),e(Qf,_K),e(_K,oDe),e(Qf,rDe),e(Qf,N9),e(N9,tDe),e(Qf,aDe),e(y,nDe),e(y,Wf),e(Wf,vK),e(vK,sDe),e(Wf,lDe),e(Wf,j9),e(j9,iDe),e(Wf,dDe),e(y,cDe),e(y,Hf),e(Hf,bK),e(bK,fDe),e(Hf,mDe),e(Hf,D9),e(D9,gDe),e(Hf,hDe),e(y,uDe),e(y,Uf),e(Uf,FK),e(FK,pDe),e(Uf,_De),e(Uf,G9),e(G9,vDe),e(Uf,bDe),e(y,FDe),e(y,Jf),e(Jf,TK),e(TK,TDe),e(Jf,MDe),e(Jf,O9),e(O9,EDe),e(Jf,CDe),e(y,wDe),e(y,Yf),e(Yf,MK),e(MK,ADe),e(Yf,yDe),e(Yf,V9),e(V9,LDe),e(Yf,xDe),e(y,$De),e(y,Kf),e(Kf,EK),e(EK,kDe),e(Kf,SDe),e(Kf,X9),e(X9,RDe),e(Kf,BDe),e(y,PDe),e(y,Zf),e(Zf,CK),e(CK,IDe),e(Zf,qDe),e(Zf,z9),e(z9,NDe),e(Zf,jDe),e(y,DDe),e(y,em),e(em,wK),e(wK,GDe),e(em,ODe),e(em,Q9),e(Q9,VDe),e(em,XDe),e(y,zDe),e(y,om),e(om,AK),e(AK,QDe),e(om,WDe),e(om,W9),e(W9,HDe),e(om,UDe),e(y,JDe),e(y,rm),e(rm,yK),e(yK,YDe),e(rm,KDe),e(rm,H9),e(H9,ZDe),e(rm,eGe),e(y,oGe),e(y,tm),e(tm,LK),e(LK,rGe),e(tm,tGe),e(tm,U9),e(U9,aGe),e(tm,nGe),e(y,sGe),e(y,am),e(am,xK),e(xK,lGe),e(am,iGe),e(am,J9),e(J9,dGe),e(am,cGe),e(y,fGe),e(y,nm),e(nm,$K),e($K,mGe),e(nm,gGe),e(nm,Y9),e(Y9,hGe),e(nm,uGe),e(y,pGe),e(y,sm),e(sm,kK),e(kK,_Ge),e(sm,vGe),e(sm,K9),e(K9,bGe),e(sm,FGe),e(y,TGe),e(y,lm),e(lm,SK),e(SK,MGe),e(lm,EGe),e(lm,Z9),e(Z9,CGe),e(lm,wGe),e(y,AGe),e(y,im),e(im,RK),e(RK,yGe),e(im,LGe),e(im,e$),e(e$,xGe),e(im,$Ge),e(y,kGe),e(y,dm),e(dm,BK),e(BK,SGe),e(dm,RGe),e(dm,o$),e(o$,BGe),e(dm,PGe),e(y,IGe),e(y,cm),e(cm,PK),e(PK,qGe),e(cm,NGe),e(cm,r$),e(r$,jGe),e(cm,DGe),e(y,GGe),e(y,fm),e(fm,IK),e(IK,OGe),e(fm,VGe),e(fm,t$),e(t$,XGe),e(fm,zGe),e(y,QGe),e(y,mm),e(mm,qK),e(qK,WGe),e(mm,HGe),e(mm,a$),e(a$,UGe),e(mm,JGe),e(y,YGe),e(y,gm),e(gm,NK),e(NK,KGe),e(gm,ZGe),e(gm,n$),e(n$,eOe),e(gm,oOe),e(y,rOe),e(y,hm),e(hm,jK),e(jK,tOe),e(hm,aOe),e(hm,s$),e(s$,nOe),e(hm,sOe),e(y,lOe),e(y,um),e(um,DK),e(DK,iOe),e(um,dOe),e(um,l$),e(l$,cOe),e(um,fOe),e(y,mOe),e(y,pm),e(pm,GK),e(GK,gOe),e(pm,hOe),e(pm,i$),e(i$,uOe),e(pm,pOe),e(y,_Oe),e(y,_m),e(_m,OK),e(OK,vOe),e(_m,bOe),e(_m,d$),e(d$,FOe),e(_m,TOe),e(y,MOe),e(y,vm),e(vm,VK),e(VK,EOe),e(vm,COe),e(vm,c$),e(c$,wOe),e(vm,AOe),e(y,yOe),e(y,bm),e(bm,XK),e(XK,LOe),e(bm,xOe),e(bm,f$),e(f$,$Oe),e(bm,kOe),e(y,SOe),e(y,Fm),e(Fm,zK),e(zK,ROe),e(Fm,BOe),e(Fm,m$),e(m$,POe),e(Fm,IOe),e(y,qOe),e(y,Tm),e(Tm,QK),e(QK,NOe),e(Tm,jOe),e(Tm,g$),e(g$,DOe),e(Tm,GOe),e(y,OOe),e(y,Mm),e(Mm,WK),e(WK,VOe),e(Mm,XOe),e(Mm,h$),e(h$,zOe),e(Mm,QOe),e(y,WOe),e(y,Em),e(Em,HK),e(HK,HOe),e(Em,UOe),e(Em,u$),e(u$,JOe),e(Em,YOe),e(y,KOe),e(y,Cm),e(Cm,UK),e(UK,ZOe),e(Cm,eVe),e(Cm,p$),e(p$,oVe),e(Cm,rVe),e(y,tVe),e(y,wm),e(wm,JK),e(JK,aVe),e(wm,nVe),e(wm,_$),e(_$,sVe),e(wm,lVe),e(y,iVe),e(y,Am),e(Am,YK),e(YK,dVe),e(Am,cVe),e(Am,v$),e(v$,fVe),e(Am,mVe),e(y,gVe),e(y,ym),e(ym,KK),e(KK,hVe),e(ym,uVe),e(ym,b$),e(b$,pVe),e(ym,_Ve),e(y,vVe),e(y,Lm),e(Lm,ZK),e(ZK,bVe),e(Lm,FVe),e(Lm,F$),e(F$,TVe),e(Lm,MVe),e(y,EVe),e(y,xm),e(xm,eZ),e(eZ,CVe),e(xm,wVe),e(xm,T$),e(T$,AVe),e(xm,yVe),e(y,LVe),e(y,$m),e($m,oZ),e(oZ,xVe),e($m,$Ve),e($m,M$),e(M$,kVe),e($m,SVe),e(y,RVe),e(y,km),e(km,rZ),e(rZ,BVe),e(km,PVe),e(km,E$),e(E$,IVe),e(km,qVe),e(y,NVe),e(y,Sm),e(Sm,tZ),e(tZ,jVe),e(Sm,DVe),e(Sm,C$),e(C$,GVe),e(Sm,OVe),e(y,VVe),e(y,Rm),e(Rm,aZ),e(aZ,XVe),e(Rm,zVe),e(Rm,w$),e(w$,QVe),e(Rm,WVe),e(y,HVe),e(y,Bm),e(Bm,nZ),e(nZ,UVe),e(Bm,JVe),e(Bm,A$),e(A$,YVe),e(Bm,KVe),e(y,ZVe),e(y,Pm),e(Pm,sZ),e(sZ,eXe),e(Pm,oXe),e(Pm,y$),e(y$,rXe),e(Pm,tXe),e(y,aXe),e(y,Im),e(Im,lZ),e(lZ,nXe),e(Im,sXe),e(Im,L$),e(L$,lXe),e(Im,iXe),e(y,dXe),e(y,qm),e(qm,iZ),e(iZ,cXe),e(qm,fXe),e(qm,x$),e(x$,mXe),e(qm,gXe),e(y,hXe),e(y,Nm),e(Nm,dZ),e(dZ,uXe),e(Nm,pXe),e(Nm,$$),e($$,_Xe),e(Nm,vXe),e(y,bXe),e(y,jm),e(jm,cZ),e(cZ,FXe),e(jm,TXe),e(jm,k$),e(k$,MXe),e(jm,EXe),e(y,CXe),e(y,Dm),e(Dm,fZ),e(fZ,wXe),e(Dm,AXe),e(Dm,S$),e(S$,yXe),e(Dm,LXe),e(y,xXe),e(y,Gm),e(Gm,mZ),e(mZ,$Xe),e(Gm,kXe),e(Gm,R$),e(R$,SXe),e(Gm,RXe),e(y,BXe),e(y,Om),e(Om,gZ),e(gZ,PXe),e(Om,IXe),e(Om,B$),e(B$,qXe),e(Om,NXe),e(y,jXe),e(y,Vm),e(Vm,hZ),e(hZ,DXe),e(Vm,GXe),e(Vm,P$),e(P$,OXe),e(Vm,VXe),e(y,XXe),e(y,Xm),e(Xm,uZ),e(uZ,zXe),e(Xm,QXe),e(Xm,I$),e(I$,WXe),e(Xm,HXe),e(y,UXe),e(y,zm),e(zm,pZ),e(pZ,JXe),e(zm,YXe),e(zm,q$),e(q$,KXe),e(zm,ZXe),e(Fr,eze),M(Qm,Fr,null),e(Mo,oze),e(Mo,Wm),M(Xw,Wm,null),e(Wm,rze),e(Wm,_Z),e(_Z,tze),v(f,vke,_),v(f,ri,_),e(ri,Hm),e(Hm,vZ),M(zw,vZ,null),e(ri,aze),e(ri,bZ),e(bZ,nze),v(f,bke,_),v(f,Eo,_),M(Qw,Eo,null),e(Eo,sze),e(Eo,Ww),e(Ww,lze),e(Ww,N$),e(N$,ize),e(Ww,dze),e(Eo,cze),e(Eo,Hw),e(Hw,fze),e(Hw,FZ),e(FZ,mze),e(Hw,gze),e(Eo,hze),e(Eo,Tr),M(Uw,Tr,null),e(Tr,uze),e(Tr,TZ),e(TZ,pze),e(Tr,_ze),e(Tr,Fa),e(Fa,vze),e(Fa,MZ),e(MZ,bze),e(Fa,Fze),e(Fa,EZ),e(EZ,Tze),e(Fa,Mze),e(Fa,CZ),e(CZ,Eze),e(Fa,Cze),e(Tr,wze),e(Tr,S),e(S,wn),e(wn,wZ),e(wZ,Aze),e(wn,yze),e(wn,j$),e(j$,Lze),e(wn,xze),e(wn,D$),e(D$,$ze),e(wn,kze),e(S,Sze),e(S,An),e(An,AZ),e(AZ,Rze),e(An,Bze),e(An,G$),e(G$,Pze),e(An,Ize),e(An,O$),e(O$,qze),e(An,Nze),e(S,jze),e(S,yn),e(yn,yZ),e(yZ,Dze),e(yn,Gze),e(yn,V$),e(V$,Oze),e(yn,Vze),e(yn,X$),e(X$,Xze),e(yn,zze),e(S,Qze),e(S,Um),e(Um,LZ),e(LZ,Wze),e(Um,Hze),e(Um,z$),e(z$,Uze),e(Um,Jze),e(S,Yze),e(S,Ln),e(Ln,xZ),e(xZ,Kze),e(Ln,Zze),e(Ln,Q$),e(Q$,eQe),e(Ln,oQe),e(Ln,W$),e(W$,rQe),e(Ln,tQe),e(S,aQe),e(S,Jm),e(Jm,$Z),e($Z,nQe),e(Jm,sQe),e(Jm,H$),e(H$,lQe),e(Jm,iQe),e(S,dQe),e(S,Ym),e(Ym,kZ),e(kZ,cQe),e(Ym,fQe),e(Ym,U$),e(U$,mQe),e(Ym,gQe),e(S,hQe),e(S,Km),e(Km,SZ),e(SZ,uQe),e(Km,pQe),e(Km,J$),e(J$,_Qe),e(Km,vQe),e(S,bQe),e(S,xn),e(xn,RZ),e(RZ,FQe),e(xn,TQe),e(xn,Y$),e(Y$,MQe),e(xn,EQe),e(xn,K$),e(K$,CQe),e(xn,wQe),e(S,AQe),e(S,$n),e($n,BZ),e(BZ,yQe),e($n,LQe),e($n,Z$),e(Z$,xQe),e($n,$Qe),e($n,ek),e(ek,kQe),e($n,SQe),e(S,RQe),e(S,kn),e(kn,PZ),e(PZ,BQe),e(kn,PQe),e(kn,ok),e(ok,IQe),e(kn,qQe),e(kn,rk),e(rk,NQe),e(kn,jQe),e(S,DQe),e(S,Zm),e(Zm,IZ),e(IZ,GQe),e(Zm,OQe),e(Zm,tk),e(tk,VQe),e(Zm,XQe),e(S,zQe),e(S,eg),e(eg,qZ),e(qZ,QQe),e(eg,WQe),e(eg,ak),e(ak,HQe),e(eg,UQe),e(S,JQe),e(S,Sn),e(Sn,NZ),e(NZ,YQe),e(Sn,KQe),e(Sn,nk),e(nk,ZQe),e(Sn,eWe),e(Sn,sk),e(sk,oWe),e(Sn,rWe),e(S,tWe),e(S,og),e(og,jZ),e(jZ,aWe),e(og,nWe),e(og,lk),e(lk,sWe),e(og,lWe),e(S,iWe),e(S,Rn),e(Rn,DZ),e(DZ,dWe),e(Rn,cWe),e(Rn,ik),e(ik,fWe),e(Rn,mWe),e(Rn,dk),e(dk,gWe),e(Rn,hWe),e(S,uWe),e(S,Bn),e(Bn,GZ),e(GZ,pWe),e(Bn,_We),e(Bn,ck),e(ck,vWe),e(Bn,bWe),e(Bn,fk),e(fk,FWe),e(Bn,TWe),e(S,MWe),e(S,Pn),e(Pn,OZ),e(OZ,EWe),e(Pn,CWe),e(Pn,mk),e(mk,wWe),e(Pn,AWe),e(Pn,VZ),e(VZ,yWe),e(Pn,LWe),e(S,xWe),e(S,rg),e(rg,XZ),e(XZ,$We),e(rg,kWe),e(rg,gk),e(gk,SWe),e(rg,RWe),e(S,BWe),e(S,In),e(In,zZ),e(zZ,PWe),e(In,IWe),e(In,hk),e(hk,qWe),e(In,NWe),e(In,uk),e(uk,jWe),e(In,DWe),e(S,GWe),e(S,tg),e(tg,QZ),e(QZ,OWe),e(tg,VWe),e(tg,pk),e(pk,XWe),e(tg,zWe),e(S,QWe),e(S,qn),e(qn,WZ),e(WZ,WWe),e(qn,HWe),e(qn,_k),e(_k,UWe),e(qn,JWe),e(qn,vk),e(vk,YWe),e(qn,KWe),e(S,ZWe),e(S,Nn),e(Nn,HZ),e(HZ,eHe),e(Nn,oHe),e(Nn,bk),e(bk,rHe),e(Nn,tHe),e(Nn,Fk),e(Fk,aHe),e(Nn,nHe),e(S,sHe),e(S,jn),e(jn,UZ),e(UZ,lHe),e(jn,iHe),e(jn,Tk),e(Tk,dHe),e(jn,cHe),e(jn,Mk),e(Mk,fHe),e(jn,mHe),e(S,gHe),e(S,ag),e(ag,JZ),e(JZ,hHe),e(ag,uHe),e(ag,Ek),e(Ek,pHe),e(ag,_He),e(S,vHe),e(S,Dn),e(Dn,YZ),e(YZ,bHe),e(Dn,FHe),e(Dn,Ck),e(Ck,THe),e(Dn,MHe),e(Dn,wk),e(wk,EHe),e(Dn,CHe),e(S,wHe),e(S,ng),e(ng,KZ),e(KZ,AHe),e(ng,yHe),e(ng,Ak),e(Ak,LHe),e(ng,xHe),e(S,$He),e(S,Gn),e(Gn,ZZ),e(ZZ,kHe),e(Gn,SHe),e(Gn,yk),e(yk,RHe),e(Gn,BHe),e(Gn,Lk),e(Lk,PHe),e(Gn,IHe),e(S,qHe),e(S,On),e(On,eee),e(eee,NHe),e(On,jHe),e(On,xk),e(xk,DHe),e(On,GHe),e(On,$k),e($k,OHe),e(On,VHe),e(S,XHe),e(S,Vn),e(Vn,oee),e(oee,zHe),e(Vn,QHe),e(Vn,kk),e(kk,WHe),e(Vn,HHe),e(Vn,Sk),e(Sk,UHe),e(Vn,JHe),e(S,YHe),e(S,Xn),e(Xn,ree),e(ree,KHe),e(Xn,ZHe),e(Xn,Rk),e(Rk,eUe),e(Xn,oUe),e(Xn,Bk),e(Bk,rUe),e(Xn,tUe),e(S,aUe),e(S,sg),e(sg,tee),e(tee,nUe),e(sg,sUe),e(sg,Pk),e(Pk,lUe),e(sg,iUe),e(S,dUe),e(S,zn),e(zn,aee),e(aee,cUe),e(zn,fUe),e(zn,Ik),e(Ik,mUe),e(zn,gUe),e(zn,qk),e(qk,hUe),e(zn,uUe),e(S,pUe),e(S,Qn),e(Qn,nee),e(nee,_Ue),e(Qn,vUe),e(Qn,Nk),e(Nk,bUe),e(Qn,FUe),e(Qn,jk),e(jk,TUe),e(Qn,MUe),e(S,EUe),e(S,Wn),e(Wn,see),e(see,CUe),e(Wn,wUe),e(Wn,Dk),e(Dk,AUe),e(Wn,yUe),e(Wn,Gk),e(Gk,LUe),e(Wn,xUe),e(S,$Ue),e(S,Hn),e(Hn,lee),e(lee,kUe),e(Hn,SUe),e(Hn,Ok),e(Ok,RUe),e(Hn,BUe),e(Hn,Vk),e(Vk,PUe),e(Hn,IUe),e(S,qUe),e(S,Un),e(Un,iee),e(iee,NUe),e(Un,jUe),e(Un,Xk),e(Xk,DUe),e(Un,GUe),e(Un,zk),e(zk,OUe),e(Un,VUe),e(S,XUe),e(S,Jn),e(Jn,dee),e(dee,zUe),e(Jn,QUe),e(Jn,Qk),e(Qk,WUe),e(Jn,HUe),e(Jn,Wk),e(Wk,UUe),e(Jn,JUe),e(S,YUe),e(S,lg),e(lg,cee),e(cee,KUe),e(lg,ZUe),e(lg,Hk),e(Hk,eJe),e(lg,oJe),e(S,rJe),e(S,Yn),e(Yn,fee),e(fee,tJe),e(Yn,aJe),e(Yn,Uk),e(Uk,nJe),e(Yn,sJe),e(Yn,Jk),e(Jk,lJe),e(Yn,iJe),e(S,dJe),e(S,ig),e(ig,mee),e(mee,cJe),e(ig,fJe),e(ig,Yk),e(Yk,mJe),e(ig,gJe),e(S,hJe),e(S,dg),e(dg,gee),e(gee,uJe),e(dg,pJe),e(dg,Kk),e(Kk,_Je),e(dg,vJe),e(S,bJe),e(S,Kn),e(Kn,hee),e(hee,FJe),e(Kn,TJe),e(Kn,Zk),e(Zk,MJe),e(Kn,EJe),e(Kn,eS),e(eS,CJe),e(Kn,wJe),e(S,AJe),e(S,Zn),e(Zn,uee),e(uee,yJe),e(Zn,LJe),e(Zn,oS),e(oS,xJe),e(Zn,$Je),e(Zn,rS),e(rS,kJe),e(Zn,SJe),e(S,RJe),e(S,cg),e(cg,pee),e(pee,BJe),e(cg,PJe),e(cg,tS),e(tS,IJe),e(cg,qJe),e(S,NJe),e(S,es),e(es,_ee),e(_ee,jJe),e(es,DJe),e(es,aS),e(aS,GJe),e(es,OJe),e(es,nS),e(nS,VJe),e(es,XJe),e(S,zJe),e(S,os),e(os,vee),e(vee,QJe),e(os,WJe),e(os,sS),e(sS,HJe),e(os,UJe),e(os,lS),e(lS,JJe),e(os,YJe),e(S,KJe),e(S,rs),e(rs,bee),e(bee,ZJe),e(rs,eYe),e(rs,iS),e(iS,oYe),e(rs,rYe),e(rs,dS),e(dS,tYe),e(rs,aYe),e(S,nYe),e(S,ts),e(ts,Fee),e(Fee,sYe),e(ts,lYe),e(ts,cS),e(cS,iYe),e(ts,dYe),e(ts,fS),e(fS,cYe),e(ts,fYe),e(S,mYe),e(S,as),e(as,Tee),e(Tee,gYe),e(as,hYe),e(as,mS),e(mS,uYe),e(as,pYe),e(as,gS),e(gS,_Ye),e(as,vYe),e(S,bYe),e(S,fg),e(fg,Mee),e(Mee,FYe),e(fg,TYe),e(fg,hS),e(hS,MYe),e(fg,EYe),e(S,CYe),e(S,mg),e(mg,Eee),e(Eee,wYe),e(mg,AYe),e(mg,uS),e(uS,yYe),e(mg,LYe),e(S,xYe),e(S,gg),e(gg,Cee),e(Cee,$Ye),e(gg,kYe),e(gg,pS),e(pS,SYe),e(gg,RYe),e(S,BYe),e(S,hg),e(hg,wee),e(wee,PYe),e(hg,IYe),e(hg,_S),e(_S,qYe),e(hg,NYe),e(S,jYe),e(S,ns),e(ns,Aee),e(Aee,DYe),e(ns,GYe),e(ns,vS),e(vS,OYe),e(ns,VYe),e(ns,bS),e(bS,XYe),e(ns,zYe),e(S,QYe),e(S,ug),e(ug,yee),e(yee,WYe),e(ug,HYe),e(ug,FS),e(FS,UYe),e(ug,JYe),e(S,YYe),e(S,ss),e(ss,Lee),e(Lee,KYe),e(ss,ZYe),e(ss,TS),e(TS,eKe),e(ss,oKe),e(ss,MS),e(MS,rKe),e(ss,tKe),e(S,aKe),e(S,ls),e(ls,xee),e(xee,nKe),e(ls,sKe),e(ls,ES),e(ES,lKe),e(ls,iKe),e(ls,CS),e(CS,dKe),e(ls,cKe),e(S,fKe),e(S,is),e(is,$ee),e($ee,mKe),e(is,gKe),e(is,wS),e(wS,hKe),e(is,uKe),e(is,AS),e(AS,pKe),e(is,_Ke),e(S,vKe),e(S,ds),e(ds,kee),e(kee,bKe),e(ds,FKe),e(ds,yS),e(yS,TKe),e(ds,MKe),e(ds,LS),e(LS,EKe),e(ds,CKe),e(S,wKe),e(S,cs),e(cs,See),e(See,AKe),e(cs,yKe),e(cs,xS),e(xS,LKe),e(cs,xKe),e(cs,$S),e($S,$Ke),e(cs,kKe),e(S,SKe),e(S,fs),e(fs,Ree),e(Ree,RKe),e(fs,BKe),e(fs,kS),e(kS,PKe),e(fs,IKe),e(fs,SS),e(SS,qKe),e(fs,NKe),e(S,jKe),e(S,pg),e(pg,Bee),e(Bee,DKe),e(pg,GKe),e(pg,RS),e(RS,OKe),e(pg,VKe),e(S,XKe),e(S,_g),e(_g,Pee),e(Pee,zKe),e(_g,QKe),e(_g,BS),e(BS,WKe),e(_g,HKe),e(S,UKe),e(S,ms),e(ms,Iee),e(Iee,JKe),e(ms,YKe),e(ms,PS),e(PS,KKe),e(ms,ZKe),e(ms,IS),e(IS,eZe),e(ms,oZe),e(S,rZe),e(S,gs),e(gs,qee),e(qee,tZe),e(gs,aZe),e(gs,qS),e(qS,nZe),e(gs,sZe),e(gs,NS),e(NS,lZe),e(gs,iZe),e(S,dZe),e(S,hs),e(hs,Nee),e(Nee,cZe),e(hs,fZe),e(hs,jS),e(jS,mZe),e(hs,gZe),e(hs,DS),e(DS,hZe),e(hs,uZe),e(S,pZe),e(S,vg),e(vg,jee),e(jee,_Ze),e(vg,vZe),e(vg,GS),e(GS,bZe),e(vg,FZe),e(S,TZe),e(S,bg),e(bg,Dee),e(Dee,MZe),e(bg,EZe),e(bg,OS),e(OS,CZe),e(bg,wZe),e(S,AZe),e(S,Fg),e(Fg,Gee),e(Gee,yZe),e(Fg,LZe),e(Fg,VS),e(VS,xZe),e(Fg,$Ze),e(S,kZe),e(S,Tg),e(Tg,Oee),e(Oee,SZe),e(Tg,RZe),e(Tg,XS),e(XS,BZe),e(Tg,PZe),e(S,IZe),e(S,us),e(us,Vee),e(Vee,qZe),e(us,NZe),e(us,zS),e(zS,jZe),e(us,DZe),e(us,QS),e(QS,GZe),e(us,OZe),e(S,VZe),e(S,Mg),e(Mg,Xee),e(Xee,XZe),e(Mg,zZe),e(Mg,WS),e(WS,QZe),e(Mg,WZe),e(S,HZe),e(S,Eg),e(Eg,zee),e(zee,UZe),e(Eg,JZe),e(Eg,HS),e(HS,YZe),e(Eg,KZe),e(S,ZZe),e(S,ps),e(ps,Qee),e(Qee,eeo),e(ps,oeo),e(ps,US),e(US,reo),e(ps,teo),e(ps,JS),e(JS,aeo),e(ps,neo),e(S,seo),e(S,_s),e(_s,Wee),e(Wee,leo),e(_s,ieo),e(_s,YS),e(YS,deo),e(_s,ceo),e(_s,KS),e(KS,feo),e(_s,meo),e(Tr,geo),M(Cg,Tr,null),e(Eo,heo),e(Eo,wg),M(Jw,wg,null),e(wg,ueo),e(wg,Hee),e(Hee,peo),v(f,Fke,_),v(f,ti,_),e(ti,Ag),e(Ag,Uee),M(Yw,Uee,null),e(ti,_eo),e(ti,Jee),e(Jee,veo),v(f,Tke,_),v(f,Co,_),M(Kw,Co,null),e(Co,beo),e(Co,Zw),e(Zw,Feo),e(Zw,ZS),e(ZS,Teo),e(Zw,Meo),e(Co,Eeo),e(Co,eA),e(eA,Ceo),e(eA,Yee),e(Yee,weo),e(eA,Aeo),e(Co,yeo),e(Co,Ve),M(oA,Ve,null),e(Ve,Leo),e(Ve,Kee),e(Kee,xeo),e(Ve,$eo),e(Ve,Ta),e(Ta,keo),e(Ta,Zee),e(Zee,Seo),e(Ta,Reo),e(Ta,eoe),e(eoe,Beo),e(Ta,Peo),e(Ta,ooe),e(ooe,Ieo),e(Ta,qeo),e(Ve,Neo),e(Ve,me),e(me,yg),e(yg,roe),e(roe,jeo),e(yg,Deo),e(yg,eR),e(eR,Geo),e(yg,Oeo),e(me,Veo),e(me,Lg),e(Lg,toe),e(toe,Xeo),e(Lg,zeo),e(Lg,oR),e(oR,Qeo),e(Lg,Weo),e(me,Heo),e(me,xg),e(xg,aoe),e(aoe,Ueo),e(xg,Jeo),e(xg,rR),e(rR,Yeo),e(xg,Keo),e(me,Zeo),e(me,$g),e($g,noe),e(noe,eoo),e($g,ooo),e($g,tR),e(tR,roo),e($g,too),e(me,aoo),e(me,kg),e(kg,soe),e(soe,noo),e(kg,soo),e(kg,aR),e(aR,loo),e(kg,ioo),e(me,doo),e(me,Sg),e(Sg,loe),e(loe,coo),e(Sg,foo),e(Sg,nR),e(nR,moo),e(Sg,goo),e(me,hoo),e(me,Rg),e(Rg,ioe),e(ioe,uoo),e(Rg,poo),e(Rg,sR),e(sR,_oo),e(Rg,voo),e(me,boo),e(me,Bg),e(Bg,doe),e(doe,Foo),e(Bg,Too),e(Bg,lR),e(lR,Moo),e(Bg,Eoo),e(me,Coo),e(me,Pg),e(Pg,coe),e(coe,woo),e(Pg,Aoo),e(Pg,iR),e(iR,yoo),e(Pg,Loo),e(me,xoo),e(me,Ig),e(Ig,foe),e(foe,$oo),e(Ig,koo),e(Ig,dR),e(dR,Soo),e(Ig,Roo),e(me,Boo),e(me,qg),e(qg,moe),e(moe,Poo),e(qg,Ioo),e(qg,cR),e(cR,qoo),e(qg,Noo),e(me,joo),e(me,Ng),e(Ng,goe),e(goe,Doo),e(Ng,Goo),e(Ng,fR),e(fR,Ooo),e(Ng,Voo),e(me,Xoo),e(me,jg),e(jg,hoe),e(hoe,zoo),e(jg,Qoo),e(jg,mR),e(mR,Woo),e(jg,Hoo),e(me,Uoo),e(me,Dg),e(Dg,uoe),e(uoe,Joo),e(Dg,Yoo),e(Dg,gR),e(gR,Koo),e(Dg,Zoo),e(me,ero),e(me,Gg),e(Gg,poe),e(poe,oro),e(Gg,rro),e(Gg,hR),e(hR,tro),e(Gg,aro),e(me,nro),e(me,Og),e(Og,_oe),e(_oe,sro),e(Og,lro),e(Og,uR),e(uR,iro),e(Og,dro),e(me,cro),e(me,Vg),e(Vg,voe),e(voe,fro),e(Vg,mro),e(Vg,pR),e(pR,gro),e(Vg,hro),e(me,uro),e(me,Xg),e(Xg,boe),e(boe,pro),e(Xg,_ro),e(Xg,_R),e(_R,vro),e(Xg,bro),e(Ve,Fro),M(zg,Ve,null),e(Ve,Tro),M(Qg,Ve,null),e(Co,Mro),e(Co,Wg),M(rA,Wg,null),e(Wg,Ero),e(Wg,Foe),e(Foe,Cro),v(f,Mke,_),v(f,ai,_),e(ai,Hg),e(Hg,Toe),M(tA,Toe,null),e(ai,wro),e(ai,Moe),e(Moe,Aro),v(f,Eke,_),v(f,wo,_),M(aA,wo,null),e(wo,yro),e(wo,nA),e(nA,Lro),e(nA,vR),e(vR,xro),e(nA,$ro),e(wo,kro),e(wo,sA),e(sA,Sro),e(sA,Eoe),e(Eoe,Rro),e(sA,Bro),e(wo,Pro),e(wo,Xe),M(lA,Xe,null),e(Xe,Iro),e(Xe,Coe),e(Coe,qro),e(Xe,Nro),e(Xe,ni),e(ni,jro),e(ni,woe),e(woe,Dro),e(ni,Gro),e(ni,Aoe),e(Aoe,Oro),e(ni,Vro),e(Xe,Xro),e(Xe,Pe),e(Pe,Ug),e(Ug,yoe),e(yoe,zro),e(Ug,Qro),e(Ug,bR),e(bR,Wro),e(Ug,Hro),e(Pe,Uro),e(Pe,Jg),e(Jg,Loe),e(Loe,Jro),e(Jg,Yro),e(Jg,FR),e(FR,Kro),e(Jg,Zro),e(Pe,eto),e(Pe,Yg),e(Yg,xoe),e(xoe,oto),e(Yg,rto),e(Yg,TR),e(TR,tto),e(Yg,ato),e(Pe,nto),e(Pe,Kg),e(Kg,$oe),e($oe,sto),e(Kg,lto),e(Kg,MR),e(MR,ito),e(Kg,dto),e(Pe,cto),e(Pe,Zg),e(Zg,koe),e(koe,fto),e(Zg,mto),e(Zg,ER),e(ER,gto),e(Zg,hto),e(Pe,uto),e(Pe,eh),e(eh,Soe),e(Soe,pto),e(eh,_to),e(eh,CR),e(CR,vto),e(eh,bto),e(Pe,Fto),e(Pe,oh),e(oh,Roe),e(Roe,Tto),e(oh,Mto),e(oh,wR),e(wR,Eto),e(oh,Cto),e(Pe,wto),e(Pe,rh),e(rh,Boe),e(Boe,Ato),e(rh,yto),e(rh,AR),e(AR,Lto),e(rh,xto),e(Xe,$to),M(th,Xe,null),e(Xe,kto),M(ah,Xe,null),e(wo,Sto),e(wo,nh),M(iA,nh,null),e(nh,Rto),e(nh,Poe),e(Poe,Bto),v(f,Cke,_),v(f,si,_),e(si,sh),e(sh,Ioe),M(dA,Ioe,null),e(si,Pto),e(si,qoe),e(qoe,Ito),v(f,wke,_),v(f,Ao,_),M(cA,Ao,null),e(Ao,qto),e(Ao,li),e(li,Nto),e(li,yR),e(yR,jto),e(li,Dto),e(li,LR),e(LR,Gto),e(li,Oto),e(Ao,Vto),e(Ao,fA),e(fA,Xto),e(fA,Noe),e(Noe,zto),e(fA,Qto),e(Ao,Wto),e(Ao,Kr),M(mA,Kr,null),e(Kr,Hto),e(Kr,joe),e(joe,Uto),e(Kr,Jto),e(Kr,ii),e(ii,Yto),e(ii,Doe),e(Doe,Kto),e(ii,Zto),e(ii,xR),e(xR,eao),e(ii,oao),e(Kr,rao),M(lh,Kr,null),e(Ao,tao),e(Ao,ze),M(gA,ze,null),e(ze,aao),e(ze,Goe),e(Goe,nao),e(ze,sao),e(ze,Ma),e(Ma,lao),e(Ma,Ooe),e(Ooe,iao),e(Ma,dao),e(Ma,Voe),e(Voe,cao),e(Ma,fao),e(Ma,Xoe),e(Xoe,mao),e(Ma,gao),e(ze,hao),e(ze,x),e(x,ih),e(ih,zoe),e(zoe,uao),e(ih,pao),e(ih,$R),e($R,_ao),e(ih,vao),e(x,bao),e(x,dh),e(dh,Qoe),e(Qoe,Fao),e(dh,Tao),e(dh,kR),e(kR,Mao),e(dh,Eao),e(x,Cao),e(x,ch),e(ch,Woe),e(Woe,wao),e(ch,Aao),e(ch,SR),e(SR,yao),e(ch,Lao),e(x,xao),e(x,fh),e(fh,Hoe),e(Hoe,$ao),e(fh,kao),e(fh,RR),e(RR,Sao),e(fh,Rao),e(x,Bao),e(x,mh),e(mh,Uoe),e(Uoe,Pao),e(mh,Iao),e(mh,BR),e(BR,qao),e(mh,Nao),e(x,jao),e(x,gh),e(gh,Joe),e(Joe,Dao),e(gh,Gao),e(gh,PR),e(PR,Oao),e(gh,Vao),e(x,Xao),e(x,hh),e(hh,Yoe),e(Yoe,zao),e(hh,Qao),e(hh,IR),e(IR,Wao),e(hh,Hao),e(x,Uao),e(x,uh),e(uh,Koe),e(Koe,Jao),e(uh,Yao),e(uh,qR),e(qR,Kao),e(uh,Zao),e(x,eno),e(x,ph),e(ph,Zoe),e(Zoe,ono),e(ph,rno),e(ph,NR),e(NR,tno),e(ph,ano),e(x,nno),e(x,_h),e(_h,ere),e(ere,sno),e(_h,lno),e(_h,jR),e(jR,ino),e(_h,dno),e(x,cno),e(x,vh),e(vh,ore),e(ore,fno),e(vh,mno),e(vh,DR),e(DR,gno),e(vh,hno),e(x,uno),e(x,bh),e(bh,rre),e(rre,pno),e(bh,_no),e(bh,GR),e(GR,vno),e(bh,bno),e(x,Fno),e(x,Fh),e(Fh,tre),e(tre,Tno),e(Fh,Mno),e(Fh,OR),e(OR,Eno),e(Fh,Cno),e(x,wno),e(x,Th),e(Th,are),e(are,Ano),e(Th,yno),e(Th,VR),e(VR,Lno),e(Th,xno),e(x,$no),e(x,Mh),e(Mh,nre),e(nre,kno),e(Mh,Sno),e(Mh,XR),e(XR,Rno),e(Mh,Bno),e(x,Pno),e(x,Eh),e(Eh,sre),e(sre,Ino),e(Eh,qno),e(Eh,zR),e(zR,Nno),e(Eh,jno),e(x,Dno),e(x,Ch),e(Ch,lre),e(lre,Gno),e(Ch,Ono),e(Ch,QR),e(QR,Vno),e(Ch,Xno),e(x,zno),e(x,wh),e(wh,ire),e(ire,Qno),e(wh,Wno),e(wh,WR),e(WR,Hno),e(wh,Uno),e(x,Jno),e(x,Ah),e(Ah,dre),e(dre,Yno),e(Ah,Kno),e(Ah,HR),e(HR,Zno),e(Ah,eso),e(x,oso),e(x,yh),e(yh,cre),e(cre,rso),e(yh,tso),e(yh,UR),e(UR,aso),e(yh,nso),e(x,sso),e(x,Lh),e(Lh,fre),e(fre,lso),e(Lh,iso),e(Lh,JR),e(JR,dso),e(Lh,cso),e(x,fso),e(x,xh),e(xh,mre),e(mre,mso),e(xh,gso),e(xh,YR),e(YR,hso),e(xh,uso),e(x,pso),e(x,$h),e($h,gre),e(gre,_so),e($h,vso),e($h,KR),e(KR,bso),e($h,Fso),e(x,Tso),e(x,kh),e(kh,hre),e(hre,Mso),e(kh,Eso),e(kh,ZR),e(ZR,Cso),e(kh,wso),e(x,Aso),e(x,Sh),e(Sh,ure),e(ure,yso),e(Sh,Lso),e(Sh,eB),e(eB,xso),e(Sh,$so),e(x,kso),e(x,Rh),e(Rh,pre),e(pre,Sso),e(Rh,Rso),e(Rh,oB),e(oB,Bso),e(Rh,Pso),e(x,Iso),e(x,Bh),e(Bh,_re),e(_re,qso),e(Bh,Nso),e(Bh,rB),e(rB,jso),e(Bh,Dso),e(x,Gso),e(x,Ph),e(Ph,vre),e(vre,Oso),e(Ph,Vso),e(Ph,tB),e(tB,Xso),e(Ph,zso),e(x,Qso),e(x,Ih),e(Ih,bre),e(bre,Wso),e(Ih,Hso),e(Ih,aB),e(aB,Uso),e(Ih,Jso),e(x,Yso),e(x,vs),e(vs,Fre),e(Fre,Kso),e(vs,Zso),e(vs,nB),e(nB,elo),e(vs,olo),e(vs,sB),e(sB,rlo),e(vs,tlo),e(x,alo),e(x,qh),e(qh,Tre),e(Tre,nlo),e(qh,slo),e(qh,lB),e(lB,llo),e(qh,ilo),e(x,dlo),e(x,Nh),e(Nh,Mre),e(Mre,clo),e(Nh,flo),e(Nh,iB),e(iB,mlo),e(Nh,glo),e(x,hlo),e(x,jh),e(jh,Ere),e(Ere,ulo),e(jh,plo),e(jh,dB),e(dB,_lo),e(jh,vlo),e(x,blo),e(x,Dh),e(Dh,Cre),e(Cre,Flo),e(Dh,Tlo),e(Dh,cB),e(cB,Mlo),e(Dh,Elo),e(x,Clo),e(x,Gh),e(Gh,wre),e(wre,wlo),e(Gh,Alo),e(Gh,fB),e(fB,ylo),e(Gh,Llo),e(x,xlo),e(x,Oh),e(Oh,Are),e(Are,$lo),e(Oh,klo),e(Oh,mB),e(mB,Slo),e(Oh,Rlo),e(x,Blo),e(x,Vh),e(Vh,yre),e(yre,Plo),e(Vh,Ilo),e(Vh,gB),e(gB,qlo),e(Vh,Nlo),e(x,jlo),e(x,Xh),e(Xh,Lre),e(Lre,Dlo),e(Xh,Glo),e(Xh,hB),e(hB,Olo),e(Xh,Vlo),e(x,Xlo),e(x,zh),e(zh,xre),e(xre,zlo),e(zh,Qlo),e(zh,uB),e(uB,Wlo),e(zh,Hlo),e(x,Ulo),e(x,Qh),e(Qh,$re),e($re,Jlo),e(Qh,Ylo),e(Qh,pB),e(pB,Klo),e(Qh,Zlo),e(x,eio),e(x,Wh),e(Wh,kre),e(kre,oio),e(Wh,rio),e(Wh,_B),e(_B,tio),e(Wh,aio),e(x,nio),e(x,Hh),e(Hh,Sre),e(Sre,sio),e(Hh,lio),e(Hh,vB),e(vB,iio),e(Hh,dio),e(x,cio),e(x,Uh),e(Uh,Rre),e(Rre,fio),e(Uh,mio),e(Uh,bB),e(bB,gio),e(Uh,hio),e(x,uio),e(x,Jh),e(Jh,Bre),e(Bre,pio),e(Jh,_io),e(Jh,FB),e(FB,vio),e(Jh,bio),e(x,Fio),e(x,Yh),e(Yh,Pre),e(Pre,Tio),e(Yh,Mio),e(Yh,TB),e(TB,Eio),e(Yh,Cio),e(x,wio),e(x,Kh),e(Kh,Ire),e(Ire,Aio),e(Kh,yio),e(Kh,MB),e(MB,Lio),e(Kh,xio),e(x,$io),e(x,Zh),e(Zh,qre),e(qre,kio),e(Zh,Sio),e(Zh,EB),e(EB,Rio),e(Zh,Bio),e(x,Pio),e(x,eu),e(eu,Nre),e(Nre,Iio),e(eu,qio),e(eu,CB),e(CB,Nio),e(eu,jio),e(x,Dio),e(x,ou),e(ou,jre),e(jre,Gio),e(ou,Oio),e(ou,wB),e(wB,Vio),e(ou,Xio),e(x,zio),e(x,ru),e(ru,Dre),e(Dre,Qio),e(ru,Wio),e(ru,AB),e(AB,Hio),e(ru,Uio),e(x,Jio),e(x,tu),e(tu,Gre),e(Gre,Yio),e(tu,Kio),e(tu,yB),e(yB,Zio),e(tu,edo),e(x,odo),e(x,au),e(au,Ore),e(Ore,rdo),e(au,tdo),e(au,LB),e(LB,ado),e(au,ndo),e(x,sdo),e(x,nu),e(nu,Vre),e(Vre,ldo),e(nu,ido),e(nu,xB),e(xB,ddo),e(nu,cdo),e(x,fdo),e(x,su),e(su,Xre),e(Xre,mdo),e(su,gdo),e(su,$B),e($B,hdo),e(su,udo),e(x,pdo),e(x,lu),e(lu,zre),e(zre,_do),e(lu,vdo),e(lu,kB),e(kB,bdo),e(lu,Fdo),e(x,Tdo),e(x,iu),e(iu,Qre),e(Qre,Mdo),e(iu,Edo),e(iu,SB),e(SB,Cdo),e(iu,wdo),e(x,Ado),e(x,du),e(du,Wre),e(Wre,ydo),e(du,Ldo),e(du,RB),e(RB,xdo),e(du,$do),e(x,kdo),e(x,cu),e(cu,Hre),e(Hre,Sdo),e(cu,Rdo),e(cu,BB),e(BB,Bdo),e(cu,Pdo),e(x,Ido),e(x,fu),e(fu,Ure),e(Ure,qdo),e(fu,Ndo),e(fu,PB),e(PB,jdo),e(fu,Ddo),e(x,Gdo),e(x,mu),e(mu,Jre),e(Jre,Odo),e(mu,Vdo),e(mu,IB),e(IB,Xdo),e(mu,zdo),e(x,Qdo),e(x,gu),e(gu,Yre),e(Yre,Wdo),e(gu,Hdo),e(gu,qB),e(qB,Udo),e(gu,Jdo),e(x,Ydo),e(x,hu),e(hu,Kre),e(Kre,Kdo),e(hu,Zdo),e(hu,NB),e(NB,eco),e(hu,oco),e(x,rco),e(x,uu),e(uu,Zre),e(Zre,tco),e(uu,aco),e(uu,jB),e(jB,nco),e(uu,sco),e(x,lco),e(x,pu),e(pu,ete),e(ete,ico),e(pu,dco),e(pu,DB),e(DB,cco),e(pu,fco),e(x,mco),e(x,_u),e(_u,ote),e(ote,gco),e(_u,hco),e(_u,GB),e(GB,uco),e(_u,pco),e(x,_co),e(x,vu),e(vu,rte),e(rte,vco),e(vu,bco),e(vu,OB),e(OB,Fco),e(vu,Tco),e(x,Mco),e(x,bu),e(bu,tte),e(tte,Eco),e(bu,Cco),e(bu,VB),e(VB,wco),e(bu,Aco),e(x,yco),e(x,Fu),e(Fu,ate),e(ate,Lco),e(Fu,xco),e(Fu,XB),e(XB,$co),e(Fu,kco),e(x,Sco),e(x,Tu),e(Tu,nte),e(nte,Rco),e(Tu,Bco),e(Tu,zB),e(zB,Pco),e(Tu,Ico),e(x,qco),e(x,Mu),e(Mu,ste),e(ste,Nco),e(Mu,jco),e(Mu,QB),e(QB,Dco),e(Mu,Gco),e(x,Oco),e(x,Eu),e(Eu,lte),e(lte,Vco),e(Eu,Xco),e(Eu,WB),e(WB,zco),e(Eu,Qco),e(x,Wco),e(x,Cu),e(Cu,ite),e(ite,Hco),e(Cu,Uco),e(Cu,HB),e(HB,Jco),e(Cu,Yco),e(x,Kco),e(x,wu),e(wu,dte),e(dte,Zco),e(wu,efo),e(wu,UB),e(UB,ofo),e(wu,rfo),e(x,tfo),e(x,Au),e(Au,cte),e(cte,afo),e(Au,nfo),e(Au,JB),e(JB,sfo),e(Au,lfo),e(x,ifo),e(x,yu),e(yu,fte),e(fte,dfo),e(yu,cfo),e(yu,YB),e(YB,ffo),e(yu,mfo),e(x,gfo),e(x,Lu),e(Lu,mte),e(mte,hfo),e(Lu,ufo),e(Lu,KB),e(KB,pfo),e(Lu,_fo),e(x,vfo),e(x,xu),e(xu,gte),e(gte,bfo),e(xu,Ffo),e(xu,ZB),e(ZB,Tfo),e(xu,Mfo),e(x,Efo),e(x,$u),e($u,hte),e(hte,Cfo),e($u,wfo),e($u,eP),e(eP,Afo),e($u,yfo),e(x,Lfo),e(x,ku),e(ku,ute),e(ute,xfo),e(ku,$fo),e(ku,oP),e(oP,kfo),e(ku,Sfo),e(x,Rfo),e(x,Su),e(Su,pte),e(pte,Bfo),e(Su,Pfo),e(Su,rP),e(rP,Ifo),e(Su,qfo),e(x,Nfo),e(x,Ru),e(Ru,_te),e(_te,jfo),e(Ru,Dfo),e(Ru,tP),e(tP,Gfo),e(Ru,Ofo),e(x,Vfo),e(x,Bu),e(Bu,vte),e(vte,Xfo),e(Bu,zfo),e(Bu,aP),e(aP,Qfo),e(Bu,Wfo),e(x,Hfo),e(x,Pu),e(Pu,bte),e(bte,Ufo),e(Pu,Jfo),e(Pu,nP),e(nP,Yfo),e(Pu,Kfo),e(x,Zfo),e(x,Iu),e(Iu,Fte),e(Fte,emo),e(Iu,omo),e(Iu,sP),e(sP,rmo),e(Iu,tmo),e(x,amo),e(x,qu),e(qu,Tte),e(Tte,nmo),e(qu,smo),e(qu,lP),e(lP,lmo),e(qu,imo),e(x,dmo),e(x,Nu),e(Nu,Mte),e(Mte,cmo),e(Nu,fmo),e(Nu,iP),e(iP,mmo),e(Nu,gmo),e(x,hmo),e(x,ju),e(ju,Ete),e(Ete,umo),e(ju,pmo),e(ju,dP),e(dP,_mo),e(ju,vmo),e(x,bmo),e(x,Du),e(Du,Cte),e(Cte,Fmo),e(Du,Tmo),e(Du,cP),e(cP,Mmo),e(Du,Emo),e(x,Cmo),e(x,Gu),e(Gu,wte),e(wte,wmo),e(Gu,Amo),e(Gu,fP),e(fP,ymo),e(Gu,Lmo),e(x,xmo),e(x,Ou),e(Ou,Ate),e(Ate,$mo),e(Ou,kmo),e(Ou,mP),e(mP,Smo),e(Ou,Rmo),e(x,Bmo),e(x,Vu),e(Vu,yte),e(yte,Pmo),e(Vu,Imo),e(Vu,gP),e(gP,qmo),e(Vu,Nmo),e(x,jmo),e(x,Xu),e(Xu,Lte),e(Lte,Dmo),e(Xu,Gmo),e(Xu,hP),e(hP,Omo),e(Xu,Vmo),e(ze,Xmo),e(ze,zu),e(zu,zmo),e(zu,xte),e(xte,Qmo),e(zu,Wmo),e(zu,$te),e($te,Hmo),e(ze,Umo),M(Qu,ze,null),v(f,Ake,_),v(f,di,_),e(di,Wu),e(Wu,kte),M(hA,kte,null),e(di,Jmo),e(di,Ste),e(Ste,Ymo),v(f,yke,_),v(f,yo,_),M(uA,yo,null),e(yo,Kmo),e(yo,ci),e(ci,Zmo),e(ci,uP),e(uP,ego),e(ci,ogo),e(ci,pP),e(pP,rgo),e(ci,tgo),e(yo,ago),e(yo,pA),e(pA,ngo),e(pA,Rte),e(Rte,sgo),e(pA,lgo),e(yo,igo),e(yo,Zr),M(_A,Zr,null),e(Zr,dgo),e(Zr,Bte),e(Bte,cgo),e(Zr,fgo),e(Zr,fi),e(fi,mgo),e(fi,Pte),e(Pte,ggo),e(fi,hgo),e(fi,_P),e(_P,ugo),e(fi,pgo),e(Zr,_go),M(Hu,Zr,null),e(yo,vgo),e(yo,Qe),M(vA,Qe,null),e(Qe,bgo),e(Qe,Ite),e(Ite,Fgo),e(Qe,Tgo),e(Qe,Ea),e(Ea,Mgo),e(Ea,qte),e(qte,Ego),e(Ea,Cgo),e(Ea,Nte),e(Nte,wgo),e(Ea,Ago),e(Ea,jte),e(jte,ygo),e(Ea,Lgo),e(Qe,xgo),e(Qe,G),e(G,Uu),e(Uu,Dte),e(Dte,$go),e(Uu,kgo),e(Uu,vP),e(vP,Sgo),e(Uu,Rgo),e(G,Bgo),e(G,Ju),e(Ju,Gte),e(Gte,Pgo),e(Ju,Igo),e(Ju,bP),e(bP,qgo),e(Ju,Ngo),e(G,jgo),e(G,Yu),e(Yu,Ote),e(Ote,Dgo),e(Yu,Ggo),e(Yu,FP),e(FP,Ogo),e(Yu,Vgo),e(G,Xgo),e(G,Ku),e(Ku,Vte),e(Vte,zgo),e(Ku,Qgo),e(Ku,TP),e(TP,Wgo),e(Ku,Hgo),e(G,Ugo),e(G,Zu),e(Zu,Xte),e(Xte,Jgo),e(Zu,Ygo),e(Zu,MP),e(MP,Kgo),e(Zu,Zgo),e(G,eho),e(G,ep),e(ep,zte),e(zte,oho),e(ep,rho),e(ep,EP),e(EP,tho),e(ep,aho),e(G,nho),e(G,op),e(op,Qte),e(Qte,sho),e(op,lho),e(op,CP),e(CP,iho),e(op,dho),e(G,cho),e(G,rp),e(rp,Wte),e(Wte,fho),e(rp,mho),e(rp,wP),e(wP,gho),e(rp,hho),e(G,uho),e(G,tp),e(tp,Hte),e(Hte,pho),e(tp,_ho),e(tp,AP),e(AP,vho),e(tp,bho),e(G,Fho),e(G,ap),e(ap,Ute),e(Ute,Tho),e(ap,Mho),e(ap,yP),e(yP,Eho),e(ap,Cho),e(G,who),e(G,np),e(np,Jte),e(Jte,Aho),e(np,yho),e(np,LP),e(LP,Lho),e(np,xho),e(G,$ho),e(G,sp),e(sp,Yte),e(Yte,kho),e(sp,Sho),e(sp,xP),e(xP,Rho),e(sp,Bho),e(G,Pho),e(G,lp),e(lp,Kte),e(Kte,Iho),e(lp,qho),e(lp,$P),e($P,Nho),e(lp,jho),e(G,Dho),e(G,ip),e(ip,Zte),e(Zte,Gho),e(ip,Oho),e(ip,kP),e(kP,Vho),e(ip,Xho),e(G,zho),e(G,dp),e(dp,eae),e(eae,Qho),e(dp,Who),e(dp,SP),e(SP,Hho),e(dp,Uho),e(G,Jho),e(G,cp),e(cp,oae),e(oae,Yho),e(cp,Kho),e(cp,RP),e(RP,Zho),e(cp,euo),e(G,ouo),e(G,fp),e(fp,rae),e(rae,ruo),e(fp,tuo),e(fp,BP),e(BP,auo),e(fp,nuo),e(G,suo),e(G,mp),e(mp,tae),e(tae,luo),e(mp,iuo),e(mp,PP),e(PP,duo),e(mp,cuo),e(G,fuo),e(G,gp),e(gp,aae),e(aae,muo),e(gp,guo),e(gp,IP),e(IP,huo),e(gp,uuo),e(G,puo),e(G,hp),e(hp,nae),e(nae,_uo),e(hp,vuo),e(hp,qP),e(qP,buo),e(hp,Fuo),e(G,Tuo),e(G,up),e(up,sae),e(sae,Muo),e(up,Euo),e(up,NP),e(NP,Cuo),e(up,wuo),e(G,Auo),e(G,pp),e(pp,lae),e(lae,yuo),e(pp,Luo),e(pp,jP),e(jP,xuo),e(pp,$uo),e(G,kuo),e(G,_p),e(_p,iae),e(iae,Suo),e(_p,Ruo),e(_p,DP),e(DP,Buo),e(_p,Puo),e(G,Iuo),e(G,vp),e(vp,dae),e(dae,quo),e(vp,Nuo),e(vp,GP),e(GP,juo),e(vp,Duo),e(G,Guo),e(G,bp),e(bp,cae),e(cae,Ouo),e(bp,Vuo),e(bp,OP),e(OP,Xuo),e(bp,zuo),e(G,Quo),e(G,Fp),e(Fp,fae),e(fae,Wuo),e(Fp,Huo),e(Fp,VP),e(VP,Uuo),e(Fp,Juo),e(G,Yuo),e(G,Tp),e(Tp,mae),e(mae,Kuo),e(Tp,Zuo),e(Tp,XP),e(XP,epo),e(Tp,opo),e(G,rpo),e(G,Mp),e(Mp,gae),e(gae,tpo),e(Mp,apo),e(Mp,zP),e(zP,npo),e(Mp,spo),e(G,lpo),e(G,Ep),e(Ep,hae),e(hae,ipo),e(Ep,dpo),e(Ep,QP),e(QP,cpo),e(Ep,fpo),e(G,mpo),e(G,Cp),e(Cp,uae),e(uae,gpo),e(Cp,hpo),e(Cp,WP),e(WP,upo),e(Cp,ppo),e(G,_po),e(G,wp),e(wp,pae),e(pae,vpo),e(wp,bpo),e(wp,HP),e(HP,Fpo),e(wp,Tpo),e(G,Mpo),e(G,Ap),e(Ap,_ae),e(_ae,Epo),e(Ap,Cpo),e(Ap,UP),e(UP,wpo),e(Ap,Apo),e(G,ypo),e(G,yp),e(yp,vae),e(vae,Lpo),e(yp,xpo),e(yp,JP),e(JP,$po),e(yp,kpo),e(G,Spo),e(G,Lp),e(Lp,bae),e(bae,Rpo),e(Lp,Bpo),e(Lp,YP),e(YP,Ppo),e(Lp,Ipo),e(G,qpo),e(G,xp),e(xp,Fae),e(Fae,Npo),e(xp,jpo),e(xp,KP),e(KP,Dpo),e(xp,Gpo),e(G,Opo),e(G,$p),e($p,Tae),e(Tae,Vpo),e($p,Xpo),e($p,ZP),e(ZP,zpo),e($p,Qpo),e(G,Wpo),e(G,kp),e(kp,Mae),e(Mae,Hpo),e(kp,Upo),e(kp,eI),e(eI,Jpo),e(kp,Ypo),e(G,Kpo),e(G,Sp),e(Sp,Eae),e(Eae,Zpo),e(Sp,e_o),e(Sp,oI),e(oI,o_o),e(Sp,r_o),e(G,t_o),e(G,Rp),e(Rp,Cae),e(Cae,a_o),e(Rp,n_o),e(Rp,rI),e(rI,s_o),e(Rp,l_o),e(Qe,i_o),e(Qe,Bp),e(Bp,d_o),e(Bp,wae),e(wae,c_o),e(Bp,f_o),e(Bp,Aae),e(Aae,m_o),e(Qe,g_o),M(Pp,Qe,null),v(f,Lke,_),v(f,mi,_),e(mi,Ip),e(Ip,yae),M(bA,yae,null),e(mi,h_o),e(mi,Lae),e(Lae,u_o),v(f,xke,_),v(f,Lo,_),M(FA,Lo,null),e(Lo,p_o),e(Lo,gi),e(gi,__o),e(gi,tI),e(tI,v_o),e(gi,b_o),e(gi,aI),e(aI,F_o),e(gi,T_o),e(Lo,M_o),e(Lo,TA),e(TA,E_o),e(TA,xae),e(xae,C_o),e(TA,w_o),e(Lo,A_o),e(Lo,et),M(MA,et,null),e(et,y_o),e(et,$ae),e($ae,L_o),e(et,x_o),e(et,hi),e(hi,$_o),e(hi,kae),e(kae,k_o),e(hi,S_o),e(hi,nI),e(nI,R_o),e(hi,B_o),e(et,P_o),M(qp,et,null),e(Lo,I_o),e(Lo,We),M(EA,We,null),e(We,q_o),e(We,Sae),e(Sae,N_o),e(We,j_o),e(We,Ca),e(Ca,D_o),e(Ca,Rae),e(Rae,G_o),e(Ca,O_o),e(Ca,Bae),e(Bae,V_o),e(Ca,X_o),e(Ca,Pae),e(Pae,z_o),e(Ca,Q_o),e(We,W_o),e(We,z),e(z,Np),e(Np,Iae),e(Iae,H_o),e(Np,U_o),e(Np,sI),e(sI,J_o),e(Np,Y_o),e(z,K_o),e(z,jp),e(jp,qae),e(qae,Z_o),e(jp,evo),e(jp,lI),e(lI,ovo),e(jp,rvo),e(z,tvo),e(z,Dp),e(Dp,Nae),e(Nae,avo),e(Dp,nvo),e(Dp,iI),e(iI,svo),e(Dp,lvo),e(z,ivo),e(z,Gp),e(Gp,jae),e(jae,dvo),e(Gp,cvo),e(Gp,dI),e(dI,fvo),e(Gp,mvo),e(z,gvo),e(z,Op),e(Op,Dae),e(Dae,hvo),e(Op,uvo),e(Op,cI),e(cI,pvo),e(Op,_vo),e(z,vvo),e(z,Vp),e(Vp,Gae),e(Gae,bvo),e(Vp,Fvo),e(Vp,fI),e(fI,Tvo),e(Vp,Mvo),e(z,Evo),e(z,Xp),e(Xp,Oae),e(Oae,Cvo),e(Xp,wvo),e(Xp,mI),e(mI,Avo),e(Xp,yvo),e(z,Lvo),e(z,zp),e(zp,Vae),e(Vae,xvo),e(zp,$vo),e(zp,gI),e(gI,kvo),e(zp,Svo),e(z,Rvo),e(z,Qp),e(Qp,Xae),e(Xae,Bvo),e(Qp,Pvo),e(Qp,hI),e(hI,Ivo),e(Qp,qvo),e(z,Nvo),e(z,Wp),e(Wp,zae),e(zae,jvo),e(Wp,Dvo),e(Wp,uI),e(uI,Gvo),e(Wp,Ovo),e(z,Vvo),e(z,Hp),e(Hp,Qae),e(Qae,Xvo),e(Hp,zvo),e(Hp,pI),e(pI,Qvo),e(Hp,Wvo),e(z,Hvo),e(z,Up),e(Up,Wae),e(Wae,Uvo),e(Up,Jvo),e(Up,_I),e(_I,Yvo),e(Up,Kvo),e(z,Zvo),e(z,Jp),e(Jp,Hae),e(Hae,e1o),e(Jp,o1o),e(Jp,vI),e(vI,r1o),e(Jp,t1o),e(z,a1o),e(z,Yp),e(Yp,Uae),e(Uae,n1o),e(Yp,s1o),e(Yp,bI),e(bI,l1o),e(Yp,i1o),e(z,d1o),e(z,Kp),e(Kp,Jae),e(Jae,c1o),e(Kp,f1o),e(Kp,FI),e(FI,m1o),e(Kp,g1o),e(z,h1o),e(z,Zp),e(Zp,Yae),e(Yae,u1o),e(Zp,p1o),e(Zp,TI),e(TI,_1o),e(Zp,v1o),e(z,b1o),e(z,e_),e(e_,Kae),e(Kae,F1o),e(e_,T1o),e(e_,MI),e(MI,M1o),e(e_,E1o),e(z,C1o),e(z,o_),e(o_,Zae),e(Zae,w1o),e(o_,A1o),e(o_,EI),e(EI,y1o),e(o_,L1o),e(z,x1o),e(z,r_),e(r_,ene),e(ene,$1o),e(r_,k1o),e(r_,CI),e(CI,S1o),e(r_,R1o),e(z,B1o),e(z,t_),e(t_,one),e(one,P1o),e(t_,I1o),e(t_,wI),e(wI,q1o),e(t_,N1o),e(z,j1o),e(z,a_),e(a_,rne),e(rne,D1o),e(a_,G1o),e(a_,AI),e(AI,O1o),e(a_,V1o),e(z,X1o),e(z,n_),e(n_,tne),e(tne,z1o),e(n_,Q1o),e(n_,yI),e(yI,W1o),e(n_,H1o),e(z,U1o),e(z,s_),e(s_,ane),e(ane,J1o),e(s_,Y1o),e(s_,LI),e(LI,K1o),e(s_,Z1o),e(z,ebo),e(z,l_),e(l_,nne),e(nne,obo),e(l_,rbo),e(l_,xI),e(xI,tbo),e(l_,abo),e(z,nbo),e(z,i_),e(i_,sne),e(sne,sbo),e(i_,lbo),e(i_,$I),e($I,ibo),e(i_,dbo),e(z,cbo),e(z,d_),e(d_,lne),e(lne,fbo),e(d_,mbo),e(d_,kI),e(kI,gbo),e(d_,hbo),e(z,ubo),e(z,c_),e(c_,ine),e(ine,pbo),e(c_,_bo),e(c_,SI),e(SI,vbo),e(c_,bbo),e(z,Fbo),e(z,f_),e(f_,dne),e(dne,Tbo),e(f_,Mbo),e(f_,RI),e(RI,Ebo),e(f_,Cbo),e(z,wbo),e(z,m_),e(m_,cne),e(cne,Abo),e(m_,ybo),e(m_,BI),e(BI,Lbo),e(m_,xbo),e(z,$bo),e(z,g_),e(g_,fne),e(fne,kbo),e(g_,Sbo),e(g_,PI),e(PI,Rbo),e(g_,Bbo),e(z,Pbo),e(z,h_),e(h_,mne),e(mne,Ibo),e(h_,qbo),e(h_,II),e(II,Nbo),e(h_,jbo),e(z,Dbo),e(z,u_),e(u_,gne),e(gne,Gbo),e(u_,Obo),e(u_,qI),e(qI,Vbo),e(u_,Xbo),e(z,zbo),e(z,p_),e(p_,hne),e(hne,Qbo),e(p_,Wbo),e(p_,NI),e(NI,Hbo),e(p_,Ubo),e(z,Jbo),e(z,__),e(__,une),e(une,Ybo),e(__,Kbo),e(__,jI),e(jI,Zbo),e(__,e4o),e(z,o4o),e(z,v_),e(v_,pne),e(pne,r4o),e(v_,t4o),e(v_,DI),e(DI,a4o),e(v_,n4o),e(We,s4o),e(We,b_),e(b_,l4o),e(b_,_ne),e(_ne,i4o),e(b_,d4o),e(b_,vne),e(vne,c4o),e(We,f4o),M(F_,We,null),v(f,$ke,_),v(f,ui,_),e(ui,T_),e(T_,bne),M(CA,bne,null),e(ui,m4o),e(ui,Fne),e(Fne,g4o),v(f,kke,_),v(f,xo,_),M(wA,xo,null),e(xo,h4o),e(xo,pi),e(pi,u4o),e(pi,GI),e(GI,p4o),e(pi,_4o),e(pi,OI),e(OI,v4o),e(pi,b4o),e(xo,F4o),e(xo,AA),e(AA,T4o),e(AA,Tne),e(Tne,M4o),e(AA,E4o),e(xo,C4o),e(xo,ot),M(yA,ot,null),e(ot,w4o),e(ot,Mne),e(Mne,A4o),e(ot,y4o),e(ot,_i),e(_i,L4o),e(_i,Ene),e(Ene,x4o),e(_i,$4o),e(_i,VI),e(VI,k4o),e(_i,S4o),e(ot,R4o),M(M_,ot,null),e(xo,B4o),e(xo,He),M(LA,He,null),e(He,P4o),e(He,Cne),e(Cne,I4o),e(He,q4o),e(He,wa),e(wa,N4o),e(wa,wne),e(wne,j4o),e(wa,D4o),e(wa,Ane),e(Ane,G4o),e(wa,O4o),e(wa,yne),e(yne,V4o),e(wa,X4o),e(He,z4o),e(He,Q),e(Q,E_),e(E_,Lne),e(Lne,Q4o),e(E_,W4o),e(E_,XI),e(XI,H4o),e(E_,U4o),e(Q,J4o),e(Q,C_),e(C_,xne),e(xne,Y4o),e(C_,K4o),e(C_,zI),e(zI,Z4o),e(C_,e2o),e(Q,o2o),e(Q,w_),e(w_,$ne),e($ne,r2o),e(w_,t2o),e(w_,QI),e(QI,a2o),e(w_,n2o),e(Q,s2o),e(Q,A_),e(A_,kne),e(kne,l2o),e(A_,i2o),e(A_,WI),e(WI,d2o),e(A_,c2o),e(Q,f2o),e(Q,y_),e(y_,Sne),e(Sne,m2o),e(y_,g2o),e(y_,HI),e(HI,h2o),e(y_,u2o),e(Q,p2o),e(Q,L_),e(L_,Rne),e(Rne,_2o),e(L_,v2o),e(L_,UI),e(UI,b2o),e(L_,F2o),e(Q,T2o),e(Q,x_),e(x_,Bne),e(Bne,M2o),e(x_,E2o),e(x_,JI),e(JI,C2o),e(x_,w2o),e(Q,A2o),e(Q,$_),e($_,Pne),e(Pne,y2o),e($_,L2o),e($_,YI),e(YI,x2o),e($_,$2o),e(Q,k2o),e(Q,k_),e(k_,Ine),e(Ine,S2o),e(k_,R2o),e(k_,KI),e(KI,B2o),e(k_,P2o),e(Q,I2o),e(Q,S_),e(S_,qne),e(qne,q2o),e(S_,N2o),e(S_,ZI),e(ZI,j2o),e(S_,D2o),e(Q,G2o),e(Q,R_),e(R_,Nne),e(Nne,O2o),e(R_,V2o),e(R_,eq),e(eq,X2o),e(R_,z2o),e(Q,Q2o),e(Q,B_),e(B_,jne),e(jne,W2o),e(B_,H2o),e(B_,oq),e(oq,U2o),e(B_,J2o),e(Q,Y2o),e(Q,P_),e(P_,Dne),e(Dne,K2o),e(P_,Z2o),e(P_,rq),e(rq,eFo),e(P_,oFo),e(Q,rFo),e(Q,I_),e(I_,Gne),e(Gne,tFo),e(I_,aFo),e(I_,tq),e(tq,nFo),e(I_,sFo),e(Q,lFo),e(Q,q_),e(q_,One),e(One,iFo),e(q_,dFo),e(q_,aq),e(aq,cFo),e(q_,fFo),e(Q,mFo),e(Q,N_),e(N_,Vne),e(Vne,gFo),e(N_,hFo),e(N_,nq),e(nq,uFo),e(N_,pFo),e(Q,_Fo),e(Q,j_),e(j_,Xne),e(Xne,vFo),e(j_,bFo),e(j_,sq),e(sq,FFo),e(j_,TFo),e(Q,MFo),e(Q,D_),e(D_,zne),e(zne,EFo),e(D_,CFo),e(D_,lq),e(lq,wFo),e(D_,AFo),e(Q,yFo),e(Q,G_),e(G_,Qne),e(Qne,LFo),e(G_,xFo),e(G_,iq),e(iq,$Fo),e(G_,kFo),e(Q,SFo),e(Q,O_),e(O_,Wne),e(Wne,RFo),e(O_,BFo),e(O_,dq),e(dq,PFo),e(O_,IFo),e(Q,qFo),e(Q,V_),e(V_,Hne),e(Hne,NFo),e(V_,jFo),e(V_,cq),e(cq,DFo),e(V_,GFo),e(Q,OFo),e(Q,X_),e(X_,Une),e(Une,VFo),e(X_,XFo),e(X_,fq),e(fq,zFo),e(X_,QFo),e(Q,WFo),e(Q,z_),e(z_,Jne),e(Jne,HFo),e(z_,UFo),e(z_,mq),e(mq,JFo),e(z_,YFo),e(Q,KFo),e(Q,Q_),e(Q_,Yne),e(Yne,ZFo),e(Q_,e0o),e(Q_,gq),e(gq,o0o),e(Q_,r0o),e(Q,t0o),e(Q,W_),e(W_,Kne),e(Kne,a0o),e(W_,n0o),e(W_,hq),e(hq,s0o),e(W_,l0o),e(Q,i0o),e(Q,H_),e(H_,Zne),e(Zne,d0o),e(H_,c0o),e(H_,uq),e(uq,f0o),e(H_,m0o),e(Q,g0o),e(Q,U_),e(U_,ese),e(ese,h0o),e(U_,u0o),e(U_,pq),e(pq,p0o),e(U_,_0o),e(Q,v0o),e(Q,J_),e(J_,ose),e(ose,b0o),e(J_,F0o),e(J_,_q),e(_q,T0o),e(J_,M0o),e(Q,E0o),e(Q,Y_),e(Y_,rse),e(rse,C0o),e(Y_,w0o),e(Y_,vq),e(vq,A0o),e(Y_,y0o),e(Q,L0o),e(Q,K_),e(K_,tse),e(tse,x0o),e(K_,$0o),e(K_,bq),e(bq,k0o),e(K_,S0o),e(Q,R0o),e(Q,Z_),e(Z_,ase),e(ase,B0o),e(Z_,P0o),e(Z_,nse),e(nse,I0o),e(Z_,q0o),e(Q,N0o),e(Q,ev),e(ev,sse),e(sse,j0o),e(ev,D0o),e(ev,Fq),e(Fq,G0o),e(ev,O0o),e(Q,V0o),e(Q,ov),e(ov,lse),e(lse,X0o),e(ov,z0o),e(ov,Tq),e(Tq,Q0o),e(ov,W0o),e(Q,H0o),e(Q,rv),e(rv,ise),e(ise,U0o),e(rv,J0o),e(rv,Mq),e(Mq,Y0o),e(rv,K0o),e(Q,Z0o),e(Q,tv),e(tv,dse),e(dse,eTo),e(tv,oTo),e(tv,Eq),e(Eq,rTo),e(tv,tTo),e(He,aTo),e(He,av),e(av,nTo),e(av,cse),e(cse,sTo),e(av,lTo),e(av,fse),e(fse,iTo),e(He,dTo),M(nv,He,null),v(f,Ske,_),v(f,vi,_),e(vi,sv),e(sv,mse),M(xA,mse,null),e(vi,cTo),e(vi,gse),e(gse,fTo),v(f,Rke,_),v(f,$o,_),M($A,$o,null),e($o,mTo),e($o,bi),e(bi,gTo),e(bi,Cq),e(Cq,hTo),e(bi,uTo),e(bi,wq),e(wq,pTo),e(bi,_To),e($o,vTo),e($o,kA),e(kA,bTo),e(kA,hse),e(hse,FTo),e(kA,TTo),e($o,MTo),e($o,rt),M(SA,rt,null),e(rt,ETo),e(rt,use),e(use,CTo),e(rt,wTo),e(rt,Fi),e(Fi,ATo),e(Fi,pse),e(pse,yTo),e(Fi,LTo),e(Fi,Aq),e(Aq,xTo),e(Fi,$To),e(rt,kTo),M(lv,rt,null),e($o,STo),e($o,Ue),M(RA,Ue,null),e(Ue,RTo),e(Ue,_se),e(_se,BTo),e(Ue,PTo),e(Ue,Aa),e(Aa,ITo),e(Aa,vse),e(vse,qTo),e(Aa,NTo),e(Aa,bse),e(bse,jTo),e(Aa,DTo),e(Aa,Fse),e(Fse,GTo),e(Aa,OTo),e(Ue,VTo),e(Ue,ue),e(ue,iv),e(iv,Tse),e(Tse,XTo),e(iv,zTo),e(iv,yq),e(yq,QTo),e(iv,WTo),e(ue,HTo),e(ue,dv),e(dv,Mse),e(Mse,UTo),e(dv,JTo),e(dv,Lq),e(Lq,YTo),e(dv,KTo),e(ue,ZTo),e(ue,cv),e(cv,Ese),e(Ese,e8o),e(cv,o8o),e(cv,xq),e(xq,r8o),e(cv,t8o),e(ue,a8o),e(ue,fv),e(fv,Cse),e(Cse,n8o),e(fv,s8o),e(fv,$q),e($q,l8o),e(fv,i8o),e(ue,d8o),e(ue,mv),e(mv,wse),e(wse,c8o),e(mv,f8o),e(mv,kq),e(kq,m8o),e(mv,g8o),e(ue,h8o),e(ue,gv),e(gv,Ase),e(Ase,u8o),e(gv,p8o),e(gv,Sq),e(Sq,_8o),e(gv,v8o),e(ue,b8o),e(ue,hv),e(hv,yse),e(yse,F8o),e(hv,T8o),e(hv,Rq),e(Rq,M8o),e(hv,E8o),e(ue,C8o),e(ue,uv),e(uv,Lse),e(Lse,w8o),e(uv,A8o),e(uv,Bq),e(Bq,y8o),e(uv,L8o),e(ue,x8o),e(ue,pv),e(pv,xse),e(xse,$8o),e(pv,k8o),e(pv,Pq),e(Pq,S8o),e(pv,R8o),e(ue,B8o),e(ue,_v),e(_v,$se),e($se,P8o),e(_v,I8o),e(_v,Iq),e(Iq,q8o),e(_v,N8o),e(ue,j8o),e(ue,vv),e(vv,kse),e(kse,D8o),e(vv,G8o),e(vv,qq),e(qq,O8o),e(vv,V8o),e(ue,X8o),e(ue,bv),e(bv,Sse),e(Sse,z8o),e(bv,Q8o),e(bv,Nq),e(Nq,W8o),e(bv,H8o),e(ue,U8o),e(ue,Fv),e(Fv,Rse),e(Rse,J8o),e(Fv,Y8o),e(Fv,jq),e(jq,K8o),e(Fv,Z8o),e(ue,eMo),e(ue,Tv),e(Tv,Bse),e(Bse,oMo),e(Tv,rMo),e(Tv,Dq),e(Dq,tMo),e(Tv,aMo),e(ue,nMo),e(ue,Mv),e(Mv,Pse),e(Pse,sMo),e(Mv,lMo),e(Mv,Gq),e(Gq,iMo),e(Mv,dMo),e(ue,cMo),e(ue,Ev),e(Ev,Ise),e(Ise,fMo),e(Ev,mMo),e(Ev,Oq),e(Oq,gMo),e(Ev,hMo),e(Ue,uMo),e(Ue,Cv),e(Cv,pMo),e(Cv,qse),e(qse,_Mo),e(Cv,vMo),e(Cv,Nse),e(Nse,bMo),e(Ue,FMo),M(wv,Ue,null),v(f,Bke,_),v(f,Ti,_),e(Ti,Av),e(Av,jse),M(BA,jse,null),e(Ti,TMo),e(Ti,Dse),e(Dse,MMo),v(f,Pke,_),v(f,ko,_),M(PA,ko,null),e(ko,EMo),e(ko,Mi),e(Mi,CMo),e(Mi,Vq),e(Vq,wMo),e(Mi,AMo),e(Mi,Xq),e(Xq,yMo),e(Mi,LMo),e(ko,xMo),e(ko,IA),e(IA,$Mo),e(IA,Gse),e(Gse,kMo),e(IA,SMo),e(ko,RMo),e(ko,tt),M(qA,tt,null),e(tt,BMo),e(tt,Ose),e(Ose,PMo),e(tt,IMo),e(tt,Ei),e(Ei,qMo),e(Ei,Vse),e(Vse,NMo),e(Ei,jMo),e(Ei,zq),e(zq,DMo),e(Ei,GMo),e(tt,OMo),M(yv,tt,null),e(ko,VMo),e(ko,Je),M(NA,Je,null),e(Je,XMo),e(Je,Xse),e(Xse,zMo),e(Je,QMo),e(Je,ya),e(ya,WMo),e(ya,zse),e(zse,HMo),e(ya,UMo),e(ya,Qse),e(Qse,JMo),e(ya,YMo),e(ya,Wse),e(Wse,KMo),e(ya,ZMo),e(Je,eEo),e(Je,q),e(q,Lv),e(Lv,Hse),e(Hse,oEo),e(Lv,rEo),e(Lv,Qq),e(Qq,tEo),e(Lv,aEo),e(q,nEo),e(q,xv),e(xv,Use),e(Use,sEo),e(xv,lEo),e(xv,Wq),e(Wq,iEo),e(xv,dEo),e(q,cEo),e(q,$v),e($v,Jse),e(Jse,fEo),e($v,mEo),e($v,Hq),e(Hq,gEo),e($v,hEo),e(q,uEo),e(q,kv),e(kv,Yse),e(Yse,pEo),e(kv,_Eo),e(kv,Uq),e(Uq,vEo),e(kv,bEo),e(q,FEo),e(q,Sv),e(Sv,Kse),e(Kse,TEo),e(Sv,MEo),e(Sv,Jq),e(Jq,EEo),e(Sv,CEo),e(q,wEo),e(q,Rv),e(Rv,Zse),e(Zse,AEo),e(Rv,yEo),e(Rv,Yq),e(Yq,LEo),e(Rv,xEo),e(q,$Eo),e(q,Bv),e(Bv,ele),e(ele,kEo),e(Bv,SEo),e(Bv,Kq),e(Kq,REo),e(Bv,BEo),e(q,PEo),e(q,Pv),e(Pv,ole),e(ole,IEo),e(Pv,qEo),e(Pv,Zq),e(Zq,NEo),e(Pv,jEo),e(q,DEo),e(q,Iv),e(Iv,rle),e(rle,GEo),e(Iv,OEo),e(Iv,eN),e(eN,VEo),e(Iv,XEo),e(q,zEo),e(q,qv),e(qv,tle),e(tle,QEo),e(qv,WEo),e(qv,oN),e(oN,HEo),e(qv,UEo),e(q,JEo),e(q,Nv),e(Nv,ale),e(ale,YEo),e(Nv,KEo),e(Nv,rN),e(rN,ZEo),e(Nv,e5o),e(q,o5o),e(q,jv),e(jv,nle),e(nle,r5o),e(jv,t5o),e(jv,tN),e(tN,a5o),e(jv,n5o),e(q,s5o),e(q,Dv),e(Dv,sle),e(sle,l5o),e(Dv,i5o),e(Dv,aN),e(aN,d5o),e(Dv,c5o),e(q,f5o),e(q,Gv),e(Gv,lle),e(lle,m5o),e(Gv,g5o),e(Gv,nN),e(nN,h5o),e(Gv,u5o),e(q,p5o),e(q,Ov),e(Ov,ile),e(ile,_5o),e(Ov,v5o),e(Ov,sN),e(sN,b5o),e(Ov,F5o),e(q,T5o),e(q,Vv),e(Vv,dle),e(dle,M5o),e(Vv,E5o),e(Vv,lN),e(lN,C5o),e(Vv,w5o),e(q,A5o),e(q,Xv),e(Xv,cle),e(cle,y5o),e(Xv,L5o),e(Xv,iN),e(iN,x5o),e(Xv,$5o),e(q,k5o),e(q,zv),e(zv,fle),e(fle,S5o),e(zv,R5o),e(zv,dN),e(dN,B5o),e(zv,P5o),e(q,I5o),e(q,Qv),e(Qv,mle),e(mle,q5o),e(Qv,N5o),e(Qv,cN),e(cN,j5o),e(Qv,D5o),e(q,G5o),e(q,Wv),e(Wv,gle),e(gle,O5o),e(Wv,V5o),e(Wv,fN),e(fN,X5o),e(Wv,z5o),e(q,Q5o),e(q,Hv),e(Hv,hle),e(hle,W5o),e(Hv,H5o),e(Hv,mN),e(mN,U5o),e(Hv,J5o),e(q,Y5o),e(q,Uv),e(Uv,ule),e(ule,K5o),e(Uv,Z5o),e(Uv,gN),e(gN,eCo),e(Uv,oCo),e(q,rCo),e(q,Jv),e(Jv,ple),e(ple,tCo),e(Jv,aCo),e(Jv,hN),e(hN,nCo),e(Jv,sCo),e(q,lCo),e(q,Yv),e(Yv,_le),e(_le,iCo),e(Yv,dCo),e(Yv,uN),e(uN,cCo),e(Yv,fCo),e(q,mCo),e(q,Kv),e(Kv,vle),e(vle,gCo),e(Kv,hCo),e(Kv,pN),e(pN,uCo),e(Kv,pCo),e(q,_Co),e(q,Zv),e(Zv,ble),e(ble,vCo),e(Zv,bCo),e(Zv,_N),e(_N,FCo),e(Zv,TCo),e(q,MCo),e(q,e1),e(e1,Fle),e(Fle,ECo),e(e1,CCo),e(e1,vN),e(vN,wCo),e(e1,ACo),e(q,yCo),e(q,o1),e(o1,Tle),e(Tle,LCo),e(o1,xCo),e(o1,bN),e(bN,$Co),e(o1,kCo),e(q,SCo),e(q,r1),e(r1,Mle),e(Mle,RCo),e(r1,BCo),e(r1,FN),e(FN,PCo),e(r1,ICo),e(q,qCo),e(q,t1),e(t1,Ele),e(Ele,NCo),e(t1,jCo),e(t1,TN),e(TN,DCo),e(t1,GCo),e(q,OCo),e(q,a1),e(a1,Cle),e(Cle,VCo),e(a1,XCo),e(a1,MN),e(MN,zCo),e(a1,QCo),e(q,WCo),e(q,n1),e(n1,wle),e(wle,HCo),e(n1,UCo),e(n1,EN),e(EN,JCo),e(n1,YCo),e(q,KCo),e(q,s1),e(s1,Ale),e(Ale,ZCo),e(s1,e3o),e(s1,CN),e(CN,o3o),e(s1,r3o),e(q,t3o),e(q,l1),e(l1,yle),e(yle,a3o),e(l1,n3o),e(l1,wN),e(wN,s3o),e(l1,l3o),e(q,i3o),e(q,i1),e(i1,Lle),e(Lle,d3o),e(i1,c3o),e(i1,AN),e(AN,f3o),e(i1,m3o),e(q,g3o),e(q,d1),e(d1,xle),e(xle,h3o),e(d1,u3o),e(d1,yN),e(yN,p3o),e(d1,_3o),e(q,v3o),e(q,c1),e(c1,$le),e($le,b3o),e(c1,F3o),e(c1,LN),e(LN,T3o),e(c1,M3o),e(q,E3o),e(q,f1),e(f1,kle),e(kle,C3o),e(f1,w3o),e(f1,xN),e(xN,A3o),e(f1,y3o),e(q,L3o),e(q,m1),e(m1,Sle),e(Sle,x3o),e(m1,$3o),e(m1,$N),e($N,k3o),e(m1,S3o),e(q,R3o),e(q,g1),e(g1,Rle),e(Rle,B3o),e(g1,P3o),e(g1,kN),e(kN,I3o),e(g1,q3o),e(q,N3o),e(q,h1),e(h1,Ble),e(Ble,j3o),e(h1,D3o),e(h1,SN),e(SN,G3o),e(h1,O3o),e(q,V3o),e(q,u1),e(u1,Ple),e(Ple,X3o),e(u1,z3o),e(u1,RN),e(RN,Q3o),e(u1,W3o),e(q,H3o),e(q,p1),e(p1,Ile),e(Ile,U3o),e(p1,J3o),e(p1,BN),e(BN,Y3o),e(p1,K3o),e(q,Z3o),e(q,_1),e(_1,qle),e(qle,ewo),e(_1,owo),e(_1,PN),e(PN,rwo),e(_1,two),e(q,awo),e(q,v1),e(v1,Nle),e(Nle,nwo),e(v1,swo),e(v1,IN),e(IN,lwo),e(v1,iwo),e(q,dwo),e(q,b1),e(b1,jle),e(jle,cwo),e(b1,fwo),e(b1,qN),e(qN,mwo),e(b1,gwo),e(Je,hwo),e(Je,F1),e(F1,uwo),e(F1,Dle),e(Dle,pwo),e(F1,_wo),e(F1,Gle),e(Gle,vwo),e(Je,bwo),M(T1,Je,null),v(f,Ike,_),v(f,Ci,_),e(Ci,M1),e(M1,Ole),M(jA,Ole,null),e(Ci,Fwo),e(Ci,Vle),e(Vle,Two),v(f,qke,_),v(f,So,_),M(DA,So,null),e(So,Mwo),e(So,wi),e(wi,Ewo),e(wi,NN),e(NN,Cwo),e(wi,wwo),e(wi,jN),e(jN,Awo),e(wi,ywo),e(So,Lwo),e(So,GA),e(GA,xwo),e(GA,Xle),e(Xle,$wo),e(GA,kwo),e(So,Swo),e(So,at),M(OA,at,null),e(at,Rwo),e(at,zle),e(zle,Bwo),e(at,Pwo),e(at,Ai),e(Ai,Iwo),e(Ai,Qle),e(Qle,qwo),e(Ai,Nwo),e(Ai,DN),e(DN,jwo),e(Ai,Dwo),e(at,Gwo),M(E1,at,null),e(So,Owo),e(So,Ye),M(VA,Ye,null),e(Ye,Vwo),e(Ye,Wle),e(Wle,Xwo),e(Ye,zwo),e(Ye,La),e(La,Qwo),e(La,Hle),e(Hle,Wwo),e(La,Hwo),e(La,Ule),e(Ule,Uwo),e(La,Jwo),e(La,Jle),e(Jle,Ywo),e(La,Kwo),e(Ye,Zwo),e(Ye,Y),e(Y,C1),e(C1,Yle),e(Yle,eAo),e(C1,oAo),e(C1,GN),e(GN,rAo),e(C1,tAo),e(Y,aAo),e(Y,w1),e(w1,Kle),e(Kle,nAo),e(w1,sAo),e(w1,ON),e(ON,lAo),e(w1,iAo),e(Y,dAo),e(Y,A1),e(A1,Zle),e(Zle,cAo),e(A1,fAo),e(A1,VN),e(VN,mAo),e(A1,gAo),e(Y,hAo),e(Y,y1),e(y1,eie),e(eie,uAo),e(y1,pAo),e(y1,XN),e(XN,_Ao),e(y1,vAo),e(Y,bAo),e(Y,L1),e(L1,oie),e(oie,FAo),e(L1,TAo),e(L1,zN),e(zN,MAo),e(L1,EAo),e(Y,CAo),e(Y,x1),e(x1,rie),e(rie,wAo),e(x1,AAo),e(x1,QN),e(QN,yAo),e(x1,LAo),e(Y,xAo),e(Y,$1),e($1,tie),e(tie,$Ao),e($1,kAo),e($1,WN),e(WN,SAo),e($1,RAo),e(Y,BAo),e(Y,k1),e(k1,aie),e(aie,PAo),e(k1,IAo),e(k1,HN),e(HN,qAo),e(k1,NAo),e(Y,jAo),e(Y,S1),e(S1,nie),e(nie,DAo),e(S1,GAo),e(S1,UN),e(UN,OAo),e(S1,VAo),e(Y,XAo),e(Y,R1),e(R1,sie),e(sie,zAo),e(R1,QAo),e(R1,JN),e(JN,WAo),e(R1,HAo),e(Y,UAo),e(Y,B1),e(B1,lie),e(lie,JAo),e(B1,YAo),e(B1,YN),e(YN,KAo),e(B1,ZAo),e(Y,e6o),e(Y,P1),e(P1,iie),e(iie,o6o),e(P1,r6o),e(P1,KN),e(KN,t6o),e(P1,a6o),e(Y,n6o),e(Y,I1),e(I1,die),e(die,s6o),e(I1,l6o),e(I1,ZN),e(ZN,i6o),e(I1,d6o),e(Y,c6o),e(Y,q1),e(q1,cie),e(cie,f6o),e(q1,m6o),e(q1,ej),e(ej,g6o),e(q1,h6o),e(Y,u6o),e(Y,N1),e(N1,fie),e(fie,p6o),e(N1,_6o),e(N1,oj),e(oj,v6o),e(N1,b6o),e(Y,F6o),e(Y,j1),e(j1,mie),e(mie,T6o),e(j1,M6o),e(j1,rj),e(rj,E6o),e(j1,C6o),e(Y,w6o),e(Y,D1),e(D1,gie),e(gie,A6o),e(D1,y6o),e(D1,tj),e(tj,L6o),e(D1,x6o),e(Y,$6o),e(Y,G1),e(G1,hie),e(hie,k6o),e(G1,S6o),e(G1,aj),e(aj,R6o),e(G1,B6o),e(Y,P6o),e(Y,O1),e(O1,uie),e(uie,I6o),e(O1,q6o),e(O1,nj),e(nj,N6o),e(O1,j6o),e(Y,D6o),e(Y,V1),e(V1,pie),e(pie,G6o),e(V1,O6o),e(V1,sj),e(sj,V6o),e(V1,X6o),e(Y,z6o),e(Y,X1),e(X1,_ie),e(_ie,Q6o),e(X1,W6o),e(X1,lj),e(lj,H6o),e(X1,U6o),e(Y,J6o),e(Y,z1),e(z1,vie),e(vie,Y6o),e(z1,K6o),e(z1,ij),e(ij,Z6o),e(z1,eyo),e(Y,oyo),e(Y,Q1),e(Q1,bie),e(bie,ryo),e(Q1,tyo),e(Q1,dj),e(dj,ayo),e(Q1,nyo),e(Y,syo),e(Y,W1),e(W1,Fie),e(Fie,lyo),e(W1,iyo),e(W1,cj),e(cj,dyo),e(W1,cyo),e(Y,fyo),e(Y,H1),e(H1,Tie),e(Tie,myo),e(H1,gyo),e(H1,fj),e(fj,hyo),e(H1,uyo),e(Y,pyo),e(Y,U1),e(U1,Mie),e(Mie,_yo),e(U1,vyo),e(U1,mj),e(mj,byo),e(U1,Fyo),e(Y,Tyo),e(Y,J1),e(J1,Eie),e(Eie,Myo),e(J1,Eyo),e(J1,gj),e(gj,Cyo),e(J1,wyo),e(Y,Ayo),e(Y,Y1),e(Y1,Cie),e(Cie,yyo),e(Y1,Lyo),e(Y1,hj),e(hj,xyo),e(Y1,$yo),e(Ye,kyo),e(Ye,K1),e(K1,Syo),e(K1,wie),e(wie,Ryo),e(K1,Byo),e(K1,Aie),e(Aie,Pyo),e(Ye,Iyo),M(Z1,Ye,null),v(f,Nke,_),v(f,yi,_),e(yi,eb),e(eb,yie),M(XA,yie,null),e(yi,qyo),e(yi,Lie),e(Lie,Nyo),v(f,jke,_),v(f,Ro,_),M(zA,Ro,null),e(Ro,jyo),e(Ro,Li),e(Li,Dyo),e(Li,uj),e(uj,Gyo),e(Li,Oyo),e(Li,pj),e(pj,Vyo),e(Li,Xyo),e(Ro,zyo),e(Ro,QA),e(QA,Qyo),e(QA,xie),e(xie,Wyo),e(QA,Hyo),e(Ro,Uyo),e(Ro,nt),M(WA,nt,null),e(nt,Jyo),e(nt,$ie),e($ie,Yyo),e(nt,Kyo),e(nt,xi),e(xi,Zyo),e(xi,kie),e(kie,eLo),e(xi,oLo),e(xi,_j),e(_j,rLo),e(xi,tLo),e(nt,aLo),M(ob,nt,null),e(Ro,nLo),e(Ro,Ke),M(HA,Ke,null),e(Ke,sLo),e(Ke,Sie),e(Sie,lLo),e(Ke,iLo),e(Ke,xa),e(xa,dLo),e(xa,Rie),e(Rie,cLo),e(xa,fLo),e(xa,Bie),e(Bie,mLo),e(xa,gLo),e(xa,Pie),e(Pie,hLo),e(xa,uLo),e(Ke,pLo),e(Ke,Wr),e(Wr,rb),e(rb,Iie),e(Iie,_Lo),e(rb,vLo),e(rb,vj),e(vj,bLo),e(rb,FLo),e(Wr,TLo),e(Wr,tb),e(tb,qie),e(qie,MLo),e(tb,ELo),e(tb,bj),e(bj,CLo),e(tb,wLo),e(Wr,ALo),e(Wr,ab),e(ab,Nie),e(Nie,yLo),e(ab,LLo),e(ab,Fj),e(Fj,xLo),e(ab,$Lo),e(Wr,kLo),e(Wr,nb),e(nb,jie),e(jie,SLo),e(nb,RLo),e(nb,Tj),e(Tj,BLo),e(nb,PLo),e(Wr,ILo),e(Wr,sb),e(sb,Die),e(Die,qLo),e(sb,NLo),e(sb,Mj),e(Mj,jLo),e(sb,DLo),e(Ke,GLo),e(Ke,lb),e(lb,OLo),e(lb,Gie),e(Gie,VLo),e(lb,XLo),e(lb,Oie),e(Oie,zLo),e(Ke,QLo),M(ib,Ke,null),v(f,Dke,_),v(f,$i,_),e($i,db),e(db,Vie),M(UA,Vie,null),e($i,WLo),e($i,Xie),e(Xie,HLo),v(f,Gke,_),v(f,Bo,_),M(JA,Bo,null),e(Bo,ULo),e(Bo,ki),e(ki,JLo),e(ki,Ej),e(Ej,YLo),e(ki,KLo),e(ki,Cj),e(Cj,ZLo),e(ki,exo),e(Bo,oxo),e(Bo,YA),e(YA,rxo),e(YA,zie),e(zie,txo),e(YA,axo),e(Bo,nxo),e(Bo,st),M(KA,st,null),e(st,sxo),e(st,Qie),e(Qie,lxo),e(st,ixo),e(st,Si),e(Si,dxo),e(Si,Wie),e(Wie,cxo),e(Si,fxo),e(Si,wj),e(wj,mxo),e(Si,gxo),e(st,hxo),M(cb,st,null),e(Bo,uxo),e(Bo,Ze),M(ZA,Ze,null),e(Ze,pxo),e(Ze,Hie),e(Hie,_xo),e(Ze,vxo),e(Ze,$a),e($a,bxo),e($a,Uie),e(Uie,Fxo),e($a,Txo),e($a,Jie),e(Jie,Mxo),e($a,Exo),e($a,Yie),e(Yie,Cxo),e($a,wxo),e(Ze,Axo),e(Ze,U),e(U,fb),e(fb,Kie),e(Kie,yxo),e(fb,Lxo),e(fb,Aj),e(Aj,xxo),e(fb,$xo),e(U,kxo),e(U,mb),e(mb,Zie),e(Zie,Sxo),e(mb,Rxo),e(mb,yj),e(yj,Bxo),e(mb,Pxo),e(U,Ixo),e(U,gb),e(gb,ede),e(ede,qxo),e(gb,Nxo),e(gb,Lj),e(Lj,jxo),e(gb,Dxo),e(U,Gxo),e(U,hb),e(hb,ode),e(ode,Oxo),e(hb,Vxo),e(hb,xj),e(xj,Xxo),e(hb,zxo),e(U,Qxo),e(U,ub),e(ub,rde),e(rde,Wxo),e(ub,Hxo),e(ub,$j),e($j,Uxo),e(ub,Jxo),e(U,Yxo),e(U,pb),e(pb,tde),e(tde,Kxo),e(pb,Zxo),e(pb,kj),e(kj,e7o),e(pb,o7o),e(U,r7o),e(U,_b),e(_b,ade),e(ade,t7o),e(_b,a7o),e(_b,Sj),e(Sj,n7o),e(_b,s7o),e(U,l7o),e(U,vb),e(vb,nde),e(nde,i7o),e(vb,d7o),e(vb,Rj),e(Rj,c7o),e(vb,f7o),e(U,m7o),e(U,bb),e(bb,sde),e(sde,g7o),e(bb,h7o),e(bb,Bj),e(Bj,u7o),e(bb,p7o),e(U,_7o),e(U,Fb),e(Fb,lde),e(lde,v7o),e(Fb,b7o),e(Fb,Pj),e(Pj,F7o),e(Fb,T7o),e(U,M7o),e(U,Tb),e(Tb,ide),e(ide,E7o),e(Tb,C7o),e(Tb,Ij),e(Ij,w7o),e(Tb,A7o),e(U,y7o),e(U,Mb),e(Mb,dde),e(dde,L7o),e(Mb,x7o),e(Mb,qj),e(qj,$7o),e(Mb,k7o),e(U,S7o),e(U,Eb),e(Eb,cde),e(cde,R7o),e(Eb,B7o),e(Eb,Nj),e(Nj,P7o),e(Eb,I7o),e(U,q7o),e(U,Cb),e(Cb,fde),e(fde,N7o),e(Cb,j7o),e(Cb,jj),e(jj,D7o),e(Cb,G7o),e(U,O7o),e(U,wb),e(wb,mde),e(mde,V7o),e(wb,X7o),e(wb,Dj),e(Dj,z7o),e(wb,Q7o),e(U,W7o),e(U,Ab),e(Ab,gde),e(gde,H7o),e(Ab,U7o),e(Ab,Gj),e(Gj,J7o),e(Ab,Y7o),e(U,K7o),e(U,yb),e(yb,hde),e(hde,Z7o),e(yb,e9o),e(yb,Oj),e(Oj,o9o),e(yb,r9o),e(U,t9o),e(U,Lb),e(Lb,ude),e(ude,a9o),e(Lb,n9o),e(Lb,Vj),e(Vj,s9o),e(Lb,l9o),e(U,i9o),e(U,xb),e(xb,pde),e(pde,d9o),e(xb,c9o),e(xb,Xj),e(Xj,f9o),e(xb,m9o),e(U,g9o),e(U,$b),e($b,_de),e(_de,h9o),e($b,u9o),e($b,zj),e(zj,p9o),e($b,_9o),e(U,v9o),e(U,kb),e(kb,vde),e(vde,b9o),e(kb,F9o),e(kb,Qj),e(Qj,T9o),e(kb,M9o),e(U,E9o),e(U,Sb),e(Sb,bde),e(bde,C9o),e(Sb,w9o),e(Sb,Wj),e(Wj,A9o),e(Sb,y9o),e(U,L9o),e(U,Rb),e(Rb,Fde),e(Fde,x9o),e(Rb,$9o),e(Rb,Hj),e(Hj,k9o),e(Rb,S9o),e(U,R9o),e(U,Bb),e(Bb,Tde),e(Tde,B9o),e(Bb,P9o),e(Bb,Uj),e(Uj,I9o),e(Bb,q9o),e(U,N9o),e(U,Pb),e(Pb,Mde),e(Mde,j9o),e(Pb,D9o),e(Pb,Jj),e(Jj,G9o),e(Pb,O9o),e(U,V9o),e(U,Ib),e(Ib,Ede),e(Ede,X9o),e(Ib,z9o),e(Ib,Yj),e(Yj,Q9o),e(Ib,W9o),e(U,H9o),e(U,qb),e(qb,Cde),e(Cde,U9o),e(qb,J9o),e(qb,Kj),e(Kj,Y9o),e(qb,K9o),e(U,Z9o),e(U,Nb),e(Nb,wde),e(wde,e$o),e(Nb,o$o),e(Nb,Zj),e(Zj,r$o),e(Nb,t$o),e(U,a$o),e(U,jb),e(jb,Ade),e(Ade,n$o),e(jb,s$o),e(jb,eD),e(eD,l$o),e(jb,i$o),e(U,d$o),e(U,Db),e(Db,yde),e(yde,c$o),e(Db,f$o),e(Db,oD),e(oD,m$o),e(Db,g$o),e(U,h$o),e(U,Gb),e(Gb,Lde),e(Lde,u$o),e(Gb,p$o),e(Gb,rD),e(rD,_$o),e(Gb,v$o),e(U,b$o),e(U,Ob),e(Ob,xde),e(xde,F$o),e(Ob,T$o),e(Ob,tD),e(tD,M$o),e(Ob,E$o),e(U,C$o),e(U,Vb),e(Vb,$de),e($de,w$o),e(Vb,A$o),e(Vb,aD),e(aD,y$o),e(Vb,L$o),e(Ze,x$o),e(Ze,Xb),e(Xb,$$o),e(Xb,kde),e(kde,k$o),e(Xb,S$o),e(Xb,Sde),e(Sde,R$o),e(Ze,B$o),M(zb,Ze,null),v(f,Oke,_),v(f,Ri,_),e(Ri,Qb),e(Qb,Rde),M(e6,Rde,null),e(Ri,P$o),e(Ri,Bde),e(Bde,I$o),v(f,Vke,_),v(f,Po,_),M(o6,Po,null),e(Po,q$o),e(Po,Bi),e(Bi,N$o),e(Bi,nD),e(nD,j$o),e(Bi,D$o),e(Bi,sD),e(sD,G$o),e(Bi,O$o),e(Po,V$o),e(Po,r6),e(r6,X$o),e(r6,Pde),e(Pde,z$o),e(r6,Q$o),e(Po,W$o),e(Po,lt),M(t6,lt,null),e(lt,H$o),e(lt,Ide),e(Ide,U$o),e(lt,J$o),e(lt,Pi),e(Pi,Y$o),e(Pi,qde),e(qde,K$o),e(Pi,Z$o),e(Pi,lD),e(lD,eko),e(Pi,oko),e(lt,rko),M(Wb,lt,null),e(Po,tko),e(Po,eo),M(a6,eo,null),e(eo,ako),e(eo,Nde),e(Nde,nko),e(eo,sko),e(eo,ka),e(ka,lko),e(ka,jde),e(jde,iko),e(ka,dko),e(ka,Dde),e(Dde,cko),e(ka,fko),e(ka,Gde),e(Gde,mko),e(ka,gko),e(eo,hko),e(eo,O),e(O,Hb),e(Hb,Ode),e(Ode,uko),e(Hb,pko),e(Hb,iD),e(iD,_ko),e(Hb,vko),e(O,bko),e(O,Ub),e(Ub,Vde),e(Vde,Fko),e(Ub,Tko),e(Ub,dD),e(dD,Mko),e(Ub,Eko),e(O,Cko),e(O,Jb),e(Jb,Xde),e(Xde,wko),e(Jb,Ako),e(Jb,cD),e(cD,yko),e(Jb,Lko),e(O,xko),e(O,Yb),e(Yb,zde),e(zde,$ko),e(Yb,kko),e(Yb,fD),e(fD,Sko),e(Yb,Rko),e(O,Bko),e(O,Kb),e(Kb,Qde),e(Qde,Pko),e(Kb,Iko),e(Kb,mD),e(mD,qko),e(Kb,Nko),e(O,jko),e(O,Zb),e(Zb,Wde),e(Wde,Dko),e(Zb,Gko),e(Zb,gD),e(gD,Oko),e(Zb,Vko),e(O,Xko),e(O,e4),e(e4,Hde),e(Hde,zko),e(e4,Qko),e(e4,hD),e(hD,Wko),e(e4,Hko),e(O,Uko),e(O,o4),e(o4,Ude),e(Ude,Jko),e(o4,Yko),e(o4,uD),e(uD,Kko),e(o4,Zko),e(O,eSo),e(O,r4),e(r4,Jde),e(Jde,oSo),e(r4,rSo),e(r4,pD),e(pD,tSo),e(r4,aSo),e(O,nSo),e(O,t4),e(t4,Yde),e(Yde,sSo),e(t4,lSo),e(t4,_D),e(_D,iSo),e(t4,dSo),e(O,cSo),e(O,a4),e(a4,Kde),e(Kde,fSo),e(a4,mSo),e(a4,vD),e(vD,gSo),e(a4,hSo),e(O,uSo),e(O,n4),e(n4,Zde),e(Zde,pSo),e(n4,_So),e(n4,bD),e(bD,vSo),e(n4,bSo),e(O,FSo),e(O,s4),e(s4,ece),e(ece,TSo),e(s4,MSo),e(s4,FD),e(FD,ESo),e(s4,CSo),e(O,wSo),e(O,l4),e(l4,oce),e(oce,ASo),e(l4,ySo),e(l4,TD),e(TD,LSo),e(l4,xSo),e(O,$So),e(O,i4),e(i4,rce),e(rce,kSo),e(i4,SSo),e(i4,MD),e(MD,RSo),e(i4,BSo),e(O,PSo),e(O,d4),e(d4,tce),e(tce,ISo),e(d4,qSo),e(d4,ED),e(ED,NSo),e(d4,jSo),e(O,DSo),e(O,c4),e(c4,ace),e(ace,GSo),e(c4,OSo),e(c4,CD),e(CD,VSo),e(c4,XSo),e(O,zSo),e(O,f4),e(f4,nce),e(nce,QSo),e(f4,WSo),e(f4,wD),e(wD,HSo),e(f4,USo),e(O,JSo),e(O,m4),e(m4,sce),e(sce,YSo),e(m4,KSo),e(m4,AD),e(AD,ZSo),e(m4,eRo),e(O,oRo),e(O,g4),e(g4,lce),e(lce,rRo),e(g4,tRo),e(g4,yD),e(yD,aRo),e(g4,nRo),e(O,sRo),e(O,h4),e(h4,ice),e(ice,lRo),e(h4,iRo),e(h4,LD),e(LD,dRo),e(h4,cRo),e(O,fRo),e(O,u4),e(u4,dce),e(dce,mRo),e(u4,gRo),e(u4,xD),e(xD,hRo),e(u4,uRo),e(O,pRo),e(O,p4),e(p4,cce),e(cce,_Ro),e(p4,vRo),e(p4,$D),e($D,bRo),e(p4,FRo),e(O,TRo),e(O,_4),e(_4,fce),e(fce,MRo),e(_4,ERo),e(_4,kD),e(kD,CRo),e(_4,wRo),e(O,ARo),e(O,v4),e(v4,mce),e(mce,yRo),e(v4,LRo),e(v4,SD),e(SD,xRo),e(v4,$Ro),e(O,kRo),e(O,b4),e(b4,gce),e(gce,SRo),e(b4,RRo),e(b4,RD),e(RD,BRo),e(b4,PRo),e(O,IRo),e(O,F4),e(F4,hce),e(hce,qRo),e(F4,NRo),e(F4,BD),e(BD,jRo),e(F4,DRo),e(O,GRo),e(O,T4),e(T4,uce),e(uce,ORo),e(T4,VRo),e(T4,PD),e(PD,XRo),e(T4,zRo),e(O,QRo),e(O,M4),e(M4,pce),e(pce,WRo),e(M4,HRo),e(M4,ID),e(ID,URo),e(M4,JRo),e(O,YRo),e(O,E4),e(E4,_ce),e(_ce,KRo),e(E4,ZRo),e(E4,qD),e(qD,eBo),e(E4,oBo),e(O,rBo),e(O,C4),e(C4,vce),e(vce,tBo),e(C4,aBo),e(C4,ND),e(ND,nBo),e(C4,sBo),e(O,lBo),e(O,w4),e(w4,bce),e(bce,iBo),e(w4,dBo),e(w4,jD),e(jD,cBo),e(w4,fBo),e(O,mBo),e(O,A4),e(A4,Fce),e(Fce,gBo),e(A4,hBo),e(A4,DD),e(DD,uBo),e(A4,pBo),e(O,_Bo),e(O,y4),e(y4,Tce),e(Tce,vBo),e(y4,bBo),e(y4,GD),e(GD,FBo),e(y4,TBo),e(O,MBo),e(O,L4),e(L4,Mce),e(Mce,EBo),e(L4,CBo),e(L4,OD),e(OD,wBo),e(L4,ABo),e(O,yBo),e(O,x4),e(x4,Ece),e(Ece,LBo),e(x4,xBo),e(x4,VD),e(VD,$Bo),e(x4,kBo),e(O,SBo),e(O,$4),e($4,Cce),e(Cce,RBo),e($4,BBo),e($4,XD),e(XD,PBo),e($4,IBo),e(O,qBo),e(O,k4),e(k4,wce),e(wce,NBo),e(k4,jBo),e(k4,zD),e(zD,DBo),e(k4,GBo),e(O,OBo),e(O,S4),e(S4,Ace),e(Ace,VBo),e(S4,XBo),e(S4,QD),e(QD,zBo),e(S4,QBo),e(eo,WBo),e(eo,R4),e(R4,HBo),e(R4,yce),e(yce,UBo),e(R4,JBo),e(R4,Lce),e(Lce,YBo),e(eo,KBo),M(B4,eo,null),v(f,Xke,_),v(f,Ii,_),e(Ii,P4),e(P4,xce),M(n6,xce,null),e(Ii,ZBo),e(Ii,$ce),e($ce,ePo),v(f,zke,_),v(f,Io,_),M(s6,Io,null),e(Io,oPo),e(Io,qi),e(qi,rPo),e(qi,WD),e(WD,tPo),e(qi,aPo),e(qi,HD),e(HD,nPo),e(qi,sPo),e(Io,lPo),e(Io,l6),e(l6,iPo),e(l6,kce),e(kce,dPo),e(l6,cPo),e(Io,fPo),e(Io,it),M(i6,it,null),e(it,mPo),e(it,Sce),e(Sce,gPo),e(it,hPo),e(it,Ni),e(Ni,uPo),e(Ni,Rce),e(Rce,pPo),e(Ni,_Po),e(Ni,UD),e(UD,vPo),e(Ni,bPo),e(it,FPo),M(I4,it,null),e(Io,TPo),e(Io,oo),M(d6,oo,null),e(oo,MPo),e(oo,Bce),e(Bce,EPo),e(oo,CPo),e(oo,Sa),e(Sa,wPo),e(Sa,Pce),e(Pce,APo),e(Sa,yPo),e(Sa,Ice),e(Ice,LPo),e(Sa,xPo),e(Sa,qce),e(qce,$Po),e(Sa,kPo),e(oo,SPo),e(oo,Nce),e(Nce,q4),e(q4,jce),e(jce,RPo),e(q4,BPo),e(q4,JD),e(JD,PPo),e(q4,IPo),e(oo,qPo),e(oo,N4),e(N4,NPo),e(N4,Dce),e(Dce,jPo),e(N4,DPo),e(N4,Gce),e(Gce,GPo),e(oo,OPo),M(j4,oo,null),v(f,Qke,_),v(f,ji,_),e(ji,D4),e(D4,Oce),M(c6,Oce,null),e(ji,VPo),e(ji,Vce),e(Vce,XPo),v(f,Wke,_),v(f,qo,_),M(f6,qo,null),e(qo,zPo),e(qo,Di),e(Di,QPo),e(Di,YD),e(YD,WPo),e(Di,HPo),e(Di,KD),e(KD,UPo),e(Di,JPo),e(qo,YPo),e(qo,m6),e(m6,KPo),e(m6,Xce),e(Xce,ZPo),e(m6,eIo),e(qo,oIo),e(qo,dt),M(g6,dt,null),e(dt,rIo),e(dt,zce),e(zce,tIo),e(dt,aIo),e(dt,Gi),e(Gi,nIo),e(Gi,Qce),e(Qce,sIo),e(Gi,lIo),e(Gi,ZD),e(ZD,iIo),e(Gi,dIo),e(dt,cIo),M(G4,dt,null),e(qo,fIo),e(qo,ro),M(h6,ro,null),e(ro,mIo),e(ro,Wce),e(Wce,gIo),e(ro,hIo),e(ro,Ra),e(Ra,uIo),e(Ra,Hce),e(Hce,pIo),e(Ra,_Io),e(Ra,Uce),e(Uce,vIo),e(Ra,bIo),e(Ra,Jce),e(Jce,FIo),e(Ra,TIo),e(ro,MIo),e(ro,Fe),e(Fe,O4),e(O4,Yce),e(Yce,EIo),e(O4,CIo),e(O4,eG),e(eG,wIo),e(O4,AIo),e(Fe,yIo),e(Fe,V4),e(V4,Kce),e(Kce,LIo),e(V4,xIo),e(V4,oG),e(oG,$Io),e(V4,kIo),e(Fe,SIo),e(Fe,bs),e(bs,Zce),e(Zce,RIo),e(bs,BIo),e(bs,rG),e(rG,PIo),e(bs,IIo),e(bs,tG),e(tG,qIo),e(bs,NIo),e(Fe,jIo),e(Fe,X4),e(X4,efe),e(efe,DIo),e(X4,GIo),e(X4,aG),e(aG,OIo),e(X4,VIo),e(Fe,XIo),e(Fe,ct),e(ct,ofe),e(ofe,zIo),e(ct,QIo),e(ct,nG),e(nG,WIo),e(ct,HIo),e(ct,sG),e(sG,UIo),e(ct,JIo),e(ct,lG),e(lG,YIo),e(ct,KIo),e(Fe,ZIo),e(Fe,z4),e(z4,rfe),e(rfe,eqo),e(z4,oqo),e(z4,iG),e(iG,rqo),e(z4,tqo),e(Fe,aqo),e(Fe,Q4),e(Q4,tfe),e(tfe,nqo),e(Q4,sqo),e(Q4,dG),e(dG,lqo),e(Q4,iqo),e(Fe,dqo),e(Fe,W4),e(W4,afe),e(afe,cqo),e(W4,fqo),e(W4,cG),e(cG,mqo),e(W4,gqo),e(Fe,hqo),e(Fe,H4),e(H4,nfe),e(nfe,uqo),e(H4,pqo),e(H4,fG),e(fG,_qo),e(H4,vqo),e(Fe,bqo),e(Fe,U4),e(U4,sfe),e(sfe,Fqo),e(U4,Tqo),e(U4,mG),e(mG,Mqo),e(U4,Eqo),e(Fe,Cqo),e(Fe,J4),e(J4,lfe),e(lfe,wqo),e(J4,Aqo),e(J4,gG),e(gG,yqo),e(J4,Lqo),e(ro,xqo),e(ro,Y4),e(Y4,$qo),e(Y4,ife),e(ife,kqo),e(Y4,Sqo),e(Y4,dfe),e(dfe,Rqo),e(ro,Bqo),M(K4,ro,null),v(f,Hke,_),v(f,Oi,_),e(Oi,Z4),e(Z4,cfe),M(u6,cfe,null),e(Oi,Pqo),e(Oi,ffe),e(ffe,Iqo),v(f,Uke,_),v(f,No,_),M(p6,No,null),e(No,qqo),e(No,Vi),e(Vi,Nqo),e(Vi,hG),e(hG,jqo),e(Vi,Dqo),e(Vi,uG),e(uG,Gqo),e(Vi,Oqo),e(No,Vqo),e(No,_6),e(_6,Xqo),e(_6,mfe),e(mfe,zqo),e(_6,Qqo),e(No,Wqo),e(No,ft),M(v6,ft,null),e(ft,Hqo),e(ft,gfe),e(gfe,Uqo),e(ft,Jqo),e(ft,Xi),e(Xi,Yqo),e(Xi,hfe),e(hfe,Kqo),e(Xi,Zqo),e(Xi,pG),e(pG,eNo),e(Xi,oNo),e(ft,rNo),M(e2,ft,null),e(No,tNo),e(No,to),M(b6,to,null),e(to,aNo),e(to,ufe),e(ufe,nNo),e(to,sNo),e(to,Ba),e(Ba,lNo),e(Ba,pfe),e(pfe,iNo),e(Ba,dNo),e(Ba,_fe),e(_fe,cNo),e(Ba,fNo),e(Ba,vfe),e(vfe,mNo),e(Ba,gNo),e(to,hNo),e(to,bfe),e(bfe,o2),e(o2,Ffe),e(Ffe,uNo),e(o2,pNo),e(o2,_G),e(_G,_No),e(o2,vNo),e(to,bNo),e(to,r2),e(r2,FNo),e(r2,Tfe),e(Tfe,TNo),e(r2,MNo),e(r2,Mfe),e(Mfe,ENo),e(to,CNo),M(t2,to,null),v(f,Jke,_),v(f,zi,_),e(zi,a2),e(a2,Efe),M(F6,Efe,null),e(zi,wNo),e(zi,Cfe),e(Cfe,ANo),v(f,Yke,_),v(f,jo,_),M(T6,jo,null),e(jo,yNo),e(jo,Qi),e(Qi,LNo),e(Qi,vG),e(vG,xNo),e(Qi,$No),e(Qi,bG),e(bG,kNo),e(Qi,SNo),e(jo,RNo),e(jo,M6),e(M6,BNo),e(M6,wfe),e(wfe,PNo),e(M6,INo),e(jo,qNo),e(jo,mt),M(E6,mt,null),e(mt,NNo),e(mt,Afe),e(Afe,jNo),e(mt,DNo),e(mt,Wi),e(Wi,GNo),e(Wi,yfe),e(yfe,ONo),e(Wi,VNo),e(Wi,FG),e(FG,XNo),e(Wi,zNo),e(mt,QNo),M(n2,mt,null),e(jo,WNo),e(jo,ao),M(C6,ao,null),e(ao,HNo),e(ao,Lfe),e(Lfe,UNo),e(ao,JNo),e(ao,Pa),e(Pa,YNo),e(Pa,xfe),e(xfe,KNo),e(Pa,ZNo),e(Pa,$fe),e($fe,ejo),e(Pa,ojo),e(Pa,kfe),e(kfe,rjo),e(Pa,tjo),e(ao,ajo),e(ao,Ie),e(Ie,s2),e(s2,Sfe),e(Sfe,njo),e(s2,sjo),e(s2,TG),e(TG,ljo),e(s2,ijo),e(Ie,djo),e(Ie,l2),e(l2,Rfe),e(Rfe,cjo),e(l2,fjo),e(l2,MG),e(MG,mjo),e(l2,gjo),e(Ie,hjo),e(Ie,i2),e(i2,Bfe),e(Bfe,ujo),e(i2,pjo),e(i2,EG),e(EG,_jo),e(i2,vjo),e(Ie,bjo),e(Ie,d2),e(d2,Pfe),e(Pfe,Fjo),e(d2,Tjo),e(d2,CG),e(CG,Mjo),e(d2,Ejo),e(Ie,Cjo),e(Ie,c2),e(c2,Ife),e(Ife,wjo),e(c2,Ajo),e(c2,wG),e(wG,yjo),e(c2,Ljo),e(Ie,xjo),e(Ie,f2),e(f2,qfe),e(qfe,$jo),e(f2,kjo),e(f2,AG),e(AG,Sjo),e(f2,Rjo),e(Ie,Bjo),e(Ie,m2),e(m2,Nfe),e(Nfe,Pjo),e(m2,Ijo),e(m2,yG),e(yG,qjo),e(m2,Njo),e(Ie,jjo),e(Ie,g2),e(g2,jfe),e(jfe,Djo),e(g2,Gjo),e(g2,LG),e(LG,Ojo),e(g2,Vjo),e(ao,Xjo),e(ao,h2),e(h2,zjo),e(h2,Dfe),e(Dfe,Qjo),e(h2,Wjo),e(h2,Gfe),e(Gfe,Hjo),e(ao,Ujo),M(u2,ao,null),v(f,Kke,_),v(f,Hi,_),e(Hi,p2),e(p2,Ofe),M(w6,Ofe,null),e(Hi,Jjo),e(Hi,Vfe),e(Vfe,Yjo),v(f,Zke,_),v(f,Do,_),M(A6,Do,null),e(Do,Kjo),e(Do,Ui),e(Ui,Zjo),e(Ui,xG),e(xG,eDo),e(Ui,oDo),e(Ui,$G),e($G,rDo),e(Ui,tDo),e(Do,aDo),e(Do,y6),e(y6,nDo),e(y6,Xfe),e(Xfe,sDo),e(y6,lDo),e(Do,iDo),e(Do,gt),M(L6,gt,null),e(gt,dDo),e(gt,zfe),e(zfe,cDo),e(gt,fDo),e(gt,Ji),e(Ji,mDo),e(Ji,Qfe),e(Qfe,gDo),e(Ji,hDo),e(Ji,kG),e(kG,uDo),e(Ji,pDo),e(gt,_Do),M(_2,gt,null),e(Do,vDo),e(Do,no),M(x6,no,null),e(no,bDo),e(no,Wfe),e(Wfe,FDo),e(no,TDo),e(no,Ia),e(Ia,MDo),e(Ia,Hfe),e(Hfe,EDo),e(Ia,CDo),e(Ia,Ufe),e(Ufe,wDo),e(Ia,ADo),e(Ia,Jfe),e(Jfe,yDo),e(Ia,LDo),e(no,xDo),e(no,qa),e(qa,v2),e(v2,Yfe),e(Yfe,$Do),e(v2,kDo),e(v2,SG),e(SG,SDo),e(v2,RDo),e(qa,BDo),e(qa,b2),e(b2,Kfe),e(Kfe,PDo),e(b2,IDo),e(b2,RG),e(RG,qDo),e(b2,NDo),e(qa,jDo),e(qa,F2),e(F2,Zfe),e(Zfe,DDo),e(F2,GDo),e(F2,BG),e(BG,ODo),e(F2,VDo),e(qa,XDo),e(qa,T2),e(T2,eme),e(eme,zDo),e(T2,QDo),e(T2,PG),e(PG,WDo),e(T2,HDo),e(no,UDo),e(no,M2),e(M2,JDo),e(M2,ome),e(ome,YDo),e(M2,KDo),e(M2,rme),e(rme,ZDo),e(no,eGo),M(E2,no,null),v(f,eSe,_),v(f,Yi,_),e(Yi,C2),e(C2,tme),M($6,tme,null),e(Yi,oGo),e(Yi,ame),e(ame,rGo),v(f,oSe,_),v(f,Go,_),M(k6,Go,null),e(Go,tGo),e(Go,Ki),e(Ki,aGo),e(Ki,IG),e(IG,nGo),e(Ki,sGo),e(Ki,qG),e(qG,lGo),e(Ki,iGo),e(Go,dGo),e(Go,S6),e(S6,cGo),e(S6,nme),e(nme,fGo),e(S6,mGo),e(Go,gGo),e(Go,ht),M(R6,ht,null),e(ht,hGo),e(ht,sme),e(sme,uGo),e(ht,pGo),e(ht,Zi),e(Zi,_Go),e(Zi,lme),e(lme,vGo),e(Zi,bGo),e(Zi,NG),e(NG,FGo),e(Zi,TGo),e(ht,MGo),M(w2,ht,null),e(Go,EGo),e(Go,so),M(B6,so,null),e(so,CGo),e(so,ime),e(ime,wGo),e(so,AGo),e(so,Na),e(Na,yGo),e(Na,dme),e(dme,LGo),e(Na,xGo),e(Na,cme),e(cme,$Go),e(Na,kGo),e(Na,fme),e(fme,SGo),e(Na,RGo),e(so,BGo),e(so,qe),e(qe,A2),e(A2,mme),e(mme,PGo),e(A2,IGo),e(A2,jG),e(jG,qGo),e(A2,NGo),e(qe,jGo),e(qe,y2),e(y2,gme),e(gme,DGo),e(y2,GGo),e(y2,DG),e(DG,OGo),e(y2,VGo),e(qe,XGo),e(qe,L2),e(L2,hme),e(hme,zGo),e(L2,QGo),e(L2,GG),e(GG,WGo),e(L2,HGo),e(qe,UGo),e(qe,x2),e(x2,ume),e(ume,JGo),e(x2,YGo),e(x2,OG),e(OG,KGo),e(x2,ZGo),e(qe,eOo),e(qe,$2),e($2,pme),e(pme,oOo),e($2,rOo),e($2,VG),e(VG,tOo),e($2,aOo),e(qe,nOo),e(qe,k2),e(k2,_me),e(_me,sOo),e(k2,lOo),e(k2,XG),e(XG,iOo),e(k2,dOo),e(qe,cOo),e(qe,S2),e(S2,vme),e(vme,fOo),e(S2,mOo),e(S2,zG),e(zG,gOo),e(S2,hOo),e(qe,uOo),e(qe,R2),e(R2,bme),e(bme,pOo),e(R2,_Oo),e(R2,QG),e(QG,vOo),e(R2,bOo),e(so,FOo),e(so,B2),e(B2,TOo),e(B2,Fme),e(Fme,MOo),e(B2,EOo),e(B2,Tme),e(Tme,COo),e(so,wOo),M(P2,so,null),v(f,rSe,_),v(f,ed,_),e(ed,I2),e(I2,Mme),M(P6,Mme,null),e(ed,AOo),e(ed,Eme),e(Eme,yOo),v(f,tSe,_),v(f,Oo,_),M(I6,Oo,null),e(Oo,LOo),e(Oo,od),e(od,xOo),e(od,WG),e(WG,$Oo),e(od,kOo),e(od,HG),e(HG,SOo),e(od,ROo),e(Oo,BOo),e(Oo,q6),e(q6,POo),e(q6,Cme),e(Cme,IOo),e(q6,qOo),e(Oo,NOo),e(Oo,ut),M(N6,ut,null),e(ut,jOo),e(ut,wme),e(wme,DOo),e(ut,GOo),e(ut,rd),e(rd,OOo),e(rd,Ame),e(Ame,VOo),e(rd,XOo),e(rd,UG),e(UG,zOo),e(rd,QOo),e(ut,WOo),M(q2,ut,null),e(Oo,HOo),e(Oo,lo),M(j6,lo,null),e(lo,UOo),e(lo,yme),e(yme,JOo),e(lo,YOo),e(lo,ja),e(ja,KOo),e(ja,Lme),e(Lme,ZOo),e(ja,eVo),e(ja,xme),e(xme,oVo),e(ja,rVo),e(ja,$me),e($me,tVo),e(ja,aVo),e(lo,nVo),e(lo,D6),e(D6,N2),e(N2,kme),e(kme,sVo),e(N2,lVo),e(N2,JG),e(JG,iVo),e(N2,dVo),e(D6,cVo),e(D6,j2),e(j2,Sme),e(Sme,fVo),e(j2,mVo),e(j2,YG),e(YG,gVo),e(j2,hVo),e(lo,uVo),e(lo,D2),e(D2,pVo),e(D2,Rme),e(Rme,_Vo),e(D2,vVo),e(D2,Bme),e(Bme,bVo),e(lo,FVo),M(G2,lo,null),v(f,aSe,_),v(f,td,_),e(td,O2),e(O2,Pme),M(G6,Pme,null),e(td,TVo),e(td,Ime),e(Ime,MVo),v(f,nSe,_),v(f,Vo,_),M(O6,Vo,null),e(Vo,EVo),e(Vo,ad),e(ad,CVo),e(ad,KG),e(KG,wVo),e(ad,AVo),e(ad,ZG),e(ZG,yVo),e(ad,LVo),e(Vo,xVo),e(Vo,V6),e(V6,$Vo),e(V6,qme),e(qme,kVo),e(V6,SVo),e(Vo,RVo),e(Vo,pt),M(X6,pt,null),e(pt,BVo),e(pt,Nme),e(Nme,PVo),e(pt,IVo),e(pt,nd),e(nd,qVo),e(nd,jme),e(jme,NVo),e(nd,jVo),e(nd,eO),e(eO,DVo),e(nd,GVo),e(pt,OVo),M(V2,pt,null),e(Vo,VVo),e(Vo,io),M(z6,io,null),e(io,XVo),e(io,Dme),e(Dme,zVo),e(io,QVo),e(io,Da),e(Da,WVo),e(Da,Gme),e(Gme,HVo),e(Da,UVo),e(Da,Ome),e(Ome,JVo),e(Da,YVo),e(Da,Vme),e(Vme,KVo),e(Da,ZVo),e(io,eXo),e(io,Ga),e(Ga,X2),e(X2,Xme),e(Xme,oXo),e(X2,rXo),e(X2,oO),e(oO,tXo),e(X2,aXo),e(Ga,nXo),e(Ga,z2),e(z2,zme),e(zme,sXo),e(z2,lXo),e(z2,rO),e(rO,iXo),e(z2,dXo),e(Ga,cXo),e(Ga,Q2),e(Q2,Qme),e(Qme,fXo),e(Q2,mXo),e(Q2,tO),e(tO,gXo),e(Q2,hXo),e(Ga,uXo),e(Ga,W2),e(W2,Wme),e(Wme,pXo),e(W2,_Xo),e(W2,aO),e(aO,vXo),e(W2,bXo),e(io,FXo),e(io,H2),e(H2,TXo),e(H2,Hme),e(Hme,MXo),e(H2,EXo),e(H2,Ume),e(Ume,CXo),e(io,wXo),M(U2,io,null),v(f,sSe,_),v(f,sd,_),e(sd,J2),e(J2,Jme),M(Q6,Jme,null),e(sd,AXo),e(sd,Yme),e(Yme,yXo),v(f,lSe,_),v(f,Xo,_),M(W6,Xo,null),e(Xo,LXo),e(Xo,ld),e(ld,xXo),e(ld,nO),e(nO,$Xo),e(ld,kXo),e(ld,sO),e(sO,SXo),e(ld,RXo),e(Xo,BXo),e(Xo,H6),e(H6,PXo),e(H6,Kme),e(Kme,IXo),e(H6,qXo),e(Xo,NXo),e(Xo,_t),M(U6,_t,null),e(_t,jXo),e(_t,Zme),e(Zme,DXo),e(_t,GXo),e(_t,id),e(id,OXo),e(id,ege),e(ege,VXo),e(id,XXo),e(id,lO),e(lO,zXo),e(id,QXo),e(_t,WXo),M(Y2,_t,null),e(Xo,HXo),e(Xo,co),M(J6,co,null),e(co,UXo),e(co,oge),e(oge,JXo),e(co,YXo),e(co,Oa),e(Oa,KXo),e(Oa,rge),e(rge,ZXo),e(Oa,ezo),e(Oa,tge),e(tge,ozo),e(Oa,rzo),e(Oa,age),e(age,tzo),e(Oa,azo),e(co,nzo),e(co,dd),e(dd,K2),e(K2,nge),e(nge,szo),e(K2,lzo),e(K2,iO),e(iO,izo),e(K2,dzo),e(dd,czo),e(dd,Z2),e(Z2,sge),e(sge,fzo),e(Z2,mzo),e(Z2,dO),e(dO,gzo),e(Z2,hzo),e(dd,uzo),e(dd,eF),e(eF,lge),e(lge,pzo),e(eF,_zo),e(eF,cO),e(cO,vzo),e(eF,bzo),e(co,Fzo),e(co,oF),e(oF,Tzo),e(oF,ige),e(ige,Mzo),e(oF,Ezo),e(oF,dge),e(dge,Czo),e(co,wzo),M(rF,co,null),v(f,iSe,_),v(f,cd,_),e(cd,tF),e(tF,cge),M(Y6,cge,null),e(cd,Azo),e(cd,fge),e(fge,yzo),v(f,dSe,_),v(f,zo,_),M(K6,zo,null),e(zo,Lzo),e(zo,fd),e(fd,xzo),e(fd,fO),e(fO,$zo),e(fd,kzo),e(fd,mO),e(mO,Szo),e(fd,Rzo),e(zo,Bzo),e(zo,Z6),e(Z6,Pzo),e(Z6,mge),e(mge,Izo),e(Z6,qzo),e(zo,Nzo),e(zo,vt),M(ey,vt,null),e(vt,jzo),e(vt,gge),e(gge,Dzo),e(vt,Gzo),e(vt,md),e(md,Ozo),e(md,hge),e(hge,Vzo),e(md,Xzo),e(md,gO),e(gO,zzo),e(md,Qzo),e(vt,Wzo),M(aF,vt,null),e(zo,Hzo),e(zo,fo),M(oy,fo,null),e(fo,Uzo),e(fo,uge),e(uge,Jzo),e(fo,Yzo),e(fo,Va),e(Va,Kzo),e(Va,pge),e(pge,Zzo),e(Va,eQo),e(Va,_ge),e(_ge,oQo),e(Va,rQo),e(Va,vge),e(vge,tQo),e(Va,aQo),e(fo,nQo),e(fo,bge),e(bge,nF),e(nF,Fge),e(Fge,sQo),e(nF,lQo),e(nF,hO),e(hO,iQo),e(nF,dQo),e(fo,cQo),e(fo,sF),e(sF,fQo),e(sF,Tge),e(Tge,mQo),e(sF,gQo),e(sF,Mge),e(Mge,hQo),e(fo,uQo),M(lF,fo,null),v(f,cSe,_),v(f,gd,_),e(gd,iF),e(iF,Ege),M(ry,Ege,null),e(gd,pQo),e(gd,Cge),e(Cge,_Qo),v(f,fSe,_),v(f,Qo,_),M(ty,Qo,null),e(Qo,vQo),e(Qo,hd),e(hd,bQo),e(hd,uO),e(uO,FQo),e(hd,TQo),e(hd,pO),e(pO,MQo),e(hd,EQo),e(Qo,CQo),e(Qo,ay),e(ay,wQo),e(ay,wge),e(wge,AQo),e(ay,yQo),e(Qo,LQo),e(Qo,bt),M(ny,bt,null),e(bt,xQo),e(bt,Age),e(Age,$Qo),e(bt,kQo),e(bt,ud),e(ud,SQo),e(ud,yge),e(yge,RQo),e(ud,BQo),e(ud,_O),e(_O,PQo),e(ud,IQo),e(bt,qQo),M(dF,bt,null),e(Qo,NQo),e(Qo,mo),M(sy,mo,null),e(mo,jQo),e(mo,Lge),e(Lge,DQo),e(mo,GQo),e(mo,Xa),e(Xa,OQo),e(Xa,xge),e(xge,VQo),e(Xa,XQo),e(Xa,$ge),e($ge,zQo),e(Xa,QQo),e(Xa,kge),e(kge,WQo),e(Xa,HQo),e(mo,UQo),e(mo,Sge),e(Sge,cF),e(cF,Rge),e(Rge,JQo),e(cF,YQo),e(cF,vO),e(vO,KQo),e(cF,ZQo),e(mo,eWo),e(mo,fF),e(fF,oWo),e(fF,Bge),e(Bge,rWo),e(fF,tWo),e(fF,Pge),e(Pge,aWo),e(mo,nWo),M(mF,mo,null),v(f,mSe,_),v(f,pd,_),e(pd,gF),e(gF,Ige),M(ly,Ige,null),e(pd,sWo),e(pd,qge),e(qge,lWo),v(f,gSe,_),v(f,Wo,_),M(iy,Wo,null),e(Wo,iWo),e(Wo,_d),e(_d,dWo),e(_d,bO),e(bO,cWo),e(_d,fWo),e(_d,FO),e(FO,mWo),e(_d,gWo),e(Wo,hWo),e(Wo,dy),e(dy,uWo),e(dy,Nge),e(Nge,pWo),e(dy,_Wo),e(Wo,vWo),e(Wo,Ft),M(cy,Ft,null),e(Ft,bWo),e(Ft,jge),e(jge,FWo),e(Ft,TWo),e(Ft,vd),e(vd,MWo),e(vd,Dge),e(Dge,EWo),e(vd,CWo),e(vd,TO),e(TO,wWo),e(vd,AWo),e(Ft,yWo),M(hF,Ft,null),e(Wo,LWo),e(Wo,go),M(fy,go,null),e(go,xWo),e(go,Gge),e(Gge,$Wo),e(go,kWo),e(go,za),e(za,SWo),e(za,Oge),e(Oge,RWo),e(za,BWo),e(za,Vge),e(Vge,PWo),e(za,IWo),e(za,Xge),e(Xge,qWo),e(za,NWo),e(go,jWo),e(go,bd),e(bd,uF),e(uF,zge),e(zge,DWo),e(uF,GWo),e(uF,MO),e(MO,OWo),e(uF,VWo),e(bd,XWo),e(bd,pF),e(pF,Qge),e(Qge,zWo),e(pF,QWo),e(pF,EO),e(EO,WWo),e(pF,HWo),e(bd,UWo),e(bd,_F),e(_F,Wge),e(Wge,JWo),e(_F,YWo),e(_F,CO),e(CO,KWo),e(_F,ZWo),e(go,eHo),e(go,vF),e(vF,oHo),e(vF,Hge),e(Hge,rHo),e(vF,tHo),e(vF,Uge),e(Uge,aHo),e(go,nHo),M(bF,go,null),v(f,hSe,_),v(f,Fd,_),e(Fd,FF),e(FF,Jge),M(my,Jge,null),e(Fd,sHo),e(Fd,Yge),e(Yge,lHo),v(f,uSe,_),v(f,Ho,_),M(gy,Ho,null),e(Ho,iHo),e(Ho,Td),e(Td,dHo),e(Td,wO),e(wO,cHo),e(Td,fHo),e(Td,AO),e(AO,mHo),e(Td,gHo),e(Ho,hHo),e(Ho,hy),e(hy,uHo),e(hy,Kge),e(Kge,pHo),e(hy,_Ho),e(Ho,vHo),e(Ho,Tt),M(uy,Tt,null),e(Tt,bHo),e(Tt,Zge),e(Zge,FHo),e(Tt,THo),e(Tt,Md),e(Md,MHo),e(Md,ehe),e(ehe,EHo),e(Md,CHo),e(Md,yO),e(yO,wHo),e(Md,AHo),e(Tt,yHo),M(TF,Tt,null),e(Ho,LHo),e(Ho,ho),M(py,ho,null),e(ho,xHo),e(ho,ohe),e(ohe,$Ho),e(ho,kHo),e(ho,Qa),e(Qa,SHo),e(Qa,rhe),e(rhe,RHo),e(Qa,BHo),e(Qa,the),e(the,PHo),e(Qa,IHo),e(Qa,ahe),e(ahe,qHo),e(Qa,NHo),e(ho,jHo),e(ho,nhe),e(nhe,MF),e(MF,she),e(she,DHo),e(MF,GHo),e(MF,LO),e(LO,OHo),e(MF,VHo),e(ho,XHo),e(ho,EF),e(EF,zHo),e(EF,lhe),e(lhe,QHo),e(EF,WHo),e(EF,ihe),e(ihe,HHo),e(ho,UHo),M(CF,ho,null),v(f,pSe,_),v(f,Ed,_),e(Ed,wF),e(wF,dhe),M(_y,dhe,null),e(Ed,JHo),e(Ed,che),e(che,YHo),v(f,_Se,_),v(f,Uo,_),M(vy,Uo,null),e(Uo,KHo),e(Uo,Cd),e(Cd,ZHo),e(Cd,xO),e(xO,eUo),e(Cd,oUo),e(Cd,$O),e($O,rUo),e(Cd,tUo),e(Uo,aUo),e(Uo,by),e(by,nUo),e(by,fhe),e(fhe,sUo),e(by,lUo),e(Uo,iUo),e(Uo,Mt),M(Fy,Mt,null),e(Mt,dUo),e(Mt,mhe),e(mhe,cUo),e(Mt,fUo),e(Mt,wd),e(wd,mUo),e(wd,ghe),e(ghe,gUo),e(wd,hUo),e(wd,kO),e(kO,uUo),e(wd,pUo),e(Mt,_Uo),M(AF,Mt,null),e(Uo,vUo),e(Uo,Mr),M(Ty,Mr,null),e(Mr,bUo),e(Mr,hhe),e(hhe,FUo),e(Mr,TUo),e(Mr,Wa),e(Wa,MUo),e(Wa,uhe),e(uhe,EUo),e(Wa,CUo),e(Wa,phe),e(phe,wUo),e(Wa,AUo),e(Wa,_he),e(_he,yUo),e(Wa,LUo),e(Mr,xUo),e(Mr,j),e(j,yF),e(yF,vhe),e(vhe,$Uo),e(yF,kUo),e(yF,SO),e(SO,SUo),e(yF,RUo),e(j,BUo),e(j,LF),e(LF,bhe),e(bhe,PUo),e(LF,IUo),e(LF,RO),e(RO,qUo),e(LF,NUo),e(j,jUo),e(j,xF),e(xF,Fhe),e(Fhe,DUo),e(xF,GUo),e(xF,BO),e(BO,OUo),e(xF,VUo),e(j,XUo),e(j,$F),e($F,The),e(The,zUo),e($F,QUo),e($F,PO),e(PO,WUo),e($F,HUo),e(j,UUo),e(j,kF),e(kF,Mhe),e(Mhe,JUo),e(kF,YUo),e(kF,IO),e(IO,KUo),e(kF,ZUo),e(j,eJo),e(j,SF),e(SF,Ehe),e(Ehe,oJo),e(SF,rJo),e(SF,qO),e(qO,tJo),e(SF,aJo),e(j,nJo),e(j,RF),e(RF,Che),e(Che,sJo),e(RF,lJo),e(RF,NO),e(NO,iJo),e(RF,dJo),e(j,cJo),e(j,BF),e(BF,whe),e(whe,fJo),e(BF,mJo),e(BF,jO),e(jO,gJo),e(BF,hJo),e(j,uJo),e(j,PF),e(PF,Ahe),e(Ahe,pJo),e(PF,_Jo),e(PF,DO),e(DO,vJo),e(PF,bJo),e(j,FJo),e(j,IF),e(IF,yhe),e(yhe,TJo),e(IF,MJo),e(IF,GO),e(GO,EJo),e(IF,CJo),e(j,wJo),e(j,qF),e(qF,Lhe),e(Lhe,AJo),e(qF,yJo),e(qF,OO),e(OO,LJo),e(qF,xJo),e(j,$Jo),e(j,NF),e(NF,xhe),e(xhe,kJo),e(NF,SJo),e(NF,VO),e(VO,RJo),e(NF,BJo),e(j,PJo),e(j,jF),e(jF,$he),e($he,IJo),e(jF,qJo),e(jF,XO),e(XO,NJo),e(jF,jJo),e(j,DJo),e(j,DF),e(DF,khe),e(khe,GJo),e(DF,OJo),e(DF,zO),e(zO,VJo),e(DF,XJo),e(j,zJo),e(j,GF),e(GF,She),e(She,QJo),e(GF,WJo),e(GF,QO),e(QO,HJo),e(GF,UJo),e(j,JJo),e(j,OF),e(OF,Rhe),e(Rhe,YJo),e(OF,KJo),e(OF,WO),e(WO,ZJo),e(OF,eYo),e(j,oYo),e(j,Fs),e(Fs,Bhe),e(Bhe,rYo),e(Fs,tYo),e(Fs,HO),e(HO,aYo),e(Fs,nYo),e(Fs,UO),e(UO,sYo),e(Fs,lYo),e(j,iYo),e(j,VF),e(VF,Phe),e(Phe,dYo),e(VF,cYo),e(VF,JO),e(JO,fYo),e(VF,mYo),e(j,gYo),e(j,XF),e(XF,Ihe),e(Ihe,hYo),e(XF,uYo),e(XF,YO),e(YO,pYo),e(XF,_Yo),e(j,vYo),e(j,zF),e(zF,qhe),e(qhe,bYo),e(zF,FYo),e(zF,KO),e(KO,TYo),e(zF,MYo),e(j,EYo),e(j,QF),e(QF,Nhe),e(Nhe,CYo),e(QF,wYo),e(QF,ZO),e(ZO,AYo),e(QF,yYo),e(j,LYo),e(j,WF),e(WF,jhe),e(jhe,xYo),e(WF,$Yo),e(WF,eV),e(eV,kYo),e(WF,SYo),e(j,RYo),e(j,HF),e(HF,Dhe),e(Dhe,BYo),e(HF,PYo),e(HF,oV),e(oV,IYo),e(HF,qYo),e(j,NYo),e(j,UF),e(UF,Ghe),e(Ghe,jYo),e(UF,DYo),e(UF,rV),e(rV,GYo),e(UF,OYo),e(j,VYo),e(j,JF),e(JF,Ohe),e(Ohe,XYo),e(JF,zYo),e(JF,tV),e(tV,QYo),e(JF,WYo),e(j,HYo),e(j,YF),e(YF,Vhe),e(Vhe,UYo),e(YF,JYo),e(YF,aV),e(aV,YYo),e(YF,KYo),e(j,ZYo),e(j,KF),e(KF,Xhe),e(Xhe,eKo),e(KF,oKo),e(KF,nV),e(nV,rKo),e(KF,tKo),e(j,aKo),e(j,ZF),e(ZF,zhe),e(zhe,nKo),e(ZF,sKo),e(ZF,sV),e(sV,lKo),e(ZF,iKo),e(j,dKo),e(j,e0),e(e0,Qhe),e(Qhe,cKo),e(e0,fKo),e(e0,lV),e(lV,mKo),e(e0,gKo),e(j,hKo),e(j,o0),e(o0,Whe),e(Whe,uKo),e(o0,pKo),e(o0,iV),e(iV,_Ko),e(o0,vKo),e(j,bKo),e(j,r0),e(r0,Hhe),e(Hhe,FKo),e(r0,TKo),e(r0,dV),e(dV,MKo),e(r0,EKo),e(j,CKo),e(j,t0),e(t0,Uhe),e(Uhe,wKo),e(t0,AKo),e(t0,cV),e(cV,yKo),e(t0,LKo),e(j,xKo),e(j,a0),e(a0,Jhe),e(Jhe,$Ko),e(a0,kKo),e(a0,fV),e(fV,SKo),e(a0,RKo),e(j,BKo),e(j,n0),e(n0,Yhe),e(Yhe,PKo),e(n0,IKo),e(n0,mV),e(mV,qKo),e(n0,NKo),e(j,jKo),e(j,s0),e(s0,Khe),e(Khe,DKo),e(s0,GKo),e(s0,gV),e(gV,OKo),e(s0,VKo),e(j,XKo),e(j,l0),e(l0,Zhe),e(Zhe,zKo),e(l0,QKo),e(l0,hV),e(hV,WKo),e(l0,HKo),e(j,UKo),e(j,i0),e(i0,eue),e(eue,JKo),e(i0,YKo),e(i0,uV),e(uV,KKo),e(i0,ZKo),e(j,eZo),e(j,d0),e(d0,oue),e(oue,oZo),e(d0,rZo),e(d0,pV),e(pV,tZo),e(d0,aZo),e(j,nZo),e(j,c0),e(c0,rue),e(rue,sZo),e(c0,lZo),e(c0,_V),e(_V,iZo),e(c0,dZo),e(j,cZo),e(j,f0),e(f0,tue),e(tue,fZo),e(f0,mZo),e(f0,vV),e(vV,gZo),e(f0,hZo),e(j,uZo),e(j,m0),e(m0,aue),e(aue,pZo),e(m0,_Zo),e(m0,bV),e(bV,vZo),e(m0,bZo),e(j,FZo),e(j,g0),e(g0,nue),e(nue,TZo),e(g0,MZo),e(g0,FV),e(FV,EZo),e(g0,CZo),e(j,wZo),e(j,h0),e(h0,sue),e(sue,AZo),e(h0,yZo),e(h0,TV),e(TV,LZo),e(h0,xZo),e(j,$Zo),e(j,u0),e(u0,lue),e(lue,kZo),e(u0,SZo),e(u0,MV),e(MV,RZo),e(u0,BZo),e(Mr,PZo),M(p0,Mr,null),v(f,vSe,_),v(f,Ad,_),e(Ad,_0),e(_0,iue),M(My,iue,null),e(Ad,IZo),e(Ad,due),e(due,qZo),v(f,bSe,_),v(f,Jo,_),M(Ey,Jo,null),e(Jo,NZo),e(Jo,yd),e(yd,jZo),e(yd,EV),e(EV,DZo),e(yd,GZo),e(yd,CV),e(CV,OZo),e(yd,VZo),e(Jo,XZo),e(Jo,Cy),e(Cy,zZo),e(Cy,cue),e(cue,QZo),e(Cy,WZo),e(Jo,HZo),e(Jo,Et),M(wy,Et,null),e(Et,UZo),e(Et,fue),e(fue,JZo),e(Et,YZo),e(Et,Ld),e(Ld,KZo),e(Ld,mue),e(mue,ZZo),e(Ld,eer),e(Ld,wV),e(wV,oer),e(Ld,rer),e(Et,ter),M(v0,Et,null),e(Jo,aer),e(Jo,Er),M(Ay,Er,null),e(Er,ner),e(Er,gue),e(gue,ser),e(Er,ler),e(Er,Ha),e(Ha,ier),e(Ha,hue),e(hue,der),e(Ha,cer),e(Ha,uue),e(uue,fer),e(Ha,mer),e(Ha,pue),e(pue,ger),e(Ha,her),e(Er,uer),e(Er,ae),e(ae,b0),e(b0,_ue),e(_ue,per),e(b0,_er),e(b0,AV),e(AV,ver),e(b0,ber),e(ae,Fer),e(ae,F0),e(F0,vue),e(vue,Ter),e(F0,Mer),e(F0,yV),e(yV,Eer),e(F0,Cer),e(ae,wer),e(ae,T0),e(T0,bue),e(bue,Aer),e(T0,yer),e(T0,LV),e(LV,Ler),e(T0,xer),e(ae,$er),e(ae,M0),e(M0,Fue),e(Fue,ker),e(M0,Ser),e(M0,xV),e(xV,Rer),e(M0,Ber),e(ae,Per),e(ae,E0),e(E0,Tue),e(Tue,Ier),e(E0,qer),e(E0,$V),e($V,Ner),e(E0,jer),e(ae,Der),e(ae,C0),e(C0,Mue),e(Mue,Ger),e(C0,Oer),e(C0,kV),e(kV,Ver),e(C0,Xer),e(ae,zer),e(ae,w0),e(w0,Eue),e(Eue,Qer),e(w0,Wer),e(w0,SV),e(SV,Her),e(w0,Uer),e(ae,Jer),e(ae,A0),e(A0,Cue),e(Cue,Yer),e(A0,Ker),e(A0,RV),e(RV,Zer),e(A0,eor),e(ae,oor),e(ae,y0),e(y0,wue),e(wue,ror),e(y0,tor),e(y0,BV),e(BV,aor),e(y0,nor),e(ae,sor),e(ae,L0),e(L0,Aue),e(Aue,lor),e(L0,ior),e(L0,PV),e(PV,dor),e(L0,cor),e(ae,mor),e(ae,x0),e(x0,yue),e(yue,gor),e(x0,hor),e(x0,IV),e(IV,uor),e(x0,por),e(ae,_or),e(ae,$0),e($0,Lue),e(Lue,vor),e($0,bor),e($0,qV),e(qV,For),e($0,Tor),e(ae,Mor),e(ae,k0),e(k0,xue),e(xue,Eor),e(k0,Cor),e(k0,NV),e(NV,wor),e(k0,Aor),e(ae,yor),e(ae,S0),e(S0,$ue),e($ue,Lor),e(S0,xor),e(S0,jV),e(jV,$or),e(S0,kor),e(ae,Sor),e(ae,R0),e(R0,kue),e(kue,Ror),e(R0,Bor),e(R0,DV),e(DV,Por),e(R0,Ior),e(ae,qor),e(ae,B0),e(B0,Sue),e(Sue,Nor),e(B0,jor),e(B0,GV),e(GV,Dor),e(B0,Gor),e(ae,Oor),e(ae,P0),e(P0,Rue),e(Rue,Vor),e(P0,Xor),e(P0,OV),e(OV,zor),e(P0,Qor),e(ae,Wor),e(ae,I0),e(I0,Bue),e(Bue,Hor),e(I0,Uor),e(I0,VV),e(VV,Jor),e(I0,Yor),e(ae,Kor),e(ae,q0),e(q0,Pue),e(Pue,Zor),e(q0,err),e(q0,XV),e(XV,orr),e(q0,rrr),e(ae,trr),e(ae,N0),e(N0,Iue),e(Iue,arr),e(N0,nrr),e(N0,zV),e(zV,srr),e(N0,lrr),e(ae,irr),e(ae,j0),e(j0,que),e(que,drr),e(j0,crr),e(j0,QV),e(QV,frr),e(j0,mrr),e(ae,grr),e(ae,D0),e(D0,Nue),e(Nue,hrr),e(D0,urr),e(D0,WV),e(WV,prr),e(D0,_rr),e(ae,vrr),e(ae,G0),e(G0,jue),e(jue,brr),e(G0,Frr),e(G0,HV),e(HV,Trr),e(G0,Mrr),e(Er,Err),M(O0,Er,null),v(f,FSe,_),v(f,xd,_),e(xd,V0),e(V0,Due),M(yy,Due,null),e(xd,Crr),e(xd,Gue),e(Gue,wrr),v(f,TSe,_),v(f,Yo,_),M(Ly,Yo,null),e(Yo,Arr),e(Yo,$d),e($d,yrr),e($d,UV),e(UV,Lrr),e($d,xrr),e($d,JV),e(JV,$rr),e($d,krr),e(Yo,Srr),e(Yo,xy),e(xy,Rrr),e(xy,Oue),e(Oue,Brr),e(xy,Prr),e(Yo,Irr),e(Yo,Ct),M($y,Ct,null),e(Ct,qrr),e(Ct,Vue),e(Vue,Nrr),e(Ct,jrr),e(Ct,kd),e(kd,Drr),e(kd,Xue),e(Xue,Grr),e(kd,Orr),e(kd,YV),e(YV,Vrr),e(kd,Xrr),e(Ct,zrr),M(X0,Ct,null),e(Yo,Qrr),e(Yo,Cr),M(ky,Cr,null),e(Cr,Wrr),e(Cr,zue),e(zue,Hrr),e(Cr,Urr),e(Cr,Ua),e(Ua,Jrr),e(Ua,Que),e(Que,Yrr),e(Ua,Krr),e(Ua,Wue),e(Wue,Zrr),e(Ua,etr),e(Ua,Hue),e(Hue,otr),e(Ua,rtr),e(Cr,ttr),e(Cr,ve),e(ve,z0),e(z0,Uue),e(Uue,atr),e(z0,ntr),e(z0,KV),e(KV,str),e(z0,ltr),e(ve,itr),e(ve,Q0),e(Q0,Jue),e(Jue,dtr),e(Q0,ctr),e(Q0,ZV),e(ZV,ftr),e(Q0,mtr),e(ve,gtr),e(ve,W0),e(W0,Yue),e(Yue,htr),e(W0,utr),e(W0,eX),e(eX,ptr),e(W0,_tr),e(ve,vtr),e(ve,H0),e(H0,Kue),e(Kue,btr),e(H0,Ftr),e(H0,oX),e(oX,Ttr),e(H0,Mtr),e(ve,Etr),e(ve,U0),e(U0,Zue),e(Zue,Ctr),e(U0,wtr),e(U0,rX),e(rX,Atr),e(U0,ytr),e(ve,Ltr),e(ve,J0),e(J0,epe),e(epe,xtr),e(J0,$tr),e(J0,tX),e(tX,ktr),e(J0,Str),e(ve,Rtr),e(ve,Y0),e(Y0,ope),e(ope,Btr),e(Y0,Ptr),e(Y0,aX),e(aX,Itr),e(Y0,qtr),e(ve,Ntr),e(ve,K0),e(K0,rpe),e(rpe,jtr),e(K0,Dtr),e(K0,nX),e(nX,Gtr),e(K0,Otr),e(ve,Vtr),e(ve,Z0),e(Z0,tpe),e(tpe,Xtr),e(Z0,ztr),e(Z0,sX),e(sX,Qtr),e(Z0,Wtr),e(ve,Htr),e(ve,eT),e(eT,ape),e(ape,Utr),e(eT,Jtr),e(eT,lX),e(lX,Ytr),e(eT,Ktr),e(ve,Ztr),e(ve,oT),e(oT,npe),e(npe,ear),e(oT,oar),e(oT,iX),e(iX,rar),e(oT,tar),e(ve,aar),e(ve,rT),e(rT,spe),e(spe,nar),e(rT,sar),e(rT,dX),e(dX,lar),e(rT,iar),e(Cr,dar),M(tT,Cr,null),v(f,MSe,_),v(f,Sd,_),e(Sd,aT),e(aT,lpe),M(Sy,lpe,null),e(Sd,car),e(Sd,ipe),e(ipe,far),v(f,ESe,_),v(f,Ko,_),M(Ry,Ko,null),e(Ko,mar),e(Ko,Rd),e(Rd,gar),e(Rd,cX),e(cX,har),e(Rd,uar),e(Rd,fX),e(fX,par),e(Rd,_ar),e(Ko,bar),e(Ko,By),e(By,Far),e(By,dpe),e(dpe,Tar),e(By,Mar),e(Ko,Ear),e(Ko,wt),M(Py,wt,null),e(wt,Car),e(wt,cpe),e(cpe,war),e(wt,Aar),e(wt,Bd),e(Bd,yar),e(Bd,fpe),e(fpe,Lar),e(Bd,xar),e(Bd,mX),e(mX,$ar),e(Bd,kar),e(wt,Sar),M(nT,wt,null),e(Ko,Rar),e(Ko,wr),M(Iy,wr,null),e(wr,Bar),e(wr,mpe),e(mpe,Par),e(wr,Iar),e(wr,Ja),e(Ja,qar),e(Ja,gpe),e(gpe,Nar),e(Ja,jar),e(Ja,hpe),e(hpe,Dar),e(Ja,Gar),e(Ja,upe),e(upe,Oar),e(Ja,Var),e(wr,Xar),e(wr,qy),e(qy,sT),e(sT,ppe),e(ppe,zar),e(sT,Qar),e(sT,gX),e(gX,War),e(sT,Har),e(qy,Uar),e(qy,lT),e(lT,_pe),e(_pe,Jar),e(lT,Yar),e(lT,hX),e(hX,Kar),e(lT,Zar),e(wr,enr),M(iT,wr,null),v(f,CSe,_),v(f,Pd,_),e(Pd,dT),e(dT,vpe),M(Ny,vpe,null),e(Pd,onr),e(Pd,bpe),e(bpe,rnr),v(f,wSe,_),v(f,Zo,_),M(jy,Zo,null),e(Zo,tnr),e(Zo,Id),e(Id,anr),e(Id,uX),e(uX,nnr),e(Id,snr),e(Id,pX),e(pX,lnr),e(Id,inr),e(Zo,dnr),e(Zo,Dy),e(Dy,cnr),e(Dy,Fpe),e(Fpe,fnr),e(Dy,mnr),e(Zo,gnr),e(Zo,At),M(Gy,At,null),e(At,hnr),e(At,Tpe),e(Tpe,unr),e(At,pnr),e(At,qd),e(qd,_nr),e(qd,Mpe),e(Mpe,vnr),e(qd,bnr),e(qd,_X),e(_X,Fnr),e(qd,Tnr),e(At,Mnr),M(cT,At,null),e(Zo,Enr),e(Zo,Ar),M(Oy,Ar,null),e(Ar,Cnr),e(Ar,Epe),e(Epe,wnr),e(Ar,Anr),e(Ar,Ya),e(Ya,ynr),e(Ya,Cpe),e(Cpe,Lnr),e(Ya,xnr),e(Ya,wpe),e(wpe,$nr),e(Ya,knr),e(Ya,Ape),e(Ape,Snr),e(Ya,Rnr),e(Ar,Bnr),e(Ar,se),e(se,fT),e(fT,ype),e(ype,Pnr),e(fT,Inr),e(fT,vX),e(vX,qnr),e(fT,Nnr),e(se,jnr),e(se,mT),e(mT,Lpe),e(Lpe,Dnr),e(mT,Gnr),e(mT,bX),e(bX,Onr),e(mT,Vnr),e(se,Xnr),e(se,gT),e(gT,xpe),e(xpe,znr),e(gT,Qnr),e(gT,FX),e(FX,Wnr),e(gT,Hnr),e(se,Unr),e(se,hT),e(hT,$pe),e($pe,Jnr),e(hT,Ynr),e(hT,TX),e(TX,Knr),e(hT,Znr),e(se,esr),e(se,uT),e(uT,kpe),e(kpe,osr),e(uT,rsr),e(uT,MX),e(MX,tsr),e(uT,asr),e(se,nsr),e(se,pT),e(pT,Spe),e(Spe,ssr),e(pT,lsr),e(pT,EX),e(EX,isr),e(pT,dsr),e(se,csr),e(se,_T),e(_T,Rpe),e(Rpe,fsr),e(_T,msr),e(_T,CX),e(CX,gsr),e(_T,hsr),e(se,usr),e(se,vT),e(vT,Bpe),e(Bpe,psr),e(vT,_sr),e(vT,wX),e(wX,vsr),e(vT,bsr),e(se,Fsr),e(se,bT),e(bT,Ppe),e(Ppe,Tsr),e(bT,Msr),e(bT,AX),e(AX,Esr),e(bT,Csr),e(se,wsr),e(se,FT),e(FT,Ipe),e(Ipe,Asr),e(FT,ysr),e(FT,yX),e(yX,Lsr),e(FT,xsr),e(se,$sr),e(se,TT),e(TT,qpe),e(qpe,ksr),e(TT,Ssr),e(TT,LX),e(LX,Rsr),e(TT,Bsr),e(se,Psr),e(se,MT),e(MT,Npe),e(Npe,Isr),e(MT,qsr),e(MT,xX),e(xX,Nsr),e(MT,jsr),e(se,Dsr),e(se,ET),e(ET,jpe),e(jpe,Gsr),e(ET,Osr),e(ET,$X),e($X,Vsr),e(ET,Xsr),e(se,zsr),e(se,CT),e(CT,Dpe),e(Dpe,Qsr),e(CT,Wsr),e(CT,kX),e(kX,Hsr),e(CT,Usr),e(se,Jsr),e(se,wT),e(wT,Gpe),e(Gpe,Ysr),e(wT,Ksr),e(wT,SX),e(SX,Zsr),e(wT,elr),e(se,olr),e(se,AT),e(AT,Ope),e(Ope,rlr),e(AT,tlr),e(AT,RX),e(RX,alr),e(AT,nlr),e(se,slr),e(se,yT),e(yT,Vpe),e(Vpe,llr),e(yT,ilr),e(yT,BX),e(BX,dlr),e(yT,clr),e(se,flr),e(se,LT),e(LT,Xpe),e(Xpe,mlr),e(LT,glr),e(LT,PX),e(PX,hlr),e(LT,ulr),e(se,plr),e(se,xT),e(xT,zpe),e(zpe,_lr),e(xT,vlr),e(xT,IX),e(IX,blr),e(xT,Flr),e(se,Tlr),e(se,$T),e($T,Qpe),e(Qpe,Mlr),e($T,Elr),e($T,qX),e(qX,Clr),e($T,wlr),e(Ar,Alr),M(kT,Ar,null),v(f,ASe,_),v(f,Nd,_),e(Nd,ST),e(ST,Wpe),M(Vy,Wpe,null),e(Nd,ylr),e(Nd,Hpe),e(Hpe,Llr),v(f,ySe,_),v(f,er,_),M(Xy,er,null),e(er,xlr),e(er,jd),e(jd,$lr),e(jd,NX),e(NX,klr),e(jd,Slr),e(jd,jX),e(jX,Rlr),e(jd,Blr),e(er,Plr),e(er,zy),e(zy,Ilr),e(zy,Upe),e(Upe,qlr),e(zy,Nlr),e(er,jlr),e(er,yt),M(Qy,yt,null),e(yt,Dlr),e(yt,Jpe),e(Jpe,Glr),e(yt,Olr),e(yt,Dd),e(Dd,Vlr),e(Dd,Ype),e(Ype,Xlr),e(Dd,zlr),e(Dd,DX),e(DX,Qlr),e(Dd,Wlr),e(yt,Hlr),M(RT,yt,null),e(er,Ulr),e(er,yr),M(Wy,yr,null),e(yr,Jlr),e(yr,Kpe),e(Kpe,Ylr),e(yr,Klr),e(yr,Ka),e(Ka,Zlr),e(Ka,Zpe),e(Zpe,eir),e(Ka,oir),e(Ka,e_e),e(e_e,rir),e(Ka,tir),e(Ka,o_e),e(o_e,air),e(Ka,nir),e(yr,sir),e(yr,Ce),e(Ce,BT),e(BT,r_e),e(r_e,lir),e(BT,iir),e(BT,GX),e(GX,dir),e(BT,cir),e(Ce,fir),e(Ce,PT),e(PT,t_e),e(t_e,mir),e(PT,gir),e(PT,OX),e(OX,hir),e(PT,uir),e(Ce,pir),e(Ce,IT),e(IT,a_e),e(a_e,_ir),e(IT,vir),e(IT,VX),e(VX,bir),e(IT,Fir),e(Ce,Tir),e(Ce,qT),e(qT,n_e),e(n_e,Mir),e(qT,Eir),e(qT,XX),e(XX,Cir),e(qT,wir),e(Ce,Air),e(Ce,NT),e(NT,s_e),e(s_e,yir),e(NT,Lir),e(NT,zX),e(zX,xir),e(NT,$ir),e(Ce,kir),e(Ce,jT),e(jT,l_e),e(l_e,Sir),e(jT,Rir),e(jT,QX),e(QX,Bir),e(jT,Pir),e(Ce,Iir),e(Ce,DT),e(DT,i_e),e(i_e,qir),e(DT,Nir),e(DT,WX),e(WX,jir),e(DT,Dir),e(Ce,Gir),e(Ce,GT),e(GT,d_e),e(d_e,Oir),e(GT,Vir),e(GT,HX),e(HX,Xir),e(GT,zir),e(Ce,Qir),e(Ce,OT),e(OT,c_e),e(c_e,Wir),e(OT,Hir),e(OT,UX),e(UX,Uir),e(OT,Jir),e(Ce,Yir),e(Ce,VT),e(VT,f_e),e(f_e,Kir),e(VT,Zir),e(VT,JX),e(JX,edr),e(VT,odr),e(yr,rdr),M(XT,yr,null),v(f,LSe,_),v(f,Gd,_),e(Gd,zT),e(zT,m_e),M(Hy,m_e,null),e(Gd,tdr),e(Gd,g_e),e(g_e,adr),v(f,xSe,_),v(f,or,_),M(Uy,or,null),e(or,ndr),e(or,Od),e(Od,sdr),e(Od,YX),e(YX,ldr),e(Od,idr),e(Od,KX),e(KX,ddr),e(Od,cdr),e(or,fdr),e(or,Jy),e(Jy,mdr),e(Jy,h_e),e(h_e,gdr),e(Jy,hdr),e(or,udr),e(or,Lt),M(Yy,Lt,null),e(Lt,pdr),e(Lt,u_e),e(u_e,_dr),e(Lt,vdr),e(Lt,Vd),e(Vd,bdr),e(Vd,p_e),e(p_e,Fdr),e(Vd,Tdr),e(Vd,ZX),e(ZX,Mdr),e(Vd,Edr),e(Lt,Cdr),M(QT,Lt,null),e(or,wdr),e(or,Lr),M(Ky,Lr,null),e(Lr,Adr),e(Lr,__e),e(__e,ydr),e(Lr,Ldr),e(Lr,Za),e(Za,xdr),e(Za,v_e),e(v_e,$dr),e(Za,kdr),e(Za,b_e),e(b_e,Sdr),e(Za,Rdr),e(Za,F_e),e(F_e,Bdr),e(Za,Pdr),e(Lr,Idr),e(Lr,Z),e(Z,WT),e(WT,T_e),e(T_e,qdr),e(WT,Ndr),e(WT,ez),e(ez,jdr),e(WT,Ddr),e(Z,Gdr),e(Z,HT),e(HT,M_e),e(M_e,Odr),e(HT,Vdr),e(HT,oz),e(oz,Xdr),e(HT,zdr),e(Z,Qdr),e(Z,UT),e(UT,E_e),e(E_e,Wdr),e(UT,Hdr),e(UT,rz),e(rz,Udr),e(UT,Jdr),e(Z,Ydr),e(Z,JT),e(JT,C_e),e(C_e,Kdr),e(JT,Zdr),e(JT,tz),e(tz,ecr),e(JT,ocr),e(Z,rcr),e(Z,YT),e(YT,w_e),e(w_e,tcr),e(YT,acr),e(YT,az),e(az,ncr),e(YT,scr),e(Z,lcr),e(Z,KT),e(KT,A_e),e(A_e,icr),e(KT,dcr),e(KT,nz),e(nz,ccr),e(KT,fcr),e(Z,mcr),e(Z,ZT),e(ZT,y_e),e(y_e,gcr),e(ZT,hcr),e(ZT,sz),e(sz,ucr),e(ZT,pcr),e(Z,_cr),e(Z,e8),e(e8,L_e),e(L_e,vcr),e(e8,bcr),e(e8,lz),e(lz,Fcr),e(e8,Tcr),e(Z,Mcr),e(Z,o8),e(o8,x_e),e(x_e,Ecr),e(o8,Ccr),e(o8,iz),e(iz,wcr),e(o8,Acr),e(Z,ycr),e(Z,r8),e(r8,$_e),e($_e,Lcr),e(r8,xcr),e(r8,dz),e(dz,$cr),e(r8,kcr),e(Z,Scr),e(Z,t8),e(t8,k_e),e(k_e,Rcr),e(t8,Bcr),e(t8,cz),e(cz,Pcr),e(t8,Icr),e(Z,qcr),e(Z,a8),e(a8,S_e),e(S_e,Ncr),e(a8,jcr),e(a8,fz),e(fz,Dcr),e(a8,Gcr),e(Z,Ocr),e(Z,n8),e(n8,R_e),e(R_e,Vcr),e(n8,Xcr),e(n8,mz),e(mz,zcr),e(n8,Qcr),e(Z,Wcr),e(Z,s8),e(s8,B_e),e(B_e,Hcr),e(s8,Ucr),e(s8,gz),e(gz,Jcr),e(s8,Ycr),e(Z,Kcr),e(Z,l8),e(l8,P_e),e(P_e,Zcr),e(l8,efr),e(l8,hz),e(hz,ofr),e(l8,rfr),e(Z,tfr),e(Z,i8),e(i8,I_e),e(I_e,afr),e(i8,nfr),e(i8,uz),e(uz,sfr),e(i8,lfr),e(Z,ifr),e(Z,d8),e(d8,q_e),e(q_e,dfr),e(d8,cfr),e(d8,pz),e(pz,ffr),e(d8,mfr),e(Z,gfr),e(Z,c8),e(c8,N_e),e(N_e,hfr),e(c8,ufr),e(c8,_z),e(_z,pfr),e(c8,_fr),e(Z,vfr),e(Z,f8),e(f8,j_e),e(j_e,bfr),e(f8,Ffr),e(f8,vz),e(vz,Tfr),e(f8,Mfr),e(Z,Efr),e(Z,m8),e(m8,D_e),e(D_e,Cfr),e(m8,wfr),e(m8,bz),e(bz,Afr),e(m8,yfr),e(Z,Lfr),e(Z,g8),e(g8,G_e),e(G_e,xfr),e(g8,$fr),e(g8,Fz),e(Fz,kfr),e(g8,Sfr),e(Z,Rfr),e(Z,h8),e(h8,O_e),e(O_e,Bfr),e(h8,Pfr),e(h8,Tz),e(Tz,Ifr),e(h8,qfr),e(Z,Nfr),e(Z,u8),e(u8,V_e),e(V_e,jfr),e(u8,Dfr),e(u8,Mz),e(Mz,Gfr),e(u8,Ofr),e(Z,Vfr),e(Z,p8),e(p8,X_e),e(X_e,Xfr),e(p8,zfr),e(p8,Ez),e(Ez,Qfr),e(p8,Wfr),e(Z,Hfr),e(Z,_8),e(_8,z_e),e(z_e,Ufr),e(_8,Jfr),e(_8,Cz),e(Cz,Yfr),e(_8,Kfr),e(Z,Zfr),e(Z,v8),e(v8,Q_e),e(Q_e,emr),e(v8,omr),e(v8,wz),e(wz,rmr),e(v8,tmr),e(Lr,amr),M(b8,Lr,null),v(f,$Se,_),v(f,Xd,_),e(Xd,F8),e(F8,W_e),M(Zy,W_e,null),e(Xd,nmr),e(Xd,H_e),e(H_e,smr),v(f,kSe,_),v(f,rr,_),M(eL,rr,null),e(rr,lmr),e(rr,zd),e(zd,imr),e(zd,Az),e(Az,dmr),e(zd,cmr),e(zd,yz),e(yz,fmr),e(zd,mmr),e(rr,gmr),e(rr,oL),e(oL,hmr),e(oL,U_e),e(U_e,umr),e(oL,pmr),e(rr,_mr),e(rr,xt),M(rL,xt,null),e(xt,vmr),e(xt,J_e),e(J_e,bmr),e(xt,Fmr),e(xt,Qd),e(Qd,Tmr),e(Qd,Y_e),e(Y_e,Mmr),e(Qd,Emr),e(Qd,Lz),e(Lz,Cmr),e(Qd,wmr),e(xt,Amr),M(T8,xt,null),e(rr,ymr),e(rr,xr),M(tL,xr,null),e(xr,Lmr),e(xr,K_e),e(K_e,xmr),e(xr,$mr),e(xr,en),e(en,kmr),e(en,Z_e),e(Z_e,Smr),e(en,Rmr),e(en,eve),e(eve,Bmr),e(en,Pmr),e(en,ove),e(ove,Imr),e(en,qmr),e(xr,Nmr),e(xr,ge),e(ge,M8),e(M8,rve),e(rve,jmr),e(M8,Dmr),e(M8,xz),e(xz,Gmr),e(M8,Omr),e(ge,Vmr),e(ge,E8),e(E8,tve),e(tve,Xmr),e(E8,zmr),e(E8,$z),e($z,Qmr),e(E8,Wmr),e(ge,Hmr),e(ge,C8),e(C8,ave),e(ave,Umr),e(C8,Jmr),e(C8,kz),e(kz,Ymr),e(C8,Kmr),e(ge,Zmr),e(ge,w8),e(w8,nve),e(nve,egr),e(w8,ogr),e(w8,Sz),e(Sz,rgr),e(w8,tgr),e(ge,agr),e(ge,A8),e(A8,sve),e(sve,ngr),e(A8,sgr),e(A8,Rz),e(Rz,lgr),e(A8,igr),e(ge,dgr),e(ge,y8),e(y8,lve),e(lve,cgr),e(y8,fgr),e(y8,Bz),e(Bz,mgr),e(y8,ggr),e(ge,hgr),e(ge,L8),e(L8,ive),e(ive,ugr),e(L8,pgr),e(L8,Pz),e(Pz,_gr),e(L8,vgr),e(ge,bgr),e(ge,x8),e(x8,dve),e(dve,Fgr),e(x8,Tgr),e(x8,Iz),e(Iz,Mgr),e(x8,Egr),e(ge,Cgr),e(ge,$8),e($8,cve),e(cve,wgr),e($8,Agr),e($8,qz),e(qz,ygr),e($8,Lgr),e(ge,xgr),e(ge,k8),e(k8,fve),e(fve,$gr),e(k8,kgr),e(k8,Nz),e(Nz,Sgr),e(k8,Rgr),e(ge,Bgr),e(ge,S8),e(S8,mve),e(mve,Pgr),e(S8,Igr),e(S8,jz),e(jz,qgr),e(S8,Ngr),e(ge,jgr),e(ge,R8),e(R8,gve),e(gve,Dgr),e(R8,Ggr),e(R8,Dz),e(Dz,Ogr),e(R8,Vgr),e(ge,Xgr),e(ge,B8),e(B8,hve),e(hve,zgr),e(B8,Qgr),e(B8,Gz),e(Gz,Wgr),e(B8,Hgr),e(ge,Ugr),e(ge,P8),e(P8,uve),e(uve,Jgr),e(P8,Ygr),e(P8,Oz),e(Oz,Kgr),e(P8,Zgr),e(ge,ehr),e(ge,I8),e(I8,pve),e(pve,ohr),e(I8,rhr),e(I8,Vz),e(Vz,thr),e(I8,ahr),e(ge,nhr),e(ge,q8),e(q8,_ve),e(_ve,shr),e(q8,lhr),e(q8,Xz),e(Xz,ihr),e(q8,dhr),e(ge,chr),e(ge,N8),e(N8,vve),e(vve,fhr),e(N8,mhr),e(N8,zz),e(zz,ghr),e(N8,hhr),e(xr,uhr),M(j8,xr,null),v(f,SSe,_),v(f,Wd,_),e(Wd,D8),e(D8,bve),M(aL,bve,null),e(Wd,phr),e(Wd,Fve),e(Fve,_hr),v(f,RSe,_),v(f,tr,_),M(nL,tr,null),e(tr,vhr),e(tr,Hd),e(Hd,bhr),e(Hd,Qz),e(Qz,Fhr),e(Hd,Thr),e(Hd,Wz),e(Wz,Mhr),e(Hd,Ehr),e(tr,Chr),e(tr,sL),e(sL,whr),e(sL,Tve),e(Tve,Ahr),e(sL,yhr),e(tr,Lhr),e(tr,$t),M(lL,$t,null),e($t,xhr),e($t,Mve),e(Mve,$hr),e($t,khr),e($t,Ud),e(Ud,Shr),e(Ud,Eve),e(Eve,Rhr),e(Ud,Bhr),e(Ud,Hz),e(Hz,Phr),e(Ud,Ihr),e($t,qhr),M(G8,$t,null),e(tr,Nhr),e(tr,$r),M(iL,$r,null),e($r,jhr),e($r,Cve),e(Cve,Dhr),e($r,Ghr),e($r,on),e(on,Ohr),e(on,wve),e(wve,Vhr),e(on,Xhr),e(on,Ave),e(Ave,zhr),e(on,Qhr),e(on,yve),e(yve,Whr),e(on,Hhr),e($r,Uhr),e($r,Lve),e(Lve,O8),e(O8,xve),e(xve,Jhr),e(O8,Yhr),e(O8,Uz),e(Uz,Khr),e(O8,Zhr),e($r,eur),M(V8,$r,null),v(f,BSe,_),v(f,Jd,_),e(Jd,X8),e(X8,$ve),M(dL,$ve,null),e(Jd,our),e(Jd,kve),e(kve,rur),v(f,PSe,_),v(f,ar,_),M(cL,ar,null),e(ar,tur),e(ar,Yd),e(Yd,aur),e(Yd,Jz),e(Jz,nur),e(Yd,sur),e(Yd,Yz),e(Yz,lur),e(Yd,iur),e(ar,dur),e(ar,fL),e(fL,cur),e(fL,Sve),e(Sve,fur),e(fL,mur),e(ar,gur),e(ar,kt),M(mL,kt,null),e(kt,hur),e(kt,Rve),e(Rve,uur),e(kt,pur),e(kt,Kd),e(Kd,_ur),e(Kd,Bve),e(Bve,vur),e(Kd,bur),e(Kd,Kz),e(Kz,Fur),e(Kd,Tur),e(kt,Mur),M(z8,kt,null),e(ar,Eur),e(ar,kr),M(gL,kr,null),e(kr,Cur),e(kr,Pve),e(Pve,wur),e(kr,Aur),e(kr,rn),e(rn,yur),e(rn,Ive),e(Ive,Lur),e(rn,xur),e(rn,qve),e(qve,$ur),e(rn,kur),e(rn,Nve),e(Nve,Sur),e(rn,Rur),e(kr,Bur),e(kr,le),e(le,Q8),e(Q8,jve),e(jve,Pur),e(Q8,Iur),e(Q8,Zz),e(Zz,qur),e(Q8,Nur),e(le,jur),e(le,W8),e(W8,Dve),e(Dve,Dur),e(W8,Gur),e(W8,eQ),e(eQ,Our),e(W8,Vur),e(le,Xur),e(le,H8),e(H8,Gve),e(Gve,zur),e(H8,Qur),e(H8,oQ),e(oQ,Wur),e(H8,Hur),e(le,Uur),e(le,U8),e(U8,Ove),e(Ove,Jur),e(U8,Yur),e(U8,rQ),e(rQ,Kur),e(U8,Zur),e(le,epr),e(le,J8),e(J8,Vve),e(Vve,opr),e(J8,rpr),e(J8,tQ),e(tQ,tpr),e(J8,apr),e(le,npr),e(le,Y8),e(Y8,Xve),e(Xve,spr),e(Y8,lpr),e(Y8,aQ),e(aQ,ipr),e(Y8,dpr),e(le,cpr),e(le,K8),e(K8,zve),e(zve,fpr),e(K8,mpr),e(K8,nQ),e(nQ,gpr),e(K8,hpr),e(le,upr),e(le,Z8),e(Z8,Qve),e(Qve,ppr),e(Z8,_pr),e(Z8,sQ),e(sQ,vpr),e(Z8,bpr),e(le,Fpr),e(le,eM),e(eM,Wve),e(Wve,Tpr),e(eM,Mpr),e(eM,lQ),e(lQ,Epr),e(eM,Cpr),e(le,wpr),e(le,oM),e(oM,Hve),e(Hve,Apr),e(oM,ypr),e(oM,iQ),e(iQ,Lpr),e(oM,xpr),e(le,$pr),e(le,rM),e(rM,Uve),e(Uve,kpr),e(rM,Spr),e(rM,dQ),e(dQ,Rpr),e(rM,Bpr),e(le,Ppr),e(le,tM),e(tM,Jve),e(Jve,Ipr),e(tM,qpr),e(tM,cQ),e(cQ,Npr),e(tM,jpr),e(le,Dpr),e(le,aM),e(aM,Yve),e(Yve,Gpr),e(aM,Opr),e(aM,fQ),e(fQ,Vpr),e(aM,Xpr),e(le,zpr),e(le,nM),e(nM,Kve),e(Kve,Qpr),e(nM,Wpr),e(nM,mQ),e(mQ,Hpr),e(nM,Upr),e(le,Jpr),e(le,sM),e(sM,Zve),e(Zve,Ypr),e(sM,Kpr),e(sM,gQ),e(gQ,Zpr),e(sM,e_r),e(le,o_r),e(le,lM),e(lM,e1e),e(e1e,r_r),e(lM,t_r),e(lM,hQ),e(hQ,a_r),e(lM,n_r),e(le,s_r),e(le,iM),e(iM,o1e),e(o1e,l_r),e(iM,i_r),e(iM,uQ),e(uQ,d_r),e(iM,c_r),e(le,f_r),e(le,dM),e(dM,r1e),e(r1e,m_r),e(dM,g_r),e(dM,pQ),e(pQ,h_r),e(dM,u_r),e(le,p_r),e(le,cM),e(cM,t1e),e(t1e,__r),e(cM,v_r),e(cM,_Q),e(_Q,b_r),e(cM,F_r),e(le,T_r),e(le,fM),e(fM,a1e),e(a1e,M_r),e(fM,E_r),e(fM,vQ),e(vQ,C_r),e(fM,w_r),e(kr,A_r),M(mM,kr,null),v(f,ISe,_),v(f,Zd,_),e(Zd,gM),e(gM,n1e),M(hL,n1e,null),e(Zd,y_r),e(Zd,s1e),e(s1e,L_r),v(f,qSe,_),v(f,nr,_),M(uL,nr,null),e(nr,x_r),e(nr,ec),e(ec,$_r),e(ec,bQ),e(bQ,k_r),e(ec,S_r),e(ec,FQ),e(FQ,R_r),e(ec,B_r),e(nr,P_r),e(nr,pL),e(pL,I_r),e(pL,l1e),e(l1e,q_r),e(pL,N_r),e(nr,j_r),e(nr,St),M(_L,St,null),e(St,D_r),e(St,i1e),e(i1e,G_r),e(St,O_r),e(St,oc),e(oc,V_r),e(oc,d1e),e(d1e,X_r),e(oc,z_r),e(oc,TQ),e(TQ,Q_r),e(oc,W_r),e(St,H_r),M(hM,St,null),e(nr,U_r),e(nr,Sr),M(vL,Sr,null),e(Sr,J_r),e(Sr,c1e),e(c1e,Y_r),e(Sr,K_r),e(Sr,tn),e(tn,Z_r),e(tn,f1e),e(f1e,evr),e(tn,ovr),e(tn,m1e),e(m1e,rvr),e(tn,tvr),e(tn,g1e),e(g1e,avr),e(tn,nvr),e(Sr,svr),e(Sr,ie),e(ie,uM),e(uM,h1e),e(h1e,lvr),e(uM,ivr),e(uM,MQ),e(MQ,dvr),e(uM,cvr),e(ie,fvr),e(ie,pM),e(pM,u1e),e(u1e,mvr),e(pM,gvr),e(pM,EQ),e(EQ,hvr),e(pM,uvr),e(ie,pvr),e(ie,_M),e(_M,p1e),e(p1e,_vr),e(_M,vvr),e(_M,CQ),e(CQ,bvr),e(_M,Fvr),e(ie,Tvr),e(ie,vM),e(vM,_1e),e(_1e,Mvr),e(vM,Evr),e(vM,wQ),e(wQ,Cvr),e(vM,wvr),e(ie,Avr),e(ie,bM),e(bM,v1e),e(v1e,yvr),e(bM,Lvr),e(bM,AQ),e(AQ,xvr),e(bM,$vr),e(ie,kvr),e(ie,FM),e(FM,b1e),e(b1e,Svr),e(FM,Rvr),e(FM,yQ),e(yQ,Bvr),e(FM,Pvr),e(ie,Ivr),e(ie,TM),e(TM,F1e),e(F1e,qvr),e(TM,Nvr),e(TM,LQ),e(LQ,jvr),e(TM,Dvr),e(ie,Gvr),e(ie,MM),e(MM,T1e),e(T1e,Ovr),e(MM,Vvr),e(MM,xQ),e(xQ,Xvr),e(MM,zvr),e(ie,Qvr),e(ie,EM),e(EM,M1e),e(M1e,Wvr),e(EM,Hvr),e(EM,$Q),e($Q,Uvr),e(EM,Jvr),e(ie,Yvr),e(ie,CM),e(CM,E1e),e(E1e,Kvr),e(CM,Zvr),e(CM,kQ),e(kQ,e1r),e(CM,o1r),e(ie,r1r),e(ie,wM),e(wM,C1e),e(C1e,t1r),e(wM,a1r),e(wM,SQ),e(SQ,n1r),e(wM,s1r),e(ie,l1r),e(ie,AM),e(AM,w1e),e(w1e,i1r),e(AM,d1r),e(AM,RQ),e(RQ,c1r),e(AM,f1r),e(ie,m1r),e(ie,yM),e(yM,A1e),e(A1e,g1r),e(yM,h1r),e(yM,BQ),e(BQ,u1r),e(yM,p1r),e(ie,_1r),e(ie,LM),e(LM,y1e),e(y1e,v1r),e(LM,b1r),e(LM,PQ),e(PQ,F1r),e(LM,T1r),e(ie,M1r),e(ie,xM),e(xM,L1e),e(L1e,E1r),e(xM,C1r),e(xM,IQ),e(IQ,w1r),e(xM,A1r),e(ie,y1r),e(ie,$M),e($M,x1e),e(x1e,L1r),e($M,x1r),e($M,qQ),e(qQ,$1r),e($M,k1r),e(ie,S1r),e(ie,kM),e(kM,$1e),e($1e,R1r),e(kM,B1r),e(kM,NQ),e(NQ,P1r),e(kM,I1r),e(ie,q1r),e(ie,SM),e(SM,k1e),e(k1e,N1r),e(SM,j1r),e(SM,jQ),e(jQ,D1r),e(SM,G1r),e(ie,O1r),e(ie,RM),e(RM,S1e),e(S1e,V1r),e(RM,X1r),e(RM,DQ),e(DQ,z1r),e(RM,Q1r),e(ie,W1r),e(ie,BM),e(BM,R1e),e(R1e,H1r),e(BM,U1r),e(BM,GQ),e(GQ,J1r),e(BM,Y1r),e(Sr,K1r),M(PM,Sr,null),v(f,NSe,_),v(f,rc,_),e(rc,IM),e(IM,B1e),M(bL,B1e,null),e(rc,Z1r),e(rc,P1e),e(P1e,ebr),v(f,jSe,_),v(f,sr,_),M(FL,sr,null),e(sr,obr),e(sr,tc),e(tc,rbr),e(tc,OQ),e(OQ,tbr),e(tc,abr),e(tc,VQ),e(VQ,nbr),e(tc,sbr),e(sr,lbr),e(sr,TL),e(TL,ibr),e(TL,I1e),e(I1e,dbr),e(TL,cbr),e(sr,fbr),e(sr,Rt),M(ML,Rt,null),e(Rt,mbr),e(Rt,q1e),e(q1e,gbr),e(Rt,hbr),e(Rt,ac),e(ac,ubr),e(ac,N1e),e(N1e,pbr),e(ac,_br),e(ac,XQ),e(XQ,vbr),e(ac,bbr),e(Rt,Fbr),M(qM,Rt,null),e(sr,Tbr),e(sr,Rr),M(EL,Rr,null),e(Rr,Mbr),e(Rr,j1e),e(j1e,Ebr),e(Rr,Cbr),e(Rr,an),e(an,wbr),e(an,D1e),e(D1e,Abr),e(an,ybr),e(an,G1e),e(G1e,Lbr),e(an,xbr),e(an,O1e),e(O1e,$br),e(an,kbr),e(Rr,Sbr),e(Rr,V1e),e(V1e,NM),e(NM,X1e),e(X1e,Rbr),e(NM,Bbr),e(NM,zQ),e(zQ,Pbr),e(NM,Ibr),e(Rr,qbr),M(jM,Rr,null),v(f,DSe,_),v(f,nc,_),e(nc,DM),e(DM,z1e),M(CL,z1e,null),e(nc,Nbr),e(nc,Q1e),e(Q1e,jbr),v(f,GSe,_),v(f,lr,_),M(wL,lr,null),e(lr,Dbr),e(lr,sc),e(sc,Gbr),e(sc,QQ),e(QQ,Obr),e(sc,Vbr),e(sc,WQ),e(WQ,Xbr),e(sc,zbr),e(lr,Qbr),e(lr,AL),e(AL,Wbr),e(AL,W1e),e(W1e,Hbr),e(AL,Ubr),e(lr,Jbr),e(lr,Bt),M(yL,Bt,null),e(Bt,Ybr),e(Bt,H1e),e(H1e,Kbr),e(Bt,Zbr),e(Bt,lc),e(lc,e4r),e(lc,U1e),e(U1e,o4r),e(lc,r4r),e(lc,HQ),e(HQ,t4r),e(lc,a4r),e(Bt,n4r),M(GM,Bt,null),e(lr,s4r),e(lr,Br),M(LL,Br,null),e(Br,l4r),e(Br,J1e),e(J1e,i4r),e(Br,d4r),e(Br,nn),e(nn,c4r),e(nn,Y1e),e(Y1e,f4r),e(nn,m4r),e(nn,K1e),e(K1e,g4r),e(nn,h4r),e(nn,Z1e),e(Z1e,u4r),e(nn,p4r),e(Br,_4r),e(Br,ebe),e(ebe,OM),e(OM,obe),e(obe,v4r),e(OM,b4r),e(OM,UQ),e(UQ,F4r),e(OM,T4r),e(Br,M4r),M(VM,Br,null),v(f,OSe,_),v(f,ic,_),e(ic,XM),e(XM,rbe),M(xL,rbe,null),e(ic,E4r),e(ic,tbe),e(tbe,C4r),v(f,VSe,_),v(f,ir,_),M($L,ir,null),e(ir,w4r),e(ir,dc),e(dc,A4r),e(dc,JQ),e(JQ,y4r),e(dc,L4r),e(dc,YQ),e(YQ,x4r),e(dc,$4r),e(ir,k4r),e(ir,kL),e(kL,S4r),e(kL,abe),e(abe,R4r),e(kL,B4r),e(ir,P4r),e(ir,Pt),M(SL,Pt,null),e(Pt,I4r),e(Pt,nbe),e(nbe,q4r),e(Pt,N4r),e(Pt,cc),e(cc,j4r),e(cc,sbe),e(sbe,D4r),e(cc,G4r),e(cc,KQ),e(KQ,O4r),e(cc,V4r),e(Pt,X4r),M(zM,Pt,null),e(ir,z4r),e(ir,Pr),M(RL,Pr,null),e(Pr,Q4r),e(Pr,lbe),e(lbe,W4r),e(Pr,H4r),e(Pr,sn),e(sn,U4r),e(sn,ibe),e(ibe,J4r),e(sn,Y4r),e(sn,dbe),e(dbe,K4r),e(sn,Z4r),e(sn,cbe),e(cbe,e2r),e(sn,o2r),e(Pr,r2r),e(Pr,oe),e(oe,QM),e(QM,fbe),e(fbe,t2r),e(QM,a2r),e(QM,ZQ),e(ZQ,n2r),e(QM,s2r),e(oe,l2r),e(oe,WM),e(WM,mbe),e(mbe,i2r),e(WM,d2r),e(WM,eW),e(eW,c2r),e(WM,f2r),e(oe,m2r),e(oe,HM),e(HM,gbe),e(gbe,g2r),e(HM,h2r),e(HM,oW),e(oW,u2r),e(HM,p2r),e(oe,_2r),e(oe,UM),e(UM,hbe),e(hbe,v2r),e(UM,b2r),e(UM,rW),e(rW,F2r),e(UM,T2r),e(oe,M2r),e(oe,JM),e(JM,ube),e(ube,E2r),e(JM,C2r),e(JM,tW),e(tW,w2r),e(JM,A2r),e(oe,y2r),e(oe,YM),e(YM,pbe),e(pbe,L2r),e(YM,x2r),e(YM,aW),e(aW,$2r),e(YM,k2r),e(oe,S2r),e(oe,KM),e(KM,_be),e(_be,R2r),e(KM,B2r),e(KM,nW),e(nW,P2r),e(KM,I2r),e(oe,q2r),e(oe,ZM),e(ZM,vbe),e(vbe,N2r),e(ZM,j2r),e(ZM,sW),e(sW,D2r),e(ZM,G2r),e(oe,O2r),e(oe,eE),e(eE,bbe),e(bbe,V2r),e(eE,X2r),e(eE,lW),e(lW,z2r),e(eE,Q2r),e(oe,W2r),e(oe,oE),e(oE,Fbe),e(Fbe,H2r),e(oE,U2r),e(oE,iW),e(iW,J2r),e(oE,Y2r),e(oe,K2r),e(oe,rE),e(rE,Tbe),e(Tbe,Z2r),e(rE,eFr),e(rE,dW),e(dW,oFr),e(rE,rFr),e(oe,tFr),e(oe,tE),e(tE,Mbe),e(Mbe,aFr),e(tE,nFr),e(tE,cW),e(cW,sFr),e(tE,lFr),e(oe,iFr),e(oe,aE),e(aE,Ebe),e(Ebe,dFr),e(aE,cFr),e(aE,fW),e(fW,fFr),e(aE,mFr),e(oe,gFr),e(oe,nE),e(nE,Cbe),e(Cbe,hFr),e(nE,uFr),e(nE,mW),e(mW,pFr),e(nE,_Fr),e(oe,vFr),e(oe,sE),e(sE,wbe),e(wbe,bFr),e(sE,FFr),e(sE,gW),e(gW,TFr),e(sE,MFr),e(oe,EFr),e(oe,lE),e(lE,Abe),e(Abe,CFr),e(lE,wFr),e(lE,hW),e(hW,AFr),e(lE,yFr),e(oe,LFr),e(oe,iE),e(iE,ybe),e(ybe,xFr),e(iE,$Fr),e(iE,uW),e(uW,kFr),e(iE,SFr),e(oe,RFr),e(oe,dE),e(dE,Lbe),e(Lbe,BFr),e(dE,PFr),e(dE,pW),e(pW,IFr),e(dE,qFr),e(oe,NFr),e(oe,cE),e(cE,xbe),e(xbe,jFr),e(cE,DFr),e(cE,_W),e(_W,GFr),e(cE,OFr),e(oe,VFr),e(oe,fE),e(fE,$be),e($be,XFr),e(fE,zFr),e(fE,vW),e(vW,QFr),e(fE,WFr),e(oe,HFr),e(oe,mE),e(mE,kbe),e(kbe,UFr),e(mE,JFr),e(mE,bW),e(bW,YFr),e(mE,KFr),e(oe,ZFr),e(oe,gE),e(gE,Sbe),e(Sbe,e0r),e(gE,o0r),e(gE,FW),e(FW,r0r),e(gE,t0r),e(oe,a0r),e(oe,hE),e(hE,Rbe),e(Rbe,n0r),e(hE,s0r),e(hE,TW),e(TW,l0r),e(hE,i0r),e(oe,d0r),e(oe,uE),e(uE,Bbe),e(Bbe,c0r),e(uE,f0r),e(uE,MW),e(MW,m0r),e(uE,g0r),e(oe,h0r),e(oe,pE),e(pE,Pbe),e(Pbe,u0r),e(pE,p0r),e(pE,EW),e(EW,_0r),e(pE,v0r),e(Pr,b0r),M(_E,Pr,null),v(f,XSe,_),v(f,fc,_),e(fc,vE),e(vE,Ibe),M(BL,Ibe,null),e(fc,F0r),e(fc,qbe),e(qbe,T0r),v(f,zSe,_),v(f,dr,_),M(PL,dr,null),e(dr,M0r),e(dr,mc),e(mc,E0r),e(mc,CW),e(CW,C0r),e(mc,w0r),e(mc,wW),e(wW,A0r),e(mc,y0r),e(dr,L0r),e(dr,IL),e(IL,x0r),e(IL,Nbe),e(Nbe,$0r),e(IL,k0r),e(dr,S0r),e(dr,It),M(qL,It,null),e(It,R0r),e(It,jbe),e(jbe,B0r),e(It,P0r),e(It,gc),e(gc,I0r),e(gc,Dbe),e(Dbe,q0r),e(gc,N0r),e(gc,AW),e(AW,j0r),e(gc,D0r),e(It,G0r),M(bE,It,null),e(dr,O0r),e(dr,Ir),M(NL,Ir,null),e(Ir,V0r),e(Ir,Gbe),e(Gbe,X0r),e(Ir,z0r),e(Ir,ln),e(ln,Q0r),e(ln,Obe),e(Obe,W0r),e(ln,H0r),e(ln,Vbe),e(Vbe,U0r),e(ln,J0r),e(ln,Xbe),e(Xbe,Y0r),e(ln,K0r),e(Ir,Z0r),e(Ir,Hr),e(Hr,FE),e(FE,zbe),e(zbe,eTr),e(FE,oTr),e(FE,yW),e(yW,rTr),e(FE,tTr),e(Hr,aTr),e(Hr,TE),e(TE,Qbe),e(Qbe,nTr),e(TE,sTr),e(TE,LW),e(LW,lTr),e(TE,iTr),e(Hr,dTr),e(Hr,ME),e(ME,Wbe),e(Wbe,cTr),e(ME,fTr),e(ME,xW),e(xW,mTr),e(ME,gTr),e(Hr,hTr),e(Hr,EE),e(EE,Hbe),e(Hbe,uTr),e(EE,pTr),e(EE,$W),e($W,_Tr),e(EE,vTr),e(Hr,bTr),e(Hr,CE),e(CE,Ube),e(Ube,FTr),e(CE,TTr),e(CE,kW),e(kW,MTr),e(CE,ETr),e(Ir,CTr),M(wE,Ir,null),v(f,QSe,_),v(f,hc,_),e(hc,AE),e(AE,Jbe),M(jL,Jbe,null),e(hc,wTr),e(hc,Ybe),e(Ybe,ATr),v(f,WSe,_),v(f,cr,_),M(DL,cr,null),e(cr,yTr),e(cr,uc),e(uc,LTr),e(uc,SW),e(SW,xTr),e(uc,$Tr),e(uc,RW),e(RW,kTr),e(uc,STr),e(cr,RTr),e(cr,GL),e(GL,BTr),e(GL,Kbe),e(Kbe,PTr),e(GL,ITr),e(cr,qTr),e(cr,qt),M(OL,qt,null),e(qt,NTr),e(qt,Zbe),e(Zbe,jTr),e(qt,DTr),e(qt,pc),e(pc,GTr),e(pc,e4e),e(e4e,OTr),e(pc,VTr),e(pc,BW),e(BW,XTr),e(pc,zTr),e(qt,QTr),M(yE,qt,null),e(cr,WTr),e(cr,qr),M(VL,qr,null),e(qr,HTr),e(qr,o4e),e(o4e,UTr),e(qr,JTr),e(qr,dn),e(dn,YTr),e(dn,r4e),e(r4e,KTr),e(dn,ZTr),e(dn,t4e),e(t4e,e8r),e(dn,o8r),e(dn,a4e),e(a4e,r8r),e(dn,t8r),e(qr,a8r),e(qr,be),e(be,LE),e(LE,n4e),e(n4e,n8r),e(LE,s8r),e(LE,PW),e(PW,l8r),e(LE,i8r),e(be,d8r),e(be,xE),e(xE,s4e),e(s4e,c8r),e(xE,f8r),e(xE,IW),e(IW,m8r),e(xE,g8r),e(be,h8r),e(be,$E),e($E,l4e),e(l4e,u8r),e($E,p8r),e($E,qW),e(qW,_8r),e($E,v8r),e(be,b8r),e(be,kE),e(kE,i4e),e(i4e,F8r),e(kE,T8r),e(kE,NW),e(NW,M8r),e(kE,E8r),e(be,C8r),e(be,SE),e(SE,d4e),e(d4e,w8r),e(SE,A8r),e(SE,jW),e(jW,y8r),e(SE,L8r),e(be,x8r),e(be,RE),e(RE,c4e),e(c4e,$8r),e(RE,k8r),e(RE,DW),e(DW,S8r),e(RE,R8r),e(be,B8r),e(be,BE),e(BE,f4e),e(f4e,P8r),e(BE,I8r),e(BE,GW),e(GW,q8r),e(BE,N8r),e(be,j8r),e(be,PE),e(PE,m4e),e(m4e,D8r),e(PE,G8r),e(PE,OW),e(OW,O8r),e(PE,V8r),e(be,X8r),e(be,IE),e(IE,g4e),e(g4e,z8r),e(IE,Q8r),e(IE,VW),e(VW,W8r),e(IE,H8r),e(be,U8r),e(be,qE),e(qE,h4e),e(h4e,J8r),e(qE,Y8r),e(qE,XW),e(XW,K8r),e(qE,Z8r),e(be,eMr),e(be,NE),e(NE,u4e),e(u4e,oMr),e(NE,rMr),e(NE,zW),e(zW,tMr),e(NE,aMr),e(be,nMr),e(be,jE),e(jE,p4e),e(p4e,sMr),e(jE,lMr),e(jE,QW),e(QW,iMr),e(jE,dMr),e(qr,cMr),M(DE,qr,null),v(f,HSe,_),v(f,_c,_),e(_c,GE),e(GE,_4e),M(XL,_4e,null),e(_c,fMr),e(_c,v4e),e(v4e,mMr),v(f,USe,_),v(f,fr,_),M(zL,fr,null),e(fr,gMr),e(fr,vc),e(vc,hMr),e(vc,WW),e(WW,uMr),e(vc,pMr),e(vc,HW),e(HW,_Mr),e(vc,vMr),e(fr,bMr),e(fr,QL),e(QL,FMr),e(QL,b4e),e(b4e,TMr),e(QL,MMr),e(fr,EMr),e(fr,Nt),M(WL,Nt,null),e(Nt,CMr),e(Nt,F4e),e(F4e,wMr),e(Nt,AMr),e(Nt,bc),e(bc,yMr),e(bc,T4e),e(T4e,LMr),e(bc,xMr),e(bc,UW),e(UW,$Mr),e(bc,kMr),e(Nt,SMr),M(OE,Nt,null),e(fr,RMr),e(fr,Nr),M(HL,Nr,null),e(Nr,BMr),e(Nr,M4e),e(M4e,PMr),e(Nr,IMr),e(Nr,cn),e(cn,qMr),e(cn,E4e),e(E4e,NMr),e(cn,jMr),e(cn,C4e),e(C4e,DMr),e(cn,GMr),e(cn,w4e),e(w4e,OMr),e(cn,VMr),e(Nr,XMr),e(Nr,we),e(we,VE),e(VE,A4e),e(A4e,zMr),e(VE,QMr),e(VE,JW),e(JW,WMr),e(VE,HMr),e(we,UMr),e(we,XE),e(XE,y4e),e(y4e,JMr),e(XE,YMr),e(XE,YW),e(YW,KMr),e(XE,ZMr),e(we,eEr),e(we,zE),e(zE,L4e),e(L4e,oEr),e(zE,rEr),e(zE,KW),e(KW,tEr),e(zE,aEr),e(we,nEr),e(we,QE),e(QE,x4e),e(x4e,sEr),e(QE,lEr),e(QE,ZW),e(ZW,iEr),e(QE,dEr),e(we,cEr),e(we,WE),e(WE,$4e),e($4e,fEr),e(WE,mEr),e(WE,eH),e(eH,gEr),e(WE,hEr),e(we,uEr),e(we,HE),e(HE,k4e),e(k4e,pEr),e(HE,_Er),e(HE,oH),e(oH,vEr),e(HE,bEr),e(we,FEr),e(we,UE),e(UE,S4e),e(S4e,TEr),e(UE,MEr),e(UE,rH),e(rH,EEr),e(UE,CEr),e(we,wEr),e(we,JE),e(JE,R4e),e(R4e,AEr),e(JE,yEr),e(JE,tH),e(tH,LEr),e(JE,xEr),e(we,$Er),e(we,YE),e(YE,B4e),e(B4e,kEr),e(YE,SEr),e(YE,aH),e(aH,REr),e(YE,BEr),e(we,PEr),e(we,KE),e(KE,P4e),e(P4e,IEr),e(KE,qEr),e(KE,nH),e(nH,NEr),e(KE,jEr),e(Nr,DEr),M(ZE,Nr,null),v(f,JSe,_),v(f,Fc,_),e(Fc,e5),e(e5,I4e),M(UL,I4e,null),e(Fc,GEr),e(Fc,q4e),e(q4e,OEr),v(f,YSe,_),v(f,mr,_),M(JL,mr,null),e(mr,VEr),e(mr,Tc),e(Tc,XEr),e(Tc,sH),e(sH,zEr),e(Tc,QEr),e(Tc,lH),e(lH,WEr),e(Tc,HEr),e(mr,UEr),e(mr,YL),e(YL,JEr),e(YL,N4e),e(N4e,YEr),e(YL,KEr),e(mr,ZEr),e(mr,jt),M(KL,jt,null),e(jt,e5r),e(jt,j4e),e(j4e,o5r),e(jt,r5r),e(jt,Mc),e(Mc,t5r),e(Mc,D4e),e(D4e,a5r),e(Mc,n5r),e(Mc,iH),e(iH,s5r),e(Mc,l5r),e(jt,i5r),M(o5,jt,null),e(mr,d5r),e(mr,jr),M(ZL,jr,null),e(jr,c5r),e(jr,G4e),e(G4e,f5r),e(jr,m5r),e(jr,fn),e(fn,g5r),e(fn,O4e),e(O4e,h5r),e(fn,u5r),e(fn,V4e),e(V4e,p5r),e(fn,_5r),e(fn,X4e),e(X4e,v5r),e(fn,b5r),e(jr,F5r),e(jr,xe),e(xe,r5),e(r5,z4e),e(z4e,T5r),e(r5,M5r),e(r5,dH),e(dH,E5r),e(r5,C5r),e(xe,w5r),e(xe,t5),e(t5,Q4e),e(Q4e,A5r),e(t5,y5r),e(t5,cH),e(cH,L5r),e(t5,x5r),e(xe,$5r),e(xe,a5),e(a5,W4e),e(W4e,k5r),e(a5,S5r),e(a5,fH),e(fH,R5r),e(a5,B5r),e(xe,P5r),e(xe,n5),e(n5,H4e),e(H4e,I5r),e(n5,q5r),e(n5,mH),e(mH,N5r),e(n5,j5r),e(xe,D5r),e(xe,s5),e(s5,U4e),e(U4e,G5r),e(s5,O5r),e(s5,gH),e(gH,V5r),e(s5,X5r),e(xe,z5r),e(xe,l5),e(l5,J4e),e(J4e,Q5r),e(l5,W5r),e(l5,hH),e(hH,H5r),e(l5,U5r),e(xe,J5r),e(xe,i5),e(i5,Y4e),e(Y4e,Y5r),e(i5,K5r),e(i5,uH),e(uH,Z5r),e(i5,eCr),e(xe,oCr),e(xe,d5),e(d5,K4e),e(K4e,rCr),e(d5,tCr),e(d5,pH),e(pH,aCr),e(d5,nCr),e(xe,sCr),e(xe,c5),e(c5,Z4e),e(Z4e,lCr),e(c5,iCr),e(c5,_H),e(_H,dCr),e(c5,cCr),e(jr,fCr),M(f5,jr,null),v(f,KSe,_),v(f,Ec,_),e(Ec,m5),e(m5,e2e),M(ex,e2e,null),e(Ec,mCr),e(Ec,o2e),e(o2e,gCr),v(f,ZSe,_),v(f,gr,_),M(ox,gr,null),e(gr,hCr),e(gr,Cc),e(Cc,uCr),e(Cc,vH),e(vH,pCr),e(Cc,_Cr),e(Cc,bH),e(bH,vCr),e(Cc,bCr),e(gr,FCr),e(gr,rx),e(rx,TCr),e(rx,r2e),e(r2e,MCr),e(rx,ECr),e(gr,CCr),e(gr,Dt),M(tx,Dt,null),e(Dt,wCr),e(Dt,t2e),e(t2e,ACr),e(Dt,yCr),e(Dt,wc),e(wc,LCr),e(wc,a2e),e(a2e,xCr),e(wc,$Cr),e(wc,FH),e(FH,kCr),e(wc,SCr),e(Dt,RCr),M(g5,Dt,null),e(gr,BCr),e(gr,Dr),M(ax,Dr,null),e(Dr,PCr),e(Dr,n2e),e(n2e,ICr),e(Dr,qCr),e(Dr,mn),e(mn,NCr),e(mn,s2e),e(s2e,jCr),e(mn,DCr),e(mn,l2e),e(l2e,GCr),e(mn,OCr),e(mn,i2e),e(i2e,VCr),e(mn,XCr),e(Dr,zCr),e(Dr,Ae),e(Ae,h5),e(h5,d2e),e(d2e,QCr),e(h5,WCr),e(h5,TH),e(TH,HCr),e(h5,UCr),e(Ae,JCr),e(Ae,u5),e(u5,c2e),e(c2e,YCr),e(u5,KCr),e(u5,MH),e(MH,ZCr),e(u5,e3r),e(Ae,o3r),e(Ae,p5),e(p5,f2e),e(f2e,r3r),e(p5,t3r),e(p5,EH),e(EH,a3r),e(p5,n3r),e(Ae,s3r),e(Ae,_5),e(_5,m2e),e(m2e,l3r),e(_5,i3r),e(_5,CH),e(CH,d3r),e(_5,c3r),e(Ae,f3r),e(Ae,v5),e(v5,g2e),e(g2e,m3r),e(v5,g3r),e(v5,wH),e(wH,h3r),e(v5,u3r),e(Ae,p3r),e(Ae,b5),e(b5,h2e),e(h2e,_3r),e(b5,v3r),e(b5,AH),e(AH,b3r),e(b5,F3r),e(Ae,T3r),e(Ae,F5),e(F5,u2e),e(u2e,M3r),e(F5,E3r),e(F5,yH),e(yH,C3r),e(F5,w3r),e(Ae,A3r),e(Ae,T5),e(T5,p2e),e(p2e,y3r),e(T5,L3r),e(T5,LH),e(LH,x3r),e(T5,$3r),e(Ae,k3r),e(Ae,M5),e(M5,_2e),e(_2e,S3r),e(M5,R3r),e(M5,xH),e(xH,B3r),e(M5,P3r),e(Ae,I3r),e(Ae,E5),e(E5,v2e),e(v2e,q3r),e(E5,N3r),e(E5,$H),e($H,j3r),e(E5,D3r),e(Dr,G3r),M(C5,Dr,null),v(f,eRe,_),v(f,Ac,_),e(Ac,w5),e(w5,b2e),M(nx,b2e,null),e(Ac,O3r),e(Ac,F2e),e(F2e,V3r),v(f,oRe,_),v(f,hr,_),M(sx,hr,null),e(hr,X3r),e(hr,yc),e(yc,z3r),e(yc,kH),e(kH,Q3r),e(yc,W3r),e(yc,SH),e(SH,H3r),e(yc,U3r),e(hr,J3r),e(hr,lx),e(lx,Y3r),e(lx,T2e),e(T2e,K3r),e(lx,Z3r),e(hr,ewr),e(hr,Gt),M(ix,Gt,null),e(Gt,owr),e(Gt,M2e),e(M2e,rwr),e(Gt,twr),e(Gt,Lc),e(Lc,awr),e(Lc,E2e),e(E2e,nwr),e(Lc,swr),e(Lc,RH),e(RH,lwr),e(Lc,iwr),e(Gt,dwr),M(A5,Gt,null),e(hr,cwr),e(hr,Gr),M(dx,Gr,null),e(Gr,fwr),e(Gr,C2e),e(C2e,mwr),e(Gr,gwr),e(Gr,gn),e(gn,hwr),e(gn,w2e),e(w2e,uwr),e(gn,pwr),e(gn,A2e),e(A2e,_wr),e(gn,vwr),e(gn,y2e),e(y2e,bwr),e(gn,Fwr),e(Gr,Twr),e(Gr,ye),e(ye,y5),e(y5,L2e),e(L2e,Mwr),e(y5,Ewr),e(y5,BH),e(BH,Cwr),e(y5,wwr),e(ye,Awr),e(ye,L5),e(L5,x2e),e(x2e,ywr),e(L5,Lwr),e(L5,PH),e(PH,xwr),e(L5,$wr),e(ye,kwr),e(ye,x5),e(x5,$2e),e($2e,Swr),e(x5,Rwr),e(x5,IH),e(IH,Bwr),e(x5,Pwr),e(ye,Iwr),e(ye,$5),e($5,k2e),e(k2e,qwr),e($5,Nwr),e($5,qH),e(qH,jwr),e($5,Dwr),e(ye,Gwr),e(ye,k5),e(k5,S2e),e(S2e,Owr),e(k5,Vwr),e(k5,NH),e(NH,Xwr),e(k5,zwr),e(ye,Qwr),e(ye,S5),e(S5,R2e),e(R2e,Wwr),e(S5,Hwr),e(S5,jH),e(jH,Uwr),e(S5,Jwr),e(ye,Ywr),e(ye,R5),e(R5,B2e),e(B2e,Kwr),e(R5,Zwr),e(R5,DH),e(DH,eAr),e(R5,oAr),e(ye,rAr),e(ye,B5),e(B5,P2e),e(P2e,tAr),e(B5,aAr),e(B5,GH),e(GH,nAr),e(B5,sAr),e(ye,lAr),e(ye,P5),e(P5,I2e),e(I2e,iAr),e(P5,dAr),e(P5,OH),e(OH,cAr),e(P5,fAr),e(ye,mAr),e(ye,I5),e(I5,q2e),e(q2e,gAr),e(I5,hAr),e(I5,VH),e(VH,uAr),e(I5,pAr),e(Gr,_Ar),M(q5,Gr,null),v(f,rRe,_),v(f,xc,_),e(xc,N5),e(N5,N2e),M(cx,N2e,null),e(xc,vAr),e(xc,j2e),e(j2e,bAr),v(f,tRe,_),v(f,ur,_),M(fx,ur,null),e(ur,FAr),e(ur,$c),e($c,TAr),e($c,XH),e(XH,MAr),e($c,EAr),e($c,zH),e(zH,CAr),e($c,wAr),e(ur,AAr),e(ur,mx),e(mx,yAr),e(mx,D2e),e(D2e,LAr),e(mx,xAr),e(ur,$Ar),e(ur,Ot),M(gx,Ot,null),e(Ot,kAr),e(Ot,G2e),e(G2e,SAr),e(Ot,RAr),e(Ot,kc),e(kc,BAr),e(kc,O2e),e(O2e,PAr),e(kc,IAr),e(kc,QH),e(QH,qAr),e(kc,NAr),e(Ot,jAr),M(j5,Ot,null),e(ur,DAr),e(ur,Or),M(hx,Or,null),e(Or,GAr),e(Or,V2e),e(V2e,OAr),e(Or,VAr),e(Or,hn),e(hn,XAr),e(hn,X2e),e(X2e,zAr),e(hn,QAr),e(hn,z2e),e(z2e,WAr),e(hn,HAr),e(hn,Q2e),e(Q2e,UAr),e(hn,JAr),e(Or,YAr),e(Or,Ne),e(Ne,D5),e(D5,W2e),e(W2e,KAr),e(D5,ZAr),e(D5,WH),e(WH,e6r),e(D5,o6r),e(Ne,r6r),e(Ne,G5),e(G5,H2e),e(H2e,t6r),e(G5,a6r),e(G5,HH),e(HH,n6r),e(G5,s6r),e(Ne,l6r),e(Ne,O5),e(O5,U2e),e(U2e,i6r),e(O5,d6r),e(O5,UH),e(UH,c6r),e(O5,f6r),e(Ne,m6r),e(Ne,V5),e(V5,J2e),e(J2e,g6r),e(V5,h6r),e(V5,JH),e(JH,u6r),e(V5,p6r),e(Ne,_6r),e(Ne,X5),e(X5,Y2e),e(Y2e,v6r),e(X5,b6r),e(X5,YH),e(YH,F6r),e(X5,T6r),e(Ne,M6r),e(Ne,z5),e(z5,K2e),e(K2e,E6r),e(z5,C6r),e(z5,KH),e(KH,w6r),e(z5,A6r),e(Ne,y6r),e(Ne,Q5),e(Q5,Z2e),e(Z2e,L6r),e(Q5,x6r),e(Q5,ZH),e(ZH,$6r),e(Q5,k6r),e(Ne,S6r),e(Ne,W5),e(W5,eFe),e(eFe,R6r),e(W5,B6r),e(W5,eU),e(eU,P6r),e(W5,I6r),e(Or,q6r),M(H5,Or,null),v(f,aRe,_),v(f,Sc,_),e(Sc,U5),e(U5,oFe),M(ux,oFe,null),e(Sc,N6r),e(Sc,rFe),e(rFe,j6r),v(f,nRe,_),v(f,pr,_),M(px,pr,null),e(pr,D6r),e(pr,Rc),e(Rc,G6r),e(Rc,oU),e(oU,O6r),e(Rc,V6r),e(Rc,rU),e(rU,X6r),e(Rc,z6r),e(pr,Q6r),e(pr,_x),e(_x,W6r),e(_x,tFe),e(tFe,H6r),e(_x,U6r),e(pr,J6r),e(pr,Vt),M(vx,Vt,null),e(Vt,Y6r),e(Vt,aFe),e(aFe,K6r),e(Vt,Z6r),e(Vt,Bc),e(Bc,eyr),e(Bc,nFe),e(nFe,oyr),e(Bc,ryr),e(Bc,tU),e(tU,tyr),e(Bc,ayr),e(Vt,nyr),M(J5,Vt,null),e(pr,syr),e(pr,Vr),M(bx,Vr,null),e(Vr,lyr),e(Vr,sFe),e(sFe,iyr),e(Vr,dyr),e(Vr,un),e(un,cyr),e(un,lFe),e(lFe,fyr),e(un,myr),e(un,iFe),e(iFe,gyr),e(un,hyr),e(un,dFe),e(dFe,uyr),e(un,pyr),e(Vr,_yr),e(Vr,je),e(je,Y5),e(Y5,cFe),e(cFe,vyr),e(Y5,byr),e(Y5,aU),e(aU,Fyr),e(Y5,Tyr),e(je,Myr),e(je,K5),e(K5,fFe),e(fFe,Eyr),e(K5,Cyr),e(K5,nU),e(nU,wyr),e(K5,Ayr),e(je,yyr),e(je,Z5),e(Z5,mFe),e(mFe,Lyr),e(Z5,xyr),e(Z5,sU),e(sU,$yr),e(Z5,kyr),e(je,Syr),e(je,eC),e(eC,gFe),e(gFe,Ryr),e(eC,Byr),e(eC,lU),e(lU,Pyr),e(eC,Iyr),e(je,qyr),e(je,oC),e(oC,hFe),e(hFe,Nyr),e(oC,jyr),e(oC,iU),e(iU,Dyr),e(oC,Gyr),e(je,Oyr),e(je,rC),e(rC,uFe),e(uFe,Vyr),e(rC,Xyr),e(rC,dU),e(dU,zyr),e(rC,Qyr),e(je,Wyr),e(je,tC),e(tC,pFe),e(pFe,Hyr),e(tC,Uyr),e(tC,cU),e(cU,Jyr),e(tC,Yyr),e(je,Kyr),e(je,aC),e(aC,_Fe),e(_Fe,Zyr),e(aC,eLr),e(aC,fU),e(fU,oLr),e(aC,rLr),e(Vr,tLr),M(nC,Vr,null),v(f,sRe,_),v(f,Pc,_),e(Pc,sC),e(sC,vFe),M(Fx,vFe,null),e(Pc,aLr),e(Pc,bFe),e(bFe,nLr),v(f,lRe,_),v(f,_r,_),M(Tx,_r,null),e(_r,sLr),e(_r,Ic),e(Ic,lLr),e(Ic,mU),e(mU,iLr),e(Ic,dLr),e(Ic,gU),e(gU,cLr),e(Ic,fLr),e(_r,mLr),e(_r,Mx),e(Mx,gLr),e(Mx,FFe),e(FFe,hLr),e(Mx,uLr),e(_r,pLr),e(_r,Xt),M(Ex,Xt,null),e(Xt,_Lr),e(Xt,TFe),e(TFe,vLr),e(Xt,bLr),e(Xt,qc),e(qc,FLr),e(qc,MFe),e(MFe,TLr),e(qc,MLr),e(qc,hU),e(hU,ELr),e(qc,CLr),e(Xt,wLr),M(lC,Xt,null),e(_r,ALr),e(_r,Xr),M(Cx,Xr,null),e(Xr,yLr),e(Xr,EFe),e(EFe,LLr),e(Xr,xLr),e(Xr,pn),e(pn,$Lr),e(pn,CFe),e(CFe,kLr),e(pn,SLr),e(pn,wFe),e(wFe,RLr),e(pn,BLr),e(pn,AFe),e(AFe,PLr),e(pn,ILr),e(Xr,qLr),e(Xr,yFe),e(yFe,iC),e(iC,LFe),e(LFe,NLr),e(iC,jLr),e(iC,uU),e(uU,DLr),e(iC,GLr),e(Xr,OLr),M(dC,Xr,null),v(f,iRe,_),v(f,Nc,_),e(Nc,cC),e(cC,xFe),M(wx,xFe,null),e(Nc,VLr),e(Nc,$Fe),e($Fe,XLr),v(f,dRe,_),v(f,vr,_),M(Ax,vr,null),e(vr,zLr),e(vr,jc),e(jc,QLr),e(jc,pU),e(pU,WLr),e(jc,HLr),e(jc,_U),e(_U,ULr),e(jc,JLr),e(vr,YLr),e(vr,yx),e(yx,KLr),e(yx,kFe),e(kFe,ZLr),e(yx,exr),e(vr,oxr),e(vr,zt),M(Lx,zt,null),e(zt,rxr),e(zt,SFe),e(SFe,txr),e(zt,axr),e(zt,Dc),e(Dc,nxr),e(Dc,RFe),e(RFe,sxr),e(Dc,lxr),e(Dc,vU),e(vU,ixr),e(Dc,dxr),e(zt,cxr),M(fC,zt,null),e(vr,fxr),e(vr,zr),M(xx,zr,null),e(zr,mxr),e(zr,BFe),e(BFe,gxr),e(zr,hxr),e(zr,_n),e(_n,uxr),e(_n,PFe),e(PFe,pxr),e(_n,_xr),e(_n,IFe),e(IFe,vxr),e(_n,bxr),e(_n,qFe),e(qFe,Fxr),e(_n,Txr),e(zr,Mxr),e(zr,$x),e($x,mC),e(mC,NFe),e(NFe,Exr),e(mC,Cxr),e(mC,bU),e(bU,wxr),e(mC,Axr),e($x,yxr),e($x,gC),e(gC,jFe),e(jFe,Lxr),e(gC,xxr),e(gC,FU),e(FU,$xr),e(gC,kxr),e(zr,Sxr),M(hC,zr,null),v(f,cRe,_),v(f,Gc,_),e(Gc,uC),e(uC,DFe),M(kx,DFe,null),e(Gc,Rxr),e(Gc,GFe),e(GFe,Bxr),v(f,fRe,_),v(f,br,_),M(Sx,br,null),e(br,Pxr),e(br,Oc),e(Oc,Ixr),e(Oc,TU),e(TU,qxr),e(Oc,Nxr),e(Oc,MU),e(MU,jxr),e(Oc,Dxr),e(br,Gxr),e(br,Rx),e(Rx,Oxr),e(Rx,OFe),e(OFe,Vxr),e(Rx,Xxr),e(br,zxr),e(br,Qt),M(Bx,Qt,null),e(Qt,Qxr),e(Qt,VFe),e(VFe,Wxr),e(Qt,Hxr),e(Qt,Vc),e(Vc,Uxr),e(Vc,XFe),e(XFe,Jxr),e(Vc,Yxr),e(Vc,EU),e(EU,Kxr),e(Vc,Zxr),e(Qt,e7r),M(pC,Qt,null),e(br,o7r),e(br,Qr),M(Px,Qr,null),e(Qr,r7r),e(Qr,zFe),e(zFe,t7r),e(Qr,a7r),e(Qr,vn),e(vn,n7r),e(vn,QFe),e(QFe,s7r),e(vn,l7r),e(vn,WFe),e(WFe,i7r),e(vn,d7r),e(vn,HFe),e(HFe,c7r),e(vn,f7r),e(Qr,m7r),e(Qr,UFe),e(UFe,_C),e(_C,JFe),e(JFe,g7r),e(_C,h7r),e(_C,CU),e(CU,u7r),e(_C,p7r),e(Qr,_7r),M(vC,Qr,null),mRe=!0},p(f,[_]){const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),Kc.$set(Ix);const YFe={};_&2&&(YFe.$$scope={dirty:_,ctx:f}),Qm.$set(YFe);const KFe={};_&2&&(KFe.$$scope={dirty:_,ctx:f}),Cg.$set(KFe);const ZFe={};_&2&&(ZFe.$$scope={dirty:_,ctx:f}),zg.$set(ZFe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),Qg.$set(qx);const e0e={};_&2&&(e0e.$$scope={dirty:_,ctx:f}),th.$set(e0e);const bn={};_&2&&(bn.$$scope={dirty:_,ctx:f}),ah.$set(bn);const o0e={};_&2&&(o0e.$$scope={dirty:_,ctx:f}),lh.$set(o0e);const r0e={};_&2&&(r0e.$$scope={dirty:_,ctx:f}),Qu.$set(r0e);const t0e={};_&2&&(t0e.$$scope={dirty:_,ctx:f}),Hu.$set(t0e);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),Pp.$set(Nx);const a0e={};_&2&&(a0e.$$scope={dirty:_,ctx:f}),qp.$set(a0e);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),F_.$set(jx);const n0e={};_&2&&(n0e.$$scope={dirty:_,ctx:f}),M_.$set(n0e);const Dx={};_&2&&(Dx.$$scope={dirty:_,ctx:f}),nv.$set(Dx);const s0e={};_&2&&(s0e.$$scope={dirty:_,ctx:f}),lv.$set(s0e);const l0e={};_&2&&(l0e.$$scope={dirty:_,ctx:f}),wv.$set(l0e);const i0e={};_&2&&(i0e.$$scope={dirty:_,ctx:f}),yv.$set(i0e);const Xc={};_&2&&(Xc.$$scope={dirty:_,ctx:f}),T1.$set(Xc);const d0e={};_&2&&(d0e.$$scope={dirty:_,ctx:f}),E1.$set(d0e);const c0e={};_&2&&(c0e.$$scope={dirty:_,ctx:f}),Z1.$set(c0e);const f0e={};_&2&&(f0e.$$scope={dirty:_,ctx:f}),ob.$set(f0e);const Gx={};_&2&&(Gx.$$scope={dirty:_,ctx:f}),ib.$set(Gx);const m0e={};_&2&&(m0e.$$scope={dirty:_,ctx:f}),cb.$set(m0e);const g0e={};_&2&&(g0e.$$scope={dirty:_,ctx:f}),zb.$set(g0e);const h0e={};_&2&&(h0e.$$scope={dirty:_,ctx:f}),Wb.$set(h0e);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),B4.$set(Ur);const Ox={};_&2&&(Ox.$$scope={dirty:_,ctx:f}),I4.$set(Ox);const u0e={};_&2&&(u0e.$$scope={dirty:_,ctx:f}),j4.$set(u0e);const Vx={};_&2&&(Vx.$$scope={dirty:_,ctx:f}),G4.$set(Vx);const p0e={};_&2&&(p0e.$$scope={dirty:_,ctx:f}),K4.$set(p0e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),e2.$set(Jr);const _0e={};_&2&&(_0e.$$scope={dirty:_,ctx:f}),t2.$set(_0e);const zc={};_&2&&(zc.$$scope={dirty:_,ctx:f}),n2.$set(zc);const v0e={};_&2&&(v0e.$$scope={dirty:_,ctx:f}),u2.$set(v0e);const b0e={};_&2&&(b0e.$$scope={dirty:_,ctx:f}),_2.$set(b0e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),E2.$set(L);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),w2.$set(bC);const F0e={};_&2&&(F0e.$$scope={dirty:_,ctx:f}),P2.$set(F0e);const T0e={};_&2&&(T0e.$$scope={dirty:_,ctx:f}),q2.$set(T0e);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),G2.$set(FC);const M0e={};_&2&&(M0e.$$scope={dirty:_,ctx:f}),V2.$set(M0e);const E0e={};_&2&&(E0e.$$scope={dirty:_,ctx:f}),U2.$set(E0e);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),Y2.$set(TC);const C0e={};_&2&&(C0e.$$scope={dirty:_,ctx:f}),rF.$set(C0e);const w0e={};_&2&&(w0e.$$scope={dirty:_,ctx:f}),aF.$set(w0e);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),lF.$set(MC);const A0e={};_&2&&(A0e.$$scope={dirty:_,ctx:f}),dF.$set(A0e);const y0e={};_&2&&(y0e.$$scope={dirty:_,ctx:f}),mF.$set(y0e);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),hF.$set(EC);const L0e={};_&2&&(L0e.$$scope={dirty:_,ctx:f}),bF.$set(L0e);const x0e={};_&2&&(x0e.$$scope={dirty:_,ctx:f}),TF.$set(x0e);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),CF.$set(CC);const $0e={};_&2&&($0e.$$scope={dirty:_,ctx:f}),AF.$set($0e);const k0e={};_&2&&(k0e.$$scope={dirty:_,ctx:f}),p0.$set(k0e);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),v0.$set(wC);const S0e={};_&2&&(S0e.$$scope={dirty:_,ctx:f}),O0.$set(S0e);const R0e={};_&2&&(R0e.$$scope={dirty:_,ctx:f}),X0.$set(R0e);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),tT.$set(AC);const B0e={};_&2&&(B0e.$$scope={dirty:_,ctx:f}),nT.$set(B0e);const P0e={};_&2&&(P0e.$$scope={dirty:_,ctx:f}),iT.$set(P0e);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),cT.$set(yC);const I0e={};_&2&&(I0e.$$scope={dirty:_,ctx:f}),kT.$set(I0e);const q0e={};_&2&&(q0e.$$scope={dirty:_,ctx:f}),RT.$set(q0e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),XT.$set(LC);const N0e={};_&2&&(N0e.$$scope={dirty:_,ctx:f}),QT.$set(N0e);const j0e={};_&2&&(j0e.$$scope={dirty:_,ctx:f}),b8.$set(j0e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),T8.$set(xC);const D0e={};_&2&&(D0e.$$scope={dirty:_,ctx:f}),j8.$set(D0e);const G0e={};_&2&&(G0e.$$scope={dirty:_,ctx:f}),G8.$set(G0e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),V8.$set($C);const O0e={};_&2&&(O0e.$$scope={dirty:_,ctx:f}),z8.$set(O0e);const V0e={};_&2&&(V0e.$$scope={dirty:_,ctx:f}),mM.$set(V0e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),hM.$set(kC);const X0e={};_&2&&(X0e.$$scope={dirty:_,ctx:f}),PM.$set(X0e);const z0e={};_&2&&(z0e.$$scope={dirty:_,ctx:f}),qM.$set(z0e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),jM.$set(SC);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:f}),GM.$set(Q0e);const W0e={};_&2&&(W0e.$$scope={dirty:_,ctx:f}),VM.$set(W0e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),zM.$set(RC);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:f}),_E.$set(H0e);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:f}),bE.$set(U0e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),wE.$set(BC);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:f}),yE.$set(J0e);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:f}),DE.$set(Y0e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),OE.$set(PC);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:f}),ZE.$set(K0e);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:f}),o5.$set(Z0e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),f5.$set(IC);const eTe={};_&2&&(eTe.$$scope={dirty:_,ctx:f}),g5.$set(eTe);const oTe={};_&2&&(oTe.$$scope={dirty:_,ctx:f}),C5.$set(oTe);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),A5.$set(qC);const rTe={};_&2&&(rTe.$$scope={dirty:_,ctx:f}),q5.$set(rTe);const tTe={};_&2&&(tTe.$$scope={dirty:_,ctx:f}),j5.$set(tTe);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),H5.$set(NC);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),J5.$set(aTe);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),nC.$set(nTe);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),lC.$set(jC);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),dC.$set(sTe);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),fC.$set(lTe);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),hC.$set(DC);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),pC.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),vC.$set(dTe)},i(f){mRe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(qw.$$.fragment,f),E(Nw.$$.fragment,f),E(Kc.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Vw.$$.fragment,f),E(Qm.$$.fragment,f),E(Xw.$$.fragment,f),E(zw.$$.fragment,f),E(Qw.$$.fragment,f),E(Uw.$$.fragment,f),E(Cg.$$.fragment,f),E(Jw.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(oA.$$.fragment,f),E(zg.$$.fragment,f),E(Qg.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(lA.$$.fragment,f),E(th.$$.fragment,f),E(ah.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(lh.$$.fragment,f),E(gA.$$.fragment,f),E(Qu.$$.fragment,f),E(hA.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(Hu.$$.fragment,f),E(vA.$$.fragment,f),E(Pp.$$.fragment,f),E(bA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(qp.$$.fragment,f),E(EA.$$.fragment,f),E(F_.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(M_.$$.fragment,f),E(LA.$$.fragment,f),E(nv.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(lv.$$.fragment,f),E(RA.$$.fragment,f),E(wv.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(yv.$$.fragment,f),E(NA.$$.fragment,f),E(T1.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(E1.$$.fragment,f),E(VA.$$.fragment,f),E(Z1.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(ob.$$.fragment,f),E(HA.$$.fragment,f),E(ib.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(cb.$$.fragment,f),E(ZA.$$.fragment,f),E(zb.$$.fragment,f),E(e6.$$.fragment,f),E(o6.$$.fragment,f),E(t6.$$.fragment,f),E(Wb.$$.fragment,f),E(a6.$$.fragment,f),E(B4.$$.fragment,f),E(n6.$$.fragment,f),E(s6.$$.fragment,f),E(i6.$$.fragment,f),E(I4.$$.fragment,f),E(d6.$$.fragment,f),E(j4.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(g6.$$.fragment,f),E(G4.$$.fragment,f),E(h6.$$.fragment,f),E(K4.$$.fragment,f),E(u6.$$.fragment,f),E(p6.$$.fragment,f),E(v6.$$.fragment,f),E(e2.$$.fragment,f),E(b6.$$.fragment,f),E(t2.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(E6.$$.fragment,f),E(n2.$$.fragment,f),E(C6.$$.fragment,f),E(u2.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(L6.$$.fragment,f),E(_2.$$.fragment,f),E(x6.$$.fragment,f),E(E2.$$.fragment,f),E($6.$$.fragment,f),E(k6.$$.fragment,f),E(R6.$$.fragment,f),E(w2.$$.fragment,f),E(B6.$$.fragment,f),E(P2.$$.fragment,f),E(P6.$$.fragment,f),E(I6.$$.fragment,f),E(N6.$$.fragment,f),E(q2.$$.fragment,f),E(j6.$$.fragment,f),E(G2.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(V2.$$.fragment,f),E(z6.$$.fragment,f),E(U2.$$.fragment,f),E(Q6.$$.fragment,f),E(W6.$$.fragment,f),E(U6.$$.fragment,f),E(Y2.$$.fragment,f),E(J6.$$.fragment,f),E(rF.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(ey.$$.fragment,f),E(aF.$$.fragment,f),E(oy.$$.fragment,f),E(lF.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(dF.$$.fragment,f),E(sy.$$.fragment,f),E(mF.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(hF.$$.fragment,f),E(fy.$$.fragment,f),E(bF.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(uy.$$.fragment,f),E(TF.$$.fragment,f),E(py.$$.fragment,f),E(CF.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(AF.$$.fragment,f),E(Ty.$$.fragment,f),E(p0.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(v0.$$.fragment,f),E(Ay.$$.fragment,f),E(O0.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(X0.$$.fragment,f),E(ky.$$.fragment,f),E(tT.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(nT.$$.fragment,f),E(Iy.$$.fragment,f),E(iT.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(cT.$$.fragment,f),E(Oy.$$.fragment,f),E(kT.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(RT.$$.fragment,f),E(Wy.$$.fragment,f),E(XT.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(QT.$$.fragment,f),E(Ky.$$.fragment,f),E(b8.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(T8.$$.fragment,f),E(tL.$$.fragment,f),E(j8.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(G8.$$.fragment,f),E(iL.$$.fragment,f),E(V8.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(z8.$$.fragment,f),E(gL.$$.fragment,f),E(mM.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(hM.$$.fragment,f),E(vL.$$.fragment,f),E(PM.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(qM.$$.fragment,f),E(EL.$$.fragment,f),E(jM.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(GM.$$.fragment,f),E(LL.$$.fragment,f),E(VM.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(zM.$$.fragment,f),E(RL.$$.fragment,f),E(_E.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(bE.$$.fragment,f),E(NL.$$.fragment,f),E(wE.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(yE.$$.fragment,f),E(VL.$$.fragment,f),E(DE.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(OE.$$.fragment,f),E(HL.$$.fragment,f),E(ZE.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(o5.$$.fragment,f),E(ZL.$$.fragment,f),E(f5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(g5.$$.fragment,f),E(ax.$$.fragment,f),E(C5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(A5.$$.fragment,f),E(dx.$$.fragment,f),E(q5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(j5.$$.fragment,f),E(hx.$$.fragment,f),E(H5.$$.fragment,f),E(ux.$$.fragment,f),E(px.$$.fragment,f),E(vx.$$.fragment,f),E(J5.$$.fragment,f),E(bx.$$.fragment,f),E(nC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(lC.$$.fragment,f),E(Cx.$$.fragment,f),E(dC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(fC.$$.fragment,f),E(xx.$$.fragment,f),E(hC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Bx.$$.fragment,f),E(pC.$$.fragment,f),E(Px.$$.fragment,f),E(vC.$$.fragment,f),mRe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(qw.$$.fragment,f),C(Nw.$$.fragment,f),C(Kc.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Vw.$$.fragment,f),C(Qm.$$.fragment,f),C(Xw.$$.fragment,f),C(zw.$$.fragment,f),C(Qw.$$.fragment,f),C(Uw.$$.fragment,f),C(Cg.$$.fragment,f),C(Jw.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(oA.$$.fragment,f),C(zg.$$.fragment,f),C(Qg.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(lA.$$.fragment,f),C(th.$$.fragment,f),C(ah.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(lh.$$.fragment,f),C(gA.$$.fragment,f),C(Qu.$$.fragment,f),C(hA.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(Hu.$$.fragment,f),C(vA.$$.fragment,f),C(Pp.$$.fragment,f),C(bA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(qp.$$.fragment,f),C(EA.$$.fragment,f),C(F_.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(M_.$$.fragment,f),C(LA.$$.fragment,f),C(nv.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(lv.$$.fragment,f),C(RA.$$.fragment,f),C(wv.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(yv.$$.fragment,f),C(NA.$$.fragment,f),C(T1.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(E1.$$.fragment,f),C(VA.$$.fragment,f),C(Z1.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(ob.$$.fragment,f),C(HA.$$.fragment,f),C(ib.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(cb.$$.fragment,f),C(ZA.$$.fragment,f),C(zb.$$.fragment,f),C(e6.$$.fragment,f),C(o6.$$.fragment,f),C(t6.$$.fragment,f),C(Wb.$$.fragment,f),C(a6.$$.fragment,f),C(B4.$$.fragment,f),C(n6.$$.fragment,f),C(s6.$$.fragment,f),C(i6.$$.fragment,f),C(I4.$$.fragment,f),C(d6.$$.fragment,f),C(j4.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(g6.$$.fragment,f),C(G4.$$.fragment,f),C(h6.$$.fragment,f),C(K4.$$.fragment,f),C(u6.$$.fragment,f),C(p6.$$.fragment,f),C(v6.$$.fragment,f),C(e2.$$.fragment,f),C(b6.$$.fragment,f),C(t2.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(E6.$$.fragment,f),C(n2.$$.fragment,f),C(C6.$$.fragment,f),C(u2.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(L6.$$.fragment,f),C(_2.$$.fragment,f),C(x6.$$.fragment,f),C(E2.$$.fragment,f),C($6.$$.fragment,f),C(k6.$$.fragment,f),C(R6.$$.fragment,f),C(w2.$$.fragment,f),C(B6.$$.fragment,f),C(P2.$$.fragment,f),C(P6.$$.fragment,f),C(I6.$$.fragment,f),C(N6.$$.fragment,f),C(q2.$$.fragment,f),C(j6.$$.fragment,f),C(G2.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(V2.$$.fragment,f),C(z6.$$.fragment,f),C(U2.$$.fragment,f),C(Q6.$$.fragment,f),C(W6.$$.fragment,f),C(U6.$$.fragment,f),C(Y2.$$.fragment,f),C(J6.$$.fragment,f),C(rF.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(ey.$$.fragment,f),C(aF.$$.fragment,f),C(oy.$$.fragment,f),C(lF.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(dF.$$.fragment,f),C(sy.$$.fragment,f),C(mF.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(hF.$$.fragment,f),C(fy.$$.fragment,f),C(bF.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(uy.$$.fragment,f),C(TF.$$.fragment,f),C(py.$$.fragment,f),C(CF.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(AF.$$.fragment,f),C(Ty.$$.fragment,f),C(p0.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(v0.$$.fragment,f),C(Ay.$$.fragment,f),C(O0.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(X0.$$.fragment,f),C(ky.$$.fragment,f),C(tT.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(nT.$$.fragment,f),C(Iy.$$.fragment,f),C(iT.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(cT.$$.fragment,f),C(Oy.$$.fragment,f),C(kT.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(RT.$$.fragment,f),C(Wy.$$.fragment,f),C(XT.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(QT.$$.fragment,f),C(Ky.$$.fragment,f),C(b8.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(T8.$$.fragment,f),C(tL.$$.fragment,f),C(j8.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(G8.$$.fragment,f),C(iL.$$.fragment,f),C(V8.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(z8.$$.fragment,f),C(gL.$$.fragment,f),C(mM.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(hM.$$.fragment,f),C(vL.$$.fragment,f),C(PM.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(qM.$$.fragment,f),C(EL.$$.fragment,f),C(jM.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(GM.$$.fragment,f),C(LL.$$.fragment,f),C(VM.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(zM.$$.fragment,f),C(RL.$$.fragment,f),C(_E.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(bE.$$.fragment,f),C(NL.$$.fragment,f),C(wE.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(yE.$$.fragment,f),C(VL.$$.fragment,f),C(DE.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(OE.$$.fragment,f),C(HL.$$.fragment,f),C(ZE.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(o5.$$.fragment,f),C(ZL.$$.fragment,f),C(f5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(g5.$$.fragment,f),C(ax.$$.fragment,f),C(C5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(A5.$$.fragment,f),C(dx.$$.fragment,f),C(q5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(j5.$$.fragment,f),C(hx.$$.fragment,f),C(H5.$$.fragment,f),C(ux.$$.fragment,f),C(px.$$.fragment,f),C(vx.$$.fragment,f),C(J5.$$.fragment,f),C(bx.$$.fragment,f),C(nC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(lC.$$.fragment,f),C(Cx.$$.fragment,f),C(dC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(fC.$$.fragment,f),C(xx.$$.fragment,f),C(hC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Bx.$$.fragment,f),C(pC.$$.fragment,f),C(Px.$$.fragment,f),C(vC.$$.fragment,f),mRe=!1},d(f){t(g),f&&t(b),f&&t(u),w(d),f&&t(Wc),f&&t(Yr),f&&t(Be),f&&t(Ge),f&&t(Uc),w(va,f),f&&t(Oe),f&&t(Ee),f&&t(To),f&&t(ba),f&&t(fke),f&&t(Zl),w(qw),f&&t(mke),f&&t(Cn),f&&t(gke),w(Nw,f),f&&t(hke),f&&t(z7),f&&t(uke),w(Kc,f),f&&t(pke),f&&t(ei),w(jw),f&&t(_ke),f&&t(Mo),w(Dw),w(Vw),w(Qm),w(Xw),f&&t(vke),f&&t(ri),w(zw),f&&t(bke),f&&t(Eo),w(Qw),w(Uw),w(Cg),w(Jw),f&&t(Fke),f&&t(ti),w(Yw),f&&t(Tke),f&&t(Co),w(Kw),w(oA),w(zg),w(Qg),w(rA),f&&t(Mke),f&&t(ai),w(tA),f&&t(Eke),f&&t(wo),w(aA),w(lA),w(th),w(ah),w(iA),f&&t(Cke),f&&t(si),w(dA),f&&t(wke),f&&t(Ao),w(cA),w(mA),w(lh),w(gA),w(Qu),f&&t(Ake),f&&t(di),w(hA),f&&t(yke),f&&t(yo),w(uA),w(_A),w(Hu),w(vA),w(Pp),f&&t(Lke),f&&t(mi),w(bA),f&&t(xke),f&&t(Lo),w(FA),w(MA),w(qp),w(EA),w(F_),f&&t($ke),f&&t(ui),w(CA),f&&t(kke),f&&t(xo),w(wA),w(yA),w(M_),w(LA),w(nv),f&&t(Ske),f&&t(vi),w(xA),f&&t(Rke),f&&t($o),w($A),w(SA),w(lv),w(RA),w(wv),f&&t(Bke),f&&t(Ti),w(BA),f&&t(Pke),f&&t(ko),w(PA),w(qA),w(yv),w(NA),w(T1),f&&t(Ike),f&&t(Ci),w(jA),f&&t(qke),f&&t(So),w(DA),w(OA),w(E1),w(VA),w(Z1),f&&t(Nke),f&&t(yi),w(XA),f&&t(jke),f&&t(Ro),w(zA),w(WA),w(ob),w(HA),w(ib),f&&t(Dke),f&&t($i),w(UA),f&&t(Gke),f&&t(Bo),w(JA),w(KA),w(cb),w(ZA),w(zb),f&&t(Oke),f&&t(Ri),w(e6),f&&t(Vke),f&&t(Po),w(o6),w(t6),w(Wb),w(a6),w(B4),f&&t(Xke),f&&t(Ii),w(n6),f&&t(zke),f&&t(Io),w(s6),w(i6),w(I4),w(d6),w(j4),f&&t(Qke),f&&t(ji),w(c6),f&&t(Wke),f&&t(qo),w(f6),w(g6),w(G4),w(h6),w(K4),f&&t(Hke),f&&t(Oi),w(u6),f&&t(Uke),f&&t(No),w(p6),w(v6),w(e2),w(b6),w(t2),f&&t(Jke),f&&t(zi),w(F6),f&&t(Yke),f&&t(jo),w(T6),w(E6),w(n2),w(C6),w(u2),f&&t(Kke),f&&t(Hi),w(w6),f&&t(Zke),f&&t(Do),w(A6),w(L6),w(_2),w(x6),w(E2),f&&t(eSe),f&&t(Yi),w($6),f&&t(oSe),f&&t(Go),w(k6),w(R6),w(w2),w(B6),w(P2),f&&t(rSe),f&&t(ed),w(P6),f&&t(tSe),f&&t(Oo),w(I6),w(N6),w(q2),w(j6),w(G2),f&&t(aSe),f&&t(td),w(G6),f&&t(nSe),f&&t(Vo),w(O6),w(X6),w(V2),w(z6),w(U2),f&&t(sSe),f&&t(sd),w(Q6),f&&t(lSe),f&&t(Xo),w(W6),w(U6),w(Y2),w(J6),w(rF),f&&t(iSe),f&&t(cd),w(Y6),f&&t(dSe),f&&t(zo),w(K6),w(ey),w(aF),w(oy),w(lF),f&&t(cSe),f&&t(gd),w(ry),f&&t(fSe),f&&t(Qo),w(ty),w(ny),w(dF),w(sy),w(mF),f&&t(mSe),f&&t(pd),w(ly),f&&t(gSe),f&&t(Wo),w(iy),w(cy),w(hF),w(fy),w(bF),f&&t(hSe),f&&t(Fd),w(my),f&&t(uSe),f&&t(Ho),w(gy),w(uy),w(TF),w(py),w(CF),f&&t(pSe),f&&t(Ed),w(_y),f&&t(_Se),f&&t(Uo),w(vy),w(Fy),w(AF),w(Ty),w(p0),f&&t(vSe),f&&t(Ad),w(My),f&&t(bSe),f&&t(Jo),w(Ey),w(wy),w(v0),w(Ay),w(O0),f&&t(FSe),f&&t(xd),w(yy),f&&t(TSe),f&&t(Yo),w(Ly),w($y),w(X0),w(ky),w(tT),f&&t(MSe),f&&t(Sd),w(Sy),f&&t(ESe),f&&t(Ko),w(Ry),w(Py),w(nT),w(Iy),w(iT),f&&t(CSe),f&&t(Pd),w(Ny),f&&t(wSe),f&&t(Zo),w(jy),w(Gy),w(cT),w(Oy),w(kT),f&&t(ASe),f&&t(Nd),w(Vy),f&&t(ySe),f&&t(er),w(Xy),w(Qy),w(RT),w(Wy),w(XT),f&&t(LSe),f&&t(Gd),w(Hy),f&&t(xSe),f&&t(or),w(Uy),w(Yy),w(QT),w(Ky),w(b8),f&&t($Se),f&&t(Xd),w(Zy),f&&t(kSe),f&&t(rr),w(eL),w(rL),w(T8),w(tL),w(j8),f&&t(SSe),f&&t(Wd),w(aL),f&&t(RSe),f&&t(tr),w(nL),w(lL),w(G8),w(iL),w(V8),f&&t(BSe),f&&t(Jd),w(dL),f&&t(PSe),f&&t(ar),w(cL),w(mL),w(z8),w(gL),w(mM),f&&t(ISe),f&&t(Zd),w(hL),f&&t(qSe),f&&t(nr),w(uL),w(_L),w(hM),w(vL),w(PM),f&&t(NSe),f&&t(rc),w(bL),f&&t(jSe),f&&t(sr),w(FL),w(ML),w(qM),w(EL),w(jM),f&&t(DSe),f&&t(nc),w(CL),f&&t(GSe),f&&t(lr),w(wL),w(yL),w(GM),w(LL),w(VM),f&&t(OSe),f&&t(ic),w(xL),f&&t(VSe),f&&t(ir),w($L),w(SL),w(zM),w(RL),w(_E),f&&t(XSe),f&&t(fc),w(BL),f&&t(zSe),f&&t(dr),w(PL),w(qL),w(bE),w(NL),w(wE),f&&t(QSe),f&&t(hc),w(jL),f&&t(WSe),f&&t(cr),w(DL),w(OL),w(yE),w(VL),w(DE),f&&t(HSe),f&&t(_c),w(XL),f&&t(USe),f&&t(fr),w(zL),w(WL),w(OE),w(HL),w(ZE),f&&t(JSe),f&&t(Fc),w(UL),f&&t(YSe),f&&t(mr),w(JL),w(KL),w(o5),w(ZL),w(f5),f&&t(KSe),f&&t(Ec),w(ex),f&&t(ZSe),f&&t(gr),w(ox),w(tx),w(g5),w(ax),w(C5),f&&t(eRe),f&&t(Ac),w(nx),f&&t(oRe),f&&t(hr),w(sx),w(ix),w(A5),w(dx),w(q5),f&&t(rRe),f&&t(xc),w(cx),f&&t(tRe),f&&t(ur),w(fx),w(gx),w(j5),w(hx),w(H5),f&&t(aRe),f&&t(Sc),w(ux),f&&t(nRe),f&&t(pr),w(px),w(vx),w(J5),w(bx),w(nC),f&&t(sRe),f&&t(Pc),w(Fx),f&&t(lRe),f&&t(_r),w(Tx),w(Ex),w(lC),w(Cx),w(dC),f&&t(iRe),f&&t(Nc),w(wx),f&&t(dRe),f&&t(vr),w(Ax),w(Lx),w(fC),w(xx),w(hC),f&&t(cRe),f&&t(Gc),w(kx),f&&t(fRe),f&&t(br),w(Sx),w(Bx),w(pC),w(Px),w(vC)}}}const kFt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SFt(A){return B4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jFt extends $4t{constructor(g){super();k4t(this,g,SFt,$Ft,S4t,{})}}export{jFt as default,kFt as metadata};
