import{S as JEt,i as YEt,s as KEt,e as a,k as l,w as f,t as o,M as ZEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as v,y as g,q as h,o as u,B as p,v as e5t}from"../../chunks/vendor-6b77c823.js";import{T as $Rr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function o5t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,u3,Nf,xe,co,ji,Gn,p3,On,Vn,_3,Di,Xn,v3,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),u3=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),p3=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),_3=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),v3=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var pe=s(Z);io=r(pe,"If your "),de=n(pe,"CODE",{});var lx=s(de);Ce=r(lx,"NewModelConfig"),lx.forEach(t),lo=r(pe," is a subclass of "),me=n(pe,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var ix=s(Ii);qf=r(ix,"model_type"),ix.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),qi=n(pe,"CODE",{});var dx=s(qi);Ni=r(dx,'"new-model"'),dx.forEach(t),u3=r(pe,")."),pe.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),p3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var cx=s(On);Vn=r(cx,"PreTrainedModel"),cx.forEach(t),_3=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),v3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var fx=s(Gi);jf=r(fx,"NewModelConfig"),fx.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){v(fo,Z,pe),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,u3),v(fo,Nf,pe),v(fo,xe,pe),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,p3),e(xe,On),e(On,Vn),e(xe,_3),e(xe,Di),e(Di,Xn),e(xe,v3),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function r5t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){v(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function t5t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){v(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function a5t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,u3,Nf,xe,co,ji,Gn,p3,On,Vn,_3,Di,Xn,v3,Gi,jf,Da,fo,pe,lx,Oi,ix,dx,zo,Ga,cx,Df,fx,J$e,qSe,Vi,Gf,jJ,b3,Y$e,DJ,K$e,NSe,zn,Z$e,GJ,eIe,oIe,OJ,rIe,tIe,jSe,F3,DSe,mx,aIe,GSe,Of,OSe,Xi,Vf,VJ,T3,nIe,XJ,sIe,VSe,Qo,M3,lIe,E3,iIe,gx,dIe,cIe,fIe,C3,mIe,zJ,gIe,hIe,uIe,mo,w3,pIe,QJ,_Ie,vIe,zi,bIe,WJ,FIe,TIe,HJ,MIe,EIe,CIe,b,Xf,UJ,wIe,AIe,hx,yIe,LIe,xIe,zf,JJ,kIe,SIe,ux,RIe,BIe,PIe,Qf,YJ,$Ie,IIe,px,qIe,NIe,jIe,Wf,KJ,DIe,GIe,_x,OIe,VIe,XIe,Hf,ZJ,zIe,QIe,vx,WIe,HIe,UIe,Uf,eY,JIe,YIe,bx,KIe,ZIe,eqe,Jf,oY,oqe,rqe,Fx,tqe,aqe,nqe,Yf,rY,sqe,lqe,Tx,iqe,dqe,cqe,Kf,tY,fqe,mqe,Mx,gqe,hqe,uqe,Zf,aY,pqe,_qe,Ex,vqe,bqe,Fqe,em,nY,Tqe,Mqe,Cx,Eqe,Cqe,wqe,om,sY,Aqe,yqe,wx,Lqe,xqe,kqe,rm,lY,Sqe,Rqe,Ax,Bqe,Pqe,$qe,tm,iY,Iqe,qqe,yx,Nqe,jqe,Dqe,am,dY,Gqe,Oqe,Lx,Vqe,Xqe,zqe,nm,cY,Qqe,Wqe,xx,Hqe,Uqe,Jqe,sm,fY,Yqe,Kqe,kx,Zqe,eNe,oNe,lm,mY,rNe,tNe,Sx,aNe,nNe,sNe,im,gY,lNe,iNe,Rx,dNe,cNe,fNe,dm,hY,mNe,gNe,Bx,hNe,uNe,pNe,cm,uY,_Ne,vNe,Px,bNe,FNe,TNe,fm,pY,MNe,ENe,$x,CNe,wNe,ANe,mm,_Y,yNe,LNe,Ix,xNe,kNe,SNe,gm,vY,RNe,BNe,qx,PNe,$Ne,INe,hm,bY,qNe,NNe,Nx,jNe,DNe,GNe,um,FY,ONe,VNe,jx,XNe,zNe,QNe,pm,TY,WNe,HNe,Dx,UNe,JNe,YNe,_m,MY,KNe,ZNe,Gx,eje,oje,rje,vm,EY,tje,aje,Ox,nje,sje,lje,bm,CY,ije,dje,Vx,cje,fje,mje,Fm,wY,gje,hje,Xx,uje,pje,_je,Tm,AY,vje,bje,zx,Fje,Tje,Mje,Mm,yY,Eje,Cje,Qx,wje,Aje,yje,Em,LY,Lje,xje,Wx,kje,Sje,Rje,Cm,xY,Bje,Pje,Hx,$je,Ije,qje,wm,kY,Nje,jje,Ux,Dje,Gje,Oje,Am,SY,Vje,Xje,Jx,zje,Qje,Wje,ym,RY,Hje,Uje,Yx,Jje,Yje,Kje,Lm,BY,Zje,eDe,Kx,oDe,rDe,tDe,xm,PY,aDe,nDe,Zx,sDe,lDe,iDe,km,$Y,dDe,cDe,e9,fDe,mDe,gDe,Sm,IY,hDe,uDe,o9,pDe,_De,vDe,Rm,qY,bDe,FDe,r9,TDe,MDe,EDe,Bm,NY,CDe,wDe,t9,ADe,yDe,LDe,Pm,jY,xDe,kDe,a9,SDe,RDe,BDe,$m,DY,PDe,$De,n9,IDe,qDe,NDe,Im,GY,jDe,DDe,s9,GDe,ODe,VDe,qm,OY,XDe,zDe,l9,QDe,WDe,HDe,Nm,VY,UDe,JDe,i9,YDe,KDe,ZDe,jm,XY,eGe,oGe,d9,rGe,tGe,aGe,Dm,zY,nGe,sGe,c9,lGe,iGe,dGe,Gm,QY,cGe,fGe,f9,mGe,gGe,hGe,Om,WY,uGe,pGe,m9,_Ge,vGe,bGe,Vm,HY,FGe,TGe,g9,MGe,EGe,CGe,Xm,UY,wGe,AGe,h9,yGe,LGe,xGe,zm,JY,kGe,SGe,u9,RGe,BGe,PGe,Qm,YY,$Ge,IGe,p9,qGe,NGe,jGe,Wm,KY,DGe,GGe,_9,OGe,VGe,XGe,Hm,ZY,zGe,QGe,v9,WGe,HGe,UGe,Um,eK,JGe,YGe,b9,KGe,ZGe,eOe,Jm,oK,oOe,rOe,F9,tOe,aOe,nOe,Ym,rK,sOe,lOe,T9,iOe,dOe,cOe,Km,tK,fOe,mOe,M9,gOe,hOe,uOe,Zm,aK,pOe,_Oe,E9,vOe,bOe,FOe,eg,nK,TOe,MOe,C9,EOe,COe,wOe,og,sK,AOe,yOe,w9,LOe,xOe,kOe,rg,lK,SOe,ROe,A9,BOe,POe,$Oe,tg,iK,IOe,qOe,y9,NOe,jOe,DOe,ag,dK,GOe,OOe,L9,VOe,XOe,zOe,ng,cK,QOe,WOe,x9,HOe,UOe,JOe,sg,fK,YOe,KOe,k9,ZOe,eVe,oVe,lg,mK,rVe,tVe,S9,aVe,nVe,sVe,ig,gK,lVe,iVe,R9,dVe,cVe,fVe,dg,hK,mVe,gVe,B9,hVe,uVe,pVe,cg,uK,_Ve,vVe,P9,bVe,FVe,TVe,fg,pK,MVe,EVe,$9,CVe,wVe,AVe,mg,_K,yVe,LVe,I9,xVe,kVe,SVe,gg,vK,RVe,BVe,q9,PVe,$Ve,IVe,hg,bK,qVe,NVe,N9,jVe,DVe,GVe,ug,FK,OVe,VVe,j9,XVe,zVe,QVe,pg,TK,WVe,HVe,D9,UVe,JVe,YVe,_g,MK,KVe,ZVe,G9,eXe,oXe,rXe,vg,EK,tXe,aXe,O9,nXe,sXe,lXe,bg,CK,iXe,dXe,V9,cXe,fXe,mXe,Fg,wK,gXe,hXe,X9,uXe,pXe,_Xe,Tg,AK,vXe,bXe,z9,FXe,TXe,MXe,Mg,yK,EXe,CXe,Q9,wXe,AXe,yXe,Eg,LK,LXe,xXe,W9,kXe,SXe,RXe,Cg,xK,BXe,PXe,H9,$Xe,IXe,qXe,wg,kK,NXe,jXe,U9,DXe,GXe,OXe,Ag,SK,VXe,XXe,J9,zXe,QXe,WXe,yg,RK,HXe,UXe,Y9,JXe,YXe,KXe,Lg,BK,ZXe,eze,K9,oze,rze,tze,xg,PK,aze,nze,Z9,sze,lze,ize,kg,$K,dze,cze,ek,fze,mze,gze,Sg,IK,hze,uze,ok,pze,_ze,vze,Rg,qK,bze,Fze,rk,Tze,Mze,Eze,Bg,NK,Cze,wze,tk,Aze,yze,Lze,Pg,jK,xze,kze,ak,Sze,Rze,Bze,DK,Pze,$ze,A3,Ize,$g,y3,qze,GK,Nze,XSe,Qi,Ig,OK,L3,jze,VK,Dze,zSe,Wo,x3,Gze,k3,Oze,nk,Vze,Xze,zze,S3,Qze,XK,Wze,Hze,Uze,go,R3,Jze,zK,Yze,Kze,Oa,Zze,QK,eQe,oQe,WK,rQe,tQe,HK,aQe,nQe,sQe,C,Qn,UK,lQe,iQe,sk,dQe,cQe,lk,fQe,mQe,gQe,Wn,JK,hQe,uQe,ik,pQe,_Qe,dk,vQe,bQe,FQe,Hn,YK,TQe,MQe,ck,EQe,CQe,fk,wQe,AQe,yQe,qg,KK,LQe,xQe,mk,kQe,SQe,RQe,Un,ZK,BQe,PQe,gk,$Qe,IQe,hk,qQe,NQe,jQe,Ng,eZ,DQe,GQe,uk,OQe,VQe,XQe,jg,oZ,zQe,QQe,pk,WQe,HQe,UQe,Dg,rZ,JQe,YQe,_k,KQe,ZQe,eWe,Jn,tZ,oWe,rWe,vk,tWe,aWe,bk,nWe,sWe,lWe,Yn,aZ,iWe,dWe,Fk,cWe,fWe,Tk,mWe,gWe,hWe,Kn,nZ,uWe,pWe,Mk,_We,vWe,Ek,bWe,FWe,TWe,Gg,sZ,MWe,EWe,Ck,CWe,wWe,AWe,Og,lZ,yWe,LWe,wk,xWe,kWe,SWe,Zn,iZ,RWe,BWe,Ak,PWe,$We,yk,IWe,qWe,NWe,Vg,dZ,jWe,DWe,Lk,GWe,OWe,VWe,es,cZ,XWe,zWe,xk,QWe,WWe,kk,HWe,UWe,JWe,os,fZ,YWe,KWe,Sk,ZWe,eHe,Rk,oHe,rHe,tHe,rs,mZ,aHe,nHe,Bk,sHe,lHe,gZ,iHe,dHe,cHe,Xg,hZ,fHe,mHe,Pk,gHe,hHe,uHe,ts,uZ,pHe,_He,$k,vHe,bHe,Ik,FHe,THe,MHe,zg,pZ,EHe,CHe,qk,wHe,AHe,yHe,as,_Z,LHe,xHe,Nk,kHe,SHe,jk,RHe,BHe,PHe,ns,vZ,$He,IHe,Dk,qHe,NHe,Gk,jHe,DHe,GHe,ss,bZ,OHe,VHe,Ok,XHe,zHe,Vk,QHe,WHe,HHe,Qg,FZ,UHe,JHe,Xk,YHe,KHe,ZHe,ls,TZ,eUe,oUe,zk,rUe,tUe,Qk,aUe,nUe,sUe,Wg,MZ,lUe,iUe,Wk,dUe,cUe,fUe,is,EZ,mUe,gUe,Hk,hUe,uUe,Uk,pUe,_Ue,vUe,ds,CZ,bUe,FUe,Jk,TUe,MUe,Yk,EUe,CUe,wUe,cs,wZ,AUe,yUe,Kk,LUe,xUe,Zk,kUe,SUe,RUe,fs,AZ,BUe,PUe,eS,$Ue,IUe,oS,qUe,NUe,jUe,Hg,yZ,DUe,GUe,rS,OUe,VUe,XUe,ms,LZ,zUe,QUe,tS,WUe,HUe,aS,UUe,JUe,YUe,gs,xZ,KUe,ZUe,nS,eJe,oJe,sS,rJe,tJe,aJe,hs,kZ,nJe,sJe,lS,lJe,iJe,iS,dJe,cJe,fJe,us,SZ,mJe,gJe,dS,hJe,uJe,cS,pJe,_Je,vJe,ps,RZ,bJe,FJe,fS,TJe,MJe,mS,EJe,CJe,wJe,_s,BZ,AJe,yJe,gS,LJe,xJe,hS,kJe,SJe,RJe,Ug,PZ,BJe,PJe,uS,$Je,IJe,qJe,vs,$Z,NJe,jJe,pS,DJe,GJe,_S,OJe,VJe,XJe,Jg,IZ,zJe,QJe,vS,WJe,HJe,UJe,Yg,qZ,JJe,YJe,bS,KJe,ZJe,eYe,bs,NZ,oYe,rYe,FS,tYe,aYe,TS,nYe,sYe,lYe,Fs,jZ,iYe,dYe,MS,cYe,fYe,ES,mYe,gYe,hYe,Kg,DZ,uYe,pYe,CS,_Ye,vYe,bYe,Ts,GZ,FYe,TYe,wS,MYe,EYe,AS,CYe,wYe,AYe,Ms,OZ,yYe,LYe,yS,xYe,kYe,LS,SYe,RYe,BYe,Es,VZ,PYe,$Ye,xS,IYe,qYe,kS,NYe,jYe,DYe,Cs,XZ,GYe,OYe,SS,VYe,XYe,RS,zYe,QYe,WYe,ws,zZ,HYe,UYe,BS,JYe,YYe,PS,KYe,ZYe,eKe,Zg,QZ,oKe,rKe,$S,tKe,aKe,nKe,eh,WZ,sKe,lKe,IS,iKe,dKe,cKe,oh,HZ,fKe,mKe,qS,gKe,hKe,uKe,rh,UZ,pKe,_Ke,NS,vKe,bKe,FKe,As,JZ,TKe,MKe,jS,EKe,CKe,DS,wKe,AKe,yKe,th,YZ,LKe,xKe,GS,kKe,SKe,RKe,ys,KZ,BKe,PKe,OS,$Ke,IKe,VS,qKe,NKe,jKe,Ls,ZZ,DKe,GKe,XS,OKe,VKe,zS,XKe,zKe,QKe,xs,eee,WKe,HKe,QS,UKe,JKe,WS,YKe,KKe,ZKe,ks,oee,eZe,oZe,HS,rZe,tZe,US,aZe,nZe,sZe,Ss,ree,lZe,iZe,JS,dZe,cZe,YS,fZe,mZe,gZe,Rs,tee,hZe,uZe,KS,pZe,_Ze,ZS,vZe,bZe,FZe,ah,aee,TZe,MZe,eR,EZe,CZe,wZe,nh,nee,AZe,yZe,oR,LZe,xZe,kZe,Bs,see,SZe,RZe,rR,BZe,PZe,tR,$Ze,IZe,qZe,Ps,lee,NZe,jZe,aR,DZe,GZe,nR,OZe,VZe,XZe,$s,iee,zZe,QZe,sR,WZe,HZe,lR,UZe,JZe,YZe,sh,dee,KZe,ZZe,iR,eeo,oeo,reo,lh,cee,teo,aeo,dR,neo,seo,leo,ih,fee,ieo,deo,cR,ceo,feo,meo,dh,mee,geo,heo,fR,ueo,peo,_eo,Is,gee,veo,beo,mR,Feo,Teo,gR,Meo,Eeo,Ceo,ch,hee,weo,Aeo,hR,yeo,Leo,xeo,fh,uee,keo,Seo,uR,Reo,Beo,Peo,qs,pee,$eo,Ieo,pR,qeo,Neo,_R,jeo,Deo,Geo,Ns,_ee,Oeo,Veo,vR,Xeo,zeo,bR,Qeo,Weo,Heo,vee,Ueo,Jeo,B3,Yeo,mh,P3,Keo,bee,Zeo,QSe,Wi,gh,Fee,$3,eoo,Tee,ooo,WSe,Ho,I3,roo,q3,too,FR,aoo,noo,soo,N3,loo,Mee,ioo,doo,coo,$e,j3,foo,Eee,moo,goo,Va,hoo,Cee,uoo,poo,wee,_oo,voo,Aee,boo,Foo,Too,te,hh,yee,Moo,Eoo,TR,Coo,woo,Aoo,uh,Lee,yoo,Loo,MR,xoo,koo,Soo,ph,xee,Roo,Boo,ER,Poo,$oo,Ioo,_h,kee,qoo,Noo,CR,joo,Doo,Goo,vh,See,Ooo,Voo,wR,Xoo,zoo,Qoo,bh,Ree,Woo,Hoo,AR,Uoo,Joo,Yoo,Fh,Bee,Koo,Zoo,yR,ero,oro,rro,Th,Pee,tro,aro,LR,nro,sro,lro,Mh,$ee,iro,dro,xR,cro,fro,mro,Eh,Iee,gro,hro,kR,uro,pro,_ro,Ch,qee,vro,bro,SR,Fro,Tro,Mro,wh,Nee,Ero,Cro,RR,wro,Aro,yro,Ah,jee,Lro,xro,BR,kro,Sro,Rro,yh,Dee,Bro,Pro,PR,$ro,Iro,qro,Lh,Gee,Nro,jro,$R,Dro,Gro,Oro,xh,Oee,Vro,Xro,IR,zro,Qro,Wro,kh,Vee,Hro,Uro,qR,Jro,Yro,Kro,Sh,Xee,Zro,eto,NR,oto,rto,tto,Rh,ato,zee,nto,sto,D3,lto,Bh,G3,ito,Qee,dto,HSe,Hi,Ph,Wee,O3,cto,Hee,fto,USe,Uo,V3,mto,X3,gto,jR,hto,uto,pto,z3,_to,Uee,vto,bto,Fto,Ie,Q3,Tto,Jee,Mto,Eto,Ui,Cto,Yee,wto,Ato,Kee,yto,Lto,xto,ke,$h,Zee,kto,Sto,DR,Rto,Bto,Pto,Ih,eoe,$to,Ito,GR,qto,Nto,jto,qh,ooe,Dto,Gto,OR,Oto,Vto,Xto,Nh,roe,zto,Qto,VR,Wto,Hto,Uto,jh,toe,Jto,Yto,XR,Kto,Zto,eao,Dh,aoe,oao,rao,zR,tao,aao,nao,Gh,noe,sao,lao,QR,iao,dao,cao,Oh,soe,fao,mao,WR,gao,hao,uao,Vh,pao,loe,_ao,vao,W3,bao,Xh,H3,Fao,ioe,Tao,JSe,Ji,zh,doe,U3,Mao,coe,Eao,YSe,Jo,J3,Cao,Yi,wao,HR,Aao,yao,UR,Lao,xao,kao,Y3,Sao,foe,Rao,Bao,Pao,Xr,K3,$ao,moe,Iao,qao,Ki,Nao,goe,jao,Dao,JR,Gao,Oao,Vao,hoe,Xao,zao,Z3,Qao,qe,eC,Wao,uoe,Hao,Uao,Xa,Jao,poe,Yao,Kao,_oe,Zao,eno,voe,ono,rno,tno,T,Qh,boe,ano,nno,YR,sno,lno,ino,Wh,Foe,dno,cno,KR,fno,mno,gno,Hh,Toe,hno,uno,ZR,pno,_no,vno,Uh,Moe,bno,Fno,eB,Tno,Mno,Eno,Jh,Eoe,Cno,wno,oB,Ano,yno,Lno,Yh,Coe,xno,kno,rB,Sno,Rno,Bno,Kh,woe,Pno,$no,tB,Ino,qno,Nno,Zh,Aoe,jno,Dno,aB,Gno,Ono,Vno,eu,yoe,Xno,zno,nB,Qno,Wno,Hno,ou,Loe,Uno,Jno,sB,Yno,Kno,Zno,ru,xoe,eso,oso,lB,rso,tso,aso,tu,koe,nso,sso,iB,lso,iso,dso,au,Soe,cso,fso,dB,mso,gso,hso,nu,Roe,uso,pso,cB,_so,vso,bso,su,Boe,Fso,Tso,fB,Mso,Eso,Cso,lu,Poe,wso,Aso,mB,yso,Lso,xso,iu,$oe,kso,Sso,gB,Rso,Bso,Pso,du,Ioe,$so,Iso,hB,qso,Nso,jso,cu,qoe,Dso,Gso,uB,Oso,Vso,Xso,fu,Noe,zso,Qso,pB,Wso,Hso,Uso,mu,joe,Jso,Yso,_B,Kso,Zso,elo,gu,Doe,olo,rlo,vB,tlo,alo,nlo,hu,Goe,slo,llo,bB,ilo,dlo,clo,uu,Ooe,flo,mlo,FB,glo,hlo,ulo,pu,Voe,plo,_lo,TB,vlo,blo,Flo,_u,Xoe,Tlo,Mlo,MB,Elo,Clo,wlo,vu,zoe,Alo,ylo,EB,Llo,xlo,klo,bu,Qoe,Slo,Rlo,CB,Blo,Plo,$lo,Fu,Woe,Ilo,qlo,wB,Nlo,jlo,Dlo,js,Hoe,Glo,Olo,AB,Vlo,Xlo,yB,zlo,Qlo,Wlo,Tu,Uoe,Hlo,Ulo,LB,Jlo,Ylo,Klo,Mu,Joe,Zlo,eio,xB,oio,rio,tio,Eu,Yoe,aio,nio,kB,sio,lio,iio,Cu,Koe,dio,cio,SB,fio,mio,gio,wu,Zoe,hio,uio,RB,pio,_io,vio,Au,ere,bio,Fio,BB,Tio,Mio,Eio,yu,ore,Cio,wio,PB,Aio,yio,Lio,Lu,rre,xio,kio,$B,Sio,Rio,Bio,xu,tre,Pio,$io,IB,Iio,qio,Nio,ku,are,jio,Dio,qB,Gio,Oio,Vio,Su,nre,Xio,zio,NB,Qio,Wio,Hio,Ru,sre,Uio,Jio,jB,Yio,Kio,Zio,Bu,lre,edo,odo,DB,rdo,tdo,ado,Pu,ire,ndo,sdo,GB,ldo,ido,ddo,$u,dre,cdo,fdo,OB,mdo,gdo,hdo,Iu,cre,udo,pdo,VB,_do,vdo,bdo,qu,fre,Fdo,Tdo,XB,Mdo,Edo,Cdo,Nu,mre,wdo,Ado,zB,ydo,Ldo,xdo,ju,gre,kdo,Sdo,QB,Rdo,Bdo,Pdo,Du,hre,$do,Ido,WB,qdo,Ndo,jdo,Gu,ure,Ddo,Gdo,HB,Odo,Vdo,Xdo,Ou,pre,zdo,Qdo,UB,Wdo,Hdo,Udo,Vu,_re,Jdo,Ydo,JB,Kdo,Zdo,eco,Xu,vre,oco,rco,YB,tco,aco,nco,zu,bre,sco,lco,KB,ico,dco,cco,Qu,Fre,fco,mco,ZB,gco,hco,uco,Wu,Tre,pco,_co,eP,vco,bco,Fco,Hu,Mre,Tco,Mco,oP,Eco,Cco,wco,Uu,Ere,Aco,yco,rP,Lco,xco,kco,Ju,Cre,Sco,Rco,tP,Bco,Pco,$co,Yu,wre,Ico,qco,aP,Nco,jco,Dco,Ku,Are,Gco,Oco,nP,Vco,Xco,zco,Zu,yre,Qco,Wco,sP,Hco,Uco,Jco,ep,Lre,Yco,Kco,lP,Zco,efo,ofo,op,xre,rfo,tfo,iP,afo,nfo,sfo,rp,kre,lfo,ifo,dP,dfo,cfo,ffo,tp,Sre,mfo,gfo,cP,hfo,ufo,pfo,ap,Rre,_fo,vfo,fP,bfo,Ffo,Tfo,np,Bre,Mfo,Efo,mP,Cfo,wfo,Afo,sp,Pre,yfo,Lfo,gP,xfo,kfo,Sfo,lp,$re,Rfo,Bfo,hP,Pfo,$fo,Ifo,ip,Ire,qfo,Nfo,uP,jfo,Dfo,Gfo,dp,qre,Ofo,Vfo,pP,Xfo,zfo,Qfo,cp,Nre,Wfo,Hfo,_P,Ufo,Jfo,Yfo,fp,jre,Kfo,Zfo,vP,emo,omo,rmo,mp,Dre,tmo,amo,bP,nmo,smo,lmo,gp,Gre,imo,dmo,FP,cmo,fmo,mmo,hp,Ore,gmo,hmo,TP,umo,pmo,_mo,up,Vre,vmo,bmo,MP,Fmo,Tmo,Mmo,pp,Xre,Emo,Cmo,EP,wmo,Amo,ymo,_p,zre,Lmo,xmo,CP,kmo,Smo,Rmo,vp,Qre,Bmo,Pmo,wP,$mo,Imo,qmo,bp,Wre,Nmo,jmo,AP,Dmo,Gmo,Omo,Fp,Hre,Vmo,Xmo,yP,zmo,Qmo,Wmo,Tp,Ure,Hmo,Umo,LP,Jmo,Ymo,Kmo,Mp,Jre,Zmo,ego,xP,ogo,rgo,tgo,Ep,Yre,ago,ngo,kP,sgo,lgo,igo,Cp,Kre,dgo,cgo,SP,fgo,mgo,ggo,wp,Zre,hgo,ugo,RP,pgo,_go,vgo,Ap,ete,bgo,Fgo,BP,Tgo,Mgo,Ego,yp,ote,Cgo,wgo,PP,Ago,ygo,Lgo,Lp,rte,xgo,kgo,$P,Sgo,Rgo,Bgo,xp,Pgo,tte,$go,Igo,ate,qgo,Ngo,nte,jgo,Dgo,oC,KSe,Zi,kp,ste,rC,Ggo,lte,Ogo,ZSe,Yo,tC,Vgo,ed,Xgo,IP,zgo,Qgo,qP,Wgo,Hgo,Ugo,aC,Jgo,ite,Ygo,Kgo,Zgo,zr,nC,eho,dte,oho,rho,od,tho,cte,aho,nho,NP,sho,lho,iho,fte,dho,cho,sC,fho,Ne,lC,mho,mte,gho,hho,za,uho,gte,pho,_ho,hte,vho,bho,ute,Fho,Tho,Mho,S,Sp,pte,Eho,Cho,jP,who,Aho,yho,Rp,_te,Lho,xho,DP,kho,Sho,Rho,Bp,vte,Bho,Pho,GP,$ho,Iho,qho,Pp,bte,Nho,jho,OP,Dho,Gho,Oho,$p,Fte,Vho,Xho,VP,zho,Qho,Who,Ip,Tte,Hho,Uho,XP,Jho,Yho,Kho,qp,Mte,Zho,euo,zP,ouo,ruo,tuo,Np,Ete,auo,nuo,QP,suo,luo,iuo,jp,Cte,duo,cuo,WP,fuo,muo,guo,Dp,wte,huo,uuo,HP,puo,_uo,vuo,Gp,Ate,buo,Fuo,UP,Tuo,Muo,Euo,Op,yte,Cuo,wuo,JP,Auo,yuo,Luo,Vp,Lte,xuo,kuo,YP,Suo,Ruo,Buo,Xp,xte,Puo,$uo,KP,Iuo,quo,Nuo,zp,kte,juo,Duo,ZP,Guo,Ouo,Vuo,Qp,Ste,Xuo,zuo,e$,Quo,Wuo,Huo,Wp,Rte,Uuo,Juo,o$,Yuo,Kuo,Zuo,Hp,Bte,epo,opo,r$,rpo,tpo,apo,Up,Pte,npo,spo,t$,lpo,ipo,dpo,Jp,$te,cpo,fpo,a$,mpo,gpo,hpo,Yp,Ite,upo,ppo,n$,_po,vpo,bpo,Kp,qte,Fpo,Tpo,s$,Mpo,Epo,Cpo,Zp,Nte,wpo,Apo,l$,ypo,Lpo,xpo,e_,jte,kpo,Spo,i$,Rpo,Bpo,Ppo,o_,Dte,$po,Ipo,d$,qpo,Npo,jpo,r_,Gte,Dpo,Gpo,c$,Opo,Vpo,Xpo,t_,Ote,zpo,Qpo,f$,Wpo,Hpo,Upo,a_,Vte,Jpo,Ypo,m$,Kpo,Zpo,e_o,n_,Xte,o_o,r_o,g$,t_o,a_o,n_o,s_,zte,s_o,l_o,h$,i_o,d_o,c_o,l_,Qte,f_o,m_o,u$,g_o,h_o,u_o,i_,Wte,p_o,__o,p$,v_o,b_o,F_o,d_,Hte,T_o,M_o,_$,E_o,C_o,w_o,c_,Ute,A_o,y_o,v$,L_o,x_o,k_o,f_,Jte,S_o,R_o,b$,B_o,P_o,$_o,m_,Yte,I_o,q_o,F$,N_o,j_o,D_o,g_,Kte,G_o,O_o,T$,V_o,X_o,z_o,h_,Zte,Q_o,W_o,M$,H_o,U_o,J_o,u_,eae,Y_o,K_o,E$,Z_o,evo,ovo,p_,rvo,oae,tvo,avo,rae,nvo,svo,tae,lvo,ivo,iC,eRe,rd,__,aae,dC,dvo,nae,cvo,oRe,Ko,cC,fvo,td,mvo,C$,gvo,hvo,w$,uvo,pvo,_vo,fC,vvo,sae,bvo,Fvo,Tvo,Qr,mC,Mvo,lae,Evo,Cvo,ad,wvo,iae,Avo,yvo,A$,Lvo,xvo,kvo,dae,Svo,Rvo,gC,Bvo,je,hC,Pvo,cae,$vo,Ivo,Qa,qvo,fae,Nvo,jvo,mae,Dvo,Gvo,gae,Ovo,Vvo,Xvo,$,v_,hae,zvo,Qvo,y$,Wvo,Hvo,Uvo,b_,uae,Jvo,Yvo,L$,Kvo,Zvo,e1o,F_,pae,o1o,r1o,x$,t1o,a1o,n1o,T_,_ae,s1o,l1o,k$,i1o,d1o,c1o,M_,vae,f1o,m1o,S$,g1o,h1o,u1o,E_,bae,p1o,_1o,R$,v1o,b1o,F1o,C_,Fae,T1o,M1o,B$,E1o,C1o,w1o,w_,Tae,A1o,y1o,P$,L1o,x1o,k1o,A_,Mae,S1o,R1o,$$,B1o,P1o,$1o,y_,Eae,I1o,q1o,I$,N1o,j1o,D1o,L_,Cae,G1o,O1o,q$,V1o,X1o,z1o,x_,wae,Q1o,W1o,N$,H1o,U1o,J1o,k_,Aae,Y1o,K1o,j$,Z1o,e4o,o4o,S_,yae,r4o,t4o,D$,a4o,n4o,s4o,R_,Lae,l4o,i4o,G$,d4o,c4o,f4o,B_,xae,m4o,g4o,O$,h4o,u4o,p4o,P_,kae,_4o,v4o,V$,b4o,F4o,T4o,$_,Sae,M4o,E4o,X$,C4o,w4o,A4o,I_,Rae,y4o,L4o,z$,x4o,k4o,S4o,q_,Bae,R4o,B4o,Q$,P4o,$4o,I4o,N_,Pae,q4o,N4o,W$,j4o,D4o,G4o,j_,$ae,O4o,V4o,H$,X4o,z4o,Q4o,D_,Iae,W4o,H4o,U$,U4o,J4o,Y4o,G_,qae,K4o,Z4o,J$,ebo,obo,rbo,O_,Nae,tbo,abo,Y$,nbo,sbo,lbo,V_,jae,ibo,dbo,K$,cbo,fbo,mbo,X_,Dae,gbo,hbo,Z$,ubo,pbo,_bo,z_,Gae,vbo,bbo,eI,Fbo,Tbo,Mbo,Q_,Oae,Ebo,Cbo,oI,wbo,Abo,ybo,W_,Vae,Lbo,xbo,rI,kbo,Sbo,Rbo,H_,Xae,Bbo,Pbo,tI,$bo,Ibo,qbo,U_,zae,Nbo,jbo,aI,Dbo,Gbo,Obo,J_,Qae,Vbo,Xbo,nI,zbo,Qbo,Wbo,Y_,Wae,Hbo,Ubo,sI,Jbo,Ybo,Kbo,K_,Hae,Zbo,e2o,lI,o2o,r2o,t2o,Z_,a2o,Uae,n2o,s2o,Jae,l2o,i2o,Yae,d2o,c2o,uC,rRe,nd,ev,Kae,pC,f2o,Zae,m2o,tRe,Zo,_C,g2o,sd,h2o,iI,u2o,p2o,dI,_2o,v2o,b2o,vC,F2o,ene,T2o,M2o,E2o,Wr,bC,C2o,one,w2o,A2o,ld,y2o,rne,L2o,x2o,cI,k2o,S2o,R2o,tne,B2o,P2o,FC,$2o,De,TC,I2o,ane,q2o,N2o,Wa,j2o,nne,D2o,G2o,sne,O2o,V2o,lne,X2o,z2o,Q2o,I,ov,ine,W2o,H2o,fI,U2o,J2o,Y2o,rv,dne,K2o,Z2o,mI,eFo,oFo,rFo,tv,cne,tFo,aFo,gI,nFo,sFo,lFo,av,fne,iFo,dFo,hI,cFo,fFo,mFo,nv,mne,gFo,hFo,uI,uFo,pFo,_Fo,sv,gne,vFo,bFo,pI,FFo,TFo,MFo,lv,hne,EFo,CFo,_I,wFo,AFo,yFo,iv,une,LFo,xFo,vI,kFo,SFo,RFo,dv,pne,BFo,PFo,bI,$Fo,IFo,qFo,cv,_ne,NFo,jFo,FI,DFo,GFo,OFo,fv,vne,VFo,XFo,TI,zFo,QFo,WFo,mv,bne,HFo,UFo,MI,JFo,YFo,KFo,gv,Fne,ZFo,e0o,EI,o0o,r0o,t0o,hv,Tne,a0o,n0o,CI,s0o,l0o,i0o,uv,Mne,d0o,c0o,wI,f0o,m0o,g0o,pv,Ene,h0o,u0o,AI,p0o,_0o,v0o,_v,Cne,b0o,F0o,yI,T0o,M0o,E0o,vv,wne,C0o,w0o,LI,A0o,y0o,L0o,bv,Ane,x0o,k0o,xI,S0o,R0o,B0o,Fv,yne,P0o,$0o,kI,I0o,q0o,N0o,Tv,Lne,j0o,D0o,SI,G0o,O0o,V0o,Mv,xne,X0o,z0o,RI,Q0o,W0o,H0o,Ev,kne,U0o,J0o,BI,Y0o,K0o,Z0o,Cv,Sne,eTo,oTo,PI,rTo,tTo,aTo,wv,Rne,nTo,sTo,$I,lTo,iTo,dTo,Av,Bne,cTo,fTo,II,mTo,gTo,hTo,yv,Pne,uTo,pTo,qI,_To,vTo,bTo,Lv,$ne,FTo,TTo,NI,MTo,ETo,CTo,xv,Ine,wTo,ATo,jI,yTo,LTo,xTo,kv,qne,kTo,STo,DI,RTo,BTo,PTo,Sv,Nne,$To,ITo,jne,qTo,NTo,jTo,Rv,Dne,DTo,GTo,GI,OTo,VTo,XTo,Bv,Gne,zTo,QTo,OI,WTo,HTo,UTo,Pv,One,JTo,YTo,VI,KTo,ZTo,e8o,$v,Vne,o8o,r8o,XI,t8o,a8o,n8o,Iv,s8o,Xne,l8o,i8o,zne,d8o,c8o,Qne,f8o,m8o,MC,aRe,id,qv,Wne,EC,g8o,Hne,h8o,nRe,er,CC,u8o,dd,p8o,zI,_8o,v8o,QI,b8o,F8o,T8o,wC,M8o,Une,E8o,C8o,w8o,Hr,AC,A8o,Jne,y8o,L8o,cd,x8o,Yne,k8o,S8o,WI,R8o,B8o,P8o,Kne,$8o,I8o,yC,q8o,Ge,LC,N8o,Zne,j8o,D8o,Ha,G8o,ese,O8o,V8o,ose,X8o,z8o,rse,Q8o,W8o,H8o,se,Nv,tse,U8o,J8o,HI,Y8o,K8o,Z8o,jv,ase,eMo,oMo,UI,rMo,tMo,aMo,Dv,nse,nMo,sMo,JI,lMo,iMo,dMo,Gv,sse,cMo,fMo,YI,mMo,gMo,hMo,Ov,lse,uMo,pMo,KI,_Mo,vMo,bMo,Vv,ise,FMo,TMo,ZI,MMo,EMo,CMo,Xv,dse,wMo,AMo,eq,yMo,LMo,xMo,zv,cse,kMo,SMo,oq,RMo,BMo,PMo,Qv,fse,$Mo,IMo,rq,qMo,NMo,jMo,Wv,mse,DMo,GMo,tq,OMo,VMo,XMo,Hv,gse,zMo,QMo,aq,WMo,HMo,UMo,Uv,hse,JMo,YMo,nq,KMo,ZMo,eEo,Jv,use,oEo,rEo,sq,tEo,aEo,nEo,Yv,pse,sEo,lEo,lq,iEo,dEo,cEo,Kv,_se,fEo,mEo,iq,gEo,hEo,uEo,Zv,vse,pEo,_Eo,dq,vEo,bEo,FEo,e1,TEo,bse,MEo,EEo,Fse,CEo,wEo,Tse,AEo,yEo,xC,sRe,fd,o1,Mse,kC,LEo,Ese,xEo,lRe,or,SC,kEo,md,SEo,cq,REo,BEo,fq,PEo,$Eo,IEo,RC,qEo,Cse,NEo,jEo,DEo,Ur,BC,GEo,wse,OEo,VEo,gd,XEo,Ase,zEo,QEo,mq,WEo,HEo,UEo,yse,JEo,YEo,PC,KEo,Oe,$C,ZEo,Lse,e5o,o5o,Ua,r5o,xse,t5o,a5o,kse,n5o,s5o,Sse,l5o,i5o,d5o,y,r1,Rse,c5o,f5o,gq,m5o,g5o,h5o,t1,Bse,u5o,p5o,hq,_5o,v5o,b5o,a1,Pse,F5o,T5o,uq,M5o,E5o,C5o,n1,$se,w5o,A5o,pq,y5o,L5o,x5o,s1,Ise,k5o,S5o,_q,R5o,B5o,P5o,l1,qse,$5o,I5o,vq,q5o,N5o,j5o,i1,Nse,D5o,G5o,bq,O5o,V5o,X5o,d1,jse,z5o,Q5o,Fq,W5o,H5o,U5o,c1,Dse,J5o,Y5o,Tq,K5o,Z5o,e3o,f1,Gse,o3o,r3o,Mq,t3o,a3o,n3o,m1,Ose,s3o,l3o,Eq,i3o,d3o,c3o,g1,Vse,f3o,m3o,Cq,g3o,h3o,u3o,h1,Xse,p3o,_3o,wq,v3o,b3o,F3o,u1,zse,T3o,M3o,Aq,E3o,C3o,w3o,p1,Qse,A3o,y3o,yq,L3o,x3o,k3o,_1,Wse,S3o,R3o,Lq,B3o,P3o,$3o,v1,Hse,I3o,q3o,xq,N3o,j3o,D3o,b1,Use,G3o,O3o,kq,V3o,X3o,z3o,F1,Jse,Q3o,W3o,Sq,H3o,U3o,J3o,T1,Yse,Y3o,K3o,Rq,Z3o,eCo,oCo,M1,Kse,rCo,tCo,Bq,aCo,nCo,sCo,E1,Zse,lCo,iCo,Pq,dCo,cCo,fCo,C1,ele,mCo,gCo,$q,hCo,uCo,pCo,w1,ole,_Co,vCo,Iq,bCo,FCo,TCo,A1,rle,MCo,ECo,qq,CCo,wCo,ACo,y1,tle,yCo,LCo,Nq,xCo,kCo,SCo,L1,ale,RCo,BCo,jq,PCo,$Co,ICo,x1,nle,qCo,NCo,Dq,jCo,DCo,GCo,k1,sle,OCo,VCo,Gq,XCo,zCo,QCo,S1,lle,WCo,HCo,Oq,UCo,JCo,YCo,R1,ile,KCo,ZCo,Vq,ewo,owo,rwo,B1,dle,two,awo,Xq,nwo,swo,lwo,P1,cle,iwo,dwo,zq,cwo,fwo,mwo,$1,fle,gwo,hwo,Qq,uwo,pwo,_wo,I1,mle,vwo,bwo,Wq,Fwo,Two,Mwo,q1,gle,Ewo,Cwo,Hq,wwo,Awo,ywo,N1,hle,Lwo,xwo,Uq,kwo,Swo,Rwo,j1,ule,Bwo,Pwo,Jq,$wo,Iwo,qwo,D1,ple,Nwo,jwo,Yq,Dwo,Gwo,Owo,G1,_le,Vwo,Xwo,Kq,zwo,Qwo,Wwo,O1,vle,Hwo,Uwo,Zq,Jwo,Ywo,Kwo,V1,ble,Zwo,e6o,eN,o6o,r6o,t6o,X1,Fle,a6o,n6o,oN,s6o,l6o,i6o,z1,Tle,d6o,c6o,rN,f6o,m6o,g6o,Q1,Mle,h6o,u6o,tN,p6o,_6o,v6o,W1,Ele,b6o,F6o,aN,T6o,M6o,E6o,H1,C6o,Cle,w6o,A6o,wle,y6o,L6o,Ale,x6o,k6o,IC,iRe,hd,U1,yle,qC,S6o,Lle,R6o,dRe,rr,NC,B6o,ud,P6o,nN,$6o,I6o,sN,q6o,N6o,j6o,jC,D6o,xle,G6o,O6o,V6o,Jr,DC,X6o,kle,z6o,Q6o,pd,W6o,Sle,H6o,U6o,lN,J6o,Y6o,K6o,Rle,Z6o,eAo,GC,oAo,Ve,OC,rAo,Ble,tAo,aAo,Ja,nAo,Ple,sAo,lAo,$le,iAo,dAo,Ile,cAo,fAo,mAo,G,J1,qle,gAo,hAo,iN,uAo,pAo,_Ao,Y1,Nle,vAo,bAo,dN,FAo,TAo,MAo,K1,jle,EAo,CAo,cN,wAo,AAo,yAo,Z1,Dle,LAo,xAo,fN,kAo,SAo,RAo,e4,Gle,BAo,PAo,mN,$Ao,IAo,qAo,o4,Ole,NAo,jAo,gN,DAo,GAo,OAo,r4,Vle,VAo,XAo,hN,zAo,QAo,WAo,t4,Xle,HAo,UAo,uN,JAo,YAo,KAo,a4,zle,ZAo,eyo,pN,oyo,ryo,tyo,n4,Qle,ayo,nyo,_N,syo,lyo,iyo,s4,Wle,dyo,cyo,vN,fyo,myo,gyo,l4,Hle,hyo,uyo,bN,pyo,_yo,vyo,i4,Ule,byo,Fyo,FN,Tyo,Myo,Eyo,d4,Jle,Cyo,wyo,TN,Ayo,yyo,Lyo,c4,Yle,xyo,kyo,MN,Syo,Ryo,Byo,f4,Kle,Pyo,$yo,EN,Iyo,qyo,Nyo,m4,Zle,jyo,Dyo,CN,Gyo,Oyo,Vyo,g4,eie,Xyo,zyo,wN,Qyo,Wyo,Hyo,h4,oie,Uyo,Jyo,AN,Yyo,Kyo,Zyo,u4,rie,eLo,oLo,yN,rLo,tLo,aLo,p4,tie,nLo,sLo,LN,lLo,iLo,dLo,_4,aie,cLo,fLo,xN,mLo,gLo,hLo,v4,nie,uLo,pLo,kN,_Lo,vLo,bLo,b4,sie,FLo,TLo,SN,MLo,ELo,CLo,F4,lie,wLo,ALo,RN,yLo,LLo,xLo,T4,iie,kLo,SLo,BN,RLo,BLo,PLo,M4,die,$Lo,ILo,PN,qLo,NLo,jLo,E4,cie,DLo,GLo,$N,OLo,VLo,XLo,C4,zLo,fie,QLo,WLo,mie,HLo,ULo,gie,JLo,YLo,VC,cRe,_d,w4,hie,XC,KLo,uie,ZLo,fRe,tr,zC,e7o,vd,o7o,IN,r7o,t7o,qN,a7o,n7o,s7o,QC,l7o,pie,i7o,d7o,c7o,Yr,WC,f7o,_ie,m7o,g7o,bd,h7o,vie,u7o,p7o,NN,_7o,v7o,b7o,bie,F7o,T7o,HC,M7o,Xe,UC,E7o,Fie,C7o,w7o,Ya,A7o,Tie,y7o,L7o,Mie,x7o,k7o,Eie,S7o,R7o,B7o,da,A4,Cie,P7o,$7o,jN,I7o,q7o,N7o,y4,wie,j7o,D7o,DN,G7o,O7o,V7o,L4,Aie,X7o,z7o,GN,Q7o,W7o,H7o,x4,yie,U7o,J7o,ON,Y7o,K7o,Z7o,k4,Lie,exo,oxo,VN,rxo,txo,axo,S4,nxo,xie,sxo,lxo,kie,ixo,dxo,Sie,cxo,fxo,JC,mRe,Fd,R4,Rie,YC,mxo,Bie,gxo,gRe,ar,KC,hxo,Td,uxo,XN,pxo,_xo,zN,vxo,bxo,Fxo,ZC,Txo,Pie,Mxo,Exo,Cxo,Kr,ew,wxo,$ie,Axo,yxo,Md,Lxo,Iie,xxo,kxo,QN,Sxo,Rxo,Bxo,qie,Pxo,$xo,ow,Ixo,ze,rw,qxo,Nie,Nxo,jxo,Ka,Dxo,jie,Gxo,Oxo,Die,Vxo,Xxo,Gie,zxo,Qxo,Wxo,j,B4,Oie,Hxo,Uxo,WN,Jxo,Yxo,Kxo,P4,Vie,Zxo,e9o,HN,o9o,r9o,t9o,$4,Xie,a9o,n9o,UN,s9o,l9o,i9o,I4,zie,d9o,c9o,JN,f9o,m9o,g9o,q4,Qie,h9o,u9o,YN,p9o,_9o,v9o,N4,Wie,b9o,F9o,KN,T9o,M9o,E9o,j4,Hie,C9o,w9o,ZN,A9o,y9o,L9o,D4,Uie,x9o,k9o,ej,S9o,R9o,B9o,G4,Jie,P9o,$9o,oj,I9o,q9o,N9o,O4,Yie,j9o,D9o,rj,G9o,O9o,V9o,V4,Kie,X9o,z9o,tj,Q9o,W9o,H9o,X4,Zie,U9o,J9o,aj,Y9o,K9o,Z9o,z4,ede,eko,oko,nj,rko,tko,ako,Q4,ode,nko,sko,sj,lko,iko,dko,W4,rde,cko,fko,lj,mko,gko,hko,H4,tde,uko,pko,ij,_ko,vko,bko,U4,ade,Fko,Tko,dj,Mko,Eko,Cko,J4,nde,wko,Ako,cj,yko,Lko,xko,Y4,sde,kko,Sko,fj,Rko,Bko,Pko,K4,lde,$ko,Iko,mj,qko,Nko,jko,Z4,ide,Dko,Gko,gj,Oko,Vko,Xko,eb,dde,zko,Qko,hj,Wko,Hko,Uko,ob,cde,Jko,Yko,uj,Kko,Zko,eSo,rb,fde,oSo,rSo,pj,tSo,aSo,nSo,tb,mde,sSo,lSo,_j,iSo,dSo,cSo,ab,gde,fSo,mSo,vj,gSo,hSo,uSo,nb,hde,pSo,_So,bj,vSo,bSo,FSo,sb,ude,TSo,MSo,Fj,ESo,CSo,wSo,lb,pde,ASo,ySo,Tj,LSo,xSo,kSo,ib,_de,SSo,RSo,Mj,BSo,PSo,$So,db,vde,ISo,qSo,Ej,NSo,jSo,DSo,cb,bde,GSo,OSo,Cj,VSo,XSo,zSo,fb,Fde,QSo,WSo,wj,HSo,USo,JSo,mb,YSo,Tde,KSo,ZSo,Mde,eRo,oRo,Ede,rRo,tRo,tw,hRe,Ed,gb,Cde,aw,aRo,wde,nRo,uRe,nr,nw,sRo,Cd,lRo,Aj,iRo,dRo,yj,cRo,fRo,mRo,sw,gRo,Ade,hRo,uRo,pRo,Zr,lw,_Ro,yde,vRo,bRo,wd,FRo,Lde,TRo,MRo,Lj,ERo,CRo,wRo,xde,ARo,yRo,iw,LRo,Qe,dw,xRo,kde,kRo,SRo,Za,RRo,Sde,BRo,PRo,Rde,$Ro,IRo,Bde,qRo,NRo,jRo,R,hb,Pde,DRo,GRo,xj,ORo,VRo,XRo,ub,$de,zRo,QRo,kj,WRo,HRo,URo,pb,Ide,JRo,YRo,Sj,KRo,ZRo,eBo,_b,qde,oBo,rBo,Rj,tBo,aBo,nBo,vb,Nde,sBo,lBo,Bj,iBo,dBo,cBo,bb,jde,fBo,mBo,Pj,gBo,hBo,uBo,Fb,Dde,pBo,_Bo,$j,vBo,bBo,FBo,Tb,Gde,TBo,MBo,Ij,EBo,CBo,wBo,Mb,Ode,ABo,yBo,qj,LBo,xBo,kBo,Eb,Vde,SBo,RBo,Nj,BBo,PBo,$Bo,Cb,Xde,IBo,qBo,jj,NBo,jBo,DBo,wb,zde,GBo,OBo,Dj,VBo,XBo,zBo,Ab,Qde,QBo,WBo,Gj,HBo,UBo,JBo,yb,Wde,YBo,KBo,Oj,ZBo,ePo,oPo,Lb,Hde,rPo,tPo,Vj,aPo,nPo,sPo,xb,Ude,lPo,iPo,Xj,dPo,cPo,fPo,kb,Jde,mPo,gPo,zj,hPo,uPo,pPo,Sb,Yde,_Po,vPo,Qj,bPo,FPo,TPo,Rb,Kde,MPo,EPo,Wj,CPo,wPo,APo,Bb,Zde,yPo,LPo,Hj,xPo,kPo,SPo,Pb,ece,RPo,BPo,Uj,PPo,$Po,IPo,$b,oce,qPo,NPo,Jj,jPo,DPo,GPo,Ib,rce,OPo,VPo,Yj,XPo,zPo,QPo,qb,tce,WPo,HPo,Kj,UPo,JPo,YPo,Nb,ace,KPo,ZPo,Zj,e$o,o$o,r$o,jb,nce,t$o,a$o,eD,n$o,s$o,l$o,Db,sce,i$o,d$o,oD,c$o,f$o,m$o,Gb,lce,g$o,h$o,rD,u$o,p$o,_$o,Ob,ice,v$o,b$o,tD,F$o,T$o,M$o,Vb,dce,E$o,C$o,aD,w$o,A$o,y$o,Xb,cce,L$o,x$o,nD,k$o,S$o,R$o,zb,fce,B$o,P$o,sD,$$o,I$o,q$o,Qb,mce,N$o,j$o,lD,D$o,G$o,O$o,Wb,gce,V$o,X$o,iD,z$o,Q$o,W$o,Hb,hce,H$o,U$o,dD,J$o,Y$o,K$o,Ub,uce,Z$o,eIo,cD,oIo,rIo,tIo,Jb,pce,aIo,nIo,fD,sIo,lIo,iIo,Yb,_ce,dIo,cIo,mD,fIo,mIo,gIo,Kb,vce,hIo,uIo,gD,pIo,_Io,vIo,Zb,bIo,bce,FIo,TIo,Fce,MIo,EIo,Tce,CIo,wIo,cw,pRe,Ad,e2,Mce,fw,AIo,Ece,yIo,_Re,sr,mw,LIo,yd,xIo,hD,kIo,SIo,uD,RIo,BIo,PIo,gw,$Io,Cce,IIo,qIo,NIo,et,hw,jIo,wce,DIo,GIo,Ld,OIo,Ace,VIo,XIo,pD,zIo,QIo,WIo,yce,HIo,UIo,uw,JIo,We,pw,YIo,Lce,KIo,ZIo,en,eqo,xce,oqo,rqo,kce,tqo,aqo,Sce,nqo,sqo,lqo,Rce,o2,Bce,iqo,dqo,_D,cqo,fqo,mqo,r2,gqo,Pce,hqo,uqo,$ce,pqo,_qo,Ice,vqo,bqo,_w,vRe,xd,t2,qce,vw,Fqo,Nce,Tqo,bRe,lr,bw,Mqo,kd,Eqo,vD,Cqo,wqo,bD,Aqo,yqo,Lqo,Fw,xqo,jce,kqo,Sqo,Rqo,ot,Tw,Bqo,Dce,Pqo,$qo,Sd,Iqo,Gce,qqo,Nqo,FD,jqo,Dqo,Gqo,Oce,Oqo,Vqo,Mw,Xqo,He,Ew,zqo,Vce,Qqo,Wqo,on,Hqo,Xce,Uqo,Jqo,zce,Yqo,Kqo,Qce,Zqo,eNo,oNo,ge,a2,Wce,rNo,tNo,TD,aNo,nNo,sNo,n2,Hce,lNo,iNo,MD,dNo,cNo,fNo,Ds,Uce,mNo,gNo,ED,hNo,uNo,CD,pNo,_No,vNo,s2,Jce,bNo,FNo,wD,TNo,MNo,ENo,ma,Yce,CNo,wNo,AD,ANo,yNo,yD,LNo,xNo,LD,kNo,SNo,RNo,l2,Kce,BNo,PNo,xD,$No,INo,qNo,i2,Zce,NNo,jNo,kD,DNo,GNo,ONo,d2,efe,VNo,XNo,SD,zNo,QNo,WNo,c2,ofe,HNo,UNo,RD,JNo,YNo,KNo,f2,rfe,ZNo,ejo,BD,ojo,rjo,tjo,m2,tfe,ajo,njo,PD,sjo,ljo,ijo,g2,djo,afe,cjo,fjo,nfe,mjo,gjo,sfe,hjo,ujo,Cw,FRe,Rd,h2,lfe,ww,pjo,ife,_jo,TRe,ir,Aw,vjo,Bd,bjo,$D,Fjo,Tjo,ID,Mjo,Ejo,Cjo,yw,wjo,dfe,Ajo,yjo,Ljo,rt,Lw,xjo,cfe,kjo,Sjo,Pd,Rjo,ffe,Bjo,Pjo,qD,$jo,Ijo,qjo,mfe,Njo,jjo,xw,Djo,Ue,kw,Gjo,gfe,Ojo,Vjo,rn,Xjo,hfe,zjo,Qjo,ufe,Wjo,Hjo,pfe,Ujo,Jjo,Yjo,_fe,u2,vfe,Kjo,Zjo,ND,eDo,oDo,rDo,p2,tDo,bfe,aDo,nDo,Ffe,sDo,lDo,Tfe,iDo,dDo,Sw,MRe,$d,_2,Mfe,Rw,cDo,Efe,fDo,ERe,dr,Bw,mDo,Id,gDo,jD,hDo,uDo,DD,pDo,_Do,vDo,Pw,bDo,Cfe,FDo,TDo,MDo,tt,$w,EDo,wfe,CDo,wDo,qd,ADo,Afe,yDo,LDo,GD,xDo,kDo,SDo,yfe,RDo,BDo,Iw,PDo,Je,qw,$Do,Lfe,IDo,qDo,tn,NDo,xfe,jDo,DDo,kfe,GDo,ODo,Sfe,VDo,XDo,zDo,Se,v2,Rfe,QDo,WDo,OD,HDo,UDo,JDo,b2,Bfe,YDo,KDo,VD,ZDo,eGo,oGo,F2,Pfe,rGo,tGo,XD,aGo,nGo,sGo,T2,$fe,lGo,iGo,zD,dGo,cGo,fGo,M2,Ife,mGo,gGo,QD,hGo,uGo,pGo,E2,qfe,_Go,vGo,WD,bGo,FGo,TGo,C2,Nfe,MGo,EGo,HD,CGo,wGo,AGo,w2,jfe,yGo,LGo,UD,xGo,kGo,SGo,A2,RGo,Dfe,BGo,PGo,Gfe,$Go,IGo,Ofe,qGo,NGo,Nw,CRe,Nd,y2,Vfe,jw,jGo,Xfe,DGo,wRe,cr,Dw,GGo,jd,OGo,JD,VGo,XGo,YD,zGo,QGo,WGo,Gw,HGo,zfe,UGo,JGo,YGo,at,Ow,KGo,Qfe,ZGo,eOo,Dd,oOo,Wfe,rOo,tOo,KD,aOo,nOo,sOo,Hfe,lOo,iOo,Vw,dOo,Ye,Xw,cOo,Ufe,fOo,mOo,an,gOo,Jfe,hOo,uOo,Yfe,pOo,_Oo,Kfe,vOo,bOo,FOo,nn,L2,Zfe,TOo,MOo,ZD,EOo,COo,wOo,x2,eme,AOo,yOo,eG,LOo,xOo,kOo,k2,ome,SOo,ROo,oG,BOo,POo,$Oo,S2,rme,IOo,qOo,rG,NOo,jOo,DOo,R2,GOo,tme,OOo,VOo,ame,XOo,zOo,nme,QOo,WOo,zw,ARe,Gd,B2,sme,Qw,HOo,lme,UOo,yRe,fr,Ww,JOo,Od,YOo,tG,KOo,ZOo,aG,eVo,oVo,rVo,Hw,tVo,ime,aVo,nVo,sVo,nt,Uw,lVo,dme,iVo,dVo,Vd,cVo,cme,fVo,mVo,nG,gVo,hVo,uVo,fme,pVo,_Vo,Jw,vVo,Ke,Yw,bVo,mme,FVo,TVo,sn,MVo,gme,EVo,CVo,hme,wVo,AVo,ume,yVo,LVo,xVo,Re,P2,pme,kVo,SVo,sG,RVo,BVo,PVo,$2,_me,$Vo,IVo,lG,qVo,NVo,jVo,I2,vme,DVo,GVo,iG,OVo,VVo,XVo,q2,bme,zVo,QVo,dG,WVo,HVo,UVo,N2,Fme,JVo,YVo,cG,KVo,ZVo,eXo,j2,Tme,oXo,rXo,fG,tXo,aXo,nXo,D2,Mme,sXo,lXo,mG,iXo,dXo,cXo,G2,Eme,fXo,mXo,gG,gXo,hXo,uXo,O2,pXo,Cme,_Xo,vXo,wme,bXo,FXo,Ame,TXo,MXo,Kw,LRe,Xd,V2,yme,Zw,EXo,Lme,CXo,xRe,mr,e6,wXo,zd,AXo,hG,yXo,LXo,uG,xXo,kXo,SXo,o6,RXo,xme,BXo,PXo,$Xo,st,r6,IXo,kme,qXo,NXo,Qd,jXo,Sme,DXo,GXo,pG,OXo,VXo,XXo,Rme,zXo,QXo,t6,WXo,Ze,a6,HXo,Bme,UXo,JXo,ln,YXo,Pme,KXo,ZXo,$me,ezo,ozo,Ime,rzo,tzo,azo,n6,X2,qme,nzo,szo,_G,lzo,izo,dzo,z2,Nme,czo,fzo,vG,mzo,gzo,hzo,Q2,uzo,jme,pzo,_zo,Dme,vzo,bzo,Gme,Fzo,Tzo,s6,kRe,Wd,W2,Ome,l6,Mzo,Vme,Ezo,SRe,gr,i6,Czo,Hd,wzo,bG,Azo,yzo,FG,Lzo,xzo,kzo,d6,Szo,Xme,Rzo,Bzo,Pzo,lt,c6,$zo,zme,Izo,qzo,Ud,Nzo,Qme,jzo,Dzo,TG,Gzo,Ozo,Vzo,Wme,Xzo,zzo,f6,Qzo,eo,m6,Wzo,Hme,Hzo,Uzo,dn,Jzo,Ume,Yzo,Kzo,Jme,Zzo,eQo,Yme,oQo,rQo,tQo,cn,H2,Kme,aQo,nQo,MG,sQo,lQo,iQo,U2,Zme,dQo,cQo,EG,fQo,mQo,gQo,J2,ege,hQo,uQo,CG,pQo,_Qo,vQo,Y2,oge,bQo,FQo,wG,TQo,MQo,EQo,K2,CQo,rge,wQo,AQo,tge,yQo,LQo,age,xQo,kQo,g6,RRe,Jd,Z2,nge,h6,SQo,sge,RQo,BRe,hr,u6,BQo,Yd,PQo,AG,$Qo,IQo,yG,qQo,NQo,jQo,p6,DQo,lge,GQo,OQo,VQo,it,_6,XQo,ige,zQo,QQo,Kd,WQo,dge,HQo,UQo,LG,JQo,YQo,KQo,cge,ZQo,eWo,v6,oWo,oo,b6,rWo,fge,tWo,aWo,fn,nWo,mge,sWo,lWo,gge,iWo,dWo,hge,cWo,fWo,mWo,Zd,eF,uge,gWo,hWo,xG,uWo,pWo,_Wo,oF,pge,vWo,bWo,kG,FWo,TWo,MWo,rF,_ge,EWo,CWo,SG,wWo,AWo,yWo,tF,LWo,vge,xWo,kWo,bge,SWo,RWo,Fge,BWo,PWo,F6,PRe,ec,aF,Tge,T6,$Wo,Mge,IWo,$Re,ur,M6,qWo,oc,NWo,RG,jWo,DWo,BG,GWo,OWo,VWo,E6,XWo,Ege,zWo,QWo,WWo,dt,C6,HWo,Cge,UWo,JWo,rc,YWo,wge,KWo,ZWo,PG,eHo,oHo,rHo,Age,tHo,aHo,w6,nHo,ro,A6,sHo,yge,lHo,iHo,mn,dHo,Lge,cHo,fHo,xge,mHo,gHo,kge,hHo,uHo,pHo,Sge,nF,Rge,_Ho,vHo,$G,bHo,FHo,THo,sF,MHo,Bge,EHo,CHo,Pge,wHo,AHo,$ge,yHo,LHo,y6,IRe,tc,lF,Ige,L6,xHo,qge,kHo,qRe,pr,x6,SHo,ac,RHo,IG,BHo,PHo,qG,$Ho,IHo,qHo,k6,NHo,Nge,jHo,DHo,GHo,ct,S6,OHo,jge,VHo,XHo,nc,zHo,Dge,QHo,WHo,NG,HHo,UHo,JHo,Gge,YHo,KHo,R6,ZHo,to,B6,eUo,Oge,oUo,rUo,gn,tUo,Vge,aUo,nUo,Xge,sUo,lUo,zge,iUo,dUo,cUo,Qge,iF,Wge,fUo,mUo,jG,gUo,hUo,uUo,dF,pUo,Hge,_Uo,vUo,Uge,bUo,FUo,Jge,TUo,MUo,P6,NRe,sc,cF,Yge,$6,EUo,Kge,CUo,jRe,_r,I6,wUo,lc,AUo,DG,yUo,LUo,GG,xUo,kUo,SUo,q6,RUo,Zge,BUo,PUo,$Uo,ft,N6,IUo,ehe,qUo,NUo,ic,jUo,ohe,DUo,GUo,OG,OUo,VUo,XUo,rhe,zUo,QUo,j6,WUo,ao,D6,HUo,the,UUo,JUo,hn,YUo,ahe,KUo,ZUo,nhe,eJo,oJo,she,rJo,tJo,aJo,dc,fF,lhe,nJo,sJo,VG,lJo,iJo,dJo,mF,ihe,cJo,fJo,XG,mJo,gJo,hJo,gF,dhe,uJo,pJo,zG,_Jo,vJo,bJo,hF,FJo,che,TJo,MJo,fhe,EJo,CJo,mhe,wJo,AJo,G6,DRe,cc,uF,ghe,O6,yJo,hhe,LJo,GRe,vr,V6,xJo,fc,kJo,QG,SJo,RJo,WG,BJo,PJo,$Jo,X6,IJo,uhe,qJo,NJo,jJo,mt,z6,DJo,phe,GJo,OJo,mc,VJo,_he,XJo,zJo,HG,QJo,WJo,HJo,vhe,UJo,JJo,Q6,YJo,no,W6,KJo,bhe,ZJo,eYo,un,oYo,Fhe,rYo,tYo,The,aYo,nYo,Mhe,sYo,lYo,iYo,Ehe,pF,Che,dYo,cYo,UG,fYo,mYo,gYo,_F,hYo,whe,uYo,pYo,Ahe,_Yo,vYo,yhe,bYo,FYo,H6,ORe,gc,vF,Lhe,U6,TYo,xhe,MYo,VRe,br,J6,EYo,hc,CYo,JG,wYo,AYo,YG,yYo,LYo,xYo,Y6,kYo,khe,SYo,RYo,BYo,gt,K6,PYo,She,$Yo,IYo,uc,qYo,Rhe,NYo,jYo,KG,DYo,GYo,OYo,Bhe,VYo,XYo,Z6,zYo,ho,eA,QYo,Phe,WYo,HYo,pn,UYo,$he,JYo,YYo,Ihe,KYo,ZYo,qhe,eKo,oKo,rKo,x,bF,Nhe,tKo,aKo,ZG,nKo,sKo,lKo,FF,jhe,iKo,dKo,eO,cKo,fKo,mKo,TF,Dhe,gKo,hKo,oO,uKo,pKo,_Ko,MF,Ghe,vKo,bKo,rO,FKo,TKo,MKo,EF,Ohe,EKo,CKo,tO,wKo,AKo,yKo,CF,Vhe,LKo,xKo,aO,kKo,SKo,RKo,wF,Xhe,BKo,PKo,nO,$Ko,IKo,qKo,AF,zhe,NKo,jKo,sO,DKo,GKo,OKo,yF,Qhe,VKo,XKo,lO,zKo,QKo,WKo,LF,Whe,HKo,UKo,iO,JKo,YKo,KKo,xF,Hhe,ZKo,eZo,dO,oZo,rZo,tZo,kF,Uhe,aZo,nZo,cO,sZo,lZo,iZo,SF,Jhe,dZo,cZo,fO,fZo,mZo,gZo,RF,Yhe,hZo,uZo,mO,pZo,_Zo,vZo,BF,Khe,bZo,FZo,gO,TZo,MZo,EZo,PF,Zhe,CZo,wZo,hO,AZo,yZo,LZo,Gs,eue,xZo,kZo,uO,SZo,RZo,pO,BZo,PZo,$Zo,$F,oue,IZo,qZo,_O,NZo,jZo,DZo,IF,rue,GZo,OZo,vO,VZo,XZo,zZo,qF,tue,QZo,WZo,bO,HZo,UZo,JZo,NF,aue,YZo,KZo,FO,ZZo,eer,oer,jF,nue,rer,ter,TO,aer,ner,ser,DF,sue,ler,ier,MO,der,cer,fer,GF,lue,mer,ger,EO,her,uer,per,OF,iue,_er,ver,CO,ber,Fer,Ter,VF,due,Mer,Eer,wO,Cer,wer,Aer,XF,cue,yer,Ler,AO,xer,ker,Ser,zF,fue,Rer,Ber,yO,Per,$er,Ier,QF,mue,qer,Ner,LO,jer,Der,Ger,WF,gue,Oer,Ver,xO,Xer,zer,Qer,HF,hue,Wer,Her,kO,Uer,Jer,Yer,UF,uue,Ker,Zer,SO,eor,oor,ror,JF,pue,tor,aor,RO,nor,sor,lor,YF,_ue,ior,dor,BO,cor,mor,gor,KF,vue,hor,uor,PO,por,_or,vor,ZF,bue,bor,For,$O,Tor,Mor,Eor,e0,Fue,Cor,wor,IO,Aor,yor,Lor,o0,Tue,xor,kor,qO,Sor,Ror,Bor,r0,Mue,Por,$or,NO,Ior,qor,Nor,t0,Eue,jor,Dor,jO,Gor,Oor,Vor,a0,Cue,Xor,zor,DO,Qor,Wor,Hor,n0,wue,Uor,Jor,GO,Yor,Kor,Zor,s0,Aue,err,orr,OO,rrr,trr,arr,l0,yue,nrr,srr,VO,lrr,irr,drr,Lue,crr,frr,oA,XRe,pc,i0,xue,rA,mrr,kue,grr,zRe,Fr,tA,hrr,_c,urr,XO,prr,_rr,zO,vrr,brr,Frr,aA,Trr,Sue,Mrr,Err,Crr,ht,nA,wrr,Rue,Arr,yrr,vc,Lrr,Bue,xrr,krr,QO,Srr,Rrr,Brr,Pue,Prr,$rr,sA,Irr,uo,lA,qrr,$ue,Nrr,jrr,_n,Drr,Iue,Grr,Orr,que,Vrr,Xrr,Nue,zrr,Qrr,Wrr,H,d0,jue,Hrr,Urr,WO,Jrr,Yrr,Krr,c0,Due,Zrr,etr,HO,otr,rtr,ttr,f0,Gue,atr,ntr,UO,str,ltr,itr,m0,Oue,dtr,ctr,JO,ftr,mtr,gtr,g0,Vue,htr,utr,YO,ptr,_tr,vtr,h0,Xue,btr,Ftr,KO,Ttr,Mtr,Etr,u0,zue,Ctr,wtr,ZO,Atr,ytr,Ltr,p0,Que,xtr,ktr,eV,Str,Rtr,Btr,_0,Wue,Ptr,$tr,oV,Itr,qtr,Ntr,v0,Hue,jtr,Dtr,rV,Gtr,Otr,Vtr,b0,Uue,Xtr,ztr,tV,Qtr,Wtr,Htr,F0,Jue,Utr,Jtr,aV,Ytr,Ktr,Ztr,T0,Yue,ear,oar,nV,rar,tar,aar,M0,Kue,nar,sar,sV,lar,iar,dar,E0,Zue,car,far,lV,mar,gar,har,C0,epe,uar,par,iV,_ar,bar,Far,w0,ope,Tar,Mar,dV,Ear,Car,war,A0,rpe,Aar,yar,cV,Lar,xar,kar,y0,tpe,Sar,Rar,fV,Bar,Par,$ar,L0,ape,Iar,qar,mV,Nar,jar,Dar,x0,npe,Gar,Oar,gV,Var,Xar,zar,k0,spe,Qar,War,hV,Har,Uar,Jar,S0,lpe,Yar,Kar,uV,Zar,enr,onr,ipe,rnr,tnr,iA,QRe,bc,R0,dpe,dA,anr,cpe,nnr,WRe,Tr,cA,snr,Fc,lnr,pV,inr,dnr,_V,cnr,fnr,mnr,fA,gnr,fpe,hnr,unr,pnr,ut,mA,_nr,mpe,vnr,bnr,Tc,Fnr,gpe,Tnr,Mnr,vV,Enr,Cnr,wnr,hpe,Anr,ynr,gA,Lnr,po,hA,xnr,upe,knr,Snr,vn,Rnr,ppe,Bnr,Pnr,_pe,$nr,Inr,vpe,qnr,Nnr,jnr,ce,B0,bpe,Dnr,Gnr,bV,Onr,Vnr,Xnr,P0,Fpe,znr,Qnr,FV,Wnr,Hnr,Unr,$0,Tpe,Jnr,Ynr,TV,Knr,Znr,esr,I0,Mpe,osr,rsr,MV,tsr,asr,nsr,q0,Epe,ssr,lsr,EV,isr,dsr,csr,N0,Cpe,fsr,msr,CV,gsr,hsr,usr,j0,wpe,psr,_sr,wV,vsr,bsr,Fsr,D0,Ape,Tsr,Msr,AV,Esr,Csr,wsr,G0,ype,Asr,ysr,yV,Lsr,xsr,ksr,O0,Lpe,Ssr,Rsr,LV,Bsr,Psr,$sr,V0,xpe,Isr,qsr,xV,Nsr,jsr,Dsr,X0,kpe,Gsr,Osr,kV,Vsr,Xsr,zsr,Spe,Qsr,Wsr,uA,HRe,Mc,z0,Rpe,pA,Hsr,Bpe,Usr,URe,Mr,_A,Jsr,Ec,Ysr,SV,Ksr,Zsr,RV,elr,olr,rlr,vA,tlr,Ppe,alr,nlr,slr,pt,bA,llr,$pe,ilr,dlr,Cc,clr,Ipe,flr,mlr,BV,glr,hlr,ulr,qpe,plr,_lr,FA,vlr,_o,TA,blr,Npe,Flr,Tlr,bn,Mlr,jpe,Elr,Clr,Dpe,wlr,Alr,Gpe,ylr,Llr,xlr,MA,Q0,Ope,klr,Slr,PV,Rlr,Blr,Plr,W0,Vpe,$lr,Ilr,$V,qlr,Nlr,jlr,Xpe,Dlr,Glr,EA,JRe,wc,H0,zpe,CA,Olr,Qpe,Vlr,YRe,Er,wA,Xlr,Ac,zlr,IV,Qlr,Wlr,qV,Hlr,Ulr,Jlr,AA,Ylr,Wpe,Klr,Zlr,eir,_t,yA,oir,Hpe,rir,tir,yc,air,Upe,nir,sir,NV,lir,iir,dir,Jpe,cir,fir,LA,mir,vo,xA,gir,Ype,hir,uir,Fn,pir,Kpe,_ir,vir,Zpe,bir,Fir,e_e,Tir,Mir,Eir,J,U0,o_e,Cir,wir,jV,Air,yir,Lir,J0,r_e,xir,kir,DV,Sir,Rir,Bir,Y0,t_e,Pir,$ir,GV,Iir,qir,Nir,K0,a_e,jir,Dir,OV,Gir,Oir,Vir,Z0,n_e,Xir,zir,VV,Qir,Wir,Hir,eT,s_e,Uir,Jir,XV,Yir,Kir,Zir,oT,l_e,edr,odr,zV,rdr,tdr,adr,rT,i_e,ndr,sdr,QV,ldr,idr,ddr,tT,d_e,cdr,fdr,WV,mdr,gdr,hdr,aT,c_e,udr,pdr,HV,_dr,vdr,bdr,nT,f_e,Fdr,Tdr,UV,Mdr,Edr,Cdr,sT,m_e,wdr,Adr,JV,ydr,Ldr,xdr,lT,g_e,kdr,Sdr,YV,Rdr,Bdr,Pdr,iT,h_e,$dr,Idr,KV,qdr,Ndr,jdr,dT,u_e,Ddr,Gdr,ZV,Odr,Vdr,Xdr,cT,p_e,zdr,Qdr,eX,Wdr,Hdr,Udr,fT,__e,Jdr,Ydr,oX,Kdr,Zdr,ecr,mT,v_e,ocr,rcr,rX,tcr,acr,ncr,gT,b_e,scr,lcr,tX,icr,dcr,ccr,hT,F_e,fcr,mcr,aX,gcr,hcr,ucr,T_e,pcr,_cr,kA,KRe,Lc,uT,M_e,SA,vcr,E_e,bcr,ZRe,Cr,RA,Fcr,xc,Tcr,nX,Mcr,Ecr,sX,Ccr,wcr,Acr,BA,ycr,C_e,Lcr,xcr,kcr,vt,PA,Scr,w_e,Rcr,Bcr,kc,Pcr,A_e,$cr,Icr,lX,qcr,Ncr,jcr,y_e,Dcr,Gcr,$A,Ocr,bo,IA,Vcr,L_e,Xcr,zcr,Tn,Qcr,x_e,Wcr,Hcr,k_e,Ucr,Jcr,S_e,Ycr,Kcr,Zcr,_e,pT,R_e,efr,ofr,iX,rfr,tfr,afr,_T,B_e,nfr,sfr,dX,lfr,ifr,dfr,vT,P_e,cfr,ffr,cX,mfr,gfr,hfr,bT,$_e,ufr,pfr,fX,_fr,vfr,bfr,FT,I_e,Ffr,Tfr,mX,Mfr,Efr,Cfr,TT,q_e,wfr,Afr,gX,yfr,Lfr,xfr,MT,N_e,kfr,Sfr,hX,Rfr,Bfr,Pfr,ET,j_e,$fr,Ifr,uX,qfr,Nfr,jfr,CT,D_e,Dfr,Gfr,pX,Ofr,Vfr,Xfr,wT,G_e,zfr,Qfr,_X,Wfr,Hfr,Ufr,O_e,Jfr,Yfr,qA,eBe,Sc,AT,V_e,NA,Kfr,X_e,Zfr,oBe,wr,jA,emr,Rc,omr,vX,rmr,tmr,bX,amr,nmr,smr,DA,lmr,z_e,imr,dmr,cmr,bt,GA,fmr,Q_e,mmr,gmr,Bc,hmr,W_e,umr,pmr,FX,_mr,vmr,bmr,H_e,Fmr,Tmr,OA,Mmr,Fo,VA,Emr,U_e,Cmr,wmr,Mn,Amr,J_e,ymr,Lmr,Y_e,xmr,kmr,K_e,Smr,Rmr,Bmr,V,yT,Z_e,Pmr,$mr,TX,Imr,qmr,Nmr,LT,eve,jmr,Dmr,MX,Gmr,Omr,Vmr,xT,ove,Xmr,zmr,EX,Qmr,Wmr,Hmr,kT,rve,Umr,Jmr,CX,Ymr,Kmr,Zmr,ST,tve,egr,ogr,wX,rgr,tgr,agr,RT,ave,ngr,sgr,AX,lgr,igr,dgr,BT,nve,cgr,fgr,yX,mgr,ggr,hgr,PT,sve,ugr,pgr,LX,_gr,vgr,bgr,$T,lve,Fgr,Tgr,xX,Mgr,Egr,Cgr,IT,ive,wgr,Agr,kX,ygr,Lgr,xgr,qT,dve,kgr,Sgr,SX,Rgr,Bgr,Pgr,NT,cve,$gr,Igr,RX,qgr,Ngr,jgr,jT,fve,Dgr,Ggr,BX,Ogr,Vgr,Xgr,DT,mve,zgr,Qgr,PX,Wgr,Hgr,Ugr,GT,gve,Jgr,Ygr,$X,Kgr,Zgr,ehr,OT,hve,ohr,rhr,IX,thr,ahr,nhr,VT,uve,shr,lhr,qX,ihr,dhr,chr,XT,pve,fhr,mhr,NX,ghr,hhr,uhr,zT,_ve,phr,_hr,jX,vhr,bhr,Fhr,QT,vve,Thr,Mhr,DX,Ehr,Chr,whr,WT,bve,Ahr,yhr,GX,Lhr,xhr,khr,HT,Fve,Shr,Rhr,OX,Bhr,Phr,$hr,UT,Tve,Ihr,qhr,VX,Nhr,jhr,Dhr,JT,Mve,Ghr,Ohr,XX,Vhr,Xhr,zhr,YT,Eve,Qhr,Whr,zX,Hhr,Uhr,Jhr,KT,Cve,Yhr,Khr,QX,Zhr,eur,our,wve,rur,tur,XA,rBe,Pc,ZT,Ave,zA,aur,yve,nur,tBe,Ar,QA,sur,$c,lur,WX,iur,dur,HX,cur,fur,mur,WA,gur,Lve,hur,uur,pur,Ft,HA,_ur,xve,vur,bur,Ic,Fur,kve,Tur,Mur,UX,Eur,Cur,wur,Sve,Aur,yur,UA,Lur,To,JA,xur,Rve,kur,Sur,En,Rur,Bve,Bur,Pur,Pve,$ur,Iur,$ve,qur,Nur,jur,ae,e8,Ive,Dur,Gur,JX,Our,Vur,Xur,o8,qve,zur,Qur,YX,Wur,Hur,Uur,r8,Nve,Jur,Yur,KX,Kur,Zur,epr,t8,jve,opr,rpr,ZX,tpr,apr,npr,a8,Dve,spr,lpr,ez,ipr,dpr,cpr,n8,Gve,fpr,mpr,oz,gpr,hpr,upr,s8,Ove,ppr,_pr,rz,vpr,bpr,Fpr,l8,Vve,Tpr,Mpr,tz,Epr,Cpr,wpr,i8,Xve,Apr,ypr,az,Lpr,xpr,kpr,d8,zve,Spr,Rpr,nz,Bpr,Ppr,$pr,c8,Qve,Ipr,qpr,sz,Npr,jpr,Dpr,f8,Wve,Gpr,Opr,lz,Vpr,Xpr,zpr,m8,Hve,Qpr,Wpr,iz,Hpr,Upr,Jpr,g8,Uve,Ypr,Kpr,dz,Zpr,e_r,o_r,h8,Jve,r_r,t_r,cz,a_r,n_r,s_r,u8,Yve,l_r,i_r,fz,d_r,c_r,f_r,p8,Kve,m_r,g_r,mz,h_r,u_r,p_r,Zve,__r,v_r,YA,aBe,qc,_8,e1e,KA,b_r,o1e,F_r,nBe,yr,ZA,T_r,Nc,M_r,gz,E_r,C_r,hz,w_r,A_r,y_r,ey,L_r,r1e,x_r,k_r,S_r,Tt,oy,R_r,t1e,B_r,P_r,jc,$_r,a1e,I_r,q_r,uz,N_r,j_r,D_r,n1e,G_r,O_r,ry,V_r,Mo,ty,X_r,s1e,z_r,Q_r,Cn,W_r,l1e,H_r,U_r,i1e,J_r,Y_r,d1e,K_r,Z_r,evr,c1e,v8,f1e,ovr,rvr,pz,tvr,avr,nvr,m1e,svr,lvr,ay,sBe,Dc,b8,g1e,ny,ivr,h1e,dvr,lBe,Lr,sy,cvr,Gc,fvr,_z,mvr,gvr,vz,hvr,uvr,pvr,ly,_vr,u1e,vvr,bvr,Fvr,Mt,iy,Tvr,p1e,Mvr,Evr,Oc,Cvr,_1e,wvr,Avr,bz,yvr,Lvr,xvr,v1e,kvr,Svr,dy,Rvr,Eo,cy,Bvr,b1e,Pvr,$vr,wn,Ivr,F1e,qvr,Nvr,T1e,jvr,Dvr,M1e,Gvr,Ovr,Vvr,Y,F8,E1e,Xvr,zvr,Fz,Qvr,Wvr,Hvr,T8,C1e,Uvr,Jvr,Tz,Yvr,Kvr,Zvr,M8,w1e,e1r,o1r,Mz,r1r,t1r,a1r,E8,A1e,n1r,s1r,Ez,l1r,i1r,d1r,C8,y1e,c1r,f1r,Cz,m1r,g1r,h1r,w8,L1e,u1r,p1r,wz,_1r,v1r,b1r,A8,x1e,F1r,T1r,Az,M1r,E1r,C1r,y8,k1e,w1r,A1r,yz,y1r,L1r,x1r,L8,S1e,k1r,S1r,Lz,R1r,B1r,P1r,x8,R1e,$1r,I1r,xz,q1r,N1r,j1r,k8,B1e,D1r,G1r,kz,O1r,V1r,X1r,S8,P1e,z1r,Q1r,Sz,W1r,H1r,U1r,R8,$1e,J1r,Y1r,Rz,K1r,Z1r,e4r,B8,I1e,o4r,r4r,Bz,t4r,a4r,n4r,P8,q1e,s4r,l4r,Pz,i4r,d4r,c4r,$8,N1e,f4r,m4r,$z,g4r,h4r,u4r,I8,j1e,p4r,_4r,Iz,v4r,b4r,F4r,q8,D1e,T4r,M4r,qz,E4r,C4r,w4r,N8,G1e,A4r,y4r,Nz,L4r,x4r,k4r,j8,O1e,S4r,R4r,jz,B4r,P4r,$4r,V1e,I4r,q4r,fy,iBe,Vc,D8,X1e,my,N4r,z1e,j4r,dBe,xr,gy,D4r,Xc,G4r,Dz,O4r,V4r,Gz,X4r,z4r,Q4r,hy,W4r,Q1e,H4r,U4r,J4r,Et,uy,Y4r,W1e,K4r,Z4r,zc,ebr,H1e,obr,rbr,Oz,tbr,abr,nbr,U1e,sbr,lbr,py,ibr,Co,_y,dbr,J1e,cbr,fbr,An,mbr,Y1e,gbr,hbr,K1e,ubr,pbr,Z1e,_br,vbr,bbr,K,G8,e4e,Fbr,Tbr,Vz,Mbr,Ebr,Cbr,O8,o4e,wbr,Abr,Xz,ybr,Lbr,xbr,V8,r4e,kbr,Sbr,zz,Rbr,Bbr,Pbr,X8,t4e,$br,Ibr,Qz,qbr,Nbr,jbr,z8,a4e,Dbr,Gbr,Wz,Obr,Vbr,Xbr,Q8,n4e,zbr,Qbr,Hz,Wbr,Hbr,Ubr,W8,s4e,Jbr,Ybr,Uz,Kbr,Zbr,e2r,H8,l4e,o2r,r2r,Jz,t2r,a2r,n2r,U8,i4e,s2r,l2r,Yz,i2r,d2r,c2r,J8,d4e,f2r,m2r,Kz,g2r,h2r,u2r,Y8,c4e,p2r,_2r,Zz,v2r,b2r,F2r,K8,f4e,T2r,M2r,eQ,E2r,C2r,w2r,Z8,m4e,A2r,y2r,oQ,L2r,x2r,k2r,eM,g4e,S2r,R2r,rQ,B2r,P2r,$2r,oM,h4e,I2r,q2r,tQ,N2r,j2r,D2r,rM,u4e,G2r,O2r,aQ,V2r,X2r,z2r,tM,p4e,Q2r,W2r,nQ,H2r,U2r,J2r,aM,_4e,Y2r,K2r,sQ,Z2r,eFr,oFr,nM,v4e,rFr,tFr,lQ,aFr,nFr,sFr,sM,b4e,lFr,iFr,iQ,dFr,cFr,fFr,F4e,mFr,gFr,vy,cBe,Qc,lM,T4e,by,hFr,M4e,uFr,fBe,kr,Fy,pFr,Wc,_Fr,dQ,vFr,bFr,cQ,FFr,TFr,MFr,Ty,EFr,E4e,CFr,wFr,AFr,Ct,My,yFr,C4e,LFr,xFr,Hc,kFr,w4e,SFr,RFr,fQ,BFr,PFr,$Fr,A4e,IFr,qFr,Ey,NFr,wo,Cy,jFr,y4e,DFr,GFr,yn,OFr,L4e,VFr,XFr,x4e,zFr,QFr,k4e,WFr,HFr,UFr,S4e,iM,R4e,JFr,YFr,mQ,KFr,ZFr,e0r,B4e,o0r,r0r,wy,mBe,Uc,dM,P4e,Ay,t0r,$4e,a0r,gBe,Sr,yy,n0r,Jc,s0r,gQ,l0r,i0r,hQ,d0r,c0r,f0r,Ly,m0r,I4e,g0r,h0r,u0r,wt,xy,p0r,q4e,_0r,v0r,Yc,b0r,N4e,F0r,T0r,uQ,M0r,E0r,C0r,j4e,w0r,A0r,ky,y0r,Ao,Sy,L0r,D4e,x0r,k0r,Ln,S0r,G4e,R0r,B0r,O4e,P0r,$0r,V4e,I0r,q0r,N0r,X4e,cM,z4e,j0r,D0r,pQ,G0r,O0r,V0r,Q4e,X0r,z0r,Ry,hBe,Kc,fM,W4e,By,Q0r,H4e,W0r,uBe,Rr,Py,H0r,Zc,U0r,_Q,J0r,Y0r,vQ,K0r,Z0r,eTr,$y,oTr,U4e,rTr,tTr,aTr,At,Iy,nTr,J4e,sTr,lTr,ef,iTr,Y4e,dTr,cTr,bQ,fTr,mTr,gTr,K4e,hTr,uTr,qy,pTr,yo,Ny,_Tr,Z4e,vTr,bTr,xn,FTr,ebe,TTr,MTr,obe,ETr,CTr,rbe,wTr,ATr,yTr,z,mM,tbe,LTr,xTr,FQ,kTr,STr,RTr,gM,abe,BTr,PTr,TQ,$Tr,ITr,qTr,hM,nbe,NTr,jTr,MQ,DTr,GTr,OTr,uM,sbe,VTr,XTr,EQ,zTr,QTr,WTr,pM,lbe,HTr,UTr,CQ,JTr,YTr,KTr,_M,ibe,ZTr,e8r,wQ,o8r,r8r,t8r,vM,dbe,a8r,n8r,AQ,s8r,l8r,i8r,bM,cbe,d8r,c8r,yQ,f8r,m8r,g8r,FM,fbe,h8r,u8r,LQ,p8r,_8r,v8r,TM,mbe,b8r,F8r,xQ,T8r,M8r,E8r,MM,gbe,C8r,w8r,kQ,A8r,y8r,L8r,EM,hbe,x8r,k8r,SQ,S8r,R8r,B8r,CM,ube,P8r,$8r,RQ,I8r,q8r,N8r,wM,pbe,j8r,D8r,BQ,G8r,O8r,V8r,AM,_be,X8r,z8r,PQ,Q8r,W8r,H8r,yM,vbe,U8r,J8r,$Q,Y8r,K8r,Z8r,LM,bbe,eMr,oMr,IQ,rMr,tMr,aMr,xM,Fbe,nMr,sMr,qQ,lMr,iMr,dMr,kM,Tbe,cMr,fMr,NQ,mMr,gMr,hMr,SM,Mbe,uMr,pMr,jQ,_Mr,vMr,bMr,RM,Ebe,FMr,TMr,DQ,MMr,EMr,CMr,BM,Cbe,wMr,AMr,GQ,yMr,LMr,xMr,PM,wbe,kMr,SMr,OQ,RMr,BMr,PMr,$M,Abe,$Mr,IMr,VQ,qMr,NMr,jMr,IM,ybe,DMr,GMr,XQ,OMr,VMr,XMr,Lbe,zMr,QMr,jy,pBe,of,qM,xbe,Dy,WMr,kbe,HMr,_Be,Br,Gy,UMr,rf,JMr,zQ,YMr,KMr,QQ,ZMr,eEr,oEr,Oy,rEr,Sbe,tEr,aEr,nEr,yt,Vy,sEr,Rbe,lEr,iEr,tf,dEr,Bbe,cEr,fEr,WQ,mEr,gEr,hEr,Pbe,uEr,pEr,Xy,_Er,Lo,zy,vEr,$be,bEr,FEr,kn,TEr,Ibe,MEr,EEr,qbe,CEr,wEr,Nbe,AEr,yEr,LEr,ca,NM,jbe,xEr,kEr,HQ,SEr,REr,BEr,jM,Dbe,PEr,$Er,UQ,IEr,qEr,NEr,DM,Gbe,jEr,DEr,JQ,GEr,OEr,VEr,GM,Obe,XEr,zEr,YQ,QEr,WEr,HEr,OM,Vbe,UEr,JEr,KQ,YEr,KEr,ZEr,Xbe,e5r,o5r,Qy,vBe,af,VM,zbe,Wy,r5r,Qbe,t5r,bBe,Pr,Hy,a5r,nf,n5r,ZQ,s5r,l5r,eW,i5r,d5r,c5r,Uy,f5r,Wbe,m5r,g5r,h5r,Lt,Jy,u5r,Hbe,p5r,_5r,sf,v5r,Ube,b5r,F5r,oW,T5r,M5r,E5r,Jbe,C5r,w5r,Yy,A5r,xo,Ky,y5r,Ybe,L5r,x5r,Sn,k5r,Kbe,S5r,R5r,Zbe,B5r,P5r,e2e,$5r,I5r,q5r,fe,XM,o2e,N5r,j5r,rW,D5r,G5r,O5r,zM,r2e,V5r,X5r,tW,z5r,Q5r,W5r,QM,t2e,H5r,U5r,aW,J5r,Y5r,K5r,WM,a2e,Z5r,e3r,nW,o3r,r3r,t3r,HM,n2e,a3r,n3r,sW,s3r,l3r,i3r,UM,s2e,d3r,c3r,lW,f3r,m3r,g3r,JM,l2e,h3r,u3r,iW,p3r,_3r,v3r,YM,i2e,b3r,F3r,dW,T3r,M3r,E3r,KM,d2e,C3r,w3r,cW,A3r,y3r,L3r,ZM,c2e,x3r,k3r,fW,S3r,R3r,B3r,eE,f2e,P3r,$3r,mW,I3r,q3r,N3r,oE,m2e,j3r,D3r,gW,G3r,O3r,V3r,g2e,X3r,z3r,Zy,FBe,lf,rE,h2e,eL,Q3r,u2e,W3r,TBe,$r,oL,H3r,df,U3r,hW,J3r,Y3r,uW,K3r,Z3r,eCr,rL,oCr,p2e,rCr,tCr,aCr,xt,tL,nCr,_2e,sCr,lCr,cf,iCr,v2e,dCr,cCr,pW,fCr,mCr,gCr,b2e,hCr,uCr,aL,pCr,ko,nL,_Cr,F2e,vCr,bCr,Rn,FCr,T2e,TCr,MCr,M2e,ECr,CCr,E2e,wCr,ACr,yCr,ve,tE,C2e,LCr,xCr,_W,kCr,SCr,RCr,aE,w2e,BCr,PCr,vW,$Cr,ICr,qCr,nE,A2e,NCr,jCr,bW,DCr,GCr,OCr,sE,y2e,VCr,XCr,FW,zCr,QCr,WCr,lE,L2e,HCr,UCr,TW,JCr,YCr,KCr,iE,x2e,ZCr,ewr,MW,owr,rwr,twr,dE,k2e,awr,nwr,EW,swr,lwr,iwr,cE,S2e,dwr,cwr,CW,fwr,mwr,gwr,fE,R2e,hwr,uwr,wW,pwr,_wr,vwr,mE,B2e,bwr,Fwr,AW,Twr,Mwr,Ewr,P2e,Cwr,wwr,sL,MBe,ff,gE,$2e,lL,Awr,I2e,ywr,EBe,Ir,iL,Lwr,mf,xwr,yW,kwr,Swr,LW,Rwr,Bwr,Pwr,dL,$wr,q2e,Iwr,qwr,Nwr,kt,cL,jwr,N2e,Dwr,Gwr,gf,Owr,j2e,Vwr,Xwr,xW,zwr,Qwr,Wwr,D2e,Hwr,Uwr,fL,Jwr,So,mL,Ywr,G2e,Kwr,Zwr,Bn,e6r,O2e,o6r,r6r,V2e,t6r,a6r,X2e,n6r,s6r,l6r,Ee,hE,z2e,i6r,d6r,kW,c6r,f6r,m6r,uE,Q2e,g6r,h6r,SW,u6r,p6r,_6r,pE,W2e,v6r,b6r,RW,F6r,T6r,M6r,_E,H2e,E6r,C6r,BW,w6r,A6r,y6r,vE,U2e,L6r,x6r,PW,k6r,S6r,R6r,bE,J2e,B6r,P6r,$W,$6r,I6r,q6r,FE,Y2e,N6r,j6r,IW,D6r,G6r,O6r,TE,K2e,V6r,X6r,qW,z6r,Q6r,W6r,ME,Z2e,H6r,U6r,NW,J6r,Y6r,K6r,eFe,Z6r,eAr,gL,CBe,hf,EE,oFe,hL,oAr,rFe,rAr,wBe,qr,uL,tAr,uf,aAr,jW,nAr,sAr,DW,lAr,iAr,dAr,pL,cAr,tFe,fAr,mAr,gAr,St,_L,hAr,aFe,uAr,pAr,pf,_Ar,nFe,vAr,bAr,GW,FAr,TAr,MAr,sFe,EAr,CAr,vL,wAr,Ro,bL,AAr,lFe,yAr,LAr,Pn,xAr,iFe,kAr,SAr,dFe,RAr,BAr,cFe,PAr,$Ar,IAr,be,CE,fFe,qAr,NAr,OW,jAr,DAr,GAr,wE,mFe,OAr,VAr,VW,XAr,zAr,QAr,AE,gFe,WAr,HAr,XW,UAr,JAr,YAr,yE,hFe,KAr,ZAr,zW,eyr,oyr,ryr,LE,uFe,tyr,ayr,QW,nyr,syr,lyr,xE,pFe,iyr,dyr,WW,cyr,fyr,myr,kE,_Fe,gyr,hyr,HW,uyr,pyr,_yr,SE,vFe,vyr,byr,UW,Fyr,Tyr,Myr,RE,bFe,Eyr,Cyr,JW,wyr,Ayr,yyr,BE,FFe,Lyr,xyr,YW,kyr,Syr,Ryr,TFe,Byr,Pyr,FL,ABe,_f,PE,MFe,TL,$yr,EFe,Iyr,yBe,Nr,ML,qyr,vf,Nyr,KW,jyr,Dyr,ZW,Gyr,Oyr,Vyr,EL,Xyr,CFe,zyr,Qyr,Wyr,Rt,CL,Hyr,wFe,Uyr,Jyr,bf,Yyr,AFe,Kyr,Zyr,eH,eLr,oLr,rLr,yFe,tLr,aLr,wL,nLr,Bo,AL,sLr,LFe,lLr,iLr,$n,dLr,xFe,cLr,fLr,kFe,mLr,gLr,SFe,hLr,uLr,pLr,Fe,$E,RFe,_Lr,vLr,oH,bLr,FLr,TLr,IE,BFe,MLr,ELr,rH,CLr,wLr,ALr,qE,PFe,yLr,LLr,tH,xLr,kLr,SLr,NE,$Fe,RLr,BLr,aH,PLr,$Lr,ILr,jE,IFe,qLr,NLr,nH,jLr,DLr,GLr,DE,qFe,OLr,VLr,sH,XLr,zLr,QLr,GE,NFe,WLr,HLr,lH,ULr,JLr,YLr,OE,jFe,KLr,ZLr,iH,e7r,o7r,r7r,VE,DFe,t7r,a7r,dH,n7r,s7r,l7r,XE,GFe,i7r,d7r,cH,c7r,f7r,m7r,OFe,g7r,h7r,yL,LBe,Ff,zE,VFe,LL,u7r,XFe,p7r,xBe,jr,xL,_7r,Tf,v7r,fH,b7r,F7r,mH,T7r,M7r,E7r,kL,C7r,zFe,w7r,A7r,y7r,Bt,SL,L7r,QFe,x7r,k7r,Mf,S7r,WFe,R7r,B7r,gH,P7r,$7r,I7r,HFe,q7r,N7r,RL,j7r,Po,BL,D7r,UFe,G7r,O7r,In,V7r,JFe,X7r,z7r,YFe,Q7r,W7r,KFe,H7r,U7r,J7r,Be,QE,ZFe,Y7r,K7r,hH,Z7r,exr,oxr,WE,e0e,rxr,txr,uH,axr,nxr,sxr,HE,o0e,lxr,ixr,pH,dxr,cxr,fxr,UE,r0e,mxr,gxr,_H,hxr,uxr,pxr,JE,t0e,_xr,vxr,vH,bxr,Fxr,Txr,YE,a0e,Mxr,Exr,bH,Cxr,wxr,Axr,KE,n0e,yxr,Lxr,FH,xxr,kxr,Sxr,ZE,s0e,Rxr,Bxr,TH,Pxr,$xr,Ixr,l0e,qxr,Nxr,PL,kBe,Ef,e5,i0e,$L,jxr,d0e,Dxr,SBe,Dr,IL,Gxr,Cf,Oxr,MH,Vxr,Xxr,EH,zxr,Qxr,Wxr,qL,Hxr,c0e,Uxr,Jxr,Yxr,Pt,NL,Kxr,f0e,Zxr,e9r,wf,o9r,m0e,r9r,t9r,CH,a9r,n9r,s9r,g0e,l9r,i9r,jL,d9r,$o,DL,c9r,h0e,f9r,m9r,qn,g9r,u0e,h9r,u9r,p0e,p9r,_9r,_0e,v9r,b9r,F9r,Pe,o5,v0e,T9r,M9r,wH,E9r,C9r,w9r,r5,b0e,A9r,y9r,AH,L9r,x9r,k9r,t5,F0e,S9r,R9r,yH,B9r,P9r,$9r,a5,T0e,I9r,q9r,LH,N9r,j9r,D9r,n5,M0e,G9r,O9r,xH,V9r,X9r,z9r,s5,E0e,Q9r,W9r,kH,H9r,U9r,J9r,l5,C0e,Y9r,K9r,SH,Z9r,ekr,okr,i5,w0e,rkr,tkr,RH,akr,nkr,skr,A0e,lkr,ikr,GL,RBe,Af,d5,y0e,OL,dkr,L0e,ckr,BBe,Gr,VL,fkr,yf,mkr,BH,gkr,hkr,PH,ukr,pkr,_kr,XL,vkr,x0e,bkr,Fkr,Tkr,$t,zL,Mkr,k0e,Ekr,Ckr,Lf,wkr,S0e,Akr,ykr,$H,Lkr,xkr,kkr,R0e,Skr,Rkr,QL,Bkr,Io,WL,Pkr,B0e,$kr,Ikr,Nn,qkr,P0e,Nkr,jkr,$0e,Dkr,Gkr,I0e,Okr,Vkr,Xkr,q0e,c5,N0e,zkr,Qkr,IH,Wkr,Hkr,Ukr,j0e,Jkr,Ykr,HL,PBe,xf,f5,D0e,UL,Kkr,G0e,Zkr,$Be,Or,JL,eSr,kf,oSr,qH,rSr,tSr,NH,aSr,nSr,sSr,YL,lSr,O0e,iSr,dSr,cSr,It,KL,fSr,V0e,mSr,gSr,Sf,hSr,X0e,uSr,pSr,jH,_Sr,vSr,bSr,z0e,FSr,TSr,ZL,MSr,qo,e7,ESr,Q0e,CSr,wSr,jn,ASr,W0e,ySr,LSr,H0e,xSr,kSr,U0e,SSr,RSr,BSr,o7,m5,J0e,PSr,$Sr,DH,ISr,qSr,NSr,g5,Y0e,jSr,DSr,GH,GSr,OSr,VSr,K0e,XSr,zSr,r7,IBe,Rf,h5,Z0e,t7,QSr,eTe,WSr,qBe,Vr,a7,HSr,Bf,USr,OH,JSr,YSr,VH,KSr,ZSr,eRr,n7,oRr,oTe,rRr,tRr,aRr,qt,s7,nRr,rTe,sRr,lRr,Pf,iRr,tTe,dRr,cRr,XH,fRr,mRr,gRr,aTe,hRr,uRr,l7,pRr,No,i7,_Rr,nTe,vRr,bRr,Dn,FRr,sTe,TRr,MRr,lTe,ERr,CRr,iTe,wRr,ARr,yRr,dTe,u5,cTe,LRr,xRr,zH,kRr,SRr,RRr,fTe,BRr,PRr,d7,NBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),b3=new X({}),F3=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Rr({props:{warning:!0,$$slots:{default:[o5t]},$$scope:{ctx:If}}}),T3=new X({}),M3=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L541"}}),w3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L564"}}),A3=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),y3=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/configuration_auto.py#L686"}}),L3=new X({}),x3=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L351"}}),R3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/v4.18.0/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L365"}}),B3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),P3=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/tokenization_auto.py#L561"}}),$3=new X({}),I3=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),j3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/v4.18.0/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L185"}}),Rh=new $Rr({props:{$$slots:{default:[r5t]},$$scope:{ctx:If}}}),D3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),G3=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/feature_extraction_auto.py#L312"}}),O3=new X({}),V3=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L70"}}),Q3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L84"}}),Vh=new $Rr({props:{$$slots:{default:[t5t]},$$scope:{ctx:If}}}),W3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),H3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/processing_auto.py#L237"}}),U3=new X({}),J3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L707"}}),K3=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),eC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rC=new X({}),tC=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L714"}}),nC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),lC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dC=new X({}),cC=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L729"}}),mC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),hC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pC=new X({}),_C=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L736"}}),bC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),TC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EC=new X({}),CC=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L743"}}),AC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),LC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kC=new X({}),SC=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L752"}}),BC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),$C=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qC=new X({}),NC=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L786"}}),DC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),OC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XC=new X({}),zC=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L793"}}),WC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),UC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YC=new X({}),KC=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L779"}}),ew=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),rw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L761"}}),lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),dw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L768"}}),hw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),pw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new X({}),bw=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L802"}}),Tw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L841"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),kw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L848"}}),$w=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),qw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L871"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L855"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),e6=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L862"}}),r6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),a6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l6=new X({}),i6=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L880"}}),c6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),m6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h6=new X({}),u6=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L887"}}),_6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),b6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T6=new X({}),M6=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L834"}}),C6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),A6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L6=new X({}),x6=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L809"}}),S6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),R6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),B6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$6=new X({}),I6=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L816"}}),N6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),D6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O6=new X({}),V6=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_auto.py#L825"}}),z6=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),W6=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U6=new X({}),J6=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),K6=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Z6=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),eA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),nA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),lA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),mA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),hA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),bA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),TA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),yA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),xA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),RA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),PA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),jA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),GA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),VA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),QA=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),HA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),JA=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),oy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ty=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new X({}),sy=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),iy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),cy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new X({}),gy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),uy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),_y=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),Fy=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),My=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Cy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),yy=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),xy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Sy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),Py=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Iy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Ny=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Gy=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Vy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Hy=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Jy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),Yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Ky=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),tL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),nL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),cL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),mL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),uL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),_L=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),bL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),ML=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),CL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),AL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),yL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),xL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),SL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),BL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),PL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),NL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),DL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),VL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),zL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),WL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),KL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),e7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),s7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),i7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.18.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.18.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/v4.18.0/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),u3=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),p3=o("AutoConfig"),On=o(", "),Vn=a("a"),_3=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),v3=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),pe=a("p"),lx=o("will create a model that is an instance of "),Oi=a("a"),ix=o("BertModel"),dx=o("."),zo=l(),Ga=a("p"),cx=o("There is one class of "),Df=a("code"),fx=o("AutoModel"),J$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qSe=l(),Vi=a("h2"),Gf=a("a"),jJ=a("span"),f(b3.$$.fragment),Y$e=l(),DJ=a("span"),K$e=o("Extending the Auto Classes"),NSe=l(),zn=a("p"),Z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GJ=a("code"),eIe=o("NewModel"),oIe=o(", make sure you have a "),OJ=a("code"),rIe=o("NewModelConfig"),tIe=o(` then you can add those to the auto
classes like this:`),jSe=l(),f(F3.$$.fragment),DSe=l(),mx=a("p"),aIe=o("You will then be able to use the auto classes like you would usually do!"),GSe=l(),f(Of.$$.fragment),OSe=l(),Xi=a("h2"),Vf=a("a"),VJ=a("span"),f(T3.$$.fragment),nIe=l(),XJ=a("span"),sIe=o("AutoConfig"),VSe=l(),Qo=a("div"),f(M3.$$.fragment),lIe=l(),E3=a("p"),iIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gx=a("a"),dIe=o("from_pretrained()"),cIe=o(" class method."),fIe=l(),C3=a("p"),mIe=o("This class cannot be instantiated directly using "),zJ=a("code"),gIe=o("__init__()"),hIe=o(" (throws an error)."),uIe=l(),mo=a("div"),f(w3.$$.fragment),pIe=l(),QJ=a("p"),_Ie=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),vIe=l(),zi=a("p"),bIe=o("The configuration class to instantiate is selected based on the "),WJ=a("code"),FIe=o("model_type"),TIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HJ=a("code"),MIe=o("pretrained_model_name_or_path"),EIe=o(":"),CIe=l(),b=a("ul"),Xf=a("li"),UJ=a("strong"),wIe=o("albert"),AIe=o(" \u2014 "),hx=a("a"),yIe=o("AlbertConfig"),LIe=o(" (ALBERT model)"),xIe=l(),zf=a("li"),JJ=a("strong"),kIe=o("bart"),SIe=o(" \u2014 "),ux=a("a"),RIe=o("BartConfig"),BIe=o(" (BART model)"),PIe=l(),Qf=a("li"),YJ=a("strong"),$Ie=o("beit"),IIe=o(" \u2014 "),px=a("a"),qIe=o("BeitConfig"),NIe=o(" (BEiT model)"),jIe=l(),Wf=a("li"),KJ=a("strong"),DIe=o("bert"),GIe=o(" \u2014 "),_x=a("a"),OIe=o("BertConfig"),VIe=o(" (BERT model)"),XIe=l(),Hf=a("li"),ZJ=a("strong"),zIe=o("bert-generation"),QIe=o(" \u2014 "),vx=a("a"),WIe=o("BertGenerationConfig"),HIe=o(" (Bert Generation model)"),UIe=l(),Uf=a("li"),eY=a("strong"),JIe=o("big_bird"),YIe=o(" \u2014 "),bx=a("a"),KIe=o("BigBirdConfig"),ZIe=o(" (BigBird model)"),eqe=l(),Jf=a("li"),oY=a("strong"),oqe=o("bigbird_pegasus"),rqe=o(" \u2014 "),Fx=a("a"),tqe=o("BigBirdPegasusConfig"),aqe=o(" (BigBirdPegasus model)"),nqe=l(),Yf=a("li"),rY=a("strong"),sqe=o("blenderbot"),lqe=o(" \u2014 "),Tx=a("a"),iqe=o("BlenderbotConfig"),dqe=o(" (Blenderbot model)"),cqe=l(),Kf=a("li"),tY=a("strong"),fqe=o("blenderbot-small"),mqe=o(" \u2014 "),Mx=a("a"),gqe=o("BlenderbotSmallConfig"),hqe=o(" (BlenderbotSmall model)"),uqe=l(),Zf=a("li"),aY=a("strong"),pqe=o("camembert"),_qe=o(" \u2014 "),Ex=a("a"),vqe=o("CamembertConfig"),bqe=o(" (CamemBERT model)"),Fqe=l(),em=a("li"),nY=a("strong"),Tqe=o("canine"),Mqe=o(" \u2014 "),Cx=a("a"),Eqe=o("CanineConfig"),Cqe=o(" (Canine model)"),wqe=l(),om=a("li"),sY=a("strong"),Aqe=o("clip"),yqe=o(" \u2014 "),wx=a("a"),Lqe=o("CLIPConfig"),xqe=o(" (CLIP model)"),kqe=l(),rm=a("li"),lY=a("strong"),Sqe=o("convbert"),Rqe=o(" \u2014 "),Ax=a("a"),Bqe=o("ConvBertConfig"),Pqe=o(" (ConvBERT model)"),$qe=l(),tm=a("li"),iY=a("strong"),Iqe=o("convnext"),qqe=o(" \u2014 "),yx=a("a"),Nqe=o("ConvNextConfig"),jqe=o(" (ConvNext model)"),Dqe=l(),am=a("li"),dY=a("strong"),Gqe=o("ctrl"),Oqe=o(" \u2014 "),Lx=a("a"),Vqe=o("CTRLConfig"),Xqe=o(" (CTRL model)"),zqe=l(),nm=a("li"),cY=a("strong"),Qqe=o("data2vec-audio"),Wqe=o(" \u2014 "),xx=a("a"),Hqe=o("Data2VecAudioConfig"),Uqe=o(" (Data2VecAudio model)"),Jqe=l(),sm=a("li"),fY=a("strong"),Yqe=o("data2vec-text"),Kqe=o(" \u2014 "),kx=a("a"),Zqe=o("Data2VecTextConfig"),eNe=o(" (Data2VecText model)"),oNe=l(),lm=a("li"),mY=a("strong"),rNe=o("deberta"),tNe=o(" \u2014 "),Sx=a("a"),aNe=o("DebertaConfig"),nNe=o(" (DeBERTa model)"),sNe=l(),im=a("li"),gY=a("strong"),lNe=o("deberta-v2"),iNe=o(" \u2014 "),Rx=a("a"),dNe=o("DebertaV2Config"),cNe=o(" (DeBERTa-v2 model)"),fNe=l(),dm=a("li"),hY=a("strong"),mNe=o("decision_transformer"),gNe=o(" \u2014 "),Bx=a("a"),hNe=o("DecisionTransformerConfig"),uNe=o(" (Decision Transformer model)"),pNe=l(),cm=a("li"),uY=a("strong"),_Ne=o("deit"),vNe=o(" \u2014 "),Px=a("a"),bNe=o("DeiTConfig"),FNe=o(" (DeiT model)"),TNe=l(),fm=a("li"),pY=a("strong"),MNe=o("detr"),ENe=o(" \u2014 "),$x=a("a"),CNe=o("DetrConfig"),wNe=o(" (DETR model)"),ANe=l(),mm=a("li"),_Y=a("strong"),yNe=o("distilbert"),LNe=o(" \u2014 "),Ix=a("a"),xNe=o("DistilBertConfig"),kNe=o(" (DistilBERT model)"),SNe=l(),gm=a("li"),vY=a("strong"),RNe=o("dpr"),BNe=o(" \u2014 "),qx=a("a"),PNe=o("DPRConfig"),$Ne=o(" (DPR model)"),INe=l(),hm=a("li"),bY=a("strong"),qNe=o("dpt"),NNe=o(" \u2014 "),Nx=a("a"),jNe=o("DPTConfig"),DNe=o(" (DPT model)"),GNe=l(),um=a("li"),FY=a("strong"),ONe=o("electra"),VNe=o(" \u2014 "),jx=a("a"),XNe=o("ElectraConfig"),zNe=o(" (ELECTRA model)"),QNe=l(),pm=a("li"),TY=a("strong"),WNe=o("encoder-decoder"),HNe=o(" \u2014 "),Dx=a("a"),UNe=o("EncoderDecoderConfig"),JNe=o(" (Encoder decoder model)"),YNe=l(),_m=a("li"),MY=a("strong"),KNe=o("flaubert"),ZNe=o(" \u2014 "),Gx=a("a"),eje=o("FlaubertConfig"),oje=o(" (FlauBERT model)"),rje=l(),vm=a("li"),EY=a("strong"),tje=o("fnet"),aje=o(" \u2014 "),Ox=a("a"),nje=o("FNetConfig"),sje=o(" (FNet model)"),lje=l(),bm=a("li"),CY=a("strong"),ije=o("fsmt"),dje=o(" \u2014 "),Vx=a("a"),cje=o("FSMTConfig"),fje=o(" (FairSeq Machine-Translation model)"),mje=l(),Fm=a("li"),wY=a("strong"),gje=o("funnel"),hje=o(" \u2014 "),Xx=a("a"),uje=o("FunnelConfig"),pje=o(" (Funnel Transformer model)"),_je=l(),Tm=a("li"),AY=a("strong"),vje=o("glpn"),bje=o(" \u2014 "),zx=a("a"),Fje=o("GLPNConfig"),Tje=o(" (GLPN model)"),Mje=l(),Mm=a("li"),yY=a("strong"),Eje=o("gpt2"),Cje=o(" \u2014 "),Qx=a("a"),wje=o("GPT2Config"),Aje=o(" (OpenAI GPT-2 model)"),yje=l(),Em=a("li"),LY=a("strong"),Lje=o("gpt_neo"),xje=o(" \u2014 "),Wx=a("a"),kje=o("GPTNeoConfig"),Sje=o(" (GPT Neo model)"),Rje=l(),Cm=a("li"),xY=a("strong"),Bje=o("gptj"),Pje=o(" \u2014 "),Hx=a("a"),$je=o("GPTJConfig"),Ije=o(" (GPT-J model)"),qje=l(),wm=a("li"),kY=a("strong"),Nje=o("hubert"),jje=o(" \u2014 "),Ux=a("a"),Dje=o("HubertConfig"),Gje=o(" (Hubert model)"),Oje=l(),Am=a("li"),SY=a("strong"),Vje=o("ibert"),Xje=o(" \u2014 "),Jx=a("a"),zje=o("IBertConfig"),Qje=o(" (I-BERT model)"),Wje=l(),ym=a("li"),RY=a("strong"),Hje=o("imagegpt"),Uje=o(" \u2014 "),Yx=a("a"),Jje=o("ImageGPTConfig"),Yje=o(" (ImageGPT model)"),Kje=l(),Lm=a("li"),BY=a("strong"),Zje=o("layoutlm"),eDe=o(" \u2014 "),Kx=a("a"),oDe=o("LayoutLMConfig"),rDe=o(" (LayoutLM model)"),tDe=l(),xm=a("li"),PY=a("strong"),aDe=o("layoutlmv2"),nDe=o(" \u2014 "),Zx=a("a"),sDe=o("LayoutLMv2Config"),lDe=o(" (LayoutLMv2 model)"),iDe=l(),km=a("li"),$Y=a("strong"),dDe=o("led"),cDe=o(" \u2014 "),e9=a("a"),fDe=o("LEDConfig"),mDe=o(" (LED model)"),gDe=l(),Sm=a("li"),IY=a("strong"),hDe=o("longformer"),uDe=o(" \u2014 "),o9=a("a"),pDe=o("LongformerConfig"),_De=o(" (Longformer model)"),vDe=l(),Rm=a("li"),qY=a("strong"),bDe=o("luke"),FDe=o(" \u2014 "),r9=a("a"),TDe=o("LukeConfig"),MDe=o(" (LUKE model)"),EDe=l(),Bm=a("li"),NY=a("strong"),CDe=o("lxmert"),wDe=o(" \u2014 "),t9=a("a"),ADe=o("LxmertConfig"),yDe=o(" (LXMERT model)"),LDe=l(),Pm=a("li"),jY=a("strong"),xDe=o("m2m_100"),kDe=o(" \u2014 "),a9=a("a"),SDe=o("M2M100Config"),RDe=o(" (M2M100 model)"),BDe=l(),$m=a("li"),DY=a("strong"),PDe=o("marian"),$De=o(" \u2014 "),n9=a("a"),IDe=o("MarianConfig"),qDe=o(" (Marian model)"),NDe=l(),Im=a("li"),GY=a("strong"),jDe=o("maskformer"),DDe=o(" \u2014 "),s9=a("a"),GDe=o("MaskFormerConfig"),ODe=o(" (MaskFormer model)"),VDe=l(),qm=a("li"),OY=a("strong"),XDe=o("mbart"),zDe=o(" \u2014 "),l9=a("a"),QDe=o("MBartConfig"),WDe=o(" (mBART model)"),HDe=l(),Nm=a("li"),VY=a("strong"),UDe=o("megatron-bert"),JDe=o(" \u2014 "),i9=a("a"),YDe=o("MegatronBertConfig"),KDe=o(" (MegatronBert model)"),ZDe=l(),jm=a("li"),XY=a("strong"),eGe=o("mobilebert"),oGe=o(" \u2014 "),d9=a("a"),rGe=o("MobileBertConfig"),tGe=o(" (MobileBERT model)"),aGe=l(),Dm=a("li"),zY=a("strong"),nGe=o("mpnet"),sGe=o(" \u2014 "),c9=a("a"),lGe=o("MPNetConfig"),iGe=o(" (MPNet model)"),dGe=l(),Gm=a("li"),QY=a("strong"),cGe=o("mt5"),fGe=o(" \u2014 "),f9=a("a"),mGe=o("MT5Config"),gGe=o(" (mT5 model)"),hGe=l(),Om=a("li"),WY=a("strong"),uGe=o("nystromformer"),pGe=o(" \u2014 "),m9=a("a"),_Ge=o("NystromformerConfig"),vGe=o(" (Nystromformer model)"),bGe=l(),Vm=a("li"),HY=a("strong"),FGe=o("openai-gpt"),TGe=o(" \u2014 "),g9=a("a"),MGe=o("OpenAIGPTConfig"),EGe=o(" (OpenAI GPT model)"),CGe=l(),Xm=a("li"),UY=a("strong"),wGe=o("pegasus"),AGe=o(" \u2014 "),h9=a("a"),yGe=o("PegasusConfig"),LGe=o(" (Pegasus model)"),xGe=l(),zm=a("li"),JY=a("strong"),kGe=o("perceiver"),SGe=o(" \u2014 "),u9=a("a"),RGe=o("PerceiverConfig"),BGe=o(" (Perceiver model)"),PGe=l(),Qm=a("li"),YY=a("strong"),$Ge=o("plbart"),IGe=o(" \u2014 "),p9=a("a"),qGe=o("PLBartConfig"),NGe=o(" (PLBart model)"),jGe=l(),Wm=a("li"),KY=a("strong"),DGe=o("poolformer"),GGe=o(" \u2014 "),_9=a("a"),OGe=o("PoolFormerConfig"),VGe=o(" (PoolFormer model)"),XGe=l(),Hm=a("li"),ZY=a("strong"),zGe=o("prophetnet"),QGe=o(" \u2014 "),v9=a("a"),WGe=o("ProphetNetConfig"),HGe=o(" (ProphetNet model)"),UGe=l(),Um=a("li"),eK=a("strong"),JGe=o("qdqbert"),YGe=o(" \u2014 "),b9=a("a"),KGe=o("QDQBertConfig"),ZGe=o(" (QDQBert model)"),eOe=l(),Jm=a("li"),oK=a("strong"),oOe=o("rag"),rOe=o(" \u2014 "),F9=a("a"),tOe=o("RagConfig"),aOe=o(" (RAG model)"),nOe=l(),Ym=a("li"),rK=a("strong"),sOe=o("realm"),lOe=o(" \u2014 "),T9=a("a"),iOe=o("RealmConfig"),dOe=o(" (Realm model)"),cOe=l(),Km=a("li"),tK=a("strong"),fOe=o("reformer"),mOe=o(" \u2014 "),M9=a("a"),gOe=o("ReformerConfig"),hOe=o(" (Reformer model)"),uOe=l(),Zm=a("li"),aK=a("strong"),pOe=o("rembert"),_Oe=o(" \u2014 "),E9=a("a"),vOe=o("RemBertConfig"),bOe=o(" (RemBERT model)"),FOe=l(),eg=a("li"),nK=a("strong"),TOe=o("resnet"),MOe=o(" \u2014 "),C9=a("a"),EOe=o("ResNetConfig"),COe=o(" (ResNet model)"),wOe=l(),og=a("li"),sK=a("strong"),AOe=o("retribert"),yOe=o(" \u2014 "),w9=a("a"),LOe=o("RetriBertConfig"),xOe=o(" (RetriBERT model)"),kOe=l(),rg=a("li"),lK=a("strong"),SOe=o("roberta"),ROe=o(" \u2014 "),A9=a("a"),BOe=o("RobertaConfig"),POe=o(" (RoBERTa model)"),$Oe=l(),tg=a("li"),iK=a("strong"),IOe=o("roformer"),qOe=o(" \u2014 "),y9=a("a"),NOe=o("RoFormerConfig"),jOe=o(" (RoFormer model)"),DOe=l(),ag=a("li"),dK=a("strong"),GOe=o("segformer"),OOe=o(" \u2014 "),L9=a("a"),VOe=o("SegformerConfig"),XOe=o(" (SegFormer model)"),zOe=l(),ng=a("li"),cK=a("strong"),QOe=o("sew"),WOe=o(" \u2014 "),x9=a("a"),HOe=o("SEWConfig"),UOe=o(" (SEW model)"),JOe=l(),sg=a("li"),fK=a("strong"),YOe=o("sew-d"),KOe=o(" \u2014 "),k9=a("a"),ZOe=o("SEWDConfig"),eVe=o(" (SEW-D model)"),oVe=l(),lg=a("li"),mK=a("strong"),rVe=o("speech-encoder-decoder"),tVe=o(" \u2014 "),S9=a("a"),aVe=o("SpeechEncoderDecoderConfig"),nVe=o(" (Speech Encoder decoder model)"),sVe=l(),ig=a("li"),gK=a("strong"),lVe=o("speech_to_text"),iVe=o(" \u2014 "),R9=a("a"),dVe=o("Speech2TextConfig"),cVe=o(" (Speech2Text model)"),fVe=l(),dg=a("li"),hK=a("strong"),mVe=o("speech_to_text_2"),gVe=o(" \u2014 "),B9=a("a"),hVe=o("Speech2Text2Config"),uVe=o(" (Speech2Text2 model)"),pVe=l(),cg=a("li"),uK=a("strong"),_Ve=o("splinter"),vVe=o(" \u2014 "),P9=a("a"),bVe=o("SplinterConfig"),FVe=o(" (Splinter model)"),TVe=l(),fg=a("li"),pK=a("strong"),MVe=o("squeezebert"),EVe=o(" \u2014 "),$9=a("a"),CVe=o("SqueezeBertConfig"),wVe=o(" (SqueezeBERT model)"),AVe=l(),mg=a("li"),_K=a("strong"),yVe=o("swin"),LVe=o(" \u2014 "),I9=a("a"),xVe=o("SwinConfig"),kVe=o(" (Swin model)"),SVe=l(),gg=a("li"),vK=a("strong"),RVe=o("t5"),BVe=o(" \u2014 "),q9=a("a"),PVe=o("T5Config"),$Ve=o(" (T5 model)"),IVe=l(),hg=a("li"),bK=a("strong"),qVe=o("tapas"),NVe=o(" \u2014 "),N9=a("a"),jVe=o("TapasConfig"),DVe=o(" (TAPAS model)"),GVe=l(),ug=a("li"),FK=a("strong"),OVe=o("transfo-xl"),VVe=o(" \u2014 "),j9=a("a"),XVe=o("TransfoXLConfig"),zVe=o(" (Transformer-XL model)"),QVe=l(),pg=a("li"),TK=a("strong"),WVe=o("trocr"),HVe=o(" \u2014 "),D9=a("a"),UVe=o("TrOCRConfig"),JVe=o(" (TrOCR model)"),YVe=l(),_g=a("li"),MK=a("strong"),KVe=o("unispeech"),ZVe=o(" \u2014 "),G9=a("a"),eXe=o("UniSpeechConfig"),oXe=o(" (UniSpeech model)"),rXe=l(),vg=a("li"),EK=a("strong"),tXe=o("unispeech-sat"),aXe=o(" \u2014 "),O9=a("a"),nXe=o("UniSpeechSatConfig"),sXe=o(" (UniSpeechSat model)"),lXe=l(),bg=a("li"),CK=a("strong"),iXe=o("van"),dXe=o(" \u2014 "),V9=a("a"),cXe=o("VanConfig"),fXe=o(" (VAN model)"),mXe=l(),Fg=a("li"),wK=a("strong"),gXe=o("vilt"),hXe=o(" \u2014 "),X9=a("a"),uXe=o("ViltConfig"),pXe=o(" (ViLT model)"),_Xe=l(),Tg=a("li"),AK=a("strong"),vXe=o("vision-encoder-decoder"),bXe=o(" \u2014 "),z9=a("a"),FXe=o("VisionEncoderDecoderConfig"),TXe=o(" (Vision Encoder decoder model)"),MXe=l(),Mg=a("li"),yK=a("strong"),EXe=o("vision-text-dual-encoder"),CXe=o(" \u2014 "),Q9=a("a"),wXe=o("VisionTextDualEncoderConfig"),AXe=o(" (VisionTextDualEncoder model)"),yXe=l(),Eg=a("li"),LK=a("strong"),LXe=o("visual_bert"),xXe=o(" \u2014 "),W9=a("a"),kXe=o("VisualBertConfig"),SXe=o(" (VisualBert model)"),RXe=l(),Cg=a("li"),xK=a("strong"),BXe=o("vit"),PXe=o(" \u2014 "),H9=a("a"),$Xe=o("ViTConfig"),IXe=o(" (ViT model)"),qXe=l(),wg=a("li"),kK=a("strong"),NXe=o("vit_mae"),jXe=o(" \u2014 "),U9=a("a"),DXe=o("ViTMAEConfig"),GXe=o(" (ViTMAE model)"),OXe=l(),Ag=a("li"),SK=a("strong"),VXe=o("wav2vec2"),XXe=o(" \u2014 "),J9=a("a"),zXe=o("Wav2Vec2Config"),QXe=o(" (Wav2Vec2 model)"),WXe=l(),yg=a("li"),RK=a("strong"),HXe=o("wavlm"),UXe=o(" \u2014 "),Y9=a("a"),JXe=o("WavLMConfig"),YXe=o(" (WavLM model)"),KXe=l(),Lg=a("li"),BK=a("strong"),ZXe=o("xglm"),eze=o(" \u2014 "),K9=a("a"),oze=o("XGLMConfig"),rze=o(" (XGLM model)"),tze=l(),xg=a("li"),PK=a("strong"),aze=o("xlm"),nze=o(" \u2014 "),Z9=a("a"),sze=o("XLMConfig"),lze=o(" (XLM model)"),ize=l(),kg=a("li"),$K=a("strong"),dze=o("xlm-prophetnet"),cze=o(" \u2014 "),ek=a("a"),fze=o("XLMProphetNetConfig"),mze=o(" (XLMProphetNet model)"),gze=l(),Sg=a("li"),IK=a("strong"),hze=o("xlm-roberta"),uze=o(" \u2014 "),ok=a("a"),pze=o("XLMRobertaConfig"),_ze=o(" (XLM-RoBERTa model)"),vze=l(),Rg=a("li"),qK=a("strong"),bze=o("xlm-roberta-xl"),Fze=o(" \u2014 "),rk=a("a"),Tze=o("XLMRobertaXLConfig"),Mze=o(" (XLM-RoBERTa-XL model)"),Eze=l(),Bg=a("li"),NK=a("strong"),Cze=o("xlnet"),wze=o(" \u2014 "),tk=a("a"),Aze=o("XLNetConfig"),yze=o(" (XLNet model)"),Lze=l(),Pg=a("li"),jK=a("strong"),xze=o("yoso"),kze=o(" \u2014 "),ak=a("a"),Sze=o("YosoConfig"),Rze=o(" (YOSO model)"),Bze=l(),DK=a("p"),Pze=o("Examples:"),$ze=l(),f(A3.$$.fragment),Ize=l(),$g=a("div"),f(y3.$$.fragment),qze=l(),GK=a("p"),Nze=o("Register a new configuration for this class."),XSe=l(),Qi=a("h2"),Ig=a("a"),OK=a("span"),f(L3.$$.fragment),jze=l(),VK=a("span"),Dze=o("AutoTokenizer"),zSe=l(),Wo=a("div"),f(x3.$$.fragment),Gze=l(),k3=a("p"),Oze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nk=a("a"),Vze=o("AutoTokenizer.from_pretrained()"),Xze=o(" class method."),zze=l(),S3=a("p"),Qze=o("This class cannot be instantiated directly using "),XK=a("code"),Wze=o("__init__()"),Hze=o(" (throws an error)."),Uze=l(),go=a("div"),f(R3.$$.fragment),Jze=l(),zK=a("p"),Yze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Kze=l(),Oa=a("p"),Zze=o("The tokenizer class to instantiate is selected based on the "),QK=a("code"),eQe=o("model_type"),oQe=o(` property of the config object (either
passed as an argument or loaded from `),WK=a("code"),rQe=o("pretrained_model_name_or_path"),tQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HK=a("code"),aQe=o("pretrained_model_name_or_path"),nQe=o(":"),sQe=l(),C=a("ul"),Qn=a("li"),UK=a("strong"),lQe=o("albert"),iQe=o(" \u2014 "),sk=a("a"),dQe=o("AlbertTokenizer"),cQe=o(" or "),lk=a("a"),fQe=o("AlbertTokenizerFast"),mQe=o(" (ALBERT model)"),gQe=l(),Wn=a("li"),JK=a("strong"),hQe=o("bart"),uQe=o(" \u2014 "),ik=a("a"),pQe=o("BartTokenizer"),_Qe=o(" or "),dk=a("a"),vQe=o("BartTokenizerFast"),bQe=o(" (BART model)"),FQe=l(),Hn=a("li"),YK=a("strong"),TQe=o("barthez"),MQe=o(" \u2014 "),ck=a("a"),EQe=o("BarthezTokenizer"),CQe=o(" or "),fk=a("a"),wQe=o("BarthezTokenizerFast"),AQe=o(" (BARThez model)"),yQe=l(),qg=a("li"),KK=a("strong"),LQe=o("bartpho"),xQe=o(" \u2014 "),mk=a("a"),kQe=o("BartphoTokenizer"),SQe=o(" (BARTpho model)"),RQe=l(),Un=a("li"),ZK=a("strong"),BQe=o("bert"),PQe=o(" \u2014 "),gk=a("a"),$Qe=o("BertTokenizer"),IQe=o(" or "),hk=a("a"),qQe=o("BertTokenizerFast"),NQe=o(" (BERT model)"),jQe=l(),Ng=a("li"),eZ=a("strong"),DQe=o("bert-generation"),GQe=o(" \u2014 "),uk=a("a"),OQe=o("BertGenerationTokenizer"),VQe=o(" (Bert Generation model)"),XQe=l(),jg=a("li"),oZ=a("strong"),zQe=o("bert-japanese"),QQe=o(" \u2014 "),pk=a("a"),WQe=o("BertJapaneseTokenizer"),HQe=o(" (BertJapanese model)"),UQe=l(),Dg=a("li"),rZ=a("strong"),JQe=o("bertweet"),YQe=o(" \u2014 "),_k=a("a"),KQe=o("BertweetTokenizer"),ZQe=o(" (Bertweet model)"),eWe=l(),Jn=a("li"),tZ=a("strong"),oWe=o("big_bird"),rWe=o(" \u2014 "),vk=a("a"),tWe=o("BigBirdTokenizer"),aWe=o(" or "),bk=a("a"),nWe=o("BigBirdTokenizerFast"),sWe=o(" (BigBird model)"),lWe=l(),Yn=a("li"),aZ=a("strong"),iWe=o("bigbird_pegasus"),dWe=o(" \u2014 "),Fk=a("a"),cWe=o("PegasusTokenizer"),fWe=o(" or "),Tk=a("a"),mWe=o("PegasusTokenizerFast"),gWe=o(" (BigBirdPegasus model)"),hWe=l(),Kn=a("li"),nZ=a("strong"),uWe=o("blenderbot"),pWe=o(" \u2014 "),Mk=a("a"),_We=o("BlenderbotTokenizer"),vWe=o(" or "),Ek=a("a"),bWe=o("BlenderbotTokenizerFast"),FWe=o(" (Blenderbot model)"),TWe=l(),Gg=a("li"),sZ=a("strong"),MWe=o("blenderbot-small"),EWe=o(" \u2014 "),Ck=a("a"),CWe=o("BlenderbotSmallTokenizer"),wWe=o(" (BlenderbotSmall model)"),AWe=l(),Og=a("li"),lZ=a("strong"),yWe=o("byt5"),LWe=o(" \u2014 "),wk=a("a"),xWe=o("ByT5Tokenizer"),kWe=o(" (ByT5 model)"),SWe=l(),Zn=a("li"),iZ=a("strong"),RWe=o("camembert"),BWe=o(" \u2014 "),Ak=a("a"),PWe=o("CamembertTokenizer"),$We=o(" or "),yk=a("a"),IWe=o("CamembertTokenizerFast"),qWe=o(" (CamemBERT model)"),NWe=l(),Vg=a("li"),dZ=a("strong"),jWe=o("canine"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("CanineTokenizer"),OWe=o(" (Canine model)"),VWe=l(),es=a("li"),cZ=a("strong"),XWe=o("clip"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("CLIPTokenizer"),WWe=o(" or "),kk=a("a"),HWe=o("CLIPTokenizerFast"),UWe=o(" (CLIP model)"),JWe=l(),os=a("li"),fZ=a("strong"),YWe=o("convbert"),KWe=o(" \u2014 "),Sk=a("a"),ZWe=o("ConvBertTokenizer"),eHe=o(" or "),Rk=a("a"),oHe=o("ConvBertTokenizerFast"),rHe=o(" (ConvBERT model)"),tHe=l(),rs=a("li"),mZ=a("strong"),aHe=o("cpm"),nHe=o(" \u2014 "),Bk=a("a"),sHe=o("CpmTokenizer"),lHe=o(" or "),gZ=a("code"),iHe=o("CpmTokenizerFast"),dHe=o(" (CPM model)"),cHe=l(),Xg=a("li"),hZ=a("strong"),fHe=o("ctrl"),mHe=o(" \u2014 "),Pk=a("a"),gHe=o("CTRLTokenizer"),hHe=o(" (CTRL model)"),uHe=l(),ts=a("li"),uZ=a("strong"),pHe=o("deberta"),_He=o(" \u2014 "),$k=a("a"),vHe=o("DebertaTokenizer"),bHe=o(" or "),Ik=a("a"),FHe=o("DebertaTokenizerFast"),THe=o(" (DeBERTa model)"),MHe=l(),zg=a("li"),pZ=a("strong"),EHe=o("deberta-v2"),CHe=o(" \u2014 "),qk=a("a"),wHe=o("DebertaV2Tokenizer"),AHe=o(" (DeBERTa-v2 model)"),yHe=l(),as=a("li"),_Z=a("strong"),LHe=o("distilbert"),xHe=o(" \u2014 "),Nk=a("a"),kHe=o("DistilBertTokenizer"),SHe=o(" or "),jk=a("a"),RHe=o("DistilBertTokenizerFast"),BHe=o(" (DistilBERT model)"),PHe=l(),ns=a("li"),vZ=a("strong"),$He=o("dpr"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("DPRQuestionEncoderTokenizer"),NHe=o(" or "),Gk=a("a"),jHe=o("DPRQuestionEncoderTokenizerFast"),DHe=o(" (DPR model)"),GHe=l(),ss=a("li"),bZ=a("strong"),OHe=o("electra"),VHe=o(" \u2014 "),Ok=a("a"),XHe=o("ElectraTokenizer"),zHe=o(" or "),Vk=a("a"),QHe=o("ElectraTokenizerFast"),WHe=o(" (ELECTRA model)"),HHe=l(),Qg=a("li"),FZ=a("strong"),UHe=o("flaubert"),JHe=o(" \u2014 "),Xk=a("a"),YHe=o("FlaubertTokenizer"),KHe=o(" (FlauBERT model)"),ZHe=l(),ls=a("li"),TZ=a("strong"),eUe=o("fnet"),oUe=o(" \u2014 "),zk=a("a"),rUe=o("FNetTokenizer"),tUe=o(" or "),Qk=a("a"),aUe=o("FNetTokenizerFast"),nUe=o(" (FNet model)"),sUe=l(),Wg=a("li"),MZ=a("strong"),lUe=o("fsmt"),iUe=o(" \u2014 "),Wk=a("a"),dUe=o("FSMTTokenizer"),cUe=o(" (FairSeq Machine-Translation model)"),fUe=l(),is=a("li"),EZ=a("strong"),mUe=o("funnel"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("FunnelTokenizer"),uUe=o(" or "),Uk=a("a"),pUe=o("FunnelTokenizerFast"),_Ue=o(" (Funnel Transformer model)"),vUe=l(),ds=a("li"),CZ=a("strong"),bUe=o("gpt2"),FUe=o(" \u2014 "),Jk=a("a"),TUe=o("GPT2Tokenizer"),MUe=o(" or "),Yk=a("a"),EUe=o("GPT2TokenizerFast"),CUe=o(" (OpenAI GPT-2 model)"),wUe=l(),cs=a("li"),wZ=a("strong"),AUe=o("gpt_neo"),yUe=o(" \u2014 "),Kk=a("a"),LUe=o("GPT2Tokenizer"),xUe=o(" or "),Zk=a("a"),kUe=o("GPT2TokenizerFast"),SUe=o(" (GPT Neo model)"),RUe=l(),fs=a("li"),AZ=a("strong"),BUe=o("herbert"),PUe=o(" \u2014 "),eS=a("a"),$Ue=o("HerbertTokenizer"),IUe=o(" or "),oS=a("a"),qUe=o("HerbertTokenizerFast"),NUe=o(" (HerBERT model)"),jUe=l(),Hg=a("li"),yZ=a("strong"),DUe=o("hubert"),GUe=o(" \u2014 "),rS=a("a"),OUe=o("Wav2Vec2CTCTokenizer"),VUe=o(" (Hubert model)"),XUe=l(),ms=a("li"),LZ=a("strong"),zUe=o("ibert"),QUe=o(" \u2014 "),tS=a("a"),WUe=o("RobertaTokenizer"),HUe=o(" or "),aS=a("a"),UUe=o("RobertaTokenizerFast"),JUe=o(" (I-BERT model)"),YUe=l(),gs=a("li"),xZ=a("strong"),KUe=o("layoutlm"),ZUe=o(" \u2014 "),nS=a("a"),eJe=o("LayoutLMTokenizer"),oJe=o(" or "),sS=a("a"),rJe=o("LayoutLMTokenizerFast"),tJe=o(" (LayoutLM model)"),aJe=l(),hs=a("li"),kZ=a("strong"),nJe=o("layoutlmv2"),sJe=o(" \u2014 "),lS=a("a"),lJe=o("LayoutLMv2Tokenizer"),iJe=o(" or "),iS=a("a"),dJe=o("LayoutLMv2TokenizerFast"),cJe=o(" (LayoutLMv2 model)"),fJe=l(),us=a("li"),SZ=a("strong"),mJe=o("layoutxlm"),gJe=o(" \u2014 "),dS=a("a"),hJe=o("LayoutXLMTokenizer"),uJe=o(" or "),cS=a("a"),pJe=o("LayoutXLMTokenizerFast"),_Je=o(" (LayoutXLM model)"),vJe=l(),ps=a("li"),RZ=a("strong"),bJe=o("led"),FJe=o(" \u2014 "),fS=a("a"),TJe=o("LEDTokenizer"),MJe=o(" or "),mS=a("a"),EJe=o("LEDTokenizerFast"),CJe=o(" (LED model)"),wJe=l(),_s=a("li"),BZ=a("strong"),AJe=o("longformer"),yJe=o(" \u2014 "),gS=a("a"),LJe=o("LongformerTokenizer"),xJe=o(" or "),hS=a("a"),kJe=o("LongformerTokenizerFast"),SJe=o(" (Longformer model)"),RJe=l(),Ug=a("li"),PZ=a("strong"),BJe=o("luke"),PJe=o(" \u2014 "),uS=a("a"),$Je=o("LukeTokenizer"),IJe=o(" (LUKE model)"),qJe=l(),vs=a("li"),$Z=a("strong"),NJe=o("lxmert"),jJe=o(" \u2014 "),pS=a("a"),DJe=o("LxmertTokenizer"),GJe=o(" or "),_S=a("a"),OJe=o("LxmertTokenizerFast"),VJe=o(" (LXMERT model)"),XJe=l(),Jg=a("li"),IZ=a("strong"),zJe=o("m2m_100"),QJe=o(" \u2014 "),vS=a("a"),WJe=o("M2M100Tokenizer"),HJe=o(" (M2M100 model)"),UJe=l(),Yg=a("li"),qZ=a("strong"),JJe=o("marian"),YJe=o(" \u2014 "),bS=a("a"),KJe=o("MarianTokenizer"),ZJe=o(" (Marian model)"),eYe=l(),bs=a("li"),NZ=a("strong"),oYe=o("mbart"),rYe=o(" \u2014 "),FS=a("a"),tYe=o("MBartTokenizer"),aYe=o(" or "),TS=a("a"),nYe=o("MBartTokenizerFast"),sYe=o(" (mBART model)"),lYe=l(),Fs=a("li"),jZ=a("strong"),iYe=o("mbart50"),dYe=o(" \u2014 "),MS=a("a"),cYe=o("MBart50Tokenizer"),fYe=o(" or "),ES=a("a"),mYe=o("MBart50TokenizerFast"),gYe=o(" (mBART-50 model)"),hYe=l(),Kg=a("li"),DZ=a("strong"),uYe=o("mluke"),pYe=o(" \u2014 "),CS=a("a"),_Ye=o("MLukeTokenizer"),vYe=o(" (mLUKE model)"),bYe=l(),Ts=a("li"),GZ=a("strong"),FYe=o("mobilebert"),TYe=o(" \u2014 "),wS=a("a"),MYe=o("MobileBertTokenizer"),EYe=o(" or "),AS=a("a"),CYe=o("MobileBertTokenizerFast"),wYe=o(" (MobileBERT model)"),AYe=l(),Ms=a("li"),OZ=a("strong"),yYe=o("mpnet"),LYe=o(" \u2014 "),yS=a("a"),xYe=o("MPNetTokenizer"),kYe=o(" or "),LS=a("a"),SYe=o("MPNetTokenizerFast"),RYe=o(" (MPNet model)"),BYe=l(),Es=a("li"),VZ=a("strong"),PYe=o("mt5"),$Ye=o(" \u2014 "),xS=a("a"),IYe=o("MT5Tokenizer"),qYe=o(" or "),kS=a("a"),NYe=o("MT5TokenizerFast"),jYe=o(" (mT5 model)"),DYe=l(),Cs=a("li"),XZ=a("strong"),GYe=o("openai-gpt"),OYe=o(" \u2014 "),SS=a("a"),VYe=o("OpenAIGPTTokenizer"),XYe=o(" or "),RS=a("a"),zYe=o("OpenAIGPTTokenizerFast"),QYe=o(" (OpenAI GPT model)"),WYe=l(),ws=a("li"),zZ=a("strong"),HYe=o("pegasus"),UYe=o(" \u2014 "),BS=a("a"),JYe=o("PegasusTokenizer"),YYe=o(" or "),PS=a("a"),KYe=o("PegasusTokenizerFast"),ZYe=o(" (Pegasus model)"),eKe=l(),Zg=a("li"),QZ=a("strong"),oKe=o("perceiver"),rKe=o(" \u2014 "),$S=a("a"),tKe=o("PerceiverTokenizer"),aKe=o(" (Perceiver model)"),nKe=l(),eh=a("li"),WZ=a("strong"),sKe=o("phobert"),lKe=o(" \u2014 "),IS=a("a"),iKe=o("PhobertTokenizer"),dKe=o(" (PhoBERT model)"),cKe=l(),oh=a("li"),HZ=a("strong"),fKe=o("plbart"),mKe=o(" \u2014 "),qS=a("a"),gKe=o("PLBartTokenizer"),hKe=o(" (PLBart model)"),uKe=l(),rh=a("li"),UZ=a("strong"),pKe=o("prophetnet"),_Ke=o(" \u2014 "),NS=a("a"),vKe=o("ProphetNetTokenizer"),bKe=o(" (ProphetNet model)"),FKe=l(),As=a("li"),JZ=a("strong"),TKe=o("qdqbert"),MKe=o(" \u2014 "),jS=a("a"),EKe=o("BertTokenizer"),CKe=o(" or "),DS=a("a"),wKe=o("BertTokenizerFast"),AKe=o(" (QDQBert model)"),yKe=l(),th=a("li"),YZ=a("strong"),LKe=o("rag"),xKe=o(" \u2014 "),GS=a("a"),kKe=o("RagTokenizer"),SKe=o(" (RAG model)"),RKe=l(),ys=a("li"),KZ=a("strong"),BKe=o("realm"),PKe=o(" \u2014 "),OS=a("a"),$Ke=o("RealmTokenizer"),IKe=o(" or "),VS=a("a"),qKe=o("RealmTokenizerFast"),NKe=o(" (Realm model)"),jKe=l(),Ls=a("li"),ZZ=a("strong"),DKe=o("reformer"),GKe=o(" \u2014 "),XS=a("a"),OKe=o("ReformerTokenizer"),VKe=o(" or "),zS=a("a"),XKe=o("ReformerTokenizerFast"),zKe=o(" (Reformer model)"),QKe=l(),xs=a("li"),eee=a("strong"),WKe=o("rembert"),HKe=o(" \u2014 "),QS=a("a"),UKe=o("RemBertTokenizer"),JKe=o(" or "),WS=a("a"),YKe=o("RemBertTokenizerFast"),KKe=o(" (RemBERT model)"),ZKe=l(),ks=a("li"),oee=a("strong"),eZe=o("retribert"),oZe=o(" \u2014 "),HS=a("a"),rZe=o("RetriBertTokenizer"),tZe=o(" or "),US=a("a"),aZe=o("RetriBertTokenizerFast"),nZe=o(" (RetriBERT model)"),sZe=l(),Ss=a("li"),ree=a("strong"),lZe=o("roberta"),iZe=o(" \u2014 "),JS=a("a"),dZe=o("RobertaTokenizer"),cZe=o(" or "),YS=a("a"),fZe=o("RobertaTokenizerFast"),mZe=o(" (RoBERTa model)"),gZe=l(),Rs=a("li"),tee=a("strong"),hZe=o("roformer"),uZe=o(" \u2014 "),KS=a("a"),pZe=o("RoFormerTokenizer"),_Ze=o(" or "),ZS=a("a"),vZe=o("RoFormerTokenizerFast"),bZe=o(" (RoFormer model)"),FZe=l(),ah=a("li"),aee=a("strong"),TZe=o("speech_to_text"),MZe=o(" \u2014 "),eR=a("a"),EZe=o("Speech2TextTokenizer"),CZe=o(" (Speech2Text model)"),wZe=l(),nh=a("li"),nee=a("strong"),AZe=o("speech_to_text_2"),yZe=o(" \u2014 "),oR=a("a"),LZe=o("Speech2Text2Tokenizer"),xZe=o(" (Speech2Text2 model)"),kZe=l(),Bs=a("li"),see=a("strong"),SZe=o("splinter"),RZe=o(" \u2014 "),rR=a("a"),BZe=o("SplinterTokenizer"),PZe=o(" or "),tR=a("a"),$Ze=o("SplinterTokenizerFast"),IZe=o(" (Splinter model)"),qZe=l(),Ps=a("li"),lee=a("strong"),NZe=o("squeezebert"),jZe=o(" \u2014 "),aR=a("a"),DZe=o("SqueezeBertTokenizer"),GZe=o(" or "),nR=a("a"),OZe=o("SqueezeBertTokenizerFast"),VZe=o(" (SqueezeBERT model)"),XZe=l(),$s=a("li"),iee=a("strong"),zZe=o("t5"),QZe=o(" \u2014 "),sR=a("a"),WZe=o("T5Tokenizer"),HZe=o(" or "),lR=a("a"),UZe=o("T5TokenizerFast"),JZe=o(" (T5 model)"),YZe=l(),sh=a("li"),dee=a("strong"),KZe=o("tapas"),ZZe=o(" \u2014 "),iR=a("a"),eeo=o("TapasTokenizer"),oeo=o(" (TAPAS model)"),reo=l(),lh=a("li"),cee=a("strong"),teo=o("transfo-xl"),aeo=o(" \u2014 "),dR=a("a"),neo=o("TransfoXLTokenizer"),seo=o(" (Transformer-XL model)"),leo=l(),ih=a("li"),fee=a("strong"),ieo=o("wav2vec2"),deo=o(" \u2014 "),cR=a("a"),ceo=o("Wav2Vec2CTCTokenizer"),feo=o(" (Wav2Vec2 model)"),meo=l(),dh=a("li"),mee=a("strong"),geo=o("wav2vec2_phoneme"),heo=o(" \u2014 "),fR=a("a"),ueo=o("Wav2Vec2PhonemeCTCTokenizer"),peo=o(" (Wav2Vec2Phoneme model)"),_eo=l(),Is=a("li"),gee=a("strong"),veo=o("xglm"),beo=o(" \u2014 "),mR=a("a"),Feo=o("XGLMTokenizer"),Teo=o(" or "),gR=a("a"),Meo=o("XGLMTokenizerFast"),Eeo=o(" (XGLM model)"),Ceo=l(),ch=a("li"),hee=a("strong"),weo=o("xlm"),Aeo=o(" \u2014 "),hR=a("a"),yeo=o("XLMTokenizer"),Leo=o(" (XLM model)"),xeo=l(),fh=a("li"),uee=a("strong"),keo=o("xlm-prophetnet"),Seo=o(" \u2014 "),uR=a("a"),Reo=o("XLMProphetNetTokenizer"),Beo=o(" (XLMProphetNet model)"),Peo=l(),qs=a("li"),pee=a("strong"),$eo=o("xlm-roberta"),Ieo=o(" \u2014 "),pR=a("a"),qeo=o("XLMRobertaTokenizer"),Neo=o(" or "),_R=a("a"),jeo=o("XLMRobertaTokenizerFast"),Deo=o(" (XLM-RoBERTa model)"),Geo=l(),Ns=a("li"),_ee=a("strong"),Oeo=o("xlnet"),Veo=o(" \u2014 "),vR=a("a"),Xeo=o("XLNetTokenizer"),zeo=o(" or "),bR=a("a"),Qeo=o("XLNetTokenizerFast"),Weo=o(" (XLNet model)"),Heo=l(),vee=a("p"),Ueo=o("Examples:"),Jeo=l(),f(B3.$$.fragment),Yeo=l(),mh=a("div"),f(P3.$$.fragment),Keo=l(),bee=a("p"),Zeo=o("Register a new tokenizer in this mapping."),QSe=l(),Wi=a("h2"),gh=a("a"),Fee=a("span"),f($3.$$.fragment),eoo=l(),Tee=a("span"),ooo=o("AutoFeatureExtractor"),WSe=l(),Ho=a("div"),f(I3.$$.fragment),roo=l(),q3=a("p"),too=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FR=a("a"),aoo=o("AutoFeatureExtractor.from_pretrained()"),noo=o(" class method."),soo=l(),N3=a("p"),loo=o("This class cannot be instantiated directly using "),Mee=a("code"),ioo=o("__init__()"),doo=o(" (throws an error)."),coo=l(),$e=a("div"),f(j3.$$.fragment),foo=l(),Eee=a("p"),moo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),goo=l(),Va=a("p"),hoo=o("The feature extractor class to instantiate is selected based on the "),Cee=a("code"),uoo=o("model_type"),poo=o(` property of the config object
(either passed as an argument or loaded from `),wee=a("code"),_oo=o("pretrained_model_name_or_path"),voo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Aee=a("code"),boo=o("pretrained_model_name_or_path"),Foo=o(":"),Too=l(),te=a("ul"),hh=a("li"),yee=a("strong"),Moo=o("beit"),Eoo=o(" \u2014 "),TR=a("a"),Coo=o("BeitFeatureExtractor"),woo=o(" (BEiT model)"),Aoo=l(),uh=a("li"),Lee=a("strong"),yoo=o("clip"),Loo=o(" \u2014 "),MR=a("a"),xoo=o("CLIPFeatureExtractor"),koo=o(" (CLIP model)"),Soo=l(),ph=a("li"),xee=a("strong"),Roo=o("convnext"),Boo=o(" \u2014 "),ER=a("a"),Poo=o("ConvNextFeatureExtractor"),$oo=o(" (ConvNext model)"),Ioo=l(),_h=a("li"),kee=a("strong"),qoo=o("deit"),Noo=o(" \u2014 "),CR=a("a"),joo=o("DeiTFeatureExtractor"),Doo=o(" (DeiT model)"),Goo=l(),vh=a("li"),See=a("strong"),Ooo=o("detr"),Voo=o(" \u2014 "),wR=a("a"),Xoo=o("DetrFeatureExtractor"),zoo=o(" (DETR model)"),Qoo=l(),bh=a("li"),Ree=a("strong"),Woo=o("hubert"),Hoo=o(" \u2014 "),AR=a("a"),Uoo=o("Wav2Vec2FeatureExtractor"),Joo=o(" (Hubert model)"),Yoo=l(),Fh=a("li"),Bee=a("strong"),Koo=o("layoutlmv2"),Zoo=o(" \u2014 "),yR=a("a"),ero=o("LayoutLMv2FeatureExtractor"),oro=o(" (LayoutLMv2 model)"),rro=l(),Th=a("li"),Pee=a("strong"),tro=o("maskformer"),aro=o(" \u2014 "),LR=a("a"),nro=o("MaskFormerFeatureExtractor"),sro=o(" (MaskFormer model)"),lro=l(),Mh=a("li"),$ee=a("strong"),iro=o("perceiver"),dro=o(" \u2014 "),xR=a("a"),cro=o("PerceiverFeatureExtractor"),fro=o(" (Perceiver model)"),mro=l(),Eh=a("li"),Iee=a("strong"),gro=o("poolformer"),hro=o(" \u2014 "),kR=a("a"),uro=o("PoolFormerFeatureExtractor"),pro=o(" (PoolFormer model)"),_ro=l(),Ch=a("li"),qee=a("strong"),vro=o("resnet"),bro=o(" \u2014 "),SR=a("a"),Fro=o("ConvNextFeatureExtractor"),Tro=o(" (ResNet model)"),Mro=l(),wh=a("li"),Nee=a("strong"),Ero=o("segformer"),Cro=o(" \u2014 "),RR=a("a"),wro=o("SegformerFeatureExtractor"),Aro=o(" (SegFormer model)"),yro=l(),Ah=a("li"),jee=a("strong"),Lro=o("speech_to_text"),xro=o(" \u2014 "),BR=a("a"),kro=o("Speech2TextFeatureExtractor"),Sro=o(" (Speech2Text model)"),Rro=l(),yh=a("li"),Dee=a("strong"),Bro=o("swin"),Pro=o(" \u2014 "),PR=a("a"),$ro=o("ViTFeatureExtractor"),Iro=o(" (Swin model)"),qro=l(),Lh=a("li"),Gee=a("strong"),Nro=o("van"),jro=o(" \u2014 "),$R=a("a"),Dro=o("ConvNextFeatureExtractor"),Gro=o(" (VAN model)"),Oro=l(),xh=a("li"),Oee=a("strong"),Vro=o("vit"),Xro=o(" \u2014 "),IR=a("a"),zro=o("ViTFeatureExtractor"),Qro=o(" (ViT model)"),Wro=l(),kh=a("li"),Vee=a("strong"),Hro=o("vit_mae"),Uro=o(" \u2014 "),qR=a("a"),Jro=o("ViTFeatureExtractor"),Yro=o(" (ViTMAE model)"),Kro=l(),Sh=a("li"),Xee=a("strong"),Zro=o("wav2vec2"),eto=o(" \u2014 "),NR=a("a"),oto=o("Wav2Vec2FeatureExtractor"),rto=o(" (Wav2Vec2 model)"),tto=l(),f(Rh.$$.fragment),ato=l(),zee=a("p"),nto=o("Examples:"),sto=l(),f(D3.$$.fragment),lto=l(),Bh=a("div"),f(G3.$$.fragment),ito=l(),Qee=a("p"),dto=o("Register a new feature extractor for this class."),HSe=l(),Hi=a("h2"),Ph=a("a"),Wee=a("span"),f(O3.$$.fragment),cto=l(),Hee=a("span"),fto=o("AutoProcessor"),USe=l(),Uo=a("div"),f(V3.$$.fragment),mto=l(),X3=a("p"),gto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=a("a"),hto=o("AutoProcessor.from_pretrained()"),uto=o(" class method."),pto=l(),z3=a("p"),_to=o("This class cannot be instantiated directly using "),Uee=a("code"),vto=o("__init__()"),bto=o(" (throws an error)."),Fto=l(),Ie=a("div"),f(Q3.$$.fragment),Tto=l(),Jee=a("p"),Mto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Eto=l(),Ui=a("p"),Cto=o("The processor class to instantiate is selected based on the "),Yee=a("code"),wto=o("model_type"),Ato=o(` property of the config object (either
passed as an argument or loaded from `),Kee=a("code"),yto=o("pretrained_model_name_or_path"),Lto=o(" if possible):"),xto=l(),ke=a("ul"),$h=a("li"),Zee=a("strong"),kto=o("clip"),Sto=o(" \u2014 "),DR=a("a"),Rto=o("CLIPProcessor"),Bto=o(" (CLIP model)"),Pto=l(),Ih=a("li"),eoe=a("strong"),$to=o("layoutlmv2"),Ito=o(" \u2014 "),GR=a("a"),qto=o("LayoutLMv2Processor"),Nto=o(" (LayoutLMv2 model)"),jto=l(),qh=a("li"),ooe=a("strong"),Dto=o("layoutxlm"),Gto=o(" \u2014 "),OR=a("a"),Oto=o("LayoutXLMProcessor"),Vto=o(" (LayoutXLM model)"),Xto=l(),Nh=a("li"),roe=a("strong"),zto=o("speech_to_text"),Qto=o(" \u2014 "),VR=a("a"),Wto=o("Speech2TextProcessor"),Hto=o(" (Speech2Text model)"),Uto=l(),jh=a("li"),toe=a("strong"),Jto=o("speech_to_text_2"),Yto=o(" \u2014 "),XR=a("a"),Kto=o("Speech2Text2Processor"),Zto=o(" (Speech2Text2 model)"),eao=l(),Dh=a("li"),aoe=a("strong"),oao=o("trocr"),rao=o(" \u2014 "),zR=a("a"),tao=o("TrOCRProcessor"),aao=o(" (TrOCR model)"),nao=l(),Gh=a("li"),noe=a("strong"),sao=o("vision-text-dual-encoder"),lao=o(" \u2014 "),QR=a("a"),iao=o("VisionTextDualEncoderProcessor"),dao=o(" (VisionTextDualEncoder model)"),cao=l(),Oh=a("li"),soe=a("strong"),fao=o("wav2vec2"),mao=o(" \u2014 "),WR=a("a"),gao=o("Wav2Vec2Processor"),hao=o(" (Wav2Vec2 model)"),uao=l(),f(Vh.$$.fragment),pao=l(),loe=a("p"),_ao=o("Examples:"),vao=l(),f(W3.$$.fragment),bao=l(),Xh=a("div"),f(H3.$$.fragment),Fao=l(),ioe=a("p"),Tao=o("Register a new processor for this class."),JSe=l(),Ji=a("h2"),zh=a("a"),doe=a("span"),f(U3.$$.fragment),Mao=l(),coe=a("span"),Eao=o("AutoModel"),YSe=l(),Jo=a("div"),f(J3.$$.fragment),Cao=l(),Yi=a("p"),wao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=a("a"),Aao=o("from_pretrained()"),yao=o(" class method or the "),UR=a("a"),Lao=o("from_config()"),xao=o(` class
method.`),kao=l(),Y3=a("p"),Sao=o("This class cannot be instantiated directly using "),foe=a("code"),Rao=o("__init__()"),Bao=o(" (throws an error)."),Pao=l(),Xr=a("div"),f(K3.$$.fragment),$ao=l(),moe=a("p"),Iao=o("Instantiates one of the base model classes of the library from a configuration."),qao=l(),Ki=a("p"),Nao=o(`Note:
Loading a model from its configuration file does `),goe=a("strong"),jao=o("not"),Dao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=a("a"),Gao=o("from_pretrained()"),Oao=o(" to load the model weights."),Vao=l(),hoe=a("p"),Xao=o("Examples:"),zao=l(),f(Z3.$$.fragment),Qao=l(),qe=a("div"),f(eC.$$.fragment),Wao=l(),uoe=a("p"),Hao=o("Instantiate one of the base model classes of the library from a pretrained model."),Uao=l(),Xa=a("p"),Jao=o("The model class to instantiate is selected based on the "),poe=a("code"),Yao=o("model_type"),Kao=o(` property of the config object (either
passed as an argument or loaded from `),_oe=a("code"),Zao=o("pretrained_model_name_or_path"),eno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=a("code"),ono=o("pretrained_model_name_or_path"),rno=o(":"),tno=l(),T=a("ul"),Qh=a("li"),boe=a("strong"),ano=o("albert"),nno=o(" \u2014 "),YR=a("a"),sno=o("AlbertModel"),lno=o(" (ALBERT model)"),ino=l(),Wh=a("li"),Foe=a("strong"),dno=o("bart"),cno=o(" \u2014 "),KR=a("a"),fno=o("BartModel"),mno=o(" (BART model)"),gno=l(),Hh=a("li"),Toe=a("strong"),hno=o("beit"),uno=o(" \u2014 "),ZR=a("a"),pno=o("BeitModel"),_no=o(" (BEiT model)"),vno=l(),Uh=a("li"),Moe=a("strong"),bno=o("bert"),Fno=o(" \u2014 "),eB=a("a"),Tno=o("BertModel"),Mno=o(" (BERT model)"),Eno=l(),Jh=a("li"),Eoe=a("strong"),Cno=o("bert-generation"),wno=o(" \u2014 "),oB=a("a"),Ano=o("BertGenerationEncoder"),yno=o(" (Bert Generation model)"),Lno=l(),Yh=a("li"),Coe=a("strong"),xno=o("big_bird"),kno=o(" \u2014 "),rB=a("a"),Sno=o("BigBirdModel"),Rno=o(" (BigBird model)"),Bno=l(),Kh=a("li"),woe=a("strong"),Pno=o("bigbird_pegasus"),$no=o(" \u2014 "),tB=a("a"),Ino=o("BigBirdPegasusModel"),qno=o(" (BigBirdPegasus model)"),Nno=l(),Zh=a("li"),Aoe=a("strong"),jno=o("blenderbot"),Dno=o(" \u2014 "),aB=a("a"),Gno=o("BlenderbotModel"),Ono=o(" (Blenderbot model)"),Vno=l(),eu=a("li"),yoe=a("strong"),Xno=o("blenderbot-small"),zno=o(" \u2014 "),nB=a("a"),Qno=o("BlenderbotSmallModel"),Wno=o(" (BlenderbotSmall model)"),Hno=l(),ou=a("li"),Loe=a("strong"),Uno=o("camembert"),Jno=o(" \u2014 "),sB=a("a"),Yno=o("CamembertModel"),Kno=o(" (CamemBERT model)"),Zno=l(),ru=a("li"),xoe=a("strong"),eso=o("canine"),oso=o(" \u2014 "),lB=a("a"),rso=o("CanineModel"),tso=o(" (Canine model)"),aso=l(),tu=a("li"),koe=a("strong"),nso=o("clip"),sso=o(" \u2014 "),iB=a("a"),lso=o("CLIPModel"),iso=o(" (CLIP model)"),dso=l(),au=a("li"),Soe=a("strong"),cso=o("convbert"),fso=o(" \u2014 "),dB=a("a"),mso=o("ConvBertModel"),gso=o(" (ConvBERT model)"),hso=l(),nu=a("li"),Roe=a("strong"),uso=o("convnext"),pso=o(" \u2014 "),cB=a("a"),_so=o("ConvNextModel"),vso=o(" (ConvNext model)"),bso=l(),su=a("li"),Boe=a("strong"),Fso=o("ctrl"),Tso=o(" \u2014 "),fB=a("a"),Mso=o("CTRLModel"),Eso=o(" (CTRL model)"),Cso=l(),lu=a("li"),Poe=a("strong"),wso=o("data2vec-audio"),Aso=o(" \u2014 "),mB=a("a"),yso=o("Data2VecAudioModel"),Lso=o(" (Data2VecAudio model)"),xso=l(),iu=a("li"),$oe=a("strong"),kso=o("data2vec-text"),Sso=o(" \u2014 "),gB=a("a"),Rso=o("Data2VecTextModel"),Bso=o(" (Data2VecText model)"),Pso=l(),du=a("li"),Ioe=a("strong"),$so=o("deberta"),Iso=o(" \u2014 "),hB=a("a"),qso=o("DebertaModel"),Nso=o(" (DeBERTa model)"),jso=l(),cu=a("li"),qoe=a("strong"),Dso=o("deberta-v2"),Gso=o(" \u2014 "),uB=a("a"),Oso=o("DebertaV2Model"),Vso=o(" (DeBERTa-v2 model)"),Xso=l(),fu=a("li"),Noe=a("strong"),zso=o("decision_transformer"),Qso=o(" \u2014 "),pB=a("a"),Wso=o("DecisionTransformerModel"),Hso=o(" (Decision Transformer model)"),Uso=l(),mu=a("li"),joe=a("strong"),Jso=o("deit"),Yso=o(" \u2014 "),_B=a("a"),Kso=o("DeiTModel"),Zso=o(" (DeiT model)"),elo=l(),gu=a("li"),Doe=a("strong"),olo=o("detr"),rlo=o(" \u2014 "),vB=a("a"),tlo=o("DetrModel"),alo=o(" (DETR model)"),nlo=l(),hu=a("li"),Goe=a("strong"),slo=o("distilbert"),llo=o(" \u2014 "),bB=a("a"),ilo=o("DistilBertModel"),dlo=o(" (DistilBERT model)"),clo=l(),uu=a("li"),Ooe=a("strong"),flo=o("dpr"),mlo=o(" \u2014 "),FB=a("a"),glo=o("DPRQuestionEncoder"),hlo=o(" (DPR model)"),ulo=l(),pu=a("li"),Voe=a("strong"),plo=o("dpt"),_lo=o(" \u2014 "),TB=a("a"),vlo=o("DPTModel"),blo=o(" (DPT model)"),Flo=l(),_u=a("li"),Xoe=a("strong"),Tlo=o("electra"),Mlo=o(" \u2014 "),MB=a("a"),Elo=o("ElectraModel"),Clo=o(" (ELECTRA model)"),wlo=l(),vu=a("li"),zoe=a("strong"),Alo=o("flaubert"),ylo=o(" \u2014 "),EB=a("a"),Llo=o("FlaubertModel"),xlo=o(" (FlauBERT model)"),klo=l(),bu=a("li"),Qoe=a("strong"),Slo=o("fnet"),Rlo=o(" \u2014 "),CB=a("a"),Blo=o("FNetModel"),Plo=o(" (FNet model)"),$lo=l(),Fu=a("li"),Woe=a("strong"),Ilo=o("fsmt"),qlo=o(" \u2014 "),wB=a("a"),Nlo=o("FSMTModel"),jlo=o(" (FairSeq Machine-Translation model)"),Dlo=l(),js=a("li"),Hoe=a("strong"),Glo=o("funnel"),Olo=o(" \u2014 "),AB=a("a"),Vlo=o("FunnelModel"),Xlo=o(" or "),yB=a("a"),zlo=o("FunnelBaseModel"),Qlo=o(" (Funnel Transformer model)"),Wlo=l(),Tu=a("li"),Uoe=a("strong"),Hlo=o("glpn"),Ulo=o(" \u2014 "),LB=a("a"),Jlo=o("GLPNModel"),Ylo=o(" (GLPN model)"),Klo=l(),Mu=a("li"),Joe=a("strong"),Zlo=o("gpt2"),eio=o(" \u2014 "),xB=a("a"),oio=o("GPT2Model"),rio=o(" (OpenAI GPT-2 model)"),tio=l(),Eu=a("li"),Yoe=a("strong"),aio=o("gpt_neo"),nio=o(" \u2014 "),kB=a("a"),sio=o("GPTNeoModel"),lio=o(" (GPT Neo model)"),iio=l(),Cu=a("li"),Koe=a("strong"),dio=o("gptj"),cio=o(" \u2014 "),SB=a("a"),fio=o("GPTJModel"),mio=o(" (GPT-J model)"),gio=l(),wu=a("li"),Zoe=a("strong"),hio=o("hubert"),uio=o(" \u2014 "),RB=a("a"),pio=o("HubertModel"),_io=o(" (Hubert model)"),vio=l(),Au=a("li"),ere=a("strong"),bio=o("ibert"),Fio=o(" \u2014 "),BB=a("a"),Tio=o("IBertModel"),Mio=o(" (I-BERT model)"),Eio=l(),yu=a("li"),ore=a("strong"),Cio=o("imagegpt"),wio=o(" \u2014 "),PB=a("a"),Aio=o("ImageGPTModel"),yio=o(" (ImageGPT model)"),Lio=l(),Lu=a("li"),rre=a("strong"),xio=o("layoutlm"),kio=o(" \u2014 "),$B=a("a"),Sio=o("LayoutLMModel"),Rio=o(" (LayoutLM model)"),Bio=l(),xu=a("li"),tre=a("strong"),Pio=o("layoutlmv2"),$io=o(" \u2014 "),IB=a("a"),Iio=o("LayoutLMv2Model"),qio=o(" (LayoutLMv2 model)"),Nio=l(),ku=a("li"),are=a("strong"),jio=o("led"),Dio=o(" \u2014 "),qB=a("a"),Gio=o("LEDModel"),Oio=o(" (LED model)"),Vio=l(),Su=a("li"),nre=a("strong"),Xio=o("longformer"),zio=o(" \u2014 "),NB=a("a"),Qio=o("LongformerModel"),Wio=o(" (Longformer model)"),Hio=l(),Ru=a("li"),sre=a("strong"),Uio=o("luke"),Jio=o(" \u2014 "),jB=a("a"),Yio=o("LukeModel"),Kio=o(" (LUKE model)"),Zio=l(),Bu=a("li"),lre=a("strong"),edo=o("lxmert"),odo=o(" \u2014 "),DB=a("a"),rdo=o("LxmertModel"),tdo=o(" (LXMERT model)"),ado=l(),Pu=a("li"),ire=a("strong"),ndo=o("m2m_100"),sdo=o(" \u2014 "),GB=a("a"),ldo=o("M2M100Model"),ido=o(" (M2M100 model)"),ddo=l(),$u=a("li"),dre=a("strong"),cdo=o("marian"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("MarianModel"),gdo=o(" (Marian model)"),hdo=l(),Iu=a("li"),cre=a("strong"),udo=o("maskformer"),pdo=o(" \u2014 "),VB=a("a"),_do=o("MaskFormerModel"),vdo=o(" (MaskFormer model)"),bdo=l(),qu=a("li"),fre=a("strong"),Fdo=o("mbart"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("MBartModel"),Edo=o(" (mBART model)"),Cdo=l(),Nu=a("li"),mre=a("strong"),wdo=o("megatron-bert"),Ado=o(" \u2014 "),zB=a("a"),ydo=o("MegatronBertModel"),Ldo=o(" (MegatronBert model)"),xdo=l(),ju=a("li"),gre=a("strong"),kdo=o("mobilebert"),Sdo=o(" \u2014 "),QB=a("a"),Rdo=o("MobileBertModel"),Bdo=o(" (MobileBERT model)"),Pdo=l(),Du=a("li"),hre=a("strong"),$do=o("mpnet"),Ido=o(" \u2014 "),WB=a("a"),qdo=o("MPNetModel"),Ndo=o(" (MPNet model)"),jdo=l(),Gu=a("li"),ure=a("strong"),Ddo=o("mt5"),Gdo=o(" \u2014 "),HB=a("a"),Odo=o("MT5Model"),Vdo=o(" (mT5 model)"),Xdo=l(),Ou=a("li"),pre=a("strong"),zdo=o("nystromformer"),Qdo=o(" \u2014 "),UB=a("a"),Wdo=o("NystromformerModel"),Hdo=o(" (Nystromformer model)"),Udo=l(),Vu=a("li"),_re=a("strong"),Jdo=o("openai-gpt"),Ydo=o(" \u2014 "),JB=a("a"),Kdo=o("OpenAIGPTModel"),Zdo=o(" (OpenAI GPT model)"),eco=l(),Xu=a("li"),vre=a("strong"),oco=o("pegasus"),rco=o(" \u2014 "),YB=a("a"),tco=o("PegasusModel"),aco=o(" (Pegasus model)"),nco=l(),zu=a("li"),bre=a("strong"),sco=o("perceiver"),lco=o(" \u2014 "),KB=a("a"),ico=o("PerceiverModel"),dco=o(" (Perceiver model)"),cco=l(),Qu=a("li"),Fre=a("strong"),fco=o("plbart"),mco=o(" \u2014 "),ZB=a("a"),gco=o("PLBartModel"),hco=o(" (PLBart model)"),uco=l(),Wu=a("li"),Tre=a("strong"),pco=o("poolformer"),_co=o(" \u2014 "),eP=a("a"),vco=o("PoolFormerModel"),bco=o(" (PoolFormer model)"),Fco=l(),Hu=a("li"),Mre=a("strong"),Tco=o("prophetnet"),Mco=o(" \u2014 "),oP=a("a"),Eco=o("ProphetNetModel"),Cco=o(" (ProphetNet model)"),wco=l(),Uu=a("li"),Ere=a("strong"),Aco=o("qdqbert"),yco=o(" \u2014 "),rP=a("a"),Lco=o("QDQBertModel"),xco=o(" (QDQBert model)"),kco=l(),Ju=a("li"),Cre=a("strong"),Sco=o("reformer"),Rco=o(" \u2014 "),tP=a("a"),Bco=o("ReformerModel"),Pco=o(" (Reformer model)"),$co=l(),Yu=a("li"),wre=a("strong"),Ico=o("rembert"),qco=o(" \u2014 "),aP=a("a"),Nco=o("RemBertModel"),jco=o(" (RemBERT model)"),Dco=l(),Ku=a("li"),Are=a("strong"),Gco=o("resnet"),Oco=o(" \u2014 "),nP=a("a"),Vco=o("ResNetModel"),Xco=o(" (ResNet model)"),zco=l(),Zu=a("li"),yre=a("strong"),Qco=o("retribert"),Wco=o(" \u2014 "),sP=a("a"),Hco=o("RetriBertModel"),Uco=o(" (RetriBERT model)"),Jco=l(),ep=a("li"),Lre=a("strong"),Yco=o("roberta"),Kco=o(" \u2014 "),lP=a("a"),Zco=o("RobertaModel"),efo=o(" (RoBERTa model)"),ofo=l(),op=a("li"),xre=a("strong"),rfo=o("roformer"),tfo=o(" \u2014 "),iP=a("a"),afo=o("RoFormerModel"),nfo=o(" (RoFormer model)"),sfo=l(),rp=a("li"),kre=a("strong"),lfo=o("segformer"),ifo=o(" \u2014 "),dP=a("a"),dfo=o("SegformerModel"),cfo=o(" (SegFormer model)"),ffo=l(),tp=a("li"),Sre=a("strong"),mfo=o("sew"),gfo=o(" \u2014 "),cP=a("a"),hfo=o("SEWModel"),ufo=o(" (SEW model)"),pfo=l(),ap=a("li"),Rre=a("strong"),_fo=o("sew-d"),vfo=o(" \u2014 "),fP=a("a"),bfo=o("SEWDModel"),Ffo=o(" (SEW-D model)"),Tfo=l(),np=a("li"),Bre=a("strong"),Mfo=o("speech_to_text"),Efo=o(" \u2014 "),mP=a("a"),Cfo=o("Speech2TextModel"),wfo=o(" (Speech2Text model)"),Afo=l(),sp=a("li"),Pre=a("strong"),yfo=o("splinter"),Lfo=o(" \u2014 "),gP=a("a"),xfo=o("SplinterModel"),kfo=o(" (Splinter model)"),Sfo=l(),lp=a("li"),$re=a("strong"),Rfo=o("squeezebert"),Bfo=o(" \u2014 "),hP=a("a"),Pfo=o("SqueezeBertModel"),$fo=o(" (SqueezeBERT model)"),Ifo=l(),ip=a("li"),Ire=a("strong"),qfo=o("swin"),Nfo=o(" \u2014 "),uP=a("a"),jfo=o("SwinModel"),Dfo=o(" (Swin model)"),Gfo=l(),dp=a("li"),qre=a("strong"),Ofo=o("t5"),Vfo=o(" \u2014 "),pP=a("a"),Xfo=o("T5Model"),zfo=o(" (T5 model)"),Qfo=l(),cp=a("li"),Nre=a("strong"),Wfo=o("tapas"),Hfo=o(" \u2014 "),_P=a("a"),Ufo=o("TapasModel"),Jfo=o(" (TAPAS model)"),Yfo=l(),fp=a("li"),jre=a("strong"),Kfo=o("transfo-xl"),Zfo=o(" \u2014 "),vP=a("a"),emo=o("TransfoXLModel"),omo=o(" (Transformer-XL model)"),rmo=l(),mp=a("li"),Dre=a("strong"),tmo=o("unispeech"),amo=o(" \u2014 "),bP=a("a"),nmo=o("UniSpeechModel"),smo=o(" (UniSpeech model)"),lmo=l(),gp=a("li"),Gre=a("strong"),imo=o("unispeech-sat"),dmo=o(" \u2014 "),FP=a("a"),cmo=o("UniSpeechSatModel"),fmo=o(" (UniSpeechSat model)"),mmo=l(),hp=a("li"),Ore=a("strong"),gmo=o("van"),hmo=o(" \u2014 "),TP=a("a"),umo=o("VanModel"),pmo=o(" (VAN model)"),_mo=l(),up=a("li"),Vre=a("strong"),vmo=o("vilt"),bmo=o(" \u2014 "),MP=a("a"),Fmo=o("ViltModel"),Tmo=o(" (ViLT model)"),Mmo=l(),pp=a("li"),Xre=a("strong"),Emo=o("vision-text-dual-encoder"),Cmo=o(" \u2014 "),EP=a("a"),wmo=o("VisionTextDualEncoderModel"),Amo=o(" (VisionTextDualEncoder model)"),ymo=l(),_p=a("li"),zre=a("strong"),Lmo=o("visual_bert"),xmo=o(" \u2014 "),CP=a("a"),kmo=o("VisualBertModel"),Smo=o(" (VisualBert model)"),Rmo=l(),vp=a("li"),Qre=a("strong"),Bmo=o("vit"),Pmo=o(" \u2014 "),wP=a("a"),$mo=o("ViTModel"),Imo=o(" (ViT model)"),qmo=l(),bp=a("li"),Wre=a("strong"),Nmo=o("vit_mae"),jmo=o(" \u2014 "),AP=a("a"),Dmo=o("ViTMAEModel"),Gmo=o(" (ViTMAE model)"),Omo=l(),Fp=a("li"),Hre=a("strong"),Vmo=o("wav2vec2"),Xmo=o(" \u2014 "),yP=a("a"),zmo=o("Wav2Vec2Model"),Qmo=o(" (Wav2Vec2 model)"),Wmo=l(),Tp=a("li"),Ure=a("strong"),Hmo=o("wavlm"),Umo=o(" \u2014 "),LP=a("a"),Jmo=o("WavLMModel"),Ymo=o(" (WavLM model)"),Kmo=l(),Mp=a("li"),Jre=a("strong"),Zmo=o("xglm"),ego=o(" \u2014 "),xP=a("a"),ogo=o("XGLMModel"),rgo=o(" (XGLM model)"),tgo=l(),Ep=a("li"),Yre=a("strong"),ago=o("xlm"),ngo=o(" \u2014 "),kP=a("a"),sgo=o("XLMModel"),lgo=o(" (XLM model)"),igo=l(),Cp=a("li"),Kre=a("strong"),dgo=o("xlm-prophetnet"),cgo=o(" \u2014 "),SP=a("a"),fgo=o("XLMProphetNetModel"),mgo=o(" (XLMProphetNet model)"),ggo=l(),wp=a("li"),Zre=a("strong"),hgo=o("xlm-roberta"),ugo=o(" \u2014 "),RP=a("a"),pgo=o("XLMRobertaModel"),_go=o(" (XLM-RoBERTa model)"),vgo=l(),Ap=a("li"),ete=a("strong"),bgo=o("xlm-roberta-xl"),Fgo=o(" \u2014 "),BP=a("a"),Tgo=o("XLMRobertaXLModel"),Mgo=o(" (XLM-RoBERTa-XL model)"),Ego=l(),yp=a("li"),ote=a("strong"),Cgo=o("xlnet"),wgo=o(" \u2014 "),PP=a("a"),Ago=o("XLNetModel"),ygo=o(" (XLNet model)"),Lgo=l(),Lp=a("li"),rte=a("strong"),xgo=o("yoso"),kgo=o(" \u2014 "),$P=a("a"),Sgo=o("YosoModel"),Rgo=o(" (YOSO model)"),Bgo=l(),xp=a("p"),Pgo=o("The model is set in evaluation mode by default using "),tte=a("code"),$go=o("model.eval()"),Igo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=a("code"),qgo=o("model.train()"),Ngo=l(),nte=a("p"),jgo=o("Examples:"),Dgo=l(),f(oC.$$.fragment),KSe=l(),Zi=a("h2"),kp=a("a"),ste=a("span"),f(rC.$$.fragment),Ggo=l(),lte=a("span"),Ogo=o("AutoModelForPreTraining"),ZSe=l(),Yo=a("div"),f(tC.$$.fragment),Vgo=l(),ed=a("p"),Xgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=a("a"),zgo=o("from_pretrained()"),Qgo=o(" class method or the "),qP=a("a"),Wgo=o("from_config()"),Hgo=o(` class
method.`),Ugo=l(),aC=a("p"),Jgo=o("This class cannot be instantiated directly using "),ite=a("code"),Ygo=o("__init__()"),Kgo=o(" (throws an error)."),Zgo=l(),zr=a("div"),f(nC.$$.fragment),eho=l(),dte=a("p"),oho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rho=l(),od=a("p"),tho=o(`Note:
Loading a model from its configuration file does `),cte=a("strong"),aho=o("not"),nho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=a("a"),sho=o("from_pretrained()"),lho=o(" to load the model weights."),iho=l(),fte=a("p"),dho=o("Examples:"),cho=l(),f(sC.$$.fragment),fho=l(),Ne=a("div"),f(lC.$$.fragment),mho=l(),mte=a("p"),gho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hho=l(),za=a("p"),uho=o("The model class to instantiate is selected based on the "),gte=a("code"),pho=o("model_type"),_ho=o(` property of the config object (either
passed as an argument or loaded from `),hte=a("code"),vho=o("pretrained_model_name_or_path"),bho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=a("code"),Fho=o("pretrained_model_name_or_path"),Tho=o(":"),Mho=l(),S=a("ul"),Sp=a("li"),pte=a("strong"),Eho=o("albert"),Cho=o(" \u2014 "),jP=a("a"),who=o("AlbertForPreTraining"),Aho=o(" (ALBERT model)"),yho=l(),Rp=a("li"),_te=a("strong"),Lho=o("bart"),xho=o(" \u2014 "),DP=a("a"),kho=o("BartForConditionalGeneration"),Sho=o(" (BART model)"),Rho=l(),Bp=a("li"),vte=a("strong"),Bho=o("bert"),Pho=o(" \u2014 "),GP=a("a"),$ho=o("BertForPreTraining"),Iho=o(" (BERT model)"),qho=l(),Pp=a("li"),bte=a("strong"),Nho=o("big_bird"),jho=o(" \u2014 "),OP=a("a"),Dho=o("BigBirdForPreTraining"),Gho=o(" (BigBird model)"),Oho=l(),$p=a("li"),Fte=a("strong"),Vho=o("camembert"),Xho=o(" \u2014 "),VP=a("a"),zho=o("CamembertForMaskedLM"),Qho=o(" (CamemBERT model)"),Who=l(),Ip=a("li"),Tte=a("strong"),Hho=o("ctrl"),Uho=o(" \u2014 "),XP=a("a"),Jho=o("CTRLLMHeadModel"),Yho=o(" (CTRL model)"),Kho=l(),qp=a("li"),Mte=a("strong"),Zho=o("data2vec-text"),euo=o(" \u2014 "),zP=a("a"),ouo=o("Data2VecTextForMaskedLM"),ruo=o(" (Data2VecText model)"),tuo=l(),Np=a("li"),Ete=a("strong"),auo=o("deberta"),nuo=o(" \u2014 "),QP=a("a"),suo=o("DebertaForMaskedLM"),luo=o(" (DeBERTa model)"),iuo=l(),jp=a("li"),Cte=a("strong"),duo=o("deberta-v2"),cuo=o(" \u2014 "),WP=a("a"),fuo=o("DebertaV2ForMaskedLM"),muo=o(" (DeBERTa-v2 model)"),guo=l(),Dp=a("li"),wte=a("strong"),huo=o("distilbert"),uuo=o(" \u2014 "),HP=a("a"),puo=o("DistilBertForMaskedLM"),_uo=o(" (DistilBERT model)"),vuo=l(),Gp=a("li"),Ate=a("strong"),buo=o("electra"),Fuo=o(" \u2014 "),UP=a("a"),Tuo=o("ElectraForPreTraining"),Muo=o(" (ELECTRA model)"),Euo=l(),Op=a("li"),yte=a("strong"),Cuo=o("flaubert"),wuo=o(" \u2014 "),JP=a("a"),Auo=o("FlaubertWithLMHeadModel"),yuo=o(" (FlauBERT model)"),Luo=l(),Vp=a("li"),Lte=a("strong"),xuo=o("fnet"),kuo=o(" \u2014 "),YP=a("a"),Suo=o("FNetForPreTraining"),Ruo=o(" (FNet model)"),Buo=l(),Xp=a("li"),xte=a("strong"),Puo=o("fsmt"),$uo=o(" \u2014 "),KP=a("a"),Iuo=o("FSMTForConditionalGeneration"),quo=o(" (FairSeq Machine-Translation model)"),Nuo=l(),zp=a("li"),kte=a("strong"),juo=o("funnel"),Duo=o(" \u2014 "),ZP=a("a"),Guo=o("FunnelForPreTraining"),Ouo=o(" (Funnel Transformer model)"),Vuo=l(),Qp=a("li"),Ste=a("strong"),Xuo=o("gpt2"),zuo=o(" \u2014 "),e$=a("a"),Quo=o("GPT2LMHeadModel"),Wuo=o(" (OpenAI GPT-2 model)"),Huo=l(),Wp=a("li"),Rte=a("strong"),Uuo=o("ibert"),Juo=o(" \u2014 "),o$=a("a"),Yuo=o("IBertForMaskedLM"),Kuo=o(" (I-BERT model)"),Zuo=l(),Hp=a("li"),Bte=a("strong"),epo=o("layoutlm"),opo=o(" \u2014 "),r$=a("a"),rpo=o("LayoutLMForMaskedLM"),tpo=o(" (LayoutLM model)"),apo=l(),Up=a("li"),Pte=a("strong"),npo=o("longformer"),spo=o(" \u2014 "),t$=a("a"),lpo=o("LongformerForMaskedLM"),ipo=o(" (Longformer model)"),dpo=l(),Jp=a("li"),$te=a("strong"),cpo=o("lxmert"),fpo=o(" \u2014 "),a$=a("a"),mpo=o("LxmertForPreTraining"),gpo=o(" (LXMERT model)"),hpo=l(),Yp=a("li"),Ite=a("strong"),upo=o("megatron-bert"),ppo=o(" \u2014 "),n$=a("a"),_po=o("MegatronBertForPreTraining"),vpo=o(" (MegatronBert model)"),bpo=l(),Kp=a("li"),qte=a("strong"),Fpo=o("mobilebert"),Tpo=o(" \u2014 "),s$=a("a"),Mpo=o("MobileBertForPreTraining"),Epo=o(" (MobileBERT model)"),Cpo=l(),Zp=a("li"),Nte=a("strong"),wpo=o("mpnet"),Apo=o(" \u2014 "),l$=a("a"),ypo=o("MPNetForMaskedLM"),Lpo=o(" (MPNet model)"),xpo=l(),e_=a("li"),jte=a("strong"),kpo=o("openai-gpt"),Spo=o(" \u2014 "),i$=a("a"),Rpo=o("OpenAIGPTLMHeadModel"),Bpo=o(" (OpenAI GPT model)"),Ppo=l(),o_=a("li"),Dte=a("strong"),$po=o("retribert"),Ipo=o(" \u2014 "),d$=a("a"),qpo=o("RetriBertModel"),Npo=o(" (RetriBERT model)"),jpo=l(),r_=a("li"),Gte=a("strong"),Dpo=o("roberta"),Gpo=o(" \u2014 "),c$=a("a"),Opo=o("RobertaForMaskedLM"),Vpo=o(" (RoBERTa model)"),Xpo=l(),t_=a("li"),Ote=a("strong"),zpo=o("squeezebert"),Qpo=o(" \u2014 "),f$=a("a"),Wpo=o("SqueezeBertForMaskedLM"),Hpo=o(" (SqueezeBERT model)"),Upo=l(),a_=a("li"),Vte=a("strong"),Jpo=o("t5"),Ypo=o(" \u2014 "),m$=a("a"),Kpo=o("T5ForConditionalGeneration"),Zpo=o(" (T5 model)"),e_o=l(),n_=a("li"),Xte=a("strong"),o_o=o("tapas"),r_o=o(" \u2014 "),g$=a("a"),t_o=o("TapasForMaskedLM"),a_o=o(" (TAPAS model)"),n_o=l(),s_=a("li"),zte=a("strong"),s_o=o("transfo-xl"),l_o=o(" \u2014 "),h$=a("a"),i_o=o("TransfoXLLMHeadModel"),d_o=o(" (Transformer-XL model)"),c_o=l(),l_=a("li"),Qte=a("strong"),f_o=o("unispeech"),m_o=o(" \u2014 "),u$=a("a"),g_o=o("UniSpeechForPreTraining"),h_o=o(" (UniSpeech model)"),u_o=l(),i_=a("li"),Wte=a("strong"),p_o=o("unispeech-sat"),__o=o(" \u2014 "),p$=a("a"),v_o=o("UniSpeechSatForPreTraining"),b_o=o(" (UniSpeechSat model)"),F_o=l(),d_=a("li"),Hte=a("strong"),T_o=o("visual_bert"),M_o=o(" \u2014 "),_$=a("a"),E_o=o("VisualBertForPreTraining"),C_o=o(" (VisualBert model)"),w_o=l(),c_=a("li"),Ute=a("strong"),A_o=o("vit_mae"),y_o=o(" \u2014 "),v$=a("a"),L_o=o("ViTMAEForPreTraining"),x_o=o(" (ViTMAE model)"),k_o=l(),f_=a("li"),Jte=a("strong"),S_o=o("wav2vec2"),R_o=o(" \u2014 "),b$=a("a"),B_o=o("Wav2Vec2ForPreTraining"),P_o=o(" (Wav2Vec2 model)"),$_o=l(),m_=a("li"),Yte=a("strong"),I_o=o("xlm"),q_o=o(" \u2014 "),F$=a("a"),N_o=o("XLMWithLMHeadModel"),j_o=o(" (XLM model)"),D_o=l(),g_=a("li"),Kte=a("strong"),G_o=o("xlm-roberta"),O_o=o(" \u2014 "),T$=a("a"),V_o=o("XLMRobertaForMaskedLM"),X_o=o(" (XLM-RoBERTa model)"),z_o=l(),h_=a("li"),Zte=a("strong"),Q_o=o("xlm-roberta-xl"),W_o=o(" \u2014 "),M$=a("a"),H_o=o("XLMRobertaXLForMaskedLM"),U_o=o(" (XLM-RoBERTa-XL model)"),J_o=l(),u_=a("li"),eae=a("strong"),Y_o=o("xlnet"),K_o=o(" \u2014 "),E$=a("a"),Z_o=o("XLNetLMHeadModel"),evo=o(" (XLNet model)"),ovo=l(),p_=a("p"),rvo=o("The model is set in evaluation mode by default using "),oae=a("code"),tvo=o("model.eval()"),avo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=a("code"),nvo=o("model.train()"),svo=l(),tae=a("p"),lvo=o("Examples:"),ivo=l(),f(iC.$$.fragment),eRe=l(),rd=a("h2"),__=a("a"),aae=a("span"),f(dC.$$.fragment),dvo=l(),nae=a("span"),cvo=o("AutoModelForCausalLM"),oRe=l(),Ko=a("div"),f(cC.$$.fragment),fvo=l(),td=a("p"),mvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=a("a"),gvo=o("from_pretrained()"),hvo=o(" class method or the "),w$=a("a"),uvo=o("from_config()"),pvo=o(` class
method.`),_vo=l(),fC=a("p"),vvo=o("This class cannot be instantiated directly using "),sae=a("code"),bvo=o("__init__()"),Fvo=o(" (throws an error)."),Tvo=l(),Qr=a("div"),f(mC.$$.fragment),Mvo=l(),lae=a("p"),Evo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cvo=l(),ad=a("p"),wvo=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),Avo=o("not"),yvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=a("a"),Lvo=o("from_pretrained()"),xvo=o(" to load the model weights."),kvo=l(),dae=a("p"),Svo=o("Examples:"),Rvo=l(),f(gC.$$.fragment),Bvo=l(),je=a("div"),f(hC.$$.fragment),Pvo=l(),cae=a("p"),$vo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ivo=l(),Qa=a("p"),qvo=o("The model class to instantiate is selected based on the "),fae=a("code"),Nvo=o("model_type"),jvo=o(` property of the config object (either
passed as an argument or loaded from `),mae=a("code"),Dvo=o("pretrained_model_name_or_path"),Gvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=a("code"),Ovo=o("pretrained_model_name_or_path"),Vvo=o(":"),Xvo=l(),$=a("ul"),v_=a("li"),hae=a("strong"),zvo=o("bart"),Qvo=o(" \u2014 "),y$=a("a"),Wvo=o("BartForCausalLM"),Hvo=o(" (BART model)"),Uvo=l(),b_=a("li"),uae=a("strong"),Jvo=o("bert"),Yvo=o(" \u2014 "),L$=a("a"),Kvo=o("BertLMHeadModel"),Zvo=o(" (BERT model)"),e1o=l(),F_=a("li"),pae=a("strong"),o1o=o("bert-generation"),r1o=o(" \u2014 "),x$=a("a"),t1o=o("BertGenerationDecoder"),a1o=o(" (Bert Generation model)"),n1o=l(),T_=a("li"),_ae=a("strong"),s1o=o("big_bird"),l1o=o(" \u2014 "),k$=a("a"),i1o=o("BigBirdForCausalLM"),d1o=o(" (BigBird model)"),c1o=l(),M_=a("li"),vae=a("strong"),f1o=o("bigbird_pegasus"),m1o=o(" \u2014 "),S$=a("a"),g1o=o("BigBirdPegasusForCausalLM"),h1o=o(" (BigBirdPegasus model)"),u1o=l(),E_=a("li"),bae=a("strong"),p1o=o("blenderbot"),_1o=o(" \u2014 "),R$=a("a"),v1o=o("BlenderbotForCausalLM"),b1o=o(" (Blenderbot model)"),F1o=l(),C_=a("li"),Fae=a("strong"),T1o=o("blenderbot-small"),M1o=o(" \u2014 "),B$=a("a"),E1o=o("BlenderbotSmallForCausalLM"),C1o=o(" (BlenderbotSmall model)"),w1o=l(),w_=a("li"),Tae=a("strong"),A1o=o("camembert"),y1o=o(" \u2014 "),P$=a("a"),L1o=o("CamembertForCausalLM"),x1o=o(" (CamemBERT model)"),k1o=l(),A_=a("li"),Mae=a("strong"),S1o=o("ctrl"),R1o=o(" \u2014 "),$$=a("a"),B1o=o("CTRLLMHeadModel"),P1o=o(" (CTRL model)"),$1o=l(),y_=a("li"),Eae=a("strong"),I1o=o("data2vec-text"),q1o=o(" \u2014 "),I$=a("a"),N1o=o("Data2VecTextForCausalLM"),j1o=o(" (Data2VecText model)"),D1o=l(),L_=a("li"),Cae=a("strong"),G1o=o("electra"),O1o=o(" \u2014 "),q$=a("a"),V1o=o("ElectraForCausalLM"),X1o=o(" (ELECTRA model)"),z1o=l(),x_=a("li"),wae=a("strong"),Q1o=o("gpt2"),W1o=o(" \u2014 "),N$=a("a"),H1o=o("GPT2LMHeadModel"),U1o=o(" (OpenAI GPT-2 model)"),J1o=l(),k_=a("li"),Aae=a("strong"),Y1o=o("gpt_neo"),K1o=o(" \u2014 "),j$=a("a"),Z1o=o("GPTNeoForCausalLM"),e4o=o(" (GPT Neo model)"),o4o=l(),S_=a("li"),yae=a("strong"),r4o=o("gptj"),t4o=o(" \u2014 "),D$=a("a"),a4o=o("GPTJForCausalLM"),n4o=o(" (GPT-J model)"),s4o=l(),R_=a("li"),Lae=a("strong"),l4o=o("marian"),i4o=o(" \u2014 "),G$=a("a"),d4o=o("MarianForCausalLM"),c4o=o(" (Marian model)"),f4o=l(),B_=a("li"),xae=a("strong"),m4o=o("mbart"),g4o=o(" \u2014 "),O$=a("a"),h4o=o("MBartForCausalLM"),u4o=o(" (mBART model)"),p4o=l(),P_=a("li"),kae=a("strong"),_4o=o("megatron-bert"),v4o=o(" \u2014 "),V$=a("a"),b4o=o("MegatronBertForCausalLM"),F4o=o(" (MegatronBert model)"),T4o=l(),$_=a("li"),Sae=a("strong"),M4o=o("openai-gpt"),E4o=o(" \u2014 "),X$=a("a"),C4o=o("OpenAIGPTLMHeadModel"),w4o=o(" (OpenAI GPT model)"),A4o=l(),I_=a("li"),Rae=a("strong"),y4o=o("pegasus"),L4o=o(" \u2014 "),z$=a("a"),x4o=o("PegasusForCausalLM"),k4o=o(" (Pegasus model)"),S4o=l(),q_=a("li"),Bae=a("strong"),R4o=o("plbart"),B4o=o(" \u2014 "),Q$=a("a"),P4o=o("PLBartForCausalLM"),$4o=o(" (PLBart model)"),I4o=l(),N_=a("li"),Pae=a("strong"),q4o=o("prophetnet"),N4o=o(" \u2014 "),W$=a("a"),j4o=o("ProphetNetForCausalLM"),D4o=o(" (ProphetNet model)"),G4o=l(),j_=a("li"),$ae=a("strong"),O4o=o("qdqbert"),V4o=o(" \u2014 "),H$=a("a"),X4o=o("QDQBertLMHeadModel"),z4o=o(" (QDQBert model)"),Q4o=l(),D_=a("li"),Iae=a("strong"),W4o=o("reformer"),H4o=o(" \u2014 "),U$=a("a"),U4o=o("ReformerModelWithLMHead"),J4o=o(" (Reformer model)"),Y4o=l(),G_=a("li"),qae=a("strong"),K4o=o("rembert"),Z4o=o(" \u2014 "),J$=a("a"),ebo=o("RemBertForCausalLM"),obo=o(" (RemBERT model)"),rbo=l(),O_=a("li"),Nae=a("strong"),tbo=o("roberta"),abo=o(" \u2014 "),Y$=a("a"),nbo=o("RobertaForCausalLM"),sbo=o(" (RoBERTa model)"),lbo=l(),V_=a("li"),jae=a("strong"),ibo=o("roformer"),dbo=o(" \u2014 "),K$=a("a"),cbo=o("RoFormerForCausalLM"),fbo=o(" (RoFormer model)"),mbo=l(),X_=a("li"),Dae=a("strong"),gbo=o("speech_to_text_2"),hbo=o(" \u2014 "),Z$=a("a"),ubo=o("Speech2Text2ForCausalLM"),pbo=o(" (Speech2Text2 model)"),_bo=l(),z_=a("li"),Gae=a("strong"),vbo=o("transfo-xl"),bbo=o(" \u2014 "),eI=a("a"),Fbo=o("TransfoXLLMHeadModel"),Tbo=o(" (Transformer-XL model)"),Mbo=l(),Q_=a("li"),Oae=a("strong"),Ebo=o("trocr"),Cbo=o(" \u2014 "),oI=a("a"),wbo=o("TrOCRForCausalLM"),Abo=o(" (TrOCR model)"),ybo=l(),W_=a("li"),Vae=a("strong"),Lbo=o("xglm"),xbo=o(" \u2014 "),rI=a("a"),kbo=o("XGLMForCausalLM"),Sbo=o(" (XGLM model)"),Rbo=l(),H_=a("li"),Xae=a("strong"),Bbo=o("xlm"),Pbo=o(" \u2014 "),tI=a("a"),$bo=o("XLMWithLMHeadModel"),Ibo=o(" (XLM model)"),qbo=l(),U_=a("li"),zae=a("strong"),Nbo=o("xlm-prophetnet"),jbo=o(" \u2014 "),aI=a("a"),Dbo=o("XLMProphetNetForCausalLM"),Gbo=o(" (XLMProphetNet model)"),Obo=l(),J_=a("li"),Qae=a("strong"),Vbo=o("xlm-roberta"),Xbo=o(" \u2014 "),nI=a("a"),zbo=o("XLMRobertaForCausalLM"),Qbo=o(" (XLM-RoBERTa model)"),Wbo=l(),Y_=a("li"),Wae=a("strong"),Hbo=o("xlm-roberta-xl"),Ubo=o(" \u2014 "),sI=a("a"),Jbo=o("XLMRobertaXLForCausalLM"),Ybo=o(" (XLM-RoBERTa-XL model)"),Kbo=l(),K_=a("li"),Hae=a("strong"),Zbo=o("xlnet"),e2o=o(" \u2014 "),lI=a("a"),o2o=o("XLNetLMHeadModel"),r2o=o(" (XLNet model)"),t2o=l(),Z_=a("p"),a2o=o("The model is set in evaluation mode by default using "),Uae=a("code"),n2o=o("model.eval()"),s2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=a("code"),l2o=o("model.train()"),i2o=l(),Yae=a("p"),d2o=o("Examples:"),c2o=l(),f(uC.$$.fragment),rRe=l(),nd=a("h2"),ev=a("a"),Kae=a("span"),f(pC.$$.fragment),f2o=l(),Zae=a("span"),m2o=o("AutoModelForMaskedLM"),tRe=l(),Zo=a("div"),f(_C.$$.fragment),g2o=l(),sd=a("p"),h2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=a("a"),u2o=o("from_pretrained()"),p2o=o(" class method or the "),dI=a("a"),_2o=o("from_config()"),v2o=o(` class
method.`),b2o=l(),vC=a("p"),F2o=o("This class cannot be instantiated directly using "),ene=a("code"),T2o=o("__init__()"),M2o=o(" (throws an error)."),E2o=l(),Wr=a("div"),f(bC.$$.fragment),C2o=l(),one=a("p"),w2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A2o=l(),ld=a("p"),y2o=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),L2o=o("not"),x2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=a("a"),k2o=o("from_pretrained()"),S2o=o(" to load the model weights."),R2o=l(),tne=a("p"),B2o=o("Examples:"),P2o=l(),f(FC.$$.fragment),$2o=l(),De=a("div"),f(TC.$$.fragment),I2o=l(),ane=a("p"),q2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N2o=l(),Wa=a("p"),j2o=o("The model class to instantiate is selected based on the "),nne=a("code"),D2o=o("model_type"),G2o=o(` property of the config object (either
passed as an argument or loaded from `),sne=a("code"),O2o=o("pretrained_model_name_or_path"),V2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=a("code"),X2o=o("pretrained_model_name_or_path"),z2o=o(":"),Q2o=l(),I=a("ul"),ov=a("li"),ine=a("strong"),W2o=o("albert"),H2o=o(" \u2014 "),fI=a("a"),U2o=o("AlbertForMaskedLM"),J2o=o(" (ALBERT model)"),Y2o=l(),rv=a("li"),dne=a("strong"),K2o=o("bart"),Z2o=o(" \u2014 "),mI=a("a"),eFo=o("BartForConditionalGeneration"),oFo=o(" (BART model)"),rFo=l(),tv=a("li"),cne=a("strong"),tFo=o("bert"),aFo=o(" \u2014 "),gI=a("a"),nFo=o("BertForMaskedLM"),sFo=o(" (BERT model)"),lFo=l(),av=a("li"),fne=a("strong"),iFo=o("big_bird"),dFo=o(" \u2014 "),hI=a("a"),cFo=o("BigBirdForMaskedLM"),fFo=o(" (BigBird model)"),mFo=l(),nv=a("li"),mne=a("strong"),gFo=o("camembert"),hFo=o(" \u2014 "),uI=a("a"),uFo=o("CamembertForMaskedLM"),pFo=o(" (CamemBERT model)"),_Fo=l(),sv=a("li"),gne=a("strong"),vFo=o("convbert"),bFo=o(" \u2014 "),pI=a("a"),FFo=o("ConvBertForMaskedLM"),TFo=o(" (ConvBERT model)"),MFo=l(),lv=a("li"),hne=a("strong"),EFo=o("data2vec-text"),CFo=o(" \u2014 "),_I=a("a"),wFo=o("Data2VecTextForMaskedLM"),AFo=o(" (Data2VecText model)"),yFo=l(),iv=a("li"),une=a("strong"),LFo=o("deberta"),xFo=o(" \u2014 "),vI=a("a"),kFo=o("DebertaForMaskedLM"),SFo=o(" (DeBERTa model)"),RFo=l(),dv=a("li"),pne=a("strong"),BFo=o("deberta-v2"),PFo=o(" \u2014 "),bI=a("a"),$Fo=o("DebertaV2ForMaskedLM"),IFo=o(" (DeBERTa-v2 model)"),qFo=l(),cv=a("li"),_ne=a("strong"),NFo=o("distilbert"),jFo=o(" \u2014 "),FI=a("a"),DFo=o("DistilBertForMaskedLM"),GFo=o(" (DistilBERT model)"),OFo=l(),fv=a("li"),vne=a("strong"),VFo=o("electra"),XFo=o(" \u2014 "),TI=a("a"),zFo=o("ElectraForMaskedLM"),QFo=o(" (ELECTRA model)"),WFo=l(),mv=a("li"),bne=a("strong"),HFo=o("flaubert"),UFo=o(" \u2014 "),MI=a("a"),JFo=o("FlaubertWithLMHeadModel"),YFo=o(" (FlauBERT model)"),KFo=l(),gv=a("li"),Fne=a("strong"),ZFo=o("fnet"),e0o=o(" \u2014 "),EI=a("a"),o0o=o("FNetForMaskedLM"),r0o=o(" (FNet model)"),t0o=l(),hv=a("li"),Tne=a("strong"),a0o=o("funnel"),n0o=o(" \u2014 "),CI=a("a"),s0o=o("FunnelForMaskedLM"),l0o=o(" (Funnel Transformer model)"),i0o=l(),uv=a("li"),Mne=a("strong"),d0o=o("ibert"),c0o=o(" \u2014 "),wI=a("a"),f0o=o("IBertForMaskedLM"),m0o=o(" (I-BERT model)"),g0o=l(),pv=a("li"),Ene=a("strong"),h0o=o("layoutlm"),u0o=o(" \u2014 "),AI=a("a"),p0o=o("LayoutLMForMaskedLM"),_0o=o(" (LayoutLM model)"),v0o=l(),_v=a("li"),Cne=a("strong"),b0o=o("longformer"),F0o=o(" \u2014 "),yI=a("a"),T0o=o("LongformerForMaskedLM"),M0o=o(" (Longformer model)"),E0o=l(),vv=a("li"),wne=a("strong"),C0o=o("mbart"),w0o=o(" \u2014 "),LI=a("a"),A0o=o("MBartForConditionalGeneration"),y0o=o(" (mBART model)"),L0o=l(),bv=a("li"),Ane=a("strong"),x0o=o("megatron-bert"),k0o=o(" \u2014 "),xI=a("a"),S0o=o("MegatronBertForMaskedLM"),R0o=o(" (MegatronBert model)"),B0o=l(),Fv=a("li"),yne=a("strong"),P0o=o("mobilebert"),$0o=o(" \u2014 "),kI=a("a"),I0o=o("MobileBertForMaskedLM"),q0o=o(" (MobileBERT model)"),N0o=l(),Tv=a("li"),Lne=a("strong"),j0o=o("mpnet"),D0o=o(" \u2014 "),SI=a("a"),G0o=o("MPNetForMaskedLM"),O0o=o(" (MPNet model)"),V0o=l(),Mv=a("li"),xne=a("strong"),X0o=o("nystromformer"),z0o=o(" \u2014 "),RI=a("a"),Q0o=o("NystromformerForMaskedLM"),W0o=o(" (Nystromformer model)"),H0o=l(),Ev=a("li"),kne=a("strong"),U0o=o("perceiver"),J0o=o(" \u2014 "),BI=a("a"),Y0o=o("PerceiverForMaskedLM"),K0o=o(" (Perceiver model)"),Z0o=l(),Cv=a("li"),Sne=a("strong"),eTo=o("qdqbert"),oTo=o(" \u2014 "),PI=a("a"),rTo=o("QDQBertForMaskedLM"),tTo=o(" (QDQBert model)"),aTo=l(),wv=a("li"),Rne=a("strong"),nTo=o("reformer"),sTo=o(" \u2014 "),$I=a("a"),lTo=o("ReformerForMaskedLM"),iTo=o(" (Reformer model)"),dTo=l(),Av=a("li"),Bne=a("strong"),cTo=o("rembert"),fTo=o(" \u2014 "),II=a("a"),mTo=o("RemBertForMaskedLM"),gTo=o(" (RemBERT model)"),hTo=l(),yv=a("li"),Pne=a("strong"),uTo=o("roberta"),pTo=o(" \u2014 "),qI=a("a"),_To=o("RobertaForMaskedLM"),vTo=o(" (RoBERTa model)"),bTo=l(),Lv=a("li"),$ne=a("strong"),FTo=o("roformer"),TTo=o(" \u2014 "),NI=a("a"),MTo=o("RoFormerForMaskedLM"),ETo=o(" (RoFormer model)"),CTo=l(),xv=a("li"),Ine=a("strong"),wTo=o("squeezebert"),ATo=o(" \u2014 "),jI=a("a"),yTo=o("SqueezeBertForMaskedLM"),LTo=o(" (SqueezeBERT model)"),xTo=l(),kv=a("li"),qne=a("strong"),kTo=o("tapas"),STo=o(" \u2014 "),DI=a("a"),RTo=o("TapasForMaskedLM"),BTo=o(" (TAPAS model)"),PTo=l(),Sv=a("li"),Nne=a("strong"),$To=o("wav2vec2"),ITo=o(" \u2014 "),jne=a("code"),qTo=o("Wav2Vec2ForMaskedLM"),NTo=o(" (Wav2Vec2 model)"),jTo=l(),Rv=a("li"),Dne=a("strong"),DTo=o("xlm"),GTo=o(" \u2014 "),GI=a("a"),OTo=o("XLMWithLMHeadModel"),VTo=o(" (XLM model)"),XTo=l(),Bv=a("li"),Gne=a("strong"),zTo=o("xlm-roberta"),QTo=o(" \u2014 "),OI=a("a"),WTo=o("XLMRobertaForMaskedLM"),HTo=o(" (XLM-RoBERTa model)"),UTo=l(),Pv=a("li"),One=a("strong"),JTo=o("xlm-roberta-xl"),YTo=o(" \u2014 "),VI=a("a"),KTo=o("XLMRobertaXLForMaskedLM"),ZTo=o(" (XLM-RoBERTa-XL model)"),e8o=l(),$v=a("li"),Vne=a("strong"),o8o=o("yoso"),r8o=o(" \u2014 "),XI=a("a"),t8o=o("YosoForMaskedLM"),a8o=o(" (YOSO model)"),n8o=l(),Iv=a("p"),s8o=o("The model is set in evaluation mode by default using "),Xne=a("code"),l8o=o("model.eval()"),i8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),d8o=o("model.train()"),c8o=l(),Qne=a("p"),f8o=o("Examples:"),m8o=l(),f(MC.$$.fragment),aRe=l(),id=a("h2"),qv=a("a"),Wne=a("span"),f(EC.$$.fragment),g8o=l(),Hne=a("span"),h8o=o("AutoModelForSeq2SeqLM"),nRe=l(),er=a("div"),f(CC.$$.fragment),u8o=l(),dd=a("p"),p8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=a("a"),_8o=o("from_pretrained()"),v8o=o(" class method or the "),QI=a("a"),b8o=o("from_config()"),F8o=o(` class
method.`),T8o=l(),wC=a("p"),M8o=o("This class cannot be instantiated directly using "),Une=a("code"),E8o=o("__init__()"),C8o=o(" (throws an error)."),w8o=l(),Hr=a("div"),f(AC.$$.fragment),A8o=l(),Jne=a("p"),y8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),L8o=l(),cd=a("p"),x8o=o(`Note:
Loading a model from its configuration file does `),Yne=a("strong"),k8o=o("not"),S8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=a("a"),R8o=o("from_pretrained()"),B8o=o(" to load the model weights."),P8o=l(),Kne=a("p"),$8o=o("Examples:"),I8o=l(),f(yC.$$.fragment),q8o=l(),Ge=a("div"),f(LC.$$.fragment),N8o=l(),Zne=a("p"),j8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D8o=l(),Ha=a("p"),G8o=o("The model class to instantiate is selected based on the "),ese=a("code"),O8o=o("model_type"),V8o=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),X8o=o("pretrained_model_name_or_path"),z8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),Q8o=o("pretrained_model_name_or_path"),W8o=o(":"),H8o=l(),se=a("ul"),Nv=a("li"),tse=a("strong"),U8o=o("bart"),J8o=o(" \u2014 "),HI=a("a"),Y8o=o("BartForConditionalGeneration"),K8o=o(" (BART model)"),Z8o=l(),jv=a("li"),ase=a("strong"),eMo=o("bigbird_pegasus"),oMo=o(" \u2014 "),UI=a("a"),rMo=o("BigBirdPegasusForConditionalGeneration"),tMo=o(" (BigBirdPegasus model)"),aMo=l(),Dv=a("li"),nse=a("strong"),nMo=o("blenderbot"),sMo=o(" \u2014 "),JI=a("a"),lMo=o("BlenderbotForConditionalGeneration"),iMo=o(" (Blenderbot model)"),dMo=l(),Gv=a("li"),sse=a("strong"),cMo=o("blenderbot-small"),fMo=o(" \u2014 "),YI=a("a"),mMo=o("BlenderbotSmallForConditionalGeneration"),gMo=o(" (BlenderbotSmall model)"),hMo=l(),Ov=a("li"),lse=a("strong"),uMo=o("encoder-decoder"),pMo=o(" \u2014 "),KI=a("a"),_Mo=o("EncoderDecoderModel"),vMo=o(" (Encoder decoder model)"),bMo=l(),Vv=a("li"),ise=a("strong"),FMo=o("fsmt"),TMo=o(" \u2014 "),ZI=a("a"),MMo=o("FSMTForConditionalGeneration"),EMo=o(" (FairSeq Machine-Translation model)"),CMo=l(),Xv=a("li"),dse=a("strong"),wMo=o("led"),AMo=o(" \u2014 "),eq=a("a"),yMo=o("LEDForConditionalGeneration"),LMo=o(" (LED model)"),xMo=l(),zv=a("li"),cse=a("strong"),kMo=o("m2m_100"),SMo=o(" \u2014 "),oq=a("a"),RMo=o("M2M100ForConditionalGeneration"),BMo=o(" (M2M100 model)"),PMo=l(),Qv=a("li"),fse=a("strong"),$Mo=o("marian"),IMo=o(" \u2014 "),rq=a("a"),qMo=o("MarianMTModel"),NMo=o(" (Marian model)"),jMo=l(),Wv=a("li"),mse=a("strong"),DMo=o("mbart"),GMo=o(" \u2014 "),tq=a("a"),OMo=o("MBartForConditionalGeneration"),VMo=o(" (mBART model)"),XMo=l(),Hv=a("li"),gse=a("strong"),zMo=o("mt5"),QMo=o(" \u2014 "),aq=a("a"),WMo=o("MT5ForConditionalGeneration"),HMo=o(" (mT5 model)"),UMo=l(),Uv=a("li"),hse=a("strong"),JMo=o("pegasus"),YMo=o(" \u2014 "),nq=a("a"),KMo=o("PegasusForConditionalGeneration"),ZMo=o(" (Pegasus model)"),eEo=l(),Jv=a("li"),use=a("strong"),oEo=o("plbart"),rEo=o(" \u2014 "),sq=a("a"),tEo=o("PLBartForConditionalGeneration"),aEo=o(" (PLBart model)"),nEo=l(),Yv=a("li"),pse=a("strong"),sEo=o("prophetnet"),lEo=o(" \u2014 "),lq=a("a"),iEo=o("ProphetNetForConditionalGeneration"),dEo=o(" (ProphetNet model)"),cEo=l(),Kv=a("li"),_se=a("strong"),fEo=o("t5"),mEo=o(" \u2014 "),iq=a("a"),gEo=o("T5ForConditionalGeneration"),hEo=o(" (T5 model)"),uEo=l(),Zv=a("li"),vse=a("strong"),pEo=o("xlm-prophetnet"),_Eo=o(" \u2014 "),dq=a("a"),vEo=o("XLMProphetNetForConditionalGeneration"),bEo=o(" (XLMProphetNet model)"),FEo=l(),e1=a("p"),TEo=o("The model is set in evaluation mode by default using "),bse=a("code"),MEo=o("model.eval()"),EEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=a("code"),CEo=o("model.train()"),wEo=l(),Tse=a("p"),AEo=o("Examples:"),yEo=l(),f(xC.$$.fragment),sRe=l(),fd=a("h2"),o1=a("a"),Mse=a("span"),f(kC.$$.fragment),LEo=l(),Ese=a("span"),xEo=o("AutoModelForSequenceClassification"),lRe=l(),or=a("div"),f(SC.$$.fragment),kEo=l(),md=a("p"),SEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=a("a"),REo=o("from_pretrained()"),BEo=o(" class method or the "),fq=a("a"),PEo=o("from_config()"),$Eo=o(` class
method.`),IEo=l(),RC=a("p"),qEo=o("This class cannot be instantiated directly using "),Cse=a("code"),NEo=o("__init__()"),jEo=o(" (throws an error)."),DEo=l(),Ur=a("div"),f(BC.$$.fragment),GEo=l(),wse=a("p"),OEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VEo=l(),gd=a("p"),XEo=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),zEo=o("not"),QEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),WEo=o("from_pretrained()"),HEo=o(" to load the model weights."),UEo=l(),yse=a("p"),JEo=o("Examples:"),YEo=l(),f(PC.$$.fragment),KEo=l(),Oe=a("div"),f($C.$$.fragment),ZEo=l(),Lse=a("p"),e5o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o5o=l(),Ua=a("p"),r5o=o("The model class to instantiate is selected based on the "),xse=a("code"),t5o=o("model_type"),a5o=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),n5o=o("pretrained_model_name_or_path"),s5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),l5o=o("pretrained_model_name_or_path"),i5o=o(":"),d5o=l(),y=a("ul"),r1=a("li"),Rse=a("strong"),c5o=o("albert"),f5o=o(" \u2014 "),gq=a("a"),m5o=o("AlbertForSequenceClassification"),g5o=o(" (ALBERT model)"),h5o=l(),t1=a("li"),Bse=a("strong"),u5o=o("bart"),p5o=o(" \u2014 "),hq=a("a"),_5o=o("BartForSequenceClassification"),v5o=o(" (BART model)"),b5o=l(),a1=a("li"),Pse=a("strong"),F5o=o("bert"),T5o=o(" \u2014 "),uq=a("a"),M5o=o("BertForSequenceClassification"),E5o=o(" (BERT model)"),C5o=l(),n1=a("li"),$se=a("strong"),w5o=o("big_bird"),A5o=o(" \u2014 "),pq=a("a"),y5o=o("BigBirdForSequenceClassification"),L5o=o(" (BigBird model)"),x5o=l(),s1=a("li"),Ise=a("strong"),k5o=o("bigbird_pegasus"),S5o=o(" \u2014 "),_q=a("a"),R5o=o("BigBirdPegasusForSequenceClassification"),B5o=o(" (BigBirdPegasus model)"),P5o=l(),l1=a("li"),qse=a("strong"),$5o=o("camembert"),I5o=o(" \u2014 "),vq=a("a"),q5o=o("CamembertForSequenceClassification"),N5o=o(" (CamemBERT model)"),j5o=l(),i1=a("li"),Nse=a("strong"),D5o=o("canine"),G5o=o(" \u2014 "),bq=a("a"),O5o=o("CanineForSequenceClassification"),V5o=o(" (Canine model)"),X5o=l(),d1=a("li"),jse=a("strong"),z5o=o("convbert"),Q5o=o(" \u2014 "),Fq=a("a"),W5o=o("ConvBertForSequenceClassification"),H5o=o(" (ConvBERT model)"),U5o=l(),c1=a("li"),Dse=a("strong"),J5o=o("ctrl"),Y5o=o(" \u2014 "),Tq=a("a"),K5o=o("CTRLForSequenceClassification"),Z5o=o(" (CTRL model)"),e3o=l(),f1=a("li"),Gse=a("strong"),o3o=o("data2vec-text"),r3o=o(" \u2014 "),Mq=a("a"),t3o=o("Data2VecTextForSequenceClassification"),a3o=o(" (Data2VecText model)"),n3o=l(),m1=a("li"),Ose=a("strong"),s3o=o("deberta"),l3o=o(" \u2014 "),Eq=a("a"),i3o=o("DebertaForSequenceClassification"),d3o=o(" (DeBERTa model)"),c3o=l(),g1=a("li"),Vse=a("strong"),f3o=o("deberta-v2"),m3o=o(" \u2014 "),Cq=a("a"),g3o=o("DebertaV2ForSequenceClassification"),h3o=o(" (DeBERTa-v2 model)"),u3o=l(),h1=a("li"),Xse=a("strong"),p3o=o("distilbert"),_3o=o(" \u2014 "),wq=a("a"),v3o=o("DistilBertForSequenceClassification"),b3o=o(" (DistilBERT model)"),F3o=l(),u1=a("li"),zse=a("strong"),T3o=o("electra"),M3o=o(" \u2014 "),Aq=a("a"),E3o=o("ElectraForSequenceClassification"),C3o=o(" (ELECTRA model)"),w3o=l(),p1=a("li"),Qse=a("strong"),A3o=o("flaubert"),y3o=o(" \u2014 "),yq=a("a"),L3o=o("FlaubertForSequenceClassification"),x3o=o(" (FlauBERT model)"),k3o=l(),_1=a("li"),Wse=a("strong"),S3o=o("fnet"),R3o=o(" \u2014 "),Lq=a("a"),B3o=o("FNetForSequenceClassification"),P3o=o(" (FNet model)"),$3o=l(),v1=a("li"),Hse=a("strong"),I3o=o("funnel"),q3o=o(" \u2014 "),xq=a("a"),N3o=o("FunnelForSequenceClassification"),j3o=o(" (Funnel Transformer model)"),D3o=l(),b1=a("li"),Use=a("strong"),G3o=o("gpt2"),O3o=o(" \u2014 "),kq=a("a"),V3o=o("GPT2ForSequenceClassification"),X3o=o(" (OpenAI GPT-2 model)"),z3o=l(),F1=a("li"),Jse=a("strong"),Q3o=o("gpt_neo"),W3o=o(" \u2014 "),Sq=a("a"),H3o=o("GPTNeoForSequenceClassification"),U3o=o(" (GPT Neo model)"),J3o=l(),T1=a("li"),Yse=a("strong"),Y3o=o("gptj"),K3o=o(" \u2014 "),Rq=a("a"),Z3o=o("GPTJForSequenceClassification"),eCo=o(" (GPT-J model)"),oCo=l(),M1=a("li"),Kse=a("strong"),rCo=o("ibert"),tCo=o(" \u2014 "),Bq=a("a"),aCo=o("IBertForSequenceClassification"),nCo=o(" (I-BERT model)"),sCo=l(),E1=a("li"),Zse=a("strong"),lCo=o("layoutlm"),iCo=o(" \u2014 "),Pq=a("a"),dCo=o("LayoutLMForSequenceClassification"),cCo=o(" (LayoutLM model)"),fCo=l(),C1=a("li"),ele=a("strong"),mCo=o("layoutlmv2"),gCo=o(" \u2014 "),$q=a("a"),hCo=o("LayoutLMv2ForSequenceClassification"),uCo=o(" (LayoutLMv2 model)"),pCo=l(),w1=a("li"),ole=a("strong"),_Co=o("led"),vCo=o(" \u2014 "),Iq=a("a"),bCo=o("LEDForSequenceClassification"),FCo=o(" (LED model)"),TCo=l(),A1=a("li"),rle=a("strong"),MCo=o("longformer"),ECo=o(" \u2014 "),qq=a("a"),CCo=o("LongformerForSequenceClassification"),wCo=o(" (Longformer model)"),ACo=l(),y1=a("li"),tle=a("strong"),yCo=o("mbart"),LCo=o(" \u2014 "),Nq=a("a"),xCo=o("MBartForSequenceClassification"),kCo=o(" (mBART model)"),SCo=l(),L1=a("li"),ale=a("strong"),RCo=o("megatron-bert"),BCo=o(" \u2014 "),jq=a("a"),PCo=o("MegatronBertForSequenceClassification"),$Co=o(" (MegatronBert model)"),ICo=l(),x1=a("li"),nle=a("strong"),qCo=o("mobilebert"),NCo=o(" \u2014 "),Dq=a("a"),jCo=o("MobileBertForSequenceClassification"),DCo=o(" (MobileBERT model)"),GCo=l(),k1=a("li"),sle=a("strong"),OCo=o("mpnet"),VCo=o(" \u2014 "),Gq=a("a"),XCo=o("MPNetForSequenceClassification"),zCo=o(" (MPNet model)"),QCo=l(),S1=a("li"),lle=a("strong"),WCo=o("nystromformer"),HCo=o(" \u2014 "),Oq=a("a"),UCo=o("NystromformerForSequenceClassification"),JCo=o(" (Nystromformer model)"),YCo=l(),R1=a("li"),ile=a("strong"),KCo=o("openai-gpt"),ZCo=o(" \u2014 "),Vq=a("a"),ewo=o("OpenAIGPTForSequenceClassification"),owo=o(" (OpenAI GPT model)"),rwo=l(),B1=a("li"),dle=a("strong"),two=o("perceiver"),awo=o(" \u2014 "),Xq=a("a"),nwo=o("PerceiverForSequenceClassification"),swo=o(" (Perceiver model)"),lwo=l(),P1=a("li"),cle=a("strong"),iwo=o("plbart"),dwo=o(" \u2014 "),zq=a("a"),cwo=o("PLBartForSequenceClassification"),fwo=o(" (PLBart model)"),mwo=l(),$1=a("li"),fle=a("strong"),gwo=o("qdqbert"),hwo=o(" \u2014 "),Qq=a("a"),uwo=o("QDQBertForSequenceClassification"),pwo=o(" (QDQBert model)"),_wo=l(),I1=a("li"),mle=a("strong"),vwo=o("reformer"),bwo=o(" \u2014 "),Wq=a("a"),Fwo=o("ReformerForSequenceClassification"),Two=o(" (Reformer model)"),Mwo=l(),q1=a("li"),gle=a("strong"),Ewo=o("rembert"),Cwo=o(" \u2014 "),Hq=a("a"),wwo=o("RemBertForSequenceClassification"),Awo=o(" (RemBERT model)"),ywo=l(),N1=a("li"),hle=a("strong"),Lwo=o("roberta"),xwo=o(" \u2014 "),Uq=a("a"),kwo=o("RobertaForSequenceClassification"),Swo=o(" (RoBERTa model)"),Rwo=l(),j1=a("li"),ule=a("strong"),Bwo=o("roformer"),Pwo=o(" \u2014 "),Jq=a("a"),$wo=o("RoFormerForSequenceClassification"),Iwo=o(" (RoFormer model)"),qwo=l(),D1=a("li"),ple=a("strong"),Nwo=o("squeezebert"),jwo=o(" \u2014 "),Yq=a("a"),Dwo=o("SqueezeBertForSequenceClassification"),Gwo=o(" (SqueezeBERT model)"),Owo=l(),G1=a("li"),_le=a("strong"),Vwo=o("tapas"),Xwo=o(" \u2014 "),Kq=a("a"),zwo=o("TapasForSequenceClassification"),Qwo=o(" (TAPAS model)"),Wwo=l(),O1=a("li"),vle=a("strong"),Hwo=o("transfo-xl"),Uwo=o(" \u2014 "),Zq=a("a"),Jwo=o("TransfoXLForSequenceClassification"),Ywo=o(" (Transformer-XL model)"),Kwo=l(),V1=a("li"),ble=a("strong"),Zwo=o("xlm"),e6o=o(" \u2014 "),eN=a("a"),o6o=o("XLMForSequenceClassification"),r6o=o(" (XLM model)"),t6o=l(),X1=a("li"),Fle=a("strong"),a6o=o("xlm-roberta"),n6o=o(" \u2014 "),oN=a("a"),s6o=o("XLMRobertaForSequenceClassification"),l6o=o(" (XLM-RoBERTa model)"),i6o=l(),z1=a("li"),Tle=a("strong"),d6o=o("xlm-roberta-xl"),c6o=o(" \u2014 "),rN=a("a"),f6o=o("XLMRobertaXLForSequenceClassification"),m6o=o(" (XLM-RoBERTa-XL model)"),g6o=l(),Q1=a("li"),Mle=a("strong"),h6o=o("xlnet"),u6o=o(" \u2014 "),tN=a("a"),p6o=o("XLNetForSequenceClassification"),_6o=o(" (XLNet model)"),v6o=l(),W1=a("li"),Ele=a("strong"),b6o=o("yoso"),F6o=o(" \u2014 "),aN=a("a"),T6o=o("YosoForSequenceClassification"),M6o=o(" (YOSO model)"),E6o=l(),H1=a("p"),C6o=o("The model is set in evaluation mode by default using "),Cle=a("code"),w6o=o("model.eval()"),A6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wle=a("code"),y6o=o("model.train()"),L6o=l(),Ale=a("p"),x6o=o("Examples:"),k6o=l(),f(IC.$$.fragment),iRe=l(),hd=a("h2"),U1=a("a"),yle=a("span"),f(qC.$$.fragment),S6o=l(),Lle=a("span"),R6o=o("AutoModelForMultipleChoice"),dRe=l(),rr=a("div"),f(NC.$$.fragment),B6o=l(),ud=a("p"),P6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=a("a"),$6o=o("from_pretrained()"),I6o=o(" class method or the "),sN=a("a"),q6o=o("from_config()"),N6o=o(` class
method.`),j6o=l(),jC=a("p"),D6o=o("This class cannot be instantiated directly using "),xle=a("code"),G6o=o("__init__()"),O6o=o(" (throws an error)."),V6o=l(),Jr=a("div"),f(DC.$$.fragment),X6o=l(),kle=a("p"),z6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q6o=l(),pd=a("p"),W6o=o(`Note:
Loading a model from its configuration file does `),Sle=a("strong"),H6o=o("not"),U6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),J6o=o("from_pretrained()"),Y6o=o(" to load the model weights."),K6o=l(),Rle=a("p"),Z6o=o("Examples:"),eAo=l(),f(GC.$$.fragment),oAo=l(),Ve=a("div"),f(OC.$$.fragment),rAo=l(),Ble=a("p"),tAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aAo=l(),Ja=a("p"),nAo=o("The model class to instantiate is selected based on the "),Ple=a("code"),sAo=o("model_type"),lAo=o(` property of the config object (either
passed as an argument or loaded from `),$le=a("code"),iAo=o("pretrained_model_name_or_path"),dAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),cAo=o("pretrained_model_name_or_path"),fAo=o(":"),mAo=l(),G=a("ul"),J1=a("li"),qle=a("strong"),gAo=o("albert"),hAo=o(" \u2014 "),iN=a("a"),uAo=o("AlbertForMultipleChoice"),pAo=o(" (ALBERT model)"),_Ao=l(),Y1=a("li"),Nle=a("strong"),vAo=o("bert"),bAo=o(" \u2014 "),dN=a("a"),FAo=o("BertForMultipleChoice"),TAo=o(" (BERT model)"),MAo=l(),K1=a("li"),jle=a("strong"),EAo=o("big_bird"),CAo=o(" \u2014 "),cN=a("a"),wAo=o("BigBirdForMultipleChoice"),AAo=o(" (BigBird model)"),yAo=l(),Z1=a("li"),Dle=a("strong"),LAo=o("camembert"),xAo=o(" \u2014 "),fN=a("a"),kAo=o("CamembertForMultipleChoice"),SAo=o(" (CamemBERT model)"),RAo=l(),e4=a("li"),Gle=a("strong"),BAo=o("canine"),PAo=o(" \u2014 "),mN=a("a"),$Ao=o("CanineForMultipleChoice"),IAo=o(" (Canine model)"),qAo=l(),o4=a("li"),Ole=a("strong"),NAo=o("convbert"),jAo=o(" \u2014 "),gN=a("a"),DAo=o("ConvBertForMultipleChoice"),GAo=o(" (ConvBERT model)"),OAo=l(),r4=a("li"),Vle=a("strong"),VAo=o("data2vec-text"),XAo=o(" \u2014 "),hN=a("a"),zAo=o("Data2VecTextForMultipleChoice"),QAo=o(" (Data2VecText model)"),WAo=l(),t4=a("li"),Xle=a("strong"),HAo=o("distilbert"),UAo=o(" \u2014 "),uN=a("a"),JAo=o("DistilBertForMultipleChoice"),YAo=o(" (DistilBERT model)"),KAo=l(),a4=a("li"),zle=a("strong"),ZAo=o("electra"),eyo=o(" \u2014 "),pN=a("a"),oyo=o("ElectraForMultipleChoice"),ryo=o(" (ELECTRA model)"),tyo=l(),n4=a("li"),Qle=a("strong"),ayo=o("flaubert"),nyo=o(" \u2014 "),_N=a("a"),syo=o("FlaubertForMultipleChoice"),lyo=o(" (FlauBERT model)"),iyo=l(),s4=a("li"),Wle=a("strong"),dyo=o("fnet"),cyo=o(" \u2014 "),vN=a("a"),fyo=o("FNetForMultipleChoice"),myo=o(" (FNet model)"),gyo=l(),l4=a("li"),Hle=a("strong"),hyo=o("funnel"),uyo=o(" \u2014 "),bN=a("a"),pyo=o("FunnelForMultipleChoice"),_yo=o(" (Funnel Transformer model)"),vyo=l(),i4=a("li"),Ule=a("strong"),byo=o("ibert"),Fyo=o(" \u2014 "),FN=a("a"),Tyo=o("IBertForMultipleChoice"),Myo=o(" (I-BERT model)"),Eyo=l(),d4=a("li"),Jle=a("strong"),Cyo=o("longformer"),wyo=o(" \u2014 "),TN=a("a"),Ayo=o("LongformerForMultipleChoice"),yyo=o(" (Longformer model)"),Lyo=l(),c4=a("li"),Yle=a("strong"),xyo=o("megatron-bert"),kyo=o(" \u2014 "),MN=a("a"),Syo=o("MegatronBertForMultipleChoice"),Ryo=o(" (MegatronBert model)"),Byo=l(),f4=a("li"),Kle=a("strong"),Pyo=o("mobilebert"),$yo=o(" \u2014 "),EN=a("a"),Iyo=o("MobileBertForMultipleChoice"),qyo=o(" (MobileBERT model)"),Nyo=l(),m4=a("li"),Zle=a("strong"),jyo=o("mpnet"),Dyo=o(" \u2014 "),CN=a("a"),Gyo=o("MPNetForMultipleChoice"),Oyo=o(" (MPNet model)"),Vyo=l(),g4=a("li"),eie=a("strong"),Xyo=o("nystromformer"),zyo=o(" \u2014 "),wN=a("a"),Qyo=o("NystromformerForMultipleChoice"),Wyo=o(" (Nystromformer model)"),Hyo=l(),h4=a("li"),oie=a("strong"),Uyo=o("qdqbert"),Jyo=o(" \u2014 "),AN=a("a"),Yyo=o("QDQBertForMultipleChoice"),Kyo=o(" (QDQBert model)"),Zyo=l(),u4=a("li"),rie=a("strong"),eLo=o("rembert"),oLo=o(" \u2014 "),yN=a("a"),rLo=o("RemBertForMultipleChoice"),tLo=o(" (RemBERT model)"),aLo=l(),p4=a("li"),tie=a("strong"),nLo=o("roberta"),sLo=o(" \u2014 "),LN=a("a"),lLo=o("RobertaForMultipleChoice"),iLo=o(" (RoBERTa model)"),dLo=l(),_4=a("li"),aie=a("strong"),cLo=o("roformer"),fLo=o(" \u2014 "),xN=a("a"),mLo=o("RoFormerForMultipleChoice"),gLo=o(" (RoFormer model)"),hLo=l(),v4=a("li"),nie=a("strong"),uLo=o("squeezebert"),pLo=o(" \u2014 "),kN=a("a"),_Lo=o("SqueezeBertForMultipleChoice"),vLo=o(" (SqueezeBERT model)"),bLo=l(),b4=a("li"),sie=a("strong"),FLo=o("xlm"),TLo=o(" \u2014 "),SN=a("a"),MLo=o("XLMForMultipleChoice"),ELo=o(" (XLM model)"),CLo=l(),F4=a("li"),lie=a("strong"),wLo=o("xlm-roberta"),ALo=o(" \u2014 "),RN=a("a"),yLo=o("XLMRobertaForMultipleChoice"),LLo=o(" (XLM-RoBERTa model)"),xLo=l(),T4=a("li"),iie=a("strong"),kLo=o("xlm-roberta-xl"),SLo=o(" \u2014 "),BN=a("a"),RLo=o("XLMRobertaXLForMultipleChoice"),BLo=o(" (XLM-RoBERTa-XL model)"),PLo=l(),M4=a("li"),die=a("strong"),$Lo=o("xlnet"),ILo=o(" \u2014 "),PN=a("a"),qLo=o("XLNetForMultipleChoice"),NLo=o(" (XLNet model)"),jLo=l(),E4=a("li"),cie=a("strong"),DLo=o("yoso"),GLo=o(" \u2014 "),$N=a("a"),OLo=o("YosoForMultipleChoice"),VLo=o(" (YOSO model)"),XLo=l(),C4=a("p"),zLo=o("The model is set in evaluation mode by default using "),fie=a("code"),QLo=o("model.eval()"),WLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),HLo=o("model.train()"),ULo=l(),gie=a("p"),JLo=o("Examples:"),YLo=l(),f(VC.$$.fragment),cRe=l(),_d=a("h2"),w4=a("a"),hie=a("span"),f(XC.$$.fragment),KLo=l(),uie=a("span"),ZLo=o("AutoModelForNextSentencePrediction"),fRe=l(),tr=a("div"),f(zC.$$.fragment),e7o=l(),vd=a("p"),o7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=a("a"),r7o=o("from_pretrained()"),t7o=o(" class method or the "),qN=a("a"),a7o=o("from_config()"),n7o=o(` class
method.`),s7o=l(),QC=a("p"),l7o=o("This class cannot be instantiated directly using "),pie=a("code"),i7o=o("__init__()"),d7o=o(" (throws an error)."),c7o=l(),Yr=a("div"),f(WC.$$.fragment),f7o=l(),_ie=a("p"),m7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g7o=l(),bd=a("p"),h7o=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),u7o=o("not"),p7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=a("a"),_7o=o("from_pretrained()"),v7o=o(" to load the model weights."),b7o=l(),bie=a("p"),F7o=o("Examples:"),T7o=l(),f(HC.$$.fragment),M7o=l(),Xe=a("div"),f(UC.$$.fragment),E7o=l(),Fie=a("p"),C7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w7o=l(),Ya=a("p"),A7o=o("The model class to instantiate is selected based on the "),Tie=a("code"),y7o=o("model_type"),L7o=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),x7o=o("pretrained_model_name_or_path"),k7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),S7o=o("pretrained_model_name_or_path"),R7o=o(":"),B7o=l(),da=a("ul"),A4=a("li"),Cie=a("strong"),P7o=o("bert"),$7o=o(" \u2014 "),jN=a("a"),I7o=o("BertForNextSentencePrediction"),q7o=o(" (BERT model)"),N7o=l(),y4=a("li"),wie=a("strong"),j7o=o("fnet"),D7o=o(" \u2014 "),DN=a("a"),G7o=o("FNetForNextSentencePrediction"),O7o=o(" (FNet model)"),V7o=l(),L4=a("li"),Aie=a("strong"),X7o=o("megatron-bert"),z7o=o(" \u2014 "),GN=a("a"),Q7o=o("MegatronBertForNextSentencePrediction"),W7o=o(" (MegatronBert model)"),H7o=l(),x4=a("li"),yie=a("strong"),U7o=o("mobilebert"),J7o=o(" \u2014 "),ON=a("a"),Y7o=o("MobileBertForNextSentencePrediction"),K7o=o(" (MobileBERT model)"),Z7o=l(),k4=a("li"),Lie=a("strong"),exo=o("qdqbert"),oxo=o(" \u2014 "),VN=a("a"),rxo=o("QDQBertForNextSentencePrediction"),txo=o(" (QDQBert model)"),axo=l(),S4=a("p"),nxo=o("The model is set in evaluation mode by default using "),xie=a("code"),sxo=o("model.eval()"),lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),ixo=o("model.train()"),dxo=l(),Sie=a("p"),cxo=o("Examples:"),fxo=l(),f(JC.$$.fragment),mRe=l(),Fd=a("h2"),R4=a("a"),Rie=a("span"),f(YC.$$.fragment),mxo=l(),Bie=a("span"),gxo=o("AutoModelForTokenClassification"),gRe=l(),ar=a("div"),f(KC.$$.fragment),hxo=l(),Td=a("p"),uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=a("a"),pxo=o("from_pretrained()"),_xo=o(" class method or the "),zN=a("a"),vxo=o("from_config()"),bxo=o(` class
method.`),Fxo=l(),ZC=a("p"),Txo=o("This class cannot be instantiated directly using "),Pie=a("code"),Mxo=o("__init__()"),Exo=o(" (throws an error)."),Cxo=l(),Kr=a("div"),f(ew.$$.fragment),wxo=l(),$ie=a("p"),Axo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yxo=l(),Md=a("p"),Lxo=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),xxo=o("not"),kxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),Sxo=o("from_pretrained()"),Rxo=o(" to load the model weights."),Bxo=l(),qie=a("p"),Pxo=o("Examples:"),$xo=l(),f(ow.$$.fragment),Ixo=l(),ze=a("div"),f(rw.$$.fragment),qxo=l(),Nie=a("p"),Nxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jxo=l(),Ka=a("p"),Dxo=o("The model class to instantiate is selected based on the "),jie=a("code"),Gxo=o("model_type"),Oxo=o(` property of the config object (either
passed as an argument or loaded from `),Die=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(":"),Wxo=l(),j=a("ul"),B4=a("li"),Oie=a("strong"),Hxo=o("albert"),Uxo=o(" \u2014 "),WN=a("a"),Jxo=o("AlbertForTokenClassification"),Yxo=o(" (ALBERT model)"),Kxo=l(),P4=a("li"),Vie=a("strong"),Zxo=o("bert"),e9o=o(" \u2014 "),HN=a("a"),o9o=o("BertForTokenClassification"),r9o=o(" (BERT model)"),t9o=l(),$4=a("li"),Xie=a("strong"),a9o=o("big_bird"),n9o=o(" \u2014 "),UN=a("a"),s9o=o("BigBirdForTokenClassification"),l9o=o(" (BigBird model)"),i9o=l(),I4=a("li"),zie=a("strong"),d9o=o("camembert"),c9o=o(" \u2014 "),JN=a("a"),f9o=o("CamembertForTokenClassification"),m9o=o(" (CamemBERT model)"),g9o=l(),q4=a("li"),Qie=a("strong"),h9o=o("canine"),u9o=o(" \u2014 "),YN=a("a"),p9o=o("CanineForTokenClassification"),_9o=o(" (Canine model)"),v9o=l(),N4=a("li"),Wie=a("strong"),b9o=o("convbert"),F9o=o(" \u2014 "),KN=a("a"),T9o=o("ConvBertForTokenClassification"),M9o=o(" (ConvBERT model)"),E9o=l(),j4=a("li"),Hie=a("strong"),C9o=o("data2vec-text"),w9o=o(" \u2014 "),ZN=a("a"),A9o=o("Data2VecTextForTokenClassification"),y9o=o(" (Data2VecText model)"),L9o=l(),D4=a("li"),Uie=a("strong"),x9o=o("deberta"),k9o=o(" \u2014 "),ej=a("a"),S9o=o("DebertaForTokenClassification"),R9o=o(" (DeBERTa model)"),B9o=l(),G4=a("li"),Jie=a("strong"),P9o=o("deberta-v2"),$9o=o(" \u2014 "),oj=a("a"),I9o=o("DebertaV2ForTokenClassification"),q9o=o(" (DeBERTa-v2 model)"),N9o=l(),O4=a("li"),Yie=a("strong"),j9o=o("distilbert"),D9o=o(" \u2014 "),rj=a("a"),G9o=o("DistilBertForTokenClassification"),O9o=o(" (DistilBERT model)"),V9o=l(),V4=a("li"),Kie=a("strong"),X9o=o("electra"),z9o=o(" \u2014 "),tj=a("a"),Q9o=o("ElectraForTokenClassification"),W9o=o(" (ELECTRA model)"),H9o=l(),X4=a("li"),Zie=a("strong"),U9o=o("flaubert"),J9o=o(" \u2014 "),aj=a("a"),Y9o=o("FlaubertForTokenClassification"),K9o=o(" (FlauBERT model)"),Z9o=l(),z4=a("li"),ede=a("strong"),eko=o("fnet"),oko=o(" \u2014 "),nj=a("a"),rko=o("FNetForTokenClassification"),tko=o(" (FNet model)"),ako=l(),Q4=a("li"),ode=a("strong"),nko=o("funnel"),sko=o(" \u2014 "),sj=a("a"),lko=o("FunnelForTokenClassification"),iko=o(" (Funnel Transformer model)"),dko=l(),W4=a("li"),rde=a("strong"),cko=o("gpt2"),fko=o(" \u2014 "),lj=a("a"),mko=o("GPT2ForTokenClassification"),gko=o(" (OpenAI GPT-2 model)"),hko=l(),H4=a("li"),tde=a("strong"),uko=o("ibert"),pko=o(" \u2014 "),ij=a("a"),_ko=o("IBertForTokenClassification"),vko=o(" (I-BERT model)"),bko=l(),U4=a("li"),ade=a("strong"),Fko=o("layoutlm"),Tko=o(" \u2014 "),dj=a("a"),Mko=o("LayoutLMForTokenClassification"),Eko=o(" (LayoutLM model)"),Cko=l(),J4=a("li"),nde=a("strong"),wko=o("layoutlmv2"),Ako=o(" \u2014 "),cj=a("a"),yko=o("LayoutLMv2ForTokenClassification"),Lko=o(" (LayoutLMv2 model)"),xko=l(),Y4=a("li"),sde=a("strong"),kko=o("longformer"),Sko=o(" \u2014 "),fj=a("a"),Rko=o("LongformerForTokenClassification"),Bko=o(" (Longformer model)"),Pko=l(),K4=a("li"),lde=a("strong"),$ko=o("megatron-bert"),Iko=o(" \u2014 "),mj=a("a"),qko=o("MegatronBertForTokenClassification"),Nko=o(" (MegatronBert model)"),jko=l(),Z4=a("li"),ide=a("strong"),Dko=o("mobilebert"),Gko=o(" \u2014 "),gj=a("a"),Oko=o("MobileBertForTokenClassification"),Vko=o(" (MobileBERT model)"),Xko=l(),eb=a("li"),dde=a("strong"),zko=o("mpnet"),Qko=o(" \u2014 "),hj=a("a"),Wko=o("MPNetForTokenClassification"),Hko=o(" (MPNet model)"),Uko=l(),ob=a("li"),cde=a("strong"),Jko=o("nystromformer"),Yko=o(" \u2014 "),uj=a("a"),Kko=o("NystromformerForTokenClassification"),Zko=o(" (Nystromformer model)"),eSo=l(),rb=a("li"),fde=a("strong"),oSo=o("qdqbert"),rSo=o(" \u2014 "),pj=a("a"),tSo=o("QDQBertForTokenClassification"),aSo=o(" (QDQBert model)"),nSo=l(),tb=a("li"),mde=a("strong"),sSo=o("rembert"),lSo=o(" \u2014 "),_j=a("a"),iSo=o("RemBertForTokenClassification"),dSo=o(" (RemBERT model)"),cSo=l(),ab=a("li"),gde=a("strong"),fSo=o("roberta"),mSo=o(" \u2014 "),vj=a("a"),gSo=o("RobertaForTokenClassification"),hSo=o(" (RoBERTa model)"),uSo=l(),nb=a("li"),hde=a("strong"),pSo=o("roformer"),_So=o(" \u2014 "),bj=a("a"),vSo=o("RoFormerForTokenClassification"),bSo=o(" (RoFormer model)"),FSo=l(),sb=a("li"),ude=a("strong"),TSo=o("squeezebert"),MSo=o(" \u2014 "),Fj=a("a"),ESo=o("SqueezeBertForTokenClassification"),CSo=o(" (SqueezeBERT model)"),wSo=l(),lb=a("li"),pde=a("strong"),ASo=o("xlm"),ySo=o(" \u2014 "),Tj=a("a"),LSo=o("XLMForTokenClassification"),xSo=o(" (XLM model)"),kSo=l(),ib=a("li"),_de=a("strong"),SSo=o("xlm-roberta"),RSo=o(" \u2014 "),Mj=a("a"),BSo=o("XLMRobertaForTokenClassification"),PSo=o(" (XLM-RoBERTa model)"),$So=l(),db=a("li"),vde=a("strong"),ISo=o("xlm-roberta-xl"),qSo=o(" \u2014 "),Ej=a("a"),NSo=o("XLMRobertaXLForTokenClassification"),jSo=o(" (XLM-RoBERTa-XL model)"),DSo=l(),cb=a("li"),bde=a("strong"),GSo=o("xlnet"),OSo=o(" \u2014 "),Cj=a("a"),VSo=o("XLNetForTokenClassification"),XSo=o(" (XLNet model)"),zSo=l(),fb=a("li"),Fde=a("strong"),QSo=o("yoso"),WSo=o(" \u2014 "),wj=a("a"),HSo=o("YosoForTokenClassification"),USo=o(" (YOSO model)"),JSo=l(),mb=a("p"),YSo=o("The model is set in evaluation mode by default using "),Tde=a("code"),KSo=o("model.eval()"),ZSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=a("code"),eRo=o("model.train()"),oRo=l(),Ede=a("p"),rRo=o("Examples:"),tRo=l(),f(tw.$$.fragment),hRe=l(),Ed=a("h2"),gb=a("a"),Cde=a("span"),f(aw.$$.fragment),aRo=l(),wde=a("span"),nRo=o("AutoModelForQuestionAnswering"),uRe=l(),nr=a("div"),f(nw.$$.fragment),sRo=l(),Cd=a("p"),lRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=a("a"),iRo=o("from_pretrained()"),dRo=o(" class method or the "),yj=a("a"),cRo=o("from_config()"),fRo=o(` class
method.`),mRo=l(),sw=a("p"),gRo=o("This class cannot be instantiated directly using "),Ade=a("code"),hRo=o("__init__()"),uRo=o(" (throws an error)."),pRo=l(),Zr=a("div"),f(lw.$$.fragment),_Ro=l(),yde=a("p"),vRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bRo=l(),wd=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),TRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),ERo=o("from_pretrained()"),CRo=o(" to load the model weights."),wRo=l(),xde=a("p"),ARo=o("Examples:"),yRo=l(),f(iw.$$.fragment),LRo=l(),Qe=a("div"),f(dw.$$.fragment),xRo=l(),kde=a("p"),kRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SRo=l(),Za=a("p"),RRo=o("The model class to instantiate is selected based on the "),Sde=a("code"),BRo=o("model_type"),PRo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=a("code"),qRo=o("pretrained_model_name_or_path"),NRo=o(":"),jRo=l(),R=a("ul"),hb=a("li"),Pde=a("strong"),DRo=o("albert"),GRo=o(" \u2014 "),xj=a("a"),ORo=o("AlbertForQuestionAnswering"),VRo=o(" (ALBERT model)"),XRo=l(),ub=a("li"),$de=a("strong"),zRo=o("bart"),QRo=o(" \u2014 "),kj=a("a"),WRo=o("BartForQuestionAnswering"),HRo=o(" (BART model)"),URo=l(),pb=a("li"),Ide=a("strong"),JRo=o("bert"),YRo=o(" \u2014 "),Sj=a("a"),KRo=o("BertForQuestionAnswering"),ZRo=o(" (BERT model)"),eBo=l(),_b=a("li"),qde=a("strong"),oBo=o("big_bird"),rBo=o(" \u2014 "),Rj=a("a"),tBo=o("BigBirdForQuestionAnswering"),aBo=o(" (BigBird model)"),nBo=l(),vb=a("li"),Nde=a("strong"),sBo=o("bigbird_pegasus"),lBo=o(" \u2014 "),Bj=a("a"),iBo=o("BigBirdPegasusForQuestionAnswering"),dBo=o(" (BigBirdPegasus model)"),cBo=l(),bb=a("li"),jde=a("strong"),fBo=o("camembert"),mBo=o(" \u2014 "),Pj=a("a"),gBo=o("CamembertForQuestionAnswering"),hBo=o(" (CamemBERT model)"),uBo=l(),Fb=a("li"),Dde=a("strong"),pBo=o("canine"),_Bo=o(" \u2014 "),$j=a("a"),vBo=o("CanineForQuestionAnswering"),bBo=o(" (Canine model)"),FBo=l(),Tb=a("li"),Gde=a("strong"),TBo=o("convbert"),MBo=o(" \u2014 "),Ij=a("a"),EBo=o("ConvBertForQuestionAnswering"),CBo=o(" (ConvBERT model)"),wBo=l(),Mb=a("li"),Ode=a("strong"),ABo=o("data2vec-text"),yBo=o(" \u2014 "),qj=a("a"),LBo=o("Data2VecTextForQuestionAnswering"),xBo=o(" (Data2VecText model)"),kBo=l(),Eb=a("li"),Vde=a("strong"),SBo=o("deberta"),RBo=o(" \u2014 "),Nj=a("a"),BBo=o("DebertaForQuestionAnswering"),PBo=o(" (DeBERTa model)"),$Bo=l(),Cb=a("li"),Xde=a("strong"),IBo=o("deberta-v2"),qBo=o(" \u2014 "),jj=a("a"),NBo=o("DebertaV2ForQuestionAnswering"),jBo=o(" (DeBERTa-v2 model)"),DBo=l(),wb=a("li"),zde=a("strong"),GBo=o("distilbert"),OBo=o(" \u2014 "),Dj=a("a"),VBo=o("DistilBertForQuestionAnswering"),XBo=o(" (DistilBERT model)"),zBo=l(),Ab=a("li"),Qde=a("strong"),QBo=o("electra"),WBo=o(" \u2014 "),Gj=a("a"),HBo=o("ElectraForQuestionAnswering"),UBo=o(" (ELECTRA model)"),JBo=l(),yb=a("li"),Wde=a("strong"),YBo=o("flaubert"),KBo=o(" \u2014 "),Oj=a("a"),ZBo=o("FlaubertForQuestionAnsweringSimple"),ePo=o(" (FlauBERT model)"),oPo=l(),Lb=a("li"),Hde=a("strong"),rPo=o("fnet"),tPo=o(" \u2014 "),Vj=a("a"),aPo=o("FNetForQuestionAnswering"),nPo=o(" (FNet model)"),sPo=l(),xb=a("li"),Ude=a("strong"),lPo=o("funnel"),iPo=o(" \u2014 "),Xj=a("a"),dPo=o("FunnelForQuestionAnswering"),cPo=o(" (Funnel Transformer model)"),fPo=l(),kb=a("li"),Jde=a("strong"),mPo=o("gptj"),gPo=o(" \u2014 "),zj=a("a"),hPo=o("GPTJForQuestionAnswering"),uPo=o(" (GPT-J model)"),pPo=l(),Sb=a("li"),Yde=a("strong"),_Po=o("ibert"),vPo=o(" \u2014 "),Qj=a("a"),bPo=o("IBertForQuestionAnswering"),FPo=o(" (I-BERT model)"),TPo=l(),Rb=a("li"),Kde=a("strong"),MPo=o("layoutlmv2"),EPo=o(" \u2014 "),Wj=a("a"),CPo=o("LayoutLMv2ForQuestionAnswering"),wPo=o(" (LayoutLMv2 model)"),APo=l(),Bb=a("li"),Zde=a("strong"),yPo=o("led"),LPo=o(" \u2014 "),Hj=a("a"),xPo=o("LEDForQuestionAnswering"),kPo=o(" (LED model)"),SPo=l(),Pb=a("li"),ece=a("strong"),RPo=o("longformer"),BPo=o(" \u2014 "),Uj=a("a"),PPo=o("LongformerForQuestionAnswering"),$Po=o(" (Longformer model)"),IPo=l(),$b=a("li"),oce=a("strong"),qPo=o("lxmert"),NPo=o(" \u2014 "),Jj=a("a"),jPo=o("LxmertForQuestionAnswering"),DPo=o(" (LXMERT model)"),GPo=l(),Ib=a("li"),rce=a("strong"),OPo=o("mbart"),VPo=o(" \u2014 "),Yj=a("a"),XPo=o("MBartForQuestionAnswering"),zPo=o(" (mBART model)"),QPo=l(),qb=a("li"),tce=a("strong"),WPo=o("megatron-bert"),HPo=o(" \u2014 "),Kj=a("a"),UPo=o("MegatronBertForQuestionAnswering"),JPo=o(" (MegatronBert model)"),YPo=l(),Nb=a("li"),ace=a("strong"),KPo=o("mobilebert"),ZPo=o(" \u2014 "),Zj=a("a"),e$o=o("MobileBertForQuestionAnswering"),o$o=o(" (MobileBERT model)"),r$o=l(),jb=a("li"),nce=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),eD=a("a"),n$o=o("MPNetForQuestionAnswering"),s$o=o(" (MPNet model)"),l$o=l(),Db=a("li"),sce=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),oD=a("a"),c$o=o("NystromformerForQuestionAnswering"),f$o=o(" (Nystromformer model)"),m$o=l(),Gb=a("li"),lce=a("strong"),g$o=o("qdqbert"),h$o=o(" \u2014 "),rD=a("a"),u$o=o("QDQBertForQuestionAnswering"),p$o=o(" (QDQBert model)"),_$o=l(),Ob=a("li"),ice=a("strong"),v$o=o("reformer"),b$o=o(" \u2014 "),tD=a("a"),F$o=o("ReformerForQuestionAnswering"),T$o=o(" (Reformer model)"),M$o=l(),Vb=a("li"),dce=a("strong"),E$o=o("rembert"),C$o=o(" \u2014 "),aD=a("a"),w$o=o("RemBertForQuestionAnswering"),A$o=o(" (RemBERT model)"),y$o=l(),Xb=a("li"),cce=a("strong"),L$o=o("roberta"),x$o=o(" \u2014 "),nD=a("a"),k$o=o("RobertaForQuestionAnswering"),S$o=o(" (RoBERTa model)"),R$o=l(),zb=a("li"),fce=a("strong"),B$o=o("roformer"),P$o=o(" \u2014 "),sD=a("a"),$$o=o("RoFormerForQuestionAnswering"),I$o=o(" (RoFormer model)"),q$o=l(),Qb=a("li"),mce=a("strong"),N$o=o("splinter"),j$o=o(" \u2014 "),lD=a("a"),D$o=o("SplinterForQuestionAnswering"),G$o=o(" (Splinter model)"),O$o=l(),Wb=a("li"),gce=a("strong"),V$o=o("squeezebert"),X$o=o(" \u2014 "),iD=a("a"),z$o=o("SqueezeBertForQuestionAnswering"),Q$o=o(" (SqueezeBERT model)"),W$o=l(),Hb=a("li"),hce=a("strong"),H$o=o("xlm"),U$o=o(" \u2014 "),dD=a("a"),J$o=o("XLMForQuestionAnsweringSimple"),Y$o=o(" (XLM model)"),K$o=l(),Ub=a("li"),uce=a("strong"),Z$o=o("xlm-roberta"),eIo=o(" \u2014 "),cD=a("a"),oIo=o("XLMRobertaForQuestionAnswering"),rIo=o(" (XLM-RoBERTa model)"),tIo=l(),Jb=a("li"),pce=a("strong"),aIo=o("xlm-roberta-xl"),nIo=o(" \u2014 "),fD=a("a"),sIo=o("XLMRobertaXLForQuestionAnswering"),lIo=o(" (XLM-RoBERTa-XL model)"),iIo=l(),Yb=a("li"),_ce=a("strong"),dIo=o("xlnet"),cIo=o(" \u2014 "),mD=a("a"),fIo=o("XLNetForQuestionAnsweringSimple"),mIo=o(" (XLNet model)"),gIo=l(),Kb=a("li"),vce=a("strong"),hIo=o("yoso"),uIo=o(" \u2014 "),gD=a("a"),pIo=o("YosoForQuestionAnswering"),_Io=o(" (YOSO model)"),vIo=l(),Zb=a("p"),bIo=o("The model is set in evaluation mode by default using "),bce=a("code"),FIo=o("model.eval()"),TIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),MIo=o("model.train()"),EIo=l(),Tce=a("p"),CIo=o("Examples:"),wIo=l(),f(cw.$$.fragment),pRe=l(),Ad=a("h2"),e2=a("a"),Mce=a("span"),f(fw.$$.fragment),AIo=l(),Ece=a("span"),yIo=o("AutoModelForTableQuestionAnswering"),_Re=l(),sr=a("div"),f(mw.$$.fragment),LIo=l(),yd=a("p"),xIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=a("a"),kIo=o("from_pretrained()"),SIo=o(" class method or the "),uD=a("a"),RIo=o("from_config()"),BIo=o(` class
method.`),PIo=l(),gw=a("p"),$Io=o("This class cannot be instantiated directly using "),Cce=a("code"),IIo=o("__init__()"),qIo=o(" (throws an error)."),NIo=l(),et=a("div"),f(hw.$$.fragment),jIo=l(),wce=a("p"),DIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GIo=l(),Ld=a("p"),OIo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),VIo=o("not"),XIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=a("a"),zIo=o("from_pretrained()"),QIo=o(" to load the model weights."),WIo=l(),yce=a("p"),HIo=o("Examples:"),UIo=l(),f(uw.$$.fragment),JIo=l(),We=a("div"),f(pw.$$.fragment),YIo=l(),Lce=a("p"),KIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZIo=l(),en=a("p"),eqo=o("The model class to instantiate is selected based on the "),xce=a("code"),oqo=o("model_type"),rqo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),tqo=o("pretrained_model_name_or_path"),aqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),nqo=o("pretrained_model_name_or_path"),sqo=o(":"),lqo=l(),Rce=a("ul"),o2=a("li"),Bce=a("strong"),iqo=o("tapas"),dqo=o(" \u2014 "),_D=a("a"),cqo=o("TapasForQuestionAnswering"),fqo=o(" (TAPAS model)"),mqo=l(),r2=a("p"),gqo=o("The model is set in evaluation mode by default using "),Pce=a("code"),hqo=o("model.eval()"),uqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),pqo=o("model.train()"),_qo=l(),Ice=a("p"),vqo=o("Examples:"),bqo=l(),f(_w.$$.fragment),vRe=l(),xd=a("h2"),t2=a("a"),qce=a("span"),f(vw.$$.fragment),Fqo=l(),Nce=a("span"),Tqo=o("AutoModelForImageClassification"),bRe=l(),lr=a("div"),f(bw.$$.fragment),Mqo=l(),kd=a("p"),Eqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=a("a"),Cqo=o("from_pretrained()"),wqo=o(" class method or the "),bD=a("a"),Aqo=o("from_config()"),yqo=o(` class
method.`),Lqo=l(),Fw=a("p"),xqo=o("This class cannot be instantiated directly using "),jce=a("code"),kqo=o("__init__()"),Sqo=o(" (throws an error)."),Rqo=l(),ot=a("div"),f(Tw.$$.fragment),Bqo=l(),Dce=a("p"),Pqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$qo=l(),Sd=a("p"),Iqo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),qqo=o("not"),Nqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),jqo=o("from_pretrained()"),Dqo=o(" to load the model weights."),Gqo=l(),Oce=a("p"),Oqo=o("Examples:"),Vqo=l(),f(Mw.$$.fragment),Xqo=l(),He=a("div"),f(Ew.$$.fragment),zqo=l(),Vce=a("p"),Qqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wqo=l(),on=a("p"),Hqo=o("The model class to instantiate is selected based on the "),Xce=a("code"),Uqo=o("model_type"),Jqo=o(` property of the config object (either
passed as an argument or loaded from `),zce=a("code"),Yqo=o("pretrained_model_name_or_path"),Kqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),Zqo=o("pretrained_model_name_or_path"),eNo=o(":"),oNo=l(),ge=a("ul"),a2=a("li"),Wce=a("strong"),rNo=o("beit"),tNo=o(" \u2014 "),TD=a("a"),aNo=o("BeitForImageClassification"),nNo=o(" (BEiT model)"),sNo=l(),n2=a("li"),Hce=a("strong"),lNo=o("convnext"),iNo=o(" \u2014 "),MD=a("a"),dNo=o("ConvNextForImageClassification"),cNo=o(" (ConvNext model)"),fNo=l(),Ds=a("li"),Uce=a("strong"),mNo=o("deit"),gNo=o(" \u2014 "),ED=a("a"),hNo=o("DeiTForImageClassification"),uNo=o(" or "),CD=a("a"),pNo=o("DeiTForImageClassificationWithTeacher"),_No=o(" (DeiT model)"),vNo=l(),s2=a("li"),Jce=a("strong"),bNo=o("imagegpt"),FNo=o(" \u2014 "),wD=a("a"),TNo=o("ImageGPTForImageClassification"),MNo=o(" (ImageGPT model)"),ENo=l(),ma=a("li"),Yce=a("strong"),CNo=o("perceiver"),wNo=o(" \u2014 "),AD=a("a"),ANo=o("PerceiverForImageClassificationLearned"),yNo=o(" or "),yD=a("a"),LNo=o("PerceiverForImageClassificationFourier"),xNo=o(" or "),LD=a("a"),kNo=o("PerceiverForImageClassificationConvProcessing"),SNo=o(" (Perceiver model)"),RNo=l(),l2=a("li"),Kce=a("strong"),BNo=o("poolformer"),PNo=o(" \u2014 "),xD=a("a"),$No=o("PoolFormerForImageClassification"),INo=o(" (PoolFormer model)"),qNo=l(),i2=a("li"),Zce=a("strong"),NNo=o("resnet"),jNo=o(" \u2014 "),kD=a("a"),DNo=o("ResNetForImageClassification"),GNo=o(" (ResNet model)"),ONo=l(),d2=a("li"),efe=a("strong"),VNo=o("segformer"),XNo=o(" \u2014 "),SD=a("a"),zNo=o("SegformerForImageClassification"),QNo=o(" (SegFormer model)"),WNo=l(),c2=a("li"),ofe=a("strong"),HNo=o("swin"),UNo=o(" \u2014 "),RD=a("a"),JNo=o("SwinForImageClassification"),YNo=o(" (Swin model)"),KNo=l(),f2=a("li"),rfe=a("strong"),ZNo=o("van"),ejo=o(" \u2014 "),BD=a("a"),ojo=o("VanForImageClassification"),rjo=o(" (VAN model)"),tjo=l(),m2=a("li"),tfe=a("strong"),ajo=o("vit"),njo=o(" \u2014 "),PD=a("a"),sjo=o("ViTForImageClassification"),ljo=o(" (ViT model)"),ijo=l(),g2=a("p"),djo=o("The model is set in evaluation mode by default using "),afe=a("code"),cjo=o("model.eval()"),fjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=a("code"),mjo=o("model.train()"),gjo=l(),sfe=a("p"),hjo=o("Examples:"),ujo=l(),f(Cw.$$.fragment),FRe=l(),Rd=a("h2"),h2=a("a"),lfe=a("span"),f(ww.$$.fragment),pjo=l(),ife=a("span"),_jo=o("AutoModelForVision2Seq"),TRe=l(),ir=a("div"),f(Aw.$$.fragment),vjo=l(),Bd=a("p"),bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=a("a"),Fjo=o("from_pretrained()"),Tjo=o(" class method or the "),ID=a("a"),Mjo=o("from_config()"),Ejo=o(` class
method.`),Cjo=l(),yw=a("p"),wjo=o("This class cannot be instantiated directly using "),dfe=a("code"),Ajo=o("__init__()"),yjo=o(" (throws an error)."),Ljo=l(),rt=a("div"),f(Lw.$$.fragment),xjo=l(),cfe=a("p"),kjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sjo=l(),Pd=a("p"),Rjo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),Bjo=o("not"),Pjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),$jo=o("from_pretrained()"),Ijo=o(" to load the model weights."),qjo=l(),mfe=a("p"),Njo=o("Examples:"),jjo=l(),f(xw.$$.fragment),Djo=l(),Ue=a("div"),f(kw.$$.fragment),Gjo=l(),gfe=a("p"),Ojo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vjo=l(),rn=a("p"),Xjo=o("The model class to instantiate is selected based on the "),hfe=a("code"),zjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),Wjo=o("pretrained_model_name_or_path"),Hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(":"),Yjo=l(),_fe=a("ul"),u2=a("li"),vfe=a("strong"),Kjo=o("vision-encoder-decoder"),Zjo=o(" \u2014 "),ND=a("a"),eDo=o("VisionEncoderDecoderModel"),oDo=o(" (Vision Encoder decoder model)"),rDo=l(),p2=a("p"),tDo=o("The model is set in evaluation mode by default using "),bfe=a("code"),aDo=o("model.eval()"),nDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),sDo=o("model.train()"),lDo=l(),Tfe=a("p"),iDo=o("Examples:"),dDo=l(),f(Sw.$$.fragment),MRe=l(),$d=a("h2"),_2=a("a"),Mfe=a("span"),f(Rw.$$.fragment),cDo=l(),Efe=a("span"),fDo=o("AutoModelForAudioClassification"),ERe=l(),dr=a("div"),f(Bw.$$.fragment),mDo=l(),Id=a("p"),gDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=a("a"),hDo=o("from_pretrained()"),uDo=o(" class method or the "),DD=a("a"),pDo=o("from_config()"),_Do=o(` class
method.`),vDo=l(),Pw=a("p"),bDo=o("This class cannot be instantiated directly using "),Cfe=a("code"),FDo=o("__init__()"),TDo=o(" (throws an error)."),MDo=l(),tt=a("div"),f($w.$$.fragment),EDo=l(),wfe=a("p"),CDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wDo=l(),qd=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),yDo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),xDo=o("from_pretrained()"),kDo=o(" to load the model weights."),SDo=l(),yfe=a("p"),RDo=o("Examples:"),BDo=l(),f(Iw.$$.fragment),PDo=l(),Je=a("div"),f(qw.$$.fragment),$Do=l(),Lfe=a("p"),IDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qDo=l(),tn=a("p"),NDo=o("The model class to instantiate is selected based on the "),xfe=a("code"),jDo=o("model_type"),DDo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),VDo=o("pretrained_model_name_or_path"),XDo=o(":"),zDo=l(),Se=a("ul"),v2=a("li"),Rfe=a("strong"),QDo=o("data2vec-audio"),WDo=o(" \u2014 "),OD=a("a"),HDo=o("Data2VecAudioForSequenceClassification"),UDo=o(" (Data2VecAudio model)"),JDo=l(),b2=a("li"),Bfe=a("strong"),YDo=o("hubert"),KDo=o(" \u2014 "),VD=a("a"),ZDo=o("HubertForSequenceClassification"),eGo=o(" (Hubert model)"),oGo=l(),F2=a("li"),Pfe=a("strong"),rGo=o("sew"),tGo=o(" \u2014 "),XD=a("a"),aGo=o("SEWForSequenceClassification"),nGo=o(" (SEW model)"),sGo=l(),T2=a("li"),$fe=a("strong"),lGo=o("sew-d"),iGo=o(" \u2014 "),zD=a("a"),dGo=o("SEWDForSequenceClassification"),cGo=o(" (SEW-D model)"),fGo=l(),M2=a("li"),Ife=a("strong"),mGo=o("unispeech"),gGo=o(" \u2014 "),QD=a("a"),hGo=o("UniSpeechForSequenceClassification"),uGo=o(" (UniSpeech model)"),pGo=l(),E2=a("li"),qfe=a("strong"),_Go=o("unispeech-sat"),vGo=o(" \u2014 "),WD=a("a"),bGo=o("UniSpeechSatForSequenceClassification"),FGo=o(" (UniSpeechSat model)"),TGo=l(),C2=a("li"),Nfe=a("strong"),MGo=o("wav2vec2"),EGo=o(" \u2014 "),HD=a("a"),CGo=o("Wav2Vec2ForSequenceClassification"),wGo=o(" (Wav2Vec2 model)"),AGo=l(),w2=a("li"),jfe=a("strong"),yGo=o("wavlm"),LGo=o(" \u2014 "),UD=a("a"),xGo=o("WavLMForSequenceClassification"),kGo=o(" (WavLM model)"),SGo=l(),A2=a("p"),RGo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),BGo=o("model.eval()"),PGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),$Go=o("model.train()"),IGo=l(),Ofe=a("p"),qGo=o("Examples:"),NGo=l(),f(Nw.$$.fragment),CRe=l(),Nd=a("h2"),y2=a("a"),Vfe=a("span"),f(jw.$$.fragment),jGo=l(),Xfe=a("span"),DGo=o("AutoModelForAudioFrameClassification"),wRe=l(),cr=a("div"),f(Dw.$$.fragment),GGo=l(),jd=a("p"),OGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=a("a"),VGo=o("from_pretrained()"),XGo=o(" class method or the "),YD=a("a"),zGo=o("from_config()"),QGo=o(` class
method.`),WGo=l(),Gw=a("p"),HGo=o("This class cannot be instantiated directly using "),zfe=a("code"),UGo=o("__init__()"),JGo=o(" (throws an error)."),YGo=l(),at=a("div"),f(Ow.$$.fragment),KGo=l(),Qfe=a("p"),ZGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eOo=l(),Dd=a("p"),oOo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),rOo=o("not"),tOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),aOo=o("from_pretrained()"),nOo=o(" to load the model weights."),sOo=l(),Hfe=a("p"),lOo=o("Examples:"),iOo=l(),f(Vw.$$.fragment),dOo=l(),Ye=a("div"),f(Xw.$$.fragment),cOo=l(),Ufe=a("p"),fOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mOo=l(),an=a("p"),gOo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),hOo=o("model_type"),uOo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),vOo=o("pretrained_model_name_or_path"),bOo=o(":"),FOo=l(),nn=a("ul"),L2=a("li"),Zfe=a("strong"),TOo=o("data2vec-audio"),MOo=o(" \u2014 "),ZD=a("a"),EOo=o("Data2VecAudioForAudioFrameClassification"),COo=o(" (Data2VecAudio model)"),wOo=l(),x2=a("li"),eme=a("strong"),AOo=o("unispeech-sat"),yOo=o(" \u2014 "),eG=a("a"),LOo=o("UniSpeechSatForAudioFrameClassification"),xOo=o(" (UniSpeechSat model)"),kOo=l(),k2=a("li"),ome=a("strong"),SOo=o("wav2vec2"),ROo=o(" \u2014 "),oG=a("a"),BOo=o("Wav2Vec2ForAudioFrameClassification"),POo=o(" (Wav2Vec2 model)"),$Oo=l(),S2=a("li"),rme=a("strong"),IOo=o("wavlm"),qOo=o(" \u2014 "),rG=a("a"),NOo=o("WavLMForAudioFrameClassification"),jOo=o(" (WavLM model)"),DOo=l(),R2=a("p"),GOo=o("The model is set in evaluation mode by default using "),tme=a("code"),OOo=o("model.eval()"),VOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),XOo=o("model.train()"),zOo=l(),nme=a("p"),QOo=o("Examples:"),WOo=l(),f(zw.$$.fragment),ARe=l(),Gd=a("h2"),B2=a("a"),sme=a("span"),f(Qw.$$.fragment),HOo=l(),lme=a("span"),UOo=o("AutoModelForCTC"),yRe=l(),fr=a("div"),f(Ww.$$.fragment),JOo=l(),Od=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=a("a"),KOo=o("from_pretrained()"),ZOo=o(" class method or the "),aG=a("a"),eVo=o("from_config()"),oVo=o(` class
method.`),rVo=l(),Hw=a("p"),tVo=o("This class cannot be instantiated directly using "),ime=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),nt=a("div"),f(Uw.$$.fragment),lVo=l(),dme=a("p"),iVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dVo=l(),Vd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),gVo=o("from_pretrained()"),hVo=o(" to load the model weights."),uVo=l(),fme=a("p"),pVo=o("Examples:"),_Vo=l(),f(Jw.$$.fragment),vVo=l(),Ke=a("div"),f(Yw.$$.fragment),bVo=l(),mme=a("p"),FVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TVo=l(),sn=a("p"),MVo=o("The model class to instantiate is selected based on the "),gme=a("code"),EVo=o("model_type"),CVo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),yVo=o("pretrained_model_name_or_path"),LVo=o(":"),xVo=l(),Re=a("ul"),P2=a("li"),pme=a("strong"),kVo=o("data2vec-audio"),SVo=o(" \u2014 "),sG=a("a"),RVo=o("Data2VecAudioForCTC"),BVo=o(" (Data2VecAudio model)"),PVo=l(),$2=a("li"),_me=a("strong"),$Vo=o("hubert"),IVo=o(" \u2014 "),lG=a("a"),qVo=o("HubertForCTC"),NVo=o(" (Hubert model)"),jVo=l(),I2=a("li"),vme=a("strong"),DVo=o("sew"),GVo=o(" \u2014 "),iG=a("a"),OVo=o("SEWForCTC"),VVo=o(" (SEW model)"),XVo=l(),q2=a("li"),bme=a("strong"),zVo=o("sew-d"),QVo=o(" \u2014 "),dG=a("a"),WVo=o("SEWDForCTC"),HVo=o(" (SEW-D model)"),UVo=l(),N2=a("li"),Fme=a("strong"),JVo=o("unispeech"),YVo=o(" \u2014 "),cG=a("a"),KVo=o("UniSpeechForCTC"),ZVo=o(" (UniSpeech model)"),eXo=l(),j2=a("li"),Tme=a("strong"),oXo=o("unispeech-sat"),rXo=o(" \u2014 "),fG=a("a"),tXo=o("UniSpeechSatForCTC"),aXo=o(" (UniSpeechSat model)"),nXo=l(),D2=a("li"),Mme=a("strong"),sXo=o("wav2vec2"),lXo=o(" \u2014 "),mG=a("a"),iXo=o("Wav2Vec2ForCTC"),dXo=o(" (Wav2Vec2 model)"),cXo=l(),G2=a("li"),Eme=a("strong"),fXo=o("wavlm"),mXo=o(" \u2014 "),gG=a("a"),gXo=o("WavLMForCTC"),hXo=o(" (WavLM model)"),uXo=l(),O2=a("p"),pXo=o("The model is set in evaluation mode by default using "),Cme=a("code"),_Xo=o("model.eval()"),vXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),bXo=o("model.train()"),FXo=l(),Ame=a("p"),TXo=o("Examples:"),MXo=l(),f(Kw.$$.fragment),LRe=l(),Xd=a("h2"),V2=a("a"),yme=a("span"),f(Zw.$$.fragment),EXo=l(),Lme=a("span"),CXo=o("AutoModelForSpeechSeq2Seq"),xRe=l(),mr=a("div"),f(e6.$$.fragment),wXo=l(),zd=a("p"),AXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=a("a"),yXo=o("from_pretrained()"),LXo=o(" class method or the "),uG=a("a"),xXo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),o6=a("p"),RXo=o("This class cannot be instantiated directly using "),xme=a("code"),BXo=o("__init__()"),PXo=o(" (throws an error)."),$Xo=l(),st=a("div"),f(r6.$$.fragment),IXo=l(),kme=a("p"),qXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NXo=l(),Qd=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),DXo=o("not"),GXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),OXo=o("from_pretrained()"),VXo=o(" to load the model weights."),XXo=l(),Rme=a("p"),zXo=o("Examples:"),QXo=l(),f(t6.$$.fragment),WXo=l(),Ze=a("div"),f(a6.$$.fragment),HXo=l(),Bme=a("p"),UXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JXo=l(),ln=a("p"),YXo=o("The model class to instantiate is selected based on the "),Pme=a("code"),KXo=o("model_type"),ZXo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(":"),azo=l(),n6=a("ul"),X2=a("li"),qme=a("strong"),nzo=o("speech-encoder-decoder"),szo=o(" \u2014 "),_G=a("a"),lzo=o("SpeechEncoderDecoderModel"),izo=o(" (Speech Encoder decoder model)"),dzo=l(),z2=a("li"),Nme=a("strong"),czo=o("speech_to_text"),fzo=o(" \u2014 "),vG=a("a"),mzo=o("Speech2TextForConditionalGeneration"),gzo=o(" (Speech2Text model)"),hzo=l(),Q2=a("p"),uzo=o("The model is set in evaluation mode by default using "),jme=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),vzo=o("model.train()"),bzo=l(),Gme=a("p"),Fzo=o("Examples:"),Tzo=l(),f(s6.$$.fragment),kRe=l(),Wd=a("h2"),W2=a("a"),Ome=a("span"),f(l6.$$.fragment),Mzo=l(),Vme=a("span"),Ezo=o("AutoModelForAudioXVector"),SRe=l(),gr=a("div"),f(i6.$$.fragment),Czo=l(),Hd=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bG=a("a"),Azo=o("from_pretrained()"),yzo=o(" class method or the "),FG=a("a"),Lzo=o("from_config()"),xzo=o(` class
method.`),kzo=l(),d6=a("p"),Szo=o("This class cannot be instantiated directly using "),Xme=a("code"),Rzo=o("__init__()"),Bzo=o(" (throws an error)."),Pzo=l(),lt=a("div"),f(c6.$$.fragment),$zo=l(),zme=a("p"),Izo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qzo=l(),Ud=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" to load the model weights."),Vzo=l(),Wme=a("p"),Xzo=o("Examples:"),zzo=l(),f(f6.$$.fragment),Qzo=l(),eo=a("div"),f(m6.$$.fragment),Wzo=l(),Hme=a("p"),Hzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Uzo=l(),dn=a("p"),Jzo=o("The model class to instantiate is selected based on the "),Ume=a("code"),Yzo=o("model_type"),Kzo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(":"),tQo=l(),cn=a("ul"),H2=a("li"),Kme=a("strong"),aQo=o("data2vec-audio"),nQo=o(" \u2014 "),MG=a("a"),sQo=o("Data2VecAudioForXVector"),lQo=o(" (Data2VecAudio model)"),iQo=l(),U2=a("li"),Zme=a("strong"),dQo=o("unispeech-sat"),cQo=o(" \u2014 "),EG=a("a"),fQo=o("UniSpeechSatForXVector"),mQo=o(" (UniSpeechSat model)"),gQo=l(),J2=a("li"),ege=a("strong"),hQo=o("wav2vec2"),uQo=o(" \u2014 "),CG=a("a"),pQo=o("Wav2Vec2ForXVector"),_Qo=o(" (Wav2Vec2 model)"),vQo=l(),Y2=a("li"),oge=a("strong"),bQo=o("wavlm"),FQo=o(" \u2014 "),wG=a("a"),TQo=o("WavLMForXVector"),MQo=o(" (WavLM model)"),EQo=l(),K2=a("p"),CQo=o("The model is set in evaluation mode by default using "),rge=a("code"),wQo=o("model.eval()"),AQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),yQo=o("model.train()"),LQo=l(),age=a("p"),xQo=o("Examples:"),kQo=l(),f(g6.$$.fragment),RRe=l(),Jd=a("h2"),Z2=a("a"),nge=a("span"),f(h6.$$.fragment),SQo=l(),sge=a("span"),RQo=o("AutoModelForMaskedImageModeling"),BRe=l(),hr=a("div"),f(u6.$$.fragment),BQo=l(),Yd=a("p"),PQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=a("a"),$Qo=o("from_pretrained()"),IQo=o(" class method or the "),yG=a("a"),qQo=o("from_config()"),NQo=o(` class
method.`),jQo=l(),p6=a("p"),DQo=o("This class cannot be instantiated directly using "),lge=a("code"),GQo=o("__init__()"),OQo=o(" (throws an error)."),VQo=l(),it=a("div"),f(_6.$$.fragment),XQo=l(),ige=a("p"),zQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QQo=l(),Kd=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),HQo=o("not"),UQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),JQo=o("from_pretrained()"),YQo=o(" to load the model weights."),KQo=l(),cge=a("p"),ZQo=o("Examples:"),eWo=l(),f(v6.$$.fragment),oWo=l(),oo=a("div"),f(b6.$$.fragment),rWo=l(),fge=a("p"),tWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aWo=l(),fn=a("p"),nWo=o("The model class to instantiate is selected based on the "),mge=a("code"),sWo=o("model_type"),lWo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(":"),mWo=l(),Zd=a("ul"),eF=a("li"),uge=a("strong"),gWo=o("deit"),hWo=o(" \u2014 "),xG=a("a"),uWo=o("DeiTForMaskedImageModeling"),pWo=o(" (DeiT model)"),_Wo=l(),oF=a("li"),pge=a("strong"),vWo=o("swin"),bWo=o(" \u2014 "),kG=a("a"),FWo=o("SwinForMaskedImageModeling"),TWo=o(" (Swin model)"),MWo=l(),rF=a("li"),_ge=a("strong"),EWo=o("vit"),CWo=o(" \u2014 "),SG=a("a"),wWo=o("ViTForMaskedImageModeling"),AWo=o(" (ViT model)"),yWo=l(),tF=a("p"),LWo=o("The model is set in evaluation mode by default using "),vge=a("code"),xWo=o("model.eval()"),kWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),SWo=o("model.train()"),RWo=l(),Fge=a("p"),BWo=o("Examples:"),PWo=l(),f(F6.$$.fragment),PRe=l(),ec=a("h2"),aF=a("a"),Tge=a("span"),f(T6.$$.fragment),$Wo=l(),Mge=a("span"),IWo=o("AutoModelForObjectDetection"),$Re=l(),ur=a("div"),f(M6.$$.fragment),qWo=l(),oc=a("p"),NWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=a("a"),jWo=o("from_pretrained()"),DWo=o(" class method or the "),BG=a("a"),GWo=o("from_config()"),OWo=o(` class
method.`),VWo=l(),E6=a("p"),XWo=o("This class cannot be instantiated directly using "),Ege=a("code"),zWo=o("__init__()"),QWo=o(" (throws an error)."),WWo=l(),dt=a("div"),f(C6.$$.fragment),HWo=l(),Cge=a("p"),UWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JWo=l(),rc=a("p"),YWo=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),KWo=o("not"),ZWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),eHo=o("from_pretrained()"),oHo=o(" to load the model weights."),rHo=l(),Age=a("p"),tHo=o("Examples:"),aHo=l(),f(w6.$$.fragment),nHo=l(),ro=a("div"),f(A6.$$.fragment),sHo=l(),yge=a("p"),lHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iHo=l(),mn=a("p"),dHo=o("The model class to instantiate is selected based on the "),Lge=a("code"),cHo=o("model_type"),fHo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),mHo=o("pretrained_model_name_or_path"),gHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),hHo=o("pretrained_model_name_or_path"),uHo=o(":"),pHo=l(),Sge=a("ul"),nF=a("li"),Rge=a("strong"),_Ho=o("detr"),vHo=o(" \u2014 "),$G=a("a"),bHo=o("DetrForObjectDetection"),FHo=o(" (DETR model)"),THo=l(),sF=a("p"),MHo=o("The model is set in evaluation mode by default using "),Bge=a("code"),EHo=o("model.eval()"),CHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),wHo=o("model.train()"),AHo=l(),$ge=a("p"),yHo=o("Examples:"),LHo=l(),f(y6.$$.fragment),IRe=l(),tc=a("h2"),lF=a("a"),Ige=a("span"),f(L6.$$.fragment),xHo=l(),qge=a("span"),kHo=o("AutoModelForImageSegmentation"),qRe=l(),pr=a("div"),f(x6.$$.fragment),SHo=l(),ac=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=a("a"),BHo=o("from_pretrained()"),PHo=o(" class method or the "),qG=a("a"),$Ho=o("from_config()"),IHo=o(` class
method.`),qHo=l(),k6=a("p"),NHo=o("This class cannot be instantiated directly using "),Nge=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),ct=a("div"),f(S6.$$.fragment),OHo=l(),jge=a("p"),VHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),XHo=l(),nc=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),QHo=o("not"),WHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),Gge=a("p"),YHo=o("Examples:"),KHo=l(),f(R6.$$.fragment),ZHo=l(),to=a("div"),f(B6.$$.fragment),eUo=l(),Oge=a("p"),oUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rUo=l(),gn=a("p"),tUo=o("The model class to instantiate is selected based on the "),Vge=a("code"),aUo=o("model_type"),nUo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(":"),cUo=l(),Qge=a("ul"),iF=a("li"),Wge=a("strong"),fUo=o("detr"),mUo=o(" \u2014 "),jG=a("a"),gUo=o("DetrForSegmentation"),hUo=o(" (DETR model)"),uUo=l(),dF=a("p"),pUo=o("The model is set in evaluation mode by default using "),Hge=a("code"),_Uo=o("model.eval()"),vUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),bUo=o("model.train()"),FUo=l(),Jge=a("p"),TUo=o("Examples:"),MUo=l(),f(P6.$$.fragment),NRe=l(),sc=a("h2"),cF=a("a"),Yge=a("span"),f($6.$$.fragment),EUo=l(),Kge=a("span"),CUo=o("AutoModelForSemanticSegmentation"),jRe=l(),_r=a("div"),f(I6.$$.fragment),wUo=l(),lc=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=a("a"),yUo=o("from_pretrained()"),LUo=o(" class method or the "),GG=a("a"),xUo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),q6=a("p"),RUo=o("This class cannot be instantiated directly using "),Zge=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),$Uo=l(),ft=a("div"),f(N6.$$.fragment),IUo=l(),ehe=a("p"),qUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NUo=l(),ic=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),rhe=a("p"),zUo=o("Examples:"),QUo=l(),f(j6.$$.fragment),WUo=l(),ao=a("div"),f(D6.$$.fragment),HUo=l(),the=a("p"),UUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JUo=l(),hn=a("p"),YUo=o("The model class to instantiate is selected based on the "),ahe=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),dc=a("ul"),fF=a("li"),lhe=a("strong"),nJo=o("beit"),sJo=o(" \u2014 "),VG=a("a"),lJo=o("BeitForSemanticSegmentation"),iJo=o(" (BEiT model)"),dJo=l(),mF=a("li"),ihe=a("strong"),cJo=o("dpt"),fJo=o(" \u2014 "),XG=a("a"),mJo=o("DPTForSemanticSegmentation"),gJo=o(" (DPT model)"),hJo=l(),gF=a("li"),dhe=a("strong"),uJo=o("segformer"),pJo=o(" \u2014 "),zG=a("a"),_Jo=o("SegformerForSemanticSegmentation"),vJo=o(" (SegFormer model)"),bJo=l(),hF=a("p"),FJo=o("The model is set in evaluation mode by default using "),che=a("code"),TJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),EJo=o("model.train()"),CJo=l(),mhe=a("p"),wJo=o("Examples:"),AJo=l(),f(G6.$$.fragment),DRe=l(),cc=a("h2"),uF=a("a"),ghe=a("span"),f(O6.$$.fragment),yJo=l(),hhe=a("span"),LJo=o("AutoModelForInstanceSegmentation"),GRe=l(),vr=a("div"),f(V6.$$.fragment),xJo=l(),fc=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=a("a"),SJo=o("from_pretrained()"),RJo=o(" class method or the "),WG=a("a"),BJo=o("from_config()"),PJo=o(` class
method.`),$Jo=l(),X6=a("p"),IJo=o("This class cannot be instantiated directly using "),uhe=a("code"),qJo=o("__init__()"),NJo=o(" (throws an error)."),jJo=l(),mt=a("div"),f(z6.$$.fragment),DJo=l(),phe=a("p"),GJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OJo=l(),mc=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),XJo=o("not"),zJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),QJo=o("from_pretrained()"),WJo=o(" to load the model weights."),HJo=l(),vhe=a("p"),UJo=o("Examples:"),JJo=l(),f(Q6.$$.fragment),YJo=l(),no=a("div"),f(W6.$$.fragment),KJo=l(),bhe=a("p"),ZJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eYo=l(),un=a("p"),oYo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),rYo=o("model_type"),tYo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(":"),iYo=l(),Ehe=a("ul"),pF=a("li"),Che=a("strong"),dYo=o("maskformer"),cYo=o(" \u2014 "),UG=a("a"),fYo=o("MaskFormerForInstanceSegmentation"),mYo=o(" (MaskFormer model)"),gYo=l(),_F=a("p"),hYo=o("The model is set in evaluation mode by default using "),whe=a("code"),uYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=a("code"),_Yo=o("model.train()"),vYo=l(),yhe=a("p"),bYo=o("Examples:"),FYo=l(),f(H6.$$.fragment),ORe=l(),gc=a("h2"),vF=a("a"),Lhe=a("span"),f(U6.$$.fragment),TYo=l(),xhe=a("span"),MYo=o("TFAutoModel"),VRe=l(),br=a("div"),f(J6.$$.fragment),EYo=l(),hc=a("p"),CYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=a("a"),wYo=o("from_pretrained()"),AYo=o(" class method or the "),YG=a("a"),yYo=o("from_config()"),LYo=o(` class
method.`),xYo=l(),Y6=a("p"),kYo=o("This class cannot be instantiated directly using "),khe=a("code"),SYo=o("__init__()"),RYo=o(" (throws an error)."),BYo=l(),gt=a("div"),f(K6.$$.fragment),PYo=l(),She=a("p"),$Yo=o("Instantiates one of the base model classes of the library from a configuration."),IYo=l(),uc=a("p"),qYo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),NYo=o("not"),jYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),DYo=o("from_pretrained()"),GYo=o(" to load the model weights."),OYo=l(),Bhe=a("p"),VYo=o("Examples:"),XYo=l(),f(Z6.$$.fragment),zYo=l(),ho=a("div"),f(eA.$$.fragment),QYo=l(),Phe=a("p"),WYo=o("Instantiate one of the base model classes of the library from a pretrained model."),HYo=l(),pn=a("p"),UYo=o("The model class to instantiate is selected based on the "),$he=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),x=a("ul"),bF=a("li"),Nhe=a("strong"),tKo=o("albert"),aKo=o(" \u2014 "),ZG=a("a"),nKo=o("TFAlbertModel"),sKo=o(" (ALBERT model)"),lKo=l(),FF=a("li"),jhe=a("strong"),iKo=o("bart"),dKo=o(" \u2014 "),eO=a("a"),cKo=o("TFBartModel"),fKo=o(" (BART model)"),mKo=l(),TF=a("li"),Dhe=a("strong"),gKo=o("bert"),hKo=o(" \u2014 "),oO=a("a"),uKo=o("TFBertModel"),pKo=o(" (BERT model)"),_Ko=l(),MF=a("li"),Ghe=a("strong"),vKo=o("blenderbot"),bKo=o(" \u2014 "),rO=a("a"),FKo=o("TFBlenderbotModel"),TKo=o(" (Blenderbot model)"),MKo=l(),EF=a("li"),Ohe=a("strong"),EKo=o("blenderbot-small"),CKo=o(" \u2014 "),tO=a("a"),wKo=o("TFBlenderbotSmallModel"),AKo=o(" (BlenderbotSmall model)"),yKo=l(),CF=a("li"),Vhe=a("strong"),LKo=o("camembert"),xKo=o(" \u2014 "),aO=a("a"),kKo=o("TFCamembertModel"),SKo=o(" (CamemBERT model)"),RKo=l(),wF=a("li"),Xhe=a("strong"),BKo=o("clip"),PKo=o(" \u2014 "),nO=a("a"),$Ko=o("TFCLIPModel"),IKo=o(" (CLIP model)"),qKo=l(),AF=a("li"),zhe=a("strong"),NKo=o("convbert"),jKo=o(" \u2014 "),sO=a("a"),DKo=o("TFConvBertModel"),GKo=o(" (ConvBERT model)"),OKo=l(),yF=a("li"),Qhe=a("strong"),VKo=o("convnext"),XKo=o(" \u2014 "),lO=a("a"),zKo=o("TFConvNextModel"),QKo=o(" (ConvNext model)"),WKo=l(),LF=a("li"),Whe=a("strong"),HKo=o("ctrl"),UKo=o(" \u2014 "),iO=a("a"),JKo=o("TFCTRLModel"),YKo=o(" (CTRL model)"),KKo=l(),xF=a("li"),Hhe=a("strong"),ZKo=o("deberta"),eZo=o(" \u2014 "),dO=a("a"),oZo=o("TFDebertaModel"),rZo=o(" (DeBERTa model)"),tZo=l(),kF=a("li"),Uhe=a("strong"),aZo=o("deberta-v2"),nZo=o(" \u2014 "),cO=a("a"),sZo=o("TFDebertaV2Model"),lZo=o(" (DeBERTa-v2 model)"),iZo=l(),SF=a("li"),Jhe=a("strong"),dZo=o("distilbert"),cZo=o(" \u2014 "),fO=a("a"),fZo=o("TFDistilBertModel"),mZo=o(" (DistilBERT model)"),gZo=l(),RF=a("li"),Yhe=a("strong"),hZo=o("dpr"),uZo=o(" \u2014 "),mO=a("a"),pZo=o("TFDPRQuestionEncoder"),_Zo=o(" (DPR model)"),vZo=l(),BF=a("li"),Khe=a("strong"),bZo=o("electra"),FZo=o(" \u2014 "),gO=a("a"),TZo=o("TFElectraModel"),MZo=o(" (ELECTRA model)"),EZo=l(),PF=a("li"),Zhe=a("strong"),CZo=o("flaubert"),wZo=o(" \u2014 "),hO=a("a"),AZo=o("TFFlaubertModel"),yZo=o(" (FlauBERT model)"),LZo=l(),Gs=a("li"),eue=a("strong"),xZo=o("funnel"),kZo=o(" \u2014 "),uO=a("a"),SZo=o("TFFunnelModel"),RZo=o(" or "),pO=a("a"),BZo=o("TFFunnelBaseModel"),PZo=o(" (Funnel Transformer model)"),$Zo=l(),$F=a("li"),oue=a("strong"),IZo=o("gpt2"),qZo=o(" \u2014 "),_O=a("a"),NZo=o("TFGPT2Model"),jZo=o(" (OpenAI GPT-2 model)"),DZo=l(),IF=a("li"),rue=a("strong"),GZo=o("gptj"),OZo=o(" \u2014 "),vO=a("a"),VZo=o("TFGPTJModel"),XZo=o(" (GPT-J model)"),zZo=l(),qF=a("li"),tue=a("strong"),QZo=o("hubert"),WZo=o(" \u2014 "),bO=a("a"),HZo=o("TFHubertModel"),UZo=o(" (Hubert model)"),JZo=l(),NF=a("li"),aue=a("strong"),YZo=o("layoutlm"),KZo=o(" \u2014 "),FO=a("a"),ZZo=o("TFLayoutLMModel"),eer=o(" (LayoutLM model)"),oer=l(),jF=a("li"),nue=a("strong"),rer=o("led"),ter=o(" \u2014 "),TO=a("a"),aer=o("TFLEDModel"),ner=o(" (LED model)"),ser=l(),DF=a("li"),sue=a("strong"),ler=o("longformer"),ier=o(" \u2014 "),MO=a("a"),der=o("TFLongformerModel"),cer=o(" (Longformer model)"),fer=l(),GF=a("li"),lue=a("strong"),mer=o("lxmert"),ger=o(" \u2014 "),EO=a("a"),her=o("TFLxmertModel"),uer=o(" (LXMERT model)"),per=l(),OF=a("li"),iue=a("strong"),_er=o("marian"),ver=o(" \u2014 "),CO=a("a"),ber=o("TFMarianModel"),Fer=o(" (Marian model)"),Ter=l(),VF=a("li"),due=a("strong"),Mer=o("mbart"),Eer=o(" \u2014 "),wO=a("a"),Cer=o("TFMBartModel"),wer=o(" (mBART model)"),Aer=l(),XF=a("li"),cue=a("strong"),yer=o("mobilebert"),Ler=o(" \u2014 "),AO=a("a"),xer=o("TFMobileBertModel"),ker=o(" (MobileBERT model)"),Ser=l(),zF=a("li"),fue=a("strong"),Rer=o("mpnet"),Ber=o(" \u2014 "),yO=a("a"),Per=o("TFMPNetModel"),$er=o(" (MPNet model)"),Ier=l(),QF=a("li"),mue=a("strong"),qer=o("mt5"),Ner=o(" \u2014 "),LO=a("a"),jer=o("TFMT5Model"),Der=o(" (mT5 model)"),Ger=l(),WF=a("li"),gue=a("strong"),Oer=o("openai-gpt"),Ver=o(" \u2014 "),xO=a("a"),Xer=o("TFOpenAIGPTModel"),zer=o(" (OpenAI GPT model)"),Qer=l(),HF=a("li"),hue=a("strong"),Wer=o("pegasus"),Her=o(" \u2014 "),kO=a("a"),Uer=o("TFPegasusModel"),Jer=o(" (Pegasus model)"),Yer=l(),UF=a("li"),uue=a("strong"),Ker=o("rembert"),Zer=o(" \u2014 "),SO=a("a"),eor=o("TFRemBertModel"),oor=o(" (RemBERT model)"),ror=l(),JF=a("li"),pue=a("strong"),tor=o("roberta"),aor=o(" \u2014 "),RO=a("a"),nor=o("TFRobertaModel"),sor=o(" (RoBERTa model)"),lor=l(),YF=a("li"),_ue=a("strong"),ior=o("roformer"),dor=o(" \u2014 "),BO=a("a"),cor=o("TFRoFormerModel"),mor=o(" (RoFormer model)"),gor=l(),KF=a("li"),vue=a("strong"),hor=o("speech_to_text"),uor=o(" \u2014 "),PO=a("a"),por=o("TFSpeech2TextModel"),_or=o(" (Speech2Text model)"),vor=l(),ZF=a("li"),bue=a("strong"),bor=o("t5"),For=o(" \u2014 "),$O=a("a"),Tor=o("TFT5Model"),Mor=o(" (T5 model)"),Eor=l(),e0=a("li"),Fue=a("strong"),Cor=o("tapas"),wor=o(" \u2014 "),IO=a("a"),Aor=o("TFTapasModel"),yor=o(" (TAPAS model)"),Lor=l(),o0=a("li"),Tue=a("strong"),xor=o("transfo-xl"),kor=o(" \u2014 "),qO=a("a"),Sor=o("TFTransfoXLModel"),Ror=o(" (Transformer-XL model)"),Bor=l(),r0=a("li"),Mue=a("strong"),Por=o("vit"),$or=o(" \u2014 "),NO=a("a"),Ior=o("TFViTModel"),qor=o(" (ViT model)"),Nor=l(),t0=a("li"),Eue=a("strong"),jor=o("vit_mae"),Dor=o(" \u2014 "),jO=a("a"),Gor=o("TFViTMAEModel"),Oor=o(" (ViTMAE model)"),Vor=l(),a0=a("li"),Cue=a("strong"),Xor=o("wav2vec2"),zor=o(" \u2014 "),DO=a("a"),Qor=o("TFWav2Vec2Model"),Wor=o(" (Wav2Vec2 model)"),Hor=l(),n0=a("li"),wue=a("strong"),Uor=o("xlm"),Jor=o(" \u2014 "),GO=a("a"),Yor=o("TFXLMModel"),Kor=o(" (XLM model)"),Zor=l(),s0=a("li"),Aue=a("strong"),err=o("xlm-roberta"),orr=o(" \u2014 "),OO=a("a"),rrr=o("TFXLMRobertaModel"),trr=o(" (XLM-RoBERTa model)"),arr=l(),l0=a("li"),yue=a("strong"),nrr=o("xlnet"),srr=o(" \u2014 "),VO=a("a"),lrr=o("TFXLNetModel"),irr=o(" (XLNet model)"),drr=l(),Lue=a("p"),crr=o("Examples:"),frr=l(),f(oA.$$.fragment),XRe=l(),pc=a("h2"),i0=a("a"),xue=a("span"),f(rA.$$.fragment),mrr=l(),kue=a("span"),grr=o("TFAutoModelForPreTraining"),zRe=l(),Fr=a("div"),f(tA.$$.fragment),hrr=l(),_c=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=a("a"),prr=o("from_pretrained()"),_rr=o(" class method or the "),zO=a("a"),vrr=o("from_config()"),brr=o(` class
method.`),Frr=l(),aA=a("p"),Trr=o("This class cannot be instantiated directly using "),Sue=a("code"),Mrr=o("__init__()"),Err=o(" (throws an error)."),Crr=l(),ht=a("div"),f(nA.$$.fragment),wrr=l(),Rue=a("p"),Arr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yrr=l(),vc=a("p"),Lrr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),xrr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Brr=l(),Pue=a("p"),Prr=o("Examples:"),$rr=l(),f(sA.$$.fragment),Irr=l(),uo=a("div"),f(lA.$$.fragment),qrr=l(),$ue=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jrr=l(),_n=a("p"),Drr=o("The model class to instantiate is selected based on the "),Iue=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(":"),Wrr=l(),H=a("ul"),d0=a("li"),jue=a("strong"),Hrr=o("albert"),Urr=o(" \u2014 "),WO=a("a"),Jrr=o("TFAlbertForPreTraining"),Yrr=o(" (ALBERT model)"),Krr=l(),c0=a("li"),Due=a("strong"),Zrr=o("bart"),etr=o(" \u2014 "),HO=a("a"),otr=o("TFBartForConditionalGeneration"),rtr=o(" (BART model)"),ttr=l(),f0=a("li"),Gue=a("strong"),atr=o("bert"),ntr=o(" \u2014 "),UO=a("a"),str=o("TFBertForPreTraining"),ltr=o(" (BERT model)"),itr=l(),m0=a("li"),Oue=a("strong"),dtr=o("camembert"),ctr=o(" \u2014 "),JO=a("a"),ftr=o("TFCamembertForMaskedLM"),mtr=o(" (CamemBERT model)"),gtr=l(),g0=a("li"),Vue=a("strong"),htr=o("ctrl"),utr=o(" \u2014 "),YO=a("a"),ptr=o("TFCTRLLMHeadModel"),_tr=o(" (CTRL model)"),vtr=l(),h0=a("li"),Xue=a("strong"),btr=o("distilbert"),Ftr=o(" \u2014 "),KO=a("a"),Ttr=o("TFDistilBertForMaskedLM"),Mtr=o(" (DistilBERT model)"),Etr=l(),u0=a("li"),zue=a("strong"),Ctr=o("electra"),wtr=o(" \u2014 "),ZO=a("a"),Atr=o("TFElectraForPreTraining"),ytr=o(" (ELECTRA model)"),Ltr=l(),p0=a("li"),Que=a("strong"),xtr=o("flaubert"),ktr=o(" \u2014 "),eV=a("a"),Str=o("TFFlaubertWithLMHeadModel"),Rtr=o(" (FlauBERT model)"),Btr=l(),_0=a("li"),Wue=a("strong"),Ptr=o("funnel"),$tr=o(" \u2014 "),oV=a("a"),Itr=o("TFFunnelForPreTraining"),qtr=o(" (Funnel Transformer model)"),Ntr=l(),v0=a("li"),Hue=a("strong"),jtr=o("gpt2"),Dtr=o(" \u2014 "),rV=a("a"),Gtr=o("TFGPT2LMHeadModel"),Otr=o(" (OpenAI GPT-2 model)"),Vtr=l(),b0=a("li"),Uue=a("strong"),Xtr=o("layoutlm"),ztr=o(" \u2014 "),tV=a("a"),Qtr=o("TFLayoutLMForMaskedLM"),Wtr=o(" (LayoutLM model)"),Htr=l(),F0=a("li"),Jue=a("strong"),Utr=o("lxmert"),Jtr=o(" \u2014 "),aV=a("a"),Ytr=o("TFLxmertForPreTraining"),Ktr=o(" (LXMERT model)"),Ztr=l(),T0=a("li"),Yue=a("strong"),ear=o("mobilebert"),oar=o(" \u2014 "),nV=a("a"),rar=o("TFMobileBertForPreTraining"),tar=o(" (MobileBERT model)"),aar=l(),M0=a("li"),Kue=a("strong"),nar=o("mpnet"),sar=o(" \u2014 "),sV=a("a"),lar=o("TFMPNetForMaskedLM"),iar=o(" (MPNet model)"),dar=l(),E0=a("li"),Zue=a("strong"),car=o("openai-gpt"),far=o(" \u2014 "),lV=a("a"),mar=o("TFOpenAIGPTLMHeadModel"),gar=o(" (OpenAI GPT model)"),har=l(),C0=a("li"),epe=a("strong"),uar=o("roberta"),par=o(" \u2014 "),iV=a("a"),_ar=o("TFRobertaForMaskedLM"),bar=o(" (RoBERTa model)"),Far=l(),w0=a("li"),ope=a("strong"),Tar=o("t5"),Mar=o(" \u2014 "),dV=a("a"),Ear=o("TFT5ForConditionalGeneration"),Car=o(" (T5 model)"),war=l(),A0=a("li"),rpe=a("strong"),Aar=o("tapas"),yar=o(" \u2014 "),cV=a("a"),Lar=o("TFTapasForMaskedLM"),xar=o(" (TAPAS model)"),kar=l(),y0=a("li"),tpe=a("strong"),Sar=o("transfo-xl"),Rar=o(" \u2014 "),fV=a("a"),Bar=o("TFTransfoXLLMHeadModel"),Par=o(" (Transformer-XL model)"),$ar=l(),L0=a("li"),ape=a("strong"),Iar=o("vit_mae"),qar=o(" \u2014 "),mV=a("a"),Nar=o("TFViTMAEForPreTraining"),jar=o(" (ViTMAE model)"),Dar=l(),x0=a("li"),npe=a("strong"),Gar=o("xlm"),Oar=o(" \u2014 "),gV=a("a"),Var=o("TFXLMWithLMHeadModel"),Xar=o(" (XLM model)"),zar=l(),k0=a("li"),spe=a("strong"),Qar=o("xlm-roberta"),War=o(" \u2014 "),hV=a("a"),Har=o("TFXLMRobertaForMaskedLM"),Uar=o(" (XLM-RoBERTa model)"),Jar=l(),S0=a("li"),lpe=a("strong"),Yar=o("xlnet"),Kar=o(" \u2014 "),uV=a("a"),Zar=o("TFXLNetLMHeadModel"),enr=o(" (XLNet model)"),onr=l(),ipe=a("p"),rnr=o("Examples:"),tnr=l(),f(iA.$$.fragment),QRe=l(),bc=a("h2"),R0=a("a"),dpe=a("span"),f(dA.$$.fragment),anr=l(),cpe=a("span"),nnr=o("TFAutoModelForCausalLM"),WRe=l(),Tr=a("div"),f(cA.$$.fragment),snr=l(),Fc=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pV=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),_V=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),fA=a("p"),gnr=o("This class cannot be instantiated directly using "),fpe=a("code"),hnr=o("__init__()"),unr=o(" (throws an error)."),pnr=l(),ut=a("div"),f(mA.$$.fragment),_nr=l(),mpe=a("p"),vnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bnr=l(),Tc=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),gpe=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),hpe=a("p"),Anr=o("Examples:"),ynr=l(),f(gA.$$.fragment),Lnr=l(),po=a("div"),f(hA.$$.fragment),xnr=l(),upe=a("p"),knr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Snr=l(),vn=a("p"),Rnr=o("The model class to instantiate is selected based on the "),ppe=a("code"),Bnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),$nr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),qnr=o("pretrained_model_name_or_path"),Nnr=o(":"),jnr=l(),ce=a("ul"),B0=a("li"),bpe=a("strong"),Dnr=o("bert"),Gnr=o(" \u2014 "),bV=a("a"),Onr=o("TFBertLMHeadModel"),Vnr=o(" (BERT model)"),Xnr=l(),P0=a("li"),Fpe=a("strong"),znr=o("camembert"),Qnr=o(" \u2014 "),FV=a("a"),Wnr=o("TFCamembertForCausalLM"),Hnr=o(" (CamemBERT model)"),Unr=l(),$0=a("li"),Tpe=a("strong"),Jnr=o("ctrl"),Ynr=o(" \u2014 "),TV=a("a"),Knr=o("TFCTRLLMHeadModel"),Znr=o(" (CTRL model)"),esr=l(),I0=a("li"),Mpe=a("strong"),osr=o("gpt2"),rsr=o(" \u2014 "),MV=a("a"),tsr=o("TFGPT2LMHeadModel"),asr=o(" (OpenAI GPT-2 model)"),nsr=l(),q0=a("li"),Epe=a("strong"),ssr=o("gptj"),lsr=o(" \u2014 "),EV=a("a"),isr=o("TFGPTJForCausalLM"),dsr=o(" (GPT-J model)"),csr=l(),N0=a("li"),Cpe=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),CV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),usr=l(),j0=a("li"),wpe=a("strong"),psr=o("rembert"),_sr=o(" \u2014 "),wV=a("a"),vsr=o("TFRemBertForCausalLM"),bsr=o(" (RemBERT model)"),Fsr=l(),D0=a("li"),Ape=a("strong"),Tsr=o("roberta"),Msr=o(" \u2014 "),AV=a("a"),Esr=o("TFRobertaForCausalLM"),Csr=o(" (RoBERTa model)"),wsr=l(),G0=a("li"),ype=a("strong"),Asr=o("roformer"),ysr=o(" \u2014 "),yV=a("a"),Lsr=o("TFRoFormerForCausalLM"),xsr=o(" (RoFormer model)"),ksr=l(),O0=a("li"),Lpe=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),LV=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),V0=a("li"),xpe=a("strong"),Isr=o("xlm"),qsr=o(" \u2014 "),xV=a("a"),Nsr=o("TFXLMWithLMHeadModel"),jsr=o(" (XLM model)"),Dsr=l(),X0=a("li"),kpe=a("strong"),Gsr=o("xlnet"),Osr=o(" \u2014 "),kV=a("a"),Vsr=o("TFXLNetLMHeadModel"),Xsr=o(" (XLNet model)"),zsr=l(),Spe=a("p"),Qsr=o("Examples:"),Wsr=l(),f(uA.$$.fragment),HRe=l(),Mc=a("h2"),z0=a("a"),Rpe=a("span"),f(pA.$$.fragment),Hsr=l(),Bpe=a("span"),Usr=o("TFAutoModelForImageClassification"),URe=l(),Mr=a("div"),f(_A.$$.fragment),Jsr=l(),Ec=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SV=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),RV=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),vA=a("p"),tlr=o("This class cannot be instantiated directly using "),Ppe=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),pt=a("div"),f(bA.$$.fragment),llr=l(),$pe=a("p"),ilr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dlr=l(),Cc=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),flr=o("not"),mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),ulr=l(),qpe=a("p"),plr=o("Examples:"),_lr=l(),f(FA.$$.fragment),vlr=l(),_o=a("div"),f(TA.$$.fragment),blr=l(),Npe=a("p"),Flr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tlr=l(),bn=a("p"),Mlr=o("The model class to instantiate is selected based on the "),jpe=a("code"),Elr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),ylr=o("pretrained_model_name_or_path"),Llr=o(":"),xlr=l(),MA=a("ul"),Q0=a("li"),Ope=a("strong"),klr=o("convnext"),Slr=o(" \u2014 "),PV=a("a"),Rlr=o("TFConvNextForImageClassification"),Blr=o(" (ConvNext model)"),Plr=l(),W0=a("li"),Vpe=a("strong"),$lr=o("vit"),Ilr=o(" \u2014 "),$V=a("a"),qlr=o("TFViTForImageClassification"),Nlr=o(" (ViT model)"),jlr=l(),Xpe=a("p"),Dlr=o("Examples:"),Glr=l(),f(EA.$$.fragment),JRe=l(),wc=a("h2"),H0=a("a"),zpe=a("span"),f(CA.$$.fragment),Olr=l(),Qpe=a("span"),Vlr=o("TFAutoModelForMaskedLM"),YRe=l(),Er=a("div"),f(wA.$$.fragment),Xlr=l(),Ac=a("p"),zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IV=a("a"),Qlr=o("from_pretrained()"),Wlr=o(" class method or the "),qV=a("a"),Hlr=o("from_config()"),Ulr=o(` class
method.`),Jlr=l(),AA=a("p"),Ylr=o("This class cannot be instantiated directly using "),Wpe=a("code"),Klr=o("__init__()"),Zlr=o(" (throws an error)."),eir=l(),_t=a("div"),f(yA.$$.fragment),oir=l(),Hpe=a("p"),rir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tir=l(),yc=a("p"),air=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),nir=o("not"),sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),lir=o("from_pretrained()"),iir=o(" to load the model weights."),dir=l(),Jpe=a("p"),cir=o("Examples:"),fir=l(),f(LA.$$.fragment),mir=l(),vo=a("div"),f(xA.$$.fragment),gir=l(),Ype=a("p"),hir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uir=l(),Fn=a("p"),pir=o("The model class to instantiate is selected based on the "),Kpe=a("code"),_ir=o("model_type"),vir=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),bir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),J=a("ul"),U0=a("li"),o_e=a("strong"),Cir=o("albert"),wir=o(" \u2014 "),jV=a("a"),Air=o("TFAlbertForMaskedLM"),yir=o(" (ALBERT model)"),Lir=l(),J0=a("li"),r_e=a("strong"),xir=o("bert"),kir=o(" \u2014 "),DV=a("a"),Sir=o("TFBertForMaskedLM"),Rir=o(" (BERT model)"),Bir=l(),Y0=a("li"),t_e=a("strong"),Pir=o("camembert"),$ir=o(" \u2014 "),GV=a("a"),Iir=o("TFCamembertForMaskedLM"),qir=o(" (CamemBERT model)"),Nir=l(),K0=a("li"),a_e=a("strong"),jir=o("convbert"),Dir=o(" \u2014 "),OV=a("a"),Gir=o("TFConvBertForMaskedLM"),Oir=o(" (ConvBERT model)"),Vir=l(),Z0=a("li"),n_e=a("strong"),Xir=o("deberta"),zir=o(" \u2014 "),VV=a("a"),Qir=o("TFDebertaForMaskedLM"),Wir=o(" (DeBERTa model)"),Hir=l(),eT=a("li"),s_e=a("strong"),Uir=o("deberta-v2"),Jir=o(" \u2014 "),XV=a("a"),Yir=o("TFDebertaV2ForMaskedLM"),Kir=o(" (DeBERTa-v2 model)"),Zir=l(),oT=a("li"),l_e=a("strong"),edr=o("distilbert"),odr=o(" \u2014 "),zV=a("a"),rdr=o("TFDistilBertForMaskedLM"),tdr=o(" (DistilBERT model)"),adr=l(),rT=a("li"),i_e=a("strong"),ndr=o("electra"),sdr=o(" \u2014 "),QV=a("a"),ldr=o("TFElectraForMaskedLM"),idr=o(" (ELECTRA model)"),ddr=l(),tT=a("li"),d_e=a("strong"),cdr=o("flaubert"),fdr=o(" \u2014 "),WV=a("a"),mdr=o("TFFlaubertWithLMHeadModel"),gdr=o(" (FlauBERT model)"),hdr=l(),aT=a("li"),c_e=a("strong"),udr=o("funnel"),pdr=o(" \u2014 "),HV=a("a"),_dr=o("TFFunnelForMaskedLM"),vdr=o(" (Funnel Transformer model)"),bdr=l(),nT=a("li"),f_e=a("strong"),Fdr=o("layoutlm"),Tdr=o(" \u2014 "),UV=a("a"),Mdr=o("TFLayoutLMForMaskedLM"),Edr=o(" (LayoutLM model)"),Cdr=l(),sT=a("li"),m_e=a("strong"),wdr=o("longformer"),Adr=o(" \u2014 "),JV=a("a"),ydr=o("TFLongformerForMaskedLM"),Ldr=o(" (Longformer model)"),xdr=l(),lT=a("li"),g_e=a("strong"),kdr=o("mobilebert"),Sdr=o(" \u2014 "),YV=a("a"),Rdr=o("TFMobileBertForMaskedLM"),Bdr=o(" (MobileBERT model)"),Pdr=l(),iT=a("li"),h_e=a("strong"),$dr=o("mpnet"),Idr=o(" \u2014 "),KV=a("a"),qdr=o("TFMPNetForMaskedLM"),Ndr=o(" (MPNet model)"),jdr=l(),dT=a("li"),u_e=a("strong"),Ddr=o("rembert"),Gdr=o(" \u2014 "),ZV=a("a"),Odr=o("TFRemBertForMaskedLM"),Vdr=o(" (RemBERT model)"),Xdr=l(),cT=a("li"),p_e=a("strong"),zdr=o("roberta"),Qdr=o(" \u2014 "),eX=a("a"),Wdr=o("TFRobertaForMaskedLM"),Hdr=o(" (RoBERTa model)"),Udr=l(),fT=a("li"),__e=a("strong"),Jdr=o("roformer"),Ydr=o(" \u2014 "),oX=a("a"),Kdr=o("TFRoFormerForMaskedLM"),Zdr=o(" (RoFormer model)"),ecr=l(),mT=a("li"),v_e=a("strong"),ocr=o("tapas"),rcr=o(" \u2014 "),rX=a("a"),tcr=o("TFTapasForMaskedLM"),acr=o(" (TAPAS model)"),ncr=l(),gT=a("li"),b_e=a("strong"),scr=o("xlm"),lcr=o(" \u2014 "),tX=a("a"),icr=o("TFXLMWithLMHeadModel"),dcr=o(" (XLM model)"),ccr=l(),hT=a("li"),F_e=a("strong"),fcr=o("xlm-roberta"),mcr=o(" \u2014 "),aX=a("a"),gcr=o("TFXLMRobertaForMaskedLM"),hcr=o(" (XLM-RoBERTa model)"),ucr=l(),T_e=a("p"),pcr=o("Examples:"),_cr=l(),f(kA.$$.fragment),KRe=l(),Lc=a("h2"),uT=a("a"),M_e=a("span"),f(SA.$$.fragment),vcr=l(),E_e=a("span"),bcr=o("TFAutoModelForSeq2SeqLM"),ZRe=l(),Cr=a("div"),f(RA.$$.fragment),Fcr=l(),xc=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nX=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" class method or the "),sX=a("a"),Ccr=o("from_config()"),wcr=o(` class
method.`),Acr=l(),BA=a("p"),ycr=o("This class cannot be instantiated directly using "),C_e=a("code"),Lcr=o("__init__()"),xcr=o(" (throws an error)."),kcr=l(),vt=a("div"),f(PA.$$.fragment),Scr=l(),w_e=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bcr=l(),kc=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),$cr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),qcr=o("from_pretrained()"),Ncr=o(" to load the model weights."),jcr=l(),y_e=a("p"),Dcr=o("Examples:"),Gcr=l(),f($A.$$.fragment),Ocr=l(),bo=a("div"),f(IA.$$.fragment),Vcr=l(),L_e=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zcr=l(),Tn=a("p"),Qcr=o("The model class to instantiate is selected based on the "),x_e=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),_e=a("ul"),pT=a("li"),R_e=a("strong"),efr=o("bart"),ofr=o(" \u2014 "),iX=a("a"),rfr=o("TFBartForConditionalGeneration"),tfr=o(" (BART model)"),afr=l(),_T=a("li"),B_e=a("strong"),nfr=o("blenderbot"),sfr=o(" \u2014 "),dX=a("a"),lfr=o("TFBlenderbotForConditionalGeneration"),ifr=o(" (Blenderbot model)"),dfr=l(),vT=a("li"),P_e=a("strong"),cfr=o("blenderbot-small"),ffr=o(" \u2014 "),cX=a("a"),mfr=o("TFBlenderbotSmallForConditionalGeneration"),gfr=o(" (BlenderbotSmall model)"),hfr=l(),bT=a("li"),$_e=a("strong"),ufr=o("encoder-decoder"),pfr=o(" \u2014 "),fX=a("a"),_fr=o("TFEncoderDecoderModel"),vfr=o(" (Encoder decoder model)"),bfr=l(),FT=a("li"),I_e=a("strong"),Ffr=o("led"),Tfr=o(" \u2014 "),mX=a("a"),Mfr=o("TFLEDForConditionalGeneration"),Efr=o(" (LED model)"),Cfr=l(),TT=a("li"),q_e=a("strong"),wfr=o("marian"),Afr=o(" \u2014 "),gX=a("a"),yfr=o("TFMarianMTModel"),Lfr=o(" (Marian model)"),xfr=l(),MT=a("li"),N_e=a("strong"),kfr=o("mbart"),Sfr=o(" \u2014 "),hX=a("a"),Rfr=o("TFMBartForConditionalGeneration"),Bfr=o(" (mBART model)"),Pfr=l(),ET=a("li"),j_e=a("strong"),$fr=o("mt5"),Ifr=o(" \u2014 "),uX=a("a"),qfr=o("TFMT5ForConditionalGeneration"),Nfr=o(" (mT5 model)"),jfr=l(),CT=a("li"),D_e=a("strong"),Dfr=o("pegasus"),Gfr=o(" \u2014 "),pX=a("a"),Ofr=o("TFPegasusForConditionalGeneration"),Vfr=o(" (Pegasus model)"),Xfr=l(),wT=a("li"),G_e=a("strong"),zfr=o("t5"),Qfr=o(" \u2014 "),_X=a("a"),Wfr=o("TFT5ForConditionalGeneration"),Hfr=o(" (T5 model)"),Ufr=l(),O_e=a("p"),Jfr=o("Examples:"),Yfr=l(),f(qA.$$.fragment),eBe=l(),Sc=a("h2"),AT=a("a"),V_e=a("span"),f(NA.$$.fragment),Kfr=l(),X_e=a("span"),Zfr=o("TFAutoModelForSequenceClassification"),oBe=l(),wr=a("div"),f(jA.$$.fragment),emr=l(),Rc=a("p"),omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=a("a"),rmr=o("from_pretrained()"),tmr=o(" class method or the "),bX=a("a"),amr=o("from_config()"),nmr=o(` class
method.`),smr=l(),DA=a("p"),lmr=o("This class cannot be instantiated directly using "),z_e=a("code"),imr=o("__init__()"),dmr=o(" (throws an error)."),cmr=l(),bt=a("div"),f(GA.$$.fragment),fmr=l(),Q_e=a("p"),mmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gmr=l(),Bc=a("p"),hmr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),umr=o("not"),pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),_mr=o("from_pretrained()"),vmr=o(" to load the model weights."),bmr=l(),H_e=a("p"),Fmr=o("Examples:"),Tmr=l(),f(OA.$$.fragment),Mmr=l(),Fo=a("div"),f(VA.$$.fragment),Emr=l(),U_e=a("p"),Cmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wmr=l(),Mn=a("p"),Amr=o("The model class to instantiate is selected based on the "),J_e=a("code"),ymr=o("model_type"),Lmr=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),xmr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Bmr=l(),V=a("ul"),yT=a("li"),Z_e=a("strong"),Pmr=o("albert"),$mr=o(" \u2014 "),TX=a("a"),Imr=o("TFAlbertForSequenceClassification"),qmr=o(" (ALBERT model)"),Nmr=l(),LT=a("li"),eve=a("strong"),jmr=o("bert"),Dmr=o(" \u2014 "),MX=a("a"),Gmr=o("TFBertForSequenceClassification"),Omr=o(" (BERT model)"),Vmr=l(),xT=a("li"),ove=a("strong"),Xmr=o("camembert"),zmr=o(" \u2014 "),EX=a("a"),Qmr=o("TFCamembertForSequenceClassification"),Wmr=o(" (CamemBERT model)"),Hmr=l(),kT=a("li"),rve=a("strong"),Umr=o("convbert"),Jmr=o(" \u2014 "),CX=a("a"),Ymr=o("TFConvBertForSequenceClassification"),Kmr=o(" (ConvBERT model)"),Zmr=l(),ST=a("li"),tve=a("strong"),egr=o("ctrl"),ogr=o(" \u2014 "),wX=a("a"),rgr=o("TFCTRLForSequenceClassification"),tgr=o(" (CTRL model)"),agr=l(),RT=a("li"),ave=a("strong"),ngr=o("deberta"),sgr=o(" \u2014 "),AX=a("a"),lgr=o("TFDebertaForSequenceClassification"),igr=o(" (DeBERTa model)"),dgr=l(),BT=a("li"),nve=a("strong"),cgr=o("deberta-v2"),fgr=o(" \u2014 "),yX=a("a"),mgr=o("TFDebertaV2ForSequenceClassification"),ggr=o(" (DeBERTa-v2 model)"),hgr=l(),PT=a("li"),sve=a("strong"),ugr=o("distilbert"),pgr=o(" \u2014 "),LX=a("a"),_gr=o("TFDistilBertForSequenceClassification"),vgr=o(" (DistilBERT model)"),bgr=l(),$T=a("li"),lve=a("strong"),Fgr=o("electra"),Tgr=o(" \u2014 "),xX=a("a"),Mgr=o("TFElectraForSequenceClassification"),Egr=o(" (ELECTRA model)"),Cgr=l(),IT=a("li"),ive=a("strong"),wgr=o("flaubert"),Agr=o(" \u2014 "),kX=a("a"),ygr=o("TFFlaubertForSequenceClassification"),Lgr=o(" (FlauBERT model)"),xgr=l(),qT=a("li"),dve=a("strong"),kgr=o("funnel"),Sgr=o(" \u2014 "),SX=a("a"),Rgr=o("TFFunnelForSequenceClassification"),Bgr=o(" (Funnel Transformer model)"),Pgr=l(),NT=a("li"),cve=a("strong"),$gr=o("gpt2"),Igr=o(" \u2014 "),RX=a("a"),qgr=o("TFGPT2ForSequenceClassification"),Ngr=o(" (OpenAI GPT-2 model)"),jgr=l(),jT=a("li"),fve=a("strong"),Dgr=o("gptj"),Ggr=o(" \u2014 "),BX=a("a"),Ogr=o("TFGPTJForSequenceClassification"),Vgr=o(" (GPT-J model)"),Xgr=l(),DT=a("li"),mve=a("strong"),zgr=o("layoutlm"),Qgr=o(" \u2014 "),PX=a("a"),Wgr=o("TFLayoutLMForSequenceClassification"),Hgr=o(" (LayoutLM model)"),Ugr=l(),GT=a("li"),gve=a("strong"),Jgr=o("longformer"),Ygr=o(" \u2014 "),$X=a("a"),Kgr=o("TFLongformerForSequenceClassification"),Zgr=o(" (Longformer model)"),ehr=l(),OT=a("li"),hve=a("strong"),ohr=o("mobilebert"),rhr=o(" \u2014 "),IX=a("a"),thr=o("TFMobileBertForSequenceClassification"),ahr=o(" (MobileBERT model)"),nhr=l(),VT=a("li"),uve=a("strong"),shr=o("mpnet"),lhr=o(" \u2014 "),qX=a("a"),ihr=o("TFMPNetForSequenceClassification"),dhr=o(" (MPNet model)"),chr=l(),XT=a("li"),pve=a("strong"),fhr=o("openai-gpt"),mhr=o(" \u2014 "),NX=a("a"),ghr=o("TFOpenAIGPTForSequenceClassification"),hhr=o(" (OpenAI GPT model)"),uhr=l(),zT=a("li"),_ve=a("strong"),phr=o("rembert"),_hr=o(" \u2014 "),jX=a("a"),vhr=o("TFRemBertForSequenceClassification"),bhr=o(" (RemBERT model)"),Fhr=l(),QT=a("li"),vve=a("strong"),Thr=o("roberta"),Mhr=o(" \u2014 "),DX=a("a"),Ehr=o("TFRobertaForSequenceClassification"),Chr=o(" (RoBERTa model)"),whr=l(),WT=a("li"),bve=a("strong"),Ahr=o("roformer"),yhr=o(" \u2014 "),GX=a("a"),Lhr=o("TFRoFormerForSequenceClassification"),xhr=o(" (RoFormer model)"),khr=l(),HT=a("li"),Fve=a("strong"),Shr=o("tapas"),Rhr=o(" \u2014 "),OX=a("a"),Bhr=o("TFTapasForSequenceClassification"),Phr=o(" (TAPAS model)"),$hr=l(),UT=a("li"),Tve=a("strong"),Ihr=o("transfo-xl"),qhr=o(" \u2014 "),VX=a("a"),Nhr=o("TFTransfoXLForSequenceClassification"),jhr=o(" (Transformer-XL model)"),Dhr=l(),JT=a("li"),Mve=a("strong"),Ghr=o("xlm"),Ohr=o(" \u2014 "),XX=a("a"),Vhr=o("TFXLMForSequenceClassification"),Xhr=o(" (XLM model)"),zhr=l(),YT=a("li"),Eve=a("strong"),Qhr=o("xlm-roberta"),Whr=o(" \u2014 "),zX=a("a"),Hhr=o("TFXLMRobertaForSequenceClassification"),Uhr=o(" (XLM-RoBERTa model)"),Jhr=l(),KT=a("li"),Cve=a("strong"),Yhr=o("xlnet"),Khr=o(" \u2014 "),QX=a("a"),Zhr=o("TFXLNetForSequenceClassification"),eur=o(" (XLNet model)"),our=l(),wve=a("p"),rur=o("Examples:"),tur=l(),f(XA.$$.fragment),rBe=l(),Pc=a("h2"),ZT=a("a"),Ave=a("span"),f(zA.$$.fragment),aur=l(),yve=a("span"),nur=o("TFAutoModelForMultipleChoice"),tBe=l(),Ar=a("div"),f(QA.$$.fragment),sur=l(),$c=a("p"),lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=a("a"),iur=o("from_pretrained()"),dur=o(" class method or the "),HX=a("a"),cur=o("from_config()"),fur=o(` class
method.`),mur=l(),WA=a("p"),gur=o("This class cannot be instantiated directly using "),Lve=a("code"),hur=o("__init__()"),uur=o(" (throws an error)."),pur=l(),Ft=a("div"),f(HA.$$.fragment),_ur=l(),xve=a("p"),vur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bur=l(),Ic=a("p"),Fur=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Tur=o("not"),Mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Eur=o("from_pretrained()"),Cur=o(" to load the model weights."),wur=l(),Sve=a("p"),Aur=o("Examples:"),yur=l(),f(UA.$$.fragment),Lur=l(),To=a("div"),f(JA.$$.fragment),xur=l(),Rve=a("p"),kur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sur=l(),En=a("p"),Rur=o("The model class to instantiate is selected based on the "),Bve=a("code"),Bur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),$ur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(":"),jur=l(),ae=a("ul"),e8=a("li"),Ive=a("strong"),Dur=o("albert"),Gur=o(" \u2014 "),JX=a("a"),Our=o("TFAlbertForMultipleChoice"),Vur=o(" (ALBERT model)"),Xur=l(),o8=a("li"),qve=a("strong"),zur=o("bert"),Qur=o(" \u2014 "),YX=a("a"),Wur=o("TFBertForMultipleChoice"),Hur=o(" (BERT model)"),Uur=l(),r8=a("li"),Nve=a("strong"),Jur=o("camembert"),Yur=o(" \u2014 "),KX=a("a"),Kur=o("TFCamembertForMultipleChoice"),Zur=o(" (CamemBERT model)"),epr=l(),t8=a("li"),jve=a("strong"),opr=o("convbert"),rpr=o(" \u2014 "),ZX=a("a"),tpr=o("TFConvBertForMultipleChoice"),apr=o(" (ConvBERT model)"),npr=l(),a8=a("li"),Dve=a("strong"),spr=o("distilbert"),lpr=o(" \u2014 "),ez=a("a"),ipr=o("TFDistilBertForMultipleChoice"),dpr=o(" (DistilBERT model)"),cpr=l(),n8=a("li"),Gve=a("strong"),fpr=o("electra"),mpr=o(" \u2014 "),oz=a("a"),gpr=o("TFElectraForMultipleChoice"),hpr=o(" (ELECTRA model)"),upr=l(),s8=a("li"),Ove=a("strong"),ppr=o("flaubert"),_pr=o(" \u2014 "),rz=a("a"),vpr=o("TFFlaubertForMultipleChoice"),bpr=o(" (FlauBERT model)"),Fpr=l(),l8=a("li"),Vve=a("strong"),Tpr=o("funnel"),Mpr=o(" \u2014 "),tz=a("a"),Epr=o("TFFunnelForMultipleChoice"),Cpr=o(" (Funnel Transformer model)"),wpr=l(),i8=a("li"),Xve=a("strong"),Apr=o("longformer"),ypr=o(" \u2014 "),az=a("a"),Lpr=o("TFLongformerForMultipleChoice"),xpr=o(" (Longformer model)"),kpr=l(),d8=a("li"),zve=a("strong"),Spr=o("mobilebert"),Rpr=o(" \u2014 "),nz=a("a"),Bpr=o("TFMobileBertForMultipleChoice"),Ppr=o(" (MobileBERT model)"),$pr=l(),c8=a("li"),Qve=a("strong"),Ipr=o("mpnet"),qpr=o(" \u2014 "),sz=a("a"),Npr=o("TFMPNetForMultipleChoice"),jpr=o(" (MPNet model)"),Dpr=l(),f8=a("li"),Wve=a("strong"),Gpr=o("rembert"),Opr=o(" \u2014 "),lz=a("a"),Vpr=o("TFRemBertForMultipleChoice"),Xpr=o(" (RemBERT model)"),zpr=l(),m8=a("li"),Hve=a("strong"),Qpr=o("roberta"),Wpr=o(" \u2014 "),iz=a("a"),Hpr=o("TFRobertaForMultipleChoice"),Upr=o(" (RoBERTa model)"),Jpr=l(),g8=a("li"),Uve=a("strong"),Ypr=o("roformer"),Kpr=o(" \u2014 "),dz=a("a"),Zpr=o("TFRoFormerForMultipleChoice"),e_r=o(" (RoFormer model)"),o_r=l(),h8=a("li"),Jve=a("strong"),r_r=o("xlm"),t_r=o(" \u2014 "),cz=a("a"),a_r=o("TFXLMForMultipleChoice"),n_r=o(" (XLM model)"),s_r=l(),u8=a("li"),Yve=a("strong"),l_r=o("xlm-roberta"),i_r=o(" \u2014 "),fz=a("a"),d_r=o("TFXLMRobertaForMultipleChoice"),c_r=o(" (XLM-RoBERTa model)"),f_r=l(),p8=a("li"),Kve=a("strong"),m_r=o("xlnet"),g_r=o(" \u2014 "),mz=a("a"),h_r=o("TFXLNetForMultipleChoice"),u_r=o(" (XLNet model)"),p_r=l(),Zve=a("p"),__r=o("Examples:"),v_r=l(),f(YA.$$.fragment),aBe=l(),qc=a("h2"),_8=a("a"),e1e=a("span"),f(KA.$$.fragment),b_r=l(),o1e=a("span"),F_r=o("TFAutoModelForTableQuestionAnswering"),nBe=l(),yr=a("div"),f(ZA.$$.fragment),T_r=l(),Nc=a("p"),M_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=a("a"),E_r=o("from_pretrained()"),C_r=o(" class method or the "),hz=a("a"),w_r=o("from_config()"),A_r=o(` class
method.`),y_r=l(),ey=a("p"),L_r=o("This class cannot be instantiated directly using "),r1e=a("code"),x_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),Tt=a("div"),f(oy.$$.fragment),R_r=l(),t1e=a("p"),B_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P_r=l(),jc=a("p"),$_r=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),I_r=o("not"),q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),N_r=o("from_pretrained()"),j_r=o(" to load the model weights."),D_r=l(),n1e=a("p"),G_r=o("Examples:"),O_r=l(),f(ry.$$.fragment),V_r=l(),Mo=a("div"),f(ty.$$.fragment),X_r=l(),s1e=a("p"),z_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q_r=l(),Cn=a("p"),W_r=o("The model class to instantiate is selected based on the "),l1e=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),evr=l(),c1e=a("ul"),v8=a("li"),f1e=a("strong"),ovr=o("tapas"),rvr=o(" \u2014 "),pz=a("a"),tvr=o("TFTapasForQuestionAnswering"),avr=o(" (TAPAS model)"),nvr=l(),m1e=a("p"),svr=o("Examples:"),lvr=l(),f(ay.$$.fragment),sBe=l(),Dc=a("h2"),b8=a("a"),g1e=a("span"),f(ny.$$.fragment),ivr=l(),h1e=a("span"),dvr=o("TFAutoModelForTokenClassification"),lBe=l(),Lr=a("div"),f(sy.$$.fragment),cvr=l(),Gc=a("p"),fvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_z=a("a"),mvr=o("from_pretrained()"),gvr=o(" class method or the "),vz=a("a"),hvr=o("from_config()"),uvr=o(` class
method.`),pvr=l(),ly=a("p"),_vr=o("This class cannot be instantiated directly using "),u1e=a("code"),vvr=o("__init__()"),bvr=o(" (throws an error)."),Fvr=l(),Mt=a("div"),f(iy.$$.fragment),Tvr=l(),p1e=a("p"),Mvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Evr=l(),Oc=a("p"),Cvr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),wvr=o("not"),Avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),yvr=o("from_pretrained()"),Lvr=o(" to load the model weights."),xvr=l(),v1e=a("p"),kvr=o("Examples:"),Svr=l(),f(dy.$$.fragment),Rvr=l(),Eo=a("div"),f(cy.$$.fragment),Bvr=l(),b1e=a("p"),Pvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$vr=l(),wn=a("p"),Ivr=o("The model class to instantiate is selected based on the "),F1e=a("code"),qvr=o("model_type"),Nvr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),Y=a("ul"),F8=a("li"),E1e=a("strong"),Xvr=o("albert"),zvr=o(" \u2014 "),Fz=a("a"),Qvr=o("TFAlbertForTokenClassification"),Wvr=o(" (ALBERT model)"),Hvr=l(),T8=a("li"),C1e=a("strong"),Uvr=o("bert"),Jvr=o(" \u2014 "),Tz=a("a"),Yvr=o("TFBertForTokenClassification"),Kvr=o(" (BERT model)"),Zvr=l(),M8=a("li"),w1e=a("strong"),e1r=o("camembert"),o1r=o(" \u2014 "),Mz=a("a"),r1r=o("TFCamembertForTokenClassification"),t1r=o(" (CamemBERT model)"),a1r=l(),E8=a("li"),A1e=a("strong"),n1r=o("convbert"),s1r=o(" \u2014 "),Ez=a("a"),l1r=o("TFConvBertForTokenClassification"),i1r=o(" (ConvBERT model)"),d1r=l(),C8=a("li"),y1e=a("strong"),c1r=o("deberta"),f1r=o(" \u2014 "),Cz=a("a"),m1r=o("TFDebertaForTokenClassification"),g1r=o(" (DeBERTa model)"),h1r=l(),w8=a("li"),L1e=a("strong"),u1r=o("deberta-v2"),p1r=o(" \u2014 "),wz=a("a"),_1r=o("TFDebertaV2ForTokenClassification"),v1r=o(" (DeBERTa-v2 model)"),b1r=l(),A8=a("li"),x1e=a("strong"),F1r=o("distilbert"),T1r=o(" \u2014 "),Az=a("a"),M1r=o("TFDistilBertForTokenClassification"),E1r=o(" (DistilBERT model)"),C1r=l(),y8=a("li"),k1e=a("strong"),w1r=o("electra"),A1r=o(" \u2014 "),yz=a("a"),y1r=o("TFElectraForTokenClassification"),L1r=o(" (ELECTRA model)"),x1r=l(),L8=a("li"),S1e=a("strong"),k1r=o("flaubert"),S1r=o(" \u2014 "),Lz=a("a"),R1r=o("TFFlaubertForTokenClassification"),B1r=o(" (FlauBERT model)"),P1r=l(),x8=a("li"),R1e=a("strong"),$1r=o("funnel"),I1r=o(" \u2014 "),xz=a("a"),q1r=o("TFFunnelForTokenClassification"),N1r=o(" (Funnel Transformer model)"),j1r=l(),k8=a("li"),B1e=a("strong"),D1r=o("layoutlm"),G1r=o(" \u2014 "),kz=a("a"),O1r=o("TFLayoutLMForTokenClassification"),V1r=o(" (LayoutLM model)"),X1r=l(),S8=a("li"),P1e=a("strong"),z1r=o("longformer"),Q1r=o(" \u2014 "),Sz=a("a"),W1r=o("TFLongformerForTokenClassification"),H1r=o(" (Longformer model)"),U1r=l(),R8=a("li"),$1e=a("strong"),J1r=o("mobilebert"),Y1r=o(" \u2014 "),Rz=a("a"),K1r=o("TFMobileBertForTokenClassification"),Z1r=o(" (MobileBERT model)"),e4r=l(),B8=a("li"),I1e=a("strong"),o4r=o("mpnet"),r4r=o(" \u2014 "),Bz=a("a"),t4r=o("TFMPNetForTokenClassification"),a4r=o(" (MPNet model)"),n4r=l(),P8=a("li"),q1e=a("strong"),s4r=o("rembert"),l4r=o(" \u2014 "),Pz=a("a"),i4r=o("TFRemBertForTokenClassification"),d4r=o(" (RemBERT model)"),c4r=l(),$8=a("li"),N1e=a("strong"),f4r=o("roberta"),m4r=o(" \u2014 "),$z=a("a"),g4r=o("TFRobertaForTokenClassification"),h4r=o(" (RoBERTa model)"),u4r=l(),I8=a("li"),j1e=a("strong"),p4r=o("roformer"),_4r=o(" \u2014 "),Iz=a("a"),v4r=o("TFRoFormerForTokenClassification"),b4r=o(" (RoFormer model)"),F4r=l(),q8=a("li"),D1e=a("strong"),T4r=o("xlm"),M4r=o(" \u2014 "),qz=a("a"),E4r=o("TFXLMForTokenClassification"),C4r=o(" (XLM model)"),w4r=l(),N8=a("li"),G1e=a("strong"),A4r=o("xlm-roberta"),y4r=o(" \u2014 "),Nz=a("a"),L4r=o("TFXLMRobertaForTokenClassification"),x4r=o(" (XLM-RoBERTa model)"),k4r=l(),j8=a("li"),O1e=a("strong"),S4r=o("xlnet"),R4r=o(" \u2014 "),jz=a("a"),B4r=o("TFXLNetForTokenClassification"),P4r=o(" (XLNet model)"),$4r=l(),V1e=a("p"),I4r=o("Examples:"),q4r=l(),f(fy.$$.fragment),iBe=l(),Vc=a("h2"),D8=a("a"),X1e=a("span"),f(my.$$.fragment),N4r=l(),z1e=a("span"),j4r=o("TFAutoModelForQuestionAnswering"),dBe=l(),xr=a("div"),f(gy.$$.fragment),D4r=l(),Xc=a("p"),G4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dz=a("a"),O4r=o("from_pretrained()"),V4r=o(" class method or the "),Gz=a("a"),X4r=o("from_config()"),z4r=o(` class
method.`),Q4r=l(),hy=a("p"),W4r=o("This class cannot be instantiated directly using "),Q1e=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),Et=a("div"),f(uy.$$.fragment),Y4r=l(),W1e=a("p"),K4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z4r=l(),zc=a("p"),ebr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),obr=o("not"),rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),tbr=o("from_pretrained()"),abr=o(" to load the model weights."),nbr=l(),U1e=a("p"),sbr=o("Examples:"),lbr=l(),f(py.$$.fragment),ibr=l(),Co=a("div"),f(_y.$$.fragment),dbr=l(),J1e=a("p"),cbr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fbr=l(),An=a("p"),mbr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),gbr=o("model_type"),hbr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),ubr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),_br=o("pretrained_model_name_or_path"),vbr=o(":"),bbr=l(),K=a("ul"),G8=a("li"),e4e=a("strong"),Fbr=o("albert"),Tbr=o(" \u2014 "),Vz=a("a"),Mbr=o("TFAlbertForQuestionAnswering"),Ebr=o(" (ALBERT model)"),Cbr=l(),O8=a("li"),o4e=a("strong"),wbr=o("bert"),Abr=o(" \u2014 "),Xz=a("a"),ybr=o("TFBertForQuestionAnswering"),Lbr=o(" (BERT model)"),xbr=l(),V8=a("li"),r4e=a("strong"),kbr=o("camembert"),Sbr=o(" \u2014 "),zz=a("a"),Rbr=o("TFCamembertForQuestionAnswering"),Bbr=o(" (CamemBERT model)"),Pbr=l(),X8=a("li"),t4e=a("strong"),$br=o("convbert"),Ibr=o(" \u2014 "),Qz=a("a"),qbr=o("TFConvBertForQuestionAnswering"),Nbr=o(" (ConvBERT model)"),jbr=l(),z8=a("li"),a4e=a("strong"),Dbr=o("deberta"),Gbr=o(" \u2014 "),Wz=a("a"),Obr=o("TFDebertaForQuestionAnswering"),Vbr=o(" (DeBERTa model)"),Xbr=l(),Q8=a("li"),n4e=a("strong"),zbr=o("deberta-v2"),Qbr=o(" \u2014 "),Hz=a("a"),Wbr=o("TFDebertaV2ForQuestionAnswering"),Hbr=o(" (DeBERTa-v2 model)"),Ubr=l(),W8=a("li"),s4e=a("strong"),Jbr=o("distilbert"),Ybr=o(" \u2014 "),Uz=a("a"),Kbr=o("TFDistilBertForQuestionAnswering"),Zbr=o(" (DistilBERT model)"),e2r=l(),H8=a("li"),l4e=a("strong"),o2r=o("electra"),r2r=o(" \u2014 "),Jz=a("a"),t2r=o("TFElectraForQuestionAnswering"),a2r=o(" (ELECTRA model)"),n2r=l(),U8=a("li"),i4e=a("strong"),s2r=o("flaubert"),l2r=o(" \u2014 "),Yz=a("a"),i2r=o("TFFlaubertForQuestionAnsweringSimple"),d2r=o(" (FlauBERT model)"),c2r=l(),J8=a("li"),d4e=a("strong"),f2r=o("funnel"),m2r=o(" \u2014 "),Kz=a("a"),g2r=o("TFFunnelForQuestionAnswering"),h2r=o(" (Funnel Transformer model)"),u2r=l(),Y8=a("li"),c4e=a("strong"),p2r=o("gptj"),_2r=o(" \u2014 "),Zz=a("a"),v2r=o("TFGPTJForQuestionAnswering"),b2r=o(" (GPT-J model)"),F2r=l(),K8=a("li"),f4e=a("strong"),T2r=o("longformer"),M2r=o(" \u2014 "),eQ=a("a"),E2r=o("TFLongformerForQuestionAnswering"),C2r=o(" (Longformer model)"),w2r=l(),Z8=a("li"),m4e=a("strong"),A2r=o("mobilebert"),y2r=o(" \u2014 "),oQ=a("a"),L2r=o("TFMobileBertForQuestionAnswering"),x2r=o(" (MobileBERT model)"),k2r=l(),eM=a("li"),g4e=a("strong"),S2r=o("mpnet"),R2r=o(" \u2014 "),rQ=a("a"),B2r=o("TFMPNetForQuestionAnswering"),P2r=o(" (MPNet model)"),$2r=l(),oM=a("li"),h4e=a("strong"),I2r=o("rembert"),q2r=o(" \u2014 "),tQ=a("a"),N2r=o("TFRemBertForQuestionAnswering"),j2r=o(" (RemBERT model)"),D2r=l(),rM=a("li"),u4e=a("strong"),G2r=o("roberta"),O2r=o(" \u2014 "),aQ=a("a"),V2r=o("TFRobertaForQuestionAnswering"),X2r=o(" (RoBERTa model)"),z2r=l(),tM=a("li"),p4e=a("strong"),Q2r=o("roformer"),W2r=o(" \u2014 "),nQ=a("a"),H2r=o("TFRoFormerForQuestionAnswering"),U2r=o(" (RoFormer model)"),J2r=l(),aM=a("li"),_4e=a("strong"),Y2r=o("xlm"),K2r=o(" \u2014 "),sQ=a("a"),Z2r=o("TFXLMForQuestionAnsweringSimple"),eFr=o(" (XLM model)"),oFr=l(),nM=a("li"),v4e=a("strong"),rFr=o("xlm-roberta"),tFr=o(" \u2014 "),lQ=a("a"),aFr=o("TFXLMRobertaForQuestionAnswering"),nFr=o(" (XLM-RoBERTa model)"),sFr=l(),sM=a("li"),b4e=a("strong"),lFr=o("xlnet"),iFr=o(" \u2014 "),iQ=a("a"),dFr=o("TFXLNetForQuestionAnsweringSimple"),cFr=o(" (XLNet model)"),fFr=l(),F4e=a("p"),mFr=o("Examples:"),gFr=l(),f(vy.$$.fragment),cBe=l(),Qc=a("h2"),lM=a("a"),T4e=a("span"),f(by.$$.fragment),hFr=l(),M4e=a("span"),uFr=o("TFAutoModelForVision2Seq"),fBe=l(),kr=a("div"),f(Fy.$$.fragment),pFr=l(),Wc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=a("a"),vFr=o("from_pretrained()"),bFr=o(" class method or the "),cQ=a("a"),FFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),Ty=a("p"),EFr=o("This class cannot be instantiated directly using "),E4e=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Ct=a("div"),f(My.$$.fragment),yFr=l(),C4e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xFr=l(),Hc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),BFr=o("from_pretrained()"),PFr=o(" to load the model weights."),$Fr=l(),A4e=a("p"),IFr=o("Examples:"),qFr=l(),f(Ey.$$.fragment),NFr=l(),wo=a("div"),f(Cy.$$.fragment),jFr=l(),y4e=a("p"),DFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GFr=l(),yn=a("p"),OFr=o("The model class to instantiate is selected based on the "),L4e=a("code"),VFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),WFr=o("pretrained_model_name_or_path"),HFr=o(":"),UFr=l(),S4e=a("ul"),iM=a("li"),R4e=a("strong"),JFr=o("vision-encoder-decoder"),YFr=o(" \u2014 "),mQ=a("a"),KFr=o("TFVisionEncoderDecoderModel"),ZFr=o(" (Vision Encoder decoder model)"),e0r=l(),B4e=a("p"),o0r=o("Examples:"),r0r=l(),f(wy.$$.fragment),mBe=l(),Uc=a("h2"),dM=a("a"),P4e=a("span"),f(Ay.$$.fragment),t0r=l(),$4e=a("span"),a0r=o("TFAutoModelForSpeechSeq2Seq"),gBe=l(),Sr=a("div"),f(yy.$$.fragment),n0r=l(),Jc=a("p"),s0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gQ=a("a"),l0r=o("from_pretrained()"),i0r=o(" class method or the "),hQ=a("a"),d0r=o("from_config()"),c0r=o(` class
method.`),f0r=l(),Ly=a("p"),m0r=o("This class cannot be instantiated directly using "),I4e=a("code"),g0r=o("__init__()"),h0r=o(" (throws an error)."),u0r=l(),wt=a("div"),f(xy.$$.fragment),p0r=l(),q4e=a("p"),_0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v0r=l(),Yc=a("p"),b0r=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),F0r=o("not"),T0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),M0r=o("from_pretrained()"),E0r=o(" to load the model weights."),C0r=l(),j4e=a("p"),w0r=o("Examples:"),A0r=l(),f(ky.$$.fragment),y0r=l(),Ao=a("div"),f(Sy.$$.fragment),L0r=l(),D4e=a("p"),x0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k0r=l(),Ln=a("p"),S0r=o("The model class to instantiate is selected based on the "),G4e=a("code"),R0r=o("model_type"),B0r=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),P0r=o("pretrained_model_name_or_path"),$0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),I0r=o("pretrained_model_name_or_path"),q0r=o(":"),N0r=l(),X4e=a("ul"),cM=a("li"),z4e=a("strong"),j0r=o("speech_to_text"),D0r=o(" \u2014 "),pQ=a("a"),G0r=o("TFSpeech2TextForConditionalGeneration"),O0r=o(" (Speech2Text model)"),V0r=l(),Q4e=a("p"),X0r=o("Examples:"),z0r=l(),f(Ry.$$.fragment),hBe=l(),Kc=a("h2"),fM=a("a"),W4e=a("span"),f(By.$$.fragment),Q0r=l(),H4e=a("span"),W0r=o("FlaxAutoModel"),uBe=l(),Rr=a("div"),f(Py.$$.fragment),H0r=l(),Zc=a("p"),U0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=a("a"),J0r=o("from_pretrained()"),Y0r=o(" class method or the "),vQ=a("a"),K0r=o("from_config()"),Z0r=o(` class
method.`),eTr=l(),$y=a("p"),oTr=o("This class cannot be instantiated directly using "),U4e=a("code"),rTr=o("__init__()"),tTr=o(" (throws an error)."),aTr=l(),At=a("div"),f(Iy.$$.fragment),nTr=l(),J4e=a("p"),sTr=o("Instantiates one of the base model classes of the library from a configuration."),lTr=l(),ef=a("p"),iTr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),dTr=o("not"),cTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),fTr=o("from_pretrained()"),mTr=o(" to load the model weights."),gTr=l(),K4e=a("p"),hTr=o("Examples:"),uTr=l(),f(qy.$$.fragment),pTr=l(),yo=a("div"),f(Ny.$$.fragment),_Tr=l(),Z4e=a("p"),vTr=o("Instantiate one of the base model classes of the library from a pretrained model."),bTr=l(),xn=a("p"),FTr=o("The model class to instantiate is selected based on the "),ebe=a("code"),TTr=o("model_type"),MTr=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(":"),yTr=l(),z=a("ul"),mM=a("li"),tbe=a("strong"),LTr=o("albert"),xTr=o(" \u2014 "),FQ=a("a"),kTr=o("FlaxAlbertModel"),STr=o(" (ALBERT model)"),RTr=l(),gM=a("li"),abe=a("strong"),BTr=o("bart"),PTr=o(" \u2014 "),TQ=a("a"),$Tr=o("FlaxBartModel"),ITr=o(" (BART model)"),qTr=l(),hM=a("li"),nbe=a("strong"),NTr=o("beit"),jTr=o(" \u2014 "),MQ=a("a"),DTr=o("FlaxBeitModel"),GTr=o(" (BEiT model)"),OTr=l(),uM=a("li"),sbe=a("strong"),VTr=o("bert"),XTr=o(" \u2014 "),EQ=a("a"),zTr=o("FlaxBertModel"),QTr=o(" (BERT model)"),WTr=l(),pM=a("li"),lbe=a("strong"),HTr=o("big_bird"),UTr=o(" \u2014 "),CQ=a("a"),JTr=o("FlaxBigBirdModel"),YTr=o(" (BigBird model)"),KTr=l(),_M=a("li"),ibe=a("strong"),ZTr=o("blenderbot"),e8r=o(" \u2014 "),wQ=a("a"),o8r=o("FlaxBlenderbotModel"),r8r=o(" (Blenderbot model)"),t8r=l(),vM=a("li"),dbe=a("strong"),a8r=o("blenderbot-small"),n8r=o(" \u2014 "),AQ=a("a"),s8r=o("FlaxBlenderbotSmallModel"),l8r=o(" (BlenderbotSmall model)"),i8r=l(),bM=a("li"),cbe=a("strong"),d8r=o("clip"),c8r=o(" \u2014 "),yQ=a("a"),f8r=o("FlaxCLIPModel"),m8r=o(" (CLIP model)"),g8r=l(),FM=a("li"),fbe=a("strong"),h8r=o("distilbert"),u8r=o(" \u2014 "),LQ=a("a"),p8r=o("FlaxDistilBertModel"),_8r=o(" (DistilBERT model)"),v8r=l(),TM=a("li"),mbe=a("strong"),b8r=o("electra"),F8r=o(" \u2014 "),xQ=a("a"),T8r=o("FlaxElectraModel"),M8r=o(" (ELECTRA model)"),E8r=l(),MM=a("li"),gbe=a("strong"),C8r=o("gpt2"),w8r=o(" \u2014 "),kQ=a("a"),A8r=o("FlaxGPT2Model"),y8r=o(" (OpenAI GPT-2 model)"),L8r=l(),EM=a("li"),hbe=a("strong"),x8r=o("gpt_neo"),k8r=o(" \u2014 "),SQ=a("a"),S8r=o("FlaxGPTNeoModel"),R8r=o(" (GPT Neo model)"),B8r=l(),CM=a("li"),ube=a("strong"),P8r=o("gptj"),$8r=o(" \u2014 "),RQ=a("a"),I8r=o("FlaxGPTJModel"),q8r=o(" (GPT-J model)"),N8r=l(),wM=a("li"),pbe=a("strong"),j8r=o("marian"),D8r=o(" \u2014 "),BQ=a("a"),G8r=o("FlaxMarianModel"),O8r=o(" (Marian model)"),V8r=l(),AM=a("li"),_be=a("strong"),X8r=o("mbart"),z8r=o(" \u2014 "),PQ=a("a"),Q8r=o("FlaxMBartModel"),W8r=o(" (mBART model)"),H8r=l(),yM=a("li"),vbe=a("strong"),U8r=o("mt5"),J8r=o(" \u2014 "),$Q=a("a"),Y8r=o("FlaxMT5Model"),K8r=o(" (mT5 model)"),Z8r=l(),LM=a("li"),bbe=a("strong"),eMr=o("pegasus"),oMr=o(" \u2014 "),IQ=a("a"),rMr=o("FlaxPegasusModel"),tMr=o(" (Pegasus model)"),aMr=l(),xM=a("li"),Fbe=a("strong"),nMr=o("roberta"),sMr=o(" \u2014 "),qQ=a("a"),lMr=o("FlaxRobertaModel"),iMr=o(" (RoBERTa model)"),dMr=l(),kM=a("li"),Tbe=a("strong"),cMr=o("roformer"),fMr=o(" \u2014 "),NQ=a("a"),mMr=o("FlaxRoFormerModel"),gMr=o(" (RoFormer model)"),hMr=l(),SM=a("li"),Mbe=a("strong"),uMr=o("t5"),pMr=o(" \u2014 "),jQ=a("a"),_Mr=o("FlaxT5Model"),vMr=o(" (T5 model)"),bMr=l(),RM=a("li"),Ebe=a("strong"),FMr=o("vision-text-dual-encoder"),TMr=o(" \u2014 "),DQ=a("a"),MMr=o("FlaxVisionTextDualEncoderModel"),EMr=o(" (VisionTextDualEncoder model)"),CMr=l(),BM=a("li"),Cbe=a("strong"),wMr=o("vit"),AMr=o(" \u2014 "),GQ=a("a"),yMr=o("FlaxViTModel"),LMr=o(" (ViT model)"),xMr=l(),PM=a("li"),wbe=a("strong"),kMr=o("wav2vec2"),SMr=o(" \u2014 "),OQ=a("a"),RMr=o("FlaxWav2Vec2Model"),BMr=o(" (Wav2Vec2 model)"),PMr=l(),$M=a("li"),Abe=a("strong"),$Mr=o("xglm"),IMr=o(" \u2014 "),VQ=a("a"),qMr=o("FlaxXGLMModel"),NMr=o(" (XGLM model)"),jMr=l(),IM=a("li"),ybe=a("strong"),DMr=o("xlm-roberta"),GMr=o(" \u2014 "),XQ=a("a"),OMr=o("FlaxXLMRobertaModel"),VMr=o(" (XLM-RoBERTa model)"),XMr=l(),Lbe=a("p"),zMr=o("Examples:"),QMr=l(),f(jy.$$.fragment),pBe=l(),of=a("h2"),qM=a("a"),xbe=a("span"),f(Dy.$$.fragment),WMr=l(),kbe=a("span"),HMr=o("FlaxAutoModelForCausalLM"),_Be=l(),Br=a("div"),f(Gy.$$.fragment),UMr=l(),rf=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=a("a"),YMr=o("from_pretrained()"),KMr=o(" class method or the "),QQ=a("a"),ZMr=o("from_config()"),eEr=o(` class
method.`),oEr=l(),Oy=a("p"),rEr=o("This class cannot be instantiated directly using "),Sbe=a("code"),tEr=o("__init__()"),aEr=o(" (throws an error)."),nEr=l(),yt=a("div"),f(Vy.$$.fragment),sEr=l(),Rbe=a("p"),lEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iEr=l(),tf=a("p"),dEr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),cEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),mEr=o("from_pretrained()"),gEr=o(" to load the model weights."),hEr=l(),Pbe=a("p"),uEr=o("Examples:"),pEr=l(),f(Xy.$$.fragment),_Er=l(),Lo=a("div"),f(zy.$$.fragment),vEr=l(),$be=a("p"),bEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FEr=l(),kn=a("p"),TEr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),MEr=o("model_type"),EEr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),CEr=o("pretrained_model_name_or_path"),wEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),AEr=o("pretrained_model_name_or_path"),yEr=o(":"),LEr=l(),ca=a("ul"),NM=a("li"),jbe=a("strong"),xEr=o("bart"),kEr=o(" \u2014 "),HQ=a("a"),SEr=o("FlaxBartForCausalLM"),REr=o(" (BART model)"),BEr=l(),jM=a("li"),Dbe=a("strong"),PEr=o("gpt2"),$Er=o(" \u2014 "),UQ=a("a"),IEr=o("FlaxGPT2LMHeadModel"),qEr=o(" (OpenAI GPT-2 model)"),NEr=l(),DM=a("li"),Gbe=a("strong"),jEr=o("gpt_neo"),DEr=o(" \u2014 "),JQ=a("a"),GEr=o("FlaxGPTNeoForCausalLM"),OEr=o(" (GPT Neo model)"),VEr=l(),GM=a("li"),Obe=a("strong"),XEr=o("gptj"),zEr=o(" \u2014 "),YQ=a("a"),QEr=o("FlaxGPTJForCausalLM"),WEr=o(" (GPT-J model)"),HEr=l(),OM=a("li"),Vbe=a("strong"),UEr=o("xglm"),JEr=o(" \u2014 "),KQ=a("a"),YEr=o("FlaxXGLMForCausalLM"),KEr=o(" (XGLM model)"),ZEr=l(),Xbe=a("p"),e5r=o("Examples:"),o5r=l(),f(Qy.$$.fragment),vBe=l(),af=a("h2"),VM=a("a"),zbe=a("span"),f(Wy.$$.fragment),r5r=l(),Qbe=a("span"),t5r=o("FlaxAutoModelForPreTraining"),bBe=l(),Pr=a("div"),f(Hy.$$.fragment),a5r=l(),nf=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),eW=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),Uy=a("p"),f5r=o("This class cannot be instantiated directly using "),Wbe=a("code"),m5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),Lt=a("div"),f(Jy.$$.fragment),u5r=l(),Hbe=a("p"),p5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_5r=l(),sf=a("p"),v5r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),b5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),Jbe=a("p"),C5r=o("Examples:"),w5r=l(),f(Yy.$$.fragment),A5r=l(),xo=a("div"),f(Ky.$$.fragment),y5r=l(),Ybe=a("p"),L5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x5r=l(),Sn=a("p"),k5r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),S5r=o("model_type"),R5r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),B5r=o("pretrained_model_name_or_path"),P5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),$5r=o("pretrained_model_name_or_path"),I5r=o(":"),q5r=l(),fe=a("ul"),XM=a("li"),o2e=a("strong"),N5r=o("albert"),j5r=o(" \u2014 "),rW=a("a"),D5r=o("FlaxAlbertForPreTraining"),G5r=o(" (ALBERT model)"),O5r=l(),zM=a("li"),r2e=a("strong"),V5r=o("bart"),X5r=o(" \u2014 "),tW=a("a"),z5r=o("FlaxBartForConditionalGeneration"),Q5r=o(" (BART model)"),W5r=l(),QM=a("li"),t2e=a("strong"),H5r=o("bert"),U5r=o(" \u2014 "),aW=a("a"),J5r=o("FlaxBertForPreTraining"),Y5r=o(" (BERT model)"),K5r=l(),WM=a("li"),a2e=a("strong"),Z5r=o("big_bird"),e3r=o(" \u2014 "),nW=a("a"),o3r=o("FlaxBigBirdForPreTraining"),r3r=o(" (BigBird model)"),t3r=l(),HM=a("li"),n2e=a("strong"),a3r=o("electra"),n3r=o(" \u2014 "),sW=a("a"),s3r=o("FlaxElectraForPreTraining"),l3r=o(" (ELECTRA model)"),i3r=l(),UM=a("li"),s2e=a("strong"),d3r=o("mbart"),c3r=o(" \u2014 "),lW=a("a"),f3r=o("FlaxMBartForConditionalGeneration"),m3r=o(" (mBART model)"),g3r=l(),JM=a("li"),l2e=a("strong"),h3r=o("mt5"),u3r=o(" \u2014 "),iW=a("a"),p3r=o("FlaxMT5ForConditionalGeneration"),_3r=o(" (mT5 model)"),v3r=l(),YM=a("li"),i2e=a("strong"),b3r=o("roberta"),F3r=o(" \u2014 "),dW=a("a"),T3r=o("FlaxRobertaForMaskedLM"),M3r=o(" (RoBERTa model)"),E3r=l(),KM=a("li"),d2e=a("strong"),C3r=o("roformer"),w3r=o(" \u2014 "),cW=a("a"),A3r=o("FlaxRoFormerForMaskedLM"),y3r=o(" (RoFormer model)"),L3r=l(),ZM=a("li"),c2e=a("strong"),x3r=o("t5"),k3r=o(" \u2014 "),fW=a("a"),S3r=o("FlaxT5ForConditionalGeneration"),R3r=o(" (T5 model)"),B3r=l(),eE=a("li"),f2e=a("strong"),P3r=o("wav2vec2"),$3r=o(" \u2014 "),mW=a("a"),I3r=o("FlaxWav2Vec2ForPreTraining"),q3r=o(" (Wav2Vec2 model)"),N3r=l(),oE=a("li"),m2e=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),gW=a("a"),G3r=o("FlaxXLMRobertaForMaskedLM"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),g2e=a("p"),X3r=o("Examples:"),z3r=l(),f(Zy.$$.fragment),FBe=l(),lf=a("h2"),rE=a("a"),h2e=a("span"),f(eL.$$.fragment),Q3r=l(),u2e=a("span"),W3r=o("FlaxAutoModelForMaskedLM"),TBe=l(),$r=a("div"),f(oL.$$.fragment),H3r=l(),df=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hW=a("a"),J3r=o("from_pretrained()"),Y3r=o(" class method or the "),uW=a("a"),K3r=o("from_config()"),Z3r=o(` class
method.`),eCr=l(),rL=a("p"),oCr=o("This class cannot be instantiated directly using "),p2e=a("code"),rCr=o("__init__()"),tCr=o(" (throws an error)."),aCr=l(),xt=a("div"),f(tL.$$.fragment),nCr=l(),_2e=a("p"),sCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lCr=l(),cf=a("p"),iCr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),dCr=o("not"),cCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),fCr=o("from_pretrained()"),mCr=o(" to load the model weights."),gCr=l(),b2e=a("p"),hCr=o("Examples:"),uCr=l(),f(aL.$$.fragment),pCr=l(),ko=a("div"),f(nL.$$.fragment),_Cr=l(),F2e=a("p"),vCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bCr=l(),Rn=a("p"),FCr=o("The model class to instantiate is selected based on the "),T2e=a("code"),TCr=o("model_type"),MCr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),ECr=o("pretrained_model_name_or_path"),CCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(":"),yCr=l(),ve=a("ul"),tE=a("li"),C2e=a("strong"),LCr=o("albert"),xCr=o(" \u2014 "),_W=a("a"),kCr=o("FlaxAlbertForMaskedLM"),SCr=o(" (ALBERT model)"),RCr=l(),aE=a("li"),w2e=a("strong"),BCr=o("bart"),PCr=o(" \u2014 "),vW=a("a"),$Cr=o("FlaxBartForConditionalGeneration"),ICr=o(" (BART model)"),qCr=l(),nE=a("li"),A2e=a("strong"),NCr=o("bert"),jCr=o(" \u2014 "),bW=a("a"),DCr=o("FlaxBertForMaskedLM"),GCr=o(" (BERT model)"),OCr=l(),sE=a("li"),y2e=a("strong"),VCr=o("big_bird"),XCr=o(" \u2014 "),FW=a("a"),zCr=o("FlaxBigBirdForMaskedLM"),QCr=o(" (BigBird model)"),WCr=l(),lE=a("li"),L2e=a("strong"),HCr=o("distilbert"),UCr=o(" \u2014 "),TW=a("a"),JCr=o("FlaxDistilBertForMaskedLM"),YCr=o(" (DistilBERT model)"),KCr=l(),iE=a("li"),x2e=a("strong"),ZCr=o("electra"),ewr=o(" \u2014 "),MW=a("a"),owr=o("FlaxElectraForMaskedLM"),rwr=o(" (ELECTRA model)"),twr=l(),dE=a("li"),k2e=a("strong"),awr=o("mbart"),nwr=o(" \u2014 "),EW=a("a"),swr=o("FlaxMBartForConditionalGeneration"),lwr=o(" (mBART model)"),iwr=l(),cE=a("li"),S2e=a("strong"),dwr=o("roberta"),cwr=o(" \u2014 "),CW=a("a"),fwr=o("FlaxRobertaForMaskedLM"),mwr=o(" (RoBERTa model)"),gwr=l(),fE=a("li"),R2e=a("strong"),hwr=o("roformer"),uwr=o(" \u2014 "),wW=a("a"),pwr=o("FlaxRoFormerForMaskedLM"),_wr=o(" (RoFormer model)"),vwr=l(),mE=a("li"),B2e=a("strong"),bwr=o("xlm-roberta"),Fwr=o(" \u2014 "),AW=a("a"),Twr=o("FlaxXLMRobertaForMaskedLM"),Mwr=o(" (XLM-RoBERTa model)"),Ewr=l(),P2e=a("p"),Cwr=o("Examples:"),wwr=l(),f(sL.$$.fragment),MBe=l(),ff=a("h2"),gE=a("a"),$2e=a("span"),f(lL.$$.fragment),Awr=l(),I2e=a("span"),ywr=o("FlaxAutoModelForSeq2SeqLM"),EBe=l(),Ir=a("div"),f(iL.$$.fragment),Lwr=l(),mf=a("p"),xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),LW=a("a"),Rwr=o("from_config()"),Bwr=o(` class
method.`),Pwr=l(),dL=a("p"),$wr=o("This class cannot be instantiated directly using "),q2e=a("code"),Iwr=o("__init__()"),qwr=o(" (throws an error)."),Nwr=l(),kt=a("div"),f(cL.$$.fragment),jwr=l(),N2e=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gwr=l(),gf=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Vwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),zwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Wwr=l(),D2e=a("p"),Hwr=o("Examples:"),Uwr=l(),f(fL.$$.fragment),Jwr=l(),So=a("div"),f(mL.$$.fragment),Ywr=l(),G2e=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zwr=l(),Bn=a("p"),e6r=o("The model class to instantiate is selected based on the "),O2e=a("code"),o6r=o("model_type"),r6r=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(":"),l6r=l(),Ee=a("ul"),hE=a("li"),z2e=a("strong"),i6r=o("bart"),d6r=o(" \u2014 "),kW=a("a"),c6r=o("FlaxBartForConditionalGeneration"),f6r=o(" (BART model)"),m6r=l(),uE=a("li"),Q2e=a("strong"),g6r=o("blenderbot"),h6r=o(" \u2014 "),SW=a("a"),u6r=o("FlaxBlenderbotForConditionalGeneration"),p6r=o(" (Blenderbot model)"),_6r=l(),pE=a("li"),W2e=a("strong"),v6r=o("blenderbot-small"),b6r=o(" \u2014 "),RW=a("a"),F6r=o("FlaxBlenderbotSmallForConditionalGeneration"),T6r=o(" (BlenderbotSmall model)"),M6r=l(),_E=a("li"),H2e=a("strong"),E6r=o("encoder-decoder"),C6r=o(" \u2014 "),BW=a("a"),w6r=o("FlaxEncoderDecoderModel"),A6r=o(" (Encoder decoder model)"),y6r=l(),vE=a("li"),U2e=a("strong"),L6r=o("marian"),x6r=o(" \u2014 "),PW=a("a"),k6r=o("FlaxMarianMTModel"),S6r=o(" (Marian model)"),R6r=l(),bE=a("li"),J2e=a("strong"),B6r=o("mbart"),P6r=o(" \u2014 "),$W=a("a"),$6r=o("FlaxMBartForConditionalGeneration"),I6r=o(" (mBART model)"),q6r=l(),FE=a("li"),Y2e=a("strong"),N6r=o("mt5"),j6r=o(" \u2014 "),IW=a("a"),D6r=o("FlaxMT5ForConditionalGeneration"),G6r=o(" (mT5 model)"),O6r=l(),TE=a("li"),K2e=a("strong"),V6r=o("pegasus"),X6r=o(" \u2014 "),qW=a("a"),z6r=o("FlaxPegasusForConditionalGeneration"),Q6r=o(" (Pegasus model)"),W6r=l(),ME=a("li"),Z2e=a("strong"),H6r=o("t5"),U6r=o(" \u2014 "),NW=a("a"),J6r=o("FlaxT5ForConditionalGeneration"),Y6r=o(" (T5 model)"),K6r=l(),eFe=a("p"),Z6r=o("Examples:"),eAr=l(),f(gL.$$.fragment),CBe=l(),hf=a("h2"),EE=a("a"),oFe=a("span"),f(hL.$$.fragment),oAr=l(),rFe=a("span"),rAr=o("FlaxAutoModelForSequenceClassification"),wBe=l(),qr=a("div"),f(uL.$$.fragment),tAr=l(),uf=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=a("a"),nAr=o("from_pretrained()"),sAr=o(" class method or the "),DW=a("a"),lAr=o("from_config()"),iAr=o(` class
method.`),dAr=l(),pL=a("p"),cAr=o("This class cannot be instantiated directly using "),tFe=a("code"),fAr=o("__init__()"),mAr=o(" (throws an error)."),gAr=l(),St=a("div"),f(_L.$$.fragment),hAr=l(),aFe=a("p"),uAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pAr=l(),pf=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),vAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),FAr=o("from_pretrained()"),TAr=o(" to load the model weights."),MAr=l(),sFe=a("p"),EAr=o("Examples:"),CAr=l(),f(vL.$$.fragment),wAr=l(),Ro=a("div"),f(bL.$$.fragment),AAr=l(),lFe=a("p"),yAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LAr=l(),Pn=a("p"),xAr=o("The model class to instantiate is selected based on the "),iFe=a("code"),kAr=o("model_type"),SAr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),RAr=o("pretrained_model_name_or_path"),BAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),PAr=o("pretrained_model_name_or_path"),$Ar=o(":"),IAr=l(),be=a("ul"),CE=a("li"),fFe=a("strong"),qAr=o("albert"),NAr=o(" \u2014 "),OW=a("a"),jAr=o("FlaxAlbertForSequenceClassification"),DAr=o(" (ALBERT model)"),GAr=l(),wE=a("li"),mFe=a("strong"),OAr=o("bart"),VAr=o(" \u2014 "),VW=a("a"),XAr=o("FlaxBartForSequenceClassification"),zAr=o(" (BART model)"),QAr=l(),AE=a("li"),gFe=a("strong"),WAr=o("bert"),HAr=o(" \u2014 "),XW=a("a"),UAr=o("FlaxBertForSequenceClassification"),JAr=o(" (BERT model)"),YAr=l(),yE=a("li"),hFe=a("strong"),KAr=o("big_bird"),ZAr=o(" \u2014 "),zW=a("a"),eyr=o("FlaxBigBirdForSequenceClassification"),oyr=o(" (BigBird model)"),ryr=l(),LE=a("li"),uFe=a("strong"),tyr=o("distilbert"),ayr=o(" \u2014 "),QW=a("a"),nyr=o("FlaxDistilBertForSequenceClassification"),syr=o(" (DistilBERT model)"),lyr=l(),xE=a("li"),pFe=a("strong"),iyr=o("electra"),dyr=o(" \u2014 "),WW=a("a"),cyr=o("FlaxElectraForSequenceClassification"),fyr=o(" (ELECTRA model)"),myr=l(),kE=a("li"),_Fe=a("strong"),gyr=o("mbart"),hyr=o(" \u2014 "),HW=a("a"),uyr=o("FlaxMBartForSequenceClassification"),pyr=o(" (mBART model)"),_yr=l(),SE=a("li"),vFe=a("strong"),vyr=o("roberta"),byr=o(" \u2014 "),UW=a("a"),Fyr=o("FlaxRobertaForSequenceClassification"),Tyr=o(" (RoBERTa model)"),Myr=l(),RE=a("li"),bFe=a("strong"),Eyr=o("roformer"),Cyr=o(" \u2014 "),JW=a("a"),wyr=o("FlaxRoFormerForSequenceClassification"),Ayr=o(" (RoFormer model)"),yyr=l(),BE=a("li"),FFe=a("strong"),Lyr=o("xlm-roberta"),xyr=o(" \u2014 "),YW=a("a"),kyr=o("FlaxXLMRobertaForSequenceClassification"),Syr=o(" (XLM-RoBERTa model)"),Ryr=l(),TFe=a("p"),Byr=o("Examples:"),Pyr=l(),f(FL.$$.fragment),ABe=l(),_f=a("h2"),PE=a("a"),MFe=a("span"),f(TL.$$.fragment),$yr=l(),EFe=a("span"),Iyr=o("FlaxAutoModelForQuestionAnswering"),yBe=l(),Nr=a("div"),f(ML.$$.fragment),qyr=l(),vf=a("p"),Nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),ZW=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),EL=a("p"),Xyr=o("This class cannot be instantiated directly using "),CFe=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),Rt=a("div"),f(CL.$$.fragment),Hyr=l(),wFe=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jyr=l(),bf=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),eLr=o("from_pretrained()"),oLr=o(" to load the model weights."),rLr=l(),yFe=a("p"),tLr=o("Examples:"),aLr=l(),f(wL.$$.fragment),nLr=l(),Bo=a("div"),f(AL.$$.fragment),sLr=l(),LFe=a("p"),lLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iLr=l(),$n=a("p"),dLr=o("The model class to instantiate is selected based on the "),xFe=a("code"),cLr=o("model_type"),fLr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),mLr=o("pretrained_model_name_or_path"),gLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),hLr=o("pretrained_model_name_or_path"),uLr=o(":"),pLr=l(),Fe=a("ul"),$E=a("li"),RFe=a("strong"),_Lr=o("albert"),vLr=o(" \u2014 "),oH=a("a"),bLr=o("FlaxAlbertForQuestionAnswering"),FLr=o(" (ALBERT model)"),TLr=l(),IE=a("li"),BFe=a("strong"),MLr=o("bart"),ELr=o(" \u2014 "),rH=a("a"),CLr=o("FlaxBartForQuestionAnswering"),wLr=o(" (BART model)"),ALr=l(),qE=a("li"),PFe=a("strong"),yLr=o("bert"),LLr=o(" \u2014 "),tH=a("a"),xLr=o("FlaxBertForQuestionAnswering"),kLr=o(" (BERT model)"),SLr=l(),NE=a("li"),$Fe=a("strong"),RLr=o("big_bird"),BLr=o(" \u2014 "),aH=a("a"),PLr=o("FlaxBigBirdForQuestionAnswering"),$Lr=o(" (BigBird model)"),ILr=l(),jE=a("li"),IFe=a("strong"),qLr=o("distilbert"),NLr=o(" \u2014 "),nH=a("a"),jLr=o("FlaxDistilBertForQuestionAnswering"),DLr=o(" (DistilBERT model)"),GLr=l(),DE=a("li"),qFe=a("strong"),OLr=o("electra"),VLr=o(" \u2014 "),sH=a("a"),XLr=o("FlaxElectraForQuestionAnswering"),zLr=o(" (ELECTRA model)"),QLr=l(),GE=a("li"),NFe=a("strong"),WLr=o("mbart"),HLr=o(" \u2014 "),lH=a("a"),ULr=o("FlaxMBartForQuestionAnswering"),JLr=o(" (mBART model)"),YLr=l(),OE=a("li"),jFe=a("strong"),KLr=o("roberta"),ZLr=o(" \u2014 "),iH=a("a"),e7r=o("FlaxRobertaForQuestionAnswering"),o7r=o(" (RoBERTa model)"),r7r=l(),VE=a("li"),DFe=a("strong"),t7r=o("roformer"),a7r=o(" \u2014 "),dH=a("a"),n7r=o("FlaxRoFormerForQuestionAnswering"),s7r=o(" (RoFormer model)"),l7r=l(),XE=a("li"),GFe=a("strong"),i7r=o("xlm-roberta"),d7r=o(" \u2014 "),cH=a("a"),c7r=o("FlaxXLMRobertaForQuestionAnswering"),f7r=o(" (XLM-RoBERTa model)"),m7r=l(),OFe=a("p"),g7r=o("Examples:"),h7r=l(),f(yL.$$.fragment),LBe=l(),Ff=a("h2"),zE=a("a"),VFe=a("span"),f(LL.$$.fragment),u7r=l(),XFe=a("span"),p7r=o("FlaxAutoModelForTokenClassification"),xBe=l(),jr=a("div"),f(xL.$$.fragment),_7r=l(),Tf=a("p"),v7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=a("a"),b7r=o("from_pretrained()"),F7r=o(" class method or the "),mH=a("a"),T7r=o("from_config()"),M7r=o(` class
method.`),E7r=l(),kL=a("p"),C7r=o("This class cannot be instantiated directly using "),zFe=a("code"),w7r=o("__init__()"),A7r=o(" (throws an error)."),y7r=l(),Bt=a("div"),f(SL.$$.fragment),L7r=l(),QFe=a("p"),x7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k7r=l(),Mf=a("p"),S7r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),R7r=o("not"),B7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),P7r=o("from_pretrained()"),$7r=o(" to load the model weights."),I7r=l(),HFe=a("p"),q7r=o("Examples:"),N7r=l(),f(RL.$$.fragment),j7r=l(),Po=a("div"),f(BL.$$.fragment),D7r=l(),UFe=a("p"),G7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O7r=l(),In=a("p"),V7r=o("The model class to instantiate is selected based on the "),JFe=a("code"),X7r=o("model_type"),z7r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),Q7r=o("pretrained_model_name_or_path"),W7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(":"),J7r=l(),Be=a("ul"),QE=a("li"),ZFe=a("strong"),Y7r=o("albert"),K7r=o(" \u2014 "),hH=a("a"),Z7r=o("FlaxAlbertForTokenClassification"),exr=o(" (ALBERT model)"),oxr=l(),WE=a("li"),e0e=a("strong"),rxr=o("bert"),txr=o(" \u2014 "),uH=a("a"),axr=o("FlaxBertForTokenClassification"),nxr=o(" (BERT model)"),sxr=l(),HE=a("li"),o0e=a("strong"),lxr=o("big_bird"),ixr=o(" \u2014 "),pH=a("a"),dxr=o("FlaxBigBirdForTokenClassification"),cxr=o(" (BigBird model)"),fxr=l(),UE=a("li"),r0e=a("strong"),mxr=o("distilbert"),gxr=o(" \u2014 "),_H=a("a"),hxr=o("FlaxDistilBertForTokenClassification"),uxr=o(" (DistilBERT model)"),pxr=l(),JE=a("li"),t0e=a("strong"),_xr=o("electra"),vxr=o(" \u2014 "),vH=a("a"),bxr=o("FlaxElectraForTokenClassification"),Fxr=o(" (ELECTRA model)"),Txr=l(),YE=a("li"),a0e=a("strong"),Mxr=o("roberta"),Exr=o(" \u2014 "),bH=a("a"),Cxr=o("FlaxRobertaForTokenClassification"),wxr=o(" (RoBERTa model)"),Axr=l(),KE=a("li"),n0e=a("strong"),yxr=o("roformer"),Lxr=o(" \u2014 "),FH=a("a"),xxr=o("FlaxRoFormerForTokenClassification"),kxr=o(" (RoFormer model)"),Sxr=l(),ZE=a("li"),s0e=a("strong"),Rxr=o("xlm-roberta"),Bxr=o(" \u2014 "),TH=a("a"),Pxr=o("FlaxXLMRobertaForTokenClassification"),$xr=o(" (XLM-RoBERTa model)"),Ixr=l(),l0e=a("p"),qxr=o("Examples:"),Nxr=l(),f(PL.$$.fragment),kBe=l(),Ef=a("h2"),e5=a("a"),i0e=a("span"),f($L.$$.fragment),jxr=l(),d0e=a("span"),Dxr=o("FlaxAutoModelForMultipleChoice"),SBe=l(),Dr=a("div"),f(IL.$$.fragment),Gxr=l(),Cf=a("p"),Oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=a("a"),Vxr=o("from_pretrained()"),Xxr=o(" class method or the "),EH=a("a"),zxr=o("from_config()"),Qxr=o(` class
method.`),Wxr=l(),qL=a("p"),Hxr=o("This class cannot be instantiated directly using "),c0e=a("code"),Uxr=o("__init__()"),Jxr=o(" (throws an error)."),Yxr=l(),Pt=a("div"),f(NL.$$.fragment),Kxr=l(),f0e=a("p"),Zxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e9r=l(),wf=a("p"),o9r=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),r9r=o("not"),t9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),a9r=o("from_pretrained()"),n9r=o(" to load the model weights."),s9r=l(),g0e=a("p"),l9r=o("Examples:"),i9r=l(),f(jL.$$.fragment),d9r=l(),$o=a("div"),f(DL.$$.fragment),c9r=l(),h0e=a("p"),f9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),m9r=l(),qn=a("p"),g9r=o("The model class to instantiate is selected based on the "),u0e=a("code"),h9r=o("model_type"),u9r=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),p9r=o("pretrained_model_name_or_path"),_9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),v9r=o("pretrained_model_name_or_path"),b9r=o(":"),F9r=l(),Pe=a("ul"),o5=a("li"),v0e=a("strong"),T9r=o("albert"),M9r=o(" \u2014 "),wH=a("a"),E9r=o("FlaxAlbertForMultipleChoice"),C9r=o(" (ALBERT model)"),w9r=l(),r5=a("li"),b0e=a("strong"),A9r=o("bert"),y9r=o(" \u2014 "),AH=a("a"),L9r=o("FlaxBertForMultipleChoice"),x9r=o(" (BERT model)"),k9r=l(),t5=a("li"),F0e=a("strong"),S9r=o("big_bird"),R9r=o(" \u2014 "),yH=a("a"),B9r=o("FlaxBigBirdForMultipleChoice"),P9r=o(" (BigBird model)"),$9r=l(),a5=a("li"),T0e=a("strong"),I9r=o("distilbert"),q9r=o(" \u2014 "),LH=a("a"),N9r=o("FlaxDistilBertForMultipleChoice"),j9r=o(" (DistilBERT model)"),D9r=l(),n5=a("li"),M0e=a("strong"),G9r=o("electra"),O9r=o(" \u2014 "),xH=a("a"),V9r=o("FlaxElectraForMultipleChoice"),X9r=o(" (ELECTRA model)"),z9r=l(),s5=a("li"),E0e=a("strong"),Q9r=o("roberta"),W9r=o(" \u2014 "),kH=a("a"),H9r=o("FlaxRobertaForMultipleChoice"),U9r=o(" (RoBERTa model)"),J9r=l(),l5=a("li"),C0e=a("strong"),Y9r=o("roformer"),K9r=o(" \u2014 "),SH=a("a"),Z9r=o("FlaxRoFormerForMultipleChoice"),ekr=o(" (RoFormer model)"),okr=l(),i5=a("li"),w0e=a("strong"),rkr=o("xlm-roberta"),tkr=o(" \u2014 "),RH=a("a"),akr=o("FlaxXLMRobertaForMultipleChoice"),nkr=o(" (XLM-RoBERTa model)"),skr=l(),A0e=a("p"),lkr=o("Examples:"),ikr=l(),f(GL.$$.fragment),RBe=l(),Af=a("h2"),d5=a("a"),y0e=a("span"),f(OL.$$.fragment),dkr=l(),L0e=a("span"),ckr=o("FlaxAutoModelForNextSentencePrediction"),BBe=l(),Gr=a("div"),f(VL.$$.fragment),fkr=l(),yf=a("p"),mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BH=a("a"),gkr=o("from_pretrained()"),hkr=o(" class method or the "),PH=a("a"),ukr=o("from_config()"),pkr=o(` class
method.`),_kr=l(),XL=a("p"),vkr=o("This class cannot be instantiated directly using "),x0e=a("code"),bkr=o("__init__()"),Fkr=o(" (throws an error)."),Tkr=l(),$t=a("div"),f(zL.$$.fragment),Mkr=l(),k0e=a("p"),Ekr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ckr=l(),Lf=a("p"),wkr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),Akr=o("not"),ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Lkr=o("from_pretrained()"),xkr=o(" to load the model weights."),kkr=l(),R0e=a("p"),Skr=o("Examples:"),Rkr=l(),f(QL.$$.fragment),Bkr=l(),Io=a("div"),f(WL.$$.fragment),Pkr=l(),B0e=a("p"),$kr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ikr=l(),Nn=a("p"),qkr=o("The model class to instantiate is selected based on the "),P0e=a("code"),Nkr=o("model_type"),jkr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),Dkr=o("pretrained_model_name_or_path"),Gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),Okr=o("pretrained_model_name_or_path"),Vkr=o(":"),Xkr=l(),q0e=a("ul"),c5=a("li"),N0e=a("strong"),zkr=o("bert"),Qkr=o(" \u2014 "),IH=a("a"),Wkr=o("FlaxBertForNextSentencePrediction"),Hkr=o(" (BERT model)"),Ukr=l(),j0e=a("p"),Jkr=o("Examples:"),Ykr=l(),f(HL.$$.fragment),PBe=l(),xf=a("h2"),f5=a("a"),D0e=a("span"),f(UL.$$.fragment),Kkr=l(),G0e=a("span"),Zkr=o("FlaxAutoModelForImageClassification"),$Be=l(),Or=a("div"),f(JL.$$.fragment),eSr=l(),kf=a("p"),oSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=a("a"),rSr=o("from_pretrained()"),tSr=o(" class method or the "),NH=a("a"),aSr=o("from_config()"),nSr=o(` class
method.`),sSr=l(),YL=a("p"),lSr=o("This class cannot be instantiated directly using "),O0e=a("code"),iSr=o("__init__()"),dSr=o(" (throws an error)."),cSr=l(),It=a("div"),f(KL.$$.fragment),fSr=l(),V0e=a("p"),mSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gSr=l(),Sf=a("p"),hSr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),uSr=o("not"),pSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),_Sr=o("from_pretrained()"),vSr=o(" to load the model weights."),bSr=l(),z0e=a("p"),FSr=o("Examples:"),TSr=l(),f(ZL.$$.fragment),MSr=l(),qo=a("div"),f(e7.$$.fragment),ESr=l(),Q0e=a("p"),CSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wSr=l(),jn=a("p"),ASr=o("The model class to instantiate is selected based on the "),W0e=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),xSr=o("pretrained_model_name_or_path"),kSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(":"),BSr=l(),o7=a("ul"),m5=a("li"),J0e=a("strong"),PSr=o("beit"),$Sr=o(" \u2014 "),DH=a("a"),ISr=o("FlaxBeitForImageClassification"),qSr=o(" (BEiT model)"),NSr=l(),g5=a("li"),Y0e=a("strong"),jSr=o("vit"),DSr=o(" \u2014 "),GH=a("a"),GSr=o("FlaxViTForImageClassification"),OSr=o(" (ViT model)"),VSr=l(),K0e=a("p"),XSr=o("Examples:"),zSr=l(),f(r7.$$.fragment),IBe=l(),Rf=a("h2"),h5=a("a"),Z0e=a("span"),f(t7.$$.fragment),QSr=l(),eTe=a("span"),WSr=o("FlaxAutoModelForVision2Seq"),qBe=l(),Vr=a("div"),f(a7.$$.fragment),HSr=l(),Bf=a("p"),USr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=a("a"),JSr=o("from_pretrained()"),YSr=o(" class method or the "),VH=a("a"),KSr=o("from_config()"),ZSr=o(` class
method.`),eRr=l(),n7=a("p"),oRr=o("This class cannot be instantiated directly using "),oTe=a("code"),rRr=o("__init__()"),tRr=o(" (throws an error)."),aRr=l(),qt=a("div"),f(s7.$$.fragment),nRr=l(),rTe=a("p"),sRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lRr=l(),Pf=a("p"),iRr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),dRr=o("not"),cRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),fRr=o("from_pretrained()"),mRr=o(" to load the model weights."),gRr=l(),aTe=a("p"),hRr=o("Examples:"),uRr=l(),f(l7.$$.fragment),pRr=l(),No=a("div"),f(i7.$$.fragment),_Rr=l(),nTe=a("p"),vRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bRr=l(),Dn=a("p"),FRr=o("The model class to instantiate is selected based on the "),sTe=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),dTe=a("ul"),u5=a("li"),cTe=a("strong"),LRr=o("vision-encoder-decoder"),xRr=o(" \u2014 "),zH=a("a"),kRr=o("FlaxVisionEncoderDecoderModel"),SRr=o(" (Vision Encoder decoder model)"),RRr=l(),fTe=a("p"),BRr=o("Examples:"),PRr=l(),f(d7.$$.fragment),this.h()},l(c){const _=ZEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var c7=s(de);Ce=n(c7,"A",{id:!0,class:!0,href:!0});var mTe=s(Ce);lo=n(mTe,"SPAN",{});var gTe=s(lo);m(me.$$.fragment,gTe),gTe.forEach(t),mTe.forEach(t),Me=i(c7),Xo=n(c7,"SPAN",{});var IRr=s(Xo);Ii=r(IRr,"Auto Classes"),IRr.forEach(t),c7.forEach(t),qf=i(c),fa=n(c,"P",{});var jBe=s(fa);qi=r(jBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(jBe,"CODE",{});var qRr=s(Ni);u3=r(qRr,"from_pretrained()"),qRr.forEach(t),Nf=r(jBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jBe.forEach(t),xe=i(c),co=n(c,"P",{});var p5=s(co);ji=r(p5,"Instantiating one of "),Gn=n(p5,"A",{href:!0});var NRr=s(Gn);p3=r(NRr,"AutoConfig"),NRr.forEach(t),On=r(p5,", "),Vn=n(p5,"A",{href:!0});var jRr=s(Vn);_3=r(jRr,"AutoModel"),jRr.forEach(t),Di=r(p5,`, and
`),Xn=n(p5,"A",{href:!0});var DRr=s(Xn);v3=r(DRr,"AutoTokenizer"),DRr.forEach(t),Gi=r(p5," will directly create a class of the relevant architecture. For instance"),p5.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var DBe=s(pe);lx=r(DBe,"will create a model that is an instance of "),Oi=n(DBe,"A",{href:!0});var GRr=s(Oi);ix=r(GRr,"BertModel"),GRr.forEach(t),dx=r(DBe,"."),DBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var GBe=s(Ga);cx=r(GBe,"There is one class of "),Df=n(GBe,"CODE",{});var ORr=s(Df);fx=r(ORr,"AutoModel"),ORr.forEach(t),J$e=r(GBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GBe.forEach(t),qSe=i(c),Vi=n(c,"H2",{class:!0});var OBe=s(Vi);Gf=n(OBe,"A",{id:!0,class:!0,href:!0});var VRr=s(Gf);jJ=n(VRr,"SPAN",{});var XRr=s(jJ);m(b3.$$.fragment,XRr),XRr.forEach(t),VRr.forEach(t),Y$e=i(OBe),DJ=n(OBe,"SPAN",{});var zRr=s(DJ);K$e=r(zRr,"Extending the Auto Classes"),zRr.forEach(t),OBe.forEach(t),NSe=i(c),zn=n(c,"P",{});var QH=s(zn);Z$e=r(QH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GJ=n(QH,"CODE",{});var QRr=s(GJ);eIe=r(QRr,"NewModel"),QRr.forEach(t),oIe=r(QH,", make sure you have a "),OJ=n(QH,"CODE",{});var WRr=s(OJ);rIe=r(WRr,"NewModelConfig"),WRr.forEach(t),tIe=r(QH,` then you can add those to the auto
classes like this:`),QH.forEach(t),jSe=i(c),m(F3.$$.fragment,c),DSe=i(c),mx=n(c,"P",{});var HRr=s(mx);aIe=r(HRr,"You will then be able to use the auto classes like you would usually do!"),HRr.forEach(t),GSe=i(c),m(Of.$$.fragment,c),OSe=i(c),Xi=n(c,"H2",{class:!0});var VBe=s(Xi);Vf=n(VBe,"A",{id:!0,class:!0,href:!0});var URr=s(Vf);VJ=n(URr,"SPAN",{});var JRr=s(VJ);m(T3.$$.fragment,JRr),JRr.forEach(t),URr.forEach(t),nIe=i(VBe),XJ=n(VBe,"SPAN",{});var YRr=s(XJ);sIe=r(YRr,"AutoConfig"),YRr.forEach(t),VBe.forEach(t),VSe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(M3.$$.fragment,Os),lIe=i(Os),E3=n(Os,"P",{});var XBe=s(E3);iIe=r(XBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gx=n(XBe,"A",{href:!0});var KRr=s(gx);dIe=r(KRr,"from_pretrained()"),KRr.forEach(t),cIe=r(XBe," class method."),XBe.forEach(t),fIe=i(Os),C3=n(Os,"P",{});var zBe=s(C3);mIe=r(zBe,"This class cannot be instantiated directly using "),zJ=n(zBe,"CODE",{});var ZRr=s(zJ);gIe=r(ZRr,"__init__()"),ZRr.forEach(t),hIe=r(zBe," (throws an error)."),zBe.forEach(t),uIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(w3.$$.fragment,ga),pIe=i(ga),QJ=n(ga,"P",{});var eBr=s(QJ);_Ie=r(eBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eBr.forEach(t),vIe=i(ga),zi=n(ga,"P",{});var WH=s(zi);bIe=r(WH,"The configuration class to instantiate is selected based on the "),WJ=n(WH,"CODE",{});var oBr=s(WJ);FIe=r(oBr,"model_type"),oBr.forEach(t),TIe=r(WH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HJ=n(WH,"CODE",{});var rBr=s(HJ);MIe=r(rBr,"pretrained_model_name_or_path"),rBr.forEach(t),EIe=r(WH,":"),WH.forEach(t),CIe=i(ga),b=n(ga,"UL",{});var F=s(b);Xf=n(F,"LI",{});var hTe=s(Xf);UJ=n(hTe,"STRONG",{});var tBr=s(UJ);wIe=r(tBr,"albert"),tBr.forEach(t),AIe=r(hTe," \u2014 "),hx=n(hTe,"A",{href:!0});var aBr=s(hx);yIe=r(aBr,"AlbertConfig"),aBr.forEach(t),LIe=r(hTe," (ALBERT model)"),hTe.forEach(t),xIe=i(F),zf=n(F,"LI",{});var uTe=s(zf);JJ=n(uTe,"STRONG",{});var nBr=s(JJ);kIe=r(nBr,"bart"),nBr.forEach(t),SIe=r(uTe," \u2014 "),ux=n(uTe,"A",{href:!0});var sBr=s(ux);RIe=r(sBr,"BartConfig"),sBr.forEach(t),BIe=r(uTe," (BART model)"),uTe.forEach(t),PIe=i(F),Qf=n(F,"LI",{});var pTe=s(Qf);YJ=n(pTe,"STRONG",{});var lBr=s(YJ);$Ie=r(lBr,"beit"),lBr.forEach(t),IIe=r(pTe," \u2014 "),px=n(pTe,"A",{href:!0});var iBr=s(px);qIe=r(iBr,"BeitConfig"),iBr.forEach(t),NIe=r(pTe," (BEiT model)"),pTe.forEach(t),jIe=i(F),Wf=n(F,"LI",{});var _Te=s(Wf);KJ=n(_Te,"STRONG",{});var dBr=s(KJ);DIe=r(dBr,"bert"),dBr.forEach(t),GIe=r(_Te," \u2014 "),_x=n(_Te,"A",{href:!0});var cBr=s(_x);OIe=r(cBr,"BertConfig"),cBr.forEach(t),VIe=r(_Te," (BERT model)"),_Te.forEach(t),XIe=i(F),Hf=n(F,"LI",{});var vTe=s(Hf);ZJ=n(vTe,"STRONG",{});var fBr=s(ZJ);zIe=r(fBr,"bert-generation"),fBr.forEach(t),QIe=r(vTe," \u2014 "),vx=n(vTe,"A",{href:!0});var mBr=s(vx);WIe=r(mBr,"BertGenerationConfig"),mBr.forEach(t),HIe=r(vTe," (Bert Generation model)"),vTe.forEach(t),UIe=i(F),Uf=n(F,"LI",{});var bTe=s(Uf);eY=n(bTe,"STRONG",{});var gBr=s(eY);JIe=r(gBr,"big_bird"),gBr.forEach(t),YIe=r(bTe," \u2014 "),bx=n(bTe,"A",{href:!0});var hBr=s(bx);KIe=r(hBr,"BigBirdConfig"),hBr.forEach(t),ZIe=r(bTe," (BigBird model)"),bTe.forEach(t),eqe=i(F),Jf=n(F,"LI",{});var FTe=s(Jf);oY=n(FTe,"STRONG",{});var uBr=s(oY);oqe=r(uBr,"bigbird_pegasus"),uBr.forEach(t),rqe=r(FTe," \u2014 "),Fx=n(FTe,"A",{href:!0});var pBr=s(Fx);tqe=r(pBr,"BigBirdPegasusConfig"),pBr.forEach(t),aqe=r(FTe," (BigBirdPegasus model)"),FTe.forEach(t),nqe=i(F),Yf=n(F,"LI",{});var TTe=s(Yf);rY=n(TTe,"STRONG",{});var _Br=s(rY);sqe=r(_Br,"blenderbot"),_Br.forEach(t),lqe=r(TTe," \u2014 "),Tx=n(TTe,"A",{href:!0});var vBr=s(Tx);iqe=r(vBr,"BlenderbotConfig"),vBr.forEach(t),dqe=r(TTe," (Blenderbot model)"),TTe.forEach(t),cqe=i(F),Kf=n(F,"LI",{});var MTe=s(Kf);tY=n(MTe,"STRONG",{});var bBr=s(tY);fqe=r(bBr,"blenderbot-small"),bBr.forEach(t),mqe=r(MTe," \u2014 "),Mx=n(MTe,"A",{href:!0});var FBr=s(Mx);gqe=r(FBr,"BlenderbotSmallConfig"),FBr.forEach(t),hqe=r(MTe," (BlenderbotSmall model)"),MTe.forEach(t),uqe=i(F),Zf=n(F,"LI",{});var ETe=s(Zf);aY=n(ETe,"STRONG",{});var TBr=s(aY);pqe=r(TBr,"camembert"),TBr.forEach(t),_qe=r(ETe," \u2014 "),Ex=n(ETe,"A",{href:!0});var MBr=s(Ex);vqe=r(MBr,"CamembertConfig"),MBr.forEach(t),bqe=r(ETe," (CamemBERT model)"),ETe.forEach(t),Fqe=i(F),em=n(F,"LI",{});var CTe=s(em);nY=n(CTe,"STRONG",{});var EBr=s(nY);Tqe=r(EBr,"canine"),EBr.forEach(t),Mqe=r(CTe," \u2014 "),Cx=n(CTe,"A",{href:!0});var CBr=s(Cx);Eqe=r(CBr,"CanineConfig"),CBr.forEach(t),Cqe=r(CTe," (Canine model)"),CTe.forEach(t),wqe=i(F),om=n(F,"LI",{});var wTe=s(om);sY=n(wTe,"STRONG",{});var wBr=s(sY);Aqe=r(wBr,"clip"),wBr.forEach(t),yqe=r(wTe," \u2014 "),wx=n(wTe,"A",{href:!0});var ABr=s(wx);Lqe=r(ABr,"CLIPConfig"),ABr.forEach(t),xqe=r(wTe," (CLIP model)"),wTe.forEach(t),kqe=i(F),rm=n(F,"LI",{});var ATe=s(rm);lY=n(ATe,"STRONG",{});var yBr=s(lY);Sqe=r(yBr,"convbert"),yBr.forEach(t),Rqe=r(ATe," \u2014 "),Ax=n(ATe,"A",{href:!0});var LBr=s(Ax);Bqe=r(LBr,"ConvBertConfig"),LBr.forEach(t),Pqe=r(ATe," (ConvBERT model)"),ATe.forEach(t),$qe=i(F),tm=n(F,"LI",{});var yTe=s(tm);iY=n(yTe,"STRONG",{});var xBr=s(iY);Iqe=r(xBr,"convnext"),xBr.forEach(t),qqe=r(yTe," \u2014 "),yx=n(yTe,"A",{href:!0});var kBr=s(yx);Nqe=r(kBr,"ConvNextConfig"),kBr.forEach(t),jqe=r(yTe," (ConvNext model)"),yTe.forEach(t),Dqe=i(F),am=n(F,"LI",{});var LTe=s(am);dY=n(LTe,"STRONG",{});var SBr=s(dY);Gqe=r(SBr,"ctrl"),SBr.forEach(t),Oqe=r(LTe," \u2014 "),Lx=n(LTe,"A",{href:!0});var RBr=s(Lx);Vqe=r(RBr,"CTRLConfig"),RBr.forEach(t),Xqe=r(LTe," (CTRL model)"),LTe.forEach(t),zqe=i(F),nm=n(F,"LI",{});var xTe=s(nm);cY=n(xTe,"STRONG",{});var BBr=s(cY);Qqe=r(BBr,"data2vec-audio"),BBr.forEach(t),Wqe=r(xTe," \u2014 "),xx=n(xTe,"A",{href:!0});var PBr=s(xx);Hqe=r(PBr,"Data2VecAudioConfig"),PBr.forEach(t),Uqe=r(xTe," (Data2VecAudio model)"),xTe.forEach(t),Jqe=i(F),sm=n(F,"LI",{});var kTe=s(sm);fY=n(kTe,"STRONG",{});var $Br=s(fY);Yqe=r($Br,"data2vec-text"),$Br.forEach(t),Kqe=r(kTe," \u2014 "),kx=n(kTe,"A",{href:!0});var IBr=s(kx);Zqe=r(IBr,"Data2VecTextConfig"),IBr.forEach(t),eNe=r(kTe," (Data2VecText model)"),kTe.forEach(t),oNe=i(F),lm=n(F,"LI",{});var STe=s(lm);mY=n(STe,"STRONG",{});var qBr=s(mY);rNe=r(qBr,"deberta"),qBr.forEach(t),tNe=r(STe," \u2014 "),Sx=n(STe,"A",{href:!0});var NBr=s(Sx);aNe=r(NBr,"DebertaConfig"),NBr.forEach(t),nNe=r(STe," (DeBERTa model)"),STe.forEach(t),sNe=i(F),im=n(F,"LI",{});var RTe=s(im);gY=n(RTe,"STRONG",{});var jBr=s(gY);lNe=r(jBr,"deberta-v2"),jBr.forEach(t),iNe=r(RTe," \u2014 "),Rx=n(RTe,"A",{href:!0});var DBr=s(Rx);dNe=r(DBr,"DebertaV2Config"),DBr.forEach(t),cNe=r(RTe," (DeBERTa-v2 model)"),RTe.forEach(t),fNe=i(F),dm=n(F,"LI",{});var BTe=s(dm);hY=n(BTe,"STRONG",{});var GBr=s(hY);mNe=r(GBr,"decision_transformer"),GBr.forEach(t),gNe=r(BTe," \u2014 "),Bx=n(BTe,"A",{href:!0});var OBr=s(Bx);hNe=r(OBr,"DecisionTransformerConfig"),OBr.forEach(t),uNe=r(BTe," (Decision Transformer model)"),BTe.forEach(t),pNe=i(F),cm=n(F,"LI",{});var PTe=s(cm);uY=n(PTe,"STRONG",{});var VBr=s(uY);_Ne=r(VBr,"deit"),VBr.forEach(t),vNe=r(PTe," \u2014 "),Px=n(PTe,"A",{href:!0});var XBr=s(Px);bNe=r(XBr,"DeiTConfig"),XBr.forEach(t),FNe=r(PTe," (DeiT model)"),PTe.forEach(t),TNe=i(F),fm=n(F,"LI",{});var $Te=s(fm);pY=n($Te,"STRONG",{});var zBr=s(pY);MNe=r(zBr,"detr"),zBr.forEach(t),ENe=r($Te," \u2014 "),$x=n($Te,"A",{href:!0});var QBr=s($x);CNe=r(QBr,"DetrConfig"),QBr.forEach(t),wNe=r($Te," (DETR model)"),$Te.forEach(t),ANe=i(F),mm=n(F,"LI",{});var ITe=s(mm);_Y=n(ITe,"STRONG",{});var WBr=s(_Y);yNe=r(WBr,"distilbert"),WBr.forEach(t),LNe=r(ITe," \u2014 "),Ix=n(ITe,"A",{href:!0});var HBr=s(Ix);xNe=r(HBr,"DistilBertConfig"),HBr.forEach(t),kNe=r(ITe," (DistilBERT model)"),ITe.forEach(t),SNe=i(F),gm=n(F,"LI",{});var qTe=s(gm);vY=n(qTe,"STRONG",{});var UBr=s(vY);RNe=r(UBr,"dpr"),UBr.forEach(t),BNe=r(qTe," \u2014 "),qx=n(qTe,"A",{href:!0});var JBr=s(qx);PNe=r(JBr,"DPRConfig"),JBr.forEach(t),$Ne=r(qTe," (DPR model)"),qTe.forEach(t),INe=i(F),hm=n(F,"LI",{});var NTe=s(hm);bY=n(NTe,"STRONG",{});var YBr=s(bY);qNe=r(YBr,"dpt"),YBr.forEach(t),NNe=r(NTe," \u2014 "),Nx=n(NTe,"A",{href:!0});var KBr=s(Nx);jNe=r(KBr,"DPTConfig"),KBr.forEach(t),DNe=r(NTe," (DPT model)"),NTe.forEach(t),GNe=i(F),um=n(F,"LI",{});var jTe=s(um);FY=n(jTe,"STRONG",{});var ZBr=s(FY);ONe=r(ZBr,"electra"),ZBr.forEach(t),VNe=r(jTe," \u2014 "),jx=n(jTe,"A",{href:!0});var ePr=s(jx);XNe=r(ePr,"ElectraConfig"),ePr.forEach(t),zNe=r(jTe," (ELECTRA model)"),jTe.forEach(t),QNe=i(F),pm=n(F,"LI",{});var DTe=s(pm);TY=n(DTe,"STRONG",{});var oPr=s(TY);WNe=r(oPr,"encoder-decoder"),oPr.forEach(t),HNe=r(DTe," \u2014 "),Dx=n(DTe,"A",{href:!0});var rPr=s(Dx);UNe=r(rPr,"EncoderDecoderConfig"),rPr.forEach(t),JNe=r(DTe," (Encoder decoder model)"),DTe.forEach(t),YNe=i(F),_m=n(F,"LI",{});var GTe=s(_m);MY=n(GTe,"STRONG",{});var tPr=s(MY);KNe=r(tPr,"flaubert"),tPr.forEach(t),ZNe=r(GTe," \u2014 "),Gx=n(GTe,"A",{href:!0});var aPr=s(Gx);eje=r(aPr,"FlaubertConfig"),aPr.forEach(t),oje=r(GTe," (FlauBERT model)"),GTe.forEach(t),rje=i(F),vm=n(F,"LI",{});var OTe=s(vm);EY=n(OTe,"STRONG",{});var nPr=s(EY);tje=r(nPr,"fnet"),nPr.forEach(t),aje=r(OTe," \u2014 "),Ox=n(OTe,"A",{href:!0});var sPr=s(Ox);nje=r(sPr,"FNetConfig"),sPr.forEach(t),sje=r(OTe," (FNet model)"),OTe.forEach(t),lje=i(F),bm=n(F,"LI",{});var VTe=s(bm);CY=n(VTe,"STRONG",{});var lPr=s(CY);ije=r(lPr,"fsmt"),lPr.forEach(t),dje=r(VTe," \u2014 "),Vx=n(VTe,"A",{href:!0});var iPr=s(Vx);cje=r(iPr,"FSMTConfig"),iPr.forEach(t),fje=r(VTe," (FairSeq Machine-Translation model)"),VTe.forEach(t),mje=i(F),Fm=n(F,"LI",{});var XTe=s(Fm);wY=n(XTe,"STRONG",{});var dPr=s(wY);gje=r(dPr,"funnel"),dPr.forEach(t),hje=r(XTe," \u2014 "),Xx=n(XTe,"A",{href:!0});var cPr=s(Xx);uje=r(cPr,"FunnelConfig"),cPr.forEach(t),pje=r(XTe," (Funnel Transformer model)"),XTe.forEach(t),_je=i(F),Tm=n(F,"LI",{});var zTe=s(Tm);AY=n(zTe,"STRONG",{});var fPr=s(AY);vje=r(fPr,"glpn"),fPr.forEach(t),bje=r(zTe," \u2014 "),zx=n(zTe,"A",{href:!0});var mPr=s(zx);Fje=r(mPr,"GLPNConfig"),mPr.forEach(t),Tje=r(zTe," (GLPN model)"),zTe.forEach(t),Mje=i(F),Mm=n(F,"LI",{});var QTe=s(Mm);yY=n(QTe,"STRONG",{});var gPr=s(yY);Eje=r(gPr,"gpt2"),gPr.forEach(t),Cje=r(QTe," \u2014 "),Qx=n(QTe,"A",{href:!0});var hPr=s(Qx);wje=r(hPr,"GPT2Config"),hPr.forEach(t),Aje=r(QTe," (OpenAI GPT-2 model)"),QTe.forEach(t),yje=i(F),Em=n(F,"LI",{});var WTe=s(Em);LY=n(WTe,"STRONG",{});var uPr=s(LY);Lje=r(uPr,"gpt_neo"),uPr.forEach(t),xje=r(WTe," \u2014 "),Wx=n(WTe,"A",{href:!0});var pPr=s(Wx);kje=r(pPr,"GPTNeoConfig"),pPr.forEach(t),Sje=r(WTe," (GPT Neo model)"),WTe.forEach(t),Rje=i(F),Cm=n(F,"LI",{});var HTe=s(Cm);xY=n(HTe,"STRONG",{});var _Pr=s(xY);Bje=r(_Pr,"gptj"),_Pr.forEach(t),Pje=r(HTe," \u2014 "),Hx=n(HTe,"A",{href:!0});var vPr=s(Hx);$je=r(vPr,"GPTJConfig"),vPr.forEach(t),Ije=r(HTe," (GPT-J model)"),HTe.forEach(t),qje=i(F),wm=n(F,"LI",{});var UTe=s(wm);kY=n(UTe,"STRONG",{});var bPr=s(kY);Nje=r(bPr,"hubert"),bPr.forEach(t),jje=r(UTe," \u2014 "),Ux=n(UTe,"A",{href:!0});var FPr=s(Ux);Dje=r(FPr,"HubertConfig"),FPr.forEach(t),Gje=r(UTe," (Hubert model)"),UTe.forEach(t),Oje=i(F),Am=n(F,"LI",{});var JTe=s(Am);SY=n(JTe,"STRONG",{});var TPr=s(SY);Vje=r(TPr,"ibert"),TPr.forEach(t),Xje=r(JTe," \u2014 "),Jx=n(JTe,"A",{href:!0});var MPr=s(Jx);zje=r(MPr,"IBertConfig"),MPr.forEach(t),Qje=r(JTe," (I-BERT model)"),JTe.forEach(t),Wje=i(F),ym=n(F,"LI",{});var YTe=s(ym);RY=n(YTe,"STRONG",{});var EPr=s(RY);Hje=r(EPr,"imagegpt"),EPr.forEach(t),Uje=r(YTe," \u2014 "),Yx=n(YTe,"A",{href:!0});var CPr=s(Yx);Jje=r(CPr,"ImageGPTConfig"),CPr.forEach(t),Yje=r(YTe," (ImageGPT model)"),YTe.forEach(t),Kje=i(F),Lm=n(F,"LI",{});var KTe=s(Lm);BY=n(KTe,"STRONG",{});var wPr=s(BY);Zje=r(wPr,"layoutlm"),wPr.forEach(t),eDe=r(KTe," \u2014 "),Kx=n(KTe,"A",{href:!0});var APr=s(Kx);oDe=r(APr,"LayoutLMConfig"),APr.forEach(t),rDe=r(KTe," (LayoutLM model)"),KTe.forEach(t),tDe=i(F),xm=n(F,"LI",{});var ZTe=s(xm);PY=n(ZTe,"STRONG",{});var yPr=s(PY);aDe=r(yPr,"layoutlmv2"),yPr.forEach(t),nDe=r(ZTe," \u2014 "),Zx=n(ZTe,"A",{href:!0});var LPr=s(Zx);sDe=r(LPr,"LayoutLMv2Config"),LPr.forEach(t),lDe=r(ZTe," (LayoutLMv2 model)"),ZTe.forEach(t),iDe=i(F),km=n(F,"LI",{});var e8e=s(km);$Y=n(e8e,"STRONG",{});var xPr=s($Y);dDe=r(xPr,"led"),xPr.forEach(t),cDe=r(e8e," \u2014 "),e9=n(e8e,"A",{href:!0});var kPr=s(e9);fDe=r(kPr,"LEDConfig"),kPr.forEach(t),mDe=r(e8e," (LED model)"),e8e.forEach(t),gDe=i(F),Sm=n(F,"LI",{});var o8e=s(Sm);IY=n(o8e,"STRONG",{});var SPr=s(IY);hDe=r(SPr,"longformer"),SPr.forEach(t),uDe=r(o8e," \u2014 "),o9=n(o8e,"A",{href:!0});var RPr=s(o9);pDe=r(RPr,"LongformerConfig"),RPr.forEach(t),_De=r(o8e," (Longformer model)"),o8e.forEach(t),vDe=i(F),Rm=n(F,"LI",{});var r8e=s(Rm);qY=n(r8e,"STRONG",{});var BPr=s(qY);bDe=r(BPr,"luke"),BPr.forEach(t),FDe=r(r8e," \u2014 "),r9=n(r8e,"A",{href:!0});var PPr=s(r9);TDe=r(PPr,"LukeConfig"),PPr.forEach(t),MDe=r(r8e," (LUKE model)"),r8e.forEach(t),EDe=i(F),Bm=n(F,"LI",{});var t8e=s(Bm);NY=n(t8e,"STRONG",{});var $Pr=s(NY);CDe=r($Pr,"lxmert"),$Pr.forEach(t),wDe=r(t8e," \u2014 "),t9=n(t8e,"A",{href:!0});var IPr=s(t9);ADe=r(IPr,"LxmertConfig"),IPr.forEach(t),yDe=r(t8e," (LXMERT model)"),t8e.forEach(t),LDe=i(F),Pm=n(F,"LI",{});var a8e=s(Pm);jY=n(a8e,"STRONG",{});var qPr=s(jY);xDe=r(qPr,"m2m_100"),qPr.forEach(t),kDe=r(a8e," \u2014 "),a9=n(a8e,"A",{href:!0});var NPr=s(a9);SDe=r(NPr,"M2M100Config"),NPr.forEach(t),RDe=r(a8e," (M2M100 model)"),a8e.forEach(t),BDe=i(F),$m=n(F,"LI",{});var n8e=s($m);DY=n(n8e,"STRONG",{});var jPr=s(DY);PDe=r(jPr,"marian"),jPr.forEach(t),$De=r(n8e," \u2014 "),n9=n(n8e,"A",{href:!0});var DPr=s(n9);IDe=r(DPr,"MarianConfig"),DPr.forEach(t),qDe=r(n8e," (Marian model)"),n8e.forEach(t),NDe=i(F),Im=n(F,"LI",{});var s8e=s(Im);GY=n(s8e,"STRONG",{});var GPr=s(GY);jDe=r(GPr,"maskformer"),GPr.forEach(t),DDe=r(s8e," \u2014 "),s9=n(s8e,"A",{href:!0});var OPr=s(s9);GDe=r(OPr,"MaskFormerConfig"),OPr.forEach(t),ODe=r(s8e," (MaskFormer model)"),s8e.forEach(t),VDe=i(F),qm=n(F,"LI",{});var l8e=s(qm);OY=n(l8e,"STRONG",{});var VPr=s(OY);XDe=r(VPr,"mbart"),VPr.forEach(t),zDe=r(l8e," \u2014 "),l9=n(l8e,"A",{href:!0});var XPr=s(l9);QDe=r(XPr,"MBartConfig"),XPr.forEach(t),WDe=r(l8e," (mBART model)"),l8e.forEach(t),HDe=i(F),Nm=n(F,"LI",{});var i8e=s(Nm);VY=n(i8e,"STRONG",{});var zPr=s(VY);UDe=r(zPr,"megatron-bert"),zPr.forEach(t),JDe=r(i8e," \u2014 "),i9=n(i8e,"A",{href:!0});var QPr=s(i9);YDe=r(QPr,"MegatronBertConfig"),QPr.forEach(t),KDe=r(i8e," (MegatronBert model)"),i8e.forEach(t),ZDe=i(F),jm=n(F,"LI",{});var d8e=s(jm);XY=n(d8e,"STRONG",{});var WPr=s(XY);eGe=r(WPr,"mobilebert"),WPr.forEach(t),oGe=r(d8e," \u2014 "),d9=n(d8e,"A",{href:!0});var HPr=s(d9);rGe=r(HPr,"MobileBertConfig"),HPr.forEach(t),tGe=r(d8e," (MobileBERT model)"),d8e.forEach(t),aGe=i(F),Dm=n(F,"LI",{});var c8e=s(Dm);zY=n(c8e,"STRONG",{});var UPr=s(zY);nGe=r(UPr,"mpnet"),UPr.forEach(t),sGe=r(c8e," \u2014 "),c9=n(c8e,"A",{href:!0});var JPr=s(c9);lGe=r(JPr,"MPNetConfig"),JPr.forEach(t),iGe=r(c8e," (MPNet model)"),c8e.forEach(t),dGe=i(F),Gm=n(F,"LI",{});var f8e=s(Gm);QY=n(f8e,"STRONG",{});var YPr=s(QY);cGe=r(YPr,"mt5"),YPr.forEach(t),fGe=r(f8e," \u2014 "),f9=n(f8e,"A",{href:!0});var KPr=s(f9);mGe=r(KPr,"MT5Config"),KPr.forEach(t),gGe=r(f8e," (mT5 model)"),f8e.forEach(t),hGe=i(F),Om=n(F,"LI",{});var m8e=s(Om);WY=n(m8e,"STRONG",{});var ZPr=s(WY);uGe=r(ZPr,"nystromformer"),ZPr.forEach(t),pGe=r(m8e," \u2014 "),m9=n(m8e,"A",{href:!0});var e$r=s(m9);_Ge=r(e$r,"NystromformerConfig"),e$r.forEach(t),vGe=r(m8e," (Nystromformer model)"),m8e.forEach(t),bGe=i(F),Vm=n(F,"LI",{});var g8e=s(Vm);HY=n(g8e,"STRONG",{});var o$r=s(HY);FGe=r(o$r,"openai-gpt"),o$r.forEach(t),TGe=r(g8e," \u2014 "),g9=n(g8e,"A",{href:!0});var r$r=s(g9);MGe=r(r$r,"OpenAIGPTConfig"),r$r.forEach(t),EGe=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),CGe=i(F),Xm=n(F,"LI",{});var h8e=s(Xm);UY=n(h8e,"STRONG",{});var t$r=s(UY);wGe=r(t$r,"pegasus"),t$r.forEach(t),AGe=r(h8e," \u2014 "),h9=n(h8e,"A",{href:!0});var a$r=s(h9);yGe=r(a$r,"PegasusConfig"),a$r.forEach(t),LGe=r(h8e," (Pegasus model)"),h8e.forEach(t),xGe=i(F),zm=n(F,"LI",{});var u8e=s(zm);JY=n(u8e,"STRONG",{});var n$r=s(JY);kGe=r(n$r,"perceiver"),n$r.forEach(t),SGe=r(u8e," \u2014 "),u9=n(u8e,"A",{href:!0});var s$r=s(u9);RGe=r(s$r,"PerceiverConfig"),s$r.forEach(t),BGe=r(u8e," (Perceiver model)"),u8e.forEach(t),PGe=i(F),Qm=n(F,"LI",{});var p8e=s(Qm);YY=n(p8e,"STRONG",{});var l$r=s(YY);$Ge=r(l$r,"plbart"),l$r.forEach(t),IGe=r(p8e," \u2014 "),p9=n(p8e,"A",{href:!0});var i$r=s(p9);qGe=r(i$r,"PLBartConfig"),i$r.forEach(t),NGe=r(p8e," (PLBart model)"),p8e.forEach(t),jGe=i(F),Wm=n(F,"LI",{});var _8e=s(Wm);KY=n(_8e,"STRONG",{});var d$r=s(KY);DGe=r(d$r,"poolformer"),d$r.forEach(t),GGe=r(_8e," \u2014 "),_9=n(_8e,"A",{href:!0});var c$r=s(_9);OGe=r(c$r,"PoolFormerConfig"),c$r.forEach(t),VGe=r(_8e," (PoolFormer model)"),_8e.forEach(t),XGe=i(F),Hm=n(F,"LI",{});var v8e=s(Hm);ZY=n(v8e,"STRONG",{});var f$r=s(ZY);zGe=r(f$r,"prophetnet"),f$r.forEach(t),QGe=r(v8e," \u2014 "),v9=n(v8e,"A",{href:!0});var m$r=s(v9);WGe=r(m$r,"ProphetNetConfig"),m$r.forEach(t),HGe=r(v8e," (ProphetNet model)"),v8e.forEach(t),UGe=i(F),Um=n(F,"LI",{});var b8e=s(Um);eK=n(b8e,"STRONG",{});var g$r=s(eK);JGe=r(g$r,"qdqbert"),g$r.forEach(t),YGe=r(b8e," \u2014 "),b9=n(b8e,"A",{href:!0});var h$r=s(b9);KGe=r(h$r,"QDQBertConfig"),h$r.forEach(t),ZGe=r(b8e," (QDQBert model)"),b8e.forEach(t),eOe=i(F),Jm=n(F,"LI",{});var F8e=s(Jm);oK=n(F8e,"STRONG",{});var u$r=s(oK);oOe=r(u$r,"rag"),u$r.forEach(t),rOe=r(F8e," \u2014 "),F9=n(F8e,"A",{href:!0});var p$r=s(F9);tOe=r(p$r,"RagConfig"),p$r.forEach(t),aOe=r(F8e," (RAG model)"),F8e.forEach(t),nOe=i(F),Ym=n(F,"LI",{});var T8e=s(Ym);rK=n(T8e,"STRONG",{});var _$r=s(rK);sOe=r(_$r,"realm"),_$r.forEach(t),lOe=r(T8e," \u2014 "),T9=n(T8e,"A",{href:!0});var v$r=s(T9);iOe=r(v$r,"RealmConfig"),v$r.forEach(t),dOe=r(T8e," (Realm model)"),T8e.forEach(t),cOe=i(F),Km=n(F,"LI",{});var M8e=s(Km);tK=n(M8e,"STRONG",{});var b$r=s(tK);fOe=r(b$r,"reformer"),b$r.forEach(t),mOe=r(M8e," \u2014 "),M9=n(M8e,"A",{href:!0});var F$r=s(M9);gOe=r(F$r,"ReformerConfig"),F$r.forEach(t),hOe=r(M8e," (Reformer model)"),M8e.forEach(t),uOe=i(F),Zm=n(F,"LI",{});var E8e=s(Zm);aK=n(E8e,"STRONG",{});var T$r=s(aK);pOe=r(T$r,"rembert"),T$r.forEach(t),_Oe=r(E8e," \u2014 "),E9=n(E8e,"A",{href:!0});var M$r=s(E9);vOe=r(M$r,"RemBertConfig"),M$r.forEach(t),bOe=r(E8e," (RemBERT model)"),E8e.forEach(t),FOe=i(F),eg=n(F,"LI",{});var C8e=s(eg);nK=n(C8e,"STRONG",{});var E$r=s(nK);TOe=r(E$r,"resnet"),E$r.forEach(t),MOe=r(C8e," \u2014 "),C9=n(C8e,"A",{href:!0});var C$r=s(C9);EOe=r(C$r,"ResNetConfig"),C$r.forEach(t),COe=r(C8e," (ResNet model)"),C8e.forEach(t),wOe=i(F),og=n(F,"LI",{});var w8e=s(og);sK=n(w8e,"STRONG",{});var w$r=s(sK);AOe=r(w$r,"retribert"),w$r.forEach(t),yOe=r(w8e," \u2014 "),w9=n(w8e,"A",{href:!0});var A$r=s(w9);LOe=r(A$r,"RetriBertConfig"),A$r.forEach(t),xOe=r(w8e," (RetriBERT model)"),w8e.forEach(t),kOe=i(F),rg=n(F,"LI",{});var A8e=s(rg);lK=n(A8e,"STRONG",{});var y$r=s(lK);SOe=r(y$r,"roberta"),y$r.forEach(t),ROe=r(A8e," \u2014 "),A9=n(A8e,"A",{href:!0});var L$r=s(A9);BOe=r(L$r,"RobertaConfig"),L$r.forEach(t),POe=r(A8e," (RoBERTa model)"),A8e.forEach(t),$Oe=i(F),tg=n(F,"LI",{});var y8e=s(tg);iK=n(y8e,"STRONG",{});var x$r=s(iK);IOe=r(x$r,"roformer"),x$r.forEach(t),qOe=r(y8e," \u2014 "),y9=n(y8e,"A",{href:!0});var k$r=s(y9);NOe=r(k$r,"RoFormerConfig"),k$r.forEach(t),jOe=r(y8e," (RoFormer model)"),y8e.forEach(t),DOe=i(F),ag=n(F,"LI",{});var L8e=s(ag);dK=n(L8e,"STRONG",{});var S$r=s(dK);GOe=r(S$r,"segformer"),S$r.forEach(t),OOe=r(L8e," \u2014 "),L9=n(L8e,"A",{href:!0});var R$r=s(L9);VOe=r(R$r,"SegformerConfig"),R$r.forEach(t),XOe=r(L8e," (SegFormer model)"),L8e.forEach(t),zOe=i(F),ng=n(F,"LI",{});var x8e=s(ng);cK=n(x8e,"STRONG",{});var B$r=s(cK);QOe=r(B$r,"sew"),B$r.forEach(t),WOe=r(x8e," \u2014 "),x9=n(x8e,"A",{href:!0});var P$r=s(x9);HOe=r(P$r,"SEWConfig"),P$r.forEach(t),UOe=r(x8e," (SEW model)"),x8e.forEach(t),JOe=i(F),sg=n(F,"LI",{});var k8e=s(sg);fK=n(k8e,"STRONG",{});var $$r=s(fK);YOe=r($$r,"sew-d"),$$r.forEach(t),KOe=r(k8e," \u2014 "),k9=n(k8e,"A",{href:!0});var I$r=s(k9);ZOe=r(I$r,"SEWDConfig"),I$r.forEach(t),eVe=r(k8e," (SEW-D model)"),k8e.forEach(t),oVe=i(F),lg=n(F,"LI",{});var S8e=s(lg);mK=n(S8e,"STRONG",{});var q$r=s(mK);rVe=r(q$r,"speech-encoder-decoder"),q$r.forEach(t),tVe=r(S8e," \u2014 "),S9=n(S8e,"A",{href:!0});var N$r=s(S9);aVe=r(N$r,"SpeechEncoderDecoderConfig"),N$r.forEach(t),nVe=r(S8e," (Speech Encoder decoder model)"),S8e.forEach(t),sVe=i(F),ig=n(F,"LI",{});var R8e=s(ig);gK=n(R8e,"STRONG",{});var j$r=s(gK);lVe=r(j$r,"speech_to_text"),j$r.forEach(t),iVe=r(R8e," \u2014 "),R9=n(R8e,"A",{href:!0});var D$r=s(R9);dVe=r(D$r,"Speech2TextConfig"),D$r.forEach(t),cVe=r(R8e," (Speech2Text model)"),R8e.forEach(t),fVe=i(F),dg=n(F,"LI",{});var B8e=s(dg);hK=n(B8e,"STRONG",{});var G$r=s(hK);mVe=r(G$r,"speech_to_text_2"),G$r.forEach(t),gVe=r(B8e," \u2014 "),B9=n(B8e,"A",{href:!0});var O$r=s(B9);hVe=r(O$r,"Speech2Text2Config"),O$r.forEach(t),uVe=r(B8e," (Speech2Text2 model)"),B8e.forEach(t),pVe=i(F),cg=n(F,"LI",{});var P8e=s(cg);uK=n(P8e,"STRONG",{});var V$r=s(uK);_Ve=r(V$r,"splinter"),V$r.forEach(t),vVe=r(P8e," \u2014 "),P9=n(P8e,"A",{href:!0});var X$r=s(P9);bVe=r(X$r,"SplinterConfig"),X$r.forEach(t),FVe=r(P8e," (Splinter model)"),P8e.forEach(t),TVe=i(F),fg=n(F,"LI",{});var $8e=s(fg);pK=n($8e,"STRONG",{});var z$r=s(pK);MVe=r(z$r,"squeezebert"),z$r.forEach(t),EVe=r($8e," \u2014 "),$9=n($8e,"A",{href:!0});var Q$r=s($9);CVe=r(Q$r,"SqueezeBertConfig"),Q$r.forEach(t),wVe=r($8e," (SqueezeBERT model)"),$8e.forEach(t),AVe=i(F),mg=n(F,"LI",{});var I8e=s(mg);_K=n(I8e,"STRONG",{});var W$r=s(_K);yVe=r(W$r,"swin"),W$r.forEach(t),LVe=r(I8e," \u2014 "),I9=n(I8e,"A",{href:!0});var H$r=s(I9);xVe=r(H$r,"SwinConfig"),H$r.forEach(t),kVe=r(I8e," (Swin model)"),I8e.forEach(t),SVe=i(F),gg=n(F,"LI",{});var q8e=s(gg);vK=n(q8e,"STRONG",{});var U$r=s(vK);RVe=r(U$r,"t5"),U$r.forEach(t),BVe=r(q8e," \u2014 "),q9=n(q8e,"A",{href:!0});var J$r=s(q9);PVe=r(J$r,"T5Config"),J$r.forEach(t),$Ve=r(q8e," (T5 model)"),q8e.forEach(t),IVe=i(F),hg=n(F,"LI",{});var N8e=s(hg);bK=n(N8e,"STRONG",{});var Y$r=s(bK);qVe=r(Y$r,"tapas"),Y$r.forEach(t),NVe=r(N8e," \u2014 "),N9=n(N8e,"A",{href:!0});var K$r=s(N9);jVe=r(K$r,"TapasConfig"),K$r.forEach(t),DVe=r(N8e," (TAPAS model)"),N8e.forEach(t),GVe=i(F),ug=n(F,"LI",{});var j8e=s(ug);FK=n(j8e,"STRONG",{});var Z$r=s(FK);OVe=r(Z$r,"transfo-xl"),Z$r.forEach(t),VVe=r(j8e," \u2014 "),j9=n(j8e,"A",{href:!0});var eIr=s(j9);XVe=r(eIr,"TransfoXLConfig"),eIr.forEach(t),zVe=r(j8e," (Transformer-XL model)"),j8e.forEach(t),QVe=i(F),pg=n(F,"LI",{});var D8e=s(pg);TK=n(D8e,"STRONG",{});var oIr=s(TK);WVe=r(oIr,"trocr"),oIr.forEach(t),HVe=r(D8e," \u2014 "),D9=n(D8e,"A",{href:!0});var rIr=s(D9);UVe=r(rIr,"TrOCRConfig"),rIr.forEach(t),JVe=r(D8e," (TrOCR model)"),D8e.forEach(t),YVe=i(F),_g=n(F,"LI",{});var G8e=s(_g);MK=n(G8e,"STRONG",{});var tIr=s(MK);KVe=r(tIr,"unispeech"),tIr.forEach(t),ZVe=r(G8e," \u2014 "),G9=n(G8e,"A",{href:!0});var aIr=s(G9);eXe=r(aIr,"UniSpeechConfig"),aIr.forEach(t),oXe=r(G8e," (UniSpeech model)"),G8e.forEach(t),rXe=i(F),vg=n(F,"LI",{});var O8e=s(vg);EK=n(O8e,"STRONG",{});var nIr=s(EK);tXe=r(nIr,"unispeech-sat"),nIr.forEach(t),aXe=r(O8e," \u2014 "),O9=n(O8e,"A",{href:!0});var sIr=s(O9);nXe=r(sIr,"UniSpeechSatConfig"),sIr.forEach(t),sXe=r(O8e," (UniSpeechSat model)"),O8e.forEach(t),lXe=i(F),bg=n(F,"LI",{});var V8e=s(bg);CK=n(V8e,"STRONG",{});var lIr=s(CK);iXe=r(lIr,"van"),lIr.forEach(t),dXe=r(V8e," \u2014 "),V9=n(V8e,"A",{href:!0});var iIr=s(V9);cXe=r(iIr,"VanConfig"),iIr.forEach(t),fXe=r(V8e," (VAN model)"),V8e.forEach(t),mXe=i(F),Fg=n(F,"LI",{});var X8e=s(Fg);wK=n(X8e,"STRONG",{});var dIr=s(wK);gXe=r(dIr,"vilt"),dIr.forEach(t),hXe=r(X8e," \u2014 "),X9=n(X8e,"A",{href:!0});var cIr=s(X9);uXe=r(cIr,"ViltConfig"),cIr.forEach(t),pXe=r(X8e," (ViLT model)"),X8e.forEach(t),_Xe=i(F),Tg=n(F,"LI",{});var z8e=s(Tg);AK=n(z8e,"STRONG",{});var fIr=s(AK);vXe=r(fIr,"vision-encoder-decoder"),fIr.forEach(t),bXe=r(z8e," \u2014 "),z9=n(z8e,"A",{href:!0});var mIr=s(z9);FXe=r(mIr,"VisionEncoderDecoderConfig"),mIr.forEach(t),TXe=r(z8e," (Vision Encoder decoder model)"),z8e.forEach(t),MXe=i(F),Mg=n(F,"LI",{});var Q8e=s(Mg);yK=n(Q8e,"STRONG",{});var gIr=s(yK);EXe=r(gIr,"vision-text-dual-encoder"),gIr.forEach(t),CXe=r(Q8e," \u2014 "),Q9=n(Q8e,"A",{href:!0});var hIr=s(Q9);wXe=r(hIr,"VisionTextDualEncoderConfig"),hIr.forEach(t),AXe=r(Q8e," (VisionTextDualEncoder model)"),Q8e.forEach(t),yXe=i(F),Eg=n(F,"LI",{});var W8e=s(Eg);LK=n(W8e,"STRONG",{});var uIr=s(LK);LXe=r(uIr,"visual_bert"),uIr.forEach(t),xXe=r(W8e," \u2014 "),W9=n(W8e,"A",{href:!0});var pIr=s(W9);kXe=r(pIr,"VisualBertConfig"),pIr.forEach(t),SXe=r(W8e," (VisualBert model)"),W8e.forEach(t),RXe=i(F),Cg=n(F,"LI",{});var H8e=s(Cg);xK=n(H8e,"STRONG",{});var _Ir=s(xK);BXe=r(_Ir,"vit"),_Ir.forEach(t),PXe=r(H8e," \u2014 "),H9=n(H8e,"A",{href:!0});var vIr=s(H9);$Xe=r(vIr,"ViTConfig"),vIr.forEach(t),IXe=r(H8e," (ViT model)"),H8e.forEach(t),qXe=i(F),wg=n(F,"LI",{});var U8e=s(wg);kK=n(U8e,"STRONG",{});var bIr=s(kK);NXe=r(bIr,"vit_mae"),bIr.forEach(t),jXe=r(U8e," \u2014 "),U9=n(U8e,"A",{href:!0});var FIr=s(U9);DXe=r(FIr,"ViTMAEConfig"),FIr.forEach(t),GXe=r(U8e," (ViTMAE model)"),U8e.forEach(t),OXe=i(F),Ag=n(F,"LI",{});var J8e=s(Ag);SK=n(J8e,"STRONG",{});var TIr=s(SK);VXe=r(TIr,"wav2vec2"),TIr.forEach(t),XXe=r(J8e," \u2014 "),J9=n(J8e,"A",{href:!0});var MIr=s(J9);zXe=r(MIr,"Wav2Vec2Config"),MIr.forEach(t),QXe=r(J8e," (Wav2Vec2 model)"),J8e.forEach(t),WXe=i(F),yg=n(F,"LI",{});var Y8e=s(yg);RK=n(Y8e,"STRONG",{});var EIr=s(RK);HXe=r(EIr,"wavlm"),EIr.forEach(t),UXe=r(Y8e," \u2014 "),Y9=n(Y8e,"A",{href:!0});var CIr=s(Y9);JXe=r(CIr,"WavLMConfig"),CIr.forEach(t),YXe=r(Y8e," (WavLM model)"),Y8e.forEach(t),KXe=i(F),Lg=n(F,"LI",{});var K8e=s(Lg);BK=n(K8e,"STRONG",{});var wIr=s(BK);ZXe=r(wIr,"xglm"),wIr.forEach(t),eze=r(K8e," \u2014 "),K9=n(K8e,"A",{href:!0});var AIr=s(K9);oze=r(AIr,"XGLMConfig"),AIr.forEach(t),rze=r(K8e," (XGLM model)"),K8e.forEach(t),tze=i(F),xg=n(F,"LI",{});var Z8e=s(xg);PK=n(Z8e,"STRONG",{});var yIr=s(PK);aze=r(yIr,"xlm"),yIr.forEach(t),nze=r(Z8e," \u2014 "),Z9=n(Z8e,"A",{href:!0});var LIr=s(Z9);sze=r(LIr,"XLMConfig"),LIr.forEach(t),lze=r(Z8e," (XLM model)"),Z8e.forEach(t),ize=i(F),kg=n(F,"LI",{});var eMe=s(kg);$K=n(eMe,"STRONG",{});var xIr=s($K);dze=r(xIr,"xlm-prophetnet"),xIr.forEach(t),cze=r(eMe," \u2014 "),ek=n(eMe,"A",{href:!0});var kIr=s(ek);fze=r(kIr,"XLMProphetNetConfig"),kIr.forEach(t),mze=r(eMe," (XLMProphetNet model)"),eMe.forEach(t),gze=i(F),Sg=n(F,"LI",{});var oMe=s(Sg);IK=n(oMe,"STRONG",{});var SIr=s(IK);hze=r(SIr,"xlm-roberta"),SIr.forEach(t),uze=r(oMe," \u2014 "),ok=n(oMe,"A",{href:!0});var RIr=s(ok);pze=r(RIr,"XLMRobertaConfig"),RIr.forEach(t),_ze=r(oMe," (XLM-RoBERTa model)"),oMe.forEach(t),vze=i(F),Rg=n(F,"LI",{});var rMe=s(Rg);qK=n(rMe,"STRONG",{});var BIr=s(qK);bze=r(BIr,"xlm-roberta-xl"),BIr.forEach(t),Fze=r(rMe," \u2014 "),rk=n(rMe,"A",{href:!0});var PIr=s(rk);Tze=r(PIr,"XLMRobertaXLConfig"),PIr.forEach(t),Mze=r(rMe," (XLM-RoBERTa-XL model)"),rMe.forEach(t),Eze=i(F),Bg=n(F,"LI",{});var tMe=s(Bg);NK=n(tMe,"STRONG",{});var $Ir=s(NK);Cze=r($Ir,"xlnet"),$Ir.forEach(t),wze=r(tMe," \u2014 "),tk=n(tMe,"A",{href:!0});var IIr=s(tk);Aze=r(IIr,"XLNetConfig"),IIr.forEach(t),yze=r(tMe," (XLNet model)"),tMe.forEach(t),Lze=i(F),Pg=n(F,"LI",{});var aMe=s(Pg);jK=n(aMe,"STRONG",{});var qIr=s(jK);xze=r(qIr,"yoso"),qIr.forEach(t),kze=r(aMe," \u2014 "),ak=n(aMe,"A",{href:!0});var NIr=s(ak);Sze=r(NIr,"YosoConfig"),NIr.forEach(t),Rze=r(aMe," (YOSO model)"),aMe.forEach(t),F.forEach(t),Bze=i(ga),DK=n(ga,"P",{});var jIr=s(DK);Pze=r(jIr,"Examples:"),jIr.forEach(t),$ze=i(ga),m(A3.$$.fragment,ga),ga.forEach(t),Ize=i(Os),$g=n(Os,"DIV",{class:!0});var QBe=s($g);m(y3.$$.fragment,QBe),qze=i(QBe),GK=n(QBe,"P",{});var DIr=s(GK);Nze=r(DIr,"Register a new configuration for this class."),DIr.forEach(t),QBe.forEach(t),Os.forEach(t),XSe=i(c),Qi=n(c,"H2",{class:!0});var WBe=s(Qi);Ig=n(WBe,"A",{id:!0,class:!0,href:!0});var GIr=s(Ig);OK=n(GIr,"SPAN",{});var OIr=s(OK);m(L3.$$.fragment,OIr),OIr.forEach(t),GIr.forEach(t),jze=i(WBe),VK=n(WBe,"SPAN",{});var VIr=s(VK);Dze=r(VIr,"AutoTokenizer"),VIr.forEach(t),WBe.forEach(t),zSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(x3.$$.fragment,Vs),Gze=i(Vs),k3=n(Vs,"P",{});var HBe=s(k3);Oze=r(HBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nk=n(HBe,"A",{href:!0});var XIr=s(nk);Vze=r(XIr,"AutoTokenizer.from_pretrained()"),XIr.forEach(t),Xze=r(HBe," class method."),HBe.forEach(t),zze=i(Vs),S3=n(Vs,"P",{});var UBe=s(S3);Qze=r(UBe,"This class cannot be instantiated directly using "),XK=n(UBe,"CODE",{});var zIr=s(XK);Wze=r(zIr,"__init__()"),zIr.forEach(t),Hze=r(UBe," (throws an error)."),UBe.forEach(t),Uze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(R3.$$.fragment,ha),Jze=i(ha),zK=n(ha,"P",{});var QIr=s(zK);Yze=r(QIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QIr.forEach(t),Kze=i(ha),Oa=n(ha,"P",{});var _5=s(Oa);Zze=r(_5,"The tokenizer class to instantiate is selected based on the "),QK=n(_5,"CODE",{});var WIr=s(QK);eQe=r(WIr,"model_type"),WIr.forEach(t),oQe=r(_5,` property of the config object (either
passed as an argument or loaded from `),WK=n(_5,"CODE",{});var HIr=s(WK);rQe=r(HIr,"pretrained_model_name_or_path"),HIr.forEach(t),tQe=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HK=n(_5,"CODE",{});var UIr=s(HK);aQe=r(UIr,"pretrained_model_name_or_path"),UIr.forEach(t),nQe=r(_5,":"),_5.forEach(t),sQe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var f7=s(Qn);UK=n(f7,"STRONG",{});var JIr=s(UK);lQe=r(JIr,"albert"),JIr.forEach(t),iQe=r(f7," \u2014 "),sk=n(f7,"A",{href:!0});var YIr=s(sk);dQe=r(YIr,"AlbertTokenizer"),YIr.forEach(t),cQe=r(f7," or "),lk=n(f7,"A",{href:!0});var KIr=s(lk);fQe=r(KIr,"AlbertTokenizerFast"),KIr.forEach(t),mQe=r(f7," (ALBERT model)"),f7.forEach(t),gQe=i(w),Wn=n(w,"LI",{});var m7=s(Wn);JK=n(m7,"STRONG",{});var ZIr=s(JK);hQe=r(ZIr,"bart"),ZIr.forEach(t),uQe=r(m7," \u2014 "),ik=n(m7,"A",{href:!0});var eqr=s(ik);pQe=r(eqr,"BartTokenizer"),eqr.forEach(t),_Qe=r(m7," or "),dk=n(m7,"A",{href:!0});var oqr=s(dk);vQe=r(oqr,"BartTokenizerFast"),oqr.forEach(t),bQe=r(m7," (BART model)"),m7.forEach(t),FQe=i(w),Hn=n(w,"LI",{});var g7=s(Hn);YK=n(g7,"STRONG",{});var rqr=s(YK);TQe=r(rqr,"barthez"),rqr.forEach(t),MQe=r(g7," \u2014 "),ck=n(g7,"A",{href:!0});var tqr=s(ck);EQe=r(tqr,"BarthezTokenizer"),tqr.forEach(t),CQe=r(g7," or "),fk=n(g7,"A",{href:!0});var aqr=s(fk);wQe=r(aqr,"BarthezTokenizerFast"),aqr.forEach(t),AQe=r(g7," (BARThez model)"),g7.forEach(t),yQe=i(w),qg=n(w,"LI",{});var nMe=s(qg);KK=n(nMe,"STRONG",{});var nqr=s(KK);LQe=r(nqr,"bartpho"),nqr.forEach(t),xQe=r(nMe," \u2014 "),mk=n(nMe,"A",{href:!0});var sqr=s(mk);kQe=r(sqr,"BartphoTokenizer"),sqr.forEach(t),SQe=r(nMe," (BARTpho model)"),nMe.forEach(t),RQe=i(w),Un=n(w,"LI",{});var h7=s(Un);ZK=n(h7,"STRONG",{});var lqr=s(ZK);BQe=r(lqr,"bert"),lqr.forEach(t),PQe=r(h7," \u2014 "),gk=n(h7,"A",{href:!0});var iqr=s(gk);$Qe=r(iqr,"BertTokenizer"),iqr.forEach(t),IQe=r(h7," or "),hk=n(h7,"A",{href:!0});var dqr=s(hk);qQe=r(dqr,"BertTokenizerFast"),dqr.forEach(t),NQe=r(h7," (BERT model)"),h7.forEach(t),jQe=i(w),Ng=n(w,"LI",{});var sMe=s(Ng);eZ=n(sMe,"STRONG",{});var cqr=s(eZ);DQe=r(cqr,"bert-generation"),cqr.forEach(t),GQe=r(sMe," \u2014 "),uk=n(sMe,"A",{href:!0});var fqr=s(uk);OQe=r(fqr,"BertGenerationTokenizer"),fqr.forEach(t),VQe=r(sMe," (Bert Generation model)"),sMe.forEach(t),XQe=i(w),jg=n(w,"LI",{});var lMe=s(jg);oZ=n(lMe,"STRONG",{});var mqr=s(oZ);zQe=r(mqr,"bert-japanese"),mqr.forEach(t),QQe=r(lMe," \u2014 "),pk=n(lMe,"A",{href:!0});var gqr=s(pk);WQe=r(gqr,"BertJapaneseTokenizer"),gqr.forEach(t),HQe=r(lMe," (BertJapanese model)"),lMe.forEach(t),UQe=i(w),Dg=n(w,"LI",{});var iMe=s(Dg);rZ=n(iMe,"STRONG",{});var hqr=s(rZ);JQe=r(hqr,"bertweet"),hqr.forEach(t),YQe=r(iMe," \u2014 "),_k=n(iMe,"A",{href:!0});var uqr=s(_k);KQe=r(uqr,"BertweetTokenizer"),uqr.forEach(t),ZQe=r(iMe," (Bertweet model)"),iMe.forEach(t),eWe=i(w),Jn=n(w,"LI",{});var u7=s(Jn);tZ=n(u7,"STRONG",{});var pqr=s(tZ);oWe=r(pqr,"big_bird"),pqr.forEach(t),rWe=r(u7," \u2014 "),vk=n(u7,"A",{href:!0});var _qr=s(vk);tWe=r(_qr,"BigBirdTokenizer"),_qr.forEach(t),aWe=r(u7," or "),bk=n(u7,"A",{href:!0});var vqr=s(bk);nWe=r(vqr,"BigBirdTokenizerFast"),vqr.forEach(t),sWe=r(u7," (BigBird model)"),u7.forEach(t),lWe=i(w),Yn=n(w,"LI",{});var p7=s(Yn);aZ=n(p7,"STRONG",{});var bqr=s(aZ);iWe=r(bqr,"bigbird_pegasus"),bqr.forEach(t),dWe=r(p7," \u2014 "),Fk=n(p7,"A",{href:!0});var Fqr=s(Fk);cWe=r(Fqr,"PegasusTokenizer"),Fqr.forEach(t),fWe=r(p7," or "),Tk=n(p7,"A",{href:!0});var Tqr=s(Tk);mWe=r(Tqr,"PegasusTokenizerFast"),Tqr.forEach(t),gWe=r(p7," (BigBirdPegasus model)"),p7.forEach(t),hWe=i(w),Kn=n(w,"LI",{});var _7=s(Kn);nZ=n(_7,"STRONG",{});var Mqr=s(nZ);uWe=r(Mqr,"blenderbot"),Mqr.forEach(t),pWe=r(_7," \u2014 "),Mk=n(_7,"A",{href:!0});var Eqr=s(Mk);_We=r(Eqr,"BlenderbotTokenizer"),Eqr.forEach(t),vWe=r(_7," or "),Ek=n(_7,"A",{href:!0});var Cqr=s(Ek);bWe=r(Cqr,"BlenderbotTokenizerFast"),Cqr.forEach(t),FWe=r(_7," (Blenderbot model)"),_7.forEach(t),TWe=i(w),Gg=n(w,"LI",{});var dMe=s(Gg);sZ=n(dMe,"STRONG",{});var wqr=s(sZ);MWe=r(wqr,"blenderbot-small"),wqr.forEach(t),EWe=r(dMe," \u2014 "),Ck=n(dMe,"A",{href:!0});var Aqr=s(Ck);CWe=r(Aqr,"BlenderbotSmallTokenizer"),Aqr.forEach(t),wWe=r(dMe," (BlenderbotSmall model)"),dMe.forEach(t),AWe=i(w),Og=n(w,"LI",{});var cMe=s(Og);lZ=n(cMe,"STRONG",{});var yqr=s(lZ);yWe=r(yqr,"byt5"),yqr.forEach(t),LWe=r(cMe," \u2014 "),wk=n(cMe,"A",{href:!0});var Lqr=s(wk);xWe=r(Lqr,"ByT5Tokenizer"),Lqr.forEach(t),kWe=r(cMe," (ByT5 model)"),cMe.forEach(t),SWe=i(w),Zn=n(w,"LI",{});var v7=s(Zn);iZ=n(v7,"STRONG",{});var xqr=s(iZ);RWe=r(xqr,"camembert"),xqr.forEach(t),BWe=r(v7," \u2014 "),Ak=n(v7,"A",{href:!0});var kqr=s(Ak);PWe=r(kqr,"CamembertTokenizer"),kqr.forEach(t),$We=r(v7," or "),yk=n(v7,"A",{href:!0});var Sqr=s(yk);IWe=r(Sqr,"CamembertTokenizerFast"),Sqr.forEach(t),qWe=r(v7," (CamemBERT model)"),v7.forEach(t),NWe=i(w),Vg=n(w,"LI",{});var fMe=s(Vg);dZ=n(fMe,"STRONG",{});var Rqr=s(dZ);jWe=r(Rqr,"canine"),Rqr.forEach(t),DWe=r(fMe," \u2014 "),Lk=n(fMe,"A",{href:!0});var Bqr=s(Lk);GWe=r(Bqr,"CanineTokenizer"),Bqr.forEach(t),OWe=r(fMe," (Canine model)"),fMe.forEach(t),VWe=i(w),es=n(w,"LI",{});var b7=s(es);cZ=n(b7,"STRONG",{});var Pqr=s(cZ);XWe=r(Pqr,"clip"),Pqr.forEach(t),zWe=r(b7," \u2014 "),xk=n(b7,"A",{href:!0});var $qr=s(xk);QWe=r($qr,"CLIPTokenizer"),$qr.forEach(t),WWe=r(b7," or "),kk=n(b7,"A",{href:!0});var Iqr=s(kk);HWe=r(Iqr,"CLIPTokenizerFast"),Iqr.forEach(t),UWe=r(b7," (CLIP model)"),b7.forEach(t),JWe=i(w),os=n(w,"LI",{});var F7=s(os);fZ=n(F7,"STRONG",{});var qqr=s(fZ);YWe=r(qqr,"convbert"),qqr.forEach(t),KWe=r(F7," \u2014 "),Sk=n(F7,"A",{href:!0});var Nqr=s(Sk);ZWe=r(Nqr,"ConvBertTokenizer"),Nqr.forEach(t),eHe=r(F7," or "),Rk=n(F7,"A",{href:!0});var jqr=s(Rk);oHe=r(jqr,"ConvBertTokenizerFast"),jqr.forEach(t),rHe=r(F7," (ConvBERT model)"),F7.forEach(t),tHe=i(w),rs=n(w,"LI",{});var T7=s(rs);mZ=n(T7,"STRONG",{});var Dqr=s(mZ);aHe=r(Dqr,"cpm"),Dqr.forEach(t),nHe=r(T7," \u2014 "),Bk=n(T7,"A",{href:!0});var Gqr=s(Bk);sHe=r(Gqr,"CpmTokenizer"),Gqr.forEach(t),lHe=r(T7," or "),gZ=n(T7,"CODE",{});var Oqr=s(gZ);iHe=r(Oqr,"CpmTokenizerFast"),Oqr.forEach(t),dHe=r(T7," (CPM model)"),T7.forEach(t),cHe=i(w),Xg=n(w,"LI",{});var mMe=s(Xg);hZ=n(mMe,"STRONG",{});var Vqr=s(hZ);fHe=r(Vqr,"ctrl"),Vqr.forEach(t),mHe=r(mMe," \u2014 "),Pk=n(mMe,"A",{href:!0});var Xqr=s(Pk);gHe=r(Xqr,"CTRLTokenizer"),Xqr.forEach(t),hHe=r(mMe," (CTRL model)"),mMe.forEach(t),uHe=i(w),ts=n(w,"LI",{});var M7=s(ts);uZ=n(M7,"STRONG",{});var zqr=s(uZ);pHe=r(zqr,"deberta"),zqr.forEach(t),_He=r(M7," \u2014 "),$k=n(M7,"A",{href:!0});var Qqr=s($k);vHe=r(Qqr,"DebertaTokenizer"),Qqr.forEach(t),bHe=r(M7," or "),Ik=n(M7,"A",{href:!0});var Wqr=s(Ik);FHe=r(Wqr,"DebertaTokenizerFast"),Wqr.forEach(t),THe=r(M7," (DeBERTa model)"),M7.forEach(t),MHe=i(w),zg=n(w,"LI",{});var gMe=s(zg);pZ=n(gMe,"STRONG",{});var Hqr=s(pZ);EHe=r(Hqr,"deberta-v2"),Hqr.forEach(t),CHe=r(gMe," \u2014 "),qk=n(gMe,"A",{href:!0});var Uqr=s(qk);wHe=r(Uqr,"DebertaV2Tokenizer"),Uqr.forEach(t),AHe=r(gMe," (DeBERTa-v2 model)"),gMe.forEach(t),yHe=i(w),as=n(w,"LI",{});var E7=s(as);_Z=n(E7,"STRONG",{});var Jqr=s(_Z);LHe=r(Jqr,"distilbert"),Jqr.forEach(t),xHe=r(E7," \u2014 "),Nk=n(E7,"A",{href:!0});var Yqr=s(Nk);kHe=r(Yqr,"DistilBertTokenizer"),Yqr.forEach(t),SHe=r(E7," or "),jk=n(E7,"A",{href:!0});var Kqr=s(jk);RHe=r(Kqr,"DistilBertTokenizerFast"),Kqr.forEach(t),BHe=r(E7," (DistilBERT model)"),E7.forEach(t),PHe=i(w),ns=n(w,"LI",{});var C7=s(ns);vZ=n(C7,"STRONG",{});var Zqr=s(vZ);$He=r(Zqr,"dpr"),Zqr.forEach(t),IHe=r(C7," \u2014 "),Dk=n(C7,"A",{href:!0});var eNr=s(Dk);qHe=r(eNr,"DPRQuestionEncoderTokenizer"),eNr.forEach(t),NHe=r(C7," or "),Gk=n(C7,"A",{href:!0});var oNr=s(Gk);jHe=r(oNr,"DPRQuestionEncoderTokenizerFast"),oNr.forEach(t),DHe=r(C7," (DPR model)"),C7.forEach(t),GHe=i(w),ss=n(w,"LI",{});var w7=s(ss);bZ=n(w7,"STRONG",{});var rNr=s(bZ);OHe=r(rNr,"electra"),rNr.forEach(t),VHe=r(w7," \u2014 "),Ok=n(w7,"A",{href:!0});var tNr=s(Ok);XHe=r(tNr,"ElectraTokenizer"),tNr.forEach(t),zHe=r(w7," or "),Vk=n(w7,"A",{href:!0});var aNr=s(Vk);QHe=r(aNr,"ElectraTokenizerFast"),aNr.forEach(t),WHe=r(w7," (ELECTRA model)"),w7.forEach(t),HHe=i(w),Qg=n(w,"LI",{});var hMe=s(Qg);FZ=n(hMe,"STRONG",{});var nNr=s(FZ);UHe=r(nNr,"flaubert"),nNr.forEach(t),JHe=r(hMe," \u2014 "),Xk=n(hMe,"A",{href:!0});var sNr=s(Xk);YHe=r(sNr,"FlaubertTokenizer"),sNr.forEach(t),KHe=r(hMe," (FlauBERT model)"),hMe.forEach(t),ZHe=i(w),ls=n(w,"LI",{});var A7=s(ls);TZ=n(A7,"STRONG",{});var lNr=s(TZ);eUe=r(lNr,"fnet"),lNr.forEach(t),oUe=r(A7," \u2014 "),zk=n(A7,"A",{href:!0});var iNr=s(zk);rUe=r(iNr,"FNetTokenizer"),iNr.forEach(t),tUe=r(A7," or "),Qk=n(A7,"A",{href:!0});var dNr=s(Qk);aUe=r(dNr,"FNetTokenizerFast"),dNr.forEach(t),nUe=r(A7," (FNet model)"),A7.forEach(t),sUe=i(w),Wg=n(w,"LI",{});var uMe=s(Wg);MZ=n(uMe,"STRONG",{});var cNr=s(MZ);lUe=r(cNr,"fsmt"),cNr.forEach(t),iUe=r(uMe," \u2014 "),Wk=n(uMe,"A",{href:!0});var fNr=s(Wk);dUe=r(fNr,"FSMTTokenizer"),fNr.forEach(t),cUe=r(uMe," (FairSeq Machine-Translation model)"),uMe.forEach(t),fUe=i(w),is=n(w,"LI",{});var y7=s(is);EZ=n(y7,"STRONG",{});var mNr=s(EZ);mUe=r(mNr,"funnel"),mNr.forEach(t),gUe=r(y7," \u2014 "),Hk=n(y7,"A",{href:!0});var gNr=s(Hk);hUe=r(gNr,"FunnelTokenizer"),gNr.forEach(t),uUe=r(y7," or "),Uk=n(y7,"A",{href:!0});var hNr=s(Uk);pUe=r(hNr,"FunnelTokenizerFast"),hNr.forEach(t),_Ue=r(y7," (Funnel Transformer model)"),y7.forEach(t),vUe=i(w),ds=n(w,"LI",{});var L7=s(ds);CZ=n(L7,"STRONG",{});var uNr=s(CZ);bUe=r(uNr,"gpt2"),uNr.forEach(t),FUe=r(L7," \u2014 "),Jk=n(L7,"A",{href:!0});var pNr=s(Jk);TUe=r(pNr,"GPT2Tokenizer"),pNr.forEach(t),MUe=r(L7," or "),Yk=n(L7,"A",{href:!0});var _Nr=s(Yk);EUe=r(_Nr,"GPT2TokenizerFast"),_Nr.forEach(t),CUe=r(L7," (OpenAI GPT-2 model)"),L7.forEach(t),wUe=i(w),cs=n(w,"LI",{});var x7=s(cs);wZ=n(x7,"STRONG",{});var vNr=s(wZ);AUe=r(vNr,"gpt_neo"),vNr.forEach(t),yUe=r(x7," \u2014 "),Kk=n(x7,"A",{href:!0});var bNr=s(Kk);LUe=r(bNr,"GPT2Tokenizer"),bNr.forEach(t),xUe=r(x7," or "),Zk=n(x7,"A",{href:!0});var FNr=s(Zk);kUe=r(FNr,"GPT2TokenizerFast"),FNr.forEach(t),SUe=r(x7," (GPT Neo model)"),x7.forEach(t),RUe=i(w),fs=n(w,"LI",{});var k7=s(fs);AZ=n(k7,"STRONG",{});var TNr=s(AZ);BUe=r(TNr,"herbert"),TNr.forEach(t),PUe=r(k7," \u2014 "),eS=n(k7,"A",{href:!0});var MNr=s(eS);$Ue=r(MNr,"HerbertTokenizer"),MNr.forEach(t),IUe=r(k7," or "),oS=n(k7,"A",{href:!0});var ENr=s(oS);qUe=r(ENr,"HerbertTokenizerFast"),ENr.forEach(t),NUe=r(k7," (HerBERT model)"),k7.forEach(t),jUe=i(w),Hg=n(w,"LI",{});var pMe=s(Hg);yZ=n(pMe,"STRONG",{});var CNr=s(yZ);DUe=r(CNr,"hubert"),CNr.forEach(t),GUe=r(pMe," \u2014 "),rS=n(pMe,"A",{href:!0});var wNr=s(rS);OUe=r(wNr,"Wav2Vec2CTCTokenizer"),wNr.forEach(t),VUe=r(pMe," (Hubert model)"),pMe.forEach(t),XUe=i(w),ms=n(w,"LI",{});var S7=s(ms);LZ=n(S7,"STRONG",{});var ANr=s(LZ);zUe=r(ANr,"ibert"),ANr.forEach(t),QUe=r(S7," \u2014 "),tS=n(S7,"A",{href:!0});var yNr=s(tS);WUe=r(yNr,"RobertaTokenizer"),yNr.forEach(t),HUe=r(S7," or "),aS=n(S7,"A",{href:!0});var LNr=s(aS);UUe=r(LNr,"RobertaTokenizerFast"),LNr.forEach(t),JUe=r(S7," (I-BERT model)"),S7.forEach(t),YUe=i(w),gs=n(w,"LI",{});var R7=s(gs);xZ=n(R7,"STRONG",{});var xNr=s(xZ);KUe=r(xNr,"layoutlm"),xNr.forEach(t),ZUe=r(R7," \u2014 "),nS=n(R7,"A",{href:!0});var kNr=s(nS);eJe=r(kNr,"LayoutLMTokenizer"),kNr.forEach(t),oJe=r(R7," or "),sS=n(R7,"A",{href:!0});var SNr=s(sS);rJe=r(SNr,"LayoutLMTokenizerFast"),SNr.forEach(t),tJe=r(R7," (LayoutLM model)"),R7.forEach(t),aJe=i(w),hs=n(w,"LI",{});var B7=s(hs);kZ=n(B7,"STRONG",{});var RNr=s(kZ);nJe=r(RNr,"layoutlmv2"),RNr.forEach(t),sJe=r(B7," \u2014 "),lS=n(B7,"A",{href:!0});var BNr=s(lS);lJe=r(BNr,"LayoutLMv2Tokenizer"),BNr.forEach(t),iJe=r(B7," or "),iS=n(B7,"A",{href:!0});var PNr=s(iS);dJe=r(PNr,"LayoutLMv2TokenizerFast"),PNr.forEach(t),cJe=r(B7," (LayoutLMv2 model)"),B7.forEach(t),fJe=i(w),us=n(w,"LI",{});var P7=s(us);SZ=n(P7,"STRONG",{});var $Nr=s(SZ);mJe=r($Nr,"layoutxlm"),$Nr.forEach(t),gJe=r(P7," \u2014 "),dS=n(P7,"A",{href:!0});var INr=s(dS);hJe=r(INr,"LayoutXLMTokenizer"),INr.forEach(t),uJe=r(P7," or "),cS=n(P7,"A",{href:!0});var qNr=s(cS);pJe=r(qNr,"LayoutXLMTokenizerFast"),qNr.forEach(t),_Je=r(P7," (LayoutXLM model)"),P7.forEach(t),vJe=i(w),ps=n(w,"LI",{});var $7=s(ps);RZ=n($7,"STRONG",{});var NNr=s(RZ);bJe=r(NNr,"led"),NNr.forEach(t),FJe=r($7," \u2014 "),fS=n($7,"A",{href:!0});var jNr=s(fS);TJe=r(jNr,"LEDTokenizer"),jNr.forEach(t),MJe=r($7," or "),mS=n($7,"A",{href:!0});var DNr=s(mS);EJe=r(DNr,"LEDTokenizerFast"),DNr.forEach(t),CJe=r($7," (LED model)"),$7.forEach(t),wJe=i(w),_s=n(w,"LI",{});var I7=s(_s);BZ=n(I7,"STRONG",{});var GNr=s(BZ);AJe=r(GNr,"longformer"),GNr.forEach(t),yJe=r(I7," \u2014 "),gS=n(I7,"A",{href:!0});var ONr=s(gS);LJe=r(ONr,"LongformerTokenizer"),ONr.forEach(t),xJe=r(I7," or "),hS=n(I7,"A",{href:!0});var VNr=s(hS);kJe=r(VNr,"LongformerTokenizerFast"),VNr.forEach(t),SJe=r(I7," (Longformer model)"),I7.forEach(t),RJe=i(w),Ug=n(w,"LI",{});var _Me=s(Ug);PZ=n(_Me,"STRONG",{});var XNr=s(PZ);BJe=r(XNr,"luke"),XNr.forEach(t),PJe=r(_Me," \u2014 "),uS=n(_Me,"A",{href:!0});var zNr=s(uS);$Je=r(zNr,"LukeTokenizer"),zNr.forEach(t),IJe=r(_Me," (LUKE model)"),_Me.forEach(t),qJe=i(w),vs=n(w,"LI",{});var q7=s(vs);$Z=n(q7,"STRONG",{});var QNr=s($Z);NJe=r(QNr,"lxmert"),QNr.forEach(t),jJe=r(q7," \u2014 "),pS=n(q7,"A",{href:!0});var WNr=s(pS);DJe=r(WNr,"LxmertTokenizer"),WNr.forEach(t),GJe=r(q7," or "),_S=n(q7,"A",{href:!0});var HNr=s(_S);OJe=r(HNr,"LxmertTokenizerFast"),HNr.forEach(t),VJe=r(q7," (LXMERT model)"),q7.forEach(t),XJe=i(w),Jg=n(w,"LI",{});var vMe=s(Jg);IZ=n(vMe,"STRONG",{});var UNr=s(IZ);zJe=r(UNr,"m2m_100"),UNr.forEach(t),QJe=r(vMe," \u2014 "),vS=n(vMe,"A",{href:!0});var JNr=s(vS);WJe=r(JNr,"M2M100Tokenizer"),JNr.forEach(t),HJe=r(vMe," (M2M100 model)"),vMe.forEach(t),UJe=i(w),Yg=n(w,"LI",{});var bMe=s(Yg);qZ=n(bMe,"STRONG",{});var YNr=s(qZ);JJe=r(YNr,"marian"),YNr.forEach(t),YJe=r(bMe," \u2014 "),bS=n(bMe,"A",{href:!0});var KNr=s(bS);KJe=r(KNr,"MarianTokenizer"),KNr.forEach(t),ZJe=r(bMe," (Marian model)"),bMe.forEach(t),eYe=i(w),bs=n(w,"LI",{});var N7=s(bs);NZ=n(N7,"STRONG",{});var ZNr=s(NZ);oYe=r(ZNr,"mbart"),ZNr.forEach(t),rYe=r(N7," \u2014 "),FS=n(N7,"A",{href:!0});var ejr=s(FS);tYe=r(ejr,"MBartTokenizer"),ejr.forEach(t),aYe=r(N7," or "),TS=n(N7,"A",{href:!0});var ojr=s(TS);nYe=r(ojr,"MBartTokenizerFast"),ojr.forEach(t),sYe=r(N7," (mBART model)"),N7.forEach(t),lYe=i(w),Fs=n(w,"LI",{});var j7=s(Fs);jZ=n(j7,"STRONG",{});var rjr=s(jZ);iYe=r(rjr,"mbart50"),rjr.forEach(t),dYe=r(j7," \u2014 "),MS=n(j7,"A",{href:!0});var tjr=s(MS);cYe=r(tjr,"MBart50Tokenizer"),tjr.forEach(t),fYe=r(j7," or "),ES=n(j7,"A",{href:!0});var ajr=s(ES);mYe=r(ajr,"MBart50TokenizerFast"),ajr.forEach(t),gYe=r(j7," (mBART-50 model)"),j7.forEach(t),hYe=i(w),Kg=n(w,"LI",{});var FMe=s(Kg);DZ=n(FMe,"STRONG",{});var njr=s(DZ);uYe=r(njr,"mluke"),njr.forEach(t),pYe=r(FMe," \u2014 "),CS=n(FMe,"A",{href:!0});var sjr=s(CS);_Ye=r(sjr,"MLukeTokenizer"),sjr.forEach(t),vYe=r(FMe," (mLUKE model)"),FMe.forEach(t),bYe=i(w),Ts=n(w,"LI",{});var D7=s(Ts);GZ=n(D7,"STRONG",{});var ljr=s(GZ);FYe=r(ljr,"mobilebert"),ljr.forEach(t),TYe=r(D7," \u2014 "),wS=n(D7,"A",{href:!0});var ijr=s(wS);MYe=r(ijr,"MobileBertTokenizer"),ijr.forEach(t),EYe=r(D7," or "),AS=n(D7,"A",{href:!0});var djr=s(AS);CYe=r(djr,"MobileBertTokenizerFast"),djr.forEach(t),wYe=r(D7," (MobileBERT model)"),D7.forEach(t),AYe=i(w),Ms=n(w,"LI",{});var G7=s(Ms);OZ=n(G7,"STRONG",{});var cjr=s(OZ);yYe=r(cjr,"mpnet"),cjr.forEach(t),LYe=r(G7," \u2014 "),yS=n(G7,"A",{href:!0});var fjr=s(yS);xYe=r(fjr,"MPNetTokenizer"),fjr.forEach(t),kYe=r(G7," or "),LS=n(G7,"A",{href:!0});var mjr=s(LS);SYe=r(mjr,"MPNetTokenizerFast"),mjr.forEach(t),RYe=r(G7," (MPNet model)"),G7.forEach(t),BYe=i(w),Es=n(w,"LI",{});var O7=s(Es);VZ=n(O7,"STRONG",{});var gjr=s(VZ);PYe=r(gjr,"mt5"),gjr.forEach(t),$Ye=r(O7," \u2014 "),xS=n(O7,"A",{href:!0});var hjr=s(xS);IYe=r(hjr,"MT5Tokenizer"),hjr.forEach(t),qYe=r(O7," or "),kS=n(O7,"A",{href:!0});var ujr=s(kS);NYe=r(ujr,"MT5TokenizerFast"),ujr.forEach(t),jYe=r(O7," (mT5 model)"),O7.forEach(t),DYe=i(w),Cs=n(w,"LI",{});var V7=s(Cs);XZ=n(V7,"STRONG",{});var pjr=s(XZ);GYe=r(pjr,"openai-gpt"),pjr.forEach(t),OYe=r(V7," \u2014 "),SS=n(V7,"A",{href:!0});var _jr=s(SS);VYe=r(_jr,"OpenAIGPTTokenizer"),_jr.forEach(t),XYe=r(V7," or "),RS=n(V7,"A",{href:!0});var vjr=s(RS);zYe=r(vjr,"OpenAIGPTTokenizerFast"),vjr.forEach(t),QYe=r(V7," (OpenAI GPT model)"),V7.forEach(t),WYe=i(w),ws=n(w,"LI",{});var X7=s(ws);zZ=n(X7,"STRONG",{});var bjr=s(zZ);HYe=r(bjr,"pegasus"),bjr.forEach(t),UYe=r(X7," \u2014 "),BS=n(X7,"A",{href:!0});var Fjr=s(BS);JYe=r(Fjr,"PegasusTokenizer"),Fjr.forEach(t),YYe=r(X7," or "),PS=n(X7,"A",{href:!0});var Tjr=s(PS);KYe=r(Tjr,"PegasusTokenizerFast"),Tjr.forEach(t),ZYe=r(X7," (Pegasus model)"),X7.forEach(t),eKe=i(w),Zg=n(w,"LI",{});var TMe=s(Zg);QZ=n(TMe,"STRONG",{});var Mjr=s(QZ);oKe=r(Mjr,"perceiver"),Mjr.forEach(t),rKe=r(TMe," \u2014 "),$S=n(TMe,"A",{href:!0});var Ejr=s($S);tKe=r(Ejr,"PerceiverTokenizer"),Ejr.forEach(t),aKe=r(TMe," (Perceiver model)"),TMe.forEach(t),nKe=i(w),eh=n(w,"LI",{});var MMe=s(eh);WZ=n(MMe,"STRONG",{});var Cjr=s(WZ);sKe=r(Cjr,"phobert"),Cjr.forEach(t),lKe=r(MMe," \u2014 "),IS=n(MMe,"A",{href:!0});var wjr=s(IS);iKe=r(wjr,"PhobertTokenizer"),wjr.forEach(t),dKe=r(MMe," (PhoBERT model)"),MMe.forEach(t),cKe=i(w),oh=n(w,"LI",{});var EMe=s(oh);HZ=n(EMe,"STRONG",{});var Ajr=s(HZ);fKe=r(Ajr,"plbart"),Ajr.forEach(t),mKe=r(EMe," \u2014 "),qS=n(EMe,"A",{href:!0});var yjr=s(qS);gKe=r(yjr,"PLBartTokenizer"),yjr.forEach(t),hKe=r(EMe," (PLBart model)"),EMe.forEach(t),uKe=i(w),rh=n(w,"LI",{});var CMe=s(rh);UZ=n(CMe,"STRONG",{});var Ljr=s(UZ);pKe=r(Ljr,"prophetnet"),Ljr.forEach(t),_Ke=r(CMe," \u2014 "),NS=n(CMe,"A",{href:!0});var xjr=s(NS);vKe=r(xjr,"ProphetNetTokenizer"),xjr.forEach(t),bKe=r(CMe," (ProphetNet model)"),CMe.forEach(t),FKe=i(w),As=n(w,"LI",{});var z7=s(As);JZ=n(z7,"STRONG",{});var kjr=s(JZ);TKe=r(kjr,"qdqbert"),kjr.forEach(t),MKe=r(z7," \u2014 "),jS=n(z7,"A",{href:!0});var Sjr=s(jS);EKe=r(Sjr,"BertTokenizer"),Sjr.forEach(t),CKe=r(z7," or "),DS=n(z7,"A",{href:!0});var Rjr=s(DS);wKe=r(Rjr,"BertTokenizerFast"),Rjr.forEach(t),AKe=r(z7," (QDQBert model)"),z7.forEach(t),yKe=i(w),th=n(w,"LI",{});var wMe=s(th);YZ=n(wMe,"STRONG",{});var Bjr=s(YZ);LKe=r(Bjr,"rag"),Bjr.forEach(t),xKe=r(wMe," \u2014 "),GS=n(wMe,"A",{href:!0});var Pjr=s(GS);kKe=r(Pjr,"RagTokenizer"),Pjr.forEach(t),SKe=r(wMe," (RAG model)"),wMe.forEach(t),RKe=i(w),ys=n(w,"LI",{});var Q7=s(ys);KZ=n(Q7,"STRONG",{});var $jr=s(KZ);BKe=r($jr,"realm"),$jr.forEach(t),PKe=r(Q7," \u2014 "),OS=n(Q7,"A",{href:!0});var Ijr=s(OS);$Ke=r(Ijr,"RealmTokenizer"),Ijr.forEach(t),IKe=r(Q7," or "),VS=n(Q7,"A",{href:!0});var qjr=s(VS);qKe=r(qjr,"RealmTokenizerFast"),qjr.forEach(t),NKe=r(Q7," (Realm model)"),Q7.forEach(t),jKe=i(w),Ls=n(w,"LI",{});var W7=s(Ls);ZZ=n(W7,"STRONG",{});var Njr=s(ZZ);DKe=r(Njr,"reformer"),Njr.forEach(t),GKe=r(W7," \u2014 "),XS=n(W7,"A",{href:!0});var jjr=s(XS);OKe=r(jjr,"ReformerTokenizer"),jjr.forEach(t),VKe=r(W7," or "),zS=n(W7,"A",{href:!0});var Djr=s(zS);XKe=r(Djr,"ReformerTokenizerFast"),Djr.forEach(t),zKe=r(W7," (Reformer model)"),W7.forEach(t),QKe=i(w),xs=n(w,"LI",{});var H7=s(xs);eee=n(H7,"STRONG",{});var Gjr=s(eee);WKe=r(Gjr,"rembert"),Gjr.forEach(t),HKe=r(H7," \u2014 "),QS=n(H7,"A",{href:!0});var Ojr=s(QS);UKe=r(Ojr,"RemBertTokenizer"),Ojr.forEach(t),JKe=r(H7," or "),WS=n(H7,"A",{href:!0});var Vjr=s(WS);YKe=r(Vjr,"RemBertTokenizerFast"),Vjr.forEach(t),KKe=r(H7," (RemBERT model)"),H7.forEach(t),ZKe=i(w),ks=n(w,"LI",{});var U7=s(ks);oee=n(U7,"STRONG",{});var Xjr=s(oee);eZe=r(Xjr,"retribert"),Xjr.forEach(t),oZe=r(U7," \u2014 "),HS=n(U7,"A",{href:!0});var zjr=s(HS);rZe=r(zjr,"RetriBertTokenizer"),zjr.forEach(t),tZe=r(U7," or "),US=n(U7,"A",{href:!0});var Qjr=s(US);aZe=r(Qjr,"RetriBertTokenizerFast"),Qjr.forEach(t),nZe=r(U7," (RetriBERT model)"),U7.forEach(t),sZe=i(w),Ss=n(w,"LI",{});var J7=s(Ss);ree=n(J7,"STRONG",{});var Wjr=s(ree);lZe=r(Wjr,"roberta"),Wjr.forEach(t),iZe=r(J7," \u2014 "),JS=n(J7,"A",{href:!0});var Hjr=s(JS);dZe=r(Hjr,"RobertaTokenizer"),Hjr.forEach(t),cZe=r(J7," or "),YS=n(J7,"A",{href:!0});var Ujr=s(YS);fZe=r(Ujr,"RobertaTokenizerFast"),Ujr.forEach(t),mZe=r(J7," (RoBERTa model)"),J7.forEach(t),gZe=i(w),Rs=n(w,"LI",{});var Y7=s(Rs);tee=n(Y7,"STRONG",{});var Jjr=s(tee);hZe=r(Jjr,"roformer"),Jjr.forEach(t),uZe=r(Y7," \u2014 "),KS=n(Y7,"A",{href:!0});var Yjr=s(KS);pZe=r(Yjr,"RoFormerTokenizer"),Yjr.forEach(t),_Ze=r(Y7," or "),ZS=n(Y7,"A",{href:!0});var Kjr=s(ZS);vZe=r(Kjr,"RoFormerTokenizerFast"),Kjr.forEach(t),bZe=r(Y7," (RoFormer model)"),Y7.forEach(t),FZe=i(w),ah=n(w,"LI",{});var AMe=s(ah);aee=n(AMe,"STRONG",{});var Zjr=s(aee);TZe=r(Zjr,"speech_to_text"),Zjr.forEach(t),MZe=r(AMe," \u2014 "),eR=n(AMe,"A",{href:!0});var eDr=s(eR);EZe=r(eDr,"Speech2TextTokenizer"),eDr.forEach(t),CZe=r(AMe," (Speech2Text model)"),AMe.forEach(t),wZe=i(w),nh=n(w,"LI",{});var yMe=s(nh);nee=n(yMe,"STRONG",{});var oDr=s(nee);AZe=r(oDr,"speech_to_text_2"),oDr.forEach(t),yZe=r(yMe," \u2014 "),oR=n(yMe,"A",{href:!0});var rDr=s(oR);LZe=r(rDr,"Speech2Text2Tokenizer"),rDr.forEach(t),xZe=r(yMe," (Speech2Text2 model)"),yMe.forEach(t),kZe=i(w),Bs=n(w,"LI",{});var K7=s(Bs);see=n(K7,"STRONG",{});var tDr=s(see);SZe=r(tDr,"splinter"),tDr.forEach(t),RZe=r(K7," \u2014 "),rR=n(K7,"A",{href:!0});var aDr=s(rR);BZe=r(aDr,"SplinterTokenizer"),aDr.forEach(t),PZe=r(K7," or "),tR=n(K7,"A",{href:!0});var nDr=s(tR);$Ze=r(nDr,"SplinterTokenizerFast"),nDr.forEach(t),IZe=r(K7," (Splinter model)"),K7.forEach(t),qZe=i(w),Ps=n(w,"LI",{});var Z7=s(Ps);lee=n(Z7,"STRONG",{});var sDr=s(lee);NZe=r(sDr,"squeezebert"),sDr.forEach(t),jZe=r(Z7," \u2014 "),aR=n(Z7,"A",{href:!0});var lDr=s(aR);DZe=r(lDr,"SqueezeBertTokenizer"),lDr.forEach(t),GZe=r(Z7," or "),nR=n(Z7,"A",{href:!0});var iDr=s(nR);OZe=r(iDr,"SqueezeBertTokenizerFast"),iDr.forEach(t),VZe=r(Z7," (SqueezeBERT model)"),Z7.forEach(t),XZe=i(w),$s=n(w,"LI",{});var ex=s($s);iee=n(ex,"STRONG",{});var dDr=s(iee);zZe=r(dDr,"t5"),dDr.forEach(t),QZe=r(ex," \u2014 "),sR=n(ex,"A",{href:!0});var cDr=s(sR);WZe=r(cDr,"T5Tokenizer"),cDr.forEach(t),HZe=r(ex," or "),lR=n(ex,"A",{href:!0});var fDr=s(lR);UZe=r(fDr,"T5TokenizerFast"),fDr.forEach(t),JZe=r(ex," (T5 model)"),ex.forEach(t),YZe=i(w),sh=n(w,"LI",{});var LMe=s(sh);dee=n(LMe,"STRONG",{});var mDr=s(dee);KZe=r(mDr,"tapas"),mDr.forEach(t),ZZe=r(LMe," \u2014 "),iR=n(LMe,"A",{href:!0});var gDr=s(iR);eeo=r(gDr,"TapasTokenizer"),gDr.forEach(t),oeo=r(LMe," (TAPAS model)"),LMe.forEach(t),reo=i(w),lh=n(w,"LI",{});var xMe=s(lh);cee=n(xMe,"STRONG",{});var hDr=s(cee);teo=r(hDr,"transfo-xl"),hDr.forEach(t),aeo=r(xMe," \u2014 "),dR=n(xMe,"A",{href:!0});var uDr=s(dR);neo=r(uDr,"TransfoXLTokenizer"),uDr.forEach(t),seo=r(xMe," (Transformer-XL model)"),xMe.forEach(t),leo=i(w),ih=n(w,"LI",{});var kMe=s(ih);fee=n(kMe,"STRONG",{});var pDr=s(fee);ieo=r(pDr,"wav2vec2"),pDr.forEach(t),deo=r(kMe," \u2014 "),cR=n(kMe,"A",{href:!0});var _Dr=s(cR);ceo=r(_Dr,"Wav2Vec2CTCTokenizer"),_Dr.forEach(t),feo=r(kMe," (Wav2Vec2 model)"),kMe.forEach(t),meo=i(w),dh=n(w,"LI",{});var SMe=s(dh);mee=n(SMe,"STRONG",{});var vDr=s(mee);geo=r(vDr,"wav2vec2_phoneme"),vDr.forEach(t),heo=r(SMe," \u2014 "),fR=n(SMe,"A",{href:!0});var bDr=s(fR);ueo=r(bDr,"Wav2Vec2PhonemeCTCTokenizer"),bDr.forEach(t),peo=r(SMe," (Wav2Vec2Phoneme model)"),SMe.forEach(t),_eo=i(w),Is=n(w,"LI",{});var ox=s(Is);gee=n(ox,"STRONG",{});var FDr=s(gee);veo=r(FDr,"xglm"),FDr.forEach(t),beo=r(ox," \u2014 "),mR=n(ox,"A",{href:!0});var TDr=s(mR);Feo=r(TDr,"XGLMTokenizer"),TDr.forEach(t),Teo=r(ox," or "),gR=n(ox,"A",{href:!0});var MDr=s(gR);Meo=r(MDr,"XGLMTokenizerFast"),MDr.forEach(t),Eeo=r(ox," (XGLM model)"),ox.forEach(t),Ceo=i(w),ch=n(w,"LI",{});var RMe=s(ch);hee=n(RMe,"STRONG",{});var EDr=s(hee);weo=r(EDr,"xlm"),EDr.forEach(t),Aeo=r(RMe," \u2014 "),hR=n(RMe,"A",{href:!0});var CDr=s(hR);yeo=r(CDr,"XLMTokenizer"),CDr.forEach(t),Leo=r(RMe," (XLM model)"),RMe.forEach(t),xeo=i(w),fh=n(w,"LI",{});var BMe=s(fh);uee=n(BMe,"STRONG",{});var wDr=s(uee);keo=r(wDr,"xlm-prophetnet"),wDr.forEach(t),Seo=r(BMe," \u2014 "),uR=n(BMe,"A",{href:!0});var ADr=s(uR);Reo=r(ADr,"XLMProphetNetTokenizer"),ADr.forEach(t),Beo=r(BMe," (XLMProphetNet model)"),BMe.forEach(t),Peo=i(w),qs=n(w,"LI",{});var rx=s(qs);pee=n(rx,"STRONG",{});var yDr=s(pee);$eo=r(yDr,"xlm-roberta"),yDr.forEach(t),Ieo=r(rx," \u2014 "),pR=n(rx,"A",{href:!0});var LDr=s(pR);qeo=r(LDr,"XLMRobertaTokenizer"),LDr.forEach(t),Neo=r(rx," or "),_R=n(rx,"A",{href:!0});var xDr=s(_R);jeo=r(xDr,"XLMRobertaTokenizerFast"),xDr.forEach(t),Deo=r(rx," (XLM-RoBERTa model)"),rx.forEach(t),Geo=i(w),Ns=n(w,"LI",{});var tx=s(Ns);_ee=n(tx,"STRONG",{});var kDr=s(_ee);Oeo=r(kDr,"xlnet"),kDr.forEach(t),Veo=r(tx," \u2014 "),vR=n(tx,"A",{href:!0});var SDr=s(vR);Xeo=r(SDr,"XLNetTokenizer"),SDr.forEach(t),zeo=r(tx," or "),bR=n(tx,"A",{href:!0});var RDr=s(bR);Qeo=r(RDr,"XLNetTokenizerFast"),RDr.forEach(t),Weo=r(tx," (XLNet model)"),tx.forEach(t),w.forEach(t),Heo=i(ha),vee=n(ha,"P",{});var BDr=s(vee);Ueo=r(BDr,"Examples:"),BDr.forEach(t),Jeo=i(ha),m(B3.$$.fragment,ha),ha.forEach(t),Yeo=i(Vs),mh=n(Vs,"DIV",{class:!0});var JBe=s(mh);m(P3.$$.fragment,JBe),Keo=i(JBe),bee=n(JBe,"P",{});var PDr=s(bee);Zeo=r(PDr,"Register a new tokenizer in this mapping."),PDr.forEach(t),JBe.forEach(t),Vs.forEach(t),QSe=i(c),Wi=n(c,"H2",{class:!0});var YBe=s(Wi);gh=n(YBe,"A",{id:!0,class:!0,href:!0});var $Dr=s(gh);Fee=n($Dr,"SPAN",{});var IDr=s(Fee);m($3.$$.fragment,IDr),IDr.forEach(t),$Dr.forEach(t),eoo=i(YBe),Tee=n(YBe,"SPAN",{});var qDr=s(Tee);ooo=r(qDr,"AutoFeatureExtractor"),qDr.forEach(t),YBe.forEach(t),WSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(I3.$$.fragment,Xs),roo=i(Xs),q3=n(Xs,"P",{});var KBe=s(q3);too=r(KBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FR=n(KBe,"A",{href:!0});var NDr=s(FR);aoo=r(NDr,"AutoFeatureExtractor.from_pretrained()"),NDr.forEach(t),noo=r(KBe," class method."),KBe.forEach(t),soo=i(Xs),N3=n(Xs,"P",{});var ZBe=s(N3);loo=r(ZBe,"This class cannot be instantiated directly using "),Mee=n(ZBe,"CODE",{});var jDr=s(Mee);ioo=r(jDr,"__init__()"),jDr.forEach(t),doo=r(ZBe," (throws an error)."),ZBe.forEach(t),coo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(j3.$$.fragment,Nt),foo=i(Nt),Eee=n(Nt,"P",{});var DDr=s(Eee);moo=r(DDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DDr.forEach(t),goo=i(Nt),Va=n(Nt,"P",{});var v5=s(Va);hoo=r(v5,"The feature extractor class to instantiate is selected based on the "),Cee=n(v5,"CODE",{});var GDr=s(Cee);uoo=r(GDr,"model_type"),GDr.forEach(t),poo=r(v5,` property of the config object
(either passed as an argument or loaded from `),wee=n(v5,"CODE",{});var ODr=s(wee);_oo=r(ODr,"pretrained_model_name_or_path"),ODr.forEach(t),voo=r(v5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Aee=n(v5,"CODE",{});var VDr=s(Aee);boo=r(VDr,"pretrained_model_name_or_path"),VDr.forEach(t),Foo=r(v5,":"),v5.forEach(t),Too=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var PMe=s(hh);yee=n(PMe,"STRONG",{});var XDr=s(yee);Moo=r(XDr,"beit"),XDr.forEach(t),Eoo=r(PMe," \u2014 "),TR=n(PMe,"A",{href:!0});var zDr=s(TR);Coo=r(zDr,"BeitFeatureExtractor"),zDr.forEach(t),woo=r(PMe," (BEiT model)"),PMe.forEach(t),Aoo=i(ne),uh=n(ne,"LI",{});var $Me=s(uh);Lee=n($Me,"STRONG",{});var QDr=s(Lee);yoo=r(QDr,"clip"),QDr.forEach(t),Loo=r($Me," \u2014 "),MR=n($Me,"A",{href:!0});var WDr=s(MR);xoo=r(WDr,"CLIPFeatureExtractor"),WDr.forEach(t),koo=r($Me," (CLIP model)"),$Me.forEach(t),Soo=i(ne),ph=n(ne,"LI",{});var IMe=s(ph);xee=n(IMe,"STRONG",{});var HDr=s(xee);Roo=r(HDr,"convnext"),HDr.forEach(t),Boo=r(IMe," \u2014 "),ER=n(IMe,"A",{href:!0});var UDr=s(ER);Poo=r(UDr,"ConvNextFeatureExtractor"),UDr.forEach(t),$oo=r(IMe," (ConvNext model)"),IMe.forEach(t),Ioo=i(ne),_h=n(ne,"LI",{});var qMe=s(_h);kee=n(qMe,"STRONG",{});var JDr=s(kee);qoo=r(JDr,"deit"),JDr.forEach(t),Noo=r(qMe," \u2014 "),CR=n(qMe,"A",{href:!0});var YDr=s(CR);joo=r(YDr,"DeiTFeatureExtractor"),YDr.forEach(t),Doo=r(qMe," (DeiT model)"),qMe.forEach(t),Goo=i(ne),vh=n(ne,"LI",{});var NMe=s(vh);See=n(NMe,"STRONG",{});var KDr=s(See);Ooo=r(KDr,"detr"),KDr.forEach(t),Voo=r(NMe," \u2014 "),wR=n(NMe,"A",{href:!0});var ZDr=s(wR);Xoo=r(ZDr,"DetrFeatureExtractor"),ZDr.forEach(t),zoo=r(NMe," (DETR model)"),NMe.forEach(t),Qoo=i(ne),bh=n(ne,"LI",{});var jMe=s(bh);Ree=n(jMe,"STRONG",{});var eGr=s(Ree);Woo=r(eGr,"hubert"),eGr.forEach(t),Hoo=r(jMe," \u2014 "),AR=n(jMe,"A",{href:!0});var oGr=s(AR);Uoo=r(oGr,"Wav2Vec2FeatureExtractor"),oGr.forEach(t),Joo=r(jMe," (Hubert model)"),jMe.forEach(t),Yoo=i(ne),Fh=n(ne,"LI",{});var DMe=s(Fh);Bee=n(DMe,"STRONG",{});var rGr=s(Bee);Koo=r(rGr,"layoutlmv2"),rGr.forEach(t),Zoo=r(DMe," \u2014 "),yR=n(DMe,"A",{href:!0});var tGr=s(yR);ero=r(tGr,"LayoutLMv2FeatureExtractor"),tGr.forEach(t),oro=r(DMe," (LayoutLMv2 model)"),DMe.forEach(t),rro=i(ne),Th=n(ne,"LI",{});var GMe=s(Th);Pee=n(GMe,"STRONG",{});var aGr=s(Pee);tro=r(aGr,"maskformer"),aGr.forEach(t),aro=r(GMe," \u2014 "),LR=n(GMe,"A",{href:!0});var nGr=s(LR);nro=r(nGr,"MaskFormerFeatureExtractor"),nGr.forEach(t),sro=r(GMe," (MaskFormer model)"),GMe.forEach(t),lro=i(ne),Mh=n(ne,"LI",{});var OMe=s(Mh);$ee=n(OMe,"STRONG",{});var sGr=s($ee);iro=r(sGr,"perceiver"),sGr.forEach(t),dro=r(OMe," \u2014 "),xR=n(OMe,"A",{href:!0});var lGr=s(xR);cro=r(lGr,"PerceiverFeatureExtractor"),lGr.forEach(t),fro=r(OMe," (Perceiver model)"),OMe.forEach(t),mro=i(ne),Eh=n(ne,"LI",{});var VMe=s(Eh);Iee=n(VMe,"STRONG",{});var iGr=s(Iee);gro=r(iGr,"poolformer"),iGr.forEach(t),hro=r(VMe," \u2014 "),kR=n(VMe,"A",{href:!0});var dGr=s(kR);uro=r(dGr,"PoolFormerFeatureExtractor"),dGr.forEach(t),pro=r(VMe," (PoolFormer model)"),VMe.forEach(t),_ro=i(ne),Ch=n(ne,"LI",{});var XMe=s(Ch);qee=n(XMe,"STRONG",{});var cGr=s(qee);vro=r(cGr,"resnet"),cGr.forEach(t),bro=r(XMe," \u2014 "),SR=n(XMe,"A",{href:!0});var fGr=s(SR);Fro=r(fGr,"ConvNextFeatureExtractor"),fGr.forEach(t),Tro=r(XMe," (ResNet model)"),XMe.forEach(t),Mro=i(ne),wh=n(ne,"LI",{});var zMe=s(wh);Nee=n(zMe,"STRONG",{});var mGr=s(Nee);Ero=r(mGr,"segformer"),mGr.forEach(t),Cro=r(zMe," \u2014 "),RR=n(zMe,"A",{href:!0});var gGr=s(RR);wro=r(gGr,"SegformerFeatureExtractor"),gGr.forEach(t),Aro=r(zMe," (SegFormer model)"),zMe.forEach(t),yro=i(ne),Ah=n(ne,"LI",{});var QMe=s(Ah);jee=n(QMe,"STRONG",{});var hGr=s(jee);Lro=r(hGr,"speech_to_text"),hGr.forEach(t),xro=r(QMe," \u2014 "),BR=n(QMe,"A",{href:!0});var uGr=s(BR);kro=r(uGr,"Speech2TextFeatureExtractor"),uGr.forEach(t),Sro=r(QMe," (Speech2Text model)"),QMe.forEach(t),Rro=i(ne),yh=n(ne,"LI",{});var WMe=s(yh);Dee=n(WMe,"STRONG",{});var pGr=s(Dee);Bro=r(pGr,"swin"),pGr.forEach(t),Pro=r(WMe," \u2014 "),PR=n(WMe,"A",{href:!0});var _Gr=s(PR);$ro=r(_Gr,"ViTFeatureExtractor"),_Gr.forEach(t),Iro=r(WMe," (Swin model)"),WMe.forEach(t),qro=i(ne),Lh=n(ne,"LI",{});var HMe=s(Lh);Gee=n(HMe,"STRONG",{});var vGr=s(Gee);Nro=r(vGr,"van"),vGr.forEach(t),jro=r(HMe," \u2014 "),$R=n(HMe,"A",{href:!0});var bGr=s($R);Dro=r(bGr,"ConvNextFeatureExtractor"),bGr.forEach(t),Gro=r(HMe," (VAN model)"),HMe.forEach(t),Oro=i(ne),xh=n(ne,"LI",{});var UMe=s(xh);Oee=n(UMe,"STRONG",{});var FGr=s(Oee);Vro=r(FGr,"vit"),FGr.forEach(t),Xro=r(UMe," \u2014 "),IR=n(UMe,"A",{href:!0});var TGr=s(IR);zro=r(TGr,"ViTFeatureExtractor"),TGr.forEach(t),Qro=r(UMe," (ViT model)"),UMe.forEach(t),Wro=i(ne),kh=n(ne,"LI",{});var JMe=s(kh);Vee=n(JMe,"STRONG",{});var MGr=s(Vee);Hro=r(MGr,"vit_mae"),MGr.forEach(t),Uro=r(JMe," \u2014 "),qR=n(JMe,"A",{href:!0});var EGr=s(qR);Jro=r(EGr,"ViTFeatureExtractor"),EGr.forEach(t),Yro=r(JMe," (ViTMAE model)"),JMe.forEach(t),Kro=i(ne),Sh=n(ne,"LI",{});var YMe=s(Sh);Xee=n(YMe,"STRONG",{});var CGr=s(Xee);Zro=r(CGr,"wav2vec2"),CGr.forEach(t),eto=r(YMe," \u2014 "),NR=n(YMe,"A",{href:!0});var wGr=s(NR);oto=r(wGr,"Wav2Vec2FeatureExtractor"),wGr.forEach(t),rto=r(YMe," (Wav2Vec2 model)"),YMe.forEach(t),ne.forEach(t),tto=i(Nt),m(Rh.$$.fragment,Nt),ato=i(Nt),zee=n(Nt,"P",{});var AGr=s(zee);nto=r(AGr,"Examples:"),AGr.forEach(t),sto=i(Nt),m(D3.$$.fragment,Nt),Nt.forEach(t),lto=i(Xs),Bh=n(Xs,"DIV",{class:!0});var ePe=s(Bh);m(G3.$$.fragment,ePe),ito=i(ePe),Qee=n(ePe,"P",{});var yGr=s(Qee);dto=r(yGr,"Register a new feature extractor for this class."),yGr.forEach(t),ePe.forEach(t),Xs.forEach(t),HSe=i(c),Hi=n(c,"H2",{class:!0});var oPe=s(Hi);Ph=n(oPe,"A",{id:!0,class:!0,href:!0});var LGr=s(Ph);Wee=n(LGr,"SPAN",{});var xGr=s(Wee);m(O3.$$.fragment,xGr),xGr.forEach(t),LGr.forEach(t),cto=i(oPe),Hee=n(oPe,"SPAN",{});var kGr=s(Hee);fto=r(kGr,"AutoProcessor"),kGr.forEach(t),oPe.forEach(t),USe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(V3.$$.fragment,zs),mto=i(zs),X3=n(zs,"P",{});var rPe=s(X3);gto=r(rPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=n(rPe,"A",{href:!0});var SGr=s(jR);hto=r(SGr,"AutoProcessor.from_pretrained()"),SGr.forEach(t),uto=r(rPe," class method."),rPe.forEach(t),pto=i(zs),z3=n(zs,"P",{});var tPe=s(z3);_to=r(tPe,"This class cannot be instantiated directly using "),Uee=n(tPe,"CODE",{});var RGr=s(Uee);vto=r(RGr,"__init__()"),RGr.forEach(t),bto=r(tPe," (throws an error)."),tPe.forEach(t),Fto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(Q3.$$.fragment,jt),Tto=i(jt),Jee=n(jt,"P",{});var BGr=s(Jee);Mto=r(BGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BGr.forEach(t),Eto=i(jt),Ui=n(jt,"P",{});var HH=s(Ui);Cto=r(HH,"The processor class to instantiate is selected based on the "),Yee=n(HH,"CODE",{});var PGr=s(Yee);wto=r(PGr,"model_type"),PGr.forEach(t),Ato=r(HH,` property of the config object (either
passed as an argument or loaded from `),Kee=n(HH,"CODE",{});var $Gr=s(Kee);yto=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),Lto=r(HH," if possible):"),HH.forEach(t),xto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var KMe=s($h);Zee=n(KMe,"STRONG",{});var IGr=s(Zee);kto=r(IGr,"clip"),IGr.forEach(t),Sto=r(KMe," \u2014 "),DR=n(KMe,"A",{href:!0});var qGr=s(DR);Rto=r(qGr,"CLIPProcessor"),qGr.forEach(t),Bto=r(KMe," (CLIP model)"),KMe.forEach(t),Pto=i(jo),Ih=n(jo,"LI",{});var ZMe=s(Ih);eoe=n(ZMe,"STRONG",{});var NGr=s(eoe);$to=r(NGr,"layoutlmv2"),NGr.forEach(t),Ito=r(ZMe," \u2014 "),GR=n(ZMe,"A",{href:!0});var jGr=s(GR);qto=r(jGr,"LayoutLMv2Processor"),jGr.forEach(t),Nto=r(ZMe," (LayoutLMv2 model)"),ZMe.forEach(t),jto=i(jo),qh=n(jo,"LI",{});var eEe=s(qh);ooe=n(eEe,"STRONG",{});var DGr=s(ooe);Dto=r(DGr,"layoutxlm"),DGr.forEach(t),Gto=r(eEe," \u2014 "),OR=n(eEe,"A",{href:!0});var GGr=s(OR);Oto=r(GGr,"LayoutXLMProcessor"),GGr.forEach(t),Vto=r(eEe," (LayoutXLM model)"),eEe.forEach(t),Xto=i(jo),Nh=n(jo,"LI",{});var oEe=s(Nh);roe=n(oEe,"STRONG",{});var OGr=s(roe);zto=r(OGr,"speech_to_text"),OGr.forEach(t),Qto=r(oEe," \u2014 "),VR=n(oEe,"A",{href:!0});var VGr=s(VR);Wto=r(VGr,"Speech2TextProcessor"),VGr.forEach(t),Hto=r(oEe," (Speech2Text model)"),oEe.forEach(t),Uto=i(jo),jh=n(jo,"LI",{});var rEe=s(jh);toe=n(rEe,"STRONG",{});var XGr=s(toe);Jto=r(XGr,"speech_to_text_2"),XGr.forEach(t),Yto=r(rEe," \u2014 "),XR=n(rEe,"A",{href:!0});var zGr=s(XR);Kto=r(zGr,"Speech2Text2Processor"),zGr.forEach(t),Zto=r(rEe," (Speech2Text2 model)"),rEe.forEach(t),eao=i(jo),Dh=n(jo,"LI",{});var tEe=s(Dh);aoe=n(tEe,"STRONG",{});var QGr=s(aoe);oao=r(QGr,"trocr"),QGr.forEach(t),rao=r(tEe," \u2014 "),zR=n(tEe,"A",{href:!0});var WGr=s(zR);tao=r(WGr,"TrOCRProcessor"),WGr.forEach(t),aao=r(tEe," (TrOCR model)"),tEe.forEach(t),nao=i(jo),Gh=n(jo,"LI",{});var aEe=s(Gh);noe=n(aEe,"STRONG",{});var HGr=s(noe);sao=r(HGr,"vision-text-dual-encoder"),HGr.forEach(t),lao=r(aEe," \u2014 "),QR=n(aEe,"A",{href:!0});var UGr=s(QR);iao=r(UGr,"VisionTextDualEncoderProcessor"),UGr.forEach(t),dao=r(aEe," (VisionTextDualEncoder model)"),aEe.forEach(t),cao=i(jo),Oh=n(jo,"LI",{});var nEe=s(Oh);soe=n(nEe,"STRONG",{});var JGr=s(soe);fao=r(JGr,"wav2vec2"),JGr.forEach(t),mao=r(nEe," \u2014 "),WR=n(nEe,"A",{href:!0});var YGr=s(WR);gao=r(YGr,"Wav2Vec2Processor"),YGr.forEach(t),hao=r(nEe," (Wav2Vec2 model)"),nEe.forEach(t),jo.forEach(t),uao=i(jt),m(Vh.$$.fragment,jt),pao=i(jt),loe=n(jt,"P",{});var KGr=s(loe);_ao=r(KGr,"Examples:"),KGr.forEach(t),vao=i(jt),m(W3.$$.fragment,jt),jt.forEach(t),bao=i(zs),Xh=n(zs,"DIV",{class:!0});var aPe=s(Xh);m(H3.$$.fragment,aPe),Fao=i(aPe),ioe=n(aPe,"P",{});var ZGr=s(ioe);Tao=r(ZGr,"Register a new processor for this class."),ZGr.forEach(t),aPe.forEach(t),zs.forEach(t),JSe=i(c),Ji=n(c,"H2",{class:!0});var nPe=s(Ji);zh=n(nPe,"A",{id:!0,class:!0,href:!0});var eOr=s(zh);doe=n(eOr,"SPAN",{});var oOr=s(doe);m(U3.$$.fragment,oOr),oOr.forEach(t),eOr.forEach(t),Mao=i(nPe),coe=n(nPe,"SPAN",{});var rOr=s(coe);Eao=r(rOr,"AutoModel"),rOr.forEach(t),nPe.forEach(t),YSe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(J3.$$.fragment,Qs),Cao=i(Qs),Yi=n(Qs,"P",{});var UH=s(Yi);wao=r(UH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=n(UH,"A",{href:!0});var tOr=s(HR);Aao=r(tOr,"from_pretrained()"),tOr.forEach(t),yao=r(UH," class method or the "),UR=n(UH,"A",{href:!0});var aOr=s(UR);Lao=r(aOr,"from_config()"),aOr.forEach(t),xao=r(UH,` class
method.`),UH.forEach(t),kao=i(Qs),Y3=n(Qs,"P",{});var sPe=s(Y3);Sao=r(sPe,"This class cannot be instantiated directly using "),foe=n(sPe,"CODE",{});var nOr=s(foe);Rao=r(nOr,"__init__()"),nOr.forEach(t),Bao=r(sPe," (throws an error)."),sPe.forEach(t),Pao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(K3.$$.fragment,Ws),$ao=i(Ws),moe=n(Ws,"P",{});var sOr=s(moe);Iao=r(sOr,"Instantiates one of the base model classes of the library from a configuration."),sOr.forEach(t),qao=i(Ws),Ki=n(Ws,"P",{});var JH=s(Ki);Nao=r(JH,`Note:
Loading a model from its configuration file does `),goe=n(JH,"STRONG",{});var lOr=s(goe);jao=r(lOr,"not"),lOr.forEach(t),Dao=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=n(JH,"A",{href:!0});var iOr=s(JR);Gao=r(iOr,"from_pretrained()"),iOr.forEach(t),Oao=r(JH," to load the model weights."),JH.forEach(t),Vao=i(Ws),hoe=n(Ws,"P",{});var dOr=s(hoe);Xao=r(dOr,"Examples:"),dOr.forEach(t),zao=i(Ws),m(Z3.$$.fragment,Ws),Ws.forEach(t),Qao=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(eC.$$.fragment,Dt),Wao=i(Dt),uoe=n(Dt,"P",{});var cOr=s(uoe);Hao=r(cOr,"Instantiate one of the base model classes of the library from a pretrained model."),cOr.forEach(t),Uao=i(Dt),Xa=n(Dt,"P",{});var b5=s(Xa);Jao=r(b5,"The model class to instantiate is selected based on the "),poe=n(b5,"CODE",{});var fOr=s(poe);Yao=r(fOr,"model_type"),fOr.forEach(t),Kao=r(b5,` property of the config object (either
passed as an argument or loaded from `),_oe=n(b5,"CODE",{});var mOr=s(_oe);Zao=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),eno=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=n(b5,"CODE",{});var gOr=s(voe);ono=r(gOr,"pretrained_model_name_or_path"),gOr.forEach(t),rno=r(b5,":"),b5.forEach(t),tno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var sEe=s(Qh);boe=n(sEe,"STRONG",{});var hOr=s(boe);ano=r(hOr,"albert"),hOr.forEach(t),nno=r(sEe," \u2014 "),YR=n(sEe,"A",{href:!0});var uOr=s(YR);sno=r(uOr,"AlbertModel"),uOr.forEach(t),lno=r(sEe," (ALBERT model)"),sEe.forEach(t),ino=i(M),Wh=n(M,"LI",{});var lEe=s(Wh);Foe=n(lEe,"STRONG",{});var pOr=s(Foe);dno=r(pOr,"bart"),pOr.forEach(t),cno=r(lEe," \u2014 "),KR=n(lEe,"A",{href:!0});var _Or=s(KR);fno=r(_Or,"BartModel"),_Or.forEach(t),mno=r(lEe," (BART model)"),lEe.forEach(t),gno=i(M),Hh=n(M,"LI",{});var iEe=s(Hh);Toe=n(iEe,"STRONG",{});var vOr=s(Toe);hno=r(vOr,"beit"),vOr.forEach(t),uno=r(iEe," \u2014 "),ZR=n(iEe,"A",{href:!0});var bOr=s(ZR);pno=r(bOr,"BeitModel"),bOr.forEach(t),_no=r(iEe," (BEiT model)"),iEe.forEach(t),vno=i(M),Uh=n(M,"LI",{});var dEe=s(Uh);Moe=n(dEe,"STRONG",{});var FOr=s(Moe);bno=r(FOr,"bert"),FOr.forEach(t),Fno=r(dEe," \u2014 "),eB=n(dEe,"A",{href:!0});var TOr=s(eB);Tno=r(TOr,"BertModel"),TOr.forEach(t),Mno=r(dEe," (BERT model)"),dEe.forEach(t),Eno=i(M),Jh=n(M,"LI",{});var cEe=s(Jh);Eoe=n(cEe,"STRONG",{});var MOr=s(Eoe);Cno=r(MOr,"bert-generation"),MOr.forEach(t),wno=r(cEe," \u2014 "),oB=n(cEe,"A",{href:!0});var EOr=s(oB);Ano=r(EOr,"BertGenerationEncoder"),EOr.forEach(t),yno=r(cEe," (Bert Generation model)"),cEe.forEach(t),Lno=i(M),Yh=n(M,"LI",{});var fEe=s(Yh);Coe=n(fEe,"STRONG",{});var COr=s(Coe);xno=r(COr,"big_bird"),COr.forEach(t),kno=r(fEe," \u2014 "),rB=n(fEe,"A",{href:!0});var wOr=s(rB);Sno=r(wOr,"BigBirdModel"),wOr.forEach(t),Rno=r(fEe," (BigBird model)"),fEe.forEach(t),Bno=i(M),Kh=n(M,"LI",{});var mEe=s(Kh);woe=n(mEe,"STRONG",{});var AOr=s(woe);Pno=r(AOr,"bigbird_pegasus"),AOr.forEach(t),$no=r(mEe," \u2014 "),tB=n(mEe,"A",{href:!0});var yOr=s(tB);Ino=r(yOr,"BigBirdPegasusModel"),yOr.forEach(t),qno=r(mEe," (BigBirdPegasus model)"),mEe.forEach(t),Nno=i(M),Zh=n(M,"LI",{});var gEe=s(Zh);Aoe=n(gEe,"STRONG",{});var LOr=s(Aoe);jno=r(LOr,"blenderbot"),LOr.forEach(t),Dno=r(gEe," \u2014 "),aB=n(gEe,"A",{href:!0});var xOr=s(aB);Gno=r(xOr,"BlenderbotModel"),xOr.forEach(t),Ono=r(gEe," (Blenderbot model)"),gEe.forEach(t),Vno=i(M),eu=n(M,"LI",{});var hEe=s(eu);yoe=n(hEe,"STRONG",{});var kOr=s(yoe);Xno=r(kOr,"blenderbot-small"),kOr.forEach(t),zno=r(hEe," \u2014 "),nB=n(hEe,"A",{href:!0});var SOr=s(nB);Qno=r(SOr,"BlenderbotSmallModel"),SOr.forEach(t),Wno=r(hEe," (BlenderbotSmall model)"),hEe.forEach(t),Hno=i(M),ou=n(M,"LI",{});var uEe=s(ou);Loe=n(uEe,"STRONG",{});var ROr=s(Loe);Uno=r(ROr,"camembert"),ROr.forEach(t),Jno=r(uEe," \u2014 "),sB=n(uEe,"A",{href:!0});var BOr=s(sB);Yno=r(BOr,"CamembertModel"),BOr.forEach(t),Kno=r(uEe," (CamemBERT model)"),uEe.forEach(t),Zno=i(M),ru=n(M,"LI",{});var pEe=s(ru);xoe=n(pEe,"STRONG",{});var POr=s(xoe);eso=r(POr,"canine"),POr.forEach(t),oso=r(pEe," \u2014 "),lB=n(pEe,"A",{href:!0});var $Or=s(lB);rso=r($Or,"CanineModel"),$Or.forEach(t),tso=r(pEe," (Canine model)"),pEe.forEach(t),aso=i(M),tu=n(M,"LI",{});var _Ee=s(tu);koe=n(_Ee,"STRONG",{});var IOr=s(koe);nso=r(IOr,"clip"),IOr.forEach(t),sso=r(_Ee," \u2014 "),iB=n(_Ee,"A",{href:!0});var qOr=s(iB);lso=r(qOr,"CLIPModel"),qOr.forEach(t),iso=r(_Ee," (CLIP model)"),_Ee.forEach(t),dso=i(M),au=n(M,"LI",{});var vEe=s(au);Soe=n(vEe,"STRONG",{});var NOr=s(Soe);cso=r(NOr,"convbert"),NOr.forEach(t),fso=r(vEe," \u2014 "),dB=n(vEe,"A",{href:!0});var jOr=s(dB);mso=r(jOr,"ConvBertModel"),jOr.forEach(t),gso=r(vEe," (ConvBERT model)"),vEe.forEach(t),hso=i(M),nu=n(M,"LI",{});var bEe=s(nu);Roe=n(bEe,"STRONG",{});var DOr=s(Roe);uso=r(DOr,"convnext"),DOr.forEach(t),pso=r(bEe," \u2014 "),cB=n(bEe,"A",{href:!0});var GOr=s(cB);_so=r(GOr,"ConvNextModel"),GOr.forEach(t),vso=r(bEe," (ConvNext model)"),bEe.forEach(t),bso=i(M),su=n(M,"LI",{});var FEe=s(su);Boe=n(FEe,"STRONG",{});var OOr=s(Boe);Fso=r(OOr,"ctrl"),OOr.forEach(t),Tso=r(FEe," \u2014 "),fB=n(FEe,"A",{href:!0});var VOr=s(fB);Mso=r(VOr,"CTRLModel"),VOr.forEach(t),Eso=r(FEe," (CTRL model)"),FEe.forEach(t),Cso=i(M),lu=n(M,"LI",{});var TEe=s(lu);Poe=n(TEe,"STRONG",{});var XOr=s(Poe);wso=r(XOr,"data2vec-audio"),XOr.forEach(t),Aso=r(TEe," \u2014 "),mB=n(TEe,"A",{href:!0});var zOr=s(mB);yso=r(zOr,"Data2VecAudioModel"),zOr.forEach(t),Lso=r(TEe," (Data2VecAudio model)"),TEe.forEach(t),xso=i(M),iu=n(M,"LI",{});var MEe=s(iu);$oe=n(MEe,"STRONG",{});var QOr=s($oe);kso=r(QOr,"data2vec-text"),QOr.forEach(t),Sso=r(MEe," \u2014 "),gB=n(MEe,"A",{href:!0});var WOr=s(gB);Rso=r(WOr,"Data2VecTextModel"),WOr.forEach(t),Bso=r(MEe," (Data2VecText model)"),MEe.forEach(t),Pso=i(M),du=n(M,"LI",{});var EEe=s(du);Ioe=n(EEe,"STRONG",{});var HOr=s(Ioe);$so=r(HOr,"deberta"),HOr.forEach(t),Iso=r(EEe," \u2014 "),hB=n(EEe,"A",{href:!0});var UOr=s(hB);qso=r(UOr,"DebertaModel"),UOr.forEach(t),Nso=r(EEe," (DeBERTa model)"),EEe.forEach(t),jso=i(M),cu=n(M,"LI",{});var CEe=s(cu);qoe=n(CEe,"STRONG",{});var JOr=s(qoe);Dso=r(JOr,"deberta-v2"),JOr.forEach(t),Gso=r(CEe," \u2014 "),uB=n(CEe,"A",{href:!0});var YOr=s(uB);Oso=r(YOr,"DebertaV2Model"),YOr.forEach(t),Vso=r(CEe," (DeBERTa-v2 model)"),CEe.forEach(t),Xso=i(M),fu=n(M,"LI",{});var wEe=s(fu);Noe=n(wEe,"STRONG",{});var KOr=s(Noe);zso=r(KOr,"decision_transformer"),KOr.forEach(t),Qso=r(wEe," \u2014 "),pB=n(wEe,"A",{href:!0});var ZOr=s(pB);Wso=r(ZOr,"DecisionTransformerModel"),ZOr.forEach(t),Hso=r(wEe," (Decision Transformer model)"),wEe.forEach(t),Uso=i(M),mu=n(M,"LI",{});var AEe=s(mu);joe=n(AEe,"STRONG",{});var eVr=s(joe);Jso=r(eVr,"deit"),eVr.forEach(t),Yso=r(AEe," \u2014 "),_B=n(AEe,"A",{href:!0});var oVr=s(_B);Kso=r(oVr,"DeiTModel"),oVr.forEach(t),Zso=r(AEe," (DeiT model)"),AEe.forEach(t),elo=i(M),gu=n(M,"LI",{});var yEe=s(gu);Doe=n(yEe,"STRONG",{});var rVr=s(Doe);olo=r(rVr,"detr"),rVr.forEach(t),rlo=r(yEe," \u2014 "),vB=n(yEe,"A",{href:!0});var tVr=s(vB);tlo=r(tVr,"DetrModel"),tVr.forEach(t),alo=r(yEe," (DETR model)"),yEe.forEach(t),nlo=i(M),hu=n(M,"LI",{});var LEe=s(hu);Goe=n(LEe,"STRONG",{});var aVr=s(Goe);slo=r(aVr,"distilbert"),aVr.forEach(t),llo=r(LEe," \u2014 "),bB=n(LEe,"A",{href:!0});var nVr=s(bB);ilo=r(nVr,"DistilBertModel"),nVr.forEach(t),dlo=r(LEe," (DistilBERT model)"),LEe.forEach(t),clo=i(M),uu=n(M,"LI",{});var xEe=s(uu);Ooe=n(xEe,"STRONG",{});var sVr=s(Ooe);flo=r(sVr,"dpr"),sVr.forEach(t),mlo=r(xEe," \u2014 "),FB=n(xEe,"A",{href:!0});var lVr=s(FB);glo=r(lVr,"DPRQuestionEncoder"),lVr.forEach(t),hlo=r(xEe," (DPR model)"),xEe.forEach(t),ulo=i(M),pu=n(M,"LI",{});var kEe=s(pu);Voe=n(kEe,"STRONG",{});var iVr=s(Voe);plo=r(iVr,"dpt"),iVr.forEach(t),_lo=r(kEe," \u2014 "),TB=n(kEe,"A",{href:!0});var dVr=s(TB);vlo=r(dVr,"DPTModel"),dVr.forEach(t),blo=r(kEe," (DPT model)"),kEe.forEach(t),Flo=i(M),_u=n(M,"LI",{});var SEe=s(_u);Xoe=n(SEe,"STRONG",{});var cVr=s(Xoe);Tlo=r(cVr,"electra"),cVr.forEach(t),Mlo=r(SEe," \u2014 "),MB=n(SEe,"A",{href:!0});var fVr=s(MB);Elo=r(fVr,"ElectraModel"),fVr.forEach(t),Clo=r(SEe," (ELECTRA model)"),SEe.forEach(t),wlo=i(M),vu=n(M,"LI",{});var REe=s(vu);zoe=n(REe,"STRONG",{});var mVr=s(zoe);Alo=r(mVr,"flaubert"),mVr.forEach(t),ylo=r(REe," \u2014 "),EB=n(REe,"A",{href:!0});var gVr=s(EB);Llo=r(gVr,"FlaubertModel"),gVr.forEach(t),xlo=r(REe," (FlauBERT model)"),REe.forEach(t),klo=i(M),bu=n(M,"LI",{});var BEe=s(bu);Qoe=n(BEe,"STRONG",{});var hVr=s(Qoe);Slo=r(hVr,"fnet"),hVr.forEach(t),Rlo=r(BEe," \u2014 "),CB=n(BEe,"A",{href:!0});var uVr=s(CB);Blo=r(uVr,"FNetModel"),uVr.forEach(t),Plo=r(BEe," (FNet model)"),BEe.forEach(t),$lo=i(M),Fu=n(M,"LI",{});var PEe=s(Fu);Woe=n(PEe,"STRONG",{});var pVr=s(Woe);Ilo=r(pVr,"fsmt"),pVr.forEach(t),qlo=r(PEe," \u2014 "),wB=n(PEe,"A",{href:!0});var _Vr=s(wB);Nlo=r(_Vr,"FSMTModel"),_Vr.forEach(t),jlo=r(PEe," (FairSeq Machine-Translation model)"),PEe.forEach(t),Dlo=i(M),js=n(M,"LI",{});var ax=s(js);Hoe=n(ax,"STRONG",{});var vVr=s(Hoe);Glo=r(vVr,"funnel"),vVr.forEach(t),Olo=r(ax," \u2014 "),AB=n(ax,"A",{href:!0});var bVr=s(AB);Vlo=r(bVr,"FunnelModel"),bVr.forEach(t),Xlo=r(ax," or "),yB=n(ax,"A",{href:!0});var FVr=s(yB);zlo=r(FVr,"FunnelBaseModel"),FVr.forEach(t),Qlo=r(ax," (Funnel Transformer model)"),ax.forEach(t),Wlo=i(M),Tu=n(M,"LI",{});var $Ee=s(Tu);Uoe=n($Ee,"STRONG",{});var TVr=s(Uoe);Hlo=r(TVr,"glpn"),TVr.forEach(t),Ulo=r($Ee," \u2014 "),LB=n($Ee,"A",{href:!0});var MVr=s(LB);Jlo=r(MVr,"GLPNModel"),MVr.forEach(t),Ylo=r($Ee," (GLPN model)"),$Ee.forEach(t),Klo=i(M),Mu=n(M,"LI",{});var IEe=s(Mu);Joe=n(IEe,"STRONG",{});var EVr=s(Joe);Zlo=r(EVr,"gpt2"),EVr.forEach(t),eio=r(IEe," \u2014 "),xB=n(IEe,"A",{href:!0});var CVr=s(xB);oio=r(CVr,"GPT2Model"),CVr.forEach(t),rio=r(IEe," (OpenAI GPT-2 model)"),IEe.forEach(t),tio=i(M),Eu=n(M,"LI",{});var qEe=s(Eu);Yoe=n(qEe,"STRONG",{});var wVr=s(Yoe);aio=r(wVr,"gpt_neo"),wVr.forEach(t),nio=r(qEe," \u2014 "),kB=n(qEe,"A",{href:!0});var AVr=s(kB);sio=r(AVr,"GPTNeoModel"),AVr.forEach(t),lio=r(qEe," (GPT Neo model)"),qEe.forEach(t),iio=i(M),Cu=n(M,"LI",{});var NEe=s(Cu);Koe=n(NEe,"STRONG",{});var yVr=s(Koe);dio=r(yVr,"gptj"),yVr.forEach(t),cio=r(NEe," \u2014 "),SB=n(NEe,"A",{href:!0});var LVr=s(SB);fio=r(LVr,"GPTJModel"),LVr.forEach(t),mio=r(NEe," (GPT-J model)"),NEe.forEach(t),gio=i(M),wu=n(M,"LI",{});var jEe=s(wu);Zoe=n(jEe,"STRONG",{});var xVr=s(Zoe);hio=r(xVr,"hubert"),xVr.forEach(t),uio=r(jEe," \u2014 "),RB=n(jEe,"A",{href:!0});var kVr=s(RB);pio=r(kVr,"HubertModel"),kVr.forEach(t),_io=r(jEe," (Hubert model)"),jEe.forEach(t),vio=i(M),Au=n(M,"LI",{});var DEe=s(Au);ere=n(DEe,"STRONG",{});var SVr=s(ere);bio=r(SVr,"ibert"),SVr.forEach(t),Fio=r(DEe," \u2014 "),BB=n(DEe,"A",{href:!0});var RVr=s(BB);Tio=r(RVr,"IBertModel"),RVr.forEach(t),Mio=r(DEe," (I-BERT model)"),DEe.forEach(t),Eio=i(M),yu=n(M,"LI",{});var GEe=s(yu);ore=n(GEe,"STRONG",{});var BVr=s(ore);Cio=r(BVr,"imagegpt"),BVr.forEach(t),wio=r(GEe," \u2014 "),PB=n(GEe,"A",{href:!0});var PVr=s(PB);Aio=r(PVr,"ImageGPTModel"),PVr.forEach(t),yio=r(GEe," (ImageGPT model)"),GEe.forEach(t),Lio=i(M),Lu=n(M,"LI",{});var OEe=s(Lu);rre=n(OEe,"STRONG",{});var $Vr=s(rre);xio=r($Vr,"layoutlm"),$Vr.forEach(t),kio=r(OEe," \u2014 "),$B=n(OEe,"A",{href:!0});var IVr=s($B);Sio=r(IVr,"LayoutLMModel"),IVr.forEach(t),Rio=r(OEe," (LayoutLM model)"),OEe.forEach(t),Bio=i(M),xu=n(M,"LI",{});var VEe=s(xu);tre=n(VEe,"STRONG",{});var qVr=s(tre);Pio=r(qVr,"layoutlmv2"),qVr.forEach(t),$io=r(VEe," \u2014 "),IB=n(VEe,"A",{href:!0});var NVr=s(IB);Iio=r(NVr,"LayoutLMv2Model"),NVr.forEach(t),qio=r(VEe," (LayoutLMv2 model)"),VEe.forEach(t),Nio=i(M),ku=n(M,"LI",{});var XEe=s(ku);are=n(XEe,"STRONG",{});var jVr=s(are);jio=r(jVr,"led"),jVr.forEach(t),Dio=r(XEe," \u2014 "),qB=n(XEe,"A",{href:!0});var DVr=s(qB);Gio=r(DVr,"LEDModel"),DVr.forEach(t),Oio=r(XEe," (LED model)"),XEe.forEach(t),Vio=i(M),Su=n(M,"LI",{});var zEe=s(Su);nre=n(zEe,"STRONG",{});var GVr=s(nre);Xio=r(GVr,"longformer"),GVr.forEach(t),zio=r(zEe," \u2014 "),NB=n(zEe,"A",{href:!0});var OVr=s(NB);Qio=r(OVr,"LongformerModel"),OVr.forEach(t),Wio=r(zEe," (Longformer model)"),zEe.forEach(t),Hio=i(M),Ru=n(M,"LI",{});var QEe=s(Ru);sre=n(QEe,"STRONG",{});var VVr=s(sre);Uio=r(VVr,"luke"),VVr.forEach(t),Jio=r(QEe," \u2014 "),jB=n(QEe,"A",{href:!0});var XVr=s(jB);Yio=r(XVr,"LukeModel"),XVr.forEach(t),Kio=r(QEe," (LUKE model)"),QEe.forEach(t),Zio=i(M),Bu=n(M,"LI",{});var WEe=s(Bu);lre=n(WEe,"STRONG",{});var zVr=s(lre);edo=r(zVr,"lxmert"),zVr.forEach(t),odo=r(WEe," \u2014 "),DB=n(WEe,"A",{href:!0});var QVr=s(DB);rdo=r(QVr,"LxmertModel"),QVr.forEach(t),tdo=r(WEe," (LXMERT model)"),WEe.forEach(t),ado=i(M),Pu=n(M,"LI",{});var HEe=s(Pu);ire=n(HEe,"STRONG",{});var WVr=s(ire);ndo=r(WVr,"m2m_100"),WVr.forEach(t),sdo=r(HEe," \u2014 "),GB=n(HEe,"A",{href:!0});var HVr=s(GB);ldo=r(HVr,"M2M100Model"),HVr.forEach(t),ido=r(HEe," (M2M100 model)"),HEe.forEach(t),ddo=i(M),$u=n(M,"LI",{});var UEe=s($u);dre=n(UEe,"STRONG",{});var UVr=s(dre);cdo=r(UVr,"marian"),UVr.forEach(t),fdo=r(UEe," \u2014 "),OB=n(UEe,"A",{href:!0});var JVr=s(OB);mdo=r(JVr,"MarianModel"),JVr.forEach(t),gdo=r(UEe," (Marian model)"),UEe.forEach(t),hdo=i(M),Iu=n(M,"LI",{});var JEe=s(Iu);cre=n(JEe,"STRONG",{});var YVr=s(cre);udo=r(YVr,"maskformer"),YVr.forEach(t),pdo=r(JEe," \u2014 "),VB=n(JEe,"A",{href:!0});var KVr=s(VB);_do=r(KVr,"MaskFormerModel"),KVr.forEach(t),vdo=r(JEe," (MaskFormer model)"),JEe.forEach(t),bdo=i(M),qu=n(M,"LI",{});var YEe=s(qu);fre=n(YEe,"STRONG",{});var ZVr=s(fre);Fdo=r(ZVr,"mbart"),ZVr.forEach(t),Tdo=r(YEe," \u2014 "),XB=n(YEe,"A",{href:!0});var eXr=s(XB);Mdo=r(eXr,"MBartModel"),eXr.forEach(t),Edo=r(YEe," (mBART model)"),YEe.forEach(t),Cdo=i(M),Nu=n(M,"LI",{});var KEe=s(Nu);mre=n(KEe,"STRONG",{});var oXr=s(mre);wdo=r(oXr,"megatron-bert"),oXr.forEach(t),Ado=r(KEe," \u2014 "),zB=n(KEe,"A",{href:!0});var rXr=s(zB);ydo=r(rXr,"MegatronBertModel"),rXr.forEach(t),Ldo=r(KEe," (MegatronBert model)"),KEe.forEach(t),xdo=i(M),ju=n(M,"LI",{});var ZEe=s(ju);gre=n(ZEe,"STRONG",{});var tXr=s(gre);kdo=r(tXr,"mobilebert"),tXr.forEach(t),Sdo=r(ZEe," \u2014 "),QB=n(ZEe,"A",{href:!0});var aXr=s(QB);Rdo=r(aXr,"MobileBertModel"),aXr.forEach(t),Bdo=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),Pdo=i(M),Du=n(M,"LI",{});var e5e=s(Du);hre=n(e5e,"STRONG",{});var nXr=s(hre);$do=r(nXr,"mpnet"),nXr.forEach(t),Ido=r(e5e," \u2014 "),WB=n(e5e,"A",{href:!0});var sXr=s(WB);qdo=r(sXr,"MPNetModel"),sXr.forEach(t),Ndo=r(e5e," (MPNet model)"),e5e.forEach(t),jdo=i(M),Gu=n(M,"LI",{});var o5e=s(Gu);ure=n(o5e,"STRONG",{});var lXr=s(ure);Ddo=r(lXr,"mt5"),lXr.forEach(t),Gdo=r(o5e," \u2014 "),HB=n(o5e,"A",{href:!0});var iXr=s(HB);Odo=r(iXr,"MT5Model"),iXr.forEach(t),Vdo=r(o5e," (mT5 model)"),o5e.forEach(t),Xdo=i(M),Ou=n(M,"LI",{});var r5e=s(Ou);pre=n(r5e,"STRONG",{});var dXr=s(pre);zdo=r(dXr,"nystromformer"),dXr.forEach(t),Qdo=r(r5e," \u2014 "),UB=n(r5e,"A",{href:!0});var cXr=s(UB);Wdo=r(cXr,"NystromformerModel"),cXr.forEach(t),Hdo=r(r5e," (Nystromformer model)"),r5e.forEach(t),Udo=i(M),Vu=n(M,"LI",{});var t5e=s(Vu);_re=n(t5e,"STRONG",{});var fXr=s(_re);Jdo=r(fXr,"openai-gpt"),fXr.forEach(t),Ydo=r(t5e," \u2014 "),JB=n(t5e,"A",{href:!0});var mXr=s(JB);Kdo=r(mXr,"OpenAIGPTModel"),mXr.forEach(t),Zdo=r(t5e," (OpenAI GPT model)"),t5e.forEach(t),eco=i(M),Xu=n(M,"LI",{});var a5e=s(Xu);vre=n(a5e,"STRONG",{});var gXr=s(vre);oco=r(gXr,"pegasus"),gXr.forEach(t),rco=r(a5e," \u2014 "),YB=n(a5e,"A",{href:!0});var hXr=s(YB);tco=r(hXr,"PegasusModel"),hXr.forEach(t),aco=r(a5e," (Pegasus model)"),a5e.forEach(t),nco=i(M),zu=n(M,"LI",{});var n5e=s(zu);bre=n(n5e,"STRONG",{});var uXr=s(bre);sco=r(uXr,"perceiver"),uXr.forEach(t),lco=r(n5e," \u2014 "),KB=n(n5e,"A",{href:!0});var pXr=s(KB);ico=r(pXr,"PerceiverModel"),pXr.forEach(t),dco=r(n5e," (Perceiver model)"),n5e.forEach(t),cco=i(M),Qu=n(M,"LI",{});var s5e=s(Qu);Fre=n(s5e,"STRONG",{});var _Xr=s(Fre);fco=r(_Xr,"plbart"),_Xr.forEach(t),mco=r(s5e," \u2014 "),ZB=n(s5e,"A",{href:!0});var vXr=s(ZB);gco=r(vXr,"PLBartModel"),vXr.forEach(t),hco=r(s5e," (PLBart model)"),s5e.forEach(t),uco=i(M),Wu=n(M,"LI",{});var l5e=s(Wu);Tre=n(l5e,"STRONG",{});var bXr=s(Tre);pco=r(bXr,"poolformer"),bXr.forEach(t),_co=r(l5e," \u2014 "),eP=n(l5e,"A",{href:!0});var FXr=s(eP);vco=r(FXr,"PoolFormerModel"),FXr.forEach(t),bco=r(l5e," (PoolFormer model)"),l5e.forEach(t),Fco=i(M),Hu=n(M,"LI",{});var i5e=s(Hu);Mre=n(i5e,"STRONG",{});var TXr=s(Mre);Tco=r(TXr,"prophetnet"),TXr.forEach(t),Mco=r(i5e," \u2014 "),oP=n(i5e,"A",{href:!0});var MXr=s(oP);Eco=r(MXr,"ProphetNetModel"),MXr.forEach(t),Cco=r(i5e," (ProphetNet model)"),i5e.forEach(t),wco=i(M),Uu=n(M,"LI",{});var d5e=s(Uu);Ere=n(d5e,"STRONG",{});var EXr=s(Ere);Aco=r(EXr,"qdqbert"),EXr.forEach(t),yco=r(d5e," \u2014 "),rP=n(d5e,"A",{href:!0});var CXr=s(rP);Lco=r(CXr,"QDQBertModel"),CXr.forEach(t),xco=r(d5e," (QDQBert model)"),d5e.forEach(t),kco=i(M),Ju=n(M,"LI",{});var c5e=s(Ju);Cre=n(c5e,"STRONG",{});var wXr=s(Cre);Sco=r(wXr,"reformer"),wXr.forEach(t),Rco=r(c5e," \u2014 "),tP=n(c5e,"A",{href:!0});var AXr=s(tP);Bco=r(AXr,"ReformerModel"),AXr.forEach(t),Pco=r(c5e," (Reformer model)"),c5e.forEach(t),$co=i(M),Yu=n(M,"LI",{});var f5e=s(Yu);wre=n(f5e,"STRONG",{});var yXr=s(wre);Ico=r(yXr,"rembert"),yXr.forEach(t),qco=r(f5e," \u2014 "),aP=n(f5e,"A",{href:!0});var LXr=s(aP);Nco=r(LXr,"RemBertModel"),LXr.forEach(t),jco=r(f5e," (RemBERT model)"),f5e.forEach(t),Dco=i(M),Ku=n(M,"LI",{});var m5e=s(Ku);Are=n(m5e,"STRONG",{});var xXr=s(Are);Gco=r(xXr,"resnet"),xXr.forEach(t),Oco=r(m5e," \u2014 "),nP=n(m5e,"A",{href:!0});var kXr=s(nP);Vco=r(kXr,"ResNetModel"),kXr.forEach(t),Xco=r(m5e," (ResNet model)"),m5e.forEach(t),zco=i(M),Zu=n(M,"LI",{});var g5e=s(Zu);yre=n(g5e,"STRONG",{});var SXr=s(yre);Qco=r(SXr,"retribert"),SXr.forEach(t),Wco=r(g5e," \u2014 "),sP=n(g5e,"A",{href:!0});var RXr=s(sP);Hco=r(RXr,"RetriBertModel"),RXr.forEach(t),Uco=r(g5e," (RetriBERT model)"),g5e.forEach(t),Jco=i(M),ep=n(M,"LI",{});var h5e=s(ep);Lre=n(h5e,"STRONG",{});var BXr=s(Lre);Yco=r(BXr,"roberta"),BXr.forEach(t),Kco=r(h5e," \u2014 "),lP=n(h5e,"A",{href:!0});var PXr=s(lP);Zco=r(PXr,"RobertaModel"),PXr.forEach(t),efo=r(h5e," (RoBERTa model)"),h5e.forEach(t),ofo=i(M),op=n(M,"LI",{});var u5e=s(op);xre=n(u5e,"STRONG",{});var $Xr=s(xre);rfo=r($Xr,"roformer"),$Xr.forEach(t),tfo=r(u5e," \u2014 "),iP=n(u5e,"A",{href:!0});var IXr=s(iP);afo=r(IXr,"RoFormerModel"),IXr.forEach(t),nfo=r(u5e," (RoFormer model)"),u5e.forEach(t),sfo=i(M),rp=n(M,"LI",{});var p5e=s(rp);kre=n(p5e,"STRONG",{});var qXr=s(kre);lfo=r(qXr,"segformer"),qXr.forEach(t),ifo=r(p5e," \u2014 "),dP=n(p5e,"A",{href:!0});var NXr=s(dP);dfo=r(NXr,"SegformerModel"),NXr.forEach(t),cfo=r(p5e," (SegFormer model)"),p5e.forEach(t),ffo=i(M),tp=n(M,"LI",{});var _5e=s(tp);Sre=n(_5e,"STRONG",{});var jXr=s(Sre);mfo=r(jXr,"sew"),jXr.forEach(t),gfo=r(_5e," \u2014 "),cP=n(_5e,"A",{href:!0});var DXr=s(cP);hfo=r(DXr,"SEWModel"),DXr.forEach(t),ufo=r(_5e," (SEW model)"),_5e.forEach(t),pfo=i(M),ap=n(M,"LI",{});var v5e=s(ap);Rre=n(v5e,"STRONG",{});var GXr=s(Rre);_fo=r(GXr,"sew-d"),GXr.forEach(t),vfo=r(v5e," \u2014 "),fP=n(v5e,"A",{href:!0});var OXr=s(fP);bfo=r(OXr,"SEWDModel"),OXr.forEach(t),Ffo=r(v5e," (SEW-D model)"),v5e.forEach(t),Tfo=i(M),np=n(M,"LI",{});var b5e=s(np);Bre=n(b5e,"STRONG",{});var VXr=s(Bre);Mfo=r(VXr,"speech_to_text"),VXr.forEach(t),Efo=r(b5e," \u2014 "),mP=n(b5e,"A",{href:!0});var XXr=s(mP);Cfo=r(XXr,"Speech2TextModel"),XXr.forEach(t),wfo=r(b5e," (Speech2Text model)"),b5e.forEach(t),Afo=i(M),sp=n(M,"LI",{});var F5e=s(sp);Pre=n(F5e,"STRONG",{});var zXr=s(Pre);yfo=r(zXr,"splinter"),zXr.forEach(t),Lfo=r(F5e," \u2014 "),gP=n(F5e,"A",{href:!0});var QXr=s(gP);xfo=r(QXr,"SplinterModel"),QXr.forEach(t),kfo=r(F5e," (Splinter model)"),F5e.forEach(t),Sfo=i(M),lp=n(M,"LI",{});var T5e=s(lp);$re=n(T5e,"STRONG",{});var WXr=s($re);Rfo=r(WXr,"squeezebert"),WXr.forEach(t),Bfo=r(T5e," \u2014 "),hP=n(T5e,"A",{href:!0});var HXr=s(hP);Pfo=r(HXr,"SqueezeBertModel"),HXr.forEach(t),$fo=r(T5e," (SqueezeBERT model)"),T5e.forEach(t),Ifo=i(M),ip=n(M,"LI",{});var M5e=s(ip);Ire=n(M5e,"STRONG",{});var UXr=s(Ire);qfo=r(UXr,"swin"),UXr.forEach(t),Nfo=r(M5e," \u2014 "),uP=n(M5e,"A",{href:!0});var JXr=s(uP);jfo=r(JXr,"SwinModel"),JXr.forEach(t),Dfo=r(M5e," (Swin model)"),M5e.forEach(t),Gfo=i(M),dp=n(M,"LI",{});var E5e=s(dp);qre=n(E5e,"STRONG",{});var YXr=s(qre);Ofo=r(YXr,"t5"),YXr.forEach(t),Vfo=r(E5e," \u2014 "),pP=n(E5e,"A",{href:!0});var KXr=s(pP);Xfo=r(KXr,"T5Model"),KXr.forEach(t),zfo=r(E5e," (T5 model)"),E5e.forEach(t),Qfo=i(M),cp=n(M,"LI",{});var C5e=s(cp);Nre=n(C5e,"STRONG",{});var ZXr=s(Nre);Wfo=r(ZXr,"tapas"),ZXr.forEach(t),Hfo=r(C5e," \u2014 "),_P=n(C5e,"A",{href:!0});var ezr=s(_P);Ufo=r(ezr,"TapasModel"),ezr.forEach(t),Jfo=r(C5e," (TAPAS model)"),C5e.forEach(t),Yfo=i(M),fp=n(M,"LI",{});var w5e=s(fp);jre=n(w5e,"STRONG",{});var ozr=s(jre);Kfo=r(ozr,"transfo-xl"),ozr.forEach(t),Zfo=r(w5e," \u2014 "),vP=n(w5e,"A",{href:!0});var rzr=s(vP);emo=r(rzr,"TransfoXLModel"),rzr.forEach(t),omo=r(w5e," (Transformer-XL model)"),w5e.forEach(t),rmo=i(M),mp=n(M,"LI",{});var A5e=s(mp);Dre=n(A5e,"STRONG",{});var tzr=s(Dre);tmo=r(tzr,"unispeech"),tzr.forEach(t),amo=r(A5e," \u2014 "),bP=n(A5e,"A",{href:!0});var azr=s(bP);nmo=r(azr,"UniSpeechModel"),azr.forEach(t),smo=r(A5e," (UniSpeech model)"),A5e.forEach(t),lmo=i(M),gp=n(M,"LI",{});var y5e=s(gp);Gre=n(y5e,"STRONG",{});var nzr=s(Gre);imo=r(nzr,"unispeech-sat"),nzr.forEach(t),dmo=r(y5e," \u2014 "),FP=n(y5e,"A",{href:!0});var szr=s(FP);cmo=r(szr,"UniSpeechSatModel"),szr.forEach(t),fmo=r(y5e," (UniSpeechSat model)"),y5e.forEach(t),mmo=i(M),hp=n(M,"LI",{});var L5e=s(hp);Ore=n(L5e,"STRONG",{});var lzr=s(Ore);gmo=r(lzr,"van"),lzr.forEach(t),hmo=r(L5e," \u2014 "),TP=n(L5e,"A",{href:!0});var izr=s(TP);umo=r(izr,"VanModel"),izr.forEach(t),pmo=r(L5e," (VAN model)"),L5e.forEach(t),_mo=i(M),up=n(M,"LI",{});var x5e=s(up);Vre=n(x5e,"STRONG",{});var dzr=s(Vre);vmo=r(dzr,"vilt"),dzr.forEach(t),bmo=r(x5e," \u2014 "),MP=n(x5e,"A",{href:!0});var czr=s(MP);Fmo=r(czr,"ViltModel"),czr.forEach(t),Tmo=r(x5e," (ViLT model)"),x5e.forEach(t),Mmo=i(M),pp=n(M,"LI",{});var k5e=s(pp);Xre=n(k5e,"STRONG",{});var fzr=s(Xre);Emo=r(fzr,"vision-text-dual-encoder"),fzr.forEach(t),Cmo=r(k5e," \u2014 "),EP=n(k5e,"A",{href:!0});var mzr=s(EP);wmo=r(mzr,"VisionTextDualEncoderModel"),mzr.forEach(t),Amo=r(k5e," (VisionTextDualEncoder model)"),k5e.forEach(t),ymo=i(M),_p=n(M,"LI",{});var S5e=s(_p);zre=n(S5e,"STRONG",{});var gzr=s(zre);Lmo=r(gzr,"visual_bert"),gzr.forEach(t),xmo=r(S5e," \u2014 "),CP=n(S5e,"A",{href:!0});var hzr=s(CP);kmo=r(hzr,"VisualBertModel"),hzr.forEach(t),Smo=r(S5e," (VisualBert model)"),S5e.forEach(t),Rmo=i(M),vp=n(M,"LI",{});var R5e=s(vp);Qre=n(R5e,"STRONG",{});var uzr=s(Qre);Bmo=r(uzr,"vit"),uzr.forEach(t),Pmo=r(R5e," \u2014 "),wP=n(R5e,"A",{href:!0});var pzr=s(wP);$mo=r(pzr,"ViTModel"),pzr.forEach(t),Imo=r(R5e," (ViT model)"),R5e.forEach(t),qmo=i(M),bp=n(M,"LI",{});var B5e=s(bp);Wre=n(B5e,"STRONG",{});var _zr=s(Wre);Nmo=r(_zr,"vit_mae"),_zr.forEach(t),jmo=r(B5e," \u2014 "),AP=n(B5e,"A",{href:!0});var vzr=s(AP);Dmo=r(vzr,"ViTMAEModel"),vzr.forEach(t),Gmo=r(B5e," (ViTMAE model)"),B5e.forEach(t),Omo=i(M),Fp=n(M,"LI",{});var P5e=s(Fp);Hre=n(P5e,"STRONG",{});var bzr=s(Hre);Vmo=r(bzr,"wav2vec2"),bzr.forEach(t),Xmo=r(P5e," \u2014 "),yP=n(P5e,"A",{href:!0});var Fzr=s(yP);zmo=r(Fzr,"Wav2Vec2Model"),Fzr.forEach(t),Qmo=r(P5e," (Wav2Vec2 model)"),P5e.forEach(t),Wmo=i(M),Tp=n(M,"LI",{});var $5e=s(Tp);Ure=n($5e,"STRONG",{});var Tzr=s(Ure);Hmo=r(Tzr,"wavlm"),Tzr.forEach(t),Umo=r($5e," \u2014 "),LP=n($5e,"A",{href:!0});var Mzr=s(LP);Jmo=r(Mzr,"WavLMModel"),Mzr.forEach(t),Ymo=r($5e," (WavLM model)"),$5e.forEach(t),Kmo=i(M),Mp=n(M,"LI",{});var I5e=s(Mp);Jre=n(I5e,"STRONG",{});var Ezr=s(Jre);Zmo=r(Ezr,"xglm"),Ezr.forEach(t),ego=r(I5e," \u2014 "),xP=n(I5e,"A",{href:!0});var Czr=s(xP);ogo=r(Czr,"XGLMModel"),Czr.forEach(t),rgo=r(I5e," (XGLM model)"),I5e.forEach(t),tgo=i(M),Ep=n(M,"LI",{});var q5e=s(Ep);Yre=n(q5e,"STRONG",{});var wzr=s(Yre);ago=r(wzr,"xlm"),wzr.forEach(t),ngo=r(q5e," \u2014 "),kP=n(q5e,"A",{href:!0});var Azr=s(kP);sgo=r(Azr,"XLMModel"),Azr.forEach(t),lgo=r(q5e," (XLM model)"),q5e.forEach(t),igo=i(M),Cp=n(M,"LI",{});var N5e=s(Cp);Kre=n(N5e,"STRONG",{});var yzr=s(Kre);dgo=r(yzr,"xlm-prophetnet"),yzr.forEach(t),cgo=r(N5e," \u2014 "),SP=n(N5e,"A",{href:!0});var Lzr=s(SP);fgo=r(Lzr,"XLMProphetNetModel"),Lzr.forEach(t),mgo=r(N5e," (XLMProphetNet model)"),N5e.forEach(t),ggo=i(M),wp=n(M,"LI",{});var j5e=s(wp);Zre=n(j5e,"STRONG",{});var xzr=s(Zre);hgo=r(xzr,"xlm-roberta"),xzr.forEach(t),ugo=r(j5e," \u2014 "),RP=n(j5e,"A",{href:!0});var kzr=s(RP);pgo=r(kzr,"XLMRobertaModel"),kzr.forEach(t),_go=r(j5e," (XLM-RoBERTa model)"),j5e.forEach(t),vgo=i(M),Ap=n(M,"LI",{});var D5e=s(Ap);ete=n(D5e,"STRONG",{});var Szr=s(ete);bgo=r(Szr,"xlm-roberta-xl"),Szr.forEach(t),Fgo=r(D5e," \u2014 "),BP=n(D5e,"A",{href:!0});var Rzr=s(BP);Tgo=r(Rzr,"XLMRobertaXLModel"),Rzr.forEach(t),Mgo=r(D5e," (XLM-RoBERTa-XL model)"),D5e.forEach(t),Ego=i(M),yp=n(M,"LI",{});var G5e=s(yp);ote=n(G5e,"STRONG",{});var Bzr=s(ote);Cgo=r(Bzr,"xlnet"),Bzr.forEach(t),wgo=r(G5e," \u2014 "),PP=n(G5e,"A",{href:!0});var Pzr=s(PP);Ago=r(Pzr,"XLNetModel"),Pzr.forEach(t),ygo=r(G5e," (XLNet model)"),G5e.forEach(t),Lgo=i(M),Lp=n(M,"LI",{});var O5e=s(Lp);rte=n(O5e,"STRONG",{});var $zr=s(rte);xgo=r($zr,"yoso"),$zr.forEach(t),kgo=r(O5e," \u2014 "),$P=n(O5e,"A",{href:!0});var Izr=s($P);Sgo=r(Izr,"YosoModel"),Izr.forEach(t),Rgo=r(O5e," (YOSO model)"),O5e.forEach(t),M.forEach(t),Bgo=i(Dt),xp=n(Dt,"P",{});var V5e=s(xp);Pgo=r(V5e,"The model is set in evaluation mode by default using "),tte=n(V5e,"CODE",{});var qzr=s(tte);$go=r(qzr,"model.eval()"),qzr.forEach(t),Igo=r(V5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=n(V5e,"CODE",{});var Nzr=s(ate);qgo=r(Nzr,"model.train()"),Nzr.forEach(t),V5e.forEach(t),Ngo=i(Dt),nte=n(Dt,"P",{});var jzr=s(nte);jgo=r(jzr,"Examples:"),jzr.forEach(t),Dgo=i(Dt),m(oC.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),KSe=i(c),Zi=n(c,"H2",{class:!0});var lPe=s(Zi);kp=n(lPe,"A",{id:!0,class:!0,href:!0});var Dzr=s(kp);ste=n(Dzr,"SPAN",{});var Gzr=s(ste);m(rC.$$.fragment,Gzr),Gzr.forEach(t),Dzr.forEach(t),Ggo=i(lPe),lte=n(lPe,"SPAN",{});var Ozr=s(lte);Ogo=r(Ozr,"AutoModelForPreTraining"),Ozr.forEach(t),lPe.forEach(t),ZSe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(tC.$$.fragment,Hs),Vgo=i(Hs),ed=n(Hs,"P",{});var YH=s(ed);Xgo=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=n(YH,"A",{href:!0});var Vzr=s(IP);zgo=r(Vzr,"from_pretrained()"),Vzr.forEach(t),Qgo=r(YH," class method or the "),qP=n(YH,"A",{href:!0});var Xzr=s(qP);Wgo=r(Xzr,"from_config()"),Xzr.forEach(t),Hgo=r(YH,` class
method.`),YH.forEach(t),Ugo=i(Hs),aC=n(Hs,"P",{});var iPe=s(aC);Jgo=r(iPe,"This class cannot be instantiated directly using "),ite=n(iPe,"CODE",{});var zzr=s(ite);Ygo=r(zzr,"__init__()"),zzr.forEach(t),Kgo=r(iPe," (throws an error)."),iPe.forEach(t),Zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(nC.$$.fragment,Us),eho=i(Us),dte=n(Us,"P",{});var Qzr=s(dte);oho=r(Qzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qzr.forEach(t),rho=i(Us),od=n(Us,"P",{});var KH=s(od);tho=r(KH,`Note:
Loading a model from its configuration file does `),cte=n(KH,"STRONG",{});var Wzr=s(cte);aho=r(Wzr,"not"),Wzr.forEach(t),nho=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=n(KH,"A",{href:!0});var Hzr=s(NP);sho=r(Hzr,"from_pretrained()"),Hzr.forEach(t),lho=r(KH," to load the model weights."),KH.forEach(t),iho=i(Us),fte=n(Us,"P",{});var Uzr=s(fte);dho=r(Uzr,"Examples:"),Uzr.forEach(t),cho=i(Us),m(sC.$$.fragment,Us),Us.forEach(t),fho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(lC.$$.fragment,Gt),mho=i(Gt),mte=n(Gt,"P",{});var Jzr=s(mte);gho=r(Jzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jzr.forEach(t),hho=i(Gt),za=n(Gt,"P",{});var F5=s(za);uho=r(F5,"The model class to instantiate is selected based on the "),gte=n(F5,"CODE",{});var Yzr=s(gte);pho=r(Yzr,"model_type"),Yzr.forEach(t),_ho=r(F5,` property of the config object (either
passed as an argument or loaded from `),hte=n(F5,"CODE",{});var Kzr=s(hte);vho=r(Kzr,"pretrained_model_name_or_path"),Kzr.forEach(t),bho=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=n(F5,"CODE",{});var Zzr=s(ute);Fho=r(Zzr,"pretrained_model_name_or_path"),Zzr.forEach(t),Tho=r(F5,":"),F5.forEach(t),Mho=i(Gt),S=n(Gt,"UL",{});var B=s(S);Sp=n(B,"LI",{});var X5e=s(Sp);pte=n(X5e,"STRONG",{});var eQr=s(pte);Eho=r(eQr,"albert"),eQr.forEach(t),Cho=r(X5e," \u2014 "),jP=n(X5e,"A",{href:!0});var oQr=s(jP);who=r(oQr,"AlbertForPreTraining"),oQr.forEach(t),Aho=r(X5e," (ALBERT model)"),X5e.forEach(t),yho=i(B),Rp=n(B,"LI",{});var z5e=s(Rp);_te=n(z5e,"STRONG",{});var rQr=s(_te);Lho=r(rQr,"bart"),rQr.forEach(t),xho=r(z5e," \u2014 "),DP=n(z5e,"A",{href:!0});var tQr=s(DP);kho=r(tQr,"BartForConditionalGeneration"),tQr.forEach(t),Sho=r(z5e," (BART model)"),z5e.forEach(t),Rho=i(B),Bp=n(B,"LI",{});var Q5e=s(Bp);vte=n(Q5e,"STRONG",{});var aQr=s(vte);Bho=r(aQr,"bert"),aQr.forEach(t),Pho=r(Q5e," \u2014 "),GP=n(Q5e,"A",{href:!0});var nQr=s(GP);$ho=r(nQr,"BertForPreTraining"),nQr.forEach(t),Iho=r(Q5e," (BERT model)"),Q5e.forEach(t),qho=i(B),Pp=n(B,"LI",{});var W5e=s(Pp);bte=n(W5e,"STRONG",{});var sQr=s(bte);Nho=r(sQr,"big_bird"),sQr.forEach(t),jho=r(W5e," \u2014 "),OP=n(W5e,"A",{href:!0});var lQr=s(OP);Dho=r(lQr,"BigBirdForPreTraining"),lQr.forEach(t),Gho=r(W5e," (BigBird model)"),W5e.forEach(t),Oho=i(B),$p=n(B,"LI",{});var H5e=s($p);Fte=n(H5e,"STRONG",{});var iQr=s(Fte);Vho=r(iQr,"camembert"),iQr.forEach(t),Xho=r(H5e," \u2014 "),VP=n(H5e,"A",{href:!0});var dQr=s(VP);zho=r(dQr,"CamembertForMaskedLM"),dQr.forEach(t),Qho=r(H5e," (CamemBERT model)"),H5e.forEach(t),Who=i(B),Ip=n(B,"LI",{});var U5e=s(Ip);Tte=n(U5e,"STRONG",{});var cQr=s(Tte);Hho=r(cQr,"ctrl"),cQr.forEach(t),Uho=r(U5e," \u2014 "),XP=n(U5e,"A",{href:!0});var fQr=s(XP);Jho=r(fQr,"CTRLLMHeadModel"),fQr.forEach(t),Yho=r(U5e," (CTRL model)"),U5e.forEach(t),Kho=i(B),qp=n(B,"LI",{});var J5e=s(qp);Mte=n(J5e,"STRONG",{});var mQr=s(Mte);Zho=r(mQr,"data2vec-text"),mQr.forEach(t),euo=r(J5e," \u2014 "),zP=n(J5e,"A",{href:!0});var gQr=s(zP);ouo=r(gQr,"Data2VecTextForMaskedLM"),gQr.forEach(t),ruo=r(J5e," (Data2VecText model)"),J5e.forEach(t),tuo=i(B),Np=n(B,"LI",{});var Y5e=s(Np);Ete=n(Y5e,"STRONG",{});var hQr=s(Ete);auo=r(hQr,"deberta"),hQr.forEach(t),nuo=r(Y5e," \u2014 "),QP=n(Y5e,"A",{href:!0});var uQr=s(QP);suo=r(uQr,"DebertaForMaskedLM"),uQr.forEach(t),luo=r(Y5e," (DeBERTa model)"),Y5e.forEach(t),iuo=i(B),jp=n(B,"LI",{});var K5e=s(jp);Cte=n(K5e,"STRONG",{});var pQr=s(Cte);duo=r(pQr,"deberta-v2"),pQr.forEach(t),cuo=r(K5e," \u2014 "),WP=n(K5e,"A",{href:!0});var _Qr=s(WP);fuo=r(_Qr,"DebertaV2ForMaskedLM"),_Qr.forEach(t),muo=r(K5e," (DeBERTa-v2 model)"),K5e.forEach(t),guo=i(B),Dp=n(B,"LI",{});var Z5e=s(Dp);wte=n(Z5e,"STRONG",{});var vQr=s(wte);huo=r(vQr,"distilbert"),vQr.forEach(t),uuo=r(Z5e," \u2014 "),HP=n(Z5e,"A",{href:!0});var bQr=s(HP);puo=r(bQr,"DistilBertForMaskedLM"),bQr.forEach(t),_uo=r(Z5e," (DistilBERT model)"),Z5e.forEach(t),vuo=i(B),Gp=n(B,"LI",{});var e3e=s(Gp);Ate=n(e3e,"STRONG",{});var FQr=s(Ate);buo=r(FQr,"electra"),FQr.forEach(t),Fuo=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var TQr=s(UP);Tuo=r(TQr,"ElectraForPreTraining"),TQr.forEach(t),Muo=r(e3e," (ELECTRA model)"),e3e.forEach(t),Euo=i(B),Op=n(B,"LI",{});var o3e=s(Op);yte=n(o3e,"STRONG",{});var MQr=s(yte);Cuo=r(MQr,"flaubert"),MQr.forEach(t),wuo=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var EQr=s(JP);Auo=r(EQr,"FlaubertWithLMHeadModel"),EQr.forEach(t),yuo=r(o3e," (FlauBERT model)"),o3e.forEach(t),Luo=i(B),Vp=n(B,"LI",{});var r3e=s(Vp);Lte=n(r3e,"STRONG",{});var CQr=s(Lte);xuo=r(CQr,"fnet"),CQr.forEach(t),kuo=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var wQr=s(YP);Suo=r(wQr,"FNetForPreTraining"),wQr.forEach(t),Ruo=r(r3e," (FNet model)"),r3e.forEach(t),Buo=i(B),Xp=n(B,"LI",{});var t3e=s(Xp);xte=n(t3e,"STRONG",{});var AQr=s(xte);Puo=r(AQr,"fsmt"),AQr.forEach(t),$uo=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var yQr=s(KP);Iuo=r(yQr,"FSMTForConditionalGeneration"),yQr.forEach(t),quo=r(t3e," (FairSeq Machine-Translation model)"),t3e.forEach(t),Nuo=i(B),zp=n(B,"LI",{});var a3e=s(zp);kte=n(a3e,"STRONG",{});var LQr=s(kte);juo=r(LQr,"funnel"),LQr.forEach(t),Duo=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var xQr=s(ZP);Guo=r(xQr,"FunnelForPreTraining"),xQr.forEach(t),Ouo=r(a3e," (Funnel Transformer model)"),a3e.forEach(t),Vuo=i(B),Qp=n(B,"LI",{});var n3e=s(Qp);Ste=n(n3e,"STRONG",{});var kQr=s(Ste);Xuo=r(kQr,"gpt2"),kQr.forEach(t),zuo=r(n3e," \u2014 "),e$=n(n3e,"A",{href:!0});var SQr=s(e$);Quo=r(SQr,"GPT2LMHeadModel"),SQr.forEach(t),Wuo=r(n3e," (OpenAI GPT-2 model)"),n3e.forEach(t),Huo=i(B),Wp=n(B,"LI",{});var s3e=s(Wp);Rte=n(s3e,"STRONG",{});var RQr=s(Rte);Uuo=r(RQr,"ibert"),RQr.forEach(t),Juo=r(s3e," \u2014 "),o$=n(s3e,"A",{href:!0});var BQr=s(o$);Yuo=r(BQr,"IBertForMaskedLM"),BQr.forEach(t),Kuo=r(s3e," (I-BERT model)"),s3e.forEach(t),Zuo=i(B),Hp=n(B,"LI",{});var l3e=s(Hp);Bte=n(l3e,"STRONG",{});var PQr=s(Bte);epo=r(PQr,"layoutlm"),PQr.forEach(t),opo=r(l3e," \u2014 "),r$=n(l3e,"A",{href:!0});var $Qr=s(r$);rpo=r($Qr,"LayoutLMForMaskedLM"),$Qr.forEach(t),tpo=r(l3e," (LayoutLM model)"),l3e.forEach(t),apo=i(B),Up=n(B,"LI",{});var i3e=s(Up);Pte=n(i3e,"STRONG",{});var IQr=s(Pte);npo=r(IQr,"longformer"),IQr.forEach(t),spo=r(i3e," \u2014 "),t$=n(i3e,"A",{href:!0});var qQr=s(t$);lpo=r(qQr,"LongformerForMaskedLM"),qQr.forEach(t),ipo=r(i3e," (Longformer model)"),i3e.forEach(t),dpo=i(B),Jp=n(B,"LI",{});var d3e=s(Jp);$te=n(d3e,"STRONG",{});var NQr=s($te);cpo=r(NQr,"lxmert"),NQr.forEach(t),fpo=r(d3e," \u2014 "),a$=n(d3e,"A",{href:!0});var jQr=s(a$);mpo=r(jQr,"LxmertForPreTraining"),jQr.forEach(t),gpo=r(d3e," (LXMERT model)"),d3e.forEach(t),hpo=i(B),Yp=n(B,"LI",{});var c3e=s(Yp);Ite=n(c3e,"STRONG",{});var DQr=s(Ite);upo=r(DQr,"megatron-bert"),DQr.forEach(t),ppo=r(c3e," \u2014 "),n$=n(c3e,"A",{href:!0});var GQr=s(n$);_po=r(GQr,"MegatronBertForPreTraining"),GQr.forEach(t),vpo=r(c3e," (MegatronBert model)"),c3e.forEach(t),bpo=i(B),Kp=n(B,"LI",{});var f3e=s(Kp);qte=n(f3e,"STRONG",{});var OQr=s(qte);Fpo=r(OQr,"mobilebert"),OQr.forEach(t),Tpo=r(f3e," \u2014 "),s$=n(f3e,"A",{href:!0});var VQr=s(s$);Mpo=r(VQr,"MobileBertForPreTraining"),VQr.forEach(t),Epo=r(f3e," (MobileBERT model)"),f3e.forEach(t),Cpo=i(B),Zp=n(B,"LI",{});var m3e=s(Zp);Nte=n(m3e,"STRONG",{});var XQr=s(Nte);wpo=r(XQr,"mpnet"),XQr.forEach(t),Apo=r(m3e," \u2014 "),l$=n(m3e,"A",{href:!0});var zQr=s(l$);ypo=r(zQr,"MPNetForMaskedLM"),zQr.forEach(t),Lpo=r(m3e," (MPNet model)"),m3e.forEach(t),xpo=i(B),e_=n(B,"LI",{});var g3e=s(e_);jte=n(g3e,"STRONG",{});var QQr=s(jte);kpo=r(QQr,"openai-gpt"),QQr.forEach(t),Spo=r(g3e," \u2014 "),i$=n(g3e,"A",{href:!0});var WQr=s(i$);Rpo=r(WQr,"OpenAIGPTLMHeadModel"),WQr.forEach(t),Bpo=r(g3e," (OpenAI GPT model)"),g3e.forEach(t),Ppo=i(B),o_=n(B,"LI",{});var h3e=s(o_);Dte=n(h3e,"STRONG",{});var HQr=s(Dte);$po=r(HQr,"retribert"),HQr.forEach(t),Ipo=r(h3e," \u2014 "),d$=n(h3e,"A",{href:!0});var UQr=s(d$);qpo=r(UQr,"RetriBertModel"),UQr.forEach(t),Npo=r(h3e," (RetriBERT model)"),h3e.forEach(t),jpo=i(B),r_=n(B,"LI",{});var u3e=s(r_);Gte=n(u3e,"STRONG",{});var JQr=s(Gte);Dpo=r(JQr,"roberta"),JQr.forEach(t),Gpo=r(u3e," \u2014 "),c$=n(u3e,"A",{href:!0});var YQr=s(c$);Opo=r(YQr,"RobertaForMaskedLM"),YQr.forEach(t),Vpo=r(u3e," (RoBERTa model)"),u3e.forEach(t),Xpo=i(B),t_=n(B,"LI",{});var p3e=s(t_);Ote=n(p3e,"STRONG",{});var KQr=s(Ote);zpo=r(KQr,"squeezebert"),KQr.forEach(t),Qpo=r(p3e," \u2014 "),f$=n(p3e,"A",{href:!0});var ZQr=s(f$);Wpo=r(ZQr,"SqueezeBertForMaskedLM"),ZQr.forEach(t),Hpo=r(p3e," (SqueezeBERT model)"),p3e.forEach(t),Upo=i(B),a_=n(B,"LI",{});var _3e=s(a_);Vte=n(_3e,"STRONG",{});var eWr=s(Vte);Jpo=r(eWr,"t5"),eWr.forEach(t),Ypo=r(_3e," \u2014 "),m$=n(_3e,"A",{href:!0});var oWr=s(m$);Kpo=r(oWr,"T5ForConditionalGeneration"),oWr.forEach(t),Zpo=r(_3e," (T5 model)"),_3e.forEach(t),e_o=i(B),n_=n(B,"LI",{});var v3e=s(n_);Xte=n(v3e,"STRONG",{});var rWr=s(Xte);o_o=r(rWr,"tapas"),rWr.forEach(t),r_o=r(v3e," \u2014 "),g$=n(v3e,"A",{href:!0});var tWr=s(g$);t_o=r(tWr,"TapasForMaskedLM"),tWr.forEach(t),a_o=r(v3e," (TAPAS model)"),v3e.forEach(t),n_o=i(B),s_=n(B,"LI",{});var b3e=s(s_);zte=n(b3e,"STRONG",{});var aWr=s(zte);s_o=r(aWr,"transfo-xl"),aWr.forEach(t),l_o=r(b3e," \u2014 "),h$=n(b3e,"A",{href:!0});var nWr=s(h$);i_o=r(nWr,"TransfoXLLMHeadModel"),nWr.forEach(t),d_o=r(b3e," (Transformer-XL model)"),b3e.forEach(t),c_o=i(B),l_=n(B,"LI",{});var F3e=s(l_);Qte=n(F3e,"STRONG",{});var sWr=s(Qte);f_o=r(sWr,"unispeech"),sWr.forEach(t),m_o=r(F3e," \u2014 "),u$=n(F3e,"A",{href:!0});var lWr=s(u$);g_o=r(lWr,"UniSpeechForPreTraining"),lWr.forEach(t),h_o=r(F3e," (UniSpeech model)"),F3e.forEach(t),u_o=i(B),i_=n(B,"LI",{});var T3e=s(i_);Wte=n(T3e,"STRONG",{});var iWr=s(Wte);p_o=r(iWr,"unispeech-sat"),iWr.forEach(t),__o=r(T3e," \u2014 "),p$=n(T3e,"A",{href:!0});var dWr=s(p$);v_o=r(dWr,"UniSpeechSatForPreTraining"),dWr.forEach(t),b_o=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),F_o=i(B),d_=n(B,"LI",{});var M3e=s(d_);Hte=n(M3e,"STRONG",{});var cWr=s(Hte);T_o=r(cWr,"visual_bert"),cWr.forEach(t),M_o=r(M3e," \u2014 "),_$=n(M3e,"A",{href:!0});var fWr=s(_$);E_o=r(fWr,"VisualBertForPreTraining"),fWr.forEach(t),C_o=r(M3e," (VisualBert model)"),M3e.forEach(t),w_o=i(B),c_=n(B,"LI",{});var E3e=s(c_);Ute=n(E3e,"STRONG",{});var mWr=s(Ute);A_o=r(mWr,"vit_mae"),mWr.forEach(t),y_o=r(E3e," \u2014 "),v$=n(E3e,"A",{href:!0});var gWr=s(v$);L_o=r(gWr,"ViTMAEForPreTraining"),gWr.forEach(t),x_o=r(E3e," (ViTMAE model)"),E3e.forEach(t),k_o=i(B),f_=n(B,"LI",{});var C3e=s(f_);Jte=n(C3e,"STRONG",{});var hWr=s(Jte);S_o=r(hWr,"wav2vec2"),hWr.forEach(t),R_o=r(C3e," \u2014 "),b$=n(C3e,"A",{href:!0});var uWr=s(b$);B_o=r(uWr,"Wav2Vec2ForPreTraining"),uWr.forEach(t),P_o=r(C3e," (Wav2Vec2 model)"),C3e.forEach(t),$_o=i(B),m_=n(B,"LI",{});var w3e=s(m_);Yte=n(w3e,"STRONG",{});var pWr=s(Yte);I_o=r(pWr,"xlm"),pWr.forEach(t),q_o=r(w3e," \u2014 "),F$=n(w3e,"A",{href:!0});var _Wr=s(F$);N_o=r(_Wr,"XLMWithLMHeadModel"),_Wr.forEach(t),j_o=r(w3e," (XLM model)"),w3e.forEach(t),D_o=i(B),g_=n(B,"LI",{});var A3e=s(g_);Kte=n(A3e,"STRONG",{});var vWr=s(Kte);G_o=r(vWr,"xlm-roberta"),vWr.forEach(t),O_o=r(A3e," \u2014 "),T$=n(A3e,"A",{href:!0});var bWr=s(T$);V_o=r(bWr,"XLMRobertaForMaskedLM"),bWr.forEach(t),X_o=r(A3e," (XLM-RoBERTa model)"),A3e.forEach(t),z_o=i(B),h_=n(B,"LI",{});var y3e=s(h_);Zte=n(y3e,"STRONG",{});var FWr=s(Zte);Q_o=r(FWr,"xlm-roberta-xl"),FWr.forEach(t),W_o=r(y3e," \u2014 "),M$=n(y3e,"A",{href:!0});var TWr=s(M$);H_o=r(TWr,"XLMRobertaXLForMaskedLM"),TWr.forEach(t),U_o=r(y3e," (XLM-RoBERTa-XL model)"),y3e.forEach(t),J_o=i(B),u_=n(B,"LI",{});var L3e=s(u_);eae=n(L3e,"STRONG",{});var MWr=s(eae);Y_o=r(MWr,"xlnet"),MWr.forEach(t),K_o=r(L3e," \u2014 "),E$=n(L3e,"A",{href:!0});var EWr=s(E$);Z_o=r(EWr,"XLNetLMHeadModel"),EWr.forEach(t),evo=r(L3e," (XLNet model)"),L3e.forEach(t),B.forEach(t),ovo=i(Gt),p_=n(Gt,"P",{});var x3e=s(p_);rvo=r(x3e,"The model is set in evaluation mode by default using "),oae=n(x3e,"CODE",{});var CWr=s(oae);tvo=r(CWr,"model.eval()"),CWr.forEach(t),avo=r(x3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=n(x3e,"CODE",{});var wWr=s(rae);nvo=r(wWr,"model.train()"),wWr.forEach(t),x3e.forEach(t),svo=i(Gt),tae=n(Gt,"P",{});var AWr=s(tae);lvo=r(AWr,"Examples:"),AWr.forEach(t),ivo=i(Gt),m(iC.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),eRe=i(c),rd=n(c,"H2",{class:!0});var dPe=s(rd);__=n(dPe,"A",{id:!0,class:!0,href:!0});var yWr=s(__);aae=n(yWr,"SPAN",{});var LWr=s(aae);m(dC.$$.fragment,LWr),LWr.forEach(t),yWr.forEach(t),dvo=i(dPe),nae=n(dPe,"SPAN",{});var xWr=s(nae);cvo=r(xWr,"AutoModelForCausalLM"),xWr.forEach(t),dPe.forEach(t),oRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(cC.$$.fragment,Js),fvo=i(Js),td=n(Js,"P",{});var ZH=s(td);mvo=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=n(ZH,"A",{href:!0});var kWr=s(C$);gvo=r(kWr,"from_pretrained()"),kWr.forEach(t),hvo=r(ZH," class method or the "),w$=n(ZH,"A",{href:!0});var SWr=s(w$);uvo=r(SWr,"from_config()"),SWr.forEach(t),pvo=r(ZH,` class
method.`),ZH.forEach(t),_vo=i(Js),fC=n(Js,"P",{});var cPe=s(fC);vvo=r(cPe,"This class cannot be instantiated directly using "),sae=n(cPe,"CODE",{});var RWr=s(sae);bvo=r(RWr,"__init__()"),RWr.forEach(t),Fvo=r(cPe," (throws an error)."),cPe.forEach(t),Tvo=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(mC.$$.fragment,Ys),Mvo=i(Ys),lae=n(Ys,"P",{});var BWr=s(lae);Evo=r(BWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),BWr.forEach(t),Cvo=i(Ys),ad=n(Ys,"P",{});var eU=s(ad);wvo=r(eU,`Note:
Loading a model from its configuration file does `),iae=n(eU,"STRONG",{});var PWr=s(iae);Avo=r(PWr,"not"),PWr.forEach(t),yvo=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=n(eU,"A",{href:!0});var $Wr=s(A$);Lvo=r($Wr,"from_pretrained()"),$Wr.forEach(t),xvo=r(eU," to load the model weights."),eU.forEach(t),kvo=i(Ys),dae=n(Ys,"P",{});var IWr=s(dae);Svo=r(IWr,"Examples:"),IWr.forEach(t),Rvo=i(Ys),m(gC.$$.fragment,Ys),Ys.forEach(t),Bvo=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(hC.$$.fragment,Ot),Pvo=i(Ot),cae=n(Ot,"P",{});var qWr=s(cae);$vo=r(qWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qWr.forEach(t),Ivo=i(Ot),Qa=n(Ot,"P",{});var T5=s(Qa);qvo=r(T5,"The model class to instantiate is selected based on the "),fae=n(T5,"CODE",{});var NWr=s(fae);Nvo=r(NWr,"model_type"),NWr.forEach(t),jvo=r(T5,` property of the config object (either
passed as an argument or loaded from `),mae=n(T5,"CODE",{});var jWr=s(mae);Dvo=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),Gvo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=n(T5,"CODE",{});var DWr=s(gae);Ovo=r(DWr,"pretrained_model_name_or_path"),DWr.forEach(t),Vvo=r(T5,":"),T5.forEach(t),Xvo=i(Ot),$=n(Ot,"UL",{});var q=s($);v_=n(q,"LI",{});var k3e=s(v_);hae=n(k3e,"STRONG",{});var GWr=s(hae);zvo=r(GWr,"bart"),GWr.forEach(t),Qvo=r(k3e," \u2014 "),y$=n(k3e,"A",{href:!0});var OWr=s(y$);Wvo=r(OWr,"BartForCausalLM"),OWr.forEach(t),Hvo=r(k3e," (BART model)"),k3e.forEach(t),Uvo=i(q),b_=n(q,"LI",{});var S3e=s(b_);uae=n(S3e,"STRONG",{});var VWr=s(uae);Jvo=r(VWr,"bert"),VWr.forEach(t),Yvo=r(S3e," \u2014 "),L$=n(S3e,"A",{href:!0});var XWr=s(L$);Kvo=r(XWr,"BertLMHeadModel"),XWr.forEach(t),Zvo=r(S3e," (BERT model)"),S3e.forEach(t),e1o=i(q),F_=n(q,"LI",{});var R3e=s(F_);pae=n(R3e,"STRONG",{});var zWr=s(pae);o1o=r(zWr,"bert-generation"),zWr.forEach(t),r1o=r(R3e," \u2014 "),x$=n(R3e,"A",{href:!0});var QWr=s(x$);t1o=r(QWr,"BertGenerationDecoder"),QWr.forEach(t),a1o=r(R3e," (Bert Generation model)"),R3e.forEach(t),n1o=i(q),T_=n(q,"LI",{});var B3e=s(T_);_ae=n(B3e,"STRONG",{});var WWr=s(_ae);s1o=r(WWr,"big_bird"),WWr.forEach(t),l1o=r(B3e," \u2014 "),k$=n(B3e,"A",{href:!0});var HWr=s(k$);i1o=r(HWr,"BigBirdForCausalLM"),HWr.forEach(t),d1o=r(B3e," (BigBird model)"),B3e.forEach(t),c1o=i(q),M_=n(q,"LI",{});var P3e=s(M_);vae=n(P3e,"STRONG",{});var UWr=s(vae);f1o=r(UWr,"bigbird_pegasus"),UWr.forEach(t),m1o=r(P3e," \u2014 "),S$=n(P3e,"A",{href:!0});var JWr=s(S$);g1o=r(JWr,"BigBirdPegasusForCausalLM"),JWr.forEach(t),h1o=r(P3e," (BigBirdPegasus model)"),P3e.forEach(t),u1o=i(q),E_=n(q,"LI",{});var $3e=s(E_);bae=n($3e,"STRONG",{});var YWr=s(bae);p1o=r(YWr,"blenderbot"),YWr.forEach(t),_1o=r($3e," \u2014 "),R$=n($3e,"A",{href:!0});var KWr=s(R$);v1o=r(KWr,"BlenderbotForCausalLM"),KWr.forEach(t),b1o=r($3e," (Blenderbot model)"),$3e.forEach(t),F1o=i(q),C_=n(q,"LI",{});var I3e=s(C_);Fae=n(I3e,"STRONG",{});var ZWr=s(Fae);T1o=r(ZWr,"blenderbot-small"),ZWr.forEach(t),M1o=r(I3e," \u2014 "),B$=n(I3e,"A",{href:!0});var eHr=s(B$);E1o=r(eHr,"BlenderbotSmallForCausalLM"),eHr.forEach(t),C1o=r(I3e," (BlenderbotSmall model)"),I3e.forEach(t),w1o=i(q),w_=n(q,"LI",{});var q3e=s(w_);Tae=n(q3e,"STRONG",{});var oHr=s(Tae);A1o=r(oHr,"camembert"),oHr.forEach(t),y1o=r(q3e," \u2014 "),P$=n(q3e,"A",{href:!0});var rHr=s(P$);L1o=r(rHr,"CamembertForCausalLM"),rHr.forEach(t),x1o=r(q3e," (CamemBERT model)"),q3e.forEach(t),k1o=i(q),A_=n(q,"LI",{});var N3e=s(A_);Mae=n(N3e,"STRONG",{});var tHr=s(Mae);S1o=r(tHr,"ctrl"),tHr.forEach(t),R1o=r(N3e," \u2014 "),$$=n(N3e,"A",{href:!0});var aHr=s($$);B1o=r(aHr,"CTRLLMHeadModel"),aHr.forEach(t),P1o=r(N3e," (CTRL model)"),N3e.forEach(t),$1o=i(q),y_=n(q,"LI",{});var j3e=s(y_);Eae=n(j3e,"STRONG",{});var nHr=s(Eae);I1o=r(nHr,"data2vec-text"),nHr.forEach(t),q1o=r(j3e," \u2014 "),I$=n(j3e,"A",{href:!0});var sHr=s(I$);N1o=r(sHr,"Data2VecTextForCausalLM"),sHr.forEach(t),j1o=r(j3e," (Data2VecText model)"),j3e.forEach(t),D1o=i(q),L_=n(q,"LI",{});var D3e=s(L_);Cae=n(D3e,"STRONG",{});var lHr=s(Cae);G1o=r(lHr,"electra"),lHr.forEach(t),O1o=r(D3e," \u2014 "),q$=n(D3e,"A",{href:!0});var iHr=s(q$);V1o=r(iHr,"ElectraForCausalLM"),iHr.forEach(t),X1o=r(D3e," (ELECTRA model)"),D3e.forEach(t),z1o=i(q),x_=n(q,"LI",{});var G3e=s(x_);wae=n(G3e,"STRONG",{});var dHr=s(wae);Q1o=r(dHr,"gpt2"),dHr.forEach(t),W1o=r(G3e," \u2014 "),N$=n(G3e,"A",{href:!0});var cHr=s(N$);H1o=r(cHr,"GPT2LMHeadModel"),cHr.forEach(t),U1o=r(G3e," (OpenAI GPT-2 model)"),G3e.forEach(t),J1o=i(q),k_=n(q,"LI",{});var O3e=s(k_);Aae=n(O3e,"STRONG",{});var fHr=s(Aae);Y1o=r(fHr,"gpt_neo"),fHr.forEach(t),K1o=r(O3e," \u2014 "),j$=n(O3e,"A",{href:!0});var mHr=s(j$);Z1o=r(mHr,"GPTNeoForCausalLM"),mHr.forEach(t),e4o=r(O3e," (GPT Neo model)"),O3e.forEach(t),o4o=i(q),S_=n(q,"LI",{});var V3e=s(S_);yae=n(V3e,"STRONG",{});var gHr=s(yae);r4o=r(gHr,"gptj"),gHr.forEach(t),t4o=r(V3e," \u2014 "),D$=n(V3e,"A",{href:!0});var hHr=s(D$);a4o=r(hHr,"GPTJForCausalLM"),hHr.forEach(t),n4o=r(V3e," (GPT-J model)"),V3e.forEach(t),s4o=i(q),R_=n(q,"LI",{});var X3e=s(R_);Lae=n(X3e,"STRONG",{});var uHr=s(Lae);l4o=r(uHr,"marian"),uHr.forEach(t),i4o=r(X3e," \u2014 "),G$=n(X3e,"A",{href:!0});var pHr=s(G$);d4o=r(pHr,"MarianForCausalLM"),pHr.forEach(t),c4o=r(X3e," (Marian model)"),X3e.forEach(t),f4o=i(q),B_=n(q,"LI",{});var z3e=s(B_);xae=n(z3e,"STRONG",{});var _Hr=s(xae);m4o=r(_Hr,"mbart"),_Hr.forEach(t),g4o=r(z3e," \u2014 "),O$=n(z3e,"A",{href:!0});var vHr=s(O$);h4o=r(vHr,"MBartForCausalLM"),vHr.forEach(t),u4o=r(z3e," (mBART model)"),z3e.forEach(t),p4o=i(q),P_=n(q,"LI",{});var Q3e=s(P_);kae=n(Q3e,"STRONG",{});var bHr=s(kae);_4o=r(bHr,"megatron-bert"),bHr.forEach(t),v4o=r(Q3e," \u2014 "),V$=n(Q3e,"A",{href:!0});var FHr=s(V$);b4o=r(FHr,"MegatronBertForCausalLM"),FHr.forEach(t),F4o=r(Q3e," (MegatronBert model)"),Q3e.forEach(t),T4o=i(q),$_=n(q,"LI",{});var W3e=s($_);Sae=n(W3e,"STRONG",{});var THr=s(Sae);M4o=r(THr,"openai-gpt"),THr.forEach(t),E4o=r(W3e," \u2014 "),X$=n(W3e,"A",{href:!0});var MHr=s(X$);C4o=r(MHr,"OpenAIGPTLMHeadModel"),MHr.forEach(t),w4o=r(W3e," (OpenAI GPT model)"),W3e.forEach(t),A4o=i(q),I_=n(q,"LI",{});var H3e=s(I_);Rae=n(H3e,"STRONG",{});var EHr=s(Rae);y4o=r(EHr,"pegasus"),EHr.forEach(t),L4o=r(H3e," \u2014 "),z$=n(H3e,"A",{href:!0});var CHr=s(z$);x4o=r(CHr,"PegasusForCausalLM"),CHr.forEach(t),k4o=r(H3e," (Pegasus model)"),H3e.forEach(t),S4o=i(q),q_=n(q,"LI",{});var U3e=s(q_);Bae=n(U3e,"STRONG",{});var wHr=s(Bae);R4o=r(wHr,"plbart"),wHr.forEach(t),B4o=r(U3e," \u2014 "),Q$=n(U3e,"A",{href:!0});var AHr=s(Q$);P4o=r(AHr,"PLBartForCausalLM"),AHr.forEach(t),$4o=r(U3e," (PLBart model)"),U3e.forEach(t),I4o=i(q),N_=n(q,"LI",{});var J3e=s(N_);Pae=n(J3e,"STRONG",{});var yHr=s(Pae);q4o=r(yHr,"prophetnet"),yHr.forEach(t),N4o=r(J3e," \u2014 "),W$=n(J3e,"A",{href:!0});var LHr=s(W$);j4o=r(LHr,"ProphetNetForCausalLM"),LHr.forEach(t),D4o=r(J3e," (ProphetNet model)"),J3e.forEach(t),G4o=i(q),j_=n(q,"LI",{});var Y3e=s(j_);$ae=n(Y3e,"STRONG",{});var xHr=s($ae);O4o=r(xHr,"qdqbert"),xHr.forEach(t),V4o=r(Y3e," \u2014 "),H$=n(Y3e,"A",{href:!0});var kHr=s(H$);X4o=r(kHr,"QDQBertLMHeadModel"),kHr.forEach(t),z4o=r(Y3e," (QDQBert model)"),Y3e.forEach(t),Q4o=i(q),D_=n(q,"LI",{});var K3e=s(D_);Iae=n(K3e,"STRONG",{});var SHr=s(Iae);W4o=r(SHr,"reformer"),SHr.forEach(t),H4o=r(K3e," \u2014 "),U$=n(K3e,"A",{href:!0});var RHr=s(U$);U4o=r(RHr,"ReformerModelWithLMHead"),RHr.forEach(t),J4o=r(K3e," (Reformer model)"),K3e.forEach(t),Y4o=i(q),G_=n(q,"LI",{});var Z3e=s(G_);qae=n(Z3e,"STRONG",{});var BHr=s(qae);K4o=r(BHr,"rembert"),BHr.forEach(t),Z4o=r(Z3e," \u2014 "),J$=n(Z3e,"A",{href:!0});var PHr=s(J$);ebo=r(PHr,"RemBertForCausalLM"),PHr.forEach(t),obo=r(Z3e," (RemBERT model)"),Z3e.forEach(t),rbo=i(q),O_=n(q,"LI",{});var eCe=s(O_);Nae=n(eCe,"STRONG",{});var $Hr=s(Nae);tbo=r($Hr,"roberta"),$Hr.forEach(t),abo=r(eCe," \u2014 "),Y$=n(eCe,"A",{href:!0});var IHr=s(Y$);nbo=r(IHr,"RobertaForCausalLM"),IHr.forEach(t),sbo=r(eCe," (RoBERTa model)"),eCe.forEach(t),lbo=i(q),V_=n(q,"LI",{});var oCe=s(V_);jae=n(oCe,"STRONG",{});var qHr=s(jae);ibo=r(qHr,"roformer"),qHr.forEach(t),dbo=r(oCe," \u2014 "),K$=n(oCe,"A",{href:!0});var NHr=s(K$);cbo=r(NHr,"RoFormerForCausalLM"),NHr.forEach(t),fbo=r(oCe," (RoFormer model)"),oCe.forEach(t),mbo=i(q),X_=n(q,"LI",{});var rCe=s(X_);Dae=n(rCe,"STRONG",{});var jHr=s(Dae);gbo=r(jHr,"speech_to_text_2"),jHr.forEach(t),hbo=r(rCe," \u2014 "),Z$=n(rCe,"A",{href:!0});var DHr=s(Z$);ubo=r(DHr,"Speech2Text2ForCausalLM"),DHr.forEach(t),pbo=r(rCe," (Speech2Text2 model)"),rCe.forEach(t),_bo=i(q),z_=n(q,"LI",{});var tCe=s(z_);Gae=n(tCe,"STRONG",{});var GHr=s(Gae);vbo=r(GHr,"transfo-xl"),GHr.forEach(t),bbo=r(tCe," \u2014 "),eI=n(tCe,"A",{href:!0});var OHr=s(eI);Fbo=r(OHr,"TransfoXLLMHeadModel"),OHr.forEach(t),Tbo=r(tCe," (Transformer-XL model)"),tCe.forEach(t),Mbo=i(q),Q_=n(q,"LI",{});var aCe=s(Q_);Oae=n(aCe,"STRONG",{});var VHr=s(Oae);Ebo=r(VHr,"trocr"),VHr.forEach(t),Cbo=r(aCe," \u2014 "),oI=n(aCe,"A",{href:!0});var XHr=s(oI);wbo=r(XHr,"TrOCRForCausalLM"),XHr.forEach(t),Abo=r(aCe," (TrOCR model)"),aCe.forEach(t),ybo=i(q),W_=n(q,"LI",{});var nCe=s(W_);Vae=n(nCe,"STRONG",{});var zHr=s(Vae);Lbo=r(zHr,"xglm"),zHr.forEach(t),xbo=r(nCe," \u2014 "),rI=n(nCe,"A",{href:!0});var QHr=s(rI);kbo=r(QHr,"XGLMForCausalLM"),QHr.forEach(t),Sbo=r(nCe," (XGLM model)"),nCe.forEach(t),Rbo=i(q),H_=n(q,"LI",{});var sCe=s(H_);Xae=n(sCe,"STRONG",{});var WHr=s(Xae);Bbo=r(WHr,"xlm"),WHr.forEach(t),Pbo=r(sCe," \u2014 "),tI=n(sCe,"A",{href:!0});var HHr=s(tI);$bo=r(HHr,"XLMWithLMHeadModel"),HHr.forEach(t),Ibo=r(sCe," (XLM model)"),sCe.forEach(t),qbo=i(q),U_=n(q,"LI",{});var lCe=s(U_);zae=n(lCe,"STRONG",{});var UHr=s(zae);Nbo=r(UHr,"xlm-prophetnet"),UHr.forEach(t),jbo=r(lCe," \u2014 "),aI=n(lCe,"A",{href:!0});var JHr=s(aI);Dbo=r(JHr,"XLMProphetNetForCausalLM"),JHr.forEach(t),Gbo=r(lCe," (XLMProphetNet model)"),lCe.forEach(t),Obo=i(q),J_=n(q,"LI",{});var iCe=s(J_);Qae=n(iCe,"STRONG",{});var YHr=s(Qae);Vbo=r(YHr,"xlm-roberta"),YHr.forEach(t),Xbo=r(iCe," \u2014 "),nI=n(iCe,"A",{href:!0});var KHr=s(nI);zbo=r(KHr,"XLMRobertaForCausalLM"),KHr.forEach(t),Qbo=r(iCe," (XLM-RoBERTa model)"),iCe.forEach(t),Wbo=i(q),Y_=n(q,"LI",{});var dCe=s(Y_);Wae=n(dCe,"STRONG",{});var ZHr=s(Wae);Hbo=r(ZHr,"xlm-roberta-xl"),ZHr.forEach(t),Ubo=r(dCe," \u2014 "),sI=n(dCe,"A",{href:!0});var eUr=s(sI);Jbo=r(eUr,"XLMRobertaXLForCausalLM"),eUr.forEach(t),Ybo=r(dCe," (XLM-RoBERTa-XL model)"),dCe.forEach(t),Kbo=i(q),K_=n(q,"LI",{});var cCe=s(K_);Hae=n(cCe,"STRONG",{});var oUr=s(Hae);Zbo=r(oUr,"xlnet"),oUr.forEach(t),e2o=r(cCe," \u2014 "),lI=n(cCe,"A",{href:!0});var rUr=s(lI);o2o=r(rUr,"XLNetLMHeadModel"),rUr.forEach(t),r2o=r(cCe," (XLNet model)"),cCe.forEach(t),q.forEach(t),t2o=i(Ot),Z_=n(Ot,"P",{});var fCe=s(Z_);a2o=r(fCe,"The model is set in evaluation mode by default using "),Uae=n(fCe,"CODE",{});var tUr=s(Uae);n2o=r(tUr,"model.eval()"),tUr.forEach(t),s2o=r(fCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=n(fCe,"CODE",{});var aUr=s(Jae);l2o=r(aUr,"model.train()"),aUr.forEach(t),fCe.forEach(t),i2o=i(Ot),Yae=n(Ot,"P",{});var nUr=s(Yae);d2o=r(nUr,"Examples:"),nUr.forEach(t),c2o=i(Ot),m(uC.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),rRe=i(c),nd=n(c,"H2",{class:!0});var fPe=s(nd);ev=n(fPe,"A",{id:!0,class:!0,href:!0});var sUr=s(ev);Kae=n(sUr,"SPAN",{});var lUr=s(Kae);m(pC.$$.fragment,lUr),lUr.forEach(t),sUr.forEach(t),f2o=i(fPe),Zae=n(fPe,"SPAN",{});var iUr=s(Zae);m2o=r(iUr,"AutoModelForMaskedLM"),iUr.forEach(t),fPe.forEach(t),tRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(_C.$$.fragment,Ks),g2o=i(Ks),sd=n(Ks,"P",{});var oU=s(sd);h2o=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=n(oU,"A",{href:!0});var dUr=s(iI);u2o=r(dUr,"from_pretrained()"),dUr.forEach(t),p2o=r(oU," class method or the "),dI=n(oU,"A",{href:!0});var cUr=s(dI);_2o=r(cUr,"from_config()"),cUr.forEach(t),v2o=r(oU,` class
method.`),oU.forEach(t),b2o=i(Ks),vC=n(Ks,"P",{});var mPe=s(vC);F2o=r(mPe,"This class cannot be instantiated directly using "),ene=n(mPe,"CODE",{});var fUr=s(ene);T2o=r(fUr,"__init__()"),fUr.forEach(t),M2o=r(mPe," (throws an error)."),mPe.forEach(t),E2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(bC.$$.fragment,Zs),C2o=i(Zs),one=n(Zs,"P",{});var mUr=s(one);w2o=r(mUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mUr.forEach(t),A2o=i(Zs),ld=n(Zs,"P",{});var rU=s(ld);y2o=r(rU,`Note:
Loading a model from its configuration file does `),rne=n(rU,"STRONG",{});var gUr=s(rne);L2o=r(gUr,"not"),gUr.forEach(t),x2o=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=n(rU,"A",{href:!0});var hUr=s(cI);k2o=r(hUr,"from_pretrained()"),hUr.forEach(t),S2o=r(rU," to load the model weights."),rU.forEach(t),R2o=i(Zs),tne=n(Zs,"P",{});var uUr=s(tne);B2o=r(uUr,"Examples:"),uUr.forEach(t),P2o=i(Zs),m(FC.$$.fragment,Zs),Zs.forEach(t),$2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(TC.$$.fragment,Vt),I2o=i(Vt),ane=n(Vt,"P",{});var pUr=s(ane);q2o=r(pUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pUr.forEach(t),N2o=i(Vt),Wa=n(Vt,"P",{});var M5=s(Wa);j2o=r(M5,"The model class to instantiate is selected based on the "),nne=n(M5,"CODE",{});var _Ur=s(nne);D2o=r(_Ur,"model_type"),_Ur.forEach(t),G2o=r(M5,` property of the config object (either
passed as an argument or loaded from `),sne=n(M5,"CODE",{});var vUr=s(sne);O2o=r(vUr,"pretrained_model_name_or_path"),vUr.forEach(t),V2o=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=n(M5,"CODE",{});var bUr=s(lne);X2o=r(bUr,"pretrained_model_name_or_path"),bUr.forEach(t),z2o=r(M5,":"),M5.forEach(t),Q2o=i(Vt),I=n(Vt,"UL",{});var N=s(I);ov=n(N,"LI",{});var mCe=s(ov);ine=n(mCe,"STRONG",{});var FUr=s(ine);W2o=r(FUr,"albert"),FUr.forEach(t),H2o=r(mCe," \u2014 "),fI=n(mCe,"A",{href:!0});var TUr=s(fI);U2o=r(TUr,"AlbertForMaskedLM"),TUr.forEach(t),J2o=r(mCe," (ALBERT model)"),mCe.forEach(t),Y2o=i(N),rv=n(N,"LI",{});var gCe=s(rv);dne=n(gCe,"STRONG",{});var MUr=s(dne);K2o=r(MUr,"bart"),MUr.forEach(t),Z2o=r(gCe," \u2014 "),mI=n(gCe,"A",{href:!0});var EUr=s(mI);eFo=r(EUr,"BartForConditionalGeneration"),EUr.forEach(t),oFo=r(gCe," (BART model)"),gCe.forEach(t),rFo=i(N),tv=n(N,"LI",{});var hCe=s(tv);cne=n(hCe,"STRONG",{});var CUr=s(cne);tFo=r(CUr,"bert"),CUr.forEach(t),aFo=r(hCe," \u2014 "),gI=n(hCe,"A",{href:!0});var wUr=s(gI);nFo=r(wUr,"BertForMaskedLM"),wUr.forEach(t),sFo=r(hCe," (BERT model)"),hCe.forEach(t),lFo=i(N),av=n(N,"LI",{});var uCe=s(av);fne=n(uCe,"STRONG",{});var AUr=s(fne);iFo=r(AUr,"big_bird"),AUr.forEach(t),dFo=r(uCe," \u2014 "),hI=n(uCe,"A",{href:!0});var yUr=s(hI);cFo=r(yUr,"BigBirdForMaskedLM"),yUr.forEach(t),fFo=r(uCe," (BigBird model)"),uCe.forEach(t),mFo=i(N),nv=n(N,"LI",{});var pCe=s(nv);mne=n(pCe,"STRONG",{});var LUr=s(mne);gFo=r(LUr,"camembert"),LUr.forEach(t),hFo=r(pCe," \u2014 "),uI=n(pCe,"A",{href:!0});var xUr=s(uI);uFo=r(xUr,"CamembertForMaskedLM"),xUr.forEach(t),pFo=r(pCe," (CamemBERT model)"),pCe.forEach(t),_Fo=i(N),sv=n(N,"LI",{});var _Ce=s(sv);gne=n(_Ce,"STRONG",{});var kUr=s(gne);vFo=r(kUr,"convbert"),kUr.forEach(t),bFo=r(_Ce," \u2014 "),pI=n(_Ce,"A",{href:!0});var SUr=s(pI);FFo=r(SUr,"ConvBertForMaskedLM"),SUr.forEach(t),TFo=r(_Ce," (ConvBERT model)"),_Ce.forEach(t),MFo=i(N),lv=n(N,"LI",{});var vCe=s(lv);hne=n(vCe,"STRONG",{});var RUr=s(hne);EFo=r(RUr,"data2vec-text"),RUr.forEach(t),CFo=r(vCe," \u2014 "),_I=n(vCe,"A",{href:!0});var BUr=s(_I);wFo=r(BUr,"Data2VecTextForMaskedLM"),BUr.forEach(t),AFo=r(vCe," (Data2VecText model)"),vCe.forEach(t),yFo=i(N),iv=n(N,"LI",{});var bCe=s(iv);une=n(bCe,"STRONG",{});var PUr=s(une);LFo=r(PUr,"deberta"),PUr.forEach(t),xFo=r(bCe," \u2014 "),vI=n(bCe,"A",{href:!0});var $Ur=s(vI);kFo=r($Ur,"DebertaForMaskedLM"),$Ur.forEach(t),SFo=r(bCe," (DeBERTa model)"),bCe.forEach(t),RFo=i(N),dv=n(N,"LI",{});var FCe=s(dv);pne=n(FCe,"STRONG",{});var IUr=s(pne);BFo=r(IUr,"deberta-v2"),IUr.forEach(t),PFo=r(FCe," \u2014 "),bI=n(FCe,"A",{href:!0});var qUr=s(bI);$Fo=r(qUr,"DebertaV2ForMaskedLM"),qUr.forEach(t),IFo=r(FCe," (DeBERTa-v2 model)"),FCe.forEach(t),qFo=i(N),cv=n(N,"LI",{});var TCe=s(cv);_ne=n(TCe,"STRONG",{});var NUr=s(_ne);NFo=r(NUr,"distilbert"),NUr.forEach(t),jFo=r(TCe," \u2014 "),FI=n(TCe,"A",{href:!0});var jUr=s(FI);DFo=r(jUr,"DistilBertForMaskedLM"),jUr.forEach(t),GFo=r(TCe," (DistilBERT model)"),TCe.forEach(t),OFo=i(N),fv=n(N,"LI",{});var MCe=s(fv);vne=n(MCe,"STRONG",{});var DUr=s(vne);VFo=r(DUr,"electra"),DUr.forEach(t),XFo=r(MCe," \u2014 "),TI=n(MCe,"A",{href:!0});var GUr=s(TI);zFo=r(GUr,"ElectraForMaskedLM"),GUr.forEach(t),QFo=r(MCe," (ELECTRA model)"),MCe.forEach(t),WFo=i(N),mv=n(N,"LI",{});var ECe=s(mv);bne=n(ECe,"STRONG",{});var OUr=s(bne);HFo=r(OUr,"flaubert"),OUr.forEach(t),UFo=r(ECe," \u2014 "),MI=n(ECe,"A",{href:!0});var VUr=s(MI);JFo=r(VUr,"FlaubertWithLMHeadModel"),VUr.forEach(t),YFo=r(ECe," (FlauBERT model)"),ECe.forEach(t),KFo=i(N),gv=n(N,"LI",{});var CCe=s(gv);Fne=n(CCe,"STRONG",{});var XUr=s(Fne);ZFo=r(XUr,"fnet"),XUr.forEach(t),e0o=r(CCe," \u2014 "),EI=n(CCe,"A",{href:!0});var zUr=s(EI);o0o=r(zUr,"FNetForMaskedLM"),zUr.forEach(t),r0o=r(CCe," (FNet model)"),CCe.forEach(t),t0o=i(N),hv=n(N,"LI",{});var wCe=s(hv);Tne=n(wCe,"STRONG",{});var QUr=s(Tne);a0o=r(QUr,"funnel"),QUr.forEach(t),n0o=r(wCe," \u2014 "),CI=n(wCe,"A",{href:!0});var WUr=s(CI);s0o=r(WUr,"FunnelForMaskedLM"),WUr.forEach(t),l0o=r(wCe," (Funnel Transformer model)"),wCe.forEach(t),i0o=i(N),uv=n(N,"LI",{});var ACe=s(uv);Mne=n(ACe,"STRONG",{});var HUr=s(Mne);d0o=r(HUr,"ibert"),HUr.forEach(t),c0o=r(ACe," \u2014 "),wI=n(ACe,"A",{href:!0});var UUr=s(wI);f0o=r(UUr,"IBertForMaskedLM"),UUr.forEach(t),m0o=r(ACe," (I-BERT model)"),ACe.forEach(t),g0o=i(N),pv=n(N,"LI",{});var yCe=s(pv);Ene=n(yCe,"STRONG",{});var JUr=s(Ene);h0o=r(JUr,"layoutlm"),JUr.forEach(t),u0o=r(yCe," \u2014 "),AI=n(yCe,"A",{href:!0});var YUr=s(AI);p0o=r(YUr,"LayoutLMForMaskedLM"),YUr.forEach(t),_0o=r(yCe," (LayoutLM model)"),yCe.forEach(t),v0o=i(N),_v=n(N,"LI",{});var LCe=s(_v);Cne=n(LCe,"STRONG",{});var KUr=s(Cne);b0o=r(KUr,"longformer"),KUr.forEach(t),F0o=r(LCe," \u2014 "),yI=n(LCe,"A",{href:!0});var ZUr=s(yI);T0o=r(ZUr,"LongformerForMaskedLM"),ZUr.forEach(t),M0o=r(LCe," (Longformer model)"),LCe.forEach(t),E0o=i(N),vv=n(N,"LI",{});var xCe=s(vv);wne=n(xCe,"STRONG",{});var eJr=s(wne);C0o=r(eJr,"mbart"),eJr.forEach(t),w0o=r(xCe," \u2014 "),LI=n(xCe,"A",{href:!0});var oJr=s(LI);A0o=r(oJr,"MBartForConditionalGeneration"),oJr.forEach(t),y0o=r(xCe," (mBART model)"),xCe.forEach(t),L0o=i(N),bv=n(N,"LI",{});var kCe=s(bv);Ane=n(kCe,"STRONG",{});var rJr=s(Ane);x0o=r(rJr,"megatron-bert"),rJr.forEach(t),k0o=r(kCe," \u2014 "),xI=n(kCe,"A",{href:!0});var tJr=s(xI);S0o=r(tJr,"MegatronBertForMaskedLM"),tJr.forEach(t),R0o=r(kCe," (MegatronBert model)"),kCe.forEach(t),B0o=i(N),Fv=n(N,"LI",{});var SCe=s(Fv);yne=n(SCe,"STRONG",{});var aJr=s(yne);P0o=r(aJr,"mobilebert"),aJr.forEach(t),$0o=r(SCe," \u2014 "),kI=n(SCe,"A",{href:!0});var nJr=s(kI);I0o=r(nJr,"MobileBertForMaskedLM"),nJr.forEach(t),q0o=r(SCe," (MobileBERT model)"),SCe.forEach(t),N0o=i(N),Tv=n(N,"LI",{});var RCe=s(Tv);Lne=n(RCe,"STRONG",{});var sJr=s(Lne);j0o=r(sJr,"mpnet"),sJr.forEach(t),D0o=r(RCe," \u2014 "),SI=n(RCe,"A",{href:!0});var lJr=s(SI);G0o=r(lJr,"MPNetForMaskedLM"),lJr.forEach(t),O0o=r(RCe," (MPNet model)"),RCe.forEach(t),V0o=i(N),Mv=n(N,"LI",{});var BCe=s(Mv);xne=n(BCe,"STRONG",{});var iJr=s(xne);X0o=r(iJr,"nystromformer"),iJr.forEach(t),z0o=r(BCe," \u2014 "),RI=n(BCe,"A",{href:!0});var dJr=s(RI);Q0o=r(dJr,"NystromformerForMaskedLM"),dJr.forEach(t),W0o=r(BCe," (Nystromformer model)"),BCe.forEach(t),H0o=i(N),Ev=n(N,"LI",{});var PCe=s(Ev);kne=n(PCe,"STRONG",{});var cJr=s(kne);U0o=r(cJr,"perceiver"),cJr.forEach(t),J0o=r(PCe," \u2014 "),BI=n(PCe,"A",{href:!0});var fJr=s(BI);Y0o=r(fJr,"PerceiverForMaskedLM"),fJr.forEach(t),K0o=r(PCe," (Perceiver model)"),PCe.forEach(t),Z0o=i(N),Cv=n(N,"LI",{});var $Ce=s(Cv);Sne=n($Ce,"STRONG",{});var mJr=s(Sne);eTo=r(mJr,"qdqbert"),mJr.forEach(t),oTo=r($Ce," \u2014 "),PI=n($Ce,"A",{href:!0});var gJr=s(PI);rTo=r(gJr,"QDQBertForMaskedLM"),gJr.forEach(t),tTo=r($Ce," (QDQBert model)"),$Ce.forEach(t),aTo=i(N),wv=n(N,"LI",{});var ICe=s(wv);Rne=n(ICe,"STRONG",{});var hJr=s(Rne);nTo=r(hJr,"reformer"),hJr.forEach(t),sTo=r(ICe," \u2014 "),$I=n(ICe,"A",{href:!0});var uJr=s($I);lTo=r(uJr,"ReformerForMaskedLM"),uJr.forEach(t),iTo=r(ICe," (Reformer model)"),ICe.forEach(t),dTo=i(N),Av=n(N,"LI",{});var qCe=s(Av);Bne=n(qCe,"STRONG",{});var pJr=s(Bne);cTo=r(pJr,"rembert"),pJr.forEach(t),fTo=r(qCe," \u2014 "),II=n(qCe,"A",{href:!0});var _Jr=s(II);mTo=r(_Jr,"RemBertForMaskedLM"),_Jr.forEach(t),gTo=r(qCe," (RemBERT model)"),qCe.forEach(t),hTo=i(N),yv=n(N,"LI",{});var NCe=s(yv);Pne=n(NCe,"STRONG",{});var vJr=s(Pne);uTo=r(vJr,"roberta"),vJr.forEach(t),pTo=r(NCe," \u2014 "),qI=n(NCe,"A",{href:!0});var bJr=s(qI);_To=r(bJr,"RobertaForMaskedLM"),bJr.forEach(t),vTo=r(NCe," (RoBERTa model)"),NCe.forEach(t),bTo=i(N),Lv=n(N,"LI",{});var jCe=s(Lv);$ne=n(jCe,"STRONG",{});var FJr=s($ne);FTo=r(FJr,"roformer"),FJr.forEach(t),TTo=r(jCe," \u2014 "),NI=n(jCe,"A",{href:!0});var TJr=s(NI);MTo=r(TJr,"RoFormerForMaskedLM"),TJr.forEach(t),ETo=r(jCe," (RoFormer model)"),jCe.forEach(t),CTo=i(N),xv=n(N,"LI",{});var DCe=s(xv);Ine=n(DCe,"STRONG",{});var MJr=s(Ine);wTo=r(MJr,"squeezebert"),MJr.forEach(t),ATo=r(DCe," \u2014 "),jI=n(DCe,"A",{href:!0});var EJr=s(jI);yTo=r(EJr,"SqueezeBertForMaskedLM"),EJr.forEach(t),LTo=r(DCe," (SqueezeBERT model)"),DCe.forEach(t),xTo=i(N),kv=n(N,"LI",{});var GCe=s(kv);qne=n(GCe,"STRONG",{});var CJr=s(qne);kTo=r(CJr,"tapas"),CJr.forEach(t),STo=r(GCe," \u2014 "),DI=n(GCe,"A",{href:!0});var wJr=s(DI);RTo=r(wJr,"TapasForMaskedLM"),wJr.forEach(t),BTo=r(GCe," (TAPAS model)"),GCe.forEach(t),PTo=i(N),Sv=n(N,"LI",{});var OCe=s(Sv);Nne=n(OCe,"STRONG",{});var AJr=s(Nne);$To=r(AJr,"wav2vec2"),AJr.forEach(t),ITo=r(OCe," \u2014 "),jne=n(OCe,"CODE",{});var yJr=s(jne);qTo=r(yJr,"Wav2Vec2ForMaskedLM"),yJr.forEach(t),NTo=r(OCe," (Wav2Vec2 model)"),OCe.forEach(t),jTo=i(N),Rv=n(N,"LI",{});var VCe=s(Rv);Dne=n(VCe,"STRONG",{});var LJr=s(Dne);DTo=r(LJr,"xlm"),LJr.forEach(t),GTo=r(VCe," \u2014 "),GI=n(VCe,"A",{href:!0});var xJr=s(GI);OTo=r(xJr,"XLMWithLMHeadModel"),xJr.forEach(t),VTo=r(VCe," (XLM model)"),VCe.forEach(t),XTo=i(N),Bv=n(N,"LI",{});var XCe=s(Bv);Gne=n(XCe,"STRONG",{});var kJr=s(Gne);zTo=r(kJr,"xlm-roberta"),kJr.forEach(t),QTo=r(XCe," \u2014 "),OI=n(XCe,"A",{href:!0});var SJr=s(OI);WTo=r(SJr,"XLMRobertaForMaskedLM"),SJr.forEach(t),HTo=r(XCe," (XLM-RoBERTa model)"),XCe.forEach(t),UTo=i(N),Pv=n(N,"LI",{});var zCe=s(Pv);One=n(zCe,"STRONG",{});var RJr=s(One);JTo=r(RJr,"xlm-roberta-xl"),RJr.forEach(t),YTo=r(zCe," \u2014 "),VI=n(zCe,"A",{href:!0});var BJr=s(VI);KTo=r(BJr,"XLMRobertaXLForMaskedLM"),BJr.forEach(t),ZTo=r(zCe," (XLM-RoBERTa-XL model)"),zCe.forEach(t),e8o=i(N),$v=n(N,"LI",{});var QCe=s($v);Vne=n(QCe,"STRONG",{});var PJr=s(Vne);o8o=r(PJr,"yoso"),PJr.forEach(t),r8o=r(QCe," \u2014 "),XI=n(QCe,"A",{href:!0});var $Jr=s(XI);t8o=r($Jr,"YosoForMaskedLM"),$Jr.forEach(t),a8o=r(QCe," (YOSO model)"),QCe.forEach(t),N.forEach(t),n8o=i(Vt),Iv=n(Vt,"P",{});var WCe=s(Iv);s8o=r(WCe,"The model is set in evaluation mode by default using "),Xne=n(WCe,"CODE",{});var IJr=s(Xne);l8o=r(IJr,"model.eval()"),IJr.forEach(t),i8o=r(WCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(WCe,"CODE",{});var qJr=s(zne);d8o=r(qJr,"model.train()"),qJr.forEach(t),WCe.forEach(t),c8o=i(Vt),Qne=n(Vt,"P",{});var NJr=s(Qne);f8o=r(NJr,"Examples:"),NJr.forEach(t),m8o=i(Vt),m(MC.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),aRe=i(c),id=n(c,"H2",{class:!0});var gPe=s(id);qv=n(gPe,"A",{id:!0,class:!0,href:!0});var jJr=s(qv);Wne=n(jJr,"SPAN",{});var DJr=s(Wne);m(EC.$$.fragment,DJr),DJr.forEach(t),jJr.forEach(t),g8o=i(gPe),Hne=n(gPe,"SPAN",{});var GJr=s(Hne);h8o=r(GJr,"AutoModelForSeq2SeqLM"),GJr.forEach(t),gPe.forEach(t),nRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(CC.$$.fragment,el),u8o=i(el),dd=n(el,"P",{});var tU=s(dd);p8o=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=n(tU,"A",{href:!0});var OJr=s(zI);_8o=r(OJr,"from_pretrained()"),OJr.forEach(t),v8o=r(tU," class method or the "),QI=n(tU,"A",{href:!0});var VJr=s(QI);b8o=r(VJr,"from_config()"),VJr.forEach(t),F8o=r(tU,` class
method.`),tU.forEach(t),T8o=i(el),wC=n(el,"P",{});var hPe=s(wC);M8o=r(hPe,"This class cannot be instantiated directly using "),Une=n(hPe,"CODE",{});var XJr=s(Une);E8o=r(XJr,"__init__()"),XJr.forEach(t),C8o=r(hPe," (throws an error)."),hPe.forEach(t),w8o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(AC.$$.fragment,ol),A8o=i(ol),Jne=n(ol,"P",{});var zJr=s(Jne);y8o=r(zJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zJr.forEach(t),L8o=i(ol),cd=n(ol,"P",{});var aU=s(cd);x8o=r(aU,`Note:
Loading a model from its configuration file does `),Yne=n(aU,"STRONG",{});var QJr=s(Yne);k8o=r(QJr,"not"),QJr.forEach(t),S8o=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=n(aU,"A",{href:!0});var WJr=s(WI);R8o=r(WJr,"from_pretrained()"),WJr.forEach(t),B8o=r(aU," to load the model weights."),aU.forEach(t),P8o=i(ol),Kne=n(ol,"P",{});var HJr=s(Kne);$8o=r(HJr,"Examples:"),HJr.forEach(t),I8o=i(ol),m(yC.$$.fragment,ol),ol.forEach(t),q8o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(LC.$$.fragment,Xt),N8o=i(Xt),Zne=n(Xt,"P",{});var UJr=s(Zne);j8o=r(UJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UJr.forEach(t),D8o=i(Xt),Ha=n(Xt,"P",{});var E5=s(Ha);G8o=r(E5,"The model class to instantiate is selected based on the "),ese=n(E5,"CODE",{});var JJr=s(ese);O8o=r(JJr,"model_type"),JJr.forEach(t),V8o=r(E5,` property of the config object (either
passed as an argument or loaded from `),ose=n(E5,"CODE",{});var YJr=s(ose);X8o=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),z8o=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(E5,"CODE",{});var KJr=s(rse);Q8o=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),W8o=r(E5,":"),E5.forEach(t),H8o=i(Xt),se=n(Xt,"UL",{});var ie=s(se);Nv=n(ie,"LI",{});var HCe=s(Nv);tse=n(HCe,"STRONG",{});var ZJr=s(tse);U8o=r(ZJr,"bart"),ZJr.forEach(t),J8o=r(HCe," \u2014 "),HI=n(HCe,"A",{href:!0});var eYr=s(HI);Y8o=r(eYr,"BartForConditionalGeneration"),eYr.forEach(t),K8o=r(HCe," (BART model)"),HCe.forEach(t),Z8o=i(ie),jv=n(ie,"LI",{});var UCe=s(jv);ase=n(UCe,"STRONG",{});var oYr=s(ase);eMo=r(oYr,"bigbird_pegasus"),oYr.forEach(t),oMo=r(UCe," \u2014 "),UI=n(UCe,"A",{href:!0});var rYr=s(UI);rMo=r(rYr,"BigBirdPegasusForConditionalGeneration"),rYr.forEach(t),tMo=r(UCe," (BigBirdPegasus model)"),UCe.forEach(t),aMo=i(ie),Dv=n(ie,"LI",{});var JCe=s(Dv);nse=n(JCe,"STRONG",{});var tYr=s(nse);nMo=r(tYr,"blenderbot"),tYr.forEach(t),sMo=r(JCe," \u2014 "),JI=n(JCe,"A",{href:!0});var aYr=s(JI);lMo=r(aYr,"BlenderbotForConditionalGeneration"),aYr.forEach(t),iMo=r(JCe," (Blenderbot model)"),JCe.forEach(t),dMo=i(ie),Gv=n(ie,"LI",{});var YCe=s(Gv);sse=n(YCe,"STRONG",{});var nYr=s(sse);cMo=r(nYr,"blenderbot-small"),nYr.forEach(t),fMo=r(YCe," \u2014 "),YI=n(YCe,"A",{href:!0});var sYr=s(YI);mMo=r(sYr,"BlenderbotSmallForConditionalGeneration"),sYr.forEach(t),gMo=r(YCe," (BlenderbotSmall model)"),YCe.forEach(t),hMo=i(ie),Ov=n(ie,"LI",{});var KCe=s(Ov);lse=n(KCe,"STRONG",{});var lYr=s(lse);uMo=r(lYr,"encoder-decoder"),lYr.forEach(t),pMo=r(KCe," \u2014 "),KI=n(KCe,"A",{href:!0});var iYr=s(KI);_Mo=r(iYr,"EncoderDecoderModel"),iYr.forEach(t),vMo=r(KCe," (Encoder decoder model)"),KCe.forEach(t),bMo=i(ie),Vv=n(ie,"LI",{});var ZCe=s(Vv);ise=n(ZCe,"STRONG",{});var dYr=s(ise);FMo=r(dYr,"fsmt"),dYr.forEach(t),TMo=r(ZCe," \u2014 "),ZI=n(ZCe,"A",{href:!0});var cYr=s(ZI);MMo=r(cYr,"FSMTForConditionalGeneration"),cYr.forEach(t),EMo=r(ZCe," (FairSeq Machine-Translation model)"),ZCe.forEach(t),CMo=i(ie),Xv=n(ie,"LI",{});var ewe=s(Xv);dse=n(ewe,"STRONG",{});var fYr=s(dse);wMo=r(fYr,"led"),fYr.forEach(t),AMo=r(ewe," \u2014 "),eq=n(ewe,"A",{href:!0});var mYr=s(eq);yMo=r(mYr,"LEDForConditionalGeneration"),mYr.forEach(t),LMo=r(ewe," (LED model)"),ewe.forEach(t),xMo=i(ie),zv=n(ie,"LI",{});var owe=s(zv);cse=n(owe,"STRONG",{});var gYr=s(cse);kMo=r(gYr,"m2m_100"),gYr.forEach(t),SMo=r(owe," \u2014 "),oq=n(owe,"A",{href:!0});var hYr=s(oq);RMo=r(hYr,"M2M100ForConditionalGeneration"),hYr.forEach(t),BMo=r(owe," (M2M100 model)"),owe.forEach(t),PMo=i(ie),Qv=n(ie,"LI",{});var rwe=s(Qv);fse=n(rwe,"STRONG",{});var uYr=s(fse);$Mo=r(uYr,"marian"),uYr.forEach(t),IMo=r(rwe," \u2014 "),rq=n(rwe,"A",{href:!0});var pYr=s(rq);qMo=r(pYr,"MarianMTModel"),pYr.forEach(t),NMo=r(rwe," (Marian model)"),rwe.forEach(t),jMo=i(ie),Wv=n(ie,"LI",{});var twe=s(Wv);mse=n(twe,"STRONG",{});var _Yr=s(mse);DMo=r(_Yr,"mbart"),_Yr.forEach(t),GMo=r(twe," \u2014 "),tq=n(twe,"A",{href:!0});var vYr=s(tq);OMo=r(vYr,"MBartForConditionalGeneration"),vYr.forEach(t),VMo=r(twe," (mBART model)"),twe.forEach(t),XMo=i(ie),Hv=n(ie,"LI",{});var awe=s(Hv);gse=n(awe,"STRONG",{});var bYr=s(gse);zMo=r(bYr,"mt5"),bYr.forEach(t),QMo=r(awe," \u2014 "),aq=n(awe,"A",{href:!0});var FYr=s(aq);WMo=r(FYr,"MT5ForConditionalGeneration"),FYr.forEach(t),HMo=r(awe," (mT5 model)"),awe.forEach(t),UMo=i(ie),Uv=n(ie,"LI",{});var nwe=s(Uv);hse=n(nwe,"STRONG",{});var TYr=s(hse);JMo=r(TYr,"pegasus"),TYr.forEach(t),YMo=r(nwe," \u2014 "),nq=n(nwe,"A",{href:!0});var MYr=s(nq);KMo=r(MYr,"PegasusForConditionalGeneration"),MYr.forEach(t),ZMo=r(nwe," (Pegasus model)"),nwe.forEach(t),eEo=i(ie),Jv=n(ie,"LI",{});var swe=s(Jv);use=n(swe,"STRONG",{});var EYr=s(use);oEo=r(EYr,"plbart"),EYr.forEach(t),rEo=r(swe," \u2014 "),sq=n(swe,"A",{href:!0});var CYr=s(sq);tEo=r(CYr,"PLBartForConditionalGeneration"),CYr.forEach(t),aEo=r(swe," (PLBart model)"),swe.forEach(t),nEo=i(ie),Yv=n(ie,"LI",{});var lwe=s(Yv);pse=n(lwe,"STRONG",{});var wYr=s(pse);sEo=r(wYr,"prophetnet"),wYr.forEach(t),lEo=r(lwe," \u2014 "),lq=n(lwe,"A",{href:!0});var AYr=s(lq);iEo=r(AYr,"ProphetNetForConditionalGeneration"),AYr.forEach(t),dEo=r(lwe," (ProphetNet model)"),lwe.forEach(t),cEo=i(ie),Kv=n(ie,"LI",{});var iwe=s(Kv);_se=n(iwe,"STRONG",{});var yYr=s(_se);fEo=r(yYr,"t5"),yYr.forEach(t),mEo=r(iwe," \u2014 "),iq=n(iwe,"A",{href:!0});var LYr=s(iq);gEo=r(LYr,"T5ForConditionalGeneration"),LYr.forEach(t),hEo=r(iwe," (T5 model)"),iwe.forEach(t),uEo=i(ie),Zv=n(ie,"LI",{});var dwe=s(Zv);vse=n(dwe,"STRONG",{});var xYr=s(vse);pEo=r(xYr,"xlm-prophetnet"),xYr.forEach(t),_Eo=r(dwe," \u2014 "),dq=n(dwe,"A",{href:!0});var kYr=s(dq);vEo=r(kYr,"XLMProphetNetForConditionalGeneration"),kYr.forEach(t),bEo=r(dwe," (XLMProphetNet model)"),dwe.forEach(t),ie.forEach(t),FEo=i(Xt),e1=n(Xt,"P",{});var cwe=s(e1);TEo=r(cwe,"The model is set in evaluation mode by default using "),bse=n(cwe,"CODE",{});var SYr=s(bse);MEo=r(SYr,"model.eval()"),SYr.forEach(t),EEo=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fse=n(cwe,"CODE",{});var RYr=s(Fse);CEo=r(RYr,"model.train()"),RYr.forEach(t),cwe.forEach(t),wEo=i(Xt),Tse=n(Xt,"P",{});var BYr=s(Tse);AEo=r(BYr,"Examples:"),BYr.forEach(t),yEo=i(Xt),m(xC.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),sRe=i(c),fd=n(c,"H2",{class:!0});var uPe=s(fd);o1=n(uPe,"A",{id:!0,class:!0,href:!0});var PYr=s(o1);Mse=n(PYr,"SPAN",{});var $Yr=s(Mse);m(kC.$$.fragment,$Yr),$Yr.forEach(t),PYr.forEach(t),LEo=i(uPe),Ese=n(uPe,"SPAN",{});var IYr=s(Ese);xEo=r(IYr,"AutoModelForSequenceClassification"),IYr.forEach(t),uPe.forEach(t),lRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(SC.$$.fragment,rl),kEo=i(rl),md=n(rl,"P",{});var nU=s(md);SEo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=n(nU,"A",{href:!0});var qYr=s(cq);REo=r(qYr,"from_pretrained()"),qYr.forEach(t),BEo=r(nU," class method or the "),fq=n(nU,"A",{href:!0});var NYr=s(fq);PEo=r(NYr,"from_config()"),NYr.forEach(t),$Eo=r(nU,` class
method.`),nU.forEach(t),IEo=i(rl),RC=n(rl,"P",{});var pPe=s(RC);qEo=r(pPe,"This class cannot be instantiated directly using "),Cse=n(pPe,"CODE",{});var jYr=s(Cse);NEo=r(jYr,"__init__()"),jYr.forEach(t),jEo=r(pPe," (throws an error)."),pPe.forEach(t),DEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(BC.$$.fragment,tl),GEo=i(tl),wse=n(tl,"P",{});var DYr=s(wse);OEo=r(DYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DYr.forEach(t),VEo=i(tl),gd=n(tl,"P",{});var sU=s(gd);XEo=r(sU,`Note:
Loading a model from its configuration file does `),Ase=n(sU,"STRONG",{});var GYr=s(Ase);zEo=r(GYr,"not"),GYr.forEach(t),QEo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n(sU,"A",{href:!0});var OYr=s(mq);WEo=r(OYr,"from_pretrained()"),OYr.forEach(t),HEo=r(sU," to load the model weights."),sU.forEach(t),UEo=i(tl),yse=n(tl,"P",{});var VYr=s(yse);JEo=r(VYr,"Examples:"),VYr.forEach(t),YEo=i(tl),m(PC.$$.fragment,tl),tl.forEach(t),KEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m($C.$$.fragment,zt),ZEo=i(zt),Lse=n(zt,"P",{});var XYr=s(Lse);e5o=r(XYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XYr.forEach(t),o5o=i(zt),Ua=n(zt,"P",{});var C5=s(Ua);r5o=r(C5,"The model class to instantiate is selected based on the "),xse=n(C5,"CODE",{});var zYr=s(xse);t5o=r(zYr,"model_type"),zYr.forEach(t),a5o=r(C5,` property of the config object (either
passed as an argument or loaded from `),kse=n(C5,"CODE",{});var QYr=s(kse);n5o=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),s5o=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(C5,"CODE",{});var WYr=s(Sse);l5o=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),i5o=r(C5,":"),C5.forEach(t),d5o=i(zt),y=n(zt,"UL",{});var L=s(y);r1=n(L,"LI",{});var fwe=s(r1);Rse=n(fwe,"STRONG",{});var HYr=s(Rse);c5o=r(HYr,"albert"),HYr.forEach(t),f5o=r(fwe," \u2014 "),gq=n(fwe,"A",{href:!0});var UYr=s(gq);m5o=r(UYr,"AlbertForSequenceClassification"),UYr.forEach(t),g5o=r(fwe," (ALBERT model)"),fwe.forEach(t),h5o=i(L),t1=n(L,"LI",{});var mwe=s(t1);Bse=n(mwe,"STRONG",{});var JYr=s(Bse);u5o=r(JYr,"bart"),JYr.forEach(t),p5o=r(mwe," \u2014 "),hq=n(mwe,"A",{href:!0});var YYr=s(hq);_5o=r(YYr,"BartForSequenceClassification"),YYr.forEach(t),v5o=r(mwe," (BART model)"),mwe.forEach(t),b5o=i(L),a1=n(L,"LI",{});var gwe=s(a1);Pse=n(gwe,"STRONG",{});var KYr=s(Pse);F5o=r(KYr,"bert"),KYr.forEach(t),T5o=r(gwe," \u2014 "),uq=n(gwe,"A",{href:!0});var ZYr=s(uq);M5o=r(ZYr,"BertForSequenceClassification"),ZYr.forEach(t),E5o=r(gwe," (BERT model)"),gwe.forEach(t),C5o=i(L),n1=n(L,"LI",{});var hwe=s(n1);$se=n(hwe,"STRONG",{});var eKr=s($se);w5o=r(eKr,"big_bird"),eKr.forEach(t),A5o=r(hwe," \u2014 "),pq=n(hwe,"A",{href:!0});var oKr=s(pq);y5o=r(oKr,"BigBirdForSequenceClassification"),oKr.forEach(t),L5o=r(hwe," (BigBird model)"),hwe.forEach(t),x5o=i(L),s1=n(L,"LI",{});var uwe=s(s1);Ise=n(uwe,"STRONG",{});var rKr=s(Ise);k5o=r(rKr,"bigbird_pegasus"),rKr.forEach(t),S5o=r(uwe," \u2014 "),_q=n(uwe,"A",{href:!0});var tKr=s(_q);R5o=r(tKr,"BigBirdPegasusForSequenceClassification"),tKr.forEach(t),B5o=r(uwe," (BigBirdPegasus model)"),uwe.forEach(t),P5o=i(L),l1=n(L,"LI",{});var pwe=s(l1);qse=n(pwe,"STRONG",{});var aKr=s(qse);$5o=r(aKr,"camembert"),aKr.forEach(t),I5o=r(pwe," \u2014 "),vq=n(pwe,"A",{href:!0});var nKr=s(vq);q5o=r(nKr,"CamembertForSequenceClassification"),nKr.forEach(t),N5o=r(pwe," (CamemBERT model)"),pwe.forEach(t),j5o=i(L),i1=n(L,"LI",{});var _we=s(i1);Nse=n(_we,"STRONG",{});var sKr=s(Nse);D5o=r(sKr,"canine"),sKr.forEach(t),G5o=r(_we," \u2014 "),bq=n(_we,"A",{href:!0});var lKr=s(bq);O5o=r(lKr,"CanineForSequenceClassification"),lKr.forEach(t),V5o=r(_we," (Canine model)"),_we.forEach(t),X5o=i(L),d1=n(L,"LI",{});var vwe=s(d1);jse=n(vwe,"STRONG",{});var iKr=s(jse);z5o=r(iKr,"convbert"),iKr.forEach(t),Q5o=r(vwe," \u2014 "),Fq=n(vwe,"A",{href:!0});var dKr=s(Fq);W5o=r(dKr,"ConvBertForSequenceClassification"),dKr.forEach(t),H5o=r(vwe," (ConvBERT model)"),vwe.forEach(t),U5o=i(L),c1=n(L,"LI",{});var bwe=s(c1);Dse=n(bwe,"STRONG",{});var cKr=s(Dse);J5o=r(cKr,"ctrl"),cKr.forEach(t),Y5o=r(bwe," \u2014 "),Tq=n(bwe,"A",{href:!0});var fKr=s(Tq);K5o=r(fKr,"CTRLForSequenceClassification"),fKr.forEach(t),Z5o=r(bwe," (CTRL model)"),bwe.forEach(t),e3o=i(L),f1=n(L,"LI",{});var Fwe=s(f1);Gse=n(Fwe,"STRONG",{});var mKr=s(Gse);o3o=r(mKr,"data2vec-text"),mKr.forEach(t),r3o=r(Fwe," \u2014 "),Mq=n(Fwe,"A",{href:!0});var gKr=s(Mq);t3o=r(gKr,"Data2VecTextForSequenceClassification"),gKr.forEach(t),a3o=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),n3o=i(L),m1=n(L,"LI",{});var Twe=s(m1);Ose=n(Twe,"STRONG",{});var hKr=s(Ose);s3o=r(hKr,"deberta"),hKr.forEach(t),l3o=r(Twe," \u2014 "),Eq=n(Twe,"A",{href:!0});var uKr=s(Eq);i3o=r(uKr,"DebertaForSequenceClassification"),uKr.forEach(t),d3o=r(Twe," (DeBERTa model)"),Twe.forEach(t),c3o=i(L),g1=n(L,"LI",{});var Mwe=s(g1);Vse=n(Mwe,"STRONG",{});var pKr=s(Vse);f3o=r(pKr,"deberta-v2"),pKr.forEach(t),m3o=r(Mwe," \u2014 "),Cq=n(Mwe,"A",{href:!0});var _Kr=s(Cq);g3o=r(_Kr,"DebertaV2ForSequenceClassification"),_Kr.forEach(t),h3o=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),u3o=i(L),h1=n(L,"LI",{});var Ewe=s(h1);Xse=n(Ewe,"STRONG",{});var vKr=s(Xse);p3o=r(vKr,"distilbert"),vKr.forEach(t),_3o=r(Ewe," \u2014 "),wq=n(Ewe,"A",{href:!0});var bKr=s(wq);v3o=r(bKr,"DistilBertForSequenceClassification"),bKr.forEach(t),b3o=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),F3o=i(L),u1=n(L,"LI",{});var Cwe=s(u1);zse=n(Cwe,"STRONG",{});var FKr=s(zse);T3o=r(FKr,"electra"),FKr.forEach(t),M3o=r(Cwe," \u2014 "),Aq=n(Cwe,"A",{href:!0});var TKr=s(Aq);E3o=r(TKr,"ElectraForSequenceClassification"),TKr.forEach(t),C3o=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),w3o=i(L),p1=n(L,"LI",{});var wwe=s(p1);Qse=n(wwe,"STRONG",{});var MKr=s(Qse);A3o=r(MKr,"flaubert"),MKr.forEach(t),y3o=r(wwe," \u2014 "),yq=n(wwe,"A",{href:!0});var EKr=s(yq);L3o=r(EKr,"FlaubertForSequenceClassification"),EKr.forEach(t),x3o=r(wwe," (FlauBERT model)"),wwe.forEach(t),k3o=i(L),_1=n(L,"LI",{});var Awe=s(_1);Wse=n(Awe,"STRONG",{});var CKr=s(Wse);S3o=r(CKr,"fnet"),CKr.forEach(t),R3o=r(Awe," \u2014 "),Lq=n(Awe,"A",{href:!0});var wKr=s(Lq);B3o=r(wKr,"FNetForSequenceClassification"),wKr.forEach(t),P3o=r(Awe," (FNet model)"),Awe.forEach(t),$3o=i(L),v1=n(L,"LI",{});var ywe=s(v1);Hse=n(ywe,"STRONG",{});var AKr=s(Hse);I3o=r(AKr,"funnel"),AKr.forEach(t),q3o=r(ywe," \u2014 "),xq=n(ywe,"A",{href:!0});var yKr=s(xq);N3o=r(yKr,"FunnelForSequenceClassification"),yKr.forEach(t),j3o=r(ywe," (Funnel Transformer model)"),ywe.forEach(t),D3o=i(L),b1=n(L,"LI",{});var Lwe=s(b1);Use=n(Lwe,"STRONG",{});var LKr=s(Use);G3o=r(LKr,"gpt2"),LKr.forEach(t),O3o=r(Lwe," \u2014 "),kq=n(Lwe,"A",{href:!0});var xKr=s(kq);V3o=r(xKr,"GPT2ForSequenceClassification"),xKr.forEach(t),X3o=r(Lwe," (OpenAI GPT-2 model)"),Lwe.forEach(t),z3o=i(L),F1=n(L,"LI",{});var xwe=s(F1);Jse=n(xwe,"STRONG",{});var kKr=s(Jse);Q3o=r(kKr,"gpt_neo"),kKr.forEach(t),W3o=r(xwe," \u2014 "),Sq=n(xwe,"A",{href:!0});var SKr=s(Sq);H3o=r(SKr,"GPTNeoForSequenceClassification"),SKr.forEach(t),U3o=r(xwe," (GPT Neo model)"),xwe.forEach(t),J3o=i(L),T1=n(L,"LI",{});var kwe=s(T1);Yse=n(kwe,"STRONG",{});var RKr=s(Yse);Y3o=r(RKr,"gptj"),RKr.forEach(t),K3o=r(kwe," \u2014 "),Rq=n(kwe,"A",{href:!0});var BKr=s(Rq);Z3o=r(BKr,"GPTJForSequenceClassification"),BKr.forEach(t),eCo=r(kwe," (GPT-J model)"),kwe.forEach(t),oCo=i(L),M1=n(L,"LI",{});var Swe=s(M1);Kse=n(Swe,"STRONG",{});var PKr=s(Kse);rCo=r(PKr,"ibert"),PKr.forEach(t),tCo=r(Swe," \u2014 "),Bq=n(Swe,"A",{href:!0});var $Kr=s(Bq);aCo=r($Kr,"IBertForSequenceClassification"),$Kr.forEach(t),nCo=r(Swe," (I-BERT model)"),Swe.forEach(t),sCo=i(L),E1=n(L,"LI",{});var Rwe=s(E1);Zse=n(Rwe,"STRONG",{});var IKr=s(Zse);lCo=r(IKr,"layoutlm"),IKr.forEach(t),iCo=r(Rwe," \u2014 "),Pq=n(Rwe,"A",{href:!0});var qKr=s(Pq);dCo=r(qKr,"LayoutLMForSequenceClassification"),qKr.forEach(t),cCo=r(Rwe," (LayoutLM model)"),Rwe.forEach(t),fCo=i(L),C1=n(L,"LI",{});var Bwe=s(C1);ele=n(Bwe,"STRONG",{});var NKr=s(ele);mCo=r(NKr,"layoutlmv2"),NKr.forEach(t),gCo=r(Bwe," \u2014 "),$q=n(Bwe,"A",{href:!0});var jKr=s($q);hCo=r(jKr,"LayoutLMv2ForSequenceClassification"),jKr.forEach(t),uCo=r(Bwe," (LayoutLMv2 model)"),Bwe.forEach(t),pCo=i(L),w1=n(L,"LI",{});var Pwe=s(w1);ole=n(Pwe,"STRONG",{});var DKr=s(ole);_Co=r(DKr,"led"),DKr.forEach(t),vCo=r(Pwe," \u2014 "),Iq=n(Pwe,"A",{href:!0});var GKr=s(Iq);bCo=r(GKr,"LEDForSequenceClassification"),GKr.forEach(t),FCo=r(Pwe," (LED model)"),Pwe.forEach(t),TCo=i(L),A1=n(L,"LI",{});var $we=s(A1);rle=n($we,"STRONG",{});var OKr=s(rle);MCo=r(OKr,"longformer"),OKr.forEach(t),ECo=r($we," \u2014 "),qq=n($we,"A",{href:!0});var VKr=s(qq);CCo=r(VKr,"LongformerForSequenceClassification"),VKr.forEach(t),wCo=r($we," (Longformer model)"),$we.forEach(t),ACo=i(L),y1=n(L,"LI",{});var Iwe=s(y1);tle=n(Iwe,"STRONG",{});var XKr=s(tle);yCo=r(XKr,"mbart"),XKr.forEach(t),LCo=r(Iwe," \u2014 "),Nq=n(Iwe,"A",{href:!0});var zKr=s(Nq);xCo=r(zKr,"MBartForSequenceClassification"),zKr.forEach(t),kCo=r(Iwe," (mBART model)"),Iwe.forEach(t),SCo=i(L),L1=n(L,"LI",{});var qwe=s(L1);ale=n(qwe,"STRONG",{});var QKr=s(ale);RCo=r(QKr,"megatron-bert"),QKr.forEach(t),BCo=r(qwe," \u2014 "),jq=n(qwe,"A",{href:!0});var WKr=s(jq);PCo=r(WKr,"MegatronBertForSequenceClassification"),WKr.forEach(t),$Co=r(qwe," (MegatronBert model)"),qwe.forEach(t),ICo=i(L),x1=n(L,"LI",{});var Nwe=s(x1);nle=n(Nwe,"STRONG",{});var HKr=s(nle);qCo=r(HKr,"mobilebert"),HKr.forEach(t),NCo=r(Nwe," \u2014 "),Dq=n(Nwe,"A",{href:!0});var UKr=s(Dq);jCo=r(UKr,"MobileBertForSequenceClassification"),UKr.forEach(t),DCo=r(Nwe," (MobileBERT model)"),Nwe.forEach(t),GCo=i(L),k1=n(L,"LI",{});var jwe=s(k1);sle=n(jwe,"STRONG",{});var JKr=s(sle);OCo=r(JKr,"mpnet"),JKr.forEach(t),VCo=r(jwe," \u2014 "),Gq=n(jwe,"A",{href:!0});var YKr=s(Gq);XCo=r(YKr,"MPNetForSequenceClassification"),YKr.forEach(t),zCo=r(jwe," (MPNet model)"),jwe.forEach(t),QCo=i(L),S1=n(L,"LI",{});var Dwe=s(S1);lle=n(Dwe,"STRONG",{});var KKr=s(lle);WCo=r(KKr,"nystromformer"),KKr.forEach(t),HCo=r(Dwe," \u2014 "),Oq=n(Dwe,"A",{href:!0});var ZKr=s(Oq);UCo=r(ZKr,"NystromformerForSequenceClassification"),ZKr.forEach(t),JCo=r(Dwe," (Nystromformer model)"),Dwe.forEach(t),YCo=i(L),R1=n(L,"LI",{});var Gwe=s(R1);ile=n(Gwe,"STRONG",{});var eZr=s(ile);KCo=r(eZr,"openai-gpt"),eZr.forEach(t),ZCo=r(Gwe," \u2014 "),Vq=n(Gwe,"A",{href:!0});var oZr=s(Vq);ewo=r(oZr,"OpenAIGPTForSequenceClassification"),oZr.forEach(t),owo=r(Gwe," (OpenAI GPT model)"),Gwe.forEach(t),rwo=i(L),B1=n(L,"LI",{});var Owe=s(B1);dle=n(Owe,"STRONG",{});var rZr=s(dle);two=r(rZr,"perceiver"),rZr.forEach(t),awo=r(Owe," \u2014 "),Xq=n(Owe,"A",{href:!0});var tZr=s(Xq);nwo=r(tZr,"PerceiverForSequenceClassification"),tZr.forEach(t),swo=r(Owe," (Perceiver model)"),Owe.forEach(t),lwo=i(L),P1=n(L,"LI",{});var Vwe=s(P1);cle=n(Vwe,"STRONG",{});var aZr=s(cle);iwo=r(aZr,"plbart"),aZr.forEach(t),dwo=r(Vwe," \u2014 "),zq=n(Vwe,"A",{href:!0});var nZr=s(zq);cwo=r(nZr,"PLBartForSequenceClassification"),nZr.forEach(t),fwo=r(Vwe," (PLBart model)"),Vwe.forEach(t),mwo=i(L),$1=n(L,"LI",{});var Xwe=s($1);fle=n(Xwe,"STRONG",{});var sZr=s(fle);gwo=r(sZr,"qdqbert"),sZr.forEach(t),hwo=r(Xwe," \u2014 "),Qq=n(Xwe,"A",{href:!0});var lZr=s(Qq);uwo=r(lZr,"QDQBertForSequenceClassification"),lZr.forEach(t),pwo=r(Xwe," (QDQBert model)"),Xwe.forEach(t),_wo=i(L),I1=n(L,"LI",{});var zwe=s(I1);mle=n(zwe,"STRONG",{});var iZr=s(mle);vwo=r(iZr,"reformer"),iZr.forEach(t),bwo=r(zwe," \u2014 "),Wq=n(zwe,"A",{href:!0});var dZr=s(Wq);Fwo=r(dZr,"ReformerForSequenceClassification"),dZr.forEach(t),Two=r(zwe," (Reformer model)"),zwe.forEach(t),Mwo=i(L),q1=n(L,"LI",{});var Qwe=s(q1);gle=n(Qwe,"STRONG",{});var cZr=s(gle);Ewo=r(cZr,"rembert"),cZr.forEach(t),Cwo=r(Qwe," \u2014 "),Hq=n(Qwe,"A",{href:!0});var fZr=s(Hq);wwo=r(fZr,"RemBertForSequenceClassification"),fZr.forEach(t),Awo=r(Qwe," (RemBERT model)"),Qwe.forEach(t),ywo=i(L),N1=n(L,"LI",{});var Wwe=s(N1);hle=n(Wwe,"STRONG",{});var mZr=s(hle);Lwo=r(mZr,"roberta"),mZr.forEach(t),xwo=r(Wwe," \u2014 "),Uq=n(Wwe,"A",{href:!0});var gZr=s(Uq);kwo=r(gZr,"RobertaForSequenceClassification"),gZr.forEach(t),Swo=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),Rwo=i(L),j1=n(L,"LI",{});var Hwe=s(j1);ule=n(Hwe,"STRONG",{});var hZr=s(ule);Bwo=r(hZr,"roformer"),hZr.forEach(t),Pwo=r(Hwe," \u2014 "),Jq=n(Hwe,"A",{href:!0});var uZr=s(Jq);$wo=r(uZr,"RoFormerForSequenceClassification"),uZr.forEach(t),Iwo=r(Hwe," (RoFormer model)"),Hwe.forEach(t),qwo=i(L),D1=n(L,"LI",{});var Uwe=s(D1);ple=n(Uwe,"STRONG",{});var pZr=s(ple);Nwo=r(pZr,"squeezebert"),pZr.forEach(t),jwo=r(Uwe," \u2014 "),Yq=n(Uwe,"A",{href:!0});var _Zr=s(Yq);Dwo=r(_Zr,"SqueezeBertForSequenceClassification"),_Zr.forEach(t),Gwo=r(Uwe," (SqueezeBERT model)"),Uwe.forEach(t),Owo=i(L),G1=n(L,"LI",{});var Jwe=s(G1);_le=n(Jwe,"STRONG",{});var vZr=s(_le);Vwo=r(vZr,"tapas"),vZr.forEach(t),Xwo=r(Jwe," \u2014 "),Kq=n(Jwe,"A",{href:!0});var bZr=s(Kq);zwo=r(bZr,"TapasForSequenceClassification"),bZr.forEach(t),Qwo=r(Jwe," (TAPAS model)"),Jwe.forEach(t),Wwo=i(L),O1=n(L,"LI",{});var Ywe=s(O1);vle=n(Ywe,"STRONG",{});var FZr=s(vle);Hwo=r(FZr,"transfo-xl"),FZr.forEach(t),Uwo=r(Ywe," \u2014 "),Zq=n(Ywe,"A",{href:!0});var TZr=s(Zq);Jwo=r(TZr,"TransfoXLForSequenceClassification"),TZr.forEach(t),Ywo=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),Kwo=i(L),V1=n(L,"LI",{});var Kwe=s(V1);ble=n(Kwe,"STRONG",{});var MZr=s(ble);Zwo=r(MZr,"xlm"),MZr.forEach(t),e6o=r(Kwe," \u2014 "),eN=n(Kwe,"A",{href:!0});var EZr=s(eN);o6o=r(EZr,"XLMForSequenceClassification"),EZr.forEach(t),r6o=r(Kwe," (XLM model)"),Kwe.forEach(t),t6o=i(L),X1=n(L,"LI",{});var Zwe=s(X1);Fle=n(Zwe,"STRONG",{});var CZr=s(Fle);a6o=r(CZr,"xlm-roberta"),CZr.forEach(t),n6o=r(Zwe," \u2014 "),oN=n(Zwe,"A",{href:!0});var wZr=s(oN);s6o=r(wZr,"XLMRobertaForSequenceClassification"),wZr.forEach(t),l6o=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),i6o=i(L),z1=n(L,"LI",{});var e6e=s(z1);Tle=n(e6e,"STRONG",{});var AZr=s(Tle);d6o=r(AZr,"xlm-roberta-xl"),AZr.forEach(t),c6o=r(e6e," \u2014 "),rN=n(e6e,"A",{href:!0});var yZr=s(rN);f6o=r(yZr,"XLMRobertaXLForSequenceClassification"),yZr.forEach(t),m6o=r(e6e," (XLM-RoBERTa-XL model)"),e6e.forEach(t),g6o=i(L),Q1=n(L,"LI",{});var o6e=s(Q1);Mle=n(o6e,"STRONG",{});var LZr=s(Mle);h6o=r(LZr,"xlnet"),LZr.forEach(t),u6o=r(o6e," \u2014 "),tN=n(o6e,"A",{href:!0});var xZr=s(tN);p6o=r(xZr,"XLNetForSequenceClassification"),xZr.forEach(t),_6o=r(o6e," (XLNet model)"),o6e.forEach(t),v6o=i(L),W1=n(L,"LI",{});var r6e=s(W1);Ele=n(r6e,"STRONG",{});var kZr=s(Ele);b6o=r(kZr,"yoso"),kZr.forEach(t),F6o=r(r6e," \u2014 "),aN=n(r6e,"A",{href:!0});var SZr=s(aN);T6o=r(SZr,"YosoForSequenceClassification"),SZr.forEach(t),M6o=r(r6e," (YOSO model)"),r6e.forEach(t),L.forEach(t),E6o=i(zt),H1=n(zt,"P",{});var t6e=s(H1);C6o=r(t6e,"The model is set in evaluation mode by default using "),Cle=n(t6e,"CODE",{});var RZr=s(Cle);w6o=r(RZr,"model.eval()"),RZr.forEach(t),A6o=r(t6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wle=n(t6e,"CODE",{});var BZr=s(wle);y6o=r(BZr,"model.train()"),BZr.forEach(t),t6e.forEach(t),L6o=i(zt),Ale=n(zt,"P",{});var PZr=s(Ale);x6o=r(PZr,"Examples:"),PZr.forEach(t),k6o=i(zt),m(IC.$$.fragment,zt),zt.forEach(t),rl.forEach(t),iRe=i(c),hd=n(c,"H2",{class:!0});var _Pe=s(hd);U1=n(_Pe,"A",{id:!0,class:!0,href:!0});var $Zr=s(U1);yle=n($Zr,"SPAN",{});var IZr=s(yle);m(qC.$$.fragment,IZr),IZr.forEach(t),$Zr.forEach(t),S6o=i(_Pe),Lle=n(_Pe,"SPAN",{});var qZr=s(Lle);R6o=r(qZr,"AutoModelForMultipleChoice"),qZr.forEach(t),_Pe.forEach(t),dRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(NC.$$.fragment,al),B6o=i(al),ud=n(al,"P",{});var lU=s(ud);P6o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=n(lU,"A",{href:!0});var NZr=s(nN);$6o=r(NZr,"from_pretrained()"),NZr.forEach(t),I6o=r(lU," class method or the "),sN=n(lU,"A",{href:!0});var jZr=s(sN);q6o=r(jZr,"from_config()"),jZr.forEach(t),N6o=r(lU,` class
method.`),lU.forEach(t),j6o=i(al),jC=n(al,"P",{});var vPe=s(jC);D6o=r(vPe,"This class cannot be instantiated directly using "),xle=n(vPe,"CODE",{});var DZr=s(xle);G6o=r(DZr,"__init__()"),DZr.forEach(t),O6o=r(vPe," (throws an error)."),vPe.forEach(t),V6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(DC.$$.fragment,nl),X6o=i(nl),kle=n(nl,"P",{});var GZr=s(kle);z6o=r(GZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GZr.forEach(t),Q6o=i(nl),pd=n(nl,"P",{});var iU=s(pd);W6o=r(iU,`Note:
Loading a model from its configuration file does `),Sle=n(iU,"STRONG",{});var OZr=s(Sle);H6o=r(OZr,"not"),OZr.forEach(t),U6o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(iU,"A",{href:!0});var VZr=s(lN);J6o=r(VZr,"from_pretrained()"),VZr.forEach(t),Y6o=r(iU," to load the model weights."),iU.forEach(t),K6o=i(nl),Rle=n(nl,"P",{});var XZr=s(Rle);Z6o=r(XZr,"Examples:"),XZr.forEach(t),eAo=i(nl),m(GC.$$.fragment,nl),nl.forEach(t),oAo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(OC.$$.fragment,Qt),rAo=i(Qt),Ble=n(Qt,"P",{});var zZr=s(Ble);tAo=r(zZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zZr.forEach(t),aAo=i(Qt),Ja=n(Qt,"P",{});var w5=s(Ja);nAo=r(w5,"The model class to instantiate is selected based on the "),Ple=n(w5,"CODE",{});var QZr=s(Ple);sAo=r(QZr,"model_type"),QZr.forEach(t),lAo=r(w5,` property of the config object (either
passed as an argument or loaded from `),$le=n(w5,"CODE",{});var WZr=s($le);iAo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),dAo=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(w5,"CODE",{});var HZr=s(Ile);cAo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),fAo=r(w5,":"),w5.forEach(t),mAo=i(Qt),G=n(Qt,"UL",{});var O=s(G);J1=n(O,"LI",{});var a6e=s(J1);qle=n(a6e,"STRONG",{});var UZr=s(qle);gAo=r(UZr,"albert"),UZr.forEach(t),hAo=r(a6e," \u2014 "),iN=n(a6e,"A",{href:!0});var JZr=s(iN);uAo=r(JZr,"AlbertForMultipleChoice"),JZr.forEach(t),pAo=r(a6e," (ALBERT model)"),a6e.forEach(t),_Ao=i(O),Y1=n(O,"LI",{});var n6e=s(Y1);Nle=n(n6e,"STRONG",{});var YZr=s(Nle);vAo=r(YZr,"bert"),YZr.forEach(t),bAo=r(n6e," \u2014 "),dN=n(n6e,"A",{href:!0});var KZr=s(dN);FAo=r(KZr,"BertForMultipleChoice"),KZr.forEach(t),TAo=r(n6e," (BERT model)"),n6e.forEach(t),MAo=i(O),K1=n(O,"LI",{});var s6e=s(K1);jle=n(s6e,"STRONG",{});var ZZr=s(jle);EAo=r(ZZr,"big_bird"),ZZr.forEach(t),CAo=r(s6e," \u2014 "),cN=n(s6e,"A",{href:!0});var eet=s(cN);wAo=r(eet,"BigBirdForMultipleChoice"),eet.forEach(t),AAo=r(s6e," (BigBird model)"),s6e.forEach(t),yAo=i(O),Z1=n(O,"LI",{});var l6e=s(Z1);Dle=n(l6e,"STRONG",{});var oet=s(Dle);LAo=r(oet,"camembert"),oet.forEach(t),xAo=r(l6e," \u2014 "),fN=n(l6e,"A",{href:!0});var ret=s(fN);kAo=r(ret,"CamembertForMultipleChoice"),ret.forEach(t),SAo=r(l6e," (CamemBERT model)"),l6e.forEach(t),RAo=i(O),e4=n(O,"LI",{});var i6e=s(e4);Gle=n(i6e,"STRONG",{});var tet=s(Gle);BAo=r(tet,"canine"),tet.forEach(t),PAo=r(i6e," \u2014 "),mN=n(i6e,"A",{href:!0});var aet=s(mN);$Ao=r(aet,"CanineForMultipleChoice"),aet.forEach(t),IAo=r(i6e," (Canine model)"),i6e.forEach(t),qAo=i(O),o4=n(O,"LI",{});var d6e=s(o4);Ole=n(d6e,"STRONG",{});var net=s(Ole);NAo=r(net,"convbert"),net.forEach(t),jAo=r(d6e," \u2014 "),gN=n(d6e,"A",{href:!0});var set=s(gN);DAo=r(set,"ConvBertForMultipleChoice"),set.forEach(t),GAo=r(d6e," (ConvBERT model)"),d6e.forEach(t),OAo=i(O),r4=n(O,"LI",{});var c6e=s(r4);Vle=n(c6e,"STRONG",{});var iet=s(Vle);VAo=r(iet,"data2vec-text"),iet.forEach(t),XAo=r(c6e," \u2014 "),hN=n(c6e,"A",{href:!0});var det=s(hN);zAo=r(det,"Data2VecTextForMultipleChoice"),det.forEach(t),QAo=r(c6e," (Data2VecText model)"),c6e.forEach(t),WAo=i(O),t4=n(O,"LI",{});var f6e=s(t4);Xle=n(f6e,"STRONG",{});var cet=s(Xle);HAo=r(cet,"distilbert"),cet.forEach(t),UAo=r(f6e," \u2014 "),uN=n(f6e,"A",{href:!0});var fet=s(uN);JAo=r(fet,"DistilBertForMultipleChoice"),fet.forEach(t),YAo=r(f6e," (DistilBERT model)"),f6e.forEach(t),KAo=i(O),a4=n(O,"LI",{});var m6e=s(a4);zle=n(m6e,"STRONG",{});var met=s(zle);ZAo=r(met,"electra"),met.forEach(t),eyo=r(m6e," \u2014 "),pN=n(m6e,"A",{href:!0});var get=s(pN);oyo=r(get,"ElectraForMultipleChoice"),get.forEach(t),ryo=r(m6e," (ELECTRA model)"),m6e.forEach(t),tyo=i(O),n4=n(O,"LI",{});var g6e=s(n4);Qle=n(g6e,"STRONG",{});var het=s(Qle);ayo=r(het,"flaubert"),het.forEach(t),nyo=r(g6e," \u2014 "),_N=n(g6e,"A",{href:!0});var uet=s(_N);syo=r(uet,"FlaubertForMultipleChoice"),uet.forEach(t),lyo=r(g6e," (FlauBERT model)"),g6e.forEach(t),iyo=i(O),s4=n(O,"LI",{});var h6e=s(s4);Wle=n(h6e,"STRONG",{});var pet=s(Wle);dyo=r(pet,"fnet"),pet.forEach(t),cyo=r(h6e," \u2014 "),vN=n(h6e,"A",{href:!0});var _et=s(vN);fyo=r(_et,"FNetForMultipleChoice"),_et.forEach(t),myo=r(h6e," (FNet model)"),h6e.forEach(t),gyo=i(O),l4=n(O,"LI",{});var u6e=s(l4);Hle=n(u6e,"STRONG",{});var vet=s(Hle);hyo=r(vet,"funnel"),vet.forEach(t),uyo=r(u6e," \u2014 "),bN=n(u6e,"A",{href:!0});var bet=s(bN);pyo=r(bet,"FunnelForMultipleChoice"),bet.forEach(t),_yo=r(u6e," (Funnel Transformer model)"),u6e.forEach(t),vyo=i(O),i4=n(O,"LI",{});var p6e=s(i4);Ule=n(p6e,"STRONG",{});var Fet=s(Ule);byo=r(Fet,"ibert"),Fet.forEach(t),Fyo=r(p6e," \u2014 "),FN=n(p6e,"A",{href:!0});var Tet=s(FN);Tyo=r(Tet,"IBertForMultipleChoice"),Tet.forEach(t),Myo=r(p6e," (I-BERT model)"),p6e.forEach(t),Eyo=i(O),d4=n(O,"LI",{});var _6e=s(d4);Jle=n(_6e,"STRONG",{});var Met=s(Jle);Cyo=r(Met,"longformer"),Met.forEach(t),wyo=r(_6e," \u2014 "),TN=n(_6e,"A",{href:!0});var Eet=s(TN);Ayo=r(Eet,"LongformerForMultipleChoice"),Eet.forEach(t),yyo=r(_6e," (Longformer model)"),_6e.forEach(t),Lyo=i(O),c4=n(O,"LI",{});var v6e=s(c4);Yle=n(v6e,"STRONG",{});var Cet=s(Yle);xyo=r(Cet,"megatron-bert"),Cet.forEach(t),kyo=r(v6e," \u2014 "),MN=n(v6e,"A",{href:!0});var wet=s(MN);Syo=r(wet,"MegatronBertForMultipleChoice"),wet.forEach(t),Ryo=r(v6e," (MegatronBert model)"),v6e.forEach(t),Byo=i(O),f4=n(O,"LI",{});var b6e=s(f4);Kle=n(b6e,"STRONG",{});var Aet=s(Kle);Pyo=r(Aet,"mobilebert"),Aet.forEach(t),$yo=r(b6e," \u2014 "),EN=n(b6e,"A",{href:!0});var yet=s(EN);Iyo=r(yet,"MobileBertForMultipleChoice"),yet.forEach(t),qyo=r(b6e," (MobileBERT model)"),b6e.forEach(t),Nyo=i(O),m4=n(O,"LI",{});var F6e=s(m4);Zle=n(F6e,"STRONG",{});var Let=s(Zle);jyo=r(Let,"mpnet"),Let.forEach(t),Dyo=r(F6e," \u2014 "),CN=n(F6e,"A",{href:!0});var xet=s(CN);Gyo=r(xet,"MPNetForMultipleChoice"),xet.forEach(t),Oyo=r(F6e," (MPNet model)"),F6e.forEach(t),Vyo=i(O),g4=n(O,"LI",{});var T6e=s(g4);eie=n(T6e,"STRONG",{});var ket=s(eie);Xyo=r(ket,"nystromformer"),ket.forEach(t),zyo=r(T6e," \u2014 "),wN=n(T6e,"A",{href:!0});var Set=s(wN);Qyo=r(Set,"NystromformerForMultipleChoice"),Set.forEach(t),Wyo=r(T6e," (Nystromformer model)"),T6e.forEach(t),Hyo=i(O),h4=n(O,"LI",{});var M6e=s(h4);oie=n(M6e,"STRONG",{});var Ret=s(oie);Uyo=r(Ret,"qdqbert"),Ret.forEach(t),Jyo=r(M6e," \u2014 "),AN=n(M6e,"A",{href:!0});var Bet=s(AN);Yyo=r(Bet,"QDQBertForMultipleChoice"),Bet.forEach(t),Kyo=r(M6e," (QDQBert model)"),M6e.forEach(t),Zyo=i(O),u4=n(O,"LI",{});var E6e=s(u4);rie=n(E6e,"STRONG",{});var Pet=s(rie);eLo=r(Pet,"rembert"),Pet.forEach(t),oLo=r(E6e," \u2014 "),yN=n(E6e,"A",{href:!0});var $et=s(yN);rLo=r($et,"RemBertForMultipleChoice"),$et.forEach(t),tLo=r(E6e," (RemBERT model)"),E6e.forEach(t),aLo=i(O),p4=n(O,"LI",{});var C6e=s(p4);tie=n(C6e,"STRONG",{});var Iet=s(tie);nLo=r(Iet,"roberta"),Iet.forEach(t),sLo=r(C6e," \u2014 "),LN=n(C6e,"A",{href:!0});var qet=s(LN);lLo=r(qet,"RobertaForMultipleChoice"),qet.forEach(t),iLo=r(C6e," (RoBERTa model)"),C6e.forEach(t),dLo=i(O),_4=n(O,"LI",{});var w6e=s(_4);aie=n(w6e,"STRONG",{});var Net=s(aie);cLo=r(Net,"roformer"),Net.forEach(t),fLo=r(w6e," \u2014 "),xN=n(w6e,"A",{href:!0});var jet=s(xN);mLo=r(jet,"RoFormerForMultipleChoice"),jet.forEach(t),gLo=r(w6e," (RoFormer model)"),w6e.forEach(t),hLo=i(O),v4=n(O,"LI",{});var A6e=s(v4);nie=n(A6e,"STRONG",{});var Det=s(nie);uLo=r(Det,"squeezebert"),Det.forEach(t),pLo=r(A6e," \u2014 "),kN=n(A6e,"A",{href:!0});var Get=s(kN);_Lo=r(Get,"SqueezeBertForMultipleChoice"),Get.forEach(t),vLo=r(A6e," (SqueezeBERT model)"),A6e.forEach(t),bLo=i(O),b4=n(O,"LI",{});var y6e=s(b4);sie=n(y6e,"STRONG",{});var Oet=s(sie);FLo=r(Oet,"xlm"),Oet.forEach(t),TLo=r(y6e," \u2014 "),SN=n(y6e,"A",{href:!0});var Vet=s(SN);MLo=r(Vet,"XLMForMultipleChoice"),Vet.forEach(t),ELo=r(y6e," (XLM model)"),y6e.forEach(t),CLo=i(O),F4=n(O,"LI",{});var L6e=s(F4);lie=n(L6e,"STRONG",{});var Xet=s(lie);wLo=r(Xet,"xlm-roberta"),Xet.forEach(t),ALo=r(L6e," \u2014 "),RN=n(L6e,"A",{href:!0});var zet=s(RN);yLo=r(zet,"XLMRobertaForMultipleChoice"),zet.forEach(t),LLo=r(L6e," (XLM-RoBERTa model)"),L6e.forEach(t),xLo=i(O),T4=n(O,"LI",{});var x6e=s(T4);iie=n(x6e,"STRONG",{});var Qet=s(iie);kLo=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),SLo=r(x6e," \u2014 "),BN=n(x6e,"A",{href:!0});var Wet=s(BN);RLo=r(Wet,"XLMRobertaXLForMultipleChoice"),Wet.forEach(t),BLo=r(x6e," (XLM-RoBERTa-XL model)"),x6e.forEach(t),PLo=i(O),M4=n(O,"LI",{});var k6e=s(M4);die=n(k6e,"STRONG",{});var Het=s(die);$Lo=r(Het,"xlnet"),Het.forEach(t),ILo=r(k6e," \u2014 "),PN=n(k6e,"A",{href:!0});var Uet=s(PN);qLo=r(Uet,"XLNetForMultipleChoice"),Uet.forEach(t),NLo=r(k6e," (XLNet model)"),k6e.forEach(t),jLo=i(O),E4=n(O,"LI",{});var S6e=s(E4);cie=n(S6e,"STRONG",{});var Jet=s(cie);DLo=r(Jet,"yoso"),Jet.forEach(t),GLo=r(S6e," \u2014 "),$N=n(S6e,"A",{href:!0});var Yet=s($N);OLo=r(Yet,"YosoForMultipleChoice"),Yet.forEach(t),VLo=r(S6e," (YOSO model)"),S6e.forEach(t),O.forEach(t),XLo=i(Qt),C4=n(Qt,"P",{});var R6e=s(C4);zLo=r(R6e,"The model is set in evaluation mode by default using "),fie=n(R6e,"CODE",{});var Ket=s(fie);QLo=r(Ket,"model.eval()"),Ket.forEach(t),WLo=r(R6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(R6e,"CODE",{});var Zet=s(mie);HLo=r(Zet,"model.train()"),Zet.forEach(t),R6e.forEach(t),ULo=i(Qt),gie=n(Qt,"P",{});var eot=s(gie);JLo=r(eot,"Examples:"),eot.forEach(t),YLo=i(Qt),m(VC.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),cRe=i(c),_d=n(c,"H2",{class:!0});var bPe=s(_d);w4=n(bPe,"A",{id:!0,class:!0,href:!0});var oot=s(w4);hie=n(oot,"SPAN",{});var rot=s(hie);m(XC.$$.fragment,rot),rot.forEach(t),oot.forEach(t),KLo=i(bPe),uie=n(bPe,"SPAN",{});var tot=s(uie);ZLo=r(tot,"AutoModelForNextSentencePrediction"),tot.forEach(t),bPe.forEach(t),fRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(zC.$$.fragment,sl),e7o=i(sl),vd=n(sl,"P",{});var dU=s(vd);o7o=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=n(dU,"A",{href:!0});var aot=s(IN);r7o=r(aot,"from_pretrained()"),aot.forEach(t),t7o=r(dU," class method or the "),qN=n(dU,"A",{href:!0});var not=s(qN);a7o=r(not,"from_config()"),not.forEach(t),n7o=r(dU,` class
method.`),dU.forEach(t),s7o=i(sl),QC=n(sl,"P",{});var FPe=s(QC);l7o=r(FPe,"This class cannot be instantiated directly using "),pie=n(FPe,"CODE",{});var sot=s(pie);i7o=r(sot,"__init__()"),sot.forEach(t),d7o=r(FPe," (throws an error)."),FPe.forEach(t),c7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(WC.$$.fragment,ll),f7o=i(ll),_ie=n(ll,"P",{});var lot=s(_ie);m7o=r(lot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lot.forEach(t),g7o=i(ll),bd=n(ll,"P",{});var cU=s(bd);h7o=r(cU,`Note:
Loading a model from its configuration file does `),vie=n(cU,"STRONG",{});var iot=s(vie);u7o=r(iot,"not"),iot.forEach(t),p7o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=n(cU,"A",{href:!0});var dot=s(NN);_7o=r(dot,"from_pretrained()"),dot.forEach(t),v7o=r(cU," to load the model weights."),cU.forEach(t),b7o=i(ll),bie=n(ll,"P",{});var cot=s(bie);F7o=r(cot,"Examples:"),cot.forEach(t),T7o=i(ll),m(HC.$$.fragment,ll),ll.forEach(t),M7o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(UC.$$.fragment,Wt),E7o=i(Wt),Fie=n(Wt,"P",{});var fot=s(Fie);C7o=r(fot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fot.forEach(t),w7o=i(Wt),Ya=n(Wt,"P",{});var A5=s(Ya);A7o=r(A5,"The model class to instantiate is selected based on the "),Tie=n(A5,"CODE",{});var mot=s(Tie);y7o=r(mot,"model_type"),mot.forEach(t),L7o=r(A5,` property of the config object (either
passed as an argument or loaded from `),Mie=n(A5,"CODE",{});var got=s(Mie);x7o=r(got,"pretrained_model_name_or_path"),got.forEach(t),k7o=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(A5,"CODE",{});var hot=s(Eie);S7o=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),R7o=r(A5,":"),A5.forEach(t),B7o=i(Wt),da=n(Wt,"UL",{});var il=s(da);A4=n(il,"LI",{});var B6e=s(A4);Cie=n(B6e,"STRONG",{});var uot=s(Cie);P7o=r(uot,"bert"),uot.forEach(t),$7o=r(B6e," \u2014 "),jN=n(B6e,"A",{href:!0});var pot=s(jN);I7o=r(pot,"BertForNextSentencePrediction"),pot.forEach(t),q7o=r(B6e," (BERT model)"),B6e.forEach(t),N7o=i(il),y4=n(il,"LI",{});var P6e=s(y4);wie=n(P6e,"STRONG",{});var _ot=s(wie);j7o=r(_ot,"fnet"),_ot.forEach(t),D7o=r(P6e," \u2014 "),DN=n(P6e,"A",{href:!0});var vot=s(DN);G7o=r(vot,"FNetForNextSentencePrediction"),vot.forEach(t),O7o=r(P6e," (FNet model)"),P6e.forEach(t),V7o=i(il),L4=n(il,"LI",{});var $6e=s(L4);Aie=n($6e,"STRONG",{});var bot=s(Aie);X7o=r(bot,"megatron-bert"),bot.forEach(t),z7o=r($6e," \u2014 "),GN=n($6e,"A",{href:!0});var Fot=s(GN);Q7o=r(Fot,"MegatronBertForNextSentencePrediction"),Fot.forEach(t),W7o=r($6e," (MegatronBert model)"),$6e.forEach(t),H7o=i(il),x4=n(il,"LI",{});var I6e=s(x4);yie=n(I6e,"STRONG",{});var Tot=s(yie);U7o=r(Tot,"mobilebert"),Tot.forEach(t),J7o=r(I6e," \u2014 "),ON=n(I6e,"A",{href:!0});var Mot=s(ON);Y7o=r(Mot,"MobileBertForNextSentencePrediction"),Mot.forEach(t),K7o=r(I6e," (MobileBERT model)"),I6e.forEach(t),Z7o=i(il),k4=n(il,"LI",{});var q6e=s(k4);Lie=n(q6e,"STRONG",{});var Eot=s(Lie);exo=r(Eot,"qdqbert"),Eot.forEach(t),oxo=r(q6e," \u2014 "),VN=n(q6e,"A",{href:!0});var Cot=s(VN);rxo=r(Cot,"QDQBertForNextSentencePrediction"),Cot.forEach(t),txo=r(q6e," (QDQBert model)"),q6e.forEach(t),il.forEach(t),axo=i(Wt),S4=n(Wt,"P",{});var N6e=s(S4);nxo=r(N6e,"The model is set in evaluation mode by default using "),xie=n(N6e,"CODE",{});var wot=s(xie);sxo=r(wot,"model.eval()"),wot.forEach(t),lxo=r(N6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(N6e,"CODE",{});var Aot=s(kie);ixo=r(Aot,"model.train()"),Aot.forEach(t),N6e.forEach(t),dxo=i(Wt),Sie=n(Wt,"P",{});var yot=s(Sie);cxo=r(yot,"Examples:"),yot.forEach(t),fxo=i(Wt),m(JC.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),mRe=i(c),Fd=n(c,"H2",{class:!0});var TPe=s(Fd);R4=n(TPe,"A",{id:!0,class:!0,href:!0});var Lot=s(R4);Rie=n(Lot,"SPAN",{});var xot=s(Rie);m(YC.$$.fragment,xot),xot.forEach(t),Lot.forEach(t),mxo=i(TPe),Bie=n(TPe,"SPAN",{});var kot=s(Bie);gxo=r(kot,"AutoModelForTokenClassification"),kot.forEach(t),TPe.forEach(t),gRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(KC.$$.fragment,dl),hxo=i(dl),Td=n(dl,"P",{});var fU=s(Td);uxo=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=n(fU,"A",{href:!0});var Sot=s(XN);pxo=r(Sot,"from_pretrained()"),Sot.forEach(t),_xo=r(fU," class method or the "),zN=n(fU,"A",{href:!0});var Rot=s(zN);vxo=r(Rot,"from_config()"),Rot.forEach(t),bxo=r(fU,` class
method.`),fU.forEach(t),Fxo=i(dl),ZC=n(dl,"P",{});var MPe=s(ZC);Txo=r(MPe,"This class cannot be instantiated directly using "),Pie=n(MPe,"CODE",{});var Bot=s(Pie);Mxo=r(Bot,"__init__()"),Bot.forEach(t),Exo=r(MPe," (throws an error)."),MPe.forEach(t),Cxo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(ew.$$.fragment,cl),wxo=i(cl),$ie=n(cl,"P",{});var Pot=s($ie);Axo=r(Pot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pot.forEach(t),yxo=i(cl),Md=n(cl,"P",{});var mU=s(Md);Lxo=r(mU,`Note:
Loading a model from its configuration file does `),Iie=n(mU,"STRONG",{});var $ot=s(Iie);xxo=r($ot,"not"),$ot.forEach(t),kxo=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(mU,"A",{href:!0});var Iot=s(QN);Sxo=r(Iot,"from_pretrained()"),Iot.forEach(t),Rxo=r(mU," to load the model weights."),mU.forEach(t),Bxo=i(cl),qie=n(cl,"P",{});var qot=s(qie);Pxo=r(qot,"Examples:"),qot.forEach(t),$xo=i(cl),m(ow.$$.fragment,cl),cl.forEach(t),Ixo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(rw.$$.fragment,Ht),qxo=i(Ht),Nie=n(Ht,"P",{});var Not=s(Nie);Nxo=r(Not,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Not.forEach(t),jxo=i(Ht),Ka=n(Ht,"P",{});var y5=s(Ka);Dxo=r(y5,"The model class to instantiate is selected based on the "),jie=n(y5,"CODE",{});var jot=s(jie);Gxo=r(jot,"model_type"),jot.forEach(t),Oxo=r(y5,` property of the config object (either
passed as an argument or loaded from `),Die=n(y5,"CODE",{});var Dot=s(Die);Vxo=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),Xxo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=n(y5,"CODE",{});var Got=s(Gie);zxo=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),Qxo=r(y5,":"),y5.forEach(t),Wxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);B4=n(D,"LI",{});var j6e=s(B4);Oie=n(j6e,"STRONG",{});var Oot=s(Oie);Hxo=r(Oot,"albert"),Oot.forEach(t),Uxo=r(j6e," \u2014 "),WN=n(j6e,"A",{href:!0});var Vot=s(WN);Jxo=r(Vot,"AlbertForTokenClassification"),Vot.forEach(t),Yxo=r(j6e," (ALBERT model)"),j6e.forEach(t),Kxo=i(D),P4=n(D,"LI",{});var D6e=s(P4);Vie=n(D6e,"STRONG",{});var Xot=s(Vie);Zxo=r(Xot,"bert"),Xot.forEach(t),e9o=r(D6e," \u2014 "),HN=n(D6e,"A",{href:!0});var zot=s(HN);o9o=r(zot,"BertForTokenClassification"),zot.forEach(t),r9o=r(D6e," (BERT model)"),D6e.forEach(t),t9o=i(D),$4=n(D,"LI",{});var G6e=s($4);Xie=n(G6e,"STRONG",{});var Qot=s(Xie);a9o=r(Qot,"big_bird"),Qot.forEach(t),n9o=r(G6e," \u2014 "),UN=n(G6e,"A",{href:!0});var Wot=s(UN);s9o=r(Wot,"BigBirdForTokenClassification"),Wot.forEach(t),l9o=r(G6e," (BigBird model)"),G6e.forEach(t),i9o=i(D),I4=n(D,"LI",{});var O6e=s(I4);zie=n(O6e,"STRONG",{});var Hot=s(zie);d9o=r(Hot,"camembert"),Hot.forEach(t),c9o=r(O6e," \u2014 "),JN=n(O6e,"A",{href:!0});var Uot=s(JN);f9o=r(Uot,"CamembertForTokenClassification"),Uot.forEach(t),m9o=r(O6e," (CamemBERT model)"),O6e.forEach(t),g9o=i(D),q4=n(D,"LI",{});var V6e=s(q4);Qie=n(V6e,"STRONG",{});var Jot=s(Qie);h9o=r(Jot,"canine"),Jot.forEach(t),u9o=r(V6e," \u2014 "),YN=n(V6e,"A",{href:!0});var Yot=s(YN);p9o=r(Yot,"CanineForTokenClassification"),Yot.forEach(t),_9o=r(V6e," (Canine model)"),V6e.forEach(t),v9o=i(D),N4=n(D,"LI",{});var X6e=s(N4);Wie=n(X6e,"STRONG",{});var Kot=s(Wie);b9o=r(Kot,"convbert"),Kot.forEach(t),F9o=r(X6e," \u2014 "),KN=n(X6e,"A",{href:!0});var Zot=s(KN);T9o=r(Zot,"ConvBertForTokenClassification"),Zot.forEach(t),M9o=r(X6e," (ConvBERT model)"),X6e.forEach(t),E9o=i(D),j4=n(D,"LI",{});var z6e=s(j4);Hie=n(z6e,"STRONG",{});var ert=s(Hie);C9o=r(ert,"data2vec-text"),ert.forEach(t),w9o=r(z6e," \u2014 "),ZN=n(z6e,"A",{href:!0});var ort=s(ZN);A9o=r(ort,"Data2VecTextForTokenClassification"),ort.forEach(t),y9o=r(z6e," (Data2VecText model)"),z6e.forEach(t),L9o=i(D),D4=n(D,"LI",{});var Q6e=s(D4);Uie=n(Q6e,"STRONG",{});var rrt=s(Uie);x9o=r(rrt,"deberta"),rrt.forEach(t),k9o=r(Q6e," \u2014 "),ej=n(Q6e,"A",{href:!0});var trt=s(ej);S9o=r(trt,"DebertaForTokenClassification"),trt.forEach(t),R9o=r(Q6e," (DeBERTa model)"),Q6e.forEach(t),B9o=i(D),G4=n(D,"LI",{});var W6e=s(G4);Jie=n(W6e,"STRONG",{});var art=s(Jie);P9o=r(art,"deberta-v2"),art.forEach(t),$9o=r(W6e," \u2014 "),oj=n(W6e,"A",{href:!0});var nrt=s(oj);I9o=r(nrt,"DebertaV2ForTokenClassification"),nrt.forEach(t),q9o=r(W6e," (DeBERTa-v2 model)"),W6e.forEach(t),N9o=i(D),O4=n(D,"LI",{});var H6e=s(O4);Yie=n(H6e,"STRONG",{});var srt=s(Yie);j9o=r(srt,"distilbert"),srt.forEach(t),D9o=r(H6e," \u2014 "),rj=n(H6e,"A",{href:!0});var lrt=s(rj);G9o=r(lrt,"DistilBertForTokenClassification"),lrt.forEach(t),O9o=r(H6e," (DistilBERT model)"),H6e.forEach(t),V9o=i(D),V4=n(D,"LI",{});var U6e=s(V4);Kie=n(U6e,"STRONG",{});var irt=s(Kie);X9o=r(irt,"electra"),irt.forEach(t),z9o=r(U6e," \u2014 "),tj=n(U6e,"A",{href:!0});var drt=s(tj);Q9o=r(drt,"ElectraForTokenClassification"),drt.forEach(t),W9o=r(U6e," (ELECTRA model)"),U6e.forEach(t),H9o=i(D),X4=n(D,"LI",{});var J6e=s(X4);Zie=n(J6e,"STRONG",{});var crt=s(Zie);U9o=r(crt,"flaubert"),crt.forEach(t),J9o=r(J6e," \u2014 "),aj=n(J6e,"A",{href:!0});var frt=s(aj);Y9o=r(frt,"FlaubertForTokenClassification"),frt.forEach(t),K9o=r(J6e," (FlauBERT model)"),J6e.forEach(t),Z9o=i(D),z4=n(D,"LI",{});var Y6e=s(z4);ede=n(Y6e,"STRONG",{});var mrt=s(ede);eko=r(mrt,"fnet"),mrt.forEach(t),oko=r(Y6e," \u2014 "),nj=n(Y6e,"A",{href:!0});var grt=s(nj);rko=r(grt,"FNetForTokenClassification"),grt.forEach(t),tko=r(Y6e," (FNet model)"),Y6e.forEach(t),ako=i(D),Q4=n(D,"LI",{});var K6e=s(Q4);ode=n(K6e,"STRONG",{});var hrt=s(ode);nko=r(hrt,"funnel"),hrt.forEach(t),sko=r(K6e," \u2014 "),sj=n(K6e,"A",{href:!0});var urt=s(sj);lko=r(urt,"FunnelForTokenClassification"),urt.forEach(t),iko=r(K6e," (Funnel Transformer model)"),K6e.forEach(t),dko=i(D),W4=n(D,"LI",{});var Z6e=s(W4);rde=n(Z6e,"STRONG",{});var prt=s(rde);cko=r(prt,"gpt2"),prt.forEach(t),fko=r(Z6e," \u2014 "),lj=n(Z6e,"A",{href:!0});var _rt=s(lj);mko=r(_rt,"GPT2ForTokenClassification"),_rt.forEach(t),gko=r(Z6e," (OpenAI GPT-2 model)"),Z6e.forEach(t),hko=i(D),H4=n(D,"LI",{});var eAe=s(H4);tde=n(eAe,"STRONG",{});var vrt=s(tde);uko=r(vrt,"ibert"),vrt.forEach(t),pko=r(eAe," \u2014 "),ij=n(eAe,"A",{href:!0});var brt=s(ij);_ko=r(brt,"IBertForTokenClassification"),brt.forEach(t),vko=r(eAe," (I-BERT model)"),eAe.forEach(t),bko=i(D),U4=n(D,"LI",{});var oAe=s(U4);ade=n(oAe,"STRONG",{});var Frt=s(ade);Fko=r(Frt,"layoutlm"),Frt.forEach(t),Tko=r(oAe," \u2014 "),dj=n(oAe,"A",{href:!0});var Trt=s(dj);Mko=r(Trt,"LayoutLMForTokenClassification"),Trt.forEach(t),Eko=r(oAe," (LayoutLM model)"),oAe.forEach(t),Cko=i(D),J4=n(D,"LI",{});var rAe=s(J4);nde=n(rAe,"STRONG",{});var Mrt=s(nde);wko=r(Mrt,"layoutlmv2"),Mrt.forEach(t),Ako=r(rAe," \u2014 "),cj=n(rAe,"A",{href:!0});var Ert=s(cj);yko=r(Ert,"LayoutLMv2ForTokenClassification"),Ert.forEach(t),Lko=r(rAe," (LayoutLMv2 model)"),rAe.forEach(t),xko=i(D),Y4=n(D,"LI",{});var tAe=s(Y4);sde=n(tAe,"STRONG",{});var Crt=s(sde);kko=r(Crt,"longformer"),Crt.forEach(t),Sko=r(tAe," \u2014 "),fj=n(tAe,"A",{href:!0});var wrt=s(fj);Rko=r(wrt,"LongformerForTokenClassification"),wrt.forEach(t),Bko=r(tAe," (Longformer model)"),tAe.forEach(t),Pko=i(D),K4=n(D,"LI",{});var aAe=s(K4);lde=n(aAe,"STRONG",{});var Art=s(lde);$ko=r(Art,"megatron-bert"),Art.forEach(t),Iko=r(aAe," \u2014 "),mj=n(aAe,"A",{href:!0});var yrt=s(mj);qko=r(yrt,"MegatronBertForTokenClassification"),yrt.forEach(t),Nko=r(aAe," (MegatronBert model)"),aAe.forEach(t),jko=i(D),Z4=n(D,"LI",{});var nAe=s(Z4);ide=n(nAe,"STRONG",{});var Lrt=s(ide);Dko=r(Lrt,"mobilebert"),Lrt.forEach(t),Gko=r(nAe," \u2014 "),gj=n(nAe,"A",{href:!0});var xrt=s(gj);Oko=r(xrt,"MobileBertForTokenClassification"),xrt.forEach(t),Vko=r(nAe," (MobileBERT model)"),nAe.forEach(t),Xko=i(D),eb=n(D,"LI",{});var sAe=s(eb);dde=n(sAe,"STRONG",{});var krt=s(dde);zko=r(krt,"mpnet"),krt.forEach(t),Qko=r(sAe," \u2014 "),hj=n(sAe,"A",{href:!0});var Srt=s(hj);Wko=r(Srt,"MPNetForTokenClassification"),Srt.forEach(t),Hko=r(sAe," (MPNet model)"),sAe.forEach(t),Uko=i(D),ob=n(D,"LI",{});var lAe=s(ob);cde=n(lAe,"STRONG",{});var Rrt=s(cde);Jko=r(Rrt,"nystromformer"),Rrt.forEach(t),Yko=r(lAe," \u2014 "),uj=n(lAe,"A",{href:!0});var Brt=s(uj);Kko=r(Brt,"NystromformerForTokenClassification"),Brt.forEach(t),Zko=r(lAe," (Nystromformer model)"),lAe.forEach(t),eSo=i(D),rb=n(D,"LI",{});var iAe=s(rb);fde=n(iAe,"STRONG",{});var Prt=s(fde);oSo=r(Prt,"qdqbert"),Prt.forEach(t),rSo=r(iAe," \u2014 "),pj=n(iAe,"A",{href:!0});var $rt=s(pj);tSo=r($rt,"QDQBertForTokenClassification"),$rt.forEach(t),aSo=r(iAe," (QDQBert model)"),iAe.forEach(t),nSo=i(D),tb=n(D,"LI",{});var dAe=s(tb);mde=n(dAe,"STRONG",{});var Irt=s(mde);sSo=r(Irt,"rembert"),Irt.forEach(t),lSo=r(dAe," \u2014 "),_j=n(dAe,"A",{href:!0});var qrt=s(_j);iSo=r(qrt,"RemBertForTokenClassification"),qrt.forEach(t),dSo=r(dAe," (RemBERT model)"),dAe.forEach(t),cSo=i(D),ab=n(D,"LI",{});var cAe=s(ab);gde=n(cAe,"STRONG",{});var Nrt=s(gde);fSo=r(Nrt,"roberta"),Nrt.forEach(t),mSo=r(cAe," \u2014 "),vj=n(cAe,"A",{href:!0});var jrt=s(vj);gSo=r(jrt,"RobertaForTokenClassification"),jrt.forEach(t),hSo=r(cAe," (RoBERTa model)"),cAe.forEach(t),uSo=i(D),nb=n(D,"LI",{});var fAe=s(nb);hde=n(fAe,"STRONG",{});var Drt=s(hde);pSo=r(Drt,"roformer"),Drt.forEach(t),_So=r(fAe," \u2014 "),bj=n(fAe,"A",{href:!0});var Grt=s(bj);vSo=r(Grt,"RoFormerForTokenClassification"),Grt.forEach(t),bSo=r(fAe," (RoFormer model)"),fAe.forEach(t),FSo=i(D),sb=n(D,"LI",{});var mAe=s(sb);ude=n(mAe,"STRONG",{});var Ort=s(ude);TSo=r(Ort,"squeezebert"),Ort.forEach(t),MSo=r(mAe," \u2014 "),Fj=n(mAe,"A",{href:!0});var Vrt=s(Fj);ESo=r(Vrt,"SqueezeBertForTokenClassification"),Vrt.forEach(t),CSo=r(mAe," (SqueezeBERT model)"),mAe.forEach(t),wSo=i(D),lb=n(D,"LI",{});var gAe=s(lb);pde=n(gAe,"STRONG",{});var Xrt=s(pde);ASo=r(Xrt,"xlm"),Xrt.forEach(t),ySo=r(gAe," \u2014 "),Tj=n(gAe,"A",{href:!0});var zrt=s(Tj);LSo=r(zrt,"XLMForTokenClassification"),zrt.forEach(t),xSo=r(gAe," (XLM model)"),gAe.forEach(t),kSo=i(D),ib=n(D,"LI",{});var hAe=s(ib);_de=n(hAe,"STRONG",{});var Qrt=s(_de);SSo=r(Qrt,"xlm-roberta"),Qrt.forEach(t),RSo=r(hAe," \u2014 "),Mj=n(hAe,"A",{href:!0});var Wrt=s(Mj);BSo=r(Wrt,"XLMRobertaForTokenClassification"),Wrt.forEach(t),PSo=r(hAe," (XLM-RoBERTa model)"),hAe.forEach(t),$So=i(D),db=n(D,"LI",{});var uAe=s(db);vde=n(uAe,"STRONG",{});var Hrt=s(vde);ISo=r(Hrt,"xlm-roberta-xl"),Hrt.forEach(t),qSo=r(uAe," \u2014 "),Ej=n(uAe,"A",{href:!0});var Urt=s(Ej);NSo=r(Urt,"XLMRobertaXLForTokenClassification"),Urt.forEach(t),jSo=r(uAe," (XLM-RoBERTa-XL model)"),uAe.forEach(t),DSo=i(D),cb=n(D,"LI",{});var pAe=s(cb);bde=n(pAe,"STRONG",{});var Jrt=s(bde);GSo=r(Jrt,"xlnet"),Jrt.forEach(t),OSo=r(pAe," \u2014 "),Cj=n(pAe,"A",{href:!0});var Yrt=s(Cj);VSo=r(Yrt,"XLNetForTokenClassification"),Yrt.forEach(t),XSo=r(pAe," (XLNet model)"),pAe.forEach(t),zSo=i(D),fb=n(D,"LI",{});var _Ae=s(fb);Fde=n(_Ae,"STRONG",{});var Krt=s(Fde);QSo=r(Krt,"yoso"),Krt.forEach(t),WSo=r(_Ae," \u2014 "),wj=n(_Ae,"A",{href:!0});var Zrt=s(wj);HSo=r(Zrt,"YosoForTokenClassification"),Zrt.forEach(t),USo=r(_Ae," (YOSO model)"),_Ae.forEach(t),D.forEach(t),JSo=i(Ht),mb=n(Ht,"P",{});var vAe=s(mb);YSo=r(vAe,"The model is set in evaluation mode by default using "),Tde=n(vAe,"CODE",{});var ett=s(Tde);KSo=r(ett,"model.eval()"),ett.forEach(t),ZSo=r(vAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=n(vAe,"CODE",{});var ott=s(Mde);eRo=r(ott,"model.train()"),ott.forEach(t),vAe.forEach(t),oRo=i(Ht),Ede=n(Ht,"P",{});var rtt=s(Ede);rRo=r(rtt,"Examples:"),rtt.forEach(t),tRo=i(Ht),m(tw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),hRe=i(c),Ed=n(c,"H2",{class:!0});var EPe=s(Ed);gb=n(EPe,"A",{id:!0,class:!0,href:!0});var ttt=s(gb);Cde=n(ttt,"SPAN",{});var att=s(Cde);m(aw.$$.fragment,att),att.forEach(t),ttt.forEach(t),aRo=i(EPe),wde=n(EPe,"SPAN",{});var ntt=s(wde);nRo=r(ntt,"AutoModelForQuestionAnswering"),ntt.forEach(t),EPe.forEach(t),uRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(nw.$$.fragment,fl),sRo=i(fl),Cd=n(fl,"P",{});var gU=s(Cd);lRo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=n(gU,"A",{href:!0});var stt=s(Aj);iRo=r(stt,"from_pretrained()"),stt.forEach(t),dRo=r(gU," class method or the "),yj=n(gU,"A",{href:!0});var ltt=s(yj);cRo=r(ltt,"from_config()"),ltt.forEach(t),fRo=r(gU,` class
method.`),gU.forEach(t),mRo=i(fl),sw=n(fl,"P",{});var CPe=s(sw);gRo=r(CPe,"This class cannot be instantiated directly using "),Ade=n(CPe,"CODE",{});var itt=s(Ade);hRo=r(itt,"__init__()"),itt.forEach(t),uRo=r(CPe," (throws an error)."),CPe.forEach(t),pRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(lw.$$.fragment,ml),_Ro=i(ml),yde=n(ml,"P",{});var dtt=s(yde);vRo=r(dtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dtt.forEach(t),bRo=i(ml),wd=n(ml,"P",{});var hU=s(wd);FRo=r(hU,`Note:
Loading a model from its configuration file does `),Lde=n(hU,"STRONG",{});var ctt=s(Lde);TRo=r(ctt,"not"),ctt.forEach(t),MRo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n(hU,"A",{href:!0});var ftt=s(Lj);ERo=r(ftt,"from_pretrained()"),ftt.forEach(t),CRo=r(hU," to load the model weights."),hU.forEach(t),wRo=i(ml),xde=n(ml,"P",{});var mtt=s(xde);ARo=r(mtt,"Examples:"),mtt.forEach(t),yRo=i(ml),m(iw.$$.fragment,ml),ml.forEach(t),LRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(dw.$$.fragment,Ut),xRo=i(Ut),kde=n(Ut,"P",{});var gtt=s(kde);kRo=r(gtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gtt.forEach(t),SRo=i(Ut),Za=n(Ut,"P",{});var L5=s(Za);RRo=r(L5,"The model class to instantiate is selected based on the "),Sde=n(L5,"CODE",{});var htt=s(Sde);BRo=r(htt,"model_type"),htt.forEach(t),PRo=r(L5,` property of the config object (either
passed as an argument or loaded from `),Rde=n(L5,"CODE",{});var utt=s(Rde);$Ro=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),IRo=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=n(L5,"CODE",{});var ptt=s(Bde);qRo=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),NRo=r(L5,":"),L5.forEach(t),jRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);hb=n(P,"LI",{});var bAe=s(hb);Pde=n(bAe,"STRONG",{});var _tt=s(Pde);DRo=r(_tt,"albert"),_tt.forEach(t),GRo=r(bAe," \u2014 "),xj=n(bAe,"A",{href:!0});var vtt=s(xj);ORo=r(vtt,"AlbertForQuestionAnswering"),vtt.forEach(t),VRo=r(bAe," (ALBERT model)"),bAe.forEach(t),XRo=i(P),ub=n(P,"LI",{});var FAe=s(ub);$de=n(FAe,"STRONG",{});var btt=s($de);zRo=r(btt,"bart"),btt.forEach(t),QRo=r(FAe," \u2014 "),kj=n(FAe,"A",{href:!0});var Ftt=s(kj);WRo=r(Ftt,"BartForQuestionAnswering"),Ftt.forEach(t),HRo=r(FAe," (BART model)"),FAe.forEach(t),URo=i(P),pb=n(P,"LI",{});var TAe=s(pb);Ide=n(TAe,"STRONG",{});var Ttt=s(Ide);JRo=r(Ttt,"bert"),Ttt.forEach(t),YRo=r(TAe," \u2014 "),Sj=n(TAe,"A",{href:!0});var Mtt=s(Sj);KRo=r(Mtt,"BertForQuestionAnswering"),Mtt.forEach(t),ZRo=r(TAe," (BERT model)"),TAe.forEach(t),eBo=i(P),_b=n(P,"LI",{});var MAe=s(_b);qde=n(MAe,"STRONG",{});var Ett=s(qde);oBo=r(Ett,"big_bird"),Ett.forEach(t),rBo=r(MAe," \u2014 "),Rj=n(MAe,"A",{href:!0});var Ctt=s(Rj);tBo=r(Ctt,"BigBirdForQuestionAnswering"),Ctt.forEach(t),aBo=r(MAe," (BigBird model)"),MAe.forEach(t),nBo=i(P),vb=n(P,"LI",{});var EAe=s(vb);Nde=n(EAe,"STRONG",{});var wtt=s(Nde);sBo=r(wtt,"bigbird_pegasus"),wtt.forEach(t),lBo=r(EAe," \u2014 "),Bj=n(EAe,"A",{href:!0});var Att=s(Bj);iBo=r(Att,"BigBirdPegasusForQuestionAnswering"),Att.forEach(t),dBo=r(EAe," (BigBirdPegasus model)"),EAe.forEach(t),cBo=i(P),bb=n(P,"LI",{});var CAe=s(bb);jde=n(CAe,"STRONG",{});var ytt=s(jde);fBo=r(ytt,"camembert"),ytt.forEach(t),mBo=r(CAe," \u2014 "),Pj=n(CAe,"A",{href:!0});var Ltt=s(Pj);gBo=r(Ltt,"CamembertForQuestionAnswering"),Ltt.forEach(t),hBo=r(CAe," (CamemBERT model)"),CAe.forEach(t),uBo=i(P),Fb=n(P,"LI",{});var wAe=s(Fb);Dde=n(wAe,"STRONG",{});var xtt=s(Dde);pBo=r(xtt,"canine"),xtt.forEach(t),_Bo=r(wAe," \u2014 "),$j=n(wAe,"A",{href:!0});var ktt=s($j);vBo=r(ktt,"CanineForQuestionAnswering"),ktt.forEach(t),bBo=r(wAe," (Canine model)"),wAe.forEach(t),FBo=i(P),Tb=n(P,"LI",{});var AAe=s(Tb);Gde=n(AAe,"STRONG",{});var Stt=s(Gde);TBo=r(Stt,"convbert"),Stt.forEach(t),MBo=r(AAe," \u2014 "),Ij=n(AAe,"A",{href:!0});var Rtt=s(Ij);EBo=r(Rtt,"ConvBertForQuestionAnswering"),Rtt.forEach(t),CBo=r(AAe," (ConvBERT model)"),AAe.forEach(t),wBo=i(P),Mb=n(P,"LI",{});var yAe=s(Mb);Ode=n(yAe,"STRONG",{});var Btt=s(Ode);ABo=r(Btt,"data2vec-text"),Btt.forEach(t),yBo=r(yAe," \u2014 "),qj=n(yAe,"A",{href:!0});var Ptt=s(qj);LBo=r(Ptt,"Data2VecTextForQuestionAnswering"),Ptt.forEach(t),xBo=r(yAe," (Data2VecText model)"),yAe.forEach(t),kBo=i(P),Eb=n(P,"LI",{});var LAe=s(Eb);Vde=n(LAe,"STRONG",{});var $tt=s(Vde);SBo=r($tt,"deberta"),$tt.forEach(t),RBo=r(LAe," \u2014 "),Nj=n(LAe,"A",{href:!0});var Itt=s(Nj);BBo=r(Itt,"DebertaForQuestionAnswering"),Itt.forEach(t),PBo=r(LAe," (DeBERTa model)"),LAe.forEach(t),$Bo=i(P),Cb=n(P,"LI",{});var xAe=s(Cb);Xde=n(xAe,"STRONG",{});var qtt=s(Xde);IBo=r(qtt,"deberta-v2"),qtt.forEach(t),qBo=r(xAe," \u2014 "),jj=n(xAe,"A",{href:!0});var Ntt=s(jj);NBo=r(Ntt,"DebertaV2ForQuestionAnswering"),Ntt.forEach(t),jBo=r(xAe," (DeBERTa-v2 model)"),xAe.forEach(t),DBo=i(P),wb=n(P,"LI",{});var kAe=s(wb);zde=n(kAe,"STRONG",{});var jtt=s(zde);GBo=r(jtt,"distilbert"),jtt.forEach(t),OBo=r(kAe," \u2014 "),Dj=n(kAe,"A",{href:!0});var Dtt=s(Dj);VBo=r(Dtt,"DistilBertForQuestionAnswering"),Dtt.forEach(t),XBo=r(kAe," (DistilBERT model)"),kAe.forEach(t),zBo=i(P),Ab=n(P,"LI",{});var SAe=s(Ab);Qde=n(SAe,"STRONG",{});var Gtt=s(Qde);QBo=r(Gtt,"electra"),Gtt.forEach(t),WBo=r(SAe," \u2014 "),Gj=n(SAe,"A",{href:!0});var Ott=s(Gj);HBo=r(Ott,"ElectraForQuestionAnswering"),Ott.forEach(t),UBo=r(SAe," (ELECTRA model)"),SAe.forEach(t),JBo=i(P),yb=n(P,"LI",{});var RAe=s(yb);Wde=n(RAe,"STRONG",{});var Vtt=s(Wde);YBo=r(Vtt,"flaubert"),Vtt.forEach(t),KBo=r(RAe," \u2014 "),Oj=n(RAe,"A",{href:!0});var Xtt=s(Oj);ZBo=r(Xtt,"FlaubertForQuestionAnsweringSimple"),Xtt.forEach(t),ePo=r(RAe," (FlauBERT model)"),RAe.forEach(t),oPo=i(P),Lb=n(P,"LI",{});var BAe=s(Lb);Hde=n(BAe,"STRONG",{});var ztt=s(Hde);rPo=r(ztt,"fnet"),ztt.forEach(t),tPo=r(BAe," \u2014 "),Vj=n(BAe,"A",{href:!0});var Qtt=s(Vj);aPo=r(Qtt,"FNetForQuestionAnswering"),Qtt.forEach(t),nPo=r(BAe," (FNet model)"),BAe.forEach(t),sPo=i(P),xb=n(P,"LI",{});var PAe=s(xb);Ude=n(PAe,"STRONG",{});var Wtt=s(Ude);lPo=r(Wtt,"funnel"),Wtt.forEach(t),iPo=r(PAe," \u2014 "),Xj=n(PAe,"A",{href:!0});var Htt=s(Xj);dPo=r(Htt,"FunnelForQuestionAnswering"),Htt.forEach(t),cPo=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),fPo=i(P),kb=n(P,"LI",{});var $Ae=s(kb);Jde=n($Ae,"STRONG",{});var Utt=s(Jde);mPo=r(Utt,"gptj"),Utt.forEach(t),gPo=r($Ae," \u2014 "),zj=n($Ae,"A",{href:!0});var Jtt=s(zj);hPo=r(Jtt,"GPTJForQuestionAnswering"),Jtt.forEach(t),uPo=r($Ae," (GPT-J model)"),$Ae.forEach(t),pPo=i(P),Sb=n(P,"LI",{});var IAe=s(Sb);Yde=n(IAe,"STRONG",{});var Ytt=s(Yde);_Po=r(Ytt,"ibert"),Ytt.forEach(t),vPo=r(IAe," \u2014 "),Qj=n(IAe,"A",{href:!0});var Ktt=s(Qj);bPo=r(Ktt,"IBertForQuestionAnswering"),Ktt.forEach(t),FPo=r(IAe," (I-BERT model)"),IAe.forEach(t),TPo=i(P),Rb=n(P,"LI",{});var qAe=s(Rb);Kde=n(qAe,"STRONG",{});var Ztt=s(Kde);MPo=r(Ztt,"layoutlmv2"),Ztt.forEach(t),EPo=r(qAe," \u2014 "),Wj=n(qAe,"A",{href:!0});var eat=s(Wj);CPo=r(eat,"LayoutLMv2ForQuestionAnswering"),eat.forEach(t),wPo=r(qAe," (LayoutLMv2 model)"),qAe.forEach(t),APo=i(P),Bb=n(P,"LI",{});var NAe=s(Bb);Zde=n(NAe,"STRONG",{});var oat=s(Zde);yPo=r(oat,"led"),oat.forEach(t),LPo=r(NAe," \u2014 "),Hj=n(NAe,"A",{href:!0});var rat=s(Hj);xPo=r(rat,"LEDForQuestionAnswering"),rat.forEach(t),kPo=r(NAe," (LED model)"),NAe.forEach(t),SPo=i(P),Pb=n(P,"LI",{});var jAe=s(Pb);ece=n(jAe,"STRONG",{});var tat=s(ece);RPo=r(tat,"longformer"),tat.forEach(t),BPo=r(jAe," \u2014 "),Uj=n(jAe,"A",{href:!0});var aat=s(Uj);PPo=r(aat,"LongformerForQuestionAnswering"),aat.forEach(t),$Po=r(jAe," (Longformer model)"),jAe.forEach(t),IPo=i(P),$b=n(P,"LI",{});var DAe=s($b);oce=n(DAe,"STRONG",{});var nat=s(oce);qPo=r(nat,"lxmert"),nat.forEach(t),NPo=r(DAe," \u2014 "),Jj=n(DAe,"A",{href:!0});var sat=s(Jj);jPo=r(sat,"LxmertForQuestionAnswering"),sat.forEach(t),DPo=r(DAe," (LXMERT model)"),DAe.forEach(t),GPo=i(P),Ib=n(P,"LI",{});var GAe=s(Ib);rce=n(GAe,"STRONG",{});var lat=s(rce);OPo=r(lat,"mbart"),lat.forEach(t),VPo=r(GAe," \u2014 "),Yj=n(GAe,"A",{href:!0});var iat=s(Yj);XPo=r(iat,"MBartForQuestionAnswering"),iat.forEach(t),zPo=r(GAe," (mBART model)"),GAe.forEach(t),QPo=i(P),qb=n(P,"LI",{});var OAe=s(qb);tce=n(OAe,"STRONG",{});var dat=s(tce);WPo=r(dat,"megatron-bert"),dat.forEach(t),HPo=r(OAe," \u2014 "),Kj=n(OAe,"A",{href:!0});var cat=s(Kj);UPo=r(cat,"MegatronBertForQuestionAnswering"),cat.forEach(t),JPo=r(OAe," (MegatronBert model)"),OAe.forEach(t),YPo=i(P),Nb=n(P,"LI",{});var VAe=s(Nb);ace=n(VAe,"STRONG",{});var fat=s(ace);KPo=r(fat,"mobilebert"),fat.forEach(t),ZPo=r(VAe," \u2014 "),Zj=n(VAe,"A",{href:!0});var mat=s(Zj);e$o=r(mat,"MobileBertForQuestionAnswering"),mat.forEach(t),o$o=r(VAe," (MobileBERT model)"),VAe.forEach(t),r$o=i(P),jb=n(P,"LI",{});var XAe=s(jb);nce=n(XAe,"STRONG",{});var gat=s(nce);t$o=r(gat,"mpnet"),gat.forEach(t),a$o=r(XAe," \u2014 "),eD=n(XAe,"A",{href:!0});var hat=s(eD);n$o=r(hat,"MPNetForQuestionAnswering"),hat.forEach(t),s$o=r(XAe," (MPNet model)"),XAe.forEach(t),l$o=i(P),Db=n(P,"LI",{});var zAe=s(Db);sce=n(zAe,"STRONG",{});var uat=s(sce);i$o=r(uat,"nystromformer"),uat.forEach(t),d$o=r(zAe," \u2014 "),oD=n(zAe,"A",{href:!0});var pat=s(oD);c$o=r(pat,"NystromformerForQuestionAnswering"),pat.forEach(t),f$o=r(zAe," (Nystromformer model)"),zAe.forEach(t),m$o=i(P),Gb=n(P,"LI",{});var QAe=s(Gb);lce=n(QAe,"STRONG",{});var _at=s(lce);g$o=r(_at,"qdqbert"),_at.forEach(t),h$o=r(QAe," \u2014 "),rD=n(QAe,"A",{href:!0});var vat=s(rD);u$o=r(vat,"QDQBertForQuestionAnswering"),vat.forEach(t),p$o=r(QAe," (QDQBert model)"),QAe.forEach(t),_$o=i(P),Ob=n(P,"LI",{});var WAe=s(Ob);ice=n(WAe,"STRONG",{});var bat=s(ice);v$o=r(bat,"reformer"),bat.forEach(t),b$o=r(WAe," \u2014 "),tD=n(WAe,"A",{href:!0});var Fat=s(tD);F$o=r(Fat,"ReformerForQuestionAnswering"),Fat.forEach(t),T$o=r(WAe," (Reformer model)"),WAe.forEach(t),M$o=i(P),Vb=n(P,"LI",{});var HAe=s(Vb);dce=n(HAe,"STRONG",{});var Tat=s(dce);E$o=r(Tat,"rembert"),Tat.forEach(t),C$o=r(HAe," \u2014 "),aD=n(HAe,"A",{href:!0});var Mat=s(aD);w$o=r(Mat,"RemBertForQuestionAnswering"),Mat.forEach(t),A$o=r(HAe," (RemBERT model)"),HAe.forEach(t),y$o=i(P),Xb=n(P,"LI",{});var UAe=s(Xb);cce=n(UAe,"STRONG",{});var Eat=s(cce);L$o=r(Eat,"roberta"),Eat.forEach(t),x$o=r(UAe," \u2014 "),nD=n(UAe,"A",{href:!0});var Cat=s(nD);k$o=r(Cat,"RobertaForQuestionAnswering"),Cat.forEach(t),S$o=r(UAe," (RoBERTa model)"),UAe.forEach(t),R$o=i(P),zb=n(P,"LI",{});var JAe=s(zb);fce=n(JAe,"STRONG",{});var wat=s(fce);B$o=r(wat,"roformer"),wat.forEach(t),P$o=r(JAe," \u2014 "),sD=n(JAe,"A",{href:!0});var Aat=s(sD);$$o=r(Aat,"RoFormerForQuestionAnswering"),Aat.forEach(t),I$o=r(JAe," (RoFormer model)"),JAe.forEach(t),q$o=i(P),Qb=n(P,"LI",{});var YAe=s(Qb);mce=n(YAe,"STRONG",{});var yat=s(mce);N$o=r(yat,"splinter"),yat.forEach(t),j$o=r(YAe," \u2014 "),lD=n(YAe,"A",{href:!0});var Lat=s(lD);D$o=r(Lat,"SplinterForQuestionAnswering"),Lat.forEach(t),G$o=r(YAe," (Splinter model)"),YAe.forEach(t),O$o=i(P),Wb=n(P,"LI",{});var KAe=s(Wb);gce=n(KAe,"STRONG",{});var xat=s(gce);V$o=r(xat,"squeezebert"),xat.forEach(t),X$o=r(KAe," \u2014 "),iD=n(KAe,"A",{href:!0});var kat=s(iD);z$o=r(kat,"SqueezeBertForQuestionAnswering"),kat.forEach(t),Q$o=r(KAe," (SqueezeBERT model)"),KAe.forEach(t),W$o=i(P),Hb=n(P,"LI",{});var ZAe=s(Hb);hce=n(ZAe,"STRONG",{});var Sat=s(hce);H$o=r(Sat,"xlm"),Sat.forEach(t),U$o=r(ZAe," \u2014 "),dD=n(ZAe,"A",{href:!0});var Rat=s(dD);J$o=r(Rat,"XLMForQuestionAnsweringSimple"),Rat.forEach(t),Y$o=r(ZAe," (XLM model)"),ZAe.forEach(t),K$o=i(P),Ub=n(P,"LI",{});var eye=s(Ub);uce=n(eye,"STRONG",{});var Bat=s(uce);Z$o=r(Bat,"xlm-roberta"),Bat.forEach(t),eIo=r(eye," \u2014 "),cD=n(eye,"A",{href:!0});var Pat=s(cD);oIo=r(Pat,"XLMRobertaForQuestionAnswering"),Pat.forEach(t),rIo=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),tIo=i(P),Jb=n(P,"LI",{});var oye=s(Jb);pce=n(oye,"STRONG",{});var $at=s(pce);aIo=r($at,"xlm-roberta-xl"),$at.forEach(t),nIo=r(oye," \u2014 "),fD=n(oye,"A",{href:!0});var Iat=s(fD);sIo=r(Iat,"XLMRobertaXLForQuestionAnswering"),Iat.forEach(t),lIo=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),iIo=i(P),Yb=n(P,"LI",{});var rye=s(Yb);_ce=n(rye,"STRONG",{});var qat=s(_ce);dIo=r(qat,"xlnet"),qat.forEach(t),cIo=r(rye," \u2014 "),mD=n(rye,"A",{href:!0});var Nat=s(mD);fIo=r(Nat,"XLNetForQuestionAnsweringSimple"),Nat.forEach(t),mIo=r(rye," (XLNet model)"),rye.forEach(t),gIo=i(P),Kb=n(P,"LI",{});var tye=s(Kb);vce=n(tye,"STRONG",{});var jat=s(vce);hIo=r(jat,"yoso"),jat.forEach(t),uIo=r(tye," \u2014 "),gD=n(tye,"A",{href:!0});var Dat=s(gD);pIo=r(Dat,"YosoForQuestionAnswering"),Dat.forEach(t),_Io=r(tye," (YOSO model)"),tye.forEach(t),P.forEach(t),vIo=i(Ut),Zb=n(Ut,"P",{});var aye=s(Zb);bIo=r(aye,"The model is set in evaluation mode by default using "),bce=n(aye,"CODE",{});var Gat=s(bce);FIo=r(Gat,"model.eval()"),Gat.forEach(t),TIo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(aye,"CODE",{});var Oat=s(Fce);MIo=r(Oat,"model.train()"),Oat.forEach(t),aye.forEach(t),EIo=i(Ut),Tce=n(Ut,"P",{});var Vat=s(Tce);CIo=r(Vat,"Examples:"),Vat.forEach(t),wIo=i(Ut),m(cw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),pRe=i(c),Ad=n(c,"H2",{class:!0});var wPe=s(Ad);e2=n(wPe,"A",{id:!0,class:!0,href:!0});var Xat=s(e2);Mce=n(Xat,"SPAN",{});var zat=s(Mce);m(fw.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),AIo=i(wPe),Ece=n(wPe,"SPAN",{});var Qat=s(Ece);yIo=r(Qat,"AutoModelForTableQuestionAnswering"),Qat.forEach(t),wPe.forEach(t),_Re=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(mw.$$.fragment,gl),LIo=i(gl),yd=n(gl,"P",{});var uU=s(yd);xIo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=n(uU,"A",{href:!0});var Wat=s(hD);kIo=r(Wat,"from_pretrained()"),Wat.forEach(t),SIo=r(uU," class method or the "),uD=n(uU,"A",{href:!0});var Hat=s(uD);RIo=r(Hat,"from_config()"),Hat.forEach(t),BIo=r(uU,` class
method.`),uU.forEach(t),PIo=i(gl),gw=n(gl,"P",{});var APe=s(gw);$Io=r(APe,"This class cannot be instantiated directly using "),Cce=n(APe,"CODE",{});var Uat=s(Cce);IIo=r(Uat,"__init__()"),Uat.forEach(t),qIo=r(APe," (throws an error)."),APe.forEach(t),NIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(hw.$$.fragment,hl),jIo=i(hl),wce=n(hl,"P",{});var Jat=s(wce);DIo=r(Jat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jat.forEach(t),GIo=i(hl),Ld=n(hl,"P",{});var pU=s(Ld);OIo=r(pU,`Note:
Loading a model from its configuration file does `),Ace=n(pU,"STRONG",{});var Yat=s(Ace);VIo=r(Yat,"not"),Yat.forEach(t),XIo=r(pU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=n(pU,"A",{href:!0});var Kat=s(pD);zIo=r(Kat,"from_pretrained()"),Kat.forEach(t),QIo=r(pU," to load the model weights."),pU.forEach(t),WIo=i(hl),yce=n(hl,"P",{});var Zat=s(yce);HIo=r(Zat,"Examples:"),Zat.forEach(t),UIo=i(hl),m(uw.$$.fragment,hl),hl.forEach(t),JIo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(pw.$$.fragment,Jt),YIo=i(Jt),Lce=n(Jt,"P",{});var ent=s(Lce);KIo=r(ent,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ent.forEach(t),ZIo=i(Jt),en=n(Jt,"P",{});var x5=s(en);eqo=r(x5,"The model class to instantiate is selected based on the "),xce=n(x5,"CODE",{});var ont=s(xce);oqo=r(ont,"model_type"),ont.forEach(t),rqo=r(x5,` property of the config object (either
passed as an argument or loaded from `),kce=n(x5,"CODE",{});var rnt=s(kce);tqo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),aqo=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(x5,"CODE",{});var tnt=s(Sce);nqo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),sqo=r(x5,":"),x5.forEach(t),lqo=i(Jt),Rce=n(Jt,"UL",{});var ant=s(Rce);o2=n(ant,"LI",{});var nye=s(o2);Bce=n(nye,"STRONG",{});var nnt=s(Bce);iqo=r(nnt,"tapas"),nnt.forEach(t),dqo=r(nye," \u2014 "),_D=n(nye,"A",{href:!0});var snt=s(_D);cqo=r(snt,"TapasForQuestionAnswering"),snt.forEach(t),fqo=r(nye," (TAPAS model)"),nye.forEach(t),ant.forEach(t),mqo=i(Jt),r2=n(Jt,"P",{});var sye=s(r2);gqo=r(sye,"The model is set in evaluation mode by default using "),Pce=n(sye,"CODE",{});var lnt=s(Pce);hqo=r(lnt,"model.eval()"),lnt.forEach(t),uqo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(sye,"CODE",{});var int=s($ce);pqo=r(int,"model.train()"),int.forEach(t),sye.forEach(t),_qo=i(Jt),Ice=n(Jt,"P",{});var dnt=s(Ice);vqo=r(dnt,"Examples:"),dnt.forEach(t),bqo=i(Jt),m(_w.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),vRe=i(c),xd=n(c,"H2",{class:!0});var yPe=s(xd);t2=n(yPe,"A",{id:!0,class:!0,href:!0});var cnt=s(t2);qce=n(cnt,"SPAN",{});var fnt=s(qce);m(vw.$$.fragment,fnt),fnt.forEach(t),cnt.forEach(t),Fqo=i(yPe),Nce=n(yPe,"SPAN",{});var mnt=s(Nce);Tqo=r(mnt,"AutoModelForImageClassification"),mnt.forEach(t),yPe.forEach(t),bRe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);m(bw.$$.fragment,ul),Mqo=i(ul),kd=n(ul,"P",{});var _U=s(kd);Eqo=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=n(_U,"A",{href:!0});var gnt=s(vD);Cqo=r(gnt,"from_pretrained()"),gnt.forEach(t),wqo=r(_U," class method or the "),bD=n(_U,"A",{href:!0});var hnt=s(bD);Aqo=r(hnt,"from_config()"),hnt.forEach(t),yqo=r(_U,` class
method.`),_U.forEach(t),Lqo=i(ul),Fw=n(ul,"P",{});var LPe=s(Fw);xqo=r(LPe,"This class cannot be instantiated directly using "),jce=n(LPe,"CODE",{});var unt=s(jce);kqo=r(unt,"__init__()"),unt.forEach(t),Sqo=r(LPe," (throws an error)."),LPe.forEach(t),Rqo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);m(Tw.$$.fragment,pl),Bqo=i(pl),Dce=n(pl,"P",{});var pnt=s(Dce);Pqo=r(pnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pnt.forEach(t),$qo=i(pl),Sd=n(pl,"P",{});var vU=s(Sd);Iqo=r(vU,`Note:
Loading a model from its configuration file does `),Gce=n(vU,"STRONG",{});var _nt=s(Gce);qqo=r(_nt,"not"),_nt.forEach(t),Nqo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(vU,"A",{href:!0});var vnt=s(FD);jqo=r(vnt,"from_pretrained()"),vnt.forEach(t),Dqo=r(vU," to load the model weights."),vU.forEach(t),Gqo=i(pl),Oce=n(pl,"P",{});var bnt=s(Oce);Oqo=r(bnt,"Examples:"),bnt.forEach(t),Vqo=i(pl),m(Mw.$$.fragment,pl),pl.forEach(t),Xqo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);m(Ew.$$.fragment,Yt),zqo=i(Yt),Vce=n(Yt,"P",{});var Fnt=s(Vce);Qqo=r(Fnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fnt.forEach(t),Wqo=i(Yt),on=n(Yt,"P",{});var k5=s(on);Hqo=r(k5,"The model class to instantiate is selected based on the "),Xce=n(k5,"CODE",{});var Tnt=s(Xce);Uqo=r(Tnt,"model_type"),Tnt.forEach(t),Jqo=r(k5,` property of the config object (either
passed as an argument or loaded from `),zce=n(k5,"CODE",{});var Mnt=s(zce);Yqo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),Kqo=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(k5,"CODE",{});var Ent=s(Qce);Zqo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),eNo=r(k5,":"),k5.forEach(t),oNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);a2=n(Te,"LI",{});var lye=s(a2);Wce=n(lye,"STRONG",{});var Cnt=s(Wce);rNo=r(Cnt,"beit"),Cnt.forEach(t),tNo=r(lye," \u2014 "),TD=n(lye,"A",{href:!0});var wnt=s(TD);aNo=r(wnt,"BeitForImageClassification"),wnt.forEach(t),nNo=r(lye," (BEiT model)"),lye.forEach(t),sNo=i(Te),n2=n(Te,"LI",{});var iye=s(n2);Hce=n(iye,"STRONG",{});var Ant=s(Hce);lNo=r(Ant,"convnext"),Ant.forEach(t),iNo=r(iye," \u2014 "),MD=n(iye,"A",{href:!0});var ynt=s(MD);dNo=r(ynt,"ConvNextForImageClassification"),ynt.forEach(t),cNo=r(iye," (ConvNext model)"),iye.forEach(t),fNo=i(Te),Ds=n(Te,"LI",{});var nx=s(Ds);Uce=n(nx,"STRONG",{});var Lnt=s(Uce);mNo=r(Lnt,"deit"),Lnt.forEach(t),gNo=r(nx," \u2014 "),ED=n(nx,"A",{href:!0});var xnt=s(ED);hNo=r(xnt,"DeiTForImageClassification"),xnt.forEach(t),uNo=r(nx," or "),CD=n(nx,"A",{href:!0});var knt=s(CD);pNo=r(knt,"DeiTForImageClassificationWithTeacher"),knt.forEach(t),_No=r(nx," (DeiT model)"),nx.forEach(t),vNo=i(Te),s2=n(Te,"LI",{});var dye=s(s2);Jce=n(dye,"STRONG",{});var Snt=s(Jce);bNo=r(Snt,"imagegpt"),Snt.forEach(t),FNo=r(dye," \u2014 "),wD=n(dye,"A",{href:!0});var Rnt=s(wD);TNo=r(Rnt,"ImageGPTForImageClassification"),Rnt.forEach(t),MNo=r(dye," (ImageGPT model)"),dye.forEach(t),ENo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);Yce=n($f,"STRONG",{});var Bnt=s(Yce);CNo=r(Bnt,"perceiver"),Bnt.forEach(t),wNo=r($f," \u2014 "),AD=n($f,"A",{href:!0});var Pnt=s(AD);ANo=r(Pnt,"PerceiverForImageClassificationLearned"),Pnt.forEach(t),yNo=r($f," or "),yD=n($f,"A",{href:!0});var $nt=s(yD);LNo=r($nt,"PerceiverForImageClassificationFourier"),$nt.forEach(t),xNo=r($f," or "),LD=n($f,"A",{href:!0});var Int=s(LD);kNo=r(Int,"PerceiverForImageClassificationConvProcessing"),Int.forEach(t),SNo=r($f," (Perceiver model)"),$f.forEach(t),RNo=i(Te),l2=n(Te,"LI",{});var cye=s(l2);Kce=n(cye,"STRONG",{});var qnt=s(Kce);BNo=r(qnt,"poolformer"),qnt.forEach(t),PNo=r(cye," \u2014 "),xD=n(cye,"A",{href:!0});var Nnt=s(xD);$No=r(Nnt,"PoolFormerForImageClassification"),Nnt.forEach(t),INo=r(cye," (PoolFormer model)"),cye.forEach(t),qNo=i(Te),i2=n(Te,"LI",{});var fye=s(i2);Zce=n(fye,"STRONG",{});var jnt=s(Zce);NNo=r(jnt,"resnet"),jnt.forEach(t),jNo=r(fye," \u2014 "),kD=n(fye,"A",{href:!0});var Dnt=s(kD);DNo=r(Dnt,"ResNetForImageClassification"),Dnt.forEach(t),GNo=r(fye," (ResNet model)"),fye.forEach(t),ONo=i(Te),d2=n(Te,"LI",{});var mye=s(d2);efe=n(mye,"STRONG",{});var Gnt=s(efe);VNo=r(Gnt,"segformer"),Gnt.forEach(t),XNo=r(mye," \u2014 "),SD=n(mye,"A",{href:!0});var Ont=s(SD);zNo=r(Ont,"SegformerForImageClassification"),Ont.forEach(t),QNo=r(mye," (SegFormer model)"),mye.forEach(t),WNo=i(Te),c2=n(Te,"LI",{});var gye=s(c2);ofe=n(gye,"STRONG",{});var Vnt=s(ofe);HNo=r(Vnt,"swin"),Vnt.forEach(t),UNo=r(gye," \u2014 "),RD=n(gye,"A",{href:!0});var Xnt=s(RD);JNo=r(Xnt,"SwinForImageClassification"),Xnt.forEach(t),YNo=r(gye," (Swin model)"),gye.forEach(t),KNo=i(Te),f2=n(Te,"LI",{});var hye=s(f2);rfe=n(hye,"STRONG",{});var znt=s(rfe);ZNo=r(znt,"van"),znt.forEach(t),ejo=r(hye," \u2014 "),BD=n(hye,"A",{href:!0});var Qnt=s(BD);ojo=r(Qnt,"VanForImageClassification"),Qnt.forEach(t),rjo=r(hye," (VAN model)"),hye.forEach(t),tjo=i(Te),m2=n(Te,"LI",{});var uye=s(m2);tfe=n(uye,"STRONG",{});var Wnt=s(tfe);ajo=r(Wnt,"vit"),Wnt.forEach(t),njo=r(uye," \u2014 "),PD=n(uye,"A",{href:!0});var Hnt=s(PD);sjo=r(Hnt,"ViTForImageClassification"),Hnt.forEach(t),ljo=r(uye," (ViT model)"),uye.forEach(t),Te.forEach(t),ijo=i(Yt),g2=n(Yt,"P",{});var pye=s(g2);djo=r(pye,"The model is set in evaluation mode by default using "),afe=n(pye,"CODE",{});var Unt=s(afe);cjo=r(Unt,"model.eval()"),Unt.forEach(t),fjo=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=n(pye,"CODE",{});var Jnt=s(nfe);mjo=r(Jnt,"model.train()"),Jnt.forEach(t),pye.forEach(t),gjo=i(Yt),sfe=n(Yt,"P",{});var Ynt=s(sfe);hjo=r(Ynt,"Examples:"),Ynt.forEach(t),ujo=i(Yt),m(Cw.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),FRe=i(c),Rd=n(c,"H2",{class:!0});var xPe=s(Rd);h2=n(xPe,"A",{id:!0,class:!0,href:!0});var Knt=s(h2);lfe=n(Knt,"SPAN",{});var Znt=s(lfe);m(ww.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),pjo=i(xPe),ife=n(xPe,"SPAN",{});var est=s(ife);_jo=r(est,"AutoModelForVision2Seq"),est.forEach(t),xPe.forEach(t),TRe=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);m(Aw.$$.fragment,_l),vjo=i(_l),Bd=n(_l,"P",{});var bU=s(Bd);bjo=r(bU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=n(bU,"A",{href:!0});var ost=s($D);Fjo=r(ost,"from_pretrained()"),ost.forEach(t),Tjo=r(bU," class method or the "),ID=n(bU,"A",{href:!0});var rst=s(ID);Mjo=r(rst,"from_config()"),rst.forEach(t),Ejo=r(bU,` class
method.`),bU.forEach(t),Cjo=i(_l),yw=n(_l,"P",{});var kPe=s(yw);wjo=r(kPe,"This class cannot be instantiated directly using "),dfe=n(kPe,"CODE",{});var tst=s(dfe);Ajo=r(tst,"__init__()"),tst.forEach(t),yjo=r(kPe," (throws an error)."),kPe.forEach(t),Ljo=i(_l),rt=n(_l,"DIV",{class:!0});var vl=s(rt);m(Lw.$$.fragment,vl),xjo=i(vl),cfe=n(vl,"P",{});var ast=s(cfe);kjo=r(ast,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ast.forEach(t),Sjo=i(vl),Pd=n(vl,"P",{});var FU=s(Pd);Rjo=r(FU,`Note:
Loading a model from its configuration file does `),ffe=n(FU,"STRONG",{});var nst=s(ffe);Bjo=r(nst,"not"),nst.forEach(t),Pjo=r(FU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(FU,"A",{href:!0});var sst=s(qD);$jo=r(sst,"from_pretrained()"),sst.forEach(t),Ijo=r(FU," to load the model weights."),FU.forEach(t),qjo=i(vl),mfe=n(vl,"P",{});var lst=s(mfe);Njo=r(lst,"Examples:"),lst.forEach(t),jjo=i(vl),m(xw.$$.fragment,vl),vl.forEach(t),Djo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);m(kw.$$.fragment,Kt),Gjo=i(Kt),gfe=n(Kt,"P",{});var ist=s(gfe);Ojo=r(ist,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ist.forEach(t),Vjo=i(Kt),rn=n(Kt,"P",{});var S5=s(rn);Xjo=r(S5,"The model class to instantiate is selected based on the "),hfe=n(S5,"CODE",{});var dst=s(hfe);zjo=r(dst,"model_type"),dst.forEach(t),Qjo=r(S5,` property of the config object (either
passed as an argument or loaded from `),ufe=n(S5,"CODE",{});var cst=s(ufe);Wjo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),Hjo=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(S5,"CODE",{});var fst=s(pfe);Ujo=r(fst,"pretrained_model_name_or_path"),fst.forEach(t),Jjo=r(S5,":"),S5.forEach(t),Yjo=i(Kt),_fe=n(Kt,"UL",{});var mst=s(_fe);u2=n(mst,"LI",{});var _ye=s(u2);vfe=n(_ye,"STRONG",{});var gst=s(vfe);Kjo=r(gst,"vision-encoder-decoder"),gst.forEach(t),Zjo=r(_ye," \u2014 "),ND=n(_ye,"A",{href:!0});var hst=s(ND);eDo=r(hst,"VisionEncoderDecoderModel"),hst.forEach(t),oDo=r(_ye," (Vision Encoder decoder model)"),_ye.forEach(t),mst.forEach(t),rDo=i(Kt),p2=n(Kt,"P",{});var vye=s(p2);tDo=r(vye,"The model is set in evaluation mode by default using "),bfe=n(vye,"CODE",{});var ust=s(bfe);aDo=r(ust,"model.eval()"),ust.forEach(t),nDo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(vye,"CODE",{});var pst=s(Ffe);sDo=r(pst,"model.train()"),pst.forEach(t),vye.forEach(t),lDo=i(Kt),Tfe=n(Kt,"P",{});var _st=s(Tfe);iDo=r(_st,"Examples:"),_st.forEach(t),dDo=i(Kt),m(Sw.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),MRe=i(c),$d=n(c,"H2",{class:!0});var SPe=s($d);_2=n(SPe,"A",{id:!0,class:!0,href:!0});var vst=s(_2);Mfe=n(vst,"SPAN",{});var bst=s(Mfe);m(Rw.$$.fragment,bst),bst.forEach(t),vst.forEach(t),cDo=i(SPe),Efe=n(SPe,"SPAN",{});var Fst=s(Efe);fDo=r(Fst,"AutoModelForAudioClassification"),Fst.forEach(t),SPe.forEach(t),ERe=i(c),dr=n(c,"DIV",{class:!0});var bl=s(dr);m(Bw.$$.fragment,bl),mDo=i(bl),Id=n(bl,"P",{});var TU=s(Id);gDo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=n(TU,"A",{href:!0});var Tst=s(jD);hDo=r(Tst,"from_pretrained()"),Tst.forEach(t),uDo=r(TU," class method or the "),DD=n(TU,"A",{href:!0});var Mst=s(DD);pDo=r(Mst,"from_config()"),Mst.forEach(t),_Do=r(TU,` class
method.`),TU.forEach(t),vDo=i(bl),Pw=n(bl,"P",{});var RPe=s(Pw);bDo=r(RPe,"This class cannot be instantiated directly using "),Cfe=n(RPe,"CODE",{});var Est=s(Cfe);FDo=r(Est,"__init__()"),Est.forEach(t),TDo=r(RPe," (throws an error)."),RPe.forEach(t),MDo=i(bl),tt=n(bl,"DIV",{class:!0});var Fl=s(tt);m($w.$$.fragment,Fl),EDo=i(Fl),wfe=n(Fl,"P",{});var Cst=s(wfe);CDo=r(Cst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cst.forEach(t),wDo=i(Fl),qd=n(Fl,"P",{});var MU=s(qd);ADo=r(MU,`Note:
Loading a model from its configuration file does `),Afe=n(MU,"STRONG",{});var wst=s(Afe);yDo=r(wst,"not"),wst.forEach(t),LDo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(MU,"A",{href:!0});var Ast=s(GD);xDo=r(Ast,"from_pretrained()"),Ast.forEach(t),kDo=r(MU," to load the model weights."),MU.forEach(t),SDo=i(Fl),yfe=n(Fl,"P",{});var yst=s(yfe);RDo=r(yst,"Examples:"),yst.forEach(t),BDo=i(Fl),m(Iw.$$.fragment,Fl),Fl.forEach(t),PDo=i(bl),Je=n(bl,"DIV",{class:!0});var Zt=s(Je);m(qw.$$.fragment,Zt),$Do=i(Zt),Lfe=n(Zt,"P",{});var Lst=s(Lfe);IDo=r(Lst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lst.forEach(t),qDo=i(Zt),tn=n(Zt,"P",{});var R5=s(tn);NDo=r(R5,"The model class to instantiate is selected based on the "),xfe=n(R5,"CODE",{});var xst=s(xfe);jDo=r(xst,"model_type"),xst.forEach(t),DDo=r(R5,` property of the config object (either
passed as an argument or loaded from `),kfe=n(R5,"CODE",{});var kst=s(kfe);GDo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),ODo=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(R5,"CODE",{});var Sst=s(Sfe);VDo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),XDo=r(R5,":"),R5.forEach(t),zDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);v2=n(Do,"LI",{});var bye=s(v2);Rfe=n(bye,"STRONG",{});var Rst=s(Rfe);QDo=r(Rst,"data2vec-audio"),Rst.forEach(t),WDo=r(bye," \u2014 "),OD=n(bye,"A",{href:!0});var Bst=s(OD);HDo=r(Bst,"Data2VecAudioForSequenceClassification"),Bst.forEach(t),UDo=r(bye," (Data2VecAudio model)"),bye.forEach(t),JDo=i(Do),b2=n(Do,"LI",{});var Fye=s(b2);Bfe=n(Fye,"STRONG",{});var Pst=s(Bfe);YDo=r(Pst,"hubert"),Pst.forEach(t),KDo=r(Fye," \u2014 "),VD=n(Fye,"A",{href:!0});var $st=s(VD);ZDo=r($st,"HubertForSequenceClassification"),$st.forEach(t),eGo=r(Fye," (Hubert model)"),Fye.forEach(t),oGo=i(Do),F2=n(Do,"LI",{});var Tye=s(F2);Pfe=n(Tye,"STRONG",{});var Ist=s(Pfe);rGo=r(Ist,"sew"),Ist.forEach(t),tGo=r(Tye," \u2014 "),XD=n(Tye,"A",{href:!0});var qst=s(XD);aGo=r(qst,"SEWForSequenceClassification"),qst.forEach(t),nGo=r(Tye," (SEW model)"),Tye.forEach(t),sGo=i(Do),T2=n(Do,"LI",{});var Mye=s(T2);$fe=n(Mye,"STRONG",{});var Nst=s($fe);lGo=r(Nst,"sew-d"),Nst.forEach(t),iGo=r(Mye," \u2014 "),zD=n(Mye,"A",{href:!0});var jst=s(zD);dGo=r(jst,"SEWDForSequenceClassification"),jst.forEach(t),cGo=r(Mye," (SEW-D model)"),Mye.forEach(t),fGo=i(Do),M2=n(Do,"LI",{});var Eye=s(M2);Ife=n(Eye,"STRONG",{});var Dst=s(Ife);mGo=r(Dst,"unispeech"),Dst.forEach(t),gGo=r(Eye," \u2014 "),QD=n(Eye,"A",{href:!0});var Gst=s(QD);hGo=r(Gst,"UniSpeechForSequenceClassification"),Gst.forEach(t),uGo=r(Eye," (UniSpeech model)"),Eye.forEach(t),pGo=i(Do),E2=n(Do,"LI",{});var Cye=s(E2);qfe=n(Cye,"STRONG",{});var Ost=s(qfe);_Go=r(Ost,"unispeech-sat"),Ost.forEach(t),vGo=r(Cye," \u2014 "),WD=n(Cye,"A",{href:!0});var Vst=s(WD);bGo=r(Vst,"UniSpeechSatForSequenceClassification"),Vst.forEach(t),FGo=r(Cye," (UniSpeechSat model)"),Cye.forEach(t),TGo=i(Do),C2=n(Do,"LI",{});var wye=s(C2);Nfe=n(wye,"STRONG",{});var Xst=s(Nfe);MGo=r(Xst,"wav2vec2"),Xst.forEach(t),EGo=r(wye," \u2014 "),HD=n(wye,"A",{href:!0});var zst=s(HD);CGo=r(zst,"Wav2Vec2ForSequenceClassification"),zst.forEach(t),wGo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),AGo=i(Do),w2=n(Do,"LI",{});var Aye=s(w2);jfe=n(Aye,"STRONG",{});var Qst=s(jfe);yGo=r(Qst,"wavlm"),Qst.forEach(t),LGo=r(Aye," \u2014 "),UD=n(Aye,"A",{href:!0});var Wst=s(UD);xGo=r(Wst,"WavLMForSequenceClassification"),Wst.forEach(t),kGo=r(Aye," (WavLM model)"),Aye.forEach(t),Do.forEach(t),SGo=i(Zt),A2=n(Zt,"P",{});var yye=s(A2);RGo=r(yye,"The model is set in evaluation mode by default using "),Dfe=n(yye,"CODE",{});var Hst=s(Dfe);BGo=r(Hst,"model.eval()"),Hst.forEach(t),PGo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(yye,"CODE",{});var Ust=s(Gfe);$Go=r(Ust,"model.train()"),Ust.forEach(t),yye.forEach(t),IGo=i(Zt),Ofe=n(Zt,"P",{});var Jst=s(Ofe);qGo=r(Jst,"Examples:"),Jst.forEach(t),NGo=i(Zt),m(Nw.$$.fragment,Zt),Zt.forEach(t),bl.forEach(t),CRe=i(c),Nd=n(c,"H2",{class:!0});var BPe=s(Nd);y2=n(BPe,"A",{id:!0,class:!0,href:!0});var Yst=s(y2);Vfe=n(Yst,"SPAN",{});var Kst=s(Vfe);m(jw.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),jGo=i(BPe),Xfe=n(BPe,"SPAN",{});var Zst=s(Xfe);DGo=r(Zst,"AutoModelForAudioFrameClassification"),Zst.forEach(t),BPe.forEach(t),wRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Dw.$$.fragment,Tl),GGo=i(Tl),jd=n(Tl,"P",{});var EU=s(jd);OGo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=n(EU,"A",{href:!0});var elt=s(JD);VGo=r(elt,"from_pretrained()"),elt.forEach(t),XGo=r(EU," class method or the "),YD=n(EU,"A",{href:!0});var olt=s(YD);zGo=r(olt,"from_config()"),olt.forEach(t),QGo=r(EU,` class
method.`),EU.forEach(t),WGo=i(Tl),Gw=n(Tl,"P",{});var PPe=s(Gw);HGo=r(PPe,"This class cannot be instantiated directly using "),zfe=n(PPe,"CODE",{});var rlt=s(zfe);UGo=r(rlt,"__init__()"),rlt.forEach(t),JGo=r(PPe," (throws an error)."),PPe.forEach(t),YGo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Ow.$$.fragment,Ml),KGo=i(Ml),Qfe=n(Ml,"P",{});var tlt=s(Qfe);ZGo=r(tlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tlt.forEach(t),eOo=i(Ml),Dd=n(Ml,"P",{});var CU=s(Dd);oOo=r(CU,`Note:
Loading a model from its configuration file does `),Wfe=n(CU,"STRONG",{});var alt=s(Wfe);rOo=r(alt,"not"),alt.forEach(t),tOo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(CU,"A",{href:!0});var nlt=s(KD);aOo=r(nlt,"from_pretrained()"),nlt.forEach(t),nOo=r(CU," to load the model weights."),CU.forEach(t),sOo=i(Ml),Hfe=n(Ml,"P",{});var slt=s(Hfe);lOo=r(slt,"Examples:"),slt.forEach(t),iOo=i(Ml),m(Vw.$$.fragment,Ml),Ml.forEach(t),dOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Xw.$$.fragment,ea),cOo=i(ea),Ufe=n(ea,"P",{});var llt=s(Ufe);fOo=r(llt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),llt.forEach(t),mOo=i(ea),an=n(ea,"P",{});var B5=s(an);gOo=r(B5,"The model class to instantiate is selected based on the "),Jfe=n(B5,"CODE",{});var ilt=s(Jfe);hOo=r(ilt,"model_type"),ilt.forEach(t),uOo=r(B5,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(B5,"CODE",{});var dlt=s(Yfe);pOo=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),_Oo=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(B5,"CODE",{});var clt=s(Kfe);vOo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),bOo=r(B5,":"),B5.forEach(t),FOo=i(ea),nn=n(ea,"UL",{});var P5=s(nn);L2=n(P5,"LI",{});var Lye=s(L2);Zfe=n(Lye,"STRONG",{});var flt=s(Zfe);TOo=r(flt,"data2vec-audio"),flt.forEach(t),MOo=r(Lye," \u2014 "),ZD=n(Lye,"A",{href:!0});var mlt=s(ZD);EOo=r(mlt,"Data2VecAudioForAudioFrameClassification"),mlt.forEach(t),COo=r(Lye," (Data2VecAudio model)"),Lye.forEach(t),wOo=i(P5),x2=n(P5,"LI",{});var xye=s(x2);eme=n(xye,"STRONG",{});var glt=s(eme);AOo=r(glt,"unispeech-sat"),glt.forEach(t),yOo=r(xye," \u2014 "),eG=n(xye,"A",{href:!0});var hlt=s(eG);LOo=r(hlt,"UniSpeechSatForAudioFrameClassification"),hlt.forEach(t),xOo=r(xye," (UniSpeechSat model)"),xye.forEach(t),kOo=i(P5),k2=n(P5,"LI",{});var kye=s(k2);ome=n(kye,"STRONG",{});var ult=s(ome);SOo=r(ult,"wav2vec2"),ult.forEach(t),ROo=r(kye," \u2014 "),oG=n(kye,"A",{href:!0});var plt=s(oG);BOo=r(plt,"Wav2Vec2ForAudioFrameClassification"),plt.forEach(t),POo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),$Oo=i(P5),S2=n(P5,"LI",{});var Sye=s(S2);rme=n(Sye,"STRONG",{});var _lt=s(rme);IOo=r(_lt,"wavlm"),_lt.forEach(t),qOo=r(Sye," \u2014 "),rG=n(Sye,"A",{href:!0});var vlt=s(rG);NOo=r(vlt,"WavLMForAudioFrameClassification"),vlt.forEach(t),jOo=r(Sye," (WavLM model)"),Sye.forEach(t),P5.forEach(t),DOo=i(ea),R2=n(ea,"P",{});var Rye=s(R2);GOo=r(Rye,"The model is set in evaluation mode by default using "),tme=n(Rye,"CODE",{});var blt=s(tme);OOo=r(blt,"model.eval()"),blt.forEach(t),VOo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(Rye,"CODE",{});var Flt=s(ame);XOo=r(Flt,"model.train()"),Flt.forEach(t),Rye.forEach(t),zOo=i(ea),nme=n(ea,"P",{});var Tlt=s(nme);QOo=r(Tlt,"Examples:"),Tlt.forEach(t),WOo=i(ea),m(zw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),ARe=i(c),Gd=n(c,"H2",{class:!0});var $Pe=s(Gd);B2=n($Pe,"A",{id:!0,class:!0,href:!0});var Mlt=s(B2);sme=n(Mlt,"SPAN",{});var Elt=s(sme);m(Qw.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),HOo=i($Pe),lme=n($Pe,"SPAN",{});var Clt=s(lme);UOo=r(Clt,"AutoModelForCTC"),Clt.forEach(t),$Pe.forEach(t),yRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Ww.$$.fragment,El),JOo=i(El),Od=n(El,"P",{});var wU=s(Od);YOo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=n(wU,"A",{href:!0});var wlt=s(tG);KOo=r(wlt,"from_pretrained()"),wlt.forEach(t),ZOo=r(wU," class method or the "),aG=n(wU,"A",{href:!0});var Alt=s(aG);eVo=r(Alt,"from_config()"),Alt.forEach(t),oVo=r(wU,` class
method.`),wU.forEach(t),rVo=i(El),Hw=n(El,"P",{});var IPe=s(Hw);tVo=r(IPe,"This class cannot be instantiated directly using "),ime=n(IPe,"CODE",{});var ylt=s(ime);aVo=r(ylt,"__init__()"),ylt.forEach(t),nVo=r(IPe," (throws an error)."),IPe.forEach(t),sVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Uw.$$.fragment,Cl),lVo=i(Cl),dme=n(Cl,"P",{});var Llt=s(dme);iVo=r(Llt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Llt.forEach(t),dVo=i(Cl),Vd=n(Cl,"P",{});var AU=s(Vd);cVo=r(AU,`Note:
Loading a model from its configuration file does `),cme=n(AU,"STRONG",{});var xlt=s(cme);fVo=r(xlt,"not"),xlt.forEach(t),mVo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(AU,"A",{href:!0});var klt=s(nG);gVo=r(klt,"from_pretrained()"),klt.forEach(t),hVo=r(AU," to load the model weights."),AU.forEach(t),uVo=i(Cl),fme=n(Cl,"P",{});var Slt=s(fme);pVo=r(Slt,"Examples:"),Slt.forEach(t),_Vo=i(Cl),m(Jw.$$.fragment,Cl),Cl.forEach(t),vVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Yw.$$.fragment,oa),bVo=i(oa),mme=n(oa,"P",{});var Rlt=s(mme);FVo=r(Rlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rlt.forEach(t),TVo=i(oa),sn=n(oa,"P",{});var $5=s(sn);MVo=r($5,"The model class to instantiate is selected based on the "),gme=n($5,"CODE",{});var Blt=s(gme);EVo=r(Blt,"model_type"),Blt.forEach(t),CVo=r($5,` property of the config object (either
passed as an argument or loaded from `),hme=n($5,"CODE",{});var Plt=s(hme);wVo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),AVo=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n($5,"CODE",{});var $lt=s(ume);yVo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),LVo=r($5,":"),$5.forEach(t),xVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);P2=n(Go,"LI",{});var Bye=s(P2);pme=n(Bye,"STRONG",{});var Ilt=s(pme);kVo=r(Ilt,"data2vec-audio"),Ilt.forEach(t),SVo=r(Bye," \u2014 "),sG=n(Bye,"A",{href:!0});var qlt=s(sG);RVo=r(qlt,"Data2VecAudioForCTC"),qlt.forEach(t),BVo=r(Bye," (Data2VecAudio model)"),Bye.forEach(t),PVo=i(Go),$2=n(Go,"LI",{});var Pye=s($2);_me=n(Pye,"STRONG",{});var Nlt=s(_me);$Vo=r(Nlt,"hubert"),Nlt.forEach(t),IVo=r(Pye," \u2014 "),lG=n(Pye,"A",{href:!0});var jlt=s(lG);qVo=r(jlt,"HubertForCTC"),jlt.forEach(t),NVo=r(Pye," (Hubert model)"),Pye.forEach(t),jVo=i(Go),I2=n(Go,"LI",{});var $ye=s(I2);vme=n($ye,"STRONG",{});var Dlt=s(vme);DVo=r(Dlt,"sew"),Dlt.forEach(t),GVo=r($ye," \u2014 "),iG=n($ye,"A",{href:!0});var Glt=s(iG);OVo=r(Glt,"SEWForCTC"),Glt.forEach(t),VVo=r($ye," (SEW model)"),$ye.forEach(t),XVo=i(Go),q2=n(Go,"LI",{});var Iye=s(q2);bme=n(Iye,"STRONG",{});var Olt=s(bme);zVo=r(Olt,"sew-d"),Olt.forEach(t),QVo=r(Iye," \u2014 "),dG=n(Iye,"A",{href:!0});var Vlt=s(dG);WVo=r(Vlt,"SEWDForCTC"),Vlt.forEach(t),HVo=r(Iye," (SEW-D model)"),Iye.forEach(t),UVo=i(Go),N2=n(Go,"LI",{});var qye=s(N2);Fme=n(qye,"STRONG",{});var Xlt=s(Fme);JVo=r(Xlt,"unispeech"),Xlt.forEach(t),YVo=r(qye," \u2014 "),cG=n(qye,"A",{href:!0});var zlt=s(cG);KVo=r(zlt,"UniSpeechForCTC"),zlt.forEach(t),ZVo=r(qye," (UniSpeech model)"),qye.forEach(t),eXo=i(Go),j2=n(Go,"LI",{});var Nye=s(j2);Tme=n(Nye,"STRONG",{});var Qlt=s(Tme);oXo=r(Qlt,"unispeech-sat"),Qlt.forEach(t),rXo=r(Nye," \u2014 "),fG=n(Nye,"A",{href:!0});var Wlt=s(fG);tXo=r(Wlt,"UniSpeechSatForCTC"),Wlt.forEach(t),aXo=r(Nye," (UniSpeechSat model)"),Nye.forEach(t),nXo=i(Go),D2=n(Go,"LI",{});var jye=s(D2);Mme=n(jye,"STRONG",{});var Hlt=s(Mme);sXo=r(Hlt,"wav2vec2"),Hlt.forEach(t),lXo=r(jye," \u2014 "),mG=n(jye,"A",{href:!0});var Ult=s(mG);iXo=r(Ult,"Wav2Vec2ForCTC"),Ult.forEach(t),dXo=r(jye," (Wav2Vec2 model)"),jye.forEach(t),cXo=i(Go),G2=n(Go,"LI",{});var Dye=s(G2);Eme=n(Dye,"STRONG",{});var Jlt=s(Eme);fXo=r(Jlt,"wavlm"),Jlt.forEach(t),mXo=r(Dye," \u2014 "),gG=n(Dye,"A",{href:!0});var Ylt=s(gG);gXo=r(Ylt,"WavLMForCTC"),Ylt.forEach(t),hXo=r(Dye," (WavLM model)"),Dye.forEach(t),Go.forEach(t),uXo=i(oa),O2=n(oa,"P",{});var Gye=s(O2);pXo=r(Gye,"The model is set in evaluation mode by default using "),Cme=n(Gye,"CODE",{});var Klt=s(Cme);_Xo=r(Klt,"model.eval()"),Klt.forEach(t),vXo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(Gye,"CODE",{});var Zlt=s(wme);bXo=r(Zlt,"model.train()"),Zlt.forEach(t),Gye.forEach(t),FXo=i(oa),Ame=n(oa,"P",{});var eit=s(Ame);TXo=r(eit,"Examples:"),eit.forEach(t),MXo=i(oa),m(Kw.$$.fragment,oa),oa.forEach(t),El.forEach(t),LRe=i(c),Xd=n(c,"H2",{class:!0});var qPe=s(Xd);V2=n(qPe,"A",{id:!0,class:!0,href:!0});var oit=s(V2);yme=n(oit,"SPAN",{});var rit=s(yme);m(Zw.$$.fragment,rit),rit.forEach(t),oit.forEach(t),EXo=i(qPe),Lme=n(qPe,"SPAN",{});var tit=s(Lme);CXo=r(tit,"AutoModelForSpeechSeq2Seq"),tit.forEach(t),qPe.forEach(t),xRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(e6.$$.fragment,wl),wXo=i(wl),zd=n(wl,"P",{});var yU=s(zd);AXo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=n(yU,"A",{href:!0});var ait=s(hG);yXo=r(ait,"from_pretrained()"),ait.forEach(t),LXo=r(yU," class method or the "),uG=n(yU,"A",{href:!0});var nit=s(uG);xXo=r(nit,"from_config()"),nit.forEach(t),kXo=r(yU,` class
method.`),yU.forEach(t),SXo=i(wl),o6=n(wl,"P",{});var NPe=s(o6);RXo=r(NPe,"This class cannot be instantiated directly using "),xme=n(NPe,"CODE",{});var sit=s(xme);BXo=r(sit,"__init__()"),sit.forEach(t),PXo=r(NPe," (throws an error)."),NPe.forEach(t),$Xo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(r6.$$.fragment,Al),IXo=i(Al),kme=n(Al,"P",{});var lit=s(kme);qXo=r(lit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lit.forEach(t),NXo=i(Al),Qd=n(Al,"P",{});var LU=s(Qd);jXo=r(LU,`Note:
Loading a model from its configuration file does `),Sme=n(LU,"STRONG",{});var iit=s(Sme);DXo=r(iit,"not"),iit.forEach(t),GXo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(LU,"A",{href:!0});var dit=s(pG);OXo=r(dit,"from_pretrained()"),dit.forEach(t),VXo=r(LU," to load the model weights."),LU.forEach(t),XXo=i(Al),Rme=n(Al,"P",{});var cit=s(Rme);zXo=r(cit,"Examples:"),cit.forEach(t),QXo=i(Al),m(t6.$$.fragment,Al),Al.forEach(t),WXo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(a6.$$.fragment,ra),HXo=i(ra),Bme=n(ra,"P",{});var fit=s(Bme);UXo=r(fit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fit.forEach(t),JXo=i(ra),ln=n(ra,"P",{});var I5=s(ln);YXo=r(I5,"The model class to instantiate is selected based on the "),Pme=n(I5,"CODE",{});var mit=s(Pme);KXo=r(mit,"model_type"),mit.forEach(t),ZXo=r(I5,` property of the config object (either
passed as an argument or loaded from `),$me=n(I5,"CODE",{});var git=s($me);ezo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ozo=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n(I5,"CODE",{});var hit=s(Ime);rzo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),tzo=r(I5,":"),I5.forEach(t),azo=i(ra),n6=n(ra,"UL",{});var jPe=s(n6);X2=n(jPe,"LI",{});var Oye=s(X2);qme=n(Oye,"STRONG",{});var uit=s(qme);nzo=r(uit,"speech-encoder-decoder"),uit.forEach(t),szo=r(Oye," \u2014 "),_G=n(Oye,"A",{href:!0});var pit=s(_G);lzo=r(pit,"SpeechEncoderDecoderModel"),pit.forEach(t),izo=r(Oye," (Speech Encoder decoder model)"),Oye.forEach(t),dzo=i(jPe),z2=n(jPe,"LI",{});var Vye=s(z2);Nme=n(Vye,"STRONG",{});var _it=s(Nme);czo=r(_it,"speech_to_text"),_it.forEach(t),fzo=r(Vye," \u2014 "),vG=n(Vye,"A",{href:!0});var vit=s(vG);mzo=r(vit,"Speech2TextForConditionalGeneration"),vit.forEach(t),gzo=r(Vye," (Speech2Text model)"),Vye.forEach(t),jPe.forEach(t),hzo=i(ra),Q2=n(ra,"P",{});var Xye=s(Q2);uzo=r(Xye,"The model is set in evaluation mode by default using "),jme=n(Xye,"CODE",{});var bit=s(jme);pzo=r(bit,"model.eval()"),bit.forEach(t),_zo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(Xye,"CODE",{});var Fit=s(Dme);vzo=r(Fit,"model.train()"),Fit.forEach(t),Xye.forEach(t),bzo=i(ra),Gme=n(ra,"P",{});var Tit=s(Gme);Fzo=r(Tit,"Examples:"),Tit.forEach(t),Tzo=i(ra),m(s6.$$.fragment,ra),ra.forEach(t),wl.forEach(t),kRe=i(c),Wd=n(c,"H2",{class:!0});var DPe=s(Wd);W2=n(DPe,"A",{id:!0,class:!0,href:!0});var Mit=s(W2);Ome=n(Mit,"SPAN",{});var Eit=s(Ome);m(l6.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),Mzo=i(DPe),Vme=n(DPe,"SPAN",{});var Cit=s(Vme);Ezo=r(Cit,"AutoModelForAudioXVector"),Cit.forEach(t),DPe.forEach(t),SRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(i6.$$.fragment,yl),Czo=i(yl),Hd=n(yl,"P",{});var xU=s(Hd);wzo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bG=n(xU,"A",{href:!0});var wit=s(bG);Azo=r(wit,"from_pretrained()"),wit.forEach(t),yzo=r(xU," class method or the "),FG=n(xU,"A",{href:!0});var Ait=s(FG);Lzo=r(Ait,"from_config()"),Ait.forEach(t),xzo=r(xU,` class
method.`),xU.forEach(t),kzo=i(yl),d6=n(yl,"P",{});var GPe=s(d6);Szo=r(GPe,"This class cannot be instantiated directly using "),Xme=n(GPe,"CODE",{});var yit=s(Xme);Rzo=r(yit,"__init__()"),yit.forEach(t),Bzo=r(GPe," (throws an error)."),GPe.forEach(t),Pzo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(c6.$$.fragment,Ll),$zo=i(Ll),zme=n(Ll,"P",{});var Lit=s(zme);Izo=r(Lit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Lit.forEach(t),qzo=i(Ll),Ud=n(Ll,"P",{});var kU=s(Ud);Nzo=r(kU,`Note:
Loading a model from its configuration file does `),Qme=n(kU,"STRONG",{});var xit=s(Qme);jzo=r(xit,"not"),xit.forEach(t),Dzo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(kU,"A",{href:!0});var kit=s(TG);Gzo=r(kit,"from_pretrained()"),kit.forEach(t),Ozo=r(kU," to load the model weights."),kU.forEach(t),Vzo=i(Ll),Wme=n(Ll,"P",{});var Sit=s(Wme);Xzo=r(Sit,"Examples:"),Sit.forEach(t),zzo=i(Ll),m(f6.$$.fragment,Ll),Ll.forEach(t),Qzo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(m6.$$.fragment,ta),Wzo=i(ta),Hme=n(ta,"P",{});var Rit=s(Hme);Hzo=r(Rit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rit.forEach(t),Uzo=i(ta),dn=n(ta,"P",{});var q5=s(dn);Jzo=r(q5,"The model class to instantiate is selected based on the "),Ume=n(q5,"CODE",{});var Bit=s(Ume);Yzo=r(Bit,"model_type"),Bit.forEach(t),Kzo=r(q5,` property of the config object (either
passed as an argument or loaded from `),Jme=n(q5,"CODE",{});var Pit=s(Jme);Zzo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),eQo=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(q5,"CODE",{});var $it=s(Yme);oQo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),rQo=r(q5,":"),q5.forEach(t),tQo=i(ta),cn=n(ta,"UL",{});var N5=s(cn);H2=n(N5,"LI",{});var zye=s(H2);Kme=n(zye,"STRONG",{});var Iit=s(Kme);aQo=r(Iit,"data2vec-audio"),Iit.forEach(t),nQo=r(zye," \u2014 "),MG=n(zye,"A",{href:!0});var qit=s(MG);sQo=r(qit,"Data2VecAudioForXVector"),qit.forEach(t),lQo=r(zye," (Data2VecAudio model)"),zye.forEach(t),iQo=i(N5),U2=n(N5,"LI",{});var Qye=s(U2);Zme=n(Qye,"STRONG",{});var Nit=s(Zme);dQo=r(Nit,"unispeech-sat"),Nit.forEach(t),cQo=r(Qye," \u2014 "),EG=n(Qye,"A",{href:!0});var jit=s(EG);fQo=r(jit,"UniSpeechSatForXVector"),jit.forEach(t),mQo=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),gQo=i(N5),J2=n(N5,"LI",{});var Wye=s(J2);ege=n(Wye,"STRONG",{});var Dit=s(ege);hQo=r(Dit,"wav2vec2"),Dit.forEach(t),uQo=r(Wye," \u2014 "),CG=n(Wye,"A",{href:!0});var Git=s(CG);pQo=r(Git,"Wav2Vec2ForXVector"),Git.forEach(t),_Qo=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),vQo=i(N5),Y2=n(N5,"LI",{});var Hye=s(Y2);oge=n(Hye,"STRONG",{});var Oit=s(oge);bQo=r(Oit,"wavlm"),Oit.forEach(t),FQo=r(Hye," \u2014 "),wG=n(Hye,"A",{href:!0});var Vit=s(wG);TQo=r(Vit,"WavLMForXVector"),Vit.forEach(t),MQo=r(Hye," (WavLM model)"),Hye.forEach(t),N5.forEach(t),EQo=i(ta),K2=n(ta,"P",{});var Uye=s(K2);CQo=r(Uye,"The model is set in evaluation mode by default using "),rge=n(Uye,"CODE",{});var Xit=s(rge);wQo=r(Xit,"model.eval()"),Xit.forEach(t),AQo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(Uye,"CODE",{});var zit=s(tge);yQo=r(zit,"model.train()"),zit.forEach(t),Uye.forEach(t),LQo=i(ta),age=n(ta,"P",{});var Qit=s(age);xQo=r(Qit,"Examples:"),Qit.forEach(t),kQo=i(ta),m(g6.$$.fragment,ta),ta.forEach(t),yl.forEach(t),RRe=i(c),Jd=n(c,"H2",{class:!0});var OPe=s(Jd);Z2=n(OPe,"A",{id:!0,class:!0,href:!0});var Wit=s(Z2);nge=n(Wit,"SPAN",{});var Hit=s(nge);m(h6.$$.fragment,Hit),Hit.forEach(t),Wit.forEach(t),SQo=i(OPe),sge=n(OPe,"SPAN",{});var Uit=s(sge);RQo=r(Uit,"AutoModelForMaskedImageModeling"),Uit.forEach(t),OPe.forEach(t),BRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(u6.$$.fragment,xl),BQo=i(xl),Yd=n(xl,"P",{});var SU=s(Yd);PQo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=n(SU,"A",{href:!0});var Jit=s(AG);$Qo=r(Jit,"from_pretrained()"),Jit.forEach(t),IQo=r(SU," class method or the "),yG=n(SU,"A",{href:!0});var Yit=s(yG);qQo=r(Yit,"from_config()"),Yit.forEach(t),NQo=r(SU,` class
method.`),SU.forEach(t),jQo=i(xl),p6=n(xl,"P",{});var VPe=s(p6);DQo=r(VPe,"This class cannot be instantiated directly using "),lge=n(VPe,"CODE",{});var Kit=s(lge);GQo=r(Kit,"__init__()"),Kit.forEach(t),OQo=r(VPe," (throws an error)."),VPe.forEach(t),VQo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(_6.$$.fragment,kl),XQo=i(kl),ige=n(kl,"P",{});var Zit=s(ige);zQo=r(Zit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zit.forEach(t),QQo=i(kl),Kd=n(kl,"P",{});var RU=s(Kd);WQo=r(RU,`Note:
Loading a model from its configuration file does `),dge=n(RU,"STRONG",{});var edt=s(dge);HQo=r(edt,"not"),edt.forEach(t),UQo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(RU,"A",{href:!0});var odt=s(LG);JQo=r(odt,"from_pretrained()"),odt.forEach(t),YQo=r(RU," to load the model weights."),RU.forEach(t),KQo=i(kl),cge=n(kl,"P",{});var rdt=s(cge);ZQo=r(rdt,"Examples:"),rdt.forEach(t),eWo=i(kl),m(v6.$$.fragment,kl),kl.forEach(t),oWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(b6.$$.fragment,aa),rWo=i(aa),fge=n(aa,"P",{});var tdt=s(fge);tWo=r(tdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tdt.forEach(t),aWo=i(aa),fn=n(aa,"P",{});var j5=s(fn);nWo=r(j5,"The model class to instantiate is selected based on the "),mge=n(j5,"CODE",{});var adt=s(mge);sWo=r(adt,"model_type"),adt.forEach(t),lWo=r(j5,` property of the config object (either
passed as an argument or loaded from `),gge=n(j5,"CODE",{});var ndt=s(gge);iWo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),dWo=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(j5,"CODE",{});var sdt=s(hge);cWo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),fWo=r(j5,":"),j5.forEach(t),mWo=i(aa),Zd=n(aa,"UL",{});var BU=s(Zd);eF=n(BU,"LI",{});var Jye=s(eF);uge=n(Jye,"STRONG",{});var ldt=s(uge);gWo=r(ldt,"deit"),ldt.forEach(t),hWo=r(Jye," \u2014 "),xG=n(Jye,"A",{href:!0});var idt=s(xG);uWo=r(idt,"DeiTForMaskedImageModeling"),idt.forEach(t),pWo=r(Jye," (DeiT model)"),Jye.forEach(t),_Wo=i(BU),oF=n(BU,"LI",{});var Yye=s(oF);pge=n(Yye,"STRONG",{});var ddt=s(pge);vWo=r(ddt,"swin"),ddt.forEach(t),bWo=r(Yye," \u2014 "),kG=n(Yye,"A",{href:!0});var cdt=s(kG);FWo=r(cdt,"SwinForMaskedImageModeling"),cdt.forEach(t),TWo=r(Yye," (Swin model)"),Yye.forEach(t),MWo=i(BU),rF=n(BU,"LI",{});var Kye=s(rF);_ge=n(Kye,"STRONG",{});var fdt=s(_ge);EWo=r(fdt,"vit"),fdt.forEach(t),CWo=r(Kye," \u2014 "),SG=n(Kye,"A",{href:!0});var mdt=s(SG);wWo=r(mdt,"ViTForMaskedImageModeling"),mdt.forEach(t),AWo=r(Kye," (ViT model)"),Kye.forEach(t),BU.forEach(t),yWo=i(aa),tF=n(aa,"P",{});var Zye=s(tF);LWo=r(Zye,"The model is set in evaluation mode by default using "),vge=n(Zye,"CODE",{});var gdt=s(vge);xWo=r(gdt,"model.eval()"),gdt.forEach(t),kWo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Zye,"CODE",{});var hdt=s(bge);SWo=r(hdt,"model.train()"),hdt.forEach(t),Zye.forEach(t),RWo=i(aa),Fge=n(aa,"P",{});var udt=s(Fge);BWo=r(udt,"Examples:"),udt.forEach(t),PWo=i(aa),m(F6.$$.fragment,aa),aa.forEach(t),xl.forEach(t),PRe=i(c),ec=n(c,"H2",{class:!0});var XPe=s(ec);aF=n(XPe,"A",{id:!0,class:!0,href:!0});var pdt=s(aF);Tge=n(pdt,"SPAN",{});var _dt=s(Tge);m(T6.$$.fragment,_dt),_dt.forEach(t),pdt.forEach(t),$Wo=i(XPe),Mge=n(XPe,"SPAN",{});var vdt=s(Mge);IWo=r(vdt,"AutoModelForObjectDetection"),vdt.forEach(t),XPe.forEach(t),$Re=i(c),ur=n(c,"DIV",{class:!0});var Sl=s(ur);m(M6.$$.fragment,Sl),qWo=i(Sl),oc=n(Sl,"P",{});var PU=s(oc);NWo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=n(PU,"A",{href:!0});var bdt=s(RG);jWo=r(bdt,"from_pretrained()"),bdt.forEach(t),DWo=r(PU," class method or the "),BG=n(PU,"A",{href:!0});var Fdt=s(BG);GWo=r(Fdt,"from_config()"),Fdt.forEach(t),OWo=r(PU,` class
method.`),PU.forEach(t),VWo=i(Sl),E6=n(Sl,"P",{});var zPe=s(E6);XWo=r(zPe,"This class cannot be instantiated directly using "),Ege=n(zPe,"CODE",{});var Tdt=s(Ege);zWo=r(Tdt,"__init__()"),Tdt.forEach(t),QWo=r(zPe," (throws an error)."),zPe.forEach(t),WWo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(C6.$$.fragment,Rl),HWo=i(Rl),Cge=n(Rl,"P",{});var Mdt=s(Cge);UWo=r(Mdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mdt.forEach(t),JWo=i(Rl),rc=n(Rl,"P",{});var $U=s(rc);YWo=r($U,`Note:
Loading a model from its configuration file does `),wge=n($U,"STRONG",{});var Edt=s(wge);KWo=r(Edt,"not"),Edt.forEach(t),ZWo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n($U,"A",{href:!0});var Cdt=s(PG);eHo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),oHo=r($U," to load the model weights."),$U.forEach(t),rHo=i(Rl),Age=n(Rl,"P",{});var wdt=s(Age);tHo=r(wdt,"Examples:"),wdt.forEach(t),aHo=i(Rl),m(w6.$$.fragment,Rl),Rl.forEach(t),nHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(A6.$$.fragment,na),sHo=i(na),yge=n(na,"P",{});var Adt=s(yge);lHo=r(Adt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Adt.forEach(t),iHo=i(na),mn=n(na,"P",{});var D5=s(mn);dHo=r(D5,"The model class to instantiate is selected based on the "),Lge=n(D5,"CODE",{});var ydt=s(Lge);cHo=r(ydt,"model_type"),ydt.forEach(t),fHo=r(D5,` property of the config object (either
passed as an argument or loaded from `),xge=n(D5,"CODE",{});var Ldt=s(xge);mHo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),gHo=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(D5,"CODE",{});var xdt=s(kge);hHo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),uHo=r(D5,":"),D5.forEach(t),pHo=i(na),Sge=n(na,"UL",{});var kdt=s(Sge);nF=n(kdt,"LI",{});var eLe=s(nF);Rge=n(eLe,"STRONG",{});var Sdt=s(Rge);_Ho=r(Sdt,"detr"),Sdt.forEach(t),vHo=r(eLe," \u2014 "),$G=n(eLe,"A",{href:!0});var Rdt=s($G);bHo=r(Rdt,"DetrForObjectDetection"),Rdt.forEach(t),FHo=r(eLe," (DETR model)"),eLe.forEach(t),kdt.forEach(t),THo=i(na),sF=n(na,"P",{});var oLe=s(sF);MHo=r(oLe,"The model is set in evaluation mode by default using "),Bge=n(oLe,"CODE",{});var Bdt=s(Bge);EHo=r(Bdt,"model.eval()"),Bdt.forEach(t),CHo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(oLe,"CODE",{});var Pdt=s(Pge);wHo=r(Pdt,"model.train()"),Pdt.forEach(t),oLe.forEach(t),AHo=i(na),$ge=n(na,"P",{});var $dt=s($ge);yHo=r($dt,"Examples:"),$dt.forEach(t),LHo=i(na),m(y6.$$.fragment,na),na.forEach(t),Sl.forEach(t),IRe=i(c),tc=n(c,"H2",{class:!0});var QPe=s(tc);lF=n(QPe,"A",{id:!0,class:!0,href:!0});var Idt=s(lF);Ige=n(Idt,"SPAN",{});var qdt=s(Ige);m(L6.$$.fragment,qdt),qdt.forEach(t),Idt.forEach(t),xHo=i(QPe),qge=n(QPe,"SPAN",{});var Ndt=s(qge);kHo=r(Ndt,"AutoModelForImageSegmentation"),Ndt.forEach(t),QPe.forEach(t),qRe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);m(x6.$$.fragment,Bl),SHo=i(Bl),ac=n(Bl,"P",{});var IU=s(ac);RHo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=n(IU,"A",{href:!0});var jdt=s(IG);BHo=r(jdt,"from_pretrained()"),jdt.forEach(t),PHo=r(IU," class method or the "),qG=n(IU,"A",{href:!0});var Ddt=s(qG);$Ho=r(Ddt,"from_config()"),Ddt.forEach(t),IHo=r(IU,` class
method.`),IU.forEach(t),qHo=i(Bl),k6=n(Bl,"P",{});var WPe=s(k6);NHo=r(WPe,"This class cannot be instantiated directly using "),Nge=n(WPe,"CODE",{});var Gdt=s(Nge);jHo=r(Gdt,"__init__()"),Gdt.forEach(t),DHo=r(WPe," (throws an error)."),WPe.forEach(t),GHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(S6.$$.fragment,Pl),OHo=i(Pl),jge=n(Pl,"P",{});var Odt=s(jge);VHo=r(Odt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Odt.forEach(t),XHo=i(Pl),nc=n(Pl,"P",{});var qU=s(nc);zHo=r(qU,`Note:
Loading a model from its configuration file does `),Dge=n(qU,"STRONG",{});var Vdt=s(Dge);QHo=r(Vdt,"not"),Vdt.forEach(t),WHo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(qU,"A",{href:!0});var Xdt=s(NG);HHo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),UHo=r(qU," to load the model weights."),qU.forEach(t),JHo=i(Pl),Gge=n(Pl,"P",{});var zdt=s(Gge);YHo=r(zdt,"Examples:"),zdt.forEach(t),KHo=i(Pl),m(R6.$$.fragment,Pl),Pl.forEach(t),ZHo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(B6.$$.fragment,sa),eUo=i(sa),Oge=n(sa,"P",{});var Qdt=s(Oge);oUo=r(Qdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qdt.forEach(t),rUo=i(sa),gn=n(sa,"P",{});var G5=s(gn);tUo=r(G5,"The model class to instantiate is selected based on the "),Vge=n(G5,"CODE",{});var Wdt=s(Vge);aUo=r(Wdt,"model_type"),Wdt.forEach(t),nUo=r(G5,` property of the config object (either
passed as an argument or loaded from `),Xge=n(G5,"CODE",{});var Hdt=s(Xge);sUo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),lUo=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(G5,"CODE",{});var Udt=s(zge);iUo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),dUo=r(G5,":"),G5.forEach(t),cUo=i(sa),Qge=n(sa,"UL",{});var Jdt=s(Qge);iF=n(Jdt,"LI",{});var rLe=s(iF);Wge=n(rLe,"STRONG",{});var Ydt=s(Wge);fUo=r(Ydt,"detr"),Ydt.forEach(t),mUo=r(rLe," \u2014 "),jG=n(rLe,"A",{href:!0});var Kdt=s(jG);gUo=r(Kdt,"DetrForSegmentation"),Kdt.forEach(t),hUo=r(rLe," (DETR model)"),rLe.forEach(t),Jdt.forEach(t),uUo=i(sa),dF=n(sa,"P",{});var tLe=s(dF);pUo=r(tLe,"The model is set in evaluation mode by default using "),Hge=n(tLe,"CODE",{});var Zdt=s(Hge);_Uo=r(Zdt,"model.eval()"),Zdt.forEach(t),vUo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(tLe,"CODE",{});var ect=s(Uge);bUo=r(ect,"model.train()"),ect.forEach(t),tLe.forEach(t),FUo=i(sa),Jge=n(sa,"P",{});var oct=s(Jge);TUo=r(oct,"Examples:"),oct.forEach(t),MUo=i(sa),m(P6.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),NRe=i(c),sc=n(c,"H2",{class:!0});var HPe=s(sc);cF=n(HPe,"A",{id:!0,class:!0,href:!0});var rct=s(cF);Yge=n(rct,"SPAN",{});var tct=s(Yge);m($6.$$.fragment,tct),tct.forEach(t),rct.forEach(t),EUo=i(HPe),Kge=n(HPe,"SPAN",{});var act=s(Kge);CUo=r(act,"AutoModelForSemanticSegmentation"),act.forEach(t),HPe.forEach(t),jRe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);m(I6.$$.fragment,$l),wUo=i($l),lc=n($l,"P",{});var NU=s(lc);AUo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=n(NU,"A",{href:!0});var nct=s(DG);yUo=r(nct,"from_pretrained()"),nct.forEach(t),LUo=r(NU," class method or the "),GG=n(NU,"A",{href:!0});var sct=s(GG);xUo=r(sct,"from_config()"),sct.forEach(t),kUo=r(NU,` class
method.`),NU.forEach(t),SUo=i($l),q6=n($l,"P",{});var UPe=s(q6);RUo=r(UPe,"This class cannot be instantiated directly using "),Zge=n(UPe,"CODE",{});var lct=s(Zge);BUo=r(lct,"__init__()"),lct.forEach(t),PUo=r(UPe," (throws an error)."),UPe.forEach(t),$Uo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(N6.$$.fragment,Il),IUo=i(Il),ehe=n(Il,"P",{});var ict=s(ehe);qUo=r(ict,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ict.forEach(t),NUo=i(Il),ic=n(Il,"P",{});var jU=s(ic);jUo=r(jU,`Note:
Loading a model from its configuration file does `),ohe=n(jU,"STRONG",{});var dct=s(ohe);DUo=r(dct,"not"),dct.forEach(t),GUo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(jU,"A",{href:!0});var cct=s(OG);OUo=r(cct,"from_pretrained()"),cct.forEach(t),VUo=r(jU," to load the model weights."),jU.forEach(t),XUo=i(Il),rhe=n(Il,"P",{});var fct=s(rhe);zUo=r(fct,"Examples:"),fct.forEach(t),QUo=i(Il),m(j6.$$.fragment,Il),Il.forEach(t),WUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(D6.$$.fragment,la),HUo=i(la),the=n(la,"P",{});var mct=s(the);UUo=r(mct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mct.forEach(t),JUo=i(la),hn=n(la,"P",{});var O5=s(hn);YUo=r(O5,"The model class to instantiate is selected based on the "),ahe=n(O5,"CODE",{});var gct=s(ahe);KUo=r(gct,"model_type"),gct.forEach(t),ZUo=r(O5,` property of the config object (either
passed as an argument or loaded from `),nhe=n(O5,"CODE",{});var hct=s(nhe);eJo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),oJo=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(O5,"CODE",{});var uct=s(she);rJo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),tJo=r(O5,":"),O5.forEach(t),aJo=i(la),dc=n(la,"UL",{});var DU=s(dc);fF=n(DU,"LI",{});var aLe=s(fF);lhe=n(aLe,"STRONG",{});var pct=s(lhe);nJo=r(pct,"beit"),pct.forEach(t),sJo=r(aLe," \u2014 "),VG=n(aLe,"A",{href:!0});var _ct=s(VG);lJo=r(_ct,"BeitForSemanticSegmentation"),_ct.forEach(t),iJo=r(aLe," (BEiT model)"),aLe.forEach(t),dJo=i(DU),mF=n(DU,"LI",{});var nLe=s(mF);ihe=n(nLe,"STRONG",{});var vct=s(ihe);cJo=r(vct,"dpt"),vct.forEach(t),fJo=r(nLe," \u2014 "),XG=n(nLe,"A",{href:!0});var bct=s(XG);mJo=r(bct,"DPTForSemanticSegmentation"),bct.forEach(t),gJo=r(nLe," (DPT model)"),nLe.forEach(t),hJo=i(DU),gF=n(DU,"LI",{});var sLe=s(gF);dhe=n(sLe,"STRONG",{});var Fct=s(dhe);uJo=r(Fct,"segformer"),Fct.forEach(t),pJo=r(sLe," \u2014 "),zG=n(sLe,"A",{href:!0});var Tct=s(zG);_Jo=r(Tct,"SegformerForSemanticSegmentation"),Tct.forEach(t),vJo=r(sLe," (SegFormer model)"),sLe.forEach(t),DU.forEach(t),bJo=i(la),hF=n(la,"P",{});var lLe=s(hF);FJo=r(lLe,"The model is set in evaluation mode by default using "),che=n(lLe,"CODE",{});var Mct=s(che);TJo=r(Mct,"model.eval()"),Mct.forEach(t),MJo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(lLe,"CODE",{});var Ect=s(fhe);EJo=r(Ect,"model.train()"),Ect.forEach(t),lLe.forEach(t),CJo=i(la),mhe=n(la,"P",{});var Cct=s(mhe);wJo=r(Cct,"Examples:"),Cct.forEach(t),AJo=i(la),m(G6.$$.fragment,la),la.forEach(t),$l.forEach(t),DRe=i(c),cc=n(c,"H2",{class:!0});var JPe=s(cc);uF=n(JPe,"A",{id:!0,class:!0,href:!0});var wct=s(uF);ghe=n(wct,"SPAN",{});var Act=s(ghe);m(O6.$$.fragment,Act),Act.forEach(t),wct.forEach(t),yJo=i(JPe),hhe=n(JPe,"SPAN",{});var yct=s(hhe);LJo=r(yct,"AutoModelForInstanceSegmentation"),yct.forEach(t),JPe.forEach(t),GRe=i(c),vr=n(c,"DIV",{class:!0});var ql=s(vr);m(V6.$$.fragment,ql),xJo=i(ql),fc=n(ql,"P",{});var GU=s(fc);kJo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=n(GU,"A",{href:!0});var Lct=s(QG);SJo=r(Lct,"from_pretrained()"),Lct.forEach(t),RJo=r(GU," class method or the "),WG=n(GU,"A",{href:!0});var xct=s(WG);BJo=r(xct,"from_config()"),xct.forEach(t),PJo=r(GU,` class
method.`),GU.forEach(t),$Jo=i(ql),X6=n(ql,"P",{});var YPe=s(X6);IJo=r(YPe,"This class cannot be instantiated directly using "),uhe=n(YPe,"CODE",{});var kct=s(uhe);qJo=r(kct,"__init__()"),kct.forEach(t),NJo=r(YPe," (throws an error)."),YPe.forEach(t),jJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(z6.$$.fragment,Nl),DJo=i(Nl),phe=n(Nl,"P",{});var Sct=s(phe);GJo=r(Sct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Sct.forEach(t),OJo=i(Nl),mc=n(Nl,"P",{});var OU=s(mc);VJo=r(OU,`Note:
Loading a model from its configuration file does `),_he=n(OU,"STRONG",{});var Rct=s(_he);XJo=r(Rct,"not"),Rct.forEach(t),zJo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(OU,"A",{href:!0});var Bct=s(HG);QJo=r(Bct,"from_pretrained()"),Bct.forEach(t),WJo=r(OU," to load the model weights."),OU.forEach(t),HJo=i(Nl),vhe=n(Nl,"P",{});var Pct=s(vhe);UJo=r(Pct,"Examples:"),Pct.forEach(t),JJo=i(Nl),m(Q6.$$.fragment,Nl),Nl.forEach(t),YJo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(W6.$$.fragment,ia),KJo=i(ia),bhe=n(ia,"P",{});var $ct=s(bhe);ZJo=r($ct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$ct.forEach(t),eYo=i(ia),un=n(ia,"P",{});var V5=s(un);oYo=r(V5,"The model class to instantiate is selected based on the "),Fhe=n(V5,"CODE",{});var Ict=s(Fhe);rYo=r(Ict,"model_type"),Ict.forEach(t),tYo=r(V5,` property of the config object (either
passed as an argument or loaded from `),The=n(V5,"CODE",{});var qct=s(The);aYo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),nYo=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(V5,"CODE",{});var Nct=s(Mhe);sYo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),lYo=r(V5,":"),V5.forEach(t),iYo=i(ia),Ehe=n(ia,"UL",{});var jct=s(Ehe);pF=n(jct,"LI",{});var iLe=s(pF);Che=n(iLe,"STRONG",{});var Dct=s(Che);dYo=r(Dct,"maskformer"),Dct.forEach(t),cYo=r(iLe," \u2014 "),UG=n(iLe,"A",{href:!0});var Gct=s(UG);fYo=r(Gct,"MaskFormerForInstanceSegmentation"),Gct.forEach(t),mYo=r(iLe," (MaskFormer model)"),iLe.forEach(t),jct.forEach(t),gYo=i(ia),_F=n(ia,"P",{});var dLe=s(_F);hYo=r(dLe,"The model is set in evaluation mode by default using "),whe=n(dLe,"CODE",{});var Oct=s(whe);uYo=r(Oct,"model.eval()"),Oct.forEach(t),pYo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=n(dLe,"CODE",{});var Vct=s(Ahe);_Yo=r(Vct,"model.train()"),Vct.forEach(t),dLe.forEach(t),vYo=i(ia),yhe=n(ia,"P",{});var Xct=s(yhe);bYo=r(Xct,"Examples:"),Xct.forEach(t),FYo=i(ia),m(H6.$$.fragment,ia),ia.forEach(t),ql.forEach(t),ORe=i(c),gc=n(c,"H2",{class:!0});var KPe=s(gc);vF=n(KPe,"A",{id:!0,class:!0,href:!0});var zct=s(vF);Lhe=n(zct,"SPAN",{});var Qct=s(Lhe);m(U6.$$.fragment,Qct),Qct.forEach(t),zct.forEach(t),TYo=i(KPe),xhe=n(KPe,"SPAN",{});var Wct=s(xhe);MYo=r(Wct,"TFAutoModel"),Wct.forEach(t),KPe.forEach(t),VRe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(J6.$$.fragment,jl),EYo=i(jl),hc=n(jl,"P",{});var VU=s(hc);CYo=r(VU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=n(VU,"A",{href:!0});var Hct=s(JG);wYo=r(Hct,"from_pretrained()"),Hct.forEach(t),AYo=r(VU," class method or the "),YG=n(VU,"A",{href:!0});var Uct=s(YG);yYo=r(Uct,"from_config()"),Uct.forEach(t),LYo=r(VU,` class
method.`),VU.forEach(t),xYo=i(jl),Y6=n(jl,"P",{});var ZPe=s(Y6);kYo=r(ZPe,"This class cannot be instantiated directly using "),khe=n(ZPe,"CODE",{});var Jct=s(khe);SYo=r(Jct,"__init__()"),Jct.forEach(t),RYo=r(ZPe," (throws an error)."),ZPe.forEach(t),BYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(K6.$$.fragment,Dl),PYo=i(Dl),She=n(Dl,"P",{});var Yct=s(She);$Yo=r(Yct,"Instantiates one of the base model classes of the library from a configuration."),Yct.forEach(t),IYo=i(Dl),uc=n(Dl,"P",{});var XU=s(uc);qYo=r(XU,`Note:
Loading a model from its configuration file does `),Rhe=n(XU,"STRONG",{});var Kct=s(Rhe);NYo=r(Kct,"not"),Kct.forEach(t),jYo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(XU,"A",{href:!0});var Zct=s(KG);DYo=r(Zct,"from_pretrained()"),Zct.forEach(t),GYo=r(XU," to load the model weights."),XU.forEach(t),OYo=i(Dl),Bhe=n(Dl,"P",{});var eft=s(Bhe);VYo=r(eft,"Examples:"),eft.forEach(t),XYo=i(Dl),m(Z6.$$.fragment,Dl),Dl.forEach(t),zYo=i(jl),ho=n(jl,"DIV",{class:!0});var ua=s(ho);m(eA.$$.fragment,ua),QYo=i(ua),Phe=n(ua,"P",{});var oft=s(Phe);WYo=r(oft,"Instantiate one of the base model classes of the library from a pretrained model."),oft.forEach(t),HYo=i(ua),pn=n(ua,"P",{});var X5=s(pn);UYo=r(X5,"The model class to instantiate is selected based on the "),$he=n(X5,"CODE",{});var rft=s($he);JYo=r(rft,"model_type"),rft.forEach(t),YYo=r(X5,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(X5,"CODE",{});var tft=s(Ihe);KYo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),ZYo=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(X5,"CODE",{});var aft=s(qhe);eKo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),oKo=r(X5,":"),X5.forEach(t),rKo=i(ua),x=n(ua,"UL",{});var k=s(x);bF=n(k,"LI",{});var cLe=s(bF);Nhe=n(cLe,"STRONG",{});var nft=s(Nhe);tKo=r(nft,"albert"),nft.forEach(t),aKo=r(cLe," \u2014 "),ZG=n(cLe,"A",{href:!0});var sft=s(ZG);nKo=r(sft,"TFAlbertModel"),sft.forEach(t),sKo=r(cLe," (ALBERT model)"),cLe.forEach(t),lKo=i(k),FF=n(k,"LI",{});var fLe=s(FF);jhe=n(fLe,"STRONG",{});var lft=s(jhe);iKo=r(lft,"bart"),lft.forEach(t),dKo=r(fLe," \u2014 "),eO=n(fLe,"A",{href:!0});var ift=s(eO);cKo=r(ift,"TFBartModel"),ift.forEach(t),fKo=r(fLe," (BART model)"),fLe.forEach(t),mKo=i(k),TF=n(k,"LI",{});var mLe=s(TF);Dhe=n(mLe,"STRONG",{});var dft=s(Dhe);gKo=r(dft,"bert"),dft.forEach(t),hKo=r(mLe," \u2014 "),oO=n(mLe,"A",{href:!0});var cft=s(oO);uKo=r(cft,"TFBertModel"),cft.forEach(t),pKo=r(mLe," (BERT model)"),mLe.forEach(t),_Ko=i(k),MF=n(k,"LI",{});var gLe=s(MF);Ghe=n(gLe,"STRONG",{});var fft=s(Ghe);vKo=r(fft,"blenderbot"),fft.forEach(t),bKo=r(gLe," \u2014 "),rO=n(gLe,"A",{href:!0});var mft=s(rO);FKo=r(mft,"TFBlenderbotModel"),mft.forEach(t),TKo=r(gLe," (Blenderbot model)"),gLe.forEach(t),MKo=i(k),EF=n(k,"LI",{});var hLe=s(EF);Ohe=n(hLe,"STRONG",{});var gft=s(Ohe);EKo=r(gft,"blenderbot-small"),gft.forEach(t),CKo=r(hLe," \u2014 "),tO=n(hLe,"A",{href:!0});var hft=s(tO);wKo=r(hft,"TFBlenderbotSmallModel"),hft.forEach(t),AKo=r(hLe," (BlenderbotSmall model)"),hLe.forEach(t),yKo=i(k),CF=n(k,"LI",{});var uLe=s(CF);Vhe=n(uLe,"STRONG",{});var uft=s(Vhe);LKo=r(uft,"camembert"),uft.forEach(t),xKo=r(uLe," \u2014 "),aO=n(uLe,"A",{href:!0});var pft=s(aO);kKo=r(pft,"TFCamembertModel"),pft.forEach(t),SKo=r(uLe," (CamemBERT model)"),uLe.forEach(t),RKo=i(k),wF=n(k,"LI",{});var pLe=s(wF);Xhe=n(pLe,"STRONG",{});var _ft=s(Xhe);BKo=r(_ft,"clip"),_ft.forEach(t),PKo=r(pLe," \u2014 "),nO=n(pLe,"A",{href:!0});var vft=s(nO);$Ko=r(vft,"TFCLIPModel"),vft.forEach(t),IKo=r(pLe," (CLIP model)"),pLe.forEach(t),qKo=i(k),AF=n(k,"LI",{});var _Le=s(AF);zhe=n(_Le,"STRONG",{});var bft=s(zhe);NKo=r(bft,"convbert"),bft.forEach(t),jKo=r(_Le," \u2014 "),sO=n(_Le,"A",{href:!0});var Fft=s(sO);DKo=r(Fft,"TFConvBertModel"),Fft.forEach(t),GKo=r(_Le," (ConvBERT model)"),_Le.forEach(t),OKo=i(k),yF=n(k,"LI",{});var vLe=s(yF);Qhe=n(vLe,"STRONG",{});var Tft=s(Qhe);VKo=r(Tft,"convnext"),Tft.forEach(t),XKo=r(vLe," \u2014 "),lO=n(vLe,"A",{href:!0});var Mft=s(lO);zKo=r(Mft,"TFConvNextModel"),Mft.forEach(t),QKo=r(vLe," (ConvNext model)"),vLe.forEach(t),WKo=i(k),LF=n(k,"LI",{});var bLe=s(LF);Whe=n(bLe,"STRONG",{});var Eft=s(Whe);HKo=r(Eft,"ctrl"),Eft.forEach(t),UKo=r(bLe," \u2014 "),iO=n(bLe,"A",{href:!0});var Cft=s(iO);JKo=r(Cft,"TFCTRLModel"),Cft.forEach(t),YKo=r(bLe," (CTRL model)"),bLe.forEach(t),KKo=i(k),xF=n(k,"LI",{});var FLe=s(xF);Hhe=n(FLe,"STRONG",{});var wft=s(Hhe);ZKo=r(wft,"deberta"),wft.forEach(t),eZo=r(FLe," \u2014 "),dO=n(FLe,"A",{href:!0});var Aft=s(dO);oZo=r(Aft,"TFDebertaModel"),Aft.forEach(t),rZo=r(FLe," (DeBERTa model)"),FLe.forEach(t),tZo=i(k),kF=n(k,"LI",{});var TLe=s(kF);Uhe=n(TLe,"STRONG",{});var yft=s(Uhe);aZo=r(yft,"deberta-v2"),yft.forEach(t),nZo=r(TLe," \u2014 "),cO=n(TLe,"A",{href:!0});var Lft=s(cO);sZo=r(Lft,"TFDebertaV2Model"),Lft.forEach(t),lZo=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),iZo=i(k),SF=n(k,"LI",{});var MLe=s(SF);Jhe=n(MLe,"STRONG",{});var xft=s(Jhe);dZo=r(xft,"distilbert"),xft.forEach(t),cZo=r(MLe," \u2014 "),fO=n(MLe,"A",{href:!0});var kft=s(fO);fZo=r(kft,"TFDistilBertModel"),kft.forEach(t),mZo=r(MLe," (DistilBERT model)"),MLe.forEach(t),gZo=i(k),RF=n(k,"LI",{});var ELe=s(RF);Yhe=n(ELe,"STRONG",{});var Sft=s(Yhe);hZo=r(Sft,"dpr"),Sft.forEach(t),uZo=r(ELe," \u2014 "),mO=n(ELe,"A",{href:!0});var Rft=s(mO);pZo=r(Rft,"TFDPRQuestionEncoder"),Rft.forEach(t),_Zo=r(ELe," (DPR model)"),ELe.forEach(t),vZo=i(k),BF=n(k,"LI",{});var CLe=s(BF);Khe=n(CLe,"STRONG",{});var Bft=s(Khe);bZo=r(Bft,"electra"),Bft.forEach(t),FZo=r(CLe," \u2014 "),gO=n(CLe,"A",{href:!0});var Pft=s(gO);TZo=r(Pft,"TFElectraModel"),Pft.forEach(t),MZo=r(CLe," (ELECTRA model)"),CLe.forEach(t),EZo=i(k),PF=n(k,"LI",{});var wLe=s(PF);Zhe=n(wLe,"STRONG",{});var $ft=s(Zhe);CZo=r($ft,"flaubert"),$ft.forEach(t),wZo=r(wLe," \u2014 "),hO=n(wLe,"A",{href:!0});var Ift=s(hO);AZo=r(Ift,"TFFlaubertModel"),Ift.forEach(t),yZo=r(wLe," (FlauBERT model)"),wLe.forEach(t),LZo=i(k),Gs=n(k,"LI",{});var sx=s(Gs);eue=n(sx,"STRONG",{});var qft=s(eue);xZo=r(qft,"funnel"),qft.forEach(t),kZo=r(sx," \u2014 "),uO=n(sx,"A",{href:!0});var Nft=s(uO);SZo=r(Nft,"TFFunnelModel"),Nft.forEach(t),RZo=r(sx," or "),pO=n(sx,"A",{href:!0});var jft=s(pO);BZo=r(jft,"TFFunnelBaseModel"),jft.forEach(t),PZo=r(sx," (Funnel Transformer model)"),sx.forEach(t),$Zo=i(k),$F=n(k,"LI",{});var ALe=s($F);oue=n(ALe,"STRONG",{});var Dft=s(oue);IZo=r(Dft,"gpt2"),Dft.forEach(t),qZo=r(ALe," \u2014 "),_O=n(ALe,"A",{href:!0});var Gft=s(_O);NZo=r(Gft,"TFGPT2Model"),Gft.forEach(t),jZo=r(ALe," (OpenAI GPT-2 model)"),ALe.forEach(t),DZo=i(k),IF=n(k,"LI",{});var yLe=s(IF);rue=n(yLe,"STRONG",{});var Oft=s(rue);GZo=r(Oft,"gptj"),Oft.forEach(t),OZo=r(yLe," \u2014 "),vO=n(yLe,"A",{href:!0});var Vft=s(vO);VZo=r(Vft,"TFGPTJModel"),Vft.forEach(t),XZo=r(yLe," (GPT-J model)"),yLe.forEach(t),zZo=i(k),qF=n(k,"LI",{});var LLe=s(qF);tue=n(LLe,"STRONG",{});var Xft=s(tue);QZo=r(Xft,"hubert"),Xft.forEach(t),WZo=r(LLe," \u2014 "),bO=n(LLe,"A",{href:!0});var zft=s(bO);HZo=r(zft,"TFHubertModel"),zft.forEach(t),UZo=r(LLe," (Hubert model)"),LLe.forEach(t),JZo=i(k),NF=n(k,"LI",{});var xLe=s(NF);aue=n(xLe,"STRONG",{});var Qft=s(aue);YZo=r(Qft,"layoutlm"),Qft.forEach(t),KZo=r(xLe," \u2014 "),FO=n(xLe,"A",{href:!0});var Wft=s(FO);ZZo=r(Wft,"TFLayoutLMModel"),Wft.forEach(t),eer=r(xLe," (LayoutLM model)"),xLe.forEach(t),oer=i(k),jF=n(k,"LI",{});var kLe=s(jF);nue=n(kLe,"STRONG",{});var Hft=s(nue);rer=r(Hft,"led"),Hft.forEach(t),ter=r(kLe," \u2014 "),TO=n(kLe,"A",{href:!0});var Uft=s(TO);aer=r(Uft,"TFLEDModel"),Uft.forEach(t),ner=r(kLe," (LED model)"),kLe.forEach(t),ser=i(k),DF=n(k,"LI",{});var SLe=s(DF);sue=n(SLe,"STRONG",{});var Jft=s(sue);ler=r(Jft,"longformer"),Jft.forEach(t),ier=r(SLe," \u2014 "),MO=n(SLe,"A",{href:!0});var Yft=s(MO);der=r(Yft,"TFLongformerModel"),Yft.forEach(t),cer=r(SLe," (Longformer model)"),SLe.forEach(t),fer=i(k),GF=n(k,"LI",{});var RLe=s(GF);lue=n(RLe,"STRONG",{});var Kft=s(lue);mer=r(Kft,"lxmert"),Kft.forEach(t),ger=r(RLe," \u2014 "),EO=n(RLe,"A",{href:!0});var Zft=s(EO);her=r(Zft,"TFLxmertModel"),Zft.forEach(t),uer=r(RLe," (LXMERT model)"),RLe.forEach(t),per=i(k),OF=n(k,"LI",{});var BLe=s(OF);iue=n(BLe,"STRONG",{});var emt=s(iue);_er=r(emt,"marian"),emt.forEach(t),ver=r(BLe," \u2014 "),CO=n(BLe,"A",{href:!0});var omt=s(CO);ber=r(omt,"TFMarianModel"),omt.forEach(t),Fer=r(BLe," (Marian model)"),BLe.forEach(t),Ter=i(k),VF=n(k,"LI",{});var PLe=s(VF);due=n(PLe,"STRONG",{});var rmt=s(due);Mer=r(rmt,"mbart"),rmt.forEach(t),Eer=r(PLe," \u2014 "),wO=n(PLe,"A",{href:!0});var tmt=s(wO);Cer=r(tmt,"TFMBartModel"),tmt.forEach(t),wer=r(PLe," (mBART model)"),PLe.forEach(t),Aer=i(k),XF=n(k,"LI",{});var $Le=s(XF);cue=n($Le,"STRONG",{});var amt=s(cue);yer=r(amt,"mobilebert"),amt.forEach(t),Ler=r($Le," \u2014 "),AO=n($Le,"A",{href:!0});var nmt=s(AO);xer=r(nmt,"TFMobileBertModel"),nmt.forEach(t),ker=r($Le," (MobileBERT model)"),$Le.forEach(t),Ser=i(k),zF=n(k,"LI",{});var ILe=s(zF);fue=n(ILe,"STRONG",{});var smt=s(fue);Rer=r(smt,"mpnet"),smt.forEach(t),Ber=r(ILe," \u2014 "),yO=n(ILe,"A",{href:!0});var lmt=s(yO);Per=r(lmt,"TFMPNetModel"),lmt.forEach(t),$er=r(ILe," (MPNet model)"),ILe.forEach(t),Ier=i(k),QF=n(k,"LI",{});var qLe=s(QF);mue=n(qLe,"STRONG",{});var imt=s(mue);qer=r(imt,"mt5"),imt.forEach(t),Ner=r(qLe," \u2014 "),LO=n(qLe,"A",{href:!0});var dmt=s(LO);jer=r(dmt,"TFMT5Model"),dmt.forEach(t),Der=r(qLe," (mT5 model)"),qLe.forEach(t),Ger=i(k),WF=n(k,"LI",{});var NLe=s(WF);gue=n(NLe,"STRONG",{});var cmt=s(gue);Oer=r(cmt,"openai-gpt"),cmt.forEach(t),Ver=r(NLe," \u2014 "),xO=n(NLe,"A",{href:!0});var fmt=s(xO);Xer=r(fmt,"TFOpenAIGPTModel"),fmt.forEach(t),zer=r(NLe," (OpenAI GPT model)"),NLe.forEach(t),Qer=i(k),HF=n(k,"LI",{});var jLe=s(HF);hue=n(jLe,"STRONG",{});var mmt=s(hue);Wer=r(mmt,"pegasus"),mmt.forEach(t),Her=r(jLe," \u2014 "),kO=n(jLe,"A",{href:!0});var gmt=s(kO);Uer=r(gmt,"TFPegasusModel"),gmt.forEach(t),Jer=r(jLe," (Pegasus model)"),jLe.forEach(t),Yer=i(k),UF=n(k,"LI",{});var DLe=s(UF);uue=n(DLe,"STRONG",{});var hmt=s(uue);Ker=r(hmt,"rembert"),hmt.forEach(t),Zer=r(DLe," \u2014 "),SO=n(DLe,"A",{href:!0});var umt=s(SO);eor=r(umt,"TFRemBertModel"),umt.forEach(t),oor=r(DLe," (RemBERT model)"),DLe.forEach(t),ror=i(k),JF=n(k,"LI",{});var GLe=s(JF);pue=n(GLe,"STRONG",{});var pmt=s(pue);tor=r(pmt,"roberta"),pmt.forEach(t),aor=r(GLe," \u2014 "),RO=n(GLe,"A",{href:!0});var _mt=s(RO);nor=r(_mt,"TFRobertaModel"),_mt.forEach(t),sor=r(GLe," (RoBERTa model)"),GLe.forEach(t),lor=i(k),YF=n(k,"LI",{});var OLe=s(YF);_ue=n(OLe,"STRONG",{});var vmt=s(_ue);ior=r(vmt,"roformer"),vmt.forEach(t),dor=r(OLe," \u2014 "),BO=n(OLe,"A",{href:!0});var bmt=s(BO);cor=r(bmt,"TFRoFormerModel"),bmt.forEach(t),mor=r(OLe," (RoFormer model)"),OLe.forEach(t),gor=i(k),KF=n(k,"LI",{});var VLe=s(KF);vue=n(VLe,"STRONG",{});var Fmt=s(vue);hor=r(Fmt,"speech_to_text"),Fmt.forEach(t),uor=r(VLe," \u2014 "),PO=n(VLe,"A",{href:!0});var Tmt=s(PO);por=r(Tmt,"TFSpeech2TextModel"),Tmt.forEach(t),_or=r(VLe," (Speech2Text model)"),VLe.forEach(t),vor=i(k),ZF=n(k,"LI",{});var XLe=s(ZF);bue=n(XLe,"STRONG",{});var Mmt=s(bue);bor=r(Mmt,"t5"),Mmt.forEach(t),For=r(XLe," \u2014 "),$O=n(XLe,"A",{href:!0});var Emt=s($O);Tor=r(Emt,"TFT5Model"),Emt.forEach(t),Mor=r(XLe," (T5 model)"),XLe.forEach(t),Eor=i(k),e0=n(k,"LI",{});var zLe=s(e0);Fue=n(zLe,"STRONG",{});var Cmt=s(Fue);Cor=r(Cmt,"tapas"),Cmt.forEach(t),wor=r(zLe," \u2014 "),IO=n(zLe,"A",{href:!0});var wmt=s(IO);Aor=r(wmt,"TFTapasModel"),wmt.forEach(t),yor=r(zLe," (TAPAS model)"),zLe.forEach(t),Lor=i(k),o0=n(k,"LI",{});var QLe=s(o0);Tue=n(QLe,"STRONG",{});var Amt=s(Tue);xor=r(Amt,"transfo-xl"),Amt.forEach(t),kor=r(QLe," \u2014 "),qO=n(QLe,"A",{href:!0});var ymt=s(qO);Sor=r(ymt,"TFTransfoXLModel"),ymt.forEach(t),Ror=r(QLe," (Transformer-XL model)"),QLe.forEach(t),Bor=i(k),r0=n(k,"LI",{});var WLe=s(r0);Mue=n(WLe,"STRONG",{});var Lmt=s(Mue);Por=r(Lmt,"vit"),Lmt.forEach(t),$or=r(WLe," \u2014 "),NO=n(WLe,"A",{href:!0});var xmt=s(NO);Ior=r(xmt,"TFViTModel"),xmt.forEach(t),qor=r(WLe," (ViT model)"),WLe.forEach(t),Nor=i(k),t0=n(k,"LI",{});var HLe=s(t0);Eue=n(HLe,"STRONG",{});var kmt=s(Eue);jor=r(kmt,"vit_mae"),kmt.forEach(t),Dor=r(HLe," \u2014 "),jO=n(HLe,"A",{href:!0});var Smt=s(jO);Gor=r(Smt,"TFViTMAEModel"),Smt.forEach(t),Oor=r(HLe," (ViTMAE model)"),HLe.forEach(t),Vor=i(k),a0=n(k,"LI",{});var ULe=s(a0);Cue=n(ULe,"STRONG",{});var Rmt=s(Cue);Xor=r(Rmt,"wav2vec2"),Rmt.forEach(t),zor=r(ULe," \u2014 "),DO=n(ULe,"A",{href:!0});var Bmt=s(DO);Qor=r(Bmt,"TFWav2Vec2Model"),Bmt.forEach(t),Wor=r(ULe," (Wav2Vec2 model)"),ULe.forEach(t),Hor=i(k),n0=n(k,"LI",{});var JLe=s(n0);wue=n(JLe,"STRONG",{});var Pmt=s(wue);Uor=r(Pmt,"xlm"),Pmt.forEach(t),Jor=r(JLe," \u2014 "),GO=n(JLe,"A",{href:!0});var $mt=s(GO);Yor=r($mt,"TFXLMModel"),$mt.forEach(t),Kor=r(JLe," (XLM model)"),JLe.forEach(t),Zor=i(k),s0=n(k,"LI",{});var YLe=s(s0);Aue=n(YLe,"STRONG",{});var Imt=s(Aue);err=r(Imt,"xlm-roberta"),Imt.forEach(t),orr=r(YLe," \u2014 "),OO=n(YLe,"A",{href:!0});var qmt=s(OO);rrr=r(qmt,"TFXLMRobertaModel"),qmt.forEach(t),trr=r(YLe," (XLM-RoBERTa model)"),YLe.forEach(t),arr=i(k),l0=n(k,"LI",{});var KLe=s(l0);yue=n(KLe,"STRONG",{});var Nmt=s(yue);nrr=r(Nmt,"xlnet"),Nmt.forEach(t),srr=r(KLe," \u2014 "),VO=n(KLe,"A",{href:!0});var jmt=s(VO);lrr=r(jmt,"TFXLNetModel"),jmt.forEach(t),irr=r(KLe," (XLNet model)"),KLe.forEach(t),k.forEach(t),drr=i(ua),Lue=n(ua,"P",{});var Dmt=s(Lue);crr=r(Dmt,"Examples:"),Dmt.forEach(t),frr=i(ua),m(oA.$$.fragment,ua),ua.forEach(t),jl.forEach(t),XRe=i(c),pc=n(c,"H2",{class:!0});var e$e=s(pc);i0=n(e$e,"A",{id:!0,class:!0,href:!0});var Gmt=s(i0);xue=n(Gmt,"SPAN",{});var Omt=s(xue);m(rA.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),mrr=i(e$e),kue=n(e$e,"SPAN",{});var Vmt=s(kue);grr=r(Vmt,"TFAutoModelForPreTraining"),Vmt.forEach(t),e$e.forEach(t),zRe=i(c),Fr=n(c,"DIV",{class:!0});var Gl=s(Fr);m(tA.$$.fragment,Gl),hrr=i(Gl),_c=n(Gl,"P",{});var zU=s(_c);urr=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=n(zU,"A",{href:!0});var Xmt=s(XO);prr=r(Xmt,"from_pretrained()"),Xmt.forEach(t),_rr=r(zU," class method or the "),zO=n(zU,"A",{href:!0});var zmt=s(zO);vrr=r(zmt,"from_config()"),zmt.forEach(t),brr=r(zU,` class
method.`),zU.forEach(t),Frr=i(Gl),aA=n(Gl,"P",{});var o$e=s(aA);Trr=r(o$e,"This class cannot be instantiated directly using "),Sue=n(o$e,"CODE",{});var Qmt=s(Sue);Mrr=r(Qmt,"__init__()"),Qmt.forEach(t),Err=r(o$e," (throws an error)."),o$e.forEach(t),Crr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(nA.$$.fragment,Ol),wrr=i(Ol),Rue=n(Ol,"P",{});var Wmt=s(Rue);Arr=r(Wmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wmt.forEach(t),yrr=i(Ol),vc=n(Ol,"P",{});var QU=s(vc);Lrr=r(QU,`Note:
Loading a model from its configuration file does `),Bue=n(QU,"STRONG",{});var Hmt=s(Bue);xrr=r(Hmt,"not"),Hmt.forEach(t),krr=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(QU,"A",{href:!0});var Umt=s(QO);Srr=r(Umt,"from_pretrained()"),Umt.forEach(t),Rrr=r(QU," to load the model weights."),QU.forEach(t),Brr=i(Ol),Pue=n(Ol,"P",{});var Jmt=s(Pue);Prr=r(Jmt,"Examples:"),Jmt.forEach(t),$rr=i(Ol),m(sA.$$.fragment,Ol),Ol.forEach(t),Irr=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);m(lA.$$.fragment,pa),qrr=i(pa),$ue=n(pa,"P",{});var Ymt=s($ue);Nrr=r(Ymt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ymt.forEach(t),jrr=i(pa),_n=n(pa,"P",{});var z5=s(_n);Drr=r(z5,"The model class to instantiate is selected based on the "),Iue=n(z5,"CODE",{});var Kmt=s(Iue);Grr=r(Kmt,"model_type"),Kmt.forEach(t),Orr=r(z5,` property of the config object (either
passed as an argument or loaded from `),que=n(z5,"CODE",{});var Zmt=s(que);Vrr=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),Xrr=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(z5,"CODE",{});var egt=s(Nue);zrr=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),Qrr=r(z5,":"),z5.forEach(t),Wrr=i(pa),H=n(pa,"UL",{});var U=s(H);d0=n(U,"LI",{});var ZLe=s(d0);jue=n(ZLe,"STRONG",{});var ogt=s(jue);Hrr=r(ogt,"albert"),ogt.forEach(t),Urr=r(ZLe," \u2014 "),WO=n(ZLe,"A",{href:!0});var rgt=s(WO);Jrr=r(rgt,"TFAlbertForPreTraining"),rgt.forEach(t),Yrr=r(ZLe," (ALBERT model)"),ZLe.forEach(t),Krr=i(U),c0=n(U,"LI",{});var e7e=s(c0);Due=n(e7e,"STRONG",{});var tgt=s(Due);Zrr=r(tgt,"bart"),tgt.forEach(t),etr=r(e7e," \u2014 "),HO=n(e7e,"A",{href:!0});var agt=s(HO);otr=r(agt,"TFBartForConditionalGeneration"),agt.forEach(t),rtr=r(e7e," (BART model)"),e7e.forEach(t),ttr=i(U),f0=n(U,"LI",{});var o7e=s(f0);Gue=n(o7e,"STRONG",{});var ngt=s(Gue);atr=r(ngt,"bert"),ngt.forEach(t),ntr=r(o7e," \u2014 "),UO=n(o7e,"A",{href:!0});var sgt=s(UO);str=r(sgt,"TFBertForPreTraining"),sgt.forEach(t),ltr=r(o7e," (BERT model)"),o7e.forEach(t),itr=i(U),m0=n(U,"LI",{});var r7e=s(m0);Oue=n(r7e,"STRONG",{});var lgt=s(Oue);dtr=r(lgt,"camembert"),lgt.forEach(t),ctr=r(r7e," \u2014 "),JO=n(r7e,"A",{href:!0});var igt=s(JO);ftr=r(igt,"TFCamembertForMaskedLM"),igt.forEach(t),mtr=r(r7e," (CamemBERT model)"),r7e.forEach(t),gtr=i(U),g0=n(U,"LI",{});var t7e=s(g0);Vue=n(t7e,"STRONG",{});var dgt=s(Vue);htr=r(dgt,"ctrl"),dgt.forEach(t),utr=r(t7e," \u2014 "),YO=n(t7e,"A",{href:!0});var cgt=s(YO);ptr=r(cgt,"TFCTRLLMHeadModel"),cgt.forEach(t),_tr=r(t7e," (CTRL model)"),t7e.forEach(t),vtr=i(U),h0=n(U,"LI",{});var a7e=s(h0);Xue=n(a7e,"STRONG",{});var fgt=s(Xue);btr=r(fgt,"distilbert"),fgt.forEach(t),Ftr=r(a7e," \u2014 "),KO=n(a7e,"A",{href:!0});var mgt=s(KO);Ttr=r(mgt,"TFDistilBertForMaskedLM"),mgt.forEach(t),Mtr=r(a7e," (DistilBERT model)"),a7e.forEach(t),Etr=i(U),u0=n(U,"LI",{});var n7e=s(u0);zue=n(n7e,"STRONG",{});var ggt=s(zue);Ctr=r(ggt,"electra"),ggt.forEach(t),wtr=r(n7e," \u2014 "),ZO=n(n7e,"A",{href:!0});var hgt=s(ZO);Atr=r(hgt,"TFElectraForPreTraining"),hgt.forEach(t),ytr=r(n7e," (ELECTRA model)"),n7e.forEach(t),Ltr=i(U),p0=n(U,"LI",{});var s7e=s(p0);Que=n(s7e,"STRONG",{});var ugt=s(Que);xtr=r(ugt,"flaubert"),ugt.forEach(t),ktr=r(s7e," \u2014 "),eV=n(s7e,"A",{href:!0});var pgt=s(eV);Str=r(pgt,"TFFlaubertWithLMHeadModel"),pgt.forEach(t),Rtr=r(s7e," (FlauBERT model)"),s7e.forEach(t),Btr=i(U),_0=n(U,"LI",{});var l7e=s(_0);Wue=n(l7e,"STRONG",{});var _gt=s(Wue);Ptr=r(_gt,"funnel"),_gt.forEach(t),$tr=r(l7e," \u2014 "),oV=n(l7e,"A",{href:!0});var vgt=s(oV);Itr=r(vgt,"TFFunnelForPreTraining"),vgt.forEach(t),qtr=r(l7e," (Funnel Transformer model)"),l7e.forEach(t),Ntr=i(U),v0=n(U,"LI",{});var i7e=s(v0);Hue=n(i7e,"STRONG",{});var bgt=s(Hue);jtr=r(bgt,"gpt2"),bgt.forEach(t),Dtr=r(i7e," \u2014 "),rV=n(i7e,"A",{href:!0});var Fgt=s(rV);Gtr=r(Fgt,"TFGPT2LMHeadModel"),Fgt.forEach(t),Otr=r(i7e," (OpenAI GPT-2 model)"),i7e.forEach(t),Vtr=i(U),b0=n(U,"LI",{});var d7e=s(b0);Uue=n(d7e,"STRONG",{});var Tgt=s(Uue);Xtr=r(Tgt,"layoutlm"),Tgt.forEach(t),ztr=r(d7e," \u2014 "),tV=n(d7e,"A",{href:!0});var Mgt=s(tV);Qtr=r(Mgt,"TFLayoutLMForMaskedLM"),Mgt.forEach(t),Wtr=r(d7e," (LayoutLM model)"),d7e.forEach(t),Htr=i(U),F0=n(U,"LI",{});var c7e=s(F0);Jue=n(c7e,"STRONG",{});var Egt=s(Jue);Utr=r(Egt,"lxmert"),Egt.forEach(t),Jtr=r(c7e," \u2014 "),aV=n(c7e,"A",{href:!0});var Cgt=s(aV);Ytr=r(Cgt,"TFLxmertForPreTraining"),Cgt.forEach(t),Ktr=r(c7e," (LXMERT model)"),c7e.forEach(t),Ztr=i(U),T0=n(U,"LI",{});var f7e=s(T0);Yue=n(f7e,"STRONG",{});var wgt=s(Yue);ear=r(wgt,"mobilebert"),wgt.forEach(t),oar=r(f7e," \u2014 "),nV=n(f7e,"A",{href:!0});var Agt=s(nV);rar=r(Agt,"TFMobileBertForPreTraining"),Agt.forEach(t),tar=r(f7e," (MobileBERT model)"),f7e.forEach(t),aar=i(U),M0=n(U,"LI",{});var m7e=s(M0);Kue=n(m7e,"STRONG",{});var ygt=s(Kue);nar=r(ygt,"mpnet"),ygt.forEach(t),sar=r(m7e," \u2014 "),sV=n(m7e,"A",{href:!0});var Lgt=s(sV);lar=r(Lgt,"TFMPNetForMaskedLM"),Lgt.forEach(t),iar=r(m7e," (MPNet model)"),m7e.forEach(t),dar=i(U),E0=n(U,"LI",{});var g7e=s(E0);Zue=n(g7e,"STRONG",{});var xgt=s(Zue);car=r(xgt,"openai-gpt"),xgt.forEach(t),far=r(g7e," \u2014 "),lV=n(g7e,"A",{href:!0});var kgt=s(lV);mar=r(kgt,"TFOpenAIGPTLMHeadModel"),kgt.forEach(t),gar=r(g7e," (OpenAI GPT model)"),g7e.forEach(t),har=i(U),C0=n(U,"LI",{});var h7e=s(C0);epe=n(h7e,"STRONG",{});var Sgt=s(epe);uar=r(Sgt,"roberta"),Sgt.forEach(t),par=r(h7e," \u2014 "),iV=n(h7e,"A",{href:!0});var Rgt=s(iV);_ar=r(Rgt,"TFRobertaForMaskedLM"),Rgt.forEach(t),bar=r(h7e," (RoBERTa model)"),h7e.forEach(t),Far=i(U),w0=n(U,"LI",{});var u7e=s(w0);ope=n(u7e,"STRONG",{});var Bgt=s(ope);Tar=r(Bgt,"t5"),Bgt.forEach(t),Mar=r(u7e," \u2014 "),dV=n(u7e,"A",{href:!0});var Pgt=s(dV);Ear=r(Pgt,"TFT5ForConditionalGeneration"),Pgt.forEach(t),Car=r(u7e," (T5 model)"),u7e.forEach(t),war=i(U),A0=n(U,"LI",{});var p7e=s(A0);rpe=n(p7e,"STRONG",{});var $gt=s(rpe);Aar=r($gt,"tapas"),$gt.forEach(t),yar=r(p7e," \u2014 "),cV=n(p7e,"A",{href:!0});var Igt=s(cV);Lar=r(Igt,"TFTapasForMaskedLM"),Igt.forEach(t),xar=r(p7e," (TAPAS model)"),p7e.forEach(t),kar=i(U),y0=n(U,"LI",{});var _7e=s(y0);tpe=n(_7e,"STRONG",{});var qgt=s(tpe);Sar=r(qgt,"transfo-xl"),qgt.forEach(t),Rar=r(_7e," \u2014 "),fV=n(_7e,"A",{href:!0});var Ngt=s(fV);Bar=r(Ngt,"TFTransfoXLLMHeadModel"),Ngt.forEach(t),Par=r(_7e," (Transformer-XL model)"),_7e.forEach(t),$ar=i(U),L0=n(U,"LI",{});var v7e=s(L0);ape=n(v7e,"STRONG",{});var jgt=s(ape);Iar=r(jgt,"vit_mae"),jgt.forEach(t),qar=r(v7e," \u2014 "),mV=n(v7e,"A",{href:!0});var Dgt=s(mV);Nar=r(Dgt,"TFViTMAEForPreTraining"),Dgt.forEach(t),jar=r(v7e," (ViTMAE model)"),v7e.forEach(t),Dar=i(U),x0=n(U,"LI",{});var b7e=s(x0);npe=n(b7e,"STRONG",{});var Ggt=s(npe);Gar=r(Ggt,"xlm"),Ggt.forEach(t),Oar=r(b7e," \u2014 "),gV=n(b7e,"A",{href:!0});var Ogt=s(gV);Var=r(Ogt,"TFXLMWithLMHeadModel"),Ogt.forEach(t),Xar=r(b7e," (XLM model)"),b7e.forEach(t),zar=i(U),k0=n(U,"LI",{});var F7e=s(k0);spe=n(F7e,"STRONG",{});var Vgt=s(spe);Qar=r(Vgt,"xlm-roberta"),Vgt.forEach(t),War=r(F7e," \u2014 "),hV=n(F7e,"A",{href:!0});var Xgt=s(hV);Har=r(Xgt,"TFXLMRobertaForMaskedLM"),Xgt.forEach(t),Uar=r(F7e," (XLM-RoBERTa model)"),F7e.forEach(t),Jar=i(U),S0=n(U,"LI",{});var T7e=s(S0);lpe=n(T7e,"STRONG",{});var zgt=s(lpe);Yar=r(zgt,"xlnet"),zgt.forEach(t),Kar=r(T7e," \u2014 "),uV=n(T7e,"A",{href:!0});var Qgt=s(uV);Zar=r(Qgt,"TFXLNetLMHeadModel"),Qgt.forEach(t),enr=r(T7e," (XLNet model)"),T7e.forEach(t),U.forEach(t),onr=i(pa),ipe=n(pa,"P",{});var Wgt=s(ipe);rnr=r(Wgt,"Examples:"),Wgt.forEach(t),tnr=i(pa),m(iA.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),QRe=i(c),bc=n(c,"H2",{class:!0});var r$e=s(bc);R0=n(r$e,"A",{id:!0,class:!0,href:!0});var Hgt=s(R0);dpe=n(Hgt,"SPAN",{});var Ugt=s(dpe);m(dA.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),anr=i(r$e),cpe=n(r$e,"SPAN",{});var Jgt=s(cpe);nnr=r(Jgt,"TFAutoModelForCausalLM"),Jgt.forEach(t),r$e.forEach(t),WRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(cA.$$.fragment,Vl),snr=i(Vl),Fc=n(Vl,"P",{});var WU=s(Fc);lnr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pV=n(WU,"A",{href:!0});var Ygt=s(pV);inr=r(Ygt,"from_pretrained()"),Ygt.forEach(t),dnr=r(WU," class method or the "),_V=n(WU,"A",{href:!0});var Kgt=s(_V);cnr=r(Kgt,"from_config()"),Kgt.forEach(t),fnr=r(WU,` class
method.`),WU.forEach(t),mnr=i(Vl),fA=n(Vl,"P",{});var t$e=s(fA);gnr=r(t$e,"This class cannot be instantiated directly using "),fpe=n(t$e,"CODE",{});var Zgt=s(fpe);hnr=r(Zgt,"__init__()"),Zgt.forEach(t),unr=r(t$e," (throws an error)."),t$e.forEach(t),pnr=i(Vl),ut=n(Vl,"DIV",{class:!0});var Xl=s(ut);m(mA.$$.fragment,Xl),_nr=i(Xl),mpe=n(Xl,"P",{});var eht=s(mpe);vnr=r(eht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eht.forEach(t),bnr=i(Xl),Tc=n(Xl,"P",{});var HU=s(Tc);Fnr=r(HU,`Note:
Loading a model from its configuration file does `),gpe=n(HU,"STRONG",{});var oht=s(gpe);Tnr=r(oht,"not"),oht.forEach(t),Mnr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(HU,"A",{href:!0});var rht=s(vV);Enr=r(rht,"from_pretrained()"),rht.forEach(t),Cnr=r(HU," to load the model weights."),HU.forEach(t),wnr=i(Xl),hpe=n(Xl,"P",{});var tht=s(hpe);Anr=r(tht,"Examples:"),tht.forEach(t),ynr=i(Xl),m(gA.$$.fragment,Xl),Xl.forEach(t),Lnr=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);m(hA.$$.fragment,_a),xnr=i(_a),upe=n(_a,"P",{});var aht=s(upe);knr=r(aht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aht.forEach(t),Snr=i(_a),vn=n(_a,"P",{});var Q5=s(vn);Rnr=r(Q5,"The model class to instantiate is selected based on the "),ppe=n(Q5,"CODE",{});var nht=s(ppe);Bnr=r(nht,"model_type"),nht.forEach(t),Pnr=r(Q5,` property of the config object (either
passed as an argument or loaded from `),_pe=n(Q5,"CODE",{});var sht=s(_pe);$nr=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),Inr=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(Q5,"CODE",{});var lht=s(vpe);qnr=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),Nnr=r(Q5,":"),Q5.forEach(t),jnr=i(_a),ce=n(_a,"UL",{});var he=s(ce);B0=n(he,"LI",{});var M7e=s(B0);bpe=n(M7e,"STRONG",{});var iht=s(bpe);Dnr=r(iht,"bert"),iht.forEach(t),Gnr=r(M7e," \u2014 "),bV=n(M7e,"A",{href:!0});var dht=s(bV);Onr=r(dht,"TFBertLMHeadModel"),dht.forEach(t),Vnr=r(M7e," (BERT model)"),M7e.forEach(t),Xnr=i(he),P0=n(he,"LI",{});var E7e=s(P0);Fpe=n(E7e,"STRONG",{});var cht=s(Fpe);znr=r(cht,"camembert"),cht.forEach(t),Qnr=r(E7e," \u2014 "),FV=n(E7e,"A",{href:!0});var fht=s(FV);Wnr=r(fht,"TFCamembertForCausalLM"),fht.forEach(t),Hnr=r(E7e," (CamemBERT model)"),E7e.forEach(t),Unr=i(he),$0=n(he,"LI",{});var C7e=s($0);Tpe=n(C7e,"STRONG",{});var mht=s(Tpe);Jnr=r(mht,"ctrl"),mht.forEach(t),Ynr=r(C7e," \u2014 "),TV=n(C7e,"A",{href:!0});var ght=s(TV);Knr=r(ght,"TFCTRLLMHeadModel"),ght.forEach(t),Znr=r(C7e," (CTRL model)"),C7e.forEach(t),esr=i(he),I0=n(he,"LI",{});var w7e=s(I0);Mpe=n(w7e,"STRONG",{});var hht=s(Mpe);osr=r(hht,"gpt2"),hht.forEach(t),rsr=r(w7e," \u2014 "),MV=n(w7e,"A",{href:!0});var uht=s(MV);tsr=r(uht,"TFGPT2LMHeadModel"),uht.forEach(t),asr=r(w7e," (OpenAI GPT-2 model)"),w7e.forEach(t),nsr=i(he),q0=n(he,"LI",{});var A7e=s(q0);Epe=n(A7e,"STRONG",{});var pht=s(Epe);ssr=r(pht,"gptj"),pht.forEach(t),lsr=r(A7e," \u2014 "),EV=n(A7e,"A",{href:!0});var _ht=s(EV);isr=r(_ht,"TFGPTJForCausalLM"),_ht.forEach(t),dsr=r(A7e," (GPT-J model)"),A7e.forEach(t),csr=i(he),N0=n(he,"LI",{});var y7e=s(N0);Cpe=n(y7e,"STRONG",{});var vht=s(Cpe);fsr=r(vht,"openai-gpt"),vht.forEach(t),msr=r(y7e," \u2014 "),CV=n(y7e,"A",{href:!0});var bht=s(CV);gsr=r(bht,"TFOpenAIGPTLMHeadModel"),bht.forEach(t),hsr=r(y7e," (OpenAI GPT model)"),y7e.forEach(t),usr=i(he),j0=n(he,"LI",{});var L7e=s(j0);wpe=n(L7e,"STRONG",{});var Fht=s(wpe);psr=r(Fht,"rembert"),Fht.forEach(t),_sr=r(L7e," \u2014 "),wV=n(L7e,"A",{href:!0});var Tht=s(wV);vsr=r(Tht,"TFRemBertForCausalLM"),Tht.forEach(t),bsr=r(L7e," (RemBERT model)"),L7e.forEach(t),Fsr=i(he),D0=n(he,"LI",{});var x7e=s(D0);Ape=n(x7e,"STRONG",{});var Mht=s(Ape);Tsr=r(Mht,"roberta"),Mht.forEach(t),Msr=r(x7e," \u2014 "),AV=n(x7e,"A",{href:!0});var Eht=s(AV);Esr=r(Eht,"TFRobertaForCausalLM"),Eht.forEach(t),Csr=r(x7e," (RoBERTa model)"),x7e.forEach(t),wsr=i(he),G0=n(he,"LI",{});var k7e=s(G0);ype=n(k7e,"STRONG",{});var Cht=s(ype);Asr=r(Cht,"roformer"),Cht.forEach(t),ysr=r(k7e," \u2014 "),yV=n(k7e,"A",{href:!0});var wht=s(yV);Lsr=r(wht,"TFRoFormerForCausalLM"),wht.forEach(t),xsr=r(k7e," (RoFormer model)"),k7e.forEach(t),ksr=i(he),O0=n(he,"LI",{});var S7e=s(O0);Lpe=n(S7e,"STRONG",{});var Aht=s(Lpe);Ssr=r(Aht,"transfo-xl"),Aht.forEach(t),Rsr=r(S7e," \u2014 "),LV=n(S7e,"A",{href:!0});var yht=s(LV);Bsr=r(yht,"TFTransfoXLLMHeadModel"),yht.forEach(t),Psr=r(S7e," (Transformer-XL model)"),S7e.forEach(t),$sr=i(he),V0=n(he,"LI",{});var R7e=s(V0);xpe=n(R7e,"STRONG",{});var Lht=s(xpe);Isr=r(Lht,"xlm"),Lht.forEach(t),qsr=r(R7e," \u2014 "),xV=n(R7e,"A",{href:!0});var xht=s(xV);Nsr=r(xht,"TFXLMWithLMHeadModel"),xht.forEach(t),jsr=r(R7e," (XLM model)"),R7e.forEach(t),Dsr=i(he),X0=n(he,"LI",{});var B7e=s(X0);kpe=n(B7e,"STRONG",{});var kht=s(kpe);Gsr=r(kht,"xlnet"),kht.forEach(t),Osr=r(B7e," \u2014 "),kV=n(B7e,"A",{href:!0});var Sht=s(kV);Vsr=r(Sht,"TFXLNetLMHeadModel"),Sht.forEach(t),Xsr=r(B7e," (XLNet model)"),B7e.forEach(t),he.forEach(t),zsr=i(_a),Spe=n(_a,"P",{});var Rht=s(Spe);Qsr=r(Rht,"Examples:"),Rht.forEach(t),Wsr=i(_a),m(uA.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),HRe=i(c),Mc=n(c,"H2",{class:!0});var a$e=s(Mc);z0=n(a$e,"A",{id:!0,class:!0,href:!0});var Bht=s(z0);Rpe=n(Bht,"SPAN",{});var Pht=s(Rpe);m(pA.$$.fragment,Pht),Pht.forEach(t),Bht.forEach(t),Hsr=i(a$e),Bpe=n(a$e,"SPAN",{});var $ht=s(Bpe);Usr=r($ht,"TFAutoModelForImageClassification"),$ht.forEach(t),a$e.forEach(t),URe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(_A.$$.fragment,zl),Jsr=i(zl),Ec=n(zl,"P",{});var UU=s(Ec);Ysr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SV=n(UU,"A",{href:!0});var Iht=s(SV);Ksr=r(Iht,"from_pretrained()"),Iht.forEach(t),Zsr=r(UU," class method or the "),RV=n(UU,"A",{href:!0});var qht=s(RV);elr=r(qht,"from_config()"),qht.forEach(t),olr=r(UU,` class
method.`),UU.forEach(t),rlr=i(zl),vA=n(zl,"P",{});var n$e=s(vA);tlr=r(n$e,"This class cannot be instantiated directly using "),Ppe=n(n$e,"CODE",{});var Nht=s(Ppe);alr=r(Nht,"__init__()"),Nht.forEach(t),nlr=r(n$e," (throws an error)."),n$e.forEach(t),slr=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);m(bA.$$.fragment,Ql),llr=i(Ql),$pe=n(Ql,"P",{});var jht=s($pe);ilr=r(jht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jht.forEach(t),dlr=i(Ql),Cc=n(Ql,"P",{});var JU=s(Cc);clr=r(JU,`Note:
Loading a model from its configuration file does `),Ipe=n(JU,"STRONG",{});var Dht=s(Ipe);flr=r(Dht,"not"),Dht.forEach(t),mlr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(JU,"A",{href:!0});var Ght=s(BV);glr=r(Ght,"from_pretrained()"),Ght.forEach(t),hlr=r(JU," to load the model weights."),JU.forEach(t),ulr=i(Ql),qpe=n(Ql,"P",{});var Oht=s(qpe);plr=r(Oht,"Examples:"),Oht.forEach(t),_lr=i(Ql),m(FA.$$.fragment,Ql),Ql.forEach(t),vlr=i(zl),_o=n(zl,"DIV",{class:!0});var va=s(_o);m(TA.$$.fragment,va),blr=i(va),Npe=n(va,"P",{});var Vht=s(Npe);Flr=r(Vht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vht.forEach(t),Tlr=i(va),bn=n(va,"P",{});var W5=s(bn);Mlr=r(W5,"The model class to instantiate is selected based on the "),jpe=n(W5,"CODE",{});var Xht=s(jpe);Elr=r(Xht,"model_type"),Xht.forEach(t),Clr=r(W5,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(W5,"CODE",{});var zht=s(Dpe);wlr=r(zht,"pretrained_model_name_or_path"),zht.forEach(t),Alr=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(W5,"CODE",{});var Qht=s(Gpe);ylr=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),Llr=r(W5,":"),W5.forEach(t),xlr=i(va),MA=n(va,"UL",{});var s$e=s(MA);Q0=n(s$e,"LI",{});var P7e=s(Q0);Ope=n(P7e,"STRONG",{});var Wht=s(Ope);klr=r(Wht,"convnext"),Wht.forEach(t),Slr=r(P7e," \u2014 "),PV=n(P7e,"A",{href:!0});var Hht=s(PV);Rlr=r(Hht,"TFConvNextForImageClassification"),Hht.forEach(t),Blr=r(P7e," (ConvNext model)"),P7e.forEach(t),Plr=i(s$e),W0=n(s$e,"LI",{});var $7e=s(W0);Vpe=n($7e,"STRONG",{});var Uht=s(Vpe);$lr=r(Uht,"vit"),Uht.forEach(t),Ilr=r($7e," \u2014 "),$V=n($7e,"A",{href:!0});var Jht=s($V);qlr=r(Jht,"TFViTForImageClassification"),Jht.forEach(t),Nlr=r($7e," (ViT model)"),$7e.forEach(t),s$e.forEach(t),jlr=i(va),Xpe=n(va,"P",{});var Yht=s(Xpe);Dlr=r(Yht,"Examples:"),Yht.forEach(t),Glr=i(va),m(EA.$$.fragment,va),va.forEach(t),zl.forEach(t),JRe=i(c),wc=n(c,"H2",{class:!0});var l$e=s(wc);H0=n(l$e,"A",{id:!0,class:!0,href:!0});var Kht=s(H0);zpe=n(Kht,"SPAN",{});var Zht=s(zpe);m(CA.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),Olr=i(l$e),Qpe=n(l$e,"SPAN",{});var eut=s(Qpe);Vlr=r(eut,"TFAutoModelForMaskedLM"),eut.forEach(t),l$e.forEach(t),YRe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(wA.$$.fragment,Wl),Xlr=i(Wl),Ac=n(Wl,"P",{});var YU=s(Ac);zlr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IV=n(YU,"A",{href:!0});var out=s(IV);Qlr=r(out,"from_pretrained()"),out.forEach(t),Wlr=r(YU," class method or the "),qV=n(YU,"A",{href:!0});var rut=s(qV);Hlr=r(rut,"from_config()"),rut.forEach(t),Ulr=r(YU,` class
method.`),YU.forEach(t),Jlr=i(Wl),AA=n(Wl,"P",{});var i$e=s(AA);Ylr=r(i$e,"This class cannot be instantiated directly using "),Wpe=n(i$e,"CODE",{});var tut=s(Wpe);Klr=r(tut,"__init__()"),tut.forEach(t),Zlr=r(i$e," (throws an error)."),i$e.forEach(t),eir=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);m(yA.$$.fragment,Hl),oir=i(Hl),Hpe=n(Hl,"P",{});var aut=s(Hpe);rir=r(aut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aut.forEach(t),tir=i(Hl),yc=n(Hl,"P",{});var KU=s(yc);air=r(KU,`Note:
Loading a model from its configuration file does `),Upe=n(KU,"STRONG",{});var nut=s(Upe);nir=r(nut,"not"),nut.forEach(t),sir=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(KU,"A",{href:!0});var sut=s(NV);lir=r(sut,"from_pretrained()"),sut.forEach(t),iir=r(KU," to load the model weights."),KU.forEach(t),dir=i(Hl),Jpe=n(Hl,"P",{});var lut=s(Jpe);cir=r(lut,"Examples:"),lut.forEach(t),fir=i(Hl),m(LA.$$.fragment,Hl),Hl.forEach(t),mir=i(Wl),vo=n(Wl,"DIV",{class:!0});var ba=s(vo);m(xA.$$.fragment,ba),gir=i(ba),Ype=n(ba,"P",{});var iut=s(Ype);hir=r(iut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iut.forEach(t),uir=i(ba),Fn=n(ba,"P",{});var H5=s(Fn);pir=r(H5,"The model class to instantiate is selected based on the "),Kpe=n(H5,"CODE",{});var dut=s(Kpe);_ir=r(dut,"model_type"),dut.forEach(t),vir=r(H5,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(H5,"CODE",{});var cut=s(Zpe);bir=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),Fir=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(H5,"CODE",{});var fut=s(e_e);Tir=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Mir=r(H5,":"),H5.forEach(t),Eir=i(ba),J=n(ba,"UL",{});var ee=s(J);U0=n(ee,"LI",{});var I7e=s(U0);o_e=n(I7e,"STRONG",{});var mut=s(o_e);Cir=r(mut,"albert"),mut.forEach(t),wir=r(I7e," \u2014 "),jV=n(I7e,"A",{href:!0});var gut=s(jV);Air=r(gut,"TFAlbertForMaskedLM"),gut.forEach(t),yir=r(I7e," (ALBERT model)"),I7e.forEach(t),Lir=i(ee),J0=n(ee,"LI",{});var q7e=s(J0);r_e=n(q7e,"STRONG",{});var hut=s(r_e);xir=r(hut,"bert"),hut.forEach(t),kir=r(q7e," \u2014 "),DV=n(q7e,"A",{href:!0});var uut=s(DV);Sir=r(uut,"TFBertForMaskedLM"),uut.forEach(t),Rir=r(q7e," (BERT model)"),q7e.forEach(t),Bir=i(ee),Y0=n(ee,"LI",{});var N7e=s(Y0);t_e=n(N7e,"STRONG",{});var put=s(t_e);Pir=r(put,"camembert"),put.forEach(t),$ir=r(N7e," \u2014 "),GV=n(N7e,"A",{href:!0});var _ut=s(GV);Iir=r(_ut,"TFCamembertForMaskedLM"),_ut.forEach(t),qir=r(N7e," (CamemBERT model)"),N7e.forEach(t),Nir=i(ee),K0=n(ee,"LI",{});var j7e=s(K0);a_e=n(j7e,"STRONG",{});var vut=s(a_e);jir=r(vut,"convbert"),vut.forEach(t),Dir=r(j7e," \u2014 "),OV=n(j7e,"A",{href:!0});var but=s(OV);Gir=r(but,"TFConvBertForMaskedLM"),but.forEach(t),Oir=r(j7e," (ConvBERT model)"),j7e.forEach(t),Vir=i(ee),Z0=n(ee,"LI",{});var D7e=s(Z0);n_e=n(D7e,"STRONG",{});var Fut=s(n_e);Xir=r(Fut,"deberta"),Fut.forEach(t),zir=r(D7e," \u2014 "),VV=n(D7e,"A",{href:!0});var Tut=s(VV);Qir=r(Tut,"TFDebertaForMaskedLM"),Tut.forEach(t),Wir=r(D7e," (DeBERTa model)"),D7e.forEach(t),Hir=i(ee),eT=n(ee,"LI",{});var G7e=s(eT);s_e=n(G7e,"STRONG",{});var Mut=s(s_e);Uir=r(Mut,"deberta-v2"),Mut.forEach(t),Jir=r(G7e," \u2014 "),XV=n(G7e,"A",{href:!0});var Eut=s(XV);Yir=r(Eut,"TFDebertaV2ForMaskedLM"),Eut.forEach(t),Kir=r(G7e," (DeBERTa-v2 model)"),G7e.forEach(t),Zir=i(ee),oT=n(ee,"LI",{});var O7e=s(oT);l_e=n(O7e,"STRONG",{});var Cut=s(l_e);edr=r(Cut,"distilbert"),Cut.forEach(t),odr=r(O7e," \u2014 "),zV=n(O7e,"A",{href:!0});var wut=s(zV);rdr=r(wut,"TFDistilBertForMaskedLM"),wut.forEach(t),tdr=r(O7e," (DistilBERT model)"),O7e.forEach(t),adr=i(ee),rT=n(ee,"LI",{});var V7e=s(rT);i_e=n(V7e,"STRONG",{});var Aut=s(i_e);ndr=r(Aut,"electra"),Aut.forEach(t),sdr=r(V7e," \u2014 "),QV=n(V7e,"A",{href:!0});var yut=s(QV);ldr=r(yut,"TFElectraForMaskedLM"),yut.forEach(t),idr=r(V7e," (ELECTRA model)"),V7e.forEach(t),ddr=i(ee),tT=n(ee,"LI",{});var X7e=s(tT);d_e=n(X7e,"STRONG",{});var Lut=s(d_e);cdr=r(Lut,"flaubert"),Lut.forEach(t),fdr=r(X7e," \u2014 "),WV=n(X7e,"A",{href:!0});var xut=s(WV);mdr=r(xut,"TFFlaubertWithLMHeadModel"),xut.forEach(t),gdr=r(X7e," (FlauBERT model)"),X7e.forEach(t),hdr=i(ee),aT=n(ee,"LI",{});var z7e=s(aT);c_e=n(z7e,"STRONG",{});var kut=s(c_e);udr=r(kut,"funnel"),kut.forEach(t),pdr=r(z7e," \u2014 "),HV=n(z7e,"A",{href:!0});var Sut=s(HV);_dr=r(Sut,"TFFunnelForMaskedLM"),Sut.forEach(t),vdr=r(z7e," (Funnel Transformer model)"),z7e.forEach(t),bdr=i(ee),nT=n(ee,"LI",{});var Q7e=s(nT);f_e=n(Q7e,"STRONG",{});var Rut=s(f_e);Fdr=r(Rut,"layoutlm"),Rut.forEach(t),Tdr=r(Q7e," \u2014 "),UV=n(Q7e,"A",{href:!0});var But=s(UV);Mdr=r(But,"TFLayoutLMForMaskedLM"),But.forEach(t),Edr=r(Q7e," (LayoutLM model)"),Q7e.forEach(t),Cdr=i(ee),sT=n(ee,"LI",{});var W7e=s(sT);m_e=n(W7e,"STRONG",{});var Put=s(m_e);wdr=r(Put,"longformer"),Put.forEach(t),Adr=r(W7e," \u2014 "),JV=n(W7e,"A",{href:!0});var $ut=s(JV);ydr=r($ut,"TFLongformerForMaskedLM"),$ut.forEach(t),Ldr=r(W7e," (Longformer model)"),W7e.forEach(t),xdr=i(ee),lT=n(ee,"LI",{});var H7e=s(lT);g_e=n(H7e,"STRONG",{});var Iut=s(g_e);kdr=r(Iut,"mobilebert"),Iut.forEach(t),Sdr=r(H7e," \u2014 "),YV=n(H7e,"A",{href:!0});var qut=s(YV);Rdr=r(qut,"TFMobileBertForMaskedLM"),qut.forEach(t),Bdr=r(H7e," (MobileBERT model)"),H7e.forEach(t),Pdr=i(ee),iT=n(ee,"LI",{});var U7e=s(iT);h_e=n(U7e,"STRONG",{});var Nut=s(h_e);$dr=r(Nut,"mpnet"),Nut.forEach(t),Idr=r(U7e," \u2014 "),KV=n(U7e,"A",{href:!0});var jut=s(KV);qdr=r(jut,"TFMPNetForMaskedLM"),jut.forEach(t),Ndr=r(U7e," (MPNet model)"),U7e.forEach(t),jdr=i(ee),dT=n(ee,"LI",{});var J7e=s(dT);u_e=n(J7e,"STRONG",{});var Dut=s(u_e);Ddr=r(Dut,"rembert"),Dut.forEach(t),Gdr=r(J7e," \u2014 "),ZV=n(J7e,"A",{href:!0});var Gut=s(ZV);Odr=r(Gut,"TFRemBertForMaskedLM"),Gut.forEach(t),Vdr=r(J7e," (RemBERT model)"),J7e.forEach(t),Xdr=i(ee),cT=n(ee,"LI",{});var Y7e=s(cT);p_e=n(Y7e,"STRONG",{});var Out=s(p_e);zdr=r(Out,"roberta"),Out.forEach(t),Qdr=r(Y7e," \u2014 "),eX=n(Y7e,"A",{href:!0});var Vut=s(eX);Wdr=r(Vut,"TFRobertaForMaskedLM"),Vut.forEach(t),Hdr=r(Y7e," (RoBERTa model)"),Y7e.forEach(t),Udr=i(ee),fT=n(ee,"LI",{});var K7e=s(fT);__e=n(K7e,"STRONG",{});var Xut=s(__e);Jdr=r(Xut,"roformer"),Xut.forEach(t),Ydr=r(K7e," \u2014 "),oX=n(K7e,"A",{href:!0});var zut=s(oX);Kdr=r(zut,"TFRoFormerForMaskedLM"),zut.forEach(t),Zdr=r(K7e," (RoFormer model)"),K7e.forEach(t),ecr=i(ee),mT=n(ee,"LI",{});var Z7e=s(mT);v_e=n(Z7e,"STRONG",{});var Qut=s(v_e);ocr=r(Qut,"tapas"),Qut.forEach(t),rcr=r(Z7e," \u2014 "),rX=n(Z7e,"A",{href:!0});var Wut=s(rX);tcr=r(Wut,"TFTapasForMaskedLM"),Wut.forEach(t),acr=r(Z7e," (TAPAS model)"),Z7e.forEach(t),ncr=i(ee),gT=n(ee,"LI",{});var exe=s(gT);b_e=n(exe,"STRONG",{});var Hut=s(b_e);scr=r(Hut,"xlm"),Hut.forEach(t),lcr=r(exe," \u2014 "),tX=n(exe,"A",{href:!0});var Uut=s(tX);icr=r(Uut,"TFXLMWithLMHeadModel"),Uut.forEach(t),dcr=r(exe," (XLM model)"),exe.forEach(t),ccr=i(ee),hT=n(ee,"LI",{});var oxe=s(hT);F_e=n(oxe,"STRONG",{});var Jut=s(F_e);fcr=r(Jut,"xlm-roberta"),Jut.forEach(t),mcr=r(oxe," \u2014 "),aX=n(oxe,"A",{href:!0});var Yut=s(aX);gcr=r(Yut,"TFXLMRobertaForMaskedLM"),Yut.forEach(t),hcr=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),ee.forEach(t),ucr=i(ba),T_e=n(ba,"P",{});var Kut=s(T_e);pcr=r(Kut,"Examples:"),Kut.forEach(t),_cr=i(ba),m(kA.$$.fragment,ba),ba.forEach(t),Wl.forEach(t),KRe=i(c),Lc=n(c,"H2",{class:!0});var d$e=s(Lc);uT=n(d$e,"A",{id:!0,class:!0,href:!0});var Zut=s(uT);M_e=n(Zut,"SPAN",{});var ept=s(M_e);m(SA.$$.fragment,ept),ept.forEach(t),Zut.forEach(t),vcr=i(d$e),E_e=n(d$e,"SPAN",{});var opt=s(E_e);bcr=r(opt,"TFAutoModelForSeq2SeqLM"),opt.forEach(t),d$e.forEach(t),ZRe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(RA.$$.fragment,Ul),Fcr=i(Ul),xc=n(Ul,"P",{});var ZU=s(xc);Tcr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nX=n(ZU,"A",{href:!0});var rpt=s(nX);Mcr=r(rpt,"from_pretrained()"),rpt.forEach(t),Ecr=r(ZU," class method or the "),sX=n(ZU,"A",{href:!0});var tpt=s(sX);Ccr=r(tpt,"from_config()"),tpt.forEach(t),wcr=r(ZU,` class
method.`),ZU.forEach(t),Acr=i(Ul),BA=n(Ul,"P",{});var c$e=s(BA);ycr=r(c$e,"This class cannot be instantiated directly using "),C_e=n(c$e,"CODE",{});var apt=s(C_e);Lcr=r(apt,"__init__()"),apt.forEach(t),xcr=r(c$e," (throws an error)."),c$e.forEach(t),kcr=i(Ul),vt=n(Ul,"DIV",{class:!0});var Jl=s(vt);m(PA.$$.fragment,Jl),Scr=i(Jl),w_e=n(Jl,"P",{});var npt=s(w_e);Rcr=r(npt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),npt.forEach(t),Bcr=i(Jl),kc=n(Jl,"P",{});var eJ=s(kc);Pcr=r(eJ,`Note:
Loading a model from its configuration file does `),A_e=n(eJ,"STRONG",{});var spt=s(A_e);$cr=r(spt,"not"),spt.forEach(t),Icr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(eJ,"A",{href:!0});var lpt=s(lX);qcr=r(lpt,"from_pretrained()"),lpt.forEach(t),Ncr=r(eJ," to load the model weights."),eJ.forEach(t),jcr=i(Jl),y_e=n(Jl,"P",{});var ipt=s(y_e);Dcr=r(ipt,"Examples:"),ipt.forEach(t),Gcr=i(Jl),m($A.$$.fragment,Jl),Jl.forEach(t),Ocr=i(Ul),bo=n(Ul,"DIV",{class:!0});var Fa=s(bo);m(IA.$$.fragment,Fa),Vcr=i(Fa),L_e=n(Fa,"P",{});var dpt=s(L_e);Xcr=r(dpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dpt.forEach(t),zcr=i(Fa),Tn=n(Fa,"P",{});var U5=s(Tn);Qcr=r(U5,"The model class to instantiate is selected based on the "),x_e=n(U5,"CODE",{});var cpt=s(x_e);Wcr=r(cpt,"model_type"),cpt.forEach(t),Hcr=r(U5,` property of the config object (either
passed as an argument or loaded from `),k_e=n(U5,"CODE",{});var fpt=s(k_e);Ucr=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),Jcr=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(U5,"CODE",{});var mpt=s(S_e);Ycr=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),Kcr=r(U5,":"),U5.forEach(t),Zcr=i(Fa),_e=n(Fa,"UL",{});var we=s(_e);pT=n(we,"LI",{});var rxe=s(pT);R_e=n(rxe,"STRONG",{});var gpt=s(R_e);efr=r(gpt,"bart"),gpt.forEach(t),ofr=r(rxe," \u2014 "),iX=n(rxe,"A",{href:!0});var hpt=s(iX);rfr=r(hpt,"TFBartForConditionalGeneration"),hpt.forEach(t),tfr=r(rxe," (BART model)"),rxe.forEach(t),afr=i(we),_T=n(we,"LI",{});var txe=s(_T);B_e=n(txe,"STRONG",{});var upt=s(B_e);nfr=r(upt,"blenderbot"),upt.forEach(t),sfr=r(txe," \u2014 "),dX=n(txe,"A",{href:!0});var ppt=s(dX);lfr=r(ppt,"TFBlenderbotForConditionalGeneration"),ppt.forEach(t),ifr=r(txe," (Blenderbot model)"),txe.forEach(t),dfr=i(we),vT=n(we,"LI",{});var axe=s(vT);P_e=n(axe,"STRONG",{});var _pt=s(P_e);cfr=r(_pt,"blenderbot-small"),_pt.forEach(t),ffr=r(axe," \u2014 "),cX=n(axe,"A",{href:!0});var vpt=s(cX);mfr=r(vpt,"TFBlenderbotSmallForConditionalGeneration"),vpt.forEach(t),gfr=r(axe," (BlenderbotSmall model)"),axe.forEach(t),hfr=i(we),bT=n(we,"LI",{});var nxe=s(bT);$_e=n(nxe,"STRONG",{});var bpt=s($_e);ufr=r(bpt,"encoder-decoder"),bpt.forEach(t),pfr=r(nxe," \u2014 "),fX=n(nxe,"A",{href:!0});var Fpt=s(fX);_fr=r(Fpt,"TFEncoderDecoderModel"),Fpt.forEach(t),vfr=r(nxe," (Encoder decoder model)"),nxe.forEach(t),bfr=i(we),FT=n(we,"LI",{});var sxe=s(FT);I_e=n(sxe,"STRONG",{});var Tpt=s(I_e);Ffr=r(Tpt,"led"),Tpt.forEach(t),Tfr=r(sxe," \u2014 "),mX=n(sxe,"A",{href:!0});var Mpt=s(mX);Mfr=r(Mpt,"TFLEDForConditionalGeneration"),Mpt.forEach(t),Efr=r(sxe," (LED model)"),sxe.forEach(t),Cfr=i(we),TT=n(we,"LI",{});var lxe=s(TT);q_e=n(lxe,"STRONG",{});var Ept=s(q_e);wfr=r(Ept,"marian"),Ept.forEach(t),Afr=r(lxe," \u2014 "),gX=n(lxe,"A",{href:!0});var Cpt=s(gX);yfr=r(Cpt,"TFMarianMTModel"),Cpt.forEach(t),Lfr=r(lxe," (Marian model)"),lxe.forEach(t),xfr=i(we),MT=n(we,"LI",{});var ixe=s(MT);N_e=n(ixe,"STRONG",{});var wpt=s(N_e);kfr=r(wpt,"mbart"),wpt.forEach(t),Sfr=r(ixe," \u2014 "),hX=n(ixe,"A",{href:!0});var Apt=s(hX);Rfr=r(Apt,"TFMBartForConditionalGeneration"),Apt.forEach(t),Bfr=r(ixe," (mBART model)"),ixe.forEach(t),Pfr=i(we),ET=n(we,"LI",{});var dxe=s(ET);j_e=n(dxe,"STRONG",{});var ypt=s(j_e);$fr=r(ypt,"mt5"),ypt.forEach(t),Ifr=r(dxe," \u2014 "),uX=n(dxe,"A",{href:!0});var Lpt=s(uX);qfr=r(Lpt,"TFMT5ForConditionalGeneration"),Lpt.forEach(t),Nfr=r(dxe," (mT5 model)"),dxe.forEach(t),jfr=i(we),CT=n(we,"LI",{});var cxe=s(CT);D_e=n(cxe,"STRONG",{});var xpt=s(D_e);Dfr=r(xpt,"pegasus"),xpt.forEach(t),Gfr=r(cxe," \u2014 "),pX=n(cxe,"A",{href:!0});var kpt=s(pX);Ofr=r(kpt,"TFPegasusForConditionalGeneration"),kpt.forEach(t),Vfr=r(cxe," (Pegasus model)"),cxe.forEach(t),Xfr=i(we),wT=n(we,"LI",{});var fxe=s(wT);G_e=n(fxe,"STRONG",{});var Spt=s(G_e);zfr=r(Spt,"t5"),Spt.forEach(t),Qfr=r(fxe," \u2014 "),_X=n(fxe,"A",{href:!0});var Rpt=s(_X);Wfr=r(Rpt,"TFT5ForConditionalGeneration"),Rpt.forEach(t),Hfr=r(fxe," (T5 model)"),fxe.forEach(t),we.forEach(t),Ufr=i(Fa),O_e=n(Fa,"P",{});var Bpt=s(O_e);Jfr=r(Bpt,"Examples:"),Bpt.forEach(t),Yfr=i(Fa),m(qA.$$.fragment,Fa),Fa.forEach(t),Ul.forEach(t),eBe=i(c),Sc=n(c,"H2",{class:!0});var f$e=s(Sc);AT=n(f$e,"A",{id:!0,class:!0,href:!0});var Ppt=s(AT);V_e=n(Ppt,"SPAN",{});var $pt=s(V_e);m(NA.$$.fragment,$pt),$pt.forEach(t),Ppt.forEach(t),Kfr=i(f$e),X_e=n(f$e,"SPAN",{});var Ipt=s(X_e);Zfr=r(Ipt,"TFAutoModelForSequenceClassification"),Ipt.forEach(t),f$e.forEach(t),oBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(jA.$$.fragment,Yl),emr=i(Yl),Rc=n(Yl,"P",{});var oJ=s(Rc);omr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=n(oJ,"A",{href:!0});var qpt=s(vX);rmr=r(qpt,"from_pretrained()"),qpt.forEach(t),tmr=r(oJ," class method or the "),bX=n(oJ,"A",{href:!0});var Npt=s(bX);amr=r(Npt,"from_config()"),Npt.forEach(t),nmr=r(oJ,` class
method.`),oJ.forEach(t),smr=i(Yl),DA=n(Yl,"P",{});var m$e=s(DA);lmr=r(m$e,"This class cannot be instantiated directly using "),z_e=n(m$e,"CODE",{});var jpt=s(z_e);imr=r(jpt,"__init__()"),jpt.forEach(t),dmr=r(m$e," (throws an error)."),m$e.forEach(t),cmr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(GA.$$.fragment,Kl),fmr=i(Kl),Q_e=n(Kl,"P",{});var Dpt=s(Q_e);mmr=r(Dpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dpt.forEach(t),gmr=i(Kl),Bc=n(Kl,"P",{});var rJ=s(Bc);hmr=r(rJ,`Note:
Loading a model from its configuration file does `),W_e=n(rJ,"STRONG",{});var Gpt=s(W_e);umr=r(Gpt,"not"),Gpt.forEach(t),pmr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(rJ,"A",{href:!0});var Opt=s(FX);_mr=r(Opt,"from_pretrained()"),Opt.forEach(t),vmr=r(rJ," to load the model weights."),rJ.forEach(t),bmr=i(Kl),H_e=n(Kl,"P",{});var Vpt=s(H_e);Fmr=r(Vpt,"Examples:"),Vpt.forEach(t),Tmr=i(Kl),m(OA.$$.fragment,Kl),Kl.forEach(t),Mmr=i(Yl),Fo=n(Yl,"DIV",{class:!0});var Ta=s(Fo);m(VA.$$.fragment,Ta),Emr=i(Ta),U_e=n(Ta,"P",{});var Xpt=s(U_e);Cmr=r(Xpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xpt.forEach(t),wmr=i(Ta),Mn=n(Ta,"P",{});var J5=s(Mn);Amr=r(J5,"The model class to instantiate is selected based on the "),J_e=n(J5,"CODE",{});var zpt=s(J_e);ymr=r(zpt,"model_type"),zpt.forEach(t),Lmr=r(J5,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(J5,"CODE",{});var Qpt=s(Y_e);xmr=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),kmr=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(J5,"CODE",{});var Wpt=s(K_e);Smr=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),Rmr=r(J5,":"),J5.forEach(t),Bmr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);yT=n(Q,"LI",{});var mxe=s(yT);Z_e=n(mxe,"STRONG",{});var Hpt=s(Z_e);Pmr=r(Hpt,"albert"),Hpt.forEach(t),$mr=r(mxe," \u2014 "),TX=n(mxe,"A",{href:!0});var Upt=s(TX);Imr=r(Upt,"TFAlbertForSequenceClassification"),Upt.forEach(t),qmr=r(mxe," (ALBERT model)"),mxe.forEach(t),Nmr=i(Q),LT=n(Q,"LI",{});var gxe=s(LT);eve=n(gxe,"STRONG",{});var Jpt=s(eve);jmr=r(Jpt,"bert"),Jpt.forEach(t),Dmr=r(gxe," \u2014 "),MX=n(gxe,"A",{href:!0});var Ypt=s(MX);Gmr=r(Ypt,"TFBertForSequenceClassification"),Ypt.forEach(t),Omr=r(gxe," (BERT model)"),gxe.forEach(t),Vmr=i(Q),xT=n(Q,"LI",{});var hxe=s(xT);ove=n(hxe,"STRONG",{});var Kpt=s(ove);Xmr=r(Kpt,"camembert"),Kpt.forEach(t),zmr=r(hxe," \u2014 "),EX=n(hxe,"A",{href:!0});var Zpt=s(EX);Qmr=r(Zpt,"TFCamembertForSequenceClassification"),Zpt.forEach(t),Wmr=r(hxe," (CamemBERT model)"),hxe.forEach(t),Hmr=i(Q),kT=n(Q,"LI",{});var uxe=s(kT);rve=n(uxe,"STRONG",{});var e_t=s(rve);Umr=r(e_t,"convbert"),e_t.forEach(t),Jmr=r(uxe," \u2014 "),CX=n(uxe,"A",{href:!0});var o_t=s(CX);Ymr=r(o_t,"TFConvBertForSequenceClassification"),o_t.forEach(t),Kmr=r(uxe," (ConvBERT model)"),uxe.forEach(t),Zmr=i(Q),ST=n(Q,"LI",{});var pxe=s(ST);tve=n(pxe,"STRONG",{});var r_t=s(tve);egr=r(r_t,"ctrl"),r_t.forEach(t),ogr=r(pxe," \u2014 "),wX=n(pxe,"A",{href:!0});var t_t=s(wX);rgr=r(t_t,"TFCTRLForSequenceClassification"),t_t.forEach(t),tgr=r(pxe," (CTRL model)"),pxe.forEach(t),agr=i(Q),RT=n(Q,"LI",{});var _xe=s(RT);ave=n(_xe,"STRONG",{});var a_t=s(ave);ngr=r(a_t,"deberta"),a_t.forEach(t),sgr=r(_xe," \u2014 "),AX=n(_xe,"A",{href:!0});var n_t=s(AX);lgr=r(n_t,"TFDebertaForSequenceClassification"),n_t.forEach(t),igr=r(_xe," (DeBERTa model)"),_xe.forEach(t),dgr=i(Q),BT=n(Q,"LI",{});var vxe=s(BT);nve=n(vxe,"STRONG",{});var s_t=s(nve);cgr=r(s_t,"deberta-v2"),s_t.forEach(t),fgr=r(vxe," \u2014 "),yX=n(vxe,"A",{href:!0});var l_t=s(yX);mgr=r(l_t,"TFDebertaV2ForSequenceClassification"),l_t.forEach(t),ggr=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),hgr=i(Q),PT=n(Q,"LI",{});var bxe=s(PT);sve=n(bxe,"STRONG",{});var i_t=s(sve);ugr=r(i_t,"distilbert"),i_t.forEach(t),pgr=r(bxe," \u2014 "),LX=n(bxe,"A",{href:!0});var d_t=s(LX);_gr=r(d_t,"TFDistilBertForSequenceClassification"),d_t.forEach(t),vgr=r(bxe," (DistilBERT model)"),bxe.forEach(t),bgr=i(Q),$T=n(Q,"LI",{});var Fxe=s($T);lve=n(Fxe,"STRONG",{});var c_t=s(lve);Fgr=r(c_t,"electra"),c_t.forEach(t),Tgr=r(Fxe," \u2014 "),xX=n(Fxe,"A",{href:!0});var f_t=s(xX);Mgr=r(f_t,"TFElectraForSequenceClassification"),f_t.forEach(t),Egr=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),Cgr=i(Q),IT=n(Q,"LI",{});var Txe=s(IT);ive=n(Txe,"STRONG",{});var m_t=s(ive);wgr=r(m_t,"flaubert"),m_t.forEach(t),Agr=r(Txe," \u2014 "),kX=n(Txe,"A",{href:!0});var g_t=s(kX);ygr=r(g_t,"TFFlaubertForSequenceClassification"),g_t.forEach(t),Lgr=r(Txe," (FlauBERT model)"),Txe.forEach(t),xgr=i(Q),qT=n(Q,"LI",{});var Mxe=s(qT);dve=n(Mxe,"STRONG",{});var h_t=s(dve);kgr=r(h_t,"funnel"),h_t.forEach(t),Sgr=r(Mxe," \u2014 "),SX=n(Mxe,"A",{href:!0});var u_t=s(SX);Rgr=r(u_t,"TFFunnelForSequenceClassification"),u_t.forEach(t),Bgr=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),Pgr=i(Q),NT=n(Q,"LI",{});var Exe=s(NT);cve=n(Exe,"STRONG",{});var p_t=s(cve);$gr=r(p_t,"gpt2"),p_t.forEach(t),Igr=r(Exe," \u2014 "),RX=n(Exe,"A",{href:!0});var __t=s(RX);qgr=r(__t,"TFGPT2ForSequenceClassification"),__t.forEach(t),Ngr=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),jgr=i(Q),jT=n(Q,"LI",{});var Cxe=s(jT);fve=n(Cxe,"STRONG",{});var v_t=s(fve);Dgr=r(v_t,"gptj"),v_t.forEach(t),Ggr=r(Cxe," \u2014 "),BX=n(Cxe,"A",{href:!0});var b_t=s(BX);Ogr=r(b_t,"TFGPTJForSequenceClassification"),b_t.forEach(t),Vgr=r(Cxe," (GPT-J model)"),Cxe.forEach(t),Xgr=i(Q),DT=n(Q,"LI",{});var wxe=s(DT);mve=n(wxe,"STRONG",{});var F_t=s(mve);zgr=r(F_t,"layoutlm"),F_t.forEach(t),Qgr=r(wxe," \u2014 "),PX=n(wxe,"A",{href:!0});var T_t=s(PX);Wgr=r(T_t,"TFLayoutLMForSequenceClassification"),T_t.forEach(t),Hgr=r(wxe," (LayoutLM model)"),wxe.forEach(t),Ugr=i(Q),GT=n(Q,"LI",{});var Axe=s(GT);gve=n(Axe,"STRONG",{});var M_t=s(gve);Jgr=r(M_t,"longformer"),M_t.forEach(t),Ygr=r(Axe," \u2014 "),$X=n(Axe,"A",{href:!0});var E_t=s($X);Kgr=r(E_t,"TFLongformerForSequenceClassification"),E_t.forEach(t),Zgr=r(Axe," (Longformer model)"),Axe.forEach(t),ehr=i(Q),OT=n(Q,"LI",{});var yxe=s(OT);hve=n(yxe,"STRONG",{});var C_t=s(hve);ohr=r(C_t,"mobilebert"),C_t.forEach(t),rhr=r(yxe," \u2014 "),IX=n(yxe,"A",{href:!0});var w_t=s(IX);thr=r(w_t,"TFMobileBertForSequenceClassification"),w_t.forEach(t),ahr=r(yxe," (MobileBERT model)"),yxe.forEach(t),nhr=i(Q),VT=n(Q,"LI",{});var Lxe=s(VT);uve=n(Lxe,"STRONG",{});var A_t=s(uve);shr=r(A_t,"mpnet"),A_t.forEach(t),lhr=r(Lxe," \u2014 "),qX=n(Lxe,"A",{href:!0});var y_t=s(qX);ihr=r(y_t,"TFMPNetForSequenceClassification"),y_t.forEach(t),dhr=r(Lxe," (MPNet model)"),Lxe.forEach(t),chr=i(Q),XT=n(Q,"LI",{});var xxe=s(XT);pve=n(xxe,"STRONG",{});var L_t=s(pve);fhr=r(L_t,"openai-gpt"),L_t.forEach(t),mhr=r(xxe," \u2014 "),NX=n(xxe,"A",{href:!0});var x_t=s(NX);ghr=r(x_t,"TFOpenAIGPTForSequenceClassification"),x_t.forEach(t),hhr=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),uhr=i(Q),zT=n(Q,"LI",{});var kxe=s(zT);_ve=n(kxe,"STRONG",{});var k_t=s(_ve);phr=r(k_t,"rembert"),k_t.forEach(t),_hr=r(kxe," \u2014 "),jX=n(kxe,"A",{href:!0});var S_t=s(jX);vhr=r(S_t,"TFRemBertForSequenceClassification"),S_t.forEach(t),bhr=r(kxe," (RemBERT model)"),kxe.forEach(t),Fhr=i(Q),QT=n(Q,"LI",{});var Sxe=s(QT);vve=n(Sxe,"STRONG",{});var R_t=s(vve);Thr=r(R_t,"roberta"),R_t.forEach(t),Mhr=r(Sxe," \u2014 "),DX=n(Sxe,"A",{href:!0});var B_t=s(DX);Ehr=r(B_t,"TFRobertaForSequenceClassification"),B_t.forEach(t),Chr=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),whr=i(Q),WT=n(Q,"LI",{});var Rxe=s(WT);bve=n(Rxe,"STRONG",{});var P_t=s(bve);Ahr=r(P_t,"roformer"),P_t.forEach(t),yhr=r(Rxe," \u2014 "),GX=n(Rxe,"A",{href:!0});var $_t=s(GX);Lhr=r($_t,"TFRoFormerForSequenceClassification"),$_t.forEach(t),xhr=r(Rxe," (RoFormer model)"),Rxe.forEach(t),khr=i(Q),HT=n(Q,"LI",{});var Bxe=s(HT);Fve=n(Bxe,"STRONG",{});var I_t=s(Fve);Shr=r(I_t,"tapas"),I_t.forEach(t),Rhr=r(Bxe," \u2014 "),OX=n(Bxe,"A",{href:!0});var q_t=s(OX);Bhr=r(q_t,"TFTapasForSequenceClassification"),q_t.forEach(t),Phr=r(Bxe," (TAPAS model)"),Bxe.forEach(t),$hr=i(Q),UT=n(Q,"LI",{});var Pxe=s(UT);Tve=n(Pxe,"STRONG",{});var N_t=s(Tve);Ihr=r(N_t,"transfo-xl"),N_t.forEach(t),qhr=r(Pxe," \u2014 "),VX=n(Pxe,"A",{href:!0});var j_t=s(VX);Nhr=r(j_t,"TFTransfoXLForSequenceClassification"),j_t.forEach(t),jhr=r(Pxe," (Transformer-XL model)"),Pxe.forEach(t),Dhr=i(Q),JT=n(Q,"LI",{});var $xe=s(JT);Mve=n($xe,"STRONG",{});var D_t=s(Mve);Ghr=r(D_t,"xlm"),D_t.forEach(t),Ohr=r($xe," \u2014 "),XX=n($xe,"A",{href:!0});var G_t=s(XX);Vhr=r(G_t,"TFXLMForSequenceClassification"),G_t.forEach(t),Xhr=r($xe," (XLM model)"),$xe.forEach(t),zhr=i(Q),YT=n(Q,"LI",{});var Ixe=s(YT);Eve=n(Ixe,"STRONG",{});var O_t=s(Eve);Qhr=r(O_t,"xlm-roberta"),O_t.forEach(t),Whr=r(Ixe," \u2014 "),zX=n(Ixe,"A",{href:!0});var V_t=s(zX);Hhr=r(V_t,"TFXLMRobertaForSequenceClassification"),V_t.forEach(t),Uhr=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),Jhr=i(Q),KT=n(Q,"LI",{});var qxe=s(KT);Cve=n(qxe,"STRONG",{});var X_t=s(Cve);Yhr=r(X_t,"xlnet"),X_t.forEach(t),Khr=r(qxe," \u2014 "),QX=n(qxe,"A",{href:!0});var z_t=s(QX);Zhr=r(z_t,"TFXLNetForSequenceClassification"),z_t.forEach(t),eur=r(qxe," (XLNet model)"),qxe.forEach(t),Q.forEach(t),our=i(Ta),wve=n(Ta,"P",{});var Q_t=s(wve);rur=r(Q_t,"Examples:"),Q_t.forEach(t),tur=i(Ta),m(XA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),rBe=i(c),Pc=n(c,"H2",{class:!0});var g$e=s(Pc);ZT=n(g$e,"A",{id:!0,class:!0,href:!0});var W_t=s(ZT);Ave=n(W_t,"SPAN",{});var H_t=s(Ave);m(zA.$$.fragment,H_t),H_t.forEach(t),W_t.forEach(t),aur=i(g$e),yve=n(g$e,"SPAN",{});var U_t=s(yve);nur=r(U_t,"TFAutoModelForMultipleChoice"),U_t.forEach(t),g$e.forEach(t),tBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(QA.$$.fragment,Zl),sur=i(Zl),$c=n(Zl,"P",{});var tJ=s($c);lur=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=n(tJ,"A",{href:!0});var J_t=s(WX);iur=r(J_t,"from_pretrained()"),J_t.forEach(t),dur=r(tJ," class method or the "),HX=n(tJ,"A",{href:!0});var Y_t=s(HX);cur=r(Y_t,"from_config()"),Y_t.forEach(t),fur=r(tJ,` class
method.`),tJ.forEach(t),mur=i(Zl),WA=n(Zl,"P",{});var h$e=s(WA);gur=r(h$e,"This class cannot be instantiated directly using "),Lve=n(h$e,"CODE",{});var K_t=s(Lve);hur=r(K_t,"__init__()"),K_t.forEach(t),uur=r(h$e," (throws an error)."),h$e.forEach(t),pur=i(Zl),Ft=n(Zl,"DIV",{class:!0});var ei=s(Ft);m(HA.$$.fragment,ei),_ur=i(ei),xve=n(ei,"P",{});var Z_t=s(xve);vur=r(Z_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z_t.forEach(t),bur=i(ei),Ic=n(ei,"P",{});var aJ=s(Ic);Fur=r(aJ,`Note:
Loading a model from its configuration file does `),kve=n(aJ,"STRONG",{});var evt=s(kve);Tur=r(evt,"not"),evt.forEach(t),Mur=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(aJ,"A",{href:!0});var ovt=s(UX);Eur=r(ovt,"from_pretrained()"),ovt.forEach(t),Cur=r(aJ," to load the model weights."),aJ.forEach(t),wur=i(ei),Sve=n(ei,"P",{});var rvt=s(Sve);Aur=r(rvt,"Examples:"),rvt.forEach(t),yur=i(ei),m(UA.$$.fragment,ei),ei.forEach(t),Lur=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(JA.$$.fragment,Ma),xur=i(Ma),Rve=n(Ma,"P",{});var tvt=s(Rve);kur=r(tvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tvt.forEach(t),Sur=i(Ma),En=n(Ma,"P",{});var Y5=s(En);Rur=r(Y5,"The model class to instantiate is selected based on the "),Bve=n(Y5,"CODE",{});var avt=s(Bve);Bur=r(avt,"model_type"),avt.forEach(t),Pur=r(Y5,` property of the config object (either
passed as an argument or loaded from `),Pve=n(Y5,"CODE",{});var nvt=s(Pve);$ur=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),Iur=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(Y5,"CODE",{});var svt=s($ve);qur=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),Nur=r(Y5,":"),Y5.forEach(t),jur=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);e8=n(le,"LI",{});var Nxe=s(e8);Ive=n(Nxe,"STRONG",{});var lvt=s(Ive);Dur=r(lvt,"albert"),lvt.forEach(t),Gur=r(Nxe," \u2014 "),JX=n(Nxe,"A",{href:!0});var ivt=s(JX);Our=r(ivt,"TFAlbertForMultipleChoice"),ivt.forEach(t),Vur=r(Nxe," (ALBERT model)"),Nxe.forEach(t),Xur=i(le),o8=n(le,"LI",{});var jxe=s(o8);qve=n(jxe,"STRONG",{});var dvt=s(qve);zur=r(dvt,"bert"),dvt.forEach(t),Qur=r(jxe," \u2014 "),YX=n(jxe,"A",{href:!0});var cvt=s(YX);Wur=r(cvt,"TFBertForMultipleChoice"),cvt.forEach(t),Hur=r(jxe," (BERT model)"),jxe.forEach(t),Uur=i(le),r8=n(le,"LI",{});var Dxe=s(r8);Nve=n(Dxe,"STRONG",{});var fvt=s(Nve);Jur=r(fvt,"camembert"),fvt.forEach(t),Yur=r(Dxe," \u2014 "),KX=n(Dxe,"A",{href:!0});var mvt=s(KX);Kur=r(mvt,"TFCamembertForMultipleChoice"),mvt.forEach(t),Zur=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),epr=i(le),t8=n(le,"LI",{});var Gxe=s(t8);jve=n(Gxe,"STRONG",{});var gvt=s(jve);opr=r(gvt,"convbert"),gvt.forEach(t),rpr=r(Gxe," \u2014 "),ZX=n(Gxe,"A",{href:!0});var hvt=s(ZX);tpr=r(hvt,"TFConvBertForMultipleChoice"),hvt.forEach(t),apr=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),npr=i(le),a8=n(le,"LI",{});var Oxe=s(a8);Dve=n(Oxe,"STRONG",{});var uvt=s(Dve);spr=r(uvt,"distilbert"),uvt.forEach(t),lpr=r(Oxe," \u2014 "),ez=n(Oxe,"A",{href:!0});var pvt=s(ez);ipr=r(pvt,"TFDistilBertForMultipleChoice"),pvt.forEach(t),dpr=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),cpr=i(le),n8=n(le,"LI",{});var Vxe=s(n8);Gve=n(Vxe,"STRONG",{});var _vt=s(Gve);fpr=r(_vt,"electra"),_vt.forEach(t),mpr=r(Vxe," \u2014 "),oz=n(Vxe,"A",{href:!0});var vvt=s(oz);gpr=r(vvt,"TFElectraForMultipleChoice"),vvt.forEach(t),hpr=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),upr=i(le),s8=n(le,"LI",{});var Xxe=s(s8);Ove=n(Xxe,"STRONG",{});var bvt=s(Ove);ppr=r(bvt,"flaubert"),bvt.forEach(t),_pr=r(Xxe," \u2014 "),rz=n(Xxe,"A",{href:!0});var Fvt=s(rz);vpr=r(Fvt,"TFFlaubertForMultipleChoice"),Fvt.forEach(t),bpr=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),Fpr=i(le),l8=n(le,"LI",{});var zxe=s(l8);Vve=n(zxe,"STRONG",{});var Tvt=s(Vve);Tpr=r(Tvt,"funnel"),Tvt.forEach(t),Mpr=r(zxe," \u2014 "),tz=n(zxe,"A",{href:!0});var Mvt=s(tz);Epr=r(Mvt,"TFFunnelForMultipleChoice"),Mvt.forEach(t),Cpr=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),wpr=i(le),i8=n(le,"LI",{});var Qxe=s(i8);Xve=n(Qxe,"STRONG",{});var Evt=s(Xve);Apr=r(Evt,"longformer"),Evt.forEach(t),ypr=r(Qxe," \u2014 "),az=n(Qxe,"A",{href:!0});var Cvt=s(az);Lpr=r(Cvt,"TFLongformerForMultipleChoice"),Cvt.forEach(t),xpr=r(Qxe," (Longformer model)"),Qxe.forEach(t),kpr=i(le),d8=n(le,"LI",{});var Wxe=s(d8);zve=n(Wxe,"STRONG",{});var wvt=s(zve);Spr=r(wvt,"mobilebert"),wvt.forEach(t),Rpr=r(Wxe," \u2014 "),nz=n(Wxe,"A",{href:!0});var Avt=s(nz);Bpr=r(Avt,"TFMobileBertForMultipleChoice"),Avt.forEach(t),Ppr=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),$pr=i(le),c8=n(le,"LI",{});var Hxe=s(c8);Qve=n(Hxe,"STRONG",{});var yvt=s(Qve);Ipr=r(yvt,"mpnet"),yvt.forEach(t),qpr=r(Hxe," \u2014 "),sz=n(Hxe,"A",{href:!0});var Lvt=s(sz);Npr=r(Lvt,"TFMPNetForMultipleChoice"),Lvt.forEach(t),jpr=r(Hxe," (MPNet model)"),Hxe.forEach(t),Dpr=i(le),f8=n(le,"LI",{});var Uxe=s(f8);Wve=n(Uxe,"STRONG",{});var xvt=s(Wve);Gpr=r(xvt,"rembert"),xvt.forEach(t),Opr=r(Uxe," \u2014 "),lz=n(Uxe,"A",{href:!0});var kvt=s(lz);Vpr=r(kvt,"TFRemBertForMultipleChoice"),kvt.forEach(t),Xpr=r(Uxe," (RemBERT model)"),Uxe.forEach(t),zpr=i(le),m8=n(le,"LI",{});var Jxe=s(m8);Hve=n(Jxe,"STRONG",{});var Svt=s(Hve);Qpr=r(Svt,"roberta"),Svt.forEach(t),Wpr=r(Jxe," \u2014 "),iz=n(Jxe,"A",{href:!0});var Rvt=s(iz);Hpr=r(Rvt,"TFRobertaForMultipleChoice"),Rvt.forEach(t),Upr=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),Jpr=i(le),g8=n(le,"LI",{});var Yxe=s(g8);Uve=n(Yxe,"STRONG",{});var Bvt=s(Uve);Ypr=r(Bvt,"roformer"),Bvt.forEach(t),Kpr=r(Yxe," \u2014 "),dz=n(Yxe,"A",{href:!0});var Pvt=s(dz);Zpr=r(Pvt,"TFRoFormerForMultipleChoice"),Pvt.forEach(t),e_r=r(Yxe," (RoFormer model)"),Yxe.forEach(t),o_r=i(le),h8=n(le,"LI",{});var Kxe=s(h8);Jve=n(Kxe,"STRONG",{});var $vt=s(Jve);r_r=r($vt,"xlm"),$vt.forEach(t),t_r=r(Kxe," \u2014 "),cz=n(Kxe,"A",{href:!0});var Ivt=s(cz);a_r=r(Ivt,"TFXLMForMultipleChoice"),Ivt.forEach(t),n_r=r(Kxe," (XLM model)"),Kxe.forEach(t),s_r=i(le),u8=n(le,"LI",{});var Zxe=s(u8);Yve=n(Zxe,"STRONG",{});var qvt=s(Yve);l_r=r(qvt,"xlm-roberta"),qvt.forEach(t),i_r=r(Zxe," \u2014 "),fz=n(Zxe,"A",{href:!0});var Nvt=s(fz);d_r=r(Nvt,"TFXLMRobertaForMultipleChoice"),Nvt.forEach(t),c_r=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),f_r=i(le),p8=n(le,"LI",{});var e9e=s(p8);Kve=n(e9e,"STRONG",{});var jvt=s(Kve);m_r=r(jvt,"xlnet"),jvt.forEach(t),g_r=r(e9e," \u2014 "),mz=n(e9e,"A",{href:!0});var Dvt=s(mz);h_r=r(Dvt,"TFXLNetForMultipleChoice"),Dvt.forEach(t),u_r=r(e9e," (XLNet model)"),e9e.forEach(t),le.forEach(t),p_r=i(Ma),Zve=n(Ma,"P",{});var Gvt=s(Zve);__r=r(Gvt,"Examples:"),Gvt.forEach(t),v_r=i(Ma),m(YA.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),aBe=i(c),qc=n(c,"H2",{class:!0});var u$e=s(qc);_8=n(u$e,"A",{id:!0,class:!0,href:!0});var Ovt=s(_8);e1e=n(Ovt,"SPAN",{});var Vvt=s(e1e);m(KA.$$.fragment,Vvt),Vvt.forEach(t),Ovt.forEach(t),b_r=i(u$e),o1e=n(u$e,"SPAN",{});var Xvt=s(o1e);F_r=r(Xvt,"TFAutoModelForTableQuestionAnswering"),Xvt.forEach(t),u$e.forEach(t),nBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ZA.$$.fragment,oi),T_r=i(oi),Nc=n(oi,"P",{});var nJ=s(Nc);M_r=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=n(nJ,"A",{href:!0});var zvt=s(gz);E_r=r(zvt,"from_pretrained()"),zvt.forEach(t),C_r=r(nJ," class method or the "),hz=n(nJ,"A",{href:!0});var Qvt=s(hz);w_r=r(Qvt,"from_config()"),Qvt.forEach(t),A_r=r(nJ,` class
method.`),nJ.forEach(t),y_r=i(oi),ey=n(oi,"P",{});var p$e=s(ey);L_r=r(p$e,"This class cannot be instantiated directly using "),r1e=n(p$e,"CODE",{});var Wvt=s(r1e);x_r=r(Wvt,"__init__()"),Wvt.forEach(t),k_r=r(p$e," (throws an error)."),p$e.forEach(t),S_r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(oy.$$.fragment,ri),R_r=i(ri),t1e=n(ri,"P",{});var Hvt=s(t1e);B_r=r(Hvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hvt.forEach(t),P_r=i(ri),jc=n(ri,"P",{});var sJ=s(jc);$_r=r(sJ,`Note:
Loading a model from its configuration file does `),a1e=n(sJ,"STRONG",{});var Uvt=s(a1e);I_r=r(Uvt,"not"),Uvt.forEach(t),q_r=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(sJ,"A",{href:!0});var Jvt=s(uz);N_r=r(Jvt,"from_pretrained()"),Jvt.forEach(t),j_r=r(sJ," to load the model weights."),sJ.forEach(t),D_r=i(ri),n1e=n(ri,"P",{});var Yvt=s(n1e);G_r=r(Yvt,"Examples:"),Yvt.forEach(t),O_r=i(ri),m(ry.$$.fragment,ri),ri.forEach(t),V_r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(ty.$$.fragment,Ea),X_r=i(Ea),s1e=n(Ea,"P",{});var Kvt=s(s1e);z_r=r(Kvt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Kvt.forEach(t),Q_r=i(Ea),Cn=n(Ea,"P",{});var K5=s(Cn);W_r=r(K5,"The model class to instantiate is selected based on the "),l1e=n(K5,"CODE",{});var Zvt=s(l1e);H_r=r(Zvt,"model_type"),Zvt.forEach(t),U_r=r(K5,` property of the config object (either
passed as an argument or loaded from `),i1e=n(K5,"CODE",{});var e1t=s(i1e);J_r=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),Y_r=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(K5,"CODE",{});var o1t=s(d1e);K_r=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),Z_r=r(K5,":"),K5.forEach(t),evr=i(Ea),c1e=n(Ea,"UL",{});var r1t=s(c1e);v8=n(r1t,"LI",{});var o9e=s(v8);f1e=n(o9e,"STRONG",{});var t1t=s(f1e);ovr=r(t1t,"tapas"),t1t.forEach(t),rvr=r(o9e," \u2014 "),pz=n(o9e,"A",{href:!0});var a1t=s(pz);tvr=r(a1t,"TFTapasForQuestionAnswering"),a1t.forEach(t),avr=r(o9e," (TAPAS model)"),o9e.forEach(t),r1t.forEach(t),nvr=i(Ea),m1e=n(Ea,"P",{});var n1t=s(m1e);svr=r(n1t,"Examples:"),n1t.forEach(t),lvr=i(Ea),m(ay.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),sBe=i(c),Dc=n(c,"H2",{class:!0});var _$e=s(Dc);b8=n(_$e,"A",{id:!0,class:!0,href:!0});var s1t=s(b8);g1e=n(s1t,"SPAN",{});var l1t=s(g1e);m(ny.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),ivr=i(_$e),h1e=n(_$e,"SPAN",{});var i1t=s(h1e);dvr=r(i1t,"TFAutoModelForTokenClassification"),i1t.forEach(t),_$e.forEach(t),lBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(sy.$$.fragment,ti),cvr=i(ti),Gc=n(ti,"P",{});var lJ=s(Gc);fvr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_z=n(lJ,"A",{href:!0});var d1t=s(_z);mvr=r(d1t,"from_pretrained()"),d1t.forEach(t),gvr=r(lJ," class method or the "),vz=n(lJ,"A",{href:!0});var c1t=s(vz);hvr=r(c1t,"from_config()"),c1t.forEach(t),uvr=r(lJ,` class
method.`),lJ.forEach(t),pvr=i(ti),ly=n(ti,"P",{});var v$e=s(ly);_vr=r(v$e,"This class cannot be instantiated directly using "),u1e=n(v$e,"CODE",{});var f1t=s(u1e);vvr=r(f1t,"__init__()"),f1t.forEach(t),bvr=r(v$e," (throws an error)."),v$e.forEach(t),Fvr=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(iy.$$.fragment,ai),Tvr=i(ai),p1e=n(ai,"P",{});var m1t=s(p1e);Mvr=r(m1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m1t.forEach(t),Evr=i(ai),Oc=n(ai,"P",{});var iJ=s(Oc);Cvr=r(iJ,`Note:
Loading a model from its configuration file does `),_1e=n(iJ,"STRONG",{});var g1t=s(_1e);wvr=r(g1t,"not"),g1t.forEach(t),Avr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(iJ,"A",{href:!0});var h1t=s(bz);yvr=r(h1t,"from_pretrained()"),h1t.forEach(t),Lvr=r(iJ," to load the model weights."),iJ.forEach(t),xvr=i(ai),v1e=n(ai,"P",{});var u1t=s(v1e);kvr=r(u1t,"Examples:"),u1t.forEach(t),Svr=i(ai),m(dy.$$.fragment,ai),ai.forEach(t),Rvr=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(cy.$$.fragment,Ca),Bvr=i(Ca),b1e=n(Ca,"P",{});var p1t=s(b1e);Pvr=r(p1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p1t.forEach(t),$vr=i(Ca),wn=n(Ca,"P",{});var Z5=s(wn);Ivr=r(Z5,"The model class to instantiate is selected based on the "),F1e=n(Z5,"CODE",{});var _1t=s(F1e);qvr=r(_1t,"model_type"),_1t.forEach(t),Nvr=r(Z5,` property of the config object (either
passed as an argument or loaded from `),T1e=n(Z5,"CODE",{});var v1t=s(T1e);jvr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Dvr=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(Z5,"CODE",{});var b1t=s(M1e);Gvr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Ovr=r(Z5,":"),Z5.forEach(t),Vvr=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);F8=n(oe,"LI",{});var r9e=s(F8);E1e=n(r9e,"STRONG",{});var F1t=s(E1e);Xvr=r(F1t,"albert"),F1t.forEach(t),zvr=r(r9e," \u2014 "),Fz=n(r9e,"A",{href:!0});var T1t=s(Fz);Qvr=r(T1t,"TFAlbertForTokenClassification"),T1t.forEach(t),Wvr=r(r9e," (ALBERT model)"),r9e.forEach(t),Hvr=i(oe),T8=n(oe,"LI",{});var t9e=s(T8);C1e=n(t9e,"STRONG",{});var M1t=s(C1e);Uvr=r(M1t,"bert"),M1t.forEach(t),Jvr=r(t9e," \u2014 "),Tz=n(t9e,"A",{href:!0});var E1t=s(Tz);Yvr=r(E1t,"TFBertForTokenClassification"),E1t.forEach(t),Kvr=r(t9e," (BERT model)"),t9e.forEach(t),Zvr=i(oe),M8=n(oe,"LI",{});var a9e=s(M8);w1e=n(a9e,"STRONG",{});var C1t=s(w1e);e1r=r(C1t,"camembert"),C1t.forEach(t),o1r=r(a9e," \u2014 "),Mz=n(a9e,"A",{href:!0});var w1t=s(Mz);r1r=r(w1t,"TFCamembertForTokenClassification"),w1t.forEach(t),t1r=r(a9e," (CamemBERT model)"),a9e.forEach(t),a1r=i(oe),E8=n(oe,"LI",{});var n9e=s(E8);A1e=n(n9e,"STRONG",{});var A1t=s(A1e);n1r=r(A1t,"convbert"),A1t.forEach(t),s1r=r(n9e," \u2014 "),Ez=n(n9e,"A",{href:!0});var y1t=s(Ez);l1r=r(y1t,"TFConvBertForTokenClassification"),y1t.forEach(t),i1r=r(n9e," (ConvBERT model)"),n9e.forEach(t),d1r=i(oe),C8=n(oe,"LI",{});var s9e=s(C8);y1e=n(s9e,"STRONG",{});var L1t=s(y1e);c1r=r(L1t,"deberta"),L1t.forEach(t),f1r=r(s9e," \u2014 "),Cz=n(s9e,"A",{href:!0});var x1t=s(Cz);m1r=r(x1t,"TFDebertaForTokenClassification"),x1t.forEach(t),g1r=r(s9e," (DeBERTa model)"),s9e.forEach(t),h1r=i(oe),w8=n(oe,"LI",{});var l9e=s(w8);L1e=n(l9e,"STRONG",{});var k1t=s(L1e);u1r=r(k1t,"deberta-v2"),k1t.forEach(t),p1r=r(l9e," \u2014 "),wz=n(l9e,"A",{href:!0});var S1t=s(wz);_1r=r(S1t,"TFDebertaV2ForTokenClassification"),S1t.forEach(t),v1r=r(l9e," (DeBERTa-v2 model)"),l9e.forEach(t),b1r=i(oe),A8=n(oe,"LI",{});var i9e=s(A8);x1e=n(i9e,"STRONG",{});var R1t=s(x1e);F1r=r(R1t,"distilbert"),R1t.forEach(t),T1r=r(i9e," \u2014 "),Az=n(i9e,"A",{href:!0});var B1t=s(Az);M1r=r(B1t,"TFDistilBertForTokenClassification"),B1t.forEach(t),E1r=r(i9e," (DistilBERT model)"),i9e.forEach(t),C1r=i(oe),y8=n(oe,"LI",{});var d9e=s(y8);k1e=n(d9e,"STRONG",{});var P1t=s(k1e);w1r=r(P1t,"electra"),P1t.forEach(t),A1r=r(d9e," \u2014 "),yz=n(d9e,"A",{href:!0});var $1t=s(yz);y1r=r($1t,"TFElectraForTokenClassification"),$1t.forEach(t),L1r=r(d9e," (ELECTRA model)"),d9e.forEach(t),x1r=i(oe),L8=n(oe,"LI",{});var c9e=s(L8);S1e=n(c9e,"STRONG",{});var I1t=s(S1e);k1r=r(I1t,"flaubert"),I1t.forEach(t),S1r=r(c9e," \u2014 "),Lz=n(c9e,"A",{href:!0});var q1t=s(Lz);R1r=r(q1t,"TFFlaubertForTokenClassification"),q1t.forEach(t),B1r=r(c9e," (FlauBERT model)"),c9e.forEach(t),P1r=i(oe),x8=n(oe,"LI",{});var f9e=s(x8);R1e=n(f9e,"STRONG",{});var N1t=s(R1e);$1r=r(N1t,"funnel"),N1t.forEach(t),I1r=r(f9e," \u2014 "),xz=n(f9e,"A",{href:!0});var j1t=s(xz);q1r=r(j1t,"TFFunnelForTokenClassification"),j1t.forEach(t),N1r=r(f9e," (Funnel Transformer model)"),f9e.forEach(t),j1r=i(oe),k8=n(oe,"LI",{});var m9e=s(k8);B1e=n(m9e,"STRONG",{});var D1t=s(B1e);D1r=r(D1t,"layoutlm"),D1t.forEach(t),G1r=r(m9e," \u2014 "),kz=n(m9e,"A",{href:!0});var G1t=s(kz);O1r=r(G1t,"TFLayoutLMForTokenClassification"),G1t.forEach(t),V1r=r(m9e," (LayoutLM model)"),m9e.forEach(t),X1r=i(oe),S8=n(oe,"LI",{});var g9e=s(S8);P1e=n(g9e,"STRONG",{});var O1t=s(P1e);z1r=r(O1t,"longformer"),O1t.forEach(t),Q1r=r(g9e," \u2014 "),Sz=n(g9e,"A",{href:!0});var V1t=s(Sz);W1r=r(V1t,"TFLongformerForTokenClassification"),V1t.forEach(t),H1r=r(g9e," (Longformer model)"),g9e.forEach(t),U1r=i(oe),R8=n(oe,"LI",{});var h9e=s(R8);$1e=n(h9e,"STRONG",{});var X1t=s($1e);J1r=r(X1t,"mobilebert"),X1t.forEach(t),Y1r=r(h9e," \u2014 "),Rz=n(h9e,"A",{href:!0});var z1t=s(Rz);K1r=r(z1t,"TFMobileBertForTokenClassification"),z1t.forEach(t),Z1r=r(h9e," (MobileBERT model)"),h9e.forEach(t),e4r=i(oe),B8=n(oe,"LI",{});var u9e=s(B8);I1e=n(u9e,"STRONG",{});var Q1t=s(I1e);o4r=r(Q1t,"mpnet"),Q1t.forEach(t),r4r=r(u9e," \u2014 "),Bz=n(u9e,"A",{href:!0});var W1t=s(Bz);t4r=r(W1t,"TFMPNetForTokenClassification"),W1t.forEach(t),a4r=r(u9e," (MPNet model)"),u9e.forEach(t),n4r=i(oe),P8=n(oe,"LI",{});var p9e=s(P8);q1e=n(p9e,"STRONG",{});var H1t=s(q1e);s4r=r(H1t,"rembert"),H1t.forEach(t),l4r=r(p9e," \u2014 "),Pz=n(p9e,"A",{href:!0});var U1t=s(Pz);i4r=r(U1t,"TFRemBertForTokenClassification"),U1t.forEach(t),d4r=r(p9e," (RemBERT model)"),p9e.forEach(t),c4r=i(oe),$8=n(oe,"LI",{});var _9e=s($8);N1e=n(_9e,"STRONG",{});var J1t=s(N1e);f4r=r(J1t,"roberta"),J1t.forEach(t),m4r=r(_9e," \u2014 "),$z=n(_9e,"A",{href:!0});var Y1t=s($z);g4r=r(Y1t,"TFRobertaForTokenClassification"),Y1t.forEach(t),h4r=r(_9e," (RoBERTa model)"),_9e.forEach(t),u4r=i(oe),I8=n(oe,"LI",{});var v9e=s(I8);j1e=n(v9e,"STRONG",{});var K1t=s(j1e);p4r=r(K1t,"roformer"),K1t.forEach(t),_4r=r(v9e," \u2014 "),Iz=n(v9e,"A",{href:!0});var Z1t=s(Iz);v4r=r(Z1t,"TFRoFormerForTokenClassification"),Z1t.forEach(t),b4r=r(v9e," (RoFormer model)"),v9e.forEach(t),F4r=i(oe),q8=n(oe,"LI",{});var b9e=s(q8);D1e=n(b9e,"STRONG",{});var e4t=s(D1e);T4r=r(e4t,"xlm"),e4t.forEach(t),M4r=r(b9e," \u2014 "),qz=n(b9e,"A",{href:!0});var o4t=s(qz);E4r=r(o4t,"TFXLMForTokenClassification"),o4t.forEach(t),C4r=r(b9e," (XLM model)"),b9e.forEach(t),w4r=i(oe),N8=n(oe,"LI",{});var F9e=s(N8);G1e=n(F9e,"STRONG",{});var r4t=s(G1e);A4r=r(r4t,"xlm-roberta"),r4t.forEach(t),y4r=r(F9e," \u2014 "),Nz=n(F9e,"A",{href:!0});var t4t=s(Nz);L4r=r(t4t,"TFXLMRobertaForTokenClassification"),t4t.forEach(t),x4r=r(F9e," (XLM-RoBERTa model)"),F9e.forEach(t),k4r=i(oe),j8=n(oe,"LI",{});var T9e=s(j8);O1e=n(T9e,"STRONG",{});var a4t=s(O1e);S4r=r(a4t,"xlnet"),a4t.forEach(t),R4r=r(T9e," \u2014 "),jz=n(T9e,"A",{href:!0});var n4t=s(jz);B4r=r(n4t,"TFXLNetForTokenClassification"),n4t.forEach(t),P4r=r(T9e," (XLNet model)"),T9e.forEach(t),oe.forEach(t),$4r=i(Ca),V1e=n(Ca,"P",{});var s4t=s(V1e);I4r=r(s4t,"Examples:"),s4t.forEach(t),q4r=i(Ca),m(fy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),iBe=i(c),Vc=n(c,"H2",{class:!0});var b$e=s(Vc);D8=n(b$e,"A",{id:!0,class:!0,href:!0});var l4t=s(D8);X1e=n(l4t,"SPAN",{});var i4t=s(X1e);m(my.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),N4r=i(b$e),z1e=n(b$e,"SPAN",{});var d4t=s(z1e);j4r=r(d4t,"TFAutoModelForQuestionAnswering"),d4t.forEach(t),b$e.forEach(t),dBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(gy.$$.fragment,ni),D4r=i(ni),Xc=n(ni,"P",{});var dJ=s(Xc);G4r=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dz=n(dJ,"A",{href:!0});var c4t=s(Dz);O4r=r(c4t,"from_pretrained()"),c4t.forEach(t),V4r=r(dJ," class method or the "),Gz=n(dJ,"A",{href:!0});var f4t=s(Gz);X4r=r(f4t,"from_config()"),f4t.forEach(t),z4r=r(dJ,` class
method.`),dJ.forEach(t),Q4r=i(ni),hy=n(ni,"P",{});var F$e=s(hy);W4r=r(F$e,"This class cannot be instantiated directly using "),Q1e=n(F$e,"CODE",{});var m4t=s(Q1e);H4r=r(m4t,"__init__()"),m4t.forEach(t),U4r=r(F$e," (throws an error)."),F$e.forEach(t),J4r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(uy.$$.fragment,si),Y4r=i(si),W1e=n(si,"P",{});var g4t=s(W1e);K4r=r(g4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g4t.forEach(t),Z4r=i(si),zc=n(si,"P",{});var cJ=s(zc);ebr=r(cJ,`Note:
Loading a model from its configuration file does `),H1e=n(cJ,"STRONG",{});var h4t=s(H1e);obr=r(h4t,"not"),h4t.forEach(t),rbr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(cJ,"A",{href:!0});var u4t=s(Oz);tbr=r(u4t,"from_pretrained()"),u4t.forEach(t),abr=r(cJ," to load the model weights."),cJ.forEach(t),nbr=i(si),U1e=n(si,"P",{});var p4t=s(U1e);sbr=r(p4t,"Examples:"),p4t.forEach(t),lbr=i(si),m(py.$$.fragment,si),si.forEach(t),ibr=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(_y.$$.fragment,wa),dbr=i(wa),J1e=n(wa,"P",{});var _4t=s(J1e);cbr=r(_4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_4t.forEach(t),fbr=i(wa),An=n(wa,"P",{});var e3=s(An);mbr=r(e3,"The model class to instantiate is selected based on the "),Y1e=n(e3,"CODE",{});var v4t=s(Y1e);gbr=r(v4t,"model_type"),v4t.forEach(t),hbr=r(e3,` property of the config object (either
passed as an argument or loaded from `),K1e=n(e3,"CODE",{});var b4t=s(K1e);ubr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),pbr=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(e3,"CODE",{});var F4t=s(Z1e);_br=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),vbr=r(e3,":"),e3.forEach(t),bbr=i(wa),K=n(wa,"UL",{});var re=s(K);G8=n(re,"LI",{});var M9e=s(G8);e4e=n(M9e,"STRONG",{});var T4t=s(e4e);Fbr=r(T4t,"albert"),T4t.forEach(t),Tbr=r(M9e," \u2014 "),Vz=n(M9e,"A",{href:!0});var M4t=s(Vz);Mbr=r(M4t,"TFAlbertForQuestionAnswering"),M4t.forEach(t),Ebr=r(M9e," (ALBERT model)"),M9e.forEach(t),Cbr=i(re),O8=n(re,"LI",{});var E9e=s(O8);o4e=n(E9e,"STRONG",{});var E4t=s(o4e);wbr=r(E4t,"bert"),E4t.forEach(t),Abr=r(E9e," \u2014 "),Xz=n(E9e,"A",{href:!0});var C4t=s(Xz);ybr=r(C4t,"TFBertForQuestionAnswering"),C4t.forEach(t),Lbr=r(E9e," (BERT model)"),E9e.forEach(t),xbr=i(re),V8=n(re,"LI",{});var C9e=s(V8);r4e=n(C9e,"STRONG",{});var w4t=s(r4e);kbr=r(w4t,"camembert"),w4t.forEach(t),Sbr=r(C9e," \u2014 "),zz=n(C9e,"A",{href:!0});var A4t=s(zz);Rbr=r(A4t,"TFCamembertForQuestionAnswering"),A4t.forEach(t),Bbr=r(C9e," (CamemBERT model)"),C9e.forEach(t),Pbr=i(re),X8=n(re,"LI",{});var w9e=s(X8);t4e=n(w9e,"STRONG",{});var y4t=s(t4e);$br=r(y4t,"convbert"),y4t.forEach(t),Ibr=r(w9e," \u2014 "),Qz=n(w9e,"A",{href:!0});var L4t=s(Qz);qbr=r(L4t,"TFConvBertForQuestionAnswering"),L4t.forEach(t),Nbr=r(w9e," (ConvBERT model)"),w9e.forEach(t),jbr=i(re),z8=n(re,"LI",{});var A9e=s(z8);a4e=n(A9e,"STRONG",{});var x4t=s(a4e);Dbr=r(x4t,"deberta"),x4t.forEach(t),Gbr=r(A9e," \u2014 "),Wz=n(A9e,"A",{href:!0});var k4t=s(Wz);Obr=r(k4t,"TFDebertaForQuestionAnswering"),k4t.forEach(t),Vbr=r(A9e," (DeBERTa model)"),A9e.forEach(t),Xbr=i(re),Q8=n(re,"LI",{});var y9e=s(Q8);n4e=n(y9e,"STRONG",{});var S4t=s(n4e);zbr=r(S4t,"deberta-v2"),S4t.forEach(t),Qbr=r(y9e," \u2014 "),Hz=n(y9e,"A",{href:!0});var R4t=s(Hz);Wbr=r(R4t,"TFDebertaV2ForQuestionAnswering"),R4t.forEach(t),Hbr=r(y9e," (DeBERTa-v2 model)"),y9e.forEach(t),Ubr=i(re),W8=n(re,"LI",{});var L9e=s(W8);s4e=n(L9e,"STRONG",{});var B4t=s(s4e);Jbr=r(B4t,"distilbert"),B4t.forEach(t),Ybr=r(L9e," \u2014 "),Uz=n(L9e,"A",{href:!0});var P4t=s(Uz);Kbr=r(P4t,"TFDistilBertForQuestionAnswering"),P4t.forEach(t),Zbr=r(L9e," (DistilBERT model)"),L9e.forEach(t),e2r=i(re),H8=n(re,"LI",{});var x9e=s(H8);l4e=n(x9e,"STRONG",{});var $4t=s(l4e);o2r=r($4t,"electra"),$4t.forEach(t),r2r=r(x9e," \u2014 "),Jz=n(x9e,"A",{href:!0});var I4t=s(Jz);t2r=r(I4t,"TFElectraForQuestionAnswering"),I4t.forEach(t),a2r=r(x9e," (ELECTRA model)"),x9e.forEach(t),n2r=i(re),U8=n(re,"LI",{});var k9e=s(U8);i4e=n(k9e,"STRONG",{});var q4t=s(i4e);s2r=r(q4t,"flaubert"),q4t.forEach(t),l2r=r(k9e," \u2014 "),Yz=n(k9e,"A",{href:!0});var N4t=s(Yz);i2r=r(N4t,"TFFlaubertForQuestionAnsweringSimple"),N4t.forEach(t),d2r=r(k9e," (FlauBERT model)"),k9e.forEach(t),c2r=i(re),J8=n(re,"LI",{});var S9e=s(J8);d4e=n(S9e,"STRONG",{});var j4t=s(d4e);f2r=r(j4t,"funnel"),j4t.forEach(t),m2r=r(S9e," \u2014 "),Kz=n(S9e,"A",{href:!0});var D4t=s(Kz);g2r=r(D4t,"TFFunnelForQuestionAnswering"),D4t.forEach(t),h2r=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),u2r=i(re),Y8=n(re,"LI",{});var R9e=s(Y8);c4e=n(R9e,"STRONG",{});var G4t=s(c4e);p2r=r(G4t,"gptj"),G4t.forEach(t),_2r=r(R9e," \u2014 "),Zz=n(R9e,"A",{href:!0});var O4t=s(Zz);v2r=r(O4t,"TFGPTJForQuestionAnswering"),O4t.forEach(t),b2r=r(R9e," (GPT-J model)"),R9e.forEach(t),F2r=i(re),K8=n(re,"LI",{});var B9e=s(K8);f4e=n(B9e,"STRONG",{});var V4t=s(f4e);T2r=r(V4t,"longformer"),V4t.forEach(t),M2r=r(B9e," \u2014 "),eQ=n(B9e,"A",{href:!0});var X4t=s(eQ);E2r=r(X4t,"TFLongformerForQuestionAnswering"),X4t.forEach(t),C2r=r(B9e," (Longformer model)"),B9e.forEach(t),w2r=i(re),Z8=n(re,"LI",{});var P9e=s(Z8);m4e=n(P9e,"STRONG",{});var z4t=s(m4e);A2r=r(z4t,"mobilebert"),z4t.forEach(t),y2r=r(P9e," \u2014 "),oQ=n(P9e,"A",{href:!0});var Q4t=s(oQ);L2r=r(Q4t,"TFMobileBertForQuestionAnswering"),Q4t.forEach(t),x2r=r(P9e," (MobileBERT model)"),P9e.forEach(t),k2r=i(re),eM=n(re,"LI",{});var $9e=s(eM);g4e=n($9e,"STRONG",{});var W4t=s(g4e);S2r=r(W4t,"mpnet"),W4t.forEach(t),R2r=r($9e," \u2014 "),rQ=n($9e,"A",{href:!0});var H4t=s(rQ);B2r=r(H4t,"TFMPNetForQuestionAnswering"),H4t.forEach(t),P2r=r($9e," (MPNet model)"),$9e.forEach(t),$2r=i(re),oM=n(re,"LI",{});var I9e=s(oM);h4e=n(I9e,"STRONG",{});var U4t=s(h4e);I2r=r(U4t,"rembert"),U4t.forEach(t),q2r=r(I9e," \u2014 "),tQ=n(I9e,"A",{href:!0});var J4t=s(tQ);N2r=r(J4t,"TFRemBertForQuestionAnswering"),J4t.forEach(t),j2r=r(I9e," (RemBERT model)"),I9e.forEach(t),D2r=i(re),rM=n(re,"LI",{});var q9e=s(rM);u4e=n(q9e,"STRONG",{});var Y4t=s(u4e);G2r=r(Y4t,"roberta"),Y4t.forEach(t),O2r=r(q9e," \u2014 "),aQ=n(q9e,"A",{href:!0});var K4t=s(aQ);V2r=r(K4t,"TFRobertaForQuestionAnswering"),K4t.forEach(t),X2r=r(q9e," (RoBERTa model)"),q9e.forEach(t),z2r=i(re),tM=n(re,"LI",{});var N9e=s(tM);p4e=n(N9e,"STRONG",{});var Z4t=s(p4e);Q2r=r(Z4t,"roformer"),Z4t.forEach(t),W2r=r(N9e," \u2014 "),nQ=n(N9e,"A",{href:!0});var ebt=s(nQ);H2r=r(ebt,"TFRoFormerForQuestionAnswering"),ebt.forEach(t),U2r=r(N9e," (RoFormer model)"),N9e.forEach(t),J2r=i(re),aM=n(re,"LI",{});var j9e=s(aM);_4e=n(j9e,"STRONG",{});var obt=s(_4e);Y2r=r(obt,"xlm"),obt.forEach(t),K2r=r(j9e," \u2014 "),sQ=n(j9e,"A",{href:!0});var rbt=s(sQ);Z2r=r(rbt,"TFXLMForQuestionAnsweringSimple"),rbt.forEach(t),eFr=r(j9e," (XLM model)"),j9e.forEach(t),oFr=i(re),nM=n(re,"LI",{});var D9e=s(nM);v4e=n(D9e,"STRONG",{});var tbt=s(v4e);rFr=r(tbt,"xlm-roberta"),tbt.forEach(t),tFr=r(D9e," \u2014 "),lQ=n(D9e,"A",{href:!0});var abt=s(lQ);aFr=r(abt,"TFXLMRobertaForQuestionAnswering"),abt.forEach(t),nFr=r(D9e," (XLM-RoBERTa model)"),D9e.forEach(t),sFr=i(re),sM=n(re,"LI",{});var G9e=s(sM);b4e=n(G9e,"STRONG",{});var nbt=s(b4e);lFr=r(nbt,"xlnet"),nbt.forEach(t),iFr=r(G9e," \u2014 "),iQ=n(G9e,"A",{href:!0});var sbt=s(iQ);dFr=r(sbt,"TFXLNetForQuestionAnsweringSimple"),sbt.forEach(t),cFr=r(G9e," (XLNet model)"),G9e.forEach(t),re.forEach(t),fFr=i(wa),F4e=n(wa,"P",{});var lbt=s(F4e);mFr=r(lbt,"Examples:"),lbt.forEach(t),gFr=i(wa),m(vy.$$.fragment,wa),wa.forEach(t),ni.forEach(t),cBe=i(c),Qc=n(c,"H2",{class:!0});var T$e=s(Qc);lM=n(T$e,"A",{id:!0,class:!0,href:!0});var ibt=s(lM);T4e=n(ibt,"SPAN",{});var dbt=s(T4e);m(by.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),hFr=i(T$e),M4e=n(T$e,"SPAN",{});var cbt=s(M4e);uFr=r(cbt,"TFAutoModelForVision2Seq"),cbt.forEach(t),T$e.forEach(t),fBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Fy.$$.fragment,li),pFr=i(li),Wc=n(li,"P",{});var fJ=s(Wc);_Fr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=n(fJ,"A",{href:!0});var fbt=s(dQ);vFr=r(fbt,"from_pretrained()"),fbt.forEach(t),bFr=r(fJ," class method or the "),cQ=n(fJ,"A",{href:!0});var mbt=s(cQ);FFr=r(mbt,"from_config()"),mbt.forEach(t),TFr=r(fJ,` class
method.`),fJ.forEach(t),MFr=i(li),Ty=n(li,"P",{});var M$e=s(Ty);EFr=r(M$e,"This class cannot be instantiated directly using "),E4e=n(M$e,"CODE",{});var gbt=s(E4e);CFr=r(gbt,"__init__()"),gbt.forEach(t),wFr=r(M$e," (throws an error)."),M$e.forEach(t),AFr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(My.$$.fragment,ii),yFr=i(ii),C4e=n(ii,"P",{});var hbt=s(C4e);LFr=r(hbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hbt.forEach(t),xFr=i(ii),Hc=n(ii,"P",{});var mJ=s(Hc);kFr=r(mJ,`Note:
Loading a model from its configuration file does `),w4e=n(mJ,"STRONG",{});var ubt=s(w4e);SFr=r(ubt,"not"),ubt.forEach(t),RFr=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(mJ,"A",{href:!0});var pbt=s(fQ);BFr=r(pbt,"from_pretrained()"),pbt.forEach(t),PFr=r(mJ," to load the model weights."),mJ.forEach(t),$Fr=i(ii),A4e=n(ii,"P",{});var _bt=s(A4e);IFr=r(_bt,"Examples:"),_bt.forEach(t),qFr=i(ii),m(Ey.$$.fragment,ii),ii.forEach(t),NFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Cy.$$.fragment,Aa),jFr=i(Aa),y4e=n(Aa,"P",{});var vbt=s(y4e);DFr=r(vbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vbt.forEach(t),GFr=i(Aa),yn=n(Aa,"P",{});var o3=s(yn);OFr=r(o3,"The model class to instantiate is selected based on the "),L4e=n(o3,"CODE",{});var bbt=s(L4e);VFr=r(bbt,"model_type"),bbt.forEach(t),XFr=r(o3,` property of the config object (either
passed as an argument or loaded from `),x4e=n(o3,"CODE",{});var Fbt=s(x4e);zFr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),QFr=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(o3,"CODE",{});var Tbt=s(k4e);WFr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),HFr=r(o3,":"),o3.forEach(t),UFr=i(Aa),S4e=n(Aa,"UL",{});var Mbt=s(S4e);iM=n(Mbt,"LI",{});var O9e=s(iM);R4e=n(O9e,"STRONG",{});var Ebt=s(R4e);JFr=r(Ebt,"vision-encoder-decoder"),Ebt.forEach(t),YFr=r(O9e," \u2014 "),mQ=n(O9e,"A",{href:!0});var Cbt=s(mQ);KFr=r(Cbt,"TFVisionEncoderDecoderModel"),Cbt.forEach(t),ZFr=r(O9e," (Vision Encoder decoder model)"),O9e.forEach(t),Mbt.forEach(t),e0r=i(Aa),B4e=n(Aa,"P",{});var wbt=s(B4e);o0r=r(wbt,"Examples:"),wbt.forEach(t),r0r=i(Aa),m(wy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),mBe=i(c),Uc=n(c,"H2",{class:!0});var E$e=s(Uc);dM=n(E$e,"A",{id:!0,class:!0,href:!0});var Abt=s(dM);P4e=n(Abt,"SPAN",{});var ybt=s(P4e);m(Ay.$$.fragment,ybt),ybt.forEach(t),Abt.forEach(t),t0r=i(E$e),$4e=n(E$e,"SPAN",{});var Lbt=s($4e);a0r=r(Lbt,"TFAutoModelForSpeechSeq2Seq"),Lbt.forEach(t),E$e.forEach(t),gBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(yy.$$.fragment,di),n0r=i(di),Jc=n(di,"P",{});var gJ=s(Jc);s0r=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gQ=n(gJ,"A",{href:!0});var xbt=s(gQ);l0r=r(xbt,"from_pretrained()"),xbt.forEach(t),i0r=r(gJ," class method or the "),hQ=n(gJ,"A",{href:!0});var kbt=s(hQ);d0r=r(kbt,"from_config()"),kbt.forEach(t),c0r=r(gJ,` class
method.`),gJ.forEach(t),f0r=i(di),Ly=n(di,"P",{});var C$e=s(Ly);m0r=r(C$e,"This class cannot be instantiated directly using "),I4e=n(C$e,"CODE",{});var Sbt=s(I4e);g0r=r(Sbt,"__init__()"),Sbt.forEach(t),h0r=r(C$e," (throws an error)."),C$e.forEach(t),u0r=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(xy.$$.fragment,ci),p0r=i(ci),q4e=n(ci,"P",{});var Rbt=s(q4e);_0r=r(Rbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rbt.forEach(t),v0r=i(ci),Yc=n(ci,"P",{});var hJ=s(Yc);b0r=r(hJ,`Note:
Loading a model from its configuration file does `),N4e=n(hJ,"STRONG",{});var Bbt=s(N4e);F0r=r(Bbt,"not"),Bbt.forEach(t),T0r=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(hJ,"A",{href:!0});var Pbt=s(uQ);M0r=r(Pbt,"from_pretrained()"),Pbt.forEach(t),E0r=r(hJ," to load the model weights."),hJ.forEach(t),C0r=i(ci),j4e=n(ci,"P",{});var $bt=s(j4e);w0r=r($bt,"Examples:"),$bt.forEach(t),A0r=i(ci),m(ky.$$.fragment,ci),ci.forEach(t),y0r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Sy.$$.fragment,ya),L0r=i(ya),D4e=n(ya,"P",{});var Ibt=s(D4e);x0r=r(Ibt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ibt.forEach(t),k0r=i(ya),Ln=n(ya,"P",{});var r3=s(Ln);S0r=r(r3,"The model class to instantiate is selected based on the "),G4e=n(r3,"CODE",{});var qbt=s(G4e);R0r=r(qbt,"model_type"),qbt.forEach(t),B0r=r(r3,` property of the config object (either
passed as an argument or loaded from `),O4e=n(r3,"CODE",{});var Nbt=s(O4e);P0r=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),$0r=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(r3,"CODE",{});var jbt=s(V4e);I0r=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),q0r=r(r3,":"),r3.forEach(t),N0r=i(ya),X4e=n(ya,"UL",{});var Dbt=s(X4e);cM=n(Dbt,"LI",{});var V9e=s(cM);z4e=n(V9e,"STRONG",{});var Gbt=s(z4e);j0r=r(Gbt,"speech_to_text"),Gbt.forEach(t),D0r=r(V9e," \u2014 "),pQ=n(V9e,"A",{href:!0});var Obt=s(pQ);G0r=r(Obt,"TFSpeech2TextForConditionalGeneration"),Obt.forEach(t),O0r=r(V9e," (Speech2Text model)"),V9e.forEach(t),Dbt.forEach(t),V0r=i(ya),Q4e=n(ya,"P",{});var Vbt=s(Q4e);X0r=r(Vbt,"Examples:"),Vbt.forEach(t),z0r=i(ya),m(Ry.$$.fragment,ya),ya.forEach(t),di.forEach(t),hBe=i(c),Kc=n(c,"H2",{class:!0});var w$e=s(Kc);fM=n(w$e,"A",{id:!0,class:!0,href:!0});var Xbt=s(fM);W4e=n(Xbt,"SPAN",{});var zbt=s(W4e);m(By.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),Q0r=i(w$e),H4e=n(w$e,"SPAN",{});var Qbt=s(H4e);W0r=r(Qbt,"FlaxAutoModel"),Qbt.forEach(t),w$e.forEach(t),uBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Py.$$.fragment,fi),H0r=i(fi),Zc=n(fi,"P",{});var uJ=s(Zc);U0r=r(uJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=n(uJ,"A",{href:!0});var Wbt=s(_Q);J0r=r(Wbt,"from_pretrained()"),Wbt.forEach(t),Y0r=r(uJ," class method or the "),vQ=n(uJ,"A",{href:!0});var Hbt=s(vQ);K0r=r(Hbt,"from_config()"),Hbt.forEach(t),Z0r=r(uJ,` class
method.`),uJ.forEach(t),eTr=i(fi),$y=n(fi,"P",{});var A$e=s($y);oTr=r(A$e,"This class cannot be instantiated directly using "),U4e=n(A$e,"CODE",{});var Ubt=s(U4e);rTr=r(Ubt,"__init__()"),Ubt.forEach(t),tTr=r(A$e," (throws an error)."),A$e.forEach(t),aTr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Iy.$$.fragment,mi),nTr=i(mi),J4e=n(mi,"P",{});var Jbt=s(J4e);sTr=r(Jbt,"Instantiates one of the base model classes of the library from a configuration."),Jbt.forEach(t),lTr=i(mi),ef=n(mi,"P",{});var pJ=s(ef);iTr=r(pJ,`Note:
Loading a model from its configuration file does `),Y4e=n(pJ,"STRONG",{});var Ybt=s(Y4e);dTr=r(Ybt,"not"),Ybt.forEach(t),cTr=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(pJ,"A",{href:!0});var Kbt=s(bQ);fTr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),mTr=r(pJ," to load the model weights."),pJ.forEach(t),gTr=i(mi),K4e=n(mi,"P",{});var Zbt=s(K4e);hTr=r(Zbt,"Examples:"),Zbt.forEach(t),uTr=i(mi),m(qy.$$.fragment,mi),mi.forEach(t),pTr=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Ny.$$.fragment,La),_Tr=i(La),Z4e=n(La,"P",{});var e2t=s(Z4e);vTr=r(e2t,"Instantiate one of the base model classes of the library from a pretrained model."),e2t.forEach(t),bTr=i(La),xn=n(La,"P",{});var t3=s(xn);FTr=r(t3,"The model class to instantiate is selected based on the "),ebe=n(t3,"CODE",{});var o2t=s(ebe);TTr=r(o2t,"model_type"),o2t.forEach(t),MTr=r(t3,` property of the config object (either
passed as an argument or loaded from `),obe=n(t3,"CODE",{});var r2t=s(obe);ETr=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),CTr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(t3,"CODE",{});var t2t=s(rbe);wTr=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),ATr=r(t3,":"),t3.forEach(t),yTr=i(La),z=n(La,"UL",{});var W=s(z);mM=n(W,"LI",{});var X9e=s(mM);tbe=n(X9e,"STRONG",{});var a2t=s(tbe);LTr=r(a2t,"albert"),a2t.forEach(t),xTr=r(X9e," \u2014 "),FQ=n(X9e,"A",{href:!0});var n2t=s(FQ);kTr=r(n2t,"FlaxAlbertModel"),n2t.forEach(t),STr=r(X9e," (ALBERT model)"),X9e.forEach(t),RTr=i(W),gM=n(W,"LI",{});var z9e=s(gM);abe=n(z9e,"STRONG",{});var s2t=s(abe);BTr=r(s2t,"bart"),s2t.forEach(t),PTr=r(z9e," \u2014 "),TQ=n(z9e,"A",{href:!0});var l2t=s(TQ);$Tr=r(l2t,"FlaxBartModel"),l2t.forEach(t),ITr=r(z9e," (BART model)"),z9e.forEach(t),qTr=i(W),hM=n(W,"LI",{});var Q9e=s(hM);nbe=n(Q9e,"STRONG",{});var i2t=s(nbe);NTr=r(i2t,"beit"),i2t.forEach(t),jTr=r(Q9e," \u2014 "),MQ=n(Q9e,"A",{href:!0});var d2t=s(MQ);DTr=r(d2t,"FlaxBeitModel"),d2t.forEach(t),GTr=r(Q9e," (BEiT model)"),Q9e.forEach(t),OTr=i(W),uM=n(W,"LI",{});var W9e=s(uM);sbe=n(W9e,"STRONG",{});var c2t=s(sbe);VTr=r(c2t,"bert"),c2t.forEach(t),XTr=r(W9e," \u2014 "),EQ=n(W9e,"A",{href:!0});var f2t=s(EQ);zTr=r(f2t,"FlaxBertModel"),f2t.forEach(t),QTr=r(W9e," (BERT model)"),W9e.forEach(t),WTr=i(W),pM=n(W,"LI",{});var H9e=s(pM);lbe=n(H9e,"STRONG",{});var m2t=s(lbe);HTr=r(m2t,"big_bird"),m2t.forEach(t),UTr=r(H9e," \u2014 "),CQ=n(H9e,"A",{href:!0});var g2t=s(CQ);JTr=r(g2t,"FlaxBigBirdModel"),g2t.forEach(t),YTr=r(H9e," (BigBird model)"),H9e.forEach(t),KTr=i(W),_M=n(W,"LI",{});var U9e=s(_M);ibe=n(U9e,"STRONG",{});var h2t=s(ibe);ZTr=r(h2t,"blenderbot"),h2t.forEach(t),e8r=r(U9e," \u2014 "),wQ=n(U9e,"A",{href:!0});var u2t=s(wQ);o8r=r(u2t,"FlaxBlenderbotModel"),u2t.forEach(t),r8r=r(U9e," (Blenderbot model)"),U9e.forEach(t),t8r=i(W),vM=n(W,"LI",{});var J9e=s(vM);dbe=n(J9e,"STRONG",{});var p2t=s(dbe);a8r=r(p2t,"blenderbot-small"),p2t.forEach(t),n8r=r(J9e," \u2014 "),AQ=n(J9e,"A",{href:!0});var _2t=s(AQ);s8r=r(_2t,"FlaxBlenderbotSmallModel"),_2t.forEach(t),l8r=r(J9e," (BlenderbotSmall model)"),J9e.forEach(t),i8r=i(W),bM=n(W,"LI",{});var Y9e=s(bM);cbe=n(Y9e,"STRONG",{});var v2t=s(cbe);d8r=r(v2t,"clip"),v2t.forEach(t),c8r=r(Y9e," \u2014 "),yQ=n(Y9e,"A",{href:!0});var b2t=s(yQ);f8r=r(b2t,"FlaxCLIPModel"),b2t.forEach(t),m8r=r(Y9e," (CLIP model)"),Y9e.forEach(t),g8r=i(W),FM=n(W,"LI",{});var K9e=s(FM);fbe=n(K9e,"STRONG",{});var F2t=s(fbe);h8r=r(F2t,"distilbert"),F2t.forEach(t),u8r=r(K9e," \u2014 "),LQ=n(K9e,"A",{href:!0});var T2t=s(LQ);p8r=r(T2t,"FlaxDistilBertModel"),T2t.forEach(t),_8r=r(K9e," (DistilBERT model)"),K9e.forEach(t),v8r=i(W),TM=n(W,"LI",{});var Z9e=s(TM);mbe=n(Z9e,"STRONG",{});var M2t=s(mbe);b8r=r(M2t,"electra"),M2t.forEach(t),F8r=r(Z9e," \u2014 "),xQ=n(Z9e,"A",{href:!0});var E2t=s(xQ);T8r=r(E2t,"FlaxElectraModel"),E2t.forEach(t),M8r=r(Z9e," (ELECTRA model)"),Z9e.forEach(t),E8r=i(W),MM=n(W,"LI",{});var eke=s(MM);gbe=n(eke,"STRONG",{});var C2t=s(gbe);C8r=r(C2t,"gpt2"),C2t.forEach(t),w8r=r(eke," \u2014 "),kQ=n(eke,"A",{href:!0});var w2t=s(kQ);A8r=r(w2t,"FlaxGPT2Model"),w2t.forEach(t),y8r=r(eke," (OpenAI GPT-2 model)"),eke.forEach(t),L8r=i(W),EM=n(W,"LI",{});var oke=s(EM);hbe=n(oke,"STRONG",{});var A2t=s(hbe);x8r=r(A2t,"gpt_neo"),A2t.forEach(t),k8r=r(oke," \u2014 "),SQ=n(oke,"A",{href:!0});var y2t=s(SQ);S8r=r(y2t,"FlaxGPTNeoModel"),y2t.forEach(t),R8r=r(oke," (GPT Neo model)"),oke.forEach(t),B8r=i(W),CM=n(W,"LI",{});var rke=s(CM);ube=n(rke,"STRONG",{});var L2t=s(ube);P8r=r(L2t,"gptj"),L2t.forEach(t),$8r=r(rke," \u2014 "),RQ=n(rke,"A",{href:!0});var x2t=s(RQ);I8r=r(x2t,"FlaxGPTJModel"),x2t.forEach(t),q8r=r(rke," (GPT-J model)"),rke.forEach(t),N8r=i(W),wM=n(W,"LI",{});var tke=s(wM);pbe=n(tke,"STRONG",{});var k2t=s(pbe);j8r=r(k2t,"marian"),k2t.forEach(t),D8r=r(tke," \u2014 "),BQ=n(tke,"A",{href:!0});var S2t=s(BQ);G8r=r(S2t,"FlaxMarianModel"),S2t.forEach(t),O8r=r(tke," (Marian model)"),tke.forEach(t),V8r=i(W),AM=n(W,"LI",{});var ake=s(AM);_be=n(ake,"STRONG",{});var R2t=s(_be);X8r=r(R2t,"mbart"),R2t.forEach(t),z8r=r(ake," \u2014 "),PQ=n(ake,"A",{href:!0});var B2t=s(PQ);Q8r=r(B2t,"FlaxMBartModel"),B2t.forEach(t),W8r=r(ake," (mBART model)"),ake.forEach(t),H8r=i(W),yM=n(W,"LI",{});var nke=s(yM);vbe=n(nke,"STRONG",{});var P2t=s(vbe);U8r=r(P2t,"mt5"),P2t.forEach(t),J8r=r(nke," \u2014 "),$Q=n(nke,"A",{href:!0});var $2t=s($Q);Y8r=r($2t,"FlaxMT5Model"),$2t.forEach(t),K8r=r(nke," (mT5 model)"),nke.forEach(t),Z8r=i(W),LM=n(W,"LI",{});var ske=s(LM);bbe=n(ske,"STRONG",{});var I2t=s(bbe);eMr=r(I2t,"pegasus"),I2t.forEach(t),oMr=r(ske," \u2014 "),IQ=n(ske,"A",{href:!0});var q2t=s(IQ);rMr=r(q2t,"FlaxPegasusModel"),q2t.forEach(t),tMr=r(ske," (Pegasus model)"),ske.forEach(t),aMr=i(W),xM=n(W,"LI",{});var lke=s(xM);Fbe=n(lke,"STRONG",{});var N2t=s(Fbe);nMr=r(N2t,"roberta"),N2t.forEach(t),sMr=r(lke," \u2014 "),qQ=n(lke,"A",{href:!0});var j2t=s(qQ);lMr=r(j2t,"FlaxRobertaModel"),j2t.forEach(t),iMr=r(lke," (RoBERTa model)"),lke.forEach(t),dMr=i(W),kM=n(W,"LI",{});var ike=s(kM);Tbe=n(ike,"STRONG",{});var D2t=s(Tbe);cMr=r(D2t,"roformer"),D2t.forEach(t),fMr=r(ike," \u2014 "),NQ=n(ike,"A",{href:!0});var G2t=s(NQ);mMr=r(G2t,"FlaxRoFormerModel"),G2t.forEach(t),gMr=r(ike," (RoFormer model)"),ike.forEach(t),hMr=i(W),SM=n(W,"LI",{});var dke=s(SM);Mbe=n(dke,"STRONG",{});var O2t=s(Mbe);uMr=r(O2t,"t5"),O2t.forEach(t),pMr=r(dke," \u2014 "),jQ=n(dke,"A",{href:!0});var V2t=s(jQ);_Mr=r(V2t,"FlaxT5Model"),V2t.forEach(t),vMr=r(dke," (T5 model)"),dke.forEach(t),bMr=i(W),RM=n(W,"LI",{});var cke=s(RM);Ebe=n(cke,"STRONG",{});var X2t=s(Ebe);FMr=r(X2t,"vision-text-dual-encoder"),X2t.forEach(t),TMr=r(cke," \u2014 "),DQ=n(cke,"A",{href:!0});var z2t=s(DQ);MMr=r(z2t,"FlaxVisionTextDualEncoderModel"),z2t.forEach(t),EMr=r(cke," (VisionTextDualEncoder model)"),cke.forEach(t),CMr=i(W),BM=n(W,"LI",{});var fke=s(BM);Cbe=n(fke,"STRONG",{});var Q2t=s(Cbe);wMr=r(Q2t,"vit"),Q2t.forEach(t),AMr=r(fke," \u2014 "),GQ=n(fke,"A",{href:!0});var W2t=s(GQ);yMr=r(W2t,"FlaxViTModel"),W2t.forEach(t),LMr=r(fke," (ViT model)"),fke.forEach(t),xMr=i(W),PM=n(W,"LI",{});var mke=s(PM);wbe=n(mke,"STRONG",{});var H2t=s(wbe);kMr=r(H2t,"wav2vec2"),H2t.forEach(t),SMr=r(mke," \u2014 "),OQ=n(mke,"A",{href:!0});var U2t=s(OQ);RMr=r(U2t,"FlaxWav2Vec2Model"),U2t.forEach(t),BMr=r(mke," (Wav2Vec2 model)"),mke.forEach(t),PMr=i(W),$M=n(W,"LI",{});var gke=s($M);Abe=n(gke,"STRONG",{});var J2t=s(Abe);$Mr=r(J2t,"xglm"),J2t.forEach(t),IMr=r(gke," \u2014 "),VQ=n(gke,"A",{href:!0});var Y2t=s(VQ);qMr=r(Y2t,"FlaxXGLMModel"),Y2t.forEach(t),NMr=r(gke," (XGLM model)"),gke.forEach(t),jMr=i(W),IM=n(W,"LI",{});var hke=s(IM);ybe=n(hke,"STRONG",{});var K2t=s(ybe);DMr=r(K2t,"xlm-roberta"),K2t.forEach(t),GMr=r(hke," \u2014 "),XQ=n(hke,"A",{href:!0});var Z2t=s(XQ);OMr=r(Z2t,"FlaxXLMRobertaModel"),Z2t.forEach(t),VMr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),W.forEach(t),XMr=i(La),Lbe=n(La,"P",{});var eFt=s(Lbe);zMr=r(eFt,"Examples:"),eFt.forEach(t),QMr=i(La),m(jy.$$.fragment,La),La.forEach(t),fi.forEach(t),pBe=i(c),of=n(c,"H2",{class:!0});var y$e=s(of);qM=n(y$e,"A",{id:!0,class:!0,href:!0});var oFt=s(qM);xbe=n(oFt,"SPAN",{});var rFt=s(xbe);m(Dy.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),WMr=i(y$e),kbe=n(y$e,"SPAN",{});var tFt=s(kbe);HMr=r(tFt,"FlaxAutoModelForCausalLM"),tFt.forEach(t),y$e.forEach(t),_Be=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Gy.$$.fragment,gi),UMr=i(gi),rf=n(gi,"P",{});var _J=s(rf);JMr=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=n(_J,"A",{href:!0});var aFt=s(zQ);YMr=r(aFt,"from_pretrained()"),aFt.forEach(t),KMr=r(_J," class method or the "),QQ=n(_J,"A",{href:!0});var nFt=s(QQ);ZMr=r(nFt,"from_config()"),nFt.forEach(t),eEr=r(_J,` class
method.`),_J.forEach(t),oEr=i(gi),Oy=n(gi,"P",{});var L$e=s(Oy);rEr=r(L$e,"This class cannot be instantiated directly using "),Sbe=n(L$e,"CODE",{});var sFt=s(Sbe);tEr=r(sFt,"__init__()"),sFt.forEach(t),aEr=r(L$e," (throws an error)."),L$e.forEach(t),nEr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Vy.$$.fragment,hi),sEr=i(hi),Rbe=n(hi,"P",{});var lFt=s(Rbe);lEr=r(lFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lFt.forEach(t),iEr=i(hi),tf=n(hi,"P",{});var vJ=s(tf);dEr=r(vJ,`Note:
Loading a model from its configuration file does `),Bbe=n(vJ,"STRONG",{});var iFt=s(Bbe);cEr=r(iFt,"not"),iFt.forEach(t),fEr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(vJ,"A",{href:!0});var dFt=s(WQ);mEr=r(dFt,"from_pretrained()"),dFt.forEach(t),gEr=r(vJ," to load the model weights."),vJ.forEach(t),hEr=i(hi),Pbe=n(hi,"P",{});var cFt=s(Pbe);uEr=r(cFt,"Examples:"),cFt.forEach(t),pEr=i(hi),m(Xy.$$.fragment,hi),hi.forEach(t),_Er=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(zy.$$.fragment,xa),vEr=i(xa),$be=n(xa,"P",{});var fFt=s($be);bEr=r(fFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fFt.forEach(t),FEr=i(xa),kn=n(xa,"P",{});var a3=s(kn);TEr=r(a3,"The model class to instantiate is selected based on the "),Ibe=n(a3,"CODE",{});var mFt=s(Ibe);MEr=r(mFt,"model_type"),mFt.forEach(t),EEr=r(a3,` property of the config object (either
passed as an argument or loaded from `),qbe=n(a3,"CODE",{});var gFt=s(qbe);CEr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),wEr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(a3,"CODE",{});var hFt=s(Nbe);AEr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),yEr=r(a3,":"),a3.forEach(t),LEr=i(xa),ca=n(xa,"UL",{});var ui=s(ca);NM=n(ui,"LI",{});var uke=s(NM);jbe=n(uke,"STRONG",{});var uFt=s(jbe);xEr=r(uFt,"bart"),uFt.forEach(t),kEr=r(uke," \u2014 "),HQ=n(uke,"A",{href:!0});var pFt=s(HQ);SEr=r(pFt,"FlaxBartForCausalLM"),pFt.forEach(t),REr=r(uke," (BART model)"),uke.forEach(t),BEr=i(ui),jM=n(ui,"LI",{});var pke=s(jM);Dbe=n(pke,"STRONG",{});var _Ft=s(Dbe);PEr=r(_Ft,"gpt2"),_Ft.forEach(t),$Er=r(pke," \u2014 "),UQ=n(pke,"A",{href:!0});var vFt=s(UQ);IEr=r(vFt,"FlaxGPT2LMHeadModel"),vFt.forEach(t),qEr=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),NEr=i(ui),DM=n(ui,"LI",{});var _ke=s(DM);Gbe=n(_ke,"STRONG",{});var bFt=s(Gbe);jEr=r(bFt,"gpt_neo"),bFt.forEach(t),DEr=r(_ke," \u2014 "),JQ=n(_ke,"A",{href:!0});var FFt=s(JQ);GEr=r(FFt,"FlaxGPTNeoForCausalLM"),FFt.forEach(t),OEr=r(_ke," (GPT Neo model)"),_ke.forEach(t),VEr=i(ui),GM=n(ui,"LI",{});var vke=s(GM);Obe=n(vke,"STRONG",{});var TFt=s(Obe);XEr=r(TFt,"gptj"),TFt.forEach(t),zEr=r(vke," \u2014 "),YQ=n(vke,"A",{href:!0});var MFt=s(YQ);QEr=r(MFt,"FlaxGPTJForCausalLM"),MFt.forEach(t),WEr=r(vke," (GPT-J model)"),vke.forEach(t),HEr=i(ui),OM=n(ui,"LI",{});var bke=s(OM);Vbe=n(bke,"STRONG",{});var EFt=s(Vbe);UEr=r(EFt,"xglm"),EFt.forEach(t),JEr=r(bke," \u2014 "),KQ=n(bke,"A",{href:!0});var CFt=s(KQ);YEr=r(CFt,"FlaxXGLMForCausalLM"),CFt.forEach(t),KEr=r(bke," (XGLM model)"),bke.forEach(t),ui.forEach(t),ZEr=i(xa),Xbe=n(xa,"P",{});var wFt=s(Xbe);e5r=r(wFt,"Examples:"),wFt.forEach(t),o5r=i(xa),m(Qy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),vBe=i(c),af=n(c,"H2",{class:!0});var x$e=s(af);VM=n(x$e,"A",{id:!0,class:!0,href:!0});var AFt=s(VM);zbe=n(AFt,"SPAN",{});var yFt=s(zbe);m(Wy.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),r5r=i(x$e),Qbe=n(x$e,"SPAN",{});var LFt=s(Qbe);t5r=r(LFt,"FlaxAutoModelForPreTraining"),LFt.forEach(t),x$e.forEach(t),bBe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);m(Hy.$$.fragment,pi),a5r=i(pi),nf=n(pi,"P",{});var bJ=s(nf);n5r=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=n(bJ,"A",{href:!0});var xFt=s(ZQ);s5r=r(xFt,"from_pretrained()"),xFt.forEach(t),l5r=r(bJ," class method or the "),eW=n(bJ,"A",{href:!0});var kFt=s(eW);i5r=r(kFt,"from_config()"),kFt.forEach(t),d5r=r(bJ,` class
method.`),bJ.forEach(t),c5r=i(pi),Uy=n(pi,"P",{});var k$e=s(Uy);f5r=r(k$e,"This class cannot be instantiated directly using "),Wbe=n(k$e,"CODE",{});var SFt=s(Wbe);m5r=r(SFt,"__init__()"),SFt.forEach(t),g5r=r(k$e," (throws an error)."),k$e.forEach(t),h5r=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);m(Jy.$$.fragment,_i),u5r=i(_i),Hbe=n(_i,"P",{});var RFt=s(Hbe);p5r=r(RFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RFt.forEach(t),_5r=i(_i),sf=n(_i,"P",{});var FJ=s(sf);v5r=r(FJ,`Note:
Loading a model from its configuration file does `),Ube=n(FJ,"STRONG",{});var BFt=s(Ube);b5r=r(BFt,"not"),BFt.forEach(t),F5r=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(FJ,"A",{href:!0});var PFt=s(oW);T5r=r(PFt,"from_pretrained()"),PFt.forEach(t),M5r=r(FJ," to load the model weights."),FJ.forEach(t),E5r=i(_i),Jbe=n(_i,"P",{});var $Ft=s(Jbe);C5r=r($Ft,"Examples:"),$Ft.forEach(t),w5r=i(_i),m(Yy.$$.fragment,_i),_i.forEach(t),A5r=i(pi),xo=n(pi,"DIV",{class:!0});var ka=s(xo);m(Ky.$$.fragment,ka),y5r=i(ka),Ybe=n(ka,"P",{});var IFt=s(Ybe);L5r=r(IFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IFt.forEach(t),x5r=i(ka),Sn=n(ka,"P",{});var n3=s(Sn);k5r=r(n3,"The model class to instantiate is selected based on the "),Kbe=n(n3,"CODE",{});var qFt=s(Kbe);S5r=r(qFt,"model_type"),qFt.forEach(t),R5r=r(n3,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(n3,"CODE",{});var NFt=s(Zbe);B5r=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),P5r=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(n3,"CODE",{});var jFt=s(e2e);$5r=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),I5r=r(n3,":"),n3.forEach(t),q5r=i(ka),fe=n(ka,"UL",{});var ue=s(fe);XM=n(ue,"LI",{});var Fke=s(XM);o2e=n(Fke,"STRONG",{});var DFt=s(o2e);N5r=r(DFt,"albert"),DFt.forEach(t),j5r=r(Fke," \u2014 "),rW=n(Fke,"A",{href:!0});var GFt=s(rW);D5r=r(GFt,"FlaxAlbertForPreTraining"),GFt.forEach(t),G5r=r(Fke," (ALBERT model)"),Fke.forEach(t),O5r=i(ue),zM=n(ue,"LI",{});var Tke=s(zM);r2e=n(Tke,"STRONG",{});var OFt=s(r2e);V5r=r(OFt,"bart"),OFt.forEach(t),X5r=r(Tke," \u2014 "),tW=n(Tke,"A",{href:!0});var VFt=s(tW);z5r=r(VFt,"FlaxBartForConditionalGeneration"),VFt.forEach(t),Q5r=r(Tke," (BART model)"),Tke.forEach(t),W5r=i(ue),QM=n(ue,"LI",{});var Mke=s(QM);t2e=n(Mke,"STRONG",{});var XFt=s(t2e);H5r=r(XFt,"bert"),XFt.forEach(t),U5r=r(Mke," \u2014 "),aW=n(Mke,"A",{href:!0});var zFt=s(aW);J5r=r(zFt,"FlaxBertForPreTraining"),zFt.forEach(t),Y5r=r(Mke," (BERT model)"),Mke.forEach(t),K5r=i(ue),WM=n(ue,"LI",{});var Eke=s(WM);a2e=n(Eke,"STRONG",{});var QFt=s(a2e);Z5r=r(QFt,"big_bird"),QFt.forEach(t),e3r=r(Eke," \u2014 "),nW=n(Eke,"A",{href:!0});var WFt=s(nW);o3r=r(WFt,"FlaxBigBirdForPreTraining"),WFt.forEach(t),r3r=r(Eke," (BigBird model)"),Eke.forEach(t),t3r=i(ue),HM=n(ue,"LI",{});var Cke=s(HM);n2e=n(Cke,"STRONG",{});var HFt=s(n2e);a3r=r(HFt,"electra"),HFt.forEach(t),n3r=r(Cke," \u2014 "),sW=n(Cke,"A",{href:!0});var UFt=s(sW);s3r=r(UFt,"FlaxElectraForPreTraining"),UFt.forEach(t),l3r=r(Cke," (ELECTRA model)"),Cke.forEach(t),i3r=i(ue),UM=n(ue,"LI",{});var wke=s(UM);s2e=n(wke,"STRONG",{});var JFt=s(s2e);d3r=r(JFt,"mbart"),JFt.forEach(t),c3r=r(wke," \u2014 "),lW=n(wke,"A",{href:!0});var YFt=s(lW);f3r=r(YFt,"FlaxMBartForConditionalGeneration"),YFt.forEach(t),m3r=r(wke," (mBART model)"),wke.forEach(t),g3r=i(ue),JM=n(ue,"LI",{});var Ake=s(JM);l2e=n(Ake,"STRONG",{});var KFt=s(l2e);h3r=r(KFt,"mt5"),KFt.forEach(t),u3r=r(Ake," \u2014 "),iW=n(Ake,"A",{href:!0});var ZFt=s(iW);p3r=r(ZFt,"FlaxMT5ForConditionalGeneration"),ZFt.forEach(t),_3r=r(Ake," (mT5 model)"),Ake.forEach(t),v3r=i(ue),YM=n(ue,"LI",{});var yke=s(YM);i2e=n(yke,"STRONG",{});var e0t=s(i2e);b3r=r(e0t,"roberta"),e0t.forEach(t),F3r=r(yke," \u2014 "),dW=n(yke,"A",{href:!0});var o0t=s(dW);T3r=r(o0t,"FlaxRobertaForMaskedLM"),o0t.forEach(t),M3r=r(yke," (RoBERTa model)"),yke.forEach(t),E3r=i(ue),KM=n(ue,"LI",{});var Lke=s(KM);d2e=n(Lke,"STRONG",{});var r0t=s(d2e);C3r=r(r0t,"roformer"),r0t.forEach(t),w3r=r(Lke," \u2014 "),cW=n(Lke,"A",{href:!0});var t0t=s(cW);A3r=r(t0t,"FlaxRoFormerForMaskedLM"),t0t.forEach(t),y3r=r(Lke," (RoFormer model)"),Lke.forEach(t),L3r=i(ue),ZM=n(ue,"LI",{});var xke=s(ZM);c2e=n(xke,"STRONG",{});var a0t=s(c2e);x3r=r(a0t,"t5"),a0t.forEach(t),k3r=r(xke," \u2014 "),fW=n(xke,"A",{href:!0});var n0t=s(fW);S3r=r(n0t,"FlaxT5ForConditionalGeneration"),n0t.forEach(t),R3r=r(xke," (T5 model)"),xke.forEach(t),B3r=i(ue),eE=n(ue,"LI",{});var kke=s(eE);f2e=n(kke,"STRONG",{});var s0t=s(f2e);P3r=r(s0t,"wav2vec2"),s0t.forEach(t),$3r=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var l0t=s(mW);I3r=r(l0t,"FlaxWav2Vec2ForPreTraining"),l0t.forEach(t),q3r=r(kke," (Wav2Vec2 model)"),kke.forEach(t),N3r=i(ue),oE=n(ue,"LI",{});var Ske=s(oE);m2e=n(Ske,"STRONG",{});var i0t=s(m2e);j3r=r(i0t,"xlm-roberta"),i0t.forEach(t),D3r=r(Ske," \u2014 "),gW=n(Ske,"A",{href:!0});var d0t=s(gW);G3r=r(d0t,"FlaxXLMRobertaForMaskedLM"),d0t.forEach(t),O3r=r(Ske," (XLM-RoBERTa model)"),Ske.forEach(t),ue.forEach(t),V3r=i(ka),g2e=n(ka,"P",{});var c0t=s(g2e);X3r=r(c0t,"Examples:"),c0t.forEach(t),z3r=i(ka),m(Zy.$$.fragment,ka),ka.forEach(t),pi.forEach(t),FBe=i(c),lf=n(c,"H2",{class:!0});var S$e=s(lf);rE=n(S$e,"A",{id:!0,class:!0,href:!0});var f0t=s(rE);h2e=n(f0t,"SPAN",{});var m0t=s(h2e);m(eL.$$.fragment,m0t),m0t.forEach(t),f0t.forEach(t),Q3r=i(S$e),u2e=n(S$e,"SPAN",{});var g0t=s(u2e);W3r=r(g0t,"FlaxAutoModelForMaskedLM"),g0t.forEach(t),S$e.forEach(t),TBe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(oL.$$.fragment,vi),H3r=i(vi),df=n(vi,"P",{});var TJ=s(df);U3r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hW=n(TJ,"A",{href:!0});var h0t=s(hW);J3r=r(h0t,"from_pretrained()"),h0t.forEach(t),Y3r=r(TJ," class method or the "),uW=n(TJ,"A",{href:!0});var u0t=s(uW);K3r=r(u0t,"from_config()"),u0t.forEach(t),Z3r=r(TJ,` class
method.`),TJ.forEach(t),eCr=i(vi),rL=n(vi,"P",{});var R$e=s(rL);oCr=r(R$e,"This class cannot be instantiated directly using "),p2e=n(R$e,"CODE",{});var p0t=s(p2e);rCr=r(p0t,"__init__()"),p0t.forEach(t),tCr=r(R$e," (throws an error)."),R$e.forEach(t),aCr=i(vi),xt=n(vi,"DIV",{class:!0});var bi=s(xt);m(tL.$$.fragment,bi),nCr=i(bi),_2e=n(bi,"P",{});var _0t=s(_2e);sCr=r(_0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_0t.forEach(t),lCr=i(bi),cf=n(bi,"P",{});var MJ=s(cf);iCr=r(MJ,`Note:
Loading a model from its configuration file does `),v2e=n(MJ,"STRONG",{});var v0t=s(v2e);dCr=r(v0t,"not"),v0t.forEach(t),cCr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(MJ,"A",{href:!0});var b0t=s(pW);fCr=r(b0t,"from_pretrained()"),b0t.forEach(t),mCr=r(MJ," to load the model weights."),MJ.forEach(t),gCr=i(bi),b2e=n(bi,"P",{});var F0t=s(b2e);hCr=r(F0t,"Examples:"),F0t.forEach(t),uCr=i(bi),m(aL.$$.fragment,bi),bi.forEach(t),pCr=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);m(nL.$$.fragment,Sa),_Cr=i(Sa),F2e=n(Sa,"P",{});var T0t=s(F2e);vCr=r(T0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T0t.forEach(t),bCr=i(Sa),Rn=n(Sa,"P",{});var s3=s(Rn);FCr=r(s3,"The model class to instantiate is selected based on the "),T2e=n(s3,"CODE",{});var M0t=s(T2e);TCr=r(M0t,"model_type"),M0t.forEach(t),MCr=r(s3,` property of the config object (either
passed as an argument or loaded from `),M2e=n(s3,"CODE",{});var E0t=s(M2e);ECr=r(E0t,"pretrained_model_name_or_path"),E0t.forEach(t),CCr=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(s3,"CODE",{});var C0t=s(E2e);wCr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),ACr=r(s3,":"),s3.forEach(t),yCr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);tE=n(Ae,"LI",{});var Rke=s(tE);C2e=n(Rke,"STRONG",{});var w0t=s(C2e);LCr=r(w0t,"albert"),w0t.forEach(t),xCr=r(Rke," \u2014 "),_W=n(Rke,"A",{href:!0});var A0t=s(_W);kCr=r(A0t,"FlaxAlbertForMaskedLM"),A0t.forEach(t),SCr=r(Rke," (ALBERT model)"),Rke.forEach(t),RCr=i(Ae),aE=n(Ae,"LI",{});var Bke=s(aE);w2e=n(Bke,"STRONG",{});var y0t=s(w2e);BCr=r(y0t,"bart"),y0t.forEach(t),PCr=r(Bke," \u2014 "),vW=n(Bke,"A",{href:!0});var L0t=s(vW);$Cr=r(L0t,"FlaxBartForConditionalGeneration"),L0t.forEach(t),ICr=r(Bke," (BART model)"),Bke.forEach(t),qCr=i(Ae),nE=n(Ae,"LI",{});var Pke=s(nE);A2e=n(Pke,"STRONG",{});var x0t=s(A2e);NCr=r(x0t,"bert"),x0t.forEach(t),jCr=r(Pke," \u2014 "),bW=n(Pke,"A",{href:!0});var k0t=s(bW);DCr=r(k0t,"FlaxBertForMaskedLM"),k0t.forEach(t),GCr=r(Pke," (BERT model)"),Pke.forEach(t),OCr=i(Ae),sE=n(Ae,"LI",{});var $ke=s(sE);y2e=n($ke,"STRONG",{});var S0t=s(y2e);VCr=r(S0t,"big_bird"),S0t.forEach(t),XCr=r($ke," \u2014 "),FW=n($ke,"A",{href:!0});var R0t=s(FW);zCr=r(R0t,"FlaxBigBirdForMaskedLM"),R0t.forEach(t),QCr=r($ke," (BigBird model)"),$ke.forEach(t),WCr=i(Ae),lE=n(Ae,"LI",{});var Ike=s(lE);L2e=n(Ike,"STRONG",{});var B0t=s(L2e);HCr=r(B0t,"distilbert"),B0t.forEach(t),UCr=r(Ike," \u2014 "),TW=n(Ike,"A",{href:!0});var P0t=s(TW);JCr=r(P0t,"FlaxDistilBertForMaskedLM"),P0t.forEach(t),YCr=r(Ike," (DistilBERT model)"),Ike.forEach(t),KCr=i(Ae),iE=n(Ae,"LI",{});var qke=s(iE);x2e=n(qke,"STRONG",{});var $0t=s(x2e);ZCr=r($0t,"electra"),$0t.forEach(t),ewr=r(qke," \u2014 "),MW=n(qke,"A",{href:!0});var I0t=s(MW);owr=r(I0t,"FlaxElectraForMaskedLM"),I0t.forEach(t),rwr=r(qke," (ELECTRA model)"),qke.forEach(t),twr=i(Ae),dE=n(Ae,"LI",{});var Nke=s(dE);k2e=n(Nke,"STRONG",{});var q0t=s(k2e);awr=r(q0t,"mbart"),q0t.forEach(t),nwr=r(Nke," \u2014 "),EW=n(Nke,"A",{href:!0});var N0t=s(EW);swr=r(N0t,"FlaxMBartForConditionalGeneration"),N0t.forEach(t),lwr=r(Nke," (mBART model)"),Nke.forEach(t),iwr=i(Ae),cE=n(Ae,"LI",{});var jke=s(cE);S2e=n(jke,"STRONG",{});var j0t=s(S2e);dwr=r(j0t,"roberta"),j0t.forEach(t),cwr=r(jke," \u2014 "),CW=n(jke,"A",{href:!0});var D0t=s(CW);fwr=r(D0t,"FlaxRobertaForMaskedLM"),D0t.forEach(t),mwr=r(jke," (RoBERTa model)"),jke.forEach(t),gwr=i(Ae),fE=n(Ae,"LI",{});var Dke=s(fE);R2e=n(Dke,"STRONG",{});var G0t=s(R2e);hwr=r(G0t,"roformer"),G0t.forEach(t),uwr=r(Dke," \u2014 "),wW=n(Dke,"A",{href:!0});var O0t=s(wW);pwr=r(O0t,"FlaxRoFormerForMaskedLM"),O0t.forEach(t),_wr=r(Dke," (RoFormer model)"),Dke.forEach(t),vwr=i(Ae),mE=n(Ae,"LI",{});var Gke=s(mE);B2e=n(Gke,"STRONG",{});var V0t=s(B2e);bwr=r(V0t,"xlm-roberta"),V0t.forEach(t),Fwr=r(Gke," \u2014 "),AW=n(Gke,"A",{href:!0});var X0t=s(AW);Twr=r(X0t,"FlaxXLMRobertaForMaskedLM"),X0t.forEach(t),Mwr=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),Ae.forEach(t),Ewr=i(Sa),P2e=n(Sa,"P",{});var z0t=s(P2e);Cwr=r(z0t,"Examples:"),z0t.forEach(t),wwr=i(Sa),m(sL.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),MBe=i(c),ff=n(c,"H2",{class:!0});var B$e=s(ff);gE=n(B$e,"A",{id:!0,class:!0,href:!0});var Q0t=s(gE);$2e=n(Q0t,"SPAN",{});var W0t=s($2e);m(lL.$$.fragment,W0t),W0t.forEach(t),Q0t.forEach(t),Awr=i(B$e),I2e=n(B$e,"SPAN",{});var H0t=s(I2e);ywr=r(H0t,"FlaxAutoModelForSeq2SeqLM"),H0t.forEach(t),B$e.forEach(t),EBe=i(c),Ir=n(c,"DIV",{class:!0});var Fi=s(Ir);m(iL.$$.fragment,Fi),Lwr=i(Fi),mf=n(Fi,"P",{});var EJ=s(mf);xwr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=n(EJ,"A",{href:!0});var U0t=s(yW);kwr=r(U0t,"from_pretrained()"),U0t.forEach(t),Swr=r(EJ," class method or the "),LW=n(EJ,"A",{href:!0});var J0t=s(LW);Rwr=r(J0t,"from_config()"),J0t.forEach(t),Bwr=r(EJ,` class
method.`),EJ.forEach(t),Pwr=i(Fi),dL=n(Fi,"P",{});var P$e=s(dL);$wr=r(P$e,"This class cannot be instantiated directly using "),q2e=n(P$e,"CODE",{});var Y0t=s(q2e);Iwr=r(Y0t,"__init__()"),Y0t.forEach(t),qwr=r(P$e," (throws an error)."),P$e.forEach(t),Nwr=i(Fi),kt=n(Fi,"DIV",{class:!0});var Ti=s(kt);m(cL.$$.fragment,Ti),jwr=i(Ti),N2e=n(Ti,"P",{});var K0t=s(N2e);Dwr=r(K0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K0t.forEach(t),Gwr=i(Ti),gf=n(Ti,"P",{});var CJ=s(gf);Owr=r(CJ,`Note:
Loading a model from its configuration file does `),j2e=n(CJ,"STRONG",{});var Z0t=s(j2e);Vwr=r(Z0t,"not"),Z0t.forEach(t),Xwr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(CJ,"A",{href:!0});var eTt=s(xW);zwr=r(eTt,"from_pretrained()"),eTt.forEach(t),Qwr=r(CJ," to load the model weights."),CJ.forEach(t),Wwr=i(Ti),D2e=n(Ti,"P",{});var oTt=s(D2e);Hwr=r(oTt,"Examples:"),oTt.forEach(t),Uwr=i(Ti),m(fL.$$.fragment,Ti),Ti.forEach(t),Jwr=i(Fi),So=n(Fi,"DIV",{class:!0});var Ra=s(So);m(mL.$$.fragment,Ra),Ywr=i(Ra),G2e=n(Ra,"P",{});var rTt=s(G2e);Kwr=r(rTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rTt.forEach(t),Zwr=i(Ra),Bn=n(Ra,"P",{});var l3=s(Bn);e6r=r(l3,"The model class to instantiate is selected based on the "),O2e=n(l3,"CODE",{});var tTt=s(O2e);o6r=r(tTt,"model_type"),tTt.forEach(t),r6r=r(l3,` property of the config object (either
passed as an argument or loaded from `),V2e=n(l3,"CODE",{});var aTt=s(V2e);t6r=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),a6r=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(l3,"CODE",{});var nTt=s(X2e);n6r=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),s6r=r(l3,":"),l3.forEach(t),l6r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);hE=n(so,"LI",{});var Oke=s(hE);z2e=n(Oke,"STRONG",{});var sTt=s(z2e);i6r=r(sTt,"bart"),sTt.forEach(t),d6r=r(Oke," \u2014 "),kW=n(Oke,"A",{href:!0});var lTt=s(kW);c6r=r(lTt,"FlaxBartForConditionalGeneration"),lTt.forEach(t),f6r=r(Oke," (BART model)"),Oke.forEach(t),m6r=i(so),uE=n(so,"LI",{});var Vke=s(uE);Q2e=n(Vke,"STRONG",{});var iTt=s(Q2e);g6r=r(iTt,"blenderbot"),iTt.forEach(t),h6r=r(Vke," \u2014 "),SW=n(Vke,"A",{href:!0});var dTt=s(SW);u6r=r(dTt,"FlaxBlenderbotForConditionalGeneration"),dTt.forEach(t),p6r=r(Vke," (Blenderbot model)"),Vke.forEach(t),_6r=i(so),pE=n(so,"LI",{});var Xke=s(pE);W2e=n(Xke,"STRONG",{});var cTt=s(W2e);v6r=r(cTt,"blenderbot-small"),cTt.forEach(t),b6r=r(Xke," \u2014 "),RW=n(Xke,"A",{href:!0});var fTt=s(RW);F6r=r(fTt,"FlaxBlenderbotSmallForConditionalGeneration"),fTt.forEach(t),T6r=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),M6r=i(so),_E=n(so,"LI",{});var zke=s(_E);H2e=n(zke,"STRONG",{});var mTt=s(H2e);E6r=r(mTt,"encoder-decoder"),mTt.forEach(t),C6r=r(zke," \u2014 "),BW=n(zke,"A",{href:!0});var gTt=s(BW);w6r=r(gTt,"FlaxEncoderDecoderModel"),gTt.forEach(t),A6r=r(zke," (Encoder decoder model)"),zke.forEach(t),y6r=i(so),vE=n(so,"LI",{});var Qke=s(vE);U2e=n(Qke,"STRONG",{});var hTt=s(U2e);L6r=r(hTt,"marian"),hTt.forEach(t),x6r=r(Qke," \u2014 "),PW=n(Qke,"A",{href:!0});var uTt=s(PW);k6r=r(uTt,"FlaxMarianMTModel"),uTt.forEach(t),S6r=r(Qke," (Marian model)"),Qke.forEach(t),R6r=i(so),bE=n(so,"LI",{});var Wke=s(bE);J2e=n(Wke,"STRONG",{});var pTt=s(J2e);B6r=r(pTt,"mbart"),pTt.forEach(t),P6r=r(Wke," \u2014 "),$W=n(Wke,"A",{href:!0});var _Tt=s($W);$6r=r(_Tt,"FlaxMBartForConditionalGeneration"),_Tt.forEach(t),I6r=r(Wke," (mBART model)"),Wke.forEach(t),q6r=i(so),FE=n(so,"LI",{});var Hke=s(FE);Y2e=n(Hke,"STRONG",{});var vTt=s(Y2e);N6r=r(vTt,"mt5"),vTt.forEach(t),j6r=r(Hke," \u2014 "),IW=n(Hke,"A",{href:!0});var bTt=s(IW);D6r=r(bTt,"FlaxMT5ForConditionalGeneration"),bTt.forEach(t),G6r=r(Hke," (mT5 model)"),Hke.forEach(t),O6r=i(so),TE=n(so,"LI",{});var Uke=s(TE);K2e=n(Uke,"STRONG",{});var FTt=s(K2e);V6r=r(FTt,"pegasus"),FTt.forEach(t),X6r=r(Uke," \u2014 "),qW=n(Uke,"A",{href:!0});var TTt=s(qW);z6r=r(TTt,"FlaxPegasusForConditionalGeneration"),TTt.forEach(t),Q6r=r(Uke," (Pegasus model)"),Uke.forEach(t),W6r=i(so),ME=n(so,"LI",{});var Jke=s(ME);Z2e=n(Jke,"STRONG",{});var MTt=s(Z2e);H6r=r(MTt,"t5"),MTt.forEach(t),U6r=r(Jke," \u2014 "),NW=n(Jke,"A",{href:!0});var ETt=s(NW);J6r=r(ETt,"FlaxT5ForConditionalGeneration"),ETt.forEach(t),Y6r=r(Jke," (T5 model)"),Jke.forEach(t),so.forEach(t),K6r=i(Ra),eFe=n(Ra,"P",{});var CTt=s(eFe);Z6r=r(CTt,"Examples:"),CTt.forEach(t),eAr=i(Ra),m(gL.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),CBe=i(c),hf=n(c,"H2",{class:!0});var $$e=s(hf);EE=n($$e,"A",{id:!0,class:!0,href:!0});var wTt=s(EE);oFe=n(wTt,"SPAN",{});var ATt=s(oFe);m(hL.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),oAr=i($$e),rFe=n($$e,"SPAN",{});var yTt=s(rFe);rAr=r(yTt,"FlaxAutoModelForSequenceClassification"),yTt.forEach(t),$$e.forEach(t),wBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(uL.$$.fragment,Mi),tAr=i(Mi),uf=n(Mi,"P",{});var wJ=s(uf);aAr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=n(wJ,"A",{href:!0});var LTt=s(jW);nAr=r(LTt,"from_pretrained()"),LTt.forEach(t),sAr=r(wJ," class method or the "),DW=n(wJ,"A",{href:!0});var xTt=s(DW);lAr=r(xTt,"from_config()"),xTt.forEach(t),iAr=r(wJ,` class
method.`),wJ.forEach(t),dAr=i(Mi),pL=n(Mi,"P",{});var I$e=s(pL);cAr=r(I$e,"This class cannot be instantiated directly using "),tFe=n(I$e,"CODE",{});var kTt=s(tFe);fAr=r(kTt,"__init__()"),kTt.forEach(t),mAr=r(I$e," (throws an error)."),I$e.forEach(t),gAr=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(_L.$$.fragment,Ei),hAr=i(Ei),aFe=n(Ei,"P",{});var STt=s(aFe);uAr=r(STt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),STt.forEach(t),pAr=i(Ei),pf=n(Ei,"P",{});var AJ=s(pf);_Ar=r(AJ,`Note:
Loading a model from its configuration file does `),nFe=n(AJ,"STRONG",{});var RTt=s(nFe);vAr=r(RTt,"not"),RTt.forEach(t),bAr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(AJ,"A",{href:!0});var BTt=s(GW);FAr=r(BTt,"from_pretrained()"),BTt.forEach(t),TAr=r(AJ," to load the model weights."),AJ.forEach(t),MAr=i(Ei),sFe=n(Ei,"P",{});var PTt=s(sFe);EAr=r(PTt,"Examples:"),PTt.forEach(t),CAr=i(Ei),m(vL.$$.fragment,Ei),Ei.forEach(t),wAr=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(bL.$$.fragment,Ba),AAr=i(Ba),lFe=n(Ba,"P",{});var $Tt=s(lFe);yAr=r($Tt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Tt.forEach(t),LAr=i(Ba),Pn=n(Ba,"P",{});var i3=s(Pn);xAr=r(i3,"The model class to instantiate is selected based on the "),iFe=n(i3,"CODE",{});var ITt=s(iFe);kAr=r(ITt,"model_type"),ITt.forEach(t),SAr=r(i3,` property of the config object (either
passed as an argument or loaded from `),dFe=n(i3,"CODE",{});var qTt=s(dFe);RAr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),BAr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(i3,"CODE",{});var NTt=s(cFe);PAr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),$Ar=r(i3,":"),i3.forEach(t),IAr=i(Ba),be=n(Ba,"UL",{});var ye=s(be);CE=n(ye,"LI",{});var Yke=s(CE);fFe=n(Yke,"STRONG",{});var jTt=s(fFe);qAr=r(jTt,"albert"),jTt.forEach(t),NAr=r(Yke," \u2014 "),OW=n(Yke,"A",{href:!0});var DTt=s(OW);jAr=r(DTt,"FlaxAlbertForSequenceClassification"),DTt.forEach(t),DAr=r(Yke," (ALBERT model)"),Yke.forEach(t),GAr=i(ye),wE=n(ye,"LI",{});var Kke=s(wE);mFe=n(Kke,"STRONG",{});var GTt=s(mFe);OAr=r(GTt,"bart"),GTt.forEach(t),VAr=r(Kke," \u2014 "),VW=n(Kke,"A",{href:!0});var OTt=s(VW);XAr=r(OTt,"FlaxBartForSequenceClassification"),OTt.forEach(t),zAr=r(Kke," (BART model)"),Kke.forEach(t),QAr=i(ye),AE=n(ye,"LI",{});var Zke=s(AE);gFe=n(Zke,"STRONG",{});var VTt=s(gFe);WAr=r(VTt,"bert"),VTt.forEach(t),HAr=r(Zke," \u2014 "),XW=n(Zke,"A",{href:!0});var XTt=s(XW);UAr=r(XTt,"FlaxBertForSequenceClassification"),XTt.forEach(t),JAr=r(Zke," (BERT model)"),Zke.forEach(t),YAr=i(ye),yE=n(ye,"LI",{});var eSe=s(yE);hFe=n(eSe,"STRONG",{});var zTt=s(hFe);KAr=r(zTt,"big_bird"),zTt.forEach(t),ZAr=r(eSe," \u2014 "),zW=n(eSe,"A",{href:!0});var QTt=s(zW);eyr=r(QTt,"FlaxBigBirdForSequenceClassification"),QTt.forEach(t),oyr=r(eSe," (BigBird model)"),eSe.forEach(t),ryr=i(ye),LE=n(ye,"LI",{});var oSe=s(LE);uFe=n(oSe,"STRONG",{});var WTt=s(uFe);tyr=r(WTt,"distilbert"),WTt.forEach(t),ayr=r(oSe," \u2014 "),QW=n(oSe,"A",{href:!0});var HTt=s(QW);nyr=r(HTt,"FlaxDistilBertForSequenceClassification"),HTt.forEach(t),syr=r(oSe," (DistilBERT model)"),oSe.forEach(t),lyr=i(ye),xE=n(ye,"LI",{});var rSe=s(xE);pFe=n(rSe,"STRONG",{});var UTt=s(pFe);iyr=r(UTt,"electra"),UTt.forEach(t),dyr=r(rSe," \u2014 "),WW=n(rSe,"A",{href:!0});var JTt=s(WW);cyr=r(JTt,"FlaxElectraForSequenceClassification"),JTt.forEach(t),fyr=r(rSe," (ELECTRA model)"),rSe.forEach(t),myr=i(ye),kE=n(ye,"LI",{});var tSe=s(kE);_Fe=n(tSe,"STRONG",{});var YTt=s(_Fe);gyr=r(YTt,"mbart"),YTt.forEach(t),hyr=r(tSe," \u2014 "),HW=n(tSe,"A",{href:!0});var KTt=s(HW);uyr=r(KTt,"FlaxMBartForSequenceClassification"),KTt.forEach(t),pyr=r(tSe," (mBART model)"),tSe.forEach(t),_yr=i(ye),SE=n(ye,"LI",{});var aSe=s(SE);vFe=n(aSe,"STRONG",{});var ZTt=s(vFe);vyr=r(ZTt,"roberta"),ZTt.forEach(t),byr=r(aSe," \u2014 "),UW=n(aSe,"A",{href:!0});var e8t=s(UW);Fyr=r(e8t,"FlaxRobertaForSequenceClassification"),e8t.forEach(t),Tyr=r(aSe," (RoBERTa model)"),aSe.forEach(t),Myr=i(ye),RE=n(ye,"LI",{});var nSe=s(RE);bFe=n(nSe,"STRONG",{});var o8t=s(bFe);Eyr=r(o8t,"roformer"),o8t.forEach(t),Cyr=r(nSe," \u2014 "),JW=n(nSe,"A",{href:!0});var r8t=s(JW);wyr=r(r8t,"FlaxRoFormerForSequenceClassification"),r8t.forEach(t),Ayr=r(nSe," (RoFormer model)"),nSe.forEach(t),yyr=i(ye),BE=n(ye,"LI",{});var sSe=s(BE);FFe=n(sSe,"STRONG",{});var t8t=s(FFe);Lyr=r(t8t,"xlm-roberta"),t8t.forEach(t),xyr=r(sSe," \u2014 "),YW=n(sSe,"A",{href:!0});var a8t=s(YW);kyr=r(a8t,"FlaxXLMRobertaForSequenceClassification"),a8t.forEach(t),Syr=r(sSe," (XLM-RoBERTa model)"),sSe.forEach(t),ye.forEach(t),Ryr=i(Ba),TFe=n(Ba,"P",{});var n8t=s(TFe);Byr=r(n8t,"Examples:"),n8t.forEach(t),Pyr=i(Ba),m(FL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),ABe=i(c),_f=n(c,"H2",{class:!0});var q$e=s(_f);PE=n(q$e,"A",{id:!0,class:!0,href:!0});var s8t=s(PE);MFe=n(s8t,"SPAN",{});var l8t=s(MFe);m(TL.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),$yr=i(q$e),EFe=n(q$e,"SPAN",{});var i8t=s(EFe);Iyr=r(i8t,"FlaxAutoModelForQuestionAnswering"),i8t.forEach(t),q$e.forEach(t),yBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(ML.$$.fragment,Ci),qyr=i(Ci),vf=n(Ci,"P",{});var yJ=s(vf);Nyr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=n(yJ,"A",{href:!0});var d8t=s(KW);jyr=r(d8t,"from_pretrained()"),d8t.forEach(t),Dyr=r(yJ," class method or the "),ZW=n(yJ,"A",{href:!0});var c8t=s(ZW);Gyr=r(c8t,"from_config()"),c8t.forEach(t),Oyr=r(yJ,` class
method.`),yJ.forEach(t),Vyr=i(Ci),EL=n(Ci,"P",{});var N$e=s(EL);Xyr=r(N$e,"This class cannot be instantiated directly using "),CFe=n(N$e,"CODE",{});var f8t=s(CFe);zyr=r(f8t,"__init__()"),f8t.forEach(t),Qyr=r(N$e," (throws an error)."),N$e.forEach(t),Wyr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(CL.$$.fragment,wi),Hyr=i(wi),wFe=n(wi,"P",{});var m8t=s(wFe);Uyr=r(m8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m8t.forEach(t),Jyr=i(wi),bf=n(wi,"P",{});var LJ=s(bf);Yyr=r(LJ,`Note:
Loading a model from its configuration file does `),AFe=n(LJ,"STRONG",{});var g8t=s(AFe);Kyr=r(g8t,"not"),g8t.forEach(t),Zyr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(LJ,"A",{href:!0});var h8t=s(eH);eLr=r(h8t,"from_pretrained()"),h8t.forEach(t),oLr=r(LJ," to load the model weights."),LJ.forEach(t),rLr=i(wi),yFe=n(wi,"P",{});var u8t=s(yFe);tLr=r(u8t,"Examples:"),u8t.forEach(t),aLr=i(wi),m(wL.$$.fragment,wi),wi.forEach(t),nLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(AL.$$.fragment,Pa),sLr=i(Pa),LFe=n(Pa,"P",{});var p8t=s(LFe);lLr=r(p8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p8t.forEach(t),iLr=i(Pa),$n=n(Pa,"P",{});var d3=s($n);dLr=r(d3,"The model class to instantiate is selected based on the "),xFe=n(d3,"CODE",{});var _8t=s(xFe);cLr=r(_8t,"model_type"),_8t.forEach(t),fLr=r(d3,` property of the config object (either
passed as an argument or loaded from `),kFe=n(d3,"CODE",{});var v8t=s(kFe);mLr=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),gLr=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(d3,"CODE",{});var b8t=s(SFe);hLr=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),uLr=r(d3,":"),d3.forEach(t),pLr=i(Pa),Fe=n(Pa,"UL",{});var Le=s(Fe);$E=n(Le,"LI",{});var lSe=s($E);RFe=n(lSe,"STRONG",{});var F8t=s(RFe);_Lr=r(F8t,"albert"),F8t.forEach(t),vLr=r(lSe," \u2014 "),oH=n(lSe,"A",{href:!0});var T8t=s(oH);bLr=r(T8t,"FlaxAlbertForQuestionAnswering"),T8t.forEach(t),FLr=r(lSe," (ALBERT model)"),lSe.forEach(t),TLr=i(Le),IE=n(Le,"LI",{});var iSe=s(IE);BFe=n(iSe,"STRONG",{});var M8t=s(BFe);MLr=r(M8t,"bart"),M8t.forEach(t),ELr=r(iSe," \u2014 "),rH=n(iSe,"A",{href:!0});var E8t=s(rH);CLr=r(E8t,"FlaxBartForQuestionAnswering"),E8t.forEach(t),wLr=r(iSe," (BART model)"),iSe.forEach(t),ALr=i(Le),qE=n(Le,"LI",{});var dSe=s(qE);PFe=n(dSe,"STRONG",{});var C8t=s(PFe);yLr=r(C8t,"bert"),C8t.forEach(t),LLr=r(dSe," \u2014 "),tH=n(dSe,"A",{href:!0});var w8t=s(tH);xLr=r(w8t,"FlaxBertForQuestionAnswering"),w8t.forEach(t),kLr=r(dSe," (BERT model)"),dSe.forEach(t),SLr=i(Le),NE=n(Le,"LI",{});var cSe=s(NE);$Fe=n(cSe,"STRONG",{});var A8t=s($Fe);RLr=r(A8t,"big_bird"),A8t.forEach(t),BLr=r(cSe," \u2014 "),aH=n(cSe,"A",{href:!0});var y8t=s(aH);PLr=r(y8t,"FlaxBigBirdForQuestionAnswering"),y8t.forEach(t),$Lr=r(cSe," (BigBird model)"),cSe.forEach(t),ILr=i(Le),jE=n(Le,"LI",{});var fSe=s(jE);IFe=n(fSe,"STRONG",{});var L8t=s(IFe);qLr=r(L8t,"distilbert"),L8t.forEach(t),NLr=r(fSe," \u2014 "),nH=n(fSe,"A",{href:!0});var x8t=s(nH);jLr=r(x8t,"FlaxDistilBertForQuestionAnswering"),x8t.forEach(t),DLr=r(fSe," (DistilBERT model)"),fSe.forEach(t),GLr=i(Le),DE=n(Le,"LI",{});var mSe=s(DE);qFe=n(mSe,"STRONG",{});var k8t=s(qFe);OLr=r(k8t,"electra"),k8t.forEach(t),VLr=r(mSe," \u2014 "),sH=n(mSe,"A",{href:!0});var S8t=s(sH);XLr=r(S8t,"FlaxElectraForQuestionAnswering"),S8t.forEach(t),zLr=r(mSe," (ELECTRA model)"),mSe.forEach(t),QLr=i(Le),GE=n(Le,"LI",{});var gSe=s(GE);NFe=n(gSe,"STRONG",{});var R8t=s(NFe);WLr=r(R8t,"mbart"),R8t.forEach(t),HLr=r(gSe," \u2014 "),lH=n(gSe,"A",{href:!0});var B8t=s(lH);ULr=r(B8t,"FlaxMBartForQuestionAnswering"),B8t.forEach(t),JLr=r(gSe," (mBART model)"),gSe.forEach(t),YLr=i(Le),OE=n(Le,"LI",{});var hSe=s(OE);jFe=n(hSe,"STRONG",{});var P8t=s(jFe);KLr=r(P8t,"roberta"),P8t.forEach(t),ZLr=r(hSe," \u2014 "),iH=n(hSe,"A",{href:!0});var $8t=s(iH);e7r=r($8t,"FlaxRobertaForQuestionAnswering"),$8t.forEach(t),o7r=r(hSe," (RoBERTa model)"),hSe.forEach(t),r7r=i(Le),VE=n(Le,"LI",{});var uSe=s(VE);DFe=n(uSe,"STRONG",{});var I8t=s(DFe);t7r=r(I8t,"roformer"),I8t.forEach(t),a7r=r(uSe," \u2014 "),dH=n(uSe,"A",{href:!0});var q8t=s(dH);n7r=r(q8t,"FlaxRoFormerForQuestionAnswering"),q8t.forEach(t),s7r=r(uSe," (RoFormer model)"),uSe.forEach(t),l7r=i(Le),XE=n(Le,"LI",{});var pSe=s(XE);GFe=n(pSe,"STRONG",{});var N8t=s(GFe);i7r=r(N8t,"xlm-roberta"),N8t.forEach(t),d7r=r(pSe," \u2014 "),cH=n(pSe,"A",{href:!0});var j8t=s(cH);c7r=r(j8t,"FlaxXLMRobertaForQuestionAnswering"),j8t.forEach(t),f7r=r(pSe," (XLM-RoBERTa model)"),pSe.forEach(t),Le.forEach(t),m7r=i(Pa),OFe=n(Pa,"P",{});var D8t=s(OFe);g7r=r(D8t,"Examples:"),D8t.forEach(t),h7r=i(Pa),m(yL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),LBe=i(c),Ff=n(c,"H2",{class:!0});var j$e=s(Ff);zE=n(j$e,"A",{id:!0,class:!0,href:!0});var G8t=s(zE);VFe=n(G8t,"SPAN",{});var O8t=s(VFe);m(LL.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),u7r=i(j$e),XFe=n(j$e,"SPAN",{});var V8t=s(XFe);p7r=r(V8t,"FlaxAutoModelForTokenClassification"),V8t.forEach(t),j$e.forEach(t),xBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(xL.$$.fragment,Ai),_7r=i(Ai),Tf=n(Ai,"P",{});var xJ=s(Tf);v7r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=n(xJ,"A",{href:!0});var X8t=s(fH);b7r=r(X8t,"from_pretrained()"),X8t.forEach(t),F7r=r(xJ," class method or the "),mH=n(xJ,"A",{href:!0});var z8t=s(mH);T7r=r(z8t,"from_config()"),z8t.forEach(t),M7r=r(xJ,` class
method.`),xJ.forEach(t),E7r=i(Ai),kL=n(Ai,"P",{});var D$e=s(kL);C7r=r(D$e,"This class cannot be instantiated directly using "),zFe=n(D$e,"CODE",{});var Q8t=s(zFe);w7r=r(Q8t,"__init__()"),Q8t.forEach(t),A7r=r(D$e," (throws an error)."),D$e.forEach(t),y7r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(SL.$$.fragment,yi),L7r=i(yi),QFe=n(yi,"P",{});var W8t=s(QFe);x7r=r(W8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W8t.forEach(t),k7r=i(yi),Mf=n(yi,"P",{});var kJ=s(Mf);S7r=r(kJ,`Note:
Loading a model from its configuration file does `),WFe=n(kJ,"STRONG",{});var H8t=s(WFe);R7r=r(H8t,"not"),H8t.forEach(t),B7r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(kJ,"A",{href:!0});var U8t=s(gH);P7r=r(U8t,"from_pretrained()"),U8t.forEach(t),$7r=r(kJ," to load the model weights."),kJ.forEach(t),I7r=i(yi),HFe=n(yi,"P",{});var J8t=s(HFe);q7r=r(J8t,"Examples:"),J8t.forEach(t),N7r=i(yi),m(RL.$$.fragment,yi),yi.forEach(t),j7r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(BL.$$.fragment,$a),D7r=i($a),UFe=n($a,"P",{});var Y8t=s(UFe);G7r=r(Y8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y8t.forEach(t),O7r=i($a),In=n($a,"P",{});var c3=s(In);V7r=r(c3,"The model class to instantiate is selected based on the "),JFe=n(c3,"CODE",{});var K8t=s(JFe);X7r=r(K8t,"model_type"),K8t.forEach(t),z7r=r(c3,` property of the config object (either
passed as an argument or loaded from `),YFe=n(c3,"CODE",{});var Z8t=s(YFe);Q7r=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),W7r=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(c3,"CODE",{});var eMt=s(KFe);H7r=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),U7r=r(c3,":"),c3.forEach(t),J7r=i($a),Be=n($a,"UL",{});var Oo=s(Be);QE=n(Oo,"LI",{});var _Se=s(QE);ZFe=n(_Se,"STRONG",{});var oMt=s(ZFe);Y7r=r(oMt,"albert"),oMt.forEach(t),K7r=r(_Se," \u2014 "),hH=n(_Se,"A",{href:!0});var rMt=s(hH);Z7r=r(rMt,"FlaxAlbertForTokenClassification"),rMt.forEach(t),exr=r(_Se," (ALBERT model)"),_Se.forEach(t),oxr=i(Oo),WE=n(Oo,"LI",{});var vSe=s(WE);e0e=n(vSe,"STRONG",{});var tMt=s(e0e);rxr=r(tMt,"bert"),tMt.forEach(t),txr=r(vSe," \u2014 "),uH=n(vSe,"A",{href:!0});var aMt=s(uH);axr=r(aMt,"FlaxBertForTokenClassification"),aMt.forEach(t),nxr=r(vSe," (BERT model)"),vSe.forEach(t),sxr=i(Oo),HE=n(Oo,"LI",{});var bSe=s(HE);o0e=n(bSe,"STRONG",{});var nMt=s(o0e);lxr=r(nMt,"big_bird"),nMt.forEach(t),ixr=r(bSe," \u2014 "),pH=n(bSe,"A",{href:!0});var sMt=s(pH);dxr=r(sMt,"FlaxBigBirdForTokenClassification"),sMt.forEach(t),cxr=r(bSe," (BigBird model)"),bSe.forEach(t),fxr=i(Oo),UE=n(Oo,"LI",{});var FSe=s(UE);r0e=n(FSe,"STRONG",{});var lMt=s(r0e);mxr=r(lMt,"distilbert"),lMt.forEach(t),gxr=r(FSe," \u2014 "),_H=n(FSe,"A",{href:!0});var iMt=s(_H);hxr=r(iMt,"FlaxDistilBertForTokenClassification"),iMt.forEach(t),uxr=r(FSe," (DistilBERT model)"),FSe.forEach(t),pxr=i(Oo),JE=n(Oo,"LI",{});var TSe=s(JE);t0e=n(TSe,"STRONG",{});var dMt=s(t0e);_xr=r(dMt,"electra"),dMt.forEach(t),vxr=r(TSe," \u2014 "),vH=n(TSe,"A",{href:!0});var cMt=s(vH);bxr=r(cMt,"FlaxElectraForTokenClassification"),cMt.forEach(t),Fxr=r(TSe," (ELECTRA model)"),TSe.forEach(t),Txr=i(Oo),YE=n(Oo,"LI",{});var MSe=s(YE);a0e=n(MSe,"STRONG",{});var fMt=s(a0e);Mxr=r(fMt,"roberta"),fMt.forEach(t),Exr=r(MSe," \u2014 "),bH=n(MSe,"A",{href:!0});var mMt=s(bH);Cxr=r(mMt,"FlaxRobertaForTokenClassification"),mMt.forEach(t),wxr=r(MSe," (RoBERTa model)"),MSe.forEach(t),Axr=i(Oo),KE=n(Oo,"LI",{});var ESe=s(KE);n0e=n(ESe,"STRONG",{});var gMt=s(n0e);yxr=r(gMt,"roformer"),gMt.forEach(t),Lxr=r(ESe," \u2014 "),FH=n(ESe,"A",{href:!0});var hMt=s(FH);xxr=r(hMt,"FlaxRoFormerForTokenClassification"),hMt.forEach(t),kxr=r(ESe," (RoFormer model)"),ESe.forEach(t),Sxr=i(Oo),ZE=n(Oo,"LI",{});var CSe=s(ZE);s0e=n(CSe,"STRONG",{});var uMt=s(s0e);Rxr=r(uMt,"xlm-roberta"),uMt.forEach(t),Bxr=r(CSe," \u2014 "),TH=n(CSe,"A",{href:!0});var pMt=s(TH);Pxr=r(pMt,"FlaxXLMRobertaForTokenClassification"),pMt.forEach(t),$xr=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Oo.forEach(t),Ixr=i($a),l0e=n($a,"P",{});var _Mt=s(l0e);qxr=r(_Mt,"Examples:"),_Mt.forEach(t),Nxr=i($a),m(PL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),kBe=i(c),Ef=n(c,"H2",{class:!0});var G$e=s(Ef);e5=n(G$e,"A",{id:!0,class:!0,href:!0});var vMt=s(e5);i0e=n(vMt,"SPAN",{});var bMt=s(i0e);m($L.$$.fragment,bMt),bMt.forEach(t),vMt.forEach(t),jxr=i(G$e),d0e=n(G$e,"SPAN",{});var FMt=s(d0e);Dxr=r(FMt,"FlaxAutoModelForMultipleChoice"),FMt.forEach(t),G$e.forEach(t),SBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(IL.$$.fragment,Li),Gxr=i(Li),Cf=n(Li,"P",{});var SJ=s(Cf);Oxr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=n(SJ,"A",{href:!0});var TMt=s(MH);Vxr=r(TMt,"from_pretrained()"),TMt.forEach(t),Xxr=r(SJ," class method or the "),EH=n(SJ,"A",{href:!0});var MMt=s(EH);zxr=r(MMt,"from_config()"),MMt.forEach(t),Qxr=r(SJ,` class
method.`),SJ.forEach(t),Wxr=i(Li),qL=n(Li,"P",{});var O$e=s(qL);Hxr=r(O$e,"This class cannot be instantiated directly using "),c0e=n(O$e,"CODE",{});var EMt=s(c0e);Uxr=r(EMt,"__init__()"),EMt.forEach(t),Jxr=r(O$e," (throws an error)."),O$e.forEach(t),Yxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(NL.$$.fragment,xi),Kxr=i(xi),f0e=n(xi,"P",{});var CMt=s(f0e);Zxr=r(CMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CMt.forEach(t),e9r=i(xi),wf=n(xi,"P",{});var RJ=s(wf);o9r=r(RJ,`Note:
Loading a model from its configuration file does `),m0e=n(RJ,"STRONG",{});var wMt=s(m0e);r9r=r(wMt,"not"),wMt.forEach(t),t9r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(RJ,"A",{href:!0});var AMt=s(CH);a9r=r(AMt,"from_pretrained()"),AMt.forEach(t),n9r=r(RJ," to load the model weights."),RJ.forEach(t),s9r=i(xi),g0e=n(xi,"P",{});var yMt=s(g0e);l9r=r(yMt,"Examples:"),yMt.forEach(t),i9r=i(xi),m(jL.$$.fragment,xi),xi.forEach(t),d9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(DL.$$.fragment,Ia),c9r=i(Ia),h0e=n(Ia,"P",{});var LMt=s(h0e);f9r=r(LMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LMt.forEach(t),m9r=i(Ia),qn=n(Ia,"P",{});var f3=s(qn);g9r=r(f3,"The model class to instantiate is selected based on the "),u0e=n(f3,"CODE",{});var xMt=s(u0e);h9r=r(xMt,"model_type"),xMt.forEach(t),u9r=r(f3,` property of the config object (either
passed as an argument or loaded from `),p0e=n(f3,"CODE",{});var kMt=s(p0e);p9r=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),_9r=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(f3,"CODE",{});var SMt=s(_0e);v9r=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),b9r=r(f3,":"),f3.forEach(t),F9r=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);o5=n(Vo,"LI",{});var wSe=s(o5);v0e=n(wSe,"STRONG",{});var RMt=s(v0e);T9r=r(RMt,"albert"),RMt.forEach(t),M9r=r(wSe," \u2014 "),wH=n(wSe,"A",{href:!0});var BMt=s(wH);E9r=r(BMt,"FlaxAlbertForMultipleChoice"),BMt.forEach(t),C9r=r(wSe," (ALBERT model)"),wSe.forEach(t),w9r=i(Vo),r5=n(Vo,"LI",{});var ASe=s(r5);b0e=n(ASe,"STRONG",{});var PMt=s(b0e);A9r=r(PMt,"bert"),PMt.forEach(t),y9r=r(ASe," \u2014 "),AH=n(ASe,"A",{href:!0});var $Mt=s(AH);L9r=r($Mt,"FlaxBertForMultipleChoice"),$Mt.forEach(t),x9r=r(ASe," (BERT model)"),ASe.forEach(t),k9r=i(Vo),t5=n(Vo,"LI",{});var ySe=s(t5);F0e=n(ySe,"STRONG",{});var IMt=s(F0e);S9r=r(IMt,"big_bird"),IMt.forEach(t),R9r=r(ySe," \u2014 "),yH=n(ySe,"A",{href:!0});var qMt=s(yH);B9r=r(qMt,"FlaxBigBirdForMultipleChoice"),qMt.forEach(t),P9r=r(ySe," (BigBird model)"),ySe.forEach(t),$9r=i(Vo),a5=n(Vo,"LI",{});var LSe=s(a5);T0e=n(LSe,"STRONG",{});var NMt=s(T0e);I9r=r(NMt,"distilbert"),NMt.forEach(t),q9r=r(LSe," \u2014 "),LH=n(LSe,"A",{href:!0});var jMt=s(LH);N9r=r(jMt,"FlaxDistilBertForMultipleChoice"),jMt.forEach(t),j9r=r(LSe," (DistilBERT model)"),LSe.forEach(t),D9r=i(Vo),n5=n(Vo,"LI",{});var xSe=s(n5);M0e=n(xSe,"STRONG",{});var DMt=s(M0e);G9r=r(DMt,"electra"),DMt.forEach(t),O9r=r(xSe," \u2014 "),xH=n(xSe,"A",{href:!0});var GMt=s(xH);V9r=r(GMt,"FlaxElectraForMultipleChoice"),GMt.forEach(t),X9r=r(xSe," (ELECTRA model)"),xSe.forEach(t),z9r=i(Vo),s5=n(Vo,"LI",{});var kSe=s(s5);E0e=n(kSe,"STRONG",{});var OMt=s(E0e);Q9r=r(OMt,"roberta"),OMt.forEach(t),W9r=r(kSe," \u2014 "),kH=n(kSe,"A",{href:!0});var VMt=s(kH);H9r=r(VMt,"FlaxRobertaForMultipleChoice"),VMt.forEach(t),U9r=r(kSe," (RoBERTa model)"),kSe.forEach(t),J9r=i(Vo),l5=n(Vo,"LI",{});var SSe=s(l5);C0e=n(SSe,"STRONG",{});var XMt=s(C0e);Y9r=r(XMt,"roformer"),XMt.forEach(t),K9r=r(SSe," \u2014 "),SH=n(SSe,"A",{href:!0});var zMt=s(SH);Z9r=r(zMt,"FlaxRoFormerForMultipleChoice"),zMt.forEach(t),ekr=r(SSe," (RoFormer model)"),SSe.forEach(t),okr=i(Vo),i5=n(Vo,"LI",{});var RSe=s(i5);w0e=n(RSe,"STRONG",{});var QMt=s(w0e);rkr=r(QMt,"xlm-roberta"),QMt.forEach(t),tkr=r(RSe," \u2014 "),RH=n(RSe,"A",{href:!0});var WMt=s(RH);akr=r(WMt,"FlaxXLMRobertaForMultipleChoice"),WMt.forEach(t),nkr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),Vo.forEach(t),skr=i(Ia),A0e=n(Ia,"P",{});var HMt=s(A0e);lkr=r(HMt,"Examples:"),HMt.forEach(t),ikr=i(Ia),m(GL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),RBe=i(c),Af=n(c,"H2",{class:!0});var V$e=s(Af);d5=n(V$e,"A",{id:!0,class:!0,href:!0});var UMt=s(d5);y0e=n(UMt,"SPAN",{});var JMt=s(y0e);m(OL.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),dkr=i(V$e),L0e=n(V$e,"SPAN",{});var YMt=s(L0e);ckr=r(YMt,"FlaxAutoModelForNextSentencePrediction"),YMt.forEach(t),V$e.forEach(t),BBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(VL.$$.fragment,ki),fkr=i(ki),yf=n(ki,"P",{});var BJ=s(yf);mkr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BH=n(BJ,"A",{href:!0});var KMt=s(BH);gkr=r(KMt,"from_pretrained()"),KMt.forEach(t),hkr=r(BJ," class method or the "),PH=n(BJ,"A",{href:!0});var ZMt=s(PH);ukr=r(ZMt,"from_config()"),ZMt.forEach(t),pkr=r(BJ,` class
method.`),BJ.forEach(t),_kr=i(ki),XL=n(ki,"P",{});var X$e=s(XL);vkr=r(X$e,"This class cannot be instantiated directly using "),x0e=n(X$e,"CODE",{});var eEt=s(x0e);bkr=r(eEt,"__init__()"),eEt.forEach(t),Fkr=r(X$e," (throws an error)."),X$e.forEach(t),Tkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(zL.$$.fragment,Si),Mkr=i(Si),k0e=n(Si,"P",{});var oEt=s(k0e);Ekr=r(oEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oEt.forEach(t),Ckr=i(Si),Lf=n(Si,"P",{});var PJ=s(Lf);wkr=r(PJ,`Note:
Loading a model from its configuration file does `),S0e=n(PJ,"STRONG",{});var rEt=s(S0e);Akr=r(rEt,"not"),rEt.forEach(t),ykr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(PJ,"A",{href:!0});var tEt=s($H);Lkr=r(tEt,"from_pretrained()"),tEt.forEach(t),xkr=r(PJ," to load the model weights."),PJ.forEach(t),kkr=i(Si),R0e=n(Si,"P",{});var aEt=s(R0e);Skr=r(aEt,"Examples:"),aEt.forEach(t),Rkr=i(Si),m(QL.$$.fragment,Si),Si.forEach(t),Bkr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(WL.$$.fragment,qa),Pkr=i(qa),B0e=n(qa,"P",{});var nEt=s(B0e);$kr=r(nEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nEt.forEach(t),Ikr=i(qa),Nn=n(qa,"P",{});var m3=s(Nn);qkr=r(m3,"The model class to instantiate is selected based on the "),P0e=n(m3,"CODE",{});var sEt=s(P0e);Nkr=r(sEt,"model_type"),sEt.forEach(t),jkr=r(m3,` property of the config object (either
passed as an argument or loaded from `),$0e=n(m3,"CODE",{});var lEt=s($0e);Dkr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Gkr=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(m3,"CODE",{});var iEt=s(I0e);Okr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),Vkr=r(m3,":"),m3.forEach(t),Xkr=i(qa),q0e=n(qa,"UL",{});var dEt=s(q0e);c5=n(dEt,"LI",{});var BSe=s(c5);N0e=n(BSe,"STRONG",{});var cEt=s(N0e);zkr=r(cEt,"bert"),cEt.forEach(t),Qkr=r(BSe," \u2014 "),IH=n(BSe,"A",{href:!0});var fEt=s(IH);Wkr=r(fEt,"FlaxBertForNextSentencePrediction"),fEt.forEach(t),Hkr=r(BSe," (BERT model)"),BSe.forEach(t),dEt.forEach(t),Ukr=i(qa),j0e=n(qa,"P",{});var mEt=s(j0e);Jkr=r(mEt,"Examples:"),mEt.forEach(t),Ykr=i(qa),m(HL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),PBe=i(c),xf=n(c,"H2",{class:!0});var z$e=s(xf);f5=n(z$e,"A",{id:!0,class:!0,href:!0});var gEt=s(f5);D0e=n(gEt,"SPAN",{});var hEt=s(D0e);m(UL.$$.fragment,hEt),hEt.forEach(t),gEt.forEach(t),Kkr=i(z$e),G0e=n(z$e,"SPAN",{});var uEt=s(G0e);Zkr=r(uEt,"FlaxAutoModelForImageClassification"),uEt.forEach(t),z$e.forEach(t),$Be=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(JL.$$.fragment,Ri),eSr=i(Ri),kf=n(Ri,"P",{});var $J=s(kf);oSr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=n($J,"A",{href:!0});var pEt=s(qH);rSr=r(pEt,"from_pretrained()"),pEt.forEach(t),tSr=r($J," class method or the "),NH=n($J,"A",{href:!0});var _Et=s(NH);aSr=r(_Et,"from_config()"),_Et.forEach(t),nSr=r($J,` class
method.`),$J.forEach(t),sSr=i(Ri),YL=n(Ri,"P",{});var Q$e=s(YL);lSr=r(Q$e,"This class cannot be instantiated directly using "),O0e=n(Q$e,"CODE",{});var vEt=s(O0e);iSr=r(vEt,"__init__()"),vEt.forEach(t),dSr=r(Q$e," (throws an error)."),Q$e.forEach(t),cSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(KL.$$.fragment,Bi),fSr=i(Bi),V0e=n(Bi,"P",{});var bEt=s(V0e);mSr=r(bEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bEt.forEach(t),gSr=i(Bi),Sf=n(Bi,"P",{});var IJ=s(Sf);hSr=r(IJ,`Note:
Loading a model from its configuration file does `),X0e=n(IJ,"STRONG",{});var FEt=s(X0e);uSr=r(FEt,"not"),FEt.forEach(t),pSr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(IJ,"A",{href:!0});var TEt=s(jH);_Sr=r(TEt,"from_pretrained()"),TEt.forEach(t),vSr=r(IJ," to load the model weights."),IJ.forEach(t),bSr=i(Bi),z0e=n(Bi,"P",{});var MEt=s(z0e);FSr=r(MEt,"Examples:"),MEt.forEach(t),TSr=i(Bi),m(ZL.$$.fragment,Bi),Bi.forEach(t),MSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(e7.$$.fragment,Na),ESr=i(Na),Q0e=n(Na,"P",{});var EEt=s(Q0e);CSr=r(EEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EEt.forEach(t),wSr=i(Na),jn=n(Na,"P",{});var g3=s(jn);ASr=r(g3,"The model class to instantiate is selected based on the "),W0e=n(g3,"CODE",{});var CEt=s(W0e);ySr=r(CEt,"model_type"),CEt.forEach(t),LSr=r(g3,` property of the config object (either
passed as an argument or loaded from `),H0e=n(g3,"CODE",{});var wEt=s(H0e);xSr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),kSr=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(g3,"CODE",{});var AEt=s(U0e);SSr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),RSr=r(g3,":"),g3.forEach(t),BSr=i(Na),o7=n(Na,"UL",{});var W$e=s(o7);m5=n(W$e,"LI",{});var PSe=s(m5);J0e=n(PSe,"STRONG",{});var yEt=s(J0e);PSr=r(yEt,"beit"),yEt.forEach(t),$Sr=r(PSe," \u2014 "),DH=n(PSe,"A",{href:!0});var LEt=s(DH);ISr=r(LEt,"FlaxBeitForImageClassification"),LEt.forEach(t),qSr=r(PSe," (BEiT model)"),PSe.forEach(t),NSr=i(W$e),g5=n(W$e,"LI",{});var $Se=s(g5);Y0e=n($Se,"STRONG",{});var xEt=s(Y0e);jSr=r(xEt,"vit"),xEt.forEach(t),DSr=r($Se," \u2014 "),GH=n($Se,"A",{href:!0});var kEt=s(GH);GSr=r(kEt,"FlaxViTForImageClassification"),kEt.forEach(t),OSr=r($Se," (ViT model)"),$Se.forEach(t),W$e.forEach(t),VSr=i(Na),K0e=n(Na,"P",{});var SEt=s(K0e);XSr=r(SEt,"Examples:"),SEt.forEach(t),zSr=i(Na),m(r7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),IBe=i(c),Rf=n(c,"H2",{class:!0});var H$e=s(Rf);h5=n(H$e,"A",{id:!0,class:!0,href:!0});var REt=s(h5);Z0e=n(REt,"SPAN",{});var BEt=s(Z0e);m(t7.$$.fragment,BEt),BEt.forEach(t),REt.forEach(t),QSr=i(H$e),eTe=n(H$e,"SPAN",{});var PEt=s(eTe);WSr=r(PEt,"FlaxAutoModelForVision2Seq"),PEt.forEach(t),H$e.forEach(t),qBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(a7.$$.fragment,Pi),HSr=i(Pi),Bf=n(Pi,"P",{});var qJ=s(Bf);USr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=n(qJ,"A",{href:!0});var $Et=s(OH);JSr=r($Et,"from_pretrained()"),$Et.forEach(t),YSr=r(qJ," class method or the "),VH=n(qJ,"A",{href:!0});var IEt=s(VH);KSr=r(IEt,"from_config()"),IEt.forEach(t),ZSr=r(qJ,` class
method.`),qJ.forEach(t),eRr=i(Pi),n7=n(Pi,"P",{});var U$e=s(n7);oRr=r(U$e,"This class cannot be instantiated directly using "),oTe=n(U$e,"CODE",{});var qEt=s(oTe);rRr=r(qEt,"__init__()"),qEt.forEach(t),tRr=r(U$e," (throws an error)."),U$e.forEach(t),aRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(s7.$$.fragment,$i),nRr=i($i),rTe=n($i,"P",{});var NEt=s(rTe);sRr=r(NEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NEt.forEach(t),lRr=i($i),Pf=n($i,"P",{});var NJ=s(Pf);iRr=r(NJ,`Note:
Loading a model from its configuration file does `),tTe=n(NJ,"STRONG",{});var jEt=s(tTe);dRr=r(jEt,"not"),jEt.forEach(t),cRr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(NJ,"A",{href:!0});var DEt=s(XH);fRr=r(DEt,"from_pretrained()"),DEt.forEach(t),mRr=r(NJ," to load the model weights."),NJ.forEach(t),gRr=i($i),aTe=n($i,"P",{});var GEt=s(aTe);hRr=r(GEt,"Examples:"),GEt.forEach(t),uRr=i($i),m(l7.$$.fragment,$i),$i.forEach(t),pRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(i7.$$.fragment,ja),_Rr=i(ja),nTe=n(ja,"P",{});var OEt=s(nTe);vRr=r(OEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OEt.forEach(t),bRr=i(ja),Dn=n(ja,"P",{});var h3=s(Dn);FRr=r(h3,"The model class to instantiate is selected based on the "),sTe=n(h3,"CODE",{});var VEt=s(sTe);TRr=r(VEt,"model_type"),VEt.forEach(t),MRr=r(h3,` property of the config object (either
passed as an argument or loaded from `),lTe=n(h3,"CODE",{});var XEt=s(lTe);ERr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),CRr=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(h3,"CODE",{});var zEt=s(iTe);wRr=r(zEt,"pretrained_model_name_or_path"),zEt.forEach(t),ARr=r(h3,":"),h3.forEach(t),yRr=i(ja),dTe=n(ja,"UL",{});var QEt=s(dTe);u5=n(QEt,"LI",{});var ISe=s(u5);cTe=n(ISe,"STRONG",{});var WEt=s(cTe);LRr=r(WEt,"vision-encoder-decoder"),WEt.forEach(t),xRr=r(ISe," \u2014 "),zH=n(ISe,"A",{href:!0});var HEt=s(zH);kRr=r(HEt,"FlaxVisionEncoderDecoderModel"),HEt.forEach(t),SRr=r(ISe," (Vision Encoder decoder model)"),ISe.forEach(t),QEt.forEach(t),RRr=i(ja),fTe=n(ja,"P",{});var UEt=s(fTe);BRr=r(UEt,"Examples:"),UEt.forEach(t),PRr=i(ja),m(d7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(n5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(gx,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(hx,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertConfig"),d(ux,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartConfig"),d(px,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitConfig"),d(_x,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertConfig"),d(vx,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(bx,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdConfig"),d(Fx,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(Tx,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(Mx,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(Ex,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertConfig"),d(Cx,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineConfig"),d(wx,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPConfig"),d(Ax,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertConfig"),d(yx,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextConfig"),d(Lx,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLConfig"),d(xx,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(kx,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Sx,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaConfig"),d(Rx,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Bx,"href","/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Px,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTConfig"),d($x,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrConfig"),d(Ix,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertConfig"),d(qx,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRConfig"),d(Nx,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTConfig"),d(jx,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraConfig"),d(Dx,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Gx,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Ox,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetConfig"),d(Vx,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTConfig"),d(Xx,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelConfig"),d(zx,"href","/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNConfig"),d(Qx,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Config"),d(Wx,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Hx,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJConfig"),d(Ux,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertConfig"),d(Jx,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertConfig"),d(Yx,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Kx,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Zx,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(e9,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDConfig"),d(o9,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerConfig"),d(r9,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeConfig"),d(t9,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertConfig"),d(a9,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Config"),d(n9,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianConfig"),d(s9,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(l9,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartConfig"),d(i9,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(d9,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(c9,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetConfig"),d(f9,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Config"),d(m9,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(g9,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(h9,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusConfig"),d(u9,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverConfig"),d(p9,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartConfig"),d(_9,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(v9,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(b9,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(F9,"href","/docs/transformers/v4.18.0/en/model_doc/rag#transformers.RagConfig"),d(T9,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmConfig"),d(M9,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerConfig"),d(E9,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertConfig"),d(C9,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetConfig"),d(w9,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertConfig"),d(A9,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaConfig"),d(y9,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerConfig"),d(L9,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerConfig"),d(x9,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWConfig"),d(k9,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDConfig"),d(S9,"href","/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(R9,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(B9,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(P9,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterConfig"),d($9,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(I9,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinConfig"),d(q9,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Config"),d(N9,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasConfig"),d(j9,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(D9,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRConfig"),d(G9,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(O9,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(V9,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanConfig"),d(X9,"href","/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltConfig"),d(z9,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Q9,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(W9,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(H9,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTConfig"),d(U9,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(J9,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Y9,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMConfig"),d(K9,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMConfig"),d(Z9,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMConfig"),d(ek,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ok,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(rk,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(tk,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetConfig"),d(ak,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(nk,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(sk,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertTokenizer"),d(lk,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ik,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartTokenizer"),d(dk,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartTokenizerFast"),d(ck,"href","/docs/transformers/v4.18.0/en/model_doc/barthez#transformers.BarthezTokenizer"),d(fk,"href","/docs/transformers/v4.18.0/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(mk,"href","/docs/transformers/v4.18.0/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(gk,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer"),d(hk,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizerFast"),d(uk,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(pk,"href","/docs/transformers/v4.18.0/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(_k,"href","/docs/transformers/v4.18.0/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(vk,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(bk,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Fk,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Tk,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Mk,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ek,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ck,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(wk,"href","/docs/transformers/v4.18.0/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ak,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertTokenizer"),d(yk,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Lk,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineTokenizer"),d(xk,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPTokenizer"),d(kk,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Sk,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Rk,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Bk,"href","/docs/transformers/v4.18.0/en/model_doc/cpm#transformers.CpmTokenizer"),d(Pk,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLTokenizer"),d($k,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Ik,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(qk,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Nk,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(jk,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Dk,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Gk,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Ok,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraTokenizer"),d(Vk,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Xk,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(zk,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetTokenizer"),d(Qk,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Wk,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Hk,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Uk,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Jk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Zk,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(eS,"href","/docs/transformers/v4.18.0/en/model_doc/herbert#transformers.HerbertTokenizer"),d(oS,"href","/docs/transformers/v4.18.0/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(rS,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(tS,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizer"),d(aS,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(nS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(sS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(lS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(iS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(dS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(cS,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(fS,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDTokenizer"),d(mS,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDTokenizerFast"),d(gS,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerTokenizer"),d(hS,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(uS,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeTokenizer"),d(pS,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(_S,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(vS,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(bS,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianTokenizer"),d(FS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartTokenizer"),d(TS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(MS,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ES,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(CS,"href","/docs/transformers/v4.18.0/en/model_doc/mluke#transformers.MLukeTokenizer"),d(wS,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(AS,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yS,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(LS,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(xS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5Tokenizer"),d(kS,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5TokenizerFast"),d(SS,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(RS,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(BS,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(PS,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d($S,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(IS,"href","/docs/transformers/v4.18.0/en/model_doc/phobert#transformers.PhobertTokenizer"),d(qS,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartTokenizer"),d(NS,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(jS,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizer"),d(DS,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertTokenizerFast"),d(GS,"href","/docs/transformers/v4.18.0/en/model_doc/rag#transformers.RagTokenizer"),d(OS,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmTokenizer"),d(VS,"href","/docs/transformers/v4.18.0/en/model_doc/realm#transformers.RealmTokenizerFast"),d(XS,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerTokenizer"),d(zS,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(QS,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertTokenizer"),d(WS,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(HS,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(US,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(JS,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizer"),d(YS,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(KS,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(ZS,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(eR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(oR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(rR,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterTokenizer"),d(tR,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(aR,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(nR,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(sR,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5Tokenizer"),d(lR,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.T5TokenizerFast"),d(iR,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasTokenizer"),d(dR,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(cR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mR,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gR,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hR,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMTokenizer"),d(uR,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(pR,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(_R,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(vR,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(bR,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(FR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(TR,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(MR,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(ER,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(wR,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(AR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(LR,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(xR,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(kR,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(SR,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(BR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(PR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(IR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(qR,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(jR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(DR,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPProcessor"),d(GR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(OR,"href","/docs/transformers/v4.18.0/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(VR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(XR,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(zR,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRProcessor"),d(QR,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(WR,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(HR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JR,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YR,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertModel"),d(KR,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartModel"),d(ZR,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitModel"),d(eB,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertModel"),d(oB,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(rB,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdModel"),d(tB,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(aB,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(nB,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(sB,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertModel"),d(lB,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineModel"),d(iB,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.CLIPModel"),d(dB,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertModel"),d(cB,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextModel"),d(fB,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLModel"),d(mB,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(gB,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(hB,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaModel"),d(uB,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(pB,"href","/docs/transformers/v4.18.0/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(_B,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTModel"),d(vB,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrModel"),d(bB,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertModel"),d(FB,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(TB,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTModel"),d(MB,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraModel"),d(EB,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertModel"),d(CB,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetModel"),d(wB,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTModel"),d(AB,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelModel"),d(yB,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelBaseModel"),d(LB,"href","/docs/transformers/v4.18.0/en/model_doc/glpn#transformers.GLPNModel"),d(xB,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2Model"),d(kB,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(SB,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJModel"),d(RB,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertModel"),d(BB,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertModel"),d(PB,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTModel"),d($B,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(IB,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(qB,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDModel"),d(NB,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerModel"),d(jB,"href","/docs/transformers/v4.18.0/en/model_doc/luke#transformers.LukeModel"),d(DB,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertModel"),d(GB,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100Model"),d(OB,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianModel"),d(VB,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerModel"),d(XB,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartModel"),d(zB,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(QB,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertModel"),d(WB,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetModel"),d(HB,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5Model"),d(UB,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerModel"),d(JB,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(YB,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusModel"),d(KB,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverModel"),d(ZB,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartModel"),d(eP,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerModel"),d(oP,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(rP,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertModel"),d(tP,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModel"),d(aP,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertModel"),d(nP,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetModel"),d(sP,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel"),d(lP,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaModel"),d(iP,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerModel"),d(dP,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerModel"),d(cP,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWModel"),d(fP,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDModel"),d(mP,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(gP,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterModel"),d(hP,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(uP,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinModel"),d(pP,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5Model"),d(_P,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasModel"),d(vP,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(bP,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechModel"),d(FP,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(TP,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanModel"),d(MP,"href","/docs/transformers/v4.18.0/en/model_doc/vilt#transformers.ViltModel"),d(EP,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(CP,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertModel"),d(wP,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTModel"),d(AP,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(yP,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(LP,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMModel"),d(xP,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMModel"),d(kP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMModel"),d(SP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(RP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(BP,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(PP,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetModel"),d($P,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kp,"id","transformers.AutoModelForPreTraining"),d(kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kp,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(IP,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qP,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NP,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jP,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForPreTraining"),d(DP,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(GP,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForPreTraining"),d(OP,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(VP,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(zP,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(QP,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(HP,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(UP,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForPreTraining"),d(JP,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(YP,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForPreTraining"),d(KP,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(ZP,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(e$,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(o$,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(r$,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(t$,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(a$,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(n$,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(s$,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(l$,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(i$,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(d$,"href","/docs/transformers/v4.18.0/en/model_doc/retribert#transformers.RetriBertModel"),d(c$,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(f$,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(m$,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(g$,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(u$,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(p$,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(_$,"href","/docs/transformers/v4.18.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(v$,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(b$,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(F$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(T$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(M$,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(E$,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(__,"id","transformers.AutoModelForCausalLM"),d(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(__,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(C$,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(w$,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(A$,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y$,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForCausalLM"),d(L$,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertLMHeadModel"),d(x$,"href","/docs/transformers/v4.18.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(k$,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(S$,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(R$,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(B$,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(P$,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForCausalLM"),d($$,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(I$,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(q$,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForCausalLM"),d(N$,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(j$,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(D$,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(G$,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianForCausalLM"),d(O$,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForCausalLM"),d(V$,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(X$,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(z$,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(Q$,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(W$,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(H$,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(U$,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(J$,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(Y$,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(K$,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Z$,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(eI,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(oI,"href","/docs/transformers/v4.18.0/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(rI,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(tI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(nI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(sI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(lI,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ev,"id","transformers.AutoModelForMaskedLM"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(iI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fI,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(mI,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gI,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMaskedLM"),d(hI,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(uI,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(pI,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(_I,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(vI,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(bI,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(FI,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(TI,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(MI,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(EI,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(CI,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(wI,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(AI,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(yI,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(LI,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(xI,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(kI,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(SI,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(RI,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(BI,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(PI,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d($I,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(II,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(qI,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(NI,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(jI,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(DI,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(GI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(OI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(VI,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(XI,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qv,"id","transformers.AutoModelForSeq2SeqLM"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(zI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WI,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HI,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(UI,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(JI,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(YI,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(KI,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(ZI,"href","/docs/transformers/v4.18.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(eq,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(oq,"href","/docs/transformers/v4.18.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(rq,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.MarianMTModel"),d(tq,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(aq,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(nq,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(sq,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(lq,"href","/docs/transformers/v4.18.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(iq,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(dq,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o1,"id","transformers.AutoModelForSequenceClassification"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(cq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mq,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gq,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(hq,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uq,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForSequenceClassification"),d(pq,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(_q,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(vq,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(bq,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Fq,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Tq,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Mq,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Eq,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Cq,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(wq,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Aq,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(yq,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Lq,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(xq,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(kq,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Sq,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Rq,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Bq,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Pq,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d($q,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Iq,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForSequenceClassification"),d(qq,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Nq,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(jq,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Dq,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Gq,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Oq,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Vq,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Xq,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(zq,"href","/docs/transformers/v4.18.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Qq,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Wq,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Hq,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Uq,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Jq,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Yq,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Kq,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Zq,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(eN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(oN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(rN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(tN,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(aN,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U1,"id","transformers.AutoModelForMultipleChoice"),d(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U1,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(nN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iN,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(dN,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForMultipleChoice"),d(cN,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(fN,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(mN,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(gN,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(hN,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(uN,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(pN,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(_N,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(vN,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(bN,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(FN,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(TN,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(MN,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(EN,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(CN,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(wN,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(AN,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(yN,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(LN,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(xN,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(kN,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(SN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(RN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(BN,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(PN,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d($N,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w4,"id","transformers.AutoModelForNextSentencePrediction"),d(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w4,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(IN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jN,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(DN,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(GN,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(ON,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(VN,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R4,"id","transformers.AutoModelForTokenClassification"),d(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R4,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(XN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QN,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WN,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(HN,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForTokenClassification"),d(UN,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(JN,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(YN,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForTokenClassification"),d(KN,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(ZN,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(ej,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(oj,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(rj,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(tj,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(aj,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(nj,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(sj,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(lj,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ij,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(dj,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(cj,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(fj,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(mj,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(gj,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(hj,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(uj,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(pj,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(_j,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(vj,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(bj,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Fj,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Tj,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Mj,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Ej,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Cj,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(wj,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gb,"id","transformers.AutoModelForQuestionAnswering"),d(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gb,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Aj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lj,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xj,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(kj,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Sj,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Rj,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Bj,"href","/docs/transformers/v4.18.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Pj,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d($j,"href","/docs/transformers/v4.18.0/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Ij,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(qj,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Nj,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(jj,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Dj,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Gj,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Oj,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Vj,"href","/docs/transformers/v4.18.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Xj,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(zj,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Qj,"href","/docs/transformers/v4.18.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Hj,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Uj,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Jj,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Yj,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Kj,"href","/docs/transformers/v4.18.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Zj,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(eD,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(oD,"href","/docs/transformers/v4.18.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(rD,"href","/docs/transformers/v4.18.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(tD,"href","/docs/transformers/v4.18.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(aD,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(nD,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(sD,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(lD,"href","/docs/transformers/v4.18.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(iD,"href","/docs/transformers/v4.18.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(dD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(cD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(fD,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(mD,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(gD,"href","/docs/transformers/v4.18.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e2,"id","transformers.AutoModelForTableQuestionAnswering"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(hD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_D,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForImageClassification"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(vD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TD,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForImageClassification"),d(MD,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ED,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassification"),d(CD,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(wD,"href","/docs/transformers/v4.18.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(AD,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(yD,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(LD,"href","/docs/transformers/v4.18.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(xD,"href","/docs/transformers/v4.18.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(kD,"href","/docs/transformers/v4.18.0/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(SD,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(RD,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForImageClassification"),d(BD,"href","/docs/transformers/v4.18.0/en/model_doc/van#transformers.VanForImageClassification"),d(PD,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h2,"id","transformers.AutoModelForVision2Seq"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d($D,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ND,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_2,"id","transformers.AutoModelForAudioClassification"),d(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(jD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OD,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(VD,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(XD,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(zD,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(QD,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(WD,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(HD,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(UD,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y2,"id","transformers.AutoModelForAudioFrameClassification"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(JD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KD,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZD,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(eG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(oG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(rG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B2,"id","transformers.AutoModelForCTC"),d(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(tG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sG,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(lG,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.HubertForCTC"),d(iG,"href","/docs/transformers/v4.18.0/en/model_doc/sew#transformers.SEWForCTC"),d(dG,"href","/docs/transformers/v4.18.0/en/model_doc/sew-d#transformers.SEWDForCTC"),d(cG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(fG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(mG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(gG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(hG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_G,"href","/docs/transformers/v4.18.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(vG,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W2,"id","transformers.AutoModelForAudioXVector"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(bG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MG,"href","/docs/transformers/v4.18.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(EG,"href","/docs/transformers/v4.18.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(CG,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(wG,"href","/docs/transformers/v4.18.0/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z2,"id","transformers.AutoModelForMaskedImageModeling"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(AG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xG,"href","/docs/transformers/v4.18.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(kG,"href","/docs/transformers/v4.18.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(SG,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aF,"id","transformers.AutoModelForObjectDetection"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(RG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($G,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lF,"id","transformers.AutoModelForImageSegmentation"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(IG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jG,"href","/docs/transformers/v4.18.0/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cF,"id","transformers.AutoModelForSemanticSegmentation"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(DG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VG,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(XG,"href","/docs/transformers/v4.18.0/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(zG,"href","/docs/transformers/v4.18.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uF,"id","transformers.AutoModelForInstanceSegmentation"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(QG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UG,"href","/docs/transformers/v4.18.0/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vF,"id","transformers.TFAutoModel"),d(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(JG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZG,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertModel"),d(eO,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartModel"),d(oO,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertModel"),d(rO,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(tO,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(aO,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertModel"),d(nO,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.TFCLIPModel"),d(sO,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertModel"),d(lO,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextModel"),d(iO,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLModel"),d(dO,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaModel"),d(cO,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(fO,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(mO,"href","/docs/transformers/v4.18.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(gO,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraModel"),d(hO,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(uO,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelModel"),d(pO,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(_O,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2Model"),d(vO,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJModel"),d(bO,"href","/docs/transformers/v4.18.0/en/model_doc/hubert#transformers.TFHubertModel"),d(FO,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(TO,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDModel"),d(MO,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerModel"),d(EO,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertModel"),d(CO,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianModel"),d(wO,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartModel"),d(AO,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(yO,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetModel"),d(LO,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5Model"),d(xO,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(kO,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusModel"),d(SO,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertModel"),d(RO,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaModel"),d(BO,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerModel"),d(PO,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d($O,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5Model"),d(IO,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasModel"),d(qO,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(NO,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTModel"),d(jO,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(DO,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(GO,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMModel"),d(OO,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(VO,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i0,"id","transformers.TFAutoModelForPreTraining"),d(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i0,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(XO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QO,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WO,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(HO,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(UO,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForPreTraining"),d(JO,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(YO,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(KO,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(ZO,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(eV,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(oV,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(rV,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(tV,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aV,"href","/docs/transformers/v4.18.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(nV,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(sV,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lV,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(iV,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dV,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(cV,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fV,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(mV,"href","/docs/transformers/v4.18.0/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(gV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uV,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R0,"id","transformers.TFAutoModelForCausalLM"),d(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R0,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(pV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_V,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(FV,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TV,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MV,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EV,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(CV,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wV,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(AV,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yV,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(LV,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(xV,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kV,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z0,"id","transformers.TFAutoModelForImageClassification"),d(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z0,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(SV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PV,"href","/docs/transformers/v4.18.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d($V,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H0,"id","transformers.TFAutoModelForMaskedLM"),d(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H0,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(IV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NV,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jV,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(DV,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(GV,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(OV,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(VV,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(XV,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zV,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(QV,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(WV,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HV,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(UV,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(JV,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(YV,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(KV,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ZV,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eX,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oX,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rX,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(nX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iX,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(dX,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(cX,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(fX,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(mX,"href","/docs/transformers/v4.18.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(gX,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.TFMarianMTModel"),d(hX,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(uX,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(pX,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(_X,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AT,"id","transformers.TFAutoModelForSequenceClassification"),d(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(vX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TX,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(MX,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(EX,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CX,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(wX,"href","/docs/transformers/v4.18.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(AX,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yX,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(LX,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(xX,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(kX,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SX,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(RX,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(BX,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(PX,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d($X,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(IX,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qX,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(NX,"href","/docs/transformers/v4.18.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(jX,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(DX,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(GX,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(OX,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VX,"href","/docs/transformers/v4.18.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(XX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(zX,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QX,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZT,"id","transformers.TFAutoModelForMultipleChoice"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(WX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UX,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JX,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(YX,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(KX,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(ZX,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(ez,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(oz,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(rz,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(tz,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(az,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(nz,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(sz,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(lz,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(iz,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(dz,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(cz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(fz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(mz,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_8,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(_8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(gz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pz,"href","/docs/transformers/v4.18.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b8,"id","transformers.TFAutoModelForTokenClassification"),d(b8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b8,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(_z,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fz,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Tz,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Mz,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Ez,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Cz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(wz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Az,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(yz,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Lz,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(xz,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(kz,"href","/docs/transformers/v4.18.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Sz,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Rz,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Bz,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Pz,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d($z,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Iz,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(qz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Nz,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(jz,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D8,"id","transformers.TFAutoModelForQuestionAnswering"),d(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Dz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Oz,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vz,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Xz,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(zz,"href","/docs/transformers/v4.18.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Qz,"href","/docs/transformers/v4.18.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Wz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Hz,"href","/docs/transformers/v4.18.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Uz,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Jz,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Yz,"href","/docs/transformers/v4.18.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Kz,"href","/docs/transformers/v4.18.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Zz,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(eQ,"href","/docs/transformers/v4.18.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(oQ,"href","/docs/transformers/v4.18.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/v4.18.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(tQ,"href","/docs/transformers/v4.18.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(aQ,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(nQ,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(sQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(lQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(iQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lM,"id","transformers.TFAutoModelForVision2Seq"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(dQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mQ,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(gQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pQ,"href","/docs/transformers/v4.18.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fM,"id","transformers.FlaxAutoModel"),d(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(_Q,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FQ,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertModel"),d(TQ,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartModel"),d(MQ,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitModel"),d(EQ,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertModel"),d(CQ,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(wQ,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(AQ,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(yQ,"href","/docs/transformers/v4.18.0/en/model_doc/clip#transformers.FlaxCLIPModel"),d(LQ,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(xQ,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraModel"),d(kQ,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(SQ,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(RQ,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(BQ,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianModel"),d(PQ,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartModel"),d($Q,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5Model"),d(IQ,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(qQ,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(NQ,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(jQ,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5Model"),d(DQ,"href","/docs/transformers/v4.18.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(GQ,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTModel"),d(OQ,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(VQ,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(XQ,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qM,"id","transformers.FlaxAutoModelForCausalLM"),d(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(zQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HQ,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(UQ,"href","/docs/transformers/v4.18.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(JQ,"href","/docs/transformers/v4.18.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(YQ,"href","/docs/transformers/v4.18.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(KQ,"href","/docs/transformers/v4.18.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VM,"id","transformers.FlaxAutoModelForPreTraining"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(ZQ,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rW,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(tW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(aW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(nW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(sW,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(lW,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(iW,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(dW,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(cW,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(fW,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(mW,"href","/docs/transformers/v4.18.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(gW,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rE,"id","transformers.FlaxAutoModelForMaskedLM"),d(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(hW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_W,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(vW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(bW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(FW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(TW,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(MW,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(EW,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(CW,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(wW,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(AW,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(yW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(SW,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(RW,"href","/docs/transformers/v4.18.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(BW,"href","/docs/transformers/v4.18.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(PW,"href","/docs/transformers/v4.18.0/en/model_doc/marian#transformers.FlaxMarianMTModel"),d($W,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(IW,"href","/docs/transformers/v4.18.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(qW,"href","/docs/transformers/v4.18.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(NW,"href","/docs/transformers/v4.18.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(jW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OW,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(VW,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(XW,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(zW,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(QW,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(WW,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(HW,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(UW,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(JW,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(YW,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(_f,"class","relative group"),d(KW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZW,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(rH,"href","/docs/transformers/v4.18.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(tH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(aH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(nH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(sH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(lH,"href","/docs/transformers/v4.18.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(iH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(dH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(cH,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zE,"id","transformers.FlaxAutoModelForTokenClassification"),d(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(fH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(uH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(pH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(_H,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(vH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(bH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(FH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(TH,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e5,"id","transformers.FlaxAutoModelForMultipleChoice"),d(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e5,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(MH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wH,"href","/docs/transformers/v4.18.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(AH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(yH,"href","/docs/transformers/v4.18.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(LH,"href","/docs/transformers/v4.18.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(xH,"href","/docs/transformers/v4.18.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(kH,"href","/docs/transformers/v4.18.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(SH,"href","/docs/transformers/v4.18.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(RH,"href","/docs/transformers/v4.18.0/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(BH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/v4.18.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f5,"id","transformers.FlaxAutoModelForImageClassification"),d(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f5,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(qH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DH,"href","/docs/transformers/v4.18.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(GH,"href","/docs/transformers/v4.18.0/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h5,"id","transformers.FlaxAutoModelForVision2Seq"),d(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h5,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(OH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/v4.18.0/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zH,"href","/docs/transformers/v4.18.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,Z),v(c,io,_),v(c,de,_),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),v(c,qf,_),v(c,fa,_),e(fa,qi),e(fa,Ni),e(Ni,u3),e(fa,Nf),v(c,xe,_),v(c,co,_),e(co,ji),e(co,Gn),e(Gn,p3),e(co,On),e(co,Vn),e(Vn,_3),e(co,Di),e(co,Xn),e(Xn,v3),e(co,Gi),v(c,jf,_),g(Da,c,_),v(c,fo,_),v(c,pe,_),e(pe,lx),e(pe,Oi),e(Oi,ix),e(pe,dx),v(c,zo,_),v(c,Ga,_),e(Ga,cx),e(Ga,Df),e(Df,fx),e(Ga,J$e),v(c,qSe,_),v(c,Vi,_),e(Vi,Gf),e(Gf,jJ),g(b3,jJ,null),e(Vi,Y$e),e(Vi,DJ),e(DJ,K$e),v(c,NSe,_),v(c,zn,_),e(zn,Z$e),e(zn,GJ),e(GJ,eIe),e(zn,oIe),e(zn,OJ),e(OJ,rIe),e(zn,tIe),v(c,jSe,_),g(F3,c,_),v(c,DSe,_),v(c,mx,_),e(mx,aIe),v(c,GSe,_),g(Of,c,_),v(c,OSe,_),v(c,Xi,_),e(Xi,Vf),e(Vf,VJ),g(T3,VJ,null),e(Xi,nIe),e(Xi,XJ),e(XJ,sIe),v(c,VSe,_),v(c,Qo,_),g(M3,Qo,null),e(Qo,lIe),e(Qo,E3),e(E3,iIe),e(E3,gx),e(gx,dIe),e(E3,cIe),e(Qo,fIe),e(Qo,C3),e(C3,mIe),e(C3,zJ),e(zJ,gIe),e(C3,hIe),e(Qo,uIe),e(Qo,mo),g(w3,mo,null),e(mo,pIe),e(mo,QJ),e(QJ,_Ie),e(mo,vIe),e(mo,zi),e(zi,bIe),e(zi,WJ),e(WJ,FIe),e(zi,TIe),e(zi,HJ),e(HJ,MIe),e(zi,EIe),e(mo,CIe),e(mo,b),e(b,Xf),e(Xf,UJ),e(UJ,wIe),e(Xf,AIe),e(Xf,hx),e(hx,yIe),e(Xf,LIe),e(b,xIe),e(b,zf),e(zf,JJ),e(JJ,kIe),e(zf,SIe),e(zf,ux),e(ux,RIe),e(zf,BIe),e(b,PIe),e(b,Qf),e(Qf,YJ),e(YJ,$Ie),e(Qf,IIe),e(Qf,px),e(px,qIe),e(Qf,NIe),e(b,jIe),e(b,Wf),e(Wf,KJ),e(KJ,DIe),e(Wf,GIe),e(Wf,_x),e(_x,OIe),e(Wf,VIe),e(b,XIe),e(b,Hf),e(Hf,ZJ),e(ZJ,zIe),e(Hf,QIe),e(Hf,vx),e(vx,WIe),e(Hf,HIe),e(b,UIe),e(b,Uf),e(Uf,eY),e(eY,JIe),e(Uf,YIe),e(Uf,bx),e(bx,KIe),e(Uf,ZIe),e(b,eqe),e(b,Jf),e(Jf,oY),e(oY,oqe),e(Jf,rqe),e(Jf,Fx),e(Fx,tqe),e(Jf,aqe),e(b,nqe),e(b,Yf),e(Yf,rY),e(rY,sqe),e(Yf,lqe),e(Yf,Tx),e(Tx,iqe),e(Yf,dqe),e(b,cqe),e(b,Kf),e(Kf,tY),e(tY,fqe),e(Kf,mqe),e(Kf,Mx),e(Mx,gqe),e(Kf,hqe),e(b,uqe),e(b,Zf),e(Zf,aY),e(aY,pqe),e(Zf,_qe),e(Zf,Ex),e(Ex,vqe),e(Zf,bqe),e(b,Fqe),e(b,em),e(em,nY),e(nY,Tqe),e(em,Mqe),e(em,Cx),e(Cx,Eqe),e(em,Cqe),e(b,wqe),e(b,om),e(om,sY),e(sY,Aqe),e(om,yqe),e(om,wx),e(wx,Lqe),e(om,xqe),e(b,kqe),e(b,rm),e(rm,lY),e(lY,Sqe),e(rm,Rqe),e(rm,Ax),e(Ax,Bqe),e(rm,Pqe),e(b,$qe),e(b,tm),e(tm,iY),e(iY,Iqe),e(tm,qqe),e(tm,yx),e(yx,Nqe),e(tm,jqe),e(b,Dqe),e(b,am),e(am,dY),e(dY,Gqe),e(am,Oqe),e(am,Lx),e(Lx,Vqe),e(am,Xqe),e(b,zqe),e(b,nm),e(nm,cY),e(cY,Qqe),e(nm,Wqe),e(nm,xx),e(xx,Hqe),e(nm,Uqe),e(b,Jqe),e(b,sm),e(sm,fY),e(fY,Yqe),e(sm,Kqe),e(sm,kx),e(kx,Zqe),e(sm,eNe),e(b,oNe),e(b,lm),e(lm,mY),e(mY,rNe),e(lm,tNe),e(lm,Sx),e(Sx,aNe),e(lm,nNe),e(b,sNe),e(b,im),e(im,gY),e(gY,lNe),e(im,iNe),e(im,Rx),e(Rx,dNe),e(im,cNe),e(b,fNe),e(b,dm),e(dm,hY),e(hY,mNe),e(dm,gNe),e(dm,Bx),e(Bx,hNe),e(dm,uNe),e(b,pNe),e(b,cm),e(cm,uY),e(uY,_Ne),e(cm,vNe),e(cm,Px),e(Px,bNe),e(cm,FNe),e(b,TNe),e(b,fm),e(fm,pY),e(pY,MNe),e(fm,ENe),e(fm,$x),e($x,CNe),e(fm,wNe),e(b,ANe),e(b,mm),e(mm,_Y),e(_Y,yNe),e(mm,LNe),e(mm,Ix),e(Ix,xNe),e(mm,kNe),e(b,SNe),e(b,gm),e(gm,vY),e(vY,RNe),e(gm,BNe),e(gm,qx),e(qx,PNe),e(gm,$Ne),e(b,INe),e(b,hm),e(hm,bY),e(bY,qNe),e(hm,NNe),e(hm,Nx),e(Nx,jNe),e(hm,DNe),e(b,GNe),e(b,um),e(um,FY),e(FY,ONe),e(um,VNe),e(um,jx),e(jx,XNe),e(um,zNe),e(b,QNe),e(b,pm),e(pm,TY),e(TY,WNe),e(pm,HNe),e(pm,Dx),e(Dx,UNe),e(pm,JNe),e(b,YNe),e(b,_m),e(_m,MY),e(MY,KNe),e(_m,ZNe),e(_m,Gx),e(Gx,eje),e(_m,oje),e(b,rje),e(b,vm),e(vm,EY),e(EY,tje),e(vm,aje),e(vm,Ox),e(Ox,nje),e(vm,sje),e(b,lje),e(b,bm),e(bm,CY),e(CY,ije),e(bm,dje),e(bm,Vx),e(Vx,cje),e(bm,fje),e(b,mje),e(b,Fm),e(Fm,wY),e(wY,gje),e(Fm,hje),e(Fm,Xx),e(Xx,uje),e(Fm,pje),e(b,_je),e(b,Tm),e(Tm,AY),e(AY,vje),e(Tm,bje),e(Tm,zx),e(zx,Fje),e(Tm,Tje),e(b,Mje),e(b,Mm),e(Mm,yY),e(yY,Eje),e(Mm,Cje),e(Mm,Qx),e(Qx,wje),e(Mm,Aje),e(b,yje),e(b,Em),e(Em,LY),e(LY,Lje),e(Em,xje),e(Em,Wx),e(Wx,kje),e(Em,Sje),e(b,Rje),e(b,Cm),e(Cm,xY),e(xY,Bje),e(Cm,Pje),e(Cm,Hx),e(Hx,$je),e(Cm,Ije),e(b,qje),e(b,wm),e(wm,kY),e(kY,Nje),e(wm,jje),e(wm,Ux),e(Ux,Dje),e(wm,Gje),e(b,Oje),e(b,Am),e(Am,SY),e(SY,Vje),e(Am,Xje),e(Am,Jx),e(Jx,zje),e(Am,Qje),e(b,Wje),e(b,ym),e(ym,RY),e(RY,Hje),e(ym,Uje),e(ym,Yx),e(Yx,Jje),e(ym,Yje),e(b,Kje),e(b,Lm),e(Lm,BY),e(BY,Zje),e(Lm,eDe),e(Lm,Kx),e(Kx,oDe),e(Lm,rDe),e(b,tDe),e(b,xm),e(xm,PY),e(PY,aDe),e(xm,nDe),e(xm,Zx),e(Zx,sDe),e(xm,lDe),e(b,iDe),e(b,km),e(km,$Y),e($Y,dDe),e(km,cDe),e(km,e9),e(e9,fDe),e(km,mDe),e(b,gDe),e(b,Sm),e(Sm,IY),e(IY,hDe),e(Sm,uDe),e(Sm,o9),e(o9,pDe),e(Sm,_De),e(b,vDe),e(b,Rm),e(Rm,qY),e(qY,bDe),e(Rm,FDe),e(Rm,r9),e(r9,TDe),e(Rm,MDe),e(b,EDe),e(b,Bm),e(Bm,NY),e(NY,CDe),e(Bm,wDe),e(Bm,t9),e(t9,ADe),e(Bm,yDe),e(b,LDe),e(b,Pm),e(Pm,jY),e(jY,xDe),e(Pm,kDe),e(Pm,a9),e(a9,SDe),e(Pm,RDe),e(b,BDe),e(b,$m),e($m,DY),e(DY,PDe),e($m,$De),e($m,n9),e(n9,IDe),e($m,qDe),e(b,NDe),e(b,Im),e(Im,GY),e(GY,jDe),e(Im,DDe),e(Im,s9),e(s9,GDe),e(Im,ODe),e(b,VDe),e(b,qm),e(qm,OY),e(OY,XDe),e(qm,zDe),e(qm,l9),e(l9,QDe),e(qm,WDe),e(b,HDe),e(b,Nm),e(Nm,VY),e(VY,UDe),e(Nm,JDe),e(Nm,i9),e(i9,YDe),e(Nm,KDe),e(b,ZDe),e(b,jm),e(jm,XY),e(XY,eGe),e(jm,oGe),e(jm,d9),e(d9,rGe),e(jm,tGe),e(b,aGe),e(b,Dm),e(Dm,zY),e(zY,nGe),e(Dm,sGe),e(Dm,c9),e(c9,lGe),e(Dm,iGe),e(b,dGe),e(b,Gm),e(Gm,QY),e(QY,cGe),e(Gm,fGe),e(Gm,f9),e(f9,mGe),e(Gm,gGe),e(b,hGe),e(b,Om),e(Om,WY),e(WY,uGe),e(Om,pGe),e(Om,m9),e(m9,_Ge),e(Om,vGe),e(b,bGe),e(b,Vm),e(Vm,HY),e(HY,FGe),e(Vm,TGe),e(Vm,g9),e(g9,MGe),e(Vm,EGe),e(b,CGe),e(b,Xm),e(Xm,UY),e(UY,wGe),e(Xm,AGe),e(Xm,h9),e(h9,yGe),e(Xm,LGe),e(b,xGe),e(b,zm),e(zm,JY),e(JY,kGe),e(zm,SGe),e(zm,u9),e(u9,RGe),e(zm,BGe),e(b,PGe),e(b,Qm),e(Qm,YY),e(YY,$Ge),e(Qm,IGe),e(Qm,p9),e(p9,qGe),e(Qm,NGe),e(b,jGe),e(b,Wm),e(Wm,KY),e(KY,DGe),e(Wm,GGe),e(Wm,_9),e(_9,OGe),e(Wm,VGe),e(b,XGe),e(b,Hm),e(Hm,ZY),e(ZY,zGe),e(Hm,QGe),e(Hm,v9),e(v9,WGe),e(Hm,HGe),e(b,UGe),e(b,Um),e(Um,eK),e(eK,JGe),e(Um,YGe),e(Um,b9),e(b9,KGe),e(Um,ZGe),e(b,eOe),e(b,Jm),e(Jm,oK),e(oK,oOe),e(Jm,rOe),e(Jm,F9),e(F9,tOe),e(Jm,aOe),e(b,nOe),e(b,Ym),e(Ym,rK),e(rK,sOe),e(Ym,lOe),e(Ym,T9),e(T9,iOe),e(Ym,dOe),e(b,cOe),e(b,Km),e(Km,tK),e(tK,fOe),e(Km,mOe),e(Km,M9),e(M9,gOe),e(Km,hOe),e(b,uOe),e(b,Zm),e(Zm,aK),e(aK,pOe),e(Zm,_Oe),e(Zm,E9),e(E9,vOe),e(Zm,bOe),e(b,FOe),e(b,eg),e(eg,nK),e(nK,TOe),e(eg,MOe),e(eg,C9),e(C9,EOe),e(eg,COe),e(b,wOe),e(b,og),e(og,sK),e(sK,AOe),e(og,yOe),e(og,w9),e(w9,LOe),e(og,xOe),e(b,kOe),e(b,rg),e(rg,lK),e(lK,SOe),e(rg,ROe),e(rg,A9),e(A9,BOe),e(rg,POe),e(b,$Oe),e(b,tg),e(tg,iK),e(iK,IOe),e(tg,qOe),e(tg,y9),e(y9,NOe),e(tg,jOe),e(b,DOe),e(b,ag),e(ag,dK),e(dK,GOe),e(ag,OOe),e(ag,L9),e(L9,VOe),e(ag,XOe),e(b,zOe),e(b,ng),e(ng,cK),e(cK,QOe),e(ng,WOe),e(ng,x9),e(x9,HOe),e(ng,UOe),e(b,JOe),e(b,sg),e(sg,fK),e(fK,YOe),e(sg,KOe),e(sg,k9),e(k9,ZOe),e(sg,eVe),e(b,oVe),e(b,lg),e(lg,mK),e(mK,rVe),e(lg,tVe),e(lg,S9),e(S9,aVe),e(lg,nVe),e(b,sVe),e(b,ig),e(ig,gK),e(gK,lVe),e(ig,iVe),e(ig,R9),e(R9,dVe),e(ig,cVe),e(b,fVe),e(b,dg),e(dg,hK),e(hK,mVe),e(dg,gVe),e(dg,B9),e(B9,hVe),e(dg,uVe),e(b,pVe),e(b,cg),e(cg,uK),e(uK,_Ve),e(cg,vVe),e(cg,P9),e(P9,bVe),e(cg,FVe),e(b,TVe),e(b,fg),e(fg,pK),e(pK,MVe),e(fg,EVe),e(fg,$9),e($9,CVe),e(fg,wVe),e(b,AVe),e(b,mg),e(mg,_K),e(_K,yVe),e(mg,LVe),e(mg,I9),e(I9,xVe),e(mg,kVe),e(b,SVe),e(b,gg),e(gg,vK),e(vK,RVe),e(gg,BVe),e(gg,q9),e(q9,PVe),e(gg,$Ve),e(b,IVe),e(b,hg),e(hg,bK),e(bK,qVe),e(hg,NVe),e(hg,N9),e(N9,jVe),e(hg,DVe),e(b,GVe),e(b,ug),e(ug,FK),e(FK,OVe),e(ug,VVe),e(ug,j9),e(j9,XVe),e(ug,zVe),e(b,QVe),e(b,pg),e(pg,TK),e(TK,WVe),e(pg,HVe),e(pg,D9),e(D9,UVe),e(pg,JVe),e(b,YVe),e(b,_g),e(_g,MK),e(MK,KVe),e(_g,ZVe),e(_g,G9),e(G9,eXe),e(_g,oXe),e(b,rXe),e(b,vg),e(vg,EK),e(EK,tXe),e(vg,aXe),e(vg,O9),e(O9,nXe),e(vg,sXe),e(b,lXe),e(b,bg),e(bg,CK),e(CK,iXe),e(bg,dXe),e(bg,V9),e(V9,cXe),e(bg,fXe),e(b,mXe),e(b,Fg),e(Fg,wK),e(wK,gXe),e(Fg,hXe),e(Fg,X9),e(X9,uXe),e(Fg,pXe),e(b,_Xe),e(b,Tg),e(Tg,AK),e(AK,vXe),e(Tg,bXe),e(Tg,z9),e(z9,FXe),e(Tg,TXe),e(b,MXe),e(b,Mg),e(Mg,yK),e(yK,EXe),e(Mg,CXe),e(Mg,Q9),e(Q9,wXe),e(Mg,AXe),e(b,yXe),e(b,Eg),e(Eg,LK),e(LK,LXe),e(Eg,xXe),e(Eg,W9),e(W9,kXe),e(Eg,SXe),e(b,RXe),e(b,Cg),e(Cg,xK),e(xK,BXe),e(Cg,PXe),e(Cg,H9),e(H9,$Xe),e(Cg,IXe),e(b,qXe),e(b,wg),e(wg,kK),e(kK,NXe),e(wg,jXe),e(wg,U9),e(U9,DXe),e(wg,GXe),e(b,OXe),e(b,Ag),e(Ag,SK),e(SK,VXe),e(Ag,XXe),e(Ag,J9),e(J9,zXe),e(Ag,QXe),e(b,WXe),e(b,yg),e(yg,RK),e(RK,HXe),e(yg,UXe),e(yg,Y9),e(Y9,JXe),e(yg,YXe),e(b,KXe),e(b,Lg),e(Lg,BK),e(BK,ZXe),e(Lg,eze),e(Lg,K9),e(K9,oze),e(Lg,rze),e(b,tze),e(b,xg),e(xg,PK),e(PK,aze),e(xg,nze),e(xg,Z9),e(Z9,sze),e(xg,lze),e(b,ize),e(b,kg),e(kg,$K),e($K,dze),e(kg,cze),e(kg,ek),e(ek,fze),e(kg,mze),e(b,gze),e(b,Sg),e(Sg,IK),e(IK,hze),e(Sg,uze),e(Sg,ok),e(ok,pze),e(Sg,_ze),e(b,vze),e(b,Rg),e(Rg,qK),e(qK,bze),e(Rg,Fze),e(Rg,rk),e(rk,Tze),e(Rg,Mze),e(b,Eze),e(b,Bg),e(Bg,NK),e(NK,Cze),e(Bg,wze),e(Bg,tk),e(tk,Aze),e(Bg,yze),e(b,Lze),e(b,Pg),e(Pg,jK),e(jK,xze),e(Pg,kze),e(Pg,ak),e(ak,Sze),e(Pg,Rze),e(mo,Bze),e(mo,DK),e(DK,Pze),e(mo,$ze),g(A3,mo,null),e(Qo,Ize),e(Qo,$g),g(y3,$g,null),e($g,qze),e($g,GK),e(GK,Nze),v(c,XSe,_),v(c,Qi,_),e(Qi,Ig),e(Ig,OK),g(L3,OK,null),e(Qi,jze),e(Qi,VK),e(VK,Dze),v(c,zSe,_),v(c,Wo,_),g(x3,Wo,null),e(Wo,Gze),e(Wo,k3),e(k3,Oze),e(k3,nk),e(nk,Vze),e(k3,Xze),e(Wo,zze),e(Wo,S3),e(S3,Qze),e(S3,XK),e(XK,Wze),e(S3,Hze),e(Wo,Uze),e(Wo,go),g(R3,go,null),e(go,Jze),e(go,zK),e(zK,Yze),e(go,Kze),e(go,Oa),e(Oa,Zze),e(Oa,QK),e(QK,eQe),e(Oa,oQe),e(Oa,WK),e(WK,rQe),e(Oa,tQe),e(Oa,HK),e(HK,aQe),e(Oa,nQe),e(go,sQe),e(go,C),e(C,Qn),e(Qn,UK),e(UK,lQe),e(Qn,iQe),e(Qn,sk),e(sk,dQe),e(Qn,cQe),e(Qn,lk),e(lk,fQe),e(Qn,mQe),e(C,gQe),e(C,Wn),e(Wn,JK),e(JK,hQe),e(Wn,uQe),e(Wn,ik),e(ik,pQe),e(Wn,_Qe),e(Wn,dk),e(dk,vQe),e(Wn,bQe),e(C,FQe),e(C,Hn),e(Hn,YK),e(YK,TQe),e(Hn,MQe),e(Hn,ck),e(ck,EQe),e(Hn,CQe),e(Hn,fk),e(fk,wQe),e(Hn,AQe),e(C,yQe),e(C,qg),e(qg,KK),e(KK,LQe),e(qg,xQe),e(qg,mk),e(mk,kQe),e(qg,SQe),e(C,RQe),e(C,Un),e(Un,ZK),e(ZK,BQe),e(Un,PQe),e(Un,gk),e(gk,$Qe),e(Un,IQe),e(Un,hk),e(hk,qQe),e(Un,NQe),e(C,jQe),e(C,Ng),e(Ng,eZ),e(eZ,DQe),e(Ng,GQe),e(Ng,uk),e(uk,OQe),e(Ng,VQe),e(C,XQe),e(C,jg),e(jg,oZ),e(oZ,zQe),e(jg,QQe),e(jg,pk),e(pk,WQe),e(jg,HQe),e(C,UQe),e(C,Dg),e(Dg,rZ),e(rZ,JQe),e(Dg,YQe),e(Dg,_k),e(_k,KQe),e(Dg,ZQe),e(C,eWe),e(C,Jn),e(Jn,tZ),e(tZ,oWe),e(Jn,rWe),e(Jn,vk),e(vk,tWe),e(Jn,aWe),e(Jn,bk),e(bk,nWe),e(Jn,sWe),e(C,lWe),e(C,Yn),e(Yn,aZ),e(aZ,iWe),e(Yn,dWe),e(Yn,Fk),e(Fk,cWe),e(Yn,fWe),e(Yn,Tk),e(Tk,mWe),e(Yn,gWe),e(C,hWe),e(C,Kn),e(Kn,nZ),e(nZ,uWe),e(Kn,pWe),e(Kn,Mk),e(Mk,_We),e(Kn,vWe),e(Kn,Ek),e(Ek,bWe),e(Kn,FWe),e(C,TWe),e(C,Gg),e(Gg,sZ),e(sZ,MWe),e(Gg,EWe),e(Gg,Ck),e(Ck,CWe),e(Gg,wWe),e(C,AWe),e(C,Og),e(Og,lZ),e(lZ,yWe),e(Og,LWe),e(Og,wk),e(wk,xWe),e(Og,kWe),e(C,SWe),e(C,Zn),e(Zn,iZ),e(iZ,RWe),e(Zn,BWe),e(Zn,Ak),e(Ak,PWe),e(Zn,$We),e(Zn,yk),e(yk,IWe),e(Zn,qWe),e(C,NWe),e(C,Vg),e(Vg,dZ),e(dZ,jWe),e(Vg,DWe),e(Vg,Lk),e(Lk,GWe),e(Vg,OWe),e(C,VWe),e(C,es),e(es,cZ),e(cZ,XWe),e(es,zWe),e(es,xk),e(xk,QWe),e(es,WWe),e(es,kk),e(kk,HWe),e(es,UWe),e(C,JWe),e(C,os),e(os,fZ),e(fZ,YWe),e(os,KWe),e(os,Sk),e(Sk,ZWe),e(os,eHe),e(os,Rk),e(Rk,oHe),e(os,rHe),e(C,tHe),e(C,rs),e(rs,mZ),e(mZ,aHe),e(rs,nHe),e(rs,Bk),e(Bk,sHe),e(rs,lHe),e(rs,gZ),e(gZ,iHe),e(rs,dHe),e(C,cHe),e(C,Xg),e(Xg,hZ),e(hZ,fHe),e(Xg,mHe),e(Xg,Pk),e(Pk,gHe),e(Xg,hHe),e(C,uHe),e(C,ts),e(ts,uZ),e(uZ,pHe),e(ts,_He),e(ts,$k),e($k,vHe),e(ts,bHe),e(ts,Ik),e(Ik,FHe),e(ts,THe),e(C,MHe),e(C,zg),e(zg,pZ),e(pZ,EHe),e(zg,CHe),e(zg,qk),e(qk,wHe),e(zg,AHe),e(C,yHe),e(C,as),e(as,_Z),e(_Z,LHe),e(as,xHe),e(as,Nk),e(Nk,kHe),e(as,SHe),e(as,jk),e(jk,RHe),e(as,BHe),e(C,PHe),e(C,ns),e(ns,vZ),e(vZ,$He),e(ns,IHe),e(ns,Dk),e(Dk,qHe),e(ns,NHe),e(ns,Gk),e(Gk,jHe),e(ns,DHe),e(C,GHe),e(C,ss),e(ss,bZ),e(bZ,OHe),e(ss,VHe),e(ss,Ok),e(Ok,XHe),e(ss,zHe),e(ss,Vk),e(Vk,QHe),e(ss,WHe),e(C,HHe),e(C,Qg),e(Qg,FZ),e(FZ,UHe),e(Qg,JHe),e(Qg,Xk),e(Xk,YHe),e(Qg,KHe),e(C,ZHe),e(C,ls),e(ls,TZ),e(TZ,eUe),e(ls,oUe),e(ls,zk),e(zk,rUe),e(ls,tUe),e(ls,Qk),e(Qk,aUe),e(ls,nUe),e(C,sUe),e(C,Wg),e(Wg,MZ),e(MZ,lUe),e(Wg,iUe),e(Wg,Wk),e(Wk,dUe),e(Wg,cUe),e(C,fUe),e(C,is),e(is,EZ),e(EZ,mUe),e(is,gUe),e(is,Hk),e(Hk,hUe),e(is,uUe),e(is,Uk),e(Uk,pUe),e(is,_Ue),e(C,vUe),e(C,ds),e(ds,CZ),e(CZ,bUe),e(ds,FUe),e(ds,Jk),e(Jk,TUe),e(ds,MUe),e(ds,Yk),e(Yk,EUe),e(ds,CUe),e(C,wUe),e(C,cs),e(cs,wZ),e(wZ,AUe),e(cs,yUe),e(cs,Kk),e(Kk,LUe),e(cs,xUe),e(cs,Zk),e(Zk,kUe),e(cs,SUe),e(C,RUe),e(C,fs),e(fs,AZ),e(AZ,BUe),e(fs,PUe),e(fs,eS),e(eS,$Ue),e(fs,IUe),e(fs,oS),e(oS,qUe),e(fs,NUe),e(C,jUe),e(C,Hg),e(Hg,yZ),e(yZ,DUe),e(Hg,GUe),e(Hg,rS),e(rS,OUe),e(Hg,VUe),e(C,XUe),e(C,ms),e(ms,LZ),e(LZ,zUe),e(ms,QUe),e(ms,tS),e(tS,WUe),e(ms,HUe),e(ms,aS),e(aS,UUe),e(ms,JUe),e(C,YUe),e(C,gs),e(gs,xZ),e(xZ,KUe),e(gs,ZUe),e(gs,nS),e(nS,eJe),e(gs,oJe),e(gs,sS),e(sS,rJe),e(gs,tJe),e(C,aJe),e(C,hs),e(hs,kZ),e(kZ,nJe),e(hs,sJe),e(hs,lS),e(lS,lJe),e(hs,iJe),e(hs,iS),e(iS,dJe),e(hs,cJe),e(C,fJe),e(C,us),e(us,SZ),e(SZ,mJe),e(us,gJe),e(us,dS),e(dS,hJe),e(us,uJe),e(us,cS),e(cS,pJe),e(us,_Je),e(C,vJe),e(C,ps),e(ps,RZ),e(RZ,bJe),e(ps,FJe),e(ps,fS),e(fS,TJe),e(ps,MJe),e(ps,mS),e(mS,EJe),e(ps,CJe),e(C,wJe),e(C,_s),e(_s,BZ),e(BZ,AJe),e(_s,yJe),e(_s,gS),e(gS,LJe),e(_s,xJe),e(_s,hS),e(hS,kJe),e(_s,SJe),e(C,RJe),e(C,Ug),e(Ug,PZ),e(PZ,BJe),e(Ug,PJe),e(Ug,uS),e(uS,$Je),e(Ug,IJe),e(C,qJe),e(C,vs),e(vs,$Z),e($Z,NJe),e(vs,jJe),e(vs,pS),e(pS,DJe),e(vs,GJe),e(vs,_S),e(_S,OJe),e(vs,VJe),e(C,XJe),e(C,Jg),e(Jg,IZ),e(IZ,zJe),e(Jg,QJe),e(Jg,vS),e(vS,WJe),e(Jg,HJe),e(C,UJe),e(C,Yg),e(Yg,qZ),e(qZ,JJe),e(Yg,YJe),e(Yg,bS),e(bS,KJe),e(Yg,ZJe),e(C,eYe),e(C,bs),e(bs,NZ),e(NZ,oYe),e(bs,rYe),e(bs,FS),e(FS,tYe),e(bs,aYe),e(bs,TS),e(TS,nYe),e(bs,sYe),e(C,lYe),e(C,Fs),e(Fs,jZ),e(jZ,iYe),e(Fs,dYe),e(Fs,MS),e(MS,cYe),e(Fs,fYe),e(Fs,ES),e(ES,mYe),e(Fs,gYe),e(C,hYe),e(C,Kg),e(Kg,DZ),e(DZ,uYe),e(Kg,pYe),e(Kg,CS),e(CS,_Ye),e(Kg,vYe),e(C,bYe),e(C,Ts),e(Ts,GZ),e(GZ,FYe),e(Ts,TYe),e(Ts,wS),e(wS,MYe),e(Ts,EYe),e(Ts,AS),e(AS,CYe),e(Ts,wYe),e(C,AYe),e(C,Ms),e(Ms,OZ),e(OZ,yYe),e(Ms,LYe),e(Ms,yS),e(yS,xYe),e(Ms,kYe),e(Ms,LS),e(LS,SYe),e(Ms,RYe),e(C,BYe),e(C,Es),e(Es,VZ),e(VZ,PYe),e(Es,$Ye),e(Es,xS),e(xS,IYe),e(Es,qYe),e(Es,kS),e(kS,NYe),e(Es,jYe),e(C,DYe),e(C,Cs),e(Cs,XZ),e(XZ,GYe),e(Cs,OYe),e(Cs,SS),e(SS,VYe),e(Cs,XYe),e(Cs,RS),e(RS,zYe),e(Cs,QYe),e(C,WYe),e(C,ws),e(ws,zZ),e(zZ,HYe),e(ws,UYe),e(ws,BS),e(BS,JYe),e(ws,YYe),e(ws,PS),e(PS,KYe),e(ws,ZYe),e(C,eKe),e(C,Zg),e(Zg,QZ),e(QZ,oKe),e(Zg,rKe),e(Zg,$S),e($S,tKe),e(Zg,aKe),e(C,nKe),e(C,eh),e(eh,WZ),e(WZ,sKe),e(eh,lKe),e(eh,IS),e(IS,iKe),e(eh,dKe),e(C,cKe),e(C,oh),e(oh,HZ),e(HZ,fKe),e(oh,mKe),e(oh,qS),e(qS,gKe),e(oh,hKe),e(C,uKe),e(C,rh),e(rh,UZ),e(UZ,pKe),e(rh,_Ke),e(rh,NS),e(NS,vKe),e(rh,bKe),e(C,FKe),e(C,As),e(As,JZ),e(JZ,TKe),e(As,MKe),e(As,jS),e(jS,EKe),e(As,CKe),e(As,DS),e(DS,wKe),e(As,AKe),e(C,yKe),e(C,th),e(th,YZ),e(YZ,LKe),e(th,xKe),e(th,GS),e(GS,kKe),e(th,SKe),e(C,RKe),e(C,ys),e(ys,KZ),e(KZ,BKe),e(ys,PKe),e(ys,OS),e(OS,$Ke),e(ys,IKe),e(ys,VS),e(VS,qKe),e(ys,NKe),e(C,jKe),e(C,Ls),e(Ls,ZZ),e(ZZ,DKe),e(Ls,GKe),e(Ls,XS),e(XS,OKe),e(Ls,VKe),e(Ls,zS),e(zS,XKe),e(Ls,zKe),e(C,QKe),e(C,xs),e(xs,eee),e(eee,WKe),e(xs,HKe),e(xs,QS),e(QS,UKe),e(xs,JKe),e(xs,WS),e(WS,YKe),e(xs,KKe),e(C,ZKe),e(C,ks),e(ks,oee),e(oee,eZe),e(ks,oZe),e(ks,HS),e(HS,rZe),e(ks,tZe),e(ks,US),e(US,aZe),e(ks,nZe),e(C,sZe),e(C,Ss),e(Ss,ree),e(ree,lZe),e(Ss,iZe),e(Ss,JS),e(JS,dZe),e(Ss,cZe),e(Ss,YS),e(YS,fZe),e(Ss,mZe),e(C,gZe),e(C,Rs),e(Rs,tee),e(tee,hZe),e(Rs,uZe),e(Rs,KS),e(KS,pZe),e(Rs,_Ze),e(Rs,ZS),e(ZS,vZe),e(Rs,bZe),e(C,FZe),e(C,ah),e(ah,aee),e(aee,TZe),e(ah,MZe),e(ah,eR),e(eR,EZe),e(ah,CZe),e(C,wZe),e(C,nh),e(nh,nee),e(nee,AZe),e(nh,yZe),e(nh,oR),e(oR,LZe),e(nh,xZe),e(C,kZe),e(C,Bs),e(Bs,see),e(see,SZe),e(Bs,RZe),e(Bs,rR),e(rR,BZe),e(Bs,PZe),e(Bs,tR),e(tR,$Ze),e(Bs,IZe),e(C,qZe),e(C,Ps),e(Ps,lee),e(lee,NZe),e(Ps,jZe),e(Ps,aR),e(aR,DZe),e(Ps,GZe),e(Ps,nR),e(nR,OZe),e(Ps,VZe),e(C,XZe),e(C,$s),e($s,iee),e(iee,zZe),e($s,QZe),e($s,sR),e(sR,WZe),e($s,HZe),e($s,lR),e(lR,UZe),e($s,JZe),e(C,YZe),e(C,sh),e(sh,dee),e(dee,KZe),e(sh,ZZe),e(sh,iR),e(iR,eeo),e(sh,oeo),e(C,reo),e(C,lh),e(lh,cee),e(cee,teo),e(lh,aeo),e(lh,dR),e(dR,neo),e(lh,seo),e(C,leo),e(C,ih),e(ih,fee),e(fee,ieo),e(ih,deo),e(ih,cR),e(cR,ceo),e(ih,feo),e(C,meo),e(C,dh),e(dh,mee),e(mee,geo),e(dh,heo),e(dh,fR),e(fR,ueo),e(dh,peo),e(C,_eo),e(C,Is),e(Is,gee),e(gee,veo),e(Is,beo),e(Is,mR),e(mR,Feo),e(Is,Teo),e(Is,gR),e(gR,Meo),e(Is,Eeo),e(C,Ceo),e(C,ch),e(ch,hee),e(hee,weo),e(ch,Aeo),e(ch,hR),e(hR,yeo),e(ch,Leo),e(C,xeo),e(C,fh),e(fh,uee),e(uee,keo),e(fh,Seo),e(fh,uR),e(uR,Reo),e(fh,Beo),e(C,Peo),e(C,qs),e(qs,pee),e(pee,$eo),e(qs,Ieo),e(qs,pR),e(pR,qeo),e(qs,Neo),e(qs,_R),e(_R,jeo),e(qs,Deo),e(C,Geo),e(C,Ns),e(Ns,_ee),e(_ee,Oeo),e(Ns,Veo),e(Ns,vR),e(vR,Xeo),e(Ns,zeo),e(Ns,bR),e(bR,Qeo),e(Ns,Weo),e(go,Heo),e(go,vee),e(vee,Ueo),e(go,Jeo),g(B3,go,null),e(Wo,Yeo),e(Wo,mh),g(P3,mh,null),e(mh,Keo),e(mh,bee),e(bee,Zeo),v(c,QSe,_),v(c,Wi,_),e(Wi,gh),e(gh,Fee),g($3,Fee,null),e(Wi,eoo),e(Wi,Tee),e(Tee,ooo),v(c,WSe,_),v(c,Ho,_),g(I3,Ho,null),e(Ho,roo),e(Ho,q3),e(q3,too),e(q3,FR),e(FR,aoo),e(q3,noo),e(Ho,soo),e(Ho,N3),e(N3,loo),e(N3,Mee),e(Mee,ioo),e(N3,doo),e(Ho,coo),e(Ho,$e),g(j3,$e,null),e($e,foo),e($e,Eee),e(Eee,moo),e($e,goo),e($e,Va),e(Va,hoo),e(Va,Cee),e(Cee,uoo),e(Va,poo),e(Va,wee),e(wee,_oo),e(Va,voo),e(Va,Aee),e(Aee,boo),e(Va,Foo),e($e,Too),e($e,te),e(te,hh),e(hh,yee),e(yee,Moo),e(hh,Eoo),e(hh,TR),e(TR,Coo),e(hh,woo),e(te,Aoo),e(te,uh),e(uh,Lee),e(Lee,yoo),e(uh,Loo),e(uh,MR),e(MR,xoo),e(uh,koo),e(te,Soo),e(te,ph),e(ph,xee),e(xee,Roo),e(ph,Boo),e(ph,ER),e(ER,Poo),e(ph,$oo),e(te,Ioo),e(te,_h),e(_h,kee),e(kee,qoo),e(_h,Noo),e(_h,CR),e(CR,joo),e(_h,Doo),e(te,Goo),e(te,vh),e(vh,See),e(See,Ooo),e(vh,Voo),e(vh,wR),e(wR,Xoo),e(vh,zoo),e(te,Qoo),e(te,bh),e(bh,Ree),e(Ree,Woo),e(bh,Hoo),e(bh,AR),e(AR,Uoo),e(bh,Joo),e(te,Yoo),e(te,Fh),e(Fh,Bee),e(Bee,Koo),e(Fh,Zoo),e(Fh,yR),e(yR,ero),e(Fh,oro),e(te,rro),e(te,Th),e(Th,Pee),e(Pee,tro),e(Th,aro),e(Th,LR),e(LR,nro),e(Th,sro),e(te,lro),e(te,Mh),e(Mh,$ee),e($ee,iro),e(Mh,dro),e(Mh,xR),e(xR,cro),e(Mh,fro),e(te,mro),e(te,Eh),e(Eh,Iee),e(Iee,gro),e(Eh,hro),e(Eh,kR),e(kR,uro),e(Eh,pro),e(te,_ro),e(te,Ch),e(Ch,qee),e(qee,vro),e(Ch,bro),e(Ch,SR),e(SR,Fro),e(Ch,Tro),e(te,Mro),e(te,wh),e(wh,Nee),e(Nee,Ero),e(wh,Cro),e(wh,RR),e(RR,wro),e(wh,Aro),e(te,yro),e(te,Ah),e(Ah,jee),e(jee,Lro),e(Ah,xro),e(Ah,BR),e(BR,kro),e(Ah,Sro),e(te,Rro),e(te,yh),e(yh,Dee),e(Dee,Bro),e(yh,Pro),e(yh,PR),e(PR,$ro),e(yh,Iro),e(te,qro),e(te,Lh),e(Lh,Gee),e(Gee,Nro),e(Lh,jro),e(Lh,$R),e($R,Dro),e(Lh,Gro),e(te,Oro),e(te,xh),e(xh,Oee),e(Oee,Vro),e(xh,Xro),e(xh,IR),e(IR,zro),e(xh,Qro),e(te,Wro),e(te,kh),e(kh,Vee),e(Vee,Hro),e(kh,Uro),e(kh,qR),e(qR,Jro),e(kh,Yro),e(te,Kro),e(te,Sh),e(Sh,Xee),e(Xee,Zro),e(Sh,eto),e(Sh,NR),e(NR,oto),e(Sh,rto),e($e,tto),g(Rh,$e,null),e($e,ato),e($e,zee),e(zee,nto),e($e,sto),g(D3,$e,null),e(Ho,lto),e(Ho,Bh),g(G3,Bh,null),e(Bh,ito),e(Bh,Qee),e(Qee,dto),v(c,HSe,_),v(c,Hi,_),e(Hi,Ph),e(Ph,Wee),g(O3,Wee,null),e(Hi,cto),e(Hi,Hee),e(Hee,fto),v(c,USe,_),v(c,Uo,_),g(V3,Uo,null),e(Uo,mto),e(Uo,X3),e(X3,gto),e(X3,jR),e(jR,hto),e(X3,uto),e(Uo,pto),e(Uo,z3),e(z3,_to),e(z3,Uee),e(Uee,vto),e(z3,bto),e(Uo,Fto),e(Uo,Ie),g(Q3,Ie,null),e(Ie,Tto),e(Ie,Jee),e(Jee,Mto),e(Ie,Eto),e(Ie,Ui),e(Ui,Cto),e(Ui,Yee),e(Yee,wto),e(Ui,Ato),e(Ui,Kee),e(Kee,yto),e(Ui,Lto),e(Ie,xto),e(Ie,ke),e(ke,$h),e($h,Zee),e(Zee,kto),e($h,Sto),e($h,DR),e(DR,Rto),e($h,Bto),e(ke,Pto),e(ke,Ih),e(Ih,eoe),e(eoe,$to),e(Ih,Ito),e(Ih,GR),e(GR,qto),e(Ih,Nto),e(ke,jto),e(ke,qh),e(qh,ooe),e(ooe,Dto),e(qh,Gto),e(qh,OR),e(OR,Oto),e(qh,Vto),e(ke,Xto),e(ke,Nh),e(Nh,roe),e(roe,zto),e(Nh,Qto),e(Nh,VR),e(VR,Wto),e(Nh,Hto),e(ke,Uto),e(ke,jh),e(jh,toe),e(toe,Jto),e(jh,Yto),e(jh,XR),e(XR,Kto),e(jh,Zto),e(ke,eao),e(ke,Dh),e(Dh,aoe),e(aoe,oao),e(Dh,rao),e(Dh,zR),e(zR,tao),e(Dh,aao),e(ke,nao),e(ke,Gh),e(Gh,noe),e(noe,sao),e(Gh,lao),e(Gh,QR),e(QR,iao),e(Gh,dao),e(ke,cao),e(ke,Oh),e(Oh,soe),e(soe,fao),e(Oh,mao),e(Oh,WR),e(WR,gao),e(Oh,hao),e(Ie,uao),g(Vh,Ie,null),e(Ie,pao),e(Ie,loe),e(loe,_ao),e(Ie,vao),g(W3,Ie,null),e(Uo,bao),e(Uo,Xh),g(H3,Xh,null),e(Xh,Fao),e(Xh,ioe),e(ioe,Tao),v(c,JSe,_),v(c,Ji,_),e(Ji,zh),e(zh,doe),g(U3,doe,null),e(Ji,Mao),e(Ji,coe),e(coe,Eao),v(c,YSe,_),v(c,Jo,_),g(J3,Jo,null),e(Jo,Cao),e(Jo,Yi),e(Yi,wao),e(Yi,HR),e(HR,Aao),e(Yi,yao),e(Yi,UR),e(UR,Lao),e(Yi,xao),e(Jo,kao),e(Jo,Y3),e(Y3,Sao),e(Y3,foe),e(foe,Rao),e(Y3,Bao),e(Jo,Pao),e(Jo,Xr),g(K3,Xr,null),e(Xr,$ao),e(Xr,moe),e(moe,Iao),e(Xr,qao),e(Xr,Ki),e(Ki,Nao),e(Ki,goe),e(goe,jao),e(Ki,Dao),e(Ki,JR),e(JR,Gao),e(Ki,Oao),e(Xr,Vao),e(Xr,hoe),e(hoe,Xao),e(Xr,zao),g(Z3,Xr,null),e(Jo,Qao),e(Jo,qe),g(eC,qe,null),e(qe,Wao),e(qe,uoe),e(uoe,Hao),e(qe,Uao),e(qe,Xa),e(Xa,Jao),e(Xa,poe),e(poe,Yao),e(Xa,Kao),e(Xa,_oe),e(_oe,Zao),e(Xa,eno),e(Xa,voe),e(voe,ono),e(Xa,rno),e(qe,tno),e(qe,T),e(T,Qh),e(Qh,boe),e(boe,ano),e(Qh,nno),e(Qh,YR),e(YR,sno),e(Qh,lno),e(T,ino),e(T,Wh),e(Wh,Foe),e(Foe,dno),e(Wh,cno),e(Wh,KR),e(KR,fno),e(Wh,mno),e(T,gno),e(T,Hh),e(Hh,Toe),e(Toe,hno),e(Hh,uno),e(Hh,ZR),e(ZR,pno),e(Hh,_no),e(T,vno),e(T,Uh),e(Uh,Moe),e(Moe,bno),e(Uh,Fno),e(Uh,eB),e(eB,Tno),e(Uh,Mno),e(T,Eno),e(T,Jh),e(Jh,Eoe),e(Eoe,Cno),e(Jh,wno),e(Jh,oB),e(oB,Ano),e(Jh,yno),e(T,Lno),e(T,Yh),e(Yh,Coe),e(Coe,xno),e(Yh,kno),e(Yh,rB),e(rB,Sno),e(Yh,Rno),e(T,Bno),e(T,Kh),e(Kh,woe),e(woe,Pno),e(Kh,$no),e(Kh,tB),e(tB,Ino),e(Kh,qno),e(T,Nno),e(T,Zh),e(Zh,Aoe),e(Aoe,jno),e(Zh,Dno),e(Zh,aB),e(aB,Gno),e(Zh,Ono),e(T,Vno),e(T,eu),e(eu,yoe),e(yoe,Xno),e(eu,zno),e(eu,nB),e(nB,Qno),e(eu,Wno),e(T,Hno),e(T,ou),e(ou,Loe),e(Loe,Uno),e(ou,Jno),e(ou,sB),e(sB,Yno),e(ou,Kno),e(T,Zno),e(T,ru),e(ru,xoe),e(xoe,eso),e(ru,oso),e(ru,lB),e(lB,rso),e(ru,tso),e(T,aso),e(T,tu),e(tu,koe),e(koe,nso),e(tu,sso),e(tu,iB),e(iB,lso),e(tu,iso),e(T,dso),e(T,au),e(au,Soe),e(Soe,cso),e(au,fso),e(au,dB),e(dB,mso),e(au,gso),e(T,hso),e(T,nu),e(nu,Roe),e(Roe,uso),e(nu,pso),e(nu,cB),e(cB,_so),e(nu,vso),e(T,bso),e(T,su),e(su,Boe),e(Boe,Fso),e(su,Tso),e(su,fB),e(fB,Mso),e(su,Eso),e(T,Cso),e(T,lu),e(lu,Poe),e(Poe,wso),e(lu,Aso),e(lu,mB),e(mB,yso),e(lu,Lso),e(T,xso),e(T,iu),e(iu,$oe),e($oe,kso),e(iu,Sso),e(iu,gB),e(gB,Rso),e(iu,Bso),e(T,Pso),e(T,du),e(du,Ioe),e(Ioe,$so),e(du,Iso),e(du,hB),e(hB,qso),e(du,Nso),e(T,jso),e(T,cu),e(cu,qoe),e(qoe,Dso),e(cu,Gso),e(cu,uB),e(uB,Oso),e(cu,Vso),e(T,Xso),e(T,fu),e(fu,Noe),e(Noe,zso),e(fu,Qso),e(fu,pB),e(pB,Wso),e(fu,Hso),e(T,Uso),e(T,mu),e(mu,joe),e(joe,Jso),e(mu,Yso),e(mu,_B),e(_B,Kso),e(mu,Zso),e(T,elo),e(T,gu),e(gu,Doe),e(Doe,olo),e(gu,rlo),e(gu,vB),e(vB,tlo),e(gu,alo),e(T,nlo),e(T,hu),e(hu,Goe),e(Goe,slo),e(hu,llo),e(hu,bB),e(bB,ilo),e(hu,dlo),e(T,clo),e(T,uu),e(uu,Ooe),e(Ooe,flo),e(uu,mlo),e(uu,FB),e(FB,glo),e(uu,hlo),e(T,ulo),e(T,pu),e(pu,Voe),e(Voe,plo),e(pu,_lo),e(pu,TB),e(TB,vlo),e(pu,blo),e(T,Flo),e(T,_u),e(_u,Xoe),e(Xoe,Tlo),e(_u,Mlo),e(_u,MB),e(MB,Elo),e(_u,Clo),e(T,wlo),e(T,vu),e(vu,zoe),e(zoe,Alo),e(vu,ylo),e(vu,EB),e(EB,Llo),e(vu,xlo),e(T,klo),e(T,bu),e(bu,Qoe),e(Qoe,Slo),e(bu,Rlo),e(bu,CB),e(CB,Blo),e(bu,Plo),e(T,$lo),e(T,Fu),e(Fu,Woe),e(Woe,Ilo),e(Fu,qlo),e(Fu,wB),e(wB,Nlo),e(Fu,jlo),e(T,Dlo),e(T,js),e(js,Hoe),e(Hoe,Glo),e(js,Olo),e(js,AB),e(AB,Vlo),e(js,Xlo),e(js,yB),e(yB,zlo),e(js,Qlo),e(T,Wlo),e(T,Tu),e(Tu,Uoe),e(Uoe,Hlo),e(Tu,Ulo),e(Tu,LB),e(LB,Jlo),e(Tu,Ylo),e(T,Klo),e(T,Mu),e(Mu,Joe),e(Joe,Zlo),e(Mu,eio),e(Mu,xB),e(xB,oio),e(Mu,rio),e(T,tio),e(T,Eu),e(Eu,Yoe),e(Yoe,aio),e(Eu,nio),e(Eu,kB),e(kB,sio),e(Eu,lio),e(T,iio),e(T,Cu),e(Cu,Koe),e(Koe,dio),e(Cu,cio),e(Cu,SB),e(SB,fio),e(Cu,mio),e(T,gio),e(T,wu),e(wu,Zoe),e(Zoe,hio),e(wu,uio),e(wu,RB),e(RB,pio),e(wu,_io),e(T,vio),e(T,Au),e(Au,ere),e(ere,bio),e(Au,Fio),e(Au,BB),e(BB,Tio),e(Au,Mio),e(T,Eio),e(T,yu),e(yu,ore),e(ore,Cio),e(yu,wio),e(yu,PB),e(PB,Aio),e(yu,yio),e(T,Lio),e(T,Lu),e(Lu,rre),e(rre,xio),e(Lu,kio),e(Lu,$B),e($B,Sio),e(Lu,Rio),e(T,Bio),e(T,xu),e(xu,tre),e(tre,Pio),e(xu,$io),e(xu,IB),e(IB,Iio),e(xu,qio),e(T,Nio),e(T,ku),e(ku,are),e(are,jio),e(ku,Dio),e(ku,qB),e(qB,Gio),e(ku,Oio),e(T,Vio),e(T,Su),e(Su,nre),e(nre,Xio),e(Su,zio),e(Su,NB),e(NB,Qio),e(Su,Wio),e(T,Hio),e(T,Ru),e(Ru,sre),e(sre,Uio),e(Ru,Jio),e(Ru,jB),e(jB,Yio),e(Ru,Kio),e(T,Zio),e(T,Bu),e(Bu,lre),e(lre,edo),e(Bu,odo),e(Bu,DB),e(DB,rdo),e(Bu,tdo),e(T,ado),e(T,Pu),e(Pu,ire),e(ire,ndo),e(Pu,sdo),e(Pu,GB),e(GB,ldo),e(Pu,ido),e(T,ddo),e(T,$u),e($u,dre),e(dre,cdo),e($u,fdo),e($u,OB),e(OB,mdo),e($u,gdo),e(T,hdo),e(T,Iu),e(Iu,cre),e(cre,udo),e(Iu,pdo),e(Iu,VB),e(VB,_do),e(Iu,vdo),e(T,bdo),e(T,qu),e(qu,fre),e(fre,Fdo),e(qu,Tdo),e(qu,XB),e(XB,Mdo),e(qu,Edo),e(T,Cdo),e(T,Nu),e(Nu,mre),e(mre,wdo),e(Nu,Ado),e(Nu,zB),e(zB,ydo),e(Nu,Ldo),e(T,xdo),e(T,ju),e(ju,gre),e(gre,kdo),e(ju,Sdo),e(ju,QB),e(QB,Rdo),e(ju,Bdo),e(T,Pdo),e(T,Du),e(Du,hre),e(hre,$do),e(Du,Ido),e(Du,WB),e(WB,qdo),e(Du,Ndo),e(T,jdo),e(T,Gu),e(Gu,ure),e(ure,Ddo),e(Gu,Gdo),e(Gu,HB),e(HB,Odo),e(Gu,Vdo),e(T,Xdo),e(T,Ou),e(Ou,pre),e(pre,zdo),e(Ou,Qdo),e(Ou,UB),e(UB,Wdo),e(Ou,Hdo),e(T,Udo),e(T,Vu),e(Vu,_re),e(_re,Jdo),e(Vu,Ydo),e(Vu,JB),e(JB,Kdo),e(Vu,Zdo),e(T,eco),e(T,Xu),e(Xu,vre),e(vre,oco),e(Xu,rco),e(Xu,YB),e(YB,tco),e(Xu,aco),e(T,nco),e(T,zu),e(zu,bre),e(bre,sco),e(zu,lco),e(zu,KB),e(KB,ico),e(zu,dco),e(T,cco),e(T,Qu),e(Qu,Fre),e(Fre,fco),e(Qu,mco),e(Qu,ZB),e(ZB,gco),e(Qu,hco),e(T,uco),e(T,Wu),e(Wu,Tre),e(Tre,pco),e(Wu,_co),e(Wu,eP),e(eP,vco),e(Wu,bco),e(T,Fco),e(T,Hu),e(Hu,Mre),e(Mre,Tco),e(Hu,Mco),e(Hu,oP),e(oP,Eco),e(Hu,Cco),e(T,wco),e(T,Uu),e(Uu,Ere),e(Ere,Aco),e(Uu,yco),e(Uu,rP),e(rP,Lco),e(Uu,xco),e(T,kco),e(T,Ju),e(Ju,Cre),e(Cre,Sco),e(Ju,Rco),e(Ju,tP),e(tP,Bco),e(Ju,Pco),e(T,$co),e(T,Yu),e(Yu,wre),e(wre,Ico),e(Yu,qco),e(Yu,aP),e(aP,Nco),e(Yu,jco),e(T,Dco),e(T,Ku),e(Ku,Are),e(Are,Gco),e(Ku,Oco),e(Ku,nP),e(nP,Vco),e(Ku,Xco),e(T,zco),e(T,Zu),e(Zu,yre),e(yre,Qco),e(Zu,Wco),e(Zu,sP),e(sP,Hco),e(Zu,Uco),e(T,Jco),e(T,ep),e(ep,Lre),e(Lre,Yco),e(ep,Kco),e(ep,lP),e(lP,Zco),e(ep,efo),e(T,ofo),e(T,op),e(op,xre),e(xre,rfo),e(op,tfo),e(op,iP),e(iP,afo),e(op,nfo),e(T,sfo),e(T,rp),e(rp,kre),e(kre,lfo),e(rp,ifo),e(rp,dP),e(dP,dfo),e(rp,cfo),e(T,ffo),e(T,tp),e(tp,Sre),e(Sre,mfo),e(tp,gfo),e(tp,cP),e(cP,hfo),e(tp,ufo),e(T,pfo),e(T,ap),e(ap,Rre),e(Rre,_fo),e(ap,vfo),e(ap,fP),e(fP,bfo),e(ap,Ffo),e(T,Tfo),e(T,np),e(np,Bre),e(Bre,Mfo),e(np,Efo),e(np,mP),e(mP,Cfo),e(np,wfo),e(T,Afo),e(T,sp),e(sp,Pre),e(Pre,yfo),e(sp,Lfo),e(sp,gP),e(gP,xfo),e(sp,kfo),e(T,Sfo),e(T,lp),e(lp,$re),e($re,Rfo),e(lp,Bfo),e(lp,hP),e(hP,Pfo),e(lp,$fo),e(T,Ifo),e(T,ip),e(ip,Ire),e(Ire,qfo),e(ip,Nfo),e(ip,uP),e(uP,jfo),e(ip,Dfo),e(T,Gfo),e(T,dp),e(dp,qre),e(qre,Ofo),e(dp,Vfo),e(dp,pP),e(pP,Xfo),e(dp,zfo),e(T,Qfo),e(T,cp),e(cp,Nre),e(Nre,Wfo),e(cp,Hfo),e(cp,_P),e(_P,Ufo),e(cp,Jfo),e(T,Yfo),e(T,fp),e(fp,jre),e(jre,Kfo),e(fp,Zfo),e(fp,vP),e(vP,emo),e(fp,omo),e(T,rmo),e(T,mp),e(mp,Dre),e(Dre,tmo),e(mp,amo),e(mp,bP),e(bP,nmo),e(mp,smo),e(T,lmo),e(T,gp),e(gp,Gre),e(Gre,imo),e(gp,dmo),e(gp,FP),e(FP,cmo),e(gp,fmo),e(T,mmo),e(T,hp),e(hp,Ore),e(Ore,gmo),e(hp,hmo),e(hp,TP),e(TP,umo),e(hp,pmo),e(T,_mo),e(T,up),e(up,Vre),e(Vre,vmo),e(up,bmo),e(up,MP),e(MP,Fmo),e(up,Tmo),e(T,Mmo),e(T,pp),e(pp,Xre),e(Xre,Emo),e(pp,Cmo),e(pp,EP),e(EP,wmo),e(pp,Amo),e(T,ymo),e(T,_p),e(_p,zre),e(zre,Lmo),e(_p,xmo),e(_p,CP),e(CP,kmo),e(_p,Smo),e(T,Rmo),e(T,vp),e(vp,Qre),e(Qre,Bmo),e(vp,Pmo),e(vp,wP),e(wP,$mo),e(vp,Imo),e(T,qmo),e(T,bp),e(bp,Wre),e(Wre,Nmo),e(bp,jmo),e(bp,AP),e(AP,Dmo),e(bp,Gmo),e(T,Omo),e(T,Fp),e(Fp,Hre),e(Hre,Vmo),e(Fp,Xmo),e(Fp,yP),e(yP,zmo),e(Fp,Qmo),e(T,Wmo),e(T,Tp),e(Tp,Ure),e(Ure,Hmo),e(Tp,Umo),e(Tp,LP),e(LP,Jmo),e(Tp,Ymo),e(T,Kmo),e(T,Mp),e(Mp,Jre),e(Jre,Zmo),e(Mp,ego),e(Mp,xP),e(xP,ogo),e(Mp,rgo),e(T,tgo),e(T,Ep),e(Ep,Yre),e(Yre,ago),e(Ep,ngo),e(Ep,kP),e(kP,sgo),e(Ep,lgo),e(T,igo),e(T,Cp),e(Cp,Kre),e(Kre,dgo),e(Cp,cgo),e(Cp,SP),e(SP,fgo),e(Cp,mgo),e(T,ggo),e(T,wp),e(wp,Zre),e(Zre,hgo),e(wp,ugo),e(wp,RP),e(RP,pgo),e(wp,_go),e(T,vgo),e(T,Ap),e(Ap,ete),e(ete,bgo),e(Ap,Fgo),e(Ap,BP),e(BP,Tgo),e(Ap,Mgo),e(T,Ego),e(T,yp),e(yp,ote),e(ote,Cgo),e(yp,wgo),e(yp,PP),e(PP,Ago),e(yp,ygo),e(T,Lgo),e(T,Lp),e(Lp,rte),e(rte,xgo),e(Lp,kgo),e(Lp,$P),e($P,Sgo),e(Lp,Rgo),e(qe,Bgo),e(qe,xp),e(xp,Pgo),e(xp,tte),e(tte,$go),e(xp,Igo),e(xp,ate),e(ate,qgo),e(qe,Ngo),e(qe,nte),e(nte,jgo),e(qe,Dgo),g(oC,qe,null),v(c,KSe,_),v(c,Zi,_),e(Zi,kp),e(kp,ste),g(rC,ste,null),e(Zi,Ggo),e(Zi,lte),e(lte,Ogo),v(c,ZSe,_),v(c,Yo,_),g(tC,Yo,null),e(Yo,Vgo),e(Yo,ed),e(ed,Xgo),e(ed,IP),e(IP,zgo),e(ed,Qgo),e(ed,qP),e(qP,Wgo),e(ed,Hgo),e(Yo,Ugo),e(Yo,aC),e(aC,Jgo),e(aC,ite),e(ite,Ygo),e(aC,Kgo),e(Yo,Zgo),e(Yo,zr),g(nC,zr,null),e(zr,eho),e(zr,dte),e(dte,oho),e(zr,rho),e(zr,od),e(od,tho),e(od,cte),e(cte,aho),e(od,nho),e(od,NP),e(NP,sho),e(od,lho),e(zr,iho),e(zr,fte),e(fte,dho),e(zr,cho),g(sC,zr,null),e(Yo,fho),e(Yo,Ne),g(lC,Ne,null),e(Ne,mho),e(Ne,mte),e(mte,gho),e(Ne,hho),e(Ne,za),e(za,uho),e(za,gte),e(gte,pho),e(za,_ho),e(za,hte),e(hte,vho),e(za,bho),e(za,ute),e(ute,Fho),e(za,Tho),e(Ne,Mho),e(Ne,S),e(S,Sp),e(Sp,pte),e(pte,Eho),e(Sp,Cho),e(Sp,jP),e(jP,who),e(Sp,Aho),e(S,yho),e(S,Rp),e(Rp,_te),e(_te,Lho),e(Rp,xho),e(Rp,DP),e(DP,kho),e(Rp,Sho),e(S,Rho),e(S,Bp),e(Bp,vte),e(vte,Bho),e(Bp,Pho),e(Bp,GP),e(GP,$ho),e(Bp,Iho),e(S,qho),e(S,Pp),e(Pp,bte),e(bte,Nho),e(Pp,jho),e(Pp,OP),e(OP,Dho),e(Pp,Gho),e(S,Oho),e(S,$p),e($p,Fte),e(Fte,Vho),e($p,Xho),e($p,VP),e(VP,zho),e($p,Qho),e(S,Who),e(S,Ip),e(Ip,Tte),e(Tte,Hho),e(Ip,Uho),e(Ip,XP),e(XP,Jho),e(Ip,Yho),e(S,Kho),e(S,qp),e(qp,Mte),e(Mte,Zho),e(qp,euo),e(qp,zP),e(zP,ouo),e(qp,ruo),e(S,tuo),e(S,Np),e(Np,Ete),e(Ete,auo),e(Np,nuo),e(Np,QP),e(QP,suo),e(Np,luo),e(S,iuo),e(S,jp),e(jp,Cte),e(Cte,duo),e(jp,cuo),e(jp,WP),e(WP,fuo),e(jp,muo),e(S,guo),e(S,Dp),e(Dp,wte),e(wte,huo),e(Dp,uuo),e(Dp,HP),e(HP,puo),e(Dp,_uo),e(S,vuo),e(S,Gp),e(Gp,Ate),e(Ate,buo),e(Gp,Fuo),e(Gp,UP),e(UP,Tuo),e(Gp,Muo),e(S,Euo),e(S,Op),e(Op,yte),e(yte,Cuo),e(Op,wuo),e(Op,JP),e(JP,Auo),e(Op,yuo),e(S,Luo),e(S,Vp),e(Vp,Lte),e(Lte,xuo),e(Vp,kuo),e(Vp,YP),e(YP,Suo),e(Vp,Ruo),e(S,Buo),e(S,Xp),e(Xp,xte),e(xte,Puo),e(Xp,$uo),e(Xp,KP),e(KP,Iuo),e(Xp,quo),e(S,Nuo),e(S,zp),e(zp,kte),e(kte,juo),e(zp,Duo),e(zp,ZP),e(ZP,Guo),e(zp,Ouo),e(S,Vuo),e(S,Qp),e(Qp,Ste),e(Ste,Xuo),e(Qp,zuo),e(Qp,e$),e(e$,Quo),e(Qp,Wuo),e(S,Huo),e(S,Wp),e(Wp,Rte),e(Rte,Uuo),e(Wp,Juo),e(Wp,o$),e(o$,Yuo),e(Wp,Kuo),e(S,Zuo),e(S,Hp),e(Hp,Bte),e(Bte,epo),e(Hp,opo),e(Hp,r$),e(r$,rpo),e(Hp,tpo),e(S,apo),e(S,Up),e(Up,Pte),e(Pte,npo),e(Up,spo),e(Up,t$),e(t$,lpo),e(Up,ipo),e(S,dpo),e(S,Jp),e(Jp,$te),e($te,cpo),e(Jp,fpo),e(Jp,a$),e(a$,mpo),e(Jp,gpo),e(S,hpo),e(S,Yp),e(Yp,Ite),e(Ite,upo),e(Yp,ppo),e(Yp,n$),e(n$,_po),e(Yp,vpo),e(S,bpo),e(S,Kp),e(Kp,qte),e(qte,Fpo),e(Kp,Tpo),e(Kp,s$),e(s$,Mpo),e(Kp,Epo),e(S,Cpo),e(S,Zp),e(Zp,Nte),e(Nte,wpo),e(Zp,Apo),e(Zp,l$),e(l$,ypo),e(Zp,Lpo),e(S,xpo),e(S,e_),e(e_,jte),e(jte,kpo),e(e_,Spo),e(e_,i$),e(i$,Rpo),e(e_,Bpo),e(S,Ppo),e(S,o_),e(o_,Dte),e(Dte,$po),e(o_,Ipo),e(o_,d$),e(d$,qpo),e(o_,Npo),e(S,jpo),e(S,r_),e(r_,Gte),e(Gte,Dpo),e(r_,Gpo),e(r_,c$),e(c$,Opo),e(r_,Vpo),e(S,Xpo),e(S,t_),e(t_,Ote),e(Ote,zpo),e(t_,Qpo),e(t_,f$),e(f$,Wpo),e(t_,Hpo),e(S,Upo),e(S,a_),e(a_,Vte),e(Vte,Jpo),e(a_,Ypo),e(a_,m$),e(m$,Kpo),e(a_,Zpo),e(S,e_o),e(S,n_),e(n_,Xte),e(Xte,o_o),e(n_,r_o),e(n_,g$),e(g$,t_o),e(n_,a_o),e(S,n_o),e(S,s_),e(s_,zte),e(zte,s_o),e(s_,l_o),e(s_,h$),e(h$,i_o),e(s_,d_o),e(S,c_o),e(S,l_),e(l_,Qte),e(Qte,f_o),e(l_,m_o),e(l_,u$),e(u$,g_o),e(l_,h_o),e(S,u_o),e(S,i_),e(i_,Wte),e(Wte,p_o),e(i_,__o),e(i_,p$),e(p$,v_o),e(i_,b_o),e(S,F_o),e(S,d_),e(d_,Hte),e(Hte,T_o),e(d_,M_o),e(d_,_$),e(_$,E_o),e(d_,C_o),e(S,w_o),e(S,c_),e(c_,Ute),e(Ute,A_o),e(c_,y_o),e(c_,v$),e(v$,L_o),e(c_,x_o),e(S,k_o),e(S,f_),e(f_,Jte),e(Jte,S_o),e(f_,R_o),e(f_,b$),e(b$,B_o),e(f_,P_o),e(S,$_o),e(S,m_),e(m_,Yte),e(Yte,I_o),e(m_,q_o),e(m_,F$),e(F$,N_o),e(m_,j_o),e(S,D_o),e(S,g_),e(g_,Kte),e(Kte,G_o),e(g_,O_o),e(g_,T$),e(T$,V_o),e(g_,X_o),e(S,z_o),e(S,h_),e(h_,Zte),e(Zte,Q_o),e(h_,W_o),e(h_,M$),e(M$,H_o),e(h_,U_o),e(S,J_o),e(S,u_),e(u_,eae),e(eae,Y_o),e(u_,K_o),e(u_,E$),e(E$,Z_o),e(u_,evo),e(Ne,ovo),e(Ne,p_),e(p_,rvo),e(p_,oae),e(oae,tvo),e(p_,avo),e(p_,rae),e(rae,nvo),e(Ne,svo),e(Ne,tae),e(tae,lvo),e(Ne,ivo),g(iC,Ne,null),v(c,eRe,_),v(c,rd,_),e(rd,__),e(__,aae),g(dC,aae,null),e(rd,dvo),e(rd,nae),e(nae,cvo),v(c,oRe,_),v(c,Ko,_),g(cC,Ko,null),e(Ko,fvo),e(Ko,td),e(td,mvo),e(td,C$),e(C$,gvo),e(td,hvo),e(td,w$),e(w$,uvo),e(td,pvo),e(Ko,_vo),e(Ko,fC),e(fC,vvo),e(fC,sae),e(sae,bvo),e(fC,Fvo),e(Ko,Tvo),e(Ko,Qr),g(mC,Qr,null),e(Qr,Mvo),e(Qr,lae),e(lae,Evo),e(Qr,Cvo),e(Qr,ad),e(ad,wvo),e(ad,iae),e(iae,Avo),e(ad,yvo),e(ad,A$),e(A$,Lvo),e(ad,xvo),e(Qr,kvo),e(Qr,dae),e(dae,Svo),e(Qr,Rvo),g(gC,Qr,null),e(Ko,Bvo),e(Ko,je),g(hC,je,null),e(je,Pvo),e(je,cae),e(cae,$vo),e(je,Ivo),e(je,Qa),e(Qa,qvo),e(Qa,fae),e(fae,Nvo),e(Qa,jvo),e(Qa,mae),e(mae,Dvo),e(Qa,Gvo),e(Qa,gae),e(gae,Ovo),e(Qa,Vvo),e(je,Xvo),e(je,$),e($,v_),e(v_,hae),e(hae,zvo),e(v_,Qvo),e(v_,y$),e(y$,Wvo),e(v_,Hvo),e($,Uvo),e($,b_),e(b_,uae),e(uae,Jvo),e(b_,Yvo),e(b_,L$),e(L$,Kvo),e(b_,Zvo),e($,e1o),e($,F_),e(F_,pae),e(pae,o1o),e(F_,r1o),e(F_,x$),e(x$,t1o),e(F_,a1o),e($,n1o),e($,T_),e(T_,_ae),e(_ae,s1o),e(T_,l1o),e(T_,k$),e(k$,i1o),e(T_,d1o),e($,c1o),e($,M_),e(M_,vae),e(vae,f1o),e(M_,m1o),e(M_,S$),e(S$,g1o),e(M_,h1o),e($,u1o),e($,E_),e(E_,bae),e(bae,p1o),e(E_,_1o),e(E_,R$),e(R$,v1o),e(E_,b1o),e($,F1o),e($,C_),e(C_,Fae),e(Fae,T1o),e(C_,M1o),e(C_,B$),e(B$,E1o),e(C_,C1o),e($,w1o),e($,w_),e(w_,Tae),e(Tae,A1o),e(w_,y1o),e(w_,P$),e(P$,L1o),e(w_,x1o),e($,k1o),e($,A_),e(A_,Mae),e(Mae,S1o),e(A_,R1o),e(A_,$$),e($$,B1o),e(A_,P1o),e($,$1o),e($,y_),e(y_,Eae),e(Eae,I1o),e(y_,q1o),e(y_,I$),e(I$,N1o),e(y_,j1o),e($,D1o),e($,L_),e(L_,Cae),e(Cae,G1o),e(L_,O1o),e(L_,q$),e(q$,V1o),e(L_,X1o),e($,z1o),e($,x_),e(x_,wae),e(wae,Q1o),e(x_,W1o),e(x_,N$),e(N$,H1o),e(x_,U1o),e($,J1o),e($,k_),e(k_,Aae),e(Aae,Y1o),e(k_,K1o),e(k_,j$),e(j$,Z1o),e(k_,e4o),e($,o4o),e($,S_),e(S_,yae),e(yae,r4o),e(S_,t4o),e(S_,D$),e(D$,a4o),e(S_,n4o),e($,s4o),e($,R_),e(R_,Lae),e(Lae,l4o),e(R_,i4o),e(R_,G$),e(G$,d4o),e(R_,c4o),e($,f4o),e($,B_),e(B_,xae),e(xae,m4o),e(B_,g4o),e(B_,O$),e(O$,h4o),e(B_,u4o),e($,p4o),e($,P_),e(P_,kae),e(kae,_4o),e(P_,v4o),e(P_,V$),e(V$,b4o),e(P_,F4o),e($,T4o),e($,$_),e($_,Sae),e(Sae,M4o),e($_,E4o),e($_,X$),e(X$,C4o),e($_,w4o),e($,A4o),e($,I_),e(I_,Rae),e(Rae,y4o),e(I_,L4o),e(I_,z$),e(z$,x4o),e(I_,k4o),e($,S4o),e($,q_),e(q_,Bae),e(Bae,R4o),e(q_,B4o),e(q_,Q$),e(Q$,P4o),e(q_,$4o),e($,I4o),e($,N_),e(N_,Pae),e(Pae,q4o),e(N_,N4o),e(N_,W$),e(W$,j4o),e(N_,D4o),e($,G4o),e($,j_),e(j_,$ae),e($ae,O4o),e(j_,V4o),e(j_,H$),e(H$,X4o),e(j_,z4o),e($,Q4o),e($,D_),e(D_,Iae),e(Iae,W4o),e(D_,H4o),e(D_,U$),e(U$,U4o),e(D_,J4o),e($,Y4o),e($,G_),e(G_,qae),e(qae,K4o),e(G_,Z4o),e(G_,J$),e(J$,ebo),e(G_,obo),e($,rbo),e($,O_),e(O_,Nae),e(Nae,tbo),e(O_,abo),e(O_,Y$),e(Y$,nbo),e(O_,sbo),e($,lbo),e($,V_),e(V_,jae),e(jae,ibo),e(V_,dbo),e(V_,K$),e(K$,cbo),e(V_,fbo),e($,mbo),e($,X_),e(X_,Dae),e(Dae,gbo),e(X_,hbo),e(X_,Z$),e(Z$,ubo),e(X_,pbo),e($,_bo),e($,z_),e(z_,Gae),e(Gae,vbo),e(z_,bbo),e(z_,eI),e(eI,Fbo),e(z_,Tbo),e($,Mbo),e($,Q_),e(Q_,Oae),e(Oae,Ebo),e(Q_,Cbo),e(Q_,oI),e(oI,wbo),e(Q_,Abo),e($,ybo),e($,W_),e(W_,Vae),e(Vae,Lbo),e(W_,xbo),e(W_,rI),e(rI,kbo),e(W_,Sbo),e($,Rbo),e($,H_),e(H_,Xae),e(Xae,Bbo),e(H_,Pbo),e(H_,tI),e(tI,$bo),e(H_,Ibo),e($,qbo),e($,U_),e(U_,zae),e(zae,Nbo),e(U_,jbo),e(U_,aI),e(aI,Dbo),e(U_,Gbo),e($,Obo),e($,J_),e(J_,Qae),e(Qae,Vbo),e(J_,Xbo),e(J_,nI),e(nI,zbo),e(J_,Qbo),e($,Wbo),e($,Y_),e(Y_,Wae),e(Wae,Hbo),e(Y_,Ubo),e(Y_,sI),e(sI,Jbo),e(Y_,Ybo),e($,Kbo),e($,K_),e(K_,Hae),e(Hae,Zbo),e(K_,e2o),e(K_,lI),e(lI,o2o),e(K_,r2o),e(je,t2o),e(je,Z_),e(Z_,a2o),e(Z_,Uae),e(Uae,n2o),e(Z_,s2o),e(Z_,Jae),e(Jae,l2o),e(je,i2o),e(je,Yae),e(Yae,d2o),e(je,c2o),g(uC,je,null),v(c,rRe,_),v(c,nd,_),e(nd,ev),e(ev,Kae),g(pC,Kae,null),e(nd,f2o),e(nd,Zae),e(Zae,m2o),v(c,tRe,_),v(c,Zo,_),g(_C,Zo,null),e(Zo,g2o),e(Zo,sd),e(sd,h2o),e(sd,iI),e(iI,u2o),e(sd,p2o),e(sd,dI),e(dI,_2o),e(sd,v2o),e(Zo,b2o),e(Zo,vC),e(vC,F2o),e(vC,ene),e(ene,T2o),e(vC,M2o),e(Zo,E2o),e(Zo,Wr),g(bC,Wr,null),e(Wr,C2o),e(Wr,one),e(one,w2o),e(Wr,A2o),e(Wr,ld),e(ld,y2o),e(ld,rne),e(rne,L2o),e(ld,x2o),e(ld,cI),e(cI,k2o),e(ld,S2o),e(Wr,R2o),e(Wr,tne),e(tne,B2o),e(Wr,P2o),g(FC,Wr,null),e(Zo,$2o),e(Zo,De),g(TC,De,null),e(De,I2o),e(De,ane),e(ane,q2o),e(De,N2o),e(De,Wa),e(Wa,j2o),e(Wa,nne),e(nne,D2o),e(Wa,G2o),e(Wa,sne),e(sne,O2o),e(Wa,V2o),e(Wa,lne),e(lne,X2o),e(Wa,z2o),e(De,Q2o),e(De,I),e(I,ov),e(ov,ine),e(ine,W2o),e(ov,H2o),e(ov,fI),e(fI,U2o),e(ov,J2o),e(I,Y2o),e(I,rv),e(rv,dne),e(dne,K2o),e(rv,Z2o),e(rv,mI),e(mI,eFo),e(rv,oFo),e(I,rFo),e(I,tv),e(tv,cne),e(cne,tFo),e(tv,aFo),e(tv,gI),e(gI,nFo),e(tv,sFo),e(I,lFo),e(I,av),e(av,fne),e(fne,iFo),e(av,dFo),e(av,hI),e(hI,cFo),e(av,fFo),e(I,mFo),e(I,nv),e(nv,mne),e(mne,gFo),e(nv,hFo),e(nv,uI),e(uI,uFo),e(nv,pFo),e(I,_Fo),e(I,sv),e(sv,gne),e(gne,vFo),e(sv,bFo),e(sv,pI),e(pI,FFo),e(sv,TFo),e(I,MFo),e(I,lv),e(lv,hne),e(hne,EFo),e(lv,CFo),e(lv,_I),e(_I,wFo),e(lv,AFo),e(I,yFo),e(I,iv),e(iv,une),e(une,LFo),e(iv,xFo),e(iv,vI),e(vI,kFo),e(iv,SFo),e(I,RFo),e(I,dv),e(dv,pne),e(pne,BFo),e(dv,PFo),e(dv,bI),e(bI,$Fo),e(dv,IFo),e(I,qFo),e(I,cv),e(cv,_ne),e(_ne,NFo),e(cv,jFo),e(cv,FI),e(FI,DFo),e(cv,GFo),e(I,OFo),e(I,fv),e(fv,vne),e(vne,VFo),e(fv,XFo),e(fv,TI),e(TI,zFo),e(fv,QFo),e(I,WFo),e(I,mv),e(mv,bne),e(bne,HFo),e(mv,UFo),e(mv,MI),e(MI,JFo),e(mv,YFo),e(I,KFo),e(I,gv),e(gv,Fne),e(Fne,ZFo),e(gv,e0o),e(gv,EI),e(EI,o0o),e(gv,r0o),e(I,t0o),e(I,hv),e(hv,Tne),e(Tne,a0o),e(hv,n0o),e(hv,CI),e(CI,s0o),e(hv,l0o),e(I,i0o),e(I,uv),e(uv,Mne),e(Mne,d0o),e(uv,c0o),e(uv,wI),e(wI,f0o),e(uv,m0o),e(I,g0o),e(I,pv),e(pv,Ene),e(Ene,h0o),e(pv,u0o),e(pv,AI),e(AI,p0o),e(pv,_0o),e(I,v0o),e(I,_v),e(_v,Cne),e(Cne,b0o),e(_v,F0o),e(_v,yI),e(yI,T0o),e(_v,M0o),e(I,E0o),e(I,vv),e(vv,wne),e(wne,C0o),e(vv,w0o),e(vv,LI),e(LI,A0o),e(vv,y0o),e(I,L0o),e(I,bv),e(bv,Ane),e(Ane,x0o),e(bv,k0o),e(bv,xI),e(xI,S0o),e(bv,R0o),e(I,B0o),e(I,Fv),e(Fv,yne),e(yne,P0o),e(Fv,$0o),e(Fv,kI),e(kI,I0o),e(Fv,q0o),e(I,N0o),e(I,Tv),e(Tv,Lne),e(Lne,j0o),e(Tv,D0o),e(Tv,SI),e(SI,G0o),e(Tv,O0o),e(I,V0o),e(I,Mv),e(Mv,xne),e(xne,X0o),e(Mv,z0o),e(Mv,RI),e(RI,Q0o),e(Mv,W0o),e(I,H0o),e(I,Ev),e(Ev,kne),e(kne,U0o),e(Ev,J0o),e(Ev,BI),e(BI,Y0o),e(Ev,K0o),e(I,Z0o),e(I,Cv),e(Cv,Sne),e(Sne,eTo),e(Cv,oTo),e(Cv,PI),e(PI,rTo),e(Cv,tTo),e(I,aTo),e(I,wv),e(wv,Rne),e(Rne,nTo),e(wv,sTo),e(wv,$I),e($I,lTo),e(wv,iTo),e(I,dTo),e(I,Av),e(Av,Bne),e(Bne,cTo),e(Av,fTo),e(Av,II),e(II,mTo),e(Av,gTo),e(I,hTo),e(I,yv),e(yv,Pne),e(Pne,uTo),e(yv,pTo),e(yv,qI),e(qI,_To),e(yv,vTo),e(I,bTo),e(I,Lv),e(Lv,$ne),e($ne,FTo),e(Lv,TTo),e(Lv,NI),e(NI,MTo),e(Lv,ETo),e(I,CTo),e(I,xv),e(xv,Ine),e(Ine,wTo),e(xv,ATo),e(xv,jI),e(jI,yTo),e(xv,LTo),e(I,xTo),e(I,kv),e(kv,qne),e(qne,kTo),e(kv,STo),e(kv,DI),e(DI,RTo),e(kv,BTo),e(I,PTo),e(I,Sv),e(Sv,Nne),e(Nne,$To),e(Sv,ITo),e(Sv,jne),e(jne,qTo),e(Sv,NTo),e(I,jTo),e(I,Rv),e(Rv,Dne),e(Dne,DTo),e(Rv,GTo),e(Rv,GI),e(GI,OTo),e(Rv,VTo),e(I,XTo),e(I,Bv),e(Bv,Gne),e(Gne,zTo),e(Bv,QTo),e(Bv,OI),e(OI,WTo),e(Bv,HTo),e(I,UTo),e(I,Pv),e(Pv,One),e(One,JTo),e(Pv,YTo),e(Pv,VI),e(VI,KTo),e(Pv,ZTo),e(I,e8o),e(I,$v),e($v,Vne),e(Vne,o8o),e($v,r8o),e($v,XI),e(XI,t8o),e($v,a8o),e(De,n8o),e(De,Iv),e(Iv,s8o),e(Iv,Xne),e(Xne,l8o),e(Iv,i8o),e(Iv,zne),e(zne,d8o),e(De,c8o),e(De,Qne),e(Qne,f8o),e(De,m8o),g(MC,De,null),v(c,aRe,_),v(c,id,_),e(id,qv),e(qv,Wne),g(EC,Wne,null),e(id,g8o),e(id,Hne),e(Hne,h8o),v(c,nRe,_),v(c,er,_),g(CC,er,null),e(er,u8o),e(er,dd),e(dd,p8o),e(dd,zI),e(zI,_8o),e(dd,v8o),e(dd,QI),e(QI,b8o),e(dd,F8o),e(er,T8o),e(er,wC),e(wC,M8o),e(wC,Une),e(Une,E8o),e(wC,C8o),e(er,w8o),e(er,Hr),g(AC,Hr,null),e(Hr,A8o),e(Hr,Jne),e(Jne,y8o),e(Hr,L8o),e(Hr,cd),e(cd,x8o),e(cd,Yne),e(Yne,k8o),e(cd,S8o),e(cd,WI),e(WI,R8o),e(cd,B8o),e(Hr,P8o),e(Hr,Kne),e(Kne,$8o),e(Hr,I8o),g(yC,Hr,null),e(er,q8o),e(er,Ge),g(LC,Ge,null),e(Ge,N8o),e(Ge,Zne),e(Zne,j8o),e(Ge,D8o),e(Ge,Ha),e(Ha,G8o),e(Ha,ese),e(ese,O8o),e(Ha,V8o),e(Ha,ose),e(ose,X8o),e(Ha,z8o),e(Ha,rse),e(rse,Q8o),e(Ha,W8o),e(Ge,H8o),e(Ge,se),e(se,Nv),e(Nv,tse),e(tse,U8o),e(Nv,J8o),e(Nv,HI),e(HI,Y8o),e(Nv,K8o),e(se,Z8o),e(se,jv),e(jv,ase),e(ase,eMo),e(jv,oMo),e(jv,UI),e(UI,rMo),e(jv,tMo),e(se,aMo),e(se,Dv),e(Dv,nse),e(nse,nMo),e(Dv,sMo),e(Dv,JI),e(JI,lMo),e(Dv,iMo),e(se,dMo),e(se,Gv),e(Gv,sse),e(sse,cMo),e(Gv,fMo),e(Gv,YI),e(YI,mMo),e(Gv,gMo),e(se,hMo),e(se,Ov),e(Ov,lse),e(lse,uMo),e(Ov,pMo),e(Ov,KI),e(KI,_Mo),e(Ov,vMo),e(se,bMo),e(se,Vv),e(Vv,ise),e(ise,FMo),e(Vv,TMo),e(Vv,ZI),e(ZI,MMo),e(Vv,EMo),e(se,CMo),e(se,Xv),e(Xv,dse),e(dse,wMo),e(Xv,AMo),e(Xv,eq),e(eq,yMo),e(Xv,LMo),e(se,xMo),e(se,zv),e(zv,cse),e(cse,kMo),e(zv,SMo),e(zv,oq),e(oq,RMo),e(zv,BMo),e(se,PMo),e(se,Qv),e(Qv,fse),e(fse,$Mo),e(Qv,IMo),e(Qv,rq),e(rq,qMo),e(Qv,NMo),e(se,jMo),e(se,Wv),e(Wv,mse),e(mse,DMo),e(Wv,GMo),e(Wv,tq),e(tq,OMo),e(Wv,VMo),e(se,XMo),e(se,Hv),e(Hv,gse),e(gse,zMo),e(Hv,QMo),e(Hv,aq),e(aq,WMo),e(Hv,HMo),e(se,UMo),e(se,Uv),e(Uv,hse),e(hse,JMo),e(Uv,YMo),e(Uv,nq),e(nq,KMo),e(Uv,ZMo),e(se,eEo),e(se,Jv),e(Jv,use),e(use,oEo),e(Jv,rEo),e(Jv,sq),e(sq,tEo),e(Jv,aEo),e(se,nEo),e(se,Yv),e(Yv,pse),e(pse,sEo),e(Yv,lEo),e(Yv,lq),e(lq,iEo),e(Yv,dEo),e(se,cEo),e(se,Kv),e(Kv,_se),e(_se,fEo),e(Kv,mEo),e(Kv,iq),e(iq,gEo),e(Kv,hEo),e(se,uEo),e(se,Zv),e(Zv,vse),e(vse,pEo),e(Zv,_Eo),e(Zv,dq),e(dq,vEo),e(Zv,bEo),e(Ge,FEo),e(Ge,e1),e(e1,TEo),e(e1,bse),e(bse,MEo),e(e1,EEo),e(e1,Fse),e(Fse,CEo),e(Ge,wEo),e(Ge,Tse),e(Tse,AEo),e(Ge,yEo),g(xC,Ge,null),v(c,sRe,_),v(c,fd,_),e(fd,o1),e(o1,Mse),g(kC,Mse,null),e(fd,LEo),e(fd,Ese),e(Ese,xEo),v(c,lRe,_),v(c,or,_),g(SC,or,null),e(or,kEo),e(or,md),e(md,SEo),e(md,cq),e(cq,REo),e(md,BEo),e(md,fq),e(fq,PEo),e(md,$Eo),e(or,IEo),e(or,RC),e(RC,qEo),e(RC,Cse),e(Cse,NEo),e(RC,jEo),e(or,DEo),e(or,Ur),g(BC,Ur,null),e(Ur,GEo),e(Ur,wse),e(wse,OEo),e(Ur,VEo),e(Ur,gd),e(gd,XEo),e(gd,Ase),e(Ase,zEo),e(gd,QEo),e(gd,mq),e(mq,WEo),e(gd,HEo),e(Ur,UEo),e(Ur,yse),e(yse,JEo),e(Ur,YEo),g(PC,Ur,null),e(or,KEo),e(or,Oe),g($C,Oe,null),e(Oe,ZEo),e(Oe,Lse),e(Lse,e5o),e(Oe,o5o),e(Oe,Ua),e(Ua,r5o),e(Ua,xse),e(xse,t5o),e(Ua,a5o),e(Ua,kse),e(kse,n5o),e(Ua,s5o),e(Ua,Sse),e(Sse,l5o),e(Ua,i5o),e(Oe,d5o),e(Oe,y),e(y,r1),e(r1,Rse),e(Rse,c5o),e(r1,f5o),e(r1,gq),e(gq,m5o),e(r1,g5o),e(y,h5o),e(y,t1),e(t1,Bse),e(Bse,u5o),e(t1,p5o),e(t1,hq),e(hq,_5o),e(t1,v5o),e(y,b5o),e(y,a1),e(a1,Pse),e(Pse,F5o),e(a1,T5o),e(a1,uq),e(uq,M5o),e(a1,E5o),e(y,C5o),e(y,n1),e(n1,$se),e($se,w5o),e(n1,A5o),e(n1,pq),e(pq,y5o),e(n1,L5o),e(y,x5o),e(y,s1),e(s1,Ise),e(Ise,k5o),e(s1,S5o),e(s1,_q),e(_q,R5o),e(s1,B5o),e(y,P5o),e(y,l1),e(l1,qse),e(qse,$5o),e(l1,I5o),e(l1,vq),e(vq,q5o),e(l1,N5o),e(y,j5o),e(y,i1),e(i1,Nse),e(Nse,D5o),e(i1,G5o),e(i1,bq),e(bq,O5o),e(i1,V5o),e(y,X5o),e(y,d1),e(d1,jse),e(jse,z5o),e(d1,Q5o),e(d1,Fq),e(Fq,W5o),e(d1,H5o),e(y,U5o),e(y,c1),e(c1,Dse),e(Dse,J5o),e(c1,Y5o),e(c1,Tq),e(Tq,K5o),e(c1,Z5o),e(y,e3o),e(y,f1),e(f1,Gse),e(Gse,o3o),e(f1,r3o),e(f1,Mq),e(Mq,t3o),e(f1,a3o),e(y,n3o),e(y,m1),e(m1,Ose),e(Ose,s3o),e(m1,l3o),e(m1,Eq),e(Eq,i3o),e(m1,d3o),e(y,c3o),e(y,g1),e(g1,Vse),e(Vse,f3o),e(g1,m3o),e(g1,Cq),e(Cq,g3o),e(g1,h3o),e(y,u3o),e(y,h1),e(h1,Xse),e(Xse,p3o),e(h1,_3o),e(h1,wq),e(wq,v3o),e(h1,b3o),e(y,F3o),e(y,u1),e(u1,zse),e(zse,T3o),e(u1,M3o),e(u1,Aq),e(Aq,E3o),e(u1,C3o),e(y,w3o),e(y,p1),e(p1,Qse),e(Qse,A3o),e(p1,y3o),e(p1,yq),e(yq,L3o),e(p1,x3o),e(y,k3o),e(y,_1),e(_1,Wse),e(Wse,S3o),e(_1,R3o),e(_1,Lq),e(Lq,B3o),e(_1,P3o),e(y,$3o),e(y,v1),e(v1,Hse),e(Hse,I3o),e(v1,q3o),e(v1,xq),e(xq,N3o),e(v1,j3o),e(y,D3o),e(y,b1),e(b1,Use),e(Use,G3o),e(b1,O3o),e(b1,kq),e(kq,V3o),e(b1,X3o),e(y,z3o),e(y,F1),e(F1,Jse),e(Jse,Q3o),e(F1,W3o),e(F1,Sq),e(Sq,H3o),e(F1,U3o),e(y,J3o),e(y,T1),e(T1,Yse),e(Yse,Y3o),e(T1,K3o),e(T1,Rq),e(Rq,Z3o),e(T1,eCo),e(y,oCo),e(y,M1),e(M1,Kse),e(Kse,rCo),e(M1,tCo),e(M1,Bq),e(Bq,aCo),e(M1,nCo),e(y,sCo),e(y,E1),e(E1,Zse),e(Zse,lCo),e(E1,iCo),e(E1,Pq),e(Pq,dCo),e(E1,cCo),e(y,fCo),e(y,C1),e(C1,ele),e(ele,mCo),e(C1,gCo),e(C1,$q),e($q,hCo),e(C1,uCo),e(y,pCo),e(y,w1),e(w1,ole),e(ole,_Co),e(w1,vCo),e(w1,Iq),e(Iq,bCo),e(w1,FCo),e(y,TCo),e(y,A1),e(A1,rle),e(rle,MCo),e(A1,ECo),e(A1,qq),e(qq,CCo),e(A1,wCo),e(y,ACo),e(y,y1),e(y1,tle),e(tle,yCo),e(y1,LCo),e(y1,Nq),e(Nq,xCo),e(y1,kCo),e(y,SCo),e(y,L1),e(L1,ale),e(ale,RCo),e(L1,BCo),e(L1,jq),e(jq,PCo),e(L1,$Co),e(y,ICo),e(y,x1),e(x1,nle),e(nle,qCo),e(x1,NCo),e(x1,Dq),e(Dq,jCo),e(x1,DCo),e(y,GCo),e(y,k1),e(k1,sle),e(sle,OCo),e(k1,VCo),e(k1,Gq),e(Gq,XCo),e(k1,zCo),e(y,QCo),e(y,S1),e(S1,lle),e(lle,WCo),e(S1,HCo),e(S1,Oq),e(Oq,UCo),e(S1,JCo),e(y,YCo),e(y,R1),e(R1,ile),e(ile,KCo),e(R1,ZCo),e(R1,Vq),e(Vq,ewo),e(R1,owo),e(y,rwo),e(y,B1),e(B1,dle),e(dle,two),e(B1,awo),e(B1,Xq),e(Xq,nwo),e(B1,swo),e(y,lwo),e(y,P1),e(P1,cle),e(cle,iwo),e(P1,dwo),e(P1,zq),e(zq,cwo),e(P1,fwo),e(y,mwo),e(y,$1),e($1,fle),e(fle,gwo),e($1,hwo),e($1,Qq),e(Qq,uwo),e($1,pwo),e(y,_wo),e(y,I1),e(I1,mle),e(mle,vwo),e(I1,bwo),e(I1,Wq),e(Wq,Fwo),e(I1,Two),e(y,Mwo),e(y,q1),e(q1,gle),e(gle,Ewo),e(q1,Cwo),e(q1,Hq),e(Hq,wwo),e(q1,Awo),e(y,ywo),e(y,N1),e(N1,hle),e(hle,Lwo),e(N1,xwo),e(N1,Uq),e(Uq,kwo),e(N1,Swo),e(y,Rwo),e(y,j1),e(j1,ule),e(ule,Bwo),e(j1,Pwo),e(j1,Jq),e(Jq,$wo),e(j1,Iwo),e(y,qwo),e(y,D1),e(D1,ple),e(ple,Nwo),e(D1,jwo),e(D1,Yq),e(Yq,Dwo),e(D1,Gwo),e(y,Owo),e(y,G1),e(G1,_le),e(_le,Vwo),e(G1,Xwo),e(G1,Kq),e(Kq,zwo),e(G1,Qwo),e(y,Wwo),e(y,O1),e(O1,vle),e(vle,Hwo),e(O1,Uwo),e(O1,Zq),e(Zq,Jwo),e(O1,Ywo),e(y,Kwo),e(y,V1),e(V1,ble),e(ble,Zwo),e(V1,e6o),e(V1,eN),e(eN,o6o),e(V1,r6o),e(y,t6o),e(y,X1),e(X1,Fle),e(Fle,a6o),e(X1,n6o),e(X1,oN),e(oN,s6o),e(X1,l6o),e(y,i6o),e(y,z1),e(z1,Tle),e(Tle,d6o),e(z1,c6o),e(z1,rN),e(rN,f6o),e(z1,m6o),e(y,g6o),e(y,Q1),e(Q1,Mle),e(Mle,h6o),e(Q1,u6o),e(Q1,tN),e(tN,p6o),e(Q1,_6o),e(y,v6o),e(y,W1),e(W1,Ele),e(Ele,b6o),e(W1,F6o),e(W1,aN),e(aN,T6o),e(W1,M6o),e(Oe,E6o),e(Oe,H1),e(H1,C6o),e(H1,Cle),e(Cle,w6o),e(H1,A6o),e(H1,wle),e(wle,y6o),e(Oe,L6o),e(Oe,Ale),e(Ale,x6o),e(Oe,k6o),g(IC,Oe,null),v(c,iRe,_),v(c,hd,_),e(hd,U1),e(U1,yle),g(qC,yle,null),e(hd,S6o),e(hd,Lle),e(Lle,R6o),v(c,dRe,_),v(c,rr,_),g(NC,rr,null),e(rr,B6o),e(rr,ud),e(ud,P6o),e(ud,nN),e(nN,$6o),e(ud,I6o),e(ud,sN),e(sN,q6o),e(ud,N6o),e(rr,j6o),e(rr,jC),e(jC,D6o),e(jC,xle),e(xle,G6o),e(jC,O6o),e(rr,V6o),e(rr,Jr),g(DC,Jr,null),e(Jr,X6o),e(Jr,kle),e(kle,z6o),e(Jr,Q6o),e(Jr,pd),e(pd,W6o),e(pd,Sle),e(Sle,H6o),e(pd,U6o),e(pd,lN),e(lN,J6o),e(pd,Y6o),e(Jr,K6o),e(Jr,Rle),e(Rle,Z6o),e(Jr,eAo),g(GC,Jr,null),e(rr,oAo),e(rr,Ve),g(OC,Ve,null),e(Ve,rAo),e(Ve,Ble),e(Ble,tAo),e(Ve,aAo),e(Ve,Ja),e(Ja,nAo),e(Ja,Ple),e(Ple,sAo),e(Ja,lAo),e(Ja,$le),e($le,iAo),e(Ja,dAo),e(Ja,Ile),e(Ile,cAo),e(Ja,fAo),e(Ve,mAo),e(Ve,G),e(G,J1),e(J1,qle),e(qle,gAo),e(J1,hAo),e(J1,iN),e(iN,uAo),e(J1,pAo),e(G,_Ao),e(G,Y1),e(Y1,Nle),e(Nle,vAo),e(Y1,bAo),e(Y1,dN),e(dN,FAo),e(Y1,TAo),e(G,MAo),e(G,K1),e(K1,jle),e(jle,EAo),e(K1,CAo),e(K1,cN),e(cN,wAo),e(K1,AAo),e(G,yAo),e(G,Z1),e(Z1,Dle),e(Dle,LAo),e(Z1,xAo),e(Z1,fN),e(fN,kAo),e(Z1,SAo),e(G,RAo),e(G,e4),e(e4,Gle),e(Gle,BAo),e(e4,PAo),e(e4,mN),e(mN,$Ao),e(e4,IAo),e(G,qAo),e(G,o4),e(o4,Ole),e(Ole,NAo),e(o4,jAo),e(o4,gN),e(gN,DAo),e(o4,GAo),e(G,OAo),e(G,r4),e(r4,Vle),e(Vle,VAo),e(r4,XAo),e(r4,hN),e(hN,zAo),e(r4,QAo),e(G,WAo),e(G,t4),e(t4,Xle),e(Xle,HAo),e(t4,UAo),e(t4,uN),e(uN,JAo),e(t4,YAo),e(G,KAo),e(G,a4),e(a4,zle),e(zle,ZAo),e(a4,eyo),e(a4,pN),e(pN,oyo),e(a4,ryo),e(G,tyo),e(G,n4),e(n4,Qle),e(Qle,ayo),e(n4,nyo),e(n4,_N),e(_N,syo),e(n4,lyo),e(G,iyo),e(G,s4),e(s4,Wle),e(Wle,dyo),e(s4,cyo),e(s4,vN),e(vN,fyo),e(s4,myo),e(G,gyo),e(G,l4),e(l4,Hle),e(Hle,hyo),e(l4,uyo),e(l4,bN),e(bN,pyo),e(l4,_yo),e(G,vyo),e(G,i4),e(i4,Ule),e(Ule,byo),e(i4,Fyo),e(i4,FN),e(FN,Tyo),e(i4,Myo),e(G,Eyo),e(G,d4),e(d4,Jle),e(Jle,Cyo),e(d4,wyo),e(d4,TN),e(TN,Ayo),e(d4,yyo),e(G,Lyo),e(G,c4),e(c4,Yle),e(Yle,xyo),e(c4,kyo),e(c4,MN),e(MN,Syo),e(c4,Ryo),e(G,Byo),e(G,f4),e(f4,Kle),e(Kle,Pyo),e(f4,$yo),e(f4,EN),e(EN,Iyo),e(f4,qyo),e(G,Nyo),e(G,m4),e(m4,Zle),e(Zle,jyo),e(m4,Dyo),e(m4,CN),e(CN,Gyo),e(m4,Oyo),e(G,Vyo),e(G,g4),e(g4,eie),e(eie,Xyo),e(g4,zyo),e(g4,wN),e(wN,Qyo),e(g4,Wyo),e(G,Hyo),e(G,h4),e(h4,oie),e(oie,Uyo),e(h4,Jyo),e(h4,AN),e(AN,Yyo),e(h4,Kyo),e(G,Zyo),e(G,u4),e(u4,rie),e(rie,eLo),e(u4,oLo),e(u4,yN),e(yN,rLo),e(u4,tLo),e(G,aLo),e(G,p4),e(p4,tie),e(tie,nLo),e(p4,sLo),e(p4,LN),e(LN,lLo),e(p4,iLo),e(G,dLo),e(G,_4),e(_4,aie),e(aie,cLo),e(_4,fLo),e(_4,xN),e(xN,mLo),e(_4,gLo),e(G,hLo),e(G,v4),e(v4,nie),e(nie,uLo),e(v4,pLo),e(v4,kN),e(kN,_Lo),e(v4,vLo),e(G,bLo),e(G,b4),e(b4,sie),e(sie,FLo),e(b4,TLo),e(b4,SN),e(SN,MLo),e(b4,ELo),e(G,CLo),e(G,F4),e(F4,lie),e(lie,wLo),e(F4,ALo),e(F4,RN),e(RN,yLo),e(F4,LLo),e(G,xLo),e(G,T4),e(T4,iie),e(iie,kLo),e(T4,SLo),e(T4,BN),e(BN,RLo),e(T4,BLo),e(G,PLo),e(G,M4),e(M4,die),e(die,$Lo),e(M4,ILo),e(M4,PN),e(PN,qLo),e(M4,NLo),e(G,jLo),e(G,E4),e(E4,cie),e(cie,DLo),e(E4,GLo),e(E4,$N),e($N,OLo),e(E4,VLo),e(Ve,XLo),e(Ve,C4),e(C4,zLo),e(C4,fie),e(fie,QLo),e(C4,WLo),e(C4,mie),e(mie,HLo),e(Ve,ULo),e(Ve,gie),e(gie,JLo),e(Ve,YLo),g(VC,Ve,null),v(c,cRe,_),v(c,_d,_),e(_d,w4),e(w4,hie),g(XC,hie,null),e(_d,KLo),e(_d,uie),e(uie,ZLo),v(c,fRe,_),v(c,tr,_),g(zC,tr,null),e(tr,e7o),e(tr,vd),e(vd,o7o),e(vd,IN),e(IN,r7o),e(vd,t7o),e(vd,qN),e(qN,a7o),e(vd,n7o),e(tr,s7o),e(tr,QC),e(QC,l7o),e(QC,pie),e(pie,i7o),e(QC,d7o),e(tr,c7o),e(tr,Yr),g(WC,Yr,null),e(Yr,f7o),e(Yr,_ie),e(_ie,m7o),e(Yr,g7o),e(Yr,bd),e(bd,h7o),e(bd,vie),e(vie,u7o),e(bd,p7o),e(bd,NN),e(NN,_7o),e(bd,v7o),e(Yr,b7o),e(Yr,bie),e(bie,F7o),e(Yr,T7o),g(HC,Yr,null),e(tr,M7o),e(tr,Xe),g(UC,Xe,null),e(Xe,E7o),e(Xe,Fie),e(Fie,C7o),e(Xe,w7o),e(Xe,Ya),e(Ya,A7o),e(Ya,Tie),e(Tie,y7o),e(Ya,L7o),e(Ya,Mie),e(Mie,x7o),e(Ya,k7o),e(Ya,Eie),e(Eie,S7o),e(Ya,R7o),e(Xe,B7o),e(Xe,da),e(da,A4),e(A4,Cie),e(Cie,P7o),e(A4,$7o),e(A4,jN),e(jN,I7o),e(A4,q7o),e(da,N7o),e(da,y4),e(y4,wie),e(wie,j7o),e(y4,D7o),e(y4,DN),e(DN,G7o),e(y4,O7o),e(da,V7o),e(da,L4),e(L4,Aie),e(Aie,X7o),e(L4,z7o),e(L4,GN),e(GN,Q7o),e(L4,W7o),e(da,H7o),e(da,x4),e(x4,yie),e(yie,U7o),e(x4,J7o),e(x4,ON),e(ON,Y7o),e(x4,K7o),e(da,Z7o),e(da,k4),e(k4,Lie),e(Lie,exo),e(k4,oxo),e(k4,VN),e(VN,rxo),e(k4,txo),e(Xe,axo),e(Xe,S4),e(S4,nxo),e(S4,xie),e(xie,sxo),e(S4,lxo),e(S4,kie),e(kie,ixo),e(Xe,dxo),e(Xe,Sie),e(Sie,cxo),e(Xe,fxo),g(JC,Xe,null),v(c,mRe,_),v(c,Fd,_),e(Fd,R4),e(R4,Rie),g(YC,Rie,null),e(Fd,mxo),e(Fd,Bie),e(Bie,gxo),v(c,gRe,_),v(c,ar,_),g(KC,ar,null),e(ar,hxo),e(ar,Td),e(Td,uxo),e(Td,XN),e(XN,pxo),e(Td,_xo),e(Td,zN),e(zN,vxo),e(Td,bxo),e(ar,Fxo),e(ar,ZC),e(ZC,Txo),e(ZC,Pie),e(Pie,Mxo),e(ZC,Exo),e(ar,Cxo),e(ar,Kr),g(ew,Kr,null),e(Kr,wxo),e(Kr,$ie),e($ie,Axo),e(Kr,yxo),e(Kr,Md),e(Md,Lxo),e(Md,Iie),e(Iie,xxo),e(Md,kxo),e(Md,QN),e(QN,Sxo),e(Md,Rxo),e(Kr,Bxo),e(Kr,qie),e(qie,Pxo),e(Kr,$xo),g(ow,Kr,null),e(ar,Ixo),e(ar,ze),g(rw,ze,null),e(ze,qxo),e(ze,Nie),e(Nie,Nxo),e(ze,jxo),e(ze,Ka),e(Ka,Dxo),e(Ka,jie),e(jie,Gxo),e(Ka,Oxo),e(Ka,Die),e(Die,Vxo),e(Ka,Xxo),e(Ka,Gie),e(Gie,zxo),e(Ka,Qxo),e(ze,Wxo),e(ze,j),e(j,B4),e(B4,Oie),e(Oie,Hxo),e(B4,Uxo),e(B4,WN),e(WN,Jxo),e(B4,Yxo),e(j,Kxo),e(j,P4),e(P4,Vie),e(Vie,Zxo),e(P4,e9o),e(P4,HN),e(HN,o9o),e(P4,r9o),e(j,t9o),e(j,$4),e($4,Xie),e(Xie,a9o),e($4,n9o),e($4,UN),e(UN,s9o),e($4,l9o),e(j,i9o),e(j,I4),e(I4,zie),e(zie,d9o),e(I4,c9o),e(I4,JN),e(JN,f9o),e(I4,m9o),e(j,g9o),e(j,q4),e(q4,Qie),e(Qie,h9o),e(q4,u9o),e(q4,YN),e(YN,p9o),e(q4,_9o),e(j,v9o),e(j,N4),e(N4,Wie),e(Wie,b9o),e(N4,F9o),e(N4,KN),e(KN,T9o),e(N4,M9o),e(j,E9o),e(j,j4),e(j4,Hie),e(Hie,C9o),e(j4,w9o),e(j4,ZN),e(ZN,A9o),e(j4,y9o),e(j,L9o),e(j,D4),e(D4,Uie),e(Uie,x9o),e(D4,k9o),e(D4,ej),e(ej,S9o),e(D4,R9o),e(j,B9o),e(j,G4),e(G4,Jie),e(Jie,P9o),e(G4,$9o),e(G4,oj),e(oj,I9o),e(G4,q9o),e(j,N9o),e(j,O4),e(O4,Yie),e(Yie,j9o),e(O4,D9o),e(O4,rj),e(rj,G9o),e(O4,O9o),e(j,V9o),e(j,V4),e(V4,Kie),e(Kie,X9o),e(V4,z9o),e(V4,tj),e(tj,Q9o),e(V4,W9o),e(j,H9o),e(j,X4),e(X4,Zie),e(Zie,U9o),e(X4,J9o),e(X4,aj),e(aj,Y9o),e(X4,K9o),e(j,Z9o),e(j,z4),e(z4,ede),e(ede,eko),e(z4,oko),e(z4,nj),e(nj,rko),e(z4,tko),e(j,ako),e(j,Q4),e(Q4,ode),e(ode,nko),e(Q4,sko),e(Q4,sj),e(sj,lko),e(Q4,iko),e(j,dko),e(j,W4),e(W4,rde),e(rde,cko),e(W4,fko),e(W4,lj),e(lj,mko),e(W4,gko),e(j,hko),e(j,H4),e(H4,tde),e(tde,uko),e(H4,pko),e(H4,ij),e(ij,_ko),e(H4,vko),e(j,bko),e(j,U4),e(U4,ade),e(ade,Fko),e(U4,Tko),e(U4,dj),e(dj,Mko),e(U4,Eko),e(j,Cko),e(j,J4),e(J4,nde),e(nde,wko),e(J4,Ako),e(J4,cj),e(cj,yko),e(J4,Lko),e(j,xko),e(j,Y4),e(Y4,sde),e(sde,kko),e(Y4,Sko),e(Y4,fj),e(fj,Rko),e(Y4,Bko),e(j,Pko),e(j,K4),e(K4,lde),e(lde,$ko),e(K4,Iko),e(K4,mj),e(mj,qko),e(K4,Nko),e(j,jko),e(j,Z4),e(Z4,ide),e(ide,Dko),e(Z4,Gko),e(Z4,gj),e(gj,Oko),e(Z4,Vko),e(j,Xko),e(j,eb),e(eb,dde),e(dde,zko),e(eb,Qko),e(eb,hj),e(hj,Wko),e(eb,Hko),e(j,Uko),e(j,ob),e(ob,cde),e(cde,Jko),e(ob,Yko),e(ob,uj),e(uj,Kko),e(ob,Zko),e(j,eSo),e(j,rb),e(rb,fde),e(fde,oSo),e(rb,rSo),e(rb,pj),e(pj,tSo),e(rb,aSo),e(j,nSo),e(j,tb),e(tb,mde),e(mde,sSo),e(tb,lSo),e(tb,_j),e(_j,iSo),e(tb,dSo),e(j,cSo),e(j,ab),e(ab,gde),e(gde,fSo),e(ab,mSo),e(ab,vj),e(vj,gSo),e(ab,hSo),e(j,uSo),e(j,nb),e(nb,hde),e(hde,pSo),e(nb,_So),e(nb,bj),e(bj,vSo),e(nb,bSo),e(j,FSo),e(j,sb),e(sb,ude),e(ude,TSo),e(sb,MSo),e(sb,Fj),e(Fj,ESo),e(sb,CSo),e(j,wSo),e(j,lb),e(lb,pde),e(pde,ASo),e(lb,ySo),e(lb,Tj),e(Tj,LSo),e(lb,xSo),e(j,kSo),e(j,ib),e(ib,_de),e(_de,SSo),e(ib,RSo),e(ib,Mj),e(Mj,BSo),e(ib,PSo),e(j,$So),e(j,db),e(db,vde),e(vde,ISo),e(db,qSo),e(db,Ej),e(Ej,NSo),e(db,jSo),e(j,DSo),e(j,cb),e(cb,bde),e(bde,GSo),e(cb,OSo),e(cb,Cj),e(Cj,VSo),e(cb,XSo),e(j,zSo),e(j,fb),e(fb,Fde),e(Fde,QSo),e(fb,WSo),e(fb,wj),e(wj,HSo),e(fb,USo),e(ze,JSo),e(ze,mb),e(mb,YSo),e(mb,Tde),e(Tde,KSo),e(mb,ZSo),e(mb,Mde),e(Mde,eRo),e(ze,oRo),e(ze,Ede),e(Ede,rRo),e(ze,tRo),g(tw,ze,null),v(c,hRe,_),v(c,Ed,_),e(Ed,gb),e(gb,Cde),g(aw,Cde,null),e(Ed,aRo),e(Ed,wde),e(wde,nRo),v(c,uRe,_),v(c,nr,_),g(nw,nr,null),e(nr,sRo),e(nr,Cd),e(Cd,lRo),e(Cd,Aj),e(Aj,iRo),e(Cd,dRo),e(Cd,yj),e(yj,cRo),e(Cd,fRo),e(nr,mRo),e(nr,sw),e(sw,gRo),e(sw,Ade),e(Ade,hRo),e(sw,uRo),e(nr,pRo),e(nr,Zr),g(lw,Zr,null),e(Zr,_Ro),e(Zr,yde),e(yde,vRo),e(Zr,bRo),e(Zr,wd),e(wd,FRo),e(wd,Lde),e(Lde,TRo),e(wd,MRo),e(wd,Lj),e(Lj,ERo),e(wd,CRo),e(Zr,wRo),e(Zr,xde),e(xde,ARo),e(Zr,yRo),g(iw,Zr,null),e(nr,LRo),e(nr,Qe),g(dw,Qe,null),e(Qe,xRo),e(Qe,kde),e(kde,kRo),e(Qe,SRo),e(Qe,Za),e(Za,RRo),e(Za,Sde),e(Sde,BRo),e(Za,PRo),e(Za,Rde),e(Rde,$Ro),e(Za,IRo),e(Za,Bde),e(Bde,qRo),e(Za,NRo),e(Qe,jRo),e(Qe,R),e(R,hb),e(hb,Pde),e(Pde,DRo),e(hb,GRo),e(hb,xj),e(xj,ORo),e(hb,VRo),e(R,XRo),e(R,ub),e(ub,$de),e($de,zRo),e(ub,QRo),e(ub,kj),e(kj,WRo),e(ub,HRo),e(R,URo),e(R,pb),e(pb,Ide),e(Ide,JRo),e(pb,YRo),e(pb,Sj),e(Sj,KRo),e(pb,ZRo),e(R,eBo),e(R,_b),e(_b,qde),e(qde,oBo),e(_b,rBo),e(_b,Rj),e(Rj,tBo),e(_b,aBo),e(R,nBo),e(R,vb),e(vb,Nde),e(Nde,sBo),e(vb,lBo),e(vb,Bj),e(Bj,iBo),e(vb,dBo),e(R,cBo),e(R,bb),e(bb,jde),e(jde,fBo),e(bb,mBo),e(bb,Pj),e(Pj,gBo),e(bb,hBo),e(R,uBo),e(R,Fb),e(Fb,Dde),e(Dde,pBo),e(Fb,_Bo),e(Fb,$j),e($j,vBo),e(Fb,bBo),e(R,FBo),e(R,Tb),e(Tb,Gde),e(Gde,TBo),e(Tb,MBo),e(Tb,Ij),e(Ij,EBo),e(Tb,CBo),e(R,wBo),e(R,Mb),e(Mb,Ode),e(Ode,ABo),e(Mb,yBo),e(Mb,qj),e(qj,LBo),e(Mb,xBo),e(R,kBo),e(R,Eb),e(Eb,Vde),e(Vde,SBo),e(Eb,RBo),e(Eb,Nj),e(Nj,BBo),e(Eb,PBo),e(R,$Bo),e(R,Cb),e(Cb,Xde),e(Xde,IBo),e(Cb,qBo),e(Cb,jj),e(jj,NBo),e(Cb,jBo),e(R,DBo),e(R,wb),e(wb,zde),e(zde,GBo),e(wb,OBo),e(wb,Dj),e(Dj,VBo),e(wb,XBo),e(R,zBo),e(R,Ab),e(Ab,Qde),e(Qde,QBo),e(Ab,WBo),e(Ab,Gj),e(Gj,HBo),e(Ab,UBo),e(R,JBo),e(R,yb),e(yb,Wde),e(Wde,YBo),e(yb,KBo),e(yb,Oj),e(Oj,ZBo),e(yb,ePo),e(R,oPo),e(R,Lb),e(Lb,Hde),e(Hde,rPo),e(Lb,tPo),e(Lb,Vj),e(Vj,aPo),e(Lb,nPo),e(R,sPo),e(R,xb),e(xb,Ude),e(Ude,lPo),e(xb,iPo),e(xb,Xj),e(Xj,dPo),e(xb,cPo),e(R,fPo),e(R,kb),e(kb,Jde),e(Jde,mPo),e(kb,gPo),e(kb,zj),e(zj,hPo),e(kb,uPo),e(R,pPo),e(R,Sb),e(Sb,Yde),e(Yde,_Po),e(Sb,vPo),e(Sb,Qj),e(Qj,bPo),e(Sb,FPo),e(R,TPo),e(R,Rb),e(Rb,Kde),e(Kde,MPo),e(Rb,EPo),e(Rb,Wj),e(Wj,CPo),e(Rb,wPo),e(R,APo),e(R,Bb),e(Bb,Zde),e(Zde,yPo),e(Bb,LPo),e(Bb,Hj),e(Hj,xPo),e(Bb,kPo),e(R,SPo),e(R,Pb),e(Pb,ece),e(ece,RPo),e(Pb,BPo),e(Pb,Uj),e(Uj,PPo),e(Pb,$Po),e(R,IPo),e(R,$b),e($b,oce),e(oce,qPo),e($b,NPo),e($b,Jj),e(Jj,jPo),e($b,DPo),e(R,GPo),e(R,Ib),e(Ib,rce),e(rce,OPo),e(Ib,VPo),e(Ib,Yj),e(Yj,XPo),e(Ib,zPo),e(R,QPo),e(R,qb),e(qb,tce),e(tce,WPo),e(qb,HPo),e(qb,Kj),e(Kj,UPo),e(qb,JPo),e(R,YPo),e(R,Nb),e(Nb,ace),e(ace,KPo),e(Nb,ZPo),e(Nb,Zj),e(Zj,e$o),e(Nb,o$o),e(R,r$o),e(R,jb),e(jb,nce),e(nce,t$o),e(jb,a$o),e(jb,eD),e(eD,n$o),e(jb,s$o),e(R,l$o),e(R,Db),e(Db,sce),e(sce,i$o),e(Db,d$o),e(Db,oD),e(oD,c$o),e(Db,f$o),e(R,m$o),e(R,Gb),e(Gb,lce),e(lce,g$o),e(Gb,h$o),e(Gb,rD),e(rD,u$o),e(Gb,p$o),e(R,_$o),e(R,Ob),e(Ob,ice),e(ice,v$o),e(Ob,b$o),e(Ob,tD),e(tD,F$o),e(Ob,T$o),e(R,M$o),e(R,Vb),e(Vb,dce),e(dce,E$o),e(Vb,C$o),e(Vb,aD),e(aD,w$o),e(Vb,A$o),e(R,y$o),e(R,Xb),e(Xb,cce),e(cce,L$o),e(Xb,x$o),e(Xb,nD),e(nD,k$o),e(Xb,S$o),e(R,R$o),e(R,zb),e(zb,fce),e(fce,B$o),e(zb,P$o),e(zb,sD),e(sD,$$o),e(zb,I$o),e(R,q$o),e(R,Qb),e(Qb,mce),e(mce,N$o),e(Qb,j$o),e(Qb,lD),e(lD,D$o),e(Qb,G$o),e(R,O$o),e(R,Wb),e(Wb,gce),e(gce,V$o),e(Wb,X$o),e(Wb,iD),e(iD,z$o),e(Wb,Q$o),e(R,W$o),e(R,Hb),e(Hb,hce),e(hce,H$o),e(Hb,U$o),e(Hb,dD),e(dD,J$o),e(Hb,Y$o),e(R,K$o),e(R,Ub),e(Ub,uce),e(uce,Z$o),e(Ub,eIo),e(Ub,cD),e(cD,oIo),e(Ub,rIo),e(R,tIo),e(R,Jb),e(Jb,pce),e(pce,aIo),e(Jb,nIo),e(Jb,fD),e(fD,sIo),e(Jb,lIo),e(R,iIo),e(R,Yb),e(Yb,_ce),e(_ce,dIo),e(Yb,cIo),e(Yb,mD),e(mD,fIo),e(Yb,mIo),e(R,gIo),e(R,Kb),e(Kb,vce),e(vce,hIo),e(Kb,uIo),e(Kb,gD),e(gD,pIo),e(Kb,_Io),e(Qe,vIo),e(Qe,Zb),e(Zb,bIo),e(Zb,bce),e(bce,FIo),e(Zb,TIo),e(Zb,Fce),e(Fce,MIo),e(Qe,EIo),e(Qe,Tce),e(Tce,CIo),e(Qe,wIo),g(cw,Qe,null),v(c,pRe,_),v(c,Ad,_),e(Ad,e2),e(e2,Mce),g(fw,Mce,null),e(Ad,AIo),e(Ad,Ece),e(Ece,yIo),v(c,_Re,_),v(c,sr,_),g(mw,sr,null),e(sr,LIo),e(sr,yd),e(yd,xIo),e(yd,hD),e(hD,kIo),e(yd,SIo),e(yd,uD),e(uD,RIo),e(yd,BIo),e(sr,PIo),e(sr,gw),e(gw,$Io),e(gw,Cce),e(Cce,IIo),e(gw,qIo),e(sr,NIo),e(sr,et),g(hw,et,null),e(et,jIo),e(et,wce),e(wce,DIo),e(et,GIo),e(et,Ld),e(Ld,OIo),e(Ld,Ace),e(Ace,VIo),e(Ld,XIo),e(Ld,pD),e(pD,zIo),e(Ld,QIo),e(et,WIo),e(et,yce),e(yce,HIo),e(et,UIo),g(uw,et,null),e(sr,JIo),e(sr,We),g(pw,We,null),e(We,YIo),e(We,Lce),e(Lce,KIo),e(We,ZIo),e(We,en),e(en,eqo),e(en,xce),e(xce,oqo),e(en,rqo),e(en,kce),e(kce,tqo),e(en,aqo),e(en,Sce),e(Sce,nqo),e(en,sqo),e(We,lqo),e(We,Rce),e(Rce,o2),e(o2,Bce),e(Bce,iqo),e(o2,dqo),e(o2,_D),e(_D,cqo),e(o2,fqo),e(We,mqo),e(We,r2),e(r2,gqo),e(r2,Pce),e(Pce,hqo),e(r2,uqo),e(r2,$ce),e($ce,pqo),e(We,_qo),e(We,Ice),e(Ice,vqo),e(We,bqo),g(_w,We,null),v(c,vRe,_),v(c,xd,_),e(xd,t2),e(t2,qce),g(vw,qce,null),e(xd,Fqo),e(xd,Nce),e(Nce,Tqo),v(c,bRe,_),v(c,lr,_),g(bw,lr,null),e(lr,Mqo),e(lr,kd),e(kd,Eqo),e(kd,vD),e(vD,Cqo),e(kd,wqo),e(kd,bD),e(bD,Aqo),e(kd,yqo),e(lr,Lqo),e(lr,Fw),e(Fw,xqo),e(Fw,jce),e(jce,kqo),e(Fw,Sqo),e(lr,Rqo),e(lr,ot),g(Tw,ot,null),e(ot,Bqo),e(ot,Dce),e(Dce,Pqo),e(ot,$qo),e(ot,Sd),e(Sd,Iqo),e(Sd,Gce),e(Gce,qqo),e(Sd,Nqo),e(Sd,FD),e(FD,jqo),e(Sd,Dqo),e(ot,Gqo),e(ot,Oce),e(Oce,Oqo),e(ot,Vqo),g(Mw,ot,null),e(lr,Xqo),e(lr,He),g(Ew,He,null),e(He,zqo),e(He,Vce),e(Vce,Qqo),e(He,Wqo),e(He,on),e(on,Hqo),e(on,Xce),e(Xce,Uqo),e(on,Jqo),e(on,zce),e(zce,Yqo),e(on,Kqo),e(on,Qce),e(Qce,Zqo),e(on,eNo),e(He,oNo),e(He,ge),e(ge,a2),e(a2,Wce),e(Wce,rNo),e(a2,tNo),e(a2,TD),e(TD,aNo),e(a2,nNo),e(ge,sNo),e(ge,n2),e(n2,Hce),e(Hce,lNo),e(n2,iNo),e(n2,MD),e(MD,dNo),e(n2,cNo),e(ge,fNo),e(ge,Ds),e(Ds,Uce),e(Uce,mNo),e(Ds,gNo),e(Ds,ED),e(ED,hNo),e(Ds,uNo),e(Ds,CD),e(CD,pNo),e(Ds,_No),e(ge,vNo),e(ge,s2),e(s2,Jce),e(Jce,bNo),e(s2,FNo),e(s2,wD),e(wD,TNo),e(s2,MNo),e(ge,ENo),e(ge,ma),e(ma,Yce),e(Yce,CNo),e(ma,wNo),e(ma,AD),e(AD,ANo),e(ma,yNo),e(ma,yD),e(yD,LNo),e(ma,xNo),e(ma,LD),e(LD,kNo),e(ma,SNo),e(ge,RNo),e(ge,l2),e(l2,Kce),e(Kce,BNo),e(l2,PNo),e(l2,xD),e(xD,$No),e(l2,INo),e(ge,qNo),e(ge,i2),e(i2,Zce),e(Zce,NNo),e(i2,jNo),e(i2,kD),e(kD,DNo),e(i2,GNo),e(ge,ONo),e(ge,d2),e(d2,efe),e(efe,VNo),e(d2,XNo),e(d2,SD),e(SD,zNo),e(d2,QNo),e(ge,WNo),e(ge,c2),e(c2,ofe),e(ofe,HNo),e(c2,UNo),e(c2,RD),e(RD,JNo),e(c2,YNo),e(ge,KNo),e(ge,f2),e(f2,rfe),e(rfe,ZNo),e(f2,ejo),e(f2,BD),e(BD,ojo),e(f2,rjo),e(ge,tjo),e(ge,m2),e(m2,tfe),e(tfe,ajo),e(m2,njo),e(m2,PD),e(PD,sjo),e(m2,ljo),e(He,ijo),e(He,g2),e(g2,djo),e(g2,afe),e(afe,cjo),e(g2,fjo),e(g2,nfe),e(nfe,mjo),e(He,gjo),e(He,sfe),e(sfe,hjo),e(He,ujo),g(Cw,He,null),v(c,FRe,_),v(c,Rd,_),e(Rd,h2),e(h2,lfe),g(ww,lfe,null),e(Rd,pjo),e(Rd,ife),e(ife,_jo),v(c,TRe,_),v(c,ir,_),g(Aw,ir,null),e(ir,vjo),e(ir,Bd),e(Bd,bjo),e(Bd,$D),e($D,Fjo),e(Bd,Tjo),e(Bd,ID),e(ID,Mjo),e(Bd,Ejo),e(ir,Cjo),e(ir,yw),e(yw,wjo),e(yw,dfe),e(dfe,Ajo),e(yw,yjo),e(ir,Ljo),e(ir,rt),g(Lw,rt,null),e(rt,xjo),e(rt,cfe),e(cfe,kjo),e(rt,Sjo),e(rt,Pd),e(Pd,Rjo),e(Pd,ffe),e(ffe,Bjo),e(Pd,Pjo),e(Pd,qD),e(qD,$jo),e(Pd,Ijo),e(rt,qjo),e(rt,mfe),e(mfe,Njo),e(rt,jjo),g(xw,rt,null),e(ir,Djo),e(ir,Ue),g(kw,Ue,null),e(Ue,Gjo),e(Ue,gfe),e(gfe,Ojo),e(Ue,Vjo),e(Ue,rn),e(rn,Xjo),e(rn,hfe),e(hfe,zjo),e(rn,Qjo),e(rn,ufe),e(ufe,Wjo),e(rn,Hjo),e(rn,pfe),e(pfe,Ujo),e(rn,Jjo),e(Ue,Yjo),e(Ue,_fe),e(_fe,u2),e(u2,vfe),e(vfe,Kjo),e(u2,Zjo),e(u2,ND),e(ND,eDo),e(u2,oDo),e(Ue,rDo),e(Ue,p2),e(p2,tDo),e(p2,bfe),e(bfe,aDo),e(p2,nDo),e(p2,Ffe),e(Ffe,sDo),e(Ue,lDo),e(Ue,Tfe),e(Tfe,iDo),e(Ue,dDo),g(Sw,Ue,null),v(c,MRe,_),v(c,$d,_),e($d,_2),e(_2,Mfe),g(Rw,Mfe,null),e($d,cDo),e($d,Efe),e(Efe,fDo),v(c,ERe,_),v(c,dr,_),g(Bw,dr,null),e(dr,mDo),e(dr,Id),e(Id,gDo),e(Id,jD),e(jD,hDo),e(Id,uDo),e(Id,DD),e(DD,pDo),e(Id,_Do),e(dr,vDo),e(dr,Pw),e(Pw,bDo),e(Pw,Cfe),e(Cfe,FDo),e(Pw,TDo),e(dr,MDo),e(dr,tt),g($w,tt,null),e(tt,EDo),e(tt,wfe),e(wfe,CDo),e(tt,wDo),e(tt,qd),e(qd,ADo),e(qd,Afe),e(Afe,yDo),e(qd,LDo),e(qd,GD),e(GD,xDo),e(qd,kDo),e(tt,SDo),e(tt,yfe),e(yfe,RDo),e(tt,BDo),g(Iw,tt,null),e(dr,PDo),e(dr,Je),g(qw,Je,null),e(Je,$Do),e(Je,Lfe),e(Lfe,IDo),e(Je,qDo),e(Je,tn),e(tn,NDo),e(tn,xfe),e(xfe,jDo),e(tn,DDo),e(tn,kfe),e(kfe,GDo),e(tn,ODo),e(tn,Sfe),e(Sfe,VDo),e(tn,XDo),e(Je,zDo),e(Je,Se),e(Se,v2),e(v2,Rfe),e(Rfe,QDo),e(v2,WDo),e(v2,OD),e(OD,HDo),e(v2,UDo),e(Se,JDo),e(Se,b2),e(b2,Bfe),e(Bfe,YDo),e(b2,KDo),e(b2,VD),e(VD,ZDo),e(b2,eGo),e(Se,oGo),e(Se,F2),e(F2,Pfe),e(Pfe,rGo),e(F2,tGo),e(F2,XD),e(XD,aGo),e(F2,nGo),e(Se,sGo),e(Se,T2),e(T2,$fe),e($fe,lGo),e(T2,iGo),e(T2,zD),e(zD,dGo),e(T2,cGo),e(Se,fGo),e(Se,M2),e(M2,Ife),e(Ife,mGo),e(M2,gGo),e(M2,QD),e(QD,hGo),e(M2,uGo),e(Se,pGo),e(Se,E2),e(E2,qfe),e(qfe,_Go),e(E2,vGo),e(E2,WD),e(WD,bGo),e(E2,FGo),e(Se,TGo),e(Se,C2),e(C2,Nfe),e(Nfe,MGo),e(C2,EGo),e(C2,HD),e(HD,CGo),e(C2,wGo),e(Se,AGo),e(Se,w2),e(w2,jfe),e(jfe,yGo),e(w2,LGo),e(w2,UD),e(UD,xGo),e(w2,kGo),e(Je,SGo),e(Je,A2),e(A2,RGo),e(A2,Dfe),e(Dfe,BGo),e(A2,PGo),e(A2,Gfe),e(Gfe,$Go),e(Je,IGo),e(Je,Ofe),e(Ofe,qGo),e(Je,NGo),g(Nw,Je,null),v(c,CRe,_),v(c,Nd,_),e(Nd,y2),e(y2,Vfe),g(jw,Vfe,null),e(Nd,jGo),e(Nd,Xfe),e(Xfe,DGo),v(c,wRe,_),v(c,cr,_),g(Dw,cr,null),e(cr,GGo),e(cr,jd),e(jd,OGo),e(jd,JD),e(JD,VGo),e(jd,XGo),e(jd,YD),e(YD,zGo),e(jd,QGo),e(cr,WGo),e(cr,Gw),e(Gw,HGo),e(Gw,zfe),e(zfe,UGo),e(Gw,JGo),e(cr,YGo),e(cr,at),g(Ow,at,null),e(at,KGo),e(at,Qfe),e(Qfe,ZGo),e(at,eOo),e(at,Dd),e(Dd,oOo),e(Dd,Wfe),e(Wfe,rOo),e(Dd,tOo),e(Dd,KD),e(KD,aOo),e(Dd,nOo),e(at,sOo),e(at,Hfe),e(Hfe,lOo),e(at,iOo),g(Vw,at,null),e(cr,dOo),e(cr,Ye),g(Xw,Ye,null),e(Ye,cOo),e(Ye,Ufe),e(Ufe,fOo),e(Ye,mOo),e(Ye,an),e(an,gOo),e(an,Jfe),e(Jfe,hOo),e(an,uOo),e(an,Yfe),e(Yfe,pOo),e(an,_Oo),e(an,Kfe),e(Kfe,vOo),e(an,bOo),e(Ye,FOo),e(Ye,nn),e(nn,L2),e(L2,Zfe),e(Zfe,TOo),e(L2,MOo),e(L2,ZD),e(ZD,EOo),e(L2,COo),e(nn,wOo),e(nn,x2),e(x2,eme),e(eme,AOo),e(x2,yOo),e(x2,eG),e(eG,LOo),e(x2,xOo),e(nn,kOo),e(nn,k2),e(k2,ome),e(ome,SOo),e(k2,ROo),e(k2,oG),e(oG,BOo),e(k2,POo),e(nn,$Oo),e(nn,S2),e(S2,rme),e(rme,IOo),e(S2,qOo),e(S2,rG),e(rG,NOo),e(S2,jOo),e(Ye,DOo),e(Ye,R2),e(R2,GOo),e(R2,tme),e(tme,OOo),e(R2,VOo),e(R2,ame),e(ame,XOo),e(Ye,zOo),e(Ye,nme),e(nme,QOo),e(Ye,WOo),g(zw,Ye,null),v(c,ARe,_),v(c,Gd,_),e(Gd,B2),e(B2,sme),g(Qw,sme,null),e(Gd,HOo),e(Gd,lme),e(lme,UOo),v(c,yRe,_),v(c,fr,_),g(Ww,fr,null),e(fr,JOo),e(fr,Od),e(Od,YOo),e(Od,tG),e(tG,KOo),e(Od,ZOo),e(Od,aG),e(aG,eVo),e(Od,oVo),e(fr,rVo),e(fr,Hw),e(Hw,tVo),e(Hw,ime),e(ime,aVo),e(Hw,nVo),e(fr,sVo),e(fr,nt),g(Uw,nt,null),e(nt,lVo),e(nt,dme),e(dme,iVo),e(nt,dVo),e(nt,Vd),e(Vd,cVo),e(Vd,cme),e(cme,fVo),e(Vd,mVo),e(Vd,nG),e(nG,gVo),e(Vd,hVo),e(nt,uVo),e(nt,fme),e(fme,pVo),e(nt,_Vo),g(Jw,nt,null),e(fr,vVo),e(fr,Ke),g(Yw,Ke,null),e(Ke,bVo),e(Ke,mme),e(mme,FVo),e(Ke,TVo),e(Ke,sn),e(sn,MVo),e(sn,gme),e(gme,EVo),e(sn,CVo),e(sn,hme),e(hme,wVo),e(sn,AVo),e(sn,ume),e(ume,yVo),e(sn,LVo),e(Ke,xVo),e(Ke,Re),e(Re,P2),e(P2,pme),e(pme,kVo),e(P2,SVo),e(P2,sG),e(sG,RVo),e(P2,BVo),e(Re,PVo),e(Re,$2),e($2,_me),e(_me,$Vo),e($2,IVo),e($2,lG),e(lG,qVo),e($2,NVo),e(Re,jVo),e(Re,I2),e(I2,vme),e(vme,DVo),e(I2,GVo),e(I2,iG),e(iG,OVo),e(I2,VVo),e(Re,XVo),e(Re,q2),e(q2,bme),e(bme,zVo),e(q2,QVo),e(q2,dG),e(dG,WVo),e(q2,HVo),e(Re,UVo),e(Re,N2),e(N2,Fme),e(Fme,JVo),e(N2,YVo),e(N2,cG),e(cG,KVo),e(N2,ZVo),e(Re,eXo),e(Re,j2),e(j2,Tme),e(Tme,oXo),e(j2,rXo),e(j2,fG),e(fG,tXo),e(j2,aXo),e(Re,nXo),e(Re,D2),e(D2,Mme),e(Mme,sXo),e(D2,lXo),e(D2,mG),e(mG,iXo),e(D2,dXo),e(Re,cXo),e(Re,G2),e(G2,Eme),e(Eme,fXo),e(G2,mXo),e(G2,gG),e(gG,gXo),e(G2,hXo),e(Ke,uXo),e(Ke,O2),e(O2,pXo),e(O2,Cme),e(Cme,_Xo),e(O2,vXo),e(O2,wme),e(wme,bXo),e(Ke,FXo),e(Ke,Ame),e(Ame,TXo),e(Ke,MXo),g(Kw,Ke,null),v(c,LRe,_),v(c,Xd,_),e(Xd,V2),e(V2,yme),g(Zw,yme,null),e(Xd,EXo),e(Xd,Lme),e(Lme,CXo),v(c,xRe,_),v(c,mr,_),g(e6,mr,null),e(mr,wXo),e(mr,zd),e(zd,AXo),e(zd,hG),e(hG,yXo),e(zd,LXo),e(zd,uG),e(uG,xXo),e(zd,kXo),e(mr,SXo),e(mr,o6),e(o6,RXo),e(o6,xme),e(xme,BXo),e(o6,PXo),e(mr,$Xo),e(mr,st),g(r6,st,null),e(st,IXo),e(st,kme),e(kme,qXo),e(st,NXo),e(st,Qd),e(Qd,jXo),e(Qd,Sme),e(Sme,DXo),e(Qd,GXo),e(Qd,pG),e(pG,OXo),e(Qd,VXo),e(st,XXo),e(st,Rme),e(Rme,zXo),e(st,QXo),g(t6,st,null),e(mr,WXo),e(mr,Ze),g(a6,Ze,null),e(Ze,HXo),e(Ze,Bme),e(Bme,UXo),e(Ze,JXo),e(Ze,ln),e(ln,YXo),e(ln,Pme),e(Pme,KXo),e(ln,ZXo),e(ln,$me),e($me,ezo),e(ln,ozo),e(ln,Ime),e(Ime,rzo),e(ln,tzo),e(Ze,azo),e(Ze,n6),e(n6,X2),e(X2,qme),e(qme,nzo),e(X2,szo),e(X2,_G),e(_G,lzo),e(X2,izo),e(n6,dzo),e(n6,z2),e(z2,Nme),e(Nme,czo),e(z2,fzo),e(z2,vG),e(vG,mzo),e(z2,gzo),e(Ze,hzo),e(Ze,Q2),e(Q2,uzo),e(Q2,jme),e(jme,pzo),e(Q2,_zo),e(Q2,Dme),e(Dme,vzo),e(Ze,bzo),e(Ze,Gme),e(Gme,Fzo),e(Ze,Tzo),g(s6,Ze,null),v(c,kRe,_),v(c,Wd,_),e(Wd,W2),e(W2,Ome),g(l6,Ome,null),e(Wd,Mzo),e(Wd,Vme),e(Vme,Ezo),v(c,SRe,_),v(c,gr,_),g(i6,gr,null),e(gr,Czo),e(gr,Hd),e(Hd,wzo),e(Hd,bG),e(bG,Azo),e(Hd,yzo),e(Hd,FG),e(FG,Lzo),e(Hd,xzo),e(gr,kzo),e(gr,d6),e(d6,Szo),e(d6,Xme),e(Xme,Rzo),e(d6,Bzo),e(gr,Pzo),e(gr,lt),g(c6,lt,null),e(lt,$zo),e(lt,zme),e(zme,Izo),e(lt,qzo),e(lt,Ud),e(Ud,Nzo),e(Ud,Qme),e(Qme,jzo),e(Ud,Dzo),e(Ud,TG),e(TG,Gzo),e(Ud,Ozo),e(lt,Vzo),e(lt,Wme),e(Wme,Xzo),e(lt,zzo),g(f6,lt,null),e(gr,Qzo),e(gr,eo),g(m6,eo,null),e(eo,Wzo),e(eo,Hme),e(Hme,Hzo),e(eo,Uzo),e(eo,dn),e(dn,Jzo),e(dn,Ume),e(Ume,Yzo),e(dn,Kzo),e(dn,Jme),e(Jme,Zzo),e(dn,eQo),e(dn,Yme),e(Yme,oQo),e(dn,rQo),e(eo,tQo),e(eo,cn),e(cn,H2),e(H2,Kme),e(Kme,aQo),e(H2,nQo),e(H2,MG),e(MG,sQo),e(H2,lQo),e(cn,iQo),e(cn,U2),e(U2,Zme),e(Zme,dQo),e(U2,cQo),e(U2,EG),e(EG,fQo),e(U2,mQo),e(cn,gQo),e(cn,J2),e(J2,ege),e(ege,hQo),e(J2,uQo),e(J2,CG),e(CG,pQo),e(J2,_Qo),e(cn,vQo),e(cn,Y2),e(Y2,oge),e(oge,bQo),e(Y2,FQo),e(Y2,wG),e(wG,TQo),e(Y2,MQo),e(eo,EQo),e(eo,K2),e(K2,CQo),e(K2,rge),e(rge,wQo),e(K2,AQo),e(K2,tge),e(tge,yQo),e(eo,LQo),e(eo,age),e(age,xQo),e(eo,kQo),g(g6,eo,null),v(c,RRe,_),v(c,Jd,_),e(Jd,Z2),e(Z2,nge),g(h6,nge,null),e(Jd,SQo),e(Jd,sge),e(sge,RQo),v(c,BRe,_),v(c,hr,_),g(u6,hr,null),e(hr,BQo),e(hr,Yd),e(Yd,PQo),e(Yd,AG),e(AG,$Qo),e(Yd,IQo),e(Yd,yG),e(yG,qQo),e(Yd,NQo),e(hr,jQo),e(hr,p6),e(p6,DQo),e(p6,lge),e(lge,GQo),e(p6,OQo),e(hr,VQo),e(hr,it),g(_6,it,null),e(it,XQo),e(it,ige),e(ige,zQo),e(it,QQo),e(it,Kd),e(Kd,WQo),e(Kd,dge),e(dge,HQo),e(Kd,UQo),e(Kd,LG),e(LG,JQo),e(Kd,YQo),e(it,KQo),e(it,cge),e(cge,ZQo),e(it,eWo),g(v6,it,null),e(hr,oWo),e(hr,oo),g(b6,oo,null),e(oo,rWo),e(oo,fge),e(fge,tWo),e(oo,aWo),e(oo,fn),e(fn,nWo),e(fn,mge),e(mge,sWo),e(fn,lWo),e(fn,gge),e(gge,iWo),e(fn,dWo),e(fn,hge),e(hge,cWo),e(fn,fWo),e(oo,mWo),e(oo,Zd),e(Zd,eF),e(eF,uge),e(uge,gWo),e(eF,hWo),e(eF,xG),e(xG,uWo),e(eF,pWo),e(Zd,_Wo),e(Zd,oF),e(oF,pge),e(pge,vWo),e(oF,bWo),e(oF,kG),e(kG,FWo),e(oF,TWo),e(Zd,MWo),e(Zd,rF),e(rF,_ge),e(_ge,EWo),e(rF,CWo),e(rF,SG),e(SG,wWo),e(rF,AWo),e(oo,yWo),e(oo,tF),e(tF,LWo),e(tF,vge),e(vge,xWo),e(tF,kWo),e(tF,bge),e(bge,SWo),e(oo,RWo),e(oo,Fge),e(Fge,BWo),e(oo,PWo),g(F6,oo,null),v(c,PRe,_),v(c,ec,_),e(ec,aF),e(aF,Tge),g(T6,Tge,null),e(ec,$Wo),e(ec,Mge),e(Mge,IWo),v(c,$Re,_),v(c,ur,_),g(M6,ur,null),e(ur,qWo),e(ur,oc),e(oc,NWo),e(oc,RG),e(RG,jWo),e(oc,DWo),e(oc,BG),e(BG,GWo),e(oc,OWo),e(ur,VWo),e(ur,E6),e(E6,XWo),e(E6,Ege),e(Ege,zWo),e(E6,QWo),e(ur,WWo),e(ur,dt),g(C6,dt,null),e(dt,HWo),e(dt,Cge),e(Cge,UWo),e(dt,JWo),e(dt,rc),e(rc,YWo),e(rc,wge),e(wge,KWo),e(rc,ZWo),e(rc,PG),e(PG,eHo),e(rc,oHo),e(dt,rHo),e(dt,Age),e(Age,tHo),e(dt,aHo),g(w6,dt,null),e(ur,nHo),e(ur,ro),g(A6,ro,null),e(ro,sHo),e(ro,yge),e(yge,lHo),e(ro,iHo),e(ro,mn),e(mn,dHo),e(mn,Lge),e(Lge,cHo),e(mn,fHo),e(mn,xge),e(xge,mHo),e(mn,gHo),e(mn,kge),e(kge,hHo),e(mn,uHo),e(ro,pHo),e(ro,Sge),e(Sge,nF),e(nF,Rge),e(Rge,_Ho),e(nF,vHo),e(nF,$G),e($G,bHo),e(nF,FHo),e(ro,THo),e(ro,sF),e(sF,MHo),e(sF,Bge),e(Bge,EHo),e(sF,CHo),e(sF,Pge),e(Pge,wHo),e(ro,AHo),e(ro,$ge),e($ge,yHo),e(ro,LHo),g(y6,ro,null),v(c,IRe,_),v(c,tc,_),e(tc,lF),e(lF,Ige),g(L6,Ige,null),e(tc,xHo),e(tc,qge),e(qge,kHo),v(c,qRe,_),v(c,pr,_),g(x6,pr,null),e(pr,SHo),e(pr,ac),e(ac,RHo),e(ac,IG),e(IG,BHo),e(ac,PHo),e(ac,qG),e(qG,$Ho),e(ac,IHo),e(pr,qHo),e(pr,k6),e(k6,NHo),e(k6,Nge),e(Nge,jHo),e(k6,DHo),e(pr,GHo),e(pr,ct),g(S6,ct,null),e(ct,OHo),e(ct,jge),e(jge,VHo),e(ct,XHo),e(ct,nc),e(nc,zHo),e(nc,Dge),e(Dge,QHo),e(nc,WHo),e(nc,NG),e(NG,HHo),e(nc,UHo),e(ct,JHo),e(ct,Gge),e(Gge,YHo),e(ct,KHo),g(R6,ct,null),e(pr,ZHo),e(pr,to),g(B6,to,null),e(to,eUo),e(to,Oge),e(Oge,oUo),e(to,rUo),e(to,gn),e(gn,tUo),e(gn,Vge),e(Vge,aUo),e(gn,nUo),e(gn,Xge),e(Xge,sUo),e(gn,lUo),e(gn,zge),e(zge,iUo),e(gn,dUo),e(to,cUo),e(to,Qge),e(Qge,iF),e(iF,Wge),e(Wge,fUo),e(iF,mUo),e(iF,jG),e(jG,gUo),e(iF,hUo),e(to,uUo),e(to,dF),e(dF,pUo),e(dF,Hge),e(Hge,_Uo),e(dF,vUo),e(dF,Uge),e(Uge,bUo),e(to,FUo),e(to,Jge),e(Jge,TUo),e(to,MUo),g(P6,to,null),v(c,NRe,_),v(c,sc,_),e(sc,cF),e(cF,Yge),g($6,Yge,null),e(sc,EUo),e(sc,Kge),e(Kge,CUo),v(c,jRe,_),v(c,_r,_),g(I6,_r,null),e(_r,wUo),e(_r,lc),e(lc,AUo),e(lc,DG),e(DG,yUo),e(lc,LUo),e(lc,GG),e(GG,xUo),e(lc,kUo),e(_r,SUo),e(_r,q6),e(q6,RUo),e(q6,Zge),e(Zge,BUo),e(q6,PUo),e(_r,$Uo),e(_r,ft),g(N6,ft,null),e(ft,IUo),e(ft,ehe),e(ehe,qUo),e(ft,NUo),e(ft,ic),e(ic,jUo),e(ic,ohe),e(ohe,DUo),e(ic,GUo),e(ic,OG),e(OG,OUo),e(ic,VUo),e(ft,XUo),e(ft,rhe),e(rhe,zUo),e(ft,QUo),g(j6,ft,null),e(_r,WUo),e(_r,ao),g(D6,ao,null),e(ao,HUo),e(ao,the),e(the,UUo),e(ao,JUo),e(ao,hn),e(hn,YUo),e(hn,ahe),e(ahe,KUo),e(hn,ZUo),e(hn,nhe),e(nhe,eJo),e(hn,oJo),e(hn,she),e(she,rJo),e(hn,tJo),e(ao,aJo),e(ao,dc),e(dc,fF),e(fF,lhe),e(lhe,nJo),e(fF,sJo),e(fF,VG),e(VG,lJo),e(fF,iJo),e(dc,dJo),e(dc,mF),e(mF,ihe),e(ihe,cJo),e(mF,fJo),e(mF,XG),e(XG,mJo),e(mF,gJo),e(dc,hJo),e(dc,gF),e(gF,dhe),e(dhe,uJo),e(gF,pJo),e(gF,zG),e(zG,_Jo),e(gF,vJo),e(ao,bJo),e(ao,hF),e(hF,FJo),e(hF,che),e(che,TJo),e(hF,MJo),e(hF,fhe),e(fhe,EJo),e(ao,CJo),e(ao,mhe),e(mhe,wJo),e(ao,AJo),g(G6,ao,null),v(c,DRe,_),v(c,cc,_),e(cc,uF),e(uF,ghe),g(O6,ghe,null),e(cc,yJo),e(cc,hhe),e(hhe,LJo),v(c,GRe,_),v(c,vr,_),g(V6,vr,null),e(vr,xJo),e(vr,fc),e(fc,kJo),e(fc,QG),e(QG,SJo),e(fc,RJo),e(fc,WG),e(WG,BJo),e(fc,PJo),e(vr,$Jo),e(vr,X6),e(X6,IJo),e(X6,uhe),e(uhe,qJo),e(X6,NJo),e(vr,jJo),e(vr,mt),g(z6,mt,null),e(mt,DJo),e(mt,phe),e(phe,GJo),e(mt,OJo),e(mt,mc),e(mc,VJo),e(mc,_he),e(_he,XJo),e(mc,zJo),e(mc,HG),e(HG,QJo),e(mc,WJo),e(mt,HJo),e(mt,vhe),e(vhe,UJo),e(mt,JJo),g(Q6,mt,null),e(vr,YJo),e(vr,no),g(W6,no,null),e(no,KJo),e(no,bhe),e(bhe,ZJo),e(no,eYo),e(no,un),e(un,oYo),e(un,Fhe),e(Fhe,rYo),e(un,tYo),e(un,The),e(The,aYo),e(un,nYo),e(un,Mhe),e(Mhe,sYo),e(un,lYo),e(no,iYo),e(no,Ehe),e(Ehe,pF),e(pF,Che),e(Che,dYo),e(pF,cYo),e(pF,UG),e(UG,fYo),e(pF,mYo),e(no,gYo),e(no,_F),e(_F,hYo),e(_F,whe),e(whe,uYo),e(_F,pYo),e(_F,Ahe),e(Ahe,_Yo),e(no,vYo),e(no,yhe),e(yhe,bYo),e(no,FYo),g(H6,no,null),v(c,ORe,_),v(c,gc,_),e(gc,vF),e(vF,Lhe),g(U6,Lhe,null),e(gc,TYo),e(gc,xhe),e(xhe,MYo),v(c,VRe,_),v(c,br,_),g(J6,br,null),e(br,EYo),e(br,hc),e(hc,CYo),e(hc,JG),e(JG,wYo),e(hc,AYo),e(hc,YG),e(YG,yYo),e(hc,LYo),e(br,xYo),e(br,Y6),e(Y6,kYo),e(Y6,khe),e(khe,SYo),e(Y6,RYo),e(br,BYo),e(br,gt),g(K6,gt,null),e(gt,PYo),e(gt,She),e(She,$Yo),e(gt,IYo),e(gt,uc),e(uc,qYo),e(uc,Rhe),e(Rhe,NYo),e(uc,jYo),e(uc,KG),e(KG,DYo),e(uc,GYo),e(gt,OYo),e(gt,Bhe),e(Bhe,VYo),e(gt,XYo),g(Z6,gt,null),e(br,zYo),e(br,ho),g(eA,ho,null),e(ho,QYo),e(ho,Phe),e(Phe,WYo),e(ho,HYo),e(ho,pn),e(pn,UYo),e(pn,$he),e($he,JYo),e(pn,YYo),e(pn,Ihe),e(Ihe,KYo),e(pn,ZYo),e(pn,qhe),e(qhe,eKo),e(pn,oKo),e(ho,rKo),e(ho,x),e(x,bF),e(bF,Nhe),e(Nhe,tKo),e(bF,aKo),e(bF,ZG),e(ZG,nKo),e(bF,sKo),e(x,lKo),e(x,FF),e(FF,jhe),e(jhe,iKo),e(FF,dKo),e(FF,eO),e(eO,cKo),e(FF,fKo),e(x,mKo),e(x,TF),e(TF,Dhe),e(Dhe,gKo),e(TF,hKo),e(TF,oO),e(oO,uKo),e(TF,pKo),e(x,_Ko),e(x,MF),e(MF,Ghe),e(Ghe,vKo),e(MF,bKo),e(MF,rO),e(rO,FKo),e(MF,TKo),e(x,MKo),e(x,EF),e(EF,Ohe),e(Ohe,EKo),e(EF,CKo),e(EF,tO),e(tO,wKo),e(EF,AKo),e(x,yKo),e(x,CF),e(CF,Vhe),e(Vhe,LKo),e(CF,xKo),e(CF,aO),e(aO,kKo),e(CF,SKo),e(x,RKo),e(x,wF),e(wF,Xhe),e(Xhe,BKo),e(wF,PKo),e(wF,nO),e(nO,$Ko),e(wF,IKo),e(x,qKo),e(x,AF),e(AF,zhe),e(zhe,NKo),e(AF,jKo),e(AF,sO),e(sO,DKo),e(AF,GKo),e(x,OKo),e(x,yF),e(yF,Qhe),e(Qhe,VKo),e(yF,XKo),e(yF,lO),e(lO,zKo),e(yF,QKo),e(x,WKo),e(x,LF),e(LF,Whe),e(Whe,HKo),e(LF,UKo),e(LF,iO),e(iO,JKo),e(LF,YKo),e(x,KKo),e(x,xF),e(xF,Hhe),e(Hhe,ZKo),e(xF,eZo),e(xF,dO),e(dO,oZo),e(xF,rZo),e(x,tZo),e(x,kF),e(kF,Uhe),e(Uhe,aZo),e(kF,nZo),e(kF,cO),e(cO,sZo),e(kF,lZo),e(x,iZo),e(x,SF),e(SF,Jhe),e(Jhe,dZo),e(SF,cZo),e(SF,fO),e(fO,fZo),e(SF,mZo),e(x,gZo),e(x,RF),e(RF,Yhe),e(Yhe,hZo),e(RF,uZo),e(RF,mO),e(mO,pZo),e(RF,_Zo),e(x,vZo),e(x,BF),e(BF,Khe),e(Khe,bZo),e(BF,FZo),e(BF,gO),e(gO,TZo),e(BF,MZo),e(x,EZo),e(x,PF),e(PF,Zhe),e(Zhe,CZo),e(PF,wZo),e(PF,hO),e(hO,AZo),e(PF,yZo),e(x,LZo),e(x,Gs),e(Gs,eue),e(eue,xZo),e(Gs,kZo),e(Gs,uO),e(uO,SZo),e(Gs,RZo),e(Gs,pO),e(pO,BZo),e(Gs,PZo),e(x,$Zo),e(x,$F),e($F,oue),e(oue,IZo),e($F,qZo),e($F,_O),e(_O,NZo),e($F,jZo),e(x,DZo),e(x,IF),e(IF,rue),e(rue,GZo),e(IF,OZo),e(IF,vO),e(vO,VZo),e(IF,XZo),e(x,zZo),e(x,qF),e(qF,tue),e(tue,QZo),e(qF,WZo),e(qF,bO),e(bO,HZo),e(qF,UZo),e(x,JZo),e(x,NF),e(NF,aue),e(aue,YZo),e(NF,KZo),e(NF,FO),e(FO,ZZo),e(NF,eer),e(x,oer),e(x,jF),e(jF,nue),e(nue,rer),e(jF,ter),e(jF,TO),e(TO,aer),e(jF,ner),e(x,ser),e(x,DF),e(DF,sue),e(sue,ler),e(DF,ier),e(DF,MO),e(MO,der),e(DF,cer),e(x,fer),e(x,GF),e(GF,lue),e(lue,mer),e(GF,ger),e(GF,EO),e(EO,her),e(GF,uer),e(x,per),e(x,OF),e(OF,iue),e(iue,_er),e(OF,ver),e(OF,CO),e(CO,ber),e(OF,Fer),e(x,Ter),e(x,VF),e(VF,due),e(due,Mer),e(VF,Eer),e(VF,wO),e(wO,Cer),e(VF,wer),e(x,Aer),e(x,XF),e(XF,cue),e(cue,yer),e(XF,Ler),e(XF,AO),e(AO,xer),e(XF,ker),e(x,Ser),e(x,zF),e(zF,fue),e(fue,Rer),e(zF,Ber),e(zF,yO),e(yO,Per),e(zF,$er),e(x,Ier),e(x,QF),e(QF,mue),e(mue,qer),e(QF,Ner),e(QF,LO),e(LO,jer),e(QF,Der),e(x,Ger),e(x,WF),e(WF,gue),e(gue,Oer),e(WF,Ver),e(WF,xO),e(xO,Xer),e(WF,zer),e(x,Qer),e(x,HF),e(HF,hue),e(hue,Wer),e(HF,Her),e(HF,kO),e(kO,Uer),e(HF,Jer),e(x,Yer),e(x,UF),e(UF,uue),e(uue,Ker),e(UF,Zer),e(UF,SO),e(SO,eor),e(UF,oor),e(x,ror),e(x,JF),e(JF,pue),e(pue,tor),e(JF,aor),e(JF,RO),e(RO,nor),e(JF,sor),e(x,lor),e(x,YF),e(YF,_ue),e(_ue,ior),e(YF,dor),e(YF,BO),e(BO,cor),e(YF,mor),e(x,gor),e(x,KF),e(KF,vue),e(vue,hor),e(KF,uor),e(KF,PO),e(PO,por),e(KF,_or),e(x,vor),e(x,ZF),e(ZF,bue),e(bue,bor),e(ZF,For),e(ZF,$O),e($O,Tor),e(ZF,Mor),e(x,Eor),e(x,e0),e(e0,Fue),e(Fue,Cor),e(e0,wor),e(e0,IO),e(IO,Aor),e(e0,yor),e(x,Lor),e(x,o0),e(o0,Tue),e(Tue,xor),e(o0,kor),e(o0,qO),e(qO,Sor),e(o0,Ror),e(x,Bor),e(x,r0),e(r0,Mue),e(Mue,Por),e(r0,$or),e(r0,NO),e(NO,Ior),e(r0,qor),e(x,Nor),e(x,t0),e(t0,Eue),e(Eue,jor),e(t0,Dor),e(t0,jO),e(jO,Gor),e(t0,Oor),e(x,Vor),e(x,a0),e(a0,Cue),e(Cue,Xor),e(a0,zor),e(a0,DO),e(DO,Qor),e(a0,Wor),e(x,Hor),e(x,n0),e(n0,wue),e(wue,Uor),e(n0,Jor),e(n0,GO),e(GO,Yor),e(n0,Kor),e(x,Zor),e(x,s0),e(s0,Aue),e(Aue,err),e(s0,orr),e(s0,OO),e(OO,rrr),e(s0,trr),e(x,arr),e(x,l0),e(l0,yue),e(yue,nrr),e(l0,srr),e(l0,VO),e(VO,lrr),e(l0,irr),e(ho,drr),e(ho,Lue),e(Lue,crr),e(ho,frr),g(oA,ho,null),v(c,XRe,_),v(c,pc,_),e(pc,i0),e(i0,xue),g(rA,xue,null),e(pc,mrr),e(pc,kue),e(kue,grr),v(c,zRe,_),v(c,Fr,_),g(tA,Fr,null),e(Fr,hrr),e(Fr,_c),e(_c,urr),e(_c,XO),e(XO,prr),e(_c,_rr),e(_c,zO),e(zO,vrr),e(_c,brr),e(Fr,Frr),e(Fr,aA),e(aA,Trr),e(aA,Sue),e(Sue,Mrr),e(aA,Err),e(Fr,Crr),e(Fr,ht),g(nA,ht,null),e(ht,wrr),e(ht,Rue),e(Rue,Arr),e(ht,yrr),e(ht,vc),e(vc,Lrr),e(vc,Bue),e(Bue,xrr),e(vc,krr),e(vc,QO),e(QO,Srr),e(vc,Rrr),e(ht,Brr),e(ht,Pue),e(Pue,Prr),e(ht,$rr),g(sA,ht,null),e(Fr,Irr),e(Fr,uo),g(lA,uo,null),e(uo,qrr),e(uo,$ue),e($ue,Nrr),e(uo,jrr),e(uo,_n),e(_n,Drr),e(_n,Iue),e(Iue,Grr),e(_n,Orr),e(_n,que),e(que,Vrr),e(_n,Xrr),e(_n,Nue),e(Nue,zrr),e(_n,Qrr),e(uo,Wrr),e(uo,H),e(H,d0),e(d0,jue),e(jue,Hrr),e(d0,Urr),e(d0,WO),e(WO,Jrr),e(d0,Yrr),e(H,Krr),e(H,c0),e(c0,Due),e(Due,Zrr),e(c0,etr),e(c0,HO),e(HO,otr),e(c0,rtr),e(H,ttr),e(H,f0),e(f0,Gue),e(Gue,atr),e(f0,ntr),e(f0,UO),e(UO,str),e(f0,ltr),e(H,itr),e(H,m0),e(m0,Oue),e(Oue,dtr),e(m0,ctr),e(m0,JO),e(JO,ftr),e(m0,mtr),e(H,gtr),e(H,g0),e(g0,Vue),e(Vue,htr),e(g0,utr),e(g0,YO),e(YO,ptr),e(g0,_tr),e(H,vtr),e(H,h0),e(h0,Xue),e(Xue,btr),e(h0,Ftr),e(h0,KO),e(KO,Ttr),e(h0,Mtr),e(H,Etr),e(H,u0),e(u0,zue),e(zue,Ctr),e(u0,wtr),e(u0,ZO),e(ZO,Atr),e(u0,ytr),e(H,Ltr),e(H,p0),e(p0,Que),e(Que,xtr),e(p0,ktr),e(p0,eV),e(eV,Str),e(p0,Rtr),e(H,Btr),e(H,_0),e(_0,Wue),e(Wue,Ptr),e(_0,$tr),e(_0,oV),e(oV,Itr),e(_0,qtr),e(H,Ntr),e(H,v0),e(v0,Hue),e(Hue,jtr),e(v0,Dtr),e(v0,rV),e(rV,Gtr),e(v0,Otr),e(H,Vtr),e(H,b0),e(b0,Uue),e(Uue,Xtr),e(b0,ztr),e(b0,tV),e(tV,Qtr),e(b0,Wtr),e(H,Htr),e(H,F0),e(F0,Jue),e(Jue,Utr),e(F0,Jtr),e(F0,aV),e(aV,Ytr),e(F0,Ktr),e(H,Ztr),e(H,T0),e(T0,Yue),e(Yue,ear),e(T0,oar),e(T0,nV),e(nV,rar),e(T0,tar),e(H,aar),e(H,M0),e(M0,Kue),e(Kue,nar),e(M0,sar),e(M0,sV),e(sV,lar),e(M0,iar),e(H,dar),e(H,E0),e(E0,Zue),e(Zue,car),e(E0,far),e(E0,lV),e(lV,mar),e(E0,gar),e(H,har),e(H,C0),e(C0,epe),e(epe,uar),e(C0,par),e(C0,iV),e(iV,_ar),e(C0,bar),e(H,Far),e(H,w0),e(w0,ope),e(ope,Tar),e(w0,Mar),e(w0,dV),e(dV,Ear),e(w0,Car),e(H,war),e(H,A0),e(A0,rpe),e(rpe,Aar),e(A0,yar),e(A0,cV),e(cV,Lar),e(A0,xar),e(H,kar),e(H,y0),e(y0,tpe),e(tpe,Sar),e(y0,Rar),e(y0,fV),e(fV,Bar),e(y0,Par),e(H,$ar),e(H,L0),e(L0,ape),e(ape,Iar),e(L0,qar),e(L0,mV),e(mV,Nar),e(L0,jar),e(H,Dar),e(H,x0),e(x0,npe),e(npe,Gar),e(x0,Oar),e(x0,gV),e(gV,Var),e(x0,Xar),e(H,zar),e(H,k0),e(k0,spe),e(spe,Qar),e(k0,War),e(k0,hV),e(hV,Har),e(k0,Uar),e(H,Jar),e(H,S0),e(S0,lpe),e(lpe,Yar),e(S0,Kar),e(S0,uV),e(uV,Zar),e(S0,enr),e(uo,onr),e(uo,ipe),e(ipe,rnr),e(uo,tnr),g(iA,uo,null),v(c,QRe,_),v(c,bc,_),e(bc,R0),e(R0,dpe),g(dA,dpe,null),e(bc,anr),e(bc,cpe),e(cpe,nnr),v(c,WRe,_),v(c,Tr,_),g(cA,Tr,null),e(Tr,snr),e(Tr,Fc),e(Fc,lnr),e(Fc,pV),e(pV,inr),e(Fc,dnr),e(Fc,_V),e(_V,cnr),e(Fc,fnr),e(Tr,mnr),e(Tr,fA),e(fA,gnr),e(fA,fpe),e(fpe,hnr),e(fA,unr),e(Tr,pnr),e(Tr,ut),g(mA,ut,null),e(ut,_nr),e(ut,mpe),e(mpe,vnr),e(ut,bnr),e(ut,Tc),e(Tc,Fnr),e(Tc,gpe),e(gpe,Tnr),e(Tc,Mnr),e(Tc,vV),e(vV,Enr),e(Tc,Cnr),e(ut,wnr),e(ut,hpe),e(hpe,Anr),e(ut,ynr),g(gA,ut,null),e(Tr,Lnr),e(Tr,po),g(hA,po,null),e(po,xnr),e(po,upe),e(upe,knr),e(po,Snr),e(po,vn),e(vn,Rnr),e(vn,ppe),e(ppe,Bnr),e(vn,Pnr),e(vn,_pe),e(_pe,$nr),e(vn,Inr),e(vn,vpe),e(vpe,qnr),e(vn,Nnr),e(po,jnr),e(po,ce),e(ce,B0),e(B0,bpe),e(bpe,Dnr),e(B0,Gnr),e(B0,bV),e(bV,Onr),e(B0,Vnr),e(ce,Xnr),e(ce,P0),e(P0,Fpe),e(Fpe,znr),e(P0,Qnr),e(P0,FV),e(FV,Wnr),e(P0,Hnr),e(ce,Unr),e(ce,$0),e($0,Tpe),e(Tpe,Jnr),e($0,Ynr),e($0,TV),e(TV,Knr),e($0,Znr),e(ce,esr),e(ce,I0),e(I0,Mpe),e(Mpe,osr),e(I0,rsr),e(I0,MV),e(MV,tsr),e(I0,asr),e(ce,nsr),e(ce,q0),e(q0,Epe),e(Epe,ssr),e(q0,lsr),e(q0,EV),e(EV,isr),e(q0,dsr),e(ce,csr),e(ce,N0),e(N0,Cpe),e(Cpe,fsr),e(N0,msr),e(N0,CV),e(CV,gsr),e(N0,hsr),e(ce,usr),e(ce,j0),e(j0,wpe),e(wpe,psr),e(j0,_sr),e(j0,wV),e(wV,vsr),e(j0,bsr),e(ce,Fsr),e(ce,D0),e(D0,Ape),e(Ape,Tsr),e(D0,Msr),e(D0,AV),e(AV,Esr),e(D0,Csr),e(ce,wsr),e(ce,G0),e(G0,ype),e(ype,Asr),e(G0,ysr),e(G0,yV),e(yV,Lsr),e(G0,xsr),e(ce,ksr),e(ce,O0),e(O0,Lpe),e(Lpe,Ssr),e(O0,Rsr),e(O0,LV),e(LV,Bsr),e(O0,Psr),e(ce,$sr),e(ce,V0),e(V0,xpe),e(xpe,Isr),e(V0,qsr),e(V0,xV),e(xV,Nsr),e(V0,jsr),e(ce,Dsr),e(ce,X0),e(X0,kpe),e(kpe,Gsr),e(X0,Osr),e(X0,kV),e(kV,Vsr),e(X0,Xsr),e(po,zsr),e(po,Spe),e(Spe,Qsr),e(po,Wsr),g(uA,po,null),v(c,HRe,_),v(c,Mc,_),e(Mc,z0),e(z0,Rpe),g(pA,Rpe,null),e(Mc,Hsr),e(Mc,Bpe),e(Bpe,Usr),v(c,URe,_),v(c,Mr,_),g(_A,Mr,null),e(Mr,Jsr),e(Mr,Ec),e(Ec,Ysr),e(Ec,SV),e(SV,Ksr),e(Ec,Zsr),e(Ec,RV),e(RV,elr),e(Ec,olr),e(Mr,rlr),e(Mr,vA),e(vA,tlr),e(vA,Ppe),e(Ppe,alr),e(vA,nlr),e(Mr,slr),e(Mr,pt),g(bA,pt,null),e(pt,llr),e(pt,$pe),e($pe,ilr),e(pt,dlr),e(pt,Cc),e(Cc,clr),e(Cc,Ipe),e(Ipe,flr),e(Cc,mlr),e(Cc,BV),e(BV,glr),e(Cc,hlr),e(pt,ulr),e(pt,qpe),e(qpe,plr),e(pt,_lr),g(FA,pt,null),e(Mr,vlr),e(Mr,_o),g(TA,_o,null),e(_o,blr),e(_o,Npe),e(Npe,Flr),e(_o,Tlr),e(_o,bn),e(bn,Mlr),e(bn,jpe),e(jpe,Elr),e(bn,Clr),e(bn,Dpe),e(Dpe,wlr),e(bn,Alr),e(bn,Gpe),e(Gpe,ylr),e(bn,Llr),e(_o,xlr),e(_o,MA),e(MA,Q0),e(Q0,Ope),e(Ope,klr),e(Q0,Slr),e(Q0,PV),e(PV,Rlr),e(Q0,Blr),e(MA,Plr),e(MA,W0),e(W0,Vpe),e(Vpe,$lr),e(W0,Ilr),e(W0,$V),e($V,qlr),e(W0,Nlr),e(_o,jlr),e(_o,Xpe),e(Xpe,Dlr),e(_o,Glr),g(EA,_o,null),v(c,JRe,_),v(c,wc,_),e(wc,H0),e(H0,zpe),g(CA,zpe,null),e(wc,Olr),e(wc,Qpe),e(Qpe,Vlr),v(c,YRe,_),v(c,Er,_),g(wA,Er,null),e(Er,Xlr),e(Er,Ac),e(Ac,zlr),e(Ac,IV),e(IV,Qlr),e(Ac,Wlr),e(Ac,qV),e(qV,Hlr),e(Ac,Ulr),e(Er,Jlr),e(Er,AA),e(AA,Ylr),e(AA,Wpe),e(Wpe,Klr),e(AA,Zlr),e(Er,eir),e(Er,_t),g(yA,_t,null),e(_t,oir),e(_t,Hpe),e(Hpe,rir),e(_t,tir),e(_t,yc),e(yc,air),e(yc,Upe),e(Upe,nir),e(yc,sir),e(yc,NV),e(NV,lir),e(yc,iir),e(_t,dir),e(_t,Jpe),e(Jpe,cir),e(_t,fir),g(LA,_t,null),e(Er,mir),e(Er,vo),g(xA,vo,null),e(vo,gir),e(vo,Ype),e(Ype,hir),e(vo,uir),e(vo,Fn),e(Fn,pir),e(Fn,Kpe),e(Kpe,_ir),e(Fn,vir),e(Fn,Zpe),e(Zpe,bir),e(Fn,Fir),e(Fn,e_e),e(e_e,Tir),e(Fn,Mir),e(vo,Eir),e(vo,J),e(J,U0),e(U0,o_e),e(o_e,Cir),e(U0,wir),e(U0,jV),e(jV,Air),e(U0,yir),e(J,Lir),e(J,J0),e(J0,r_e),e(r_e,xir),e(J0,kir),e(J0,DV),e(DV,Sir),e(J0,Rir),e(J,Bir),e(J,Y0),e(Y0,t_e),e(t_e,Pir),e(Y0,$ir),e(Y0,GV),e(GV,Iir),e(Y0,qir),e(J,Nir),e(J,K0),e(K0,a_e),e(a_e,jir),e(K0,Dir),e(K0,OV),e(OV,Gir),e(K0,Oir),e(J,Vir),e(J,Z0),e(Z0,n_e),e(n_e,Xir),e(Z0,zir),e(Z0,VV),e(VV,Qir),e(Z0,Wir),e(J,Hir),e(J,eT),e(eT,s_e),e(s_e,Uir),e(eT,Jir),e(eT,XV),e(XV,Yir),e(eT,Kir),e(J,Zir),e(J,oT),e(oT,l_e),e(l_e,edr),e(oT,odr),e(oT,zV),e(zV,rdr),e(oT,tdr),e(J,adr),e(J,rT),e(rT,i_e),e(i_e,ndr),e(rT,sdr),e(rT,QV),e(QV,ldr),e(rT,idr),e(J,ddr),e(J,tT),e(tT,d_e),e(d_e,cdr),e(tT,fdr),e(tT,WV),e(WV,mdr),e(tT,gdr),e(J,hdr),e(J,aT),e(aT,c_e),e(c_e,udr),e(aT,pdr),e(aT,HV),e(HV,_dr),e(aT,vdr),e(J,bdr),e(J,nT),e(nT,f_e),e(f_e,Fdr),e(nT,Tdr),e(nT,UV),e(UV,Mdr),e(nT,Edr),e(J,Cdr),e(J,sT),e(sT,m_e),e(m_e,wdr),e(sT,Adr),e(sT,JV),e(JV,ydr),e(sT,Ldr),e(J,xdr),e(J,lT),e(lT,g_e),e(g_e,kdr),e(lT,Sdr),e(lT,YV),e(YV,Rdr),e(lT,Bdr),e(J,Pdr),e(J,iT),e(iT,h_e),e(h_e,$dr),e(iT,Idr),e(iT,KV),e(KV,qdr),e(iT,Ndr),e(J,jdr),e(J,dT),e(dT,u_e),e(u_e,Ddr),e(dT,Gdr),e(dT,ZV),e(ZV,Odr),e(dT,Vdr),e(J,Xdr),e(J,cT),e(cT,p_e),e(p_e,zdr),e(cT,Qdr),e(cT,eX),e(eX,Wdr),e(cT,Hdr),e(J,Udr),e(J,fT),e(fT,__e),e(__e,Jdr),e(fT,Ydr),e(fT,oX),e(oX,Kdr),e(fT,Zdr),e(J,ecr),e(J,mT),e(mT,v_e),e(v_e,ocr),e(mT,rcr),e(mT,rX),e(rX,tcr),e(mT,acr),e(J,ncr),e(J,gT),e(gT,b_e),e(b_e,scr),e(gT,lcr),e(gT,tX),e(tX,icr),e(gT,dcr),e(J,ccr),e(J,hT),e(hT,F_e),e(F_e,fcr),e(hT,mcr),e(hT,aX),e(aX,gcr),e(hT,hcr),e(vo,ucr),e(vo,T_e),e(T_e,pcr),e(vo,_cr),g(kA,vo,null),v(c,KRe,_),v(c,Lc,_),e(Lc,uT),e(uT,M_e),g(SA,M_e,null),e(Lc,vcr),e(Lc,E_e),e(E_e,bcr),v(c,ZRe,_),v(c,Cr,_),g(RA,Cr,null),e(Cr,Fcr),e(Cr,xc),e(xc,Tcr),e(xc,nX),e(nX,Mcr),e(xc,Ecr),e(xc,sX),e(sX,Ccr),e(xc,wcr),e(Cr,Acr),e(Cr,BA),e(BA,ycr),e(BA,C_e),e(C_e,Lcr),e(BA,xcr),e(Cr,kcr),e(Cr,vt),g(PA,vt,null),e(vt,Scr),e(vt,w_e),e(w_e,Rcr),e(vt,Bcr),e(vt,kc),e(kc,Pcr),e(kc,A_e),e(A_e,$cr),e(kc,Icr),e(kc,lX),e(lX,qcr),e(kc,Ncr),e(vt,jcr),e(vt,y_e),e(y_e,Dcr),e(vt,Gcr),g($A,vt,null),e(Cr,Ocr),e(Cr,bo),g(IA,bo,null),e(bo,Vcr),e(bo,L_e),e(L_e,Xcr),e(bo,zcr),e(bo,Tn),e(Tn,Qcr),e(Tn,x_e),e(x_e,Wcr),e(Tn,Hcr),e(Tn,k_e),e(k_e,Ucr),e(Tn,Jcr),e(Tn,S_e),e(S_e,Ycr),e(Tn,Kcr),e(bo,Zcr),e(bo,_e),e(_e,pT),e(pT,R_e),e(R_e,efr),e(pT,ofr),e(pT,iX),e(iX,rfr),e(pT,tfr),e(_e,afr),e(_e,_T),e(_T,B_e),e(B_e,nfr),e(_T,sfr),e(_T,dX),e(dX,lfr),e(_T,ifr),e(_e,dfr),e(_e,vT),e(vT,P_e),e(P_e,cfr),e(vT,ffr),e(vT,cX),e(cX,mfr),e(vT,gfr),e(_e,hfr),e(_e,bT),e(bT,$_e),e($_e,ufr),e(bT,pfr),e(bT,fX),e(fX,_fr),e(bT,vfr),e(_e,bfr),e(_e,FT),e(FT,I_e),e(I_e,Ffr),e(FT,Tfr),e(FT,mX),e(mX,Mfr),e(FT,Efr),e(_e,Cfr),e(_e,TT),e(TT,q_e),e(q_e,wfr),e(TT,Afr),e(TT,gX),e(gX,yfr),e(TT,Lfr),e(_e,xfr),e(_e,MT),e(MT,N_e),e(N_e,kfr),e(MT,Sfr),e(MT,hX),e(hX,Rfr),e(MT,Bfr),e(_e,Pfr),e(_e,ET),e(ET,j_e),e(j_e,$fr),e(ET,Ifr),e(ET,uX),e(uX,qfr),e(ET,Nfr),e(_e,jfr),e(_e,CT),e(CT,D_e),e(D_e,Dfr),e(CT,Gfr),e(CT,pX),e(pX,Ofr),e(CT,Vfr),e(_e,Xfr),e(_e,wT),e(wT,G_e),e(G_e,zfr),e(wT,Qfr),e(wT,_X),e(_X,Wfr),e(wT,Hfr),e(bo,Ufr),e(bo,O_e),e(O_e,Jfr),e(bo,Yfr),g(qA,bo,null),v(c,eBe,_),v(c,Sc,_),e(Sc,AT),e(AT,V_e),g(NA,V_e,null),e(Sc,Kfr),e(Sc,X_e),e(X_e,Zfr),v(c,oBe,_),v(c,wr,_),g(jA,wr,null),e(wr,emr),e(wr,Rc),e(Rc,omr),e(Rc,vX),e(vX,rmr),e(Rc,tmr),e(Rc,bX),e(bX,amr),e(Rc,nmr),e(wr,smr),e(wr,DA),e(DA,lmr),e(DA,z_e),e(z_e,imr),e(DA,dmr),e(wr,cmr),e(wr,bt),g(GA,bt,null),e(bt,fmr),e(bt,Q_e),e(Q_e,mmr),e(bt,gmr),e(bt,Bc),e(Bc,hmr),e(Bc,W_e),e(W_e,umr),e(Bc,pmr),e(Bc,FX),e(FX,_mr),e(Bc,vmr),e(bt,bmr),e(bt,H_e),e(H_e,Fmr),e(bt,Tmr),g(OA,bt,null),e(wr,Mmr),e(wr,Fo),g(VA,Fo,null),e(Fo,Emr),e(Fo,U_e),e(U_e,Cmr),e(Fo,wmr),e(Fo,Mn),e(Mn,Amr),e(Mn,J_e),e(J_e,ymr),e(Mn,Lmr),e(Mn,Y_e),e(Y_e,xmr),e(Mn,kmr),e(Mn,K_e),e(K_e,Smr),e(Mn,Rmr),e(Fo,Bmr),e(Fo,V),e(V,yT),e(yT,Z_e),e(Z_e,Pmr),e(yT,$mr),e(yT,TX),e(TX,Imr),e(yT,qmr),e(V,Nmr),e(V,LT),e(LT,eve),e(eve,jmr),e(LT,Dmr),e(LT,MX),e(MX,Gmr),e(LT,Omr),e(V,Vmr),e(V,xT),e(xT,ove),e(ove,Xmr),e(xT,zmr),e(xT,EX),e(EX,Qmr),e(xT,Wmr),e(V,Hmr),e(V,kT),e(kT,rve),e(rve,Umr),e(kT,Jmr),e(kT,CX),e(CX,Ymr),e(kT,Kmr),e(V,Zmr),e(V,ST),e(ST,tve),e(tve,egr),e(ST,ogr),e(ST,wX),e(wX,rgr),e(ST,tgr),e(V,agr),e(V,RT),e(RT,ave),e(ave,ngr),e(RT,sgr),e(RT,AX),e(AX,lgr),e(RT,igr),e(V,dgr),e(V,BT),e(BT,nve),e(nve,cgr),e(BT,fgr),e(BT,yX),e(yX,mgr),e(BT,ggr),e(V,hgr),e(V,PT),e(PT,sve),e(sve,ugr),e(PT,pgr),e(PT,LX),e(LX,_gr),e(PT,vgr),e(V,bgr),e(V,$T),e($T,lve),e(lve,Fgr),e($T,Tgr),e($T,xX),e(xX,Mgr),e($T,Egr),e(V,Cgr),e(V,IT),e(IT,ive),e(ive,wgr),e(IT,Agr),e(IT,kX),e(kX,ygr),e(IT,Lgr),e(V,xgr),e(V,qT),e(qT,dve),e(dve,kgr),e(qT,Sgr),e(qT,SX),e(SX,Rgr),e(qT,Bgr),e(V,Pgr),e(V,NT),e(NT,cve),e(cve,$gr),e(NT,Igr),e(NT,RX),e(RX,qgr),e(NT,Ngr),e(V,jgr),e(V,jT),e(jT,fve),e(fve,Dgr),e(jT,Ggr),e(jT,BX),e(BX,Ogr),e(jT,Vgr),e(V,Xgr),e(V,DT),e(DT,mve),e(mve,zgr),e(DT,Qgr),e(DT,PX),e(PX,Wgr),e(DT,Hgr),e(V,Ugr),e(V,GT),e(GT,gve),e(gve,Jgr),e(GT,Ygr),e(GT,$X),e($X,Kgr),e(GT,Zgr),e(V,ehr),e(V,OT),e(OT,hve),e(hve,ohr),e(OT,rhr),e(OT,IX),e(IX,thr),e(OT,ahr),e(V,nhr),e(V,VT),e(VT,uve),e(uve,shr),e(VT,lhr),e(VT,qX),e(qX,ihr),e(VT,dhr),e(V,chr),e(V,XT),e(XT,pve),e(pve,fhr),e(XT,mhr),e(XT,NX),e(NX,ghr),e(XT,hhr),e(V,uhr),e(V,zT),e(zT,_ve),e(_ve,phr),e(zT,_hr),e(zT,jX),e(jX,vhr),e(zT,bhr),e(V,Fhr),e(V,QT),e(QT,vve),e(vve,Thr),e(QT,Mhr),e(QT,DX),e(DX,Ehr),e(QT,Chr),e(V,whr),e(V,WT),e(WT,bve),e(bve,Ahr),e(WT,yhr),e(WT,GX),e(GX,Lhr),e(WT,xhr),e(V,khr),e(V,HT),e(HT,Fve),e(Fve,Shr),e(HT,Rhr),e(HT,OX),e(OX,Bhr),e(HT,Phr),e(V,$hr),e(V,UT),e(UT,Tve),e(Tve,Ihr),e(UT,qhr),e(UT,VX),e(VX,Nhr),e(UT,jhr),e(V,Dhr),e(V,JT),e(JT,Mve),e(Mve,Ghr),e(JT,Ohr),e(JT,XX),e(XX,Vhr),e(JT,Xhr),e(V,zhr),e(V,YT),e(YT,Eve),e(Eve,Qhr),e(YT,Whr),e(YT,zX),e(zX,Hhr),e(YT,Uhr),e(V,Jhr),e(V,KT),e(KT,Cve),e(Cve,Yhr),e(KT,Khr),e(KT,QX),e(QX,Zhr),e(KT,eur),e(Fo,our),e(Fo,wve),e(wve,rur),e(Fo,tur),g(XA,Fo,null),v(c,rBe,_),v(c,Pc,_),e(Pc,ZT),e(ZT,Ave),g(zA,Ave,null),e(Pc,aur),e(Pc,yve),e(yve,nur),v(c,tBe,_),v(c,Ar,_),g(QA,Ar,null),e(Ar,sur),e(Ar,$c),e($c,lur),e($c,WX),e(WX,iur),e($c,dur),e($c,HX),e(HX,cur),e($c,fur),e(Ar,mur),e(Ar,WA),e(WA,gur),e(WA,Lve),e(Lve,hur),e(WA,uur),e(Ar,pur),e(Ar,Ft),g(HA,Ft,null),e(Ft,_ur),e(Ft,xve),e(xve,vur),e(Ft,bur),e(Ft,Ic),e(Ic,Fur),e(Ic,kve),e(kve,Tur),e(Ic,Mur),e(Ic,UX),e(UX,Eur),e(Ic,Cur),e(Ft,wur),e(Ft,Sve),e(Sve,Aur),e(Ft,yur),g(UA,Ft,null),e(Ar,Lur),e(Ar,To),g(JA,To,null),e(To,xur),e(To,Rve),e(Rve,kur),e(To,Sur),e(To,En),e(En,Rur),e(En,Bve),e(Bve,Bur),e(En,Pur),e(En,Pve),e(Pve,$ur),e(En,Iur),e(En,$ve),e($ve,qur),e(En,Nur),e(To,jur),e(To,ae),e(ae,e8),e(e8,Ive),e(Ive,Dur),e(e8,Gur),e(e8,JX),e(JX,Our),e(e8,Vur),e(ae,Xur),e(ae,o8),e(o8,qve),e(qve,zur),e(o8,Qur),e(o8,YX),e(YX,Wur),e(o8,Hur),e(ae,Uur),e(ae,r8),e(r8,Nve),e(Nve,Jur),e(r8,Yur),e(r8,KX),e(KX,Kur),e(r8,Zur),e(ae,epr),e(ae,t8),e(t8,jve),e(jve,opr),e(t8,rpr),e(t8,ZX),e(ZX,tpr),e(t8,apr),e(ae,npr),e(ae,a8),e(a8,Dve),e(Dve,spr),e(a8,lpr),e(a8,ez),e(ez,ipr),e(a8,dpr),e(ae,cpr),e(ae,n8),e(n8,Gve),e(Gve,fpr),e(n8,mpr),e(n8,oz),e(oz,gpr),e(n8,hpr),e(ae,upr),e(ae,s8),e(s8,Ove),e(Ove,ppr),e(s8,_pr),e(s8,rz),e(rz,vpr),e(s8,bpr),e(ae,Fpr),e(ae,l8),e(l8,Vve),e(Vve,Tpr),e(l8,Mpr),e(l8,tz),e(tz,Epr),e(l8,Cpr),e(ae,wpr),e(ae,i8),e(i8,Xve),e(Xve,Apr),e(i8,ypr),e(i8,az),e(az,Lpr),e(i8,xpr),e(ae,kpr),e(ae,d8),e(d8,zve),e(zve,Spr),e(d8,Rpr),e(d8,nz),e(nz,Bpr),e(d8,Ppr),e(ae,$pr),e(ae,c8),e(c8,Qve),e(Qve,Ipr),e(c8,qpr),e(c8,sz),e(sz,Npr),e(c8,jpr),e(ae,Dpr),e(ae,f8),e(f8,Wve),e(Wve,Gpr),e(f8,Opr),e(f8,lz),e(lz,Vpr),e(f8,Xpr),e(ae,zpr),e(ae,m8),e(m8,Hve),e(Hve,Qpr),e(m8,Wpr),e(m8,iz),e(iz,Hpr),e(m8,Upr),e(ae,Jpr),e(ae,g8),e(g8,Uve),e(Uve,Ypr),e(g8,Kpr),e(g8,dz),e(dz,Zpr),e(g8,e_r),e(ae,o_r),e(ae,h8),e(h8,Jve),e(Jve,r_r),e(h8,t_r),e(h8,cz),e(cz,a_r),e(h8,n_r),e(ae,s_r),e(ae,u8),e(u8,Yve),e(Yve,l_r),e(u8,i_r),e(u8,fz),e(fz,d_r),e(u8,c_r),e(ae,f_r),e(ae,p8),e(p8,Kve),e(Kve,m_r),e(p8,g_r),e(p8,mz),e(mz,h_r),e(p8,u_r),e(To,p_r),e(To,Zve),e(Zve,__r),e(To,v_r),g(YA,To,null),v(c,aBe,_),v(c,qc,_),e(qc,_8),e(_8,e1e),g(KA,e1e,null),e(qc,b_r),e(qc,o1e),e(o1e,F_r),v(c,nBe,_),v(c,yr,_),g(ZA,yr,null),e(yr,T_r),e(yr,Nc),e(Nc,M_r),e(Nc,gz),e(gz,E_r),e(Nc,C_r),e(Nc,hz),e(hz,w_r),e(Nc,A_r),e(yr,y_r),e(yr,ey),e(ey,L_r),e(ey,r1e),e(r1e,x_r),e(ey,k_r),e(yr,S_r),e(yr,Tt),g(oy,Tt,null),e(Tt,R_r),e(Tt,t1e),e(t1e,B_r),e(Tt,P_r),e(Tt,jc),e(jc,$_r),e(jc,a1e),e(a1e,I_r),e(jc,q_r),e(jc,uz),e(uz,N_r),e(jc,j_r),e(Tt,D_r),e(Tt,n1e),e(n1e,G_r),e(Tt,O_r),g(ry,Tt,null),e(yr,V_r),e(yr,Mo),g(ty,Mo,null),e(Mo,X_r),e(Mo,s1e),e(s1e,z_r),e(Mo,Q_r),e(Mo,Cn),e(Cn,W_r),e(Cn,l1e),e(l1e,H_r),e(Cn,U_r),e(Cn,i1e),e(i1e,J_r),e(Cn,Y_r),e(Cn,d1e),e(d1e,K_r),e(Cn,Z_r),e(Mo,evr),e(Mo,c1e),e(c1e,v8),e(v8,f1e),e(f1e,ovr),e(v8,rvr),e(v8,pz),e(pz,tvr),e(v8,avr),e(Mo,nvr),e(Mo,m1e),e(m1e,svr),e(Mo,lvr),g(ay,Mo,null),v(c,sBe,_),v(c,Dc,_),e(Dc,b8),e(b8,g1e),g(ny,g1e,null),e(Dc,ivr),e(Dc,h1e),e(h1e,dvr),v(c,lBe,_),v(c,Lr,_),g(sy,Lr,null),e(Lr,cvr),e(Lr,Gc),e(Gc,fvr),e(Gc,_z),e(_z,mvr),e(Gc,gvr),e(Gc,vz),e(vz,hvr),e(Gc,uvr),e(Lr,pvr),e(Lr,ly),e(ly,_vr),e(ly,u1e),e(u1e,vvr),e(ly,bvr),e(Lr,Fvr),e(Lr,Mt),g(iy,Mt,null),e(Mt,Tvr),e(Mt,p1e),e(p1e,Mvr),e(Mt,Evr),e(Mt,Oc),e(Oc,Cvr),e(Oc,_1e),e(_1e,wvr),e(Oc,Avr),e(Oc,bz),e(bz,yvr),e(Oc,Lvr),e(Mt,xvr),e(Mt,v1e),e(v1e,kvr),e(Mt,Svr),g(dy,Mt,null),e(Lr,Rvr),e(Lr,Eo),g(cy,Eo,null),e(Eo,Bvr),e(Eo,b1e),e(b1e,Pvr),e(Eo,$vr),e(Eo,wn),e(wn,Ivr),e(wn,F1e),e(F1e,qvr),e(wn,Nvr),e(wn,T1e),e(T1e,jvr),e(wn,Dvr),e(wn,M1e),e(M1e,Gvr),e(wn,Ovr),e(Eo,Vvr),e(Eo,Y),e(Y,F8),e(F8,E1e),e(E1e,Xvr),e(F8,zvr),e(F8,Fz),e(Fz,Qvr),e(F8,Wvr),e(Y,Hvr),e(Y,T8),e(T8,C1e),e(C1e,Uvr),e(T8,Jvr),e(T8,Tz),e(Tz,Yvr),e(T8,Kvr),e(Y,Zvr),e(Y,M8),e(M8,w1e),e(w1e,e1r),e(M8,o1r),e(M8,Mz),e(Mz,r1r),e(M8,t1r),e(Y,a1r),e(Y,E8),e(E8,A1e),e(A1e,n1r),e(E8,s1r),e(E8,Ez),e(Ez,l1r),e(E8,i1r),e(Y,d1r),e(Y,C8),e(C8,y1e),e(y1e,c1r),e(C8,f1r),e(C8,Cz),e(Cz,m1r),e(C8,g1r),e(Y,h1r),e(Y,w8),e(w8,L1e),e(L1e,u1r),e(w8,p1r),e(w8,wz),e(wz,_1r),e(w8,v1r),e(Y,b1r),e(Y,A8),e(A8,x1e),e(x1e,F1r),e(A8,T1r),e(A8,Az),e(Az,M1r),e(A8,E1r),e(Y,C1r),e(Y,y8),e(y8,k1e),e(k1e,w1r),e(y8,A1r),e(y8,yz),e(yz,y1r),e(y8,L1r),e(Y,x1r),e(Y,L8),e(L8,S1e),e(S1e,k1r),e(L8,S1r),e(L8,Lz),e(Lz,R1r),e(L8,B1r),e(Y,P1r),e(Y,x8),e(x8,R1e),e(R1e,$1r),e(x8,I1r),e(x8,xz),e(xz,q1r),e(x8,N1r),e(Y,j1r),e(Y,k8),e(k8,B1e),e(B1e,D1r),e(k8,G1r),e(k8,kz),e(kz,O1r),e(k8,V1r),e(Y,X1r),e(Y,S8),e(S8,P1e),e(P1e,z1r),e(S8,Q1r),e(S8,Sz),e(Sz,W1r),e(S8,H1r),e(Y,U1r),e(Y,R8),e(R8,$1e),e($1e,J1r),e(R8,Y1r),e(R8,Rz),e(Rz,K1r),e(R8,Z1r),e(Y,e4r),e(Y,B8),e(B8,I1e),e(I1e,o4r),e(B8,r4r),e(B8,Bz),e(Bz,t4r),e(B8,a4r),e(Y,n4r),e(Y,P8),e(P8,q1e),e(q1e,s4r),e(P8,l4r),e(P8,Pz),e(Pz,i4r),e(P8,d4r),e(Y,c4r),e(Y,$8),e($8,N1e),e(N1e,f4r),e($8,m4r),e($8,$z),e($z,g4r),e($8,h4r),e(Y,u4r),e(Y,I8),e(I8,j1e),e(j1e,p4r),e(I8,_4r),e(I8,Iz),e(Iz,v4r),e(I8,b4r),e(Y,F4r),e(Y,q8),e(q8,D1e),e(D1e,T4r),e(q8,M4r),e(q8,qz),e(qz,E4r),e(q8,C4r),e(Y,w4r),e(Y,N8),e(N8,G1e),e(G1e,A4r),e(N8,y4r),e(N8,Nz),e(Nz,L4r),e(N8,x4r),e(Y,k4r),e(Y,j8),e(j8,O1e),e(O1e,S4r),e(j8,R4r),e(j8,jz),e(jz,B4r),e(j8,P4r),e(Eo,$4r),e(Eo,V1e),e(V1e,I4r),e(Eo,q4r),g(fy,Eo,null),v(c,iBe,_),v(c,Vc,_),e(Vc,D8),e(D8,X1e),g(my,X1e,null),e(Vc,N4r),e(Vc,z1e),e(z1e,j4r),v(c,dBe,_),v(c,xr,_),g(gy,xr,null),e(xr,D4r),e(xr,Xc),e(Xc,G4r),e(Xc,Dz),e(Dz,O4r),e(Xc,V4r),e(Xc,Gz),e(Gz,X4r),e(Xc,z4r),e(xr,Q4r),e(xr,hy),e(hy,W4r),e(hy,Q1e),e(Q1e,H4r),e(hy,U4r),e(xr,J4r),e(xr,Et),g(uy,Et,null),e(Et,Y4r),e(Et,W1e),e(W1e,K4r),e(Et,Z4r),e(Et,zc),e(zc,ebr),e(zc,H1e),e(H1e,obr),e(zc,rbr),e(zc,Oz),e(Oz,tbr),e(zc,abr),e(Et,nbr),e(Et,U1e),e(U1e,sbr),e(Et,lbr),g(py,Et,null),e(xr,ibr),e(xr,Co),g(_y,Co,null),e(Co,dbr),e(Co,J1e),e(J1e,cbr),e(Co,fbr),e(Co,An),e(An,mbr),e(An,Y1e),e(Y1e,gbr),e(An,hbr),e(An,K1e),e(K1e,ubr),e(An,pbr),e(An,Z1e),e(Z1e,_br),e(An,vbr),e(Co,bbr),e(Co,K),e(K,G8),e(G8,e4e),e(e4e,Fbr),e(G8,Tbr),e(G8,Vz),e(Vz,Mbr),e(G8,Ebr),e(K,Cbr),e(K,O8),e(O8,o4e),e(o4e,wbr),e(O8,Abr),e(O8,Xz),e(Xz,ybr),e(O8,Lbr),e(K,xbr),e(K,V8),e(V8,r4e),e(r4e,kbr),e(V8,Sbr),e(V8,zz),e(zz,Rbr),e(V8,Bbr),e(K,Pbr),e(K,X8),e(X8,t4e),e(t4e,$br),e(X8,Ibr),e(X8,Qz),e(Qz,qbr),e(X8,Nbr),e(K,jbr),e(K,z8),e(z8,a4e),e(a4e,Dbr),e(z8,Gbr),e(z8,Wz),e(Wz,Obr),e(z8,Vbr),e(K,Xbr),e(K,Q8),e(Q8,n4e),e(n4e,zbr),e(Q8,Qbr),e(Q8,Hz),e(Hz,Wbr),e(Q8,Hbr),e(K,Ubr),e(K,W8),e(W8,s4e),e(s4e,Jbr),e(W8,Ybr),e(W8,Uz),e(Uz,Kbr),e(W8,Zbr),e(K,e2r),e(K,H8),e(H8,l4e),e(l4e,o2r),e(H8,r2r),e(H8,Jz),e(Jz,t2r),e(H8,a2r),e(K,n2r),e(K,U8),e(U8,i4e),e(i4e,s2r),e(U8,l2r),e(U8,Yz),e(Yz,i2r),e(U8,d2r),e(K,c2r),e(K,J8),e(J8,d4e),e(d4e,f2r),e(J8,m2r),e(J8,Kz),e(Kz,g2r),e(J8,h2r),e(K,u2r),e(K,Y8),e(Y8,c4e),e(c4e,p2r),e(Y8,_2r),e(Y8,Zz),e(Zz,v2r),e(Y8,b2r),e(K,F2r),e(K,K8),e(K8,f4e),e(f4e,T2r),e(K8,M2r),e(K8,eQ),e(eQ,E2r),e(K8,C2r),e(K,w2r),e(K,Z8),e(Z8,m4e),e(m4e,A2r),e(Z8,y2r),e(Z8,oQ),e(oQ,L2r),e(Z8,x2r),e(K,k2r),e(K,eM),e(eM,g4e),e(g4e,S2r),e(eM,R2r),e(eM,rQ),e(rQ,B2r),e(eM,P2r),e(K,$2r),e(K,oM),e(oM,h4e),e(h4e,I2r),e(oM,q2r),e(oM,tQ),e(tQ,N2r),e(oM,j2r),e(K,D2r),e(K,rM),e(rM,u4e),e(u4e,G2r),e(rM,O2r),e(rM,aQ),e(aQ,V2r),e(rM,X2r),e(K,z2r),e(K,tM),e(tM,p4e),e(p4e,Q2r),e(tM,W2r),e(tM,nQ),e(nQ,H2r),e(tM,U2r),e(K,J2r),e(K,aM),e(aM,_4e),e(_4e,Y2r),e(aM,K2r),e(aM,sQ),e(sQ,Z2r),e(aM,eFr),e(K,oFr),e(K,nM),e(nM,v4e),e(v4e,rFr),e(nM,tFr),e(nM,lQ),e(lQ,aFr),e(nM,nFr),e(K,sFr),e(K,sM),e(sM,b4e),e(b4e,lFr),e(sM,iFr),e(sM,iQ),e(iQ,dFr),e(sM,cFr),e(Co,fFr),e(Co,F4e),e(F4e,mFr),e(Co,gFr),g(vy,Co,null),v(c,cBe,_),v(c,Qc,_),e(Qc,lM),e(lM,T4e),g(by,T4e,null),e(Qc,hFr),e(Qc,M4e),e(M4e,uFr),v(c,fBe,_),v(c,kr,_),g(Fy,kr,null),e(kr,pFr),e(kr,Wc),e(Wc,_Fr),e(Wc,dQ),e(dQ,vFr),e(Wc,bFr),e(Wc,cQ),e(cQ,FFr),e(Wc,TFr),e(kr,MFr),e(kr,Ty),e(Ty,EFr),e(Ty,E4e),e(E4e,CFr),e(Ty,wFr),e(kr,AFr),e(kr,Ct),g(My,Ct,null),e(Ct,yFr),e(Ct,C4e),e(C4e,LFr),e(Ct,xFr),e(Ct,Hc),e(Hc,kFr),e(Hc,w4e),e(w4e,SFr),e(Hc,RFr),e(Hc,fQ),e(fQ,BFr),e(Hc,PFr),e(Ct,$Fr),e(Ct,A4e),e(A4e,IFr),e(Ct,qFr),g(Ey,Ct,null),e(kr,NFr),e(kr,wo),g(Cy,wo,null),e(wo,jFr),e(wo,y4e),e(y4e,DFr),e(wo,GFr),e(wo,yn),e(yn,OFr),e(yn,L4e),e(L4e,VFr),e(yn,XFr),e(yn,x4e),e(x4e,zFr),e(yn,QFr),e(yn,k4e),e(k4e,WFr),e(yn,HFr),e(wo,UFr),e(wo,S4e),e(S4e,iM),e(iM,R4e),e(R4e,JFr),e(iM,YFr),e(iM,mQ),e(mQ,KFr),e(iM,ZFr),e(wo,e0r),e(wo,B4e),e(B4e,o0r),e(wo,r0r),g(wy,wo,null),v(c,mBe,_),v(c,Uc,_),e(Uc,dM),e(dM,P4e),g(Ay,P4e,null),e(Uc,t0r),e(Uc,$4e),e($4e,a0r),v(c,gBe,_),v(c,Sr,_),g(yy,Sr,null),e(Sr,n0r),e(Sr,Jc),e(Jc,s0r),e(Jc,gQ),e(gQ,l0r),e(Jc,i0r),e(Jc,hQ),e(hQ,d0r),e(Jc,c0r),e(Sr,f0r),e(Sr,Ly),e(Ly,m0r),e(Ly,I4e),e(I4e,g0r),e(Ly,h0r),e(Sr,u0r),e(Sr,wt),g(xy,wt,null),e(wt,p0r),e(wt,q4e),e(q4e,_0r),e(wt,v0r),e(wt,Yc),e(Yc,b0r),e(Yc,N4e),e(N4e,F0r),e(Yc,T0r),e(Yc,uQ),e(uQ,M0r),e(Yc,E0r),e(wt,C0r),e(wt,j4e),e(j4e,w0r),e(wt,A0r),g(ky,wt,null),e(Sr,y0r),e(Sr,Ao),g(Sy,Ao,null),e(Ao,L0r),e(Ao,D4e),e(D4e,x0r),e(Ao,k0r),e(Ao,Ln),e(Ln,S0r),e(Ln,G4e),e(G4e,R0r),e(Ln,B0r),e(Ln,O4e),e(O4e,P0r),e(Ln,$0r),e(Ln,V4e),e(V4e,I0r),e(Ln,q0r),e(Ao,N0r),e(Ao,X4e),e(X4e,cM),e(cM,z4e),e(z4e,j0r),e(cM,D0r),e(cM,pQ),e(pQ,G0r),e(cM,O0r),e(Ao,V0r),e(Ao,Q4e),e(Q4e,X0r),e(Ao,z0r),g(Ry,Ao,null),v(c,hBe,_),v(c,Kc,_),e(Kc,fM),e(fM,W4e),g(By,W4e,null),e(Kc,Q0r),e(Kc,H4e),e(H4e,W0r),v(c,uBe,_),v(c,Rr,_),g(Py,Rr,null),e(Rr,H0r),e(Rr,Zc),e(Zc,U0r),e(Zc,_Q),e(_Q,J0r),e(Zc,Y0r),e(Zc,vQ),e(vQ,K0r),e(Zc,Z0r),e(Rr,eTr),e(Rr,$y),e($y,oTr),e($y,U4e),e(U4e,rTr),e($y,tTr),e(Rr,aTr),e(Rr,At),g(Iy,At,null),e(At,nTr),e(At,J4e),e(J4e,sTr),e(At,lTr),e(At,ef),e(ef,iTr),e(ef,Y4e),e(Y4e,dTr),e(ef,cTr),e(ef,bQ),e(bQ,fTr),e(ef,mTr),e(At,gTr),e(At,K4e),e(K4e,hTr),e(At,uTr),g(qy,At,null),e(Rr,pTr),e(Rr,yo),g(Ny,yo,null),e(yo,_Tr),e(yo,Z4e),e(Z4e,vTr),e(yo,bTr),e(yo,xn),e(xn,FTr),e(xn,ebe),e(ebe,TTr),e(xn,MTr),e(xn,obe),e(obe,ETr),e(xn,CTr),e(xn,rbe),e(rbe,wTr),e(xn,ATr),e(yo,yTr),e(yo,z),e(z,mM),e(mM,tbe),e(tbe,LTr),e(mM,xTr),e(mM,FQ),e(FQ,kTr),e(mM,STr),e(z,RTr),e(z,gM),e(gM,abe),e(abe,BTr),e(gM,PTr),e(gM,TQ),e(TQ,$Tr),e(gM,ITr),e(z,qTr),e(z,hM),e(hM,nbe),e(nbe,NTr),e(hM,jTr),e(hM,MQ),e(MQ,DTr),e(hM,GTr),e(z,OTr),e(z,uM),e(uM,sbe),e(sbe,VTr),e(uM,XTr),e(uM,EQ),e(EQ,zTr),e(uM,QTr),e(z,WTr),e(z,pM),e(pM,lbe),e(lbe,HTr),e(pM,UTr),e(pM,CQ),e(CQ,JTr),e(pM,YTr),e(z,KTr),e(z,_M),e(_M,ibe),e(ibe,ZTr),e(_M,e8r),e(_M,wQ),e(wQ,o8r),e(_M,r8r),e(z,t8r),e(z,vM),e(vM,dbe),e(dbe,a8r),e(vM,n8r),e(vM,AQ),e(AQ,s8r),e(vM,l8r),e(z,i8r),e(z,bM),e(bM,cbe),e(cbe,d8r),e(bM,c8r),e(bM,yQ),e(yQ,f8r),e(bM,m8r),e(z,g8r),e(z,FM),e(FM,fbe),e(fbe,h8r),e(FM,u8r),e(FM,LQ),e(LQ,p8r),e(FM,_8r),e(z,v8r),e(z,TM),e(TM,mbe),e(mbe,b8r),e(TM,F8r),e(TM,xQ),e(xQ,T8r),e(TM,M8r),e(z,E8r),e(z,MM),e(MM,gbe),e(gbe,C8r),e(MM,w8r),e(MM,kQ),e(kQ,A8r),e(MM,y8r),e(z,L8r),e(z,EM),e(EM,hbe),e(hbe,x8r),e(EM,k8r),e(EM,SQ),e(SQ,S8r),e(EM,R8r),e(z,B8r),e(z,CM),e(CM,ube),e(ube,P8r),e(CM,$8r),e(CM,RQ),e(RQ,I8r),e(CM,q8r),e(z,N8r),e(z,wM),e(wM,pbe),e(pbe,j8r),e(wM,D8r),e(wM,BQ),e(BQ,G8r),e(wM,O8r),e(z,V8r),e(z,AM),e(AM,_be),e(_be,X8r),e(AM,z8r),e(AM,PQ),e(PQ,Q8r),e(AM,W8r),e(z,H8r),e(z,yM),e(yM,vbe),e(vbe,U8r),e(yM,J8r),e(yM,$Q),e($Q,Y8r),e(yM,K8r),e(z,Z8r),e(z,LM),e(LM,bbe),e(bbe,eMr),e(LM,oMr),e(LM,IQ),e(IQ,rMr),e(LM,tMr),e(z,aMr),e(z,xM),e(xM,Fbe),e(Fbe,nMr),e(xM,sMr),e(xM,qQ),e(qQ,lMr),e(xM,iMr),e(z,dMr),e(z,kM),e(kM,Tbe),e(Tbe,cMr),e(kM,fMr),e(kM,NQ),e(NQ,mMr),e(kM,gMr),e(z,hMr),e(z,SM),e(SM,Mbe),e(Mbe,uMr),e(SM,pMr),e(SM,jQ),e(jQ,_Mr),e(SM,vMr),e(z,bMr),e(z,RM),e(RM,Ebe),e(Ebe,FMr),e(RM,TMr),e(RM,DQ),e(DQ,MMr),e(RM,EMr),e(z,CMr),e(z,BM),e(BM,Cbe),e(Cbe,wMr),e(BM,AMr),e(BM,GQ),e(GQ,yMr),e(BM,LMr),e(z,xMr),e(z,PM),e(PM,wbe),e(wbe,kMr),e(PM,SMr),e(PM,OQ),e(OQ,RMr),e(PM,BMr),e(z,PMr),e(z,$M),e($M,Abe),e(Abe,$Mr),e($M,IMr),e($M,VQ),e(VQ,qMr),e($M,NMr),e(z,jMr),e(z,IM),e(IM,ybe),e(ybe,DMr),e(IM,GMr),e(IM,XQ),e(XQ,OMr),e(IM,VMr),e(yo,XMr),e(yo,Lbe),e(Lbe,zMr),e(yo,QMr),g(jy,yo,null),v(c,pBe,_),v(c,of,_),e(of,qM),e(qM,xbe),g(Dy,xbe,null),e(of,WMr),e(of,kbe),e(kbe,HMr),v(c,_Be,_),v(c,Br,_),g(Gy,Br,null),e(Br,UMr),e(Br,rf),e(rf,JMr),e(rf,zQ),e(zQ,YMr),e(rf,KMr),e(rf,QQ),e(QQ,ZMr),e(rf,eEr),e(Br,oEr),e(Br,Oy),e(Oy,rEr),e(Oy,Sbe),e(Sbe,tEr),e(Oy,aEr),e(Br,nEr),e(Br,yt),g(Vy,yt,null),e(yt,sEr),e(yt,Rbe),e(Rbe,lEr),e(yt,iEr),e(yt,tf),e(tf,dEr),e(tf,Bbe),e(Bbe,cEr),e(tf,fEr),e(tf,WQ),e(WQ,mEr),e(tf,gEr),e(yt,hEr),e(yt,Pbe),e(Pbe,uEr),e(yt,pEr),g(Xy,yt,null),e(Br,_Er),e(Br,Lo),g(zy,Lo,null),e(Lo,vEr),e(Lo,$be),e($be,bEr),e(Lo,FEr),e(Lo,kn),e(kn,TEr),e(kn,Ibe),e(Ibe,MEr),e(kn,EEr),e(kn,qbe),e(qbe,CEr),e(kn,wEr),e(kn,Nbe),e(Nbe,AEr),e(kn,yEr),e(Lo,LEr),e(Lo,ca),e(ca,NM),e(NM,jbe),e(jbe,xEr),e(NM,kEr),e(NM,HQ),e(HQ,SEr),e(NM,REr),e(ca,BEr),e(ca,jM),e(jM,Dbe),e(Dbe,PEr),e(jM,$Er),e(jM,UQ),e(UQ,IEr),e(jM,qEr),e(ca,NEr),e(ca,DM),e(DM,Gbe),e(Gbe,jEr),e(DM,DEr),e(DM,JQ),e(JQ,GEr),e(DM,OEr),e(ca,VEr),e(ca,GM),e(GM,Obe),e(Obe,XEr),e(GM,zEr),e(GM,YQ),e(YQ,QEr),e(GM,WEr),e(ca,HEr),e(ca,OM),e(OM,Vbe),e(Vbe,UEr),e(OM,JEr),e(OM,KQ),e(KQ,YEr),e(OM,KEr),e(Lo,ZEr),e(Lo,Xbe),e(Xbe,e5r),e(Lo,o5r),g(Qy,Lo,null),v(c,vBe,_),v(c,af,_),e(af,VM),e(VM,zbe),g(Wy,zbe,null),e(af,r5r),e(af,Qbe),e(Qbe,t5r),v(c,bBe,_),v(c,Pr,_),g(Hy,Pr,null),e(Pr,a5r),e(Pr,nf),e(nf,n5r),e(nf,ZQ),e(ZQ,s5r),e(nf,l5r),e(nf,eW),e(eW,i5r),e(nf,d5r),e(Pr,c5r),e(Pr,Uy),e(Uy,f5r),e(Uy,Wbe),e(Wbe,m5r),e(Uy,g5r),e(Pr,h5r),e(Pr,Lt),g(Jy,Lt,null),e(Lt,u5r),e(Lt,Hbe),e(Hbe,p5r),e(Lt,_5r),e(Lt,sf),e(sf,v5r),e(sf,Ube),e(Ube,b5r),e(sf,F5r),e(sf,oW),e(oW,T5r),e(sf,M5r),e(Lt,E5r),e(Lt,Jbe),e(Jbe,C5r),e(Lt,w5r),g(Yy,Lt,null),e(Pr,A5r),e(Pr,xo),g(Ky,xo,null),e(xo,y5r),e(xo,Ybe),e(Ybe,L5r),e(xo,x5r),e(xo,Sn),e(Sn,k5r),e(Sn,Kbe),e(Kbe,S5r),e(Sn,R5r),e(Sn,Zbe),e(Zbe,B5r),e(Sn,P5r),e(Sn,e2e),e(e2e,$5r),e(Sn,I5r),e(xo,q5r),e(xo,fe),e(fe,XM),e(XM,o2e),e(o2e,N5r),e(XM,j5r),e(XM,rW),e(rW,D5r),e(XM,G5r),e(fe,O5r),e(fe,zM),e(zM,r2e),e(r2e,V5r),e(zM,X5r),e(zM,tW),e(tW,z5r),e(zM,Q5r),e(fe,W5r),e(fe,QM),e(QM,t2e),e(t2e,H5r),e(QM,U5r),e(QM,aW),e(aW,J5r),e(QM,Y5r),e(fe,K5r),e(fe,WM),e(WM,a2e),e(a2e,Z5r),e(WM,e3r),e(WM,nW),e(nW,o3r),e(WM,r3r),e(fe,t3r),e(fe,HM),e(HM,n2e),e(n2e,a3r),e(HM,n3r),e(HM,sW),e(sW,s3r),e(HM,l3r),e(fe,i3r),e(fe,UM),e(UM,s2e),e(s2e,d3r),e(UM,c3r),e(UM,lW),e(lW,f3r),e(UM,m3r),e(fe,g3r),e(fe,JM),e(JM,l2e),e(l2e,h3r),e(JM,u3r),e(JM,iW),e(iW,p3r),e(JM,_3r),e(fe,v3r),e(fe,YM),e(YM,i2e),e(i2e,b3r),e(YM,F3r),e(YM,dW),e(dW,T3r),e(YM,M3r),e(fe,E3r),e(fe,KM),e(KM,d2e),e(d2e,C3r),e(KM,w3r),e(KM,cW),e(cW,A3r),e(KM,y3r),e(fe,L3r),e(fe,ZM),e(ZM,c2e),e(c2e,x3r),e(ZM,k3r),e(ZM,fW),e(fW,S3r),e(ZM,R3r),e(fe,B3r),e(fe,eE),e(eE,f2e),e(f2e,P3r),e(eE,$3r),e(eE,mW),e(mW,I3r),e(eE,q3r),e(fe,N3r),e(fe,oE),e(oE,m2e),e(m2e,j3r),e(oE,D3r),e(oE,gW),e(gW,G3r),e(oE,O3r),e(xo,V3r),e(xo,g2e),e(g2e,X3r),e(xo,z3r),g(Zy,xo,null),v(c,FBe,_),v(c,lf,_),e(lf,rE),e(rE,h2e),g(eL,h2e,null),e(lf,Q3r),e(lf,u2e),e(u2e,W3r),v(c,TBe,_),v(c,$r,_),g(oL,$r,null),e($r,H3r),e($r,df),e(df,U3r),e(df,hW),e(hW,J3r),e(df,Y3r),e(df,uW),e(uW,K3r),e(df,Z3r),e($r,eCr),e($r,rL),e(rL,oCr),e(rL,p2e),e(p2e,rCr),e(rL,tCr),e($r,aCr),e($r,xt),g(tL,xt,null),e(xt,nCr),e(xt,_2e),e(_2e,sCr),e(xt,lCr),e(xt,cf),e(cf,iCr),e(cf,v2e),e(v2e,dCr),e(cf,cCr),e(cf,pW),e(pW,fCr),e(cf,mCr),e(xt,gCr),e(xt,b2e),e(b2e,hCr),e(xt,uCr),g(aL,xt,null),e($r,pCr),e($r,ko),g(nL,ko,null),e(ko,_Cr),e(ko,F2e),e(F2e,vCr),e(ko,bCr),e(ko,Rn),e(Rn,FCr),e(Rn,T2e),e(T2e,TCr),e(Rn,MCr),e(Rn,M2e),e(M2e,ECr),e(Rn,CCr),e(Rn,E2e),e(E2e,wCr),e(Rn,ACr),e(ko,yCr),e(ko,ve),e(ve,tE),e(tE,C2e),e(C2e,LCr),e(tE,xCr),e(tE,_W),e(_W,kCr),e(tE,SCr),e(ve,RCr),e(ve,aE),e(aE,w2e),e(w2e,BCr),e(aE,PCr),e(aE,vW),e(vW,$Cr),e(aE,ICr),e(ve,qCr),e(ve,nE),e(nE,A2e),e(A2e,NCr),e(nE,jCr),e(nE,bW),e(bW,DCr),e(nE,GCr),e(ve,OCr),e(ve,sE),e(sE,y2e),e(y2e,VCr),e(sE,XCr),e(sE,FW),e(FW,zCr),e(sE,QCr),e(ve,WCr),e(ve,lE),e(lE,L2e),e(L2e,HCr),e(lE,UCr),e(lE,TW),e(TW,JCr),e(lE,YCr),e(ve,KCr),e(ve,iE),e(iE,x2e),e(x2e,ZCr),e(iE,ewr),e(iE,MW),e(MW,owr),e(iE,rwr),e(ve,twr),e(ve,dE),e(dE,k2e),e(k2e,awr),e(dE,nwr),e(dE,EW),e(EW,swr),e(dE,lwr),e(ve,iwr),e(ve,cE),e(cE,S2e),e(S2e,dwr),e(cE,cwr),e(cE,CW),e(CW,fwr),e(cE,mwr),e(ve,gwr),e(ve,fE),e(fE,R2e),e(R2e,hwr),e(fE,uwr),e(fE,wW),e(wW,pwr),e(fE,_wr),e(ve,vwr),e(ve,mE),e(mE,B2e),e(B2e,bwr),e(mE,Fwr),e(mE,AW),e(AW,Twr),e(mE,Mwr),e(ko,Ewr),e(ko,P2e),e(P2e,Cwr),e(ko,wwr),g(sL,ko,null),v(c,MBe,_),v(c,ff,_),e(ff,gE),e(gE,$2e),g(lL,$2e,null),e(ff,Awr),e(ff,I2e),e(I2e,ywr),v(c,EBe,_),v(c,Ir,_),g(iL,Ir,null),e(Ir,Lwr),e(Ir,mf),e(mf,xwr),e(mf,yW),e(yW,kwr),e(mf,Swr),e(mf,LW),e(LW,Rwr),e(mf,Bwr),e(Ir,Pwr),e(Ir,dL),e(dL,$wr),e(dL,q2e),e(q2e,Iwr),e(dL,qwr),e(Ir,Nwr),e(Ir,kt),g(cL,kt,null),e(kt,jwr),e(kt,N2e),e(N2e,Dwr),e(kt,Gwr),e(kt,gf),e(gf,Owr),e(gf,j2e),e(j2e,Vwr),e(gf,Xwr),e(gf,xW),e(xW,zwr),e(gf,Qwr),e(kt,Wwr),e(kt,D2e),e(D2e,Hwr),e(kt,Uwr),g(fL,kt,null),e(Ir,Jwr),e(Ir,So),g(mL,So,null),e(So,Ywr),e(So,G2e),e(G2e,Kwr),e(So,Zwr),e(So,Bn),e(Bn,e6r),e(Bn,O2e),e(O2e,o6r),e(Bn,r6r),e(Bn,V2e),e(V2e,t6r),e(Bn,a6r),e(Bn,X2e),e(X2e,n6r),e(Bn,s6r),e(So,l6r),e(So,Ee),e(Ee,hE),e(hE,z2e),e(z2e,i6r),e(hE,d6r),e(hE,kW),e(kW,c6r),e(hE,f6r),e(Ee,m6r),e(Ee,uE),e(uE,Q2e),e(Q2e,g6r),e(uE,h6r),e(uE,SW),e(SW,u6r),e(uE,p6r),e(Ee,_6r),e(Ee,pE),e(pE,W2e),e(W2e,v6r),e(pE,b6r),e(pE,RW),e(RW,F6r),e(pE,T6r),e(Ee,M6r),e(Ee,_E),e(_E,H2e),e(H2e,E6r),e(_E,C6r),e(_E,BW),e(BW,w6r),e(_E,A6r),e(Ee,y6r),e(Ee,vE),e(vE,U2e),e(U2e,L6r),e(vE,x6r),e(vE,PW),e(PW,k6r),e(vE,S6r),e(Ee,R6r),e(Ee,bE),e(bE,J2e),e(J2e,B6r),e(bE,P6r),e(bE,$W),e($W,$6r),e(bE,I6r),e(Ee,q6r),e(Ee,FE),e(FE,Y2e),e(Y2e,N6r),e(FE,j6r),e(FE,IW),e(IW,D6r),e(FE,G6r),e(Ee,O6r),e(Ee,TE),e(TE,K2e),e(K2e,V6r),e(TE,X6r),e(TE,qW),e(qW,z6r),e(TE,Q6r),e(Ee,W6r),e(Ee,ME),e(ME,Z2e),e(Z2e,H6r),e(ME,U6r),e(ME,NW),e(NW,J6r),e(ME,Y6r),e(So,K6r),e(So,eFe),e(eFe,Z6r),e(So,eAr),g(gL,So,null),v(c,CBe,_),v(c,hf,_),e(hf,EE),e(EE,oFe),g(hL,oFe,null),e(hf,oAr),e(hf,rFe),e(rFe,rAr),v(c,wBe,_),v(c,qr,_),g(uL,qr,null),e(qr,tAr),e(qr,uf),e(uf,aAr),e(uf,jW),e(jW,nAr),e(uf,sAr),e(uf,DW),e(DW,lAr),e(uf,iAr),e(qr,dAr),e(qr,pL),e(pL,cAr),e(pL,tFe),e(tFe,fAr),e(pL,mAr),e(qr,gAr),e(qr,St),g(_L,St,null),e(St,hAr),e(St,aFe),e(aFe,uAr),e(St,pAr),e(St,pf),e(pf,_Ar),e(pf,nFe),e(nFe,vAr),e(pf,bAr),e(pf,GW),e(GW,FAr),e(pf,TAr),e(St,MAr),e(St,sFe),e(sFe,EAr),e(St,CAr),g(vL,St,null),e(qr,wAr),e(qr,Ro),g(bL,Ro,null),e(Ro,AAr),e(Ro,lFe),e(lFe,yAr),e(Ro,LAr),e(Ro,Pn),e(Pn,xAr),e(Pn,iFe),e(iFe,kAr),e(Pn,SAr),e(Pn,dFe),e(dFe,RAr),e(Pn,BAr),e(Pn,cFe),e(cFe,PAr),e(Pn,$Ar),e(Ro,IAr),e(Ro,be),e(be,CE),e(CE,fFe),e(fFe,qAr),e(CE,NAr),e(CE,OW),e(OW,jAr),e(CE,DAr),e(be,GAr),e(be,wE),e(wE,mFe),e(mFe,OAr),e(wE,VAr),e(wE,VW),e(VW,XAr),e(wE,zAr),e(be,QAr),e(be,AE),e(AE,gFe),e(gFe,WAr),e(AE,HAr),e(AE,XW),e(XW,UAr),e(AE,JAr),e(be,YAr),e(be,yE),e(yE,hFe),e(hFe,KAr),e(yE,ZAr),e(yE,zW),e(zW,eyr),e(yE,oyr),e(be,ryr),e(be,LE),e(LE,uFe),e(uFe,tyr),e(LE,ayr),e(LE,QW),e(QW,nyr),e(LE,syr),e(be,lyr),e(be,xE),e(xE,pFe),e(pFe,iyr),e(xE,dyr),e(xE,WW),e(WW,cyr),e(xE,fyr),e(be,myr),e(be,kE),e(kE,_Fe),e(_Fe,gyr),e(kE,hyr),e(kE,HW),e(HW,uyr),e(kE,pyr),e(be,_yr),e(be,SE),e(SE,vFe),e(vFe,vyr),e(SE,byr),e(SE,UW),e(UW,Fyr),e(SE,Tyr),e(be,Myr),e(be,RE),e(RE,bFe),e(bFe,Eyr),e(RE,Cyr),e(RE,JW),e(JW,wyr),e(RE,Ayr),e(be,yyr),e(be,BE),e(BE,FFe),e(FFe,Lyr),e(BE,xyr),e(BE,YW),e(YW,kyr),e(BE,Syr),e(Ro,Ryr),e(Ro,TFe),e(TFe,Byr),e(Ro,Pyr),g(FL,Ro,null),v(c,ABe,_),v(c,_f,_),e(_f,PE),e(PE,MFe),g(TL,MFe,null),e(_f,$yr),e(_f,EFe),e(EFe,Iyr),v(c,yBe,_),v(c,Nr,_),g(ML,Nr,null),e(Nr,qyr),e(Nr,vf),e(vf,Nyr),e(vf,KW),e(KW,jyr),e(vf,Dyr),e(vf,ZW),e(ZW,Gyr),e(vf,Oyr),e(Nr,Vyr),e(Nr,EL),e(EL,Xyr),e(EL,CFe),e(CFe,zyr),e(EL,Qyr),e(Nr,Wyr),e(Nr,Rt),g(CL,Rt,null),e(Rt,Hyr),e(Rt,wFe),e(wFe,Uyr),e(Rt,Jyr),e(Rt,bf),e(bf,Yyr),e(bf,AFe),e(AFe,Kyr),e(bf,Zyr),e(bf,eH),e(eH,eLr),e(bf,oLr),e(Rt,rLr),e(Rt,yFe),e(yFe,tLr),e(Rt,aLr),g(wL,Rt,null),e(Nr,nLr),e(Nr,Bo),g(AL,Bo,null),e(Bo,sLr),e(Bo,LFe),e(LFe,lLr),e(Bo,iLr),e(Bo,$n),e($n,dLr),e($n,xFe),e(xFe,cLr),e($n,fLr),e($n,kFe),e(kFe,mLr),e($n,gLr),e($n,SFe),e(SFe,hLr),e($n,uLr),e(Bo,pLr),e(Bo,Fe),e(Fe,$E),e($E,RFe),e(RFe,_Lr),e($E,vLr),e($E,oH),e(oH,bLr),e($E,FLr),e(Fe,TLr),e(Fe,IE),e(IE,BFe),e(BFe,MLr),e(IE,ELr),e(IE,rH),e(rH,CLr),e(IE,wLr),e(Fe,ALr),e(Fe,qE),e(qE,PFe),e(PFe,yLr),e(qE,LLr),e(qE,tH),e(tH,xLr),e(qE,kLr),e(Fe,SLr),e(Fe,NE),e(NE,$Fe),e($Fe,RLr),e(NE,BLr),e(NE,aH),e(aH,PLr),e(NE,$Lr),e(Fe,ILr),e(Fe,jE),e(jE,IFe),e(IFe,qLr),e(jE,NLr),e(jE,nH),e(nH,jLr),e(jE,DLr),e(Fe,GLr),e(Fe,DE),e(DE,qFe),e(qFe,OLr),e(DE,VLr),e(DE,sH),e(sH,XLr),e(DE,zLr),e(Fe,QLr),e(Fe,GE),e(GE,NFe),e(NFe,WLr),e(GE,HLr),e(GE,lH),e(lH,ULr),e(GE,JLr),e(Fe,YLr),e(Fe,OE),e(OE,jFe),e(jFe,KLr),e(OE,ZLr),e(OE,iH),e(iH,e7r),e(OE,o7r),e(Fe,r7r),e(Fe,VE),e(VE,DFe),e(DFe,t7r),e(VE,a7r),e(VE,dH),e(dH,n7r),e(VE,s7r),e(Fe,l7r),e(Fe,XE),e(XE,GFe),e(GFe,i7r),e(XE,d7r),e(XE,cH),e(cH,c7r),e(XE,f7r),e(Bo,m7r),e(Bo,OFe),e(OFe,g7r),e(Bo,h7r),g(yL,Bo,null),v(c,LBe,_),v(c,Ff,_),e(Ff,zE),e(zE,VFe),g(LL,VFe,null),e(Ff,u7r),e(Ff,XFe),e(XFe,p7r),v(c,xBe,_),v(c,jr,_),g(xL,jr,null),e(jr,_7r),e(jr,Tf),e(Tf,v7r),e(Tf,fH),e(fH,b7r),e(Tf,F7r),e(Tf,mH),e(mH,T7r),e(Tf,M7r),e(jr,E7r),e(jr,kL),e(kL,C7r),e(kL,zFe),e(zFe,w7r),e(kL,A7r),e(jr,y7r),e(jr,Bt),g(SL,Bt,null),e(Bt,L7r),e(Bt,QFe),e(QFe,x7r),e(Bt,k7r),e(Bt,Mf),e(Mf,S7r),e(Mf,WFe),e(WFe,R7r),e(Mf,B7r),e(Mf,gH),e(gH,P7r),e(Mf,$7r),e(Bt,I7r),e(Bt,HFe),e(HFe,q7r),e(Bt,N7r),g(RL,Bt,null),e(jr,j7r),e(jr,Po),g(BL,Po,null),e(Po,D7r),e(Po,UFe),e(UFe,G7r),e(Po,O7r),e(Po,In),e(In,V7r),e(In,JFe),e(JFe,X7r),e(In,z7r),e(In,YFe),e(YFe,Q7r),e(In,W7r),e(In,KFe),e(KFe,H7r),e(In,U7r),e(Po,J7r),e(Po,Be),e(Be,QE),e(QE,ZFe),e(ZFe,Y7r),e(QE,K7r),e(QE,hH),e(hH,Z7r),e(QE,exr),e(Be,oxr),e(Be,WE),e(WE,e0e),e(e0e,rxr),e(WE,txr),e(WE,uH),e(uH,axr),e(WE,nxr),e(Be,sxr),e(Be,HE),e(HE,o0e),e(o0e,lxr),e(HE,ixr),e(HE,pH),e(pH,dxr),e(HE,cxr),e(Be,fxr),e(Be,UE),e(UE,r0e),e(r0e,mxr),e(UE,gxr),e(UE,_H),e(_H,hxr),e(UE,uxr),e(Be,pxr),e(Be,JE),e(JE,t0e),e(t0e,_xr),e(JE,vxr),e(JE,vH),e(vH,bxr),e(JE,Fxr),e(Be,Txr),e(Be,YE),e(YE,a0e),e(a0e,Mxr),e(YE,Exr),e(YE,bH),e(bH,Cxr),e(YE,wxr),e(Be,Axr),e(Be,KE),e(KE,n0e),e(n0e,yxr),e(KE,Lxr),e(KE,FH),e(FH,xxr),e(KE,kxr),e(Be,Sxr),e(Be,ZE),e(ZE,s0e),e(s0e,Rxr),e(ZE,Bxr),e(ZE,TH),e(TH,Pxr),e(ZE,$xr),e(Po,Ixr),e(Po,l0e),e(l0e,qxr),e(Po,Nxr),g(PL,Po,null),v(c,kBe,_),v(c,Ef,_),e(Ef,e5),e(e5,i0e),g($L,i0e,null),e(Ef,jxr),e(Ef,d0e),e(d0e,Dxr),v(c,SBe,_),v(c,Dr,_),g(IL,Dr,null),e(Dr,Gxr),e(Dr,Cf),e(Cf,Oxr),e(Cf,MH),e(MH,Vxr),e(Cf,Xxr),e(Cf,EH),e(EH,zxr),e(Cf,Qxr),e(Dr,Wxr),e(Dr,qL),e(qL,Hxr),e(qL,c0e),e(c0e,Uxr),e(qL,Jxr),e(Dr,Yxr),e(Dr,Pt),g(NL,Pt,null),e(Pt,Kxr),e(Pt,f0e),e(f0e,Zxr),e(Pt,e9r),e(Pt,wf),e(wf,o9r),e(wf,m0e),e(m0e,r9r),e(wf,t9r),e(wf,CH),e(CH,a9r),e(wf,n9r),e(Pt,s9r),e(Pt,g0e),e(g0e,l9r),e(Pt,i9r),g(jL,Pt,null),e(Dr,d9r),e(Dr,$o),g(DL,$o,null),e($o,c9r),e($o,h0e),e(h0e,f9r),e($o,m9r),e($o,qn),e(qn,g9r),e(qn,u0e),e(u0e,h9r),e(qn,u9r),e(qn,p0e),e(p0e,p9r),e(qn,_9r),e(qn,_0e),e(_0e,v9r),e(qn,b9r),e($o,F9r),e($o,Pe),e(Pe,o5),e(o5,v0e),e(v0e,T9r),e(o5,M9r),e(o5,wH),e(wH,E9r),e(o5,C9r),e(Pe,w9r),e(Pe,r5),e(r5,b0e),e(b0e,A9r),e(r5,y9r),e(r5,AH),e(AH,L9r),e(r5,x9r),e(Pe,k9r),e(Pe,t5),e(t5,F0e),e(F0e,S9r),e(t5,R9r),e(t5,yH),e(yH,B9r),e(t5,P9r),e(Pe,$9r),e(Pe,a5),e(a5,T0e),e(T0e,I9r),e(a5,q9r),e(a5,LH),e(LH,N9r),e(a5,j9r),e(Pe,D9r),e(Pe,n5),e(n5,M0e),e(M0e,G9r),e(n5,O9r),e(n5,xH),e(xH,V9r),e(n5,X9r),e(Pe,z9r),e(Pe,s5),e(s5,E0e),e(E0e,Q9r),e(s5,W9r),e(s5,kH),e(kH,H9r),e(s5,U9r),e(Pe,J9r),e(Pe,l5),e(l5,C0e),e(C0e,Y9r),e(l5,K9r),e(l5,SH),e(SH,Z9r),e(l5,ekr),e(Pe,okr),e(Pe,i5),e(i5,w0e),e(w0e,rkr),e(i5,tkr),e(i5,RH),e(RH,akr),e(i5,nkr),e($o,skr),e($o,A0e),e(A0e,lkr),e($o,ikr),g(GL,$o,null),v(c,RBe,_),v(c,Af,_),e(Af,d5),e(d5,y0e),g(OL,y0e,null),e(Af,dkr),e(Af,L0e),e(L0e,ckr),v(c,BBe,_),v(c,Gr,_),g(VL,Gr,null),e(Gr,fkr),e(Gr,yf),e(yf,mkr),e(yf,BH),e(BH,gkr),e(yf,hkr),e(yf,PH),e(PH,ukr),e(yf,pkr),e(Gr,_kr),e(Gr,XL),e(XL,vkr),e(XL,x0e),e(x0e,bkr),e(XL,Fkr),e(Gr,Tkr),e(Gr,$t),g(zL,$t,null),e($t,Mkr),e($t,k0e),e(k0e,Ekr),e($t,Ckr),e($t,Lf),e(Lf,wkr),e(Lf,S0e),e(S0e,Akr),e(Lf,ykr),e(Lf,$H),e($H,Lkr),e(Lf,xkr),e($t,kkr),e($t,R0e),e(R0e,Skr),e($t,Rkr),g(QL,$t,null),e(Gr,Bkr),e(Gr,Io),g(WL,Io,null),e(Io,Pkr),e(Io,B0e),e(B0e,$kr),e(Io,Ikr),e(Io,Nn),e(Nn,qkr),e(Nn,P0e),e(P0e,Nkr),e(Nn,jkr),e(Nn,$0e),e($0e,Dkr),e(Nn,Gkr),e(Nn,I0e),e(I0e,Okr),e(Nn,Vkr),e(Io,Xkr),e(Io,q0e),e(q0e,c5),e(c5,N0e),e(N0e,zkr),e(c5,Qkr),e(c5,IH),e(IH,Wkr),e(c5,Hkr),e(Io,Ukr),e(Io,j0e),e(j0e,Jkr),e(Io,Ykr),g(HL,Io,null),v(c,PBe,_),v(c,xf,_),e(xf,f5),e(f5,D0e),g(UL,D0e,null),e(xf,Kkr),e(xf,G0e),e(G0e,Zkr),v(c,$Be,_),v(c,Or,_),g(JL,Or,null),e(Or,eSr),e(Or,kf),e(kf,oSr),e(kf,qH),e(qH,rSr),e(kf,tSr),e(kf,NH),e(NH,aSr),e(kf,nSr),e(Or,sSr),e(Or,YL),e(YL,lSr),e(YL,O0e),e(O0e,iSr),e(YL,dSr),e(Or,cSr),e(Or,It),g(KL,It,null),e(It,fSr),e(It,V0e),e(V0e,mSr),e(It,gSr),e(It,Sf),e(Sf,hSr),e(Sf,X0e),e(X0e,uSr),e(Sf,pSr),e(Sf,jH),e(jH,_Sr),e(Sf,vSr),e(It,bSr),e(It,z0e),e(z0e,FSr),e(It,TSr),g(ZL,It,null),e(Or,MSr),e(Or,qo),g(e7,qo,null),e(qo,ESr),e(qo,Q0e),e(Q0e,CSr),e(qo,wSr),e(qo,jn),e(jn,ASr),e(jn,W0e),e(W0e,ySr),e(jn,LSr),e(jn,H0e),e(H0e,xSr),e(jn,kSr),e(jn,U0e),e(U0e,SSr),e(jn,RSr),e(qo,BSr),e(qo,o7),e(o7,m5),e(m5,J0e),e(J0e,PSr),e(m5,$Sr),e(m5,DH),e(DH,ISr),e(m5,qSr),e(o7,NSr),e(o7,g5),e(g5,Y0e),e(Y0e,jSr),e(g5,DSr),e(g5,GH),e(GH,GSr),e(g5,OSr),e(qo,VSr),e(qo,K0e),e(K0e,XSr),e(qo,zSr),g(r7,qo,null),v(c,IBe,_),v(c,Rf,_),e(Rf,h5),e(h5,Z0e),g(t7,Z0e,null),e(Rf,QSr),e(Rf,eTe),e(eTe,WSr),v(c,qBe,_),v(c,Vr,_),g(a7,Vr,null),e(Vr,HSr),e(Vr,Bf),e(Bf,USr),e(Bf,OH),e(OH,JSr),e(Bf,YSr),e(Bf,VH),e(VH,KSr),e(Bf,ZSr),e(Vr,eRr),e(Vr,n7),e(n7,oRr),e(n7,oTe),e(oTe,rRr),e(n7,tRr),e(Vr,aRr),e(Vr,qt),g(s7,qt,null),e(qt,nRr),e(qt,rTe),e(rTe,sRr),e(qt,lRr),e(qt,Pf),e(Pf,iRr),e(Pf,tTe),e(tTe,dRr),e(Pf,cRr),e(Pf,XH),e(XH,fRr),e(Pf,mRr),e(qt,gRr),e(qt,aTe),e(aTe,hRr),e(qt,uRr),g(l7,qt,null),e(Vr,pRr),e(Vr,No),g(i7,No,null),e(No,_Rr),e(No,nTe),e(nTe,vRr),e(No,bRr),e(No,Dn),e(Dn,FRr),e(Dn,sTe),e(sTe,TRr),e(Dn,MRr),e(Dn,lTe),e(lTe,ERr),e(Dn,CRr),e(Dn,iTe),e(iTe,wRr),e(Dn,ARr),e(No,yRr),e(No,dTe),e(dTe,u5),e(u5,cTe),e(cTe,LRr),e(u5,xRr),e(u5,zH),e(zH,kRr),e(u5,SRr),e(No,RRr),e(No,fTe),e(fTe,BRr),e(No,PRr),g(d7,No,null),NBe=!0},p(c,[_]){const c7={};_&2&&(c7.$$scope={dirty:_,ctx:c}),Of.$set(c7);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:c}),Rh.$set(mTe);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:c}),Vh.$set(gTe)},i(c){NBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(Of.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(Rh.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(Q3.$$.fragment,c),h(Vh.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(uC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(vw.$$.fragment,c),h(bw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(_6.$$.fragment,c),h(v6.$$.fragment,c),h(b6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(vy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(_L.$$.fragment,c),h(vL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),NBe=!0)},o(c){u(me.$$.fragment,c),u(Da.$$.fragment,c),u(b3.$$.fragment,c),u(F3.$$.fragment,c),u(Of.$$.fragment,c),u(T3.$$.fragment,c),u(M3.$$.fragment,c),u(w3.$$.fragment,c),u(A3.$$.fragment,c),u(y3.$$.fragment,c),u(L3.$$.fragment,c),u(x3.$$.fragment,c),u(R3.$$.fragment,c),u(B3.$$.fragment,c),u(P3.$$.fragment,c),u($3.$$.fragment,c),u(I3.$$.fragment,c),u(j3.$$.fragment,c),u(Rh.$$.fragment,c),u(D3.$$.fragment,c),u(G3.$$.fragment,c),u(O3.$$.fragment,c),u(V3.$$.fragment,c),u(Q3.$$.fragment,c),u(Vh.$$.fragment,c),u(W3.$$.fragment,c),u(H3.$$.fragment,c),u(U3.$$.fragment,c),u(J3.$$.fragment,c),u(K3.$$.fragment,c),u(Z3.$$.fragment,c),u(eC.$$.fragment,c),u(oC.$$.fragment,c),u(rC.$$.fragment,c),u(tC.$$.fragment,c),u(nC.$$.fragment,c),u(sC.$$.fragment,c),u(lC.$$.fragment,c),u(iC.$$.fragment,c),u(dC.$$.fragment,c),u(cC.$$.fragment,c),u(mC.$$.fragment,c),u(gC.$$.fragment,c),u(hC.$$.fragment,c),u(uC.$$.fragment,c),u(pC.$$.fragment,c),u(_C.$$.fragment,c),u(bC.$$.fragment,c),u(FC.$$.fragment,c),u(TC.$$.fragment,c),u(MC.$$.fragment,c),u(EC.$$.fragment,c),u(CC.$$.fragment,c),u(AC.$$.fragment,c),u(yC.$$.fragment,c),u(LC.$$.fragment,c),u(xC.$$.fragment,c),u(kC.$$.fragment,c),u(SC.$$.fragment,c),u(BC.$$.fragment,c),u(PC.$$.fragment,c),u($C.$$.fragment,c),u(IC.$$.fragment,c),u(qC.$$.fragment,c),u(NC.$$.fragment,c),u(DC.$$.fragment,c),u(GC.$$.fragment,c),u(OC.$$.fragment,c),u(VC.$$.fragment,c),u(XC.$$.fragment,c),u(zC.$$.fragment,c),u(WC.$$.fragment,c),u(HC.$$.fragment,c),u(UC.$$.fragment,c),u(JC.$$.fragment,c),u(YC.$$.fragment,c),u(KC.$$.fragment,c),u(ew.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(nw.$$.fragment,c),u(lw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(fw.$$.fragment,c),u(mw.$$.fragment,c),u(hw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(vw.$$.fragment,c),u(bw.$$.fragment,c),u(Tw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(Cw.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(Lw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Sw.$$.fragment,c),u(Rw.$$.fragment,c),u(Bw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(qw.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Ow.$$.fragment,c),u(Vw.$$.fragment,c),u(Xw.$$.fragment,c),u(zw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(c6.$$.fragment,c),u(f6.$$.fragment,c),u(m6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(_6.$$.fragment,c),u(v6.$$.fragment,c),u(b6.$$.fragment,c),u(F6.$$.fragment,c),u(T6.$$.fragment,c),u(M6.$$.fragment,c),u(C6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(y6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(S6.$$.fragment,c),u(R6.$$.fragment,c),u(B6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(N6.$$.fragment,c),u(j6.$$.fragment,c),u(D6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(z6.$$.fragment,c),u(Q6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(K6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(FA.$$.fragment,c),u(TA.$$.fragment,c),u(EA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(yA.$$.fragment,c),u(LA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(qA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(VA.$$.fragment,c),u(XA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(fy.$$.fragment,c),u(my.$$.fragment,c),u(gy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(vy.$$.fragment,c),u(by.$$.fragment,c),u(Fy.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(Cy.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(yy.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Sy.$$.fragment,c),u(Ry.$$.fragment,c),u(By.$$.fragment,c),u(Py.$$.fragment,c),u(Iy.$$.fragment,c),u(qy.$$.fragment,c),u(Ny.$$.fragment,c),u(jy.$$.fragment,c),u(Dy.$$.fragment,c),u(Gy.$$.fragment,c),u(Vy.$$.fragment,c),u(Xy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Wy.$$.fragment,c),u(Hy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(Zy.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(cL.$$.fragment,c),u(fL.$$.fragment,c),u(mL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(_L.$$.fragment,c),u(vL.$$.fragment,c),u(bL.$$.fragment,c),u(FL.$$.fragment,c),u(TL.$$.fragment,c),u(ML.$$.fragment,c),u(CL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(xL.$$.fragment,c),u(SL.$$.fragment,c),u(RL.$$.fragment,c),u(BL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(NL.$$.fragment,c),u(jL.$$.fragment,c),u(DL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(VL.$$.fragment,c),u(zL.$$.fragment,c),u(QL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(e7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),NBe=!1},d(c){t(Z),c&&t(io),c&&t(de),p(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),p(Da,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(qSe),c&&t(Vi),p(b3),c&&t(NSe),c&&t(zn),c&&t(jSe),p(F3,c),c&&t(DSe),c&&t(mx),c&&t(GSe),p(Of,c),c&&t(OSe),c&&t(Xi),p(T3),c&&t(VSe),c&&t(Qo),p(M3),p(w3),p(A3),p(y3),c&&t(XSe),c&&t(Qi),p(L3),c&&t(zSe),c&&t(Wo),p(x3),p(R3),p(B3),p(P3),c&&t(QSe),c&&t(Wi),p($3),c&&t(WSe),c&&t(Ho),p(I3),p(j3),p(Rh),p(D3),p(G3),c&&t(HSe),c&&t(Hi),p(O3),c&&t(USe),c&&t(Uo),p(V3),p(Q3),p(Vh),p(W3),p(H3),c&&t(JSe),c&&t(Ji),p(U3),c&&t(YSe),c&&t(Jo),p(J3),p(K3),p(Z3),p(eC),p(oC),c&&t(KSe),c&&t(Zi),p(rC),c&&t(ZSe),c&&t(Yo),p(tC),p(nC),p(sC),p(lC),p(iC),c&&t(eRe),c&&t(rd),p(dC),c&&t(oRe),c&&t(Ko),p(cC),p(mC),p(gC),p(hC),p(uC),c&&t(rRe),c&&t(nd),p(pC),c&&t(tRe),c&&t(Zo),p(_C),p(bC),p(FC),p(TC),p(MC),c&&t(aRe),c&&t(id),p(EC),c&&t(nRe),c&&t(er),p(CC),p(AC),p(yC),p(LC),p(xC),c&&t(sRe),c&&t(fd),p(kC),c&&t(lRe),c&&t(or),p(SC),p(BC),p(PC),p($C),p(IC),c&&t(iRe),c&&t(hd),p(qC),c&&t(dRe),c&&t(rr),p(NC),p(DC),p(GC),p(OC),p(VC),c&&t(cRe),c&&t(_d),p(XC),c&&t(fRe),c&&t(tr),p(zC),p(WC),p(HC),p(UC),p(JC),c&&t(mRe),c&&t(Fd),p(YC),c&&t(gRe),c&&t(ar),p(KC),p(ew),p(ow),p(rw),p(tw),c&&t(hRe),c&&t(Ed),p(aw),c&&t(uRe),c&&t(nr),p(nw),p(lw),p(iw),p(dw),p(cw),c&&t(pRe),c&&t(Ad),p(fw),c&&t(_Re),c&&t(sr),p(mw),p(hw),p(uw),p(pw),p(_w),c&&t(vRe),c&&t(xd),p(vw),c&&t(bRe),c&&t(lr),p(bw),p(Tw),p(Mw),p(Ew),p(Cw),c&&t(FRe),c&&t(Rd),p(ww),c&&t(TRe),c&&t(ir),p(Aw),p(Lw),p(xw),p(kw),p(Sw),c&&t(MRe),c&&t($d),p(Rw),c&&t(ERe),c&&t(dr),p(Bw),p($w),p(Iw),p(qw),p(Nw),c&&t(CRe),c&&t(Nd),p(jw),c&&t(wRe),c&&t(cr),p(Dw),p(Ow),p(Vw),p(Xw),p(zw),c&&t(ARe),c&&t(Gd),p(Qw),c&&t(yRe),c&&t(fr),p(Ww),p(Uw),p(Jw),p(Yw),p(Kw),c&&t(LRe),c&&t(Xd),p(Zw),c&&t(xRe),c&&t(mr),p(e6),p(r6),p(t6),p(a6),p(s6),c&&t(kRe),c&&t(Wd),p(l6),c&&t(SRe),c&&t(gr),p(i6),p(c6),p(f6),p(m6),p(g6),c&&t(RRe),c&&t(Jd),p(h6),c&&t(BRe),c&&t(hr),p(u6),p(_6),p(v6),p(b6),p(F6),c&&t(PRe),c&&t(ec),p(T6),c&&t($Re),c&&t(ur),p(M6),p(C6),p(w6),p(A6),p(y6),c&&t(IRe),c&&t(tc),p(L6),c&&t(qRe),c&&t(pr),p(x6),p(S6),p(R6),p(B6),p(P6),c&&t(NRe),c&&t(sc),p($6),c&&t(jRe),c&&t(_r),p(I6),p(N6),p(j6),p(D6),p(G6),c&&t(DRe),c&&t(cc),p(O6),c&&t(GRe),c&&t(vr),p(V6),p(z6),p(Q6),p(W6),p(H6),c&&t(ORe),c&&t(gc),p(U6),c&&t(VRe),c&&t(br),p(J6),p(K6),p(Z6),p(eA),p(oA),c&&t(XRe),c&&t(pc),p(rA),c&&t(zRe),c&&t(Fr),p(tA),p(nA),p(sA),p(lA),p(iA),c&&t(QRe),c&&t(bc),p(dA),c&&t(WRe),c&&t(Tr),p(cA),p(mA),p(gA),p(hA),p(uA),c&&t(HRe),c&&t(Mc),p(pA),c&&t(URe),c&&t(Mr),p(_A),p(bA),p(FA),p(TA),p(EA),c&&t(JRe),c&&t(wc),p(CA),c&&t(YRe),c&&t(Er),p(wA),p(yA),p(LA),p(xA),p(kA),c&&t(KRe),c&&t(Lc),p(SA),c&&t(ZRe),c&&t(Cr),p(RA),p(PA),p($A),p(IA),p(qA),c&&t(eBe),c&&t(Sc),p(NA),c&&t(oBe),c&&t(wr),p(jA),p(GA),p(OA),p(VA),p(XA),c&&t(rBe),c&&t(Pc),p(zA),c&&t(tBe),c&&t(Ar),p(QA),p(HA),p(UA),p(JA),p(YA),c&&t(aBe),c&&t(qc),p(KA),c&&t(nBe),c&&t(yr),p(ZA),p(oy),p(ry),p(ty),p(ay),c&&t(sBe),c&&t(Dc),p(ny),c&&t(lBe),c&&t(Lr),p(sy),p(iy),p(dy),p(cy),p(fy),c&&t(iBe),c&&t(Vc),p(my),c&&t(dBe),c&&t(xr),p(gy),p(uy),p(py),p(_y),p(vy),c&&t(cBe),c&&t(Qc),p(by),c&&t(fBe),c&&t(kr),p(Fy),p(My),p(Ey),p(Cy),p(wy),c&&t(mBe),c&&t(Uc),p(Ay),c&&t(gBe),c&&t(Sr),p(yy),p(xy),p(ky),p(Sy),p(Ry),c&&t(hBe),c&&t(Kc),p(By),c&&t(uBe),c&&t(Rr),p(Py),p(Iy),p(qy),p(Ny),p(jy),c&&t(pBe),c&&t(of),p(Dy),c&&t(_Be),c&&t(Br),p(Gy),p(Vy),p(Xy),p(zy),p(Qy),c&&t(vBe),c&&t(af),p(Wy),c&&t(bBe),c&&t(Pr),p(Hy),p(Jy),p(Yy),p(Ky),p(Zy),c&&t(FBe),c&&t(lf),p(eL),c&&t(TBe),c&&t($r),p(oL),p(tL),p(aL),p(nL),p(sL),c&&t(MBe),c&&t(ff),p(lL),c&&t(EBe),c&&t(Ir),p(iL),p(cL),p(fL),p(mL),p(gL),c&&t(CBe),c&&t(hf),p(hL),c&&t(wBe),c&&t(qr),p(uL),p(_L),p(vL),p(bL),p(FL),c&&t(ABe),c&&t(_f),p(TL),c&&t(yBe),c&&t(Nr),p(ML),p(CL),p(wL),p(AL),p(yL),c&&t(LBe),c&&t(Ff),p(LL),c&&t(xBe),c&&t(jr),p(xL),p(SL),p(RL),p(BL),p(PL),c&&t(kBe),c&&t(Ef),p($L),c&&t(SBe),c&&t(Dr),p(IL),p(NL),p(jL),p(DL),p(GL),c&&t(RBe),c&&t(Af),p(OL),c&&t(BBe),c&&t(Gr),p(VL),p(zL),p(QL),p(WL),p(HL),c&&t(PBe),c&&t(xf),p(UL),c&&t($Be),c&&t(Or),p(JL),p(KL),p(ZL),p(e7),p(r7),c&&t(IBe),c&&t(Rf),p(t7),c&&t(qBe),c&&t(Vr),p(a7),p(s7),p(l7),p(i7),p(d7)}}}const n5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function s5t(If){return e5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class m5t extends JEt{constructor(Z){super();YEt(this,Z,s5t,a5t,KEt,{})}}export{m5t as default,n5t as metadata};
