import{S as c4t,i as f4t,s as m4t,e as a,k as l,w as f,t as o,M as g4t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as v,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as wAr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function h4t(Ai){let J,Be,ie,me,no,ce,_e,Go,Li,Ef,sa,Bi,xi,CE,yf,ye,io,ki,In,ME,Dn,jn,EE,Ri,Nn,yE,Si,wf,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),_e=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),CE=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),ME=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),EE=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),yE=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),ie=n(ge,"CODE",{});var l8=s(ie);me=r(l8,"NewModelConfig"),l8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);_e=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var i8=s(Li);Ef=r(i8,"model_type"),i8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var d8=s(Bi);xi=r(d8,'"new-model"'),d8.forEach(t),CE=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),ME=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var c8=s(Dn);jn=r(c8,"PreTrainedModel"),c8.forEach(t),EE=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),yE=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var f8=s(Si);wf=r(f8,"NewModelConfig"),f8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){v(co,J,ge),e(J,Be),e(J,ie),e(ie,me),e(J,no),e(J,ce),e(ce,_e),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,CE),v(co,yf,ge),v(co,ye,ge),e(ye,io),e(ye,ki),e(ki,In),e(ye,ME),e(ye,Dn),e(Dn,jn),e(ye,EE),e(ye,Ri),e(Ri,Nn),e(ye,yE),e(ye,Si),e(Si,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function u4t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var _e=s(J);Be=r(_e,"Passing "),ie=n(_e,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){v(ce,J,_e),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function p4t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var _e=s(J);Be=r(_e,"Passing "),ie=n(_e,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(_e," is required when you want to use a private model."),_e.forEach(t)},m(ce,_e){v(ce,J,_e),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function _4t(Ai){let J,Be,ie,me,no,ce,_e,Go,Li,Ef,sa,Bi,xi,CE,yf,ye,io,ki,In,ME,Dn,jn,EE,Ri,Nn,yE,Si,wf,$a,co,ge,l8,Pi,i8,d8,Oo,Ia,c8,Af,f8,$Re,y9e,$i,Lf,TW,wE,IRe,FW,DRe,w9e,qn,jRe,CW,NRe,qRe,MW,GRe,ORe,A9e,AE,L9e,m8,XRe,B9e,Bf,x9e,Ii,xf,EW,LE,VRe,yW,zRe,k9e,Xo,BE,WRe,xE,QRe,g8,HRe,URe,JRe,kE,YRe,wW,KRe,ZRe,eSe,fo,RE,oSe,AW,rSe,tSe,Di,aSe,LW,nSe,sSe,BW,lSe,iSe,dSe,b,kf,xW,cSe,fSe,h8,mSe,gSe,hSe,Rf,kW,uSe,pSe,u8,_Se,vSe,bSe,Sf,RW,TSe,FSe,p8,CSe,MSe,ESe,Pf,SW,ySe,wSe,_8,ASe,LSe,BSe,$f,PW,xSe,kSe,v8,RSe,SSe,PSe,If,$W,$Se,ISe,b8,DSe,jSe,NSe,Df,IW,qSe,GSe,T8,OSe,XSe,VSe,jf,DW,zSe,WSe,F8,QSe,HSe,USe,Nf,jW,JSe,YSe,C8,KSe,ZSe,ePe,qf,NW,oPe,rPe,M8,tPe,aPe,nPe,Gf,qW,sPe,lPe,E8,iPe,dPe,cPe,Of,GW,fPe,mPe,y8,gPe,hPe,uPe,Xf,OW,pPe,_Pe,w8,vPe,bPe,TPe,Vf,XW,FPe,CPe,A8,MPe,EPe,yPe,zf,VW,wPe,APe,L8,LPe,BPe,xPe,Wf,zW,kPe,RPe,B8,SPe,PPe,$Pe,Qf,WW,IPe,DPe,x8,jPe,NPe,qPe,Hf,QW,GPe,OPe,k8,XPe,VPe,zPe,Uf,HW,WPe,QPe,R8,HPe,UPe,JPe,Jf,UW,YPe,KPe,S8,ZPe,e$e,o$e,Yf,JW,r$e,t$e,P8,a$e,n$e,s$e,Kf,YW,l$e,i$e,$8,d$e,c$e,f$e,Zf,KW,m$e,g$e,I8,h$e,u$e,p$e,em,ZW,_$e,v$e,D8,b$e,T$e,F$e,om,eQ,C$e,M$e,j8,E$e,y$e,w$e,rm,oQ,A$e,L$e,N8,B$e,x$e,k$e,tm,rQ,R$e,S$e,q8,P$e,$$e,I$e,am,tQ,D$e,j$e,G8,N$e,q$e,G$e,nm,aQ,O$e,X$e,O8,V$e,z$e,W$e,sm,nQ,Q$e,H$e,X8,U$e,J$e,Y$e,lm,sQ,K$e,Z$e,V8,eIe,oIe,rIe,im,lQ,tIe,aIe,z8,nIe,sIe,lIe,dm,iQ,iIe,dIe,W8,cIe,fIe,mIe,cm,dQ,gIe,hIe,Q8,uIe,pIe,_Ie,fm,cQ,vIe,bIe,H8,TIe,FIe,CIe,mm,fQ,MIe,EIe,U8,yIe,wIe,AIe,gm,mQ,LIe,BIe,J8,xIe,kIe,RIe,hm,gQ,SIe,PIe,Y8,$Ie,IIe,DIe,um,hQ,jIe,NIe,K8,qIe,GIe,OIe,pm,uQ,XIe,VIe,Z8,zIe,WIe,QIe,_m,pQ,HIe,UIe,e9,JIe,YIe,KIe,vm,_Q,ZIe,eDe,o9,oDe,rDe,tDe,bm,vQ,aDe,nDe,r9,sDe,lDe,iDe,Tm,bQ,dDe,cDe,t9,fDe,mDe,gDe,Fm,TQ,hDe,uDe,a9,pDe,_De,vDe,Cm,FQ,bDe,TDe,n9,FDe,CDe,MDe,Mm,CQ,EDe,yDe,s9,wDe,ADe,LDe,Em,MQ,BDe,xDe,l9,kDe,RDe,SDe,ym,EQ,PDe,$De,i9,IDe,DDe,jDe,wm,yQ,NDe,qDe,d9,GDe,ODe,XDe,Am,wQ,VDe,zDe,c9,WDe,QDe,HDe,Lm,AQ,UDe,JDe,f9,YDe,KDe,ZDe,Bm,LQ,eje,oje,m9,rje,tje,aje,xm,BQ,nje,sje,g9,lje,ije,dje,km,xQ,cje,fje,h9,mje,gje,hje,Rm,kQ,uje,pje,u9,_je,vje,bje,Sm,RQ,Tje,Fje,p9,Cje,Mje,Eje,Pm,SQ,yje,wje,_9,Aje,Lje,Bje,$m,PQ,xje,kje,v9,Rje,Sje,Pje,Im,$Q,$je,Ije,b9,Dje,jje,Nje,Dm,IQ,qje,Gje,T9,Oje,Xje,Vje,jm,DQ,zje,Wje,F9,Qje,Hje,Uje,Nm,jQ,Jje,Yje,C9,Kje,Zje,eNe,qm,NQ,oNe,rNe,M9,tNe,aNe,nNe,Gm,qQ,sNe,lNe,E9,iNe,dNe,cNe,Om,GQ,fNe,mNe,y9,gNe,hNe,uNe,Xm,OQ,pNe,_Ne,w9,vNe,bNe,TNe,Vm,XQ,FNe,CNe,A9,MNe,ENe,yNe,zm,VQ,wNe,ANe,L9,LNe,BNe,xNe,Wm,zQ,kNe,RNe,B9,SNe,PNe,$Ne,Qm,WQ,INe,DNe,x9,jNe,NNe,qNe,Hm,QQ,GNe,ONe,k9,XNe,VNe,zNe,Um,HQ,WNe,QNe,R9,HNe,UNe,JNe,Jm,UQ,YNe,KNe,S9,ZNe,eqe,oqe,Ym,JQ,rqe,tqe,P9,aqe,nqe,sqe,Km,YQ,lqe,iqe,$9,dqe,cqe,fqe,Zm,KQ,mqe,gqe,I9,hqe,uqe,pqe,eg,ZQ,_qe,vqe,D9,bqe,Tqe,Fqe,og,eH,Cqe,Mqe,j9,Eqe,yqe,wqe,rg,oH,Aqe,Lqe,N9,Bqe,xqe,kqe,tg,rH,Rqe,Sqe,q9,Pqe,$qe,Iqe,ag,tH,Dqe,jqe,G9,Nqe,qqe,Gqe,ng,aH,Oqe,Xqe,O9,Vqe,zqe,Wqe,sg,nH,Qqe,Hqe,X9,Uqe,Jqe,Yqe,lg,sH,Kqe,Zqe,V9,eGe,oGe,rGe,ig,lH,tGe,aGe,z9,nGe,sGe,lGe,dg,iH,iGe,dGe,W9,cGe,fGe,mGe,cg,dH,gGe,hGe,Q9,uGe,pGe,_Ge,fg,cH,vGe,bGe,H9,TGe,FGe,CGe,mg,fH,MGe,EGe,U9,yGe,wGe,AGe,gg,mH,LGe,BGe,J9,xGe,kGe,RGe,hg,gH,SGe,PGe,Y9,$Ge,IGe,DGe,ug,hH,jGe,NGe,K9,qGe,GGe,OGe,pg,uH,XGe,VGe,Z9,zGe,WGe,QGe,pH,HGe,UGe,SE,JGe,_g,PE,YGe,_H,KGe,R9e,ji,vg,vH,$E,ZGe,bH,eOe,S9e,Vo,IE,oOe,DE,rOe,eB,tOe,aOe,nOe,jE,sOe,TH,lOe,iOe,dOe,mo,NE,cOe,FH,fOe,mOe,Da,gOe,CH,hOe,uOe,MH,pOe,_Oe,EH,vOe,bOe,TOe,M,Gn,yH,FOe,COe,oB,MOe,EOe,rB,yOe,wOe,AOe,On,wH,LOe,BOe,tB,xOe,kOe,aB,ROe,SOe,POe,Xn,AH,$Oe,IOe,nB,DOe,jOe,sB,NOe,qOe,GOe,bg,LH,OOe,XOe,lB,VOe,zOe,WOe,Vn,BH,QOe,HOe,iB,UOe,JOe,dB,YOe,KOe,ZOe,Tg,xH,eXe,oXe,cB,rXe,tXe,aXe,Fg,kH,nXe,sXe,fB,lXe,iXe,dXe,Cg,RH,cXe,fXe,mB,mXe,gXe,hXe,zn,SH,uXe,pXe,gB,_Xe,vXe,hB,bXe,TXe,FXe,Wn,PH,CXe,MXe,uB,EXe,yXe,pB,wXe,AXe,LXe,Qn,$H,BXe,xXe,_B,kXe,RXe,vB,SXe,PXe,$Xe,Mg,IH,IXe,DXe,bB,jXe,NXe,qXe,Eg,DH,GXe,OXe,TB,XXe,VXe,zXe,Hn,jH,WXe,QXe,FB,HXe,UXe,CB,JXe,YXe,KXe,yg,NH,ZXe,eVe,MB,oVe,rVe,tVe,Un,qH,aVe,nVe,EB,sVe,lVe,yB,iVe,dVe,cVe,Jn,GH,fVe,mVe,wB,gVe,hVe,AB,uVe,pVe,_Ve,Yn,OH,vVe,bVe,LB,TVe,FVe,XH,CVe,MVe,EVe,wg,VH,yVe,wVe,BB,AVe,LVe,BVe,Kn,zH,xVe,kVe,xB,RVe,SVe,kB,PVe,$Ve,IVe,Ag,WH,DVe,jVe,RB,NVe,qVe,GVe,Zn,QH,OVe,XVe,SB,VVe,zVe,PB,WVe,QVe,HVe,es,HH,UVe,JVe,$B,YVe,KVe,IB,ZVe,eze,oze,os,UH,rze,tze,DB,aze,nze,jB,sze,lze,ize,Lg,JH,dze,cze,NB,fze,mze,gze,rs,YH,hze,uze,qB,pze,_ze,GB,vze,bze,Tze,Bg,KH,Fze,Cze,OB,Mze,Eze,yze,ts,ZH,wze,Aze,XB,Lze,Bze,VB,xze,kze,Rze,as,eU,Sze,Pze,zB,$ze,Ize,WB,Dze,jze,Nze,ns,oU,qze,Gze,QB,Oze,Xze,HB,Vze,zze,Wze,ss,rU,Qze,Hze,UB,Uze,Jze,JB,Yze,Kze,Zze,xg,tU,eWe,oWe,YB,rWe,tWe,aWe,ls,aU,nWe,sWe,KB,lWe,iWe,ZB,dWe,cWe,fWe,is,nU,mWe,gWe,ex,hWe,uWe,ox,pWe,_We,vWe,ds,sU,bWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,cs,lU,wWe,AWe,ax,LWe,BWe,nx,xWe,kWe,RWe,fs,iU,SWe,PWe,sx,$We,IWe,lx,DWe,jWe,NWe,ms,dU,qWe,GWe,ix,OWe,XWe,dx,VWe,zWe,WWe,kg,cU,QWe,HWe,cx,UWe,JWe,YWe,gs,fU,KWe,ZWe,fx,eQe,oQe,mx,rQe,tQe,aQe,Rg,mU,nQe,sQe,gx,lQe,iQe,dQe,Sg,gU,cQe,fQe,hx,mQe,gQe,hQe,hs,hU,uQe,pQe,ux,_Qe,vQe,px,bQe,TQe,FQe,us,uU,CQe,MQe,_x,EQe,yQe,vx,wQe,AQe,LQe,Pg,pU,BQe,xQe,bx,kQe,RQe,SQe,ps,_U,PQe,$Qe,Tx,IQe,DQe,Fx,jQe,NQe,qQe,_s,vU,GQe,OQe,Cx,XQe,VQe,Mx,zQe,WQe,QQe,vs,bU,HQe,UQe,Ex,JQe,YQe,yx,KQe,ZQe,eHe,bs,TU,oHe,rHe,wx,tHe,aHe,Ax,nHe,sHe,lHe,Ts,FU,iHe,dHe,Lx,cHe,fHe,Bx,mHe,gHe,hHe,$g,CU,uHe,pHe,xx,_He,vHe,bHe,Ig,MU,THe,FHe,kx,CHe,MHe,EHe,Dg,EU,yHe,wHe,Rx,AHe,LHe,BHe,jg,yU,xHe,kHe,Sx,RHe,SHe,PHe,Fs,wU,$He,IHe,Px,DHe,jHe,$x,NHe,qHe,GHe,Ng,AU,OHe,XHe,Ix,VHe,zHe,WHe,Cs,LU,QHe,HHe,Dx,UHe,JHe,jx,YHe,KHe,ZHe,Ms,BU,eUe,oUe,Nx,rUe,tUe,qx,aUe,nUe,sUe,Es,xU,lUe,iUe,Gx,dUe,cUe,Ox,fUe,mUe,gUe,ys,kU,hUe,uUe,Xx,pUe,_Ue,Vx,vUe,bUe,TUe,ws,RU,FUe,CUe,zx,MUe,EUe,Wx,yUe,wUe,AUe,qg,SU,LUe,BUe,Qx,xUe,kUe,RUe,Gg,PU,SUe,PUe,Hx,$Ue,IUe,DUe,As,$U,jUe,NUe,Ux,qUe,GUe,Jx,OUe,XUe,VUe,Ls,IU,zUe,WUe,Yx,QUe,HUe,Kx,UUe,JUe,YUe,Bs,DU,KUe,ZUe,Zx,eJe,oJe,ek,rJe,tJe,aJe,Og,jU,nJe,sJe,ok,lJe,iJe,dJe,Xg,NU,cJe,fJe,rk,mJe,gJe,hJe,Vg,qU,uJe,pJe,tk,_Je,vJe,bJe,zg,GU,TJe,FJe,ak,CJe,MJe,EJe,xs,OU,yJe,wJe,nk,AJe,LJe,sk,BJe,xJe,kJe,Wg,XU,RJe,SJe,lk,PJe,$Je,IJe,Qg,VU,DJe,jJe,ik,NJe,qJe,GJe,ks,zU,OJe,XJe,dk,VJe,zJe,ck,WJe,QJe,HJe,Rs,WU,UJe,JJe,fk,YJe,KJe,mk,ZJe,eYe,oYe,QU,rYe,tYe,qE,aYe,Hg,GE,nYe,HU,sYe,P9e,Ni,Ug,UU,OE,lYe,JU,iYe,$9e,zo,XE,dYe,VE,cYe,gk,fYe,mYe,gYe,zE,hYe,YU,uYe,pYe,_Ye,xe,WE,vYe,KU,bYe,TYe,ja,FYe,ZU,CYe,MYe,eJ,EYe,yYe,oJ,wYe,AYe,LYe,se,Jg,rJ,BYe,xYe,hk,kYe,RYe,SYe,Yg,tJ,PYe,$Ye,uk,IYe,DYe,jYe,Kg,aJ,NYe,qYe,pk,GYe,OYe,XYe,Zg,nJ,VYe,zYe,_k,WYe,QYe,HYe,eh,sJ,UYe,JYe,vk,YYe,KYe,ZYe,oh,lJ,eKe,oKe,bk,rKe,tKe,aKe,rh,iJ,nKe,sKe,Tk,lKe,iKe,dKe,th,dJ,cKe,fKe,Fk,mKe,gKe,hKe,ah,cJ,uKe,pKe,Ck,_Ke,vKe,bKe,nh,fJ,TKe,FKe,Mk,CKe,MKe,EKe,sh,mJ,yKe,wKe,Ek,AKe,LKe,BKe,lh,gJ,xKe,kKe,yk,RKe,SKe,PKe,ih,hJ,$Ke,IKe,wk,DKe,jKe,NKe,dh,uJ,qKe,GKe,Ak,OKe,XKe,VKe,ch,pJ,zKe,WKe,Lk,QKe,HKe,UKe,fh,JKe,_J,YKe,KKe,QE,ZKe,mh,HE,eZe,vJ,oZe,I9e,qi,gh,bJ,UE,rZe,TJ,tZe,D9e,Wo,JE,aZe,YE,nZe,Bk,sZe,lZe,iZe,KE,dZe,FJ,cZe,fZe,mZe,ke,ZE,gZe,CJ,hZe,uZe,Gi,pZe,MJ,_Ze,vZe,EJ,bZe,TZe,FZe,we,hh,yJ,CZe,MZe,xk,EZe,yZe,wZe,uh,wJ,AZe,LZe,kk,BZe,xZe,kZe,ph,AJ,RZe,SZe,Rk,PZe,$Ze,IZe,_h,LJ,DZe,jZe,Sk,NZe,qZe,GZe,vh,BJ,OZe,XZe,Pk,VZe,zZe,WZe,bh,xJ,QZe,HZe,$k,UZe,JZe,YZe,Th,kJ,KZe,ZZe,Ik,eeo,oeo,reo,Fh,RJ,teo,aeo,Dk,neo,seo,leo,Ch,ieo,SJ,deo,ceo,e3,feo,Mh,o3,meo,PJ,geo,j9e,Oi,Eh,$J,r3,heo,IJ,ueo,N9e,Qo,t3,peo,Xi,_eo,DJ,veo,beo,jJ,Teo,Feo,Ceo,a3,Meo,NJ,Eeo,yeo,weo,qr,n3,Aeo,qJ,Leo,Beo,Vi,xeo,GJ,keo,Reo,OJ,Seo,Peo,$eo,XJ,Ieo,Deo,s3,jeo,Re,l3,Neo,VJ,qeo,Geo,Na,Oeo,zJ,Xeo,Veo,WJ,zeo,Weo,QJ,Qeo,Heo,Ueo,F,yh,HJ,Jeo,Yeo,jk,Keo,Zeo,eoo,wh,UJ,ooo,roo,Nk,too,aoo,noo,Ah,JJ,soo,loo,qk,ioo,doo,coo,Lh,YJ,foo,moo,Gk,goo,hoo,uoo,Bh,KJ,poo,_oo,Ok,voo,boo,Too,xh,ZJ,Foo,Coo,Xk,Moo,Eoo,yoo,kh,eY,woo,Aoo,Vk,Loo,Boo,xoo,Rh,oY,koo,Roo,zk,Soo,Poo,$oo,Sh,rY,Ioo,Doo,Wk,joo,Noo,qoo,Ph,tY,Goo,Ooo,Qk,Xoo,Voo,zoo,$h,aY,Woo,Qoo,Hk,Hoo,Uoo,Joo,Ih,nY,Yoo,Koo,Uk,Zoo,ero,oro,Dh,sY,rro,tro,Jk,aro,nro,sro,jh,lY,lro,iro,Yk,dro,cro,fro,Nh,iY,mro,gro,Kk,hro,uro,pro,qh,dY,_ro,vro,Zk,bro,Tro,Fro,Gh,cY,Cro,Mro,eR,Ero,yro,wro,Oh,fY,Aro,Lro,oR,Bro,xro,kro,Xh,mY,Rro,Sro,rR,Pro,$ro,Iro,Vh,gY,Dro,jro,tR,Nro,qro,Gro,zh,hY,Oro,Xro,aR,Vro,zro,Wro,Wh,uY,Qro,Hro,nR,Uro,Jro,Yro,Qh,pY,Kro,Zro,sR,eto,oto,rto,Hh,_Y,tto,ato,lR,nto,sto,lto,Uh,vY,ito,dto,iR,cto,fto,mto,Jh,bY,gto,hto,dR,uto,pto,_to,Yh,TY,vto,bto,cR,Tto,Fto,Cto,Ss,FY,Mto,Eto,fR,yto,wto,mR,Ato,Lto,Bto,Kh,CY,xto,kto,gR,Rto,Sto,Pto,Zh,MY,$to,Ito,hR,Dto,jto,Nto,eu,EY,qto,Gto,uR,Oto,Xto,Vto,ou,yY,zto,Wto,pR,Qto,Hto,Uto,ru,wY,Jto,Yto,_R,Kto,Zto,eao,tu,AY,oao,rao,vR,tao,aao,nao,au,LY,sao,lao,bR,iao,dao,cao,nu,BY,fao,mao,TR,gao,hao,uao,su,xY,pao,_ao,FR,vao,bao,Tao,lu,kY,Fao,Cao,CR,Mao,Eao,yao,iu,RY,wao,Aao,MR,Lao,Bao,xao,du,SY,kao,Rao,ER,Sao,Pao,$ao,cu,PY,Iao,Dao,yR,jao,Nao,qao,fu,$Y,Gao,Oao,wR,Xao,Vao,zao,mu,IY,Wao,Qao,AR,Hao,Uao,Jao,gu,DY,Yao,Kao,LR,Zao,eno,ono,hu,jY,rno,tno,BR,ano,nno,sno,uu,NY,lno,ino,xR,dno,cno,fno,pu,qY,mno,gno,kR,hno,uno,pno,_u,GY,_no,vno,RR,bno,Tno,Fno,vu,OY,Cno,Mno,SR,Eno,yno,wno,bu,XY,Ano,Lno,PR,Bno,xno,kno,Tu,VY,Rno,Sno,$R,Pno,$no,Ino,Fu,zY,Dno,jno,IR,Nno,qno,Gno,Cu,WY,Ono,Xno,DR,Vno,zno,Wno,Mu,QY,Qno,Hno,jR,Uno,Jno,Yno,Eu,HY,Kno,Zno,NR,eso,oso,rso,yu,UY,tso,aso,qR,nso,sso,lso,wu,JY,iso,dso,GR,cso,fso,mso,Au,YY,gso,hso,OR,uso,pso,_so,Lu,KY,vso,bso,XR,Tso,Fso,Cso,Bu,ZY,Mso,Eso,VR,yso,wso,Aso,xu,eK,Lso,Bso,zR,xso,kso,Rso,ku,oK,Sso,Pso,WR,$so,Iso,Dso,Ru,rK,jso,Nso,QR,qso,Gso,Oso,Su,tK,Xso,Vso,HR,zso,Wso,Qso,Pu,aK,Hso,Uso,UR,Jso,Yso,Kso,$u,nK,Zso,elo,JR,olo,rlo,tlo,Iu,sK,alo,nlo,YR,slo,llo,ilo,Du,lK,dlo,clo,KR,flo,mlo,glo,ju,iK,hlo,ulo,ZR,plo,_lo,vlo,Nu,dK,blo,Tlo,eS,Flo,Clo,Mlo,qu,cK,Elo,ylo,oS,wlo,Alo,Llo,Gu,fK,Blo,xlo,rS,klo,Rlo,Slo,Ou,mK,Plo,$lo,tS,Ilo,Dlo,jlo,Xu,gK,Nlo,qlo,aS,Glo,Olo,Xlo,Vu,hK,Vlo,zlo,nS,Wlo,Qlo,Hlo,zu,uK,Ulo,Jlo,sS,Ylo,Klo,Zlo,Wu,pK,eio,oio,lS,rio,tio,aio,Qu,_K,nio,sio,iS,lio,iio,dio,Hu,vK,cio,fio,dS,mio,gio,hio,Uu,bK,uio,pio,cS,_io,vio,bio,Ju,TK,Tio,Fio,fS,Cio,Mio,Eio,Yu,FK,yio,wio,mS,Aio,Lio,Bio,Ku,CK,xio,kio,gS,Rio,Sio,Pio,Zu,MK,$io,Iio,hS,Dio,jio,Nio,ep,EK,qio,Gio,uS,Oio,Xio,Vio,op,yK,zio,Wio,pS,Qio,Hio,Uio,rp,wK,Jio,Yio,_S,Kio,Zio,edo,tp,odo,AK,rdo,tdo,LK,ado,ndo,BK,sdo,ldo,i3,q9e,zi,ap,xK,d3,ido,kK,ddo,G9e,Ho,c3,cdo,Wi,fdo,RK,mdo,gdo,SK,hdo,udo,pdo,f3,_do,PK,vdo,bdo,Tdo,Gr,m3,Fdo,$K,Cdo,Mdo,Qi,Edo,IK,ydo,wdo,DK,Ado,Ldo,Bdo,jK,xdo,kdo,g3,Rdo,Se,h3,Sdo,NK,Pdo,$do,qa,Ido,qK,Ddo,jdo,GK,Ndo,qdo,OK,Gdo,Odo,Xdo,k,np,XK,Vdo,zdo,vS,Wdo,Qdo,Hdo,sp,VK,Udo,Jdo,bS,Ydo,Kdo,Zdo,lp,zK,eco,oco,TS,rco,tco,aco,ip,WK,nco,sco,FS,lco,ico,dco,dp,QK,cco,fco,CS,mco,gco,hco,cp,HK,uco,pco,MS,_co,vco,bco,fp,UK,Tco,Fco,ES,Cco,Mco,Eco,mp,JK,yco,wco,yS,Aco,Lco,Bco,gp,YK,xco,kco,wS,Rco,Sco,Pco,hp,KK,$co,Ico,AS,Dco,jco,Nco,up,ZK,qco,Gco,LS,Oco,Xco,Vco,pp,eZ,zco,Wco,BS,Qco,Hco,Uco,_p,oZ,Jco,Yco,xS,Kco,Zco,efo,vp,rZ,ofo,rfo,kS,tfo,afo,nfo,bp,tZ,sfo,lfo,RS,ifo,dfo,cfo,Tp,aZ,ffo,mfo,SS,gfo,hfo,ufo,Fp,nZ,pfo,_fo,PS,vfo,bfo,Tfo,Cp,sZ,Ffo,Cfo,$S,Mfo,Efo,yfo,Mp,lZ,wfo,Afo,IS,Lfo,Bfo,xfo,Ep,iZ,kfo,Rfo,DS,Sfo,Pfo,$fo,yp,dZ,Ifo,Dfo,jS,jfo,Nfo,qfo,wp,cZ,Gfo,Ofo,NS,Xfo,Vfo,zfo,Ap,fZ,Wfo,Qfo,qS,Hfo,Ufo,Jfo,Lp,mZ,Yfo,Kfo,GS,Zfo,emo,omo,Bp,gZ,rmo,tmo,OS,amo,nmo,smo,xp,hZ,lmo,imo,XS,dmo,cmo,fmo,kp,uZ,mmo,gmo,VS,hmo,umo,pmo,Rp,pZ,_mo,vmo,zS,bmo,Tmo,Fmo,Sp,_Z,Cmo,Mmo,WS,Emo,ymo,wmo,Pp,vZ,Amo,Lmo,QS,Bmo,xmo,kmo,$p,bZ,Rmo,Smo,HS,Pmo,$mo,Imo,Ip,TZ,Dmo,jmo,US,Nmo,qmo,Gmo,Dp,FZ,Omo,Xmo,JS,Vmo,zmo,Wmo,jp,CZ,Qmo,Hmo,YS,Umo,Jmo,Ymo,Np,MZ,Kmo,Zmo,KS,ego,ogo,rgo,qp,EZ,tgo,ago,ZS,ngo,sgo,lgo,Gp,yZ,igo,dgo,eP,cgo,fgo,mgo,Op,wZ,ggo,hgo,oP,ugo,pgo,_go,Xp,AZ,vgo,bgo,rP,Tgo,Fgo,Cgo,Vp,Mgo,LZ,Ego,ygo,BZ,wgo,Ago,xZ,Lgo,Bgo,u3,O9e,Hi,zp,kZ,p3,xgo,RZ,kgo,X9e,Uo,_3,Rgo,Ui,Sgo,SZ,Pgo,$go,PZ,Igo,Dgo,jgo,v3,Ngo,$Z,qgo,Ggo,Ogo,Or,b3,Xgo,IZ,Vgo,zgo,Ji,Wgo,DZ,Qgo,Hgo,jZ,Ugo,Jgo,Ygo,NZ,Kgo,Zgo,T3,eho,Pe,F3,oho,qZ,rho,tho,Ga,aho,GZ,nho,sho,OZ,lho,iho,XZ,dho,cho,fho,$,Wp,VZ,mho,gho,tP,hho,uho,pho,Qp,zZ,_ho,vho,aP,bho,Tho,Fho,Hp,WZ,Cho,Mho,nP,Eho,yho,who,Up,QZ,Aho,Lho,sP,Bho,xho,kho,Jp,HZ,Rho,Sho,lP,Pho,$ho,Iho,Yp,UZ,Dho,jho,iP,Nho,qho,Gho,Kp,JZ,Oho,Xho,dP,Vho,zho,Who,Zp,YZ,Qho,Hho,cP,Uho,Jho,Yho,e_,KZ,Kho,Zho,fP,euo,ouo,ruo,o_,ZZ,tuo,auo,mP,nuo,suo,luo,r_,eee,iuo,duo,gP,cuo,fuo,muo,t_,oee,guo,huo,hP,uuo,puo,_uo,a_,ree,vuo,buo,uP,Tuo,Fuo,Cuo,n_,tee,Muo,Euo,pP,yuo,wuo,Auo,s_,aee,Luo,Buo,_P,xuo,kuo,Ruo,l_,nee,Suo,Puo,vP,$uo,Iuo,Duo,i_,see,juo,Nuo,bP,quo,Guo,Ouo,d_,lee,Xuo,Vuo,TP,zuo,Wuo,Quo,c_,iee,Huo,Uuo,FP,Juo,Yuo,Kuo,f_,dee,Zuo,epo,CP,opo,rpo,tpo,m_,cee,apo,npo,MP,spo,lpo,ipo,g_,fee,dpo,cpo,EP,fpo,mpo,gpo,h_,mee,hpo,upo,yP,ppo,_po,vpo,u_,gee,bpo,Tpo,wP,Fpo,Cpo,Mpo,p_,hee,Epo,ypo,AP,wpo,Apo,Lpo,__,uee,Bpo,xpo,LP,kpo,Rpo,Spo,v_,pee,Ppo,$po,BP,Ipo,Dpo,jpo,b_,_ee,Npo,qpo,xP,Gpo,Opo,Xpo,T_,vee,Vpo,zpo,kP,Wpo,Qpo,Hpo,F_,bee,Upo,Jpo,RP,Ypo,Kpo,Zpo,C_,Tee,e_o,o_o,SP,r_o,t_o,a_o,M_,Fee,n_o,s_o,PP,l_o,i_o,d_o,E_,Cee,c_o,f_o,$P,m_o,g_o,h_o,y_,Mee,u_o,p_o,IP,__o,v_o,b_o,w_,Eee,T_o,F_o,DP,C_o,M_o,E_o,A_,y_o,yee,w_o,A_o,wee,L_o,B_o,Aee,x_o,k_o,C3,V9e,Yi,L_,Lee,M3,R_o,Bee,S_o,z9e,Jo,E3,P_o,Ki,$_o,xee,I_o,D_o,kee,j_o,N_o,q_o,y3,G_o,Ree,O_o,X_o,V_o,Xr,w3,z_o,See,W_o,Q_o,Zi,H_o,Pee,U_o,J_o,$ee,Y_o,K_o,Z_o,Iee,evo,ovo,A3,rvo,$e,L3,tvo,Dee,avo,nvo,Oa,svo,jee,lvo,ivo,Nee,dvo,cvo,qee,fvo,mvo,gvo,I,B_,Gee,hvo,uvo,jP,pvo,_vo,vvo,x_,Oee,bvo,Tvo,NP,Fvo,Cvo,Mvo,k_,Xee,Evo,yvo,qP,wvo,Avo,Lvo,R_,Vee,Bvo,xvo,GP,kvo,Rvo,Svo,S_,zee,Pvo,$vo,OP,Ivo,Dvo,jvo,P_,Wee,Nvo,qvo,XP,Gvo,Ovo,Xvo,$_,Qee,Vvo,zvo,VP,Wvo,Qvo,Hvo,I_,Hee,Uvo,Jvo,zP,Yvo,Kvo,Zvo,D_,Uee,e1o,o1o,WP,r1o,t1o,a1o,j_,Jee,n1o,s1o,QP,l1o,i1o,d1o,N_,Yee,c1o,f1o,HP,m1o,g1o,h1o,q_,Kee,u1o,p1o,UP,_1o,v1o,b1o,G_,Zee,T1o,F1o,JP,C1o,M1o,E1o,O_,eoe,y1o,w1o,YP,A1o,L1o,B1o,X_,ooe,x1o,k1o,KP,R1o,S1o,P1o,V_,roe,$1o,I1o,ZP,D1o,j1o,N1o,z_,toe,q1o,G1o,e$,O1o,X1o,V1o,W_,aoe,z1o,W1o,o$,Q1o,H1o,U1o,Q_,noe,J1o,Y1o,r$,K1o,Z1o,e4o,H_,soe,o4o,r4o,t$,t4o,a4o,n4o,U_,loe,s4o,l4o,a$,i4o,d4o,c4o,J_,ioe,f4o,m4o,n$,g4o,h4o,u4o,Y_,doe,p4o,_4o,s$,v4o,b4o,T4o,K_,coe,F4o,C4o,l$,M4o,E4o,y4o,Z_,foe,w4o,A4o,i$,L4o,B4o,x4o,ev,moe,k4o,R4o,d$,S4o,P4o,$4o,ov,goe,I4o,D4o,c$,j4o,N4o,q4o,rv,hoe,G4o,O4o,f$,X4o,V4o,z4o,tv,uoe,W4o,Q4o,m$,H4o,U4o,J4o,av,poe,Y4o,K4o,g$,Z4o,ebo,obo,nv,_oe,rbo,tbo,voe,abo,nbo,sbo,sv,boe,lbo,ibo,h$,dbo,cbo,fbo,lv,Toe,mbo,gbo,u$,hbo,ubo,pbo,iv,Foe,_bo,vbo,p$,bbo,Tbo,Fbo,dv,Coe,Cbo,Mbo,_$,Ebo,ybo,wbo,cv,Abo,Moe,Lbo,Bbo,Eoe,xbo,kbo,yoe,Rbo,Sbo,B3,W9e,ed,fv,woe,x3,Pbo,Aoe,$bo,Q9e,Yo,k3,Ibo,od,Dbo,Loe,jbo,Nbo,Boe,qbo,Gbo,Obo,R3,Xbo,xoe,Vbo,zbo,Wbo,Vr,S3,Qbo,koe,Hbo,Ubo,rd,Jbo,Roe,Ybo,Kbo,Soe,Zbo,e2o,o2o,Poe,r2o,t2o,P3,a2o,Ie,$3,n2o,$oe,s2o,l2o,Xa,i2o,Ioe,d2o,c2o,Doe,f2o,m2o,joe,g2o,h2o,u2o,ae,mv,Noe,p2o,_2o,v$,v2o,b2o,T2o,gv,qoe,F2o,C2o,b$,M2o,E2o,y2o,hv,Goe,w2o,A2o,T$,L2o,B2o,x2o,uv,Ooe,k2o,R2o,F$,S2o,P2o,$2o,pv,Xoe,I2o,D2o,C$,j2o,N2o,q2o,_v,Voe,G2o,O2o,M$,X2o,V2o,z2o,vv,zoe,W2o,Q2o,E$,H2o,U2o,J2o,bv,Woe,Y2o,K2o,y$,Z2o,e0o,o0o,Tv,Qoe,r0o,t0o,w$,a0o,n0o,s0o,Fv,Hoe,l0o,i0o,A$,d0o,c0o,f0o,Cv,Uoe,m0o,g0o,L$,h0o,u0o,p0o,Mv,Joe,_0o,v0o,B$,b0o,T0o,F0o,Ev,Yoe,C0o,M0o,x$,E0o,y0o,w0o,yv,Koe,A0o,L0o,k$,B0o,x0o,k0o,wv,Zoe,R0o,S0o,R$,P0o,$0o,I0o,Av,ere,D0o,j0o,S$,N0o,q0o,G0o,Lv,O0o,ore,X0o,V0o,rre,z0o,W0o,tre,Q0o,H0o,I3,H9e,td,Bv,are,D3,U0o,nre,J0o,U9e,Ko,j3,Y0o,ad,K0o,sre,Z0o,eTo,lre,oTo,rTo,tTo,N3,aTo,ire,nTo,sTo,lTo,zr,q3,iTo,dre,dTo,cTo,nd,fTo,cre,mTo,gTo,fre,hTo,uTo,pTo,mre,_To,vTo,G3,bTo,De,O3,TTo,gre,FTo,CTo,Va,MTo,hre,ETo,yTo,ure,wTo,ATo,pre,LTo,BTo,xTo,A,xv,_re,kTo,RTo,P$,STo,PTo,$To,kv,vre,ITo,DTo,$$,jTo,NTo,qTo,Rv,bre,GTo,OTo,I$,XTo,VTo,zTo,Sv,Tre,WTo,QTo,D$,HTo,UTo,JTo,Pv,Fre,YTo,KTo,j$,ZTo,e7o,o7o,$v,Cre,r7o,t7o,N$,a7o,n7o,s7o,Iv,Mre,l7o,i7o,q$,d7o,c7o,f7o,Dv,Ere,m7o,g7o,G$,h7o,u7o,p7o,jv,yre,_7o,v7o,O$,b7o,T7o,F7o,Nv,wre,C7o,M7o,X$,E7o,y7o,w7o,qv,Are,A7o,L7o,V$,B7o,x7o,k7o,Gv,Lre,R7o,S7o,z$,P7o,$7o,I7o,Ov,Bre,D7o,j7o,W$,N7o,q7o,G7o,Xv,xre,O7o,X7o,Q$,V7o,z7o,W7o,Vv,kre,Q7o,H7o,H$,U7o,J7o,Y7o,zv,Rre,K7o,Z7o,U$,eFo,oFo,rFo,Wv,Sre,tFo,aFo,J$,nFo,sFo,lFo,Qv,Pre,iFo,dFo,Y$,cFo,fFo,mFo,Hv,$re,gFo,hFo,K$,uFo,pFo,_Fo,Uv,Ire,vFo,bFo,Z$,TFo,FFo,CFo,Jv,Dre,MFo,EFo,eI,yFo,wFo,AFo,Yv,jre,LFo,BFo,oI,xFo,kFo,RFo,Kv,Nre,SFo,PFo,rI,$Fo,IFo,DFo,Zv,qre,jFo,NFo,tI,qFo,GFo,OFo,e1,Gre,XFo,VFo,aI,zFo,WFo,QFo,o1,Ore,HFo,UFo,nI,JFo,YFo,KFo,r1,Xre,ZFo,eCo,sI,oCo,rCo,tCo,t1,Vre,aCo,nCo,lI,sCo,lCo,iCo,a1,zre,dCo,cCo,iI,fCo,mCo,gCo,n1,Wre,hCo,uCo,dI,pCo,_Co,vCo,s1,Qre,bCo,TCo,cI,FCo,CCo,MCo,l1,Hre,ECo,yCo,fI,wCo,ACo,LCo,i1,Ure,BCo,xCo,mI,kCo,RCo,SCo,d1,Jre,PCo,$Co,gI,ICo,DCo,jCo,c1,Yre,NCo,qCo,hI,GCo,OCo,XCo,f1,Kre,VCo,zCo,uI,WCo,QCo,HCo,m1,Zre,UCo,JCo,pI,YCo,KCo,ZCo,g1,ete,eMo,oMo,_I,rMo,tMo,aMo,h1,ote,nMo,sMo,vI,lMo,iMo,dMo,u1,rte,cMo,fMo,bI,mMo,gMo,hMo,p1,tte,uMo,pMo,TI,_Mo,vMo,bMo,_1,ate,TMo,FMo,FI,CMo,MMo,EMo,v1,nte,yMo,wMo,CI,AMo,LMo,BMo,b1,ste,xMo,kMo,MI,RMo,SMo,PMo,T1,lte,$Mo,IMo,EI,DMo,jMo,NMo,F1,ite,qMo,GMo,yI,OMo,XMo,VMo,C1,zMo,dte,WMo,QMo,cte,HMo,UMo,fte,JMo,YMo,X3,J9e,sd,M1,mte,V3,KMo,gte,ZMo,Y9e,Zo,z3,eEo,ld,oEo,hte,rEo,tEo,ute,aEo,nEo,sEo,W3,lEo,pte,iEo,dEo,cEo,Wr,Q3,fEo,_te,mEo,gEo,id,hEo,vte,uEo,pEo,bte,_Eo,vEo,bEo,Tte,TEo,FEo,H3,CEo,je,U3,MEo,Fte,EEo,yEo,za,wEo,Cte,AEo,LEo,Mte,BEo,xEo,Ete,kEo,REo,SEo,G,E1,yte,PEo,$Eo,wI,IEo,DEo,jEo,y1,wte,NEo,qEo,AI,GEo,OEo,XEo,w1,Ate,VEo,zEo,LI,WEo,QEo,HEo,A1,Lte,UEo,JEo,BI,YEo,KEo,ZEo,L1,Bte,e3o,o3o,xI,r3o,t3o,a3o,B1,xte,n3o,s3o,kI,l3o,i3o,d3o,x1,kte,c3o,f3o,RI,m3o,g3o,h3o,k1,Rte,u3o,p3o,SI,_3o,v3o,b3o,R1,Ste,T3o,F3o,PI,C3o,M3o,E3o,S1,Pte,y3o,w3o,$I,A3o,L3o,B3o,P1,$te,x3o,k3o,II,R3o,S3o,P3o,$1,Ite,$3o,I3o,DI,D3o,j3o,N3o,I1,Dte,q3o,G3o,jI,O3o,X3o,V3o,D1,jte,z3o,W3o,NI,Q3o,H3o,U3o,j1,Nte,J3o,Y3o,qI,K3o,Z3o,e5o,N1,qte,o5o,r5o,GI,t5o,a5o,n5o,q1,Gte,s5o,l5o,OI,i5o,d5o,c5o,G1,Ote,f5o,m5o,XI,g5o,h5o,u5o,O1,Xte,p5o,_5o,VI,v5o,b5o,T5o,X1,Vte,F5o,C5o,zI,M5o,E5o,y5o,V1,zte,w5o,A5o,WI,L5o,B5o,x5o,z1,Wte,k5o,R5o,QI,S5o,P5o,$5o,W1,Qte,I5o,D5o,HI,j5o,N5o,q5o,Q1,Hte,G5o,O5o,UI,X5o,V5o,z5o,H1,Ute,W5o,Q5o,JI,H5o,U5o,J5o,U1,Jte,Y5o,K5o,YI,Z5o,eyo,oyo,J1,Yte,ryo,tyo,KI,ayo,nyo,syo,Y1,Kte,lyo,iyo,ZI,dyo,cyo,fyo,K1,myo,Zte,gyo,hyo,eae,uyo,pyo,oae,_yo,vyo,J3,K9e,dd,Z1,rae,Y3,byo,tae,Tyo,Z9e,er,K3,Fyo,cd,Cyo,aae,Myo,Eyo,nae,yyo,wyo,Ayo,Z3,Lyo,sae,Byo,xyo,kyo,Qr,e5,Ryo,lae,Syo,Pyo,fd,$yo,iae,Iyo,Dyo,dae,jyo,Nyo,qyo,cae,Gyo,Oyo,o5,Xyo,Ne,r5,Vyo,fae,zyo,Wyo,Wa,Qyo,mae,Hyo,Uyo,gae,Jyo,Yyo,hae,Kyo,Zyo,ewo,na,e4,uae,owo,rwo,eD,two,awo,nwo,o4,pae,swo,lwo,oD,iwo,dwo,cwo,r4,_ae,fwo,mwo,rD,gwo,hwo,uwo,t4,vae,pwo,_wo,tD,vwo,bwo,Two,a4,bae,Fwo,Cwo,aD,Mwo,Ewo,ywo,n4,wwo,Tae,Awo,Lwo,Fae,Bwo,xwo,Cae,kwo,Rwo,t5,eBe,md,s4,Mae,a5,Swo,Eae,Pwo,oBe,or,n5,$wo,gd,Iwo,yae,Dwo,jwo,wae,Nwo,qwo,Gwo,s5,Owo,Aae,Xwo,Vwo,zwo,Hr,l5,Wwo,Lae,Qwo,Hwo,hd,Uwo,Bae,Jwo,Ywo,xae,Kwo,Zwo,e6o,kae,o6o,r6o,i5,t6o,qe,d5,a6o,Rae,n6o,s6o,Qa,l6o,Sae,i6o,d6o,Pae,c6o,f6o,$ae,m6o,g6o,h6o,N,l4,Iae,u6o,p6o,nD,_6o,v6o,b6o,i4,Dae,T6o,F6o,sD,C6o,M6o,E6o,d4,jae,y6o,w6o,lD,A6o,L6o,B6o,c4,Nae,x6o,k6o,iD,R6o,S6o,P6o,f4,qae,$6o,I6o,dD,D6o,j6o,N6o,m4,Gae,q6o,G6o,cD,O6o,X6o,V6o,g4,Oae,z6o,W6o,fD,Q6o,H6o,U6o,h4,Xae,J6o,Y6o,mD,K6o,Z6o,eAo,u4,Vae,oAo,rAo,gD,tAo,aAo,nAo,p4,zae,sAo,lAo,hD,iAo,dAo,cAo,_4,Wae,fAo,mAo,uD,gAo,hAo,uAo,v4,Qae,pAo,_Ao,pD,vAo,bAo,TAo,b4,Hae,FAo,CAo,_D,MAo,EAo,yAo,T4,Uae,wAo,AAo,vD,LAo,BAo,xAo,F4,Jae,kAo,RAo,bD,SAo,PAo,$Ao,C4,Yae,IAo,DAo,TD,jAo,NAo,qAo,M4,Kae,GAo,OAo,FD,XAo,VAo,zAo,E4,Zae,WAo,QAo,CD,HAo,UAo,JAo,y4,ene,YAo,KAo,MD,ZAo,eLo,oLo,w4,one,rLo,tLo,ED,aLo,nLo,sLo,A4,rne,lLo,iLo,yD,dLo,cLo,fLo,L4,tne,mLo,gLo,wD,hLo,uLo,pLo,B4,ane,_Lo,vLo,AD,bLo,TLo,FLo,x4,nne,CLo,MLo,LD,ELo,yLo,wLo,k4,sne,ALo,LLo,BD,BLo,xLo,kLo,R4,lne,RLo,SLo,xD,PLo,$Lo,ILo,S4,ine,DLo,jLo,kD,NLo,qLo,GLo,P4,dne,OLo,XLo,RD,VLo,zLo,WLo,$4,cne,QLo,HLo,SD,ULo,JLo,YLo,I4,fne,KLo,ZLo,PD,e8o,o8o,r8o,D4,mne,t8o,a8o,$D,n8o,s8o,l8o,j4,gne,i8o,d8o,ID,c8o,f8o,m8o,N4,hne,g8o,h8o,DD,u8o,p8o,_8o,q4,v8o,une,b8o,T8o,pne,F8o,C8o,_ne,M8o,E8o,c5,rBe,ud,G4,vne,f5,y8o,bne,w8o,tBe,rr,m5,A8o,pd,L8o,Tne,B8o,x8o,Fne,k8o,R8o,S8o,g5,P8o,Cne,$8o,I8o,D8o,Ur,h5,j8o,Mne,N8o,q8o,_d,G8o,Ene,O8o,X8o,yne,V8o,z8o,W8o,wne,Q8o,H8o,u5,U8o,Ge,p5,J8o,Ane,Y8o,K8o,Ha,Z8o,Lne,e9o,o9o,Bne,r9o,t9o,xne,a9o,n9o,s9o,R,O4,kne,l9o,i9o,jD,d9o,c9o,f9o,X4,Rne,m9o,g9o,ND,h9o,u9o,p9o,V4,Sne,_9o,v9o,qD,b9o,T9o,F9o,z4,Pne,C9o,M9o,GD,E9o,y9o,w9o,W4,$ne,A9o,L9o,OD,B9o,x9o,k9o,Q4,Ine,R9o,S9o,XD,P9o,$9o,I9o,H4,Dne,D9o,j9o,VD,N9o,q9o,G9o,U4,jne,O9o,X9o,zD,V9o,z9o,W9o,J4,Nne,Q9o,H9o,WD,U9o,J9o,Y9o,Y4,qne,K9o,Z9o,QD,eBo,oBo,rBo,K4,Gne,tBo,aBo,HD,nBo,sBo,lBo,Z4,One,iBo,dBo,UD,cBo,fBo,mBo,eb,Xne,gBo,hBo,JD,uBo,pBo,_Bo,ob,Vne,vBo,bBo,YD,TBo,FBo,CBo,rb,zne,MBo,EBo,KD,yBo,wBo,ABo,tb,Wne,LBo,BBo,ZD,xBo,kBo,RBo,ab,Qne,SBo,PBo,ej,$Bo,IBo,DBo,nb,Hne,jBo,NBo,oj,qBo,GBo,OBo,sb,Une,XBo,VBo,rj,zBo,WBo,QBo,lb,Jne,HBo,UBo,tj,JBo,YBo,KBo,ib,Yne,ZBo,exo,aj,oxo,rxo,txo,db,Kne,axo,nxo,nj,sxo,lxo,ixo,cb,Zne,dxo,cxo,sj,fxo,mxo,gxo,fb,ese,hxo,uxo,lj,pxo,_xo,vxo,mb,ose,bxo,Txo,ij,Fxo,Cxo,Mxo,gb,rse,Exo,yxo,dj,wxo,Axo,Lxo,hb,tse,Bxo,xxo,cj,kxo,Rxo,Sxo,ub,ase,Pxo,$xo,fj,Ixo,Dxo,jxo,pb,nse,Nxo,qxo,mj,Gxo,Oxo,Xxo,_b,sse,Vxo,zxo,gj,Wxo,Qxo,Hxo,vb,lse,Uxo,Jxo,hj,Yxo,Kxo,Zxo,bb,ise,eko,oko,uj,rko,tko,ako,Tb,dse,nko,sko,pj,lko,iko,dko,Fb,cse,cko,fko,_j,mko,gko,hko,Cb,fse,uko,pko,vj,_ko,vko,bko,Mb,mse,Tko,Fko,bj,Cko,Mko,Eko,Eb,gse,yko,wko,Tj,Ako,Lko,Bko,yb,hse,xko,kko,Fj,Rko,Sko,Pko,wb,use,$ko,Iko,Cj,Dko,jko,Nko,Ab,qko,pse,Gko,Oko,_se,Xko,Vko,vse,zko,Wko,_5,aBe,vd,Lb,bse,v5,Qko,Tse,Hko,nBe,tr,b5,Uko,bd,Jko,Fse,Yko,Kko,Cse,Zko,eRo,oRo,T5,rRo,Mse,tRo,aRo,nRo,Jr,F5,sRo,Ese,lRo,iRo,Td,dRo,yse,cRo,fRo,wse,mRo,gRo,hRo,Ase,uRo,pRo,C5,_Ro,Oe,M5,vRo,Lse,bRo,TRo,Ua,FRo,Bse,CRo,MRo,xse,ERo,yRo,kse,wRo,ARo,LRo,Rse,Bb,Sse,BRo,xRo,Mj,kRo,RRo,SRo,xb,PRo,Pse,$Ro,IRo,$se,DRo,jRo,Ise,NRo,qRo,E5,sBe,Fd,kb,Dse,y5,GRo,jse,ORo,lBe,ar,w5,XRo,Cd,VRo,Nse,zRo,WRo,qse,QRo,HRo,URo,A5,JRo,Gse,YRo,KRo,ZRo,Yr,L5,eSo,Ose,oSo,rSo,Md,tSo,Xse,aSo,nSo,Vse,sSo,lSo,iSo,zse,dSo,cSo,B5,fSo,Xe,x5,mSo,Wse,gSo,hSo,Ja,uSo,Qse,pSo,_So,Hse,vSo,bSo,Use,TSo,FSo,CSo,ve,Rb,Jse,MSo,ESo,Ej,ySo,wSo,ASo,Sb,Yse,LSo,BSo,yj,xSo,kSo,RSo,Ps,Kse,SSo,PSo,wj,$So,ISo,Aj,DSo,jSo,NSo,Pb,Zse,qSo,GSo,Lj,OSo,XSo,VSo,la,ele,zSo,WSo,Bj,QSo,HSo,xj,USo,JSo,kj,YSo,KSo,ZSo,$b,ole,ePo,oPo,Rj,rPo,tPo,aPo,Ib,rle,nPo,sPo,Sj,lPo,iPo,dPo,Db,tle,cPo,fPo,Pj,mPo,gPo,hPo,jb,ale,uPo,pPo,$j,_Po,vPo,bPo,Nb,TPo,nle,FPo,CPo,sle,MPo,EPo,lle,yPo,wPo,k5,iBe,Ed,qb,ile,R5,APo,dle,LPo,dBe,nr,S5,BPo,yd,xPo,cle,kPo,RPo,fle,SPo,PPo,$Po,P5,IPo,mle,DPo,jPo,NPo,Kr,$5,qPo,gle,GPo,OPo,wd,XPo,hle,VPo,zPo,ule,WPo,QPo,HPo,ple,UPo,JPo,I5,YPo,Ve,D5,KPo,_le,ZPo,e$o,Ya,o$o,vle,r$o,t$o,ble,a$o,n$o,Tle,s$o,l$o,i$o,Fle,Gb,Cle,d$o,c$o,Ij,f$o,m$o,g$o,Ob,h$o,Mle,u$o,p$o,Ele,_$o,v$o,yle,b$o,T$o,j5,cBe,Ad,Xb,wle,N5,F$o,Ale,C$o,fBe,sr,q5,M$o,Ld,E$o,Lle,y$o,w$o,Ble,A$o,L$o,B$o,G5,x$o,xle,k$o,R$o,S$o,Zr,O5,P$o,kle,$$o,I$o,Bd,D$o,Rle,j$o,N$o,Sle,q$o,G$o,O$o,Ple,X$o,V$o,X5,z$o,ze,V5,W$o,$le,Q$o,H$o,Ka,U$o,Ile,J$o,Y$o,Dle,K$o,Z$o,jle,eIo,oIo,rIo,Ae,Vb,Nle,tIo,aIo,Dj,nIo,sIo,lIo,zb,qle,iIo,dIo,jj,cIo,fIo,mIo,Wb,Gle,gIo,hIo,Nj,uIo,pIo,_Io,Qb,Ole,vIo,bIo,qj,TIo,FIo,CIo,Hb,Xle,MIo,EIo,Gj,yIo,wIo,AIo,Ub,Vle,LIo,BIo,Oj,xIo,kIo,RIo,Jb,zle,SIo,PIo,Xj,$Io,IIo,DIo,Yb,Wle,jIo,NIo,Vj,qIo,GIo,OIo,Kb,XIo,Qle,VIo,zIo,Hle,WIo,QIo,Ule,HIo,UIo,z5,mBe,xd,Zb,Jle,W5,JIo,Yle,YIo,gBe,lr,Q5,KIo,kd,ZIo,Kle,eDo,oDo,Zle,rDo,tDo,aDo,H5,nDo,eie,sDo,lDo,iDo,et,U5,dDo,oie,cDo,fDo,Rd,mDo,rie,gDo,hDo,tie,uDo,pDo,_Do,aie,vDo,bDo,J5,TDo,We,Y5,FDo,nie,CDo,MDo,Za,EDo,sie,yDo,wDo,lie,ADo,LDo,iie,BDo,xDo,kDo,en,e2,die,RDo,SDo,zj,PDo,$Do,IDo,o2,cie,DDo,jDo,Wj,NDo,qDo,GDo,r2,fie,ODo,XDo,Qj,VDo,zDo,WDo,t2,mie,QDo,HDo,Hj,UDo,JDo,YDo,a2,KDo,gie,ZDo,ejo,hie,ojo,rjo,uie,tjo,ajo,K5,hBe,Sd,n2,pie,Z5,njo,_ie,sjo,uBe,ir,ey,ljo,Pd,ijo,vie,djo,cjo,bie,fjo,mjo,gjo,oy,hjo,Tie,ujo,pjo,_jo,ot,ry,vjo,Fie,bjo,Tjo,$d,Fjo,Cie,Cjo,Mjo,Mie,Ejo,yjo,wjo,Eie,Ajo,Ljo,ty,Bjo,Qe,ay,xjo,yie,kjo,Rjo,on,Sjo,wie,Pjo,$jo,Aie,Ijo,Djo,Lie,jjo,Njo,qjo,Le,s2,Bie,Gjo,Ojo,Uj,Xjo,Vjo,zjo,l2,xie,Wjo,Qjo,Jj,Hjo,Ujo,Jjo,i2,kie,Yjo,Kjo,Yj,Zjo,eNo,oNo,d2,Rie,rNo,tNo,Kj,aNo,nNo,sNo,c2,Sie,lNo,iNo,Zj,dNo,cNo,fNo,f2,Pie,mNo,gNo,eN,hNo,uNo,pNo,m2,$ie,_No,vNo,oN,bNo,TNo,FNo,g2,Iie,CNo,MNo,rN,ENo,yNo,wNo,h2,ANo,Die,LNo,BNo,jie,xNo,kNo,Nie,RNo,SNo,ny,pBe,Id,u2,qie,sy,PNo,Gie,$No,_Be,dr,ly,INo,Dd,DNo,Oie,jNo,NNo,Xie,qNo,GNo,ONo,iy,XNo,Vie,VNo,zNo,WNo,rt,dy,QNo,zie,HNo,UNo,jd,JNo,Wie,YNo,KNo,Qie,ZNo,eqo,oqo,Hie,rqo,tqo,cy,aqo,He,fy,nqo,Uie,sqo,lqo,rn,iqo,Jie,dqo,cqo,Yie,fqo,mqo,Kie,gqo,hqo,uqo,my,p2,Zie,pqo,_qo,tN,vqo,bqo,Tqo,_2,ede,Fqo,Cqo,aN,Mqo,Eqo,yqo,v2,wqo,ode,Aqo,Lqo,rde,Bqo,xqo,tde,kqo,Rqo,gy,vBe,Nd,b2,ade,hy,Sqo,nde,Pqo,bBe,cr,uy,$qo,qd,Iqo,sde,Dqo,jqo,lde,Nqo,qqo,Gqo,py,Oqo,ide,Xqo,Vqo,zqo,tt,_y,Wqo,dde,Qqo,Hqo,Gd,Uqo,cde,Jqo,Yqo,fde,Kqo,Zqo,eGo,mde,oGo,rGo,vy,tGo,Ue,by,aGo,gde,nGo,sGo,tn,lGo,hde,iGo,dGo,ude,cGo,fGo,pde,mGo,gGo,hGo,an,T2,_de,uGo,pGo,nN,_Go,vGo,bGo,F2,vde,TGo,FGo,sN,CGo,MGo,EGo,C2,bde,yGo,wGo,lN,AGo,LGo,BGo,M2,Tde,xGo,kGo,iN,RGo,SGo,PGo,E2,$Go,Fde,IGo,DGo,Cde,jGo,NGo,Mde,qGo,GGo,Ty,TBe,Od,y2,Ede,Fy,OGo,yde,XGo,FBe,fr,Cy,VGo,Xd,zGo,wde,WGo,QGo,Ade,HGo,UGo,JGo,My,YGo,Lde,KGo,ZGo,eOo,at,Ey,oOo,Bde,rOo,tOo,Vd,aOo,xde,nOo,sOo,kde,lOo,iOo,dOo,Rde,cOo,fOo,yy,mOo,Je,wy,gOo,Sde,hOo,uOo,nn,pOo,Pde,_Oo,vOo,$de,bOo,TOo,Ide,FOo,COo,MOo,zd,w2,Dde,EOo,yOo,dN,wOo,AOo,LOo,A2,jde,BOo,xOo,cN,kOo,ROo,SOo,L2,Nde,POo,$Oo,fN,IOo,DOo,jOo,B2,NOo,qde,qOo,GOo,Gde,OOo,XOo,Ode,VOo,zOo,Ay,CBe,Wd,x2,Xde,Ly,WOo,Vde,QOo,MBe,mr,By,HOo,Qd,UOo,zde,JOo,YOo,Wde,KOo,ZOo,eXo,xy,oXo,Qde,rXo,tXo,aXo,nt,ky,nXo,Hde,sXo,lXo,Hd,iXo,Ude,dXo,cXo,Jde,fXo,mXo,gXo,Yde,hXo,uXo,Ry,pXo,Ye,Sy,_Xo,Kde,vXo,bXo,sn,TXo,Zde,FXo,CXo,ece,MXo,EXo,oce,yXo,wXo,AXo,rce,k2,tce,LXo,BXo,mN,xXo,kXo,RXo,R2,SXo,ace,PXo,$Xo,nce,IXo,DXo,sce,jXo,NXo,Py,EBe,Ud,S2,lce,$y,qXo,ice,GXo,yBe,gr,Iy,OXo,Jd,XXo,dce,VXo,zXo,cce,WXo,QXo,HXo,Dy,UXo,fce,JXo,YXo,KXo,st,jy,ZXo,mce,eVo,oVo,Yd,rVo,gce,tVo,aVo,hce,nVo,sVo,lVo,uce,iVo,dVo,Ny,cVo,Ke,qy,fVo,pce,mVo,gVo,ln,hVo,_ce,uVo,pVo,vce,_Vo,vVo,bce,bVo,TVo,FVo,Tce,P2,Fce,CVo,MVo,gN,EVo,yVo,wVo,$2,AVo,Cce,LVo,BVo,Mce,xVo,kVo,Ece,RVo,SVo,Gy,wBe,Kd,I2,yce,Oy,PVo,wce,$Vo,ABe,hr,Xy,IVo,Zd,DVo,Ace,jVo,NVo,Lce,qVo,GVo,OVo,Vy,XVo,Bce,VVo,zVo,WVo,lt,zy,QVo,xce,HVo,UVo,ec,JVo,kce,YVo,KVo,Rce,ZVo,ezo,ozo,Sce,rzo,tzo,Wy,azo,Ze,Qy,nzo,Pce,szo,lzo,dn,izo,$ce,dzo,czo,Ice,fzo,mzo,Dce,gzo,hzo,uzo,Hy,D2,jce,pzo,_zo,hN,vzo,bzo,Tzo,j2,Nce,Fzo,Czo,uN,Mzo,Ezo,yzo,N2,wzo,qce,Azo,Lzo,Gce,Bzo,xzo,Oce,kzo,Rzo,Uy,LBe,oc,q2,Xce,Jy,Szo,Vce,Pzo,BBe,ur,Yy,$zo,rc,Izo,zce,Dzo,jzo,Wce,Nzo,qzo,Gzo,Ky,Ozo,Qce,Xzo,Vzo,zzo,it,Zy,Wzo,Hce,Qzo,Hzo,tc,Uzo,Uce,Jzo,Yzo,Jce,Kzo,Zzo,eWo,Yce,oWo,rWo,ew,tWo,go,ow,aWo,Kce,nWo,sWo,cn,lWo,Zce,iWo,dWo,efe,cWo,fWo,ofe,mWo,gWo,hWo,B,G2,rfe,uWo,pWo,pN,_Wo,vWo,bWo,O2,tfe,TWo,FWo,_N,CWo,MWo,EWo,X2,afe,yWo,wWo,vN,AWo,LWo,BWo,V2,nfe,xWo,kWo,bN,RWo,SWo,PWo,z2,sfe,$Wo,IWo,TN,DWo,jWo,NWo,W2,lfe,qWo,GWo,FN,OWo,XWo,VWo,Q2,ife,zWo,WWo,CN,QWo,HWo,UWo,H2,dfe,JWo,YWo,MN,KWo,ZWo,eQo,U2,cfe,oQo,rQo,EN,tQo,aQo,nQo,J2,ffe,sQo,lQo,yN,iQo,dQo,cQo,Y2,mfe,fQo,mQo,wN,gQo,hQo,uQo,K2,gfe,pQo,_Qo,AN,vQo,bQo,TQo,Z2,hfe,FQo,CQo,LN,MQo,EQo,yQo,e0,ufe,wQo,AQo,BN,LQo,BQo,xQo,o0,pfe,kQo,RQo,xN,SQo,PQo,$Qo,r0,_fe,IQo,DQo,kN,jQo,NQo,qQo,$s,vfe,GQo,OQo,RN,XQo,VQo,SN,zQo,WQo,QQo,t0,bfe,HQo,UQo,PN,JQo,YQo,KQo,a0,Tfe,ZQo,eHo,$N,oHo,rHo,tHo,n0,Ffe,aHo,nHo,IN,sHo,lHo,iHo,s0,Cfe,dHo,cHo,DN,fHo,mHo,gHo,l0,Mfe,hHo,uHo,jN,pHo,_Ho,vHo,i0,Efe,bHo,THo,NN,FHo,CHo,MHo,d0,yfe,EHo,yHo,qN,wHo,AHo,LHo,c0,wfe,BHo,xHo,GN,kHo,RHo,SHo,f0,Afe,PHo,$Ho,ON,IHo,DHo,jHo,m0,Lfe,NHo,qHo,XN,GHo,OHo,XHo,g0,Bfe,VHo,zHo,VN,WHo,QHo,HHo,h0,xfe,UHo,JHo,zN,YHo,KHo,ZHo,u0,kfe,eUo,oUo,WN,rUo,tUo,aUo,p0,Rfe,nUo,sUo,QN,lUo,iUo,dUo,_0,Sfe,cUo,fUo,HN,mUo,gUo,hUo,v0,Pfe,uUo,pUo,UN,_Uo,vUo,bUo,b0,$fe,TUo,FUo,JN,CUo,MUo,EUo,T0,Ife,yUo,wUo,YN,AUo,LUo,BUo,F0,Dfe,xUo,kUo,KN,RUo,SUo,PUo,C0,jfe,$Uo,IUo,ZN,DUo,jUo,NUo,M0,Nfe,qUo,GUo,eq,OUo,XUo,VUo,E0,qfe,zUo,WUo,oq,QUo,HUo,UUo,y0,Gfe,JUo,YUo,rq,KUo,ZUo,eJo,w0,Ofe,oJo,rJo,tq,tJo,aJo,nJo,A0,Xfe,sJo,lJo,aq,iJo,dJo,cJo,Vfe,fJo,mJo,rw,xBe,ac,L0,zfe,tw,gJo,Wfe,hJo,kBe,pr,aw,uJo,nc,pJo,Qfe,_Jo,vJo,Hfe,bJo,TJo,FJo,nw,CJo,Ufe,MJo,EJo,yJo,dt,sw,wJo,Jfe,AJo,LJo,sc,BJo,Yfe,xJo,kJo,Kfe,RJo,SJo,PJo,Zfe,$Jo,IJo,lw,DJo,ho,iw,jJo,eme,NJo,qJo,fn,GJo,ome,OJo,XJo,rme,VJo,zJo,tme,WJo,QJo,HJo,H,B0,ame,UJo,JJo,nq,YJo,KJo,ZJo,x0,nme,eYo,oYo,sq,rYo,tYo,aYo,k0,sme,nYo,sYo,lq,lYo,iYo,dYo,R0,lme,cYo,fYo,iq,mYo,gYo,hYo,S0,ime,uYo,pYo,dq,_Yo,vYo,bYo,P0,dme,TYo,FYo,cq,CYo,MYo,EYo,$0,cme,yYo,wYo,fq,AYo,LYo,BYo,I0,fme,xYo,kYo,mq,RYo,SYo,PYo,D0,mme,$Yo,IYo,gq,DYo,jYo,NYo,j0,gme,qYo,GYo,hq,OYo,XYo,VYo,N0,hme,zYo,WYo,uq,QYo,HYo,UYo,q0,ume,JYo,YYo,pq,KYo,ZYo,eKo,G0,pme,oKo,rKo,_q,tKo,aKo,nKo,O0,_me,sKo,lKo,vq,iKo,dKo,cKo,X0,vme,fKo,mKo,bq,gKo,hKo,uKo,V0,bme,pKo,_Ko,Tq,vKo,bKo,TKo,z0,Tme,FKo,CKo,Fq,MKo,EKo,yKo,W0,Fme,wKo,AKo,Cq,LKo,BKo,xKo,Q0,Cme,kKo,RKo,Mq,SKo,PKo,$Ko,H0,Mme,IKo,DKo,Eq,jKo,NKo,qKo,U0,Eme,GKo,OKo,yq,XKo,VKo,zKo,J0,yme,WKo,QKo,wq,HKo,UKo,JKo,wme,YKo,KKo,dw,RBe,lc,Y0,Ame,cw,ZKo,Lme,eZo,SBe,_r,fw,oZo,ic,rZo,Bme,tZo,aZo,xme,nZo,sZo,lZo,mw,iZo,kme,dZo,cZo,fZo,ct,gw,mZo,Rme,gZo,hZo,dc,uZo,Sme,pZo,_Zo,Pme,vZo,bZo,TZo,$me,FZo,CZo,hw,MZo,uo,uw,EZo,Ime,yZo,wZo,mn,AZo,Dme,LZo,BZo,jme,xZo,kZo,Nme,RZo,SZo,PZo,he,K0,qme,$Zo,IZo,Aq,DZo,jZo,NZo,Z0,Gme,qZo,GZo,Lq,OZo,XZo,VZo,eT,Ome,zZo,WZo,Bq,QZo,HZo,UZo,oT,Xme,JZo,YZo,xq,KZo,ZZo,eer,rT,Vme,oer,rer,kq,ter,aer,ner,tT,zme,ser,ler,Rq,ier,der,cer,aT,Wme,fer,mer,Sq,ger,her,uer,nT,Qme,per,_er,Pq,ver,ber,Ter,sT,Hme,Fer,Cer,$q,Mer,Eer,yer,lT,Ume,wer,Aer,Iq,Ler,Ber,xer,Jme,ker,Rer,pw,PBe,cc,iT,Yme,_w,Ser,Kme,Per,$Be,vr,vw,$er,fc,Ier,Zme,Der,jer,ege,Ner,qer,Ger,bw,Oer,oge,Xer,Ver,zer,ft,Tw,Wer,rge,Qer,Her,mc,Uer,tge,Jer,Yer,age,Ker,Zer,eor,nge,oor,ror,Fw,tor,po,Cw,aor,sge,nor,sor,gn,lor,lge,ior,dor,ige,cor,mor,dge,gor,hor,uor,Mw,dT,cge,por,_or,Dq,vor,bor,Tor,cT,fge,For,Cor,jq,Mor,Eor,yor,mge,wor,Aor,Ew,IBe,gc,fT,gge,yw,Lor,hge,Bor,DBe,br,ww,xor,hc,kor,uge,Ror,Sor,pge,Por,$or,Ior,Aw,Dor,_ge,jor,Nor,qor,mt,Lw,Gor,vge,Oor,Xor,uc,Vor,bge,zor,Wor,Tge,Qor,Hor,Uor,Fge,Jor,Yor,Bw,Kor,_o,xw,Zor,Cge,err,orr,hn,rrr,Mge,trr,arr,Ege,nrr,srr,yge,lrr,irr,drr,Y,mT,wge,crr,frr,Nq,mrr,grr,hrr,gT,Age,urr,prr,qq,_rr,vrr,brr,hT,Lge,Trr,Frr,Gq,Crr,Mrr,Err,uT,Bge,yrr,wrr,Oq,Arr,Lrr,Brr,pT,xge,xrr,krr,Xq,Rrr,Srr,Prr,_T,kge,$rr,Irr,Vq,Drr,jrr,Nrr,vT,Rge,qrr,Grr,zq,Orr,Xrr,Vrr,bT,Sge,zrr,Wrr,Wq,Qrr,Hrr,Urr,TT,Pge,Jrr,Yrr,Qq,Krr,Zrr,etr,FT,$ge,otr,rtr,Hq,ttr,atr,ntr,CT,Ige,str,ltr,Uq,itr,dtr,ctr,MT,Dge,ftr,mtr,Jq,gtr,htr,utr,ET,jge,ptr,_tr,Yq,vtr,btr,Ttr,yT,Nge,Ftr,Ctr,Kq,Mtr,Etr,ytr,wT,qge,wtr,Atr,Zq,Ltr,Btr,xtr,AT,Gge,ktr,Rtr,eG,Str,Ptr,$tr,LT,Oge,Itr,Dtr,oG,jtr,Ntr,qtr,BT,Xge,Gtr,Otr,rG,Xtr,Vtr,ztr,xT,Vge,Wtr,Qtr,tG,Htr,Utr,Jtr,kT,zge,Ytr,Ktr,aG,Ztr,ear,oar,Wge,rar,tar,kw,jBe,pc,RT,Qge,Rw,aar,Hge,nar,NBe,Tr,Sw,sar,_c,lar,Uge,iar,dar,Jge,car,far,mar,Pw,gar,Yge,har,uar,par,gt,$w,_ar,Kge,bar,Tar,vc,Far,Zge,Car,Mar,ehe,Ear,yar,war,ohe,Aar,Lar,Iw,Bar,vo,Dw,xar,rhe,kar,Rar,un,Sar,the,Par,$ar,ahe,Iar,Dar,nhe,jar,Nar,qar,ue,ST,she,Gar,Oar,nG,Xar,Var,zar,PT,lhe,War,Qar,sG,Har,Uar,Jar,$T,ihe,Yar,Kar,lG,Zar,enr,onr,IT,dhe,rnr,tnr,iG,anr,nnr,snr,DT,che,lnr,inr,dG,dnr,cnr,fnr,jT,fhe,mnr,gnr,cG,hnr,unr,pnr,NT,mhe,_nr,vnr,fG,bnr,Tnr,Fnr,qT,ghe,Cnr,Mnr,mG,Enr,ynr,wnr,GT,hhe,Anr,Lnr,gG,Bnr,xnr,knr,OT,uhe,Rnr,Snr,hG,Pnr,$nr,Inr,phe,Dnr,jnr,jw,qBe,bc,XT,_he,Nw,Nnr,vhe,qnr,GBe,Fr,qw,Gnr,Tc,Onr,bhe,Xnr,Vnr,The,znr,Wnr,Qnr,Gw,Hnr,Fhe,Unr,Jnr,Ynr,ht,Ow,Knr,Che,Znr,esr,Fc,osr,Mhe,rsr,tsr,Ehe,asr,nsr,ssr,yhe,lsr,isr,Xw,dsr,bo,Vw,csr,whe,fsr,msr,pn,gsr,Ahe,hsr,usr,Lhe,psr,_sr,Bhe,vsr,bsr,Tsr,X,VT,xhe,Fsr,Csr,uG,Msr,Esr,ysr,zT,khe,wsr,Asr,pG,Lsr,Bsr,xsr,WT,Rhe,ksr,Rsr,_G,Ssr,Psr,$sr,QT,She,Isr,Dsr,vG,jsr,Nsr,qsr,HT,Phe,Gsr,Osr,bG,Xsr,Vsr,zsr,UT,$he,Wsr,Qsr,TG,Hsr,Usr,Jsr,JT,Ihe,Ysr,Ksr,FG,Zsr,elr,olr,YT,Dhe,rlr,tlr,CG,alr,nlr,slr,KT,jhe,llr,ilr,MG,dlr,clr,flr,ZT,Nhe,mlr,glr,EG,hlr,ulr,plr,e7,qhe,_lr,vlr,yG,blr,Tlr,Flr,o7,Ghe,Clr,Mlr,wG,Elr,ylr,wlr,r7,Ohe,Alr,Llr,AG,Blr,xlr,klr,t7,Xhe,Rlr,Slr,LG,Plr,$lr,Ilr,a7,Vhe,Dlr,jlr,BG,Nlr,qlr,Glr,n7,zhe,Olr,Xlr,xG,Vlr,zlr,Wlr,s7,Whe,Qlr,Hlr,kG,Ulr,Jlr,Ylr,l7,Qhe,Klr,Zlr,RG,eir,oir,rir,i7,Hhe,tir,air,SG,nir,sir,lir,d7,Uhe,iir,dir,PG,cir,fir,mir,c7,Jhe,gir,hir,$G,uir,pir,_ir,f7,Yhe,vir,bir,IG,Tir,Fir,Cir,m7,Khe,Mir,Eir,DG,yir,wir,Air,g7,Zhe,Lir,Bir,jG,xir,kir,Rir,h7,eue,Sir,Pir,NG,$ir,Iir,Dir,oue,jir,Nir,zw,OBe,Cc,u7,rue,Ww,qir,tue,Gir,XBe,Cr,Qw,Oir,Mc,Xir,aue,Vir,zir,nue,Wir,Qir,Hir,Hw,Uir,sue,Jir,Yir,Kir,ut,Uw,Zir,lue,edr,odr,Ec,rdr,iue,tdr,adr,due,ndr,sdr,ldr,cue,idr,ddr,Jw,cdr,To,Yw,fdr,fue,mdr,gdr,_n,hdr,mue,udr,pdr,gue,_dr,vdr,hue,bdr,Tdr,Fdr,te,p7,uue,Cdr,Mdr,qG,Edr,ydr,wdr,_7,pue,Adr,Ldr,GG,Bdr,xdr,kdr,v7,_ue,Rdr,Sdr,OG,Pdr,$dr,Idr,b7,vue,Ddr,jdr,XG,Ndr,qdr,Gdr,T7,bue,Odr,Xdr,VG,Vdr,zdr,Wdr,F7,Tue,Qdr,Hdr,zG,Udr,Jdr,Ydr,C7,Fue,Kdr,Zdr,WG,ecr,ocr,rcr,M7,Cue,tcr,acr,QG,ncr,scr,lcr,E7,Mue,icr,dcr,HG,ccr,fcr,mcr,y7,Eue,gcr,hcr,UG,ucr,pcr,_cr,w7,yue,vcr,bcr,JG,Tcr,Fcr,Ccr,A7,wue,Mcr,Ecr,YG,ycr,wcr,Acr,L7,Aue,Lcr,Bcr,KG,xcr,kcr,Rcr,B7,Lue,Scr,Pcr,ZG,$cr,Icr,Dcr,x7,Bue,jcr,Ncr,eO,qcr,Gcr,Ocr,k7,xue,Xcr,Vcr,oO,zcr,Wcr,Qcr,R7,kue,Hcr,Ucr,rO,Jcr,Ycr,Kcr,Rue,Zcr,efr,Kw,VBe,yc,S7,Sue,Zw,ofr,Pue,rfr,zBe,Mr,e6,tfr,wc,afr,$ue,nfr,sfr,Iue,lfr,ifr,dfr,o6,cfr,Due,ffr,mfr,gfr,pt,r6,hfr,jue,ufr,pfr,Ac,_fr,Nue,vfr,bfr,que,Tfr,Ffr,Cfr,Gue,Mfr,Efr,t6,yfr,Fo,a6,wfr,Oue,Afr,Lfr,vn,Bfr,Xue,xfr,kfr,Vue,Rfr,Sfr,zue,Pfr,$fr,Ifr,Wue,P7,Que,Dfr,jfr,tO,Nfr,qfr,Gfr,Hue,Ofr,Xfr,n6,WBe,Lc,$7,Uue,s6,Vfr,Jue,zfr,QBe,Er,l6,Wfr,Bc,Qfr,Yue,Hfr,Ufr,Kue,Jfr,Yfr,Kfr,i6,Zfr,Zue,emr,omr,rmr,_t,d6,tmr,epe,amr,nmr,xc,smr,ope,lmr,imr,rpe,dmr,cmr,fmr,tpe,mmr,gmr,c6,hmr,Co,f6,umr,ape,pmr,_mr,bn,vmr,npe,bmr,Tmr,spe,Fmr,Cmr,lpe,Mmr,Emr,ymr,K,I7,ipe,wmr,Amr,aO,Lmr,Bmr,xmr,D7,dpe,kmr,Rmr,nO,Smr,Pmr,$mr,j7,cpe,Imr,Dmr,sO,jmr,Nmr,qmr,N7,fpe,Gmr,Omr,lO,Xmr,Vmr,zmr,q7,mpe,Wmr,Qmr,iO,Hmr,Umr,Jmr,G7,gpe,Ymr,Kmr,dO,Zmr,egr,ogr,O7,hpe,rgr,tgr,cO,agr,ngr,sgr,X7,upe,lgr,igr,fO,dgr,cgr,fgr,V7,ppe,mgr,ggr,mO,hgr,ugr,pgr,z7,_pe,_gr,vgr,gO,bgr,Tgr,Fgr,W7,vpe,Cgr,Mgr,hO,Egr,ygr,wgr,Q7,bpe,Agr,Lgr,uO,Bgr,xgr,kgr,H7,Tpe,Rgr,Sgr,pO,Pgr,$gr,Igr,U7,Fpe,Dgr,jgr,_O,Ngr,qgr,Ggr,J7,Cpe,Ogr,Xgr,vO,Vgr,zgr,Wgr,Y7,Mpe,Qgr,Hgr,bO,Ugr,Jgr,Ygr,K7,Epe,Kgr,Zgr,TO,ehr,ohr,rhr,Z7,ype,thr,ahr,FO,nhr,shr,lhr,eF,wpe,ihr,dhr,CO,chr,fhr,mhr,oF,Ape,ghr,hhr,MO,uhr,phr,_hr,Lpe,vhr,bhr,m6,HBe,kc,rF,Bpe,g6,Thr,xpe,Fhr,UBe,yr,h6,Chr,Rc,Mhr,kpe,Ehr,yhr,Rpe,whr,Ahr,Lhr,u6,Bhr,Spe,xhr,khr,Rhr,vt,p6,Shr,Ppe,Phr,$hr,Sc,Ihr,$pe,Dhr,jhr,Ipe,Nhr,qhr,Ghr,Dpe,Ohr,Xhr,_6,Vhr,Mo,v6,zhr,jpe,Whr,Qhr,Tn,Hhr,Npe,Uhr,Jhr,qpe,Yhr,Khr,Gpe,Zhr,eur,our,Z,tF,Ope,rur,tur,EO,aur,nur,sur,aF,Xpe,lur,iur,yO,dur,cur,fur,nF,Vpe,mur,gur,wO,hur,uur,pur,sF,zpe,_ur,vur,AO,bur,Tur,Fur,lF,Wpe,Cur,Mur,LO,Eur,yur,wur,iF,Qpe,Aur,Lur,BO,Bur,xur,kur,dF,Hpe,Rur,Sur,xO,Pur,$ur,Iur,cF,Upe,Dur,jur,kO,Nur,qur,Gur,fF,Jpe,Our,Xur,RO,Vur,zur,Wur,mF,Ype,Qur,Hur,SO,Uur,Jur,Yur,gF,Kpe,Kur,Zur,PO,epr,opr,rpr,hF,Zpe,tpr,apr,$O,npr,spr,lpr,uF,e_e,ipr,dpr,IO,cpr,fpr,mpr,pF,o_e,gpr,hpr,DO,upr,ppr,_pr,_F,r_e,vpr,bpr,jO,Tpr,Fpr,Cpr,vF,t_e,Mpr,Epr,NO,ypr,wpr,Apr,bF,a_e,Lpr,Bpr,qO,xpr,kpr,Rpr,TF,n_e,Spr,Ppr,GO,$pr,Ipr,Dpr,FF,s_e,jpr,Npr,OO,qpr,Gpr,Opr,l_e,Xpr,Vpr,b6,JBe,Pc,CF,i_e,T6,zpr,d_e,Wpr,YBe,wr,F6,Qpr,$c,Hpr,c_e,Upr,Jpr,f_e,Ypr,Kpr,Zpr,C6,e_r,m_e,o_r,r_r,t_r,bt,M6,a_r,g_e,n_r,s_r,Ic,l_r,h_e,i_r,d_r,u_e,c_r,f_r,m_r,p_e,g_r,h_r,E6,u_r,Eo,y6,p_r,__e,__r,v_r,Fn,b_r,v_e,T_r,F_r,b_e,C_r,M_r,T_e,E_r,y_r,w_r,F_e,MF,C_e,A_r,L_r,XO,B_r,x_r,k_r,M_e,R_r,S_r,w6,KBe,Dc,EF,E_e,A6,P_r,y_e,$_r,ZBe,Ar,L6,I_r,jc,D_r,w_e,j_r,N_r,A_e,q_r,G_r,O_r,B6,X_r,L_e,V_r,z_r,W_r,Tt,x6,Q_r,B_e,H_r,U_r,Nc,J_r,x_e,Y_r,K_r,k_e,Z_r,evr,ovr,R_e,rvr,tvr,k6,avr,yo,R6,nvr,S_e,svr,lvr,Cn,ivr,P_e,dvr,cvr,$_e,fvr,mvr,I_e,gvr,hvr,uvr,D_e,yF,j_e,pvr,_vr,VO,vvr,bvr,Tvr,N_e,Fvr,Cvr,S6,exe,qc,wF,q_e,P6,Mvr,G_e,Evr,oxe,Lr,$6,yvr,Gc,wvr,O_e,Avr,Lvr,X_e,Bvr,xvr,kvr,I6,Rvr,V_e,Svr,Pvr,$vr,Ft,D6,Ivr,z_e,Dvr,jvr,Oc,Nvr,W_e,qvr,Gvr,Q_e,Ovr,Xvr,Vvr,H_e,zvr,Wvr,j6,Qvr,wo,N6,Hvr,U_e,Uvr,Jvr,Mn,Yvr,J_e,Kvr,Zvr,Y_e,e1r,o1r,K_e,r1r,t1r,a1r,z,AF,Z_e,n1r,s1r,zO,l1r,i1r,d1r,LF,eve,c1r,f1r,WO,m1r,g1r,h1r,BF,ove,u1r,p1r,QO,_1r,v1r,b1r,xF,rve,T1r,F1r,HO,C1r,M1r,E1r,kF,tve,y1r,w1r,UO,A1r,L1r,B1r,RF,ave,x1r,k1r,JO,R1r,S1r,P1r,SF,nve,$1r,I1r,YO,D1r,j1r,N1r,PF,sve,q1r,G1r,KO,O1r,X1r,V1r,$F,lve,z1r,W1r,ZO,Q1r,H1r,U1r,IF,ive,J1r,Y1r,eX,K1r,Z1r,e4r,DF,dve,o4r,r4r,oX,t4r,a4r,n4r,jF,cve,s4r,l4r,rX,i4r,d4r,c4r,NF,fve,f4r,m4r,tX,g4r,h4r,u4r,qF,mve,p4r,_4r,aX,v4r,b4r,T4r,GF,gve,F4r,C4r,nX,M4r,E4r,y4r,OF,hve,w4r,A4r,sX,L4r,B4r,x4r,XF,uve,k4r,R4r,lX,S4r,P4r,$4r,VF,pve,I4r,D4r,iX,j4r,N4r,q4r,zF,_ve,G4r,O4r,dX,X4r,V4r,z4r,WF,vve,W4r,Q4r,cX,H4r,U4r,J4r,QF,bve,Y4r,K4r,fX,Z4r,ebr,obr,HF,Tve,rbr,tbr,mX,abr,nbr,sbr,UF,Fve,lbr,ibr,gX,dbr,cbr,fbr,JF,Cve,mbr,gbr,hX,hbr,ubr,pbr,Mve,_br,vbr,q6,rxe,Xc,YF,Eve,G6,bbr,yve,Tbr,txe,Br,O6,Fbr,Vc,Cbr,wve,Mbr,Ebr,Ave,ybr,wbr,Abr,X6,Lbr,Lve,Bbr,xbr,kbr,Ct,V6,Rbr,Bve,Sbr,Pbr,zc,$br,xve,Ibr,Dbr,kve,jbr,Nbr,qbr,Rve,Gbr,Obr,z6,Xbr,Ao,W6,Vbr,Sve,zbr,Wbr,En,Qbr,Pve,Hbr,Ubr,$ve,Jbr,Ybr,Ive,Kbr,Zbr,e2r,yn,KF,Dve,o2r,r2r,uX,t2r,a2r,n2r,ZF,jve,s2r,l2r,pX,i2r,d2r,c2r,eC,Nve,f2r,m2r,_X,g2r,h2r,u2r,oC,qve,p2r,_2r,vX,v2r,b2r,T2r,Gve,F2r,C2r,Q6,axe,Wc,rC,Ove,H6,M2r,Xve,E2r,nxe,xr,U6,y2r,Qc,w2r,Vve,A2r,L2r,zve,B2r,x2r,k2r,J6,R2r,Wve,S2r,P2r,$2r,Mt,Y6,I2r,Qve,D2r,j2r,Hc,N2r,Hve,q2r,G2r,Uve,O2r,X2r,V2r,Jve,z2r,W2r,K6,Q2r,Lo,Z6,H2r,Yve,U2r,J2r,wn,Y2r,Kve,K2r,Z2r,Zve,e0r,o0r,e1e,r0r,t0r,a0r,fe,tC,o1e,n0r,s0r,bX,l0r,i0r,d0r,aC,r1e,c0r,f0r,TX,m0r,g0r,h0r,nC,t1e,u0r,p0r,FX,_0r,v0r,b0r,sC,a1e,T0r,F0r,CX,C0r,M0r,E0r,lC,n1e,y0r,w0r,MX,A0r,L0r,B0r,iC,s1e,x0r,k0r,EX,R0r,S0r,P0r,dC,l1e,$0r,I0r,yX,D0r,j0r,N0r,cC,i1e,q0r,G0r,wX,O0r,X0r,V0r,fC,d1e,z0r,W0r,AX,Q0r,H0r,U0r,mC,c1e,J0r,Y0r,LX,K0r,Z0r,eTr,gC,f1e,oTr,rTr,BX,tTr,aTr,nTr,m1e,sTr,lTr,eA,sxe,Uc,hC,g1e,oA,iTr,h1e,dTr,lxe,kr,rA,cTr,Jc,fTr,u1e,mTr,gTr,p1e,hTr,uTr,pTr,tA,_Tr,_1e,vTr,bTr,TTr,Et,aA,FTr,v1e,CTr,MTr,Yc,ETr,b1e,yTr,wTr,T1e,ATr,LTr,BTr,F1e,xTr,kTr,nA,RTr,Bo,sA,STr,C1e,PTr,$Tr,An,ITr,M1e,DTr,jTr,E1e,NTr,qTr,y1e,GTr,OTr,XTr,be,uC,w1e,VTr,zTr,xX,WTr,QTr,HTr,pC,A1e,UTr,JTr,kX,YTr,KTr,ZTr,_C,L1e,e7r,o7r,RX,r7r,t7r,a7r,vC,B1e,n7r,s7r,SX,l7r,i7r,d7r,bC,x1e,c7r,f7r,PX,m7r,g7r,h7r,TC,k1e,u7r,p7r,$X,_7r,v7r,b7r,FC,R1e,T7r,F7r,IX,C7r,M7r,E7r,CC,S1e,y7r,w7r,DX,A7r,L7r,B7r,MC,P1e,x7r,k7r,jX,R7r,S7r,P7r,$1e,$7r,I7r,lA,ixe,Kc,EC,I1e,iA,D7r,D1e,j7r,dxe,Rr,dA,N7r,Zc,q7r,j1e,G7r,O7r,N1e,X7r,V7r,z7r,cA,W7r,q1e,Q7r,H7r,U7r,yt,fA,J7r,G1e,Y7r,K7r,ef,Z7r,O1e,eFr,oFr,X1e,rFr,tFr,aFr,V1e,nFr,sFr,mA,lFr,xo,gA,iFr,z1e,dFr,cFr,Ln,fFr,W1e,mFr,gFr,Q1e,hFr,uFr,H1e,pFr,_Fr,vFr,Te,yC,U1e,bFr,TFr,NX,FFr,CFr,MFr,wC,J1e,EFr,yFr,qX,wFr,AFr,LFr,AC,Y1e,BFr,xFr,GX,kFr,RFr,SFr,LC,K1e,PFr,$Fr,OX,IFr,DFr,jFr,BC,Z1e,NFr,qFr,XX,GFr,OFr,XFr,xC,e4e,VFr,zFr,VX,WFr,QFr,HFr,kC,o4e,UFr,JFr,zX,YFr,KFr,ZFr,RC,r4e,eCr,oCr,WX,rCr,tCr,aCr,SC,t4e,nCr,sCr,QX,lCr,iCr,dCr,a4e,cCr,fCr,hA,cxe,of,PC,n4e,uA,mCr,s4e,gCr,fxe,Sr,pA,hCr,rf,uCr,l4e,pCr,_Cr,i4e,vCr,bCr,TCr,_A,FCr,d4e,CCr,MCr,ECr,wt,vA,yCr,c4e,wCr,ACr,tf,LCr,f4e,BCr,xCr,m4e,kCr,RCr,SCr,g4e,PCr,$Cr,bA,ICr,ko,TA,DCr,h4e,jCr,NCr,Bn,qCr,u4e,GCr,OCr,p4e,XCr,VCr,_4e,zCr,WCr,QCr,Fe,$C,v4e,HCr,UCr,HX,JCr,YCr,KCr,IC,b4e,ZCr,eMr,UX,oMr,rMr,tMr,DC,T4e,aMr,nMr,JX,sMr,lMr,iMr,jC,F4e,dMr,cMr,YX,fMr,mMr,gMr,NC,C4e,hMr,uMr,KX,pMr,_Mr,vMr,qC,M4e,bMr,TMr,ZX,FMr,CMr,MMr,GC,E4e,EMr,yMr,eV,wMr,AMr,LMr,OC,y4e,BMr,xMr,oV,kMr,RMr,SMr,XC,w4e,PMr,$Mr,rV,IMr,DMr,jMr,A4e,NMr,qMr,FA,mxe,af,VC,L4e,CA,GMr,B4e,OMr,gxe,Pr,MA,XMr,nf,VMr,x4e,zMr,WMr,k4e,QMr,HMr,UMr,EA,JMr,R4e,YMr,KMr,ZMr,At,yA,eEr,S4e,oEr,rEr,sf,tEr,P4e,aEr,nEr,$4e,sEr,lEr,iEr,I4e,dEr,cEr,wA,fEr,Ro,AA,mEr,D4e,gEr,hEr,xn,uEr,j4e,pEr,_Er,N4e,vEr,bEr,q4e,TEr,FEr,CEr,Ce,zC,G4e,MEr,EEr,tV,yEr,wEr,AEr,WC,O4e,LEr,BEr,aV,xEr,kEr,REr,QC,X4e,SEr,PEr,nV,$Er,IEr,DEr,HC,V4e,jEr,NEr,sV,qEr,GEr,OEr,UC,z4e,XEr,VEr,lV,zEr,WEr,QEr,JC,W4e,HEr,UEr,iV,JEr,YEr,KEr,YC,Q4e,ZEr,e3r,dV,o3r,r3r,t3r,KC,H4e,a3r,n3r,cV,s3r,l3r,i3r,ZC,U4e,d3r,c3r,fV,f3r,m3r,g3r,J4e,h3r,u3r,LA,hxe,lf,eM,Y4e,BA,p3r,K4e,_3r,uxe,$r,xA,v3r,df,b3r,Z4e,T3r,F3r,ebe,C3r,M3r,E3r,kA,y3r,obe,w3r,A3r,L3r,Lt,RA,B3r,rbe,x3r,k3r,cf,R3r,tbe,S3r,P3r,abe,$3r,I3r,D3r,nbe,j3r,N3r,SA,q3r,So,PA,G3r,sbe,O3r,X3r,kn,V3r,lbe,z3r,W3r,ibe,Q3r,H3r,dbe,U3r,J3r,Y3r,so,oM,cbe,K3r,Z3r,mV,e5r,o5r,r5r,rM,fbe,t5r,a5r,gV,n5r,s5r,l5r,tM,mbe,i5r,d5r,hV,c5r,f5r,m5r,aM,gbe,g5r,h5r,uV,u5r,p5r,_5r,nM,hbe,v5r,b5r,pV,T5r,F5r,C5r,sM,ube,M5r,E5r,_V,y5r,w5r,A5r,lM,pbe,L5r,B5r,vV,x5r,k5r,R5r,_be,S5r,P5r,$A,pxe,ff,iM,vbe,IA,$5r,bbe,I5r,_xe,Ir,DA,D5r,mf,j5r,Tbe,N5r,q5r,Fbe,G5r,O5r,X5r,jA,V5r,Cbe,z5r,W5r,Q5r,Bt,NA,H5r,Mbe,U5r,J5r,gf,Y5r,Ebe,K5r,Z5r,ybe,eyr,oyr,ryr,wbe,tyr,ayr,qA,nyr,Po,GA,syr,Abe,lyr,iyr,Rn,dyr,Lbe,cyr,fyr,Bbe,myr,gyr,xbe,hyr,uyr,pyr,lo,dM,kbe,_yr,vyr,bV,byr,Tyr,Fyr,cM,Rbe,Cyr,Myr,TV,Eyr,yyr,wyr,fM,Sbe,Ayr,Lyr,FV,Byr,xyr,kyr,mM,Pbe,Ryr,Syr,CV,Pyr,$yr,Iyr,gM,$be,Dyr,jyr,MV,Nyr,qyr,Gyr,hM,Ibe,Oyr,Xyr,EV,Vyr,zyr,Wyr,uM,Dbe,Qyr,Hyr,yV,Uyr,Jyr,Yyr,jbe,Kyr,Zyr,OA,vxe,hf,pM,Nbe,XA,ewr,qbe,owr,bxe,Dr,VA,rwr,uf,twr,Gbe,awr,nwr,Obe,swr,lwr,iwr,zA,dwr,Xbe,cwr,fwr,mwr,xt,WA,gwr,Vbe,hwr,uwr,pf,pwr,zbe,_wr,vwr,Wbe,bwr,Twr,Fwr,Qbe,Cwr,Mwr,QA,Ewr,$o,HA,ywr,Hbe,wwr,Awr,Sn,Lwr,Ube,Bwr,xwr,Jbe,kwr,Rwr,Ybe,Swr,Pwr,$wr,Kbe,_M,Zbe,Iwr,Dwr,wV,jwr,Nwr,qwr,e2e,Gwr,Owr,UA,Txe,_f,vM,o2e,JA,Xwr,r2e,Vwr,Fxe,jr,YA,zwr,vf,Wwr,t2e,Qwr,Hwr,a2e,Uwr,Jwr,Ywr,KA,Kwr,n2e,Zwr,e6r,o6r,kt,ZA,r6r,s2e,t6r,a6r,bf,n6r,l2e,s6r,l6r,i2e,i6r,d6r,c6r,d2e,f6r,m6r,eL,g6r,Io,oL,h6r,c2e,u6r,p6r,Pn,_6r,f2e,v6r,b6r,m2e,T6r,F6r,g2e,C6r,M6r,E6r,rL,bM,h2e,y6r,w6r,AV,A6r,L6r,B6r,TM,u2e,x6r,k6r,LV,R6r,S6r,P6r,p2e,$6r,I6r,tL,Cxe,Tf,FM,_2e,aL,D6r,v2e,j6r,Mxe,Nr,nL,N6r,Ff,q6r,b2e,G6r,O6r,T2e,X6r,V6r,z6r,sL,W6r,F2e,Q6r,H6r,U6r,Rt,lL,J6r,C2e,Y6r,K6r,Cf,Z6r,M2e,eAr,oAr,E2e,rAr,tAr,aAr,y2e,nAr,sAr,iL,lAr,Do,dL,iAr,w2e,dAr,cAr,$n,fAr,A2e,mAr,gAr,L2e,hAr,uAr,B2e,pAr,_Ar,vAr,x2e,CM,k2e,bAr,TAr,BV,FAr,CAr,MAr,R2e,EAr,yAr,cL,Exe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),wE=new V({}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new wAr({props:{warning:"&lcub;true}",$$slots:{default:[h4t]},$$scope:{ctx:Ai}}}),LE=new V({}),BE=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/configuration_auto.py#L526"}}),RE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),SE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),PE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),$E=new V({}),IE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/tokenization_auto.py#L351"}}),NE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/v4.17.0/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),qE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),GE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),OE=new V({}),XE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),WE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/v4.17.0/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),fh=new wAr({props:{$$slots:{default:[u4t]},$$scope:{ctx:Ai}}}),QE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),HE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),UE=new V({}),JE=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/processing_auto.py#L71"}}),ZE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ch=new wAr({props:{$$slots:{default:[p4t]},$$scope:{ctx:Ai}}}),e3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),o3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),r3=new V({}),t3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L687"}}),n3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),l3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d3=new V({}),c3=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L694"}}),m3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),h3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p3=new V({}),_3=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L709"}}),b3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),F3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new V({}),E3=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L716"}}),w3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),L3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x3=new V({}),k3=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L723"}}),S3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),$3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new V({}),j3=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L732"}}),q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),O3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V3=new V({}),z3=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L766"}}),Q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),U3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new V({}),K3=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L773"}}),e5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),o5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),r5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a5=new V({}),n5=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L759"}}),l5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),i5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),d5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f5=new V({}),m5=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L741"}}),h5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),u5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),p5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v5=new V({}),b5=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L748"}}),F5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),C5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),M5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y5=new V({}),w5=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L782"}}),L5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),B5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),x5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k5=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R5=new V({}),S5=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L812"}}),$5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),I5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),D5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j5=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N5=new V({}),q5=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L819"}}),O5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),X5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),V5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W5=new V({}),Q5=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L842"}}),U5=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),J5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Y5=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K5=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z5=new V({}),ey=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L826"}}),ry=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),ay=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new V({}),ly=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L833"}}),dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new V({}),uy=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L851"}}),_y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),by=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new V({}),Cy=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L858"}}),Ey=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),wy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new V({}),By=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L805"}}),ky=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Sy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new V({}),Iy=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L789"}}),jy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),qy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new V({}),Xy=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_auto.py#L796"}}),zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Qy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new V({}),Yy=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ow=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new V({}),aw=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),sw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),iw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new V({}),fw=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),gw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),uw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new V({}),vw=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),Tw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Cw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new V({}),ww=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),xw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new V({}),Sw=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),$w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new V({}),qw=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Vw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new V({}),Qw=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new V({}),e6=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),r6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),a6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s6=new V({}),l6=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),d6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),f6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g6=new V({}),h6=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),p6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),v6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T6=new V({}),F6=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),M6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),y6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new V({}),L6=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),x6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),R6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new V({}),$6=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),D6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),N6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new V({}),O6=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),V6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),W6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new V({}),U6=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),Y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Z6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new V({}),rA=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),aA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),sA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new V({}),dA=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),fA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),gA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),pA=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),vA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),TA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new V({}),MA=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),yA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),AA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new V({}),xA=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),RA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),PA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new V({}),DA=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),NA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),GA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new V({}),VA=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),WA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),HA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new V({}),YA=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),ZA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),oL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new V({}),nL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),lL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),dL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.17.0/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/v4.17.0/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/v4.17.0/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),_e=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),CE=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),ME=o("AutoConfig"),Dn=o(", "),jn=a("a"),EE=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),yE=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),l8=o("will create a model that is an instance of "),Pi=a("a"),i8=o("BertModel"),d8=o("."),Oo=l(),Ia=a("p"),c8=o("There is one class of "),Af=a("code"),f8=o("AutoModel"),$Re=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),y9e=l(),$i=a("h2"),Lf=a("a"),TW=a("span"),f(wE.$$.fragment),IRe=l(),FW=a("span"),DRe=o("Extending the Auto Classes"),w9e=l(),qn=a("p"),jRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=a("code"),NRe=o("NewModel"),qRe=o(", make sure you have a "),MW=a("code"),GRe=o("NewModelConfig"),ORe=o(` then you can add those to the auto
classes like this:`),A9e=l(),f(AE.$$.fragment),L9e=l(),m8=a("p"),XRe=o("You will then be able to use the auto classes like you would usually do!"),B9e=l(),f(Bf.$$.fragment),x9e=l(),Ii=a("h2"),xf=a("a"),EW=a("span"),f(LE.$$.fragment),VRe=l(),yW=a("span"),zRe=o("AutoConfig"),k9e=l(),Xo=a("div"),f(BE.$$.fragment),WRe=l(),xE=a("p"),QRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g8=a("a"),HRe=o("from_pretrained()"),URe=o(" class method."),JRe=l(),kE=a("p"),YRe=o("This class cannot be instantiated directly using "),wW=a("code"),KRe=o("__init__()"),ZRe=o(" (throws an error)."),eSe=l(),fo=a("div"),f(RE.$$.fragment),oSe=l(),AW=a("p"),rSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tSe=l(),Di=a("p"),aSe=o("The configuration class to instantiate is selected based on the "),LW=a("code"),nSe=o("model_type"),sSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=a("code"),lSe=o("pretrained_model_name_or_path"),iSe=o(":"),dSe=l(),b=a("ul"),kf=a("li"),xW=a("strong"),cSe=o("albert"),fSe=o(" \u2014 "),h8=a("a"),mSe=o("AlbertConfig"),gSe=o(" (ALBERT model)"),hSe=l(),Rf=a("li"),kW=a("strong"),uSe=o("bart"),pSe=o(" \u2014 "),u8=a("a"),_Se=o("BartConfig"),vSe=o(" (BART model)"),bSe=l(),Sf=a("li"),RW=a("strong"),TSe=o("beit"),FSe=o(" \u2014 "),p8=a("a"),CSe=o("BeitConfig"),MSe=o(" (BEiT model)"),ESe=l(),Pf=a("li"),SW=a("strong"),ySe=o("bert"),wSe=o(" \u2014 "),_8=a("a"),ASe=o("BertConfig"),LSe=o(" (BERT model)"),BSe=l(),$f=a("li"),PW=a("strong"),xSe=o("bert-generation"),kSe=o(" \u2014 "),v8=a("a"),RSe=o("BertGenerationConfig"),SSe=o(" (Bert Generation model)"),PSe=l(),If=a("li"),$W=a("strong"),$Se=o("big_bird"),ISe=o(" \u2014 "),b8=a("a"),DSe=o("BigBirdConfig"),jSe=o(" (BigBird model)"),NSe=l(),Df=a("li"),IW=a("strong"),qSe=o("bigbird_pegasus"),GSe=o(" \u2014 "),T8=a("a"),OSe=o("BigBirdPegasusConfig"),XSe=o(" (BigBirdPegasus model)"),VSe=l(),jf=a("li"),DW=a("strong"),zSe=o("blenderbot"),WSe=o(" \u2014 "),F8=a("a"),QSe=o("BlenderbotConfig"),HSe=o(" (Blenderbot model)"),USe=l(),Nf=a("li"),jW=a("strong"),JSe=o("blenderbot-small"),YSe=o(" \u2014 "),C8=a("a"),KSe=o("BlenderbotSmallConfig"),ZSe=o(" (BlenderbotSmall model)"),ePe=l(),qf=a("li"),NW=a("strong"),oPe=o("camembert"),rPe=o(" \u2014 "),M8=a("a"),tPe=o("CamembertConfig"),aPe=o(" (CamemBERT model)"),nPe=l(),Gf=a("li"),qW=a("strong"),sPe=o("canine"),lPe=o(" \u2014 "),E8=a("a"),iPe=o("CanineConfig"),dPe=o(" (Canine model)"),cPe=l(),Of=a("li"),GW=a("strong"),fPe=o("clip"),mPe=o(" \u2014 "),y8=a("a"),gPe=o("CLIPConfig"),hPe=o(" (CLIP model)"),uPe=l(),Xf=a("li"),OW=a("strong"),pPe=o("convbert"),_Pe=o(" \u2014 "),w8=a("a"),vPe=o("ConvBertConfig"),bPe=o(" (ConvBERT model)"),TPe=l(),Vf=a("li"),XW=a("strong"),FPe=o("convnext"),CPe=o(" \u2014 "),A8=a("a"),MPe=o("ConvNextConfig"),EPe=o(" (ConvNext model)"),yPe=l(),zf=a("li"),VW=a("strong"),wPe=o("ctrl"),APe=o(" \u2014 "),L8=a("a"),LPe=o("CTRLConfig"),BPe=o(" (CTRL model)"),xPe=l(),Wf=a("li"),zW=a("strong"),kPe=o("data2vec-audio"),RPe=o(" \u2014 "),B8=a("a"),SPe=o("Data2VecAudioConfig"),PPe=o(" (Data2VecAudio model)"),$Pe=l(),Qf=a("li"),WW=a("strong"),IPe=o("data2vec-text"),DPe=o(" \u2014 "),x8=a("a"),jPe=o("Data2VecTextConfig"),NPe=o(" (Data2VecText model)"),qPe=l(),Hf=a("li"),QW=a("strong"),GPe=o("deberta"),OPe=o(" \u2014 "),k8=a("a"),XPe=o("DebertaConfig"),VPe=o(" (DeBERTa model)"),zPe=l(),Uf=a("li"),HW=a("strong"),WPe=o("deberta-v2"),QPe=o(" \u2014 "),R8=a("a"),HPe=o("DebertaV2Config"),UPe=o(" (DeBERTa-v2 model)"),JPe=l(),Jf=a("li"),UW=a("strong"),YPe=o("deit"),KPe=o(" \u2014 "),S8=a("a"),ZPe=o("DeiTConfig"),e$e=o(" (DeiT model)"),o$e=l(),Yf=a("li"),JW=a("strong"),r$e=o("detr"),t$e=o(" \u2014 "),P8=a("a"),a$e=o("DetrConfig"),n$e=o(" (DETR model)"),s$e=l(),Kf=a("li"),YW=a("strong"),l$e=o("distilbert"),i$e=o(" \u2014 "),$8=a("a"),d$e=o("DistilBertConfig"),c$e=o(" (DistilBERT model)"),f$e=l(),Zf=a("li"),KW=a("strong"),m$e=o("dpr"),g$e=o(" \u2014 "),I8=a("a"),h$e=o("DPRConfig"),u$e=o(" (DPR model)"),p$e=l(),em=a("li"),ZW=a("strong"),_$e=o("electra"),v$e=o(" \u2014 "),D8=a("a"),b$e=o("ElectraConfig"),T$e=o(" (ELECTRA model)"),F$e=l(),om=a("li"),eQ=a("strong"),C$e=o("encoder-decoder"),M$e=o(" \u2014 "),j8=a("a"),E$e=o("EncoderDecoderConfig"),y$e=o(" (Encoder decoder model)"),w$e=l(),rm=a("li"),oQ=a("strong"),A$e=o("flaubert"),L$e=o(" \u2014 "),N8=a("a"),B$e=o("FlaubertConfig"),x$e=o(" (FlauBERT model)"),k$e=l(),tm=a("li"),rQ=a("strong"),R$e=o("fnet"),S$e=o(" \u2014 "),q8=a("a"),P$e=o("FNetConfig"),$$e=o(" (FNet model)"),I$e=l(),am=a("li"),tQ=a("strong"),D$e=o("fsmt"),j$e=o(" \u2014 "),G8=a("a"),N$e=o("FSMTConfig"),q$e=o(" (FairSeq Machine-Translation model)"),G$e=l(),nm=a("li"),aQ=a("strong"),O$e=o("funnel"),X$e=o(" \u2014 "),O8=a("a"),V$e=o("FunnelConfig"),z$e=o(" (Funnel Transformer model)"),W$e=l(),sm=a("li"),nQ=a("strong"),Q$e=o("gpt2"),H$e=o(" \u2014 "),X8=a("a"),U$e=o("GPT2Config"),J$e=o(" (OpenAI GPT-2 model)"),Y$e=l(),lm=a("li"),sQ=a("strong"),K$e=o("gpt_neo"),Z$e=o(" \u2014 "),V8=a("a"),eIe=o("GPTNeoConfig"),oIe=o(" (GPT Neo model)"),rIe=l(),im=a("li"),lQ=a("strong"),tIe=o("gptj"),aIe=o(" \u2014 "),z8=a("a"),nIe=o("GPTJConfig"),sIe=o(" (GPT-J model)"),lIe=l(),dm=a("li"),iQ=a("strong"),iIe=o("hubert"),dIe=o(" \u2014 "),W8=a("a"),cIe=o("HubertConfig"),fIe=o(" (Hubert model)"),mIe=l(),cm=a("li"),dQ=a("strong"),gIe=o("ibert"),hIe=o(" \u2014 "),Q8=a("a"),uIe=o("IBertConfig"),pIe=o(" (I-BERT model)"),_Ie=l(),fm=a("li"),cQ=a("strong"),vIe=o("imagegpt"),bIe=o(" \u2014 "),H8=a("a"),TIe=o("ImageGPTConfig"),FIe=o(" (ImageGPT model)"),CIe=l(),mm=a("li"),fQ=a("strong"),MIe=o("layoutlm"),EIe=o(" \u2014 "),U8=a("a"),yIe=o("LayoutLMConfig"),wIe=o(" (LayoutLM model)"),AIe=l(),gm=a("li"),mQ=a("strong"),LIe=o("layoutlmv2"),BIe=o(" \u2014 "),J8=a("a"),xIe=o("LayoutLMv2Config"),kIe=o(" (LayoutLMv2 model)"),RIe=l(),hm=a("li"),gQ=a("strong"),SIe=o("led"),PIe=o(" \u2014 "),Y8=a("a"),$Ie=o("LEDConfig"),IIe=o(" (LED model)"),DIe=l(),um=a("li"),hQ=a("strong"),jIe=o("longformer"),NIe=o(" \u2014 "),K8=a("a"),qIe=o("LongformerConfig"),GIe=o(" (Longformer model)"),OIe=l(),pm=a("li"),uQ=a("strong"),XIe=o("luke"),VIe=o(" \u2014 "),Z8=a("a"),zIe=o("LukeConfig"),WIe=o(" (LUKE model)"),QIe=l(),_m=a("li"),pQ=a("strong"),HIe=o("lxmert"),UIe=o(" \u2014 "),e9=a("a"),JIe=o("LxmertConfig"),YIe=o(" (LXMERT model)"),KIe=l(),vm=a("li"),_Q=a("strong"),ZIe=o("m2m_100"),eDe=o(" \u2014 "),o9=a("a"),oDe=o("M2M100Config"),rDe=o(" (M2M100 model)"),tDe=l(),bm=a("li"),vQ=a("strong"),aDe=o("marian"),nDe=o(" \u2014 "),r9=a("a"),sDe=o("MarianConfig"),lDe=o(" (Marian model)"),iDe=l(),Tm=a("li"),bQ=a("strong"),dDe=o("maskformer"),cDe=o(" \u2014 "),t9=a("a"),fDe=o("MaskFormerConfig"),mDe=o(" (MaskFormer model)"),gDe=l(),Fm=a("li"),TQ=a("strong"),hDe=o("mbart"),uDe=o(" \u2014 "),a9=a("a"),pDe=o("MBartConfig"),_De=o(" (mBART model)"),vDe=l(),Cm=a("li"),FQ=a("strong"),bDe=o("megatron-bert"),TDe=o(" \u2014 "),n9=a("a"),FDe=o("MegatronBertConfig"),CDe=o(" (MegatronBert model)"),MDe=l(),Mm=a("li"),CQ=a("strong"),EDe=o("mobilebert"),yDe=o(" \u2014 "),s9=a("a"),wDe=o("MobileBertConfig"),ADe=o(" (MobileBERT model)"),LDe=l(),Em=a("li"),MQ=a("strong"),BDe=o("mpnet"),xDe=o(" \u2014 "),l9=a("a"),kDe=o("MPNetConfig"),RDe=o(" (MPNet model)"),SDe=l(),ym=a("li"),EQ=a("strong"),PDe=o("mt5"),$De=o(" \u2014 "),i9=a("a"),IDe=o("MT5Config"),DDe=o(" (mT5 model)"),jDe=l(),wm=a("li"),yQ=a("strong"),NDe=o("nystromformer"),qDe=o(" \u2014 "),d9=a("a"),GDe=o("NystromformerConfig"),ODe=o(" (Nystromformer model)"),XDe=l(),Am=a("li"),wQ=a("strong"),VDe=o("openai-gpt"),zDe=o(" \u2014 "),c9=a("a"),WDe=o("OpenAIGPTConfig"),QDe=o(" (OpenAI GPT model)"),HDe=l(),Lm=a("li"),AQ=a("strong"),UDe=o("pegasus"),JDe=o(" \u2014 "),f9=a("a"),YDe=o("PegasusConfig"),KDe=o(" (Pegasus model)"),ZDe=l(),Bm=a("li"),LQ=a("strong"),eje=o("perceiver"),oje=o(" \u2014 "),m9=a("a"),rje=o("PerceiverConfig"),tje=o(" (Perceiver model)"),aje=l(),xm=a("li"),BQ=a("strong"),nje=o("plbart"),sje=o(" \u2014 "),g9=a("a"),lje=o("PLBartConfig"),ije=o(" (PLBart model)"),dje=l(),km=a("li"),xQ=a("strong"),cje=o("poolformer"),fje=o(" \u2014 "),h9=a("a"),mje=o("PoolFormerConfig"),gje=o(" (PoolFormer model)"),hje=l(),Rm=a("li"),kQ=a("strong"),uje=o("prophetnet"),pje=o(" \u2014 "),u9=a("a"),_je=o("ProphetNetConfig"),vje=o(" (ProphetNet model)"),bje=l(),Sm=a("li"),RQ=a("strong"),Tje=o("qdqbert"),Fje=o(" \u2014 "),p9=a("a"),Cje=o("QDQBertConfig"),Mje=o(" (QDQBert model)"),Eje=l(),Pm=a("li"),SQ=a("strong"),yje=o("rag"),wje=o(" \u2014 "),_9=a("a"),Aje=o("RagConfig"),Lje=o(" (RAG model)"),Bje=l(),$m=a("li"),PQ=a("strong"),xje=o("realm"),kje=o(" \u2014 "),v9=a("a"),Rje=o("RealmConfig"),Sje=o(" (Realm model)"),Pje=l(),Im=a("li"),$Q=a("strong"),$je=o("reformer"),Ije=o(" \u2014 "),b9=a("a"),Dje=o("ReformerConfig"),jje=o(" (Reformer model)"),Nje=l(),Dm=a("li"),IQ=a("strong"),qje=o("rembert"),Gje=o(" \u2014 "),T9=a("a"),Oje=o("RemBertConfig"),Xje=o(" (RemBERT model)"),Vje=l(),jm=a("li"),DQ=a("strong"),zje=o("retribert"),Wje=o(" \u2014 "),F9=a("a"),Qje=o("RetriBertConfig"),Hje=o(" (RetriBERT model)"),Uje=l(),Nm=a("li"),jQ=a("strong"),Jje=o("roberta"),Yje=o(" \u2014 "),C9=a("a"),Kje=o("RobertaConfig"),Zje=o(" (RoBERTa model)"),eNe=l(),qm=a("li"),NQ=a("strong"),oNe=o("roformer"),rNe=o(" \u2014 "),M9=a("a"),tNe=o("RoFormerConfig"),aNe=o(" (RoFormer model)"),nNe=l(),Gm=a("li"),qQ=a("strong"),sNe=o("segformer"),lNe=o(" \u2014 "),E9=a("a"),iNe=o("SegformerConfig"),dNe=o(" (SegFormer model)"),cNe=l(),Om=a("li"),GQ=a("strong"),fNe=o("sew"),mNe=o(" \u2014 "),y9=a("a"),gNe=o("SEWConfig"),hNe=o(" (SEW model)"),uNe=l(),Xm=a("li"),OQ=a("strong"),pNe=o("sew-d"),_Ne=o(" \u2014 "),w9=a("a"),vNe=o("SEWDConfig"),bNe=o(" (SEW-D model)"),TNe=l(),Vm=a("li"),XQ=a("strong"),FNe=o("speech-encoder-decoder"),CNe=o(" \u2014 "),A9=a("a"),MNe=o("SpeechEncoderDecoderConfig"),ENe=o(" (Speech Encoder decoder model)"),yNe=l(),zm=a("li"),VQ=a("strong"),wNe=o("speech_to_text"),ANe=o(" \u2014 "),L9=a("a"),LNe=o("Speech2TextConfig"),BNe=o(" (Speech2Text model)"),xNe=l(),Wm=a("li"),zQ=a("strong"),kNe=o("speech_to_text_2"),RNe=o(" \u2014 "),B9=a("a"),SNe=o("Speech2Text2Config"),PNe=o(" (Speech2Text2 model)"),$Ne=l(),Qm=a("li"),WQ=a("strong"),INe=o("splinter"),DNe=o(" \u2014 "),x9=a("a"),jNe=o("SplinterConfig"),NNe=o(" (Splinter model)"),qNe=l(),Hm=a("li"),QQ=a("strong"),GNe=o("squeezebert"),ONe=o(" \u2014 "),k9=a("a"),XNe=o("SqueezeBertConfig"),VNe=o(" (SqueezeBERT model)"),zNe=l(),Um=a("li"),HQ=a("strong"),WNe=o("swin"),QNe=o(" \u2014 "),R9=a("a"),HNe=o("SwinConfig"),UNe=o(" (Swin model)"),JNe=l(),Jm=a("li"),UQ=a("strong"),YNe=o("t5"),KNe=o(" \u2014 "),S9=a("a"),ZNe=o("T5Config"),eqe=o(" (T5 model)"),oqe=l(),Ym=a("li"),JQ=a("strong"),rqe=o("tapas"),tqe=o(" \u2014 "),P9=a("a"),aqe=o("TapasConfig"),nqe=o(" (TAPAS model)"),sqe=l(),Km=a("li"),YQ=a("strong"),lqe=o("transfo-xl"),iqe=o(" \u2014 "),$9=a("a"),dqe=o("TransfoXLConfig"),cqe=o(" (Transformer-XL model)"),fqe=l(),Zm=a("li"),KQ=a("strong"),mqe=o("trocr"),gqe=o(" \u2014 "),I9=a("a"),hqe=o("TrOCRConfig"),uqe=o(" (TrOCR model)"),pqe=l(),eg=a("li"),ZQ=a("strong"),_qe=o("unispeech"),vqe=o(" \u2014 "),D9=a("a"),bqe=o("UniSpeechConfig"),Tqe=o(" (UniSpeech model)"),Fqe=l(),og=a("li"),eH=a("strong"),Cqe=o("unispeech-sat"),Mqe=o(" \u2014 "),j9=a("a"),Eqe=o("UniSpeechSatConfig"),yqe=o(" (UniSpeechSat model)"),wqe=l(),rg=a("li"),oH=a("strong"),Aqe=o("vilt"),Lqe=o(" \u2014 "),N9=a("a"),Bqe=o("ViltConfig"),xqe=o(" (ViLT model)"),kqe=l(),tg=a("li"),rH=a("strong"),Rqe=o("vision-encoder-decoder"),Sqe=o(" \u2014 "),q9=a("a"),Pqe=o("VisionEncoderDecoderConfig"),$qe=o(" (Vision Encoder decoder model)"),Iqe=l(),ag=a("li"),tH=a("strong"),Dqe=o("vision-text-dual-encoder"),jqe=o(" \u2014 "),G9=a("a"),Nqe=o("VisionTextDualEncoderConfig"),qqe=o(" (VisionTextDualEncoder model)"),Gqe=l(),ng=a("li"),aH=a("strong"),Oqe=o("visual_bert"),Xqe=o(" \u2014 "),O9=a("a"),Vqe=o("VisualBertConfig"),zqe=o(" (VisualBert model)"),Wqe=l(),sg=a("li"),nH=a("strong"),Qqe=o("vit"),Hqe=o(" \u2014 "),X9=a("a"),Uqe=o("ViTConfig"),Jqe=o(" (ViT model)"),Yqe=l(),lg=a("li"),sH=a("strong"),Kqe=o("vit_mae"),Zqe=o(" \u2014 "),V9=a("a"),eGe=o("ViTMAEConfig"),oGe=o(" (ViTMAE model)"),rGe=l(),ig=a("li"),lH=a("strong"),tGe=o("wav2vec2"),aGe=o(" \u2014 "),z9=a("a"),nGe=o("Wav2Vec2Config"),sGe=o(" (Wav2Vec2 model)"),lGe=l(),dg=a("li"),iH=a("strong"),iGe=o("wavlm"),dGe=o(" \u2014 "),W9=a("a"),cGe=o("WavLMConfig"),fGe=o(" (WavLM model)"),mGe=l(),cg=a("li"),dH=a("strong"),gGe=o("xglm"),hGe=o(" \u2014 "),Q9=a("a"),uGe=o("XGLMConfig"),pGe=o(" (XGLM model)"),_Ge=l(),fg=a("li"),cH=a("strong"),vGe=o("xlm"),bGe=o(" \u2014 "),H9=a("a"),TGe=o("XLMConfig"),FGe=o(" (XLM model)"),CGe=l(),mg=a("li"),fH=a("strong"),MGe=o("xlm-prophetnet"),EGe=o(" \u2014 "),U9=a("a"),yGe=o("XLMProphetNetConfig"),wGe=o(" (XLMProphetNet model)"),AGe=l(),gg=a("li"),mH=a("strong"),LGe=o("xlm-roberta"),BGe=o(" \u2014 "),J9=a("a"),xGe=o("XLMRobertaConfig"),kGe=o(" (XLM-RoBERTa model)"),RGe=l(),hg=a("li"),gH=a("strong"),SGe=o("xlm-roberta-xl"),PGe=o(" \u2014 "),Y9=a("a"),$Ge=o("XLMRobertaXLConfig"),IGe=o(" (XLM-RoBERTa-XL model)"),DGe=l(),ug=a("li"),hH=a("strong"),jGe=o("xlnet"),NGe=o(" \u2014 "),K9=a("a"),qGe=o("XLNetConfig"),GGe=o(" (XLNet model)"),OGe=l(),pg=a("li"),uH=a("strong"),XGe=o("yoso"),VGe=o(" \u2014 "),Z9=a("a"),zGe=o("YosoConfig"),WGe=o(" (YOSO model)"),QGe=l(),pH=a("p"),HGe=o("Examples:"),UGe=l(),f(SE.$$.fragment),JGe=l(),_g=a("div"),f(PE.$$.fragment),YGe=l(),_H=a("p"),KGe=o("Register a new configuration for this class."),R9e=l(),ji=a("h2"),vg=a("a"),vH=a("span"),f($E.$$.fragment),ZGe=l(),bH=a("span"),eOe=o("AutoTokenizer"),S9e=l(),Vo=a("div"),f(IE.$$.fragment),oOe=l(),DE=a("p"),rOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),tOe=o("AutoTokenizer.from_pretrained()"),aOe=o(" class method."),nOe=l(),jE=a("p"),sOe=o("This class cannot be instantiated directly using "),TH=a("code"),lOe=o("__init__()"),iOe=o(" (throws an error)."),dOe=l(),mo=a("div"),f(NE.$$.fragment),cOe=l(),FH=a("p"),fOe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mOe=l(),Da=a("p"),gOe=o("The tokenizer class to instantiate is selected based on the "),CH=a("code"),hOe=o("model_type"),uOe=o(` property of the config object (either
passed as an argument or loaded from `),MH=a("code"),pOe=o("pretrained_model_name_or_path"),_Oe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=a("code"),vOe=o("pretrained_model_name_or_path"),bOe=o(":"),TOe=l(),M=a("ul"),Gn=a("li"),yH=a("strong"),FOe=o("albert"),COe=o(" \u2014 "),oB=a("a"),MOe=o("AlbertTokenizer"),EOe=o(" or "),rB=a("a"),yOe=o("AlbertTokenizerFast"),wOe=o(" (ALBERT model)"),AOe=l(),On=a("li"),wH=a("strong"),LOe=o("bart"),BOe=o(" \u2014 "),tB=a("a"),xOe=o("BartTokenizer"),kOe=o(" or "),aB=a("a"),ROe=o("BartTokenizerFast"),SOe=o(" (BART model)"),POe=l(),Xn=a("li"),AH=a("strong"),$Oe=o("barthez"),IOe=o(" \u2014 "),nB=a("a"),DOe=o("BarthezTokenizer"),jOe=o(" or "),sB=a("a"),NOe=o("BarthezTokenizerFast"),qOe=o(" (BARThez model)"),GOe=l(),bg=a("li"),LH=a("strong"),OOe=o("bartpho"),XOe=o(" \u2014 "),lB=a("a"),VOe=o("BartphoTokenizer"),zOe=o(" (BARTpho model)"),WOe=l(),Vn=a("li"),BH=a("strong"),QOe=o("bert"),HOe=o(" \u2014 "),iB=a("a"),UOe=o("BertTokenizer"),JOe=o(" or "),dB=a("a"),YOe=o("BertTokenizerFast"),KOe=o(" (BERT model)"),ZOe=l(),Tg=a("li"),xH=a("strong"),eXe=o("bert-generation"),oXe=o(" \u2014 "),cB=a("a"),rXe=o("BertGenerationTokenizer"),tXe=o(" (Bert Generation model)"),aXe=l(),Fg=a("li"),kH=a("strong"),nXe=o("bert-japanese"),sXe=o(" \u2014 "),fB=a("a"),lXe=o("BertJapaneseTokenizer"),iXe=o(" (BertJapanese model)"),dXe=l(),Cg=a("li"),RH=a("strong"),cXe=o("bertweet"),fXe=o(" \u2014 "),mB=a("a"),mXe=o("BertweetTokenizer"),gXe=o(" (Bertweet model)"),hXe=l(),zn=a("li"),SH=a("strong"),uXe=o("big_bird"),pXe=o(" \u2014 "),gB=a("a"),_Xe=o("BigBirdTokenizer"),vXe=o(" or "),hB=a("a"),bXe=o("BigBirdTokenizerFast"),TXe=o(" (BigBird model)"),FXe=l(),Wn=a("li"),PH=a("strong"),CXe=o("bigbird_pegasus"),MXe=o(" \u2014 "),uB=a("a"),EXe=o("PegasusTokenizer"),yXe=o(" or "),pB=a("a"),wXe=o("PegasusTokenizerFast"),AXe=o(" (BigBirdPegasus model)"),LXe=l(),Qn=a("li"),$H=a("strong"),BXe=o("blenderbot"),xXe=o(" \u2014 "),_B=a("a"),kXe=o("BlenderbotTokenizer"),RXe=o(" or "),vB=a("a"),SXe=o("BlenderbotTokenizerFast"),PXe=o(" (Blenderbot model)"),$Xe=l(),Mg=a("li"),IH=a("strong"),IXe=o("blenderbot-small"),DXe=o(" \u2014 "),bB=a("a"),jXe=o("BlenderbotSmallTokenizer"),NXe=o(" (BlenderbotSmall model)"),qXe=l(),Eg=a("li"),DH=a("strong"),GXe=o("byt5"),OXe=o(" \u2014 "),TB=a("a"),XXe=o("ByT5Tokenizer"),VXe=o(" (ByT5 model)"),zXe=l(),Hn=a("li"),jH=a("strong"),WXe=o("camembert"),QXe=o(" \u2014 "),FB=a("a"),HXe=o("CamembertTokenizer"),UXe=o(" or "),CB=a("a"),JXe=o("CamembertTokenizerFast"),YXe=o(" (CamemBERT model)"),KXe=l(),yg=a("li"),NH=a("strong"),ZXe=o("canine"),eVe=o(" \u2014 "),MB=a("a"),oVe=o("CanineTokenizer"),rVe=o(" (Canine model)"),tVe=l(),Un=a("li"),qH=a("strong"),aVe=o("clip"),nVe=o(" \u2014 "),EB=a("a"),sVe=o("CLIPTokenizer"),lVe=o(" or "),yB=a("a"),iVe=o("CLIPTokenizerFast"),dVe=o(" (CLIP model)"),cVe=l(),Jn=a("li"),GH=a("strong"),fVe=o("convbert"),mVe=o(" \u2014 "),wB=a("a"),gVe=o("ConvBertTokenizer"),hVe=o(" or "),AB=a("a"),uVe=o("ConvBertTokenizerFast"),pVe=o(" (ConvBERT model)"),_Ve=l(),Yn=a("li"),OH=a("strong"),vVe=o("cpm"),bVe=o(" \u2014 "),LB=a("a"),TVe=o("CpmTokenizer"),FVe=o(" or "),XH=a("code"),CVe=o("CpmTokenizerFast"),MVe=o(" (CPM model)"),EVe=l(),wg=a("li"),VH=a("strong"),yVe=o("ctrl"),wVe=o(" \u2014 "),BB=a("a"),AVe=o("CTRLTokenizer"),LVe=o(" (CTRL model)"),BVe=l(),Kn=a("li"),zH=a("strong"),xVe=o("deberta"),kVe=o(" \u2014 "),xB=a("a"),RVe=o("DebertaTokenizer"),SVe=o(" or "),kB=a("a"),PVe=o("DebertaTokenizerFast"),$Ve=o(" (DeBERTa model)"),IVe=l(),Ag=a("li"),WH=a("strong"),DVe=o("deberta-v2"),jVe=o(" \u2014 "),RB=a("a"),NVe=o("DebertaV2Tokenizer"),qVe=o(" (DeBERTa-v2 model)"),GVe=l(),Zn=a("li"),QH=a("strong"),OVe=o("distilbert"),XVe=o(" \u2014 "),SB=a("a"),VVe=o("DistilBertTokenizer"),zVe=o(" or "),PB=a("a"),WVe=o("DistilBertTokenizerFast"),QVe=o(" (DistilBERT model)"),HVe=l(),es=a("li"),HH=a("strong"),UVe=o("dpr"),JVe=o(" \u2014 "),$B=a("a"),YVe=o("DPRQuestionEncoderTokenizer"),KVe=o(" or "),IB=a("a"),ZVe=o("DPRQuestionEncoderTokenizerFast"),eze=o(" (DPR model)"),oze=l(),os=a("li"),UH=a("strong"),rze=o("electra"),tze=o(" \u2014 "),DB=a("a"),aze=o("ElectraTokenizer"),nze=o(" or "),jB=a("a"),sze=o("ElectraTokenizerFast"),lze=o(" (ELECTRA model)"),ize=l(),Lg=a("li"),JH=a("strong"),dze=o("flaubert"),cze=o(" \u2014 "),NB=a("a"),fze=o("FlaubertTokenizer"),mze=o(" (FlauBERT model)"),gze=l(),rs=a("li"),YH=a("strong"),hze=o("fnet"),uze=o(" \u2014 "),qB=a("a"),pze=o("FNetTokenizer"),_ze=o(" or "),GB=a("a"),vze=o("FNetTokenizerFast"),bze=o(" (FNet model)"),Tze=l(),Bg=a("li"),KH=a("strong"),Fze=o("fsmt"),Cze=o(" \u2014 "),OB=a("a"),Mze=o("FSMTTokenizer"),Eze=o(" (FairSeq Machine-Translation model)"),yze=l(),ts=a("li"),ZH=a("strong"),wze=o("funnel"),Aze=o(" \u2014 "),XB=a("a"),Lze=o("FunnelTokenizer"),Bze=o(" or "),VB=a("a"),xze=o("FunnelTokenizerFast"),kze=o(" (Funnel Transformer model)"),Rze=l(),as=a("li"),eU=a("strong"),Sze=o("gpt2"),Pze=o(" \u2014 "),zB=a("a"),$ze=o("GPT2Tokenizer"),Ize=o(" or "),WB=a("a"),Dze=o("GPT2TokenizerFast"),jze=o(" (OpenAI GPT-2 model)"),Nze=l(),ns=a("li"),oU=a("strong"),qze=o("gpt_neo"),Gze=o(" \u2014 "),QB=a("a"),Oze=o("GPT2Tokenizer"),Xze=o(" or "),HB=a("a"),Vze=o("GPT2TokenizerFast"),zze=o(" (GPT Neo model)"),Wze=l(),ss=a("li"),rU=a("strong"),Qze=o("herbert"),Hze=o(" \u2014 "),UB=a("a"),Uze=o("HerbertTokenizer"),Jze=o(" or "),JB=a("a"),Yze=o("HerbertTokenizerFast"),Kze=o(" (HerBERT model)"),Zze=l(),xg=a("li"),tU=a("strong"),eWe=o("hubert"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("Wav2Vec2CTCTokenizer"),tWe=o(" (Hubert model)"),aWe=l(),ls=a("li"),aU=a("strong"),nWe=o("ibert"),sWe=o(" \u2014 "),KB=a("a"),lWe=o("RobertaTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("RobertaTokenizerFast"),cWe=o(" (I-BERT model)"),fWe=l(),is=a("li"),nU=a("strong"),mWe=o("layoutlm"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("LayoutLMTokenizer"),uWe=o(" or "),ox=a("a"),pWe=o("LayoutLMTokenizerFast"),_We=o(" (LayoutLM model)"),vWe=l(),ds=a("li"),sU=a("strong"),bWe=o("layoutlmv2"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("LayoutLMv2Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("LayoutLMv2TokenizerFast"),EWe=o(" (LayoutLMv2 model)"),yWe=l(),cs=a("li"),lU=a("strong"),wWe=o("layoutxlm"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("LayoutXLMTokenizer"),BWe=o(" or "),nx=a("a"),xWe=o("LayoutXLMTokenizerFast"),kWe=o(" (LayoutXLM model)"),RWe=l(),fs=a("li"),iU=a("strong"),SWe=o("led"),PWe=o(" \u2014 "),sx=a("a"),$We=o("LEDTokenizer"),IWe=o(" or "),lx=a("a"),DWe=o("LEDTokenizerFast"),jWe=o(" (LED model)"),NWe=l(),ms=a("li"),dU=a("strong"),qWe=o("longformer"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("LongformerTokenizer"),XWe=o(" or "),dx=a("a"),VWe=o("LongformerTokenizerFast"),zWe=o(" (Longformer model)"),WWe=l(),kg=a("li"),cU=a("strong"),QWe=o("luke"),HWe=o(" \u2014 "),cx=a("a"),UWe=o("LukeTokenizer"),JWe=o(" (LUKE model)"),YWe=l(),gs=a("li"),fU=a("strong"),KWe=o("lxmert"),ZWe=o(" \u2014 "),fx=a("a"),eQe=o("LxmertTokenizer"),oQe=o(" or "),mx=a("a"),rQe=o("LxmertTokenizerFast"),tQe=o(" (LXMERT model)"),aQe=l(),Rg=a("li"),mU=a("strong"),nQe=o("m2m_100"),sQe=o(" \u2014 "),gx=a("a"),lQe=o("M2M100Tokenizer"),iQe=o(" (M2M100 model)"),dQe=l(),Sg=a("li"),gU=a("strong"),cQe=o("marian"),fQe=o(" \u2014 "),hx=a("a"),mQe=o("MarianTokenizer"),gQe=o(" (Marian model)"),hQe=l(),hs=a("li"),hU=a("strong"),uQe=o("mbart"),pQe=o(" \u2014 "),ux=a("a"),_Qe=o("MBartTokenizer"),vQe=o(" or "),px=a("a"),bQe=o("MBartTokenizerFast"),TQe=o(" (mBART model)"),FQe=l(),us=a("li"),uU=a("strong"),CQe=o("mbart50"),MQe=o(" \u2014 "),_x=a("a"),EQe=o("MBart50Tokenizer"),yQe=o(" or "),vx=a("a"),wQe=o("MBart50TokenizerFast"),AQe=o(" (mBART-50 model)"),LQe=l(),Pg=a("li"),pU=a("strong"),BQe=o("mluke"),xQe=o(" \u2014 "),bx=a("a"),kQe=o("MLukeTokenizer"),RQe=o(" (mLUKE model)"),SQe=l(),ps=a("li"),_U=a("strong"),PQe=o("mobilebert"),$Qe=o(" \u2014 "),Tx=a("a"),IQe=o("MobileBertTokenizer"),DQe=o(" or "),Fx=a("a"),jQe=o("MobileBertTokenizerFast"),NQe=o(" (MobileBERT model)"),qQe=l(),_s=a("li"),vU=a("strong"),GQe=o("mpnet"),OQe=o(" \u2014 "),Cx=a("a"),XQe=o("MPNetTokenizer"),VQe=o(" or "),Mx=a("a"),zQe=o("MPNetTokenizerFast"),WQe=o(" (MPNet model)"),QQe=l(),vs=a("li"),bU=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),Ex=a("a"),JQe=o("MT5Tokenizer"),YQe=o(" or "),yx=a("a"),KQe=o("MT5TokenizerFast"),ZQe=o(" (mT5 model)"),eHe=l(),bs=a("li"),TU=a("strong"),oHe=o("openai-gpt"),rHe=o(" \u2014 "),wx=a("a"),tHe=o("OpenAIGPTTokenizer"),aHe=o(" or "),Ax=a("a"),nHe=o("OpenAIGPTTokenizerFast"),sHe=o(" (OpenAI GPT model)"),lHe=l(),Ts=a("li"),FU=a("strong"),iHe=o("pegasus"),dHe=o(" \u2014 "),Lx=a("a"),cHe=o("PegasusTokenizer"),fHe=o(" or "),Bx=a("a"),mHe=o("PegasusTokenizerFast"),gHe=o(" (Pegasus model)"),hHe=l(),$g=a("li"),CU=a("strong"),uHe=o("perceiver"),pHe=o(" \u2014 "),xx=a("a"),_He=o("PerceiverTokenizer"),vHe=o(" (Perceiver model)"),bHe=l(),Ig=a("li"),MU=a("strong"),THe=o("phobert"),FHe=o(" \u2014 "),kx=a("a"),CHe=o("PhobertTokenizer"),MHe=o(" (PhoBERT model)"),EHe=l(),Dg=a("li"),EU=a("strong"),yHe=o("plbart"),wHe=o(" \u2014 "),Rx=a("a"),AHe=o("PLBartTokenizer"),LHe=o(" (PLBart model)"),BHe=l(),jg=a("li"),yU=a("strong"),xHe=o("prophetnet"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("ProphetNetTokenizer"),SHe=o(" (ProphetNet model)"),PHe=l(),Fs=a("li"),wU=a("strong"),$He=o("qdqbert"),IHe=o(" \u2014 "),Px=a("a"),DHe=o("BertTokenizer"),jHe=o(" or "),$x=a("a"),NHe=o("BertTokenizerFast"),qHe=o(" (QDQBert model)"),GHe=l(),Ng=a("li"),AU=a("strong"),OHe=o("rag"),XHe=o(" \u2014 "),Ix=a("a"),VHe=o("RagTokenizer"),zHe=o(" (RAG model)"),WHe=l(),Cs=a("li"),LU=a("strong"),QHe=o("reformer"),HHe=o(" \u2014 "),Dx=a("a"),UHe=o("ReformerTokenizer"),JHe=o(" or "),jx=a("a"),YHe=o("ReformerTokenizerFast"),KHe=o(" (Reformer model)"),ZHe=l(),Ms=a("li"),BU=a("strong"),eUe=o("rembert"),oUe=o(" \u2014 "),Nx=a("a"),rUe=o("RemBertTokenizer"),tUe=o(" or "),qx=a("a"),aUe=o("RemBertTokenizerFast"),nUe=o(" (RemBERT model)"),sUe=l(),Es=a("li"),xU=a("strong"),lUe=o("retribert"),iUe=o(" \u2014 "),Gx=a("a"),dUe=o("RetriBertTokenizer"),cUe=o(" or "),Ox=a("a"),fUe=o("RetriBertTokenizerFast"),mUe=o(" (RetriBERT model)"),gUe=l(),ys=a("li"),kU=a("strong"),hUe=o("roberta"),uUe=o(" \u2014 "),Xx=a("a"),pUe=o("RobertaTokenizer"),_Ue=o(" or "),Vx=a("a"),vUe=o("RobertaTokenizerFast"),bUe=o(" (RoBERTa model)"),TUe=l(),ws=a("li"),RU=a("strong"),FUe=o("roformer"),CUe=o(" \u2014 "),zx=a("a"),MUe=o("RoFormerTokenizer"),EUe=o(" or "),Wx=a("a"),yUe=o("RoFormerTokenizerFast"),wUe=o(" (RoFormer model)"),AUe=l(),qg=a("li"),SU=a("strong"),LUe=o("speech_to_text"),BUe=o(" \u2014 "),Qx=a("a"),xUe=o("Speech2TextTokenizer"),kUe=o(" (Speech2Text model)"),RUe=l(),Gg=a("li"),PU=a("strong"),SUe=o("speech_to_text_2"),PUe=o(" \u2014 "),Hx=a("a"),$Ue=o("Speech2Text2Tokenizer"),IUe=o(" (Speech2Text2 model)"),DUe=l(),As=a("li"),$U=a("strong"),jUe=o("splinter"),NUe=o(" \u2014 "),Ux=a("a"),qUe=o("SplinterTokenizer"),GUe=o(" or "),Jx=a("a"),OUe=o("SplinterTokenizerFast"),XUe=o(" (Splinter model)"),VUe=l(),Ls=a("li"),IU=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),Yx=a("a"),QUe=o("SqueezeBertTokenizer"),HUe=o(" or "),Kx=a("a"),UUe=o("SqueezeBertTokenizerFast"),JUe=o(" (SqueezeBERT model)"),YUe=l(),Bs=a("li"),DU=a("strong"),KUe=o("t5"),ZUe=o(" \u2014 "),Zx=a("a"),eJe=o("T5Tokenizer"),oJe=o(" or "),ek=a("a"),rJe=o("T5TokenizerFast"),tJe=o(" (T5 model)"),aJe=l(),Og=a("li"),jU=a("strong"),nJe=o("tapas"),sJe=o(" \u2014 "),ok=a("a"),lJe=o("TapasTokenizer"),iJe=o(" (TAPAS model)"),dJe=l(),Xg=a("li"),NU=a("strong"),cJe=o("transfo-xl"),fJe=o(" \u2014 "),rk=a("a"),mJe=o("TransfoXLTokenizer"),gJe=o(" (Transformer-XL model)"),hJe=l(),Vg=a("li"),qU=a("strong"),uJe=o("wav2vec2"),pJe=o(" \u2014 "),tk=a("a"),_Je=o("Wav2Vec2CTCTokenizer"),vJe=o(" (Wav2Vec2 model)"),bJe=l(),zg=a("li"),GU=a("strong"),TJe=o("wav2vec2_phoneme"),FJe=o(" \u2014 "),ak=a("a"),CJe=o("Wav2Vec2PhonemeCTCTokenizer"),MJe=o(" (Wav2Vec2Phoneme model)"),EJe=l(),xs=a("li"),OU=a("strong"),yJe=o("xglm"),wJe=o(" \u2014 "),nk=a("a"),AJe=o("XGLMTokenizer"),LJe=o(" or "),sk=a("a"),BJe=o("XGLMTokenizerFast"),xJe=o(" (XGLM model)"),kJe=l(),Wg=a("li"),XU=a("strong"),RJe=o("xlm"),SJe=o(" \u2014 "),lk=a("a"),PJe=o("XLMTokenizer"),$Je=o(" (XLM model)"),IJe=l(),Qg=a("li"),VU=a("strong"),DJe=o("xlm-prophetnet"),jJe=o(" \u2014 "),ik=a("a"),NJe=o("XLMProphetNetTokenizer"),qJe=o(" (XLMProphetNet model)"),GJe=l(),ks=a("li"),zU=a("strong"),OJe=o("xlm-roberta"),XJe=o(" \u2014 "),dk=a("a"),VJe=o("XLMRobertaTokenizer"),zJe=o(" or "),ck=a("a"),WJe=o("XLMRobertaTokenizerFast"),QJe=o(" (XLM-RoBERTa model)"),HJe=l(),Rs=a("li"),WU=a("strong"),UJe=o("xlnet"),JJe=o(" \u2014 "),fk=a("a"),YJe=o("XLNetTokenizer"),KJe=o(" or "),mk=a("a"),ZJe=o("XLNetTokenizerFast"),eYe=o(" (XLNet model)"),oYe=l(),QU=a("p"),rYe=o("Examples:"),tYe=l(),f(qE.$$.fragment),aYe=l(),Hg=a("div"),f(GE.$$.fragment),nYe=l(),HU=a("p"),sYe=o("Register a new tokenizer in this mapping."),P9e=l(),Ni=a("h2"),Ug=a("a"),UU=a("span"),f(OE.$$.fragment),lYe=l(),JU=a("span"),iYe=o("AutoFeatureExtractor"),$9e=l(),zo=a("div"),f(XE.$$.fragment),dYe=l(),VE=a("p"),cYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=a("a"),fYe=o("AutoFeatureExtractor.from_pretrained()"),mYe=o(" class method."),gYe=l(),zE=a("p"),hYe=o("This class cannot be instantiated directly using "),YU=a("code"),uYe=o("__init__()"),pYe=o(" (throws an error)."),_Ye=l(),xe=a("div"),f(WE.$$.fragment),vYe=l(),KU=a("p"),bYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),TYe=l(),ja=a("p"),FYe=o("The feature extractor class to instantiate is selected based on the "),ZU=a("code"),CYe=o("model_type"),MYe=o(` property of the config object
(either passed as an argument or loaded from `),eJ=a("code"),EYe=o("pretrained_model_name_or_path"),yYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=a("code"),wYe=o("pretrained_model_name_or_path"),AYe=o(":"),LYe=l(),se=a("ul"),Jg=a("li"),rJ=a("strong"),BYe=o("beit"),xYe=o(" \u2014 "),hk=a("a"),kYe=o("BeitFeatureExtractor"),RYe=o(" (BEiT model)"),SYe=l(),Yg=a("li"),tJ=a("strong"),PYe=o("clip"),$Ye=o(" \u2014 "),uk=a("a"),IYe=o("CLIPFeatureExtractor"),DYe=o(" (CLIP model)"),jYe=l(),Kg=a("li"),aJ=a("strong"),NYe=o("convnext"),qYe=o(" \u2014 "),pk=a("a"),GYe=o("ConvNextFeatureExtractor"),OYe=o(" (ConvNext model)"),XYe=l(),Zg=a("li"),nJ=a("strong"),VYe=o("deit"),zYe=o(" \u2014 "),_k=a("a"),WYe=o("DeiTFeatureExtractor"),QYe=o(" (DeiT model)"),HYe=l(),eh=a("li"),sJ=a("strong"),UYe=o("detr"),JYe=o(" \u2014 "),vk=a("a"),YYe=o("DetrFeatureExtractor"),KYe=o(" (DETR model)"),ZYe=l(),oh=a("li"),lJ=a("strong"),eKe=o("hubert"),oKe=o(" \u2014 "),bk=a("a"),rKe=o("Wav2Vec2FeatureExtractor"),tKe=o(" (Hubert model)"),aKe=l(),rh=a("li"),iJ=a("strong"),nKe=o("layoutlmv2"),sKe=o(" \u2014 "),Tk=a("a"),lKe=o("LayoutLMv2FeatureExtractor"),iKe=o(" (LayoutLMv2 model)"),dKe=l(),th=a("li"),dJ=a("strong"),cKe=o("perceiver"),fKe=o(" \u2014 "),Fk=a("a"),mKe=o("PerceiverFeatureExtractor"),gKe=o(" (Perceiver model)"),hKe=l(),ah=a("li"),cJ=a("strong"),uKe=o("poolformer"),pKe=o(" \u2014 "),Ck=a("a"),_Ke=o("PoolFormerFeatureExtractor"),vKe=o(" (PoolFormer model)"),bKe=l(),nh=a("li"),fJ=a("strong"),TKe=o("segformer"),FKe=o(" \u2014 "),Mk=a("a"),CKe=o("SegformerFeatureExtractor"),MKe=o(" (SegFormer model)"),EKe=l(),sh=a("li"),mJ=a("strong"),yKe=o("speech_to_text"),wKe=o(" \u2014 "),Ek=a("a"),AKe=o("Speech2TextFeatureExtractor"),LKe=o(" (Speech2Text model)"),BKe=l(),lh=a("li"),gJ=a("strong"),xKe=o("swin"),kKe=o(" \u2014 "),yk=a("a"),RKe=o("ViTFeatureExtractor"),SKe=o(" (Swin model)"),PKe=l(),ih=a("li"),hJ=a("strong"),$Ke=o("vit"),IKe=o(" \u2014 "),wk=a("a"),DKe=o("ViTFeatureExtractor"),jKe=o(" (ViT model)"),NKe=l(),dh=a("li"),uJ=a("strong"),qKe=o("vit_mae"),GKe=o(" \u2014 "),Ak=a("a"),OKe=o("ViTFeatureExtractor"),XKe=o(" (ViTMAE model)"),VKe=l(),ch=a("li"),pJ=a("strong"),zKe=o("wav2vec2"),WKe=o(" \u2014 "),Lk=a("a"),QKe=o("Wav2Vec2FeatureExtractor"),HKe=o(" (Wav2Vec2 model)"),UKe=l(),f(fh.$$.fragment),JKe=l(),_J=a("p"),YKe=o("Examples:"),KKe=l(),f(QE.$$.fragment),ZKe=l(),mh=a("div"),f(HE.$$.fragment),eZe=l(),vJ=a("p"),oZe=o("Register a new feature extractor for this class."),I9e=l(),qi=a("h2"),gh=a("a"),bJ=a("span"),f(UE.$$.fragment),rZe=l(),TJ=a("span"),tZe=o("AutoProcessor"),D9e=l(),Wo=a("div"),f(JE.$$.fragment),aZe=l(),YE=a("p"),nZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=a("a"),sZe=o("AutoProcessor.from_pretrained()"),lZe=o(" class method."),iZe=l(),KE=a("p"),dZe=o("This class cannot be instantiated directly using "),FJ=a("code"),cZe=o("__init__()"),fZe=o(" (throws an error)."),mZe=l(),ke=a("div"),f(ZE.$$.fragment),gZe=l(),CJ=a("p"),hZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uZe=l(),Gi=a("p"),pZe=o("The processor class to instantiate is selected based on the "),MJ=a("code"),_Ze=o("model_type"),vZe=o(` property of the config object (either
passed as an argument or loaded from `),EJ=a("code"),bZe=o("pretrained_model_name_or_path"),TZe=o(" if possible):"),FZe=l(),we=a("ul"),hh=a("li"),yJ=a("strong"),CZe=o("clip"),MZe=o(" \u2014 "),xk=a("a"),EZe=o("CLIPProcessor"),yZe=o(" (CLIP model)"),wZe=l(),uh=a("li"),wJ=a("strong"),AZe=o("layoutlmv2"),LZe=o(" \u2014 "),kk=a("a"),BZe=o("LayoutLMv2Processor"),xZe=o(" (LayoutLMv2 model)"),kZe=l(),ph=a("li"),AJ=a("strong"),RZe=o("layoutxlm"),SZe=o(" \u2014 "),Rk=a("a"),PZe=o("LayoutXLMProcessor"),$Ze=o(" (LayoutXLM model)"),IZe=l(),_h=a("li"),LJ=a("strong"),DZe=o("speech_to_text"),jZe=o(" \u2014 "),Sk=a("a"),NZe=o("Speech2TextProcessor"),qZe=o(" (Speech2Text model)"),GZe=l(),vh=a("li"),BJ=a("strong"),OZe=o("speech_to_text_2"),XZe=o(" \u2014 "),Pk=a("a"),VZe=o("Speech2Text2Processor"),zZe=o(" (Speech2Text2 model)"),WZe=l(),bh=a("li"),xJ=a("strong"),QZe=o("trocr"),HZe=o(" \u2014 "),$k=a("a"),UZe=o("TrOCRProcessor"),JZe=o(" (TrOCR model)"),YZe=l(),Th=a("li"),kJ=a("strong"),KZe=o("vision-text-dual-encoder"),ZZe=o(" \u2014 "),Ik=a("a"),eeo=o("VisionTextDualEncoderProcessor"),oeo=o(" (VisionTextDualEncoder model)"),reo=l(),Fh=a("li"),RJ=a("strong"),teo=o("wav2vec2"),aeo=o(" \u2014 "),Dk=a("a"),neo=o("Wav2Vec2Processor"),seo=o(" (Wav2Vec2 model)"),leo=l(),f(Ch.$$.fragment),ieo=l(),SJ=a("p"),deo=o("Examples:"),ceo=l(),f(e3.$$.fragment),feo=l(),Mh=a("div"),f(o3.$$.fragment),meo=l(),PJ=a("p"),geo=o("Register a new processor for this class."),j9e=l(),Oi=a("h2"),Eh=a("a"),$J=a("span"),f(r3.$$.fragment),heo=l(),IJ=a("span"),ueo=o("AutoModel"),N9e=l(),Qo=a("div"),f(t3.$$.fragment),peo=l(),Xi=a("p"),_eo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=a("code"),veo=o("from_pretrained()"),beo=o("class method or the "),jJ=a("code"),Teo=o("from_config()"),Feo=o(`class
method.`),Ceo=l(),a3=a("p"),Meo=o("This class cannot be instantiated directly using "),NJ=a("code"),Eeo=o("__init__()"),yeo=o(" (throws an error)."),weo=l(),qr=a("div"),f(n3.$$.fragment),Aeo=l(),qJ=a("p"),Leo=o("Instantiates one of the base model classes of the library from a configuration."),Beo=l(),Vi=a("p"),xeo=o(`Note:
Loading a model from its configuration file does `),GJ=a("strong"),keo=o("not"),Reo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("code"),Seo=o("from_pretrained()"),Peo=o("to load the model weights."),$eo=l(),XJ=a("p"),Ieo=o("Examples:"),Deo=l(),f(s3.$$.fragment),jeo=l(),Re=a("div"),f(l3.$$.fragment),Neo=l(),VJ=a("p"),qeo=o("Instantiate one of the base model classes of the library from a pretrained model."),Geo=l(),Na=a("p"),Oeo=o("The model class to instantiate is selected based on the "),zJ=a("code"),Xeo=o("model_type"),Veo=o(` property of the config object (either
passed as an argument or loaded from `),WJ=a("code"),zeo=o("pretrained_model_name_or_path"),Weo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=a("code"),Qeo=o("pretrained_model_name_or_path"),Heo=o(":"),Ueo=l(),F=a("ul"),yh=a("li"),HJ=a("strong"),Jeo=o("albert"),Yeo=o(" \u2014 "),jk=a("a"),Keo=o("AlbertModel"),Zeo=o(" (ALBERT model)"),eoo=l(),wh=a("li"),UJ=a("strong"),ooo=o("bart"),roo=o(" \u2014 "),Nk=a("a"),too=o("BartModel"),aoo=o(" (BART model)"),noo=l(),Ah=a("li"),JJ=a("strong"),soo=o("beit"),loo=o(" \u2014 "),qk=a("a"),ioo=o("BeitModel"),doo=o(" (BEiT model)"),coo=l(),Lh=a("li"),YJ=a("strong"),foo=o("bert"),moo=o(" \u2014 "),Gk=a("a"),goo=o("BertModel"),hoo=o(" (BERT model)"),uoo=l(),Bh=a("li"),KJ=a("strong"),poo=o("bert-generation"),_oo=o(" \u2014 "),Ok=a("a"),voo=o("BertGenerationEncoder"),boo=o(" (Bert Generation model)"),Too=l(),xh=a("li"),ZJ=a("strong"),Foo=o("big_bird"),Coo=o(" \u2014 "),Xk=a("a"),Moo=o("BigBirdModel"),Eoo=o(" (BigBird model)"),yoo=l(),kh=a("li"),eY=a("strong"),woo=o("bigbird_pegasus"),Aoo=o(" \u2014 "),Vk=a("a"),Loo=o("BigBirdPegasusModel"),Boo=o(" (BigBirdPegasus model)"),xoo=l(),Rh=a("li"),oY=a("strong"),koo=o("blenderbot"),Roo=o(" \u2014 "),zk=a("a"),Soo=o("BlenderbotModel"),Poo=o(" (Blenderbot model)"),$oo=l(),Sh=a("li"),rY=a("strong"),Ioo=o("blenderbot-small"),Doo=o(" \u2014 "),Wk=a("a"),joo=o("BlenderbotSmallModel"),Noo=o(" (BlenderbotSmall model)"),qoo=l(),Ph=a("li"),tY=a("strong"),Goo=o("camembert"),Ooo=o(" \u2014 "),Qk=a("a"),Xoo=o("CamembertModel"),Voo=o(" (CamemBERT model)"),zoo=l(),$h=a("li"),aY=a("strong"),Woo=o("canine"),Qoo=o(" \u2014 "),Hk=a("a"),Hoo=o("CanineModel"),Uoo=o(" (Canine model)"),Joo=l(),Ih=a("li"),nY=a("strong"),Yoo=o("clip"),Koo=o(" \u2014 "),Uk=a("a"),Zoo=o("CLIPModel"),ero=o(" (CLIP model)"),oro=l(),Dh=a("li"),sY=a("strong"),rro=o("convbert"),tro=o(" \u2014 "),Jk=a("a"),aro=o("ConvBertModel"),nro=o(" (ConvBERT model)"),sro=l(),jh=a("li"),lY=a("strong"),lro=o("convnext"),iro=o(" \u2014 "),Yk=a("a"),dro=o("ConvNextModel"),cro=o(" (ConvNext model)"),fro=l(),Nh=a("li"),iY=a("strong"),mro=o("ctrl"),gro=o(" \u2014 "),Kk=a("a"),hro=o("CTRLModel"),uro=o(" (CTRL model)"),pro=l(),qh=a("li"),dY=a("strong"),_ro=o("data2vec-audio"),vro=o(" \u2014 "),Zk=a("a"),bro=o("Data2VecAudioModel"),Tro=o(" (Data2VecAudio model)"),Fro=l(),Gh=a("li"),cY=a("strong"),Cro=o("data2vec-text"),Mro=o(" \u2014 "),eR=a("a"),Ero=o("Data2VecTextModel"),yro=o(" (Data2VecText model)"),wro=l(),Oh=a("li"),fY=a("strong"),Aro=o("deberta"),Lro=o(" \u2014 "),oR=a("a"),Bro=o("DebertaModel"),xro=o(" (DeBERTa model)"),kro=l(),Xh=a("li"),mY=a("strong"),Rro=o("deberta-v2"),Sro=o(" \u2014 "),rR=a("a"),Pro=o("DebertaV2Model"),$ro=o(" (DeBERTa-v2 model)"),Iro=l(),Vh=a("li"),gY=a("strong"),Dro=o("deit"),jro=o(" \u2014 "),tR=a("a"),Nro=o("DeiTModel"),qro=o(" (DeiT model)"),Gro=l(),zh=a("li"),hY=a("strong"),Oro=o("detr"),Xro=o(" \u2014 "),aR=a("a"),Vro=o("DetrModel"),zro=o(" (DETR model)"),Wro=l(),Wh=a("li"),uY=a("strong"),Qro=o("distilbert"),Hro=o(" \u2014 "),nR=a("a"),Uro=o("DistilBertModel"),Jro=o(" (DistilBERT model)"),Yro=l(),Qh=a("li"),pY=a("strong"),Kro=o("dpr"),Zro=o(" \u2014 "),sR=a("a"),eto=o("DPRQuestionEncoder"),oto=o(" (DPR model)"),rto=l(),Hh=a("li"),_Y=a("strong"),tto=o("electra"),ato=o(" \u2014 "),lR=a("a"),nto=o("ElectraModel"),sto=o(" (ELECTRA model)"),lto=l(),Uh=a("li"),vY=a("strong"),ito=o("flaubert"),dto=o(" \u2014 "),iR=a("a"),cto=o("FlaubertModel"),fto=o(" (FlauBERT model)"),mto=l(),Jh=a("li"),bY=a("strong"),gto=o("fnet"),hto=o(" \u2014 "),dR=a("a"),uto=o("FNetModel"),pto=o(" (FNet model)"),_to=l(),Yh=a("li"),TY=a("strong"),vto=o("fsmt"),bto=o(" \u2014 "),cR=a("a"),Tto=o("FSMTModel"),Fto=o(" (FairSeq Machine-Translation model)"),Cto=l(),Ss=a("li"),FY=a("strong"),Mto=o("funnel"),Eto=o(" \u2014 "),fR=a("a"),yto=o("FunnelModel"),wto=o(" or "),mR=a("a"),Ato=o("FunnelBaseModel"),Lto=o(" (Funnel Transformer model)"),Bto=l(),Kh=a("li"),CY=a("strong"),xto=o("gpt2"),kto=o(" \u2014 "),gR=a("a"),Rto=o("GPT2Model"),Sto=o(" (OpenAI GPT-2 model)"),Pto=l(),Zh=a("li"),MY=a("strong"),$to=o("gpt_neo"),Ito=o(" \u2014 "),hR=a("a"),Dto=o("GPTNeoModel"),jto=o(" (GPT Neo model)"),Nto=l(),eu=a("li"),EY=a("strong"),qto=o("gptj"),Gto=o(" \u2014 "),uR=a("a"),Oto=o("GPTJModel"),Xto=o(" (GPT-J model)"),Vto=l(),ou=a("li"),yY=a("strong"),zto=o("hubert"),Wto=o(" \u2014 "),pR=a("a"),Qto=o("HubertModel"),Hto=o(" (Hubert model)"),Uto=l(),ru=a("li"),wY=a("strong"),Jto=o("ibert"),Yto=o(" \u2014 "),_R=a("a"),Kto=o("IBertModel"),Zto=o(" (I-BERT model)"),eao=l(),tu=a("li"),AY=a("strong"),oao=o("imagegpt"),rao=o(" \u2014 "),vR=a("a"),tao=o("ImageGPTModel"),aao=o(" (ImageGPT model)"),nao=l(),au=a("li"),LY=a("strong"),sao=o("layoutlm"),lao=o(" \u2014 "),bR=a("a"),iao=o("LayoutLMModel"),dao=o(" (LayoutLM model)"),cao=l(),nu=a("li"),BY=a("strong"),fao=o("layoutlmv2"),mao=o(" \u2014 "),TR=a("a"),gao=o("LayoutLMv2Model"),hao=o(" (LayoutLMv2 model)"),uao=l(),su=a("li"),xY=a("strong"),pao=o("led"),_ao=o(" \u2014 "),FR=a("a"),vao=o("LEDModel"),bao=o(" (LED model)"),Tao=l(),lu=a("li"),kY=a("strong"),Fao=o("longformer"),Cao=o(" \u2014 "),CR=a("a"),Mao=o("LongformerModel"),Eao=o(" (Longformer model)"),yao=l(),iu=a("li"),RY=a("strong"),wao=o("luke"),Aao=o(" \u2014 "),MR=a("a"),Lao=o("LukeModel"),Bao=o(" (LUKE model)"),xao=l(),du=a("li"),SY=a("strong"),kao=o("lxmert"),Rao=o(" \u2014 "),ER=a("a"),Sao=o("LxmertModel"),Pao=o(" (LXMERT model)"),$ao=l(),cu=a("li"),PY=a("strong"),Iao=o("m2m_100"),Dao=o(" \u2014 "),yR=a("a"),jao=o("M2M100Model"),Nao=o(" (M2M100 model)"),qao=l(),fu=a("li"),$Y=a("strong"),Gao=o("marian"),Oao=o(" \u2014 "),wR=a("a"),Xao=o("MarianModel"),Vao=o(" (Marian model)"),zao=l(),mu=a("li"),IY=a("strong"),Wao=o("maskformer"),Qao=o(" \u2014 "),AR=a("a"),Hao=o("MaskFormerModel"),Uao=o(" (MaskFormer model)"),Jao=l(),gu=a("li"),DY=a("strong"),Yao=o("mbart"),Kao=o(" \u2014 "),LR=a("a"),Zao=o("MBartModel"),eno=o(" (mBART model)"),ono=l(),hu=a("li"),jY=a("strong"),rno=o("megatron-bert"),tno=o(" \u2014 "),BR=a("a"),ano=o("MegatronBertModel"),nno=o(" (MegatronBert model)"),sno=l(),uu=a("li"),NY=a("strong"),lno=o("mobilebert"),ino=o(" \u2014 "),xR=a("a"),dno=o("MobileBertModel"),cno=o(" (MobileBERT model)"),fno=l(),pu=a("li"),qY=a("strong"),mno=o("mpnet"),gno=o(" \u2014 "),kR=a("a"),hno=o("MPNetModel"),uno=o(" (MPNet model)"),pno=l(),_u=a("li"),GY=a("strong"),_no=o("mt5"),vno=o(" \u2014 "),RR=a("a"),bno=o("MT5Model"),Tno=o(" (mT5 model)"),Fno=l(),vu=a("li"),OY=a("strong"),Cno=o("nystromformer"),Mno=o(" \u2014 "),SR=a("a"),Eno=o("NystromformerModel"),yno=o(" (Nystromformer model)"),wno=l(),bu=a("li"),XY=a("strong"),Ano=o("openai-gpt"),Lno=o(" \u2014 "),PR=a("a"),Bno=o("OpenAIGPTModel"),xno=o(" (OpenAI GPT model)"),kno=l(),Tu=a("li"),VY=a("strong"),Rno=o("pegasus"),Sno=o(" \u2014 "),$R=a("a"),Pno=o("PegasusModel"),$no=o(" (Pegasus model)"),Ino=l(),Fu=a("li"),zY=a("strong"),Dno=o("perceiver"),jno=o(" \u2014 "),IR=a("a"),Nno=o("PerceiverModel"),qno=o(" (Perceiver model)"),Gno=l(),Cu=a("li"),WY=a("strong"),Ono=o("plbart"),Xno=o(" \u2014 "),DR=a("a"),Vno=o("PLBartModel"),zno=o(" (PLBart model)"),Wno=l(),Mu=a("li"),QY=a("strong"),Qno=o("poolformer"),Hno=o(" \u2014 "),jR=a("a"),Uno=o("PoolFormerModel"),Jno=o(" (PoolFormer model)"),Yno=l(),Eu=a("li"),HY=a("strong"),Kno=o("prophetnet"),Zno=o(" \u2014 "),NR=a("a"),eso=o("ProphetNetModel"),oso=o(" (ProphetNet model)"),rso=l(),yu=a("li"),UY=a("strong"),tso=o("qdqbert"),aso=o(" \u2014 "),qR=a("a"),nso=o("QDQBertModel"),sso=o(" (QDQBert model)"),lso=l(),wu=a("li"),JY=a("strong"),iso=o("reformer"),dso=o(" \u2014 "),GR=a("a"),cso=o("ReformerModel"),fso=o(" (Reformer model)"),mso=l(),Au=a("li"),YY=a("strong"),gso=o("rembert"),hso=o(" \u2014 "),OR=a("a"),uso=o("RemBertModel"),pso=o(" (RemBERT model)"),_so=l(),Lu=a("li"),KY=a("strong"),vso=o("retribert"),bso=o(" \u2014 "),XR=a("a"),Tso=o("RetriBertModel"),Fso=o(" (RetriBERT model)"),Cso=l(),Bu=a("li"),ZY=a("strong"),Mso=o("roberta"),Eso=o(" \u2014 "),VR=a("a"),yso=o("RobertaModel"),wso=o(" (RoBERTa model)"),Aso=l(),xu=a("li"),eK=a("strong"),Lso=o("roformer"),Bso=o(" \u2014 "),zR=a("a"),xso=o("RoFormerModel"),kso=o(" (RoFormer model)"),Rso=l(),ku=a("li"),oK=a("strong"),Sso=o("segformer"),Pso=o(" \u2014 "),WR=a("a"),$so=o("SegformerModel"),Iso=o(" (SegFormer model)"),Dso=l(),Ru=a("li"),rK=a("strong"),jso=o("sew"),Nso=o(" \u2014 "),QR=a("a"),qso=o("SEWModel"),Gso=o(" (SEW model)"),Oso=l(),Su=a("li"),tK=a("strong"),Xso=o("sew-d"),Vso=o(" \u2014 "),HR=a("a"),zso=o("SEWDModel"),Wso=o(" (SEW-D model)"),Qso=l(),Pu=a("li"),aK=a("strong"),Hso=o("speech_to_text"),Uso=o(" \u2014 "),UR=a("a"),Jso=o("Speech2TextModel"),Yso=o(" (Speech2Text model)"),Kso=l(),$u=a("li"),nK=a("strong"),Zso=o("splinter"),elo=o(" \u2014 "),JR=a("a"),olo=o("SplinterModel"),rlo=o(" (Splinter model)"),tlo=l(),Iu=a("li"),sK=a("strong"),alo=o("squeezebert"),nlo=o(" \u2014 "),YR=a("a"),slo=o("SqueezeBertModel"),llo=o(" (SqueezeBERT model)"),ilo=l(),Du=a("li"),lK=a("strong"),dlo=o("swin"),clo=o(" \u2014 "),KR=a("a"),flo=o("SwinModel"),mlo=o(" (Swin model)"),glo=l(),ju=a("li"),iK=a("strong"),hlo=o("t5"),ulo=o(" \u2014 "),ZR=a("a"),plo=o("T5Model"),_lo=o(" (T5 model)"),vlo=l(),Nu=a("li"),dK=a("strong"),blo=o("tapas"),Tlo=o(" \u2014 "),eS=a("a"),Flo=o("TapasModel"),Clo=o(" (TAPAS model)"),Mlo=l(),qu=a("li"),cK=a("strong"),Elo=o("transfo-xl"),ylo=o(" \u2014 "),oS=a("a"),wlo=o("TransfoXLModel"),Alo=o(" (Transformer-XL model)"),Llo=l(),Gu=a("li"),fK=a("strong"),Blo=o("unispeech"),xlo=o(" \u2014 "),rS=a("a"),klo=o("UniSpeechModel"),Rlo=o(" (UniSpeech model)"),Slo=l(),Ou=a("li"),mK=a("strong"),Plo=o("unispeech-sat"),$lo=o(" \u2014 "),tS=a("a"),Ilo=o("UniSpeechSatModel"),Dlo=o(" (UniSpeechSat model)"),jlo=l(),Xu=a("li"),gK=a("strong"),Nlo=o("vilt"),qlo=o(" \u2014 "),aS=a("a"),Glo=o("ViltModel"),Olo=o(" (ViLT model)"),Xlo=l(),Vu=a("li"),hK=a("strong"),Vlo=o("vision-text-dual-encoder"),zlo=o(" \u2014 "),nS=a("a"),Wlo=o("VisionTextDualEncoderModel"),Qlo=o(" (VisionTextDualEncoder model)"),Hlo=l(),zu=a("li"),uK=a("strong"),Ulo=o("visual_bert"),Jlo=o(" \u2014 "),sS=a("a"),Ylo=o("VisualBertModel"),Klo=o(" (VisualBert model)"),Zlo=l(),Wu=a("li"),pK=a("strong"),eio=o("vit"),oio=o(" \u2014 "),lS=a("a"),rio=o("ViTModel"),tio=o(" (ViT model)"),aio=l(),Qu=a("li"),_K=a("strong"),nio=o("vit_mae"),sio=o(" \u2014 "),iS=a("a"),lio=o("ViTMAEModel"),iio=o(" (ViTMAE model)"),dio=l(),Hu=a("li"),vK=a("strong"),cio=o("wav2vec2"),fio=o(" \u2014 "),dS=a("a"),mio=o("Wav2Vec2Model"),gio=o(" (Wav2Vec2 model)"),hio=l(),Uu=a("li"),bK=a("strong"),uio=o("wavlm"),pio=o(" \u2014 "),cS=a("a"),_io=o("WavLMModel"),vio=o(" (WavLM model)"),bio=l(),Ju=a("li"),TK=a("strong"),Tio=o("xglm"),Fio=o(" \u2014 "),fS=a("a"),Cio=o("XGLMModel"),Mio=o(" (XGLM model)"),Eio=l(),Yu=a("li"),FK=a("strong"),yio=o("xlm"),wio=o(" \u2014 "),mS=a("a"),Aio=o("XLMModel"),Lio=o(" (XLM model)"),Bio=l(),Ku=a("li"),CK=a("strong"),xio=o("xlm-prophetnet"),kio=o(" \u2014 "),gS=a("a"),Rio=o("XLMProphetNetModel"),Sio=o(" (XLMProphetNet model)"),Pio=l(),Zu=a("li"),MK=a("strong"),$io=o("xlm-roberta"),Iio=o(" \u2014 "),hS=a("a"),Dio=o("XLMRobertaModel"),jio=o(" (XLM-RoBERTa model)"),Nio=l(),ep=a("li"),EK=a("strong"),qio=o("xlm-roberta-xl"),Gio=o(" \u2014 "),uS=a("a"),Oio=o("XLMRobertaXLModel"),Xio=o(" (XLM-RoBERTa-XL model)"),Vio=l(),op=a("li"),yK=a("strong"),zio=o("xlnet"),Wio=o(" \u2014 "),pS=a("a"),Qio=o("XLNetModel"),Hio=o(" (XLNet model)"),Uio=l(),rp=a("li"),wK=a("strong"),Jio=o("yoso"),Yio=o(" \u2014 "),_S=a("a"),Kio=o("YosoModel"),Zio=o(" (YOSO model)"),edo=l(),tp=a("p"),odo=o("The model is set in evaluation mode by default using "),AK=a("code"),rdo=o("model.eval()"),tdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=a("code"),ado=o("model.train()"),ndo=l(),BK=a("p"),sdo=o("Examples:"),ldo=l(),f(i3.$$.fragment),q9e=l(),zi=a("h2"),ap=a("a"),xK=a("span"),f(d3.$$.fragment),ido=l(),kK=a("span"),ddo=o("AutoModelForPreTraining"),G9e=l(),Ho=a("div"),f(c3.$$.fragment),cdo=l(),Wi=a("p"),fdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=a("code"),mdo=o("from_pretrained()"),gdo=o("class method or the "),SK=a("code"),hdo=o("from_config()"),udo=o(`class
method.`),pdo=l(),f3=a("p"),_do=o("This class cannot be instantiated directly using "),PK=a("code"),vdo=o("__init__()"),bdo=o(" (throws an error)."),Tdo=l(),Gr=a("div"),f(m3.$$.fragment),Fdo=l(),$K=a("p"),Cdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mdo=l(),Qi=a("p"),Edo=o(`Note:
Loading a model from its configuration file does `),IK=a("strong"),ydo=o("not"),wdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("code"),Ado=o("from_pretrained()"),Ldo=o("to load the model weights."),Bdo=l(),jK=a("p"),xdo=o("Examples:"),kdo=l(),f(g3.$$.fragment),Rdo=l(),Se=a("div"),f(h3.$$.fragment),Sdo=l(),NK=a("p"),Pdo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$do=l(),qa=a("p"),Ido=o("The model class to instantiate is selected based on the "),qK=a("code"),Ddo=o("model_type"),jdo=o(` property of the config object (either
passed as an argument or loaded from `),GK=a("code"),Ndo=o("pretrained_model_name_or_path"),qdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=a("code"),Gdo=o("pretrained_model_name_or_path"),Odo=o(":"),Xdo=l(),k=a("ul"),np=a("li"),XK=a("strong"),Vdo=o("albert"),zdo=o(" \u2014 "),vS=a("a"),Wdo=o("AlbertForPreTraining"),Qdo=o(" (ALBERT model)"),Hdo=l(),sp=a("li"),VK=a("strong"),Udo=o("bart"),Jdo=o(" \u2014 "),bS=a("a"),Ydo=o("BartForConditionalGeneration"),Kdo=o(" (BART model)"),Zdo=l(),lp=a("li"),zK=a("strong"),eco=o("bert"),oco=o(" \u2014 "),TS=a("a"),rco=o("BertForPreTraining"),tco=o(" (BERT model)"),aco=l(),ip=a("li"),WK=a("strong"),nco=o("big_bird"),sco=o(" \u2014 "),FS=a("a"),lco=o("BigBirdForPreTraining"),ico=o(" (BigBird model)"),dco=l(),dp=a("li"),QK=a("strong"),cco=o("camembert"),fco=o(" \u2014 "),CS=a("a"),mco=o("CamembertForMaskedLM"),gco=o(" (CamemBERT model)"),hco=l(),cp=a("li"),HK=a("strong"),uco=o("ctrl"),pco=o(" \u2014 "),MS=a("a"),_co=o("CTRLLMHeadModel"),vco=o(" (CTRL model)"),bco=l(),fp=a("li"),UK=a("strong"),Tco=o("data2vec-text"),Fco=o(" \u2014 "),ES=a("a"),Cco=o("Data2VecTextForMaskedLM"),Mco=o(" (Data2VecText model)"),Eco=l(),mp=a("li"),JK=a("strong"),yco=o("deberta"),wco=o(" \u2014 "),yS=a("a"),Aco=o("DebertaForMaskedLM"),Lco=o(" (DeBERTa model)"),Bco=l(),gp=a("li"),YK=a("strong"),xco=o("deberta-v2"),kco=o(" \u2014 "),wS=a("a"),Rco=o("DebertaV2ForMaskedLM"),Sco=o(" (DeBERTa-v2 model)"),Pco=l(),hp=a("li"),KK=a("strong"),$co=o("distilbert"),Ico=o(" \u2014 "),AS=a("a"),Dco=o("DistilBertForMaskedLM"),jco=o(" (DistilBERT model)"),Nco=l(),up=a("li"),ZK=a("strong"),qco=o("electra"),Gco=o(" \u2014 "),LS=a("a"),Oco=o("ElectraForPreTraining"),Xco=o(" (ELECTRA model)"),Vco=l(),pp=a("li"),eZ=a("strong"),zco=o("flaubert"),Wco=o(" \u2014 "),BS=a("a"),Qco=o("FlaubertWithLMHeadModel"),Hco=o(" (FlauBERT model)"),Uco=l(),_p=a("li"),oZ=a("strong"),Jco=o("fnet"),Yco=o(" \u2014 "),xS=a("a"),Kco=o("FNetForPreTraining"),Zco=o(" (FNet model)"),efo=l(),vp=a("li"),rZ=a("strong"),ofo=o("fsmt"),rfo=o(" \u2014 "),kS=a("a"),tfo=o("FSMTForConditionalGeneration"),afo=o(" (FairSeq Machine-Translation model)"),nfo=l(),bp=a("li"),tZ=a("strong"),sfo=o("funnel"),lfo=o(" \u2014 "),RS=a("a"),ifo=o("FunnelForPreTraining"),dfo=o(" (Funnel Transformer model)"),cfo=l(),Tp=a("li"),aZ=a("strong"),ffo=o("gpt2"),mfo=o(" \u2014 "),SS=a("a"),gfo=o("GPT2LMHeadModel"),hfo=o(" (OpenAI GPT-2 model)"),ufo=l(),Fp=a("li"),nZ=a("strong"),pfo=o("ibert"),_fo=o(" \u2014 "),PS=a("a"),vfo=o("IBertForMaskedLM"),bfo=o(" (I-BERT model)"),Tfo=l(),Cp=a("li"),sZ=a("strong"),Ffo=o("layoutlm"),Cfo=o(" \u2014 "),$S=a("a"),Mfo=o("LayoutLMForMaskedLM"),Efo=o(" (LayoutLM model)"),yfo=l(),Mp=a("li"),lZ=a("strong"),wfo=o("longformer"),Afo=o(" \u2014 "),IS=a("a"),Lfo=o("LongformerForMaskedLM"),Bfo=o(" (Longformer model)"),xfo=l(),Ep=a("li"),iZ=a("strong"),kfo=o("lxmert"),Rfo=o(" \u2014 "),DS=a("a"),Sfo=o("LxmertForPreTraining"),Pfo=o(" (LXMERT model)"),$fo=l(),yp=a("li"),dZ=a("strong"),Ifo=o("megatron-bert"),Dfo=o(" \u2014 "),jS=a("a"),jfo=o("MegatronBertForPreTraining"),Nfo=o(" (MegatronBert model)"),qfo=l(),wp=a("li"),cZ=a("strong"),Gfo=o("mobilebert"),Ofo=o(" \u2014 "),NS=a("a"),Xfo=o("MobileBertForPreTraining"),Vfo=o(" (MobileBERT model)"),zfo=l(),Ap=a("li"),fZ=a("strong"),Wfo=o("mpnet"),Qfo=o(" \u2014 "),qS=a("a"),Hfo=o("MPNetForMaskedLM"),Ufo=o(" (MPNet model)"),Jfo=l(),Lp=a("li"),mZ=a("strong"),Yfo=o("openai-gpt"),Kfo=o(" \u2014 "),GS=a("a"),Zfo=o("OpenAIGPTLMHeadModel"),emo=o(" (OpenAI GPT model)"),omo=l(),Bp=a("li"),gZ=a("strong"),rmo=o("retribert"),tmo=o(" \u2014 "),OS=a("a"),amo=o("RetriBertModel"),nmo=o(" (RetriBERT model)"),smo=l(),xp=a("li"),hZ=a("strong"),lmo=o("roberta"),imo=o(" \u2014 "),XS=a("a"),dmo=o("RobertaForMaskedLM"),cmo=o(" (RoBERTa model)"),fmo=l(),kp=a("li"),uZ=a("strong"),mmo=o("squeezebert"),gmo=o(" \u2014 "),VS=a("a"),hmo=o("SqueezeBertForMaskedLM"),umo=o(" (SqueezeBERT model)"),pmo=l(),Rp=a("li"),pZ=a("strong"),_mo=o("t5"),vmo=o(" \u2014 "),zS=a("a"),bmo=o("T5ForConditionalGeneration"),Tmo=o(" (T5 model)"),Fmo=l(),Sp=a("li"),_Z=a("strong"),Cmo=o("tapas"),Mmo=o(" \u2014 "),WS=a("a"),Emo=o("TapasForMaskedLM"),ymo=o(" (TAPAS model)"),wmo=l(),Pp=a("li"),vZ=a("strong"),Amo=o("transfo-xl"),Lmo=o(" \u2014 "),QS=a("a"),Bmo=o("TransfoXLLMHeadModel"),xmo=o(" (Transformer-XL model)"),kmo=l(),$p=a("li"),bZ=a("strong"),Rmo=o("unispeech"),Smo=o(" \u2014 "),HS=a("a"),Pmo=o("UniSpeechForPreTraining"),$mo=o(" (UniSpeech model)"),Imo=l(),Ip=a("li"),TZ=a("strong"),Dmo=o("unispeech-sat"),jmo=o(" \u2014 "),US=a("a"),Nmo=o("UniSpeechSatForPreTraining"),qmo=o(" (UniSpeechSat model)"),Gmo=l(),Dp=a("li"),FZ=a("strong"),Omo=o("visual_bert"),Xmo=o(" \u2014 "),JS=a("a"),Vmo=o("VisualBertForPreTraining"),zmo=o(" (VisualBert model)"),Wmo=l(),jp=a("li"),CZ=a("strong"),Qmo=o("vit_mae"),Hmo=o(" \u2014 "),YS=a("a"),Umo=o("ViTMAEForPreTraining"),Jmo=o(" (ViTMAE model)"),Ymo=l(),Np=a("li"),MZ=a("strong"),Kmo=o("wav2vec2"),Zmo=o(" \u2014 "),KS=a("a"),ego=o("Wav2Vec2ForPreTraining"),ogo=o(" (Wav2Vec2 model)"),rgo=l(),qp=a("li"),EZ=a("strong"),tgo=o("xlm"),ago=o(" \u2014 "),ZS=a("a"),ngo=o("XLMWithLMHeadModel"),sgo=o(" (XLM model)"),lgo=l(),Gp=a("li"),yZ=a("strong"),igo=o("xlm-roberta"),dgo=o(" \u2014 "),eP=a("a"),cgo=o("XLMRobertaForMaskedLM"),fgo=o(" (XLM-RoBERTa model)"),mgo=l(),Op=a("li"),wZ=a("strong"),ggo=o("xlm-roberta-xl"),hgo=o(" \u2014 "),oP=a("a"),ugo=o("XLMRobertaXLForMaskedLM"),pgo=o(" (XLM-RoBERTa-XL model)"),_go=l(),Xp=a("li"),AZ=a("strong"),vgo=o("xlnet"),bgo=o(" \u2014 "),rP=a("a"),Tgo=o("XLNetLMHeadModel"),Fgo=o(" (XLNet model)"),Cgo=l(),Vp=a("p"),Mgo=o("The model is set in evaluation mode by default using "),LZ=a("code"),Ego=o("model.eval()"),ygo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=a("code"),wgo=o("model.train()"),Ago=l(),xZ=a("p"),Lgo=o("Examples:"),Bgo=l(),f(u3.$$.fragment),O9e=l(),Hi=a("h2"),zp=a("a"),kZ=a("span"),f(p3.$$.fragment),xgo=l(),RZ=a("span"),kgo=o("AutoModelForCausalLM"),X9e=l(),Uo=a("div"),f(_3.$$.fragment),Rgo=l(),Ui=a("p"),Sgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=a("code"),Pgo=o("from_pretrained()"),$go=o("class method or the "),PZ=a("code"),Igo=o("from_config()"),Dgo=o(`class
method.`),jgo=l(),v3=a("p"),Ngo=o("This class cannot be instantiated directly using "),$Z=a("code"),qgo=o("__init__()"),Ggo=o(" (throws an error)."),Ogo=l(),Or=a("div"),f(b3.$$.fragment),Xgo=l(),IZ=a("p"),Vgo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zgo=l(),Ji=a("p"),Wgo=o(`Note:
Loading a model from its configuration file does `),DZ=a("strong"),Qgo=o("not"),Hgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("code"),Ugo=o("from_pretrained()"),Jgo=o("to load the model weights."),Ygo=l(),NZ=a("p"),Kgo=o("Examples:"),Zgo=l(),f(T3.$$.fragment),eho=l(),Pe=a("div"),f(F3.$$.fragment),oho=l(),qZ=a("p"),rho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tho=l(),Ga=a("p"),aho=o("The model class to instantiate is selected based on the "),GZ=a("code"),nho=o("model_type"),sho=o(` property of the config object (either
passed as an argument or loaded from `),OZ=a("code"),lho=o("pretrained_model_name_or_path"),iho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=a("code"),dho=o("pretrained_model_name_or_path"),cho=o(":"),fho=l(),$=a("ul"),Wp=a("li"),VZ=a("strong"),mho=o("bart"),gho=o(" \u2014 "),tP=a("a"),hho=o("BartForCausalLM"),uho=o(" (BART model)"),pho=l(),Qp=a("li"),zZ=a("strong"),_ho=o("bert"),vho=o(" \u2014 "),aP=a("a"),bho=o("BertLMHeadModel"),Tho=o(" (BERT model)"),Fho=l(),Hp=a("li"),WZ=a("strong"),Cho=o("bert-generation"),Mho=o(" \u2014 "),nP=a("a"),Eho=o("BertGenerationDecoder"),yho=o(" (Bert Generation model)"),who=l(),Up=a("li"),QZ=a("strong"),Aho=o("big_bird"),Lho=o(" \u2014 "),sP=a("a"),Bho=o("BigBirdForCausalLM"),xho=o(" (BigBird model)"),kho=l(),Jp=a("li"),HZ=a("strong"),Rho=o("bigbird_pegasus"),Sho=o(" \u2014 "),lP=a("a"),Pho=o("BigBirdPegasusForCausalLM"),$ho=o(" (BigBirdPegasus model)"),Iho=l(),Yp=a("li"),UZ=a("strong"),Dho=o("blenderbot"),jho=o(" \u2014 "),iP=a("a"),Nho=o("BlenderbotForCausalLM"),qho=o(" (Blenderbot model)"),Gho=l(),Kp=a("li"),JZ=a("strong"),Oho=o("blenderbot-small"),Xho=o(" \u2014 "),dP=a("a"),Vho=o("BlenderbotSmallForCausalLM"),zho=o(" (BlenderbotSmall model)"),Who=l(),Zp=a("li"),YZ=a("strong"),Qho=o("camembert"),Hho=o(" \u2014 "),cP=a("a"),Uho=o("CamembertForCausalLM"),Jho=o(" (CamemBERT model)"),Yho=l(),e_=a("li"),KZ=a("strong"),Kho=o("ctrl"),Zho=o(" \u2014 "),fP=a("a"),euo=o("CTRLLMHeadModel"),ouo=o(" (CTRL model)"),ruo=l(),o_=a("li"),ZZ=a("strong"),tuo=o("data2vec-text"),auo=o(" \u2014 "),mP=a("a"),nuo=o("Data2VecTextForCausalLM"),suo=o(" (Data2VecText model)"),luo=l(),r_=a("li"),eee=a("strong"),iuo=o("electra"),duo=o(" \u2014 "),gP=a("a"),cuo=o("ElectraForCausalLM"),fuo=o(" (ELECTRA model)"),muo=l(),t_=a("li"),oee=a("strong"),guo=o("gpt2"),huo=o(" \u2014 "),hP=a("a"),uuo=o("GPT2LMHeadModel"),puo=o(" (OpenAI GPT-2 model)"),_uo=l(),a_=a("li"),ree=a("strong"),vuo=o("gpt_neo"),buo=o(" \u2014 "),uP=a("a"),Tuo=o("GPTNeoForCausalLM"),Fuo=o(" (GPT Neo model)"),Cuo=l(),n_=a("li"),tee=a("strong"),Muo=o("gptj"),Euo=o(" \u2014 "),pP=a("a"),yuo=o("GPTJForCausalLM"),wuo=o(" (GPT-J model)"),Auo=l(),s_=a("li"),aee=a("strong"),Luo=o("marian"),Buo=o(" \u2014 "),_P=a("a"),xuo=o("MarianForCausalLM"),kuo=o(" (Marian model)"),Ruo=l(),l_=a("li"),nee=a("strong"),Suo=o("mbart"),Puo=o(" \u2014 "),vP=a("a"),$uo=o("MBartForCausalLM"),Iuo=o(" (mBART model)"),Duo=l(),i_=a("li"),see=a("strong"),juo=o("megatron-bert"),Nuo=o(" \u2014 "),bP=a("a"),quo=o("MegatronBertForCausalLM"),Guo=o(" (MegatronBert model)"),Ouo=l(),d_=a("li"),lee=a("strong"),Xuo=o("openai-gpt"),Vuo=o(" \u2014 "),TP=a("a"),zuo=o("OpenAIGPTLMHeadModel"),Wuo=o(" (OpenAI GPT model)"),Quo=l(),c_=a("li"),iee=a("strong"),Huo=o("pegasus"),Uuo=o(" \u2014 "),FP=a("a"),Juo=o("PegasusForCausalLM"),Yuo=o(" (Pegasus model)"),Kuo=l(),f_=a("li"),dee=a("strong"),Zuo=o("plbart"),epo=o(" \u2014 "),CP=a("a"),opo=o("PLBartForCausalLM"),rpo=o(" (PLBart model)"),tpo=l(),m_=a("li"),cee=a("strong"),apo=o("prophetnet"),npo=o(" \u2014 "),MP=a("a"),spo=o("ProphetNetForCausalLM"),lpo=o(" (ProphetNet model)"),ipo=l(),g_=a("li"),fee=a("strong"),dpo=o("qdqbert"),cpo=o(" \u2014 "),EP=a("a"),fpo=o("QDQBertLMHeadModel"),mpo=o(" (QDQBert model)"),gpo=l(),h_=a("li"),mee=a("strong"),hpo=o("reformer"),upo=o(" \u2014 "),yP=a("a"),ppo=o("ReformerModelWithLMHead"),_po=o(" (Reformer model)"),vpo=l(),u_=a("li"),gee=a("strong"),bpo=o("rembert"),Tpo=o(" \u2014 "),wP=a("a"),Fpo=o("RemBertForCausalLM"),Cpo=o(" (RemBERT model)"),Mpo=l(),p_=a("li"),hee=a("strong"),Epo=o("roberta"),ypo=o(" \u2014 "),AP=a("a"),wpo=o("RobertaForCausalLM"),Apo=o(" (RoBERTa model)"),Lpo=l(),__=a("li"),uee=a("strong"),Bpo=o("roformer"),xpo=o(" \u2014 "),LP=a("a"),kpo=o("RoFormerForCausalLM"),Rpo=o(" (RoFormer model)"),Spo=l(),v_=a("li"),pee=a("strong"),Ppo=o("speech_to_text_2"),$po=o(" \u2014 "),BP=a("a"),Ipo=o("Speech2Text2ForCausalLM"),Dpo=o(" (Speech2Text2 model)"),jpo=l(),b_=a("li"),_ee=a("strong"),Npo=o("transfo-xl"),qpo=o(" \u2014 "),xP=a("a"),Gpo=o("TransfoXLLMHeadModel"),Opo=o(" (Transformer-XL model)"),Xpo=l(),T_=a("li"),vee=a("strong"),Vpo=o("trocr"),zpo=o(" \u2014 "),kP=a("a"),Wpo=o("TrOCRForCausalLM"),Qpo=o(" (TrOCR model)"),Hpo=l(),F_=a("li"),bee=a("strong"),Upo=o("xglm"),Jpo=o(" \u2014 "),RP=a("a"),Ypo=o("XGLMForCausalLM"),Kpo=o(" (XGLM model)"),Zpo=l(),C_=a("li"),Tee=a("strong"),e_o=o("xlm"),o_o=o(" \u2014 "),SP=a("a"),r_o=o("XLMWithLMHeadModel"),t_o=o(" (XLM model)"),a_o=l(),M_=a("li"),Fee=a("strong"),n_o=o("xlm-prophetnet"),s_o=o(" \u2014 "),PP=a("a"),l_o=o("XLMProphetNetForCausalLM"),i_o=o(" (XLMProphetNet model)"),d_o=l(),E_=a("li"),Cee=a("strong"),c_o=o("xlm-roberta"),f_o=o(" \u2014 "),$P=a("a"),m_o=o("XLMRobertaForCausalLM"),g_o=o(" (XLM-RoBERTa model)"),h_o=l(),y_=a("li"),Mee=a("strong"),u_o=o("xlm-roberta-xl"),p_o=o(" \u2014 "),IP=a("a"),__o=o("XLMRobertaXLForCausalLM"),v_o=o(" (XLM-RoBERTa-XL model)"),b_o=l(),w_=a("li"),Eee=a("strong"),T_o=o("xlnet"),F_o=o(" \u2014 "),DP=a("a"),C_o=o("XLNetLMHeadModel"),M_o=o(" (XLNet model)"),E_o=l(),A_=a("p"),y_o=o("The model is set in evaluation mode by default using "),yee=a("code"),w_o=o("model.eval()"),A_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=a("code"),L_o=o("model.train()"),B_o=l(),Aee=a("p"),x_o=o("Examples:"),k_o=l(),f(C3.$$.fragment),V9e=l(),Yi=a("h2"),L_=a("a"),Lee=a("span"),f(M3.$$.fragment),R_o=l(),Bee=a("span"),S_o=o("AutoModelForMaskedLM"),z9e=l(),Jo=a("div"),f(E3.$$.fragment),P_o=l(),Ki=a("p"),$_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=a("code"),I_o=o("from_pretrained()"),D_o=o("class method or the "),kee=a("code"),j_o=o("from_config()"),N_o=o(`class
method.`),q_o=l(),y3=a("p"),G_o=o("This class cannot be instantiated directly using "),Ree=a("code"),O_o=o("__init__()"),X_o=o(" (throws an error)."),V_o=l(),Xr=a("div"),f(w3.$$.fragment),z_o=l(),See=a("p"),W_o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Q_o=l(),Zi=a("p"),H_o=o(`Note:
Loading a model from its configuration file does `),Pee=a("strong"),U_o=o("not"),J_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("code"),Y_o=o("from_pretrained()"),K_o=o("to load the model weights."),Z_o=l(),Iee=a("p"),evo=o("Examples:"),ovo=l(),f(A3.$$.fragment),rvo=l(),$e=a("div"),f(L3.$$.fragment),tvo=l(),Dee=a("p"),avo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nvo=l(),Oa=a("p"),svo=o("The model class to instantiate is selected based on the "),jee=a("code"),lvo=o("model_type"),ivo=o(` property of the config object (either
passed as an argument or loaded from `),Nee=a("code"),dvo=o("pretrained_model_name_or_path"),cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=a("code"),fvo=o("pretrained_model_name_or_path"),mvo=o(":"),gvo=l(),I=a("ul"),B_=a("li"),Gee=a("strong"),hvo=o("albert"),uvo=o(" \u2014 "),jP=a("a"),pvo=o("AlbertForMaskedLM"),_vo=o(" (ALBERT model)"),vvo=l(),x_=a("li"),Oee=a("strong"),bvo=o("bart"),Tvo=o(" \u2014 "),NP=a("a"),Fvo=o("BartForConditionalGeneration"),Cvo=o(" (BART model)"),Mvo=l(),k_=a("li"),Xee=a("strong"),Evo=o("bert"),yvo=o(" \u2014 "),qP=a("a"),wvo=o("BertForMaskedLM"),Avo=o(" (BERT model)"),Lvo=l(),R_=a("li"),Vee=a("strong"),Bvo=o("big_bird"),xvo=o(" \u2014 "),GP=a("a"),kvo=o("BigBirdForMaskedLM"),Rvo=o(" (BigBird model)"),Svo=l(),S_=a("li"),zee=a("strong"),Pvo=o("camembert"),$vo=o(" \u2014 "),OP=a("a"),Ivo=o("CamembertForMaskedLM"),Dvo=o(" (CamemBERT model)"),jvo=l(),P_=a("li"),Wee=a("strong"),Nvo=o("convbert"),qvo=o(" \u2014 "),XP=a("a"),Gvo=o("ConvBertForMaskedLM"),Ovo=o(" (ConvBERT model)"),Xvo=l(),$_=a("li"),Qee=a("strong"),Vvo=o("data2vec-text"),zvo=o(" \u2014 "),VP=a("a"),Wvo=o("Data2VecTextForMaskedLM"),Qvo=o(" (Data2VecText model)"),Hvo=l(),I_=a("li"),Hee=a("strong"),Uvo=o("deberta"),Jvo=o(" \u2014 "),zP=a("a"),Yvo=o("DebertaForMaskedLM"),Kvo=o(" (DeBERTa model)"),Zvo=l(),D_=a("li"),Uee=a("strong"),e1o=o("deberta-v2"),o1o=o(" \u2014 "),WP=a("a"),r1o=o("DebertaV2ForMaskedLM"),t1o=o(" (DeBERTa-v2 model)"),a1o=l(),j_=a("li"),Jee=a("strong"),n1o=o("distilbert"),s1o=o(" \u2014 "),QP=a("a"),l1o=o("DistilBertForMaskedLM"),i1o=o(" (DistilBERT model)"),d1o=l(),N_=a("li"),Yee=a("strong"),c1o=o("electra"),f1o=o(" \u2014 "),HP=a("a"),m1o=o("ElectraForMaskedLM"),g1o=o(" (ELECTRA model)"),h1o=l(),q_=a("li"),Kee=a("strong"),u1o=o("flaubert"),p1o=o(" \u2014 "),UP=a("a"),_1o=o("FlaubertWithLMHeadModel"),v1o=o(" (FlauBERT model)"),b1o=l(),G_=a("li"),Zee=a("strong"),T1o=o("fnet"),F1o=o(" \u2014 "),JP=a("a"),C1o=o("FNetForMaskedLM"),M1o=o(" (FNet model)"),E1o=l(),O_=a("li"),eoe=a("strong"),y1o=o("funnel"),w1o=o(" \u2014 "),YP=a("a"),A1o=o("FunnelForMaskedLM"),L1o=o(" (Funnel Transformer model)"),B1o=l(),X_=a("li"),ooe=a("strong"),x1o=o("ibert"),k1o=o(" \u2014 "),KP=a("a"),R1o=o("IBertForMaskedLM"),S1o=o(" (I-BERT model)"),P1o=l(),V_=a("li"),roe=a("strong"),$1o=o("layoutlm"),I1o=o(" \u2014 "),ZP=a("a"),D1o=o("LayoutLMForMaskedLM"),j1o=o(" (LayoutLM model)"),N1o=l(),z_=a("li"),toe=a("strong"),q1o=o("longformer"),G1o=o(" \u2014 "),e$=a("a"),O1o=o("LongformerForMaskedLM"),X1o=o(" (Longformer model)"),V1o=l(),W_=a("li"),aoe=a("strong"),z1o=o("mbart"),W1o=o(" \u2014 "),o$=a("a"),Q1o=o("MBartForConditionalGeneration"),H1o=o(" (mBART model)"),U1o=l(),Q_=a("li"),noe=a("strong"),J1o=o("megatron-bert"),Y1o=o(" \u2014 "),r$=a("a"),K1o=o("MegatronBertForMaskedLM"),Z1o=o(" (MegatronBert model)"),e4o=l(),H_=a("li"),soe=a("strong"),o4o=o("mobilebert"),r4o=o(" \u2014 "),t$=a("a"),t4o=o("MobileBertForMaskedLM"),a4o=o(" (MobileBERT model)"),n4o=l(),U_=a("li"),loe=a("strong"),s4o=o("mpnet"),l4o=o(" \u2014 "),a$=a("a"),i4o=o("MPNetForMaskedLM"),d4o=o(" (MPNet model)"),c4o=l(),J_=a("li"),ioe=a("strong"),f4o=o("nystromformer"),m4o=o(" \u2014 "),n$=a("a"),g4o=o("NystromformerForMaskedLM"),h4o=o(" (Nystromformer model)"),u4o=l(),Y_=a("li"),doe=a("strong"),p4o=o("perceiver"),_4o=o(" \u2014 "),s$=a("a"),v4o=o("PerceiverForMaskedLM"),b4o=o(" (Perceiver model)"),T4o=l(),K_=a("li"),coe=a("strong"),F4o=o("qdqbert"),C4o=o(" \u2014 "),l$=a("a"),M4o=o("QDQBertForMaskedLM"),E4o=o(" (QDQBert model)"),y4o=l(),Z_=a("li"),foe=a("strong"),w4o=o("reformer"),A4o=o(" \u2014 "),i$=a("a"),L4o=o("ReformerForMaskedLM"),B4o=o(" (Reformer model)"),x4o=l(),ev=a("li"),moe=a("strong"),k4o=o("rembert"),R4o=o(" \u2014 "),d$=a("a"),S4o=o("RemBertForMaskedLM"),P4o=o(" (RemBERT model)"),$4o=l(),ov=a("li"),goe=a("strong"),I4o=o("roberta"),D4o=o(" \u2014 "),c$=a("a"),j4o=o("RobertaForMaskedLM"),N4o=o(" (RoBERTa model)"),q4o=l(),rv=a("li"),hoe=a("strong"),G4o=o("roformer"),O4o=o(" \u2014 "),f$=a("a"),X4o=o("RoFormerForMaskedLM"),V4o=o(" (RoFormer model)"),z4o=l(),tv=a("li"),uoe=a("strong"),W4o=o("squeezebert"),Q4o=o(" \u2014 "),m$=a("a"),H4o=o("SqueezeBertForMaskedLM"),U4o=o(" (SqueezeBERT model)"),J4o=l(),av=a("li"),poe=a("strong"),Y4o=o("tapas"),K4o=o(" \u2014 "),g$=a("a"),Z4o=o("TapasForMaskedLM"),ebo=o(" (TAPAS model)"),obo=l(),nv=a("li"),_oe=a("strong"),rbo=o("wav2vec2"),tbo=o(" \u2014 "),voe=a("code"),abo=o("Wav2Vec2ForMaskedLM"),nbo=o("(Wav2Vec2 model)"),sbo=l(),sv=a("li"),boe=a("strong"),lbo=o("xlm"),ibo=o(" \u2014 "),h$=a("a"),dbo=o("XLMWithLMHeadModel"),cbo=o(" (XLM model)"),fbo=l(),lv=a("li"),Toe=a("strong"),mbo=o("xlm-roberta"),gbo=o(" \u2014 "),u$=a("a"),hbo=o("XLMRobertaForMaskedLM"),ubo=o(" (XLM-RoBERTa model)"),pbo=l(),iv=a("li"),Foe=a("strong"),_bo=o("xlm-roberta-xl"),vbo=o(" \u2014 "),p$=a("a"),bbo=o("XLMRobertaXLForMaskedLM"),Tbo=o(" (XLM-RoBERTa-XL model)"),Fbo=l(),dv=a("li"),Coe=a("strong"),Cbo=o("yoso"),Mbo=o(" \u2014 "),_$=a("a"),Ebo=o("YosoForMaskedLM"),ybo=o(" (YOSO model)"),wbo=l(),cv=a("p"),Abo=o("The model is set in evaluation mode by default using "),Moe=a("code"),Lbo=o("model.eval()"),Bbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=a("code"),xbo=o("model.train()"),kbo=l(),yoe=a("p"),Rbo=o("Examples:"),Sbo=l(),f(B3.$$.fragment),W9e=l(),ed=a("h2"),fv=a("a"),woe=a("span"),f(x3.$$.fragment),Pbo=l(),Aoe=a("span"),$bo=o("AutoModelForSeq2SeqLM"),Q9e=l(),Yo=a("div"),f(k3.$$.fragment),Ibo=l(),od=a("p"),Dbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=a("code"),jbo=o("from_pretrained()"),Nbo=o("class method or the "),Boe=a("code"),qbo=o("from_config()"),Gbo=o(`class
method.`),Obo=l(),R3=a("p"),Xbo=o("This class cannot be instantiated directly using "),xoe=a("code"),Vbo=o("__init__()"),zbo=o(" (throws an error)."),Wbo=l(),Vr=a("div"),f(S3.$$.fragment),Qbo=l(),koe=a("p"),Hbo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ubo=l(),rd=a("p"),Jbo=o(`Note:
Loading a model from its configuration file does `),Roe=a("strong"),Ybo=o("not"),Kbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("code"),Zbo=o("from_pretrained()"),e2o=o("to load the model weights."),o2o=l(),Poe=a("p"),r2o=o("Examples:"),t2o=l(),f(P3.$$.fragment),a2o=l(),Ie=a("div"),f($3.$$.fragment),n2o=l(),$oe=a("p"),s2o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),l2o=l(),Xa=a("p"),i2o=o("The model class to instantiate is selected based on the "),Ioe=a("code"),d2o=o("model_type"),c2o=o(` property of the config object (either
passed as an argument or loaded from `),Doe=a("code"),f2o=o("pretrained_model_name_or_path"),m2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=a("code"),g2o=o("pretrained_model_name_or_path"),h2o=o(":"),u2o=l(),ae=a("ul"),mv=a("li"),Noe=a("strong"),p2o=o("bart"),_2o=o(" \u2014 "),v$=a("a"),v2o=o("BartForConditionalGeneration"),b2o=o(" (BART model)"),T2o=l(),gv=a("li"),qoe=a("strong"),F2o=o("bigbird_pegasus"),C2o=o(" \u2014 "),b$=a("a"),M2o=o("BigBirdPegasusForConditionalGeneration"),E2o=o(" (BigBirdPegasus model)"),y2o=l(),hv=a("li"),Goe=a("strong"),w2o=o("blenderbot"),A2o=o(" \u2014 "),T$=a("a"),L2o=o("BlenderbotForConditionalGeneration"),B2o=o(" (Blenderbot model)"),x2o=l(),uv=a("li"),Ooe=a("strong"),k2o=o("blenderbot-small"),R2o=o(" \u2014 "),F$=a("a"),S2o=o("BlenderbotSmallForConditionalGeneration"),P2o=o(" (BlenderbotSmall model)"),$2o=l(),pv=a("li"),Xoe=a("strong"),I2o=o("encoder-decoder"),D2o=o(" \u2014 "),C$=a("a"),j2o=o("EncoderDecoderModel"),N2o=o(" (Encoder decoder model)"),q2o=l(),_v=a("li"),Voe=a("strong"),G2o=o("fsmt"),O2o=o(" \u2014 "),M$=a("a"),X2o=o("FSMTForConditionalGeneration"),V2o=o(" (FairSeq Machine-Translation model)"),z2o=l(),vv=a("li"),zoe=a("strong"),W2o=o("led"),Q2o=o(" \u2014 "),E$=a("a"),H2o=o("LEDForConditionalGeneration"),U2o=o(" (LED model)"),J2o=l(),bv=a("li"),Woe=a("strong"),Y2o=o("m2m_100"),K2o=o(" \u2014 "),y$=a("a"),Z2o=o("M2M100ForConditionalGeneration"),e0o=o(" (M2M100 model)"),o0o=l(),Tv=a("li"),Qoe=a("strong"),r0o=o("marian"),t0o=o(" \u2014 "),w$=a("a"),a0o=o("MarianMTModel"),n0o=o(" (Marian model)"),s0o=l(),Fv=a("li"),Hoe=a("strong"),l0o=o("mbart"),i0o=o(" \u2014 "),A$=a("a"),d0o=o("MBartForConditionalGeneration"),c0o=o(" (mBART model)"),f0o=l(),Cv=a("li"),Uoe=a("strong"),m0o=o("mt5"),g0o=o(" \u2014 "),L$=a("a"),h0o=o("MT5ForConditionalGeneration"),u0o=o(" (mT5 model)"),p0o=l(),Mv=a("li"),Joe=a("strong"),_0o=o("pegasus"),v0o=o(" \u2014 "),B$=a("a"),b0o=o("PegasusForConditionalGeneration"),T0o=o(" (Pegasus model)"),F0o=l(),Ev=a("li"),Yoe=a("strong"),C0o=o("plbart"),M0o=o(" \u2014 "),x$=a("a"),E0o=o("PLBartForConditionalGeneration"),y0o=o(" (PLBart model)"),w0o=l(),yv=a("li"),Koe=a("strong"),A0o=o("prophetnet"),L0o=o(" \u2014 "),k$=a("a"),B0o=o("ProphetNetForConditionalGeneration"),x0o=o(" (ProphetNet model)"),k0o=l(),wv=a("li"),Zoe=a("strong"),R0o=o("t5"),S0o=o(" \u2014 "),R$=a("a"),P0o=o("T5ForConditionalGeneration"),$0o=o(" (T5 model)"),I0o=l(),Av=a("li"),ere=a("strong"),D0o=o("xlm-prophetnet"),j0o=o(" \u2014 "),S$=a("a"),N0o=o("XLMProphetNetForConditionalGeneration"),q0o=o(" (XLMProphetNet model)"),G0o=l(),Lv=a("p"),O0o=o("The model is set in evaluation mode by default using "),ore=a("code"),X0o=o("model.eval()"),V0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),z0o=o("model.train()"),W0o=l(),tre=a("p"),Q0o=o("Examples:"),H0o=l(),f(I3.$$.fragment),H9e=l(),td=a("h2"),Bv=a("a"),are=a("span"),f(D3.$$.fragment),U0o=l(),nre=a("span"),J0o=o("AutoModelForSequenceClassification"),U9e=l(),Ko=a("div"),f(j3.$$.fragment),Y0o=l(),ad=a("p"),K0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sre=a("code"),Z0o=o("from_pretrained()"),eTo=o("class method or the "),lre=a("code"),oTo=o("from_config()"),rTo=o(`class
method.`),tTo=l(),N3=a("p"),aTo=o("This class cannot be instantiated directly using "),ire=a("code"),nTo=o("__init__()"),sTo=o(" (throws an error)."),lTo=l(),zr=a("div"),f(q3.$$.fragment),iTo=l(),dre=a("p"),dTo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cTo=l(),nd=a("p"),fTo=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),mTo=o("not"),gTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("code"),hTo=o("from_pretrained()"),uTo=o("to load the model weights."),pTo=l(),mre=a("p"),_To=o("Examples:"),vTo=l(),f(G3.$$.fragment),bTo=l(),De=a("div"),f(O3.$$.fragment),TTo=l(),gre=a("p"),FTo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CTo=l(),Va=a("p"),MTo=o("The model class to instantiate is selected based on the "),hre=a("code"),ETo=o("model_type"),yTo=o(` property of the config object (either
passed as an argument or loaded from `),ure=a("code"),wTo=o("pretrained_model_name_or_path"),ATo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=a("code"),LTo=o("pretrained_model_name_or_path"),BTo=o(":"),xTo=l(),A=a("ul"),xv=a("li"),_re=a("strong"),kTo=o("albert"),RTo=o(" \u2014 "),P$=a("a"),STo=o("AlbertForSequenceClassification"),PTo=o(" (ALBERT model)"),$To=l(),kv=a("li"),vre=a("strong"),ITo=o("bart"),DTo=o(" \u2014 "),$$=a("a"),jTo=o("BartForSequenceClassification"),NTo=o(" (BART model)"),qTo=l(),Rv=a("li"),bre=a("strong"),GTo=o("bert"),OTo=o(" \u2014 "),I$=a("a"),XTo=o("BertForSequenceClassification"),VTo=o(" (BERT model)"),zTo=l(),Sv=a("li"),Tre=a("strong"),WTo=o("big_bird"),QTo=o(" \u2014 "),D$=a("a"),HTo=o("BigBirdForSequenceClassification"),UTo=o(" (BigBird model)"),JTo=l(),Pv=a("li"),Fre=a("strong"),YTo=o("bigbird_pegasus"),KTo=o(" \u2014 "),j$=a("a"),ZTo=o("BigBirdPegasusForSequenceClassification"),e7o=o(" (BigBirdPegasus model)"),o7o=l(),$v=a("li"),Cre=a("strong"),r7o=o("camembert"),t7o=o(" \u2014 "),N$=a("a"),a7o=o("CamembertForSequenceClassification"),n7o=o(" (CamemBERT model)"),s7o=l(),Iv=a("li"),Mre=a("strong"),l7o=o("canine"),i7o=o(" \u2014 "),q$=a("a"),d7o=o("CanineForSequenceClassification"),c7o=o(" (Canine model)"),f7o=l(),Dv=a("li"),Ere=a("strong"),m7o=o("convbert"),g7o=o(" \u2014 "),G$=a("a"),h7o=o("ConvBertForSequenceClassification"),u7o=o(" (ConvBERT model)"),p7o=l(),jv=a("li"),yre=a("strong"),_7o=o("ctrl"),v7o=o(" \u2014 "),O$=a("a"),b7o=o("CTRLForSequenceClassification"),T7o=o(" (CTRL model)"),F7o=l(),Nv=a("li"),wre=a("strong"),C7o=o("data2vec-text"),M7o=o(" \u2014 "),X$=a("a"),E7o=o("Data2VecTextForSequenceClassification"),y7o=o(" (Data2VecText model)"),w7o=l(),qv=a("li"),Are=a("strong"),A7o=o("deberta"),L7o=o(" \u2014 "),V$=a("a"),B7o=o("DebertaForSequenceClassification"),x7o=o(" (DeBERTa model)"),k7o=l(),Gv=a("li"),Lre=a("strong"),R7o=o("deberta-v2"),S7o=o(" \u2014 "),z$=a("a"),P7o=o("DebertaV2ForSequenceClassification"),$7o=o(" (DeBERTa-v2 model)"),I7o=l(),Ov=a("li"),Bre=a("strong"),D7o=o("distilbert"),j7o=o(" \u2014 "),W$=a("a"),N7o=o("DistilBertForSequenceClassification"),q7o=o(" (DistilBERT model)"),G7o=l(),Xv=a("li"),xre=a("strong"),O7o=o("electra"),X7o=o(" \u2014 "),Q$=a("a"),V7o=o("ElectraForSequenceClassification"),z7o=o(" (ELECTRA model)"),W7o=l(),Vv=a("li"),kre=a("strong"),Q7o=o("flaubert"),H7o=o(" \u2014 "),H$=a("a"),U7o=o("FlaubertForSequenceClassification"),J7o=o(" (FlauBERT model)"),Y7o=l(),zv=a("li"),Rre=a("strong"),K7o=o("fnet"),Z7o=o(" \u2014 "),U$=a("a"),eFo=o("FNetForSequenceClassification"),oFo=o(" (FNet model)"),rFo=l(),Wv=a("li"),Sre=a("strong"),tFo=o("funnel"),aFo=o(" \u2014 "),J$=a("a"),nFo=o("FunnelForSequenceClassification"),sFo=o(" (Funnel Transformer model)"),lFo=l(),Qv=a("li"),Pre=a("strong"),iFo=o("gpt2"),dFo=o(" \u2014 "),Y$=a("a"),cFo=o("GPT2ForSequenceClassification"),fFo=o(" (OpenAI GPT-2 model)"),mFo=l(),Hv=a("li"),$re=a("strong"),gFo=o("gpt_neo"),hFo=o(" \u2014 "),K$=a("a"),uFo=o("GPTNeoForSequenceClassification"),pFo=o(" (GPT Neo model)"),_Fo=l(),Uv=a("li"),Ire=a("strong"),vFo=o("gptj"),bFo=o(" \u2014 "),Z$=a("a"),TFo=o("GPTJForSequenceClassification"),FFo=o(" (GPT-J model)"),CFo=l(),Jv=a("li"),Dre=a("strong"),MFo=o("ibert"),EFo=o(" \u2014 "),eI=a("a"),yFo=o("IBertForSequenceClassification"),wFo=o(" (I-BERT model)"),AFo=l(),Yv=a("li"),jre=a("strong"),LFo=o("layoutlm"),BFo=o(" \u2014 "),oI=a("a"),xFo=o("LayoutLMForSequenceClassification"),kFo=o(" (LayoutLM model)"),RFo=l(),Kv=a("li"),Nre=a("strong"),SFo=o("layoutlmv2"),PFo=o(" \u2014 "),rI=a("a"),$Fo=o("LayoutLMv2ForSequenceClassification"),IFo=o(" (LayoutLMv2 model)"),DFo=l(),Zv=a("li"),qre=a("strong"),jFo=o("led"),NFo=o(" \u2014 "),tI=a("a"),qFo=o("LEDForSequenceClassification"),GFo=o(" (LED model)"),OFo=l(),e1=a("li"),Gre=a("strong"),XFo=o("longformer"),VFo=o(" \u2014 "),aI=a("a"),zFo=o("LongformerForSequenceClassification"),WFo=o(" (Longformer model)"),QFo=l(),o1=a("li"),Ore=a("strong"),HFo=o("mbart"),UFo=o(" \u2014 "),nI=a("a"),JFo=o("MBartForSequenceClassification"),YFo=o(" (mBART model)"),KFo=l(),r1=a("li"),Xre=a("strong"),ZFo=o("megatron-bert"),eCo=o(" \u2014 "),sI=a("a"),oCo=o("MegatronBertForSequenceClassification"),rCo=o(" (MegatronBert model)"),tCo=l(),t1=a("li"),Vre=a("strong"),aCo=o("mobilebert"),nCo=o(" \u2014 "),lI=a("a"),sCo=o("MobileBertForSequenceClassification"),lCo=o(" (MobileBERT model)"),iCo=l(),a1=a("li"),zre=a("strong"),dCo=o("mpnet"),cCo=o(" \u2014 "),iI=a("a"),fCo=o("MPNetForSequenceClassification"),mCo=o(" (MPNet model)"),gCo=l(),n1=a("li"),Wre=a("strong"),hCo=o("nystromformer"),uCo=o(" \u2014 "),dI=a("a"),pCo=o("NystromformerForSequenceClassification"),_Co=o(" (Nystromformer model)"),vCo=l(),s1=a("li"),Qre=a("strong"),bCo=o("openai-gpt"),TCo=o(" \u2014 "),cI=a("a"),FCo=o("OpenAIGPTForSequenceClassification"),CCo=o(" (OpenAI GPT model)"),MCo=l(),l1=a("li"),Hre=a("strong"),ECo=o("perceiver"),yCo=o(" \u2014 "),fI=a("a"),wCo=o("PerceiverForSequenceClassification"),ACo=o(" (Perceiver model)"),LCo=l(),i1=a("li"),Ure=a("strong"),BCo=o("plbart"),xCo=o(" \u2014 "),mI=a("a"),kCo=o("PLBartForSequenceClassification"),RCo=o(" (PLBart model)"),SCo=l(),d1=a("li"),Jre=a("strong"),PCo=o("qdqbert"),$Co=o(" \u2014 "),gI=a("a"),ICo=o("QDQBertForSequenceClassification"),DCo=o(" (QDQBert model)"),jCo=l(),c1=a("li"),Yre=a("strong"),NCo=o("reformer"),qCo=o(" \u2014 "),hI=a("a"),GCo=o("ReformerForSequenceClassification"),OCo=o(" (Reformer model)"),XCo=l(),f1=a("li"),Kre=a("strong"),VCo=o("rembert"),zCo=o(" \u2014 "),uI=a("a"),WCo=o("RemBertForSequenceClassification"),QCo=o(" (RemBERT model)"),HCo=l(),m1=a("li"),Zre=a("strong"),UCo=o("roberta"),JCo=o(" \u2014 "),pI=a("a"),YCo=o("RobertaForSequenceClassification"),KCo=o(" (RoBERTa model)"),ZCo=l(),g1=a("li"),ete=a("strong"),eMo=o("roformer"),oMo=o(" \u2014 "),_I=a("a"),rMo=o("RoFormerForSequenceClassification"),tMo=o(" (RoFormer model)"),aMo=l(),h1=a("li"),ote=a("strong"),nMo=o("squeezebert"),sMo=o(" \u2014 "),vI=a("a"),lMo=o("SqueezeBertForSequenceClassification"),iMo=o(" (SqueezeBERT model)"),dMo=l(),u1=a("li"),rte=a("strong"),cMo=o("tapas"),fMo=o(" \u2014 "),bI=a("a"),mMo=o("TapasForSequenceClassification"),gMo=o(" (TAPAS model)"),hMo=l(),p1=a("li"),tte=a("strong"),uMo=o("transfo-xl"),pMo=o(" \u2014 "),TI=a("a"),_Mo=o("TransfoXLForSequenceClassification"),vMo=o(" (Transformer-XL model)"),bMo=l(),_1=a("li"),ate=a("strong"),TMo=o("xlm"),FMo=o(" \u2014 "),FI=a("a"),CMo=o("XLMForSequenceClassification"),MMo=o(" (XLM model)"),EMo=l(),v1=a("li"),nte=a("strong"),yMo=o("xlm-roberta"),wMo=o(" \u2014 "),CI=a("a"),AMo=o("XLMRobertaForSequenceClassification"),LMo=o(" (XLM-RoBERTa model)"),BMo=l(),b1=a("li"),ste=a("strong"),xMo=o("xlm-roberta-xl"),kMo=o(" \u2014 "),MI=a("a"),RMo=o("XLMRobertaXLForSequenceClassification"),SMo=o(" (XLM-RoBERTa-XL model)"),PMo=l(),T1=a("li"),lte=a("strong"),$Mo=o("xlnet"),IMo=o(" \u2014 "),EI=a("a"),DMo=o("XLNetForSequenceClassification"),jMo=o(" (XLNet model)"),NMo=l(),F1=a("li"),ite=a("strong"),qMo=o("yoso"),GMo=o(" \u2014 "),yI=a("a"),OMo=o("YosoForSequenceClassification"),XMo=o(" (YOSO model)"),VMo=l(),C1=a("p"),zMo=o("The model is set in evaluation mode by default using "),dte=a("code"),WMo=o("model.eval()"),QMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=a("code"),HMo=o("model.train()"),UMo=l(),fte=a("p"),JMo=o("Examples:"),YMo=l(),f(X3.$$.fragment),J9e=l(),sd=a("h2"),M1=a("a"),mte=a("span"),f(V3.$$.fragment),KMo=l(),gte=a("span"),ZMo=o("AutoModelForMultipleChoice"),Y9e=l(),Zo=a("div"),f(z3.$$.fragment),eEo=l(),ld=a("p"),oEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=a("code"),rEo=o("from_pretrained()"),tEo=o("class method or the "),ute=a("code"),aEo=o("from_config()"),nEo=o(`class
method.`),sEo=l(),W3=a("p"),lEo=o("This class cannot be instantiated directly using "),pte=a("code"),iEo=o("__init__()"),dEo=o(" (throws an error)."),cEo=l(),Wr=a("div"),f(Q3.$$.fragment),fEo=l(),_te=a("p"),mEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gEo=l(),id=a("p"),hEo=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),uEo=o("not"),pEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=a("code"),_Eo=o("from_pretrained()"),vEo=o("to load the model weights."),bEo=l(),Tte=a("p"),TEo=o("Examples:"),FEo=l(),f(H3.$$.fragment),CEo=l(),je=a("div"),f(U3.$$.fragment),MEo=l(),Fte=a("p"),EEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yEo=l(),za=a("p"),wEo=o("The model class to instantiate is selected based on the "),Cte=a("code"),AEo=o("model_type"),LEo=o(` property of the config object (either
passed as an argument or loaded from `),Mte=a("code"),BEo=o("pretrained_model_name_or_path"),xEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=a("code"),kEo=o("pretrained_model_name_or_path"),REo=o(":"),SEo=l(),G=a("ul"),E1=a("li"),yte=a("strong"),PEo=o("albert"),$Eo=o(" \u2014 "),wI=a("a"),IEo=o("AlbertForMultipleChoice"),DEo=o(" (ALBERT model)"),jEo=l(),y1=a("li"),wte=a("strong"),NEo=o("bert"),qEo=o(" \u2014 "),AI=a("a"),GEo=o("BertForMultipleChoice"),OEo=o(" (BERT model)"),XEo=l(),w1=a("li"),Ate=a("strong"),VEo=o("big_bird"),zEo=o(" \u2014 "),LI=a("a"),WEo=o("BigBirdForMultipleChoice"),QEo=o(" (BigBird model)"),HEo=l(),A1=a("li"),Lte=a("strong"),UEo=o("camembert"),JEo=o(" \u2014 "),BI=a("a"),YEo=o("CamembertForMultipleChoice"),KEo=o(" (CamemBERT model)"),ZEo=l(),L1=a("li"),Bte=a("strong"),e3o=o("canine"),o3o=o(" \u2014 "),xI=a("a"),r3o=o("CanineForMultipleChoice"),t3o=o(" (Canine model)"),a3o=l(),B1=a("li"),xte=a("strong"),n3o=o("convbert"),s3o=o(" \u2014 "),kI=a("a"),l3o=o("ConvBertForMultipleChoice"),i3o=o(" (ConvBERT model)"),d3o=l(),x1=a("li"),kte=a("strong"),c3o=o("data2vec-text"),f3o=o(" \u2014 "),RI=a("a"),m3o=o("Data2VecTextForMultipleChoice"),g3o=o(" (Data2VecText model)"),h3o=l(),k1=a("li"),Rte=a("strong"),u3o=o("distilbert"),p3o=o(" \u2014 "),SI=a("a"),_3o=o("DistilBertForMultipleChoice"),v3o=o(" (DistilBERT model)"),b3o=l(),R1=a("li"),Ste=a("strong"),T3o=o("electra"),F3o=o(" \u2014 "),PI=a("a"),C3o=o("ElectraForMultipleChoice"),M3o=o(" (ELECTRA model)"),E3o=l(),S1=a("li"),Pte=a("strong"),y3o=o("flaubert"),w3o=o(" \u2014 "),$I=a("a"),A3o=o("FlaubertForMultipleChoice"),L3o=o(" (FlauBERT model)"),B3o=l(),P1=a("li"),$te=a("strong"),x3o=o("fnet"),k3o=o(" \u2014 "),II=a("a"),R3o=o("FNetForMultipleChoice"),S3o=o(" (FNet model)"),P3o=l(),$1=a("li"),Ite=a("strong"),$3o=o("funnel"),I3o=o(" \u2014 "),DI=a("a"),D3o=o("FunnelForMultipleChoice"),j3o=o(" (Funnel Transformer model)"),N3o=l(),I1=a("li"),Dte=a("strong"),q3o=o("ibert"),G3o=o(" \u2014 "),jI=a("a"),O3o=o("IBertForMultipleChoice"),X3o=o(" (I-BERT model)"),V3o=l(),D1=a("li"),jte=a("strong"),z3o=o("longformer"),W3o=o(" \u2014 "),NI=a("a"),Q3o=o("LongformerForMultipleChoice"),H3o=o(" (Longformer model)"),U3o=l(),j1=a("li"),Nte=a("strong"),J3o=o("megatron-bert"),Y3o=o(" \u2014 "),qI=a("a"),K3o=o("MegatronBertForMultipleChoice"),Z3o=o(" (MegatronBert model)"),e5o=l(),N1=a("li"),qte=a("strong"),o5o=o("mobilebert"),r5o=o(" \u2014 "),GI=a("a"),t5o=o("MobileBertForMultipleChoice"),a5o=o(" (MobileBERT model)"),n5o=l(),q1=a("li"),Gte=a("strong"),s5o=o("mpnet"),l5o=o(" \u2014 "),OI=a("a"),i5o=o("MPNetForMultipleChoice"),d5o=o(" (MPNet model)"),c5o=l(),G1=a("li"),Ote=a("strong"),f5o=o("nystromformer"),m5o=o(" \u2014 "),XI=a("a"),g5o=o("NystromformerForMultipleChoice"),h5o=o(" (Nystromformer model)"),u5o=l(),O1=a("li"),Xte=a("strong"),p5o=o("qdqbert"),_5o=o(" \u2014 "),VI=a("a"),v5o=o("QDQBertForMultipleChoice"),b5o=o(" (QDQBert model)"),T5o=l(),X1=a("li"),Vte=a("strong"),F5o=o("rembert"),C5o=o(" \u2014 "),zI=a("a"),M5o=o("RemBertForMultipleChoice"),E5o=o(" (RemBERT model)"),y5o=l(),V1=a("li"),zte=a("strong"),w5o=o("roberta"),A5o=o(" \u2014 "),WI=a("a"),L5o=o("RobertaForMultipleChoice"),B5o=o(" (RoBERTa model)"),x5o=l(),z1=a("li"),Wte=a("strong"),k5o=o("roformer"),R5o=o(" \u2014 "),QI=a("a"),S5o=o("RoFormerForMultipleChoice"),P5o=o(" (RoFormer model)"),$5o=l(),W1=a("li"),Qte=a("strong"),I5o=o("squeezebert"),D5o=o(" \u2014 "),HI=a("a"),j5o=o("SqueezeBertForMultipleChoice"),N5o=o(" (SqueezeBERT model)"),q5o=l(),Q1=a("li"),Hte=a("strong"),G5o=o("xlm"),O5o=o(" \u2014 "),UI=a("a"),X5o=o("XLMForMultipleChoice"),V5o=o(" (XLM model)"),z5o=l(),H1=a("li"),Ute=a("strong"),W5o=o("xlm-roberta"),Q5o=o(" \u2014 "),JI=a("a"),H5o=o("XLMRobertaForMultipleChoice"),U5o=o(" (XLM-RoBERTa model)"),J5o=l(),U1=a("li"),Jte=a("strong"),Y5o=o("xlm-roberta-xl"),K5o=o(" \u2014 "),YI=a("a"),Z5o=o("XLMRobertaXLForMultipleChoice"),eyo=o(" (XLM-RoBERTa-XL model)"),oyo=l(),J1=a("li"),Yte=a("strong"),ryo=o("xlnet"),tyo=o(" \u2014 "),KI=a("a"),ayo=o("XLNetForMultipleChoice"),nyo=o(" (XLNet model)"),syo=l(),Y1=a("li"),Kte=a("strong"),lyo=o("yoso"),iyo=o(" \u2014 "),ZI=a("a"),dyo=o("YosoForMultipleChoice"),cyo=o(" (YOSO model)"),fyo=l(),K1=a("p"),myo=o("The model is set in evaluation mode by default using "),Zte=a("code"),gyo=o("model.eval()"),hyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=a("code"),uyo=o("model.train()"),pyo=l(),oae=a("p"),_yo=o("Examples:"),vyo=l(),f(J3.$$.fragment),K9e=l(),dd=a("h2"),Z1=a("a"),rae=a("span"),f(Y3.$$.fragment),byo=l(),tae=a("span"),Tyo=o("AutoModelForNextSentencePrediction"),Z9e=l(),er=a("div"),f(K3.$$.fragment),Fyo=l(),cd=a("p"),Cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=a("code"),Myo=o("from_pretrained()"),Eyo=o("class method or the "),nae=a("code"),yyo=o("from_config()"),wyo=o(`class
method.`),Ayo=l(),Z3=a("p"),Lyo=o("This class cannot be instantiated directly using "),sae=a("code"),Byo=o("__init__()"),xyo=o(" (throws an error)."),kyo=l(),Qr=a("div"),f(e5.$$.fragment),Ryo=l(),lae=a("p"),Syo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pyo=l(),fd=a("p"),$yo=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),Iyo=o("not"),Dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("code"),jyo=o("from_pretrained()"),Nyo=o("to load the model weights."),qyo=l(),cae=a("p"),Gyo=o("Examples:"),Oyo=l(),f(o5.$$.fragment),Xyo=l(),Ne=a("div"),f(r5.$$.fragment),Vyo=l(),fae=a("p"),zyo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wyo=l(),Wa=a("p"),Qyo=o("The model class to instantiate is selected based on the "),mae=a("code"),Hyo=o("model_type"),Uyo=o(` property of the config object (either
passed as an argument or loaded from `),gae=a("code"),Jyo=o("pretrained_model_name_or_path"),Yyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=a("code"),Kyo=o("pretrained_model_name_or_path"),Zyo=o(":"),ewo=l(),na=a("ul"),e4=a("li"),uae=a("strong"),owo=o("bert"),rwo=o(" \u2014 "),eD=a("a"),two=o("BertForNextSentencePrediction"),awo=o(" (BERT model)"),nwo=l(),o4=a("li"),pae=a("strong"),swo=o("fnet"),lwo=o(" \u2014 "),oD=a("a"),iwo=o("FNetForNextSentencePrediction"),dwo=o(" (FNet model)"),cwo=l(),r4=a("li"),_ae=a("strong"),fwo=o("megatron-bert"),mwo=o(" \u2014 "),rD=a("a"),gwo=o("MegatronBertForNextSentencePrediction"),hwo=o(" (MegatronBert model)"),uwo=l(),t4=a("li"),vae=a("strong"),pwo=o("mobilebert"),_wo=o(" \u2014 "),tD=a("a"),vwo=o("MobileBertForNextSentencePrediction"),bwo=o(" (MobileBERT model)"),Two=l(),a4=a("li"),bae=a("strong"),Fwo=o("qdqbert"),Cwo=o(" \u2014 "),aD=a("a"),Mwo=o("QDQBertForNextSentencePrediction"),Ewo=o(" (QDQBert model)"),ywo=l(),n4=a("p"),wwo=o("The model is set in evaluation mode by default using "),Tae=a("code"),Awo=o("model.eval()"),Lwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=a("code"),Bwo=o("model.train()"),xwo=l(),Cae=a("p"),kwo=o("Examples:"),Rwo=l(),f(t5.$$.fragment),eBe=l(),md=a("h2"),s4=a("a"),Mae=a("span"),f(a5.$$.fragment),Swo=l(),Eae=a("span"),Pwo=o("AutoModelForTokenClassification"),oBe=l(),or=a("div"),f(n5.$$.fragment),$wo=l(),gd=a("p"),Iwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=a("code"),Dwo=o("from_pretrained()"),jwo=o("class method or the "),wae=a("code"),Nwo=o("from_config()"),qwo=o(`class
method.`),Gwo=l(),s5=a("p"),Owo=o("This class cannot be instantiated directly using "),Aae=a("code"),Xwo=o("__init__()"),Vwo=o(" (throws an error)."),zwo=l(),Hr=a("div"),f(l5.$$.fragment),Wwo=l(),Lae=a("p"),Qwo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hwo=l(),hd=a("p"),Uwo=o(`Note:
Loading a model from its configuration file does `),Bae=a("strong"),Jwo=o("not"),Ywo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("code"),Kwo=o("from_pretrained()"),Zwo=o("to load the model weights."),e6o=l(),kae=a("p"),o6o=o("Examples:"),r6o=l(),f(i5.$$.fragment),t6o=l(),qe=a("div"),f(d5.$$.fragment),a6o=l(),Rae=a("p"),n6o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s6o=l(),Qa=a("p"),l6o=o("The model class to instantiate is selected based on the "),Sae=a("code"),i6o=o("model_type"),d6o=o(` property of the config object (either
passed as an argument or loaded from `),Pae=a("code"),c6o=o("pretrained_model_name_or_path"),f6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=a("code"),m6o=o("pretrained_model_name_or_path"),g6o=o(":"),h6o=l(),N=a("ul"),l4=a("li"),Iae=a("strong"),u6o=o("albert"),p6o=o(" \u2014 "),nD=a("a"),_6o=o("AlbertForTokenClassification"),v6o=o(" (ALBERT model)"),b6o=l(),i4=a("li"),Dae=a("strong"),T6o=o("bert"),F6o=o(" \u2014 "),sD=a("a"),C6o=o("BertForTokenClassification"),M6o=o(" (BERT model)"),E6o=l(),d4=a("li"),jae=a("strong"),y6o=o("big_bird"),w6o=o(" \u2014 "),lD=a("a"),A6o=o("BigBirdForTokenClassification"),L6o=o(" (BigBird model)"),B6o=l(),c4=a("li"),Nae=a("strong"),x6o=o("camembert"),k6o=o(" \u2014 "),iD=a("a"),R6o=o("CamembertForTokenClassification"),S6o=o(" (CamemBERT model)"),P6o=l(),f4=a("li"),qae=a("strong"),$6o=o("canine"),I6o=o(" \u2014 "),dD=a("a"),D6o=o("CanineForTokenClassification"),j6o=o(" (Canine model)"),N6o=l(),m4=a("li"),Gae=a("strong"),q6o=o("convbert"),G6o=o(" \u2014 "),cD=a("a"),O6o=o("ConvBertForTokenClassification"),X6o=o(" (ConvBERT model)"),V6o=l(),g4=a("li"),Oae=a("strong"),z6o=o("data2vec-text"),W6o=o(" \u2014 "),fD=a("a"),Q6o=o("Data2VecTextForTokenClassification"),H6o=o(" (Data2VecText model)"),U6o=l(),h4=a("li"),Xae=a("strong"),J6o=o("deberta"),Y6o=o(" \u2014 "),mD=a("a"),K6o=o("DebertaForTokenClassification"),Z6o=o(" (DeBERTa model)"),eAo=l(),u4=a("li"),Vae=a("strong"),oAo=o("deberta-v2"),rAo=o(" \u2014 "),gD=a("a"),tAo=o("DebertaV2ForTokenClassification"),aAo=o(" (DeBERTa-v2 model)"),nAo=l(),p4=a("li"),zae=a("strong"),sAo=o("distilbert"),lAo=o(" \u2014 "),hD=a("a"),iAo=o("DistilBertForTokenClassification"),dAo=o(" (DistilBERT model)"),cAo=l(),_4=a("li"),Wae=a("strong"),fAo=o("electra"),mAo=o(" \u2014 "),uD=a("a"),gAo=o("ElectraForTokenClassification"),hAo=o(" (ELECTRA model)"),uAo=l(),v4=a("li"),Qae=a("strong"),pAo=o("flaubert"),_Ao=o(" \u2014 "),pD=a("a"),vAo=o("FlaubertForTokenClassification"),bAo=o(" (FlauBERT model)"),TAo=l(),b4=a("li"),Hae=a("strong"),FAo=o("fnet"),CAo=o(" \u2014 "),_D=a("a"),MAo=o("FNetForTokenClassification"),EAo=o(" (FNet model)"),yAo=l(),T4=a("li"),Uae=a("strong"),wAo=o("funnel"),AAo=o(" \u2014 "),vD=a("a"),LAo=o("FunnelForTokenClassification"),BAo=o(" (Funnel Transformer model)"),xAo=l(),F4=a("li"),Jae=a("strong"),kAo=o("gpt2"),RAo=o(" \u2014 "),bD=a("a"),SAo=o("GPT2ForTokenClassification"),PAo=o(" (OpenAI GPT-2 model)"),$Ao=l(),C4=a("li"),Yae=a("strong"),IAo=o("ibert"),DAo=o(" \u2014 "),TD=a("a"),jAo=o("IBertForTokenClassification"),NAo=o(" (I-BERT model)"),qAo=l(),M4=a("li"),Kae=a("strong"),GAo=o("layoutlm"),OAo=o(" \u2014 "),FD=a("a"),XAo=o("LayoutLMForTokenClassification"),VAo=o(" (LayoutLM model)"),zAo=l(),E4=a("li"),Zae=a("strong"),WAo=o("layoutlmv2"),QAo=o(" \u2014 "),CD=a("a"),HAo=o("LayoutLMv2ForTokenClassification"),UAo=o(" (LayoutLMv2 model)"),JAo=l(),y4=a("li"),ene=a("strong"),YAo=o("longformer"),KAo=o(" \u2014 "),MD=a("a"),ZAo=o("LongformerForTokenClassification"),eLo=o(" (Longformer model)"),oLo=l(),w4=a("li"),one=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),ED=a("a"),aLo=o("MegatronBertForTokenClassification"),nLo=o(" (MegatronBert model)"),sLo=l(),A4=a("li"),rne=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),yD=a("a"),dLo=o("MobileBertForTokenClassification"),cLo=o(" (MobileBERT model)"),fLo=l(),L4=a("li"),tne=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),wD=a("a"),hLo=o("MPNetForTokenClassification"),uLo=o(" (MPNet model)"),pLo=l(),B4=a("li"),ane=a("strong"),_Lo=o("nystromformer"),vLo=o(" \u2014 "),AD=a("a"),bLo=o("NystromformerForTokenClassification"),TLo=o(" (Nystromformer model)"),FLo=l(),x4=a("li"),nne=a("strong"),CLo=o("qdqbert"),MLo=o(" \u2014 "),LD=a("a"),ELo=o("QDQBertForTokenClassification"),yLo=o(" (QDQBert model)"),wLo=l(),k4=a("li"),sne=a("strong"),ALo=o("rembert"),LLo=o(" \u2014 "),BD=a("a"),BLo=o("RemBertForTokenClassification"),xLo=o(" (RemBERT model)"),kLo=l(),R4=a("li"),lne=a("strong"),RLo=o("roberta"),SLo=o(" \u2014 "),xD=a("a"),PLo=o("RobertaForTokenClassification"),$Lo=o(" (RoBERTa model)"),ILo=l(),S4=a("li"),ine=a("strong"),DLo=o("roformer"),jLo=o(" \u2014 "),kD=a("a"),NLo=o("RoFormerForTokenClassification"),qLo=o(" (RoFormer model)"),GLo=l(),P4=a("li"),dne=a("strong"),OLo=o("squeezebert"),XLo=o(" \u2014 "),RD=a("a"),VLo=o("SqueezeBertForTokenClassification"),zLo=o(" (SqueezeBERT model)"),WLo=l(),$4=a("li"),cne=a("strong"),QLo=o("xlm"),HLo=o(" \u2014 "),SD=a("a"),ULo=o("XLMForTokenClassification"),JLo=o(" (XLM model)"),YLo=l(),I4=a("li"),fne=a("strong"),KLo=o("xlm-roberta"),ZLo=o(" \u2014 "),PD=a("a"),e8o=o("XLMRobertaForTokenClassification"),o8o=o(" (XLM-RoBERTa model)"),r8o=l(),D4=a("li"),mne=a("strong"),t8o=o("xlm-roberta-xl"),a8o=o(" \u2014 "),$D=a("a"),n8o=o("XLMRobertaXLForTokenClassification"),s8o=o(" (XLM-RoBERTa-XL model)"),l8o=l(),j4=a("li"),gne=a("strong"),i8o=o("xlnet"),d8o=o(" \u2014 "),ID=a("a"),c8o=o("XLNetForTokenClassification"),f8o=o(" (XLNet model)"),m8o=l(),N4=a("li"),hne=a("strong"),g8o=o("yoso"),h8o=o(" \u2014 "),DD=a("a"),u8o=o("YosoForTokenClassification"),p8o=o(" (YOSO model)"),_8o=l(),q4=a("p"),v8o=o("The model is set in evaluation mode by default using "),une=a("code"),b8o=o("model.eval()"),T8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=a("code"),F8o=o("model.train()"),C8o=l(),_ne=a("p"),M8o=o("Examples:"),E8o=l(),f(c5.$$.fragment),rBe=l(),ud=a("h2"),G4=a("a"),vne=a("span"),f(f5.$$.fragment),y8o=l(),bne=a("span"),w8o=o("AutoModelForQuestionAnswering"),tBe=l(),rr=a("div"),f(m5.$$.fragment),A8o=l(),pd=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=a("code"),B8o=o("from_pretrained()"),x8o=o("class method or the "),Fne=a("code"),k8o=o("from_config()"),R8o=o(`class
method.`),S8o=l(),g5=a("p"),P8o=o("This class cannot be instantiated directly using "),Cne=a("code"),$8o=o("__init__()"),I8o=o(" (throws an error)."),D8o=l(),Ur=a("div"),f(h5.$$.fragment),j8o=l(),Mne=a("p"),N8o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q8o=l(),_d=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),Ene=a("strong"),O8o=o("not"),X8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yne=a("code"),V8o=o("from_pretrained()"),z8o=o("to load the model weights."),W8o=l(),wne=a("p"),Q8o=o("Examples:"),H8o=l(),f(u5.$$.fragment),U8o=l(),Ge=a("div"),f(p5.$$.fragment),J8o=l(),Ane=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K8o=l(),Ha=a("p"),Z8o=o("The model class to instantiate is selected based on the "),Lne=a("code"),e9o=o("model_type"),o9o=o(` property of the config object (either
passed as an argument or loaded from `),Bne=a("code"),r9o=o("pretrained_model_name_or_path"),t9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=a("code"),a9o=o("pretrained_model_name_or_path"),n9o=o(":"),s9o=l(),R=a("ul"),O4=a("li"),kne=a("strong"),l9o=o("albert"),i9o=o(" \u2014 "),jD=a("a"),d9o=o("AlbertForQuestionAnswering"),c9o=o(" (ALBERT model)"),f9o=l(),X4=a("li"),Rne=a("strong"),m9o=o("bart"),g9o=o(" \u2014 "),ND=a("a"),h9o=o("BartForQuestionAnswering"),u9o=o(" (BART model)"),p9o=l(),V4=a("li"),Sne=a("strong"),_9o=o("bert"),v9o=o(" \u2014 "),qD=a("a"),b9o=o("BertForQuestionAnswering"),T9o=o(" (BERT model)"),F9o=l(),z4=a("li"),Pne=a("strong"),C9o=o("big_bird"),M9o=o(" \u2014 "),GD=a("a"),E9o=o("BigBirdForQuestionAnswering"),y9o=o(" (BigBird model)"),w9o=l(),W4=a("li"),$ne=a("strong"),A9o=o("bigbird_pegasus"),L9o=o(" \u2014 "),OD=a("a"),B9o=o("BigBirdPegasusForQuestionAnswering"),x9o=o(" (BigBirdPegasus model)"),k9o=l(),Q4=a("li"),Ine=a("strong"),R9o=o("camembert"),S9o=o(" \u2014 "),XD=a("a"),P9o=o("CamembertForQuestionAnswering"),$9o=o(" (CamemBERT model)"),I9o=l(),H4=a("li"),Dne=a("strong"),D9o=o("canine"),j9o=o(" \u2014 "),VD=a("a"),N9o=o("CanineForQuestionAnswering"),q9o=o(" (Canine model)"),G9o=l(),U4=a("li"),jne=a("strong"),O9o=o("convbert"),X9o=o(" \u2014 "),zD=a("a"),V9o=o("ConvBertForQuestionAnswering"),z9o=o(" (ConvBERT model)"),W9o=l(),J4=a("li"),Nne=a("strong"),Q9o=o("data2vec-text"),H9o=o(" \u2014 "),WD=a("a"),U9o=o("Data2VecTextForQuestionAnswering"),J9o=o(" (Data2VecText model)"),Y9o=l(),Y4=a("li"),qne=a("strong"),K9o=o("deberta"),Z9o=o(" \u2014 "),QD=a("a"),eBo=o("DebertaForQuestionAnswering"),oBo=o(" (DeBERTa model)"),rBo=l(),K4=a("li"),Gne=a("strong"),tBo=o("deberta-v2"),aBo=o(" \u2014 "),HD=a("a"),nBo=o("DebertaV2ForQuestionAnswering"),sBo=o(" (DeBERTa-v2 model)"),lBo=l(),Z4=a("li"),One=a("strong"),iBo=o("distilbert"),dBo=o(" \u2014 "),UD=a("a"),cBo=o("DistilBertForQuestionAnswering"),fBo=o(" (DistilBERT model)"),mBo=l(),eb=a("li"),Xne=a("strong"),gBo=o("electra"),hBo=o(" \u2014 "),JD=a("a"),uBo=o("ElectraForQuestionAnswering"),pBo=o(" (ELECTRA model)"),_Bo=l(),ob=a("li"),Vne=a("strong"),vBo=o("flaubert"),bBo=o(" \u2014 "),YD=a("a"),TBo=o("FlaubertForQuestionAnsweringSimple"),FBo=o(" (FlauBERT model)"),CBo=l(),rb=a("li"),zne=a("strong"),MBo=o("fnet"),EBo=o(" \u2014 "),KD=a("a"),yBo=o("FNetForQuestionAnswering"),wBo=o(" (FNet model)"),ABo=l(),tb=a("li"),Wne=a("strong"),LBo=o("funnel"),BBo=o(" \u2014 "),ZD=a("a"),xBo=o("FunnelForQuestionAnswering"),kBo=o(" (Funnel Transformer model)"),RBo=l(),ab=a("li"),Qne=a("strong"),SBo=o("gptj"),PBo=o(" \u2014 "),ej=a("a"),$Bo=o("GPTJForQuestionAnswering"),IBo=o(" (GPT-J model)"),DBo=l(),nb=a("li"),Hne=a("strong"),jBo=o("ibert"),NBo=o(" \u2014 "),oj=a("a"),qBo=o("IBertForQuestionAnswering"),GBo=o(" (I-BERT model)"),OBo=l(),sb=a("li"),Une=a("strong"),XBo=o("layoutlmv2"),VBo=o(" \u2014 "),rj=a("a"),zBo=o("LayoutLMv2ForQuestionAnswering"),WBo=o(" (LayoutLMv2 model)"),QBo=l(),lb=a("li"),Jne=a("strong"),HBo=o("led"),UBo=o(" \u2014 "),tj=a("a"),JBo=o("LEDForQuestionAnswering"),YBo=o(" (LED model)"),KBo=l(),ib=a("li"),Yne=a("strong"),ZBo=o("longformer"),exo=o(" \u2014 "),aj=a("a"),oxo=o("LongformerForQuestionAnswering"),rxo=o(" (Longformer model)"),txo=l(),db=a("li"),Kne=a("strong"),axo=o("lxmert"),nxo=o(" \u2014 "),nj=a("a"),sxo=o("LxmertForQuestionAnswering"),lxo=o(" (LXMERT model)"),ixo=l(),cb=a("li"),Zne=a("strong"),dxo=o("mbart"),cxo=o(" \u2014 "),sj=a("a"),fxo=o("MBartForQuestionAnswering"),mxo=o(" (mBART model)"),gxo=l(),fb=a("li"),ese=a("strong"),hxo=o("megatron-bert"),uxo=o(" \u2014 "),lj=a("a"),pxo=o("MegatronBertForQuestionAnswering"),_xo=o(" (MegatronBert model)"),vxo=l(),mb=a("li"),ose=a("strong"),bxo=o("mobilebert"),Txo=o(" \u2014 "),ij=a("a"),Fxo=o("MobileBertForQuestionAnswering"),Cxo=o(" (MobileBERT model)"),Mxo=l(),gb=a("li"),rse=a("strong"),Exo=o("mpnet"),yxo=o(" \u2014 "),dj=a("a"),wxo=o("MPNetForQuestionAnswering"),Axo=o(" (MPNet model)"),Lxo=l(),hb=a("li"),tse=a("strong"),Bxo=o("nystromformer"),xxo=o(" \u2014 "),cj=a("a"),kxo=o("NystromformerForQuestionAnswering"),Rxo=o(" (Nystromformer model)"),Sxo=l(),ub=a("li"),ase=a("strong"),Pxo=o("qdqbert"),$xo=o(" \u2014 "),fj=a("a"),Ixo=o("QDQBertForQuestionAnswering"),Dxo=o(" (QDQBert model)"),jxo=l(),pb=a("li"),nse=a("strong"),Nxo=o("reformer"),qxo=o(" \u2014 "),mj=a("a"),Gxo=o("ReformerForQuestionAnswering"),Oxo=o(" (Reformer model)"),Xxo=l(),_b=a("li"),sse=a("strong"),Vxo=o("rembert"),zxo=o(" \u2014 "),gj=a("a"),Wxo=o("RemBertForQuestionAnswering"),Qxo=o(" (RemBERT model)"),Hxo=l(),vb=a("li"),lse=a("strong"),Uxo=o("roberta"),Jxo=o(" \u2014 "),hj=a("a"),Yxo=o("RobertaForQuestionAnswering"),Kxo=o(" (RoBERTa model)"),Zxo=l(),bb=a("li"),ise=a("strong"),eko=o("roformer"),oko=o(" \u2014 "),uj=a("a"),rko=o("RoFormerForQuestionAnswering"),tko=o(" (RoFormer model)"),ako=l(),Tb=a("li"),dse=a("strong"),nko=o("splinter"),sko=o(" \u2014 "),pj=a("a"),lko=o("SplinterForQuestionAnswering"),iko=o(" (Splinter model)"),dko=l(),Fb=a("li"),cse=a("strong"),cko=o("squeezebert"),fko=o(" \u2014 "),_j=a("a"),mko=o("SqueezeBertForQuestionAnswering"),gko=o(" (SqueezeBERT model)"),hko=l(),Cb=a("li"),fse=a("strong"),uko=o("xlm"),pko=o(" \u2014 "),vj=a("a"),_ko=o("XLMForQuestionAnsweringSimple"),vko=o(" (XLM model)"),bko=l(),Mb=a("li"),mse=a("strong"),Tko=o("xlm-roberta"),Fko=o(" \u2014 "),bj=a("a"),Cko=o("XLMRobertaForQuestionAnswering"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),Eb=a("li"),gse=a("strong"),yko=o("xlm-roberta-xl"),wko=o(" \u2014 "),Tj=a("a"),Ako=o("XLMRobertaXLForQuestionAnswering"),Lko=o(" (XLM-RoBERTa-XL model)"),Bko=l(),yb=a("li"),hse=a("strong"),xko=o("xlnet"),kko=o(" \u2014 "),Fj=a("a"),Rko=o("XLNetForQuestionAnsweringSimple"),Sko=o(" (XLNet model)"),Pko=l(),wb=a("li"),use=a("strong"),$ko=o("yoso"),Iko=o(" \u2014 "),Cj=a("a"),Dko=o("YosoForQuestionAnswering"),jko=o(" (YOSO model)"),Nko=l(),Ab=a("p"),qko=o("The model is set in evaluation mode by default using "),pse=a("code"),Gko=o("model.eval()"),Oko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),Xko=o("model.train()"),Vko=l(),vse=a("p"),zko=o("Examples:"),Wko=l(),f(_5.$$.fragment),aBe=l(),vd=a("h2"),Lb=a("a"),bse=a("span"),f(v5.$$.fragment),Qko=l(),Tse=a("span"),Hko=o("AutoModelForTableQuestionAnswering"),nBe=l(),tr=a("div"),f(b5.$$.fragment),Uko=l(),bd=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fse=a("code"),Yko=o("from_pretrained()"),Kko=o("class method or the "),Cse=a("code"),Zko=o("from_config()"),eRo=o(`class
method.`),oRo=l(),T5=a("p"),rRo=o("This class cannot be instantiated directly using "),Mse=a("code"),tRo=o("__init__()"),aRo=o(" (throws an error)."),nRo=l(),Jr=a("div"),f(F5.$$.fragment),sRo=l(),Ese=a("p"),lRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRo=l(),Td=a("p"),dRo=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),cRo=o("not"),fRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("code"),mRo=o("from_pretrained()"),gRo=o("to load the model weights."),hRo=l(),Ase=a("p"),uRo=o("Examples:"),pRo=l(),f(C5.$$.fragment),_Ro=l(),Oe=a("div"),f(M5.$$.fragment),vRo=l(),Lse=a("p"),bRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TRo=l(),Ua=a("p"),FRo=o("The model class to instantiate is selected based on the "),Bse=a("code"),CRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),ERo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),LRo=l(),Rse=a("ul"),Bb=a("li"),Sse=a("strong"),BRo=o("tapas"),xRo=o(" \u2014 "),Mj=a("a"),kRo=o("TapasForQuestionAnswering"),RRo=o(" (TAPAS model)"),SRo=l(),xb=a("p"),PRo=o("The model is set in evaluation mode by default using "),Pse=a("code"),$Ro=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$se=a("code"),DRo=o("model.train()"),jRo=l(),Ise=a("p"),NRo=o("Examples:"),qRo=l(),f(E5.$$.fragment),sBe=l(),Fd=a("h2"),kb=a("a"),Dse=a("span"),f(y5.$$.fragment),GRo=l(),jse=a("span"),ORo=o("AutoModelForImageClassification"),lBe=l(),ar=a("div"),f(w5.$$.fragment),XRo=l(),Cd=a("p"),VRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nse=a("code"),zRo=o("from_pretrained()"),WRo=o("class method or the "),qse=a("code"),QRo=o("from_config()"),HRo=o(`class
method.`),URo=l(),A5=a("p"),JRo=o("This class cannot be instantiated directly using "),Gse=a("code"),YRo=o("__init__()"),KRo=o(" (throws an error)."),ZRo=l(),Yr=a("div"),f(L5.$$.fragment),eSo=l(),Ose=a("p"),oSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rSo=l(),Md=a("p"),tSo=o(`Note:
Loading a model from its configuration file does `),Xse=a("strong"),aSo=o("not"),nSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vse=a("code"),sSo=o("from_pretrained()"),lSo=o("to load the model weights."),iSo=l(),zse=a("p"),dSo=o("Examples:"),cSo=l(),f(B5.$$.fragment),fSo=l(),Xe=a("div"),f(x5.$$.fragment),mSo=l(),Wse=a("p"),gSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hSo=l(),Ja=a("p"),uSo=o("The model class to instantiate is selected based on the "),Qse=a("code"),pSo=o("model_type"),_So=o(` property of the config object (either
passed as an argument or loaded from `),Hse=a("code"),vSo=o("pretrained_model_name_or_path"),bSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=a("code"),TSo=o("pretrained_model_name_or_path"),FSo=o(":"),CSo=l(),ve=a("ul"),Rb=a("li"),Jse=a("strong"),MSo=o("beit"),ESo=o(" \u2014 "),Ej=a("a"),ySo=o("BeitForImageClassification"),wSo=o(" (BEiT model)"),ASo=l(),Sb=a("li"),Yse=a("strong"),LSo=o("convnext"),BSo=o(" \u2014 "),yj=a("a"),xSo=o("ConvNextForImageClassification"),kSo=o(" (ConvNext model)"),RSo=l(),Ps=a("li"),Kse=a("strong"),SSo=o("deit"),PSo=o(" \u2014 "),wj=a("a"),$So=o("DeiTForImageClassification"),ISo=o(" or "),Aj=a("a"),DSo=o("DeiTForImageClassificationWithTeacher"),jSo=o(" (DeiT model)"),NSo=l(),Pb=a("li"),Zse=a("strong"),qSo=o("imagegpt"),GSo=o(" \u2014 "),Lj=a("a"),OSo=o("ImageGPTForImageClassification"),XSo=o(" (ImageGPT model)"),VSo=l(),la=a("li"),ele=a("strong"),zSo=o("perceiver"),WSo=o(" \u2014 "),Bj=a("a"),QSo=o("PerceiverForImageClassificationLearned"),HSo=o(" or "),xj=a("a"),USo=o("PerceiverForImageClassificationFourier"),JSo=o(" or "),kj=a("a"),YSo=o("PerceiverForImageClassificationConvProcessing"),KSo=o(" (Perceiver model)"),ZSo=l(),$b=a("li"),ole=a("strong"),ePo=o("poolformer"),oPo=o(" \u2014 "),Rj=a("a"),rPo=o("PoolFormerForImageClassification"),tPo=o(" (PoolFormer model)"),aPo=l(),Ib=a("li"),rle=a("strong"),nPo=o("segformer"),sPo=o(" \u2014 "),Sj=a("a"),lPo=o("SegformerForImageClassification"),iPo=o(" (SegFormer model)"),dPo=l(),Db=a("li"),tle=a("strong"),cPo=o("swin"),fPo=o(" \u2014 "),Pj=a("a"),mPo=o("SwinForImageClassification"),gPo=o(" (Swin model)"),hPo=l(),jb=a("li"),ale=a("strong"),uPo=o("vit"),pPo=o(" \u2014 "),$j=a("a"),_Po=o("ViTForImageClassification"),vPo=o(" (ViT model)"),bPo=l(),Nb=a("p"),TPo=o("The model is set in evaluation mode by default using "),nle=a("code"),FPo=o("model.eval()"),CPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=a("code"),MPo=o("model.train()"),EPo=l(),lle=a("p"),yPo=o("Examples:"),wPo=l(),f(k5.$$.fragment),iBe=l(),Ed=a("h2"),qb=a("a"),ile=a("span"),f(R5.$$.fragment),APo=l(),dle=a("span"),LPo=o("AutoModelForVision2Seq"),dBe=l(),nr=a("div"),f(S5.$$.fragment),BPo=l(),yd=a("p"),xPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=a("code"),kPo=o("from_pretrained()"),RPo=o("class method or the "),fle=a("code"),SPo=o("from_config()"),PPo=o(`class
method.`),$Po=l(),P5=a("p"),IPo=o("This class cannot be instantiated directly using "),mle=a("code"),DPo=o("__init__()"),jPo=o(" (throws an error)."),NPo=l(),Kr=a("div"),f($5.$$.fragment),qPo=l(),gle=a("p"),GPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OPo=l(),wd=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),VPo=o("not"),zPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=a("code"),WPo=o("from_pretrained()"),QPo=o("to load the model weights."),HPo=l(),ple=a("p"),UPo=o("Examples:"),JPo=l(),f(I5.$$.fragment),YPo=l(),Ve=a("div"),f(D5.$$.fragment),KPo=l(),_le=a("p"),ZPo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e$o=l(),Ya=a("p"),o$o=o("The model class to instantiate is selected based on the "),vle=a("code"),r$o=o("model_type"),t$o=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),s$o=o("pretrained_model_name_or_path"),l$o=o(":"),i$o=l(),Fle=a("ul"),Gb=a("li"),Cle=a("strong"),d$o=o("vision-encoder-decoder"),c$o=o(" \u2014 "),Ij=a("a"),f$o=o("VisionEncoderDecoderModel"),m$o=o(" (Vision Encoder decoder model)"),g$o=l(),Ob=a("p"),h$o=o("The model is set in evaluation mode by default using "),Mle=a("code"),u$o=o("model.eval()"),p$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),_$o=o("model.train()"),v$o=l(),yle=a("p"),b$o=o("Examples:"),T$o=l(),f(j5.$$.fragment),cBe=l(),Ad=a("h2"),Xb=a("a"),wle=a("span"),f(N5.$$.fragment),F$o=l(),Ale=a("span"),C$o=o("AutoModelForAudioClassification"),fBe=l(),sr=a("div"),f(q5.$$.fragment),M$o=l(),Ld=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=a("code"),y$o=o("from_pretrained()"),w$o=o("class method or the "),Ble=a("code"),A$o=o("from_config()"),L$o=o(`class
method.`),B$o=l(),G5=a("p"),x$o=o("This class cannot be instantiated directly using "),xle=a("code"),k$o=o("__init__()"),R$o=o(" (throws an error)."),S$o=l(),Zr=a("div"),f(O5.$$.fragment),P$o=l(),kle=a("p"),$$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),I$o=l(),Bd=a("p"),D$o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),j$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("code"),q$o=o("from_pretrained()"),G$o=o("to load the model weights."),O$o=l(),Ple=a("p"),X$o=o("Examples:"),V$o=l(),f(X5.$$.fragment),z$o=l(),ze=a("div"),f(V5.$$.fragment),W$o=l(),$le=a("p"),Q$o=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),H$o=l(),Ka=a("p"),U$o=o("The model class to instantiate is selected based on the "),Ile=a("code"),J$o=o("model_type"),Y$o=o(` property of the config object (either
passed as an argument or loaded from `),Dle=a("code"),K$o=o("pretrained_model_name_or_path"),Z$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(":"),rIo=l(),Ae=a("ul"),Vb=a("li"),Nle=a("strong"),tIo=o("data2vec-audio"),aIo=o(" \u2014 "),Dj=a("a"),nIo=o("Data2VecAudioForSequenceClassification"),sIo=o(" (Data2VecAudio model)"),lIo=l(),zb=a("li"),qle=a("strong"),iIo=o("hubert"),dIo=o(" \u2014 "),jj=a("a"),cIo=o("HubertForSequenceClassification"),fIo=o(" (Hubert model)"),mIo=l(),Wb=a("li"),Gle=a("strong"),gIo=o("sew"),hIo=o(" \u2014 "),Nj=a("a"),uIo=o("SEWForSequenceClassification"),pIo=o(" (SEW model)"),_Io=l(),Qb=a("li"),Ole=a("strong"),vIo=o("sew-d"),bIo=o(" \u2014 "),qj=a("a"),TIo=o("SEWDForSequenceClassification"),FIo=o(" (SEW-D model)"),CIo=l(),Hb=a("li"),Xle=a("strong"),MIo=o("unispeech"),EIo=o(" \u2014 "),Gj=a("a"),yIo=o("UniSpeechForSequenceClassification"),wIo=o(" (UniSpeech model)"),AIo=l(),Ub=a("li"),Vle=a("strong"),LIo=o("unispeech-sat"),BIo=o(" \u2014 "),Oj=a("a"),xIo=o("UniSpeechSatForSequenceClassification"),kIo=o(" (UniSpeechSat model)"),RIo=l(),Jb=a("li"),zle=a("strong"),SIo=o("wav2vec2"),PIo=o(" \u2014 "),Xj=a("a"),$Io=o("Wav2Vec2ForSequenceClassification"),IIo=o(" (Wav2Vec2 model)"),DIo=l(),Yb=a("li"),Wle=a("strong"),jIo=o("wavlm"),NIo=o(" \u2014 "),Vj=a("a"),qIo=o("WavLMForSequenceClassification"),GIo=o(" (WavLM model)"),OIo=l(),Kb=a("p"),XIo=o("The model is set in evaluation mode by default using "),Qle=a("code"),VIo=o("model.eval()"),zIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),WIo=o("model.train()"),QIo=l(),Ule=a("p"),HIo=o("Examples:"),UIo=l(),f(z5.$$.fragment),mBe=l(),xd=a("h2"),Zb=a("a"),Jle=a("span"),f(W5.$$.fragment),JIo=l(),Yle=a("span"),YIo=o("AutoModelForAudioFrameClassification"),gBe=l(),lr=a("div"),f(Q5.$$.fragment),KIo=l(),kd=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),Zle=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),H5=a("p"),nDo=o("This class cannot be instantiated directly using "),eie=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),et=a("div"),f(U5.$$.fragment),dDo=l(),oie=a("p"),cDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fDo=l(),Rd=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=a("code"),uDo=o("from_pretrained()"),pDo=o("to load the model weights."),_Do=l(),aie=a("p"),vDo=o("Examples:"),bDo=l(),f(J5.$$.fragment),TDo=l(),We=a("div"),f(Y5.$$.fragment),FDo=l(),nie=a("p"),CDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MDo=l(),Za=a("p"),EDo=o("The model class to instantiate is selected based on the "),sie=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),en=a("ul"),e2=a("li"),die=a("strong"),RDo=o("data2vec-audio"),SDo=o(" \u2014 "),zj=a("a"),PDo=o("Data2VecAudioForAudioFrameClassification"),$Do=o(" (Data2VecAudio model)"),IDo=l(),o2=a("li"),cie=a("strong"),DDo=o("unispeech-sat"),jDo=o(" \u2014 "),Wj=a("a"),NDo=o("UniSpeechSatForAudioFrameClassification"),qDo=o(" (UniSpeechSat model)"),GDo=l(),r2=a("li"),fie=a("strong"),ODo=o("wav2vec2"),XDo=o(" \u2014 "),Qj=a("a"),VDo=o("Wav2Vec2ForAudioFrameClassification"),zDo=o(" (Wav2Vec2 model)"),WDo=l(),t2=a("li"),mie=a("strong"),QDo=o("wavlm"),HDo=o(" \u2014 "),Hj=a("a"),UDo=o("WavLMForAudioFrameClassification"),JDo=o(" (WavLM model)"),YDo=l(),a2=a("p"),KDo=o("The model is set in evaluation mode by default using "),gie=a("code"),ZDo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),ojo=o("model.train()"),rjo=l(),uie=a("p"),tjo=o("Examples:"),ajo=l(),f(K5.$$.fragment),hBe=l(),Sd=a("h2"),n2=a("a"),pie=a("span"),f(Z5.$$.fragment),njo=l(),_ie=a("span"),sjo=o("AutoModelForCTC"),uBe=l(),ir=a("div"),f(ey.$$.fragment),ljo=l(),Pd=a("p"),ijo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vie=a("code"),djo=o("from_pretrained()"),cjo=o("class method or the "),bie=a("code"),fjo=o("from_config()"),mjo=o(`class
method.`),gjo=l(),oy=a("p"),hjo=o("This class cannot be instantiated directly using "),Tie=a("code"),ujo=o("__init__()"),pjo=o(" (throws an error)."),_jo=l(),ot=a("div"),f(ry.$$.fragment),vjo=l(),Fie=a("p"),bjo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tjo=l(),$d=a("p"),Fjo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Cjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),Ejo=o("from_pretrained()"),yjo=o("to load the model weights."),wjo=l(),Eie=a("p"),Ajo=o("Examples:"),Ljo=l(),f(ty.$$.fragment),Bjo=l(),Qe=a("div"),f(ay.$$.fragment),xjo=l(),yie=a("p"),kjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rjo=l(),on=a("p"),Sjo=o("The model class to instantiate is selected based on the "),wie=a("code"),Pjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),Ijo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),jjo=o("pretrained_model_name_or_path"),Njo=o(":"),qjo=l(),Le=a("ul"),s2=a("li"),Bie=a("strong"),Gjo=o("data2vec-audio"),Ojo=o(" \u2014 "),Uj=a("a"),Xjo=o("Data2VecAudioForCTC"),Vjo=o(" (Data2VecAudio model)"),zjo=l(),l2=a("li"),xie=a("strong"),Wjo=o("hubert"),Qjo=o(" \u2014 "),Jj=a("a"),Hjo=o("HubertForCTC"),Ujo=o(" (Hubert model)"),Jjo=l(),i2=a("li"),kie=a("strong"),Yjo=o("sew"),Kjo=o(" \u2014 "),Yj=a("a"),Zjo=o("SEWForCTC"),eNo=o(" (SEW model)"),oNo=l(),d2=a("li"),Rie=a("strong"),rNo=o("sew-d"),tNo=o(" \u2014 "),Kj=a("a"),aNo=o("SEWDForCTC"),nNo=o(" (SEW-D model)"),sNo=l(),c2=a("li"),Sie=a("strong"),lNo=o("unispeech"),iNo=o(" \u2014 "),Zj=a("a"),dNo=o("UniSpeechForCTC"),cNo=o(" (UniSpeech model)"),fNo=l(),f2=a("li"),Pie=a("strong"),mNo=o("unispeech-sat"),gNo=o(" \u2014 "),eN=a("a"),hNo=o("UniSpeechSatForCTC"),uNo=o(" (UniSpeechSat model)"),pNo=l(),m2=a("li"),$ie=a("strong"),_No=o("wav2vec2"),vNo=o(" \u2014 "),oN=a("a"),bNo=o("Wav2Vec2ForCTC"),TNo=o(" (Wav2Vec2 model)"),FNo=l(),g2=a("li"),Iie=a("strong"),CNo=o("wavlm"),MNo=o(" \u2014 "),rN=a("a"),ENo=o("WavLMForCTC"),yNo=o(" (WavLM model)"),wNo=l(),h2=a("p"),ANo=o("The model is set in evaluation mode by default using "),Die=a("code"),LNo=o("model.eval()"),BNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),xNo=o("model.train()"),kNo=l(),Nie=a("p"),RNo=o("Examples:"),SNo=l(),f(ny.$$.fragment),pBe=l(),Id=a("h2"),u2=a("a"),qie=a("span"),f(sy.$$.fragment),PNo=l(),Gie=a("span"),$No=o("AutoModelForSpeechSeq2Seq"),_Be=l(),dr=a("div"),f(ly.$$.fragment),INo=l(),Dd=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=a("code"),jNo=o("from_pretrained()"),NNo=o("class method or the "),Xie=a("code"),qNo=o("from_config()"),GNo=o(`class
method.`),ONo=l(),iy=a("p"),XNo=o("This class cannot be instantiated directly using "),Vie=a("code"),VNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),rt=a("div"),f(dy.$$.fragment),QNo=l(),zie=a("p"),HNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UNo=l(),jd=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=a("code"),ZNo=o("from_pretrained()"),eqo=o("to load the model weights."),oqo=l(),Hie=a("p"),rqo=o("Examples:"),tqo=l(),f(cy.$$.fragment),aqo=l(),He=a("div"),f(fy.$$.fragment),nqo=l(),Uie=a("p"),sqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lqo=l(),rn=a("p"),iqo=o("The model class to instantiate is selected based on the "),Jie=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),uqo=l(),my=a("ul"),p2=a("li"),Zie=a("strong"),pqo=o("speech-encoder-decoder"),_qo=o(" \u2014 "),tN=a("a"),vqo=o("SpeechEncoderDecoderModel"),bqo=o(" (Speech Encoder decoder model)"),Tqo=l(),_2=a("li"),ede=a("strong"),Fqo=o("speech_to_text"),Cqo=o(" \u2014 "),aN=a("a"),Mqo=o("Speech2TextForConditionalGeneration"),Eqo=o(" (Speech2Text model)"),yqo=l(),v2=a("p"),wqo=o("The model is set in evaluation mode by default using "),ode=a("code"),Aqo=o("model.eval()"),Lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),Bqo=o("model.train()"),xqo=l(),tde=a("p"),kqo=o("Examples:"),Rqo=l(),f(gy.$$.fragment),vBe=l(),Nd=a("h2"),b2=a("a"),ade=a("span"),f(hy.$$.fragment),Sqo=l(),nde=a("span"),Pqo=o("AutoModelForAudioXVector"),bBe=l(),cr=a("div"),f(uy.$$.fragment),$qo=l(),qd=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sde=a("code"),Dqo=o("from_pretrained()"),jqo=o("class method or the "),lde=a("code"),Nqo=o("from_config()"),qqo=o(`class
method.`),Gqo=l(),py=a("p"),Oqo=o("This class cannot be instantiated directly using "),ide=a("code"),Xqo=o("__init__()"),Vqo=o(" (throws an error)."),zqo=l(),tt=a("div"),f(_y.$$.fragment),Wqo=l(),dde=a("p"),Qqo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hqo=l(),Gd=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=a("code"),Kqo=o("from_pretrained()"),Zqo=o("to load the model weights."),eGo=l(),mde=a("p"),oGo=o("Examples:"),rGo=l(),f(vy.$$.fragment),tGo=l(),Ue=a("div"),f(by.$$.fragment),aGo=l(),gde=a("p"),nGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sGo=l(),tn=a("p"),lGo=o("The model class to instantiate is selected based on the "),hde=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),an=a("ul"),T2=a("li"),_de=a("strong"),uGo=o("data2vec-audio"),pGo=o(" \u2014 "),nN=a("a"),_Go=o("Data2VecAudioForXVector"),vGo=o(" (Data2VecAudio model)"),bGo=l(),F2=a("li"),vde=a("strong"),TGo=o("unispeech-sat"),FGo=o(" \u2014 "),sN=a("a"),CGo=o("UniSpeechSatForXVector"),MGo=o(" (UniSpeechSat model)"),EGo=l(),C2=a("li"),bde=a("strong"),yGo=o("wav2vec2"),wGo=o(" \u2014 "),lN=a("a"),AGo=o("Wav2Vec2ForXVector"),LGo=o(" (Wav2Vec2 model)"),BGo=l(),M2=a("li"),Tde=a("strong"),xGo=o("wavlm"),kGo=o(" \u2014 "),iN=a("a"),RGo=o("WavLMForXVector"),SGo=o(" (WavLM model)"),PGo=l(),E2=a("p"),$Go=o("The model is set in evaluation mode by default using "),Fde=a("code"),IGo=o("model.eval()"),DGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),jGo=o("model.train()"),NGo=l(),Mde=a("p"),qGo=o("Examples:"),GGo=l(),f(Ty.$$.fragment),TBe=l(),Od=a("h2"),y2=a("a"),Ede=a("span"),f(Fy.$$.fragment),OGo=l(),yde=a("span"),XGo=o("AutoModelForMaskedImageModeling"),FBe=l(),fr=a("div"),f(Cy.$$.fragment),VGo=l(),Xd=a("p"),zGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=a("code"),WGo=o("from_pretrained()"),QGo=o("class method or the "),Ade=a("code"),HGo=o("from_config()"),UGo=o(`class
method.`),JGo=l(),My=a("p"),YGo=o("This class cannot be instantiated directly using "),Lde=a("code"),KGo=o("__init__()"),ZGo=o(" (throws an error)."),eOo=l(),at=a("div"),f(Ey.$$.fragment),oOo=l(),Bde=a("p"),rOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tOo=l(),Vd=a("p"),aOo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),nOo=o("not"),sOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),lOo=o("from_pretrained()"),iOo=o("to load the model weights."),dOo=l(),Rde=a("p"),cOo=o("Examples:"),fOo=l(),f(yy.$$.fragment),mOo=l(),Je=a("div"),f(wy.$$.fragment),gOo=l(),Sde=a("p"),hOo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uOo=l(),nn=a("p"),pOo=o("The model class to instantiate is selected based on the "),Pde=a("code"),_Oo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),bOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),FOo=o("pretrained_model_name_or_path"),COo=o(":"),MOo=l(),zd=a("ul"),w2=a("li"),Dde=a("strong"),EOo=o("deit"),yOo=o(" \u2014 "),dN=a("a"),wOo=o("DeiTForMaskedImageModeling"),AOo=o(" (DeiT model)"),LOo=l(),A2=a("li"),jde=a("strong"),BOo=o("swin"),xOo=o(" \u2014 "),cN=a("a"),kOo=o("SwinForMaskedImageModeling"),ROo=o(" (Swin model)"),SOo=l(),L2=a("li"),Nde=a("strong"),POo=o("vit"),$Oo=o(" \u2014 "),fN=a("a"),IOo=o("ViTForMaskedImageModeling"),DOo=o(" (ViT model)"),jOo=l(),B2=a("p"),NOo=o("The model is set in evaluation mode by default using "),qde=a("code"),qOo=o("model.eval()"),GOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=a("code"),OOo=o("model.train()"),XOo=l(),Ode=a("p"),VOo=o("Examples:"),zOo=l(),f(Ay.$$.fragment),CBe=l(),Wd=a("h2"),x2=a("a"),Xde=a("span"),f(Ly.$$.fragment),WOo=l(),Vde=a("span"),QOo=o("AutoModelForObjectDetection"),MBe=l(),mr=a("div"),f(By.$$.fragment),HOo=l(),Qd=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=a("code"),JOo=o("from_pretrained()"),YOo=o("class method or the "),Wde=a("code"),KOo=o("from_config()"),ZOo=o(`class
method.`),eXo=l(),xy=a("p"),oXo=o("This class cannot be instantiated directly using "),Qde=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),nt=a("div"),f(ky.$$.fragment),nXo=l(),Hde=a("p"),sXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lXo=l(),Hd=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=a("code"),fXo=o("from_pretrained()"),mXo=o("to load the model weights."),gXo=l(),Yde=a("p"),hXo=o("Examples:"),uXo=l(),f(Ry.$$.fragment),pXo=l(),Ye=a("div"),f(Sy.$$.fragment),_Xo=l(),Kde=a("p"),vXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bXo=l(),sn=a("p"),TXo=o("The model class to instantiate is selected based on the "),Zde=a("code"),FXo=o("model_type"),CXo=o(` property of the config object (either
passed as an argument or loaded from `),ece=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=a("code"),yXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),rce=a("ul"),k2=a("li"),tce=a("strong"),LXo=o("detr"),BXo=o(" \u2014 "),mN=a("a"),xXo=o("DetrForObjectDetection"),kXo=o(" (DETR model)"),RXo=l(),R2=a("p"),SXo=o("The model is set in evaluation mode by default using "),ace=a("code"),PXo=o("model.eval()"),$Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),IXo=o("model.train()"),DXo=l(),sce=a("p"),jXo=o("Examples:"),NXo=l(),f(Py.$$.fragment),EBe=l(),Ud=a("h2"),S2=a("a"),lce=a("span"),f($y.$$.fragment),qXo=l(),ice=a("span"),GXo=o("AutoModelForImageSegmentation"),yBe=l(),gr=a("div"),f(Iy.$$.fragment),OXo=l(),Jd=a("p"),XXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=a("code"),VXo=o("from_pretrained()"),zXo=o("class method or the "),cce=a("code"),WXo=o("from_config()"),QXo=o(`class
method.`),HXo=l(),Dy=a("p"),UXo=o("This class cannot be instantiated directly using "),fce=a("code"),JXo=o("__init__()"),YXo=o(" (throws an error)."),KXo=l(),st=a("div"),f(jy.$$.fragment),ZXo=l(),mce=a("p"),eVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),oVo=l(),Yd=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=a("code"),nVo=o("from_pretrained()"),sVo=o("to load the model weights."),lVo=l(),uce=a("p"),iVo=o("Examples:"),dVo=l(),f(Ny.$$.fragment),cVo=l(),Ke=a("div"),f(qy.$$.fragment),fVo=l(),pce=a("p"),mVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gVo=l(),ln=a("p"),hVo=o("The model class to instantiate is selected based on the "),_ce=a("code"),uVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),_Vo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),bVo=o("pretrained_model_name_or_path"),TVo=o(":"),FVo=l(),Tce=a("ul"),P2=a("li"),Fce=a("strong"),CVo=o("detr"),MVo=o(" \u2014 "),gN=a("a"),EVo=o("DetrForSegmentation"),yVo=o(" (DETR model)"),wVo=l(),$2=a("p"),AVo=o("The model is set in evaluation mode by default using "),Cce=a("code"),LVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),xVo=o("model.train()"),kVo=l(),Ece=a("p"),RVo=o("Examples:"),SVo=l(),f(Gy.$$.fragment),wBe=l(),Kd=a("h2"),I2=a("a"),yce=a("span"),f(Oy.$$.fragment),PVo=l(),wce=a("span"),$Vo=o("AutoModelForSemanticSegmentation"),ABe=l(),hr=a("div"),f(Xy.$$.fragment),IVo=l(),Zd=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=a("code"),jVo=o("from_pretrained()"),NVo=o("class method or the "),Lce=a("code"),qVo=o("from_config()"),GVo=o(`class
method.`),OVo=l(),Vy=a("p"),XVo=o("This class cannot be instantiated directly using "),Bce=a("code"),VVo=o("__init__()"),zVo=o(" (throws an error)."),WVo=l(),lt=a("div"),f(zy.$$.fragment),QVo=l(),xce=a("p"),HVo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),UVo=l(),ec=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=a("code"),ZVo=o("from_pretrained()"),ezo=o("to load the model weights."),ozo=l(),Sce=a("p"),rzo=o("Examples:"),tzo=l(),f(Wy.$$.fragment),azo=l(),Ze=a("div"),f(Qy.$$.fragment),nzo=l(),Pce=a("p"),szo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lzo=l(),dn=a("p"),izo=o("The model class to instantiate is selected based on the "),$ce=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),uzo=l(),Hy=a("ul"),D2=a("li"),jce=a("strong"),pzo=o("beit"),_zo=o(" \u2014 "),hN=a("a"),vzo=o("BeitForSemanticSegmentation"),bzo=o(" (BEiT model)"),Tzo=l(),j2=a("li"),Nce=a("strong"),Fzo=o("segformer"),Czo=o(" \u2014 "),uN=a("a"),Mzo=o("SegformerForSemanticSegmentation"),Ezo=o(" (SegFormer model)"),yzo=l(),N2=a("p"),wzo=o("The model is set in evaluation mode by default using "),qce=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),Bzo=o("model.train()"),xzo=l(),Oce=a("p"),kzo=o("Examples:"),Rzo=l(),f(Uy.$$.fragment),LBe=l(),oc=a("h2"),q2=a("a"),Xce=a("span"),f(Jy.$$.fragment),Szo=l(),Vce=a("span"),Pzo=o("TFAutoModel"),BBe=l(),ur=a("div"),f(Yy.$$.fragment),$zo=l(),rc=a("p"),Izo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=a("code"),Dzo=o("from_pretrained()"),jzo=o("class method or the "),Wce=a("code"),Nzo=o("from_config()"),qzo=o(`class
method.`),Gzo=l(),Ky=a("p"),Ozo=o("This class cannot be instantiated directly using "),Qce=a("code"),Xzo=o("__init__()"),Vzo=o(" (throws an error)."),zzo=l(),it=a("div"),f(Zy.$$.fragment),Wzo=l(),Hce=a("p"),Qzo=o("Instantiates one of the base model classes of the library from a configuration."),Hzo=l(),tc=a("p"),Uzo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),Jzo=o("not"),Yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=a("code"),Kzo=o("from_pretrained()"),Zzo=o("to load the model weights."),eWo=l(),Yce=a("p"),oWo=o("Examples:"),rWo=l(),f(ew.$$.fragment),tWo=l(),go=a("div"),f(ow.$$.fragment),aWo=l(),Kce=a("p"),nWo=o("Instantiate one of the base model classes of the library from a pretrained model."),sWo=l(),cn=a("p"),lWo=o("The model class to instantiate is selected based on the "),Zce=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),B=a("ul"),G2=a("li"),rfe=a("strong"),uWo=o("albert"),pWo=o(" \u2014 "),pN=a("a"),_Wo=o("TFAlbertModel"),vWo=o(" (ALBERT model)"),bWo=l(),O2=a("li"),tfe=a("strong"),TWo=o("bart"),FWo=o(" \u2014 "),_N=a("a"),CWo=o("TFBartModel"),MWo=o(" (BART model)"),EWo=l(),X2=a("li"),afe=a("strong"),yWo=o("bert"),wWo=o(" \u2014 "),vN=a("a"),AWo=o("TFBertModel"),LWo=o(" (BERT model)"),BWo=l(),V2=a("li"),nfe=a("strong"),xWo=o("blenderbot"),kWo=o(" \u2014 "),bN=a("a"),RWo=o("TFBlenderbotModel"),SWo=o(" (Blenderbot model)"),PWo=l(),z2=a("li"),sfe=a("strong"),$Wo=o("blenderbot-small"),IWo=o(" \u2014 "),TN=a("a"),DWo=o("TFBlenderbotSmallModel"),jWo=o(" (BlenderbotSmall model)"),NWo=l(),W2=a("li"),lfe=a("strong"),qWo=o("camembert"),GWo=o(" \u2014 "),FN=a("a"),OWo=o("TFCamembertModel"),XWo=o(" (CamemBERT model)"),VWo=l(),Q2=a("li"),ife=a("strong"),zWo=o("clip"),WWo=o(" \u2014 "),CN=a("a"),QWo=o("TFCLIPModel"),HWo=o(" (CLIP model)"),UWo=l(),H2=a("li"),dfe=a("strong"),JWo=o("convbert"),YWo=o(" \u2014 "),MN=a("a"),KWo=o("TFConvBertModel"),ZWo=o(" (ConvBERT model)"),eQo=l(),U2=a("li"),cfe=a("strong"),oQo=o("convnext"),rQo=o(" \u2014 "),EN=a("a"),tQo=o("TFConvNextModel"),aQo=o(" (ConvNext model)"),nQo=l(),J2=a("li"),ffe=a("strong"),sQo=o("ctrl"),lQo=o(" \u2014 "),yN=a("a"),iQo=o("TFCTRLModel"),dQo=o(" (CTRL model)"),cQo=l(),Y2=a("li"),mfe=a("strong"),fQo=o("deberta"),mQo=o(" \u2014 "),wN=a("a"),gQo=o("TFDebertaModel"),hQo=o(" (DeBERTa model)"),uQo=l(),K2=a("li"),gfe=a("strong"),pQo=o("deberta-v2"),_Qo=o(" \u2014 "),AN=a("a"),vQo=o("TFDebertaV2Model"),bQo=o(" (DeBERTa-v2 model)"),TQo=l(),Z2=a("li"),hfe=a("strong"),FQo=o("distilbert"),CQo=o(" \u2014 "),LN=a("a"),MQo=o("TFDistilBertModel"),EQo=o(" (DistilBERT model)"),yQo=l(),e0=a("li"),ufe=a("strong"),wQo=o("dpr"),AQo=o(" \u2014 "),BN=a("a"),LQo=o("TFDPRQuestionEncoder"),BQo=o(" (DPR model)"),xQo=l(),o0=a("li"),pfe=a("strong"),kQo=o("electra"),RQo=o(" \u2014 "),xN=a("a"),SQo=o("TFElectraModel"),PQo=o(" (ELECTRA model)"),$Qo=l(),r0=a("li"),_fe=a("strong"),IQo=o("flaubert"),DQo=o(" \u2014 "),kN=a("a"),jQo=o("TFFlaubertModel"),NQo=o(" (FlauBERT model)"),qQo=l(),$s=a("li"),vfe=a("strong"),GQo=o("funnel"),OQo=o(" \u2014 "),RN=a("a"),XQo=o("TFFunnelModel"),VQo=o(" or "),SN=a("a"),zQo=o("TFFunnelBaseModel"),WQo=o(" (Funnel Transformer model)"),QQo=l(),t0=a("li"),bfe=a("strong"),HQo=o("gpt2"),UQo=o(" \u2014 "),PN=a("a"),JQo=o("TFGPT2Model"),YQo=o(" (OpenAI GPT-2 model)"),KQo=l(),a0=a("li"),Tfe=a("strong"),ZQo=o("hubert"),eHo=o(" \u2014 "),$N=a("a"),oHo=o("TFHubertModel"),rHo=o(" (Hubert model)"),tHo=l(),n0=a("li"),Ffe=a("strong"),aHo=o("layoutlm"),nHo=o(" \u2014 "),IN=a("a"),sHo=o("TFLayoutLMModel"),lHo=o(" (LayoutLM model)"),iHo=l(),s0=a("li"),Cfe=a("strong"),dHo=o("led"),cHo=o(" \u2014 "),DN=a("a"),fHo=o("TFLEDModel"),mHo=o(" (LED model)"),gHo=l(),l0=a("li"),Mfe=a("strong"),hHo=o("longformer"),uHo=o(" \u2014 "),jN=a("a"),pHo=o("TFLongformerModel"),_Ho=o(" (Longformer model)"),vHo=l(),i0=a("li"),Efe=a("strong"),bHo=o("lxmert"),THo=o(" \u2014 "),NN=a("a"),FHo=o("TFLxmertModel"),CHo=o(" (LXMERT model)"),MHo=l(),d0=a("li"),yfe=a("strong"),EHo=o("marian"),yHo=o(" \u2014 "),qN=a("a"),wHo=o("TFMarianModel"),AHo=o(" (Marian model)"),LHo=l(),c0=a("li"),wfe=a("strong"),BHo=o("mbart"),xHo=o(" \u2014 "),GN=a("a"),kHo=o("TFMBartModel"),RHo=o(" (mBART model)"),SHo=l(),f0=a("li"),Afe=a("strong"),PHo=o("mobilebert"),$Ho=o(" \u2014 "),ON=a("a"),IHo=o("TFMobileBertModel"),DHo=o(" (MobileBERT model)"),jHo=l(),m0=a("li"),Lfe=a("strong"),NHo=o("mpnet"),qHo=o(" \u2014 "),XN=a("a"),GHo=o("TFMPNetModel"),OHo=o(" (MPNet model)"),XHo=l(),g0=a("li"),Bfe=a("strong"),VHo=o("mt5"),zHo=o(" \u2014 "),VN=a("a"),WHo=o("TFMT5Model"),QHo=o(" (mT5 model)"),HHo=l(),h0=a("li"),xfe=a("strong"),UHo=o("openai-gpt"),JHo=o(" \u2014 "),zN=a("a"),YHo=o("TFOpenAIGPTModel"),KHo=o(" (OpenAI GPT model)"),ZHo=l(),u0=a("li"),kfe=a("strong"),eUo=o("pegasus"),oUo=o(" \u2014 "),WN=a("a"),rUo=o("TFPegasusModel"),tUo=o(" (Pegasus model)"),aUo=l(),p0=a("li"),Rfe=a("strong"),nUo=o("rembert"),sUo=o(" \u2014 "),QN=a("a"),lUo=o("TFRemBertModel"),iUo=o(" (RemBERT model)"),dUo=l(),_0=a("li"),Sfe=a("strong"),cUo=o("roberta"),fUo=o(" \u2014 "),HN=a("a"),mUo=o("TFRobertaModel"),gUo=o(" (RoBERTa model)"),hUo=l(),v0=a("li"),Pfe=a("strong"),uUo=o("roformer"),pUo=o(" \u2014 "),UN=a("a"),_Uo=o("TFRoFormerModel"),vUo=o(" (RoFormer model)"),bUo=l(),b0=a("li"),$fe=a("strong"),TUo=o("speech_to_text"),FUo=o(" \u2014 "),JN=a("a"),CUo=o("TFSpeech2TextModel"),MUo=o(" (Speech2Text model)"),EUo=l(),T0=a("li"),Ife=a("strong"),yUo=o("t5"),wUo=o(" \u2014 "),YN=a("a"),AUo=o("TFT5Model"),LUo=o(" (T5 model)"),BUo=l(),F0=a("li"),Dfe=a("strong"),xUo=o("tapas"),kUo=o(" \u2014 "),KN=a("a"),RUo=o("TFTapasModel"),SUo=o(" (TAPAS model)"),PUo=l(),C0=a("li"),jfe=a("strong"),$Uo=o("transfo-xl"),IUo=o(" \u2014 "),ZN=a("a"),DUo=o("TFTransfoXLModel"),jUo=o(" (Transformer-XL model)"),NUo=l(),M0=a("li"),Nfe=a("strong"),qUo=o("vit"),GUo=o(" \u2014 "),eq=a("a"),OUo=o("TFViTModel"),XUo=o(" (ViT model)"),VUo=l(),E0=a("li"),qfe=a("strong"),zUo=o("wav2vec2"),WUo=o(" \u2014 "),oq=a("a"),QUo=o("TFWav2Vec2Model"),HUo=o(" (Wav2Vec2 model)"),UUo=l(),y0=a("li"),Gfe=a("strong"),JUo=o("xlm"),YUo=o(" \u2014 "),rq=a("a"),KUo=o("TFXLMModel"),ZUo=o(" (XLM model)"),eJo=l(),w0=a("li"),Ofe=a("strong"),oJo=o("xlm-roberta"),rJo=o(" \u2014 "),tq=a("a"),tJo=o("TFXLMRobertaModel"),aJo=o(" (XLM-RoBERTa model)"),nJo=l(),A0=a("li"),Xfe=a("strong"),sJo=o("xlnet"),lJo=o(" \u2014 "),aq=a("a"),iJo=o("TFXLNetModel"),dJo=o(" (XLNet model)"),cJo=l(),Vfe=a("p"),fJo=o("Examples:"),mJo=l(),f(rw.$$.fragment),xBe=l(),ac=a("h2"),L0=a("a"),zfe=a("span"),f(tw.$$.fragment),gJo=l(),Wfe=a("span"),hJo=o("TFAutoModelForPreTraining"),kBe=l(),pr=a("div"),f(aw.$$.fragment),uJo=l(),nc=a("p"),pJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qfe=a("code"),_Jo=o("from_pretrained()"),vJo=o("class method or the "),Hfe=a("code"),bJo=o("from_config()"),TJo=o(`class
method.`),FJo=l(),nw=a("p"),CJo=o("This class cannot be instantiated directly using "),Ufe=a("code"),MJo=o("__init__()"),EJo=o(" (throws an error)."),yJo=l(),dt=a("div"),f(sw.$$.fragment),wJo=l(),Jfe=a("p"),AJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LJo=l(),sc=a("p"),BJo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),xJo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=a("code"),RJo=o("from_pretrained()"),SJo=o("to load the model weights."),PJo=l(),Zfe=a("p"),$Jo=o("Examples:"),IJo=l(),f(lw.$$.fragment),DJo=l(),ho=a("div"),f(iw.$$.fragment),jJo=l(),eme=a("p"),NJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qJo=l(),fn=a("p"),GJo=o("The model class to instantiate is selected based on the "),ome=a("code"),OJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),VJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(":"),HJo=l(),H=a("ul"),B0=a("li"),ame=a("strong"),UJo=o("albert"),JJo=o(" \u2014 "),nq=a("a"),YJo=o("TFAlbertForPreTraining"),KJo=o(" (ALBERT model)"),ZJo=l(),x0=a("li"),nme=a("strong"),eYo=o("bart"),oYo=o(" \u2014 "),sq=a("a"),rYo=o("TFBartForConditionalGeneration"),tYo=o(" (BART model)"),aYo=l(),k0=a("li"),sme=a("strong"),nYo=o("bert"),sYo=o(" \u2014 "),lq=a("a"),lYo=o("TFBertForPreTraining"),iYo=o(" (BERT model)"),dYo=l(),R0=a("li"),lme=a("strong"),cYo=o("camembert"),fYo=o(" \u2014 "),iq=a("a"),mYo=o("TFCamembertForMaskedLM"),gYo=o(" (CamemBERT model)"),hYo=l(),S0=a("li"),ime=a("strong"),uYo=o("ctrl"),pYo=o(" \u2014 "),dq=a("a"),_Yo=o("TFCTRLLMHeadModel"),vYo=o(" (CTRL model)"),bYo=l(),P0=a("li"),dme=a("strong"),TYo=o("distilbert"),FYo=o(" \u2014 "),cq=a("a"),CYo=o("TFDistilBertForMaskedLM"),MYo=o(" (DistilBERT model)"),EYo=l(),$0=a("li"),cme=a("strong"),yYo=o("electra"),wYo=o(" \u2014 "),fq=a("a"),AYo=o("TFElectraForPreTraining"),LYo=o(" (ELECTRA model)"),BYo=l(),I0=a("li"),fme=a("strong"),xYo=o("flaubert"),kYo=o(" \u2014 "),mq=a("a"),RYo=o("TFFlaubertWithLMHeadModel"),SYo=o(" (FlauBERT model)"),PYo=l(),D0=a("li"),mme=a("strong"),$Yo=o("funnel"),IYo=o(" \u2014 "),gq=a("a"),DYo=o("TFFunnelForPreTraining"),jYo=o(" (Funnel Transformer model)"),NYo=l(),j0=a("li"),gme=a("strong"),qYo=o("gpt2"),GYo=o(" \u2014 "),hq=a("a"),OYo=o("TFGPT2LMHeadModel"),XYo=o(" (OpenAI GPT-2 model)"),VYo=l(),N0=a("li"),hme=a("strong"),zYo=o("layoutlm"),WYo=o(" \u2014 "),uq=a("a"),QYo=o("TFLayoutLMForMaskedLM"),HYo=o(" (LayoutLM model)"),UYo=l(),q0=a("li"),ume=a("strong"),JYo=o("lxmert"),YYo=o(" \u2014 "),pq=a("a"),KYo=o("TFLxmertForPreTraining"),ZYo=o(" (LXMERT model)"),eKo=l(),G0=a("li"),pme=a("strong"),oKo=o("mobilebert"),rKo=o(" \u2014 "),_q=a("a"),tKo=o("TFMobileBertForPreTraining"),aKo=o(" (MobileBERT model)"),nKo=l(),O0=a("li"),_me=a("strong"),sKo=o("mpnet"),lKo=o(" \u2014 "),vq=a("a"),iKo=o("TFMPNetForMaskedLM"),dKo=o(" (MPNet model)"),cKo=l(),X0=a("li"),vme=a("strong"),fKo=o("openai-gpt"),mKo=o(" \u2014 "),bq=a("a"),gKo=o("TFOpenAIGPTLMHeadModel"),hKo=o(" (OpenAI GPT model)"),uKo=l(),V0=a("li"),bme=a("strong"),pKo=o("roberta"),_Ko=o(" \u2014 "),Tq=a("a"),vKo=o("TFRobertaForMaskedLM"),bKo=o(" (RoBERTa model)"),TKo=l(),z0=a("li"),Tme=a("strong"),FKo=o("t5"),CKo=o(" \u2014 "),Fq=a("a"),MKo=o("TFT5ForConditionalGeneration"),EKo=o(" (T5 model)"),yKo=l(),W0=a("li"),Fme=a("strong"),wKo=o("tapas"),AKo=o(" \u2014 "),Cq=a("a"),LKo=o("TFTapasForMaskedLM"),BKo=o(" (TAPAS model)"),xKo=l(),Q0=a("li"),Cme=a("strong"),kKo=o("transfo-xl"),RKo=o(" \u2014 "),Mq=a("a"),SKo=o("TFTransfoXLLMHeadModel"),PKo=o(" (Transformer-XL model)"),$Ko=l(),H0=a("li"),Mme=a("strong"),IKo=o("xlm"),DKo=o(" \u2014 "),Eq=a("a"),jKo=o("TFXLMWithLMHeadModel"),NKo=o(" (XLM model)"),qKo=l(),U0=a("li"),Eme=a("strong"),GKo=o("xlm-roberta"),OKo=o(" \u2014 "),yq=a("a"),XKo=o("TFXLMRobertaForMaskedLM"),VKo=o(" (XLM-RoBERTa model)"),zKo=l(),J0=a("li"),yme=a("strong"),WKo=o("xlnet"),QKo=o(" \u2014 "),wq=a("a"),HKo=o("TFXLNetLMHeadModel"),UKo=o(" (XLNet model)"),JKo=l(),wme=a("p"),YKo=o("Examples:"),KKo=l(),f(dw.$$.fragment),RBe=l(),lc=a("h2"),Y0=a("a"),Ame=a("span"),f(cw.$$.fragment),ZKo=l(),Lme=a("span"),eZo=o("TFAutoModelForCausalLM"),SBe=l(),_r=a("div"),f(fw.$$.fragment),oZo=l(),ic=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bme=a("code"),tZo=o("from_pretrained()"),aZo=o("class method or the "),xme=a("code"),nZo=o("from_config()"),sZo=o(`class
method.`),lZo=l(),mw=a("p"),iZo=o("This class cannot be instantiated directly using "),kme=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),ct=a("div"),f(gw.$$.fragment),mZo=l(),Rme=a("p"),gZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hZo=l(),dc=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),pZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=a("code"),vZo=o("from_pretrained()"),bZo=o("to load the model weights."),TZo=l(),$me=a("p"),FZo=o("Examples:"),CZo=l(),f(hw.$$.fragment),MZo=l(),uo=a("div"),f(uw.$$.fragment),EZo=l(),Ime=a("p"),yZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wZo=l(),mn=a("p"),AZo=o("The model class to instantiate is selected based on the "),Dme=a("code"),LZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),xZo=o("pretrained_model_name_or_path"),kZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),RZo=o("pretrained_model_name_or_path"),SZo=o(":"),PZo=l(),he=a("ul"),K0=a("li"),qme=a("strong"),$Zo=o("bert"),IZo=o(" \u2014 "),Aq=a("a"),DZo=o("TFBertLMHeadModel"),jZo=o(" (BERT model)"),NZo=l(),Z0=a("li"),Gme=a("strong"),qZo=o("ctrl"),GZo=o(" \u2014 "),Lq=a("a"),OZo=o("TFCTRLLMHeadModel"),XZo=o(" (CTRL model)"),VZo=l(),eT=a("li"),Ome=a("strong"),zZo=o("gpt2"),WZo=o(" \u2014 "),Bq=a("a"),QZo=o("TFGPT2LMHeadModel"),HZo=o(" (OpenAI GPT-2 model)"),UZo=l(),oT=a("li"),Xme=a("strong"),JZo=o("openai-gpt"),YZo=o(" \u2014 "),xq=a("a"),KZo=o("TFOpenAIGPTLMHeadModel"),ZZo=o(" (OpenAI GPT model)"),eer=l(),rT=a("li"),Vme=a("strong"),oer=o("rembert"),rer=o(" \u2014 "),kq=a("a"),ter=o("TFRemBertForCausalLM"),aer=o(" (RemBERT model)"),ner=l(),tT=a("li"),zme=a("strong"),ser=o("roberta"),ler=o(" \u2014 "),Rq=a("a"),ier=o("TFRobertaForCausalLM"),der=o(" (RoBERTa model)"),cer=l(),aT=a("li"),Wme=a("strong"),fer=o("roformer"),mer=o(" \u2014 "),Sq=a("a"),ger=o("TFRoFormerForCausalLM"),her=o(" (RoFormer model)"),uer=l(),nT=a("li"),Qme=a("strong"),per=o("transfo-xl"),_er=o(" \u2014 "),Pq=a("a"),ver=o("TFTransfoXLLMHeadModel"),ber=o(" (Transformer-XL model)"),Ter=l(),sT=a("li"),Hme=a("strong"),Fer=o("xlm"),Cer=o(" \u2014 "),$q=a("a"),Mer=o("TFXLMWithLMHeadModel"),Eer=o(" (XLM model)"),yer=l(),lT=a("li"),Ume=a("strong"),wer=o("xlnet"),Aer=o(" \u2014 "),Iq=a("a"),Ler=o("TFXLNetLMHeadModel"),Ber=o(" (XLNet model)"),xer=l(),Jme=a("p"),ker=o("Examples:"),Rer=l(),f(pw.$$.fragment),PBe=l(),cc=a("h2"),iT=a("a"),Yme=a("span"),f(_w.$$.fragment),Ser=l(),Kme=a("span"),Per=o("TFAutoModelForImageClassification"),$Be=l(),vr=a("div"),f(vw.$$.fragment),$er=l(),fc=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zme=a("code"),Der=o("from_pretrained()"),jer=o("class method or the "),ege=a("code"),Ner=o("from_config()"),qer=o(`class
method.`),Ger=l(),bw=a("p"),Oer=o("This class cannot be instantiated directly using "),oge=a("code"),Xer=o("__init__()"),Ver=o(" (throws an error)."),zer=l(),ft=a("div"),f(Tw.$$.fragment),Wer=l(),rge=a("p"),Qer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Her=l(),mc=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),age=a("code"),Ker=o("from_pretrained()"),Zer=o("to load the model weights."),eor=l(),nge=a("p"),oor=o("Examples:"),ror=l(),f(Fw.$$.fragment),tor=l(),po=a("div"),f(Cw.$$.fragment),aor=l(),sge=a("p"),nor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sor=l(),gn=a("p"),lor=o("The model class to instantiate is selected based on the "),lge=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),uor=l(),Mw=a("ul"),dT=a("li"),cge=a("strong"),por=o("convnext"),_or=o(" \u2014 "),Dq=a("a"),vor=o("TFConvNextForImageClassification"),bor=o(" (ConvNext model)"),Tor=l(),cT=a("li"),fge=a("strong"),For=o("vit"),Cor=o(" \u2014 "),jq=a("a"),Mor=o("TFViTForImageClassification"),Eor=o(" (ViT model)"),yor=l(),mge=a("p"),wor=o("Examples:"),Aor=l(),f(Ew.$$.fragment),IBe=l(),gc=a("h2"),fT=a("a"),gge=a("span"),f(yw.$$.fragment),Lor=l(),hge=a("span"),Bor=o("TFAutoModelForMaskedLM"),DBe=l(),br=a("div"),f(ww.$$.fragment),xor=l(),hc=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uge=a("code"),Ror=o("from_pretrained()"),Sor=o("class method or the "),pge=a("code"),Por=o("from_config()"),$or=o(`class
method.`),Ior=l(),Aw=a("p"),Dor=o("This class cannot be instantiated directly using "),_ge=a("code"),jor=o("__init__()"),Nor=o(" (throws an error)."),qor=l(),mt=a("div"),f(Lw.$$.fragment),Gor=l(),vge=a("p"),Oor=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xor=l(),uc=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),zor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=a("code"),Qor=o("from_pretrained()"),Hor=o("to load the model weights."),Uor=l(),Fge=a("p"),Jor=o("Examples:"),Yor=l(),f(Bw.$$.fragment),Kor=l(),_o=a("div"),f(xw.$$.fragment),Zor=l(),Cge=a("p"),err=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),orr=l(),hn=a("p"),rrr=o("The model class to instantiate is selected based on the "),Mge=a("code"),trr=o("model_type"),arr=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(":"),drr=l(),Y=a("ul"),mT=a("li"),wge=a("strong"),crr=o("albert"),frr=o(" \u2014 "),Nq=a("a"),mrr=o("TFAlbertForMaskedLM"),grr=o(" (ALBERT model)"),hrr=l(),gT=a("li"),Age=a("strong"),urr=o("bert"),prr=o(" \u2014 "),qq=a("a"),_rr=o("TFBertForMaskedLM"),vrr=o(" (BERT model)"),brr=l(),hT=a("li"),Lge=a("strong"),Trr=o("camembert"),Frr=o(" \u2014 "),Gq=a("a"),Crr=o("TFCamembertForMaskedLM"),Mrr=o(" (CamemBERT model)"),Err=l(),uT=a("li"),Bge=a("strong"),yrr=o("convbert"),wrr=o(" \u2014 "),Oq=a("a"),Arr=o("TFConvBertForMaskedLM"),Lrr=o(" (ConvBERT model)"),Brr=l(),pT=a("li"),xge=a("strong"),xrr=o("deberta"),krr=o(" \u2014 "),Xq=a("a"),Rrr=o("TFDebertaForMaskedLM"),Srr=o(" (DeBERTa model)"),Prr=l(),_T=a("li"),kge=a("strong"),$rr=o("deberta-v2"),Irr=o(" \u2014 "),Vq=a("a"),Drr=o("TFDebertaV2ForMaskedLM"),jrr=o(" (DeBERTa-v2 model)"),Nrr=l(),vT=a("li"),Rge=a("strong"),qrr=o("distilbert"),Grr=o(" \u2014 "),zq=a("a"),Orr=o("TFDistilBertForMaskedLM"),Xrr=o(" (DistilBERT model)"),Vrr=l(),bT=a("li"),Sge=a("strong"),zrr=o("electra"),Wrr=o(" \u2014 "),Wq=a("a"),Qrr=o("TFElectraForMaskedLM"),Hrr=o(" (ELECTRA model)"),Urr=l(),TT=a("li"),Pge=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),Qq=a("a"),Krr=o("TFFlaubertWithLMHeadModel"),Zrr=o(" (FlauBERT model)"),etr=l(),FT=a("li"),$ge=a("strong"),otr=o("funnel"),rtr=o(" \u2014 "),Hq=a("a"),ttr=o("TFFunnelForMaskedLM"),atr=o(" (Funnel Transformer model)"),ntr=l(),CT=a("li"),Ige=a("strong"),str=o("layoutlm"),ltr=o(" \u2014 "),Uq=a("a"),itr=o("TFLayoutLMForMaskedLM"),dtr=o(" (LayoutLM model)"),ctr=l(),MT=a("li"),Dge=a("strong"),ftr=o("longformer"),mtr=o(" \u2014 "),Jq=a("a"),gtr=o("TFLongformerForMaskedLM"),htr=o(" (Longformer model)"),utr=l(),ET=a("li"),jge=a("strong"),ptr=o("mobilebert"),_tr=o(" \u2014 "),Yq=a("a"),vtr=o("TFMobileBertForMaskedLM"),btr=o(" (MobileBERT model)"),Ttr=l(),yT=a("li"),Nge=a("strong"),Ftr=o("mpnet"),Ctr=o(" \u2014 "),Kq=a("a"),Mtr=o("TFMPNetForMaskedLM"),Etr=o(" (MPNet model)"),ytr=l(),wT=a("li"),qge=a("strong"),wtr=o("rembert"),Atr=o(" \u2014 "),Zq=a("a"),Ltr=o("TFRemBertForMaskedLM"),Btr=o(" (RemBERT model)"),xtr=l(),AT=a("li"),Gge=a("strong"),ktr=o("roberta"),Rtr=o(" \u2014 "),eG=a("a"),Str=o("TFRobertaForMaskedLM"),Ptr=o(" (RoBERTa model)"),$tr=l(),LT=a("li"),Oge=a("strong"),Itr=o("roformer"),Dtr=o(" \u2014 "),oG=a("a"),jtr=o("TFRoFormerForMaskedLM"),Ntr=o(" (RoFormer model)"),qtr=l(),BT=a("li"),Xge=a("strong"),Gtr=o("tapas"),Otr=o(" \u2014 "),rG=a("a"),Xtr=o("TFTapasForMaskedLM"),Vtr=o(" (TAPAS model)"),ztr=l(),xT=a("li"),Vge=a("strong"),Wtr=o("xlm"),Qtr=o(" \u2014 "),tG=a("a"),Htr=o("TFXLMWithLMHeadModel"),Utr=o(" (XLM model)"),Jtr=l(),kT=a("li"),zge=a("strong"),Ytr=o("xlm-roberta"),Ktr=o(" \u2014 "),aG=a("a"),Ztr=o("TFXLMRobertaForMaskedLM"),ear=o(" (XLM-RoBERTa model)"),oar=l(),Wge=a("p"),rar=o("Examples:"),tar=l(),f(kw.$$.fragment),jBe=l(),pc=a("h2"),RT=a("a"),Qge=a("span"),f(Rw.$$.fragment),aar=l(),Hge=a("span"),nar=o("TFAutoModelForSeq2SeqLM"),NBe=l(),Tr=a("div"),f(Sw.$$.fragment),sar=l(),_c=a("p"),lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=a("code"),iar=o("from_pretrained()"),dar=o("class method or the "),Jge=a("code"),car=o("from_config()"),far=o(`class
method.`),mar=l(),Pw=a("p"),gar=o("This class cannot be instantiated directly using "),Yge=a("code"),har=o("__init__()"),uar=o(" (throws an error)."),par=l(),gt=a("div"),f($w.$$.fragment),_ar=l(),Kge=a("p"),bar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tar=l(),vc=a("p"),Far=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),Car=o("not"),Mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=a("code"),Ear=o("from_pretrained()"),yar=o("to load the model weights."),war=l(),ohe=a("p"),Aar=o("Examples:"),Lar=l(),f(Iw.$$.fragment),Bar=l(),vo=a("div"),f(Dw.$$.fragment),xar=l(),rhe=a("p"),kar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rar=l(),un=a("p"),Sar=o("The model class to instantiate is selected based on the "),the=a("code"),Par=o("model_type"),$ar=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),Iar=o("pretrained_model_name_or_path"),Dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),jar=o("pretrained_model_name_or_path"),Nar=o(":"),qar=l(),ue=a("ul"),ST=a("li"),she=a("strong"),Gar=o("bart"),Oar=o(" \u2014 "),nG=a("a"),Xar=o("TFBartForConditionalGeneration"),Var=o(" (BART model)"),zar=l(),PT=a("li"),lhe=a("strong"),War=o("blenderbot"),Qar=o(" \u2014 "),sG=a("a"),Har=o("TFBlenderbotForConditionalGeneration"),Uar=o(" (Blenderbot model)"),Jar=l(),$T=a("li"),ihe=a("strong"),Yar=o("blenderbot-small"),Kar=o(" \u2014 "),lG=a("a"),Zar=o("TFBlenderbotSmallForConditionalGeneration"),enr=o(" (BlenderbotSmall model)"),onr=l(),IT=a("li"),dhe=a("strong"),rnr=o("encoder-decoder"),tnr=o(" \u2014 "),iG=a("a"),anr=o("TFEncoderDecoderModel"),nnr=o(" (Encoder decoder model)"),snr=l(),DT=a("li"),che=a("strong"),lnr=o("led"),inr=o(" \u2014 "),dG=a("a"),dnr=o("TFLEDForConditionalGeneration"),cnr=o(" (LED model)"),fnr=l(),jT=a("li"),fhe=a("strong"),mnr=o("marian"),gnr=o(" \u2014 "),cG=a("a"),hnr=o("TFMarianMTModel"),unr=o(" (Marian model)"),pnr=l(),NT=a("li"),mhe=a("strong"),_nr=o("mbart"),vnr=o(" \u2014 "),fG=a("a"),bnr=o("TFMBartForConditionalGeneration"),Tnr=o(" (mBART model)"),Fnr=l(),qT=a("li"),ghe=a("strong"),Cnr=o("mt5"),Mnr=o(" \u2014 "),mG=a("a"),Enr=o("TFMT5ForConditionalGeneration"),ynr=o(" (mT5 model)"),wnr=l(),GT=a("li"),hhe=a("strong"),Anr=o("pegasus"),Lnr=o(" \u2014 "),gG=a("a"),Bnr=o("TFPegasusForConditionalGeneration"),xnr=o(" (Pegasus model)"),knr=l(),OT=a("li"),uhe=a("strong"),Rnr=o("t5"),Snr=o(" \u2014 "),hG=a("a"),Pnr=o("TFT5ForConditionalGeneration"),$nr=o(" (T5 model)"),Inr=l(),phe=a("p"),Dnr=o("Examples:"),jnr=l(),f(jw.$$.fragment),qBe=l(),bc=a("h2"),XT=a("a"),_he=a("span"),f(Nw.$$.fragment),Nnr=l(),vhe=a("span"),qnr=o("TFAutoModelForSequenceClassification"),GBe=l(),Fr=a("div"),f(qw.$$.fragment),Gnr=l(),Tc=a("p"),Onr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bhe=a("code"),Xnr=o("from_pretrained()"),Vnr=o("class method or the "),The=a("code"),znr=o("from_config()"),Wnr=o(`class
method.`),Qnr=l(),Gw=a("p"),Hnr=o("This class cannot be instantiated directly using "),Fhe=a("code"),Unr=o("__init__()"),Jnr=o(" (throws an error)."),Ynr=l(),ht=a("div"),f(Ow.$$.fragment),Knr=l(),Che=a("p"),Znr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),esr=l(),Fc=a("p"),osr=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),rsr=o("not"),tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=a("code"),asr=o("from_pretrained()"),nsr=o("to load the model weights."),ssr=l(),yhe=a("p"),lsr=o("Examples:"),isr=l(),f(Xw.$$.fragment),dsr=l(),bo=a("div"),f(Vw.$$.fragment),csr=l(),whe=a("p"),fsr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),msr=l(),pn=a("p"),gsr=o("The model class to instantiate is selected based on the "),Ahe=a("code"),hsr=o("model_type"),usr=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),psr=o("pretrained_model_name_or_path"),_sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),vsr=o("pretrained_model_name_or_path"),bsr=o(":"),Tsr=l(),X=a("ul"),VT=a("li"),xhe=a("strong"),Fsr=o("albert"),Csr=o(" \u2014 "),uG=a("a"),Msr=o("TFAlbertForSequenceClassification"),Esr=o(" (ALBERT model)"),ysr=l(),zT=a("li"),khe=a("strong"),wsr=o("bert"),Asr=o(" \u2014 "),pG=a("a"),Lsr=o("TFBertForSequenceClassification"),Bsr=o(" (BERT model)"),xsr=l(),WT=a("li"),Rhe=a("strong"),ksr=o("camembert"),Rsr=o(" \u2014 "),_G=a("a"),Ssr=o("TFCamembertForSequenceClassification"),Psr=o(" (CamemBERT model)"),$sr=l(),QT=a("li"),She=a("strong"),Isr=o("convbert"),Dsr=o(" \u2014 "),vG=a("a"),jsr=o("TFConvBertForSequenceClassification"),Nsr=o(" (ConvBERT model)"),qsr=l(),HT=a("li"),Phe=a("strong"),Gsr=o("ctrl"),Osr=o(" \u2014 "),bG=a("a"),Xsr=o("TFCTRLForSequenceClassification"),Vsr=o(" (CTRL model)"),zsr=l(),UT=a("li"),$he=a("strong"),Wsr=o("deberta"),Qsr=o(" \u2014 "),TG=a("a"),Hsr=o("TFDebertaForSequenceClassification"),Usr=o(" (DeBERTa model)"),Jsr=l(),JT=a("li"),Ihe=a("strong"),Ysr=o("deberta-v2"),Ksr=o(" \u2014 "),FG=a("a"),Zsr=o("TFDebertaV2ForSequenceClassification"),elr=o(" (DeBERTa-v2 model)"),olr=l(),YT=a("li"),Dhe=a("strong"),rlr=o("distilbert"),tlr=o(" \u2014 "),CG=a("a"),alr=o("TFDistilBertForSequenceClassification"),nlr=o(" (DistilBERT model)"),slr=l(),KT=a("li"),jhe=a("strong"),llr=o("electra"),ilr=o(" \u2014 "),MG=a("a"),dlr=o("TFElectraForSequenceClassification"),clr=o(" (ELECTRA model)"),flr=l(),ZT=a("li"),Nhe=a("strong"),mlr=o("flaubert"),glr=o(" \u2014 "),EG=a("a"),hlr=o("TFFlaubertForSequenceClassification"),ulr=o(" (FlauBERT model)"),plr=l(),e7=a("li"),qhe=a("strong"),_lr=o("funnel"),vlr=o(" \u2014 "),yG=a("a"),blr=o("TFFunnelForSequenceClassification"),Tlr=o(" (Funnel Transformer model)"),Flr=l(),o7=a("li"),Ghe=a("strong"),Clr=o("gpt2"),Mlr=o(" \u2014 "),wG=a("a"),Elr=o("TFGPT2ForSequenceClassification"),ylr=o(" (OpenAI GPT-2 model)"),wlr=l(),r7=a("li"),Ohe=a("strong"),Alr=o("layoutlm"),Llr=o(" \u2014 "),AG=a("a"),Blr=o("TFLayoutLMForSequenceClassification"),xlr=o(" (LayoutLM model)"),klr=l(),t7=a("li"),Xhe=a("strong"),Rlr=o("longformer"),Slr=o(" \u2014 "),LG=a("a"),Plr=o("TFLongformerForSequenceClassification"),$lr=o(" (Longformer model)"),Ilr=l(),a7=a("li"),Vhe=a("strong"),Dlr=o("mobilebert"),jlr=o(" \u2014 "),BG=a("a"),Nlr=o("TFMobileBertForSequenceClassification"),qlr=o(" (MobileBERT model)"),Glr=l(),n7=a("li"),zhe=a("strong"),Olr=o("mpnet"),Xlr=o(" \u2014 "),xG=a("a"),Vlr=o("TFMPNetForSequenceClassification"),zlr=o(" (MPNet model)"),Wlr=l(),s7=a("li"),Whe=a("strong"),Qlr=o("openai-gpt"),Hlr=o(" \u2014 "),kG=a("a"),Ulr=o("TFOpenAIGPTForSequenceClassification"),Jlr=o(" (OpenAI GPT model)"),Ylr=l(),l7=a("li"),Qhe=a("strong"),Klr=o("rembert"),Zlr=o(" \u2014 "),RG=a("a"),eir=o("TFRemBertForSequenceClassification"),oir=o(" (RemBERT model)"),rir=l(),i7=a("li"),Hhe=a("strong"),tir=o("roberta"),air=o(" \u2014 "),SG=a("a"),nir=o("TFRobertaForSequenceClassification"),sir=o(" (RoBERTa model)"),lir=l(),d7=a("li"),Uhe=a("strong"),iir=o("roformer"),dir=o(" \u2014 "),PG=a("a"),cir=o("TFRoFormerForSequenceClassification"),fir=o(" (RoFormer model)"),mir=l(),c7=a("li"),Jhe=a("strong"),gir=o("tapas"),hir=o(" \u2014 "),$G=a("a"),uir=o("TFTapasForSequenceClassification"),pir=o(" (TAPAS model)"),_ir=l(),f7=a("li"),Yhe=a("strong"),vir=o("transfo-xl"),bir=o(" \u2014 "),IG=a("a"),Tir=o("TFTransfoXLForSequenceClassification"),Fir=o(" (Transformer-XL model)"),Cir=l(),m7=a("li"),Khe=a("strong"),Mir=o("xlm"),Eir=o(" \u2014 "),DG=a("a"),yir=o("TFXLMForSequenceClassification"),wir=o(" (XLM model)"),Air=l(),g7=a("li"),Zhe=a("strong"),Lir=o("xlm-roberta"),Bir=o(" \u2014 "),jG=a("a"),xir=o("TFXLMRobertaForSequenceClassification"),kir=o(" (XLM-RoBERTa model)"),Rir=l(),h7=a("li"),eue=a("strong"),Sir=o("xlnet"),Pir=o(" \u2014 "),NG=a("a"),$ir=o("TFXLNetForSequenceClassification"),Iir=o(" (XLNet model)"),Dir=l(),oue=a("p"),jir=o("Examples:"),Nir=l(),f(zw.$$.fragment),OBe=l(),Cc=a("h2"),u7=a("a"),rue=a("span"),f(Ww.$$.fragment),qir=l(),tue=a("span"),Gir=o("TFAutoModelForMultipleChoice"),XBe=l(),Cr=a("div"),f(Qw.$$.fragment),Oir=l(),Mc=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aue=a("code"),Vir=o("from_pretrained()"),zir=o("class method or the "),nue=a("code"),Wir=o("from_config()"),Qir=o(`class
method.`),Hir=l(),Hw=a("p"),Uir=o("This class cannot be instantiated directly using "),sue=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),ut=a("div"),f(Uw.$$.fragment),Zir=l(),lue=a("p"),edr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),odr=l(),Ec=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),due=a("code"),ndr=o("from_pretrained()"),sdr=o("to load the model weights."),ldr=l(),cue=a("p"),idr=o("Examples:"),ddr=l(),f(Jw.$$.fragment),cdr=l(),To=a("div"),f(Yw.$$.fragment),fdr=l(),fue=a("p"),mdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gdr=l(),_n=a("p"),hdr=o("The model class to instantiate is selected based on the "),mue=a("code"),udr=o("model_type"),pdr=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),_dr=o("pretrained_model_name_or_path"),vdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),bdr=o("pretrained_model_name_or_path"),Tdr=o(":"),Fdr=l(),te=a("ul"),p7=a("li"),uue=a("strong"),Cdr=o("albert"),Mdr=o(" \u2014 "),qG=a("a"),Edr=o("TFAlbertForMultipleChoice"),ydr=o(" (ALBERT model)"),wdr=l(),_7=a("li"),pue=a("strong"),Adr=o("bert"),Ldr=o(" \u2014 "),GG=a("a"),Bdr=o("TFBertForMultipleChoice"),xdr=o(" (BERT model)"),kdr=l(),v7=a("li"),_ue=a("strong"),Rdr=o("camembert"),Sdr=o(" \u2014 "),OG=a("a"),Pdr=o("TFCamembertForMultipleChoice"),$dr=o(" (CamemBERT model)"),Idr=l(),b7=a("li"),vue=a("strong"),Ddr=o("convbert"),jdr=o(" \u2014 "),XG=a("a"),Ndr=o("TFConvBertForMultipleChoice"),qdr=o(" (ConvBERT model)"),Gdr=l(),T7=a("li"),bue=a("strong"),Odr=o("distilbert"),Xdr=o(" \u2014 "),VG=a("a"),Vdr=o("TFDistilBertForMultipleChoice"),zdr=o(" (DistilBERT model)"),Wdr=l(),F7=a("li"),Tue=a("strong"),Qdr=o("electra"),Hdr=o(" \u2014 "),zG=a("a"),Udr=o("TFElectraForMultipleChoice"),Jdr=o(" (ELECTRA model)"),Ydr=l(),C7=a("li"),Fue=a("strong"),Kdr=o("flaubert"),Zdr=o(" \u2014 "),WG=a("a"),ecr=o("TFFlaubertForMultipleChoice"),ocr=o(" (FlauBERT model)"),rcr=l(),M7=a("li"),Cue=a("strong"),tcr=o("funnel"),acr=o(" \u2014 "),QG=a("a"),ncr=o("TFFunnelForMultipleChoice"),scr=o(" (Funnel Transformer model)"),lcr=l(),E7=a("li"),Mue=a("strong"),icr=o("longformer"),dcr=o(" \u2014 "),HG=a("a"),ccr=o("TFLongformerForMultipleChoice"),fcr=o(" (Longformer model)"),mcr=l(),y7=a("li"),Eue=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),UG=a("a"),ucr=o("TFMobileBertForMultipleChoice"),pcr=o(" (MobileBERT model)"),_cr=l(),w7=a("li"),yue=a("strong"),vcr=o("mpnet"),bcr=o(" \u2014 "),JG=a("a"),Tcr=o("TFMPNetForMultipleChoice"),Fcr=o(" (MPNet model)"),Ccr=l(),A7=a("li"),wue=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),YG=a("a"),ycr=o("TFRemBertForMultipleChoice"),wcr=o(" (RemBERT model)"),Acr=l(),L7=a("li"),Aue=a("strong"),Lcr=o("roberta"),Bcr=o(" \u2014 "),KG=a("a"),xcr=o("TFRobertaForMultipleChoice"),kcr=o(" (RoBERTa model)"),Rcr=l(),B7=a("li"),Lue=a("strong"),Scr=o("roformer"),Pcr=o(" \u2014 "),ZG=a("a"),$cr=o("TFRoFormerForMultipleChoice"),Icr=o(" (RoFormer model)"),Dcr=l(),x7=a("li"),Bue=a("strong"),jcr=o("xlm"),Ncr=o(" \u2014 "),eO=a("a"),qcr=o("TFXLMForMultipleChoice"),Gcr=o(" (XLM model)"),Ocr=l(),k7=a("li"),xue=a("strong"),Xcr=o("xlm-roberta"),Vcr=o(" \u2014 "),oO=a("a"),zcr=o("TFXLMRobertaForMultipleChoice"),Wcr=o(" (XLM-RoBERTa model)"),Qcr=l(),R7=a("li"),kue=a("strong"),Hcr=o("xlnet"),Ucr=o(" \u2014 "),rO=a("a"),Jcr=o("TFXLNetForMultipleChoice"),Ycr=o(" (XLNet model)"),Kcr=l(),Rue=a("p"),Zcr=o("Examples:"),efr=l(),f(Kw.$$.fragment),VBe=l(),yc=a("h2"),S7=a("a"),Sue=a("span"),f(Zw.$$.fragment),ofr=l(),Pue=a("span"),rfr=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),Mr=a("div"),f(e6.$$.fragment),tfr=l(),wc=a("p"),afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$ue=a("code"),nfr=o("from_pretrained()"),sfr=o("class method or the "),Iue=a("code"),lfr=o("from_config()"),ifr=o(`class
method.`),dfr=l(),o6=a("p"),cfr=o("This class cannot be instantiated directly using "),Due=a("code"),ffr=o("__init__()"),mfr=o(" (throws an error)."),gfr=l(),pt=a("div"),f(r6.$$.fragment),hfr=l(),jue=a("p"),ufr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pfr=l(),Ac=a("p"),_fr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),vfr=o("not"),bfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),que=a("code"),Tfr=o("from_pretrained()"),Ffr=o("to load the model weights."),Cfr=l(),Gue=a("p"),Mfr=o("Examples:"),Efr=l(),f(t6.$$.fragment),yfr=l(),Fo=a("div"),f(a6.$$.fragment),wfr=l(),Oue=a("p"),Afr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lfr=l(),vn=a("p"),Bfr=o("The model class to instantiate is selected based on the "),Xue=a("code"),xfr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),Rfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),Pfr=o("pretrained_model_name_or_path"),$fr=o(":"),Ifr=l(),Wue=a("ul"),P7=a("li"),Que=a("strong"),Dfr=o("tapas"),jfr=o(" \u2014 "),tO=a("a"),Nfr=o("TFTapasForQuestionAnswering"),qfr=o(" (TAPAS model)"),Gfr=l(),Hue=a("p"),Ofr=o("Examples:"),Xfr=l(),f(n6.$$.fragment),WBe=l(),Lc=a("h2"),$7=a("a"),Uue=a("span"),f(s6.$$.fragment),Vfr=l(),Jue=a("span"),zfr=o("TFAutoModelForTokenClassification"),QBe=l(),Er=a("div"),f(l6.$$.fragment),Wfr=l(),Bc=a("p"),Qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yue=a("code"),Hfr=o("from_pretrained()"),Ufr=o("class method or the "),Kue=a("code"),Jfr=o("from_config()"),Yfr=o(`class
method.`),Kfr=l(),i6=a("p"),Zfr=o("This class cannot be instantiated directly using "),Zue=a("code"),emr=o("__init__()"),omr=o(" (throws an error)."),rmr=l(),_t=a("div"),f(d6.$$.fragment),tmr=l(),epe=a("p"),amr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nmr=l(),xc=a("p"),smr=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),lmr=o("not"),imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rpe=a("code"),dmr=o("from_pretrained()"),cmr=o("to load the model weights."),fmr=l(),tpe=a("p"),mmr=o("Examples:"),gmr=l(),f(c6.$$.fragment),hmr=l(),Co=a("div"),f(f6.$$.fragment),umr=l(),ape=a("p"),pmr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_mr=l(),bn=a("p"),vmr=o("The model class to instantiate is selected based on the "),npe=a("code"),bmr=o("model_type"),Tmr=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),Fmr=o("pretrained_model_name_or_path"),Cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),Mmr=o("pretrained_model_name_or_path"),Emr=o(":"),ymr=l(),K=a("ul"),I7=a("li"),ipe=a("strong"),wmr=o("albert"),Amr=o(" \u2014 "),aO=a("a"),Lmr=o("TFAlbertForTokenClassification"),Bmr=o(" (ALBERT model)"),xmr=l(),D7=a("li"),dpe=a("strong"),kmr=o("bert"),Rmr=o(" \u2014 "),nO=a("a"),Smr=o("TFBertForTokenClassification"),Pmr=o(" (BERT model)"),$mr=l(),j7=a("li"),cpe=a("strong"),Imr=o("camembert"),Dmr=o(" \u2014 "),sO=a("a"),jmr=o("TFCamembertForTokenClassification"),Nmr=o(" (CamemBERT model)"),qmr=l(),N7=a("li"),fpe=a("strong"),Gmr=o("convbert"),Omr=o(" \u2014 "),lO=a("a"),Xmr=o("TFConvBertForTokenClassification"),Vmr=o(" (ConvBERT model)"),zmr=l(),q7=a("li"),mpe=a("strong"),Wmr=o("deberta"),Qmr=o(" \u2014 "),iO=a("a"),Hmr=o("TFDebertaForTokenClassification"),Umr=o(" (DeBERTa model)"),Jmr=l(),G7=a("li"),gpe=a("strong"),Ymr=o("deberta-v2"),Kmr=o(" \u2014 "),dO=a("a"),Zmr=o("TFDebertaV2ForTokenClassification"),egr=o(" (DeBERTa-v2 model)"),ogr=l(),O7=a("li"),hpe=a("strong"),rgr=o("distilbert"),tgr=o(" \u2014 "),cO=a("a"),agr=o("TFDistilBertForTokenClassification"),ngr=o(" (DistilBERT model)"),sgr=l(),X7=a("li"),upe=a("strong"),lgr=o("electra"),igr=o(" \u2014 "),fO=a("a"),dgr=o("TFElectraForTokenClassification"),cgr=o(" (ELECTRA model)"),fgr=l(),V7=a("li"),ppe=a("strong"),mgr=o("flaubert"),ggr=o(" \u2014 "),mO=a("a"),hgr=o("TFFlaubertForTokenClassification"),ugr=o(" (FlauBERT model)"),pgr=l(),z7=a("li"),_pe=a("strong"),_gr=o("funnel"),vgr=o(" \u2014 "),gO=a("a"),bgr=o("TFFunnelForTokenClassification"),Tgr=o(" (Funnel Transformer model)"),Fgr=l(),W7=a("li"),vpe=a("strong"),Cgr=o("layoutlm"),Mgr=o(" \u2014 "),hO=a("a"),Egr=o("TFLayoutLMForTokenClassification"),ygr=o(" (LayoutLM model)"),wgr=l(),Q7=a("li"),bpe=a("strong"),Agr=o("longformer"),Lgr=o(" \u2014 "),uO=a("a"),Bgr=o("TFLongformerForTokenClassification"),xgr=o(" (Longformer model)"),kgr=l(),H7=a("li"),Tpe=a("strong"),Rgr=o("mobilebert"),Sgr=o(" \u2014 "),pO=a("a"),Pgr=o("TFMobileBertForTokenClassification"),$gr=o(" (MobileBERT model)"),Igr=l(),U7=a("li"),Fpe=a("strong"),Dgr=o("mpnet"),jgr=o(" \u2014 "),_O=a("a"),Ngr=o("TFMPNetForTokenClassification"),qgr=o(" (MPNet model)"),Ggr=l(),J7=a("li"),Cpe=a("strong"),Ogr=o("rembert"),Xgr=o(" \u2014 "),vO=a("a"),Vgr=o("TFRemBertForTokenClassification"),zgr=o(" (RemBERT model)"),Wgr=l(),Y7=a("li"),Mpe=a("strong"),Qgr=o("roberta"),Hgr=o(" \u2014 "),bO=a("a"),Ugr=o("TFRobertaForTokenClassification"),Jgr=o(" (RoBERTa model)"),Ygr=l(),K7=a("li"),Epe=a("strong"),Kgr=o("roformer"),Zgr=o(" \u2014 "),TO=a("a"),ehr=o("TFRoFormerForTokenClassification"),ohr=o(" (RoFormer model)"),rhr=l(),Z7=a("li"),ype=a("strong"),thr=o("xlm"),ahr=o(" \u2014 "),FO=a("a"),nhr=o("TFXLMForTokenClassification"),shr=o(" (XLM model)"),lhr=l(),eF=a("li"),wpe=a("strong"),ihr=o("xlm-roberta"),dhr=o(" \u2014 "),CO=a("a"),chr=o("TFXLMRobertaForTokenClassification"),fhr=o(" (XLM-RoBERTa model)"),mhr=l(),oF=a("li"),Ape=a("strong"),ghr=o("xlnet"),hhr=o(" \u2014 "),MO=a("a"),uhr=o("TFXLNetForTokenClassification"),phr=o(" (XLNet model)"),_hr=l(),Lpe=a("p"),vhr=o("Examples:"),bhr=l(),f(m6.$$.fragment),HBe=l(),kc=a("h2"),rF=a("a"),Bpe=a("span"),f(g6.$$.fragment),Thr=l(),xpe=a("span"),Fhr=o("TFAutoModelForQuestionAnswering"),UBe=l(),yr=a("div"),f(h6.$$.fragment),Chr=l(),Rc=a("p"),Mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kpe=a("code"),Ehr=o("from_pretrained()"),yhr=o("class method or the "),Rpe=a("code"),whr=o("from_config()"),Ahr=o(`class
method.`),Lhr=l(),u6=a("p"),Bhr=o("This class cannot be instantiated directly using "),Spe=a("code"),xhr=o("__init__()"),khr=o(" (throws an error)."),Rhr=l(),vt=a("div"),f(p6.$$.fragment),Shr=l(),Ppe=a("p"),Phr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$hr=l(),Sc=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Dhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=a("code"),Nhr=o("from_pretrained()"),qhr=o("to load the model weights."),Ghr=l(),Dpe=a("p"),Ohr=o("Examples:"),Xhr=l(),f(_6.$$.fragment),Vhr=l(),Mo=a("div"),f(v6.$$.fragment),zhr=l(),jpe=a("p"),Whr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qhr=l(),Tn=a("p"),Hhr=o("The model class to instantiate is selected based on the "),Npe=a("code"),Uhr=o("model_type"),Jhr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),Zhr=o("pretrained_model_name_or_path"),eur=o(":"),our=l(),Z=a("ul"),tF=a("li"),Ope=a("strong"),rur=o("albert"),tur=o(" \u2014 "),EO=a("a"),aur=o("TFAlbertForQuestionAnswering"),nur=o(" (ALBERT model)"),sur=l(),aF=a("li"),Xpe=a("strong"),lur=o("bert"),iur=o(" \u2014 "),yO=a("a"),dur=o("TFBertForQuestionAnswering"),cur=o(" (BERT model)"),fur=l(),nF=a("li"),Vpe=a("strong"),mur=o("camembert"),gur=o(" \u2014 "),wO=a("a"),hur=o("TFCamembertForQuestionAnswering"),uur=o(" (CamemBERT model)"),pur=l(),sF=a("li"),zpe=a("strong"),_ur=o("convbert"),vur=o(" \u2014 "),AO=a("a"),bur=o("TFConvBertForQuestionAnswering"),Tur=o(" (ConvBERT model)"),Fur=l(),lF=a("li"),Wpe=a("strong"),Cur=o("deberta"),Mur=o(" \u2014 "),LO=a("a"),Eur=o("TFDebertaForQuestionAnswering"),yur=o(" (DeBERTa model)"),wur=l(),iF=a("li"),Qpe=a("strong"),Aur=o("deberta-v2"),Lur=o(" \u2014 "),BO=a("a"),Bur=o("TFDebertaV2ForQuestionAnswering"),xur=o(" (DeBERTa-v2 model)"),kur=l(),dF=a("li"),Hpe=a("strong"),Rur=o("distilbert"),Sur=o(" \u2014 "),xO=a("a"),Pur=o("TFDistilBertForQuestionAnswering"),$ur=o(" (DistilBERT model)"),Iur=l(),cF=a("li"),Upe=a("strong"),Dur=o("electra"),jur=o(" \u2014 "),kO=a("a"),Nur=o("TFElectraForQuestionAnswering"),qur=o(" (ELECTRA model)"),Gur=l(),fF=a("li"),Jpe=a("strong"),Our=o("flaubert"),Xur=o(" \u2014 "),RO=a("a"),Vur=o("TFFlaubertForQuestionAnsweringSimple"),zur=o(" (FlauBERT model)"),Wur=l(),mF=a("li"),Ype=a("strong"),Qur=o("funnel"),Hur=o(" \u2014 "),SO=a("a"),Uur=o("TFFunnelForQuestionAnswering"),Jur=o(" (Funnel Transformer model)"),Yur=l(),gF=a("li"),Kpe=a("strong"),Kur=o("longformer"),Zur=o(" \u2014 "),PO=a("a"),epr=o("TFLongformerForQuestionAnswering"),opr=o(" (Longformer model)"),rpr=l(),hF=a("li"),Zpe=a("strong"),tpr=o("mobilebert"),apr=o(" \u2014 "),$O=a("a"),npr=o("TFMobileBertForQuestionAnswering"),spr=o(" (MobileBERT model)"),lpr=l(),uF=a("li"),e_e=a("strong"),ipr=o("mpnet"),dpr=o(" \u2014 "),IO=a("a"),cpr=o("TFMPNetForQuestionAnswering"),fpr=o(" (MPNet model)"),mpr=l(),pF=a("li"),o_e=a("strong"),gpr=o("rembert"),hpr=o(" \u2014 "),DO=a("a"),upr=o("TFRemBertForQuestionAnswering"),ppr=o(" (RemBERT model)"),_pr=l(),_F=a("li"),r_e=a("strong"),vpr=o("roberta"),bpr=o(" \u2014 "),jO=a("a"),Tpr=o("TFRobertaForQuestionAnswering"),Fpr=o(" (RoBERTa model)"),Cpr=l(),vF=a("li"),t_e=a("strong"),Mpr=o("roformer"),Epr=o(" \u2014 "),NO=a("a"),ypr=o("TFRoFormerForQuestionAnswering"),wpr=o(" (RoFormer model)"),Apr=l(),bF=a("li"),a_e=a("strong"),Lpr=o("xlm"),Bpr=o(" \u2014 "),qO=a("a"),xpr=o("TFXLMForQuestionAnsweringSimple"),kpr=o(" (XLM model)"),Rpr=l(),TF=a("li"),n_e=a("strong"),Spr=o("xlm-roberta"),Ppr=o(" \u2014 "),GO=a("a"),$pr=o("TFXLMRobertaForQuestionAnswering"),Ipr=o(" (XLM-RoBERTa model)"),Dpr=l(),FF=a("li"),s_e=a("strong"),jpr=o("xlnet"),Npr=o(" \u2014 "),OO=a("a"),qpr=o("TFXLNetForQuestionAnsweringSimple"),Gpr=o(" (XLNet model)"),Opr=l(),l_e=a("p"),Xpr=o("Examples:"),Vpr=l(),f(b6.$$.fragment),JBe=l(),Pc=a("h2"),CF=a("a"),i_e=a("span"),f(T6.$$.fragment),zpr=l(),d_e=a("span"),Wpr=o("TFAutoModelForVision2Seq"),YBe=l(),wr=a("div"),f(F6.$$.fragment),Qpr=l(),$c=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),c_e=a("code"),Upr=o("from_pretrained()"),Jpr=o("class method or the "),f_e=a("code"),Ypr=o("from_config()"),Kpr=o(`class
method.`),Zpr=l(),C6=a("p"),e_r=o("This class cannot be instantiated directly using "),m_e=a("code"),o_r=o("__init__()"),r_r=o(" (throws an error)."),t_r=l(),bt=a("div"),f(M6.$$.fragment),a_r=l(),g_e=a("p"),n_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s_r=l(),Ic=a("p"),l_r=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),i_r=o("not"),d_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=a("code"),c_r=o("from_pretrained()"),f_r=o("to load the model weights."),m_r=l(),p_e=a("p"),g_r=o("Examples:"),h_r=l(),f(E6.$$.fragment),u_r=l(),Eo=a("div"),f(y6.$$.fragment),p_r=l(),__e=a("p"),__r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v_r=l(),Fn=a("p"),b_r=o("The model class to instantiate is selected based on the "),v_e=a("code"),T_r=o("model_type"),F_r=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),C_r=o("pretrained_model_name_or_path"),M_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),E_r=o("pretrained_model_name_or_path"),y_r=o(":"),w_r=l(),F_e=a("ul"),MF=a("li"),C_e=a("strong"),A_r=o("vision-encoder-decoder"),L_r=o(" \u2014 "),XO=a("a"),B_r=o("TFVisionEncoderDecoderModel"),x_r=o(" (Vision Encoder decoder model)"),k_r=l(),M_e=a("p"),R_r=o("Examples:"),S_r=l(),f(w6.$$.fragment),KBe=l(),Dc=a("h2"),EF=a("a"),E_e=a("span"),f(A6.$$.fragment),P_r=l(),y_e=a("span"),$_r=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Ar=a("div"),f(L6.$$.fragment),I_r=l(),jc=a("p"),D_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),w_e=a("code"),j_r=o("from_pretrained()"),N_r=o("class method or the "),A_e=a("code"),q_r=o("from_config()"),G_r=o(`class
method.`),O_r=l(),B6=a("p"),X_r=o("This class cannot be instantiated directly using "),L_e=a("code"),V_r=o("__init__()"),z_r=o(" (throws an error)."),W_r=l(),Tt=a("div"),f(x6.$$.fragment),Q_r=l(),B_e=a("p"),H_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),U_r=l(),Nc=a("p"),J_r=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),Y_r=o("not"),K_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=a("code"),Z_r=o("from_pretrained()"),evr=o("to load the model weights."),ovr=l(),R_e=a("p"),rvr=o("Examples:"),tvr=l(),f(k6.$$.fragment),avr=l(),yo=a("div"),f(R6.$$.fragment),nvr=l(),S_e=a("p"),svr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lvr=l(),Cn=a("p"),ivr=o("The model class to instantiate is selected based on the "),P_e=a("code"),dvr=o("model_type"),cvr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(":"),uvr=l(),D_e=a("ul"),yF=a("li"),j_e=a("strong"),pvr=o("speech_to_text"),_vr=o(" \u2014 "),VO=a("a"),vvr=o("TFSpeech2TextForConditionalGeneration"),bvr=o(" (Speech2Text model)"),Tvr=l(),N_e=a("p"),Fvr=o("Examples:"),Cvr=l(),f(S6.$$.fragment),exe=l(),qc=a("h2"),wF=a("a"),q_e=a("span"),f(P6.$$.fragment),Mvr=l(),G_e=a("span"),Evr=o("FlaxAutoModel"),oxe=l(),Lr=a("div"),f($6.$$.fragment),yvr=l(),Gc=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),O_e=a("code"),Avr=o("from_pretrained()"),Lvr=o("class method or the "),X_e=a("code"),Bvr=o("from_config()"),xvr=o(`class
method.`),kvr=l(),I6=a("p"),Rvr=o("This class cannot be instantiated directly using "),V_e=a("code"),Svr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Ft=a("div"),f(D6.$$.fragment),Ivr=l(),z_e=a("p"),Dvr=o("Instantiates one of the base model classes of the library from a configuration."),jvr=l(),Oc=a("p"),Nvr=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),qvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=a("code"),Ovr=o("from_pretrained()"),Xvr=o("to load the model weights."),Vvr=l(),H_e=a("p"),zvr=o("Examples:"),Wvr=l(),f(j6.$$.fragment),Qvr=l(),wo=a("div"),f(N6.$$.fragment),Hvr=l(),U_e=a("p"),Uvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jvr=l(),Mn=a("p"),Yvr=o("The model class to instantiate is selected based on the "),J_e=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),r1r=o("pretrained_model_name_or_path"),t1r=o(":"),a1r=l(),z=a("ul"),AF=a("li"),Z_e=a("strong"),n1r=o("albert"),s1r=o(" \u2014 "),zO=a("a"),l1r=o("FlaxAlbertModel"),i1r=o(" (ALBERT model)"),d1r=l(),LF=a("li"),eve=a("strong"),c1r=o("bart"),f1r=o(" \u2014 "),WO=a("a"),m1r=o("FlaxBartModel"),g1r=o(" (BART model)"),h1r=l(),BF=a("li"),ove=a("strong"),u1r=o("beit"),p1r=o(" \u2014 "),QO=a("a"),_1r=o("FlaxBeitModel"),v1r=o(" (BEiT model)"),b1r=l(),xF=a("li"),rve=a("strong"),T1r=o("bert"),F1r=o(" \u2014 "),HO=a("a"),C1r=o("FlaxBertModel"),M1r=o(" (BERT model)"),E1r=l(),kF=a("li"),tve=a("strong"),y1r=o("big_bird"),w1r=o(" \u2014 "),UO=a("a"),A1r=o("FlaxBigBirdModel"),L1r=o(" (BigBird model)"),B1r=l(),RF=a("li"),ave=a("strong"),x1r=o("blenderbot"),k1r=o(" \u2014 "),JO=a("a"),R1r=o("FlaxBlenderbotModel"),S1r=o(" (Blenderbot model)"),P1r=l(),SF=a("li"),nve=a("strong"),$1r=o("blenderbot-small"),I1r=o(" \u2014 "),YO=a("a"),D1r=o("FlaxBlenderbotSmallModel"),j1r=o(" (BlenderbotSmall model)"),N1r=l(),PF=a("li"),sve=a("strong"),q1r=o("clip"),G1r=o(" \u2014 "),KO=a("a"),O1r=o("FlaxCLIPModel"),X1r=o(" (CLIP model)"),V1r=l(),$F=a("li"),lve=a("strong"),z1r=o("distilbert"),W1r=o(" \u2014 "),ZO=a("a"),Q1r=o("FlaxDistilBertModel"),H1r=o(" (DistilBERT model)"),U1r=l(),IF=a("li"),ive=a("strong"),J1r=o("electra"),Y1r=o(" \u2014 "),eX=a("a"),K1r=o("FlaxElectraModel"),Z1r=o(" (ELECTRA model)"),e4r=l(),DF=a("li"),dve=a("strong"),o4r=o("gpt2"),r4r=o(" \u2014 "),oX=a("a"),t4r=o("FlaxGPT2Model"),a4r=o(" (OpenAI GPT-2 model)"),n4r=l(),jF=a("li"),cve=a("strong"),s4r=o("gpt_neo"),l4r=o(" \u2014 "),rX=a("a"),i4r=o("FlaxGPTNeoModel"),d4r=o(" (GPT Neo model)"),c4r=l(),NF=a("li"),fve=a("strong"),f4r=o("gptj"),m4r=o(" \u2014 "),tX=a("a"),g4r=o("FlaxGPTJModel"),h4r=o(" (GPT-J model)"),u4r=l(),qF=a("li"),mve=a("strong"),p4r=o("marian"),_4r=o(" \u2014 "),aX=a("a"),v4r=o("FlaxMarianModel"),b4r=o(" (Marian model)"),T4r=l(),GF=a("li"),gve=a("strong"),F4r=o("mbart"),C4r=o(" \u2014 "),nX=a("a"),M4r=o("FlaxMBartModel"),E4r=o(" (mBART model)"),y4r=l(),OF=a("li"),hve=a("strong"),w4r=o("mt5"),A4r=o(" \u2014 "),sX=a("a"),L4r=o("FlaxMT5Model"),B4r=o(" (mT5 model)"),x4r=l(),XF=a("li"),uve=a("strong"),k4r=o("pegasus"),R4r=o(" \u2014 "),lX=a("a"),S4r=o("FlaxPegasusModel"),P4r=o(" (Pegasus model)"),$4r=l(),VF=a("li"),pve=a("strong"),I4r=o("roberta"),D4r=o(" \u2014 "),iX=a("a"),j4r=o("FlaxRobertaModel"),N4r=o(" (RoBERTa model)"),q4r=l(),zF=a("li"),_ve=a("strong"),G4r=o("roformer"),O4r=o(" \u2014 "),dX=a("a"),X4r=o("FlaxRoFormerModel"),V4r=o(" (RoFormer model)"),z4r=l(),WF=a("li"),vve=a("strong"),W4r=o("t5"),Q4r=o(" \u2014 "),cX=a("a"),H4r=o("FlaxT5Model"),U4r=o(" (T5 model)"),J4r=l(),QF=a("li"),bve=a("strong"),Y4r=o("vision-text-dual-encoder"),K4r=o(" \u2014 "),fX=a("a"),Z4r=o("FlaxVisionTextDualEncoderModel"),ebr=o(" (VisionTextDualEncoder model)"),obr=l(),HF=a("li"),Tve=a("strong"),rbr=o("vit"),tbr=o(" \u2014 "),mX=a("a"),abr=o("FlaxViTModel"),nbr=o(" (ViT model)"),sbr=l(),UF=a("li"),Fve=a("strong"),lbr=o("wav2vec2"),ibr=o(" \u2014 "),gX=a("a"),dbr=o("FlaxWav2Vec2Model"),cbr=o(" (Wav2Vec2 model)"),fbr=l(),JF=a("li"),Cve=a("strong"),mbr=o("xglm"),gbr=o(" \u2014 "),hX=a("a"),hbr=o("FlaxXGLMModel"),ubr=o(" (XGLM model)"),pbr=l(),Mve=a("p"),_br=o("Examples:"),vbr=l(),f(q6.$$.fragment),rxe=l(),Xc=a("h2"),YF=a("a"),Eve=a("span"),f(G6.$$.fragment),bbr=l(),yve=a("span"),Tbr=o("FlaxAutoModelForCausalLM"),txe=l(),Br=a("div"),f(O6.$$.fragment),Fbr=l(),Vc=a("p"),Cbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wve=a("code"),Mbr=o("from_pretrained()"),Ebr=o("class method or the "),Ave=a("code"),ybr=o("from_config()"),wbr=o(`class
method.`),Abr=l(),X6=a("p"),Lbr=o("This class cannot be instantiated directly using "),Lve=a("code"),Bbr=o("__init__()"),xbr=o(" (throws an error)."),kbr=l(),Ct=a("div"),f(V6.$$.fragment),Rbr=l(),Bve=a("p"),Sbr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pbr=l(),zc=a("p"),$br=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Ibr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kve=a("code"),jbr=o("from_pretrained()"),Nbr=o("to load the model weights."),qbr=l(),Rve=a("p"),Gbr=o("Examples:"),Obr=l(),f(z6.$$.fragment),Xbr=l(),Ao=a("div"),f(W6.$$.fragment),Vbr=l(),Sve=a("p"),zbr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wbr=l(),En=a("p"),Qbr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Hbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(":"),e2r=l(),yn=a("ul"),KF=a("li"),Dve=a("strong"),o2r=o("gpt2"),r2r=o(" \u2014 "),uX=a("a"),t2r=o("FlaxGPT2LMHeadModel"),a2r=o(" (OpenAI GPT-2 model)"),n2r=l(),ZF=a("li"),jve=a("strong"),s2r=o("gpt_neo"),l2r=o(" \u2014 "),pX=a("a"),i2r=o("FlaxGPTNeoForCausalLM"),d2r=o(" (GPT Neo model)"),c2r=l(),eC=a("li"),Nve=a("strong"),f2r=o("gptj"),m2r=o(" \u2014 "),_X=a("a"),g2r=o("FlaxGPTJForCausalLM"),h2r=o(" (GPT-J model)"),u2r=l(),oC=a("li"),qve=a("strong"),p2r=o("xglm"),_2r=o(" \u2014 "),vX=a("a"),v2r=o("FlaxXGLMForCausalLM"),b2r=o(" (XGLM model)"),T2r=l(),Gve=a("p"),F2r=o("Examples:"),C2r=l(),f(Q6.$$.fragment),axe=l(),Wc=a("h2"),rC=a("a"),Ove=a("span"),f(H6.$$.fragment),M2r=l(),Xve=a("span"),E2r=o("FlaxAutoModelForPreTraining"),nxe=l(),xr=a("div"),f(U6.$$.fragment),y2r=l(),Qc=a("p"),w2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vve=a("code"),A2r=o("from_pretrained()"),L2r=o("class method or the "),zve=a("code"),B2r=o("from_config()"),x2r=o(`class
method.`),k2r=l(),J6=a("p"),R2r=o("This class cannot be instantiated directly using "),Wve=a("code"),S2r=o("__init__()"),P2r=o(" (throws an error)."),$2r=l(),Mt=a("div"),f(Y6.$$.fragment),I2r=l(),Qve=a("p"),D2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),j2r=l(),Hc=a("p"),N2r=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),q2r=o("not"),G2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=a("code"),O2r=o("from_pretrained()"),X2r=o("to load the model weights."),V2r=l(),Jve=a("p"),z2r=o("Examples:"),W2r=l(),f(K6.$$.fragment),Q2r=l(),Lo=a("div"),f(Z6.$$.fragment),H2r=l(),Yve=a("p"),U2r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J2r=l(),wn=a("p"),Y2r=o("The model class to instantiate is selected based on the "),Kve=a("code"),K2r=o("model_type"),Z2r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),fe=a("ul"),tC=a("li"),o1e=a("strong"),n0r=o("albert"),s0r=o(" \u2014 "),bX=a("a"),l0r=o("FlaxAlbertForPreTraining"),i0r=o(" (ALBERT model)"),d0r=l(),aC=a("li"),r1e=a("strong"),c0r=o("bart"),f0r=o(" \u2014 "),TX=a("a"),m0r=o("FlaxBartForConditionalGeneration"),g0r=o(" (BART model)"),h0r=l(),nC=a("li"),t1e=a("strong"),u0r=o("bert"),p0r=o(" \u2014 "),FX=a("a"),_0r=o("FlaxBertForPreTraining"),v0r=o(" (BERT model)"),b0r=l(),sC=a("li"),a1e=a("strong"),T0r=o("big_bird"),F0r=o(" \u2014 "),CX=a("a"),C0r=o("FlaxBigBirdForPreTraining"),M0r=o(" (BigBird model)"),E0r=l(),lC=a("li"),n1e=a("strong"),y0r=o("electra"),w0r=o(" \u2014 "),MX=a("a"),A0r=o("FlaxElectraForPreTraining"),L0r=o(" (ELECTRA model)"),B0r=l(),iC=a("li"),s1e=a("strong"),x0r=o("mbart"),k0r=o(" \u2014 "),EX=a("a"),R0r=o("FlaxMBartForConditionalGeneration"),S0r=o(" (mBART model)"),P0r=l(),dC=a("li"),l1e=a("strong"),$0r=o("mt5"),I0r=o(" \u2014 "),yX=a("a"),D0r=o("FlaxMT5ForConditionalGeneration"),j0r=o(" (mT5 model)"),N0r=l(),cC=a("li"),i1e=a("strong"),q0r=o("roberta"),G0r=o(" \u2014 "),wX=a("a"),O0r=o("FlaxRobertaForMaskedLM"),X0r=o(" (RoBERTa model)"),V0r=l(),fC=a("li"),d1e=a("strong"),z0r=o("roformer"),W0r=o(" \u2014 "),AX=a("a"),Q0r=o("FlaxRoFormerForMaskedLM"),H0r=o(" (RoFormer model)"),U0r=l(),mC=a("li"),c1e=a("strong"),J0r=o("t5"),Y0r=o(" \u2014 "),LX=a("a"),K0r=o("FlaxT5ForConditionalGeneration"),Z0r=o(" (T5 model)"),eTr=l(),gC=a("li"),f1e=a("strong"),oTr=o("wav2vec2"),rTr=o(" \u2014 "),BX=a("a"),tTr=o("FlaxWav2Vec2ForPreTraining"),aTr=o(" (Wav2Vec2 model)"),nTr=l(),m1e=a("p"),sTr=o("Examples:"),lTr=l(),f(eA.$$.fragment),sxe=l(),Uc=a("h2"),hC=a("a"),g1e=a("span"),f(oA.$$.fragment),iTr=l(),h1e=a("span"),dTr=o("FlaxAutoModelForMaskedLM"),lxe=l(),kr=a("div"),f(rA.$$.fragment),cTr=l(),Jc=a("p"),fTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),u1e=a("code"),mTr=o("from_pretrained()"),gTr=o("class method or the "),p1e=a("code"),hTr=o("from_config()"),uTr=o(`class
method.`),pTr=l(),tA=a("p"),_Tr=o("This class cannot be instantiated directly using "),_1e=a("code"),vTr=o("__init__()"),bTr=o(" (throws an error)."),TTr=l(),Et=a("div"),f(aA.$$.fragment),FTr=l(),v1e=a("p"),CTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MTr=l(),Yc=a("p"),ETr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),yTr=o("not"),wTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=a("code"),ATr=o("from_pretrained()"),LTr=o("to load the model weights."),BTr=l(),F1e=a("p"),xTr=o("Examples:"),kTr=l(),f(nA.$$.fragment),RTr=l(),Bo=a("div"),f(sA.$$.fragment),STr=l(),C1e=a("p"),PTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Tr=l(),An=a("p"),ITr=o("The model class to instantiate is selected based on the "),M1e=a("code"),DTr=o("model_type"),jTr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),NTr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),GTr=o("pretrained_model_name_or_path"),OTr=o(":"),XTr=l(),be=a("ul"),uC=a("li"),w1e=a("strong"),VTr=o("albert"),zTr=o(" \u2014 "),xX=a("a"),WTr=o("FlaxAlbertForMaskedLM"),QTr=o(" (ALBERT model)"),HTr=l(),pC=a("li"),A1e=a("strong"),UTr=o("bart"),JTr=o(" \u2014 "),kX=a("a"),YTr=o("FlaxBartForConditionalGeneration"),KTr=o(" (BART model)"),ZTr=l(),_C=a("li"),L1e=a("strong"),e7r=o("bert"),o7r=o(" \u2014 "),RX=a("a"),r7r=o("FlaxBertForMaskedLM"),t7r=o(" (BERT model)"),a7r=l(),vC=a("li"),B1e=a("strong"),n7r=o("big_bird"),s7r=o(" \u2014 "),SX=a("a"),l7r=o("FlaxBigBirdForMaskedLM"),i7r=o(" (BigBird model)"),d7r=l(),bC=a("li"),x1e=a("strong"),c7r=o("distilbert"),f7r=o(" \u2014 "),PX=a("a"),m7r=o("FlaxDistilBertForMaskedLM"),g7r=o(" (DistilBERT model)"),h7r=l(),TC=a("li"),k1e=a("strong"),u7r=o("electra"),p7r=o(" \u2014 "),$X=a("a"),_7r=o("FlaxElectraForMaskedLM"),v7r=o(" (ELECTRA model)"),b7r=l(),FC=a("li"),R1e=a("strong"),T7r=o("mbart"),F7r=o(" \u2014 "),IX=a("a"),C7r=o("FlaxMBartForConditionalGeneration"),M7r=o(" (mBART model)"),E7r=l(),CC=a("li"),S1e=a("strong"),y7r=o("roberta"),w7r=o(" \u2014 "),DX=a("a"),A7r=o("FlaxRobertaForMaskedLM"),L7r=o(" (RoBERTa model)"),B7r=l(),MC=a("li"),P1e=a("strong"),x7r=o("roformer"),k7r=o(" \u2014 "),jX=a("a"),R7r=o("FlaxRoFormerForMaskedLM"),S7r=o(" (RoFormer model)"),P7r=l(),$1e=a("p"),$7r=o("Examples:"),I7r=l(),f(lA.$$.fragment),ixe=l(),Kc=a("h2"),EC=a("a"),I1e=a("span"),f(iA.$$.fragment),D7r=l(),D1e=a("span"),j7r=o("FlaxAutoModelForSeq2SeqLM"),dxe=l(),Rr=a("div"),f(dA.$$.fragment),N7r=l(),Zc=a("p"),q7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j1e=a("code"),G7r=o("from_pretrained()"),O7r=o("class method or the "),N1e=a("code"),X7r=o("from_config()"),V7r=o(`class
method.`),z7r=l(),cA=a("p"),W7r=o("This class cannot be instantiated directly using "),q1e=a("code"),Q7r=o("__init__()"),H7r=o(" (throws an error)."),U7r=l(),yt=a("div"),f(fA.$$.fragment),J7r=l(),G1e=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K7r=l(),ef=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),eFr=o("not"),oFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=a("code"),rFr=o("from_pretrained()"),tFr=o("to load the model weights."),aFr=l(),V1e=a("p"),nFr=o("Examples:"),sFr=l(),f(mA.$$.fragment),lFr=l(),xo=a("div"),f(gA.$$.fragment),iFr=l(),z1e=a("p"),dFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cFr=l(),Ln=a("p"),fFr=o("The model class to instantiate is selected based on the "),W1e=a("code"),mFr=o("model_type"),gFr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),hFr=o("pretrained_model_name_or_path"),uFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(":"),vFr=l(),Te=a("ul"),yC=a("li"),U1e=a("strong"),bFr=o("bart"),TFr=o(" \u2014 "),NX=a("a"),FFr=o("FlaxBartForConditionalGeneration"),CFr=o(" (BART model)"),MFr=l(),wC=a("li"),J1e=a("strong"),EFr=o("blenderbot"),yFr=o(" \u2014 "),qX=a("a"),wFr=o("FlaxBlenderbotForConditionalGeneration"),AFr=o(" (Blenderbot model)"),LFr=l(),AC=a("li"),Y1e=a("strong"),BFr=o("blenderbot-small"),xFr=o(" \u2014 "),GX=a("a"),kFr=o("FlaxBlenderbotSmallForConditionalGeneration"),RFr=o(" (BlenderbotSmall model)"),SFr=l(),LC=a("li"),K1e=a("strong"),PFr=o("encoder-decoder"),$Fr=o(" \u2014 "),OX=a("a"),IFr=o("FlaxEncoderDecoderModel"),DFr=o(" (Encoder decoder model)"),jFr=l(),BC=a("li"),Z1e=a("strong"),NFr=o("marian"),qFr=o(" \u2014 "),XX=a("a"),GFr=o("FlaxMarianMTModel"),OFr=o(" (Marian model)"),XFr=l(),xC=a("li"),e4e=a("strong"),VFr=o("mbart"),zFr=o(" \u2014 "),VX=a("a"),WFr=o("FlaxMBartForConditionalGeneration"),QFr=o(" (mBART model)"),HFr=l(),kC=a("li"),o4e=a("strong"),UFr=o("mt5"),JFr=o(" \u2014 "),zX=a("a"),YFr=o("FlaxMT5ForConditionalGeneration"),KFr=o(" (mT5 model)"),ZFr=l(),RC=a("li"),r4e=a("strong"),eCr=o("pegasus"),oCr=o(" \u2014 "),WX=a("a"),rCr=o("FlaxPegasusForConditionalGeneration"),tCr=o(" (Pegasus model)"),aCr=l(),SC=a("li"),t4e=a("strong"),nCr=o("t5"),sCr=o(" \u2014 "),QX=a("a"),lCr=o("FlaxT5ForConditionalGeneration"),iCr=o(" (T5 model)"),dCr=l(),a4e=a("p"),cCr=o("Examples:"),fCr=l(),f(hA.$$.fragment),cxe=l(),of=a("h2"),PC=a("a"),n4e=a("span"),f(uA.$$.fragment),mCr=l(),s4e=a("span"),gCr=o("FlaxAutoModelForSequenceClassification"),fxe=l(),Sr=a("div"),f(pA.$$.fragment),hCr=l(),rf=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),l4e=a("code"),pCr=o("from_pretrained()"),_Cr=o("class method or the "),i4e=a("code"),vCr=o("from_config()"),bCr=o(`class
method.`),TCr=l(),_A=a("p"),FCr=o("This class cannot be instantiated directly using "),d4e=a("code"),CCr=o("__init__()"),MCr=o(" (throws an error)."),ECr=l(),wt=a("div"),f(vA.$$.fragment),yCr=l(),c4e=a("p"),wCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ACr=l(),tf=a("p"),LCr=o(`Note:
Loading a model from its configuration file does `),f4e=a("strong"),BCr=o("not"),xCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m4e=a("code"),kCr=o("from_pretrained()"),RCr=o("to load the model weights."),SCr=l(),g4e=a("p"),PCr=o("Examples:"),$Cr=l(),f(bA.$$.fragment),ICr=l(),ko=a("div"),f(TA.$$.fragment),DCr=l(),h4e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NCr=l(),Bn=a("p"),qCr=o("The model class to instantiate is selected based on the "),u4e=a("code"),GCr=o("model_type"),OCr=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),XCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),zCr=o("pretrained_model_name_or_path"),WCr=o(":"),QCr=l(),Fe=a("ul"),$C=a("li"),v4e=a("strong"),HCr=o("albert"),UCr=o(" \u2014 "),HX=a("a"),JCr=o("FlaxAlbertForSequenceClassification"),YCr=o(" (ALBERT model)"),KCr=l(),IC=a("li"),b4e=a("strong"),ZCr=o("bart"),eMr=o(" \u2014 "),UX=a("a"),oMr=o("FlaxBartForSequenceClassification"),rMr=o(" (BART model)"),tMr=l(),DC=a("li"),T4e=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),JX=a("a"),sMr=o("FlaxBertForSequenceClassification"),lMr=o(" (BERT model)"),iMr=l(),jC=a("li"),F4e=a("strong"),dMr=o("big_bird"),cMr=o(" \u2014 "),YX=a("a"),fMr=o("FlaxBigBirdForSequenceClassification"),mMr=o(" (BigBird model)"),gMr=l(),NC=a("li"),C4e=a("strong"),hMr=o("distilbert"),uMr=o(" \u2014 "),KX=a("a"),pMr=o("FlaxDistilBertForSequenceClassification"),_Mr=o(" (DistilBERT model)"),vMr=l(),qC=a("li"),M4e=a("strong"),bMr=o("electra"),TMr=o(" \u2014 "),ZX=a("a"),FMr=o("FlaxElectraForSequenceClassification"),CMr=o(" (ELECTRA model)"),MMr=l(),GC=a("li"),E4e=a("strong"),EMr=o("mbart"),yMr=o(" \u2014 "),eV=a("a"),wMr=o("FlaxMBartForSequenceClassification"),AMr=o(" (mBART model)"),LMr=l(),OC=a("li"),y4e=a("strong"),BMr=o("roberta"),xMr=o(" \u2014 "),oV=a("a"),kMr=o("FlaxRobertaForSequenceClassification"),RMr=o(" (RoBERTa model)"),SMr=l(),XC=a("li"),w4e=a("strong"),PMr=o("roformer"),$Mr=o(" \u2014 "),rV=a("a"),IMr=o("FlaxRoFormerForSequenceClassification"),DMr=o(" (RoFormer model)"),jMr=l(),A4e=a("p"),NMr=o("Examples:"),qMr=l(),f(FA.$$.fragment),mxe=l(),af=a("h2"),VC=a("a"),L4e=a("span"),f(CA.$$.fragment),GMr=l(),B4e=a("span"),OMr=o("FlaxAutoModelForQuestionAnswering"),gxe=l(),Pr=a("div"),f(MA.$$.fragment),XMr=l(),nf=a("p"),VMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),x4e=a("code"),zMr=o("from_pretrained()"),WMr=o("class method or the "),k4e=a("code"),QMr=o("from_config()"),HMr=o(`class
method.`),UMr=l(),EA=a("p"),JMr=o("This class cannot be instantiated directly using "),R4e=a("code"),YMr=o("__init__()"),KMr=o(" (throws an error)."),ZMr=l(),At=a("div"),f(yA.$$.fragment),eEr=l(),S4e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rEr=l(),sf=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),P4e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$4e=a("code"),sEr=o("from_pretrained()"),lEr=o("to load the model weights."),iEr=l(),I4e=a("p"),dEr=o("Examples:"),cEr=l(),f(wA.$$.fragment),fEr=l(),Ro=a("div"),f(AA.$$.fragment),mEr=l(),D4e=a("p"),gEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hEr=l(),xn=a("p"),uEr=o("The model class to instantiate is selected based on the "),j4e=a("code"),pEr=o("model_type"),_Er=o(` property of the config object (either
passed as an argument or loaded from `),N4e=a("code"),vEr=o("pretrained_model_name_or_path"),bEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=a("code"),TEr=o("pretrained_model_name_or_path"),FEr=o(":"),CEr=l(),Ce=a("ul"),zC=a("li"),G4e=a("strong"),MEr=o("albert"),EEr=o(" \u2014 "),tV=a("a"),yEr=o("FlaxAlbertForQuestionAnswering"),wEr=o(" (ALBERT model)"),AEr=l(),WC=a("li"),O4e=a("strong"),LEr=o("bart"),BEr=o(" \u2014 "),aV=a("a"),xEr=o("FlaxBartForQuestionAnswering"),kEr=o(" (BART model)"),REr=l(),QC=a("li"),X4e=a("strong"),SEr=o("bert"),PEr=o(" \u2014 "),nV=a("a"),$Er=o("FlaxBertForQuestionAnswering"),IEr=o(" (BERT model)"),DEr=l(),HC=a("li"),V4e=a("strong"),jEr=o("big_bird"),NEr=o(" \u2014 "),sV=a("a"),qEr=o("FlaxBigBirdForQuestionAnswering"),GEr=o(" (BigBird model)"),OEr=l(),UC=a("li"),z4e=a("strong"),XEr=o("distilbert"),VEr=o(" \u2014 "),lV=a("a"),zEr=o("FlaxDistilBertForQuestionAnswering"),WEr=o(" (DistilBERT model)"),QEr=l(),JC=a("li"),W4e=a("strong"),HEr=o("electra"),UEr=o(" \u2014 "),iV=a("a"),JEr=o("FlaxElectraForQuestionAnswering"),YEr=o(" (ELECTRA model)"),KEr=l(),YC=a("li"),Q4e=a("strong"),ZEr=o("mbart"),e3r=o(" \u2014 "),dV=a("a"),o3r=o("FlaxMBartForQuestionAnswering"),r3r=o(" (mBART model)"),t3r=l(),KC=a("li"),H4e=a("strong"),a3r=o("roberta"),n3r=o(" \u2014 "),cV=a("a"),s3r=o("FlaxRobertaForQuestionAnswering"),l3r=o(" (RoBERTa model)"),i3r=l(),ZC=a("li"),U4e=a("strong"),d3r=o("roformer"),c3r=o(" \u2014 "),fV=a("a"),f3r=o("FlaxRoFormerForQuestionAnswering"),m3r=o(" (RoFormer model)"),g3r=l(),J4e=a("p"),h3r=o("Examples:"),u3r=l(),f(LA.$$.fragment),hxe=l(),lf=a("h2"),eM=a("a"),Y4e=a("span"),f(BA.$$.fragment),p3r=l(),K4e=a("span"),_3r=o("FlaxAutoModelForTokenClassification"),uxe=l(),$r=a("div"),f(xA.$$.fragment),v3r=l(),df=a("p"),b3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Z4e=a("code"),T3r=o("from_pretrained()"),F3r=o("class method or the "),ebe=a("code"),C3r=o("from_config()"),M3r=o(`class
method.`),E3r=l(),kA=a("p"),y3r=o("This class cannot be instantiated directly using "),obe=a("code"),w3r=o("__init__()"),A3r=o(" (throws an error)."),L3r=l(),Lt=a("div"),f(RA.$$.fragment),B3r=l(),rbe=a("p"),x3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k3r=l(),cf=a("p"),R3r=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),S3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=a("code"),$3r=o("from_pretrained()"),I3r=o("to load the model weights."),D3r=l(),nbe=a("p"),j3r=o("Examples:"),N3r=l(),f(SA.$$.fragment),q3r=l(),So=a("div"),f(PA.$$.fragment),G3r=l(),sbe=a("p"),O3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X3r=l(),kn=a("p"),V3r=o("The model class to instantiate is selected based on the "),lbe=a("code"),z3r=o("model_type"),W3r=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),Q3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),so=a("ul"),oM=a("li"),cbe=a("strong"),K3r=o("albert"),Z3r=o(" \u2014 "),mV=a("a"),e5r=o("FlaxAlbertForTokenClassification"),o5r=o(" (ALBERT model)"),r5r=l(),rM=a("li"),fbe=a("strong"),t5r=o("bert"),a5r=o(" \u2014 "),gV=a("a"),n5r=o("FlaxBertForTokenClassification"),s5r=o(" (BERT model)"),l5r=l(),tM=a("li"),mbe=a("strong"),i5r=o("big_bird"),d5r=o(" \u2014 "),hV=a("a"),c5r=o("FlaxBigBirdForTokenClassification"),f5r=o(" (BigBird model)"),m5r=l(),aM=a("li"),gbe=a("strong"),g5r=o("distilbert"),h5r=o(" \u2014 "),uV=a("a"),u5r=o("FlaxDistilBertForTokenClassification"),p5r=o(" (DistilBERT model)"),_5r=l(),nM=a("li"),hbe=a("strong"),v5r=o("electra"),b5r=o(" \u2014 "),pV=a("a"),T5r=o("FlaxElectraForTokenClassification"),F5r=o(" (ELECTRA model)"),C5r=l(),sM=a("li"),ube=a("strong"),M5r=o("roberta"),E5r=o(" \u2014 "),_V=a("a"),y5r=o("FlaxRobertaForTokenClassification"),w5r=o(" (RoBERTa model)"),A5r=l(),lM=a("li"),pbe=a("strong"),L5r=o("roformer"),B5r=o(" \u2014 "),vV=a("a"),x5r=o("FlaxRoFormerForTokenClassification"),k5r=o(" (RoFormer model)"),R5r=l(),_be=a("p"),S5r=o("Examples:"),P5r=l(),f($A.$$.fragment),pxe=l(),ff=a("h2"),iM=a("a"),vbe=a("span"),f(IA.$$.fragment),$5r=l(),bbe=a("span"),I5r=o("FlaxAutoModelForMultipleChoice"),_xe=l(),Ir=a("div"),f(DA.$$.fragment),D5r=l(),mf=a("p"),j5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tbe=a("code"),N5r=o("from_pretrained()"),q5r=o("class method or the "),Fbe=a("code"),G5r=o("from_config()"),O5r=o(`class
method.`),X5r=l(),jA=a("p"),V5r=o("This class cannot be instantiated directly using "),Cbe=a("code"),z5r=o("__init__()"),W5r=o(" (throws an error)."),Q5r=l(),Bt=a("div"),f(NA.$$.fragment),H5r=l(),Mbe=a("p"),U5r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J5r=l(),gf=a("p"),Y5r=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),K5r=o("not"),Z5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=a("code"),eyr=o("from_pretrained()"),oyr=o("to load the model weights."),ryr=l(),wbe=a("p"),tyr=o("Examples:"),ayr=l(),f(qA.$$.fragment),nyr=l(),Po=a("div"),f(GA.$$.fragment),syr=l(),Abe=a("p"),lyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iyr=l(),Rn=a("p"),dyr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),cyr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),hyr=o("pretrained_model_name_or_path"),uyr=o(":"),pyr=l(),lo=a("ul"),dM=a("li"),kbe=a("strong"),_yr=o("albert"),vyr=o(" \u2014 "),bV=a("a"),byr=o("FlaxAlbertForMultipleChoice"),Tyr=o(" (ALBERT model)"),Fyr=l(),cM=a("li"),Rbe=a("strong"),Cyr=o("bert"),Myr=o(" \u2014 "),TV=a("a"),Eyr=o("FlaxBertForMultipleChoice"),yyr=o(" (BERT model)"),wyr=l(),fM=a("li"),Sbe=a("strong"),Ayr=o("big_bird"),Lyr=o(" \u2014 "),FV=a("a"),Byr=o("FlaxBigBirdForMultipleChoice"),xyr=o(" (BigBird model)"),kyr=l(),mM=a("li"),Pbe=a("strong"),Ryr=o("distilbert"),Syr=o(" \u2014 "),CV=a("a"),Pyr=o("FlaxDistilBertForMultipleChoice"),$yr=o(" (DistilBERT model)"),Iyr=l(),gM=a("li"),$be=a("strong"),Dyr=o("electra"),jyr=o(" \u2014 "),MV=a("a"),Nyr=o("FlaxElectraForMultipleChoice"),qyr=o(" (ELECTRA model)"),Gyr=l(),hM=a("li"),Ibe=a("strong"),Oyr=o("roberta"),Xyr=o(" \u2014 "),EV=a("a"),Vyr=o("FlaxRobertaForMultipleChoice"),zyr=o(" (RoBERTa model)"),Wyr=l(),uM=a("li"),Dbe=a("strong"),Qyr=o("roformer"),Hyr=o(" \u2014 "),yV=a("a"),Uyr=o("FlaxRoFormerForMultipleChoice"),Jyr=o(" (RoFormer model)"),Yyr=l(),jbe=a("p"),Kyr=o("Examples:"),Zyr=l(),f(OA.$$.fragment),vxe=l(),hf=a("h2"),pM=a("a"),Nbe=a("span"),f(XA.$$.fragment),ewr=l(),qbe=a("span"),owr=o("FlaxAutoModelForNextSentencePrediction"),bxe=l(),Dr=a("div"),f(VA.$$.fragment),rwr=l(),uf=a("p"),twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gbe=a("code"),awr=o("from_pretrained()"),nwr=o("class method or the "),Obe=a("code"),swr=o("from_config()"),lwr=o(`class
method.`),iwr=l(),zA=a("p"),dwr=o("This class cannot be instantiated directly using "),Xbe=a("code"),cwr=o("__init__()"),fwr=o(" (throws an error)."),mwr=l(),xt=a("div"),f(WA.$$.fragment),gwr=l(),Vbe=a("p"),hwr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uwr=l(),pf=a("p"),pwr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),_wr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=a("code"),bwr=o("from_pretrained()"),Twr=o("to load the model weights."),Fwr=l(),Qbe=a("p"),Cwr=o("Examples:"),Mwr=l(),f(QA.$$.fragment),Ewr=l(),$o=a("div"),f(HA.$$.fragment),ywr=l(),Hbe=a("p"),wwr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Awr=l(),Sn=a("p"),Lwr=o("The model class to instantiate is selected based on the "),Ube=a("code"),Bwr=o("model_type"),xwr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),kwr=o("pretrained_model_name_or_path"),Rwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),Swr=o("pretrained_model_name_or_path"),Pwr=o(":"),$wr=l(),Kbe=a("ul"),_M=a("li"),Zbe=a("strong"),Iwr=o("bert"),Dwr=o(" \u2014 "),wV=a("a"),jwr=o("FlaxBertForNextSentencePrediction"),Nwr=o(" (BERT model)"),qwr=l(),e2e=a("p"),Gwr=o("Examples:"),Owr=l(),f(UA.$$.fragment),Txe=l(),_f=a("h2"),vM=a("a"),o2e=a("span"),f(JA.$$.fragment),Xwr=l(),r2e=a("span"),Vwr=o("FlaxAutoModelForImageClassification"),Fxe=l(),jr=a("div"),f(YA.$$.fragment),zwr=l(),vf=a("p"),Wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),t2e=a("code"),Qwr=o("from_pretrained()"),Hwr=o("class method or the "),a2e=a("code"),Uwr=o("from_config()"),Jwr=o(`class
method.`),Ywr=l(),KA=a("p"),Kwr=o("This class cannot be instantiated directly using "),n2e=a("code"),Zwr=o("__init__()"),e6r=o(" (throws an error)."),o6r=l(),kt=a("div"),f(ZA.$$.fragment),r6r=l(),s2e=a("p"),t6r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a6r=l(),bf=a("p"),n6r=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),s6r=o("not"),l6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=a("code"),i6r=o("from_pretrained()"),d6r=o("to load the model weights."),c6r=l(),d2e=a("p"),f6r=o("Examples:"),m6r=l(),f(eL.$$.fragment),g6r=l(),Io=a("div"),f(oL.$$.fragment),h6r=l(),c2e=a("p"),u6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p6r=l(),Pn=a("p"),_6r=o("The model class to instantiate is selected based on the "),f2e=a("code"),v6r=o("model_type"),b6r=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),T6r=o("pretrained_model_name_or_path"),F6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),C6r=o("pretrained_model_name_or_path"),M6r=o(":"),E6r=l(),rL=a("ul"),bM=a("li"),h2e=a("strong"),y6r=o("beit"),w6r=o(" \u2014 "),AV=a("a"),A6r=o("FlaxBeitForImageClassification"),L6r=o(" (BEiT model)"),B6r=l(),TM=a("li"),u2e=a("strong"),x6r=o("vit"),k6r=o(" \u2014 "),LV=a("a"),R6r=o("FlaxViTForImageClassification"),S6r=o(" (ViT model)"),P6r=l(),p2e=a("p"),$6r=o("Examples:"),I6r=l(),f(tL.$$.fragment),Cxe=l(),Tf=a("h2"),FM=a("a"),_2e=a("span"),f(aL.$$.fragment),D6r=l(),v2e=a("span"),j6r=o("FlaxAutoModelForVision2Seq"),Mxe=l(),Nr=a("div"),f(nL.$$.fragment),N6r=l(),Ff=a("p"),q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),b2e=a("code"),G6r=o("from_pretrained()"),O6r=o("class method or the "),T2e=a("code"),X6r=o("from_config()"),V6r=o(`class
method.`),z6r=l(),sL=a("p"),W6r=o("This class cannot be instantiated directly using "),F2e=a("code"),Q6r=o("__init__()"),H6r=o(" (throws an error)."),U6r=l(),Rt=a("div"),f(lL.$$.fragment),J6r=l(),C2e=a("p"),Y6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K6r=l(),Cf=a("p"),Z6r=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),eAr=o("not"),oAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=a("code"),rAr=o("from_pretrained()"),tAr=o("to load the model weights."),aAr=l(),y2e=a("p"),nAr=o("Examples:"),sAr=l(),f(iL.$$.fragment),lAr=l(),Do=a("div"),f(dL.$$.fragment),iAr=l(),w2e=a("p"),dAr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cAr=l(),$n=a("p"),fAr=o("The model class to instantiate is selected based on the "),A2e=a("code"),mAr=o("model_type"),gAr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),hAr=o("pretrained_model_name_or_path"),uAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),pAr=o("pretrained_model_name_or_path"),_Ar=o(":"),vAr=l(),x2e=a("ul"),CM=a("li"),k2e=a("strong"),bAr=o("vision-encoder-decoder"),TAr=o(" \u2014 "),BV=a("a"),FAr=o("FlaxVisionEncoderDecoderModel"),CAr=o(" (Vision Encoder decoder model)"),MAr=l(),R2e=a("p"),EAr=o("Examples:"),yAr=l(),f(cL.$$.fragment),this.h()},l(c){const _=g4t('[data-svelte="svelte-1phssyn"]',document.head);J=n(_,"META",{name:!0,content:!0}),_.forEach(t),Be=i(c),ie=n(c,"H1",{class:!0});var fL=s(ie);me=n(fL,"A",{id:!0,class:!0,href:!0});var S2e=s(me);no=n(S2e,"SPAN",{});var P2e=s(no);m(ce.$$.fragment,P2e),P2e.forEach(t),S2e.forEach(t),_e=i(fL),Go=n(fL,"SPAN",{});var AAr=s(Go);Li=r(AAr,"Auto Classes"),AAr.forEach(t),fL.forEach(t),Ef=i(c),sa=n(c,"P",{});var yxe=s(sa);Bi=r(yxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(yxe,"CODE",{});var LAr=s(xi);CE=r(LAr,"from_pretrained()"),LAr.forEach(t),yf=r(yxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yxe.forEach(t),ye=i(c),io=n(c,"P",{});var MM=s(io);ki=r(MM,"Instantiating one of "),In=n(MM,"A",{href:!0});var BAr=s(In);ME=r(BAr,"AutoConfig"),BAr.forEach(t),Dn=r(MM,", "),jn=n(MM,"A",{href:!0});var xAr=s(jn);EE=r(xAr,"AutoModel"),xAr.forEach(t),Ri=r(MM,`, and
`),Nn=n(MM,"A",{href:!0});var kAr=s(Nn);yE=r(kAr,"AutoTokenizer"),kAr.forEach(t),Si=r(MM," will directly create a class of the relevant architecture. For instance"),MM.forEach(t),wf=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var wxe=s(ge);l8=r(wxe,"will create a model that is an instance of "),Pi=n(wxe,"A",{href:!0});var RAr=s(Pi);i8=r(RAr,"BertModel"),RAr.forEach(t),d8=r(wxe,"."),wxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var Axe=s(Ia);c8=r(Axe,"There is one class of "),Af=n(Axe,"CODE",{});var SAr=s(Af);f8=r(SAr,"AutoModel"),SAr.forEach(t),$Re=r(Axe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Axe.forEach(t),y9e=i(c),$i=n(c,"H2",{class:!0});var Lxe=s($i);Lf=n(Lxe,"A",{id:!0,class:!0,href:!0});var PAr=s(Lf);TW=n(PAr,"SPAN",{});var $Ar=s(TW);m(wE.$$.fragment,$Ar),$Ar.forEach(t),PAr.forEach(t),IRe=i(Lxe),FW=n(Lxe,"SPAN",{});var IAr=s(FW);DRe=r(IAr,"Extending the Auto Classes"),IAr.forEach(t),Lxe.forEach(t),w9e=i(c),qn=n(c,"P",{});var xV=s(qn);jRe=r(xV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=n(xV,"CODE",{});var DAr=s(CW);NRe=r(DAr,"NewModel"),DAr.forEach(t),qRe=r(xV,", make sure you have a "),MW=n(xV,"CODE",{});var jAr=s(MW);GRe=r(jAr,"NewModelConfig"),jAr.forEach(t),ORe=r(xV,` then you can add those to the auto
classes like this:`),xV.forEach(t),A9e=i(c),m(AE.$$.fragment,c),L9e=i(c),m8=n(c,"P",{});var NAr=s(m8);XRe=r(NAr,"You will then be able to use the auto classes like you would usually do!"),NAr.forEach(t),B9e=i(c),m(Bf.$$.fragment,c),x9e=i(c),Ii=n(c,"H2",{class:!0});var Bxe=s(Ii);xf=n(Bxe,"A",{id:!0,class:!0,href:!0});var qAr=s(xf);EW=n(qAr,"SPAN",{});var GAr=s(EW);m(LE.$$.fragment,GAr),GAr.forEach(t),qAr.forEach(t),VRe=i(Bxe),yW=n(Bxe,"SPAN",{});var OAr=s(yW);zRe=r(OAr,"AutoConfig"),OAr.forEach(t),Bxe.forEach(t),k9e=i(c),Xo=n(c,"DIV",{class:!0});var Is=s(Xo);m(BE.$$.fragment,Is),WRe=i(Is),xE=n(Is,"P",{});var xxe=s(xE);QRe=r(xxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g8=n(xxe,"A",{href:!0});var XAr=s(g8);HRe=r(XAr,"from_pretrained()"),XAr.forEach(t),URe=r(xxe," class method."),xxe.forEach(t),JRe=i(Is),kE=n(Is,"P",{});var kxe=s(kE);YRe=r(kxe,"This class cannot be instantiated directly using "),wW=n(kxe,"CODE",{});var VAr=s(wW);KRe=r(VAr,"__init__()"),VAr.forEach(t),ZRe=r(kxe," (throws an error)."),kxe.forEach(t),eSe=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(RE.$$.fragment,ia),oSe=i(ia),AW=n(ia,"P",{});var zAr=s(AW);rSe=r(zAr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zAr.forEach(t),tSe=i(ia),Di=n(ia,"P",{});var kV=s(Di);aSe=r(kV,"The configuration class to instantiate is selected based on the "),LW=n(kV,"CODE",{});var WAr=s(LW);nSe=r(WAr,"model_type"),WAr.forEach(t),sSe=r(kV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=n(kV,"CODE",{});var QAr=s(BW);lSe=r(QAr,"pretrained_model_name_or_path"),QAr.forEach(t),iSe=r(kV,":"),kV.forEach(t),dSe=i(ia),b=n(ia,"UL",{});var T=s(b);kf=n(T,"LI",{});var $2e=s(kf);xW=n($2e,"STRONG",{});var HAr=s(xW);cSe=r(HAr,"albert"),HAr.forEach(t),fSe=r($2e," \u2014 "),h8=n($2e,"A",{href:!0});var UAr=s(h8);mSe=r(UAr,"AlbertConfig"),UAr.forEach(t),gSe=r($2e," (ALBERT model)"),$2e.forEach(t),hSe=i(T),Rf=n(T,"LI",{});var I2e=s(Rf);kW=n(I2e,"STRONG",{});var JAr=s(kW);uSe=r(JAr,"bart"),JAr.forEach(t),pSe=r(I2e," \u2014 "),u8=n(I2e,"A",{href:!0});var YAr=s(u8);_Se=r(YAr,"BartConfig"),YAr.forEach(t),vSe=r(I2e," (BART model)"),I2e.forEach(t),bSe=i(T),Sf=n(T,"LI",{});var D2e=s(Sf);RW=n(D2e,"STRONG",{});var KAr=s(RW);TSe=r(KAr,"beit"),KAr.forEach(t),FSe=r(D2e," \u2014 "),p8=n(D2e,"A",{href:!0});var ZAr=s(p8);CSe=r(ZAr,"BeitConfig"),ZAr.forEach(t),MSe=r(D2e," (BEiT model)"),D2e.forEach(t),ESe=i(T),Pf=n(T,"LI",{});var j2e=s(Pf);SW=n(j2e,"STRONG",{});var eLr=s(SW);ySe=r(eLr,"bert"),eLr.forEach(t),wSe=r(j2e," \u2014 "),_8=n(j2e,"A",{href:!0});var oLr=s(_8);ASe=r(oLr,"BertConfig"),oLr.forEach(t),LSe=r(j2e," (BERT model)"),j2e.forEach(t),BSe=i(T),$f=n(T,"LI",{});var N2e=s($f);PW=n(N2e,"STRONG",{});var rLr=s(PW);xSe=r(rLr,"bert-generation"),rLr.forEach(t),kSe=r(N2e," \u2014 "),v8=n(N2e,"A",{href:!0});var tLr=s(v8);RSe=r(tLr,"BertGenerationConfig"),tLr.forEach(t),SSe=r(N2e," (Bert Generation model)"),N2e.forEach(t),PSe=i(T),If=n(T,"LI",{});var q2e=s(If);$W=n(q2e,"STRONG",{});var aLr=s($W);$Se=r(aLr,"big_bird"),aLr.forEach(t),ISe=r(q2e," \u2014 "),b8=n(q2e,"A",{href:!0});var nLr=s(b8);DSe=r(nLr,"BigBirdConfig"),nLr.forEach(t),jSe=r(q2e," (BigBird model)"),q2e.forEach(t),NSe=i(T),Df=n(T,"LI",{});var G2e=s(Df);IW=n(G2e,"STRONG",{});var sLr=s(IW);qSe=r(sLr,"bigbird_pegasus"),sLr.forEach(t),GSe=r(G2e," \u2014 "),T8=n(G2e,"A",{href:!0});var lLr=s(T8);OSe=r(lLr,"BigBirdPegasusConfig"),lLr.forEach(t),XSe=r(G2e," (BigBirdPegasus model)"),G2e.forEach(t),VSe=i(T),jf=n(T,"LI",{});var O2e=s(jf);DW=n(O2e,"STRONG",{});var iLr=s(DW);zSe=r(iLr,"blenderbot"),iLr.forEach(t),WSe=r(O2e," \u2014 "),F8=n(O2e,"A",{href:!0});var dLr=s(F8);QSe=r(dLr,"BlenderbotConfig"),dLr.forEach(t),HSe=r(O2e," (Blenderbot model)"),O2e.forEach(t),USe=i(T),Nf=n(T,"LI",{});var X2e=s(Nf);jW=n(X2e,"STRONG",{});var cLr=s(jW);JSe=r(cLr,"blenderbot-small"),cLr.forEach(t),YSe=r(X2e," \u2014 "),C8=n(X2e,"A",{href:!0});var fLr=s(C8);KSe=r(fLr,"BlenderbotSmallConfig"),fLr.forEach(t),ZSe=r(X2e," (BlenderbotSmall model)"),X2e.forEach(t),ePe=i(T),qf=n(T,"LI",{});var V2e=s(qf);NW=n(V2e,"STRONG",{});var mLr=s(NW);oPe=r(mLr,"camembert"),mLr.forEach(t),rPe=r(V2e," \u2014 "),M8=n(V2e,"A",{href:!0});var gLr=s(M8);tPe=r(gLr,"CamembertConfig"),gLr.forEach(t),aPe=r(V2e," (CamemBERT model)"),V2e.forEach(t),nPe=i(T),Gf=n(T,"LI",{});var z2e=s(Gf);qW=n(z2e,"STRONG",{});var hLr=s(qW);sPe=r(hLr,"canine"),hLr.forEach(t),lPe=r(z2e," \u2014 "),E8=n(z2e,"A",{href:!0});var uLr=s(E8);iPe=r(uLr,"CanineConfig"),uLr.forEach(t),dPe=r(z2e," (Canine model)"),z2e.forEach(t),cPe=i(T),Of=n(T,"LI",{});var W2e=s(Of);GW=n(W2e,"STRONG",{});var pLr=s(GW);fPe=r(pLr,"clip"),pLr.forEach(t),mPe=r(W2e," \u2014 "),y8=n(W2e,"A",{href:!0});var _Lr=s(y8);gPe=r(_Lr,"CLIPConfig"),_Lr.forEach(t),hPe=r(W2e," (CLIP model)"),W2e.forEach(t),uPe=i(T),Xf=n(T,"LI",{});var Q2e=s(Xf);OW=n(Q2e,"STRONG",{});var vLr=s(OW);pPe=r(vLr,"convbert"),vLr.forEach(t),_Pe=r(Q2e," \u2014 "),w8=n(Q2e,"A",{href:!0});var bLr=s(w8);vPe=r(bLr,"ConvBertConfig"),bLr.forEach(t),bPe=r(Q2e," (ConvBERT model)"),Q2e.forEach(t),TPe=i(T),Vf=n(T,"LI",{});var H2e=s(Vf);XW=n(H2e,"STRONG",{});var TLr=s(XW);FPe=r(TLr,"convnext"),TLr.forEach(t),CPe=r(H2e," \u2014 "),A8=n(H2e,"A",{href:!0});var FLr=s(A8);MPe=r(FLr,"ConvNextConfig"),FLr.forEach(t),EPe=r(H2e," (ConvNext model)"),H2e.forEach(t),yPe=i(T),zf=n(T,"LI",{});var U2e=s(zf);VW=n(U2e,"STRONG",{});var CLr=s(VW);wPe=r(CLr,"ctrl"),CLr.forEach(t),APe=r(U2e," \u2014 "),L8=n(U2e,"A",{href:!0});var MLr=s(L8);LPe=r(MLr,"CTRLConfig"),MLr.forEach(t),BPe=r(U2e," (CTRL model)"),U2e.forEach(t),xPe=i(T),Wf=n(T,"LI",{});var J2e=s(Wf);zW=n(J2e,"STRONG",{});var ELr=s(zW);kPe=r(ELr,"data2vec-audio"),ELr.forEach(t),RPe=r(J2e," \u2014 "),B8=n(J2e,"A",{href:!0});var yLr=s(B8);SPe=r(yLr,"Data2VecAudioConfig"),yLr.forEach(t),PPe=r(J2e," (Data2VecAudio model)"),J2e.forEach(t),$Pe=i(T),Qf=n(T,"LI",{});var Y2e=s(Qf);WW=n(Y2e,"STRONG",{});var wLr=s(WW);IPe=r(wLr,"data2vec-text"),wLr.forEach(t),DPe=r(Y2e," \u2014 "),x8=n(Y2e,"A",{href:!0});var ALr=s(x8);jPe=r(ALr,"Data2VecTextConfig"),ALr.forEach(t),NPe=r(Y2e," (Data2VecText model)"),Y2e.forEach(t),qPe=i(T),Hf=n(T,"LI",{});var K2e=s(Hf);QW=n(K2e,"STRONG",{});var LLr=s(QW);GPe=r(LLr,"deberta"),LLr.forEach(t),OPe=r(K2e," \u2014 "),k8=n(K2e,"A",{href:!0});var BLr=s(k8);XPe=r(BLr,"DebertaConfig"),BLr.forEach(t),VPe=r(K2e," (DeBERTa model)"),K2e.forEach(t),zPe=i(T),Uf=n(T,"LI",{});var Z2e=s(Uf);HW=n(Z2e,"STRONG",{});var xLr=s(HW);WPe=r(xLr,"deberta-v2"),xLr.forEach(t),QPe=r(Z2e," \u2014 "),R8=n(Z2e,"A",{href:!0});var kLr=s(R8);HPe=r(kLr,"DebertaV2Config"),kLr.forEach(t),UPe=r(Z2e," (DeBERTa-v2 model)"),Z2e.forEach(t),JPe=i(T),Jf=n(T,"LI",{});var e0e=s(Jf);UW=n(e0e,"STRONG",{});var RLr=s(UW);YPe=r(RLr,"deit"),RLr.forEach(t),KPe=r(e0e," \u2014 "),S8=n(e0e,"A",{href:!0});var SLr=s(S8);ZPe=r(SLr,"DeiTConfig"),SLr.forEach(t),e$e=r(e0e," (DeiT model)"),e0e.forEach(t),o$e=i(T),Yf=n(T,"LI",{});var o0e=s(Yf);JW=n(o0e,"STRONG",{});var PLr=s(JW);r$e=r(PLr,"detr"),PLr.forEach(t),t$e=r(o0e," \u2014 "),P8=n(o0e,"A",{href:!0});var $Lr=s(P8);a$e=r($Lr,"DetrConfig"),$Lr.forEach(t),n$e=r(o0e," (DETR model)"),o0e.forEach(t),s$e=i(T),Kf=n(T,"LI",{});var r0e=s(Kf);YW=n(r0e,"STRONG",{});var ILr=s(YW);l$e=r(ILr,"distilbert"),ILr.forEach(t),i$e=r(r0e," \u2014 "),$8=n(r0e,"A",{href:!0});var DLr=s($8);d$e=r(DLr,"DistilBertConfig"),DLr.forEach(t),c$e=r(r0e," (DistilBERT model)"),r0e.forEach(t),f$e=i(T),Zf=n(T,"LI",{});var t0e=s(Zf);KW=n(t0e,"STRONG",{});var jLr=s(KW);m$e=r(jLr,"dpr"),jLr.forEach(t),g$e=r(t0e," \u2014 "),I8=n(t0e,"A",{href:!0});var NLr=s(I8);h$e=r(NLr,"DPRConfig"),NLr.forEach(t),u$e=r(t0e," (DPR model)"),t0e.forEach(t),p$e=i(T),em=n(T,"LI",{});var a0e=s(em);ZW=n(a0e,"STRONG",{});var qLr=s(ZW);_$e=r(qLr,"electra"),qLr.forEach(t),v$e=r(a0e," \u2014 "),D8=n(a0e,"A",{href:!0});var GLr=s(D8);b$e=r(GLr,"ElectraConfig"),GLr.forEach(t),T$e=r(a0e," (ELECTRA model)"),a0e.forEach(t),F$e=i(T),om=n(T,"LI",{});var n0e=s(om);eQ=n(n0e,"STRONG",{});var OLr=s(eQ);C$e=r(OLr,"encoder-decoder"),OLr.forEach(t),M$e=r(n0e," \u2014 "),j8=n(n0e,"A",{href:!0});var XLr=s(j8);E$e=r(XLr,"EncoderDecoderConfig"),XLr.forEach(t),y$e=r(n0e," (Encoder decoder model)"),n0e.forEach(t),w$e=i(T),rm=n(T,"LI",{});var s0e=s(rm);oQ=n(s0e,"STRONG",{});var VLr=s(oQ);A$e=r(VLr,"flaubert"),VLr.forEach(t),L$e=r(s0e," \u2014 "),N8=n(s0e,"A",{href:!0});var zLr=s(N8);B$e=r(zLr,"FlaubertConfig"),zLr.forEach(t),x$e=r(s0e," (FlauBERT model)"),s0e.forEach(t),k$e=i(T),tm=n(T,"LI",{});var l0e=s(tm);rQ=n(l0e,"STRONG",{});var WLr=s(rQ);R$e=r(WLr,"fnet"),WLr.forEach(t),S$e=r(l0e," \u2014 "),q8=n(l0e,"A",{href:!0});var QLr=s(q8);P$e=r(QLr,"FNetConfig"),QLr.forEach(t),$$e=r(l0e," (FNet model)"),l0e.forEach(t),I$e=i(T),am=n(T,"LI",{});var i0e=s(am);tQ=n(i0e,"STRONG",{});var HLr=s(tQ);D$e=r(HLr,"fsmt"),HLr.forEach(t),j$e=r(i0e," \u2014 "),G8=n(i0e,"A",{href:!0});var ULr=s(G8);N$e=r(ULr,"FSMTConfig"),ULr.forEach(t),q$e=r(i0e," (FairSeq Machine-Translation model)"),i0e.forEach(t),G$e=i(T),nm=n(T,"LI",{});var d0e=s(nm);aQ=n(d0e,"STRONG",{});var JLr=s(aQ);O$e=r(JLr,"funnel"),JLr.forEach(t),X$e=r(d0e," \u2014 "),O8=n(d0e,"A",{href:!0});var YLr=s(O8);V$e=r(YLr,"FunnelConfig"),YLr.forEach(t),z$e=r(d0e," (Funnel Transformer model)"),d0e.forEach(t),W$e=i(T),sm=n(T,"LI",{});var c0e=s(sm);nQ=n(c0e,"STRONG",{});var KLr=s(nQ);Q$e=r(KLr,"gpt2"),KLr.forEach(t),H$e=r(c0e," \u2014 "),X8=n(c0e,"A",{href:!0});var ZLr=s(X8);U$e=r(ZLr,"GPT2Config"),ZLr.forEach(t),J$e=r(c0e," (OpenAI GPT-2 model)"),c0e.forEach(t),Y$e=i(T),lm=n(T,"LI",{});var f0e=s(lm);sQ=n(f0e,"STRONG",{});var e8r=s(sQ);K$e=r(e8r,"gpt_neo"),e8r.forEach(t),Z$e=r(f0e," \u2014 "),V8=n(f0e,"A",{href:!0});var o8r=s(V8);eIe=r(o8r,"GPTNeoConfig"),o8r.forEach(t),oIe=r(f0e," (GPT Neo model)"),f0e.forEach(t),rIe=i(T),im=n(T,"LI",{});var m0e=s(im);lQ=n(m0e,"STRONG",{});var r8r=s(lQ);tIe=r(r8r,"gptj"),r8r.forEach(t),aIe=r(m0e," \u2014 "),z8=n(m0e,"A",{href:!0});var t8r=s(z8);nIe=r(t8r,"GPTJConfig"),t8r.forEach(t),sIe=r(m0e," (GPT-J model)"),m0e.forEach(t),lIe=i(T),dm=n(T,"LI",{});var g0e=s(dm);iQ=n(g0e,"STRONG",{});var a8r=s(iQ);iIe=r(a8r,"hubert"),a8r.forEach(t),dIe=r(g0e," \u2014 "),W8=n(g0e,"A",{href:!0});var n8r=s(W8);cIe=r(n8r,"HubertConfig"),n8r.forEach(t),fIe=r(g0e," (Hubert model)"),g0e.forEach(t),mIe=i(T),cm=n(T,"LI",{});var h0e=s(cm);dQ=n(h0e,"STRONG",{});var s8r=s(dQ);gIe=r(s8r,"ibert"),s8r.forEach(t),hIe=r(h0e," \u2014 "),Q8=n(h0e,"A",{href:!0});var l8r=s(Q8);uIe=r(l8r,"IBertConfig"),l8r.forEach(t),pIe=r(h0e," (I-BERT model)"),h0e.forEach(t),_Ie=i(T),fm=n(T,"LI",{});var u0e=s(fm);cQ=n(u0e,"STRONG",{});var i8r=s(cQ);vIe=r(i8r,"imagegpt"),i8r.forEach(t),bIe=r(u0e," \u2014 "),H8=n(u0e,"A",{href:!0});var d8r=s(H8);TIe=r(d8r,"ImageGPTConfig"),d8r.forEach(t),FIe=r(u0e," (ImageGPT model)"),u0e.forEach(t),CIe=i(T),mm=n(T,"LI",{});var p0e=s(mm);fQ=n(p0e,"STRONG",{});var c8r=s(fQ);MIe=r(c8r,"layoutlm"),c8r.forEach(t),EIe=r(p0e," \u2014 "),U8=n(p0e,"A",{href:!0});var f8r=s(U8);yIe=r(f8r,"LayoutLMConfig"),f8r.forEach(t),wIe=r(p0e," (LayoutLM model)"),p0e.forEach(t),AIe=i(T),gm=n(T,"LI",{});var _0e=s(gm);mQ=n(_0e,"STRONG",{});var m8r=s(mQ);LIe=r(m8r,"layoutlmv2"),m8r.forEach(t),BIe=r(_0e," \u2014 "),J8=n(_0e,"A",{href:!0});var g8r=s(J8);xIe=r(g8r,"LayoutLMv2Config"),g8r.forEach(t),kIe=r(_0e," (LayoutLMv2 model)"),_0e.forEach(t),RIe=i(T),hm=n(T,"LI",{});var v0e=s(hm);gQ=n(v0e,"STRONG",{});var h8r=s(gQ);SIe=r(h8r,"led"),h8r.forEach(t),PIe=r(v0e," \u2014 "),Y8=n(v0e,"A",{href:!0});var u8r=s(Y8);$Ie=r(u8r,"LEDConfig"),u8r.forEach(t),IIe=r(v0e," (LED model)"),v0e.forEach(t),DIe=i(T),um=n(T,"LI",{});var b0e=s(um);hQ=n(b0e,"STRONG",{});var p8r=s(hQ);jIe=r(p8r,"longformer"),p8r.forEach(t),NIe=r(b0e," \u2014 "),K8=n(b0e,"A",{href:!0});var _8r=s(K8);qIe=r(_8r,"LongformerConfig"),_8r.forEach(t),GIe=r(b0e," (Longformer model)"),b0e.forEach(t),OIe=i(T),pm=n(T,"LI",{});var T0e=s(pm);uQ=n(T0e,"STRONG",{});var v8r=s(uQ);XIe=r(v8r,"luke"),v8r.forEach(t),VIe=r(T0e," \u2014 "),Z8=n(T0e,"A",{href:!0});var b8r=s(Z8);zIe=r(b8r,"LukeConfig"),b8r.forEach(t),WIe=r(T0e," (LUKE model)"),T0e.forEach(t),QIe=i(T),_m=n(T,"LI",{});var F0e=s(_m);pQ=n(F0e,"STRONG",{});var T8r=s(pQ);HIe=r(T8r,"lxmert"),T8r.forEach(t),UIe=r(F0e," \u2014 "),e9=n(F0e,"A",{href:!0});var F8r=s(e9);JIe=r(F8r,"LxmertConfig"),F8r.forEach(t),YIe=r(F0e," (LXMERT model)"),F0e.forEach(t),KIe=i(T),vm=n(T,"LI",{});var C0e=s(vm);_Q=n(C0e,"STRONG",{});var C8r=s(_Q);ZIe=r(C8r,"m2m_100"),C8r.forEach(t),eDe=r(C0e," \u2014 "),o9=n(C0e,"A",{href:!0});var M8r=s(o9);oDe=r(M8r,"M2M100Config"),M8r.forEach(t),rDe=r(C0e," (M2M100 model)"),C0e.forEach(t),tDe=i(T),bm=n(T,"LI",{});var M0e=s(bm);vQ=n(M0e,"STRONG",{});var E8r=s(vQ);aDe=r(E8r,"marian"),E8r.forEach(t),nDe=r(M0e," \u2014 "),r9=n(M0e,"A",{href:!0});var y8r=s(r9);sDe=r(y8r,"MarianConfig"),y8r.forEach(t),lDe=r(M0e," (Marian model)"),M0e.forEach(t),iDe=i(T),Tm=n(T,"LI",{});var E0e=s(Tm);bQ=n(E0e,"STRONG",{});var w8r=s(bQ);dDe=r(w8r,"maskformer"),w8r.forEach(t),cDe=r(E0e," \u2014 "),t9=n(E0e,"A",{href:!0});var A8r=s(t9);fDe=r(A8r,"MaskFormerConfig"),A8r.forEach(t),mDe=r(E0e," (MaskFormer model)"),E0e.forEach(t),gDe=i(T),Fm=n(T,"LI",{});var y0e=s(Fm);TQ=n(y0e,"STRONG",{});var L8r=s(TQ);hDe=r(L8r,"mbart"),L8r.forEach(t),uDe=r(y0e," \u2014 "),a9=n(y0e,"A",{href:!0});var B8r=s(a9);pDe=r(B8r,"MBartConfig"),B8r.forEach(t),_De=r(y0e," (mBART model)"),y0e.forEach(t),vDe=i(T),Cm=n(T,"LI",{});var w0e=s(Cm);FQ=n(w0e,"STRONG",{});var x8r=s(FQ);bDe=r(x8r,"megatron-bert"),x8r.forEach(t),TDe=r(w0e," \u2014 "),n9=n(w0e,"A",{href:!0});var k8r=s(n9);FDe=r(k8r,"MegatronBertConfig"),k8r.forEach(t),CDe=r(w0e," (MegatronBert model)"),w0e.forEach(t),MDe=i(T),Mm=n(T,"LI",{});var A0e=s(Mm);CQ=n(A0e,"STRONG",{});var R8r=s(CQ);EDe=r(R8r,"mobilebert"),R8r.forEach(t),yDe=r(A0e," \u2014 "),s9=n(A0e,"A",{href:!0});var S8r=s(s9);wDe=r(S8r,"MobileBertConfig"),S8r.forEach(t),ADe=r(A0e," (MobileBERT model)"),A0e.forEach(t),LDe=i(T),Em=n(T,"LI",{});var L0e=s(Em);MQ=n(L0e,"STRONG",{});var P8r=s(MQ);BDe=r(P8r,"mpnet"),P8r.forEach(t),xDe=r(L0e," \u2014 "),l9=n(L0e,"A",{href:!0});var $8r=s(l9);kDe=r($8r,"MPNetConfig"),$8r.forEach(t),RDe=r(L0e," (MPNet model)"),L0e.forEach(t),SDe=i(T),ym=n(T,"LI",{});var B0e=s(ym);EQ=n(B0e,"STRONG",{});var I8r=s(EQ);PDe=r(I8r,"mt5"),I8r.forEach(t),$De=r(B0e," \u2014 "),i9=n(B0e,"A",{href:!0});var D8r=s(i9);IDe=r(D8r,"MT5Config"),D8r.forEach(t),DDe=r(B0e," (mT5 model)"),B0e.forEach(t),jDe=i(T),wm=n(T,"LI",{});var x0e=s(wm);yQ=n(x0e,"STRONG",{});var j8r=s(yQ);NDe=r(j8r,"nystromformer"),j8r.forEach(t),qDe=r(x0e," \u2014 "),d9=n(x0e,"A",{href:!0});var N8r=s(d9);GDe=r(N8r,"NystromformerConfig"),N8r.forEach(t),ODe=r(x0e," (Nystromformer model)"),x0e.forEach(t),XDe=i(T),Am=n(T,"LI",{});var k0e=s(Am);wQ=n(k0e,"STRONG",{});var q8r=s(wQ);VDe=r(q8r,"openai-gpt"),q8r.forEach(t),zDe=r(k0e," \u2014 "),c9=n(k0e,"A",{href:!0});var G8r=s(c9);WDe=r(G8r,"OpenAIGPTConfig"),G8r.forEach(t),QDe=r(k0e," (OpenAI GPT model)"),k0e.forEach(t),HDe=i(T),Lm=n(T,"LI",{});var R0e=s(Lm);AQ=n(R0e,"STRONG",{});var O8r=s(AQ);UDe=r(O8r,"pegasus"),O8r.forEach(t),JDe=r(R0e," \u2014 "),f9=n(R0e,"A",{href:!0});var X8r=s(f9);YDe=r(X8r,"PegasusConfig"),X8r.forEach(t),KDe=r(R0e," (Pegasus model)"),R0e.forEach(t),ZDe=i(T),Bm=n(T,"LI",{});var S0e=s(Bm);LQ=n(S0e,"STRONG",{});var V8r=s(LQ);eje=r(V8r,"perceiver"),V8r.forEach(t),oje=r(S0e," \u2014 "),m9=n(S0e,"A",{href:!0});var z8r=s(m9);rje=r(z8r,"PerceiverConfig"),z8r.forEach(t),tje=r(S0e," (Perceiver model)"),S0e.forEach(t),aje=i(T),xm=n(T,"LI",{});var P0e=s(xm);BQ=n(P0e,"STRONG",{});var W8r=s(BQ);nje=r(W8r,"plbart"),W8r.forEach(t),sje=r(P0e," \u2014 "),g9=n(P0e,"A",{href:!0});var Q8r=s(g9);lje=r(Q8r,"PLBartConfig"),Q8r.forEach(t),ije=r(P0e," (PLBart model)"),P0e.forEach(t),dje=i(T),km=n(T,"LI",{});var $0e=s(km);xQ=n($0e,"STRONG",{});var H8r=s(xQ);cje=r(H8r,"poolformer"),H8r.forEach(t),fje=r($0e," \u2014 "),h9=n($0e,"A",{href:!0});var U8r=s(h9);mje=r(U8r,"PoolFormerConfig"),U8r.forEach(t),gje=r($0e," (PoolFormer model)"),$0e.forEach(t),hje=i(T),Rm=n(T,"LI",{});var I0e=s(Rm);kQ=n(I0e,"STRONG",{});var J8r=s(kQ);uje=r(J8r,"prophetnet"),J8r.forEach(t),pje=r(I0e," \u2014 "),u9=n(I0e,"A",{href:!0});var Y8r=s(u9);_je=r(Y8r,"ProphetNetConfig"),Y8r.forEach(t),vje=r(I0e," (ProphetNet model)"),I0e.forEach(t),bje=i(T),Sm=n(T,"LI",{});var D0e=s(Sm);RQ=n(D0e,"STRONG",{});var K8r=s(RQ);Tje=r(K8r,"qdqbert"),K8r.forEach(t),Fje=r(D0e," \u2014 "),p9=n(D0e,"A",{href:!0});var Z8r=s(p9);Cje=r(Z8r,"QDQBertConfig"),Z8r.forEach(t),Mje=r(D0e," (QDQBert model)"),D0e.forEach(t),Eje=i(T),Pm=n(T,"LI",{});var j0e=s(Pm);SQ=n(j0e,"STRONG",{});var e9r=s(SQ);yje=r(e9r,"rag"),e9r.forEach(t),wje=r(j0e," \u2014 "),_9=n(j0e,"A",{href:!0});var o9r=s(_9);Aje=r(o9r,"RagConfig"),o9r.forEach(t),Lje=r(j0e," (RAG model)"),j0e.forEach(t),Bje=i(T),$m=n(T,"LI",{});var N0e=s($m);PQ=n(N0e,"STRONG",{});var r9r=s(PQ);xje=r(r9r,"realm"),r9r.forEach(t),kje=r(N0e," \u2014 "),v9=n(N0e,"A",{href:!0});var t9r=s(v9);Rje=r(t9r,"RealmConfig"),t9r.forEach(t),Sje=r(N0e," (Realm model)"),N0e.forEach(t),Pje=i(T),Im=n(T,"LI",{});var q0e=s(Im);$Q=n(q0e,"STRONG",{});var a9r=s($Q);$je=r(a9r,"reformer"),a9r.forEach(t),Ije=r(q0e," \u2014 "),b9=n(q0e,"A",{href:!0});var n9r=s(b9);Dje=r(n9r,"ReformerConfig"),n9r.forEach(t),jje=r(q0e," (Reformer model)"),q0e.forEach(t),Nje=i(T),Dm=n(T,"LI",{});var G0e=s(Dm);IQ=n(G0e,"STRONG",{});var s9r=s(IQ);qje=r(s9r,"rembert"),s9r.forEach(t),Gje=r(G0e," \u2014 "),T9=n(G0e,"A",{href:!0});var l9r=s(T9);Oje=r(l9r,"RemBertConfig"),l9r.forEach(t),Xje=r(G0e," (RemBERT model)"),G0e.forEach(t),Vje=i(T),jm=n(T,"LI",{});var O0e=s(jm);DQ=n(O0e,"STRONG",{});var i9r=s(DQ);zje=r(i9r,"retribert"),i9r.forEach(t),Wje=r(O0e," \u2014 "),F9=n(O0e,"A",{href:!0});var d9r=s(F9);Qje=r(d9r,"RetriBertConfig"),d9r.forEach(t),Hje=r(O0e," (RetriBERT model)"),O0e.forEach(t),Uje=i(T),Nm=n(T,"LI",{});var X0e=s(Nm);jQ=n(X0e,"STRONG",{});var c9r=s(jQ);Jje=r(c9r,"roberta"),c9r.forEach(t),Yje=r(X0e," \u2014 "),C9=n(X0e,"A",{href:!0});var f9r=s(C9);Kje=r(f9r,"RobertaConfig"),f9r.forEach(t),Zje=r(X0e," (RoBERTa model)"),X0e.forEach(t),eNe=i(T),qm=n(T,"LI",{});var V0e=s(qm);NQ=n(V0e,"STRONG",{});var m9r=s(NQ);oNe=r(m9r,"roformer"),m9r.forEach(t),rNe=r(V0e," \u2014 "),M9=n(V0e,"A",{href:!0});var g9r=s(M9);tNe=r(g9r,"RoFormerConfig"),g9r.forEach(t),aNe=r(V0e," (RoFormer model)"),V0e.forEach(t),nNe=i(T),Gm=n(T,"LI",{});var z0e=s(Gm);qQ=n(z0e,"STRONG",{});var h9r=s(qQ);sNe=r(h9r,"segformer"),h9r.forEach(t),lNe=r(z0e," \u2014 "),E9=n(z0e,"A",{href:!0});var u9r=s(E9);iNe=r(u9r,"SegformerConfig"),u9r.forEach(t),dNe=r(z0e," (SegFormer model)"),z0e.forEach(t),cNe=i(T),Om=n(T,"LI",{});var W0e=s(Om);GQ=n(W0e,"STRONG",{});var p9r=s(GQ);fNe=r(p9r,"sew"),p9r.forEach(t),mNe=r(W0e," \u2014 "),y9=n(W0e,"A",{href:!0});var _9r=s(y9);gNe=r(_9r,"SEWConfig"),_9r.forEach(t),hNe=r(W0e," (SEW model)"),W0e.forEach(t),uNe=i(T),Xm=n(T,"LI",{});var Q0e=s(Xm);OQ=n(Q0e,"STRONG",{});var v9r=s(OQ);pNe=r(v9r,"sew-d"),v9r.forEach(t),_Ne=r(Q0e," \u2014 "),w9=n(Q0e,"A",{href:!0});var b9r=s(w9);vNe=r(b9r,"SEWDConfig"),b9r.forEach(t),bNe=r(Q0e," (SEW-D model)"),Q0e.forEach(t),TNe=i(T),Vm=n(T,"LI",{});var H0e=s(Vm);XQ=n(H0e,"STRONG",{});var T9r=s(XQ);FNe=r(T9r,"speech-encoder-decoder"),T9r.forEach(t),CNe=r(H0e," \u2014 "),A9=n(H0e,"A",{href:!0});var F9r=s(A9);MNe=r(F9r,"SpeechEncoderDecoderConfig"),F9r.forEach(t),ENe=r(H0e," (Speech Encoder decoder model)"),H0e.forEach(t),yNe=i(T),zm=n(T,"LI",{});var U0e=s(zm);VQ=n(U0e,"STRONG",{});var C9r=s(VQ);wNe=r(C9r,"speech_to_text"),C9r.forEach(t),ANe=r(U0e," \u2014 "),L9=n(U0e,"A",{href:!0});var M9r=s(L9);LNe=r(M9r,"Speech2TextConfig"),M9r.forEach(t),BNe=r(U0e," (Speech2Text model)"),U0e.forEach(t),xNe=i(T),Wm=n(T,"LI",{});var J0e=s(Wm);zQ=n(J0e,"STRONG",{});var E9r=s(zQ);kNe=r(E9r,"speech_to_text_2"),E9r.forEach(t),RNe=r(J0e," \u2014 "),B9=n(J0e,"A",{href:!0});var y9r=s(B9);SNe=r(y9r,"Speech2Text2Config"),y9r.forEach(t),PNe=r(J0e," (Speech2Text2 model)"),J0e.forEach(t),$Ne=i(T),Qm=n(T,"LI",{});var Y0e=s(Qm);WQ=n(Y0e,"STRONG",{});var w9r=s(WQ);INe=r(w9r,"splinter"),w9r.forEach(t),DNe=r(Y0e," \u2014 "),x9=n(Y0e,"A",{href:!0});var A9r=s(x9);jNe=r(A9r,"SplinterConfig"),A9r.forEach(t),NNe=r(Y0e," (Splinter model)"),Y0e.forEach(t),qNe=i(T),Hm=n(T,"LI",{});var K0e=s(Hm);QQ=n(K0e,"STRONG",{});var L9r=s(QQ);GNe=r(L9r,"squeezebert"),L9r.forEach(t),ONe=r(K0e," \u2014 "),k9=n(K0e,"A",{href:!0});var B9r=s(k9);XNe=r(B9r,"SqueezeBertConfig"),B9r.forEach(t),VNe=r(K0e," (SqueezeBERT model)"),K0e.forEach(t),zNe=i(T),Um=n(T,"LI",{});var Z0e=s(Um);HQ=n(Z0e,"STRONG",{});var x9r=s(HQ);WNe=r(x9r,"swin"),x9r.forEach(t),QNe=r(Z0e," \u2014 "),R9=n(Z0e,"A",{href:!0});var k9r=s(R9);HNe=r(k9r,"SwinConfig"),k9r.forEach(t),UNe=r(Z0e," (Swin model)"),Z0e.forEach(t),JNe=i(T),Jm=n(T,"LI",{});var eTe=s(Jm);UQ=n(eTe,"STRONG",{});var R9r=s(UQ);YNe=r(R9r,"t5"),R9r.forEach(t),KNe=r(eTe," \u2014 "),S9=n(eTe,"A",{href:!0});var S9r=s(S9);ZNe=r(S9r,"T5Config"),S9r.forEach(t),eqe=r(eTe," (T5 model)"),eTe.forEach(t),oqe=i(T),Ym=n(T,"LI",{});var oTe=s(Ym);JQ=n(oTe,"STRONG",{});var P9r=s(JQ);rqe=r(P9r,"tapas"),P9r.forEach(t),tqe=r(oTe," \u2014 "),P9=n(oTe,"A",{href:!0});var $9r=s(P9);aqe=r($9r,"TapasConfig"),$9r.forEach(t),nqe=r(oTe," (TAPAS model)"),oTe.forEach(t),sqe=i(T),Km=n(T,"LI",{});var rTe=s(Km);YQ=n(rTe,"STRONG",{});var I9r=s(YQ);lqe=r(I9r,"transfo-xl"),I9r.forEach(t),iqe=r(rTe," \u2014 "),$9=n(rTe,"A",{href:!0});var D9r=s($9);dqe=r(D9r,"TransfoXLConfig"),D9r.forEach(t),cqe=r(rTe," (Transformer-XL model)"),rTe.forEach(t),fqe=i(T),Zm=n(T,"LI",{});var tTe=s(Zm);KQ=n(tTe,"STRONG",{});var j9r=s(KQ);mqe=r(j9r,"trocr"),j9r.forEach(t),gqe=r(tTe," \u2014 "),I9=n(tTe,"A",{href:!0});var N9r=s(I9);hqe=r(N9r,"TrOCRConfig"),N9r.forEach(t),uqe=r(tTe," (TrOCR model)"),tTe.forEach(t),pqe=i(T),eg=n(T,"LI",{});var aTe=s(eg);ZQ=n(aTe,"STRONG",{});var q9r=s(ZQ);_qe=r(q9r,"unispeech"),q9r.forEach(t),vqe=r(aTe," \u2014 "),D9=n(aTe,"A",{href:!0});var G9r=s(D9);bqe=r(G9r,"UniSpeechConfig"),G9r.forEach(t),Tqe=r(aTe," (UniSpeech model)"),aTe.forEach(t),Fqe=i(T),og=n(T,"LI",{});var nTe=s(og);eH=n(nTe,"STRONG",{});var O9r=s(eH);Cqe=r(O9r,"unispeech-sat"),O9r.forEach(t),Mqe=r(nTe," \u2014 "),j9=n(nTe,"A",{href:!0});var X9r=s(j9);Eqe=r(X9r,"UniSpeechSatConfig"),X9r.forEach(t),yqe=r(nTe," (UniSpeechSat model)"),nTe.forEach(t),wqe=i(T),rg=n(T,"LI",{});var sTe=s(rg);oH=n(sTe,"STRONG",{});var V9r=s(oH);Aqe=r(V9r,"vilt"),V9r.forEach(t),Lqe=r(sTe," \u2014 "),N9=n(sTe,"A",{href:!0});var z9r=s(N9);Bqe=r(z9r,"ViltConfig"),z9r.forEach(t),xqe=r(sTe," (ViLT model)"),sTe.forEach(t),kqe=i(T),tg=n(T,"LI",{});var lTe=s(tg);rH=n(lTe,"STRONG",{});var W9r=s(rH);Rqe=r(W9r,"vision-encoder-decoder"),W9r.forEach(t),Sqe=r(lTe," \u2014 "),q9=n(lTe,"A",{href:!0});var Q9r=s(q9);Pqe=r(Q9r,"VisionEncoderDecoderConfig"),Q9r.forEach(t),$qe=r(lTe," (Vision Encoder decoder model)"),lTe.forEach(t),Iqe=i(T),ag=n(T,"LI",{});var iTe=s(ag);tH=n(iTe,"STRONG",{});var H9r=s(tH);Dqe=r(H9r,"vision-text-dual-encoder"),H9r.forEach(t),jqe=r(iTe," \u2014 "),G9=n(iTe,"A",{href:!0});var U9r=s(G9);Nqe=r(U9r,"VisionTextDualEncoderConfig"),U9r.forEach(t),qqe=r(iTe," (VisionTextDualEncoder model)"),iTe.forEach(t),Gqe=i(T),ng=n(T,"LI",{});var dTe=s(ng);aH=n(dTe,"STRONG",{});var J9r=s(aH);Oqe=r(J9r,"visual_bert"),J9r.forEach(t),Xqe=r(dTe," \u2014 "),O9=n(dTe,"A",{href:!0});var Y9r=s(O9);Vqe=r(Y9r,"VisualBertConfig"),Y9r.forEach(t),zqe=r(dTe," (VisualBert model)"),dTe.forEach(t),Wqe=i(T),sg=n(T,"LI",{});var cTe=s(sg);nH=n(cTe,"STRONG",{});var K9r=s(nH);Qqe=r(K9r,"vit"),K9r.forEach(t),Hqe=r(cTe," \u2014 "),X9=n(cTe,"A",{href:!0});var Z9r=s(X9);Uqe=r(Z9r,"ViTConfig"),Z9r.forEach(t),Jqe=r(cTe," (ViT model)"),cTe.forEach(t),Yqe=i(T),lg=n(T,"LI",{});var fTe=s(lg);sH=n(fTe,"STRONG",{});var eBr=s(sH);Kqe=r(eBr,"vit_mae"),eBr.forEach(t),Zqe=r(fTe," \u2014 "),V9=n(fTe,"A",{href:!0});var oBr=s(V9);eGe=r(oBr,"ViTMAEConfig"),oBr.forEach(t),oGe=r(fTe," (ViTMAE model)"),fTe.forEach(t),rGe=i(T),ig=n(T,"LI",{});var mTe=s(ig);lH=n(mTe,"STRONG",{});var rBr=s(lH);tGe=r(rBr,"wav2vec2"),rBr.forEach(t),aGe=r(mTe," \u2014 "),z9=n(mTe,"A",{href:!0});var tBr=s(z9);nGe=r(tBr,"Wav2Vec2Config"),tBr.forEach(t),sGe=r(mTe," (Wav2Vec2 model)"),mTe.forEach(t),lGe=i(T),dg=n(T,"LI",{});var gTe=s(dg);iH=n(gTe,"STRONG",{});var aBr=s(iH);iGe=r(aBr,"wavlm"),aBr.forEach(t),dGe=r(gTe," \u2014 "),W9=n(gTe,"A",{href:!0});var nBr=s(W9);cGe=r(nBr,"WavLMConfig"),nBr.forEach(t),fGe=r(gTe," (WavLM model)"),gTe.forEach(t),mGe=i(T),cg=n(T,"LI",{});var hTe=s(cg);dH=n(hTe,"STRONG",{});var sBr=s(dH);gGe=r(sBr,"xglm"),sBr.forEach(t),hGe=r(hTe," \u2014 "),Q9=n(hTe,"A",{href:!0});var lBr=s(Q9);uGe=r(lBr,"XGLMConfig"),lBr.forEach(t),pGe=r(hTe," (XGLM model)"),hTe.forEach(t),_Ge=i(T),fg=n(T,"LI",{});var uTe=s(fg);cH=n(uTe,"STRONG",{});var iBr=s(cH);vGe=r(iBr,"xlm"),iBr.forEach(t),bGe=r(uTe," \u2014 "),H9=n(uTe,"A",{href:!0});var dBr=s(H9);TGe=r(dBr,"XLMConfig"),dBr.forEach(t),FGe=r(uTe," (XLM model)"),uTe.forEach(t),CGe=i(T),mg=n(T,"LI",{});var pTe=s(mg);fH=n(pTe,"STRONG",{});var cBr=s(fH);MGe=r(cBr,"xlm-prophetnet"),cBr.forEach(t),EGe=r(pTe," \u2014 "),U9=n(pTe,"A",{href:!0});var fBr=s(U9);yGe=r(fBr,"XLMProphetNetConfig"),fBr.forEach(t),wGe=r(pTe," (XLMProphetNet model)"),pTe.forEach(t),AGe=i(T),gg=n(T,"LI",{});var _Te=s(gg);mH=n(_Te,"STRONG",{});var mBr=s(mH);LGe=r(mBr,"xlm-roberta"),mBr.forEach(t),BGe=r(_Te," \u2014 "),J9=n(_Te,"A",{href:!0});var gBr=s(J9);xGe=r(gBr,"XLMRobertaConfig"),gBr.forEach(t),kGe=r(_Te," (XLM-RoBERTa model)"),_Te.forEach(t),RGe=i(T),hg=n(T,"LI",{});var vTe=s(hg);gH=n(vTe,"STRONG",{});var hBr=s(gH);SGe=r(hBr,"xlm-roberta-xl"),hBr.forEach(t),PGe=r(vTe," \u2014 "),Y9=n(vTe,"A",{href:!0});var uBr=s(Y9);$Ge=r(uBr,"XLMRobertaXLConfig"),uBr.forEach(t),IGe=r(vTe," (XLM-RoBERTa-XL model)"),vTe.forEach(t),DGe=i(T),ug=n(T,"LI",{});var bTe=s(ug);hH=n(bTe,"STRONG",{});var pBr=s(hH);jGe=r(pBr,"xlnet"),pBr.forEach(t),NGe=r(bTe," \u2014 "),K9=n(bTe,"A",{href:!0});var _Br=s(K9);qGe=r(_Br,"XLNetConfig"),_Br.forEach(t),GGe=r(bTe," (XLNet model)"),bTe.forEach(t),OGe=i(T),pg=n(T,"LI",{});var TTe=s(pg);uH=n(TTe,"STRONG",{});var vBr=s(uH);XGe=r(vBr,"yoso"),vBr.forEach(t),VGe=r(TTe," \u2014 "),Z9=n(TTe,"A",{href:!0});var bBr=s(Z9);zGe=r(bBr,"YosoConfig"),bBr.forEach(t),WGe=r(TTe," (YOSO model)"),TTe.forEach(t),T.forEach(t),QGe=i(ia),pH=n(ia,"P",{});var TBr=s(pH);HGe=r(TBr,"Examples:"),TBr.forEach(t),UGe=i(ia),m(SE.$$.fragment,ia),ia.forEach(t),JGe=i(Is),_g=n(Is,"DIV",{class:!0});var Rxe=s(_g);m(PE.$$.fragment,Rxe),YGe=i(Rxe),_H=n(Rxe,"P",{});var FBr=s(_H);KGe=r(FBr,"Register a new configuration for this class."),FBr.forEach(t),Rxe.forEach(t),Is.forEach(t),R9e=i(c),ji=n(c,"H2",{class:!0});var Sxe=s(ji);vg=n(Sxe,"A",{id:!0,class:!0,href:!0});var CBr=s(vg);vH=n(CBr,"SPAN",{});var MBr=s(vH);m($E.$$.fragment,MBr),MBr.forEach(t),CBr.forEach(t),ZGe=i(Sxe),bH=n(Sxe,"SPAN",{});var EBr=s(bH);eOe=r(EBr,"AutoTokenizer"),EBr.forEach(t),Sxe.forEach(t),S9e=i(c),Vo=n(c,"DIV",{class:!0});var Ds=s(Vo);m(IE.$$.fragment,Ds),oOe=i(Ds),DE=n(Ds,"P",{});var Pxe=s(DE);rOe=r(Pxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(Pxe,"A",{href:!0});var yBr=s(eB);tOe=r(yBr,"AutoTokenizer.from_pretrained()"),yBr.forEach(t),aOe=r(Pxe," class method."),Pxe.forEach(t),nOe=i(Ds),jE=n(Ds,"P",{});var $xe=s(jE);sOe=r($xe,"This class cannot be instantiated directly using "),TH=n($xe,"CODE",{});var wBr=s(TH);lOe=r(wBr,"__init__()"),wBr.forEach(t),iOe=r($xe," (throws an error)."),$xe.forEach(t),dOe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m(NE.$$.fragment,da),cOe=i(da),FH=n(da,"P",{});var ABr=s(FH);fOe=r(ABr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ABr.forEach(t),mOe=i(da),Da=n(da,"P",{});var EM=s(Da);gOe=r(EM,"The tokenizer class to instantiate is selected based on the "),CH=n(EM,"CODE",{});var LBr=s(CH);hOe=r(LBr,"model_type"),LBr.forEach(t),uOe=r(EM,` property of the config object (either
passed as an argument or loaded from `),MH=n(EM,"CODE",{});var BBr=s(MH);pOe=r(BBr,"pretrained_model_name_or_path"),BBr.forEach(t),_Oe=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=n(EM,"CODE",{});var xBr=s(EH);vOe=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),bOe=r(EM,":"),EM.forEach(t),TOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var mL=s(Gn);yH=n(mL,"STRONG",{});var kBr=s(yH);FOe=r(kBr,"albert"),kBr.forEach(t),COe=r(mL," \u2014 "),oB=n(mL,"A",{href:!0});var RBr=s(oB);MOe=r(RBr,"AlbertTokenizer"),RBr.forEach(t),EOe=r(mL," or "),rB=n(mL,"A",{href:!0});var SBr=s(rB);yOe=r(SBr,"AlbertTokenizerFast"),SBr.forEach(t),wOe=r(mL," (ALBERT model)"),mL.forEach(t),AOe=i(y),On=n(y,"LI",{});var gL=s(On);wH=n(gL,"STRONG",{});var PBr=s(wH);LOe=r(PBr,"bart"),PBr.forEach(t),BOe=r(gL," \u2014 "),tB=n(gL,"A",{href:!0});var $Br=s(tB);xOe=r($Br,"BartTokenizer"),$Br.forEach(t),kOe=r(gL," or "),aB=n(gL,"A",{href:!0});var IBr=s(aB);ROe=r(IBr,"BartTokenizerFast"),IBr.forEach(t),SOe=r(gL," (BART model)"),gL.forEach(t),POe=i(y),Xn=n(y,"LI",{});var hL=s(Xn);AH=n(hL,"STRONG",{});var DBr=s(AH);$Oe=r(DBr,"barthez"),DBr.forEach(t),IOe=r(hL," \u2014 "),nB=n(hL,"A",{href:!0});var jBr=s(nB);DOe=r(jBr,"BarthezTokenizer"),jBr.forEach(t),jOe=r(hL," or "),sB=n(hL,"A",{href:!0});var NBr=s(sB);NOe=r(NBr,"BarthezTokenizerFast"),NBr.forEach(t),qOe=r(hL," (BARThez model)"),hL.forEach(t),GOe=i(y),bg=n(y,"LI",{});var FTe=s(bg);LH=n(FTe,"STRONG",{});var qBr=s(LH);OOe=r(qBr,"bartpho"),qBr.forEach(t),XOe=r(FTe," \u2014 "),lB=n(FTe,"A",{href:!0});var GBr=s(lB);VOe=r(GBr,"BartphoTokenizer"),GBr.forEach(t),zOe=r(FTe," (BARTpho model)"),FTe.forEach(t),WOe=i(y),Vn=n(y,"LI",{});var uL=s(Vn);BH=n(uL,"STRONG",{});var OBr=s(BH);QOe=r(OBr,"bert"),OBr.forEach(t),HOe=r(uL," \u2014 "),iB=n(uL,"A",{href:!0});var XBr=s(iB);UOe=r(XBr,"BertTokenizer"),XBr.forEach(t),JOe=r(uL," or "),dB=n(uL,"A",{href:!0});var VBr=s(dB);YOe=r(VBr,"BertTokenizerFast"),VBr.forEach(t),KOe=r(uL," (BERT model)"),uL.forEach(t),ZOe=i(y),Tg=n(y,"LI",{});var CTe=s(Tg);xH=n(CTe,"STRONG",{});var zBr=s(xH);eXe=r(zBr,"bert-generation"),zBr.forEach(t),oXe=r(CTe," \u2014 "),cB=n(CTe,"A",{href:!0});var WBr=s(cB);rXe=r(WBr,"BertGenerationTokenizer"),WBr.forEach(t),tXe=r(CTe," (Bert Generation model)"),CTe.forEach(t),aXe=i(y),Fg=n(y,"LI",{});var MTe=s(Fg);kH=n(MTe,"STRONG",{});var QBr=s(kH);nXe=r(QBr,"bert-japanese"),QBr.forEach(t),sXe=r(MTe," \u2014 "),fB=n(MTe,"A",{href:!0});var HBr=s(fB);lXe=r(HBr,"BertJapaneseTokenizer"),HBr.forEach(t),iXe=r(MTe," (BertJapanese model)"),MTe.forEach(t),dXe=i(y),Cg=n(y,"LI",{});var ETe=s(Cg);RH=n(ETe,"STRONG",{});var UBr=s(RH);cXe=r(UBr,"bertweet"),UBr.forEach(t),fXe=r(ETe," \u2014 "),mB=n(ETe,"A",{href:!0});var JBr=s(mB);mXe=r(JBr,"BertweetTokenizer"),JBr.forEach(t),gXe=r(ETe," (Bertweet model)"),ETe.forEach(t),hXe=i(y),zn=n(y,"LI",{});var pL=s(zn);SH=n(pL,"STRONG",{});var YBr=s(SH);uXe=r(YBr,"big_bird"),YBr.forEach(t),pXe=r(pL," \u2014 "),gB=n(pL,"A",{href:!0});var KBr=s(gB);_Xe=r(KBr,"BigBirdTokenizer"),KBr.forEach(t),vXe=r(pL," or "),hB=n(pL,"A",{href:!0});var ZBr=s(hB);bXe=r(ZBr,"BigBirdTokenizerFast"),ZBr.forEach(t),TXe=r(pL," (BigBird model)"),pL.forEach(t),FXe=i(y),Wn=n(y,"LI",{});var _L=s(Wn);PH=n(_L,"STRONG",{});var exr=s(PH);CXe=r(exr,"bigbird_pegasus"),exr.forEach(t),MXe=r(_L," \u2014 "),uB=n(_L,"A",{href:!0});var oxr=s(uB);EXe=r(oxr,"PegasusTokenizer"),oxr.forEach(t),yXe=r(_L," or "),pB=n(_L,"A",{href:!0});var rxr=s(pB);wXe=r(rxr,"PegasusTokenizerFast"),rxr.forEach(t),AXe=r(_L," (BigBirdPegasus model)"),_L.forEach(t),LXe=i(y),Qn=n(y,"LI",{});var vL=s(Qn);$H=n(vL,"STRONG",{});var txr=s($H);BXe=r(txr,"blenderbot"),txr.forEach(t),xXe=r(vL," \u2014 "),_B=n(vL,"A",{href:!0});var axr=s(_B);kXe=r(axr,"BlenderbotTokenizer"),axr.forEach(t),RXe=r(vL," or "),vB=n(vL,"A",{href:!0});var nxr=s(vB);SXe=r(nxr,"BlenderbotTokenizerFast"),nxr.forEach(t),PXe=r(vL," (Blenderbot model)"),vL.forEach(t),$Xe=i(y),Mg=n(y,"LI",{});var yTe=s(Mg);IH=n(yTe,"STRONG",{});var sxr=s(IH);IXe=r(sxr,"blenderbot-small"),sxr.forEach(t),DXe=r(yTe," \u2014 "),bB=n(yTe,"A",{href:!0});var lxr=s(bB);jXe=r(lxr,"BlenderbotSmallTokenizer"),lxr.forEach(t),NXe=r(yTe," (BlenderbotSmall model)"),yTe.forEach(t),qXe=i(y),Eg=n(y,"LI",{});var wTe=s(Eg);DH=n(wTe,"STRONG",{});var ixr=s(DH);GXe=r(ixr,"byt5"),ixr.forEach(t),OXe=r(wTe," \u2014 "),TB=n(wTe,"A",{href:!0});var dxr=s(TB);XXe=r(dxr,"ByT5Tokenizer"),dxr.forEach(t),VXe=r(wTe," (ByT5 model)"),wTe.forEach(t),zXe=i(y),Hn=n(y,"LI",{});var bL=s(Hn);jH=n(bL,"STRONG",{});var cxr=s(jH);WXe=r(cxr,"camembert"),cxr.forEach(t),QXe=r(bL," \u2014 "),FB=n(bL,"A",{href:!0});var fxr=s(FB);HXe=r(fxr,"CamembertTokenizer"),fxr.forEach(t),UXe=r(bL," or "),CB=n(bL,"A",{href:!0});var mxr=s(CB);JXe=r(mxr,"CamembertTokenizerFast"),mxr.forEach(t),YXe=r(bL," (CamemBERT model)"),bL.forEach(t),KXe=i(y),yg=n(y,"LI",{});var ATe=s(yg);NH=n(ATe,"STRONG",{});var gxr=s(NH);ZXe=r(gxr,"canine"),gxr.forEach(t),eVe=r(ATe," \u2014 "),MB=n(ATe,"A",{href:!0});var hxr=s(MB);oVe=r(hxr,"CanineTokenizer"),hxr.forEach(t),rVe=r(ATe," (Canine model)"),ATe.forEach(t),tVe=i(y),Un=n(y,"LI",{});var TL=s(Un);qH=n(TL,"STRONG",{});var uxr=s(qH);aVe=r(uxr,"clip"),uxr.forEach(t),nVe=r(TL," \u2014 "),EB=n(TL,"A",{href:!0});var pxr=s(EB);sVe=r(pxr,"CLIPTokenizer"),pxr.forEach(t),lVe=r(TL," or "),yB=n(TL,"A",{href:!0});var _xr=s(yB);iVe=r(_xr,"CLIPTokenizerFast"),_xr.forEach(t),dVe=r(TL," (CLIP model)"),TL.forEach(t),cVe=i(y),Jn=n(y,"LI",{});var FL=s(Jn);GH=n(FL,"STRONG",{});var vxr=s(GH);fVe=r(vxr,"convbert"),vxr.forEach(t),mVe=r(FL," \u2014 "),wB=n(FL,"A",{href:!0});var bxr=s(wB);gVe=r(bxr,"ConvBertTokenizer"),bxr.forEach(t),hVe=r(FL," or "),AB=n(FL,"A",{href:!0});var Txr=s(AB);uVe=r(Txr,"ConvBertTokenizerFast"),Txr.forEach(t),pVe=r(FL," (ConvBERT model)"),FL.forEach(t),_Ve=i(y),Yn=n(y,"LI",{});var CL=s(Yn);OH=n(CL,"STRONG",{});var Fxr=s(OH);vVe=r(Fxr,"cpm"),Fxr.forEach(t),bVe=r(CL," \u2014 "),LB=n(CL,"A",{href:!0});var Cxr=s(LB);TVe=r(Cxr,"CpmTokenizer"),Cxr.forEach(t),FVe=r(CL," or "),XH=n(CL,"CODE",{});var Mxr=s(XH);CVe=r(Mxr,"CpmTokenizerFast"),Mxr.forEach(t),MVe=r(CL," (CPM model)"),CL.forEach(t),EVe=i(y),wg=n(y,"LI",{});var LTe=s(wg);VH=n(LTe,"STRONG",{});var Exr=s(VH);yVe=r(Exr,"ctrl"),Exr.forEach(t),wVe=r(LTe," \u2014 "),BB=n(LTe,"A",{href:!0});var yxr=s(BB);AVe=r(yxr,"CTRLTokenizer"),yxr.forEach(t),LVe=r(LTe," (CTRL model)"),LTe.forEach(t),BVe=i(y),Kn=n(y,"LI",{});var ML=s(Kn);zH=n(ML,"STRONG",{});var wxr=s(zH);xVe=r(wxr,"deberta"),wxr.forEach(t),kVe=r(ML," \u2014 "),xB=n(ML,"A",{href:!0});var Axr=s(xB);RVe=r(Axr,"DebertaTokenizer"),Axr.forEach(t),SVe=r(ML," or "),kB=n(ML,"A",{href:!0});var Lxr=s(kB);PVe=r(Lxr,"DebertaTokenizerFast"),Lxr.forEach(t),$Ve=r(ML," (DeBERTa model)"),ML.forEach(t),IVe=i(y),Ag=n(y,"LI",{});var BTe=s(Ag);WH=n(BTe,"STRONG",{});var Bxr=s(WH);DVe=r(Bxr,"deberta-v2"),Bxr.forEach(t),jVe=r(BTe," \u2014 "),RB=n(BTe,"A",{href:!0});var xxr=s(RB);NVe=r(xxr,"DebertaV2Tokenizer"),xxr.forEach(t),qVe=r(BTe," (DeBERTa-v2 model)"),BTe.forEach(t),GVe=i(y),Zn=n(y,"LI",{});var EL=s(Zn);QH=n(EL,"STRONG",{});var kxr=s(QH);OVe=r(kxr,"distilbert"),kxr.forEach(t),XVe=r(EL," \u2014 "),SB=n(EL,"A",{href:!0});var Rxr=s(SB);VVe=r(Rxr,"DistilBertTokenizer"),Rxr.forEach(t),zVe=r(EL," or "),PB=n(EL,"A",{href:!0});var Sxr=s(PB);WVe=r(Sxr,"DistilBertTokenizerFast"),Sxr.forEach(t),QVe=r(EL," (DistilBERT model)"),EL.forEach(t),HVe=i(y),es=n(y,"LI",{});var yL=s(es);HH=n(yL,"STRONG",{});var Pxr=s(HH);UVe=r(Pxr,"dpr"),Pxr.forEach(t),JVe=r(yL," \u2014 "),$B=n(yL,"A",{href:!0});var $xr=s($B);YVe=r($xr,"DPRQuestionEncoderTokenizer"),$xr.forEach(t),KVe=r(yL," or "),IB=n(yL,"A",{href:!0});var Ixr=s(IB);ZVe=r(Ixr,"DPRQuestionEncoderTokenizerFast"),Ixr.forEach(t),eze=r(yL," (DPR model)"),yL.forEach(t),oze=i(y),os=n(y,"LI",{});var wL=s(os);UH=n(wL,"STRONG",{});var Dxr=s(UH);rze=r(Dxr,"electra"),Dxr.forEach(t),tze=r(wL," \u2014 "),DB=n(wL,"A",{href:!0});var jxr=s(DB);aze=r(jxr,"ElectraTokenizer"),jxr.forEach(t),nze=r(wL," or "),jB=n(wL,"A",{href:!0});var Nxr=s(jB);sze=r(Nxr,"ElectraTokenizerFast"),Nxr.forEach(t),lze=r(wL," (ELECTRA model)"),wL.forEach(t),ize=i(y),Lg=n(y,"LI",{});var xTe=s(Lg);JH=n(xTe,"STRONG",{});var qxr=s(JH);dze=r(qxr,"flaubert"),qxr.forEach(t),cze=r(xTe," \u2014 "),NB=n(xTe,"A",{href:!0});var Gxr=s(NB);fze=r(Gxr,"FlaubertTokenizer"),Gxr.forEach(t),mze=r(xTe," (FlauBERT model)"),xTe.forEach(t),gze=i(y),rs=n(y,"LI",{});var AL=s(rs);YH=n(AL,"STRONG",{});var Oxr=s(YH);hze=r(Oxr,"fnet"),Oxr.forEach(t),uze=r(AL," \u2014 "),qB=n(AL,"A",{href:!0});var Xxr=s(qB);pze=r(Xxr,"FNetTokenizer"),Xxr.forEach(t),_ze=r(AL," or "),GB=n(AL,"A",{href:!0});var Vxr=s(GB);vze=r(Vxr,"FNetTokenizerFast"),Vxr.forEach(t),bze=r(AL," (FNet model)"),AL.forEach(t),Tze=i(y),Bg=n(y,"LI",{});var kTe=s(Bg);KH=n(kTe,"STRONG",{});var zxr=s(KH);Fze=r(zxr,"fsmt"),zxr.forEach(t),Cze=r(kTe," \u2014 "),OB=n(kTe,"A",{href:!0});var Wxr=s(OB);Mze=r(Wxr,"FSMTTokenizer"),Wxr.forEach(t),Eze=r(kTe," (FairSeq Machine-Translation model)"),kTe.forEach(t),yze=i(y),ts=n(y,"LI",{});var LL=s(ts);ZH=n(LL,"STRONG",{});var Qxr=s(ZH);wze=r(Qxr,"funnel"),Qxr.forEach(t),Aze=r(LL," \u2014 "),XB=n(LL,"A",{href:!0});var Hxr=s(XB);Lze=r(Hxr,"FunnelTokenizer"),Hxr.forEach(t),Bze=r(LL," or "),VB=n(LL,"A",{href:!0});var Uxr=s(VB);xze=r(Uxr,"FunnelTokenizerFast"),Uxr.forEach(t),kze=r(LL," (Funnel Transformer model)"),LL.forEach(t),Rze=i(y),as=n(y,"LI",{});var BL=s(as);eU=n(BL,"STRONG",{});var Jxr=s(eU);Sze=r(Jxr,"gpt2"),Jxr.forEach(t),Pze=r(BL," \u2014 "),zB=n(BL,"A",{href:!0});var Yxr=s(zB);$ze=r(Yxr,"GPT2Tokenizer"),Yxr.forEach(t),Ize=r(BL," or "),WB=n(BL,"A",{href:!0});var Kxr=s(WB);Dze=r(Kxr,"GPT2TokenizerFast"),Kxr.forEach(t),jze=r(BL," (OpenAI GPT-2 model)"),BL.forEach(t),Nze=i(y),ns=n(y,"LI",{});var xL=s(ns);oU=n(xL,"STRONG",{});var Zxr=s(oU);qze=r(Zxr,"gpt_neo"),Zxr.forEach(t),Gze=r(xL," \u2014 "),QB=n(xL,"A",{href:!0});var ekr=s(QB);Oze=r(ekr,"GPT2Tokenizer"),ekr.forEach(t),Xze=r(xL," or "),HB=n(xL,"A",{href:!0});var okr=s(HB);Vze=r(okr,"GPT2TokenizerFast"),okr.forEach(t),zze=r(xL," (GPT Neo model)"),xL.forEach(t),Wze=i(y),ss=n(y,"LI",{});var kL=s(ss);rU=n(kL,"STRONG",{});var rkr=s(rU);Qze=r(rkr,"herbert"),rkr.forEach(t),Hze=r(kL," \u2014 "),UB=n(kL,"A",{href:!0});var tkr=s(UB);Uze=r(tkr,"HerbertTokenizer"),tkr.forEach(t),Jze=r(kL," or "),JB=n(kL,"A",{href:!0});var akr=s(JB);Yze=r(akr,"HerbertTokenizerFast"),akr.forEach(t),Kze=r(kL," (HerBERT model)"),kL.forEach(t),Zze=i(y),xg=n(y,"LI",{});var RTe=s(xg);tU=n(RTe,"STRONG",{});var nkr=s(tU);eWe=r(nkr,"hubert"),nkr.forEach(t),oWe=r(RTe," \u2014 "),YB=n(RTe,"A",{href:!0});var skr=s(YB);rWe=r(skr,"Wav2Vec2CTCTokenizer"),skr.forEach(t),tWe=r(RTe," (Hubert model)"),RTe.forEach(t),aWe=i(y),ls=n(y,"LI",{});var RL=s(ls);aU=n(RL,"STRONG",{});var lkr=s(aU);nWe=r(lkr,"ibert"),lkr.forEach(t),sWe=r(RL," \u2014 "),KB=n(RL,"A",{href:!0});var ikr=s(KB);lWe=r(ikr,"RobertaTokenizer"),ikr.forEach(t),iWe=r(RL," or "),ZB=n(RL,"A",{href:!0});var dkr=s(ZB);dWe=r(dkr,"RobertaTokenizerFast"),dkr.forEach(t),cWe=r(RL," (I-BERT model)"),RL.forEach(t),fWe=i(y),is=n(y,"LI",{});var SL=s(is);nU=n(SL,"STRONG",{});var ckr=s(nU);mWe=r(ckr,"layoutlm"),ckr.forEach(t),gWe=r(SL," \u2014 "),ex=n(SL,"A",{href:!0});var fkr=s(ex);hWe=r(fkr,"LayoutLMTokenizer"),fkr.forEach(t),uWe=r(SL," or "),ox=n(SL,"A",{href:!0});var mkr=s(ox);pWe=r(mkr,"LayoutLMTokenizerFast"),mkr.forEach(t),_We=r(SL," (LayoutLM model)"),SL.forEach(t),vWe=i(y),ds=n(y,"LI",{});var PL=s(ds);sU=n(PL,"STRONG",{});var gkr=s(sU);bWe=r(gkr,"layoutlmv2"),gkr.forEach(t),TWe=r(PL," \u2014 "),rx=n(PL,"A",{href:!0});var hkr=s(rx);FWe=r(hkr,"LayoutLMv2Tokenizer"),hkr.forEach(t),CWe=r(PL," or "),tx=n(PL,"A",{href:!0});var ukr=s(tx);MWe=r(ukr,"LayoutLMv2TokenizerFast"),ukr.forEach(t),EWe=r(PL," (LayoutLMv2 model)"),PL.forEach(t),yWe=i(y),cs=n(y,"LI",{});var $L=s(cs);lU=n($L,"STRONG",{});var pkr=s(lU);wWe=r(pkr,"layoutxlm"),pkr.forEach(t),AWe=r($L," \u2014 "),ax=n($L,"A",{href:!0});var _kr=s(ax);LWe=r(_kr,"LayoutXLMTokenizer"),_kr.forEach(t),BWe=r($L," or "),nx=n($L,"A",{href:!0});var vkr=s(nx);xWe=r(vkr,"LayoutXLMTokenizerFast"),vkr.forEach(t),kWe=r($L," (LayoutXLM model)"),$L.forEach(t),RWe=i(y),fs=n(y,"LI",{});var IL=s(fs);iU=n(IL,"STRONG",{});var bkr=s(iU);SWe=r(bkr,"led"),bkr.forEach(t),PWe=r(IL," \u2014 "),sx=n(IL,"A",{href:!0});var Tkr=s(sx);$We=r(Tkr,"LEDTokenizer"),Tkr.forEach(t),IWe=r(IL," or "),lx=n(IL,"A",{href:!0});var Fkr=s(lx);DWe=r(Fkr,"LEDTokenizerFast"),Fkr.forEach(t),jWe=r(IL," (LED model)"),IL.forEach(t),NWe=i(y),ms=n(y,"LI",{});var DL=s(ms);dU=n(DL,"STRONG",{});var Ckr=s(dU);qWe=r(Ckr,"longformer"),Ckr.forEach(t),GWe=r(DL," \u2014 "),ix=n(DL,"A",{href:!0});var Mkr=s(ix);OWe=r(Mkr,"LongformerTokenizer"),Mkr.forEach(t),XWe=r(DL," or "),dx=n(DL,"A",{href:!0});var Ekr=s(dx);VWe=r(Ekr,"LongformerTokenizerFast"),Ekr.forEach(t),zWe=r(DL," (Longformer model)"),DL.forEach(t),WWe=i(y),kg=n(y,"LI",{});var STe=s(kg);cU=n(STe,"STRONG",{});var ykr=s(cU);QWe=r(ykr,"luke"),ykr.forEach(t),HWe=r(STe," \u2014 "),cx=n(STe,"A",{href:!0});var wkr=s(cx);UWe=r(wkr,"LukeTokenizer"),wkr.forEach(t),JWe=r(STe," (LUKE model)"),STe.forEach(t),YWe=i(y),gs=n(y,"LI",{});var jL=s(gs);fU=n(jL,"STRONG",{});var Akr=s(fU);KWe=r(Akr,"lxmert"),Akr.forEach(t),ZWe=r(jL," \u2014 "),fx=n(jL,"A",{href:!0});var Lkr=s(fx);eQe=r(Lkr,"LxmertTokenizer"),Lkr.forEach(t),oQe=r(jL," or "),mx=n(jL,"A",{href:!0});var Bkr=s(mx);rQe=r(Bkr,"LxmertTokenizerFast"),Bkr.forEach(t),tQe=r(jL," (LXMERT model)"),jL.forEach(t),aQe=i(y),Rg=n(y,"LI",{});var PTe=s(Rg);mU=n(PTe,"STRONG",{});var xkr=s(mU);nQe=r(xkr,"m2m_100"),xkr.forEach(t),sQe=r(PTe," \u2014 "),gx=n(PTe,"A",{href:!0});var kkr=s(gx);lQe=r(kkr,"M2M100Tokenizer"),kkr.forEach(t),iQe=r(PTe," (M2M100 model)"),PTe.forEach(t),dQe=i(y),Sg=n(y,"LI",{});var $Te=s(Sg);gU=n($Te,"STRONG",{});var Rkr=s(gU);cQe=r(Rkr,"marian"),Rkr.forEach(t),fQe=r($Te," \u2014 "),hx=n($Te,"A",{href:!0});var Skr=s(hx);mQe=r(Skr,"MarianTokenizer"),Skr.forEach(t),gQe=r($Te," (Marian model)"),$Te.forEach(t),hQe=i(y),hs=n(y,"LI",{});var NL=s(hs);hU=n(NL,"STRONG",{});var Pkr=s(hU);uQe=r(Pkr,"mbart"),Pkr.forEach(t),pQe=r(NL," \u2014 "),ux=n(NL,"A",{href:!0});var $kr=s(ux);_Qe=r($kr,"MBartTokenizer"),$kr.forEach(t),vQe=r(NL," or "),px=n(NL,"A",{href:!0});var Ikr=s(px);bQe=r(Ikr,"MBartTokenizerFast"),Ikr.forEach(t),TQe=r(NL," (mBART model)"),NL.forEach(t),FQe=i(y),us=n(y,"LI",{});var qL=s(us);uU=n(qL,"STRONG",{});var Dkr=s(uU);CQe=r(Dkr,"mbart50"),Dkr.forEach(t),MQe=r(qL," \u2014 "),_x=n(qL,"A",{href:!0});var jkr=s(_x);EQe=r(jkr,"MBart50Tokenizer"),jkr.forEach(t),yQe=r(qL," or "),vx=n(qL,"A",{href:!0});var Nkr=s(vx);wQe=r(Nkr,"MBart50TokenizerFast"),Nkr.forEach(t),AQe=r(qL," (mBART-50 model)"),qL.forEach(t),LQe=i(y),Pg=n(y,"LI",{});var ITe=s(Pg);pU=n(ITe,"STRONG",{});var qkr=s(pU);BQe=r(qkr,"mluke"),qkr.forEach(t),xQe=r(ITe," \u2014 "),bx=n(ITe,"A",{href:!0});var Gkr=s(bx);kQe=r(Gkr,"MLukeTokenizer"),Gkr.forEach(t),RQe=r(ITe," (mLUKE model)"),ITe.forEach(t),SQe=i(y),ps=n(y,"LI",{});var GL=s(ps);_U=n(GL,"STRONG",{});var Okr=s(_U);PQe=r(Okr,"mobilebert"),Okr.forEach(t),$Qe=r(GL," \u2014 "),Tx=n(GL,"A",{href:!0});var Xkr=s(Tx);IQe=r(Xkr,"MobileBertTokenizer"),Xkr.forEach(t),DQe=r(GL," or "),Fx=n(GL,"A",{href:!0});var Vkr=s(Fx);jQe=r(Vkr,"MobileBertTokenizerFast"),Vkr.forEach(t),NQe=r(GL," (MobileBERT model)"),GL.forEach(t),qQe=i(y),_s=n(y,"LI",{});var OL=s(_s);vU=n(OL,"STRONG",{});var zkr=s(vU);GQe=r(zkr,"mpnet"),zkr.forEach(t),OQe=r(OL," \u2014 "),Cx=n(OL,"A",{href:!0});var Wkr=s(Cx);XQe=r(Wkr,"MPNetTokenizer"),Wkr.forEach(t),VQe=r(OL," or "),Mx=n(OL,"A",{href:!0});var Qkr=s(Mx);zQe=r(Qkr,"MPNetTokenizerFast"),Qkr.forEach(t),WQe=r(OL," (MPNet model)"),OL.forEach(t),QQe=i(y),vs=n(y,"LI",{});var XL=s(vs);bU=n(XL,"STRONG",{});var Hkr=s(bU);HQe=r(Hkr,"mt5"),Hkr.forEach(t),UQe=r(XL," \u2014 "),Ex=n(XL,"A",{href:!0});var Ukr=s(Ex);JQe=r(Ukr,"MT5Tokenizer"),Ukr.forEach(t),YQe=r(XL," or "),yx=n(XL,"A",{href:!0});var Jkr=s(yx);KQe=r(Jkr,"MT5TokenizerFast"),Jkr.forEach(t),ZQe=r(XL," (mT5 model)"),XL.forEach(t),eHe=i(y),bs=n(y,"LI",{});var VL=s(bs);TU=n(VL,"STRONG",{});var Ykr=s(TU);oHe=r(Ykr,"openai-gpt"),Ykr.forEach(t),rHe=r(VL," \u2014 "),wx=n(VL,"A",{href:!0});var Kkr=s(wx);tHe=r(Kkr,"OpenAIGPTTokenizer"),Kkr.forEach(t),aHe=r(VL," or "),Ax=n(VL,"A",{href:!0});var Zkr=s(Ax);nHe=r(Zkr,"OpenAIGPTTokenizerFast"),Zkr.forEach(t),sHe=r(VL," (OpenAI GPT model)"),VL.forEach(t),lHe=i(y),Ts=n(y,"LI",{});var zL=s(Ts);FU=n(zL,"STRONG",{});var eRr=s(FU);iHe=r(eRr,"pegasus"),eRr.forEach(t),dHe=r(zL," \u2014 "),Lx=n(zL,"A",{href:!0});var oRr=s(Lx);cHe=r(oRr,"PegasusTokenizer"),oRr.forEach(t),fHe=r(zL," or "),Bx=n(zL,"A",{href:!0});var rRr=s(Bx);mHe=r(rRr,"PegasusTokenizerFast"),rRr.forEach(t),gHe=r(zL," (Pegasus model)"),zL.forEach(t),hHe=i(y),$g=n(y,"LI",{});var DTe=s($g);CU=n(DTe,"STRONG",{});var tRr=s(CU);uHe=r(tRr,"perceiver"),tRr.forEach(t),pHe=r(DTe," \u2014 "),xx=n(DTe,"A",{href:!0});var aRr=s(xx);_He=r(aRr,"PerceiverTokenizer"),aRr.forEach(t),vHe=r(DTe," (Perceiver model)"),DTe.forEach(t),bHe=i(y),Ig=n(y,"LI",{});var jTe=s(Ig);MU=n(jTe,"STRONG",{});var nRr=s(MU);THe=r(nRr,"phobert"),nRr.forEach(t),FHe=r(jTe," \u2014 "),kx=n(jTe,"A",{href:!0});var sRr=s(kx);CHe=r(sRr,"PhobertTokenizer"),sRr.forEach(t),MHe=r(jTe," (PhoBERT model)"),jTe.forEach(t),EHe=i(y),Dg=n(y,"LI",{});var NTe=s(Dg);EU=n(NTe,"STRONG",{});var lRr=s(EU);yHe=r(lRr,"plbart"),lRr.forEach(t),wHe=r(NTe," \u2014 "),Rx=n(NTe,"A",{href:!0});var iRr=s(Rx);AHe=r(iRr,"PLBartTokenizer"),iRr.forEach(t),LHe=r(NTe," (PLBart model)"),NTe.forEach(t),BHe=i(y),jg=n(y,"LI",{});var qTe=s(jg);yU=n(qTe,"STRONG",{});var dRr=s(yU);xHe=r(dRr,"prophetnet"),dRr.forEach(t),kHe=r(qTe," \u2014 "),Sx=n(qTe,"A",{href:!0});var cRr=s(Sx);RHe=r(cRr,"ProphetNetTokenizer"),cRr.forEach(t),SHe=r(qTe," (ProphetNet model)"),qTe.forEach(t),PHe=i(y),Fs=n(y,"LI",{});var WL=s(Fs);wU=n(WL,"STRONG",{});var fRr=s(wU);$He=r(fRr,"qdqbert"),fRr.forEach(t),IHe=r(WL," \u2014 "),Px=n(WL,"A",{href:!0});var mRr=s(Px);DHe=r(mRr,"BertTokenizer"),mRr.forEach(t),jHe=r(WL," or "),$x=n(WL,"A",{href:!0});var gRr=s($x);NHe=r(gRr,"BertTokenizerFast"),gRr.forEach(t),qHe=r(WL," (QDQBert model)"),WL.forEach(t),GHe=i(y),Ng=n(y,"LI",{});var GTe=s(Ng);AU=n(GTe,"STRONG",{});var hRr=s(AU);OHe=r(hRr,"rag"),hRr.forEach(t),XHe=r(GTe," \u2014 "),Ix=n(GTe,"A",{href:!0});var uRr=s(Ix);VHe=r(uRr,"RagTokenizer"),uRr.forEach(t),zHe=r(GTe," (RAG model)"),GTe.forEach(t),WHe=i(y),Cs=n(y,"LI",{});var QL=s(Cs);LU=n(QL,"STRONG",{});var pRr=s(LU);QHe=r(pRr,"reformer"),pRr.forEach(t),HHe=r(QL," \u2014 "),Dx=n(QL,"A",{href:!0});var _Rr=s(Dx);UHe=r(_Rr,"ReformerTokenizer"),_Rr.forEach(t),JHe=r(QL," or "),jx=n(QL,"A",{href:!0});var vRr=s(jx);YHe=r(vRr,"ReformerTokenizerFast"),vRr.forEach(t),KHe=r(QL," (Reformer model)"),QL.forEach(t),ZHe=i(y),Ms=n(y,"LI",{});var HL=s(Ms);BU=n(HL,"STRONG",{});var bRr=s(BU);eUe=r(bRr,"rembert"),bRr.forEach(t),oUe=r(HL," \u2014 "),Nx=n(HL,"A",{href:!0});var TRr=s(Nx);rUe=r(TRr,"RemBertTokenizer"),TRr.forEach(t),tUe=r(HL," or "),qx=n(HL,"A",{href:!0});var FRr=s(qx);aUe=r(FRr,"RemBertTokenizerFast"),FRr.forEach(t),nUe=r(HL," (RemBERT model)"),HL.forEach(t),sUe=i(y),Es=n(y,"LI",{});var UL=s(Es);xU=n(UL,"STRONG",{});var CRr=s(xU);lUe=r(CRr,"retribert"),CRr.forEach(t),iUe=r(UL," \u2014 "),Gx=n(UL,"A",{href:!0});var MRr=s(Gx);dUe=r(MRr,"RetriBertTokenizer"),MRr.forEach(t),cUe=r(UL," or "),Ox=n(UL,"A",{href:!0});var ERr=s(Ox);fUe=r(ERr,"RetriBertTokenizerFast"),ERr.forEach(t),mUe=r(UL," (RetriBERT model)"),UL.forEach(t),gUe=i(y),ys=n(y,"LI",{});var JL=s(ys);kU=n(JL,"STRONG",{});var yRr=s(kU);hUe=r(yRr,"roberta"),yRr.forEach(t),uUe=r(JL," \u2014 "),Xx=n(JL,"A",{href:!0});var wRr=s(Xx);pUe=r(wRr,"RobertaTokenizer"),wRr.forEach(t),_Ue=r(JL," or "),Vx=n(JL,"A",{href:!0});var ARr=s(Vx);vUe=r(ARr,"RobertaTokenizerFast"),ARr.forEach(t),bUe=r(JL," (RoBERTa model)"),JL.forEach(t),TUe=i(y),ws=n(y,"LI",{});var YL=s(ws);RU=n(YL,"STRONG",{});var LRr=s(RU);FUe=r(LRr,"roformer"),LRr.forEach(t),CUe=r(YL," \u2014 "),zx=n(YL,"A",{href:!0});var BRr=s(zx);MUe=r(BRr,"RoFormerTokenizer"),BRr.forEach(t),EUe=r(YL," or "),Wx=n(YL,"A",{href:!0});var xRr=s(Wx);yUe=r(xRr,"RoFormerTokenizerFast"),xRr.forEach(t),wUe=r(YL," (RoFormer model)"),YL.forEach(t),AUe=i(y),qg=n(y,"LI",{});var OTe=s(qg);SU=n(OTe,"STRONG",{});var kRr=s(SU);LUe=r(kRr,"speech_to_text"),kRr.forEach(t),BUe=r(OTe," \u2014 "),Qx=n(OTe,"A",{href:!0});var RRr=s(Qx);xUe=r(RRr,"Speech2TextTokenizer"),RRr.forEach(t),kUe=r(OTe," (Speech2Text model)"),OTe.forEach(t),RUe=i(y),Gg=n(y,"LI",{});var XTe=s(Gg);PU=n(XTe,"STRONG",{});var SRr=s(PU);SUe=r(SRr,"speech_to_text_2"),SRr.forEach(t),PUe=r(XTe," \u2014 "),Hx=n(XTe,"A",{href:!0});var PRr=s(Hx);$Ue=r(PRr,"Speech2Text2Tokenizer"),PRr.forEach(t),IUe=r(XTe," (Speech2Text2 model)"),XTe.forEach(t),DUe=i(y),As=n(y,"LI",{});var KL=s(As);$U=n(KL,"STRONG",{});var $Rr=s($U);jUe=r($Rr,"splinter"),$Rr.forEach(t),NUe=r(KL," \u2014 "),Ux=n(KL,"A",{href:!0});var IRr=s(Ux);qUe=r(IRr,"SplinterTokenizer"),IRr.forEach(t),GUe=r(KL," or "),Jx=n(KL,"A",{href:!0});var DRr=s(Jx);OUe=r(DRr,"SplinterTokenizerFast"),DRr.forEach(t),XUe=r(KL," (Splinter model)"),KL.forEach(t),VUe=i(y),Ls=n(y,"LI",{});var ZL=s(Ls);IU=n(ZL,"STRONG",{});var jRr=s(IU);zUe=r(jRr,"squeezebert"),jRr.forEach(t),WUe=r(ZL," \u2014 "),Yx=n(ZL,"A",{href:!0});var NRr=s(Yx);QUe=r(NRr,"SqueezeBertTokenizer"),NRr.forEach(t),HUe=r(ZL," or "),Kx=n(ZL,"A",{href:!0});var qRr=s(Kx);UUe=r(qRr,"SqueezeBertTokenizerFast"),qRr.forEach(t),JUe=r(ZL," (SqueezeBERT model)"),ZL.forEach(t),YUe=i(y),Bs=n(y,"LI",{});var e8=s(Bs);DU=n(e8,"STRONG",{});var GRr=s(DU);KUe=r(GRr,"t5"),GRr.forEach(t),ZUe=r(e8," \u2014 "),Zx=n(e8,"A",{href:!0});var ORr=s(Zx);eJe=r(ORr,"T5Tokenizer"),ORr.forEach(t),oJe=r(e8," or "),ek=n(e8,"A",{href:!0});var XRr=s(ek);rJe=r(XRr,"T5TokenizerFast"),XRr.forEach(t),tJe=r(e8," (T5 model)"),e8.forEach(t),aJe=i(y),Og=n(y,"LI",{});var VTe=s(Og);jU=n(VTe,"STRONG",{});var VRr=s(jU);nJe=r(VRr,"tapas"),VRr.forEach(t),sJe=r(VTe," \u2014 "),ok=n(VTe,"A",{href:!0});var zRr=s(ok);lJe=r(zRr,"TapasTokenizer"),zRr.forEach(t),iJe=r(VTe," (TAPAS model)"),VTe.forEach(t),dJe=i(y),Xg=n(y,"LI",{});var zTe=s(Xg);NU=n(zTe,"STRONG",{});var WRr=s(NU);cJe=r(WRr,"transfo-xl"),WRr.forEach(t),fJe=r(zTe," \u2014 "),rk=n(zTe,"A",{href:!0});var QRr=s(rk);mJe=r(QRr,"TransfoXLTokenizer"),QRr.forEach(t),gJe=r(zTe," (Transformer-XL model)"),zTe.forEach(t),hJe=i(y),Vg=n(y,"LI",{});var WTe=s(Vg);qU=n(WTe,"STRONG",{});var HRr=s(qU);uJe=r(HRr,"wav2vec2"),HRr.forEach(t),pJe=r(WTe," \u2014 "),tk=n(WTe,"A",{href:!0});var URr=s(tk);_Je=r(URr,"Wav2Vec2CTCTokenizer"),URr.forEach(t),vJe=r(WTe," (Wav2Vec2 model)"),WTe.forEach(t),bJe=i(y),zg=n(y,"LI",{});var QTe=s(zg);GU=n(QTe,"STRONG",{});var JRr=s(GU);TJe=r(JRr,"wav2vec2_phoneme"),JRr.forEach(t),FJe=r(QTe," \u2014 "),ak=n(QTe,"A",{href:!0});var YRr=s(ak);CJe=r(YRr,"Wav2Vec2PhonemeCTCTokenizer"),YRr.forEach(t),MJe=r(QTe," (Wav2Vec2Phoneme model)"),QTe.forEach(t),EJe=i(y),xs=n(y,"LI",{});var o8=s(xs);OU=n(o8,"STRONG",{});var KRr=s(OU);yJe=r(KRr,"xglm"),KRr.forEach(t),wJe=r(o8," \u2014 "),nk=n(o8,"A",{href:!0});var ZRr=s(nk);AJe=r(ZRr,"XGLMTokenizer"),ZRr.forEach(t),LJe=r(o8," or "),sk=n(o8,"A",{href:!0});var eSr=s(sk);BJe=r(eSr,"XGLMTokenizerFast"),eSr.forEach(t),xJe=r(o8," (XGLM model)"),o8.forEach(t),kJe=i(y),Wg=n(y,"LI",{});var HTe=s(Wg);XU=n(HTe,"STRONG",{});var oSr=s(XU);RJe=r(oSr,"xlm"),oSr.forEach(t),SJe=r(HTe," \u2014 "),lk=n(HTe,"A",{href:!0});var rSr=s(lk);PJe=r(rSr,"XLMTokenizer"),rSr.forEach(t),$Je=r(HTe," (XLM model)"),HTe.forEach(t),IJe=i(y),Qg=n(y,"LI",{});var UTe=s(Qg);VU=n(UTe,"STRONG",{});var tSr=s(VU);DJe=r(tSr,"xlm-prophetnet"),tSr.forEach(t),jJe=r(UTe," \u2014 "),ik=n(UTe,"A",{href:!0});var aSr=s(ik);NJe=r(aSr,"XLMProphetNetTokenizer"),aSr.forEach(t),qJe=r(UTe," (XLMProphetNet model)"),UTe.forEach(t),GJe=i(y),ks=n(y,"LI",{});var r8=s(ks);zU=n(r8,"STRONG",{});var nSr=s(zU);OJe=r(nSr,"xlm-roberta"),nSr.forEach(t),XJe=r(r8," \u2014 "),dk=n(r8,"A",{href:!0});var sSr=s(dk);VJe=r(sSr,"XLMRobertaTokenizer"),sSr.forEach(t),zJe=r(r8," or "),ck=n(r8,"A",{href:!0});var lSr=s(ck);WJe=r(lSr,"XLMRobertaTokenizerFast"),lSr.forEach(t),QJe=r(r8," (XLM-RoBERTa model)"),r8.forEach(t),HJe=i(y),Rs=n(y,"LI",{});var t8=s(Rs);WU=n(t8,"STRONG",{});var iSr=s(WU);UJe=r(iSr,"xlnet"),iSr.forEach(t),JJe=r(t8," \u2014 "),fk=n(t8,"A",{href:!0});var dSr=s(fk);YJe=r(dSr,"XLNetTokenizer"),dSr.forEach(t),KJe=r(t8," or "),mk=n(t8,"A",{href:!0});var cSr=s(mk);ZJe=r(cSr,"XLNetTokenizerFast"),cSr.forEach(t),eYe=r(t8," (XLNet model)"),t8.forEach(t),y.forEach(t),oYe=i(da),QU=n(da,"P",{});var fSr=s(QU);rYe=r(fSr,"Examples:"),fSr.forEach(t),tYe=i(da),m(qE.$$.fragment,da),da.forEach(t),aYe=i(Ds),Hg=n(Ds,"DIV",{class:!0});var Ixe=s(Hg);m(GE.$$.fragment,Ixe),nYe=i(Ixe),HU=n(Ixe,"P",{});var mSr=s(HU);sYe=r(mSr,"Register a new tokenizer in this mapping."),mSr.forEach(t),Ixe.forEach(t),Ds.forEach(t),P9e=i(c),Ni=n(c,"H2",{class:!0});var Dxe=s(Ni);Ug=n(Dxe,"A",{id:!0,class:!0,href:!0});var gSr=s(Ug);UU=n(gSr,"SPAN",{});var hSr=s(UU);m(OE.$$.fragment,hSr),hSr.forEach(t),gSr.forEach(t),lYe=i(Dxe),JU=n(Dxe,"SPAN",{});var uSr=s(JU);iYe=r(uSr,"AutoFeatureExtractor"),uSr.forEach(t),Dxe.forEach(t),$9e=i(c),zo=n(c,"DIV",{class:!0});var js=s(zo);m(XE.$$.fragment,js),dYe=i(js),VE=n(js,"P",{});var jxe=s(VE);cYe=r(jxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=n(jxe,"A",{href:!0});var pSr=s(gk);fYe=r(pSr,"AutoFeatureExtractor.from_pretrained()"),pSr.forEach(t),mYe=r(jxe," class method."),jxe.forEach(t),gYe=i(js),zE=n(js,"P",{});var Nxe=s(zE);hYe=r(Nxe,"This class cannot be instantiated directly using "),YU=n(Nxe,"CODE",{});var _Sr=s(YU);uYe=r(_Sr,"__init__()"),_Sr.forEach(t),pYe=r(Nxe," (throws an error)."),Nxe.forEach(t),_Ye=i(js),xe=n(js,"DIV",{class:!0});var St=s(xe);m(WE.$$.fragment,St),vYe=i(St),KU=n(St,"P",{});var vSr=s(KU);bYe=r(vSr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vSr.forEach(t),TYe=i(St),ja=n(St,"P",{});var yM=s(ja);FYe=r(yM,"The feature extractor class to instantiate is selected based on the "),ZU=n(yM,"CODE",{});var bSr=s(ZU);CYe=r(bSr,"model_type"),bSr.forEach(t),MYe=r(yM,` property of the config object
(either passed as an argument or loaded from `),eJ=n(yM,"CODE",{});var TSr=s(eJ);EYe=r(TSr,"pretrained_model_name_or_path"),TSr.forEach(t),yYe=r(yM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=n(yM,"CODE",{});var FSr=s(oJ);wYe=r(FSr,"pretrained_model_name_or_path"),FSr.forEach(t),AYe=r(yM,":"),yM.forEach(t),LYe=i(St),se=n(St,"UL",{});var de=s(se);Jg=n(de,"LI",{});var JTe=s(Jg);rJ=n(JTe,"STRONG",{});var CSr=s(rJ);BYe=r(CSr,"beit"),CSr.forEach(t),xYe=r(JTe," \u2014 "),hk=n(JTe,"A",{href:!0});var MSr=s(hk);kYe=r(MSr,"BeitFeatureExtractor"),MSr.forEach(t),RYe=r(JTe," (BEiT model)"),JTe.forEach(t),SYe=i(de),Yg=n(de,"LI",{});var YTe=s(Yg);tJ=n(YTe,"STRONG",{});var ESr=s(tJ);PYe=r(ESr,"clip"),ESr.forEach(t),$Ye=r(YTe," \u2014 "),uk=n(YTe,"A",{href:!0});var ySr=s(uk);IYe=r(ySr,"CLIPFeatureExtractor"),ySr.forEach(t),DYe=r(YTe," (CLIP model)"),YTe.forEach(t),jYe=i(de),Kg=n(de,"LI",{});var KTe=s(Kg);aJ=n(KTe,"STRONG",{});var wSr=s(aJ);NYe=r(wSr,"convnext"),wSr.forEach(t),qYe=r(KTe," \u2014 "),pk=n(KTe,"A",{href:!0});var ASr=s(pk);GYe=r(ASr,"ConvNextFeatureExtractor"),ASr.forEach(t),OYe=r(KTe," (ConvNext model)"),KTe.forEach(t),XYe=i(de),Zg=n(de,"LI",{});var ZTe=s(Zg);nJ=n(ZTe,"STRONG",{});var LSr=s(nJ);VYe=r(LSr,"deit"),LSr.forEach(t),zYe=r(ZTe," \u2014 "),_k=n(ZTe,"A",{href:!0});var BSr=s(_k);WYe=r(BSr,"DeiTFeatureExtractor"),BSr.forEach(t),QYe=r(ZTe," (DeiT model)"),ZTe.forEach(t),HYe=i(de),eh=n(de,"LI",{});var e7e=s(eh);sJ=n(e7e,"STRONG",{});var xSr=s(sJ);UYe=r(xSr,"detr"),xSr.forEach(t),JYe=r(e7e," \u2014 "),vk=n(e7e,"A",{href:!0});var kSr=s(vk);YYe=r(kSr,"DetrFeatureExtractor"),kSr.forEach(t),KYe=r(e7e," (DETR model)"),e7e.forEach(t),ZYe=i(de),oh=n(de,"LI",{});var o7e=s(oh);lJ=n(o7e,"STRONG",{});var RSr=s(lJ);eKe=r(RSr,"hubert"),RSr.forEach(t),oKe=r(o7e," \u2014 "),bk=n(o7e,"A",{href:!0});var SSr=s(bk);rKe=r(SSr,"Wav2Vec2FeatureExtractor"),SSr.forEach(t),tKe=r(o7e," (Hubert model)"),o7e.forEach(t),aKe=i(de),rh=n(de,"LI",{});var r7e=s(rh);iJ=n(r7e,"STRONG",{});var PSr=s(iJ);nKe=r(PSr,"layoutlmv2"),PSr.forEach(t),sKe=r(r7e," \u2014 "),Tk=n(r7e,"A",{href:!0});var $Sr=s(Tk);lKe=r($Sr,"LayoutLMv2FeatureExtractor"),$Sr.forEach(t),iKe=r(r7e," (LayoutLMv2 model)"),r7e.forEach(t),dKe=i(de),th=n(de,"LI",{});var t7e=s(th);dJ=n(t7e,"STRONG",{});var ISr=s(dJ);cKe=r(ISr,"perceiver"),ISr.forEach(t),fKe=r(t7e," \u2014 "),Fk=n(t7e,"A",{href:!0});var DSr=s(Fk);mKe=r(DSr,"PerceiverFeatureExtractor"),DSr.forEach(t),gKe=r(t7e," (Perceiver model)"),t7e.forEach(t),hKe=i(de),ah=n(de,"LI",{});var a7e=s(ah);cJ=n(a7e,"STRONG",{});var jSr=s(cJ);uKe=r(jSr,"poolformer"),jSr.forEach(t),pKe=r(a7e," \u2014 "),Ck=n(a7e,"A",{href:!0});var NSr=s(Ck);_Ke=r(NSr,"PoolFormerFeatureExtractor"),NSr.forEach(t),vKe=r(a7e," (PoolFormer model)"),a7e.forEach(t),bKe=i(de),nh=n(de,"LI",{});var n7e=s(nh);fJ=n(n7e,"STRONG",{});var qSr=s(fJ);TKe=r(qSr,"segformer"),qSr.forEach(t),FKe=r(n7e," \u2014 "),Mk=n(n7e,"A",{href:!0});var GSr=s(Mk);CKe=r(GSr,"SegformerFeatureExtractor"),GSr.forEach(t),MKe=r(n7e," (SegFormer model)"),n7e.forEach(t),EKe=i(de),sh=n(de,"LI",{});var s7e=s(sh);mJ=n(s7e,"STRONG",{});var OSr=s(mJ);yKe=r(OSr,"speech_to_text"),OSr.forEach(t),wKe=r(s7e," \u2014 "),Ek=n(s7e,"A",{href:!0});var XSr=s(Ek);AKe=r(XSr,"Speech2TextFeatureExtractor"),XSr.forEach(t),LKe=r(s7e," (Speech2Text model)"),s7e.forEach(t),BKe=i(de),lh=n(de,"LI",{});var l7e=s(lh);gJ=n(l7e,"STRONG",{});var VSr=s(gJ);xKe=r(VSr,"swin"),VSr.forEach(t),kKe=r(l7e," \u2014 "),yk=n(l7e,"A",{href:!0});var zSr=s(yk);RKe=r(zSr,"ViTFeatureExtractor"),zSr.forEach(t),SKe=r(l7e," (Swin model)"),l7e.forEach(t),PKe=i(de),ih=n(de,"LI",{});var i7e=s(ih);hJ=n(i7e,"STRONG",{});var WSr=s(hJ);$Ke=r(WSr,"vit"),WSr.forEach(t),IKe=r(i7e," \u2014 "),wk=n(i7e,"A",{href:!0});var QSr=s(wk);DKe=r(QSr,"ViTFeatureExtractor"),QSr.forEach(t),jKe=r(i7e," (ViT model)"),i7e.forEach(t),NKe=i(de),dh=n(de,"LI",{});var d7e=s(dh);uJ=n(d7e,"STRONG",{});var HSr=s(uJ);qKe=r(HSr,"vit_mae"),HSr.forEach(t),GKe=r(d7e," \u2014 "),Ak=n(d7e,"A",{href:!0});var USr=s(Ak);OKe=r(USr,"ViTFeatureExtractor"),USr.forEach(t),XKe=r(d7e," (ViTMAE model)"),d7e.forEach(t),VKe=i(de),ch=n(de,"LI",{});var c7e=s(ch);pJ=n(c7e,"STRONG",{});var JSr=s(pJ);zKe=r(JSr,"wav2vec2"),JSr.forEach(t),WKe=r(c7e," \u2014 "),Lk=n(c7e,"A",{href:!0});var YSr=s(Lk);QKe=r(YSr,"Wav2Vec2FeatureExtractor"),YSr.forEach(t),HKe=r(c7e," (Wav2Vec2 model)"),c7e.forEach(t),de.forEach(t),UKe=i(St),m(fh.$$.fragment,St),JKe=i(St),_J=n(St,"P",{});var KSr=s(_J);YKe=r(KSr,"Examples:"),KSr.forEach(t),KKe=i(St),m(QE.$$.fragment,St),St.forEach(t),ZKe=i(js),mh=n(js,"DIV",{class:!0});var qxe=s(mh);m(HE.$$.fragment,qxe),eZe=i(qxe),vJ=n(qxe,"P",{});var ZSr=s(vJ);oZe=r(ZSr,"Register a new feature extractor for this class."),ZSr.forEach(t),qxe.forEach(t),js.forEach(t),I9e=i(c),qi=n(c,"H2",{class:!0});var Gxe=s(qi);gh=n(Gxe,"A",{id:!0,class:!0,href:!0});var ePr=s(gh);bJ=n(ePr,"SPAN",{});var oPr=s(bJ);m(UE.$$.fragment,oPr),oPr.forEach(t),ePr.forEach(t),rZe=i(Gxe),TJ=n(Gxe,"SPAN",{});var rPr=s(TJ);tZe=r(rPr,"AutoProcessor"),rPr.forEach(t),Gxe.forEach(t),D9e=i(c),Wo=n(c,"DIV",{class:!0});var Ns=s(Wo);m(JE.$$.fragment,Ns),aZe=i(Ns),YE=n(Ns,"P",{});var Oxe=s(YE);nZe=r(Oxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=n(Oxe,"A",{href:!0});var tPr=s(Bk);sZe=r(tPr,"AutoProcessor.from_pretrained()"),tPr.forEach(t),lZe=r(Oxe," class method."),Oxe.forEach(t),iZe=i(Ns),KE=n(Ns,"P",{});var Xxe=s(KE);dZe=r(Xxe,"This class cannot be instantiated directly using "),FJ=n(Xxe,"CODE",{});var aPr=s(FJ);cZe=r(aPr,"__init__()"),aPr.forEach(t),fZe=r(Xxe," (throws an error)."),Xxe.forEach(t),mZe=i(Ns),ke=n(Ns,"DIV",{class:!0});var Pt=s(ke);m(ZE.$$.fragment,Pt),gZe=i(Pt),CJ=n(Pt,"P",{});var nPr=s(CJ);hZe=r(nPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nPr.forEach(t),uZe=i(Pt),Gi=n(Pt,"P",{});var RV=s(Gi);pZe=r(RV,"The processor class to instantiate is selected based on the "),MJ=n(RV,"CODE",{});var sPr=s(MJ);_Ze=r(sPr,"model_type"),sPr.forEach(t),vZe=r(RV,` property of the config object (either
passed as an argument or loaded from `),EJ=n(RV,"CODE",{});var lPr=s(EJ);bZe=r(lPr,"pretrained_model_name_or_path"),lPr.forEach(t),TZe=r(RV," if possible):"),RV.forEach(t),FZe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);hh=n(jo,"LI",{});var f7e=s(hh);yJ=n(f7e,"STRONG",{});var iPr=s(yJ);CZe=r(iPr,"clip"),iPr.forEach(t),MZe=r(f7e," \u2014 "),xk=n(f7e,"A",{href:!0});var dPr=s(xk);EZe=r(dPr,"CLIPProcessor"),dPr.forEach(t),yZe=r(f7e," (CLIP model)"),f7e.forEach(t),wZe=i(jo),uh=n(jo,"LI",{});var m7e=s(uh);wJ=n(m7e,"STRONG",{});var cPr=s(wJ);AZe=r(cPr,"layoutlmv2"),cPr.forEach(t),LZe=r(m7e," \u2014 "),kk=n(m7e,"A",{href:!0});var fPr=s(kk);BZe=r(fPr,"LayoutLMv2Processor"),fPr.forEach(t),xZe=r(m7e," (LayoutLMv2 model)"),m7e.forEach(t),kZe=i(jo),ph=n(jo,"LI",{});var g7e=s(ph);AJ=n(g7e,"STRONG",{});var mPr=s(AJ);RZe=r(mPr,"layoutxlm"),mPr.forEach(t),SZe=r(g7e," \u2014 "),Rk=n(g7e,"A",{href:!0});var gPr=s(Rk);PZe=r(gPr,"LayoutXLMProcessor"),gPr.forEach(t),$Ze=r(g7e," (LayoutXLM model)"),g7e.forEach(t),IZe=i(jo),_h=n(jo,"LI",{});var h7e=s(_h);LJ=n(h7e,"STRONG",{});var hPr=s(LJ);DZe=r(hPr,"speech_to_text"),hPr.forEach(t),jZe=r(h7e," \u2014 "),Sk=n(h7e,"A",{href:!0});var uPr=s(Sk);NZe=r(uPr,"Speech2TextProcessor"),uPr.forEach(t),qZe=r(h7e," (Speech2Text model)"),h7e.forEach(t),GZe=i(jo),vh=n(jo,"LI",{});var u7e=s(vh);BJ=n(u7e,"STRONG",{});var pPr=s(BJ);OZe=r(pPr,"speech_to_text_2"),pPr.forEach(t),XZe=r(u7e," \u2014 "),Pk=n(u7e,"A",{href:!0});var _Pr=s(Pk);VZe=r(_Pr,"Speech2Text2Processor"),_Pr.forEach(t),zZe=r(u7e," (Speech2Text2 model)"),u7e.forEach(t),WZe=i(jo),bh=n(jo,"LI",{});var p7e=s(bh);xJ=n(p7e,"STRONG",{});var vPr=s(xJ);QZe=r(vPr,"trocr"),vPr.forEach(t),HZe=r(p7e," \u2014 "),$k=n(p7e,"A",{href:!0});var bPr=s($k);UZe=r(bPr,"TrOCRProcessor"),bPr.forEach(t),JZe=r(p7e," (TrOCR model)"),p7e.forEach(t),YZe=i(jo),Th=n(jo,"LI",{});var _7e=s(Th);kJ=n(_7e,"STRONG",{});var TPr=s(kJ);KZe=r(TPr,"vision-text-dual-encoder"),TPr.forEach(t),ZZe=r(_7e," \u2014 "),Ik=n(_7e,"A",{href:!0});var FPr=s(Ik);eeo=r(FPr,"VisionTextDualEncoderProcessor"),FPr.forEach(t),oeo=r(_7e," (VisionTextDualEncoder model)"),_7e.forEach(t),reo=i(jo),Fh=n(jo,"LI",{});var v7e=s(Fh);RJ=n(v7e,"STRONG",{});var CPr=s(RJ);teo=r(CPr,"wav2vec2"),CPr.forEach(t),aeo=r(v7e," \u2014 "),Dk=n(v7e,"A",{href:!0});var MPr=s(Dk);neo=r(MPr,"Wav2Vec2Processor"),MPr.forEach(t),seo=r(v7e," (Wav2Vec2 model)"),v7e.forEach(t),jo.forEach(t),leo=i(Pt),m(Ch.$$.fragment,Pt),ieo=i(Pt),SJ=n(Pt,"P",{});var EPr=s(SJ);deo=r(EPr,"Examples:"),EPr.forEach(t),ceo=i(Pt),m(e3.$$.fragment,Pt),Pt.forEach(t),feo=i(Ns),Mh=n(Ns,"DIV",{class:!0});var Vxe=s(Mh);m(o3.$$.fragment,Vxe),meo=i(Vxe),PJ=n(Vxe,"P",{});var yPr=s(PJ);geo=r(yPr,"Register a new processor for this class."),yPr.forEach(t),Vxe.forEach(t),Ns.forEach(t),j9e=i(c),Oi=n(c,"H2",{class:!0});var zxe=s(Oi);Eh=n(zxe,"A",{id:!0,class:!0,href:!0});var wPr=s(Eh);$J=n(wPr,"SPAN",{});var APr=s($J);m(r3.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),heo=i(zxe),IJ=n(zxe,"SPAN",{});var LPr=s(IJ);ueo=r(LPr,"AutoModel"),LPr.forEach(t),zxe.forEach(t),N9e=i(c),Qo=n(c,"DIV",{class:!0});var qs=s(Qo);m(t3.$$.fragment,qs),peo=i(qs),Xi=n(qs,"P",{});var SV=s(Xi);_eo=r(SV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=n(SV,"CODE",{});var BPr=s(DJ);veo=r(BPr,"from_pretrained()"),BPr.forEach(t),beo=r(SV,"class method or the "),jJ=n(SV,"CODE",{});var xPr=s(jJ);Teo=r(xPr,"from_config()"),xPr.forEach(t),Feo=r(SV,`class
method.`),SV.forEach(t),Ceo=i(qs),a3=n(qs,"P",{});var Wxe=s(a3);Meo=r(Wxe,"This class cannot be instantiated directly using "),NJ=n(Wxe,"CODE",{});var kPr=s(NJ);Eeo=r(kPr,"__init__()"),kPr.forEach(t),yeo=r(Wxe," (throws an error)."),Wxe.forEach(t),weo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(n3.$$.fragment,Gs),Aeo=i(Gs),qJ=n(Gs,"P",{});var RPr=s(qJ);Leo=r(RPr,"Instantiates one of the base model classes of the library from a configuration."),RPr.forEach(t),Beo=i(Gs),Vi=n(Gs,"P",{});var PV=s(Vi);xeo=r(PV,`Note:
Loading a model from its configuration file does `),GJ=n(PV,"STRONG",{});var SPr=s(GJ);keo=r(SPr,"not"),SPr.forEach(t),Reo=r(PV,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(PV,"CODE",{});var PPr=s(OJ);Seo=r(PPr,"from_pretrained()"),PPr.forEach(t),Peo=r(PV,"to load the model weights."),PV.forEach(t),$eo=i(Gs),XJ=n(Gs,"P",{});var $Pr=s(XJ);Ieo=r($Pr,"Examples:"),$Pr.forEach(t),Deo=i(Gs),m(s3.$$.fragment,Gs),Gs.forEach(t),jeo=i(qs),Re=n(qs,"DIV",{class:!0});var $t=s(Re);m(l3.$$.fragment,$t),Neo=i($t),VJ=n($t,"P",{});var IPr=s(VJ);qeo=r(IPr,"Instantiate one of the base model classes of the library from a pretrained model."),IPr.forEach(t),Geo=i($t),Na=n($t,"P",{});var wM=s(Na);Oeo=r(wM,"The model class to instantiate is selected based on the "),zJ=n(wM,"CODE",{});var DPr=s(zJ);Xeo=r(DPr,"model_type"),DPr.forEach(t),Veo=r(wM,` property of the config object (either
passed as an argument or loaded from `),WJ=n(wM,"CODE",{});var jPr=s(WJ);zeo=r(jPr,"pretrained_model_name_or_path"),jPr.forEach(t),Weo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=n(wM,"CODE",{});var NPr=s(QJ);Qeo=r(NPr,"pretrained_model_name_or_path"),NPr.forEach(t),Heo=r(wM,":"),wM.forEach(t),Ueo=i($t),F=n($t,"UL",{});var C=s(F);yh=n(C,"LI",{});var b7e=s(yh);HJ=n(b7e,"STRONG",{});var qPr=s(HJ);Jeo=r(qPr,"albert"),qPr.forEach(t),Yeo=r(b7e," \u2014 "),jk=n(b7e,"A",{href:!0});var GPr=s(jk);Keo=r(GPr,"AlbertModel"),GPr.forEach(t),Zeo=r(b7e," (ALBERT model)"),b7e.forEach(t),eoo=i(C),wh=n(C,"LI",{});var T7e=s(wh);UJ=n(T7e,"STRONG",{});var OPr=s(UJ);ooo=r(OPr,"bart"),OPr.forEach(t),roo=r(T7e," \u2014 "),Nk=n(T7e,"A",{href:!0});var XPr=s(Nk);too=r(XPr,"BartModel"),XPr.forEach(t),aoo=r(T7e," (BART model)"),T7e.forEach(t),noo=i(C),Ah=n(C,"LI",{});var F7e=s(Ah);JJ=n(F7e,"STRONG",{});var VPr=s(JJ);soo=r(VPr,"beit"),VPr.forEach(t),loo=r(F7e," \u2014 "),qk=n(F7e,"A",{href:!0});var zPr=s(qk);ioo=r(zPr,"BeitModel"),zPr.forEach(t),doo=r(F7e," (BEiT model)"),F7e.forEach(t),coo=i(C),Lh=n(C,"LI",{});var C7e=s(Lh);YJ=n(C7e,"STRONG",{});var WPr=s(YJ);foo=r(WPr,"bert"),WPr.forEach(t),moo=r(C7e," \u2014 "),Gk=n(C7e,"A",{href:!0});var QPr=s(Gk);goo=r(QPr,"BertModel"),QPr.forEach(t),hoo=r(C7e," (BERT model)"),C7e.forEach(t),uoo=i(C),Bh=n(C,"LI",{});var M7e=s(Bh);KJ=n(M7e,"STRONG",{});var HPr=s(KJ);poo=r(HPr,"bert-generation"),HPr.forEach(t),_oo=r(M7e," \u2014 "),Ok=n(M7e,"A",{href:!0});var UPr=s(Ok);voo=r(UPr,"BertGenerationEncoder"),UPr.forEach(t),boo=r(M7e," (Bert Generation model)"),M7e.forEach(t),Too=i(C),xh=n(C,"LI",{});var E7e=s(xh);ZJ=n(E7e,"STRONG",{});var JPr=s(ZJ);Foo=r(JPr,"big_bird"),JPr.forEach(t),Coo=r(E7e," \u2014 "),Xk=n(E7e,"A",{href:!0});var YPr=s(Xk);Moo=r(YPr,"BigBirdModel"),YPr.forEach(t),Eoo=r(E7e," (BigBird model)"),E7e.forEach(t),yoo=i(C),kh=n(C,"LI",{});var y7e=s(kh);eY=n(y7e,"STRONG",{});var KPr=s(eY);woo=r(KPr,"bigbird_pegasus"),KPr.forEach(t),Aoo=r(y7e," \u2014 "),Vk=n(y7e,"A",{href:!0});var ZPr=s(Vk);Loo=r(ZPr,"BigBirdPegasusModel"),ZPr.forEach(t),Boo=r(y7e," (BigBirdPegasus model)"),y7e.forEach(t),xoo=i(C),Rh=n(C,"LI",{});var w7e=s(Rh);oY=n(w7e,"STRONG",{});var e$r=s(oY);koo=r(e$r,"blenderbot"),e$r.forEach(t),Roo=r(w7e," \u2014 "),zk=n(w7e,"A",{href:!0});var o$r=s(zk);Soo=r(o$r,"BlenderbotModel"),o$r.forEach(t),Poo=r(w7e," (Blenderbot model)"),w7e.forEach(t),$oo=i(C),Sh=n(C,"LI",{});var A7e=s(Sh);rY=n(A7e,"STRONG",{});var r$r=s(rY);Ioo=r(r$r,"blenderbot-small"),r$r.forEach(t),Doo=r(A7e," \u2014 "),Wk=n(A7e,"A",{href:!0});var t$r=s(Wk);joo=r(t$r,"BlenderbotSmallModel"),t$r.forEach(t),Noo=r(A7e," (BlenderbotSmall model)"),A7e.forEach(t),qoo=i(C),Ph=n(C,"LI",{});var L7e=s(Ph);tY=n(L7e,"STRONG",{});var a$r=s(tY);Goo=r(a$r,"camembert"),a$r.forEach(t),Ooo=r(L7e," \u2014 "),Qk=n(L7e,"A",{href:!0});var n$r=s(Qk);Xoo=r(n$r,"CamembertModel"),n$r.forEach(t),Voo=r(L7e," (CamemBERT model)"),L7e.forEach(t),zoo=i(C),$h=n(C,"LI",{});var B7e=s($h);aY=n(B7e,"STRONG",{});var s$r=s(aY);Woo=r(s$r,"canine"),s$r.forEach(t),Qoo=r(B7e," \u2014 "),Hk=n(B7e,"A",{href:!0});var l$r=s(Hk);Hoo=r(l$r,"CanineModel"),l$r.forEach(t),Uoo=r(B7e," (Canine model)"),B7e.forEach(t),Joo=i(C),Ih=n(C,"LI",{});var x7e=s(Ih);nY=n(x7e,"STRONG",{});var i$r=s(nY);Yoo=r(i$r,"clip"),i$r.forEach(t),Koo=r(x7e," \u2014 "),Uk=n(x7e,"A",{href:!0});var d$r=s(Uk);Zoo=r(d$r,"CLIPModel"),d$r.forEach(t),ero=r(x7e," (CLIP model)"),x7e.forEach(t),oro=i(C),Dh=n(C,"LI",{});var k7e=s(Dh);sY=n(k7e,"STRONG",{});var c$r=s(sY);rro=r(c$r,"convbert"),c$r.forEach(t),tro=r(k7e," \u2014 "),Jk=n(k7e,"A",{href:!0});var f$r=s(Jk);aro=r(f$r,"ConvBertModel"),f$r.forEach(t),nro=r(k7e," (ConvBERT model)"),k7e.forEach(t),sro=i(C),jh=n(C,"LI",{});var R7e=s(jh);lY=n(R7e,"STRONG",{});var m$r=s(lY);lro=r(m$r,"convnext"),m$r.forEach(t),iro=r(R7e," \u2014 "),Yk=n(R7e,"A",{href:!0});var g$r=s(Yk);dro=r(g$r,"ConvNextModel"),g$r.forEach(t),cro=r(R7e," (ConvNext model)"),R7e.forEach(t),fro=i(C),Nh=n(C,"LI",{});var S7e=s(Nh);iY=n(S7e,"STRONG",{});var h$r=s(iY);mro=r(h$r,"ctrl"),h$r.forEach(t),gro=r(S7e," \u2014 "),Kk=n(S7e,"A",{href:!0});var u$r=s(Kk);hro=r(u$r,"CTRLModel"),u$r.forEach(t),uro=r(S7e," (CTRL model)"),S7e.forEach(t),pro=i(C),qh=n(C,"LI",{});var P7e=s(qh);dY=n(P7e,"STRONG",{});var p$r=s(dY);_ro=r(p$r,"data2vec-audio"),p$r.forEach(t),vro=r(P7e," \u2014 "),Zk=n(P7e,"A",{href:!0});var _$r=s(Zk);bro=r(_$r,"Data2VecAudioModel"),_$r.forEach(t),Tro=r(P7e," (Data2VecAudio model)"),P7e.forEach(t),Fro=i(C),Gh=n(C,"LI",{});var $7e=s(Gh);cY=n($7e,"STRONG",{});var v$r=s(cY);Cro=r(v$r,"data2vec-text"),v$r.forEach(t),Mro=r($7e," \u2014 "),eR=n($7e,"A",{href:!0});var b$r=s(eR);Ero=r(b$r,"Data2VecTextModel"),b$r.forEach(t),yro=r($7e," (Data2VecText model)"),$7e.forEach(t),wro=i(C),Oh=n(C,"LI",{});var I7e=s(Oh);fY=n(I7e,"STRONG",{});var T$r=s(fY);Aro=r(T$r,"deberta"),T$r.forEach(t),Lro=r(I7e," \u2014 "),oR=n(I7e,"A",{href:!0});var F$r=s(oR);Bro=r(F$r,"DebertaModel"),F$r.forEach(t),xro=r(I7e," (DeBERTa model)"),I7e.forEach(t),kro=i(C),Xh=n(C,"LI",{});var D7e=s(Xh);mY=n(D7e,"STRONG",{});var C$r=s(mY);Rro=r(C$r,"deberta-v2"),C$r.forEach(t),Sro=r(D7e," \u2014 "),rR=n(D7e,"A",{href:!0});var M$r=s(rR);Pro=r(M$r,"DebertaV2Model"),M$r.forEach(t),$ro=r(D7e," (DeBERTa-v2 model)"),D7e.forEach(t),Iro=i(C),Vh=n(C,"LI",{});var j7e=s(Vh);gY=n(j7e,"STRONG",{});var E$r=s(gY);Dro=r(E$r,"deit"),E$r.forEach(t),jro=r(j7e," \u2014 "),tR=n(j7e,"A",{href:!0});var y$r=s(tR);Nro=r(y$r,"DeiTModel"),y$r.forEach(t),qro=r(j7e," (DeiT model)"),j7e.forEach(t),Gro=i(C),zh=n(C,"LI",{});var N7e=s(zh);hY=n(N7e,"STRONG",{});var w$r=s(hY);Oro=r(w$r,"detr"),w$r.forEach(t),Xro=r(N7e," \u2014 "),aR=n(N7e,"A",{href:!0});var A$r=s(aR);Vro=r(A$r,"DetrModel"),A$r.forEach(t),zro=r(N7e," (DETR model)"),N7e.forEach(t),Wro=i(C),Wh=n(C,"LI",{});var q7e=s(Wh);uY=n(q7e,"STRONG",{});var L$r=s(uY);Qro=r(L$r,"distilbert"),L$r.forEach(t),Hro=r(q7e," \u2014 "),nR=n(q7e,"A",{href:!0});var B$r=s(nR);Uro=r(B$r,"DistilBertModel"),B$r.forEach(t),Jro=r(q7e," (DistilBERT model)"),q7e.forEach(t),Yro=i(C),Qh=n(C,"LI",{});var G7e=s(Qh);pY=n(G7e,"STRONG",{});var x$r=s(pY);Kro=r(x$r,"dpr"),x$r.forEach(t),Zro=r(G7e," \u2014 "),sR=n(G7e,"A",{href:!0});var k$r=s(sR);eto=r(k$r,"DPRQuestionEncoder"),k$r.forEach(t),oto=r(G7e," (DPR model)"),G7e.forEach(t),rto=i(C),Hh=n(C,"LI",{});var O7e=s(Hh);_Y=n(O7e,"STRONG",{});var R$r=s(_Y);tto=r(R$r,"electra"),R$r.forEach(t),ato=r(O7e," \u2014 "),lR=n(O7e,"A",{href:!0});var S$r=s(lR);nto=r(S$r,"ElectraModel"),S$r.forEach(t),sto=r(O7e," (ELECTRA model)"),O7e.forEach(t),lto=i(C),Uh=n(C,"LI",{});var X7e=s(Uh);vY=n(X7e,"STRONG",{});var P$r=s(vY);ito=r(P$r,"flaubert"),P$r.forEach(t),dto=r(X7e," \u2014 "),iR=n(X7e,"A",{href:!0});var $$r=s(iR);cto=r($$r,"FlaubertModel"),$$r.forEach(t),fto=r(X7e," (FlauBERT model)"),X7e.forEach(t),mto=i(C),Jh=n(C,"LI",{});var V7e=s(Jh);bY=n(V7e,"STRONG",{});var I$r=s(bY);gto=r(I$r,"fnet"),I$r.forEach(t),hto=r(V7e," \u2014 "),dR=n(V7e,"A",{href:!0});var D$r=s(dR);uto=r(D$r,"FNetModel"),D$r.forEach(t),pto=r(V7e," (FNet model)"),V7e.forEach(t),_to=i(C),Yh=n(C,"LI",{});var z7e=s(Yh);TY=n(z7e,"STRONG",{});var j$r=s(TY);vto=r(j$r,"fsmt"),j$r.forEach(t),bto=r(z7e," \u2014 "),cR=n(z7e,"A",{href:!0});var N$r=s(cR);Tto=r(N$r,"FSMTModel"),N$r.forEach(t),Fto=r(z7e," (FairSeq Machine-Translation model)"),z7e.forEach(t),Cto=i(C),Ss=n(C,"LI",{});var a8=s(Ss);FY=n(a8,"STRONG",{});var q$r=s(FY);Mto=r(q$r,"funnel"),q$r.forEach(t),Eto=r(a8," \u2014 "),fR=n(a8,"A",{href:!0});var G$r=s(fR);yto=r(G$r,"FunnelModel"),G$r.forEach(t),wto=r(a8," or "),mR=n(a8,"A",{href:!0});var O$r=s(mR);Ato=r(O$r,"FunnelBaseModel"),O$r.forEach(t),Lto=r(a8," (Funnel Transformer model)"),a8.forEach(t),Bto=i(C),Kh=n(C,"LI",{});var W7e=s(Kh);CY=n(W7e,"STRONG",{});var X$r=s(CY);xto=r(X$r,"gpt2"),X$r.forEach(t),kto=r(W7e," \u2014 "),gR=n(W7e,"A",{href:!0});var V$r=s(gR);Rto=r(V$r,"GPT2Model"),V$r.forEach(t),Sto=r(W7e," (OpenAI GPT-2 model)"),W7e.forEach(t),Pto=i(C),Zh=n(C,"LI",{});var Q7e=s(Zh);MY=n(Q7e,"STRONG",{});var z$r=s(MY);$to=r(z$r,"gpt_neo"),z$r.forEach(t),Ito=r(Q7e," \u2014 "),hR=n(Q7e,"A",{href:!0});var W$r=s(hR);Dto=r(W$r,"GPTNeoModel"),W$r.forEach(t),jto=r(Q7e," (GPT Neo model)"),Q7e.forEach(t),Nto=i(C),eu=n(C,"LI",{});var H7e=s(eu);EY=n(H7e,"STRONG",{});var Q$r=s(EY);qto=r(Q$r,"gptj"),Q$r.forEach(t),Gto=r(H7e," \u2014 "),uR=n(H7e,"A",{href:!0});var H$r=s(uR);Oto=r(H$r,"GPTJModel"),H$r.forEach(t),Xto=r(H7e," (GPT-J model)"),H7e.forEach(t),Vto=i(C),ou=n(C,"LI",{});var U7e=s(ou);yY=n(U7e,"STRONG",{});var U$r=s(yY);zto=r(U$r,"hubert"),U$r.forEach(t),Wto=r(U7e," \u2014 "),pR=n(U7e,"A",{href:!0});var J$r=s(pR);Qto=r(J$r,"HubertModel"),J$r.forEach(t),Hto=r(U7e," (Hubert model)"),U7e.forEach(t),Uto=i(C),ru=n(C,"LI",{});var J7e=s(ru);wY=n(J7e,"STRONG",{});var Y$r=s(wY);Jto=r(Y$r,"ibert"),Y$r.forEach(t),Yto=r(J7e," \u2014 "),_R=n(J7e,"A",{href:!0});var K$r=s(_R);Kto=r(K$r,"IBertModel"),K$r.forEach(t),Zto=r(J7e," (I-BERT model)"),J7e.forEach(t),eao=i(C),tu=n(C,"LI",{});var Y7e=s(tu);AY=n(Y7e,"STRONG",{});var Z$r=s(AY);oao=r(Z$r,"imagegpt"),Z$r.forEach(t),rao=r(Y7e," \u2014 "),vR=n(Y7e,"A",{href:!0});var eIr=s(vR);tao=r(eIr,"ImageGPTModel"),eIr.forEach(t),aao=r(Y7e," (ImageGPT model)"),Y7e.forEach(t),nao=i(C),au=n(C,"LI",{});var K7e=s(au);LY=n(K7e,"STRONG",{});var oIr=s(LY);sao=r(oIr,"layoutlm"),oIr.forEach(t),lao=r(K7e," \u2014 "),bR=n(K7e,"A",{href:!0});var rIr=s(bR);iao=r(rIr,"LayoutLMModel"),rIr.forEach(t),dao=r(K7e," (LayoutLM model)"),K7e.forEach(t),cao=i(C),nu=n(C,"LI",{});var Z7e=s(nu);BY=n(Z7e,"STRONG",{});var tIr=s(BY);fao=r(tIr,"layoutlmv2"),tIr.forEach(t),mao=r(Z7e," \u2014 "),TR=n(Z7e,"A",{href:!0});var aIr=s(TR);gao=r(aIr,"LayoutLMv2Model"),aIr.forEach(t),hao=r(Z7e," (LayoutLMv2 model)"),Z7e.forEach(t),uao=i(C),su=n(C,"LI",{});var eFe=s(su);xY=n(eFe,"STRONG",{});var nIr=s(xY);pao=r(nIr,"led"),nIr.forEach(t),_ao=r(eFe," \u2014 "),FR=n(eFe,"A",{href:!0});var sIr=s(FR);vao=r(sIr,"LEDModel"),sIr.forEach(t),bao=r(eFe," (LED model)"),eFe.forEach(t),Tao=i(C),lu=n(C,"LI",{});var oFe=s(lu);kY=n(oFe,"STRONG",{});var lIr=s(kY);Fao=r(lIr,"longformer"),lIr.forEach(t),Cao=r(oFe," \u2014 "),CR=n(oFe,"A",{href:!0});var iIr=s(CR);Mao=r(iIr,"LongformerModel"),iIr.forEach(t),Eao=r(oFe," (Longformer model)"),oFe.forEach(t),yao=i(C),iu=n(C,"LI",{});var rFe=s(iu);RY=n(rFe,"STRONG",{});var dIr=s(RY);wao=r(dIr,"luke"),dIr.forEach(t),Aao=r(rFe," \u2014 "),MR=n(rFe,"A",{href:!0});var cIr=s(MR);Lao=r(cIr,"LukeModel"),cIr.forEach(t),Bao=r(rFe," (LUKE model)"),rFe.forEach(t),xao=i(C),du=n(C,"LI",{});var tFe=s(du);SY=n(tFe,"STRONG",{});var fIr=s(SY);kao=r(fIr,"lxmert"),fIr.forEach(t),Rao=r(tFe," \u2014 "),ER=n(tFe,"A",{href:!0});var mIr=s(ER);Sao=r(mIr,"LxmertModel"),mIr.forEach(t),Pao=r(tFe," (LXMERT model)"),tFe.forEach(t),$ao=i(C),cu=n(C,"LI",{});var aFe=s(cu);PY=n(aFe,"STRONG",{});var gIr=s(PY);Iao=r(gIr,"m2m_100"),gIr.forEach(t),Dao=r(aFe," \u2014 "),yR=n(aFe,"A",{href:!0});var hIr=s(yR);jao=r(hIr,"M2M100Model"),hIr.forEach(t),Nao=r(aFe," (M2M100 model)"),aFe.forEach(t),qao=i(C),fu=n(C,"LI",{});var nFe=s(fu);$Y=n(nFe,"STRONG",{});var uIr=s($Y);Gao=r(uIr,"marian"),uIr.forEach(t),Oao=r(nFe," \u2014 "),wR=n(nFe,"A",{href:!0});var pIr=s(wR);Xao=r(pIr,"MarianModel"),pIr.forEach(t),Vao=r(nFe," (Marian model)"),nFe.forEach(t),zao=i(C),mu=n(C,"LI",{});var sFe=s(mu);IY=n(sFe,"STRONG",{});var _Ir=s(IY);Wao=r(_Ir,"maskformer"),_Ir.forEach(t),Qao=r(sFe," \u2014 "),AR=n(sFe,"A",{href:!0});var vIr=s(AR);Hao=r(vIr,"MaskFormerModel"),vIr.forEach(t),Uao=r(sFe," (MaskFormer model)"),sFe.forEach(t),Jao=i(C),gu=n(C,"LI",{});var lFe=s(gu);DY=n(lFe,"STRONG",{});var bIr=s(DY);Yao=r(bIr,"mbart"),bIr.forEach(t),Kao=r(lFe," \u2014 "),LR=n(lFe,"A",{href:!0});var TIr=s(LR);Zao=r(TIr,"MBartModel"),TIr.forEach(t),eno=r(lFe," (mBART model)"),lFe.forEach(t),ono=i(C),hu=n(C,"LI",{});var iFe=s(hu);jY=n(iFe,"STRONG",{});var FIr=s(jY);rno=r(FIr,"megatron-bert"),FIr.forEach(t),tno=r(iFe," \u2014 "),BR=n(iFe,"A",{href:!0});var CIr=s(BR);ano=r(CIr,"MegatronBertModel"),CIr.forEach(t),nno=r(iFe," (MegatronBert model)"),iFe.forEach(t),sno=i(C),uu=n(C,"LI",{});var dFe=s(uu);NY=n(dFe,"STRONG",{});var MIr=s(NY);lno=r(MIr,"mobilebert"),MIr.forEach(t),ino=r(dFe," \u2014 "),xR=n(dFe,"A",{href:!0});var EIr=s(xR);dno=r(EIr,"MobileBertModel"),EIr.forEach(t),cno=r(dFe," (MobileBERT model)"),dFe.forEach(t),fno=i(C),pu=n(C,"LI",{});var cFe=s(pu);qY=n(cFe,"STRONG",{});var yIr=s(qY);mno=r(yIr,"mpnet"),yIr.forEach(t),gno=r(cFe," \u2014 "),kR=n(cFe,"A",{href:!0});var wIr=s(kR);hno=r(wIr,"MPNetModel"),wIr.forEach(t),uno=r(cFe," (MPNet model)"),cFe.forEach(t),pno=i(C),_u=n(C,"LI",{});var fFe=s(_u);GY=n(fFe,"STRONG",{});var AIr=s(GY);_no=r(AIr,"mt5"),AIr.forEach(t),vno=r(fFe," \u2014 "),RR=n(fFe,"A",{href:!0});var LIr=s(RR);bno=r(LIr,"MT5Model"),LIr.forEach(t),Tno=r(fFe," (mT5 model)"),fFe.forEach(t),Fno=i(C),vu=n(C,"LI",{});var mFe=s(vu);OY=n(mFe,"STRONG",{});var BIr=s(OY);Cno=r(BIr,"nystromformer"),BIr.forEach(t),Mno=r(mFe," \u2014 "),SR=n(mFe,"A",{href:!0});var xIr=s(SR);Eno=r(xIr,"NystromformerModel"),xIr.forEach(t),yno=r(mFe," (Nystromformer model)"),mFe.forEach(t),wno=i(C),bu=n(C,"LI",{});var gFe=s(bu);XY=n(gFe,"STRONG",{});var kIr=s(XY);Ano=r(kIr,"openai-gpt"),kIr.forEach(t),Lno=r(gFe," \u2014 "),PR=n(gFe,"A",{href:!0});var RIr=s(PR);Bno=r(RIr,"OpenAIGPTModel"),RIr.forEach(t),xno=r(gFe," (OpenAI GPT model)"),gFe.forEach(t),kno=i(C),Tu=n(C,"LI",{});var hFe=s(Tu);VY=n(hFe,"STRONG",{});var SIr=s(VY);Rno=r(SIr,"pegasus"),SIr.forEach(t),Sno=r(hFe," \u2014 "),$R=n(hFe,"A",{href:!0});var PIr=s($R);Pno=r(PIr,"PegasusModel"),PIr.forEach(t),$no=r(hFe," (Pegasus model)"),hFe.forEach(t),Ino=i(C),Fu=n(C,"LI",{});var uFe=s(Fu);zY=n(uFe,"STRONG",{});var $Ir=s(zY);Dno=r($Ir,"perceiver"),$Ir.forEach(t),jno=r(uFe," \u2014 "),IR=n(uFe,"A",{href:!0});var IIr=s(IR);Nno=r(IIr,"PerceiverModel"),IIr.forEach(t),qno=r(uFe," (Perceiver model)"),uFe.forEach(t),Gno=i(C),Cu=n(C,"LI",{});var pFe=s(Cu);WY=n(pFe,"STRONG",{});var DIr=s(WY);Ono=r(DIr,"plbart"),DIr.forEach(t),Xno=r(pFe," \u2014 "),DR=n(pFe,"A",{href:!0});var jIr=s(DR);Vno=r(jIr,"PLBartModel"),jIr.forEach(t),zno=r(pFe," (PLBart model)"),pFe.forEach(t),Wno=i(C),Mu=n(C,"LI",{});var _Fe=s(Mu);QY=n(_Fe,"STRONG",{});var NIr=s(QY);Qno=r(NIr,"poolformer"),NIr.forEach(t),Hno=r(_Fe," \u2014 "),jR=n(_Fe,"A",{href:!0});var qIr=s(jR);Uno=r(qIr,"PoolFormerModel"),qIr.forEach(t),Jno=r(_Fe," (PoolFormer model)"),_Fe.forEach(t),Yno=i(C),Eu=n(C,"LI",{});var vFe=s(Eu);HY=n(vFe,"STRONG",{});var GIr=s(HY);Kno=r(GIr,"prophetnet"),GIr.forEach(t),Zno=r(vFe," \u2014 "),NR=n(vFe,"A",{href:!0});var OIr=s(NR);eso=r(OIr,"ProphetNetModel"),OIr.forEach(t),oso=r(vFe," (ProphetNet model)"),vFe.forEach(t),rso=i(C),yu=n(C,"LI",{});var bFe=s(yu);UY=n(bFe,"STRONG",{});var XIr=s(UY);tso=r(XIr,"qdqbert"),XIr.forEach(t),aso=r(bFe," \u2014 "),qR=n(bFe,"A",{href:!0});var VIr=s(qR);nso=r(VIr,"QDQBertModel"),VIr.forEach(t),sso=r(bFe," (QDQBert model)"),bFe.forEach(t),lso=i(C),wu=n(C,"LI",{});var TFe=s(wu);JY=n(TFe,"STRONG",{});var zIr=s(JY);iso=r(zIr,"reformer"),zIr.forEach(t),dso=r(TFe," \u2014 "),GR=n(TFe,"A",{href:!0});var WIr=s(GR);cso=r(WIr,"ReformerModel"),WIr.forEach(t),fso=r(TFe," (Reformer model)"),TFe.forEach(t),mso=i(C),Au=n(C,"LI",{});var FFe=s(Au);YY=n(FFe,"STRONG",{});var QIr=s(YY);gso=r(QIr,"rembert"),QIr.forEach(t),hso=r(FFe," \u2014 "),OR=n(FFe,"A",{href:!0});var HIr=s(OR);uso=r(HIr,"RemBertModel"),HIr.forEach(t),pso=r(FFe," (RemBERT model)"),FFe.forEach(t),_so=i(C),Lu=n(C,"LI",{});var CFe=s(Lu);KY=n(CFe,"STRONG",{});var UIr=s(KY);vso=r(UIr,"retribert"),UIr.forEach(t),bso=r(CFe," \u2014 "),XR=n(CFe,"A",{href:!0});var JIr=s(XR);Tso=r(JIr,"RetriBertModel"),JIr.forEach(t),Fso=r(CFe," (RetriBERT model)"),CFe.forEach(t),Cso=i(C),Bu=n(C,"LI",{});var MFe=s(Bu);ZY=n(MFe,"STRONG",{});var YIr=s(ZY);Mso=r(YIr,"roberta"),YIr.forEach(t),Eso=r(MFe," \u2014 "),VR=n(MFe,"A",{href:!0});var KIr=s(VR);yso=r(KIr,"RobertaModel"),KIr.forEach(t),wso=r(MFe," (RoBERTa model)"),MFe.forEach(t),Aso=i(C),xu=n(C,"LI",{});var EFe=s(xu);eK=n(EFe,"STRONG",{});var ZIr=s(eK);Lso=r(ZIr,"roformer"),ZIr.forEach(t),Bso=r(EFe," \u2014 "),zR=n(EFe,"A",{href:!0});var eDr=s(zR);xso=r(eDr,"RoFormerModel"),eDr.forEach(t),kso=r(EFe," (RoFormer model)"),EFe.forEach(t),Rso=i(C),ku=n(C,"LI",{});var yFe=s(ku);oK=n(yFe,"STRONG",{});var oDr=s(oK);Sso=r(oDr,"segformer"),oDr.forEach(t),Pso=r(yFe," \u2014 "),WR=n(yFe,"A",{href:!0});var rDr=s(WR);$so=r(rDr,"SegformerModel"),rDr.forEach(t),Iso=r(yFe," (SegFormer model)"),yFe.forEach(t),Dso=i(C),Ru=n(C,"LI",{});var wFe=s(Ru);rK=n(wFe,"STRONG",{});var tDr=s(rK);jso=r(tDr,"sew"),tDr.forEach(t),Nso=r(wFe," \u2014 "),QR=n(wFe,"A",{href:!0});var aDr=s(QR);qso=r(aDr,"SEWModel"),aDr.forEach(t),Gso=r(wFe," (SEW model)"),wFe.forEach(t),Oso=i(C),Su=n(C,"LI",{});var AFe=s(Su);tK=n(AFe,"STRONG",{});var nDr=s(tK);Xso=r(nDr,"sew-d"),nDr.forEach(t),Vso=r(AFe," \u2014 "),HR=n(AFe,"A",{href:!0});var sDr=s(HR);zso=r(sDr,"SEWDModel"),sDr.forEach(t),Wso=r(AFe," (SEW-D model)"),AFe.forEach(t),Qso=i(C),Pu=n(C,"LI",{});var LFe=s(Pu);aK=n(LFe,"STRONG",{});var lDr=s(aK);Hso=r(lDr,"speech_to_text"),lDr.forEach(t),Uso=r(LFe," \u2014 "),UR=n(LFe,"A",{href:!0});var iDr=s(UR);Jso=r(iDr,"Speech2TextModel"),iDr.forEach(t),Yso=r(LFe," (Speech2Text model)"),LFe.forEach(t),Kso=i(C),$u=n(C,"LI",{});var BFe=s($u);nK=n(BFe,"STRONG",{});var dDr=s(nK);Zso=r(dDr,"splinter"),dDr.forEach(t),elo=r(BFe," \u2014 "),JR=n(BFe,"A",{href:!0});var cDr=s(JR);olo=r(cDr,"SplinterModel"),cDr.forEach(t),rlo=r(BFe," (Splinter model)"),BFe.forEach(t),tlo=i(C),Iu=n(C,"LI",{});var xFe=s(Iu);sK=n(xFe,"STRONG",{});var fDr=s(sK);alo=r(fDr,"squeezebert"),fDr.forEach(t),nlo=r(xFe," \u2014 "),YR=n(xFe,"A",{href:!0});var mDr=s(YR);slo=r(mDr,"SqueezeBertModel"),mDr.forEach(t),llo=r(xFe," (SqueezeBERT model)"),xFe.forEach(t),ilo=i(C),Du=n(C,"LI",{});var kFe=s(Du);lK=n(kFe,"STRONG",{});var gDr=s(lK);dlo=r(gDr,"swin"),gDr.forEach(t),clo=r(kFe," \u2014 "),KR=n(kFe,"A",{href:!0});var hDr=s(KR);flo=r(hDr,"SwinModel"),hDr.forEach(t),mlo=r(kFe," (Swin model)"),kFe.forEach(t),glo=i(C),ju=n(C,"LI",{});var RFe=s(ju);iK=n(RFe,"STRONG",{});var uDr=s(iK);hlo=r(uDr,"t5"),uDr.forEach(t),ulo=r(RFe," \u2014 "),ZR=n(RFe,"A",{href:!0});var pDr=s(ZR);plo=r(pDr,"T5Model"),pDr.forEach(t),_lo=r(RFe," (T5 model)"),RFe.forEach(t),vlo=i(C),Nu=n(C,"LI",{});var SFe=s(Nu);dK=n(SFe,"STRONG",{});var _Dr=s(dK);blo=r(_Dr,"tapas"),_Dr.forEach(t),Tlo=r(SFe," \u2014 "),eS=n(SFe,"A",{href:!0});var vDr=s(eS);Flo=r(vDr,"TapasModel"),vDr.forEach(t),Clo=r(SFe," (TAPAS model)"),SFe.forEach(t),Mlo=i(C),qu=n(C,"LI",{});var PFe=s(qu);cK=n(PFe,"STRONG",{});var bDr=s(cK);Elo=r(bDr,"transfo-xl"),bDr.forEach(t),ylo=r(PFe," \u2014 "),oS=n(PFe,"A",{href:!0});var TDr=s(oS);wlo=r(TDr,"TransfoXLModel"),TDr.forEach(t),Alo=r(PFe," (Transformer-XL model)"),PFe.forEach(t),Llo=i(C),Gu=n(C,"LI",{});var $Fe=s(Gu);fK=n($Fe,"STRONG",{});var FDr=s(fK);Blo=r(FDr,"unispeech"),FDr.forEach(t),xlo=r($Fe," \u2014 "),rS=n($Fe,"A",{href:!0});var CDr=s(rS);klo=r(CDr,"UniSpeechModel"),CDr.forEach(t),Rlo=r($Fe," (UniSpeech model)"),$Fe.forEach(t),Slo=i(C),Ou=n(C,"LI",{});var IFe=s(Ou);mK=n(IFe,"STRONG",{});var MDr=s(mK);Plo=r(MDr,"unispeech-sat"),MDr.forEach(t),$lo=r(IFe," \u2014 "),tS=n(IFe,"A",{href:!0});var EDr=s(tS);Ilo=r(EDr,"UniSpeechSatModel"),EDr.forEach(t),Dlo=r(IFe," (UniSpeechSat model)"),IFe.forEach(t),jlo=i(C),Xu=n(C,"LI",{});var DFe=s(Xu);gK=n(DFe,"STRONG",{});var yDr=s(gK);Nlo=r(yDr,"vilt"),yDr.forEach(t),qlo=r(DFe," \u2014 "),aS=n(DFe,"A",{href:!0});var wDr=s(aS);Glo=r(wDr,"ViltModel"),wDr.forEach(t),Olo=r(DFe," (ViLT model)"),DFe.forEach(t),Xlo=i(C),Vu=n(C,"LI",{});var jFe=s(Vu);hK=n(jFe,"STRONG",{});var ADr=s(hK);Vlo=r(ADr,"vision-text-dual-encoder"),ADr.forEach(t),zlo=r(jFe," \u2014 "),nS=n(jFe,"A",{href:!0});var LDr=s(nS);Wlo=r(LDr,"VisionTextDualEncoderModel"),LDr.forEach(t),Qlo=r(jFe," (VisionTextDualEncoder model)"),jFe.forEach(t),Hlo=i(C),zu=n(C,"LI",{});var NFe=s(zu);uK=n(NFe,"STRONG",{});var BDr=s(uK);Ulo=r(BDr,"visual_bert"),BDr.forEach(t),Jlo=r(NFe," \u2014 "),sS=n(NFe,"A",{href:!0});var xDr=s(sS);Ylo=r(xDr,"VisualBertModel"),xDr.forEach(t),Klo=r(NFe," (VisualBert model)"),NFe.forEach(t),Zlo=i(C),Wu=n(C,"LI",{});var qFe=s(Wu);pK=n(qFe,"STRONG",{});var kDr=s(pK);eio=r(kDr,"vit"),kDr.forEach(t),oio=r(qFe," \u2014 "),lS=n(qFe,"A",{href:!0});var RDr=s(lS);rio=r(RDr,"ViTModel"),RDr.forEach(t),tio=r(qFe," (ViT model)"),qFe.forEach(t),aio=i(C),Qu=n(C,"LI",{});var GFe=s(Qu);_K=n(GFe,"STRONG",{});var SDr=s(_K);nio=r(SDr,"vit_mae"),SDr.forEach(t),sio=r(GFe," \u2014 "),iS=n(GFe,"A",{href:!0});var PDr=s(iS);lio=r(PDr,"ViTMAEModel"),PDr.forEach(t),iio=r(GFe," (ViTMAE model)"),GFe.forEach(t),dio=i(C),Hu=n(C,"LI",{});var OFe=s(Hu);vK=n(OFe,"STRONG",{});var $Dr=s(vK);cio=r($Dr,"wav2vec2"),$Dr.forEach(t),fio=r(OFe," \u2014 "),dS=n(OFe,"A",{href:!0});var IDr=s(dS);mio=r(IDr,"Wav2Vec2Model"),IDr.forEach(t),gio=r(OFe," (Wav2Vec2 model)"),OFe.forEach(t),hio=i(C),Uu=n(C,"LI",{});var XFe=s(Uu);bK=n(XFe,"STRONG",{});var DDr=s(bK);uio=r(DDr,"wavlm"),DDr.forEach(t),pio=r(XFe," \u2014 "),cS=n(XFe,"A",{href:!0});var jDr=s(cS);_io=r(jDr,"WavLMModel"),jDr.forEach(t),vio=r(XFe," (WavLM model)"),XFe.forEach(t),bio=i(C),Ju=n(C,"LI",{});var VFe=s(Ju);TK=n(VFe,"STRONG",{});var NDr=s(TK);Tio=r(NDr,"xglm"),NDr.forEach(t),Fio=r(VFe," \u2014 "),fS=n(VFe,"A",{href:!0});var qDr=s(fS);Cio=r(qDr,"XGLMModel"),qDr.forEach(t),Mio=r(VFe," (XGLM model)"),VFe.forEach(t),Eio=i(C),Yu=n(C,"LI",{});var zFe=s(Yu);FK=n(zFe,"STRONG",{});var GDr=s(FK);yio=r(GDr,"xlm"),GDr.forEach(t),wio=r(zFe," \u2014 "),mS=n(zFe,"A",{href:!0});var ODr=s(mS);Aio=r(ODr,"XLMModel"),ODr.forEach(t),Lio=r(zFe," (XLM model)"),zFe.forEach(t),Bio=i(C),Ku=n(C,"LI",{});var WFe=s(Ku);CK=n(WFe,"STRONG",{});var XDr=s(CK);xio=r(XDr,"xlm-prophetnet"),XDr.forEach(t),kio=r(WFe," \u2014 "),gS=n(WFe,"A",{href:!0});var VDr=s(gS);Rio=r(VDr,"XLMProphetNetModel"),VDr.forEach(t),Sio=r(WFe," (XLMProphetNet model)"),WFe.forEach(t),Pio=i(C),Zu=n(C,"LI",{});var QFe=s(Zu);MK=n(QFe,"STRONG",{});var zDr=s(MK);$io=r(zDr,"xlm-roberta"),zDr.forEach(t),Iio=r(QFe," \u2014 "),hS=n(QFe,"A",{href:!0});var WDr=s(hS);Dio=r(WDr,"XLMRobertaModel"),WDr.forEach(t),jio=r(QFe," (XLM-RoBERTa model)"),QFe.forEach(t),Nio=i(C),ep=n(C,"LI",{});var HFe=s(ep);EK=n(HFe,"STRONG",{});var QDr=s(EK);qio=r(QDr,"xlm-roberta-xl"),QDr.forEach(t),Gio=r(HFe," \u2014 "),uS=n(HFe,"A",{href:!0});var HDr=s(uS);Oio=r(HDr,"XLMRobertaXLModel"),HDr.forEach(t),Xio=r(HFe," (XLM-RoBERTa-XL model)"),HFe.forEach(t),Vio=i(C),op=n(C,"LI",{});var UFe=s(op);yK=n(UFe,"STRONG",{});var UDr=s(yK);zio=r(UDr,"xlnet"),UDr.forEach(t),Wio=r(UFe," \u2014 "),pS=n(UFe,"A",{href:!0});var JDr=s(pS);Qio=r(JDr,"XLNetModel"),JDr.forEach(t),Hio=r(UFe," (XLNet model)"),UFe.forEach(t),Uio=i(C),rp=n(C,"LI",{});var JFe=s(rp);wK=n(JFe,"STRONG",{});var YDr=s(wK);Jio=r(YDr,"yoso"),YDr.forEach(t),Yio=r(JFe," \u2014 "),_S=n(JFe,"A",{href:!0});var KDr=s(_S);Kio=r(KDr,"YosoModel"),KDr.forEach(t),Zio=r(JFe," (YOSO model)"),JFe.forEach(t),C.forEach(t),edo=i($t),tp=n($t,"P",{});var YFe=s(tp);odo=r(YFe,"The model is set in evaluation mode by default using "),AK=n(YFe,"CODE",{});var ZDr=s(AK);rdo=r(ZDr,"model.eval()"),ZDr.forEach(t),tdo=r(YFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=n(YFe,"CODE",{});var ejr=s(LK);ado=r(ejr,"model.train()"),ejr.forEach(t),YFe.forEach(t),ndo=i($t),BK=n($t,"P",{});var ojr=s(BK);sdo=r(ojr,"Examples:"),ojr.forEach(t),ldo=i($t),m(i3.$$.fragment,$t),$t.forEach(t),qs.forEach(t),q9e=i(c),zi=n(c,"H2",{class:!0});var Qxe=s(zi);ap=n(Qxe,"A",{id:!0,class:!0,href:!0});var rjr=s(ap);xK=n(rjr,"SPAN",{});var tjr=s(xK);m(d3.$$.fragment,tjr),tjr.forEach(t),rjr.forEach(t),ido=i(Qxe),kK=n(Qxe,"SPAN",{});var ajr=s(kK);ddo=r(ajr,"AutoModelForPreTraining"),ajr.forEach(t),Qxe.forEach(t),G9e=i(c),Ho=n(c,"DIV",{class:!0});var Os=s(Ho);m(c3.$$.fragment,Os),cdo=i(Os),Wi=n(Os,"P",{});var $V=s(Wi);fdo=r($V,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=n($V,"CODE",{});var njr=s(RK);mdo=r(njr,"from_pretrained()"),njr.forEach(t),gdo=r($V,"class method or the "),SK=n($V,"CODE",{});var sjr=s(SK);hdo=r(sjr,"from_config()"),sjr.forEach(t),udo=r($V,`class
method.`),$V.forEach(t),pdo=i(Os),f3=n(Os,"P",{});var Hxe=s(f3);_do=r(Hxe,"This class cannot be instantiated directly using "),PK=n(Hxe,"CODE",{});var ljr=s(PK);vdo=r(ljr,"__init__()"),ljr.forEach(t),bdo=r(Hxe," (throws an error)."),Hxe.forEach(t),Tdo=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(m3.$$.fragment,Xs),Fdo=i(Xs),$K=n(Xs,"P",{});var ijr=s($K);Cdo=r(ijr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ijr.forEach(t),Mdo=i(Xs),Qi=n(Xs,"P",{});var IV=s(Qi);Edo=r(IV,`Note:
Loading a model from its configuration file does `),IK=n(IV,"STRONG",{});var djr=s(IK);ydo=r(djr,"not"),djr.forEach(t),wdo=r(IV,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(IV,"CODE",{});var cjr=s(DK);Ado=r(cjr,"from_pretrained()"),cjr.forEach(t),Ldo=r(IV,"to load the model weights."),IV.forEach(t),Bdo=i(Xs),jK=n(Xs,"P",{});var fjr=s(jK);xdo=r(fjr,"Examples:"),fjr.forEach(t),kdo=i(Xs),m(g3.$$.fragment,Xs),Xs.forEach(t),Rdo=i(Os),Se=n(Os,"DIV",{class:!0});var It=s(Se);m(h3.$$.fragment,It),Sdo=i(It),NK=n(It,"P",{});var mjr=s(NK);Pdo=r(mjr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mjr.forEach(t),$do=i(It),qa=n(It,"P",{});var AM=s(qa);Ido=r(AM,"The model class to instantiate is selected based on the "),qK=n(AM,"CODE",{});var gjr=s(qK);Ddo=r(gjr,"model_type"),gjr.forEach(t),jdo=r(AM,` property of the config object (either
passed as an argument or loaded from `),GK=n(AM,"CODE",{});var hjr=s(GK);Ndo=r(hjr,"pretrained_model_name_or_path"),hjr.forEach(t),qdo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=n(AM,"CODE",{});var ujr=s(OK);Gdo=r(ujr,"pretrained_model_name_or_path"),ujr.forEach(t),Odo=r(AM,":"),AM.forEach(t),Xdo=i(It),k=n(It,"UL",{});var S=s(k);np=n(S,"LI",{});var KFe=s(np);XK=n(KFe,"STRONG",{});var pjr=s(XK);Vdo=r(pjr,"albert"),pjr.forEach(t),zdo=r(KFe," \u2014 "),vS=n(KFe,"A",{href:!0});var _jr=s(vS);Wdo=r(_jr,"AlbertForPreTraining"),_jr.forEach(t),Qdo=r(KFe," (ALBERT model)"),KFe.forEach(t),Hdo=i(S),sp=n(S,"LI",{});var ZFe=s(sp);VK=n(ZFe,"STRONG",{});var vjr=s(VK);Udo=r(vjr,"bart"),vjr.forEach(t),Jdo=r(ZFe," \u2014 "),bS=n(ZFe,"A",{href:!0});var bjr=s(bS);Ydo=r(bjr,"BartForConditionalGeneration"),bjr.forEach(t),Kdo=r(ZFe," (BART model)"),ZFe.forEach(t),Zdo=i(S),lp=n(S,"LI",{});var eCe=s(lp);zK=n(eCe,"STRONG",{});var Tjr=s(zK);eco=r(Tjr,"bert"),Tjr.forEach(t),oco=r(eCe," \u2014 "),TS=n(eCe,"A",{href:!0});var Fjr=s(TS);rco=r(Fjr,"BertForPreTraining"),Fjr.forEach(t),tco=r(eCe," (BERT model)"),eCe.forEach(t),aco=i(S),ip=n(S,"LI",{});var oCe=s(ip);WK=n(oCe,"STRONG",{});var Cjr=s(WK);nco=r(Cjr,"big_bird"),Cjr.forEach(t),sco=r(oCe," \u2014 "),FS=n(oCe,"A",{href:!0});var Mjr=s(FS);lco=r(Mjr,"BigBirdForPreTraining"),Mjr.forEach(t),ico=r(oCe," (BigBird model)"),oCe.forEach(t),dco=i(S),dp=n(S,"LI",{});var rCe=s(dp);QK=n(rCe,"STRONG",{});var Ejr=s(QK);cco=r(Ejr,"camembert"),Ejr.forEach(t),fco=r(rCe," \u2014 "),CS=n(rCe,"A",{href:!0});var yjr=s(CS);mco=r(yjr,"CamembertForMaskedLM"),yjr.forEach(t),gco=r(rCe," (CamemBERT model)"),rCe.forEach(t),hco=i(S),cp=n(S,"LI",{});var tCe=s(cp);HK=n(tCe,"STRONG",{});var wjr=s(HK);uco=r(wjr,"ctrl"),wjr.forEach(t),pco=r(tCe," \u2014 "),MS=n(tCe,"A",{href:!0});var Ajr=s(MS);_co=r(Ajr,"CTRLLMHeadModel"),Ajr.forEach(t),vco=r(tCe," (CTRL model)"),tCe.forEach(t),bco=i(S),fp=n(S,"LI",{});var aCe=s(fp);UK=n(aCe,"STRONG",{});var Ljr=s(UK);Tco=r(Ljr,"data2vec-text"),Ljr.forEach(t),Fco=r(aCe," \u2014 "),ES=n(aCe,"A",{href:!0});var Bjr=s(ES);Cco=r(Bjr,"Data2VecTextForMaskedLM"),Bjr.forEach(t),Mco=r(aCe," (Data2VecText model)"),aCe.forEach(t),Eco=i(S),mp=n(S,"LI",{});var nCe=s(mp);JK=n(nCe,"STRONG",{});var xjr=s(JK);yco=r(xjr,"deberta"),xjr.forEach(t),wco=r(nCe," \u2014 "),yS=n(nCe,"A",{href:!0});var kjr=s(yS);Aco=r(kjr,"DebertaForMaskedLM"),kjr.forEach(t),Lco=r(nCe," (DeBERTa model)"),nCe.forEach(t),Bco=i(S),gp=n(S,"LI",{});var sCe=s(gp);YK=n(sCe,"STRONG",{});var Rjr=s(YK);xco=r(Rjr,"deberta-v2"),Rjr.forEach(t),kco=r(sCe," \u2014 "),wS=n(sCe,"A",{href:!0});var Sjr=s(wS);Rco=r(Sjr,"DebertaV2ForMaskedLM"),Sjr.forEach(t),Sco=r(sCe," (DeBERTa-v2 model)"),sCe.forEach(t),Pco=i(S),hp=n(S,"LI",{});var lCe=s(hp);KK=n(lCe,"STRONG",{});var Pjr=s(KK);$co=r(Pjr,"distilbert"),Pjr.forEach(t),Ico=r(lCe," \u2014 "),AS=n(lCe,"A",{href:!0});var $jr=s(AS);Dco=r($jr,"DistilBertForMaskedLM"),$jr.forEach(t),jco=r(lCe," (DistilBERT model)"),lCe.forEach(t),Nco=i(S),up=n(S,"LI",{});var iCe=s(up);ZK=n(iCe,"STRONG",{});var Ijr=s(ZK);qco=r(Ijr,"electra"),Ijr.forEach(t),Gco=r(iCe," \u2014 "),LS=n(iCe,"A",{href:!0});var Djr=s(LS);Oco=r(Djr,"ElectraForPreTraining"),Djr.forEach(t),Xco=r(iCe," (ELECTRA model)"),iCe.forEach(t),Vco=i(S),pp=n(S,"LI",{});var dCe=s(pp);eZ=n(dCe,"STRONG",{});var jjr=s(eZ);zco=r(jjr,"flaubert"),jjr.forEach(t),Wco=r(dCe," \u2014 "),BS=n(dCe,"A",{href:!0});var Njr=s(BS);Qco=r(Njr,"FlaubertWithLMHeadModel"),Njr.forEach(t),Hco=r(dCe," (FlauBERT model)"),dCe.forEach(t),Uco=i(S),_p=n(S,"LI",{});var cCe=s(_p);oZ=n(cCe,"STRONG",{});var qjr=s(oZ);Jco=r(qjr,"fnet"),qjr.forEach(t),Yco=r(cCe," \u2014 "),xS=n(cCe,"A",{href:!0});var Gjr=s(xS);Kco=r(Gjr,"FNetForPreTraining"),Gjr.forEach(t),Zco=r(cCe," (FNet model)"),cCe.forEach(t),efo=i(S),vp=n(S,"LI",{});var fCe=s(vp);rZ=n(fCe,"STRONG",{});var Ojr=s(rZ);ofo=r(Ojr,"fsmt"),Ojr.forEach(t),rfo=r(fCe," \u2014 "),kS=n(fCe,"A",{href:!0});var Xjr=s(kS);tfo=r(Xjr,"FSMTForConditionalGeneration"),Xjr.forEach(t),afo=r(fCe," (FairSeq Machine-Translation model)"),fCe.forEach(t),nfo=i(S),bp=n(S,"LI",{});var mCe=s(bp);tZ=n(mCe,"STRONG",{});var Vjr=s(tZ);sfo=r(Vjr,"funnel"),Vjr.forEach(t),lfo=r(mCe," \u2014 "),RS=n(mCe,"A",{href:!0});var zjr=s(RS);ifo=r(zjr,"FunnelForPreTraining"),zjr.forEach(t),dfo=r(mCe," (Funnel Transformer model)"),mCe.forEach(t),cfo=i(S),Tp=n(S,"LI",{});var gCe=s(Tp);aZ=n(gCe,"STRONG",{});var Wjr=s(aZ);ffo=r(Wjr,"gpt2"),Wjr.forEach(t),mfo=r(gCe," \u2014 "),SS=n(gCe,"A",{href:!0});var Qjr=s(SS);gfo=r(Qjr,"GPT2LMHeadModel"),Qjr.forEach(t),hfo=r(gCe," (OpenAI GPT-2 model)"),gCe.forEach(t),ufo=i(S),Fp=n(S,"LI",{});var hCe=s(Fp);nZ=n(hCe,"STRONG",{});var Hjr=s(nZ);pfo=r(Hjr,"ibert"),Hjr.forEach(t),_fo=r(hCe," \u2014 "),PS=n(hCe,"A",{href:!0});var Ujr=s(PS);vfo=r(Ujr,"IBertForMaskedLM"),Ujr.forEach(t),bfo=r(hCe," (I-BERT model)"),hCe.forEach(t),Tfo=i(S),Cp=n(S,"LI",{});var uCe=s(Cp);sZ=n(uCe,"STRONG",{});var Jjr=s(sZ);Ffo=r(Jjr,"layoutlm"),Jjr.forEach(t),Cfo=r(uCe," \u2014 "),$S=n(uCe,"A",{href:!0});var Yjr=s($S);Mfo=r(Yjr,"LayoutLMForMaskedLM"),Yjr.forEach(t),Efo=r(uCe," (LayoutLM model)"),uCe.forEach(t),yfo=i(S),Mp=n(S,"LI",{});var pCe=s(Mp);lZ=n(pCe,"STRONG",{});var Kjr=s(lZ);wfo=r(Kjr,"longformer"),Kjr.forEach(t),Afo=r(pCe," \u2014 "),IS=n(pCe,"A",{href:!0});var Zjr=s(IS);Lfo=r(Zjr,"LongformerForMaskedLM"),Zjr.forEach(t),Bfo=r(pCe," (Longformer model)"),pCe.forEach(t),xfo=i(S),Ep=n(S,"LI",{});var _Ce=s(Ep);iZ=n(_Ce,"STRONG",{});var eNr=s(iZ);kfo=r(eNr,"lxmert"),eNr.forEach(t),Rfo=r(_Ce," \u2014 "),DS=n(_Ce,"A",{href:!0});var oNr=s(DS);Sfo=r(oNr,"LxmertForPreTraining"),oNr.forEach(t),Pfo=r(_Ce," (LXMERT model)"),_Ce.forEach(t),$fo=i(S),yp=n(S,"LI",{});var vCe=s(yp);dZ=n(vCe,"STRONG",{});var rNr=s(dZ);Ifo=r(rNr,"megatron-bert"),rNr.forEach(t),Dfo=r(vCe," \u2014 "),jS=n(vCe,"A",{href:!0});var tNr=s(jS);jfo=r(tNr,"MegatronBertForPreTraining"),tNr.forEach(t),Nfo=r(vCe," (MegatronBert model)"),vCe.forEach(t),qfo=i(S),wp=n(S,"LI",{});var bCe=s(wp);cZ=n(bCe,"STRONG",{});var aNr=s(cZ);Gfo=r(aNr,"mobilebert"),aNr.forEach(t),Ofo=r(bCe," \u2014 "),NS=n(bCe,"A",{href:!0});var nNr=s(NS);Xfo=r(nNr,"MobileBertForPreTraining"),nNr.forEach(t),Vfo=r(bCe," (MobileBERT model)"),bCe.forEach(t),zfo=i(S),Ap=n(S,"LI",{});var TCe=s(Ap);fZ=n(TCe,"STRONG",{});var sNr=s(fZ);Wfo=r(sNr,"mpnet"),sNr.forEach(t),Qfo=r(TCe," \u2014 "),qS=n(TCe,"A",{href:!0});var lNr=s(qS);Hfo=r(lNr,"MPNetForMaskedLM"),lNr.forEach(t),Ufo=r(TCe," (MPNet model)"),TCe.forEach(t),Jfo=i(S),Lp=n(S,"LI",{});var FCe=s(Lp);mZ=n(FCe,"STRONG",{});var iNr=s(mZ);Yfo=r(iNr,"openai-gpt"),iNr.forEach(t),Kfo=r(FCe," \u2014 "),GS=n(FCe,"A",{href:!0});var dNr=s(GS);Zfo=r(dNr,"OpenAIGPTLMHeadModel"),dNr.forEach(t),emo=r(FCe," (OpenAI GPT model)"),FCe.forEach(t),omo=i(S),Bp=n(S,"LI",{});var CCe=s(Bp);gZ=n(CCe,"STRONG",{});var cNr=s(gZ);rmo=r(cNr,"retribert"),cNr.forEach(t),tmo=r(CCe," \u2014 "),OS=n(CCe,"A",{href:!0});var fNr=s(OS);amo=r(fNr,"RetriBertModel"),fNr.forEach(t),nmo=r(CCe," (RetriBERT model)"),CCe.forEach(t),smo=i(S),xp=n(S,"LI",{});var MCe=s(xp);hZ=n(MCe,"STRONG",{});var mNr=s(hZ);lmo=r(mNr,"roberta"),mNr.forEach(t),imo=r(MCe," \u2014 "),XS=n(MCe,"A",{href:!0});var gNr=s(XS);dmo=r(gNr,"RobertaForMaskedLM"),gNr.forEach(t),cmo=r(MCe," (RoBERTa model)"),MCe.forEach(t),fmo=i(S),kp=n(S,"LI",{});var ECe=s(kp);uZ=n(ECe,"STRONG",{});var hNr=s(uZ);mmo=r(hNr,"squeezebert"),hNr.forEach(t),gmo=r(ECe," \u2014 "),VS=n(ECe,"A",{href:!0});var uNr=s(VS);hmo=r(uNr,"SqueezeBertForMaskedLM"),uNr.forEach(t),umo=r(ECe," (SqueezeBERT model)"),ECe.forEach(t),pmo=i(S),Rp=n(S,"LI",{});var yCe=s(Rp);pZ=n(yCe,"STRONG",{});var pNr=s(pZ);_mo=r(pNr,"t5"),pNr.forEach(t),vmo=r(yCe," \u2014 "),zS=n(yCe,"A",{href:!0});var _Nr=s(zS);bmo=r(_Nr,"T5ForConditionalGeneration"),_Nr.forEach(t),Tmo=r(yCe," (T5 model)"),yCe.forEach(t),Fmo=i(S),Sp=n(S,"LI",{});var wCe=s(Sp);_Z=n(wCe,"STRONG",{});var vNr=s(_Z);Cmo=r(vNr,"tapas"),vNr.forEach(t),Mmo=r(wCe," \u2014 "),WS=n(wCe,"A",{href:!0});var bNr=s(WS);Emo=r(bNr,"TapasForMaskedLM"),bNr.forEach(t),ymo=r(wCe," (TAPAS model)"),wCe.forEach(t),wmo=i(S),Pp=n(S,"LI",{});var ACe=s(Pp);vZ=n(ACe,"STRONG",{});var TNr=s(vZ);Amo=r(TNr,"transfo-xl"),TNr.forEach(t),Lmo=r(ACe," \u2014 "),QS=n(ACe,"A",{href:!0});var FNr=s(QS);Bmo=r(FNr,"TransfoXLLMHeadModel"),FNr.forEach(t),xmo=r(ACe," (Transformer-XL model)"),ACe.forEach(t),kmo=i(S),$p=n(S,"LI",{});var LCe=s($p);bZ=n(LCe,"STRONG",{});var CNr=s(bZ);Rmo=r(CNr,"unispeech"),CNr.forEach(t),Smo=r(LCe," \u2014 "),HS=n(LCe,"A",{href:!0});var MNr=s(HS);Pmo=r(MNr,"UniSpeechForPreTraining"),MNr.forEach(t),$mo=r(LCe," (UniSpeech model)"),LCe.forEach(t),Imo=i(S),Ip=n(S,"LI",{});var BCe=s(Ip);TZ=n(BCe,"STRONG",{});var ENr=s(TZ);Dmo=r(ENr,"unispeech-sat"),ENr.forEach(t),jmo=r(BCe," \u2014 "),US=n(BCe,"A",{href:!0});var yNr=s(US);Nmo=r(yNr,"UniSpeechSatForPreTraining"),yNr.forEach(t),qmo=r(BCe," (UniSpeechSat model)"),BCe.forEach(t),Gmo=i(S),Dp=n(S,"LI",{});var xCe=s(Dp);FZ=n(xCe,"STRONG",{});var wNr=s(FZ);Omo=r(wNr,"visual_bert"),wNr.forEach(t),Xmo=r(xCe," \u2014 "),JS=n(xCe,"A",{href:!0});var ANr=s(JS);Vmo=r(ANr,"VisualBertForPreTraining"),ANr.forEach(t),zmo=r(xCe," (VisualBert model)"),xCe.forEach(t),Wmo=i(S),jp=n(S,"LI",{});var kCe=s(jp);CZ=n(kCe,"STRONG",{});var LNr=s(CZ);Qmo=r(LNr,"vit_mae"),LNr.forEach(t),Hmo=r(kCe," \u2014 "),YS=n(kCe,"A",{href:!0});var BNr=s(YS);Umo=r(BNr,"ViTMAEForPreTraining"),BNr.forEach(t),Jmo=r(kCe," (ViTMAE model)"),kCe.forEach(t),Ymo=i(S),Np=n(S,"LI",{});var RCe=s(Np);MZ=n(RCe,"STRONG",{});var xNr=s(MZ);Kmo=r(xNr,"wav2vec2"),xNr.forEach(t),Zmo=r(RCe," \u2014 "),KS=n(RCe,"A",{href:!0});var kNr=s(KS);ego=r(kNr,"Wav2Vec2ForPreTraining"),kNr.forEach(t),ogo=r(RCe," (Wav2Vec2 model)"),RCe.forEach(t),rgo=i(S),qp=n(S,"LI",{});var SCe=s(qp);EZ=n(SCe,"STRONG",{});var RNr=s(EZ);tgo=r(RNr,"xlm"),RNr.forEach(t),ago=r(SCe," \u2014 "),ZS=n(SCe,"A",{href:!0});var SNr=s(ZS);ngo=r(SNr,"XLMWithLMHeadModel"),SNr.forEach(t),sgo=r(SCe," (XLM model)"),SCe.forEach(t),lgo=i(S),Gp=n(S,"LI",{});var PCe=s(Gp);yZ=n(PCe,"STRONG",{});var PNr=s(yZ);igo=r(PNr,"xlm-roberta"),PNr.forEach(t),dgo=r(PCe," \u2014 "),eP=n(PCe,"A",{href:!0});var $Nr=s(eP);cgo=r($Nr,"XLMRobertaForMaskedLM"),$Nr.forEach(t),fgo=r(PCe," (XLM-RoBERTa model)"),PCe.forEach(t),mgo=i(S),Op=n(S,"LI",{});var $Ce=s(Op);wZ=n($Ce,"STRONG",{});var INr=s(wZ);ggo=r(INr,"xlm-roberta-xl"),INr.forEach(t),hgo=r($Ce," \u2014 "),oP=n($Ce,"A",{href:!0});var DNr=s(oP);ugo=r(DNr,"XLMRobertaXLForMaskedLM"),DNr.forEach(t),pgo=r($Ce," (XLM-RoBERTa-XL model)"),$Ce.forEach(t),_go=i(S),Xp=n(S,"LI",{});var ICe=s(Xp);AZ=n(ICe,"STRONG",{});var jNr=s(AZ);vgo=r(jNr,"xlnet"),jNr.forEach(t),bgo=r(ICe," \u2014 "),rP=n(ICe,"A",{href:!0});var NNr=s(rP);Tgo=r(NNr,"XLNetLMHeadModel"),NNr.forEach(t),Fgo=r(ICe," (XLNet model)"),ICe.forEach(t),S.forEach(t),Cgo=i(It),Vp=n(It,"P",{});var DCe=s(Vp);Mgo=r(DCe,"The model is set in evaluation mode by default using "),LZ=n(DCe,"CODE",{});var qNr=s(LZ);Ego=r(qNr,"model.eval()"),qNr.forEach(t),ygo=r(DCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=n(DCe,"CODE",{});var GNr=s(BZ);wgo=r(GNr,"model.train()"),GNr.forEach(t),DCe.forEach(t),Ago=i(It),xZ=n(It,"P",{});var ONr=s(xZ);Lgo=r(ONr,"Examples:"),ONr.forEach(t),Bgo=i(It),m(u3.$$.fragment,It),It.forEach(t),Os.forEach(t),O9e=i(c),Hi=n(c,"H2",{class:!0});var Uxe=s(Hi);zp=n(Uxe,"A",{id:!0,class:!0,href:!0});var XNr=s(zp);kZ=n(XNr,"SPAN",{});var VNr=s(kZ);m(p3.$$.fragment,VNr),VNr.forEach(t),XNr.forEach(t),xgo=i(Uxe),RZ=n(Uxe,"SPAN",{});var zNr=s(RZ);kgo=r(zNr,"AutoModelForCausalLM"),zNr.forEach(t),Uxe.forEach(t),X9e=i(c),Uo=n(c,"DIV",{class:!0});var Vs=s(Uo);m(_3.$$.fragment,Vs),Rgo=i(Vs),Ui=n(Vs,"P",{});var DV=s(Ui);Sgo=r(DV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=n(DV,"CODE",{});var WNr=s(SZ);Pgo=r(WNr,"from_pretrained()"),WNr.forEach(t),$go=r(DV,"class method or the "),PZ=n(DV,"CODE",{});var QNr=s(PZ);Igo=r(QNr,"from_config()"),QNr.forEach(t),Dgo=r(DV,`class
method.`),DV.forEach(t),jgo=i(Vs),v3=n(Vs,"P",{});var Jxe=s(v3);Ngo=r(Jxe,"This class cannot be instantiated directly using "),$Z=n(Jxe,"CODE",{});var HNr=s($Z);qgo=r(HNr,"__init__()"),HNr.forEach(t),Ggo=r(Jxe," (throws an error)."),Jxe.forEach(t),Ogo=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(b3.$$.fragment,zs),Xgo=i(zs),IZ=n(zs,"P",{});var UNr=s(IZ);Vgo=r(UNr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UNr.forEach(t),zgo=i(zs),Ji=n(zs,"P",{});var jV=s(Ji);Wgo=r(jV,`Note:
Loading a model from its configuration file does `),DZ=n(jV,"STRONG",{});var JNr=s(DZ);Qgo=r(JNr,"not"),JNr.forEach(t),Hgo=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(jV,"CODE",{});var YNr=s(jZ);Ugo=r(YNr,"from_pretrained()"),YNr.forEach(t),Jgo=r(jV,"to load the model weights."),jV.forEach(t),Ygo=i(zs),NZ=n(zs,"P",{});var KNr=s(NZ);Kgo=r(KNr,"Examples:"),KNr.forEach(t),Zgo=i(zs),m(T3.$$.fragment,zs),zs.forEach(t),eho=i(Vs),Pe=n(Vs,"DIV",{class:!0});var Dt=s(Pe);m(F3.$$.fragment,Dt),oho=i(Dt),qZ=n(Dt,"P",{});var ZNr=s(qZ);rho=r(ZNr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZNr.forEach(t),tho=i(Dt),Ga=n(Dt,"P",{});var LM=s(Ga);aho=r(LM,"The model class to instantiate is selected based on the "),GZ=n(LM,"CODE",{});var eqr=s(GZ);nho=r(eqr,"model_type"),eqr.forEach(t),sho=r(LM,` property of the config object (either
passed as an argument or loaded from `),OZ=n(LM,"CODE",{});var oqr=s(OZ);lho=r(oqr,"pretrained_model_name_or_path"),oqr.forEach(t),iho=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=n(LM,"CODE",{});var rqr=s(XZ);dho=r(rqr,"pretrained_model_name_or_path"),rqr.forEach(t),cho=r(LM,":"),LM.forEach(t),fho=i(Dt),$=n(Dt,"UL",{});var D=s($);Wp=n(D,"LI",{});var jCe=s(Wp);VZ=n(jCe,"STRONG",{});var tqr=s(VZ);mho=r(tqr,"bart"),tqr.forEach(t),gho=r(jCe," \u2014 "),tP=n(jCe,"A",{href:!0});var aqr=s(tP);hho=r(aqr,"BartForCausalLM"),aqr.forEach(t),uho=r(jCe," (BART model)"),jCe.forEach(t),pho=i(D),Qp=n(D,"LI",{});var NCe=s(Qp);zZ=n(NCe,"STRONG",{});var nqr=s(zZ);_ho=r(nqr,"bert"),nqr.forEach(t),vho=r(NCe," \u2014 "),aP=n(NCe,"A",{href:!0});var sqr=s(aP);bho=r(sqr,"BertLMHeadModel"),sqr.forEach(t),Tho=r(NCe," (BERT model)"),NCe.forEach(t),Fho=i(D),Hp=n(D,"LI",{});var qCe=s(Hp);WZ=n(qCe,"STRONG",{});var lqr=s(WZ);Cho=r(lqr,"bert-generation"),lqr.forEach(t),Mho=r(qCe," \u2014 "),nP=n(qCe,"A",{href:!0});var iqr=s(nP);Eho=r(iqr,"BertGenerationDecoder"),iqr.forEach(t),yho=r(qCe," (Bert Generation model)"),qCe.forEach(t),who=i(D),Up=n(D,"LI",{});var GCe=s(Up);QZ=n(GCe,"STRONG",{});var dqr=s(QZ);Aho=r(dqr,"big_bird"),dqr.forEach(t),Lho=r(GCe," \u2014 "),sP=n(GCe,"A",{href:!0});var cqr=s(sP);Bho=r(cqr,"BigBirdForCausalLM"),cqr.forEach(t),xho=r(GCe," (BigBird model)"),GCe.forEach(t),kho=i(D),Jp=n(D,"LI",{});var OCe=s(Jp);HZ=n(OCe,"STRONG",{});var fqr=s(HZ);Rho=r(fqr,"bigbird_pegasus"),fqr.forEach(t),Sho=r(OCe," \u2014 "),lP=n(OCe,"A",{href:!0});var mqr=s(lP);Pho=r(mqr,"BigBirdPegasusForCausalLM"),mqr.forEach(t),$ho=r(OCe," (BigBirdPegasus model)"),OCe.forEach(t),Iho=i(D),Yp=n(D,"LI",{});var XCe=s(Yp);UZ=n(XCe,"STRONG",{});var gqr=s(UZ);Dho=r(gqr,"blenderbot"),gqr.forEach(t),jho=r(XCe," \u2014 "),iP=n(XCe,"A",{href:!0});var hqr=s(iP);Nho=r(hqr,"BlenderbotForCausalLM"),hqr.forEach(t),qho=r(XCe," (Blenderbot model)"),XCe.forEach(t),Gho=i(D),Kp=n(D,"LI",{});var VCe=s(Kp);JZ=n(VCe,"STRONG",{});var uqr=s(JZ);Oho=r(uqr,"blenderbot-small"),uqr.forEach(t),Xho=r(VCe," \u2014 "),dP=n(VCe,"A",{href:!0});var pqr=s(dP);Vho=r(pqr,"BlenderbotSmallForCausalLM"),pqr.forEach(t),zho=r(VCe," (BlenderbotSmall model)"),VCe.forEach(t),Who=i(D),Zp=n(D,"LI",{});var zCe=s(Zp);YZ=n(zCe,"STRONG",{});var _qr=s(YZ);Qho=r(_qr,"camembert"),_qr.forEach(t),Hho=r(zCe," \u2014 "),cP=n(zCe,"A",{href:!0});var vqr=s(cP);Uho=r(vqr,"CamembertForCausalLM"),vqr.forEach(t),Jho=r(zCe," (CamemBERT model)"),zCe.forEach(t),Yho=i(D),e_=n(D,"LI",{});var WCe=s(e_);KZ=n(WCe,"STRONG",{});var bqr=s(KZ);Kho=r(bqr,"ctrl"),bqr.forEach(t),Zho=r(WCe," \u2014 "),fP=n(WCe,"A",{href:!0});var Tqr=s(fP);euo=r(Tqr,"CTRLLMHeadModel"),Tqr.forEach(t),ouo=r(WCe," (CTRL model)"),WCe.forEach(t),ruo=i(D),o_=n(D,"LI",{});var QCe=s(o_);ZZ=n(QCe,"STRONG",{});var Fqr=s(ZZ);tuo=r(Fqr,"data2vec-text"),Fqr.forEach(t),auo=r(QCe," \u2014 "),mP=n(QCe,"A",{href:!0});var Cqr=s(mP);nuo=r(Cqr,"Data2VecTextForCausalLM"),Cqr.forEach(t),suo=r(QCe," (Data2VecText model)"),QCe.forEach(t),luo=i(D),r_=n(D,"LI",{});var HCe=s(r_);eee=n(HCe,"STRONG",{});var Mqr=s(eee);iuo=r(Mqr,"electra"),Mqr.forEach(t),duo=r(HCe," \u2014 "),gP=n(HCe,"A",{href:!0});var Eqr=s(gP);cuo=r(Eqr,"ElectraForCausalLM"),Eqr.forEach(t),fuo=r(HCe," (ELECTRA model)"),HCe.forEach(t),muo=i(D),t_=n(D,"LI",{});var UCe=s(t_);oee=n(UCe,"STRONG",{});var yqr=s(oee);guo=r(yqr,"gpt2"),yqr.forEach(t),huo=r(UCe," \u2014 "),hP=n(UCe,"A",{href:!0});var wqr=s(hP);uuo=r(wqr,"GPT2LMHeadModel"),wqr.forEach(t),puo=r(UCe," (OpenAI GPT-2 model)"),UCe.forEach(t),_uo=i(D),a_=n(D,"LI",{});var JCe=s(a_);ree=n(JCe,"STRONG",{});var Aqr=s(ree);vuo=r(Aqr,"gpt_neo"),Aqr.forEach(t),buo=r(JCe," \u2014 "),uP=n(JCe,"A",{href:!0});var Lqr=s(uP);Tuo=r(Lqr,"GPTNeoForCausalLM"),Lqr.forEach(t),Fuo=r(JCe," (GPT Neo model)"),JCe.forEach(t),Cuo=i(D),n_=n(D,"LI",{});var YCe=s(n_);tee=n(YCe,"STRONG",{});var Bqr=s(tee);Muo=r(Bqr,"gptj"),Bqr.forEach(t),Euo=r(YCe," \u2014 "),pP=n(YCe,"A",{href:!0});var xqr=s(pP);yuo=r(xqr,"GPTJForCausalLM"),xqr.forEach(t),wuo=r(YCe," (GPT-J model)"),YCe.forEach(t),Auo=i(D),s_=n(D,"LI",{});var KCe=s(s_);aee=n(KCe,"STRONG",{});var kqr=s(aee);Luo=r(kqr,"marian"),kqr.forEach(t),Buo=r(KCe," \u2014 "),_P=n(KCe,"A",{href:!0});var Rqr=s(_P);xuo=r(Rqr,"MarianForCausalLM"),Rqr.forEach(t),kuo=r(KCe," (Marian model)"),KCe.forEach(t),Ruo=i(D),l_=n(D,"LI",{});var ZCe=s(l_);nee=n(ZCe,"STRONG",{});var Sqr=s(nee);Suo=r(Sqr,"mbart"),Sqr.forEach(t),Puo=r(ZCe," \u2014 "),vP=n(ZCe,"A",{href:!0});var Pqr=s(vP);$uo=r(Pqr,"MBartForCausalLM"),Pqr.forEach(t),Iuo=r(ZCe," (mBART model)"),ZCe.forEach(t),Duo=i(D),i_=n(D,"LI",{});var eMe=s(i_);see=n(eMe,"STRONG",{});var $qr=s(see);juo=r($qr,"megatron-bert"),$qr.forEach(t),Nuo=r(eMe," \u2014 "),bP=n(eMe,"A",{href:!0});var Iqr=s(bP);quo=r(Iqr,"MegatronBertForCausalLM"),Iqr.forEach(t),Guo=r(eMe," (MegatronBert model)"),eMe.forEach(t),Ouo=i(D),d_=n(D,"LI",{});var oMe=s(d_);lee=n(oMe,"STRONG",{});var Dqr=s(lee);Xuo=r(Dqr,"openai-gpt"),Dqr.forEach(t),Vuo=r(oMe," \u2014 "),TP=n(oMe,"A",{href:!0});var jqr=s(TP);zuo=r(jqr,"OpenAIGPTLMHeadModel"),jqr.forEach(t),Wuo=r(oMe," (OpenAI GPT model)"),oMe.forEach(t),Quo=i(D),c_=n(D,"LI",{});var rMe=s(c_);iee=n(rMe,"STRONG",{});var Nqr=s(iee);Huo=r(Nqr,"pegasus"),Nqr.forEach(t),Uuo=r(rMe," \u2014 "),FP=n(rMe,"A",{href:!0});var qqr=s(FP);Juo=r(qqr,"PegasusForCausalLM"),qqr.forEach(t),Yuo=r(rMe," (Pegasus model)"),rMe.forEach(t),Kuo=i(D),f_=n(D,"LI",{});var tMe=s(f_);dee=n(tMe,"STRONG",{});var Gqr=s(dee);Zuo=r(Gqr,"plbart"),Gqr.forEach(t),epo=r(tMe," \u2014 "),CP=n(tMe,"A",{href:!0});var Oqr=s(CP);opo=r(Oqr,"PLBartForCausalLM"),Oqr.forEach(t),rpo=r(tMe," (PLBart model)"),tMe.forEach(t),tpo=i(D),m_=n(D,"LI",{});var aMe=s(m_);cee=n(aMe,"STRONG",{});var Xqr=s(cee);apo=r(Xqr,"prophetnet"),Xqr.forEach(t),npo=r(aMe," \u2014 "),MP=n(aMe,"A",{href:!0});var Vqr=s(MP);spo=r(Vqr,"ProphetNetForCausalLM"),Vqr.forEach(t),lpo=r(aMe," (ProphetNet model)"),aMe.forEach(t),ipo=i(D),g_=n(D,"LI",{});var nMe=s(g_);fee=n(nMe,"STRONG",{});var zqr=s(fee);dpo=r(zqr,"qdqbert"),zqr.forEach(t),cpo=r(nMe," \u2014 "),EP=n(nMe,"A",{href:!0});var Wqr=s(EP);fpo=r(Wqr,"QDQBertLMHeadModel"),Wqr.forEach(t),mpo=r(nMe," (QDQBert model)"),nMe.forEach(t),gpo=i(D),h_=n(D,"LI",{});var sMe=s(h_);mee=n(sMe,"STRONG",{});var Qqr=s(mee);hpo=r(Qqr,"reformer"),Qqr.forEach(t),upo=r(sMe," \u2014 "),yP=n(sMe,"A",{href:!0});var Hqr=s(yP);ppo=r(Hqr,"ReformerModelWithLMHead"),Hqr.forEach(t),_po=r(sMe," (Reformer model)"),sMe.forEach(t),vpo=i(D),u_=n(D,"LI",{});var lMe=s(u_);gee=n(lMe,"STRONG",{});var Uqr=s(gee);bpo=r(Uqr,"rembert"),Uqr.forEach(t),Tpo=r(lMe," \u2014 "),wP=n(lMe,"A",{href:!0});var Jqr=s(wP);Fpo=r(Jqr,"RemBertForCausalLM"),Jqr.forEach(t),Cpo=r(lMe," (RemBERT model)"),lMe.forEach(t),Mpo=i(D),p_=n(D,"LI",{});var iMe=s(p_);hee=n(iMe,"STRONG",{});var Yqr=s(hee);Epo=r(Yqr,"roberta"),Yqr.forEach(t),ypo=r(iMe," \u2014 "),AP=n(iMe,"A",{href:!0});var Kqr=s(AP);wpo=r(Kqr,"RobertaForCausalLM"),Kqr.forEach(t),Apo=r(iMe," (RoBERTa model)"),iMe.forEach(t),Lpo=i(D),__=n(D,"LI",{});var dMe=s(__);uee=n(dMe,"STRONG",{});var Zqr=s(uee);Bpo=r(Zqr,"roformer"),Zqr.forEach(t),xpo=r(dMe," \u2014 "),LP=n(dMe,"A",{href:!0});var eGr=s(LP);kpo=r(eGr,"RoFormerForCausalLM"),eGr.forEach(t),Rpo=r(dMe," (RoFormer model)"),dMe.forEach(t),Spo=i(D),v_=n(D,"LI",{});var cMe=s(v_);pee=n(cMe,"STRONG",{});var oGr=s(pee);Ppo=r(oGr,"speech_to_text_2"),oGr.forEach(t),$po=r(cMe," \u2014 "),BP=n(cMe,"A",{href:!0});var rGr=s(BP);Ipo=r(rGr,"Speech2Text2ForCausalLM"),rGr.forEach(t),Dpo=r(cMe," (Speech2Text2 model)"),cMe.forEach(t),jpo=i(D),b_=n(D,"LI",{});var fMe=s(b_);_ee=n(fMe,"STRONG",{});var tGr=s(_ee);Npo=r(tGr,"transfo-xl"),tGr.forEach(t),qpo=r(fMe," \u2014 "),xP=n(fMe,"A",{href:!0});var aGr=s(xP);Gpo=r(aGr,"TransfoXLLMHeadModel"),aGr.forEach(t),Opo=r(fMe," (Transformer-XL model)"),fMe.forEach(t),Xpo=i(D),T_=n(D,"LI",{});var mMe=s(T_);vee=n(mMe,"STRONG",{});var nGr=s(vee);Vpo=r(nGr,"trocr"),nGr.forEach(t),zpo=r(mMe," \u2014 "),kP=n(mMe,"A",{href:!0});var sGr=s(kP);Wpo=r(sGr,"TrOCRForCausalLM"),sGr.forEach(t),Qpo=r(mMe," (TrOCR model)"),mMe.forEach(t),Hpo=i(D),F_=n(D,"LI",{});var gMe=s(F_);bee=n(gMe,"STRONG",{});var lGr=s(bee);Upo=r(lGr,"xglm"),lGr.forEach(t),Jpo=r(gMe," \u2014 "),RP=n(gMe,"A",{href:!0});var iGr=s(RP);Ypo=r(iGr,"XGLMForCausalLM"),iGr.forEach(t),Kpo=r(gMe," (XGLM model)"),gMe.forEach(t),Zpo=i(D),C_=n(D,"LI",{});var hMe=s(C_);Tee=n(hMe,"STRONG",{});var dGr=s(Tee);e_o=r(dGr,"xlm"),dGr.forEach(t),o_o=r(hMe," \u2014 "),SP=n(hMe,"A",{href:!0});var cGr=s(SP);r_o=r(cGr,"XLMWithLMHeadModel"),cGr.forEach(t),t_o=r(hMe," (XLM model)"),hMe.forEach(t),a_o=i(D),M_=n(D,"LI",{});var uMe=s(M_);Fee=n(uMe,"STRONG",{});var fGr=s(Fee);n_o=r(fGr,"xlm-prophetnet"),fGr.forEach(t),s_o=r(uMe," \u2014 "),PP=n(uMe,"A",{href:!0});var mGr=s(PP);l_o=r(mGr,"XLMProphetNetForCausalLM"),mGr.forEach(t),i_o=r(uMe," (XLMProphetNet model)"),uMe.forEach(t),d_o=i(D),E_=n(D,"LI",{});var pMe=s(E_);Cee=n(pMe,"STRONG",{});var gGr=s(Cee);c_o=r(gGr,"xlm-roberta"),gGr.forEach(t),f_o=r(pMe," \u2014 "),$P=n(pMe,"A",{href:!0});var hGr=s($P);m_o=r(hGr,"XLMRobertaForCausalLM"),hGr.forEach(t),g_o=r(pMe," (XLM-RoBERTa model)"),pMe.forEach(t),h_o=i(D),y_=n(D,"LI",{});var _Me=s(y_);Mee=n(_Me,"STRONG",{});var uGr=s(Mee);u_o=r(uGr,"xlm-roberta-xl"),uGr.forEach(t),p_o=r(_Me," \u2014 "),IP=n(_Me,"A",{href:!0});var pGr=s(IP);__o=r(pGr,"XLMRobertaXLForCausalLM"),pGr.forEach(t),v_o=r(_Me," (XLM-RoBERTa-XL model)"),_Me.forEach(t),b_o=i(D),w_=n(D,"LI",{});var vMe=s(w_);Eee=n(vMe,"STRONG",{});var _Gr=s(Eee);T_o=r(_Gr,"xlnet"),_Gr.forEach(t),F_o=r(vMe," \u2014 "),DP=n(vMe,"A",{href:!0});var vGr=s(DP);C_o=r(vGr,"XLNetLMHeadModel"),vGr.forEach(t),M_o=r(vMe," (XLNet model)"),vMe.forEach(t),D.forEach(t),E_o=i(Dt),A_=n(Dt,"P",{});var bMe=s(A_);y_o=r(bMe,"The model is set in evaluation mode by default using "),yee=n(bMe,"CODE",{});var bGr=s(yee);w_o=r(bGr,"model.eval()"),bGr.forEach(t),A_o=r(bMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=n(bMe,"CODE",{});var TGr=s(wee);L_o=r(TGr,"model.train()"),TGr.forEach(t),bMe.forEach(t),B_o=i(Dt),Aee=n(Dt,"P",{});var FGr=s(Aee);x_o=r(FGr,"Examples:"),FGr.forEach(t),k_o=i(Dt),m(C3.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),V9e=i(c),Yi=n(c,"H2",{class:!0});var Yxe=s(Yi);L_=n(Yxe,"A",{id:!0,class:!0,href:!0});var CGr=s(L_);Lee=n(CGr,"SPAN",{});var MGr=s(Lee);m(M3.$$.fragment,MGr),MGr.forEach(t),CGr.forEach(t),R_o=i(Yxe),Bee=n(Yxe,"SPAN",{});var EGr=s(Bee);S_o=r(EGr,"AutoModelForMaskedLM"),EGr.forEach(t),Yxe.forEach(t),z9e=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(E3.$$.fragment,Ws),P_o=i(Ws),Ki=n(Ws,"P",{});var NV=s(Ki);$_o=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=n(NV,"CODE",{});var yGr=s(xee);I_o=r(yGr,"from_pretrained()"),yGr.forEach(t),D_o=r(NV,"class method or the "),kee=n(NV,"CODE",{});var wGr=s(kee);j_o=r(wGr,"from_config()"),wGr.forEach(t),N_o=r(NV,`class
method.`),NV.forEach(t),q_o=i(Ws),y3=n(Ws,"P",{});var Kxe=s(y3);G_o=r(Kxe,"This class cannot be instantiated directly using "),Ree=n(Kxe,"CODE",{});var AGr=s(Ree);O_o=r(AGr,"__init__()"),AGr.forEach(t),X_o=r(Kxe," (throws an error)."),Kxe.forEach(t),V_o=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(w3.$$.fragment,Qs),z_o=i(Qs),See=n(Qs,"P",{});var LGr=s(See);W_o=r(LGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LGr.forEach(t),Q_o=i(Qs),Zi=n(Qs,"P",{});var qV=s(Zi);H_o=r(qV,`Note:
Loading a model from its configuration file does `),Pee=n(qV,"STRONG",{});var BGr=s(Pee);U_o=r(BGr,"not"),BGr.forEach(t),J_o=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(qV,"CODE",{});var xGr=s($ee);Y_o=r(xGr,"from_pretrained()"),xGr.forEach(t),K_o=r(qV,"to load the model weights."),qV.forEach(t),Z_o=i(Qs),Iee=n(Qs,"P",{});var kGr=s(Iee);evo=r(kGr,"Examples:"),kGr.forEach(t),ovo=i(Qs),m(A3.$$.fragment,Qs),Qs.forEach(t),rvo=i(Ws),$e=n(Ws,"DIV",{class:!0});var jt=s($e);m(L3.$$.fragment,jt),tvo=i(jt),Dee=n(jt,"P",{});var RGr=s(Dee);avo=r(RGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RGr.forEach(t),nvo=i(jt),Oa=n(jt,"P",{});var BM=s(Oa);svo=r(BM,"The model class to instantiate is selected based on the "),jee=n(BM,"CODE",{});var SGr=s(jee);lvo=r(SGr,"model_type"),SGr.forEach(t),ivo=r(BM,` property of the config object (either
passed as an argument or loaded from `),Nee=n(BM,"CODE",{});var PGr=s(Nee);dvo=r(PGr,"pretrained_model_name_or_path"),PGr.forEach(t),cvo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=n(BM,"CODE",{});var $Gr=s(qee);fvo=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),mvo=r(BM,":"),BM.forEach(t),gvo=i(jt),I=n(jt,"UL",{});var j=s(I);B_=n(j,"LI",{});var TMe=s(B_);Gee=n(TMe,"STRONG",{});var IGr=s(Gee);hvo=r(IGr,"albert"),IGr.forEach(t),uvo=r(TMe," \u2014 "),jP=n(TMe,"A",{href:!0});var DGr=s(jP);pvo=r(DGr,"AlbertForMaskedLM"),DGr.forEach(t),_vo=r(TMe," (ALBERT model)"),TMe.forEach(t),vvo=i(j),x_=n(j,"LI",{});var FMe=s(x_);Oee=n(FMe,"STRONG",{});var jGr=s(Oee);bvo=r(jGr,"bart"),jGr.forEach(t),Tvo=r(FMe," \u2014 "),NP=n(FMe,"A",{href:!0});var NGr=s(NP);Fvo=r(NGr,"BartForConditionalGeneration"),NGr.forEach(t),Cvo=r(FMe," (BART model)"),FMe.forEach(t),Mvo=i(j),k_=n(j,"LI",{});var CMe=s(k_);Xee=n(CMe,"STRONG",{});var qGr=s(Xee);Evo=r(qGr,"bert"),qGr.forEach(t),yvo=r(CMe," \u2014 "),qP=n(CMe,"A",{href:!0});var GGr=s(qP);wvo=r(GGr,"BertForMaskedLM"),GGr.forEach(t),Avo=r(CMe," (BERT model)"),CMe.forEach(t),Lvo=i(j),R_=n(j,"LI",{});var MMe=s(R_);Vee=n(MMe,"STRONG",{});var OGr=s(Vee);Bvo=r(OGr,"big_bird"),OGr.forEach(t),xvo=r(MMe," \u2014 "),GP=n(MMe,"A",{href:!0});var XGr=s(GP);kvo=r(XGr,"BigBirdForMaskedLM"),XGr.forEach(t),Rvo=r(MMe," (BigBird model)"),MMe.forEach(t),Svo=i(j),S_=n(j,"LI",{});var EMe=s(S_);zee=n(EMe,"STRONG",{});var VGr=s(zee);Pvo=r(VGr,"camembert"),VGr.forEach(t),$vo=r(EMe," \u2014 "),OP=n(EMe,"A",{href:!0});var zGr=s(OP);Ivo=r(zGr,"CamembertForMaskedLM"),zGr.forEach(t),Dvo=r(EMe," (CamemBERT model)"),EMe.forEach(t),jvo=i(j),P_=n(j,"LI",{});var yMe=s(P_);Wee=n(yMe,"STRONG",{});var WGr=s(Wee);Nvo=r(WGr,"convbert"),WGr.forEach(t),qvo=r(yMe," \u2014 "),XP=n(yMe,"A",{href:!0});var QGr=s(XP);Gvo=r(QGr,"ConvBertForMaskedLM"),QGr.forEach(t),Ovo=r(yMe," (ConvBERT model)"),yMe.forEach(t),Xvo=i(j),$_=n(j,"LI",{});var wMe=s($_);Qee=n(wMe,"STRONG",{});var HGr=s(Qee);Vvo=r(HGr,"data2vec-text"),HGr.forEach(t),zvo=r(wMe," \u2014 "),VP=n(wMe,"A",{href:!0});var UGr=s(VP);Wvo=r(UGr,"Data2VecTextForMaskedLM"),UGr.forEach(t),Qvo=r(wMe," (Data2VecText model)"),wMe.forEach(t),Hvo=i(j),I_=n(j,"LI",{});var AMe=s(I_);Hee=n(AMe,"STRONG",{});var JGr=s(Hee);Uvo=r(JGr,"deberta"),JGr.forEach(t),Jvo=r(AMe," \u2014 "),zP=n(AMe,"A",{href:!0});var YGr=s(zP);Yvo=r(YGr,"DebertaForMaskedLM"),YGr.forEach(t),Kvo=r(AMe," (DeBERTa model)"),AMe.forEach(t),Zvo=i(j),D_=n(j,"LI",{});var LMe=s(D_);Uee=n(LMe,"STRONG",{});var KGr=s(Uee);e1o=r(KGr,"deberta-v2"),KGr.forEach(t),o1o=r(LMe," \u2014 "),WP=n(LMe,"A",{href:!0});var ZGr=s(WP);r1o=r(ZGr,"DebertaV2ForMaskedLM"),ZGr.forEach(t),t1o=r(LMe," (DeBERTa-v2 model)"),LMe.forEach(t),a1o=i(j),j_=n(j,"LI",{});var BMe=s(j_);Jee=n(BMe,"STRONG",{});var eOr=s(Jee);n1o=r(eOr,"distilbert"),eOr.forEach(t),s1o=r(BMe," \u2014 "),QP=n(BMe,"A",{href:!0});var oOr=s(QP);l1o=r(oOr,"DistilBertForMaskedLM"),oOr.forEach(t),i1o=r(BMe," (DistilBERT model)"),BMe.forEach(t),d1o=i(j),N_=n(j,"LI",{});var xMe=s(N_);Yee=n(xMe,"STRONG",{});var rOr=s(Yee);c1o=r(rOr,"electra"),rOr.forEach(t),f1o=r(xMe," \u2014 "),HP=n(xMe,"A",{href:!0});var tOr=s(HP);m1o=r(tOr,"ElectraForMaskedLM"),tOr.forEach(t),g1o=r(xMe," (ELECTRA model)"),xMe.forEach(t),h1o=i(j),q_=n(j,"LI",{});var kMe=s(q_);Kee=n(kMe,"STRONG",{});var aOr=s(Kee);u1o=r(aOr,"flaubert"),aOr.forEach(t),p1o=r(kMe," \u2014 "),UP=n(kMe,"A",{href:!0});var nOr=s(UP);_1o=r(nOr,"FlaubertWithLMHeadModel"),nOr.forEach(t),v1o=r(kMe," (FlauBERT model)"),kMe.forEach(t),b1o=i(j),G_=n(j,"LI",{});var RMe=s(G_);Zee=n(RMe,"STRONG",{});var sOr=s(Zee);T1o=r(sOr,"fnet"),sOr.forEach(t),F1o=r(RMe," \u2014 "),JP=n(RMe,"A",{href:!0});var lOr=s(JP);C1o=r(lOr,"FNetForMaskedLM"),lOr.forEach(t),M1o=r(RMe," (FNet model)"),RMe.forEach(t),E1o=i(j),O_=n(j,"LI",{});var SMe=s(O_);eoe=n(SMe,"STRONG",{});var iOr=s(eoe);y1o=r(iOr,"funnel"),iOr.forEach(t),w1o=r(SMe," \u2014 "),YP=n(SMe,"A",{href:!0});var dOr=s(YP);A1o=r(dOr,"FunnelForMaskedLM"),dOr.forEach(t),L1o=r(SMe," (Funnel Transformer model)"),SMe.forEach(t),B1o=i(j),X_=n(j,"LI",{});var PMe=s(X_);ooe=n(PMe,"STRONG",{});var cOr=s(ooe);x1o=r(cOr,"ibert"),cOr.forEach(t),k1o=r(PMe," \u2014 "),KP=n(PMe,"A",{href:!0});var fOr=s(KP);R1o=r(fOr,"IBertForMaskedLM"),fOr.forEach(t),S1o=r(PMe," (I-BERT model)"),PMe.forEach(t),P1o=i(j),V_=n(j,"LI",{});var $Me=s(V_);roe=n($Me,"STRONG",{});var mOr=s(roe);$1o=r(mOr,"layoutlm"),mOr.forEach(t),I1o=r($Me," \u2014 "),ZP=n($Me,"A",{href:!0});var gOr=s(ZP);D1o=r(gOr,"LayoutLMForMaskedLM"),gOr.forEach(t),j1o=r($Me," (LayoutLM model)"),$Me.forEach(t),N1o=i(j),z_=n(j,"LI",{});var IMe=s(z_);toe=n(IMe,"STRONG",{});var hOr=s(toe);q1o=r(hOr,"longformer"),hOr.forEach(t),G1o=r(IMe," \u2014 "),e$=n(IMe,"A",{href:!0});var uOr=s(e$);O1o=r(uOr,"LongformerForMaskedLM"),uOr.forEach(t),X1o=r(IMe," (Longformer model)"),IMe.forEach(t),V1o=i(j),W_=n(j,"LI",{});var DMe=s(W_);aoe=n(DMe,"STRONG",{});var pOr=s(aoe);z1o=r(pOr,"mbart"),pOr.forEach(t),W1o=r(DMe," \u2014 "),o$=n(DMe,"A",{href:!0});var _Or=s(o$);Q1o=r(_Or,"MBartForConditionalGeneration"),_Or.forEach(t),H1o=r(DMe," (mBART model)"),DMe.forEach(t),U1o=i(j),Q_=n(j,"LI",{});var jMe=s(Q_);noe=n(jMe,"STRONG",{});var vOr=s(noe);J1o=r(vOr,"megatron-bert"),vOr.forEach(t),Y1o=r(jMe," \u2014 "),r$=n(jMe,"A",{href:!0});var bOr=s(r$);K1o=r(bOr,"MegatronBertForMaskedLM"),bOr.forEach(t),Z1o=r(jMe," (MegatronBert model)"),jMe.forEach(t),e4o=i(j),H_=n(j,"LI",{});var NMe=s(H_);soe=n(NMe,"STRONG",{});var TOr=s(soe);o4o=r(TOr,"mobilebert"),TOr.forEach(t),r4o=r(NMe," \u2014 "),t$=n(NMe,"A",{href:!0});var FOr=s(t$);t4o=r(FOr,"MobileBertForMaskedLM"),FOr.forEach(t),a4o=r(NMe," (MobileBERT model)"),NMe.forEach(t),n4o=i(j),U_=n(j,"LI",{});var qMe=s(U_);loe=n(qMe,"STRONG",{});var COr=s(loe);s4o=r(COr,"mpnet"),COr.forEach(t),l4o=r(qMe," \u2014 "),a$=n(qMe,"A",{href:!0});var MOr=s(a$);i4o=r(MOr,"MPNetForMaskedLM"),MOr.forEach(t),d4o=r(qMe," (MPNet model)"),qMe.forEach(t),c4o=i(j),J_=n(j,"LI",{});var GMe=s(J_);ioe=n(GMe,"STRONG",{});var EOr=s(ioe);f4o=r(EOr,"nystromformer"),EOr.forEach(t),m4o=r(GMe," \u2014 "),n$=n(GMe,"A",{href:!0});var yOr=s(n$);g4o=r(yOr,"NystromformerForMaskedLM"),yOr.forEach(t),h4o=r(GMe," (Nystromformer model)"),GMe.forEach(t),u4o=i(j),Y_=n(j,"LI",{});var OMe=s(Y_);doe=n(OMe,"STRONG",{});var wOr=s(doe);p4o=r(wOr,"perceiver"),wOr.forEach(t),_4o=r(OMe," \u2014 "),s$=n(OMe,"A",{href:!0});var AOr=s(s$);v4o=r(AOr,"PerceiverForMaskedLM"),AOr.forEach(t),b4o=r(OMe," (Perceiver model)"),OMe.forEach(t),T4o=i(j),K_=n(j,"LI",{});var XMe=s(K_);coe=n(XMe,"STRONG",{});var LOr=s(coe);F4o=r(LOr,"qdqbert"),LOr.forEach(t),C4o=r(XMe," \u2014 "),l$=n(XMe,"A",{href:!0});var BOr=s(l$);M4o=r(BOr,"QDQBertForMaskedLM"),BOr.forEach(t),E4o=r(XMe," (QDQBert model)"),XMe.forEach(t),y4o=i(j),Z_=n(j,"LI",{});var VMe=s(Z_);foe=n(VMe,"STRONG",{});var xOr=s(foe);w4o=r(xOr,"reformer"),xOr.forEach(t),A4o=r(VMe," \u2014 "),i$=n(VMe,"A",{href:!0});var kOr=s(i$);L4o=r(kOr,"ReformerForMaskedLM"),kOr.forEach(t),B4o=r(VMe," (Reformer model)"),VMe.forEach(t),x4o=i(j),ev=n(j,"LI",{});var zMe=s(ev);moe=n(zMe,"STRONG",{});var ROr=s(moe);k4o=r(ROr,"rembert"),ROr.forEach(t),R4o=r(zMe," \u2014 "),d$=n(zMe,"A",{href:!0});var SOr=s(d$);S4o=r(SOr,"RemBertForMaskedLM"),SOr.forEach(t),P4o=r(zMe," (RemBERT model)"),zMe.forEach(t),$4o=i(j),ov=n(j,"LI",{});var WMe=s(ov);goe=n(WMe,"STRONG",{});var POr=s(goe);I4o=r(POr,"roberta"),POr.forEach(t),D4o=r(WMe," \u2014 "),c$=n(WMe,"A",{href:!0});var $Or=s(c$);j4o=r($Or,"RobertaForMaskedLM"),$Or.forEach(t),N4o=r(WMe," (RoBERTa model)"),WMe.forEach(t),q4o=i(j),rv=n(j,"LI",{});var QMe=s(rv);hoe=n(QMe,"STRONG",{});var IOr=s(hoe);G4o=r(IOr,"roformer"),IOr.forEach(t),O4o=r(QMe," \u2014 "),f$=n(QMe,"A",{href:!0});var DOr=s(f$);X4o=r(DOr,"RoFormerForMaskedLM"),DOr.forEach(t),V4o=r(QMe," (RoFormer model)"),QMe.forEach(t),z4o=i(j),tv=n(j,"LI",{});var HMe=s(tv);uoe=n(HMe,"STRONG",{});var jOr=s(uoe);W4o=r(jOr,"squeezebert"),jOr.forEach(t),Q4o=r(HMe," \u2014 "),m$=n(HMe,"A",{href:!0});var NOr=s(m$);H4o=r(NOr,"SqueezeBertForMaskedLM"),NOr.forEach(t),U4o=r(HMe," (SqueezeBERT model)"),HMe.forEach(t),J4o=i(j),av=n(j,"LI",{});var UMe=s(av);poe=n(UMe,"STRONG",{});var qOr=s(poe);Y4o=r(qOr,"tapas"),qOr.forEach(t),K4o=r(UMe," \u2014 "),g$=n(UMe,"A",{href:!0});var GOr=s(g$);Z4o=r(GOr,"TapasForMaskedLM"),GOr.forEach(t),ebo=r(UMe," (TAPAS model)"),UMe.forEach(t),obo=i(j),nv=n(j,"LI",{});var JMe=s(nv);_oe=n(JMe,"STRONG",{});var OOr=s(_oe);rbo=r(OOr,"wav2vec2"),OOr.forEach(t),tbo=r(JMe," \u2014 "),voe=n(JMe,"CODE",{});var XOr=s(voe);abo=r(XOr,"Wav2Vec2ForMaskedLM"),XOr.forEach(t),nbo=r(JMe,"(Wav2Vec2 model)"),JMe.forEach(t),sbo=i(j),sv=n(j,"LI",{});var YMe=s(sv);boe=n(YMe,"STRONG",{});var VOr=s(boe);lbo=r(VOr,"xlm"),VOr.forEach(t),ibo=r(YMe," \u2014 "),h$=n(YMe,"A",{href:!0});var zOr=s(h$);dbo=r(zOr,"XLMWithLMHeadModel"),zOr.forEach(t),cbo=r(YMe," (XLM model)"),YMe.forEach(t),fbo=i(j),lv=n(j,"LI",{});var KMe=s(lv);Toe=n(KMe,"STRONG",{});var WOr=s(Toe);mbo=r(WOr,"xlm-roberta"),WOr.forEach(t),gbo=r(KMe," \u2014 "),u$=n(KMe,"A",{href:!0});var QOr=s(u$);hbo=r(QOr,"XLMRobertaForMaskedLM"),QOr.forEach(t),ubo=r(KMe," (XLM-RoBERTa model)"),KMe.forEach(t),pbo=i(j),iv=n(j,"LI",{});var ZMe=s(iv);Foe=n(ZMe,"STRONG",{});var HOr=s(Foe);_bo=r(HOr,"xlm-roberta-xl"),HOr.forEach(t),vbo=r(ZMe," \u2014 "),p$=n(ZMe,"A",{href:!0});var UOr=s(p$);bbo=r(UOr,"XLMRobertaXLForMaskedLM"),UOr.forEach(t),Tbo=r(ZMe," (XLM-RoBERTa-XL model)"),ZMe.forEach(t),Fbo=i(j),dv=n(j,"LI",{});var eEe=s(dv);Coe=n(eEe,"STRONG",{});var JOr=s(Coe);Cbo=r(JOr,"yoso"),JOr.forEach(t),Mbo=r(eEe," \u2014 "),_$=n(eEe,"A",{href:!0});var YOr=s(_$);Ebo=r(YOr,"YosoForMaskedLM"),YOr.forEach(t),ybo=r(eEe," (YOSO model)"),eEe.forEach(t),j.forEach(t),wbo=i(jt),cv=n(jt,"P",{});var oEe=s(cv);Abo=r(oEe,"The model is set in evaluation mode by default using "),Moe=n(oEe,"CODE",{});var KOr=s(Moe);Lbo=r(KOr,"model.eval()"),KOr.forEach(t),Bbo=r(oEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=n(oEe,"CODE",{});var ZOr=s(Eoe);xbo=r(ZOr,"model.train()"),ZOr.forEach(t),oEe.forEach(t),kbo=i(jt),yoe=n(jt,"P",{});var eXr=s(yoe);Rbo=r(eXr,"Examples:"),eXr.forEach(t),Sbo=i(jt),m(B3.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),W9e=i(c),ed=n(c,"H2",{class:!0});var Zxe=s(ed);fv=n(Zxe,"A",{id:!0,class:!0,href:!0});var oXr=s(fv);woe=n(oXr,"SPAN",{});var rXr=s(woe);m(x3.$$.fragment,rXr),rXr.forEach(t),oXr.forEach(t),Pbo=i(Zxe),Aoe=n(Zxe,"SPAN",{});var tXr=s(Aoe);$bo=r(tXr,"AutoModelForSeq2SeqLM"),tXr.forEach(t),Zxe.forEach(t),Q9e=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(k3.$$.fragment,Hs),Ibo=i(Hs),od=n(Hs,"P",{});var GV=s(od);Dbo=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=n(GV,"CODE",{});var aXr=s(Loe);jbo=r(aXr,"from_pretrained()"),aXr.forEach(t),Nbo=r(GV,"class method or the "),Boe=n(GV,"CODE",{});var nXr=s(Boe);qbo=r(nXr,"from_config()"),nXr.forEach(t),Gbo=r(GV,`class
method.`),GV.forEach(t),Obo=i(Hs),R3=n(Hs,"P",{});var eke=s(R3);Xbo=r(eke,"This class cannot be instantiated directly using "),xoe=n(eke,"CODE",{});var sXr=s(xoe);Vbo=r(sXr,"__init__()"),sXr.forEach(t),zbo=r(eke," (throws an error)."),eke.forEach(t),Wbo=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m(S3.$$.fragment,Us),Qbo=i(Us),koe=n(Us,"P",{});var lXr=s(koe);Hbo=r(lXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lXr.forEach(t),Ubo=i(Us),rd=n(Us,"P",{});var OV=s(rd);Jbo=r(OV,`Note:
Loading a model from its configuration file does `),Roe=n(OV,"STRONG",{});var iXr=s(Roe);Ybo=r(iXr,"not"),iXr.forEach(t),Kbo=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(OV,"CODE",{});var dXr=s(Soe);Zbo=r(dXr,"from_pretrained()"),dXr.forEach(t),e2o=r(OV,"to load the model weights."),OV.forEach(t),o2o=i(Us),Poe=n(Us,"P",{});var cXr=s(Poe);r2o=r(cXr,"Examples:"),cXr.forEach(t),t2o=i(Us),m(P3.$$.fragment,Us),Us.forEach(t),a2o=i(Hs),Ie=n(Hs,"DIV",{class:!0});var Nt=s(Ie);m($3.$$.fragment,Nt),n2o=i(Nt),$oe=n(Nt,"P",{});var fXr=s($oe);s2o=r(fXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fXr.forEach(t),l2o=i(Nt),Xa=n(Nt,"P",{});var xM=s(Xa);i2o=r(xM,"The model class to instantiate is selected based on the "),Ioe=n(xM,"CODE",{});var mXr=s(Ioe);d2o=r(mXr,"model_type"),mXr.forEach(t),c2o=r(xM,` property of the config object (either
passed as an argument or loaded from `),Doe=n(xM,"CODE",{});var gXr=s(Doe);f2o=r(gXr,"pretrained_model_name_or_path"),gXr.forEach(t),m2o=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=n(xM,"CODE",{});var hXr=s(joe);g2o=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),h2o=r(xM,":"),xM.forEach(t),u2o=i(Nt),ae=n(Nt,"UL",{});var le=s(ae);mv=n(le,"LI",{});var rEe=s(mv);Noe=n(rEe,"STRONG",{});var uXr=s(Noe);p2o=r(uXr,"bart"),uXr.forEach(t),_2o=r(rEe," \u2014 "),v$=n(rEe,"A",{href:!0});var pXr=s(v$);v2o=r(pXr,"BartForConditionalGeneration"),pXr.forEach(t),b2o=r(rEe," (BART model)"),rEe.forEach(t),T2o=i(le),gv=n(le,"LI",{});var tEe=s(gv);qoe=n(tEe,"STRONG",{});var _Xr=s(qoe);F2o=r(_Xr,"bigbird_pegasus"),_Xr.forEach(t),C2o=r(tEe," \u2014 "),b$=n(tEe,"A",{href:!0});var vXr=s(b$);M2o=r(vXr,"BigBirdPegasusForConditionalGeneration"),vXr.forEach(t),E2o=r(tEe," (BigBirdPegasus model)"),tEe.forEach(t),y2o=i(le),hv=n(le,"LI",{});var aEe=s(hv);Goe=n(aEe,"STRONG",{});var bXr=s(Goe);w2o=r(bXr,"blenderbot"),bXr.forEach(t),A2o=r(aEe," \u2014 "),T$=n(aEe,"A",{href:!0});var TXr=s(T$);L2o=r(TXr,"BlenderbotForConditionalGeneration"),TXr.forEach(t),B2o=r(aEe," (Blenderbot model)"),aEe.forEach(t),x2o=i(le),uv=n(le,"LI",{});var nEe=s(uv);Ooe=n(nEe,"STRONG",{});var FXr=s(Ooe);k2o=r(FXr,"blenderbot-small"),FXr.forEach(t),R2o=r(nEe," \u2014 "),F$=n(nEe,"A",{href:!0});var CXr=s(F$);S2o=r(CXr,"BlenderbotSmallForConditionalGeneration"),CXr.forEach(t),P2o=r(nEe," (BlenderbotSmall model)"),nEe.forEach(t),$2o=i(le),pv=n(le,"LI",{});var sEe=s(pv);Xoe=n(sEe,"STRONG",{});var MXr=s(Xoe);I2o=r(MXr,"encoder-decoder"),MXr.forEach(t),D2o=r(sEe," \u2014 "),C$=n(sEe,"A",{href:!0});var EXr=s(C$);j2o=r(EXr,"EncoderDecoderModel"),EXr.forEach(t),N2o=r(sEe," (Encoder decoder model)"),sEe.forEach(t),q2o=i(le),_v=n(le,"LI",{});var lEe=s(_v);Voe=n(lEe,"STRONG",{});var yXr=s(Voe);G2o=r(yXr,"fsmt"),yXr.forEach(t),O2o=r(lEe," \u2014 "),M$=n(lEe,"A",{href:!0});var wXr=s(M$);X2o=r(wXr,"FSMTForConditionalGeneration"),wXr.forEach(t),V2o=r(lEe," (FairSeq Machine-Translation model)"),lEe.forEach(t),z2o=i(le),vv=n(le,"LI",{});var iEe=s(vv);zoe=n(iEe,"STRONG",{});var AXr=s(zoe);W2o=r(AXr,"led"),AXr.forEach(t),Q2o=r(iEe," \u2014 "),E$=n(iEe,"A",{href:!0});var LXr=s(E$);H2o=r(LXr,"LEDForConditionalGeneration"),LXr.forEach(t),U2o=r(iEe," (LED model)"),iEe.forEach(t),J2o=i(le),bv=n(le,"LI",{});var dEe=s(bv);Woe=n(dEe,"STRONG",{});var BXr=s(Woe);Y2o=r(BXr,"m2m_100"),BXr.forEach(t),K2o=r(dEe," \u2014 "),y$=n(dEe,"A",{href:!0});var xXr=s(y$);Z2o=r(xXr,"M2M100ForConditionalGeneration"),xXr.forEach(t),e0o=r(dEe," (M2M100 model)"),dEe.forEach(t),o0o=i(le),Tv=n(le,"LI",{});var cEe=s(Tv);Qoe=n(cEe,"STRONG",{});var kXr=s(Qoe);r0o=r(kXr,"marian"),kXr.forEach(t),t0o=r(cEe," \u2014 "),w$=n(cEe,"A",{href:!0});var RXr=s(w$);a0o=r(RXr,"MarianMTModel"),RXr.forEach(t),n0o=r(cEe," (Marian model)"),cEe.forEach(t),s0o=i(le),Fv=n(le,"LI",{});var fEe=s(Fv);Hoe=n(fEe,"STRONG",{});var SXr=s(Hoe);l0o=r(SXr,"mbart"),SXr.forEach(t),i0o=r(fEe," \u2014 "),A$=n(fEe,"A",{href:!0});var PXr=s(A$);d0o=r(PXr,"MBartForConditionalGeneration"),PXr.forEach(t),c0o=r(fEe," (mBART model)"),fEe.forEach(t),f0o=i(le),Cv=n(le,"LI",{});var mEe=s(Cv);Uoe=n(mEe,"STRONG",{});var $Xr=s(Uoe);m0o=r($Xr,"mt5"),$Xr.forEach(t),g0o=r(mEe," \u2014 "),L$=n(mEe,"A",{href:!0});var IXr=s(L$);h0o=r(IXr,"MT5ForConditionalGeneration"),IXr.forEach(t),u0o=r(mEe," (mT5 model)"),mEe.forEach(t),p0o=i(le),Mv=n(le,"LI",{});var gEe=s(Mv);Joe=n(gEe,"STRONG",{});var DXr=s(Joe);_0o=r(DXr,"pegasus"),DXr.forEach(t),v0o=r(gEe," \u2014 "),B$=n(gEe,"A",{href:!0});var jXr=s(B$);b0o=r(jXr,"PegasusForConditionalGeneration"),jXr.forEach(t),T0o=r(gEe," (Pegasus model)"),gEe.forEach(t),F0o=i(le),Ev=n(le,"LI",{});var hEe=s(Ev);Yoe=n(hEe,"STRONG",{});var NXr=s(Yoe);C0o=r(NXr,"plbart"),NXr.forEach(t),M0o=r(hEe," \u2014 "),x$=n(hEe,"A",{href:!0});var qXr=s(x$);E0o=r(qXr,"PLBartForConditionalGeneration"),qXr.forEach(t),y0o=r(hEe," (PLBart model)"),hEe.forEach(t),w0o=i(le),yv=n(le,"LI",{});var uEe=s(yv);Koe=n(uEe,"STRONG",{});var GXr=s(Koe);A0o=r(GXr,"prophetnet"),GXr.forEach(t),L0o=r(uEe," \u2014 "),k$=n(uEe,"A",{href:!0});var OXr=s(k$);B0o=r(OXr,"ProphetNetForConditionalGeneration"),OXr.forEach(t),x0o=r(uEe," (ProphetNet model)"),uEe.forEach(t),k0o=i(le),wv=n(le,"LI",{});var pEe=s(wv);Zoe=n(pEe,"STRONG",{});var XXr=s(Zoe);R0o=r(XXr,"t5"),XXr.forEach(t),S0o=r(pEe," \u2014 "),R$=n(pEe,"A",{href:!0});var VXr=s(R$);P0o=r(VXr,"T5ForConditionalGeneration"),VXr.forEach(t),$0o=r(pEe," (T5 model)"),pEe.forEach(t),I0o=i(le),Av=n(le,"LI",{});var _Ee=s(Av);ere=n(_Ee,"STRONG",{});var zXr=s(ere);D0o=r(zXr,"xlm-prophetnet"),zXr.forEach(t),j0o=r(_Ee," \u2014 "),S$=n(_Ee,"A",{href:!0});var WXr=s(S$);N0o=r(WXr,"XLMProphetNetForConditionalGeneration"),WXr.forEach(t),q0o=r(_Ee," (XLMProphetNet model)"),_Ee.forEach(t),le.forEach(t),G0o=i(Nt),Lv=n(Nt,"P",{});var vEe=s(Lv);O0o=r(vEe,"The model is set in evaluation mode by default using "),ore=n(vEe,"CODE",{});var QXr=s(ore);X0o=r(QXr,"model.eval()"),QXr.forEach(t),V0o=r(vEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n(vEe,"CODE",{});var HXr=s(rre);z0o=r(HXr,"model.train()"),HXr.forEach(t),vEe.forEach(t),W0o=i(Nt),tre=n(Nt,"P",{});var UXr=s(tre);Q0o=r(UXr,"Examples:"),UXr.forEach(t),H0o=i(Nt),m(I3.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),H9e=i(c),td=n(c,"H2",{class:!0});var oke=s(td);Bv=n(oke,"A",{id:!0,class:!0,href:!0});var JXr=s(Bv);are=n(JXr,"SPAN",{});var YXr=s(are);m(D3.$$.fragment,YXr),YXr.forEach(t),JXr.forEach(t),U0o=i(oke),nre=n(oke,"SPAN",{});var KXr=s(nre);J0o=r(KXr,"AutoModelForSequenceClassification"),KXr.forEach(t),oke.forEach(t),U9e=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(j3.$$.fragment,Js),Y0o=i(Js),ad=n(Js,"P",{});var XV=s(ad);K0o=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sre=n(XV,"CODE",{});var ZXr=s(sre);Z0o=r(ZXr,"from_pretrained()"),ZXr.forEach(t),eTo=r(XV,"class method or the "),lre=n(XV,"CODE",{});var eVr=s(lre);oTo=r(eVr,"from_config()"),eVr.forEach(t),rTo=r(XV,`class
method.`),XV.forEach(t),tTo=i(Js),N3=n(Js,"P",{});var rke=s(N3);aTo=r(rke,"This class cannot be instantiated directly using "),ire=n(rke,"CODE",{});var oVr=s(ire);nTo=r(oVr,"__init__()"),oVr.forEach(t),sTo=r(rke," (throws an error)."),rke.forEach(t),lTo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(q3.$$.fragment,Ys),iTo=i(Ys),dre=n(Ys,"P",{});var rVr=s(dre);dTo=r(rVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rVr.forEach(t),cTo=i(Ys),nd=n(Ys,"P",{});var VV=s(nd);fTo=r(VV,`Note:
Loading a model from its configuration file does `),cre=n(VV,"STRONG",{});var tVr=s(cre);mTo=r(tVr,"not"),tVr.forEach(t),gTo=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(VV,"CODE",{});var aVr=s(fre);hTo=r(aVr,"from_pretrained()"),aVr.forEach(t),uTo=r(VV,"to load the model weights."),VV.forEach(t),pTo=i(Ys),mre=n(Ys,"P",{});var nVr=s(mre);_To=r(nVr,"Examples:"),nVr.forEach(t),vTo=i(Ys),m(G3.$$.fragment,Ys),Ys.forEach(t),bTo=i(Js),De=n(Js,"DIV",{class:!0});var qt=s(De);m(O3.$$.fragment,qt),TTo=i(qt),gre=n(qt,"P",{});var sVr=s(gre);FTo=r(sVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sVr.forEach(t),CTo=i(qt),Va=n(qt,"P",{});var kM=s(Va);MTo=r(kM,"The model class to instantiate is selected based on the "),hre=n(kM,"CODE",{});var lVr=s(hre);ETo=r(lVr,"model_type"),lVr.forEach(t),yTo=r(kM,` property of the config object (either
passed as an argument or loaded from `),ure=n(kM,"CODE",{});var iVr=s(ure);wTo=r(iVr,"pretrained_model_name_or_path"),iVr.forEach(t),ATo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=n(kM,"CODE",{});var dVr=s(pre);LTo=r(dVr,"pretrained_model_name_or_path"),dVr.forEach(t),BTo=r(kM,":"),kM.forEach(t),xTo=i(qt),A=n(qt,"UL",{});var L=s(A);xv=n(L,"LI",{});var bEe=s(xv);_re=n(bEe,"STRONG",{});var cVr=s(_re);kTo=r(cVr,"albert"),cVr.forEach(t),RTo=r(bEe," \u2014 "),P$=n(bEe,"A",{href:!0});var fVr=s(P$);STo=r(fVr,"AlbertForSequenceClassification"),fVr.forEach(t),PTo=r(bEe," (ALBERT model)"),bEe.forEach(t),$To=i(L),kv=n(L,"LI",{});var TEe=s(kv);vre=n(TEe,"STRONG",{});var mVr=s(vre);ITo=r(mVr,"bart"),mVr.forEach(t),DTo=r(TEe," \u2014 "),$$=n(TEe,"A",{href:!0});var gVr=s($$);jTo=r(gVr,"BartForSequenceClassification"),gVr.forEach(t),NTo=r(TEe," (BART model)"),TEe.forEach(t),qTo=i(L),Rv=n(L,"LI",{});var FEe=s(Rv);bre=n(FEe,"STRONG",{});var hVr=s(bre);GTo=r(hVr,"bert"),hVr.forEach(t),OTo=r(FEe," \u2014 "),I$=n(FEe,"A",{href:!0});var uVr=s(I$);XTo=r(uVr,"BertForSequenceClassification"),uVr.forEach(t),VTo=r(FEe," (BERT model)"),FEe.forEach(t),zTo=i(L),Sv=n(L,"LI",{});var CEe=s(Sv);Tre=n(CEe,"STRONG",{});var pVr=s(Tre);WTo=r(pVr,"big_bird"),pVr.forEach(t),QTo=r(CEe," \u2014 "),D$=n(CEe,"A",{href:!0});var _Vr=s(D$);HTo=r(_Vr,"BigBirdForSequenceClassification"),_Vr.forEach(t),UTo=r(CEe," (BigBird model)"),CEe.forEach(t),JTo=i(L),Pv=n(L,"LI",{});var MEe=s(Pv);Fre=n(MEe,"STRONG",{});var vVr=s(Fre);YTo=r(vVr,"bigbird_pegasus"),vVr.forEach(t),KTo=r(MEe," \u2014 "),j$=n(MEe,"A",{href:!0});var bVr=s(j$);ZTo=r(bVr,"BigBirdPegasusForSequenceClassification"),bVr.forEach(t),e7o=r(MEe," (BigBirdPegasus model)"),MEe.forEach(t),o7o=i(L),$v=n(L,"LI",{});var EEe=s($v);Cre=n(EEe,"STRONG",{});var TVr=s(Cre);r7o=r(TVr,"camembert"),TVr.forEach(t),t7o=r(EEe," \u2014 "),N$=n(EEe,"A",{href:!0});var FVr=s(N$);a7o=r(FVr,"CamembertForSequenceClassification"),FVr.forEach(t),n7o=r(EEe," (CamemBERT model)"),EEe.forEach(t),s7o=i(L),Iv=n(L,"LI",{});var yEe=s(Iv);Mre=n(yEe,"STRONG",{});var CVr=s(Mre);l7o=r(CVr,"canine"),CVr.forEach(t),i7o=r(yEe," \u2014 "),q$=n(yEe,"A",{href:!0});var MVr=s(q$);d7o=r(MVr,"CanineForSequenceClassification"),MVr.forEach(t),c7o=r(yEe," (Canine model)"),yEe.forEach(t),f7o=i(L),Dv=n(L,"LI",{});var wEe=s(Dv);Ere=n(wEe,"STRONG",{});var EVr=s(Ere);m7o=r(EVr,"convbert"),EVr.forEach(t),g7o=r(wEe," \u2014 "),G$=n(wEe,"A",{href:!0});var yVr=s(G$);h7o=r(yVr,"ConvBertForSequenceClassification"),yVr.forEach(t),u7o=r(wEe," (ConvBERT model)"),wEe.forEach(t),p7o=i(L),jv=n(L,"LI",{});var AEe=s(jv);yre=n(AEe,"STRONG",{});var wVr=s(yre);_7o=r(wVr,"ctrl"),wVr.forEach(t),v7o=r(AEe," \u2014 "),O$=n(AEe,"A",{href:!0});var AVr=s(O$);b7o=r(AVr,"CTRLForSequenceClassification"),AVr.forEach(t),T7o=r(AEe," (CTRL model)"),AEe.forEach(t),F7o=i(L),Nv=n(L,"LI",{});var LEe=s(Nv);wre=n(LEe,"STRONG",{});var LVr=s(wre);C7o=r(LVr,"data2vec-text"),LVr.forEach(t),M7o=r(LEe," \u2014 "),X$=n(LEe,"A",{href:!0});var BVr=s(X$);E7o=r(BVr,"Data2VecTextForSequenceClassification"),BVr.forEach(t),y7o=r(LEe," (Data2VecText model)"),LEe.forEach(t),w7o=i(L),qv=n(L,"LI",{});var BEe=s(qv);Are=n(BEe,"STRONG",{});var xVr=s(Are);A7o=r(xVr,"deberta"),xVr.forEach(t),L7o=r(BEe," \u2014 "),V$=n(BEe,"A",{href:!0});var kVr=s(V$);B7o=r(kVr,"DebertaForSequenceClassification"),kVr.forEach(t),x7o=r(BEe," (DeBERTa model)"),BEe.forEach(t),k7o=i(L),Gv=n(L,"LI",{});var xEe=s(Gv);Lre=n(xEe,"STRONG",{});var RVr=s(Lre);R7o=r(RVr,"deberta-v2"),RVr.forEach(t),S7o=r(xEe," \u2014 "),z$=n(xEe,"A",{href:!0});var SVr=s(z$);P7o=r(SVr,"DebertaV2ForSequenceClassification"),SVr.forEach(t),$7o=r(xEe," (DeBERTa-v2 model)"),xEe.forEach(t),I7o=i(L),Ov=n(L,"LI",{});var kEe=s(Ov);Bre=n(kEe,"STRONG",{});var PVr=s(Bre);D7o=r(PVr,"distilbert"),PVr.forEach(t),j7o=r(kEe," \u2014 "),W$=n(kEe,"A",{href:!0});var $Vr=s(W$);N7o=r($Vr,"DistilBertForSequenceClassification"),$Vr.forEach(t),q7o=r(kEe," (DistilBERT model)"),kEe.forEach(t),G7o=i(L),Xv=n(L,"LI",{});var REe=s(Xv);xre=n(REe,"STRONG",{});var IVr=s(xre);O7o=r(IVr,"electra"),IVr.forEach(t),X7o=r(REe," \u2014 "),Q$=n(REe,"A",{href:!0});var DVr=s(Q$);V7o=r(DVr,"ElectraForSequenceClassification"),DVr.forEach(t),z7o=r(REe," (ELECTRA model)"),REe.forEach(t),W7o=i(L),Vv=n(L,"LI",{});var SEe=s(Vv);kre=n(SEe,"STRONG",{});var jVr=s(kre);Q7o=r(jVr,"flaubert"),jVr.forEach(t),H7o=r(SEe," \u2014 "),H$=n(SEe,"A",{href:!0});var NVr=s(H$);U7o=r(NVr,"FlaubertForSequenceClassification"),NVr.forEach(t),J7o=r(SEe," (FlauBERT model)"),SEe.forEach(t),Y7o=i(L),zv=n(L,"LI",{});var PEe=s(zv);Rre=n(PEe,"STRONG",{});var qVr=s(Rre);K7o=r(qVr,"fnet"),qVr.forEach(t),Z7o=r(PEe," \u2014 "),U$=n(PEe,"A",{href:!0});var GVr=s(U$);eFo=r(GVr,"FNetForSequenceClassification"),GVr.forEach(t),oFo=r(PEe," (FNet model)"),PEe.forEach(t),rFo=i(L),Wv=n(L,"LI",{});var $Ee=s(Wv);Sre=n($Ee,"STRONG",{});var OVr=s(Sre);tFo=r(OVr,"funnel"),OVr.forEach(t),aFo=r($Ee," \u2014 "),J$=n($Ee,"A",{href:!0});var XVr=s(J$);nFo=r(XVr,"FunnelForSequenceClassification"),XVr.forEach(t),sFo=r($Ee," (Funnel Transformer model)"),$Ee.forEach(t),lFo=i(L),Qv=n(L,"LI",{});var IEe=s(Qv);Pre=n(IEe,"STRONG",{});var VVr=s(Pre);iFo=r(VVr,"gpt2"),VVr.forEach(t),dFo=r(IEe," \u2014 "),Y$=n(IEe,"A",{href:!0});var zVr=s(Y$);cFo=r(zVr,"GPT2ForSequenceClassification"),zVr.forEach(t),fFo=r(IEe," (OpenAI GPT-2 model)"),IEe.forEach(t),mFo=i(L),Hv=n(L,"LI",{});var DEe=s(Hv);$re=n(DEe,"STRONG",{});var WVr=s($re);gFo=r(WVr,"gpt_neo"),WVr.forEach(t),hFo=r(DEe," \u2014 "),K$=n(DEe,"A",{href:!0});var QVr=s(K$);uFo=r(QVr,"GPTNeoForSequenceClassification"),QVr.forEach(t),pFo=r(DEe," (GPT Neo model)"),DEe.forEach(t),_Fo=i(L),Uv=n(L,"LI",{});var jEe=s(Uv);Ire=n(jEe,"STRONG",{});var HVr=s(Ire);vFo=r(HVr,"gptj"),HVr.forEach(t),bFo=r(jEe," \u2014 "),Z$=n(jEe,"A",{href:!0});var UVr=s(Z$);TFo=r(UVr,"GPTJForSequenceClassification"),UVr.forEach(t),FFo=r(jEe," (GPT-J model)"),jEe.forEach(t),CFo=i(L),Jv=n(L,"LI",{});var NEe=s(Jv);Dre=n(NEe,"STRONG",{});var JVr=s(Dre);MFo=r(JVr,"ibert"),JVr.forEach(t),EFo=r(NEe," \u2014 "),eI=n(NEe,"A",{href:!0});var YVr=s(eI);yFo=r(YVr,"IBertForSequenceClassification"),YVr.forEach(t),wFo=r(NEe," (I-BERT model)"),NEe.forEach(t),AFo=i(L),Yv=n(L,"LI",{});var qEe=s(Yv);jre=n(qEe,"STRONG",{});var KVr=s(jre);LFo=r(KVr,"layoutlm"),KVr.forEach(t),BFo=r(qEe," \u2014 "),oI=n(qEe,"A",{href:!0});var ZVr=s(oI);xFo=r(ZVr,"LayoutLMForSequenceClassification"),ZVr.forEach(t),kFo=r(qEe," (LayoutLM model)"),qEe.forEach(t),RFo=i(L),Kv=n(L,"LI",{});var GEe=s(Kv);Nre=n(GEe,"STRONG",{});var ezr=s(Nre);SFo=r(ezr,"layoutlmv2"),ezr.forEach(t),PFo=r(GEe," \u2014 "),rI=n(GEe,"A",{href:!0});var ozr=s(rI);$Fo=r(ozr,"LayoutLMv2ForSequenceClassification"),ozr.forEach(t),IFo=r(GEe," (LayoutLMv2 model)"),GEe.forEach(t),DFo=i(L),Zv=n(L,"LI",{});var OEe=s(Zv);qre=n(OEe,"STRONG",{});var rzr=s(qre);jFo=r(rzr,"led"),rzr.forEach(t),NFo=r(OEe," \u2014 "),tI=n(OEe,"A",{href:!0});var tzr=s(tI);qFo=r(tzr,"LEDForSequenceClassification"),tzr.forEach(t),GFo=r(OEe," (LED model)"),OEe.forEach(t),OFo=i(L),e1=n(L,"LI",{});var XEe=s(e1);Gre=n(XEe,"STRONG",{});var azr=s(Gre);XFo=r(azr,"longformer"),azr.forEach(t),VFo=r(XEe," \u2014 "),aI=n(XEe,"A",{href:!0});var nzr=s(aI);zFo=r(nzr,"LongformerForSequenceClassification"),nzr.forEach(t),WFo=r(XEe," (Longformer model)"),XEe.forEach(t),QFo=i(L),o1=n(L,"LI",{});var VEe=s(o1);Ore=n(VEe,"STRONG",{});var szr=s(Ore);HFo=r(szr,"mbart"),szr.forEach(t),UFo=r(VEe," \u2014 "),nI=n(VEe,"A",{href:!0});var lzr=s(nI);JFo=r(lzr,"MBartForSequenceClassification"),lzr.forEach(t),YFo=r(VEe," (mBART model)"),VEe.forEach(t),KFo=i(L),r1=n(L,"LI",{});var zEe=s(r1);Xre=n(zEe,"STRONG",{});var izr=s(Xre);ZFo=r(izr,"megatron-bert"),izr.forEach(t),eCo=r(zEe," \u2014 "),sI=n(zEe,"A",{href:!0});var dzr=s(sI);oCo=r(dzr,"MegatronBertForSequenceClassification"),dzr.forEach(t),rCo=r(zEe," (MegatronBert model)"),zEe.forEach(t),tCo=i(L),t1=n(L,"LI",{});var WEe=s(t1);Vre=n(WEe,"STRONG",{});var czr=s(Vre);aCo=r(czr,"mobilebert"),czr.forEach(t),nCo=r(WEe," \u2014 "),lI=n(WEe,"A",{href:!0});var fzr=s(lI);sCo=r(fzr,"MobileBertForSequenceClassification"),fzr.forEach(t),lCo=r(WEe," (MobileBERT model)"),WEe.forEach(t),iCo=i(L),a1=n(L,"LI",{});var QEe=s(a1);zre=n(QEe,"STRONG",{});var mzr=s(zre);dCo=r(mzr,"mpnet"),mzr.forEach(t),cCo=r(QEe," \u2014 "),iI=n(QEe,"A",{href:!0});var gzr=s(iI);fCo=r(gzr,"MPNetForSequenceClassification"),gzr.forEach(t),mCo=r(QEe," (MPNet model)"),QEe.forEach(t),gCo=i(L),n1=n(L,"LI",{});var HEe=s(n1);Wre=n(HEe,"STRONG",{});var hzr=s(Wre);hCo=r(hzr,"nystromformer"),hzr.forEach(t),uCo=r(HEe," \u2014 "),dI=n(HEe,"A",{href:!0});var uzr=s(dI);pCo=r(uzr,"NystromformerForSequenceClassification"),uzr.forEach(t),_Co=r(HEe," (Nystromformer model)"),HEe.forEach(t),vCo=i(L),s1=n(L,"LI",{});var UEe=s(s1);Qre=n(UEe,"STRONG",{});var pzr=s(Qre);bCo=r(pzr,"openai-gpt"),pzr.forEach(t),TCo=r(UEe," \u2014 "),cI=n(UEe,"A",{href:!0});var _zr=s(cI);FCo=r(_zr,"OpenAIGPTForSequenceClassification"),_zr.forEach(t),CCo=r(UEe," (OpenAI GPT model)"),UEe.forEach(t),MCo=i(L),l1=n(L,"LI",{});var JEe=s(l1);Hre=n(JEe,"STRONG",{});var vzr=s(Hre);ECo=r(vzr,"perceiver"),vzr.forEach(t),yCo=r(JEe," \u2014 "),fI=n(JEe,"A",{href:!0});var bzr=s(fI);wCo=r(bzr,"PerceiverForSequenceClassification"),bzr.forEach(t),ACo=r(JEe," (Perceiver model)"),JEe.forEach(t),LCo=i(L),i1=n(L,"LI",{});var YEe=s(i1);Ure=n(YEe,"STRONG",{});var Tzr=s(Ure);BCo=r(Tzr,"plbart"),Tzr.forEach(t),xCo=r(YEe," \u2014 "),mI=n(YEe,"A",{href:!0});var Fzr=s(mI);kCo=r(Fzr,"PLBartForSequenceClassification"),Fzr.forEach(t),RCo=r(YEe," (PLBart model)"),YEe.forEach(t),SCo=i(L),d1=n(L,"LI",{});var KEe=s(d1);Jre=n(KEe,"STRONG",{});var Czr=s(Jre);PCo=r(Czr,"qdqbert"),Czr.forEach(t),$Co=r(KEe," \u2014 "),gI=n(KEe,"A",{href:!0});var Mzr=s(gI);ICo=r(Mzr,"QDQBertForSequenceClassification"),Mzr.forEach(t),DCo=r(KEe," (QDQBert model)"),KEe.forEach(t),jCo=i(L),c1=n(L,"LI",{});var ZEe=s(c1);Yre=n(ZEe,"STRONG",{});var Ezr=s(Yre);NCo=r(Ezr,"reformer"),Ezr.forEach(t),qCo=r(ZEe," \u2014 "),hI=n(ZEe,"A",{href:!0});var yzr=s(hI);GCo=r(yzr,"ReformerForSequenceClassification"),yzr.forEach(t),OCo=r(ZEe," (Reformer model)"),ZEe.forEach(t),XCo=i(L),f1=n(L,"LI",{});var e3e=s(f1);Kre=n(e3e,"STRONG",{});var wzr=s(Kre);VCo=r(wzr,"rembert"),wzr.forEach(t),zCo=r(e3e," \u2014 "),uI=n(e3e,"A",{href:!0});var Azr=s(uI);WCo=r(Azr,"RemBertForSequenceClassification"),Azr.forEach(t),QCo=r(e3e," (RemBERT model)"),e3e.forEach(t),HCo=i(L),m1=n(L,"LI",{});var o3e=s(m1);Zre=n(o3e,"STRONG",{});var Lzr=s(Zre);UCo=r(Lzr,"roberta"),Lzr.forEach(t),JCo=r(o3e," \u2014 "),pI=n(o3e,"A",{href:!0});var Bzr=s(pI);YCo=r(Bzr,"RobertaForSequenceClassification"),Bzr.forEach(t),KCo=r(o3e," (RoBERTa model)"),o3e.forEach(t),ZCo=i(L),g1=n(L,"LI",{});var r3e=s(g1);ete=n(r3e,"STRONG",{});var xzr=s(ete);eMo=r(xzr,"roformer"),xzr.forEach(t),oMo=r(r3e," \u2014 "),_I=n(r3e,"A",{href:!0});var kzr=s(_I);rMo=r(kzr,"RoFormerForSequenceClassification"),kzr.forEach(t),tMo=r(r3e," (RoFormer model)"),r3e.forEach(t),aMo=i(L),h1=n(L,"LI",{});var t3e=s(h1);ote=n(t3e,"STRONG",{});var Rzr=s(ote);nMo=r(Rzr,"squeezebert"),Rzr.forEach(t),sMo=r(t3e," \u2014 "),vI=n(t3e,"A",{href:!0});var Szr=s(vI);lMo=r(Szr,"SqueezeBertForSequenceClassification"),Szr.forEach(t),iMo=r(t3e," (SqueezeBERT model)"),t3e.forEach(t),dMo=i(L),u1=n(L,"LI",{});var a3e=s(u1);rte=n(a3e,"STRONG",{});var Pzr=s(rte);cMo=r(Pzr,"tapas"),Pzr.forEach(t),fMo=r(a3e," \u2014 "),bI=n(a3e,"A",{href:!0});var $zr=s(bI);mMo=r($zr,"TapasForSequenceClassification"),$zr.forEach(t),gMo=r(a3e," (TAPAS model)"),a3e.forEach(t),hMo=i(L),p1=n(L,"LI",{});var n3e=s(p1);tte=n(n3e,"STRONG",{});var Izr=s(tte);uMo=r(Izr,"transfo-xl"),Izr.forEach(t),pMo=r(n3e," \u2014 "),TI=n(n3e,"A",{href:!0});var Dzr=s(TI);_Mo=r(Dzr,"TransfoXLForSequenceClassification"),Dzr.forEach(t),vMo=r(n3e," (Transformer-XL model)"),n3e.forEach(t),bMo=i(L),_1=n(L,"LI",{});var s3e=s(_1);ate=n(s3e,"STRONG",{});var jzr=s(ate);TMo=r(jzr,"xlm"),jzr.forEach(t),FMo=r(s3e," \u2014 "),FI=n(s3e,"A",{href:!0});var Nzr=s(FI);CMo=r(Nzr,"XLMForSequenceClassification"),Nzr.forEach(t),MMo=r(s3e," (XLM model)"),s3e.forEach(t),EMo=i(L),v1=n(L,"LI",{});var l3e=s(v1);nte=n(l3e,"STRONG",{});var qzr=s(nte);yMo=r(qzr,"xlm-roberta"),qzr.forEach(t),wMo=r(l3e," \u2014 "),CI=n(l3e,"A",{href:!0});var Gzr=s(CI);AMo=r(Gzr,"XLMRobertaForSequenceClassification"),Gzr.forEach(t),LMo=r(l3e," (XLM-RoBERTa model)"),l3e.forEach(t),BMo=i(L),b1=n(L,"LI",{});var i3e=s(b1);ste=n(i3e,"STRONG",{});var Ozr=s(ste);xMo=r(Ozr,"xlm-roberta-xl"),Ozr.forEach(t),kMo=r(i3e," \u2014 "),MI=n(i3e,"A",{href:!0});var Xzr=s(MI);RMo=r(Xzr,"XLMRobertaXLForSequenceClassification"),Xzr.forEach(t),SMo=r(i3e," (XLM-RoBERTa-XL model)"),i3e.forEach(t),PMo=i(L),T1=n(L,"LI",{});var d3e=s(T1);lte=n(d3e,"STRONG",{});var Vzr=s(lte);$Mo=r(Vzr,"xlnet"),Vzr.forEach(t),IMo=r(d3e," \u2014 "),EI=n(d3e,"A",{href:!0});var zzr=s(EI);DMo=r(zzr,"XLNetForSequenceClassification"),zzr.forEach(t),jMo=r(d3e," (XLNet model)"),d3e.forEach(t),NMo=i(L),F1=n(L,"LI",{});var c3e=s(F1);ite=n(c3e,"STRONG",{});var Wzr=s(ite);qMo=r(Wzr,"yoso"),Wzr.forEach(t),GMo=r(c3e," \u2014 "),yI=n(c3e,"A",{href:!0});var Qzr=s(yI);OMo=r(Qzr,"YosoForSequenceClassification"),Qzr.forEach(t),XMo=r(c3e," (YOSO model)"),c3e.forEach(t),L.forEach(t),VMo=i(qt),C1=n(qt,"P",{});var f3e=s(C1);zMo=r(f3e,"The model is set in evaluation mode by default using "),dte=n(f3e,"CODE",{});var Hzr=s(dte);WMo=r(Hzr,"model.eval()"),Hzr.forEach(t),QMo=r(f3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=n(f3e,"CODE",{});var Uzr=s(cte);HMo=r(Uzr,"model.train()"),Uzr.forEach(t),f3e.forEach(t),UMo=i(qt),fte=n(qt,"P",{});var Jzr=s(fte);JMo=r(Jzr,"Examples:"),Jzr.forEach(t),YMo=i(qt),m(X3.$$.fragment,qt),qt.forEach(t),Js.forEach(t),J9e=i(c),sd=n(c,"H2",{class:!0});var tke=s(sd);M1=n(tke,"A",{id:!0,class:!0,href:!0});var Yzr=s(M1);mte=n(Yzr,"SPAN",{});var Kzr=s(mte);m(V3.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),KMo=i(tke),gte=n(tke,"SPAN",{});var Zzr=s(gte);ZMo=r(Zzr,"AutoModelForMultipleChoice"),Zzr.forEach(t),tke.forEach(t),Y9e=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(z3.$$.fragment,Ks),eEo=i(Ks),ld=n(Ks,"P",{});var zV=s(ld);oEo=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=n(zV,"CODE",{});var eWr=s(hte);rEo=r(eWr,"from_pretrained()"),eWr.forEach(t),tEo=r(zV,"class method or the "),ute=n(zV,"CODE",{});var oWr=s(ute);aEo=r(oWr,"from_config()"),oWr.forEach(t),nEo=r(zV,`class
method.`),zV.forEach(t),sEo=i(Ks),W3=n(Ks,"P",{});var ake=s(W3);lEo=r(ake,"This class cannot be instantiated directly using "),pte=n(ake,"CODE",{});var rWr=s(pte);iEo=r(rWr,"__init__()"),rWr.forEach(t),dEo=r(ake," (throws an error)."),ake.forEach(t),cEo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Q3.$$.fragment,Zs),fEo=i(Zs),_te=n(Zs,"P",{});var tWr=s(_te);mEo=r(tWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tWr.forEach(t),gEo=i(Zs),id=n(Zs,"P",{});var WV=s(id);hEo=r(WV,`Note:
Loading a model from its configuration file does `),vte=n(WV,"STRONG",{});var aWr=s(vte);uEo=r(aWr,"not"),aWr.forEach(t),pEo=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),bte=n(WV,"CODE",{});var nWr=s(bte);_Eo=r(nWr,"from_pretrained()"),nWr.forEach(t),vEo=r(WV,"to load the model weights."),WV.forEach(t),bEo=i(Zs),Tte=n(Zs,"P",{});var sWr=s(Tte);TEo=r(sWr,"Examples:"),sWr.forEach(t),FEo=i(Zs),m(H3.$$.fragment,Zs),Zs.forEach(t),CEo=i(Ks),je=n(Ks,"DIV",{class:!0});var Gt=s(je);m(U3.$$.fragment,Gt),MEo=i(Gt),Fte=n(Gt,"P",{});var lWr=s(Fte);EEo=r(lWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lWr.forEach(t),yEo=i(Gt),za=n(Gt,"P",{});var RM=s(za);wEo=r(RM,"The model class to instantiate is selected based on the "),Cte=n(RM,"CODE",{});var iWr=s(Cte);AEo=r(iWr,"model_type"),iWr.forEach(t),LEo=r(RM,` property of the config object (either
passed as an argument or loaded from `),Mte=n(RM,"CODE",{});var dWr=s(Mte);BEo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),xEo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=n(RM,"CODE",{});var cWr=s(Ete);kEo=r(cWr,"pretrained_model_name_or_path"),cWr.forEach(t),REo=r(RM,":"),RM.forEach(t),SEo=i(Gt),G=n(Gt,"UL",{});var O=s(G);E1=n(O,"LI",{});var m3e=s(E1);yte=n(m3e,"STRONG",{});var fWr=s(yte);PEo=r(fWr,"albert"),fWr.forEach(t),$Eo=r(m3e," \u2014 "),wI=n(m3e,"A",{href:!0});var mWr=s(wI);IEo=r(mWr,"AlbertForMultipleChoice"),mWr.forEach(t),DEo=r(m3e," (ALBERT model)"),m3e.forEach(t),jEo=i(O),y1=n(O,"LI",{});var g3e=s(y1);wte=n(g3e,"STRONG",{});var gWr=s(wte);NEo=r(gWr,"bert"),gWr.forEach(t),qEo=r(g3e," \u2014 "),AI=n(g3e,"A",{href:!0});var hWr=s(AI);GEo=r(hWr,"BertForMultipleChoice"),hWr.forEach(t),OEo=r(g3e," (BERT model)"),g3e.forEach(t),XEo=i(O),w1=n(O,"LI",{});var h3e=s(w1);Ate=n(h3e,"STRONG",{});var uWr=s(Ate);VEo=r(uWr,"big_bird"),uWr.forEach(t),zEo=r(h3e," \u2014 "),LI=n(h3e,"A",{href:!0});var pWr=s(LI);WEo=r(pWr,"BigBirdForMultipleChoice"),pWr.forEach(t),QEo=r(h3e," (BigBird model)"),h3e.forEach(t),HEo=i(O),A1=n(O,"LI",{});var u3e=s(A1);Lte=n(u3e,"STRONG",{});var _Wr=s(Lte);UEo=r(_Wr,"camembert"),_Wr.forEach(t),JEo=r(u3e," \u2014 "),BI=n(u3e,"A",{href:!0});var vWr=s(BI);YEo=r(vWr,"CamembertForMultipleChoice"),vWr.forEach(t),KEo=r(u3e," (CamemBERT model)"),u3e.forEach(t),ZEo=i(O),L1=n(O,"LI",{});var p3e=s(L1);Bte=n(p3e,"STRONG",{});var bWr=s(Bte);e3o=r(bWr,"canine"),bWr.forEach(t),o3o=r(p3e," \u2014 "),xI=n(p3e,"A",{href:!0});var TWr=s(xI);r3o=r(TWr,"CanineForMultipleChoice"),TWr.forEach(t),t3o=r(p3e," (Canine model)"),p3e.forEach(t),a3o=i(O),B1=n(O,"LI",{});var _3e=s(B1);xte=n(_3e,"STRONG",{});var FWr=s(xte);n3o=r(FWr,"convbert"),FWr.forEach(t),s3o=r(_3e," \u2014 "),kI=n(_3e,"A",{href:!0});var CWr=s(kI);l3o=r(CWr,"ConvBertForMultipleChoice"),CWr.forEach(t),i3o=r(_3e," (ConvBERT model)"),_3e.forEach(t),d3o=i(O),x1=n(O,"LI",{});var v3e=s(x1);kte=n(v3e,"STRONG",{});var MWr=s(kte);c3o=r(MWr,"data2vec-text"),MWr.forEach(t),f3o=r(v3e," \u2014 "),RI=n(v3e,"A",{href:!0});var EWr=s(RI);m3o=r(EWr,"Data2VecTextForMultipleChoice"),EWr.forEach(t),g3o=r(v3e," (Data2VecText model)"),v3e.forEach(t),h3o=i(O),k1=n(O,"LI",{});var b3e=s(k1);Rte=n(b3e,"STRONG",{});var yWr=s(Rte);u3o=r(yWr,"distilbert"),yWr.forEach(t),p3o=r(b3e," \u2014 "),SI=n(b3e,"A",{href:!0});var wWr=s(SI);_3o=r(wWr,"DistilBertForMultipleChoice"),wWr.forEach(t),v3o=r(b3e," (DistilBERT model)"),b3e.forEach(t),b3o=i(O),R1=n(O,"LI",{});var T3e=s(R1);Ste=n(T3e,"STRONG",{});var AWr=s(Ste);T3o=r(AWr,"electra"),AWr.forEach(t),F3o=r(T3e," \u2014 "),PI=n(T3e,"A",{href:!0});var LWr=s(PI);C3o=r(LWr,"ElectraForMultipleChoice"),LWr.forEach(t),M3o=r(T3e," (ELECTRA model)"),T3e.forEach(t),E3o=i(O),S1=n(O,"LI",{});var F3e=s(S1);Pte=n(F3e,"STRONG",{});var BWr=s(Pte);y3o=r(BWr,"flaubert"),BWr.forEach(t),w3o=r(F3e," \u2014 "),$I=n(F3e,"A",{href:!0});var xWr=s($I);A3o=r(xWr,"FlaubertForMultipleChoice"),xWr.forEach(t),L3o=r(F3e," (FlauBERT model)"),F3e.forEach(t),B3o=i(O),P1=n(O,"LI",{});var C3e=s(P1);$te=n(C3e,"STRONG",{});var kWr=s($te);x3o=r(kWr,"fnet"),kWr.forEach(t),k3o=r(C3e," \u2014 "),II=n(C3e,"A",{href:!0});var RWr=s(II);R3o=r(RWr,"FNetForMultipleChoice"),RWr.forEach(t),S3o=r(C3e," (FNet model)"),C3e.forEach(t),P3o=i(O),$1=n(O,"LI",{});var M3e=s($1);Ite=n(M3e,"STRONG",{});var SWr=s(Ite);$3o=r(SWr,"funnel"),SWr.forEach(t),I3o=r(M3e," \u2014 "),DI=n(M3e,"A",{href:!0});var PWr=s(DI);D3o=r(PWr,"FunnelForMultipleChoice"),PWr.forEach(t),j3o=r(M3e," (Funnel Transformer model)"),M3e.forEach(t),N3o=i(O),I1=n(O,"LI",{});var E3e=s(I1);Dte=n(E3e,"STRONG",{});var $Wr=s(Dte);q3o=r($Wr,"ibert"),$Wr.forEach(t),G3o=r(E3e," \u2014 "),jI=n(E3e,"A",{href:!0});var IWr=s(jI);O3o=r(IWr,"IBertForMultipleChoice"),IWr.forEach(t),X3o=r(E3e," (I-BERT model)"),E3e.forEach(t),V3o=i(O),D1=n(O,"LI",{});var y3e=s(D1);jte=n(y3e,"STRONG",{});var DWr=s(jte);z3o=r(DWr,"longformer"),DWr.forEach(t),W3o=r(y3e," \u2014 "),NI=n(y3e,"A",{href:!0});var jWr=s(NI);Q3o=r(jWr,"LongformerForMultipleChoice"),jWr.forEach(t),H3o=r(y3e," (Longformer model)"),y3e.forEach(t),U3o=i(O),j1=n(O,"LI",{});var w3e=s(j1);Nte=n(w3e,"STRONG",{});var NWr=s(Nte);J3o=r(NWr,"megatron-bert"),NWr.forEach(t),Y3o=r(w3e," \u2014 "),qI=n(w3e,"A",{href:!0});var qWr=s(qI);K3o=r(qWr,"MegatronBertForMultipleChoice"),qWr.forEach(t),Z3o=r(w3e," (MegatronBert model)"),w3e.forEach(t),e5o=i(O),N1=n(O,"LI",{});var A3e=s(N1);qte=n(A3e,"STRONG",{});var GWr=s(qte);o5o=r(GWr,"mobilebert"),GWr.forEach(t),r5o=r(A3e," \u2014 "),GI=n(A3e,"A",{href:!0});var OWr=s(GI);t5o=r(OWr,"MobileBertForMultipleChoice"),OWr.forEach(t),a5o=r(A3e," (MobileBERT model)"),A3e.forEach(t),n5o=i(O),q1=n(O,"LI",{});var L3e=s(q1);Gte=n(L3e,"STRONG",{});var XWr=s(Gte);s5o=r(XWr,"mpnet"),XWr.forEach(t),l5o=r(L3e," \u2014 "),OI=n(L3e,"A",{href:!0});var VWr=s(OI);i5o=r(VWr,"MPNetForMultipleChoice"),VWr.forEach(t),d5o=r(L3e," (MPNet model)"),L3e.forEach(t),c5o=i(O),G1=n(O,"LI",{});var B3e=s(G1);Ote=n(B3e,"STRONG",{});var zWr=s(Ote);f5o=r(zWr,"nystromformer"),zWr.forEach(t),m5o=r(B3e," \u2014 "),XI=n(B3e,"A",{href:!0});var WWr=s(XI);g5o=r(WWr,"NystromformerForMultipleChoice"),WWr.forEach(t),h5o=r(B3e," (Nystromformer model)"),B3e.forEach(t),u5o=i(O),O1=n(O,"LI",{});var x3e=s(O1);Xte=n(x3e,"STRONG",{});var QWr=s(Xte);p5o=r(QWr,"qdqbert"),QWr.forEach(t),_5o=r(x3e," \u2014 "),VI=n(x3e,"A",{href:!0});var HWr=s(VI);v5o=r(HWr,"QDQBertForMultipleChoice"),HWr.forEach(t),b5o=r(x3e," (QDQBert model)"),x3e.forEach(t),T5o=i(O),X1=n(O,"LI",{});var k3e=s(X1);Vte=n(k3e,"STRONG",{});var UWr=s(Vte);F5o=r(UWr,"rembert"),UWr.forEach(t),C5o=r(k3e," \u2014 "),zI=n(k3e,"A",{href:!0});var JWr=s(zI);M5o=r(JWr,"RemBertForMultipleChoice"),JWr.forEach(t),E5o=r(k3e," (RemBERT model)"),k3e.forEach(t),y5o=i(O),V1=n(O,"LI",{});var R3e=s(V1);zte=n(R3e,"STRONG",{});var YWr=s(zte);w5o=r(YWr,"roberta"),YWr.forEach(t),A5o=r(R3e," \u2014 "),WI=n(R3e,"A",{href:!0});var KWr=s(WI);L5o=r(KWr,"RobertaForMultipleChoice"),KWr.forEach(t),B5o=r(R3e," (RoBERTa model)"),R3e.forEach(t),x5o=i(O),z1=n(O,"LI",{});var S3e=s(z1);Wte=n(S3e,"STRONG",{});var ZWr=s(Wte);k5o=r(ZWr,"roformer"),ZWr.forEach(t),R5o=r(S3e," \u2014 "),QI=n(S3e,"A",{href:!0});var eQr=s(QI);S5o=r(eQr,"RoFormerForMultipleChoice"),eQr.forEach(t),P5o=r(S3e," (RoFormer model)"),S3e.forEach(t),$5o=i(O),W1=n(O,"LI",{});var P3e=s(W1);Qte=n(P3e,"STRONG",{});var oQr=s(Qte);I5o=r(oQr,"squeezebert"),oQr.forEach(t),D5o=r(P3e," \u2014 "),HI=n(P3e,"A",{href:!0});var rQr=s(HI);j5o=r(rQr,"SqueezeBertForMultipleChoice"),rQr.forEach(t),N5o=r(P3e," (SqueezeBERT model)"),P3e.forEach(t),q5o=i(O),Q1=n(O,"LI",{});var $3e=s(Q1);Hte=n($3e,"STRONG",{});var tQr=s(Hte);G5o=r(tQr,"xlm"),tQr.forEach(t),O5o=r($3e," \u2014 "),UI=n($3e,"A",{href:!0});var aQr=s(UI);X5o=r(aQr,"XLMForMultipleChoice"),aQr.forEach(t),V5o=r($3e," (XLM model)"),$3e.forEach(t),z5o=i(O),H1=n(O,"LI",{});var I3e=s(H1);Ute=n(I3e,"STRONG",{});var nQr=s(Ute);W5o=r(nQr,"xlm-roberta"),nQr.forEach(t),Q5o=r(I3e," \u2014 "),JI=n(I3e,"A",{href:!0});var sQr=s(JI);H5o=r(sQr,"XLMRobertaForMultipleChoice"),sQr.forEach(t),U5o=r(I3e," (XLM-RoBERTa model)"),I3e.forEach(t),J5o=i(O),U1=n(O,"LI",{});var D3e=s(U1);Jte=n(D3e,"STRONG",{});var lQr=s(Jte);Y5o=r(lQr,"xlm-roberta-xl"),lQr.forEach(t),K5o=r(D3e," \u2014 "),YI=n(D3e,"A",{href:!0});var iQr=s(YI);Z5o=r(iQr,"XLMRobertaXLForMultipleChoice"),iQr.forEach(t),eyo=r(D3e," (XLM-RoBERTa-XL model)"),D3e.forEach(t),oyo=i(O),J1=n(O,"LI",{});var j3e=s(J1);Yte=n(j3e,"STRONG",{});var dQr=s(Yte);ryo=r(dQr,"xlnet"),dQr.forEach(t),tyo=r(j3e," \u2014 "),KI=n(j3e,"A",{href:!0});var cQr=s(KI);ayo=r(cQr,"XLNetForMultipleChoice"),cQr.forEach(t),nyo=r(j3e," (XLNet model)"),j3e.forEach(t),syo=i(O),Y1=n(O,"LI",{});var N3e=s(Y1);Kte=n(N3e,"STRONG",{});var fQr=s(Kte);lyo=r(fQr,"yoso"),fQr.forEach(t),iyo=r(N3e," \u2014 "),ZI=n(N3e,"A",{href:!0});var mQr=s(ZI);dyo=r(mQr,"YosoForMultipleChoice"),mQr.forEach(t),cyo=r(N3e," (YOSO model)"),N3e.forEach(t),O.forEach(t),fyo=i(Gt),K1=n(Gt,"P",{});var q3e=s(K1);myo=r(q3e,"The model is set in evaluation mode by default using "),Zte=n(q3e,"CODE",{});var gQr=s(Zte);gyo=r(gQr,"model.eval()"),gQr.forEach(t),hyo=r(q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=n(q3e,"CODE",{});var hQr=s(eae);uyo=r(hQr,"model.train()"),hQr.forEach(t),q3e.forEach(t),pyo=i(Gt),oae=n(Gt,"P",{});var uQr=s(oae);_yo=r(uQr,"Examples:"),uQr.forEach(t),vyo=i(Gt),m(J3.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),K9e=i(c),dd=n(c,"H2",{class:!0});var nke=s(dd);Z1=n(nke,"A",{id:!0,class:!0,href:!0});var pQr=s(Z1);rae=n(pQr,"SPAN",{});var _Qr=s(rae);m(Y3.$$.fragment,_Qr),_Qr.forEach(t),pQr.forEach(t),byo=i(nke),tae=n(nke,"SPAN",{});var vQr=s(tae);Tyo=r(vQr,"AutoModelForNextSentencePrediction"),vQr.forEach(t),nke.forEach(t),Z9e=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(K3.$$.fragment,el),Fyo=i(el),cd=n(el,"P",{});var QV=s(cd);Cyo=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=n(QV,"CODE",{});var bQr=s(aae);Myo=r(bQr,"from_pretrained()"),bQr.forEach(t),Eyo=r(QV,"class method or the "),nae=n(QV,"CODE",{});var TQr=s(nae);yyo=r(TQr,"from_config()"),TQr.forEach(t),wyo=r(QV,`class
method.`),QV.forEach(t),Ayo=i(el),Z3=n(el,"P",{});var ske=s(Z3);Lyo=r(ske,"This class cannot be instantiated directly using "),sae=n(ske,"CODE",{});var FQr=s(sae);Byo=r(FQr,"__init__()"),FQr.forEach(t),xyo=r(ske," (throws an error)."),ske.forEach(t),kyo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(e5.$$.fragment,ol),Ryo=i(ol),lae=n(ol,"P",{});var CQr=s(lae);Syo=r(CQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CQr.forEach(t),Pyo=i(ol),fd=n(ol,"P",{});var HV=s(fd);$yo=r(HV,`Note:
Loading a model from its configuration file does `),iae=n(HV,"STRONG",{});var MQr=s(iae);Iyo=r(MQr,"not"),MQr.forEach(t),Dyo=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(HV,"CODE",{});var EQr=s(dae);jyo=r(EQr,"from_pretrained()"),EQr.forEach(t),Nyo=r(HV,"to load the model weights."),HV.forEach(t),qyo=i(ol),cae=n(ol,"P",{});var yQr=s(cae);Gyo=r(yQr,"Examples:"),yQr.forEach(t),Oyo=i(ol),m(o5.$$.fragment,ol),ol.forEach(t),Xyo=i(el),Ne=n(el,"DIV",{class:!0});var Ot=s(Ne);m(r5.$$.fragment,Ot),Vyo=i(Ot),fae=n(Ot,"P",{});var wQr=s(fae);zyo=r(wQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wQr.forEach(t),Wyo=i(Ot),Wa=n(Ot,"P",{});var SM=s(Wa);Qyo=r(SM,"The model class to instantiate is selected based on the "),mae=n(SM,"CODE",{});var AQr=s(mae);Hyo=r(AQr,"model_type"),AQr.forEach(t),Uyo=r(SM,` property of the config object (either
passed as an argument or loaded from `),gae=n(SM,"CODE",{});var LQr=s(gae);Jyo=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),Yyo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=n(SM,"CODE",{});var BQr=s(hae);Kyo=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Zyo=r(SM,":"),SM.forEach(t),ewo=i(Ot),na=n(Ot,"UL",{});var rl=s(na);e4=n(rl,"LI",{});var G3e=s(e4);uae=n(G3e,"STRONG",{});var xQr=s(uae);owo=r(xQr,"bert"),xQr.forEach(t),rwo=r(G3e," \u2014 "),eD=n(G3e,"A",{href:!0});var kQr=s(eD);two=r(kQr,"BertForNextSentencePrediction"),kQr.forEach(t),awo=r(G3e," (BERT model)"),G3e.forEach(t),nwo=i(rl),o4=n(rl,"LI",{});var O3e=s(o4);pae=n(O3e,"STRONG",{});var RQr=s(pae);swo=r(RQr,"fnet"),RQr.forEach(t),lwo=r(O3e," \u2014 "),oD=n(O3e,"A",{href:!0});var SQr=s(oD);iwo=r(SQr,"FNetForNextSentencePrediction"),SQr.forEach(t),dwo=r(O3e," (FNet model)"),O3e.forEach(t),cwo=i(rl),r4=n(rl,"LI",{});var X3e=s(r4);_ae=n(X3e,"STRONG",{});var PQr=s(_ae);fwo=r(PQr,"megatron-bert"),PQr.forEach(t),mwo=r(X3e," \u2014 "),rD=n(X3e,"A",{href:!0});var $Qr=s(rD);gwo=r($Qr,"MegatronBertForNextSentencePrediction"),$Qr.forEach(t),hwo=r(X3e," (MegatronBert model)"),X3e.forEach(t),uwo=i(rl),t4=n(rl,"LI",{});var V3e=s(t4);vae=n(V3e,"STRONG",{});var IQr=s(vae);pwo=r(IQr,"mobilebert"),IQr.forEach(t),_wo=r(V3e," \u2014 "),tD=n(V3e,"A",{href:!0});var DQr=s(tD);vwo=r(DQr,"MobileBertForNextSentencePrediction"),DQr.forEach(t),bwo=r(V3e," (MobileBERT model)"),V3e.forEach(t),Two=i(rl),a4=n(rl,"LI",{});var z3e=s(a4);bae=n(z3e,"STRONG",{});var jQr=s(bae);Fwo=r(jQr,"qdqbert"),jQr.forEach(t),Cwo=r(z3e," \u2014 "),aD=n(z3e,"A",{href:!0});var NQr=s(aD);Mwo=r(NQr,"QDQBertForNextSentencePrediction"),NQr.forEach(t),Ewo=r(z3e," (QDQBert model)"),z3e.forEach(t),rl.forEach(t),ywo=i(Ot),n4=n(Ot,"P",{});var W3e=s(n4);wwo=r(W3e,"The model is set in evaluation mode by default using "),Tae=n(W3e,"CODE",{});var qQr=s(Tae);Awo=r(qQr,"model.eval()"),qQr.forEach(t),Lwo=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=n(W3e,"CODE",{});var GQr=s(Fae);Bwo=r(GQr,"model.train()"),GQr.forEach(t),W3e.forEach(t),xwo=i(Ot),Cae=n(Ot,"P",{});var OQr=s(Cae);kwo=r(OQr,"Examples:"),OQr.forEach(t),Rwo=i(Ot),m(t5.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),eBe=i(c),md=n(c,"H2",{class:!0});var lke=s(md);s4=n(lke,"A",{id:!0,class:!0,href:!0});var XQr=s(s4);Mae=n(XQr,"SPAN",{});var VQr=s(Mae);m(a5.$$.fragment,VQr),VQr.forEach(t),XQr.forEach(t),Swo=i(lke),Eae=n(lke,"SPAN",{});var zQr=s(Eae);Pwo=r(zQr,"AutoModelForTokenClassification"),zQr.forEach(t),lke.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(n5.$$.fragment,tl),$wo=i(tl),gd=n(tl,"P",{});var UV=s(gd);Iwo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=n(UV,"CODE",{});var WQr=s(yae);Dwo=r(WQr,"from_pretrained()"),WQr.forEach(t),jwo=r(UV,"class method or the "),wae=n(UV,"CODE",{});var QQr=s(wae);Nwo=r(QQr,"from_config()"),QQr.forEach(t),qwo=r(UV,`class
method.`),UV.forEach(t),Gwo=i(tl),s5=n(tl,"P",{});var ike=s(s5);Owo=r(ike,"This class cannot be instantiated directly using "),Aae=n(ike,"CODE",{});var HQr=s(Aae);Xwo=r(HQr,"__init__()"),HQr.forEach(t),Vwo=r(ike," (throws an error)."),ike.forEach(t),zwo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(l5.$$.fragment,al),Wwo=i(al),Lae=n(al,"P",{});var UQr=s(Lae);Qwo=r(UQr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UQr.forEach(t),Hwo=i(al),hd=n(al,"P",{});var JV=s(hd);Uwo=r(JV,`Note:
Loading a model from its configuration file does `),Bae=n(JV,"STRONG",{});var JQr=s(Bae);Jwo=r(JQr,"not"),JQr.forEach(t),Ywo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(JV,"CODE",{});var YQr=s(xae);Kwo=r(YQr,"from_pretrained()"),YQr.forEach(t),Zwo=r(JV,"to load the model weights."),JV.forEach(t),e6o=i(al),kae=n(al,"P",{});var KQr=s(kae);o6o=r(KQr,"Examples:"),KQr.forEach(t),r6o=i(al),m(i5.$$.fragment,al),al.forEach(t),t6o=i(tl),qe=n(tl,"DIV",{class:!0});var Xt=s(qe);m(d5.$$.fragment,Xt),a6o=i(Xt),Rae=n(Xt,"P",{});var ZQr=s(Rae);n6o=r(ZQr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZQr.forEach(t),s6o=i(Xt),Qa=n(Xt,"P",{});var PM=s(Qa);l6o=r(PM,"The model class to instantiate is selected based on the "),Sae=n(PM,"CODE",{});var eHr=s(Sae);i6o=r(eHr,"model_type"),eHr.forEach(t),d6o=r(PM,` property of the config object (either
passed as an argument or loaded from `),Pae=n(PM,"CODE",{});var oHr=s(Pae);c6o=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),f6o=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=n(PM,"CODE",{});var rHr=s($ae);m6o=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),g6o=r(PM,":"),PM.forEach(t),h6o=i(Xt),N=n(Xt,"UL",{});var q=s(N);l4=n(q,"LI",{});var Q3e=s(l4);Iae=n(Q3e,"STRONG",{});var tHr=s(Iae);u6o=r(tHr,"albert"),tHr.forEach(t),p6o=r(Q3e," \u2014 "),nD=n(Q3e,"A",{href:!0});var aHr=s(nD);_6o=r(aHr,"AlbertForTokenClassification"),aHr.forEach(t),v6o=r(Q3e," (ALBERT model)"),Q3e.forEach(t),b6o=i(q),i4=n(q,"LI",{});var H3e=s(i4);Dae=n(H3e,"STRONG",{});var nHr=s(Dae);T6o=r(nHr,"bert"),nHr.forEach(t),F6o=r(H3e," \u2014 "),sD=n(H3e,"A",{href:!0});var sHr=s(sD);C6o=r(sHr,"BertForTokenClassification"),sHr.forEach(t),M6o=r(H3e," (BERT model)"),H3e.forEach(t),E6o=i(q),d4=n(q,"LI",{});var U3e=s(d4);jae=n(U3e,"STRONG",{});var lHr=s(jae);y6o=r(lHr,"big_bird"),lHr.forEach(t),w6o=r(U3e," \u2014 "),lD=n(U3e,"A",{href:!0});var iHr=s(lD);A6o=r(iHr,"BigBirdForTokenClassification"),iHr.forEach(t),L6o=r(U3e," (BigBird model)"),U3e.forEach(t),B6o=i(q),c4=n(q,"LI",{});var J3e=s(c4);Nae=n(J3e,"STRONG",{});var dHr=s(Nae);x6o=r(dHr,"camembert"),dHr.forEach(t),k6o=r(J3e," \u2014 "),iD=n(J3e,"A",{href:!0});var cHr=s(iD);R6o=r(cHr,"CamembertForTokenClassification"),cHr.forEach(t),S6o=r(J3e," (CamemBERT model)"),J3e.forEach(t),P6o=i(q),f4=n(q,"LI",{});var Y3e=s(f4);qae=n(Y3e,"STRONG",{});var fHr=s(qae);$6o=r(fHr,"canine"),fHr.forEach(t),I6o=r(Y3e," \u2014 "),dD=n(Y3e,"A",{href:!0});var mHr=s(dD);D6o=r(mHr,"CanineForTokenClassification"),mHr.forEach(t),j6o=r(Y3e," (Canine model)"),Y3e.forEach(t),N6o=i(q),m4=n(q,"LI",{});var K3e=s(m4);Gae=n(K3e,"STRONG",{});var gHr=s(Gae);q6o=r(gHr,"convbert"),gHr.forEach(t),G6o=r(K3e," \u2014 "),cD=n(K3e,"A",{href:!0});var hHr=s(cD);O6o=r(hHr,"ConvBertForTokenClassification"),hHr.forEach(t),X6o=r(K3e," (ConvBERT model)"),K3e.forEach(t),V6o=i(q),g4=n(q,"LI",{});var Z3e=s(g4);Oae=n(Z3e,"STRONG",{});var uHr=s(Oae);z6o=r(uHr,"data2vec-text"),uHr.forEach(t),W6o=r(Z3e," \u2014 "),fD=n(Z3e,"A",{href:!0});var pHr=s(fD);Q6o=r(pHr,"Data2VecTextForTokenClassification"),pHr.forEach(t),H6o=r(Z3e," (Data2VecText model)"),Z3e.forEach(t),U6o=i(q),h4=n(q,"LI",{});var e5e=s(h4);Xae=n(e5e,"STRONG",{});var _Hr=s(Xae);J6o=r(_Hr,"deberta"),_Hr.forEach(t),Y6o=r(e5e," \u2014 "),mD=n(e5e,"A",{href:!0});var vHr=s(mD);K6o=r(vHr,"DebertaForTokenClassification"),vHr.forEach(t),Z6o=r(e5e," (DeBERTa model)"),e5e.forEach(t),eAo=i(q),u4=n(q,"LI",{});var o5e=s(u4);Vae=n(o5e,"STRONG",{});var bHr=s(Vae);oAo=r(bHr,"deberta-v2"),bHr.forEach(t),rAo=r(o5e," \u2014 "),gD=n(o5e,"A",{href:!0});var THr=s(gD);tAo=r(THr,"DebertaV2ForTokenClassification"),THr.forEach(t),aAo=r(o5e," (DeBERTa-v2 model)"),o5e.forEach(t),nAo=i(q),p4=n(q,"LI",{});var r5e=s(p4);zae=n(r5e,"STRONG",{});var FHr=s(zae);sAo=r(FHr,"distilbert"),FHr.forEach(t),lAo=r(r5e," \u2014 "),hD=n(r5e,"A",{href:!0});var CHr=s(hD);iAo=r(CHr,"DistilBertForTokenClassification"),CHr.forEach(t),dAo=r(r5e," (DistilBERT model)"),r5e.forEach(t),cAo=i(q),_4=n(q,"LI",{});var t5e=s(_4);Wae=n(t5e,"STRONG",{});var MHr=s(Wae);fAo=r(MHr,"electra"),MHr.forEach(t),mAo=r(t5e," \u2014 "),uD=n(t5e,"A",{href:!0});var EHr=s(uD);gAo=r(EHr,"ElectraForTokenClassification"),EHr.forEach(t),hAo=r(t5e," (ELECTRA model)"),t5e.forEach(t),uAo=i(q),v4=n(q,"LI",{});var a5e=s(v4);Qae=n(a5e,"STRONG",{});var yHr=s(Qae);pAo=r(yHr,"flaubert"),yHr.forEach(t),_Ao=r(a5e," \u2014 "),pD=n(a5e,"A",{href:!0});var wHr=s(pD);vAo=r(wHr,"FlaubertForTokenClassification"),wHr.forEach(t),bAo=r(a5e," (FlauBERT model)"),a5e.forEach(t),TAo=i(q),b4=n(q,"LI",{});var n5e=s(b4);Hae=n(n5e,"STRONG",{});var AHr=s(Hae);FAo=r(AHr,"fnet"),AHr.forEach(t),CAo=r(n5e," \u2014 "),_D=n(n5e,"A",{href:!0});var LHr=s(_D);MAo=r(LHr,"FNetForTokenClassification"),LHr.forEach(t),EAo=r(n5e," (FNet model)"),n5e.forEach(t),yAo=i(q),T4=n(q,"LI",{});var s5e=s(T4);Uae=n(s5e,"STRONG",{});var BHr=s(Uae);wAo=r(BHr,"funnel"),BHr.forEach(t),AAo=r(s5e," \u2014 "),vD=n(s5e,"A",{href:!0});var xHr=s(vD);LAo=r(xHr,"FunnelForTokenClassification"),xHr.forEach(t),BAo=r(s5e," (Funnel Transformer model)"),s5e.forEach(t),xAo=i(q),F4=n(q,"LI",{});var l5e=s(F4);Jae=n(l5e,"STRONG",{});var kHr=s(Jae);kAo=r(kHr,"gpt2"),kHr.forEach(t),RAo=r(l5e," \u2014 "),bD=n(l5e,"A",{href:!0});var RHr=s(bD);SAo=r(RHr,"GPT2ForTokenClassification"),RHr.forEach(t),PAo=r(l5e," (OpenAI GPT-2 model)"),l5e.forEach(t),$Ao=i(q),C4=n(q,"LI",{});var i5e=s(C4);Yae=n(i5e,"STRONG",{});var SHr=s(Yae);IAo=r(SHr,"ibert"),SHr.forEach(t),DAo=r(i5e," \u2014 "),TD=n(i5e,"A",{href:!0});var PHr=s(TD);jAo=r(PHr,"IBertForTokenClassification"),PHr.forEach(t),NAo=r(i5e," (I-BERT model)"),i5e.forEach(t),qAo=i(q),M4=n(q,"LI",{});var d5e=s(M4);Kae=n(d5e,"STRONG",{});var $Hr=s(Kae);GAo=r($Hr,"layoutlm"),$Hr.forEach(t),OAo=r(d5e," \u2014 "),FD=n(d5e,"A",{href:!0});var IHr=s(FD);XAo=r(IHr,"LayoutLMForTokenClassification"),IHr.forEach(t),VAo=r(d5e," (LayoutLM model)"),d5e.forEach(t),zAo=i(q),E4=n(q,"LI",{});var c5e=s(E4);Zae=n(c5e,"STRONG",{});var DHr=s(Zae);WAo=r(DHr,"layoutlmv2"),DHr.forEach(t),QAo=r(c5e," \u2014 "),CD=n(c5e,"A",{href:!0});var jHr=s(CD);HAo=r(jHr,"LayoutLMv2ForTokenClassification"),jHr.forEach(t),UAo=r(c5e," (LayoutLMv2 model)"),c5e.forEach(t),JAo=i(q),y4=n(q,"LI",{});var f5e=s(y4);ene=n(f5e,"STRONG",{});var NHr=s(ene);YAo=r(NHr,"longformer"),NHr.forEach(t),KAo=r(f5e," \u2014 "),MD=n(f5e,"A",{href:!0});var qHr=s(MD);ZAo=r(qHr,"LongformerForTokenClassification"),qHr.forEach(t),eLo=r(f5e," (Longformer model)"),f5e.forEach(t),oLo=i(q),w4=n(q,"LI",{});var m5e=s(w4);one=n(m5e,"STRONG",{});var GHr=s(one);rLo=r(GHr,"megatron-bert"),GHr.forEach(t),tLo=r(m5e," \u2014 "),ED=n(m5e,"A",{href:!0});var OHr=s(ED);aLo=r(OHr,"MegatronBertForTokenClassification"),OHr.forEach(t),nLo=r(m5e," (MegatronBert model)"),m5e.forEach(t),sLo=i(q),A4=n(q,"LI",{});var g5e=s(A4);rne=n(g5e,"STRONG",{});var XHr=s(rne);lLo=r(XHr,"mobilebert"),XHr.forEach(t),iLo=r(g5e," \u2014 "),yD=n(g5e,"A",{href:!0});var VHr=s(yD);dLo=r(VHr,"MobileBertForTokenClassification"),VHr.forEach(t),cLo=r(g5e," (MobileBERT model)"),g5e.forEach(t),fLo=i(q),L4=n(q,"LI",{});var h5e=s(L4);tne=n(h5e,"STRONG",{});var zHr=s(tne);mLo=r(zHr,"mpnet"),zHr.forEach(t),gLo=r(h5e," \u2014 "),wD=n(h5e,"A",{href:!0});var WHr=s(wD);hLo=r(WHr,"MPNetForTokenClassification"),WHr.forEach(t),uLo=r(h5e," (MPNet model)"),h5e.forEach(t),pLo=i(q),B4=n(q,"LI",{});var u5e=s(B4);ane=n(u5e,"STRONG",{});var QHr=s(ane);_Lo=r(QHr,"nystromformer"),QHr.forEach(t),vLo=r(u5e," \u2014 "),AD=n(u5e,"A",{href:!0});var HHr=s(AD);bLo=r(HHr,"NystromformerForTokenClassification"),HHr.forEach(t),TLo=r(u5e," (Nystromformer model)"),u5e.forEach(t),FLo=i(q),x4=n(q,"LI",{});var p5e=s(x4);nne=n(p5e,"STRONG",{});var UHr=s(nne);CLo=r(UHr,"qdqbert"),UHr.forEach(t),MLo=r(p5e," \u2014 "),LD=n(p5e,"A",{href:!0});var JHr=s(LD);ELo=r(JHr,"QDQBertForTokenClassification"),JHr.forEach(t),yLo=r(p5e," (QDQBert model)"),p5e.forEach(t),wLo=i(q),k4=n(q,"LI",{});var _5e=s(k4);sne=n(_5e,"STRONG",{});var YHr=s(sne);ALo=r(YHr,"rembert"),YHr.forEach(t),LLo=r(_5e," \u2014 "),BD=n(_5e,"A",{href:!0});var KHr=s(BD);BLo=r(KHr,"RemBertForTokenClassification"),KHr.forEach(t),xLo=r(_5e," (RemBERT model)"),_5e.forEach(t),kLo=i(q),R4=n(q,"LI",{});var v5e=s(R4);lne=n(v5e,"STRONG",{});var ZHr=s(lne);RLo=r(ZHr,"roberta"),ZHr.forEach(t),SLo=r(v5e," \u2014 "),xD=n(v5e,"A",{href:!0});var eUr=s(xD);PLo=r(eUr,"RobertaForTokenClassification"),eUr.forEach(t),$Lo=r(v5e," (RoBERTa model)"),v5e.forEach(t),ILo=i(q),S4=n(q,"LI",{});var b5e=s(S4);ine=n(b5e,"STRONG",{});var oUr=s(ine);DLo=r(oUr,"roformer"),oUr.forEach(t),jLo=r(b5e," \u2014 "),kD=n(b5e,"A",{href:!0});var rUr=s(kD);NLo=r(rUr,"RoFormerForTokenClassification"),rUr.forEach(t),qLo=r(b5e," (RoFormer model)"),b5e.forEach(t),GLo=i(q),P4=n(q,"LI",{});var T5e=s(P4);dne=n(T5e,"STRONG",{});var tUr=s(dne);OLo=r(tUr,"squeezebert"),tUr.forEach(t),XLo=r(T5e," \u2014 "),RD=n(T5e,"A",{href:!0});var aUr=s(RD);VLo=r(aUr,"SqueezeBertForTokenClassification"),aUr.forEach(t),zLo=r(T5e," (SqueezeBERT model)"),T5e.forEach(t),WLo=i(q),$4=n(q,"LI",{});var F5e=s($4);cne=n(F5e,"STRONG",{});var nUr=s(cne);QLo=r(nUr,"xlm"),nUr.forEach(t),HLo=r(F5e," \u2014 "),SD=n(F5e,"A",{href:!0});var sUr=s(SD);ULo=r(sUr,"XLMForTokenClassification"),sUr.forEach(t),JLo=r(F5e," (XLM model)"),F5e.forEach(t),YLo=i(q),I4=n(q,"LI",{});var C5e=s(I4);fne=n(C5e,"STRONG",{});var lUr=s(fne);KLo=r(lUr,"xlm-roberta"),lUr.forEach(t),ZLo=r(C5e," \u2014 "),PD=n(C5e,"A",{href:!0});var iUr=s(PD);e8o=r(iUr,"XLMRobertaForTokenClassification"),iUr.forEach(t),o8o=r(C5e," (XLM-RoBERTa model)"),C5e.forEach(t),r8o=i(q),D4=n(q,"LI",{});var M5e=s(D4);mne=n(M5e,"STRONG",{});var dUr=s(mne);t8o=r(dUr,"xlm-roberta-xl"),dUr.forEach(t),a8o=r(M5e," \u2014 "),$D=n(M5e,"A",{href:!0});var cUr=s($D);n8o=r(cUr,"XLMRobertaXLForTokenClassification"),cUr.forEach(t),s8o=r(M5e," (XLM-RoBERTa-XL model)"),M5e.forEach(t),l8o=i(q),j4=n(q,"LI",{});var E5e=s(j4);gne=n(E5e,"STRONG",{});var fUr=s(gne);i8o=r(fUr,"xlnet"),fUr.forEach(t),d8o=r(E5e," \u2014 "),ID=n(E5e,"A",{href:!0});var mUr=s(ID);c8o=r(mUr,"XLNetForTokenClassification"),mUr.forEach(t),f8o=r(E5e," (XLNet model)"),E5e.forEach(t),m8o=i(q),N4=n(q,"LI",{});var y5e=s(N4);hne=n(y5e,"STRONG",{});var gUr=s(hne);g8o=r(gUr,"yoso"),gUr.forEach(t),h8o=r(y5e," \u2014 "),DD=n(y5e,"A",{href:!0});var hUr=s(DD);u8o=r(hUr,"YosoForTokenClassification"),hUr.forEach(t),p8o=r(y5e," (YOSO model)"),y5e.forEach(t),q.forEach(t),_8o=i(Xt),q4=n(Xt,"P",{});var w5e=s(q4);v8o=r(w5e,"The model is set in evaluation mode by default using "),une=n(w5e,"CODE",{});var uUr=s(une);b8o=r(uUr,"model.eval()"),uUr.forEach(t),T8o=r(w5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=n(w5e,"CODE",{});var pUr=s(pne);F8o=r(pUr,"model.train()"),pUr.forEach(t),w5e.forEach(t),C8o=i(Xt),_ne=n(Xt,"P",{});var _Ur=s(_ne);M8o=r(_Ur,"Examples:"),_Ur.forEach(t),E8o=i(Xt),m(c5.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),rBe=i(c),ud=n(c,"H2",{class:!0});var dke=s(ud);G4=n(dke,"A",{id:!0,class:!0,href:!0});var vUr=s(G4);vne=n(vUr,"SPAN",{});var bUr=s(vne);m(f5.$$.fragment,bUr),bUr.forEach(t),vUr.forEach(t),y8o=i(dke),bne=n(dke,"SPAN",{});var TUr=s(bne);w8o=r(TUr,"AutoModelForQuestionAnswering"),TUr.forEach(t),dke.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(m5.$$.fragment,nl),A8o=i(nl),pd=n(nl,"P",{});var YV=s(pd);L8o=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=n(YV,"CODE",{});var FUr=s(Tne);B8o=r(FUr,"from_pretrained()"),FUr.forEach(t),x8o=r(YV,"class method or the "),Fne=n(YV,"CODE",{});var CUr=s(Fne);k8o=r(CUr,"from_config()"),CUr.forEach(t),R8o=r(YV,`class
method.`),YV.forEach(t),S8o=i(nl),g5=n(nl,"P",{});var cke=s(g5);P8o=r(cke,"This class cannot be instantiated directly using "),Cne=n(cke,"CODE",{});var MUr=s(Cne);$8o=r(MUr,"__init__()"),MUr.forEach(t),I8o=r(cke," (throws an error)."),cke.forEach(t),D8o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(h5.$$.fragment,sl),j8o=i(sl),Mne=n(sl,"P",{});var EUr=s(Mne);N8o=r(EUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EUr.forEach(t),q8o=i(sl),_d=n(sl,"P",{});var KV=s(_d);G8o=r(KV,`Note:
Loading a model from its configuration file does `),Ene=n(KV,"STRONG",{});var yUr=s(Ene);O8o=r(yUr,"not"),yUr.forEach(t),X8o=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),yne=n(KV,"CODE",{});var wUr=s(yne);V8o=r(wUr,"from_pretrained()"),wUr.forEach(t),z8o=r(KV,"to load the model weights."),KV.forEach(t),W8o=i(sl),wne=n(sl,"P",{});var AUr=s(wne);Q8o=r(AUr,"Examples:"),AUr.forEach(t),H8o=i(sl),m(u5.$$.fragment,sl),sl.forEach(t),U8o=i(nl),Ge=n(nl,"DIV",{class:!0});var Vt=s(Ge);m(p5.$$.fragment,Vt),J8o=i(Vt),Ane=n(Vt,"P",{});var LUr=s(Ane);Y8o=r(LUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LUr.forEach(t),K8o=i(Vt),Ha=n(Vt,"P",{});var $M=s(Ha);Z8o=r($M,"The model class to instantiate is selected based on the "),Lne=n($M,"CODE",{});var BUr=s(Lne);e9o=r(BUr,"model_type"),BUr.forEach(t),o9o=r($M,` property of the config object (either
passed as an argument or loaded from `),Bne=n($M,"CODE",{});var xUr=s(Bne);r9o=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),t9o=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=n($M,"CODE",{});var kUr=s(xne);a9o=r(kUr,"pretrained_model_name_or_path"),kUr.forEach(t),n9o=r($M,":"),$M.forEach(t),s9o=i(Vt),R=n(Vt,"UL",{});var P=s(R);O4=n(P,"LI",{});var A5e=s(O4);kne=n(A5e,"STRONG",{});var RUr=s(kne);l9o=r(RUr,"albert"),RUr.forEach(t),i9o=r(A5e," \u2014 "),jD=n(A5e,"A",{href:!0});var SUr=s(jD);d9o=r(SUr,"AlbertForQuestionAnswering"),SUr.forEach(t),c9o=r(A5e," (ALBERT model)"),A5e.forEach(t),f9o=i(P),X4=n(P,"LI",{});var L5e=s(X4);Rne=n(L5e,"STRONG",{});var PUr=s(Rne);m9o=r(PUr,"bart"),PUr.forEach(t),g9o=r(L5e," \u2014 "),ND=n(L5e,"A",{href:!0});var $Ur=s(ND);h9o=r($Ur,"BartForQuestionAnswering"),$Ur.forEach(t),u9o=r(L5e," (BART model)"),L5e.forEach(t),p9o=i(P),V4=n(P,"LI",{});var B5e=s(V4);Sne=n(B5e,"STRONG",{});var IUr=s(Sne);_9o=r(IUr,"bert"),IUr.forEach(t),v9o=r(B5e," \u2014 "),qD=n(B5e,"A",{href:!0});var DUr=s(qD);b9o=r(DUr,"BertForQuestionAnswering"),DUr.forEach(t),T9o=r(B5e," (BERT model)"),B5e.forEach(t),F9o=i(P),z4=n(P,"LI",{});var x5e=s(z4);Pne=n(x5e,"STRONG",{});var jUr=s(Pne);C9o=r(jUr,"big_bird"),jUr.forEach(t),M9o=r(x5e," \u2014 "),GD=n(x5e,"A",{href:!0});var NUr=s(GD);E9o=r(NUr,"BigBirdForQuestionAnswering"),NUr.forEach(t),y9o=r(x5e," (BigBird model)"),x5e.forEach(t),w9o=i(P),W4=n(P,"LI",{});var k5e=s(W4);$ne=n(k5e,"STRONG",{});var qUr=s($ne);A9o=r(qUr,"bigbird_pegasus"),qUr.forEach(t),L9o=r(k5e," \u2014 "),OD=n(k5e,"A",{href:!0});var GUr=s(OD);B9o=r(GUr,"BigBirdPegasusForQuestionAnswering"),GUr.forEach(t),x9o=r(k5e," (BigBirdPegasus model)"),k5e.forEach(t),k9o=i(P),Q4=n(P,"LI",{});var R5e=s(Q4);Ine=n(R5e,"STRONG",{});var OUr=s(Ine);R9o=r(OUr,"camembert"),OUr.forEach(t),S9o=r(R5e," \u2014 "),XD=n(R5e,"A",{href:!0});var XUr=s(XD);P9o=r(XUr,"CamembertForQuestionAnswering"),XUr.forEach(t),$9o=r(R5e," (CamemBERT model)"),R5e.forEach(t),I9o=i(P),H4=n(P,"LI",{});var S5e=s(H4);Dne=n(S5e,"STRONG",{});var VUr=s(Dne);D9o=r(VUr,"canine"),VUr.forEach(t),j9o=r(S5e," \u2014 "),VD=n(S5e,"A",{href:!0});var zUr=s(VD);N9o=r(zUr,"CanineForQuestionAnswering"),zUr.forEach(t),q9o=r(S5e," (Canine model)"),S5e.forEach(t),G9o=i(P),U4=n(P,"LI",{});var P5e=s(U4);jne=n(P5e,"STRONG",{});var WUr=s(jne);O9o=r(WUr,"convbert"),WUr.forEach(t),X9o=r(P5e," \u2014 "),zD=n(P5e,"A",{href:!0});var QUr=s(zD);V9o=r(QUr,"ConvBertForQuestionAnswering"),QUr.forEach(t),z9o=r(P5e," (ConvBERT model)"),P5e.forEach(t),W9o=i(P),J4=n(P,"LI",{});var $5e=s(J4);Nne=n($5e,"STRONG",{});var HUr=s(Nne);Q9o=r(HUr,"data2vec-text"),HUr.forEach(t),H9o=r($5e," \u2014 "),WD=n($5e,"A",{href:!0});var UUr=s(WD);U9o=r(UUr,"Data2VecTextForQuestionAnswering"),UUr.forEach(t),J9o=r($5e," (Data2VecText model)"),$5e.forEach(t),Y9o=i(P),Y4=n(P,"LI",{});var I5e=s(Y4);qne=n(I5e,"STRONG",{});var JUr=s(qne);K9o=r(JUr,"deberta"),JUr.forEach(t),Z9o=r(I5e," \u2014 "),QD=n(I5e,"A",{href:!0});var YUr=s(QD);eBo=r(YUr,"DebertaForQuestionAnswering"),YUr.forEach(t),oBo=r(I5e," (DeBERTa model)"),I5e.forEach(t),rBo=i(P),K4=n(P,"LI",{});var D5e=s(K4);Gne=n(D5e,"STRONG",{});var KUr=s(Gne);tBo=r(KUr,"deberta-v2"),KUr.forEach(t),aBo=r(D5e," \u2014 "),HD=n(D5e,"A",{href:!0});var ZUr=s(HD);nBo=r(ZUr,"DebertaV2ForQuestionAnswering"),ZUr.forEach(t),sBo=r(D5e," (DeBERTa-v2 model)"),D5e.forEach(t),lBo=i(P),Z4=n(P,"LI",{});var j5e=s(Z4);One=n(j5e,"STRONG",{});var eJr=s(One);iBo=r(eJr,"distilbert"),eJr.forEach(t),dBo=r(j5e," \u2014 "),UD=n(j5e,"A",{href:!0});var oJr=s(UD);cBo=r(oJr,"DistilBertForQuestionAnswering"),oJr.forEach(t),fBo=r(j5e," (DistilBERT model)"),j5e.forEach(t),mBo=i(P),eb=n(P,"LI",{});var N5e=s(eb);Xne=n(N5e,"STRONG",{});var rJr=s(Xne);gBo=r(rJr,"electra"),rJr.forEach(t),hBo=r(N5e," \u2014 "),JD=n(N5e,"A",{href:!0});var tJr=s(JD);uBo=r(tJr,"ElectraForQuestionAnswering"),tJr.forEach(t),pBo=r(N5e," (ELECTRA model)"),N5e.forEach(t),_Bo=i(P),ob=n(P,"LI",{});var q5e=s(ob);Vne=n(q5e,"STRONG",{});var aJr=s(Vne);vBo=r(aJr,"flaubert"),aJr.forEach(t),bBo=r(q5e," \u2014 "),YD=n(q5e,"A",{href:!0});var nJr=s(YD);TBo=r(nJr,"FlaubertForQuestionAnsweringSimple"),nJr.forEach(t),FBo=r(q5e," (FlauBERT model)"),q5e.forEach(t),CBo=i(P),rb=n(P,"LI",{});var G5e=s(rb);zne=n(G5e,"STRONG",{});var sJr=s(zne);MBo=r(sJr,"fnet"),sJr.forEach(t),EBo=r(G5e," \u2014 "),KD=n(G5e,"A",{href:!0});var lJr=s(KD);yBo=r(lJr,"FNetForQuestionAnswering"),lJr.forEach(t),wBo=r(G5e," (FNet model)"),G5e.forEach(t),ABo=i(P),tb=n(P,"LI",{});var O5e=s(tb);Wne=n(O5e,"STRONG",{});var iJr=s(Wne);LBo=r(iJr,"funnel"),iJr.forEach(t),BBo=r(O5e," \u2014 "),ZD=n(O5e,"A",{href:!0});var dJr=s(ZD);xBo=r(dJr,"FunnelForQuestionAnswering"),dJr.forEach(t),kBo=r(O5e," (Funnel Transformer model)"),O5e.forEach(t),RBo=i(P),ab=n(P,"LI",{});var X5e=s(ab);Qne=n(X5e,"STRONG",{});var cJr=s(Qne);SBo=r(cJr,"gptj"),cJr.forEach(t),PBo=r(X5e," \u2014 "),ej=n(X5e,"A",{href:!0});var fJr=s(ej);$Bo=r(fJr,"GPTJForQuestionAnswering"),fJr.forEach(t),IBo=r(X5e," (GPT-J model)"),X5e.forEach(t),DBo=i(P),nb=n(P,"LI",{});var V5e=s(nb);Hne=n(V5e,"STRONG",{});var mJr=s(Hne);jBo=r(mJr,"ibert"),mJr.forEach(t),NBo=r(V5e," \u2014 "),oj=n(V5e,"A",{href:!0});var gJr=s(oj);qBo=r(gJr,"IBertForQuestionAnswering"),gJr.forEach(t),GBo=r(V5e," (I-BERT model)"),V5e.forEach(t),OBo=i(P),sb=n(P,"LI",{});var z5e=s(sb);Une=n(z5e,"STRONG",{});var hJr=s(Une);XBo=r(hJr,"layoutlmv2"),hJr.forEach(t),VBo=r(z5e," \u2014 "),rj=n(z5e,"A",{href:!0});var uJr=s(rj);zBo=r(uJr,"LayoutLMv2ForQuestionAnswering"),uJr.forEach(t),WBo=r(z5e," (LayoutLMv2 model)"),z5e.forEach(t),QBo=i(P),lb=n(P,"LI",{});var W5e=s(lb);Jne=n(W5e,"STRONG",{});var pJr=s(Jne);HBo=r(pJr,"led"),pJr.forEach(t),UBo=r(W5e," \u2014 "),tj=n(W5e,"A",{href:!0});var _Jr=s(tj);JBo=r(_Jr,"LEDForQuestionAnswering"),_Jr.forEach(t),YBo=r(W5e," (LED model)"),W5e.forEach(t),KBo=i(P),ib=n(P,"LI",{});var Q5e=s(ib);Yne=n(Q5e,"STRONG",{});var vJr=s(Yne);ZBo=r(vJr,"longformer"),vJr.forEach(t),exo=r(Q5e," \u2014 "),aj=n(Q5e,"A",{href:!0});var bJr=s(aj);oxo=r(bJr,"LongformerForQuestionAnswering"),bJr.forEach(t),rxo=r(Q5e," (Longformer model)"),Q5e.forEach(t),txo=i(P),db=n(P,"LI",{});var H5e=s(db);Kne=n(H5e,"STRONG",{});var TJr=s(Kne);axo=r(TJr,"lxmert"),TJr.forEach(t),nxo=r(H5e," \u2014 "),nj=n(H5e,"A",{href:!0});var FJr=s(nj);sxo=r(FJr,"LxmertForQuestionAnswering"),FJr.forEach(t),lxo=r(H5e," (LXMERT model)"),H5e.forEach(t),ixo=i(P),cb=n(P,"LI",{});var U5e=s(cb);Zne=n(U5e,"STRONG",{});var CJr=s(Zne);dxo=r(CJr,"mbart"),CJr.forEach(t),cxo=r(U5e," \u2014 "),sj=n(U5e,"A",{href:!0});var MJr=s(sj);fxo=r(MJr,"MBartForQuestionAnswering"),MJr.forEach(t),mxo=r(U5e," (mBART model)"),U5e.forEach(t),gxo=i(P),fb=n(P,"LI",{});var J5e=s(fb);ese=n(J5e,"STRONG",{});var EJr=s(ese);hxo=r(EJr,"megatron-bert"),EJr.forEach(t),uxo=r(J5e," \u2014 "),lj=n(J5e,"A",{href:!0});var yJr=s(lj);pxo=r(yJr,"MegatronBertForQuestionAnswering"),yJr.forEach(t),_xo=r(J5e," (MegatronBert model)"),J5e.forEach(t),vxo=i(P),mb=n(P,"LI",{});var Y5e=s(mb);ose=n(Y5e,"STRONG",{});var wJr=s(ose);bxo=r(wJr,"mobilebert"),wJr.forEach(t),Txo=r(Y5e," \u2014 "),ij=n(Y5e,"A",{href:!0});var AJr=s(ij);Fxo=r(AJr,"MobileBertForQuestionAnswering"),AJr.forEach(t),Cxo=r(Y5e," (MobileBERT model)"),Y5e.forEach(t),Mxo=i(P),gb=n(P,"LI",{});var K5e=s(gb);rse=n(K5e,"STRONG",{});var LJr=s(rse);Exo=r(LJr,"mpnet"),LJr.forEach(t),yxo=r(K5e," \u2014 "),dj=n(K5e,"A",{href:!0});var BJr=s(dj);wxo=r(BJr,"MPNetForQuestionAnswering"),BJr.forEach(t),Axo=r(K5e," (MPNet model)"),K5e.forEach(t),Lxo=i(P),hb=n(P,"LI",{});var Z5e=s(hb);tse=n(Z5e,"STRONG",{});var xJr=s(tse);Bxo=r(xJr,"nystromformer"),xJr.forEach(t),xxo=r(Z5e," \u2014 "),cj=n(Z5e,"A",{href:!0});var kJr=s(cj);kxo=r(kJr,"NystromformerForQuestionAnswering"),kJr.forEach(t),Rxo=r(Z5e," (Nystromformer model)"),Z5e.forEach(t),Sxo=i(P),ub=n(P,"LI",{});var eye=s(ub);ase=n(eye,"STRONG",{});var RJr=s(ase);Pxo=r(RJr,"qdqbert"),RJr.forEach(t),$xo=r(eye," \u2014 "),fj=n(eye,"A",{href:!0});var SJr=s(fj);Ixo=r(SJr,"QDQBertForQuestionAnswering"),SJr.forEach(t),Dxo=r(eye," (QDQBert model)"),eye.forEach(t),jxo=i(P),pb=n(P,"LI",{});var oye=s(pb);nse=n(oye,"STRONG",{});var PJr=s(nse);Nxo=r(PJr,"reformer"),PJr.forEach(t),qxo=r(oye," \u2014 "),mj=n(oye,"A",{href:!0});var $Jr=s(mj);Gxo=r($Jr,"ReformerForQuestionAnswering"),$Jr.forEach(t),Oxo=r(oye," (Reformer model)"),oye.forEach(t),Xxo=i(P),_b=n(P,"LI",{});var rye=s(_b);sse=n(rye,"STRONG",{});var IJr=s(sse);Vxo=r(IJr,"rembert"),IJr.forEach(t),zxo=r(rye," \u2014 "),gj=n(rye,"A",{href:!0});var DJr=s(gj);Wxo=r(DJr,"RemBertForQuestionAnswering"),DJr.forEach(t),Qxo=r(rye," (RemBERT model)"),rye.forEach(t),Hxo=i(P),vb=n(P,"LI",{});var tye=s(vb);lse=n(tye,"STRONG",{});var jJr=s(lse);Uxo=r(jJr,"roberta"),jJr.forEach(t),Jxo=r(tye," \u2014 "),hj=n(tye,"A",{href:!0});var NJr=s(hj);Yxo=r(NJr,"RobertaForQuestionAnswering"),NJr.forEach(t),Kxo=r(tye," (RoBERTa model)"),tye.forEach(t),Zxo=i(P),bb=n(P,"LI",{});var aye=s(bb);ise=n(aye,"STRONG",{});var qJr=s(ise);eko=r(qJr,"roformer"),qJr.forEach(t),oko=r(aye," \u2014 "),uj=n(aye,"A",{href:!0});var GJr=s(uj);rko=r(GJr,"RoFormerForQuestionAnswering"),GJr.forEach(t),tko=r(aye," (RoFormer model)"),aye.forEach(t),ako=i(P),Tb=n(P,"LI",{});var nye=s(Tb);dse=n(nye,"STRONG",{});var OJr=s(dse);nko=r(OJr,"splinter"),OJr.forEach(t),sko=r(nye," \u2014 "),pj=n(nye,"A",{href:!0});var XJr=s(pj);lko=r(XJr,"SplinterForQuestionAnswering"),XJr.forEach(t),iko=r(nye," (Splinter model)"),nye.forEach(t),dko=i(P),Fb=n(P,"LI",{});var sye=s(Fb);cse=n(sye,"STRONG",{});var VJr=s(cse);cko=r(VJr,"squeezebert"),VJr.forEach(t),fko=r(sye," \u2014 "),_j=n(sye,"A",{href:!0});var zJr=s(_j);mko=r(zJr,"SqueezeBertForQuestionAnswering"),zJr.forEach(t),gko=r(sye," (SqueezeBERT model)"),sye.forEach(t),hko=i(P),Cb=n(P,"LI",{});var lye=s(Cb);fse=n(lye,"STRONG",{});var WJr=s(fse);uko=r(WJr,"xlm"),WJr.forEach(t),pko=r(lye," \u2014 "),vj=n(lye,"A",{href:!0});var QJr=s(vj);_ko=r(QJr,"XLMForQuestionAnsweringSimple"),QJr.forEach(t),vko=r(lye," (XLM model)"),lye.forEach(t),bko=i(P),Mb=n(P,"LI",{});var iye=s(Mb);mse=n(iye,"STRONG",{});var HJr=s(mse);Tko=r(HJr,"xlm-roberta"),HJr.forEach(t),Fko=r(iye," \u2014 "),bj=n(iye,"A",{href:!0});var UJr=s(bj);Cko=r(UJr,"XLMRobertaForQuestionAnswering"),UJr.forEach(t),Mko=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),Eko=i(P),Eb=n(P,"LI",{});var dye=s(Eb);gse=n(dye,"STRONG",{});var JJr=s(gse);yko=r(JJr,"xlm-roberta-xl"),JJr.forEach(t),wko=r(dye," \u2014 "),Tj=n(dye,"A",{href:!0});var YJr=s(Tj);Ako=r(YJr,"XLMRobertaXLForQuestionAnswering"),YJr.forEach(t),Lko=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),Bko=i(P),yb=n(P,"LI",{});var cye=s(yb);hse=n(cye,"STRONG",{});var KJr=s(hse);xko=r(KJr,"xlnet"),KJr.forEach(t),kko=r(cye," \u2014 "),Fj=n(cye,"A",{href:!0});var ZJr=s(Fj);Rko=r(ZJr,"XLNetForQuestionAnsweringSimple"),ZJr.forEach(t),Sko=r(cye," (XLNet model)"),cye.forEach(t),Pko=i(P),wb=n(P,"LI",{});var fye=s(wb);use=n(fye,"STRONG",{});var eYr=s(use);$ko=r(eYr,"yoso"),eYr.forEach(t),Iko=r(fye," \u2014 "),Cj=n(fye,"A",{href:!0});var oYr=s(Cj);Dko=r(oYr,"YosoForQuestionAnswering"),oYr.forEach(t),jko=r(fye," (YOSO model)"),fye.forEach(t),P.forEach(t),Nko=i(Vt),Ab=n(Vt,"P",{});var mye=s(Ab);qko=r(mye,"The model is set in evaluation mode by default using "),pse=n(mye,"CODE",{});var rYr=s(pse);Gko=r(rYr,"model.eval()"),rYr.forEach(t),Oko=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=n(mye,"CODE",{});var tYr=s(_se);Xko=r(tYr,"model.train()"),tYr.forEach(t),mye.forEach(t),Vko=i(Vt),vse=n(Vt,"P",{});var aYr=s(vse);zko=r(aYr,"Examples:"),aYr.forEach(t),Wko=i(Vt),m(_5.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),aBe=i(c),vd=n(c,"H2",{class:!0});var fke=s(vd);Lb=n(fke,"A",{id:!0,class:!0,href:!0});var nYr=s(Lb);bse=n(nYr,"SPAN",{});var sYr=s(bse);m(v5.$$.fragment,sYr),sYr.forEach(t),nYr.forEach(t),Qko=i(fke),Tse=n(fke,"SPAN",{});var lYr=s(Tse);Hko=r(lYr,"AutoModelForTableQuestionAnswering"),lYr.forEach(t),fke.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(b5.$$.fragment,ll),Uko=i(ll),bd=n(ll,"P",{});var ZV=s(bd);Jko=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fse=n(ZV,"CODE",{});var iYr=s(Fse);Yko=r(iYr,"from_pretrained()"),iYr.forEach(t),Kko=r(ZV,"class method or the "),Cse=n(ZV,"CODE",{});var dYr=s(Cse);Zko=r(dYr,"from_config()"),dYr.forEach(t),eRo=r(ZV,`class
method.`),ZV.forEach(t),oRo=i(ll),T5=n(ll,"P",{});var mke=s(T5);rRo=r(mke,"This class cannot be instantiated directly using "),Mse=n(mke,"CODE",{});var cYr=s(Mse);tRo=r(cYr,"__init__()"),cYr.forEach(t),aRo=r(mke," (throws an error)."),mke.forEach(t),nRo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(F5.$$.fragment,il),sRo=i(il),Ese=n(il,"P",{});var fYr=s(Ese);lRo=r(fYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fYr.forEach(t),iRo=i(il),Td=n(il,"P",{});var ez=s(Td);dRo=r(ez,`Note:
Loading a model from its configuration file does `),yse=n(ez,"STRONG",{});var mYr=s(yse);cRo=r(mYr,"not"),mYr.forEach(t),fRo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=n(ez,"CODE",{});var gYr=s(wse);mRo=r(gYr,"from_pretrained()"),gYr.forEach(t),gRo=r(ez,"to load the model weights."),ez.forEach(t),hRo=i(il),Ase=n(il,"P",{});var hYr=s(Ase);uRo=r(hYr,"Examples:"),hYr.forEach(t),pRo=i(il),m(C5.$$.fragment,il),il.forEach(t),_Ro=i(ll),Oe=n(ll,"DIV",{class:!0});var zt=s(Oe);m(M5.$$.fragment,zt),vRo=i(zt),Lse=n(zt,"P",{});var uYr=s(Lse);bRo=r(uYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uYr.forEach(t),TRo=i(zt),Ua=n(zt,"P",{});var IM=s(Ua);FRo=r(IM,"The model class to instantiate is selected based on the "),Bse=n(IM,"CODE",{});var pYr=s(Bse);CRo=r(pYr,"model_type"),pYr.forEach(t),MRo=r(IM,` property of the config object (either
passed as an argument or loaded from `),xse=n(IM,"CODE",{});var _Yr=s(xse);ERo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),yRo=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=n(IM,"CODE",{});var vYr=s(kse);wRo=r(vYr,"pretrained_model_name_or_path"),vYr.forEach(t),ARo=r(IM,":"),IM.forEach(t),LRo=i(zt),Rse=n(zt,"UL",{});var bYr=s(Rse);Bb=n(bYr,"LI",{});var gye=s(Bb);Sse=n(gye,"STRONG",{});var TYr=s(Sse);BRo=r(TYr,"tapas"),TYr.forEach(t),xRo=r(gye," \u2014 "),Mj=n(gye,"A",{href:!0});var FYr=s(Mj);kRo=r(FYr,"TapasForQuestionAnswering"),FYr.forEach(t),RRo=r(gye," (TAPAS model)"),gye.forEach(t),bYr.forEach(t),SRo=i(zt),xb=n(zt,"P",{});var hye=s(xb);PRo=r(hye,"The model is set in evaluation mode by default using "),Pse=n(hye,"CODE",{});var CYr=s(Pse);$Ro=r(CYr,"model.eval()"),CYr.forEach(t),IRo=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$se=n(hye,"CODE",{});var MYr=s($se);DRo=r(MYr,"model.train()"),MYr.forEach(t),hye.forEach(t),jRo=i(zt),Ise=n(zt,"P",{});var EYr=s(Ise);NRo=r(EYr,"Examples:"),EYr.forEach(t),qRo=i(zt),m(E5.$$.fragment,zt),zt.forEach(t),ll.forEach(t),sBe=i(c),Fd=n(c,"H2",{class:!0});var gke=s(Fd);kb=n(gke,"A",{id:!0,class:!0,href:!0});var yYr=s(kb);Dse=n(yYr,"SPAN",{});var wYr=s(Dse);m(y5.$$.fragment,wYr),wYr.forEach(t),yYr.forEach(t),GRo=i(gke),jse=n(gke,"SPAN",{});var AYr=s(jse);ORo=r(AYr,"AutoModelForImageClassification"),AYr.forEach(t),gke.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(w5.$$.fragment,dl),XRo=i(dl),Cd=n(dl,"P",{});var oz=s(Cd);VRo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nse=n(oz,"CODE",{});var LYr=s(Nse);zRo=r(LYr,"from_pretrained()"),LYr.forEach(t),WRo=r(oz,"class method or the "),qse=n(oz,"CODE",{});var BYr=s(qse);QRo=r(BYr,"from_config()"),BYr.forEach(t),HRo=r(oz,`class
method.`),oz.forEach(t),URo=i(dl),A5=n(dl,"P",{});var hke=s(A5);JRo=r(hke,"This class cannot be instantiated directly using "),Gse=n(hke,"CODE",{});var xYr=s(Gse);YRo=r(xYr,"__init__()"),xYr.forEach(t),KRo=r(hke," (throws an error)."),hke.forEach(t),ZRo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(L5.$$.fragment,cl),eSo=i(cl),Ose=n(cl,"P",{});var kYr=s(Ose);oSo=r(kYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kYr.forEach(t),rSo=i(cl),Md=n(cl,"P",{});var rz=s(Md);tSo=r(rz,`Note:
Loading a model from its configuration file does `),Xse=n(rz,"STRONG",{});var RYr=s(Xse);aSo=r(RYr,"not"),RYr.forEach(t),nSo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vse=n(rz,"CODE",{});var SYr=s(Vse);sSo=r(SYr,"from_pretrained()"),SYr.forEach(t),lSo=r(rz,"to load the model weights."),rz.forEach(t),iSo=i(cl),zse=n(cl,"P",{});var PYr=s(zse);dSo=r(PYr,"Examples:"),PYr.forEach(t),cSo=i(cl),m(B5.$$.fragment,cl),cl.forEach(t),fSo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(x5.$$.fragment,Wt),mSo=i(Wt),Wse=n(Wt,"P",{});var $Yr=s(Wse);gSo=r($Yr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Yr.forEach(t),hSo=i(Wt),Ja=n(Wt,"P",{});var DM=s(Ja);uSo=r(DM,"The model class to instantiate is selected based on the "),Qse=n(DM,"CODE",{});var IYr=s(Qse);pSo=r(IYr,"model_type"),IYr.forEach(t),_So=r(DM,` property of the config object (either
passed as an argument or loaded from `),Hse=n(DM,"CODE",{});var DYr=s(Hse);vSo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),bSo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=n(DM,"CODE",{});var jYr=s(Use);TSo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),FSo=r(DM,":"),DM.forEach(t),CSo=i(Wt),ve=n(Wt,"UL",{});var eo=s(ve);Rb=n(eo,"LI",{});var uye=s(Rb);Jse=n(uye,"STRONG",{});var NYr=s(Jse);MSo=r(NYr,"beit"),NYr.forEach(t),ESo=r(uye," \u2014 "),Ej=n(uye,"A",{href:!0});var qYr=s(Ej);ySo=r(qYr,"BeitForImageClassification"),qYr.forEach(t),wSo=r(uye," (BEiT model)"),uye.forEach(t),ASo=i(eo),Sb=n(eo,"LI",{});var pye=s(Sb);Yse=n(pye,"STRONG",{});var GYr=s(Yse);LSo=r(GYr,"convnext"),GYr.forEach(t),BSo=r(pye," \u2014 "),yj=n(pye,"A",{href:!0});var OYr=s(yj);xSo=r(OYr,"ConvNextForImageClassification"),OYr.forEach(t),kSo=r(pye," (ConvNext model)"),pye.forEach(t),RSo=i(eo),Ps=n(eo,"LI",{});var n8=s(Ps);Kse=n(n8,"STRONG",{});var XYr=s(Kse);SSo=r(XYr,"deit"),XYr.forEach(t),PSo=r(n8," \u2014 "),wj=n(n8,"A",{href:!0});var VYr=s(wj);$So=r(VYr,"DeiTForImageClassification"),VYr.forEach(t),ISo=r(n8," or "),Aj=n(n8,"A",{href:!0});var zYr=s(Aj);DSo=r(zYr,"DeiTForImageClassificationWithTeacher"),zYr.forEach(t),jSo=r(n8," (DeiT model)"),n8.forEach(t),NSo=i(eo),Pb=n(eo,"LI",{});var _ye=s(Pb);Zse=n(_ye,"STRONG",{});var WYr=s(Zse);qSo=r(WYr,"imagegpt"),WYr.forEach(t),GSo=r(_ye," \u2014 "),Lj=n(_ye,"A",{href:!0});var QYr=s(Lj);OSo=r(QYr,"ImageGPTForImageClassification"),QYr.forEach(t),XSo=r(_ye," (ImageGPT model)"),_ye.forEach(t),VSo=i(eo),la=n(eo,"LI",{});var Mf=s(la);ele=n(Mf,"STRONG",{});var HYr=s(ele);zSo=r(HYr,"perceiver"),HYr.forEach(t),WSo=r(Mf," \u2014 "),Bj=n(Mf,"A",{href:!0});var UYr=s(Bj);QSo=r(UYr,"PerceiverForImageClassificationLearned"),UYr.forEach(t),HSo=r(Mf," or "),xj=n(Mf,"A",{href:!0});var JYr=s(xj);USo=r(JYr,"PerceiverForImageClassificationFourier"),JYr.forEach(t),JSo=r(Mf," or "),kj=n(Mf,"A",{href:!0});var YYr=s(kj);YSo=r(YYr,"PerceiverForImageClassificationConvProcessing"),YYr.forEach(t),KSo=r(Mf," (Perceiver model)"),Mf.forEach(t),ZSo=i(eo),$b=n(eo,"LI",{});var vye=s($b);ole=n(vye,"STRONG",{});var KYr=s(ole);ePo=r(KYr,"poolformer"),KYr.forEach(t),oPo=r(vye," \u2014 "),Rj=n(vye,"A",{href:!0});var ZYr=s(Rj);rPo=r(ZYr,"PoolFormerForImageClassification"),ZYr.forEach(t),tPo=r(vye," (PoolFormer model)"),vye.forEach(t),aPo=i(eo),Ib=n(eo,"LI",{});var bye=s(Ib);rle=n(bye,"STRONG",{});var eKr=s(rle);nPo=r(eKr,"segformer"),eKr.forEach(t),sPo=r(bye," \u2014 "),Sj=n(bye,"A",{href:!0});var oKr=s(Sj);lPo=r(oKr,"SegformerForImageClassification"),oKr.forEach(t),iPo=r(bye," (SegFormer model)"),bye.forEach(t),dPo=i(eo),Db=n(eo,"LI",{});var Tye=s(Db);tle=n(Tye,"STRONG",{});var rKr=s(tle);cPo=r(rKr,"swin"),rKr.forEach(t),fPo=r(Tye," \u2014 "),Pj=n(Tye,"A",{href:!0});var tKr=s(Pj);mPo=r(tKr,"SwinForImageClassification"),tKr.forEach(t),gPo=r(Tye," (Swin model)"),Tye.forEach(t),hPo=i(eo),jb=n(eo,"LI",{});var Fye=s(jb);ale=n(Fye,"STRONG",{});var aKr=s(ale);uPo=r(aKr,"vit"),aKr.forEach(t),pPo=r(Fye," \u2014 "),$j=n(Fye,"A",{href:!0});var nKr=s($j);_Po=r(nKr,"ViTForImageClassification"),nKr.forEach(t),vPo=r(Fye," (ViT model)"),Fye.forEach(t),eo.forEach(t),bPo=i(Wt),Nb=n(Wt,"P",{});var Cye=s(Nb);TPo=r(Cye,"The model is set in evaluation mode by default using "),nle=n(Cye,"CODE",{});var sKr=s(nle);FPo=r(sKr,"model.eval()"),sKr.forEach(t),CPo=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=n(Cye,"CODE",{});var lKr=s(sle);MPo=r(lKr,"model.train()"),lKr.forEach(t),Cye.forEach(t),EPo=i(Wt),lle=n(Wt,"P",{});var iKr=s(lle);yPo=r(iKr,"Examples:"),iKr.forEach(t),wPo=i(Wt),m(k5.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),iBe=i(c),Ed=n(c,"H2",{class:!0});var uke=s(Ed);qb=n(uke,"A",{id:!0,class:!0,href:!0});var dKr=s(qb);ile=n(dKr,"SPAN",{});var cKr=s(ile);m(R5.$$.fragment,cKr),cKr.forEach(t),dKr.forEach(t),APo=i(uke),dle=n(uke,"SPAN",{});var fKr=s(dle);LPo=r(fKr,"AutoModelForVision2Seq"),fKr.forEach(t),uke.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(S5.$$.fragment,fl),BPo=i(fl),yd=n(fl,"P",{});var tz=s(yd);xPo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=n(tz,"CODE",{});var mKr=s(cle);kPo=r(mKr,"from_pretrained()"),mKr.forEach(t),RPo=r(tz,"class method or the "),fle=n(tz,"CODE",{});var gKr=s(fle);SPo=r(gKr,"from_config()"),gKr.forEach(t),PPo=r(tz,`class
method.`),tz.forEach(t),$Po=i(fl),P5=n(fl,"P",{});var pke=s(P5);IPo=r(pke,"This class cannot be instantiated directly using "),mle=n(pke,"CODE",{});var hKr=s(mle);DPo=r(hKr,"__init__()"),hKr.forEach(t),jPo=r(pke," (throws an error)."),pke.forEach(t),NPo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m($5.$$.fragment,ml),qPo=i(ml),gle=n(ml,"P",{});var uKr=s(gle);GPo=r(uKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uKr.forEach(t),OPo=i(ml),wd=n(ml,"P",{});var az=s(wd);XPo=r(az,`Note:
Loading a model from its configuration file does `),hle=n(az,"STRONG",{});var pKr=s(hle);VPo=r(pKr,"not"),pKr.forEach(t),zPo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=n(az,"CODE",{});var _Kr=s(ule);WPo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),QPo=r(az,"to load the model weights."),az.forEach(t),HPo=i(ml),ple=n(ml,"P",{});var vKr=s(ple);UPo=r(vKr,"Examples:"),vKr.forEach(t),JPo=i(ml),m(I5.$$.fragment,ml),ml.forEach(t),YPo=i(fl),Ve=n(fl,"DIV",{class:!0});var Qt=s(Ve);m(D5.$$.fragment,Qt),KPo=i(Qt),_le=n(Qt,"P",{});var bKr=s(_le);ZPo=r(bKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bKr.forEach(t),e$o=i(Qt),Ya=n(Qt,"P",{});var jM=s(Ya);o$o=r(jM,"The model class to instantiate is selected based on the "),vle=n(jM,"CODE",{});var TKr=s(vle);r$o=r(TKr,"model_type"),TKr.forEach(t),t$o=r(jM,` property of the config object (either
passed as an argument or loaded from `),ble=n(jM,"CODE",{});var FKr=s(ble);a$o=r(FKr,"pretrained_model_name_or_path"),FKr.forEach(t),n$o=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(jM,"CODE",{});var CKr=s(Tle);s$o=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),l$o=r(jM,":"),jM.forEach(t),i$o=i(Qt),Fle=n(Qt,"UL",{});var MKr=s(Fle);Gb=n(MKr,"LI",{});var Mye=s(Gb);Cle=n(Mye,"STRONG",{});var EKr=s(Cle);d$o=r(EKr,"vision-encoder-decoder"),EKr.forEach(t),c$o=r(Mye," \u2014 "),Ij=n(Mye,"A",{href:!0});var yKr=s(Ij);f$o=r(yKr,"VisionEncoderDecoderModel"),yKr.forEach(t),m$o=r(Mye," (Vision Encoder decoder model)"),Mye.forEach(t),MKr.forEach(t),g$o=i(Qt),Ob=n(Qt,"P",{});var Eye=s(Ob);h$o=r(Eye,"The model is set in evaluation mode by default using "),Mle=n(Eye,"CODE",{});var wKr=s(Mle);u$o=r(wKr,"model.eval()"),wKr.forEach(t),p$o=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=n(Eye,"CODE",{});var AKr=s(Ele);_$o=r(AKr,"model.train()"),AKr.forEach(t),Eye.forEach(t),v$o=i(Qt),yle=n(Qt,"P",{});var LKr=s(yle);b$o=r(LKr,"Examples:"),LKr.forEach(t),T$o=i(Qt),m(j5.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),cBe=i(c),Ad=n(c,"H2",{class:!0});var _ke=s(Ad);Xb=n(_ke,"A",{id:!0,class:!0,href:!0});var BKr=s(Xb);wle=n(BKr,"SPAN",{});var xKr=s(wle);m(N5.$$.fragment,xKr),xKr.forEach(t),BKr.forEach(t),F$o=i(_ke),Ale=n(_ke,"SPAN",{});var kKr=s(Ale);C$o=r(kKr,"AutoModelForAudioClassification"),kKr.forEach(t),_ke.forEach(t),fBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(q5.$$.fragment,gl),M$o=i(gl),Ld=n(gl,"P",{});var nz=s(Ld);E$o=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=n(nz,"CODE",{});var RKr=s(Lle);y$o=r(RKr,"from_pretrained()"),RKr.forEach(t),w$o=r(nz,"class method or the "),Ble=n(nz,"CODE",{});var SKr=s(Ble);A$o=r(SKr,"from_config()"),SKr.forEach(t),L$o=r(nz,`class
method.`),nz.forEach(t),B$o=i(gl),G5=n(gl,"P",{});var vke=s(G5);x$o=r(vke,"This class cannot be instantiated directly using "),xle=n(vke,"CODE",{});var PKr=s(xle);k$o=r(PKr,"__init__()"),PKr.forEach(t),R$o=r(vke," (throws an error)."),vke.forEach(t),S$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(O5.$$.fragment,hl),P$o=i(hl),kle=n(hl,"P",{});var $Kr=s(kle);$$o=r($Kr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$Kr.forEach(t),I$o=i(hl),Bd=n(hl,"P",{});var sz=s(Bd);D$o=r(sz,`Note:
Loading a model from its configuration file does `),Rle=n(sz,"STRONG",{});var IKr=s(Rle);j$o=r(IKr,"not"),IKr.forEach(t),N$o=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=n(sz,"CODE",{});var DKr=s(Sle);q$o=r(DKr,"from_pretrained()"),DKr.forEach(t),G$o=r(sz,"to load the model weights."),sz.forEach(t),O$o=i(hl),Ple=n(hl,"P",{});var jKr=s(Ple);X$o=r(jKr,"Examples:"),jKr.forEach(t),V$o=i(hl),m(X5.$$.fragment,hl),hl.forEach(t),z$o=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(V5.$$.fragment,Ht),W$o=i(Ht),$le=n(Ht,"P",{});var NKr=s($le);Q$o=r(NKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NKr.forEach(t),H$o=i(Ht),Ka=n(Ht,"P",{});var NM=s(Ka);U$o=r(NM,"The model class to instantiate is selected based on the "),Ile=n(NM,"CODE",{});var qKr=s(Ile);J$o=r(qKr,"model_type"),qKr.forEach(t),Y$o=r(NM,` property of the config object (either
passed as an argument or loaded from `),Dle=n(NM,"CODE",{});var GKr=s(Dle);K$o=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),Z$o=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=n(NM,"CODE",{});var OKr=s(jle);eIo=r(OKr,"pretrained_model_name_or_path"),OKr.forEach(t),oIo=r(NM,":"),NM.forEach(t),rIo=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);Vb=n(No,"LI",{});var yye=s(Vb);Nle=n(yye,"STRONG",{});var XKr=s(Nle);tIo=r(XKr,"data2vec-audio"),XKr.forEach(t),aIo=r(yye," \u2014 "),Dj=n(yye,"A",{href:!0});var VKr=s(Dj);nIo=r(VKr,"Data2VecAudioForSequenceClassification"),VKr.forEach(t),sIo=r(yye," (Data2VecAudio model)"),yye.forEach(t),lIo=i(No),zb=n(No,"LI",{});var wye=s(zb);qle=n(wye,"STRONG",{});var zKr=s(qle);iIo=r(zKr,"hubert"),zKr.forEach(t),dIo=r(wye," \u2014 "),jj=n(wye,"A",{href:!0});var WKr=s(jj);cIo=r(WKr,"HubertForSequenceClassification"),WKr.forEach(t),fIo=r(wye," (Hubert model)"),wye.forEach(t),mIo=i(No),Wb=n(No,"LI",{});var Aye=s(Wb);Gle=n(Aye,"STRONG",{});var QKr=s(Gle);gIo=r(QKr,"sew"),QKr.forEach(t),hIo=r(Aye," \u2014 "),Nj=n(Aye,"A",{href:!0});var HKr=s(Nj);uIo=r(HKr,"SEWForSequenceClassification"),HKr.forEach(t),pIo=r(Aye," (SEW model)"),Aye.forEach(t),_Io=i(No),Qb=n(No,"LI",{});var Lye=s(Qb);Ole=n(Lye,"STRONG",{});var UKr=s(Ole);vIo=r(UKr,"sew-d"),UKr.forEach(t),bIo=r(Lye," \u2014 "),qj=n(Lye,"A",{href:!0});var JKr=s(qj);TIo=r(JKr,"SEWDForSequenceClassification"),JKr.forEach(t),FIo=r(Lye," (SEW-D model)"),Lye.forEach(t),CIo=i(No),Hb=n(No,"LI",{});var Bye=s(Hb);Xle=n(Bye,"STRONG",{});var YKr=s(Xle);MIo=r(YKr,"unispeech"),YKr.forEach(t),EIo=r(Bye," \u2014 "),Gj=n(Bye,"A",{href:!0});var KKr=s(Gj);yIo=r(KKr,"UniSpeechForSequenceClassification"),KKr.forEach(t),wIo=r(Bye," (UniSpeech model)"),Bye.forEach(t),AIo=i(No),Ub=n(No,"LI",{});var xye=s(Ub);Vle=n(xye,"STRONG",{});var ZKr=s(Vle);LIo=r(ZKr,"unispeech-sat"),ZKr.forEach(t),BIo=r(xye," \u2014 "),Oj=n(xye,"A",{href:!0});var eZr=s(Oj);xIo=r(eZr,"UniSpeechSatForSequenceClassification"),eZr.forEach(t),kIo=r(xye," (UniSpeechSat model)"),xye.forEach(t),RIo=i(No),Jb=n(No,"LI",{});var kye=s(Jb);zle=n(kye,"STRONG",{});var oZr=s(zle);SIo=r(oZr,"wav2vec2"),oZr.forEach(t),PIo=r(kye," \u2014 "),Xj=n(kye,"A",{href:!0});var rZr=s(Xj);$Io=r(rZr,"Wav2Vec2ForSequenceClassification"),rZr.forEach(t),IIo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),DIo=i(No),Yb=n(No,"LI",{});var Rye=s(Yb);Wle=n(Rye,"STRONG",{});var tZr=s(Wle);jIo=r(tZr,"wavlm"),tZr.forEach(t),NIo=r(Rye," \u2014 "),Vj=n(Rye,"A",{href:!0});var aZr=s(Vj);qIo=r(aZr,"WavLMForSequenceClassification"),aZr.forEach(t),GIo=r(Rye," (WavLM model)"),Rye.forEach(t),No.forEach(t),OIo=i(Ht),Kb=n(Ht,"P",{});var Sye=s(Kb);XIo=r(Sye,"The model is set in evaluation mode by default using "),Qle=n(Sye,"CODE",{});var nZr=s(Qle);VIo=r(nZr,"model.eval()"),nZr.forEach(t),zIo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(Sye,"CODE",{});var sZr=s(Hle);WIo=r(sZr,"model.train()"),sZr.forEach(t),Sye.forEach(t),QIo=i(Ht),Ule=n(Ht,"P",{});var lZr=s(Ule);HIo=r(lZr,"Examples:"),lZr.forEach(t),UIo=i(Ht),m(z5.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),mBe=i(c),xd=n(c,"H2",{class:!0});var bke=s(xd);Zb=n(bke,"A",{id:!0,class:!0,href:!0});var iZr=s(Zb);Jle=n(iZr,"SPAN",{});var dZr=s(Jle);m(W5.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),JIo=i(bke),Yle=n(bke,"SPAN",{});var cZr=s(Yle);YIo=r(cZr,"AutoModelForAudioFrameClassification"),cZr.forEach(t),bke.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);m(Q5.$$.fragment,ul),KIo=i(ul),kd=n(ul,"P",{});var lz=s(kd);ZIo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=n(lz,"CODE",{});var fZr=s(Kle);eDo=r(fZr,"from_pretrained()"),fZr.forEach(t),oDo=r(lz,"class method or the "),Zle=n(lz,"CODE",{});var mZr=s(Zle);rDo=r(mZr,"from_config()"),mZr.forEach(t),tDo=r(lz,`class
method.`),lz.forEach(t),aDo=i(ul),H5=n(ul,"P",{});var Tke=s(H5);nDo=r(Tke,"This class cannot be instantiated directly using "),eie=n(Tke,"CODE",{});var gZr=s(eie);sDo=r(gZr,"__init__()"),gZr.forEach(t),lDo=r(Tke," (throws an error)."),Tke.forEach(t),iDo=i(ul),et=n(ul,"DIV",{class:!0});var pl=s(et);m(U5.$$.fragment,pl),dDo=i(pl),oie=n(pl,"P",{});var hZr=s(oie);cDo=r(hZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hZr.forEach(t),fDo=i(pl),Rd=n(pl,"P",{});var iz=s(Rd);mDo=r(iz,`Note:
Loading a model from its configuration file does `),rie=n(iz,"STRONG",{});var uZr=s(rie);gDo=r(uZr,"not"),uZr.forEach(t),hDo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=n(iz,"CODE",{});var pZr=s(tie);uDo=r(pZr,"from_pretrained()"),pZr.forEach(t),pDo=r(iz,"to load the model weights."),iz.forEach(t),_Do=i(pl),aie=n(pl,"P",{});var _Zr=s(aie);vDo=r(_Zr,"Examples:"),_Zr.forEach(t),bDo=i(pl),m(J5.$$.fragment,pl),pl.forEach(t),TDo=i(ul),We=n(ul,"DIV",{class:!0});var Ut=s(We);m(Y5.$$.fragment,Ut),FDo=i(Ut),nie=n(Ut,"P",{});var vZr=s(nie);CDo=r(vZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vZr.forEach(t),MDo=i(Ut),Za=n(Ut,"P",{});var qM=s(Za);EDo=r(qM,"The model class to instantiate is selected based on the "),sie=n(qM,"CODE",{});var bZr=s(sie);yDo=r(bZr,"model_type"),bZr.forEach(t),wDo=r(qM,` property of the config object (either
passed as an argument or loaded from `),lie=n(qM,"CODE",{});var TZr=s(lie);ADo=r(TZr,"pretrained_model_name_or_path"),TZr.forEach(t),LDo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=n(qM,"CODE",{});var FZr=s(iie);BDo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),xDo=r(qM,":"),qM.forEach(t),kDo=i(Ut),en=n(Ut,"UL",{});var GM=s(en);e2=n(GM,"LI",{});var Pye=s(e2);die=n(Pye,"STRONG",{});var CZr=s(die);RDo=r(CZr,"data2vec-audio"),CZr.forEach(t),SDo=r(Pye," \u2014 "),zj=n(Pye,"A",{href:!0});var MZr=s(zj);PDo=r(MZr,"Data2VecAudioForAudioFrameClassification"),MZr.forEach(t),$Do=r(Pye," (Data2VecAudio model)"),Pye.forEach(t),IDo=i(GM),o2=n(GM,"LI",{});var $ye=s(o2);cie=n($ye,"STRONG",{});var EZr=s(cie);DDo=r(EZr,"unispeech-sat"),EZr.forEach(t),jDo=r($ye," \u2014 "),Wj=n($ye,"A",{href:!0});var yZr=s(Wj);NDo=r(yZr,"UniSpeechSatForAudioFrameClassification"),yZr.forEach(t),qDo=r($ye," (UniSpeechSat model)"),$ye.forEach(t),GDo=i(GM),r2=n(GM,"LI",{});var Iye=s(r2);fie=n(Iye,"STRONG",{});var wZr=s(fie);ODo=r(wZr,"wav2vec2"),wZr.forEach(t),XDo=r(Iye," \u2014 "),Qj=n(Iye,"A",{href:!0});var AZr=s(Qj);VDo=r(AZr,"Wav2Vec2ForAudioFrameClassification"),AZr.forEach(t),zDo=r(Iye," (Wav2Vec2 model)"),Iye.forEach(t),WDo=i(GM),t2=n(GM,"LI",{});var Dye=s(t2);mie=n(Dye,"STRONG",{});var LZr=s(mie);QDo=r(LZr,"wavlm"),LZr.forEach(t),HDo=r(Dye," \u2014 "),Hj=n(Dye,"A",{href:!0});var BZr=s(Hj);UDo=r(BZr,"WavLMForAudioFrameClassification"),BZr.forEach(t),JDo=r(Dye," (WavLM model)"),Dye.forEach(t),GM.forEach(t),YDo=i(Ut),a2=n(Ut,"P",{});var jye=s(a2);KDo=r(jye,"The model is set in evaluation mode by default using "),gie=n(jye,"CODE",{});var xZr=s(gie);ZDo=r(xZr,"model.eval()"),xZr.forEach(t),ejo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(jye,"CODE",{});var kZr=s(hie);ojo=r(kZr,"model.train()"),kZr.forEach(t),jye.forEach(t),rjo=i(Ut),uie=n(Ut,"P",{});var RZr=s(uie);tjo=r(RZr,"Examples:"),RZr.forEach(t),ajo=i(Ut),m(K5.$$.fragment,Ut),Ut.forEach(t),ul.forEach(t),hBe=i(c),Sd=n(c,"H2",{class:!0});var Fke=s(Sd);n2=n(Fke,"A",{id:!0,class:!0,href:!0});var SZr=s(n2);pie=n(SZr,"SPAN",{});var PZr=s(pie);m(Z5.$$.fragment,PZr),PZr.forEach(t),SZr.forEach(t),njo=i(Fke),_ie=n(Fke,"SPAN",{});var $Zr=s(_ie);sjo=r($Zr,"AutoModelForCTC"),$Zr.forEach(t),Fke.forEach(t),uBe=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);m(ey.$$.fragment,_l),ljo=i(_l),Pd=n(_l,"P",{});var dz=s(Pd);ijo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vie=n(dz,"CODE",{});var IZr=s(vie);djo=r(IZr,"from_pretrained()"),IZr.forEach(t),cjo=r(dz,"class method or the "),bie=n(dz,"CODE",{});var DZr=s(bie);fjo=r(DZr,"from_config()"),DZr.forEach(t),mjo=r(dz,`class
method.`),dz.forEach(t),gjo=i(_l),oy=n(_l,"P",{});var Cke=s(oy);hjo=r(Cke,"This class cannot be instantiated directly using "),Tie=n(Cke,"CODE",{});var jZr=s(Tie);ujo=r(jZr,"__init__()"),jZr.forEach(t),pjo=r(Cke," (throws an error)."),Cke.forEach(t),_jo=i(_l),ot=n(_l,"DIV",{class:!0});var vl=s(ot);m(ry.$$.fragment,vl),vjo=i(vl),Fie=n(vl,"P",{});var NZr=s(Fie);bjo=r(NZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NZr.forEach(t),Tjo=i(vl),$d=n(vl,"P",{});var cz=s($d);Fjo=r(cz,`Note:
Loading a model from its configuration file does `),Cie=n(cz,"STRONG",{});var qZr=s(Cie);Cjo=r(qZr,"not"),qZr.forEach(t),Mjo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(cz,"CODE",{});var GZr=s(Mie);Ejo=r(GZr,"from_pretrained()"),GZr.forEach(t),yjo=r(cz,"to load the model weights."),cz.forEach(t),wjo=i(vl),Eie=n(vl,"P",{});var OZr=s(Eie);Ajo=r(OZr,"Examples:"),OZr.forEach(t),Ljo=i(vl),m(ty.$$.fragment,vl),vl.forEach(t),Bjo=i(_l),Qe=n(_l,"DIV",{class:!0});var Jt=s(Qe);m(ay.$$.fragment,Jt),xjo=i(Jt),yie=n(Jt,"P",{});var XZr=s(yie);kjo=r(XZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XZr.forEach(t),Rjo=i(Jt),on=n(Jt,"P",{});var OM=s(on);Sjo=r(OM,"The model class to instantiate is selected based on the "),wie=n(OM,"CODE",{});var VZr=s(wie);Pjo=r(VZr,"model_type"),VZr.forEach(t),$jo=r(OM,` property of the config object (either
passed as an argument or loaded from `),Aie=n(OM,"CODE",{});var zZr=s(Aie);Ijo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),Djo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(OM,"CODE",{});var WZr=s(Lie);jjo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),Njo=r(OM,":"),OM.forEach(t),qjo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);s2=n(qo,"LI",{});var Nye=s(s2);Bie=n(Nye,"STRONG",{});var QZr=s(Bie);Gjo=r(QZr,"data2vec-audio"),QZr.forEach(t),Ojo=r(Nye," \u2014 "),Uj=n(Nye,"A",{href:!0});var HZr=s(Uj);Xjo=r(HZr,"Data2VecAudioForCTC"),HZr.forEach(t),Vjo=r(Nye," (Data2VecAudio model)"),Nye.forEach(t),zjo=i(qo),l2=n(qo,"LI",{});var qye=s(l2);xie=n(qye,"STRONG",{});var UZr=s(xie);Wjo=r(UZr,"hubert"),UZr.forEach(t),Qjo=r(qye," \u2014 "),Jj=n(qye,"A",{href:!0});var JZr=s(Jj);Hjo=r(JZr,"HubertForCTC"),JZr.forEach(t),Ujo=r(qye," (Hubert model)"),qye.forEach(t),Jjo=i(qo),i2=n(qo,"LI",{});var Gye=s(i2);kie=n(Gye,"STRONG",{});var YZr=s(kie);Yjo=r(YZr,"sew"),YZr.forEach(t),Kjo=r(Gye," \u2014 "),Yj=n(Gye,"A",{href:!0});var KZr=s(Yj);Zjo=r(KZr,"SEWForCTC"),KZr.forEach(t),eNo=r(Gye," (SEW model)"),Gye.forEach(t),oNo=i(qo),d2=n(qo,"LI",{});var Oye=s(d2);Rie=n(Oye,"STRONG",{});var ZZr=s(Rie);rNo=r(ZZr,"sew-d"),ZZr.forEach(t),tNo=r(Oye," \u2014 "),Kj=n(Oye,"A",{href:!0});var eet=s(Kj);aNo=r(eet,"SEWDForCTC"),eet.forEach(t),nNo=r(Oye," (SEW-D model)"),Oye.forEach(t),sNo=i(qo),c2=n(qo,"LI",{});var Xye=s(c2);Sie=n(Xye,"STRONG",{});var oet=s(Sie);lNo=r(oet,"unispeech"),oet.forEach(t),iNo=r(Xye," \u2014 "),Zj=n(Xye,"A",{href:!0});var ret=s(Zj);dNo=r(ret,"UniSpeechForCTC"),ret.forEach(t),cNo=r(Xye," (UniSpeech model)"),Xye.forEach(t),fNo=i(qo),f2=n(qo,"LI",{});var Vye=s(f2);Pie=n(Vye,"STRONG",{});var tet=s(Pie);mNo=r(tet,"unispeech-sat"),tet.forEach(t),gNo=r(Vye," \u2014 "),eN=n(Vye,"A",{href:!0});var aet=s(eN);hNo=r(aet,"UniSpeechSatForCTC"),aet.forEach(t),uNo=r(Vye," (UniSpeechSat model)"),Vye.forEach(t),pNo=i(qo),m2=n(qo,"LI",{});var zye=s(m2);$ie=n(zye,"STRONG",{});var net=s($ie);_No=r(net,"wav2vec2"),net.forEach(t),vNo=r(zye," \u2014 "),oN=n(zye,"A",{href:!0});var set=s(oN);bNo=r(set,"Wav2Vec2ForCTC"),set.forEach(t),TNo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),FNo=i(qo),g2=n(qo,"LI",{});var Wye=s(g2);Iie=n(Wye,"STRONG",{});var iet=s(Iie);CNo=r(iet,"wavlm"),iet.forEach(t),MNo=r(Wye," \u2014 "),rN=n(Wye,"A",{href:!0});var det=s(rN);ENo=r(det,"WavLMForCTC"),det.forEach(t),yNo=r(Wye," (WavLM model)"),Wye.forEach(t),qo.forEach(t),wNo=i(Jt),h2=n(Jt,"P",{});var Qye=s(h2);ANo=r(Qye,"The model is set in evaluation mode by default using "),Die=n(Qye,"CODE",{});var cet=s(Die);LNo=r(cet,"model.eval()"),cet.forEach(t),BNo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(Qye,"CODE",{});var fet=s(jie);xNo=r(fet,"model.train()"),fet.forEach(t),Qye.forEach(t),kNo=i(Jt),Nie=n(Jt,"P",{});var met=s(Nie);RNo=r(met,"Examples:"),met.forEach(t),SNo=i(Jt),m(ny.$$.fragment,Jt),Jt.forEach(t),_l.forEach(t),pBe=i(c),Id=n(c,"H2",{class:!0});var Mke=s(Id);u2=n(Mke,"A",{id:!0,class:!0,href:!0});var get=s(u2);qie=n(get,"SPAN",{});var het=s(qie);m(sy.$$.fragment,het),het.forEach(t),get.forEach(t),PNo=i(Mke),Gie=n(Mke,"SPAN",{});var uet=s(Gie);$No=r(uet,"AutoModelForSpeechSeq2Seq"),uet.forEach(t),Mke.forEach(t),_Be=i(c),dr=n(c,"DIV",{class:!0});var bl=s(dr);m(ly.$$.fragment,bl),INo=i(bl),Dd=n(bl,"P",{});var fz=s(Dd);DNo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=n(fz,"CODE",{});var pet=s(Oie);jNo=r(pet,"from_pretrained()"),pet.forEach(t),NNo=r(fz,"class method or the "),Xie=n(fz,"CODE",{});var _et=s(Xie);qNo=r(_et,"from_config()"),_et.forEach(t),GNo=r(fz,`class
method.`),fz.forEach(t),ONo=i(bl),iy=n(bl,"P",{});var Eke=s(iy);XNo=r(Eke,"This class cannot be instantiated directly using "),Vie=n(Eke,"CODE",{});var vet=s(Vie);VNo=r(vet,"__init__()"),vet.forEach(t),zNo=r(Eke," (throws an error)."),Eke.forEach(t),WNo=i(bl),rt=n(bl,"DIV",{class:!0});var Tl=s(rt);m(dy.$$.fragment,Tl),QNo=i(Tl),zie=n(Tl,"P",{});var bet=s(zie);HNo=r(bet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bet.forEach(t),UNo=i(Tl),jd=n(Tl,"P",{});var mz=s(jd);JNo=r(mz,`Note:
Loading a model from its configuration file does `),Wie=n(mz,"STRONG",{});var Tet=s(Wie);YNo=r(Tet,"not"),Tet.forEach(t),KNo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=n(mz,"CODE",{});var Fet=s(Qie);ZNo=r(Fet,"from_pretrained()"),Fet.forEach(t),eqo=r(mz,"to load the model weights."),mz.forEach(t),oqo=i(Tl),Hie=n(Tl,"P",{});var Cet=s(Hie);rqo=r(Cet,"Examples:"),Cet.forEach(t),tqo=i(Tl),m(cy.$$.fragment,Tl),Tl.forEach(t),aqo=i(bl),He=n(bl,"DIV",{class:!0});var Yt=s(He);m(fy.$$.fragment,Yt),nqo=i(Yt),Uie=n(Yt,"P",{});var Met=s(Uie);sqo=r(Met,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Met.forEach(t),lqo=i(Yt),rn=n(Yt,"P",{});var XM=s(rn);iqo=r(XM,"The model class to instantiate is selected based on the "),Jie=n(XM,"CODE",{});var Eet=s(Jie);dqo=r(Eet,"model_type"),Eet.forEach(t),cqo=r(XM,` property of the config object (either
passed as an argument or loaded from `),Yie=n(XM,"CODE",{});var yet=s(Yie);fqo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),mqo=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(XM,"CODE",{});var wet=s(Kie);gqo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),hqo=r(XM,":"),XM.forEach(t),uqo=i(Yt),my=n(Yt,"UL",{});var yke=s(my);p2=n(yke,"LI",{});var Hye=s(p2);Zie=n(Hye,"STRONG",{});var Aet=s(Zie);pqo=r(Aet,"speech-encoder-decoder"),Aet.forEach(t),_qo=r(Hye," \u2014 "),tN=n(Hye,"A",{href:!0});var Let=s(tN);vqo=r(Let,"SpeechEncoderDecoderModel"),Let.forEach(t),bqo=r(Hye," (Speech Encoder decoder model)"),Hye.forEach(t),Tqo=i(yke),_2=n(yke,"LI",{});var Uye=s(_2);ede=n(Uye,"STRONG",{});var Bet=s(ede);Fqo=r(Bet,"speech_to_text"),Bet.forEach(t),Cqo=r(Uye," \u2014 "),aN=n(Uye,"A",{href:!0});var xet=s(aN);Mqo=r(xet,"Speech2TextForConditionalGeneration"),xet.forEach(t),Eqo=r(Uye," (Speech2Text model)"),Uye.forEach(t),yke.forEach(t),yqo=i(Yt),v2=n(Yt,"P",{});var Jye=s(v2);wqo=r(Jye,"The model is set in evaluation mode by default using "),ode=n(Jye,"CODE",{});var ket=s(ode);Aqo=r(ket,"model.eval()"),ket.forEach(t),Lqo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(Jye,"CODE",{});var Ret=s(rde);Bqo=r(Ret,"model.train()"),Ret.forEach(t),Jye.forEach(t),xqo=i(Yt),tde=n(Yt,"P",{});var Set=s(tde);kqo=r(Set,"Examples:"),Set.forEach(t),Rqo=i(Yt),m(gy.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),vBe=i(c),Nd=n(c,"H2",{class:!0});var wke=s(Nd);b2=n(wke,"A",{id:!0,class:!0,href:!0});var Pet=s(b2);ade=n(Pet,"SPAN",{});var $et=s(ade);m(hy.$$.fragment,$et),$et.forEach(t),Pet.forEach(t),Sqo=i(wke),nde=n(wke,"SPAN",{});var Iet=s(nde);Pqo=r(Iet,"AutoModelForAudioXVector"),Iet.forEach(t),wke.forEach(t),bBe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(uy.$$.fragment,Fl),$qo=i(Fl),qd=n(Fl,"P",{});var gz=s(qd);Iqo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sde=n(gz,"CODE",{});var Det=s(sde);Dqo=r(Det,"from_pretrained()"),Det.forEach(t),jqo=r(gz,"class method or the "),lde=n(gz,"CODE",{});var jet=s(lde);Nqo=r(jet,"from_config()"),jet.forEach(t),qqo=r(gz,`class
method.`),gz.forEach(t),Gqo=i(Fl),py=n(Fl,"P",{});var Ake=s(py);Oqo=r(Ake,"This class cannot be instantiated directly using "),ide=n(Ake,"CODE",{});var Net=s(ide);Xqo=r(Net,"__init__()"),Net.forEach(t),Vqo=r(Ake," (throws an error)."),Ake.forEach(t),zqo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(_y.$$.fragment,Cl),Wqo=i(Cl),dde=n(Cl,"P",{});var qet=s(dde);Qqo=r(qet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qet.forEach(t),Hqo=i(Cl),Gd=n(Cl,"P",{});var hz=s(Gd);Uqo=r(hz,`Note:
Loading a model from its configuration file does `),cde=n(hz,"STRONG",{});var Get=s(cde);Jqo=r(Get,"not"),Get.forEach(t),Yqo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=n(hz,"CODE",{});var Oet=s(fde);Kqo=r(Oet,"from_pretrained()"),Oet.forEach(t),Zqo=r(hz,"to load the model weights."),hz.forEach(t),eGo=i(Cl),mde=n(Cl,"P",{});var Xet=s(mde);oGo=r(Xet,"Examples:"),Xet.forEach(t),rGo=i(Cl),m(vy.$$.fragment,Cl),Cl.forEach(t),tGo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(by.$$.fragment,Kt),aGo=i(Kt),gde=n(Kt,"P",{});var Vet=s(gde);nGo=r(Vet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vet.forEach(t),sGo=i(Kt),tn=n(Kt,"P",{});var VM=s(tn);lGo=r(VM,"The model class to instantiate is selected based on the "),hde=n(VM,"CODE",{});var zet=s(hde);iGo=r(zet,"model_type"),zet.forEach(t),dGo=r(VM,` property of the config object (either
passed as an argument or loaded from `),ude=n(VM,"CODE",{});var Wet=s(ude);cGo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),fGo=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(VM,"CODE",{});var Qet=s(pde);mGo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),gGo=r(VM,":"),VM.forEach(t),hGo=i(Kt),an=n(Kt,"UL",{});var zM=s(an);T2=n(zM,"LI",{});var Yye=s(T2);_de=n(Yye,"STRONG",{});var Het=s(_de);uGo=r(Het,"data2vec-audio"),Het.forEach(t),pGo=r(Yye," \u2014 "),nN=n(Yye,"A",{href:!0});var Uet=s(nN);_Go=r(Uet,"Data2VecAudioForXVector"),Uet.forEach(t),vGo=r(Yye," (Data2VecAudio model)"),Yye.forEach(t),bGo=i(zM),F2=n(zM,"LI",{});var Kye=s(F2);vde=n(Kye,"STRONG",{});var Jet=s(vde);TGo=r(Jet,"unispeech-sat"),Jet.forEach(t),FGo=r(Kye," \u2014 "),sN=n(Kye,"A",{href:!0});var Yet=s(sN);CGo=r(Yet,"UniSpeechSatForXVector"),Yet.forEach(t),MGo=r(Kye," (UniSpeechSat model)"),Kye.forEach(t),EGo=i(zM),C2=n(zM,"LI",{});var Zye=s(C2);bde=n(Zye,"STRONG",{});var Ket=s(bde);yGo=r(Ket,"wav2vec2"),Ket.forEach(t),wGo=r(Zye," \u2014 "),lN=n(Zye,"A",{href:!0});var Zet=s(lN);AGo=r(Zet,"Wav2Vec2ForXVector"),Zet.forEach(t),LGo=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),BGo=i(zM),M2=n(zM,"LI",{});var ewe=s(M2);Tde=n(ewe,"STRONG",{});var eot=s(Tde);xGo=r(eot,"wavlm"),eot.forEach(t),kGo=r(ewe," \u2014 "),iN=n(ewe,"A",{href:!0});var oot=s(iN);RGo=r(oot,"WavLMForXVector"),oot.forEach(t),SGo=r(ewe," (WavLM model)"),ewe.forEach(t),zM.forEach(t),PGo=i(Kt),E2=n(Kt,"P",{});var owe=s(E2);$Go=r(owe,"The model is set in evaluation mode by default using "),Fde=n(owe,"CODE",{});var rot=s(Fde);IGo=r(rot,"model.eval()"),rot.forEach(t),DGo=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(owe,"CODE",{});var tot=s(Cde);jGo=r(tot,"model.train()"),tot.forEach(t),owe.forEach(t),NGo=i(Kt),Mde=n(Kt,"P",{});var aot=s(Mde);qGo=r(aot,"Examples:"),aot.forEach(t),GGo=i(Kt),m(Ty.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),TBe=i(c),Od=n(c,"H2",{class:!0});var Lke=s(Od);y2=n(Lke,"A",{id:!0,class:!0,href:!0});var not=s(y2);Ede=n(not,"SPAN",{});var sot=s(Ede);m(Fy.$$.fragment,sot),sot.forEach(t),not.forEach(t),OGo=i(Lke),yde=n(Lke,"SPAN",{});var lot=s(yde);XGo=r(lot,"AutoModelForMaskedImageModeling"),lot.forEach(t),Lke.forEach(t),FBe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Cy.$$.fragment,Ml),VGo=i(Ml),Xd=n(Ml,"P",{});var uz=s(Xd);zGo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=n(uz,"CODE",{});var iot=s(wde);WGo=r(iot,"from_pretrained()"),iot.forEach(t),QGo=r(uz,"class method or the "),Ade=n(uz,"CODE",{});var dot=s(Ade);HGo=r(dot,"from_config()"),dot.forEach(t),UGo=r(uz,`class
method.`),uz.forEach(t),JGo=i(Ml),My=n(Ml,"P",{});var Bke=s(My);YGo=r(Bke,"This class cannot be instantiated directly using "),Lde=n(Bke,"CODE",{});var cot=s(Lde);KGo=r(cot,"__init__()"),cot.forEach(t),ZGo=r(Bke," (throws an error)."),Bke.forEach(t),eOo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Ey.$$.fragment,El),oOo=i(El),Bde=n(El,"P",{});var fot=s(Bde);rOo=r(fot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fot.forEach(t),tOo=i(El),Vd=n(El,"P",{});var pz=s(Vd);aOo=r(pz,`Note:
Loading a model from its configuration file does `),xde=n(pz,"STRONG",{});var mot=s(xde);nOo=r(mot,"not"),mot.forEach(t),sOo=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(pz,"CODE",{});var got=s(kde);lOo=r(got,"from_pretrained()"),got.forEach(t),iOo=r(pz,"to load the model weights."),pz.forEach(t),dOo=i(El),Rde=n(El,"P",{});var hot=s(Rde);cOo=r(hot,"Examples:"),hot.forEach(t),fOo=i(El),m(yy.$$.fragment,El),El.forEach(t),mOo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(wy.$$.fragment,Zt),gOo=i(Zt),Sde=n(Zt,"P",{});var uot=s(Sde);hOo=r(uot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uot.forEach(t),uOo=i(Zt),nn=n(Zt,"P",{});var WM=s(nn);pOo=r(WM,"The model class to instantiate is selected based on the "),Pde=n(WM,"CODE",{});var pot=s(Pde);_Oo=r(pot,"model_type"),pot.forEach(t),vOo=r(WM,` property of the config object (either
passed as an argument or loaded from `),$de=n(WM,"CODE",{});var _ot=s($de);bOo=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),TOo=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(WM,"CODE",{});var vot=s(Ide);FOo=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),COo=r(WM,":"),WM.forEach(t),MOo=i(Zt),zd=n(Zt,"UL",{});var _z=s(zd);w2=n(_z,"LI",{});var rwe=s(w2);Dde=n(rwe,"STRONG",{});var bot=s(Dde);EOo=r(bot,"deit"),bot.forEach(t),yOo=r(rwe," \u2014 "),dN=n(rwe,"A",{href:!0});var Tot=s(dN);wOo=r(Tot,"DeiTForMaskedImageModeling"),Tot.forEach(t),AOo=r(rwe," (DeiT model)"),rwe.forEach(t),LOo=i(_z),A2=n(_z,"LI",{});var twe=s(A2);jde=n(twe,"STRONG",{});var Fot=s(jde);BOo=r(Fot,"swin"),Fot.forEach(t),xOo=r(twe," \u2014 "),cN=n(twe,"A",{href:!0});var Cot=s(cN);kOo=r(Cot,"SwinForMaskedImageModeling"),Cot.forEach(t),ROo=r(twe," (Swin model)"),twe.forEach(t),SOo=i(_z),L2=n(_z,"LI",{});var awe=s(L2);Nde=n(awe,"STRONG",{});var Mot=s(Nde);POo=r(Mot,"vit"),Mot.forEach(t),$Oo=r(awe," \u2014 "),fN=n(awe,"A",{href:!0});var Eot=s(fN);IOo=r(Eot,"ViTForMaskedImageModeling"),Eot.forEach(t),DOo=r(awe," (ViT model)"),awe.forEach(t),_z.forEach(t),jOo=i(Zt),B2=n(Zt,"P",{});var nwe=s(B2);NOo=r(nwe,"The model is set in evaluation mode by default using "),qde=n(nwe,"CODE",{});var yot=s(qde);qOo=r(yot,"model.eval()"),yot.forEach(t),GOo=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=n(nwe,"CODE",{});var wot=s(Gde);OOo=r(wot,"model.train()"),wot.forEach(t),nwe.forEach(t),XOo=i(Zt),Ode=n(Zt,"P",{});var Aot=s(Ode);VOo=r(Aot,"Examples:"),Aot.forEach(t),zOo=i(Zt),m(Ay.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),CBe=i(c),Wd=n(c,"H2",{class:!0});var xke=s(Wd);x2=n(xke,"A",{id:!0,class:!0,href:!0});var Lot=s(x2);Xde=n(Lot,"SPAN",{});var Bot=s(Xde);m(Ly.$$.fragment,Bot),Bot.forEach(t),Lot.forEach(t),WOo=i(xke),Vde=n(xke,"SPAN",{});var xot=s(Vde);QOo=r(xot,"AutoModelForObjectDetection"),xot.forEach(t),xke.forEach(t),MBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(By.$$.fragment,yl),HOo=i(yl),Qd=n(yl,"P",{});var vz=s(Qd);UOo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=n(vz,"CODE",{});var kot=s(zde);JOo=r(kot,"from_pretrained()"),kot.forEach(t),YOo=r(vz,"class method or the "),Wde=n(vz,"CODE",{});var Rot=s(Wde);KOo=r(Rot,"from_config()"),Rot.forEach(t),ZOo=r(vz,`class
method.`),vz.forEach(t),eXo=i(yl),xy=n(yl,"P",{});var kke=s(xy);oXo=r(kke,"This class cannot be instantiated directly using "),Qde=n(kke,"CODE",{});var Sot=s(Qde);rXo=r(Sot,"__init__()"),Sot.forEach(t),tXo=r(kke," (throws an error)."),kke.forEach(t),aXo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(ky.$$.fragment,wl),nXo=i(wl),Hde=n(wl,"P",{});var Pot=s(Hde);sXo=r(Pot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pot.forEach(t),lXo=i(wl),Hd=n(wl,"P",{});var bz=s(Hd);iXo=r(bz,`Note:
Loading a model from its configuration file does `),Ude=n(bz,"STRONG",{});var $ot=s(Ude);dXo=r($ot,"not"),$ot.forEach(t),cXo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=n(bz,"CODE",{});var Iot=s(Jde);fXo=r(Iot,"from_pretrained()"),Iot.forEach(t),mXo=r(bz,"to load the model weights."),bz.forEach(t),gXo=i(wl),Yde=n(wl,"P",{});var Dot=s(Yde);hXo=r(Dot,"Examples:"),Dot.forEach(t),uXo=i(wl),m(Ry.$$.fragment,wl),wl.forEach(t),pXo=i(yl),Ye=n(yl,"DIV",{class:!0});var ea=s(Ye);m(Sy.$$.fragment,ea),_Xo=i(ea),Kde=n(ea,"P",{});var jot=s(Kde);vXo=r(jot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jot.forEach(t),bXo=i(ea),sn=n(ea,"P",{});var QM=s(sn);TXo=r(QM,"The model class to instantiate is selected based on the "),Zde=n(QM,"CODE",{});var Not=s(Zde);FXo=r(Not,"model_type"),Not.forEach(t),CXo=r(QM,` property of the config object (either
passed as an argument or loaded from `),ece=n(QM,"CODE",{});var qot=s(ece);MXo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),EXo=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=n(QM,"CODE",{});var Got=s(oce);yXo=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),wXo=r(QM,":"),QM.forEach(t),AXo=i(ea),rce=n(ea,"UL",{});var Oot=s(rce);k2=n(Oot,"LI",{});var swe=s(k2);tce=n(swe,"STRONG",{});var Xot=s(tce);LXo=r(Xot,"detr"),Xot.forEach(t),BXo=r(swe," \u2014 "),mN=n(swe,"A",{href:!0});var Vot=s(mN);xXo=r(Vot,"DetrForObjectDetection"),Vot.forEach(t),kXo=r(swe," (DETR model)"),swe.forEach(t),Oot.forEach(t),RXo=i(ea),R2=n(ea,"P",{});var lwe=s(R2);SXo=r(lwe,"The model is set in evaluation mode by default using "),ace=n(lwe,"CODE",{});var zot=s(ace);PXo=r(zot,"model.eval()"),zot.forEach(t),$Xo=r(lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(lwe,"CODE",{});var Wot=s(nce);IXo=r(Wot,"model.train()"),Wot.forEach(t),lwe.forEach(t),DXo=i(ea),sce=n(ea,"P",{});var Qot=s(sce);jXo=r(Qot,"Examples:"),Qot.forEach(t),NXo=i(ea),m(Py.$$.fragment,ea),ea.forEach(t),yl.forEach(t),EBe=i(c),Ud=n(c,"H2",{class:!0});var Rke=s(Ud);S2=n(Rke,"A",{id:!0,class:!0,href:!0});var Hot=s(S2);lce=n(Hot,"SPAN",{});var Uot=s(lce);m($y.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),qXo=i(Rke),ice=n(Rke,"SPAN",{});var Jot=s(ice);GXo=r(Jot,"AutoModelForImageSegmentation"),Jot.forEach(t),Rke.forEach(t),yBe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Iy.$$.fragment,Al),OXo=i(Al),Jd=n(Al,"P",{});var Tz=s(Jd);XXo=r(Tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=n(Tz,"CODE",{});var Yot=s(dce);VXo=r(Yot,"from_pretrained()"),Yot.forEach(t),zXo=r(Tz,"class method or the "),cce=n(Tz,"CODE",{});var Kot=s(cce);WXo=r(Kot,"from_config()"),Kot.forEach(t),QXo=r(Tz,`class
method.`),Tz.forEach(t),HXo=i(Al),Dy=n(Al,"P",{});var Ske=s(Dy);UXo=r(Ske,"This class cannot be instantiated directly using "),fce=n(Ske,"CODE",{});var Zot=s(fce);JXo=r(Zot,"__init__()"),Zot.forEach(t),YXo=r(Ske," (throws an error)."),Ske.forEach(t),KXo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(jy.$$.fragment,Ll),ZXo=i(Ll),mce=n(Ll,"P",{});var ert=s(mce);eVo=r(ert,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ert.forEach(t),oVo=i(Ll),Yd=n(Ll,"P",{});var Fz=s(Yd);rVo=r(Fz,`Note:
Loading a model from its configuration file does `),gce=n(Fz,"STRONG",{});var ort=s(gce);tVo=r(ort,"not"),ort.forEach(t),aVo=r(Fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=n(Fz,"CODE",{});var rrt=s(hce);nVo=r(rrt,"from_pretrained()"),rrt.forEach(t),sVo=r(Fz,"to load the model weights."),Fz.forEach(t),lVo=i(Ll),uce=n(Ll,"P",{});var trt=s(uce);iVo=r(trt,"Examples:"),trt.forEach(t),dVo=i(Ll),m(Ny.$$.fragment,Ll),Ll.forEach(t),cVo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(qy.$$.fragment,oa),fVo=i(oa),pce=n(oa,"P",{});var art=s(pce);mVo=r(art,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),art.forEach(t),gVo=i(oa),ln=n(oa,"P",{});var HM=s(ln);hVo=r(HM,"The model class to instantiate is selected based on the "),_ce=n(HM,"CODE",{});var nrt=s(_ce);uVo=r(nrt,"model_type"),nrt.forEach(t),pVo=r(HM,` property of the config object (either
passed as an argument or loaded from `),vce=n(HM,"CODE",{});var srt=s(vce);_Vo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),vVo=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(HM,"CODE",{});var lrt=s(bce);bVo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),TVo=r(HM,":"),HM.forEach(t),FVo=i(oa),Tce=n(oa,"UL",{});var irt=s(Tce);P2=n(irt,"LI",{});var iwe=s(P2);Fce=n(iwe,"STRONG",{});var drt=s(Fce);CVo=r(drt,"detr"),drt.forEach(t),MVo=r(iwe," \u2014 "),gN=n(iwe,"A",{href:!0});var crt=s(gN);EVo=r(crt,"DetrForSegmentation"),crt.forEach(t),yVo=r(iwe," (DETR model)"),iwe.forEach(t),irt.forEach(t),wVo=i(oa),$2=n(oa,"P",{});var dwe=s($2);AVo=r(dwe,"The model is set in evaluation mode by default using "),Cce=n(dwe,"CODE",{});var frt=s(Cce);LVo=r(frt,"model.eval()"),frt.forEach(t),BVo=r(dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(dwe,"CODE",{});var mrt=s(Mce);xVo=r(mrt,"model.train()"),mrt.forEach(t),dwe.forEach(t),kVo=i(oa),Ece=n(oa,"P",{});var grt=s(Ece);RVo=r(grt,"Examples:"),grt.forEach(t),SVo=i(oa),m(Gy.$$.fragment,oa),oa.forEach(t),Al.forEach(t),wBe=i(c),Kd=n(c,"H2",{class:!0});var Pke=s(Kd);I2=n(Pke,"A",{id:!0,class:!0,href:!0});var hrt=s(I2);yce=n(hrt,"SPAN",{});var urt=s(yce);m(Oy.$$.fragment,urt),urt.forEach(t),hrt.forEach(t),PVo=i(Pke),wce=n(Pke,"SPAN",{});var prt=s(wce);$Vo=r(prt,"AutoModelForSemanticSegmentation"),prt.forEach(t),Pke.forEach(t),ABe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Xy.$$.fragment,Bl),IVo=i(Bl),Zd=n(Bl,"P",{});var Cz=s(Zd);DVo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=n(Cz,"CODE",{});var _rt=s(Ace);jVo=r(_rt,"from_pretrained()"),_rt.forEach(t),NVo=r(Cz,"class method or the "),Lce=n(Cz,"CODE",{});var vrt=s(Lce);qVo=r(vrt,"from_config()"),vrt.forEach(t),GVo=r(Cz,`class
method.`),Cz.forEach(t),OVo=i(Bl),Vy=n(Bl,"P",{});var $ke=s(Vy);XVo=r($ke,"This class cannot be instantiated directly using "),Bce=n($ke,"CODE",{});var brt=s(Bce);VVo=r(brt,"__init__()"),brt.forEach(t),zVo=r($ke," (throws an error)."),$ke.forEach(t),WVo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(zy.$$.fragment,xl),QVo=i(xl),xce=n(xl,"P",{});var Trt=s(xce);HVo=r(Trt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Trt.forEach(t),UVo=i(xl),ec=n(xl,"P",{});var Mz=s(ec);JVo=r(Mz,`Note:
Loading a model from its configuration file does `),kce=n(Mz,"STRONG",{});var Frt=s(kce);YVo=r(Frt,"not"),Frt.forEach(t),KVo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=n(Mz,"CODE",{});var Crt=s(Rce);ZVo=r(Crt,"from_pretrained()"),Crt.forEach(t),ezo=r(Mz,"to load the model weights."),Mz.forEach(t),ozo=i(xl),Sce=n(xl,"P",{});var Mrt=s(Sce);rzo=r(Mrt,"Examples:"),Mrt.forEach(t),tzo=i(xl),m(Wy.$$.fragment,xl),xl.forEach(t),azo=i(Bl),Ze=n(Bl,"DIV",{class:!0});var ra=s(Ze);m(Qy.$$.fragment,ra),nzo=i(ra),Pce=n(ra,"P",{});var Ert=s(Pce);szo=r(Ert,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ert.forEach(t),lzo=i(ra),dn=n(ra,"P",{});var UM=s(dn);izo=r(UM,"The model class to instantiate is selected based on the "),$ce=n(UM,"CODE",{});var yrt=s($ce);dzo=r(yrt,"model_type"),yrt.forEach(t),czo=r(UM,` property of the config object (either
passed as an argument or loaded from `),Ice=n(UM,"CODE",{});var wrt=s(Ice);fzo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),mzo=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(UM,"CODE",{});var Art=s(Dce);gzo=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),hzo=r(UM,":"),UM.forEach(t),uzo=i(ra),Hy=n(ra,"UL",{});var Ike=s(Hy);D2=n(Ike,"LI",{});var cwe=s(D2);jce=n(cwe,"STRONG",{});var Lrt=s(jce);pzo=r(Lrt,"beit"),Lrt.forEach(t),_zo=r(cwe," \u2014 "),hN=n(cwe,"A",{href:!0});var Brt=s(hN);vzo=r(Brt,"BeitForSemanticSegmentation"),Brt.forEach(t),bzo=r(cwe," (BEiT model)"),cwe.forEach(t),Tzo=i(Ike),j2=n(Ike,"LI",{});var fwe=s(j2);Nce=n(fwe,"STRONG",{});var xrt=s(Nce);Fzo=r(xrt,"segformer"),xrt.forEach(t),Czo=r(fwe," \u2014 "),uN=n(fwe,"A",{href:!0});var krt=s(uN);Mzo=r(krt,"SegformerForSemanticSegmentation"),krt.forEach(t),Ezo=r(fwe," (SegFormer model)"),fwe.forEach(t),Ike.forEach(t),yzo=i(ra),N2=n(ra,"P",{});var mwe=s(N2);wzo=r(mwe,"The model is set in evaluation mode by default using "),qce=n(mwe,"CODE",{});var Rrt=s(qce);Azo=r(Rrt,"model.eval()"),Rrt.forEach(t),Lzo=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(mwe,"CODE",{});var Srt=s(Gce);Bzo=r(Srt,"model.train()"),Srt.forEach(t),mwe.forEach(t),xzo=i(ra),Oce=n(ra,"P",{});var Prt=s(Oce);kzo=r(Prt,"Examples:"),Prt.forEach(t),Rzo=i(ra),m(Uy.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),LBe=i(c),oc=n(c,"H2",{class:!0});var Dke=s(oc);q2=n(Dke,"A",{id:!0,class:!0,href:!0});var $rt=s(q2);Xce=n($rt,"SPAN",{});var Irt=s(Xce);m(Jy.$$.fragment,Irt),Irt.forEach(t),$rt.forEach(t),Szo=i(Dke),Vce=n(Dke,"SPAN",{});var Drt=s(Vce);Pzo=r(Drt,"TFAutoModel"),Drt.forEach(t),Dke.forEach(t),BBe=i(c),ur=n(c,"DIV",{class:!0});var kl=s(ur);m(Yy.$$.fragment,kl),$zo=i(kl),rc=n(kl,"P",{});var Ez=s(rc);Izo=r(Ez,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=n(Ez,"CODE",{});var jrt=s(zce);Dzo=r(jrt,"from_pretrained()"),jrt.forEach(t),jzo=r(Ez,"class method or the "),Wce=n(Ez,"CODE",{});var Nrt=s(Wce);Nzo=r(Nrt,"from_config()"),Nrt.forEach(t),qzo=r(Ez,`class
method.`),Ez.forEach(t),Gzo=i(kl),Ky=n(kl,"P",{});var jke=s(Ky);Ozo=r(jke,"This class cannot be instantiated directly using "),Qce=n(jke,"CODE",{});var qrt=s(Qce);Xzo=r(qrt,"__init__()"),qrt.forEach(t),Vzo=r(jke," (throws an error)."),jke.forEach(t),zzo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(Zy.$$.fragment,Rl),Wzo=i(Rl),Hce=n(Rl,"P",{});var Grt=s(Hce);Qzo=r(Grt,"Instantiates one of the base model classes of the library from a configuration."),Grt.forEach(t),Hzo=i(Rl),tc=n(Rl,"P",{});var yz=s(tc);Uzo=r(yz,`Note:
Loading a model from its configuration file does `),Uce=n(yz,"STRONG",{});var Ort=s(Uce);Jzo=r(Ort,"not"),Ort.forEach(t),Yzo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=n(yz,"CODE",{});var Xrt=s(Jce);Kzo=r(Xrt,"from_pretrained()"),Xrt.forEach(t),Zzo=r(yz,"to load the model weights."),yz.forEach(t),eWo=i(Rl),Yce=n(Rl,"P",{});var Vrt=s(Yce);oWo=r(Vrt,"Examples:"),Vrt.forEach(t),rWo=i(Rl),m(ew.$$.fragment,Rl),Rl.forEach(t),tWo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(ow.$$.fragment,ca),aWo=i(ca),Kce=n(ca,"P",{});var zrt=s(Kce);nWo=r(zrt,"Instantiate one of the base model classes of the library from a pretrained model."),zrt.forEach(t),sWo=i(ca),cn=n(ca,"P",{});var JM=s(cn);lWo=r(JM,"The model class to instantiate is selected based on the "),Zce=n(JM,"CODE",{});var Wrt=s(Zce);iWo=r(Wrt,"model_type"),Wrt.forEach(t),dWo=r(JM,` property of the config object (either
passed as an argument or loaded from `),efe=n(JM,"CODE",{});var Qrt=s(efe);cWo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),fWo=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(JM,"CODE",{});var Hrt=s(ofe);mWo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),gWo=r(JM,":"),JM.forEach(t),hWo=i(ca),B=n(ca,"UL",{});var x=s(B);G2=n(x,"LI",{});var gwe=s(G2);rfe=n(gwe,"STRONG",{});var Urt=s(rfe);uWo=r(Urt,"albert"),Urt.forEach(t),pWo=r(gwe," \u2014 "),pN=n(gwe,"A",{href:!0});var Jrt=s(pN);_Wo=r(Jrt,"TFAlbertModel"),Jrt.forEach(t),vWo=r(gwe," (ALBERT model)"),gwe.forEach(t),bWo=i(x),O2=n(x,"LI",{});var hwe=s(O2);tfe=n(hwe,"STRONG",{});var Yrt=s(tfe);TWo=r(Yrt,"bart"),Yrt.forEach(t),FWo=r(hwe," \u2014 "),_N=n(hwe,"A",{href:!0});var Krt=s(_N);CWo=r(Krt,"TFBartModel"),Krt.forEach(t),MWo=r(hwe," (BART model)"),hwe.forEach(t),EWo=i(x),X2=n(x,"LI",{});var uwe=s(X2);afe=n(uwe,"STRONG",{});var Zrt=s(afe);yWo=r(Zrt,"bert"),Zrt.forEach(t),wWo=r(uwe," \u2014 "),vN=n(uwe,"A",{href:!0});var ett=s(vN);AWo=r(ett,"TFBertModel"),ett.forEach(t),LWo=r(uwe," (BERT model)"),uwe.forEach(t),BWo=i(x),V2=n(x,"LI",{});var pwe=s(V2);nfe=n(pwe,"STRONG",{});var ott=s(nfe);xWo=r(ott,"blenderbot"),ott.forEach(t),kWo=r(pwe," \u2014 "),bN=n(pwe,"A",{href:!0});var rtt=s(bN);RWo=r(rtt,"TFBlenderbotModel"),rtt.forEach(t),SWo=r(pwe," (Blenderbot model)"),pwe.forEach(t),PWo=i(x),z2=n(x,"LI",{});var _we=s(z2);sfe=n(_we,"STRONG",{});var ttt=s(sfe);$Wo=r(ttt,"blenderbot-small"),ttt.forEach(t),IWo=r(_we," \u2014 "),TN=n(_we,"A",{href:!0});var att=s(TN);DWo=r(att,"TFBlenderbotSmallModel"),att.forEach(t),jWo=r(_we," (BlenderbotSmall model)"),_we.forEach(t),NWo=i(x),W2=n(x,"LI",{});var vwe=s(W2);lfe=n(vwe,"STRONG",{});var ntt=s(lfe);qWo=r(ntt,"camembert"),ntt.forEach(t),GWo=r(vwe," \u2014 "),FN=n(vwe,"A",{href:!0});var stt=s(FN);OWo=r(stt,"TFCamembertModel"),stt.forEach(t),XWo=r(vwe," (CamemBERT model)"),vwe.forEach(t),VWo=i(x),Q2=n(x,"LI",{});var bwe=s(Q2);ife=n(bwe,"STRONG",{});var ltt=s(ife);zWo=r(ltt,"clip"),ltt.forEach(t),WWo=r(bwe," \u2014 "),CN=n(bwe,"A",{href:!0});var itt=s(CN);QWo=r(itt,"TFCLIPModel"),itt.forEach(t),HWo=r(bwe," (CLIP model)"),bwe.forEach(t),UWo=i(x),H2=n(x,"LI",{});var Twe=s(H2);dfe=n(Twe,"STRONG",{});var dtt=s(dfe);JWo=r(dtt,"convbert"),dtt.forEach(t),YWo=r(Twe," \u2014 "),MN=n(Twe,"A",{href:!0});var ctt=s(MN);KWo=r(ctt,"TFConvBertModel"),ctt.forEach(t),ZWo=r(Twe," (ConvBERT model)"),Twe.forEach(t),eQo=i(x),U2=n(x,"LI",{});var Fwe=s(U2);cfe=n(Fwe,"STRONG",{});var ftt=s(cfe);oQo=r(ftt,"convnext"),ftt.forEach(t),rQo=r(Fwe," \u2014 "),EN=n(Fwe,"A",{href:!0});var mtt=s(EN);tQo=r(mtt,"TFConvNextModel"),mtt.forEach(t),aQo=r(Fwe," (ConvNext model)"),Fwe.forEach(t),nQo=i(x),J2=n(x,"LI",{});var Cwe=s(J2);ffe=n(Cwe,"STRONG",{});var gtt=s(ffe);sQo=r(gtt,"ctrl"),gtt.forEach(t),lQo=r(Cwe," \u2014 "),yN=n(Cwe,"A",{href:!0});var htt=s(yN);iQo=r(htt,"TFCTRLModel"),htt.forEach(t),dQo=r(Cwe," (CTRL model)"),Cwe.forEach(t),cQo=i(x),Y2=n(x,"LI",{});var Mwe=s(Y2);mfe=n(Mwe,"STRONG",{});var utt=s(mfe);fQo=r(utt,"deberta"),utt.forEach(t),mQo=r(Mwe," \u2014 "),wN=n(Mwe,"A",{href:!0});var ptt=s(wN);gQo=r(ptt,"TFDebertaModel"),ptt.forEach(t),hQo=r(Mwe," (DeBERTa model)"),Mwe.forEach(t),uQo=i(x),K2=n(x,"LI",{});var Ewe=s(K2);gfe=n(Ewe,"STRONG",{});var _tt=s(gfe);pQo=r(_tt,"deberta-v2"),_tt.forEach(t),_Qo=r(Ewe," \u2014 "),AN=n(Ewe,"A",{href:!0});var vtt=s(AN);vQo=r(vtt,"TFDebertaV2Model"),vtt.forEach(t),bQo=r(Ewe," (DeBERTa-v2 model)"),Ewe.forEach(t),TQo=i(x),Z2=n(x,"LI",{});var ywe=s(Z2);hfe=n(ywe,"STRONG",{});var btt=s(hfe);FQo=r(btt,"distilbert"),btt.forEach(t),CQo=r(ywe," \u2014 "),LN=n(ywe,"A",{href:!0});var Ttt=s(LN);MQo=r(Ttt,"TFDistilBertModel"),Ttt.forEach(t),EQo=r(ywe," (DistilBERT model)"),ywe.forEach(t),yQo=i(x),e0=n(x,"LI",{});var wwe=s(e0);ufe=n(wwe,"STRONG",{});var Ftt=s(ufe);wQo=r(Ftt,"dpr"),Ftt.forEach(t),AQo=r(wwe," \u2014 "),BN=n(wwe,"A",{href:!0});var Ctt=s(BN);LQo=r(Ctt,"TFDPRQuestionEncoder"),Ctt.forEach(t),BQo=r(wwe," (DPR model)"),wwe.forEach(t),xQo=i(x),o0=n(x,"LI",{});var Awe=s(o0);pfe=n(Awe,"STRONG",{});var Mtt=s(pfe);kQo=r(Mtt,"electra"),Mtt.forEach(t),RQo=r(Awe," \u2014 "),xN=n(Awe,"A",{href:!0});var Ett=s(xN);SQo=r(Ett,"TFElectraModel"),Ett.forEach(t),PQo=r(Awe," (ELECTRA model)"),Awe.forEach(t),$Qo=i(x),r0=n(x,"LI",{});var Lwe=s(r0);_fe=n(Lwe,"STRONG",{});var ytt=s(_fe);IQo=r(ytt,"flaubert"),ytt.forEach(t),DQo=r(Lwe," \u2014 "),kN=n(Lwe,"A",{href:!0});var wtt=s(kN);jQo=r(wtt,"TFFlaubertModel"),wtt.forEach(t),NQo=r(Lwe," (FlauBERT model)"),Lwe.forEach(t),qQo=i(x),$s=n(x,"LI",{});var s8=s($s);vfe=n(s8,"STRONG",{});var Att=s(vfe);GQo=r(Att,"funnel"),Att.forEach(t),OQo=r(s8," \u2014 "),RN=n(s8,"A",{href:!0});var Ltt=s(RN);XQo=r(Ltt,"TFFunnelModel"),Ltt.forEach(t),VQo=r(s8," or "),SN=n(s8,"A",{href:!0});var Btt=s(SN);zQo=r(Btt,"TFFunnelBaseModel"),Btt.forEach(t),WQo=r(s8," (Funnel Transformer model)"),s8.forEach(t),QQo=i(x),t0=n(x,"LI",{});var Bwe=s(t0);bfe=n(Bwe,"STRONG",{});var xtt=s(bfe);HQo=r(xtt,"gpt2"),xtt.forEach(t),UQo=r(Bwe," \u2014 "),PN=n(Bwe,"A",{href:!0});var ktt=s(PN);JQo=r(ktt,"TFGPT2Model"),ktt.forEach(t),YQo=r(Bwe," (OpenAI GPT-2 model)"),Bwe.forEach(t),KQo=i(x),a0=n(x,"LI",{});var xwe=s(a0);Tfe=n(xwe,"STRONG",{});var Rtt=s(Tfe);ZQo=r(Rtt,"hubert"),Rtt.forEach(t),eHo=r(xwe," \u2014 "),$N=n(xwe,"A",{href:!0});var Stt=s($N);oHo=r(Stt,"TFHubertModel"),Stt.forEach(t),rHo=r(xwe," (Hubert model)"),xwe.forEach(t),tHo=i(x),n0=n(x,"LI",{});var kwe=s(n0);Ffe=n(kwe,"STRONG",{});var Ptt=s(Ffe);aHo=r(Ptt,"layoutlm"),Ptt.forEach(t),nHo=r(kwe," \u2014 "),IN=n(kwe,"A",{href:!0});var $tt=s(IN);sHo=r($tt,"TFLayoutLMModel"),$tt.forEach(t),lHo=r(kwe," (LayoutLM model)"),kwe.forEach(t),iHo=i(x),s0=n(x,"LI",{});var Rwe=s(s0);Cfe=n(Rwe,"STRONG",{});var Itt=s(Cfe);dHo=r(Itt,"led"),Itt.forEach(t),cHo=r(Rwe," \u2014 "),DN=n(Rwe,"A",{href:!0});var Dtt=s(DN);fHo=r(Dtt,"TFLEDModel"),Dtt.forEach(t),mHo=r(Rwe," (LED model)"),Rwe.forEach(t),gHo=i(x),l0=n(x,"LI",{});var Swe=s(l0);Mfe=n(Swe,"STRONG",{});var jtt=s(Mfe);hHo=r(jtt,"longformer"),jtt.forEach(t),uHo=r(Swe," \u2014 "),jN=n(Swe,"A",{href:!0});var Ntt=s(jN);pHo=r(Ntt,"TFLongformerModel"),Ntt.forEach(t),_Ho=r(Swe," (Longformer model)"),Swe.forEach(t),vHo=i(x),i0=n(x,"LI",{});var Pwe=s(i0);Efe=n(Pwe,"STRONG",{});var qtt=s(Efe);bHo=r(qtt,"lxmert"),qtt.forEach(t),THo=r(Pwe," \u2014 "),NN=n(Pwe,"A",{href:!0});var Gtt=s(NN);FHo=r(Gtt,"TFLxmertModel"),Gtt.forEach(t),CHo=r(Pwe," (LXMERT model)"),Pwe.forEach(t),MHo=i(x),d0=n(x,"LI",{});var $we=s(d0);yfe=n($we,"STRONG",{});var Ott=s(yfe);EHo=r(Ott,"marian"),Ott.forEach(t),yHo=r($we," \u2014 "),qN=n($we,"A",{href:!0});var Xtt=s(qN);wHo=r(Xtt,"TFMarianModel"),Xtt.forEach(t),AHo=r($we," (Marian model)"),$we.forEach(t),LHo=i(x),c0=n(x,"LI",{});var Iwe=s(c0);wfe=n(Iwe,"STRONG",{});var Vtt=s(wfe);BHo=r(Vtt,"mbart"),Vtt.forEach(t),xHo=r(Iwe," \u2014 "),GN=n(Iwe,"A",{href:!0});var ztt=s(GN);kHo=r(ztt,"TFMBartModel"),ztt.forEach(t),RHo=r(Iwe," (mBART model)"),Iwe.forEach(t),SHo=i(x),f0=n(x,"LI",{});var Dwe=s(f0);Afe=n(Dwe,"STRONG",{});var Wtt=s(Afe);PHo=r(Wtt,"mobilebert"),Wtt.forEach(t),$Ho=r(Dwe," \u2014 "),ON=n(Dwe,"A",{href:!0});var Qtt=s(ON);IHo=r(Qtt,"TFMobileBertModel"),Qtt.forEach(t),DHo=r(Dwe," (MobileBERT model)"),Dwe.forEach(t),jHo=i(x),m0=n(x,"LI",{});var jwe=s(m0);Lfe=n(jwe,"STRONG",{});var Htt=s(Lfe);NHo=r(Htt,"mpnet"),Htt.forEach(t),qHo=r(jwe," \u2014 "),XN=n(jwe,"A",{href:!0});var Utt=s(XN);GHo=r(Utt,"TFMPNetModel"),Utt.forEach(t),OHo=r(jwe," (MPNet model)"),jwe.forEach(t),XHo=i(x),g0=n(x,"LI",{});var Nwe=s(g0);Bfe=n(Nwe,"STRONG",{});var Jtt=s(Bfe);VHo=r(Jtt,"mt5"),Jtt.forEach(t),zHo=r(Nwe," \u2014 "),VN=n(Nwe,"A",{href:!0});var Ytt=s(VN);WHo=r(Ytt,"TFMT5Model"),Ytt.forEach(t),QHo=r(Nwe," (mT5 model)"),Nwe.forEach(t),HHo=i(x),h0=n(x,"LI",{});var qwe=s(h0);xfe=n(qwe,"STRONG",{});var Ktt=s(xfe);UHo=r(Ktt,"openai-gpt"),Ktt.forEach(t),JHo=r(qwe," \u2014 "),zN=n(qwe,"A",{href:!0});var Ztt=s(zN);YHo=r(Ztt,"TFOpenAIGPTModel"),Ztt.forEach(t),KHo=r(qwe," (OpenAI GPT model)"),qwe.forEach(t),ZHo=i(x),u0=n(x,"LI",{});var Gwe=s(u0);kfe=n(Gwe,"STRONG",{});var eat=s(kfe);eUo=r(eat,"pegasus"),eat.forEach(t),oUo=r(Gwe," \u2014 "),WN=n(Gwe,"A",{href:!0});var oat=s(WN);rUo=r(oat,"TFPegasusModel"),oat.forEach(t),tUo=r(Gwe," (Pegasus model)"),Gwe.forEach(t),aUo=i(x),p0=n(x,"LI",{});var Owe=s(p0);Rfe=n(Owe,"STRONG",{});var rat=s(Rfe);nUo=r(rat,"rembert"),rat.forEach(t),sUo=r(Owe," \u2014 "),QN=n(Owe,"A",{href:!0});var tat=s(QN);lUo=r(tat,"TFRemBertModel"),tat.forEach(t),iUo=r(Owe," (RemBERT model)"),Owe.forEach(t),dUo=i(x),_0=n(x,"LI",{});var Xwe=s(_0);Sfe=n(Xwe,"STRONG",{});var aat=s(Sfe);cUo=r(aat,"roberta"),aat.forEach(t),fUo=r(Xwe," \u2014 "),HN=n(Xwe,"A",{href:!0});var nat=s(HN);mUo=r(nat,"TFRobertaModel"),nat.forEach(t),gUo=r(Xwe," (RoBERTa model)"),Xwe.forEach(t),hUo=i(x),v0=n(x,"LI",{});var Vwe=s(v0);Pfe=n(Vwe,"STRONG",{});var sat=s(Pfe);uUo=r(sat,"roformer"),sat.forEach(t),pUo=r(Vwe," \u2014 "),UN=n(Vwe,"A",{href:!0});var lat=s(UN);_Uo=r(lat,"TFRoFormerModel"),lat.forEach(t),vUo=r(Vwe," (RoFormer model)"),Vwe.forEach(t),bUo=i(x),b0=n(x,"LI",{});var zwe=s(b0);$fe=n(zwe,"STRONG",{});var iat=s($fe);TUo=r(iat,"speech_to_text"),iat.forEach(t),FUo=r(zwe," \u2014 "),JN=n(zwe,"A",{href:!0});var dat=s(JN);CUo=r(dat,"TFSpeech2TextModel"),dat.forEach(t),MUo=r(zwe," (Speech2Text model)"),zwe.forEach(t),EUo=i(x),T0=n(x,"LI",{});var Wwe=s(T0);Ife=n(Wwe,"STRONG",{});var cat=s(Ife);yUo=r(cat,"t5"),cat.forEach(t),wUo=r(Wwe," \u2014 "),YN=n(Wwe,"A",{href:!0});var fat=s(YN);AUo=r(fat,"TFT5Model"),fat.forEach(t),LUo=r(Wwe," (T5 model)"),Wwe.forEach(t),BUo=i(x),F0=n(x,"LI",{});var Qwe=s(F0);Dfe=n(Qwe,"STRONG",{});var mat=s(Dfe);xUo=r(mat,"tapas"),mat.forEach(t),kUo=r(Qwe," \u2014 "),KN=n(Qwe,"A",{href:!0});var gat=s(KN);RUo=r(gat,"TFTapasModel"),gat.forEach(t),SUo=r(Qwe," (TAPAS model)"),Qwe.forEach(t),PUo=i(x),C0=n(x,"LI",{});var Hwe=s(C0);jfe=n(Hwe,"STRONG",{});var hat=s(jfe);$Uo=r(hat,"transfo-xl"),hat.forEach(t),IUo=r(Hwe," \u2014 "),ZN=n(Hwe,"A",{href:!0});var uat=s(ZN);DUo=r(uat,"TFTransfoXLModel"),uat.forEach(t),jUo=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),NUo=i(x),M0=n(x,"LI",{});var Uwe=s(M0);Nfe=n(Uwe,"STRONG",{});var pat=s(Nfe);qUo=r(pat,"vit"),pat.forEach(t),GUo=r(Uwe," \u2014 "),eq=n(Uwe,"A",{href:!0});var _at=s(eq);OUo=r(_at,"TFViTModel"),_at.forEach(t),XUo=r(Uwe," (ViT model)"),Uwe.forEach(t),VUo=i(x),E0=n(x,"LI",{});var Jwe=s(E0);qfe=n(Jwe,"STRONG",{});var vat=s(qfe);zUo=r(vat,"wav2vec2"),vat.forEach(t),WUo=r(Jwe," \u2014 "),oq=n(Jwe,"A",{href:!0});var bat=s(oq);QUo=r(bat,"TFWav2Vec2Model"),bat.forEach(t),HUo=r(Jwe," (Wav2Vec2 model)"),Jwe.forEach(t),UUo=i(x),y0=n(x,"LI",{});var Ywe=s(y0);Gfe=n(Ywe,"STRONG",{});var Tat=s(Gfe);JUo=r(Tat,"xlm"),Tat.forEach(t),YUo=r(Ywe," \u2014 "),rq=n(Ywe,"A",{href:!0});var Fat=s(rq);KUo=r(Fat,"TFXLMModel"),Fat.forEach(t),ZUo=r(Ywe," (XLM model)"),Ywe.forEach(t),eJo=i(x),w0=n(x,"LI",{});var Kwe=s(w0);Ofe=n(Kwe,"STRONG",{});var Cat=s(Ofe);oJo=r(Cat,"xlm-roberta"),Cat.forEach(t),rJo=r(Kwe," \u2014 "),tq=n(Kwe,"A",{href:!0});var Mat=s(tq);tJo=r(Mat,"TFXLMRobertaModel"),Mat.forEach(t),aJo=r(Kwe," (XLM-RoBERTa model)"),Kwe.forEach(t),nJo=i(x),A0=n(x,"LI",{});var Zwe=s(A0);Xfe=n(Zwe,"STRONG",{});var Eat=s(Xfe);sJo=r(Eat,"xlnet"),Eat.forEach(t),lJo=r(Zwe," \u2014 "),aq=n(Zwe,"A",{href:!0});var yat=s(aq);iJo=r(yat,"TFXLNetModel"),yat.forEach(t),dJo=r(Zwe," (XLNet model)"),Zwe.forEach(t),x.forEach(t),cJo=i(ca),Vfe=n(ca,"P",{});var wat=s(Vfe);fJo=r(wat,"Examples:"),wat.forEach(t),mJo=i(ca),m(rw.$$.fragment,ca),ca.forEach(t),kl.forEach(t),xBe=i(c),ac=n(c,"H2",{class:!0});var Nke=s(ac);L0=n(Nke,"A",{id:!0,class:!0,href:!0});var Aat=s(L0);zfe=n(Aat,"SPAN",{});var Lat=s(zfe);m(tw.$$.fragment,Lat),Lat.forEach(t),Aat.forEach(t),gJo=i(Nke),Wfe=n(Nke,"SPAN",{});var Bat=s(Wfe);hJo=r(Bat,"TFAutoModelForPreTraining"),Bat.forEach(t),Nke.forEach(t),kBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(aw.$$.fragment,Sl),uJo=i(Sl),nc=n(Sl,"P",{});var wz=s(nc);pJo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qfe=n(wz,"CODE",{});var xat=s(Qfe);_Jo=r(xat,"from_pretrained()"),xat.forEach(t),vJo=r(wz,"class method or the "),Hfe=n(wz,"CODE",{});var kat=s(Hfe);bJo=r(kat,"from_config()"),kat.forEach(t),TJo=r(wz,`class
method.`),wz.forEach(t),FJo=i(Sl),nw=n(Sl,"P",{});var qke=s(nw);CJo=r(qke,"This class cannot be instantiated directly using "),Ufe=n(qke,"CODE",{});var Rat=s(Ufe);MJo=r(Rat,"__init__()"),Rat.forEach(t),EJo=r(qke," (throws an error)."),qke.forEach(t),yJo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(sw.$$.fragment,Pl),wJo=i(Pl),Jfe=n(Pl,"P",{});var Sat=s(Jfe);AJo=r(Sat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sat.forEach(t),LJo=i(Pl),sc=n(Pl,"P",{});var Az=s(sc);BJo=r(Az,`Note:
Loading a model from its configuration file does `),Yfe=n(Az,"STRONG",{});var Pat=s(Yfe);xJo=r(Pat,"not"),Pat.forEach(t),kJo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=n(Az,"CODE",{});var $at=s(Kfe);RJo=r($at,"from_pretrained()"),$at.forEach(t),SJo=r(Az,"to load the model weights."),Az.forEach(t),PJo=i(Pl),Zfe=n(Pl,"P",{});var Iat=s(Zfe);$Jo=r(Iat,"Examples:"),Iat.forEach(t),IJo=i(Pl),m(lw.$$.fragment,Pl),Pl.forEach(t),DJo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(iw.$$.fragment,fa),jJo=i(fa),eme=n(fa,"P",{});var Dat=s(eme);NJo=r(Dat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dat.forEach(t),qJo=i(fa),fn=n(fa,"P",{});var YM=s(fn);GJo=r(YM,"The model class to instantiate is selected based on the "),ome=n(YM,"CODE",{});var jat=s(ome);OJo=r(jat,"model_type"),jat.forEach(t),XJo=r(YM,` property of the config object (either
passed as an argument or loaded from `),rme=n(YM,"CODE",{});var Nat=s(rme);VJo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),zJo=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(YM,"CODE",{});var qat=s(tme);WJo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),QJo=r(YM,":"),YM.forEach(t),HJo=i(fa),H=n(fa,"UL",{});var U=s(H);B0=n(U,"LI",{});var e6e=s(B0);ame=n(e6e,"STRONG",{});var Gat=s(ame);UJo=r(Gat,"albert"),Gat.forEach(t),JJo=r(e6e," \u2014 "),nq=n(e6e,"A",{href:!0});var Oat=s(nq);YJo=r(Oat,"TFAlbertForPreTraining"),Oat.forEach(t),KJo=r(e6e," (ALBERT model)"),e6e.forEach(t),ZJo=i(U),x0=n(U,"LI",{});var o6e=s(x0);nme=n(o6e,"STRONG",{});var Xat=s(nme);eYo=r(Xat,"bart"),Xat.forEach(t),oYo=r(o6e," \u2014 "),sq=n(o6e,"A",{href:!0});var Vat=s(sq);rYo=r(Vat,"TFBartForConditionalGeneration"),Vat.forEach(t),tYo=r(o6e," (BART model)"),o6e.forEach(t),aYo=i(U),k0=n(U,"LI",{});var r6e=s(k0);sme=n(r6e,"STRONG",{});var zat=s(sme);nYo=r(zat,"bert"),zat.forEach(t),sYo=r(r6e," \u2014 "),lq=n(r6e,"A",{href:!0});var Wat=s(lq);lYo=r(Wat,"TFBertForPreTraining"),Wat.forEach(t),iYo=r(r6e," (BERT model)"),r6e.forEach(t),dYo=i(U),R0=n(U,"LI",{});var t6e=s(R0);lme=n(t6e,"STRONG",{});var Qat=s(lme);cYo=r(Qat,"camembert"),Qat.forEach(t),fYo=r(t6e," \u2014 "),iq=n(t6e,"A",{href:!0});var Hat=s(iq);mYo=r(Hat,"TFCamembertForMaskedLM"),Hat.forEach(t),gYo=r(t6e," (CamemBERT model)"),t6e.forEach(t),hYo=i(U),S0=n(U,"LI",{});var a6e=s(S0);ime=n(a6e,"STRONG",{});var Uat=s(ime);uYo=r(Uat,"ctrl"),Uat.forEach(t),pYo=r(a6e," \u2014 "),dq=n(a6e,"A",{href:!0});var Jat=s(dq);_Yo=r(Jat,"TFCTRLLMHeadModel"),Jat.forEach(t),vYo=r(a6e," (CTRL model)"),a6e.forEach(t),bYo=i(U),P0=n(U,"LI",{});var n6e=s(P0);dme=n(n6e,"STRONG",{});var Yat=s(dme);TYo=r(Yat,"distilbert"),Yat.forEach(t),FYo=r(n6e," \u2014 "),cq=n(n6e,"A",{href:!0});var Kat=s(cq);CYo=r(Kat,"TFDistilBertForMaskedLM"),Kat.forEach(t),MYo=r(n6e," (DistilBERT model)"),n6e.forEach(t),EYo=i(U),$0=n(U,"LI",{});var s6e=s($0);cme=n(s6e,"STRONG",{});var Zat=s(cme);yYo=r(Zat,"electra"),Zat.forEach(t),wYo=r(s6e," \u2014 "),fq=n(s6e,"A",{href:!0});var ent=s(fq);AYo=r(ent,"TFElectraForPreTraining"),ent.forEach(t),LYo=r(s6e," (ELECTRA model)"),s6e.forEach(t),BYo=i(U),I0=n(U,"LI",{});var l6e=s(I0);fme=n(l6e,"STRONG",{});var ont=s(fme);xYo=r(ont,"flaubert"),ont.forEach(t),kYo=r(l6e," \u2014 "),mq=n(l6e,"A",{href:!0});var rnt=s(mq);RYo=r(rnt,"TFFlaubertWithLMHeadModel"),rnt.forEach(t),SYo=r(l6e," (FlauBERT model)"),l6e.forEach(t),PYo=i(U),D0=n(U,"LI",{});var i6e=s(D0);mme=n(i6e,"STRONG",{});var tnt=s(mme);$Yo=r(tnt,"funnel"),tnt.forEach(t),IYo=r(i6e," \u2014 "),gq=n(i6e,"A",{href:!0});var ant=s(gq);DYo=r(ant,"TFFunnelForPreTraining"),ant.forEach(t),jYo=r(i6e," (Funnel Transformer model)"),i6e.forEach(t),NYo=i(U),j0=n(U,"LI",{});var d6e=s(j0);gme=n(d6e,"STRONG",{});var nnt=s(gme);qYo=r(nnt,"gpt2"),nnt.forEach(t),GYo=r(d6e," \u2014 "),hq=n(d6e,"A",{href:!0});var snt=s(hq);OYo=r(snt,"TFGPT2LMHeadModel"),snt.forEach(t),XYo=r(d6e," (OpenAI GPT-2 model)"),d6e.forEach(t),VYo=i(U),N0=n(U,"LI",{});var c6e=s(N0);hme=n(c6e,"STRONG",{});var lnt=s(hme);zYo=r(lnt,"layoutlm"),lnt.forEach(t),WYo=r(c6e," \u2014 "),uq=n(c6e,"A",{href:!0});var int=s(uq);QYo=r(int,"TFLayoutLMForMaskedLM"),int.forEach(t),HYo=r(c6e," (LayoutLM model)"),c6e.forEach(t),UYo=i(U),q0=n(U,"LI",{});var f6e=s(q0);ume=n(f6e,"STRONG",{});var dnt=s(ume);JYo=r(dnt,"lxmert"),dnt.forEach(t),YYo=r(f6e," \u2014 "),pq=n(f6e,"A",{href:!0});var cnt=s(pq);KYo=r(cnt,"TFLxmertForPreTraining"),cnt.forEach(t),ZYo=r(f6e," (LXMERT model)"),f6e.forEach(t),eKo=i(U),G0=n(U,"LI",{});var m6e=s(G0);pme=n(m6e,"STRONG",{});var fnt=s(pme);oKo=r(fnt,"mobilebert"),fnt.forEach(t),rKo=r(m6e," \u2014 "),_q=n(m6e,"A",{href:!0});var mnt=s(_q);tKo=r(mnt,"TFMobileBertForPreTraining"),mnt.forEach(t),aKo=r(m6e," (MobileBERT model)"),m6e.forEach(t),nKo=i(U),O0=n(U,"LI",{});var g6e=s(O0);_me=n(g6e,"STRONG",{});var gnt=s(_me);sKo=r(gnt,"mpnet"),gnt.forEach(t),lKo=r(g6e," \u2014 "),vq=n(g6e,"A",{href:!0});var hnt=s(vq);iKo=r(hnt,"TFMPNetForMaskedLM"),hnt.forEach(t),dKo=r(g6e," (MPNet model)"),g6e.forEach(t),cKo=i(U),X0=n(U,"LI",{});var h6e=s(X0);vme=n(h6e,"STRONG",{});var unt=s(vme);fKo=r(unt,"openai-gpt"),unt.forEach(t),mKo=r(h6e," \u2014 "),bq=n(h6e,"A",{href:!0});var pnt=s(bq);gKo=r(pnt,"TFOpenAIGPTLMHeadModel"),pnt.forEach(t),hKo=r(h6e," (OpenAI GPT model)"),h6e.forEach(t),uKo=i(U),V0=n(U,"LI",{});var u6e=s(V0);bme=n(u6e,"STRONG",{});var _nt=s(bme);pKo=r(_nt,"roberta"),_nt.forEach(t),_Ko=r(u6e," \u2014 "),Tq=n(u6e,"A",{href:!0});var vnt=s(Tq);vKo=r(vnt,"TFRobertaForMaskedLM"),vnt.forEach(t),bKo=r(u6e," (RoBERTa model)"),u6e.forEach(t),TKo=i(U),z0=n(U,"LI",{});var p6e=s(z0);Tme=n(p6e,"STRONG",{});var bnt=s(Tme);FKo=r(bnt,"t5"),bnt.forEach(t),CKo=r(p6e," \u2014 "),Fq=n(p6e,"A",{href:!0});var Tnt=s(Fq);MKo=r(Tnt,"TFT5ForConditionalGeneration"),Tnt.forEach(t),EKo=r(p6e," (T5 model)"),p6e.forEach(t),yKo=i(U),W0=n(U,"LI",{});var _6e=s(W0);Fme=n(_6e,"STRONG",{});var Fnt=s(Fme);wKo=r(Fnt,"tapas"),Fnt.forEach(t),AKo=r(_6e," \u2014 "),Cq=n(_6e,"A",{href:!0});var Cnt=s(Cq);LKo=r(Cnt,"TFTapasForMaskedLM"),Cnt.forEach(t),BKo=r(_6e," (TAPAS model)"),_6e.forEach(t),xKo=i(U),Q0=n(U,"LI",{});var v6e=s(Q0);Cme=n(v6e,"STRONG",{});var Mnt=s(Cme);kKo=r(Mnt,"transfo-xl"),Mnt.forEach(t),RKo=r(v6e," \u2014 "),Mq=n(v6e,"A",{href:!0});var Ent=s(Mq);SKo=r(Ent,"TFTransfoXLLMHeadModel"),Ent.forEach(t),PKo=r(v6e," (Transformer-XL model)"),v6e.forEach(t),$Ko=i(U),H0=n(U,"LI",{});var b6e=s(H0);Mme=n(b6e,"STRONG",{});var ynt=s(Mme);IKo=r(ynt,"xlm"),ynt.forEach(t),DKo=r(b6e," \u2014 "),Eq=n(b6e,"A",{href:!0});var wnt=s(Eq);jKo=r(wnt,"TFXLMWithLMHeadModel"),wnt.forEach(t),NKo=r(b6e," (XLM model)"),b6e.forEach(t),qKo=i(U),U0=n(U,"LI",{});var T6e=s(U0);Eme=n(T6e,"STRONG",{});var Ant=s(Eme);GKo=r(Ant,"xlm-roberta"),Ant.forEach(t),OKo=r(T6e," \u2014 "),yq=n(T6e,"A",{href:!0});var Lnt=s(yq);XKo=r(Lnt,"TFXLMRobertaForMaskedLM"),Lnt.forEach(t),VKo=r(T6e," (XLM-RoBERTa model)"),T6e.forEach(t),zKo=i(U),J0=n(U,"LI",{});var F6e=s(J0);yme=n(F6e,"STRONG",{});var Bnt=s(yme);WKo=r(Bnt,"xlnet"),Bnt.forEach(t),QKo=r(F6e," \u2014 "),wq=n(F6e,"A",{href:!0});var xnt=s(wq);HKo=r(xnt,"TFXLNetLMHeadModel"),xnt.forEach(t),UKo=r(F6e," (XLNet model)"),F6e.forEach(t),U.forEach(t),JKo=i(fa),wme=n(fa,"P",{});var knt=s(wme);YKo=r(knt,"Examples:"),knt.forEach(t),KKo=i(fa),m(dw.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),RBe=i(c),lc=n(c,"H2",{class:!0});var Gke=s(lc);Y0=n(Gke,"A",{id:!0,class:!0,href:!0});var Rnt=s(Y0);Ame=n(Rnt,"SPAN",{});var Snt=s(Ame);m(cw.$$.fragment,Snt),Snt.forEach(t),Rnt.forEach(t),ZKo=i(Gke),Lme=n(Gke,"SPAN",{});var Pnt=s(Lme);eZo=r(Pnt,"TFAutoModelForCausalLM"),Pnt.forEach(t),Gke.forEach(t),SBe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);m(fw.$$.fragment,$l),oZo=i($l),ic=n($l,"P",{});var Lz=s(ic);rZo=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bme=n(Lz,"CODE",{});var $nt=s(Bme);tZo=r($nt,"from_pretrained()"),$nt.forEach(t),aZo=r(Lz,"class method or the "),xme=n(Lz,"CODE",{});var Int=s(xme);nZo=r(Int,"from_config()"),Int.forEach(t),sZo=r(Lz,`class
method.`),Lz.forEach(t),lZo=i($l),mw=n($l,"P",{});var Oke=s(mw);iZo=r(Oke,"This class cannot be instantiated directly using "),kme=n(Oke,"CODE",{});var Dnt=s(kme);dZo=r(Dnt,"__init__()"),Dnt.forEach(t),cZo=r(Oke," (throws an error)."),Oke.forEach(t),fZo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(gw.$$.fragment,Il),mZo=i(Il),Rme=n(Il,"P",{});var jnt=s(Rme);gZo=r(jnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jnt.forEach(t),hZo=i(Il),dc=n(Il,"P",{});var Bz=s(dc);uZo=r(Bz,`Note:
Loading a model from its configuration file does `),Sme=n(Bz,"STRONG",{});var Nnt=s(Sme);pZo=r(Nnt,"not"),Nnt.forEach(t),_Zo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=n(Bz,"CODE",{});var qnt=s(Pme);vZo=r(qnt,"from_pretrained()"),qnt.forEach(t),bZo=r(Bz,"to load the model weights."),Bz.forEach(t),TZo=i(Il),$me=n(Il,"P",{});var Gnt=s($me);FZo=r(Gnt,"Examples:"),Gnt.forEach(t),CZo=i(Il),m(hw.$$.fragment,Il),Il.forEach(t),MZo=i($l),uo=n($l,"DIV",{class:!0});var ma=s(uo);m(uw.$$.fragment,ma),EZo=i(ma),Ime=n(ma,"P",{});var Ont=s(Ime);yZo=r(Ont,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ont.forEach(t),wZo=i(ma),mn=n(ma,"P",{});var KM=s(mn);AZo=r(KM,"The model class to instantiate is selected based on the "),Dme=n(KM,"CODE",{});var Xnt=s(Dme);LZo=r(Xnt,"model_type"),Xnt.forEach(t),BZo=r(KM,` property of the config object (either
passed as an argument or loaded from `),jme=n(KM,"CODE",{});var Vnt=s(jme);xZo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),kZo=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(KM,"CODE",{});var znt=s(Nme);RZo=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),SZo=r(KM,":"),KM.forEach(t),PZo=i(ma),he=n(ma,"UL",{});var Me=s(he);K0=n(Me,"LI",{});var C6e=s(K0);qme=n(C6e,"STRONG",{});var Wnt=s(qme);$Zo=r(Wnt,"bert"),Wnt.forEach(t),IZo=r(C6e," \u2014 "),Aq=n(C6e,"A",{href:!0});var Qnt=s(Aq);DZo=r(Qnt,"TFBertLMHeadModel"),Qnt.forEach(t),jZo=r(C6e," (BERT model)"),C6e.forEach(t),NZo=i(Me),Z0=n(Me,"LI",{});var M6e=s(Z0);Gme=n(M6e,"STRONG",{});var Hnt=s(Gme);qZo=r(Hnt,"ctrl"),Hnt.forEach(t),GZo=r(M6e," \u2014 "),Lq=n(M6e,"A",{href:!0});var Unt=s(Lq);OZo=r(Unt,"TFCTRLLMHeadModel"),Unt.forEach(t),XZo=r(M6e," (CTRL model)"),M6e.forEach(t),VZo=i(Me),eT=n(Me,"LI",{});var E6e=s(eT);Ome=n(E6e,"STRONG",{});var Jnt=s(Ome);zZo=r(Jnt,"gpt2"),Jnt.forEach(t),WZo=r(E6e," \u2014 "),Bq=n(E6e,"A",{href:!0});var Ynt=s(Bq);QZo=r(Ynt,"TFGPT2LMHeadModel"),Ynt.forEach(t),HZo=r(E6e," (OpenAI GPT-2 model)"),E6e.forEach(t),UZo=i(Me),oT=n(Me,"LI",{});var y6e=s(oT);Xme=n(y6e,"STRONG",{});var Knt=s(Xme);JZo=r(Knt,"openai-gpt"),Knt.forEach(t),YZo=r(y6e," \u2014 "),xq=n(y6e,"A",{href:!0});var Znt=s(xq);KZo=r(Znt,"TFOpenAIGPTLMHeadModel"),Znt.forEach(t),ZZo=r(y6e," (OpenAI GPT model)"),y6e.forEach(t),eer=i(Me),rT=n(Me,"LI",{});var w6e=s(rT);Vme=n(w6e,"STRONG",{});var est=s(Vme);oer=r(est,"rembert"),est.forEach(t),rer=r(w6e," \u2014 "),kq=n(w6e,"A",{href:!0});var ost=s(kq);ter=r(ost,"TFRemBertForCausalLM"),ost.forEach(t),aer=r(w6e," (RemBERT model)"),w6e.forEach(t),ner=i(Me),tT=n(Me,"LI",{});var A6e=s(tT);zme=n(A6e,"STRONG",{});var rst=s(zme);ser=r(rst,"roberta"),rst.forEach(t),ler=r(A6e," \u2014 "),Rq=n(A6e,"A",{href:!0});var tst=s(Rq);ier=r(tst,"TFRobertaForCausalLM"),tst.forEach(t),der=r(A6e," (RoBERTa model)"),A6e.forEach(t),cer=i(Me),aT=n(Me,"LI",{});var L6e=s(aT);Wme=n(L6e,"STRONG",{});var ast=s(Wme);fer=r(ast,"roformer"),ast.forEach(t),mer=r(L6e," \u2014 "),Sq=n(L6e,"A",{href:!0});var nst=s(Sq);ger=r(nst,"TFRoFormerForCausalLM"),nst.forEach(t),her=r(L6e," (RoFormer model)"),L6e.forEach(t),uer=i(Me),nT=n(Me,"LI",{});var B6e=s(nT);Qme=n(B6e,"STRONG",{});var sst=s(Qme);per=r(sst,"transfo-xl"),sst.forEach(t),_er=r(B6e," \u2014 "),Pq=n(B6e,"A",{href:!0});var lst=s(Pq);ver=r(lst,"TFTransfoXLLMHeadModel"),lst.forEach(t),ber=r(B6e," (Transformer-XL model)"),B6e.forEach(t),Ter=i(Me),sT=n(Me,"LI",{});var x6e=s(sT);Hme=n(x6e,"STRONG",{});var ist=s(Hme);Fer=r(ist,"xlm"),ist.forEach(t),Cer=r(x6e," \u2014 "),$q=n(x6e,"A",{href:!0});var dst=s($q);Mer=r(dst,"TFXLMWithLMHeadModel"),dst.forEach(t),Eer=r(x6e," (XLM model)"),x6e.forEach(t),yer=i(Me),lT=n(Me,"LI",{});var k6e=s(lT);Ume=n(k6e,"STRONG",{});var cst=s(Ume);wer=r(cst,"xlnet"),cst.forEach(t),Aer=r(k6e," \u2014 "),Iq=n(k6e,"A",{href:!0});var fst=s(Iq);Ler=r(fst,"TFXLNetLMHeadModel"),fst.forEach(t),Ber=r(k6e," (XLNet model)"),k6e.forEach(t),Me.forEach(t),xer=i(ma),Jme=n(ma,"P",{});var mst=s(Jme);ker=r(mst,"Examples:"),mst.forEach(t),Rer=i(ma),m(pw.$$.fragment,ma),ma.forEach(t),$l.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var Xke=s(cc);iT=n(Xke,"A",{id:!0,class:!0,href:!0});var gst=s(iT);Yme=n(gst,"SPAN",{});var hst=s(Yme);m(_w.$$.fragment,hst),hst.forEach(t),gst.forEach(t),Ser=i(Xke),Kme=n(Xke,"SPAN",{});var ust=s(Kme);Per=r(ust,"TFAutoModelForImageClassification"),ust.forEach(t),Xke.forEach(t),$Be=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(vw.$$.fragment,Dl),$er=i(Dl),fc=n(Dl,"P",{});var xz=s(fc);Ier=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zme=n(xz,"CODE",{});var pst=s(Zme);Der=r(pst,"from_pretrained()"),pst.forEach(t),jer=r(xz,"class method or the "),ege=n(xz,"CODE",{});var _st=s(ege);Ner=r(_st,"from_config()"),_st.forEach(t),qer=r(xz,`class
method.`),xz.forEach(t),Ger=i(Dl),bw=n(Dl,"P",{});var Vke=s(bw);Oer=r(Vke,"This class cannot be instantiated directly using "),oge=n(Vke,"CODE",{});var vst=s(oge);Xer=r(vst,"__init__()"),vst.forEach(t),Ver=r(Vke," (throws an error)."),Vke.forEach(t),zer=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(Tw.$$.fragment,jl),Wer=i(jl),rge=n(jl,"P",{});var bst=s(rge);Qer=r(bst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bst.forEach(t),Her=i(jl),mc=n(jl,"P",{});var kz=s(mc);Uer=r(kz,`Note:
Loading a model from its configuration file does `),tge=n(kz,"STRONG",{});var Tst=s(tge);Jer=r(Tst,"not"),Tst.forEach(t),Yer=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),age=n(kz,"CODE",{});var Fst=s(age);Ker=r(Fst,"from_pretrained()"),Fst.forEach(t),Zer=r(kz,"to load the model weights."),kz.forEach(t),eor=i(jl),nge=n(jl,"P",{});var Cst=s(nge);oor=r(Cst,"Examples:"),Cst.forEach(t),ror=i(jl),m(Fw.$$.fragment,jl),jl.forEach(t),tor=i(Dl),po=n(Dl,"DIV",{class:!0});var ga=s(po);m(Cw.$$.fragment,ga),aor=i(ga),sge=n(ga,"P",{});var Mst=s(sge);nor=r(Mst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mst.forEach(t),sor=i(ga),gn=n(ga,"P",{});var ZM=s(gn);lor=r(ZM,"The model class to instantiate is selected based on the "),lge=n(ZM,"CODE",{});var Est=s(lge);ior=r(Est,"model_type"),Est.forEach(t),dor=r(ZM,` property of the config object (either
passed as an argument or loaded from `),ige=n(ZM,"CODE",{});var yst=s(ige);cor=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),mor=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(ZM,"CODE",{});var wst=s(dge);gor=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),hor=r(ZM,":"),ZM.forEach(t),uor=i(ga),Mw=n(ga,"UL",{});var zke=s(Mw);dT=n(zke,"LI",{});var R6e=s(dT);cge=n(R6e,"STRONG",{});var Ast=s(cge);por=r(Ast,"convnext"),Ast.forEach(t),_or=r(R6e," \u2014 "),Dq=n(R6e,"A",{href:!0});var Lst=s(Dq);vor=r(Lst,"TFConvNextForImageClassification"),Lst.forEach(t),bor=r(R6e," (ConvNext model)"),R6e.forEach(t),Tor=i(zke),cT=n(zke,"LI",{});var S6e=s(cT);fge=n(S6e,"STRONG",{});var Bst=s(fge);For=r(Bst,"vit"),Bst.forEach(t),Cor=r(S6e," \u2014 "),jq=n(S6e,"A",{href:!0});var xst=s(jq);Mor=r(xst,"TFViTForImageClassification"),xst.forEach(t),Eor=r(S6e," (ViT model)"),S6e.forEach(t),zke.forEach(t),yor=i(ga),mge=n(ga,"P",{});var kst=s(mge);wor=r(kst,"Examples:"),kst.forEach(t),Aor=i(ga),m(Ew.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Wke=s(gc);fT=n(Wke,"A",{id:!0,class:!0,href:!0});var Rst=s(fT);gge=n(Rst,"SPAN",{});var Sst=s(gge);m(yw.$$.fragment,Sst),Sst.forEach(t),Rst.forEach(t),Lor=i(Wke),hge=n(Wke,"SPAN",{});var Pst=s(hge);Bor=r(Pst,"TFAutoModelForMaskedLM"),Pst.forEach(t),Wke.forEach(t),DBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(ww.$$.fragment,Nl),xor=i(Nl),hc=n(Nl,"P",{});var Rz=s(hc);kor=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uge=n(Rz,"CODE",{});var $st=s(uge);Ror=r($st,"from_pretrained()"),$st.forEach(t),Sor=r(Rz,"class method or the "),pge=n(Rz,"CODE",{});var Ist=s(pge);Por=r(Ist,"from_config()"),Ist.forEach(t),$or=r(Rz,`class
method.`),Rz.forEach(t),Ior=i(Nl),Aw=n(Nl,"P",{});var Qke=s(Aw);Dor=r(Qke,"This class cannot be instantiated directly using "),_ge=n(Qke,"CODE",{});var Dst=s(_ge);jor=r(Dst,"__init__()"),Dst.forEach(t),Nor=r(Qke," (throws an error)."),Qke.forEach(t),qor=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(Lw.$$.fragment,ql),Gor=i(ql),vge=n(ql,"P",{});var jst=s(vge);Oor=r(jst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jst.forEach(t),Xor=i(ql),uc=n(ql,"P",{});var Sz=s(uc);Vor=r(Sz,`Note:
Loading a model from its configuration file does `),bge=n(Sz,"STRONG",{});var Nst=s(bge);zor=r(Nst,"not"),Nst.forEach(t),Wor=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=n(Sz,"CODE",{});var qst=s(Tge);Qor=r(qst,"from_pretrained()"),qst.forEach(t),Hor=r(Sz,"to load the model weights."),Sz.forEach(t),Uor=i(ql),Fge=n(ql,"P",{});var Gst=s(Fge);Jor=r(Gst,"Examples:"),Gst.forEach(t),Yor=i(ql),m(Bw.$$.fragment,ql),ql.forEach(t),Kor=i(Nl),_o=n(Nl,"DIV",{class:!0});var ha=s(_o);m(xw.$$.fragment,ha),Zor=i(ha),Cge=n(ha,"P",{});var Ost=s(Cge);err=r(Ost,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ost.forEach(t),orr=i(ha),hn=n(ha,"P",{});var eE=s(hn);rrr=r(eE,"The model class to instantiate is selected based on the "),Mge=n(eE,"CODE",{});var Xst=s(Mge);trr=r(Xst,"model_type"),Xst.forEach(t),arr=r(eE,` property of the config object (either
passed as an argument or loaded from `),Ege=n(eE,"CODE",{});var Vst=s(Ege);nrr=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),srr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(eE,"CODE",{});var zst=s(yge);lrr=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),irr=r(eE,":"),eE.forEach(t),drr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);mT=n(ee,"LI",{});var P6e=s(mT);wge=n(P6e,"STRONG",{});var Wst=s(wge);crr=r(Wst,"albert"),Wst.forEach(t),frr=r(P6e," \u2014 "),Nq=n(P6e,"A",{href:!0});var Qst=s(Nq);mrr=r(Qst,"TFAlbertForMaskedLM"),Qst.forEach(t),grr=r(P6e," (ALBERT model)"),P6e.forEach(t),hrr=i(ee),gT=n(ee,"LI",{});var $6e=s(gT);Age=n($6e,"STRONG",{});var Hst=s(Age);urr=r(Hst,"bert"),Hst.forEach(t),prr=r($6e," \u2014 "),qq=n($6e,"A",{href:!0});var Ust=s(qq);_rr=r(Ust,"TFBertForMaskedLM"),Ust.forEach(t),vrr=r($6e," (BERT model)"),$6e.forEach(t),brr=i(ee),hT=n(ee,"LI",{});var I6e=s(hT);Lge=n(I6e,"STRONG",{});var Jst=s(Lge);Trr=r(Jst,"camembert"),Jst.forEach(t),Frr=r(I6e," \u2014 "),Gq=n(I6e,"A",{href:!0});var Yst=s(Gq);Crr=r(Yst,"TFCamembertForMaskedLM"),Yst.forEach(t),Mrr=r(I6e," (CamemBERT model)"),I6e.forEach(t),Err=i(ee),uT=n(ee,"LI",{});var D6e=s(uT);Bge=n(D6e,"STRONG",{});var Kst=s(Bge);yrr=r(Kst,"convbert"),Kst.forEach(t),wrr=r(D6e," \u2014 "),Oq=n(D6e,"A",{href:!0});var Zst=s(Oq);Arr=r(Zst,"TFConvBertForMaskedLM"),Zst.forEach(t),Lrr=r(D6e," (ConvBERT model)"),D6e.forEach(t),Brr=i(ee),pT=n(ee,"LI",{});var j6e=s(pT);xge=n(j6e,"STRONG",{});var elt=s(xge);xrr=r(elt,"deberta"),elt.forEach(t),krr=r(j6e," \u2014 "),Xq=n(j6e,"A",{href:!0});var olt=s(Xq);Rrr=r(olt,"TFDebertaForMaskedLM"),olt.forEach(t),Srr=r(j6e," (DeBERTa model)"),j6e.forEach(t),Prr=i(ee),_T=n(ee,"LI",{});var N6e=s(_T);kge=n(N6e,"STRONG",{});var rlt=s(kge);$rr=r(rlt,"deberta-v2"),rlt.forEach(t),Irr=r(N6e," \u2014 "),Vq=n(N6e,"A",{href:!0});var tlt=s(Vq);Drr=r(tlt,"TFDebertaV2ForMaskedLM"),tlt.forEach(t),jrr=r(N6e," (DeBERTa-v2 model)"),N6e.forEach(t),Nrr=i(ee),vT=n(ee,"LI",{});var q6e=s(vT);Rge=n(q6e,"STRONG",{});var alt=s(Rge);qrr=r(alt,"distilbert"),alt.forEach(t),Grr=r(q6e," \u2014 "),zq=n(q6e,"A",{href:!0});var nlt=s(zq);Orr=r(nlt,"TFDistilBertForMaskedLM"),nlt.forEach(t),Xrr=r(q6e," (DistilBERT model)"),q6e.forEach(t),Vrr=i(ee),bT=n(ee,"LI",{});var G6e=s(bT);Sge=n(G6e,"STRONG",{});var slt=s(Sge);zrr=r(slt,"electra"),slt.forEach(t),Wrr=r(G6e," \u2014 "),Wq=n(G6e,"A",{href:!0});var llt=s(Wq);Qrr=r(llt,"TFElectraForMaskedLM"),llt.forEach(t),Hrr=r(G6e," (ELECTRA model)"),G6e.forEach(t),Urr=i(ee),TT=n(ee,"LI",{});var O6e=s(TT);Pge=n(O6e,"STRONG",{});var ilt=s(Pge);Jrr=r(ilt,"flaubert"),ilt.forEach(t),Yrr=r(O6e," \u2014 "),Qq=n(O6e,"A",{href:!0});var dlt=s(Qq);Krr=r(dlt,"TFFlaubertWithLMHeadModel"),dlt.forEach(t),Zrr=r(O6e," (FlauBERT model)"),O6e.forEach(t),etr=i(ee),FT=n(ee,"LI",{});var X6e=s(FT);$ge=n(X6e,"STRONG",{});var clt=s($ge);otr=r(clt,"funnel"),clt.forEach(t),rtr=r(X6e," \u2014 "),Hq=n(X6e,"A",{href:!0});var flt=s(Hq);ttr=r(flt,"TFFunnelForMaskedLM"),flt.forEach(t),atr=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),ntr=i(ee),CT=n(ee,"LI",{});var V6e=s(CT);Ige=n(V6e,"STRONG",{});var mlt=s(Ige);str=r(mlt,"layoutlm"),mlt.forEach(t),ltr=r(V6e," \u2014 "),Uq=n(V6e,"A",{href:!0});var glt=s(Uq);itr=r(glt,"TFLayoutLMForMaskedLM"),glt.forEach(t),dtr=r(V6e," (LayoutLM model)"),V6e.forEach(t),ctr=i(ee),MT=n(ee,"LI",{});var z6e=s(MT);Dge=n(z6e,"STRONG",{});var hlt=s(Dge);ftr=r(hlt,"longformer"),hlt.forEach(t),mtr=r(z6e," \u2014 "),Jq=n(z6e,"A",{href:!0});var ult=s(Jq);gtr=r(ult,"TFLongformerForMaskedLM"),ult.forEach(t),htr=r(z6e," (Longformer model)"),z6e.forEach(t),utr=i(ee),ET=n(ee,"LI",{});var W6e=s(ET);jge=n(W6e,"STRONG",{});var plt=s(jge);ptr=r(plt,"mobilebert"),plt.forEach(t),_tr=r(W6e," \u2014 "),Yq=n(W6e,"A",{href:!0});var _lt=s(Yq);vtr=r(_lt,"TFMobileBertForMaskedLM"),_lt.forEach(t),btr=r(W6e," (MobileBERT model)"),W6e.forEach(t),Ttr=i(ee),yT=n(ee,"LI",{});var Q6e=s(yT);Nge=n(Q6e,"STRONG",{});var vlt=s(Nge);Ftr=r(vlt,"mpnet"),vlt.forEach(t),Ctr=r(Q6e," \u2014 "),Kq=n(Q6e,"A",{href:!0});var blt=s(Kq);Mtr=r(blt,"TFMPNetForMaskedLM"),blt.forEach(t),Etr=r(Q6e," (MPNet model)"),Q6e.forEach(t),ytr=i(ee),wT=n(ee,"LI",{});var H6e=s(wT);qge=n(H6e,"STRONG",{});var Tlt=s(qge);wtr=r(Tlt,"rembert"),Tlt.forEach(t),Atr=r(H6e," \u2014 "),Zq=n(H6e,"A",{href:!0});var Flt=s(Zq);Ltr=r(Flt,"TFRemBertForMaskedLM"),Flt.forEach(t),Btr=r(H6e," (RemBERT model)"),H6e.forEach(t),xtr=i(ee),AT=n(ee,"LI",{});var U6e=s(AT);Gge=n(U6e,"STRONG",{});var Clt=s(Gge);ktr=r(Clt,"roberta"),Clt.forEach(t),Rtr=r(U6e," \u2014 "),eG=n(U6e,"A",{href:!0});var Mlt=s(eG);Str=r(Mlt,"TFRobertaForMaskedLM"),Mlt.forEach(t),Ptr=r(U6e," (RoBERTa model)"),U6e.forEach(t),$tr=i(ee),LT=n(ee,"LI",{});var J6e=s(LT);Oge=n(J6e,"STRONG",{});var Elt=s(Oge);Itr=r(Elt,"roformer"),Elt.forEach(t),Dtr=r(J6e," \u2014 "),oG=n(J6e,"A",{href:!0});var ylt=s(oG);jtr=r(ylt,"TFRoFormerForMaskedLM"),ylt.forEach(t),Ntr=r(J6e," (RoFormer model)"),J6e.forEach(t),qtr=i(ee),BT=n(ee,"LI",{});var Y6e=s(BT);Xge=n(Y6e,"STRONG",{});var wlt=s(Xge);Gtr=r(wlt,"tapas"),wlt.forEach(t),Otr=r(Y6e," \u2014 "),rG=n(Y6e,"A",{href:!0});var Alt=s(rG);Xtr=r(Alt,"TFTapasForMaskedLM"),Alt.forEach(t),Vtr=r(Y6e," (TAPAS model)"),Y6e.forEach(t),ztr=i(ee),xT=n(ee,"LI",{});var K6e=s(xT);Vge=n(K6e,"STRONG",{});var Llt=s(Vge);Wtr=r(Llt,"xlm"),Llt.forEach(t),Qtr=r(K6e," \u2014 "),tG=n(K6e,"A",{href:!0});var Blt=s(tG);Htr=r(Blt,"TFXLMWithLMHeadModel"),Blt.forEach(t),Utr=r(K6e," (XLM model)"),K6e.forEach(t),Jtr=i(ee),kT=n(ee,"LI",{});var Z6e=s(kT);zge=n(Z6e,"STRONG",{});var xlt=s(zge);Ytr=r(xlt,"xlm-roberta"),xlt.forEach(t),Ktr=r(Z6e," \u2014 "),aG=n(Z6e,"A",{href:!0});var klt=s(aG);Ztr=r(klt,"TFXLMRobertaForMaskedLM"),klt.forEach(t),ear=r(Z6e," (XLM-RoBERTa model)"),Z6e.forEach(t),ee.forEach(t),oar=i(ha),Wge=n(ha,"P",{});var Rlt=s(Wge);rar=r(Rlt,"Examples:"),Rlt.forEach(t),tar=i(ha),m(kw.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),jBe=i(c),pc=n(c,"H2",{class:!0});var Hke=s(pc);RT=n(Hke,"A",{id:!0,class:!0,href:!0});var Slt=s(RT);Qge=n(Slt,"SPAN",{});var Plt=s(Qge);m(Rw.$$.fragment,Plt),Plt.forEach(t),Slt.forEach(t),aar=i(Hke),Hge=n(Hke,"SPAN",{});var $lt=s(Hge);nar=r($lt,"TFAutoModelForSeq2SeqLM"),$lt.forEach(t),Hke.forEach(t),NBe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(Sw.$$.fragment,Gl),sar=i(Gl),_c=n(Gl,"P",{});var Pz=s(_c);lar=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=n(Pz,"CODE",{});var Ilt=s(Uge);iar=r(Ilt,"from_pretrained()"),Ilt.forEach(t),dar=r(Pz,"class method or the "),Jge=n(Pz,"CODE",{});var Dlt=s(Jge);car=r(Dlt,"from_config()"),Dlt.forEach(t),far=r(Pz,`class
method.`),Pz.forEach(t),mar=i(Gl),Pw=n(Gl,"P",{});var Uke=s(Pw);gar=r(Uke,"This class cannot be instantiated directly using "),Yge=n(Uke,"CODE",{});var jlt=s(Yge);har=r(jlt,"__init__()"),jlt.forEach(t),uar=r(Uke," (throws an error)."),Uke.forEach(t),par=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m($w.$$.fragment,Ol),_ar=i(Ol),Kge=n(Ol,"P",{});var Nlt=s(Kge);bar=r(Nlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nlt.forEach(t),Tar=i(Ol),vc=n(Ol,"P",{});var $z=s(vc);Far=r($z,`Note:
Loading a model from its configuration file does `),Zge=n($z,"STRONG",{});var qlt=s(Zge);Car=r(qlt,"not"),qlt.forEach(t),Mar=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=n($z,"CODE",{});var Glt=s(ehe);Ear=r(Glt,"from_pretrained()"),Glt.forEach(t),yar=r($z,"to load the model weights."),$z.forEach(t),war=i(Ol),ohe=n(Ol,"P",{});var Olt=s(ohe);Aar=r(Olt,"Examples:"),Olt.forEach(t),Lar=i(Ol),m(Iw.$$.fragment,Ol),Ol.forEach(t),Bar=i(Gl),vo=n(Gl,"DIV",{class:!0});var ua=s(vo);m(Dw.$$.fragment,ua),xar=i(ua),rhe=n(ua,"P",{});var Xlt=s(rhe);kar=r(Xlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xlt.forEach(t),Rar=i(ua),un=n(ua,"P",{});var oE=s(un);Sar=r(oE,"The model class to instantiate is selected based on the "),the=n(oE,"CODE",{});var Vlt=s(the);Par=r(Vlt,"model_type"),Vlt.forEach(t),$ar=r(oE,` property of the config object (either
passed as an argument or loaded from `),ahe=n(oE,"CODE",{});var zlt=s(ahe);Iar=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Dar=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(oE,"CODE",{});var Wlt=s(nhe);jar=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),Nar=r(oE,":"),oE.forEach(t),qar=i(ua),ue=n(ua,"UL",{});var Ee=s(ue);ST=n(Ee,"LI",{});var eAe=s(ST);she=n(eAe,"STRONG",{});var Qlt=s(she);Gar=r(Qlt,"bart"),Qlt.forEach(t),Oar=r(eAe," \u2014 "),nG=n(eAe,"A",{href:!0});var Hlt=s(nG);Xar=r(Hlt,"TFBartForConditionalGeneration"),Hlt.forEach(t),Var=r(eAe," (BART model)"),eAe.forEach(t),zar=i(Ee),PT=n(Ee,"LI",{});var oAe=s(PT);lhe=n(oAe,"STRONG",{});var Ult=s(lhe);War=r(Ult,"blenderbot"),Ult.forEach(t),Qar=r(oAe," \u2014 "),sG=n(oAe,"A",{href:!0});var Jlt=s(sG);Har=r(Jlt,"TFBlenderbotForConditionalGeneration"),Jlt.forEach(t),Uar=r(oAe," (Blenderbot model)"),oAe.forEach(t),Jar=i(Ee),$T=n(Ee,"LI",{});var rAe=s($T);ihe=n(rAe,"STRONG",{});var Ylt=s(ihe);Yar=r(Ylt,"blenderbot-small"),Ylt.forEach(t),Kar=r(rAe," \u2014 "),lG=n(rAe,"A",{href:!0});var Klt=s(lG);Zar=r(Klt,"TFBlenderbotSmallForConditionalGeneration"),Klt.forEach(t),enr=r(rAe," (BlenderbotSmall model)"),rAe.forEach(t),onr=i(Ee),IT=n(Ee,"LI",{});var tAe=s(IT);dhe=n(tAe,"STRONG",{});var Zlt=s(dhe);rnr=r(Zlt,"encoder-decoder"),Zlt.forEach(t),tnr=r(tAe," \u2014 "),iG=n(tAe,"A",{href:!0});var eit=s(iG);anr=r(eit,"TFEncoderDecoderModel"),eit.forEach(t),nnr=r(tAe," (Encoder decoder model)"),tAe.forEach(t),snr=i(Ee),DT=n(Ee,"LI",{});var aAe=s(DT);che=n(aAe,"STRONG",{});var oit=s(che);lnr=r(oit,"led"),oit.forEach(t),inr=r(aAe," \u2014 "),dG=n(aAe,"A",{href:!0});var rit=s(dG);dnr=r(rit,"TFLEDForConditionalGeneration"),rit.forEach(t),cnr=r(aAe," (LED model)"),aAe.forEach(t),fnr=i(Ee),jT=n(Ee,"LI",{});var nAe=s(jT);fhe=n(nAe,"STRONG",{});var tit=s(fhe);mnr=r(tit,"marian"),tit.forEach(t),gnr=r(nAe," \u2014 "),cG=n(nAe,"A",{href:!0});var ait=s(cG);hnr=r(ait,"TFMarianMTModel"),ait.forEach(t),unr=r(nAe," (Marian model)"),nAe.forEach(t),pnr=i(Ee),NT=n(Ee,"LI",{});var sAe=s(NT);mhe=n(sAe,"STRONG",{});var nit=s(mhe);_nr=r(nit,"mbart"),nit.forEach(t),vnr=r(sAe," \u2014 "),fG=n(sAe,"A",{href:!0});var sit=s(fG);bnr=r(sit,"TFMBartForConditionalGeneration"),sit.forEach(t),Tnr=r(sAe," (mBART model)"),sAe.forEach(t),Fnr=i(Ee),qT=n(Ee,"LI",{});var lAe=s(qT);ghe=n(lAe,"STRONG",{});var lit=s(ghe);Cnr=r(lit,"mt5"),lit.forEach(t),Mnr=r(lAe," \u2014 "),mG=n(lAe,"A",{href:!0});var iit=s(mG);Enr=r(iit,"TFMT5ForConditionalGeneration"),iit.forEach(t),ynr=r(lAe," (mT5 model)"),lAe.forEach(t),wnr=i(Ee),GT=n(Ee,"LI",{});var iAe=s(GT);hhe=n(iAe,"STRONG",{});var dit=s(hhe);Anr=r(dit,"pegasus"),dit.forEach(t),Lnr=r(iAe," \u2014 "),gG=n(iAe,"A",{href:!0});var cit=s(gG);Bnr=r(cit,"TFPegasusForConditionalGeneration"),cit.forEach(t),xnr=r(iAe," (Pegasus model)"),iAe.forEach(t),knr=i(Ee),OT=n(Ee,"LI",{});var dAe=s(OT);uhe=n(dAe,"STRONG",{});var fit=s(uhe);Rnr=r(fit,"t5"),fit.forEach(t),Snr=r(dAe," \u2014 "),hG=n(dAe,"A",{href:!0});var mit=s(hG);Pnr=r(mit,"TFT5ForConditionalGeneration"),mit.forEach(t),$nr=r(dAe," (T5 model)"),dAe.forEach(t),Ee.forEach(t),Inr=i(ua),phe=n(ua,"P",{});var git=s(phe);Dnr=r(git,"Examples:"),git.forEach(t),jnr=i(ua),m(jw.$$.fragment,ua),ua.forEach(t),Gl.forEach(t),qBe=i(c),bc=n(c,"H2",{class:!0});var Jke=s(bc);XT=n(Jke,"A",{id:!0,class:!0,href:!0});var hit=s(XT);_he=n(hit,"SPAN",{});var uit=s(_he);m(Nw.$$.fragment,uit),uit.forEach(t),hit.forEach(t),Nnr=i(Jke),vhe=n(Jke,"SPAN",{});var pit=s(vhe);qnr=r(pit,"TFAutoModelForSequenceClassification"),pit.forEach(t),Jke.forEach(t),GBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(qw.$$.fragment,Xl),Gnr=i(Xl),Tc=n(Xl,"P",{});var Iz=s(Tc);Onr=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bhe=n(Iz,"CODE",{});var _it=s(bhe);Xnr=r(_it,"from_pretrained()"),_it.forEach(t),Vnr=r(Iz,"class method or the "),The=n(Iz,"CODE",{});var vit=s(The);znr=r(vit,"from_config()"),vit.forEach(t),Wnr=r(Iz,`class
method.`),Iz.forEach(t),Qnr=i(Xl),Gw=n(Xl,"P",{});var Yke=s(Gw);Hnr=r(Yke,"This class cannot be instantiated directly using "),Fhe=n(Yke,"CODE",{});var bit=s(Fhe);Unr=r(bit,"__init__()"),bit.forEach(t),Jnr=r(Yke," (throws an error)."),Yke.forEach(t),Ynr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(Ow.$$.fragment,Vl),Knr=i(Vl),Che=n(Vl,"P",{});var Tit=s(Che);Znr=r(Tit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tit.forEach(t),esr=i(Vl),Fc=n(Vl,"P",{});var Dz=s(Fc);osr=r(Dz,`Note:
Loading a model from its configuration file does `),Mhe=n(Dz,"STRONG",{});var Fit=s(Mhe);rsr=r(Fit,"not"),Fit.forEach(t),tsr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=n(Dz,"CODE",{});var Cit=s(Ehe);asr=r(Cit,"from_pretrained()"),Cit.forEach(t),nsr=r(Dz,"to load the model weights."),Dz.forEach(t),ssr=i(Vl),yhe=n(Vl,"P",{});var Mit=s(yhe);lsr=r(Mit,"Examples:"),Mit.forEach(t),isr=i(Vl),m(Xw.$$.fragment,Vl),Vl.forEach(t),dsr=i(Xl),bo=n(Xl,"DIV",{class:!0});var pa=s(bo);m(Vw.$$.fragment,pa),csr=i(pa),whe=n(pa,"P",{});var Eit=s(whe);fsr=r(Eit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eit.forEach(t),msr=i(pa),pn=n(pa,"P",{});var rE=s(pn);gsr=r(rE,"The model class to instantiate is selected based on the "),Ahe=n(rE,"CODE",{});var yit=s(Ahe);hsr=r(yit,"model_type"),yit.forEach(t),usr=r(rE,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(rE,"CODE",{});var wit=s(Lhe);psr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),_sr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(rE,"CODE",{});var Ait=s(Bhe);vsr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),bsr=r(rE,":"),rE.forEach(t),Tsr=i(pa),X=n(pa,"UL",{});var W=s(X);VT=n(W,"LI",{});var cAe=s(VT);xhe=n(cAe,"STRONG",{});var Lit=s(xhe);Fsr=r(Lit,"albert"),Lit.forEach(t),Csr=r(cAe," \u2014 "),uG=n(cAe,"A",{href:!0});var Bit=s(uG);Msr=r(Bit,"TFAlbertForSequenceClassification"),Bit.forEach(t),Esr=r(cAe," (ALBERT model)"),cAe.forEach(t),ysr=i(W),zT=n(W,"LI",{});var fAe=s(zT);khe=n(fAe,"STRONG",{});var xit=s(khe);wsr=r(xit,"bert"),xit.forEach(t),Asr=r(fAe," \u2014 "),pG=n(fAe,"A",{href:!0});var kit=s(pG);Lsr=r(kit,"TFBertForSequenceClassification"),kit.forEach(t),Bsr=r(fAe," (BERT model)"),fAe.forEach(t),xsr=i(W),WT=n(W,"LI",{});var mAe=s(WT);Rhe=n(mAe,"STRONG",{});var Rit=s(Rhe);ksr=r(Rit,"camembert"),Rit.forEach(t),Rsr=r(mAe," \u2014 "),_G=n(mAe,"A",{href:!0});var Sit=s(_G);Ssr=r(Sit,"TFCamembertForSequenceClassification"),Sit.forEach(t),Psr=r(mAe," (CamemBERT model)"),mAe.forEach(t),$sr=i(W),QT=n(W,"LI",{});var gAe=s(QT);She=n(gAe,"STRONG",{});var Pit=s(She);Isr=r(Pit,"convbert"),Pit.forEach(t),Dsr=r(gAe," \u2014 "),vG=n(gAe,"A",{href:!0});var $it=s(vG);jsr=r($it,"TFConvBertForSequenceClassification"),$it.forEach(t),Nsr=r(gAe," (ConvBERT model)"),gAe.forEach(t),qsr=i(W),HT=n(W,"LI",{});var hAe=s(HT);Phe=n(hAe,"STRONG",{});var Iit=s(Phe);Gsr=r(Iit,"ctrl"),Iit.forEach(t),Osr=r(hAe," \u2014 "),bG=n(hAe,"A",{href:!0});var Dit=s(bG);Xsr=r(Dit,"TFCTRLForSequenceClassification"),Dit.forEach(t),Vsr=r(hAe," (CTRL model)"),hAe.forEach(t),zsr=i(W),UT=n(W,"LI",{});var uAe=s(UT);$he=n(uAe,"STRONG",{});var jit=s($he);Wsr=r(jit,"deberta"),jit.forEach(t),Qsr=r(uAe," \u2014 "),TG=n(uAe,"A",{href:!0});var Nit=s(TG);Hsr=r(Nit,"TFDebertaForSequenceClassification"),Nit.forEach(t),Usr=r(uAe," (DeBERTa model)"),uAe.forEach(t),Jsr=i(W),JT=n(W,"LI",{});var pAe=s(JT);Ihe=n(pAe,"STRONG",{});var qit=s(Ihe);Ysr=r(qit,"deberta-v2"),qit.forEach(t),Ksr=r(pAe," \u2014 "),FG=n(pAe,"A",{href:!0});var Git=s(FG);Zsr=r(Git,"TFDebertaV2ForSequenceClassification"),Git.forEach(t),elr=r(pAe," (DeBERTa-v2 model)"),pAe.forEach(t),olr=i(W),YT=n(W,"LI",{});var _Ae=s(YT);Dhe=n(_Ae,"STRONG",{});var Oit=s(Dhe);rlr=r(Oit,"distilbert"),Oit.forEach(t),tlr=r(_Ae," \u2014 "),CG=n(_Ae,"A",{href:!0});var Xit=s(CG);alr=r(Xit,"TFDistilBertForSequenceClassification"),Xit.forEach(t),nlr=r(_Ae," (DistilBERT model)"),_Ae.forEach(t),slr=i(W),KT=n(W,"LI",{});var vAe=s(KT);jhe=n(vAe,"STRONG",{});var Vit=s(jhe);llr=r(Vit,"electra"),Vit.forEach(t),ilr=r(vAe," \u2014 "),MG=n(vAe,"A",{href:!0});var zit=s(MG);dlr=r(zit,"TFElectraForSequenceClassification"),zit.forEach(t),clr=r(vAe," (ELECTRA model)"),vAe.forEach(t),flr=i(W),ZT=n(W,"LI",{});var bAe=s(ZT);Nhe=n(bAe,"STRONG",{});var Wit=s(Nhe);mlr=r(Wit,"flaubert"),Wit.forEach(t),glr=r(bAe," \u2014 "),EG=n(bAe,"A",{href:!0});var Qit=s(EG);hlr=r(Qit,"TFFlaubertForSequenceClassification"),Qit.forEach(t),ulr=r(bAe," (FlauBERT model)"),bAe.forEach(t),plr=i(W),e7=n(W,"LI",{});var TAe=s(e7);qhe=n(TAe,"STRONG",{});var Hit=s(qhe);_lr=r(Hit,"funnel"),Hit.forEach(t),vlr=r(TAe," \u2014 "),yG=n(TAe,"A",{href:!0});var Uit=s(yG);blr=r(Uit,"TFFunnelForSequenceClassification"),Uit.forEach(t),Tlr=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),Flr=i(W),o7=n(W,"LI",{});var FAe=s(o7);Ghe=n(FAe,"STRONG",{});var Jit=s(Ghe);Clr=r(Jit,"gpt2"),Jit.forEach(t),Mlr=r(FAe," \u2014 "),wG=n(FAe,"A",{href:!0});var Yit=s(wG);Elr=r(Yit,"TFGPT2ForSequenceClassification"),Yit.forEach(t),ylr=r(FAe," (OpenAI GPT-2 model)"),FAe.forEach(t),wlr=i(W),r7=n(W,"LI",{});var CAe=s(r7);Ohe=n(CAe,"STRONG",{});var Kit=s(Ohe);Alr=r(Kit,"layoutlm"),Kit.forEach(t),Llr=r(CAe," \u2014 "),AG=n(CAe,"A",{href:!0});var Zit=s(AG);Blr=r(Zit,"TFLayoutLMForSequenceClassification"),Zit.forEach(t),xlr=r(CAe," (LayoutLM model)"),CAe.forEach(t),klr=i(W),t7=n(W,"LI",{});var MAe=s(t7);Xhe=n(MAe,"STRONG",{});var edt=s(Xhe);Rlr=r(edt,"longformer"),edt.forEach(t),Slr=r(MAe," \u2014 "),LG=n(MAe,"A",{href:!0});var odt=s(LG);Plr=r(odt,"TFLongformerForSequenceClassification"),odt.forEach(t),$lr=r(MAe," (Longformer model)"),MAe.forEach(t),Ilr=i(W),a7=n(W,"LI",{});var EAe=s(a7);Vhe=n(EAe,"STRONG",{});var rdt=s(Vhe);Dlr=r(rdt,"mobilebert"),rdt.forEach(t),jlr=r(EAe," \u2014 "),BG=n(EAe,"A",{href:!0});var tdt=s(BG);Nlr=r(tdt,"TFMobileBertForSequenceClassification"),tdt.forEach(t),qlr=r(EAe," (MobileBERT model)"),EAe.forEach(t),Glr=i(W),n7=n(W,"LI",{});var yAe=s(n7);zhe=n(yAe,"STRONG",{});var adt=s(zhe);Olr=r(adt,"mpnet"),adt.forEach(t),Xlr=r(yAe," \u2014 "),xG=n(yAe,"A",{href:!0});var ndt=s(xG);Vlr=r(ndt,"TFMPNetForSequenceClassification"),ndt.forEach(t),zlr=r(yAe," (MPNet model)"),yAe.forEach(t),Wlr=i(W),s7=n(W,"LI",{});var wAe=s(s7);Whe=n(wAe,"STRONG",{});var sdt=s(Whe);Qlr=r(sdt,"openai-gpt"),sdt.forEach(t),Hlr=r(wAe," \u2014 "),kG=n(wAe,"A",{href:!0});var ldt=s(kG);Ulr=r(ldt,"TFOpenAIGPTForSequenceClassification"),ldt.forEach(t),Jlr=r(wAe," (OpenAI GPT model)"),wAe.forEach(t),Ylr=i(W),l7=n(W,"LI",{});var AAe=s(l7);Qhe=n(AAe,"STRONG",{});var idt=s(Qhe);Klr=r(idt,"rembert"),idt.forEach(t),Zlr=r(AAe," \u2014 "),RG=n(AAe,"A",{href:!0});var ddt=s(RG);eir=r(ddt,"TFRemBertForSequenceClassification"),ddt.forEach(t),oir=r(AAe," (RemBERT model)"),AAe.forEach(t),rir=i(W),i7=n(W,"LI",{});var LAe=s(i7);Hhe=n(LAe,"STRONG",{});var cdt=s(Hhe);tir=r(cdt,"roberta"),cdt.forEach(t),air=r(LAe," \u2014 "),SG=n(LAe,"A",{href:!0});var fdt=s(SG);nir=r(fdt,"TFRobertaForSequenceClassification"),fdt.forEach(t),sir=r(LAe," (RoBERTa model)"),LAe.forEach(t),lir=i(W),d7=n(W,"LI",{});var BAe=s(d7);Uhe=n(BAe,"STRONG",{});var mdt=s(Uhe);iir=r(mdt,"roformer"),mdt.forEach(t),dir=r(BAe," \u2014 "),PG=n(BAe,"A",{href:!0});var gdt=s(PG);cir=r(gdt,"TFRoFormerForSequenceClassification"),gdt.forEach(t),fir=r(BAe," (RoFormer model)"),BAe.forEach(t),mir=i(W),c7=n(W,"LI",{});var xAe=s(c7);Jhe=n(xAe,"STRONG",{});var hdt=s(Jhe);gir=r(hdt,"tapas"),hdt.forEach(t),hir=r(xAe," \u2014 "),$G=n(xAe,"A",{href:!0});var udt=s($G);uir=r(udt,"TFTapasForSequenceClassification"),udt.forEach(t),pir=r(xAe," (TAPAS model)"),xAe.forEach(t),_ir=i(W),f7=n(W,"LI",{});var kAe=s(f7);Yhe=n(kAe,"STRONG",{});var pdt=s(Yhe);vir=r(pdt,"transfo-xl"),pdt.forEach(t),bir=r(kAe," \u2014 "),IG=n(kAe,"A",{href:!0});var _dt=s(IG);Tir=r(_dt,"TFTransfoXLForSequenceClassification"),_dt.forEach(t),Fir=r(kAe," (Transformer-XL model)"),kAe.forEach(t),Cir=i(W),m7=n(W,"LI",{});var RAe=s(m7);Khe=n(RAe,"STRONG",{});var vdt=s(Khe);Mir=r(vdt,"xlm"),vdt.forEach(t),Eir=r(RAe," \u2014 "),DG=n(RAe,"A",{href:!0});var bdt=s(DG);yir=r(bdt,"TFXLMForSequenceClassification"),bdt.forEach(t),wir=r(RAe," (XLM model)"),RAe.forEach(t),Air=i(W),g7=n(W,"LI",{});var SAe=s(g7);Zhe=n(SAe,"STRONG",{});var Tdt=s(Zhe);Lir=r(Tdt,"xlm-roberta"),Tdt.forEach(t),Bir=r(SAe," \u2014 "),jG=n(SAe,"A",{href:!0});var Fdt=s(jG);xir=r(Fdt,"TFXLMRobertaForSequenceClassification"),Fdt.forEach(t),kir=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),Rir=i(W),h7=n(W,"LI",{});var PAe=s(h7);eue=n(PAe,"STRONG",{});var Cdt=s(eue);Sir=r(Cdt,"xlnet"),Cdt.forEach(t),Pir=r(PAe," \u2014 "),NG=n(PAe,"A",{href:!0});var Mdt=s(NG);$ir=r(Mdt,"TFXLNetForSequenceClassification"),Mdt.forEach(t),Iir=r(PAe," (XLNet model)"),PAe.forEach(t),W.forEach(t),Dir=i(pa),oue=n(pa,"P",{});var Edt=s(oue);jir=r(Edt,"Examples:"),Edt.forEach(t),Nir=i(pa),m(zw.$$.fragment,pa),pa.forEach(t),Xl.forEach(t),OBe=i(c),Cc=n(c,"H2",{class:!0});var Kke=s(Cc);u7=n(Kke,"A",{id:!0,class:!0,href:!0});var ydt=s(u7);rue=n(ydt,"SPAN",{});var wdt=s(rue);m(Ww.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),qir=i(Kke),tue=n(Kke,"SPAN",{});var Adt=s(tue);Gir=r(Adt,"TFAutoModelForMultipleChoice"),Adt.forEach(t),Kke.forEach(t),XBe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(Qw.$$.fragment,zl),Oir=i(zl),Mc=n(zl,"P",{});var jz=s(Mc);Xir=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aue=n(jz,"CODE",{});var Ldt=s(aue);Vir=r(Ldt,"from_pretrained()"),Ldt.forEach(t),zir=r(jz,"class method or the "),nue=n(jz,"CODE",{});var Bdt=s(nue);Wir=r(Bdt,"from_config()"),Bdt.forEach(t),Qir=r(jz,`class
method.`),jz.forEach(t),Hir=i(zl),Hw=n(zl,"P",{});var Zke=s(Hw);Uir=r(Zke,"This class cannot be instantiated directly using "),sue=n(Zke,"CODE",{});var xdt=s(sue);Jir=r(xdt,"__init__()"),xdt.forEach(t),Yir=r(Zke," (throws an error)."),Zke.forEach(t),Kir=i(zl),ut=n(zl,"DIV",{class:!0});var Wl=s(ut);m(Uw.$$.fragment,Wl),Zir=i(Wl),lue=n(Wl,"P",{});var kdt=s(lue);edr=r(kdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kdt.forEach(t),odr=i(Wl),Ec=n(Wl,"P",{});var Nz=s(Ec);rdr=r(Nz,`Note:
Loading a model from its configuration file does `),iue=n(Nz,"STRONG",{});var Rdt=s(iue);tdr=r(Rdt,"not"),Rdt.forEach(t),adr=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),due=n(Nz,"CODE",{});var Sdt=s(due);ndr=r(Sdt,"from_pretrained()"),Sdt.forEach(t),sdr=r(Nz,"to load the model weights."),Nz.forEach(t),ldr=i(Wl),cue=n(Wl,"P",{});var Pdt=s(cue);idr=r(Pdt,"Examples:"),Pdt.forEach(t),ddr=i(Wl),m(Jw.$$.fragment,Wl),Wl.forEach(t),cdr=i(zl),To=n(zl,"DIV",{class:!0});var _a=s(To);m(Yw.$$.fragment,_a),fdr=i(_a),fue=n(_a,"P",{});var $dt=s(fue);mdr=r($dt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$dt.forEach(t),gdr=i(_a),_n=n(_a,"P",{});var tE=s(_n);hdr=r(tE,"The model class to instantiate is selected based on the "),mue=n(tE,"CODE",{});var Idt=s(mue);udr=r(Idt,"model_type"),Idt.forEach(t),pdr=r(tE,` property of the config object (either
passed as an argument or loaded from `),gue=n(tE,"CODE",{});var Ddt=s(gue);_dr=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),vdr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(tE,"CODE",{});var jdt=s(hue);bdr=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Tdr=r(tE,":"),tE.forEach(t),Fdr=i(_a),te=n(_a,"UL",{});var ne=s(te);p7=n(ne,"LI",{});var $Ae=s(p7);uue=n($Ae,"STRONG",{});var Ndt=s(uue);Cdr=r(Ndt,"albert"),Ndt.forEach(t),Mdr=r($Ae," \u2014 "),qG=n($Ae,"A",{href:!0});var qdt=s(qG);Edr=r(qdt,"TFAlbertForMultipleChoice"),qdt.forEach(t),ydr=r($Ae," (ALBERT model)"),$Ae.forEach(t),wdr=i(ne),_7=n(ne,"LI",{});var IAe=s(_7);pue=n(IAe,"STRONG",{});var Gdt=s(pue);Adr=r(Gdt,"bert"),Gdt.forEach(t),Ldr=r(IAe," \u2014 "),GG=n(IAe,"A",{href:!0});var Odt=s(GG);Bdr=r(Odt,"TFBertForMultipleChoice"),Odt.forEach(t),xdr=r(IAe," (BERT model)"),IAe.forEach(t),kdr=i(ne),v7=n(ne,"LI",{});var DAe=s(v7);_ue=n(DAe,"STRONG",{});var Xdt=s(_ue);Rdr=r(Xdt,"camembert"),Xdt.forEach(t),Sdr=r(DAe," \u2014 "),OG=n(DAe,"A",{href:!0});var Vdt=s(OG);Pdr=r(Vdt,"TFCamembertForMultipleChoice"),Vdt.forEach(t),$dr=r(DAe," (CamemBERT model)"),DAe.forEach(t),Idr=i(ne),b7=n(ne,"LI",{});var jAe=s(b7);vue=n(jAe,"STRONG",{});var zdt=s(vue);Ddr=r(zdt,"convbert"),zdt.forEach(t),jdr=r(jAe," \u2014 "),XG=n(jAe,"A",{href:!0});var Wdt=s(XG);Ndr=r(Wdt,"TFConvBertForMultipleChoice"),Wdt.forEach(t),qdr=r(jAe," (ConvBERT model)"),jAe.forEach(t),Gdr=i(ne),T7=n(ne,"LI",{});var NAe=s(T7);bue=n(NAe,"STRONG",{});var Qdt=s(bue);Odr=r(Qdt,"distilbert"),Qdt.forEach(t),Xdr=r(NAe," \u2014 "),VG=n(NAe,"A",{href:!0});var Hdt=s(VG);Vdr=r(Hdt,"TFDistilBertForMultipleChoice"),Hdt.forEach(t),zdr=r(NAe," (DistilBERT model)"),NAe.forEach(t),Wdr=i(ne),F7=n(ne,"LI",{});var qAe=s(F7);Tue=n(qAe,"STRONG",{});var Udt=s(Tue);Qdr=r(Udt,"electra"),Udt.forEach(t),Hdr=r(qAe," \u2014 "),zG=n(qAe,"A",{href:!0});var Jdt=s(zG);Udr=r(Jdt,"TFElectraForMultipleChoice"),Jdt.forEach(t),Jdr=r(qAe," (ELECTRA model)"),qAe.forEach(t),Ydr=i(ne),C7=n(ne,"LI",{});var GAe=s(C7);Fue=n(GAe,"STRONG",{});var Ydt=s(Fue);Kdr=r(Ydt,"flaubert"),Ydt.forEach(t),Zdr=r(GAe," \u2014 "),WG=n(GAe,"A",{href:!0});var Kdt=s(WG);ecr=r(Kdt,"TFFlaubertForMultipleChoice"),Kdt.forEach(t),ocr=r(GAe," (FlauBERT model)"),GAe.forEach(t),rcr=i(ne),M7=n(ne,"LI",{});var OAe=s(M7);Cue=n(OAe,"STRONG",{});var Zdt=s(Cue);tcr=r(Zdt,"funnel"),Zdt.forEach(t),acr=r(OAe," \u2014 "),QG=n(OAe,"A",{href:!0});var ect=s(QG);ncr=r(ect,"TFFunnelForMultipleChoice"),ect.forEach(t),scr=r(OAe," (Funnel Transformer model)"),OAe.forEach(t),lcr=i(ne),E7=n(ne,"LI",{});var XAe=s(E7);Mue=n(XAe,"STRONG",{});var oct=s(Mue);icr=r(oct,"longformer"),oct.forEach(t),dcr=r(XAe," \u2014 "),HG=n(XAe,"A",{href:!0});var rct=s(HG);ccr=r(rct,"TFLongformerForMultipleChoice"),rct.forEach(t),fcr=r(XAe," (Longformer model)"),XAe.forEach(t),mcr=i(ne),y7=n(ne,"LI",{});var VAe=s(y7);Eue=n(VAe,"STRONG",{});var tct=s(Eue);gcr=r(tct,"mobilebert"),tct.forEach(t),hcr=r(VAe," \u2014 "),UG=n(VAe,"A",{href:!0});var act=s(UG);ucr=r(act,"TFMobileBertForMultipleChoice"),act.forEach(t),pcr=r(VAe," (MobileBERT model)"),VAe.forEach(t),_cr=i(ne),w7=n(ne,"LI",{});var zAe=s(w7);yue=n(zAe,"STRONG",{});var nct=s(yue);vcr=r(nct,"mpnet"),nct.forEach(t),bcr=r(zAe," \u2014 "),JG=n(zAe,"A",{href:!0});var sct=s(JG);Tcr=r(sct,"TFMPNetForMultipleChoice"),sct.forEach(t),Fcr=r(zAe," (MPNet model)"),zAe.forEach(t),Ccr=i(ne),A7=n(ne,"LI",{});var WAe=s(A7);wue=n(WAe,"STRONG",{});var lct=s(wue);Mcr=r(lct,"rembert"),lct.forEach(t),Ecr=r(WAe," \u2014 "),YG=n(WAe,"A",{href:!0});var ict=s(YG);ycr=r(ict,"TFRemBertForMultipleChoice"),ict.forEach(t),wcr=r(WAe," (RemBERT model)"),WAe.forEach(t),Acr=i(ne),L7=n(ne,"LI",{});var QAe=s(L7);Aue=n(QAe,"STRONG",{});var dct=s(Aue);Lcr=r(dct,"roberta"),dct.forEach(t),Bcr=r(QAe," \u2014 "),KG=n(QAe,"A",{href:!0});var cct=s(KG);xcr=r(cct,"TFRobertaForMultipleChoice"),cct.forEach(t),kcr=r(QAe," (RoBERTa model)"),QAe.forEach(t),Rcr=i(ne),B7=n(ne,"LI",{});var HAe=s(B7);Lue=n(HAe,"STRONG",{});var fct=s(Lue);Scr=r(fct,"roformer"),fct.forEach(t),Pcr=r(HAe," \u2014 "),ZG=n(HAe,"A",{href:!0});var mct=s(ZG);$cr=r(mct,"TFRoFormerForMultipleChoice"),mct.forEach(t),Icr=r(HAe," (RoFormer model)"),HAe.forEach(t),Dcr=i(ne),x7=n(ne,"LI",{});var UAe=s(x7);Bue=n(UAe,"STRONG",{});var gct=s(Bue);jcr=r(gct,"xlm"),gct.forEach(t),Ncr=r(UAe," \u2014 "),eO=n(UAe,"A",{href:!0});var hct=s(eO);qcr=r(hct,"TFXLMForMultipleChoice"),hct.forEach(t),Gcr=r(UAe," (XLM model)"),UAe.forEach(t),Ocr=i(ne),k7=n(ne,"LI",{});var JAe=s(k7);xue=n(JAe,"STRONG",{});var uct=s(xue);Xcr=r(uct,"xlm-roberta"),uct.forEach(t),Vcr=r(JAe," \u2014 "),oO=n(JAe,"A",{href:!0});var pct=s(oO);zcr=r(pct,"TFXLMRobertaForMultipleChoice"),pct.forEach(t),Wcr=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),Qcr=i(ne),R7=n(ne,"LI",{});var YAe=s(R7);kue=n(YAe,"STRONG",{});var _ct=s(kue);Hcr=r(_ct,"xlnet"),_ct.forEach(t),Ucr=r(YAe," \u2014 "),rO=n(YAe,"A",{href:!0});var vct=s(rO);Jcr=r(vct,"TFXLNetForMultipleChoice"),vct.forEach(t),Ycr=r(YAe," (XLNet model)"),YAe.forEach(t),ne.forEach(t),Kcr=i(_a),Rue=n(_a,"P",{});var bct=s(Rue);Zcr=r(bct,"Examples:"),bct.forEach(t),efr=i(_a),m(Kw.$$.fragment,_a),_a.forEach(t),zl.forEach(t),VBe=i(c),yc=n(c,"H2",{class:!0});var eRe=s(yc);S7=n(eRe,"A",{id:!0,class:!0,href:!0});var Tct=s(S7);Sue=n(Tct,"SPAN",{});var Fct=s(Sue);m(Zw.$$.fragment,Fct),Fct.forEach(t),Tct.forEach(t),ofr=i(eRe),Pue=n(eRe,"SPAN",{});var Cct=s(Pue);rfr=r(Cct,"TFAutoModelForTableQuestionAnswering"),Cct.forEach(t),eRe.forEach(t),zBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(e6.$$.fragment,Ql),tfr=i(Ql),wc=n(Ql,"P",{});var qz=s(wc);afr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$ue=n(qz,"CODE",{});var Mct=s($ue);nfr=r(Mct,"from_pretrained()"),Mct.forEach(t),sfr=r(qz,"class method or the "),Iue=n(qz,"CODE",{});var Ect=s(Iue);lfr=r(Ect,"from_config()"),Ect.forEach(t),ifr=r(qz,`class
method.`),qz.forEach(t),dfr=i(Ql),o6=n(Ql,"P",{});var oRe=s(o6);cfr=r(oRe,"This class cannot be instantiated directly using "),Due=n(oRe,"CODE",{});var yct=s(Due);ffr=r(yct,"__init__()"),yct.forEach(t),mfr=r(oRe," (throws an error)."),oRe.forEach(t),gfr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m(r6.$$.fragment,Hl),hfr=i(Hl),jue=n(Hl,"P",{});var wct=s(jue);ufr=r(wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wct.forEach(t),pfr=i(Hl),Ac=n(Hl,"P",{});var Gz=s(Ac);_fr=r(Gz,`Note:
Loading a model from its configuration file does `),Nue=n(Gz,"STRONG",{});var Act=s(Nue);vfr=r(Act,"not"),Act.forEach(t),bfr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),que=n(Gz,"CODE",{});var Lct=s(que);Tfr=r(Lct,"from_pretrained()"),Lct.forEach(t),Ffr=r(Gz,"to load the model weights."),Gz.forEach(t),Cfr=i(Hl),Gue=n(Hl,"P",{});var Bct=s(Gue);Mfr=r(Bct,"Examples:"),Bct.forEach(t),Efr=i(Hl),m(t6.$$.fragment,Hl),Hl.forEach(t),yfr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var va=s(Fo);m(a6.$$.fragment,va),wfr=i(va),Oue=n(va,"P",{});var xct=s(Oue);Afr=r(xct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xct.forEach(t),Lfr=i(va),vn=n(va,"P",{});var aE=s(vn);Bfr=r(aE,"The model class to instantiate is selected based on the "),Xue=n(aE,"CODE",{});var kct=s(Xue);xfr=r(kct,"model_type"),kct.forEach(t),kfr=r(aE,` property of the config object (either
passed as an argument or loaded from `),Vue=n(aE,"CODE",{});var Rct=s(Vue);Rfr=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),Sfr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(aE,"CODE",{});var Sct=s(zue);Pfr=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),$fr=r(aE,":"),aE.forEach(t),Ifr=i(va),Wue=n(va,"UL",{});var Pct=s(Wue);P7=n(Pct,"LI",{});var KAe=s(P7);Que=n(KAe,"STRONG",{});var $ct=s(Que);Dfr=r($ct,"tapas"),$ct.forEach(t),jfr=r(KAe," \u2014 "),tO=n(KAe,"A",{href:!0});var Ict=s(tO);Nfr=r(Ict,"TFTapasForQuestionAnswering"),Ict.forEach(t),qfr=r(KAe," (TAPAS model)"),KAe.forEach(t),Pct.forEach(t),Gfr=i(va),Hue=n(va,"P",{});var Dct=s(Hue);Ofr=r(Dct,"Examples:"),Dct.forEach(t),Xfr=i(va),m(n6.$$.fragment,va),va.forEach(t),Ql.forEach(t),WBe=i(c),Lc=n(c,"H2",{class:!0});var rRe=s(Lc);$7=n(rRe,"A",{id:!0,class:!0,href:!0});var jct=s($7);Uue=n(jct,"SPAN",{});var Nct=s(Uue);m(s6.$$.fragment,Nct),Nct.forEach(t),jct.forEach(t),Vfr=i(rRe),Jue=n(rRe,"SPAN",{});var qct=s(Jue);zfr=r(qct,"TFAutoModelForTokenClassification"),qct.forEach(t),rRe.forEach(t),QBe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(l6.$$.fragment,Ul),Wfr=i(Ul),Bc=n(Ul,"P",{});var Oz=s(Bc);Qfr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Yue=n(Oz,"CODE",{});var Gct=s(Yue);Hfr=r(Gct,"from_pretrained()"),Gct.forEach(t),Ufr=r(Oz,"class method or the "),Kue=n(Oz,"CODE",{});var Oct=s(Kue);Jfr=r(Oct,"from_config()"),Oct.forEach(t),Yfr=r(Oz,`class
method.`),Oz.forEach(t),Kfr=i(Ul),i6=n(Ul,"P",{});var tRe=s(i6);Zfr=r(tRe,"This class cannot be instantiated directly using "),Zue=n(tRe,"CODE",{});var Xct=s(Zue);emr=r(Xct,"__init__()"),Xct.forEach(t),omr=r(tRe," (throws an error)."),tRe.forEach(t),rmr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(d6.$$.fragment,Jl),tmr=i(Jl),epe=n(Jl,"P",{});var Vct=s(epe);amr=r(Vct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vct.forEach(t),nmr=i(Jl),xc=n(Jl,"P",{});var Xz=s(xc);smr=r(Xz,`Note:
Loading a model from its configuration file does `),ope=n(Xz,"STRONG",{});var zct=s(ope);lmr=r(zct,"not"),zct.forEach(t),imr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),rpe=n(Xz,"CODE",{});var Wct=s(rpe);dmr=r(Wct,"from_pretrained()"),Wct.forEach(t),cmr=r(Xz,"to load the model weights."),Xz.forEach(t),fmr=i(Jl),tpe=n(Jl,"P",{});var Qct=s(tpe);mmr=r(Qct,"Examples:"),Qct.forEach(t),gmr=i(Jl),m(c6.$$.fragment,Jl),Jl.forEach(t),hmr=i(Ul),Co=n(Ul,"DIV",{class:!0});var ba=s(Co);m(f6.$$.fragment,ba),umr=i(ba),ape=n(ba,"P",{});var Hct=s(ape);pmr=r(Hct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hct.forEach(t),_mr=i(ba),bn=n(ba,"P",{});var nE=s(bn);vmr=r(nE,"The model class to instantiate is selected based on the "),npe=n(nE,"CODE",{});var Uct=s(npe);bmr=r(Uct,"model_type"),Uct.forEach(t),Tmr=r(nE,` property of the config object (either
passed as an argument or loaded from `),spe=n(nE,"CODE",{});var Jct=s(spe);Fmr=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),Cmr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(nE,"CODE",{});var Yct=s(lpe);Mmr=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),Emr=r(nE,":"),nE.forEach(t),ymr=i(ba),K=n(ba,"UL",{});var oe=s(K);I7=n(oe,"LI",{});var ZAe=s(I7);ipe=n(ZAe,"STRONG",{});var Kct=s(ipe);wmr=r(Kct,"albert"),Kct.forEach(t),Amr=r(ZAe," \u2014 "),aO=n(ZAe,"A",{href:!0});var Zct=s(aO);Lmr=r(Zct,"TFAlbertForTokenClassification"),Zct.forEach(t),Bmr=r(ZAe," (ALBERT model)"),ZAe.forEach(t),xmr=i(oe),D7=n(oe,"LI",{});var eLe=s(D7);dpe=n(eLe,"STRONG",{});var eft=s(dpe);kmr=r(eft,"bert"),eft.forEach(t),Rmr=r(eLe," \u2014 "),nO=n(eLe,"A",{href:!0});var oft=s(nO);Smr=r(oft,"TFBertForTokenClassification"),oft.forEach(t),Pmr=r(eLe," (BERT model)"),eLe.forEach(t),$mr=i(oe),j7=n(oe,"LI",{});var oLe=s(j7);cpe=n(oLe,"STRONG",{});var rft=s(cpe);Imr=r(rft,"camembert"),rft.forEach(t),Dmr=r(oLe," \u2014 "),sO=n(oLe,"A",{href:!0});var tft=s(sO);jmr=r(tft,"TFCamembertForTokenClassification"),tft.forEach(t),Nmr=r(oLe," (CamemBERT model)"),oLe.forEach(t),qmr=i(oe),N7=n(oe,"LI",{});var rLe=s(N7);fpe=n(rLe,"STRONG",{});var aft=s(fpe);Gmr=r(aft,"convbert"),aft.forEach(t),Omr=r(rLe," \u2014 "),lO=n(rLe,"A",{href:!0});var nft=s(lO);Xmr=r(nft,"TFConvBertForTokenClassification"),nft.forEach(t),Vmr=r(rLe," (ConvBERT model)"),rLe.forEach(t),zmr=i(oe),q7=n(oe,"LI",{});var tLe=s(q7);mpe=n(tLe,"STRONG",{});var sft=s(mpe);Wmr=r(sft,"deberta"),sft.forEach(t),Qmr=r(tLe," \u2014 "),iO=n(tLe,"A",{href:!0});var lft=s(iO);Hmr=r(lft,"TFDebertaForTokenClassification"),lft.forEach(t),Umr=r(tLe," (DeBERTa model)"),tLe.forEach(t),Jmr=i(oe),G7=n(oe,"LI",{});var aLe=s(G7);gpe=n(aLe,"STRONG",{});var ift=s(gpe);Ymr=r(ift,"deberta-v2"),ift.forEach(t),Kmr=r(aLe," \u2014 "),dO=n(aLe,"A",{href:!0});var dft=s(dO);Zmr=r(dft,"TFDebertaV2ForTokenClassification"),dft.forEach(t),egr=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),ogr=i(oe),O7=n(oe,"LI",{});var nLe=s(O7);hpe=n(nLe,"STRONG",{});var cft=s(hpe);rgr=r(cft,"distilbert"),cft.forEach(t),tgr=r(nLe," \u2014 "),cO=n(nLe,"A",{href:!0});var fft=s(cO);agr=r(fft,"TFDistilBertForTokenClassification"),fft.forEach(t),ngr=r(nLe," (DistilBERT model)"),nLe.forEach(t),sgr=i(oe),X7=n(oe,"LI",{});var sLe=s(X7);upe=n(sLe,"STRONG",{});var mft=s(upe);lgr=r(mft,"electra"),mft.forEach(t),igr=r(sLe," \u2014 "),fO=n(sLe,"A",{href:!0});var gft=s(fO);dgr=r(gft,"TFElectraForTokenClassification"),gft.forEach(t),cgr=r(sLe," (ELECTRA model)"),sLe.forEach(t),fgr=i(oe),V7=n(oe,"LI",{});var lLe=s(V7);ppe=n(lLe,"STRONG",{});var hft=s(ppe);mgr=r(hft,"flaubert"),hft.forEach(t),ggr=r(lLe," \u2014 "),mO=n(lLe,"A",{href:!0});var uft=s(mO);hgr=r(uft,"TFFlaubertForTokenClassification"),uft.forEach(t),ugr=r(lLe," (FlauBERT model)"),lLe.forEach(t),pgr=i(oe),z7=n(oe,"LI",{});var iLe=s(z7);_pe=n(iLe,"STRONG",{});var pft=s(_pe);_gr=r(pft,"funnel"),pft.forEach(t),vgr=r(iLe," \u2014 "),gO=n(iLe,"A",{href:!0});var _ft=s(gO);bgr=r(_ft,"TFFunnelForTokenClassification"),_ft.forEach(t),Tgr=r(iLe," (Funnel Transformer model)"),iLe.forEach(t),Fgr=i(oe),W7=n(oe,"LI",{});var dLe=s(W7);vpe=n(dLe,"STRONG",{});var vft=s(vpe);Cgr=r(vft,"layoutlm"),vft.forEach(t),Mgr=r(dLe," \u2014 "),hO=n(dLe,"A",{href:!0});var bft=s(hO);Egr=r(bft,"TFLayoutLMForTokenClassification"),bft.forEach(t),ygr=r(dLe," (LayoutLM model)"),dLe.forEach(t),wgr=i(oe),Q7=n(oe,"LI",{});var cLe=s(Q7);bpe=n(cLe,"STRONG",{});var Tft=s(bpe);Agr=r(Tft,"longformer"),Tft.forEach(t),Lgr=r(cLe," \u2014 "),uO=n(cLe,"A",{href:!0});var Fft=s(uO);Bgr=r(Fft,"TFLongformerForTokenClassification"),Fft.forEach(t),xgr=r(cLe," (Longformer model)"),cLe.forEach(t),kgr=i(oe),H7=n(oe,"LI",{});var fLe=s(H7);Tpe=n(fLe,"STRONG",{});var Cft=s(Tpe);Rgr=r(Cft,"mobilebert"),Cft.forEach(t),Sgr=r(fLe," \u2014 "),pO=n(fLe,"A",{href:!0});var Mft=s(pO);Pgr=r(Mft,"TFMobileBertForTokenClassification"),Mft.forEach(t),$gr=r(fLe," (MobileBERT model)"),fLe.forEach(t),Igr=i(oe),U7=n(oe,"LI",{});var mLe=s(U7);Fpe=n(mLe,"STRONG",{});var Eft=s(Fpe);Dgr=r(Eft,"mpnet"),Eft.forEach(t),jgr=r(mLe," \u2014 "),_O=n(mLe,"A",{href:!0});var yft=s(_O);Ngr=r(yft,"TFMPNetForTokenClassification"),yft.forEach(t),qgr=r(mLe," (MPNet model)"),mLe.forEach(t),Ggr=i(oe),J7=n(oe,"LI",{});var gLe=s(J7);Cpe=n(gLe,"STRONG",{});var wft=s(Cpe);Ogr=r(wft,"rembert"),wft.forEach(t),Xgr=r(gLe," \u2014 "),vO=n(gLe,"A",{href:!0});var Aft=s(vO);Vgr=r(Aft,"TFRemBertForTokenClassification"),Aft.forEach(t),zgr=r(gLe," (RemBERT model)"),gLe.forEach(t),Wgr=i(oe),Y7=n(oe,"LI",{});var hLe=s(Y7);Mpe=n(hLe,"STRONG",{});var Lft=s(Mpe);Qgr=r(Lft,"roberta"),Lft.forEach(t),Hgr=r(hLe," \u2014 "),bO=n(hLe,"A",{href:!0});var Bft=s(bO);Ugr=r(Bft,"TFRobertaForTokenClassification"),Bft.forEach(t),Jgr=r(hLe," (RoBERTa model)"),hLe.forEach(t),Ygr=i(oe),K7=n(oe,"LI",{});var uLe=s(K7);Epe=n(uLe,"STRONG",{});var xft=s(Epe);Kgr=r(xft,"roformer"),xft.forEach(t),Zgr=r(uLe," \u2014 "),TO=n(uLe,"A",{href:!0});var kft=s(TO);ehr=r(kft,"TFRoFormerForTokenClassification"),kft.forEach(t),ohr=r(uLe," (RoFormer model)"),uLe.forEach(t),rhr=i(oe),Z7=n(oe,"LI",{});var pLe=s(Z7);ype=n(pLe,"STRONG",{});var Rft=s(ype);thr=r(Rft,"xlm"),Rft.forEach(t),ahr=r(pLe," \u2014 "),FO=n(pLe,"A",{href:!0});var Sft=s(FO);nhr=r(Sft,"TFXLMForTokenClassification"),Sft.forEach(t),shr=r(pLe," (XLM model)"),pLe.forEach(t),lhr=i(oe),eF=n(oe,"LI",{});var _Le=s(eF);wpe=n(_Le,"STRONG",{});var Pft=s(wpe);ihr=r(Pft,"xlm-roberta"),Pft.forEach(t),dhr=r(_Le," \u2014 "),CO=n(_Le,"A",{href:!0});var $ft=s(CO);chr=r($ft,"TFXLMRobertaForTokenClassification"),$ft.forEach(t),fhr=r(_Le," (XLM-RoBERTa model)"),_Le.forEach(t),mhr=i(oe),oF=n(oe,"LI",{});var vLe=s(oF);Ape=n(vLe,"STRONG",{});var Ift=s(Ape);ghr=r(Ift,"xlnet"),Ift.forEach(t),hhr=r(vLe," \u2014 "),MO=n(vLe,"A",{href:!0});var Dft=s(MO);uhr=r(Dft,"TFXLNetForTokenClassification"),Dft.forEach(t),phr=r(vLe," (XLNet model)"),vLe.forEach(t),oe.forEach(t),_hr=i(ba),Lpe=n(ba,"P",{});var jft=s(Lpe);vhr=r(jft,"Examples:"),jft.forEach(t),bhr=i(ba),m(m6.$$.fragment,ba),ba.forEach(t),Ul.forEach(t),HBe=i(c),kc=n(c,"H2",{class:!0});var aRe=s(kc);rF=n(aRe,"A",{id:!0,class:!0,href:!0});var Nft=s(rF);Bpe=n(Nft,"SPAN",{});var qft=s(Bpe);m(g6.$$.fragment,qft),qft.forEach(t),Nft.forEach(t),Thr=i(aRe),xpe=n(aRe,"SPAN",{});var Gft=s(xpe);Fhr=r(Gft,"TFAutoModelForQuestionAnswering"),Gft.forEach(t),aRe.forEach(t),UBe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(h6.$$.fragment,Yl),Chr=i(Yl),Rc=n(Yl,"P",{});var Vz=s(Rc);Mhr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kpe=n(Vz,"CODE",{});var Oft=s(kpe);Ehr=r(Oft,"from_pretrained()"),Oft.forEach(t),yhr=r(Vz,"class method or the "),Rpe=n(Vz,"CODE",{});var Xft=s(Rpe);whr=r(Xft,"from_config()"),Xft.forEach(t),Ahr=r(Vz,`class
method.`),Vz.forEach(t),Lhr=i(Yl),u6=n(Yl,"P",{});var nRe=s(u6);Bhr=r(nRe,"This class cannot be instantiated directly using "),Spe=n(nRe,"CODE",{});var Vft=s(Spe);xhr=r(Vft,"__init__()"),Vft.forEach(t),khr=r(nRe," (throws an error)."),nRe.forEach(t),Rhr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(p6.$$.fragment,Kl),Shr=i(Kl),Ppe=n(Kl,"P",{});var zft=s(Ppe);Phr=r(zft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zft.forEach(t),$hr=i(Kl),Sc=n(Kl,"P",{});var zz=s(Sc);Ihr=r(zz,`Note:
Loading a model from its configuration file does `),$pe=n(zz,"STRONG",{});var Wft=s($pe);Dhr=r(Wft,"not"),Wft.forEach(t),jhr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=n(zz,"CODE",{});var Qft=s(Ipe);Nhr=r(Qft,"from_pretrained()"),Qft.forEach(t),qhr=r(zz,"to load the model weights."),zz.forEach(t),Ghr=i(Kl),Dpe=n(Kl,"P",{});var Hft=s(Dpe);Ohr=r(Hft,"Examples:"),Hft.forEach(t),Xhr=i(Kl),m(_6.$$.fragment,Kl),Kl.forEach(t),Vhr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(v6.$$.fragment,Ta),zhr=i(Ta),jpe=n(Ta,"P",{});var Uft=s(jpe);Whr=r(Uft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uft.forEach(t),Qhr=i(Ta),Tn=n(Ta,"P",{});var sE=s(Tn);Hhr=r(sE,"The model class to instantiate is selected based on the "),Npe=n(sE,"CODE",{});var Jft=s(Npe);Uhr=r(Jft,"model_type"),Jft.forEach(t),Jhr=r(sE,` property of the config object (either
passed as an argument or loaded from `),qpe=n(sE,"CODE",{});var Yft=s(qpe);Yhr=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),Khr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(sE,"CODE",{});var Kft=s(Gpe);Zhr=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),eur=r(sE,":"),sE.forEach(t),our=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);tF=n(re,"LI",{});var bLe=s(tF);Ope=n(bLe,"STRONG",{});var Zft=s(Ope);rur=r(Zft,"albert"),Zft.forEach(t),tur=r(bLe," \u2014 "),EO=n(bLe,"A",{href:!0});var emt=s(EO);aur=r(emt,"TFAlbertForQuestionAnswering"),emt.forEach(t),nur=r(bLe," (ALBERT model)"),bLe.forEach(t),sur=i(re),aF=n(re,"LI",{});var TLe=s(aF);Xpe=n(TLe,"STRONG",{});var omt=s(Xpe);lur=r(omt,"bert"),omt.forEach(t),iur=r(TLe," \u2014 "),yO=n(TLe,"A",{href:!0});var rmt=s(yO);dur=r(rmt,"TFBertForQuestionAnswering"),rmt.forEach(t),cur=r(TLe," (BERT model)"),TLe.forEach(t),fur=i(re),nF=n(re,"LI",{});var FLe=s(nF);Vpe=n(FLe,"STRONG",{});var tmt=s(Vpe);mur=r(tmt,"camembert"),tmt.forEach(t),gur=r(FLe," \u2014 "),wO=n(FLe,"A",{href:!0});var amt=s(wO);hur=r(amt,"TFCamembertForQuestionAnswering"),amt.forEach(t),uur=r(FLe," (CamemBERT model)"),FLe.forEach(t),pur=i(re),sF=n(re,"LI",{});var CLe=s(sF);zpe=n(CLe,"STRONG",{});var nmt=s(zpe);_ur=r(nmt,"convbert"),nmt.forEach(t),vur=r(CLe," \u2014 "),AO=n(CLe,"A",{href:!0});var smt=s(AO);bur=r(smt,"TFConvBertForQuestionAnswering"),smt.forEach(t),Tur=r(CLe," (ConvBERT model)"),CLe.forEach(t),Fur=i(re),lF=n(re,"LI",{});var MLe=s(lF);Wpe=n(MLe,"STRONG",{});var lmt=s(Wpe);Cur=r(lmt,"deberta"),lmt.forEach(t),Mur=r(MLe," \u2014 "),LO=n(MLe,"A",{href:!0});var imt=s(LO);Eur=r(imt,"TFDebertaForQuestionAnswering"),imt.forEach(t),yur=r(MLe," (DeBERTa model)"),MLe.forEach(t),wur=i(re),iF=n(re,"LI",{});var ELe=s(iF);Qpe=n(ELe,"STRONG",{});var dmt=s(Qpe);Aur=r(dmt,"deberta-v2"),dmt.forEach(t),Lur=r(ELe," \u2014 "),BO=n(ELe,"A",{href:!0});var cmt=s(BO);Bur=r(cmt,"TFDebertaV2ForQuestionAnswering"),cmt.forEach(t),xur=r(ELe," (DeBERTa-v2 model)"),ELe.forEach(t),kur=i(re),dF=n(re,"LI",{});var yLe=s(dF);Hpe=n(yLe,"STRONG",{});var fmt=s(Hpe);Rur=r(fmt,"distilbert"),fmt.forEach(t),Sur=r(yLe," \u2014 "),xO=n(yLe,"A",{href:!0});var mmt=s(xO);Pur=r(mmt,"TFDistilBertForQuestionAnswering"),mmt.forEach(t),$ur=r(yLe," (DistilBERT model)"),yLe.forEach(t),Iur=i(re),cF=n(re,"LI",{});var wLe=s(cF);Upe=n(wLe,"STRONG",{});var gmt=s(Upe);Dur=r(gmt,"electra"),gmt.forEach(t),jur=r(wLe," \u2014 "),kO=n(wLe,"A",{href:!0});var hmt=s(kO);Nur=r(hmt,"TFElectraForQuestionAnswering"),hmt.forEach(t),qur=r(wLe," (ELECTRA model)"),wLe.forEach(t),Gur=i(re),fF=n(re,"LI",{});var ALe=s(fF);Jpe=n(ALe,"STRONG",{});var umt=s(Jpe);Our=r(umt,"flaubert"),umt.forEach(t),Xur=r(ALe," \u2014 "),RO=n(ALe,"A",{href:!0});var pmt=s(RO);Vur=r(pmt,"TFFlaubertForQuestionAnsweringSimple"),pmt.forEach(t),zur=r(ALe," (FlauBERT model)"),ALe.forEach(t),Wur=i(re),mF=n(re,"LI",{});var LLe=s(mF);Ype=n(LLe,"STRONG",{});var _mt=s(Ype);Qur=r(_mt,"funnel"),_mt.forEach(t),Hur=r(LLe," \u2014 "),SO=n(LLe,"A",{href:!0});var vmt=s(SO);Uur=r(vmt,"TFFunnelForQuestionAnswering"),vmt.forEach(t),Jur=r(LLe," (Funnel Transformer model)"),LLe.forEach(t),Yur=i(re),gF=n(re,"LI",{});var BLe=s(gF);Kpe=n(BLe,"STRONG",{});var bmt=s(Kpe);Kur=r(bmt,"longformer"),bmt.forEach(t),Zur=r(BLe," \u2014 "),PO=n(BLe,"A",{href:!0});var Tmt=s(PO);epr=r(Tmt,"TFLongformerForQuestionAnswering"),Tmt.forEach(t),opr=r(BLe," (Longformer model)"),BLe.forEach(t),rpr=i(re),hF=n(re,"LI",{});var xLe=s(hF);Zpe=n(xLe,"STRONG",{});var Fmt=s(Zpe);tpr=r(Fmt,"mobilebert"),Fmt.forEach(t),apr=r(xLe," \u2014 "),$O=n(xLe,"A",{href:!0});var Cmt=s($O);npr=r(Cmt,"TFMobileBertForQuestionAnswering"),Cmt.forEach(t),spr=r(xLe," (MobileBERT model)"),xLe.forEach(t),lpr=i(re),uF=n(re,"LI",{});var kLe=s(uF);e_e=n(kLe,"STRONG",{});var Mmt=s(e_e);ipr=r(Mmt,"mpnet"),Mmt.forEach(t),dpr=r(kLe," \u2014 "),IO=n(kLe,"A",{href:!0});var Emt=s(IO);cpr=r(Emt,"TFMPNetForQuestionAnswering"),Emt.forEach(t),fpr=r(kLe," (MPNet model)"),kLe.forEach(t),mpr=i(re),pF=n(re,"LI",{});var RLe=s(pF);o_e=n(RLe,"STRONG",{});var ymt=s(o_e);gpr=r(ymt,"rembert"),ymt.forEach(t),hpr=r(RLe," \u2014 "),DO=n(RLe,"A",{href:!0});var wmt=s(DO);upr=r(wmt,"TFRemBertForQuestionAnswering"),wmt.forEach(t),ppr=r(RLe," (RemBERT model)"),RLe.forEach(t),_pr=i(re),_F=n(re,"LI",{});var SLe=s(_F);r_e=n(SLe,"STRONG",{});var Amt=s(r_e);vpr=r(Amt,"roberta"),Amt.forEach(t),bpr=r(SLe," \u2014 "),jO=n(SLe,"A",{href:!0});var Lmt=s(jO);Tpr=r(Lmt,"TFRobertaForQuestionAnswering"),Lmt.forEach(t),Fpr=r(SLe," (RoBERTa model)"),SLe.forEach(t),Cpr=i(re),vF=n(re,"LI",{});var PLe=s(vF);t_e=n(PLe,"STRONG",{});var Bmt=s(t_e);Mpr=r(Bmt,"roformer"),Bmt.forEach(t),Epr=r(PLe," \u2014 "),NO=n(PLe,"A",{href:!0});var xmt=s(NO);ypr=r(xmt,"TFRoFormerForQuestionAnswering"),xmt.forEach(t),wpr=r(PLe," (RoFormer model)"),PLe.forEach(t),Apr=i(re),bF=n(re,"LI",{});var $Le=s(bF);a_e=n($Le,"STRONG",{});var kmt=s(a_e);Lpr=r(kmt,"xlm"),kmt.forEach(t),Bpr=r($Le," \u2014 "),qO=n($Le,"A",{href:!0});var Rmt=s(qO);xpr=r(Rmt,"TFXLMForQuestionAnsweringSimple"),Rmt.forEach(t),kpr=r($Le," (XLM model)"),$Le.forEach(t),Rpr=i(re),TF=n(re,"LI",{});var ILe=s(TF);n_e=n(ILe,"STRONG",{});var Smt=s(n_e);Spr=r(Smt,"xlm-roberta"),Smt.forEach(t),Ppr=r(ILe," \u2014 "),GO=n(ILe,"A",{href:!0});var Pmt=s(GO);$pr=r(Pmt,"TFXLMRobertaForQuestionAnswering"),Pmt.forEach(t),Ipr=r(ILe," (XLM-RoBERTa model)"),ILe.forEach(t),Dpr=i(re),FF=n(re,"LI",{});var DLe=s(FF);s_e=n(DLe,"STRONG",{});var $mt=s(s_e);jpr=r($mt,"xlnet"),$mt.forEach(t),Npr=r(DLe," \u2014 "),OO=n(DLe,"A",{href:!0});var Imt=s(OO);qpr=r(Imt,"TFXLNetForQuestionAnsweringSimple"),Imt.forEach(t),Gpr=r(DLe," (XLNet model)"),DLe.forEach(t),re.forEach(t),Opr=i(Ta),l_e=n(Ta,"P",{});var Dmt=s(l_e);Xpr=r(Dmt,"Examples:"),Dmt.forEach(t),Vpr=i(Ta),m(b6.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var sRe=s(Pc);CF=n(sRe,"A",{id:!0,class:!0,href:!0});var jmt=s(CF);i_e=n(jmt,"SPAN",{});var Nmt=s(i_e);m(T6.$$.fragment,Nmt),Nmt.forEach(t),jmt.forEach(t),zpr=i(sRe),d_e=n(sRe,"SPAN",{});var qmt=s(d_e);Wpr=r(qmt,"TFAutoModelForVision2Seq"),qmt.forEach(t),sRe.forEach(t),YBe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(F6.$$.fragment,Zl),Qpr=i(Zl),$c=n(Zl,"P",{});var Wz=s($c);Hpr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),c_e=n(Wz,"CODE",{});var Gmt=s(c_e);Upr=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Jpr=r(Wz,"class method or the "),f_e=n(Wz,"CODE",{});var Omt=s(f_e);Ypr=r(Omt,"from_config()"),Omt.forEach(t),Kpr=r(Wz,`class
method.`),Wz.forEach(t),Zpr=i(Zl),C6=n(Zl,"P",{});var lRe=s(C6);e_r=r(lRe,"This class cannot be instantiated directly using "),m_e=n(lRe,"CODE",{});var Xmt=s(m_e);o_r=r(Xmt,"__init__()"),Xmt.forEach(t),r_r=r(lRe," (throws an error)."),lRe.forEach(t),t_r=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(M6.$$.fragment,ei),a_r=i(ei),g_e=n(ei,"P",{});var Vmt=s(g_e);n_r=r(Vmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vmt.forEach(t),s_r=i(ei),Ic=n(ei,"P",{});var Qz=s(Ic);l_r=r(Qz,`Note:
Loading a model from its configuration file does `),h_e=n(Qz,"STRONG",{});var zmt=s(h_e);i_r=r(zmt,"not"),zmt.forEach(t),d_r=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),u_e=n(Qz,"CODE",{});var Wmt=s(u_e);c_r=r(Wmt,"from_pretrained()"),Wmt.forEach(t),f_r=r(Qz,"to load the model weights."),Qz.forEach(t),m_r=i(ei),p_e=n(ei,"P",{});var Qmt=s(p_e);g_r=r(Qmt,"Examples:"),Qmt.forEach(t),h_r=i(ei),m(E6.$$.fragment,ei),ei.forEach(t),u_r=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(y6.$$.fragment,Fa),p_r=i(Fa),__e=n(Fa,"P",{});var Hmt=s(__e);__r=r(Hmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hmt.forEach(t),v_r=i(Fa),Fn=n(Fa,"P",{});var lE=s(Fn);b_r=r(lE,"The model class to instantiate is selected based on the "),v_e=n(lE,"CODE",{});var Umt=s(v_e);T_r=r(Umt,"model_type"),Umt.forEach(t),F_r=r(lE,` property of the config object (either
passed as an argument or loaded from `),b_e=n(lE,"CODE",{});var Jmt=s(b_e);C_r=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),M_r=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(lE,"CODE",{});var Ymt=s(T_e);E_r=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),y_r=r(lE,":"),lE.forEach(t),w_r=i(Fa),F_e=n(Fa,"UL",{});var Kmt=s(F_e);MF=n(Kmt,"LI",{});var jLe=s(MF);C_e=n(jLe,"STRONG",{});var Zmt=s(C_e);A_r=r(Zmt,"vision-encoder-decoder"),Zmt.forEach(t),L_r=r(jLe," \u2014 "),XO=n(jLe,"A",{href:!0});var egt=s(XO);B_r=r(egt,"TFVisionEncoderDecoderModel"),egt.forEach(t),x_r=r(jLe," (Vision Encoder decoder model)"),jLe.forEach(t),Kmt.forEach(t),k_r=i(Fa),M_e=n(Fa,"P",{});var ogt=s(M_e);R_r=r(ogt,"Examples:"),ogt.forEach(t),S_r=i(Fa),m(w6.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),KBe=i(c),Dc=n(c,"H2",{class:!0});var iRe=s(Dc);EF=n(iRe,"A",{id:!0,class:!0,href:!0});var rgt=s(EF);E_e=n(rgt,"SPAN",{});var tgt=s(E_e);m(A6.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),P_r=i(iRe),y_e=n(iRe,"SPAN",{});var agt=s(y_e);$_r=r(agt,"TFAutoModelForSpeechSeq2Seq"),agt.forEach(t),iRe.forEach(t),ZBe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(L6.$$.fragment,oi),I_r=i(oi),jc=n(oi,"P",{});var Hz=s(jc);D_r=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),w_e=n(Hz,"CODE",{});var ngt=s(w_e);j_r=r(ngt,"from_pretrained()"),ngt.forEach(t),N_r=r(Hz,"class method or the "),A_e=n(Hz,"CODE",{});var sgt=s(A_e);q_r=r(sgt,"from_config()"),sgt.forEach(t),G_r=r(Hz,`class
method.`),Hz.forEach(t),O_r=i(oi),B6=n(oi,"P",{});var dRe=s(B6);X_r=r(dRe,"This class cannot be instantiated directly using "),L_e=n(dRe,"CODE",{});var lgt=s(L_e);V_r=r(lgt,"__init__()"),lgt.forEach(t),z_r=r(dRe," (throws an error)."),dRe.forEach(t),W_r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(x6.$$.fragment,ri),Q_r=i(ri),B_e=n(ri,"P",{});var igt=s(B_e);H_r=r(igt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),igt.forEach(t),U_r=i(ri),Nc=n(ri,"P",{});var Uz=s(Nc);J_r=r(Uz,`Note:
Loading a model from its configuration file does `),x_e=n(Uz,"STRONG",{});var dgt=s(x_e);Y_r=r(dgt,"not"),dgt.forEach(t),K_r=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),k_e=n(Uz,"CODE",{});var cgt=s(k_e);Z_r=r(cgt,"from_pretrained()"),cgt.forEach(t),evr=r(Uz,"to load the model weights."),Uz.forEach(t),ovr=i(ri),R_e=n(ri,"P",{});var fgt=s(R_e);rvr=r(fgt,"Examples:"),fgt.forEach(t),tvr=i(ri),m(k6.$$.fragment,ri),ri.forEach(t),avr=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(R6.$$.fragment,Ca),nvr=i(Ca),S_e=n(Ca,"P",{});var mgt=s(S_e);svr=r(mgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mgt.forEach(t),lvr=i(Ca),Cn=n(Ca,"P",{});var iE=s(Cn);ivr=r(iE,"The model class to instantiate is selected based on the "),P_e=n(iE,"CODE",{});var ggt=s(P_e);dvr=r(ggt,"model_type"),ggt.forEach(t),cvr=r(iE,` property of the config object (either
passed as an argument or loaded from `),$_e=n(iE,"CODE",{});var hgt=s($_e);fvr=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),mvr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(iE,"CODE",{});var ugt=s(I_e);gvr=r(ugt,"pretrained_model_name_or_path"),ugt.forEach(t),hvr=r(iE,":"),iE.forEach(t),uvr=i(Ca),D_e=n(Ca,"UL",{});var pgt=s(D_e);yF=n(pgt,"LI",{});var NLe=s(yF);j_e=n(NLe,"STRONG",{});var _gt=s(j_e);pvr=r(_gt,"speech_to_text"),_gt.forEach(t),_vr=r(NLe," \u2014 "),VO=n(NLe,"A",{href:!0});var vgt=s(VO);vvr=r(vgt,"TFSpeech2TextForConditionalGeneration"),vgt.forEach(t),bvr=r(NLe," (Speech2Text model)"),NLe.forEach(t),pgt.forEach(t),Tvr=i(Ca),N_e=n(Ca,"P",{});var bgt=s(N_e);Fvr=r(bgt,"Examples:"),bgt.forEach(t),Cvr=i(Ca),m(S6.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),exe=i(c),qc=n(c,"H2",{class:!0});var cRe=s(qc);wF=n(cRe,"A",{id:!0,class:!0,href:!0});var Tgt=s(wF);q_e=n(Tgt,"SPAN",{});var Fgt=s(q_e);m(P6.$$.fragment,Fgt),Fgt.forEach(t),Tgt.forEach(t),Mvr=i(cRe),G_e=n(cRe,"SPAN",{});var Cgt=s(G_e);Evr=r(Cgt,"FlaxAutoModel"),Cgt.forEach(t),cRe.forEach(t),oxe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m($6.$$.fragment,ti),yvr=i(ti),Gc=n(ti,"P",{});var Jz=s(Gc);wvr=r(Jz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),O_e=n(Jz,"CODE",{});var Mgt=s(O_e);Avr=r(Mgt,"from_pretrained()"),Mgt.forEach(t),Lvr=r(Jz,"class method or the "),X_e=n(Jz,"CODE",{});var Egt=s(X_e);Bvr=r(Egt,"from_config()"),Egt.forEach(t),xvr=r(Jz,`class
method.`),Jz.forEach(t),kvr=i(ti),I6=n(ti,"P",{});var fRe=s(I6);Rvr=r(fRe,"This class cannot be instantiated directly using "),V_e=n(fRe,"CODE",{});var ygt=s(V_e);Svr=r(ygt,"__init__()"),ygt.forEach(t),Pvr=r(fRe," (throws an error)."),fRe.forEach(t),$vr=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(D6.$$.fragment,ai),Ivr=i(ai),z_e=n(ai,"P",{});var wgt=s(z_e);Dvr=r(wgt,"Instantiates one of the base model classes of the library from a configuration."),wgt.forEach(t),jvr=i(ai),Oc=n(ai,"P",{});var Yz=s(Oc);Nvr=r(Yz,`Note:
Loading a model from its configuration file does `),W_e=n(Yz,"STRONG",{});var Agt=s(W_e);qvr=r(Agt,"not"),Agt.forEach(t),Gvr=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q_e=n(Yz,"CODE",{});var Lgt=s(Q_e);Ovr=r(Lgt,"from_pretrained()"),Lgt.forEach(t),Xvr=r(Yz,"to load the model weights."),Yz.forEach(t),Vvr=i(ai),H_e=n(ai,"P",{});var Bgt=s(H_e);zvr=r(Bgt,"Examples:"),Bgt.forEach(t),Wvr=i(ai),m(j6.$$.fragment,ai),ai.forEach(t),Qvr=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(N6.$$.fragment,Ma),Hvr=i(Ma),U_e=n(Ma,"P",{});var xgt=s(U_e);Uvr=r(xgt,"Instantiate one of the base model classes of the library from a pretrained model."),xgt.forEach(t),Jvr=i(Ma),Mn=n(Ma,"P",{});var dE=s(Mn);Yvr=r(dE,"The model class to instantiate is selected based on the "),J_e=n(dE,"CODE",{});var kgt=s(J_e);Kvr=r(kgt,"model_type"),kgt.forEach(t),Zvr=r(dE,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(dE,"CODE",{});var Rgt=s(Y_e);e1r=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),o1r=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(dE,"CODE",{});var Sgt=s(K_e);r1r=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),t1r=r(dE,":"),dE.forEach(t),a1r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);AF=n(Q,"LI",{});var qLe=s(AF);Z_e=n(qLe,"STRONG",{});var Pgt=s(Z_e);n1r=r(Pgt,"albert"),Pgt.forEach(t),s1r=r(qLe," \u2014 "),zO=n(qLe,"A",{href:!0});var $gt=s(zO);l1r=r($gt,"FlaxAlbertModel"),$gt.forEach(t),i1r=r(qLe," (ALBERT model)"),qLe.forEach(t),d1r=i(Q),LF=n(Q,"LI",{});var GLe=s(LF);eve=n(GLe,"STRONG",{});var Igt=s(eve);c1r=r(Igt,"bart"),Igt.forEach(t),f1r=r(GLe," \u2014 "),WO=n(GLe,"A",{href:!0});var Dgt=s(WO);m1r=r(Dgt,"FlaxBartModel"),Dgt.forEach(t),g1r=r(GLe," (BART model)"),GLe.forEach(t),h1r=i(Q),BF=n(Q,"LI",{});var OLe=s(BF);ove=n(OLe,"STRONG",{});var jgt=s(ove);u1r=r(jgt,"beit"),jgt.forEach(t),p1r=r(OLe," \u2014 "),QO=n(OLe,"A",{href:!0});var Ngt=s(QO);_1r=r(Ngt,"FlaxBeitModel"),Ngt.forEach(t),v1r=r(OLe," (BEiT model)"),OLe.forEach(t),b1r=i(Q),xF=n(Q,"LI",{});var XLe=s(xF);rve=n(XLe,"STRONG",{});var qgt=s(rve);T1r=r(qgt,"bert"),qgt.forEach(t),F1r=r(XLe," \u2014 "),HO=n(XLe,"A",{href:!0});var Ggt=s(HO);C1r=r(Ggt,"FlaxBertModel"),Ggt.forEach(t),M1r=r(XLe," (BERT model)"),XLe.forEach(t),E1r=i(Q),kF=n(Q,"LI",{});var VLe=s(kF);tve=n(VLe,"STRONG",{});var Ogt=s(tve);y1r=r(Ogt,"big_bird"),Ogt.forEach(t),w1r=r(VLe," \u2014 "),UO=n(VLe,"A",{href:!0});var Xgt=s(UO);A1r=r(Xgt,"FlaxBigBirdModel"),Xgt.forEach(t),L1r=r(VLe," (BigBird model)"),VLe.forEach(t),B1r=i(Q),RF=n(Q,"LI",{});var zLe=s(RF);ave=n(zLe,"STRONG",{});var Vgt=s(ave);x1r=r(Vgt,"blenderbot"),Vgt.forEach(t),k1r=r(zLe," \u2014 "),JO=n(zLe,"A",{href:!0});var zgt=s(JO);R1r=r(zgt,"FlaxBlenderbotModel"),zgt.forEach(t),S1r=r(zLe," (Blenderbot model)"),zLe.forEach(t),P1r=i(Q),SF=n(Q,"LI",{});var WLe=s(SF);nve=n(WLe,"STRONG",{});var Wgt=s(nve);$1r=r(Wgt,"blenderbot-small"),Wgt.forEach(t),I1r=r(WLe," \u2014 "),YO=n(WLe,"A",{href:!0});var Qgt=s(YO);D1r=r(Qgt,"FlaxBlenderbotSmallModel"),Qgt.forEach(t),j1r=r(WLe," (BlenderbotSmall model)"),WLe.forEach(t),N1r=i(Q),PF=n(Q,"LI",{});var QLe=s(PF);sve=n(QLe,"STRONG",{});var Hgt=s(sve);q1r=r(Hgt,"clip"),Hgt.forEach(t),G1r=r(QLe," \u2014 "),KO=n(QLe,"A",{href:!0});var Ugt=s(KO);O1r=r(Ugt,"FlaxCLIPModel"),Ugt.forEach(t),X1r=r(QLe," (CLIP model)"),QLe.forEach(t),V1r=i(Q),$F=n(Q,"LI",{});var HLe=s($F);lve=n(HLe,"STRONG",{});var Jgt=s(lve);z1r=r(Jgt,"distilbert"),Jgt.forEach(t),W1r=r(HLe," \u2014 "),ZO=n(HLe,"A",{href:!0});var Ygt=s(ZO);Q1r=r(Ygt,"FlaxDistilBertModel"),Ygt.forEach(t),H1r=r(HLe," (DistilBERT model)"),HLe.forEach(t),U1r=i(Q),IF=n(Q,"LI",{});var ULe=s(IF);ive=n(ULe,"STRONG",{});var Kgt=s(ive);J1r=r(Kgt,"electra"),Kgt.forEach(t),Y1r=r(ULe," \u2014 "),eX=n(ULe,"A",{href:!0});var Zgt=s(eX);K1r=r(Zgt,"FlaxElectraModel"),Zgt.forEach(t),Z1r=r(ULe," (ELECTRA model)"),ULe.forEach(t),e4r=i(Q),DF=n(Q,"LI",{});var JLe=s(DF);dve=n(JLe,"STRONG",{});var eht=s(dve);o4r=r(eht,"gpt2"),eht.forEach(t),r4r=r(JLe," \u2014 "),oX=n(JLe,"A",{href:!0});var oht=s(oX);t4r=r(oht,"FlaxGPT2Model"),oht.forEach(t),a4r=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),n4r=i(Q),jF=n(Q,"LI",{});var YLe=s(jF);cve=n(YLe,"STRONG",{});var rht=s(cve);s4r=r(rht,"gpt_neo"),rht.forEach(t),l4r=r(YLe," \u2014 "),rX=n(YLe,"A",{href:!0});var tht=s(rX);i4r=r(tht,"FlaxGPTNeoModel"),tht.forEach(t),d4r=r(YLe," (GPT Neo model)"),YLe.forEach(t),c4r=i(Q),NF=n(Q,"LI",{});var KLe=s(NF);fve=n(KLe,"STRONG",{});var aht=s(fve);f4r=r(aht,"gptj"),aht.forEach(t),m4r=r(KLe," \u2014 "),tX=n(KLe,"A",{href:!0});var nht=s(tX);g4r=r(nht,"FlaxGPTJModel"),nht.forEach(t),h4r=r(KLe," (GPT-J model)"),KLe.forEach(t),u4r=i(Q),qF=n(Q,"LI",{});var ZLe=s(qF);mve=n(ZLe,"STRONG",{});var sht=s(mve);p4r=r(sht,"marian"),sht.forEach(t),_4r=r(ZLe," \u2014 "),aX=n(ZLe,"A",{href:!0});var lht=s(aX);v4r=r(lht,"FlaxMarianModel"),lht.forEach(t),b4r=r(ZLe," (Marian model)"),ZLe.forEach(t),T4r=i(Q),GF=n(Q,"LI",{});var e8e=s(GF);gve=n(e8e,"STRONG",{});var iht=s(gve);F4r=r(iht,"mbart"),iht.forEach(t),C4r=r(e8e," \u2014 "),nX=n(e8e,"A",{href:!0});var dht=s(nX);M4r=r(dht,"FlaxMBartModel"),dht.forEach(t),E4r=r(e8e," (mBART model)"),e8e.forEach(t),y4r=i(Q),OF=n(Q,"LI",{});var o8e=s(OF);hve=n(o8e,"STRONG",{});var cht=s(hve);w4r=r(cht,"mt5"),cht.forEach(t),A4r=r(o8e," \u2014 "),sX=n(o8e,"A",{href:!0});var fht=s(sX);L4r=r(fht,"FlaxMT5Model"),fht.forEach(t),B4r=r(o8e," (mT5 model)"),o8e.forEach(t),x4r=i(Q),XF=n(Q,"LI",{});var r8e=s(XF);uve=n(r8e,"STRONG",{});var mht=s(uve);k4r=r(mht,"pegasus"),mht.forEach(t),R4r=r(r8e," \u2014 "),lX=n(r8e,"A",{href:!0});var ght=s(lX);S4r=r(ght,"FlaxPegasusModel"),ght.forEach(t),P4r=r(r8e," (Pegasus model)"),r8e.forEach(t),$4r=i(Q),VF=n(Q,"LI",{});var t8e=s(VF);pve=n(t8e,"STRONG",{});var hht=s(pve);I4r=r(hht,"roberta"),hht.forEach(t),D4r=r(t8e," \u2014 "),iX=n(t8e,"A",{href:!0});var uht=s(iX);j4r=r(uht,"FlaxRobertaModel"),uht.forEach(t),N4r=r(t8e," (RoBERTa model)"),t8e.forEach(t),q4r=i(Q),zF=n(Q,"LI",{});var a8e=s(zF);_ve=n(a8e,"STRONG",{});var pht=s(_ve);G4r=r(pht,"roformer"),pht.forEach(t),O4r=r(a8e," \u2014 "),dX=n(a8e,"A",{href:!0});var _ht=s(dX);X4r=r(_ht,"FlaxRoFormerModel"),_ht.forEach(t),V4r=r(a8e," (RoFormer model)"),a8e.forEach(t),z4r=i(Q),WF=n(Q,"LI",{});var n8e=s(WF);vve=n(n8e,"STRONG",{});var vht=s(vve);W4r=r(vht,"t5"),vht.forEach(t),Q4r=r(n8e," \u2014 "),cX=n(n8e,"A",{href:!0});var bht=s(cX);H4r=r(bht,"FlaxT5Model"),bht.forEach(t),U4r=r(n8e," (T5 model)"),n8e.forEach(t),J4r=i(Q),QF=n(Q,"LI",{});var s8e=s(QF);bve=n(s8e,"STRONG",{});var Tht=s(bve);Y4r=r(Tht,"vision-text-dual-encoder"),Tht.forEach(t),K4r=r(s8e," \u2014 "),fX=n(s8e,"A",{href:!0});var Fht=s(fX);Z4r=r(Fht,"FlaxVisionTextDualEncoderModel"),Fht.forEach(t),ebr=r(s8e," (VisionTextDualEncoder model)"),s8e.forEach(t),obr=i(Q),HF=n(Q,"LI",{});var l8e=s(HF);Tve=n(l8e,"STRONG",{});var Cht=s(Tve);rbr=r(Cht,"vit"),Cht.forEach(t),tbr=r(l8e," \u2014 "),mX=n(l8e,"A",{href:!0});var Mht=s(mX);abr=r(Mht,"FlaxViTModel"),Mht.forEach(t),nbr=r(l8e," (ViT model)"),l8e.forEach(t),sbr=i(Q),UF=n(Q,"LI",{});var i8e=s(UF);Fve=n(i8e,"STRONG",{});var Eht=s(Fve);lbr=r(Eht,"wav2vec2"),Eht.forEach(t),ibr=r(i8e," \u2014 "),gX=n(i8e,"A",{href:!0});var yht=s(gX);dbr=r(yht,"FlaxWav2Vec2Model"),yht.forEach(t),cbr=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),fbr=i(Q),JF=n(Q,"LI",{});var d8e=s(JF);Cve=n(d8e,"STRONG",{});var wht=s(Cve);mbr=r(wht,"xglm"),wht.forEach(t),gbr=r(d8e," \u2014 "),hX=n(d8e,"A",{href:!0});var Aht=s(hX);hbr=r(Aht,"FlaxXGLMModel"),Aht.forEach(t),ubr=r(d8e," (XGLM model)"),d8e.forEach(t),Q.forEach(t),pbr=i(Ma),Mve=n(Ma,"P",{});var Lht=s(Mve);_br=r(Lht,"Examples:"),Lht.forEach(t),vbr=i(Ma),m(q6.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),rxe=i(c),Xc=n(c,"H2",{class:!0});var mRe=s(Xc);YF=n(mRe,"A",{id:!0,class:!0,href:!0});var Bht=s(YF);Eve=n(Bht,"SPAN",{});var xht=s(Eve);m(G6.$$.fragment,xht),xht.forEach(t),Bht.forEach(t),bbr=i(mRe),yve=n(mRe,"SPAN",{});var kht=s(yve);Tbr=r(kht,"FlaxAutoModelForCausalLM"),kht.forEach(t),mRe.forEach(t),txe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(O6.$$.fragment,ni),Fbr=i(ni),Vc=n(ni,"P",{});var Kz=s(Vc);Cbr=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wve=n(Kz,"CODE",{});var Rht=s(wve);Mbr=r(Rht,"from_pretrained()"),Rht.forEach(t),Ebr=r(Kz,"class method or the "),Ave=n(Kz,"CODE",{});var Sht=s(Ave);ybr=r(Sht,"from_config()"),Sht.forEach(t),wbr=r(Kz,`class
method.`),Kz.forEach(t),Abr=i(ni),X6=n(ni,"P",{});var gRe=s(X6);Lbr=r(gRe,"This class cannot be instantiated directly using "),Lve=n(gRe,"CODE",{});var Pht=s(Lve);Bbr=r(Pht,"__init__()"),Pht.forEach(t),xbr=r(gRe," (throws an error)."),gRe.forEach(t),kbr=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(V6.$$.fragment,si),Rbr=i(si),Bve=n(si,"P",{});var $ht=s(Bve);Sbr=r($ht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$ht.forEach(t),Pbr=i(si),zc=n(si,"P",{});var Zz=s(zc);$br=r(Zz,`Note:
Loading a model from its configuration file does `),xve=n(Zz,"STRONG",{});var Iht=s(xve);Ibr=r(Iht,"not"),Iht.forEach(t),Dbr=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kve=n(Zz,"CODE",{});var Dht=s(kve);jbr=r(Dht,"from_pretrained()"),Dht.forEach(t),Nbr=r(Zz,"to load the model weights."),Zz.forEach(t),qbr=i(si),Rve=n(si,"P",{});var jht=s(Rve);Gbr=r(jht,"Examples:"),jht.forEach(t),Obr=i(si),m(z6.$$.fragment,si),si.forEach(t),Xbr=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(W6.$$.fragment,Ea),Vbr=i(Ea),Sve=n(Ea,"P",{});var Nht=s(Sve);zbr=r(Nht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nht.forEach(t),Wbr=i(Ea),En=n(Ea,"P",{});var cE=s(En);Qbr=r(cE,"The model class to instantiate is selected based on the "),Pve=n(cE,"CODE",{});var qht=s(Pve);Hbr=r(qht,"model_type"),qht.forEach(t),Ubr=r(cE,` property of the config object (either
passed as an argument or loaded from `),$ve=n(cE,"CODE",{});var Ght=s($ve);Jbr=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),Ybr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(cE,"CODE",{});var Oht=s(Ive);Kbr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Zbr=r(cE,":"),cE.forEach(t),e2r=i(Ea),yn=n(Ea,"UL",{});var fE=s(yn);KF=n(fE,"LI",{});var c8e=s(KF);Dve=n(c8e,"STRONG",{});var Xht=s(Dve);o2r=r(Xht,"gpt2"),Xht.forEach(t),r2r=r(c8e," \u2014 "),uX=n(c8e,"A",{href:!0});var Vht=s(uX);t2r=r(Vht,"FlaxGPT2LMHeadModel"),Vht.forEach(t),a2r=r(c8e," (OpenAI GPT-2 model)"),c8e.forEach(t),n2r=i(fE),ZF=n(fE,"LI",{});var f8e=s(ZF);jve=n(f8e,"STRONG",{});var zht=s(jve);s2r=r(zht,"gpt_neo"),zht.forEach(t),l2r=r(f8e," \u2014 "),pX=n(f8e,"A",{href:!0});var Wht=s(pX);i2r=r(Wht,"FlaxGPTNeoForCausalLM"),Wht.forEach(t),d2r=r(f8e," (GPT Neo model)"),f8e.forEach(t),c2r=i(fE),eC=n(fE,"LI",{});var m8e=s(eC);Nve=n(m8e,"STRONG",{});var Qht=s(Nve);f2r=r(Qht,"gptj"),Qht.forEach(t),m2r=r(m8e," \u2014 "),_X=n(m8e,"A",{href:!0});var Hht=s(_X);g2r=r(Hht,"FlaxGPTJForCausalLM"),Hht.forEach(t),h2r=r(m8e," (GPT-J model)"),m8e.forEach(t),u2r=i(fE),oC=n(fE,"LI",{});var g8e=s(oC);qve=n(g8e,"STRONG",{});var Uht=s(qve);p2r=r(Uht,"xglm"),Uht.forEach(t),_2r=r(g8e," \u2014 "),vX=n(g8e,"A",{href:!0});var Jht=s(vX);v2r=r(Jht,"FlaxXGLMForCausalLM"),Jht.forEach(t),b2r=r(g8e," (XGLM model)"),g8e.forEach(t),fE.forEach(t),T2r=i(Ea),Gve=n(Ea,"P",{});var Yht=s(Gve);F2r=r(Yht,"Examples:"),Yht.forEach(t),C2r=i(Ea),m(Q6.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),axe=i(c),Wc=n(c,"H2",{class:!0});var hRe=s(Wc);rC=n(hRe,"A",{id:!0,class:!0,href:!0});var Kht=s(rC);Ove=n(Kht,"SPAN",{});var Zht=s(Ove);m(H6.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),M2r=i(hRe),Xve=n(hRe,"SPAN",{});var eut=s(Xve);E2r=r(eut,"FlaxAutoModelForPreTraining"),eut.forEach(t),hRe.forEach(t),nxe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(U6.$$.fragment,li),y2r=i(li),Qc=n(li,"P",{});var eW=s(Qc);w2r=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vve=n(eW,"CODE",{});var out=s(Vve);A2r=r(out,"from_pretrained()"),out.forEach(t),L2r=r(eW,"class method or the "),zve=n(eW,"CODE",{});var rut=s(zve);B2r=r(rut,"from_config()"),rut.forEach(t),x2r=r(eW,`class
method.`),eW.forEach(t),k2r=i(li),J6=n(li,"P",{});var uRe=s(J6);R2r=r(uRe,"This class cannot be instantiated directly using "),Wve=n(uRe,"CODE",{});var tut=s(Wve);S2r=r(tut,"__init__()"),tut.forEach(t),P2r=r(uRe," (throws an error)."),uRe.forEach(t),$2r=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(Y6.$$.fragment,ii),I2r=i(ii),Qve=n(ii,"P",{});var aut=s(Qve);D2r=r(aut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aut.forEach(t),j2r=i(ii),Hc=n(ii,"P",{});var oW=s(Hc);N2r=r(oW,`Note:
Loading a model from its configuration file does `),Hve=n(oW,"STRONG",{});var nut=s(Hve);q2r=r(nut,"not"),nut.forEach(t),G2r=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uve=n(oW,"CODE",{});var sut=s(Uve);O2r=r(sut,"from_pretrained()"),sut.forEach(t),X2r=r(oW,"to load the model weights."),oW.forEach(t),V2r=i(ii),Jve=n(ii,"P",{});var lut=s(Jve);z2r=r(lut,"Examples:"),lut.forEach(t),W2r=i(ii),m(K6.$$.fragment,ii),ii.forEach(t),Q2r=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(Z6.$$.fragment,ya),H2r=i(ya),Yve=n(ya,"P",{});var iut=s(Yve);U2r=r(iut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iut.forEach(t),J2r=i(ya),wn=n(ya,"P",{});var mE=s(wn);Y2r=r(mE,"The model class to instantiate is selected based on the "),Kve=n(mE,"CODE",{});var dut=s(Kve);K2r=r(dut,"model_type"),dut.forEach(t),Z2r=r(mE,` property of the config object (either
passed as an argument or loaded from `),Zve=n(mE,"CODE",{});var cut=s(Zve);e0r=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),o0r=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(mE,"CODE",{});var fut=s(e1e);r0r=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),t0r=r(mE,":"),mE.forEach(t),a0r=i(ya),fe=n(ya,"UL",{});var pe=s(fe);tC=n(pe,"LI",{});var h8e=s(tC);o1e=n(h8e,"STRONG",{});var mut=s(o1e);n0r=r(mut,"albert"),mut.forEach(t),s0r=r(h8e," \u2014 "),bX=n(h8e,"A",{href:!0});var gut=s(bX);l0r=r(gut,"FlaxAlbertForPreTraining"),gut.forEach(t),i0r=r(h8e," (ALBERT model)"),h8e.forEach(t),d0r=i(pe),aC=n(pe,"LI",{});var u8e=s(aC);r1e=n(u8e,"STRONG",{});var hut=s(r1e);c0r=r(hut,"bart"),hut.forEach(t),f0r=r(u8e," \u2014 "),TX=n(u8e,"A",{href:!0});var uut=s(TX);m0r=r(uut,"FlaxBartForConditionalGeneration"),uut.forEach(t),g0r=r(u8e," (BART model)"),u8e.forEach(t),h0r=i(pe),nC=n(pe,"LI",{});var p8e=s(nC);t1e=n(p8e,"STRONG",{});var put=s(t1e);u0r=r(put,"bert"),put.forEach(t),p0r=r(p8e," \u2014 "),FX=n(p8e,"A",{href:!0});var _ut=s(FX);_0r=r(_ut,"FlaxBertForPreTraining"),_ut.forEach(t),v0r=r(p8e," (BERT model)"),p8e.forEach(t),b0r=i(pe),sC=n(pe,"LI",{});var _8e=s(sC);a1e=n(_8e,"STRONG",{});var vut=s(a1e);T0r=r(vut,"big_bird"),vut.forEach(t),F0r=r(_8e," \u2014 "),CX=n(_8e,"A",{href:!0});var but=s(CX);C0r=r(but,"FlaxBigBirdForPreTraining"),but.forEach(t),M0r=r(_8e," (BigBird model)"),_8e.forEach(t),E0r=i(pe),lC=n(pe,"LI",{});var v8e=s(lC);n1e=n(v8e,"STRONG",{});var Tut=s(n1e);y0r=r(Tut,"electra"),Tut.forEach(t),w0r=r(v8e," \u2014 "),MX=n(v8e,"A",{href:!0});var Fut=s(MX);A0r=r(Fut,"FlaxElectraForPreTraining"),Fut.forEach(t),L0r=r(v8e," (ELECTRA model)"),v8e.forEach(t),B0r=i(pe),iC=n(pe,"LI",{});var b8e=s(iC);s1e=n(b8e,"STRONG",{});var Cut=s(s1e);x0r=r(Cut,"mbart"),Cut.forEach(t),k0r=r(b8e," \u2014 "),EX=n(b8e,"A",{href:!0});var Mut=s(EX);R0r=r(Mut,"FlaxMBartForConditionalGeneration"),Mut.forEach(t),S0r=r(b8e," (mBART model)"),b8e.forEach(t),P0r=i(pe),dC=n(pe,"LI",{});var T8e=s(dC);l1e=n(T8e,"STRONG",{});var Eut=s(l1e);$0r=r(Eut,"mt5"),Eut.forEach(t),I0r=r(T8e," \u2014 "),yX=n(T8e,"A",{href:!0});var yut=s(yX);D0r=r(yut,"FlaxMT5ForConditionalGeneration"),yut.forEach(t),j0r=r(T8e," (mT5 model)"),T8e.forEach(t),N0r=i(pe),cC=n(pe,"LI",{});var F8e=s(cC);i1e=n(F8e,"STRONG",{});var wut=s(i1e);q0r=r(wut,"roberta"),wut.forEach(t),G0r=r(F8e," \u2014 "),wX=n(F8e,"A",{href:!0});var Aut=s(wX);O0r=r(Aut,"FlaxRobertaForMaskedLM"),Aut.forEach(t),X0r=r(F8e," (RoBERTa model)"),F8e.forEach(t),V0r=i(pe),fC=n(pe,"LI",{});var C8e=s(fC);d1e=n(C8e,"STRONG",{});var Lut=s(d1e);z0r=r(Lut,"roformer"),Lut.forEach(t),W0r=r(C8e," \u2014 "),AX=n(C8e,"A",{href:!0});var But=s(AX);Q0r=r(But,"FlaxRoFormerForMaskedLM"),But.forEach(t),H0r=r(C8e," (RoFormer model)"),C8e.forEach(t),U0r=i(pe),mC=n(pe,"LI",{});var M8e=s(mC);c1e=n(M8e,"STRONG",{});var xut=s(c1e);J0r=r(xut,"t5"),xut.forEach(t),Y0r=r(M8e," \u2014 "),LX=n(M8e,"A",{href:!0});var kut=s(LX);K0r=r(kut,"FlaxT5ForConditionalGeneration"),kut.forEach(t),Z0r=r(M8e," (T5 model)"),M8e.forEach(t),eTr=i(pe),gC=n(pe,"LI",{});var E8e=s(gC);f1e=n(E8e,"STRONG",{});var Rut=s(f1e);oTr=r(Rut,"wav2vec2"),Rut.forEach(t),rTr=r(E8e," \u2014 "),BX=n(E8e,"A",{href:!0});var Sut=s(BX);tTr=r(Sut,"FlaxWav2Vec2ForPreTraining"),Sut.forEach(t),aTr=r(E8e," (Wav2Vec2 model)"),E8e.forEach(t),pe.forEach(t),nTr=i(ya),m1e=n(ya,"P",{});var Put=s(m1e);sTr=r(Put,"Examples:"),Put.forEach(t),lTr=i(ya),m(eA.$$.fragment,ya),ya.forEach(t),li.forEach(t),sxe=i(c),Uc=n(c,"H2",{class:!0});var pRe=s(Uc);hC=n(pRe,"A",{id:!0,class:!0,href:!0});var $ut=s(hC);g1e=n($ut,"SPAN",{});var Iut=s(g1e);m(oA.$$.fragment,Iut),Iut.forEach(t),$ut.forEach(t),iTr=i(pRe),h1e=n(pRe,"SPAN",{});var Dut=s(h1e);dTr=r(Dut,"FlaxAutoModelForMaskedLM"),Dut.forEach(t),pRe.forEach(t),lxe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(rA.$$.fragment,di),cTr=i(di),Jc=n(di,"P",{});var rW=s(Jc);fTr=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),u1e=n(rW,"CODE",{});var jut=s(u1e);mTr=r(jut,"from_pretrained()"),jut.forEach(t),gTr=r(rW,"class method or the "),p1e=n(rW,"CODE",{});var Nut=s(p1e);hTr=r(Nut,"from_config()"),Nut.forEach(t),uTr=r(rW,`class
method.`),rW.forEach(t),pTr=i(di),tA=n(di,"P",{});var _Re=s(tA);_Tr=r(_Re,"This class cannot be instantiated directly using "),_1e=n(_Re,"CODE",{});var qut=s(_1e);vTr=r(qut,"__init__()"),qut.forEach(t),bTr=r(_Re," (throws an error)."),_Re.forEach(t),TTr=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(aA.$$.fragment,ci),FTr=i(ci),v1e=n(ci,"P",{});var Gut=s(v1e);CTr=r(Gut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gut.forEach(t),MTr=i(ci),Yc=n(ci,"P",{});var tW=s(Yc);ETr=r(tW,`Note:
Loading a model from its configuration file does `),b1e=n(tW,"STRONG",{});var Out=s(b1e);yTr=r(Out,"not"),Out.forEach(t),wTr=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),T1e=n(tW,"CODE",{});var Xut=s(T1e);ATr=r(Xut,"from_pretrained()"),Xut.forEach(t),LTr=r(tW,"to load the model weights."),tW.forEach(t),BTr=i(ci),F1e=n(ci,"P",{});var Vut=s(F1e);xTr=r(Vut,"Examples:"),Vut.forEach(t),kTr=i(ci),m(nA.$$.fragment,ci),ci.forEach(t),RTr=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(sA.$$.fragment,wa),STr=i(wa),C1e=n(wa,"P",{});var zut=s(C1e);PTr=r(zut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zut.forEach(t),$Tr=i(wa),An=n(wa,"P",{});var gE=s(An);ITr=r(gE,"The model class to instantiate is selected based on the "),M1e=n(gE,"CODE",{});var Wut=s(M1e);DTr=r(Wut,"model_type"),Wut.forEach(t),jTr=r(gE,` property of the config object (either
passed as an argument or loaded from `),E1e=n(gE,"CODE",{});var Qut=s(E1e);NTr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),qTr=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(gE,"CODE",{});var Hut=s(y1e);GTr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),OTr=r(gE,":"),gE.forEach(t),XTr=i(wa),be=n(wa,"UL",{});var oo=s(be);uC=n(oo,"LI",{});var y8e=s(uC);w1e=n(y8e,"STRONG",{});var Uut=s(w1e);VTr=r(Uut,"albert"),Uut.forEach(t),zTr=r(y8e," \u2014 "),xX=n(y8e,"A",{href:!0});var Jut=s(xX);WTr=r(Jut,"FlaxAlbertForMaskedLM"),Jut.forEach(t),QTr=r(y8e," (ALBERT model)"),y8e.forEach(t),HTr=i(oo),pC=n(oo,"LI",{});var w8e=s(pC);A1e=n(w8e,"STRONG",{});var Yut=s(A1e);UTr=r(Yut,"bart"),Yut.forEach(t),JTr=r(w8e," \u2014 "),kX=n(w8e,"A",{href:!0});var Kut=s(kX);YTr=r(Kut,"FlaxBartForConditionalGeneration"),Kut.forEach(t),KTr=r(w8e," (BART model)"),w8e.forEach(t),ZTr=i(oo),_C=n(oo,"LI",{});var A8e=s(_C);L1e=n(A8e,"STRONG",{});var Zut=s(L1e);e7r=r(Zut,"bert"),Zut.forEach(t),o7r=r(A8e," \u2014 "),RX=n(A8e,"A",{href:!0});var ept=s(RX);r7r=r(ept,"FlaxBertForMaskedLM"),ept.forEach(t),t7r=r(A8e," (BERT model)"),A8e.forEach(t),a7r=i(oo),vC=n(oo,"LI",{});var L8e=s(vC);B1e=n(L8e,"STRONG",{});var opt=s(B1e);n7r=r(opt,"big_bird"),opt.forEach(t),s7r=r(L8e," \u2014 "),SX=n(L8e,"A",{href:!0});var rpt=s(SX);l7r=r(rpt,"FlaxBigBirdForMaskedLM"),rpt.forEach(t),i7r=r(L8e," (BigBird model)"),L8e.forEach(t),d7r=i(oo),bC=n(oo,"LI",{});var B8e=s(bC);x1e=n(B8e,"STRONG",{});var tpt=s(x1e);c7r=r(tpt,"distilbert"),tpt.forEach(t),f7r=r(B8e," \u2014 "),PX=n(B8e,"A",{href:!0});var apt=s(PX);m7r=r(apt,"FlaxDistilBertForMaskedLM"),apt.forEach(t),g7r=r(B8e," (DistilBERT model)"),B8e.forEach(t),h7r=i(oo),TC=n(oo,"LI",{});var x8e=s(TC);k1e=n(x8e,"STRONG",{});var npt=s(k1e);u7r=r(npt,"electra"),npt.forEach(t),p7r=r(x8e," \u2014 "),$X=n(x8e,"A",{href:!0});var spt=s($X);_7r=r(spt,"FlaxElectraForMaskedLM"),spt.forEach(t),v7r=r(x8e," (ELECTRA model)"),x8e.forEach(t),b7r=i(oo),FC=n(oo,"LI",{});var k8e=s(FC);R1e=n(k8e,"STRONG",{});var lpt=s(R1e);T7r=r(lpt,"mbart"),lpt.forEach(t),F7r=r(k8e," \u2014 "),IX=n(k8e,"A",{href:!0});var ipt=s(IX);C7r=r(ipt,"FlaxMBartForConditionalGeneration"),ipt.forEach(t),M7r=r(k8e," (mBART model)"),k8e.forEach(t),E7r=i(oo),CC=n(oo,"LI",{});var R8e=s(CC);S1e=n(R8e,"STRONG",{});var dpt=s(S1e);y7r=r(dpt,"roberta"),dpt.forEach(t),w7r=r(R8e," \u2014 "),DX=n(R8e,"A",{href:!0});var cpt=s(DX);A7r=r(cpt,"FlaxRobertaForMaskedLM"),cpt.forEach(t),L7r=r(R8e," (RoBERTa model)"),R8e.forEach(t),B7r=i(oo),MC=n(oo,"LI",{});var S8e=s(MC);P1e=n(S8e,"STRONG",{});var fpt=s(P1e);x7r=r(fpt,"roformer"),fpt.forEach(t),k7r=r(S8e," \u2014 "),jX=n(S8e,"A",{href:!0});var mpt=s(jX);R7r=r(mpt,"FlaxRoFormerForMaskedLM"),mpt.forEach(t),S7r=r(S8e," (RoFormer model)"),S8e.forEach(t),oo.forEach(t),P7r=i(wa),$1e=n(wa,"P",{});var gpt=s($1e);$7r=r(gpt,"Examples:"),gpt.forEach(t),I7r=i(wa),m(lA.$$.fragment,wa),wa.forEach(t),di.forEach(t),ixe=i(c),Kc=n(c,"H2",{class:!0});var vRe=s(Kc);EC=n(vRe,"A",{id:!0,class:!0,href:!0});var hpt=s(EC);I1e=n(hpt,"SPAN",{});var upt=s(I1e);m(iA.$$.fragment,upt),upt.forEach(t),hpt.forEach(t),D7r=i(vRe),D1e=n(vRe,"SPAN",{});var ppt=s(D1e);j7r=r(ppt,"FlaxAutoModelForSeq2SeqLM"),ppt.forEach(t),vRe.forEach(t),dxe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(dA.$$.fragment,fi),N7r=i(fi),Zc=n(fi,"P",{});var aW=s(Zc);q7r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j1e=n(aW,"CODE",{});var _pt=s(j1e);G7r=r(_pt,"from_pretrained()"),_pt.forEach(t),O7r=r(aW,"class method or the "),N1e=n(aW,"CODE",{});var vpt=s(N1e);X7r=r(vpt,"from_config()"),vpt.forEach(t),V7r=r(aW,`class
method.`),aW.forEach(t),z7r=i(fi),cA=n(fi,"P",{});var bRe=s(cA);W7r=r(bRe,"This class cannot be instantiated directly using "),q1e=n(bRe,"CODE",{});var bpt=s(q1e);Q7r=r(bpt,"__init__()"),bpt.forEach(t),H7r=r(bRe," (throws an error)."),bRe.forEach(t),U7r=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(fA.$$.fragment,mi),J7r=i(mi),G1e=n(mi,"P",{});var Tpt=s(G1e);Y7r=r(Tpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tpt.forEach(t),K7r=i(mi),ef=n(mi,"P",{});var nW=s(ef);Z7r=r(nW,`Note:
Loading a model from its configuration file does `),O1e=n(nW,"STRONG",{});var Fpt=s(O1e);eFr=r(Fpt,"not"),Fpt.forEach(t),oFr=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=n(nW,"CODE",{});var Cpt=s(X1e);rFr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),tFr=r(nW,"to load the model weights."),nW.forEach(t),aFr=i(mi),V1e=n(mi,"P",{});var Mpt=s(V1e);nFr=r(Mpt,"Examples:"),Mpt.forEach(t),sFr=i(mi),m(mA.$$.fragment,mi),mi.forEach(t),lFr=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(gA.$$.fragment,Aa),iFr=i(Aa),z1e=n(Aa,"P",{});var Ept=s(z1e);dFr=r(Ept,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ept.forEach(t),cFr=i(Aa),Ln=n(Aa,"P",{});var hE=s(Ln);fFr=r(hE,"The model class to instantiate is selected based on the "),W1e=n(hE,"CODE",{});var ypt=s(W1e);mFr=r(ypt,"model_type"),ypt.forEach(t),gFr=r(hE,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(hE,"CODE",{});var wpt=s(Q1e);hFr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),uFr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(hE,"CODE",{});var Apt=s(H1e);pFr=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),_Fr=r(hE,":"),hE.forEach(t),vFr=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);yC=n(ro,"LI",{});var P8e=s(yC);U1e=n(P8e,"STRONG",{});var Lpt=s(U1e);bFr=r(Lpt,"bart"),Lpt.forEach(t),TFr=r(P8e," \u2014 "),NX=n(P8e,"A",{href:!0});var Bpt=s(NX);FFr=r(Bpt,"FlaxBartForConditionalGeneration"),Bpt.forEach(t),CFr=r(P8e," (BART model)"),P8e.forEach(t),MFr=i(ro),wC=n(ro,"LI",{});var $8e=s(wC);J1e=n($8e,"STRONG",{});var xpt=s(J1e);EFr=r(xpt,"blenderbot"),xpt.forEach(t),yFr=r($8e," \u2014 "),qX=n($8e,"A",{href:!0});var kpt=s(qX);wFr=r(kpt,"FlaxBlenderbotForConditionalGeneration"),kpt.forEach(t),AFr=r($8e," (Blenderbot model)"),$8e.forEach(t),LFr=i(ro),AC=n(ro,"LI",{});var I8e=s(AC);Y1e=n(I8e,"STRONG",{});var Rpt=s(Y1e);BFr=r(Rpt,"blenderbot-small"),Rpt.forEach(t),xFr=r(I8e," \u2014 "),GX=n(I8e,"A",{href:!0});var Spt=s(GX);kFr=r(Spt,"FlaxBlenderbotSmallForConditionalGeneration"),Spt.forEach(t),RFr=r(I8e," (BlenderbotSmall model)"),I8e.forEach(t),SFr=i(ro),LC=n(ro,"LI",{});var D8e=s(LC);K1e=n(D8e,"STRONG",{});var Ppt=s(K1e);PFr=r(Ppt,"encoder-decoder"),Ppt.forEach(t),$Fr=r(D8e," \u2014 "),OX=n(D8e,"A",{href:!0});var $pt=s(OX);IFr=r($pt,"FlaxEncoderDecoderModel"),$pt.forEach(t),DFr=r(D8e," (Encoder decoder model)"),D8e.forEach(t),jFr=i(ro),BC=n(ro,"LI",{});var j8e=s(BC);Z1e=n(j8e,"STRONG",{});var Ipt=s(Z1e);NFr=r(Ipt,"marian"),Ipt.forEach(t),qFr=r(j8e," \u2014 "),XX=n(j8e,"A",{href:!0});var Dpt=s(XX);GFr=r(Dpt,"FlaxMarianMTModel"),Dpt.forEach(t),OFr=r(j8e," (Marian model)"),j8e.forEach(t),XFr=i(ro),xC=n(ro,"LI",{});var N8e=s(xC);e4e=n(N8e,"STRONG",{});var jpt=s(e4e);VFr=r(jpt,"mbart"),jpt.forEach(t),zFr=r(N8e," \u2014 "),VX=n(N8e,"A",{href:!0});var Npt=s(VX);WFr=r(Npt,"FlaxMBartForConditionalGeneration"),Npt.forEach(t),QFr=r(N8e," (mBART model)"),N8e.forEach(t),HFr=i(ro),kC=n(ro,"LI",{});var q8e=s(kC);o4e=n(q8e,"STRONG",{});var qpt=s(o4e);UFr=r(qpt,"mt5"),qpt.forEach(t),JFr=r(q8e," \u2014 "),zX=n(q8e,"A",{href:!0});var Gpt=s(zX);YFr=r(Gpt,"FlaxMT5ForConditionalGeneration"),Gpt.forEach(t),KFr=r(q8e," (mT5 model)"),q8e.forEach(t),ZFr=i(ro),RC=n(ro,"LI",{});var G8e=s(RC);r4e=n(G8e,"STRONG",{});var Opt=s(r4e);eCr=r(Opt,"pegasus"),Opt.forEach(t),oCr=r(G8e," \u2014 "),WX=n(G8e,"A",{href:!0});var Xpt=s(WX);rCr=r(Xpt,"FlaxPegasusForConditionalGeneration"),Xpt.forEach(t),tCr=r(G8e," (Pegasus model)"),G8e.forEach(t),aCr=i(ro),SC=n(ro,"LI",{});var O8e=s(SC);t4e=n(O8e,"STRONG",{});var Vpt=s(t4e);nCr=r(Vpt,"t5"),Vpt.forEach(t),sCr=r(O8e," \u2014 "),QX=n(O8e,"A",{href:!0});var zpt=s(QX);lCr=r(zpt,"FlaxT5ForConditionalGeneration"),zpt.forEach(t),iCr=r(O8e," (T5 model)"),O8e.forEach(t),ro.forEach(t),dCr=i(Aa),a4e=n(Aa,"P",{});var Wpt=s(a4e);cCr=r(Wpt,"Examples:"),Wpt.forEach(t),fCr=i(Aa),m(hA.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),cxe=i(c),of=n(c,"H2",{class:!0});var TRe=s(of);PC=n(TRe,"A",{id:!0,class:!0,href:!0});var Qpt=s(PC);n4e=n(Qpt,"SPAN",{});var Hpt=s(n4e);m(uA.$$.fragment,Hpt),Hpt.forEach(t),Qpt.forEach(t),mCr=i(TRe),s4e=n(TRe,"SPAN",{});var Upt=s(s4e);gCr=r(Upt,"FlaxAutoModelForSequenceClassification"),Upt.forEach(t),TRe.forEach(t),fxe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(pA.$$.fragment,gi),hCr=i(gi),rf=n(gi,"P",{});var sW=s(rf);uCr=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),l4e=n(sW,"CODE",{});var Jpt=s(l4e);pCr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),_Cr=r(sW,"class method or the "),i4e=n(sW,"CODE",{});var Ypt=s(i4e);vCr=r(Ypt,"from_config()"),Ypt.forEach(t),bCr=r(sW,`class
method.`),sW.forEach(t),TCr=i(gi),_A=n(gi,"P",{});var FRe=s(_A);FCr=r(FRe,"This class cannot be instantiated directly using "),d4e=n(FRe,"CODE",{});var Kpt=s(d4e);CCr=r(Kpt,"__init__()"),Kpt.forEach(t),MCr=r(FRe," (throws an error)."),FRe.forEach(t),ECr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(vA.$$.fragment,hi),yCr=i(hi),c4e=n(hi,"P",{});var Zpt=s(c4e);wCr=r(Zpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zpt.forEach(t),ACr=i(hi),tf=n(hi,"P",{});var lW=s(tf);LCr=r(lW,`Note:
Loading a model from its configuration file does `),f4e=n(lW,"STRONG",{});var e_t=s(f4e);BCr=r(e_t,"not"),e_t.forEach(t),xCr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),m4e=n(lW,"CODE",{});var o_t=s(m4e);kCr=r(o_t,"from_pretrained()"),o_t.forEach(t),RCr=r(lW,"to load the model weights."),lW.forEach(t),SCr=i(hi),g4e=n(hi,"P",{});var r_t=s(g4e);PCr=r(r_t,"Examples:"),r_t.forEach(t),$Cr=i(hi),m(bA.$$.fragment,hi),hi.forEach(t),ICr=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(TA.$$.fragment,La),DCr=i(La),h4e=n(La,"P",{});var t_t=s(h4e);jCr=r(t_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t_t.forEach(t),NCr=i(La),Bn=n(La,"P",{});var uE=s(Bn);qCr=r(uE,"The model class to instantiate is selected based on the "),u4e=n(uE,"CODE",{});var a_t=s(u4e);GCr=r(a_t,"model_type"),a_t.forEach(t),OCr=r(uE,` property of the config object (either
passed as an argument or loaded from `),p4e=n(uE,"CODE",{});var n_t=s(p4e);XCr=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),VCr=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(uE,"CODE",{});var s_t=s(_4e);zCr=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),WCr=r(uE,":"),uE.forEach(t),QCr=i(La),Fe=n(La,"UL",{});var to=s(Fe);$C=n(to,"LI",{});var X8e=s($C);v4e=n(X8e,"STRONG",{});var l_t=s(v4e);HCr=r(l_t,"albert"),l_t.forEach(t),UCr=r(X8e," \u2014 "),HX=n(X8e,"A",{href:!0});var i_t=s(HX);JCr=r(i_t,"FlaxAlbertForSequenceClassification"),i_t.forEach(t),YCr=r(X8e," (ALBERT model)"),X8e.forEach(t),KCr=i(to),IC=n(to,"LI",{});var V8e=s(IC);b4e=n(V8e,"STRONG",{});var d_t=s(b4e);ZCr=r(d_t,"bart"),d_t.forEach(t),eMr=r(V8e," \u2014 "),UX=n(V8e,"A",{href:!0});var c_t=s(UX);oMr=r(c_t,"FlaxBartForSequenceClassification"),c_t.forEach(t),rMr=r(V8e," (BART model)"),V8e.forEach(t),tMr=i(to),DC=n(to,"LI",{});var z8e=s(DC);T4e=n(z8e,"STRONG",{});var f_t=s(T4e);aMr=r(f_t,"bert"),f_t.forEach(t),nMr=r(z8e," \u2014 "),JX=n(z8e,"A",{href:!0});var m_t=s(JX);sMr=r(m_t,"FlaxBertForSequenceClassification"),m_t.forEach(t),lMr=r(z8e," (BERT model)"),z8e.forEach(t),iMr=i(to),jC=n(to,"LI",{});var W8e=s(jC);F4e=n(W8e,"STRONG",{});var g_t=s(F4e);dMr=r(g_t,"big_bird"),g_t.forEach(t),cMr=r(W8e," \u2014 "),YX=n(W8e,"A",{href:!0});var h_t=s(YX);fMr=r(h_t,"FlaxBigBirdForSequenceClassification"),h_t.forEach(t),mMr=r(W8e," (BigBird model)"),W8e.forEach(t),gMr=i(to),NC=n(to,"LI",{});var Q8e=s(NC);C4e=n(Q8e,"STRONG",{});var u_t=s(C4e);hMr=r(u_t,"distilbert"),u_t.forEach(t),uMr=r(Q8e," \u2014 "),KX=n(Q8e,"A",{href:!0});var p_t=s(KX);pMr=r(p_t,"FlaxDistilBertForSequenceClassification"),p_t.forEach(t),_Mr=r(Q8e," (DistilBERT model)"),Q8e.forEach(t),vMr=i(to),qC=n(to,"LI",{});var H8e=s(qC);M4e=n(H8e,"STRONG",{});var __t=s(M4e);bMr=r(__t,"electra"),__t.forEach(t),TMr=r(H8e," \u2014 "),ZX=n(H8e,"A",{href:!0});var v_t=s(ZX);FMr=r(v_t,"FlaxElectraForSequenceClassification"),v_t.forEach(t),CMr=r(H8e," (ELECTRA model)"),H8e.forEach(t),MMr=i(to),GC=n(to,"LI",{});var U8e=s(GC);E4e=n(U8e,"STRONG",{});var b_t=s(E4e);EMr=r(b_t,"mbart"),b_t.forEach(t),yMr=r(U8e," \u2014 "),eV=n(U8e,"A",{href:!0});var T_t=s(eV);wMr=r(T_t,"FlaxMBartForSequenceClassification"),T_t.forEach(t),AMr=r(U8e," (mBART model)"),U8e.forEach(t),LMr=i(to),OC=n(to,"LI",{});var J8e=s(OC);y4e=n(J8e,"STRONG",{});var F_t=s(y4e);BMr=r(F_t,"roberta"),F_t.forEach(t),xMr=r(J8e," \u2014 "),oV=n(J8e,"A",{href:!0});var C_t=s(oV);kMr=r(C_t,"FlaxRobertaForSequenceClassification"),C_t.forEach(t),RMr=r(J8e," (RoBERTa model)"),J8e.forEach(t),SMr=i(to),XC=n(to,"LI",{});var Y8e=s(XC);w4e=n(Y8e,"STRONG",{});var M_t=s(w4e);PMr=r(M_t,"roformer"),M_t.forEach(t),$Mr=r(Y8e," \u2014 "),rV=n(Y8e,"A",{href:!0});var E_t=s(rV);IMr=r(E_t,"FlaxRoFormerForSequenceClassification"),E_t.forEach(t),DMr=r(Y8e," (RoFormer model)"),Y8e.forEach(t),to.forEach(t),jMr=i(La),A4e=n(La,"P",{});var y_t=s(A4e);NMr=r(y_t,"Examples:"),y_t.forEach(t),qMr=i(La),m(FA.$$.fragment,La),La.forEach(t),gi.forEach(t),mxe=i(c),af=n(c,"H2",{class:!0});var CRe=s(af);VC=n(CRe,"A",{id:!0,class:!0,href:!0});var w_t=s(VC);L4e=n(w_t,"SPAN",{});var A_t=s(L4e);m(CA.$$.fragment,A_t),A_t.forEach(t),w_t.forEach(t),GMr=i(CRe),B4e=n(CRe,"SPAN",{});var L_t=s(B4e);OMr=r(L_t,"FlaxAutoModelForQuestionAnswering"),L_t.forEach(t),CRe.forEach(t),gxe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(MA.$$.fragment,ui),XMr=i(ui),nf=n(ui,"P",{});var iW=s(nf);VMr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),x4e=n(iW,"CODE",{});var B_t=s(x4e);zMr=r(B_t,"from_pretrained()"),B_t.forEach(t),WMr=r(iW,"class method or the "),k4e=n(iW,"CODE",{});var x_t=s(k4e);QMr=r(x_t,"from_config()"),x_t.forEach(t),HMr=r(iW,`class
method.`),iW.forEach(t),UMr=i(ui),EA=n(ui,"P",{});var MRe=s(EA);JMr=r(MRe,"This class cannot be instantiated directly using "),R4e=n(MRe,"CODE",{});var k_t=s(R4e);YMr=r(k_t,"__init__()"),k_t.forEach(t),KMr=r(MRe," (throws an error)."),MRe.forEach(t),ZMr=i(ui),At=n(ui,"DIV",{class:!0});var pi=s(At);m(yA.$$.fragment,pi),eEr=i(pi),S4e=n(pi,"P",{});var R_t=s(S4e);oEr=r(R_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R_t.forEach(t),rEr=i(pi),sf=n(pi,"P",{});var dW=s(sf);tEr=r(dW,`Note:
Loading a model from its configuration file does `),P4e=n(dW,"STRONG",{});var S_t=s(P4e);aEr=r(S_t,"not"),S_t.forEach(t),nEr=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$4e=n(dW,"CODE",{});var P_t=s($4e);sEr=r(P_t,"from_pretrained()"),P_t.forEach(t),lEr=r(dW,"to load the model weights."),dW.forEach(t),iEr=i(pi),I4e=n(pi,"P",{});var $_t=s(I4e);dEr=r($_t,"Examples:"),$_t.forEach(t),cEr=i(pi),m(wA.$$.fragment,pi),pi.forEach(t),fEr=i(ui),Ro=n(ui,"DIV",{class:!0});var Ba=s(Ro);m(AA.$$.fragment,Ba),mEr=i(Ba),D4e=n(Ba,"P",{});var I_t=s(D4e);gEr=r(I_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I_t.forEach(t),hEr=i(Ba),xn=n(Ba,"P",{});var pE=s(xn);uEr=r(pE,"The model class to instantiate is selected based on the "),j4e=n(pE,"CODE",{});var D_t=s(j4e);pEr=r(D_t,"model_type"),D_t.forEach(t),_Er=r(pE,` property of the config object (either
passed as an argument or loaded from `),N4e=n(pE,"CODE",{});var j_t=s(N4e);vEr=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),bEr=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q4e=n(pE,"CODE",{});var N_t=s(q4e);TEr=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),FEr=r(pE,":"),pE.forEach(t),CEr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);zC=n(ao,"LI",{});var K8e=s(zC);G4e=n(K8e,"STRONG",{});var q_t=s(G4e);MEr=r(q_t,"albert"),q_t.forEach(t),EEr=r(K8e," \u2014 "),tV=n(K8e,"A",{href:!0});var G_t=s(tV);yEr=r(G_t,"FlaxAlbertForQuestionAnswering"),G_t.forEach(t),wEr=r(K8e," (ALBERT model)"),K8e.forEach(t),AEr=i(ao),WC=n(ao,"LI",{});var Z8e=s(WC);O4e=n(Z8e,"STRONG",{});var O_t=s(O4e);LEr=r(O_t,"bart"),O_t.forEach(t),BEr=r(Z8e," \u2014 "),aV=n(Z8e,"A",{href:!0});var X_t=s(aV);xEr=r(X_t,"FlaxBartForQuestionAnswering"),X_t.forEach(t),kEr=r(Z8e," (BART model)"),Z8e.forEach(t),REr=i(ao),QC=n(ao,"LI",{});var e9e=s(QC);X4e=n(e9e,"STRONG",{});var V_t=s(X4e);SEr=r(V_t,"bert"),V_t.forEach(t),PEr=r(e9e," \u2014 "),nV=n(e9e,"A",{href:!0});var z_t=s(nV);$Er=r(z_t,"FlaxBertForQuestionAnswering"),z_t.forEach(t),IEr=r(e9e," (BERT model)"),e9e.forEach(t),DEr=i(ao),HC=n(ao,"LI",{});var o9e=s(HC);V4e=n(o9e,"STRONG",{});var W_t=s(V4e);jEr=r(W_t,"big_bird"),W_t.forEach(t),NEr=r(o9e," \u2014 "),sV=n(o9e,"A",{href:!0});var Q_t=s(sV);qEr=r(Q_t,"FlaxBigBirdForQuestionAnswering"),Q_t.forEach(t),GEr=r(o9e," (BigBird model)"),o9e.forEach(t),OEr=i(ao),UC=n(ao,"LI",{});var r9e=s(UC);z4e=n(r9e,"STRONG",{});var H_t=s(z4e);XEr=r(H_t,"distilbert"),H_t.forEach(t),VEr=r(r9e," \u2014 "),lV=n(r9e,"A",{href:!0});var U_t=s(lV);zEr=r(U_t,"FlaxDistilBertForQuestionAnswering"),U_t.forEach(t),WEr=r(r9e," (DistilBERT model)"),r9e.forEach(t),QEr=i(ao),JC=n(ao,"LI",{});var t9e=s(JC);W4e=n(t9e,"STRONG",{});var J_t=s(W4e);HEr=r(J_t,"electra"),J_t.forEach(t),UEr=r(t9e," \u2014 "),iV=n(t9e,"A",{href:!0});var Y_t=s(iV);JEr=r(Y_t,"FlaxElectraForQuestionAnswering"),Y_t.forEach(t),YEr=r(t9e," (ELECTRA model)"),t9e.forEach(t),KEr=i(ao),YC=n(ao,"LI",{});var a9e=s(YC);Q4e=n(a9e,"STRONG",{});var K_t=s(Q4e);ZEr=r(K_t,"mbart"),K_t.forEach(t),e3r=r(a9e," \u2014 "),dV=n(a9e,"A",{href:!0});var Z_t=s(dV);o3r=r(Z_t,"FlaxMBartForQuestionAnswering"),Z_t.forEach(t),r3r=r(a9e," (mBART model)"),a9e.forEach(t),t3r=i(ao),KC=n(ao,"LI",{});var n9e=s(KC);H4e=n(n9e,"STRONG",{});var evt=s(H4e);a3r=r(evt,"roberta"),evt.forEach(t),n3r=r(n9e," \u2014 "),cV=n(n9e,"A",{href:!0});var ovt=s(cV);s3r=r(ovt,"FlaxRobertaForQuestionAnswering"),ovt.forEach(t),l3r=r(n9e," (RoBERTa model)"),n9e.forEach(t),i3r=i(ao),ZC=n(ao,"LI",{});var s9e=s(ZC);U4e=n(s9e,"STRONG",{});var rvt=s(U4e);d3r=r(rvt,"roformer"),rvt.forEach(t),c3r=r(s9e," \u2014 "),fV=n(s9e,"A",{href:!0});var tvt=s(fV);f3r=r(tvt,"FlaxRoFormerForQuestionAnswering"),tvt.forEach(t),m3r=r(s9e," (RoFormer model)"),s9e.forEach(t),ao.forEach(t),g3r=i(Ba),J4e=n(Ba,"P",{});var avt=s(J4e);h3r=r(avt,"Examples:"),avt.forEach(t),u3r=i(Ba),m(LA.$$.fragment,Ba),Ba.forEach(t),ui.forEach(t),hxe=i(c),lf=n(c,"H2",{class:!0});var ERe=s(lf);eM=n(ERe,"A",{id:!0,class:!0,href:!0});var nvt=s(eM);Y4e=n(nvt,"SPAN",{});var svt=s(Y4e);m(BA.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),p3r=i(ERe),K4e=n(ERe,"SPAN",{});var lvt=s(K4e);_3r=r(lvt,"FlaxAutoModelForTokenClassification"),lvt.forEach(t),ERe.forEach(t),uxe=i(c),$r=n(c,"DIV",{class:!0});var _i=s($r);m(xA.$$.fragment,_i),v3r=i(_i),df=n(_i,"P",{});var cW=s(df);b3r=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Z4e=n(cW,"CODE",{});var ivt=s(Z4e);T3r=r(ivt,"from_pretrained()"),ivt.forEach(t),F3r=r(cW,"class method or the "),ebe=n(cW,"CODE",{});var dvt=s(ebe);C3r=r(dvt,"from_config()"),dvt.forEach(t),M3r=r(cW,`class
method.`),cW.forEach(t),E3r=i(_i),kA=n(_i,"P",{});var yRe=s(kA);y3r=r(yRe,"This class cannot be instantiated directly using "),obe=n(yRe,"CODE",{});var cvt=s(obe);w3r=r(cvt,"__init__()"),cvt.forEach(t),A3r=r(yRe," (throws an error)."),yRe.forEach(t),L3r=i(_i),Lt=n(_i,"DIV",{class:!0});var vi=s(Lt);m(RA.$$.fragment,vi),B3r=i(vi),rbe=n(vi,"P",{});var fvt=s(rbe);x3r=r(fvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fvt.forEach(t),k3r=i(vi),cf=n(vi,"P",{});var fW=s(cf);R3r=r(fW,`Note:
Loading a model from its configuration file does `),tbe=n(fW,"STRONG",{});var mvt=s(tbe);S3r=r(mvt,"not"),mvt.forEach(t),P3r=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=n(fW,"CODE",{});var gvt=s(abe);$3r=r(gvt,"from_pretrained()"),gvt.forEach(t),I3r=r(fW,"to load the model weights."),fW.forEach(t),D3r=i(vi),nbe=n(vi,"P",{});var hvt=s(nbe);j3r=r(hvt,"Examples:"),hvt.forEach(t),N3r=i(vi),m(SA.$$.fragment,vi),vi.forEach(t),q3r=i(_i),So=n(_i,"DIV",{class:!0});var xa=s(So);m(PA.$$.fragment,xa),G3r=i(xa),sbe=n(xa,"P",{});var uvt=s(sbe);O3r=r(uvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uvt.forEach(t),X3r=i(xa),kn=n(xa,"P",{});var _E=s(kn);V3r=r(_E,"The model class to instantiate is selected based on the "),lbe=n(_E,"CODE",{});var pvt=s(lbe);z3r=r(pvt,"model_type"),pvt.forEach(t),W3r=r(_E,` property of the config object (either
passed as an argument or loaded from `),ibe=n(_E,"CODE",{});var _vt=s(ibe);Q3r=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),H3r=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(_E,"CODE",{});var vvt=s(dbe);U3r=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),J3r=r(_E,":"),_E.forEach(t),Y3r=i(xa),so=n(xa,"UL",{});var ta=s(so);oM=n(ta,"LI",{});var l9e=s(oM);cbe=n(l9e,"STRONG",{});var bvt=s(cbe);K3r=r(bvt,"albert"),bvt.forEach(t),Z3r=r(l9e," \u2014 "),mV=n(l9e,"A",{href:!0});var Tvt=s(mV);e5r=r(Tvt,"FlaxAlbertForTokenClassification"),Tvt.forEach(t),o5r=r(l9e," (ALBERT model)"),l9e.forEach(t),r5r=i(ta),rM=n(ta,"LI",{});var i9e=s(rM);fbe=n(i9e,"STRONG",{});var Fvt=s(fbe);t5r=r(Fvt,"bert"),Fvt.forEach(t),a5r=r(i9e," \u2014 "),gV=n(i9e,"A",{href:!0});var Cvt=s(gV);n5r=r(Cvt,"FlaxBertForTokenClassification"),Cvt.forEach(t),s5r=r(i9e," (BERT model)"),i9e.forEach(t),l5r=i(ta),tM=n(ta,"LI",{});var d9e=s(tM);mbe=n(d9e,"STRONG",{});var Mvt=s(mbe);i5r=r(Mvt,"big_bird"),Mvt.forEach(t),d5r=r(d9e," \u2014 "),hV=n(d9e,"A",{href:!0});var Evt=s(hV);c5r=r(Evt,"FlaxBigBirdForTokenClassification"),Evt.forEach(t),f5r=r(d9e," (BigBird model)"),d9e.forEach(t),m5r=i(ta),aM=n(ta,"LI",{});var c9e=s(aM);gbe=n(c9e,"STRONG",{});var yvt=s(gbe);g5r=r(yvt,"distilbert"),yvt.forEach(t),h5r=r(c9e," \u2014 "),uV=n(c9e,"A",{href:!0});var wvt=s(uV);u5r=r(wvt,"FlaxDistilBertForTokenClassification"),wvt.forEach(t),p5r=r(c9e," (DistilBERT model)"),c9e.forEach(t),_5r=i(ta),nM=n(ta,"LI",{});var f9e=s(nM);hbe=n(f9e,"STRONG",{});var Avt=s(hbe);v5r=r(Avt,"electra"),Avt.forEach(t),b5r=r(f9e," \u2014 "),pV=n(f9e,"A",{href:!0});var Lvt=s(pV);T5r=r(Lvt,"FlaxElectraForTokenClassification"),Lvt.forEach(t),F5r=r(f9e," (ELECTRA model)"),f9e.forEach(t),C5r=i(ta),sM=n(ta,"LI",{});var m9e=s(sM);ube=n(m9e,"STRONG",{});var Bvt=s(ube);M5r=r(Bvt,"roberta"),Bvt.forEach(t),E5r=r(m9e," \u2014 "),_V=n(m9e,"A",{href:!0});var xvt=s(_V);y5r=r(xvt,"FlaxRobertaForTokenClassification"),xvt.forEach(t),w5r=r(m9e," (RoBERTa model)"),m9e.forEach(t),A5r=i(ta),lM=n(ta,"LI",{});var g9e=s(lM);pbe=n(g9e,"STRONG",{});var kvt=s(pbe);L5r=r(kvt,"roformer"),kvt.forEach(t),B5r=r(g9e," \u2014 "),vV=n(g9e,"A",{href:!0});var Rvt=s(vV);x5r=r(Rvt,"FlaxRoFormerForTokenClassification"),Rvt.forEach(t),k5r=r(g9e," (RoFormer model)"),g9e.forEach(t),ta.forEach(t),R5r=i(xa),_be=n(xa,"P",{});var Svt=s(_be);S5r=r(Svt,"Examples:"),Svt.forEach(t),P5r=i(xa),m($A.$$.fragment,xa),xa.forEach(t),_i.forEach(t),pxe=i(c),ff=n(c,"H2",{class:!0});var wRe=s(ff);iM=n(wRe,"A",{id:!0,class:!0,href:!0});var Pvt=s(iM);vbe=n(Pvt,"SPAN",{});var $vt=s(vbe);m(IA.$$.fragment,$vt),$vt.forEach(t),Pvt.forEach(t),$5r=i(wRe),bbe=n(wRe,"SPAN",{});var Ivt=s(bbe);I5r=r(Ivt,"FlaxAutoModelForMultipleChoice"),Ivt.forEach(t),wRe.forEach(t),_xe=i(c),Ir=n(c,"DIV",{class:!0});var bi=s(Ir);m(DA.$$.fragment,bi),D5r=i(bi),mf=n(bi,"P",{});var mW=s(mf);j5r=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tbe=n(mW,"CODE",{});var Dvt=s(Tbe);N5r=r(Dvt,"from_pretrained()"),Dvt.forEach(t),q5r=r(mW,"class method or the "),Fbe=n(mW,"CODE",{});var jvt=s(Fbe);G5r=r(jvt,"from_config()"),jvt.forEach(t),O5r=r(mW,`class
method.`),mW.forEach(t),X5r=i(bi),jA=n(bi,"P",{});var ARe=s(jA);V5r=r(ARe,"This class cannot be instantiated directly using "),Cbe=n(ARe,"CODE",{});var Nvt=s(Cbe);z5r=r(Nvt,"__init__()"),Nvt.forEach(t),W5r=r(ARe," (throws an error)."),ARe.forEach(t),Q5r=i(bi),Bt=n(bi,"DIV",{class:!0});var Ti=s(Bt);m(NA.$$.fragment,Ti),H5r=i(Ti),Mbe=n(Ti,"P",{});var qvt=s(Mbe);U5r=r(qvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qvt.forEach(t),J5r=i(Ti),gf=n(Ti,"P",{});var gW=s(gf);Y5r=r(gW,`Note:
Loading a model from its configuration file does `),Ebe=n(gW,"STRONG",{});var Gvt=s(Ebe);K5r=r(Gvt,"not"),Gvt.forEach(t),Z5r=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=n(gW,"CODE",{});var Ovt=s(ybe);eyr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),oyr=r(gW,"to load the model weights."),gW.forEach(t),ryr=i(Ti),wbe=n(Ti,"P",{});var Xvt=s(wbe);tyr=r(Xvt,"Examples:"),Xvt.forEach(t),ayr=i(Ti),m(qA.$$.fragment,Ti),Ti.forEach(t),nyr=i(bi),Po=n(bi,"DIV",{class:!0});var ka=s(Po);m(GA.$$.fragment,ka),syr=i(ka),Abe=n(ka,"P",{});var Vvt=s(Abe);lyr=r(Vvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vvt.forEach(t),iyr=i(ka),Rn=n(ka,"P",{});var vE=s(Rn);dyr=r(vE,"The model class to instantiate is selected based on the "),Lbe=n(vE,"CODE",{});var zvt=s(Lbe);cyr=r(zvt,"model_type"),zvt.forEach(t),fyr=r(vE,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(vE,"CODE",{});var Wvt=s(Bbe);myr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),gyr=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(vE,"CODE",{});var Qvt=s(xbe);hyr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),uyr=r(vE,":"),vE.forEach(t),pyr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);dM=n(aa,"LI",{});var h9e=s(dM);kbe=n(h9e,"STRONG",{});var Hvt=s(kbe);_yr=r(Hvt,"albert"),Hvt.forEach(t),vyr=r(h9e," \u2014 "),bV=n(h9e,"A",{href:!0});var Uvt=s(bV);byr=r(Uvt,"FlaxAlbertForMultipleChoice"),Uvt.forEach(t),Tyr=r(h9e," (ALBERT model)"),h9e.forEach(t),Fyr=i(aa),cM=n(aa,"LI",{});var u9e=s(cM);Rbe=n(u9e,"STRONG",{});var Jvt=s(Rbe);Cyr=r(Jvt,"bert"),Jvt.forEach(t),Myr=r(u9e," \u2014 "),TV=n(u9e,"A",{href:!0});var Yvt=s(TV);Eyr=r(Yvt,"FlaxBertForMultipleChoice"),Yvt.forEach(t),yyr=r(u9e," (BERT model)"),u9e.forEach(t),wyr=i(aa),fM=n(aa,"LI",{});var p9e=s(fM);Sbe=n(p9e,"STRONG",{});var Kvt=s(Sbe);Ayr=r(Kvt,"big_bird"),Kvt.forEach(t),Lyr=r(p9e," \u2014 "),FV=n(p9e,"A",{href:!0});var Zvt=s(FV);Byr=r(Zvt,"FlaxBigBirdForMultipleChoice"),Zvt.forEach(t),xyr=r(p9e," (BigBird model)"),p9e.forEach(t),kyr=i(aa),mM=n(aa,"LI",{});var _9e=s(mM);Pbe=n(_9e,"STRONG",{});var e1t=s(Pbe);Ryr=r(e1t,"distilbert"),e1t.forEach(t),Syr=r(_9e," \u2014 "),CV=n(_9e,"A",{href:!0});var o1t=s(CV);Pyr=r(o1t,"FlaxDistilBertForMultipleChoice"),o1t.forEach(t),$yr=r(_9e," (DistilBERT model)"),_9e.forEach(t),Iyr=i(aa),gM=n(aa,"LI",{});var v9e=s(gM);$be=n(v9e,"STRONG",{});var r1t=s($be);Dyr=r(r1t,"electra"),r1t.forEach(t),jyr=r(v9e," \u2014 "),MV=n(v9e,"A",{href:!0});var t1t=s(MV);Nyr=r(t1t,"FlaxElectraForMultipleChoice"),t1t.forEach(t),qyr=r(v9e," (ELECTRA model)"),v9e.forEach(t),Gyr=i(aa),hM=n(aa,"LI",{});var b9e=s(hM);Ibe=n(b9e,"STRONG",{});var a1t=s(Ibe);Oyr=r(a1t,"roberta"),a1t.forEach(t),Xyr=r(b9e," \u2014 "),EV=n(b9e,"A",{href:!0});var n1t=s(EV);Vyr=r(n1t,"FlaxRobertaForMultipleChoice"),n1t.forEach(t),zyr=r(b9e," (RoBERTa model)"),b9e.forEach(t),Wyr=i(aa),uM=n(aa,"LI",{});var T9e=s(uM);Dbe=n(T9e,"STRONG",{});var s1t=s(Dbe);Qyr=r(s1t,"roformer"),s1t.forEach(t),Hyr=r(T9e," \u2014 "),yV=n(T9e,"A",{href:!0});var l1t=s(yV);Uyr=r(l1t,"FlaxRoFormerForMultipleChoice"),l1t.forEach(t),Jyr=r(T9e," (RoFormer model)"),T9e.forEach(t),aa.forEach(t),Yyr=i(ka),jbe=n(ka,"P",{});var i1t=s(jbe);Kyr=r(i1t,"Examples:"),i1t.forEach(t),Zyr=i(ka),m(OA.$$.fragment,ka),ka.forEach(t),bi.forEach(t),vxe=i(c),hf=n(c,"H2",{class:!0});var LRe=s(hf);pM=n(LRe,"A",{id:!0,class:!0,href:!0});var d1t=s(pM);Nbe=n(d1t,"SPAN",{});var c1t=s(Nbe);m(XA.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),ewr=i(LRe),qbe=n(LRe,"SPAN",{});var f1t=s(qbe);owr=r(f1t,"FlaxAutoModelForNextSentencePrediction"),f1t.forEach(t),LRe.forEach(t),bxe=i(c),Dr=n(c,"DIV",{class:!0});var Fi=s(Dr);m(VA.$$.fragment,Fi),rwr=i(Fi),uf=n(Fi,"P",{});var hW=s(uf);twr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Gbe=n(hW,"CODE",{});var m1t=s(Gbe);awr=r(m1t,"from_pretrained()"),m1t.forEach(t),nwr=r(hW,"class method or the "),Obe=n(hW,"CODE",{});var g1t=s(Obe);swr=r(g1t,"from_config()"),g1t.forEach(t),lwr=r(hW,`class
method.`),hW.forEach(t),iwr=i(Fi),zA=n(Fi,"P",{});var BRe=s(zA);dwr=r(BRe,"This class cannot be instantiated directly using "),Xbe=n(BRe,"CODE",{});var h1t=s(Xbe);cwr=r(h1t,"__init__()"),h1t.forEach(t),fwr=r(BRe," (throws an error)."),BRe.forEach(t),mwr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(WA.$$.fragment,Ci),gwr=i(Ci),Vbe=n(Ci,"P",{});var u1t=s(Vbe);hwr=r(u1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u1t.forEach(t),uwr=i(Ci),pf=n(Ci,"P",{});var uW=s(pf);pwr=r(uW,`Note:
Loading a model from its configuration file does `),zbe=n(uW,"STRONG",{});var p1t=s(zbe);_wr=r(p1t,"not"),p1t.forEach(t),vwr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=n(uW,"CODE",{});var _1t=s(Wbe);bwr=r(_1t,"from_pretrained()"),_1t.forEach(t),Twr=r(uW,"to load the model weights."),uW.forEach(t),Fwr=i(Ci),Qbe=n(Ci,"P",{});var v1t=s(Qbe);Cwr=r(v1t,"Examples:"),v1t.forEach(t),Mwr=i(Ci),m(QA.$$.fragment,Ci),Ci.forEach(t),Ewr=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(HA.$$.fragment,Ra),ywr=i(Ra),Hbe=n(Ra,"P",{});var b1t=s(Hbe);wwr=r(b1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),b1t.forEach(t),Awr=i(Ra),Sn=n(Ra,"P",{});var bE=s(Sn);Lwr=r(bE,"The model class to instantiate is selected based on the "),Ube=n(bE,"CODE",{});var T1t=s(Ube);Bwr=r(T1t,"model_type"),T1t.forEach(t),xwr=r(bE,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(bE,"CODE",{});var F1t=s(Jbe);kwr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),Rwr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(bE,"CODE",{});var C1t=s(Ybe);Swr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),Pwr=r(bE,":"),bE.forEach(t),$wr=i(Ra),Kbe=n(Ra,"UL",{});var M1t=s(Kbe);_M=n(M1t,"LI",{});var F9e=s(_M);Zbe=n(F9e,"STRONG",{});var E1t=s(Zbe);Iwr=r(E1t,"bert"),E1t.forEach(t),Dwr=r(F9e," \u2014 "),wV=n(F9e,"A",{href:!0});var y1t=s(wV);jwr=r(y1t,"FlaxBertForNextSentencePrediction"),y1t.forEach(t),Nwr=r(F9e," (BERT model)"),F9e.forEach(t),M1t.forEach(t),qwr=i(Ra),e2e=n(Ra,"P",{});var w1t=s(e2e);Gwr=r(w1t,"Examples:"),w1t.forEach(t),Owr=i(Ra),m(UA.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Txe=i(c),_f=n(c,"H2",{class:!0});var xRe=s(_f);vM=n(xRe,"A",{id:!0,class:!0,href:!0});var A1t=s(vM);o2e=n(A1t,"SPAN",{});var L1t=s(o2e);m(JA.$$.fragment,L1t),L1t.forEach(t),A1t.forEach(t),Xwr=i(xRe),r2e=n(xRe,"SPAN",{});var B1t=s(r2e);Vwr=r(B1t,"FlaxAutoModelForImageClassification"),B1t.forEach(t),xRe.forEach(t),Fxe=i(c),jr=n(c,"DIV",{class:!0});var Mi=s(jr);m(YA.$$.fragment,Mi),zwr=i(Mi),vf=n(Mi,"P",{});var pW=s(vf);Wwr=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),t2e=n(pW,"CODE",{});var x1t=s(t2e);Qwr=r(x1t,"from_pretrained()"),x1t.forEach(t),Hwr=r(pW,"class method or the "),a2e=n(pW,"CODE",{});var k1t=s(a2e);Uwr=r(k1t,"from_config()"),k1t.forEach(t),Jwr=r(pW,`class
method.`),pW.forEach(t),Ywr=i(Mi),KA=n(Mi,"P",{});var kRe=s(KA);Kwr=r(kRe,"This class cannot be instantiated directly using "),n2e=n(kRe,"CODE",{});var R1t=s(n2e);Zwr=r(R1t,"__init__()"),R1t.forEach(t),e6r=r(kRe," (throws an error)."),kRe.forEach(t),o6r=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(ZA.$$.fragment,Ei),r6r=i(Ei),s2e=n(Ei,"P",{});var S1t=s(s2e);t6r=r(S1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S1t.forEach(t),a6r=i(Ei),bf=n(Ei,"P",{});var _W=s(bf);n6r=r(_W,`Note:
Loading a model from its configuration file does `),l2e=n(_W,"STRONG",{});var P1t=s(l2e);s6r=r(P1t,"not"),P1t.forEach(t),l6r=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=n(_W,"CODE",{});var $1t=s(i2e);i6r=r($1t,"from_pretrained()"),$1t.forEach(t),d6r=r(_W,"to load the model weights."),_W.forEach(t),c6r=i(Ei),d2e=n(Ei,"P",{});var I1t=s(d2e);f6r=r(I1t,"Examples:"),I1t.forEach(t),m6r=i(Ei),m(eL.$$.fragment,Ei),Ei.forEach(t),g6r=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(oL.$$.fragment,Sa),h6r=i(Sa),c2e=n(Sa,"P",{});var D1t=s(c2e);u6r=r(D1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D1t.forEach(t),p6r=i(Sa),Pn=n(Sa,"P",{});var TE=s(Pn);_6r=r(TE,"The model class to instantiate is selected based on the "),f2e=n(TE,"CODE",{});var j1t=s(f2e);v6r=r(j1t,"model_type"),j1t.forEach(t),b6r=r(TE,` property of the config object (either
passed as an argument or loaded from `),m2e=n(TE,"CODE",{});var N1t=s(m2e);T6r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),F6r=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(TE,"CODE",{});var q1t=s(g2e);C6r=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),M6r=r(TE,":"),TE.forEach(t),E6r=i(Sa),rL=n(Sa,"UL",{});var RRe=s(rL);bM=n(RRe,"LI",{});var C9e=s(bM);h2e=n(C9e,"STRONG",{});var G1t=s(h2e);y6r=r(G1t,"beit"),G1t.forEach(t),w6r=r(C9e," \u2014 "),AV=n(C9e,"A",{href:!0});var O1t=s(AV);A6r=r(O1t,"FlaxBeitForImageClassification"),O1t.forEach(t),L6r=r(C9e," (BEiT model)"),C9e.forEach(t),B6r=i(RRe),TM=n(RRe,"LI",{});var M9e=s(TM);u2e=n(M9e,"STRONG",{});var X1t=s(u2e);x6r=r(X1t,"vit"),X1t.forEach(t),k6r=r(M9e," \u2014 "),LV=n(M9e,"A",{href:!0});var V1t=s(LV);R6r=r(V1t,"FlaxViTForImageClassification"),V1t.forEach(t),S6r=r(M9e," (ViT model)"),M9e.forEach(t),RRe.forEach(t),P6r=i(Sa),p2e=n(Sa,"P",{});var z1t=s(p2e);$6r=r(z1t,"Examples:"),z1t.forEach(t),I6r=i(Sa),m(tL.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),Cxe=i(c),Tf=n(c,"H2",{class:!0});var SRe=s(Tf);FM=n(SRe,"A",{id:!0,class:!0,href:!0});var W1t=s(FM);_2e=n(W1t,"SPAN",{});var Q1t=s(_2e);m(aL.$$.fragment,Q1t),Q1t.forEach(t),W1t.forEach(t),D6r=i(SRe),v2e=n(SRe,"SPAN",{});var H1t=s(v2e);j6r=r(H1t,"FlaxAutoModelForVision2Seq"),H1t.forEach(t),SRe.forEach(t),Mxe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(nL.$$.fragment,yi),N6r=i(yi),Ff=n(yi,"P",{});var vW=s(Ff);q6r=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),b2e=n(vW,"CODE",{});var U1t=s(b2e);G6r=r(U1t,"from_pretrained()"),U1t.forEach(t),O6r=r(vW,"class method or the "),T2e=n(vW,"CODE",{});var J1t=s(T2e);X6r=r(J1t,"from_config()"),J1t.forEach(t),V6r=r(vW,`class
method.`),vW.forEach(t),z6r=i(yi),sL=n(yi,"P",{});var PRe=s(sL);W6r=r(PRe,"This class cannot be instantiated directly using "),F2e=n(PRe,"CODE",{});var Y1t=s(F2e);Q6r=r(Y1t,"__init__()"),Y1t.forEach(t),H6r=r(PRe," (throws an error)."),PRe.forEach(t),U6r=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(lL.$$.fragment,wi),J6r=i(wi),C2e=n(wi,"P",{});var K1t=s(C2e);Y6r=r(K1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K1t.forEach(t),K6r=i(wi),Cf=n(wi,"P",{});var bW=s(Cf);Z6r=r(bW,`Note:
Loading a model from its configuration file does `),M2e=n(bW,"STRONG",{});var Z1t=s(M2e);eAr=r(Z1t,"not"),Z1t.forEach(t),oAr=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=n(bW,"CODE",{});var e4t=s(E2e);rAr=r(e4t,"from_pretrained()"),e4t.forEach(t),tAr=r(bW,"to load the model weights."),bW.forEach(t),aAr=i(wi),y2e=n(wi,"P",{});var o4t=s(y2e);nAr=r(o4t,"Examples:"),o4t.forEach(t),sAr=i(wi),m(iL.$$.fragment,wi),wi.forEach(t),lAr=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(dL.$$.fragment,Pa),iAr=i(Pa),w2e=n(Pa,"P",{});var r4t=s(w2e);dAr=r(r4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r4t.forEach(t),cAr=i(Pa),$n=n(Pa,"P",{});var FE=s($n);fAr=r(FE,"The model class to instantiate is selected based on the "),A2e=n(FE,"CODE",{});var t4t=s(A2e);mAr=r(t4t,"model_type"),t4t.forEach(t),gAr=r(FE,` property of the config object (either
passed as an argument or loaded from `),L2e=n(FE,"CODE",{});var a4t=s(L2e);hAr=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),uAr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(FE,"CODE",{});var n4t=s(B2e);pAr=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),_Ar=r(FE,":"),FE.forEach(t),vAr=i(Pa),x2e=n(Pa,"UL",{});var s4t=s(x2e);CM=n(s4t,"LI",{});var E9e=s(CM);k2e=n(E9e,"STRONG",{});var l4t=s(k2e);bAr=r(l4t,"vision-encoder-decoder"),l4t.forEach(t),TAr=r(E9e," \u2014 "),BV=n(E9e,"A",{href:!0});var i4t=s(BV);FAr=r(i4t,"FlaxVisionEncoderDecoderModel"),i4t.forEach(t),CAr=r(E9e," (Vision Encoder decoder model)"),E9e.forEach(t),s4t.forEach(t),MAr=i(Pa),R2e=n(Pa,"P",{});var d4t=s(R2e);EAr=r(d4t,"Examples:"),d4t.forEach(t),yAr=i(Pa),m(cL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(v4t)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(ie,"class","relative group"),d(In,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertModel"),d(Lf,"id","extending-the-auto-classes"),d(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lf,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(xf,"id","transformers.AutoConfig"),d(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xf,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(g8,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(h8,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertConfig"),d(u8,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartConfig"),d(p8,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitConfig"),d(_8,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertConfig"),d(v8,"href","/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(b8,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdConfig"),d(T8,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(F8,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(C8,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(M8,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertConfig"),d(E8,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineConfig"),d(y8,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPConfig"),d(w8,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertConfig"),d(A8,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextConfig"),d(L8,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLConfig"),d(B8,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(x8,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(k8,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaConfig"),d(R8,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(S8,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTConfig"),d(P8,"href","/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrConfig"),d($8,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertConfig"),d(I8,"href","/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRConfig"),d(D8,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraConfig"),d(j8,"href","/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(N8,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertConfig"),d(q8,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetConfig"),d(G8,"href","/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTConfig"),d(O8,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelConfig"),d(X8,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Config"),d(V8,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(z8,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJConfig"),d(W8,"href","/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertConfig"),d(Q8,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertConfig"),d(H8,"href","/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(U8,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(J8,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Y8,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDConfig"),d(K8,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerConfig"),d(Z8,"href","/docs/transformers/v4.17.0/en/model_doc/luke#transformers.LukeConfig"),d(e9,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertConfig"),d(o9,"href","/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Config"),d(r9,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianConfig"),d(t9,"href","/docs/transformers/v4.17.0/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(a9,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartConfig"),d(n9,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(s9,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(l9,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetConfig"),d(i9,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Config"),d(d9,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(c9,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(f9,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusConfig"),d(m9,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverConfig"),d(g9,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartConfig"),d(h9,"href","/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(u9,"href","/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(p9,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(_9,"href","/docs/transformers/v4.17.0/en/model_doc/rag#transformers.RagConfig"),d(v9,"href","/docs/transformers/v4.17.0/en/model_doc/realm#transformers.RealmConfig"),d(b9,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerConfig"),d(T9,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertConfig"),d(F9,"href","/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertConfig"),d(C9,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaConfig"),d(M9,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerConfig"),d(E9,"href","/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerConfig"),d(y9,"href","/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWConfig"),d(w9,"href","/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDConfig"),d(A9,"href","/docs/transformers/v4.17.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(L9,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(B9,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(x9,"href","/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterConfig"),d(k9,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(R9,"href","/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinConfig"),d(S9,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Config"),d(P9,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasConfig"),d($9,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(I9,"href","/docs/transformers/v4.17.0/en/model_doc/trocr#transformers.TrOCRConfig"),d(D9,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(j9,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(N9,"href","/docs/transformers/v4.17.0/en/model_doc/vilt#transformers.ViltConfig"),d(q9,"href","/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(G9,"href","/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(O9,"href","/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(X9,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTConfig"),d(V9,"href","/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(z9,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(W9,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMConfig"),d(Q9,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMConfig"),d(H9,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMConfig"),d(U9,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(J9,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Y9,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(K9,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetConfig"),d(Z9,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(_g,"class","docstring"),d(Xo,"class","docstring"),d(vg,"id","transformers.AutoTokenizer"),d(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vg,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(eB,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(oB,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertTokenizer"),d(rB,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(tB,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartTokenizer"),d(aB,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartTokenizerFast"),d(nB,"href","/docs/transformers/v4.17.0/en/model_doc/barthez#transformers.BarthezTokenizer"),d(sB,"href","/docs/transformers/v4.17.0/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(lB,"href","/docs/transformers/v4.17.0/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(iB,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertTokenizer"),d(dB,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertTokenizerFast"),d(cB,"href","/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(fB,"href","/docs/transformers/v4.17.0/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(mB,"href","/docs/transformers/v4.17.0/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(gB,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(hB,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(uB,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(pB,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(_B,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(vB,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(bB,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(TB,"href","/docs/transformers/v4.17.0/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(FB,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertTokenizer"),d(CB,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(MB,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineTokenizer"),d(EB,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPTokenizer"),d(yB,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(wB,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(AB,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(LB,"href","/docs/transformers/v4.17.0/en/model_doc/cpm#transformers.CpmTokenizer"),d(BB,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(xB,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaTokenizer"),d(kB,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(RB,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(SB,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(PB,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d($B,"href","/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(IB,"href","/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(DB,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraTokenizer"),d(jB,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(NB,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(qB,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetTokenizer"),d(GB,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(OB,"href","/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(XB,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelTokenizer"),d(VB,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(zB,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(WB,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QB,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(HB,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(UB,"href","/docs/transformers/v4.17.0/en/model_doc/herbert#transformers.HerbertTokenizer"),d(JB,"href","/docs/transformers/v4.17.0/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(YB,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(KB,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ZB,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ex,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ox,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(rx,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(tx,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ax,"href","/docs/transformers/v4.17.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(nx,"href","/docs/transformers/v4.17.0/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(sx,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDTokenizer"),d(lx,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDTokenizerFast"),d(ix,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerTokenizer"),d(dx,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(cx,"href","/docs/transformers/v4.17.0/en/model_doc/luke#transformers.LukeTokenizer"),d(fx,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(mx,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(gx,"href","/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(hx,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianTokenizer"),d(ux,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartTokenizer"),d(px,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(_x,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(vx,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(bx,"href","/docs/transformers/v4.17.0/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Tx,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Fx,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Cx,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Mx,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ex,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.T5Tokenizer"),d(yx,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wx,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ax,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Lx,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bx,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xx,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(kx,"href","/docs/transformers/v4.17.0/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Rx,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Sx,"href","/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Px,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertTokenizer"),d($x,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ix,"href","/docs/transformers/v4.17.0/en/model_doc/rag#transformers.RagTokenizer"),d(Dx,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jx,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Nx,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertTokenizer"),d(qx,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Gx,"href","/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ox,"href","/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Xx,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Vx,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(zx,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Wx,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Qx,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Hx,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Ux,"href","/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Jx,"href","/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Yx,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Kx,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Zx,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.T5Tokenizer"),d(ek,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ok,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasTokenizer"),d(rk,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(tk,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ak,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(nk,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMTokenizer"),d(sk,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(lk,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMTokenizer"),d(ik,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(dk,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(ck,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(fk,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(mk,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Hg,"class","docstring"),d(Vo,"class","docstring"),d(Ug,"id","transformers.AutoFeatureExtractor"),d(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ug,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(gk,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(hk,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(uk,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(pk,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_k,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(vk,"href","/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(bk,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Tk,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Fk,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Ck,"href","/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Mk,"href","/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Ek,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yk,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wk,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Ak,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Lk,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(mh,"class","docstring"),d(zo,"class","docstring"),d(gh,"id","transformers.AutoProcessor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d(Bk,"href","/docs/transformers/v4.17.0/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(xk,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPProcessor"),d(kk,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Rk,"href","/docs/transformers/v4.17.0/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Sk,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(Pk,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d($k,"href","/docs/transformers/v4.17.0/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Ik,"href","/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Dk,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(Mh,"class","docstring"),d(Wo,"class","docstring"),d(Eh,"id","transformers.AutoModel"),d(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d(jk,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertModel"),d(Nk,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartModel"),d(qk,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitModel"),d(Gk,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertModel"),d(Ok,"href","/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Xk,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdModel"),d(Vk,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(zk,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Wk,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Qk,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertModel"),d(Hk,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineModel"),d(Uk,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.CLIPModel"),d(Jk,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertModel"),d(Yk,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextModel"),d(Kk,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLModel"),d(Zk,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(eR,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(oR,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaModel"),d(rR,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(tR,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTModel"),d(aR,"href","/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrModel"),d(nR,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertModel"),d(sR,"href","/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(lR,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraModel"),d(iR,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertModel"),d(dR,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetModel"),d(cR,"href","/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTModel"),d(fR,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelModel"),d(mR,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelBaseModel"),d(gR,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2Model"),d(hR,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(uR,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJModel"),d(pR,"href","/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertModel"),d(_R,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertModel"),d(vR,"href","/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(bR,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(TR,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(FR,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDModel"),d(CR,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerModel"),d(MR,"href","/docs/transformers/v4.17.0/en/model_doc/luke#transformers.LukeModel"),d(ER,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertModel"),d(yR,"href","/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100Model"),d(wR,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianModel"),d(AR,"href","/docs/transformers/v4.17.0/en/model_doc/maskformer#transformers.MaskFormerModel"),d(LR,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartModel"),d(BR,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(xR,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertModel"),d(kR,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetModel"),d(RR,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5Model"),d(SR,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerModel"),d(PR,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d($R,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusModel"),d(IR,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverModel"),d(DR,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartModel"),d(jR,"href","/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerModel"),d(NR,"href","/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(qR,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertModel"),d(GR,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerModel"),d(OR,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertModel"),d(XR,"href","/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertModel"),d(VR,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaModel"),d(zR,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerModel"),d(WR,"href","/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerModel"),d(QR,"href","/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWModel"),d(HR,"href","/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDModel"),d(UR,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(JR,"href","/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterModel"),d(YR,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(KR,"href","/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinModel"),d(ZR,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5Model"),d(eS,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasModel"),d(oS,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(rS,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechModel"),d(tS,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(aS,"href","/docs/transformers/v4.17.0/en/model_doc/vilt#transformers.ViltModel"),d(nS,"href","/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(sS,"href","/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertModel"),d(lS,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTModel"),d(iS,"href","/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(dS,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(cS,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMModel"),d(fS,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMModel"),d(mS,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMModel"),d(gS,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hS,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(uS,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(pS,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetModel"),d(_S,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(ap,"id","transformers.AutoModelForPreTraining"),d(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ap,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(vS,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForPreTraining"),d(bS,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TS,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForPreTraining"),d(FS,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(CS,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MS,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(ES,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(yS,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wS,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AS,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LS,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BS,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xS,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForPreTraining"),d(kS,"href","/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RS,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(SS,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PS,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($S,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IS,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(DS,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(jS,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(NS,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(qS,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GS,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OS,"href","/docs/transformers/v4.17.0/en/model_doc/retribert#transformers.RetriBertModel"),d(XS,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VS,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zS,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WS,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(QS,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(HS,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(US,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(JS,"href","/docs/transformers/v4.17.0/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(YS,"href","/docs/transformers/v4.17.0/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(KS,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(ZS,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eP,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oP,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rP,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(zp,"id","transformers.AutoModelForCausalLM"),d(zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zp,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(tP,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForCausalLM"),d(aP,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertLMHeadModel"),d(nP,"href","/docs/transformers/v4.17.0/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(sP,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(lP,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(iP,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(dP,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(cP,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(fP,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(mP,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(gP,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForCausalLM"),d(hP,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(uP,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(pP,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(_P,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianForCausalLM"),d(vP,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForCausalLM"),d(bP,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(TP,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(FP,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(CP,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(MP,"href","/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(EP,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(yP,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(wP,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(AP,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(LP,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(BP,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(xP,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(kP,"href","/docs/transformers/v4.17.0/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(RP,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(SP,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(PP,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($P,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(IP,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(DP,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(L_,"id","transformers.AutoModelForMaskedLM"),d(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L_,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(jP,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NP,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(qP,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForMaskedLM"),d(GP,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(OP,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VP,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(zP,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QP,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(HP,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(UP,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(JP,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(YP,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(KP,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(ZP,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(e$,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(o$,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(r$,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(t$,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(a$,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(n$,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(s$,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(l$,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(i$,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(d$,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(c$,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(f$,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(m$,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(g$,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(u$,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(p$,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_$,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(fv,"id","transformers.AutoModelForSeq2SeqLM"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(v$,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(b$,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(T$,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(F$,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(C$,"href","/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(M$,"href","/docs/transformers/v4.17.0/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(E$,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(y$,"href","/docs/transformers/v4.17.0/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(w$,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.MarianMTModel"),d(A$,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(L$,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(B$,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(x$,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(k$,"href","/docs/transformers/v4.17.0/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(R$,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(S$,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(Bv,"id","transformers.AutoModelForSequenceClassification"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(P$,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($$,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForSequenceClassification"),d(I$,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForSequenceClassification"),d(D$,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(j$,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(N$,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(q$,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(G$,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(O$,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(X$,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(V$,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(z$,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(W$,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Q$,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(H$,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(U$,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(J$,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Y$,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(K$,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Z$,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eI,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oI,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rI,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tI,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aI,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nI,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sI,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lI,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iI,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dI,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cI,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(fI,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(mI,"href","/docs/transformers/v4.17.0/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gI,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hI,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uI,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pI,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_I,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(vI,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(bI,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TI,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(MI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(EI,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yI,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(M1,"id","transformers.AutoModelForMultipleChoice"),d(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M1,"href","#transformers.AutoModelForMultipleChoice"),d(sd,"class","relative group"),d(Wr,"class","docstring"),d(wI,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AI,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LI,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BI,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xI,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kI,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RI,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(SI,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PI,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($I,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(II,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(DI,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jI,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(NI,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qI,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GI,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(OI,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XI,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VI,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zI,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WI,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QI,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HI,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YI,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KI,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZI,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(Z1,"id","transformers.AutoModelForNextSentencePrediction"),d(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z1,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(eD,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oD,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rD,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tD,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aD,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(s4,"id","transformers.AutoModelForTokenClassification"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.AutoModelForTokenClassification"),d(md,"class","relative group"),d(Hr,"class","docstring"),d(nD,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sD,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForTokenClassification"),d(lD,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(iD,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(dD,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForTokenClassification"),d(cD,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(fD,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(mD,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(gD,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(hD,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(uD,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(pD,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(_D,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(vD,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(bD,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(TD,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(FD,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(CD,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(MD,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(ED,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(yD,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(wD,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(AD,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(LD,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(BD,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(xD,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(kD,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(RD,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(SD,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(PD,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d($D,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(ID,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(DD,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(G4,"id","transformers.AutoModelForQuestionAnswering"),d(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G4,"href","#transformers.AutoModelForQuestionAnswering"),d(ud,"class","relative group"),d(Ur,"class","docstring"),d(jD,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(ND,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qD,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(GD,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(OD,"href","/docs/transformers/v4.17.0/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(XD,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(VD,"href","/docs/transformers/v4.17.0/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(zD,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(WD,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(QD,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(HD,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(UD,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(JD,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(YD,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(KD,"href","/docs/transformers/v4.17.0/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(ZD,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(ej,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(oj,"href","/docs/transformers/v4.17.0/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(rj,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(tj,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(aj,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(nj,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(sj,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(lj,"href","/docs/transformers/v4.17.0/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ij,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(dj,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(cj,"href","/docs/transformers/v4.17.0/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(fj,"href","/docs/transformers/v4.17.0/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(mj,"href","/docs/transformers/v4.17.0/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(gj,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(hj,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(uj,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(pj,"href","/docs/transformers/v4.17.0/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(_j,"href","/docs/transformers/v4.17.0/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(vj,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(bj,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Tj,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Fj,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Cj,"href","/docs/transformers/v4.17.0/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(Lb,"id","transformers.AutoModelForTableQuestionAnswering"),d(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lb,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(Jr,"class","docstring"),d(Mj,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(kb,"id","transformers.AutoModelForImageClassification"),d(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kb,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(Ej,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitForImageClassification"),d(yj,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wj,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Aj,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Lj,"href","/docs/transformers/v4.17.0/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Bj,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xj,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kj,"href","/docs/transformers/v4.17.0/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Rj,"href","/docs/transformers/v4.17.0/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Sj,"href","/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Pj,"href","/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinForImageClassification"),d($j,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(qb,"id","transformers.AutoModelForVision2Seq"),d(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qb,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(Ij,"href","/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(nr,"class","docstring"),d(Xb,"id","transformers.AutoModelForAudioClassification"),d(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xb,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(Dj,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(jj,"href","/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Nj,"href","/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(qj,"href","/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Gj,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Oj,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Xj,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Vj,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(sr,"class","docstring"),d(Zb,"id","transformers.AutoModelForAudioFrameClassification"),d(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zb,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(zj,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Wj,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Qj,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Hj,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(n2,"id","transformers.AutoModelForCTC"),d(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n2,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(Uj,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Jj,"href","/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.HubertForCTC"),d(Yj,"href","/docs/transformers/v4.17.0/en/model_doc/sew#transformers.SEWForCTC"),d(Kj,"href","/docs/transformers/v4.17.0/en/model_doc/sew-d#transformers.SEWDForCTC"),d(Zj,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(eN,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(oN,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(rN,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(u2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(tN,"href","/docs/transformers/v4.17.0/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(aN,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(b2,"id","transformers.AutoModelForAudioXVector"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(nN,"href","/docs/transformers/v4.17.0/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(sN,"href","/docs/transformers/v4.17.0/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(lN,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(iN,"href","/docs/transformers/v4.17.0/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(y2,"id","transformers.AutoModelForMaskedImageModeling"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(dN,"href","/docs/transformers/v4.17.0/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(cN,"href","/docs/transformers/v4.17.0/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(fN,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(fr,"class","docstring"),d(x2,"id","transformers.AutoModelForObjectDetection"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(nt,"class","docstring"),d(mN,"href","/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(mr,"class","docstring"),d(S2,"id","transformers.AutoModelForImageSegmentation"),d(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S2,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(st,"class","docstring"),d(gN,"href","/docs/transformers/v4.17.0/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(I2,"id","transformers.AutoModelForSemanticSegmentation"),d(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I2,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(hN,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(uN,"href","/docs/transformers/v4.17.0/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(q2,"id","transformers.TFAutoModel"),d(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q2,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(pN,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertModel"),d(_N,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartModel"),d(vN,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertModel"),d(bN,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(TN,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(FN,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertModel"),d(CN,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.TFCLIPModel"),d(MN,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertModel"),d(EN,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.TFConvNextModel"),d(yN,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wN,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaModel"),d(AN,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(LN,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BN,"href","/docs/transformers/v4.17.0/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xN,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraModel"),d(kN,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(RN,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelModel"),d(SN,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(PN,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2Model"),d($N,"href","/docs/transformers/v4.17.0/en/model_doc/hubert#transformers.TFHubertModel"),d(IN,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(DN,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.TFLEDModel"),d(jN,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerModel"),d(NN,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.TFLxmertModel"),d(qN,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.TFMarianModel"),d(GN,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.TFMBartModel"),d(ON,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(XN,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetModel"),d(VN,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.TFMT5Model"),d(zN,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(WN,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.TFPegasusModel"),d(QN,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertModel"),d(HN,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaModel"),d(UN,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JN,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YN,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5Model"),d(KN,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasModel"),d(ZN,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eq,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.TFViTModel"),d(oq,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(rq,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMModel"),d(tq,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(aq,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(ur,"class","docstring"),d(L0,"id","transformers.TFAutoModelForPreTraining"),d(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L0,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(nq,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(sq,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(lq,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForPreTraining"),d(iq,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dq,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(cq,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(fq,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(mq,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(gq,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(hq,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(uq,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(pq,"href","/docs/transformers/v4.17.0/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(_q,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(vq,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(bq,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Tq,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Fq,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Mq,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Eq,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(yq,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(wq,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(pr,"class","docstring"),d(Y0,"id","transformers.TFAutoModelForCausalLM"),d(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y0,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d(Aq,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Lq,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Bq,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xq,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kq,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Rq,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Sq,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(Pq,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($q,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Iq,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(_r,"class","docstring"),d(iT,"id","transformers.TFAutoModelForImageClassification"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(Dq,"href","/docs/transformers/v4.17.0/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(jq,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.TFViTForImageClassification"),d(po,"class","docstring"),d(vr,"class","docstring"),d(fT,"id","transformers.TFAutoModelForMaskedLM"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(mt,"class","docstring"),d(Nq,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(qq,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Gq,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Oq,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Xq,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Vq,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zq,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Wq,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Qq,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Hq,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Uq,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Jq,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Yq,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Kq,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Zq,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eG,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oG,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rG,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tG,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aG,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(_o,"class","docstring"),d(br,"class","docstring"),d(RT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(pc,"class","relative group"),d(gt,"class","docstring"),d(nG,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sG,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lG,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iG,"href","/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dG,"href","/docs/transformers/v4.17.0/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cG,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.TFMarianMTModel"),d(fG,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mG,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gG,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hG,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Tr,"class","docstring"),d(XT,"id","transformers.TFAutoModelForSequenceClassification"),d(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XT,"href","#transformers.TFAutoModelForSequenceClassification"),d(bc,"class","relative group"),d(ht,"class","docstring"),d(uG,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(pG,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(_G,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(vG,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(bG,"href","/docs/transformers/v4.17.0/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(TG,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FG,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CG,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MG,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EG,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yG,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wG,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AG,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(LG,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(BG,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(xG,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kG,"href","/docs/transformers/v4.17.0/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(RG,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(SG,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PG,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d($G,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IG,"href","/docs/transformers/v4.17.0/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(DG,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(jG,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(NG,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(bo,"class","docstring"),d(Fr,"class","docstring"),d(u7,"id","transformers.TFAutoModelForMultipleChoice"),d(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(ut,"class","docstring"),d(qG,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(GG,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(OG,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(XG,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(VG,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(zG,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(WG,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(QG,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(HG,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(UG,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(JG,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(YG,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(KG,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(ZG,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(eO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(oO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(rO,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(S7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(pt,"class","docstring"),d(tO,"href","/docs/transformers/v4.17.0/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d($7,"id","transformers.TFAutoModelForTokenClassification"),d($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($7,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(_t,"class","docstring"),d(aO,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(nO,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(sO,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(lO,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(iO,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(dO,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(cO,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(fO,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(mO,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(gO,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(hO,"href","/docs/transformers/v4.17.0/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(uO,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(pO,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(_O,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(vO,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(bO,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(TO,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(FO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(MO,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(rF,"id","transformers.TFAutoModelForQuestionAnswering"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(EO,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(yO,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wO,"href","/docs/transformers/v4.17.0/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(AO,"href","/docs/transformers/v4.17.0/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LO,"href","/docs/transformers/v4.17.0/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(BO,"href","/docs/transformers/v4.17.0/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xO,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(kO,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RO,"href","/docs/transformers/v4.17.0/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SO,"href","/docs/transformers/v4.17.0/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PO,"href","/docs/transformers/v4.17.0/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d($O,"href","/docs/transformers/v4.17.0/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(IO,"href","/docs/transformers/v4.17.0/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(DO,"href","/docs/transformers/v4.17.0/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(jO,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(NO,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(GO,"href","/docs/transformers/v4.17.0/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(OO,"href","/docs/transformers/v4.17.0/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(CF,"id","transformers.TFAutoModelForVision2Seq"),d(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CF,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(bt,"class","docstring"),d(XO,"href","/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(EF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(VO,"href","/docs/transformers/v4.17.0/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(wF,"id","transformers.FlaxAutoModel"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(zO,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertModel"),d(WO,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartModel"),d(QO,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.FlaxBeitModel"),d(HO,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertModel"),d(UO,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JO,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YO,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KO,"href","/docs/transformers/v4.17.0/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZO,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eX,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraModel"),d(oX,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rX,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tX,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aX,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.FlaxMarianModel"),d(nX,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sX,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lX,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iX,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dX,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cX,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5Model"),d(fX,"href","/docs/transformers/v4.17.0/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mX,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.FlaxViTModel"),d(gX,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hX,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(YF,"id","transformers.FlaxAutoModelForCausalLM"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(uX,"href","/docs/transformers/v4.17.0/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(pX,"href","/docs/transformers/v4.17.0/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(_X,"href","/docs/transformers/v4.17.0/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(vX,"href","/docs/transformers/v4.17.0/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(rC,"id","transformers.FlaxAutoModelForPreTraining"),d(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rC,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(bX,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(TX,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(FX,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(CX,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MX,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EX,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(yX,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wX,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AX,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(LX,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BX,"href","/docs/transformers/v4.17.0/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(hC,"id","transformers.FlaxAutoModelForMaskedLM"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(xX,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(kX,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(RX,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(SX,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(PX,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d($X,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(IX,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DX,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jX,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(EC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d(NX,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qX,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/v4.17.0/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/v4.17.0/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(XX,"href","/docs/transformers/v4.17.0/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(VX,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zX,"href","/docs/transformers/v4.17.0/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/v4.17.0/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(QX,"href","/docs/transformers/v4.17.0/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(PC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(of,"class","relative group"),d(wt,"class","docstring"),d(HX,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(UX,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(JX,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(YX,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(KX,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ZX,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(eV,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(oV,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(rV,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(VC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(af,"class","relative group"),d(At,"class","docstring"),d(tV,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(aV,"href","/docs/transformers/v4.17.0/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(nV,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(sV,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(lV,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(iV,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(dV,"href","/docs/transformers/v4.17.0/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(cV,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(fV,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(eM,"id","transformers.FlaxAutoModelForTokenClassification"),d(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lf,"class","relative group"),d(Lt,"class","docstring"),d(mV,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(gV,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(hV,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(uV,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(pV,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(_V,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(vV,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(iM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(ff,"class","relative group"),d(Bt,"class","docstring"),d(bV,"href","/docs/transformers/v4.17.0/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(TV,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(FV,"href","/docs/transformers/v4.17.0/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(CV,"href","/docs/transformers/v4.17.0/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(MV,"href","/docs/transformers/v4.17.0/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(EV,"href","/docs/transformers/v4.17.0/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(yV,"href","/docs/transformers/v4.17.0/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(pM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(hf,"class","relative group"),d(xt,"class","docstring"),d(wV,"href","/docs/transformers/v4.17.0/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(vM,"id","transformers.FlaxAutoModelForImageClassification"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.FlaxAutoModelForImageClassification"),d(_f,"class","relative group"),d(kt,"class","docstring"),d(AV,"href","/docs/transformers/v4.17.0/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(LV,"href","/docs/transformers/v4.17.0/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(FM,"id","transformers.FlaxAutoModelForVision2Seq"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Tf,"class","relative group"),d(Rt,"class","docstring"),d(BV,"href","/docs/transformers/v4.17.0/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,_){e(document.head,J),v(c,Be,_),v(c,ie,_),e(ie,me),e(me,no),g(ce,no,null),e(ie,_e),e(ie,Go),e(Go,Li),v(c,Ef,_),v(c,sa,_),e(sa,Bi),e(sa,xi),e(xi,CE),e(sa,yf),v(c,ye,_),v(c,io,_),e(io,ki),e(io,In),e(In,ME),e(io,Dn),e(io,jn),e(jn,EE),e(io,Ri),e(io,Nn),e(Nn,yE),e(io,Si),v(c,wf,_),g($a,c,_),v(c,co,_),v(c,ge,_),e(ge,l8),e(ge,Pi),e(Pi,i8),e(ge,d8),v(c,Oo,_),v(c,Ia,_),e(Ia,c8),e(Ia,Af),e(Af,f8),e(Ia,$Re),v(c,y9e,_),v(c,$i,_),e($i,Lf),e(Lf,TW),g(wE,TW,null),e($i,IRe),e($i,FW),e(FW,DRe),v(c,w9e,_),v(c,qn,_),e(qn,jRe),e(qn,CW),e(CW,NRe),e(qn,qRe),e(qn,MW),e(MW,GRe),e(qn,ORe),v(c,A9e,_),g(AE,c,_),v(c,L9e,_),v(c,m8,_),e(m8,XRe),v(c,B9e,_),g(Bf,c,_),v(c,x9e,_),v(c,Ii,_),e(Ii,xf),e(xf,EW),g(LE,EW,null),e(Ii,VRe),e(Ii,yW),e(yW,zRe),v(c,k9e,_),v(c,Xo,_),g(BE,Xo,null),e(Xo,WRe),e(Xo,xE),e(xE,QRe),e(xE,g8),e(g8,HRe),e(xE,URe),e(Xo,JRe),e(Xo,kE),e(kE,YRe),e(kE,wW),e(wW,KRe),e(kE,ZRe),e(Xo,eSe),e(Xo,fo),g(RE,fo,null),e(fo,oSe),e(fo,AW),e(AW,rSe),e(fo,tSe),e(fo,Di),e(Di,aSe),e(Di,LW),e(LW,nSe),e(Di,sSe),e(Di,BW),e(BW,lSe),e(Di,iSe),e(fo,dSe),e(fo,b),e(b,kf),e(kf,xW),e(xW,cSe),e(kf,fSe),e(kf,h8),e(h8,mSe),e(kf,gSe),e(b,hSe),e(b,Rf),e(Rf,kW),e(kW,uSe),e(Rf,pSe),e(Rf,u8),e(u8,_Se),e(Rf,vSe),e(b,bSe),e(b,Sf),e(Sf,RW),e(RW,TSe),e(Sf,FSe),e(Sf,p8),e(p8,CSe),e(Sf,MSe),e(b,ESe),e(b,Pf),e(Pf,SW),e(SW,ySe),e(Pf,wSe),e(Pf,_8),e(_8,ASe),e(Pf,LSe),e(b,BSe),e(b,$f),e($f,PW),e(PW,xSe),e($f,kSe),e($f,v8),e(v8,RSe),e($f,SSe),e(b,PSe),e(b,If),e(If,$W),e($W,$Se),e(If,ISe),e(If,b8),e(b8,DSe),e(If,jSe),e(b,NSe),e(b,Df),e(Df,IW),e(IW,qSe),e(Df,GSe),e(Df,T8),e(T8,OSe),e(Df,XSe),e(b,VSe),e(b,jf),e(jf,DW),e(DW,zSe),e(jf,WSe),e(jf,F8),e(F8,QSe),e(jf,HSe),e(b,USe),e(b,Nf),e(Nf,jW),e(jW,JSe),e(Nf,YSe),e(Nf,C8),e(C8,KSe),e(Nf,ZSe),e(b,ePe),e(b,qf),e(qf,NW),e(NW,oPe),e(qf,rPe),e(qf,M8),e(M8,tPe),e(qf,aPe),e(b,nPe),e(b,Gf),e(Gf,qW),e(qW,sPe),e(Gf,lPe),e(Gf,E8),e(E8,iPe),e(Gf,dPe),e(b,cPe),e(b,Of),e(Of,GW),e(GW,fPe),e(Of,mPe),e(Of,y8),e(y8,gPe),e(Of,hPe),e(b,uPe),e(b,Xf),e(Xf,OW),e(OW,pPe),e(Xf,_Pe),e(Xf,w8),e(w8,vPe),e(Xf,bPe),e(b,TPe),e(b,Vf),e(Vf,XW),e(XW,FPe),e(Vf,CPe),e(Vf,A8),e(A8,MPe),e(Vf,EPe),e(b,yPe),e(b,zf),e(zf,VW),e(VW,wPe),e(zf,APe),e(zf,L8),e(L8,LPe),e(zf,BPe),e(b,xPe),e(b,Wf),e(Wf,zW),e(zW,kPe),e(Wf,RPe),e(Wf,B8),e(B8,SPe),e(Wf,PPe),e(b,$Pe),e(b,Qf),e(Qf,WW),e(WW,IPe),e(Qf,DPe),e(Qf,x8),e(x8,jPe),e(Qf,NPe),e(b,qPe),e(b,Hf),e(Hf,QW),e(QW,GPe),e(Hf,OPe),e(Hf,k8),e(k8,XPe),e(Hf,VPe),e(b,zPe),e(b,Uf),e(Uf,HW),e(HW,WPe),e(Uf,QPe),e(Uf,R8),e(R8,HPe),e(Uf,UPe),e(b,JPe),e(b,Jf),e(Jf,UW),e(UW,YPe),e(Jf,KPe),e(Jf,S8),e(S8,ZPe),e(Jf,e$e),e(b,o$e),e(b,Yf),e(Yf,JW),e(JW,r$e),e(Yf,t$e),e(Yf,P8),e(P8,a$e),e(Yf,n$e),e(b,s$e),e(b,Kf),e(Kf,YW),e(YW,l$e),e(Kf,i$e),e(Kf,$8),e($8,d$e),e(Kf,c$e),e(b,f$e),e(b,Zf),e(Zf,KW),e(KW,m$e),e(Zf,g$e),e(Zf,I8),e(I8,h$e),e(Zf,u$e),e(b,p$e),e(b,em),e(em,ZW),e(ZW,_$e),e(em,v$e),e(em,D8),e(D8,b$e),e(em,T$e),e(b,F$e),e(b,om),e(om,eQ),e(eQ,C$e),e(om,M$e),e(om,j8),e(j8,E$e),e(om,y$e),e(b,w$e),e(b,rm),e(rm,oQ),e(oQ,A$e),e(rm,L$e),e(rm,N8),e(N8,B$e),e(rm,x$e),e(b,k$e),e(b,tm),e(tm,rQ),e(rQ,R$e),e(tm,S$e),e(tm,q8),e(q8,P$e),e(tm,$$e),e(b,I$e),e(b,am),e(am,tQ),e(tQ,D$e),e(am,j$e),e(am,G8),e(G8,N$e),e(am,q$e),e(b,G$e),e(b,nm),e(nm,aQ),e(aQ,O$e),e(nm,X$e),e(nm,O8),e(O8,V$e),e(nm,z$e),e(b,W$e),e(b,sm),e(sm,nQ),e(nQ,Q$e),e(sm,H$e),e(sm,X8),e(X8,U$e),e(sm,J$e),e(b,Y$e),e(b,lm),e(lm,sQ),e(sQ,K$e),e(lm,Z$e),e(lm,V8),e(V8,eIe),e(lm,oIe),e(b,rIe),e(b,im),e(im,lQ),e(lQ,tIe),e(im,aIe),e(im,z8),e(z8,nIe),e(im,sIe),e(b,lIe),e(b,dm),e(dm,iQ),e(iQ,iIe),e(dm,dIe),e(dm,W8),e(W8,cIe),e(dm,fIe),e(b,mIe),e(b,cm),e(cm,dQ),e(dQ,gIe),e(cm,hIe),e(cm,Q8),e(Q8,uIe),e(cm,pIe),e(b,_Ie),e(b,fm),e(fm,cQ),e(cQ,vIe),e(fm,bIe),e(fm,H8),e(H8,TIe),e(fm,FIe),e(b,CIe),e(b,mm),e(mm,fQ),e(fQ,MIe),e(mm,EIe),e(mm,U8),e(U8,yIe),e(mm,wIe),e(b,AIe),e(b,gm),e(gm,mQ),e(mQ,LIe),e(gm,BIe),e(gm,J8),e(J8,xIe),e(gm,kIe),e(b,RIe),e(b,hm),e(hm,gQ),e(gQ,SIe),e(hm,PIe),e(hm,Y8),e(Y8,$Ie),e(hm,IIe),e(b,DIe),e(b,um),e(um,hQ),e(hQ,jIe),e(um,NIe),e(um,K8),e(K8,qIe),e(um,GIe),e(b,OIe),e(b,pm),e(pm,uQ),e(uQ,XIe),e(pm,VIe),e(pm,Z8),e(Z8,zIe),e(pm,WIe),e(b,QIe),e(b,_m),e(_m,pQ),e(pQ,HIe),e(_m,UIe),e(_m,e9),e(e9,JIe),e(_m,YIe),e(b,KIe),e(b,vm),e(vm,_Q),e(_Q,ZIe),e(vm,eDe),e(vm,o9),e(o9,oDe),e(vm,rDe),e(b,tDe),e(b,bm),e(bm,vQ),e(vQ,aDe),e(bm,nDe),e(bm,r9),e(r9,sDe),e(bm,lDe),e(b,iDe),e(b,Tm),e(Tm,bQ),e(bQ,dDe),e(Tm,cDe),e(Tm,t9),e(t9,fDe),e(Tm,mDe),e(b,gDe),e(b,Fm),e(Fm,TQ),e(TQ,hDe),e(Fm,uDe),e(Fm,a9),e(a9,pDe),e(Fm,_De),e(b,vDe),e(b,Cm),e(Cm,FQ),e(FQ,bDe),e(Cm,TDe),e(Cm,n9),e(n9,FDe),e(Cm,CDe),e(b,MDe),e(b,Mm),e(Mm,CQ),e(CQ,EDe),e(Mm,yDe),e(Mm,s9),e(s9,wDe),e(Mm,ADe),e(b,LDe),e(b,Em),e(Em,MQ),e(MQ,BDe),e(Em,xDe),e(Em,l9),e(l9,kDe),e(Em,RDe),e(b,SDe),e(b,ym),e(ym,EQ),e(EQ,PDe),e(ym,$De),e(ym,i9),e(i9,IDe),e(ym,DDe),e(b,jDe),e(b,wm),e(wm,yQ),e(yQ,NDe),e(wm,qDe),e(wm,d9),e(d9,GDe),e(wm,ODe),e(b,XDe),e(b,Am),e(Am,wQ),e(wQ,VDe),e(Am,zDe),e(Am,c9),e(c9,WDe),e(Am,QDe),e(b,HDe),e(b,Lm),e(Lm,AQ),e(AQ,UDe),e(Lm,JDe),e(Lm,f9),e(f9,YDe),e(Lm,KDe),e(b,ZDe),e(b,Bm),e(Bm,LQ),e(LQ,eje),e(Bm,oje),e(Bm,m9),e(m9,rje),e(Bm,tje),e(b,aje),e(b,xm),e(xm,BQ),e(BQ,nje),e(xm,sje),e(xm,g9),e(g9,lje),e(xm,ije),e(b,dje),e(b,km),e(km,xQ),e(xQ,cje),e(km,fje),e(km,h9),e(h9,mje),e(km,gje),e(b,hje),e(b,Rm),e(Rm,kQ),e(kQ,uje),e(Rm,pje),e(Rm,u9),e(u9,_je),e(Rm,vje),e(b,bje),e(b,Sm),e(Sm,RQ),e(RQ,Tje),e(Sm,Fje),e(Sm,p9),e(p9,Cje),e(Sm,Mje),e(b,Eje),e(b,Pm),e(Pm,SQ),e(SQ,yje),e(Pm,wje),e(Pm,_9),e(_9,Aje),e(Pm,Lje),e(b,Bje),e(b,$m),e($m,PQ),e(PQ,xje),e($m,kje),e($m,v9),e(v9,Rje),e($m,Sje),e(b,Pje),e(b,Im),e(Im,$Q),e($Q,$je),e(Im,Ije),e(Im,b9),e(b9,Dje),e(Im,jje),e(b,Nje),e(b,Dm),e(Dm,IQ),e(IQ,qje),e(Dm,Gje),e(Dm,T9),e(T9,Oje),e(Dm,Xje),e(b,Vje),e(b,jm),e(jm,DQ),e(DQ,zje),e(jm,Wje),e(jm,F9),e(F9,Qje),e(jm,Hje),e(b,Uje),e(b,Nm),e(Nm,jQ),e(jQ,Jje),e(Nm,Yje),e(Nm,C9),e(C9,Kje),e(Nm,Zje),e(b,eNe),e(b,qm),e(qm,NQ),e(NQ,oNe),e(qm,rNe),e(qm,M9),e(M9,tNe),e(qm,aNe),e(b,nNe),e(b,Gm),e(Gm,qQ),e(qQ,sNe),e(Gm,lNe),e(Gm,E9),e(E9,iNe),e(Gm,dNe),e(b,cNe),e(b,Om),e(Om,GQ),e(GQ,fNe),e(Om,mNe),e(Om,y9),e(y9,gNe),e(Om,hNe),e(b,uNe),e(b,Xm),e(Xm,OQ),e(OQ,pNe),e(Xm,_Ne),e(Xm,w9),e(w9,vNe),e(Xm,bNe),e(b,TNe),e(b,Vm),e(Vm,XQ),e(XQ,FNe),e(Vm,CNe),e(Vm,A9),e(A9,MNe),e(Vm,ENe),e(b,yNe),e(b,zm),e(zm,VQ),e(VQ,wNe),e(zm,ANe),e(zm,L9),e(L9,LNe),e(zm,BNe),e(b,xNe),e(b,Wm),e(Wm,zQ),e(zQ,kNe),e(Wm,RNe),e(Wm,B9),e(B9,SNe),e(Wm,PNe),e(b,$Ne),e(b,Qm),e(Qm,WQ),e(WQ,INe),e(Qm,DNe),e(Qm,x9),e(x9,jNe),e(Qm,NNe),e(b,qNe),e(b,Hm),e(Hm,QQ),e(QQ,GNe),e(Hm,ONe),e(Hm,k9),e(k9,XNe),e(Hm,VNe),e(b,zNe),e(b,Um),e(Um,HQ),e(HQ,WNe),e(Um,QNe),e(Um,R9),e(R9,HNe),e(Um,UNe),e(b,JNe),e(b,Jm),e(Jm,UQ),e(UQ,YNe),e(Jm,KNe),e(Jm,S9),e(S9,ZNe),e(Jm,eqe),e(b,oqe),e(b,Ym),e(Ym,JQ),e(JQ,rqe),e(Ym,tqe),e(Ym,P9),e(P9,aqe),e(Ym,nqe),e(b,sqe),e(b,Km),e(Km,YQ),e(YQ,lqe),e(Km,iqe),e(Km,$9),e($9,dqe),e(Km,cqe),e(b,fqe),e(b,Zm),e(Zm,KQ),e(KQ,mqe),e(Zm,gqe),e(Zm,I9),e(I9,hqe),e(Zm,uqe),e(b,pqe),e(b,eg),e(eg,ZQ),e(ZQ,_qe),e(eg,vqe),e(eg,D9),e(D9,bqe),e(eg,Tqe),e(b,Fqe),e(b,og),e(og,eH),e(eH,Cqe),e(og,Mqe),e(og,j9),e(j9,Eqe),e(og,yqe),e(b,wqe),e(b,rg),e(rg,oH),e(oH,Aqe),e(rg,Lqe),e(rg,N9),e(N9,Bqe),e(rg,xqe),e(b,kqe),e(b,tg),e(tg,rH),e(rH,Rqe),e(tg,Sqe),e(tg,q9),e(q9,Pqe),e(tg,$qe),e(b,Iqe),e(b,ag),e(ag,tH),e(tH,Dqe),e(ag,jqe),e(ag,G9),e(G9,Nqe),e(ag,qqe),e(b,Gqe),e(b,ng),e(ng,aH),e(aH,Oqe),e(ng,Xqe),e(ng,O9),e(O9,Vqe),e(ng,zqe),e(b,Wqe),e(b,sg),e(sg,nH),e(nH,Qqe),e(sg,Hqe),e(sg,X9),e(X9,Uqe),e(sg,Jqe),e(b,Yqe),e(b,lg),e(lg,sH),e(sH,Kqe),e(lg,Zqe),e(lg,V9),e(V9,eGe),e(lg,oGe),e(b,rGe),e(b,ig),e(ig,lH),e(lH,tGe),e(ig,aGe),e(ig,z9),e(z9,nGe),e(ig,sGe),e(b,lGe),e(b,dg),e(dg,iH),e(iH,iGe),e(dg,dGe),e(dg,W9),e(W9,cGe),e(dg,fGe),e(b,mGe),e(b,cg),e(cg,dH),e(dH,gGe),e(cg,hGe),e(cg,Q9),e(Q9,uGe),e(cg,pGe),e(b,_Ge),e(b,fg),e(fg,cH),e(cH,vGe),e(fg,bGe),e(fg,H9),e(H9,TGe),e(fg,FGe),e(b,CGe),e(b,mg),e(mg,fH),e(fH,MGe),e(mg,EGe),e(mg,U9),e(U9,yGe),e(mg,wGe),e(b,AGe),e(b,gg),e(gg,mH),e(mH,LGe),e(gg,BGe),e(gg,J9),e(J9,xGe),e(gg,kGe),e(b,RGe),e(b,hg),e(hg,gH),e(gH,SGe),e(hg,PGe),e(hg,Y9),e(Y9,$Ge),e(hg,IGe),e(b,DGe),e(b,ug),e(ug,hH),e(hH,jGe),e(ug,NGe),e(ug,K9),e(K9,qGe),e(ug,GGe),e(b,OGe),e(b,pg),e(pg,uH),e(uH,XGe),e(pg,VGe),e(pg,Z9),e(Z9,zGe),e(pg,WGe),e(fo,QGe),e(fo,pH),e(pH,HGe),e(fo,UGe),g(SE,fo,null),e(Xo,JGe),e(Xo,_g),g(PE,_g,null),e(_g,YGe),e(_g,_H),e(_H,KGe),v(c,R9e,_),v(c,ji,_),e(ji,vg),e(vg,vH),g($E,vH,null),e(ji,ZGe),e(ji,bH),e(bH,eOe),v(c,S9e,_),v(c,Vo,_),g(IE,Vo,null),e(Vo,oOe),e(Vo,DE),e(DE,rOe),e(DE,eB),e(eB,tOe),e(DE,aOe),e(Vo,nOe),e(Vo,jE),e(jE,sOe),e(jE,TH),e(TH,lOe),e(jE,iOe),e(Vo,dOe),e(Vo,mo),g(NE,mo,null),e(mo,cOe),e(mo,FH),e(FH,fOe),e(mo,mOe),e(mo,Da),e(Da,gOe),e(Da,CH),e(CH,hOe),e(Da,uOe),e(Da,MH),e(MH,pOe),e(Da,_Oe),e(Da,EH),e(EH,vOe),e(Da,bOe),e(mo,TOe),e(mo,M),e(M,Gn),e(Gn,yH),e(yH,FOe),e(Gn,COe),e(Gn,oB),e(oB,MOe),e(Gn,EOe),e(Gn,rB),e(rB,yOe),e(Gn,wOe),e(M,AOe),e(M,On),e(On,wH),e(wH,LOe),e(On,BOe),e(On,tB),e(tB,xOe),e(On,kOe),e(On,aB),e(aB,ROe),e(On,SOe),e(M,POe),e(M,Xn),e(Xn,AH),e(AH,$Oe),e(Xn,IOe),e(Xn,nB),e(nB,DOe),e(Xn,jOe),e(Xn,sB),e(sB,NOe),e(Xn,qOe),e(M,GOe),e(M,bg),e(bg,LH),e(LH,OOe),e(bg,XOe),e(bg,lB),e(lB,VOe),e(bg,zOe),e(M,WOe),e(M,Vn),e(Vn,BH),e(BH,QOe),e(Vn,HOe),e(Vn,iB),e(iB,UOe),e(Vn,JOe),e(Vn,dB),e(dB,YOe),e(Vn,KOe),e(M,ZOe),e(M,Tg),e(Tg,xH),e(xH,eXe),e(Tg,oXe),e(Tg,cB),e(cB,rXe),e(Tg,tXe),e(M,aXe),e(M,Fg),e(Fg,kH),e(kH,nXe),e(Fg,sXe),e(Fg,fB),e(fB,lXe),e(Fg,iXe),e(M,dXe),e(M,Cg),e(Cg,RH),e(RH,cXe),e(Cg,fXe),e(Cg,mB),e(mB,mXe),e(Cg,gXe),e(M,hXe),e(M,zn),e(zn,SH),e(SH,uXe),e(zn,pXe),e(zn,gB),e(gB,_Xe),e(zn,vXe),e(zn,hB),e(hB,bXe),e(zn,TXe),e(M,FXe),e(M,Wn),e(Wn,PH),e(PH,CXe),e(Wn,MXe),e(Wn,uB),e(uB,EXe),e(Wn,yXe),e(Wn,pB),e(pB,wXe),e(Wn,AXe),e(M,LXe),e(M,Qn),e(Qn,$H),e($H,BXe),e(Qn,xXe),e(Qn,_B),e(_B,kXe),e(Qn,RXe),e(Qn,vB),e(vB,SXe),e(Qn,PXe),e(M,$Xe),e(M,Mg),e(Mg,IH),e(IH,IXe),e(Mg,DXe),e(Mg,bB),e(bB,jXe),e(Mg,NXe),e(M,qXe),e(M,Eg),e(Eg,DH),e(DH,GXe),e(Eg,OXe),e(Eg,TB),e(TB,XXe),e(Eg,VXe),e(M,zXe),e(M,Hn),e(Hn,jH),e(jH,WXe),e(Hn,QXe),e(Hn,FB),e(FB,HXe),e(Hn,UXe),e(Hn,CB),e(CB,JXe),e(Hn,YXe),e(M,KXe),e(M,yg),e(yg,NH),e(NH,ZXe),e(yg,eVe),e(yg,MB),e(MB,oVe),e(yg,rVe),e(M,tVe),e(M,Un),e(Un,qH),e(qH,aVe),e(Un,nVe),e(Un,EB),e(EB,sVe),e(Un,lVe),e(Un,yB),e(yB,iVe),e(Un,dVe),e(M,cVe),e(M,Jn),e(Jn,GH),e(GH,fVe),e(Jn,mVe),e(Jn,wB),e(wB,gVe),e(Jn,hVe),e(Jn,AB),e(AB,uVe),e(Jn,pVe),e(M,_Ve),e(M,Yn),e(Yn,OH),e(OH,vVe),e(Yn,bVe),e(Yn,LB),e(LB,TVe),e(Yn,FVe),e(Yn,XH),e(XH,CVe),e(Yn,MVe),e(M,EVe),e(M,wg),e(wg,VH),e(VH,yVe),e(wg,wVe),e(wg,BB),e(BB,AVe),e(wg,LVe),e(M,BVe),e(M,Kn),e(Kn,zH),e(zH,xVe),e(Kn,kVe),e(Kn,xB),e(xB,RVe),e(Kn,SVe),e(Kn,kB),e(kB,PVe),e(Kn,$Ve),e(M,IVe),e(M,Ag),e(Ag,WH),e(WH,DVe),e(Ag,jVe),e(Ag,RB),e(RB,NVe),e(Ag,qVe),e(M,GVe),e(M,Zn),e(Zn,QH),e(QH,OVe),e(Zn,XVe),e(Zn,SB),e(SB,VVe),e(Zn,zVe),e(Zn,PB),e(PB,WVe),e(Zn,QVe),e(M,HVe),e(M,es),e(es,HH),e(HH,UVe),e(es,JVe),e(es,$B),e($B,YVe),e(es,KVe),e(es,IB),e(IB,ZVe),e(es,eze),e(M,oze),e(M,os),e(os,UH),e(UH,rze),e(os,tze),e(os,DB),e(DB,aze),e(os,nze),e(os,jB),e(jB,sze),e(os,lze),e(M,ize),e(M,Lg),e(Lg,JH),e(JH,dze),e(Lg,cze),e(Lg,NB),e(NB,fze),e(Lg,mze),e(M,gze),e(M,rs),e(rs,YH),e(YH,hze),e(rs,uze),e(rs,qB),e(qB,pze),e(rs,_ze),e(rs,GB),e(GB,vze),e(rs,bze),e(M,Tze),e(M,Bg),e(Bg,KH),e(KH,Fze),e(Bg,Cze),e(Bg,OB),e(OB,Mze),e(Bg,Eze),e(M,yze),e(M,ts),e(ts,ZH),e(ZH,wze),e(ts,Aze),e(ts,XB),e(XB,Lze),e(ts,Bze),e(ts,VB),e(VB,xze),e(ts,kze),e(M,Rze),e(M,as),e(as,eU),e(eU,Sze),e(as,Pze),e(as,zB),e(zB,$ze),e(as,Ize),e(as,WB),e(WB,Dze),e(as,jze),e(M,Nze),e(M,ns),e(ns,oU),e(oU,qze),e(ns,Gze),e(ns,QB),e(QB,Oze),e(ns,Xze),e(ns,HB),e(HB,Vze),e(ns,zze),e(M,Wze),e(M,ss),e(ss,rU),e(rU,Qze),e(ss,Hze),e(ss,UB),e(UB,Uze),e(ss,Jze),e(ss,JB),e(JB,Yze),e(ss,Kze),e(M,Zze),e(M,xg),e(xg,tU),e(tU,eWe),e(xg,oWe),e(xg,YB),e(YB,rWe),e(xg,tWe),e(M,aWe),e(M,ls),e(ls,aU),e(aU,nWe),e(ls,sWe),e(ls,KB),e(KB,lWe),e(ls,iWe),e(ls,ZB),e(ZB,dWe),e(ls,cWe),e(M,fWe),e(M,is),e(is,nU),e(nU,mWe),e(is,gWe),e(is,ex),e(ex,hWe),e(is,uWe),e(is,ox),e(ox,pWe),e(is,_We),e(M,vWe),e(M,ds),e(ds,sU),e(sU,bWe),e(ds,TWe),e(ds,rx),e(rx,FWe),e(ds,CWe),e(ds,tx),e(tx,MWe),e(ds,EWe),e(M,yWe),e(M,cs),e(cs,lU),e(lU,wWe),e(cs,AWe),e(cs,ax),e(ax,LWe),e(cs,BWe),e(cs,nx),e(nx,xWe),e(cs,kWe),e(M,RWe),e(M,fs),e(fs,iU),e(iU,SWe),e(fs,PWe),e(fs,sx),e(sx,$We),e(fs,IWe),e(fs,lx),e(lx,DWe),e(fs,jWe),e(M,NWe),e(M,ms),e(ms,dU),e(dU,qWe),e(ms,GWe),e(ms,ix),e(ix,OWe),e(ms,XWe),e(ms,dx),e(dx,VWe),e(ms,zWe),e(M,WWe),e(M,kg),e(kg,cU),e(cU,QWe),e(kg,HWe),e(kg,cx),e(cx,UWe),e(kg,JWe),e(M,YWe),e(M,gs),e(gs,fU),e(fU,KWe),e(gs,ZWe),e(gs,fx),e(fx,eQe),e(gs,oQe),e(gs,mx),e(mx,rQe),e(gs,tQe),e(M,aQe),e(M,Rg),e(Rg,mU),e(mU,nQe),e(Rg,sQe),e(Rg,gx),e(gx,lQe),e(Rg,iQe),e(M,dQe),e(M,Sg),e(Sg,gU),e(gU,cQe),e(Sg,fQe),e(Sg,hx),e(hx,mQe),e(Sg,gQe),e(M,hQe),e(M,hs),e(hs,hU),e(hU,uQe),e(hs,pQe),e(hs,ux),e(ux,_Qe),e(hs,vQe),e(hs,px),e(px,bQe),e(hs,TQe),e(M,FQe),e(M,us),e(us,uU),e(uU,CQe),e(us,MQe),e(us,_x),e(_x,EQe),e(us,yQe),e(us,vx),e(vx,wQe),e(us,AQe),e(M,LQe),e(M,Pg),e(Pg,pU),e(pU,BQe),e(Pg,xQe),e(Pg,bx),e(bx,kQe),e(Pg,RQe),e(M,SQe),e(M,ps),e(ps,_U),e(_U,PQe),e(ps,$Qe),e(ps,Tx),e(Tx,IQe),e(ps,DQe),e(ps,Fx),e(Fx,jQe),e(ps,NQe),e(M,qQe),e(M,_s),e(_s,vU),e(vU,GQe),e(_s,OQe),e(_s,Cx),e(Cx,XQe),e(_s,VQe),e(_s,Mx),e(Mx,zQe),e(_s,WQe),e(M,QQe),e(M,vs),e(vs,bU),e(bU,HQe),e(vs,UQe),e(vs,Ex),e(Ex,JQe),e(vs,YQe),e(vs,yx),e(yx,KQe),e(vs,ZQe),e(M,eHe),e(M,bs),e(bs,TU),e(TU,oHe),e(bs,rHe),e(bs,wx),e(wx,tHe),e(bs,aHe),e(bs,Ax),e(Ax,nHe),e(bs,sHe),e(M,lHe),e(M,Ts),e(Ts,FU),e(FU,iHe),e(Ts,dHe),e(Ts,Lx),e(Lx,cHe),e(Ts,fHe),e(Ts,Bx),e(Bx,mHe),e(Ts,gHe),e(M,hHe),e(M,$g),e($g,CU),e(CU,uHe),e($g,pHe),e($g,xx),e(xx,_He),e($g,vHe),e(M,bHe),e(M,Ig),e(Ig,MU),e(MU,THe),e(Ig,FHe),e(Ig,kx),e(kx,CHe),e(Ig,MHe),e(M,EHe),e(M,Dg),e(Dg,EU),e(EU,yHe),e(Dg,wHe),e(Dg,Rx),e(Rx,AHe),e(Dg,LHe),e(M,BHe),e(M,jg),e(jg,yU),e(yU,xHe),e(jg,kHe),e(jg,Sx),e(Sx,RHe),e(jg,SHe),e(M,PHe),e(M,Fs),e(Fs,wU),e(wU,$He),e(Fs,IHe),e(Fs,Px),e(Px,DHe),e(Fs,jHe),e(Fs,$x),e($x,NHe),e(Fs,qHe),e(M,GHe),e(M,Ng),e(Ng,AU),e(AU,OHe),e(Ng,XHe),e(Ng,Ix),e(Ix,VHe),e(Ng,zHe),e(M,WHe),e(M,Cs),e(Cs,LU),e(LU,QHe),e(Cs,HHe),e(Cs,Dx),e(Dx,UHe),e(Cs,JHe),e(Cs,jx),e(jx,YHe),e(Cs,KHe),e(M,ZHe),e(M,Ms),e(Ms,BU),e(BU,eUe),e(Ms,oUe),e(Ms,Nx),e(Nx,rUe),e(Ms,tUe),e(Ms,qx),e(qx,aUe),e(Ms,nUe),e(M,sUe),e(M,Es),e(Es,xU),e(xU,lUe),e(Es,iUe),e(Es,Gx),e(Gx,dUe),e(Es,cUe),e(Es,Ox),e(Ox,fUe),e(Es,mUe),e(M,gUe),e(M,ys),e(ys,kU),e(kU,hUe),e(ys,uUe),e(ys,Xx),e(Xx,pUe),e(ys,_Ue),e(ys,Vx),e(Vx,vUe),e(ys,bUe),e(M,TUe),e(M,ws),e(ws,RU),e(RU,FUe),e(ws,CUe),e(ws,zx),e(zx,MUe),e(ws,EUe),e(ws,Wx),e(Wx,yUe),e(ws,wUe),e(M,AUe),e(M,qg),e(qg,SU),e(SU,LUe),e(qg,BUe),e(qg,Qx),e(Qx,xUe),e(qg,kUe),e(M,RUe),e(M,Gg),e(Gg,PU),e(PU,SUe),e(Gg,PUe),e(Gg,Hx),e(Hx,$Ue),e(Gg,IUe),e(M,DUe),e(M,As),e(As,$U),e($U,jUe),e(As,NUe),e(As,Ux),e(Ux,qUe),e(As,GUe),e(As,Jx),e(Jx,OUe),e(As,XUe),e(M,VUe),e(M,Ls),e(Ls,IU),e(IU,zUe),e(Ls,WUe),e(Ls,Yx),e(Yx,QUe),e(Ls,HUe),e(Ls,Kx),e(Kx,UUe),e(Ls,JUe),e(M,YUe),e(M,Bs),e(Bs,DU),e(DU,KUe),e(Bs,ZUe),e(Bs,Zx),e(Zx,eJe),e(Bs,oJe),e(Bs,ek),e(ek,rJe),e(Bs,tJe),e(M,aJe),e(M,Og),e(Og,jU),e(jU,nJe),e(Og,sJe),e(Og,ok),e(ok,lJe),e(Og,iJe),e(M,dJe),e(M,Xg),e(Xg,NU),e(NU,cJe),e(Xg,fJe),e(Xg,rk),e(rk,mJe),e(Xg,gJe),e(M,hJe),e(M,Vg),e(Vg,qU),e(qU,uJe),e(Vg,pJe),e(Vg,tk),e(tk,_Je),e(Vg,vJe),e(M,bJe),e(M,zg),e(zg,GU),e(GU,TJe),e(zg,FJe),e(zg,ak),e(ak,CJe),e(zg,MJe),e(M,EJe),e(M,xs),e(xs,OU),e(OU,yJe),e(xs,wJe),e(xs,nk),e(nk,AJe),e(xs,LJe),e(xs,sk),e(sk,BJe),e(xs,xJe),e(M,kJe),e(M,Wg),e(Wg,XU),e(XU,RJe),e(Wg,SJe),e(Wg,lk),e(lk,PJe),e(Wg,$Je),e(M,IJe),e(M,Qg),e(Qg,VU),e(VU,DJe),e(Qg,jJe),e(Qg,ik),e(ik,NJe),e(Qg,qJe),e(M,GJe),e(M,ks),e(ks,zU),e(zU,OJe),e(ks,XJe),e(ks,dk),e(dk,VJe),e(ks,zJe),e(ks,ck),e(ck,WJe),e(ks,QJe),e(M,HJe),e(M,Rs),e(Rs,WU),e(WU,UJe),e(Rs,JJe),e(Rs,fk),e(fk,YJe),e(Rs,KJe),e(Rs,mk),e(mk,ZJe),e(Rs,eYe),e(mo,oYe),e(mo,QU),e(QU,rYe),e(mo,tYe),g(qE,mo,null),e(Vo,aYe),e(Vo,Hg),g(GE,Hg,null),e(Hg,nYe),e(Hg,HU),e(HU,sYe),v(c,P9e,_),v(c,Ni,_),e(Ni,Ug),e(Ug,UU),g(OE,UU,null),e(Ni,lYe),e(Ni,JU),e(JU,iYe),v(c,$9e,_),v(c,zo,_),g(XE,zo,null),e(zo,dYe),e(zo,VE),e(VE,cYe),e(VE,gk),e(gk,fYe),e(VE,mYe),e(zo,gYe),e(zo,zE),e(zE,hYe),e(zE,YU),e(YU,uYe),e(zE,pYe),e(zo,_Ye),e(zo,xe),g(WE,xe,null),e(xe,vYe),e(xe,KU),e(KU,bYe),e(xe,TYe),e(xe,ja),e(ja,FYe),e(ja,ZU),e(ZU,CYe),e(ja,MYe),e(ja,eJ),e(eJ,EYe),e(ja,yYe),e(ja,oJ),e(oJ,wYe),e(ja,AYe),e(xe,LYe),e(xe,se),e(se,Jg),e(Jg,rJ),e(rJ,BYe),e(Jg,xYe),e(Jg,hk),e(hk,kYe),e(Jg,RYe),e(se,SYe),e(se,Yg),e(Yg,tJ),e(tJ,PYe),e(Yg,$Ye),e(Yg,uk),e(uk,IYe),e(Yg,DYe),e(se,jYe),e(se,Kg),e(Kg,aJ),e(aJ,NYe),e(Kg,qYe),e(Kg,pk),e(pk,GYe),e(Kg,OYe),e(se,XYe),e(se,Zg),e(Zg,nJ),e(nJ,VYe),e(Zg,zYe),e(Zg,_k),e(_k,WYe),e(Zg,QYe),e(se,HYe),e(se,eh),e(eh,sJ),e(sJ,UYe),e(eh,JYe),e(eh,vk),e(vk,YYe),e(eh,KYe),e(se,ZYe),e(se,oh),e(oh,lJ),e(lJ,eKe),e(oh,oKe),e(oh,bk),e(bk,rKe),e(oh,tKe),e(se,aKe),e(se,rh),e(rh,iJ),e(iJ,nKe),e(rh,sKe),e(rh,Tk),e(Tk,lKe),e(rh,iKe),e(se,dKe),e(se,th),e(th,dJ),e(dJ,cKe),e(th,fKe),e(th,Fk),e(Fk,mKe),e(th,gKe),e(se,hKe),e(se,ah),e(ah,cJ),e(cJ,uKe),e(ah,pKe),e(ah,Ck),e(Ck,_Ke),e(ah,vKe),e(se,bKe),e(se,nh),e(nh,fJ),e(fJ,TKe),e(nh,FKe),e(nh,Mk),e(Mk,CKe),e(nh,MKe),e(se,EKe),e(se,sh),e(sh,mJ),e(mJ,yKe),e(sh,wKe),e(sh,Ek),e(Ek,AKe),e(sh,LKe),e(se,BKe),e(se,lh),e(lh,gJ),e(gJ,xKe),e(lh,kKe),e(lh,yk),e(yk,RKe),e(lh,SKe),e(se,PKe),e(se,ih),e(ih,hJ),e(hJ,$Ke),e(ih,IKe),e(ih,wk),e(wk,DKe),e(ih,jKe),e(se,NKe),e(se,dh),e(dh,uJ),e(uJ,qKe),e(dh,GKe),e(dh,Ak),e(Ak,OKe),e(dh,XKe),e(se,VKe),e(se,ch),e(ch,pJ),e(pJ,zKe),e(ch,WKe),e(ch,Lk),e(Lk,QKe),e(ch,HKe),e(xe,UKe),g(fh,xe,null),e(xe,JKe),e(xe,_J),e(_J,YKe),e(xe,KKe),g(QE,xe,null),e(zo,ZKe),e(zo,mh),g(HE,mh,null),e(mh,eZe),e(mh,vJ),e(vJ,oZe),v(c,I9e,_),v(c,qi,_),e(qi,gh),e(gh,bJ),g(UE,bJ,null),e(qi,rZe),e(qi,TJ),e(TJ,tZe),v(c,D9e,_),v(c,Wo,_),g(JE,Wo,null),e(Wo,aZe),e(Wo,YE),e(YE,nZe),e(YE,Bk),e(Bk,sZe),e(YE,lZe),e(Wo,iZe),e(Wo,KE),e(KE,dZe),e(KE,FJ),e(FJ,cZe),e(KE,fZe),e(Wo,mZe),e(Wo,ke),g(ZE,ke,null),e(ke,gZe),e(ke,CJ),e(CJ,hZe),e(ke,uZe),e(ke,Gi),e(Gi,pZe),e(Gi,MJ),e(MJ,_Ze),e(Gi,vZe),e(Gi,EJ),e(EJ,bZe),e(Gi,TZe),e(ke,FZe),e(ke,we),e(we,hh),e(hh,yJ),e(yJ,CZe),e(hh,MZe),e(hh,xk),e(xk,EZe),e(hh,yZe),e(we,wZe),e(we,uh),e(uh,wJ),e(wJ,AZe),e(uh,LZe),e(uh,kk),e(kk,BZe),e(uh,xZe),e(we,kZe),e(we,ph),e(ph,AJ),e(AJ,RZe),e(ph,SZe),e(ph,Rk),e(Rk,PZe),e(ph,$Ze),e(we,IZe),e(we,_h),e(_h,LJ),e(LJ,DZe),e(_h,jZe),e(_h,Sk),e(Sk,NZe),e(_h,qZe),e(we,GZe),e(we,vh),e(vh,BJ),e(BJ,OZe),e(vh,XZe),e(vh,Pk),e(Pk,VZe),e(vh,zZe),e(we,WZe),e(we,bh),e(bh,xJ),e(xJ,QZe),e(bh,HZe),e(bh,$k),e($k,UZe),e(bh,JZe),e(we,YZe),e(we,Th),e(Th,kJ),e(kJ,KZe),e(Th,ZZe),e(Th,Ik),e(Ik,eeo),e(Th,oeo),e(we,reo),e(we,Fh),e(Fh,RJ),e(RJ,teo),e(Fh,aeo),e(Fh,Dk),e(Dk,neo),e(Fh,seo),e(ke,leo),g(Ch,ke,null),e(ke,ieo),e(ke,SJ),e(SJ,deo),e(ke,ceo),g(e3,ke,null),e(Wo,feo),e(Wo,Mh),g(o3,Mh,null),e(Mh,meo),e(Mh,PJ),e(PJ,geo),v(c,j9e,_),v(c,Oi,_),e(Oi,Eh),e(Eh,$J),g(r3,$J,null),e(Oi,heo),e(Oi,IJ),e(IJ,ueo),v(c,N9e,_),v(c,Qo,_),g(t3,Qo,null),e(Qo,peo),e(Qo,Xi),e(Xi,_eo),e(Xi,DJ),e(DJ,veo),e(Xi,beo),e(Xi,jJ),e(jJ,Teo),e(Xi,Feo),e(Qo,Ceo),e(Qo,a3),e(a3,Meo),e(a3,NJ),e(NJ,Eeo),e(a3,yeo),e(Qo,weo),e(Qo,qr),g(n3,qr,null),e(qr,Aeo),e(qr,qJ),e(qJ,Leo),e(qr,Beo),e(qr,Vi),e(Vi,xeo),e(Vi,GJ),e(GJ,keo),e(Vi,Reo),e(Vi,OJ),e(OJ,Seo),e(Vi,Peo),e(qr,$eo),e(qr,XJ),e(XJ,Ieo),e(qr,Deo),g(s3,qr,null),e(Qo,jeo),e(Qo,Re),g(l3,Re,null),e(Re,Neo),e(Re,VJ),e(VJ,qeo),e(Re,Geo),e(Re,Na),e(Na,Oeo),e(Na,zJ),e(zJ,Xeo),e(Na,Veo),e(Na,WJ),e(WJ,zeo),e(Na,Weo),e(Na,QJ),e(QJ,Qeo),e(Na,Heo),e(Re,Ueo),e(Re,F),e(F,yh),e(yh,HJ),e(HJ,Jeo),e(yh,Yeo),e(yh,jk),e(jk,Keo),e(yh,Zeo),e(F,eoo),e(F,wh),e(wh,UJ),e(UJ,ooo),e(wh,roo),e(wh,Nk),e(Nk,too),e(wh,aoo),e(F,noo),e(F,Ah),e(Ah,JJ),e(JJ,soo),e(Ah,loo),e(Ah,qk),e(qk,ioo),e(Ah,doo),e(F,coo),e(F,Lh),e(Lh,YJ),e(YJ,foo),e(Lh,moo),e(Lh,Gk),e(Gk,goo),e(Lh,hoo),e(F,uoo),e(F,Bh),e(Bh,KJ),e(KJ,poo),e(Bh,_oo),e(Bh,Ok),e(Ok,voo),e(Bh,boo),e(F,Too),e(F,xh),e(xh,ZJ),e(ZJ,Foo),e(xh,Coo),e(xh,Xk),e(Xk,Moo),e(xh,Eoo),e(F,yoo),e(F,kh),e(kh,eY),e(eY,woo),e(kh,Aoo),e(kh,Vk),e(Vk,Loo),e(kh,Boo),e(F,xoo),e(F,Rh),e(Rh,oY),e(oY,koo),e(Rh,Roo),e(Rh,zk),e(zk,Soo),e(Rh,Poo),e(F,$oo),e(F,Sh),e(Sh,rY),e(rY,Ioo),e(Sh,Doo),e(Sh,Wk),e(Wk,joo),e(Sh,Noo),e(F,qoo),e(F,Ph),e(Ph,tY),e(tY,Goo),e(Ph,Ooo),e(Ph,Qk),e(Qk,Xoo),e(Ph,Voo),e(F,zoo),e(F,$h),e($h,aY),e(aY,Woo),e($h,Qoo),e($h,Hk),e(Hk,Hoo),e($h,Uoo),e(F,Joo),e(F,Ih),e(Ih,nY),e(nY,Yoo),e(Ih,Koo),e(Ih,Uk),e(Uk,Zoo),e(Ih,ero),e(F,oro),e(F,Dh),e(Dh,sY),e(sY,rro),e(Dh,tro),e(Dh,Jk),e(Jk,aro),e(Dh,nro),e(F,sro),e(F,jh),e(jh,lY),e(lY,lro),e(jh,iro),e(jh,Yk),e(Yk,dro),e(jh,cro),e(F,fro),e(F,Nh),e(Nh,iY),e(iY,mro),e(Nh,gro),e(Nh,Kk),e(Kk,hro),e(Nh,uro),e(F,pro),e(F,qh),e(qh,dY),e(dY,_ro),e(qh,vro),e(qh,Zk),e(Zk,bro),e(qh,Tro),e(F,Fro),e(F,Gh),e(Gh,cY),e(cY,Cro),e(Gh,Mro),e(Gh,eR),e(eR,Ero),e(Gh,yro),e(F,wro),e(F,Oh),e(Oh,fY),e(fY,Aro),e(Oh,Lro),e(Oh,oR),e(oR,Bro),e(Oh,xro),e(F,kro),e(F,Xh),e(Xh,mY),e(mY,Rro),e(Xh,Sro),e(Xh,rR),e(rR,Pro),e(Xh,$ro),e(F,Iro),e(F,Vh),e(Vh,gY),e(gY,Dro),e(Vh,jro),e(Vh,tR),e(tR,Nro),e(Vh,qro),e(F,Gro),e(F,zh),e(zh,hY),e(hY,Oro),e(zh,Xro),e(zh,aR),e(aR,Vro),e(zh,zro),e(F,Wro),e(F,Wh),e(Wh,uY),e(uY,Qro),e(Wh,Hro),e(Wh,nR),e(nR,Uro),e(Wh,Jro),e(F,Yro),e(F,Qh),e(Qh,pY),e(pY,Kro),e(Qh,Zro),e(Qh,sR),e(sR,eto),e(Qh,oto),e(F,rto),e(F,Hh),e(Hh,_Y),e(_Y,tto),e(Hh,ato),e(Hh,lR),e(lR,nto),e(Hh,sto),e(F,lto),e(F,Uh),e(Uh,vY),e(vY,ito),e(Uh,dto),e(Uh,iR),e(iR,cto),e(Uh,fto),e(F,mto),e(F,Jh),e(Jh,bY),e(bY,gto),e(Jh,hto),e(Jh,dR),e(dR,uto),e(Jh,pto),e(F,_to),e(F,Yh),e(Yh,TY),e(TY,vto),e(Yh,bto),e(Yh,cR),e(cR,Tto),e(Yh,Fto),e(F,Cto),e(F,Ss),e(Ss,FY),e(FY,Mto),e(Ss,Eto),e(Ss,fR),e(fR,yto),e(Ss,wto),e(Ss,mR),e(mR,Ato),e(Ss,Lto),e(F,Bto),e(F,Kh),e(Kh,CY),e(CY,xto),e(Kh,kto),e(Kh,gR),e(gR,Rto),e(Kh,Sto),e(F,Pto),e(F,Zh),e(Zh,MY),e(MY,$to),e(Zh,Ito),e(Zh,hR),e(hR,Dto),e(Zh,jto),e(F,Nto),e(F,eu),e(eu,EY),e(EY,qto),e(eu,Gto),e(eu,uR),e(uR,Oto),e(eu,Xto),e(F,Vto),e(F,ou),e(ou,yY),e(yY,zto),e(ou,Wto),e(ou,pR),e(pR,Qto),e(ou,Hto),e(F,Uto),e(F,ru),e(ru,wY),e(wY,Jto),e(ru,Yto),e(ru,_R),e(_R,Kto),e(ru,Zto),e(F,eao),e(F,tu),e(tu,AY),e(AY,oao),e(tu,rao),e(tu,vR),e(vR,tao),e(tu,aao),e(F,nao),e(F,au),e(au,LY),e(LY,sao),e(au,lao),e(au,bR),e(bR,iao),e(au,dao),e(F,cao),e(F,nu),e(nu,BY),e(BY,fao),e(nu,mao),e(nu,TR),e(TR,gao),e(nu,hao),e(F,uao),e(F,su),e(su,xY),e(xY,pao),e(su,_ao),e(su,FR),e(FR,vao),e(su,bao),e(F,Tao),e(F,lu),e(lu,kY),e(kY,Fao),e(lu,Cao),e(lu,CR),e(CR,Mao),e(lu,Eao),e(F,yao),e(F,iu),e(iu,RY),e(RY,wao),e(iu,Aao),e(iu,MR),e(MR,Lao),e(iu,Bao),e(F,xao),e(F,du),e(du,SY),e(SY,kao),e(du,Rao),e(du,ER),e(ER,Sao),e(du,Pao),e(F,$ao),e(F,cu),e(cu,PY),e(PY,Iao),e(cu,Dao),e(cu,yR),e(yR,jao),e(cu,Nao),e(F,qao),e(F,fu),e(fu,$Y),e($Y,Gao),e(fu,Oao),e(fu,wR),e(wR,Xao),e(fu,Vao),e(F,zao),e(F,mu),e(mu,IY),e(IY,Wao),e(mu,Qao),e(mu,AR),e(AR,Hao),e(mu,Uao),e(F,Jao),e(F,gu),e(gu,DY),e(DY,Yao),e(gu,Kao),e(gu,LR),e(LR,Zao),e(gu,eno),e(F,ono),e(F,hu),e(hu,jY),e(jY,rno),e(hu,tno),e(hu,BR),e(BR,ano),e(hu,nno),e(F,sno),e(F,uu),e(uu,NY),e(NY,lno),e(uu,ino),e(uu,xR),e(xR,dno),e(uu,cno),e(F,fno),e(F,pu),e(pu,qY),e(qY,mno),e(pu,gno),e(pu,kR),e(kR,hno),e(pu,uno),e(F,pno),e(F,_u),e(_u,GY),e(GY,_no),e(_u,vno),e(_u,RR),e(RR,bno),e(_u,Tno),e(F,Fno),e(F,vu),e(vu,OY),e(OY,Cno),e(vu,Mno),e(vu,SR),e(SR,Eno),e(vu,yno),e(F,wno),e(F,bu),e(bu,XY),e(XY,Ano),e(bu,Lno),e(bu,PR),e(PR,Bno),e(bu,xno),e(F,kno),e(F,Tu),e(Tu,VY),e(VY,Rno),e(Tu,Sno),e(Tu,$R),e($R,Pno),e(Tu,$no),e(F,Ino),e(F,Fu),e(Fu,zY),e(zY,Dno),e(Fu,jno),e(Fu,IR),e(IR,Nno),e(Fu,qno),e(F,Gno),e(F,Cu),e(Cu,WY),e(WY,Ono),e(Cu,Xno),e(Cu,DR),e(DR,Vno),e(Cu,zno),e(F,Wno),e(F,Mu),e(Mu,QY),e(QY,Qno),e(Mu,Hno),e(Mu,jR),e(jR,Uno),e(Mu,Jno),e(F,Yno),e(F,Eu),e(Eu,HY),e(HY,Kno),e(Eu,Zno),e(Eu,NR),e(NR,eso),e(Eu,oso),e(F,rso),e(F,yu),e(yu,UY),e(UY,tso),e(yu,aso),e(yu,qR),e(qR,nso),e(yu,sso),e(F,lso),e(F,wu),e(wu,JY),e(JY,iso),e(wu,dso),e(wu,GR),e(GR,cso),e(wu,fso),e(F,mso),e(F,Au),e(Au,YY),e(YY,gso),e(Au,hso),e(Au,OR),e(OR,uso),e(Au,pso),e(F,_so),e(F,Lu),e(Lu,KY),e(KY,vso),e(Lu,bso),e(Lu,XR),e(XR,Tso),e(Lu,Fso),e(F,Cso),e(F,Bu),e(Bu,ZY),e(ZY,Mso),e(Bu,Eso),e(Bu,VR),e(VR,yso),e(Bu,wso),e(F,Aso),e(F,xu),e(xu,eK),e(eK,Lso),e(xu,Bso),e(xu,zR),e(zR,xso),e(xu,kso),e(F,Rso),e(F,ku),e(ku,oK),e(oK,Sso),e(ku,Pso),e(ku,WR),e(WR,$so),e(ku,Iso),e(F,Dso),e(F,Ru),e(Ru,rK),e(rK,jso),e(Ru,Nso),e(Ru,QR),e(QR,qso),e(Ru,Gso),e(F,Oso),e(F,Su),e(Su,tK),e(tK,Xso),e(Su,Vso),e(Su,HR),e(HR,zso),e(Su,Wso),e(F,Qso),e(F,Pu),e(Pu,aK),e(aK,Hso),e(Pu,Uso),e(Pu,UR),e(UR,Jso),e(Pu,Yso),e(F,Kso),e(F,$u),e($u,nK),e(nK,Zso),e($u,elo),e($u,JR),e(JR,olo),e($u,rlo),e(F,tlo),e(F,Iu),e(Iu,sK),e(sK,alo),e(Iu,nlo),e(Iu,YR),e(YR,slo),e(Iu,llo),e(F,ilo),e(F,Du),e(Du,lK),e(lK,dlo),e(Du,clo),e(Du,KR),e(KR,flo),e(Du,mlo),e(F,glo),e(F,ju),e(ju,iK),e(iK,hlo),e(ju,ulo),e(ju,ZR),e(ZR,plo),e(ju,_lo),e(F,vlo),e(F,Nu),e(Nu,dK),e(dK,blo),e(Nu,Tlo),e(Nu,eS),e(eS,Flo),e(Nu,Clo),e(F,Mlo),e(F,qu),e(qu,cK),e(cK,Elo),e(qu,ylo),e(qu,oS),e(oS,wlo),e(qu,Alo),e(F,Llo),e(F,Gu),e(Gu,fK),e(fK,Blo),e(Gu,xlo),e(Gu,rS),e(rS,klo),e(Gu,Rlo),e(F,Slo),e(F,Ou),e(Ou,mK),e(mK,Plo),e(Ou,$lo),e(Ou,tS),e(tS,Ilo),e(Ou,Dlo),e(F,jlo),e(F,Xu),e(Xu,gK),e(gK,Nlo),e(Xu,qlo),e(Xu,aS),e(aS,Glo),e(Xu,Olo),e(F,Xlo),e(F,Vu),e(Vu,hK),e(hK,Vlo),e(Vu,zlo),e(Vu,nS),e(nS,Wlo),e(Vu,Qlo),e(F,Hlo),e(F,zu),e(zu,uK),e(uK,Ulo),e(zu,Jlo),e(zu,sS),e(sS,Ylo),e(zu,Klo),e(F,Zlo),e(F,Wu),e(Wu,pK),e(pK,eio),e(Wu,oio),e(Wu,lS),e(lS,rio),e(Wu,tio),e(F,aio),e(F,Qu),e(Qu,_K),e(_K,nio),e(Qu,sio),e(Qu,iS),e(iS,lio),e(Qu,iio),e(F,dio),e(F,Hu),e(Hu,vK),e(vK,cio),e(Hu,fio),e(Hu,dS),e(dS,mio),e(Hu,gio),e(F,hio),e(F,Uu),e(Uu,bK),e(bK,uio),e(Uu,pio),e(Uu,cS),e(cS,_io),e(Uu,vio),e(F,bio),e(F,Ju),e(Ju,TK),e(TK,Tio),e(Ju,Fio),e(Ju,fS),e(fS,Cio),e(Ju,Mio),e(F,Eio),e(F,Yu),e(Yu,FK),e(FK,yio),e(Yu,wio),e(Yu,mS),e(mS,Aio),e(Yu,Lio),e(F,Bio),e(F,Ku),e(Ku,CK),e(CK,xio),e(Ku,kio),e(Ku,gS),e(gS,Rio),e(Ku,Sio),e(F,Pio),e(F,Zu),e(Zu,MK),e(MK,$io),e(Zu,Iio),e(Zu,hS),e(hS,Dio),e(Zu,jio),e(F,Nio),e(F,ep),e(ep,EK),e(EK,qio),e(ep,Gio),e(ep,uS),e(uS,Oio),e(ep,Xio),e(F,Vio),e(F,op),e(op,yK),e(yK,zio),e(op,Wio),e(op,pS),e(pS,Qio),e(op,Hio),e(F,Uio),e(F,rp),e(rp,wK),e(wK,Jio),e(rp,Yio),e(rp,_S),e(_S,Kio),e(rp,Zio),e(Re,edo),e(Re,tp),e(tp,odo),e(tp,AK),e(AK,rdo),e(tp,tdo),e(tp,LK),e(LK,ado),e(Re,ndo),e(Re,BK),e(BK,sdo),e(Re,ldo),g(i3,Re,null),v(c,q9e,_),v(c,zi,_),e(zi,ap),e(ap,xK),g(d3,xK,null),e(zi,ido),e(zi,kK),e(kK,ddo),v(c,G9e,_),v(c,Ho,_),g(c3,Ho,null),e(Ho,cdo),e(Ho,Wi),e(Wi,fdo),e(Wi,RK),e(RK,mdo),e(Wi,gdo),e(Wi,SK),e(SK,hdo),e(Wi,udo),e(Ho,pdo),e(Ho,f3),e(f3,_do),e(f3,PK),e(PK,vdo),e(f3,bdo),e(Ho,Tdo),e(Ho,Gr),g(m3,Gr,null),e(Gr,Fdo),e(Gr,$K),e($K,Cdo),e(Gr,Mdo),e(Gr,Qi),e(Qi,Edo),e(Qi,IK),e(IK,ydo),e(Qi,wdo),e(Qi,DK),e(DK,Ado),e(Qi,Ldo),e(Gr,Bdo),e(Gr,jK),e(jK,xdo),e(Gr,kdo),g(g3,Gr,null),e(Ho,Rdo),e(Ho,Se),g(h3,Se,null),e(Se,Sdo),e(Se,NK),e(NK,Pdo),e(Se,$do),e(Se,qa),e(qa,Ido),e(qa,qK),e(qK,Ddo),e(qa,jdo),e(qa,GK),e(GK,Ndo),e(qa,qdo),e(qa,OK),e(OK,Gdo),e(qa,Odo),e(Se,Xdo),e(Se,k),e(k,np),e(np,XK),e(XK,Vdo),e(np,zdo),e(np,vS),e(vS,Wdo),e(np,Qdo),e(k,Hdo),e(k,sp),e(sp,VK),e(VK,Udo),e(sp,Jdo),e(sp,bS),e(bS,Ydo),e(sp,Kdo),e(k,Zdo),e(k,lp),e(lp,zK),e(zK,eco),e(lp,oco),e(lp,TS),e(TS,rco),e(lp,tco),e(k,aco),e(k,ip),e(ip,WK),e(WK,nco),e(ip,sco),e(ip,FS),e(FS,lco),e(ip,ico),e(k,dco),e(k,dp),e(dp,QK),e(QK,cco),e(dp,fco),e(dp,CS),e(CS,mco),e(dp,gco),e(k,hco),e(k,cp),e(cp,HK),e(HK,uco),e(cp,pco),e(cp,MS),e(MS,_co),e(cp,vco),e(k,bco),e(k,fp),e(fp,UK),e(UK,Tco),e(fp,Fco),e(fp,ES),e(ES,Cco),e(fp,Mco),e(k,Eco),e(k,mp),e(mp,JK),e(JK,yco),e(mp,wco),e(mp,yS),e(yS,Aco),e(mp,Lco),e(k,Bco),e(k,gp),e(gp,YK),e(YK,xco),e(gp,kco),e(gp,wS),e(wS,Rco),e(gp,Sco),e(k,Pco),e(k,hp),e(hp,KK),e(KK,$co),e(hp,Ico),e(hp,AS),e(AS,Dco),e(hp,jco),e(k,Nco),e(k,up),e(up,ZK),e(ZK,qco),e(up,Gco),e(up,LS),e(LS,Oco),e(up,Xco),e(k,Vco),e(k,pp),e(pp,eZ),e(eZ,zco),e(pp,Wco),e(pp,BS),e(BS,Qco),e(pp,Hco),e(k,Uco),e(k,_p),e(_p,oZ),e(oZ,Jco),e(_p,Yco),e(_p,xS),e(xS,Kco),e(_p,Zco),e(k,efo),e(k,vp),e(vp,rZ),e(rZ,ofo),e(vp,rfo),e(vp,kS),e(kS,tfo),e(vp,afo),e(k,nfo),e(k,bp),e(bp,tZ),e(tZ,sfo),e(bp,lfo),e(bp,RS),e(RS,ifo),e(bp,dfo),e(k,cfo),e(k,Tp),e(Tp,aZ),e(aZ,ffo),e(Tp,mfo),e(Tp,SS),e(SS,gfo),e(Tp,hfo),e(k,ufo),e(k,Fp),e(Fp,nZ),e(nZ,pfo),e(Fp,_fo),e(Fp,PS),e(PS,vfo),e(Fp,bfo),e(k,Tfo),e(k,Cp),e(Cp,sZ),e(sZ,Ffo),e(Cp,Cfo),e(Cp,$S),e($S,Mfo),e(Cp,Efo),e(k,yfo),e(k,Mp),e(Mp,lZ),e(lZ,wfo),e(Mp,Afo),e(Mp,IS),e(IS,Lfo),e(Mp,Bfo),e(k,xfo),e(k,Ep),e(Ep,iZ),e(iZ,kfo),e(Ep,Rfo),e(Ep,DS),e(DS,Sfo),e(Ep,Pfo),e(k,$fo),e(k,yp),e(yp,dZ),e(dZ,Ifo),e(yp,Dfo),e(yp,jS),e(jS,jfo),e(yp,Nfo),e(k,qfo),e(k,wp),e(wp,cZ),e(cZ,Gfo),e(wp,Ofo),e(wp,NS),e(NS,Xfo),e(wp,Vfo),e(k,zfo),e(k,Ap),e(Ap,fZ),e(fZ,Wfo),e(Ap,Qfo),e(Ap,qS),e(qS,Hfo),e(Ap,Ufo),e(k,Jfo),e(k,Lp),e(Lp,mZ),e(mZ,Yfo),e(Lp,Kfo),e(Lp,GS),e(GS,Zfo),e(Lp,emo),e(k,omo),e(k,Bp),e(Bp,gZ),e(gZ,rmo),e(Bp,tmo),e(Bp,OS),e(OS,amo),e(Bp,nmo),e(k,smo),e(k,xp),e(xp,hZ),e(hZ,lmo),e(xp,imo),e(xp,XS),e(XS,dmo),e(xp,cmo),e(k,fmo),e(k,kp),e(kp,uZ),e(uZ,mmo),e(kp,gmo),e(kp,VS),e(VS,hmo),e(kp,umo),e(k,pmo),e(k,Rp),e(Rp,pZ),e(pZ,_mo),e(Rp,vmo),e(Rp,zS),e(zS,bmo),e(Rp,Tmo),e(k,Fmo),e(k,Sp),e(Sp,_Z),e(_Z,Cmo),e(Sp,Mmo),e(Sp,WS),e(WS,Emo),e(Sp,ymo),e(k,wmo),e(k,Pp),e(Pp,vZ),e(vZ,Amo),e(Pp,Lmo),e(Pp,QS),e(QS,Bmo),e(Pp,xmo),e(k,kmo),e(k,$p),e($p,bZ),e(bZ,Rmo),e($p,Smo),e($p,HS),e(HS,Pmo),e($p,$mo),e(k,Imo),e(k,Ip),e(Ip,TZ),e(TZ,Dmo),e(Ip,jmo),e(Ip,US),e(US,Nmo),e(Ip,qmo),e(k,Gmo),e(k,Dp),e(Dp,FZ),e(FZ,Omo),e(Dp,Xmo),e(Dp,JS),e(JS,Vmo),e(Dp,zmo),e(k,Wmo),e(k,jp),e(jp,CZ),e(CZ,Qmo),e(jp,Hmo),e(jp,YS),e(YS,Umo),e(jp,Jmo),e(k,Ymo),e(k,Np),e(Np,MZ),e(MZ,Kmo),e(Np,Zmo),e(Np,KS),e(KS,ego),e(Np,ogo),e(k,rgo),e(k,qp),e(qp,EZ),e(EZ,tgo),e(qp,ago),e(qp,ZS),e(ZS,ngo),e(qp,sgo),e(k,lgo),e(k,Gp),e(Gp,yZ),e(yZ,igo),e(Gp,dgo),e(Gp,eP),e(eP,cgo),e(Gp,fgo),e(k,mgo),e(k,Op),e(Op,wZ),e(wZ,ggo),e(Op,hgo),e(Op,oP),e(oP,ugo),e(Op,pgo),e(k,_go),e(k,Xp),e(Xp,AZ),e(AZ,vgo),e(Xp,bgo),e(Xp,rP),e(rP,Tgo),e(Xp,Fgo),e(Se,Cgo),e(Se,Vp),e(Vp,Mgo),e(Vp,LZ),e(LZ,Ego),e(Vp,ygo),e(Vp,BZ),e(BZ,wgo),e(Se,Ago),e(Se,xZ),e(xZ,Lgo),e(Se,Bgo),g(u3,Se,null),v(c,O9e,_),v(c,Hi,_),e(Hi,zp),e(zp,kZ),g(p3,kZ,null),e(Hi,xgo),e(Hi,RZ),e(RZ,kgo),v(c,X9e,_),v(c,Uo,_),g(_3,Uo,null),e(Uo,Rgo),e(Uo,Ui),e(Ui,Sgo),e(Ui,SZ),e(SZ,Pgo),e(Ui,$go),e(Ui,PZ),e(PZ,Igo),e(Ui,Dgo),e(Uo,jgo),e(Uo,v3),e(v3,Ngo),e(v3,$Z),e($Z,qgo),e(v3,Ggo),e(Uo,Ogo),e(Uo,Or),g(b3,Or,null),e(Or,Xgo),e(Or,IZ),e(IZ,Vgo),e(Or,zgo),e(Or,Ji),e(Ji,Wgo),e(Ji,DZ),e(DZ,Qgo),e(Ji,Hgo),e(Ji,jZ),e(jZ,Ugo),e(Ji,Jgo),e(Or,Ygo),e(Or,NZ),e(NZ,Kgo),e(Or,Zgo),g(T3,Or,null),e(Uo,eho),e(Uo,Pe),g(F3,Pe,null),e(Pe,oho),e(Pe,qZ),e(qZ,rho),e(Pe,tho),e(Pe,Ga),e(Ga,aho),e(Ga,GZ),e(GZ,nho),e(Ga,sho),e(Ga,OZ),e(OZ,lho),e(Ga,iho),e(Ga,XZ),e(XZ,dho),e(Ga,cho),e(Pe,fho),e(Pe,$),e($,Wp),e(Wp,VZ),e(VZ,mho),e(Wp,gho),e(Wp,tP),e(tP,hho),e(Wp,uho),e($,pho),e($,Qp),e(Qp,zZ),e(zZ,_ho),e(Qp,vho),e(Qp,aP),e(aP,bho),e(Qp,Tho),e($,Fho),e($,Hp),e(Hp,WZ),e(WZ,Cho),e(Hp,Mho),e(Hp,nP),e(nP,Eho),e(Hp,yho),e($,who),e($,Up),e(Up,QZ),e(QZ,Aho),e(Up,Lho),e(Up,sP),e(sP,Bho),e(Up,xho),e($,kho),e($,Jp),e(Jp,HZ),e(HZ,Rho),e(Jp,Sho),e(Jp,lP),e(lP,Pho),e(Jp,$ho),e($,Iho),e($,Yp),e(Yp,UZ),e(UZ,Dho),e(Yp,jho),e(Yp,iP),e(iP,Nho),e(Yp,qho),e($,Gho),e($,Kp),e(Kp,JZ),e(JZ,Oho),e(Kp,Xho),e(Kp,dP),e(dP,Vho),e(Kp,zho),e($,Who),e($,Zp),e(Zp,YZ),e(YZ,Qho),e(Zp,Hho),e(Zp,cP),e(cP,Uho),e(Zp,Jho),e($,Yho),e($,e_),e(e_,KZ),e(KZ,Kho),e(e_,Zho),e(e_,fP),e(fP,euo),e(e_,ouo),e($,ruo),e($,o_),e(o_,ZZ),e(ZZ,tuo),e(o_,auo),e(o_,mP),e(mP,nuo),e(o_,suo),e($,luo),e($,r_),e(r_,eee),e(eee,iuo),e(r_,duo),e(r_,gP),e(gP,cuo),e(r_,fuo),e($,muo),e($,t_),e(t_,oee),e(oee,guo),e(t_,huo),e(t_,hP),e(hP,uuo),e(t_,puo),e($,_uo),e($,a_),e(a_,ree),e(ree,vuo),e(a_,buo),e(a_,uP),e(uP,Tuo),e(a_,Fuo),e($,Cuo),e($,n_),e(n_,tee),e(tee,Muo),e(n_,Euo),e(n_,pP),e(pP,yuo),e(n_,wuo),e($,Auo),e($,s_),e(s_,aee),e(aee,Luo),e(s_,Buo),e(s_,_P),e(_P,xuo),e(s_,kuo),e($,Ruo),e($,l_),e(l_,nee),e(nee,Suo),e(l_,Puo),e(l_,vP),e(vP,$uo),e(l_,Iuo),e($,Duo),e($,i_),e(i_,see),e(see,juo),e(i_,Nuo),e(i_,bP),e(bP,quo),e(i_,Guo),e($,Ouo),e($,d_),e(d_,lee),e(lee,Xuo),e(d_,Vuo),e(d_,TP),e(TP,zuo),e(d_,Wuo),e($,Quo),e($,c_),e(c_,iee),e(iee,Huo),e(c_,Uuo),e(c_,FP),e(FP,Juo),e(c_,Yuo),e($,Kuo),e($,f_),e(f_,dee),e(dee,Zuo),e(f_,epo),e(f_,CP),e(CP,opo),e(f_,rpo),e($,tpo),e($,m_),e(m_,cee),e(cee,apo),e(m_,npo),e(m_,MP),e(MP,spo),e(m_,lpo),e($,ipo),e($,g_),e(g_,fee),e(fee,dpo),e(g_,cpo),e(g_,EP),e(EP,fpo),e(g_,mpo),e($,gpo),e($,h_),e(h_,mee),e(mee,hpo),e(h_,upo),e(h_,yP),e(yP,ppo),e(h_,_po),e($,vpo),e($,u_),e(u_,gee),e(gee,bpo),e(u_,Tpo),e(u_,wP),e(wP,Fpo),e(u_,Cpo),e($,Mpo),e($,p_),e(p_,hee),e(hee,Epo),e(p_,ypo),e(p_,AP),e(AP,wpo),e(p_,Apo),e($,Lpo),e($,__),e(__,uee),e(uee,Bpo),e(__,xpo),e(__,LP),e(LP,kpo),e(__,Rpo),e($,Spo),e($,v_),e(v_,pee),e(pee,Ppo),e(v_,$po),e(v_,BP),e(BP,Ipo),e(v_,Dpo),e($,jpo),e($,b_),e(b_,_ee),e(_ee,Npo),e(b_,qpo),e(b_,xP),e(xP,Gpo),e(b_,Opo),e($,Xpo),e($,T_),e(T_,vee),e(vee,Vpo),e(T_,zpo),e(T_,kP),e(kP,Wpo),e(T_,Qpo),e($,Hpo),e($,F_),e(F_,bee),e(bee,Upo),e(F_,Jpo),e(F_,RP),e(RP,Ypo),e(F_,Kpo),e($,Zpo),e($,C_),e(C_,Tee),e(Tee,e_o),e(C_,o_o),e(C_,SP),e(SP,r_o),e(C_,t_o),e($,a_o),e($,M_),e(M_,Fee),e(Fee,n_o),e(M_,s_o),e(M_,PP),e(PP,l_o),e(M_,i_o),e($,d_o),e($,E_),e(E_,Cee),e(Cee,c_o),e(E_,f_o),e(E_,$P),e($P,m_o),e(E_,g_o),e($,h_o),e($,y_),e(y_,Mee),e(Mee,u_o),e(y_,p_o),e(y_,IP),e(IP,__o),e(y_,v_o),e($,b_o),e($,w_),e(w_,Eee),e(Eee,T_o),e(w_,F_o),e(w_,DP),e(DP,C_o),e(w_,M_o),e(Pe,E_o),e(Pe,A_),e(A_,y_o),e(A_,yee),e(yee,w_o),e(A_,A_o),e(A_,wee),e(wee,L_o),e(Pe,B_o),e(Pe,Aee),e(Aee,x_o),e(Pe,k_o),g(C3,Pe,null),v(c,V9e,_),v(c,Yi,_),e(Yi,L_),e(L_,Lee),g(M3,Lee,null),e(Yi,R_o),e(Yi,Bee),e(Bee,S_o),v(c,z9e,_),v(c,Jo,_),g(E3,Jo,null),e(Jo,P_o),e(Jo,Ki),e(Ki,$_o),e(Ki,xee),e(xee,I_o),e(Ki,D_o),e(Ki,kee),e(kee,j_o),e(Ki,N_o),e(Jo,q_o),e(Jo,y3),e(y3,G_o),e(y3,Ree),e(Ree,O_o),e(y3,X_o),e(Jo,V_o),e(Jo,Xr),g(w3,Xr,null),e(Xr,z_o),e(Xr,See),e(See,W_o),e(Xr,Q_o),e(Xr,Zi),e(Zi,H_o),e(Zi,Pee),e(Pee,U_o),e(Zi,J_o),e(Zi,$ee),e($ee,Y_o),e(Zi,K_o),e(Xr,Z_o),e(Xr,Iee),e(Iee,evo),e(Xr,ovo),g(A3,Xr,null),e(Jo,rvo),e(Jo,$e),g(L3,$e,null),e($e,tvo),e($e,Dee),e(Dee,avo),e($e,nvo),e($e,Oa),e(Oa,svo),e(Oa,jee),e(jee,lvo),e(Oa,ivo),e(Oa,Nee),e(Nee,dvo),e(Oa,cvo),e(Oa,qee),e(qee,fvo),e(Oa,mvo),e($e,gvo),e($e,I),e(I,B_),e(B_,Gee),e(Gee,hvo),e(B_,uvo),e(B_,jP),e(jP,pvo),e(B_,_vo),e(I,vvo),e(I,x_),e(x_,Oee),e(Oee,bvo),e(x_,Tvo),e(x_,NP),e(NP,Fvo),e(x_,Cvo),e(I,Mvo),e(I,k_),e(k_,Xee),e(Xee,Evo),e(k_,yvo),e(k_,qP),e(qP,wvo),e(k_,Avo),e(I,Lvo),e(I,R_),e(R_,Vee),e(Vee,Bvo),e(R_,xvo),e(R_,GP),e(GP,kvo),e(R_,Rvo),e(I,Svo),e(I,S_),e(S_,zee),e(zee,Pvo),e(S_,$vo),e(S_,OP),e(OP,Ivo),e(S_,Dvo),e(I,jvo),e(I,P_),e(P_,Wee),e(Wee,Nvo),e(P_,qvo),e(P_,XP),e(XP,Gvo),e(P_,Ovo),e(I,Xvo),e(I,$_),e($_,Qee),e(Qee,Vvo),e($_,zvo),e($_,VP),e(VP,Wvo),e($_,Qvo),e(I,Hvo),e(I,I_),e(I_,Hee),e(Hee,Uvo),e(I_,Jvo),e(I_,zP),e(zP,Yvo),e(I_,Kvo),e(I,Zvo),e(I,D_),e(D_,Uee),e(Uee,e1o),e(D_,o1o),e(D_,WP),e(WP,r1o),e(D_,t1o),e(I,a1o),e(I,j_),e(j_,Jee),e(Jee,n1o),e(j_,s1o),e(j_,QP),e(QP,l1o),e(j_,i1o),e(I,d1o),e(I,N_),e(N_,Yee),e(Yee,c1o),e(N_,f1o),e(N_,HP),e(HP,m1o),e(N_,g1o),e(I,h1o),e(I,q_),e(q_,Kee),e(Kee,u1o),e(q_,p1o),e(q_,UP),e(UP,_1o),e(q_,v1o),e(I,b1o),e(I,G_),e(G_,Zee),e(Zee,T1o),e(G_,F1o),e(G_,JP),e(JP,C1o),e(G_,M1o),e(I,E1o),e(I,O_),e(O_,eoe),e(eoe,y1o),e(O_,w1o),e(O_,YP),e(YP,A1o),e(O_,L1o),e(I,B1o),e(I,X_),e(X_,ooe),e(ooe,x1o),e(X_,k1o),e(X_,KP),e(KP,R1o),e(X_,S1o),e(I,P1o),e(I,V_),e(V_,roe),e(roe,$1o),e(V_,I1o),e(V_,ZP),e(ZP,D1o),e(V_,j1o),e(I,N1o),e(I,z_),e(z_,toe),e(toe,q1o),e(z_,G1o),e(z_,e$),e(e$,O1o),e(z_,X1o),e(I,V1o),e(I,W_),e(W_,aoe),e(aoe,z1o),e(W_,W1o),e(W_,o$),e(o$,Q1o),e(W_,H1o),e(I,U1o),e(I,Q_),e(Q_,noe),e(noe,J1o),e(Q_,Y1o),e(Q_,r$),e(r$,K1o),e(Q_,Z1o),e(I,e4o),e(I,H_),e(H_,soe),e(soe,o4o),e(H_,r4o),e(H_,t$),e(t$,t4o),e(H_,a4o),e(I,n4o),e(I,U_),e(U_,loe),e(loe,s4o),e(U_,l4o),e(U_,a$),e(a$,i4o),e(U_,d4o),e(I,c4o),e(I,J_),e(J_,ioe),e(ioe,f4o),e(J_,m4o),e(J_,n$),e(n$,g4o),e(J_,h4o),e(I,u4o),e(I,Y_),e(Y_,doe),e(doe,p4o),e(Y_,_4o),e(Y_,s$),e(s$,v4o),e(Y_,b4o),e(I,T4o),e(I,K_),e(K_,coe),e(coe,F4o),e(K_,C4o),e(K_,l$),e(l$,M4o),e(K_,E4o),e(I,y4o),e(I,Z_),e(Z_,foe),e(foe,w4o),e(Z_,A4o),e(Z_,i$),e(i$,L4o),e(Z_,B4o),e(I,x4o),e(I,ev),e(ev,moe),e(moe,k4o),e(ev,R4o),e(ev,d$),e(d$,S4o),e(ev,P4o),e(I,$4o),e(I,ov),e(ov,goe),e(goe,I4o),e(ov,D4o),e(ov,c$),e(c$,j4o),e(ov,N4o),e(I,q4o),e(I,rv),e(rv,hoe),e(hoe,G4o),e(rv,O4o),e(rv,f$),e(f$,X4o),e(rv,V4o),e(I,z4o),e(I,tv),e(tv,uoe),e(uoe,W4o),e(tv,Q4o),e(tv,m$),e(m$,H4o),e(tv,U4o),e(I,J4o),e(I,av),e(av,poe),e(poe,Y4o),e(av,K4o),e(av,g$),e(g$,Z4o),e(av,ebo),e(I,obo),e(I,nv),e(nv,_oe),e(_oe,rbo),e(nv,tbo),e(nv,voe),e(voe,abo),e(nv,nbo),e(I,sbo),e(I,sv),e(sv,boe),e(boe,lbo),e(sv,ibo),e(sv,h$),e(h$,dbo),e(sv,cbo),e(I,fbo),e(I,lv),e(lv,Toe),e(Toe,mbo),e(lv,gbo),e(lv,u$),e(u$,hbo),e(lv,ubo),e(I,pbo),e(I,iv),e(iv,Foe),e(Foe,_bo),e(iv,vbo),e(iv,p$),e(p$,bbo),e(iv,Tbo),e(I,Fbo),e(I,dv),e(dv,Coe),e(Coe,Cbo),e(dv,Mbo),e(dv,_$),e(_$,Ebo),e(dv,ybo),e($e,wbo),e($e,cv),e(cv,Abo),e(cv,Moe),e(Moe,Lbo),e(cv,Bbo),e(cv,Eoe),e(Eoe,xbo),e($e,kbo),e($e,yoe),e(yoe,Rbo),e($e,Sbo),g(B3,$e,null),v(c,W9e,_),v(c,ed,_),e(ed,fv),e(fv,woe),g(x3,woe,null),e(ed,Pbo),e(ed,Aoe),e(Aoe,$bo),v(c,Q9e,_),v(c,Yo,_),g(k3,Yo,null),e(Yo,Ibo),e(Yo,od),e(od,Dbo),e(od,Loe),e(Loe,jbo),e(od,Nbo),e(od,Boe),e(Boe,qbo),e(od,Gbo),e(Yo,Obo),e(Yo,R3),e(R3,Xbo),e(R3,xoe),e(xoe,Vbo),e(R3,zbo),e(Yo,Wbo),e(Yo,Vr),g(S3,Vr,null),e(Vr,Qbo),e(Vr,koe),e(koe,Hbo),e(Vr,Ubo),e(Vr,rd),e(rd,Jbo),e(rd,Roe),e(Roe,Ybo),e(rd,Kbo),e(rd,Soe),e(Soe,Zbo),e(rd,e2o),e(Vr,o2o),e(Vr,Poe),e(Poe,r2o),e(Vr,t2o),g(P3,Vr,null),e(Yo,a2o),e(Yo,Ie),g($3,Ie,null),e(Ie,n2o),e(Ie,$oe),e($oe,s2o),e(Ie,l2o),e(Ie,Xa),e(Xa,i2o),e(Xa,Ioe),e(Ioe,d2o),e(Xa,c2o),e(Xa,Doe),e(Doe,f2o),e(Xa,m2o),e(Xa,joe),e(joe,g2o),e(Xa,h2o),e(Ie,u2o),e(Ie,ae),e(ae,mv),e(mv,Noe),e(Noe,p2o),e(mv,_2o),e(mv,v$),e(v$,v2o),e(mv,b2o),e(ae,T2o),e(ae,gv),e(gv,qoe),e(qoe,F2o),e(gv,C2o),e(gv,b$),e(b$,M2o),e(gv,E2o),e(ae,y2o),e(ae,hv),e(hv,Goe),e(Goe,w2o),e(hv,A2o),e(hv,T$),e(T$,L2o),e(hv,B2o),e(ae,x2o),e(ae,uv),e(uv,Ooe),e(Ooe,k2o),e(uv,R2o),e(uv,F$),e(F$,S2o),e(uv,P2o),e(ae,$2o),e(ae,pv),e(pv,Xoe),e(Xoe,I2o),e(pv,D2o),e(pv,C$),e(C$,j2o),e(pv,N2o),e(ae,q2o),e(ae,_v),e(_v,Voe),e(Voe,G2o),e(_v,O2o),e(_v,M$),e(M$,X2o),e(_v,V2o),e(ae,z2o),e(ae,vv),e(vv,zoe),e(zoe,W2o),e(vv,Q2o),e(vv,E$),e(E$,H2o),e(vv,U2o),e(ae,J2o),e(ae,bv),e(bv,Woe),e(Woe,Y2o),e(bv,K2o),e(bv,y$),e(y$,Z2o),e(bv,e0o),e(ae,o0o),e(ae,Tv),e(Tv,Qoe),e(Qoe,r0o),e(Tv,t0o),e(Tv,w$),e(w$,a0o),e(Tv,n0o),e(ae,s0o),e(ae,Fv),e(Fv,Hoe),e(Hoe,l0o),e(Fv,i0o),e(Fv,A$),e(A$,d0o),e(Fv,c0o),e(ae,f0o),e(ae,Cv),e(Cv,Uoe),e(Uoe,m0o),e(Cv,g0o),e(Cv,L$),e(L$,h0o),e(Cv,u0o),e(ae,p0o),e(ae,Mv),e(Mv,Joe),e(Joe,_0o),e(Mv,v0o),e(Mv,B$),e(B$,b0o),e(Mv,T0o),e(ae,F0o),e(ae,Ev),e(Ev,Yoe),e(Yoe,C0o),e(Ev,M0o),e(Ev,x$),e(x$,E0o),e(Ev,y0o),e(ae,w0o),e(ae,yv),e(yv,Koe),e(Koe,A0o),e(yv,L0o),e(yv,k$),e(k$,B0o),e(yv,x0o),e(ae,k0o),e(ae,wv),e(wv,Zoe),e(Zoe,R0o),e(wv,S0o),e(wv,R$),e(R$,P0o),e(wv,$0o),e(ae,I0o),e(ae,Av),e(Av,ere),e(ere,D0o),e(Av,j0o),e(Av,S$),e(S$,N0o),e(Av,q0o),e(Ie,G0o),e(Ie,Lv),e(Lv,O0o),e(Lv,ore),e(ore,X0o),e(Lv,V0o),e(Lv,rre),e(rre,z0o),e(Ie,W0o),e(Ie,tre),e(tre,Q0o),e(Ie,H0o),g(I3,Ie,null),v(c,H9e,_),v(c,td,_),e(td,Bv),e(Bv,are),g(D3,are,null),e(td,U0o),e(td,nre),e(nre,J0o),v(c,U9e,_),v(c,Ko,_),g(j3,Ko,null),e(Ko,Y0o),e(Ko,ad),e(ad,K0o),e(ad,sre),e(sre,Z0o),e(ad,eTo),e(ad,lre),e(lre,oTo),e(ad,rTo),e(Ko,tTo),e(Ko,N3),e(N3,aTo),e(N3,ire),e(ire,nTo),e(N3,sTo),e(Ko,lTo),e(Ko,zr),g(q3,zr,null),e(zr,iTo),e(zr,dre),e(dre,dTo),e(zr,cTo),e(zr,nd),e(nd,fTo),e(nd,cre),e(cre,mTo),e(nd,gTo),e(nd,fre),e(fre,hTo),e(nd,uTo),e(zr,pTo),e(zr,mre),e(mre,_To),e(zr,vTo),g(G3,zr,null),e(Ko,bTo),e(Ko,De),g(O3,De,null),e(De,TTo),e(De,gre),e(gre,FTo),e(De,CTo),e(De,Va),e(Va,MTo),e(Va,hre),e(hre,ETo),e(Va,yTo),e(Va,ure),e(ure,wTo),e(Va,ATo),e(Va,pre),e(pre,LTo),e(Va,BTo),e(De,xTo),e(De,A),e(A,xv),e(xv,_re),e(_re,kTo),e(xv,RTo),e(xv,P$),e(P$,STo),e(xv,PTo),e(A,$To),e(A,kv),e(kv,vre),e(vre,ITo),e(kv,DTo),e(kv,$$),e($$,jTo),e(kv,NTo),e(A,qTo),e(A,Rv),e(Rv,bre),e(bre,GTo),e(Rv,OTo),e(Rv,I$),e(I$,XTo),e(Rv,VTo),e(A,zTo),e(A,Sv),e(Sv,Tre),e(Tre,WTo),e(Sv,QTo),e(Sv,D$),e(D$,HTo),e(Sv,UTo),e(A,JTo),e(A,Pv),e(Pv,Fre),e(Fre,YTo),e(Pv,KTo),e(Pv,j$),e(j$,ZTo),e(Pv,e7o),e(A,o7o),e(A,$v),e($v,Cre),e(Cre,r7o),e($v,t7o),e($v,N$),e(N$,a7o),e($v,n7o),e(A,s7o),e(A,Iv),e(Iv,Mre),e(Mre,l7o),e(Iv,i7o),e(Iv,q$),e(q$,d7o),e(Iv,c7o),e(A,f7o),e(A,Dv),e(Dv,Ere),e(Ere,m7o),e(Dv,g7o),e(Dv,G$),e(G$,h7o),e(Dv,u7o),e(A,p7o),e(A,jv),e(jv,yre),e(yre,_7o),e(jv,v7o),e(jv,O$),e(O$,b7o),e(jv,T7o),e(A,F7o),e(A,Nv),e(Nv,wre),e(wre,C7o),e(Nv,M7o),e(Nv,X$),e(X$,E7o),e(Nv,y7o),e(A,w7o),e(A,qv),e(qv,Are),e(Are,A7o),e(qv,L7o),e(qv,V$),e(V$,B7o),e(qv,x7o),e(A,k7o),e(A,Gv),e(Gv,Lre),e(Lre,R7o),e(Gv,S7o),e(Gv,z$),e(z$,P7o),e(Gv,$7o),e(A,I7o),e(A,Ov),e(Ov,Bre),e(Bre,D7o),e(Ov,j7o),e(Ov,W$),e(W$,N7o),e(Ov,q7o),e(A,G7o),e(A,Xv),e(Xv,xre),e(xre,O7o),e(Xv,X7o),e(Xv,Q$),e(Q$,V7o),e(Xv,z7o),e(A,W7o),e(A,Vv),e(Vv,kre),e(kre,Q7o),e(Vv,H7o),e(Vv,H$),e(H$,U7o),e(Vv,J7o),e(A,Y7o),e(A,zv),e(zv,Rre),e(Rre,K7o),e(zv,Z7o),e(zv,U$),e(U$,eFo),e(zv,oFo),e(A,rFo),e(A,Wv),e(Wv,Sre),e(Sre,tFo),e(Wv,aFo),e(Wv,J$),e(J$,nFo),e(Wv,sFo),e(A,lFo),e(A,Qv),e(Qv,Pre),e(Pre,iFo),e(Qv,dFo),e(Qv,Y$),e(Y$,cFo),e(Qv,fFo),e(A,mFo),e(A,Hv),e(Hv,$re),e($re,gFo),e(Hv,hFo),e(Hv,K$),e(K$,uFo),e(Hv,pFo),e(A,_Fo),e(A,Uv),e(Uv,Ire),e(Ire,vFo),e(Uv,bFo),e(Uv,Z$),e(Z$,TFo),e(Uv,FFo),e(A,CFo),e(A,Jv),e(Jv,Dre),e(Dre,MFo),e(Jv,EFo),e(Jv,eI),e(eI,yFo),e(Jv,wFo),e(A,AFo),e(A,Yv),e(Yv,jre),e(jre,LFo),e(Yv,BFo),e(Yv,oI),e(oI,xFo),e(Yv,kFo),e(A,RFo),e(A,Kv),e(Kv,Nre),e(Nre,SFo),e(Kv,PFo),e(Kv,rI),e(rI,$Fo),e(Kv,IFo),e(A,DFo),e(A,Zv),e(Zv,qre),e(qre,jFo),e(Zv,NFo),e(Zv,tI),e(tI,qFo),e(Zv,GFo),e(A,OFo),e(A,e1),e(e1,Gre),e(Gre,XFo),e(e1,VFo),e(e1,aI),e(aI,zFo),e(e1,WFo),e(A,QFo),e(A,o1),e(o1,Ore),e(Ore,HFo),e(o1,UFo),e(o1,nI),e(nI,JFo),e(o1,YFo),e(A,KFo),e(A,r1),e(r1,Xre),e(Xre,ZFo),e(r1,eCo),e(r1,sI),e(sI,oCo),e(r1,rCo),e(A,tCo),e(A,t1),e(t1,Vre),e(Vre,aCo),e(t1,nCo),e(t1,lI),e(lI,sCo),e(t1,lCo),e(A,iCo),e(A,a1),e(a1,zre),e(zre,dCo),e(a1,cCo),e(a1,iI),e(iI,fCo),e(a1,mCo),e(A,gCo),e(A,n1),e(n1,Wre),e(Wre,hCo),e(n1,uCo),e(n1,dI),e(dI,pCo),e(n1,_Co),e(A,vCo),e(A,s1),e(s1,Qre),e(Qre,bCo),e(s1,TCo),e(s1,cI),e(cI,FCo),e(s1,CCo),e(A,MCo),e(A,l1),e(l1,Hre),e(Hre,ECo),e(l1,yCo),e(l1,fI),e(fI,wCo),e(l1,ACo),e(A,LCo),e(A,i1),e(i1,Ure),e(Ure,BCo),e(i1,xCo),e(i1,mI),e(mI,kCo),e(i1,RCo),e(A,SCo),e(A,d1),e(d1,Jre),e(Jre,PCo),e(d1,$Co),e(d1,gI),e(gI,ICo),e(d1,DCo),e(A,jCo),e(A,c1),e(c1,Yre),e(Yre,NCo),e(c1,qCo),e(c1,hI),e(hI,GCo),e(c1,OCo),e(A,XCo),e(A,f1),e(f1,Kre),e(Kre,VCo),e(f1,zCo),e(f1,uI),e(uI,WCo),e(f1,QCo),e(A,HCo),e(A,m1),e(m1,Zre),e(Zre,UCo),e(m1,JCo),e(m1,pI),e(pI,YCo),e(m1,KCo),e(A,ZCo),e(A,g1),e(g1,ete),e(ete,eMo),e(g1,oMo),e(g1,_I),e(_I,rMo),e(g1,tMo),e(A,aMo),e(A,h1),e(h1,ote),e(ote,nMo),e(h1,sMo),e(h1,vI),e(vI,lMo),e(h1,iMo),e(A,dMo),e(A,u1),e(u1,rte),e(rte,cMo),e(u1,fMo),e(u1,bI),e(bI,mMo),e(u1,gMo),e(A,hMo),e(A,p1),e(p1,tte),e(tte,uMo),e(p1,pMo),e(p1,TI),e(TI,_Mo),e(p1,vMo),e(A,bMo),e(A,_1),e(_1,ate),e(ate,TMo),e(_1,FMo),e(_1,FI),e(FI,CMo),e(_1,MMo),e(A,EMo),e(A,v1),e(v1,nte),e(nte,yMo),e(v1,wMo),e(v1,CI),e(CI,AMo),e(v1,LMo),e(A,BMo),e(A,b1),e(b1,ste),e(ste,xMo),e(b1,kMo),e(b1,MI),e(MI,RMo),e(b1,SMo),e(A,PMo),e(A,T1),e(T1,lte),e(lte,$Mo),e(T1,IMo),e(T1,EI),e(EI,DMo),e(T1,jMo),e(A,NMo),e(A,F1),e(F1,ite),e(ite,qMo),e(F1,GMo),e(F1,yI),e(yI,OMo),e(F1,XMo),e(De,VMo),e(De,C1),e(C1,zMo),e(C1,dte),e(dte,WMo),e(C1,QMo),e(C1,cte),e(cte,HMo),e(De,UMo),e(De,fte),e(fte,JMo),e(De,YMo),g(X3,De,null),v(c,J9e,_),v(c,sd,_),e(sd,M1),e(M1,mte),g(V3,mte,null),e(sd,KMo),e(sd,gte),e(gte,ZMo),v(c,Y9e,_),v(c,Zo,_),g(z3,Zo,null),e(Zo,eEo),e(Zo,ld),e(ld,oEo),e(ld,hte),e(hte,rEo),e(ld,tEo),e(ld,ute),e(ute,aEo),e(ld,nEo),e(Zo,sEo),e(Zo,W3),e(W3,lEo),e(W3,pte),e(pte,iEo),e(W3,dEo),e(Zo,cEo),e(Zo,Wr),g(Q3,Wr,null),e(Wr,fEo),e(Wr,_te),e(_te,mEo),e(Wr,gEo),e(Wr,id),e(id,hEo),e(id,vte),e(vte,uEo),e(id,pEo),e(id,bte),e(bte,_Eo),e(id,vEo),e(Wr,bEo),e(Wr,Tte),e(Tte,TEo),e(Wr,FEo),g(H3,Wr,null),e(Zo,CEo),e(Zo,je),g(U3,je,null),e(je,MEo),e(je,Fte),e(Fte,EEo),e(je,yEo),e(je,za),e(za,wEo),e(za,Cte),e(Cte,AEo),e(za,LEo),e(za,Mte),e(Mte,BEo),e(za,xEo),e(za,Ete),e(Ete,kEo),e(za,REo),e(je,SEo),e(je,G),e(G,E1),e(E1,yte),e(yte,PEo),e(E1,$Eo),e(E1,wI),e(wI,IEo),e(E1,DEo),e(G,jEo),e(G,y1),e(y1,wte),e(wte,NEo),e(y1,qEo),e(y1,AI),e(AI,GEo),e(y1,OEo),e(G,XEo),e(G,w1),e(w1,Ate),e(Ate,VEo),e(w1,zEo),e(w1,LI),e(LI,WEo),e(w1,QEo),e(G,HEo),e(G,A1),e(A1,Lte),e(Lte,UEo),e(A1,JEo),e(A1,BI),e(BI,YEo),e(A1,KEo),e(G,ZEo),e(G,L1),e(L1,Bte),e(Bte,e3o),e(L1,o3o),e(L1,xI),e(xI,r3o),e(L1,t3o),e(G,a3o),e(G,B1),e(B1,xte),e(xte,n3o),e(B1,s3o),e(B1,kI),e(kI,l3o),e(B1,i3o),e(G,d3o),e(G,x1),e(x1,kte),e(kte,c3o),e(x1,f3o),e(x1,RI),e(RI,m3o),e(x1,g3o),e(G,h3o),e(G,k1),e(k1,Rte),e(Rte,u3o),e(k1,p3o),e(k1,SI),e(SI,_3o),e(k1,v3o),e(G,b3o),e(G,R1),e(R1,Ste),e(Ste,T3o),e(R1,F3o),e(R1,PI),e(PI,C3o),e(R1,M3o),e(G,E3o),e(G,S1),e(S1,Pte),e(Pte,y3o),e(S1,w3o),e(S1,$I),e($I,A3o),e(S1,L3o),e(G,B3o),e(G,P1),e(P1,$te),e($te,x3o),e(P1,k3o),e(P1,II),e(II,R3o),e(P1,S3o),e(G,P3o),e(G,$1),e($1,Ite),e(Ite,$3o),e($1,I3o),e($1,DI),e(DI,D3o),e($1,j3o),e(G,N3o),e(G,I1),e(I1,Dte),e(Dte,q3o),e(I1,G3o),e(I1,jI),e(jI,O3o),e(I1,X3o),e(G,V3o),e(G,D1),e(D1,jte),e(jte,z3o),e(D1,W3o),e(D1,NI),e(NI,Q3o),e(D1,H3o),e(G,U3o),e(G,j1),e(j1,Nte),e(Nte,J3o),e(j1,Y3o),e(j1,qI),e(qI,K3o),e(j1,Z3o),e(G,e5o),e(G,N1),e(N1,qte),e(qte,o5o),e(N1,r5o),e(N1,GI),e(GI,t5o),e(N1,a5o),e(G,n5o),e(G,q1),e(q1,Gte),e(Gte,s5o),e(q1,l5o),e(q1,OI),e(OI,i5o),e(q1,d5o),e(G,c5o),e(G,G1),e(G1,Ote),e(Ote,f5o),e(G1,m5o),e(G1,XI),e(XI,g5o),e(G1,h5o),e(G,u5o),e(G,O1),e(O1,Xte),e(Xte,p5o),e(O1,_5o),e(O1,VI),e(VI,v5o),e(O1,b5o),e(G,T5o),e(G,X1),e(X1,Vte),e(Vte,F5o),e(X1,C5o),e(X1,zI),e(zI,M5o),e(X1,E5o),e(G,y5o),e(G,V1),e(V1,zte),e(zte,w5o),e(V1,A5o),e(V1,WI),e(WI,L5o),e(V1,B5o),e(G,x5o),e(G,z1),e(z1,Wte),e(Wte,k5o),e(z1,R5o),e(z1,QI),e(QI,S5o),e(z1,P5o),e(G,$5o),e(G,W1),e(W1,Qte),e(Qte,I5o),e(W1,D5o),e(W1,HI),e(HI,j5o),e(W1,N5o),e(G,q5o),e(G,Q1),e(Q1,Hte),e(Hte,G5o),e(Q1,O5o),e(Q1,UI),e(UI,X5o),e(Q1,V5o),e(G,z5o),e(G,H1),e(H1,Ute),e(Ute,W5o),e(H1,Q5o),e(H1,JI),e(JI,H5o),e(H1,U5o),e(G,J5o),e(G,U1),e(U1,Jte),e(Jte,Y5o),e(U1,K5o),e(U1,YI),e(YI,Z5o),e(U1,eyo),e(G,oyo),e(G,J1),e(J1,Yte),e(Yte,ryo),e(J1,tyo),e(J1,KI),e(KI,ayo),e(J1,nyo),e(G,syo),e(G,Y1),e(Y1,Kte),e(Kte,lyo),e(Y1,iyo),e(Y1,ZI),e(ZI,dyo),e(Y1,cyo),e(je,fyo),e(je,K1),e(K1,myo),e(K1,Zte),e(Zte,gyo),e(K1,hyo),e(K1,eae),e(eae,uyo),e(je,pyo),e(je,oae),e(oae,_yo),e(je,vyo),g(J3,je,null),v(c,K9e,_),v(c,dd,_),e(dd,Z1),e(Z1,rae),g(Y3,rae,null),e(dd,byo),e(dd,tae),e(tae,Tyo),v(c,Z9e,_),v(c,er,_),g(K3,er,null),e(er,Fyo),e(er,cd),e(cd,Cyo),e(cd,aae),e(aae,Myo),e(cd,Eyo),e(cd,nae),e(nae,yyo),e(cd,wyo),e(er,Ayo),e(er,Z3),e(Z3,Lyo),e(Z3,sae),e(sae,Byo),e(Z3,xyo),e(er,kyo),e(er,Qr),g(e5,Qr,null),e(Qr,Ryo),e(Qr,lae),e(lae,Syo),e(Qr,Pyo),e(Qr,fd),e(fd,$yo),e(fd,iae),e(iae,Iyo),e(fd,Dyo),e(fd,dae),e(dae,jyo),e(fd,Nyo),e(Qr,qyo),e(Qr,cae),e(cae,Gyo),e(Qr,Oyo),g(o5,Qr,null),e(er,Xyo),e(er,Ne),g(r5,Ne,null),e(Ne,Vyo),e(Ne,fae),e(fae,zyo),e(Ne,Wyo),e(Ne,Wa),e(Wa,Qyo),e(Wa,mae),e(mae,Hyo),e(Wa,Uyo),e(Wa,gae),e(gae,Jyo),e(Wa,Yyo),e(Wa,hae),e(hae,Kyo),e(Wa,Zyo),e(Ne,ewo),e(Ne,na),e(na,e4),e(e4,uae),e(uae,owo),e(e4,rwo),e(e4,eD),e(eD,two),e(e4,awo),e(na,nwo),e(na,o4),e(o4,pae),e(pae,swo),e(o4,lwo),e(o4,oD),e(oD,iwo),e(o4,dwo),e(na,cwo),e(na,r4),e(r4,_ae),e(_ae,fwo),e(r4,mwo),e(r4,rD),e(rD,gwo),e(r4,hwo),e(na,uwo),e(na,t4),e(t4,vae),e(vae,pwo),e(t4,_wo),e(t4,tD),e(tD,vwo),e(t4,bwo),e(na,Two),e(na,a4),e(a4,bae),e(bae,Fwo),e(a4,Cwo),e(a4,aD),e(aD,Mwo),e(a4,Ewo),e(Ne,ywo),e(Ne,n4),e(n4,wwo),e(n4,Tae),e(Tae,Awo),e(n4,Lwo),e(n4,Fae),e(Fae,Bwo),e(Ne,xwo),e(Ne,Cae),e(Cae,kwo),e(Ne,Rwo),g(t5,Ne,null),v(c,eBe,_),v(c,md,_),e(md,s4),e(s4,Mae),g(a5,Mae,null),e(md,Swo),e(md,Eae),e(Eae,Pwo),v(c,oBe,_),v(c,or,_),g(n5,or,null),e(or,$wo),e(or,gd),e(gd,Iwo),e(gd,yae),e(yae,Dwo),e(gd,jwo),e(gd,wae),e(wae,Nwo),e(gd,qwo),e(or,Gwo),e(or,s5),e(s5,Owo),e(s5,Aae),e(Aae,Xwo),e(s5,Vwo),e(or,zwo),e(or,Hr),g(l5,Hr,null),e(Hr,Wwo),e(Hr,Lae),e(Lae,Qwo),e(Hr,Hwo),e(Hr,hd),e(hd,Uwo),e(hd,Bae),e(Bae,Jwo),e(hd,Ywo),e(hd,xae),e(xae,Kwo),e(hd,Zwo),e(Hr,e6o),e(Hr,kae),e(kae,o6o),e(Hr,r6o),g(i5,Hr,null),e(or,t6o),e(or,qe),g(d5,qe,null),e(qe,a6o),e(qe,Rae),e(Rae,n6o),e(qe,s6o),e(qe,Qa),e(Qa,l6o),e(Qa,Sae),e(Sae,i6o),e(Qa,d6o),e(Qa,Pae),e(Pae,c6o),e(Qa,f6o),e(Qa,$ae),e($ae,m6o),e(Qa,g6o),e(qe,h6o),e(qe,N),e(N,l4),e(l4,Iae),e(Iae,u6o),e(l4,p6o),e(l4,nD),e(nD,_6o),e(l4,v6o),e(N,b6o),e(N,i4),e(i4,Dae),e(Dae,T6o),e(i4,F6o),e(i4,sD),e(sD,C6o),e(i4,M6o),e(N,E6o),e(N,d4),e(d4,jae),e(jae,y6o),e(d4,w6o),e(d4,lD),e(lD,A6o),e(d4,L6o),e(N,B6o),e(N,c4),e(c4,Nae),e(Nae,x6o),e(c4,k6o),e(c4,iD),e(iD,R6o),e(c4,S6o),e(N,P6o),e(N,f4),e(f4,qae),e(qae,$6o),e(f4,I6o),e(f4,dD),e(dD,D6o),e(f4,j6o),e(N,N6o),e(N,m4),e(m4,Gae),e(Gae,q6o),e(m4,G6o),e(m4,cD),e(cD,O6o),e(m4,X6o),e(N,V6o),e(N,g4),e(g4,Oae),e(Oae,z6o),e(g4,W6o),e(g4,fD),e(fD,Q6o),e(g4,H6o),e(N,U6o),e(N,h4),e(h4,Xae),e(Xae,J6o),e(h4,Y6o),e(h4,mD),e(mD,K6o),e(h4,Z6o),e(N,eAo),e(N,u4),e(u4,Vae),e(Vae,oAo),e(u4,rAo),e(u4,gD),e(gD,tAo),e(u4,aAo),e(N,nAo),e(N,p4),e(p4,zae),e(zae,sAo),e(p4,lAo),e(p4,hD),e(hD,iAo),e(p4,dAo),e(N,cAo),e(N,_4),e(_4,Wae),e(Wae,fAo),e(_4,mAo),e(_4,uD),e(uD,gAo),e(_4,hAo),e(N,uAo),e(N,v4),e(v4,Qae),e(Qae,pAo),e(v4,_Ao),e(v4,pD),e(pD,vAo),e(v4,bAo),e(N,TAo),e(N,b4),e(b4,Hae),e(Hae,FAo),e(b4,CAo),e(b4,_D),e(_D,MAo),e(b4,EAo),e(N,yAo),e(N,T4),e(T4,Uae),e(Uae,wAo),e(T4,AAo),e(T4,vD),e(vD,LAo),e(T4,BAo),e(N,xAo),e(N,F4),e(F4,Jae),e(Jae,kAo),e(F4,RAo),e(F4,bD),e(bD,SAo),e(F4,PAo),e(N,$Ao),e(N,C4),e(C4,Yae),e(Yae,IAo),e(C4,DAo),e(C4,TD),e(TD,jAo),e(C4,NAo),e(N,qAo),e(N,M4),e(M4,Kae),e(Kae,GAo),e(M4,OAo),e(M4,FD),e(FD,XAo),e(M4,VAo),e(N,zAo),e(N,E4),e(E4,Zae),e(Zae,WAo),e(E4,QAo),e(E4,CD),e(CD,HAo),e(E4,UAo),e(N,JAo),e(N,y4),e(y4,ene),e(ene,YAo),e(y4,KAo),e(y4,MD),e(MD,ZAo),e(y4,eLo),e(N,oLo),e(N,w4),e(w4,one),e(one,rLo),e(w4,tLo),e(w4,ED),e(ED,aLo),e(w4,nLo),e(N,sLo),e(N,A4),e(A4,rne),e(rne,lLo),e(A4,iLo),e(A4,yD),e(yD,dLo),e(A4,cLo),e(N,fLo),e(N,L4),e(L4,tne),e(tne,mLo),e(L4,gLo),e(L4,wD),e(wD,hLo),e(L4,uLo),e(N,pLo),e(N,B4),e(B4,ane),e(ane,_Lo),e(B4,vLo),e(B4,AD),e(AD,bLo),e(B4,TLo),e(N,FLo),e(N,x4),e(x4,nne),e(nne,CLo),e(x4,MLo),e(x4,LD),e(LD,ELo),e(x4,yLo),e(N,wLo),e(N,k4),e(k4,sne),e(sne,ALo),e(k4,LLo),e(k4,BD),e(BD,BLo),e(k4,xLo),e(N,kLo),e(N,R4),e(R4,lne),e(lne,RLo),e(R4,SLo),e(R4,xD),e(xD,PLo),e(R4,$Lo),e(N,ILo),e(N,S4),e(S4,ine),e(ine,DLo),e(S4,jLo),e(S4,kD),e(kD,NLo),e(S4,qLo),e(N,GLo),e(N,P4),e(P4,dne),e(dne,OLo),e(P4,XLo),e(P4,RD),e(RD,VLo),e(P4,zLo),e(N,WLo),e(N,$4),e($4,cne),e(cne,QLo),e($4,HLo),e($4,SD),e(SD,ULo),e($4,JLo),e(N,YLo),e(N,I4),e(I4,fne),e(fne,KLo),e(I4,ZLo),e(I4,PD),e(PD,e8o),e(I4,o8o),e(N,r8o),e(N,D4),e(D4,mne),e(mne,t8o),e(D4,a8o),e(D4,$D),e($D,n8o),e(D4,s8o),e(N,l8o),e(N,j4),e(j4,gne),e(gne,i8o),e(j4,d8o),e(j4,ID),e(ID,c8o),e(j4,f8o),e(N,m8o),e(N,N4),e(N4,hne),e(hne,g8o),e(N4,h8o),e(N4,DD),e(DD,u8o),e(N4,p8o),e(qe,_8o),e(qe,q4),e(q4,v8o),e(q4,une),e(une,b8o),e(q4,T8o),e(q4,pne),e(pne,F8o),e(qe,C8o),e(qe,_ne),e(_ne,M8o),e(qe,E8o),g(c5,qe,null),v(c,rBe,_),v(c,ud,_),e(ud,G4),e(G4,vne),g(f5,vne,null),e(ud,y8o),e(ud,bne),e(bne,w8o),v(c,tBe,_),v(c,rr,_),g(m5,rr,null),e(rr,A8o),e(rr,pd),e(pd,L8o),e(pd,Tne),e(Tne,B8o),e(pd,x8o),e(pd,Fne),e(Fne,k8o),e(pd,R8o),e(rr,S8o),e(rr,g5),e(g5,P8o),e(g5,Cne),e(Cne,$8o),e(g5,I8o),e(rr,D8o),e(rr,Ur),g(h5,Ur,null),e(Ur,j8o),e(Ur,Mne),e(Mne,N8o),e(Ur,q8o),e(Ur,_d),e(_d,G8o),e(_d,Ene),e(Ene,O8o),e(_d,X8o),e(_d,yne),e(yne,V8o),e(_d,z8o),e(Ur,W8o),e(Ur,wne),e(wne,Q8o),e(Ur,H8o),g(u5,Ur,null),e(rr,U8o),e(rr,Ge),g(p5,Ge,null),e(Ge,J8o),e(Ge,Ane),e(Ane,Y8o),e(Ge,K8o),e(Ge,Ha),e(Ha,Z8o),e(Ha,Lne),e(Lne,e9o),e(Ha,o9o),e(Ha,Bne),e(Bne,r9o),e(Ha,t9o),e(Ha,xne),e(xne,a9o),e(Ha,n9o),e(Ge,s9o),e(Ge,R),e(R,O4),e(O4,kne),e(kne,l9o),e(O4,i9o),e(O4,jD),e(jD,d9o),e(O4,c9o),e(R,f9o),e(R,X4),e(X4,Rne),e(Rne,m9o),e(X4,g9o),e(X4,ND),e(ND,h9o),e(X4,u9o),e(R,p9o),e(R,V4),e(V4,Sne),e(Sne,_9o),e(V4,v9o),e(V4,qD),e(qD,b9o),e(V4,T9o),e(R,F9o),e(R,z4),e(z4,Pne),e(Pne,C9o),e(z4,M9o),e(z4,GD),e(GD,E9o),e(z4,y9o),e(R,w9o),e(R,W4),e(W4,$ne),e($ne,A9o),e(W4,L9o),e(W4,OD),e(OD,B9o),e(W4,x9o),e(R,k9o),e(R,Q4),e(Q4,Ine),e(Ine,R9o),e(Q4,S9o),e(Q4,XD),e(XD,P9o),e(Q4,$9o),e(R,I9o),e(R,H4),e(H4,Dne),e(Dne,D9o),e(H4,j9o),e(H4,VD),e(VD,N9o),e(H4,q9o),e(R,G9o),e(R,U4),e(U4,jne),e(jne,O9o),e(U4,X9o),e(U4,zD),e(zD,V9o),e(U4,z9o),e(R,W9o),e(R,J4),e(J4,Nne),e(Nne,Q9o),e(J4,H9o),e(J4,WD),e(WD,U9o),e(J4,J9o),e(R,Y9o),e(R,Y4),e(Y4,qne),e(qne,K9o),e(Y4,Z9o),e(Y4,QD),e(QD,eBo),e(Y4,oBo),e(R,rBo),e(R,K4),e(K4,Gne),e(Gne,tBo),e(K4,aBo),e(K4,HD),e(HD,nBo),e(K4,sBo),e(R,lBo),e(R,Z4),e(Z4,One),e(One,iBo),e(Z4,dBo),e(Z4,UD),e(UD,cBo),e(Z4,fBo),e(R,mBo),e(R,eb),e(eb,Xne),e(Xne,gBo),e(eb,hBo),e(eb,JD),e(JD,uBo),e(eb,pBo),e(R,_Bo),e(R,ob),e(ob,Vne),e(Vne,vBo),e(ob,bBo),e(ob,YD),e(YD,TBo),e(ob,FBo),e(R,CBo),e(R,rb),e(rb,zne),e(zne,MBo),e(rb,EBo),e(rb,KD),e(KD,yBo),e(rb,wBo),e(R,ABo),e(R,tb),e(tb,Wne),e(Wne,LBo),e(tb,BBo),e(tb,ZD),e(ZD,xBo),e(tb,kBo),e(R,RBo),e(R,ab),e(ab,Qne),e(Qne,SBo),e(ab,PBo),e(ab,ej),e(ej,$Bo),e(ab,IBo),e(R,DBo),e(R,nb),e(nb,Hne),e(Hne,jBo),e(nb,NBo),e(nb,oj),e(oj,qBo),e(nb,GBo),e(R,OBo),e(R,sb),e(sb,Une),e(Une,XBo),e(sb,VBo),e(sb,rj),e(rj,zBo),e(sb,WBo),e(R,QBo),e(R,lb),e(lb,Jne),e(Jne,HBo),e(lb,UBo),e(lb,tj),e(tj,JBo),e(lb,YBo),e(R,KBo),e(R,ib),e(ib,Yne),e(Yne,ZBo),e(ib,exo),e(ib,aj),e(aj,oxo),e(ib,rxo),e(R,txo),e(R,db),e(db,Kne),e(Kne,axo),e(db,nxo),e(db,nj),e(nj,sxo),e(db,lxo),e(R,ixo),e(R,cb),e(cb,Zne),e(Zne,dxo),e(cb,cxo),e(cb,sj),e(sj,fxo),e(cb,mxo),e(R,gxo),e(R,fb),e(fb,ese),e(ese,hxo),e(fb,uxo),e(fb,lj),e(lj,pxo),e(fb,_xo),e(R,vxo),e(R,mb),e(mb,ose),e(ose,bxo),e(mb,Txo),e(mb,ij),e(ij,Fxo),e(mb,Cxo),e(R,Mxo),e(R,gb),e(gb,rse),e(rse,Exo),e(gb,yxo),e(gb,dj),e(dj,wxo),e(gb,Axo),e(R,Lxo),e(R,hb),e(hb,tse),e(tse,Bxo),e(hb,xxo),e(hb,cj),e(cj,kxo),e(hb,Rxo),e(R,Sxo),e(R,ub),e(ub,ase),e(ase,Pxo),e(ub,$xo),e(ub,fj),e(fj,Ixo),e(ub,Dxo),e(R,jxo),e(R,pb),e(pb,nse),e(nse,Nxo),e(pb,qxo),e(pb,mj),e(mj,Gxo),e(pb,Oxo),e(R,Xxo),e(R,_b),e(_b,sse),e(sse,Vxo),e(_b,zxo),e(_b,gj),e(gj,Wxo),e(_b,Qxo),e(R,Hxo),e(R,vb),e(vb,lse),e(lse,Uxo),e(vb,Jxo),e(vb,hj),e(hj,Yxo),e(vb,Kxo),e(R,Zxo),e(R,bb),e(bb,ise),e(ise,eko),e(bb,oko),e(bb,uj),e(uj,rko),e(bb,tko),e(R,ako),e(R,Tb),e(Tb,dse),e(dse,nko),e(Tb,sko),e(Tb,pj),e(pj,lko),e(Tb,iko),e(R,dko),e(R,Fb),e(Fb,cse),e(cse,cko),e(Fb,fko),e(Fb,_j),e(_j,mko),e(Fb,gko),e(R,hko),e(R,Cb),e(Cb,fse),e(fse,uko),e(Cb,pko),e(Cb,vj),e(vj,_ko),e(Cb,vko),e(R,bko),e(R,Mb),e(Mb,mse),e(mse,Tko),e(Mb,Fko),e(Mb,bj),e(bj,Cko),e(Mb,Mko),e(R,Eko),e(R,Eb),e(Eb,gse),e(gse,yko),e(Eb,wko),e(Eb,Tj),e(Tj,Ako),e(Eb,Lko),e(R,Bko),e(R,yb),e(yb,hse),e(hse,xko),e(yb,kko),e(yb,Fj),e(Fj,Rko),e(yb,Sko),e(R,Pko),e(R,wb),e(wb,use),e(use,$ko),e(wb,Iko),e(wb,Cj),e(Cj,Dko),e(wb,jko),e(Ge,Nko),e(Ge,Ab),e(Ab,qko),e(Ab,pse),e(pse,Gko),e(Ab,Oko),e(Ab,_se),e(_se,Xko),e(Ge,Vko),e(Ge,vse),e(vse,zko),e(Ge,Wko),g(_5,Ge,null),v(c,aBe,_),v(c,vd,_),e(vd,Lb),e(Lb,bse),g(v5,bse,null),e(vd,Qko),e(vd,Tse),e(Tse,Hko),v(c,nBe,_),v(c,tr,_),g(b5,tr,null),e(tr,Uko),e(tr,bd),e(bd,Jko),e(bd,Fse),e(Fse,Yko),e(bd,Kko),e(bd,Cse),e(Cse,Zko),e(bd,eRo),e(tr,oRo),e(tr,T5),e(T5,rRo),e(T5,Mse),e(Mse,tRo),e(T5,aRo),e(tr,nRo),e(tr,Jr),g(F5,Jr,null),e(Jr,sRo),e(Jr,Ese),e(Ese,lRo),e(Jr,iRo),e(Jr,Td),e(Td,dRo),e(Td,yse),e(yse,cRo),e(Td,fRo),e(Td,wse),e(wse,mRo),e(Td,gRo),e(Jr,hRo),e(Jr,Ase),e(Ase,uRo),e(Jr,pRo),g(C5,Jr,null),e(tr,_Ro),e(tr,Oe),g(M5,Oe,null),e(Oe,vRo),e(Oe,Lse),e(Lse,bRo),e(Oe,TRo),e(Oe,Ua),e(Ua,FRo),e(Ua,Bse),e(Bse,CRo),e(Ua,MRo),e(Ua,xse),e(xse,ERo),e(Ua,yRo),e(Ua,kse),e(kse,wRo),e(Ua,ARo),e(Oe,LRo),e(Oe,Rse),e(Rse,Bb),e(Bb,Sse),e(Sse,BRo),e(Bb,xRo),e(Bb,Mj),e(Mj,kRo),e(Bb,RRo),e(Oe,SRo),e(Oe,xb),e(xb,PRo),e(xb,Pse),e(Pse,$Ro),e(xb,IRo),e(xb,$se),e($se,DRo),e(Oe,jRo),e(Oe,Ise),e(Ise,NRo),e(Oe,qRo),g(E5,Oe,null),v(c,sBe,_),v(c,Fd,_),e(Fd,kb),e(kb,Dse),g(y5,Dse,null),e(Fd,GRo),e(Fd,jse),e(jse,ORo),v(c,lBe,_),v(c,ar,_),g(w5,ar,null),e(ar,XRo),e(ar,Cd),e(Cd,VRo),e(Cd,Nse),e(Nse,zRo),e(Cd,WRo),e(Cd,qse),e(qse,QRo),e(Cd,HRo),e(ar,URo),e(ar,A5),e(A5,JRo),e(A5,Gse),e(Gse,YRo),e(A5,KRo),e(ar,ZRo),e(ar,Yr),g(L5,Yr,null),e(Yr,eSo),e(Yr,Ose),e(Ose,oSo),e(Yr,rSo),e(Yr,Md),e(Md,tSo),e(Md,Xse),e(Xse,aSo),e(Md,nSo),e(Md,Vse),e(Vse,sSo),e(Md,lSo),e(Yr,iSo),e(Yr,zse),e(zse,dSo),e(Yr,cSo),g(B5,Yr,null),e(ar,fSo),e(ar,Xe),g(x5,Xe,null),e(Xe,mSo),e(Xe,Wse),e(Wse,gSo),e(Xe,hSo),e(Xe,Ja),e(Ja,uSo),e(Ja,Qse),e(Qse,pSo),e(Ja,_So),e(Ja,Hse),e(Hse,vSo),e(Ja,bSo),e(Ja,Use),e(Use,TSo),e(Ja,FSo),e(Xe,CSo),e(Xe,ve),e(ve,Rb),e(Rb,Jse),e(Jse,MSo),e(Rb,ESo),e(Rb,Ej),e(Ej,ySo),e(Rb,wSo),e(ve,ASo),e(ve,Sb),e(Sb,Yse),e(Yse,LSo),e(Sb,BSo),e(Sb,yj),e(yj,xSo),e(Sb,kSo),e(ve,RSo),e(ve,Ps),e(Ps,Kse),e(Kse,SSo),e(Ps,PSo),e(Ps,wj),e(wj,$So),e(Ps,ISo),e(Ps,Aj),e(Aj,DSo),e(Ps,jSo),e(ve,NSo),e(ve,Pb),e(Pb,Zse),e(Zse,qSo),e(Pb,GSo),e(Pb,Lj),e(Lj,OSo),e(Pb,XSo),e(ve,VSo),e(ve,la),e(la,ele),e(ele,zSo),e(la,WSo),e(la,Bj),e(Bj,QSo),e(la,HSo),e(la,xj),e(xj,USo),e(la,JSo),e(la,kj),e(kj,YSo),e(la,KSo),e(ve,ZSo),e(ve,$b),e($b,ole),e(ole,ePo),e($b,oPo),e($b,Rj),e(Rj,rPo),e($b,tPo),e(ve,aPo),e(ve,Ib),e(Ib,rle),e(rle,nPo),e(Ib,sPo),e(Ib,Sj),e(Sj,lPo),e(Ib,iPo),e(ve,dPo),e(ve,Db),e(Db,tle),e(tle,cPo),e(Db,fPo),e(Db,Pj),e(Pj,mPo),e(Db,gPo),e(ve,hPo),e(ve,jb),e(jb,ale),e(ale,uPo),e(jb,pPo),e(jb,$j),e($j,_Po),e(jb,vPo),e(Xe,bPo),e(Xe,Nb),e(Nb,TPo),e(Nb,nle),e(nle,FPo),e(Nb,CPo),e(Nb,sle),e(sle,MPo),e(Xe,EPo),e(Xe,lle),e(lle,yPo),e(Xe,wPo),g(k5,Xe,null),v(c,iBe,_),v(c,Ed,_),e(Ed,qb),e(qb,ile),g(R5,ile,null),e(Ed,APo),e(Ed,dle),e(dle,LPo),v(c,dBe,_),v(c,nr,_),g(S5,nr,null),e(nr,BPo),e(nr,yd),e(yd,xPo),e(yd,cle),e(cle,kPo),e(yd,RPo),e(yd,fle),e(fle,SPo),e(yd,PPo),e(nr,$Po),e(nr,P5),e(P5,IPo),e(P5,mle),e(mle,DPo),e(P5,jPo),e(nr,NPo),e(nr,Kr),g($5,Kr,null),e(Kr,qPo),e(Kr,gle),e(gle,GPo),e(Kr,OPo),e(Kr,wd),e(wd,XPo),e(wd,hle),e(hle,VPo),e(wd,zPo),e(wd,ule),e(ule,WPo),e(wd,QPo),e(Kr,HPo),e(Kr,ple),e(ple,UPo),e(Kr,JPo),g(I5,Kr,null),e(nr,YPo),e(nr,Ve),g(D5,Ve,null),e(Ve,KPo),e(Ve,_le),e(_le,ZPo),e(Ve,e$o),e(Ve,Ya),e(Ya,o$o),e(Ya,vle),e(vle,r$o),e(Ya,t$o),e(Ya,ble),e(ble,a$o),e(Ya,n$o),e(Ya,Tle),e(Tle,s$o),e(Ya,l$o),e(Ve,i$o),e(Ve,Fle),e(Fle,Gb),e(Gb,Cle),e(Cle,d$o),e(Gb,c$o),e(Gb,Ij),e(Ij,f$o),e(Gb,m$o),e(Ve,g$o),e(Ve,Ob),e(Ob,h$o),e(Ob,Mle),e(Mle,u$o),e(Ob,p$o),e(Ob,Ele),e(Ele,_$o),e(Ve,v$o),e(Ve,yle),e(yle,b$o),e(Ve,T$o),g(j5,Ve,null),v(c,cBe,_),v(c,Ad,_),e(Ad,Xb),e(Xb,wle),g(N5,wle,null),e(Ad,F$o),e(Ad,Ale),e(Ale,C$o),v(c,fBe,_),v(c,sr,_),g(q5,sr,null),e(sr,M$o),e(sr,Ld),e(Ld,E$o),e(Ld,Lle),e(Lle,y$o),e(Ld,w$o),e(Ld,Ble),e(Ble,A$o),e(Ld,L$o),e(sr,B$o),e(sr,G5),e(G5,x$o),e(G5,xle),e(xle,k$o),e(G5,R$o),e(sr,S$o),e(sr,Zr),g(O5,Zr,null),e(Zr,P$o),e(Zr,kle),e(kle,$$o),e(Zr,I$o),e(Zr,Bd),e(Bd,D$o),e(Bd,Rle),e(Rle,j$o),e(Bd,N$o),e(Bd,Sle),e(Sle,q$o),e(Bd,G$o),e(Zr,O$o),e(Zr,Ple),e(Ple,X$o),e(Zr,V$o),g(X5,Zr,null),e(sr,z$o),e(sr,ze),g(V5,ze,null),e(ze,W$o),e(ze,$le),e($le,Q$o),e(ze,H$o),e(ze,Ka),e(Ka,U$o),e(Ka,Ile),e(Ile,J$o),e(Ka,Y$o),e(Ka,Dle),e(Dle,K$o),e(Ka,Z$o),e(Ka,jle),e(jle,eIo),e(Ka,oIo),e(ze,rIo),e(ze,Ae),e(Ae,Vb),e(Vb,Nle),e(Nle,tIo),e(Vb,aIo),e(Vb,Dj),e(Dj,nIo),e(Vb,sIo),e(Ae,lIo),e(Ae,zb),e(zb,qle),e(qle,iIo),e(zb,dIo),e(zb,jj),e(jj,cIo),e(zb,fIo),e(Ae,mIo),e(Ae,Wb),e(Wb,Gle),e(Gle,gIo),e(Wb,hIo),e(Wb,Nj),e(Nj,uIo),e(Wb,pIo),e(Ae,_Io),e(Ae,Qb),e(Qb,Ole),e(Ole,vIo),e(Qb,bIo),e(Qb,qj),e(qj,TIo),e(Qb,FIo),e(Ae,CIo),e(Ae,Hb),e(Hb,Xle),e(Xle,MIo),e(Hb,EIo),e(Hb,Gj),e(Gj,yIo),e(Hb,wIo),e(Ae,AIo),e(Ae,Ub),e(Ub,Vle),e(Vle,LIo),e(Ub,BIo),e(Ub,Oj),e(Oj,xIo),e(Ub,kIo),e(Ae,RIo),e(Ae,Jb),e(Jb,zle),e(zle,SIo),e(Jb,PIo),e(Jb,Xj),e(Xj,$Io),e(Jb,IIo),e(Ae,DIo),e(Ae,Yb),e(Yb,Wle),e(Wle,jIo),e(Yb,NIo),e(Yb,Vj),e(Vj,qIo),e(Yb,GIo),e(ze,OIo),e(ze,Kb),e(Kb,XIo),e(Kb,Qle),e(Qle,VIo),e(Kb,zIo),e(Kb,Hle),e(Hle,WIo),e(ze,QIo),e(ze,Ule),e(Ule,HIo),e(ze,UIo),g(z5,ze,null),v(c,mBe,_),v(c,xd,_),e(xd,Zb),e(Zb,Jle),g(W5,Jle,null),e(xd,JIo),e(xd,Yle),e(Yle,YIo),v(c,gBe,_),v(c,lr,_),g(Q5,lr,null),e(lr,KIo),e(lr,kd),e(kd,ZIo),e(kd,Kle),e(Kle,eDo),e(kd,oDo),e(kd,Zle),e(Zle,rDo),e(kd,tDo),e(lr,aDo),e(lr,H5),e(H5,nDo),e(H5,eie),e(eie,sDo),e(H5,lDo),e(lr,iDo),e(lr,et),g(U5,et,null),e(et,dDo),e(et,oie),e(oie,cDo),e(et,fDo),e(et,Rd),e(Rd,mDo),e(Rd,rie),e(rie,gDo),e(Rd,hDo),e(Rd,tie),e(tie,uDo),e(Rd,pDo),e(et,_Do),e(et,aie),e(aie,vDo),e(et,bDo),g(J5,et,null),e(lr,TDo),e(lr,We),g(Y5,We,null),e(We,FDo),e(We,nie),e(nie,CDo),e(We,MDo),e(We,Za),e(Za,EDo),e(Za,sie),e(sie,yDo),e(Za,wDo),e(Za,lie),e(lie,ADo),e(Za,LDo),e(Za,iie),e(iie,BDo),e(Za,xDo),e(We,kDo),e(We,en),e(en,e2),e(e2,die),e(die,RDo),e(e2,SDo),e(e2,zj),e(zj,PDo),e(e2,$Do),e(en,IDo),e(en,o2),e(o2,cie),e(cie,DDo),e(o2,jDo),e(o2,Wj),e(Wj,NDo),e(o2,qDo),e(en,GDo),e(en,r2),e(r2,fie),e(fie,ODo),e(r2,XDo),e(r2,Qj),e(Qj,VDo),e(r2,zDo),e(en,WDo),e(en,t2),e(t2,mie),e(mie,QDo),e(t2,HDo),e(t2,Hj),e(Hj,UDo),e(t2,JDo),e(We,YDo),e(We,a2),e(a2,KDo),e(a2,gie),e(gie,ZDo),e(a2,ejo),e(a2,hie),e(hie,ojo),e(We,rjo),e(We,uie),e(uie,tjo),e(We,ajo),g(K5,We,null),v(c,hBe,_),v(c,Sd,_),e(Sd,n2),e(n2,pie),g(Z5,pie,null),e(Sd,njo),e(Sd,_ie),e(_ie,sjo),v(c,uBe,_),v(c,ir,_),g(ey,ir,null),e(ir,ljo),e(ir,Pd),e(Pd,ijo),e(Pd,vie),e(vie,djo),e(Pd,cjo),e(Pd,bie),e(bie,fjo),e(Pd,mjo),e(ir,gjo),e(ir,oy),e(oy,hjo),e(oy,Tie),e(Tie,ujo),e(oy,pjo),e(ir,_jo),e(ir,ot),g(ry,ot,null),e(ot,vjo),e(ot,Fie),e(Fie,bjo),e(ot,Tjo),e(ot,$d),e($d,Fjo),e($d,Cie),e(Cie,Cjo),e($d,Mjo),e($d,Mie),e(Mie,Ejo),e($d,yjo),e(ot,wjo),e(ot,Eie),e(Eie,Ajo),e(ot,Ljo),g(ty,ot,null),e(ir,Bjo),e(ir,Qe),g(ay,Qe,null),e(Qe,xjo),e(Qe,yie),e(yie,kjo),e(Qe,Rjo),e(Qe,on),e(on,Sjo),e(on,wie),e(wie,Pjo),e(on,$jo),e(on,Aie),e(Aie,Ijo),e(on,Djo),e(on,Lie),e(Lie,jjo),e(on,Njo),e(Qe,qjo),e(Qe,Le),e(Le,s2),e(s2,Bie),e(Bie,Gjo),e(s2,Ojo),e(s2,Uj),e(Uj,Xjo),e(s2,Vjo),e(Le,zjo),e(Le,l2),e(l2,xie),e(xie,Wjo),e(l2,Qjo),e(l2,Jj),e(Jj,Hjo),e(l2,Ujo),e(Le,Jjo),e(Le,i2),e(i2,kie),e(kie,Yjo),e(i2,Kjo),e(i2,Yj),e(Yj,Zjo),e(i2,eNo),e(Le,oNo),e(Le,d2),e(d2,Rie),e(Rie,rNo),e(d2,tNo),e(d2,Kj),e(Kj,aNo),e(d2,nNo),e(Le,sNo),e(Le,c2),e(c2,Sie),e(Sie,lNo),e(c2,iNo),e(c2,Zj),e(Zj,dNo),e(c2,cNo),e(Le,fNo),e(Le,f2),e(f2,Pie),e(Pie,mNo),e(f2,gNo),e(f2,eN),e(eN,hNo),e(f2,uNo),e(Le,pNo),e(Le,m2),e(m2,$ie),e($ie,_No),e(m2,vNo),e(m2,oN),e(oN,bNo),e(m2,TNo),e(Le,FNo),e(Le,g2),e(g2,Iie),e(Iie,CNo),e(g2,MNo),e(g2,rN),e(rN,ENo),e(g2,yNo),e(Qe,wNo),e(Qe,h2),e(h2,ANo),e(h2,Die),e(Die,LNo),e(h2,BNo),e(h2,jie),e(jie,xNo),e(Qe,kNo),e(Qe,Nie),e(Nie,RNo),e(Qe,SNo),g(ny,Qe,null),v(c,pBe,_),v(c,Id,_),e(Id,u2),e(u2,qie),g(sy,qie,null),e(Id,PNo),e(Id,Gie),e(Gie,$No),v(c,_Be,_),v(c,dr,_),g(ly,dr,null),e(dr,INo),e(dr,Dd),e(Dd,DNo),e(Dd,Oie),e(Oie,jNo),e(Dd,NNo),e(Dd,Xie),e(Xie,qNo),e(Dd,GNo),e(dr,ONo),e(dr,iy),e(iy,XNo),e(iy,Vie),e(Vie,VNo),e(iy,zNo),e(dr,WNo),e(dr,rt),g(dy,rt,null),e(rt,QNo),e(rt,zie),e(zie,HNo),e(rt,UNo),e(rt,jd),e(jd,JNo),e(jd,Wie),e(Wie,YNo),e(jd,KNo),e(jd,Qie),e(Qie,ZNo),e(jd,eqo),e(rt,oqo),e(rt,Hie),e(Hie,rqo),e(rt,tqo),g(cy,rt,null),e(dr,aqo),e(dr,He),g(fy,He,null),e(He,nqo),e(He,Uie),e(Uie,sqo),e(He,lqo),e(He,rn),e(rn,iqo),e(rn,Jie),e(Jie,dqo),e(rn,cqo),e(rn,Yie),e(Yie,fqo),e(rn,mqo),e(rn,Kie),e(Kie,gqo),e(rn,hqo),e(He,uqo),e(He,my),e(my,p2),e(p2,Zie),e(Zie,pqo),e(p2,_qo),e(p2,tN),e(tN,vqo),e(p2,bqo),e(my,Tqo),e(my,_2),e(_2,ede),e(ede,Fqo),e(_2,Cqo),e(_2,aN),e(aN,Mqo),e(_2,Eqo),e(He,yqo),e(He,v2),e(v2,wqo),e(v2,ode),e(ode,Aqo),e(v2,Lqo),e(v2,rde),e(rde,Bqo),e(He,xqo),e(He,tde),e(tde,kqo),e(He,Rqo),g(gy,He,null),v(c,vBe,_),v(c,Nd,_),e(Nd,b2),e(b2,ade),g(hy,ade,null),e(Nd,Sqo),e(Nd,nde),e(nde,Pqo),v(c,bBe,_),v(c,cr,_),g(uy,cr,null),e(cr,$qo),e(cr,qd),e(qd,Iqo),e(qd,sde),e(sde,Dqo),e(qd,jqo),e(qd,lde),e(lde,Nqo),e(qd,qqo),e(cr,Gqo),e(cr,py),e(py,Oqo),e(py,ide),e(ide,Xqo),e(py,Vqo),e(cr,zqo),e(cr,tt),g(_y,tt,null),e(tt,Wqo),e(tt,dde),e(dde,Qqo),e(tt,Hqo),e(tt,Gd),e(Gd,Uqo),e(Gd,cde),e(cde,Jqo),e(Gd,Yqo),e(Gd,fde),e(fde,Kqo),e(Gd,Zqo),e(tt,eGo),e(tt,mde),e(mde,oGo),e(tt,rGo),g(vy,tt,null),e(cr,tGo),e(cr,Ue),g(by,Ue,null),e(Ue,aGo),e(Ue,gde),e(gde,nGo),e(Ue,sGo),e(Ue,tn),e(tn,lGo),e(tn,hde),e(hde,iGo),e(tn,dGo),e(tn,ude),e(ude,cGo),e(tn,fGo),e(tn,pde),e(pde,mGo),e(tn,gGo),e(Ue,hGo),e(Ue,an),e(an,T2),e(T2,_de),e(_de,uGo),e(T2,pGo),e(T2,nN),e(nN,_Go),e(T2,vGo),e(an,bGo),e(an,F2),e(F2,vde),e(vde,TGo),e(F2,FGo),e(F2,sN),e(sN,CGo),e(F2,MGo),e(an,EGo),e(an,C2),e(C2,bde),e(bde,yGo),e(C2,wGo),e(C2,lN),e(lN,AGo),e(C2,LGo),e(an,BGo),e(an,M2),e(M2,Tde),e(Tde,xGo),e(M2,kGo),e(M2,iN),e(iN,RGo),e(M2,SGo),e(Ue,PGo),e(Ue,E2),e(E2,$Go),e(E2,Fde),e(Fde,IGo),e(E2,DGo),e(E2,Cde),e(Cde,jGo),e(Ue,NGo),e(Ue,Mde),e(Mde,qGo),e(Ue,GGo),g(Ty,Ue,null),v(c,TBe,_),v(c,Od,_),e(Od,y2),e(y2,Ede),g(Fy,Ede,null),e(Od,OGo),e(Od,yde),e(yde,XGo),v(c,FBe,_),v(c,fr,_),g(Cy,fr,null),e(fr,VGo),e(fr,Xd),e(Xd,zGo),e(Xd,wde),e(wde,WGo),e(Xd,QGo),e(Xd,Ade),e(Ade,HGo),e(Xd,UGo),e(fr,JGo),e(fr,My),e(My,YGo),e(My,Lde),e(Lde,KGo),e(My,ZGo),e(fr,eOo),e(fr,at),g(Ey,at,null),e(at,oOo),e(at,Bde),e(Bde,rOo),e(at,tOo),e(at,Vd),e(Vd,aOo),e(Vd,xde),e(xde,nOo),e(Vd,sOo),e(Vd,kde),e(kde,lOo),e(Vd,iOo),e(at,dOo),e(at,Rde),e(Rde,cOo),e(at,fOo),g(yy,at,null),e(fr,mOo),e(fr,Je),g(wy,Je,null),e(Je,gOo),e(Je,Sde),e(Sde,hOo),e(Je,uOo),e(Je,nn),e(nn,pOo),e(nn,Pde),e(Pde,_Oo),e(nn,vOo),e(nn,$de),e($de,bOo),e(nn,TOo),e(nn,Ide),e(Ide,FOo),e(nn,COo),e(Je,MOo),e(Je,zd),e(zd,w2),e(w2,Dde),e(Dde,EOo),e(w2,yOo),e(w2,dN),e(dN,wOo),e(w2,AOo),e(zd,LOo),e(zd,A2),e(A2,jde),e(jde,BOo),e(A2,xOo),e(A2,cN),e(cN,kOo),e(A2,ROo),e(zd,SOo),e(zd,L2),e(L2,Nde),e(Nde,POo),e(L2,$Oo),e(L2,fN),e(fN,IOo),e(L2,DOo),e(Je,jOo),e(Je,B2),e(B2,NOo),e(B2,qde),e(qde,qOo),e(B2,GOo),e(B2,Gde),e(Gde,OOo),e(Je,XOo),e(Je,Ode),e(Ode,VOo),e(Je,zOo),g(Ay,Je,null),v(c,CBe,_),v(c,Wd,_),e(Wd,x2),e(x2,Xde),g(Ly,Xde,null),e(Wd,WOo),e(Wd,Vde),e(Vde,QOo),v(c,MBe,_),v(c,mr,_),g(By,mr,null),e(mr,HOo),e(mr,Qd),e(Qd,UOo),e(Qd,zde),e(zde,JOo),e(Qd,YOo),e(Qd,Wde),e(Wde,KOo),e(Qd,ZOo),e(mr,eXo),e(mr,xy),e(xy,oXo),e(xy,Qde),e(Qde,rXo),e(xy,tXo),e(mr,aXo),e(mr,nt),g(ky,nt,null),e(nt,nXo),e(nt,Hde),e(Hde,sXo),e(nt,lXo),e(nt,Hd),e(Hd,iXo),e(Hd,Ude),e(Ude,dXo),e(Hd,cXo),e(Hd,Jde),e(Jde,fXo),e(Hd,mXo),e(nt,gXo),e(nt,Yde),e(Yde,hXo),e(nt,uXo),g(Ry,nt,null),e(mr,pXo),e(mr,Ye),g(Sy,Ye,null),e(Ye,_Xo),e(Ye,Kde),e(Kde,vXo),e(Ye,bXo),e(Ye,sn),e(sn,TXo),e(sn,Zde),e(Zde,FXo),e(sn,CXo),e(sn,ece),e(ece,MXo),e(sn,EXo),e(sn,oce),e(oce,yXo),e(sn,wXo),e(Ye,AXo),e(Ye,rce),e(rce,k2),e(k2,tce),e(tce,LXo),e(k2,BXo),e(k2,mN),e(mN,xXo),e(k2,kXo),e(Ye,RXo),e(Ye,R2),e(R2,SXo),e(R2,ace),e(ace,PXo),e(R2,$Xo),e(R2,nce),e(nce,IXo),e(Ye,DXo),e(Ye,sce),e(sce,jXo),e(Ye,NXo),g(Py,Ye,null),v(c,EBe,_),v(c,Ud,_),e(Ud,S2),e(S2,lce),g($y,lce,null),e(Ud,qXo),e(Ud,ice),e(ice,GXo),v(c,yBe,_),v(c,gr,_),g(Iy,gr,null),e(gr,OXo),e(gr,Jd),e(Jd,XXo),e(Jd,dce),e(dce,VXo),e(Jd,zXo),e(Jd,cce),e(cce,WXo),e(Jd,QXo),e(gr,HXo),e(gr,Dy),e(Dy,UXo),e(Dy,fce),e(fce,JXo),e(Dy,YXo),e(gr,KXo),e(gr,st),g(jy,st,null),e(st,ZXo),e(st,mce),e(mce,eVo),e(st,oVo),e(st,Yd),e(Yd,rVo),e(Yd,gce),e(gce,tVo),e(Yd,aVo),e(Yd,hce),e(hce,nVo),e(Yd,sVo),e(st,lVo),e(st,uce),e(uce,iVo),e(st,dVo),g(Ny,st,null),e(gr,cVo),e(gr,Ke),g(qy,Ke,null),e(Ke,fVo),e(Ke,pce),e(pce,mVo),e(Ke,gVo),e(Ke,ln),e(ln,hVo),e(ln,_ce),e(_ce,uVo),e(ln,pVo),e(ln,vce),e(vce,_Vo),e(ln,vVo),e(ln,bce),e(bce,bVo),e(ln,TVo),e(Ke,FVo),e(Ke,Tce),e(Tce,P2),e(P2,Fce),e(Fce,CVo),e(P2,MVo),e(P2,gN),e(gN,EVo),e(P2,yVo),e(Ke,wVo),e(Ke,$2),e($2,AVo),e($2,Cce),e(Cce,LVo),e($2,BVo),e($2,Mce),e(Mce,xVo),e(Ke,kVo),e(Ke,Ece),e(Ece,RVo),e(Ke,SVo),g(Gy,Ke,null),v(c,wBe,_),v(c,Kd,_),e(Kd,I2),e(I2,yce),g(Oy,yce,null),e(Kd,PVo),e(Kd,wce),e(wce,$Vo),v(c,ABe,_),v(c,hr,_),g(Xy,hr,null),e(hr,IVo),e(hr,Zd),e(Zd,DVo),e(Zd,Ace),e(Ace,jVo),e(Zd,NVo),e(Zd,Lce),e(Lce,qVo),e(Zd,GVo),e(hr,OVo),e(hr,Vy),e(Vy,XVo),e(Vy,Bce),e(Bce,VVo),e(Vy,zVo),e(hr,WVo),e(hr,lt),g(zy,lt,null),e(lt,QVo),e(lt,xce),e(xce,HVo),e(lt,UVo),e(lt,ec),e(ec,JVo),e(ec,kce),e(kce,YVo),e(ec,KVo),e(ec,Rce),e(Rce,ZVo),e(ec,ezo),e(lt,ozo),e(lt,Sce),e(Sce,rzo),e(lt,tzo),g(Wy,lt,null),e(hr,azo),e(hr,Ze),g(Qy,Ze,null),e(Ze,nzo),e(Ze,Pce),e(Pce,szo),e(Ze,lzo),e(Ze,dn),e(dn,izo),e(dn,$ce),e($ce,dzo),e(dn,czo),e(dn,Ice),e(Ice,fzo),e(dn,mzo),e(dn,Dce),e(Dce,gzo),e(dn,hzo),e(Ze,uzo),e(Ze,Hy),e(Hy,D2),e(D2,jce),e(jce,pzo),e(D2,_zo),e(D2,hN),e(hN,vzo),e(D2,bzo),e(Hy,Tzo),e(Hy,j2),e(j2,Nce),e(Nce,Fzo),e(j2,Czo),e(j2,uN),e(uN,Mzo),e(j2,Ezo),e(Ze,yzo),e(Ze,N2),e(N2,wzo),e(N2,qce),e(qce,Azo),e(N2,Lzo),e(N2,Gce),e(Gce,Bzo),e(Ze,xzo),e(Ze,Oce),e(Oce,kzo),e(Ze,Rzo),g(Uy,Ze,null),v(c,LBe,_),v(c,oc,_),e(oc,q2),e(q2,Xce),g(Jy,Xce,null),e(oc,Szo),e(oc,Vce),e(Vce,Pzo),v(c,BBe,_),v(c,ur,_),g(Yy,ur,null),e(ur,$zo),e(ur,rc),e(rc,Izo),e(rc,zce),e(zce,Dzo),e(rc,jzo),e(rc,Wce),e(Wce,Nzo),e(rc,qzo),e(ur,Gzo),e(ur,Ky),e(Ky,Ozo),e(Ky,Qce),e(Qce,Xzo),e(Ky,Vzo),e(ur,zzo),e(ur,it),g(Zy,it,null),e(it,Wzo),e(it,Hce),e(Hce,Qzo),e(it,Hzo),e(it,tc),e(tc,Uzo),e(tc,Uce),e(Uce,Jzo),e(tc,Yzo),e(tc,Jce),e(Jce,Kzo),e(tc,Zzo),e(it,eWo),e(it,Yce),e(Yce,oWo),e(it,rWo),g(ew,it,null),e(ur,tWo),e(ur,go),g(ow,go,null),e(go,aWo),e(go,Kce),e(Kce,nWo),e(go,sWo),e(go,cn),e(cn,lWo),e(cn,Zce),e(Zce,iWo),e(cn,dWo),e(cn,efe),e(efe,cWo),e(cn,fWo),e(cn,ofe),e(ofe,mWo),e(cn,gWo),e(go,hWo),e(go,B),e(B,G2),e(G2,rfe),e(rfe,uWo),e(G2,pWo),e(G2,pN),e(pN,_Wo),e(G2,vWo),e(B,bWo),e(B,O2),e(O2,tfe),e(tfe,TWo),e(O2,FWo),e(O2,_N),e(_N,CWo),e(O2,MWo),e(B,EWo),e(B,X2),e(X2,afe),e(afe,yWo),e(X2,wWo),e(X2,vN),e(vN,AWo),e(X2,LWo),e(B,BWo),e(B,V2),e(V2,nfe),e(nfe,xWo),e(V2,kWo),e(V2,bN),e(bN,RWo),e(V2,SWo),e(B,PWo),e(B,z2),e(z2,sfe),e(sfe,$Wo),e(z2,IWo),e(z2,TN),e(TN,DWo),e(z2,jWo),e(B,NWo),e(B,W2),e(W2,lfe),e(lfe,qWo),e(W2,GWo),e(W2,FN),e(FN,OWo),e(W2,XWo),e(B,VWo),e(B,Q2),e(Q2,ife),e(ife,zWo),e(Q2,WWo),e(Q2,CN),e(CN,QWo),e(Q2,HWo),e(B,UWo),e(B,H2),e(H2,dfe),e(dfe,JWo),e(H2,YWo),e(H2,MN),e(MN,KWo),e(H2,ZWo),e(B,eQo),e(B,U2),e(U2,cfe),e(cfe,oQo),e(U2,rQo),e(U2,EN),e(EN,tQo),e(U2,aQo),e(B,nQo),e(B,J2),e(J2,ffe),e(ffe,sQo),e(J2,lQo),e(J2,yN),e(yN,iQo),e(J2,dQo),e(B,cQo),e(B,Y2),e(Y2,mfe),e(mfe,fQo),e(Y2,mQo),e(Y2,wN),e(wN,gQo),e(Y2,hQo),e(B,uQo),e(B,K2),e(K2,gfe),e(gfe,pQo),e(K2,_Qo),e(K2,AN),e(AN,vQo),e(K2,bQo),e(B,TQo),e(B,Z2),e(Z2,hfe),e(hfe,FQo),e(Z2,CQo),e(Z2,LN),e(LN,MQo),e(Z2,EQo),e(B,yQo),e(B,e0),e(e0,ufe),e(ufe,wQo),e(e0,AQo),e(e0,BN),e(BN,LQo),e(e0,BQo),e(B,xQo),e(B,o0),e(o0,pfe),e(pfe,kQo),e(o0,RQo),e(o0,xN),e(xN,SQo),e(o0,PQo),e(B,$Qo),e(B,r0),e(r0,_fe),e(_fe,IQo),e(r0,DQo),e(r0,kN),e(kN,jQo),e(r0,NQo),e(B,qQo),e(B,$s),e($s,vfe),e(vfe,GQo),e($s,OQo),e($s,RN),e(RN,XQo),e($s,VQo),e($s,SN),e(SN,zQo),e($s,WQo),e(B,QQo),e(B,t0),e(t0,bfe),e(bfe,HQo),e(t0,UQo),e(t0,PN),e(PN,JQo),e(t0,YQo),e(B,KQo),e(B,a0),e(a0,Tfe),e(Tfe,ZQo),e(a0,eHo),e(a0,$N),e($N,oHo),e(a0,rHo),e(B,tHo),e(B,n0),e(n0,Ffe),e(Ffe,aHo),e(n0,nHo),e(n0,IN),e(IN,sHo),e(n0,lHo),e(B,iHo),e(B,s0),e(s0,Cfe),e(Cfe,dHo),e(s0,cHo),e(s0,DN),e(DN,fHo),e(s0,mHo),e(B,gHo),e(B,l0),e(l0,Mfe),e(Mfe,hHo),e(l0,uHo),e(l0,jN),e(jN,pHo),e(l0,_Ho),e(B,vHo),e(B,i0),e(i0,Efe),e(Efe,bHo),e(i0,THo),e(i0,NN),e(NN,FHo),e(i0,CHo),e(B,MHo),e(B,d0),e(d0,yfe),e(yfe,EHo),e(d0,yHo),e(d0,qN),e(qN,wHo),e(d0,AHo),e(B,LHo),e(B,c0),e(c0,wfe),e(wfe,BHo),e(c0,xHo),e(c0,GN),e(GN,kHo),e(c0,RHo),e(B,SHo),e(B,f0),e(f0,Afe),e(Afe,PHo),e(f0,$Ho),e(f0,ON),e(ON,IHo),e(f0,DHo),e(B,jHo),e(B,m0),e(m0,Lfe),e(Lfe,NHo),e(m0,qHo),e(m0,XN),e(XN,GHo),e(m0,OHo),e(B,XHo),e(B,g0),e(g0,Bfe),e(Bfe,VHo),e(g0,zHo),e(g0,VN),e(VN,WHo),e(g0,QHo),e(B,HHo),e(B,h0),e(h0,xfe),e(xfe,UHo),e(h0,JHo),e(h0,zN),e(zN,YHo),e(h0,KHo),e(B,ZHo),e(B,u0),e(u0,kfe),e(kfe,eUo),e(u0,oUo),e(u0,WN),e(WN,rUo),e(u0,tUo),e(B,aUo),e(B,p0),e(p0,Rfe),e(Rfe,nUo),e(p0,sUo),e(p0,QN),e(QN,lUo),e(p0,iUo),e(B,dUo),e(B,_0),e(_0,Sfe),e(Sfe,cUo),e(_0,fUo),e(_0,HN),e(HN,mUo),e(_0,gUo),e(B,hUo),e(B,v0),e(v0,Pfe),e(Pfe,uUo),e(v0,pUo),e(v0,UN),e(UN,_Uo),e(v0,vUo),e(B,bUo),e(B,b0),e(b0,$fe),e($fe,TUo),e(b0,FUo),e(b0,JN),e(JN,CUo),e(b0,MUo),e(B,EUo),e(B,T0),e(T0,Ife),e(Ife,yUo),e(T0,wUo),e(T0,YN),e(YN,AUo),e(T0,LUo),e(B,BUo),e(B,F0),e(F0,Dfe),e(Dfe,xUo),e(F0,kUo),e(F0,KN),e(KN,RUo),e(F0,SUo),e(B,PUo),e(B,C0),e(C0,jfe),e(jfe,$Uo),e(C0,IUo),e(C0,ZN),e(ZN,DUo),e(C0,jUo),e(B,NUo),e(B,M0),e(M0,Nfe),e(Nfe,qUo),e(M0,GUo),e(M0,eq),e(eq,OUo),e(M0,XUo),e(B,VUo),e(B,E0),e(E0,qfe),e(qfe,zUo),e(E0,WUo),e(E0,oq),e(oq,QUo),e(E0,HUo),e(B,UUo),e(B,y0),e(y0,Gfe),e(Gfe,JUo),e(y0,YUo),e(y0,rq),e(rq,KUo),e(y0,ZUo),e(B,eJo),e(B,w0),e(w0,Ofe),e(Ofe,oJo),e(w0,rJo),e(w0,tq),e(tq,tJo),e(w0,aJo),e(B,nJo),e(B,A0),e(A0,Xfe),e(Xfe,sJo),e(A0,lJo),e(A0,aq),e(aq,iJo),e(A0,dJo),e(go,cJo),e(go,Vfe),e(Vfe,fJo),e(go,mJo),g(rw,go,null),v(c,xBe,_),v(c,ac,_),e(ac,L0),e(L0,zfe),g(tw,zfe,null),e(ac,gJo),e(ac,Wfe),e(Wfe,hJo),v(c,kBe,_),v(c,pr,_),g(aw,pr,null),e(pr,uJo),e(pr,nc),e(nc,pJo),e(nc,Qfe),e(Qfe,_Jo),e(nc,vJo),e(nc,Hfe),e(Hfe,bJo),e(nc,TJo),e(pr,FJo),e(pr,nw),e(nw,CJo),e(nw,Ufe),e(Ufe,MJo),e(nw,EJo),e(pr,yJo),e(pr,dt),g(sw,dt,null),e(dt,wJo),e(dt,Jfe),e(Jfe,AJo),e(dt,LJo),e(dt,sc),e(sc,BJo),e(sc,Yfe),e(Yfe,xJo),e(sc,kJo),e(sc,Kfe),e(Kfe,RJo),e(sc,SJo),e(dt,PJo),e(dt,Zfe),e(Zfe,$Jo),e(dt,IJo),g(lw,dt,null),e(pr,DJo),e(pr,ho),g(iw,ho,null),e(ho,jJo),e(ho,eme),e(eme,NJo),e(ho,qJo),e(ho,fn),e(fn,GJo),e(fn,ome),e(ome,OJo),e(fn,XJo),e(fn,rme),e(rme,VJo),e(fn,zJo),e(fn,tme),e(tme,WJo),e(fn,QJo),e(ho,HJo),e(ho,H),e(H,B0),e(B0,ame),e(ame,UJo),e(B0,JJo),e(B0,nq),e(nq,YJo),e(B0,KJo),e(H,ZJo),e(H,x0),e(x0,nme),e(nme,eYo),e(x0,oYo),e(x0,sq),e(sq,rYo),e(x0,tYo),e(H,aYo),e(H,k0),e(k0,sme),e(sme,nYo),e(k0,sYo),e(k0,lq),e(lq,lYo),e(k0,iYo),e(H,dYo),e(H,R0),e(R0,lme),e(lme,cYo),e(R0,fYo),e(R0,iq),e(iq,mYo),e(R0,gYo),e(H,hYo),e(H,S0),e(S0,ime),e(ime,uYo),e(S0,pYo),e(S0,dq),e(dq,_Yo),e(S0,vYo),e(H,bYo),e(H,P0),e(P0,dme),e(dme,TYo),e(P0,FYo),e(P0,cq),e(cq,CYo),e(P0,MYo),e(H,EYo),e(H,$0),e($0,cme),e(cme,yYo),e($0,wYo),e($0,fq),e(fq,AYo),e($0,LYo),e(H,BYo),e(H,I0),e(I0,fme),e(fme,xYo),e(I0,kYo),e(I0,mq),e(mq,RYo),e(I0,SYo),e(H,PYo),e(H,D0),e(D0,mme),e(mme,$Yo),e(D0,IYo),e(D0,gq),e(gq,DYo),e(D0,jYo),e(H,NYo),e(H,j0),e(j0,gme),e(gme,qYo),e(j0,GYo),e(j0,hq),e(hq,OYo),e(j0,XYo),e(H,VYo),e(H,N0),e(N0,hme),e(hme,zYo),e(N0,WYo),e(N0,uq),e(uq,QYo),e(N0,HYo),e(H,UYo),e(H,q0),e(q0,ume),e(ume,JYo),e(q0,YYo),e(q0,pq),e(pq,KYo),e(q0,ZYo),e(H,eKo),e(H,G0),e(G0,pme),e(pme,oKo),e(G0,rKo),e(G0,_q),e(_q,tKo),e(G0,aKo),e(H,nKo),e(H,O0),e(O0,_me),e(_me,sKo),e(O0,lKo),e(O0,vq),e(vq,iKo),e(O0,dKo),e(H,cKo),e(H,X0),e(X0,vme),e(vme,fKo),e(X0,mKo),e(X0,bq),e(bq,gKo),e(X0,hKo),e(H,uKo),e(H,V0),e(V0,bme),e(bme,pKo),e(V0,_Ko),e(V0,Tq),e(Tq,vKo),e(V0,bKo),e(H,TKo),e(H,z0),e(z0,Tme),e(Tme,FKo),e(z0,CKo),e(z0,Fq),e(Fq,MKo),e(z0,EKo),e(H,yKo),e(H,W0),e(W0,Fme),e(Fme,wKo),e(W0,AKo),e(W0,Cq),e(Cq,LKo),e(W0,BKo),e(H,xKo),e(H,Q0),e(Q0,Cme),e(Cme,kKo),e(Q0,RKo),e(Q0,Mq),e(Mq,SKo),e(Q0,PKo),e(H,$Ko),e(H,H0),e(H0,Mme),e(Mme,IKo),e(H0,DKo),e(H0,Eq),e(Eq,jKo),e(H0,NKo),e(H,qKo),e(H,U0),e(U0,Eme),e(Eme,GKo),e(U0,OKo),e(U0,yq),e(yq,XKo),e(U0,VKo),e(H,zKo),e(H,J0),e(J0,yme),e(yme,WKo),e(J0,QKo),e(J0,wq),e(wq,HKo),e(J0,UKo),e(ho,JKo),e(ho,wme),e(wme,YKo),e(ho,KKo),g(dw,ho,null),v(c,RBe,_),v(c,lc,_),e(lc,Y0),e(Y0,Ame),g(cw,Ame,null),e(lc,ZKo),e(lc,Lme),e(Lme,eZo),v(c,SBe,_),v(c,_r,_),g(fw,_r,null),e(_r,oZo),e(_r,ic),e(ic,rZo),e(ic,Bme),e(Bme,tZo),e(ic,aZo),e(ic,xme),e(xme,nZo),e(ic,sZo),e(_r,lZo),e(_r,mw),e(mw,iZo),e(mw,kme),e(kme,dZo),e(mw,cZo),e(_r,fZo),e(_r,ct),g(gw,ct,null),e(ct,mZo),e(ct,Rme),e(Rme,gZo),e(ct,hZo),e(ct,dc),e(dc,uZo),e(dc,Sme),e(Sme,pZo),e(dc,_Zo),e(dc,Pme),e(Pme,vZo),e(dc,bZo),e(ct,TZo),e(ct,$me),e($me,FZo),e(ct,CZo),g(hw,ct,null),e(_r,MZo),e(_r,uo),g(uw,uo,null),e(uo,EZo),e(uo,Ime),e(Ime,yZo),e(uo,wZo),e(uo,mn),e(mn,AZo),e(mn,Dme),e(Dme,LZo),e(mn,BZo),e(mn,jme),e(jme,xZo),e(mn,kZo),e(mn,Nme),e(Nme,RZo),e(mn,SZo),e(uo,PZo),e(uo,he),e(he,K0),e(K0,qme),e(qme,$Zo),e(K0,IZo),e(K0,Aq),e(Aq,DZo),e(K0,jZo),e(he,NZo),e(he,Z0),e(Z0,Gme),e(Gme,qZo),e(Z0,GZo),e(Z0,Lq),e(Lq,OZo),e(Z0,XZo),e(he,VZo),e(he,eT),e(eT,Ome),e(Ome,zZo),e(eT,WZo),e(eT,Bq),e(Bq,QZo),e(eT,HZo),e(he,UZo),e(he,oT),e(oT,Xme),e(Xme,JZo),e(oT,YZo),e(oT,xq),e(xq,KZo),e(oT,ZZo),e(he,eer),e(he,rT),e(rT,Vme),e(Vme,oer),e(rT,rer),e(rT,kq),e(kq,ter),e(rT,aer),e(he,ner),e(he,tT),e(tT,zme),e(zme,ser),e(tT,ler),e(tT,Rq),e(Rq,ier),e(tT,der),e(he,cer),e(he,aT),e(aT,Wme),e(Wme,fer),e(aT,mer),e(aT,Sq),e(Sq,ger),e(aT,her),e(he,uer),e(he,nT),e(nT,Qme),e(Qme,per),e(nT,_er),e(nT,Pq),e(Pq,ver),e(nT,ber),e(he,Ter),e(he,sT),e(sT,Hme),e(Hme,Fer),e(sT,Cer),e(sT,$q),e($q,Mer),e(sT,Eer),e(he,yer),e(he,lT),e(lT,Ume),e(Ume,wer),e(lT,Aer),e(lT,Iq),e(Iq,Ler),e(lT,Ber),e(uo,xer),e(uo,Jme),e(Jme,ker),e(uo,Rer),g(pw,uo,null),v(c,PBe,_),v(c,cc,_),e(cc,iT),e(iT,Yme),g(_w,Yme,null),e(cc,Ser),e(cc,Kme),e(Kme,Per),v(c,$Be,_),v(c,vr,_),g(vw,vr,null),e(vr,$er),e(vr,fc),e(fc,Ier),e(fc,Zme),e(Zme,Der),e(fc,jer),e(fc,ege),e(ege,Ner),e(fc,qer),e(vr,Ger),e(vr,bw),e(bw,Oer),e(bw,oge),e(oge,Xer),e(bw,Ver),e(vr,zer),e(vr,ft),g(Tw,ft,null),e(ft,Wer),e(ft,rge),e(rge,Qer),e(ft,Her),e(ft,mc),e(mc,Uer),e(mc,tge),e(tge,Jer),e(mc,Yer),e(mc,age),e(age,Ker),e(mc,Zer),e(ft,eor),e(ft,nge),e(nge,oor),e(ft,ror),g(Fw,ft,null),e(vr,tor),e(vr,po),g(Cw,po,null),e(po,aor),e(po,sge),e(sge,nor),e(po,sor),e(po,gn),e(gn,lor),e(gn,lge),e(lge,ior),e(gn,dor),e(gn,ige),e(ige,cor),e(gn,mor),e(gn,dge),e(dge,gor),e(gn,hor),e(po,uor),e(po,Mw),e(Mw,dT),e(dT,cge),e(cge,por),e(dT,_or),e(dT,Dq),e(Dq,vor),e(dT,bor),e(Mw,Tor),e(Mw,cT),e(cT,fge),e(fge,For),e(cT,Cor),e(cT,jq),e(jq,Mor),e(cT,Eor),e(po,yor),e(po,mge),e(mge,wor),e(po,Aor),g(Ew,po,null),v(c,IBe,_),v(c,gc,_),e(gc,fT),e(fT,gge),g(yw,gge,null),e(gc,Lor),e(gc,hge),e(hge,Bor),v(c,DBe,_),v(c,br,_),g(ww,br,null),e(br,xor),e(br,hc),e(hc,kor),e(hc,uge),e(uge,Ror),e(hc,Sor),e(hc,pge),e(pge,Por),e(hc,$or),e(br,Ior),e(br,Aw),e(Aw,Dor),e(Aw,_ge),e(_ge,jor),e(Aw,Nor),e(br,qor),e(br,mt),g(Lw,mt,null),e(mt,Gor),e(mt,vge),e(vge,Oor),e(mt,Xor),e(mt,uc),e(uc,Vor),e(uc,bge),e(bge,zor),e(uc,Wor),e(uc,Tge),e(Tge,Qor),e(uc,Hor),e(mt,Uor),e(mt,Fge),e(Fge,Jor),e(mt,Yor),g(Bw,mt,null),e(br,Kor),e(br,_o),g(xw,_o,null),e(_o,Zor),e(_o,Cge),e(Cge,err),e(_o,orr),e(_o,hn),e(hn,rrr),e(hn,Mge),e(Mge,trr),e(hn,arr),e(hn,Ege),e(Ege,nrr),e(hn,srr),e(hn,yge),e(yge,lrr),e(hn,irr),e(_o,drr),e(_o,Y),e(Y,mT),e(mT,wge),e(wge,crr),e(mT,frr),e(mT,Nq),e(Nq,mrr),e(mT,grr),e(Y,hrr),e(Y,gT),e(gT,Age),e(Age,urr),e(gT,prr),e(gT,qq),e(qq,_rr),e(gT,vrr),e(Y,brr),e(Y,hT),e(hT,Lge),e(Lge,Trr),e(hT,Frr),e(hT,Gq),e(Gq,Crr),e(hT,Mrr),e(Y,Err),e(Y,uT),e(uT,Bge),e(Bge,yrr),e(uT,wrr),e(uT,Oq),e(Oq,Arr),e(uT,Lrr),e(Y,Brr),e(Y,pT),e(pT,xge),e(xge,xrr),e(pT,krr),e(pT,Xq),e(Xq,Rrr),e(pT,Srr),e(Y,Prr),e(Y,_T),e(_T,kge),e(kge,$rr),e(_T,Irr),e(_T,Vq),e(Vq,Drr),e(_T,jrr),e(Y,Nrr),e(Y,vT),e(vT,Rge),e(Rge,qrr),e(vT,Grr),e(vT,zq),e(zq,Orr),e(vT,Xrr),e(Y,Vrr),e(Y,bT),e(bT,Sge),e(Sge,zrr),e(bT,Wrr),e(bT,Wq),e(Wq,Qrr),e(bT,Hrr),e(Y,Urr),e(Y,TT),e(TT,Pge),e(Pge,Jrr),e(TT,Yrr),e(TT,Qq),e(Qq,Krr),e(TT,Zrr),e(Y,etr),e(Y,FT),e(FT,$ge),e($ge,otr),e(FT,rtr),e(FT,Hq),e(Hq,ttr),e(FT,atr),e(Y,ntr),e(Y,CT),e(CT,Ige),e(Ige,str),e(CT,ltr),e(CT,Uq),e(Uq,itr),e(CT,dtr),e(Y,ctr),e(Y,MT),e(MT,Dge),e(Dge,ftr),e(MT,mtr),e(MT,Jq),e(Jq,gtr),e(MT,htr),e(Y,utr),e(Y,ET),e(ET,jge),e(jge,ptr),e(ET,_tr),e(ET,Yq),e(Yq,vtr),e(ET,btr),e(Y,Ttr),e(Y,yT),e(yT,Nge),e(Nge,Ftr),e(yT,Ctr),e(yT,Kq),e(Kq,Mtr),e(yT,Etr),e(Y,ytr),e(Y,wT),e(wT,qge),e(qge,wtr),e(wT,Atr),e(wT,Zq),e(Zq,Ltr),e(wT,Btr),e(Y,xtr),e(Y,AT),e(AT,Gge),e(Gge,ktr),e(AT,Rtr),e(AT,eG),e(eG,Str),e(AT,Ptr),e(Y,$tr),e(Y,LT),e(LT,Oge),e(Oge,Itr),e(LT,Dtr),e(LT,oG),e(oG,jtr),e(LT,Ntr),e(Y,qtr),e(Y,BT),e(BT,Xge),e(Xge,Gtr),e(BT,Otr),e(BT,rG),e(rG,Xtr),e(BT,Vtr),e(Y,ztr),e(Y,xT),e(xT,Vge),e(Vge,Wtr),e(xT,Qtr),e(xT,tG),e(tG,Htr),e(xT,Utr),e(Y,Jtr),e(Y,kT),e(kT,zge),e(zge,Ytr),e(kT,Ktr),e(kT,aG),e(aG,Ztr),e(kT,ear),e(_o,oar),e(_o,Wge),e(Wge,rar),e(_o,tar),g(kw,_o,null),v(c,jBe,_),v(c,pc,_),e(pc,RT),e(RT,Qge),g(Rw,Qge,null),e(pc,aar),e(pc,Hge),e(Hge,nar),v(c,NBe,_),v(c,Tr,_),g(Sw,Tr,null),e(Tr,sar),e(Tr,_c),e(_c,lar),e(_c,Uge),e(Uge,iar),e(_c,dar),e(_c,Jge),e(Jge,car),e(_c,far),e(Tr,mar),e(Tr,Pw),e(Pw,gar),e(Pw,Yge),e(Yge,har),e(Pw,uar),e(Tr,par),e(Tr,gt),g($w,gt,null),e(gt,_ar),e(gt,Kge),e(Kge,bar),e(gt,Tar),e(gt,vc),e(vc,Far),e(vc,Zge),e(Zge,Car),e(vc,Mar),e(vc,ehe),e(ehe,Ear),e(vc,yar),e(gt,war),e(gt,ohe),e(ohe,Aar),e(gt,Lar),g(Iw,gt,null),e(Tr,Bar),e(Tr,vo),g(Dw,vo,null),e(vo,xar),e(vo,rhe),e(rhe,kar),e(vo,Rar),e(vo,un),e(un,Sar),e(un,the),e(the,Par),e(un,$ar),e(un,ahe),e(ahe,Iar),e(un,Dar),e(un,nhe),e(nhe,jar),e(un,Nar),e(vo,qar),e(vo,ue),e(ue,ST),e(ST,she),e(she,Gar),e(ST,Oar),e(ST,nG),e(nG,Xar),e(ST,Var),e(ue,zar),e(ue,PT),e(PT,lhe),e(lhe,War),e(PT,Qar),e(PT,sG),e(sG,Har),e(PT,Uar),e(ue,Jar),e(ue,$T),e($T,ihe),e(ihe,Yar),e($T,Kar),e($T,lG),e(lG,Zar),e($T,enr),e(ue,onr),e(ue,IT),e(IT,dhe),e(dhe,rnr),e(IT,tnr),e(IT,iG),e(iG,anr),e(IT,nnr),e(ue,snr),e(ue,DT),e(DT,che),e(che,lnr),e(DT,inr),e(DT,dG),e(dG,dnr),e(DT,cnr),e(ue,fnr),e(ue,jT),e(jT,fhe),e(fhe,mnr),e(jT,gnr),e(jT,cG),e(cG,hnr),e(jT,unr),e(ue,pnr),e(ue,NT),e(NT,mhe),e(mhe,_nr),e(NT,vnr),e(NT,fG),e(fG,bnr),e(NT,Tnr),e(ue,Fnr),e(ue,qT),e(qT,ghe),e(ghe,Cnr),e(qT,Mnr),e(qT,mG),e(mG,Enr),e(qT,ynr),e(ue,wnr),e(ue,GT),e(GT,hhe),e(hhe,Anr),e(GT,Lnr),e(GT,gG),e(gG,Bnr),e(GT,xnr),e(ue,knr),e(ue,OT),e(OT,uhe),e(uhe,Rnr),e(OT,Snr),e(OT,hG),e(hG,Pnr),e(OT,$nr),e(vo,Inr),e(vo,phe),e(phe,Dnr),e(vo,jnr),g(jw,vo,null),v(c,qBe,_),v(c,bc,_),e(bc,XT),e(XT,_he),g(Nw,_he,null),e(bc,Nnr),e(bc,vhe),e(vhe,qnr),v(c,GBe,_),v(c,Fr,_),g(qw,Fr,null),e(Fr,Gnr),e(Fr,Tc),e(Tc,Onr),e(Tc,bhe),e(bhe,Xnr),e(Tc,Vnr),e(Tc,The),e(The,znr),e(Tc,Wnr),e(Fr,Qnr),e(Fr,Gw),e(Gw,Hnr),e(Gw,Fhe),e(Fhe,Unr),e(Gw,Jnr),e(Fr,Ynr),e(Fr,ht),g(Ow,ht,null),e(ht,Knr),e(ht,Che),e(Che,Znr),e(ht,esr),e(ht,Fc),e(Fc,osr),e(Fc,Mhe),e(Mhe,rsr),e(Fc,tsr),e(Fc,Ehe),e(Ehe,asr),e(Fc,nsr),e(ht,ssr),e(ht,yhe),e(yhe,lsr),e(ht,isr),g(Xw,ht,null),e(Fr,dsr),e(Fr,bo),g(Vw,bo,null),e(bo,csr),e(bo,whe),e(whe,fsr),e(bo,msr),e(bo,pn),e(pn,gsr),e(pn,Ahe),e(Ahe,hsr),e(pn,usr),e(pn,Lhe),e(Lhe,psr),e(pn,_sr),e(pn,Bhe),e(Bhe,vsr),e(pn,bsr),e(bo,Tsr),e(bo,X),e(X,VT),e(VT,xhe),e(xhe,Fsr),e(VT,Csr),e(VT,uG),e(uG,Msr),e(VT,Esr),e(X,ysr),e(X,zT),e(zT,khe),e(khe,wsr),e(zT,Asr),e(zT,pG),e(pG,Lsr),e(zT,Bsr),e(X,xsr),e(X,WT),e(WT,Rhe),e(Rhe,ksr),e(WT,Rsr),e(WT,_G),e(_G,Ssr),e(WT,Psr),e(X,$sr),e(X,QT),e(QT,She),e(She,Isr),e(QT,Dsr),e(QT,vG),e(vG,jsr),e(QT,Nsr),e(X,qsr),e(X,HT),e(HT,Phe),e(Phe,Gsr),e(HT,Osr),e(HT,bG),e(bG,Xsr),e(HT,Vsr),e(X,zsr),e(X,UT),e(UT,$he),e($he,Wsr),e(UT,Qsr),e(UT,TG),e(TG,Hsr),e(UT,Usr),e(X,Jsr),e(X,JT),e(JT,Ihe),e(Ihe,Ysr),e(JT,Ksr),e(JT,FG),e(FG,Zsr),e(JT,elr),e(X,olr),e(X,YT),e(YT,Dhe),e(Dhe,rlr),e(YT,tlr),e(YT,CG),e(CG,alr),e(YT,nlr),e(X,slr),e(X,KT),e(KT,jhe),e(jhe,llr),e(KT,ilr),e(KT,MG),e(MG,dlr),e(KT,clr),e(X,flr),e(X,ZT),e(ZT,Nhe),e(Nhe,mlr),e(ZT,glr),e(ZT,EG),e(EG,hlr),e(ZT,ulr),e(X,plr),e(X,e7),e(e7,qhe),e(qhe,_lr),e(e7,vlr),e(e7,yG),e(yG,blr),e(e7,Tlr),e(X,Flr),e(X,o7),e(o7,Ghe),e(Ghe,Clr),e(o7,Mlr),e(o7,wG),e(wG,Elr),e(o7,ylr),e(X,wlr),e(X,r7),e(r7,Ohe),e(Ohe,Alr),e(r7,Llr),e(r7,AG),e(AG,Blr),e(r7,xlr),e(X,klr),e(X,t7),e(t7,Xhe),e(Xhe,Rlr),e(t7,Slr),e(t7,LG),e(LG,Plr),e(t7,$lr),e(X,Ilr),e(X,a7),e(a7,Vhe),e(Vhe,Dlr),e(a7,jlr),e(a7,BG),e(BG,Nlr),e(a7,qlr),e(X,Glr),e(X,n7),e(n7,zhe),e(zhe,Olr),e(n7,Xlr),e(n7,xG),e(xG,Vlr),e(n7,zlr),e(X,Wlr),e(X,s7),e(s7,Whe),e(Whe,Qlr),e(s7,Hlr),e(s7,kG),e(kG,Ulr),e(s7,Jlr),e(X,Ylr),e(X,l7),e(l7,Qhe),e(Qhe,Klr),e(l7,Zlr),e(l7,RG),e(RG,eir),e(l7,oir),e(X,rir),e(X,i7),e(i7,Hhe),e(Hhe,tir),e(i7,air),e(i7,SG),e(SG,nir),e(i7,sir),e(X,lir),e(X,d7),e(d7,Uhe),e(Uhe,iir),e(d7,dir),e(d7,PG),e(PG,cir),e(d7,fir),e(X,mir),e(X,c7),e(c7,Jhe),e(Jhe,gir),e(c7,hir),e(c7,$G),e($G,uir),e(c7,pir),e(X,_ir),e(X,f7),e(f7,Yhe),e(Yhe,vir),e(f7,bir),e(f7,IG),e(IG,Tir),e(f7,Fir),e(X,Cir),e(X,m7),e(m7,Khe),e(Khe,Mir),e(m7,Eir),e(m7,DG),e(DG,yir),e(m7,wir),e(X,Air),e(X,g7),e(g7,Zhe),e(Zhe,Lir),e(g7,Bir),e(g7,jG),e(jG,xir),e(g7,kir),e(X,Rir),e(X,h7),e(h7,eue),e(eue,Sir),e(h7,Pir),e(h7,NG),e(NG,$ir),e(h7,Iir),e(bo,Dir),e(bo,oue),e(oue,jir),e(bo,Nir),g(zw,bo,null),v(c,OBe,_),v(c,Cc,_),e(Cc,u7),e(u7,rue),g(Ww,rue,null),e(Cc,qir),e(Cc,tue),e(tue,Gir),v(c,XBe,_),v(c,Cr,_),g(Qw,Cr,null),e(Cr,Oir),e(Cr,Mc),e(Mc,Xir),e(Mc,aue),e(aue,Vir),e(Mc,zir),e(Mc,nue),e(nue,Wir),e(Mc,Qir),e(Cr,Hir),e(Cr,Hw),e(Hw,Uir),e(Hw,sue),e(sue,Jir),e(Hw,Yir),e(Cr,Kir),e(Cr,ut),g(Uw,ut,null),e(ut,Zir),e(ut,lue),e(lue,edr),e(ut,odr),e(ut,Ec),e(Ec,rdr),e(Ec,iue),e(iue,tdr),e(Ec,adr),e(Ec,due),e(due,ndr),e(Ec,sdr),e(ut,ldr),e(ut,cue),e(cue,idr),e(ut,ddr),g(Jw,ut,null),e(Cr,cdr),e(Cr,To),g(Yw,To,null),e(To,fdr),e(To,fue),e(fue,mdr),e(To,gdr),e(To,_n),e(_n,hdr),e(_n,mue),e(mue,udr),e(_n,pdr),e(_n,gue),e(gue,_dr),e(_n,vdr),e(_n,hue),e(hue,bdr),e(_n,Tdr),e(To,Fdr),e(To,te),e(te,p7),e(p7,uue),e(uue,Cdr),e(p7,Mdr),e(p7,qG),e(qG,Edr),e(p7,ydr),e(te,wdr),e(te,_7),e(_7,pue),e(pue,Adr),e(_7,Ldr),e(_7,GG),e(GG,Bdr),e(_7,xdr),e(te,kdr),e(te,v7),e(v7,_ue),e(_ue,Rdr),e(v7,Sdr),e(v7,OG),e(OG,Pdr),e(v7,$dr),e(te,Idr),e(te,b7),e(b7,vue),e(vue,Ddr),e(b7,jdr),e(b7,XG),e(XG,Ndr),e(b7,qdr),e(te,Gdr),e(te,T7),e(T7,bue),e(bue,Odr),e(T7,Xdr),e(T7,VG),e(VG,Vdr),e(T7,zdr),e(te,Wdr),e(te,F7),e(F7,Tue),e(Tue,Qdr),e(F7,Hdr),e(F7,zG),e(zG,Udr),e(F7,Jdr),e(te,Ydr),e(te,C7),e(C7,Fue),e(Fue,Kdr),e(C7,Zdr),e(C7,WG),e(WG,ecr),e(C7,ocr),e(te,rcr),e(te,M7),e(M7,Cue),e(Cue,tcr),e(M7,acr),e(M7,QG),e(QG,ncr),e(M7,scr),e(te,lcr),e(te,E7),e(E7,Mue),e(Mue,icr),e(E7,dcr),e(E7,HG),e(HG,ccr),e(E7,fcr),e(te,mcr),e(te,y7),e(y7,Eue),e(Eue,gcr),e(y7,hcr),e(y7,UG),e(UG,ucr),e(y7,pcr),e(te,_cr),e(te,w7),e(w7,yue),e(yue,vcr),e(w7,bcr),e(w7,JG),e(JG,Tcr),e(w7,Fcr),e(te,Ccr),e(te,A7),e(A7,wue),e(wue,Mcr),e(A7,Ecr),e(A7,YG),e(YG,ycr),e(A7,wcr),e(te,Acr),e(te,L7),e(L7,Aue),e(Aue,Lcr),e(L7,Bcr),e(L7,KG),e(KG,xcr),e(L7,kcr),e(te,Rcr),e(te,B7),e(B7,Lue),e(Lue,Scr),e(B7,Pcr),e(B7,ZG),e(ZG,$cr),e(B7,Icr),e(te,Dcr),e(te,x7),e(x7,Bue),e(Bue,jcr),e(x7,Ncr),e(x7,eO),e(eO,qcr),e(x7,Gcr),e(te,Ocr),e(te,k7),e(k7,xue),e(xue,Xcr),e(k7,Vcr),e(k7,oO),e(oO,zcr),e(k7,Wcr),e(te,Qcr),e(te,R7),e(R7,kue),e(kue,Hcr),e(R7,Ucr),e(R7,rO),e(rO,Jcr),e(R7,Ycr),e(To,Kcr),e(To,Rue),e(Rue,Zcr),e(To,efr),g(Kw,To,null),v(c,VBe,_),v(c,yc,_),e(yc,S7),e(S7,Sue),g(Zw,Sue,null),e(yc,ofr),e(yc,Pue),e(Pue,rfr),v(c,zBe,_),v(c,Mr,_),g(e6,Mr,null),e(Mr,tfr),e(Mr,wc),e(wc,afr),e(wc,$ue),e($ue,nfr),e(wc,sfr),e(wc,Iue),e(Iue,lfr),e(wc,ifr),e(Mr,dfr),e(Mr,o6),e(o6,cfr),e(o6,Due),e(Due,ffr),e(o6,mfr),e(Mr,gfr),e(Mr,pt),g(r6,pt,null),e(pt,hfr),e(pt,jue),e(jue,ufr),e(pt,pfr),e(pt,Ac),e(Ac,_fr),e(Ac,Nue),e(Nue,vfr),e(Ac,bfr),e(Ac,que),e(que,Tfr),e(Ac,Ffr),e(pt,Cfr),e(pt,Gue),e(Gue,Mfr),e(pt,Efr),g(t6,pt,null),e(Mr,yfr),e(Mr,Fo),g(a6,Fo,null),e(Fo,wfr),e(Fo,Oue),e(Oue,Afr),e(Fo,Lfr),e(Fo,vn),e(vn,Bfr),e(vn,Xue),e(Xue,xfr),e(vn,kfr),e(vn,Vue),e(Vue,Rfr),e(vn,Sfr),e(vn,zue),e(zue,Pfr),e(vn,$fr),e(Fo,Ifr),e(Fo,Wue),e(Wue,P7),e(P7,Que),e(Que,Dfr),e(P7,jfr),e(P7,tO),e(tO,Nfr),e(P7,qfr),e(Fo,Gfr),e(Fo,Hue),e(Hue,Ofr),e(Fo,Xfr),g(n6,Fo,null),v(c,WBe,_),v(c,Lc,_),e(Lc,$7),e($7,Uue),g(s6,Uue,null),e(Lc,Vfr),e(Lc,Jue),e(Jue,zfr),v(c,QBe,_),v(c,Er,_),g(l6,Er,null),e(Er,Wfr),e(Er,Bc),e(Bc,Qfr),e(Bc,Yue),e(Yue,Hfr),e(Bc,Ufr),e(Bc,Kue),e(Kue,Jfr),e(Bc,Yfr),e(Er,Kfr),e(Er,i6),e(i6,Zfr),e(i6,Zue),e(Zue,emr),e(i6,omr),e(Er,rmr),e(Er,_t),g(d6,_t,null),e(_t,tmr),e(_t,epe),e(epe,amr),e(_t,nmr),e(_t,xc),e(xc,smr),e(xc,ope),e(ope,lmr),e(xc,imr),e(xc,rpe),e(rpe,dmr),e(xc,cmr),e(_t,fmr),e(_t,tpe),e(tpe,mmr),e(_t,gmr),g(c6,_t,null),e(Er,hmr),e(Er,Co),g(f6,Co,null),e(Co,umr),e(Co,ape),e(ape,pmr),e(Co,_mr),e(Co,bn),e(bn,vmr),e(bn,npe),e(npe,bmr),e(bn,Tmr),e(bn,spe),e(spe,Fmr),e(bn,Cmr),e(bn,lpe),e(lpe,Mmr),e(bn,Emr),e(Co,ymr),e(Co,K),e(K,I7),e(I7,ipe),e(ipe,wmr),e(I7,Amr),e(I7,aO),e(aO,Lmr),e(I7,Bmr),e(K,xmr),e(K,D7),e(D7,dpe),e(dpe,kmr),e(D7,Rmr),e(D7,nO),e(nO,Smr),e(D7,Pmr),e(K,$mr),e(K,j7),e(j7,cpe),e(cpe,Imr),e(j7,Dmr),e(j7,sO),e(sO,jmr),e(j7,Nmr),e(K,qmr),e(K,N7),e(N7,fpe),e(fpe,Gmr),e(N7,Omr),e(N7,lO),e(lO,Xmr),e(N7,Vmr),e(K,zmr),e(K,q7),e(q7,mpe),e(mpe,Wmr),e(q7,Qmr),e(q7,iO),e(iO,Hmr),e(q7,Umr),e(K,Jmr),e(K,G7),e(G7,gpe),e(gpe,Ymr),e(G7,Kmr),e(G7,dO),e(dO,Zmr),e(G7,egr),e(K,ogr),e(K,O7),e(O7,hpe),e(hpe,rgr),e(O7,tgr),e(O7,cO),e(cO,agr),e(O7,ngr),e(K,sgr),e(K,X7),e(X7,upe),e(upe,lgr),e(X7,igr),e(X7,fO),e(fO,dgr),e(X7,cgr),e(K,fgr),e(K,V7),e(V7,ppe),e(ppe,mgr),e(V7,ggr),e(V7,mO),e(mO,hgr),e(V7,ugr),e(K,pgr),e(K,z7),e(z7,_pe),e(_pe,_gr),e(z7,vgr),e(z7,gO),e(gO,bgr),e(z7,Tgr),e(K,Fgr),e(K,W7),e(W7,vpe),e(vpe,Cgr),e(W7,Mgr),e(W7,hO),e(hO,Egr),e(W7,ygr),e(K,wgr),e(K,Q7),e(Q7,bpe),e(bpe,Agr),e(Q7,Lgr),e(Q7,uO),e(uO,Bgr),e(Q7,xgr),e(K,kgr),e(K,H7),e(H7,Tpe),e(Tpe,Rgr),e(H7,Sgr),e(H7,pO),e(pO,Pgr),e(H7,$gr),e(K,Igr),e(K,U7),e(U7,Fpe),e(Fpe,Dgr),e(U7,jgr),e(U7,_O),e(_O,Ngr),e(U7,qgr),e(K,Ggr),e(K,J7),e(J7,Cpe),e(Cpe,Ogr),e(J7,Xgr),e(J7,vO),e(vO,Vgr),e(J7,zgr),e(K,Wgr),e(K,Y7),e(Y7,Mpe),e(Mpe,Qgr),e(Y7,Hgr),e(Y7,bO),e(bO,Ugr),e(Y7,Jgr),e(K,Ygr),e(K,K7),e(K7,Epe),e(Epe,Kgr),e(K7,Zgr),e(K7,TO),e(TO,ehr),e(K7,ohr),e(K,rhr),e(K,Z7),e(Z7,ype),e(ype,thr),e(Z7,ahr),e(Z7,FO),e(FO,nhr),e(Z7,shr),e(K,lhr),e(K,eF),e(eF,wpe),e(wpe,ihr),e(eF,dhr),e(eF,CO),e(CO,chr),e(eF,fhr),e(K,mhr),e(K,oF),e(oF,Ape),e(Ape,ghr),e(oF,hhr),e(oF,MO),e(MO,uhr),e(oF,phr),e(Co,_hr),e(Co,Lpe),e(Lpe,vhr),e(Co,bhr),g(m6,Co,null),v(c,HBe,_),v(c,kc,_),e(kc,rF),e(rF,Bpe),g(g6,Bpe,null),e(kc,Thr),e(kc,xpe),e(xpe,Fhr),v(c,UBe,_),v(c,yr,_),g(h6,yr,null),e(yr,Chr),e(yr,Rc),e(Rc,Mhr),e(Rc,kpe),e(kpe,Ehr),e(Rc,yhr),e(Rc,Rpe),e(Rpe,whr),e(Rc,Ahr),e(yr,Lhr),e(yr,u6),e(u6,Bhr),e(u6,Spe),e(Spe,xhr),e(u6,khr),e(yr,Rhr),e(yr,vt),g(p6,vt,null),e(vt,Shr),e(vt,Ppe),e(Ppe,Phr),e(vt,$hr),e(vt,Sc),e(Sc,Ihr),e(Sc,$pe),e($pe,Dhr),e(Sc,jhr),e(Sc,Ipe),e(Ipe,Nhr),e(Sc,qhr),e(vt,Ghr),e(vt,Dpe),e(Dpe,Ohr),e(vt,Xhr),g(_6,vt,null),e(yr,Vhr),e(yr,Mo),g(v6,Mo,null),e(Mo,zhr),e(Mo,jpe),e(jpe,Whr),e(Mo,Qhr),e(Mo,Tn),e(Tn,Hhr),e(Tn,Npe),e(Npe,Uhr),e(Tn,Jhr),e(Tn,qpe),e(qpe,Yhr),e(Tn,Khr),e(Tn,Gpe),e(Gpe,Zhr),e(Tn,eur),e(Mo,our),e(Mo,Z),e(Z,tF),e(tF,Ope),e(Ope,rur),e(tF,tur),e(tF,EO),e(EO,aur),e(tF,nur),e(Z,sur),e(Z,aF),e(aF,Xpe),e(Xpe,lur),e(aF,iur),e(aF,yO),e(yO,dur),e(aF,cur),e(Z,fur),e(Z,nF),e(nF,Vpe),e(Vpe,mur),e(nF,gur),e(nF,wO),e(wO,hur),e(nF,uur),e(Z,pur),e(Z,sF),e(sF,zpe),e(zpe,_ur),e(sF,vur),e(sF,AO),e(AO,bur),e(sF,Tur),e(Z,Fur),e(Z,lF),e(lF,Wpe),e(Wpe,Cur),e(lF,Mur),e(lF,LO),e(LO,Eur),e(lF,yur),e(Z,wur),e(Z,iF),e(iF,Qpe),e(Qpe,Aur),e(iF,Lur),e(iF,BO),e(BO,Bur),e(iF,xur),e(Z,kur),e(Z,dF),e(dF,Hpe),e(Hpe,Rur),e(dF,Sur),e(dF,xO),e(xO,Pur),e(dF,$ur),e(Z,Iur),e(Z,cF),e(cF,Upe),e(Upe,Dur),e(cF,jur),e(cF,kO),e(kO,Nur),e(cF,qur),e(Z,Gur),e(Z,fF),e(fF,Jpe),e(Jpe,Our),e(fF,Xur),e(fF,RO),e(RO,Vur),e(fF,zur),e(Z,Wur),e(Z,mF),e(mF,Ype),e(Ype,Qur),e(mF,Hur),e(mF,SO),e(SO,Uur),e(mF,Jur),e(Z,Yur),e(Z,gF),e(gF,Kpe),e(Kpe,Kur),e(gF,Zur),e(gF,PO),e(PO,epr),e(gF,opr),e(Z,rpr),e(Z,hF),e(hF,Zpe),e(Zpe,tpr),e(hF,apr),e(hF,$O),e($O,npr),e(hF,spr),e(Z,lpr),e(Z,uF),e(uF,e_e),e(e_e,ipr),e(uF,dpr),e(uF,IO),e(IO,cpr),e(uF,fpr),e(Z,mpr),e(Z,pF),e(pF,o_e),e(o_e,gpr),e(pF,hpr),e(pF,DO),e(DO,upr),e(pF,ppr),e(Z,_pr),e(Z,_F),e(_F,r_e),e(r_e,vpr),e(_F,bpr),e(_F,jO),e(jO,Tpr),e(_F,Fpr),e(Z,Cpr),e(Z,vF),e(vF,t_e),e(t_e,Mpr),e(vF,Epr),e(vF,NO),e(NO,ypr),e(vF,wpr),e(Z,Apr),e(Z,bF),e(bF,a_e),e(a_e,Lpr),e(bF,Bpr),e(bF,qO),e(qO,xpr),e(bF,kpr),e(Z,Rpr),e(Z,TF),e(TF,n_e),e(n_e,Spr),e(TF,Ppr),e(TF,GO),e(GO,$pr),e(TF,Ipr),e(Z,Dpr),e(Z,FF),e(FF,s_e),e(s_e,jpr),e(FF,Npr),e(FF,OO),e(OO,qpr),e(FF,Gpr),e(Mo,Opr),e(Mo,l_e),e(l_e,Xpr),e(Mo,Vpr),g(b6,Mo,null),v(c,JBe,_),v(c,Pc,_),e(Pc,CF),e(CF,i_e),g(T6,i_e,null),e(Pc,zpr),e(Pc,d_e),e(d_e,Wpr),v(c,YBe,_),v(c,wr,_),g(F6,wr,null),e(wr,Qpr),e(wr,$c),e($c,Hpr),e($c,c_e),e(c_e,Upr),e($c,Jpr),e($c,f_e),e(f_e,Ypr),e($c,Kpr),e(wr,Zpr),e(wr,C6),e(C6,e_r),e(C6,m_e),e(m_e,o_r),e(C6,r_r),e(wr,t_r),e(wr,bt),g(M6,bt,null),e(bt,a_r),e(bt,g_e),e(g_e,n_r),e(bt,s_r),e(bt,Ic),e(Ic,l_r),e(Ic,h_e),e(h_e,i_r),e(Ic,d_r),e(Ic,u_e),e(u_e,c_r),e(Ic,f_r),e(bt,m_r),e(bt,p_e),e(p_e,g_r),e(bt,h_r),g(E6,bt,null),e(wr,u_r),e(wr,Eo),g(y6,Eo,null),e(Eo,p_r),e(Eo,__e),e(__e,__r),e(Eo,v_r),e(Eo,Fn),e(Fn,b_r),e(Fn,v_e),e(v_e,T_r),e(Fn,F_r),e(Fn,b_e),e(b_e,C_r),e(Fn,M_r),e(Fn,T_e),e(T_e,E_r),e(Fn,y_r),e(Eo,w_r),e(Eo,F_e),e(F_e,MF),e(MF,C_e),e(C_e,A_r),e(MF,L_r),e(MF,XO),e(XO,B_r),e(MF,x_r),e(Eo,k_r),e(Eo,M_e),e(M_e,R_r),e(Eo,S_r),g(w6,Eo,null),v(c,KBe,_),v(c,Dc,_),e(Dc,EF),e(EF,E_e),g(A6,E_e,null),e(Dc,P_r),e(Dc,y_e),e(y_e,$_r),v(c,ZBe,_),v(c,Ar,_),g(L6,Ar,null),e(Ar,I_r),e(Ar,jc),e(jc,D_r),e(jc,w_e),e(w_e,j_r),e(jc,N_r),e(jc,A_e),e(A_e,q_r),e(jc,G_r),e(Ar,O_r),e(Ar,B6),e(B6,X_r),e(B6,L_e),e(L_e,V_r),e(B6,z_r),e(Ar,W_r),e(Ar,Tt),g(x6,Tt,null),e(Tt,Q_r),e(Tt,B_e),e(B_e,H_r),e(Tt,U_r),e(Tt,Nc),e(Nc,J_r),e(Nc,x_e),e(x_e,Y_r),e(Nc,K_r),e(Nc,k_e),e(k_e,Z_r),e(Nc,evr),e(Tt,ovr),e(Tt,R_e),e(R_e,rvr),e(Tt,tvr),g(k6,Tt,null),e(Ar,avr),e(Ar,yo),g(R6,yo,null),e(yo,nvr),e(yo,S_e),e(S_e,svr),e(yo,lvr),e(yo,Cn),e(Cn,ivr),e(Cn,P_e),e(P_e,dvr),e(Cn,cvr),e(Cn,$_e),e($_e,fvr),e(Cn,mvr),e(Cn,I_e),e(I_e,gvr),e(Cn,hvr),e(yo,uvr),e(yo,D_e),e(D_e,yF),e(yF,j_e),e(j_e,pvr),e(yF,_vr),e(yF,VO),e(VO,vvr),e(yF,bvr),e(yo,Tvr),e(yo,N_e),e(N_e,Fvr),e(yo,Cvr),g(S6,yo,null),v(c,exe,_),v(c,qc,_),e(qc,wF),e(wF,q_e),g(P6,q_e,null),e(qc,Mvr),e(qc,G_e),e(G_e,Evr),v(c,oxe,_),v(c,Lr,_),g($6,Lr,null),e(Lr,yvr),e(Lr,Gc),e(Gc,wvr),e(Gc,O_e),e(O_e,Avr),e(Gc,Lvr),e(Gc,X_e),e(X_e,Bvr),e(Gc,xvr),e(Lr,kvr),e(Lr,I6),e(I6,Rvr),e(I6,V_e),e(V_e,Svr),e(I6,Pvr),e(Lr,$vr),e(Lr,Ft),g(D6,Ft,null),e(Ft,Ivr),e(Ft,z_e),e(z_e,Dvr),e(Ft,jvr),e(Ft,Oc),e(Oc,Nvr),e(Oc,W_e),e(W_e,qvr),e(Oc,Gvr),e(Oc,Q_e),e(Q_e,Ovr),e(Oc,Xvr),e(Ft,Vvr),e(Ft,H_e),e(H_e,zvr),e(Ft,Wvr),g(j6,Ft,null),e(Lr,Qvr),e(Lr,wo),g(N6,wo,null),e(wo,Hvr),e(wo,U_e),e(U_e,Uvr),e(wo,Jvr),e(wo,Mn),e(Mn,Yvr),e(Mn,J_e),e(J_e,Kvr),e(Mn,Zvr),e(Mn,Y_e),e(Y_e,e1r),e(Mn,o1r),e(Mn,K_e),e(K_e,r1r),e(Mn,t1r),e(wo,a1r),e(wo,z),e(z,AF),e(AF,Z_e),e(Z_e,n1r),e(AF,s1r),e(AF,zO),e(zO,l1r),e(AF,i1r),e(z,d1r),e(z,LF),e(LF,eve),e(eve,c1r),e(LF,f1r),e(LF,WO),e(WO,m1r),e(LF,g1r),e(z,h1r),e(z,BF),e(BF,ove),e(ove,u1r),e(BF,p1r),e(BF,QO),e(QO,_1r),e(BF,v1r),e(z,b1r),e(z,xF),e(xF,rve),e(rve,T1r),e(xF,F1r),e(xF,HO),e(HO,C1r),e(xF,M1r),e(z,E1r),e(z,kF),e(kF,tve),e(tve,y1r),e(kF,w1r),e(kF,UO),e(UO,A1r),e(kF,L1r),e(z,B1r),e(z,RF),e(RF,ave),e(ave,x1r),e(RF,k1r),e(RF,JO),e(JO,R1r),e(RF,S1r),e(z,P1r),e(z,SF),e(SF,nve),e(nve,$1r),e(SF,I1r),e(SF,YO),e(YO,D1r),e(SF,j1r),e(z,N1r),e(z,PF),e(PF,sve),e(sve,q1r),e(PF,G1r),e(PF,KO),e(KO,O1r),e(PF,X1r),e(z,V1r),e(z,$F),e($F,lve),e(lve,z1r),e($F,W1r),e($F,ZO),e(ZO,Q1r),e($F,H1r),e(z,U1r),e(z,IF),e(IF,ive),e(ive,J1r),e(IF,Y1r),e(IF,eX),e(eX,K1r),e(IF,Z1r),e(z,e4r),e(z,DF),e(DF,dve),e(dve,o4r),e(DF,r4r),e(DF,oX),e(oX,t4r),e(DF,a4r),e(z,n4r),e(z,jF),e(jF,cve),e(cve,s4r),e(jF,l4r),e(jF,rX),e(rX,i4r),e(jF,d4r),e(z,c4r),e(z,NF),e(NF,fve),e(fve,f4r),e(NF,m4r),e(NF,tX),e(tX,g4r),e(NF,h4r),e(z,u4r),e(z,qF),e(qF,mve),e(mve,p4r),e(qF,_4r),e(qF,aX),e(aX,v4r),e(qF,b4r),e(z,T4r),e(z,GF),e(GF,gve),e(gve,F4r),e(GF,C4r),e(GF,nX),e(nX,M4r),e(GF,E4r),e(z,y4r),e(z,OF),e(OF,hve),e(hve,w4r),e(OF,A4r),e(OF,sX),e(sX,L4r),e(OF,B4r),e(z,x4r),e(z,XF),e(XF,uve),e(uve,k4r),e(XF,R4r),e(XF,lX),e(lX,S4r),e(XF,P4r),e(z,$4r),e(z,VF),e(VF,pve),e(pve,I4r),e(VF,D4r),e(VF,iX),e(iX,j4r),e(VF,N4r),e(z,q4r),e(z,zF),e(zF,_ve),e(_ve,G4r),e(zF,O4r),e(zF,dX),e(dX,X4r),e(zF,V4r),e(z,z4r),e(z,WF),e(WF,vve),e(vve,W4r),e(WF,Q4r),e(WF,cX),e(cX,H4r),e(WF,U4r),e(z,J4r),e(z,QF),e(QF,bve),e(bve,Y4r),e(QF,K4r),e(QF,fX),e(fX,Z4r),e(QF,ebr),e(z,obr),e(z,HF),e(HF,Tve),e(Tve,rbr),e(HF,tbr),e(HF,mX),e(mX,abr),e(HF,nbr),e(z,sbr),e(z,UF),e(UF,Fve),e(Fve,lbr),e(UF,ibr),e(UF,gX),e(gX,dbr),e(UF,cbr),e(z,fbr),e(z,JF),e(JF,Cve),e(Cve,mbr),e(JF,gbr),e(JF,hX),e(hX,hbr),e(JF,ubr),e(wo,pbr),e(wo,Mve),e(Mve,_br),e(wo,vbr),g(q6,wo,null),v(c,rxe,_),v(c,Xc,_),e(Xc,YF),e(YF,Eve),g(G6,Eve,null),e(Xc,bbr),e(Xc,yve),e(yve,Tbr),v(c,txe,_),v(c,Br,_),g(O6,Br,null),e(Br,Fbr),e(Br,Vc),e(Vc,Cbr),e(Vc,wve),e(wve,Mbr),e(Vc,Ebr),e(Vc,Ave),e(Ave,ybr),e(Vc,wbr),e(Br,Abr),e(Br,X6),e(X6,Lbr),e(X6,Lve),e(Lve,Bbr),e(X6,xbr),e(Br,kbr),e(Br,Ct),g(V6,Ct,null),e(Ct,Rbr),e(Ct,Bve),e(Bve,Sbr),e(Ct,Pbr),e(Ct,zc),e(zc,$br),e(zc,xve),e(xve,Ibr),e(zc,Dbr),e(zc,kve),e(kve,jbr),e(zc,Nbr),e(Ct,qbr),e(Ct,Rve),e(Rve,Gbr),e(Ct,Obr),g(z6,Ct,null),e(Br,Xbr),e(Br,Ao),g(W6,Ao,null),e(Ao,Vbr),e(Ao,Sve),e(Sve,zbr),e(Ao,Wbr),e(Ao,En),e(En,Qbr),e(En,Pve),e(Pve,Hbr),e(En,Ubr),e(En,$ve),e($ve,Jbr),e(En,Ybr),e(En,Ive),e(Ive,Kbr),e(En,Zbr),e(Ao,e2r),e(Ao,yn),e(yn,KF),e(KF,Dve),e(Dve,o2r),e(KF,r2r),e(KF,uX),e(uX,t2r),e(KF,a2r),e(yn,n2r),e(yn,ZF),e(ZF,jve),e(jve,s2r),e(ZF,l2r),e(ZF,pX),e(pX,i2r),e(ZF,d2r),e(yn,c2r),e(yn,eC),e(eC,Nve),e(Nve,f2r),e(eC,m2r),e(eC,_X),e(_X,g2r),e(eC,h2r),e(yn,u2r),e(yn,oC),e(oC,qve),e(qve,p2r),e(oC,_2r),e(oC,vX),e(vX,v2r),e(oC,b2r),e(Ao,T2r),e(Ao,Gve),e(Gve,F2r),e(Ao,C2r),g(Q6,Ao,null),v(c,axe,_),v(c,Wc,_),e(Wc,rC),e(rC,Ove),g(H6,Ove,null),e(Wc,M2r),e(Wc,Xve),e(Xve,E2r),v(c,nxe,_),v(c,xr,_),g(U6,xr,null),e(xr,y2r),e(xr,Qc),e(Qc,w2r),e(Qc,Vve),e(Vve,A2r),e(Qc,L2r),e(Qc,zve),e(zve,B2r),e(Qc,x2r),e(xr,k2r),e(xr,J6),e(J6,R2r),e(J6,Wve),e(Wve,S2r),e(J6,P2r),e(xr,$2r),e(xr,Mt),g(Y6,Mt,null),e(Mt,I2r),e(Mt,Qve),e(Qve,D2r),e(Mt,j2r),e(Mt,Hc),e(Hc,N2r),e(Hc,Hve),e(Hve,q2r),e(Hc,G2r),e(Hc,Uve),e(Uve,O2r),e(Hc,X2r),e(Mt,V2r),e(Mt,Jve),e(Jve,z2r),e(Mt,W2r),g(K6,Mt,null),e(xr,Q2r),e(xr,Lo),g(Z6,Lo,null),e(Lo,H2r),e(Lo,Yve),e(Yve,U2r),e(Lo,J2r),e(Lo,wn),e(wn,Y2r),e(wn,Kve),e(Kve,K2r),e(wn,Z2r),e(wn,Zve),e(Zve,e0r),e(wn,o0r),e(wn,e1e),e(e1e,r0r),e(wn,t0r),e(Lo,a0r),e(Lo,fe),e(fe,tC),e(tC,o1e),e(o1e,n0r),e(tC,s0r),e(tC,bX),e(bX,l0r),e(tC,i0r),e(fe,d0r),e(fe,aC),e(aC,r1e),e(r1e,c0r),e(aC,f0r),e(aC,TX),e(TX,m0r),e(aC,g0r),e(fe,h0r),e(fe,nC),e(nC,t1e),e(t1e,u0r),e(nC,p0r),e(nC,FX),e(FX,_0r),e(nC,v0r),e(fe,b0r),e(fe,sC),e(sC,a1e),e(a1e,T0r),e(sC,F0r),e(sC,CX),e(CX,C0r),e(sC,M0r),e(fe,E0r),e(fe,lC),e(lC,n1e),e(n1e,y0r),e(lC,w0r),e(lC,MX),e(MX,A0r),e(lC,L0r),e(fe,B0r),e(fe,iC),e(iC,s1e),e(s1e,x0r),e(iC,k0r),e(iC,EX),e(EX,R0r),e(iC,S0r),e(fe,P0r),e(fe,dC),e(dC,l1e),e(l1e,$0r),e(dC,I0r),e(dC,yX),e(yX,D0r),e(dC,j0r),e(fe,N0r),e(fe,cC),e(cC,i1e),e(i1e,q0r),e(cC,G0r),e(cC,wX),e(wX,O0r),e(cC,X0r),e(fe,V0r),e(fe,fC),e(fC,d1e),e(d1e,z0r),e(fC,W0r),e(fC,AX),e(AX,Q0r),e(fC,H0r),e(fe,U0r),e(fe,mC),e(mC,c1e),e(c1e,J0r),e(mC,Y0r),e(mC,LX),e(LX,K0r),e(mC,Z0r),e(fe,eTr),e(fe,gC),e(gC,f1e),e(f1e,oTr),e(gC,rTr),e(gC,BX),e(BX,tTr),e(gC,aTr),e(Lo,nTr),e(Lo,m1e),e(m1e,sTr),e(Lo,lTr),g(eA,Lo,null),v(c,sxe,_),v(c,Uc,_),e(Uc,hC),e(hC,g1e),g(oA,g1e,null),e(Uc,iTr),e(Uc,h1e),e(h1e,dTr),v(c,lxe,_),v(c,kr,_),g(rA,kr,null),e(kr,cTr),e(kr,Jc),e(Jc,fTr),e(Jc,u1e),e(u1e,mTr),e(Jc,gTr),e(Jc,p1e),e(p1e,hTr),e(Jc,uTr),e(kr,pTr),e(kr,tA),e(tA,_Tr),e(tA,_1e),e(_1e,vTr),e(tA,bTr),e(kr,TTr),e(kr,Et),g(aA,Et,null),e(Et,FTr),e(Et,v1e),e(v1e,CTr),e(Et,MTr),e(Et,Yc),e(Yc,ETr),e(Yc,b1e),e(b1e,yTr),e(Yc,wTr),e(Yc,T1e),e(T1e,ATr),e(Yc,LTr),e(Et,BTr),e(Et,F1e),e(F1e,xTr),e(Et,kTr),g(nA,Et,null),e(kr,RTr),e(kr,Bo),g(sA,Bo,null),e(Bo,STr),e(Bo,C1e),e(C1e,PTr),e(Bo,$Tr),e(Bo,An),e(An,ITr),e(An,M1e),e(M1e,DTr),e(An,jTr),e(An,E1e),e(E1e,NTr),e(An,qTr),e(An,y1e),e(y1e,GTr),e(An,OTr),e(Bo,XTr),e(Bo,be),e(be,uC),e(uC,w1e),e(w1e,VTr),e(uC,zTr),e(uC,xX),e(xX,WTr),e(uC,QTr),e(be,HTr),e(be,pC),e(pC,A1e),e(A1e,UTr),e(pC,JTr),e(pC,kX),e(kX,YTr),e(pC,KTr),e(be,ZTr),e(be,_C),e(_C,L1e),e(L1e,e7r),e(_C,o7r),e(_C,RX),e(RX,r7r),e(_C,t7r),e(be,a7r),e(be,vC),e(vC,B1e),e(B1e,n7r),e(vC,s7r),e(vC,SX),e(SX,l7r),e(vC,i7r),e(be,d7r),e(be,bC),e(bC,x1e),e(x1e,c7r),e(bC,f7r),e(bC,PX),e(PX,m7r),e(bC,g7r),e(be,h7r),e(be,TC),e(TC,k1e),e(k1e,u7r),e(TC,p7r),e(TC,$X),e($X,_7r),e(TC,v7r),e(be,b7r),e(be,FC),e(FC,R1e),e(R1e,T7r),e(FC,F7r),e(FC,IX),e(IX,C7r),e(FC,M7r),e(be,E7r),e(be,CC),e(CC,S1e),e(S1e,y7r),e(CC,w7r),e(CC,DX),e(DX,A7r),e(CC,L7r),e(be,B7r),e(be,MC),e(MC,P1e),e(P1e,x7r),e(MC,k7r),e(MC,jX),e(jX,R7r),e(MC,S7r),e(Bo,P7r),e(Bo,$1e),e($1e,$7r),e(Bo,I7r),g(lA,Bo,null),v(c,ixe,_),v(c,Kc,_),e(Kc,EC),e(EC,I1e),g(iA,I1e,null),e(Kc,D7r),e(Kc,D1e),e(D1e,j7r),v(c,dxe,_),v(c,Rr,_),g(dA,Rr,null),e(Rr,N7r),e(Rr,Zc),e(Zc,q7r),e(Zc,j1e),e(j1e,G7r),e(Zc,O7r),e(Zc,N1e),e(N1e,X7r),e(Zc,V7r),e(Rr,z7r),e(Rr,cA),e(cA,W7r),e(cA,q1e),e(q1e,Q7r),e(cA,H7r),e(Rr,U7r),e(Rr,yt),g(fA,yt,null),e(yt,J7r),e(yt,G1e),e(G1e,Y7r),e(yt,K7r),e(yt,ef),e(ef,Z7r),e(ef,O1e),e(O1e,eFr),e(ef,oFr),e(ef,X1e),e(X1e,rFr),e(ef,tFr),e(yt,aFr),e(yt,V1e),e(V1e,nFr),e(yt,sFr),g(mA,yt,null),e(Rr,lFr),e(Rr,xo),g(gA,xo,null),e(xo,iFr),e(xo,z1e),e(z1e,dFr),e(xo,cFr),e(xo,Ln),e(Ln,fFr),e(Ln,W1e),e(W1e,mFr),e(Ln,gFr),e(Ln,Q1e),e(Q1e,hFr),e(Ln,uFr),e(Ln,H1e),e(H1e,pFr),e(Ln,_Fr),e(xo,vFr),e(xo,Te),e(Te,yC),e(yC,U1e),e(U1e,bFr),e(yC,TFr),e(yC,NX),e(NX,FFr),e(yC,CFr),e(Te,MFr),e(Te,wC),e(wC,J1e),e(J1e,EFr),e(wC,yFr),e(wC,qX),e(qX,wFr),e(wC,AFr),e(Te,LFr),e(Te,AC),e(AC,Y1e),e(Y1e,BFr),e(AC,xFr),e(AC,GX),e(GX,kFr),e(AC,RFr),e(Te,SFr),e(Te,LC),e(LC,K1e),e(K1e,PFr),e(LC,$Fr),e(LC,OX),e(OX,IFr),e(LC,DFr),e(Te,jFr),e(Te,BC),e(BC,Z1e),e(Z1e,NFr),e(BC,qFr),e(BC,XX),e(XX,GFr),e(BC,OFr),e(Te,XFr),e(Te,xC),e(xC,e4e),e(e4e,VFr),e(xC,zFr),e(xC,VX),e(VX,WFr),e(xC,QFr),e(Te,HFr),e(Te,kC),e(kC,o4e),e(o4e,UFr),e(kC,JFr),e(kC,zX),e(zX,YFr),e(kC,KFr),e(Te,ZFr),e(Te,RC),e(RC,r4e),e(r4e,eCr),e(RC,oCr),e(RC,WX),e(WX,rCr),e(RC,tCr),e(Te,aCr),e(Te,SC),e(SC,t4e),e(t4e,nCr),e(SC,sCr),e(SC,QX),e(QX,lCr),e(SC,iCr),e(xo,dCr),e(xo,a4e),e(a4e,cCr),e(xo,fCr),g(hA,xo,null),v(c,cxe,_),v(c,of,_),e(of,PC),e(PC,n4e),g(uA,n4e,null),e(of,mCr),e(of,s4e),e(s4e,gCr),v(c,fxe,_),v(c,Sr,_),g(pA,Sr,null),e(Sr,hCr),e(Sr,rf),e(rf,uCr),e(rf,l4e),e(l4e,pCr),e(rf,_Cr),e(rf,i4e),e(i4e,vCr),e(rf,bCr),e(Sr,TCr),e(Sr,_A),e(_A,FCr),e(_A,d4e),e(d4e,CCr),e(_A,MCr),e(Sr,ECr),e(Sr,wt),g(vA,wt,null),e(wt,yCr),e(wt,c4e),e(c4e,wCr),e(wt,ACr),e(wt,tf),e(tf,LCr),e(tf,f4e),e(f4e,BCr),e(tf,xCr),e(tf,m4e),e(m4e,kCr),e(tf,RCr),e(wt,SCr),e(wt,g4e),e(g4e,PCr),e(wt,$Cr),g(bA,wt,null),e(Sr,ICr),e(Sr,ko),g(TA,ko,null),e(ko,DCr),e(ko,h4e),e(h4e,jCr),e(ko,NCr),e(ko,Bn),e(Bn,qCr),e(Bn,u4e),e(u4e,GCr),e(Bn,OCr),e(Bn,p4e),e(p4e,XCr),e(Bn,VCr),e(Bn,_4e),e(_4e,zCr),e(Bn,WCr),e(ko,QCr),e(ko,Fe),e(Fe,$C),e($C,v4e),e(v4e,HCr),e($C,UCr),e($C,HX),e(HX,JCr),e($C,YCr),e(Fe,KCr),e(Fe,IC),e(IC,b4e),e(b4e,ZCr),e(IC,eMr),e(IC,UX),e(UX,oMr),e(IC,rMr),e(Fe,tMr),e(Fe,DC),e(DC,T4e),e(T4e,aMr),e(DC,nMr),e(DC,JX),e(JX,sMr),e(DC,lMr),e(Fe,iMr),e(Fe,jC),e(jC,F4e),e(F4e,dMr),e(jC,cMr),e(jC,YX),e(YX,fMr),e(jC,mMr),e(Fe,gMr),e(Fe,NC),e(NC,C4e),e(C4e,hMr),e(NC,uMr),e(NC,KX),e(KX,pMr),e(NC,_Mr),e(Fe,vMr),e(Fe,qC),e(qC,M4e),e(M4e,bMr),e(qC,TMr),e(qC,ZX),e(ZX,FMr),e(qC,CMr),e(Fe,MMr),e(Fe,GC),e(GC,E4e),e(E4e,EMr),e(GC,yMr),e(GC,eV),e(eV,wMr),e(GC,AMr),e(Fe,LMr),e(Fe,OC),e(OC,y4e),e(y4e,BMr),e(OC,xMr),e(OC,oV),e(oV,kMr),e(OC,RMr),e(Fe,SMr),e(Fe,XC),e(XC,w4e),e(w4e,PMr),e(XC,$Mr),e(XC,rV),e(rV,IMr),e(XC,DMr),e(ko,jMr),e(ko,A4e),e(A4e,NMr),e(ko,qMr),g(FA,ko,null),v(c,mxe,_),v(c,af,_),e(af,VC),e(VC,L4e),g(CA,L4e,null),e(af,GMr),e(af,B4e),e(B4e,OMr),v(c,gxe,_),v(c,Pr,_),g(MA,Pr,null),e(Pr,XMr),e(Pr,nf),e(nf,VMr),e(nf,x4e),e(x4e,zMr),e(nf,WMr),e(nf,k4e),e(k4e,QMr),e(nf,HMr),e(Pr,UMr),e(Pr,EA),e(EA,JMr),e(EA,R4e),e(R4e,YMr),e(EA,KMr),e(Pr,ZMr),e(Pr,At),g(yA,At,null),e(At,eEr),e(At,S4e),e(S4e,oEr),e(At,rEr),e(At,sf),e(sf,tEr),e(sf,P4e),e(P4e,aEr),e(sf,nEr),e(sf,$4e),e($4e,sEr),e(sf,lEr),e(At,iEr),e(At,I4e),e(I4e,dEr),e(At,cEr),g(wA,At,null),e(Pr,fEr),e(Pr,Ro),g(AA,Ro,null),e(Ro,mEr),e(Ro,D4e),e(D4e,gEr),e(Ro,hEr),e(Ro,xn),e(xn,uEr),e(xn,j4e),e(j4e,pEr),e(xn,_Er),e(xn,N4e),e(N4e,vEr),e(xn,bEr),e(xn,q4e),e(q4e,TEr),e(xn,FEr),e(Ro,CEr),e(Ro,Ce),e(Ce,zC),e(zC,G4e),e(G4e,MEr),e(zC,EEr),e(zC,tV),e(tV,yEr),e(zC,wEr),e(Ce,AEr),e(Ce,WC),e(WC,O4e),e(O4e,LEr),e(WC,BEr),e(WC,aV),e(aV,xEr),e(WC,kEr),e(Ce,REr),e(Ce,QC),e(QC,X4e),e(X4e,SEr),e(QC,PEr),e(QC,nV),e(nV,$Er),e(QC,IEr),e(Ce,DEr),e(Ce,HC),e(HC,V4e),e(V4e,jEr),e(HC,NEr),e(HC,sV),e(sV,qEr),e(HC,GEr),e(Ce,OEr),e(Ce,UC),e(UC,z4e),e(z4e,XEr),e(UC,VEr),e(UC,lV),e(lV,zEr),e(UC,WEr),e(Ce,QEr),e(Ce,JC),e(JC,W4e),e(W4e,HEr),e(JC,UEr),e(JC,iV),e(iV,JEr),e(JC,YEr),e(Ce,KEr),e(Ce,YC),e(YC,Q4e),e(Q4e,ZEr),e(YC,e3r),e(YC,dV),e(dV,o3r),e(YC,r3r),e(Ce,t3r),e(Ce,KC),e(KC,H4e),e(H4e,a3r),e(KC,n3r),e(KC,cV),e(cV,s3r),e(KC,l3r),e(Ce,i3r),e(Ce,ZC),e(ZC,U4e),e(U4e,d3r),e(ZC,c3r),e(ZC,fV),e(fV,f3r),e(ZC,m3r),e(Ro,g3r),e(Ro,J4e),e(J4e,h3r),e(Ro,u3r),g(LA,Ro,null),v(c,hxe,_),v(c,lf,_),e(lf,eM),e(eM,Y4e),g(BA,Y4e,null),e(lf,p3r),e(lf,K4e),e(K4e,_3r),v(c,uxe,_),v(c,$r,_),g(xA,$r,null),e($r,v3r),e($r,df),e(df,b3r),e(df,Z4e),e(Z4e,T3r),e(df,F3r),e(df,ebe),e(ebe,C3r),e(df,M3r),e($r,E3r),e($r,kA),e(kA,y3r),e(kA,obe),e(obe,w3r),e(kA,A3r),e($r,L3r),e($r,Lt),g(RA,Lt,null),e(Lt,B3r),e(Lt,rbe),e(rbe,x3r),e(Lt,k3r),e(Lt,cf),e(cf,R3r),e(cf,tbe),e(tbe,S3r),e(cf,P3r),e(cf,abe),e(abe,$3r),e(cf,I3r),e(Lt,D3r),e(Lt,nbe),e(nbe,j3r),e(Lt,N3r),g(SA,Lt,null),e($r,q3r),e($r,So),g(PA,So,null),e(So,G3r),e(So,sbe),e(sbe,O3r),e(So,X3r),e(So,kn),e(kn,V3r),e(kn,lbe),e(lbe,z3r),e(kn,W3r),e(kn,ibe),e(ibe,Q3r),e(kn,H3r),e(kn,dbe),e(dbe,U3r),e(kn,J3r),e(So,Y3r),e(So,so),e(so,oM),e(oM,cbe),e(cbe,K3r),e(oM,Z3r),e(oM,mV),e(mV,e5r),e(oM,o5r),e(so,r5r),e(so,rM),e(rM,fbe),e(fbe,t5r),e(rM,a5r),e(rM,gV),e(gV,n5r),e(rM,s5r),e(so,l5r),e(so,tM),e(tM,mbe),e(mbe,i5r),e(tM,d5r),e(tM,hV),e(hV,c5r),e(tM,f5r),e(so,m5r),e(so,aM),e(aM,gbe),e(gbe,g5r),e(aM,h5r),e(aM,uV),e(uV,u5r),e(aM,p5r),e(so,_5r),e(so,nM),e(nM,hbe),e(hbe,v5r),e(nM,b5r),e(nM,pV),e(pV,T5r),e(nM,F5r),e(so,C5r),e(so,sM),e(sM,ube),e(ube,M5r),e(sM,E5r),e(sM,_V),e(_V,y5r),e(sM,w5r),e(so,A5r),e(so,lM),e(lM,pbe),e(pbe,L5r),e(lM,B5r),e(lM,vV),e(vV,x5r),e(lM,k5r),e(So,R5r),e(So,_be),e(_be,S5r),e(So,P5r),g($A,So,null),v(c,pxe,_),v(c,ff,_),e(ff,iM),e(iM,vbe),g(IA,vbe,null),e(ff,$5r),e(ff,bbe),e(bbe,I5r),v(c,_xe,_),v(c,Ir,_),g(DA,Ir,null),e(Ir,D5r),e(Ir,mf),e(mf,j5r),e(mf,Tbe),e(Tbe,N5r),e(mf,q5r),e(mf,Fbe),e(Fbe,G5r),e(mf,O5r),e(Ir,X5r),e(Ir,jA),e(jA,V5r),e(jA,Cbe),e(Cbe,z5r),e(jA,W5r),e(Ir,Q5r),e(Ir,Bt),g(NA,Bt,null),e(Bt,H5r),e(Bt,Mbe),e(Mbe,U5r),e(Bt,J5r),e(Bt,gf),e(gf,Y5r),e(gf,Ebe),e(Ebe,K5r),e(gf,Z5r),e(gf,ybe),e(ybe,eyr),e(gf,oyr),e(Bt,ryr),e(Bt,wbe),e(wbe,tyr),e(Bt,ayr),g(qA,Bt,null),e(Ir,nyr),e(Ir,Po),g(GA,Po,null),e(Po,syr),e(Po,Abe),e(Abe,lyr),e(Po,iyr),e(Po,Rn),e(Rn,dyr),e(Rn,Lbe),e(Lbe,cyr),e(Rn,fyr),e(Rn,Bbe),e(Bbe,myr),e(Rn,gyr),e(Rn,xbe),e(xbe,hyr),e(Rn,uyr),e(Po,pyr),e(Po,lo),e(lo,dM),e(dM,kbe),e(kbe,_yr),e(dM,vyr),e(dM,bV),e(bV,byr),e(dM,Tyr),e(lo,Fyr),e(lo,cM),e(cM,Rbe),e(Rbe,Cyr),e(cM,Myr),e(cM,TV),e(TV,Eyr),e(cM,yyr),e(lo,wyr),e(lo,fM),e(fM,Sbe),e(Sbe,Ayr),e(fM,Lyr),e(fM,FV),e(FV,Byr),e(fM,xyr),e(lo,kyr),e(lo,mM),e(mM,Pbe),e(Pbe,Ryr),e(mM,Syr),e(mM,CV),e(CV,Pyr),e(mM,$yr),e(lo,Iyr),e(lo,gM),e(gM,$be),e($be,Dyr),e(gM,jyr),e(gM,MV),e(MV,Nyr),e(gM,qyr),e(lo,Gyr),e(lo,hM),e(hM,Ibe),e(Ibe,Oyr),e(hM,Xyr),e(hM,EV),e(EV,Vyr),e(hM,zyr),e(lo,Wyr),e(lo,uM),e(uM,Dbe),e(Dbe,Qyr),e(uM,Hyr),e(uM,yV),e(yV,Uyr),e(uM,Jyr),e(Po,Yyr),e(Po,jbe),e(jbe,Kyr),e(Po,Zyr),g(OA,Po,null),v(c,vxe,_),v(c,hf,_),e(hf,pM),e(pM,Nbe),g(XA,Nbe,null),e(hf,ewr),e(hf,qbe),e(qbe,owr),v(c,bxe,_),v(c,Dr,_),g(VA,Dr,null),e(Dr,rwr),e(Dr,uf),e(uf,twr),e(uf,Gbe),e(Gbe,awr),e(uf,nwr),e(uf,Obe),e(Obe,swr),e(uf,lwr),e(Dr,iwr),e(Dr,zA),e(zA,dwr),e(zA,Xbe),e(Xbe,cwr),e(zA,fwr),e(Dr,mwr),e(Dr,xt),g(WA,xt,null),e(xt,gwr),e(xt,Vbe),e(Vbe,hwr),e(xt,uwr),e(xt,pf),e(pf,pwr),e(pf,zbe),e(zbe,_wr),e(pf,vwr),e(pf,Wbe),e(Wbe,bwr),e(pf,Twr),e(xt,Fwr),e(xt,Qbe),e(Qbe,Cwr),e(xt,Mwr),g(QA,xt,null),e(Dr,Ewr),e(Dr,$o),g(HA,$o,null),e($o,ywr),e($o,Hbe),e(Hbe,wwr),e($o,Awr),e($o,Sn),e(Sn,Lwr),e(Sn,Ube),e(Ube,Bwr),e(Sn,xwr),e(Sn,Jbe),e(Jbe,kwr),e(Sn,Rwr),e(Sn,Ybe),e(Ybe,Swr),e(Sn,Pwr),e($o,$wr),e($o,Kbe),e(Kbe,_M),e(_M,Zbe),e(Zbe,Iwr),e(_M,Dwr),e(_M,wV),e(wV,jwr),e(_M,Nwr),e($o,qwr),e($o,e2e),e(e2e,Gwr),e($o,Owr),g(UA,$o,null),v(c,Txe,_),v(c,_f,_),e(_f,vM),e(vM,o2e),g(JA,o2e,null),e(_f,Xwr),e(_f,r2e),e(r2e,Vwr),v(c,Fxe,_),v(c,jr,_),g(YA,jr,null),e(jr,zwr),e(jr,vf),e(vf,Wwr),e(vf,t2e),e(t2e,Qwr),e(vf,Hwr),e(vf,a2e),e(a2e,Uwr),e(vf,Jwr),e(jr,Ywr),e(jr,KA),e(KA,Kwr),e(KA,n2e),e(n2e,Zwr),e(KA,e6r),e(jr,o6r),e(jr,kt),g(ZA,kt,null),e(kt,r6r),e(kt,s2e),e(s2e,t6r),e(kt,a6r),e(kt,bf),e(bf,n6r),e(bf,l2e),e(l2e,s6r),e(bf,l6r),e(bf,i2e),e(i2e,i6r),e(bf,d6r),e(kt,c6r),e(kt,d2e),e(d2e,f6r),e(kt,m6r),g(eL,kt,null),e(jr,g6r),e(jr,Io),g(oL,Io,null),e(Io,h6r),e(Io,c2e),e(c2e,u6r),e(Io,p6r),e(Io,Pn),e(Pn,_6r),e(Pn,f2e),e(f2e,v6r),e(Pn,b6r),e(Pn,m2e),e(m2e,T6r),e(Pn,F6r),e(Pn,g2e),e(g2e,C6r),e(Pn,M6r),e(Io,E6r),e(Io,rL),e(rL,bM),e(bM,h2e),e(h2e,y6r),e(bM,w6r),e(bM,AV),e(AV,A6r),e(bM,L6r),e(rL,B6r),e(rL,TM),e(TM,u2e),e(u2e,x6r),e(TM,k6r),e(TM,LV),e(LV,R6r),e(TM,S6r),e(Io,P6r),e(Io,p2e),e(p2e,$6r),e(Io,I6r),g(tL,Io,null),v(c,Cxe,_),v(c,Tf,_),e(Tf,FM),e(FM,_2e),g(aL,_2e,null),e(Tf,D6r),e(Tf,v2e),e(v2e,j6r),v(c,Mxe,_),v(c,Nr,_),g(nL,Nr,null),e(Nr,N6r),e(Nr,Ff),e(Ff,q6r),e(Ff,b2e),e(b2e,G6r),e(Ff,O6r),e(Ff,T2e),e(T2e,X6r),e(Ff,V6r),e(Nr,z6r),e(Nr,sL),e(sL,W6r),e(sL,F2e),e(F2e,Q6r),e(sL,H6r),e(Nr,U6r),e(Nr,Rt),g(lL,Rt,null),e(Rt,J6r),e(Rt,C2e),e(C2e,Y6r),e(Rt,K6r),e(Rt,Cf),e(Cf,Z6r),e(Cf,M2e),e(M2e,eAr),e(Cf,oAr),e(Cf,E2e),e(E2e,rAr),e(Cf,tAr),e(Rt,aAr),e(Rt,y2e),e(y2e,nAr),e(Rt,sAr),g(iL,Rt,null),e(Nr,lAr),e(Nr,Do),g(dL,Do,null),e(Do,iAr),e(Do,w2e),e(w2e,dAr),e(Do,cAr),e(Do,$n),e($n,fAr),e($n,A2e),e(A2e,mAr),e($n,gAr),e($n,L2e),e(L2e,hAr),e($n,uAr),e($n,B2e),e(B2e,pAr),e($n,_Ar),e(Do,vAr),e(Do,x2e),e(x2e,CM),e(CM,k2e),e(k2e,bAr),e(CM,TAr),e(CM,BV),e(BV,FAr),e(CM,CAr),e(Do,MAr),e(Do,R2e),e(R2e,EAr),e(Do,yAr),g(cL,Do,null),Exe=!0},p(c,[_]){const fL={};_&2&&(fL.$$scope={dirty:_,ctx:c}),Bf.$set(fL);const S2e={};_&2&&(S2e.$$scope={dirty:_,ctx:c}),fh.$set(S2e);const P2e={};_&2&&(P2e.$$scope={dirty:_,ctx:c}),Ch.$set(P2e)},i(c){Exe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(Bf.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(WE.$$.fragment,c),h(fh.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(ZE.$$.fragment,c),h(Ch.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(u3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(b3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(D3.$$.fragment,c),h(j3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(h5.$$.fragment,c),h(u5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(v5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(C5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(L5.$$.fragment,c),h(B5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(D5.$$.fragment,c),h(j5.$$.fragment,c),h(N5.$$.fragment,c),h(q5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(V5.$$.fragment,c),h(z5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(_y.$$.fragment,c),h(vy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(v6.$$.fragment,c),h(b6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(vA.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),Exe=!0)},o(c){u(ce.$$.fragment,c),u($a.$$.fragment,c),u(wE.$$.fragment,c),u(AE.$$.fragment,c),u(Bf.$$.fragment,c),u(LE.$$.fragment,c),u(BE.$$.fragment,c),u(RE.$$.fragment,c),u(SE.$$.fragment,c),u(PE.$$.fragment,c),u($E.$$.fragment,c),u(IE.$$.fragment,c),u(NE.$$.fragment,c),u(qE.$$.fragment,c),u(GE.$$.fragment,c),u(OE.$$.fragment,c),u(XE.$$.fragment,c),u(WE.$$.fragment,c),u(fh.$$.fragment,c),u(QE.$$.fragment,c),u(HE.$$.fragment,c),u(UE.$$.fragment,c),u(JE.$$.fragment,c),u(ZE.$$.fragment,c),u(Ch.$$.fragment,c),u(e3.$$.fragment,c),u(o3.$$.fragment,c),u(r3.$$.fragment,c),u(t3.$$.fragment,c),u(n3.$$.fragment,c),u(s3.$$.fragment,c),u(l3.$$.fragment,c),u(i3.$$.fragment,c),u(d3.$$.fragment,c),u(c3.$$.fragment,c),u(m3.$$.fragment,c),u(g3.$$.fragment,c),u(h3.$$.fragment,c),u(u3.$$.fragment,c),u(p3.$$.fragment,c),u(_3.$$.fragment,c),u(b3.$$.fragment,c),u(T3.$$.fragment,c),u(F3.$$.fragment,c),u(C3.$$.fragment,c),u(M3.$$.fragment,c),u(E3.$$.fragment,c),u(w3.$$.fragment,c),u(A3.$$.fragment,c),u(L3.$$.fragment,c),u(B3.$$.fragment,c),u(x3.$$.fragment,c),u(k3.$$.fragment,c),u(S3.$$.fragment,c),u(P3.$$.fragment,c),u($3.$$.fragment,c),u(I3.$$.fragment,c),u(D3.$$.fragment,c),u(j3.$$.fragment,c),u(q3.$$.fragment,c),u(G3.$$.fragment,c),u(O3.$$.fragment,c),u(X3.$$.fragment,c),u(V3.$$.fragment,c),u(z3.$$.fragment,c),u(Q3.$$.fragment,c),u(H3.$$.fragment,c),u(U3.$$.fragment,c),u(J3.$$.fragment,c),u(Y3.$$.fragment,c),u(K3.$$.fragment,c),u(e5.$$.fragment,c),u(o5.$$.fragment,c),u(r5.$$.fragment,c),u(t5.$$.fragment,c),u(a5.$$.fragment,c),u(n5.$$.fragment,c),u(l5.$$.fragment,c),u(i5.$$.fragment,c),u(d5.$$.fragment,c),u(c5.$$.fragment,c),u(f5.$$.fragment,c),u(m5.$$.fragment,c),u(h5.$$.fragment,c),u(u5.$$.fragment,c),u(p5.$$.fragment,c),u(_5.$$.fragment,c),u(v5.$$.fragment,c),u(b5.$$.fragment,c),u(F5.$$.fragment,c),u(C5.$$.fragment,c),u(M5.$$.fragment,c),u(E5.$$.fragment,c),u(y5.$$.fragment,c),u(w5.$$.fragment,c),u(L5.$$.fragment,c),u(B5.$$.fragment,c),u(x5.$$.fragment,c),u(k5.$$.fragment,c),u(R5.$$.fragment,c),u(S5.$$.fragment,c),u($5.$$.fragment,c),u(I5.$$.fragment,c),u(D5.$$.fragment,c),u(j5.$$.fragment,c),u(N5.$$.fragment,c),u(q5.$$.fragment,c),u(O5.$$.fragment,c),u(X5.$$.fragment,c),u(V5.$$.fragment,c),u(z5.$$.fragment,c),u(W5.$$.fragment,c),u(Q5.$$.fragment,c),u(U5.$$.fragment,c),u(J5.$$.fragment,c),u(Y5.$$.fragment,c),u(K5.$$.fragment,c),u(Z5.$$.fragment,c),u(ey.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(ly.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(_y.$$.fragment,c),u(vy.$$.fragment,c),u(by.$$.fragment,c),u(Ty.$$.fragment,c),u(Fy.$$.fragment,c),u(Cy.$$.fragment,c),u(Ey.$$.fragment,c),u(yy.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(Ly.$$.fragment,c),u(By.$$.fragment,c),u(ky.$$.fragment,c),u(Ry.$$.fragment,c),u(Sy.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(jy.$$.fragment,c),u(Ny.$$.fragment,c),u(qy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Xy.$$.fragment,c),u(zy.$$.fragment,c),u(Wy.$$.fragment,c),u(Qy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Zy.$$.fragment,c),u(ew.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(sw.$$.fragment,c),u(lw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(fw.$$.fragment,c),u(gw.$$.fragment,c),u(hw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(vw.$$.fragment,c),u(Tw.$$.fragment,c),u(Fw.$$.fragment,c),u(Cw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(ww.$$.fragment,c),u(Lw.$$.fragment,c),u(Bw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Sw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(Dw.$$.fragment,c),u(jw.$$.fragment,c),u(Nw.$$.fragment,c),u(qw.$$.fragment,c),u(Ow.$$.fragment,c),u(Xw.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Qw.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(f6.$$.fragment,c),u(m6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(p6.$$.fragment,c),u(_6.$$.fragment,c),u(v6.$$.fragment,c),u(b6.$$.fragment,c),u(T6.$$.fragment,c),u(F6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(D6.$$.fragment,c),u(j6.$$.fragment,c),u(N6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(Q6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(fA.$$.fragment,c),u(mA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(vA.$$.fragment,c),u(bA.$$.fragment,c),u(TA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(MA.$$.fragment,c),u(yA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(LA.$$.fragment,c),u(BA.$$.fragment,c),u(xA.$$.fragment,c),u(RA.$$.fragment,c),u(SA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(DA.$$.fragment,c),u(NA.$$.fragment,c),u(qA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(WA.$$.fragment,c),u(QA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(ZA.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),Exe=!1},d(c){t(J),c&&t(Be),c&&t(ie),p(ce),c&&t(Ef),c&&t(sa),c&&t(ye),c&&t(io),c&&t(wf),p($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(y9e),c&&t($i),p(wE),c&&t(w9e),c&&t(qn),c&&t(A9e),p(AE,c),c&&t(L9e),c&&t(m8),c&&t(B9e),p(Bf,c),c&&t(x9e),c&&t(Ii),p(LE),c&&t(k9e),c&&t(Xo),p(BE),p(RE),p(SE),p(PE),c&&t(R9e),c&&t(ji),p($E),c&&t(S9e),c&&t(Vo),p(IE),p(NE),p(qE),p(GE),c&&t(P9e),c&&t(Ni),p(OE),c&&t($9e),c&&t(zo),p(XE),p(WE),p(fh),p(QE),p(HE),c&&t(I9e),c&&t(qi),p(UE),c&&t(D9e),c&&t(Wo),p(JE),p(ZE),p(Ch),p(e3),p(o3),c&&t(j9e),c&&t(Oi),p(r3),c&&t(N9e),c&&t(Qo),p(t3),p(n3),p(s3),p(l3),p(i3),c&&t(q9e),c&&t(zi),p(d3),c&&t(G9e),c&&t(Ho),p(c3),p(m3),p(g3),p(h3),p(u3),c&&t(O9e),c&&t(Hi),p(p3),c&&t(X9e),c&&t(Uo),p(_3),p(b3),p(T3),p(F3),p(C3),c&&t(V9e),c&&t(Yi),p(M3),c&&t(z9e),c&&t(Jo),p(E3),p(w3),p(A3),p(L3),p(B3),c&&t(W9e),c&&t(ed),p(x3),c&&t(Q9e),c&&t(Yo),p(k3),p(S3),p(P3),p($3),p(I3),c&&t(H9e),c&&t(td),p(D3),c&&t(U9e),c&&t(Ko),p(j3),p(q3),p(G3),p(O3),p(X3),c&&t(J9e),c&&t(sd),p(V3),c&&t(Y9e),c&&t(Zo),p(z3),p(Q3),p(H3),p(U3),p(J3),c&&t(K9e),c&&t(dd),p(Y3),c&&t(Z9e),c&&t(er),p(K3),p(e5),p(o5),p(r5),p(t5),c&&t(eBe),c&&t(md),p(a5),c&&t(oBe),c&&t(or),p(n5),p(l5),p(i5),p(d5),p(c5),c&&t(rBe),c&&t(ud),p(f5),c&&t(tBe),c&&t(rr),p(m5),p(h5),p(u5),p(p5),p(_5),c&&t(aBe),c&&t(vd),p(v5),c&&t(nBe),c&&t(tr),p(b5),p(F5),p(C5),p(M5),p(E5),c&&t(sBe),c&&t(Fd),p(y5),c&&t(lBe),c&&t(ar),p(w5),p(L5),p(B5),p(x5),p(k5),c&&t(iBe),c&&t(Ed),p(R5),c&&t(dBe),c&&t(nr),p(S5),p($5),p(I5),p(D5),p(j5),c&&t(cBe),c&&t(Ad),p(N5),c&&t(fBe),c&&t(sr),p(q5),p(O5),p(X5),p(V5),p(z5),c&&t(mBe),c&&t(xd),p(W5),c&&t(gBe),c&&t(lr),p(Q5),p(U5),p(J5),p(Y5),p(K5),c&&t(hBe),c&&t(Sd),p(Z5),c&&t(uBe),c&&t(ir),p(ey),p(ry),p(ty),p(ay),p(ny),c&&t(pBe),c&&t(Id),p(sy),c&&t(_Be),c&&t(dr),p(ly),p(dy),p(cy),p(fy),p(gy),c&&t(vBe),c&&t(Nd),p(hy),c&&t(bBe),c&&t(cr),p(uy),p(_y),p(vy),p(by),p(Ty),c&&t(TBe),c&&t(Od),p(Fy),c&&t(FBe),c&&t(fr),p(Cy),p(Ey),p(yy),p(wy),p(Ay),c&&t(CBe),c&&t(Wd),p(Ly),c&&t(MBe),c&&t(mr),p(By),p(ky),p(Ry),p(Sy),p(Py),c&&t(EBe),c&&t(Ud),p($y),c&&t(yBe),c&&t(gr),p(Iy),p(jy),p(Ny),p(qy),p(Gy),c&&t(wBe),c&&t(Kd),p(Oy),c&&t(ABe),c&&t(hr),p(Xy),p(zy),p(Wy),p(Qy),p(Uy),c&&t(LBe),c&&t(oc),p(Jy),c&&t(BBe),c&&t(ur),p(Yy),p(Zy),p(ew),p(ow),p(rw),c&&t(xBe),c&&t(ac),p(tw),c&&t(kBe),c&&t(pr),p(aw),p(sw),p(lw),p(iw),p(dw),c&&t(RBe),c&&t(lc),p(cw),c&&t(SBe),c&&t(_r),p(fw),p(gw),p(hw),p(uw),p(pw),c&&t(PBe),c&&t(cc),p(_w),c&&t($Be),c&&t(vr),p(vw),p(Tw),p(Fw),p(Cw),p(Ew),c&&t(IBe),c&&t(gc),p(yw),c&&t(DBe),c&&t(br),p(ww),p(Lw),p(Bw),p(xw),p(kw),c&&t(jBe),c&&t(pc),p(Rw),c&&t(NBe),c&&t(Tr),p(Sw),p($w),p(Iw),p(Dw),p(jw),c&&t(qBe),c&&t(bc),p(Nw),c&&t(GBe),c&&t(Fr),p(qw),p(Ow),p(Xw),p(Vw),p(zw),c&&t(OBe),c&&t(Cc),p(Ww),c&&t(XBe),c&&t(Cr),p(Qw),p(Uw),p(Jw),p(Yw),p(Kw),c&&t(VBe),c&&t(yc),p(Zw),c&&t(zBe),c&&t(Mr),p(e6),p(r6),p(t6),p(a6),p(n6),c&&t(WBe),c&&t(Lc),p(s6),c&&t(QBe),c&&t(Er),p(l6),p(d6),p(c6),p(f6),p(m6),c&&t(HBe),c&&t(kc),p(g6),c&&t(UBe),c&&t(yr),p(h6),p(p6),p(_6),p(v6),p(b6),c&&t(JBe),c&&t(Pc),p(T6),c&&t(YBe),c&&t(wr),p(F6),p(M6),p(E6),p(y6),p(w6),c&&t(KBe),c&&t(Dc),p(A6),c&&t(ZBe),c&&t(Ar),p(L6),p(x6),p(k6),p(R6),p(S6),c&&t(exe),c&&t(qc),p(P6),c&&t(oxe),c&&t(Lr),p($6),p(D6),p(j6),p(N6),p(q6),c&&t(rxe),c&&t(Xc),p(G6),c&&t(txe),c&&t(Br),p(O6),p(V6),p(z6),p(W6),p(Q6),c&&t(axe),c&&t(Wc),p(H6),c&&t(nxe),c&&t(xr),p(U6),p(Y6),p(K6),p(Z6),p(eA),c&&t(sxe),c&&t(Uc),p(oA),c&&t(lxe),c&&t(kr),p(rA),p(aA),p(nA),p(sA),p(lA),c&&t(ixe),c&&t(Kc),p(iA),c&&t(dxe),c&&t(Rr),p(dA),p(fA),p(mA),p(gA),p(hA),c&&t(cxe),c&&t(of),p(uA),c&&t(fxe),c&&t(Sr),p(pA),p(vA),p(bA),p(TA),p(FA),c&&t(mxe),c&&t(af),p(CA),c&&t(gxe),c&&t(Pr),p(MA),p(yA),p(wA),p(AA),p(LA),c&&t(hxe),c&&t(lf),p(BA),c&&t(uxe),c&&t($r),p(xA),p(RA),p(SA),p(PA),p($A),c&&t(pxe),c&&t(ff),p(IA),c&&t(_xe),c&&t(Ir),p(DA),p(NA),p(qA),p(GA),p(OA),c&&t(vxe),c&&t(hf),p(XA),c&&t(bxe),c&&t(Dr),p(VA),p(WA),p(QA),p(HA),p(UA),c&&t(Txe),c&&t(_f),p(JA),c&&t(Fxe),c&&t(jr),p(YA),p(ZA),p(eL),p(oL),p(tL),c&&t(Cxe),c&&t(Tf),p(aL),c&&t(Mxe),c&&t(Nr),p(nL),p(lL),p(iL),p(dL),p(cL)}}}const v4t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function b4t(Ai,J,Be){let{fw:ie}=J;return Ai.$$set=me=>{"fw"in me&&Be(0,ie=me.fw)},[ie]}class w4t extends c4t{constructor(J){super();f4t(this,J,b4t,_4t,m4t,{fw:0})}}export{w4t as default,v4t as metadata};
