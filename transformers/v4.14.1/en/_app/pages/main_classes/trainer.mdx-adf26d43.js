import{S as SM,i as CM,s as NM,e as n,k as i,w as m,t as o,M as IM,c as s,d as r,m as d,a as l,x as f,h as a,b as h,F as e,g as p,y as u,q as v,o as _,B as g}from"../../chunks/vendor-ab4e3193.js";import{T as Ww}from"../../chunks/Tip-b5c6375a.js";import{D as E}from"../../chunks/Docstring-b69c0bd4.js";import{C as U}from"../../chunks/CodeBlock-516df0c5.js";import{I as $}from"../../chunks/IconCopyLink-d992940d.js";import"../../chunks/CopyButton-204b56db.js";function zM(Ve){let w,N,T,P,fe,R,M,B,ue,te,F,se,le,re,ie,Y,Ze,ve,S,D,rt,oe,ot,at,_e,dn,cn,Ye,De,pn,ge,hn,mn;return{c(){w=n("p"),N=o("The "),T=n("a"),P=o("Trainer"),fe=o(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),R=i(),M=n("ul"),B=n("li"),ue=o("your model always return tuples or subclasses of "),te=n("a"),F=o("ModelOutput"),se=o("."),le=i(),re=n("li"),ie=o("your model can compute the loss if a "),Y=n("code"),Ze=o("labels"),ve=o(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),S=i(),D=n("li"),rt=o("your model can accept multiple label arguments (use the "),oe=n("code"),ot=o("label_names"),at=o(" in your "),_e=n("a"),dn=o("TrainingArguments"),cn=o(" to indicate their name to the "),Ye=n("a"),De=o("Trainer"),pn=o(") but none of them should be named "),ge=n("code"),hn=o('"label"'),mn=o("."),this.h()},l(J){w=s(J,"P",{});var V=l(w);N=a(V,"The "),T=s(V,"A",{href:!0});var mi=l(T);P=a(mi,"Trainer"),mi.forEach(r),fe=a(V,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),V.forEach(r),R=d(J),M=s(J,"UL",{});var ye=l(M);B=s(ye,"LI",{});var Xr=l(B);ue=a(Xr,"your model always return tuples or subclasses of "),te=s(Xr,"A",{href:!0});var fi=l(te);F=a(fi,"ModelOutput"),fi.forEach(r),se=a(Xr,"."),Xr.forEach(r),le=d(ye),re=s(ye,"LI",{});var Bt=l(re);ie=a(Bt,"your model can compute the loss if a "),Y=s(Bt,"CODE",{});var k=l(Y);Ze=a(k,"labels"),k.forEach(r),ve=a(Bt,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),Bt.forEach(r),S=d(ye),D=s(ye,"LI",{});var Z=l(D);rt=a(Z,"your model can accept multiple label arguments (use the "),oe=s(Z,"CODE",{});var eo=l(oe);ot=a(eo,"label_names"),eo.forEach(r),at=a(Z," in your "),_e=s(Z,"A",{href:!0});var ui=l(_e);dn=a(ui,"TrainingArguments"),ui.forEach(r),cn=a(Z," to indicate their name to the "),Ye=s(Z,"A",{href:!0});var vi=l(Ye);De=a(vi,"Trainer"),vi.forEach(r),pn=a(Z,") but none of them should be named "),ge=s(Z,"CODE",{});var _i=l(ge);hn=a(_i,'"label"'),_i.forEach(r),mn=a(Z,"."),Z.forEach(r),ye.forEach(r),this.h()},h(){h(T,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(te,"href","/docs/transformers/v4.14.1/en/main_classes/output#transformers.file_utils.ModelOutput"),h(_e,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(Ye,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer")},m(J,V){p(J,w,V),e(w,N),e(w,T),e(T,P),e(w,fe),p(J,R,V),p(J,M,V),e(M,B),e(B,ue),e(B,te),e(te,F),e(B,se),e(M,le),e(M,re),e(re,ie),e(re,Y),e(Y,Ze),e(re,ve),e(M,S),e(M,D),e(D,rt),e(D,oe),e(oe,ot),e(D,at),e(D,_e),e(_e,dn),e(D,cn),e(D,Ye),e(Ye,De),e(D,pn),e(D,ge),e(ge,hn),e(D,mn)},d(J){J&&r(w),J&&r(R),J&&r(M)}}}function LM(Ve){let w,N,T,P,fe,R,M,B,ue,te,F,se,le,re,ie,Y,Ze;return{c(){w=n("p"),N=o("To use this method, you need to have provided a "),T=n("code"),P=o("model_init"),fe=o(` when initializing your
`),R=n("a"),M=o("Trainer"),B=o(`: we need to reinitialize the model at each new run. This is incompatible
with the `),ue=n("code"),te=o("optimizers"),F=o(" argument, so you need to subclass "),se=n("a"),le=o("Trainer"),re=o(` and override the
method `),ie=n("a"),Y=o("create_optimizer_and_scheduler()"),Ze=o(" for custom optimizer/scheduler."),this.h()},l(ve){w=s(ve,"P",{});var S=l(w);N=a(S,"To use this method, you need to have provided a "),T=s(S,"CODE",{});var D=l(T);P=a(D,"model_init"),D.forEach(r),fe=a(S,` when initializing your
`),R=s(S,"A",{href:!0});var rt=l(R);M=a(rt,"Trainer"),rt.forEach(r),B=a(S,`: we need to reinitialize the model at each new run. This is incompatible
with the `),ue=s(S,"CODE",{});var oe=l(ue);te=a(oe,"optimizers"),oe.forEach(r),F=a(S," argument, so you need to subclass "),se=s(S,"A",{href:!0});var ot=l(se);le=a(ot,"Trainer"),ot.forEach(r),re=a(S,` and override the
method `),ie=s(S,"A",{href:!0});var at=l(ie);Y=a(at,"create_optimizer_and_scheduler()"),at.forEach(r),Ze=a(S," for custom optimizer/scheduler."),S.forEach(r),this.h()},h(){h(R,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(se,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(ie,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(ve,S){p(ve,w,S),e(w,N),e(w,T),e(T,P),e(w,fe),e(w,R),e(R,M),e(w,B),e(w,ue),e(ue,te),e(w,F),e(w,se),e(se,le),e(w,re),e(w,ie),e(ie,Y),e(w,Ze)},d(ve){ve&&r(w)}}}function qM(Ve){let w,N;return{c(){w=n("p"),N=o(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(T){w=s(T,"P",{});var P=l(w);N=a(P,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),P.forEach(r)},m(T,P){p(T,w,P),e(w,N)},d(T){T&&r(w)}}}function UM(Ve){let w,N;return{c(){w=n("p"),N=o(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(T){w=s(T,"P",{});var P=l(w);N=a(P,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),P.forEach(r)},m(T,P){p(T,w,P),e(w,N)},d(T){T&&r(w)}}}function RM(Ve){let w,N,T,P,fe,R,M,B,ue,te,F,se,le,re,ie,Y,Ze,ve,S,D,rt,oe,ot,at,_e,dn,cn,Ye,De,pn,ge,hn,mn,J,V,mi,ye,Xr,fi,Bt,k,Z,eo,ui,vi,_i,gi,Kc,Bw,Vw,Zw,yi,Qc,Yw,Jw,Kw,bi,Xc,Qw,Xw,eE,nt,ep,tE,rE,tp,oE,aE,rp,nE,sE,lE,wi,op,iE,dE,cE,Ei,ap,pE,hE,mE,$i,np,fE,uE,vE,Ti,sp,_E,gE,yE,ki,lp,bE,wE,EE,Pi,ip,$E,TE,kE,Di,dp,PE,DE,E_,to,$_,ro,AE,Ai,xE,OE,T_,fn,k_,st,SE,xi,CE,NE,Oi,IE,zE,P_,Vt,oo,cp,un,LE,pp,qE,D_,y,vn,UE,hp,RE,ME,mp,FE,HE,be,ao,fp,jE,GE,Si,WE,BE,VE,K,up,ZE,YE,vp,JE,KE,_p,QE,XE,gp,e2,t2,yp,r2,o2,bp,a2,n2,s2,Ci,wp,l2,i2,d2,Ae,Ep,c2,p2,$p,h2,m2,Tp,f2,u2,kp,v2,_2,g2,xe,Pp,y2,b2,Dp,w2,E2,Ap,$2,T2,xp,k2,P2,D2,no,_n,A2,gn,x2,Op,O2,S2,C2,so,yn,N2,bn,I2,Sp,z2,L2,q2,lt,wn,U2,Cp,R2,M2,Np,F2,H2,it,En,j2,Ip,G2,W2,$n,B2,zp,V2,Z2,Y2,dt,Tn,J2,Lp,K2,Q2,Je,X2,qp,e4,t4,Up,r4,o4,Rp,a4,n4,s4,lo,kn,l4,Mp,i4,d4,Oe,Pn,c4,Fp,p4,h4,Dn,m4,Hp,f4,u4,v4,jp,_4,g4,ct,An,y4,Zt,b4,Gp,w4,E4,Wp,$4,T4,k4,Bp,P4,D4,io,xn,A4,On,x4,Ni,O4,S4,C4,pt,Sn,N4,Cn,I4,Vp,z4,L4,q4,Zp,U4,R4,ht,Nn,M4,In,F4,Yp,H4,j4,G4,Jp,W4,B4,Se,zn,V4,Ln,Z4,Kp,Y4,J4,K4,Yt,Q4,Qp,X4,e0,Xp,t0,r0,o0,eh,a0,n0,mt,qn,s0,we,l0,th,i0,d0,rh,c0,p0,oh,h0,m0,ah,f0,u0,v0,co,_0,po,Un,g0,Rn,y0,nh,b0,w0,E0,ho,Mn,$0,sh,T0,k0,mo,Fn,P0,Hn,D0,lh,A0,x0,O0,ft,jn,S0,Gn,C0,ih,N0,I0,z0,dh,L0,q0,I,Wn,U0,ch,R0,M0,ph,F0,H0,hh,j0,G0,Jt,W0,mh,B0,V0,fh,Z0,Y0,J0,uh,K0,Q0,Bn,X0,vh,_h,e$,t$,Ke,gh,Ee,r$,yh,o$,a$,bh,n$,s$,wh,l$,i$,Eh,d$,c$,p$,$h,Kt,h$,Th,m$,f$,kh,u$,v$,_$,Ph,Ii,Dh,g$,y$,b$,q,ut,Ah,w$,E$,xh,$$,T$,Oh,k$,P$,D$,Sh,A$,x$,Ch,O$,S$,Vn,C$,Nh,N$,I$,z$,Qe,L$,Ih,q$,U$,zh,R$,M$,Lh,F$,H$,j$,ae,G$,zi,W$,B$,qh,V$,Z$,Uh,Y$,J$,Rh,K$,Q$,Mh,X$,e3,t3,A,r3,Fh,o3,a3,Hh,n3,s3,jh,l3,i3,Gh,d3,c3,Zn,p3,h3,Wh,m3,f3,Bh,u3,v3,Vh,_3,g3,Zh,y3,b3,Yh,w3,E3,$3,$e,T3,Li,k3,P3,Jh,D3,A3,qi,x3,O3,Kh,S3,C3,N3,Qh,I3,z3,fo,Yn,L3,Xh,q3,U3,vt,Jn,R3,Kn,M3,em,F3,H3,j3,Ui,G3,tm,W3,B3,_t,Qn,V3,Xn,Z3,rm,Y3,J3,K3,es,Q3,om,X3,e5,t5,Q,ts,r5,am,o5,a5,rs,n5,nm,s5,l5,i5,uo,d5,os,c5,sm,p5,h5,m5,Qt,Xt,f5,lm,u5,v5,im,_5,g5,y5,as,b5,ns,w5,dm,E5,$5,T5,k5,er,P5,cm,D5,A5,pm,x5,O5,S5,gt,ss,C5,tr,N5,hm,I5,z5,mm,L5,q5,U5,fm,R5,M5,yt,ls,F5,rr,H5,um,j5,G5,vm,W5,B5,V5,_m,Z5,Y5,vo,is,J5,Xe,K5,gm,Q5,X5,ym,e6,t6,bm,r6,o6,a6,_o,ds,n6,cs,s6,wm,l6,i6,d6,Ce,ps,c6,hs,p6,Em,h6,m6,f6,$m,u6,v6,ms,_6,Tm,g6,y6,b6,bt,fs,w6,us,E6,km,$6,T6,k6,Pm,P6,D6,wt,vs,A6,Dm,x6,O6,Am,S6,C6,go,_s,N6,xm,I6,z6,Et,gs,L6,Om,q6,U6,Sm,R6,A_,or,yo,Cm,ys,M6,Nm,F6,x_,ar,Ne,bs,H6,Im,j6,G6,ws,W6,zm,B6,V6,Z6,Lm,Y6,J6,X,Es,K6,qm,Q6,X6,$s,e7,Um,t7,r7,o7,bo,a7,Ts,n7,Rm,s7,l7,i7,nr,sr,d7,Mm,c7,p7,Fm,h7,m7,f7,ks,u7,Ps,v7,Hm,_7,g7,y7,b7,lr,w7,jm,E7,$7,Gm,T7,k7,O_,ir,wo,Wm,Ds,P7,Bm,D7,S_,C,As,A7,xs,x7,Vm,O7,S7,C7,dr,N7,Ri,I7,z7,Os,L7,q7,U7,de,Ss,R7,Zm,M7,F7,cr,H7,Ym,j7,G7,Jm,W7,B7,V7,pr,Z7,Km,Y7,J7,Qm,K7,Q7,X7,Cs,eT,Xm,tT,rT,oT,Eo,Ns,aT,ef,nT,sT,$t,Is,lT,tf,iT,dT,hr,cT,rf,pT,hT,of,mT,fT,uT,$o,zs,vT,Ls,_T,af,gT,yT,bT,To,qs,wT,nf,ET,$T,ko,Us,TT,sf,kT,C_,mr,Po,lf,Rs,PT,df,DT,N_,ne,Ms,AT,Fs,xT,cf,OT,ST,CT,fr,NT,Mi,IT,zT,Hs,LT,qT,UT,Te,RT,js,MT,pf,FT,HT,jT,hf,GT,WT,mf,BT,VT,ff,ZT,YT,JT,x,KT,Gs,QT,uf,XT,e8,t8,vf,r8,o8,Ws,a8,_f,n8,s8,l8,gf,i8,d8,yf,c8,p8,bf,h8,m8,Bs,f8,wf,u8,v8,_8,Ef,g8,y8,$f,b8,w8,Tf,E8,$8,I_,ur,Do,kf,Vs,T8,Pf,k8,z_,ce,P8,Fi,D8,A8,Df,x8,O8,Hi,S8,C8,Af,N8,I8,L_,Ao,z8,ji,L8,q8,q_,xo,Gi,xf,U8,R8,M8,Wi,Of,F8,H8,U_,Ie,j8,Sf,G8,W8,Cf,B8,V8,Bi,Z8,Y8,R_,Oo,So,Nf,J8,K8,If,Q8,X8,e9,Vi,zf,t9,r9,M_,vr,Co,Lf,Zs,o9,qf,a9,F_,ze,n9,Zi,s9,l9,Uf,i9,d9,Rf,c9,p9,H_,Tt,h9,Mf,m9,f9,Yi,u9,v9,j_,No,Ji,Ff,_9,g9,y9,Ki,Hf,b9,w9,G_,Le,E9,Qi,$9,T9,jf,k9,P9,Gf,D9,A9,W_,ee,x9,Xi,O9,S9,Wf,C9,N9,Bf,I9,z9,Vf,L9,q9,ed,U9,R9,B_,td,M9,V_,Ys,Z_,rd,F9,Y_,Js,J_,od,H9,K_,Ks,Q_,ad,j9,X_,nd,G9,eg,Qs,tg,Io,W9,Zf,B9,V9,rg,_r,zo,Yf,Xs,Z9,Jf,Y9,og,pe,J9,sd,K9,Q9,Kf,X9,ek,Qf,tk,rk,Xf,ok,ak,ag,kt,nk,el,sk,lk,eu,ik,dk,ng,gr,Lo,tu,tl,ck,ru,pk,sg,qo,hk,ld,mk,fk,lg,qe,uk,rl,vk,_k,ol,gk,yk,al,bk,wk,ig,id,Ek,dg,dd,cg,yr,Uo,ou,nl,$k,au,Tk,pg,cd,kk,hg,Pt,Pk,sl,Dk,Ak,ll,xk,Ok,mg,pd,Sk,fg,il,ug,hd,Ck,vg,Dt,Nk,nu,Ik,zk,su,Lk,qk,_g,br,Ro,lu,dl,Uk,iu,Rk,gg,md,Mk,yg,Ue,Fk,du,Hk,jk,cu,Gk,Wk,pu,Bk,Vk,bg,At,Zk,hu,Yk,Jk,mu,Kk,Qk,wg,cl,Eg,Mo,Xk,pl,eP,tP,$g,wr,Fo,fu,hl,rP,uu,oP,Tg,fd,aP,kg,ml,Pg,xt,nP,vu,sP,lP,_u,iP,dP,Dg,ud,cP,Ag,fl,xg,vd,pP,Og,Ho,hP,gu,mP,fP,Sg,et,yu,uP,vP,bu,_P,gP,wu,yP,bP,Cg,_d,wP,Ng,ul,Ig,gd,EP,zg,Re,$P,Eu,TP,kP,$u,PP,DP,Tu,AP,xP,Lg,Er,jo,ku,vl,OP,Pu,SP,qg,Ot,CP,Du,NP,IP,Au,zP,LP,Ug,yd,qP,Rg,bd,UP,Mg,Go,RP,xu,MP,FP,Fg,_l,Hg,H,HP,Ou,jP,GP,Su,WP,BP,Cu,VP,ZP,Nu,YP,JP,Iu,KP,QP,zu,XP,eD,jg,wd,tD,Gg,$r,Wo,Lu,gl,rD,qu,oD,Wg,Me,aD,yl,nD,sD,Ed,lD,iD,bl,dD,cD,Bg,Fe,Uu,pD,hD,Ru,mD,fD,Mu,uD,vD,Fu,_D,Vg,$d,gD,Zg,wl,Hu,yD,bD,Yg,Td,wD,Jg,El,Kg,St,ED,ju,$D,TD,Gu,kD,PD,Qg,$l,Xg,Ct,DD,Wu,AD,xD,Tl,OD,SD,e1,Bo,CD,kd,ND,ID,t1,Pd,zD,r1,kl,Bu,LD,qD,o1,Pl,a1,Dd,UD,n1,Dl,s1,Al,Vu,RD,MD,l1,xl,i1,Ad,FD,d1,Ol,c1,xd,HD,p1,Vo,jD,Sl,GD,WD,h1,Cl,Zu,BD,VD,m1,Nt,ZD,Yu,YD,JD,Ju,KD,QD,f1,Zo,XD,Ku,eA,tA,u1,Nl,v1,Od,rA,_1,He,Qu,oA,aA,Xu,nA,sA,Il,lA,ev,iA,dA,cA,zl,pA,tv,hA,mA,g1,Ll,tt,fA,rv,uA,vA,ov,_A,gA,av,yA,bA,y1,Yo,wA,nv,EA,$A,b1,ql,w1,Tr,sv,TA,kA,lv,PA,DA,E1,It,AA,iv,xA,OA,dv,SA,CA,$1,Sd,NA,T1,he,cv,IA,zA,pv,LA,qA,Ul,UA,hv,RA,MA,FA,kr,HA,mv,jA,GA,fv,WA,BA,VA,uv,ZA,k1,Cd,YA,P1,Jo,Pr,JA,vv,KA,QA,_v,XA,ex,tx,ke,rx,gv,ox,ax,yv,nx,sx,bv,lx,ix,wv,dx,cx,D1,Dr,Ko,Ev,Rl,px,$v,hx,A1,Qo,mx,Nd,fx,ux,x1,Ar,Xo,Tv,Ml,vx,kv,_x,O1,ea,gx,Id,yx,bx,S1,xr,ta,Pv,Fl,wx,Dv,Ex,C1,ra,$x,zd,Tx,kx,N1,Or,oa,Av,Hl,Px,xv,Dx,I1,aa,Ax,Ld,xx,Ox,z1,Sr,na,Ov,jl,Sx,Sv,Cx,L1,sa,Nx,qd,Ix,zx,q1,Cr,la,Cv,Gl,Lx,Nv,qx,U1,ia,Ux,Ud,Rx,Mx,R1,Nr,da,Iv,Wl,Fx,zv,Hx,M1,ca,jx,Rd,Gx,Wx,F1,Ir,pa,Lv,Bl,Bx,qv,Vx,H1,ha,Zx,Md,Yx,Jx,j1,zr,ma,Uv,Vl,Kx,Rv,Qx,G1,fa,Xx,Fd,eO,tO,W1,Lr,ua,Mv,Zl,rO,Fv,oO,B1,va,aO,Hd,nO,sO,V1,qr,_a,Hv,Yl,lO,jv,iO,Z1,ga,dO,jd,cO,pO,Y1,Ur,ya,Gv,Jl,hO,Wv,mO,J1,ba,fO,Gd,uO,vO,K1,Rr,wa,Bv,Kl,_O,Vv,gO,Q1,Ea,yO,Wd,bO,wO,X1,Mr,$a,Zv,Ql,EO,Yv,$O,ey,Ta,TO,Bd,kO,PO,ty,Fr,ka,Jv,Xl,DO,Kv,AO,ry,Pa,xO,Vd,OO,SO,oy,Hr,Da,Qv,ei,CO,Xv,NO,ay,jr,Aa,e_,ti,IO,t_,zO,ny,xa,LO,Zd,qO,UO,sy,Gr,Oa,r_,ri,RO,o_,MO,ly,Sa,FO,Yd,HO,jO,iy,Wr,Ca,a_,oi,GO,n_,WO,dy,Na,BO,Jd,VO,ZO,cy,Br,Ia,s_,ai,YO,l_,JO,py,za,KO,Kd,QO,XO,hy,Vr,La,i_,ni,eS,d_,tS,my,qa,rS,Qd,oS,aS,fy,Zr,Ua,c_,si,nS,p_,sS,uy,Ra,lS,Xd,iS,dS,vy,Yr,Ma,h_,li,cS,m_,pS,_y,Fa,hS,ec,mS,fS,gy,Jr,Ha,f_,ii,uS,u_,vS,yy,ja,_S,tc,gS,yS,by;return R=new $({}),to=new Ww({props:{warning:"&lcub;true}",$$slots:{default:[zM]},$$scope:{ctx:Ve}}}),fn=new U({props:{code:`from torch import nn
from transformers import Trainer

class MultilabelTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        outputs = model(**inputs)
        logits = outputs.get('logits')
        loss_fct = nn.BCEWithLogitsLoss()
        loss = loss_fct(logits.view(-1, self.model.config.num_labels),
                        labels.float().view(-1, self.model.config.num_labels))
        return (loss, outputs) if return_outputs else loss,`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer

<span class="hljs-keyword">class</span> <span class="hljs-title class_">MultilabelTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&#x27;logits&#x27;</span>)
        loss_fct = nn.BCEWithLogitsLoss()
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels),
                        labels.<span class="hljs-built_in">float</span>().view(-<span class="hljs-number">1</span>, self.model.config.num_labels))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),un=new $({}),vn=new E({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L197",parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/v4.14.1/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.`,name:"model"}]}}),_n=new E({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L491",parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will instantiate a member of that class.`,name:"callback"}]}}),yn=new E({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1842"}}),wn=new E({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1906"}}),En=new E({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L801"}}),Tn=new E({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L790"}}),kn=new E({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L846",parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}]}}),Pn=new E({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2114",parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>,
columns not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the
<code>__len__</code> method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),An=new E({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2240"}}),xn=new E({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2556",parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Sn=new E({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L700",parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}]}}),Nn=new E({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L747",parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}]}}),zn=new E({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L625"}}),qn=new E({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1705",parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or
<code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the
<code>evaluate</code> method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction(str,",description:`<strong>direction(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should
pick <code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or
several metrics.`,name:"direction(str,"},{anchor:"transformers.Trainer.hyperparameter_search.backend(str",description:`<strong>backend(<code>str</code></strong> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.
kwargs &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For
more information see:</p>
<ul>
<li>the documentation of <a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"backend(str"}],returnDescription:`
<p>All the information about the best run.</p>
`,returnType:`
<p><code>transformers.trainer_utils.BestRun</code></p>
`}}),co=new Ww({props:{warning:!0,$$slots:{default:[LM]},$$scope:{ctx:Ve}}}),Un=new E({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2574"}}),Mn=new E({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1930"}}),Fn=new E({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1937"}}),jn=new E({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1796",parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}]}}),Wn=new E({props:{name:"log_metrics",anchor:"transformers.trainer_pt_utils.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_pt_utils.py#L858",parametersDescription:[{anchor:"transformers.trainer_pt_utils.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}]}}),Bn=new U({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB,`,highlighted:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB`}}),Yn=new E({props:{name:"metrics_format",anchor:"transformers.trainer_pt_utils.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_pt_utils.py#L832",parametersDescription:[{anchor:"transformers.trainer_pt_utils.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),Jn=new E({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L863"}}),Qn=new E({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L502",parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),ts=new E({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2183",parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}]}}),uo=new Ww({props:{$$slots:{default:[qM]},$$scope:{ctx:Ve}}}),ss=new E({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2737"}}),ls=new E({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2459",parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),is=new E({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L2688",parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>.`,name:"blocking"}],returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url
of the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),ds=new E({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L518",parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>.
In the first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}]}}),ps=new E({props:{name:"save_metrics",anchor:"transformers.trainer_pt_utils.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_pt_utils.py#L947",parametersDescription:[{anchor:"transformers.trainer_pt_utils.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.trainer_pt_utils.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}]}}),fs=new E({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1949"}}),vs=new E({props:{name:"save_state",anchor:"transformers.trainer_pt_utils.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_pt_utils.py#L985"}}),_s=new E({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1019",parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of
<a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a <code>bool</code> and equals <em>True</em>, load the last checkpoint in
<em>args.output_dir</em> as saved by a previous instance of <a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present,
training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}]}}),gs=new E({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer.py#L1857",parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),ys=new $({}),bs=new E({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_seq2seq.py#L31",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>,
columns not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the
<code>__len__</code> method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Es=new E({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/trainer_seq2seq.py#L72",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}]}}),bo=new Ww({props:{$$slots:{default:[UM]},$$scope:{ctx:Ve}}}),Ds=new $({}),As=new E({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L73",parametersDescription:[{anchor:"transformers.TrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.TrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if
<code>output_dir</code> points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.TrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.TrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if
<code>evaluation_strategy</code> is different from <code>&quot;no&quot;</code>. This argument is not directly used by
<a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_eval"},{anchor:"transformers.TrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by
<a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_predict"},{anchor:"transformers.TrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.14.1/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.TrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.TrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.TrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.TrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.`,name:"gradient_accumulation_steps"}]}}),Ss=new E({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1154"}}),Ns=new E({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1239"}}),Is=new E({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1186",parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0
of node rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}]}}),zs=new E({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1248"}}),qs=new E({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1263"}}),Us=new E({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args.py#L1269"}}),Rs=new $({}),Ms=new E({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/v4.14.1/src/transformers/training_args_seq2seq.py#L28",parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if
<code>output_dir</code> points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.Seq2SeqTrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if
<code>evaluation_strategy</code> is different from <code>&quot;no&quot;</code>. This argument is not directly used by
<a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by
<a href="/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See
the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example scripts</a> for more
details.`,name:"do_predict"},{anchor:"transformers.Seq2SeqTrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/v4.14.1/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <em>False</em>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.`,name:"gradient_accumulation_steps"}]}}),Vs=new $({}),Zs=new $({}),Ys=new U({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...),`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),Js=new U({props:{code:"my_app.py ... --log_level warning --log_level_replica error,",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),Ks=new U({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),Qs=new U({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),Xs=new $({}),tl=new $({}),nl=new $({}),il=new U({props:{code:`pip install fairscale
pip install deepspeed,`,highlighted:`pip install fairscale
pip install deepspeed`}}),dl=new $({}),cl=new U({props:{code:"which nvcc,",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),hl=new $({}),ml=new U({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0,`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),fl=new U({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),ul=new U({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),vl=new $({}),_l=new U({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++,`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),gl=new $({}),El=new U({props:{code:"pip install fairscale,",highlighted:"pip install fairscale"}}),$l=new U({props:{code:"pip install transformers[fairscale],",highlighted:"pip install transformers[fairscale]"}}),Pl=new U({props:{code:"pip install fairscale --no-build-isolation .,",highlighted:"pip install fairscale --no-build-isolation ."}}),Dl=new U({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl,`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),xl=new U({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation,`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),Ol=new U({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre,`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),Nl=new U({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),ql=new U({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),Rl=new $({}),Ml=new $({}),Fl=new $({}),Hl=new $({}),jl=new $({}),Gl=new $({}),Wl=new $({}),Bl=new $({}),Vl=new $({}),Zl=new $({}),Yl=new $({}),Jl=new $({}),Kl=new $({}),Ql=new $({}),Xl=new $({}),ei=new $({}),ti=new $({}),ri=new $({}),oi=new $({}),ai=new $({}),ni=new $({}),si=new $({}),li=new $({}),ii=new $({}),{c(){w=n("meta"),N=i(),T=n("h1"),P=n("a"),fe=n("span"),m(R.$$.fragment),M=i(),B=n("span"),ue=o("Trainer"),te=i(),F=n("p"),se=o("The "),le=n("a"),re=o("Trainer"),ie=o(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=n("a"),Ze=o("example scripts"),ve=o("."),S=i(),D=n("p"),rt=o("Before instantiating your "),oe=n("a"),ot=o("Trainer"),at=o(", create a "),_e=n("a"),dn=o("TrainingArguments"),cn=o(" to access all the points of customization during training."),Ye=i(),De=n("p"),pn=o("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ge=n("a"),hn=o("NVIDIA Apex"),mn=o(" and Native AMP for PyTorch."),J=i(),V=n("p"),mi=o("The "),ye=n("a"),Xr=o("Trainer"),fi=o(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Bt=i(),k=n("ul"),Z=n("li"),eo=n("strong"),ui=o("get_train_dataloader"),vi=o(" \u2014 Creates the training DataLoader."),_i=i(),gi=n("li"),Kc=n("strong"),Bw=o("get_eval_dataloader"),Vw=o(" \u2014 Creates the evaluation DataLoader."),Zw=i(),yi=n("li"),Qc=n("strong"),Yw=o("get_test_dataloader"),Jw=o(" \u2014 Creates the test DataLoader."),Kw=i(),bi=n("li"),Xc=n("strong"),Qw=o("log"),Xw=o(" \u2014 Logs information on the various objects watching training."),eE=i(),nt=n("li"),ep=n("strong"),tE=o("create_optimizer_and_scheduler"),rE=o(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),tp=n("code"),oE=o("create_optimizer"),aE=o(" and "),rp=n("code"),nE=o("create_scheduler"),sE=o(` methods
separately.`),lE=i(),wi=n("li"),op=n("strong"),iE=o("create_optimizer"),dE=o(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),cE=i(),Ei=n("li"),ap=n("strong"),pE=o("create_scheduler"),hE=o(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),mE=i(),$i=n("li"),np=n("strong"),fE=o("compute_loss"),uE=o(" - Computes the loss on a batch of training inputs."),vE=i(),Ti=n("li"),sp=n("strong"),_E=o("training_step"),gE=o(" \u2014 Performs a training step."),yE=i(),ki=n("li"),lp=n("strong"),bE=o("prediction_step"),wE=o(" \u2014 Performs an evaluation/test step."),EE=i(),Pi=n("li"),ip=n("strong"),$E=o("evaluate"),TE=o(" \u2014 Runs an evaluation loop and returns metrics."),kE=i(),Di=n("li"),dp=n("strong"),PE=o("predict"),DE=o(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),E_=i(),m(to.$$.fragment),$_=i(),ro=n("p"),AE=o("Here is an example of how to customize "),Ai=n("a"),xE=o("Trainer"),OE=o(" using a custom loss function for multi-label classification:"),T_=i(),m(fn.$$.fragment),k_=i(),st=n("p"),SE=o("Another way to customize the training loop behavior for the PyTorch "),xi=n("a"),CE=o("Trainer"),NE=o(" is to use "),Oi=n("a"),IE=o("callbacks"),zE=o(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),P_=i(),Vt=n("h2"),oo=n("a"),cp=n("span"),m(un.$$.fragment),LE=i(),pp=n("span"),qE=o("Trainer"),D_=i(),y=n("div"),m(vn.$$.fragment),UE=i(),hp=n("p"),RE=o("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),ME=i(),mp=n("p"),FE=o("Important attributes:"),HE=i(),be=n("ul"),ao=n("li"),fp=n("strong"),jE=o("model"),GE=o(` \u2014 Always points to the core model. If using a transformers model, it will be a
`),Si=n("a"),WE=o("PreTrainedModel"),BE=o(" subclass."),VE=i(),K=n("li"),up=n("strong"),ZE=o("model_wrapped"),YE=o(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),vp=n("code"),JE=o("DeepSpeed"),KE=o(`,
the inner model is wrapped in `),_p=n("code"),QE=o("DeepSpeed"),XE=o(" and then again in "),gp=n("code"),e2=o("torch.nn.DistributedDataParallel"),t2=o(`. If the
inner model hasn\u2019t been wrapped, then `),yp=n("code"),r2=o("self.model_wrapped"),o2=o(" is the same as "),bp=n("code"),a2=o("self.model"),n2=o("."),s2=i(),Ci=n("li"),wp=n("strong"),l2=o("is_model_parallel"),i2=o(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),d2=i(),Ae=n("li"),Ep=n("strong"),c2=o("place_model_on_device"),p2=o(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),$p=n("code"),h2=o("False"),m2=o(` if model parallel or deepspeed is used, or if the default
`),Tp=n("code"),f2=o("TrainingArguments.place_model_on_device"),u2=o(" is overridden to return "),kp=n("code"),v2=o("False"),_2=o(" ."),g2=i(),xe=n("li"),Pp=n("strong"),y2=o("is_in_train"),b2=o(" \u2014 Whether or not a model is currently running "),Dp=n("code"),w2=o("train"),E2=o(" (e.g. when "),Ap=n("code"),$2=o("evaluate"),T2=o(` is called
while in `),xp=n("code"),k2=o("train"),P2=o(")"),D2=i(),no=n("div"),m(_n.$$.fragment),A2=i(),gn=n("p"),x2=o("Add a callback to the current list of "),Op=n("code"),O2=o("TrainerCallback"),S2=o("."),C2=i(),so=n("div"),m(yn.$$.fragment),N2=i(),bn=n("p"),I2=o("A helper wrapper that creates an appropriate context manager for "),Sp=n("code"),z2=o("autocast"),L2=o(` while feeding it the desired
arguments, depending on the situation.`),q2=i(),lt=n("div"),m(wn.$$.fragment),U2=i(),Cp=n("p"),R2=o("How the loss is computed by Trainer. By default, all models return the loss in the first element."),M2=i(),Np=n("p"),F2=o("Subclass and override for custom behavior."),H2=i(),it=n("div"),m(En.$$.fragment),j2=i(),Ip=n("p"),G2=o("Setup the optimizer."),W2=i(),$n=n("p"),B2=o(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),zp=n("code"),V2=o("optimizers"),Z2=o(", or subclass and override this method in a subclass."),Y2=i(),dt=n("div"),m(Tn.$$.fragment),J2=i(),Lp=n("p"),K2=o("Setup the optimizer and the learning rate scheduler."),Q2=i(),Je=n("p"),X2=o(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),qp=n("code"),e4=o("optimizers"),t4=o(", or subclass and override this method (or "),Up=n("code"),r4=o("create_optimizer"),o4=o(`
and/or `),Rp=n("code"),a4=o("create_scheduler"),n4=o(") in a subclass."),s4=i(),lo=n("div"),m(kn.$$.fragment),l4=i(),Mp=n("p"),i4=o(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),d4=i(),Oe=n("div"),m(Pn.$$.fragment),c4=i(),Fp=n("p"),p4=o("Run evaluation and returns metrics."),h4=i(),Dn=n("p"),m4=o(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Hp=n("code"),f4=o("compute_metrics"),u4=o(" argument)."),v4=i(),jp=n("p"),_4=o("You can also subclass and override this method to inject custom behavior."),g4=i(),ct=n("div"),m(An.$$.fragment),y4=i(),Zt=n("p"),b4=o("Prediction/evaluation loop, shared by "),Gp=n("code"),w4=o("Trainer.evaluate()"),E4=o(" and "),Wp=n("code"),$4=o("Trainer.predict()"),T4=o("."),k4=i(),Bp=n("p"),P4=o("Works both with or without labels."),D4=i(),io=n("div"),m(xn.$$.fragment),A4=i(),On=n("p"),x4=o("For models that inherit from "),Ni=n("a"),O4=o("PreTrainedModel"),S4=o(`, uses that method to compute the number of
floating point operations for every backward + forward pass. If using another model, either implement such a
method in the model or subclass and override this method.`),C4=i(),pt=n("div"),m(Sn.$$.fragment),N4=i(),Cn=n("p"),I4=o("Returns the evaluation "),Vp=n("code"),z4=o("DataLoader"),L4=o("."),q4=i(),Zp=n("p"),U4=o("Subclass and override this method if you want to inject some custom behavior."),R4=i(),ht=n("div"),m(Nn.$$.fragment),M4=i(),In=n("p"),F4=o("Returns the test "),Yp=n("code"),H4=o("DataLoader"),j4=o("."),G4=i(),Jp=n("p"),W4=o("Subclass and override this method if you want to inject some custom behavior."),B4=i(),Se=n("div"),m(zn.$$.fragment),V4=i(),Ln=n("p"),Z4=o("Returns the training "),Kp=n("code"),Y4=o("DataLoader"),J4=o("."),K4=i(),Yt=n("p"),Q4=o("Will use no sampler if "),Qp=n("code"),X4=o("self.train_dataset"),e0=o(" does not implement "),Xp=n("code"),t0=o("__len__"),r0=o(`, a random sampler (adapted
to distributed training if necessary) otherwise.`),o0=i(),eh=n("p"),a0=o("Subclass and override this method if you want to inject some custom behavior."),n0=i(),mt=n("div"),m(qn.$$.fragment),s0=i(),we=n("p"),l0=o("Launch an hyperparameter search using "),th=n("code"),i0=o("optuna"),d0=o(" or "),rh=n("code"),c0=o("Ray Tune"),p0=o(" or "),oh=n("code"),h0=o("SigOpt"),m0=o(`. The optimized quantity is
determined by `),ah=n("code"),f0=o("compute_objective"),u0=o(`, which defaults to a function returning the evaluation loss when no
metric is provided, the sum of all metrics otherwise.`),v0=i(),m(co.$$.fragment),_0=i(),po=n("div"),m(Un.$$.fragment),g0=i(),Rn=n("p"),y0=o("Initializes a git repo in "),nh=n("code"),b0=o("self.args.hub_model_id"),w0=o("."),E0=i(),ho=n("div"),m(Mn.$$.fragment),$0=i(),sh=n("p"),T0=o(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),k0=i(),mo=n("div"),m(Fn.$$.fragment),P0=i(),Hn=n("p"),D0=o(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),lh=n("code"),A0=o("True"),x0=o(" for one process)."),O0=i(),ft=n("div"),m(jn.$$.fragment),S0=i(),Gn=n("p"),C0=o("Log "),ih=n("code"),N0=o("logs"),I0=o(" on the various objects watching training."),z0=i(),dh=n("p"),L0=o("Subclass and override this method to inject custom behavior."),q0=i(),I=n("div"),m(Wn.$$.fragment),U0=i(),ch=n("p"),R0=o("Log metrics in a specially formatted way"),M0=i(),ph=n("p"),F0=o("Under distributed environment this is done only for a process with rank 0."),H0=i(),hh=n("p"),j0=o("Notes on memory reports:"),G0=i(),Jt=n("p"),W0=o("In order to get memory usage report you need to install "),mh=n("code"),B0=o("psutil"),V0=o(". You can do that with "),fh=n("code"),Z0=o("pip install psutil"),Y0=o("."),J0=i(),uh=n("p"),K0=o("Now when this method is run, you will see a report that will include: :"),Q0=i(),m(Bn.$$.fragment),X0=i(),vh=n("p"),_h=n("strong"),e$=o("Understanding the reports:"),t$=i(),Ke=n("ul"),gh=n("li"),Ee=n("p"),r$=o("the first segment, e.g., "),yh=n("code"),o$=o("train__"),a$=o(", tells you which stage the metrics are for. Reports starting with "),bh=n("code"),n$=o("init_"),s$=o(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),wh=n("code"),l$=o("__init__"),i$=o(" will be reported along with the "),Eh=n("code"),d$=o("eval_"),c$=o(" metrics."),p$=i(),$h=n("li"),Kt=n("p"),h$=o("the third segment, is either "),Th=n("code"),m$=o("cpu"),f$=o(" or "),kh=n("code"),u$=o("gpu"),v$=o(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),_$=i(),Ph=n("li"),Ii=n("p"),Dh=n("code"),g$=o("*_alloc_delta"),y$=o(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),b$=i(),q=n("li"),ut=n("p"),Ah=n("code"),w$=o("*_peaked_delta"),E$=o(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),xh=n("code"),$$=o("alloc_delta"),T$=o(` +
`),Oh=n("code"),k$=o("peaked_delta"),P$=o(" and you know how much memory was needed to complete that stage."),D$=i(),Sh=n("p"),A$=o(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),x$=i(),Ch=n("p"),O$=o(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),S$=i(),Vn=n("p"),C$=o(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Nh=n("code"),N$=o("tracemalloc"),I$=o(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),z$=i(),Qe=n("p"),L$=o("The GPU allocated and peak memory reporting is done with "),Ih=n("code"),q$=o("torch.cuda.memory_allocated()"),U$=o(` and
`),zh=n("code"),R$=o("torch.cuda.max_memory_allocated()"),M$=o(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Lh=n("code"),F$=o("torch.cuda"),H$=o(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the
very first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),j$=i(),ae=n("p"),G$=o("Note that this tracker doesn\u2019t account for memory allocations outside of "),zi=n("a"),W$=o("Trainer"),B$=o(`\u2019s
`),qh=n("code"),V$=o("__init__"),Z$=o(", "),Uh=n("code"),Y$=o("train"),J$=o(", "),Rh=n("code"),K$=o("evaluate"),Q$=o(" and "),Mh=n("code"),X$=o("predict"),e3=o(" calls."),t3=i(),A=n("p"),r3=o("Because "),Fh=n("code"),o3=o("evaluation"),a3=o(" calls may happen during "),Hh=n("code"),n3=o("train"),s3=o(`, we can\u2019t handle nested invocations because
`),jh=n("code"),l3=o("torch.cuda.max_memory_allocated"),i3=o(" is a single counter, so if it gets reset by a nested eval call, "),Gh=n("code"),d3=o("train"),c3=o(`\u2019s
tracker will report incorrect info. If this `),Zn=n("a"),p3=o("pytorch issue"),h3=o(`
gets resolved it will be possible to change this class to be re-entrant. Until then we will only track the outer
level of `),Wh=n("code"),m3=o("train"),f3=o(", "),Bh=n("code"),u3=o("evaluate"),v3=o(" and "),Vh=n("code"),_3=o("predict"),g3=o(" methods. Which means that if "),Zh=n("code"),y3=o("eval"),b3=o(" is called during "),Yh=n("code"),w3=o("train"),E3=o(`,
it\u2019s the latter that will account for its memory usage and that of the former.`),$3=i(),$e=n("p"),T3=o("This also means that if any other tool that is used along the "),Li=n("a"),k3=o("Trainer"),P3=o(` calls
`),Jh=n("code"),D3=o("torch.cuda.reset_peak_memory_stats"),A3=o(`, the gpu peak memory stats could be invalid. And the
`),qi=n("a"),x3=o("Trainer"),O3=o(` will disrupt the normal behavior of any such tools that rely on calling
`),Kh=n("code"),S3=o("torch.cuda.reset_peak_memory_stats"),C3=o(" themselves."),N3=i(),Qh=n("p"),I3=o("For best performance you may want to consider turning the memory profiling off for production runs."),z3=i(),fo=n("div"),m(Yn.$$.fragment),L3=i(),Xh=n("p"),q3=o("Reformat Trainer metrics values to a human-readable format"),U3=i(),vt=n("div"),m(Jn.$$.fragment),R3=i(),Kn=n("p"),M3=o("Helper to get number of samples in a "),em=n("code"),F3=o("DataLoader"),H3=o(" by accessing its dataset."),j3=i(),Ui=n("p"),G3=o("Will raise an exception if the underlying dataset does not implement method "),tm=n("code"),W3=o("__len__"),B3=i(),_t=n("div"),m(Qn.$$.fragment),V3=i(),Xn=n("p"),Z3=o("Remove a callback from the current list of "),rm=n("code"),Y3=o("TrainerCallback"),J3=o(" and returns it."),K3=i(),es=n("p"),Q3=o("If the callback is not found, returns "),om=n("code"),X3=o("None"),e5=o(" (and no error is raised)."),t5=i(),Q=n("div"),m(ts.$$.fragment),r5=i(),am=n("p"),o5=o("Run prediction and returns predictions and potential metrics."),a5=i(),rs=n("p"),n5=o(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),nm=n("code"),s5=o("evaluate()"),l5=o("."),i5=i(),m(uo.$$.fragment),d5=i(),os=n("p"),c5=o("Returns: "),sm=n("em"),p5=o("NamedTuple"),h5=o(" A namedtuple with the following keys:"),m5=i(),Qt=n("ul"),Xt=n("li"),f5=o("predictions ("),lm=n("code"),u5=o("np.ndarray"),v5=o("): The predictions on "),im=n("code"),_5=o("test_dataset"),g5=o("."),y5=i(),as=n("li"),b5=o("label"),ns=n("em"),w5=o("ids ("),dm=n("code"),E5=o("np.ndarray"),$5=o(", _optional"),T5=o("): The labels (if the dataset contained some)."),k5=i(),er=n("li"),P5=o("metrics ("),cm=n("code"),D5=o("Dict[str, float]"),A5=o(", "),pm=n("em"),x5=o("optional"),O5=o(`): The potential dictionary of metrics (if the dataset
contained labels).`),S5=i(),gt=n("div"),m(ss.$$.fragment),C5=i(),tr=n("p"),N5=o("Prediction/evaluation loop, shared by "),hm=n("code"),I5=o("Trainer.evaluate()"),z5=o(" and "),mm=n("code"),L5=o("Trainer.predict()"),q5=o("."),U5=i(),fm=n("p"),R5=o("Works both with or without labels."),M5=i(),yt=n("div"),m(ls.$$.fragment),F5=i(),rr=n("p"),H5=o("Perform an evaluation step on "),um=n("code"),j5=o("model"),G5=o(" using obj:"),vm=n("em"),W5=o("inputs"),B5=o("."),V5=i(),_m=n("p"),Z5=o("Subclass and override to inject custom behavior."),Y5=i(),vo=n("div"),m(is.$$.fragment),J5=i(),Xe=n("p"),K5=o("Upload "),gm=n("em"),Q5=o("self.model"),X5=o(" and "),ym=n("em"),e6=o("self.tokenizer"),t6=o(" to the \u{1F917} model hub on the repo "),bm=n("em"),r6=o("self.args.hub_model_id"),o6=o("."),a6=i(),_o=n("div"),m(ds.$$.fragment),n6=i(),cs=n("p"),s6=o("Remove a callback from the current list of "),wm=n("code"),l6=o("TrainerCallback"),i6=o("."),d6=i(),Ce=n("div"),m(ps.$$.fragment),c6=i(),hs=n("p"),p6=o("Save metrics into a json file for that split, e.g. "),Em=n("code"),h6=o("train_results.json"),m6=o("."),f6=i(),$m=n("p"),u6=o("Under distributed environment this is done only for a process with rank 0."),v6=i(),ms=n("p"),_6=o("To understand the metrics please read the docstring of "),Tm=n("code"),g6=o("log_metrics()"),y6=o(`. The only
difference is that raw unformatted numbers are saved in the current method.`),b6=i(),bt=n("div"),m(fs.$$.fragment),w6=i(),us=n("p"),E6=o("Will save the model, so you can reload it using "),km=n("code"),$6=o("from_pretrained()"),T6=o("."),k6=i(),Pm=n("p"),P6=o("Will only save from the main process."),D6=i(),wt=n("div"),m(vs.$$.fragment),A6=i(),Dm=n("p"),x6=o("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),O6=i(),Am=n("p"),S6=o("Under distributed environment this is done only for a process with rank 0."),C6=i(),go=n("div"),m(_s.$$.fragment),N6=i(),xm=n("p"),I6=o("Main training entry point."),z6=i(),Et=n("div"),m(gs.$$.fragment),L6=i(),Om=n("p"),q6=o("Perform a training step on a batch of inputs."),U6=i(),Sm=n("p"),R6=o("Subclass and override to inject custom behavior."),A_=i(),or=n("h2"),yo=n("a"),Cm=n("span"),m(ys.$$.fragment),M6=i(),Nm=n("span"),F6=o("Seq2SeqTrainer"),x_=i(),ar=n("div"),Ne=n("div"),m(bs.$$.fragment),H6=i(),Im=n("p"),j6=o("Run evaluation and returns metrics."),G6=i(),ws=n("p"),W6=o(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),zm=n("code"),B6=o("compute_metrics"),V6=o(" argument)."),Z6=i(),Lm=n("p"),Y6=o("You can also subclass and override this method to inject custom behavior."),J6=i(),X=n("div"),m(Es.$$.fragment),K6=i(),qm=n("p"),Q6=o("Run prediction and returns predictions and potential metrics."),X6=i(),$s=n("p"),e7=o(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Um=n("code"),t7=o("evaluate()"),r7=o("."),o7=i(),m(bo.$$.fragment),a7=i(),Ts=n("p"),n7=o("Returns: "),Rm=n("em"),s7=o("NamedTuple"),l7=o(" A namedtuple with the following keys:"),i7=i(),nr=n("ul"),sr=n("li"),d7=o("predictions ("),Mm=n("code"),c7=o("np.ndarray"),p7=o("): The predictions on "),Fm=n("code"),h7=o("test_dataset"),m7=o("."),f7=i(),ks=n("li"),u7=o("label"),Ps=n("em"),v7=o("ids ("),Hm=n("code"),_7=o("np.ndarray"),g7=o(", _optional"),y7=o("): The labels (if the dataset contained some)."),b7=i(),lr=n("li"),w7=o("metrics ("),jm=n("code"),E7=o("Dict[str, float]"),$7=o(", "),Gm=n("em"),T7=o("optional"),k7=o(`): The potential dictionary of metrics (if the dataset
contained labels).`),O_=i(),ir=n("h2"),wo=n("a"),Wm=n("span"),m(Ds.$$.fragment),P7=i(),Bm=n("span"),D7=o("TrainingArguments"),S_=i(),C=n("div"),m(As.$$.fragment),A7=i(),xs=n("p"),x7=o("TrainingArguments is the subset of the arguments we use in our example scripts "),Vm=n("strong"),O7=o(`which relate to the training loop
itself`),S7=o("."),C7=i(),dr=n("p"),N7=o("Using "),Ri=n("a"),I7=o("HfArgumentParser"),z7=o(" we can turn this class into "),Os=n("a"),L7=o("argparse"),q7=o(` arguments that can be specified on the command
line.`),U7=i(),de=n("div"),m(Ss.$$.fragment),R7=i(),Zm=n("p"),M7=o(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),F7=i(),cr=n("p"),H7=o("For the main process the log level defaults to "),Ym=n("code"),j7=o("logging.INFO"),G7=o(" unless overridden by "),Jm=n("code"),W7=o("log_level"),B7=o(" argument."),V7=i(),pr=n("p"),Z7=o("For the replica processes the log level defaults to "),Km=n("code"),Y7=o("logging.WARNING"),J7=o(` unless overridden by
`),Qm=n("code"),K7=o("log_level_replica"),Q7=o(" argument."),X7=i(),Cs=n("p"),eT=o(`The choice between the main and replica process settings is made according to the return value of
`),Xm=n("code"),tT=o("should_log"),rT=o("."),oT=i(),Eo=n("div"),m(Ns.$$.fragment),aT=i(),ef=n("p"),nT=o("Get number of steps used for a linear warmup."),sT=i(),$t=n("div"),m(Is.$$.fragment),lT=i(),tf=n("p"),iT=o(`A context manager for torch distributed environment where on needs to do something on the main process,
while blocking replicas, and when it\u2019s finished releasing the replicas.`),dT=i(),hr=n("p"),cT=o("One such use is for "),rf=n("code"),pT=o("datasets"),hT=o("\u2019s "),of=n("code"),mT=o("map"),fT=o(` feature which to be efficient should be run once on the main
process, which upon completion saves a cached version of results and which then automatically gets loaded
by the replicas.`),uT=i(),$o=n("div"),m(zs.$$.fragment),vT=i(),Ls=n("p"),_T=o("Serializes this instance while replace "),af=n("code"),gT=o("Enum"),yT=o(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),bT=i(),To=n("div"),m(qs.$$.fragment),wT=i(),nf=n("p"),ET=o("Serializes this instance to a JSON string."),$T=i(),ko=n("div"),m(Us.$$.fragment),TT=i(),sf=n("p"),kT=o("Sanitized serialization to use with TensorBoard\u2019s hparams"),C_=i(),mr=n("h2"),Po=n("a"),lf=n("span"),m(Rs.$$.fragment),PT=i(),df=n("span"),DT=o("Seq2SeqTrainingArguments"),N_=i(),ne=n("div"),m(Ms.$$.fragment),AT=i(),Fs=n("p"),xT=o("TrainingArguments is the subset of the arguments we use in our example scripts "),cf=n("strong"),OT=o(`which relate to the training loop
itself`),ST=o("."),CT=i(),fr=n("p"),NT=o("Using "),Mi=n("a"),IT=o("HfArgumentParser"),zT=o(" we can turn this class into "),Hs=n("a"),LT=o("argparse"),qT=o(` arguments that can be specified on the command
line.`),UT=i(),Te=n("p"),RT=o("sortish"),js=n("em"),MT=o("sampler ("),pf=n("code"),FT=o("bool"),HT=o(", _optional"),jT=o(", defaults to "),hf=n("code"),GT=o("False"),WT=o(`):
Whether to use a `),mf=n("em"),BT=o("sortish sampler"),VT=o(" or not. Only possible if the underlying datasets are "),ff=n("em"),ZT=o("Seq2SeqDataset"),YT=o(` for
now but will become generally available in the near future.`),JT=i(),x=n("p"),KT=o(`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict`),Gs=n("em"),QT=o("with_generate ("),uf=n("code"),XT=o("bool"),e8=o(", _optional"),t8=o(", defaults to "),vf=n("code"),r8=o("False"),o8=o(`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation`),Ws=n("em"),a8=o("max_length ("),_f=n("code"),n8=o("int"),s8=o(", _optional"),l8=o(`):
The `),gf=n("code"),i8=o("max_length"),d8=o(" to use on each evaluation loop when "),yf=n("code"),c8=o("predict_with_generate=True"),p8=o(`. Will default to
the `),bf=n("code"),h8=o("max_length"),m8=o(` value of the model configuration.
generation`),Bs=n("em"),f8=o("num_beams ("),wf=n("code"),u8=o("int"),v8=o(", _optional"),_8=o(`):
The `),Ef=n("code"),g8=o("num_beams"),y8=o(" to use on each evaluation loop when "),$f=n("code"),b8=o("predict_with_generate=True"),w8=o(`. Will default to the
`),Tf=n("code"),E8=o("num_beams"),$8=o(" value of the model configuration."),I_=i(),ur=n("h2"),Do=n("a"),kf=n("span"),m(Vs.$$.fragment),T8=i(),Pf=n("span"),k8=o("Checkpoints"),z_=i(),ce=n("p"),P8=o("By default, "),Fi=n("a"),D8=o("Trainer"),A8=o(" will save all checkpoints in the "),Df=n("code"),x8=o("output_dir"),O8=o(` you set in the
`),Hi=n("a"),S8=o("TrainingArguments"),C8=o(" you are using. Those will go in subfolder named "),Af=n("code"),N8=o("checkpoint-xxx"),I8=o(` with xxx
being the step at which the training was at.`),L_=i(),Ao=n("p"),z8=o("Resuming training from a checkpoint can be done when calling "),ji=n("a"),L8=o("Trainer.train()"),q8=o(" with either:"),q_=i(),xo=n("ul"),Gi=n("li"),xf=n("code"),U8=o("resume_from_checkpoint=True"),R8=o(" which will resume training from the latest checkpoint"),M8=i(),Wi=n("li"),Of=n("code"),F8=o("resume_from_checkpoint=checkpoint_dir"),H8=o(` which will resume training from the specific checkpoint in the directory
passed.`),U_=i(),Ie=n("p"),j8=o("In addition, you can easily save your checkpoints on the Model Hub when using "),Sf=n("code"),G8=o("push_to_hub=True"),W8=o(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Cf=n("code"),B8=o("hub-strategy"),V8=o(" value of your "),Bi=n("a"),Z8=o("TrainingArguments"),Y8=o(" to either:"),R_=i(),Oo=n("ul"),So=n("li"),Nf=n("code"),J8=o('"checkpoint"'),K8=o(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),If=n("code"),Q8=o('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),X8=o("."),e9=i(),Vi=n("li"),zf=n("code"),t9=o('"all_checkpoints"'),r9=o(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),M_=i(),vr=n("h2"),Co=n("a"),Lf=n("span"),m(Zs.$$.fragment),o9=i(),qf=n("span"),a9=o("Logging"),F_=i(),ze=n("p"),n9=o("By default "),Zi=n("a"),s9=o("Trainer"),l9=o(" will use "),Uf=n("code"),i9=o("logging.INFO"),d9=o(" for the main process and "),Rf=n("code"),c9=o("logging.WARNING"),p9=o(" for the replicas if any."),H_=i(),Tt=n("p"),h9=o("These defaults can be overridden to use any of the 5 "),Mf=n("code"),m9=o("logging"),f9=o(" levels with "),Yi=n("a"),u9=o("TrainingArguments"),v9=o(`\u2019s
arguments:`),j_=i(),No=n("ul"),Ji=n("li"),Ff=n("code"),_9=o("log_level"),g9=o(" - for the main process"),y9=i(),Ki=n("li"),Hf=n("code"),b9=o("log_level_replica"),w9=o(" - for the replicas"),G_=i(),Le=n("p"),E9=o("Further, if "),Qi=n("a"),$9=o("TrainingArguments"),T9=o("\u2019s "),jf=n("code"),k9=o("log_on_each_node"),P9=o(" is set to "),Gf=n("code"),D9=o("False"),A9=o(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),W_=i(),ee=n("p"),x9=o("Note that "),Xi=n("a"),O9=o("Trainer"),S9=o(" is going to set "),Wf=n("code"),C9=o("transformers"),N9=o(`\u2019s log level separately for each node in its
`),Bf=n("code"),I9=o("Trainer.__init__()"),z9=o(`. So you may want to set this sooner (see the next example) if you tap into other
`),Vf=n("code"),L9=o("transformers"),q9=o(" functionality before creating the "),ed=n("a"),U9=o("Trainer"),R9=o(" object."),B_=i(),td=n("p"),M9=o("Here is an example of how this can be used in an application:"),V_=i(),m(Ys.$$.fragment),Z_=i(),rd=n("p"),F9=o(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),Y_=i(),m(Js.$$.fragment),J_=i(),od=n("p"),H9=o(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),K_=i(),m(Ks.$$.fragment),Q_=i(),ad=n("p"),j9=o(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),X_=i(),nd=n("p"),G9=o("If you need your application to be as quiet as possible you could do:"),eg=i(),m(Qs.$$.fragment),tg=i(),Io=n("p"),W9=o("(add "),Zf=n("code"),B9=o("--log_on_each_node 0"),V9=o(" if on multi-node environment)"),rg=i(),_r=n("h2"),zo=n("a"),Yf=n("span"),m(Xs.$$.fragment),Z9=i(),Jf=n("span"),Y9=o("Randomness"),og=i(),pe=n("p"),J9=o("When resuming from a checkpoint generated by "),sd=n("a"),K9=o("Trainer"),Q9=o(` all efforts are made to restore the
`),Kf=n("em"),X9=o("python"),ek=o(", "),Qf=n("em"),tk=o("numpy"),rk=o(" and "),Xf=n("em"),ok=o("pytorch"),ak=o(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),ag=i(),kt=n("p"),nk=o(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),el=n("a"),sk=o("Controlling sources of randomness"),lk=o(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),eu=n("code"),ik=o("torch.backends.cudnn.deterministic"),dk=o(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),ng=i(),gr=n("h2"),Lo=n("a"),tu=n("span"),m(tl.$$.fragment),ck=i(),ru=n("span"),pk=o("Trainer Integrations"),sg=i(),qo=n("p"),hk=o("The "),ld=n("a"),mk=o("Trainer"),fk=o(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),lg=i(),qe=n("p"),uk=o("Currently it supports third party solutions, "),rl=n("a"),vk=o("DeepSpeed"),_k=o(" and "),ol=n("a"),gk=o("FairScale"),yk=o(", which implement parts of the paper "),al=n("a"),bk=o(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),wk=o("."),ig=i(),id=n("p"),Ek=o("This provided support is new and experimental as of this writing."),dg=i(),dd=n("a"),cg=i(),yr=n("h3"),Uo=n("a"),ou=n("span"),m(nl.$$.fragment),$k=i(),au=n("span"),Tk=o("CUDA Extension Installation Notes"),pg=i(),cd=n("p"),kk=o("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),hg=i(),Pt=n("p"),Pk=o("While all installation issues should be dealt with through the corresponding GitHub Issues of "),sl=n("a"),Dk=o("FairScale"),Ak=o(" and "),ll=n("a"),xk=o("Deepspeed"),Ok=o(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),mg=i(),pd=n("p"),Sk=o("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),fg=i(),m(il.$$.fragment),ug=i(),hd=n("p"),Ck=o("please, read the following notes first."),vg=i(),Dt=n("p"),Nk=o("In these notes we give examples for what to do when "),nu=n("code"),Ik=o("pytorch"),zk=o(" has been built with CUDA "),su=n("code"),Lk=o("10.2"),qk=o(`. If your situation is
different remember to adjust the version number to the one you are after.`),_g=i(),br=n("h4"),Ro=n("a"),lu=n("span"),m(dl.$$.fragment),Uk=i(),iu=n("span"),Rk=o("Possible problem #1"),gg=i(),md=n("p"),Mk=o(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),yg=i(),Ue=n("p"),Fk=o("For example, if you installed "),du=n("code"),Hk=o("pytorch"),jk=o(" with "),cu=n("code"),Gk=o("cudatoolkit==10.2"),Wk=o(` in the Python environment, you also need to have
CUDA `),pu=n("code"),Bk=o("10.2"),Vk=o(" installed system-wide."),bg=i(),At=n("p"),Zk=o("The exact location may vary from system to system, but "),hu=n("code"),Yk=o("/usr/local/cuda-10.2"),Jk=o(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),mu=n("code"),Kk=o("PATH"),Qk=o(` environment variable, one can find the
installation location by doing:`),wg=i(),m(cl.$$.fragment),Eg=i(),Mo=n("p"),Xk=o(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),pl=n("a"),eP=o("ubuntu cuda 10.2 install"),tP=o("."),$g=i(),wr=n("h4"),Fo=n("a"),fu=n("span"),m(hl.$$.fragment),rP=i(),uu=n("span"),oP=o("Possible problem #2"),Tg=i(),fd=n("p"),aP=o(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),kg=i(),m(ml.$$.fragment),Pg=i(),xt=n("p"),nP=o("Now, in this situation you need to make sure that your "),vu=n("code"),sP=o("PATH"),lP=o(" and "),_u=n("code"),iP=o("LD_LIBRARY_PATH"),dP=o(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Dg=i(),ud=n("p"),cP=o("First, you may look at their contents:"),Ag=i(),m(fl.$$.fragment),xg=i(),vd=n("p"),pP=o("so you get an idea of what is inside."),Og=i(),Ho=n("p"),hP=o("It\u2019s possible that "),gu=n("code"),mP=o("LD_LIBRARY_PATH"),fP=o(" is empty."),Sg=i(),et=n("p"),yu=n("code"),uP=o("PATH"),vP=o(" lists the locations of where executables can be found and "),bu=n("code"),_P=o("LD_LIBRARY_PATH"),gP=o(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),wu=n("code"),yP=o(":"),bP=o(` is used to separate multiple
entries.`),Cg=i(),_d=n("p"),wP=o(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),Ng=i(),m(ul.$$.fragment),Ig=i(),gd=n("p"),EP=o("Note that we aren\u2019t overwriting the existing values, but prepending instead."),zg=i(),Re=n("p"),$P=o(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Eu=n("code"),TP=o("lib64"),kP=o(" sub-directory is where the various CUDA "),$u=n("code"),PP=o(".so"),DP=o(" objects, like "),Tu=n("code"),AP=o("libcudart.so"),xP=o(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),Lg=i(),Er=n("h4"),jo=n("a"),ku=n("span"),m(vl.$$.fragment),OP=i(),Pu=n("span"),SP=o("Possible problem #3"),qg=i(),Ot=n("p"),CP=o("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Du=n("code"),NP=o("gcc-9"),IP=o(` but it wants
`),Au=n("code"),zP=o("gcc-7"),LP=o("."),Ug=i(),yd=n("p"),qP=o("There are various ways to go about it."),Rg=i(),bd=n("p"),UP=o("If you can install the latest CUDA toolkit it typically should support the newer compiler."),Mg=i(),Go=n("p"),RP=o(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),xu=n("code"),MP=o("gcc-7"),FP=o(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Fg=i(),m(_l.$$.fragment),Hg=i(),H=n("p"),HP=o("Here, we are making a symlink to "),Ou=n("code"),jP=o("gcc-7"),GP=o(" from "),Su=n("code"),WP=o("/usr/local/cuda-10.2/bin/gcc"),BP=o(` and since
`),Cu=n("code"),VP=o("/usr/local/cuda-10.2/bin/"),ZP=o(" should be in the "),Nu=n("code"),YP=o("PATH"),JP=o(` environment variable (see the previous problem\u2019s solution), it
should find `),Iu=n("code"),KP=o("gcc-7"),QP=o(" (and "),zu=n("code"),XP=o("g++7"),eD=o(") and then the build will succeed."),jg=i(),wd=n("p"),tD=o("As always make sure to edit the paths in the example to match your situation."),Gg=i(),$r=n("h3"),Wo=n("a"),Lu=n("span"),m(gl.$$.fragment),rD=i(),qu=n("span"),oD=o("FairScale"),Wg=i(),Me=n("p"),aD=o("By integrating "),yl=n("a"),nD=o("FairScale"),sD=o(" the "),Ed=n("a"),lD=o("Trainer"),iD=o(`
provides support for the following features from `),bl=n("a"),dD=o("the ZeRO paper"),cD=o(":"),Bg=i(),Fe=n("ol"),Uu=n("li"),pD=o("Optimizer State Sharding"),hD=i(),Ru=n("li"),mD=o("Gradient Sharding"),fD=i(),Mu=n("li"),uD=o("Model Parameters Sharding (new and very experimental)"),vD=i(),Fu=n("li"),_D=o("CPU offload (new and very experimental)"),Vg=i(),$d=n("p"),gD=o("You will need at least two GPUs to use this feature."),Zg=i(),wl=n("p"),Hu=n("strong"),yD=o("Installation"),bD=o(":"),Yg=i(),Td=n("p"),wD=o("Install the library via pypi:"),Jg=i(),m(El.$$.fragment),Kg=i(),St=n("p"),ED=o("or via "),ju=n("code"),$D=o("transformers"),TD=o("\u2019 "),Gu=n("code"),kD=o("extras"),PD=o(":"),Qg=i(),m($l.$$.fragment),Xg=i(),Ct=n("p"),DD=o("(available starting from "),Wu=n("code"),AD=o("transformers==4.6.0"),xD=o(") or find more details on "),Tl=n("a"),OD=o("the FairScale\u2019s GitHub page"),SD=o("."),e1=i(),Bo=n("p"),CD=o("If you\u2019re still struggling with the build, first make sure to read "),kd=n("a"),ND=o("CUDA Extension Installation Notes"),ID=o("."),t1=i(),Pd=n("p"),zD=o("If it\u2019s still not resolved the build issue, here are a few more ideas."),r1=i(),kl=n("p"),Bu=n("code"),LD=o("fairscale"),qD=o(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),o1=i(),m(Pl.$$.fragment),a1=i(),Dd=n("p"),UD=o("or:"),n1=i(),m(Dl.$$.fragment),s1=i(),Al=n("p"),Vu=n("code"),RD=o("fairscale"),MD=o(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),l1=i(),m(xl.$$.fragment),i1=i(),Ad=n("p"),FD=o("or:"),d1=i(),m(Ol.$$.fragment),c1=i(),xd=n("p"),HD=o("Of course, adjust the urls to match the cuda version you use."),p1=i(),Vo=n("p"),jD=o(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Sl=n("a"),GD=o("FairScale"),WD=o("."),h1=i(),Cl=n("p"),Zu=n("strong"),BD=o("Usage"),VD=o(":"),m1=i(),Nt=n("p"),ZD=o("To use the first version of Sharded data-parallelism, add "),Yu=n("code"),YD=o("--sharded_ddp simple"),JD=o(` to the command line arguments, and
make sure you have added the distributed launcher `),Ju=n("code"),KD=o("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),QD=o(" if you haven\u2019t been using it already."),f1=i(),Zo=n("p"),XD=o("For example here is how you could use it for "),Ku=n("code"),eA=o("run_translation.py"),tA=o(" with 2 GPUs:"),u1=i(),m(Nl.$$.fragment),v1=i(),Od=n("p"),rA=o("Notes:"),_1=i(),He=n("ul"),Qu=n("li"),oA=o("This feature requires distributed training (so multiple GPUs)."),aA=i(),Xu=n("li"),nA=o("It is not implemented for TPUs."),sA=i(),Il=n("li"),lA=o("It works with "),ev=n("code"),iA=o("--fp16"),dA=o(" too, to make things even faster."),cA=i(),zl=n("li"),pA=o("One of the main benefits of enabling "),tv=n("code"),hA=o("--sharded_ddp simple"),mA=o(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),g1=i(),Ll=n("ol"),tt=n("li"),fA=o("To use the second version of Sharded data-parallelism, add "),rv=n("code"),uA=o("--sharded_ddp zero_dp_2"),vA=o(" or "),ov=n("code"),_A=o("--sharded_ddp zero_dp_3"),gA=o(" to the command line arguments, and make sure you have added the distributed launcher "),av=n("code"),yA=o("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),bA=o(" if you haven\u2019t been using it already."),y1=i(),Yo=n("p"),wA=o("For example here is how you could use it for "),nv=n("code"),EA=o("run_translation.py"),$A=o(" with 2 GPUs:"),b1=i(),m(ql.$$.fragment),w1=i(),Tr=n("p"),sv=n("code"),TA=o("zero_dp_2"),kA=o(" is an optimized version of the simple wrapper, while "),lv=n("code"),PA=o("zero_dp_3"),DA=o(` fully shards model weights,
gradients and optimizer states.`),E1=i(),It=n("p"),AA=o("Both are compatible with adding "),iv=n("code"),xA=o("cpu_offload"),OA=o(" to enable ZeRO-offload (activate it like this: "),dv=n("code"),SA=o('--sharded_ddp "zero_dp_2 cpu_offload"'),CA=o(")."),$1=i(),Sd=n("p"),NA=o("Notes:"),T1=i(),he=n("ul"),cv=n("li"),IA=o("This feature requires distributed training (so multiple GPUs)."),zA=i(),pv=n("li"),LA=o("It is not implemented for TPUs."),qA=i(),Ul=n("li"),UA=o("It works with "),hv=n("code"),RA=o("--fp16"),MA=o(" too, to make things even faster."),FA=i(),kr=n("li"),HA=o("The "),mv=n("code"),jA=o("cpu_offload"),GA=o(" additional option requires "),fv=n("code"),WA=o("--fp16"),BA=o("."),VA=i(),uv=n("li"),ZA=o(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),k1=i(),Cd=n("p"),YA=o("Known caveats:"),P1=i(),Jo=n("ul"),Pr=n("li"),JA=o("This feature is incompatible with "),vv=n("code"),KA=o("--predict_with_generate"),QA=o(" in the "),_v=n("em"),XA=o("run_translation.py"),ex=o(" script."),tx=i(),ke=n("li"),rx=o("Using "),gv=n("code"),ox=o("--sharded_ddp zero_dp_3"),ax=o(` requires wrapping each layer of the model in the special container
`),yv=n("code"),nx=o("FullyShardedDataParallelism"),sx=o(" of fairscale. It should be used with the option "),bv=n("code"),lx=o("auto_wrap"),ix=o(` if you are not
doing this yourself: `),wv=n("code"),dx=o('--sharded_ddp "zero_dp_3 auto_wrap"'),cx=o("."),D1=i(),Dr=n("h3"),Ko=n("a"),Ev=n("span"),m(Rl.$$.fragment),px=i(),$v=n("span"),hx=o("DeepSpeed"),A1=i(),Qo=n("p"),mx=o("Moved to "),Nd=n("a"),fx=o("Trainer DeepSpeed integration"),ux=o("."),x1=i(),Ar=n("h4"),Xo=n("a"),Tv=n("span"),m(Ml.$$.fragment),vx=i(),kv=n("span"),_x=o("Installation"),O1=i(),ea=n("p"),gx=o("Moved to "),Id=n("a"),yx=o("Installation"),bx=o("."),S1=i(),xr=n("h4"),ta=n("a"),Pv=n("span"),m(Fl.$$.fragment),wx=i(),Dv=n("span"),Ex=o("Deployment with multiple GPUs"),C1=i(),ra=n("p"),$x=o("Moved to "),zd=n("a"),Tx=o("Deployment with multiple GPUs"),kx=o("."),N1=i(),Or=n("h4"),oa=n("a"),Av=n("span"),m(Hl.$$.fragment),Px=i(),xv=n("span"),Dx=o("Deployment with one GPU"),I1=i(),aa=n("p"),Ax=o("Moved to "),Ld=n("a"),xx=o("Deployment with one GPU"),Ox=o("."),z1=i(),Sr=n("h4"),na=n("a"),Ov=n("span"),m(jl.$$.fragment),Sx=i(),Sv=n("span"),Cx=o("Deployment in Notebooks"),L1=i(),sa=n("p"),Nx=o("Moved to "),qd=n("a"),Ix=o("Deployment in Notebooks"),zx=o("."),q1=i(),Cr=n("h4"),la=n("a"),Cv=n("span"),m(Gl.$$.fragment),Lx=i(),Nv=n("span"),qx=o("Configuration"),U1=i(),ia=n("p"),Ux=o("Moved to "),Ud=n("a"),Rx=o("Configuration"),Mx=o("."),R1=i(),Nr=n("h4"),da=n("a"),Iv=n("span"),m(Wl.$$.fragment),Fx=i(),zv=n("span"),Hx=o("Passing Configuration"),M1=i(),ca=n("p"),jx=o("Moved to "),Rd=n("a"),Gx=o("Passing Configuration"),Wx=o("."),F1=i(),Ir=n("h4"),pa=n("a"),Lv=n("span"),m(Bl.$$.fragment),Bx=i(),qv=n("span"),Vx=o("Shared Configuration"),H1=i(),ha=n("p"),Zx=o("Moved to "),Md=n("a"),Yx=o("Shared Configuration"),Jx=o("."),j1=i(),zr=n("h4"),ma=n("a"),Uv=n("span"),m(Vl.$$.fragment),Kx=i(),Rv=n("span"),Qx=o("ZeRO"),G1=i(),fa=n("p"),Xx=o("Moved to "),Fd=n("a"),eO=o("ZeRO"),tO=o("."),W1=i(),Lr=n("h5"),ua=n("a"),Mv=n("span"),m(Zl.$$.fragment),rO=i(),Fv=n("span"),oO=o("ZeRO-2 Config"),B1=i(),va=n("p"),aO=o("Moved to "),Hd=n("a"),nO=o("ZeRO-2 Config"),sO=o("."),V1=i(),qr=n("h5"),_a=n("a"),Hv=n("span"),m(Yl.$$.fragment),lO=i(),jv=n("span"),iO=o("ZeRO-3 Config"),Z1=i(),ga=n("p"),dO=o("Moved to "),jd=n("a"),cO=o("ZeRO-3 Config"),pO=o("."),Y1=i(),Ur=n("h4"),ya=n("a"),Gv=n("span"),m(Jl.$$.fragment),hO=i(),Wv=n("span"),mO=o("NVMe Support"),J1=i(),ba=n("p"),fO=o("Moved to "),Gd=n("a"),uO=o("NVMe Support"),vO=o("."),K1=i(),Rr=n("h5"),wa=n("a"),Bv=n("span"),m(Kl.$$.fragment),_O=i(),Vv=n("span"),gO=o("ZeRO-2 vs ZeRO-3 Performance"),Q1=i(),Ea=n("p"),yO=o("Moved to "),Wd=n("a"),bO=o("ZeRO-2 vs ZeRO-3 Performance"),wO=o("."),X1=i(),Mr=n("h5"),$a=n("a"),Zv=n("span"),m(Ql.$$.fragment),EO=i(),Yv=n("span"),$O=o("ZeRO-2 Example"),ey=i(),Ta=n("p"),TO=o("Moved to "),Bd=n("a"),kO=o("ZeRO-2 Example"),PO=o("."),ty=i(),Fr=n("h5"),ka=n("a"),Jv=n("span"),m(Xl.$$.fragment),DO=i(),Kv=n("span"),AO=o("ZeRO-3 Example"),ry=i(),Pa=n("p"),xO=o("Moved to "),Vd=n("a"),OO=o("ZeRO-3 Example"),SO=o("."),oy=i(),Hr=n("h4"),Da=n("a"),Qv=n("span"),m(ei.$$.fragment),CO=i(),Xv=n("span"),NO=o("Optimizer and Scheduler"),ay=i(),jr=n("h5"),Aa=n("a"),e_=n("span"),m(ti.$$.fragment),IO=i(),t_=n("span"),zO=o("Optimizer"),ny=i(),xa=n("p"),LO=o("Moved to "),Zd=n("a"),qO=o("Optimizer"),UO=o("."),sy=i(),Gr=n("h5"),Oa=n("a"),r_=n("span"),m(ri.$$.fragment),RO=i(),o_=n("span"),MO=o("Scheduler"),ly=i(),Sa=n("p"),FO=o("Moved to "),Yd=n("a"),HO=o("Scheduler"),jO=o("."),iy=i(),Wr=n("h4"),Ca=n("a"),a_=n("span"),m(oi.$$.fragment),GO=i(),n_=n("span"),WO=o("fp32 Precision"),dy=i(),Na=n("p"),BO=o("Moved to "),Jd=n("a"),VO=o("fp32 Precision"),ZO=o("."),cy=i(),Br=n("h4"),Ia=n("a"),s_=n("span"),m(ai.$$.fragment),YO=i(),l_=n("span"),JO=o("Automatic Mixed Precision"),py=i(),za=n("p"),KO=o("Moved to "),Kd=n("a"),QO=o("Automatic Mixed Precision"),XO=o("."),hy=i(),Vr=n("h4"),La=n("a"),i_=n("span"),m(ni.$$.fragment),eS=i(),d_=n("span"),tS=o("Batch Size"),my=i(),qa=n("p"),rS=o("Moved to "),Qd=n("a"),oS=o("Batch Size"),aS=o("."),fy=i(),Zr=n("h4"),Ua=n("a"),c_=n("span"),m(si.$$.fragment),nS=i(),p_=n("span"),sS=o("Gradient Accumulation"),uy=i(),Ra=n("p"),lS=o("Moved to "),Xd=n("a"),iS=o("Gradient Accumulation"),dS=o("."),vy=i(),Yr=n("h4"),Ma=n("a"),h_=n("span"),m(li.$$.fragment),cS=i(),m_=n("span"),pS=o("Gradient Clipping"),_y=i(),Fa=n("p"),hS=o("Moved to "),ec=n("a"),mS=o("Gradient Clipping"),fS=o("."),gy=i(),Jr=n("h4"),Ha=n("a"),f_=n("span"),m(ii.$$.fragment),uS=i(),u_=n("span"),vS=o("Getting The Model Weights Out"),yy=i(),ja=n("p"),_S=o("Moved to "),tc=n("a"),gS=o("Getting The Model Weights Out"),yS=o("."),this.h()},l(t){const c=IM('[data-svelte="svelte-1phssyn"]',document.head);w=s(c,"META",{name:!0,content:!0}),c.forEach(r),N=d(t),T=s(t,"H1",{class:!0});var di=l(T);P=s(di,"A",{id:!0,class:!0,href:!0});var v_=l(P);fe=s(v_,"SPAN",{});var __=l(fe);f(R.$$.fragment,__),__.forEach(r),v_.forEach(r),M=d(di),B=s(di,"SPAN",{});var g_=l(B);ue=a(g_,"Trainer"),g_.forEach(r),di.forEach(r),te=d(t),F=s(t,"P",{});var rc=l(F);se=a(rc,"The "),le=s(rc,"A",{href:!0});var jS=l(le);re=a(jS,"Trainer"),jS.forEach(r),ie=a(rc," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=s(rc,"A",{href:!0});var GS=l(Y);Ze=a(GS,"example scripts"),GS.forEach(r),ve=a(rc,"."),rc.forEach(r),S=d(t),D=s(t,"P",{});var oc=l(D);rt=a(oc,"Before instantiating your "),oe=s(oc,"A",{href:!0});var WS=l(oe);ot=a(WS,"Trainer"),WS.forEach(r),at=a(oc,", create a "),_e=s(oc,"A",{href:!0});var BS=l(_e);dn=a(BS,"TrainingArguments"),BS.forEach(r),cn=a(oc," to access all the points of customization during training."),oc.forEach(r),Ye=d(t),De=s(t,"P",{});var wy=l(De);pn=a(wy,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ge=s(wy,"A",{href:!0,rel:!0});var VS=l(ge);hn=a(VS,"NVIDIA Apex"),VS.forEach(r),mn=a(wy," and Native AMP for PyTorch."),wy.forEach(r),J=d(t),V=s(t,"P",{});var Ey=l(V);mi=a(Ey,"The "),ye=s(Ey,"A",{href:!0});var ZS=l(ye);Xr=a(ZS,"Trainer"),ZS.forEach(r),fi=a(Ey," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Ey.forEach(r),Bt=d(t),k=s(t,"UL",{});var O=l(k);Z=s(O,"LI",{});var bS=l(Z);eo=s(bS,"STRONG",{});var YS=l(eo);ui=a(YS,"get_train_dataloader"),YS.forEach(r),vi=a(bS," \u2014 Creates the training DataLoader."),bS.forEach(r),_i=d(O),gi=s(O,"LI",{});var wS=l(gi);Kc=s(wS,"STRONG",{});var JS=l(Kc);Bw=a(JS,"get_eval_dataloader"),JS.forEach(r),Vw=a(wS," \u2014 Creates the evaluation DataLoader."),wS.forEach(r),Zw=d(O),yi=s(O,"LI",{});var ES=l(yi);Qc=s(ES,"STRONG",{});var KS=l(Qc);Yw=a(KS,"get_test_dataloader"),KS.forEach(r),Jw=a(ES," \u2014 Creates the test DataLoader."),ES.forEach(r),Kw=d(O),bi=s(O,"LI",{});var $S=l(bi);Xc=s($S,"STRONG",{});var QS=l(Xc);Qw=a(QS,"log"),QS.forEach(r),Xw=a($S," \u2014 Logs information on the various objects watching training."),$S.forEach(r),eE=d(O),nt=s(O,"LI",{});var ci=l(nt);ep=s(ci,"STRONG",{});var XS=l(ep);tE=a(XS,"create_optimizer_and_scheduler"),XS.forEach(r),rE=a(ci,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),tp=s(ci,"CODE",{});var eC=l(tp);oE=a(eC,"create_optimizer"),eC.forEach(r),aE=a(ci," and "),rp=s(ci,"CODE",{});var tC=l(rp);nE=a(tC,"create_scheduler"),tC.forEach(r),sE=a(ci,` methods
separately.`),ci.forEach(r),lE=d(O),wi=s(O,"LI",{});var TS=l(wi);op=s(TS,"STRONG",{});var rC=l(op);iE=a(rC,"create_optimizer"),rC.forEach(r),dE=a(TS," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),TS.forEach(r),cE=d(O),Ei=s(O,"LI",{});var kS=l(Ei);ap=s(kS,"STRONG",{});var oC=l(ap);pE=a(oC,"create_scheduler"),oC.forEach(r),hE=a(kS," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),kS.forEach(r),mE=d(O),$i=s(O,"LI",{});var PS=l($i);np=s(PS,"STRONG",{});var aC=l(np);fE=a(aC,"compute_loss"),aC.forEach(r),uE=a(PS," - Computes the loss on a batch of training inputs."),PS.forEach(r),vE=d(O),Ti=s(O,"LI",{});var DS=l(Ti);sp=s(DS,"STRONG",{});var nC=l(sp);_E=a(nC,"training_step"),nC.forEach(r),gE=a(DS," \u2014 Performs a training step."),DS.forEach(r),yE=d(O),ki=s(O,"LI",{});var AS=l(ki);lp=s(AS,"STRONG",{});var sC=l(lp);bE=a(sC,"prediction_step"),sC.forEach(r),wE=a(AS," \u2014 Performs an evaluation/test step."),AS.forEach(r),EE=d(O),Pi=s(O,"LI",{});var xS=l(Pi);ip=s(xS,"STRONG",{});var lC=l(ip);$E=a(lC,"evaluate"),lC.forEach(r),TE=a(xS," \u2014 Runs an evaluation loop and returns metrics."),xS.forEach(r),kE=d(O),Di=s(O,"LI",{});var OS=l(Di);dp=s(OS,"STRONG",{});var iC=l(dp);PE=a(iC,"predict"),iC.forEach(r),DE=a(OS," \u2014 Returns predictions (with metrics if labels are available) on a test set."),OS.forEach(r),O.forEach(r),E_=d(t),f(to.$$.fragment,t),$_=d(t),ro=s(t,"P",{});var $y=l(ro);AE=a($y,"Here is an example of how to customize "),Ai=s($y,"A",{href:!0});var dC=l(Ai);xE=a(dC,"Trainer"),dC.forEach(r),OE=a($y," using a custom loss function for multi-label classification:"),$y.forEach(r),T_=d(t),f(fn.$$.fragment,t),k_=d(t),st=s(t,"P",{});var ac=l(st);SE=a(ac,"Another way to customize the training loop behavior for the PyTorch "),xi=s(ac,"A",{href:!0});var cC=l(xi);CE=a(cC,"Trainer"),cC.forEach(r),NE=a(ac," is to use "),Oi=s(ac,"A",{href:!0});var pC=l(Oi);IE=a(pC,"callbacks"),pC.forEach(r),zE=a(ac," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),ac.forEach(r),P_=d(t),Vt=s(t,"H2",{class:!0});var Ty=l(Vt);oo=s(Ty,"A",{id:!0,class:!0,href:!0});var hC=l(oo);cp=s(hC,"SPAN",{});var mC=l(cp);f(un.$$.fragment,mC),mC.forEach(r),hC.forEach(r),LE=d(Ty),pp=s(Ty,"SPAN",{});var fC=l(pp);qE=a(fC,"Trainer"),fC.forEach(r),Ty.forEach(r),D_=d(t),y=s(t,"DIV",{class:!0});var b=l(y);f(vn.$$.fragment,b),UE=d(b),hp=s(b,"P",{});var uC=l(hp);RE=a(uC,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),uC.forEach(r),ME=d(b),mp=s(b,"P",{});var vC=l(mp);FE=a(vC,"Important attributes:"),vC.forEach(r),HE=d(b),be=s(b,"UL",{});var zt=l(be);ao=s(zt,"LI",{});var y_=l(ao);fp=s(y_,"STRONG",{});var _C=l(fp);jE=a(_C,"model"),_C.forEach(r),GE=a(y_,` \u2014 Always points to the core model. If using a transformers model, it will be a
`),Si=s(y_,"A",{href:!0});var gC=l(Si);WE=a(gC,"PreTrainedModel"),gC.forEach(r),BE=a(y_," subclass."),y_.forEach(r),VE=d(zt),K=s(zt,"LI",{});var Pe=l(K);up=s(Pe,"STRONG",{});var yC=l(up);ZE=a(yC,"model_wrapped"),yC.forEach(r),YE=a(Pe,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),vp=s(Pe,"CODE",{});var bC=l(vp);JE=a(bC,"DeepSpeed"),bC.forEach(r),KE=a(Pe,`,
the inner model is wrapped in `),_p=s(Pe,"CODE",{});var wC=l(_p);QE=a(wC,"DeepSpeed"),wC.forEach(r),XE=a(Pe," and then again in "),gp=s(Pe,"CODE",{});var EC=l(gp);e2=a(EC,"torch.nn.DistributedDataParallel"),EC.forEach(r),t2=a(Pe,`. If the
inner model hasn\u2019t been wrapped, then `),yp=s(Pe,"CODE",{});var $C=l(yp);r2=a($C,"self.model_wrapped"),$C.forEach(r),o2=a(Pe," is the same as "),bp=s(Pe,"CODE",{});var TC=l(bp);a2=a(TC,"self.model"),TC.forEach(r),n2=a(Pe,"."),Pe.forEach(r),s2=d(zt),Ci=s(zt,"LI",{});var SS=l(Ci);wp=s(SS,"STRONG",{});var kC=l(wp);l2=a(kC,"is_model_parallel"),kC.forEach(r),i2=a(SS,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),SS.forEach(r),d2=d(zt),Ae=s(zt,"LI",{});var Kr=l(Ae);Ep=s(Kr,"STRONG",{});var PC=l(Ep);c2=a(PC,"place_model_on_device"),PC.forEach(r),p2=a(Kr,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),$p=s(Kr,"CODE",{});var DC=l($p);h2=a(DC,"False"),DC.forEach(r),m2=a(Kr,` if model parallel or deepspeed is used, or if the default
`),Tp=s(Kr,"CODE",{});var AC=l(Tp);f2=a(AC,"TrainingArguments.place_model_on_device"),AC.forEach(r),u2=a(Kr," is overridden to return "),kp=s(Kr,"CODE",{});var xC=l(kp);v2=a(xC,"False"),xC.forEach(r),_2=a(Kr," ."),Kr.forEach(r),g2=d(zt),xe=s(zt,"LI",{});var Qr=l(xe);Pp=s(Qr,"STRONG",{});var OC=l(Pp);y2=a(OC,"is_in_train"),OC.forEach(r),b2=a(Qr," \u2014 Whether or not a model is currently running "),Dp=s(Qr,"CODE",{});var SC=l(Dp);w2=a(SC,"train"),SC.forEach(r),E2=a(Qr," (e.g. when "),Ap=s(Qr,"CODE",{});var CC=l(Ap);$2=a(CC,"evaluate"),CC.forEach(r),T2=a(Qr,` is called
while in `),xp=s(Qr,"CODE",{});var NC=l(xp);k2=a(NC,"train"),NC.forEach(r),P2=a(Qr,")"),Qr.forEach(r),zt.forEach(r),D2=d(b),no=s(b,"DIV",{class:!0});var ky=l(no);f(_n.$$.fragment,ky),A2=d(ky),gn=s(ky,"P",{});var Py=l(gn);x2=a(Py,"Add a callback to the current list of "),Op=s(Py,"CODE",{});var IC=l(Op);O2=a(IC,"TrainerCallback"),IC.forEach(r),S2=a(Py,"."),Py.forEach(r),ky.forEach(r),C2=d(b),so=s(b,"DIV",{class:!0});var Dy=l(so);f(yn.$$.fragment,Dy),N2=d(Dy),bn=s(Dy,"P",{});var Ay=l(bn);I2=a(Ay,"A helper wrapper that creates an appropriate context manager for "),Sp=s(Ay,"CODE",{});var zC=l(Sp);z2=a(zC,"autocast"),zC.forEach(r),L2=a(Ay,` while feeding it the desired
arguments, depending on the situation.`),Ay.forEach(r),Dy.forEach(r),q2=d(b),lt=s(b,"DIV",{class:!0});var nc=l(lt);f(wn.$$.fragment,nc),U2=d(nc),Cp=s(nc,"P",{});var LC=l(Cp);R2=a(LC,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),LC.forEach(r),M2=d(nc),Np=s(nc,"P",{});var qC=l(Np);F2=a(qC,"Subclass and override for custom behavior."),qC.forEach(r),nc.forEach(r),H2=d(b),it=s(b,"DIV",{class:!0});var sc=l(it);f(En.$$.fragment,sc),j2=d(sc),Ip=s(sc,"P",{});var UC=l(Ip);G2=a(UC,"Setup the optimizer."),UC.forEach(r),W2=d(sc),$n=s(sc,"P",{});var xy=l($n);B2=a(xy,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),zp=s(xy,"CODE",{});var RC=l(zp);V2=a(RC,"optimizers"),RC.forEach(r),Z2=a(xy,", or subclass and override this method in a subclass."),xy.forEach(r),sc.forEach(r),Y2=d(b),dt=s(b,"DIV",{class:!0});var lc=l(dt);f(Tn.$$.fragment,lc),J2=d(lc),Lp=s(lc,"P",{});var MC=l(Lp);K2=a(MC,"Setup the optimizer and the learning rate scheduler."),MC.forEach(r),Q2=d(lc),Je=s(lc,"P",{});var Ga=l(Je);X2=a(Ga,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),qp=s(Ga,"CODE",{});var FC=l(qp);e4=a(FC,"optimizers"),FC.forEach(r),t4=a(Ga,", or subclass and override this method (or "),Up=s(Ga,"CODE",{});var HC=l(Up);r4=a(HC,"create_optimizer"),HC.forEach(r),o4=a(Ga,`
and/or `),Rp=s(Ga,"CODE",{});var jC=l(Rp);a4=a(jC,"create_scheduler"),jC.forEach(r),n4=a(Ga,") in a subclass."),Ga.forEach(r),lc.forEach(r),s4=d(b),lo=s(b,"DIV",{class:!0});var Oy=l(lo);f(kn.$$.fragment,Oy),l4=d(Oy),Mp=s(Oy,"P",{});var GC=l(Mp);i4=a(GC,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),GC.forEach(r),Oy.forEach(r),d4=d(b),Oe=s(b,"DIV",{class:!0});var Wa=l(Oe);f(Pn.$$.fragment,Wa),c4=d(Wa),Fp=s(Wa,"P",{});var WC=l(Fp);p4=a(WC,"Run evaluation and returns metrics."),WC.forEach(r),h4=d(Wa),Dn=s(Wa,"P",{});var Sy=l(Dn);m4=a(Sy,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Hp=s(Sy,"CODE",{});var BC=l(Hp);f4=a(BC,"compute_metrics"),BC.forEach(r),u4=a(Sy," argument)."),Sy.forEach(r),v4=d(Wa),jp=s(Wa,"P",{});var VC=l(jp);_4=a(VC,"You can also subclass and override this method to inject custom behavior."),VC.forEach(r),Wa.forEach(r),g4=d(b),ct=s(b,"DIV",{class:!0});var ic=l(ct);f(An.$$.fragment,ic),y4=d(ic),Zt=s(ic,"P",{});var dc=l(Zt);b4=a(dc,"Prediction/evaluation loop, shared by "),Gp=s(dc,"CODE",{});var ZC=l(Gp);w4=a(ZC,"Trainer.evaluate()"),ZC.forEach(r),E4=a(dc," and "),Wp=s(dc,"CODE",{});var YC=l(Wp);$4=a(YC,"Trainer.predict()"),YC.forEach(r),T4=a(dc,"."),dc.forEach(r),k4=d(ic),Bp=s(ic,"P",{});var JC=l(Bp);P4=a(JC,"Works both with or without labels."),JC.forEach(r),ic.forEach(r),D4=d(b),io=s(b,"DIV",{class:!0});var Cy=l(io);f(xn.$$.fragment,Cy),A4=d(Cy),On=s(Cy,"P",{});var Ny=l(On);x4=a(Ny,"For models that inherit from "),Ni=s(Ny,"A",{href:!0});var KC=l(Ni);O4=a(KC,"PreTrainedModel"),KC.forEach(r),S4=a(Ny,`, uses that method to compute the number of
floating point operations for every backward + forward pass. If using another model, either implement such a
method in the model or subclass and override this method.`),Ny.forEach(r),Cy.forEach(r),C4=d(b),pt=s(b,"DIV",{class:!0});var cc=l(pt);f(Sn.$$.fragment,cc),N4=d(cc),Cn=s(cc,"P",{});var Iy=l(Cn);I4=a(Iy,"Returns the evaluation "),Vp=s(Iy,"CODE",{});var QC=l(Vp);z4=a(QC,"DataLoader"),QC.forEach(r),L4=a(Iy,"."),Iy.forEach(r),q4=d(cc),Zp=s(cc,"P",{});var XC=l(Zp);U4=a(XC,"Subclass and override this method if you want to inject some custom behavior."),XC.forEach(r),cc.forEach(r),R4=d(b),ht=s(b,"DIV",{class:!0});var pc=l(ht);f(Nn.$$.fragment,pc),M4=d(pc),In=s(pc,"P",{});var zy=l(In);F4=a(zy,"Returns the test "),Yp=s(zy,"CODE",{});var eN=l(Yp);H4=a(eN,"DataLoader"),eN.forEach(r),j4=a(zy,"."),zy.forEach(r),G4=d(pc),Jp=s(pc,"P",{});var tN=l(Jp);W4=a(tN,"Subclass and override this method if you want to inject some custom behavior."),tN.forEach(r),pc.forEach(r),B4=d(b),Se=s(b,"DIV",{class:!0});var Ba=l(Se);f(zn.$$.fragment,Ba),V4=d(Ba),Ln=s(Ba,"P",{});var Ly=l(Ln);Z4=a(Ly,"Returns the training "),Kp=s(Ly,"CODE",{});var rN=l(Kp);Y4=a(rN,"DataLoader"),rN.forEach(r),J4=a(Ly,"."),Ly.forEach(r),K4=d(Ba),Yt=s(Ba,"P",{});var hc=l(Yt);Q4=a(hc,"Will use no sampler if "),Qp=s(hc,"CODE",{});var oN=l(Qp);X4=a(oN,"self.train_dataset"),oN.forEach(r),e0=a(hc," does not implement "),Xp=s(hc,"CODE",{});var aN=l(Xp);t0=a(aN,"__len__"),aN.forEach(r),r0=a(hc,`, a random sampler (adapted
to distributed training if necessary) otherwise.`),hc.forEach(r),o0=d(Ba),eh=s(Ba,"P",{});var nN=l(eh);a0=a(nN,"Subclass and override this method if you want to inject some custom behavior."),nN.forEach(r),Ba.forEach(r),n0=d(b),mt=s(b,"DIV",{class:!0});var mc=l(mt);f(qn.$$.fragment,mc),s0=d(mc),we=s(mc,"P",{});var Lt=l(we);l0=a(Lt,"Launch an hyperparameter search using "),th=s(Lt,"CODE",{});var sN=l(th);i0=a(sN,"optuna"),sN.forEach(r),d0=a(Lt," or "),rh=s(Lt,"CODE",{});var lN=l(rh);c0=a(lN,"Ray Tune"),lN.forEach(r),p0=a(Lt," or "),oh=s(Lt,"CODE",{});var iN=l(oh);h0=a(iN,"SigOpt"),iN.forEach(r),m0=a(Lt,`. The optimized quantity is
determined by `),ah=s(Lt,"CODE",{});var dN=l(ah);f0=a(dN,"compute_objective"),dN.forEach(r),u0=a(Lt,`, which defaults to a function returning the evaluation loss when no
metric is provided, the sum of all metrics otherwise.`),Lt.forEach(r),v0=d(mc),f(co.$$.fragment,mc),mc.forEach(r),_0=d(b),po=s(b,"DIV",{class:!0});var qy=l(po);f(Un.$$.fragment,qy),g0=d(qy),Rn=s(qy,"P",{});var Uy=l(Rn);y0=a(Uy,"Initializes a git repo in "),nh=s(Uy,"CODE",{});var cN=l(nh);b0=a(cN,"self.args.hub_model_id"),cN.forEach(r),w0=a(Uy,"."),Uy.forEach(r),qy.forEach(r),E0=d(b),ho=s(b,"DIV",{class:!0});var Ry=l(ho);f(Mn.$$.fragment,Ry),$0=d(Ry),sh=s(Ry,"P",{});var pN=l(sh);T0=a(pN,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),pN.forEach(r),Ry.forEach(r),k0=d(b),mo=s(b,"DIV",{class:!0});var My=l(mo);f(Fn.$$.fragment,My),P0=d(My),Hn=s(My,"P",{});var Fy=l(Hn);D0=a(Fy,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),lh=s(Fy,"CODE",{});var hN=l(lh);A0=a(hN,"True"),hN.forEach(r),x0=a(Fy," for one process)."),Fy.forEach(r),My.forEach(r),O0=d(b),ft=s(b,"DIV",{class:!0});var fc=l(ft);f(jn.$$.fragment,fc),S0=d(fc),Gn=s(fc,"P",{});var Hy=l(Gn);C0=a(Hy,"Log "),ih=s(Hy,"CODE",{});var mN=l(ih);N0=a(mN,"logs"),mN.forEach(r),I0=a(Hy," on the various objects watching training."),Hy.forEach(r),z0=d(fc),dh=s(fc,"P",{});var fN=l(dh);L0=a(fN,"Subclass and override this method to inject custom behavior."),fN.forEach(r),fc.forEach(r),q0=d(b),I=s(b,"DIV",{class:!0});var j=l(I);f(Wn.$$.fragment,j),U0=d(j),ch=s(j,"P",{});var uN=l(ch);R0=a(uN,"Log metrics in a specially formatted way"),uN.forEach(r),M0=d(j),ph=s(j,"P",{});var vN=l(ph);F0=a(vN,"Under distributed environment this is done only for a process with rank 0."),vN.forEach(r),H0=d(j),hh=s(j,"P",{});var _N=l(hh);j0=a(_N,"Notes on memory reports:"),_N.forEach(r),G0=d(j),Jt=s(j,"P",{});var uc=l(Jt);W0=a(uc,"In order to get memory usage report you need to install "),mh=s(uc,"CODE",{});var gN=l(mh);B0=a(gN,"psutil"),gN.forEach(r),V0=a(uc,". You can do that with "),fh=s(uc,"CODE",{});var yN=l(fh);Z0=a(yN,"pip install psutil"),yN.forEach(r),Y0=a(uc,"."),uc.forEach(r),J0=d(j),uh=s(j,"P",{});var bN=l(uh);K0=a(bN,"Now when this method is run, you will see a report that will include: :"),bN.forEach(r),Q0=d(j),f(Bn.$$.fragment,j),X0=d(j),vh=s(j,"P",{});var wN=l(vh);_h=s(wN,"STRONG",{});var EN=l(_h);e$=a(EN,"Understanding the reports:"),EN.forEach(r),wN.forEach(r),t$=d(j),Ke=s(j,"UL",{});var Va=l(Ke);gh=s(Va,"LI",{});var $N=l(gh);Ee=s($N,"P",{});var qt=l(Ee);r$=a(qt,"the first segment, e.g., "),yh=s(qt,"CODE",{});var TN=l(yh);o$=a(TN,"train__"),TN.forEach(r),a$=a(qt,", tells you which stage the metrics are for. Reports starting with "),bh=s(qt,"CODE",{});var kN=l(bh);n$=a(kN,"init_"),kN.forEach(r),s$=a(qt,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),wh=s(qt,"CODE",{});var PN=l(wh);l$=a(PN,"__init__"),PN.forEach(r),i$=a(qt," will be reported along with the "),Eh=s(qt,"CODE",{});var DN=l(Eh);d$=a(DN,"eval_"),DN.forEach(r),c$=a(qt," metrics."),qt.forEach(r),$N.forEach(r),p$=d(Va),$h=s(Va,"LI",{});var AN=l($h);Kt=s(AN,"P",{});var vc=l(Kt);h$=a(vc,"the third segment, is either "),Th=s(vc,"CODE",{});var xN=l(Th);m$=a(xN,"cpu"),xN.forEach(r),f$=a(vc," or "),kh=s(vc,"CODE",{});var ON=l(kh);u$=a(ON,"gpu"),ON.forEach(r),v$=a(vc,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),vc.forEach(r),AN.forEach(r),_$=d(Va),Ph=s(Va,"LI",{});var SN=l(Ph);Ii=s(SN,"P",{});var CS=l(Ii);Dh=s(CS,"CODE",{});var CN=l(Dh);g$=a(CN,"*_alloc_delta"),CN.forEach(r),y$=a(CS,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),CS.forEach(r),SN.forEach(r),b$=d(Va),q=s(Va,"LI",{});var G=l(q);ut=s(G,"P",{});var pi=l(ut);Ah=s(pi,"CODE",{});var NN=l(Ah);w$=a(NN,"*_peaked_delta"),NN.forEach(r),E$=a(pi,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),xh=s(pi,"CODE",{});var IN=l(xh);$$=a(IN,"alloc_delta"),IN.forEach(r),T$=a(pi,` +
`),Oh=s(pi,"CODE",{});var zN=l(Oh);k$=a(zN,"peaked_delta"),zN.forEach(r),P$=a(pi," and you know how much memory was needed to complete that stage."),pi.forEach(r),D$=d(G),Sh=s(G,"P",{});var LN=l(Sh);A$=a(LN,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),LN.forEach(r),x$=d(G),Ch=s(G,"P",{});var qN=l(Ch);O$=a(qN,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),qN.forEach(r),S$=d(G),Vn=s(G,"P",{});var jy=l(Vn);C$=a(jy,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Nh=s(jy,"CODE",{});var UN=l(Nh);N$=a(UN,"tracemalloc"),UN.forEach(r),I$=a(jy,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),jy.forEach(r),z$=d(G),Qe=s(G,"P",{});var Za=l(Qe);L$=a(Za,"The GPU allocated and peak memory reporting is done with "),Ih=s(Za,"CODE",{});var RN=l(Ih);q$=a(RN,"torch.cuda.memory_allocated()"),RN.forEach(r),U$=a(Za,` and
`),zh=s(Za,"CODE",{});var MN=l(zh);R$=a(MN,"torch.cuda.max_memory_allocated()"),MN.forEach(r),M$=a(Za,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Lh=s(Za,"CODE",{});var FN=l(Lh);F$=a(FN,"torch.cuda"),FN.forEach(r),H$=a(Za,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the
very first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),Za.forEach(r),j$=d(G),ae=s(G,"P",{});var je=l(ae);G$=a(je,"Note that this tracker doesn\u2019t account for memory allocations outside of "),zi=s(je,"A",{href:!0});var HN=l(zi);W$=a(HN,"Trainer"),HN.forEach(r),B$=a(je,`\u2019s
`),qh=s(je,"CODE",{});var jN=l(qh);V$=a(jN,"__init__"),jN.forEach(r),Z$=a(je,", "),Uh=s(je,"CODE",{});var GN=l(Uh);Y$=a(GN,"train"),GN.forEach(r),J$=a(je,", "),Rh=s(je,"CODE",{});var WN=l(Rh);K$=a(WN,"evaluate"),WN.forEach(r),Q$=a(je," and "),Mh=s(je,"CODE",{});var BN=l(Mh);X$=a(BN,"predict"),BN.forEach(r),e3=a(je," calls."),je.forEach(r),t3=d(G),A=s(G,"P",{});var z=l(A);r3=a(z,"Because "),Fh=s(z,"CODE",{});var VN=l(Fh);o3=a(VN,"evaluation"),VN.forEach(r),a3=a(z," calls may happen during "),Hh=s(z,"CODE",{});var ZN=l(Hh);n3=a(ZN,"train"),ZN.forEach(r),s3=a(z,`, we can\u2019t handle nested invocations because
`),jh=s(z,"CODE",{});var YN=l(jh);l3=a(YN,"torch.cuda.max_memory_allocated"),YN.forEach(r),i3=a(z," is a single counter, so if it gets reset by a nested eval call, "),Gh=s(z,"CODE",{});var JN=l(Gh);d3=a(JN,"train"),JN.forEach(r),c3=a(z,`\u2019s
tracker will report incorrect info. If this `),Zn=s(z,"A",{href:!0,rel:!0});var KN=l(Zn);p3=a(KN,"pytorch issue"),KN.forEach(r),h3=a(z,`
gets resolved it will be possible to change this class to be re-entrant. Until then we will only track the outer
level of `),Wh=s(z,"CODE",{});var QN=l(Wh);m3=a(QN,"train"),QN.forEach(r),f3=a(z,", "),Bh=s(z,"CODE",{});var XN=l(Bh);u3=a(XN,"evaluate"),XN.forEach(r),v3=a(z," and "),Vh=s(z,"CODE",{});var eI=l(Vh);_3=a(eI,"predict"),eI.forEach(r),g3=a(z," methods. Which means that if "),Zh=s(z,"CODE",{});var tI=l(Zh);y3=a(tI,"eval"),tI.forEach(r),b3=a(z," is called during "),Yh=s(z,"CODE",{});var rI=l(Yh);w3=a(rI,"train"),rI.forEach(r),E3=a(z,`,
it\u2019s the latter that will account for its memory usage and that of the former.`),z.forEach(r),$3=d(G),$e=s(G,"P",{});var Ut=l($e);T3=a(Ut,"This also means that if any other tool that is used along the "),Li=s(Ut,"A",{href:!0});var oI=l(Li);k3=a(oI,"Trainer"),oI.forEach(r),P3=a(Ut,` calls
`),Jh=s(Ut,"CODE",{});var aI=l(Jh);D3=a(aI,"torch.cuda.reset_peak_memory_stats"),aI.forEach(r),A3=a(Ut,`, the gpu peak memory stats could be invalid. And the
`),qi=s(Ut,"A",{href:!0});var nI=l(qi);x3=a(nI,"Trainer"),nI.forEach(r),O3=a(Ut,` will disrupt the normal behavior of any such tools that rely on calling
`),Kh=s(Ut,"CODE",{});var sI=l(Kh);S3=a(sI,"torch.cuda.reset_peak_memory_stats"),sI.forEach(r),C3=a(Ut," themselves."),Ut.forEach(r),N3=d(G),Qh=s(G,"P",{});var lI=l(Qh);I3=a(lI,"For best performance you may want to consider turning the memory profiling off for production runs."),lI.forEach(r),G.forEach(r),Va.forEach(r),j.forEach(r),z3=d(b),fo=s(b,"DIV",{class:!0});var Gy=l(fo);f(Yn.$$.fragment,Gy),L3=d(Gy),Xh=s(Gy,"P",{});var iI=l(Xh);q3=a(iI,"Reformat Trainer metrics values to a human-readable format"),iI.forEach(r),Gy.forEach(r),U3=d(b),vt=s(b,"DIV",{class:!0});var _c=l(vt);f(Jn.$$.fragment,_c),R3=d(_c),Kn=s(_c,"P",{});var Wy=l(Kn);M3=a(Wy,"Helper to get number of samples in a "),em=s(Wy,"CODE",{});var dI=l(em);F3=a(dI,"DataLoader"),dI.forEach(r),H3=a(Wy," by accessing its dataset."),Wy.forEach(r),j3=d(_c),Ui=s(_c,"P",{});var NS=l(Ui);G3=a(NS,"Will raise an exception if the underlying dataset does not implement method "),tm=s(NS,"CODE",{});var cI=l(tm);W3=a(cI,"__len__"),cI.forEach(r),NS.forEach(r),_c.forEach(r),B3=d(b),_t=s(b,"DIV",{class:!0});var gc=l(_t);f(Qn.$$.fragment,gc),V3=d(gc),Xn=s(gc,"P",{});var By=l(Xn);Z3=a(By,"Remove a callback from the current list of "),rm=s(By,"CODE",{});var pI=l(rm);Y3=a(pI,"TrainerCallback"),pI.forEach(r),J3=a(By," and returns it."),By.forEach(r),K3=d(gc),es=s(gc,"P",{});var Vy=l(es);Q3=a(Vy,"If the callback is not found, returns "),om=s(Vy,"CODE",{});var hI=l(om);X3=a(hI,"None"),hI.forEach(r),e5=a(Vy," (and no error is raised)."),Vy.forEach(r),gc.forEach(r),t5=d(b),Q=s(b,"DIV",{class:!0});var Ge=l(Q);f(ts.$$.fragment,Ge),r5=d(Ge),am=s(Ge,"P",{});var mI=l(am);o5=a(mI,"Run prediction and returns predictions and potential metrics."),mI.forEach(r),a5=d(Ge),rs=s(Ge,"P",{});var Zy=l(rs);n5=a(Zy,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),nm=s(Zy,"CODE",{});var fI=l(nm);s5=a(fI,"evaluate()"),fI.forEach(r),l5=a(Zy,"."),Zy.forEach(r),i5=d(Ge),f(uo.$$.fragment,Ge),d5=d(Ge),os=s(Ge,"P",{});var Yy=l(os);c5=a(Yy,"Returns: "),sm=s(Yy,"EM",{});var uI=l(sm);p5=a(uI,"NamedTuple"),uI.forEach(r),h5=a(Yy," A namedtuple with the following keys:"),Yy.forEach(r),m5=d(Ge),Qt=s(Ge,"UL",{});var yc=l(Qt);Xt=s(yc,"LI",{});var bc=l(Xt);f5=a(bc,"predictions ("),lm=s(bc,"CODE",{});var vI=l(lm);u5=a(vI,"np.ndarray"),vI.forEach(r),v5=a(bc,"): The predictions on "),im=s(bc,"CODE",{});var _I=l(im);_5=a(_I,"test_dataset"),_I.forEach(r),g5=a(bc,"."),bc.forEach(r),y5=d(yc),as=s(yc,"LI",{});var Jy=l(as);b5=a(Jy,"label"),ns=s(Jy,"EM",{});var Ky=l(ns);w5=a(Ky,"ids ("),dm=s(Ky,"CODE",{});var gI=l(dm);E5=a(gI,"np.ndarray"),gI.forEach(r),$5=a(Ky,", _optional"),Ky.forEach(r),T5=a(Jy,"): The labels (if the dataset contained some)."),Jy.forEach(r),k5=d(yc),er=s(yc,"LI",{});var wc=l(er);P5=a(wc,"metrics ("),cm=s(wc,"CODE",{});var yI=l(cm);D5=a(yI,"Dict[str, float]"),yI.forEach(r),A5=a(wc,", "),pm=s(wc,"EM",{});var bI=l(pm);x5=a(bI,"optional"),bI.forEach(r),O5=a(wc,`): The potential dictionary of metrics (if the dataset
contained labels).`),wc.forEach(r),yc.forEach(r),Ge.forEach(r),S5=d(b),gt=s(b,"DIV",{class:!0});var Ec=l(gt);f(ss.$$.fragment,Ec),C5=d(Ec),tr=s(Ec,"P",{});var $c=l(tr);N5=a($c,"Prediction/evaluation loop, shared by "),hm=s($c,"CODE",{});var wI=l(hm);I5=a(wI,"Trainer.evaluate()"),wI.forEach(r),z5=a($c," and "),mm=s($c,"CODE",{});var EI=l(mm);L5=a(EI,"Trainer.predict()"),EI.forEach(r),q5=a($c,"."),$c.forEach(r),U5=d(Ec),fm=s(Ec,"P",{});var $I=l(fm);R5=a($I,"Works both with or without labels."),$I.forEach(r),Ec.forEach(r),M5=d(b),yt=s(b,"DIV",{class:!0});var Tc=l(yt);f(ls.$$.fragment,Tc),F5=d(Tc),rr=s(Tc,"P",{});var kc=l(rr);H5=a(kc,"Perform an evaluation step on "),um=s(kc,"CODE",{});var TI=l(um);j5=a(TI,"model"),TI.forEach(r),G5=a(kc," using obj:"),vm=s(kc,"EM",{});var kI=l(vm);W5=a(kI,"inputs"),kI.forEach(r),B5=a(kc,"."),kc.forEach(r),V5=d(Tc),_m=s(Tc,"P",{});var PI=l(_m);Z5=a(PI,"Subclass and override to inject custom behavior."),PI.forEach(r),Tc.forEach(r),Y5=d(b),vo=s(b,"DIV",{class:!0});var Qy=l(vo);f(is.$$.fragment,Qy),J5=d(Qy),Xe=s(Qy,"P",{});var Ya=l(Xe);K5=a(Ya,"Upload "),gm=s(Ya,"EM",{});var DI=l(gm);Q5=a(DI,"self.model"),DI.forEach(r),X5=a(Ya," and "),ym=s(Ya,"EM",{});var AI=l(ym);e6=a(AI,"self.tokenizer"),AI.forEach(r),t6=a(Ya," to the \u{1F917} model hub on the repo "),bm=s(Ya,"EM",{});var xI=l(bm);r6=a(xI,"self.args.hub_model_id"),xI.forEach(r),o6=a(Ya,"."),Ya.forEach(r),Qy.forEach(r),a6=d(b),_o=s(b,"DIV",{class:!0});var Xy=l(_o);f(ds.$$.fragment,Xy),n6=d(Xy),cs=s(Xy,"P",{});var eb=l(cs);s6=a(eb,"Remove a callback from the current list of "),wm=s(eb,"CODE",{});var OI=l(wm);l6=a(OI,"TrainerCallback"),OI.forEach(r),i6=a(eb,"."),eb.forEach(r),Xy.forEach(r),d6=d(b),Ce=s(b,"DIV",{class:!0});var Ja=l(Ce);f(ps.$$.fragment,Ja),c6=d(Ja),hs=s(Ja,"P",{});var tb=l(hs);p6=a(tb,"Save metrics into a json file for that split, e.g. "),Em=s(tb,"CODE",{});var SI=l(Em);h6=a(SI,"train_results.json"),SI.forEach(r),m6=a(tb,"."),tb.forEach(r),f6=d(Ja),$m=s(Ja,"P",{});var CI=l($m);u6=a(CI,"Under distributed environment this is done only for a process with rank 0."),CI.forEach(r),v6=d(Ja),ms=s(Ja,"P",{});var rb=l(ms);_6=a(rb,"To understand the metrics please read the docstring of "),Tm=s(rb,"CODE",{});var NI=l(Tm);g6=a(NI,"log_metrics()"),NI.forEach(r),y6=a(rb,`. The only
difference is that raw unformatted numbers are saved in the current method.`),rb.forEach(r),Ja.forEach(r),b6=d(b),bt=s(b,"DIV",{class:!0});var Pc=l(bt);f(fs.$$.fragment,Pc),w6=d(Pc),us=s(Pc,"P",{});var ob=l(us);E6=a(ob,"Will save the model, so you can reload it using "),km=s(ob,"CODE",{});var II=l(km);$6=a(II,"from_pretrained()"),II.forEach(r),T6=a(ob,"."),ob.forEach(r),k6=d(Pc),Pm=s(Pc,"P",{});var zI=l(Pm);P6=a(zI,"Will only save from the main process."),zI.forEach(r),Pc.forEach(r),D6=d(b),wt=s(b,"DIV",{class:!0});var Dc=l(wt);f(vs.$$.fragment,Dc),A6=d(Dc),Dm=s(Dc,"P",{});var LI=l(Dm);x6=a(LI,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),LI.forEach(r),O6=d(Dc),Am=s(Dc,"P",{});var qI=l(Am);S6=a(qI,"Under distributed environment this is done only for a process with rank 0."),qI.forEach(r),Dc.forEach(r),C6=d(b),go=s(b,"DIV",{class:!0});var ab=l(go);f(_s.$$.fragment,ab),N6=d(ab),xm=s(ab,"P",{});var UI=l(xm);I6=a(UI,"Main training entry point."),UI.forEach(r),ab.forEach(r),z6=d(b),Et=s(b,"DIV",{class:!0});var Ac=l(Et);f(gs.$$.fragment,Ac),L6=d(Ac),Om=s(Ac,"P",{});var RI=l(Om);q6=a(RI,"Perform a training step on a batch of inputs."),RI.forEach(r),U6=d(Ac),Sm=s(Ac,"P",{});var MI=l(Sm);R6=a(MI,"Subclass and override to inject custom behavior."),MI.forEach(r),Ac.forEach(r),b.forEach(r),A_=d(t),or=s(t,"H2",{class:!0});var nb=l(or);yo=s(nb,"A",{id:!0,class:!0,href:!0});var FI=l(yo);Cm=s(FI,"SPAN",{});var HI=l(Cm);f(ys.$$.fragment,HI),HI.forEach(r),FI.forEach(r),M6=d(nb),Nm=s(nb,"SPAN",{});var jI=l(Nm);F6=a(jI,"Seq2SeqTrainer"),jI.forEach(r),nb.forEach(r),x_=d(t),ar=s(t,"DIV",{class:!0});var sb=l(ar);Ne=s(sb,"DIV",{class:!0});var Ka=l(Ne);f(bs.$$.fragment,Ka),H6=d(Ka),Im=s(Ka,"P",{});var GI=l(Im);j6=a(GI,"Run evaluation and returns metrics."),GI.forEach(r),G6=d(Ka),ws=s(Ka,"P",{});var lb=l(ws);W6=a(lb,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),zm=s(lb,"CODE",{});var WI=l(zm);B6=a(WI,"compute_metrics"),WI.forEach(r),V6=a(lb," argument)."),lb.forEach(r),Z6=d(Ka),Lm=s(Ka,"P",{});var BI=l(Lm);Y6=a(BI,"You can also subclass and override this method to inject custom behavior."),BI.forEach(r),Ka.forEach(r),J6=d(sb),X=s(sb,"DIV",{class:!0});var We=l(X);f(Es.$$.fragment,We),K6=d(We),qm=s(We,"P",{});var VI=l(qm);Q6=a(VI,"Run prediction and returns predictions and potential metrics."),VI.forEach(r),X6=d(We),$s=s(We,"P",{});var ib=l($s);e7=a(ib,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Um=s(ib,"CODE",{});var ZI=l(Um);t7=a(ZI,"evaluate()"),ZI.forEach(r),r7=a(ib,"."),ib.forEach(r),o7=d(We),f(bo.$$.fragment,We),a7=d(We),Ts=s(We,"P",{});var db=l(Ts);n7=a(db,"Returns: "),Rm=s(db,"EM",{});var YI=l(Rm);s7=a(YI,"NamedTuple"),YI.forEach(r),l7=a(db," A namedtuple with the following keys:"),db.forEach(r),i7=d(We),nr=s(We,"UL",{});var xc=l(nr);sr=s(xc,"LI",{});var Oc=l(sr);d7=a(Oc,"predictions ("),Mm=s(Oc,"CODE",{});var JI=l(Mm);c7=a(JI,"np.ndarray"),JI.forEach(r),p7=a(Oc,"): The predictions on "),Fm=s(Oc,"CODE",{});var KI=l(Fm);h7=a(KI,"test_dataset"),KI.forEach(r),m7=a(Oc,"."),Oc.forEach(r),f7=d(xc),ks=s(xc,"LI",{});var cb=l(ks);u7=a(cb,"label"),Ps=s(cb,"EM",{});var pb=l(Ps);v7=a(pb,"ids ("),Hm=s(pb,"CODE",{});var QI=l(Hm);_7=a(QI,"np.ndarray"),QI.forEach(r),g7=a(pb,", _optional"),pb.forEach(r),y7=a(cb,"): The labels (if the dataset contained some)."),cb.forEach(r),b7=d(xc),lr=s(xc,"LI",{});var Sc=l(lr);w7=a(Sc,"metrics ("),jm=s(Sc,"CODE",{});var XI=l(jm);E7=a(XI,"Dict[str, float]"),XI.forEach(r),$7=a(Sc,", "),Gm=s(Sc,"EM",{});var ez=l(Gm);T7=a(ez,"optional"),ez.forEach(r),k7=a(Sc,`): The potential dictionary of metrics (if the dataset
contained labels).`),Sc.forEach(r),xc.forEach(r),We.forEach(r),sb.forEach(r),O_=d(t),ir=s(t,"H2",{class:!0});var hb=l(ir);wo=s(hb,"A",{id:!0,class:!0,href:!0});var tz=l(wo);Wm=s(tz,"SPAN",{});var rz=l(Wm);f(Ds.$$.fragment,rz),rz.forEach(r),tz.forEach(r),P7=d(hb),Bm=s(hb,"SPAN",{});var oz=l(Bm);D7=a(oz,"TrainingArguments"),oz.forEach(r),hb.forEach(r),S_=d(t),C=s(t,"DIV",{class:!0});var W=l(C);f(As.$$.fragment,W),A7=d(W),xs=s(W,"P",{});var mb=l(xs);x7=a(mb,"TrainingArguments is the subset of the arguments we use in our example scripts "),Vm=s(mb,"STRONG",{});var az=l(Vm);O7=a(az,`which relate to the training loop
itself`),az.forEach(r),S7=a(mb,"."),mb.forEach(r),C7=d(W),dr=s(W,"P",{});var Cc=l(dr);N7=a(Cc,"Using "),Ri=s(Cc,"A",{href:!0});var nz=l(Ri);I7=a(nz,"HfArgumentParser"),nz.forEach(r),z7=a(Cc," we can turn this class into "),Os=s(Cc,"A",{href:!0,rel:!0});var sz=l(Os);L7=a(sz,"argparse"),sz.forEach(r),q7=a(Cc,` arguments that can be specified on the command
line.`),Cc.forEach(r),U7=d(W),de=s(W,"DIV",{class:!0});var Rt=l(de);f(Ss.$$.fragment,Rt),R7=d(Rt),Zm=s(Rt,"P",{});var lz=l(Zm);M7=a(lz,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),lz.forEach(r),F7=d(Rt),cr=s(Rt,"P",{});var Nc=l(cr);H7=a(Nc,"For the main process the log level defaults to "),Ym=s(Nc,"CODE",{});var iz=l(Ym);j7=a(iz,"logging.INFO"),iz.forEach(r),G7=a(Nc," unless overridden by "),Jm=s(Nc,"CODE",{});var dz=l(Jm);W7=a(dz,"log_level"),dz.forEach(r),B7=a(Nc," argument."),Nc.forEach(r),V7=d(Rt),pr=s(Rt,"P",{});var Ic=l(pr);Z7=a(Ic,"For the replica processes the log level defaults to "),Km=s(Ic,"CODE",{});var cz=l(Km);Y7=a(cz,"logging.WARNING"),cz.forEach(r),J7=a(Ic,` unless overridden by
`),Qm=s(Ic,"CODE",{});var pz=l(Qm);K7=a(pz,"log_level_replica"),pz.forEach(r),Q7=a(Ic," argument."),Ic.forEach(r),X7=d(Rt),Cs=s(Rt,"P",{});var fb=l(Cs);eT=a(fb,`The choice between the main and replica process settings is made according to the return value of
`),Xm=s(fb,"CODE",{});var hz=l(Xm);tT=a(hz,"should_log"),hz.forEach(r),rT=a(fb,"."),fb.forEach(r),Rt.forEach(r),oT=d(W),Eo=s(W,"DIV",{class:!0});var ub=l(Eo);f(Ns.$$.fragment,ub),aT=d(ub),ef=s(ub,"P",{});var mz=l(ef);nT=a(mz,"Get number of steps used for a linear warmup."),mz.forEach(r),ub.forEach(r),sT=d(W),$t=s(W,"DIV",{class:!0});var zc=l($t);f(Is.$$.fragment,zc),lT=d(zc),tf=s(zc,"P",{});var fz=l(tf);iT=a(fz,`A context manager for torch distributed environment where on needs to do something on the main process,
while blocking replicas, and when it\u2019s finished releasing the replicas.`),fz.forEach(r),dT=d(zc),hr=s(zc,"P",{});var Lc=l(hr);cT=a(Lc,"One such use is for "),rf=s(Lc,"CODE",{});var uz=l(rf);pT=a(uz,"datasets"),uz.forEach(r),hT=a(Lc,"\u2019s "),of=s(Lc,"CODE",{});var vz=l(of);mT=a(vz,"map"),vz.forEach(r),fT=a(Lc,` feature which to be efficient should be run once on the main
process, which upon completion saves a cached version of results and which then automatically gets loaded
by the replicas.`),Lc.forEach(r),zc.forEach(r),uT=d(W),$o=s(W,"DIV",{class:!0});var vb=l($o);f(zs.$$.fragment,vb),vT=d(vb),Ls=s(vb,"P",{});var _b=l(Ls);_T=a(_b,"Serializes this instance while replace "),af=s(_b,"CODE",{});var _z=l(af);gT=a(_z,"Enum"),_z.forEach(r),yT=a(_b,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),_b.forEach(r),vb.forEach(r),bT=d(W),To=s(W,"DIV",{class:!0});var gb=l(To);f(qs.$$.fragment,gb),wT=d(gb),nf=s(gb,"P",{});var gz=l(nf);ET=a(gz,"Serializes this instance to a JSON string."),gz.forEach(r),gb.forEach(r),$T=d(W),ko=s(W,"DIV",{class:!0});var yb=l(ko);f(Us.$$.fragment,yb),TT=d(yb),sf=s(yb,"P",{});var yz=l(sf);kT=a(yz,"Sanitized serialization to use with TensorBoard\u2019s hparams"),yz.forEach(r),yb.forEach(r),W.forEach(r),C_=d(t),mr=s(t,"H2",{class:!0});var bb=l(mr);Po=s(bb,"A",{id:!0,class:!0,href:!0});var bz=l(Po);lf=s(bz,"SPAN",{});var wz=l(lf);f(Rs.$$.fragment,wz),wz.forEach(r),bz.forEach(r),PT=d(bb),df=s(bb,"SPAN",{});var Ez=l(df);DT=a(Ez,"Seq2SeqTrainingArguments"),Ez.forEach(r),bb.forEach(r),N_=d(t),ne=s(t,"DIV",{class:!0});var Mt=l(ne);f(Ms.$$.fragment,Mt),AT=d(Mt),Fs=s(Mt,"P",{});var wb=l(Fs);xT=a(wb,"TrainingArguments is the subset of the arguments we use in our example scripts "),cf=s(wb,"STRONG",{});var $z=l(cf);OT=a($z,`which relate to the training loop
itself`),$z.forEach(r),ST=a(wb,"."),wb.forEach(r),CT=d(Mt),fr=s(Mt,"P",{});var qc=l(fr);NT=a(qc,"Using "),Mi=s(qc,"A",{href:!0});var Tz=l(Mi);IT=a(Tz,"HfArgumentParser"),Tz.forEach(r),zT=a(qc," we can turn this class into "),Hs=s(qc,"A",{href:!0,rel:!0});var kz=l(Hs);LT=a(kz,"argparse"),kz.forEach(r),qT=a(qc,` arguments that can be specified on the command
line.`),qc.forEach(r),UT=d(Mt),Te=s(Mt,"P",{});var Ft=l(Te);RT=a(Ft,"sortish"),js=s(Ft,"EM",{});var Eb=l(js);MT=a(Eb,"sampler ("),pf=s(Eb,"CODE",{});var Pz=l(pf);FT=a(Pz,"bool"),Pz.forEach(r),HT=a(Eb,", _optional"),Eb.forEach(r),jT=a(Ft,", defaults to "),hf=s(Ft,"CODE",{});var Dz=l(hf);GT=a(Dz,"False"),Dz.forEach(r),WT=a(Ft,`):
Whether to use a `),mf=s(Ft,"EM",{});var Az=l(mf);BT=a(Az,"sortish sampler"),Az.forEach(r),VT=a(Ft," or not. Only possible if the underlying datasets are "),ff=s(Ft,"EM",{});var xz=l(ff);ZT=a(xz,"Seq2SeqDataset"),xz.forEach(r),YT=a(Ft,` for
now but will become generally available in the near future.`),Ft.forEach(r),JT=d(Mt),x=s(Mt,"P",{});var L=l(x);KT=a(L,`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict`),Gs=s(L,"EM",{});var $b=l(Gs);QT=a($b,"with_generate ("),uf=s($b,"CODE",{});var Oz=l(uf);XT=a(Oz,"bool"),Oz.forEach(r),e8=a($b,", _optional"),$b.forEach(r),t8=a(L,", defaults to "),vf=s(L,"CODE",{});var Sz=l(vf);r8=a(Sz,"False"),Sz.forEach(r),o8=a(L,`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation`),Ws=s(L,"EM",{});var Tb=l(Ws);a8=a(Tb,"max_length ("),_f=s(Tb,"CODE",{});var Cz=l(_f);n8=a(Cz,"int"),Cz.forEach(r),s8=a(Tb,", _optional"),Tb.forEach(r),l8=a(L,`):
The `),gf=s(L,"CODE",{});var Nz=l(gf);i8=a(Nz,"max_length"),Nz.forEach(r),d8=a(L," to use on each evaluation loop when "),yf=s(L,"CODE",{});var Iz=l(yf);c8=a(Iz,"predict_with_generate=True"),Iz.forEach(r),p8=a(L,`. Will default to
the `),bf=s(L,"CODE",{});var zz=l(bf);h8=a(zz,"max_length"),zz.forEach(r),m8=a(L,` value of the model configuration.
generation`),Bs=s(L,"EM",{});var kb=l(Bs);f8=a(kb,"num_beams ("),wf=s(kb,"CODE",{});var Lz=l(wf);u8=a(Lz,"int"),Lz.forEach(r),v8=a(kb,", _optional"),kb.forEach(r),_8=a(L,`):
The `),Ef=s(L,"CODE",{});var qz=l(Ef);g8=a(qz,"num_beams"),qz.forEach(r),y8=a(L," to use on each evaluation loop when "),$f=s(L,"CODE",{});var Uz=l($f);b8=a(Uz,"predict_with_generate=True"),Uz.forEach(r),w8=a(L,`. Will default to the
`),Tf=s(L,"CODE",{});var Rz=l(Tf);E8=a(Rz,"num_beams"),Rz.forEach(r),$8=a(L," value of the model configuration."),L.forEach(r),Mt.forEach(r),I_=d(t),ur=s(t,"H2",{class:!0});var Pb=l(ur);Do=s(Pb,"A",{id:!0,class:!0,href:!0});var Mz=l(Do);kf=s(Mz,"SPAN",{});var Fz=l(kf);f(Vs.$$.fragment,Fz),Fz.forEach(r),Mz.forEach(r),T8=d(Pb),Pf=s(Pb,"SPAN",{});var Hz=l(Pf);k8=a(Hz,"Checkpoints"),Hz.forEach(r),Pb.forEach(r),z_=d(t),ce=s(t,"P",{});var Ht=l(ce);P8=a(Ht,"By default, "),Fi=s(Ht,"A",{href:!0});var jz=l(Fi);D8=a(jz,"Trainer"),jz.forEach(r),A8=a(Ht," will save all checkpoints in the "),Df=s(Ht,"CODE",{});var Gz=l(Df);x8=a(Gz,"output_dir"),Gz.forEach(r),O8=a(Ht,` you set in the
`),Hi=s(Ht,"A",{href:!0});var Wz=l(Hi);S8=a(Wz,"TrainingArguments"),Wz.forEach(r),C8=a(Ht," you are using. Those will go in subfolder named "),Af=s(Ht,"CODE",{});var Bz=l(Af);N8=a(Bz,"checkpoint-xxx"),Bz.forEach(r),I8=a(Ht,` with xxx
being the step at which the training was at.`),Ht.forEach(r),L_=d(t),Ao=s(t,"P",{});var Db=l(Ao);z8=a(Db,"Resuming training from a checkpoint can be done when calling "),ji=s(Db,"A",{href:!0});var Vz=l(ji);L8=a(Vz,"Trainer.train()"),Vz.forEach(r),q8=a(Db," with either:"),Db.forEach(r),q_=d(t),xo=s(t,"UL",{});var Ab=l(xo);Gi=s(Ab,"LI",{});var IS=l(Gi);xf=s(IS,"CODE",{});var Zz=l(xf);U8=a(Zz,"resume_from_checkpoint=True"),Zz.forEach(r),R8=a(IS," which will resume training from the latest checkpoint"),IS.forEach(r),M8=d(Ab),Wi=s(Ab,"LI",{});var zS=l(Wi);Of=s(zS,"CODE",{});var Yz=l(Of);F8=a(Yz,"resume_from_checkpoint=checkpoint_dir"),Yz.forEach(r),H8=a(zS,` which will resume training from the specific checkpoint in the directory
passed.`),zS.forEach(r),Ab.forEach(r),U_=d(t),Ie=s(t,"P",{});var Qa=l(Ie);j8=a(Qa,"In addition, you can easily save your checkpoints on the Model Hub when using "),Sf=s(Qa,"CODE",{});var Jz=l(Sf);G8=a(Jz,"push_to_hub=True"),Jz.forEach(r),W8=a(Qa,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Cf=s(Qa,"CODE",{});var Kz=l(Cf);B8=a(Kz,"hub-strategy"),Kz.forEach(r),V8=a(Qa," value of your "),Bi=s(Qa,"A",{href:!0});var Qz=l(Bi);Z8=a(Qz,"TrainingArguments"),Qz.forEach(r),Y8=a(Qa," to either:"),Qa.forEach(r),R_=d(t),Oo=s(t,"UL",{});var xb=l(Oo);So=s(xb,"LI",{});var b_=l(So);Nf=s(b_,"CODE",{});var Xz=l(Nf);J8=a(Xz,'"checkpoint"'),Xz.forEach(r),K8=a(b_,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),If=s(b_,"CODE",{});var eL=l(If);Q8=a(eL,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),eL.forEach(r),X8=a(b_,"."),b_.forEach(r),e9=d(xb),Vi=s(xb,"LI",{});var LS=l(Vi);zf=s(LS,"CODE",{});var tL=l(zf);t9=a(tL,'"all_checkpoints"'),tL.forEach(r),r9=a(LS,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),LS.forEach(r),xb.forEach(r),M_=d(t),vr=s(t,"H2",{class:!0});var Ob=l(vr);Co=s(Ob,"A",{id:!0,class:!0,href:!0});var rL=l(Co);Lf=s(rL,"SPAN",{});var oL=l(Lf);f(Zs.$$.fragment,oL),oL.forEach(r),rL.forEach(r),o9=d(Ob),qf=s(Ob,"SPAN",{});var aL=l(qf);a9=a(aL,"Logging"),aL.forEach(r),Ob.forEach(r),F_=d(t),ze=s(t,"P",{});var Xa=l(ze);n9=a(Xa,"By default "),Zi=s(Xa,"A",{href:!0});var nL=l(Zi);s9=a(nL,"Trainer"),nL.forEach(r),l9=a(Xa," will use "),Uf=s(Xa,"CODE",{});var sL=l(Uf);i9=a(sL,"logging.INFO"),sL.forEach(r),d9=a(Xa," for the main process and "),Rf=s(Xa,"CODE",{});var lL=l(Rf);c9=a(lL,"logging.WARNING"),lL.forEach(r),p9=a(Xa," for the replicas if any."),Xa.forEach(r),H_=d(t),Tt=s(t,"P",{});var Uc=l(Tt);h9=a(Uc,"These defaults can be overridden to use any of the 5 "),Mf=s(Uc,"CODE",{});var iL=l(Mf);m9=a(iL,"logging"),iL.forEach(r),f9=a(Uc," levels with "),Yi=s(Uc,"A",{href:!0});var dL=l(Yi);u9=a(dL,"TrainingArguments"),dL.forEach(r),v9=a(Uc,`\u2019s
arguments:`),Uc.forEach(r),j_=d(t),No=s(t,"UL",{});var Sb=l(No);Ji=s(Sb,"LI",{});var qS=l(Ji);Ff=s(qS,"CODE",{});var cL=l(Ff);_9=a(cL,"log_level"),cL.forEach(r),g9=a(qS," - for the main process"),qS.forEach(r),y9=d(Sb),Ki=s(Sb,"LI",{});var US=l(Ki);Hf=s(US,"CODE",{});var pL=l(Hf);b9=a(pL,"log_level_replica"),pL.forEach(r),w9=a(US," - for the replicas"),US.forEach(r),Sb.forEach(r),G_=d(t),Le=s(t,"P",{});var en=l(Le);E9=a(en,"Further, if "),Qi=s(en,"A",{href:!0});var hL=l(Qi);$9=a(hL,"TrainingArguments"),hL.forEach(r),T9=a(en,"\u2019s "),jf=s(en,"CODE",{});var mL=l(jf);k9=a(mL,"log_on_each_node"),mL.forEach(r),P9=a(en," is set to "),Gf=s(en,"CODE",{});var fL=l(Gf);D9=a(fL,"False"),fL.forEach(r),A9=a(en,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),en.forEach(r),W_=d(t),ee=s(t,"P",{});var Be=l(ee);x9=a(Be,"Note that "),Xi=s(Be,"A",{href:!0});var uL=l(Xi);O9=a(uL,"Trainer"),uL.forEach(r),S9=a(Be," is going to set "),Wf=s(Be,"CODE",{});var vL=l(Wf);C9=a(vL,"transformers"),vL.forEach(r),N9=a(Be,`\u2019s log level separately for each node in its
`),Bf=s(Be,"CODE",{});var _L=l(Bf);I9=a(_L,"Trainer.__init__()"),_L.forEach(r),z9=a(Be,`. So you may want to set this sooner (see the next example) if you tap into other
`),Vf=s(Be,"CODE",{});var gL=l(Vf);L9=a(gL,"transformers"),gL.forEach(r),q9=a(Be," functionality before creating the "),ed=s(Be,"A",{href:!0});var yL=l(ed);U9=a(yL,"Trainer"),yL.forEach(r),R9=a(Be," object."),Be.forEach(r),B_=d(t),td=s(t,"P",{});var bL=l(td);M9=a(bL,"Here is an example of how this can be used in an application:"),bL.forEach(r),V_=d(t),f(Ys.$$.fragment,t),Z_=d(t),rd=s(t,"P",{});var wL=l(rd);F9=a(wL,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),wL.forEach(r),Y_=d(t),f(Js.$$.fragment,t),J_=d(t),od=s(t,"P",{});var EL=l(od);H9=a(EL,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),EL.forEach(r),K_=d(t),f(Ks.$$.fragment,t),Q_=d(t),ad=s(t,"P",{});var $L=l(ad);j9=a($L,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),$L.forEach(r),X_=d(t),nd=s(t,"P",{});var TL=l(nd);G9=a(TL,"If you need your application to be as quiet as possible you could do:"),TL.forEach(r),eg=d(t),f(Qs.$$.fragment,t),tg=d(t),Io=s(t,"P",{});var Cb=l(Io);W9=a(Cb,"(add "),Zf=s(Cb,"CODE",{});var kL=l(Zf);B9=a(kL,"--log_on_each_node 0"),kL.forEach(r),V9=a(Cb," if on multi-node environment)"),Cb.forEach(r),rg=d(t),_r=s(t,"H2",{class:!0});var Nb=l(_r);zo=s(Nb,"A",{id:!0,class:!0,href:!0});var PL=l(zo);Yf=s(PL,"SPAN",{});var DL=l(Yf);f(Xs.$$.fragment,DL),DL.forEach(r),PL.forEach(r),Z9=d(Nb),Jf=s(Nb,"SPAN",{});var AL=l(Jf);Y9=a(AL,"Randomness"),AL.forEach(r),Nb.forEach(r),og=d(t),pe=s(t,"P",{});var jt=l(pe);J9=a(jt,"When resuming from a checkpoint generated by "),sd=s(jt,"A",{href:!0});var xL=l(sd);K9=a(xL,"Trainer"),xL.forEach(r),Q9=a(jt,` all efforts are made to restore the
`),Kf=s(jt,"EM",{});var OL=l(Kf);X9=a(OL,"python"),OL.forEach(r),ek=a(jt,", "),Qf=s(jt,"EM",{});var SL=l(Qf);tk=a(SL,"numpy"),SL.forEach(r),rk=a(jt," and "),Xf=s(jt,"EM",{});var CL=l(Xf);ok=a(CL,"pytorch"),CL.forEach(r),ak=a(jt,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),jt.forEach(r),ag=d(t),kt=s(t,"P",{});var Rc=l(kt);nk=a(Rc,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),el=s(Rc,"A",{href:!0,rel:!0});var NL=l(el);sk=a(NL,"Controlling sources of randomness"),NL.forEach(r),lk=a(Rc,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),eu=s(Rc,"CODE",{});var IL=l(eu);ik=a(IL,"torch.backends.cudnn.deterministic"),IL.forEach(r),dk=a(Rc,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Rc.forEach(r),ng=d(t),gr=s(t,"H2",{class:!0});var Ib=l(gr);Lo=s(Ib,"A",{id:!0,class:!0,href:!0});var zL=l(Lo);tu=s(zL,"SPAN",{});var LL=l(tu);f(tl.$$.fragment,LL),LL.forEach(r),zL.forEach(r),ck=d(Ib),ru=s(Ib,"SPAN",{});var qL=l(ru);pk=a(qL,"Trainer Integrations"),qL.forEach(r),Ib.forEach(r),sg=d(t),qo=s(t,"P",{});var zb=l(qo);hk=a(zb,"The "),ld=s(zb,"A",{href:!0});var UL=l(ld);mk=a(UL,"Trainer"),UL.forEach(r),fk=a(zb,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),zb.forEach(r),lg=d(t),qe=s(t,"P",{});var tn=l(qe);uk=a(tn,"Currently it supports third party solutions, "),rl=s(tn,"A",{href:!0,rel:!0});var RL=l(rl);vk=a(RL,"DeepSpeed"),RL.forEach(r),_k=a(tn," and "),ol=s(tn,"A",{href:!0,rel:!0});var ML=l(ol);gk=a(ML,"FairScale"),ML.forEach(r),yk=a(tn,", which implement parts of the paper "),al=s(tn,"A",{href:!0,rel:!0});var FL=l(al);bk=a(FL,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),FL.forEach(r),wk=a(tn,"."),tn.forEach(r),ig=d(t),id=s(t,"P",{});var HL=l(id);Ek=a(HL,"This provided support is new and experimental as of this writing."),HL.forEach(r),dg=d(t),dd=s(t,"A",{id:!0}),l(dd).forEach(r),cg=d(t),yr=s(t,"H3",{class:!0});var Lb=l(yr);Uo=s(Lb,"A",{id:!0,class:!0,href:!0});var jL=l(Uo);ou=s(jL,"SPAN",{});var GL=l(ou);f(nl.$$.fragment,GL),GL.forEach(r),jL.forEach(r),$k=d(Lb),au=s(Lb,"SPAN",{});var WL=l(au);Tk=a(WL,"CUDA Extension Installation Notes"),WL.forEach(r),Lb.forEach(r),pg=d(t),cd=s(t,"P",{});var BL=l(cd);kk=a(BL,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),BL.forEach(r),hg=d(t),Pt=s(t,"P",{});var Mc=l(Pt);Pk=a(Mc,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),sl=s(Mc,"A",{href:!0,rel:!0});var VL=l(sl);Dk=a(VL,"FairScale"),VL.forEach(r),Ak=a(Mc," and "),ll=s(Mc,"A",{href:!0,rel:!0});var ZL=l(ll);xk=a(ZL,"Deepspeed"),ZL.forEach(r),Ok=a(Mc,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),Mc.forEach(r),mg=d(t),pd=s(t,"P",{});var YL=l(pd);Sk=a(YL,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),YL.forEach(r),fg=d(t),f(il.$$.fragment,t),ug=d(t),hd=s(t,"P",{});var JL=l(hd);Ck=a(JL,"please, read the following notes first."),JL.forEach(r),vg=d(t),Dt=s(t,"P",{});var Fc=l(Dt);Nk=a(Fc,"In these notes we give examples for what to do when "),nu=s(Fc,"CODE",{});var KL=l(nu);Ik=a(KL,"pytorch"),KL.forEach(r),zk=a(Fc," has been built with CUDA "),su=s(Fc,"CODE",{});var QL=l(su);Lk=a(QL,"10.2"),QL.forEach(r),qk=a(Fc,`. If your situation is
different remember to adjust the version number to the one you are after.`),Fc.forEach(r),_g=d(t),br=s(t,"H4",{class:!0});var qb=l(br);Ro=s(qb,"A",{id:!0,class:!0,href:!0});var XL=l(Ro);lu=s(XL,"SPAN",{});var eq=l(lu);f(dl.$$.fragment,eq),eq.forEach(r),XL.forEach(r),Uk=d(qb),iu=s(qb,"SPAN",{});var tq=l(iu);Rk=a(tq,"Possible problem #1"),tq.forEach(r),qb.forEach(r),gg=d(t),md=s(t,"P",{});var rq=l(md);Mk=a(rq,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),rq.forEach(r),yg=d(t),Ue=s(t,"P",{});var rn=l(Ue);Fk=a(rn,"For example, if you installed "),du=s(rn,"CODE",{});var oq=l(du);Hk=a(oq,"pytorch"),oq.forEach(r),jk=a(rn," with "),cu=s(rn,"CODE",{});var aq=l(cu);Gk=a(aq,"cudatoolkit==10.2"),aq.forEach(r),Wk=a(rn,` in the Python environment, you also need to have
CUDA `),pu=s(rn,"CODE",{});var nq=l(pu);Bk=a(nq,"10.2"),nq.forEach(r),Vk=a(rn," installed system-wide."),rn.forEach(r),bg=d(t),At=s(t,"P",{});var Hc=l(At);Zk=a(Hc,"The exact location may vary from system to system, but "),hu=s(Hc,"CODE",{});var sq=l(hu);Yk=a(sq,"/usr/local/cuda-10.2"),sq.forEach(r),Jk=a(Hc,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),mu=s(Hc,"CODE",{});var lq=l(mu);Kk=a(lq,"PATH"),lq.forEach(r),Qk=a(Hc,` environment variable, one can find the
installation location by doing:`),Hc.forEach(r),wg=d(t),f(cl.$$.fragment,t),Eg=d(t),Mo=s(t,"P",{});var Ub=l(Mo);Xk=a(Ub,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),pl=s(Ub,"A",{href:!0,rel:!0});var iq=l(pl);eP=a(iq,"ubuntu cuda 10.2 install"),iq.forEach(r),tP=a(Ub,"."),Ub.forEach(r),$g=d(t),wr=s(t,"H4",{class:!0});var Rb=l(wr);Fo=s(Rb,"A",{id:!0,class:!0,href:!0});var dq=l(Fo);fu=s(dq,"SPAN",{});var cq=l(fu);f(hl.$$.fragment,cq),cq.forEach(r),dq.forEach(r),rP=d(Rb),uu=s(Rb,"SPAN",{});var pq=l(uu);oP=a(pq,"Possible problem #2"),pq.forEach(r),Rb.forEach(r),Tg=d(t),fd=s(t,"P",{});var hq=l(fd);aP=a(hq,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),hq.forEach(r),kg=d(t),f(ml.$$.fragment,t),Pg=d(t),xt=s(t,"P",{});var jc=l(xt);nP=a(jc,"Now, in this situation you need to make sure that your "),vu=s(jc,"CODE",{});var mq=l(vu);sP=a(mq,"PATH"),mq.forEach(r),lP=a(jc," and "),_u=s(jc,"CODE",{});var fq=l(_u);iP=a(fq,"LD_LIBRARY_PATH"),fq.forEach(r),dP=a(jc,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),jc.forEach(r),Dg=d(t),ud=s(t,"P",{});var uq=l(ud);cP=a(uq,"First, you may look at their contents:"),uq.forEach(r),Ag=d(t),f(fl.$$.fragment,t),xg=d(t),vd=s(t,"P",{});var vq=l(vd);pP=a(vq,"so you get an idea of what is inside."),vq.forEach(r),Og=d(t),Ho=s(t,"P",{});var Mb=l(Ho);hP=a(Mb,"It\u2019s possible that "),gu=s(Mb,"CODE",{});var _q=l(gu);mP=a(_q,"LD_LIBRARY_PATH"),_q.forEach(r),fP=a(Mb," is empty."),Mb.forEach(r),Sg=d(t),et=s(t,"P",{});var hi=l(et);yu=s(hi,"CODE",{});var gq=l(yu);uP=a(gq,"PATH"),gq.forEach(r),vP=a(hi," lists the locations of where executables can be found and "),bu=s(hi,"CODE",{});var yq=l(bu);_P=a(yq,"LD_LIBRARY_PATH"),yq.forEach(r),gP=a(hi,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),wu=s(hi,"CODE",{});var bq=l(wu);yP=a(bq,":"),bq.forEach(r),bP=a(hi,` is used to separate multiple
entries.`),hi.forEach(r),Cg=d(t),_d=s(t,"P",{});var wq=l(_d);wP=a(wq,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),wq.forEach(r),Ng=d(t),f(ul.$$.fragment,t),Ig=d(t),gd=s(t,"P",{});var Eq=l(gd);EP=a(Eq,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),Eq.forEach(r),zg=d(t),Re=s(t,"P",{});var on=l(Re);$P=a(on,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Eu=s(on,"CODE",{});var $q=l(Eu);TP=a($q,"lib64"),$q.forEach(r),kP=a(on," sub-directory is where the various CUDA "),$u=s(on,"CODE",{});var Tq=l($u);PP=a(Tq,".so"),Tq.forEach(r),DP=a(on," objects, like "),Tu=s(on,"CODE",{});var kq=l(Tu);AP=a(kq,"libcudart.so"),kq.forEach(r),xP=a(on,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),on.forEach(r),Lg=d(t),Er=s(t,"H4",{class:!0});var Fb=l(Er);jo=s(Fb,"A",{id:!0,class:!0,href:!0});var Pq=l(jo);ku=s(Pq,"SPAN",{});var Dq=l(ku);f(vl.$$.fragment,Dq),Dq.forEach(r),Pq.forEach(r),OP=d(Fb),Pu=s(Fb,"SPAN",{});var Aq=l(Pu);SP=a(Aq,"Possible problem #3"),Aq.forEach(r),Fb.forEach(r),qg=d(t),Ot=s(t,"P",{});var Gc=l(Ot);CP=a(Gc,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Du=s(Gc,"CODE",{});var xq=l(Du);NP=a(xq,"gcc-9"),xq.forEach(r),IP=a(Gc,` but it wants
`),Au=s(Gc,"CODE",{});var Oq=l(Au);zP=a(Oq,"gcc-7"),Oq.forEach(r),LP=a(Gc,"."),Gc.forEach(r),Ug=d(t),yd=s(t,"P",{});var Sq=l(yd);qP=a(Sq,"There are various ways to go about it."),Sq.forEach(r),Rg=d(t),bd=s(t,"P",{});var Cq=l(bd);UP=a(Cq,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),Cq.forEach(r),Mg=d(t),Go=s(t,"P",{});var Hb=l(Go);RP=a(Hb,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),xu=s(Hb,"CODE",{});var Nq=l(xu);MP=a(Nq,"gcc-7"),Nq.forEach(r),FP=a(Hb,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Hb.forEach(r),Fg=d(t),f(_l.$$.fragment,t),Hg=d(t),H=s(t,"P",{});var me=l(H);HP=a(me,"Here, we are making a symlink to "),Ou=s(me,"CODE",{});var Iq=l(Ou);jP=a(Iq,"gcc-7"),Iq.forEach(r),GP=a(me," from "),Su=s(me,"CODE",{});var zq=l(Su);WP=a(zq,"/usr/local/cuda-10.2/bin/gcc"),zq.forEach(r),BP=a(me,` and since
`),Cu=s(me,"CODE",{});var Lq=l(Cu);VP=a(Lq,"/usr/local/cuda-10.2/bin/"),Lq.forEach(r),ZP=a(me," should be in the "),Nu=s(me,"CODE",{});var qq=l(Nu);YP=a(qq,"PATH"),qq.forEach(r),JP=a(me,` environment variable (see the previous problem\u2019s solution), it
should find `),Iu=s(me,"CODE",{});var Uq=l(Iu);KP=a(Uq,"gcc-7"),Uq.forEach(r),QP=a(me," (and "),zu=s(me,"CODE",{});var Rq=l(zu);XP=a(Rq,"g++7"),Rq.forEach(r),eD=a(me,") and then the build will succeed."),me.forEach(r),jg=d(t),wd=s(t,"P",{});var Mq=l(wd);tD=a(Mq,"As always make sure to edit the paths in the example to match your situation."),Mq.forEach(r),Gg=d(t),$r=s(t,"H3",{class:!0});var jb=l($r);Wo=s(jb,"A",{id:!0,class:!0,href:!0});var Fq=l(Wo);Lu=s(Fq,"SPAN",{});var Hq=l(Lu);f(gl.$$.fragment,Hq),Hq.forEach(r),Fq.forEach(r),rD=d(jb),qu=s(jb,"SPAN",{});var jq=l(qu);oD=a(jq,"FairScale"),jq.forEach(r),jb.forEach(r),Wg=d(t),Me=s(t,"P",{});var an=l(Me);aD=a(an,"By integrating "),yl=s(an,"A",{href:!0,rel:!0});var Gq=l(yl);nD=a(Gq,"FairScale"),Gq.forEach(r),sD=a(an," the "),Ed=s(an,"A",{href:!0});var Wq=l(Ed);lD=a(Wq,"Trainer"),Wq.forEach(r),iD=a(an,`
provides support for the following features from `),bl=s(an,"A",{href:!0,rel:!0});var Bq=l(bl);dD=a(Bq,"the ZeRO paper"),Bq.forEach(r),cD=a(an,":"),an.forEach(r),Bg=d(t),Fe=s(t,"OL",{});var nn=l(Fe);Uu=s(nn,"LI",{});var Vq=l(Uu);pD=a(Vq,"Optimizer State Sharding"),Vq.forEach(r),hD=d(nn),Ru=s(nn,"LI",{});var Zq=l(Ru);mD=a(Zq,"Gradient Sharding"),Zq.forEach(r),fD=d(nn),Mu=s(nn,"LI",{});var Yq=l(Mu);uD=a(Yq,"Model Parameters Sharding (new and very experimental)"),Yq.forEach(r),vD=d(nn),Fu=s(nn,"LI",{});var Jq=l(Fu);_D=a(Jq,"CPU offload (new and very experimental)"),Jq.forEach(r),nn.forEach(r),Vg=d(t),$d=s(t,"P",{});var Kq=l($d);gD=a(Kq,"You will need at least two GPUs to use this feature."),Kq.forEach(r),Zg=d(t),wl=s(t,"P",{});var RS=l(wl);Hu=s(RS,"STRONG",{});var Qq=l(Hu);yD=a(Qq,"Installation"),Qq.forEach(r),bD=a(RS,":"),RS.forEach(r),Yg=d(t),Td=s(t,"P",{});var Xq=l(Td);wD=a(Xq,"Install the library via pypi:"),Xq.forEach(r),Jg=d(t),f(El.$$.fragment,t),Kg=d(t),St=s(t,"P",{});var Wc=l(St);ED=a(Wc,"or via "),ju=s(Wc,"CODE",{});var eU=l(ju);$D=a(eU,"transformers"),eU.forEach(r),TD=a(Wc,"\u2019 "),Gu=s(Wc,"CODE",{});var tU=l(Gu);kD=a(tU,"extras"),tU.forEach(r),PD=a(Wc,":"),Wc.forEach(r),Qg=d(t),f($l.$$.fragment,t),Xg=d(t),Ct=s(t,"P",{});var Bc=l(Ct);DD=a(Bc,"(available starting from "),Wu=s(Bc,"CODE",{});var rU=l(Wu);AD=a(rU,"transformers==4.6.0"),rU.forEach(r),xD=a(Bc,") or find more details on "),Tl=s(Bc,"A",{href:!0,rel:!0});var oU=l(Tl);OD=a(oU,"the FairScale\u2019s GitHub page"),oU.forEach(r),SD=a(Bc,"."),Bc.forEach(r),e1=d(t),Bo=s(t,"P",{});var Gb=l(Bo);CD=a(Gb,"If you\u2019re still struggling with the build, first make sure to read "),kd=s(Gb,"A",{href:!0});var aU=l(kd);ND=a(aU,"CUDA Extension Installation Notes"),aU.forEach(r),ID=a(Gb,"."),Gb.forEach(r),t1=d(t),Pd=s(t,"P",{});var nU=l(Pd);zD=a(nU,"If it\u2019s still not resolved the build issue, here are a few more ideas."),nU.forEach(r),r1=d(t),kl=s(t,"P",{});var MS=l(kl);Bu=s(MS,"CODE",{});var sU=l(Bu);LD=a(sU,"fairscale"),sU.forEach(r),qD=a(MS,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),MS.forEach(r),o1=d(t),f(Pl.$$.fragment,t),a1=d(t),Dd=s(t,"P",{});var lU=l(Dd);UD=a(lU,"or:"),lU.forEach(r),n1=d(t),f(Dl.$$.fragment,t),s1=d(t),Al=s(t,"P",{});var FS=l(Al);Vu=s(FS,"CODE",{});var iU=l(Vu);RD=a(iU,"fairscale"),iU.forEach(r),MD=a(FS," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),FS.forEach(r),l1=d(t),f(xl.$$.fragment,t),i1=d(t),Ad=s(t,"P",{});var dU=l(Ad);FD=a(dU,"or:"),dU.forEach(r),d1=d(t),f(Ol.$$.fragment,t),c1=d(t),xd=s(t,"P",{});var cU=l(xd);HD=a(cU,"Of course, adjust the urls to match the cuda version you use."),cU.forEach(r),p1=d(t),Vo=s(t,"P",{});var Wb=l(Vo);jD=a(Wb,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Sl=s(Wb,"A",{href:!0,rel:!0});var pU=l(Sl);GD=a(pU,"FairScale"),pU.forEach(r),WD=a(Wb,"."),Wb.forEach(r),h1=d(t),Cl=s(t,"P",{});var HS=l(Cl);Zu=s(HS,"STRONG",{});var hU=l(Zu);BD=a(hU,"Usage"),hU.forEach(r),VD=a(HS,":"),HS.forEach(r),m1=d(t),Nt=s(t,"P",{});var Vc=l(Nt);ZD=a(Vc,"To use the first version of Sharded data-parallelism, add "),Yu=s(Vc,"CODE",{});var mU=l(Yu);YD=a(mU,"--sharded_ddp simple"),mU.forEach(r),JD=a(Vc,` to the command line arguments, and
make sure you have added the distributed launcher `),Ju=s(Vc,"CODE",{});var fU=l(Ju);KD=a(fU,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),fU.forEach(r),QD=a(Vc," if you haven\u2019t been using it already."),Vc.forEach(r),f1=d(t),Zo=s(t,"P",{});var Bb=l(Zo);XD=a(Bb,"For example here is how you could use it for "),Ku=s(Bb,"CODE",{});var uU=l(Ku);eA=a(uU,"run_translation.py"),uU.forEach(r),tA=a(Bb," with 2 GPUs:"),Bb.forEach(r),u1=d(t),f(Nl.$$.fragment,t),v1=d(t),Od=s(t,"P",{});var vU=l(Od);rA=a(vU,"Notes:"),vU.forEach(r),_1=d(t),He=s(t,"UL",{});var sn=l(He);Qu=s(sn,"LI",{});var _U=l(Qu);oA=a(_U,"This feature requires distributed training (so multiple GPUs)."),_U.forEach(r),aA=d(sn),Xu=s(sn,"LI",{});var gU=l(Xu);nA=a(gU,"It is not implemented for TPUs."),gU.forEach(r),sA=d(sn),Il=s(sn,"LI",{});var Vb=l(Il);lA=a(Vb,"It works with "),ev=s(Vb,"CODE",{});var yU=l(ev);iA=a(yU,"--fp16"),yU.forEach(r),dA=a(Vb," too, to make things even faster."),Vb.forEach(r),cA=d(sn),zl=s(sn,"LI",{});var Zb=l(zl);pA=a(Zb,"One of the main benefits of enabling "),tv=s(Zb,"CODE",{});var bU=l(tv);hA=a(bU,"--sharded_ddp simple"),bU.forEach(r),mA=a(Zb,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Zb.forEach(r),sn.forEach(r),g1=d(t),Ll=s(t,"OL",{start:!0});var wU=l(Ll);tt=s(wU,"LI",{});var ln=l(tt);fA=a(ln,"To use the second version of Sharded data-parallelism, add "),rv=s(ln,"CODE",{});var EU=l(rv);uA=a(EU,"--sharded_ddp zero_dp_2"),EU.forEach(r),vA=a(ln," or "),ov=s(ln,"CODE",{});var $U=l(ov);_A=a($U,"--sharded_ddp zero_dp_3"),$U.forEach(r),gA=a(ln," to the command line arguments, and make sure you have added the distributed launcher "),av=s(ln,"CODE",{});var TU=l(av);yA=a(TU,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),TU.forEach(r),bA=a(ln," if you haven\u2019t been using it already."),ln.forEach(r),wU.forEach(r),y1=d(t),Yo=s(t,"P",{});var Yb=l(Yo);wA=a(Yb,"For example here is how you could use it for "),nv=s(Yb,"CODE",{});var kU=l(nv);EA=a(kU,"run_translation.py"),kU.forEach(r),$A=a(Yb," with 2 GPUs:"),Yb.forEach(r),b1=d(t),f(ql.$$.fragment,t),w1=d(t),Tr=s(t,"P",{});var w_=l(Tr);sv=s(w_,"CODE",{});var PU=l(sv);TA=a(PU,"zero_dp_2"),PU.forEach(r),kA=a(w_," is an optimized version of the simple wrapper, while "),lv=s(w_,"CODE",{});var DU=l(lv);PA=a(DU,"zero_dp_3"),DU.forEach(r),DA=a(w_,` fully shards model weights,
gradients and optimizer states.`),w_.forEach(r),E1=d(t),It=s(t,"P",{});var Zc=l(It);AA=a(Zc,"Both are compatible with adding "),iv=s(Zc,"CODE",{});var AU=l(iv);xA=a(AU,"cpu_offload"),AU.forEach(r),OA=a(Zc," to enable ZeRO-offload (activate it like this: "),dv=s(Zc,"CODE",{});var xU=l(dv);SA=a(xU,'--sharded_ddp "zero_dp_2 cpu_offload"'),xU.forEach(r),CA=a(Zc,")."),Zc.forEach(r),$1=d(t),Sd=s(t,"P",{});var OU=l(Sd);NA=a(OU,"Notes:"),OU.forEach(r),T1=d(t),he=s(t,"UL",{});var Gt=l(he);cv=s(Gt,"LI",{});var SU=l(cv);IA=a(SU,"This feature requires distributed training (so multiple GPUs)."),SU.forEach(r),zA=d(Gt),pv=s(Gt,"LI",{});var CU=l(pv);LA=a(CU,"It is not implemented for TPUs."),CU.forEach(r),qA=d(Gt),Ul=s(Gt,"LI",{});var Jb=l(Ul);UA=a(Jb,"It works with "),hv=s(Jb,"CODE",{});var NU=l(hv);RA=a(NU,"--fp16"),NU.forEach(r),MA=a(Jb," too, to make things even faster."),Jb.forEach(r),FA=d(Gt),kr=s(Gt,"LI",{});var Yc=l(kr);HA=a(Yc,"The "),mv=s(Yc,"CODE",{});var IU=l(mv);jA=a(IU,"cpu_offload"),IU.forEach(r),GA=a(Yc," additional option requires "),fv=s(Yc,"CODE",{});var zU=l(fv);WA=a(zU,"--fp16"),zU.forEach(r),BA=a(Yc,"."),Yc.forEach(r),VA=d(Gt),uv=s(Gt,"LI",{});var LU=l(uv);ZA=a(LU,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),LU.forEach(r),Gt.forEach(r),k1=d(t),Cd=s(t,"P",{});var qU=l(Cd);YA=a(qU,"Known caveats:"),qU.forEach(r),P1=d(t),Jo=s(t,"UL",{});var Kb=l(Jo);Pr=s(Kb,"LI",{});var Jc=l(Pr);JA=a(Jc,"This feature is incompatible with "),vv=s(Jc,"CODE",{});var UU=l(vv);KA=a(UU,"--predict_with_generate"),UU.forEach(r),QA=a(Jc," in the "),_v=s(Jc,"EM",{});var RU=l(_v);XA=a(RU,"run_translation.py"),RU.forEach(r),ex=a(Jc," script."),Jc.forEach(r),tx=d(Kb),ke=s(Kb,"LI",{});var Wt=l(ke);rx=a(Wt,"Using "),gv=s(Wt,"CODE",{});var MU=l(gv);ox=a(MU,"--sharded_ddp zero_dp_3"),MU.forEach(r),ax=a(Wt,` requires wrapping each layer of the model in the special container
`),yv=s(Wt,"CODE",{});var FU=l(yv);nx=a(FU,"FullyShardedDataParallelism"),FU.forEach(r),sx=a(Wt," of fairscale. It should be used with the option "),bv=s(Wt,"CODE",{});var HU=l(bv);lx=a(HU,"auto_wrap"),HU.forEach(r),ix=a(Wt,` if you are not
doing this yourself: `),wv=s(Wt,"CODE",{});var jU=l(wv);dx=a(jU,'--sharded_ddp "zero_dp_3 auto_wrap"'),jU.forEach(r),cx=a(Wt,"."),Wt.forEach(r),Kb.forEach(r),D1=d(t),Dr=s(t,"H3",{class:!0});var Qb=l(Dr);Ko=s(Qb,"A",{id:!0,class:!0,href:!0});var GU=l(Ko);Ev=s(GU,"SPAN",{});var WU=l(Ev);f(Rl.$$.fragment,WU),WU.forEach(r),GU.forEach(r),px=d(Qb),$v=s(Qb,"SPAN",{});var BU=l($v);hx=a(BU,"DeepSpeed"),BU.forEach(r),Qb.forEach(r),A1=d(t),Qo=s(t,"P",{});var Xb=l(Qo);mx=a(Xb,"Moved to "),Nd=s(Xb,"A",{href:!0});var VU=l(Nd);fx=a(VU,"Trainer DeepSpeed integration"),VU.forEach(r),ux=a(Xb,"."),Xb.forEach(r),x1=d(t),Ar=s(t,"H4",{class:!0});var ew=l(Ar);Xo=s(ew,"A",{id:!0,class:!0,href:!0});var ZU=l(Xo);Tv=s(ZU,"SPAN",{});var YU=l(Tv);f(Ml.$$.fragment,YU),YU.forEach(r),ZU.forEach(r),vx=d(ew),kv=s(ew,"SPAN",{});var JU=l(kv);_x=a(JU,"Installation"),JU.forEach(r),ew.forEach(r),O1=d(t),ea=s(t,"P",{});var tw=l(ea);gx=a(tw,"Moved to "),Id=s(tw,"A",{href:!0});var KU=l(Id);yx=a(KU,"Installation"),KU.forEach(r),bx=a(tw,"."),tw.forEach(r),S1=d(t),xr=s(t,"H4",{class:!0});var rw=l(xr);ta=s(rw,"A",{id:!0,class:!0,href:!0});var QU=l(ta);Pv=s(QU,"SPAN",{});var XU=l(Pv);f(Fl.$$.fragment,XU),XU.forEach(r),QU.forEach(r),wx=d(rw),Dv=s(rw,"SPAN",{});var eR=l(Dv);Ex=a(eR,"Deployment with multiple GPUs"),eR.forEach(r),rw.forEach(r),C1=d(t),ra=s(t,"P",{});var ow=l(ra);$x=a(ow,"Moved to "),zd=s(ow,"A",{href:!0});var tR=l(zd);Tx=a(tR,"Deployment with multiple GPUs"),tR.forEach(r),kx=a(ow,"."),ow.forEach(r),N1=d(t),Or=s(t,"H4",{class:!0});var aw=l(Or);oa=s(aw,"A",{id:!0,class:!0,href:!0});var rR=l(oa);Av=s(rR,"SPAN",{});var oR=l(Av);f(Hl.$$.fragment,oR),oR.forEach(r),rR.forEach(r),Px=d(aw),xv=s(aw,"SPAN",{});var aR=l(xv);Dx=a(aR,"Deployment with one GPU"),aR.forEach(r),aw.forEach(r),I1=d(t),aa=s(t,"P",{});var nw=l(aa);Ax=a(nw,"Moved to "),Ld=s(nw,"A",{href:!0});var nR=l(Ld);xx=a(nR,"Deployment with one GPU"),nR.forEach(r),Ox=a(nw,"."),nw.forEach(r),z1=d(t),Sr=s(t,"H4",{class:!0});var sw=l(Sr);na=s(sw,"A",{id:!0,class:!0,href:!0});var sR=l(na);Ov=s(sR,"SPAN",{});var lR=l(Ov);f(jl.$$.fragment,lR),lR.forEach(r),sR.forEach(r),Sx=d(sw),Sv=s(sw,"SPAN",{});var iR=l(Sv);Cx=a(iR,"Deployment in Notebooks"),iR.forEach(r),sw.forEach(r),L1=d(t),sa=s(t,"P",{});var lw=l(sa);Nx=a(lw,"Moved to "),qd=s(lw,"A",{href:!0});var dR=l(qd);Ix=a(dR,"Deployment in Notebooks"),dR.forEach(r),zx=a(lw,"."),lw.forEach(r),q1=d(t),Cr=s(t,"H4",{class:!0});var iw=l(Cr);la=s(iw,"A",{id:!0,class:!0,href:!0});var cR=l(la);Cv=s(cR,"SPAN",{});var pR=l(Cv);f(Gl.$$.fragment,pR),pR.forEach(r),cR.forEach(r),Lx=d(iw),Nv=s(iw,"SPAN",{});var hR=l(Nv);qx=a(hR,"Configuration"),hR.forEach(r),iw.forEach(r),U1=d(t),ia=s(t,"P",{});var dw=l(ia);Ux=a(dw,"Moved to "),Ud=s(dw,"A",{href:!0});var mR=l(Ud);Rx=a(mR,"Configuration"),mR.forEach(r),Mx=a(dw,"."),dw.forEach(r),R1=d(t),Nr=s(t,"H4",{class:!0});var cw=l(Nr);da=s(cw,"A",{id:!0,class:!0,href:!0});var fR=l(da);Iv=s(fR,"SPAN",{});var uR=l(Iv);f(Wl.$$.fragment,uR),uR.forEach(r),fR.forEach(r),Fx=d(cw),zv=s(cw,"SPAN",{});var vR=l(zv);Hx=a(vR,"Passing Configuration"),vR.forEach(r),cw.forEach(r),M1=d(t),ca=s(t,"P",{});var pw=l(ca);jx=a(pw,"Moved to "),Rd=s(pw,"A",{href:!0});var _R=l(Rd);Gx=a(_R,"Passing Configuration"),_R.forEach(r),Wx=a(pw,"."),pw.forEach(r),F1=d(t),Ir=s(t,"H4",{class:!0});var hw=l(Ir);pa=s(hw,"A",{id:!0,class:!0,href:!0});var gR=l(pa);Lv=s(gR,"SPAN",{});var yR=l(Lv);f(Bl.$$.fragment,yR),yR.forEach(r),gR.forEach(r),Bx=d(hw),qv=s(hw,"SPAN",{});var bR=l(qv);Vx=a(bR,"Shared Configuration"),bR.forEach(r),hw.forEach(r),H1=d(t),ha=s(t,"P",{});var mw=l(ha);Zx=a(mw,"Moved to "),Md=s(mw,"A",{href:!0});var wR=l(Md);Yx=a(wR,"Shared Configuration"),wR.forEach(r),Jx=a(mw,"."),mw.forEach(r),j1=d(t),zr=s(t,"H4",{class:!0});var fw=l(zr);ma=s(fw,"A",{id:!0,class:!0,href:!0});var ER=l(ma);Uv=s(ER,"SPAN",{});var $R=l(Uv);f(Vl.$$.fragment,$R),$R.forEach(r),ER.forEach(r),Kx=d(fw),Rv=s(fw,"SPAN",{});var TR=l(Rv);Qx=a(TR,"ZeRO"),TR.forEach(r),fw.forEach(r),G1=d(t),fa=s(t,"P",{});var uw=l(fa);Xx=a(uw,"Moved to "),Fd=s(uw,"A",{href:!0});var kR=l(Fd);eO=a(kR,"ZeRO"),kR.forEach(r),tO=a(uw,"."),uw.forEach(r),W1=d(t),Lr=s(t,"H5",{class:!0});var vw=l(Lr);ua=s(vw,"A",{id:!0,class:!0,href:!0});var PR=l(ua);Mv=s(PR,"SPAN",{});var DR=l(Mv);f(Zl.$$.fragment,DR),DR.forEach(r),PR.forEach(r),rO=d(vw),Fv=s(vw,"SPAN",{});var AR=l(Fv);oO=a(AR,"ZeRO-2 Config"),AR.forEach(r),vw.forEach(r),B1=d(t),va=s(t,"P",{});var _w=l(va);aO=a(_w,"Moved to "),Hd=s(_w,"A",{href:!0});var xR=l(Hd);nO=a(xR,"ZeRO-2 Config"),xR.forEach(r),sO=a(_w,"."),_w.forEach(r),V1=d(t),qr=s(t,"H5",{class:!0});var gw=l(qr);_a=s(gw,"A",{id:!0,class:!0,href:!0});var OR=l(_a);Hv=s(OR,"SPAN",{});var SR=l(Hv);f(Yl.$$.fragment,SR),SR.forEach(r),OR.forEach(r),lO=d(gw),jv=s(gw,"SPAN",{});var CR=l(jv);iO=a(CR,"ZeRO-3 Config"),CR.forEach(r),gw.forEach(r),Z1=d(t),ga=s(t,"P",{});var yw=l(ga);dO=a(yw,"Moved to "),jd=s(yw,"A",{href:!0});var NR=l(jd);cO=a(NR,"ZeRO-3 Config"),NR.forEach(r),pO=a(yw,"."),yw.forEach(r),Y1=d(t),Ur=s(t,"H4",{class:!0});var bw=l(Ur);ya=s(bw,"A",{id:!0,class:!0,href:!0});var IR=l(ya);Gv=s(IR,"SPAN",{});var zR=l(Gv);f(Jl.$$.fragment,zR),zR.forEach(r),IR.forEach(r),hO=d(bw),Wv=s(bw,"SPAN",{});var LR=l(Wv);mO=a(LR,"NVMe Support"),LR.forEach(r),bw.forEach(r),J1=d(t),ba=s(t,"P",{});var ww=l(ba);fO=a(ww,"Moved to "),Gd=s(ww,"A",{href:!0});var qR=l(Gd);uO=a(qR,"NVMe Support"),qR.forEach(r),vO=a(ww,"."),ww.forEach(r),K1=d(t),Rr=s(t,"H5",{class:!0});var Ew=l(Rr);wa=s(Ew,"A",{id:!0,class:!0,href:!0});var UR=l(wa);Bv=s(UR,"SPAN",{});var RR=l(Bv);f(Kl.$$.fragment,RR),RR.forEach(r),UR.forEach(r),_O=d(Ew),Vv=s(Ew,"SPAN",{});var MR=l(Vv);gO=a(MR,"ZeRO-2 vs ZeRO-3 Performance"),MR.forEach(r),Ew.forEach(r),Q1=d(t),Ea=s(t,"P",{});var $w=l(Ea);yO=a($w,"Moved to "),Wd=s($w,"A",{href:!0});var FR=l(Wd);bO=a(FR,"ZeRO-2 vs ZeRO-3 Performance"),FR.forEach(r),wO=a($w,"."),$w.forEach(r),X1=d(t),Mr=s(t,"H5",{class:!0});var Tw=l(Mr);$a=s(Tw,"A",{id:!0,class:!0,href:!0});var HR=l($a);Zv=s(HR,"SPAN",{});var jR=l(Zv);f(Ql.$$.fragment,jR),jR.forEach(r),HR.forEach(r),EO=d(Tw),Yv=s(Tw,"SPAN",{});var GR=l(Yv);$O=a(GR,"ZeRO-2 Example"),GR.forEach(r),Tw.forEach(r),ey=d(t),Ta=s(t,"P",{});var kw=l(Ta);TO=a(kw,"Moved to "),Bd=s(kw,"A",{href:!0});var WR=l(Bd);kO=a(WR,"ZeRO-2 Example"),WR.forEach(r),PO=a(kw,"."),kw.forEach(r),ty=d(t),Fr=s(t,"H5",{class:!0});var Pw=l(Fr);ka=s(Pw,"A",{id:!0,class:!0,href:!0});var BR=l(ka);Jv=s(BR,"SPAN",{});var VR=l(Jv);f(Xl.$$.fragment,VR),VR.forEach(r),BR.forEach(r),DO=d(Pw),Kv=s(Pw,"SPAN",{});var ZR=l(Kv);AO=a(ZR,"ZeRO-3 Example"),ZR.forEach(r),Pw.forEach(r),ry=d(t),Pa=s(t,"P",{});var Dw=l(Pa);xO=a(Dw,"Moved to "),Vd=s(Dw,"A",{href:!0});var YR=l(Vd);OO=a(YR,"ZeRO-3 Example"),YR.forEach(r),SO=a(Dw,"."),Dw.forEach(r),oy=d(t),Hr=s(t,"H4",{class:!0});var Aw=l(Hr);Da=s(Aw,"A",{id:!0,class:!0,href:!0});var JR=l(Da);Qv=s(JR,"SPAN",{});var KR=l(Qv);f(ei.$$.fragment,KR),KR.forEach(r),JR.forEach(r),CO=d(Aw),Xv=s(Aw,"SPAN",{});var QR=l(Xv);NO=a(QR,"Optimizer and Scheduler"),QR.forEach(r),Aw.forEach(r),ay=d(t),jr=s(t,"H5",{class:!0});var xw=l(jr);Aa=s(xw,"A",{id:!0,class:!0,href:!0});var XR=l(Aa);e_=s(XR,"SPAN",{});var eM=l(e_);f(ti.$$.fragment,eM),eM.forEach(r),XR.forEach(r),IO=d(xw),t_=s(xw,"SPAN",{});var tM=l(t_);zO=a(tM,"Optimizer"),tM.forEach(r),xw.forEach(r),ny=d(t),xa=s(t,"P",{});var Ow=l(xa);LO=a(Ow,"Moved to "),Zd=s(Ow,"A",{href:!0});var rM=l(Zd);qO=a(rM,"Optimizer"),rM.forEach(r),UO=a(Ow,"."),Ow.forEach(r),sy=d(t),Gr=s(t,"H5",{class:!0});var Sw=l(Gr);Oa=s(Sw,"A",{id:!0,class:!0,href:!0});var oM=l(Oa);r_=s(oM,"SPAN",{});var aM=l(r_);f(ri.$$.fragment,aM),aM.forEach(r),oM.forEach(r),RO=d(Sw),o_=s(Sw,"SPAN",{});var nM=l(o_);MO=a(nM,"Scheduler"),nM.forEach(r),Sw.forEach(r),ly=d(t),Sa=s(t,"P",{});var Cw=l(Sa);FO=a(Cw,"Moved to "),Yd=s(Cw,"A",{href:!0});var sM=l(Yd);HO=a(sM,"Scheduler"),sM.forEach(r),jO=a(Cw,"."),Cw.forEach(r),iy=d(t),Wr=s(t,"H4",{class:!0});var Nw=l(Wr);Ca=s(Nw,"A",{id:!0,class:!0,href:!0});var lM=l(Ca);a_=s(lM,"SPAN",{});var iM=l(a_);f(oi.$$.fragment,iM),iM.forEach(r),lM.forEach(r),GO=d(Nw),n_=s(Nw,"SPAN",{});var dM=l(n_);WO=a(dM,"fp32 Precision"),dM.forEach(r),Nw.forEach(r),dy=d(t),Na=s(t,"P",{});var Iw=l(Na);BO=a(Iw,"Moved to "),Jd=s(Iw,"A",{href:!0});var cM=l(Jd);VO=a(cM,"fp32 Precision"),cM.forEach(r),ZO=a(Iw,"."),Iw.forEach(r),cy=d(t),Br=s(t,"H4",{class:!0});var zw=l(Br);Ia=s(zw,"A",{id:!0,class:!0,href:!0});var pM=l(Ia);s_=s(pM,"SPAN",{});var hM=l(s_);f(ai.$$.fragment,hM),hM.forEach(r),pM.forEach(r),YO=d(zw),l_=s(zw,"SPAN",{});var mM=l(l_);JO=a(mM,"Automatic Mixed Precision"),mM.forEach(r),zw.forEach(r),py=d(t),za=s(t,"P",{});var Lw=l(za);KO=a(Lw,"Moved to "),Kd=s(Lw,"A",{href:!0});var fM=l(Kd);QO=a(fM,"Automatic Mixed Precision"),fM.forEach(r),XO=a(Lw,"."),Lw.forEach(r),hy=d(t),Vr=s(t,"H4",{class:!0});var qw=l(Vr);La=s(qw,"A",{id:!0,class:!0,href:!0});var uM=l(La);i_=s(uM,"SPAN",{});var vM=l(i_);f(ni.$$.fragment,vM),vM.forEach(r),uM.forEach(r),eS=d(qw),d_=s(qw,"SPAN",{});var _M=l(d_);tS=a(_M,"Batch Size"),_M.forEach(r),qw.forEach(r),my=d(t),qa=s(t,"P",{});var Uw=l(qa);rS=a(Uw,"Moved to "),Qd=s(Uw,"A",{href:!0});var gM=l(Qd);oS=a(gM,"Batch Size"),gM.forEach(r),aS=a(Uw,"."),Uw.forEach(r),fy=d(t),Zr=s(t,"H4",{class:!0});var Rw=l(Zr);Ua=s(Rw,"A",{id:!0,class:!0,href:!0});var yM=l(Ua);c_=s(yM,"SPAN",{});var bM=l(c_);f(si.$$.fragment,bM),bM.forEach(r),yM.forEach(r),nS=d(Rw),p_=s(Rw,"SPAN",{});var wM=l(p_);sS=a(wM,"Gradient Accumulation"),wM.forEach(r),Rw.forEach(r),uy=d(t),Ra=s(t,"P",{});var Mw=l(Ra);lS=a(Mw,"Moved to "),Xd=s(Mw,"A",{href:!0});var EM=l(Xd);iS=a(EM,"Gradient Accumulation"),EM.forEach(r),dS=a(Mw,"."),Mw.forEach(r),vy=d(t),Yr=s(t,"H4",{class:!0});var Fw=l(Yr);Ma=s(Fw,"A",{id:!0,class:!0,href:!0});var $M=l(Ma);h_=s($M,"SPAN",{});var TM=l(h_);f(li.$$.fragment,TM),TM.forEach(r),$M.forEach(r),cS=d(Fw),m_=s(Fw,"SPAN",{});var kM=l(m_);pS=a(kM,"Gradient Clipping"),kM.forEach(r),Fw.forEach(r),_y=d(t),Fa=s(t,"P",{});var Hw=l(Fa);hS=a(Hw,"Moved to "),ec=s(Hw,"A",{href:!0});var PM=l(ec);mS=a(PM,"Gradient Clipping"),PM.forEach(r),fS=a(Hw,"."),Hw.forEach(r),gy=d(t),Jr=s(t,"H4",{class:!0});var jw=l(Jr);Ha=s(jw,"A",{id:!0,class:!0,href:!0});var DM=l(Ha);f_=s(DM,"SPAN",{});var AM=l(f_);f(ii.$$.fragment,AM),AM.forEach(r),DM.forEach(r),uS=d(jw),u_=s(jw,"SPAN",{});var xM=l(u_);vS=a(xM,"Getting The Model Weights Out"),xM.forEach(r),jw.forEach(r),yy=d(t),ja=s(t,"P",{});var Gw=l(ja);_S=a(Gw,"Moved to "),tc=s(Gw,"A",{href:!0});var OM=l(tc);gS=a(OM,"Getting The Model Weights Out"),OM.forEach(r),yS=a(Gw,"."),Gw.forEach(r),this.h()},h(){h(w,"name","hf:doc:metadata"),h(w,"content",JSON.stringify(MM)),h(P,"id","trainer"),h(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(P,"href","#trainer"),h(T,"class","relative group"),h(le,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Y,"href","../examples"),h(oe,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(_e,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(ge,"href","https://github.com/NVIDIA/apex"),h(ge,"rel","nofollow"),h(ye,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Ai,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(xi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Oi,"href","callback"),h(oo,"id","transformers.Trainer"),h(oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oo,"href","#transformers.Trainer"),h(Vt,"class","relative group"),h(Si,"href","/docs/transformers/v4.14.1/en/main_classes/model#transformers.PreTrainedModel"),h(no,"class","docstring"),h(so,"class","docstring"),h(lt,"class","docstring"),h(it,"class","docstring"),h(dt,"class","docstring"),h(lo,"class","docstring"),h(Oe,"class","docstring"),h(ct,"class","docstring"),h(Ni,"href","/docs/transformers/v4.14.1/en/main_classes/model#transformers.PreTrainedModel"),h(io,"class","docstring"),h(pt,"class","docstring"),h(ht,"class","docstring"),h(Se,"class","docstring"),h(mt,"class","docstring"),h(po,"class","docstring"),h(ho,"class","docstring"),h(mo,"class","docstring"),h(ft,"class","docstring"),h(zi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Zn,"href","https://github.com/pytorch/pytorch/issues/16266"),h(Zn,"rel","nofollow"),h(Li,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(qi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(I,"class","docstring"),h(fo,"class","docstring"),h(vt,"class","docstring"),h(_t,"class","docstring"),h(Q,"class","docstring"),h(gt,"class","docstring"),h(yt,"class","docstring"),h(vo,"class","docstring"),h(_o,"class","docstring"),h(Ce,"class","docstring"),h(bt,"class","docstring"),h(wt,"class","docstring"),h(go,"class","docstring"),h(Et,"class","docstring"),h(y,"class","docstring"),h(yo,"id","transformers.Seq2SeqTrainer"),h(yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(yo,"href","#transformers.Seq2SeqTrainer"),h(or,"class","relative group"),h(Ne,"class","docstring"),h(X,"class","docstring"),h(ar,"class","docstring"),h(wo,"id","transformers.TrainingArguments"),h(wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(wo,"href","#transformers.TrainingArguments"),h(ir,"class","relative group"),h(Ri,"href","/docs/transformers/v4.14.1/en/internal/trainer_utils#transformers.HfArgumentParser"),h(Os,"href","https://docs.python.org/3/library/argparse.html#module-argparse"),h(Os,"rel","nofollow"),h(de,"class","docstring"),h(Eo,"class","docstring"),h($t,"class","docstring"),h($o,"class","docstring"),h(To,"class","docstring"),h(ko,"class","docstring"),h(C,"class","docstring"),h(Po,"id","transformers.Seq2SeqTrainingArguments"),h(Po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Po,"href","#transformers.Seq2SeqTrainingArguments"),h(mr,"class","relative group"),h(Mi,"href","/docs/transformers/v4.14.1/en/internal/trainer_utils#transformers.HfArgumentParser"),h(Hs,"href","https://docs.python.org/3/library/argparse.html#module-argparse"),h(Hs,"rel","nofollow"),h(ne,"class","docstring"),h(Do,"id","checkpoints"),h(Do,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Do,"href","#checkpoints"),h(ur,"class","relative group"),h(Fi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Hi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(ji,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer.train"),h(Bi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(Co,"id","logging"),h(Co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Co,"href","#logging"),h(vr,"class","relative group"),h(Zi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(Yi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(Qi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.TrainingArguments"),h(Xi,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(ed,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(zo,"id","randomness"),h(zo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(zo,"href","#randomness"),h(_r,"class","relative group"),h(sd,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(el,"href","https://pytorch.org/docs/stable/notes/randomness"),h(el,"rel","nofollow"),h(Lo,"id","trainer-integrations"),h(Lo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Lo,"href","#trainer-integrations"),h(gr,"class","relative group"),h(ld,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(rl,"href","https://github.com/microsoft/DeepSpeed"),h(rl,"rel","nofollow"),h(ol,"href","https://github.com/facebookresearch/fairscale/"),h(ol,"rel","nofollow"),h(al,"href","https://arxiv.org/abs/1910.02054"),h(al,"rel","nofollow"),h(dd,"id","zero-install-notes"),h(Uo,"id","cuda-extension-installation-notes"),h(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Uo,"href","#cuda-extension-installation-notes"),h(yr,"class","relative group"),h(sl,"href","https://github.com/facebookresearch/fairscale/issues"),h(sl,"rel","nofollow"),h(ll,"href","https://github.com/microsoft/DeepSpeed/issues"),h(ll,"rel","nofollow"),h(Ro,"id","possible-problem-1"),h(Ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ro,"href","#possible-problem-1"),h(br,"class","relative group"),h(pl,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),h(pl,"rel","nofollow"),h(Fo,"id","possible-problem-2"),h(Fo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Fo,"href","#possible-problem-2"),h(wr,"class","relative group"),h(jo,"id","possible-problem-3"),h(jo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(jo,"href","#possible-problem-3"),h(Er,"class","relative group"),h(Wo,"id","fairscale"),h(Wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Wo,"href","#fairscale"),h($r,"class","relative group"),h(yl,"href","https://github.com/facebookresearch/fairscale/"),h(yl,"rel","nofollow"),h(Ed,"href","/docs/transformers/v4.14.1/en/main_classes/trainer#transformers.Trainer"),h(bl,"href","https://arxiv.org/abs/1910.02054"),h(bl,"rel","nofollow"),h(Tl,"href","https://github.com/facebookresearch/fairscale/#installation"),h(Tl,"rel","nofollow"),h(kd,"href","#zero-install-notes"),h(Sl,"href","https://github.com/facebookresearch/fairscale/issues"),h(Sl,"rel","nofollow"),h(Ll,"start","3"),h(Ko,"id","deepspeed"),h(Ko,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ko,"href","#deepspeed"),h(Dr,"class","relative group"),h(Nd,"href","deepspeed#trainer-deepspeed-integration"),h(Xo,"id","installation"),h(Xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Xo,"href","#installation"),h(Ar,"class","relative group"),h(Id,"href","deepspeed#deepspeed-installation"),h(ta,"id","deployment-with-multiple-gpus"),h(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ta,"href","#deployment-with-multiple-gpus"),h(xr,"class","relative group"),h(zd,"href","deepspeed#deepspeed-multi-gpu"),h(oa,"id","deployment-with-one-gpu"),h(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(oa,"href","#deployment-with-one-gpu"),h(Or,"class","relative group"),h(Ld,"href","deepspeed#deepspeed-one-gpu"),h(na,"id","deployment-in-notebooks"),h(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(na,"href","#deployment-in-notebooks"),h(Sr,"class","relative group"),h(qd,"href","deepspeed#deepspeed-notebook"),h(la,"id","configuration"),h(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(la,"href","#configuration"),h(Cr,"class","relative group"),h(Ud,"href","deepspeed#deepspeed-config"),h(da,"id","passing-configuration"),h(da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(da,"href","#passing-configuration"),h(Nr,"class","relative group"),h(Rd,"href","deepspeed#deepspeed-config-passing"),h(pa,"id","shared-configuration"),h(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(pa,"href","#shared-configuration"),h(Ir,"class","relative group"),h(Md,"href","deepspeed#deepspeed-config-shared"),h(ma,"id","zero"),h(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ma,"href","#zero"),h(zr,"class","relative group"),h(Fd,"href","deepspeed#deepspeed-zero"),h(ua,"id","zero2-config"),h(ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ua,"href","#zero2-config"),h(Lr,"class","relative group"),h(Hd,"href","deepspeed#deepspeed-zero2-config"),h(_a,"id","zero3-config"),h(_a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(_a,"href","#zero3-config"),h(qr,"class","relative group"),h(jd,"href","deepspeed#deepspeed-zero3-config"),h(ya,"id","nvme-support"),h(ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ya,"href","#nvme-support"),h(Ur,"class","relative group"),h(Gd,"href","deepspeed#deepspeed-nvme"),h(wa,"id","zero2-vs-zero3-performance"),h(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(wa,"href","#zero2-vs-zero3-performance"),h(Rr,"class","relative group"),h(Wd,"href","deepspeed#deepspeed-zero2-zero3-performance"),h($a,"id","zero2-example"),h($a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h($a,"href","#zero2-example"),h(Mr,"class","relative group"),h(Bd,"href","deepspeed#deepspeed-zero2-example"),h(ka,"id","zero3-example"),h(ka,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ka,"href","#zero3-example"),h(Fr,"class","relative group"),h(Vd,"href","deepspeed#deepspeed-zero3-example"),h(Da,"id","optimizer-and-scheduler"),h(Da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Da,"href","#optimizer-and-scheduler"),h(Hr,"class","relative group"),h(Aa,"id","optimizer"),h(Aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Aa,"href","#optimizer"),h(jr,"class","relative group"),h(Zd,"href","deepspeed#deepspeed-optimizer"),h(Oa,"id","scheduler"),h(Oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Oa,"href","#scheduler"),h(Gr,"class","relative group"),h(Yd,"href","deepspeed#deepspeed-scheduler"),h(Ca,"id","fp32-precision"),h(Ca,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ca,"href","#fp32-precision"),h(Wr,"class","relative group"),h(Jd,"href","deepspeed#deepspeed-fp32"),h(Ia,"id","automatic-mixed-precision"),h(Ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ia,"href","#automatic-mixed-precision"),h(Br,"class","relative group"),h(Kd,"href","deepspeed#deepspeed-amp"),h(La,"id","batch-size"),h(La,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(La,"href","#batch-size"),h(Vr,"class","relative group"),h(Qd,"href","deepspeed#deepspeed-bs"),h(Ua,"id","gradient-accumulation"),h(Ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ua,"href","#gradient-accumulation"),h(Zr,"class","relative group"),h(Xd,"href","deepspeed#deepspeed-grad-acc"),h(Ma,"id","gradient-clipping"),h(Ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ma,"href","#gradient-clipping"),h(Yr,"class","relative group"),h(ec,"href","deepspeed#deepspeed-grad-clip"),h(Ha,"id","getting-the-model-weights-out"),h(Ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ha,"href","#getting-the-model-weights-out"),h(Jr,"class","relative group"),h(tc,"href","deepspeed#deepspeed-weight-extraction")},m(t,c){e(document.head,w),p(t,N,c),p(t,T,c),e(T,P),e(P,fe),u(R,fe,null),e(T,M),e(T,B),e(B,ue),p(t,te,c),p(t,F,c),e(F,se),e(F,le),e(le,re),e(F,ie),e(F,Y),e(Y,Ze),e(F,ve),p(t,S,c),p(t,D,c),e(D,rt),e(D,oe),e(oe,ot),e(D,at),e(D,_e),e(_e,dn),e(D,cn),p(t,Ye,c),p(t,De,c),e(De,pn),e(De,ge),e(ge,hn),e(De,mn),p(t,J,c),p(t,V,c),e(V,mi),e(V,ye),e(ye,Xr),e(V,fi),p(t,Bt,c),p(t,k,c),e(k,Z),e(Z,eo),e(eo,ui),e(Z,vi),e(k,_i),e(k,gi),e(gi,Kc),e(Kc,Bw),e(gi,Vw),e(k,Zw),e(k,yi),e(yi,Qc),e(Qc,Yw),e(yi,Jw),e(k,Kw),e(k,bi),e(bi,Xc),e(Xc,Qw),e(bi,Xw),e(k,eE),e(k,nt),e(nt,ep),e(ep,tE),e(nt,rE),e(nt,tp),e(tp,oE),e(nt,aE),e(nt,rp),e(rp,nE),e(nt,sE),e(k,lE),e(k,wi),e(wi,op),e(op,iE),e(wi,dE),e(k,cE),e(k,Ei),e(Ei,ap),e(ap,pE),e(Ei,hE),e(k,mE),e(k,$i),e($i,np),e(np,fE),e($i,uE),e(k,vE),e(k,Ti),e(Ti,sp),e(sp,_E),e(Ti,gE),e(k,yE),e(k,ki),e(ki,lp),e(lp,bE),e(ki,wE),e(k,EE),e(k,Pi),e(Pi,ip),e(ip,$E),e(Pi,TE),e(k,kE),e(k,Di),e(Di,dp),e(dp,PE),e(Di,DE),p(t,E_,c),u(to,t,c),p(t,$_,c),p(t,ro,c),e(ro,AE),e(ro,Ai),e(Ai,xE),e(ro,OE),p(t,T_,c),u(fn,t,c),p(t,k_,c),p(t,st,c),e(st,SE),e(st,xi),e(xi,CE),e(st,NE),e(st,Oi),e(Oi,IE),e(st,zE),p(t,P_,c),p(t,Vt,c),e(Vt,oo),e(oo,cp),u(un,cp,null),e(Vt,LE),e(Vt,pp),e(pp,qE),p(t,D_,c),p(t,y,c),u(vn,y,null),e(y,UE),e(y,hp),e(hp,RE),e(y,ME),e(y,mp),e(mp,FE),e(y,HE),e(y,be),e(be,ao),e(ao,fp),e(fp,jE),e(ao,GE),e(ao,Si),e(Si,WE),e(ao,BE),e(be,VE),e(be,K),e(K,up),e(up,ZE),e(K,YE),e(K,vp),e(vp,JE),e(K,KE),e(K,_p),e(_p,QE),e(K,XE),e(K,gp),e(gp,e2),e(K,t2),e(K,yp),e(yp,r2),e(K,o2),e(K,bp),e(bp,a2),e(K,n2),e(be,s2),e(be,Ci),e(Ci,wp),e(wp,l2),e(Ci,i2),e(be,d2),e(be,Ae),e(Ae,Ep),e(Ep,c2),e(Ae,p2),e(Ae,$p),e($p,h2),e(Ae,m2),e(Ae,Tp),e(Tp,f2),e(Ae,u2),e(Ae,kp),e(kp,v2),e(Ae,_2),e(be,g2),e(be,xe),e(xe,Pp),e(Pp,y2),e(xe,b2),e(xe,Dp),e(Dp,w2),e(xe,E2),e(xe,Ap),e(Ap,$2),e(xe,T2),e(xe,xp),e(xp,k2),e(xe,P2),e(y,D2),e(y,no),u(_n,no,null),e(no,A2),e(no,gn),e(gn,x2),e(gn,Op),e(Op,O2),e(gn,S2),e(y,C2),e(y,so),u(yn,so,null),e(so,N2),e(so,bn),e(bn,I2),e(bn,Sp),e(Sp,z2),e(bn,L2),e(y,q2),e(y,lt),u(wn,lt,null),e(lt,U2),e(lt,Cp),e(Cp,R2),e(lt,M2),e(lt,Np),e(Np,F2),e(y,H2),e(y,it),u(En,it,null),e(it,j2),e(it,Ip),e(Ip,G2),e(it,W2),e(it,$n),e($n,B2),e($n,zp),e(zp,V2),e($n,Z2),e(y,Y2),e(y,dt),u(Tn,dt,null),e(dt,J2),e(dt,Lp),e(Lp,K2),e(dt,Q2),e(dt,Je),e(Je,X2),e(Je,qp),e(qp,e4),e(Je,t4),e(Je,Up),e(Up,r4),e(Je,o4),e(Je,Rp),e(Rp,a4),e(Je,n4),e(y,s4),e(y,lo),u(kn,lo,null),e(lo,l4),e(lo,Mp),e(Mp,i4),e(y,d4),e(y,Oe),u(Pn,Oe,null),e(Oe,c4),e(Oe,Fp),e(Fp,p4),e(Oe,h4),e(Oe,Dn),e(Dn,m4),e(Dn,Hp),e(Hp,f4),e(Dn,u4),e(Oe,v4),e(Oe,jp),e(jp,_4),e(y,g4),e(y,ct),u(An,ct,null),e(ct,y4),e(ct,Zt),e(Zt,b4),e(Zt,Gp),e(Gp,w4),e(Zt,E4),e(Zt,Wp),e(Wp,$4),e(Zt,T4),e(ct,k4),e(ct,Bp),e(Bp,P4),e(y,D4),e(y,io),u(xn,io,null),e(io,A4),e(io,On),e(On,x4),e(On,Ni),e(Ni,O4),e(On,S4),e(y,C4),e(y,pt),u(Sn,pt,null),e(pt,N4),e(pt,Cn),e(Cn,I4),e(Cn,Vp),e(Vp,z4),e(Cn,L4),e(pt,q4),e(pt,Zp),e(Zp,U4),e(y,R4),e(y,ht),u(Nn,ht,null),e(ht,M4),e(ht,In),e(In,F4),e(In,Yp),e(Yp,H4),e(In,j4),e(ht,G4),e(ht,Jp),e(Jp,W4),e(y,B4),e(y,Se),u(zn,Se,null),e(Se,V4),e(Se,Ln),e(Ln,Z4),e(Ln,Kp),e(Kp,Y4),e(Ln,J4),e(Se,K4),e(Se,Yt),e(Yt,Q4),e(Yt,Qp),e(Qp,X4),e(Yt,e0),e(Yt,Xp),e(Xp,t0),e(Yt,r0),e(Se,o0),e(Se,eh),e(eh,a0),e(y,n0),e(y,mt),u(qn,mt,null),e(mt,s0),e(mt,we),e(we,l0),e(we,th),e(th,i0),e(we,d0),e(we,rh),e(rh,c0),e(we,p0),e(we,oh),e(oh,h0),e(we,m0),e(we,ah),e(ah,f0),e(we,u0),e(mt,v0),u(co,mt,null),e(y,_0),e(y,po),u(Un,po,null),e(po,g0),e(po,Rn),e(Rn,y0),e(Rn,nh),e(nh,b0),e(Rn,w0),e(y,E0),e(y,ho),u(Mn,ho,null),e(ho,$0),e(ho,sh),e(sh,T0),e(y,k0),e(y,mo),u(Fn,mo,null),e(mo,P0),e(mo,Hn),e(Hn,D0),e(Hn,lh),e(lh,A0),e(Hn,x0),e(y,O0),e(y,ft),u(jn,ft,null),e(ft,S0),e(ft,Gn),e(Gn,C0),e(Gn,ih),e(ih,N0),e(Gn,I0),e(ft,z0),e(ft,dh),e(dh,L0),e(y,q0),e(y,I),u(Wn,I,null),e(I,U0),e(I,ch),e(ch,R0),e(I,M0),e(I,ph),e(ph,F0),e(I,H0),e(I,hh),e(hh,j0),e(I,G0),e(I,Jt),e(Jt,W0),e(Jt,mh),e(mh,B0),e(Jt,V0),e(Jt,fh),e(fh,Z0),e(Jt,Y0),e(I,J0),e(I,uh),e(uh,K0),e(I,Q0),u(Bn,I,null),e(I,X0),e(I,vh),e(vh,_h),e(_h,e$),e(I,t$),e(I,Ke),e(Ke,gh),e(gh,Ee),e(Ee,r$),e(Ee,yh),e(yh,o$),e(Ee,a$),e(Ee,bh),e(bh,n$),e(Ee,s$),e(Ee,wh),e(wh,l$),e(Ee,i$),e(Ee,Eh),e(Eh,d$),e(Ee,c$),e(Ke,p$),e(Ke,$h),e($h,Kt),e(Kt,h$),e(Kt,Th),e(Th,m$),e(Kt,f$),e(Kt,kh),e(kh,u$),e(Kt,v$),e(Ke,_$),e(Ke,Ph),e(Ph,Ii),e(Ii,Dh),e(Dh,g$),e(Ii,y$),e(Ke,b$),e(Ke,q),e(q,ut),e(ut,Ah),e(Ah,w$),e(ut,E$),e(ut,xh),e(xh,$$),e(ut,T$),e(ut,Oh),e(Oh,k$),e(ut,P$),e(q,D$),e(q,Sh),e(Sh,A$),e(q,x$),e(q,Ch),e(Ch,O$),e(q,S$),e(q,Vn),e(Vn,C$),e(Vn,Nh),e(Nh,N$),e(Vn,I$),e(q,z$),e(q,Qe),e(Qe,L$),e(Qe,Ih),e(Ih,q$),e(Qe,U$),e(Qe,zh),e(zh,R$),e(Qe,M$),e(Qe,Lh),e(Lh,F$),e(Qe,H$),e(q,j$),e(q,ae),e(ae,G$),e(ae,zi),e(zi,W$),e(ae,B$),e(ae,qh),e(qh,V$),e(ae,Z$),e(ae,Uh),e(Uh,Y$),e(ae,J$),e(ae,Rh),e(Rh,K$),e(ae,Q$),e(ae,Mh),e(Mh,X$),e(ae,e3),e(q,t3),e(q,A),e(A,r3),e(A,Fh),e(Fh,o3),e(A,a3),e(A,Hh),e(Hh,n3),e(A,s3),e(A,jh),e(jh,l3),e(A,i3),e(A,Gh),e(Gh,d3),e(A,c3),e(A,Zn),e(Zn,p3),e(A,h3),e(A,Wh),e(Wh,m3),e(A,f3),e(A,Bh),e(Bh,u3),e(A,v3),e(A,Vh),e(Vh,_3),e(A,g3),e(A,Zh),e(Zh,y3),e(A,b3),e(A,Yh),e(Yh,w3),e(A,E3),e(q,$3),e(q,$e),e($e,T3),e($e,Li),e(Li,k3),e($e,P3),e($e,Jh),e(Jh,D3),e($e,A3),e($e,qi),e(qi,x3),e($e,O3),e($e,Kh),e(Kh,S3),e($e,C3),e(q,N3),e(q,Qh),e(Qh,I3),e(y,z3),e(y,fo),u(Yn,fo,null),e(fo,L3),e(fo,Xh),e(Xh,q3),e(y,U3),e(y,vt),u(Jn,vt,null),e(vt,R3),e(vt,Kn),e(Kn,M3),e(Kn,em),e(em,F3),e(Kn,H3),e(vt,j3),e(vt,Ui),e(Ui,G3),e(Ui,tm),e(tm,W3),e(y,B3),e(y,_t),u(Qn,_t,null),e(_t,V3),e(_t,Xn),e(Xn,Z3),e(Xn,rm),e(rm,Y3),e(Xn,J3),e(_t,K3),e(_t,es),e(es,Q3),e(es,om),e(om,X3),e(es,e5),e(y,t5),e(y,Q),u(ts,Q,null),e(Q,r5),e(Q,am),e(am,o5),e(Q,a5),e(Q,rs),e(rs,n5),e(rs,nm),e(nm,s5),e(rs,l5),e(Q,i5),u(uo,Q,null),e(Q,d5),e(Q,os),e(os,c5),e(os,sm),e(sm,p5),e(os,h5),e(Q,m5),e(Q,Qt),e(Qt,Xt),e(Xt,f5),e(Xt,lm),e(lm,u5),e(Xt,v5),e(Xt,im),e(im,_5),e(Xt,g5),e(Qt,y5),e(Qt,as),e(as,b5),e(as,ns),e(ns,w5),e(ns,dm),e(dm,E5),e(ns,$5),e(as,T5),e(Qt,k5),e(Qt,er),e(er,P5),e(er,cm),e(cm,D5),e(er,A5),e(er,pm),e(pm,x5),e(er,O5),e(y,S5),e(y,gt),u(ss,gt,null),e(gt,C5),e(gt,tr),e(tr,N5),e(tr,hm),e(hm,I5),e(tr,z5),e(tr,mm),e(mm,L5),e(tr,q5),e(gt,U5),e(gt,fm),e(fm,R5),e(y,M5),e(y,yt),u(ls,yt,null),e(yt,F5),e(yt,rr),e(rr,H5),e(rr,um),e(um,j5),e(rr,G5),e(rr,vm),e(vm,W5),e(rr,B5),e(yt,V5),e(yt,_m),e(_m,Z5),e(y,Y5),e(y,vo),u(is,vo,null),e(vo,J5),e(vo,Xe),e(Xe,K5),e(Xe,gm),e(gm,Q5),e(Xe,X5),e(Xe,ym),e(ym,e6),e(Xe,t6),e(Xe,bm),e(bm,r6),e(Xe,o6),e(y,a6),e(y,_o),u(ds,_o,null),e(_o,n6),e(_o,cs),e(cs,s6),e(cs,wm),e(wm,l6),e(cs,i6),e(y,d6),e(y,Ce),u(ps,Ce,null),e(Ce,c6),e(Ce,hs),e(hs,p6),e(hs,Em),e(Em,h6),e(hs,m6),e(Ce,f6),e(Ce,$m),e($m,u6),e(Ce,v6),e(Ce,ms),e(ms,_6),e(ms,Tm),e(Tm,g6),e(ms,y6),e(y,b6),e(y,bt),u(fs,bt,null),e(bt,w6),e(bt,us),e(us,E6),e(us,km),e(km,$6),e(us,T6),e(bt,k6),e(bt,Pm),e(Pm,P6),e(y,D6),e(y,wt),u(vs,wt,null),e(wt,A6),e(wt,Dm),e(Dm,x6),e(wt,O6),e(wt,Am),e(Am,S6),e(y,C6),e(y,go),u(_s,go,null),e(go,N6),e(go,xm),e(xm,I6),e(y,z6),e(y,Et),u(gs,Et,null),e(Et,L6),e(Et,Om),e(Om,q6),e(Et,U6),e(Et,Sm),e(Sm,R6),p(t,A_,c),p(t,or,c),e(or,yo),e(yo,Cm),u(ys,Cm,null),e(or,M6),e(or,Nm),e(Nm,F6),p(t,x_,c),p(t,ar,c),e(ar,Ne),u(bs,Ne,null),e(Ne,H6),e(Ne,Im),e(Im,j6),e(Ne,G6),e(Ne,ws),e(ws,W6),e(ws,zm),e(zm,B6),e(ws,V6),e(Ne,Z6),e(Ne,Lm),e(Lm,Y6),e(ar,J6),e(ar,X),u(Es,X,null),e(X,K6),e(X,qm),e(qm,Q6),e(X,X6),e(X,$s),e($s,e7),e($s,Um),e(Um,t7),e($s,r7),e(X,o7),u(bo,X,null),e(X,a7),e(X,Ts),e(Ts,n7),e(Ts,Rm),e(Rm,s7),e(Ts,l7),e(X,i7),e(X,nr),e(nr,sr),e(sr,d7),e(sr,Mm),e(Mm,c7),e(sr,p7),e(sr,Fm),e(Fm,h7),e(sr,m7),e(nr,f7),e(nr,ks),e(ks,u7),e(ks,Ps),e(Ps,v7),e(Ps,Hm),e(Hm,_7),e(Ps,g7),e(ks,y7),e(nr,b7),e(nr,lr),e(lr,w7),e(lr,jm),e(jm,E7),e(lr,$7),e(lr,Gm),e(Gm,T7),e(lr,k7),p(t,O_,c),p(t,ir,c),e(ir,wo),e(wo,Wm),u(Ds,Wm,null),e(ir,P7),e(ir,Bm),e(Bm,D7),p(t,S_,c),p(t,C,c),u(As,C,null),e(C,A7),e(C,xs),e(xs,x7),e(xs,Vm),e(Vm,O7),e(xs,S7),e(C,C7),e(C,dr),e(dr,N7),e(dr,Ri),e(Ri,I7),e(dr,z7),e(dr,Os),e(Os,L7),e(dr,q7),e(C,U7),e(C,de),u(Ss,de,null),e(de,R7),e(de,Zm),e(Zm,M7),e(de,F7),e(de,cr),e(cr,H7),e(cr,Ym),e(Ym,j7),e(cr,G7),e(cr,Jm),e(Jm,W7),e(cr,B7),e(de,V7),e(de,pr),e(pr,Z7),e(pr,Km),e(Km,Y7),e(pr,J7),e(pr,Qm),e(Qm,K7),e(pr,Q7),e(de,X7),e(de,Cs),e(Cs,eT),e(Cs,Xm),e(Xm,tT),e(Cs,rT),e(C,oT),e(C,Eo),u(Ns,Eo,null),e(Eo,aT),e(Eo,ef),e(ef,nT),e(C,sT),e(C,$t),u(Is,$t,null),e($t,lT),e($t,tf),e(tf,iT),e($t,dT),e($t,hr),e(hr,cT),e(hr,rf),e(rf,pT),e(hr,hT),e(hr,of),e(of,mT),e(hr,fT),e(C,uT),e(C,$o),u(zs,$o,null),e($o,vT),e($o,Ls),e(Ls,_T),e(Ls,af),e(af,gT),e(Ls,yT),e(C,bT),e(C,To),u(qs,To,null),e(To,wT),e(To,nf),e(nf,ET),e(C,$T),e(C,ko),u(Us,ko,null),e(ko,TT),e(ko,sf),e(sf,kT),p(t,C_,c),p(t,mr,c),e(mr,Po),e(Po,lf),u(Rs,lf,null),e(mr,PT),e(mr,df),e(df,DT),p(t,N_,c),p(t,ne,c),u(Ms,ne,null),e(ne,AT),e(ne,Fs),e(Fs,xT),e(Fs,cf),e(cf,OT),e(Fs,ST),e(ne,CT),e(ne,fr),e(fr,NT),e(fr,Mi),e(Mi,IT),e(fr,zT),e(fr,Hs),e(Hs,LT),e(fr,qT),e(ne,UT),e(ne,Te),e(Te,RT),e(Te,js),e(js,MT),e(js,pf),e(pf,FT),e(js,HT),e(Te,jT),e(Te,hf),e(hf,GT),e(Te,WT),e(Te,mf),e(mf,BT),e(Te,VT),e(Te,ff),e(ff,ZT),e(Te,YT),e(ne,JT),e(ne,x),e(x,KT),e(x,Gs),e(Gs,QT),e(Gs,uf),e(uf,XT),e(Gs,e8),e(x,t8),e(x,vf),e(vf,r8),e(x,o8),e(x,Ws),e(Ws,a8),e(Ws,_f),e(_f,n8),e(Ws,s8),e(x,l8),e(x,gf),e(gf,i8),e(x,d8),e(x,yf),e(yf,c8),e(x,p8),e(x,bf),e(bf,h8),e(x,m8),e(x,Bs),e(Bs,f8),e(Bs,wf),e(wf,u8),e(Bs,v8),e(x,_8),e(x,Ef),e(Ef,g8),e(x,y8),e(x,$f),e($f,b8),e(x,w8),e(x,Tf),e(Tf,E8),e(x,$8),p(t,I_,c),p(t,ur,c),e(ur,Do),e(Do,kf),u(Vs,kf,null),e(ur,T8),e(ur,Pf),e(Pf,k8),p(t,z_,c),p(t,ce,c),e(ce,P8),e(ce,Fi),e(Fi,D8),e(ce,A8),e(ce,Df),e(Df,x8),e(ce,O8),e(ce,Hi),e(Hi,S8),e(ce,C8),e(ce,Af),e(Af,N8),e(ce,I8),p(t,L_,c),p(t,Ao,c),e(Ao,z8),e(Ao,ji),e(ji,L8),e(Ao,q8),p(t,q_,c),p(t,xo,c),e(xo,Gi),e(Gi,xf),e(xf,U8),e(Gi,R8),e(xo,M8),e(xo,Wi),e(Wi,Of),e(Of,F8),e(Wi,H8),p(t,U_,c),p(t,Ie,c),e(Ie,j8),e(Ie,Sf),e(Sf,G8),e(Ie,W8),e(Ie,Cf),e(Cf,B8),e(Ie,V8),e(Ie,Bi),e(Bi,Z8),e(Ie,Y8),p(t,R_,c),p(t,Oo,c),e(Oo,So),e(So,Nf),e(Nf,J8),e(So,K8),e(So,If),e(If,Q8),e(So,X8),e(Oo,e9),e(Oo,Vi),e(Vi,zf),e(zf,t9),e(Vi,r9),p(t,M_,c),p(t,vr,c),e(vr,Co),e(Co,Lf),u(Zs,Lf,null),e(vr,o9),e(vr,qf),e(qf,a9),p(t,F_,c),p(t,ze,c),e(ze,n9),e(ze,Zi),e(Zi,s9),e(ze,l9),e(ze,Uf),e(Uf,i9),e(ze,d9),e(ze,Rf),e(Rf,c9),e(ze,p9),p(t,H_,c),p(t,Tt,c),e(Tt,h9),e(Tt,Mf),e(Mf,m9),e(Tt,f9),e(Tt,Yi),e(Yi,u9),e(Tt,v9),p(t,j_,c),p(t,No,c),e(No,Ji),e(Ji,Ff),e(Ff,_9),e(Ji,g9),e(No,y9),e(No,Ki),e(Ki,Hf),e(Hf,b9),e(Ki,w9),p(t,G_,c),p(t,Le,c),e(Le,E9),e(Le,Qi),e(Qi,$9),e(Le,T9),e(Le,jf),e(jf,k9),e(Le,P9),e(Le,Gf),e(Gf,D9),e(Le,A9),p(t,W_,c),p(t,ee,c),e(ee,x9),e(ee,Xi),e(Xi,O9),e(ee,S9),e(ee,Wf),e(Wf,C9),e(ee,N9),e(ee,Bf),e(Bf,I9),e(ee,z9),e(ee,Vf),e(Vf,L9),e(ee,q9),e(ee,ed),e(ed,U9),e(ee,R9),p(t,B_,c),p(t,td,c),e(td,M9),p(t,V_,c),u(Ys,t,c),p(t,Z_,c),p(t,rd,c),e(rd,F9),p(t,Y_,c),u(Js,t,c),p(t,J_,c),p(t,od,c),e(od,H9),p(t,K_,c),u(Ks,t,c),p(t,Q_,c),p(t,ad,c),e(ad,j9),p(t,X_,c),p(t,nd,c),e(nd,G9),p(t,eg,c),u(Qs,t,c),p(t,tg,c),p(t,Io,c),e(Io,W9),e(Io,Zf),e(Zf,B9),e(Io,V9),p(t,rg,c),p(t,_r,c),e(_r,zo),e(zo,Yf),u(Xs,Yf,null),e(_r,Z9),e(_r,Jf),e(Jf,Y9),p(t,og,c),p(t,pe,c),e(pe,J9),e(pe,sd),e(sd,K9),e(pe,Q9),e(pe,Kf),e(Kf,X9),e(pe,ek),e(pe,Qf),e(Qf,tk),e(pe,rk),e(pe,Xf),e(Xf,ok),e(pe,ak),p(t,ag,c),p(t,kt,c),e(kt,nk),e(kt,el),e(el,sk),e(kt,lk),e(kt,eu),e(eu,ik),e(kt,dk),p(t,ng,c),p(t,gr,c),e(gr,Lo),e(Lo,tu),u(tl,tu,null),e(gr,ck),e(gr,ru),e(ru,pk),p(t,sg,c),p(t,qo,c),e(qo,hk),e(qo,ld),e(ld,mk),e(qo,fk),p(t,lg,c),p(t,qe,c),e(qe,uk),e(qe,rl),e(rl,vk),e(qe,_k),e(qe,ol),e(ol,gk),e(qe,yk),e(qe,al),e(al,bk),e(qe,wk),p(t,ig,c),p(t,id,c),e(id,Ek),p(t,dg,c),p(t,dd,c),p(t,cg,c),p(t,yr,c),e(yr,Uo),e(Uo,ou),u(nl,ou,null),e(yr,$k),e(yr,au),e(au,Tk),p(t,pg,c),p(t,cd,c),e(cd,kk),p(t,hg,c),p(t,Pt,c),e(Pt,Pk),e(Pt,sl),e(sl,Dk),e(Pt,Ak),e(Pt,ll),e(ll,xk),e(Pt,Ok),p(t,mg,c),p(t,pd,c),e(pd,Sk),p(t,fg,c),u(il,t,c),p(t,ug,c),p(t,hd,c),e(hd,Ck),p(t,vg,c),p(t,Dt,c),e(Dt,Nk),e(Dt,nu),e(nu,Ik),e(Dt,zk),e(Dt,su),e(su,Lk),e(Dt,qk),p(t,_g,c),p(t,br,c),e(br,Ro),e(Ro,lu),u(dl,lu,null),e(br,Uk),e(br,iu),e(iu,Rk),p(t,gg,c),p(t,md,c),e(md,Mk),p(t,yg,c),p(t,Ue,c),e(Ue,Fk),e(Ue,du),e(du,Hk),e(Ue,jk),e(Ue,cu),e(cu,Gk),e(Ue,Wk),e(Ue,pu),e(pu,Bk),e(Ue,Vk),p(t,bg,c),p(t,At,c),e(At,Zk),e(At,hu),e(hu,Yk),e(At,Jk),e(At,mu),e(mu,Kk),e(At,Qk),p(t,wg,c),u(cl,t,c),p(t,Eg,c),p(t,Mo,c),e(Mo,Xk),e(Mo,pl),e(pl,eP),e(Mo,tP),p(t,$g,c),p(t,wr,c),e(wr,Fo),e(Fo,fu),u(hl,fu,null),e(wr,rP),e(wr,uu),e(uu,oP),p(t,Tg,c),p(t,fd,c),e(fd,aP),p(t,kg,c),u(ml,t,c),p(t,Pg,c),p(t,xt,c),e(xt,nP),e(xt,vu),e(vu,sP),e(xt,lP),e(xt,_u),e(_u,iP),e(xt,dP),p(t,Dg,c),p(t,ud,c),e(ud,cP),p(t,Ag,c),u(fl,t,c),p(t,xg,c),p(t,vd,c),e(vd,pP),p(t,Og,c),p(t,Ho,c),e(Ho,hP),e(Ho,gu),e(gu,mP),e(Ho,fP),p(t,Sg,c),p(t,et,c),e(et,yu),e(yu,uP),e(et,vP),e(et,bu),e(bu,_P),e(et,gP),e(et,wu),e(wu,yP),e(et,bP),p(t,Cg,c),p(t,_d,c),e(_d,wP),p(t,Ng,c),u(ul,t,c),p(t,Ig,c),p(t,gd,c),e(gd,EP),p(t,zg,c),p(t,Re,c),e(Re,$P),e(Re,Eu),e(Eu,TP),e(Re,kP),e(Re,$u),e($u,PP),e(Re,DP),e(Re,Tu),e(Tu,AP),e(Re,xP),p(t,Lg,c),p(t,Er,c),e(Er,jo),e(jo,ku),u(vl,ku,null),e(Er,OP),e(Er,Pu),e(Pu,SP),p(t,qg,c),p(t,Ot,c),e(Ot,CP),e(Ot,Du),e(Du,NP),e(Ot,IP),e(Ot,Au),e(Au,zP),e(Ot,LP),p(t,Ug,c),p(t,yd,c),e(yd,qP),p(t,Rg,c),p(t,bd,c),e(bd,UP),p(t,Mg,c),p(t,Go,c),e(Go,RP),e(Go,xu),e(xu,MP),e(Go,FP),p(t,Fg,c),u(_l,t,c),p(t,Hg,c),p(t,H,c),e(H,HP),e(H,Ou),e(Ou,jP),e(H,GP),e(H,Su),e(Su,WP),e(H,BP),e(H,Cu),e(Cu,VP),e(H,ZP),e(H,Nu),e(Nu,YP),e(H,JP),e(H,Iu),e(Iu,KP),e(H,QP),e(H,zu),e(zu,XP),e(H,eD),p(t,jg,c),p(t,wd,c),e(wd,tD),p(t,Gg,c),p(t,$r,c),e($r,Wo),e(Wo,Lu),u(gl,Lu,null),e($r,rD),e($r,qu),e(qu,oD),p(t,Wg,c),p(t,Me,c),e(Me,aD),e(Me,yl),e(yl,nD),e(Me,sD),e(Me,Ed),e(Ed,lD),e(Me,iD),e(Me,bl),e(bl,dD),e(Me,cD),p(t,Bg,c),p(t,Fe,c),e(Fe,Uu),e(Uu,pD),e(Fe,hD),e(Fe,Ru),e(Ru,mD),e(Fe,fD),e(Fe,Mu),e(Mu,uD),e(Fe,vD),e(Fe,Fu),e(Fu,_D),p(t,Vg,c),p(t,$d,c),e($d,gD),p(t,Zg,c),p(t,wl,c),e(wl,Hu),e(Hu,yD),e(wl,bD),p(t,Yg,c),p(t,Td,c),e(Td,wD),p(t,Jg,c),u(El,t,c),p(t,Kg,c),p(t,St,c),e(St,ED),e(St,ju),e(ju,$D),e(St,TD),e(St,Gu),e(Gu,kD),e(St,PD),p(t,Qg,c),u($l,t,c),p(t,Xg,c),p(t,Ct,c),e(Ct,DD),e(Ct,Wu),e(Wu,AD),e(Ct,xD),e(Ct,Tl),e(Tl,OD),e(Ct,SD),p(t,e1,c),p(t,Bo,c),e(Bo,CD),e(Bo,kd),e(kd,ND),e(Bo,ID),p(t,t1,c),p(t,Pd,c),e(Pd,zD),p(t,r1,c),p(t,kl,c),e(kl,Bu),e(Bu,LD),e(kl,qD),p(t,o1,c),u(Pl,t,c),p(t,a1,c),p(t,Dd,c),e(Dd,UD),p(t,n1,c),u(Dl,t,c),p(t,s1,c),p(t,Al,c),e(Al,Vu),e(Vu,RD),e(Al,MD),p(t,l1,c),u(xl,t,c),p(t,i1,c),p(t,Ad,c),e(Ad,FD),p(t,d1,c),u(Ol,t,c),p(t,c1,c),p(t,xd,c),e(xd,HD),p(t,p1,c),p(t,Vo,c),e(Vo,jD),e(Vo,Sl),e(Sl,GD),e(Vo,WD),p(t,h1,c),p(t,Cl,c),e(Cl,Zu),e(Zu,BD),e(Cl,VD),p(t,m1,c),p(t,Nt,c),e(Nt,ZD),e(Nt,Yu),e(Yu,YD),e(Nt,JD),e(Nt,Ju),e(Ju,KD),e(Nt,QD),p(t,f1,c),p(t,Zo,c),e(Zo,XD),e(Zo,Ku),e(Ku,eA),e(Zo,tA),p(t,u1,c),u(Nl,t,c),p(t,v1,c),p(t,Od,c),e(Od,rA),p(t,_1,c),p(t,He,c),e(He,Qu),e(Qu,oA),e(He,aA),e(He,Xu),e(Xu,nA),e(He,sA),e(He,Il),e(Il,lA),e(Il,ev),e(ev,iA),e(Il,dA),e(He,cA),e(He,zl),e(zl,pA),e(zl,tv),e(tv,hA),e(zl,mA),p(t,g1,c),p(t,Ll,c),e(Ll,tt),e(tt,fA),e(tt,rv),e(rv,uA),e(tt,vA),e(tt,ov),e(ov,_A),e(tt,gA),e(tt,av),e(av,yA),e(tt,bA),p(t,y1,c),p(t,Yo,c),e(Yo,wA),e(Yo,nv),e(nv,EA),e(Yo,$A),p(t,b1,c),u(ql,t,c),p(t,w1,c),p(t,Tr,c),e(Tr,sv),e(sv,TA),e(Tr,kA),e(Tr,lv),e(lv,PA),e(Tr,DA),p(t,E1,c),p(t,It,c),e(It,AA),e(It,iv),e(iv,xA),e(It,OA),e(It,dv),e(dv,SA),e(It,CA),p(t,$1,c),p(t,Sd,c),e(Sd,NA),p(t,T1,c),p(t,he,c),e(he,cv),e(cv,IA),e(he,zA),e(he,pv),e(pv,LA),e(he,qA),e(he,Ul),e(Ul,UA),e(Ul,hv),e(hv,RA),e(Ul,MA),e(he,FA),e(he,kr),e(kr,HA),e(kr,mv),e(mv,jA),e(kr,GA),e(kr,fv),e(fv,WA),e(kr,BA),e(he,VA),e(he,uv),e(uv,ZA),p(t,k1,c),p(t,Cd,c),e(Cd,YA),p(t,P1,c),p(t,Jo,c),e(Jo,Pr),e(Pr,JA),e(Pr,vv),e(vv,KA),e(Pr,QA),e(Pr,_v),e(_v,XA),e(Pr,ex),e(Jo,tx),e(Jo,ke),e(ke,rx),e(ke,gv),e(gv,ox),e(ke,ax),e(ke,yv),e(yv,nx),e(ke,sx),e(ke,bv),e(bv,lx),e(ke,ix),e(ke,wv),e(wv,dx),e(ke,cx),p(t,D1,c),p(t,Dr,c),e(Dr,Ko),e(Ko,Ev),u(Rl,Ev,null),e(Dr,px),e(Dr,$v),e($v,hx),p(t,A1,c),p(t,Qo,c),e(Qo,mx),e(Qo,Nd),e(Nd,fx),e(Qo,ux),p(t,x1,c),p(t,Ar,c),e(Ar,Xo),e(Xo,Tv),u(Ml,Tv,null),e(Ar,vx),e(Ar,kv),e(kv,_x),p(t,O1,c),p(t,ea,c),e(ea,gx),e(ea,Id),e(Id,yx),e(ea,bx),p(t,S1,c),p(t,xr,c),e(xr,ta),e(ta,Pv),u(Fl,Pv,null),e(xr,wx),e(xr,Dv),e(Dv,Ex),p(t,C1,c),p(t,ra,c),e(ra,$x),e(ra,zd),e(zd,Tx),e(ra,kx),p(t,N1,c),p(t,Or,c),e(Or,oa),e(oa,Av),u(Hl,Av,null),e(Or,Px),e(Or,xv),e(xv,Dx),p(t,I1,c),p(t,aa,c),e(aa,Ax),e(aa,Ld),e(Ld,xx),e(aa,Ox),p(t,z1,c),p(t,Sr,c),e(Sr,na),e(na,Ov),u(jl,Ov,null),e(Sr,Sx),e(Sr,Sv),e(Sv,Cx),p(t,L1,c),p(t,sa,c),e(sa,Nx),e(sa,qd),e(qd,Ix),e(sa,zx),p(t,q1,c),p(t,Cr,c),e(Cr,la),e(la,Cv),u(Gl,Cv,null),e(Cr,Lx),e(Cr,Nv),e(Nv,qx),p(t,U1,c),p(t,ia,c),e(ia,Ux),e(ia,Ud),e(Ud,Rx),e(ia,Mx),p(t,R1,c),p(t,Nr,c),e(Nr,da),e(da,Iv),u(Wl,Iv,null),e(Nr,Fx),e(Nr,zv),e(zv,Hx),p(t,M1,c),p(t,ca,c),e(ca,jx),e(ca,Rd),e(Rd,Gx),e(ca,Wx),p(t,F1,c),p(t,Ir,c),e(Ir,pa),e(pa,Lv),u(Bl,Lv,null),e(Ir,Bx),e(Ir,qv),e(qv,Vx),p(t,H1,c),p(t,ha,c),e(ha,Zx),e(ha,Md),e(Md,Yx),e(ha,Jx),p(t,j1,c),p(t,zr,c),e(zr,ma),e(ma,Uv),u(Vl,Uv,null),e(zr,Kx),e(zr,Rv),e(Rv,Qx),p(t,G1,c),p(t,fa,c),e(fa,Xx),e(fa,Fd),e(Fd,eO),e(fa,tO),p(t,W1,c),p(t,Lr,c),e(Lr,ua),e(ua,Mv),u(Zl,Mv,null),e(Lr,rO),e(Lr,Fv),e(Fv,oO),p(t,B1,c),p(t,va,c),e(va,aO),e(va,Hd),e(Hd,nO),e(va,sO),p(t,V1,c),p(t,qr,c),e(qr,_a),e(_a,Hv),u(Yl,Hv,null),e(qr,lO),e(qr,jv),e(jv,iO),p(t,Z1,c),p(t,ga,c),e(ga,dO),e(ga,jd),e(jd,cO),e(ga,pO),p(t,Y1,c),p(t,Ur,c),e(Ur,ya),e(ya,Gv),u(Jl,Gv,null),e(Ur,hO),e(Ur,Wv),e(Wv,mO),p(t,J1,c),p(t,ba,c),e(ba,fO),e(ba,Gd),e(Gd,uO),e(ba,vO),p(t,K1,c),p(t,Rr,c),e(Rr,wa),e(wa,Bv),u(Kl,Bv,null),e(Rr,_O),e(Rr,Vv),e(Vv,gO),p(t,Q1,c),p(t,Ea,c),e(Ea,yO),e(Ea,Wd),e(Wd,bO),e(Ea,wO),p(t,X1,c),p(t,Mr,c),e(Mr,$a),e($a,Zv),u(Ql,Zv,null),e(Mr,EO),e(Mr,Yv),e(Yv,$O),p(t,ey,c),p(t,Ta,c),e(Ta,TO),e(Ta,Bd),e(Bd,kO),e(Ta,PO),p(t,ty,c),p(t,Fr,c),e(Fr,ka),e(ka,Jv),u(Xl,Jv,null),e(Fr,DO),e(Fr,Kv),e(Kv,AO),p(t,ry,c),p(t,Pa,c),e(Pa,xO),e(Pa,Vd),e(Vd,OO),e(Pa,SO),p(t,oy,c),p(t,Hr,c),e(Hr,Da),e(Da,Qv),u(ei,Qv,null),e(Hr,CO),e(Hr,Xv),e(Xv,NO),p(t,ay,c),p(t,jr,c),e(jr,Aa),e(Aa,e_),u(ti,e_,null),e(jr,IO),e(jr,t_),e(t_,zO),p(t,ny,c),p(t,xa,c),e(xa,LO),e(xa,Zd),e(Zd,qO),e(xa,UO),p(t,sy,c),p(t,Gr,c),e(Gr,Oa),e(Oa,r_),u(ri,r_,null),e(Gr,RO),e(Gr,o_),e(o_,MO),p(t,ly,c),p(t,Sa,c),e(Sa,FO),e(Sa,Yd),e(Yd,HO),e(Sa,jO),p(t,iy,c),p(t,Wr,c),e(Wr,Ca),e(Ca,a_),u(oi,a_,null),e(Wr,GO),e(Wr,n_),e(n_,WO),p(t,dy,c),p(t,Na,c),e(Na,BO),e(Na,Jd),e(Jd,VO),e(Na,ZO),p(t,cy,c),p(t,Br,c),e(Br,Ia),e(Ia,s_),u(ai,s_,null),e(Br,YO),e(Br,l_),e(l_,JO),p(t,py,c),p(t,za,c),e(za,KO),e(za,Kd),e(Kd,QO),e(za,XO),p(t,hy,c),p(t,Vr,c),e(Vr,La),e(La,i_),u(ni,i_,null),e(Vr,eS),e(Vr,d_),e(d_,tS),p(t,my,c),p(t,qa,c),e(qa,rS),e(qa,Qd),e(Qd,oS),e(qa,aS),p(t,fy,c),p(t,Zr,c),e(Zr,Ua),e(Ua,c_),u(si,c_,null),e(Zr,nS),e(Zr,p_),e(p_,sS),p(t,uy,c),p(t,Ra,c),e(Ra,lS),e(Ra,Xd),e(Xd,iS),e(Ra,dS),p(t,vy,c),p(t,Yr,c),e(Yr,Ma),e(Ma,h_),u(li,h_,null),e(Yr,cS),e(Yr,m_),e(m_,pS),p(t,_y,c),p(t,Fa,c),e(Fa,hS),e(Fa,ec),e(ec,mS),e(Fa,fS),p(t,gy,c),p(t,Jr,c),e(Jr,Ha),e(Ha,f_),u(ii,f_,null),e(Jr,uS),e(Jr,u_),e(u_,vS),p(t,yy,c),p(t,ja,c),e(ja,_S),e(ja,tc),e(tc,gS),e(ja,yS),by=!0},p(t,[c]){const di={};c&2&&(di.$$scope={dirty:c,ctx:t}),to.$set(di);const v_={};c&2&&(v_.$$scope={dirty:c,ctx:t}),co.$set(v_);const __={};c&2&&(__.$$scope={dirty:c,ctx:t}),uo.$set(__);const g_={};c&2&&(g_.$$scope={dirty:c,ctx:t}),bo.$set(g_)},i(t){by||(v(R.$$.fragment,t),v(to.$$.fragment,t),v(fn.$$.fragment,t),v(un.$$.fragment,t),v(vn.$$.fragment,t),v(_n.$$.fragment,t),v(yn.$$.fragment,t),v(wn.$$.fragment,t),v(En.$$.fragment,t),v(Tn.$$.fragment,t),v(kn.$$.fragment,t),v(Pn.$$.fragment,t),v(An.$$.fragment,t),v(xn.$$.fragment,t),v(Sn.$$.fragment,t),v(Nn.$$.fragment,t),v(zn.$$.fragment,t),v(qn.$$.fragment,t),v(co.$$.fragment,t),v(Un.$$.fragment,t),v(Mn.$$.fragment,t),v(Fn.$$.fragment,t),v(jn.$$.fragment,t),v(Wn.$$.fragment,t),v(Bn.$$.fragment,t),v(Yn.$$.fragment,t),v(Jn.$$.fragment,t),v(Qn.$$.fragment,t),v(ts.$$.fragment,t),v(uo.$$.fragment,t),v(ss.$$.fragment,t),v(ls.$$.fragment,t),v(is.$$.fragment,t),v(ds.$$.fragment,t),v(ps.$$.fragment,t),v(fs.$$.fragment,t),v(vs.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(ys.$$.fragment,t),v(bs.$$.fragment,t),v(Es.$$.fragment,t),v(bo.$$.fragment,t),v(Ds.$$.fragment,t),v(As.$$.fragment,t),v(Ss.$$.fragment,t),v(Ns.$$.fragment,t),v(Is.$$.fragment,t),v(zs.$$.fragment,t),v(qs.$$.fragment,t),v(Us.$$.fragment,t),v(Rs.$$.fragment,t),v(Ms.$$.fragment,t),v(Vs.$$.fragment,t),v(Zs.$$.fragment,t),v(Ys.$$.fragment,t),v(Js.$$.fragment,t),v(Ks.$$.fragment,t),v(Qs.$$.fragment,t),v(Xs.$$.fragment,t),v(tl.$$.fragment,t),v(nl.$$.fragment,t),v(il.$$.fragment,t),v(dl.$$.fragment,t),v(cl.$$.fragment,t),v(hl.$$.fragment,t),v(ml.$$.fragment,t),v(fl.$$.fragment,t),v(ul.$$.fragment,t),v(vl.$$.fragment,t),v(_l.$$.fragment,t),v(gl.$$.fragment,t),v(El.$$.fragment,t),v($l.$$.fragment,t),v(Pl.$$.fragment,t),v(Dl.$$.fragment,t),v(xl.$$.fragment,t),v(Ol.$$.fragment,t),v(Nl.$$.fragment,t),v(ql.$$.fragment,t),v(Rl.$$.fragment,t),v(Ml.$$.fragment,t),v(Fl.$$.fragment,t),v(Hl.$$.fragment,t),v(jl.$$.fragment,t),v(Gl.$$.fragment,t),v(Wl.$$.fragment,t),v(Bl.$$.fragment,t),v(Vl.$$.fragment,t),v(Zl.$$.fragment,t),v(Yl.$$.fragment,t),v(Jl.$$.fragment,t),v(Kl.$$.fragment,t),v(Ql.$$.fragment,t),v(Xl.$$.fragment,t),v(ei.$$.fragment,t),v(ti.$$.fragment,t),v(ri.$$.fragment,t),v(oi.$$.fragment,t),v(ai.$$.fragment,t),v(ni.$$.fragment,t),v(si.$$.fragment,t),v(li.$$.fragment,t),v(ii.$$.fragment,t),by=!0)},o(t){_(R.$$.fragment,t),_(to.$$.fragment,t),_(fn.$$.fragment,t),_(un.$$.fragment,t),_(vn.$$.fragment,t),_(_n.$$.fragment,t),_(yn.$$.fragment,t),_(wn.$$.fragment,t),_(En.$$.fragment,t),_(Tn.$$.fragment,t),_(kn.$$.fragment,t),_(Pn.$$.fragment,t),_(An.$$.fragment,t),_(xn.$$.fragment,t),_(Sn.$$.fragment,t),_(Nn.$$.fragment,t),_(zn.$$.fragment,t),_(qn.$$.fragment,t),_(co.$$.fragment,t),_(Un.$$.fragment,t),_(Mn.$$.fragment,t),_(Fn.$$.fragment,t),_(jn.$$.fragment,t),_(Wn.$$.fragment,t),_(Bn.$$.fragment,t),_(Yn.$$.fragment,t),_(Jn.$$.fragment,t),_(Qn.$$.fragment,t),_(ts.$$.fragment,t),_(uo.$$.fragment,t),_(ss.$$.fragment,t),_(ls.$$.fragment,t),_(is.$$.fragment,t),_(ds.$$.fragment,t),_(ps.$$.fragment,t),_(fs.$$.fragment,t),_(vs.$$.fragment,t),_(_s.$$.fragment,t),_(gs.$$.fragment,t),_(ys.$$.fragment,t),_(bs.$$.fragment,t),_(Es.$$.fragment,t),_(bo.$$.fragment,t),_(Ds.$$.fragment,t),_(As.$$.fragment,t),_(Ss.$$.fragment,t),_(Ns.$$.fragment,t),_(Is.$$.fragment,t),_(zs.$$.fragment,t),_(qs.$$.fragment,t),_(Us.$$.fragment,t),_(Rs.$$.fragment,t),_(Ms.$$.fragment,t),_(Vs.$$.fragment,t),_(Zs.$$.fragment,t),_(Ys.$$.fragment,t),_(Js.$$.fragment,t),_(Ks.$$.fragment,t),_(Qs.$$.fragment,t),_(Xs.$$.fragment,t),_(tl.$$.fragment,t),_(nl.$$.fragment,t),_(il.$$.fragment,t),_(dl.$$.fragment,t),_(cl.$$.fragment,t),_(hl.$$.fragment,t),_(ml.$$.fragment,t),_(fl.$$.fragment,t),_(ul.$$.fragment,t),_(vl.$$.fragment,t),_(_l.$$.fragment,t),_(gl.$$.fragment,t),_(El.$$.fragment,t),_($l.$$.fragment,t),_(Pl.$$.fragment,t),_(Dl.$$.fragment,t),_(xl.$$.fragment,t),_(Ol.$$.fragment,t),_(Nl.$$.fragment,t),_(ql.$$.fragment,t),_(Rl.$$.fragment,t),_(Ml.$$.fragment,t),_(Fl.$$.fragment,t),_(Hl.$$.fragment,t),_(jl.$$.fragment,t),_(Gl.$$.fragment,t),_(Wl.$$.fragment,t),_(Bl.$$.fragment,t),_(Vl.$$.fragment,t),_(Zl.$$.fragment,t),_(Yl.$$.fragment,t),_(Jl.$$.fragment,t),_(Kl.$$.fragment,t),_(Ql.$$.fragment,t),_(Xl.$$.fragment,t),_(ei.$$.fragment,t),_(ti.$$.fragment,t),_(ri.$$.fragment,t),_(oi.$$.fragment,t),_(ai.$$.fragment,t),_(ni.$$.fragment,t),_(si.$$.fragment,t),_(li.$$.fragment,t),_(ii.$$.fragment,t),by=!1},d(t){r(w),t&&r(N),t&&r(T),g(R),t&&r(te),t&&r(F),t&&r(S),t&&r(D),t&&r(Ye),t&&r(De),t&&r(J),t&&r(V),t&&r(Bt),t&&r(k),t&&r(E_),g(to,t),t&&r($_),t&&r(ro),t&&r(T_),g(fn,t),t&&r(k_),t&&r(st),t&&r(P_),t&&r(Vt),g(un),t&&r(D_),t&&r(y),g(vn),g(_n),g(yn),g(wn),g(En),g(Tn),g(kn),g(Pn),g(An),g(xn),g(Sn),g(Nn),g(zn),g(qn),g(co),g(Un),g(Mn),g(Fn),g(jn),g(Wn),g(Bn),g(Yn),g(Jn),g(Qn),g(ts),g(uo),g(ss),g(ls),g(is),g(ds),g(ps),g(fs),g(vs),g(_s),g(gs),t&&r(A_),t&&r(or),g(ys),t&&r(x_),t&&r(ar),g(bs),g(Es),g(bo),t&&r(O_),t&&r(ir),g(Ds),t&&r(S_),t&&r(C),g(As),g(Ss),g(Ns),g(Is),g(zs),g(qs),g(Us),t&&r(C_),t&&r(mr),g(Rs),t&&r(N_),t&&r(ne),g(Ms),t&&r(I_),t&&r(ur),g(Vs),t&&r(z_),t&&r(ce),t&&r(L_),t&&r(Ao),t&&r(q_),t&&r(xo),t&&r(U_),t&&r(Ie),t&&r(R_),t&&r(Oo),t&&r(M_),t&&r(vr),g(Zs),t&&r(F_),t&&r(ze),t&&r(H_),t&&r(Tt),t&&r(j_),t&&r(No),t&&r(G_),t&&r(Le),t&&r(W_),t&&r(ee),t&&r(B_),t&&r(td),t&&r(V_),g(Ys,t),t&&r(Z_),t&&r(rd),t&&r(Y_),g(Js,t),t&&r(J_),t&&r(od),t&&r(K_),g(Ks,t),t&&r(Q_),t&&r(ad),t&&r(X_),t&&r(nd),t&&r(eg),g(Qs,t),t&&r(tg),t&&r(Io),t&&r(rg),t&&r(_r),g(Xs),t&&r(og),t&&r(pe),t&&r(ag),t&&r(kt),t&&r(ng),t&&r(gr),g(tl),t&&r(sg),t&&r(qo),t&&r(lg),t&&r(qe),t&&r(ig),t&&r(id),t&&r(dg),t&&r(dd),t&&r(cg),t&&r(yr),g(nl),t&&r(pg),t&&r(cd),t&&r(hg),t&&r(Pt),t&&r(mg),t&&r(pd),t&&r(fg),g(il,t),t&&r(ug),t&&r(hd),t&&r(vg),t&&r(Dt),t&&r(_g),t&&r(br),g(dl),t&&r(gg),t&&r(md),t&&r(yg),t&&r(Ue),t&&r(bg),t&&r(At),t&&r(wg),g(cl,t),t&&r(Eg),t&&r(Mo),t&&r($g),t&&r(wr),g(hl),t&&r(Tg),t&&r(fd),t&&r(kg),g(ml,t),t&&r(Pg),t&&r(xt),t&&r(Dg),t&&r(ud),t&&r(Ag),g(fl,t),t&&r(xg),t&&r(vd),t&&r(Og),t&&r(Ho),t&&r(Sg),t&&r(et),t&&r(Cg),t&&r(_d),t&&r(Ng),g(ul,t),t&&r(Ig),t&&r(gd),t&&r(zg),t&&r(Re),t&&r(Lg),t&&r(Er),g(vl),t&&r(qg),t&&r(Ot),t&&r(Ug),t&&r(yd),t&&r(Rg),t&&r(bd),t&&r(Mg),t&&r(Go),t&&r(Fg),g(_l,t),t&&r(Hg),t&&r(H),t&&r(jg),t&&r(wd),t&&r(Gg),t&&r($r),g(gl),t&&r(Wg),t&&r(Me),t&&r(Bg),t&&r(Fe),t&&r(Vg),t&&r($d),t&&r(Zg),t&&r(wl),t&&r(Yg),t&&r(Td),t&&r(Jg),g(El,t),t&&r(Kg),t&&r(St),t&&r(Qg),g($l,t),t&&r(Xg),t&&r(Ct),t&&r(e1),t&&r(Bo),t&&r(t1),t&&r(Pd),t&&r(r1),t&&r(kl),t&&r(o1),g(Pl,t),t&&r(a1),t&&r(Dd),t&&r(n1),g(Dl,t),t&&r(s1),t&&r(Al),t&&r(l1),g(xl,t),t&&r(i1),t&&r(Ad),t&&r(d1),g(Ol,t),t&&r(c1),t&&r(xd),t&&r(p1),t&&r(Vo),t&&r(h1),t&&r(Cl),t&&r(m1),t&&r(Nt),t&&r(f1),t&&r(Zo),t&&r(u1),g(Nl,t),t&&r(v1),t&&r(Od),t&&r(_1),t&&r(He),t&&r(g1),t&&r(Ll),t&&r(y1),t&&r(Yo),t&&r(b1),g(ql,t),t&&r(w1),t&&r(Tr),t&&r(E1),t&&r(It),t&&r($1),t&&r(Sd),t&&r(T1),t&&r(he),t&&r(k1),t&&r(Cd),t&&r(P1),t&&r(Jo),t&&r(D1),t&&r(Dr),g(Rl),t&&r(A1),t&&r(Qo),t&&r(x1),t&&r(Ar),g(Ml),t&&r(O1),t&&r(ea),t&&r(S1),t&&r(xr),g(Fl),t&&r(C1),t&&r(ra),t&&r(N1),t&&r(Or),g(Hl),t&&r(I1),t&&r(aa),t&&r(z1),t&&r(Sr),g(jl),t&&r(L1),t&&r(sa),t&&r(q1),t&&r(Cr),g(Gl),t&&r(U1),t&&r(ia),t&&r(R1),t&&r(Nr),g(Wl),t&&r(M1),t&&r(ca),t&&r(F1),t&&r(Ir),g(Bl),t&&r(H1),t&&r(ha),t&&r(j1),t&&r(zr),g(Vl),t&&r(G1),t&&r(fa),t&&r(W1),t&&r(Lr),g(Zl),t&&r(B1),t&&r(va),t&&r(V1),t&&r(qr),g(Yl),t&&r(Z1),t&&r(ga),t&&r(Y1),t&&r(Ur),g(Jl),t&&r(J1),t&&r(ba),t&&r(K1),t&&r(Rr),g(Kl),t&&r(Q1),t&&r(Ea),t&&r(X1),t&&r(Mr),g(Ql),t&&r(ey),t&&r(Ta),t&&r(ty),t&&r(Fr),g(Xl),t&&r(ry),t&&r(Pa),t&&r(oy),t&&r(Hr),g(ei),t&&r(ay),t&&r(jr),g(ti),t&&r(ny),t&&r(xa),t&&r(sy),t&&r(Gr),g(ri),t&&r(ly),t&&r(Sa),t&&r(iy),t&&r(Wr),g(oi),t&&r(dy),t&&r(Na),t&&r(cy),t&&r(Br),g(ai),t&&r(py),t&&r(za),t&&r(hy),t&&r(Vr),g(ni),t&&r(my),t&&r(qa),t&&r(fy),t&&r(Zr),g(si),t&&r(uy),t&&r(Ra),t&&r(vy),t&&r(Yr),g(li),t&&r(_y),t&&r(Fa),t&&r(gy),t&&r(Jr),g(ii),t&&r(yy),t&&r(ja)}}}const MM={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"},{local:"deepspeed",sections:[{local:"installation",title:"Installation"},{local:"deployment-with-multiple-gpus",title:"Deployment with multiple GPUs"},{local:"deployment-with-one-gpu",title:"Deployment with one GPU"},{local:"deployment-in-notebooks",title:"Deployment in Notebooks"},{local:"configuration",title:"Configuration"},{local:"passing-configuration",title:"Passing Configuration"},{local:"shared-configuration",title:"Shared Configuration"},{local:"zero",sections:[{local:"zero2-config",title:"ZeRO-2 Config"},{local:"zero3-config",title:"ZeRO-3 Config"}],title:"ZeRO"},{local:"nvme-support",sections:[{local:"zero2-vs-zero3-performance",title:"ZeRO-2 vs ZeRO-3 Performance"},{local:"zero2-example",title:"ZeRO-2 Example"},{local:"zero3-example",title:"ZeRO-3 Example"}],title:"NVMe Support"},{local:"optimizer-and-scheduler",sections:[{local:"optimizer",title:"Optimizer"},{local:"scheduler",title:"Scheduler"}],title:"Optimizer and Scheduler"},{local:"fp32-precision",title:"fp32 Precision"},{local:"automatic-mixed-precision",title:"Automatic Mixed Precision"},{local:"batch-size",title:"Batch Size"},{local:"gradient-accumulation",title:"Gradient Accumulation"},{local:"gradient-clipping",title:"Gradient Clipping"},{local:"getting-the-model-weights-out",title:"Getting The Model Weights Out"}],title:"DeepSpeed"}],title:"Trainer Integrations"}],title:"Trainer"};function FM(Ve,w,N){let{fw:T}=w;return Ve.$$set=P=>{"fw"in P&&N(0,T=P.fw)},[T]}class ZM extends SM{constructor(w){super();CM(this,w,FM,RM,NM,{fw:0})}}export{ZM as default,MM as metadata};
