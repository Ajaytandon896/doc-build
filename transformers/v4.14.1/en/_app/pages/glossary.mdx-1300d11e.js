import{S as Ih,i as Ch,s as Dh,e as o,k as h,w as m,t as n,L as Mh,c as l,d as t,m as p,a as i,x as b,h as a,b as c,M as Ei,J as s,g as d,y as _,K as Bh,q as g,o as v,B as w}from"../chunks/vendor-b1433968.js";import{I as F}from"../chunks/IconCopyLink-7029626d.js";import{C as $}from"../chunks/CodeBlock-a320dbd7.js";import"../chunks/CopyButton-f65cb278.js";function Lh(Xa){let M,Je,x,D,Wt,ye,Ya,Vt,Qa,an,N,Z,Ut,Ee,Ja,Xt,Ka,on,f,Yt,Za,eo,Qt,to,so,Jt,no,ao,Kt,oo,lo,Zt,ro,io,es,ho,po,ts,co,fo,ss,uo,mo,ns,bo,_o,as,go,vo,os,wo,ko,ls,yo,Eo,R,$o,Ke,qo,jo,Ze,To,zo,xo,rs,Ao,Po,is,Io,ln,O,ee,ds,$e,Co,hs,Do,rn,et,Mo,dn,tt,hn,H,te,ps,qe,Bo,cs,Lo,pn,se,So,fs,Fo,No,cn,j,$i,fn,ne,Ro,je,Oo,Ho,un,Te,mn,st,Go,bn,ze,_n,nt,Wo,gn,xe,vn,ae,Vo,Ae,Uo,Xo,wn,Pe,kn,at,Yo,yn,Ie,En,ot,Qo,$n,lt,Jo,qn,Ce,jn,rt,Ko,Tn,De,zn,oe,Zo,it,el,tl,xn,dt,An,G,le,us,Me,sl,ms,nl,Pn,ht,al,In,T,qi,Cn,pt,ol,Dn,ct,ll,Mn,Be,Bn,ft,rl,Ln,Le,Sn,ut,il,Fn,mt,dl,Nn,Se,Rn,bt,hl,On,Fe,Hn,A,pl,_t,cl,fl,bs,ul,ml,_s,bl,_l,Gn,Ne,Wn,gt,Vn,W,re,gs,Re,gl,vs,vl,Un,vt,wl,Xn,z,ji,Yn,B,kl,ws,yl,El,ks,$l,ql,Qn,Oe,Jn,ie,jl,ys,Tl,zl,Kn,He,Zn,wt,xl,ea,Ge,ta,kt,Al,sa,yt,Pl,na,We,aa,L,Il,Es,Cl,Dl,$s,Ml,Bl,oa,S,Ll,Et,Sl,Fl,qs,Nl,Rl,la,$t,ra,V,de,js,Ve,Ol,Ts,Hl,ia,he,Gl,zs,Wl,Vl,da,pe,Ul,xs,Xl,Yl,ha,ce,Ql,As,Jl,Kl,pa,qt,ca,U,fe,Ps,Ue,Zl,Is,er,fa,jt,tr,ua,Tt,sr,ma,P,X,nr,zt,ar,or,Cs,lr,rr,ir,Y,dr,xt,hr,pr,Ds,cr,fr,ur,Q,mr,At,br,_r,Ms,gr,vr,wr,E,kr,Pt,yr,Er,It,$r,qr,Bs,jr,Tr,Ls,zr,xr,Ss,Ar,Pr,Fs,Ir,Cr,ba,ue,Dr,Ct,Mr,Br,_a,Dt,ga,J,me,Ns,Xe,Lr,Rs,Sr,va,Mt,Fr,wa,I,Nr,Os,Rr,Or,Hs,Hr,Gr,Gs,Wr,Vr,ka,Bt,Ur,ya,Lt,Ea,K,be,Ws,Ye,Xr,Vs,Yr,$a,_e,Qr,Us,Jr,Kr,qa,k,Zr,Xs,ei,ti,Ys,si,ni,Qe,ai,oi,Qs,li,ri,Js,ii,di,Ks,hi,pi,Zs,ci,fi,en,ui,mi,ja,C,bi,tn,_i,gi,sn,vi,wi,nn,ki,yi,Ta;return ye=new F({}),Ee=new F({}),$e=new F({}),qe=new F({}),Te=new $({props:{code:`from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence = "A Titan RTX has 24GB of VRAM",`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">sequence = <span class="hljs-string">&quot;A Titan RTX has 24GB of VRAM&quot;</span></span>`}}),ze=new $({props:{code:"tokenized_sequence = tokenizer.tokenize(sequence),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenized_sequence = tokenizer.tokenize(sequence)</span>'}}),xe=new $({props:{code:"print(tokenized_sequence),",highlighted:`&gt;&gt;&gt; <span class="hljs-built_in">print</span>(tokenized_sequence)
<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;Titan&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;##T&#x27;</span>, <span class="hljs-string">&#x27;##X&#x27;</span>, <span class="hljs-string">&#x27;has&#x27;</span>, <span class="hljs-string">&#x27;24&#x27;</span>, <span class="hljs-string">&#x27;##GB&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;##RA&#x27;</span>, <span class="hljs-string">&#x27;##M&#x27;</span>]</span>`}}),Pe=new $({props:{code:"inputs = tokenizer(sequence),",highlighted:'&gt;&gt;&gt; <span class="hljs-variable">inputs</span> = <span class="hljs-function"><span class="hljs-title">tokenizer</span>(<span class="hljs-variable">sequence</span>)</span>'}}),Ie=new $({props:{code:`encoded_sequence = inputs["input_ids"]
print(encoded_sequence),`,highlighted:`<span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">encoded_sequence</span> <span class="hljs-string">=</span> <span class="hljs-string">inputs[&quot;input_ids&quot;]</span>
<span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">print(encoded_sequence)</span>
[<span class="hljs-number">101</span>, <span class="hljs-number">138</span>, <span class="hljs-number">18696</span>, <span class="hljs-number">155</span>, <span class="hljs-number">1942</span>, <span class="hljs-number">3190</span>, <span class="hljs-number">1144</span>, <span class="hljs-number">1572</span>, <span class="hljs-number">13745</span>, <span class="hljs-number">1104</span>, <span class="hljs-number">159</span>, <span class="hljs-number">9664</span>, <span class="hljs-number">2107</span>, <span class="hljs-number">102</span>]`}}),Ce=new $({props:{code:"decoded_sequence = tokenizer.decode(encoded_sequence),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">decoded_sequence = tokenizer.decode(encoded_sequence)</span>'}}),De=new $({props:{code:"print(decoded_sequence),",highlighted:`&gt;&gt;&gt; <span class="hljs-built_in">print</span>(decoded_sequence)
<span class="hljs-selector-attr">[CLS]</span> <span class="hljs-selector-tag">A</span> Titan RTX has <span class="hljs-number">24</span>GB of VRAM <span class="hljs-selector-attr">[SEP]</span>`}}),Me=new F({}),Be=new $({props:{code:`from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-cased")

sequence_a = "This is a short sequence."
sequence_b = "This is a rather long sequence. It is at least longer than the sequence A."

encoded_sequence_a = tokenizer(sequence_a)["input_ids"]
encoded_sequence_b = tokenizer(sequence_b)["input_ids"],`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">sequence_a = <span class="hljs-string">&quot;This is a short sequence.&quot;</span></span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">sequence_b = <span class="hljs-string">&quot;This is a rather long sequence. It is at least longer than the sequence A.&quot;</span></span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">encoded_sequence_a = tokenizer(sequence_a)[<span class="hljs-string">&quot;input_ids&quot;</span>]</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">encoded_sequence_b = tokenizer(sequence_b)[<span class="hljs-string">&quot;input_ids&quot;</span>]</span>`}}),Le=new $({props:{code:"len(encoded_sequence_a), len(encoded_sequence_b),",highlighted:`&gt;&gt;&gt; <span class="hljs-built_in">len</span>(encoded_sequence_a), <span class="hljs-built_in">len</span>(encoded_sequence_b)
(<span class="hljs-number">8</span>, <span class="hljs-number">19</span>)`}}),Se=new $({props:{code:"padded_sequences = tokenizer([sequence_a, sequence_b], padding=True),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">padded_sequences = tokenizer([sequence_a, sequence_b], padding=<span class="hljs-literal">True</span>)</span>'}}),Fe=new $({props:{code:'padded_sequences["input_ids"],',highlighted:`<span class="hljs-string">&gt;&gt;&gt;</span> <span class="hljs-string">padded_sequences[&quot;input_ids&quot;]</span>
[[<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1603</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">1188</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">170</span>, <span class="hljs-number">1897</span>, <span class="hljs-number">1263</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">119</span>, <span class="hljs-number">1135</span>, <span class="hljs-number">1110</span>, <span class="hljs-number">1120</span>, <span class="hljs-number">1655</span>, <span class="hljs-number">2039</span>, <span class="hljs-number">1190</span>, <span class="hljs-number">1103</span>, <span class="hljs-number">4954</span>, <span class="hljs-number">138</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>]]`}}),Ne=new $({props:{code:'padded_sequences["attention_mask"],',highlighted:`&gt;&gt;&gt; padded_sequences[<span class="hljs-string">&quot;attention_mask&quot;</span>]
<span class="hljs-string">[[1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]</span>`}}),Re=new F({}),Oe=new $({props:{code:"# [CLS] SEQUENCE_A [SEP] SEQUENCE_B [SEP],",highlighted:'&gt;&gt;&gt; # <span class="hljs-selector-attr">[CLS]</span> SEQUENCE_A <span class="hljs-selector-attr">[SEP]</span> SEQUENCE_B <span class="hljs-selector-attr">[SEP]</span>'}}),He=new $({props:{code:`from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-cased")
sequence_a = "HuggingFace is based in NYC"
sequence_b = "Where is HuggingFace based?"

encoded_dict = tokenizer(sequence_a, sequence_b)
decoded = tokenizer.decode(encoded_dict["input_ids"]),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">sequence_a = <span class="hljs-string">&quot;HuggingFace is based in NYC&quot;</span></span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">sequence_b = <span class="hljs-string">&quot;Where is HuggingFace based?&quot;</span></span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">encoded_dict = tokenizer(sequence_a, sequence_b)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">decoded = tokenizer.decode(encoded_dict[<span class="hljs-string">&quot;input_ids&quot;</span>])</span>`}}),Ge=new $({props:{code:"print(decoded),",highlighted:`&gt;&gt;&gt; print(decoded)
<span class="hljs-comment">[CLS]</span> HuggingFace <span class="hljs-keyword">is</span> based in NYC <span class="hljs-comment">[SEP]</span> Where <span class="hljs-keyword">is</span> HuggingFace based? <span class="hljs-comment">[SEP]</span>`}}),We=new $({props:{code:"encoded_dict['token_type_ids'],",highlighted:`&gt;&gt;&gt; encoded_dict<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;token_type_ids&#x27;</span>]</span>
<span class="hljs-selector-attr">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span>`}}),Ve=new F({}),Ue=new F({}),Xe=new F({}),Ye=new F({}),{c(){M=o("meta"),Je=h(),x=o("h1"),D=o("a"),Wt=o("span"),m(ye.$$.fragment),Ya=h(),Vt=o("span"),Qa=n("Glossary"),an=h(),N=o("h2"),Z=o("a"),Ut=o("span"),m(Ee.$$.fragment),Ja=h(),Xt=o("span"),Ka=n("General terms"),on=h(),f=o("ul"),Yt=o("li"),Za=n("autoencoding models: see MLM"),eo=h(),Qt=o("li"),to=n("autoregressive models: see CLM"),so=h(),Jt=o("li"),no=n(`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),ao=h(),Kt=o("li"),oo=n("deep learning: machine learning algorithms which uses neural networks with several layers."),lo=h(),Zt=o("li"),ro=n(`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),io=h(),es=o("li"),ho=n("multimodal: a task that combines texts with another kind of inputs (for instance images)."),po=h(),ts=o("li"),co=n(`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),fo=h(),ss=o("li"),uo=n("NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),mo=h(),ns=o("li"),bo=n(`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),_o=h(),as=o("li"),go=n(`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),vo=h(),os=o("li"),wo=n("RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),ko=h(),ls=o("li"),yo=n("self-attention: each element of the input finds out which other elements of the input they should attend to."),Eo=h(),R=o("li"),$o=n(`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Ke=o("a"),qo=n("Bart"),jo=n(" or "),Ze=o("a"),To=n("T5"),zo=n(")."),xo=h(),rs=o("li"),Ao=n(`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),Po=h(),is=o("li"),Io=n("transformer: self-attention based deep learning model architecture."),ln=h(),O=o("h2"),ee=o("a"),ds=o("span"),m($e.$$.fragment),Co=h(),hs=o("span"),Do=n("Model inputs"),rn=h(),et=o("p"),Mo=n(`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),dn=h(),tt=o("a"),hn=h(),H=o("h3"),te=o("a"),ps=o("span"),m(qe.$$.fragment),Bo=h(),cs=o("span"),Lo=n("Input IDs"),pn=h(),se=o("p"),So=n("The input ids are often the only required parameters to be passed to the model as input. "),fs=o("em"),Fo=n(`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),No=n("."),cn=h(),j=o("iframe"),fn=h(),ne=o("p"),Ro=n(`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),je=o("a"),Oo=n("WordPiece"),Ho=n(" tokenizer:"),un=h(),m(Te.$$.fragment),mn=h(),st=o("p"),Go=n("The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),bn=h(),m(ze.$$.fragment),_n=h(),nt=o("p"),Wo=n(`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),gn=h(),m(xe.$$.fragment),vn=h(),ae=o("p"),Vo=n(`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),Ae=o("a"),Uo=n("huggingface/tokenizers"),Xo=n(" for peak performance."),wn=h(),m(Pe.$$.fragment),kn=h(),at=o("p"),Yo=n(`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),yn=h(),m(Ie.$$.fragment),En=h(),ot=o("p"),Qo=n(`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),$n=h(),lt=o("p"),Jo=n("If we decode the previous sequence of ids,"),qn=h(),m(Ce.$$.fragment),jn=h(),rt=o("p"),Ko=n("we will see"),Tn=h(),m(De.$$.fragment),zn=h(),oe=o("p"),Zo=n("because this is the way a "),it=o("a"),el=n("BertModel"),tl=n(" is going to expect its inputs."),xn=h(),dt=o("a"),An=h(),G=o("h3"),le=o("a"),us=o("span"),m(Me.$$.fragment),sl=h(),ms=o("span"),nl=n("Attention mask"),Pn=h(),ht=o("p"),al=n("The attention mask is an optional argument used when batching sequences together."),In=h(),T=o("iframe"),Cn=h(),pt=o("p"),ol=n("This argument indicates to the model which tokens should be attended to, and which should not."),Dn=h(),ct=o("p"),ll=n("For example, consider these two sequences:"),Mn=h(),m(Be.$$.fragment),Bn=h(),ft=o("p"),rl=n("The encoded versions have different lengths:"),Ln=h(),m(Le.$$.fragment),Sn=h(),ut=o("p"),il=n(`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),Fn=h(),mt=o("p"),dl=n(`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),Nn=h(),m(Se.$$.fragment),Rn=h(),bt=o("p"),hl=n("We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),On=h(),m(Fe.$$.fragment),Hn=h(),A=o("p"),pl=n(`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),_t=o("a"),cl=n("BertTokenizer"),fl=n(`,
`),bs=o("code"),ul=n("1"),ml=n(" indicates a value that should be attended to, while "),_s=o("code"),bl=n("0"),_l=n(` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),Gn=h(),m(Ne.$$.fragment),Wn=h(),gt=o("a"),Vn=h(),W=o("h3"),re=o("a"),gs=o("span"),m(Re.$$.fragment),gl=h(),vs=o("span"),vl=n("Token Type IDs"),Un=h(),vt=o("p"),wl=n("Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),Xn=h(),z=o("iframe"),Yn=h(),B=o("p"),kl=n(`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),ws=o("code"),yl=n("[CLS]"),El=n(") and separator ("),ks=o("code"),$l=n("[SEP]"),ql=n(`) tokens. For example, the BERT
model builds its two sequence input as such:`),Qn=h(),m(Oe.$$.fragment),Jn=h(),ie=o("p"),jl=n("We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),ys=o("code"),Tl=n("tokenizer"),zl=n(` as two
arguments (and not a list, like before) like this:`),Kn=h(),m(He.$$.fragment),Zn=h(),wt=o("p"),xl=n("which will return:"),ea=h(),m(Ge.$$.fragment),ta=h(),kt=o("p"),Al=n(`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),sa=h(),yt=o("p"),Pl=n("The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),na=h(),m(We.$$.fragment),aa=h(),L=o("p"),Il=n("The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),Es=o("code"),Cl=n("0"),Dl=n(`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),$s=o("code"),Ml=n("1"),Bl=n("."),oa=h(),S=o("p"),Ll=n("Some models, like "),Et=o("a"),Sl=n("XLNetModel"),Fl=n(" use an additional token represented by a "),qs=o("code"),Nl=n("2"),Rl=n("."),la=h(),$t=o("a"),ra=h(),V=o("h3"),de=o("a"),js=o("span"),m(Ve.$$.fragment),Ol=h(),Ts=o("span"),Hl=n("Position IDs"),ia=h(),he=o("p"),Gl=n(`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),zs=o("code"),Wl=n("position_ids"),Vl=n(`) are used by the model to identify each token\u2019s position in
the list of tokens.`),da=h(),pe=o("p"),Ul=n("They are an optional parameter. If no "),xs=o("code"),Xl=n("position_ids"),Yl=n(` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),ha=h(),ce=o("p"),Ql=n("Absolute positional embeddings are selected in the range "),As=o("code"),Jl=n("[0, config.max_position_embeddings - 1]"),Kl=n(`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),pa=h(),qt=o("a"),ca=h(),U=o("h3"),fe=o("a"),Ps=o("span"),m(Ue.$$.fragment),Zl=h(),Is=o("span"),er=n("Labels"),fa=h(),jt=o("p"),tr=n(`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),ua=h(),Tt=o("p"),sr=n("These labels are different according to the model head, for example:"),ma=h(),P=o("ul"),X=o("li"),nr=n("For sequence classification models (e.g., "),zt=o("a"),ar=n("BertForSequenceClassification"),or=n(`), the model expects a
tensor of dimension `),Cs=o("code"),lr=n("(batch_size)"),rr=n(` with each value of the batch corresponding to the expected label of the
entire sequence.`),ir=h(),Y=o("li"),dr=n("For token classification models (e.g., "),xt=o("a"),hr=n("BertForTokenClassification"),pr=n(`), the model expects a tensor
of dimension `),Ds=o("code"),cr=n("(batch_size, seq_length)"),fr=n(` with each value corresponding to the expected label of each individual
token.`),ur=h(),Q=o("li"),mr=n("For masked language modeling (e.g., "),At=o("a"),br=n("BertForMaskedLM"),_r=n(`), the model expects a tensor of dimension
`),Ms=o("code"),gr=n("(batch_size, seq_length)"),vr=n(` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),wr=h(),E=o("li"),kr=n("For sequence to sequence tasks,(e.g., "),Pt=o("a"),yr=n("BartForConditionalGeneration"),Er=n(`,
`),It=o("a"),$r=n("MBartForConditionalGeneration"),qr=n("), the model expects a tensor of dimension "),Bs=o("code"),jr=n("(batch_size, tgt_seq_length)"),Tr=n(` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Ls=o("em"),zr=n("BART"),xr=n(" and "),Ss=o("em"),Ar=n("T5"),Pr=n(" will make the appropriate "),Fs=o("em"),Ir=n("decoder_input_ids"),Cr=n(` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),ba=h(),ue=o("p"),Dr=n("The base models (e.g., "),Ct=o("a"),Mr=n("BertModel"),Br=n(`) do not accept labels, as these are the base transformer
models, simply outputting features.`),_a=h(),Dt=o("a"),ga=h(),J=o("h3"),me=o("a"),Ns=o("span"),m(Xe.$$.fragment),Lr=h(),Rs=o("span"),Sr=n("Decoder input IDs"),va=h(),Mt=o("p"),Fr=n(`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),wa=h(),I=o("p"),Nr=n("Most encoder-decoder models (BART, T5) create their "),Os=o("code"),Rr=n("decoder_input_ids"),Or=n(" on their own from the "),Hs=o("code"),Hr=n("labels"),Gr=n(`. In
such models, passing the `),Gs=o("code"),Wr=n("labels"),Vr=n(" is the preferred way to handle training."),ka=h(),Bt=o("p"),Ur=n("Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),ya=h(),Lt=o("a"),Ea=h(),K=o("h3"),be=o("a"),Ws=o("span"),m(Ye.$$.fragment),Xr=h(),Vs=o("span"),Yr=n("Feed Forward Chunking"),$a=h(),_e=o("p"),Qr=n(`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Us=o("code"),Jr=n("bert-base-uncased"),Kr=n(")."),qa=h(),k=o("p"),Zr=n("For an input of size "),Xs=o("code"),ei=n("[batch_size, sequence_length]"),ti=n(`, the memory required to store the intermediate feed forward
embeddings `),Ys=o("code"),si=n("[batch_size, sequence_length, config.intermediate_size]"),ni=n(` can account for a large fraction of the memory
use. The authors of `),Qe=o("a"),ai=n("Reformer: The Efficient Transformer"),oi=n(` noticed that since the
computation is independent of the `),Qs=o("code"),li=n("sequence_length"),ri=n(` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Js=o("code"),ii=n("[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),di=n(`
individually and concat them afterward to `),Ks=o("code"),hi=n("[batch_size, sequence_length, config.hidden_size]"),pi=n(" with "),Zs=o("code"),ci=n("n = sequence_length"),fi=n(`, which trades increased computation time against reduced memory use, but yields a mathematically
`),en=o("strong"),ui=n("equivalent"),mi=n(" result."),ja=h(),C=o("p"),bi=n("For models employing the function "),tn=o("code"),_i=n("apply_chunking_to_forward"),gi=n(", the "),sn=o("code"),vi=n("chunk_size"),wi=n(` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),nn=o("code"),ki=n("chunk_size"),yi=n(" is set to 0, no feed forward chunking is done."),this.h()},l(e){const r=Mh('[data-svelte="svelte-1phssyn"]',document.head);M=l(r,"META",{name:!0,content:!0}),r.forEach(t),Je=p(e),x=l(e,"H1",{class:!0});var za=i(x);D=l(za,"A",{id:!0,class:!0,href:!0});var Ti=i(D);Wt=l(Ti,"SPAN",{});var zi=i(Wt);b(ye.$$.fragment,zi),zi.forEach(t),Ti.forEach(t),Ya=p(za),Vt=l(za,"SPAN",{});var xi=i(Vt);Qa=a(xi,"Glossary"),xi.forEach(t),za.forEach(t),an=p(e),N=l(e,"H2",{class:!0});var xa=i(N);Z=l(xa,"A",{id:!0,class:!0,href:!0});var Ai=i(Z);Ut=l(Ai,"SPAN",{});var Pi=i(Ut);b(Ee.$$.fragment,Pi),Pi.forEach(t),Ai.forEach(t),Ja=p(xa),Xt=l(xa,"SPAN",{});var Ii=i(Xt);Ka=a(Ii,"General terms"),Ii.forEach(t),xa.forEach(t),on=p(e),f=l(e,"UL",{});var u=i(f);Yt=l(u,"LI",{});var Ci=i(Yt);Za=a(Ci,"autoencoding models: see MLM"),Ci.forEach(t),eo=p(u),Qt=l(u,"LI",{});var Di=i(Qt);to=a(Di,"autoregressive models: see CLM"),Di.forEach(t),so=p(u),Jt=l(u,"LI",{});var Mi=i(Jt);no=a(Mi,`CLM: causal language modeling, a pretraining task where the model reads the texts in order and has to predict the
next word. It\u2019s usually done by reading the whole sentence but using a mask inside the model to hide the future
tokens at a certain timestep.`),Mi.forEach(t),ao=p(u),Kt=l(u,"LI",{});var Bi=i(Kt);oo=a(Bi,"deep learning: machine learning algorithms which uses neural networks with several layers."),Bi.forEach(t),lo=p(u),Zt=l(u,"LI",{});var Li=i(Zt);ro=a(Li,`MLM: masked language modeling, a pretraining task where the model sees a corrupted version of the texts, usually done
by masking some tokens randomly, and has to predict the original text.`),Li.forEach(t),io=p(u),es=l(u,"LI",{});var Si=i(es);ho=a(Si,"multimodal: a task that combines texts with another kind of inputs (for instance images)."),Si.forEach(t),po=p(u),ts=l(u,"LI",{});var Fi=i(ts);co=a(Fi,`NLG: natural language generation, all tasks related to generating text (for instance talk with transformers,
translation).`),Fi.forEach(t),fo=p(u),ss=l(u,"LI",{});var Ni=i(ss);uo=a(Ni,"NLP: natural language processing, a generic way to say \u201Cdeal with texts\u201D."),Ni.forEach(t),mo=p(u),ns=l(u,"LI",{});var Ri=i(ns);bo=a(Ri,`NLU: natural language understanding, all tasks related to understanding what is in a text (for instance classifying
the whole text, individual words).`),Ri.forEach(t),_o=p(u),as=l(u,"LI",{});var Oi=i(as);go=a(Oi,`pretrained model: a model that has been pretrained on some data (for instance all of Wikipedia). Pretraining methods
involve a self-supervised objective, which can be reading the text and trying to predict the next word (see CLM) or
masking some words and trying to predict them (see MLM).`),Oi.forEach(t),vo=p(u),os=l(u,"LI",{});var Hi=i(os);wo=a(Hi,"RNN: recurrent neural network, a type of model that uses a loop over a layer to process texts."),Hi.forEach(t),ko=p(u),ls=l(u,"LI",{});var Gi=i(ls);yo=a(Gi,"self-attention: each element of the input finds out which other elements of the input they should attend to."),Gi.forEach(t),Eo=p(u),R=l(u,"LI",{});var St=i(R);$o=a(St,`seq2seq or sequence-to-sequence: models that generate a new sequence from an input, like translation models, or
summarization models (such as `),Ke=l(St,"A",{href:!0});var Wi=i(Ke);qo=a(Wi,"Bart"),Wi.forEach(t),jo=a(St," or "),Ze=l(St,"A",{href:!0});var Vi=i(Ze);To=a(Vi,"T5"),Vi.forEach(t),zo=a(St,")."),St.forEach(t),xo=p(u),rs=l(u,"LI",{});var Ui=i(rs);Ao=a(Ui,`token: a part of a sentence, usually a word, but can also be a subword (non-common words are often split in subwords)
or a punctuation symbol.`),Ui.forEach(t),Po=p(u),is=l(u,"LI",{});var Xi=i(is);Io=a(Xi,"transformer: self-attention based deep learning model architecture."),Xi.forEach(t),u.forEach(t),ln=p(e),O=l(e,"H2",{class:!0});var Aa=i(O);ee=l(Aa,"A",{id:!0,class:!0,href:!0});var Yi=i(ee);ds=l(Yi,"SPAN",{});var Qi=i(ds);b($e.$$.fragment,Qi),Qi.forEach(t),Yi.forEach(t),Co=p(Aa),hs=l(Aa,"SPAN",{});var Ji=i(hs);Do=a(Ji,"Model inputs"),Ji.forEach(t),Aa.forEach(t),rn=p(e),et=l(e,"P",{});var Ki=i(et);Mo=a(Ki,`Every model is different yet bears similarities with the others. Therefore most models use the same inputs, which are
detailed here alongside usage examples.`),Ki.forEach(t),dn=p(e),tt=l(e,"A",{id:!0}),i(tt).forEach(t),hn=p(e),H=l(e,"H3",{class:!0});var Pa=i(H);te=l(Pa,"A",{id:!0,class:!0,href:!0});var Zi=i(te);ps=l(Zi,"SPAN",{});var ed=i(ps);b(qe.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),Bo=p(Pa),cs=l(Pa,"SPAN",{});var td=i(cs);Lo=a(td,"Input IDs"),td.forEach(t),Pa.forEach(t),pn=p(e),se=l(e,"P",{});var Ia=i(se);So=a(Ia,"The input ids are often the only required parameters to be passed to the model as input. "),fs=l(Ia,"EM",{});var sd=i(fs);Fo=a(sd,`They are token indices,
numerical representations of tokens building the sequences that will be used as input by the model`),sd.forEach(t),No=a(Ia,"."),Ia.forEach(t),cn=p(e),j=l(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),i(j).forEach(t),fn=p(e),ne=l(e,"P",{});var Ca=i(ne);Ro=a(Ca,`Each tokenizer works differently but the underlying mechanism remains the same. Here\u2019s an example using the BERT
tokenizer, which is a `),je=l(Ca,"A",{href:!0,rel:!0});var nd=i(je);Oo=a(nd,"WordPiece"),nd.forEach(t),Ho=a(Ca," tokenizer:"),Ca.forEach(t),un=p(e),b(Te.$$.fragment,e),mn=p(e),st=l(e,"P",{});var ad=i(st);Go=a(ad,"The tokenizer takes care of splitting the sequence into tokens available in the tokenizer vocabulary."),ad.forEach(t),bn=p(e),b(ze.$$.fragment,e),_n=p(e),nt=l(e,"P",{});var od=i(nt);Wo=a(od,`The tokens are either words or subwords. Here for instance, \u201CVRAM\u201D wasn\u2019t in the model vocabulary, so it\u2019s been split
in \u201CV\u201D, \u201CRA\u201D and \u201CM\u201D. To indicate those tokens are not separate words but parts of the same word, a double-hash prefix
is added for \u201CRA\u201D and \u201CM\u201D:`),od.forEach(t),gn=p(e),b(xe.$$.fragment,e),vn=p(e),ae=l(e,"P",{});var Da=i(ae);Vo=a(Da,`These tokens can then be converted into IDs which are understandable by the model. This can be done by directly feeding
the sentence to the tokenizer, which leverages the Rust implementation of `),Ae=l(Da,"A",{href:!0,rel:!0});var ld=i(Ae);Uo=a(ld,"huggingface/tokenizers"),ld.forEach(t),Xo=a(Da," for peak performance."),Da.forEach(t),wn=p(e),b(Pe.$$.fragment,e),kn=p(e),at=l(e,"P",{});var rd=i(at);Yo=a(rd,`The tokenizer returns a dictionary with all the arguments necessary for its corresponding model to work properly. The
token indices are under the key \u201Cinput_ids\u201D:`),rd.forEach(t),yn=p(e),b(Ie.$$.fragment,e),En=p(e),ot=l(e,"P",{});var id=i(ot);Qo=a(id,`Note that the tokenizer automatically adds \u201Cspecial tokens\u201D (if the associated model relies on them) which are special
IDs the model sometimes uses.`),id.forEach(t),$n=p(e),lt=l(e,"P",{});var dd=i(lt);Jo=a(dd,"If we decode the previous sequence of ids,"),dd.forEach(t),qn=p(e),b(Ce.$$.fragment,e),jn=p(e),rt=l(e,"P",{});var hd=i(rt);Ko=a(hd,"we will see"),hd.forEach(t),Tn=p(e),b(De.$$.fragment,e),zn=p(e),oe=l(e,"P",{});var Ma=i(oe);Zo=a(Ma,"because this is the way a "),it=l(Ma,"A",{href:!0});var pd=i(it);el=a(pd,"BertModel"),pd.forEach(t),tl=a(Ma," is going to expect its inputs."),Ma.forEach(t),xn=p(e),dt=l(e,"A",{id:!0}),i(dt).forEach(t),An=p(e),G=l(e,"H3",{class:!0});var Ba=i(G);le=l(Ba,"A",{id:!0,class:!0,href:!0});var cd=i(le);us=l(cd,"SPAN",{});var fd=i(us);b(Me.$$.fragment,fd),fd.forEach(t),cd.forEach(t),sl=p(Ba),ms=l(Ba,"SPAN",{});var ud=i(ms);nl=a(ud,"Attention mask"),ud.forEach(t),Ba.forEach(t),Pn=p(e),ht=l(e,"P",{});var md=i(ht);al=a(md,"The attention mask is an optional argument used when batching sequences together."),md.forEach(t),In=p(e),T=l(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),i(T).forEach(t),Cn=p(e),pt=l(e,"P",{});var bd=i(pt);ol=a(bd,"This argument indicates to the model which tokens should be attended to, and which should not."),bd.forEach(t),Dn=p(e),ct=l(e,"P",{});var _d=i(ct);ll=a(_d,"For example, consider these two sequences:"),_d.forEach(t),Mn=p(e),b(Be.$$.fragment,e),Bn=p(e),ft=l(e,"P",{});var gd=i(ft);rl=a(gd,"The encoded versions have different lengths:"),gd.forEach(t),Ln=p(e),b(Le.$$.fragment,e),Sn=p(e),ut=l(e,"P",{});var vd=i(ut);il=a(vd,`Therefore, we can\u2019t put them together in the same tensor as-is. The first sequence needs to be padded up to the length
of the second one, or the second one needs to be truncated down to the length of the first one.`),vd.forEach(t),Fn=p(e),mt=l(e,"P",{});var wd=i(mt);dl=a(wd,`In the first case, the list of IDs will be extended by the padding indices. We can pass a list to the tokenizer and ask
it to pad like this:`),wd.forEach(t),Nn=p(e),b(Se.$$.fragment,e),Rn=p(e),bt=l(e,"P",{});var kd=i(bt);hl=a(kd,"We can see that 0s have been added on the right of the first sentence to make it the same length as the second one:"),kd.forEach(t),On=p(e),b(Fe.$$.fragment,e),Hn=p(e),A=l(e,"P",{});var ge=i(A);pl=a(ge,`This can then be converted into a tensor in PyTorch or TensorFlow. The attention mask is a binary tensor indicating the
position of the padded indices so that the model does not attend to them. For the `),_t=l(ge,"A",{href:!0});var yd=i(_t);cl=a(yd,"BertTokenizer"),yd.forEach(t),fl=a(ge,`,
`),bs=l(ge,"CODE",{});var Ed=i(bs);ul=a(Ed,"1"),Ed.forEach(t),ml=a(ge," indicates a value that should be attended to, while "),_s=l(ge,"CODE",{});var $d=i(_s);bl=a($d,"0"),$d.forEach(t),_l=a(ge,` indicates a padded value. This attention mask is
in the dictionary returned by the tokenizer under the key \u201Cattention_mask\u201D:`),ge.forEach(t),Gn=p(e),b(Ne.$$.fragment,e),Wn=p(e),gt=l(e,"A",{id:!0}),i(gt).forEach(t),Vn=p(e),W=l(e,"H3",{class:!0});var La=i(W);re=l(La,"A",{id:!0,class:!0,href:!0});var qd=i(re);gs=l(qd,"SPAN",{});var jd=i(gs);b(Re.$$.fragment,jd),jd.forEach(t),qd.forEach(t),gl=p(La),vs=l(La,"SPAN",{});var Td=i(vs);vl=a(Td,"Token Type IDs"),Td.forEach(t),La.forEach(t),Un=p(e),vt=l(e,"P",{});var zd=i(vt);wl=a(zd,"Some models\u2019 purpose is to do classification on pairs of sentences or question answering."),zd.forEach(t),Xn=p(e),z=l(e,"IFRAME",{width:!0,height:!0,src:!0,title:!0,frameborder:!0,allow:!0}),i(z).forEach(t),Yn=p(e),B=l(e,"P",{});var Ft=i(B);kl=a(Ft,`These require two different sequences to be joined in a single \u201Cinput_ids\u201D entry, which usually is performed with the
help of special tokens, such as the classifier (`),ws=l(Ft,"CODE",{});var xd=i(ws);yl=a(xd,"[CLS]"),xd.forEach(t),El=a(Ft,") and separator ("),ks=l(Ft,"CODE",{});var Ad=i(ks);$l=a(Ad,"[SEP]"),Ad.forEach(t),ql=a(Ft,`) tokens. For example, the BERT
model builds its two sequence input as such:`),Ft.forEach(t),Qn=p(e),b(Oe.$$.fragment,e),Jn=p(e),ie=l(e,"P",{});var Sa=i(ie);jl=a(Sa,"We can use our tokenizer to automatically generate such a sentence by passing the two sequences to "),ys=l(Sa,"CODE",{});var Pd=i(ys);Tl=a(Pd,"tokenizer"),Pd.forEach(t),zl=a(Sa,` as two
arguments (and not a list, like before) like this:`),Sa.forEach(t),Kn=p(e),b(He.$$.fragment,e),Zn=p(e),wt=l(e,"P",{});var Id=i(wt);xl=a(Id,"which will return:"),Id.forEach(t),ea=p(e),b(Ge.$$.fragment,e),ta=p(e),kt=l(e,"P",{});var Cd=i(kt);Al=a(Cd,`This is enough for some models to understand where one sequence ends and where another begins. However, other models,
such as BERT, also deploy token type IDs (also called segment IDs). They are represented as a binary mask identifying
the two types of sequence in the model.`),Cd.forEach(t),sa=p(e),yt=l(e,"P",{});var Dd=i(yt);Pl=a(Dd,"The tokenizer returns this mask as the \u201Ctoken_type_ids\u201D entry:"),Dd.forEach(t),na=p(e),b(We.$$.fragment,e),aa=p(e),L=l(e,"P",{});var Nt=i(L);Il=a(Nt,"The first sequence, the \u201Ccontext\u201D used for the question, has all its tokens represented by a "),Es=l(Nt,"CODE",{});var Md=i(Es);Cl=a(Md,"0"),Md.forEach(t),Dl=a(Nt,`, whereas the
second sequence, corresponding to the \u201Cquestion\u201D, has all its tokens represented by a `),$s=l(Nt,"CODE",{});var Bd=i($s);Ml=a(Bd,"1"),Bd.forEach(t),Bl=a(Nt,"."),Nt.forEach(t),oa=p(e),S=l(e,"P",{});var Rt=i(S);Ll=a(Rt,"Some models, like "),Et=l(Rt,"A",{href:!0});var Ld=i(Et);Sl=a(Ld,"XLNetModel"),Ld.forEach(t),Fl=a(Rt," use an additional token represented by a "),qs=l(Rt,"CODE",{});var Sd=i(qs);Nl=a(Sd,"2"),Sd.forEach(t),Rl=a(Rt,"."),Rt.forEach(t),la=p(e),$t=l(e,"A",{id:!0}),i($t).forEach(t),ra=p(e),V=l(e,"H3",{class:!0});var Fa=i(V);de=l(Fa,"A",{id:!0,class:!0,href:!0});var Fd=i(de);js=l(Fd,"SPAN",{});var Nd=i(js);b(Ve.$$.fragment,Nd),Nd.forEach(t),Fd.forEach(t),Ol=p(Fa),Ts=l(Fa,"SPAN",{});var Rd=i(Ts);Hl=a(Rd,"Position IDs"),Rd.forEach(t),Fa.forEach(t),ia=p(e),he=l(e,"P",{});var Na=i(he);Gl=a(Na,`Contrary to RNNs that have the position of each token embedded within them, transformers are unaware of the position of
each token. Therefore, the position IDs (`),zs=l(Na,"CODE",{});var Od=i(zs);Wl=a(Od,"position_ids"),Od.forEach(t),Vl=a(Na,`) are used by the model to identify each token\u2019s position in
the list of tokens.`),Na.forEach(t),da=p(e),pe=l(e,"P",{});var Ra=i(pe);Ul=a(Ra,"They are an optional parameter. If no "),xs=l(Ra,"CODE",{});var Hd=i(xs);Xl=a(Hd,"position_ids"),Hd.forEach(t),Yl=a(Ra,` are passed to the model, the IDs are automatically created as
absolute positional embeddings.`),Ra.forEach(t),ha=p(e),ce=l(e,"P",{});var Oa=i(ce);Ql=a(Oa,"Absolute positional embeddings are selected in the range "),As=l(Oa,"CODE",{});var Gd=i(As);Jl=a(Gd,"[0, config.max_position_embeddings - 1]"),Gd.forEach(t),Kl=a(Oa,`. Some models use
other types of positional embeddings, such as sinusoidal position embeddings or relative position embeddings.`),Oa.forEach(t),pa=p(e),qt=l(e,"A",{id:!0}),i(qt).forEach(t),ca=p(e),U=l(e,"H3",{class:!0});var Ha=i(U);fe=l(Ha,"A",{id:!0,class:!0,href:!0});var Wd=i(fe);Ps=l(Wd,"SPAN",{});var Vd=i(Ps);b(Ue.$$.fragment,Vd),Vd.forEach(t),Wd.forEach(t),Zl=p(Ha),Is=l(Ha,"SPAN",{});var Ud=i(Is);er=a(Ud,"Labels"),Ud.forEach(t),Ha.forEach(t),fa=p(e),jt=l(e,"P",{});var Xd=i(jt);tr=a(Xd,`The labels are an optional argument which can be passed in order for the model to compute the loss itself. These labels
should be the expected prediction of the model: it will use the standard loss in order to compute the loss between its
predictions and the expected value (the label).`),Xd.forEach(t),ua=p(e),Tt=l(e,"P",{});var Yd=i(Tt);sr=a(Yd,"These labels are different according to the model head, for example:"),Yd.forEach(t),ma=p(e),P=l(e,"UL",{});var ve=i(P);X=l(ve,"LI",{});var Ot=i(X);nr=a(Ot,"For sequence classification models (e.g., "),zt=l(Ot,"A",{href:!0});var Qd=i(zt);ar=a(Qd,"BertForSequenceClassification"),Qd.forEach(t),or=a(Ot,`), the model expects a
tensor of dimension `),Cs=l(Ot,"CODE",{});var Jd=i(Cs);lr=a(Jd,"(batch_size)"),Jd.forEach(t),rr=a(Ot,` with each value of the batch corresponding to the expected label of the
entire sequence.`),Ot.forEach(t),ir=p(ve),Y=l(ve,"LI",{});var Ht=i(Y);dr=a(Ht,"For token classification models (e.g., "),xt=l(Ht,"A",{href:!0});var Kd=i(xt);hr=a(Kd,"BertForTokenClassification"),Kd.forEach(t),pr=a(Ht,`), the model expects a tensor
of dimension `),Ds=l(Ht,"CODE",{});var Zd=i(Ds);cr=a(Zd,"(batch_size, seq_length)"),Zd.forEach(t),fr=a(Ht,` with each value corresponding to the expected label of each individual
token.`),Ht.forEach(t),ur=p(ve),Q=l(ve,"LI",{});var Gt=i(Q);mr=a(Gt,"For masked language modeling (e.g., "),At=l(Gt,"A",{href:!0});var eh=i(At);br=a(eh,"BertForMaskedLM"),eh.forEach(t),_r=a(Gt,`), the model expects a tensor of dimension
`),Ms=l(Gt,"CODE",{});var th=i(Ms);gr=a(th,"(batch_size, seq_length)"),th.forEach(t),vr=a(Gt,` with each value corresponding to the expected label of each individual token: the
labels being the token ID for the masked token, and values to be ignored for the rest (usually -100).`),Gt.forEach(t),wr=p(ve),E=l(ve,"LI",{});var q=i(E);kr=a(q,"For sequence to sequence tasks,(e.g., "),Pt=l(q,"A",{href:!0});var sh=i(Pt);yr=a(sh,"BartForConditionalGeneration"),sh.forEach(t),Er=a(q,`,
`),It=l(q,"A",{href:!0});var nh=i(It);$r=a(nh,"MBartForConditionalGeneration"),nh.forEach(t),qr=a(q,"), the model expects a tensor of dimension "),Bs=l(q,"CODE",{});var ah=i(Bs);jr=a(ah,"(batch_size, tgt_seq_length)"),ah.forEach(t),Tr=a(q,` with each value corresponding to the target sequences associated with each input sequence. During
training, both `),Ls=l(q,"EM",{});var oh=i(Ls);zr=a(oh,"BART"),oh.forEach(t),xr=a(q," and "),Ss=l(q,"EM",{});var lh=i(Ss);Ar=a(lh,"T5"),lh.forEach(t),Pr=a(q," will make the appropriate "),Fs=l(q,"EM",{});var rh=i(Fs);Ir=a(rh,"decoder_input_ids"),rh.forEach(t),Cr=a(q,` and decoder attention masks internally.
They usually do not need to be supplied. This does not apply to models leveraging the Encoder-Decoder framework. See
the documentation of each model for more information on each specific model\u2019s labels.`),q.forEach(t),ve.forEach(t),ba=p(e),ue=l(e,"P",{});var Ga=i(ue);Dr=a(Ga,"The base models (e.g., "),Ct=l(Ga,"A",{href:!0});var ih=i(Ct);Mr=a(ih,"BertModel"),ih.forEach(t),Br=a(Ga,`) do not accept labels, as these are the base transformer
models, simply outputting features.`),Ga.forEach(t),_a=p(e),Dt=l(e,"A",{id:!0}),i(Dt).forEach(t),ga=p(e),J=l(e,"H3",{class:!0});var Wa=i(J);me=l(Wa,"A",{id:!0,class:!0,href:!0});var dh=i(me);Ns=l(dh,"SPAN",{});var hh=i(Ns);b(Xe.$$.fragment,hh),hh.forEach(t),dh.forEach(t),Lr=p(Wa),Rs=l(Wa,"SPAN",{});var ph=i(Rs);Sr=a(ph,"Decoder input IDs"),ph.forEach(t),Wa.forEach(t),va=p(e),Mt=l(e,"P",{});var ch=i(Mt);Fr=a(ch,`This input is specific to encoder-decoder models, and contains the input IDs that will be fed to the decoder. These
inputs should be used for sequence to sequence tasks, such as translation or summarization, and are usually built in a
way specific to each model.`),ch.forEach(t),wa=p(e),I=l(e,"P",{});var we=i(I);Nr=a(we,"Most encoder-decoder models (BART, T5) create their "),Os=l(we,"CODE",{});var fh=i(Os);Rr=a(fh,"decoder_input_ids"),fh.forEach(t),Or=a(we," on their own from the "),Hs=l(we,"CODE",{});var uh=i(Hs);Hr=a(uh,"labels"),uh.forEach(t),Gr=a(we,`. In
such models, passing the `),Gs=l(we,"CODE",{});var mh=i(Gs);Wr=a(mh,"labels"),mh.forEach(t),Vr=a(we," is the preferred way to handle training."),we.forEach(t),ka=p(e),Bt=l(e,"P",{});var bh=i(Bt);Ur=a(bh,"Please check each model\u2019s docs to see how they handle these input IDs for sequence to sequence training."),bh.forEach(t),ya=p(e),Lt=l(e,"A",{id:!0}),i(Lt).forEach(t),Ea=p(e),K=l(e,"H3",{class:!0});var Va=i(K);be=l(Va,"A",{id:!0,class:!0,href:!0});var _h=i(be);Ws=l(_h,"SPAN",{});var gh=i(Ws);b(Ye.$$.fragment,gh),gh.forEach(t),_h.forEach(t),Xr=p(Va),Vs=l(Va,"SPAN",{});var vh=i(Vs);Yr=a(vh,"Feed Forward Chunking"),vh.forEach(t),Va.forEach(t),$a=p(e),_e=l(e,"P",{});var Ua=i(_e);Qr=a(Ua,`In each residual attention block in transformers the self-attention layer is usually followed by 2 feed forward layers.
The intermediate embedding size of the feed forward layers is often bigger than the hidden size of the model (e.g., for
`),Us=l(Ua,"CODE",{});var wh=i(Us);Jr=a(wh,"bert-base-uncased"),wh.forEach(t),Kr=a(Ua,")."),Ua.forEach(t),qa=p(e),k=l(e,"P",{});var y=i(k);Zr=a(y,"For an input of size "),Xs=l(y,"CODE",{});var kh=i(Xs);ei=a(kh,"[batch_size, sequence_length]"),kh.forEach(t),ti=a(y,`, the memory required to store the intermediate feed forward
embeddings `),Ys=l(y,"CODE",{});var yh=i(Ys);si=a(yh,"[batch_size, sequence_length, config.intermediate_size]"),yh.forEach(t),ni=a(y,` can account for a large fraction of the memory
use. The authors of `),Qe=l(y,"A",{href:!0,rel:!0});var Eh=i(Qe);ai=a(Eh,"Reformer: The Efficient Transformer"),Eh.forEach(t),oi=a(y,` noticed that since the
computation is independent of the `),Qs=l(y,"CODE",{});var $h=i(Qs);li=a($h,"sequence_length"),$h.forEach(t),ri=a(y,` dimension, it is mathematically equivalent to compute the output
embeddings of both feed forward layers `),Js=l(y,"CODE",{});var qh=i(Js);ii=a(qh,"[batch_size, config.hidden_size]_0, ..., [batch_size, config.hidden_size]_n"),qh.forEach(t),di=a(y,`
individually and concat them afterward to `),Ks=l(y,"CODE",{});var jh=i(Ks);hi=a(jh,"[batch_size, sequence_length, config.hidden_size]"),jh.forEach(t),pi=a(y," with "),Zs=l(y,"CODE",{});var Th=i(Zs);ci=a(Th,"n = sequence_length"),Th.forEach(t),fi=a(y,`, which trades increased computation time against reduced memory use, but yields a mathematically
`),en=l(y,"STRONG",{});var zh=i(en);ui=a(zh,"equivalent"),zh.forEach(t),mi=a(y," result."),y.forEach(t),ja=p(e),C=l(e,"P",{});var ke=i(C);bi=a(ke,"For models employing the function "),tn=l(ke,"CODE",{});var xh=i(tn);_i=a(xh,"apply_chunking_to_forward"),xh.forEach(t),gi=a(ke,", the "),sn=l(ke,"CODE",{});var Ah=i(sn);vi=a(Ah,"chunk_size"),Ah.forEach(t),wi=a(ke,` defines the
number of output embeddings that are computed in parallel and thus defines the trade-off between memory and time
complexity. If `),nn=l(ke,"CODE",{});var Ph=i(nn);ki=a(Ph,"chunk_size"),Ph.forEach(t),yi=a(ke," is set to 0, no feed forward chunking is done."),ke.forEach(t),this.h()},h(){c(M,"name","hf:doc:metadata"),c(M,"content",JSON.stringify(Sh)),c(D,"id","glossary"),c(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D,"href","#glossary"),c(x,"class","relative group"),c(Z,"id","general-terms"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#general-terms"),c(N,"class","relative group"),c(Ke,"href","/docs/transformers/v4.14.1/en/model_doc/bart"),c(Ze,"href","/docs/transformers/v4.14.1/en/model_doc/t5"),c(ee,"id","model-inputs"),c(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ee,"href","#model-inputs"),c(O,"class","relative group"),c(tt,"id","input-ids"),c(te,"id","input-ids"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#input-ids"),c(H,"class","relative group"),c(j,"width","560"),c(j,"height","315"),Ei(j.src,$i="https://www.youtube.com/embed/VFp38yj8h3A")||c(j,"src",$i),c(j,"title","YouTube video player"),c(j,"frameborder","0"),c(j,"allow",`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture`),j.allowFullscreen=!0,c(je,"href","https://arxiv.org/pdf/1609.08144.pdf"),c(je,"rel","nofollow"),c(Ae,"href","https://github.com/huggingface/tokenizers"),c(Ae,"rel","nofollow"),c(it,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertModel"),c(dt,"id","attention-mask"),c(le,"id","attention-mask"),c(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(le,"href","#attention-mask"),c(G,"class","relative group"),c(T,"width","560"),c(T,"height","315"),Ei(T.src,qi="https://www.youtube.com/embed/M6adb1j2jPI")||c(T,"src",qi),c(T,"title","YouTube video player"),c(T,"frameborder","0"),c(T,"allow",`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture`),T.allowFullscreen=!0,c(_t,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertTokenizer"),c(gt,"id","token-type-ids"),c(re,"id","token-type-ids"),c(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(re,"href","#token-type-ids"),c(W,"class","relative group"),c(z,"width","560"),c(z,"height","315"),Ei(z.src,ji="https://www.youtube.com/embed/0u3ioSwev3s")||c(z,"src",ji),c(z,"title","YouTube video player"),c(z,"frameborder","0"),c(z,"allow",`accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture`),z.allowFullscreen=!0,c(Et,"href","/docs/transformers/v4.14.1/en/model_doc/xlnet#transformers.XLNetModel"),c($t,"id","position-ids"),c(de,"id","position-ids"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#position-ids"),c(V,"class","relative group"),c(qt,"id","labels"),c(fe,"id","labels"),c(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fe,"href","#labels"),c(U,"class","relative group"),c(zt,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertForSequenceClassification"),c(xt,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertForTokenClassification"),c(At,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertForMaskedLM"),c(Pt,"href","/docs/transformers/v4.14.1/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(It,"href","/docs/transformers/v4.14.1/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Ct,"href","/docs/transformers/v4.14.1/en/model_doc/bert#transformers.BertModel"),c(Dt,"id","decoder-input-ids"),c(me,"id","decoder-input-ids"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#decoder-input-ids"),c(J,"class","relative group"),c(Lt,"id","feed-forward-chunking"),c(be,"id","feed-forward-chunking"),c(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(be,"href","#feed-forward-chunking"),c(K,"class","relative group"),c(Qe,"href","https://arxiv.org/abs/2001.04451"),c(Qe,"rel","nofollow")},m(e,r){s(document.head,M),d(e,Je,r),d(e,x,r),s(x,D),s(D,Wt),_(ye,Wt,null),s(x,Ya),s(x,Vt),s(Vt,Qa),d(e,an,r),d(e,N,r),s(N,Z),s(Z,Ut),_(Ee,Ut,null),s(N,Ja),s(N,Xt),s(Xt,Ka),d(e,on,r),d(e,f,r),s(f,Yt),s(Yt,Za),s(f,eo),s(f,Qt),s(Qt,to),s(f,so),s(f,Jt),s(Jt,no),s(f,ao),s(f,Kt),s(Kt,oo),s(f,lo),s(f,Zt),s(Zt,ro),s(f,io),s(f,es),s(es,ho),s(f,po),s(f,ts),s(ts,co),s(f,fo),s(f,ss),s(ss,uo),s(f,mo),s(f,ns),s(ns,bo),s(f,_o),s(f,as),s(as,go),s(f,vo),s(f,os),s(os,wo),s(f,ko),s(f,ls),s(ls,yo),s(f,Eo),s(f,R),s(R,$o),s(R,Ke),s(Ke,qo),s(R,jo),s(R,Ze),s(Ze,To),s(R,zo),s(f,xo),s(f,rs),s(rs,Ao),s(f,Po),s(f,is),s(is,Io),d(e,ln,r),d(e,O,r),s(O,ee),s(ee,ds),_($e,ds,null),s(O,Co),s(O,hs),s(hs,Do),d(e,rn,r),d(e,et,r),s(et,Mo),d(e,dn,r),d(e,tt,r),d(e,hn,r),d(e,H,r),s(H,te),s(te,ps),_(qe,ps,null),s(H,Bo),s(H,cs),s(cs,Lo),d(e,pn,r),d(e,se,r),s(se,So),s(se,fs),s(fs,Fo),s(se,No),d(e,cn,r),d(e,j,r),d(e,fn,r),d(e,ne,r),s(ne,Ro),s(ne,je),s(je,Oo),s(ne,Ho),d(e,un,r),_(Te,e,r),d(e,mn,r),d(e,st,r),s(st,Go),d(e,bn,r),_(ze,e,r),d(e,_n,r),d(e,nt,r),s(nt,Wo),d(e,gn,r),_(xe,e,r),d(e,vn,r),d(e,ae,r),s(ae,Vo),s(ae,Ae),s(Ae,Uo),s(ae,Xo),d(e,wn,r),_(Pe,e,r),d(e,kn,r),d(e,at,r),s(at,Yo),d(e,yn,r),_(Ie,e,r),d(e,En,r),d(e,ot,r),s(ot,Qo),d(e,$n,r),d(e,lt,r),s(lt,Jo),d(e,qn,r),_(Ce,e,r),d(e,jn,r),d(e,rt,r),s(rt,Ko),d(e,Tn,r),_(De,e,r),d(e,zn,r),d(e,oe,r),s(oe,Zo),s(oe,it),s(it,el),s(oe,tl),d(e,xn,r),d(e,dt,r),d(e,An,r),d(e,G,r),s(G,le),s(le,us),_(Me,us,null),s(G,sl),s(G,ms),s(ms,nl),d(e,Pn,r),d(e,ht,r),s(ht,al),d(e,In,r),d(e,T,r),d(e,Cn,r),d(e,pt,r),s(pt,ol),d(e,Dn,r),d(e,ct,r),s(ct,ll),d(e,Mn,r),_(Be,e,r),d(e,Bn,r),d(e,ft,r),s(ft,rl),d(e,Ln,r),_(Le,e,r),d(e,Sn,r),d(e,ut,r),s(ut,il),d(e,Fn,r),d(e,mt,r),s(mt,dl),d(e,Nn,r),_(Se,e,r),d(e,Rn,r),d(e,bt,r),s(bt,hl),d(e,On,r),_(Fe,e,r),d(e,Hn,r),d(e,A,r),s(A,pl),s(A,_t),s(_t,cl),s(A,fl),s(A,bs),s(bs,ul),s(A,ml),s(A,_s),s(_s,bl),s(A,_l),d(e,Gn,r),_(Ne,e,r),d(e,Wn,r),d(e,gt,r),d(e,Vn,r),d(e,W,r),s(W,re),s(re,gs),_(Re,gs,null),s(W,gl),s(W,vs),s(vs,vl),d(e,Un,r),d(e,vt,r),s(vt,wl),d(e,Xn,r),d(e,z,r),d(e,Yn,r),d(e,B,r),s(B,kl),s(B,ws),s(ws,yl),s(B,El),s(B,ks),s(ks,$l),s(B,ql),d(e,Qn,r),_(Oe,e,r),d(e,Jn,r),d(e,ie,r),s(ie,jl),s(ie,ys),s(ys,Tl),s(ie,zl),d(e,Kn,r),_(He,e,r),d(e,Zn,r),d(e,wt,r),s(wt,xl),d(e,ea,r),_(Ge,e,r),d(e,ta,r),d(e,kt,r),s(kt,Al),d(e,sa,r),d(e,yt,r),s(yt,Pl),d(e,na,r),_(We,e,r),d(e,aa,r),d(e,L,r),s(L,Il),s(L,Es),s(Es,Cl),s(L,Dl),s(L,$s),s($s,Ml),s(L,Bl),d(e,oa,r),d(e,S,r),s(S,Ll),s(S,Et),s(Et,Sl),s(S,Fl),s(S,qs),s(qs,Nl),s(S,Rl),d(e,la,r),d(e,$t,r),d(e,ra,r),d(e,V,r),s(V,de),s(de,js),_(Ve,js,null),s(V,Ol),s(V,Ts),s(Ts,Hl),d(e,ia,r),d(e,he,r),s(he,Gl),s(he,zs),s(zs,Wl),s(he,Vl),d(e,da,r),d(e,pe,r),s(pe,Ul),s(pe,xs),s(xs,Xl),s(pe,Yl),d(e,ha,r),d(e,ce,r),s(ce,Ql),s(ce,As),s(As,Jl),s(ce,Kl),d(e,pa,r),d(e,qt,r),d(e,ca,r),d(e,U,r),s(U,fe),s(fe,Ps),_(Ue,Ps,null),s(U,Zl),s(U,Is),s(Is,er),d(e,fa,r),d(e,jt,r),s(jt,tr),d(e,ua,r),d(e,Tt,r),s(Tt,sr),d(e,ma,r),d(e,P,r),s(P,X),s(X,nr),s(X,zt),s(zt,ar),s(X,or),s(X,Cs),s(Cs,lr),s(X,rr),s(P,ir),s(P,Y),s(Y,dr),s(Y,xt),s(xt,hr),s(Y,pr),s(Y,Ds),s(Ds,cr),s(Y,fr),s(P,ur),s(P,Q),s(Q,mr),s(Q,At),s(At,br),s(Q,_r),s(Q,Ms),s(Ms,gr),s(Q,vr),s(P,wr),s(P,E),s(E,kr),s(E,Pt),s(Pt,yr),s(E,Er),s(E,It),s(It,$r),s(E,qr),s(E,Bs),s(Bs,jr),s(E,Tr),s(E,Ls),s(Ls,zr),s(E,xr),s(E,Ss),s(Ss,Ar),s(E,Pr),s(E,Fs),s(Fs,Ir),s(E,Cr),d(e,ba,r),d(e,ue,r),s(ue,Dr),s(ue,Ct),s(Ct,Mr),s(ue,Br),d(e,_a,r),d(e,Dt,r),d(e,ga,r),d(e,J,r),s(J,me),s(me,Ns),_(Xe,Ns,null),s(J,Lr),s(J,Rs),s(Rs,Sr),d(e,va,r),d(e,Mt,r),s(Mt,Fr),d(e,wa,r),d(e,I,r),s(I,Nr),s(I,Os),s(Os,Rr),s(I,Or),s(I,Hs),s(Hs,Hr),s(I,Gr),s(I,Gs),s(Gs,Wr),s(I,Vr),d(e,ka,r),d(e,Bt,r),s(Bt,Ur),d(e,ya,r),d(e,Lt,r),d(e,Ea,r),d(e,K,r),s(K,be),s(be,Ws),_(Ye,Ws,null),s(K,Xr),s(K,Vs),s(Vs,Yr),d(e,$a,r),d(e,_e,r),s(_e,Qr),s(_e,Us),s(Us,Jr),s(_e,Kr),d(e,qa,r),d(e,k,r),s(k,Zr),s(k,Xs),s(Xs,ei),s(k,ti),s(k,Ys),s(Ys,si),s(k,ni),s(k,Qe),s(Qe,ai),s(k,oi),s(k,Qs),s(Qs,li),s(k,ri),s(k,Js),s(Js,ii),s(k,di),s(k,Ks),s(Ks,hi),s(k,pi),s(k,Zs),s(Zs,ci),s(k,fi),s(k,en),s(en,ui),s(k,mi),d(e,ja,r),d(e,C,r),s(C,bi),s(C,tn),s(tn,_i),s(C,gi),s(C,sn),s(sn,vi),s(C,wi),s(C,nn),s(nn,ki),s(C,yi),Ta=!0},p:Bh,i(e){Ta||(g(ye.$$.fragment,e),g(Ee.$$.fragment,e),g($e.$$.fragment,e),g(qe.$$.fragment,e),g(Te.$$.fragment,e),g(ze.$$.fragment,e),g(xe.$$.fragment,e),g(Pe.$$.fragment,e),g(Ie.$$.fragment,e),g(Ce.$$.fragment,e),g(De.$$.fragment,e),g(Me.$$.fragment,e),g(Be.$$.fragment,e),g(Le.$$.fragment,e),g(Se.$$.fragment,e),g(Fe.$$.fragment,e),g(Ne.$$.fragment,e),g(Re.$$.fragment,e),g(Oe.$$.fragment,e),g(He.$$.fragment,e),g(Ge.$$.fragment,e),g(We.$$.fragment,e),g(Ve.$$.fragment,e),g(Ue.$$.fragment,e),g(Xe.$$.fragment,e),g(Ye.$$.fragment,e),Ta=!0)},o(e){v(ye.$$.fragment,e),v(Ee.$$.fragment,e),v($e.$$.fragment,e),v(qe.$$.fragment,e),v(Te.$$.fragment,e),v(ze.$$.fragment,e),v(xe.$$.fragment,e),v(Pe.$$.fragment,e),v(Ie.$$.fragment,e),v(Ce.$$.fragment,e),v(De.$$.fragment,e),v(Me.$$.fragment,e),v(Be.$$.fragment,e),v(Le.$$.fragment,e),v(Se.$$.fragment,e),v(Fe.$$.fragment,e),v(Ne.$$.fragment,e),v(Re.$$.fragment,e),v(Oe.$$.fragment,e),v(He.$$.fragment,e),v(Ge.$$.fragment,e),v(We.$$.fragment,e),v(Ve.$$.fragment,e),v(Ue.$$.fragment,e),v(Xe.$$.fragment,e),v(Ye.$$.fragment,e),Ta=!1},d(e){t(M),e&&t(Je),e&&t(x),w(ye),e&&t(an),e&&t(N),w(Ee),e&&t(on),e&&t(f),e&&t(ln),e&&t(O),w($e),e&&t(rn),e&&t(et),e&&t(dn),e&&t(tt),e&&t(hn),e&&t(H),w(qe),e&&t(pn),e&&t(se),e&&t(cn),e&&t(j),e&&t(fn),e&&t(ne),e&&t(un),w(Te,e),e&&t(mn),e&&t(st),e&&t(bn),w(ze,e),e&&t(_n),e&&t(nt),e&&t(gn),w(xe,e),e&&t(vn),e&&t(ae),e&&t(wn),w(Pe,e),e&&t(kn),e&&t(at),e&&t(yn),w(Ie,e),e&&t(En),e&&t(ot),e&&t($n),e&&t(lt),e&&t(qn),w(Ce,e),e&&t(jn),e&&t(rt),e&&t(Tn),w(De,e),e&&t(zn),e&&t(oe),e&&t(xn),e&&t(dt),e&&t(An),e&&t(G),w(Me),e&&t(Pn),e&&t(ht),e&&t(In),e&&t(T),e&&t(Cn),e&&t(pt),e&&t(Dn),e&&t(ct),e&&t(Mn),w(Be,e),e&&t(Bn),e&&t(ft),e&&t(Ln),w(Le,e),e&&t(Sn),e&&t(ut),e&&t(Fn),e&&t(mt),e&&t(Nn),w(Se,e),e&&t(Rn),e&&t(bt),e&&t(On),w(Fe,e),e&&t(Hn),e&&t(A),e&&t(Gn),w(Ne,e),e&&t(Wn),e&&t(gt),e&&t(Vn),e&&t(W),w(Re),e&&t(Un),e&&t(vt),e&&t(Xn),e&&t(z),e&&t(Yn),e&&t(B),e&&t(Qn),w(Oe,e),e&&t(Jn),e&&t(ie),e&&t(Kn),w(He,e),e&&t(Zn),e&&t(wt),e&&t(ea),w(Ge,e),e&&t(ta),e&&t(kt),e&&t(sa),e&&t(yt),e&&t(na),w(We,e),e&&t(aa),e&&t(L),e&&t(oa),e&&t(S),e&&t(la),e&&t($t),e&&t(ra),e&&t(V),w(Ve),e&&t(ia),e&&t(he),e&&t(da),e&&t(pe),e&&t(ha),e&&t(ce),e&&t(pa),e&&t(qt),e&&t(ca),e&&t(U),w(Ue),e&&t(fa),e&&t(jt),e&&t(ua),e&&t(Tt),e&&t(ma),e&&t(P),e&&t(ba),e&&t(ue),e&&t(_a),e&&t(Dt),e&&t(ga),e&&t(J),w(Xe),e&&t(va),e&&t(Mt),e&&t(wa),e&&t(I),e&&t(ka),e&&t(Bt),e&&t(ya),e&&t(Lt),e&&t(Ea),e&&t(K),w(Ye),e&&t($a),e&&t(_e),e&&t(qa),e&&t(k),e&&t(ja),e&&t(C)}}}const Sh={local:"glossary",sections:[{local:"general-terms",title:"General terms"},{local:"model-inputs",sections:[{local:"input-ids",title:"Input IDs"},{local:"attention-mask",title:"Attention mask"},{local:"token-type-ids",title:"Token Type IDs"},{local:"position-ids",title:"Position IDs"},{local:"labels",title:"Labels"},{local:"decoder-input-ids",title:"Decoder input IDs"},{local:"feed-forward-chunking",title:"Feed Forward Chunking"}],title:"Model inputs"}],title:"Glossary"};function Fh(Xa,M,Je){let{fw:x}=M;return Xa.$$set=D=>{"fw"in D&&Je(0,x=D.fw)},[x]}class Gh extends Ih{constructor(M){super();Ch(this,M,Fh,Lh,Dh,{fw:0})}}export{Gh as default,Sh as metadata};
