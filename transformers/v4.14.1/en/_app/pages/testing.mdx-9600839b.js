import{S as Wq,i as Yq,s as Vq,e as o,k as f,w as u,t as a,M as Xq,c as r,d as s,m as h,a as l,x as c,h as i,b as d,F as t,g as p,y as m,q as _,o as v,B as y}from"../chunks/vendor-ab4e3193.js";import{T as tg}from"../chunks/Tip-b5c6375a.js";import{I as E}from"../chunks/IconCopyLink-d992940d.js";import{C as w}from"../chunks/CodeBlock-516df0c5.js";import"../chunks/CopyButton-204b56db.js";function Jq(me){let $,j,g,b,T,C,N,I;return{c(){$=o("p"),j=a("This plugin doesn\u2019t work with "),g=o("code"),b=a("-n"),T=a(" flag from "),C=o("code"),N=a("pytest-xdist"),I=a(".")},l(x){$=r(x,"P",{});var k=l($);j=i(k,"This plugin doesn\u2019t work with "),g=r(k,"CODE",{});var A=l(g);b=i(A,"-n"),A.forEach(s),T=i(k," flag from "),C=r(k,"CODE",{});var H=l(C);N=i(H,"pytest-xdist"),H.forEach(s),I=i(k,"."),k.forEach(s)},m(x,k){p(x,$,k),t($,j),t($,g),t(g,b),t($,T),t($,C),t(C,N),t($,I)},d(x){x&&s($)}}}function Zq(me){let $,j,g,b,T,C,N,I;return{c(){$=o("p"),j=a("There is another plugin "),g=o("code"),b=a("pytest-repeat"),T=a(", but it doesn\u2019t work with "),C=o("code"),N=a("unittest"),I=a(".")},l(x){$=r(x,"P",{});var k=l($);j=i(k,"There is another plugin "),g=r(k,"CODE",{});var A=l(g);b=i(A,"pytest-repeat"),A.forEach(s),T=i(k,", but it doesn\u2019t work with "),C=r(k,"CODE",{});var H=l(C);N=i(H,"unittest"),H.forEach(s),I=i(k,"."),k.forEach(s)},m(x,k){p(x,$,k),t($,j),t($,g),t(g,b),t($,T),t($,C),t(C,N),t($,I)},d(x){x&&s($)}}}function Kq(me){let $,j,g,b,T,C,N,I,x,k,A,H,Nt,we;return{c(){$=o("p"),j=a("In order to run the equivalent of "),g=o("code"),b=a("rm -r"),T=a(` safely, only subdirs of the project repository checkout are allowed if
an explicit obj:`),C=o("em"),N=a("tmp_dir"),I=a(" is used, so that by mistake no "),x=o("code"),k=a("/tmp"),A=a(` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),H=o("code"),Nt=a("./"),we=a(".")},l(We){$=r(We,"P",{});var D=l($);j=i(D,"In order to run the equivalent of "),g=r(D,"CODE",{});var _e=l(g);b=i(_e,"rm -r"),_e.forEach(s),T=i(D,` safely, only subdirs of the project repository checkout are allowed if
an explicit obj:`),C=r(D,"EM",{});var Ye=l(C);N=i(Ye,"tmp_dir"),Ye.forEach(s),I=i(D," is used, so that by mistake no "),x=r(D,"CODE",{});var Ht=l(x);k=i(Ht,"/tmp"),Ht.forEach(s),A=i(D,` or similar important part of the filesystem will
get nuked. i.e. please always pass paths that start with `),H=r(D,"CODE",{});var pi=l(H);Nt=i(pi,"./"),pi.forEach(s),we=i(D,"."),D.forEach(s)},m(We,D){p(We,$,D),t($,j),t($,g),t(g,b),t($,T),t($,C),t(C,N),t($,I),t($,x),t(x,k),t($,A),t($,H),t(H,Nt),t($,we)},d(We){We&&s($)}}}function Qq(me){let $,j;return{c(){$=o("p"),j=a(`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`)},l(g){$=r(g,"P",{});var b=l($);j=i(b,`Each test can register multiple temporary directories and they all will get auto-removed, unless requested
otherwise.`),b.forEach(s)},m(g,b){p(g,$,b),t($,j)},d(g){g&&s($)}}}function eL(me){let $,j,g,b,T,C,N,I,x,k,A,H,Nt,we,We,D,_e,Ye,Ht,pi,sg,og,fi,vp,rg,lg,Tm,Ve,Rt,yp,No,ag,wp,ig,Im,zt,Ho,Ro,ng,zo,pg,fg,hg,Go,dg,$p,ug,cg,mg,Fo,Mo,_g,Bo,vg,yg,wg,Xe,Ep,hi,Wo,$g,Eg,gg,gp,S,Yo,bg,kg,bp,Cg,jg,kp,xg,Pg,Cp,Og,Tg,jp,Ig,Dg,xp,Ag,Sg,qg,Pp,$e,Vo,Lg,Ug,Op,Ng,Hg,Tp,Rg,zg,Dm,Xo,Am,Gt,Gg,Jo,Fg,Mg,Sm,Je,Ft,Ip,Zo,Bg,Dp,Wg,qm,Ze,Mt,Ap,Ko,Yg,Sp,Vg,Lm,Bt,Xg,Qo,Jg,Zg,Um,di,Kg,Nm,ui,Qg,Hm,er,Rm,ci,eb,zm,tr,Gm,mi,tb,Fm,sr,Mm,_i,sb,Bm,K,qp,ob,rb,Lp,lb,ab,Up,ib,nb,Np,pb,Wm,Ke,Wt,Hp,or,fb,Rp,hb,Ym,vi,db,Vm,rr,Xm,yi,ub,Jm,lr,Zm,Qe,Yt,zp,ar,cb,Gp,mb,Km,wi,_b,Qm,ir,e_,et,Vt,Fp,nr,vb,Mp,yb,t_,$i,wb,s_,pr,o_,Ei,$b,r_,Ee,gi,Bp,Eb,gb,bb,bi,Wp,kb,Cb,jb,ki,Yp,xb,Pb,l_,Ci,Ob,a_,fr,i_,ji,Tb,n_,Xt,Ib,Vp,Db,Ab,p_,hr,f_,xi,Sb,h_,Jt,qb,Xp,Lb,Ub,d_,dr,u_,Q,Nb,Jp,Hb,Rb,Zp,zb,Gb,Kp,Fb,Mb,c_,Zt,Bb,Qp,Wb,Yb,m_,ur,__,Pi,Vb,v_,cr,y_,ge,Xb,ef,Jb,Zb,tf,Kb,Qb,w_,mr,$_,Kt,e3,sf,t3,s3,E_,Qt,o3,of,r3,l3,g_,_r,b_,tt,es,rf,vr,a3,lf,i3,k_,ts,n3,yr,p3,f3,C_,wr,j_,$r,x_,Oi,h3,P_,st,ss,af,Er,d3,nf,u3,O_,gr,br,c3,m3,T_,kr,I_,ot,_3,pf,v3,y3,ff,w3,D_,be,$3,hf,E3,g3,df,b3,k3,A_,Cr,S_,ke,C3,uf,j3,x3,cf,P3,O3,q_,jr,L_,Ti,T3,U_,xr,Pr,I3,D3,N_,rt,os,mf,Or,A3,_f,S3,H_,rs,q3,vf,L3,U3,R_,Tr,z_,lt,ls,yf,Ir,N3,wf,H3,G_,Ii,R3,F_,Dr,M_,at,as,$f,Ar,z3,Ef,G3,B_,G,F3,gf,M3,B3,bf,W3,Y3,kf,V3,X3,Cf,J3,Z3,W_,ve,jf,K3,Q3,xf,e2,t2,Pf,s2,o2,Y_,Ce,r2,Of,l2,a2,Sr,i2,n2,V_,it,is,Tf,qr,p2,If,f2,X_,Di,h2,J_,nt,ns,Df,Lr,d2,Af,u2,Z_,Ai,Si,Ur,c2,m2,K_,Nr,Q_,qi,_2,ev,Hr,tv,ps,sv,fs,ov,pt,hs,Sf,Rr,v2,qf,y2,rv,zr,lv,ds,w2,Lf,$2,E2,av,us,g2,Uf,b2,k2,iv,Gr,nv,Li,C2,pv,Fr,fv,cs,j2,Nf,x2,P2,hv,Mr,dv,Ui,O2,uv,Br,cv,P,T2,Hf,I2,D2,Rf,A2,S2,zf,q2,L2,Gf,U2,N2,Ff,H2,R2,Wr,z2,G2,mv,ee,F2,Mf,M2,B2,Yr,W2,Y2,Bf,V2,X2,_v,ft,ms,Wf,Vr,J2,Yf,Z2,vv,ht,_s,Vf,Xr,K2,Xf,Q2,yv,Jr,Zr,e5,t5,wv,Kr,$v,Ni,s5,Ev,Qr,gv,Hi,o5,bv,dt,vs,Jf,el,r5,Zf,l5,kv,je,a5,Kf,i5,n5,Qf,p5,f5,Cv,tl,jv,ut,ys,eh,sl,h5,th,d5,xv,ol,rl,u5,c5,Pv,ll,Ov,al,Tv,ct,ws,sh,il,m5,oh,_5,Iv,$s,v5,rh,y5,w5,Dv,nl,Av,te,$5,lh,E5,g5,ah,b5,k5,ih,C5,j5,Sv,pl,qv,Ri,x5,Lv,zi,P5,Uv,q,Gi,nh,O5,T5,I5,Es,ph,D5,A5,fh,S5,q5,L5,gs,hh,U5,N5,dh,H5,R5,z5,bs,uh,G5,F5,ch,M5,B5,W5,ks,mh,Y5,V5,_h,X5,J5,Z5,Cs,vh,K5,Q5,yh,e4,t4,Nv,Fi,s4,Hv,js,wh,fl,$h,o4,r4,Eh,l4,a4,X,hl,gh,bh,i4,n4,kh,Ch,p4,f4,dl,jh,xh,h4,d4,Ph,Oh,u4,c4,ul,Th,Ih,m4,_4,Dh,Ah,v4,y4,cl,Sh,qh,w4,$4,Lh,Uh,E4,g4,ml,Nh,Hh,b4,k4,Rh,zh,C4,Rv,Mi,j4,zv,_l,Gv,xe,x4,Gh,P4,O4,Fh,T4,I4,Fv,vl,Mv,Bi,D4,Bv,yl,Wv,Pe,A4,Mh,S4,q4,Bh,L4,U4,Yv,wl,Vv,xs,N4,Wh,H4,R4,Xv,Wi,z4,Jv,Yi,Yh,G4,Zv,$l,Kv,mt,Ps,Vh,El,F4,Xh,M4,Qv,_t,Jh,B4,W4,Zh,Y4,V4,e1,Vi,X4,t1,Os,Kh,gl,J4,Z4,Qh,bl,K4,s1,Ts,Q4,ed,ek,tk,o1,Xi,sk,r1,kl,l1,vt,Is,td,Cl,ok,sd,rk,a1,Oe,lk,od,ak,ik,rd,nk,pk,i1,F,fk,ld,hk,dk,ad,uk,ck,id,mk,_k,nd,vk,yk,n1,jl,p1,Ji,wk,f1,xl,h1,yt,Ds,pd,Pl,$k,fd,Ek,d1,Zi,gk,u1,Ol,c1,wt,As,hd,Tl,bk,dd,kk,m1,Ki,Ck,_1,Il,v1,Qi,jk,y1,en,xk,w1,Dl,$1,$t,Ss,ud,Al,Pk,cd,Ok,E1,Te,Tk,md,Ik,Dk,_d,Ak,Sk,g1,se,qk,Sl,Lk,Uk,vd,Nk,Hk,yd,Rk,zk,b1,Et,qs,wd,ql,Gk,$d,Fk,k1,tn,Mk,C1,Ll,j1,Ls,Bk,Ed,Wk,Yk,x1,Ie,Vk,gd,Xk,Jk,bd,Zk,Kk,P1,Ul,O1,Us,Qk,kd,e0,t0,T1,Nl,I1,Ns,s0,Cd,o0,r0,D1,Hl,A1,sn,l0,S1,Rl,q1,on,a0,L1,zl,U1,M,i0,Gl,n0,p0,jd,f0,h0,xd,d0,u0,Pd,c0,m0,N1,oe,_0,Od,v0,y0,Td,w0,$0,Id,E0,g0,H1,De,b0,Dd,k0,C0,Ad,j0,x0,R1,Fl,z1,re,P0,Sd,O0,T0,qd,I0,D0,Ld,A0,S0,G1,Ml,F1,rn,q0,M1,Bl,B1,ln,L0,W1,Wl,Y1,an,U0,V1,gt,Hs,Ud,Yl,N0,Nd,H0,X1,Rs,R0,Hd,z0,G0,J1,zs,Vl,nn,Rd,F0,M0,B0,R,Xl,zd,W0,Y0,Gd,V0,X0,pn,Fd,J0,Z0,K0,Gs,Md,Q0,e6,Bd,t6,s6,o6,Fs,Wd,r6,l6,Yd,a6,i6,n6,fn,Vd,p6,f6,h6,Ae,Xd,d6,u6,Jd,c6,m6,Zd,_6,v6,y6,Jl,Zl,w6,Kd,$6,E6,g6,z,Qd,eu,b6,k6,tu,su,C6,j6,ou,ru,x6,P6,lu,au,O6,T6,iu,nu,I6,D6,pu,fu,A6,Z1,Ms,S6,hu,q6,L6,K1,Kl,Q1,B,U6,du,N6,H6,uu,R6,z6,cu,G6,F6,mu,M6,B6,ey,Ql,ty,bt,Bs,_u,ea,W6,vu,Y6,sy,Ws,V6,yu,X6,J6,oy,hn,Z6,ry,Se,K6,wu,Q6,e7,$u,t7,s7,ly,dn,o7,ay,ta,iy,Ys,r7,Eu,l7,a7,ny,un,gu,i7,py,sa,fy,oa,bu,n7,p7,hy,cn,ku,f7,dy,ra,uy,mn,h7,cy,_n,la,kt,d7,Cu,u7,c7,ju,m7,_7,v7,ye,vn,xu,y7,w7,$7,yn,Pu,E7,g7,b7,wn,Ou,k7,C7,j7,$n,Tu,x7,P7,my,Vs,_y,Xs,vy,Ct,Js,Iu,aa,O7,Du,T7,yy,qe,I7,Au,D7,A7,Su,S7,q7,wy,ia,$y,jt,Zs,qu,na,L7,Lu,U7,Ey,Ks,N7,Uu,H7,R7,gy,En,z7,by,Qs,Nu,pa,G7,Hu,F7,M7,B7,Ru,fa,W7,zu,Y7,V7,ky,le,X7,Gu,J7,Z7,Fu,K7,Q7,Mu,e8,t8,Cy,xt,eo,Bu,ha,s8,Wu,o8,jy,gn,Yu,r8,xy,da,Py,bn,l8,Oy,ua,Ty,to,a8,Vu,i8,n8,Iy,ca,Dy,kn,Xu,p8,Ay,ma,Sy,Cn,f8,qy,_a,Ly,so,h8,Ju,d8,u8,Uy,va,Ny,jn,Zu,c8,Hy,ya,Ry,xn,Ku,m8,zy,wa,Gy,Pn,_8,Fy,$a,My,On,v8,By,Ea,Wy,oo,y8,ga,w8,$8,Yy,Pt,ro,Qu,ba,E8,ec,g8,Vy,Tn,b8,Xy,ka,Jy,Le,k8,tc,C8,j8,sc,x8,P8,Zy,Ca,Ky,ae,O8,oc,T8,I8,rc,D8,A8,lc,S8,q8,Qy,ja,ew,In,L8,tw,Dn,U8,sw,An,N8,ow,ie,ac,H8,R8,ic,z8,G8,Ot,F8,nc,M8,B8,pc,W8,Y8,V8,fc,X8,rw,Ue,J8,hc,Z8,K8,dc,Q8,e9,lw,xa,aw,Ne,t9,Pa,s9,o9,Oa,r9,l9,iw,lo,a9,uc,i9,n9,nw,Sn,p9,pw,Tt,ao,cc,Ta,f9,mc,h9,fw,W,d9,_c,u9,c9,vc,m9,_9,yc,v9,y9,Ia,w9,$9,hw,Da,dw,io,E9,wc,g9,b9,uw,Aa,cw,no,k9,$c,C9,j9,mw,Sa,_w,O,x9,Ec,P9,O9,gc,T9,I9,bc,D9,A9,kc,S9,q9,Cc,L9,U9,jc,N9,H9,vw,po,R9,xc,z9,G9,yw,qa,ww,qn,F9,$w,La,Ew,He,M9,Pc,B9,W9,Oc,Y9,V9,gw,Ua,bw,fo,X9,Tc,J9,Z9,kw,Na,Cw,Ln,K9,jw,It,ho,Ic,Ha,Q9,Dc,eC,xw,uo,tC,Ac,sC,oC,Pw,Ra,Ow,Dt,co,Sc,za,rC,qc,lC,Tw,Ga,aC,Lc,iC,Iw,Fa,Dw,ne,nC,Uc,pC,fC,Nc,hC,dC,Hc,uC,cC,Aw,Ma,Sw,L,mC,Rc,_C,vC,zc,yC,wC,Gc,$C,EC,Fc,gC,bC,Mc,kC,CC,qw,mo,jC,Bc,xC,PC,Lw,At,_o,Wc,Ba,OC,Yc,TC,Uw,Un,IC,Nw,Wa,Hw,St,vo,Vc,Ya,DC,Xc,AC,Rw,Nn,SC,zw,Va,Gw,qt,yo,Jc,Xa,qC,Zc,LC,Fw,Hn,UC,Mw,pe,Ja,NC,Kc,HC,RC,zC,U,GC,Qc,FC,MC,em,BC,WC,tm,YC,VC,sm,XC,JC,Za,ZC,KC,om,QC,ej,rm,tj,sj,Ka,oj,Qa,rj,lj,Bw,Lt,wo,lm,ei,aj,am,ij,Ww,Rn,nj,Yw,fe,im,pj,fj,nm,hj,dj,pm,uj,cj,fm,mj,Vw,zn,_j,Xw,Gn,vj,Jw,Fn,yj,Zw,Mn,wj,Kw,$o,Bn,hm,$j,Ej,gj,Ut,bj,dm,kj,Cj,um,jj,xj,Qw,Wn,Pj,e$,ti,t$,Yn,Oj,s$,si,o$,Eo,Tj,cm,Ij,Dj,r$,go,Aj,mm,Sj,qj,l$,Vn,Lj,a$,bo,_m,oi,Uj,Nj,vm,ri,Hj,i$;return C=new E({}),No=new E({}),Xo=new w({props:{code:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/,`,highlighted:`RUN_SLOW=1 pytest tests/
RUN_SLOW=1 pytest examples/`}}),Zo=new E({}),Ko=new E({}),er=new w({props:{code:"pytest,",highlighted:"pytest"}}),tr=new w({props:{code:"make test,",highlighted:'make <span class="hljs-built_in">test</span>'}}),sr=new w({props:{code:"python -m pytest -n auto --dist=loadfile -s -v ./tests/,",highlighted:"python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),or=new E({}),rr=new w({props:{code:"pytest --collect-only -q,",highlighted:"pytest --collect-only -q"}}),lr=new w({props:{code:"pytest tests/test_optimization.py --collect-only -q,",highlighted:"pytest tests/test_optimization.py --collect-only -q"}}),ar=new E({}),ir=new w({props:{code:"pytest tests/test_logging.py,",highlighted:"pytest tests/test_logging.py"}}),nr=new E({}),pr=new w({props:{code:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w,",highlighted:"pytest tests/test_optimization.py::OptimizationTest::test_adam_w"}}),fr=new w({props:{code:"pytest tests/test_optimization.py::OptimizationTest,",highlighted:"pytest tests/test_optimization.py::OptimizationTest"}}),hr=new w({props:{code:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q,",highlighted:"pytest tests/test_optimization.py::OptimizationTest --collect-only -q"}}),dr=new w({props:{code:"pytest -k adam tests/test_optimization.py,",highlighted:"pytest -k adam tests/test_optimization.py"}}),ur=new w({props:{code:'pytest -k "not adam" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;not adam&quot;</span> tests/test_optimization.py'}}),cr=new w({props:{code:'pytest -k "ada and not adam" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;ada and not adam&quot;</span> tests/test_optimization.py'}}),mr=new w({props:{code:'pytest -k "test_adam_w or test_adam_w" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;test_adam_w or test_adam_w&quot;</span> tests/test_optimization.py'}}),_r=new w({props:{code:'pytest -k "test and ada" tests/test_optimization.py,',highlighted:'pytest -k <span class="hljs-string">&quot;test and ada&quot;</span> tests/test_optimization.py'}}),vr=new E({}),wr=new w({props:{code:"pip install pytest-picked,",highlighted:"pip install pytest-picked"}}),$r=new w({props:{code:"pytest --picked,",highlighted:"pytest --picked"}}),Er=new E({}),kr=new w({props:{code:"pip install pytest-xdist,",highlighted:"pip install pytest-xdist"}}),Cr=new w({props:{code:`[tool:pytest]
looponfailroots = transformers tests,`,highlighted:`<span class="hljs-section">[tool:pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),jr=new w({props:{code:`[pytest]
looponfailroots = transformers tests,`,highlighted:`<span class="hljs-section">[pytest]</span>
<span class="hljs-attr">looponfailroots</span> = transformers tests`}}),Or=new E({}),Tr=new w({props:{code:"pytest _ls -1 tests/*py | grep -v test_modeling_,",highlighted:"pytest _ls -1 tests/*py | grep -v test_modeling_"}}),Ir=new E({}),Dr=new w({props:{code:"pytest --cache-clear tests,",highlighted:"pytest --cache-clear tests"}}),Ar=new E({}),qr=new E({}),Lr=new E({}),Nr=new w({props:{code:"pip install pytest-flakefinder,",highlighted:"pip install pytest-flakefinder"}}),Hr=new w({props:{code:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py,",highlighted:"pytest --flake-finder --flake-runs=5 tests/test_failing_test.py"}}),ps=new tg({props:{$$slots:{default:[Jq]},$$scope:{ctx:me}}}),fs=new tg({props:{$$slots:{default:[Zq]},$$scope:{ctx:me}}}),Rr=new E({}),zr=new w({props:{code:"pip install pytest-random-order,",highlighted:"pip install pytest-random-order"}}),Gr=new w({props:{code:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663,`,highlighted:`pytest tests
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Fr=new w({props:{code:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663,`,highlighted:`pytest --random-order-seed=573663
[...]
Using --random-order-bucket=module
Using --random-order-seed=573663`}}),Mr=new w({props:{code:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py,",highlighted:"pytest --random-order-bucket=none tests/test_a.py tests/test_c.py tests/test_b.py"}}),Br=new w({props:{code:"pytest --random-order-bucket=none,",highlighted:"pytest --random-order-bucket=none"}}),Vr=new E({}),Xr=new E({}),Kr=new w({props:{code:"pip install pytest-sugar,",highlighted:"pip install pytest-sugar"}}),Qr=new w({props:{code:"pytest -p no:sugar,",highlighted:"pytest -p no:sugar"}}),el=new E({}),tl=new w({props:{code:"pytest --pspec tests/test_optimization.py,",highlighted:"pytest --pspec tests/test_optimization.py"}}),sl=new E({}),ll=new w({props:{code:"pip install pytest-instafail,",highlighted:"pip install pytest-instafail"}}),al=new w({props:{code:"pytest --instafail,",highlighted:"pytest --instafail"}}),il=new E({}),nl=new w({props:{code:'CUDA_VISIBLE_DEVICES="" pytest tests/test_logging.py,',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;&quot;</span> pytest tests/test_logging.py'}}),pl=new w({props:{code:'CUDA_VISIBLE_DEVICES="1" pytest tests/test_logging.py,',highlighted:'CUDA_VISIBLE_DEVICES=<span class="hljs-string">&quot;1&quot;</span> pytest tests/test_logging.py'}}),_l=new w({props:{code:`@require_torch_multi_gpu
def test_example_with_multi_gpu():,`,highlighted:`<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_with_multi_gpu</span>():`}}),vl=new w({props:{code:`@require_tf
def test_tf_thing_with_tensorflow():,`,highlighted:`<span class="hljs-meta">@require_tf</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tf_thing_with_tensorflow</span>():`}}),yl=new w({props:{code:`@require_torch_gpu
@slow
def test_example_slow_on_gpu():,`,highlighted:`<span class="hljs-meta">@require_torch_gpu</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_example_slow_on_gpu</span>():`}}),wl=new w({props:{code:`@parameterized.expand(...)
@require_torch_multi_gpu
def test_integration_foo():,`,highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@require_torch_multi_gpu</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),$l=new w({props:{code:`from transformers.testing_utils import get_gpu_count
n_gpu = get_gpu_count() # works with torch and tf,`,highlighted:`from transformers.testing_utils import get_gpu_count
n_gpu = get_gpu_count() <span class="hljs-comment"># works with torch and tf</span>`}}),El=new E({}),kl=new w({props:{code:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py,",highlighted:"CUDA_VISIBLE_DEVICES=0,1 RUN_SLOW=1 pytest -sv tests/test_trainer_distributed.py"}}),Cl=new E({}),jl=new w({props:{code:"pytest -s tests/test_logging.py,",highlighted:"pytest -s tests/test_logging.py"}}),xl=new w({props:{code:"py.test tests --junitxml=result.xml,",highlighted:"py.test tests --junitxml=result.xml"}}),Pl=new E({}),Ol=new w({props:{code:"pytest --color=no tests/test_logging.py,",highlighted:"pytest --color=no tests/test_logging.py"}}),Tl=new E({}),Il=new w({props:{code:"pytest --pastebin=failed tests/test_logging.py,",highlighted:"pytest --pastebin=failed tests/test_logging.py"}}),Dl=new w({props:{code:"pytest --pastebin=all tests/test_logging.py,",highlighted:"pytest --pastebin=all tests/test_logging.py"}}),Al=new E({}),ql=new E({}),Ll=new w({props:{code:`# test_this1.py
import unittest
from parameterized import parameterized
class TestMathUnitTest(unittest.TestCase):
    @parameterized.expand([
        ("negative", -1.5, -2.0),
        ("integer", 1, 1.0),
        ("large fraction", 1.6, 1),
    ])
    def test_floor(self, name, input, expected):
        assert_equal(math.floor(input), expected),`,highlighted:`<span class="hljs-comment"># test_this1.py</span>
<span class="hljs-keyword">import</span> unittest
<span class="hljs-keyword">from</span> parameterized <span class="hljs-keyword">import</span> parameterized
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMathUnitTest</span>(unittest.TestCase):
<span class="hljs-meta">    @parameterized.expand(<span class="hljs-params">[
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ]</span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">self, name, <span class="hljs-built_in">input</span>, expected</span>):
        assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Ul=new w({props:{code:'pytest -k "negative and integer" tests/test_mytest.py,',highlighted:'pytest -k <span class="hljs-string">&quot;negative and integer&quot;</span> tests/test_mytest.py'}}),Nl=new w({props:{code:'pytest -k "not negative" tests/test_mytest.py,',highlighted:'pytest -k <span class="hljs-string">&quot;not negative&quot;</span> tests/test_mytest.py'}}),Hl=new w({props:{code:"pytest test_this1.py --collect-only -q,",highlighted:"pytest test_this1.py --collect-only -q"}}),Rl=new w({props:{code:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction,`,highlighted:`test_this1.py::TestMathUnitTest::test_floor_0_negative
test_this1.py::TestMathUnitTest::test_floor_1_integer
test_this1.py::TestMathUnitTest::test_floor_2_large_fraction`}}),zl=new w({props:{code:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer,",highlighted:"pytest test_this1.py::TestMathUnitTest::test_floor_0_negative  test_this1.py::TestMathUnitTest::test_floor_1_integer"}}),Fl=new w({props:{code:`# test_this2.py
import pytest
@pytest.mark.parametrize(
    "name, input, expected",
    [
        ("negative", -1.5, -2.0),
        ("integer", 1, 1.0),
        ("large fraction", 1.6, 1),
    ],
)
def test_floor(name, input, expected):
    assert_equal(math.floor(input), expected),`,highlighted:`<span class="hljs-comment"># test_this2.py</span>
<span class="hljs-keyword">import</span> pytest
<span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params">
    <span class="hljs-string">&quot;name, input, expected&quot;</span>,
    [
        (<span class="hljs-params"><span class="hljs-string">&quot;negative&quot;</span>, -<span class="hljs-number">1.5</span>, -<span class="hljs-number">2.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;integer&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.0</span></span>),
        (<span class="hljs-params"><span class="hljs-string">&quot;large fraction&quot;</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1</span></span>),
    ],
</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_floor</span>(<span class="hljs-params">name, <span class="hljs-built_in">input</span>, expected</span>):
    assert_equal(math.floor(<span class="hljs-built_in">input</span>), expected)`}}),Ml=new w({props:{code:"pytest test_this2.py --collect-only -q,",highlighted:"pytest test_this2.py --collect-only -q"}}),Bl=new w({props:{code:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1],`,highlighted:`test_this2.py::test_floor[integer-1-1.0]
test_this2.py::test_floor[negative--1.5--2.0]
test_this2.py::test_floor[large fraction-1.6-1]`}}),Wl=new w({props:{code:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0],",highlighted:"pytest test_this2.py::test_floor[negative--1.5--2.0] test_this2.py::test_floor[integer-1-1.0]"}}),Yl=new E({}),Kl=new w({props:{code:`from transformers.testing_utils import TestCasePlus
class PathExampleTest(TestCasePlus):
    def test_something_involving_local_locations(self):
        data_dir = self.tests_dir / "fixtures/tests_samples/wmt_en_ro",`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_local_locations</span>(<span class="hljs-params">self</span>):
        data_dir = self.tests_dir / <span class="hljs-string">&quot;fixtures/tests_samples/wmt_en_ro&quot;</span>`}}),Ql=new w({props:{code:`from transformers.testing_utils import TestCasePlus
class PathExampleTest(TestCasePlus):
    def test_something_involving_stringified_locations(self):
        examples_dir = self.examples_dir_str,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">PathExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_involving_stringified_locations</span>(<span class="hljs-params">self</span>):
        examples_dir = self.examples_dir_str`}}),ea=new E({}),ta=new w({props:{code:`from transformers.testing_utils import TestCasePlus
class ExamplesTests(TestCasePlus):
    def test_whatever(self):
        tmp_dir = self.get_auto_remove_tmp_dir(),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamplesTests</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
        tmp_dir = self.get_auto_remove_tmp_dir()`}}),sa=new w({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir(),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir()`}}),ra=new w({props:{code:`def test_whatever(self):
    tmp_dir = self.get_auto_remove_tmp_dir("./xxx"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_whatever</span>(<span class="hljs-params">self</span>):
    tmp_dir = self.get_auto_remove_tmp_dir(<span class="hljs-string">&quot;./xxx&quot;</span>)`}}),Vs=new tg({props:{$$slots:{default:[Kq]},$$scope:{ctx:me}}}),Xs=new tg({props:{$$slots:{default:[Qq]},$$scope:{ctx:me}}}),aa=new E({}),ia=new w({props:{code:`import os
from transformers.testing_utils import ExtendSysPath
bindir = os.path.abspath(os.path.dirname(__file__))
with ExtendSysPath(f"{bindir}/.."):
    from test_trainer import TrainerIntegrationCommon  # noqa,`,highlighted:`<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> ExtendSysPath
bindir = os.path.abspath(os.path.dirname(__file__))
<span class="hljs-keyword">with</span> ExtendSysPath(<span class="hljs-string">f&quot;<span class="hljs-subst">{bindir}</span>/..&quot;</span>):
    <span class="hljs-keyword">from</span> test_trainer <span class="hljs-keyword">import</span> TrainerIntegrationCommon  <span class="hljs-comment"># noqa</span>`}}),na=new E({}),ha=new E({}),da=new w({props:{code:`@unittest.skip("this bug needs to be fixed")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@unittest.skip(<span class="hljs-params"><span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ua=new w({props:{code:'@pytest.mark.skip(reason="this bug needs to be fixed"),',highlighted:'<span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&quot;this bug needs to be fixed&quot;</span></span>)</span>'}}),ca=new w({props:{code:`@pytest.mark.xfail
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@pytest.mark.xfail</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),ma=new w({props:{code:`def test_feature_x():
    if not has_something():
        pytest.skip("unsupported configuration"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> has_something():
        pytest.skip(<span class="hljs-string">&quot;unsupported configuration&quot;</span>)`}}),_a=new w({props:{code:`import pytest
if not pytest.config.getoption("--custom-flag"):
    pytest.skip("--custom-flag is missing, skipping tests", allow_module_level=True),`,highlighted:`<span class="hljs-keyword">import</span> pytest
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pytest.config.getoption(<span class="hljs-string">&quot;--custom-flag&quot;</span>):
    pytest.skip(<span class="hljs-string">&quot;--custom-flag is missing, skipping tests&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)`}}),va=new w({props:{code:`def test_feature_x():
    pytest.xfail("expected to fail until bug XYZ is fixed"),`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():
    pytest.xfail(<span class="hljs-string">&quot;expected to fail until bug XYZ is fixed&quot;</span>)`}}),ya=new w({props:{code:'docutils = pytest.importorskip("docutils", minversion="0.3"),',highlighted:'docutils = pytest.importorskip(<span class="hljs-string">&quot;docutils&quot;</span>, minversion=<span class="hljs-string">&quot;0.3&quot;</span>)'}}),wa=new w({props:{code:`@pytest.mark.skipif(sys.version_info < (3,6), reason="requires python3.6 or higher")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>,<span class="hljs-number">6</span></span>), reason=<span class="hljs-string">&quot;requires python3.6 or higher&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),$a=new w({props:{code:`@unittest.skipIf(torch_device == "cpu", "Can't do half precision")
def test_feature_x():,`,highlighted:`<span class="hljs-meta">@unittest.skipIf(<span class="hljs-params">torch_device == <span class="hljs-string">&quot;cpu&quot;</span>, <span class="hljs-string">&quot;Can&#x27;t do half precision&quot;</span></span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>():`}}),Ea=new w({props:{code:`@pytest.mark.skipif(sys.platform == 'win32', reason="does not run on windows")
class TestClass():
    def test_feature_x(self):,`,highlighted:`<span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.platform == <span class="hljs-string">&#x27;win32&#x27;</span>, reason=<span class="hljs-string">&quot;does not run on windows&quot;</span></span>)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_feature_x</span>(<span class="hljs-params">self</span>):`}}),ba=new E({}),ka=new w({props:{code:`from transformers.testing_utils import slow
@slow
def test_integration_foo():,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> slow
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),Ca=new w({props:{code:"RUN_SLOW=1 pytest tests,",highlighted:"RUN_SLOW=1 pytest tests"}}),ja=new w({props:{code:`@parameterized.expand(...)
@slow
def test_integration_foo():,`,highlighted:`<span class="hljs-meta">@parameterized.expand(<span class="hljs-params">...</span>)</span>
<span class="hljs-meta">@slow</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_integration_foo</span>():`}}),xa=new w({props:{code:"grep tiny tests examples,",highlighted:"grep tiny tests examples"}}),Ta=new E({}),Da=new w({props:{code:`import sys
def print_to_stdout(s): print(s)
def print_to_stderr(s): sys.stderr.write(s)
def test_result_and_stdout(capsys):
    msg = "Hello"
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr() # consume the captured output streams
    # optional: if you want to replay the consumed streams:
    sys.stdout.write(out)
    sys.stderr.write(err)
    # test:
    assert msg in out
    assert msg in err,`,highlighted:`<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>): <span class="hljs-built_in">print</span>(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stderr</span>(<span class="hljs-params">s</span>): sys.stderr.write(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>(<span class="hljs-params">capsys</span>):
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    print_to_stdout(msg)
    print_to_stderr(msg)
    out, err = capsys.readouterr() <span class="hljs-comment"># consume the captured output streams</span>
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    sys.stderr.write(err)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> err`}}),Aa=new w({props:{code:`def raise_exception(msg): raise ValueError(msg)
def test_something_exception():
    msg = "Not a good value"
    error = ''
    try:
        raise_exception(msg)
    except Exception as e:
        error = str(e)
        assert msg in error, f"{msg} is in the exception:\\n{error}",`,highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">raise_exception</span>(<span class="hljs-params">msg</span>): <span class="hljs-keyword">raise</span> ValueError(msg)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_something_exception</span>():
    msg = <span class="hljs-string">&quot;Not a good value&quot;</span>
    error = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">try</span>:
        raise_exception(msg)
    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
        error = <span class="hljs-built_in">str</span>(e)
        <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> error, <span class="hljs-string">f&quot;<span class="hljs-subst">{msg}</span> is in the exception:\\n<span class="hljs-subst">{error}</span>&quot;</span>`}}),Sa=new w({props:{code:`from io import StringIO
from contextlib import redirect_stdout
def print_to_stdout(s): print(s)
def test_result_and_stdout():
    msg = "Hello"
    buffer = StringIO()
    with redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    # optional: if you want to replay the consumed streams:
    sys.stdout.write(out)
    # test:
    assert msg in out,`,highlighted:`<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO
<span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> redirect_stdout
<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_to_stdout</span>(<span class="hljs-params">s</span>): <span class="hljs-built_in">print</span>(s)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">test_result_and_stdout</span>():
    msg = <span class="hljs-string">&quot;Hello&quot;</span>
    buffer = StringIO()
    <span class="hljs-keyword">with</span> redirect_stdout(buffer):
        print_to_stdout(msg)
    out = buffer.getvalue()
    <span class="hljs-comment"># optional: if you want to replay the consumed streams:</span>
    sys.stdout.write(out)
    <span class="hljs-comment"># test:</span>
    <span class="hljs-keyword">assert</span> msg <span class="hljs-keyword">in</span> out`}}),qa=new w({props:{code:`from transformers.testing_utils import CaptureStdout
with CaptureStdout() as cs:
    function_that_writes_to_stdout()
print(cs.out),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout()
<span class="hljs-built_in">print</span>(cs.out)`}}),La=new w({props:{code:`from transformers.testing_utils import CaptureStdout
msg = "Secret message\\r"
final = "Hello World"
with CaptureStdout() as cs:
    print(msg + final)
assert cs.out == final+"\\n", f"captured: {cs.out}, expecting {final}",`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStdout
msg = <span class="hljs-string">&quot;Secret message\\r&quot;</span>
final = <span class="hljs-string">&quot;Hello World&quot;</span>
<span class="hljs-keyword">with</span> CaptureStdout() <span class="hljs-keyword">as</span> cs:
    <span class="hljs-built_in">print</span>(msg + final)
<span class="hljs-keyword">assert</span> cs.out == final+<span class="hljs-string">&quot;\\n&quot;</span>, <span class="hljs-string">f&quot;captured: <span class="hljs-subst">{cs.out}</span>, expecting <span class="hljs-subst">{final}</span>&quot;</span>`}}),Ua=new w({props:{code:`from transformers.testing_utils import CaptureStderr
with CaptureStderr() as cs:
    function_that_writes_to_stderr()
print(cs.err),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStderr
<span class="hljs-keyword">with</span> CaptureStderr() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stderr()
<span class="hljs-built_in">print</span>(cs.err)`}}),Na=new w({props:{code:`from transformers.testing_utils import CaptureStd
with CaptureStd() as cs:
    function_that_writes_to_stdout_and_stderr()
print(cs.err, cs.out),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureStd
<span class="hljs-keyword">with</span> CaptureStd() <span class="hljs-keyword">as</span> cs:
    function_that_writes_to_stdout_and_stderr()
<span class="hljs-built_in">print</span>(cs.err, cs.out)`}}),Ha=new E({}),Ra=new w({props:{code:`from transformers import logging
from transformers.testing_utils import CaptureLogger

msg = "Testing 1, 2, 3"
logging.set_verbosity_info()
logger = logging.get_logger("transformers.models.bart.tokenization_bart")
with CaptureLogger(logger) as cl:
    logger.info(msg)
assert cl.out, msg+"\\n",`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> logging
<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> CaptureLogger

msg = <span class="hljs-string">&quot;Testing 1, 2, 3&quot;</span>
logging.set_verbosity_info()
logger = logging.get_logger(<span class="hljs-string">&quot;transformers.models.bart.tokenization_bart&quot;</span>)
<span class="hljs-keyword">with</span> CaptureLogger(logger) <span class="hljs-keyword">as</span> cl:
    logger.info(msg)
<span class="hljs-keyword">assert</span> cl.out, msg+<span class="hljs-string">&quot;\\n&quot;</span>`}}),za=new E({}),Fa=new w({props:{code:`from transformers.testing_utils import mockenv
class HfArgumentParserTest(unittest.TestCase):
    @mockenv(TRANSFORMERS_VERBOSITY="error")
    def test_env_override(self):
        env_level_str = os.getenv("TRANSFORMERS_VERBOSITY", None),`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> mockenv
<span class="hljs-keyword">class</span> <span class="hljs-title class_">HfArgumentParserTest</span>(unittest.TestCase):
<span class="hljs-meta">    @mockenv(<span class="hljs-params">TRANSFORMERS_VERBOSITY=<span class="hljs-string">&quot;error&quot;</span></span>)</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_env_override</span>(<span class="hljs-params">self</span>):
        env_level_str = os.getenv(<span class="hljs-string">&quot;TRANSFORMERS_VERBOSITY&quot;</span>, <span class="hljs-literal">None</span>)`}}),Ma=new w({props:{code:`from transformers.testing_utils import TestCasePlus
class EnvExampleTest(TestCasePlus):
    def test_external_prog(self):
        env = self.get_env()
        # now call the external program, passing \`env\` to it,`,highlighted:`<span class="hljs-keyword">from</span> transformers.testing_utils <span class="hljs-keyword">import</span> TestCasePlus
<span class="hljs-keyword">class</span> <span class="hljs-title class_">EnvExampleTest</span>(<span class="hljs-title class_ inherited__">TestCasePlus</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_external_prog</span>(<span class="hljs-params">self</span>):
        env = self.get_env()
        <span class="hljs-comment"># now call the external program, passing \`env\` to it</span>`}}),Ba=new E({}),Wa=new w({props:{code:`seed = 42

# python RNG
import random
random.seed(seed)

# pytorch RNGs
import torch
torch.manual_seed(seed)
torch.backends.cudnn.deterministic = True
if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)

# numpy RNG
import numpy as np
np.random.seed(seed)

# tf RNG
tf.random.set_seed(seed),`,highlighted:`seed = <span class="hljs-number">42</span>

<span class="hljs-comment"># python RNG</span>
<span class="hljs-keyword">import</span> random
random.seed(seed)

<span class="hljs-comment"># pytorch RNGs</span>
<span class="hljs-keyword">import</span> torch
torch.manual_seed(seed)
torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>
<span class="hljs-keyword">if</span> torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)

<span class="hljs-comment"># numpy RNG</span>
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
np.random.seed(seed)

<span class="hljs-comment"># tf RNG</span>
tf.random.set_seed(seed)`}}),Ya=new E({}),Va=new w({props:{code:"pytest tests/test_logging.py -W error::UserWarning --pdb,",highlighted:"pytest tests/test_logging.py -W error::UserWarning --pdb"}}),Xa=new E({}),ei=new E({}),ti=new w({props:{code:`- run:
    name: run CI experiment
    command: |
        set +euo pipefail
        echo "setting run-all-despite-any-errors-mode"
        this_command_will_fail
        echo "but bash continues to run"
        # emulate another failure
        false
        # but the last command must be a success
        echo "during experiment do not remove: reporting success to CI, even if there were failures",`,highlighted:`<span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">CI</span> <span class="hljs-string">experiment</span>
    <span class="hljs-attr">command:</span> <span class="hljs-string">|
        set +euo pipefail
        echo &quot;setting run-all-despite-any-errors-mode&quot;
        this_command_will_fail
        echo &quot;but bash continues to run&quot;
        # emulate another failure
        false
        # but the last command must be a success
        echo &quot;during experiment do not remove: reporting success to CI, even if there were failures&quot;</span>`}}),si=new w({props:{code:"cmd_that_may_fail || true,",highlighted:'cmd_that_may_fail || <span class="hljs-literal">true</span>'}}),{c(){$=o("meta"),j=f(),g=o("h1"),b=o("a"),T=o("span"),u(C.$$.fragment),N=f(),I=o("span"),x=a("Testing"),k=f(),A=o("p"),H=a("Let\u2019s take a look at how \u{1F917} Transformer models are tested and how you can write new tests and improve the existing ones."),Nt=f(),we=o("p"),We=a("There are 2 test suites in the repository:"),D=f(),_e=o("ol"),Ye=o("li"),Ht=o("code"),pi=a("tests"),sg=a(" \u2014 tests for the general API"),og=f(),fi=o("li"),vp=o("code"),rg=a("examples"),lg=a(" \u2014 tests primarily for various applications that aren\u2019t part of the API"),Tm=f(),Ve=o("h2"),Rt=o("a"),yp=o("span"),u(No.$$.fragment),ag=f(),wp=o("span"),ig=a("How transformers are tested"),Im=f(),zt=o("ol"),Ho=o("li"),Ro=o("p"),ng=a(`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),zo=o("a"),pg=a("config file"),fg=a(`, so that if needed you can reproduce the same
environment on your machine.`),hg=f(),Go=o("p"),dg=a("These CI jobs don\u2019t run "),$p=o("code"),ug=a("@slow"),cg=a(" tests."),mg=f(),Fo=o("li"),Mo=o("p"),_g=a("There are 3 jobs run by "),Bo=o("a"),vg=a("github actions"),yg=a(":"),wg=f(),Xe=o("ul"),Ep=o("li"),hi=o("p"),Wo=o("a"),$g=a("torch hub integration"),Eg=a(`: checks whether torch hub
integration works.`),gg=f(),gp=o("li"),S=o("p"),Yo=o("a"),bg=a("self-hosted (push)"),kg=a(`: runs fast tests on GPU only on commits on
`),bp=o("code"),Cg=a("master"),jg=a(". It only runs if a commit on "),kp=o("code"),xg=a("master"),Pg=a(" has updated the code in one of the following folders: "),Cp=o("code"),Og=a("src"),Tg=a(`,
`),jp=o("code"),Ig=a("tests"),Dg=a(", "),xp=o("code"),Ag=a(".github"),Sg=a(" (to prevent running on added model cards, notebooks, etc.)"),qg=f(),Pp=o("li"),$e=o("p"),Vo=o("a"),Lg=a("self-hosted runner"),Ug=a(`: runs normal and slow tests on GPU in
`),Op=o("code"),Ng=a("tests"),Hg=a(" and "),Tp=o("code"),Rg=a("examples"),zg=a(":"),Dm=f(),u(Xo.$$.fragment),Am=f(),Gt=o("p"),Gg=a("The results can be observed "),Jo=o("a"),Fg=a("here"),Mg=a("."),Sm=f(),Je=o("h2"),Ft=o("a"),Ip=o("span"),u(Zo.$$.fragment),Bg=f(),Dp=o("span"),Wg=a("Running tests"),qm=f(),Ze=o("h3"),Mt=o("a"),Ap=o("span"),u(Ko.$$.fragment),Yg=f(),Sp=o("span"),Vg=a("Choosing which tests to run"),Lm=f(),Bt=o("p"),Xg=a(`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Qo=o("a"),Jg=a("here"),Zg=a("."),Um=f(),di=o("p"),Kg=a("Here are some most useful ways of running tests."),Nm=f(),ui=o("p"),Qg=a("Run all:"),Hm=f(),u(er.$$.fragment),Rm=f(),ci=o("p"),eb=a("or:"),zm=f(),u(tr.$$.fragment),Gm=f(),mi=o("p"),tb=a("Note that the latter is defined as:"),Fm=f(),u(sr.$$.fragment),Mm=f(),_i=o("p"),sb=a("which tells pytest to:"),Bm=f(),K=o("ul"),qp=o("li"),ob=a("run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),rb=f(),Lp=o("li"),lb=a("ensure that all tests from the same file will be run by the same test process"),ab=f(),Up=o("li"),ib=a("do not capture output"),nb=f(),Np=o("li"),pb=a("run in verbose mode"),Wm=f(),Ke=o("h3"),Wt=o("a"),Hp=o("span"),u(or.$$.fragment),fb=f(),Rp=o("span"),hb=a("Getting the list of all tests"),Ym=f(),vi=o("p"),db=a("All tests of the test suite:"),Vm=f(),u(rr.$$.fragment),Xm=f(),yi=o("p"),ub=a("All tests of a given test file:"),Jm=f(),u(lr.$$.fragment),Zm=f(),Qe=o("h3"),Yt=o("a"),zp=o("span"),u(ar.$$.fragment),cb=f(),Gp=o("span"),mb=a("Run a specific test module"),Km=f(),wi=o("p"),_b=a("To run an individual test module:"),Qm=f(),u(ir.$$.fragment),e_=f(),et=o("h3"),Vt=o("a"),Fp=o("span"),u(nr.$$.fragment),vb=f(),Mp=o("span"),yb=a("Run specific tests"),t_=f(),$i=o("p"),wb=a(`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),s_=f(),u(pr.$$.fragment),o_=f(),Ei=o("p"),$b=a("Here:"),r_=f(),Ee=o("ul"),gi=o("li"),Bp=o("code"),Eb=a("tests/test_optimization.py"),gb=a(" - the file with tests"),bb=f(),bi=o("li"),Wp=o("code"),kb=a("OptimizationTest"),Cb=a(" - the name of the class"),jb=f(),ki=o("li"),Yp=o("code"),xb=a("test_adam_w"),Pb=a(" - the name of the specific test function"),l_=f(),Ci=o("p"),Ob=a("If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),a_=f(),u(fr.$$.fragment),i_=f(),ji=o("p"),Tb=a("will run all the tests inside that class."),n_=f(),Xt=o("p"),Ib=a("As mentioned earlier you can see what tests are contained inside the "),Vp=o("code"),Db=a("OptimizationTest"),Ab=a(" class by running:"),p_=f(),u(hr.$$.fragment),f_=f(),xi=o("p"),Sb=a("You can run tests by keyword expressions."),h_=f(),Jt=o("p"),qb=a("To run only tests whose name contains "),Xp=o("code"),Lb=a("adam"),Ub=a(":"),d_=f(),u(dr.$$.fragment),u_=f(),Q=o("p"),Nb=a("Logical "),Jp=o("code"),Hb=a("and"),Rb=a(" and "),Zp=o("code"),zb=a("or"),Gb=a(" can be used to indicate whether all keywords should match or either. "),Kp=o("code"),Fb=a("not"),Mb=a(` can be used to
negate.`),c_=f(),Zt=o("p"),Bb=a("To run all tests except those whose name contains "),Qp=o("code"),Wb=a("adam"),Yb=a(":"),m_=f(),u(ur.$$.fragment),__=f(),Pi=o("p"),Vb=a("And you can combine the two patterns in one:"),v_=f(),u(cr.$$.fragment),y_=f(),ge=o("p"),Xb=a("For example to run both "),ef=o("code"),Jb=a("test_adafactor"),Zb=a(" and "),tf=o("code"),Kb=a("test_adam_w"),Qb=a(" you can use:"),w_=f(),u(mr.$$.fragment),$_=f(),Kt=o("p"),e3=a("Note that we use "),sf=o("code"),t3=a("or"),s3=a(" here, since we want either of the keywords to match to include both."),E_=f(),Qt=o("p"),o3=a("If you want to include only tests that include both patterns, "),of=o("code"),r3=a("and"),l3=a(" is to be used:"),g_=f(),u(_r.$$.fragment),b_=f(),tt=o("h3"),es=o("a"),rf=o("span"),u(vr.$$.fragment),a3=f(),lf=o("span"),i3=a("Run only modified tests"),k_=f(),ts=o("p"),n3=a("You can run the tests related to the unstaged files or the current branch (according to Git) by using "),yr=o("a"),p3=a("pytest-picked"),f3=a(`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),C_=f(),u(wr.$$.fragment),j_=f(),u($r.$$.fragment),x_=f(),Oi=o("p"),h3=a("All tests will be run from files and folders which are modified, but not yet committed."),P_=f(),st=o("h3"),ss=o("a"),af=o("span"),u(Er.$$.fragment),d3=f(),nf=o("span"),u3=a("Automatically rerun failed tests on source modification"),O_=f(),gr=o("p"),br=o("a"),c3=a("pytest-xdist"),m3=a(` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),T_=f(),u(kr.$$.fragment),I_=f(),ot=o("p"),_3=a("To enter the mode: "),pf=o("code"),v3=a("pytest -f"),y3=a(" or "),ff=o("code"),w3=a("pytest --looponfail"),D_=f(),be=o("p"),$3=a("File changes are detected by looking at "),hf=o("code"),E3=a("looponfailroots"),g3=a(` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),df=o("code"),b3=a("setup.cfg"),k3=a(":"),A_=f(),u(Cr.$$.fragment),S_=f(),ke=o("p"),C3=a("or "),uf=o("code"),j3=a("pytest.ini"),x3=a("/"),cf=o("code"),P3=a("tox.ini"),O3=a(" files:"),q_=f(),u(jr.$$.fragment),L_=f(),Ti=o("p"),T3=a(`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),U_=f(),xr=o("p"),Pr=o("a"),I3=a("pytest-watch"),D3=a(" is an alternative implementation of this functionality."),N_=f(),rt=o("h3"),os=o("a"),mf=o("span"),u(Or.$$.fragment),A3=f(),_f=o("span"),S3=a("Skip a test module"),H_=f(),rs=o("p"),q3=a(`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),vf=o("code"),L3=a("test_modeling_*.py"),U3=a(" tests:"),R_=f(),u(Tr.$$.fragment),z_=f(),lt=o("h3"),ls=o("a"),yf=o("span"),u(Ir.$$.fragment),N3=f(),wf=o("span"),H3=a("Clearing state"),G_=f(),Ii=o("p"),R3=a("CI builds and when isolation is important (against speed), cache should be cleared:"),F_=f(),u(Dr.$$.fragment),M_=f(),at=o("h3"),as=o("a"),$f=o("span"),u(Ar.$$.fragment),z3=f(),Ef=o("span"),G3=a("Running tests in parallel"),B_=f(),G=o("p"),F3=a("As mentioned earlier "),gf=o("code"),M3=a("make test"),B3=a(" runs tests in parallel via "),bf=o("code"),W3=a("pytest-xdist"),Y3=a(" plugin ("),kf=o("code"),V3=a("-n X"),X3=a(" argument, e.g. "),Cf=o("code"),J3=a("-n 2"),Z3=a(`
to run 2 parallel jobs).`),W_=f(),ve=o("p"),jf=o("code"),K3=a("pytest-xdist"),Q3=a("\u2019s "),xf=o("code"),e2=a("--dist="),t2=a(" option allows one to control how the tests are grouped. "),Pf=o("code"),s2=a("--dist=loadfile"),o2=a(` puts the
tests located in one file onto the same process.`),Y_=f(),Ce=o("p"),r2=a("Since the order of executed tests is different and unpredictable, if running the test suite with "),Of=o("code"),l2=a("pytest-xdist"),a2=a(`
produces failures (meaning we have some undetected coupled tests), use `),Sr=o("a"),i2=a("pytest-replay"),n2=a(` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),V_=f(),it=o("h3"),is=o("a"),Tf=o("span"),u(qr.$$.fragment),p2=f(),If=o("span"),f2=a("Test order and repetition"),X_=f(),Di=o("p"),h2=a(`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),J_=f(),nt=o("h4"),ns=o("a"),Df=o("span"),u(Lr.$$.fragment),d2=f(),Af=o("span"),u2=a("Repeat tests"),Z_=f(),Ai=o("ul"),Si=o("li"),Ur=o("a"),c2=a("pytest-flakefinder"),m2=a(":"),K_=f(),u(Nr.$$.fragment),Q_=f(),qi=o("p"),_2=a("And then run every test multiple times (50 by default):"),ev=f(),u(Hr.$$.fragment),tv=f(),u(ps.$$.fragment),sv=f(),u(fs.$$.fragment),ov=f(),pt=o("h4"),hs=o("a"),Sf=o("span"),u(Rr.$$.fragment),v2=f(),qf=o("span"),y2=a("Run tests in a random order"),rv=f(),u(zr.$$.fragment),lv=f(),ds=o("p"),w2=a("Important: the presence of "),Lf=o("code"),$2=a("pytest-random-order"),E2=a(` will automatically randomize tests, no configuration change or
command line options is required.`),av=f(),us=o("p"),g2=a(`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),Uf=o("code"),b2=a("pytest-random-order"),k2=a(" is installed it will print the random seed it used for that session, e.g:"),iv=f(),u(Gr.$$.fragment),nv=f(),Li=o("p"),C2=a("So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),pv=f(),u(Fr.$$.fragment),fv=f(),cs=o("p"),j2=a(`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Nf=o("code"),x2=a("--random-order-bucket=none"),P2=a(", e.g.:"),hv=f(),u(Mr.$$.fragment),dv=f(),Ui=o("p"),O2=a("To disable the shuffling for all tests:"),uv=f(),u(Br.$$.fragment),cv=f(),P=o("p"),T2=a("By default "),Hf=o("code"),I2=a("--random-order-bucket=module"),D2=a(` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Rf=o("code"),A2=a("class"),S2=a(", "),zf=o("code"),q2=a("package"),L2=a(", "),Gf=o("code"),U2=a("global"),N2=a(" and "),Ff=o("code"),H2=a("none"),R2=a(` levels. For the complete details please see its
`),Wr=o("a"),z2=a("documentation"),G2=a("."),mv=f(),ee=o("p"),F2=a("Another randomization alternative is: "),Mf=o("code"),M2=a("pytest-randomly"),B2=a(" <"),Yr=o("a"),W2=a("https://github.com/pytest-dev/pytest-randomly>`"),Y2=a(`__. This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Bf=o("code"),V2=a("pytest-random-order"),X2=a(". It has the same problem of imposing itself once installed."),_v=f(),ft=o("h3"),ms=o("a"),Wf=o("span"),u(Vr.$$.fragment),J2=f(),Yf=o("span"),Z2=a("Look and feel variations"),vv=f(),ht=o("h4"),_s=o("a"),Vf=o("span"),u(Xr.$$.fragment),K2=f(),Xf=o("span"),Q2=a("pytest-sugar"),yv=f(),Jr=o("p"),Zr=o("a"),e5=a("pytest-sugar"),t5=a(` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),wv=f(),u(Kr.$$.fragment),$v=f(),Ni=o("p"),s5=a("To run tests without it, run:"),Ev=f(),u(Qr.$$.fragment),gv=f(),Hi=o("p"),o5=a("or uninstall it."),bv=f(),dt=o("h4"),vs=o("a"),Jf=o("span"),u(el.$$.fragment),r5=f(),Zf=o("span"),l5=a("Report each sub-test name and its progress"),kv=f(),je=o("p"),a5=a("For a single or a group of tests via "),Kf=o("code"),i5=a("pytest"),n5=a(" (after "),Qf=o("code"),p5=a("pip install pytest-pspec"),f5=a("):"),Cv=f(),u(tl.$$.fragment),jv=f(),ut=o("h4"),ys=o("a"),eh=o("span"),u(sl.$$.fragment),h5=f(),th=o("span"),d5=a("Instantly shows failed tests"),xv=f(),ol=o("p"),rl=o("a"),u5=a("pytest-instafail"),c5=a(` shows failures and errors instantly instead of
waiting until the end of test session.`),Pv=f(),u(ll.$$.fragment),Ov=f(),u(al.$$.fragment),Tv=f(),ct=o("h3"),ws=o("a"),sh=o("span"),u(il.$$.fragment),m5=f(),oh=o("span"),_5=a("To GPU or not to GPU"),Iv=f(),$s=o("p"),v5=a("On a GPU-enabled setup, to test in CPU-only mode add "),rh=o("code"),y5=a('CUDA_VISIBLE_DEVICES=""'),w5=a(":"),Dv=f(),u(nl.$$.fragment),Av=f(),te=o("p"),$5=a("or if you have multiple gpus, you can specify which one is to be used by "),lh=o("code"),E5=a("pytest"),g5=a(`. For example, to use only the
second gpu if you have gpus `),ah=o("code"),b5=a("0"),k5=a(" and "),ih=o("code"),C5=a("1"),j5=a(", you can run:"),Sv=f(),u(pl.$$.fragment),qv=f(),Ri=o("p"),x5=a("This is handy when you want to run different tasks on different GPUs."),Lv=f(),zi=o("p"),P5=a(`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),Uv=f(),q=o("ul"),Gi=o("li"),nh=o("code"),O5=a("require_torch"),T5=a(" - this test will run only under torch"),I5=f(),Es=o("li"),ph=o("code"),D5=a("require_torch_gpu"),A5=a(" - as "),fh=o("code"),S5=a("require_torch"),q5=a(" plus requires at least 1 GPU"),L5=f(),gs=o("li"),hh=o("code"),U5=a("require_torch_multi_gpu"),N5=a(" - as "),dh=o("code"),H5=a("require_torch"),R5=a(" plus requires at least 2 GPUs"),z5=f(),bs=o("li"),uh=o("code"),G5=a("require_torch_non_multi_gpu"),F5=a(" - as "),ch=o("code"),M5=a("require_torch"),B5=a(" plus requires 0 or 1 GPUs"),W5=f(),ks=o("li"),mh=o("code"),Y5=a("require_torch_up_to_2_gpus"),V5=a(" - as "),_h=o("code"),X5=a("require_torch"),J5=a(" plus requires 0 or 1 or 2 GPUs"),Z5=f(),Cs=o("li"),vh=o("code"),K5=a("require_torch_tpu"),Q5=a(" - as "),yh=o("code"),e4=a("require_torch"),t4=a(" plus requires at least 1 TPU"),Nv=f(),Fi=o("p"),s4=a("Let\u2019s depict the GPU requirements in the following table:"),Hv=f(),js=o("table"),wh=o("thead"),fl=o("tr"),$h=o("th"),o4=a("n gpus"),r4=f(),Eh=o("th"),l4=a("decorator"),a4=f(),X=o("tbody"),hl=o("tr"),gh=o("td"),bh=o("code"),i4=a(">= 0"),n4=f(),kh=o("td"),Ch=o("code"),p4=a("@require_torch"),f4=f(),dl=o("tr"),jh=o("td"),xh=o("code"),h4=a(">= 1"),d4=f(),Ph=o("td"),Oh=o("code"),u4=a("@require_torch_gpu"),c4=f(),ul=o("tr"),Th=o("td"),Ih=o("code"),m4=a(">= 2"),_4=f(),Dh=o("td"),Ah=o("code"),v4=a("@require_torch_multi_gpu"),y4=f(),cl=o("tr"),Sh=o("td"),qh=o("code"),w4=a("< 2"),$4=f(),Lh=o("td"),Uh=o("code"),E4=a("@require_torch_non_multi_gpu"),g4=f(),ml=o("tr"),Nh=o("td"),Hh=o("code"),b4=a("< 3"),k4=f(),Rh=o("td"),zh=o("code"),C4=a("@require_torch_up_to_2_gpus"),Rv=f(),Mi=o("p"),j4=a("For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),zv=f(),u(_l.$$.fragment),Gv=f(),xe=o("p"),x4=a("If a test requires "),Gh=o("code"),P4=a("tensorflow"),O4=a(" use the "),Fh=o("code"),T4=a("require_tf"),I4=a(" decorator. For example:"),Fv=f(),u(vl.$$.fragment),Mv=f(),Bi=o("p"),D4=a(`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),Bv=f(),u(yl.$$.fragment),Wv=f(),Pe=o("p"),A4=a("Some decorators like "),Mh=o("code"),S4=a("@parametrized"),q4=a(" rewrite test names, therefore "),Bh=o("code"),L4=a("@require_*"),U4=a(` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),Yv=f(),u(wl.$$.fragment),Vv=f(),xs=o("p"),N4=a("This order problem doesn\u2019t exist with "),Wh=o("code"),H4=a("@pytest.mark.parametrize"),R4=a(`, you can put it first or last and it will still
work. But it only works with non-unittests.`),Xv=f(),Wi=o("p"),z4=a("Inside tests:"),Jv=f(),Yi=o("ul"),Yh=o("li"),G4=a("How many GPUs are available:"),Zv=f(),u($l.$$.fragment),Kv=f(),mt=o("h3"),Ps=o("a"),Vh=o("span"),u(El.$$.fragment),F4=f(),Xh=o("span"),M4=a("Distributed training"),Qv=f(),_t=o("p"),Jh=o("code"),B4=a("pytest"),W4=a(` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Zh=o("code"),Y4=a("pytest"),V4=a(` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),e1=f(),Vi=o("p"),X4=a("Here are some tests that use it:"),t1=f(),Os=o("ul"),Kh=o("li"),gl=o("a"),J4=a("test_trainer_distributed.py"),Z4=f(),Qh=o("li"),bl=o("a"),K4=a("test_deepspeed.py"),s1=f(),Ts=o("p"),Q4=a("To jump right into the execution point, search for the "),ed=o("code"),ek=a("execute_subprocess_async"),tk=a(" call in those tests."),o1=f(),Xi=o("p"),sk=a("You will need at least 2 GPUs to see these tests in action:"),r1=f(),u(kl.$$.fragment),l1=f(),vt=o("h3"),Is=o("a"),td=o("span"),u(Cl.$$.fragment),ok=f(),sd=o("span"),rk=a("Output capture"),a1=f(),Oe=o("p"),lk=a("During test execution any output sent to "),od=o("code"),ak=a("stdout"),ik=a(" and "),rd=o("code"),nk=a("stderr"),pk=a(` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),i1=f(),F=o("p"),fk=a("To disable output capturing and to get the "),ld=o("code"),hk=a("stdout"),dk=a(" and "),ad=o("code"),uk=a("stderr"),ck=a(" normally, use "),id=o("code"),mk=a("-s"),_k=a(" or "),nd=o("code"),vk=a("--capture=no"),yk=a(":"),n1=f(),u(jl.$$.fragment),p1=f(),Ji=o("p"),wk=a("To send test results to JUnit format output:"),f1=f(),u(xl.$$.fragment),h1=f(),yt=o("h3"),Ds=o("a"),pd=o("span"),u(Pl.$$.fragment),$k=f(),fd=o("span"),Ek=a("Color control"),d1=f(),Zi=o("p"),gk=a("To have no color (e.g., yellow on white background is not readable):"),u1=f(),u(Ol.$$.fragment),c1=f(),wt=o("h3"),As=o("a"),hd=o("span"),u(Tl.$$.fragment),bk=f(),dd=o("span"),kk=a("Sending test report to online pastebin service"),m1=f(),Ki=o("p"),Ck=a("Creating a URL for each test failure:"),_1=f(),u(Il.$$.fragment),v1=f(),Qi=o("p"),jk=a(`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),y1=f(),en=o("p"),xk=a("Creating a URL for a whole test session log:"),w1=f(),u(Dl.$$.fragment),$1=f(),$t=o("h2"),Ss=o("a"),ud=o("span"),u(Al.$$.fragment),Pk=f(),cd=o("span"),Ok=a("Writing tests"),E1=f(),Te=o("p"),Tk=a("\u{1F917} transformers tests are based on "),md=o("code"),Ik=a("unittest"),Dk=a(", but run by "),_d=o("code"),Ak=a("pytest"),Sk=a(`, so most of the time features from both systems
can be used.`),g1=f(),se=o("p"),qk=a("You can read "),Sl=o("a"),Lk=a("here"),Uk=a(` which features are supported, but the important
thing to remember is that most `),vd=o("code"),Nk=a("pytest"),Hk=a(` fixtures don\u2019t work. Neither parametrization, but we use the module
`),yd=o("code"),Rk=a("parameterized"),zk=a(" that works in a similar way."),b1=f(),Et=o("h3"),qs=o("a"),wd=o("span"),u(ql.$$.fragment),Gk=f(),$d=o("span"),Fk=a("Parametrization"),k1=f(),tn=o("p"),Mk=a(`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),C1=f(),u(Ll.$$.fragment),j1=f(),Ls=o("p"),Bk=a("Now, by default this test will be run 3 times, each time with the last 3 arguments of "),Ed=o("code"),Wk=a("test_floor"),Yk=a(` being assigned the
corresponding arguments in the parameter list.`),x1=f(),Ie=o("p"),Vk=a("and you could run just the "),gd=o("code"),Xk=a("negative"),Jk=a(" and "),bd=o("code"),Zk=a("integer"),Kk=a(" sets of params with:"),P1=f(),u(Ul.$$.fragment),O1=f(),Us=o("p"),Qk=a("or all but "),kd=o("code"),e0=a("negative"),t0=a(" sub-tests, with:"),T1=f(),u(Nl.$$.fragment),I1=f(),Ns=o("p"),s0=a("Besides using the "),Cd=o("code"),o0=a("-k"),r0=a(` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),D1=f(),u(Hl.$$.fragment),A1=f(),sn=o("p"),l0=a("and it will list:"),S1=f(),u(Rl.$$.fragment),q1=f(),on=o("p"),a0=a("So now you can run just 2 specific sub-tests:"),L1=f(),u(zl.$$.fragment),U1=f(),M=o("p"),i0=a("The module "),Gl=o("a"),n0=a("parameterized"),p0=a(` which is already in the developer dependencies
of `),jd=o("code"),f0=a("transformers"),h0=a(" works for both: "),xd=o("code"),d0=a("unittests"),u0=a(" and "),Pd=o("code"),c0=a("pytest"),m0=a(" tests."),N1=f(),oe=o("p"),_0=a("If, however, the test is not a "),Od=o("code"),v0=a("unittest"),y0=a(", you may use "),Td=o("code"),w0=a("pytest.mark.parametrize"),$0=a(` (or you may see it being used in
some existing tests, mostly under `),Id=o("code"),E0=a("examples"),g0=a(")."),H1=f(),De=o("p"),b0=a("Here is the same example, this time using "),Dd=o("code"),k0=a("pytest"),C0=a("\u2019s "),Ad=o("code"),j0=a("parametrize"),x0=a(" marker:"),R1=f(),u(Fl.$$.fragment),z1=f(),re=o("p"),P0=a("Same as with "),Sd=o("code"),O0=a("parameterized"),T0=a(", with "),qd=o("code"),I0=a("pytest.mark.parametrize"),D0=a(` you can have a fine control over which sub-tests are
run, if the `),Ld=o("code"),A0=a("-k"),S0=a(` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),G1=f(),u(Ml.$$.fragment),F1=f(),rn=o("p"),q0=a("and it will list:"),M1=f(),u(Bl.$$.fragment),B1=f(),ln=o("p"),L0=a("So now you can run just the specific test:"),W1=f(),u(Wl.$$.fragment),Y1=f(),an=o("p"),U0=a("as in the previous example."),V1=f(),gt=o("h3"),Hs=o("a"),Ud=o("span"),u(Yl.$$.fragment),N0=f(),Nd=o("span"),H0=a("Files and directories"),X1=f(),Rs=o("p"),R0=a(`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),Hd=o("code"),z0=a("transformers.test_utils.TestCasePlus"),G0=a(` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),J1=f(),zs=o("ul"),Vl=o("li"),nn=o("p"),Rd=o("code"),F0=a("pathlib"),M0=a(" objects (all fully resolved):"),B0=f(),R=o("ul"),Xl=o("li"),zd=o("code"),W0=a("test_file_path"),Y0=a(" - the current test file path, i.e. "),Gd=o("code"),V0=a("__file__"),X0=f(),pn=o("li"),Fd=o("code"),J0=a("test_file_dir"),Z0=a(" - the directory containing the current test file"),K0=f(),Gs=o("li"),Md=o("code"),Q0=a("tests_dir"),e6=a(" - the directory of the "),Bd=o("code"),t6=a("tests"),s6=a(" test suite"),o6=f(),Fs=o("li"),Wd=o("code"),r6=a("examples_dir"),l6=a(" - the directory of the "),Yd=o("code"),a6=a("examples"),i6=a(" test suite"),n6=f(),fn=o("li"),Vd=o("code"),p6=a("repo_root_dir"),f6=a(" - the directory of the repository"),h6=f(),Ae=o("li"),Xd=o("code"),d6=a("src_dir"),u6=a(" - the directory of "),Jd=o("code"),c6=a("src"),m6=a(" (i.e. where the "),Zd=o("code"),_6=a("transformers"),v6=a(" sub-dir resides)"),y6=f(),Jl=o("li"),Zl=o("p"),w6=a("stringified paths---same as above but these return paths as strings, rather than "),Kd=o("code"),$6=a("pathlib"),E6=a(" objects:"),g6=f(),z=o("ul"),Qd=o("li"),eu=o("code"),b6=a("test_file_path_str"),k6=f(),tu=o("li"),su=o("code"),C6=a("test_file_dir_str"),j6=f(),ou=o("li"),ru=o("code"),x6=a("tests_dir_str"),P6=f(),lu=o("li"),au=o("code"),O6=a("examples_dir_str"),T6=f(),iu=o("li"),nu=o("code"),I6=a("repo_root_dir_str"),D6=f(),pu=o("li"),fu=o("code"),A6=a("src_dir_str"),Z1=f(),Ms=o("p"),S6=a(`To start using those all you need is to make sure that the test resides in a subclass of
`),hu=o("code"),q6=a("transformers.test_utils.TestCasePlus"),L6=a(". For example:"),K1=f(),u(Kl.$$.fragment),Q1=f(),B=o("p"),U6=a("If you don\u2019t need to manipulate paths via "),du=o("code"),N6=a("pathlib"),H6=a(` or you just need a path as a string, you can always invoked
`),uu=o("code"),R6=a("str()"),z6=a(" on the "),cu=o("code"),G6=a("pathlib"),F6=a(" object or use the accessors ending with "),mu=o("code"),M6=a("_str"),B6=a(". For example:"),ey=f(),u(Ql.$$.fragment),ty=f(),bt=o("h3"),Bs=o("a"),_u=o("span"),u(ea.$$.fragment),W6=f(),vu=o("span"),Y6=a("Temporary files and directories"),sy=f(),Ws=o("p"),V6=a(`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),yu=o("code"),X6=a("tempfile"),J6=a(", which address these needs is essential."),oy=f(),hn=o("p"),Z6=a(`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),ry=f(),Se=o("p"),K6=a("A helper class "),wu=o("code"),Q6=a("transformers.test_utils.TestCasePlus"),e7=a(` is best used for such purposes. It\u2019s a sub-class of
`),$u=o("code"),t7=a("unittest.TestCase"),s7=a(", so we can easily inherit from it in the test modules."),ly=f(),dn=o("p"),o7=a("Here is an example of its usage:"),ay=f(),u(ta.$$.fragment),iy=f(),Ys=o("p"),r7=a("This code creates a unique temporary directory, and sets "),Eu=o("code"),l7=a("tmp_dir"),a7=a(" to its location."),ny=f(),un=o("ul"),gu=o("li"),i7=a("Create a unique temporary dir:"),py=f(),u(sa.$$.fragment),fy=f(),oa=o("p"),bu=o("code"),n7=a("tmp_dir"),p7=a(` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),hy=f(),cn=o("ul"),ku=o("li"),f7=a("Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),dy=f(),u(ra.$$.fragment),uy=f(),mn=o("p"),h7=a(`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),cy=f(),_n=o("ul"),la=o("li"),kt=o("p"),d7=a("You can override the default behavior by directly overriding the "),Cu=o("code"),u7=a("before"),c7=a(" and "),ju=o("code"),m7=a("after"),_7=a(` args, leading to one of the
following behaviors:`),v7=f(),ye=o("ul"),vn=o("li"),xu=o("code"),y7=a("before=True"),w7=a(": the temporary dir will always be cleared at the beginning of the test."),$7=f(),yn=o("li"),Pu=o("code"),E7=a("before=False"),g7=a(": if the temporary dir already existed, any existing files will remain there."),b7=f(),wn=o("li"),Ou=o("code"),k7=a("after=True"),C7=a(": the temporary dir will always be deleted at the end of the test."),j7=f(),$n=o("li"),Tu=o("code"),x7=a("after=False"),P7=a(": the temporary dir will always be left intact at the end of the test."),my=f(),u(Vs.$$.fragment),_y=f(),u(Xs.$$.fragment),vy=f(),Ct=o("h3"),Js=o("a"),Iu=o("span"),u(aa.$$.fragment),O7=f(),Du=o("span"),T7=a("Temporary sys.path override"),yy=f(),qe=o("p"),I7=a("If you need to temporary override "),Au=o("code"),D7=a("sys.path"),A7=a(` to import from another test for example, you can use the
`),Su=o("code"),S7=a("ExtendSysPath"),q7=a(" context manager. Example:"),wy=f(),u(ia.$$.fragment),$y=f(),jt=o("h3"),Zs=o("a"),qu=o("span"),u(na.$$.fragment),L7=f(),Lu=o("span"),U7=a("Skipping tests"),Ey=f(),Ks=o("p"),N7=a(`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),Uu=o("code"),H7=a("make test"),R7=a("."),gy=f(),En=o("p"),z7=a("Methods:"),by=f(),Qs=o("ul"),Nu=o("li"),pa=o("p"),G7=a("A "),Hu=o("strong"),F7=a("skip"),M7=a(` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),B7=f(),Ru=o("li"),fa=o("p"),W7=a("A "),zu=o("strong"),Y7=a("xfail"),V7=a(` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),ky=f(),le=o("p"),X7=a("One of the important differences between the two is that "),Gu=o("code"),J7=a("skip"),Z7=a(" doesn\u2019t run the test, and "),Fu=o("code"),K7=a("xfail"),Q7=a(` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),Mu=o("code"),e8=a("xfail"),t8=a("."),Cy=f(),xt=o("h4"),eo=o("a"),Bu=o("span"),u(ha.$$.fragment),s8=f(),Wu=o("span"),o8=a("Implementation"),jy=f(),gn=o("ul"),Yu=o("li"),r8=a("Here is how to skip whole test unconditionally:"),xy=f(),u(da.$$.fragment),Py=f(),bn=o("p"),l8=a("or via pytest:"),Oy=f(),u(ua.$$.fragment),Ty=f(),to=o("p"),a8=a("or the "),Vu=o("code"),i8=a("xfail"),n8=a(" way:"),Iy=f(),u(ca.$$.fragment),Dy=f(),kn=o("ul"),Xu=o("li"),p8=a("Here is how to skip a test based on some internal check inside the test:"),Ay=f(),u(ma.$$.fragment),Sy=f(),Cn=o("p"),f8=a("or the whole module:"),qy=f(),u(_a.$$.fragment),Ly=f(),so=o("p"),h8=a("or the "),Ju=o("code"),d8=a("xfail"),u8=a(" way:"),Uy=f(),u(va.$$.fragment),Ny=f(),jn=o("ul"),Zu=o("li"),c8=a("Here is how to skip all tests in a module if some import is missing:"),Hy=f(),u(ya.$$.fragment),Ry=f(),xn=o("ul"),Ku=o("li"),m8=a("Skip a test based on a condition:"),zy=f(),u(wa.$$.fragment),Gy=f(),Pn=o("p"),_8=a("or:"),Fy=f(),u($a.$$.fragment),My=f(),On=o("p"),v8=a("or skip the whole module:"),By=f(),u(Ea.$$.fragment),Wy=f(),oo=o("p"),y8=a("More details, example and ways are "),ga=o("a"),w8=a("here"),$8=a("."),Yy=f(),Pt=o("h3"),ro=o("a"),Qu=o("span"),u(ba.$$.fragment),E8=f(),ec=o("span"),g8=a("Slow tests"),Vy=f(),Tn=o("p"),b8=a(`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),Xy=f(),u(ka.$$.fragment),Jy=f(),Le=o("p"),k8=a("Once a test is marked as "),tc=o("code"),C8=a("@slow"),j8=a(", to run such tests set "),sc=o("code"),x8=a("RUN_SLOW=1"),P8=a(" env var, e.g.:"),Zy=f(),u(Ca.$$.fragment),Ky=f(),ae=o("p"),O8=a("Some decorators like "),oc=o("code"),T8=a("@parameterized"),I8=a(" rewrite test names, therefore "),rc=o("code"),D8=a("@slow"),A8=a(` and the rest of the skip decorators
`),lc=o("code"),S8=a("@require_*"),q8=a(" have to be listed last for them to work correctly. Here is an example of the correct usage:"),Qy=f(),u(ja.$$.fragment),ew=f(),In=o("p"),L8=a(`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),tw=f(),Dn=o("p"),U8=a("Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),sw=f(),An=o("p"),N8=a(`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),ow=f(),ie=o("ul"),ac=o("li"),H8=a(`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),R8=f(),ic=o("li"),z8=a("All tests that need to do a training not specifically optimized to be fast should be set to slow."),G8=f(),Ot=o("li"),F8=a(`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),nc=o("code"),M8=a("@slow"),B8=a(`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),pc=o("code"),W8=a("@slow"),Y8=a("."),V8=f(),fc=o("li"),X8=a("If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),rw=f(),Ue=o("p"),J8=a(`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),hc=o("code"),Z8=a("@slow"),K8=a(` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),dc=o("em"),Q8=a("tiny"),e9=a(" models with:"),lw=f(),u(xa.$$.fragment),aw=f(),Ne=o("p"),t9=a("Here is a an example of a "),Pa=o("a"),s9=a("script"),o9=a(` that created the tiny model
`),Oa=o("a"),r9=a("stas/tiny-wmt19-en-de"),l9=a(`. You can easily adjust it to your specific
model\u2019s architecture.`),iw=f(),lo=o("p"),a9=a(`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),uc=o("code"),i9=a("pytest --durations=0 tests"),n9=a(")."),nw=f(),Sn=o("p"),p9=a(`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),pw=f(),Tt=o("h3"),ao=o("a"),cc=o("span"),u(Ta.$$.fragment),f9=f(),mc=o("span"),h9=a("Testing the stdout/stderr output"),fw=f(),W=o("p"),d9=a("In order to test functions that write to "),_c=o("code"),u9=a("stdout"),c9=a(" and/or "),vc=o("code"),m9=a("stderr"),_9=a(`, the test can access those streams using the
`),yc=o("code"),v9=a("pytest"),y9=a("\u2019s "),Ia=o("a"),w9=a("capsys system"),$9=a(". Here is how this is accomplished:"),hw=f(),u(Da.$$.fragment),dw=f(),io=o("p"),E9=a("And, of course, most of the time, "),wc=o("code"),g9=a("stderr"),b9=a(` will come as a part of an exception, so try/except has to be used in such
a case:`),uw=f(),u(Aa.$$.fragment),cw=f(),no=o("p"),k9=a("Another approach to capturing stdout is via "),$c=o("code"),C9=a("contextlib.redirect_stdout"),j9=a(":"),mw=f(),u(Sa.$$.fragment),_w=f(),O=o("p"),x9=a("An important potential issue with capturing stdout is that it may contain "),Ec=o("code"),P9=a("\\r"),O9=a(" characters that in normal "),gc=o("code"),T9=a("print"),I9=a(`
reset everything that has been printed so far. There is no problem with `),bc=o("code"),D9=a("pytest"),A9=a(", but with "),kc=o("code"),S9=a("pytest -s"),q9=a(` these
characters get included in the buffer, so to be able to have the test run with and without `),Cc=o("code"),L9=a("-s"),U9=a(`, you have to make an
extra cleanup to the captured output, using `),jc=o("code"),N9=a("re.sub(r'~.*\\r', '', buf, 0, re.M)"),H9=a("."),vw=f(),po=o("p"),R9=a(`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),xc=o("code"),z9=a("\\r"),G9=a("\u2019s in it or not, so it\u2019s a simple:"),yw=f(),u(qa.$$.fragment),ww=f(),qn=o("p"),F9=a("Here is a full test example:"),$w=f(),u(La.$$.fragment),Ew=f(),He=o("p"),M9=a("If you\u2019d like to capture "),Pc=o("code"),B9=a("stderr"),W9=a(" use the "),Oc=o("code"),Y9=a("CaptureStderr"),V9=a(" class instead:"),gw=f(),u(Ua.$$.fragment),bw=f(),fo=o("p"),X9=a("If you need to capture both streams at once, use the parent "),Tc=o("code"),J9=a("CaptureStd"),Z9=a(" class:"),kw=f(),u(Na.$$.fragment),Cw=f(),Ln=o("p"),K9=a(`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),jw=f(),It=o("h3"),ho=o("a"),Ic=o("span"),u(Ha.$$.fragment),Q9=f(),Dc=o("span"),eC=a("Capturing logger stream"),xw=f(),uo=o("p"),tC=a("If you need to validate the output of a logger, you can use "),Ac=o("code"),sC=a("CaptureLogger"),oC=a(":"),Pw=f(),u(Ra.$$.fragment),Ow=f(),Dt=o("h3"),co=o("a"),Sc=o("span"),u(za.$$.fragment),rC=f(),qc=o("span"),lC=a("Testing with environment variables"),Tw=f(),Ga=o("p"),aC=a(`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),Lc=o("code"),iC=a("transformers.testing_utils.mockenv"),Iw=f(),u(Fa.$$.fragment),Dw=f(),ne=o("p"),nC=a("At times an external program needs to be called, which requires setting "),Uc=o("code"),pC=a("PYTHONPATH"),fC=a(" in "),Nc=o("code"),hC=a("os.environ"),dC=a(` to include
multiple local paths. A helper class `),Hc=o("code"),uC=a("transformers.test_utils.TestCasePlus"),cC=a(" comes to help:"),Aw=f(),u(Ma.$$.fragment),Sw=f(),L=o("p"),mC=a("Depending on whether the test file was under the "),Rc=o("code"),_C=a("tests"),vC=a(" test suite or "),zc=o("code"),yC=a("examples"),wC=a(` it\u2019ll correctly set up
`),Gc=o("code"),$C=a("env[PYTHONPATH]"),EC=a(" to include one of these two directories, and also the "),Fc=o("code"),gC=a("src"),bC=a(` directory to ensure the testing is
done against the current repo, and finally with whatever `),Mc=o("code"),kC=a("env[PYTHONPATH]"),CC=a(` was already set to before the test was
called if anything.`),qw=f(),mo=o("p"),jC=a("This helper method creates a copy of the "),Bc=o("code"),xC=a("os.environ"),PC=a(" object, so the original remains intact."),Lw=f(),At=o("h3"),_o=o("a"),Wc=o("span"),u(Ba.$$.fragment),OC=f(),Yc=o("span"),TC=a("Getting reproducible results"),Uw=f(),Un=o("p"),IC=a(`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),Nw=f(),u(Wa.$$.fragment),Hw=f(),St=o("h3"),vo=o("a"),Vc=o("span"),u(Ya.$$.fragment),DC=f(),Xc=o("span"),AC=a("Debugging tests"),Rw=f(),Nn=o("p"),SC=a("To start a debugger at the point of the warning, do this:"),zw=f(),u(Va.$$.fragment),Gw=f(),qt=o("h2"),yo=o("a"),Jc=o("span"),u(Xa.$$.fragment),qC=f(),Zc=o("span"),LC=a("Working with github actions workflows"),Fw=f(),Hn=o("p"),UC=a("To trigger a self-push workflow CI job, you must:"),Mw=f(),pe=o("ol"),Ja=o("li"),NC=a("Create a new branch on "),Kc=o("code"),HC=a("transformers"),RC=a(" origin (not a fork!)."),zC=f(),U=o("li"),GC=a("The branch name has to start with either "),Qc=o("code"),FC=a("ci_"),MC=a(" or "),em=o("code"),BC=a("ci-"),WC=a(" ("),tm=o("code"),YC=a("master"),VC=a(` triggers it too, but we can\u2019t do PRs on
`),sm=o("code"),XC=a("master"),JC=a(`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Za=o("a"),ZC=a("here"),KC=a(" under "),om=o("em"),QC=a("push:"),ej=f(),rm=o("li"),tj=a("Create a PR from this branch."),sj=f(),Ka=o("li"),oj=a("Then you can see the job appear "),Qa=o("a"),rj=a("here"),lj=a(`. It may not run right away if there
is a backlog.`),Bw=f(),Lt=o("h2"),wo=o("a"),lm=o("span"),u(ei.$$.fragment),aj=f(),am=o("span"),ij=a("Testing Experimental CI Features"),Ww=f(),Rn=o("p"),nj=a(`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),Yw=f(),fe=o("ol"),im=o("li"),pj=a("Create a new dedicated job that tests what needs to be tested"),fj=f(),nm=o("li"),hj=a("The new job must always succeed so that it gives us a green \u2713 (details below)."),dj=f(),pm=o("li"),uj=a(`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),cj=f(),fm=o("li"),mj=a("When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),Vw=f(),zn=o("p"),_j=a("That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),Xw=f(),Gn=o("p"),vj=a("Now how can we make the job always succeed while the new CI feature is being developed?"),Jw=f(),Fn=o("p"),yj=a(`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),Zw=f(),Mn=o("p"),wj=a("So the following workaround can be used:"),Kw=f(),$o=o("ol"),Bn=o("li"),hm=o("code"),$j=a("set +euo pipefail"),Ej=a(" at the beginning of the run command to suppress most potential failures in the bash script."),gj=f(),Ut=o("li"),bj=a("the last command must be a success: "),dm=o("code"),kj=a('echo "done"'),Cj=a(" or just "),um=o("code"),jj=a("true"),xj=a(" will do"),Qw=f(),Wn=o("p"),Pj=a("Here is an example:"),e$=f(),u(ti.$$.fragment),t$=f(),Yn=o("p"),Oj=a("For simple commands you could also do:"),s$=f(),u(si.$$.fragment),o$=f(),Eo=o("p"),Tj=a(`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),cm=o("code"),Ij=a("set +euo pipefail"),Dj=a(` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),r$=f(),go=o("p"),Aj=a("This whole process would have been much easier if we only could set something like "),mm=o("code"),Sj=a("allow-failure"),qj=a(` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),l$=f(),Vn=o("p"),Lj=a("You can vote for this feature and see where it is at at these CI-specific threads:"),a$=f(),bo=o("ul"),_m=o("li"),oi=o("a"),Uj=a("Github Actions:"),Nj=f(),vm=o("li"),ri=o("a"),Hj=a("CircleCI:"),this.h()},l(e){const n=Xq('[data-svelte="svelte-1phssyn"]',document.head);$=r(n,"META",{name:!0,content:!0}),n.forEach(s),j=h(e),g=r(e,"H1",{class:!0});var li=l(g);b=r(li,"A",{id:!0,class:!0,href:!0});var ym=l(b);T=r(ym,"SPAN",{});var wm=l(T);c(C.$$.fragment,wm),wm.forEach(s),ym.forEach(s),N=h(li),I=r(li,"SPAN",{});var $m=l(I);x=i($m,"Testing"),$m.forEach(s),li.forEach(s),k=h(e),A=r(e,"P",{});var nx=l(A);H=i(nx,"Let\u2019s take a look at how \u{1F917} Transformer models are tested and how you can write new tests and improve the existing ones."),nx.forEach(s),Nt=h(e),we=r(e,"P",{});var px=l(we);We=i(px,"There are 2 test suites in the repository:"),px.forEach(s),D=h(e),_e=r(e,"OL",{});var n$=l(_e);Ye=r(n$,"LI",{});var Rj=l(Ye);Ht=r(Rj,"CODE",{});var fx=l(Ht);pi=i(fx,"tests"),fx.forEach(s),sg=i(Rj," \u2014 tests for the general API"),Rj.forEach(s),og=h(n$),fi=r(n$,"LI",{});var zj=l(fi);vp=r(zj,"CODE",{});var hx=l(vp);rg=i(hx,"examples"),hx.forEach(s),lg=i(zj," \u2014 tests primarily for various applications that aren\u2019t part of the API"),zj.forEach(s),n$.forEach(s),Tm=h(e),Ve=r(e,"H2",{class:!0});var p$=l(Ve);Rt=r(p$,"A",{id:!0,class:!0,href:!0});var dx=l(Rt);yp=r(dx,"SPAN",{});var ux=l(yp);c(No.$$.fragment,ux),ux.forEach(s),dx.forEach(s),ag=h(p$),wp=r(p$,"SPAN",{});var cx=l(wp);ig=i(cx,"How transformers are tested"),cx.forEach(s),p$.forEach(s),Im=h(e),zt=r(e,"OL",{});var f$=l(zt);Ho=r(f$,"LI",{});var h$=l(Ho);Ro=r(h$,"P",{});var d$=l(Ro);ng=i(d$,`Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit to that PR gets retested. These jobs
are defined in this `),zo=r(d$,"A",{href:!0,rel:!0});var mx=l(zo);pg=i(mx,"config file"),mx.forEach(s),fg=i(d$,`, so that if needed you can reproduce the same
environment on your machine.`),d$.forEach(s),hg=h(h$),Go=r(h$,"P",{});var u$=l(Go);dg=i(u$,"These CI jobs don\u2019t run "),$p=r(u$,"CODE",{});var _x=l($p);ug=i(_x,"@slow"),_x.forEach(s),cg=i(u$," tests."),u$.forEach(s),h$.forEach(s),mg=h(f$),Fo=r(f$,"LI",{});var c$=l(Fo);Mo=r(c$,"P",{});var m$=l(Mo);_g=i(m$,"There are 3 jobs run by "),Bo=r(m$,"A",{href:!0,rel:!0});var vx=l(Bo);vg=i(vx,"github actions"),vx.forEach(s),yg=i(m$,":"),m$.forEach(s),wg=h(c$),Xe=r(c$,"UL",{});var Xn=l(Xe);Ep=r(Xn,"LI",{});var yx=l(Ep);hi=r(yx,"P",{});var Gj=l(hi);Wo=r(Gj,"A",{href:!0,rel:!0});var wx=l(Wo);$g=i(wx,"torch hub integration"),wx.forEach(s),Eg=i(Gj,`: checks whether torch hub
integration works.`),Gj.forEach(s),yx.forEach(s),gg=h(Xn),gp=r(Xn,"LI",{});var $x=l(gp);S=r($x,"P",{});var J=l(S);Yo=r(J,"A",{href:!0,rel:!0});var Ex=l(Yo);bg=i(Ex,"self-hosted (push)"),Ex.forEach(s),kg=i(J,`: runs fast tests on GPU only on commits on
`),bp=r(J,"CODE",{});var gx=l(bp);Cg=i(gx,"master"),gx.forEach(s),jg=i(J,". It only runs if a commit on "),kp=r(J,"CODE",{});var bx=l(kp);xg=i(bx,"master"),bx.forEach(s),Pg=i(J," has updated the code in one of the following folders: "),Cp=r(J,"CODE",{});var kx=l(Cp);Og=i(kx,"src"),kx.forEach(s),Tg=i(J,`,
`),jp=r(J,"CODE",{});var Cx=l(jp);Ig=i(Cx,"tests"),Cx.forEach(s),Dg=i(J,", "),xp=r(J,"CODE",{});var jx=l(xp);Ag=i(jx,".github"),jx.forEach(s),Sg=i(J," (to prevent running on added model cards, notebooks, etc.)"),J.forEach(s),$x.forEach(s),qg=h(Xn),Pp=r(Xn,"LI",{});var xx=l(Pp);$e=r(xx,"P",{});var ai=l($e);Vo=r(ai,"A",{href:!0,rel:!0});var Px=l(Vo);Lg=i(Px,"self-hosted runner"),Px.forEach(s),Ug=i(ai,`: runs normal and slow tests on GPU in
`),Op=r(ai,"CODE",{});var Ox=l(Op);Ng=i(Ox,"tests"),Ox.forEach(s),Hg=i(ai," and "),Tp=r(ai,"CODE",{});var Tx=l(Tp);Rg=i(Tx,"examples"),Tx.forEach(s),zg=i(ai,":"),ai.forEach(s),xx.forEach(s),Xn.forEach(s),c$.forEach(s),f$.forEach(s),Dm=h(e),c(Xo.$$.fragment,e),Am=h(e),Gt=r(e,"P",{});var _$=l(Gt);Gg=i(_$,"The results can be observed "),Jo=r(_$,"A",{href:!0,rel:!0});var Ix=l(Jo);Fg=i(Ix,"here"),Ix.forEach(s),Mg=i(_$,"."),_$.forEach(s),Sm=h(e),Je=r(e,"H2",{class:!0});var v$=l(Je);Ft=r(v$,"A",{id:!0,class:!0,href:!0});var Dx=l(Ft);Ip=r(Dx,"SPAN",{});var Ax=l(Ip);c(Zo.$$.fragment,Ax),Ax.forEach(s),Dx.forEach(s),Bg=h(v$),Dp=r(v$,"SPAN",{});var Sx=l(Dp);Wg=i(Sx,"Running tests"),Sx.forEach(s),v$.forEach(s),qm=h(e),Ze=r(e,"H3",{class:!0});var y$=l(Ze);Mt=r(y$,"A",{id:!0,class:!0,href:!0});var qx=l(Mt);Ap=r(qx,"SPAN",{});var Lx=l(Ap);c(Ko.$$.fragment,Lx),Lx.forEach(s),qx.forEach(s),Yg=h(y$),Sp=r(y$,"SPAN",{});var Ux=l(Sp);Vg=i(Ux,"Choosing which tests to run"),Ux.forEach(s),y$.forEach(s),Lm=h(e),Bt=r(e,"P",{});var w$=l(Bt);Xg=i(w$,`This document goes into many details of how tests can be run. If after reading everything, you need even more details
you will find them `),Qo=r(w$,"A",{href:!0,rel:!0});var Nx=l(Qo);Jg=i(Nx,"here"),Nx.forEach(s),Zg=i(w$,"."),w$.forEach(s),Um=h(e),di=r(e,"P",{});var Hx=l(di);Kg=i(Hx,"Here are some most useful ways of running tests."),Hx.forEach(s),Nm=h(e),ui=r(e,"P",{});var Rx=l(ui);Qg=i(Rx,"Run all:"),Rx.forEach(s),Hm=h(e),c(er.$$.fragment,e),Rm=h(e),ci=r(e,"P",{});var zx=l(ci);eb=i(zx,"or:"),zx.forEach(s),zm=h(e),c(tr.$$.fragment,e),Gm=h(e),mi=r(e,"P",{});var Gx=l(mi);tb=i(Gx,"Note that the latter is defined as:"),Gx.forEach(s),Fm=h(e),c(sr.$$.fragment,e),Mm=h(e),_i=r(e,"P",{});var Fx=l(_i);sb=i(Fx,"which tells pytest to:"),Fx.forEach(s),Bm=h(e),K=r(e,"UL",{});var ko=l(K);qp=r(ko,"LI",{});var Mx=l(qp);ob=i(Mx,"run as many test processes as they are CPU cores (which could be too many if you don\u2019t have a ton of RAM!)"),Mx.forEach(s),rb=h(ko),Lp=r(ko,"LI",{});var Bx=l(Lp);lb=i(Bx,"ensure that all tests from the same file will be run by the same test process"),Bx.forEach(s),ab=h(ko),Up=r(ko,"LI",{});var Wx=l(Up);ib=i(Wx,"do not capture output"),Wx.forEach(s),nb=h(ko),Np=r(ko,"LI",{});var Yx=l(Np);pb=i(Yx,"run in verbose mode"),Yx.forEach(s),ko.forEach(s),Wm=h(e),Ke=r(e,"H3",{class:!0});var $$=l(Ke);Wt=r($$,"A",{id:!0,class:!0,href:!0});var Vx=l(Wt);Hp=r(Vx,"SPAN",{});var Xx=l(Hp);c(or.$$.fragment,Xx),Xx.forEach(s),Vx.forEach(s),fb=h($$),Rp=r($$,"SPAN",{});var Jx=l(Rp);hb=i(Jx,"Getting the list of all tests"),Jx.forEach(s),$$.forEach(s),Ym=h(e),vi=r(e,"P",{});var Zx=l(vi);db=i(Zx,"All tests of the test suite:"),Zx.forEach(s),Vm=h(e),c(rr.$$.fragment,e),Xm=h(e),yi=r(e,"P",{});var Kx=l(yi);ub=i(Kx,"All tests of a given test file:"),Kx.forEach(s),Jm=h(e),c(lr.$$.fragment,e),Zm=h(e),Qe=r(e,"H3",{class:!0});var E$=l(Qe);Yt=r(E$,"A",{id:!0,class:!0,href:!0});var Qx=l(Yt);zp=r(Qx,"SPAN",{});var eP=l(zp);c(ar.$$.fragment,eP),eP.forEach(s),Qx.forEach(s),cb=h(E$),Gp=r(E$,"SPAN",{});var tP=l(Gp);mb=i(tP,"Run a specific test module"),tP.forEach(s),E$.forEach(s),Km=h(e),wi=r(e,"P",{});var sP=l(wi);_b=i(sP,"To run an individual test module:"),sP.forEach(s),Qm=h(e),c(ir.$$.fragment,e),e_=h(e),et=r(e,"H3",{class:!0});var g$=l(et);Vt=r(g$,"A",{id:!0,class:!0,href:!0});var oP=l(Vt);Fp=r(oP,"SPAN",{});var rP=l(Fp);c(nr.$$.fragment,rP),rP.forEach(s),oP.forEach(s),vb=h(g$),Mp=r(g$,"SPAN",{});var lP=l(Mp);yb=i(lP,"Run specific tests"),lP.forEach(s),g$.forEach(s),t_=h(e),$i=r(e,"P",{});var aP=l($i);wb=i(aP,`Since unittest is used inside most of the tests, to run specific subtests you need to know the name of the unittest
class containing those tests. For example, it could be:`),aP.forEach(s),s_=h(e),c(pr.$$.fragment,e),o_=h(e),Ei=r(e,"P",{});var iP=l(Ei);$b=i(iP,"Here:"),iP.forEach(s),r_=h(e),Ee=r(e,"UL",{});var Jn=l(Ee);gi=r(Jn,"LI",{});var Fj=l(gi);Bp=r(Fj,"CODE",{});var nP=l(Bp);Eb=i(nP,"tests/test_optimization.py"),nP.forEach(s),gb=i(Fj," - the file with tests"),Fj.forEach(s),bb=h(Jn),bi=r(Jn,"LI",{});var Mj=l(bi);Wp=r(Mj,"CODE",{});var pP=l(Wp);kb=i(pP,"OptimizationTest"),pP.forEach(s),Cb=i(Mj," - the name of the class"),Mj.forEach(s),jb=h(Jn),ki=r(Jn,"LI",{});var Bj=l(ki);Yp=r(Bj,"CODE",{});var fP=l(Yp);xb=i(fP,"test_adam_w"),fP.forEach(s),Pb=i(Bj," - the name of the specific test function"),Bj.forEach(s),Jn.forEach(s),l_=h(e),Ci=r(e,"P",{});var hP=l(Ci);Ob=i(hP,"If the file contains multiple classes, you can choose to run only tests of a given class. For example:"),hP.forEach(s),a_=h(e),c(fr.$$.fragment,e),i_=h(e),ji=r(e,"P",{});var dP=l(ji);Tb=i(dP,"will run all the tests inside that class."),dP.forEach(s),n_=h(e),Xt=r(e,"P",{});var b$=l(Xt);Ib=i(b$,"As mentioned earlier you can see what tests are contained inside the "),Vp=r(b$,"CODE",{});var uP=l(Vp);Db=i(uP,"OptimizationTest"),uP.forEach(s),Ab=i(b$," class by running:"),b$.forEach(s),p_=h(e),c(hr.$$.fragment,e),f_=h(e),xi=r(e,"P",{});var cP=l(xi);Sb=i(cP,"You can run tests by keyword expressions."),cP.forEach(s),h_=h(e),Jt=r(e,"P",{});var k$=l(Jt);qb=i(k$,"To run only tests whose name contains "),Xp=r(k$,"CODE",{});var mP=l(Xp);Lb=i(mP,"adam"),mP.forEach(s),Ub=i(k$,":"),k$.forEach(s),d_=h(e),c(dr.$$.fragment,e),u_=h(e),Q=r(e,"P",{});var Co=l(Q);Nb=i(Co,"Logical "),Jp=r(Co,"CODE",{});var _P=l(Jp);Hb=i(_P,"and"),_P.forEach(s),Rb=i(Co," and "),Zp=r(Co,"CODE",{});var vP=l(Zp);zb=i(vP,"or"),vP.forEach(s),Gb=i(Co," can be used to indicate whether all keywords should match or either. "),Kp=r(Co,"CODE",{});var yP=l(Kp);Fb=i(yP,"not"),yP.forEach(s),Mb=i(Co,` can be used to
negate.`),Co.forEach(s),c_=h(e),Zt=r(e,"P",{});var C$=l(Zt);Bb=i(C$,"To run all tests except those whose name contains "),Qp=r(C$,"CODE",{});var wP=l(Qp);Wb=i(wP,"adam"),wP.forEach(s),Yb=i(C$,":"),C$.forEach(s),m_=h(e),c(ur.$$.fragment,e),__=h(e),Pi=r(e,"P",{});var $P=l(Pi);Vb=i($P,"And you can combine the two patterns in one:"),$P.forEach(s),v_=h(e),c(cr.$$.fragment,e),y_=h(e),ge=r(e,"P",{});var Zn=l(ge);Xb=i(Zn,"For example to run both "),ef=r(Zn,"CODE",{});var EP=l(ef);Jb=i(EP,"test_adafactor"),EP.forEach(s),Zb=i(Zn," and "),tf=r(Zn,"CODE",{});var gP=l(tf);Kb=i(gP,"test_adam_w"),gP.forEach(s),Qb=i(Zn," you can use:"),Zn.forEach(s),w_=h(e),c(mr.$$.fragment,e),$_=h(e),Kt=r(e,"P",{});var j$=l(Kt);e3=i(j$,"Note that we use "),sf=r(j$,"CODE",{});var bP=l(sf);t3=i(bP,"or"),bP.forEach(s),s3=i(j$," here, since we want either of the keywords to match to include both."),j$.forEach(s),E_=h(e),Qt=r(e,"P",{});var x$=l(Qt);o3=i(x$,"If you want to include only tests that include both patterns, "),of=r(x$,"CODE",{});var kP=l(of);r3=i(kP,"and"),kP.forEach(s),l3=i(x$," is to be used:"),x$.forEach(s),g_=h(e),c(_r.$$.fragment,e),b_=h(e),tt=r(e,"H3",{class:!0});var P$=l(tt);es=r(P$,"A",{id:!0,class:!0,href:!0});var CP=l(es);rf=r(CP,"SPAN",{});var jP=l(rf);c(vr.$$.fragment,jP),jP.forEach(s),CP.forEach(s),a3=h(P$),lf=r(P$,"SPAN",{});var xP=l(lf);i3=i(xP,"Run only modified tests"),xP.forEach(s),P$.forEach(s),k_=h(e),ts=r(e,"P",{});var O$=l(ts);n3=i(O$,"You can run the tests related to the unstaged files or the current branch (according to Git) by using "),yr=r(O$,"A",{href:!0,rel:!0});var PP=l(yr);p3=i(PP,"pytest-picked"),PP.forEach(s),f3=i(O$,`. This is a great way of quickly testing your changes didn\u2019t break
anything, since it won\u2019t run the tests related to files you didn\u2019t touch.`),O$.forEach(s),C_=h(e),c(wr.$$.fragment,e),j_=h(e),c($r.$$.fragment,e),x_=h(e),Oi=r(e,"P",{});var OP=l(Oi);h3=i(OP,"All tests will be run from files and folders which are modified, but not yet committed."),OP.forEach(s),P_=h(e),st=r(e,"H3",{class:!0});var T$=l(st);ss=r(T$,"A",{id:!0,class:!0,href:!0});var TP=l(ss);af=r(TP,"SPAN",{});var IP=l(af);c(Er.$$.fragment,IP),IP.forEach(s),TP.forEach(s),d3=h(T$),nf=r(T$,"SPAN",{});var DP=l(nf);u3=i(DP,"Automatically rerun failed tests on source modification"),DP.forEach(s),T$.forEach(s),O_=h(e),gr=r(e,"P",{});var Wj=l(gr);br=r(Wj,"A",{href:!0,rel:!0});var AP=l(br);c3=i(AP,"pytest-xdist"),AP.forEach(s),m3=i(Wj,` provides a very useful feature of detecting all failed
tests, and then waiting for you to modify files and continuously re-rerun those failing tests until they pass while you
fix them. So that you don\u2019t need to re start pytest after you made the fix. This is repeated until all tests pass after
which again a full run is performed.`),Wj.forEach(s),T_=h(e),c(kr.$$.fragment,e),I_=h(e),ot=r(e,"P",{});var Em=l(ot);_3=i(Em,"To enter the mode: "),pf=r(Em,"CODE",{});var SP=l(pf);v3=i(SP,"pytest -f"),SP.forEach(s),y3=i(Em," or "),ff=r(Em,"CODE",{});var qP=l(ff);w3=i(qP,"pytest --looponfail"),qP.forEach(s),Em.forEach(s),D_=h(e),be=r(e,"P",{});var Kn=l(be);$3=i(Kn,"File changes are detected by looking at "),hf=r(Kn,"CODE",{});var LP=l(hf);E3=i(LP,"looponfailroots"),LP.forEach(s),g3=i(Kn,` root directories and all of their contents (recursively).
If the default for this value does not work for you, you can change it in your project by setting a configuration
option in `),df=r(Kn,"CODE",{});var UP=l(df);b3=i(UP,"setup.cfg"),UP.forEach(s),k3=i(Kn,":"),Kn.forEach(s),A_=h(e),c(Cr.$$.fragment,e),S_=h(e),ke=r(e,"P",{});var Qn=l(ke);C3=i(Qn,"or "),uf=r(Qn,"CODE",{});var NP=l(uf);j3=i(NP,"pytest.ini"),NP.forEach(s),x3=i(Qn,"/"),cf=r(Qn,"CODE",{});var HP=l(cf);P3=i(HP,"tox.ini"),HP.forEach(s),O3=i(Qn," files:"),Qn.forEach(s),q_=h(e),c(jr.$$.fragment,e),L_=h(e),Ti=r(e,"P",{});var RP=l(Ti);T3=i(RP,`This would lead to only looking for file changes in the respective directories, specified relatively to the ini-file\u2019s
directory.`),RP.forEach(s),U_=h(e),xr=r(e,"P",{});var Yj=l(xr);Pr=r(Yj,"A",{href:!0,rel:!0});var zP=l(Pr);I3=i(zP,"pytest-watch"),zP.forEach(s),D3=i(Yj," is an alternative implementation of this functionality."),Yj.forEach(s),N_=h(e),rt=r(e,"H3",{class:!0});var I$=l(rt);os=r(I$,"A",{id:!0,class:!0,href:!0});var GP=l(os);mf=r(GP,"SPAN",{});var FP=l(mf);c(Or.$$.fragment,FP),FP.forEach(s),GP.forEach(s),A3=h(I$),_f=r(I$,"SPAN",{});var MP=l(_f);S3=i(MP,"Skip a test module"),MP.forEach(s),I$.forEach(s),H_=h(e),rs=r(e,"P",{});var D$=l(rs);q3=i(D$,`If you want to run all test modules, except a few you can exclude them by giving an explicit list of tests to run. For
example, to run all except `),vf=r(D$,"CODE",{});var BP=l(vf);L3=i(BP,"test_modeling_*.py"),BP.forEach(s),U3=i(D$," tests:"),D$.forEach(s),R_=h(e),c(Tr.$$.fragment,e),z_=h(e),lt=r(e,"H3",{class:!0});var A$=l(lt);ls=r(A$,"A",{id:!0,class:!0,href:!0});var WP=l(ls);yf=r(WP,"SPAN",{});var YP=l(yf);c(Ir.$$.fragment,YP),YP.forEach(s),WP.forEach(s),N3=h(A$),wf=r(A$,"SPAN",{});var VP=l(wf);H3=i(VP,"Clearing state"),VP.forEach(s),A$.forEach(s),G_=h(e),Ii=r(e,"P",{});var XP=l(Ii);R3=i(XP,"CI builds and when isolation is important (against speed), cache should be cleared:"),XP.forEach(s),F_=h(e),c(Dr.$$.fragment,e),M_=h(e),at=r(e,"H3",{class:!0});var S$=l(at);as=r(S$,"A",{id:!0,class:!0,href:!0});var JP=l(as);$f=r(JP,"SPAN",{});var ZP=l($f);c(Ar.$$.fragment,ZP),ZP.forEach(s),JP.forEach(s),z3=h(S$),Ef=r(S$,"SPAN",{});var KP=l(Ef);G3=i(KP,"Running tests in parallel"),KP.forEach(s),S$.forEach(s),B_=h(e),G=r(e,"P",{});var Re=l(G);F3=i(Re,"As mentioned earlier "),gf=r(Re,"CODE",{});var QP=l(gf);M3=i(QP,"make test"),QP.forEach(s),B3=i(Re," runs tests in parallel via "),bf=r(Re,"CODE",{});var eO=l(bf);W3=i(eO,"pytest-xdist"),eO.forEach(s),Y3=i(Re," plugin ("),kf=r(Re,"CODE",{});var tO=l(kf);V3=i(tO,"-n X"),tO.forEach(s),X3=i(Re," argument, e.g. "),Cf=r(Re,"CODE",{});var sO=l(Cf);J3=i(sO,"-n 2"),sO.forEach(s),Z3=i(Re,`
to run 2 parallel jobs).`),Re.forEach(s),W_=h(e),ve=r(e,"P",{});var ii=l(ve);jf=r(ii,"CODE",{});var oO=l(jf);K3=i(oO,"pytest-xdist"),oO.forEach(s),Q3=i(ii,"\u2019s "),xf=r(ii,"CODE",{});var rO=l(xf);e2=i(rO,"--dist="),rO.forEach(s),t2=i(ii," option allows one to control how the tests are grouped. "),Pf=r(ii,"CODE",{});var lO=l(Pf);s2=i(lO,"--dist=loadfile"),lO.forEach(s),o2=i(ii,` puts the
tests located in one file onto the same process.`),ii.forEach(s),Y_=h(e),Ce=r(e,"P",{});var ep=l(Ce);r2=i(ep,"Since the order of executed tests is different and unpredictable, if running the test suite with "),Of=r(ep,"CODE",{});var aO=l(Of);l2=i(aO,"pytest-xdist"),aO.forEach(s),a2=i(ep,`
produces failures (meaning we have some undetected coupled tests), use `),Sr=r(ep,"A",{href:!0,rel:!0});var iO=l(Sr);i2=i(iO,"pytest-replay"),iO.forEach(s),n2=i(ep,` to replay the tests in the same order, which should help with then somehow
reducing that failing sequence to a minimum.`),ep.forEach(s),V_=h(e),it=r(e,"H3",{class:!0});var q$=l(it);is=r(q$,"A",{id:!0,class:!0,href:!0});var nO=l(is);Tf=r(nO,"SPAN",{});var pO=l(Tf);c(qr.$$.fragment,pO),pO.forEach(s),nO.forEach(s),p2=h(q$),If=r(q$,"SPAN",{});var fO=l(If);f2=i(fO,"Test order and repetition"),fO.forEach(s),q$.forEach(s),X_=h(e),Di=r(e,"P",{});var hO=l(Di);h2=i(hO,`It\u2019s good to repeat the tests several times, in sequence, randomly, or in sets, to detect any potential
inter-dependency and state-related bugs (tear down). And the straightforward multiple repetition is just good to detect
some problems that get uncovered by randomness of DL.`),hO.forEach(s),J_=h(e),nt=r(e,"H4",{class:!0});var L$=l(nt);ns=r(L$,"A",{id:!0,class:!0,href:!0});var dO=l(ns);Df=r(dO,"SPAN",{});var uO=l(Df);c(Lr.$$.fragment,uO),uO.forEach(s),dO.forEach(s),d2=h(L$),Af=r(L$,"SPAN",{});var cO=l(Af);u2=i(cO,"Repeat tests"),cO.forEach(s),L$.forEach(s),Z_=h(e),Ai=r(e,"UL",{});var mO=l(Ai);Si=r(mO,"LI",{});var Vj=l(Si);Ur=r(Vj,"A",{href:!0,rel:!0});var _O=l(Ur);c2=i(_O,"pytest-flakefinder"),_O.forEach(s),m2=i(Vj,":"),Vj.forEach(s),mO.forEach(s),K_=h(e),c(Nr.$$.fragment,e),Q_=h(e),qi=r(e,"P",{});var vO=l(qi);_2=i(vO,"And then run every test multiple times (50 by default):"),vO.forEach(s),ev=h(e),c(Hr.$$.fragment,e),tv=h(e),c(ps.$$.fragment,e),sv=h(e),c(fs.$$.fragment,e),ov=h(e),pt=r(e,"H4",{class:!0});var U$=l(pt);hs=r(U$,"A",{id:!0,class:!0,href:!0});var yO=l(hs);Sf=r(yO,"SPAN",{});var wO=l(Sf);c(Rr.$$.fragment,wO),wO.forEach(s),yO.forEach(s),v2=h(U$),qf=r(U$,"SPAN",{});var $O=l(qf);y2=i($O,"Run tests in a random order"),$O.forEach(s),U$.forEach(s),rv=h(e),c(zr.$$.fragment,e),lv=h(e),ds=r(e,"P",{});var N$=l(ds);w2=i(N$,"Important: the presence of "),Lf=r(N$,"CODE",{});var EO=l(Lf);$2=i(EO,"pytest-random-order"),EO.forEach(s),E2=i(N$,` will automatically randomize tests, no configuration change or
command line options is required.`),N$.forEach(s),av=h(e),us=r(e,"P",{});var H$=l(us);g2=i(H$,`As explained earlier this allows detection of coupled tests - where one test\u2019s state affects the state of another. When
`),Uf=r(H$,"CODE",{});var gO=l(Uf);b2=i(gO,"pytest-random-order"),gO.forEach(s),k2=i(H$," is installed it will print the random seed it used for that session, e.g:"),H$.forEach(s),iv=h(e),c(Gr.$$.fragment,e),nv=h(e),Li=r(e,"P",{});var bO=l(Li);C2=i(bO,"So that if the given particular sequence fails, you can reproduce it by adding that exact seed, e.g.:"),bO.forEach(s),pv=h(e),c(Fr.$$.fragment,e),fv=h(e),cs=r(e,"P",{});var R$=l(cs);j2=i(R$,`It will only reproduce the exact order if you use the exact same list of tests (or no list at all). Once you start to
manually narrowing down the list you can no longer rely on the seed, but have to list them manually in the exact order
they failed and tell pytest to not randomize them instead using `),Nf=r(R$,"CODE",{});var kO=l(Nf);x2=i(kO,"--random-order-bucket=none"),kO.forEach(s),P2=i(R$,", e.g.:"),R$.forEach(s),hv=h(e),c(Mr.$$.fragment,e),dv=h(e),Ui=r(e,"P",{});var CO=l(Ui);O2=i(CO,"To disable the shuffling for all tests:"),CO.forEach(s),uv=h(e),c(Br.$$.fragment,e),cv=h(e),P=r(e,"P",{});var Y=l(P);T2=i(Y,"By default "),Hf=r(Y,"CODE",{});var jO=l(Hf);I2=i(jO,"--random-order-bucket=module"),jO.forEach(s),D2=i(Y,` is implied, which will shuffle the files on the module levels. It can also
shuffle on `),Rf=r(Y,"CODE",{});var xO=l(Rf);A2=i(xO,"class"),xO.forEach(s),S2=i(Y,", "),zf=r(Y,"CODE",{});var PO=l(zf);q2=i(PO,"package"),PO.forEach(s),L2=i(Y,", "),Gf=r(Y,"CODE",{});var OO=l(Gf);U2=i(OO,"global"),OO.forEach(s),N2=i(Y," and "),Ff=r(Y,"CODE",{});var TO=l(Ff);H2=i(TO,"none"),TO.forEach(s),R2=i(Y,` levels. For the complete details please see its
`),Wr=r(Y,"A",{href:!0,rel:!0});var IO=l(Wr);z2=i(IO,"documentation"),IO.forEach(s),G2=i(Y,"."),Y.forEach(s),mv=h(e),ee=r(e,"P",{});var jo=l(ee);F2=i(jo,"Another randomization alternative is: "),Mf=r(jo,"CODE",{});var DO=l(Mf);M2=i(DO,"pytest-randomly"),DO.forEach(s),B2=i(jo," <"),Yr=r(jo,"A",{href:!0,rel:!0});var AO=l(Yr);W2=i(AO,"https://github.com/pytest-dev/pytest-randomly>`"),AO.forEach(s),Y2=i(jo,`__. This
module has a very similar functionality/interface, but it doesn\u2019t have the bucket modes available in
`),Bf=r(jo,"CODE",{});var SO=l(Bf);V2=i(SO,"pytest-random-order"),SO.forEach(s),X2=i(jo,". It has the same problem of imposing itself once installed."),jo.forEach(s),_v=h(e),ft=r(e,"H3",{class:!0});var z$=l(ft);ms=r(z$,"A",{id:!0,class:!0,href:!0});var qO=l(ms);Wf=r(qO,"SPAN",{});var LO=l(Wf);c(Vr.$$.fragment,LO),LO.forEach(s),qO.forEach(s),J2=h(z$),Yf=r(z$,"SPAN",{});var UO=l(Yf);Z2=i(UO,"Look and feel variations"),UO.forEach(s),z$.forEach(s),vv=h(e),ht=r(e,"H4",{class:!0});var G$=l(ht);_s=r(G$,"A",{id:!0,class:!0,href:!0});var NO=l(_s);Vf=r(NO,"SPAN",{});var HO=l(Vf);c(Xr.$$.fragment,HO),HO.forEach(s),NO.forEach(s),K2=h(G$),Xf=r(G$,"SPAN",{});var RO=l(Xf);Q2=i(RO,"pytest-sugar"),RO.forEach(s),G$.forEach(s),yv=h(e),Jr=r(e,"P",{});var Xj=l(Jr);Zr=r(Xj,"A",{href:!0,rel:!0});var zO=l(Zr);e5=i(zO,"pytest-sugar"),zO.forEach(s),t5=i(Xj,` is a plugin that improves the look-n-feel, adds a
progressbar, and show tests that fail and the assert instantly. It gets activated automatically upon installation.`),Xj.forEach(s),wv=h(e),c(Kr.$$.fragment,e),$v=h(e),Ni=r(e,"P",{});var GO=l(Ni);s5=i(GO,"To run tests without it, run:"),GO.forEach(s),Ev=h(e),c(Qr.$$.fragment,e),gv=h(e),Hi=r(e,"P",{});var FO=l(Hi);o5=i(FO,"or uninstall it."),FO.forEach(s),bv=h(e),dt=r(e,"H4",{class:!0});var F$=l(dt);vs=r(F$,"A",{id:!0,class:!0,href:!0});var MO=l(vs);Jf=r(MO,"SPAN",{});var BO=l(Jf);c(el.$$.fragment,BO),BO.forEach(s),MO.forEach(s),r5=h(F$),Zf=r(F$,"SPAN",{});var WO=l(Zf);l5=i(WO,"Report each sub-test name and its progress"),WO.forEach(s),F$.forEach(s),kv=h(e),je=r(e,"P",{});var tp=l(je);a5=i(tp,"For a single or a group of tests via "),Kf=r(tp,"CODE",{});var YO=l(Kf);i5=i(YO,"pytest"),YO.forEach(s),n5=i(tp," (after "),Qf=r(tp,"CODE",{});var VO=l(Qf);p5=i(VO,"pip install pytest-pspec"),VO.forEach(s),f5=i(tp,"):"),tp.forEach(s),Cv=h(e),c(tl.$$.fragment,e),jv=h(e),ut=r(e,"H4",{class:!0});var M$=l(ut);ys=r(M$,"A",{id:!0,class:!0,href:!0});var XO=l(ys);eh=r(XO,"SPAN",{});var JO=l(eh);c(sl.$$.fragment,JO),JO.forEach(s),XO.forEach(s),h5=h(M$),th=r(M$,"SPAN",{});var ZO=l(th);d5=i(ZO,"Instantly shows failed tests"),ZO.forEach(s),M$.forEach(s),xv=h(e),ol=r(e,"P",{});var Jj=l(ol);rl=r(Jj,"A",{href:!0,rel:!0});var KO=l(rl);u5=i(KO,"pytest-instafail"),KO.forEach(s),c5=i(Jj,` shows failures and errors instantly instead of
waiting until the end of test session.`),Jj.forEach(s),Pv=h(e),c(ll.$$.fragment,e),Ov=h(e),c(al.$$.fragment,e),Tv=h(e),ct=r(e,"H3",{class:!0});var B$=l(ct);ws=r(B$,"A",{id:!0,class:!0,href:!0});var QO=l(ws);sh=r(QO,"SPAN",{});var eT=l(sh);c(il.$$.fragment,eT),eT.forEach(s),QO.forEach(s),m5=h(B$),oh=r(B$,"SPAN",{});var tT=l(oh);_5=i(tT,"To GPU or not to GPU"),tT.forEach(s),B$.forEach(s),Iv=h(e),$s=r(e,"P",{});var W$=l($s);v5=i(W$,"On a GPU-enabled setup, to test in CPU-only mode add "),rh=r(W$,"CODE",{});var sT=l(rh);y5=i(sT,'CUDA_VISIBLE_DEVICES=""'),sT.forEach(s),w5=i(W$,":"),W$.forEach(s),Dv=h(e),c(nl.$$.fragment,e),Av=h(e),te=r(e,"P",{});var xo=l(te);$5=i(xo,"or if you have multiple gpus, you can specify which one is to be used by "),lh=r(xo,"CODE",{});var oT=l(lh);E5=i(oT,"pytest"),oT.forEach(s),g5=i(xo,`. For example, to use only the
second gpu if you have gpus `),ah=r(xo,"CODE",{});var rT=l(ah);b5=i(rT,"0"),rT.forEach(s),k5=i(xo," and "),ih=r(xo,"CODE",{});var lT=l(ih);C5=i(lT,"1"),lT.forEach(s),j5=i(xo,", you can run:"),xo.forEach(s),Sv=h(e),c(pl.$$.fragment,e),qv=h(e),Ri=r(e,"P",{});var aT=l(Ri);x5=i(aT,"This is handy when you want to run different tasks on different GPUs."),aT.forEach(s),Lv=h(e),zi=r(e,"P",{});var iT=l(zi);P5=i(iT,`Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet others on multiple-GPUs. The following skip
decorators are used to set the requirements of tests CPU/GPU/TPU-wise:`),iT.forEach(s),Uv=h(e),q=r(e,"UL",{});var he=l(q);Gi=r(he,"LI",{});var Zj=l(Gi);nh=r(Zj,"CODE",{});var nT=l(nh);O5=i(nT,"require_torch"),nT.forEach(s),T5=i(Zj," - this test will run only under torch"),Zj.forEach(s),I5=h(he),Es=r(he,"LI",{});var gm=l(Es);ph=r(gm,"CODE",{});var pT=l(ph);D5=i(pT,"require_torch_gpu"),pT.forEach(s),A5=i(gm," - as "),fh=r(gm,"CODE",{});var fT=l(fh);S5=i(fT,"require_torch"),fT.forEach(s),q5=i(gm," plus requires at least 1 GPU"),gm.forEach(s),L5=h(he),gs=r(he,"LI",{});var bm=l(gs);hh=r(bm,"CODE",{});var hT=l(hh);U5=i(hT,"require_torch_multi_gpu"),hT.forEach(s),N5=i(bm," - as "),dh=r(bm,"CODE",{});var dT=l(dh);H5=i(dT,"require_torch"),dT.forEach(s),R5=i(bm," plus requires at least 2 GPUs"),bm.forEach(s),z5=h(he),bs=r(he,"LI",{});var km=l(bs);uh=r(km,"CODE",{});var uT=l(uh);G5=i(uT,"require_torch_non_multi_gpu"),uT.forEach(s),F5=i(km," - as "),ch=r(km,"CODE",{});var cT=l(ch);M5=i(cT,"require_torch"),cT.forEach(s),B5=i(km," plus requires 0 or 1 GPUs"),km.forEach(s),W5=h(he),ks=r(he,"LI",{});var Cm=l(ks);mh=r(Cm,"CODE",{});var mT=l(mh);Y5=i(mT,"require_torch_up_to_2_gpus"),mT.forEach(s),V5=i(Cm," - as "),_h=r(Cm,"CODE",{});var _T=l(_h);X5=i(_T,"require_torch"),_T.forEach(s),J5=i(Cm," plus requires 0 or 1 or 2 GPUs"),Cm.forEach(s),Z5=h(he),Cs=r(he,"LI",{});var jm=l(Cs);vh=r(jm,"CODE",{});var vT=l(vh);K5=i(vT,"require_torch_tpu"),vT.forEach(s),Q5=i(jm," - as "),yh=r(jm,"CODE",{});var yT=l(yh);e4=i(yT,"require_torch"),yT.forEach(s),t4=i(jm," plus requires at least 1 TPU"),jm.forEach(s),he.forEach(s),Nv=h(e),Fi=r(e,"P",{});var wT=l(Fi);s4=i(wT,"Let\u2019s depict the GPU requirements in the following table:"),wT.forEach(s),Hv=h(e),js=r(e,"TABLE",{});var Y$=l(js);wh=r(Y$,"THEAD",{});var $T=l(wh);fl=r($T,"TR",{});var V$=l(fl);$h=r(V$,"TH",{});var ET=l($h);o4=i(ET,"n gpus"),ET.forEach(s),r4=h(V$),Eh=r(V$,"TH",{});var gT=l(Eh);l4=i(gT,"decorator"),gT.forEach(s),V$.forEach(s),$T.forEach(s),a4=h(Y$),X=r(Y$,"TBODY",{});var ze=l(X);hl=r(ze,"TR",{});var X$=l(hl);gh=r(X$,"TD",{});var bT=l(gh);bh=r(bT,"CODE",{});var kT=l(bh);i4=i(kT,">= 0"),kT.forEach(s),bT.forEach(s),n4=h(X$),kh=r(X$,"TD",{});var CT=l(kh);Ch=r(CT,"CODE",{});var jT=l(Ch);p4=i(jT,"@require_torch"),jT.forEach(s),CT.forEach(s),X$.forEach(s),f4=h(ze),dl=r(ze,"TR",{});var J$=l(dl);jh=r(J$,"TD",{});var xT=l(jh);xh=r(xT,"CODE",{});var PT=l(xh);h4=i(PT,">= 1"),PT.forEach(s),xT.forEach(s),d4=h(J$),Ph=r(J$,"TD",{});var OT=l(Ph);Oh=r(OT,"CODE",{});var TT=l(Oh);u4=i(TT,"@require_torch_gpu"),TT.forEach(s),OT.forEach(s),J$.forEach(s),c4=h(ze),ul=r(ze,"TR",{});var Z$=l(ul);Th=r(Z$,"TD",{});var IT=l(Th);Ih=r(IT,"CODE",{});var DT=l(Ih);m4=i(DT,">= 2"),DT.forEach(s),IT.forEach(s),_4=h(Z$),Dh=r(Z$,"TD",{});var AT=l(Dh);Ah=r(AT,"CODE",{});var ST=l(Ah);v4=i(ST,"@require_torch_multi_gpu"),ST.forEach(s),AT.forEach(s),Z$.forEach(s),y4=h(ze),cl=r(ze,"TR",{});var K$=l(cl);Sh=r(K$,"TD",{});var qT=l(Sh);qh=r(qT,"CODE",{});var LT=l(qh);w4=i(LT,"< 2"),LT.forEach(s),qT.forEach(s),$4=h(K$),Lh=r(K$,"TD",{});var UT=l(Lh);Uh=r(UT,"CODE",{});var NT=l(Uh);E4=i(NT,"@require_torch_non_multi_gpu"),NT.forEach(s),UT.forEach(s),K$.forEach(s),g4=h(ze),ml=r(ze,"TR",{});var Q$=l(ml);Nh=r(Q$,"TD",{});var HT=l(Nh);Hh=r(HT,"CODE",{});var RT=l(Hh);b4=i(RT,"< 3"),RT.forEach(s),HT.forEach(s),k4=h(Q$),Rh=r(Q$,"TD",{});var zT=l(Rh);zh=r(zT,"CODE",{});var GT=l(zh);C4=i(GT,"@require_torch_up_to_2_gpus"),GT.forEach(s),zT.forEach(s),Q$.forEach(s),ze.forEach(s),Y$.forEach(s),Rv=h(e),Mi=r(e,"P",{});var FT=l(Mi);j4=i(FT,"For example, here is a test that must be run only when there are 2 or more GPUs available and pytorch is installed:"),FT.forEach(s),zv=h(e),c(_l.$$.fragment,e),Gv=h(e),xe=r(e,"P",{});var sp=l(xe);x4=i(sp,"If a test requires "),Gh=r(sp,"CODE",{});var MT=l(Gh);P4=i(MT,"tensorflow"),MT.forEach(s),O4=i(sp," use the "),Fh=r(sp,"CODE",{});var BT=l(Fh);T4=i(BT,"require_tf"),BT.forEach(s),I4=i(sp," decorator. For example:"),sp.forEach(s),Fv=h(e),c(vl.$$.fragment,e),Mv=h(e),Bi=r(e,"P",{});var WT=l(Bi);D4=i(WT,`These decorators can be stacked. For example, if a test is slow and requires at least one GPU under pytorch, here is
how to set it up:`),WT.forEach(s),Bv=h(e),c(yl.$$.fragment,e),Wv=h(e),Pe=r(e,"P",{});var op=l(Pe);A4=i(op,"Some decorators like "),Mh=r(op,"CODE",{});var YT=l(Mh);S4=i(YT,"@parametrized"),YT.forEach(s),q4=i(op," rewrite test names, therefore "),Bh=r(op,"CODE",{});var VT=l(Bh);L4=i(VT,"@require_*"),VT.forEach(s),U4=i(op,` skip decorators have to be listed
last for them to work correctly. Here is an example of the correct usage:`),op.forEach(s),Yv=h(e),c(wl.$$.fragment,e),Vv=h(e),xs=r(e,"P",{});var eE=l(xs);N4=i(eE,"This order problem doesn\u2019t exist with "),Wh=r(eE,"CODE",{});var XT=l(Wh);H4=i(XT,"@pytest.mark.parametrize"),XT.forEach(s),R4=i(eE,`, you can put it first or last and it will still
work. But it only works with non-unittests.`),eE.forEach(s),Xv=h(e),Wi=r(e,"P",{});var JT=l(Wi);z4=i(JT,"Inside tests:"),JT.forEach(s),Jv=h(e),Yi=r(e,"UL",{});var ZT=l(Yi);Yh=r(ZT,"LI",{});var KT=l(Yh);G4=i(KT,"How many GPUs are available:"),KT.forEach(s),ZT.forEach(s),Zv=h(e),c($l.$$.fragment,e),Kv=h(e),mt=r(e,"H3",{class:!0});var tE=l(mt);Ps=r(tE,"A",{id:!0,class:!0,href:!0});var QT=l(Ps);Vh=r(QT,"SPAN",{});var eI=l(Vh);c(El.$$.fragment,eI),eI.forEach(s),QT.forEach(s),F4=h(tE),Xh=r(tE,"SPAN",{});var tI=l(Xh);M4=i(tI,"Distributed training"),tI.forEach(s),tE.forEach(s),Qv=h(e),_t=r(e,"P",{});var xm=l(_t);Jh=r(xm,"CODE",{});var sI=l(Jh);B4=i(sI,"pytest"),sI.forEach(s),W4=i(xm,` can\u2019t deal with distributed training directly. If this is attempted - the sub-processes don\u2019t do the right
thing and end up thinking they are `),Zh=r(xm,"CODE",{});var oI=l(Zh);Y4=i(oI,"pytest"),oI.forEach(s),V4=i(xm,` and start running the test suite in loops. It works, however, if one
spawns a normal process that then spawns off multiple workers and manages the IO pipes.`),xm.forEach(s),e1=h(e),Vi=r(e,"P",{});var rI=l(Vi);X4=i(rI,"Here are some tests that use it:"),rI.forEach(s),t1=h(e),Os=r(e,"UL",{});var sE=l(Os);Kh=r(sE,"LI",{});var lI=l(Kh);gl=r(lI,"A",{href:!0,rel:!0});var aI=l(gl);J4=i(aI,"test_trainer_distributed.py"),aI.forEach(s),lI.forEach(s),Z4=h(sE),Qh=r(sE,"LI",{});var iI=l(Qh);bl=r(iI,"A",{href:!0,rel:!0});var nI=l(bl);K4=i(nI,"test_deepspeed.py"),nI.forEach(s),iI.forEach(s),sE.forEach(s),s1=h(e),Ts=r(e,"P",{});var oE=l(Ts);Q4=i(oE,"To jump right into the execution point, search for the "),ed=r(oE,"CODE",{});var pI=l(ed);ek=i(pI,"execute_subprocess_async"),pI.forEach(s),tk=i(oE," call in those tests."),oE.forEach(s),o1=h(e),Xi=r(e,"P",{});var fI=l(Xi);sk=i(fI,"You will need at least 2 GPUs to see these tests in action:"),fI.forEach(s),r1=h(e),c(kl.$$.fragment,e),l1=h(e),vt=r(e,"H3",{class:!0});var rE=l(vt);Is=r(rE,"A",{id:!0,class:!0,href:!0});var hI=l(Is);td=r(hI,"SPAN",{});var dI=l(td);c(Cl.$$.fragment,dI),dI.forEach(s),hI.forEach(s),ok=h(rE),sd=r(rE,"SPAN",{});var uI=l(sd);rk=i(uI,"Output capture"),uI.forEach(s),rE.forEach(s),a1=h(e),Oe=r(e,"P",{});var rp=l(Oe);lk=i(rp,"During test execution any output sent to "),od=r(rp,"CODE",{});var cI=l(od);ak=i(cI,"stdout"),cI.forEach(s),ik=i(rp," and "),rd=r(rp,"CODE",{});var mI=l(rd);nk=i(mI,"stderr"),mI.forEach(s),pk=i(rp,` is captured. If a test or a setup method fails, its
according captured output will usually be shown along with the failure traceback.`),rp.forEach(s),i1=h(e),F=r(e,"P",{});var Ge=l(F);fk=i(Ge,"To disable output capturing and to get the "),ld=r(Ge,"CODE",{});var _I=l(ld);hk=i(_I,"stdout"),_I.forEach(s),dk=i(Ge," and "),ad=r(Ge,"CODE",{});var vI=l(ad);uk=i(vI,"stderr"),vI.forEach(s),ck=i(Ge," normally, use "),id=r(Ge,"CODE",{});var yI=l(id);mk=i(yI,"-s"),yI.forEach(s),_k=i(Ge," or "),nd=r(Ge,"CODE",{});var wI=l(nd);vk=i(wI,"--capture=no"),wI.forEach(s),yk=i(Ge,":"),Ge.forEach(s),n1=h(e),c(jl.$$.fragment,e),p1=h(e),Ji=r(e,"P",{});var $I=l(Ji);wk=i($I,"To send test results to JUnit format output:"),$I.forEach(s),f1=h(e),c(xl.$$.fragment,e),h1=h(e),yt=r(e,"H3",{class:!0});var lE=l(yt);Ds=r(lE,"A",{id:!0,class:!0,href:!0});var EI=l(Ds);pd=r(EI,"SPAN",{});var gI=l(pd);c(Pl.$$.fragment,gI),gI.forEach(s),EI.forEach(s),$k=h(lE),fd=r(lE,"SPAN",{});var bI=l(fd);Ek=i(bI,"Color control"),bI.forEach(s),lE.forEach(s),d1=h(e),Zi=r(e,"P",{});var kI=l(Zi);gk=i(kI,"To have no color (e.g., yellow on white background is not readable):"),kI.forEach(s),u1=h(e),c(Ol.$$.fragment,e),c1=h(e),wt=r(e,"H3",{class:!0});var aE=l(wt);As=r(aE,"A",{id:!0,class:!0,href:!0});var CI=l(As);hd=r(CI,"SPAN",{});var jI=l(hd);c(Tl.$$.fragment,jI),jI.forEach(s),CI.forEach(s),bk=h(aE),dd=r(aE,"SPAN",{});var xI=l(dd);kk=i(xI,"Sending test report to online pastebin service"),xI.forEach(s),aE.forEach(s),m1=h(e),Ki=r(e,"P",{});var PI=l(Ki);Ck=i(PI,"Creating a URL for each test failure:"),PI.forEach(s),_1=h(e),c(Il.$$.fragment,e),v1=h(e),Qi=r(e,"P",{});var OI=l(Qi);jk=i(OI,`This will submit test run information to a remote Paste service and provide a URL for each failure. You may select
tests as usual or add for example -x if you only want to send one particular failure.`),OI.forEach(s),y1=h(e),en=r(e,"P",{});var TI=l(en);xk=i(TI,"Creating a URL for a whole test session log:"),TI.forEach(s),w1=h(e),c(Dl.$$.fragment,e),$1=h(e),$t=r(e,"H2",{class:!0});var iE=l($t);Ss=r(iE,"A",{id:!0,class:!0,href:!0});var II=l(Ss);ud=r(II,"SPAN",{});var DI=l(ud);c(Al.$$.fragment,DI),DI.forEach(s),II.forEach(s),Pk=h(iE),cd=r(iE,"SPAN",{});var AI=l(cd);Ok=i(AI,"Writing tests"),AI.forEach(s),iE.forEach(s),E1=h(e),Te=r(e,"P",{});var lp=l(Te);Tk=i(lp,"\u{1F917} transformers tests are based on "),md=r(lp,"CODE",{});var SI=l(md);Ik=i(SI,"unittest"),SI.forEach(s),Dk=i(lp,", but run by "),_d=r(lp,"CODE",{});var qI=l(_d);Ak=i(qI,"pytest"),qI.forEach(s),Sk=i(lp,`, so most of the time features from both systems
can be used.`),lp.forEach(s),g1=h(e),se=r(e,"P",{});var Po=l(se);qk=i(Po,"You can read "),Sl=r(Po,"A",{href:!0,rel:!0});var LI=l(Sl);Lk=i(LI,"here"),LI.forEach(s),Uk=i(Po,` which features are supported, but the important
thing to remember is that most `),vd=r(Po,"CODE",{});var UI=l(vd);Nk=i(UI,"pytest"),UI.forEach(s),Hk=i(Po,` fixtures don\u2019t work. Neither parametrization, but we use the module
`),yd=r(Po,"CODE",{});var NI=l(yd);Rk=i(NI,"parameterized"),NI.forEach(s),zk=i(Po," that works in a similar way."),Po.forEach(s),b1=h(e),Et=r(e,"H3",{class:!0});var nE=l(Et);qs=r(nE,"A",{id:!0,class:!0,href:!0});var HI=l(qs);wd=r(HI,"SPAN",{});var RI=l(wd);c(ql.$$.fragment,RI),RI.forEach(s),HI.forEach(s),Gk=h(nE),$d=r(nE,"SPAN",{});var zI=l($d);Fk=i(zI,"Parametrization"),zI.forEach(s),nE.forEach(s),k1=h(e),tn=r(e,"P",{});var GI=l(tn);Mk=i(GI,`Often, there is a need to run the same test multiple times, but with different arguments. It could be done from within
the test, but then there is no way of running that test for just one set of arguments.`),GI.forEach(s),C1=h(e),c(Ll.$$.fragment,e),j1=h(e),Ls=r(e,"P",{});var pE=l(Ls);Bk=i(pE,"Now, by default this test will be run 3 times, each time with the last 3 arguments of "),Ed=r(pE,"CODE",{});var FI=l(Ed);Wk=i(FI,"test_floor"),FI.forEach(s),Yk=i(pE,` being assigned the
corresponding arguments in the parameter list.`),pE.forEach(s),x1=h(e),Ie=r(e,"P",{});var ap=l(Ie);Vk=i(ap,"and you could run just the "),gd=r(ap,"CODE",{});var MI=l(gd);Xk=i(MI,"negative"),MI.forEach(s),Jk=i(ap," and "),bd=r(ap,"CODE",{});var BI=l(bd);Zk=i(BI,"integer"),BI.forEach(s),Kk=i(ap," sets of params with:"),ap.forEach(s),P1=h(e),c(Ul.$$.fragment,e),O1=h(e),Us=r(e,"P",{});var fE=l(Us);Qk=i(fE,"or all but "),kd=r(fE,"CODE",{});var WI=l(kd);e0=i(WI,"negative"),WI.forEach(s),t0=i(fE," sub-tests, with:"),fE.forEach(s),T1=h(e),c(Nl.$$.fragment,e),I1=h(e),Ns=r(e,"P",{});var hE=l(Ns);s0=i(hE,"Besides using the "),Cd=r(hE,"CODE",{});var YI=l(Cd);o0=i(YI,"-k"),YI.forEach(s),r0=i(hE,` filter that was just mentioned, you can find out the exact name of each sub-test and run any
or all of them using their exact names.`),hE.forEach(s),D1=h(e),c(Hl.$$.fragment,e),A1=h(e),sn=r(e,"P",{});var VI=l(sn);l0=i(VI,"and it will list:"),VI.forEach(s),S1=h(e),c(Rl.$$.fragment,e),q1=h(e),on=r(e,"P",{});var XI=l(on);a0=i(XI,"So now you can run just 2 specific sub-tests:"),XI.forEach(s),L1=h(e),c(zl.$$.fragment,e),U1=h(e),M=r(e,"P",{});var Fe=l(M);i0=i(Fe,"The module "),Gl=r(Fe,"A",{href:!0,rel:!0});var JI=l(Gl);n0=i(JI,"parameterized"),JI.forEach(s),p0=i(Fe,` which is already in the developer dependencies
of `),jd=r(Fe,"CODE",{});var ZI=l(jd);f0=i(ZI,"transformers"),ZI.forEach(s),h0=i(Fe," works for both: "),xd=r(Fe,"CODE",{});var KI=l(xd);d0=i(KI,"unittests"),KI.forEach(s),u0=i(Fe," and "),Pd=r(Fe,"CODE",{});var QI=l(Pd);c0=i(QI,"pytest"),QI.forEach(s),m0=i(Fe," tests."),Fe.forEach(s),N1=h(e),oe=r(e,"P",{});var Oo=l(oe);_0=i(Oo,"If, however, the test is not a "),Od=r(Oo,"CODE",{});var eD=l(Od);v0=i(eD,"unittest"),eD.forEach(s),y0=i(Oo,", you may use "),Td=r(Oo,"CODE",{});var tD=l(Td);w0=i(tD,"pytest.mark.parametrize"),tD.forEach(s),$0=i(Oo,` (or you may see it being used in
some existing tests, mostly under `),Id=r(Oo,"CODE",{});var sD=l(Id);E0=i(sD,"examples"),sD.forEach(s),g0=i(Oo,")."),Oo.forEach(s),H1=h(e),De=r(e,"P",{});var ip=l(De);b0=i(ip,"Here is the same example, this time using "),Dd=r(ip,"CODE",{});var oD=l(Dd);k0=i(oD,"pytest"),oD.forEach(s),C0=i(ip,"\u2019s "),Ad=r(ip,"CODE",{});var rD=l(Ad);j0=i(rD,"parametrize"),rD.forEach(s),x0=i(ip," marker:"),ip.forEach(s),R1=h(e),c(Fl.$$.fragment,e),z1=h(e),re=r(e,"P",{});var To=l(re);P0=i(To,"Same as with "),Sd=r(To,"CODE",{});var lD=l(Sd);O0=i(lD,"parameterized"),lD.forEach(s),T0=i(To,", with "),qd=r(To,"CODE",{});var aD=l(qd);I0=i(aD,"pytest.mark.parametrize"),aD.forEach(s),D0=i(To,` you can have a fine control over which sub-tests are
run, if the `),Ld=r(To,"CODE",{});var iD=l(Ld);A0=i(iD,"-k"),iD.forEach(s),S0=i(To,` filter doesn\u2019t do the job. Except, this parametrization function creates a slightly different set of
names for the sub-tests. Here is what they look like:`),To.forEach(s),G1=h(e),c(Ml.$$.fragment,e),F1=h(e),rn=r(e,"P",{});var nD=l(rn);q0=i(nD,"and it will list:"),nD.forEach(s),M1=h(e),c(Bl.$$.fragment,e),B1=h(e),ln=r(e,"P",{});var pD=l(ln);L0=i(pD,"So now you can run just the specific test:"),pD.forEach(s),W1=h(e),c(Wl.$$.fragment,e),Y1=h(e),an=r(e,"P",{});var fD=l(an);U0=i(fD,"as in the previous example."),fD.forEach(s),V1=h(e),gt=r(e,"H3",{class:!0});var dE=l(gt);Hs=r(dE,"A",{id:!0,class:!0,href:!0});var hD=l(Hs);Ud=r(hD,"SPAN",{});var dD=l(Ud);c(Yl.$$.fragment,dD),dD.forEach(s),hD.forEach(s),N0=h(dE),Nd=r(dE,"SPAN",{});var uD=l(Nd);H0=i(uD,"Files and directories"),uD.forEach(s),dE.forEach(s),X1=h(e),Rs=r(e,"P",{});var uE=l(Rs);R0=i(uE,`In tests often we need to know where things are relative to the current test file, and it\u2019s not trivial since the test
could be invoked from more than one directory or could reside in sub-directories with different depths. A helper class
`),Hd=r(uE,"CODE",{});var cD=l(Hd);z0=i(cD,"transformers.test_utils.TestCasePlus"),cD.forEach(s),G0=i(uE,` solves this problem by sorting out all the basic paths and provides easy
accessors to them:`),uE.forEach(s),J1=h(e),zs=r(e,"UL",{});var cE=l(zs);Vl=r(cE,"LI",{});var mE=l(Vl);nn=r(mE,"P",{});var Kj=l(nn);Rd=r(Kj,"CODE",{});var mD=l(Rd);F0=i(mD,"pathlib"),mD.forEach(s),M0=i(Kj," objects (all fully resolved):"),Kj.forEach(s),B0=h(mE),R=r(mE,"UL",{});var de=l(R);Xl=r(de,"LI",{});var _E=l(Xl);zd=r(_E,"CODE",{});var _D=l(zd);W0=i(_D,"test_file_path"),_D.forEach(s),Y0=i(_E," - the current test file path, i.e. "),Gd=r(_E,"CODE",{});var vD=l(Gd);V0=i(vD,"__file__"),vD.forEach(s),_E.forEach(s),X0=h(de),pn=r(de,"LI",{});var Qj=l(pn);Fd=r(Qj,"CODE",{});var yD=l(Fd);J0=i(yD,"test_file_dir"),yD.forEach(s),Z0=i(Qj," - the directory containing the current test file"),Qj.forEach(s),K0=h(de),Gs=r(de,"LI",{});var Pm=l(Gs);Md=r(Pm,"CODE",{});var wD=l(Md);Q0=i(wD,"tests_dir"),wD.forEach(s),e6=i(Pm," - the directory of the "),Bd=r(Pm,"CODE",{});var $D=l(Bd);t6=i($D,"tests"),$D.forEach(s),s6=i(Pm," test suite"),Pm.forEach(s),o6=h(de),Fs=r(de,"LI",{});var Om=l(Fs);Wd=r(Om,"CODE",{});var ED=l(Wd);r6=i(ED,"examples_dir"),ED.forEach(s),l6=i(Om," - the directory of the "),Yd=r(Om,"CODE",{});var gD=l(Yd);a6=i(gD,"examples"),gD.forEach(s),i6=i(Om," test suite"),Om.forEach(s),n6=h(de),fn=r(de,"LI",{});var ex=l(fn);Vd=r(ex,"CODE",{});var bD=l(Vd);p6=i(bD,"repo_root_dir"),bD.forEach(s),f6=i(ex," - the directory of the repository"),ex.forEach(s),h6=h(de),Ae=r(de,"LI",{});var ni=l(Ae);Xd=r(ni,"CODE",{});var kD=l(Xd);d6=i(kD,"src_dir"),kD.forEach(s),u6=i(ni," - the directory of "),Jd=r(ni,"CODE",{});var CD=l(Jd);c6=i(CD,"src"),CD.forEach(s),m6=i(ni," (i.e. where the "),Zd=r(ni,"CODE",{});var jD=l(Zd);_6=i(jD,"transformers"),jD.forEach(s),v6=i(ni," sub-dir resides)"),ni.forEach(s),de.forEach(s),mE.forEach(s),y6=h(cE),Jl=r(cE,"LI",{});var vE=l(Jl);Zl=r(vE,"P",{});var yE=l(Zl);w6=i(yE,"stringified paths---same as above but these return paths as strings, rather than "),Kd=r(yE,"CODE",{});var xD=l(Kd);$6=i(xD,"pathlib"),xD.forEach(s),E6=i(yE," objects:"),yE.forEach(s),g6=h(vE),z=r(vE,"UL",{});var ue=l(z);Qd=r(ue,"LI",{});var PD=l(Qd);eu=r(PD,"CODE",{});var OD=l(eu);b6=i(OD,"test_file_path_str"),OD.forEach(s),PD.forEach(s),k6=h(ue),tu=r(ue,"LI",{});var TD=l(tu);su=r(TD,"CODE",{});var ID=l(su);C6=i(ID,"test_file_dir_str"),ID.forEach(s),TD.forEach(s),j6=h(ue),ou=r(ue,"LI",{});var DD=l(ou);ru=r(DD,"CODE",{});var AD=l(ru);x6=i(AD,"tests_dir_str"),AD.forEach(s),DD.forEach(s),P6=h(ue),lu=r(ue,"LI",{});var SD=l(lu);au=r(SD,"CODE",{});var qD=l(au);O6=i(qD,"examples_dir_str"),qD.forEach(s),SD.forEach(s),T6=h(ue),iu=r(ue,"LI",{});var LD=l(iu);nu=r(LD,"CODE",{});var UD=l(nu);I6=i(UD,"repo_root_dir_str"),UD.forEach(s),LD.forEach(s),D6=h(ue),pu=r(ue,"LI",{});var ND=l(pu);fu=r(ND,"CODE",{});var HD=l(fu);A6=i(HD,"src_dir_str"),HD.forEach(s),ND.forEach(s),ue.forEach(s),vE.forEach(s),cE.forEach(s),Z1=h(e),Ms=r(e,"P",{});var wE=l(Ms);S6=i(wE,`To start using those all you need is to make sure that the test resides in a subclass of
`),hu=r(wE,"CODE",{});var RD=l(hu);q6=i(RD,"transformers.test_utils.TestCasePlus"),RD.forEach(s),L6=i(wE,". For example:"),wE.forEach(s),K1=h(e),c(Kl.$$.fragment,e),Q1=h(e),B=r(e,"P",{});var Me=l(B);U6=i(Me,"If you don\u2019t need to manipulate paths via "),du=r(Me,"CODE",{});var zD=l(du);N6=i(zD,"pathlib"),zD.forEach(s),H6=i(Me,` or you just need a path as a string, you can always invoked
`),uu=r(Me,"CODE",{});var GD=l(uu);R6=i(GD,"str()"),GD.forEach(s),z6=i(Me," on the "),cu=r(Me,"CODE",{});var FD=l(cu);G6=i(FD,"pathlib"),FD.forEach(s),F6=i(Me," object or use the accessors ending with "),mu=r(Me,"CODE",{});var MD=l(mu);M6=i(MD,"_str"),MD.forEach(s),B6=i(Me,". For example:"),Me.forEach(s),ey=h(e),c(Ql.$$.fragment,e),ty=h(e),bt=r(e,"H3",{class:!0});var $E=l(bt);Bs=r($E,"A",{id:!0,class:!0,href:!0});var BD=l(Bs);_u=r(BD,"SPAN",{});var WD=l(_u);c(ea.$$.fragment,WD),WD.forEach(s),BD.forEach(s),W6=h($E),vu=r($E,"SPAN",{});var YD=l(vu);Y6=i(YD,"Temporary files and directories"),YD.forEach(s),$E.forEach(s),sy=h(e),Ws=r(e,"P",{});var EE=l(Ws);V6=i(EE,`Using unique temporary files and directories are essential for parallel test running, so that the tests won\u2019t overwrite
each other\u2019s data. Also we want to get the temporary files and directories removed at the end of each test that created
them. Therefore, using packages like `),yu=r(EE,"CODE",{});var VD=l(yu);X6=i(VD,"tempfile"),VD.forEach(s),J6=i(EE,", which address these needs is essential."),EE.forEach(s),oy=h(e),hn=r(e,"P",{});var XD=l(hn);Z6=i(XD,`However, when debugging tests, you need to be able to see what goes into the temporary file or directory and you want
to know it\u2019s exact path and not having it randomized on every test re-run.`),XD.forEach(s),ry=h(e),Se=r(e,"P",{});var np=l(Se);K6=i(np,"A helper class "),wu=r(np,"CODE",{});var JD=l(wu);Q6=i(JD,"transformers.test_utils.TestCasePlus"),JD.forEach(s),e7=i(np,` is best used for such purposes. It\u2019s a sub-class of
`),$u=r(np,"CODE",{});var ZD=l($u);t7=i(ZD,"unittest.TestCase"),ZD.forEach(s),s7=i(np,", so we can easily inherit from it in the test modules."),np.forEach(s),ly=h(e),dn=r(e,"P",{});var KD=l(dn);o7=i(KD,"Here is an example of its usage:"),KD.forEach(s),ay=h(e),c(ta.$$.fragment,e),iy=h(e),Ys=r(e,"P",{});var gE=l(Ys);r7=i(gE,"This code creates a unique temporary directory, and sets "),Eu=r(gE,"CODE",{});var QD=l(Eu);l7=i(QD,"tmp_dir"),QD.forEach(s),a7=i(gE," to its location."),gE.forEach(s),ny=h(e),un=r(e,"UL",{});var eA=l(un);gu=r(eA,"LI",{});var tA=l(gu);i7=i(tA,"Create a unique temporary dir:"),tA.forEach(s),eA.forEach(s),py=h(e),c(sa.$$.fragment,e),fy=h(e),oa=r(e,"P",{});var tx=l(oa);bu=r(tx,"CODE",{});var sA=l(bu);n7=i(sA,"tmp_dir"),sA.forEach(s),p7=i(tx,` will contain the path to the created temporary dir. It will be automatically removed at the end of the
test.`),tx.forEach(s),hy=h(e),cn=r(e,"UL",{});var oA=l(cn);ku=r(oA,"LI",{});var rA=l(ku);f7=i(rA,"Create a temporary dir of my choice, ensure it\u2019s empty before the test starts and don\u2019t empty it after the test."),rA.forEach(s),oA.forEach(s),dy=h(e),c(ra.$$.fragment,e),uy=h(e),mn=r(e,"P",{});var lA=l(mn);h7=i(lA,`This is useful for debug when you want to monitor a specific directory and want to make sure the previous tests didn\u2019t
leave any data in there.`),lA.forEach(s),cy=h(e),_n=r(e,"UL",{});var aA=l(_n);la=r(aA,"LI",{});var bE=l(la);kt=r(bE,"P",{});var pp=l(kt);d7=i(pp,"You can override the default behavior by directly overriding the "),Cu=r(pp,"CODE",{});var iA=l(Cu);u7=i(iA,"before"),iA.forEach(s),c7=i(pp," and "),ju=r(pp,"CODE",{});var nA=l(ju);m7=i(nA,"after"),nA.forEach(s),_7=i(pp,` args, leading to one of the
following behaviors:`),pp.forEach(s),v7=h(bE),ye=r(bE,"UL",{});var Io=l(ye);vn=r(Io,"LI",{});var sx=l(vn);xu=r(sx,"CODE",{});var pA=l(xu);y7=i(pA,"before=True"),pA.forEach(s),w7=i(sx,": the temporary dir will always be cleared at the beginning of the test."),sx.forEach(s),$7=h(Io),yn=r(Io,"LI",{});var ox=l(yn);Pu=r(ox,"CODE",{});var fA=l(Pu);E7=i(fA,"before=False"),fA.forEach(s),g7=i(ox,": if the temporary dir already existed, any existing files will remain there."),ox.forEach(s),b7=h(Io),wn=r(Io,"LI",{});var rx=l(wn);Ou=r(rx,"CODE",{});var hA=l(Ou);k7=i(hA,"after=True"),hA.forEach(s),C7=i(rx,": the temporary dir will always be deleted at the end of the test."),rx.forEach(s),j7=h(Io),$n=r(Io,"LI",{});var lx=l($n);Tu=r(lx,"CODE",{});var dA=l(Tu);x7=i(dA,"after=False"),dA.forEach(s),P7=i(lx,": the temporary dir will always be left intact at the end of the test."),lx.forEach(s),Io.forEach(s),bE.forEach(s),aA.forEach(s),my=h(e),c(Vs.$$.fragment,e),_y=h(e),c(Xs.$$.fragment,e),vy=h(e),Ct=r(e,"H3",{class:!0});var kE=l(Ct);Js=r(kE,"A",{id:!0,class:!0,href:!0});var uA=l(Js);Iu=r(uA,"SPAN",{});var cA=l(Iu);c(aa.$$.fragment,cA),cA.forEach(s),uA.forEach(s),O7=h(kE),Du=r(kE,"SPAN",{});var mA=l(Du);T7=i(mA,"Temporary sys.path override"),mA.forEach(s),kE.forEach(s),yy=h(e),qe=r(e,"P",{});var fp=l(qe);I7=i(fp,"If you need to temporary override "),Au=r(fp,"CODE",{});var _A=l(Au);D7=i(_A,"sys.path"),_A.forEach(s),A7=i(fp,` to import from another test for example, you can use the
`),Su=r(fp,"CODE",{});var vA=l(Su);S7=i(vA,"ExtendSysPath"),vA.forEach(s),q7=i(fp," context manager. Example:"),fp.forEach(s),wy=h(e),c(ia.$$.fragment,e),$y=h(e),jt=r(e,"H3",{class:!0});var CE=l(jt);Zs=r(CE,"A",{id:!0,class:!0,href:!0});var yA=l(Zs);qu=r(yA,"SPAN",{});var wA=l(qu);c(na.$$.fragment,wA),wA.forEach(s),yA.forEach(s),L7=h(CE),Lu=r(CE,"SPAN",{});var $A=l(Lu);U7=i($A,"Skipping tests"),$A.forEach(s),CE.forEach(s),Ey=h(e),Ks=r(e,"P",{});var jE=l(Ks);N7=i(jE,`This is useful when a bug is found and a new test is written, yet the bug is not fixed yet. In order to be able to
commit it to the main repository we need make sure it\u2019s skipped during `),Uu=r(jE,"CODE",{});var EA=l(Uu);H7=i(EA,"make test"),EA.forEach(s),R7=i(jE,"."),jE.forEach(s),gy=h(e),En=r(e,"P",{});var gA=l(En);z7=i(gA,"Methods:"),gA.forEach(s),by=h(e),Qs=r(e,"UL",{});var xE=l(Qs);Nu=r(xE,"LI",{});var bA=l(Nu);pa=r(bA,"P",{});var PE=l(pa);G7=i(PE,"A "),Hu=r(PE,"STRONG",{});var kA=l(Hu);F7=i(kA,"skip"),kA.forEach(s),M7=i(PE,` means that you expect your test to pass only if some conditions are met, otherwise pytest should skip
running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping
tests that depend on an external resource which is not available at the moment (for example a database).`),PE.forEach(s),bA.forEach(s),B7=h(xE),Ru=r(xE,"LI",{});var CA=l(Ru);fa=r(CA,"P",{});var OE=l(fa);W7=i(OE,"A "),zu=r(OE,"STRONG",{});var jA=l(zu);Y7=i(jA,"xfail"),jA.forEach(s),V7=i(OE,` means that you expect a test to fail for some reason. A common example is a test for a feature not yet
implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with
pytest.mark.xfail), it\u2019s an xpass and will be reported in the test summary.`),OE.forEach(s),CA.forEach(s),xE.forEach(s),ky=h(e),le=r(e,"P",{});var Do=l(le);X7=i(Do,"One of the important differences between the two is that "),Gu=r(Do,"CODE",{});var xA=l(Gu);J7=i(xA,"skip"),xA.forEach(s),Z7=i(Do," doesn\u2019t run the test, and "),Fu=r(Do,"CODE",{});var PA=l(Fu);K7=i(PA,"xfail"),PA.forEach(s),Q7=i(Do,` does. So if the
code that\u2019s buggy causes some bad state that will affect other tests, do not use `),Mu=r(Do,"CODE",{});var OA=l(Mu);e8=i(OA,"xfail"),OA.forEach(s),t8=i(Do,"."),Do.forEach(s),Cy=h(e),xt=r(e,"H4",{class:!0});var TE=l(xt);eo=r(TE,"A",{id:!0,class:!0,href:!0});var TA=l(eo);Bu=r(TA,"SPAN",{});var IA=l(Bu);c(ha.$$.fragment,IA),IA.forEach(s),TA.forEach(s),s8=h(TE),Wu=r(TE,"SPAN",{});var DA=l(Wu);o8=i(DA,"Implementation"),DA.forEach(s),TE.forEach(s),jy=h(e),gn=r(e,"UL",{});var AA=l(gn);Yu=r(AA,"LI",{});var SA=l(Yu);r8=i(SA,"Here is how to skip whole test unconditionally:"),SA.forEach(s),AA.forEach(s),xy=h(e),c(da.$$.fragment,e),Py=h(e),bn=r(e,"P",{});var qA=l(bn);l8=i(qA,"or via pytest:"),qA.forEach(s),Oy=h(e),c(ua.$$.fragment,e),Ty=h(e),to=r(e,"P",{});var IE=l(to);a8=i(IE,"or the "),Vu=r(IE,"CODE",{});var LA=l(Vu);i8=i(LA,"xfail"),LA.forEach(s),n8=i(IE," way:"),IE.forEach(s),Iy=h(e),c(ca.$$.fragment,e),Dy=h(e),kn=r(e,"UL",{});var UA=l(kn);Xu=r(UA,"LI",{});var NA=l(Xu);p8=i(NA,"Here is how to skip a test based on some internal check inside the test:"),NA.forEach(s),UA.forEach(s),Ay=h(e),c(ma.$$.fragment,e),Sy=h(e),Cn=r(e,"P",{});var HA=l(Cn);f8=i(HA,"or the whole module:"),HA.forEach(s),qy=h(e),c(_a.$$.fragment,e),Ly=h(e),so=r(e,"P",{});var DE=l(so);h8=i(DE,"or the "),Ju=r(DE,"CODE",{});var RA=l(Ju);d8=i(RA,"xfail"),RA.forEach(s),u8=i(DE," way:"),DE.forEach(s),Uy=h(e),c(va.$$.fragment,e),Ny=h(e),jn=r(e,"UL",{});var zA=l(jn);Zu=r(zA,"LI",{});var GA=l(Zu);c8=i(GA,"Here is how to skip all tests in a module if some import is missing:"),GA.forEach(s),zA.forEach(s),Hy=h(e),c(ya.$$.fragment,e),Ry=h(e),xn=r(e,"UL",{});var FA=l(xn);Ku=r(FA,"LI",{});var MA=l(Ku);m8=i(MA,"Skip a test based on a condition:"),MA.forEach(s),FA.forEach(s),zy=h(e),c(wa.$$.fragment,e),Gy=h(e),Pn=r(e,"P",{});var BA=l(Pn);_8=i(BA,"or:"),BA.forEach(s),Fy=h(e),c($a.$$.fragment,e),My=h(e),On=r(e,"P",{});var WA=l(On);v8=i(WA,"or skip the whole module:"),WA.forEach(s),By=h(e),c(Ea.$$.fragment,e),Wy=h(e),oo=r(e,"P",{});var AE=l(oo);y8=i(AE,"More details, example and ways are "),ga=r(AE,"A",{href:!0,rel:!0});var YA=l(ga);w8=i(YA,"here"),YA.forEach(s),$8=i(AE,"."),AE.forEach(s),Yy=h(e),Pt=r(e,"H3",{class:!0});var SE=l(Pt);ro=r(SE,"A",{id:!0,class:!0,href:!0});var VA=l(ro);Qu=r(VA,"SPAN",{});var XA=l(Qu);c(ba.$$.fragment,XA),XA.forEach(s),VA.forEach(s),E8=h(SE),ec=r(SE,"SPAN",{});var JA=l(ec);g8=i(JA,"Slow tests"),JA.forEach(s),SE.forEach(s),Vy=h(e),Tn=r(e,"P",{});var ZA=l(Tn);b8=i(ZA,`The library of tests is ever-growing, and some of the tests take minutes to run, therefore we can\u2019t afford waiting for
an hour for the test suite to complete on CI. Therefore, with some exceptions for essential tests, slow tests should be
marked as in the example below:`),ZA.forEach(s),Xy=h(e),c(ka.$$.fragment,e),Jy=h(e),Le=r(e,"P",{});var hp=l(Le);k8=i(hp,"Once a test is marked as "),tc=r(hp,"CODE",{});var KA=l(tc);C8=i(KA,"@slow"),KA.forEach(s),j8=i(hp,", to run such tests set "),sc=r(hp,"CODE",{});var QA=l(sc);x8=i(QA,"RUN_SLOW=1"),QA.forEach(s),P8=i(hp," env var, e.g.:"),hp.forEach(s),Zy=h(e),c(Ca.$$.fragment,e),Ky=h(e),ae=r(e,"P",{});var Ao=l(ae);O8=i(Ao,"Some decorators like "),oc=r(Ao,"CODE",{});var eS=l(oc);T8=i(eS,"@parameterized"),eS.forEach(s),I8=i(Ao," rewrite test names, therefore "),rc=r(Ao,"CODE",{});var tS=l(rc);D8=i(tS,"@slow"),tS.forEach(s),A8=i(Ao,` and the rest of the skip decorators
`),lc=r(Ao,"CODE",{});var sS=l(lc);S8=i(sS,"@require_*"),sS.forEach(s),q8=i(Ao," have to be listed last for them to work correctly. Here is an example of the correct usage:"),Ao.forEach(s),Qy=h(e),c(ja.$$.fragment,e),ew=h(e),In=r(e,"P",{});var oS=l(In);L8=i(oS,`As explained at the beginning of this document, slow tests get to run on a scheduled basis, rather than in PRs CI
checks. So it\u2019s possible that some problems will be missed during a PR submission and get merged. Such problems will
get caught during the next scheduled CI job. But it also means that it\u2019s important to run the slow tests on your
machine before submitting the PR.`),oS.forEach(s),tw=h(e),Dn=r(e,"P",{});var rS=l(Dn);U8=i(rS,"Here is a rough decision making mechanism for choosing which tests should be marked as slow:"),rS.forEach(s),sw=h(e),An=r(e,"P",{});var lS=l(An);N8=i(lS,`If the test is focused on one of the library\u2019s internal components (e.g., modeling files, tokenization files,
pipelines), then we should run that test in the non-slow test suite. If it\u2019s focused on an other aspect of the library,
such as the documentation or the examples, then we should run these tests in the slow test suite. And then, to refine
this approach we should have exceptions:`),lS.forEach(s),ow=h(e),ie=r(e,"UL",{});var So=l(ie);ac=r(So,"LI",{});var aS=l(ac);H8=i(aS,`All tests that need to download a heavy set of weights or a dataset that is larger than ~50MB (e.g., model or
tokenizer integration tests, pipeline integration tests) should be set to slow. If you\u2019re adding a new model, you
should create and upload to the hub a tiny version of it (with random weights) for integration tests. This is
discussed in the following paragraphs.`),aS.forEach(s),R8=h(So),ic=r(So,"LI",{});var iS=l(ic);z8=i(iS,"All tests that need to do a training not specifically optimized to be fast should be set to slow."),iS.forEach(s),G8=h(So),Ot=r(So,"LI",{});var dp=l(Ot);F8=i(dp,`We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly slow, and set them to
`),nc=r(dp,"CODE",{});var nS=l(nc);M8=i(nS,"@slow"),nS.forEach(s),B8=i(dp,`. Auto-modeling tests, which save and load large files to disk, are a good example of tests that are marked
as `),pc=r(dp,"CODE",{});var pS=l(pc);W8=i(pS,"@slow"),pS.forEach(s),Y8=i(dp,"."),dp.forEach(s),V8=h(So),fc=r(So,"LI",{});var fS=l(fc);X8=i(fS,"If a test completes under 1 second on CI (including downloads if any) then it should be a normal test regardless."),fS.forEach(s),So.forEach(s),rw=h(e),Ue=r(e,"P",{});var up=l(Ue);J8=i(up,`Collectively, all the non-slow tests need to cover entirely the different internals, while remaining fast. For example,
a significant coverage can be achieved by testing with specially created tiny models with random weights. Such models
have the very minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `),hc=r(up,"CODE",{});var hS=l(hc);Z8=i(hS,"@slow"),hS.forEach(s),K8=i(up,` tests can use large
slow models to do qualitative testing. To see the use of these simply look for `),dc=r(up,"EM",{});var dS=l(dc);Q8=i(dS,"tiny"),dS.forEach(s),e9=i(up," models with:"),up.forEach(s),lw=h(e),c(xa.$$.fragment,e),aw=h(e),Ne=r(e,"P",{});var cp=l(Ne);t9=i(cp,"Here is a an example of a "),Pa=r(cp,"A",{href:!0,rel:!0});var uS=l(Pa);s9=i(uS,"script"),uS.forEach(s),o9=i(cp,` that created the tiny model
`),Oa=r(cp,"A",{href:!0,rel:!0});var cS=l(Oa);r9=i(cS,"stas/tiny-wmt19-en-de"),cS.forEach(s),l9=i(cp,`. You can easily adjust it to your specific
model\u2019s architecture.`),cp.forEach(s),iw=h(e),lo=r(e,"P",{});var qE=l(lo);a9=i(qE,`It\u2019s easy to measure the run-time incorrectly if for example there is an overheard of downloading a huge model, but if
you test it locally the downloaded files would be cached and thus the download time not measured. Hence check the
execution speed report in CI logs instead (the output of `),uc=r(qE,"CODE",{});var mS=l(uc);i9=i(mS,"pytest --durations=0 tests"),mS.forEach(s),n9=i(qE,")."),qE.forEach(s),nw=h(e),Sn=r(e,"P",{});var _S=l(Sn);p9=i(_S,`That report is also useful to find slow outliers that aren\u2019t marked as such, or which need to be re-written to be fast.
If you notice that the test suite starts getting slow on CI, the top listing of this report will show the slowest
tests.`),_S.forEach(s),pw=h(e),Tt=r(e,"H3",{class:!0});var LE=l(Tt);ao=r(LE,"A",{id:!0,class:!0,href:!0});var vS=l(ao);cc=r(vS,"SPAN",{});var yS=l(cc);c(Ta.$$.fragment,yS),yS.forEach(s),vS.forEach(s),f9=h(LE),mc=r(LE,"SPAN",{});var wS=l(mc);h9=i(wS,"Testing the stdout/stderr output"),wS.forEach(s),LE.forEach(s),fw=h(e),W=r(e,"P",{});var Be=l(W);d9=i(Be,"In order to test functions that write to "),_c=r(Be,"CODE",{});var $S=l(_c);u9=i($S,"stdout"),$S.forEach(s),c9=i(Be," and/or "),vc=r(Be,"CODE",{});var ES=l(vc);m9=i(ES,"stderr"),ES.forEach(s),_9=i(Be,`, the test can access those streams using the
`),yc=r(Be,"CODE",{});var gS=l(yc);v9=i(gS,"pytest"),gS.forEach(s),y9=i(Be,"\u2019s "),Ia=r(Be,"A",{href:!0,rel:!0});var bS=l(Ia);w9=i(bS,"capsys system"),bS.forEach(s),$9=i(Be,". Here is how this is accomplished:"),Be.forEach(s),hw=h(e),c(Da.$$.fragment,e),dw=h(e),io=r(e,"P",{});var UE=l(io);E9=i(UE,"And, of course, most of the time, "),wc=r(UE,"CODE",{});var kS=l(wc);g9=i(kS,"stderr"),kS.forEach(s),b9=i(UE,` will come as a part of an exception, so try/except has to be used in such
a case:`),UE.forEach(s),uw=h(e),c(Aa.$$.fragment,e),cw=h(e),no=r(e,"P",{});var NE=l(no);k9=i(NE,"Another approach to capturing stdout is via "),$c=r(NE,"CODE",{});var CS=l($c);C9=i(CS,"contextlib.redirect_stdout"),CS.forEach(s),j9=i(NE,":"),NE.forEach(s),mw=h(e),c(Sa.$$.fragment,e),_w=h(e),O=r(e,"P",{});var V=l(O);x9=i(V,"An important potential issue with capturing stdout is that it may contain "),Ec=r(V,"CODE",{});var jS=l(Ec);P9=i(jS,"\\r"),jS.forEach(s),O9=i(V," characters that in normal "),gc=r(V,"CODE",{});var xS=l(gc);T9=i(xS,"print"),xS.forEach(s),I9=i(V,`
reset everything that has been printed so far. There is no problem with `),bc=r(V,"CODE",{});var PS=l(bc);D9=i(PS,"pytest"),PS.forEach(s),A9=i(V,", but with "),kc=r(V,"CODE",{});var OS=l(kc);S9=i(OS,"pytest -s"),OS.forEach(s),q9=i(V,` these
characters get included in the buffer, so to be able to have the test run with and without `),Cc=r(V,"CODE",{});var TS=l(Cc);L9=i(TS,"-s"),TS.forEach(s),U9=i(V,`, you have to make an
extra cleanup to the captured output, using `),jc=r(V,"CODE",{});var IS=l(jc);N9=i(IS,"re.sub(r'~.*\\r', '', buf, 0, re.M)"),IS.forEach(s),H9=i(V,"."),V.forEach(s),vw=h(e),po=r(e,"P",{});var HE=l(po);R9=i(HE,`But, then we have a helper context manager wrapper to automatically take care of it all, regardless of whether it has
some `),xc=r(HE,"CODE",{});var DS=l(xc);z9=i(DS,"\\r"),DS.forEach(s),G9=i(HE,"\u2019s in it or not, so it\u2019s a simple:"),HE.forEach(s),yw=h(e),c(qa.$$.fragment,e),ww=h(e),qn=r(e,"P",{});var AS=l(qn);F9=i(AS,"Here is a full test example:"),AS.forEach(s),$w=h(e),c(La.$$.fragment,e),Ew=h(e),He=r(e,"P",{});var mp=l(He);M9=i(mp,"If you\u2019d like to capture "),Pc=r(mp,"CODE",{});var SS=l(Pc);B9=i(SS,"stderr"),SS.forEach(s),W9=i(mp," use the "),Oc=r(mp,"CODE",{});var qS=l(Oc);Y9=i(qS,"CaptureStderr"),qS.forEach(s),V9=i(mp," class instead:"),mp.forEach(s),gw=h(e),c(Ua.$$.fragment,e),bw=h(e),fo=r(e,"P",{});var RE=l(fo);X9=i(RE,"If you need to capture both streams at once, use the parent "),Tc=r(RE,"CODE",{});var LS=l(Tc);J9=i(LS,"CaptureStd"),LS.forEach(s),Z9=i(RE," class:"),RE.forEach(s),kw=h(e),c(Na.$$.fragment,e),Cw=h(e),Ln=r(e,"P",{});var US=l(Ln);K9=i(US,`Also, to aid debugging test issues, by default these context managers automatically replay the captured streams on exit
from the context.`),US.forEach(s),jw=h(e),It=r(e,"H3",{class:!0});var zE=l(It);ho=r(zE,"A",{id:!0,class:!0,href:!0});var NS=l(ho);Ic=r(NS,"SPAN",{});var HS=l(Ic);c(Ha.$$.fragment,HS),HS.forEach(s),NS.forEach(s),Q9=h(zE),Dc=r(zE,"SPAN",{});var RS=l(Dc);eC=i(RS,"Capturing logger stream"),RS.forEach(s),zE.forEach(s),xw=h(e),uo=r(e,"P",{});var GE=l(uo);tC=i(GE,"If you need to validate the output of a logger, you can use "),Ac=r(GE,"CODE",{});var zS=l(Ac);sC=i(zS,"CaptureLogger"),zS.forEach(s),oC=i(GE,":"),GE.forEach(s),Pw=h(e),c(Ra.$$.fragment,e),Ow=h(e),Dt=r(e,"H3",{class:!0});var FE=l(Dt);co=r(FE,"A",{id:!0,class:!0,href:!0});var GS=l(co);Sc=r(GS,"SPAN",{});var FS=l(Sc);c(za.$$.fragment,FS),FS.forEach(s),GS.forEach(s),rC=h(FE),qc=r(FE,"SPAN",{});var MS=l(qc);lC=i(MS,"Testing with environment variables"),MS.forEach(s),FE.forEach(s),Tw=h(e),Ga=r(e,"P",{});var ax=l(Ga);aC=i(ax,`If you want to test the impact of environment variables for a specific test you can use a helper decorator
`),Lc=r(ax,"CODE",{});var BS=l(Lc);iC=i(BS,"transformers.testing_utils.mockenv"),BS.forEach(s),ax.forEach(s),Iw=h(e),c(Fa.$$.fragment,e),Dw=h(e),ne=r(e,"P",{});var qo=l(ne);nC=i(qo,"At times an external program needs to be called, which requires setting "),Uc=r(qo,"CODE",{});var WS=l(Uc);pC=i(WS,"PYTHONPATH"),WS.forEach(s),fC=i(qo," in "),Nc=r(qo,"CODE",{});var YS=l(Nc);hC=i(YS,"os.environ"),YS.forEach(s),dC=i(qo,` to include
multiple local paths. A helper class `),Hc=r(qo,"CODE",{});var VS=l(Hc);uC=i(VS,"transformers.test_utils.TestCasePlus"),VS.forEach(s),cC=i(qo," comes to help:"),qo.forEach(s),Aw=h(e),c(Ma.$$.fragment,e),Sw=h(e),L=r(e,"P",{});var ce=l(L);mC=i(ce,"Depending on whether the test file was under the "),Rc=r(ce,"CODE",{});var XS=l(Rc);_C=i(XS,"tests"),XS.forEach(s),vC=i(ce," test suite or "),zc=r(ce,"CODE",{});var JS=l(zc);yC=i(JS,"examples"),JS.forEach(s),wC=i(ce,` it\u2019ll correctly set up
`),Gc=r(ce,"CODE",{});var ZS=l(Gc);$C=i(ZS,"env[PYTHONPATH]"),ZS.forEach(s),EC=i(ce," to include one of these two directories, and also the "),Fc=r(ce,"CODE",{});var KS=l(Fc);gC=i(KS,"src"),KS.forEach(s),bC=i(ce,` directory to ensure the testing is
done against the current repo, and finally with whatever `),Mc=r(ce,"CODE",{});var QS=l(Mc);kC=i(QS,"env[PYTHONPATH]"),QS.forEach(s),CC=i(ce,` was already set to before the test was
called if anything.`),ce.forEach(s),qw=h(e),mo=r(e,"P",{});var ME=l(mo);jC=i(ME,"This helper method creates a copy of the "),Bc=r(ME,"CODE",{});var eq=l(Bc);xC=i(eq,"os.environ"),eq.forEach(s),PC=i(ME," object, so the original remains intact."),ME.forEach(s),Lw=h(e),At=r(e,"H3",{class:!0});var BE=l(At);_o=r(BE,"A",{id:!0,class:!0,href:!0});var tq=l(_o);Wc=r(tq,"SPAN",{});var sq=l(Wc);c(Ba.$$.fragment,sq),sq.forEach(s),tq.forEach(s),OC=h(BE),Yc=r(BE,"SPAN",{});var oq=l(Yc);TC=i(oq,"Getting reproducible results"),oq.forEach(s),BE.forEach(s),Uw=h(e),Un=r(e,"P",{});var rq=l(Un);IC=i(rq,`In some situations you may want to remove randomness for your tests. To get identical reproducable results set, you
will need to fix the seed:`),rq.forEach(s),Nw=h(e),c(Wa.$$.fragment,e),Hw=h(e),St=r(e,"H3",{class:!0});var WE=l(St);vo=r(WE,"A",{id:!0,class:!0,href:!0});var lq=l(vo);Vc=r(lq,"SPAN",{});var aq=l(Vc);c(Ya.$$.fragment,aq),aq.forEach(s),lq.forEach(s),DC=h(WE),Xc=r(WE,"SPAN",{});var iq=l(Xc);AC=i(iq,"Debugging tests"),iq.forEach(s),WE.forEach(s),Rw=h(e),Nn=r(e,"P",{});var nq=l(Nn);SC=i(nq,"To start a debugger at the point of the warning, do this:"),nq.forEach(s),zw=h(e),c(Va.$$.fragment,e),Gw=h(e),qt=r(e,"H2",{class:!0});var YE=l(qt);yo=r(YE,"A",{id:!0,class:!0,href:!0});var pq=l(yo);Jc=r(pq,"SPAN",{});var fq=l(Jc);c(Xa.$$.fragment,fq),fq.forEach(s),pq.forEach(s),qC=h(YE),Zc=r(YE,"SPAN",{});var hq=l(Zc);LC=i(hq,"Working with github actions workflows"),hq.forEach(s),YE.forEach(s),Fw=h(e),Hn=r(e,"P",{});var dq=l(Hn);UC=i(dq,"To trigger a self-push workflow CI job, you must:"),dq.forEach(s),Mw=h(e),pe=r(e,"OL",{});var Lo=l(pe);Ja=r(Lo,"LI",{});var VE=l(Ja);NC=i(VE,"Create a new branch on "),Kc=r(VE,"CODE",{});var uq=l(Kc);HC=i(uq,"transformers"),uq.forEach(s),RC=i(VE," origin (not a fork!)."),VE.forEach(s),zC=h(Lo),U=r(Lo,"LI",{});var Z=l(U);GC=i(Z,"The branch name has to start with either "),Qc=r(Z,"CODE",{});var cq=l(Qc);FC=i(cq,"ci_"),cq.forEach(s),MC=i(Z," or "),em=r(Z,"CODE",{});var mq=l(em);BC=i(mq,"ci-"),mq.forEach(s),WC=i(Z," ("),tm=r(Z,"CODE",{});var _q=l(tm);YC=i(_q,"master"),_q.forEach(s),VC=i(Z,` triggers it too, but we can\u2019t do PRs on
`),sm=r(Z,"CODE",{});var vq=l(sm);XC=i(vq,"master"),vq.forEach(s),JC=i(Z,`). It also gets triggered only for specific paths - you can find the up-to-date definition in case it
changed since this document has been written `),Za=r(Z,"A",{href:!0,rel:!0});var yq=l(Za);ZC=i(yq,"here"),yq.forEach(s),KC=i(Z," under "),om=r(Z,"EM",{});var wq=l(om);QC=i(wq,"push:"),wq.forEach(s),Z.forEach(s),ej=h(Lo),rm=r(Lo,"LI",{});var $q=l(rm);tj=i($q,"Create a PR from this branch."),$q.forEach(s),sj=h(Lo),Ka=r(Lo,"LI",{});var XE=l(Ka);oj=i(XE,"Then you can see the job appear "),Qa=r(XE,"A",{href:!0,rel:!0});var Eq=l(Qa);rj=i(Eq,"here"),Eq.forEach(s),lj=i(XE,`. It may not run right away if there
is a backlog.`),XE.forEach(s),Lo.forEach(s),Bw=h(e),Lt=r(e,"H2",{class:!0});var JE=l(Lt);wo=r(JE,"A",{id:!0,class:!0,href:!0});var gq=l(wo);lm=r(gq,"SPAN",{});var bq=l(lm);c(ei.$$.fragment,bq),bq.forEach(s),gq.forEach(s),aj=h(JE),am=r(JE,"SPAN",{});var kq=l(am);ij=i(kq,"Testing Experimental CI Features"),kq.forEach(s),JE.forEach(s),Ww=h(e),Rn=r(e,"P",{});var Cq=l(Rn);nj=i(Cq,`Testing CI features can be potentially problematic as it can interfere with the normal CI functioning. Therefore if a
new CI feature is to be added, it should be done as following.`),Cq.forEach(s),Yw=h(e),fe=r(e,"OL",{});var Uo=l(fe);im=r(Uo,"LI",{});var jq=l(im);pj=i(jq,"Create a new dedicated job that tests what needs to be tested"),jq.forEach(s),fj=h(Uo),nm=r(Uo,"LI",{});var xq=l(nm);hj=i(xq,"The new job must always succeed so that it gives us a green \u2713 (details below)."),xq.forEach(s),dj=h(Uo),pm=r(Uo,"LI",{});var Pq=l(pm);uj=i(Pq,`Let it run for some days to see that a variety of different PR types get to run on it (user fork branches,
non-forked branches, branches originating from github.com UI direct file edit, various forced pushes, etc. - there
are so many) while monitoring the experimental job\u2019s logs (not the overall job green as it\u2019s purposefully always
green)`),Pq.forEach(s),cj=h(Uo),fm=r(Uo,"LI",{});var Oq=l(fm);mj=i(Oq,"When it\u2019s clear that everything is solid, then merge the new changes into existing jobs."),Oq.forEach(s),Uo.forEach(s),Vw=h(e),zn=r(e,"P",{});var Tq=l(zn);_j=i(Tq,"That way experiments on CI functionality itself won\u2019t interfere with the normal workflow."),Tq.forEach(s),Xw=h(e),Gn=r(e,"P",{});var Iq=l(Gn);vj=i(Iq,"Now how can we make the job always succeed while the new CI feature is being developed?"),Iq.forEach(s),Jw=h(e),Fn=r(e,"P",{});var Dq=l(Fn);yj=i(Dq,`Some CIs, like TravisCI support ignore-step-failure and will report the overall job as successful, but CircleCI and
Github Actions as of this writing don\u2019t support that.`),Dq.forEach(s),Zw=h(e),Mn=r(e,"P",{});var Aq=l(Mn);wj=i(Aq,"So the following workaround can be used:"),Aq.forEach(s),Kw=h(e),$o=r(e,"OL",{});var ZE=l($o);Bn=r(ZE,"LI",{});var ix=l(Bn);hm=r(ix,"CODE",{});var Sq=l(hm);$j=i(Sq,"set +euo pipefail"),Sq.forEach(s),Ej=i(ix," at the beginning of the run command to suppress most potential failures in the bash script."),ix.forEach(s),gj=h(ZE),Ut=r(ZE,"LI",{});var _p=l(Ut);bj=i(_p,"the last command must be a success: "),dm=r(_p,"CODE",{});var qq=l(dm);kj=i(qq,'echo "done"'),qq.forEach(s),Cj=i(_p," or just "),um=r(_p,"CODE",{});var Lq=l(um);jj=i(Lq,"true"),Lq.forEach(s),xj=i(_p," will do"),_p.forEach(s),ZE.forEach(s),Qw=h(e),Wn=r(e,"P",{});var Uq=l(Wn);Pj=i(Uq,"Here is an example:"),Uq.forEach(s),e$=h(e),c(ti.$$.fragment,e),t$=h(e),Yn=r(e,"P",{});var Nq=l(Yn);Oj=i(Nq,"For simple commands you could also do:"),Nq.forEach(s),s$=h(e),c(si.$$.fragment,e),o$=h(e),Eo=r(e,"P",{});var KE=l(Eo);Tj=i(KE,`Of course, once satisfied with the results, integrate the experimental step or job with the rest of the normal jobs,
while removing `),cm=r(KE,"CODE",{});var Hq=l(cm);Ij=i(Hq,"set +euo pipefail"),Hq.forEach(s),Dj=i(KE,` or any other things you may have added to ensure that the experimental job doesn\u2019t
interfere with the normal CI functioning.`),KE.forEach(s),r$=h(e),go=r(e,"P",{});var QE=l(go);Aj=i(QE,"This whole process would have been much easier if we only could set something like "),mm=r(QE,"CODE",{});var Rq=l(mm);Sj=i(Rq,"allow-failure"),Rq.forEach(s),qj=i(QE,` for the
experimental step, and let it fail without impacting the overall status of PRs. But as mentioned earlier CircleCI and
Github Actions don\u2019t support it at the moment.`),QE.forEach(s),l$=h(e),Vn=r(e,"P",{});var zq=l(Vn);Lj=i(zq,"You can vote for this feature and see where it is at at these CI-specific threads:"),zq.forEach(s),a$=h(e),bo=r(e,"UL",{});var eg=l(bo);_m=r(eg,"LI",{});var Gq=l(_m);oi=r(Gq,"A",{href:!0,rel:!0});var Fq=l(oi);Uj=i(Fq,"Github Actions:"),Fq.forEach(s),Gq.forEach(s),Nj=h(eg),vm=r(eg,"LI",{});var Mq=l(vm);ri=r(Mq,"A",{href:!0,rel:!0});var Bq=l(ri);Hj=i(Bq,"CircleCI:"),Bq.forEach(s),Mq.forEach(s),eg.forEach(s),this.h()},h(){d($,"name","hf:doc:metadata"),d($,"content",JSON.stringify(tL)),d(b,"id","testing"),d(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b,"href","#testing"),d(g,"class","relative group"),d(Rt,"id","how-transformers-are-tested"),d(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rt,"href","#how-transformers-are-tested"),d(Ve,"class","relative group"),d(zo,"href","https://github.com/huggingface/transformers/tree/master/.circleci/config.yml"),d(zo,"rel","nofollow"),d(Bo,"href","https://github.com/huggingface/transformers/actions"),d(Bo,"rel","nofollow"),d(Wo,"href","https://github.com/huggingface/transformers/tree/master/.github/workflows/github-torch-hub.yml"),d(Wo,"rel","nofollow"),d(Yo,"href","https://github.com/huggingface/transformers/tree/master/.github/workflows/self-push.yml"),d(Yo,"rel","nofollow"),d(Vo,"href","https://github.com/huggingface/transformers/tree/master/.github/workflows/self-scheduled.yml"),d(Vo,"rel","nofollow"),d(Jo,"href","https://github.com/huggingface/transformers/actions"),d(Jo,"rel","nofollow"),d(Ft,"id","running-tests"),d(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ft,"href","#running-tests"),d(Je,"class","relative group"),d(Mt,"id","choosing-which-tests-to-run"),d(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mt,"href","#choosing-which-tests-to-run"),d(Ze,"class","relative group"),d(Qo,"href","https://docs.pytest.org/en/latest/usage.html"),d(Qo,"rel","nofollow"),d(Wt,"id","getting-the-list-of-all-tests"),d(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wt,"href","#getting-the-list-of-all-tests"),d(Ke,"class","relative group"),d(Yt,"id","run-a-specific-test-module"),d(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yt,"href","#run-a-specific-test-module"),d(Qe,"class","relative group"),d(Vt,"id","run-specific-tests"),d(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vt,"href","#run-specific-tests"),d(et,"class","relative group"),d(es,"id","run-only-modified-tests"),d(es,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(es,"href","#run-only-modified-tests"),d(tt,"class","relative group"),d(yr,"href","https://github.com/anapaulagomes/pytest-picked"),d(yr,"rel","nofollow"),d(ss,"id","automatically-rerun-failed-tests-on-source-modification"),d(ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ss,"href","#automatically-rerun-failed-tests-on-source-modification"),d(st,"class","relative group"),d(br,"href","https://github.com/pytest-dev/pytest-xdist"),d(br,"rel","nofollow"),d(Pr,"href","https://github.com/joeyespo/pytest-watch"),d(Pr,"rel","nofollow"),d(os,"id","skip-a-test-module"),d(os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(os,"href","#skip-a-test-module"),d(rt,"class","relative group"),d(ls,"id","clearing-state"),d(ls,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ls,"href","#clearing-state"),d(lt,"class","relative group"),d(as,"id","running-tests-in-parallel"),d(as,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(as,"href","#running-tests-in-parallel"),d(at,"class","relative group"),d(Sr,"href","https://github.com/ESSS/pytest-replay"),d(Sr,"rel","nofollow"),d(is,"id","test-order-and-repetition"),d(is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(is,"href","#test-order-and-repetition"),d(it,"class","relative group"),d(ns,"id","repeat-tests"),d(ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ns,"href","#repeat-tests"),d(nt,"class","relative group"),d(Ur,"href","https://github.com/dropbox/pytest-flakefinder"),d(Ur,"rel","nofollow"),d(hs,"id","run-tests-in-a-random-order"),d(hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hs,"href","#run-tests-in-a-random-order"),d(pt,"class","relative group"),d(Wr,"href","https://github.com/jbasko/pytest-random-order"),d(Wr,"rel","nofollow"),d(Yr,"href","https://github.com/pytest-dev/pytest-randomly%3E%60"),d(Yr,"rel","nofollow"),d(ms,"id","look-and-feel-variations"),d(ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ms,"href","#look-and-feel-variations"),d(ft,"class","relative group"),d(_s,"id","pytestsugar"),d(_s,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_s,"href","#pytestsugar"),d(ht,"class","relative group"),d(Zr,"href","https://github.com/Frozenball/pytest-sugar"),d(Zr,"rel","nofollow"),d(vs,"id","report-each-subtest-name-and-its-progress"),d(vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vs,"href","#report-each-subtest-name-and-its-progress"),d(dt,"class","relative group"),d(ys,"id","instantly-shows-failed-tests"),d(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ys,"href","#instantly-shows-failed-tests"),d(ut,"class","relative group"),d(rl,"href","https://github.com/pytest-dev/pytest-instafail"),d(rl,"rel","nofollow"),d(ws,"id","to-gpu-or-not-to-gpu"),d(ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ws,"href","#to-gpu-or-not-to-gpu"),d(ct,"class","relative group"),d(Ps,"id","distributed-training"),d(Ps,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ps,"href","#distributed-training"),d(mt,"class","relative group"),d(gl,"href","https://github.com/huggingface/transformers/tree/master/tests/test_trainer_distributed.py"),d(gl,"rel","nofollow"),d(bl,"href","https://github.com/huggingface/transformers/tree/master/tests/deepspeed/test_deepspeed.py"),d(bl,"rel","nofollow"),d(Is,"id","output-capture"),d(Is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Is,"href","#output-capture"),d(vt,"class","relative group"),d(Ds,"id","color-control"),d(Ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ds,"href","#color-control"),d(yt,"class","relative group"),d(As,"id","sending-test-report-to-online-pastebin-service"),d(As,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(As,"href","#sending-test-report-to-online-pastebin-service"),d(wt,"class","relative group"),d(Ss,"id","writing-tests"),d(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ss,"href","#writing-tests"),d($t,"class","relative group"),d(Sl,"href","https://docs.pytest.org/en/stable/unittest.html"),d(Sl,"rel","nofollow"),d(qs,"id","parametrization"),d(qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qs,"href","#parametrization"),d(Et,"class","relative group"),d(Gl,"href","https://pypi.org/project/parameterized/"),d(Gl,"rel","nofollow"),d(Hs,"id","files-and-directories"),d(Hs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hs,"href","#files-and-directories"),d(gt,"class","relative group"),d(Bs,"id","temporary-files-and-directories"),d(Bs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bs,"href","#temporary-files-and-directories"),d(bt,"class","relative group"),d(Js,"id","temporary-syspath-override"),d(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Js,"href","#temporary-syspath-override"),d(Ct,"class","relative group"),d(Zs,"id","skipping-tests"),d(Zs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zs,"href","#skipping-tests"),d(jt,"class","relative group"),d(eo,"id","implementation"),d(eo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eo,"href","#implementation"),d(xt,"class","relative group"),d(ga,"href","https://docs.pytest.org/en/latest/skipping.html"),d(ga,"rel","nofollow"),d(ro,"id","slow-tests"),d(ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ro,"href","#slow-tests"),d(Pt,"class","relative group"),d(Pa,"href","https://github.com/huggingface/transformers/tree/master/scripts/fsmt/fsmt-make-tiny-model.py"),d(Pa,"rel","nofollow"),d(Oa,"href","https://huggingface.co/stas/tiny-wmt19-en-de"),d(Oa,"rel","nofollow"),d(ao,"id","testing-the-stdoutstderr-output"),d(ao,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ao,"href","#testing-the-stdoutstderr-output"),d(Tt,"class","relative group"),d(Ia,"href","https://docs.pytest.org/en/latest/capture.html"),d(Ia,"rel","nofollow"),d(ho,"id","capturing-logger-stream"),d(ho,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ho,"href","#capturing-logger-stream"),d(It,"class","relative group"),d(co,"id","testing-with-environment-variables"),d(co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(co,"href","#testing-with-environment-variables"),d(Dt,"class","relative group"),d(_o,"id","getting-reproducible-results"),d(_o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_o,"href","#getting-reproducible-results"),d(At,"class","relative group"),d(vo,"id","debugging-tests"),d(vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vo,"href","#debugging-tests"),d(St,"class","relative group"),d(yo,"id","working-with-github-actions-workflows"),d(yo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yo,"href","#working-with-github-actions-workflows"),d(qt,"class","relative group"),d(Za,"href","https://github.com/huggingface/transformers/blob/master/.github/workflows/self-push.yml"),d(Za,"rel","nofollow"),d(Qa,"href","https://github.com/huggingface/transformers/actions/workflows/self-push.yml"),d(Qa,"rel","nofollow"),d(wo,"id","testing-experimental-ci-features"),d(wo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wo,"href","#testing-experimental-ci-features"),d(Lt,"class","relative group"),d(oi,"href","https://github.com/actions/toolkit/issues/399"),d(oi,"rel","nofollow"),d(ri,"href","https://ideas.circleci.com/ideas/CCI-I-344"),d(ri,"rel","nofollow")},m(e,n){t(document.head,$),p(e,j,n),p(e,g,n),t(g,b),t(b,T),m(C,T,null),t(g,N),t(g,I),t(I,x),p(e,k,n),p(e,A,n),t(A,H),p(e,Nt,n),p(e,we,n),t(we,We),p(e,D,n),p(e,_e,n),t(_e,Ye),t(Ye,Ht),t(Ht,pi),t(Ye,sg),t(_e,og),t(_e,fi),t(fi,vp),t(vp,rg),t(fi,lg),p(e,Tm,n),p(e,Ve,n),t(Ve,Rt),t(Rt,yp),m(No,yp,null),t(Ve,ag),t(Ve,wp),t(wp,ig),p(e,Im,n),p(e,zt,n),t(zt,Ho),t(Ho,Ro),t(Ro,ng),t(Ro,zo),t(zo,pg),t(Ro,fg),t(Ho,hg),t(Ho,Go),t(Go,dg),t(Go,$p),t($p,ug),t(Go,cg),t(zt,mg),t(zt,Fo),t(Fo,Mo),t(Mo,_g),t(Mo,Bo),t(Bo,vg),t(Mo,yg),t(Fo,wg),t(Fo,Xe),t(Xe,Ep),t(Ep,hi),t(hi,Wo),t(Wo,$g),t(hi,Eg),t(Xe,gg),t(Xe,gp),t(gp,S),t(S,Yo),t(Yo,bg),t(S,kg),t(S,bp),t(bp,Cg),t(S,jg),t(S,kp),t(kp,xg),t(S,Pg),t(S,Cp),t(Cp,Og),t(S,Tg),t(S,jp),t(jp,Ig),t(S,Dg),t(S,xp),t(xp,Ag),t(S,Sg),t(Xe,qg),t(Xe,Pp),t(Pp,$e),t($e,Vo),t(Vo,Lg),t($e,Ug),t($e,Op),t(Op,Ng),t($e,Hg),t($e,Tp),t(Tp,Rg),t($e,zg),p(e,Dm,n),m(Xo,e,n),p(e,Am,n),p(e,Gt,n),t(Gt,Gg),t(Gt,Jo),t(Jo,Fg),t(Gt,Mg),p(e,Sm,n),p(e,Je,n),t(Je,Ft),t(Ft,Ip),m(Zo,Ip,null),t(Je,Bg),t(Je,Dp),t(Dp,Wg),p(e,qm,n),p(e,Ze,n),t(Ze,Mt),t(Mt,Ap),m(Ko,Ap,null),t(Ze,Yg),t(Ze,Sp),t(Sp,Vg),p(e,Lm,n),p(e,Bt,n),t(Bt,Xg),t(Bt,Qo),t(Qo,Jg),t(Bt,Zg),p(e,Um,n),p(e,di,n),t(di,Kg),p(e,Nm,n),p(e,ui,n),t(ui,Qg),p(e,Hm,n),m(er,e,n),p(e,Rm,n),p(e,ci,n),t(ci,eb),p(e,zm,n),m(tr,e,n),p(e,Gm,n),p(e,mi,n),t(mi,tb),p(e,Fm,n),m(sr,e,n),p(e,Mm,n),p(e,_i,n),t(_i,sb),p(e,Bm,n),p(e,K,n),t(K,qp),t(qp,ob),t(K,rb),t(K,Lp),t(Lp,lb),t(K,ab),t(K,Up),t(Up,ib),t(K,nb),t(K,Np),t(Np,pb),p(e,Wm,n),p(e,Ke,n),t(Ke,Wt),t(Wt,Hp),m(or,Hp,null),t(Ke,fb),t(Ke,Rp),t(Rp,hb),p(e,Ym,n),p(e,vi,n),t(vi,db),p(e,Vm,n),m(rr,e,n),p(e,Xm,n),p(e,yi,n),t(yi,ub),p(e,Jm,n),m(lr,e,n),p(e,Zm,n),p(e,Qe,n),t(Qe,Yt),t(Yt,zp),m(ar,zp,null),t(Qe,cb),t(Qe,Gp),t(Gp,mb),p(e,Km,n),p(e,wi,n),t(wi,_b),p(e,Qm,n),m(ir,e,n),p(e,e_,n),p(e,et,n),t(et,Vt),t(Vt,Fp),m(nr,Fp,null),t(et,vb),t(et,Mp),t(Mp,yb),p(e,t_,n),p(e,$i,n),t($i,wb),p(e,s_,n),m(pr,e,n),p(e,o_,n),p(e,Ei,n),t(Ei,$b),p(e,r_,n),p(e,Ee,n),t(Ee,gi),t(gi,Bp),t(Bp,Eb),t(gi,gb),t(Ee,bb),t(Ee,bi),t(bi,Wp),t(Wp,kb),t(bi,Cb),t(Ee,jb),t(Ee,ki),t(ki,Yp),t(Yp,xb),t(ki,Pb),p(e,l_,n),p(e,Ci,n),t(Ci,Ob),p(e,a_,n),m(fr,e,n),p(e,i_,n),p(e,ji,n),t(ji,Tb),p(e,n_,n),p(e,Xt,n),t(Xt,Ib),t(Xt,Vp),t(Vp,Db),t(Xt,Ab),p(e,p_,n),m(hr,e,n),p(e,f_,n),p(e,xi,n),t(xi,Sb),p(e,h_,n),p(e,Jt,n),t(Jt,qb),t(Jt,Xp),t(Xp,Lb),t(Jt,Ub),p(e,d_,n),m(dr,e,n),p(e,u_,n),p(e,Q,n),t(Q,Nb),t(Q,Jp),t(Jp,Hb),t(Q,Rb),t(Q,Zp),t(Zp,zb),t(Q,Gb),t(Q,Kp),t(Kp,Fb),t(Q,Mb),p(e,c_,n),p(e,Zt,n),t(Zt,Bb),t(Zt,Qp),t(Qp,Wb),t(Zt,Yb),p(e,m_,n),m(ur,e,n),p(e,__,n),p(e,Pi,n),t(Pi,Vb),p(e,v_,n),m(cr,e,n),p(e,y_,n),p(e,ge,n),t(ge,Xb),t(ge,ef),t(ef,Jb),t(ge,Zb),t(ge,tf),t(tf,Kb),t(ge,Qb),p(e,w_,n),m(mr,e,n),p(e,$_,n),p(e,Kt,n),t(Kt,e3),t(Kt,sf),t(sf,t3),t(Kt,s3),p(e,E_,n),p(e,Qt,n),t(Qt,o3),t(Qt,of),t(of,r3),t(Qt,l3),p(e,g_,n),m(_r,e,n),p(e,b_,n),p(e,tt,n),t(tt,es),t(es,rf),m(vr,rf,null),t(tt,a3),t(tt,lf),t(lf,i3),p(e,k_,n),p(e,ts,n),t(ts,n3),t(ts,yr),t(yr,p3),t(ts,f3),p(e,C_,n),m(wr,e,n),p(e,j_,n),m($r,e,n),p(e,x_,n),p(e,Oi,n),t(Oi,h3),p(e,P_,n),p(e,st,n),t(st,ss),t(ss,af),m(Er,af,null),t(st,d3),t(st,nf),t(nf,u3),p(e,O_,n),p(e,gr,n),t(gr,br),t(br,c3),t(gr,m3),p(e,T_,n),m(kr,e,n),p(e,I_,n),p(e,ot,n),t(ot,_3),t(ot,pf),t(pf,v3),t(ot,y3),t(ot,ff),t(ff,w3),p(e,D_,n),p(e,be,n),t(be,$3),t(be,hf),t(hf,E3),t(be,g3),t(be,df),t(df,b3),t(be,k3),p(e,A_,n),m(Cr,e,n),p(e,S_,n),p(e,ke,n),t(ke,C3),t(ke,uf),t(uf,j3),t(ke,x3),t(ke,cf),t(cf,P3),t(ke,O3),p(e,q_,n),m(jr,e,n),p(e,L_,n),p(e,Ti,n),t(Ti,T3),p(e,U_,n),p(e,xr,n),t(xr,Pr),t(Pr,I3),t(xr,D3),p(e,N_,n),p(e,rt,n),t(rt,os),t(os,mf),m(Or,mf,null),t(rt,A3),t(rt,_f),t(_f,S3),p(e,H_,n),p(e,rs,n),t(rs,q3),t(rs,vf),t(vf,L3),t(rs,U3),p(e,R_,n),m(Tr,e,n),p(e,z_,n),p(e,lt,n),t(lt,ls),t(ls,yf),m(Ir,yf,null),t(lt,N3),t(lt,wf),t(wf,H3),p(e,G_,n),p(e,Ii,n),t(Ii,R3),p(e,F_,n),m(Dr,e,n),p(e,M_,n),p(e,at,n),t(at,as),t(as,$f),m(Ar,$f,null),t(at,z3),t(at,Ef),t(Ef,G3),p(e,B_,n),p(e,G,n),t(G,F3),t(G,gf),t(gf,M3),t(G,B3),t(G,bf),t(bf,W3),t(G,Y3),t(G,kf),t(kf,V3),t(G,X3),t(G,Cf),t(Cf,J3),t(G,Z3),p(e,W_,n),p(e,ve,n),t(ve,jf),t(jf,K3),t(ve,Q3),t(ve,xf),t(xf,e2),t(ve,t2),t(ve,Pf),t(Pf,s2),t(ve,o2),p(e,Y_,n),p(e,Ce,n),t(Ce,r2),t(Ce,Of),t(Of,l2),t(Ce,a2),t(Ce,Sr),t(Sr,i2),t(Ce,n2),p(e,V_,n),p(e,it,n),t(it,is),t(is,Tf),m(qr,Tf,null),t(it,p2),t(it,If),t(If,f2),p(e,X_,n),p(e,Di,n),t(Di,h2),p(e,J_,n),p(e,nt,n),t(nt,ns),t(ns,Df),m(Lr,Df,null),t(nt,d2),t(nt,Af),t(Af,u2),p(e,Z_,n),p(e,Ai,n),t(Ai,Si),t(Si,Ur),t(Ur,c2),t(Si,m2),p(e,K_,n),m(Nr,e,n),p(e,Q_,n),p(e,qi,n),t(qi,_2),p(e,ev,n),m(Hr,e,n),p(e,tv,n),m(ps,e,n),p(e,sv,n),m(fs,e,n),p(e,ov,n),p(e,pt,n),t(pt,hs),t(hs,Sf),m(Rr,Sf,null),t(pt,v2),t(pt,qf),t(qf,y2),p(e,rv,n),m(zr,e,n),p(e,lv,n),p(e,ds,n),t(ds,w2),t(ds,Lf),t(Lf,$2),t(ds,E2),p(e,av,n),p(e,us,n),t(us,g2),t(us,Uf),t(Uf,b2),t(us,k2),p(e,iv,n),m(Gr,e,n),p(e,nv,n),p(e,Li,n),t(Li,C2),p(e,pv,n),m(Fr,e,n),p(e,fv,n),p(e,cs,n),t(cs,j2),t(cs,Nf),t(Nf,x2),t(cs,P2),p(e,hv,n),m(Mr,e,n),p(e,dv,n),p(e,Ui,n),t(Ui,O2),p(e,uv,n),m(Br,e,n),p(e,cv,n),p(e,P,n),t(P,T2),t(P,Hf),t(Hf,I2),t(P,D2),t(P,Rf),t(Rf,A2),t(P,S2),t(P,zf),t(zf,q2),t(P,L2),t(P,Gf),t(Gf,U2),t(P,N2),t(P,Ff),t(Ff,H2),t(P,R2),t(P,Wr),t(Wr,z2),t(P,G2),p(e,mv,n),p(e,ee,n),t(ee,F2),t(ee,Mf),t(Mf,M2),t(ee,B2),t(ee,Yr),t(Yr,W2),t(ee,Y2),t(ee,Bf),t(Bf,V2),t(ee,X2),p(e,_v,n),p(e,ft,n),t(ft,ms),t(ms,Wf),m(Vr,Wf,null),t(ft,J2),t(ft,Yf),t(Yf,Z2),p(e,vv,n),p(e,ht,n),t(ht,_s),t(_s,Vf),m(Xr,Vf,null),t(ht,K2),t(ht,Xf),t(Xf,Q2),p(e,yv,n),p(e,Jr,n),t(Jr,Zr),t(Zr,e5),t(Jr,t5),p(e,wv,n),m(Kr,e,n),p(e,$v,n),p(e,Ni,n),t(Ni,s5),p(e,Ev,n),m(Qr,e,n),p(e,gv,n),p(e,Hi,n),t(Hi,o5),p(e,bv,n),p(e,dt,n),t(dt,vs),t(vs,Jf),m(el,Jf,null),t(dt,r5),t(dt,Zf),t(Zf,l5),p(e,kv,n),p(e,je,n),t(je,a5),t(je,Kf),t(Kf,i5),t(je,n5),t(je,Qf),t(Qf,p5),t(je,f5),p(e,Cv,n),m(tl,e,n),p(e,jv,n),p(e,ut,n),t(ut,ys),t(ys,eh),m(sl,eh,null),t(ut,h5),t(ut,th),t(th,d5),p(e,xv,n),p(e,ol,n),t(ol,rl),t(rl,u5),t(ol,c5),p(e,Pv,n),m(ll,e,n),p(e,Ov,n),m(al,e,n),p(e,Tv,n),p(e,ct,n),t(ct,ws),t(ws,sh),m(il,sh,null),t(ct,m5),t(ct,oh),t(oh,_5),p(e,Iv,n),p(e,$s,n),t($s,v5),t($s,rh),t(rh,y5),t($s,w5),p(e,Dv,n),m(nl,e,n),p(e,Av,n),p(e,te,n),t(te,$5),t(te,lh),t(lh,E5),t(te,g5),t(te,ah),t(ah,b5),t(te,k5),t(te,ih),t(ih,C5),t(te,j5),p(e,Sv,n),m(pl,e,n),p(e,qv,n),p(e,Ri,n),t(Ri,x5),p(e,Lv,n),p(e,zi,n),t(zi,P5),p(e,Uv,n),p(e,q,n),t(q,Gi),t(Gi,nh),t(nh,O5),t(Gi,T5),t(q,I5),t(q,Es),t(Es,ph),t(ph,D5),t(Es,A5),t(Es,fh),t(fh,S5),t(Es,q5),t(q,L5),t(q,gs),t(gs,hh),t(hh,U5),t(gs,N5),t(gs,dh),t(dh,H5),t(gs,R5),t(q,z5),t(q,bs),t(bs,uh),t(uh,G5),t(bs,F5),t(bs,ch),t(ch,M5),t(bs,B5),t(q,W5),t(q,ks),t(ks,mh),t(mh,Y5),t(ks,V5),t(ks,_h),t(_h,X5),t(ks,J5),t(q,Z5),t(q,Cs),t(Cs,vh),t(vh,K5),t(Cs,Q5),t(Cs,yh),t(yh,e4),t(Cs,t4),p(e,Nv,n),p(e,Fi,n),t(Fi,s4),p(e,Hv,n),p(e,js,n),t(js,wh),t(wh,fl),t(fl,$h),t($h,o4),t(fl,r4),t(fl,Eh),t(Eh,l4),t(js,a4),t(js,X),t(X,hl),t(hl,gh),t(gh,bh),t(bh,i4),t(hl,n4),t(hl,kh),t(kh,Ch),t(Ch,p4),t(X,f4),t(X,dl),t(dl,jh),t(jh,xh),t(xh,h4),t(dl,d4),t(dl,Ph),t(Ph,Oh),t(Oh,u4),t(X,c4),t(X,ul),t(ul,Th),t(Th,Ih),t(Ih,m4),t(ul,_4),t(ul,Dh),t(Dh,Ah),t(Ah,v4),t(X,y4),t(X,cl),t(cl,Sh),t(Sh,qh),t(qh,w4),t(cl,$4),t(cl,Lh),t(Lh,Uh),t(Uh,E4),t(X,g4),t(X,ml),t(ml,Nh),t(Nh,Hh),t(Hh,b4),t(ml,k4),t(ml,Rh),t(Rh,zh),t(zh,C4),p(e,Rv,n),p(e,Mi,n),t(Mi,j4),p(e,zv,n),m(_l,e,n),p(e,Gv,n),p(e,xe,n),t(xe,x4),t(xe,Gh),t(Gh,P4),t(xe,O4),t(xe,Fh),t(Fh,T4),t(xe,I4),p(e,Fv,n),m(vl,e,n),p(e,Mv,n),p(e,Bi,n),t(Bi,D4),p(e,Bv,n),m(yl,e,n),p(e,Wv,n),p(e,Pe,n),t(Pe,A4),t(Pe,Mh),t(Mh,S4),t(Pe,q4),t(Pe,Bh),t(Bh,L4),t(Pe,U4),p(e,Yv,n),m(wl,e,n),p(e,Vv,n),p(e,xs,n),t(xs,N4),t(xs,Wh),t(Wh,H4),t(xs,R4),p(e,Xv,n),p(e,Wi,n),t(Wi,z4),p(e,Jv,n),p(e,Yi,n),t(Yi,Yh),t(Yh,G4),p(e,Zv,n),m($l,e,n),p(e,Kv,n),p(e,mt,n),t(mt,Ps),t(Ps,Vh),m(El,Vh,null),t(mt,F4),t(mt,Xh),t(Xh,M4),p(e,Qv,n),p(e,_t,n),t(_t,Jh),t(Jh,B4),t(_t,W4),t(_t,Zh),t(Zh,Y4),t(_t,V4),p(e,e1,n),p(e,Vi,n),t(Vi,X4),p(e,t1,n),p(e,Os,n),t(Os,Kh),t(Kh,gl),t(gl,J4),t(Os,Z4),t(Os,Qh),t(Qh,bl),t(bl,K4),p(e,s1,n),p(e,Ts,n),t(Ts,Q4),t(Ts,ed),t(ed,ek),t(Ts,tk),p(e,o1,n),p(e,Xi,n),t(Xi,sk),p(e,r1,n),m(kl,e,n),p(e,l1,n),p(e,vt,n),t(vt,Is),t(Is,td),m(Cl,td,null),t(vt,ok),t(vt,sd),t(sd,rk),p(e,a1,n),p(e,Oe,n),t(Oe,lk),t(Oe,od),t(od,ak),t(Oe,ik),t(Oe,rd),t(rd,nk),t(Oe,pk),p(e,i1,n),p(e,F,n),t(F,fk),t(F,ld),t(ld,hk),t(F,dk),t(F,ad),t(ad,uk),t(F,ck),t(F,id),t(id,mk),t(F,_k),t(F,nd),t(nd,vk),t(F,yk),p(e,n1,n),m(jl,e,n),p(e,p1,n),p(e,Ji,n),t(Ji,wk),p(e,f1,n),m(xl,e,n),p(e,h1,n),p(e,yt,n),t(yt,Ds),t(Ds,pd),m(Pl,pd,null),t(yt,$k),t(yt,fd),t(fd,Ek),p(e,d1,n),p(e,Zi,n),t(Zi,gk),p(e,u1,n),m(Ol,e,n),p(e,c1,n),p(e,wt,n),t(wt,As),t(As,hd),m(Tl,hd,null),t(wt,bk),t(wt,dd),t(dd,kk),p(e,m1,n),p(e,Ki,n),t(Ki,Ck),p(e,_1,n),m(Il,e,n),p(e,v1,n),p(e,Qi,n),t(Qi,jk),p(e,y1,n),p(e,en,n),t(en,xk),p(e,w1,n),m(Dl,e,n),p(e,$1,n),p(e,$t,n),t($t,Ss),t(Ss,ud),m(Al,ud,null),t($t,Pk),t($t,cd),t(cd,Ok),p(e,E1,n),p(e,Te,n),t(Te,Tk),t(Te,md),t(md,Ik),t(Te,Dk),t(Te,_d),t(_d,Ak),t(Te,Sk),p(e,g1,n),p(e,se,n),t(se,qk),t(se,Sl),t(Sl,Lk),t(se,Uk),t(se,vd),t(vd,Nk),t(se,Hk),t(se,yd),t(yd,Rk),t(se,zk),p(e,b1,n),p(e,Et,n),t(Et,qs),t(qs,wd),m(ql,wd,null),t(Et,Gk),t(Et,$d),t($d,Fk),p(e,k1,n),p(e,tn,n),t(tn,Mk),p(e,C1,n),m(Ll,e,n),p(e,j1,n),p(e,Ls,n),t(Ls,Bk),t(Ls,Ed),t(Ed,Wk),t(Ls,Yk),p(e,x1,n),p(e,Ie,n),t(Ie,Vk),t(Ie,gd),t(gd,Xk),t(Ie,Jk),t(Ie,bd),t(bd,Zk),t(Ie,Kk),p(e,P1,n),m(Ul,e,n),p(e,O1,n),p(e,Us,n),t(Us,Qk),t(Us,kd),t(kd,e0),t(Us,t0),p(e,T1,n),m(Nl,e,n),p(e,I1,n),p(e,Ns,n),t(Ns,s0),t(Ns,Cd),t(Cd,o0),t(Ns,r0),p(e,D1,n),m(Hl,e,n),p(e,A1,n),p(e,sn,n),t(sn,l0),p(e,S1,n),m(Rl,e,n),p(e,q1,n),p(e,on,n),t(on,a0),p(e,L1,n),m(zl,e,n),p(e,U1,n),p(e,M,n),t(M,i0),t(M,Gl),t(Gl,n0),t(M,p0),t(M,jd),t(jd,f0),t(M,h0),t(M,xd),t(xd,d0),t(M,u0),t(M,Pd),t(Pd,c0),t(M,m0),p(e,N1,n),p(e,oe,n),t(oe,_0),t(oe,Od),t(Od,v0),t(oe,y0),t(oe,Td),t(Td,w0),t(oe,$0),t(oe,Id),t(Id,E0),t(oe,g0),p(e,H1,n),p(e,De,n),t(De,b0),t(De,Dd),t(Dd,k0),t(De,C0),t(De,Ad),t(Ad,j0),t(De,x0),p(e,R1,n),m(Fl,e,n),p(e,z1,n),p(e,re,n),t(re,P0),t(re,Sd),t(Sd,O0),t(re,T0),t(re,qd),t(qd,I0),t(re,D0),t(re,Ld),t(Ld,A0),t(re,S0),p(e,G1,n),m(Ml,e,n),p(e,F1,n),p(e,rn,n),t(rn,q0),p(e,M1,n),m(Bl,e,n),p(e,B1,n),p(e,ln,n),t(ln,L0),p(e,W1,n),m(Wl,e,n),p(e,Y1,n),p(e,an,n),t(an,U0),p(e,V1,n),p(e,gt,n),t(gt,Hs),t(Hs,Ud),m(Yl,Ud,null),t(gt,N0),t(gt,Nd),t(Nd,H0),p(e,X1,n),p(e,Rs,n),t(Rs,R0),t(Rs,Hd),t(Hd,z0),t(Rs,G0),p(e,J1,n),p(e,zs,n),t(zs,Vl),t(Vl,nn),t(nn,Rd),t(Rd,F0),t(nn,M0),t(Vl,B0),t(Vl,R),t(R,Xl),t(Xl,zd),t(zd,W0),t(Xl,Y0),t(Xl,Gd),t(Gd,V0),t(R,X0),t(R,pn),t(pn,Fd),t(Fd,J0),t(pn,Z0),t(R,K0),t(R,Gs),t(Gs,Md),t(Md,Q0),t(Gs,e6),t(Gs,Bd),t(Bd,t6),t(Gs,s6),t(R,o6),t(R,Fs),t(Fs,Wd),t(Wd,r6),t(Fs,l6),t(Fs,Yd),t(Yd,a6),t(Fs,i6),t(R,n6),t(R,fn),t(fn,Vd),t(Vd,p6),t(fn,f6),t(R,h6),t(R,Ae),t(Ae,Xd),t(Xd,d6),t(Ae,u6),t(Ae,Jd),t(Jd,c6),t(Ae,m6),t(Ae,Zd),t(Zd,_6),t(Ae,v6),t(zs,y6),t(zs,Jl),t(Jl,Zl),t(Zl,w6),t(Zl,Kd),t(Kd,$6),t(Zl,E6),t(Jl,g6),t(Jl,z),t(z,Qd),t(Qd,eu),t(eu,b6),t(z,k6),t(z,tu),t(tu,su),t(su,C6),t(z,j6),t(z,ou),t(ou,ru),t(ru,x6),t(z,P6),t(z,lu),t(lu,au),t(au,O6),t(z,T6),t(z,iu),t(iu,nu),t(nu,I6),t(z,D6),t(z,pu),t(pu,fu),t(fu,A6),p(e,Z1,n),p(e,Ms,n),t(Ms,S6),t(Ms,hu),t(hu,q6),t(Ms,L6),p(e,K1,n),m(Kl,e,n),p(e,Q1,n),p(e,B,n),t(B,U6),t(B,du),t(du,N6),t(B,H6),t(B,uu),t(uu,R6),t(B,z6),t(B,cu),t(cu,G6),t(B,F6),t(B,mu),t(mu,M6),t(B,B6),p(e,ey,n),m(Ql,e,n),p(e,ty,n),p(e,bt,n),t(bt,Bs),t(Bs,_u),m(ea,_u,null),t(bt,W6),t(bt,vu),t(vu,Y6),p(e,sy,n),p(e,Ws,n),t(Ws,V6),t(Ws,yu),t(yu,X6),t(Ws,J6),p(e,oy,n),p(e,hn,n),t(hn,Z6),p(e,ry,n),p(e,Se,n),t(Se,K6),t(Se,wu),t(wu,Q6),t(Se,e7),t(Se,$u),t($u,t7),t(Se,s7),p(e,ly,n),p(e,dn,n),t(dn,o7),p(e,ay,n),m(ta,e,n),p(e,iy,n),p(e,Ys,n),t(Ys,r7),t(Ys,Eu),t(Eu,l7),t(Ys,a7),p(e,ny,n),p(e,un,n),t(un,gu),t(gu,i7),p(e,py,n),m(sa,e,n),p(e,fy,n),p(e,oa,n),t(oa,bu),t(bu,n7),t(oa,p7),p(e,hy,n),p(e,cn,n),t(cn,ku),t(ku,f7),p(e,dy,n),m(ra,e,n),p(e,uy,n),p(e,mn,n),t(mn,h7),p(e,cy,n),p(e,_n,n),t(_n,la),t(la,kt),t(kt,d7),t(kt,Cu),t(Cu,u7),t(kt,c7),t(kt,ju),t(ju,m7),t(kt,_7),t(la,v7),t(la,ye),t(ye,vn),t(vn,xu),t(xu,y7),t(vn,w7),t(ye,$7),t(ye,yn),t(yn,Pu),t(Pu,E7),t(yn,g7),t(ye,b7),t(ye,wn),t(wn,Ou),t(Ou,k7),t(wn,C7),t(ye,j7),t(ye,$n),t($n,Tu),t(Tu,x7),t($n,P7),p(e,my,n),m(Vs,e,n),p(e,_y,n),m(Xs,e,n),p(e,vy,n),p(e,Ct,n),t(Ct,Js),t(Js,Iu),m(aa,Iu,null),t(Ct,O7),t(Ct,Du),t(Du,T7),p(e,yy,n),p(e,qe,n),t(qe,I7),t(qe,Au),t(Au,D7),t(qe,A7),t(qe,Su),t(Su,S7),t(qe,q7),p(e,wy,n),m(ia,e,n),p(e,$y,n),p(e,jt,n),t(jt,Zs),t(Zs,qu),m(na,qu,null),t(jt,L7),t(jt,Lu),t(Lu,U7),p(e,Ey,n),p(e,Ks,n),t(Ks,N7),t(Ks,Uu),t(Uu,H7),t(Ks,R7),p(e,gy,n),p(e,En,n),t(En,z7),p(e,by,n),p(e,Qs,n),t(Qs,Nu),t(Nu,pa),t(pa,G7),t(pa,Hu),t(Hu,F7),t(pa,M7),t(Qs,B7),t(Qs,Ru),t(Ru,fa),t(fa,W7),t(fa,zu),t(zu,Y7),t(fa,V7),p(e,ky,n),p(e,le,n),t(le,X7),t(le,Gu),t(Gu,J7),t(le,Z7),t(le,Fu),t(Fu,K7),t(le,Q7),t(le,Mu),t(Mu,e8),t(le,t8),p(e,Cy,n),p(e,xt,n),t(xt,eo),t(eo,Bu),m(ha,Bu,null),t(xt,s8),t(xt,Wu),t(Wu,o8),p(e,jy,n),p(e,gn,n),t(gn,Yu),t(Yu,r8),p(e,xy,n),m(da,e,n),p(e,Py,n),p(e,bn,n),t(bn,l8),p(e,Oy,n),m(ua,e,n),p(e,Ty,n),p(e,to,n),t(to,a8),t(to,Vu),t(Vu,i8),t(to,n8),p(e,Iy,n),m(ca,e,n),p(e,Dy,n),p(e,kn,n),t(kn,Xu),t(Xu,p8),p(e,Ay,n),m(ma,e,n),p(e,Sy,n),p(e,Cn,n),t(Cn,f8),p(e,qy,n),m(_a,e,n),p(e,Ly,n),p(e,so,n),t(so,h8),t(so,Ju),t(Ju,d8),t(so,u8),p(e,Uy,n),m(va,e,n),p(e,Ny,n),p(e,jn,n),t(jn,Zu),t(Zu,c8),p(e,Hy,n),m(ya,e,n),p(e,Ry,n),p(e,xn,n),t(xn,Ku),t(Ku,m8),p(e,zy,n),m(wa,e,n),p(e,Gy,n),p(e,Pn,n),t(Pn,_8),p(e,Fy,n),m($a,e,n),p(e,My,n),p(e,On,n),t(On,v8),p(e,By,n),m(Ea,e,n),p(e,Wy,n),p(e,oo,n),t(oo,y8),t(oo,ga),t(ga,w8),t(oo,$8),p(e,Yy,n),p(e,Pt,n),t(Pt,ro),t(ro,Qu),m(ba,Qu,null),t(Pt,E8),t(Pt,ec),t(ec,g8),p(e,Vy,n),p(e,Tn,n),t(Tn,b8),p(e,Xy,n),m(ka,e,n),p(e,Jy,n),p(e,Le,n),t(Le,k8),t(Le,tc),t(tc,C8),t(Le,j8),t(Le,sc),t(sc,x8),t(Le,P8),p(e,Zy,n),m(Ca,e,n),p(e,Ky,n),p(e,ae,n),t(ae,O8),t(ae,oc),t(oc,T8),t(ae,I8),t(ae,rc),t(rc,D8),t(ae,A8),t(ae,lc),t(lc,S8),t(ae,q8),p(e,Qy,n),m(ja,e,n),p(e,ew,n),p(e,In,n),t(In,L8),p(e,tw,n),p(e,Dn,n),t(Dn,U8),p(e,sw,n),p(e,An,n),t(An,N8),p(e,ow,n),p(e,ie,n),t(ie,ac),t(ac,H8),t(ie,R8),t(ie,ic),t(ic,z8),t(ie,G8),t(ie,Ot),t(Ot,F8),t(Ot,nc),t(nc,M8),t(Ot,B8),t(Ot,pc),t(pc,W8),t(Ot,Y8),t(ie,V8),t(ie,fc),t(fc,X8),p(e,rw,n),p(e,Ue,n),t(Ue,J8),t(Ue,hc),t(hc,Z8),t(Ue,K8),t(Ue,dc),t(dc,Q8),t(Ue,e9),p(e,lw,n),m(xa,e,n),p(e,aw,n),p(e,Ne,n),t(Ne,t9),t(Ne,Pa),t(Pa,s9),t(Ne,o9),t(Ne,Oa),t(Oa,r9),t(Ne,l9),p(e,iw,n),p(e,lo,n),t(lo,a9),t(lo,uc),t(uc,i9),t(lo,n9),p(e,nw,n),p(e,Sn,n),t(Sn,p9),p(e,pw,n),p(e,Tt,n),t(Tt,ao),t(ao,cc),m(Ta,cc,null),t(Tt,f9),t(Tt,mc),t(mc,h9),p(e,fw,n),p(e,W,n),t(W,d9),t(W,_c),t(_c,u9),t(W,c9),t(W,vc),t(vc,m9),t(W,_9),t(W,yc),t(yc,v9),t(W,y9),t(W,Ia),t(Ia,w9),t(W,$9),p(e,hw,n),m(Da,e,n),p(e,dw,n),p(e,io,n),t(io,E9),t(io,wc),t(wc,g9),t(io,b9),p(e,uw,n),m(Aa,e,n),p(e,cw,n),p(e,no,n),t(no,k9),t(no,$c),t($c,C9),t(no,j9),p(e,mw,n),m(Sa,e,n),p(e,_w,n),p(e,O,n),t(O,x9),t(O,Ec),t(Ec,P9),t(O,O9),t(O,gc),t(gc,T9),t(O,I9),t(O,bc),t(bc,D9),t(O,A9),t(O,kc),t(kc,S9),t(O,q9),t(O,Cc),t(Cc,L9),t(O,U9),t(O,jc),t(jc,N9),t(O,H9),p(e,vw,n),p(e,po,n),t(po,R9),t(po,xc),t(xc,z9),t(po,G9),p(e,yw,n),m(qa,e,n),p(e,ww,n),p(e,qn,n),t(qn,F9),p(e,$w,n),m(La,e,n),p(e,Ew,n),p(e,He,n),t(He,M9),t(He,Pc),t(Pc,B9),t(He,W9),t(He,Oc),t(Oc,Y9),t(He,V9),p(e,gw,n),m(Ua,e,n),p(e,bw,n),p(e,fo,n),t(fo,X9),t(fo,Tc),t(Tc,J9),t(fo,Z9),p(e,kw,n),m(Na,e,n),p(e,Cw,n),p(e,Ln,n),t(Ln,K9),p(e,jw,n),p(e,It,n),t(It,ho),t(ho,Ic),m(Ha,Ic,null),t(It,Q9),t(It,Dc),t(Dc,eC),p(e,xw,n),p(e,uo,n),t(uo,tC),t(uo,Ac),t(Ac,sC),t(uo,oC),p(e,Pw,n),m(Ra,e,n),p(e,Ow,n),p(e,Dt,n),t(Dt,co),t(co,Sc),m(za,Sc,null),t(Dt,rC),t(Dt,qc),t(qc,lC),p(e,Tw,n),p(e,Ga,n),t(Ga,aC),t(Ga,Lc),t(Lc,iC),p(e,Iw,n),m(Fa,e,n),p(e,Dw,n),p(e,ne,n),t(ne,nC),t(ne,Uc),t(Uc,pC),t(ne,fC),t(ne,Nc),t(Nc,hC),t(ne,dC),t(ne,Hc),t(Hc,uC),t(ne,cC),p(e,Aw,n),m(Ma,e,n),p(e,Sw,n),p(e,L,n),t(L,mC),t(L,Rc),t(Rc,_C),t(L,vC),t(L,zc),t(zc,yC),t(L,wC),t(L,Gc),t(Gc,$C),t(L,EC),t(L,Fc),t(Fc,gC),t(L,bC),t(L,Mc),t(Mc,kC),t(L,CC),p(e,qw,n),p(e,mo,n),t(mo,jC),t(mo,Bc),t(Bc,xC),t(mo,PC),p(e,Lw,n),p(e,At,n),t(At,_o),t(_o,Wc),m(Ba,Wc,null),t(At,OC),t(At,Yc),t(Yc,TC),p(e,Uw,n),p(e,Un,n),t(Un,IC),p(e,Nw,n),m(Wa,e,n),p(e,Hw,n),p(e,St,n),t(St,vo),t(vo,Vc),m(Ya,Vc,null),t(St,DC),t(St,Xc),t(Xc,AC),p(e,Rw,n),p(e,Nn,n),t(Nn,SC),p(e,zw,n),m(Va,e,n),p(e,Gw,n),p(e,qt,n),t(qt,yo),t(yo,Jc),m(Xa,Jc,null),t(qt,qC),t(qt,Zc),t(Zc,LC),p(e,Fw,n),p(e,Hn,n),t(Hn,UC),p(e,Mw,n),p(e,pe,n),t(pe,Ja),t(Ja,NC),t(Ja,Kc),t(Kc,HC),t(Ja,RC),t(pe,zC),t(pe,U),t(U,GC),t(U,Qc),t(Qc,FC),t(U,MC),t(U,em),t(em,BC),t(U,WC),t(U,tm),t(tm,YC),t(U,VC),t(U,sm),t(sm,XC),t(U,JC),t(U,Za),t(Za,ZC),t(U,KC),t(U,om),t(om,QC),t(pe,ej),t(pe,rm),t(rm,tj),t(pe,sj),t(pe,Ka),t(Ka,oj),t(Ka,Qa),t(Qa,rj),t(Ka,lj),p(e,Bw,n),p(e,Lt,n),t(Lt,wo),t(wo,lm),m(ei,lm,null),t(Lt,aj),t(Lt,am),t(am,ij),p(e,Ww,n),p(e,Rn,n),t(Rn,nj),p(e,Yw,n),p(e,fe,n),t(fe,im),t(im,pj),t(fe,fj),t(fe,nm),t(nm,hj),t(fe,dj),t(fe,pm),t(pm,uj),t(fe,cj),t(fe,fm),t(fm,mj),p(e,Vw,n),p(e,zn,n),t(zn,_j),p(e,Xw,n),p(e,Gn,n),t(Gn,vj),p(e,Jw,n),p(e,Fn,n),t(Fn,yj),p(e,Zw,n),p(e,Mn,n),t(Mn,wj),p(e,Kw,n),p(e,$o,n),t($o,Bn),t(Bn,hm),t(hm,$j),t(Bn,Ej),t($o,gj),t($o,Ut),t(Ut,bj),t(Ut,dm),t(dm,kj),t(Ut,Cj),t(Ut,um),t(um,jj),t(Ut,xj),p(e,Qw,n),p(e,Wn,n),t(Wn,Pj),p(e,e$,n),m(ti,e,n),p(e,t$,n),p(e,Yn,n),t(Yn,Oj),p(e,s$,n),m(si,e,n),p(e,o$,n),p(e,Eo,n),t(Eo,Tj),t(Eo,cm),t(cm,Ij),t(Eo,Dj),p(e,r$,n),p(e,go,n),t(go,Aj),t(go,mm),t(mm,Sj),t(go,qj),p(e,l$,n),p(e,Vn,n),t(Vn,Lj),p(e,a$,n),p(e,bo,n),t(bo,_m),t(_m,oi),t(oi,Uj),t(bo,Nj),t(bo,vm),t(vm,ri),t(ri,Hj),i$=!0},p(e,[n]){const li={};n&2&&(li.$$scope={dirty:n,ctx:e}),ps.$set(li);const ym={};n&2&&(ym.$$scope={dirty:n,ctx:e}),fs.$set(ym);const wm={};n&2&&(wm.$$scope={dirty:n,ctx:e}),Vs.$set(wm);const $m={};n&2&&($m.$$scope={dirty:n,ctx:e}),Xs.$set($m)},i(e){i$||(_(C.$$.fragment,e),_(No.$$.fragment,e),_(Xo.$$.fragment,e),_(Zo.$$.fragment,e),_(Ko.$$.fragment,e),_(er.$$.fragment,e),_(tr.$$.fragment,e),_(sr.$$.fragment,e),_(or.$$.fragment,e),_(rr.$$.fragment,e),_(lr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(nr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(hr.$$.fragment,e),_(dr.$$.fragment,e),_(ur.$$.fragment,e),_(cr.$$.fragment,e),_(mr.$$.fragment,e),_(_r.$$.fragment,e),_(vr.$$.fragment,e),_(wr.$$.fragment,e),_($r.$$.fragment,e),_(Er.$$.fragment,e),_(kr.$$.fragment,e),_(Cr.$$.fragment,e),_(jr.$$.fragment,e),_(Or.$$.fragment,e),_(Tr.$$.fragment,e),_(Ir.$$.fragment,e),_(Dr.$$.fragment,e),_(Ar.$$.fragment,e),_(qr.$$.fragment,e),_(Lr.$$.fragment,e),_(Nr.$$.fragment,e),_(Hr.$$.fragment,e),_(ps.$$.fragment,e),_(fs.$$.fragment,e),_(Rr.$$.fragment,e),_(zr.$$.fragment,e),_(Gr.$$.fragment,e),_(Fr.$$.fragment,e),_(Mr.$$.fragment,e),_(Br.$$.fragment,e),_(Vr.$$.fragment,e),_(Xr.$$.fragment,e),_(Kr.$$.fragment,e),_(Qr.$$.fragment,e),_(el.$$.fragment,e),_(tl.$$.fragment,e),_(sl.$$.fragment,e),_(ll.$$.fragment,e),_(al.$$.fragment,e),_(il.$$.fragment,e),_(nl.$$.fragment,e),_(pl.$$.fragment,e),_(_l.$$.fragment,e),_(vl.$$.fragment,e),_(yl.$$.fragment,e),_(wl.$$.fragment,e),_($l.$$.fragment,e),_(El.$$.fragment,e),_(kl.$$.fragment,e),_(Cl.$$.fragment,e),_(jl.$$.fragment,e),_(xl.$$.fragment,e),_(Pl.$$.fragment,e),_(Ol.$$.fragment,e),_(Tl.$$.fragment,e),_(Il.$$.fragment,e),_(Dl.$$.fragment,e),_(Al.$$.fragment,e),_(ql.$$.fragment,e),_(Ll.$$.fragment,e),_(Ul.$$.fragment,e),_(Nl.$$.fragment,e),_(Hl.$$.fragment,e),_(Rl.$$.fragment,e),_(zl.$$.fragment,e),_(Fl.$$.fragment,e),_(Ml.$$.fragment,e),_(Bl.$$.fragment,e),_(Wl.$$.fragment,e),_(Yl.$$.fragment,e),_(Kl.$$.fragment,e),_(Ql.$$.fragment,e),_(ea.$$.fragment,e),_(ta.$$.fragment,e),_(sa.$$.fragment,e),_(ra.$$.fragment,e),_(Vs.$$.fragment,e),_(Xs.$$.fragment,e),_(aa.$$.fragment,e),_(ia.$$.fragment,e),_(na.$$.fragment,e),_(ha.$$.fragment,e),_(da.$$.fragment,e),_(ua.$$.fragment,e),_(ca.$$.fragment,e),_(ma.$$.fragment,e),_(_a.$$.fragment,e),_(va.$$.fragment,e),_(ya.$$.fragment,e),_(wa.$$.fragment,e),_($a.$$.fragment,e),_(Ea.$$.fragment,e),_(ba.$$.fragment,e),_(ka.$$.fragment,e),_(Ca.$$.fragment,e),_(ja.$$.fragment,e),_(xa.$$.fragment,e),_(Ta.$$.fragment,e),_(Da.$$.fragment,e),_(Aa.$$.fragment,e),_(Sa.$$.fragment,e),_(qa.$$.fragment,e),_(La.$$.fragment,e),_(Ua.$$.fragment,e),_(Na.$$.fragment,e),_(Ha.$$.fragment,e),_(Ra.$$.fragment,e),_(za.$$.fragment,e),_(Fa.$$.fragment,e),_(Ma.$$.fragment,e),_(Ba.$$.fragment,e),_(Wa.$$.fragment,e),_(Ya.$$.fragment,e),_(Va.$$.fragment,e),_(Xa.$$.fragment,e),_(ei.$$.fragment,e),_(ti.$$.fragment,e),_(si.$$.fragment,e),i$=!0)},o(e){v(C.$$.fragment,e),v(No.$$.fragment,e),v(Xo.$$.fragment,e),v(Zo.$$.fragment,e),v(Ko.$$.fragment,e),v(er.$$.fragment,e),v(tr.$$.fragment,e),v(sr.$$.fragment,e),v(or.$$.fragment,e),v(rr.$$.fragment,e),v(lr.$$.fragment,e),v(ar.$$.fragment,e),v(ir.$$.fragment,e),v(nr.$$.fragment,e),v(pr.$$.fragment,e),v(fr.$$.fragment,e),v(hr.$$.fragment,e),v(dr.$$.fragment,e),v(ur.$$.fragment,e),v(cr.$$.fragment,e),v(mr.$$.fragment,e),v(_r.$$.fragment,e),v(vr.$$.fragment,e),v(wr.$$.fragment,e),v($r.$$.fragment,e),v(Er.$$.fragment,e),v(kr.$$.fragment,e),v(Cr.$$.fragment,e),v(jr.$$.fragment,e),v(Or.$$.fragment,e),v(Tr.$$.fragment,e),v(Ir.$$.fragment,e),v(Dr.$$.fragment,e),v(Ar.$$.fragment,e),v(qr.$$.fragment,e),v(Lr.$$.fragment,e),v(Nr.$$.fragment,e),v(Hr.$$.fragment,e),v(ps.$$.fragment,e),v(fs.$$.fragment,e),v(Rr.$$.fragment,e),v(zr.$$.fragment,e),v(Gr.$$.fragment,e),v(Fr.$$.fragment,e),v(Mr.$$.fragment,e),v(Br.$$.fragment,e),v(Vr.$$.fragment,e),v(Xr.$$.fragment,e),v(Kr.$$.fragment,e),v(Qr.$$.fragment,e),v(el.$$.fragment,e),v(tl.$$.fragment,e),v(sl.$$.fragment,e),v(ll.$$.fragment,e),v(al.$$.fragment,e),v(il.$$.fragment,e),v(nl.$$.fragment,e),v(pl.$$.fragment,e),v(_l.$$.fragment,e),v(vl.$$.fragment,e),v(yl.$$.fragment,e),v(wl.$$.fragment,e),v($l.$$.fragment,e),v(El.$$.fragment,e),v(kl.$$.fragment,e),v(Cl.$$.fragment,e),v(jl.$$.fragment,e),v(xl.$$.fragment,e),v(Pl.$$.fragment,e),v(Ol.$$.fragment,e),v(Tl.$$.fragment,e),v(Il.$$.fragment,e),v(Dl.$$.fragment,e),v(Al.$$.fragment,e),v(ql.$$.fragment,e),v(Ll.$$.fragment,e),v(Ul.$$.fragment,e),v(Nl.$$.fragment,e),v(Hl.$$.fragment,e),v(Rl.$$.fragment,e),v(zl.$$.fragment,e),v(Fl.$$.fragment,e),v(Ml.$$.fragment,e),v(Bl.$$.fragment,e),v(Wl.$$.fragment,e),v(Yl.$$.fragment,e),v(Kl.$$.fragment,e),v(Ql.$$.fragment,e),v(ea.$$.fragment,e),v(ta.$$.fragment,e),v(sa.$$.fragment,e),v(ra.$$.fragment,e),v(Vs.$$.fragment,e),v(Xs.$$.fragment,e),v(aa.$$.fragment,e),v(ia.$$.fragment,e),v(na.$$.fragment,e),v(ha.$$.fragment,e),v(da.$$.fragment,e),v(ua.$$.fragment,e),v(ca.$$.fragment,e),v(ma.$$.fragment,e),v(_a.$$.fragment,e),v(va.$$.fragment,e),v(ya.$$.fragment,e),v(wa.$$.fragment,e),v($a.$$.fragment,e),v(Ea.$$.fragment,e),v(ba.$$.fragment,e),v(ka.$$.fragment,e),v(Ca.$$.fragment,e),v(ja.$$.fragment,e),v(xa.$$.fragment,e),v(Ta.$$.fragment,e),v(Da.$$.fragment,e),v(Aa.$$.fragment,e),v(Sa.$$.fragment,e),v(qa.$$.fragment,e),v(La.$$.fragment,e),v(Ua.$$.fragment,e),v(Na.$$.fragment,e),v(Ha.$$.fragment,e),v(Ra.$$.fragment,e),v(za.$$.fragment,e),v(Fa.$$.fragment,e),v(Ma.$$.fragment,e),v(Ba.$$.fragment,e),v(Wa.$$.fragment,e),v(Ya.$$.fragment,e),v(Va.$$.fragment,e),v(Xa.$$.fragment,e),v(ei.$$.fragment,e),v(ti.$$.fragment,e),v(si.$$.fragment,e),i$=!1},d(e){s($),e&&s(j),e&&s(g),y(C),e&&s(k),e&&s(A),e&&s(Nt),e&&s(we),e&&s(D),e&&s(_e),e&&s(Tm),e&&s(Ve),y(No),e&&s(Im),e&&s(zt),e&&s(Dm),y(Xo,e),e&&s(Am),e&&s(Gt),e&&s(Sm),e&&s(Je),y(Zo),e&&s(qm),e&&s(Ze),y(Ko),e&&s(Lm),e&&s(Bt),e&&s(Um),e&&s(di),e&&s(Nm),e&&s(ui),e&&s(Hm),y(er,e),e&&s(Rm),e&&s(ci),e&&s(zm),y(tr,e),e&&s(Gm),e&&s(mi),e&&s(Fm),y(sr,e),e&&s(Mm),e&&s(_i),e&&s(Bm),e&&s(K),e&&s(Wm),e&&s(Ke),y(or),e&&s(Ym),e&&s(vi),e&&s(Vm),y(rr,e),e&&s(Xm),e&&s(yi),e&&s(Jm),y(lr,e),e&&s(Zm),e&&s(Qe),y(ar),e&&s(Km),e&&s(wi),e&&s(Qm),y(ir,e),e&&s(e_),e&&s(et),y(nr),e&&s(t_),e&&s($i),e&&s(s_),y(pr,e),e&&s(o_),e&&s(Ei),e&&s(r_),e&&s(Ee),e&&s(l_),e&&s(Ci),e&&s(a_),y(fr,e),e&&s(i_),e&&s(ji),e&&s(n_),e&&s(Xt),e&&s(p_),y(hr,e),e&&s(f_),e&&s(xi),e&&s(h_),e&&s(Jt),e&&s(d_),y(dr,e),e&&s(u_),e&&s(Q),e&&s(c_),e&&s(Zt),e&&s(m_),y(ur,e),e&&s(__),e&&s(Pi),e&&s(v_),y(cr,e),e&&s(y_),e&&s(ge),e&&s(w_),y(mr,e),e&&s($_),e&&s(Kt),e&&s(E_),e&&s(Qt),e&&s(g_),y(_r,e),e&&s(b_),e&&s(tt),y(vr),e&&s(k_),e&&s(ts),e&&s(C_),y(wr,e),e&&s(j_),y($r,e),e&&s(x_),e&&s(Oi),e&&s(P_),e&&s(st),y(Er),e&&s(O_),e&&s(gr),e&&s(T_),y(kr,e),e&&s(I_),e&&s(ot),e&&s(D_),e&&s(be),e&&s(A_),y(Cr,e),e&&s(S_),e&&s(ke),e&&s(q_),y(jr,e),e&&s(L_),e&&s(Ti),e&&s(U_),e&&s(xr),e&&s(N_),e&&s(rt),y(Or),e&&s(H_),e&&s(rs),e&&s(R_),y(Tr,e),e&&s(z_),e&&s(lt),y(Ir),e&&s(G_),e&&s(Ii),e&&s(F_),y(Dr,e),e&&s(M_),e&&s(at),y(Ar),e&&s(B_),e&&s(G),e&&s(W_),e&&s(ve),e&&s(Y_),e&&s(Ce),e&&s(V_),e&&s(it),y(qr),e&&s(X_),e&&s(Di),e&&s(J_),e&&s(nt),y(Lr),e&&s(Z_),e&&s(Ai),e&&s(K_),y(Nr,e),e&&s(Q_),e&&s(qi),e&&s(ev),y(Hr,e),e&&s(tv),y(ps,e),e&&s(sv),y(fs,e),e&&s(ov),e&&s(pt),y(Rr),e&&s(rv),y(zr,e),e&&s(lv),e&&s(ds),e&&s(av),e&&s(us),e&&s(iv),y(Gr,e),e&&s(nv),e&&s(Li),e&&s(pv),y(Fr,e),e&&s(fv),e&&s(cs),e&&s(hv),y(Mr,e),e&&s(dv),e&&s(Ui),e&&s(uv),y(Br,e),e&&s(cv),e&&s(P),e&&s(mv),e&&s(ee),e&&s(_v),e&&s(ft),y(Vr),e&&s(vv),e&&s(ht),y(Xr),e&&s(yv),e&&s(Jr),e&&s(wv),y(Kr,e),e&&s($v),e&&s(Ni),e&&s(Ev),y(Qr,e),e&&s(gv),e&&s(Hi),e&&s(bv),e&&s(dt),y(el),e&&s(kv),e&&s(je),e&&s(Cv),y(tl,e),e&&s(jv),e&&s(ut),y(sl),e&&s(xv),e&&s(ol),e&&s(Pv),y(ll,e),e&&s(Ov),y(al,e),e&&s(Tv),e&&s(ct),y(il),e&&s(Iv),e&&s($s),e&&s(Dv),y(nl,e),e&&s(Av),e&&s(te),e&&s(Sv),y(pl,e),e&&s(qv),e&&s(Ri),e&&s(Lv),e&&s(zi),e&&s(Uv),e&&s(q),e&&s(Nv),e&&s(Fi),e&&s(Hv),e&&s(js),e&&s(Rv),e&&s(Mi),e&&s(zv),y(_l,e),e&&s(Gv),e&&s(xe),e&&s(Fv),y(vl,e),e&&s(Mv),e&&s(Bi),e&&s(Bv),y(yl,e),e&&s(Wv),e&&s(Pe),e&&s(Yv),y(wl,e),e&&s(Vv),e&&s(xs),e&&s(Xv),e&&s(Wi),e&&s(Jv),e&&s(Yi),e&&s(Zv),y($l,e),e&&s(Kv),e&&s(mt),y(El),e&&s(Qv),e&&s(_t),e&&s(e1),e&&s(Vi),e&&s(t1),e&&s(Os),e&&s(s1),e&&s(Ts),e&&s(o1),e&&s(Xi),e&&s(r1),y(kl,e),e&&s(l1),e&&s(vt),y(Cl),e&&s(a1),e&&s(Oe),e&&s(i1),e&&s(F),e&&s(n1),y(jl,e),e&&s(p1),e&&s(Ji),e&&s(f1),y(xl,e),e&&s(h1),e&&s(yt),y(Pl),e&&s(d1),e&&s(Zi),e&&s(u1),y(Ol,e),e&&s(c1),e&&s(wt),y(Tl),e&&s(m1),e&&s(Ki),e&&s(_1),y(Il,e),e&&s(v1),e&&s(Qi),e&&s(y1),e&&s(en),e&&s(w1),y(Dl,e),e&&s($1),e&&s($t),y(Al),e&&s(E1),e&&s(Te),e&&s(g1),e&&s(se),e&&s(b1),e&&s(Et),y(ql),e&&s(k1),e&&s(tn),e&&s(C1),y(Ll,e),e&&s(j1),e&&s(Ls),e&&s(x1),e&&s(Ie),e&&s(P1),y(Ul,e),e&&s(O1),e&&s(Us),e&&s(T1),y(Nl,e),e&&s(I1),e&&s(Ns),e&&s(D1),y(Hl,e),e&&s(A1),e&&s(sn),e&&s(S1),y(Rl,e),e&&s(q1),e&&s(on),e&&s(L1),y(zl,e),e&&s(U1),e&&s(M),e&&s(N1),e&&s(oe),e&&s(H1),e&&s(De),e&&s(R1),y(Fl,e),e&&s(z1),e&&s(re),e&&s(G1),y(Ml,e),e&&s(F1),e&&s(rn),e&&s(M1),y(Bl,e),e&&s(B1),e&&s(ln),e&&s(W1),y(Wl,e),e&&s(Y1),e&&s(an),e&&s(V1),e&&s(gt),y(Yl),e&&s(X1),e&&s(Rs),e&&s(J1),e&&s(zs),e&&s(Z1),e&&s(Ms),e&&s(K1),y(Kl,e),e&&s(Q1),e&&s(B),e&&s(ey),y(Ql,e),e&&s(ty),e&&s(bt),y(ea),e&&s(sy),e&&s(Ws),e&&s(oy),e&&s(hn),e&&s(ry),e&&s(Se),e&&s(ly),e&&s(dn),e&&s(ay),y(ta,e),e&&s(iy),e&&s(Ys),e&&s(ny),e&&s(un),e&&s(py),y(sa,e),e&&s(fy),e&&s(oa),e&&s(hy),e&&s(cn),e&&s(dy),y(ra,e),e&&s(uy),e&&s(mn),e&&s(cy),e&&s(_n),e&&s(my),y(Vs,e),e&&s(_y),y(Xs,e),e&&s(vy),e&&s(Ct),y(aa),e&&s(yy),e&&s(qe),e&&s(wy),y(ia,e),e&&s($y),e&&s(jt),y(na),e&&s(Ey),e&&s(Ks),e&&s(gy),e&&s(En),e&&s(by),e&&s(Qs),e&&s(ky),e&&s(le),e&&s(Cy),e&&s(xt),y(ha),e&&s(jy),e&&s(gn),e&&s(xy),y(da,e),e&&s(Py),e&&s(bn),e&&s(Oy),y(ua,e),e&&s(Ty),e&&s(to),e&&s(Iy),y(ca,e),e&&s(Dy),e&&s(kn),e&&s(Ay),y(ma,e),e&&s(Sy),e&&s(Cn),e&&s(qy),y(_a,e),e&&s(Ly),e&&s(so),e&&s(Uy),y(va,e),e&&s(Ny),e&&s(jn),e&&s(Hy),y(ya,e),e&&s(Ry),e&&s(xn),e&&s(zy),y(wa,e),e&&s(Gy),e&&s(Pn),e&&s(Fy),y($a,e),e&&s(My),e&&s(On),e&&s(By),y(Ea,e),e&&s(Wy),e&&s(oo),e&&s(Yy),e&&s(Pt),y(ba),e&&s(Vy),e&&s(Tn),e&&s(Xy),y(ka,e),e&&s(Jy),e&&s(Le),e&&s(Zy),y(Ca,e),e&&s(Ky),e&&s(ae),e&&s(Qy),y(ja,e),e&&s(ew),e&&s(In),e&&s(tw),e&&s(Dn),e&&s(sw),e&&s(An),e&&s(ow),e&&s(ie),e&&s(rw),e&&s(Ue),e&&s(lw),y(xa,e),e&&s(aw),e&&s(Ne),e&&s(iw),e&&s(lo),e&&s(nw),e&&s(Sn),e&&s(pw),e&&s(Tt),y(Ta),e&&s(fw),e&&s(W),e&&s(hw),y(Da,e),e&&s(dw),e&&s(io),e&&s(uw),y(Aa,e),e&&s(cw),e&&s(no),e&&s(mw),y(Sa,e),e&&s(_w),e&&s(O),e&&s(vw),e&&s(po),e&&s(yw),y(qa,e),e&&s(ww),e&&s(qn),e&&s($w),y(La,e),e&&s(Ew),e&&s(He),e&&s(gw),y(Ua,e),e&&s(bw),e&&s(fo),e&&s(kw),y(Na,e),e&&s(Cw),e&&s(Ln),e&&s(jw),e&&s(It),y(Ha),e&&s(xw),e&&s(uo),e&&s(Pw),y(Ra,e),e&&s(Ow),e&&s(Dt),y(za),e&&s(Tw),e&&s(Ga),e&&s(Iw),y(Fa,e),e&&s(Dw),e&&s(ne),e&&s(Aw),y(Ma,e),e&&s(Sw),e&&s(L),e&&s(qw),e&&s(mo),e&&s(Lw),e&&s(At),y(Ba),e&&s(Uw),e&&s(Un),e&&s(Nw),y(Wa,e),e&&s(Hw),e&&s(St),y(Ya),e&&s(Rw),e&&s(Nn),e&&s(zw),y(Va,e),e&&s(Gw),e&&s(qt),y(Xa),e&&s(Fw),e&&s(Hn),e&&s(Mw),e&&s(pe),e&&s(Bw),e&&s(Lt),y(ei),e&&s(Ww),e&&s(Rn),e&&s(Yw),e&&s(fe),e&&s(Vw),e&&s(zn),e&&s(Xw),e&&s(Gn),e&&s(Jw),e&&s(Fn),e&&s(Zw),e&&s(Mn),e&&s(Kw),e&&s($o),e&&s(Qw),e&&s(Wn),e&&s(e$),y(ti,e),e&&s(t$),e&&s(Yn),e&&s(s$),y(si,e),e&&s(o$),e&&s(Eo),e&&s(r$),e&&s(go),e&&s(l$),e&&s(Vn),e&&s(a$),e&&s(bo)}}}const tL={local:"testing",sections:[{local:"how-transformers-are-tested",title:"How transformers are tested"},{local:"running-tests",sections:[{local:"choosing-which-tests-to-run",title:"Choosing which tests to run"},{local:"getting-the-list-of-all-tests",title:"Getting the list of all tests"},{local:"run-a-specific-test-module",title:"Run a specific test module"},{local:"run-specific-tests",title:"Run specific tests"},{local:"run-only-modified-tests",title:"Run only modified tests"},{local:"automatically-rerun-failed-tests-on-source-modification",title:"Automatically rerun failed tests on source modification"},{local:"skip-a-test-module",title:"Skip a test module"},{local:"clearing-state",title:"Clearing state"},{local:"running-tests-in-parallel",title:"Running tests in parallel"},{local:"test-order-and-repetition",sections:[{local:"repeat-tests",title:"Repeat tests"},{local:"run-tests-in-a-random-order",title:"Run tests in a random order"}],title:"Test order and repetition"},{local:"look-and-feel-variations",sections:[{local:"pytestsugar",title:"pytest-sugar"},{local:"report-each-subtest-name-and-its-progress",title:"Report each sub-test name and its progress"},{local:"instantly-shows-failed-tests",title:"Instantly shows failed tests"}],title:"Look and feel variations"},{local:"to-gpu-or-not-to-gpu",title:"To GPU or not to GPU"},{local:"distributed-training",title:"Distributed training"},{local:"output-capture",title:"Output capture"},{local:"color-control",title:"Color control"},{local:"sending-test-report-to-online-pastebin-service",title:"Sending test report to online pastebin service"}],title:"Running tests"},{local:"writing-tests",sections:[{local:"parametrization",title:"Parametrization"},{local:"files-and-directories",title:"Files and directories"},{local:"temporary-files-and-directories",title:"Temporary files and directories"},{local:"temporary-syspath-override",title:"Temporary sys.path override"},{local:"skipping-tests",sections:[{local:"implementation",title:"Implementation"}],title:"Skipping tests"},{local:"slow-tests",title:"Slow tests"},{local:"testing-the-stdoutstderr-output",title:"Testing the stdout/stderr output"},{local:"capturing-logger-stream",title:"Capturing logger stream"},{local:"testing-with-environment-variables",title:"Testing with environment variables"},{local:"getting-reproducible-results",title:"Getting reproducible results"},{local:"debugging-tests",title:"Debugging tests"}],title:"Writing tests"},{local:"working-with-github-actions-workflows",title:"Working with github actions workflows"},{local:"testing-experimental-ci-features",title:"Testing Experimental CI Features"}],title:"Testing"};function sL(me,$,j){let{fw:g}=$;return me.$$set=b=>{"fw"in b&&j(0,g=b.fw)},[g]}class nL extends Wq{constructor($){super();Yq(this,$,sL,eL,Vq,{fw:0})}}export{nL as default,tL as metadata};
