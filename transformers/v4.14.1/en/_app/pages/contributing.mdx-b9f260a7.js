import{S as Wy,i as Gy,s as jy,e as l,k as n,w as m,t as s,M as Hy,c as a,d as o,m as h,a as i,x as y,h as r,b as d,F as e,g as f,y as v,L as My,q as g,o as w,B as b}from"../chunks/vendor-ab4e3193.js";import{I as x}from"../chunks/IconCopyLink-d992940d.js";import{C as $}from"../chunks/CodeBlock-516df0c5.js";import"../chunks/CopyButton-204b56db.js";function Uy(ii){let F,lo,A,M,Jo,Ze,ni,Ko,hi,vl,ao,ui,gl,io,fi,wl,Ee,di,Ve,ci,pi,bl,oe,_e,Qo,Xe,mi,Zo,yi,$l,no,vi,El,T,Vo,gi,wi,Xo,bi,$i,es,Ei,_i,ts,ki,_l,D,Pi,et,Ii,Oi,os,Ci,Si,ss,xi,Ai,kl,ho,rs,Ti,Pl,se,ke,ls,tt,Di,as,Li,Il,uo,Ni,Ol,re,Pe,is,ot,qi,ns,Ri,Cl,fo,Wi,Sl,Ie,Gi,hs,ji,Hi,xl,co,Mi,Al,Y,C,Ui,us,Fi,Yi,fs,Bi,zi,ds,Ji,Ki,cs,Qi,Zi,Vi,ps,Xi,en,st,tn,ms,on,sn,Tl,po,rn,Dl,rt,Ll,mo,ln,Nl,lt,ql,le,Oe,ys,at,an,vs,nn,Rl,yo,hn,Wl,B,gs,un,fn,ws,dn,cn,bs,pn,Gl,vo,mn,jl,L,yn,$s,vn,gn,Es,wn,bn,it,$n,En,Hl,ae,Ce,_s,nt,_n,ks,kn,Ml,go,Pn,Ul,wo,Ps,In,Fl,z,Is,On,Cn,Os,Sn,xn,Cs,An,Yl,S,ht,Tn,Ss,Dn,Ln,Nn,ut,qn,xs,Rn,Wn,Gn,As,jn,Hn,Ts,Mn,Bl,bo,Un,zl,N,Fn,Ds,Yn,Bn,Ls,zn,Jn,ft,Kn,Qn,Jl,ie,Se,Ns,dt,Zn,qs,Vn,Kl,$o,Xn,Ql,k,eh,Rs,th,oh,Ws,sh,rh,Gs,lh,ah,js,ih,nh,ct,hh,uh,Zl,Eo,fh,Vl,E,Hs,pt,dh,mt,ch,ph,mh,yt,Ms,yh,vh,vt,gh,ne,Us,wh,bh,gt,$h,xe,Fs,Eh,_h,Ys,kh,Ph,Ih,P,Bs,Oh,Ch,wt,Sh,he,xh,zs,Ah,Th,Js,Dh,Lh,Nh,bt,qh,Ks,Rh,Wh,Gh,$t,jh,ue,Hh,Qs,Mh,Uh,Zs,Fh,Yh,Bh,c,Vs,zh,Jh,Xs,Kh,Qh,Et,Zh,fe,Vh,er,Xh,eu,tr,tu,ou,su,_t,ru,kt,lu,or,au,iu,nu,J,sr,hu,uu,rr,fu,du,lr,cu,pu,mu,Pt,yu,Ae,ar,vu,gu,ir,wu,bu,$u,It,Eu,nr,_u,ku,Ot,Pu,hr,Iu,Ou,de,Cu,ur,Su,xu,fr,Au,Tu,Du,Ct,Lu,ce,Nu,dr,qu,Ru,cr,Wu,Gu,ju,St,Hu,xt,Mu,At,Uu,Fu,Yu,pr,Bu,zu,Tt,Ju,mr,Ku,Qu,Dt,Zu,yr,Lt,Vu,vr,Xu,ef,tf,gr,wr,of,Xl,pe,Te,br,Nt,sf,$r,rf,ea,_,Er,lf,af,_r,nf,hf,qt,uf,kr,ff,df,cf,Pr,pf,mf,_o,yf,me,Rt,vf,Ir,gf,wf,bf,ye,$f,Or,Ef,_f,Cr,kf,Pf,If,Wt,Of,Sr,Cf,Sf,xf,Gt,Af,xr,Tf,Df,Lf,U,Nf,Ar,qf,Rf,Tr,Wf,Gf,jt,jf,Hf,ta,Ht,Mf,ko,Uf,oa,ve,De,Dr,Mt,Ff,Lr,Yf,sa,K,Bf,Ut,zf,Jf,Ft,Kf,Qf,ra,q,Zf,Nr,Vf,Xf,qr,ed,td,Rr,od,sd,la,Yt,aa,Po,rd,ia,Bt,na,R,ld,Wr,ad,id,Gr,nd,hd,jr,ud,fd,ha,Io,dd,ua,Q,cd,Hr,pd,md,Mr,yd,vd,fa,zt,da,Z,gd,Ur,wd,bd,Fr,$d,Ed,ca,V,_d,Yr,kd,Pd,Br,Id,Od,pa,X,Cd,zr,Sd,xd,Jr,Ad,Td,ma,Jt,ya,ge,Le,Kr,Kt,Dd,Qr,Ld,va,W,Nd,Zr,qd,Rd,Qt,Wd,Gd,Zt,jd,Hd,ga,we,Ne,Vr,Vt,Md,Xr,Ud,wa,be,qe,el,Xt,Fd,tl,Yd,ba,ee,Bd,ol,zd,Jd,sl,Kd,Qd,$a,Oo,rl,Zd,Ea,Co,Vd,_a,G,So,eo,Xd,ec,tc,ll,oc,sc,Re,rc,al,lc,ac,il,ic,nc,to,hc,nl,uc,fc,ka,We,dc,hl,cc,pc,Pa,$e,Ge,ul,oo,mc,fl,yc,Ia,xo,vc,Oa,je,dl,gc,wc,cl,bc,Ca,so,Sa;return Ze=new x({}),Xe=new x({}),tt=new x({}),ot=new x({}),rt=new $({props:{code:"transformers-cli env,",highlighted:'transformers-cli <span class="hljs-built_in">env</span>'}}),lt=new $({props:{code:"python src/transformers/commands/transformers_cli.py env,",highlighted:'python src/transformers/commands/transformers_cli.py <span class="hljs-built_in">env</span>'}}),at=new x({}),nt=new x({}),dt=new x({}),vt=new $({props:{code:`$ git clone git@github.com:<your Github handle>/transformers.git
$ cd transformers
$ git remote add upstream https://github.com/huggingface/transformers.git,`,highlighted:`$ git <span class="hljs-built_in">clone</span> git@github.com:&lt;your Github handle&gt;/transformers.git
$ <span class="hljs-built_in">cd</span> transformers
$ git remote add upstream https://github.com/huggingface/transformers.git`}}),gt=new $({props:{code:"$ git checkout -b a-descriptive-name-for-my-changes,",highlighted:"$ git checkout -b a-descriptive-name-for-my-changes"}}),wt=new $({props:{code:'$ pip install -e ".[dev]",',highlighted:'$ pip install -e <span class="hljs-string">&quot;.[dev]&quot;</span>'}}),$t=new $({props:{code:`$ git clone https://github.com/huggingface/datasets
$ cd datasets
$ pip install -e .,`,highlighted:`$ git <span class="hljs-built_in">clone</span> https://github.com/huggingface/datasets
$ <span class="hljs-built_in">cd</span> datasets
$ pip install -e .`}}),Et=new $({props:{code:"$ make test,",highlighted:'$ make <span class="hljs-built_in">test</span>'}}),_t=new $({props:{code:"$ python -m pytest -n 3 --dist=loadfile -s -v ./tests/,",highlighted:"$ python -m pytest -n 3 --dist=loadfile -s -v ./tests/"}}),Pt=new $({props:{code:"$ make style,",highlighted:"$ make style"}}),It=new $({props:{code:"$ make quality,",highlighted:"$ make quality"}}),Ot=new $({props:{code:"$ make fixup,",highlighted:"$ make fixup"}}),Ct=new $({props:{code:"$ make docs,",highlighted:"$ make docs"}}),St=new $({props:{code:`$ git add modified_file.py
$ git commit,`,highlighted:`$ git add modified_file.py
$ git commit`}}),Tt=new $({props:{code:`$ git fetch upstream
$ git rebase upstream/master,`,highlighted:`$ git fetch upstream
$ git rebase upstream/master`}}),Dt=new $({props:{code:"$ git push -u origin a-descriptive-name-for-my-changes,",highlighted:"$ git push -u origin a-descriptive-name-for-my-changes"}}),Nt=new x({}),Mt=new x({}),Yt=new $({props:{code:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/,",highlighted:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),Bt=new $({props:{code:`$ pip install -r examples/xxx/requirements.txt  # only needed the first time
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/,`,highlighted:`$ pip install -r examples/xxx/requirements.txt  <span class="hljs-comment"># only needed the first time</span>
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),zt=new $({props:{code:`$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/,`,highlighted:`$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),Jt=new $({props:{code:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v,`,highlighted:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v`}}),Kt=new x({}),Vt=new x({}),Xt=new x({}),oo=new x({}),so=new $({props:{code:`$ git checkout -b your-branch-for-syncing
$ git pull --squash --no-commit upstream master
$ git commit -m '<your message without GitHub references>'
$ git push --set-upstream origin your-branch-for-syncing,`,highlighted:`<span class="hljs-symbol">$</span> git checkout -b your-branch-<span class="hljs-keyword">for</span>-syncing
<span class="hljs-symbol">$</span> git pull --squash --<span class="hljs-keyword">no</span>-commit upstream master
<span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">&#x27;&lt;your message without GitHub references&gt;&#x27;</span>
<span class="hljs-symbol">$</span> git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin your-branch-for-syncing</span>`}}),{c(){F=l("meta"),lo=n(),A=l("h1"),M=l("a"),Jo=l("span"),m(Ze.$$.fragment),ni=n(),Ko=l("span"),hi=s("How to contribute to transformers?"),vl=n(),ao=l("p"),ui=s(`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),gl=n(),io=l("p"),fi=s(`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),wl=n(),Ee=l("p"),di=s(`Whichever way you choose to contribute, please be mindful to respect our
`),Ve=l("a"),ci=s("code of conduct"),pi=s("."),bl=n(),oe=l("h2"),_e=l("a"),Qo=l("span"),m(Xe.$$.fragment),mi=n(),Zo=l("span"),yi=s("You can contribute in so many ways!"),$l=n(),no=l("p"),vi=s("There are 4 ways you can contribute to transformers:"),El=n(),T=l("ul"),Vo=l("li"),gi=s("Fixing outstanding issues with the existing code;"),wi=n(),Xo=l("li"),bi=s("Implementing new models;"),$i=n(),es=l("li"),Ei=s("Contributing to the examples or to the documentation;"),_i=n(),ts=l("li"),ki=s("Submitting issues related to bugs or desired new features."),_l=n(),D=l("p"),Pi=s("In particular there is a special "),et=l("a"),Ii=s(`Good First
Issue`),Oi=s(` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),os=l("code"),Ci=s("Good Second Issue"),Si=s(` label. These are
typically slightly more complicated than the Issues with just `),ss=l("code"),xi=s("Good First Issue"),Ai=s(` label. But if you
feel you know what you\u2019re doing, go for it.`),kl=n(),ho=l("p"),rs=l("em"),Ti=s("All are equally valuable to the community."),Pl=n(),se=l("h2"),ke=l("a"),ls=l("span"),m(tt.$$.fragment),Di=n(),as=l("span"),Li=s("Submitting a new issue or feature request"),Il=n(),uo=l("p"),Ni=s(`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),Ol=n(),re=l("h3"),Pe=l("a"),is=l("span"),m(ot.$$.fragment),qi=n(),ns=l("span"),Ri=s("Did you find a bug?"),Cl=n(),fo=l("p"),Wi=s(`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),Sl=n(),Ie=l("p"),Gi=s("First, we would really appreciate it if you could "),hs=l("strong"),ji=s(`make sure the bug was not
already reported`),Hi=s(" (use the search bar on Github under Issues)."),xl=n(),co=l("p"),Mi=s("Did not find it? :( So we can act quickly on it, please follow these steps:"),Al=n(),Y=l("ul"),C=l("li"),Ui=s("Include your "),us=l("strong"),Fi=s("OS type and version"),Yi=s(", the versions of "),fs=l("strong"),Bi=s("Python"),zi=s(", "),ds=l("strong"),Ji=s("PyTorch"),Ki=s(` and
`),cs=l("strong"),Qi=s("Tensorflow"),Zi=s(" when applicable;"),Vi=n(),ps=l("li"),Xi=s(`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),en=n(),st=l("li"),tn=s("Provide the "),ms=l("em"),on=s("full"),sn=s(" traceback if an exception is raised."),Tl=n(),po=l("p"),rn=s("To get the OS and software versions automatically, you can run the following command:"),Dl=n(),m(rt.$$.fragment),Ll=n(),mo=l("p"),ln=s("or from the root of the repository the following command:"),Nl=n(),m(lt.$$.fragment),ql=n(),le=l("h3"),Oe=l("a"),ys=l("span"),m(at.$$.fragment),an=n(),vs=l("span"),nn=s("Do you want to implement a new model?"),Rl=n(),yo=l("p"),hn=s("Awesome! Please provide the following information:"),Wl=n(),B=l("ul"),gs=l("li"),un=s("Short description of the model and link to the paper;"),fn=n(),ws=l("li"),dn=s("Link to the implementation if it is open-source;"),cn=n(),bs=l("li"),pn=s("Link to the model weights if they are available."),Gl=n(),vo=l("p"),mn=s(`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),jl=n(),L=l("p"),yn=s("We have added a "),$s=l("strong"),vn=s("detailed guide and templates"),gn=s(` to guide you in the process of adding a new model. You can find them
in the `),Es=l("code"),wn=s("templates"),bn=s("("),it=l("a"),$n=s("https://github.com/huggingface/transformers/tree/master/templates"),En=s(") folder."),Hl=n(),ae=l("h3"),Ce=l("a"),_s=l("span"),m(nt.$$.fragment),_n=n(),ks=l("span"),kn=s("Do you want a new feature (that is not a model)?"),Ml=n(),go=l("p"),Pn=s("A world-class feature request addresses the following points:"),Ul=n(),wo=l("ol"),Ps=l("li"),In=s("Motivation first:"),Fl=n(),z=l("ul"),Is=l("li"),On=s(`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),Cn=n(),Os=l("li"),Sn=s(`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),xn=n(),Cs=l("li"),An=s(`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),Yl=n(),S=l("ol"),ht=l("li"),Tn=s("Write a "),Ss=l("em"),Dn=s("full paragraph"),Ln=s(" describing the feature;"),Nn=n(),ut=l("li"),qn=s("Provide a "),xs=l("strong"),Rn=s("code snippet"),Wn=s(" that demonstrates its future use;"),Gn=n(),As=l("li"),jn=s("In case this is related to a paper, please attach a link;"),Hn=n(),Ts=l("li"),Mn=s("Attach any additional information (drawings, screenshots, etc.) you think may help."),Bl=n(),bo=l("p"),Un=s(`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),zl=n(),N=l("p"),Fn=s("We have added "),Ds=l("strong"),Yn=s("templates"),Bn=s(` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),Ls=l("code"),zn=s("templates"),Jn=s("("),ft=l("a"),Kn=s("https://github.com/huggingface/transformers/tree/master/templates"),Qn=s(`)
folder.`),Jl=n(),ie=l("h2"),Se=l("a"),Ns=l("span"),m(dt.$$.fragment),Zn=n(),qs=l("span"),Vn=s("Start contributing! (Pull Requests)"),Kl=n(),$o=l("p"),Xn=s(`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),Ql=n(),k=l("p"),eh=s("You will need basic "),Rs=l("code"),th=s("git"),oh=s(` proficiency to be able to contribute to
`),Ws=l("code"),sh=s("transformers"),rh=s(". "),Gs=l("code"),lh=s("git"),ah=s(` is not the easiest tool to use but it has the greatest
manual. Type `),js=l("code"),ih=s("git --help"),nh=s(" in a shell and enjoy. If you prefer books, "),ct=l("a"),hh=s(`Pro
Git`),uh=s(" is a very good reference."),Zl=n(),Eo=l("p"),fh=s("Follow these steps to start contributing:"),Vl=n(),E=l("ol"),Hs=l("li"),pt=l("p"),dh=s("Fork the "),mt=l("a"),ch=s("repository"),ph=s(` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),mh=n(),yt=l("li"),Ms=l("p"),yh=s("Clone your fork to your local disk, and add the base repository as a remote:"),vh=n(),m(vt.$$.fragment),gh=n(),ne=l("li"),Us=l("p"),wh=s("Create a new branch to hold your development changes:"),bh=n(),m(gt.$$.fragment),$h=n(),xe=l("p"),Fs=l("strong"),Eh=s("Do not"),_h=s(" work on the "),Ys=l("code"),kh=s("master"),Ph=s(" branch."),Ih=n(),P=l("li"),Bs=l("p"),Oh=s("Set up a development environment by running the following command in a virtual environment:"),Ch=n(),m(wt.$$.fragment),Sh=n(),he=l("p"),xh=s(`(If transformers was already installed in the virtual environment, remove
it with `),zs=l("code"),Ah=s("pip uninstall transformers"),Th=s(` before reinstalling it in editable
mode with the `),Js=l("code"),Dh=s("-e"),Lh=s(" flag.)"),Nh=n(),bt=l("p"),qh=s("To run the full test suite, you might need the additional dependency on "),Ks=l("code"),Rh=s("datasets"),Wh=s(` which requires a separate source
install:`),Gh=n(),m($t.$$.fragment),jh=n(),ue=l("p"),Hh=s("If you have already cloned that repo, you might need to "),Qs=l("code"),Mh=s("git pull"),Uh=s(" to get the most recent changes in the "),Zs=l("code"),Fh=s("datasets"),Yh=s(`
library.`),Bh=n(),c=l("li"),Vs=l("p"),zh=s("Develop the features on your branch."),Jh=n(),Xs=l("p"),Kh=s(`As you work on the features, you should make sure that the test suite
passes:`),Qh=n(),m(Et.$$.fragment),Zh=n(),fe=l("p"),Vh=s("Note, that this command uses "),er=l("code"),Xh=s("-n auto"),eu=s(" pytest flag, therefore, it will start as many parallel "),tr=l("code"),tu=s("pytest"),ou=s(" processes as the number of your computer\u2019s CPU-cores, and if you have lots of those and a few GPUs and not a great amount of RAM, it\u2019s likely to overload your computer. Therefore, to run the test suite, you may want to consider using this command instead:"),su=n(),m(_t.$$.fragment),ru=n(),kt=l("p"),lu=s("Adjust the value of "),or=l("code"),au=s("-n"),iu=s(" to fit the load your hardware can support."),nu=n(),J=l("p"),sr=l("code"),hu=s("transformers"),uu=s(" relies on "),rr=l("code"),fu=s("black"),du=s(" and "),lr=l("code"),cu=s("isort"),pu=s(` to format its source code
consistently. After you make changes, format them with:`),mu=n(),m(Pt.$$.fragment),yu=n(),Ae=l("p"),ar=l("code"),vu=s("transformers"),gu=s(" also uses "),ir=l("code"),wu=s("flake8"),bu=s(` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),$u=n(),m(It.$$.fragment),Eu=n(),nr=l("p"),_u=s("You can do the automatic style corrections and code verifications that can\u2019t be automated in one go:"),ku=n(),m(Ot.$$.fragment),Pu=n(),hr=l("p"),Iu=s("This target is also optimized to only work with files modified by the PR you\u2019re working on."),Ou=n(),de=l("p"),Cu=s("If you\u2019re modifying documents under "),ur=l("code"),Su=s("docs/source"),xu=s(`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements, by
running `),fr=l("code"),Au=s("pip install .[tf,torch,docs]"),Tu=s(` once from the root of this repository
and then run:`),Du=n(),m(Ct.$$.fragment),Lu=n(),ce=l("p"),Nu=s("Once you\u2019re happy with your changes, add changed files using "),dr=l("code"),qu=s("git add"),Ru=s(` and
make a commit with `),cr=l("code"),Wu=s("git commit"),Gu=s(" to record your changes locally:"),ju=n(),m(St.$$.fragment),Hu=n(),xt=l("p"),Mu=s("Please write "),At=l("a"),Uu=s(`good commit
messages`),Fu=s("."),Yu=n(),pr=l("p"),Bu=s(`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),zu=n(),m(Tt.$$.fragment),Ju=n(),mr=l("p"),Ku=s("Push the changes to your account using:"),Qu=n(),m(Dt.$$.fragment),Zu=n(),yr=l("li"),Lt=l("p"),Vu=s("Once you are satisfied ("),vr=l("strong"),Xu=s("and the checklist below is happy too"),ef=s(`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),tf=n(),gr=l("li"),wr=l("p"),of=s(`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),Xl=n(),pe=l("h3"),Te=l("a"),br=l("span"),m(Nt.$$.fragment),sf=n(),$r=l("span"),rf=s("Checklist"),ea=n(),_=l("ol"),Er=l("li"),lf=s("The title of your pull request should be a summary of its contribution;"),af=n(),_r=l("li"),nf=s(`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),hf=n(),qt=l("li"),uf=s("To indicate a work in progress please prefix the title with "),kr=l("code"),ff=s("[WIP]"),df=s(`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),cf=n(),Pr=l("li"),pf=s("Make sure existing tests pass;"),mf=n(),_o=l("li"),yf=s("Add high-coverage tests. No quality testing = no merge."),me=l("ul"),Rt=l("li"),vf=s(`If you are adding a new model, make sure that you use
`),Ir=l("code"),gf=s("ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),wf=s(", which triggers the common tests."),bf=n(),ye=l("li"),$f=s("If you are adding new "),Or=l("code"),Ef=s("@slow"),_f=s(` tests, make sure they pass using
`),Cr=l("code"),kf=s("RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),Pf=s("."),If=n(),Wt=l("li"),Of=s(`If you are adding a new tokenizer, write tests, and make sure
`),Sr=l("code"),Cf=s("RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),Sf=s(` passes.
CircleCI does not run the slow tests, but github actions does every night!`),xf=n(),Gt=l("li"),Af=s("All public methods must have informative docstrings that work nicely with sphinx. See "),xr=l("code"),Tf=s("modeling_bert.py"),Df=s(` for an
example.`),Lf=n(),U=l("li"),Nf=s("Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added. This includes images, videos and other non-text files. We prefer to leverage a hf.co hosted "),Ar=l("code"),qf=s("dataset"),Rf=s(` like
the ones hosted on `),Tr=l("code"),Wf=s("hf-internal-testing"),Gf=s("("),jt=l("a"),jf=s("https://huggingface.co/hf-internal-testing"),Hf=s(`) in which to place these files and reference
them by URL.`),ta=n(),Ht=l("p"),Mf=s("See more about the checks run on a pull request in our "),ko=l("a"),Uf=s("PR guide"),oa=n(),ve=l("h3"),De=l("a"),Dr=l("span"),m(Mt.$$.fragment),Ff=n(),Lr=l("span"),Yf=s("Tests"),sa=n(),K=l("p"),Bf=s(`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),Ut=l("a"),zf=s("tests folder"),Jf=s(` and examples tests in the
`),Ft=l("a"),Kf=s("examples folder"),Qf=s("."),ra=n(),q=l("p"),Zf=s("We like "),Nr=l("code"),Vf=s("pytest"),Xf=s(" and "),qr=l("code"),ed=s("pytest-xdist"),td=s(` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Rr=l("code"),od=s("pytest"),sd=s(" for the library:"),la=n(),m(Yt.$$.fragment),aa=n(),Po=l("p"),rd=s("and for the examples:"),ia=n(),m(Bt.$$.fragment),na=n(),R=l("p"),ld=s("In fact, that\u2019s how "),Wr=l("code"),ad=s("make test"),id=s(" and "),Gr=l("code"),nd=s("make test-examples"),hd=s(" are implemented (sans the "),jr=l("code"),ud=s("pip install"),fd=s(" line)!"),ha=n(),Io=l("p"),dd=s(`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),ua=n(),Q=l("p"),cd=s("By default, slow tests are skipped. Set the "),Hr=l("code"),pd=s("RUN_SLOW"),md=s(` environment variable to
`),Mr=l("code"),yd=s("yes"),vd=s(` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),fa=n(),m(zt.$$.fragment),da=n(),Z=l("p"),gd=s("Likewise, set the "),Ur=l("code"),wd=s("RUN_CUSTOM_TOKENIZERS"),bd=s(" environment variable to "),Fr=l("code"),$d=s("yes"),Ed=s(` to run
tests for custom tokenizers, which don\u2019t run by default either.`),ca=n(),V=l("p"),_d=s("\u{1F917} Transformers uses "),Yr=l("code"),kd=s("pytest"),Pd=s(` as a test runner only. It doesn\u2019t use any
`),Br=l("code"),Id=s("pytest"),Od=s("-specific features in the test suite itself."),pa=n(),X=l("p"),Cd=s("This means "),zr=l("code"),Sd=s("unittest"),xd=s(` is fully supported. Here\u2019s how to run tests with
`),Jr=l("code"),Ad=s("unittest"),Td=s(":"),ma=n(),m(Jt.$$.fragment),ya=n(),ge=l("h3"),Le=l("a"),Kr=l("span"),m(Kt.$$.fragment),Dd=n(),Qr=l("span"),Ld=s("Style guide"),va=n(),W=l("p"),Nd=s("For documentation strings, "),Zr=l("code"),qd=s("transformers"),Rd=s(" follows the "),Qt=l("a"),Wd=s("google style"),Gd=s(`.
Check our `),Zt=l("a"),jd=s("documentation writing guide"),Hd=s(`
for more information.`),ga=n(),we=l("h4"),Ne=l("a"),Vr=l("span"),m(Vt.$$.fragment),Md=n(),Xr=l("span"),Ud=s("This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"),wa=n(),be=l("h3"),qe=l("a"),el=l("span"),m(Xt.$$.fragment),Fd=n(),tl=l("span"),Yd=s("Develop on Windows"),ba=n(),ee=l("p"),Bd=s("On windows, you need to configure git to transform Windows "),ol=l("code"),zd=s("CRLF"),Jd=s(" line endings to Linux "),sl=l("code"),Kd=s("LF"),Qd=s(" line endings:"),$a=n(),Oo=l("p"),rl=l("code"),Zd=s("git config core.autocrlf input"),Ea=n(),Co=l("p"),Vd=s("One way one can run the make command on Window is to pass by MSYS2:"),_a=n(),G=l("ol"),So=l("li"),eo=l("a"),Xd=s("Download MSYS2"),ec=s(", we assume to have it installed in C:\\msys64"),tc=n(),ll=l("li"),oc=s("Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),sc=n(),Re=l("li"),rc=s("Run in the shell: "),al=l("code"),lc=s("pacman -Syu"),ac=s(" and install make with "),il=l("code"),ic=s("pacman -S make"),nc=n(),to=l("li"),hc=s("Add "),nl=l("code"),uc=s("C:\\msys64\\usr\\bin"),fc=s(" to your PATH environment variable."),ka=n(),We=l("p"),dc=s("You can now use "),hl=l("code"),cc=s("make"),pc=s(" from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),Pa=n(),$e=l("h3"),Ge=l("a"),ul=l("span"),m(oo.$$.fragment),mc=n(),fl=l("span"),yc=s("Syncing forked master with upstream (HuggingFace) master"),Ia=n(),xo=l("p"),vc=s(`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnessary notifications to the developers involved in these PRs,
when syncing the master branch of a forked repository, please, follow these steps:`),Oa=n(),je=l("ol"),dl=l("li"),gc=s("When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked master."),wc=n(),cl=l("li"),bc=s("If a PR is absolutely necessary, use the following steps after checking out your branch:"),Ca=n(),m(so.$$.fragment),this.h()},l(t){const u=Hy('[data-svelte="svelte-1phssyn"]',document.head);F=a(u,"META",{name:!0,content:!0}),u.forEach(o),lo=h(t),A=a(t,"H1",{class:!0});var xa=i(A);M=a(xa,"A",{id:!0,class:!0,href:!0});var kc=i(M);Jo=a(kc,"SPAN",{});var Pc=i(Jo);y(Ze.$$.fragment,Pc),Pc.forEach(o),kc.forEach(o),ni=h(xa),Ko=a(xa,"SPAN",{});var Ic=i(Ko);hi=r(Ic,"How to contribute to transformers?"),Ic.forEach(o),xa.forEach(o),vl=h(t),ao=a(t,"P",{});var Oc=i(ao);ui=r(Oc,`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),Oc.forEach(o),gl=h(t),io=a(t,"P",{});var Cc=i(io);fi=r(Cc,`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),Cc.forEach(o),wl=h(t),Ee=a(t,"P",{});var Aa=i(Ee);di=r(Aa,`Whichever way you choose to contribute, please be mindful to respect our
`),Ve=a(Aa,"A",{href:!0,rel:!0});var Sc=i(Ve);ci=r(Sc,"code of conduct"),Sc.forEach(o),pi=r(Aa,"."),Aa.forEach(o),bl=h(t),oe=a(t,"H2",{class:!0});var Ta=i(oe);_e=a(Ta,"A",{id:!0,class:!0,href:!0});var xc=i(_e);Qo=a(xc,"SPAN",{});var Ac=i(Qo);y(Xe.$$.fragment,Ac),Ac.forEach(o),xc.forEach(o),mi=h(Ta),Zo=a(Ta,"SPAN",{});var Tc=i(Zo);yi=r(Tc,"You can contribute in so many ways!"),Tc.forEach(o),Ta.forEach(o),$l=h(t),no=a(t,"P",{});var Dc=i(no);vi=r(Dc,"There are 4 ways you can contribute to transformers:"),Dc.forEach(o),El=h(t),T=a(t,"UL",{});var He=i(T);Vo=a(He,"LI",{});var Lc=i(Vo);gi=r(Lc,"Fixing outstanding issues with the existing code;"),Lc.forEach(o),wi=h(He),Xo=a(He,"LI",{});var Nc=i(Xo);bi=r(Nc,"Implementing new models;"),Nc.forEach(o),$i=h(He),es=a(He,"LI",{});var qc=i(es);Ei=r(qc,"Contributing to the examples or to the documentation;"),qc.forEach(o),_i=h(He),ts=a(He,"LI",{});var Rc=i(ts);ki=r(Rc,"Submitting issues related to bugs or desired new features."),Rc.forEach(o),He.forEach(o),_l=h(t),D=a(t,"P",{});var Me=i(D);Pi=r(Me,"In particular there is a special "),et=a(Me,"A",{href:!0,rel:!0});var Wc=i(et);Ii=r(Wc,`Good First
Issue`),Wc.forEach(o),Oi=r(Me,` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),os=a(Me,"CODE",{});var Gc=i(os);Ci=r(Gc,"Good Second Issue"),Gc.forEach(o),Si=r(Me,` label. These are
typically slightly more complicated than the Issues with just `),ss=a(Me,"CODE",{});var jc=i(ss);xi=r(jc,"Good First Issue"),jc.forEach(o),Ai=r(Me,` label. But if you
feel you know what you\u2019re doing, go for it.`),Me.forEach(o),kl=h(t),ho=a(t,"P",{});var Hc=i(ho);rs=a(Hc,"EM",{});var Mc=i(rs);Ti=r(Mc,"All are equally valuable to the community."),Mc.forEach(o),Hc.forEach(o),Pl=h(t),se=a(t,"H2",{class:!0});var Da=i(se);ke=a(Da,"A",{id:!0,class:!0,href:!0});var Uc=i(ke);ls=a(Uc,"SPAN",{});var Fc=i(ls);y(tt.$$.fragment,Fc),Fc.forEach(o),Uc.forEach(o),Di=h(Da),as=a(Da,"SPAN",{});var Yc=i(as);Li=r(Yc,"Submitting a new issue or feature request"),Yc.forEach(o),Da.forEach(o),Il=h(t),uo=a(t,"P",{});var Bc=i(uo);Ni=r(Bc,`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),Bc.forEach(o),Ol=h(t),re=a(t,"H3",{class:!0});var La=i(re);Pe=a(La,"A",{id:!0,class:!0,href:!0});var zc=i(Pe);is=a(zc,"SPAN",{});var Jc=i(is);y(ot.$$.fragment,Jc),Jc.forEach(o),zc.forEach(o),qi=h(La),ns=a(La,"SPAN",{});var Kc=i(ns);Ri=r(Kc,"Did you find a bug?"),Kc.forEach(o),La.forEach(o),Cl=h(t),fo=a(t,"P",{});var Qc=i(fo);Wi=r(Qc,`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),Qc.forEach(o),Sl=h(t),Ie=a(t,"P",{});var Na=i(Ie);Gi=r(Na,"First, we would really appreciate it if you could "),hs=a(Na,"STRONG",{});var Zc=i(hs);ji=r(Zc,`make sure the bug was not
already reported`),Zc.forEach(o),Hi=r(Na," (use the search bar on Github under Issues)."),Na.forEach(o),xl=h(t),co=a(t,"P",{});var Vc=i(co);Mi=r(Vc,"Did not find it? :( So we can act quickly on it, please follow these steps:"),Vc.forEach(o),Al=h(t),Y=a(t,"UL",{});var Ao=i(Y);C=a(Ao,"LI",{});var te=i(C);Ui=r(te,"Include your "),us=a(te,"STRONG",{});var Xc=i(us);Fi=r(Xc,"OS type and version"),Xc.forEach(o),Yi=r(te,", the versions of "),fs=a(te,"STRONG",{});var ep=i(fs);Bi=r(ep,"Python"),ep.forEach(o),zi=r(te,", "),ds=a(te,"STRONG",{});var tp=i(ds);Ji=r(tp,"PyTorch"),tp.forEach(o),Ki=r(te,` and
`),cs=a(te,"STRONG",{});var op=i(cs);Qi=r(op,"Tensorflow"),op.forEach(o),Zi=r(te," when applicable;"),te.forEach(o),Vi=h(Ao),ps=a(Ao,"LI",{});var sp=i(ps);Xi=r(sp,`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),sp.forEach(o),en=h(Ao),st=a(Ao,"LI",{});var qa=i(st);tn=r(qa,"Provide the "),ms=a(qa,"EM",{});var rp=i(ms);on=r(rp,"full"),rp.forEach(o),sn=r(qa," traceback if an exception is raised."),qa.forEach(o),Ao.forEach(o),Tl=h(t),po=a(t,"P",{});var lp=i(po);rn=r(lp,"To get the OS and software versions automatically, you can run the following command:"),lp.forEach(o),Dl=h(t),y(rt.$$.fragment,t),Ll=h(t),mo=a(t,"P",{});var ap=i(mo);ln=r(ap,"or from the root of the repository the following command:"),ap.forEach(o),Nl=h(t),y(lt.$$.fragment,t),ql=h(t),le=a(t,"H3",{class:!0});var Ra=i(le);Oe=a(Ra,"A",{id:!0,class:!0,href:!0});var ip=i(Oe);ys=a(ip,"SPAN",{});var np=i(ys);y(at.$$.fragment,np),np.forEach(o),ip.forEach(o),an=h(Ra),vs=a(Ra,"SPAN",{});var hp=i(vs);nn=r(hp,"Do you want to implement a new model?"),hp.forEach(o),Ra.forEach(o),Rl=h(t),yo=a(t,"P",{});var up=i(yo);hn=r(up,"Awesome! Please provide the following information:"),up.forEach(o),Wl=h(t),B=a(t,"UL",{});var To=i(B);gs=a(To,"LI",{});var fp=i(gs);un=r(fp,"Short description of the model and link to the paper;"),fp.forEach(o),fn=h(To),ws=a(To,"LI",{});var dp=i(ws);dn=r(dp,"Link to the implementation if it is open-source;"),dp.forEach(o),cn=h(To),bs=a(To,"LI",{});var cp=i(bs);pn=r(cp,"Link to the model weights if they are available."),cp.forEach(o),To.forEach(o),Gl=h(t),vo=a(t,"P",{});var pp=i(vo);mn=r(pp,`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),pp.forEach(o),jl=h(t),L=a(t,"P",{});var Ue=i(L);yn=r(Ue,"We have added a "),$s=a(Ue,"STRONG",{});var mp=i($s);vn=r(mp,"detailed guide and templates"),mp.forEach(o),gn=r(Ue,` to guide you in the process of adding a new model. You can find them
in the `),Es=a(Ue,"CODE",{});var yp=i(Es);wn=r(yp,"templates"),yp.forEach(o),bn=r(Ue,"("),it=a(Ue,"A",{href:!0,rel:!0});var vp=i(it);$n=r(vp,"https://github.com/huggingface/transformers/tree/master/templates"),vp.forEach(o),En=r(Ue,") folder."),Ue.forEach(o),Hl=h(t),ae=a(t,"H3",{class:!0});var Wa=i(ae);Ce=a(Wa,"A",{id:!0,class:!0,href:!0});var gp=i(Ce);_s=a(gp,"SPAN",{});var wp=i(_s);y(nt.$$.fragment,wp),wp.forEach(o),gp.forEach(o),_n=h(Wa),ks=a(Wa,"SPAN",{});var bp=i(ks);kn=r(bp,"Do you want a new feature (that is not a model)?"),bp.forEach(o),Wa.forEach(o),Ml=h(t),go=a(t,"P",{});var $p=i(go);Pn=r($p,"A world-class feature request addresses the following points:"),$p.forEach(o),Ul=h(t),wo=a(t,"OL",{});var Ep=i(wo);Ps=a(Ep,"LI",{});var _p=i(Ps);In=r(_p,"Motivation first:"),_p.forEach(o),Ep.forEach(o),Fl=h(t),z=a(t,"UL",{});var Do=i(z);Is=a(Do,"LI",{});var kp=i(Is);On=r(kp,`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),kp.forEach(o),Cn=h(Do),Os=a(Do,"LI",{});var Pp=i(Os);Sn=r(Pp,`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),Pp.forEach(o),xn=h(Do),Cs=a(Do,"LI",{});var Ip=i(Cs);An=r(Ip,`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),Ip.forEach(o),Do.forEach(o),Yl=h(t),S=a(t,"OL",{start:!0});var Fe=i(S);ht=a(Fe,"LI",{});var Ga=i(ht);Tn=r(Ga,"Write a "),Ss=a(Ga,"EM",{});var Op=i(Ss);Dn=r(Op,"full paragraph"),Op.forEach(o),Ln=r(Ga," describing the feature;"),Ga.forEach(o),Nn=h(Fe),ut=a(Fe,"LI",{});var ja=i(ut);qn=r(ja,"Provide a "),xs=a(ja,"STRONG",{});var Cp=i(xs);Rn=r(Cp,"code snippet"),Cp.forEach(o),Wn=r(ja," that demonstrates its future use;"),ja.forEach(o),Gn=h(Fe),As=a(Fe,"LI",{});var Sp=i(As);jn=r(Sp,"In case this is related to a paper, please attach a link;"),Sp.forEach(o),Hn=h(Fe),Ts=a(Fe,"LI",{});var xp=i(Ts);Mn=r(xp,"Attach any additional information (drawings, screenshots, etc.) you think may help."),xp.forEach(o),Fe.forEach(o),Bl=h(t),bo=a(t,"P",{});var Ap=i(bo);Un=r(Ap,`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),Ap.forEach(o),zl=h(t),N=a(t,"P",{});var Ye=i(N);Fn=r(Ye,"We have added "),Ds=a(Ye,"STRONG",{});var Tp=i(Ds);Yn=r(Tp,"templates"),Tp.forEach(o),Bn=r(Ye,` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),Ls=a(Ye,"CODE",{});var Dp=i(Ls);zn=r(Dp,"templates"),Dp.forEach(o),Jn=r(Ye,"("),ft=a(Ye,"A",{href:!0,rel:!0});var Lp=i(ft);Kn=r(Lp,"https://github.com/huggingface/transformers/tree/master/templates"),Lp.forEach(o),Qn=r(Ye,`)
folder.`),Ye.forEach(o),Jl=h(t),ie=a(t,"H2",{class:!0});var Ha=i(ie);Se=a(Ha,"A",{id:!0,class:!0,href:!0});var Np=i(Se);Ns=a(Np,"SPAN",{});var qp=i(Ns);y(dt.$$.fragment,qp),qp.forEach(o),Np.forEach(o),Zn=h(Ha),qs=a(Ha,"SPAN",{});var Rp=i(qs);Vn=r(Rp,"Start contributing! (Pull Requests)"),Rp.forEach(o),Ha.forEach(o),Kl=h(t),$o=a(t,"P",{});var Wp=i($o);Xn=r(Wp,`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),Wp.forEach(o),Ql=h(t),k=a(t,"P",{});var j=i(k);eh=r(j,"You will need basic "),Rs=a(j,"CODE",{});var Gp=i(Rs);th=r(Gp,"git"),Gp.forEach(o),oh=r(j,` proficiency to be able to contribute to
`),Ws=a(j,"CODE",{});var jp=i(Ws);sh=r(jp,"transformers"),jp.forEach(o),rh=r(j,". "),Gs=a(j,"CODE",{});var Hp=i(Gs);lh=r(Hp,"git"),Hp.forEach(o),ah=r(j,` is not the easiest tool to use but it has the greatest
manual. Type `),js=a(j,"CODE",{});var Mp=i(js);ih=r(Mp,"git --help"),Mp.forEach(o),nh=r(j," in a shell and enjoy. If you prefer books, "),ct=a(j,"A",{href:!0,rel:!0});var Up=i(ct);hh=r(Up,`Pro
Git`),Up.forEach(o),uh=r(j," is a very good reference."),j.forEach(o),Zl=h(t),Eo=a(t,"P",{});var Fp=i(Eo);fh=r(Fp,"Follow these steps to start contributing:"),Fp.forEach(o),Vl=h(t),E=a(t,"OL",{});var I=i(E);Hs=a(I,"LI",{});var Yp=i(Hs);pt=a(Yp,"P",{});var Ma=i(pt);dh=r(Ma,"Fork the "),mt=a(Ma,"A",{href:!0,rel:!0});var Bp=i(mt);ch=r(Bp,"repository"),Bp.forEach(o),ph=r(Ma,` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),Ma.forEach(o),Yp.forEach(o),mh=h(I),yt=a(I,"LI",{});var Ua=i(yt);Ms=a(Ua,"P",{});var zp=i(Ms);yh=r(zp,"Clone your fork to your local disk, and add the base repository as a remote:"),zp.forEach(o),vh=h(Ua),y(vt.$$.fragment,Ua),Ua.forEach(o),gh=h(I),ne=a(I,"LI",{});var Lo=i(ne);Us=a(Lo,"P",{});var Jp=i(Us);wh=r(Jp,"Create a new branch to hold your development changes:"),Jp.forEach(o),bh=h(Lo),y(gt.$$.fragment,Lo),$h=h(Lo),xe=a(Lo,"P",{});var pl=i(xe);Fs=a(pl,"STRONG",{});var Kp=i(Fs);Eh=r(Kp,"Do not"),Kp.forEach(o),_h=r(pl," work on the "),Ys=a(pl,"CODE",{});var Qp=i(Ys);kh=r(Qp,"master"),Qp.forEach(o),Ph=r(pl," branch."),pl.forEach(o),Lo.forEach(o),Ih=h(I),P=a(I,"LI",{});var H=i(P);Bs=a(H,"P",{});var Zp=i(Bs);Oh=r(Zp,"Set up a development environment by running the following command in a virtual environment:"),Zp.forEach(o),Ch=h(H),y(wt.$$.fragment,H),Sh=h(H),he=a(H,"P",{});var No=i(he);xh=r(No,`(If transformers was already installed in the virtual environment, remove
it with `),zs=a(No,"CODE",{});var Vp=i(zs);Ah=r(Vp,"pip uninstall transformers"),Vp.forEach(o),Th=r(No,` before reinstalling it in editable
mode with the `),Js=a(No,"CODE",{});var Xp=i(Js);Dh=r(Xp,"-e"),Xp.forEach(o),Lh=r(No," flag.)"),No.forEach(o),Nh=h(H),bt=a(H,"P",{});var Fa=i(bt);qh=r(Fa,"To run the full test suite, you might need the additional dependency on "),Ks=a(Fa,"CODE",{});var em=i(Ks);Rh=r(em,"datasets"),em.forEach(o),Wh=r(Fa,` which requires a separate source
install:`),Fa.forEach(o),Gh=h(H),y($t.$$.fragment,H),jh=h(H),ue=a(H,"P",{});var qo=i(ue);Hh=r(qo,"If you have already cloned that repo, you might need to "),Qs=a(qo,"CODE",{});var tm=i(Qs);Mh=r(tm,"git pull"),tm.forEach(o),Uh=r(qo," to get the most recent changes in the "),Zs=a(qo,"CODE",{});var om=i(Zs);Fh=r(om,"datasets"),om.forEach(o),Yh=r(qo,`
library.`),qo.forEach(o),H.forEach(o),Bh=h(I),c=a(I,"LI",{});var p=i(c);Vs=a(p,"P",{});var sm=i(Vs);zh=r(sm,"Develop the features on your branch."),sm.forEach(o),Jh=h(p),Xs=a(p,"P",{});var rm=i(Xs);Kh=r(rm,`As you work on the features, you should make sure that the test suite
passes:`),rm.forEach(o),Qh=h(p),y(Et.$$.fragment,p),Zh=h(p),fe=a(p,"P",{});var Ro=i(fe);Vh=r(Ro,"Note, that this command uses "),er=a(Ro,"CODE",{});var lm=i(er);Xh=r(lm,"-n auto"),lm.forEach(o),eu=r(Ro," pytest flag, therefore, it will start as many parallel "),tr=a(Ro,"CODE",{});var am=i(tr);tu=r(am,"pytest"),am.forEach(o),ou=r(Ro," processes as the number of your computer\u2019s CPU-cores, and if you have lots of those and a few GPUs and not a great amount of RAM, it\u2019s likely to overload your computer. Therefore, to run the test suite, you may want to consider using this command instead:"),Ro.forEach(o),su=h(p),y(_t.$$.fragment,p),ru=h(p),kt=a(p,"P",{});var Ya=i(kt);lu=r(Ya,"Adjust the value of "),or=a(Ya,"CODE",{});var im=i(or);au=r(im,"-n"),im.forEach(o),iu=r(Ya," to fit the load your hardware can support."),Ya.forEach(o),nu=h(p),J=a(p,"P",{});var ro=i(J);sr=a(ro,"CODE",{});var nm=i(sr);hu=r(nm,"transformers"),nm.forEach(o),uu=r(ro," relies on "),rr=a(ro,"CODE",{});var hm=i(rr);fu=r(hm,"black"),hm.forEach(o),du=r(ro," and "),lr=a(ro,"CODE",{});var um=i(lr);cu=r(um,"isort"),um.forEach(o),pu=r(ro,` to format its source code
consistently. After you make changes, format them with:`),ro.forEach(o),mu=h(p),y(Pt.$$.fragment,p),yu=h(p),Ae=a(p,"P",{});var ml=i(Ae);ar=a(ml,"CODE",{});var fm=i(ar);vu=r(fm,"transformers"),fm.forEach(o),gu=r(ml," also uses "),ir=a(ml,"CODE",{});var dm=i(ir);wu=r(dm,"flake8"),dm.forEach(o),bu=r(ml,` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),ml.forEach(o),$u=h(p),y(It.$$.fragment,p),Eu=h(p),nr=a(p,"P",{});var cm=i(nr);_u=r(cm,"You can do the automatic style corrections and code verifications that can\u2019t be automated in one go:"),cm.forEach(o),ku=h(p),y(Ot.$$.fragment,p),Pu=h(p),hr=a(p,"P",{});var pm=i(hr);Iu=r(pm,"This target is also optimized to only work with files modified by the PR you\u2019re working on."),pm.forEach(o),Ou=h(p),de=a(p,"P",{});var Wo=i(de);Cu=r(Wo,"If you\u2019re modifying documents under "),ur=a(Wo,"CODE",{});var mm=i(ur);Su=r(mm,"docs/source"),mm.forEach(o),xu=r(Wo,`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements, by
running `),fr=a(Wo,"CODE",{});var ym=i(fr);Au=r(ym,"pip install .[tf,torch,docs]"),ym.forEach(o),Tu=r(Wo,` once from the root of this repository
and then run:`),Wo.forEach(o),Du=h(p),y(Ct.$$.fragment,p),Lu=h(p),ce=a(p,"P",{});var Go=i(ce);Nu=r(Go,"Once you\u2019re happy with your changes, add changed files using "),dr=a(Go,"CODE",{});var vm=i(dr);qu=r(vm,"git add"),vm.forEach(o),Ru=r(Go,` and
make a commit with `),cr=a(Go,"CODE",{});var gm=i(cr);Wu=r(gm,"git commit"),gm.forEach(o),Gu=r(Go," to record your changes locally:"),Go.forEach(o),ju=h(p),y(St.$$.fragment,p),Hu=h(p),xt=a(p,"P",{});var Ba=i(xt);Mu=r(Ba,"Please write "),At=a(Ba,"A",{href:!0,rel:!0});var wm=i(At);Uu=r(wm,`good commit
messages`),wm.forEach(o),Fu=r(Ba,"."),Ba.forEach(o),Yu=h(p),pr=a(p,"P",{});var bm=i(pr);Bu=r(bm,`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),bm.forEach(o),zu=h(p),y(Tt.$$.fragment,p),Ju=h(p),mr=a(p,"P",{});var $m=i(mr);Ku=r($m,"Push the changes to your account using:"),$m.forEach(o),Qu=h(p),y(Dt.$$.fragment,p),p.forEach(o),Zu=h(I),yr=a(I,"LI",{});var Em=i(yr);Lt=a(Em,"P",{});var za=i(Lt);Vu=r(za,"Once you are satisfied ("),vr=a(za,"STRONG",{});var _m=i(vr);Xu=r(_m,"and the checklist below is happy too"),_m.forEach(o),ef=r(za,`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),za.forEach(o),Em.forEach(o),tf=h(I),gr=a(I,"LI",{});var km=i(gr);wr=a(km,"P",{});var Pm=i(wr);of=r(Pm,`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),Pm.forEach(o),km.forEach(o),I.forEach(o),Xl=h(t),pe=a(t,"H3",{class:!0});var Ja=i(pe);Te=a(Ja,"A",{id:!0,class:!0,href:!0});var Im=i(Te);br=a(Im,"SPAN",{});var Om=i(br);y(Nt.$$.fragment,Om),Om.forEach(o),Im.forEach(o),sf=h(Ja),$r=a(Ja,"SPAN",{});var Cm=i($r);rf=r(Cm,"Checklist"),Cm.forEach(o),Ja.forEach(o),ea=h(t),_=a(t,"OL",{});var O=i(_);Er=a(O,"LI",{});var Sm=i(Er);lf=r(Sm,"The title of your pull request should be a summary of its contribution;"),Sm.forEach(o),af=h(O),_r=a(O,"LI",{});var xm=i(_r);nf=r(xm,`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),xm.forEach(o),hf=h(O),qt=a(O,"LI",{});var Ka=i(qt);uf=r(Ka,"To indicate a work in progress please prefix the title with "),kr=a(Ka,"CODE",{});var Am=i(kr);ff=r(Am,"[WIP]"),Am.forEach(o),df=r(Ka,`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),Ka.forEach(o),cf=h(O),Pr=a(O,"LI",{});var Tm=i(Pr);pf=r(Tm,"Make sure existing tests pass;"),Tm.forEach(o),mf=h(O),_o=a(O,"LI",{});var $c=i(_o);yf=r($c,"Add high-coverage tests. No quality testing = no merge."),me=a($c,"UL",{});var jo=i(me);Rt=a(jo,"LI",{});var Qa=i(Rt);vf=r(Qa,`If you are adding a new model, make sure that you use
`),Ir=a(Qa,"CODE",{});var Dm=i(Ir);gf=r(Dm,"ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),Dm.forEach(o),wf=r(Qa,", which triggers the common tests."),Qa.forEach(o),bf=h(jo),ye=a(jo,"LI",{});var Ho=i(ye);$f=r(Ho,"If you are adding new "),Or=a(Ho,"CODE",{});var Lm=i(Or);Ef=r(Lm,"@slow"),Lm.forEach(o),_f=r(Ho,` tests, make sure they pass using
`),Cr=a(Ho,"CODE",{});var Nm=i(Cr);kf=r(Nm,"RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),Nm.forEach(o),Pf=r(Ho,"."),Ho.forEach(o),If=h(jo),Wt=a(jo,"LI",{});var Za=i(Wt);Of=r(Za,`If you are adding a new tokenizer, write tests, and make sure
`),Sr=a(Za,"CODE",{});var qm=i(Sr);Cf=r(qm,"RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),qm.forEach(o),Sf=r(Za,` passes.
CircleCI does not run the slow tests, but github actions does every night!`),Za.forEach(o),jo.forEach(o),$c.forEach(o),xf=h(O),Gt=a(O,"LI",{});var Va=i(Gt);Af=r(Va,"All public methods must have informative docstrings that work nicely with sphinx. See "),xr=a(Va,"CODE",{});var Rm=i(xr);Tf=r(Rm,"modeling_bert.py"),Rm.forEach(o),Df=r(Va,` for an
example.`),Va.forEach(o),Lf=h(O),U=a(O,"LI",{});var Be=i(U);Nf=r(Be,"Due to the rapidly growing repository, it is important to make sure that no files that would significantly weigh down the repository are added. This includes images, videos and other non-text files. We prefer to leverage a hf.co hosted "),Ar=a(Be,"CODE",{});var Wm=i(Ar);qf=r(Wm,"dataset"),Wm.forEach(o),Rf=r(Be,` like
the ones hosted on `),Tr=a(Be,"CODE",{});var Gm=i(Tr);Wf=r(Gm,"hf-internal-testing"),Gm.forEach(o),Gf=r(Be,"("),jt=a(Be,"A",{href:!0,rel:!0});var jm=i(jt);jf=r(jm,"https://huggingface.co/hf-internal-testing"),jm.forEach(o),Hf=r(Be,`) in which to place these files and reference
them by URL.`),Be.forEach(o),O.forEach(o),ta=h(t),Ht=a(t,"P",{});var Ec=i(Ht);Mf=r(Ec,"See more about the checks run on a pull request in our "),ko=a(Ec,"A",{href:!0});var Hm=i(ko);Uf=r(Hm,"PR guide"),Hm.forEach(o),Ec.forEach(o),oa=h(t),ve=a(t,"H3",{class:!0});var Xa=i(ve);De=a(Xa,"A",{id:!0,class:!0,href:!0});var Mm=i(De);Dr=a(Mm,"SPAN",{});var Um=i(Dr);y(Mt.$$.fragment,Um),Um.forEach(o),Mm.forEach(o),Ff=h(Xa),Lr=a(Xa,"SPAN",{});var Fm=i(Lr);Yf=r(Fm,"Tests"),Fm.forEach(o),Xa.forEach(o),sa=h(t),K=a(t,"P",{});var Mo=i(K);Bf=r(Mo,`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),Ut=a(Mo,"A",{href:!0,rel:!0});var Ym=i(Ut);zf=r(Ym,"tests folder"),Ym.forEach(o),Jf=r(Mo,` and examples tests in the
`),Ft=a(Mo,"A",{href:!0,rel:!0});var Bm=i(Ft);Kf=r(Bm,"examples folder"),Bm.forEach(o),Qf=r(Mo,"."),Mo.forEach(o),ra=h(t),q=a(t,"P",{});var ze=i(q);Zf=r(ze,"We like "),Nr=a(ze,"CODE",{});var zm=i(Nr);Vf=r(zm,"pytest"),zm.forEach(o),Xf=r(ze," and "),qr=a(ze,"CODE",{});var Jm=i(qr);ed=r(Jm,"pytest-xdist"),Jm.forEach(o),td=r(ze,` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Rr=a(ze,"CODE",{});var Km=i(Rr);od=r(Km,"pytest"),Km.forEach(o),sd=r(ze," for the library:"),ze.forEach(o),la=h(t),y(Yt.$$.fragment,t),aa=h(t),Po=a(t,"P",{});var Qm=i(Po);rd=r(Qm,"and for the examples:"),Qm.forEach(o),ia=h(t),y(Bt.$$.fragment,t),na=h(t),R=a(t,"P",{});var Je=i(R);ld=r(Je,"In fact, that\u2019s how "),Wr=a(Je,"CODE",{});var Zm=i(Wr);ad=r(Zm,"make test"),Zm.forEach(o),id=r(Je," and "),Gr=a(Je,"CODE",{});var Vm=i(Gr);nd=r(Vm,"make test-examples"),Vm.forEach(o),hd=r(Je," are implemented (sans the "),jr=a(Je,"CODE",{});var Xm=i(jr);ud=r(Xm,"pip install"),Xm.forEach(o),fd=r(Je," line)!"),Je.forEach(o),ha=h(t),Io=a(t,"P",{});var ey=i(Io);dd=r(ey,`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),ey.forEach(o),ua=h(t),Q=a(t,"P",{});var Uo=i(Q);cd=r(Uo,"By default, slow tests are skipped. Set the "),Hr=a(Uo,"CODE",{});var ty=i(Hr);pd=r(ty,"RUN_SLOW"),ty.forEach(o),md=r(Uo,` environment variable to
`),Mr=a(Uo,"CODE",{});var oy=i(Mr);yd=r(oy,"yes"),oy.forEach(o),vd=r(Uo,` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),Uo.forEach(o),fa=h(t),y(zt.$$.fragment,t),da=h(t),Z=a(t,"P",{});var Fo=i(Z);gd=r(Fo,"Likewise, set the "),Ur=a(Fo,"CODE",{});var sy=i(Ur);wd=r(sy,"RUN_CUSTOM_TOKENIZERS"),sy.forEach(o),bd=r(Fo," environment variable to "),Fr=a(Fo,"CODE",{});var ry=i(Fr);$d=r(ry,"yes"),ry.forEach(o),Ed=r(Fo,` to run
tests for custom tokenizers, which don\u2019t run by default either.`),Fo.forEach(o),ca=h(t),V=a(t,"P",{});var Yo=i(V);_d=r(Yo,"\u{1F917} Transformers uses "),Yr=a(Yo,"CODE",{});var ly=i(Yr);kd=r(ly,"pytest"),ly.forEach(o),Pd=r(Yo,` as a test runner only. It doesn\u2019t use any
`),Br=a(Yo,"CODE",{});var ay=i(Br);Id=r(ay,"pytest"),ay.forEach(o),Od=r(Yo,"-specific features in the test suite itself."),Yo.forEach(o),pa=h(t),X=a(t,"P",{});var Bo=i(X);Cd=r(Bo,"This means "),zr=a(Bo,"CODE",{});var iy=i(zr);Sd=r(iy,"unittest"),iy.forEach(o),xd=r(Bo,` is fully supported. Here\u2019s how to run tests with
`),Jr=a(Bo,"CODE",{});var ny=i(Jr);Ad=r(ny,"unittest"),ny.forEach(o),Td=r(Bo,":"),Bo.forEach(o),ma=h(t),y(Jt.$$.fragment,t),ya=h(t),ge=a(t,"H3",{class:!0});var ei=i(ge);Le=a(ei,"A",{id:!0,class:!0,href:!0});var hy=i(Le);Kr=a(hy,"SPAN",{});var uy=i(Kr);y(Kt.$$.fragment,uy),uy.forEach(o),hy.forEach(o),Dd=h(ei),Qr=a(ei,"SPAN",{});var fy=i(Qr);Ld=r(fy,"Style guide"),fy.forEach(o),ei.forEach(o),va=h(t),W=a(t,"P",{});var Ke=i(W);Nd=r(Ke,"For documentation strings, "),Zr=a(Ke,"CODE",{});var dy=i(Zr);qd=r(dy,"transformers"),dy.forEach(o),Rd=r(Ke," follows the "),Qt=a(Ke,"A",{href:!0,rel:!0});var cy=i(Qt);Wd=r(cy,"google style"),cy.forEach(o),Gd=r(Ke,`.
Check our `),Zt=a(Ke,"A",{href:!0,rel:!0});var py=i(Zt);jd=r(py,"documentation writing guide"),py.forEach(o),Hd=r(Ke,`
for more information.`),Ke.forEach(o),ga=h(t),we=a(t,"H4",{class:!0});var ti=i(we);Ne=a(ti,"A",{id:!0,class:!0,href:!0});var my=i(Ne);Vr=a(my,"SPAN",{});var yy=i(Vr);y(Vt.$$.fragment,yy),yy.forEach(o),my.forEach(o),Md=h(ti),Xr=a(ti,"SPAN",{});var vy=i(Xr);Ud=r(vy,"This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"),vy.forEach(o),ti.forEach(o),wa=h(t),be=a(t,"H3",{class:!0});var oi=i(be);qe=a(oi,"A",{id:!0,class:!0,href:!0});var gy=i(qe);el=a(gy,"SPAN",{});var wy=i(el);y(Xt.$$.fragment,wy),wy.forEach(o),gy.forEach(o),Fd=h(oi),tl=a(oi,"SPAN",{});var by=i(tl);Yd=r(by,"Develop on Windows"),by.forEach(o),oi.forEach(o),ba=h(t),ee=a(t,"P",{});var zo=i(ee);Bd=r(zo,"On windows, you need to configure git to transform Windows "),ol=a(zo,"CODE",{});var $y=i(ol);zd=r($y,"CRLF"),$y.forEach(o),Jd=r(zo," line endings to Linux "),sl=a(zo,"CODE",{});var Ey=i(sl);Kd=r(Ey,"LF"),Ey.forEach(o),Qd=r(zo," line endings:"),zo.forEach(o),$a=h(t),Oo=a(t,"P",{});var _y=i(Oo);rl=a(_y,"CODE",{});var ky=i(rl);Zd=r(ky,"git config core.autocrlf input"),ky.forEach(o),_y.forEach(o),Ea=h(t),Co=a(t,"P",{});var Py=i(Co);Vd=r(Py,"One way one can run the make command on Window is to pass by MSYS2:"),Py.forEach(o),_a=h(t),G=a(t,"OL",{});var Qe=i(G);So=a(Qe,"LI",{});var _c=i(So);eo=a(_c,"A",{href:!0,rel:!0});var Iy=i(eo);Xd=r(Iy,"Download MSYS2"),Iy.forEach(o),ec=r(_c,", we assume to have it installed in C:\\msys64"),_c.forEach(o),tc=h(Qe),ll=a(Qe,"LI",{});var Oy=i(ll);oc=r(Oy,"Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),Oy.forEach(o),sc=h(Qe),Re=a(Qe,"LI",{});var yl=i(Re);rc=r(yl,"Run in the shell: "),al=a(yl,"CODE",{});var Cy=i(al);lc=r(Cy,"pacman -Syu"),Cy.forEach(o),ac=r(yl," and install make with "),il=a(yl,"CODE",{});var Sy=i(il);ic=r(Sy,"pacman -S make"),Sy.forEach(o),yl.forEach(o),nc=h(Qe),to=a(Qe,"LI",{});var si=i(to);hc=r(si,"Add "),nl=a(si,"CODE",{});var xy=i(nl);uc=r(xy,"C:\\msys64\\usr\\bin"),xy.forEach(o),fc=r(si," to your PATH environment variable."),si.forEach(o),Qe.forEach(o),ka=h(t),We=a(t,"P",{});var ri=i(We);dc=r(ri,"You can now use "),hl=a(ri,"CODE",{});var Ay=i(hl);cc=r(Ay,"make"),Ay.forEach(o),pc=r(ri," from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),ri.forEach(o),Pa=h(t),$e=a(t,"H3",{class:!0});var li=i($e);Ge=a(li,"A",{id:!0,class:!0,href:!0});var Ty=i(Ge);ul=a(Ty,"SPAN",{});var Dy=i(ul);y(oo.$$.fragment,Dy),Dy.forEach(o),Ty.forEach(o),mc=h(li),fl=a(li,"SPAN",{});var Ly=i(fl);yc=r(Ly,"Syncing forked master with upstream (HuggingFace) master"),Ly.forEach(o),li.forEach(o),Ia=h(t),xo=a(t,"P",{});var Ny=i(xo);vc=r(Ny,`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnessary notifications to the developers involved in these PRs,
when syncing the master branch of a forked repository, please, follow these steps:`),Ny.forEach(o),Oa=h(t),je=a(t,"OL",{});var ai=i(je);dl=a(ai,"LI",{});var qy=i(dl);gc=r(qy,"When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked master."),qy.forEach(o),wc=h(ai),cl=a(ai,"LI",{});var Ry=i(cl);bc=r(Ry,"If a PR is absolutely necessary, use the following steps after checking out your branch:"),Ry.forEach(o),ai.forEach(o),Ca=h(t),y(so.$$.fragment,t),this.h()},h(){d(F,"name","hf:doc:metadata"),d(F,"content",JSON.stringify(Fy)),d(M,"id","how-to-contribute-to-transformers"),d(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M,"href","#how-to-contribute-to-transformers"),d(A,"class","relative group"),d(Ve,"href","https://github.com/huggingface/transformers/blob/master/CODE_OF_CONDUCT.md"),d(Ve,"rel","nofollow"),d(_e,"id","you-can-contribute-in-so-many-ways"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#you-can-contribute-in-so-many-ways"),d(oe,"class","relative group"),d(et,"href","https://github.com/huggingface/transformers/contribute"),d(et,"rel","nofollow"),d(ke,"id","submitting-a-new-issue-or-feature-request"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#submitting-a-new-issue-or-feature-request"),d(se,"class","relative group"),d(Pe,"id","did-you-find-a-bug"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#did-you-find-a-bug"),d(re,"class","relative group"),d(Oe,"id","do-you-want-to-implement-a-new-model"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#do-you-want-to-implement-a-new-model"),d(le,"class","relative group"),d(it,"href","https://github.com/huggingface/transformers/tree/master/templates"),d(it,"rel","nofollow"),d(Ce,"id","do-you-want-a-new-feature-that-is-not-a-model"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#do-you-want-a-new-feature-that-is-not-a-model"),d(ae,"class","relative group"),d(S,"start","2"),d(ft,"href","https://github.com/huggingface/transformers/tree/master/templates"),d(ft,"rel","nofollow"),d(Se,"id","start-contributing-pull-requests"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#start-contributing-pull-requests"),d(ie,"class","relative group"),d(ct,"href","https://git-scm.com/book/en/v2"),d(ct,"rel","nofollow"),d(mt,"href","https://github.com/huggingface/transformers"),d(mt,"rel","nofollow"),d(At,"href","https://chris.beams.io/posts/git-commit/"),d(At,"rel","nofollow"),d(Te,"id","checklist"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#checklist"),d(pe,"class","relative group"),d(jt,"href","https://huggingface.co/hf-internal-testing"),d(jt,"rel","nofollow"),d(ko,"href","pr_checks"),d(De,"id","tests"),d(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(De,"href","#tests"),d(ve,"class","relative group"),d(Ut,"href","https://github.com/huggingface/transformers/tree/master/tests"),d(Ut,"rel","nofollow"),d(Ft,"href","https://github.com/huggingface/transformers/tree/master/examples"),d(Ft,"rel","nofollow"),d(Le,"id","style-guide"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#style-guide"),d(ge,"class","relative group"),d(Qt,"href","https://google.github.io/styleguide/pyguide.html"),d(Qt,"rel","nofollow"),d(Zt,"href","https://github.com/huggingface/transformers/tree/master/docs#writing-documentation---specification"),d(Zt,"rel","nofollow"),d(Ne,"id","this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd"),d(we,"class","relative group"),d(qe,"id","develop-on-windows"),d(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qe,"href","#develop-on-windows"),d(be,"class","relative group"),d(eo,"href","https://www.msys2.org/"),d(eo,"rel","nofollow"),d(Ge,"id","syncing-forked-master-with-upstream-huggingface-master"),d(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ge,"href","#syncing-forked-master-with-upstream-huggingface-master"),d($e,"class","relative group")},m(t,u){e(document.head,F),f(t,lo,u),f(t,A,u),e(A,M),e(M,Jo),v(Ze,Jo,null),e(A,ni),e(A,Ko),e(Ko,hi),f(t,vl,u),f(t,ao,u),e(ao,ui),f(t,gl,u),f(t,io,u),e(io,fi),f(t,wl,u),f(t,Ee,u),e(Ee,di),e(Ee,Ve),e(Ve,ci),e(Ee,pi),f(t,bl,u),f(t,oe,u),e(oe,_e),e(_e,Qo),v(Xe,Qo,null),e(oe,mi),e(oe,Zo),e(Zo,yi),f(t,$l,u),f(t,no,u),e(no,vi),f(t,El,u),f(t,T,u),e(T,Vo),e(Vo,gi),e(T,wi),e(T,Xo),e(Xo,bi),e(T,$i),e(T,es),e(es,Ei),e(T,_i),e(T,ts),e(ts,ki),f(t,_l,u),f(t,D,u),e(D,Pi),e(D,et),e(et,Ii),e(D,Oi),e(D,os),e(os,Ci),e(D,Si),e(D,ss),e(ss,xi),e(D,Ai),f(t,kl,u),f(t,ho,u),e(ho,rs),e(rs,Ti),f(t,Pl,u),f(t,se,u),e(se,ke),e(ke,ls),v(tt,ls,null),e(se,Di),e(se,as),e(as,Li),f(t,Il,u),f(t,uo,u),e(uo,Ni),f(t,Ol,u),f(t,re,u),e(re,Pe),e(Pe,is),v(ot,is,null),e(re,qi),e(re,ns),e(ns,Ri),f(t,Cl,u),f(t,fo,u),e(fo,Wi),f(t,Sl,u),f(t,Ie,u),e(Ie,Gi),e(Ie,hs),e(hs,ji),e(Ie,Hi),f(t,xl,u),f(t,co,u),e(co,Mi),f(t,Al,u),f(t,Y,u),e(Y,C),e(C,Ui),e(C,us),e(us,Fi),e(C,Yi),e(C,fs),e(fs,Bi),e(C,zi),e(C,ds),e(ds,Ji),e(C,Ki),e(C,cs),e(cs,Qi),e(C,Zi),e(Y,Vi),e(Y,ps),e(ps,Xi),e(Y,en),e(Y,st),e(st,tn),e(st,ms),e(ms,on),e(st,sn),f(t,Tl,u),f(t,po,u),e(po,rn),f(t,Dl,u),v(rt,t,u),f(t,Ll,u),f(t,mo,u),e(mo,ln),f(t,Nl,u),v(lt,t,u),f(t,ql,u),f(t,le,u),e(le,Oe),e(Oe,ys),v(at,ys,null),e(le,an),e(le,vs),e(vs,nn),f(t,Rl,u),f(t,yo,u),e(yo,hn),f(t,Wl,u),f(t,B,u),e(B,gs),e(gs,un),e(B,fn),e(B,ws),e(ws,dn),e(B,cn),e(B,bs),e(bs,pn),f(t,Gl,u),f(t,vo,u),e(vo,mn),f(t,jl,u),f(t,L,u),e(L,yn),e(L,$s),e($s,vn),e(L,gn),e(L,Es),e(Es,wn),e(L,bn),e(L,it),e(it,$n),e(L,En),f(t,Hl,u),f(t,ae,u),e(ae,Ce),e(Ce,_s),v(nt,_s,null),e(ae,_n),e(ae,ks),e(ks,kn),f(t,Ml,u),f(t,go,u),e(go,Pn),f(t,Ul,u),f(t,wo,u),e(wo,Ps),e(Ps,In),f(t,Fl,u),f(t,z,u),e(z,Is),e(Is,On),e(z,Cn),e(z,Os),e(Os,Sn),e(z,xn),e(z,Cs),e(Cs,An),f(t,Yl,u),f(t,S,u),e(S,ht),e(ht,Tn),e(ht,Ss),e(Ss,Dn),e(ht,Ln),e(S,Nn),e(S,ut),e(ut,qn),e(ut,xs),e(xs,Rn),e(ut,Wn),e(S,Gn),e(S,As),e(As,jn),e(S,Hn),e(S,Ts),e(Ts,Mn),f(t,Bl,u),f(t,bo,u),e(bo,Un),f(t,zl,u),f(t,N,u),e(N,Fn),e(N,Ds),e(Ds,Yn),e(N,Bn),e(N,Ls),e(Ls,zn),e(N,Jn),e(N,ft),e(ft,Kn),e(N,Qn),f(t,Jl,u),f(t,ie,u),e(ie,Se),e(Se,Ns),v(dt,Ns,null),e(ie,Zn),e(ie,qs),e(qs,Vn),f(t,Kl,u),f(t,$o,u),e($o,Xn),f(t,Ql,u),f(t,k,u),e(k,eh),e(k,Rs),e(Rs,th),e(k,oh),e(k,Ws),e(Ws,sh),e(k,rh),e(k,Gs),e(Gs,lh),e(k,ah),e(k,js),e(js,ih),e(k,nh),e(k,ct),e(ct,hh),e(k,uh),f(t,Zl,u),f(t,Eo,u),e(Eo,fh),f(t,Vl,u),f(t,E,u),e(E,Hs),e(Hs,pt),e(pt,dh),e(pt,mt),e(mt,ch),e(pt,ph),e(E,mh),e(E,yt),e(yt,Ms),e(Ms,yh),e(yt,vh),v(vt,yt,null),e(E,gh),e(E,ne),e(ne,Us),e(Us,wh),e(ne,bh),v(gt,ne,null),e(ne,$h),e(ne,xe),e(xe,Fs),e(Fs,Eh),e(xe,_h),e(xe,Ys),e(Ys,kh),e(xe,Ph),e(E,Ih),e(E,P),e(P,Bs),e(Bs,Oh),e(P,Ch),v(wt,P,null),e(P,Sh),e(P,he),e(he,xh),e(he,zs),e(zs,Ah),e(he,Th),e(he,Js),e(Js,Dh),e(he,Lh),e(P,Nh),e(P,bt),e(bt,qh),e(bt,Ks),e(Ks,Rh),e(bt,Wh),e(P,Gh),v($t,P,null),e(P,jh),e(P,ue),e(ue,Hh),e(ue,Qs),e(Qs,Mh),e(ue,Uh),e(ue,Zs),e(Zs,Fh),e(ue,Yh),e(E,Bh),e(E,c),e(c,Vs),e(Vs,zh),e(c,Jh),e(c,Xs),e(Xs,Kh),e(c,Qh),v(Et,c,null),e(c,Zh),e(c,fe),e(fe,Vh),e(fe,er),e(er,Xh),e(fe,eu),e(fe,tr),e(tr,tu),e(fe,ou),e(c,su),v(_t,c,null),e(c,ru),e(c,kt),e(kt,lu),e(kt,or),e(or,au),e(kt,iu),e(c,nu),e(c,J),e(J,sr),e(sr,hu),e(J,uu),e(J,rr),e(rr,fu),e(J,du),e(J,lr),e(lr,cu),e(J,pu),e(c,mu),v(Pt,c,null),e(c,yu),e(c,Ae),e(Ae,ar),e(ar,vu),e(Ae,gu),e(Ae,ir),e(ir,wu),e(Ae,bu),e(c,$u),v(It,c,null),e(c,Eu),e(c,nr),e(nr,_u),e(c,ku),v(Ot,c,null),e(c,Pu),e(c,hr),e(hr,Iu),e(c,Ou),e(c,de),e(de,Cu),e(de,ur),e(ur,Su),e(de,xu),e(de,fr),e(fr,Au),e(de,Tu),e(c,Du),v(Ct,c,null),e(c,Lu),e(c,ce),e(ce,Nu),e(ce,dr),e(dr,qu),e(ce,Ru),e(ce,cr),e(cr,Wu),e(ce,Gu),e(c,ju),v(St,c,null),e(c,Hu),e(c,xt),e(xt,Mu),e(xt,At),e(At,Uu),e(xt,Fu),e(c,Yu),e(c,pr),e(pr,Bu),e(c,zu),v(Tt,c,null),e(c,Ju),e(c,mr),e(mr,Ku),e(c,Qu),v(Dt,c,null),e(E,Zu),e(E,yr),e(yr,Lt),e(Lt,Vu),e(Lt,vr),e(vr,Xu),e(Lt,ef),e(E,tf),e(E,gr),e(gr,wr),e(wr,of),f(t,Xl,u),f(t,pe,u),e(pe,Te),e(Te,br),v(Nt,br,null),e(pe,sf),e(pe,$r),e($r,rf),f(t,ea,u),f(t,_,u),e(_,Er),e(Er,lf),e(_,af),e(_,_r),e(_r,nf),e(_,hf),e(_,qt),e(qt,uf),e(qt,kr),e(kr,ff),e(qt,df),e(_,cf),e(_,Pr),e(Pr,pf),e(_,mf),e(_,_o),e(_o,yf),e(_o,me),e(me,Rt),e(Rt,vf),e(Rt,Ir),e(Ir,gf),e(Rt,wf),e(me,bf),e(me,ye),e(ye,$f),e(ye,Or),e(Or,Ef),e(ye,_f),e(ye,Cr),e(Cr,kf),e(ye,Pf),e(me,If),e(me,Wt),e(Wt,Of),e(Wt,Sr),e(Sr,Cf),e(Wt,Sf),e(_,xf),e(_,Gt),e(Gt,Af),e(Gt,xr),e(xr,Tf),e(Gt,Df),e(_,Lf),e(_,U),e(U,Nf),e(U,Ar),e(Ar,qf),e(U,Rf),e(U,Tr),e(Tr,Wf),e(U,Gf),e(U,jt),e(jt,jf),e(U,Hf),f(t,ta,u),f(t,Ht,u),e(Ht,Mf),e(Ht,ko),e(ko,Uf),f(t,oa,u),f(t,ve,u),e(ve,De),e(De,Dr),v(Mt,Dr,null),e(ve,Ff),e(ve,Lr),e(Lr,Yf),f(t,sa,u),f(t,K,u),e(K,Bf),e(K,Ut),e(Ut,zf),e(K,Jf),e(K,Ft),e(Ft,Kf),e(K,Qf),f(t,ra,u),f(t,q,u),e(q,Zf),e(q,Nr),e(Nr,Vf),e(q,Xf),e(q,qr),e(qr,ed),e(q,td),e(q,Rr),e(Rr,od),e(q,sd),f(t,la,u),v(Yt,t,u),f(t,aa,u),f(t,Po,u),e(Po,rd),f(t,ia,u),v(Bt,t,u),f(t,na,u),f(t,R,u),e(R,ld),e(R,Wr),e(Wr,ad),e(R,id),e(R,Gr),e(Gr,nd),e(R,hd),e(R,jr),e(jr,ud),e(R,fd),f(t,ha,u),f(t,Io,u),e(Io,dd),f(t,ua,u),f(t,Q,u),e(Q,cd),e(Q,Hr),e(Hr,pd),e(Q,md),e(Q,Mr),e(Mr,yd),e(Q,vd),f(t,fa,u),v(zt,t,u),f(t,da,u),f(t,Z,u),e(Z,gd),e(Z,Ur),e(Ur,wd),e(Z,bd),e(Z,Fr),e(Fr,$d),e(Z,Ed),f(t,ca,u),f(t,V,u),e(V,_d),e(V,Yr),e(Yr,kd),e(V,Pd),e(V,Br),e(Br,Id),e(V,Od),f(t,pa,u),f(t,X,u),e(X,Cd),e(X,zr),e(zr,Sd),e(X,xd),e(X,Jr),e(Jr,Ad),e(X,Td),f(t,ma,u),v(Jt,t,u),f(t,ya,u),f(t,ge,u),e(ge,Le),e(Le,Kr),v(Kt,Kr,null),e(ge,Dd),e(ge,Qr),e(Qr,Ld),f(t,va,u),f(t,W,u),e(W,Nd),e(W,Zr),e(Zr,qd),e(W,Rd),e(W,Qt),e(Qt,Wd),e(W,Gd),e(W,Zt),e(Zt,jd),e(W,Hd),f(t,ga,u),f(t,we,u),e(we,Ne),e(Ne,Vr),v(Vt,Vr,null),e(we,Md),e(we,Xr),e(Xr,Ud),f(t,wa,u),f(t,be,u),e(be,qe),e(qe,el),v(Xt,el,null),e(be,Fd),e(be,tl),e(tl,Yd),f(t,ba,u),f(t,ee,u),e(ee,Bd),e(ee,ol),e(ol,zd),e(ee,Jd),e(ee,sl),e(sl,Kd),e(ee,Qd),f(t,$a,u),f(t,Oo,u),e(Oo,rl),e(rl,Zd),f(t,Ea,u),f(t,Co,u),e(Co,Vd),f(t,_a,u),f(t,G,u),e(G,So),e(So,eo),e(eo,Xd),e(So,ec),e(G,tc),e(G,ll),e(ll,oc),e(G,sc),e(G,Re),e(Re,rc),e(Re,al),e(al,lc),e(Re,ac),e(Re,il),e(il,ic),e(G,nc),e(G,to),e(to,hc),e(to,nl),e(nl,uc),e(to,fc),f(t,ka,u),f(t,We,u),e(We,dc),e(We,hl),e(hl,cc),e(We,pc),f(t,Pa,u),f(t,$e,u),e($e,Ge),e(Ge,ul),v(oo,ul,null),e($e,mc),e($e,fl),e(fl,yc),f(t,Ia,u),f(t,xo,u),e(xo,vc),f(t,Oa,u),f(t,je,u),e(je,dl),e(dl,gc),e(je,wc),e(je,cl),e(cl,bc),f(t,Ca,u),v(so,t,u),Sa=!0},p:My,i(t){Sa||(g(Ze.$$.fragment,t),g(Xe.$$.fragment,t),g(tt.$$.fragment,t),g(ot.$$.fragment,t),g(rt.$$.fragment,t),g(lt.$$.fragment,t),g(at.$$.fragment,t),g(nt.$$.fragment,t),g(dt.$$.fragment,t),g(vt.$$.fragment,t),g(gt.$$.fragment,t),g(wt.$$.fragment,t),g($t.$$.fragment,t),g(Et.$$.fragment,t),g(_t.$$.fragment,t),g(Pt.$$.fragment,t),g(It.$$.fragment,t),g(Ot.$$.fragment,t),g(Ct.$$.fragment,t),g(St.$$.fragment,t),g(Tt.$$.fragment,t),g(Dt.$$.fragment,t),g(Nt.$$.fragment,t),g(Mt.$$.fragment,t),g(Yt.$$.fragment,t),g(Bt.$$.fragment,t),g(zt.$$.fragment,t),g(Jt.$$.fragment,t),g(Kt.$$.fragment,t),g(Vt.$$.fragment,t),g(Xt.$$.fragment,t),g(oo.$$.fragment,t),g(so.$$.fragment,t),Sa=!0)},o(t){w(Ze.$$.fragment,t),w(Xe.$$.fragment,t),w(tt.$$.fragment,t),w(ot.$$.fragment,t),w(rt.$$.fragment,t),w(lt.$$.fragment,t),w(at.$$.fragment,t),w(nt.$$.fragment,t),w(dt.$$.fragment,t),w(vt.$$.fragment,t),w(gt.$$.fragment,t),w(wt.$$.fragment,t),w($t.$$.fragment,t),w(Et.$$.fragment,t),w(_t.$$.fragment,t),w(Pt.$$.fragment,t),w(It.$$.fragment,t),w(Ot.$$.fragment,t),w(Ct.$$.fragment,t),w(St.$$.fragment,t),w(Tt.$$.fragment,t),w(Dt.$$.fragment,t),w(Nt.$$.fragment,t),w(Mt.$$.fragment,t),w(Yt.$$.fragment,t),w(Bt.$$.fragment,t),w(zt.$$.fragment,t),w(Jt.$$.fragment,t),w(Kt.$$.fragment,t),w(Vt.$$.fragment,t),w(Xt.$$.fragment,t),w(oo.$$.fragment,t),w(so.$$.fragment,t),Sa=!1},d(t){o(F),t&&o(lo),t&&o(A),b(Ze),t&&o(vl),t&&o(ao),t&&o(gl),t&&o(io),t&&o(wl),t&&o(Ee),t&&o(bl),t&&o(oe),b(Xe),t&&o($l),t&&o(no),t&&o(El),t&&o(T),t&&o(_l),t&&o(D),t&&o(kl),t&&o(ho),t&&o(Pl),t&&o(se),b(tt),t&&o(Il),t&&o(uo),t&&o(Ol),t&&o(re),b(ot),t&&o(Cl),t&&o(fo),t&&o(Sl),t&&o(Ie),t&&o(xl),t&&o(co),t&&o(Al),t&&o(Y),t&&o(Tl),t&&o(po),t&&o(Dl),b(rt,t),t&&o(Ll),t&&o(mo),t&&o(Nl),b(lt,t),t&&o(ql),t&&o(le),b(at),t&&o(Rl),t&&o(yo),t&&o(Wl),t&&o(B),t&&o(Gl),t&&o(vo),t&&o(jl),t&&o(L),t&&o(Hl),t&&o(ae),b(nt),t&&o(Ml),t&&o(go),t&&o(Ul),t&&o(wo),t&&o(Fl),t&&o(z),t&&o(Yl),t&&o(S),t&&o(Bl),t&&o(bo),t&&o(zl),t&&o(N),t&&o(Jl),t&&o(ie),b(dt),t&&o(Kl),t&&o($o),t&&o(Ql),t&&o(k),t&&o(Zl),t&&o(Eo),t&&o(Vl),t&&o(E),b(vt),b(gt),b(wt),b($t),b(Et),b(_t),b(Pt),b(It),b(Ot),b(Ct),b(St),b(Tt),b(Dt),t&&o(Xl),t&&o(pe),b(Nt),t&&o(ea),t&&o(_),t&&o(ta),t&&o(Ht),t&&o(oa),t&&o(ve),b(Mt),t&&o(sa),t&&o(K),t&&o(ra),t&&o(q),t&&o(la),b(Yt,t),t&&o(aa),t&&o(Po),t&&o(ia),b(Bt,t),t&&o(na),t&&o(R),t&&o(ha),t&&o(Io),t&&o(ua),t&&o(Q),t&&o(fa),b(zt,t),t&&o(da),t&&o(Z),t&&o(ca),t&&o(V),t&&o(pa),t&&o(X),t&&o(ma),b(Jt,t),t&&o(ya),t&&o(ge),b(Kt),t&&o(va),t&&o(W),t&&o(ga),t&&o(we),b(Vt),t&&o(wa),t&&o(be),b(Xt),t&&o(ba),t&&o(ee),t&&o($a),t&&o(Oo),t&&o(Ea),t&&o(Co),t&&o(_a),t&&o(G),t&&o(ka),t&&o(We),t&&o(Pa),t&&o($e),b(oo),t&&o(Ia),t&&o(xo),t&&o(Oa),t&&o(je),t&&o(Ca),b(so,t)}}}const Fy={local:"how-to-contribute-to-transformers",sections:[{local:"you-can-contribute-in-so-many-ways",title:"You can contribute in so many ways!"},{local:"submitting-a-new-issue-or-feature-request",sections:[{local:"did-you-find-a-bug",title:"Did you find a bug?"},{local:"do-you-want-to-implement-a-new-model",title:"Do you want to implement a new model?"},{local:"do-you-want-a-new-feature-that-is-not-a-model",title:"Do you want a new feature (that is not a model)?"}],title:"Submitting a new issue or feature request"},{local:"start-contributing-pull-requests",sections:[{local:"checklist",title:"Checklist"},{local:"tests",title:"Tests"},{local:"style-guide",sections:[{local:"this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd",title:"This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"}],title:"Style guide"},{local:"develop-on-windows",title:"Develop on Windows"},{local:"syncing-forked-master-with-upstream-huggingface-master",title:"Syncing forked master with upstream (HuggingFace) master"}],title:"Start contributing! (Pull Requests)"}],title:"How to contribute to transformers?"};function Yy(ii,F,lo){let{fw:A}=F;return ii.$$set=M=>{"fw"in M&&lo(0,A=M.fw)},[A]}class Qy extends Wy{constructor(F){super();Gy(this,F,Yy,Uy,jy,{fw:0})}}export{Qy as default,Fy as metadata};
