import{S as hw,i as fw,s as pw,e as l,k as c,w as p,t as r,L as mw,c as s,d as o,m as h,a as i,x as m,h as a,b as f,J as e,g as d,y as u,K as uw,q as _,o as v,B as E}from"../chunks/vendor-b1433968.js";import{I as $}from"../chunks/IconCopyLink-7029626d.js";import{C as x}from"../chunks/CodeBlock-a320dbd7.js";import"../chunks/CopyButton-f65cb278.js";function _w(Ec){let Z,Zo,A,F,Lr,no,bc,Ir,wc,Bi,ve,Ge,Sr,co,yc,Ue,kc,Mr,Tc,gc,jr,$c,Ni,er,Cc,Hi,Ee,Xe,Fr,ho,Oc,Br,Dc,qi,tr,xc,Ri,or,Ac,Wi,Ke,Nr,zc,Pc,Hr,Lc,Gi,be,Je,qr,fo,Ic,Rr,Sc,Ui,Qe,po,Mc,Ve,jc,Wr,Fc,Bc,Nc,Hc,we,qc,Gr,Rc,Wc,Ur,Gc,Uc,Xi,Ye,Xc,Xr,Kc,Jc,Ki,mo,Ji,Ze,Qc,Kr,Vc,Yc,Qi,uo,Vi,ye,et,Jr,_o,Zc,Qr,eh,Yi,z,th,Vr,oh,rh,Yr,ah,lh,Zr,sh,ih,Zi,tt,nh,ea,dh,ch,en,T,ta,oa,hh,fh,ra,aa,ph,mh,la,sa,uh,_h,ia,na,vh,Eh,da,ca,bh,wh,ha,fa,yh,kh,pa,ma,Th,gh,ua,_a,$h,tn,ke,ot,va,vo,Ch,Ea,Oh,on,ee,Dh,ba,xh,Ah,wa,zh,Ph,rn,rt,Lh,ya,Ih,Sh,an,Eo,ln,at,Mh,ka,jh,Fh,sn,bo,nn,rr,Bh,dn,wo,cn,Te,lt,Ta,yo,Nh,ga,Hh,hn,st,qh,$a,Rh,Wh,fn,ar,Gh,pn,ge,it,Ca,ko,Uh,Oa,Xh,mn,nt,Kh,Da,Jh,Qh,un,dt,Vh,xa,Yh,Zh,_n,To,vn,ct,ef,Aa,tf,of,En,go,bn,$e,ht,za,$o,rf,Ce,af,Pa,lf,sf,La,nf,df,wn,ft,cf,Co,Ia,hf,ff,pf,yn,pt,mf,Sa,uf,_f,kn,Oe,mt,Ma,Oo,vf,ja,Ef,Tn,P,bf,Fa,wf,yf,Ba,kf,Tf,Na,gf,$f,gn,ut,Cf,Ha,Of,Df,$n,Do,Cn,_t,xf,qa,Af,zf,On,xo,Dn,lr,Pf,xn,Ao,An,De,vt,Ra,zo,Lf,Wa,If,zn,Et,Sf,Po,Mf,jf,Pn,sr,Ff,Ln,ir,Bf,In,b,L,Ga,Nf,Hf,Ua,qf,Rf,Xa,Wf,Gf,Ka,Uf,Xf,Kf,I,Ja,Jf,Qf,Qa,Vf,Yf,Va,Zf,ep,Ya,tp,op,rp,te,Za,ap,lp,el,sp,ip,tl,np,dp,cp,oe,ol,hp,fp,rl,pp,mp,al,up,_p,vp,re,ll,Ep,bp,sl,wp,yp,il,kp,Tp,gp,ae,nl,$p,Cp,dl,Op,Dp,cl,xp,Ap,zp,le,hl,Pp,Lp,fl,Ip,Sp,pl,Mp,jp,Fp,se,ml,Bp,Np,ul,Hp,qp,_l,Rp,Wp,Gp,ie,vl,Up,Xp,El,Kp,Jp,bl,Qp,Vp,Yp,ne,wl,Zp,em,yl,tm,om,kl,rm,am,lm,de,Tl,sm,im,gl,nm,dm,$l,cm,hm,Sn,nr,fm,Mn,S,bt,Cl,pm,mm,Ol,um,_m,vm,wt,Dl,Em,bm,xl,wm,ym,km,yt,Al,Tm,gm,zl,$m,Cm,Om,kt,Pl,Dm,xm,Ll,Am,zm,jn,dr,Pm,Fn,ce,xe,Lm,Il,Im,Sm,Sl,Mm,jm,Fm,Ae,Bm,Ml,Nm,Hm,jl,qm,Rm,Wm,ze,Gm,Fl,Um,Xm,Bl,Km,Jm,Bn,Tt,Qm,Nl,Vm,Ym,Nn,g,B,Zm,Hl,eu,tu,ql,ou,ru,Rl,au,lu,su,N,iu,Wl,nu,du,Gl,cu,hu,Ul,fu,pu,mu,Pe,uu,Xl,_u,vu,Kl,Eu,bu,wu,H,yu,Jl,ku,Tu,Ql,gu,$u,Vl,Cu,Ou,Du,q,xu,Yl,Au,zu,Zl,Pu,Lu,es,Iu,Su,Mu,R,ju,ts,Fu,Bu,os,Nu,Hu,rs,qu,Ru,Wu,W,Gu,as,Uu,Xu,ls,Ku,Ju,ss,Qu,Vu,Yu,G,Zu,is,e_,t_,ns,o_,r_,ds,a_,l_,Hn,gt,s_,cs,i_,n_,qn,D,U,d_,hs,c_,h_,fs,f_,p_,ps,m_,u_,__,X,v_,ms,E_,b_,us,w_,y_,_s,k_,T_,g_,K,$_,vs,C_,O_,Es,D_,x_,bs,A_,z_,P_,J,L_,ws,I_,S_,ys,M_,j_,ks,F_,B_,N_,Q,H_,Ts,q_,R_,gs,W_,G_,$s,U_,X_,Rn,$t,K_,Cs,J_,Q_,Wn,cr,V,V_,Os,Y_,Z_,Ds,ev,tv,xs,ov,rv,Gn,hr,av,Un,Ct,Le,lv,As,sv,iv,zs,nv,dv,cv,Ie,hv,Ps,fv,pv,Ls,mv,uv,Xn,fr,_v,Kn,pr,Y,vv,Is,Ev,bv,Ss,wv,yv,Ms,kv,Tv,Jn,Se,Ot,js,Lo,gv,Fs,$v,Qn,Dt,Cv,Bs,Ov,Dv,Vn,Me,xt,Ns,Io,xv,je,Av,Hs,zv,Pv,qs,Lv,Iv,Yn,M,Sv,Rs,Mv,jv,Ws,Fv,Bv,Gs,Nv,Hv,Zn,At,qv,Us,Rv,Wv,ed,zt,Gv,Xs,Uv,Xv,td,Fe,Pt,Ks,So,Kv,Js,Jv,od,Lt,Qv,Qs,Vv,Yv,rd,Be,It,Vs,Mo,Zv,mr,e1,Ys,t1,ad,he,o1,Zs,r1,a1,ei,l1,s1,ld,St,i1,jo,n1,d1,sd,Mt,c1,ti,h1,f1,id,fe,p1,oi,m1,u1,ri,_1,v1,nd,Fo,dd,Ne,jt,ai,Bo,E1,li,b1,cd,Ft,w1,si,y1,k1,hd,Bt,ii,He,T1,ni,g1,$1,di,C1,O1,D1,ci,w,x1,hi,A1,z1,fi,P1,L1,pi,I1,S1,mi,M1,j1,ui,F1,B1,_i,N1,H1,vi,q1,R1,Ei,W1,G1,bi,U1,X1,wi,K1,J1,fd,Nt,Q1,yi,V1,Y1,pd,ur,Z1,md,No,ud,qe,Ht,ki,Ho,eE,Ti,tE,_d,j,oE,gi,rE,aE,$i,lE,sE,Ci,iE,nE,vd,pe,Oi,dE,cE,Di,hE,fE,xi,pE,Ed,me,mE,Ai,uE,_E,zi,vE,EE,bd,qt,bE,qo,wE,yE,wd,ue,kE,Pi,TE,gE,Li,$E,CE,yd,Ro,kd;return no=new $({}),co=new $({}),ho=new $({}),fo=new $({}),mo=new x({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased"),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)`}}),uo=new x({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-cased", use_fast=False),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, use_fast=<span class="hljs-literal">False</span>)`}}),_o=new $({}),vo=new $({}),Eo=new x({props:{code:"pip install transformers,",highlighted:"pip install transformers"}}),bo=new x({props:{code:"pip install transformers[sentencepiece],",highlighted:"pip install transformers[sentencepiece]"}}),wo=new x({props:{code:"pip install transformers sentencepiece,",highlighted:"pip install transformers sentencepiece"}}),yo=new $({}),ko=new $({}),To=new x({props:{code:"from transformers.modeling_bert import BertLayer,",highlighted:"from transformers.modeling_bert import BertLayer"}}),go=new x({props:{code:"from transformers.models.bert.modeling_bert import BertLayer,",highlighted:"from transformers.models.bert.modeling_bert import BertLayer"}}),$o=new $({}),Oo=new $({}),Do=new x({props:{code:`model = BertModel.from_pretrained("bert-base-cased")
outputs = model(**inputs),`,highlighted:`model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
outputs = model(**inputs)`}}),xo=new x({props:{code:`model = BertModel.from_pretrained("bert-base-cased")
outputs = model(**inputs, return_dict=False),`,highlighted:`model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
outputs = model(**inputs, return_dict=False)`}}),Ao=new x({props:{code:`model = BertModel.from_pretrained("bert-base-cased", return_dict=False)
outputs = model(**inputs),`,highlighted:`model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, return_dict=False)
outputs = model(**inputs)`}}),zo=new $({}),Lo=new $({}),Io=new $({}),So=new $({}),Mo=new $({}),Fo=new x({props:{code:`# Let's load our model
model = BertForSequenceClassification.from_pretrained('bert-base-uncased')

# If you used to have this line in pytorch-pretrained-bert:
loss = model(input_ids, labels=labels)

# Now just use this line in \u{1F917} Transformers to extract the loss from the output tuple:
outputs = model(input_ids, labels=labels)
loss = outputs[0]

# In \u{1F917} Transformers you can also have access to the logits:
loss, logits = outputs[:2]

# And even the attention weights if you configure the model to output them (and other outputs too, see the docstrings and documentation)
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', output_attentions=True)
outputs = model(input_ids, labels=labels)
loss, logits, attentions = outputs,`,highlighted:`<span class="hljs-comment"># Let&#x27;s load our model</span>
model = BertForSequenceClassification.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)

<span class="hljs-comment"># If you used to have this line in pytorch-pretrained-bert:</span>
loss = model(input_ids, labels=labels)

<span class="hljs-comment"># Now just use this line in \u{1F917} Transformers to extract the loss from the output tuple:</span>
outputs = model(input_ids, labels=labels)
loss = outputs[<span class="hljs-number">0</span>]

<span class="hljs-comment"># In \u{1F917} Transformers you can also have access to the logits:</span>
loss, logits = outputs[:<span class="hljs-number">2</span>]

<span class="hljs-comment"># And even the attention weights if you configure the model to output them (and other outputs too, see the docstrings and documentation)</span>
model = BertForSequenceClassification.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>, output_attentions=<span class="hljs-literal">True</span>)
outputs = model(input_ids, labels=labels)
loss, logits, attentions = outputs`}}),Bo=new $({}),No=new x({props:{code:`### Let's load a model and tokenizer
model = BertForSequenceClassification.from_pretrained('bert-base-uncased')
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

### Do some stuff to our model and tokenizer
# Ex: add new tokens to the vocabulary and embeddings of our model
tokenizer.add_tokens(['[SPECIAL_TOKEN_1]', '[SPECIAL_TOKEN_2]'])
model.resize_token_embeddings(len(tokenizer))
# Train our model
train(model)

### Now let's save our model and tokenizer to a directory
model.save_pretrained('./my_saved_model_directory/')
tokenizer.save_pretrained('./my_saved_model_directory/')

### Reload the model and the tokenizer
model = BertForSequenceClassification.from_pretrained('./my_saved_model_directory/')
tokenizer = BertTokenizer.from_pretrained('./my_saved_model_directory/'),`,highlighted:`<span class="hljs-comment">### Let&#x27;s load a model and tokenizer</span>
model = BertForSequenceClassification.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)

<span class="hljs-comment">### Do some stuff to our model and tokenizer</span>
<span class="hljs-comment"># Ex: add new tokens to the vocabulary and embeddings of our model</span>
tokenizer.add_tokens([<span class="hljs-string">&#x27;[SPECIAL_TOKEN_1]&#x27;</span>, <span class="hljs-string">&#x27;[SPECIAL_TOKEN_2]&#x27;</span>])
model.resize_token_embeddings(<span class="hljs-built_in">len</span>(tokenizer))
<span class="hljs-comment"># Train our model</span>
train(model)

<span class="hljs-comment">### Now let&#x27;s save our model and tokenizer to a directory</span>
model.save_pretrained(<span class="hljs-string">&#x27;./my_saved_model_directory/&#x27;</span>)
tokenizer.save_pretrained(<span class="hljs-string">&#x27;./my_saved_model_directory/&#x27;</span>)

<span class="hljs-comment">### Reload the model and the tokenizer</span>
model = BertForSequenceClassification.from_pretrained(<span class="hljs-string">&#x27;./my_saved_model_directory/&#x27;</span>)
tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&#x27;./my_saved_model_directory/&#x27;</span>)`}}),Ho=new $({}),Ro=new x({props:{code:`# Parameters:
lr = 1e-3
max_grad_norm = 1.0
num_training_steps = 1000
num_warmup_steps = 100
warmup_proportion = float(num_warmup_steps) / float(num_training_steps)  # 0.1

### Previously BertAdam optimizer was instantiated like this:
optimizer = BertAdam(model.parameters(), lr=lr, schedule='warmup_linear', warmup=warmup_proportion, num_training_steps=num_training_steps)
### and used like this:
for batch in train_data:
    loss = model(batch)
    loss.backward()
    optimizer.step()

### In \u{1F917} Transformers, optimizer and schedules are split and instantiated like this:
optimizer = AdamW(model.parameters(), lr=lr, correct_bias=False)  # To reproduce BertAdam specific behavior set correct_bias=False
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_training_steps)  # PyTorch scheduler
### and used like this:
for batch in train_data:
    loss = model(batch)
    loss.backward()
    torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)  # Gradient clipping is not in AdamW anymore (so you can use amp without issue)
    optimizer.step()
    scheduler.step(),`,highlighted:`<span class="hljs-comment"># Parameters:</span>
lr = <span class="hljs-number">1e-3</span>
max_grad_norm = <span class="hljs-number">1.0</span>
num_training_steps = <span class="hljs-number">1000</span>
num_warmup_steps = <span class="hljs-number">100</span>
warmup_proportion = <span class="hljs-built_in">float</span>(num_warmup_steps) / <span class="hljs-built_in">float</span>(num_training_steps)  <span class="hljs-comment"># 0.1</span>

<span class="hljs-comment">### Previously BertAdam optimizer was instantiated like this:</span>
optimizer = BertAdam(model.parameters(), lr=lr, schedule=<span class="hljs-string">&#x27;warmup_linear&#x27;</span>, warmup=warmup_proportion, num_training_steps=num_training_steps)
<span class="hljs-comment">### and used like this:</span>
<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_data:
    loss = model(batch)
    loss.backward()
    optimizer.step()

<span class="hljs-comment">### In \u{1F917} Transformers, optimizer and schedules are split and instantiated like this:</span>
optimizer = AdamW(model.parameters(), lr=lr, correct_bias=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># To reproduce BertAdam specific behavior set correct_bias=False</span>
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_training_steps)  <span class="hljs-comment"># PyTorch scheduler</span>
<span class="hljs-comment">### and used like this:</span>
<span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_data:
    loss = model(batch)
    loss.backward()
    torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)  <span class="hljs-comment"># Gradient clipping is not in AdamW anymore (so you can use amp without issue)</span>
    optimizer.step()
    scheduler.step()`}}),{c(){Z=l("meta"),Zo=c(),A=l("h1"),F=l("a"),Lr=l("span"),p(no.$$.fragment),bc=c(),Ir=l("span"),wc=r("Migrating from previous packages"),Bi=c(),ve=l("h2"),Ge=l("a"),Sr=l("span"),p(co.$$.fragment),yc=c(),Ue=l("span"),kc=r("Migrating from transformers "),Mr=l("code"),Tc=r("v3.x"),gc=r(" to "),jr=l("code"),$c=r("v4.x"),Ni=c(),er=l("p"),Cc=r(`A couple of changes were introduced when the switch from version 3 to version 4 was done. Below is a summary of the
expected changes:`),Hi=c(),Ee=l("h4"),Xe=l("a"),Fr=l("span"),p(ho.$$.fragment),Oc=c(),Br=l("span"),Dc=r("1. AutoTokenizers and pipelines now use fast (rust) tokenizers by default."),qi=c(),tr=l("p"),xc=r("The python and rust tokenizers have roughly the same API, but the rust tokenizers have a more complete feature set."),Ri=c(),or=l("p"),Ac=r("This introduces two breaking changes:"),Wi=c(),Ke=l("ul"),Nr=l("li"),zc=r("The handling of overflowing tokens between the python and rust tokenizers is different."),Pc=c(),Hr=l("li"),Lc=r("The rust tokenizers do not accept integers in the encoding methods."),Gi=c(),be=l("h5"),Je=l("a"),qr=l("span"),p(fo.$$.fragment),Ic=c(),Rr=l("span"),Sc=r("How to obtain the same behavior as v3.x in v4.x"),Ui=c(),Qe=l("ul"),po=l("li"),Mc=r("The pipelines now contain additional features out of the box. See the "),Ve=l("a"),jc=r("token-classification pipeline with the "),Wr=l("code"),Fc=r("grouped_entities"),Bc=r(" flag"),Nc=r("."),Hc=c(),we=l("li"),qc=r("The auto-tokenizers now return rust tokenizers. In order to obtain the python tokenizers instead, the user may use the "),Gr=l("code"),Rc=r("use_fast"),Wc=r(" flag by setting it to "),Ur=l("code"),Gc=r("False"),Uc=r(":"),Xi=c(),Ye=l("p"),Xc=r("In version "),Xr=l("code"),Kc=r("v3.x"),Jc=r(":"),Ki=c(),p(mo.$$.fragment),Ji=c(),Ze=l("p"),Qc=r("to obtain the same in version "),Kr=l("code"),Vc=r("v4.x"),Yc=r(":"),Qi=c(),p(uo.$$.fragment),Vi=c(),ye=l("h4"),et=l("a"),Jr=l("span"),p(_o.$$.fragment),Zc=c(),Qr=l("span"),eh=r("2. SentencePiece is removed from the required dependencies"),Yi=c(),z=l("p"),th=r("The requirement on the SentencePiece dependency has been lifted from the "),Vr=l("code"),oh=r("setup.py"),rh=r(". This is done so that we may have a channel on anaconda cloud without relying on "),Yr=l("code"),ah=r("conda-forge"),lh=r(". This means that the tokenizers that depend on the SentencePiece library will not be available with a standard "),Zr=l("code"),sh=r("transformers"),ih=r(" installation."),Zi=c(),tt=l("p"),nh=r("This includes the "),ea=l("strong"),dh=r("slow"),ch=r(" versions of:"),en=c(),T=l("ul"),ta=l("li"),oa=l("code"),hh=r("XLNetTokenizer"),fh=c(),ra=l("li"),aa=l("code"),ph=r("AlbertTokenizer"),mh=c(),la=l("li"),sa=l("code"),uh=r("CamembertTokenizer"),_h=c(),ia=l("li"),na=l("code"),vh=r("MBartTokenizer"),Eh=c(),da=l("li"),ca=l("code"),bh=r("PegasusTokenizer"),wh=c(),ha=l("li"),fa=l("code"),yh=r("T5Tokenizer"),kh=c(),pa=l("li"),ma=l("code"),Th=r("ReformerTokenizer"),gh=c(),ua=l("li"),_a=l("code"),$h=r("XLMRobertaTokenizer"),tn=c(),ke=l("h5"),ot=l("a"),va=l("span"),p(vo.$$.fragment),Ch=c(),Ea=l("span"),Oh=r("How to obtain the same behavior as v3.x in v4.x"),on=c(),ee=l("p"),Dh=r("In order to obtain the same behavior as version "),ba=l("code"),xh=r("v3.x"),Ah=r(", you should install "),wa=l("code"),zh=r("sentencepiece"),Ph=r(" additionally:"),rn=c(),rt=l("p"),Lh=r("In version "),ya=l("code"),Ih=r("v3.x"),Sh=r(":"),an=c(),p(Eo.$$.fragment),ln=c(),at=l("p"),Mh=r("to obtain the same in version "),ka=l("code"),jh=r("v4.x"),Fh=r(":"),sn=c(),p(bo.$$.fragment),nn=c(),rr=l("p"),Bh=r("or"),dn=c(),p(wo.$$.fragment),cn=c(),Te=l("h4"),lt=l("a"),Ta=l("span"),p(yo.$$.fragment),Nh=c(),ga=l("span"),Hh=r("3. The architecture of the repo has been updated so that each model resides in its folder"),hn=c(),st=l("p"),qh=r("The past and foreseeable addition of new models means that the number of files in the directory "),$a=l("code"),Rh=r("src/transformers"),Wh=r(" keeps growing and becomes harder to navigate and understand. We made the choice to put each model and the files accompanying it in their own sub-directories."),fn=c(),ar=l("p"),Gh=r("This is a breaking change as importing intermediary layers using a model\u2019s module directly needs to be done via a different path."),pn=c(),ge=l("h5"),it=l("a"),Ca=l("span"),p(ko.$$.fragment),Uh=c(),Oa=l("span"),Xh=r("How to obtain the same behavior as v3.x in v4.x"),mn=c(),nt=l("p"),Kh=r("In order to obtain the same behavior as version "),Da=l("code"),Jh=r("v3.x"),Qh=r(", you should update the path used to access the layers."),un=c(),dt=l("p"),Vh=r("In version "),xa=l("code"),Yh=r("v3.x"),Zh=r(":"),_n=c(),p(To.$$.fragment),vn=c(),ct=l("p"),ef=r("to obtain the same in version "),Aa=l("code"),tf=r("v4.x"),of=r(":"),En=c(),p(go.$$.fragment),bn=c(),$e=l("h4"),ht=l("a"),za=l("span"),p($o.$$.fragment),rf=c(),Ce=l("span"),af=r("4. Switching the "),Pa=l("code"),lf=r("return_dict"),sf=r(" argument to "),La=l("code"),nf=r("True"),df=r(" by default"),wn=c(),ft=l("p"),cf=r("The "),Co=l("a"),Ia=l("code"),hf=r("return_dict"),ff=r(" argument"),pf=r(" enables the return of dict-like python objects containing the model outputs, instead of the standard tuples. This object is self-documented as keys can be used to retrieve values, while also behaving as a tuple as users may retrieve objects by index or by slice."),yn=c(),pt=l("p"),mf=r("This is a breaking change as the limitation of that tuple is that it cannot be unpacked: "),Sa=l("code"),uf=r("value0, value1 = outputs"),_f=r(" will not work."),kn=c(),Oe=l("h5"),mt=l("a"),Ma=l("span"),p(Oo.$$.fragment),vf=c(),ja=l("span"),Ef=r("How to obtain the same behavior as v3.x in v4.x"),Tn=c(),P=l("p"),bf=r("In order to obtain the same behavior as version "),Fa=l("code"),wf=r("v3.x"),yf=r(", you should specify the "),Ba=l("code"),kf=r("return_dict"),Tf=r(" argument to "),Na=l("code"),gf=r("False"),$f=r(", either in the model configuration or during the forward pass."),gn=c(),ut=l("p"),Cf=r("In version "),Ha=l("code"),Of=r("v3.x"),Df=r(":"),$n=c(),p(Do.$$.fragment),Cn=c(),_t=l("p"),xf=r("to obtain the same in version "),qa=l("code"),Af=r("v4.x"),zf=r(":"),On=c(),p(xo.$$.fragment),Dn=c(),lr=l("p"),Pf=r("or"),xn=c(),p(Ao.$$.fragment),An=c(),De=l("h4"),vt=l("a"),Ra=l("span"),p(zo.$$.fragment),Lf=c(),Wa=l("span"),If=r("5. Removed some deprecated attributes"),zn=c(),Et=l("p"),Sf=r("Attributes that were deprecated have been removed if they had been deprecated for at least a month. The full list of deprecated attributes can be found in "),Po=l("a"),Mf=r("#8604"),jf=r("."),Pn=c(),sr=l("p"),Ff=r("Here is a list of these attributes/methods/arguments and what their replacements should be:"),Ln=c(),ir=l("p"),Bf=r("In several models, the labels become consistent with the other models:"),In=c(),b=l("ul"),L=l("li"),Ga=l("code"),Nf=r("masked_lm_labels"),Hf=r(" becomes "),Ua=l("code"),qf=r("labels"),Rf=r(" in "),Xa=l("code"),Wf=r("AlbertForMaskedLM"),Gf=r(" and "),Ka=l("code"),Uf=r("AlbertForPreTraining"),Xf=r("."),Kf=c(),I=l("li"),Ja=l("code"),Jf=r("masked_lm_labels"),Qf=r(" becomes "),Qa=l("code"),Vf=r("labels"),Yf=r(" in "),Va=l("code"),Zf=r("BertForMaskedLM"),ep=r(" and "),Ya=l("code"),tp=r("BertForPreTraining"),op=r("."),rp=c(),te=l("li"),Za=l("code"),ap=r("masked_lm_labels"),lp=r(" becomes "),el=l("code"),sp=r("labels"),ip=r(" in "),tl=l("code"),np=r("DistilBertForMaskedLM"),dp=r("."),cp=c(),oe=l("li"),ol=l("code"),hp=r("masked_lm_labels"),fp=r(" becomes "),rl=l("code"),pp=r("labels"),mp=r(" in "),al=l("code"),up=r("ElectraForMaskedLM"),_p=r("."),vp=c(),re=l("li"),ll=l("code"),Ep=r("masked_lm_labels"),bp=r(" becomes "),sl=l("code"),wp=r("labels"),yp=r(" in "),il=l("code"),kp=r("LongformerForMaskedLM"),Tp=r("."),gp=c(),ae=l("li"),nl=l("code"),$p=r("masked_lm_labels"),Cp=r(" becomes "),dl=l("code"),Op=r("labels"),Dp=r(" in "),cl=l("code"),xp=r("MobileBertForMaskedLM"),Ap=r("."),zp=c(),le=l("li"),hl=l("code"),Pp=r("masked_lm_labels"),Lp=r(" becomes "),fl=l("code"),Ip=r("labels"),Sp=r(" in "),pl=l("code"),Mp=r("RobertaForMaskedLM"),jp=r("."),Fp=c(),se=l("li"),ml=l("code"),Bp=r("lm_labels"),Np=r(" becomes "),ul=l("code"),Hp=r("labels"),qp=r(" in "),_l=l("code"),Rp=r("BartForConditionalGeneration"),Wp=r("."),Gp=c(),ie=l("li"),vl=l("code"),Up=r("lm_labels"),Xp=r(" becomes "),El=l("code"),Kp=r("labels"),Jp=r(" in "),bl=l("code"),Qp=r("GPT2DoubleHeadsModel"),Vp=r("."),Yp=c(),ne=l("li"),wl=l("code"),Zp=r("lm_labels"),em=r(" becomes "),yl=l("code"),tm=r("labels"),om=r(" in "),kl=l("code"),rm=r("OpenAIGPTDoubleHeadsModel"),am=r("."),lm=c(),de=l("li"),Tl=l("code"),sm=r("lm_labels"),im=r(" becomes "),gl=l("code"),nm=r("labels"),dm=r(" in "),$l=l("code"),cm=r("T5ForConditionalGeneration"),hm=r("."),Sn=c(),nr=l("p"),fm=r("In several models, the caching mechanism becomes consistent with the other models:"),Mn=c(),S=l("ul"),bt=l("li"),Cl=l("code"),pm=r("decoder_cached_states"),mm=r(" becomes "),Ol=l("code"),um=r("past_key_values"),_m=r(" in all BART-like, FSMT and T5 models."),vm=c(),wt=l("li"),Dl=l("code"),Em=r("decoder_past_key_values"),bm=r(" becomes "),xl=l("code"),wm=r("past_key_values"),ym=r(" in all BART-like, FSMT and T5 models."),km=c(),yt=l("li"),Al=l("code"),Tm=r("past"),gm=r(" becomes "),zl=l("code"),$m=r("past_key_values"),Cm=r(" in all CTRL models."),Om=c(),kt=l("li"),Pl=l("code"),Dm=r("past"),xm=r(" becomes "),Ll=l("code"),Am=r("past_key_values"),zm=r(" in all GPT-2 models."),jn=c(),dr=l("p"),Pm=r("Regarding the tokenizer classes:"),Fn=c(),ce=l("ul"),xe=l("li"),Lm=r("The tokenizer attribute "),Il=l("code"),Im=r("max_len"),Sm=r(" becomes "),Sl=l("code"),Mm=r("model_max_length"),jm=r("."),Fm=c(),Ae=l("li"),Bm=r("The tokenizer attribute "),Ml=l("code"),Nm=r("return_lengths"),Hm=r(" becomes "),jl=l("code"),qm=r("return_length"),Rm=r("."),Wm=c(),ze=l("li"),Gm=r("The tokenizer encoding argument "),Fl=l("code"),Um=r("is_pretokenized"),Xm=r(" becomes "),Bl=l("code"),Km=r("is_split_into_words"),Jm=r("."),Bn=c(),Tt=l("p"),Qm=r("Regarding the "),Nl=l("code"),Vm=r("Trainer"),Ym=r(" class:"),Nn=c(),g=l("ul"),B=l("li"),Zm=r("The "),Hl=l("code"),eu=r("Trainer"),tu=r(" argument "),ql=l("code"),ou=r("tb_writer"),ru=r(" is removed in favor of the callback "),Rl=l("code"),au=r("TensorBoardCallback(tb_writer=...)"),lu=r("."),su=c(),N=l("li"),iu=r("The "),Wl=l("code"),nu=r("Trainer"),du=r(" argument "),Gl=l("code"),cu=r("prediction_loss_only"),hu=r(" is removed in favor of the class argument "),Ul=l("code"),fu=r("args.prediction_loss_only"),pu=r("."),mu=c(),Pe=l("li"),uu=r("The "),Xl=l("code"),_u=r("Trainer"),vu=r(" attribute "),Kl=l("code"),Eu=r("data_collator"),bu=r(" should be a callable."),wu=c(),H=l("li"),yu=r("The "),Jl=l("code"),ku=r("Trainer"),Tu=r(" method "),Ql=l("code"),gu=r("_log"),$u=r(" is deprecated in favor of "),Vl=l("code"),Cu=r("log"),Ou=r("."),Du=c(),q=l("li"),xu=r("The "),Yl=l("code"),Au=r("Trainer"),zu=r(" method "),Zl=l("code"),Pu=r("_training_step"),Lu=r(" is deprecated in favor of "),es=l("code"),Iu=r("training_step"),Su=r("."),Mu=c(),R=l("li"),ju=r("The "),ts=l("code"),Fu=r("Trainer"),Bu=r(" method "),os=l("code"),Nu=r("_prediction_loop"),Hu=r(" is deprecated in favor of "),rs=l("code"),qu=r("prediction_loop"),Ru=r("."),Wu=c(),W=l("li"),Gu=r("The "),as=l("code"),Uu=r("Trainer"),Xu=r(" method "),ls=l("code"),Ku=r("is_local_master"),Ju=r(" is deprecated in favor of "),ss=l("code"),Qu=r("is_local_process_zero"),Vu=r("."),Yu=c(),G=l("li"),Zu=r("The "),is=l("code"),e_=r("Trainer"),t_=r(" method "),ns=l("code"),o_=r("is_world_master"),r_=r(" is deprecated in favor of "),ds=l("code"),a_=r("is_world_process_zero"),l_=r("."),Hn=c(),gt=l("p"),s_=r("Regarding the "),cs=l("code"),i_=r("TFTrainer"),n_=r(" class:"),qn=c(),D=l("ul"),U=l("li"),d_=r("The "),hs=l("code"),c_=r("TFTrainer"),h_=r(" argument "),fs=l("code"),f_=r("prediction_loss_only"),p_=r(" is removed in favor of the class argument "),ps=l("code"),m_=r("args.prediction_loss_only"),u_=r("."),__=c(),X=l("li"),v_=r("The "),ms=l("code"),E_=r("Trainer"),b_=r(" method "),us=l("code"),w_=r("_log"),y_=r(" is deprecated in favor of "),_s=l("code"),k_=r("log"),T_=r("."),g_=c(),K=l("li"),$_=r("The "),vs=l("code"),C_=r("TFTrainer"),O_=r(" method "),Es=l("code"),D_=r("_prediction_loop"),x_=r(" is deprecated in favor of "),bs=l("code"),A_=r("prediction_loop"),z_=r("."),P_=c(),J=l("li"),L_=r("The "),ws=l("code"),I_=r("TFTrainer"),S_=r(" method "),ys=l("code"),M_=r("_setup_wandb"),j_=r(" is deprecated in favor of "),ks=l("code"),F_=r("setup_wandb"),B_=r("."),N_=c(),Q=l("li"),H_=r("The "),Ts=l("code"),q_=r("TFTrainer"),R_=r(" method "),gs=l("code"),W_=r("_run_model"),G_=r(" is deprecated in favor of "),$s=l("code"),U_=r("run_model"),X_=r("."),Rn=c(),$t=l("p"),K_=r("Regarding the "),Cs=l("code"),J_=r("TrainingArguments"),Q_=r(" class:"),Wn=c(),cr=l("ul"),V=l("li"),V_=r("The "),Os=l("code"),Y_=r("TrainingArguments"),Z_=r(" argument "),Ds=l("code"),ev=r("evaluate_during_training"),tv=r(" is deprecated in favor of "),xs=l("code"),ov=r("evaluation_strategy"),rv=r("."),Gn=c(),hr=l("p"),av=r("Regarding the Transfo-XL model:"),Un=c(),Ct=l("ul"),Le=l("li"),lv=r("The Transfo-XL configuration attribute "),As=l("code"),sv=r("tie_weight"),iv=r(" becomes "),zs=l("code"),nv=r("tie_words_embeddings"),dv=r("."),cv=c(),Ie=l("li"),hv=r("The Transfo-XL modeling method "),Ps=l("code"),fv=r("reset_length"),pv=r(" becomes "),Ls=l("code"),mv=r("reset_memory_length"),uv=r("."),Xn=c(),fr=l("p"),_v=r("Regarding pipelines:"),Kn=c(),pr=l("ul"),Y=l("li"),vv=r("The "),Is=l("code"),Ev=r("FillMaskPipeline"),bv=r(" argument "),Ss=l("code"),wv=r("topk"),yv=r(" becomes "),Ms=l("code"),kv=r("top_k"),Tv=r("."),Jn=c(),Se=l("h2"),Ot=l("a"),js=l("span"),p(Lo.$$.fragment),gv=c(),Fs=l("span"),$v=r("Migrating from pytorch-transformers to \u{1F917} Transformers"),Qn=c(),Dt=l("p"),Cv=r("Here is a quick summary of what you should take care of when migrating from "),Bs=l("code"),Ov=r("pytorch-transformers"),Dv=r(" to \u{1F917} Transformers."),Vn=c(),Me=l("h3"),xt=l("a"),Ns=l("span"),p(Io.$$.fragment),xv=c(),je=l("span"),Av=r("Positional order of some models' keywords inputs ("),Hs=l("code"),zv=r("attention_mask"),Pv=r(", "),qs=l("code"),Lv=r("token_type_ids"),Iv=r("...) changed"),Yn=c(),M=l("p"),Sv=r("To be able to use Torchscript (see #1010, #1204 and #1195) the specific order of some models "),Rs=l("strong"),Mv=r("keywords inputs"),jv=r(" ("),Ws=l("code"),Fv=r("attention_mask"),Bv=r(", "),Gs=l("code"),Nv=r("token_type_ids"),Hv=r("\u2026) has been changed."),Zn=c(),At=l("p"),qv=r("If you used to call the models with keyword names for keyword arguments, e.g. "),Us=l("code"),Rv=r("model(inputs_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)"),Wv=r(", this should not cause any change."),ed=c(),zt=l("p"),Gv=r("If you used to call the models with positional inputs for keyword arguments, e.g. "),Xs=l("code"),Uv=r("model(inputs_ids, attention_mask, token_type_ids)"),Xv=r(", you may have to double check the exact order of input arguments."),td=c(),Fe=l("h2"),Pt=l("a"),Ks=l("span"),p(So.$$.fragment),Kv=c(),Js=l("span"),Jv=r("Migrating from pytorch-pretrained-bert"),od=c(),Lt=l("p"),Qv=r("Here is a quick summary of what you should take care of when migrating from "),Qs=l("code"),Vv=r("pytorch-pretrained-bert"),Yv=r(" to \u{1F917} Transformers"),rd=c(),Be=l("h3"),It=l("a"),Vs=l("span"),p(Mo.$$.fragment),Zv=c(),mr=l("span"),e1=r("Models always output "),Ys=l("code"),t1=r("tuples"),ad=c(),he=l("p"),o1=r("The main breaking change when migrating from "),Zs=l("code"),r1=r("pytorch-pretrained-bert"),a1=r(" to \u{1F917} Transformers is that the models forward method always outputs a "),ei=l("code"),l1=r("tuple"),s1=r(" with various elements depending on the model and the configuration parameters."),ld=c(),St=l("p"),i1=r("The exact content of the tuples for each model are detailed in the models\u2019 docstrings and the "),jo=l("a"),n1=r("documentation"),d1=r("."),sd=c(),Mt=l("p"),c1=r("In pretty much every case, you will be fine by taking the first element of the output as the output you previously used in "),ti=l("code"),h1=r("pytorch-pretrained-bert"),f1=r("."),id=c(),fe=l("p"),p1=r("Here is a "),oi=l("code"),m1=r("pytorch-pretrained-bert"),u1=r(" to \u{1F917} Transformers conversion example for a "),ri=l("code"),_1=r("BertForSequenceClassification"),v1=r(" classification model:"),nd=c(),p(Fo.$$.fragment),dd=c(),Ne=l("h3"),jt=l("a"),ai=l("span"),p(Bo.$$.fragment),E1=c(),li=l("span"),b1=r("Serialization"),cd=c(),Ft=l("p"),w1=r("Breaking change in the "),si=l("code"),y1=r("from_pretrained()"),k1=r("method:"),hd=c(),Bt=l("ol"),ii=l("li"),He=l("p"),T1=r("Models are now set in evaluation mode by default when instantiated with the "),ni=l("code"),g1=r("from_pretrained()"),$1=r(" method. To train them don\u2019t forget to set them back in training mode ("),di=l("code"),C1=r("model.train()"),O1=r(") to activate the dropout modules."),D1=c(),ci=l("li"),w=l("p"),x1=r("The additional "),hi=l("code"),A1=r("*inputs"),z1=r(" and "),fi=l("code"),P1=r("**kwargs"),L1=r(" arguments supplied to the "),pi=l("code"),I1=r("from_pretrained()"),S1=r(" method used to be directly passed to the underlying model\u2019s class "),mi=l("code"),M1=r("__init__()"),j1=r(" method. They are now used to update the model configuration attribute first which can break derived model classes build based on the previous "),ui=l("code"),F1=r("BertForSequenceClassification"),B1=r(" examples. More precisely, the positional arguments "),_i=l("code"),N1=r("*inputs"),H1=r(" provided to "),vi=l("code"),q1=r("from_pretrained()"),R1=r(" are directly forwarded the model "),Ei=l("code"),W1=r("__init__()"),G1=r(" method while the keyword arguments "),bi=l("code"),U1=r("**kwargs"),X1=r(" (i) which match configuration class attributes are used to update said attributes (ii) which don\u2019t match any configuration class attributes are forwarded to the model "),wi=l("code"),K1=r("__init__()"),J1=r(" method."),fd=c(),Nt=l("p"),Q1=r("Also, while not a breaking change, the serialization methods have been standardized and you probably should switch to the new method "),yi=l("code"),V1=r("save_pretrained(save_directory)"),Y1=r(" if you were using any other serialization method before."),pd=c(),ur=l("p"),Z1=r("Here is an example:"),md=c(),p(No.$$.fragment),ud=c(),qe=l("h3"),Ht=l("a"),ki=l("span"),p(Ho.$$.fragment),eE=c(),Ti=l("span"),tE=r("Optimizers: BertAdam & OpenAIAdam are now AdamW, schedules are standard PyTorch schedules"),_d=c(),j=l("p"),oE=r("The two optimizers previously included, "),gi=l("code"),rE=r("BertAdam"),aE=r(" and "),$i=l("code"),lE=r("OpenAIAdam"),sE=r(", have been replaced by a single "),Ci=l("code"),iE=r("AdamW"),nE=r(" optimizer which has a few differences:"),vd=c(),pe=l("ul"),Oi=l("li"),dE=r("it only implements weights decay correction,"),cE=c(),Di=l("li"),hE=r("schedules are now externals (see below),"),fE=c(),xi=l("li"),pE=r("gradient clipping is now also external (see below)."),Ed=c(),me=l("p"),mE=r("The new optimizer "),Ai=l("code"),uE=r("AdamW"),_E=r(" matches PyTorch "),zi=l("code"),vE=r("Adam"),EE=r(" optimizer API and let you use standard PyTorch or apex methods for the schedule and clipping."),bd=c(),qt=l("p"),bE=r("The schedules are now standard "),qo=l("a"),wE=r("PyTorch learning rate schedulers"),yE=r(" and not part of the optimizer anymore."),wd=c(),ue=l("p"),kE=r("Here is a conversion examples from "),Pi=l("code"),TE=r("BertAdam"),gE=r(" with a linear warmup and decay schedule to "),Li=l("code"),$E=r("AdamW"),CE=r(" and the same schedule:"),yd=c(),p(Ro.$$.fragment),this.h()},l(t){const n=mw('[data-svelte="svelte-1phssyn"]',document.head);Z=s(n,"META",{name:!0,content:!0}),n.forEach(o),Zo=h(t),A=s(t,"H1",{class:!0});var Td=i(A);F=s(Td,"A",{id:!0,class:!0,href:!0});var xE=i(F);Lr=s(xE,"SPAN",{});var AE=i(Lr);m(no.$$.fragment,AE),AE.forEach(o),xE.forEach(o),bc=h(Td),Ir=s(Td,"SPAN",{});var zE=i(Ir);wc=a(zE,"Migrating from previous packages"),zE.forEach(o),Td.forEach(o),Bi=h(t),ve=s(t,"H2",{class:!0});var gd=i(ve);Ge=s(gd,"A",{id:!0,class:!0,href:!0});var PE=i(Ge);Sr=s(PE,"SPAN",{});var LE=i(Sr);m(co.$$.fragment,LE),LE.forEach(o),PE.forEach(o),yc=h(gd),Ue=s(gd,"SPAN",{});var Ii=i(Ue);kc=a(Ii,"Migrating from transformers "),Mr=s(Ii,"CODE",{});var IE=i(Mr);Tc=a(IE,"v3.x"),IE.forEach(o),gc=a(Ii," to "),jr=s(Ii,"CODE",{});var SE=i(jr);$c=a(SE,"v4.x"),SE.forEach(o),Ii.forEach(o),gd.forEach(o),Ni=h(t),er=s(t,"P",{});var ME=i(er);Cc=a(ME,`A couple of changes were introduced when the switch from version 3 to version 4 was done. Below is a summary of the
expected changes:`),ME.forEach(o),Hi=h(t),Ee=s(t,"H4",{class:!0});var $d=i(Ee);Xe=s($d,"A",{id:!0,class:!0,href:!0});var jE=i(Xe);Fr=s(jE,"SPAN",{});var FE=i(Fr);m(ho.$$.fragment,FE),FE.forEach(o),jE.forEach(o),Oc=h($d),Br=s($d,"SPAN",{});var BE=i(Br);Dc=a(BE,"1. AutoTokenizers and pipelines now use fast (rust) tokenizers by default."),BE.forEach(o),$d.forEach(o),qi=h(t),tr=s(t,"P",{});var NE=i(tr);xc=a(NE,"The python and rust tokenizers have roughly the same API, but the rust tokenizers have a more complete feature set."),NE.forEach(o),Ri=h(t),or=s(t,"P",{});var HE=i(or);Ac=a(HE,"This introduces two breaking changes:"),HE.forEach(o),Wi=h(t),Ke=s(t,"UL",{});var Cd=i(Ke);Nr=s(Cd,"LI",{});var qE=i(Nr);zc=a(qE,"The handling of overflowing tokens between the python and rust tokenizers is different."),qE.forEach(o),Pc=h(Cd),Hr=s(Cd,"LI",{});var RE=i(Hr);Lc=a(RE,"The rust tokenizers do not accept integers in the encoding methods."),RE.forEach(o),Cd.forEach(o),Gi=h(t),be=s(t,"H5",{class:!0});var Od=i(be);Je=s(Od,"A",{id:!0,class:!0,href:!0});var WE=i(Je);qr=s(WE,"SPAN",{});var GE=i(qr);m(fo.$$.fragment,GE),GE.forEach(o),WE.forEach(o),Ic=h(Od),Rr=s(Od,"SPAN",{});var UE=i(Rr);Sc=a(UE,"How to obtain the same behavior as v3.x in v4.x"),UE.forEach(o),Od.forEach(o),Ui=h(t),Qe=s(t,"UL",{});var Dd=i(Qe);po=s(Dd,"LI",{});var xd=i(po);Mc=a(xd,"The pipelines now contain additional features out of the box. See the "),Ve=s(xd,"A",{href:!0});var Ad=i(Ve);jc=a(Ad,"token-classification pipeline with the "),Wr=s(Ad,"CODE",{});var XE=i(Wr);Fc=a(XE,"grouped_entities"),XE.forEach(o),Bc=a(Ad," flag"),Ad.forEach(o),Nc=a(xd,"."),xd.forEach(o),Hc=h(Dd),we=s(Dd,"LI",{});var _r=i(we);qc=a(_r,"The auto-tokenizers now return rust tokenizers. In order to obtain the python tokenizers instead, the user may use the "),Gr=s(_r,"CODE",{});var KE=i(Gr);Rc=a(KE,"use_fast"),KE.forEach(o),Wc=a(_r," flag by setting it to "),Ur=s(_r,"CODE",{});var JE=i(Ur);Gc=a(JE,"False"),JE.forEach(o),Uc=a(_r,":"),_r.forEach(o),Dd.forEach(o),Xi=h(t),Ye=s(t,"P",{});var zd=i(Ye);Xc=a(zd,"In version "),Xr=s(zd,"CODE",{});var QE=i(Xr);Kc=a(QE,"v3.x"),QE.forEach(o),Jc=a(zd,":"),zd.forEach(o),Ki=h(t),m(mo.$$.fragment,t),Ji=h(t),Ze=s(t,"P",{});var Pd=i(Ze);Qc=a(Pd,"to obtain the same in version "),Kr=s(Pd,"CODE",{});var VE=i(Kr);Vc=a(VE,"v4.x"),VE.forEach(o),Yc=a(Pd,":"),Pd.forEach(o),Qi=h(t),m(uo.$$.fragment,t),Vi=h(t),ye=s(t,"H4",{class:!0});var Ld=i(ye);et=s(Ld,"A",{id:!0,class:!0,href:!0});var YE=i(et);Jr=s(YE,"SPAN",{});var ZE=i(Jr);m(_o.$$.fragment,ZE),ZE.forEach(o),YE.forEach(o),Zc=h(Ld),Qr=s(Ld,"SPAN",{});var eb=i(Qr);eh=a(eb,"2. SentencePiece is removed from the required dependencies"),eb.forEach(o),Ld.forEach(o),Yi=h(t),z=s(t,"P",{});var Rt=i(z);th=a(Rt,"The requirement on the SentencePiece dependency has been lifted from the "),Vr=s(Rt,"CODE",{});var tb=i(Vr);oh=a(tb,"setup.py"),tb.forEach(o),rh=a(Rt,". This is done so that we may have a channel on anaconda cloud without relying on "),Yr=s(Rt,"CODE",{});var ob=i(Yr);ah=a(ob,"conda-forge"),ob.forEach(o),lh=a(Rt,". This means that the tokenizers that depend on the SentencePiece library will not be available with a standard "),Zr=s(Rt,"CODE",{});var rb=i(Zr);sh=a(rb,"transformers"),rb.forEach(o),ih=a(Rt," installation."),Rt.forEach(o),Zi=h(t),tt=s(t,"P",{});var Id=i(tt);nh=a(Id,"This includes the "),ea=s(Id,"STRONG",{});var ab=i(ea);dh=a(ab,"slow"),ab.forEach(o),ch=a(Id," versions of:"),Id.forEach(o),en=h(t),T=s(t,"UL",{});var C=i(T);ta=s(C,"LI",{});var lb=i(ta);oa=s(lb,"CODE",{});var sb=i(oa);hh=a(sb,"XLNetTokenizer"),sb.forEach(o),lb.forEach(o),fh=h(C),ra=s(C,"LI",{});var ib=i(ra);aa=s(ib,"CODE",{});var nb=i(aa);ph=a(nb,"AlbertTokenizer"),nb.forEach(o),ib.forEach(o),mh=h(C),la=s(C,"LI",{});var db=i(la);sa=s(db,"CODE",{});var cb=i(sa);uh=a(cb,"CamembertTokenizer"),cb.forEach(o),db.forEach(o),_h=h(C),ia=s(C,"LI",{});var hb=i(ia);na=s(hb,"CODE",{});var fb=i(na);vh=a(fb,"MBartTokenizer"),fb.forEach(o),hb.forEach(o),Eh=h(C),da=s(C,"LI",{});var pb=i(da);ca=s(pb,"CODE",{});var mb=i(ca);bh=a(mb,"PegasusTokenizer"),mb.forEach(o),pb.forEach(o),wh=h(C),ha=s(C,"LI",{});var ub=i(ha);fa=s(ub,"CODE",{});var _b=i(fa);yh=a(_b,"T5Tokenizer"),_b.forEach(o),ub.forEach(o),kh=h(C),pa=s(C,"LI",{});var vb=i(pa);ma=s(vb,"CODE",{});var Eb=i(ma);Th=a(Eb,"ReformerTokenizer"),Eb.forEach(o),vb.forEach(o),gh=h(C),ua=s(C,"LI",{});var bb=i(ua);_a=s(bb,"CODE",{});var wb=i(_a);$h=a(wb,"XLMRobertaTokenizer"),wb.forEach(o),bb.forEach(o),C.forEach(o),tn=h(t),ke=s(t,"H5",{class:!0});var Sd=i(ke);ot=s(Sd,"A",{id:!0,class:!0,href:!0});var yb=i(ot);va=s(yb,"SPAN",{});var kb=i(va);m(vo.$$.fragment,kb),kb.forEach(o),yb.forEach(o),Ch=h(Sd),Ea=s(Sd,"SPAN",{});var Tb=i(Ea);Oh=a(Tb,"How to obtain the same behavior as v3.x in v4.x"),Tb.forEach(o),Sd.forEach(o),on=h(t),ee=s(t,"P",{});var vr=i(ee);Dh=a(vr,"In order to obtain the same behavior as version "),ba=s(vr,"CODE",{});var gb=i(ba);xh=a(gb,"v3.x"),gb.forEach(o),Ah=a(vr,", you should install "),wa=s(vr,"CODE",{});var $b=i(wa);zh=a($b,"sentencepiece"),$b.forEach(o),Ph=a(vr," additionally:"),vr.forEach(o),rn=h(t),rt=s(t,"P",{});var Md=i(rt);Lh=a(Md,"In version "),ya=s(Md,"CODE",{});var Cb=i(ya);Ih=a(Cb,"v3.x"),Cb.forEach(o),Sh=a(Md,":"),Md.forEach(o),an=h(t),m(Eo.$$.fragment,t),ln=h(t),at=s(t,"P",{});var jd=i(at);Mh=a(jd,"to obtain the same in version "),ka=s(jd,"CODE",{});var Ob=i(ka);jh=a(Ob,"v4.x"),Ob.forEach(o),Fh=a(jd,":"),jd.forEach(o),sn=h(t),m(bo.$$.fragment,t),nn=h(t),rr=s(t,"P",{});var Db=i(rr);Bh=a(Db,"or"),Db.forEach(o),dn=h(t),m(wo.$$.fragment,t),cn=h(t),Te=s(t,"H4",{class:!0});var Fd=i(Te);lt=s(Fd,"A",{id:!0,class:!0,href:!0});var xb=i(lt);Ta=s(xb,"SPAN",{});var Ab=i(Ta);m(yo.$$.fragment,Ab),Ab.forEach(o),xb.forEach(o),Nh=h(Fd),ga=s(Fd,"SPAN",{});var zb=i(ga);Hh=a(zb,"3. The architecture of the repo has been updated so that each model resides in its folder"),zb.forEach(o),Fd.forEach(o),hn=h(t),st=s(t,"P",{});var Bd=i(st);qh=a(Bd,"The past and foreseeable addition of new models means that the number of files in the directory "),$a=s(Bd,"CODE",{});var Pb=i($a);Rh=a(Pb,"src/transformers"),Pb.forEach(o),Wh=a(Bd," keeps growing and becomes harder to navigate and understand. We made the choice to put each model and the files accompanying it in their own sub-directories."),Bd.forEach(o),fn=h(t),ar=s(t,"P",{});var Lb=i(ar);Gh=a(Lb,"This is a breaking change as importing intermediary layers using a model\u2019s module directly needs to be done via a different path."),Lb.forEach(o),pn=h(t),ge=s(t,"H5",{class:!0});var Nd=i(ge);it=s(Nd,"A",{id:!0,class:!0,href:!0});var Ib=i(it);Ca=s(Ib,"SPAN",{});var Sb=i(Ca);m(ko.$$.fragment,Sb),Sb.forEach(o),Ib.forEach(o),Uh=h(Nd),Oa=s(Nd,"SPAN",{});var Mb=i(Oa);Xh=a(Mb,"How to obtain the same behavior as v3.x in v4.x"),Mb.forEach(o),Nd.forEach(o),mn=h(t),nt=s(t,"P",{});var Hd=i(nt);Kh=a(Hd,"In order to obtain the same behavior as version "),Da=s(Hd,"CODE",{});var jb=i(Da);Jh=a(jb,"v3.x"),jb.forEach(o),Qh=a(Hd,", you should update the path used to access the layers."),Hd.forEach(o),un=h(t),dt=s(t,"P",{});var qd=i(dt);Vh=a(qd,"In version "),xa=s(qd,"CODE",{});var Fb=i(xa);Yh=a(Fb,"v3.x"),Fb.forEach(o),Zh=a(qd,":"),qd.forEach(o),_n=h(t),m(To.$$.fragment,t),vn=h(t),ct=s(t,"P",{});var Rd=i(ct);ef=a(Rd,"to obtain the same in version "),Aa=s(Rd,"CODE",{});var Bb=i(Aa);tf=a(Bb,"v4.x"),Bb.forEach(o),of=a(Rd,":"),Rd.forEach(o),En=h(t),m(go.$$.fragment,t),bn=h(t),$e=s(t,"H4",{class:!0});var Wd=i($e);ht=s(Wd,"A",{id:!0,class:!0,href:!0});var Nb=i(ht);za=s(Nb,"SPAN",{});var Hb=i(za);m($o.$$.fragment,Hb),Hb.forEach(o),Nb.forEach(o),rf=h(Wd),Ce=s(Wd,"SPAN",{});var Er=i(Ce);af=a(Er,"4. Switching the "),Pa=s(Er,"CODE",{});var qb=i(Pa);lf=a(qb,"return_dict"),qb.forEach(o),sf=a(Er," argument to "),La=s(Er,"CODE",{});var Rb=i(La);nf=a(Rb,"True"),Rb.forEach(o),df=a(Er," by default"),Er.forEach(o),Wd.forEach(o),wn=h(t),ft=s(t,"P",{});var Gd=i(ft);cf=a(Gd,"The "),Co=s(Gd,"A",{href:!0});var OE=i(Co);Ia=s(OE,"CODE",{});var Wb=i(Ia);hf=a(Wb,"return_dict"),Wb.forEach(o),ff=a(OE," argument"),OE.forEach(o),pf=a(Gd," enables the return of dict-like python objects containing the model outputs, instead of the standard tuples. This object is self-documented as keys can be used to retrieve values, while also behaving as a tuple as users may retrieve objects by index or by slice."),Gd.forEach(o),yn=h(t),pt=s(t,"P",{});var Ud=i(pt);mf=a(Ud,"This is a breaking change as the limitation of that tuple is that it cannot be unpacked: "),Sa=s(Ud,"CODE",{});var Gb=i(Sa);uf=a(Gb,"value0, value1 = outputs"),Gb.forEach(o),_f=a(Ud," will not work."),Ud.forEach(o),kn=h(t),Oe=s(t,"H5",{class:!0});var Xd=i(Oe);mt=s(Xd,"A",{id:!0,class:!0,href:!0});var Ub=i(mt);Ma=s(Ub,"SPAN",{});var Xb=i(Ma);m(Oo.$$.fragment,Xb),Xb.forEach(o),Ub.forEach(o),vf=h(Xd),ja=s(Xd,"SPAN",{});var Kb=i(ja);Ef=a(Kb,"How to obtain the same behavior as v3.x in v4.x"),Kb.forEach(o),Xd.forEach(o),Tn=h(t),P=s(t,"P",{});var Wt=i(P);bf=a(Wt,"In order to obtain the same behavior as version "),Fa=s(Wt,"CODE",{});var Jb=i(Fa);wf=a(Jb,"v3.x"),Jb.forEach(o),yf=a(Wt,", you should specify the "),Ba=s(Wt,"CODE",{});var Qb=i(Ba);kf=a(Qb,"return_dict"),Qb.forEach(o),Tf=a(Wt," argument to "),Na=s(Wt,"CODE",{});var Vb=i(Na);gf=a(Vb,"False"),Vb.forEach(o),$f=a(Wt,", either in the model configuration or during the forward pass."),Wt.forEach(o),gn=h(t),ut=s(t,"P",{});var Kd=i(ut);Cf=a(Kd,"In version "),Ha=s(Kd,"CODE",{});var Yb=i(Ha);Of=a(Yb,"v3.x"),Yb.forEach(o),Df=a(Kd,":"),Kd.forEach(o),$n=h(t),m(Do.$$.fragment,t),Cn=h(t),_t=s(t,"P",{});var Jd=i(_t);xf=a(Jd,"to obtain the same in version "),qa=s(Jd,"CODE",{});var Zb=i(qa);Af=a(Zb,"v4.x"),Zb.forEach(o),zf=a(Jd,":"),Jd.forEach(o),On=h(t),m(xo.$$.fragment,t),Dn=h(t),lr=s(t,"P",{});var e2=i(lr);Pf=a(e2,"or"),e2.forEach(o),xn=h(t),m(Ao.$$.fragment,t),An=h(t),De=s(t,"H4",{class:!0});var Qd=i(De);vt=s(Qd,"A",{id:!0,class:!0,href:!0});var t2=i(vt);Ra=s(t2,"SPAN",{});var o2=i(Ra);m(zo.$$.fragment,o2),o2.forEach(o),t2.forEach(o),Lf=h(Qd),Wa=s(Qd,"SPAN",{});var r2=i(Wa);If=a(r2,"5. Removed some deprecated attributes"),r2.forEach(o),Qd.forEach(o),zn=h(t),Et=s(t,"P",{});var Vd=i(Et);Sf=a(Vd,"Attributes that were deprecated have been removed if they had been deprecated for at least a month. The full list of deprecated attributes can be found in "),Po=s(Vd,"A",{href:!0,rel:!0});var a2=i(Po);Mf=a(a2,"#8604"),a2.forEach(o),jf=a(Vd,"."),Vd.forEach(o),Pn=h(t),sr=s(t,"P",{});var l2=i(sr);Ff=a(l2,"Here is a list of these attributes/methods/arguments and what their replacements should be:"),l2.forEach(o),Ln=h(t),ir=s(t,"P",{});var s2=i(ir);Bf=a(s2,"In several models, the labels become consistent with the other models:"),s2.forEach(o),In=h(t),b=s(t,"UL",{});var y=i(b);L=s(y,"LI",{});var Re=i(L);Ga=s(Re,"CODE",{});var i2=i(Ga);Nf=a(i2,"masked_lm_labels"),i2.forEach(o),Hf=a(Re," becomes "),Ua=s(Re,"CODE",{});var n2=i(Ua);qf=a(n2,"labels"),n2.forEach(o),Rf=a(Re," in "),Xa=s(Re,"CODE",{});var d2=i(Xa);Wf=a(d2,"AlbertForMaskedLM"),d2.forEach(o),Gf=a(Re," and "),Ka=s(Re,"CODE",{});var c2=i(Ka);Uf=a(c2,"AlbertForPreTraining"),c2.forEach(o),Xf=a(Re,"."),Re.forEach(o),Kf=h(y),I=s(y,"LI",{});var We=i(I);Ja=s(We,"CODE",{});var h2=i(Ja);Jf=a(h2,"masked_lm_labels"),h2.forEach(o),Qf=a(We," becomes "),Qa=s(We,"CODE",{});var f2=i(Qa);Vf=a(f2,"labels"),f2.forEach(o),Yf=a(We," in "),Va=s(We,"CODE",{});var p2=i(Va);Zf=a(p2,"BertForMaskedLM"),p2.forEach(o),ep=a(We," and "),Ya=s(We,"CODE",{});var m2=i(Ya);tp=a(m2,"BertForPreTraining"),m2.forEach(o),op=a(We,"."),We.forEach(o),rp=h(y),te=s(y,"LI",{});var Wo=i(te);Za=s(Wo,"CODE",{});var u2=i(Za);ap=a(u2,"masked_lm_labels"),u2.forEach(o),lp=a(Wo," becomes "),el=s(Wo,"CODE",{});var _2=i(el);sp=a(_2,"labels"),_2.forEach(o),ip=a(Wo," in "),tl=s(Wo,"CODE",{});var v2=i(tl);np=a(v2,"DistilBertForMaskedLM"),v2.forEach(o),dp=a(Wo,"."),Wo.forEach(o),cp=h(y),oe=s(y,"LI",{});var Go=i(oe);ol=s(Go,"CODE",{});var E2=i(ol);hp=a(E2,"masked_lm_labels"),E2.forEach(o),fp=a(Go," becomes "),rl=s(Go,"CODE",{});var b2=i(rl);pp=a(b2,"labels"),b2.forEach(o),mp=a(Go," in "),al=s(Go,"CODE",{});var w2=i(al);up=a(w2,"ElectraForMaskedLM"),w2.forEach(o),_p=a(Go,"."),Go.forEach(o),vp=h(y),re=s(y,"LI",{});var Uo=i(re);ll=s(Uo,"CODE",{});var y2=i(ll);Ep=a(y2,"masked_lm_labels"),y2.forEach(o),bp=a(Uo," becomes "),sl=s(Uo,"CODE",{});var k2=i(sl);wp=a(k2,"labels"),k2.forEach(o),yp=a(Uo," in "),il=s(Uo,"CODE",{});var T2=i(il);kp=a(T2,"LongformerForMaskedLM"),T2.forEach(o),Tp=a(Uo,"."),Uo.forEach(o),gp=h(y),ae=s(y,"LI",{});var Xo=i(ae);nl=s(Xo,"CODE",{});var g2=i(nl);$p=a(g2,"masked_lm_labels"),g2.forEach(o),Cp=a(Xo," becomes "),dl=s(Xo,"CODE",{});var $2=i(dl);Op=a($2,"labels"),$2.forEach(o),Dp=a(Xo," in "),cl=s(Xo,"CODE",{});var C2=i(cl);xp=a(C2,"MobileBertForMaskedLM"),C2.forEach(o),Ap=a(Xo,"."),Xo.forEach(o),zp=h(y),le=s(y,"LI",{});var Ko=i(le);hl=s(Ko,"CODE",{});var O2=i(hl);Pp=a(O2,"masked_lm_labels"),O2.forEach(o),Lp=a(Ko," becomes "),fl=s(Ko,"CODE",{});var D2=i(fl);Ip=a(D2,"labels"),D2.forEach(o),Sp=a(Ko," in "),pl=s(Ko,"CODE",{});var x2=i(pl);Mp=a(x2,"RobertaForMaskedLM"),x2.forEach(o),jp=a(Ko,"."),Ko.forEach(o),Fp=h(y),se=s(y,"LI",{});var Jo=i(se);ml=s(Jo,"CODE",{});var A2=i(ml);Bp=a(A2,"lm_labels"),A2.forEach(o),Np=a(Jo," becomes "),ul=s(Jo,"CODE",{});var z2=i(ul);Hp=a(z2,"labels"),z2.forEach(o),qp=a(Jo," in "),_l=s(Jo,"CODE",{});var P2=i(_l);Rp=a(P2,"BartForConditionalGeneration"),P2.forEach(o),Wp=a(Jo,"."),Jo.forEach(o),Gp=h(y),ie=s(y,"LI",{});var Qo=i(ie);vl=s(Qo,"CODE",{});var L2=i(vl);Up=a(L2,"lm_labels"),L2.forEach(o),Xp=a(Qo," becomes "),El=s(Qo,"CODE",{});var I2=i(El);Kp=a(I2,"labels"),I2.forEach(o),Jp=a(Qo," in "),bl=s(Qo,"CODE",{});var S2=i(bl);Qp=a(S2,"GPT2DoubleHeadsModel"),S2.forEach(o),Vp=a(Qo,"."),Qo.forEach(o),Yp=h(y),ne=s(y,"LI",{});var Vo=i(ne);wl=s(Vo,"CODE",{});var M2=i(wl);Zp=a(M2,"lm_labels"),M2.forEach(o),em=a(Vo," becomes "),yl=s(Vo,"CODE",{});var j2=i(yl);tm=a(j2,"labels"),j2.forEach(o),om=a(Vo," in "),kl=s(Vo,"CODE",{});var F2=i(kl);rm=a(F2,"OpenAIGPTDoubleHeadsModel"),F2.forEach(o),am=a(Vo,"."),Vo.forEach(o),lm=h(y),de=s(y,"LI",{});var Yo=i(de);Tl=s(Yo,"CODE",{});var B2=i(Tl);sm=a(B2,"lm_labels"),B2.forEach(o),im=a(Yo," becomes "),gl=s(Yo,"CODE",{});var N2=i(gl);nm=a(N2,"labels"),N2.forEach(o),dm=a(Yo," in "),$l=s(Yo,"CODE",{});var H2=i($l);cm=a(H2,"T5ForConditionalGeneration"),H2.forEach(o),hm=a(Yo,"."),Yo.forEach(o),y.forEach(o),Sn=h(t),nr=s(t,"P",{});var q2=i(nr);fm=a(q2,"In several models, the caching mechanism becomes consistent with the other models:"),q2.forEach(o),Mn=h(t),S=s(t,"UL",{});var Gt=i(S);bt=s(Gt,"LI",{});var Si=i(bt);Cl=s(Si,"CODE",{});var R2=i(Cl);pm=a(R2,"decoder_cached_states"),R2.forEach(o),mm=a(Si," becomes "),Ol=s(Si,"CODE",{});var W2=i(Ol);um=a(W2,"past_key_values"),W2.forEach(o),_m=a(Si," in all BART-like, FSMT and T5 models."),Si.forEach(o),vm=h(Gt),wt=s(Gt,"LI",{});var Mi=i(wt);Dl=s(Mi,"CODE",{});var G2=i(Dl);Em=a(G2,"decoder_past_key_values"),G2.forEach(o),bm=a(Mi," becomes "),xl=s(Mi,"CODE",{});var U2=i(xl);wm=a(U2,"past_key_values"),U2.forEach(o),ym=a(Mi," in all BART-like, FSMT and T5 models."),Mi.forEach(o),km=h(Gt),yt=s(Gt,"LI",{});var ji=i(yt);Al=s(ji,"CODE",{});var X2=i(Al);Tm=a(X2,"past"),X2.forEach(o),gm=a(ji," becomes "),zl=s(ji,"CODE",{});var K2=i(zl);$m=a(K2,"past_key_values"),K2.forEach(o),Cm=a(ji," in all CTRL models."),ji.forEach(o),Om=h(Gt),kt=s(Gt,"LI",{});var Fi=i(kt);Pl=s(Fi,"CODE",{});var J2=i(Pl);Dm=a(J2,"past"),J2.forEach(o),xm=a(Fi," becomes "),Ll=s(Fi,"CODE",{});var Q2=i(Ll);Am=a(Q2,"past_key_values"),Q2.forEach(o),zm=a(Fi," in all GPT-2 models."),Fi.forEach(o),Gt.forEach(o),jn=h(t),dr=s(t,"P",{});var V2=i(dr);Pm=a(V2,"Regarding the tokenizer classes:"),V2.forEach(o),Fn=h(t),ce=s(t,"UL",{});var br=i(ce);xe=s(br,"LI",{});var wr=i(xe);Lm=a(wr,"The tokenizer attribute "),Il=s(wr,"CODE",{});var Y2=i(Il);Im=a(Y2,"max_len"),Y2.forEach(o),Sm=a(wr," becomes "),Sl=s(wr,"CODE",{});var Z2=i(Sl);Mm=a(Z2,"model_max_length"),Z2.forEach(o),jm=a(wr,"."),wr.forEach(o),Fm=h(br),Ae=s(br,"LI",{});var yr=i(Ae);Bm=a(yr,"The tokenizer attribute "),Ml=s(yr,"CODE",{});var e3=i(Ml);Nm=a(e3,"return_lengths"),e3.forEach(o),Hm=a(yr," becomes "),jl=s(yr,"CODE",{});var t3=i(jl);qm=a(t3,"return_length"),t3.forEach(o),Rm=a(yr,"."),yr.forEach(o),Wm=h(br),ze=s(br,"LI",{});var kr=i(ze);Gm=a(kr,"The tokenizer encoding argument "),Fl=s(kr,"CODE",{});var o3=i(Fl);Um=a(o3,"is_pretokenized"),o3.forEach(o),Xm=a(kr," becomes "),Bl=s(kr,"CODE",{});var r3=i(Bl);Km=a(r3,"is_split_into_words"),r3.forEach(o),Jm=a(kr,"."),kr.forEach(o),br.forEach(o),Bn=h(t),Tt=s(t,"P",{});var Yd=i(Tt);Qm=a(Yd,"Regarding the "),Nl=s(Yd,"CODE",{});var a3=i(Nl);Vm=a(a3,"Trainer"),a3.forEach(o),Ym=a(Yd," class:"),Yd.forEach(o),Nn=h(t),g=s(t,"UL",{});var O=i(g);B=s(O,"LI",{});var Ut=i(B);Zm=a(Ut,"The "),Hl=s(Ut,"CODE",{});var l3=i(Hl);eu=a(l3,"Trainer"),l3.forEach(o),tu=a(Ut," argument "),ql=s(Ut,"CODE",{});var s3=i(ql);ou=a(s3,"tb_writer"),s3.forEach(o),ru=a(Ut," is removed in favor of the callback "),Rl=s(Ut,"CODE",{});var i3=i(Rl);au=a(i3,"TensorBoardCallback(tb_writer=...)"),i3.forEach(o),lu=a(Ut,"."),Ut.forEach(o),su=h(O),N=s(O,"LI",{});var Xt=i(N);iu=a(Xt,"The "),Wl=s(Xt,"CODE",{});var n3=i(Wl);nu=a(n3,"Trainer"),n3.forEach(o),du=a(Xt," argument "),Gl=s(Xt,"CODE",{});var d3=i(Gl);cu=a(d3,"prediction_loss_only"),d3.forEach(o),hu=a(Xt," is removed in favor of the class argument "),Ul=s(Xt,"CODE",{});var c3=i(Ul);fu=a(c3,"args.prediction_loss_only"),c3.forEach(o),pu=a(Xt,"."),Xt.forEach(o),mu=h(O),Pe=s(O,"LI",{});var Tr=i(Pe);uu=a(Tr,"The "),Xl=s(Tr,"CODE",{});var h3=i(Xl);_u=a(h3,"Trainer"),h3.forEach(o),vu=a(Tr," attribute "),Kl=s(Tr,"CODE",{});var f3=i(Kl);Eu=a(f3,"data_collator"),f3.forEach(o),bu=a(Tr," should be a callable."),Tr.forEach(o),wu=h(O),H=s(O,"LI",{});var Kt=i(H);yu=a(Kt,"The "),Jl=s(Kt,"CODE",{});var p3=i(Jl);ku=a(p3,"Trainer"),p3.forEach(o),Tu=a(Kt," method "),Ql=s(Kt,"CODE",{});var m3=i(Ql);gu=a(m3,"_log"),m3.forEach(o),$u=a(Kt," is deprecated in favor of "),Vl=s(Kt,"CODE",{});var u3=i(Vl);Cu=a(u3,"log"),u3.forEach(o),Ou=a(Kt,"."),Kt.forEach(o),Du=h(O),q=s(O,"LI",{});var Jt=i(q);xu=a(Jt,"The "),Yl=s(Jt,"CODE",{});var _3=i(Yl);Au=a(_3,"Trainer"),_3.forEach(o),zu=a(Jt," method "),Zl=s(Jt,"CODE",{});var v3=i(Zl);Pu=a(v3,"_training_step"),v3.forEach(o),Lu=a(Jt," is deprecated in favor of "),es=s(Jt,"CODE",{});var E3=i(es);Iu=a(E3,"training_step"),E3.forEach(o),Su=a(Jt,"."),Jt.forEach(o),Mu=h(O),R=s(O,"LI",{});var Qt=i(R);ju=a(Qt,"The "),ts=s(Qt,"CODE",{});var b3=i(ts);Fu=a(b3,"Trainer"),b3.forEach(o),Bu=a(Qt," method "),os=s(Qt,"CODE",{});var w3=i(os);Nu=a(w3,"_prediction_loop"),w3.forEach(o),Hu=a(Qt," is deprecated in favor of "),rs=s(Qt,"CODE",{});var y3=i(rs);qu=a(y3,"prediction_loop"),y3.forEach(o),Ru=a(Qt,"."),Qt.forEach(o),Wu=h(O),W=s(O,"LI",{});var Vt=i(W);Gu=a(Vt,"The "),as=s(Vt,"CODE",{});var k3=i(as);Uu=a(k3,"Trainer"),k3.forEach(o),Xu=a(Vt," method "),ls=s(Vt,"CODE",{});var T3=i(ls);Ku=a(T3,"is_local_master"),T3.forEach(o),Ju=a(Vt," is deprecated in favor of "),ss=s(Vt,"CODE",{});var g3=i(ss);Qu=a(g3,"is_local_process_zero"),g3.forEach(o),Vu=a(Vt,"."),Vt.forEach(o),Yu=h(O),G=s(O,"LI",{});var Yt=i(G);Zu=a(Yt,"The "),is=s(Yt,"CODE",{});var $3=i(is);e_=a($3,"Trainer"),$3.forEach(o),t_=a(Yt," method "),ns=s(Yt,"CODE",{});var C3=i(ns);o_=a(C3,"is_world_master"),C3.forEach(o),r_=a(Yt," is deprecated in favor of "),ds=s(Yt,"CODE",{});var O3=i(ds);a_=a(O3,"is_world_process_zero"),O3.forEach(o),l_=a(Yt,"."),Yt.forEach(o),O.forEach(o),Hn=h(t),gt=s(t,"P",{});var Zd=i(gt);s_=a(Zd,"Regarding the "),cs=s(Zd,"CODE",{});var D3=i(cs);i_=a(D3,"TFTrainer"),D3.forEach(o),n_=a(Zd," class:"),Zd.forEach(o),qn=h(t),D=s(t,"UL",{});var _e=i(D);U=s(_e,"LI",{});var Zt=i(U);d_=a(Zt,"The "),hs=s(Zt,"CODE",{});var x3=i(hs);c_=a(x3,"TFTrainer"),x3.forEach(o),h_=a(Zt," argument "),fs=s(Zt,"CODE",{});var A3=i(fs);f_=a(A3,"prediction_loss_only"),A3.forEach(o),p_=a(Zt," is removed in favor of the class argument "),ps=s(Zt,"CODE",{});var z3=i(ps);m_=a(z3,"args.prediction_loss_only"),z3.forEach(o),u_=a(Zt,"."),Zt.forEach(o),__=h(_e),X=s(_e,"LI",{});var eo=i(X);v_=a(eo,"The "),ms=s(eo,"CODE",{});var P3=i(ms);E_=a(P3,"Trainer"),P3.forEach(o),b_=a(eo," method "),us=s(eo,"CODE",{});var L3=i(us);w_=a(L3,"_log"),L3.forEach(o),y_=a(eo," is deprecated in favor of "),_s=s(eo,"CODE",{});var I3=i(_s);k_=a(I3,"log"),I3.forEach(o),T_=a(eo,"."),eo.forEach(o),g_=h(_e),K=s(_e,"LI",{});var to=i(K);$_=a(to,"The "),vs=s(to,"CODE",{});var S3=i(vs);C_=a(S3,"TFTrainer"),S3.forEach(o),O_=a(to," method "),Es=s(to,"CODE",{});var M3=i(Es);D_=a(M3,"_prediction_loop"),M3.forEach(o),x_=a(to," is deprecated in favor of "),bs=s(to,"CODE",{});var j3=i(bs);A_=a(j3,"prediction_loop"),j3.forEach(o),z_=a(to,"."),to.forEach(o),P_=h(_e),J=s(_e,"LI",{});var oo=i(J);L_=a(oo,"The "),ws=s(oo,"CODE",{});var F3=i(ws);I_=a(F3,"TFTrainer"),F3.forEach(o),S_=a(oo," method "),ys=s(oo,"CODE",{});var B3=i(ys);M_=a(B3,"_setup_wandb"),B3.forEach(o),j_=a(oo," is deprecated in favor of "),ks=s(oo,"CODE",{});var N3=i(ks);F_=a(N3,"setup_wandb"),N3.forEach(o),B_=a(oo,"."),oo.forEach(o),N_=h(_e),Q=s(_e,"LI",{});var ro=i(Q);H_=a(ro,"The "),Ts=s(ro,"CODE",{});var H3=i(Ts);q_=a(H3,"TFTrainer"),H3.forEach(o),R_=a(ro," method "),gs=s(ro,"CODE",{});var q3=i(gs);W_=a(q3,"_run_model"),q3.forEach(o),G_=a(ro," is deprecated in favor of "),$s=s(ro,"CODE",{});var R3=i($s);U_=a(R3,"run_model"),R3.forEach(o),X_=a(ro,"."),ro.forEach(o),_e.forEach(o),Rn=h(t),$t=s(t,"P",{});var ec=i($t);K_=a(ec,"Regarding the "),Cs=s(ec,"CODE",{});var W3=i(Cs);J_=a(W3,"TrainingArguments"),W3.forEach(o),Q_=a(ec," class:"),ec.forEach(o),Wn=h(t),cr=s(t,"UL",{});var G3=i(cr);V=s(G3,"LI",{});var ao=i(V);V_=a(ao,"The "),Os=s(ao,"CODE",{});var U3=i(Os);Y_=a(U3,"TrainingArguments"),U3.forEach(o),Z_=a(ao," argument "),Ds=s(ao,"CODE",{});var X3=i(Ds);ev=a(X3,"evaluate_during_training"),X3.forEach(o),tv=a(ao," is deprecated in favor of "),xs=s(ao,"CODE",{});var K3=i(xs);ov=a(K3,"evaluation_strategy"),K3.forEach(o),rv=a(ao,"."),ao.forEach(o),G3.forEach(o),Gn=h(t),hr=s(t,"P",{});var J3=i(hr);av=a(J3,"Regarding the Transfo-XL model:"),J3.forEach(o),Un=h(t),Ct=s(t,"UL",{});var tc=i(Ct);Le=s(tc,"LI",{});var gr=i(Le);lv=a(gr,"The Transfo-XL configuration attribute "),As=s(gr,"CODE",{});var Q3=i(As);sv=a(Q3,"tie_weight"),Q3.forEach(o),iv=a(gr," becomes "),zs=s(gr,"CODE",{});var V3=i(zs);nv=a(V3,"tie_words_embeddings"),V3.forEach(o),dv=a(gr,"."),gr.forEach(o),cv=h(tc),Ie=s(tc,"LI",{});var $r=i(Ie);hv=a($r,"The Transfo-XL modeling method "),Ps=s($r,"CODE",{});var Y3=i(Ps);fv=a(Y3,"reset_length"),Y3.forEach(o),pv=a($r," becomes "),Ls=s($r,"CODE",{});var Z3=i(Ls);mv=a(Z3,"reset_memory_length"),Z3.forEach(o),uv=a($r,"."),$r.forEach(o),tc.forEach(o),Xn=h(t),fr=s(t,"P",{});var e4=i(fr);_v=a(e4,"Regarding pipelines:"),e4.forEach(o),Kn=h(t),pr=s(t,"UL",{});var t4=i(pr);Y=s(t4,"LI",{});var lo=i(Y);vv=a(lo,"The "),Is=s(lo,"CODE",{});var o4=i(Is);Ev=a(o4,"FillMaskPipeline"),o4.forEach(o),bv=a(lo," argument "),Ss=s(lo,"CODE",{});var r4=i(Ss);wv=a(r4,"topk"),r4.forEach(o),yv=a(lo," becomes "),Ms=s(lo,"CODE",{});var a4=i(Ms);kv=a(a4,"top_k"),a4.forEach(o),Tv=a(lo,"."),lo.forEach(o),t4.forEach(o),Jn=h(t),Se=s(t,"H2",{class:!0});var oc=i(Se);Ot=s(oc,"A",{id:!0,class:!0,href:!0});var l4=i(Ot);js=s(l4,"SPAN",{});var s4=i(js);m(Lo.$$.fragment,s4),s4.forEach(o),l4.forEach(o),gv=h(oc),Fs=s(oc,"SPAN",{});var i4=i(Fs);$v=a(i4,"Migrating from pytorch-transformers to \u{1F917} Transformers"),i4.forEach(o),oc.forEach(o),Qn=h(t),Dt=s(t,"P",{});var rc=i(Dt);Cv=a(rc,"Here is a quick summary of what you should take care of when migrating from "),Bs=s(rc,"CODE",{});var n4=i(Bs);Ov=a(n4,"pytorch-transformers"),n4.forEach(o),Dv=a(rc," to \u{1F917} Transformers."),rc.forEach(o),Vn=h(t),Me=s(t,"H3",{class:!0});var ac=i(Me);xt=s(ac,"A",{id:!0,class:!0,href:!0});var d4=i(xt);Ns=s(d4,"SPAN",{});var c4=i(Ns);m(Io.$$.fragment,c4),c4.forEach(o),d4.forEach(o),xv=h(ac),je=s(ac,"SPAN",{});var Cr=i(je);Av=a(Cr,"Positional order of some models' keywords inputs ("),Hs=s(Cr,"CODE",{});var h4=i(Hs);zv=a(h4,"attention_mask"),h4.forEach(o),Pv=a(Cr,", "),qs=s(Cr,"CODE",{});var f4=i(qs);Lv=a(f4,"token_type_ids"),f4.forEach(o),Iv=a(Cr,"...) changed"),Cr.forEach(o),ac.forEach(o),Yn=h(t),M=s(t,"P",{});var so=i(M);Sv=a(so,"To be able to use Torchscript (see #1010, #1204 and #1195) the specific order of some models "),Rs=s(so,"STRONG",{});var p4=i(Rs);Mv=a(p4,"keywords inputs"),p4.forEach(o),jv=a(so," ("),Ws=s(so,"CODE",{});var m4=i(Ws);Fv=a(m4,"attention_mask"),m4.forEach(o),Bv=a(so,", "),Gs=s(so,"CODE",{});var u4=i(Gs);Nv=a(u4,"token_type_ids"),u4.forEach(o),Hv=a(so,"\u2026) has been changed."),so.forEach(o),Zn=h(t),At=s(t,"P",{});var lc=i(At);qv=a(lc,"If you used to call the models with keyword names for keyword arguments, e.g. "),Us=s(lc,"CODE",{});var _4=i(Us);Rv=a(_4,"model(inputs_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)"),_4.forEach(o),Wv=a(lc,", this should not cause any change."),lc.forEach(o),ed=h(t),zt=s(t,"P",{});var sc=i(zt);Gv=a(sc,"If you used to call the models with positional inputs for keyword arguments, e.g. "),Xs=s(sc,"CODE",{});var v4=i(Xs);Uv=a(v4,"model(inputs_ids, attention_mask, token_type_ids)"),v4.forEach(o),Xv=a(sc,", you may have to double check the exact order of input arguments."),sc.forEach(o),td=h(t),Fe=s(t,"H2",{class:!0});var ic=i(Fe);Pt=s(ic,"A",{id:!0,class:!0,href:!0});var E4=i(Pt);Ks=s(E4,"SPAN",{});var b4=i(Ks);m(So.$$.fragment,b4),b4.forEach(o),E4.forEach(o),Kv=h(ic),Js=s(ic,"SPAN",{});var w4=i(Js);Jv=a(w4,"Migrating from pytorch-pretrained-bert"),w4.forEach(o),ic.forEach(o),od=h(t),Lt=s(t,"P",{});var nc=i(Lt);Qv=a(nc,"Here is a quick summary of what you should take care of when migrating from "),Qs=s(nc,"CODE",{});var y4=i(Qs);Vv=a(y4,"pytorch-pretrained-bert"),y4.forEach(o),Yv=a(nc," to \u{1F917} Transformers"),nc.forEach(o),rd=h(t),Be=s(t,"H3",{class:!0});var dc=i(Be);It=s(dc,"A",{id:!0,class:!0,href:!0});var k4=i(It);Vs=s(k4,"SPAN",{});var T4=i(Vs);m(Mo.$$.fragment,T4),T4.forEach(o),k4.forEach(o),Zv=h(dc),mr=s(dc,"SPAN",{});var DE=i(mr);e1=a(DE,"Models always output "),Ys=s(DE,"CODE",{});var g4=i(Ys);t1=a(g4,"tuples"),g4.forEach(o),DE.forEach(o),dc.forEach(o),ad=h(t),he=s(t,"P",{});var Or=i(he);o1=a(Or,"The main breaking change when migrating from "),Zs=s(Or,"CODE",{});var $4=i(Zs);r1=a($4,"pytorch-pretrained-bert"),$4.forEach(o),a1=a(Or," to \u{1F917} Transformers is that the models forward method always outputs a "),ei=s(Or,"CODE",{});var C4=i(ei);l1=a(C4,"tuple"),C4.forEach(o),s1=a(Or," with various elements depending on the model and the configuration parameters."),Or.forEach(o),ld=h(t),St=s(t,"P",{});var cc=i(St);i1=a(cc,"The exact content of the tuples for each model are detailed in the models\u2019 docstrings and the "),jo=s(cc,"A",{href:!0,rel:!0});var O4=i(jo);n1=a(O4,"documentation"),O4.forEach(o),d1=a(cc,"."),cc.forEach(o),sd=h(t),Mt=s(t,"P",{});var hc=i(Mt);c1=a(hc,"In pretty much every case, you will be fine by taking the first element of the output as the output you previously used in "),ti=s(hc,"CODE",{});var D4=i(ti);h1=a(D4,"pytorch-pretrained-bert"),D4.forEach(o),f1=a(hc,"."),hc.forEach(o),id=h(t),fe=s(t,"P",{});var Dr=i(fe);p1=a(Dr,"Here is a "),oi=s(Dr,"CODE",{});var x4=i(oi);m1=a(x4,"pytorch-pretrained-bert"),x4.forEach(o),u1=a(Dr," to \u{1F917} Transformers conversion example for a "),ri=s(Dr,"CODE",{});var A4=i(ri);_1=a(A4,"BertForSequenceClassification"),A4.forEach(o),v1=a(Dr," classification model:"),Dr.forEach(o),nd=h(t),m(Fo.$$.fragment,t),dd=h(t),Ne=s(t,"H3",{class:!0});var fc=i(Ne);jt=s(fc,"A",{id:!0,class:!0,href:!0});var z4=i(jt);ai=s(z4,"SPAN",{});var P4=i(ai);m(Bo.$$.fragment,P4),P4.forEach(o),z4.forEach(o),E1=h(fc),li=s(fc,"SPAN",{});var L4=i(li);b1=a(L4,"Serialization"),L4.forEach(o),fc.forEach(o),cd=h(t),Ft=s(t,"P",{});var pc=i(Ft);w1=a(pc,"Breaking change in the "),si=s(pc,"CODE",{});var I4=i(si);y1=a(I4,"from_pretrained()"),I4.forEach(o),k1=a(pc,"method:"),pc.forEach(o),hd=h(t),Bt=s(t,"OL",{});var mc=i(Bt);ii=s(mc,"LI",{});var S4=i(ii);He=s(S4,"P",{});var xr=i(He);T1=a(xr,"Models are now set in evaluation mode by default when instantiated with the "),ni=s(xr,"CODE",{});var M4=i(ni);g1=a(M4,"from_pretrained()"),M4.forEach(o),$1=a(xr," method. To train them don\u2019t forget to set them back in training mode ("),di=s(xr,"CODE",{});var j4=i(di);C1=a(j4,"model.train()"),j4.forEach(o),O1=a(xr,") to activate the dropout modules."),xr.forEach(o),S4.forEach(o),D1=h(mc),ci=s(mc,"LI",{});var F4=i(ci);w=s(F4,"P",{});var k=i(w);x1=a(k,"The additional "),hi=s(k,"CODE",{});var B4=i(hi);A1=a(B4,"*inputs"),B4.forEach(o),z1=a(k," and "),fi=s(k,"CODE",{});var N4=i(fi);P1=a(N4,"**kwargs"),N4.forEach(o),L1=a(k," arguments supplied to the "),pi=s(k,"CODE",{});var H4=i(pi);I1=a(H4,"from_pretrained()"),H4.forEach(o),S1=a(k," method used to be directly passed to the underlying model\u2019s class "),mi=s(k,"CODE",{});var q4=i(mi);M1=a(q4,"__init__()"),q4.forEach(o),j1=a(k," method. They are now used to update the model configuration attribute first which can break derived model classes build based on the previous "),ui=s(k,"CODE",{});var R4=i(ui);F1=a(R4,"BertForSequenceClassification"),R4.forEach(o),B1=a(k," examples. More precisely, the positional arguments "),_i=s(k,"CODE",{});var W4=i(_i);N1=a(W4,"*inputs"),W4.forEach(o),H1=a(k," provided to "),vi=s(k,"CODE",{});var G4=i(vi);q1=a(G4,"from_pretrained()"),G4.forEach(o),R1=a(k," are directly forwarded the model "),Ei=s(k,"CODE",{});var U4=i(Ei);W1=a(U4,"__init__()"),U4.forEach(o),G1=a(k," method while the keyword arguments "),bi=s(k,"CODE",{});var X4=i(bi);U1=a(X4,"**kwargs"),X4.forEach(o),X1=a(k," (i) which match configuration class attributes are used to update said attributes (ii) which don\u2019t match any configuration class attributes are forwarded to the model "),wi=s(k,"CODE",{});var K4=i(wi);K1=a(K4,"__init__()"),K4.forEach(o),J1=a(k," method."),k.forEach(o),F4.forEach(o),mc.forEach(o),fd=h(t),Nt=s(t,"P",{});var uc=i(Nt);Q1=a(uc,"Also, while not a breaking change, the serialization methods have been standardized and you probably should switch to the new method "),yi=s(uc,"CODE",{});var J4=i(yi);V1=a(J4,"save_pretrained(save_directory)"),J4.forEach(o),Y1=a(uc," if you were using any other serialization method before."),uc.forEach(o),pd=h(t),ur=s(t,"P",{});var Q4=i(ur);Z1=a(Q4,"Here is an example:"),Q4.forEach(o),md=h(t),m(No.$$.fragment,t),ud=h(t),qe=s(t,"H3",{class:!0});var _c=i(qe);Ht=s(_c,"A",{id:!0,class:!0,href:!0});var V4=i(Ht);ki=s(V4,"SPAN",{});var Y4=i(ki);m(Ho.$$.fragment,Y4),Y4.forEach(o),V4.forEach(o),eE=h(_c),Ti=s(_c,"SPAN",{});var Z4=i(Ti);tE=a(Z4,"Optimizers: BertAdam & OpenAIAdam are now AdamW, schedules are standard PyTorch schedules"),Z4.forEach(o),_c.forEach(o),_d=h(t),j=s(t,"P",{});var io=i(j);oE=a(io,"The two optimizers previously included, "),gi=s(io,"CODE",{});var ew=i(gi);rE=a(ew,"BertAdam"),ew.forEach(o),aE=a(io," and "),$i=s(io,"CODE",{});var tw=i($i);lE=a(tw,"OpenAIAdam"),tw.forEach(o),sE=a(io,", have been replaced by a single "),Ci=s(io,"CODE",{});var ow=i(Ci);iE=a(ow,"AdamW"),ow.forEach(o),nE=a(io," optimizer which has a few differences:"),io.forEach(o),vd=h(t),pe=s(t,"UL",{});var Ar=i(pe);Oi=s(Ar,"LI",{});var rw=i(Oi);dE=a(rw,"it only implements weights decay correction,"),rw.forEach(o),cE=h(Ar),Di=s(Ar,"LI",{});var aw=i(Di);hE=a(aw,"schedules are now externals (see below),"),aw.forEach(o),fE=h(Ar),xi=s(Ar,"LI",{});var lw=i(xi);pE=a(lw,"gradient clipping is now also external (see below)."),lw.forEach(o),Ar.forEach(o),Ed=h(t),me=s(t,"P",{});var zr=i(me);mE=a(zr,"The new optimizer "),Ai=s(zr,"CODE",{});var sw=i(Ai);uE=a(sw,"AdamW"),sw.forEach(o),_E=a(zr," matches PyTorch "),zi=s(zr,"CODE",{});var iw=i(zi);vE=a(iw,"Adam"),iw.forEach(o),EE=a(zr," optimizer API and let you use standard PyTorch or apex methods for the schedule and clipping."),zr.forEach(o),bd=h(t),qt=s(t,"P",{});var vc=i(qt);bE=a(vc,"The schedules are now standard "),qo=s(vc,"A",{href:!0,rel:!0});var nw=i(qo);wE=a(nw,"PyTorch learning rate schedulers"),nw.forEach(o),yE=a(vc," and not part of the optimizer anymore."),vc.forEach(o),wd=h(t),ue=s(t,"P",{});var Pr=i(ue);kE=a(Pr,"Here is a conversion examples from "),Pi=s(Pr,"CODE",{});var dw=i(Pi);TE=a(dw,"BertAdam"),dw.forEach(o),gE=a(Pr," with a linear warmup and decay schedule to "),Li=s(Pr,"CODE",{});var cw=i(Li);$E=a(cw,"AdamW"),cw.forEach(o),CE=a(Pr," and the same schedule:"),Pr.forEach(o),yd=h(t),m(Ro.$$.fragment,t),this.h()},h(){f(Z,"name","hf:doc:metadata"),f(Z,"content",JSON.stringify(vw)),f(F,"id","migrating-from-previous-packages"),f(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(F,"href","#migrating-from-previous-packages"),f(A,"class","relative group"),f(Ge,"id","migrating-from-transformers-v3x-to-v4x"),f(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ge,"href","#migrating-from-transformers-v3x-to-v4x"),f(ve,"class","relative group"),f(Xe,"id","1-autotokenizers-and-pipelines-now-use-fast-rust-tokenizers-by-default"),f(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Xe,"href","#1-autotokenizers-and-pipelines-now-use-fast-rust-tokenizers-by-default"),f(Ee,"class","relative group"),f(Je,"id","how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Je,"href","#how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(be,"class","relative group"),f(Ve,"href","main_classes/pipelines#transformers.TokenClassificationPipeline"),f(et,"id","2-sentencepiece-is-removed-from-the-required-dependencies"),f(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(et,"href","#2-sentencepiece-is-removed-from-the-required-dependencies"),f(ye,"class","relative group"),f(ot,"id","how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ot,"href","#how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(ke,"class","relative group"),f(lt,"id","3-the-architecture-of-the-repo-has-been-updated-so-that-each-model-resides-in-its-folder"),f(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(lt,"href","#3-the-architecture-of-the-repo-has-been-updated-so-that-each-model-resides-in-its-folder"),f(Te,"class","relative group"),f(it,"id","how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(it,"href","#how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(ge,"class","relative group"),f(ht,"id","4-switching-the-returndict-argument-to-true-by-default"),f(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ht,"href","#4-switching-the-returndict-argument-to-true-by-default"),f($e,"class","relative group"),f(Co,"href","main_classes/output"),f(mt,"id","how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(mt,"href","#how-to-obtain-the-same-behavior-as-v3x-in-v4x"),f(Oe,"class","relative group"),f(vt,"id","5-removed-some-deprecated-attributes"),f(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(vt,"href","#5-removed-some-deprecated-attributes"),f(De,"class","relative group"),f(Po,"href","https://github.com/huggingface/transformers/pull/8604"),f(Po,"rel","nofollow"),f(Ot,"id","migrating-from-pytorchtransformers-to-transformers"),f(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ot,"href","#migrating-from-pytorchtransformers-to-transformers"),f(Se,"class","relative group"),f(xt,"id","positional-order-of-some-models-keywords-inputs-attentionmask-tokentypeids-changed"),f(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(xt,"href","#positional-order-of-some-models-keywords-inputs-attentionmask-tokentypeids-changed"),f(Me,"class","relative group"),f(Pt,"id","migrating-from-pytorchpretrainedbert"),f(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Pt,"href","#migrating-from-pytorchpretrainedbert"),f(Fe,"class","relative group"),f(It,"id","models-always-output-tuples"),f(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(It,"href","#models-always-output-tuples"),f(Be,"class","relative group"),f(jo,"href","https://huggingface.co/transformers/"),f(jo,"rel","nofollow"),f(jt,"id","serialization"),f(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(jt,"href","#serialization"),f(Ne,"class","relative group"),f(Ht,"id","optimizers-bertadam-openaiadam-are-now-adamw-schedules-are-standard-pytorch-schedules"),f(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ht,"href","#optimizers-bertadam-openaiadam-are-now-adamw-schedules-are-standard-pytorch-schedules"),f(qe,"class","relative group"),f(qo,"href","https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate"),f(qo,"rel","nofollow")},m(t,n){e(document.head,Z),d(t,Zo,n),d(t,A,n),e(A,F),e(F,Lr),u(no,Lr,null),e(A,bc),e(A,Ir),e(Ir,wc),d(t,Bi,n),d(t,ve,n),e(ve,Ge),e(Ge,Sr),u(co,Sr,null),e(ve,yc),e(ve,Ue),e(Ue,kc),e(Ue,Mr),e(Mr,Tc),e(Ue,gc),e(Ue,jr),e(jr,$c),d(t,Ni,n),d(t,er,n),e(er,Cc),d(t,Hi,n),d(t,Ee,n),e(Ee,Xe),e(Xe,Fr),u(ho,Fr,null),e(Ee,Oc),e(Ee,Br),e(Br,Dc),d(t,qi,n),d(t,tr,n),e(tr,xc),d(t,Ri,n),d(t,or,n),e(or,Ac),d(t,Wi,n),d(t,Ke,n),e(Ke,Nr),e(Nr,zc),e(Ke,Pc),e(Ke,Hr),e(Hr,Lc),d(t,Gi,n),d(t,be,n),e(be,Je),e(Je,qr),u(fo,qr,null),e(be,Ic),e(be,Rr),e(Rr,Sc),d(t,Ui,n),d(t,Qe,n),e(Qe,po),e(po,Mc),e(po,Ve),e(Ve,jc),e(Ve,Wr),e(Wr,Fc),e(Ve,Bc),e(po,Nc),e(Qe,Hc),e(Qe,we),e(we,qc),e(we,Gr),e(Gr,Rc),e(we,Wc),e(we,Ur),e(Ur,Gc),e(we,Uc),d(t,Xi,n),d(t,Ye,n),e(Ye,Xc),e(Ye,Xr),e(Xr,Kc),e(Ye,Jc),d(t,Ki,n),u(mo,t,n),d(t,Ji,n),d(t,Ze,n),e(Ze,Qc),e(Ze,Kr),e(Kr,Vc),e(Ze,Yc),d(t,Qi,n),u(uo,t,n),d(t,Vi,n),d(t,ye,n),e(ye,et),e(et,Jr),u(_o,Jr,null),e(ye,Zc),e(ye,Qr),e(Qr,eh),d(t,Yi,n),d(t,z,n),e(z,th),e(z,Vr),e(Vr,oh),e(z,rh),e(z,Yr),e(Yr,ah),e(z,lh),e(z,Zr),e(Zr,sh),e(z,ih),d(t,Zi,n),d(t,tt,n),e(tt,nh),e(tt,ea),e(ea,dh),e(tt,ch),d(t,en,n),d(t,T,n),e(T,ta),e(ta,oa),e(oa,hh),e(T,fh),e(T,ra),e(ra,aa),e(aa,ph),e(T,mh),e(T,la),e(la,sa),e(sa,uh),e(T,_h),e(T,ia),e(ia,na),e(na,vh),e(T,Eh),e(T,da),e(da,ca),e(ca,bh),e(T,wh),e(T,ha),e(ha,fa),e(fa,yh),e(T,kh),e(T,pa),e(pa,ma),e(ma,Th),e(T,gh),e(T,ua),e(ua,_a),e(_a,$h),d(t,tn,n),d(t,ke,n),e(ke,ot),e(ot,va),u(vo,va,null),e(ke,Ch),e(ke,Ea),e(Ea,Oh),d(t,on,n),d(t,ee,n),e(ee,Dh),e(ee,ba),e(ba,xh),e(ee,Ah),e(ee,wa),e(wa,zh),e(ee,Ph),d(t,rn,n),d(t,rt,n),e(rt,Lh),e(rt,ya),e(ya,Ih),e(rt,Sh),d(t,an,n),u(Eo,t,n),d(t,ln,n),d(t,at,n),e(at,Mh),e(at,ka),e(ka,jh),e(at,Fh),d(t,sn,n),u(bo,t,n),d(t,nn,n),d(t,rr,n),e(rr,Bh),d(t,dn,n),u(wo,t,n),d(t,cn,n),d(t,Te,n),e(Te,lt),e(lt,Ta),u(yo,Ta,null),e(Te,Nh),e(Te,ga),e(ga,Hh),d(t,hn,n),d(t,st,n),e(st,qh),e(st,$a),e($a,Rh),e(st,Wh),d(t,fn,n),d(t,ar,n),e(ar,Gh),d(t,pn,n),d(t,ge,n),e(ge,it),e(it,Ca),u(ko,Ca,null),e(ge,Uh),e(ge,Oa),e(Oa,Xh),d(t,mn,n),d(t,nt,n),e(nt,Kh),e(nt,Da),e(Da,Jh),e(nt,Qh),d(t,un,n),d(t,dt,n),e(dt,Vh),e(dt,xa),e(xa,Yh),e(dt,Zh),d(t,_n,n),u(To,t,n),d(t,vn,n),d(t,ct,n),e(ct,ef),e(ct,Aa),e(Aa,tf),e(ct,of),d(t,En,n),u(go,t,n),d(t,bn,n),d(t,$e,n),e($e,ht),e(ht,za),u($o,za,null),e($e,rf),e($e,Ce),e(Ce,af),e(Ce,Pa),e(Pa,lf),e(Ce,sf),e(Ce,La),e(La,nf),e(Ce,df),d(t,wn,n),d(t,ft,n),e(ft,cf),e(ft,Co),e(Co,Ia),e(Ia,hf),e(Co,ff),e(ft,pf),d(t,yn,n),d(t,pt,n),e(pt,mf),e(pt,Sa),e(Sa,uf),e(pt,_f),d(t,kn,n),d(t,Oe,n),e(Oe,mt),e(mt,Ma),u(Oo,Ma,null),e(Oe,vf),e(Oe,ja),e(ja,Ef),d(t,Tn,n),d(t,P,n),e(P,bf),e(P,Fa),e(Fa,wf),e(P,yf),e(P,Ba),e(Ba,kf),e(P,Tf),e(P,Na),e(Na,gf),e(P,$f),d(t,gn,n),d(t,ut,n),e(ut,Cf),e(ut,Ha),e(Ha,Of),e(ut,Df),d(t,$n,n),u(Do,t,n),d(t,Cn,n),d(t,_t,n),e(_t,xf),e(_t,qa),e(qa,Af),e(_t,zf),d(t,On,n),u(xo,t,n),d(t,Dn,n),d(t,lr,n),e(lr,Pf),d(t,xn,n),u(Ao,t,n),d(t,An,n),d(t,De,n),e(De,vt),e(vt,Ra),u(zo,Ra,null),e(De,Lf),e(De,Wa),e(Wa,If),d(t,zn,n),d(t,Et,n),e(Et,Sf),e(Et,Po),e(Po,Mf),e(Et,jf),d(t,Pn,n),d(t,sr,n),e(sr,Ff),d(t,Ln,n),d(t,ir,n),e(ir,Bf),d(t,In,n),d(t,b,n),e(b,L),e(L,Ga),e(Ga,Nf),e(L,Hf),e(L,Ua),e(Ua,qf),e(L,Rf),e(L,Xa),e(Xa,Wf),e(L,Gf),e(L,Ka),e(Ka,Uf),e(L,Xf),e(b,Kf),e(b,I),e(I,Ja),e(Ja,Jf),e(I,Qf),e(I,Qa),e(Qa,Vf),e(I,Yf),e(I,Va),e(Va,Zf),e(I,ep),e(I,Ya),e(Ya,tp),e(I,op),e(b,rp),e(b,te),e(te,Za),e(Za,ap),e(te,lp),e(te,el),e(el,sp),e(te,ip),e(te,tl),e(tl,np),e(te,dp),e(b,cp),e(b,oe),e(oe,ol),e(ol,hp),e(oe,fp),e(oe,rl),e(rl,pp),e(oe,mp),e(oe,al),e(al,up),e(oe,_p),e(b,vp),e(b,re),e(re,ll),e(ll,Ep),e(re,bp),e(re,sl),e(sl,wp),e(re,yp),e(re,il),e(il,kp),e(re,Tp),e(b,gp),e(b,ae),e(ae,nl),e(nl,$p),e(ae,Cp),e(ae,dl),e(dl,Op),e(ae,Dp),e(ae,cl),e(cl,xp),e(ae,Ap),e(b,zp),e(b,le),e(le,hl),e(hl,Pp),e(le,Lp),e(le,fl),e(fl,Ip),e(le,Sp),e(le,pl),e(pl,Mp),e(le,jp),e(b,Fp),e(b,se),e(se,ml),e(ml,Bp),e(se,Np),e(se,ul),e(ul,Hp),e(se,qp),e(se,_l),e(_l,Rp),e(se,Wp),e(b,Gp),e(b,ie),e(ie,vl),e(vl,Up),e(ie,Xp),e(ie,El),e(El,Kp),e(ie,Jp),e(ie,bl),e(bl,Qp),e(ie,Vp),e(b,Yp),e(b,ne),e(ne,wl),e(wl,Zp),e(ne,em),e(ne,yl),e(yl,tm),e(ne,om),e(ne,kl),e(kl,rm),e(ne,am),e(b,lm),e(b,de),e(de,Tl),e(Tl,sm),e(de,im),e(de,gl),e(gl,nm),e(de,dm),e(de,$l),e($l,cm),e(de,hm),d(t,Sn,n),d(t,nr,n),e(nr,fm),d(t,Mn,n),d(t,S,n),e(S,bt),e(bt,Cl),e(Cl,pm),e(bt,mm),e(bt,Ol),e(Ol,um),e(bt,_m),e(S,vm),e(S,wt),e(wt,Dl),e(Dl,Em),e(wt,bm),e(wt,xl),e(xl,wm),e(wt,ym),e(S,km),e(S,yt),e(yt,Al),e(Al,Tm),e(yt,gm),e(yt,zl),e(zl,$m),e(yt,Cm),e(S,Om),e(S,kt),e(kt,Pl),e(Pl,Dm),e(kt,xm),e(kt,Ll),e(Ll,Am),e(kt,zm),d(t,jn,n),d(t,dr,n),e(dr,Pm),d(t,Fn,n),d(t,ce,n),e(ce,xe),e(xe,Lm),e(xe,Il),e(Il,Im),e(xe,Sm),e(xe,Sl),e(Sl,Mm),e(xe,jm),e(ce,Fm),e(ce,Ae),e(Ae,Bm),e(Ae,Ml),e(Ml,Nm),e(Ae,Hm),e(Ae,jl),e(jl,qm),e(Ae,Rm),e(ce,Wm),e(ce,ze),e(ze,Gm),e(ze,Fl),e(Fl,Um),e(ze,Xm),e(ze,Bl),e(Bl,Km),e(ze,Jm),d(t,Bn,n),d(t,Tt,n),e(Tt,Qm),e(Tt,Nl),e(Nl,Vm),e(Tt,Ym),d(t,Nn,n),d(t,g,n),e(g,B),e(B,Zm),e(B,Hl),e(Hl,eu),e(B,tu),e(B,ql),e(ql,ou),e(B,ru),e(B,Rl),e(Rl,au),e(B,lu),e(g,su),e(g,N),e(N,iu),e(N,Wl),e(Wl,nu),e(N,du),e(N,Gl),e(Gl,cu),e(N,hu),e(N,Ul),e(Ul,fu),e(N,pu),e(g,mu),e(g,Pe),e(Pe,uu),e(Pe,Xl),e(Xl,_u),e(Pe,vu),e(Pe,Kl),e(Kl,Eu),e(Pe,bu),e(g,wu),e(g,H),e(H,yu),e(H,Jl),e(Jl,ku),e(H,Tu),e(H,Ql),e(Ql,gu),e(H,$u),e(H,Vl),e(Vl,Cu),e(H,Ou),e(g,Du),e(g,q),e(q,xu),e(q,Yl),e(Yl,Au),e(q,zu),e(q,Zl),e(Zl,Pu),e(q,Lu),e(q,es),e(es,Iu),e(q,Su),e(g,Mu),e(g,R),e(R,ju),e(R,ts),e(ts,Fu),e(R,Bu),e(R,os),e(os,Nu),e(R,Hu),e(R,rs),e(rs,qu),e(R,Ru),e(g,Wu),e(g,W),e(W,Gu),e(W,as),e(as,Uu),e(W,Xu),e(W,ls),e(ls,Ku),e(W,Ju),e(W,ss),e(ss,Qu),e(W,Vu),e(g,Yu),e(g,G),e(G,Zu),e(G,is),e(is,e_),e(G,t_),e(G,ns),e(ns,o_),e(G,r_),e(G,ds),e(ds,a_),e(G,l_),d(t,Hn,n),d(t,gt,n),e(gt,s_),e(gt,cs),e(cs,i_),e(gt,n_),d(t,qn,n),d(t,D,n),e(D,U),e(U,d_),e(U,hs),e(hs,c_),e(U,h_),e(U,fs),e(fs,f_),e(U,p_),e(U,ps),e(ps,m_),e(U,u_),e(D,__),e(D,X),e(X,v_),e(X,ms),e(ms,E_),e(X,b_),e(X,us),e(us,w_),e(X,y_),e(X,_s),e(_s,k_),e(X,T_),e(D,g_),e(D,K),e(K,$_),e(K,vs),e(vs,C_),e(K,O_),e(K,Es),e(Es,D_),e(K,x_),e(K,bs),e(bs,A_),e(K,z_),e(D,P_),e(D,J),e(J,L_),e(J,ws),e(ws,I_),e(J,S_),e(J,ys),e(ys,M_),e(J,j_),e(J,ks),e(ks,F_),e(J,B_),e(D,N_),e(D,Q),e(Q,H_),e(Q,Ts),e(Ts,q_),e(Q,R_),e(Q,gs),e(gs,W_),e(Q,G_),e(Q,$s),e($s,U_),e(Q,X_),d(t,Rn,n),d(t,$t,n),e($t,K_),e($t,Cs),e(Cs,J_),e($t,Q_),d(t,Wn,n),d(t,cr,n),e(cr,V),e(V,V_),e(V,Os),e(Os,Y_),e(V,Z_),e(V,Ds),e(Ds,ev),e(V,tv),e(V,xs),e(xs,ov),e(V,rv),d(t,Gn,n),d(t,hr,n),e(hr,av),d(t,Un,n),d(t,Ct,n),e(Ct,Le),e(Le,lv),e(Le,As),e(As,sv),e(Le,iv),e(Le,zs),e(zs,nv),e(Le,dv),e(Ct,cv),e(Ct,Ie),e(Ie,hv),e(Ie,Ps),e(Ps,fv),e(Ie,pv),e(Ie,Ls),e(Ls,mv),e(Ie,uv),d(t,Xn,n),d(t,fr,n),e(fr,_v),d(t,Kn,n),d(t,pr,n),e(pr,Y),e(Y,vv),e(Y,Is),e(Is,Ev),e(Y,bv),e(Y,Ss),e(Ss,wv),e(Y,yv),e(Y,Ms),e(Ms,kv),e(Y,Tv),d(t,Jn,n),d(t,Se,n),e(Se,Ot),e(Ot,js),u(Lo,js,null),e(Se,gv),e(Se,Fs),e(Fs,$v),d(t,Qn,n),d(t,Dt,n),e(Dt,Cv),e(Dt,Bs),e(Bs,Ov),e(Dt,Dv),d(t,Vn,n),d(t,Me,n),e(Me,xt),e(xt,Ns),u(Io,Ns,null),e(Me,xv),e(Me,je),e(je,Av),e(je,Hs),e(Hs,zv),e(je,Pv),e(je,qs),e(qs,Lv),e(je,Iv),d(t,Yn,n),d(t,M,n),e(M,Sv),e(M,Rs),e(Rs,Mv),e(M,jv),e(M,Ws),e(Ws,Fv),e(M,Bv),e(M,Gs),e(Gs,Nv),e(M,Hv),d(t,Zn,n),d(t,At,n),e(At,qv),e(At,Us),e(Us,Rv),e(At,Wv),d(t,ed,n),d(t,zt,n),e(zt,Gv),e(zt,Xs),e(Xs,Uv),e(zt,Xv),d(t,td,n),d(t,Fe,n),e(Fe,Pt),e(Pt,Ks),u(So,Ks,null),e(Fe,Kv),e(Fe,Js),e(Js,Jv),d(t,od,n),d(t,Lt,n),e(Lt,Qv),e(Lt,Qs),e(Qs,Vv),e(Lt,Yv),d(t,rd,n),d(t,Be,n),e(Be,It),e(It,Vs),u(Mo,Vs,null),e(Be,Zv),e(Be,mr),e(mr,e1),e(mr,Ys),e(Ys,t1),d(t,ad,n),d(t,he,n),e(he,o1),e(he,Zs),e(Zs,r1),e(he,a1),e(he,ei),e(ei,l1),e(he,s1),d(t,ld,n),d(t,St,n),e(St,i1),e(St,jo),e(jo,n1),e(St,d1),d(t,sd,n),d(t,Mt,n),e(Mt,c1),e(Mt,ti),e(ti,h1),e(Mt,f1),d(t,id,n),d(t,fe,n),e(fe,p1),e(fe,oi),e(oi,m1),e(fe,u1),e(fe,ri),e(ri,_1),e(fe,v1),d(t,nd,n),u(Fo,t,n),d(t,dd,n),d(t,Ne,n),e(Ne,jt),e(jt,ai),u(Bo,ai,null),e(Ne,E1),e(Ne,li),e(li,b1),d(t,cd,n),d(t,Ft,n),e(Ft,w1),e(Ft,si),e(si,y1),e(Ft,k1),d(t,hd,n),d(t,Bt,n),e(Bt,ii),e(ii,He),e(He,T1),e(He,ni),e(ni,g1),e(He,$1),e(He,di),e(di,C1),e(He,O1),e(Bt,D1),e(Bt,ci),e(ci,w),e(w,x1),e(w,hi),e(hi,A1),e(w,z1),e(w,fi),e(fi,P1),e(w,L1),e(w,pi),e(pi,I1),e(w,S1),e(w,mi),e(mi,M1),e(w,j1),e(w,ui),e(ui,F1),e(w,B1),e(w,_i),e(_i,N1),e(w,H1),e(w,vi),e(vi,q1),e(w,R1),e(w,Ei),e(Ei,W1),e(w,G1),e(w,bi),e(bi,U1),e(w,X1),e(w,wi),e(wi,K1),e(w,J1),d(t,fd,n),d(t,Nt,n),e(Nt,Q1),e(Nt,yi),e(yi,V1),e(Nt,Y1),d(t,pd,n),d(t,ur,n),e(ur,Z1),d(t,md,n),u(No,t,n),d(t,ud,n),d(t,qe,n),e(qe,Ht),e(Ht,ki),u(Ho,ki,null),e(qe,eE),e(qe,Ti),e(Ti,tE),d(t,_d,n),d(t,j,n),e(j,oE),e(j,gi),e(gi,rE),e(j,aE),e(j,$i),e($i,lE),e(j,sE),e(j,Ci),e(Ci,iE),e(j,nE),d(t,vd,n),d(t,pe,n),e(pe,Oi),e(Oi,dE),e(pe,cE),e(pe,Di),e(Di,hE),e(pe,fE),e(pe,xi),e(xi,pE),d(t,Ed,n),d(t,me,n),e(me,mE),e(me,Ai),e(Ai,uE),e(me,_E),e(me,zi),e(zi,vE),e(me,EE),d(t,bd,n),d(t,qt,n),e(qt,bE),e(qt,qo),e(qo,wE),e(qt,yE),d(t,wd,n),d(t,ue,n),e(ue,kE),e(ue,Pi),e(Pi,TE),e(ue,gE),e(ue,Li),e(Li,$E),e(ue,CE),d(t,yd,n),u(Ro,t,n),kd=!0},p:uw,i(t){kd||(_(no.$$.fragment,t),_(co.$$.fragment,t),_(ho.$$.fragment,t),_(fo.$$.fragment,t),_(mo.$$.fragment,t),_(uo.$$.fragment,t),_(_o.$$.fragment,t),_(vo.$$.fragment,t),_(Eo.$$.fragment,t),_(bo.$$.fragment,t),_(wo.$$.fragment,t),_(yo.$$.fragment,t),_(ko.$$.fragment,t),_(To.$$.fragment,t),_(go.$$.fragment,t),_($o.$$.fragment,t),_(Oo.$$.fragment,t),_(Do.$$.fragment,t),_(xo.$$.fragment,t),_(Ao.$$.fragment,t),_(zo.$$.fragment,t),_(Lo.$$.fragment,t),_(Io.$$.fragment,t),_(So.$$.fragment,t),_(Mo.$$.fragment,t),_(Fo.$$.fragment,t),_(Bo.$$.fragment,t),_(No.$$.fragment,t),_(Ho.$$.fragment,t),_(Ro.$$.fragment,t),kd=!0)},o(t){v(no.$$.fragment,t),v(co.$$.fragment,t),v(ho.$$.fragment,t),v(fo.$$.fragment,t),v(mo.$$.fragment,t),v(uo.$$.fragment,t),v(_o.$$.fragment,t),v(vo.$$.fragment,t),v(Eo.$$.fragment,t),v(bo.$$.fragment,t),v(wo.$$.fragment,t),v(yo.$$.fragment,t),v(ko.$$.fragment,t),v(To.$$.fragment,t),v(go.$$.fragment,t),v($o.$$.fragment,t),v(Oo.$$.fragment,t),v(Do.$$.fragment,t),v(xo.$$.fragment,t),v(Ao.$$.fragment,t),v(zo.$$.fragment,t),v(Lo.$$.fragment,t),v(Io.$$.fragment,t),v(So.$$.fragment,t),v(Mo.$$.fragment,t),v(Fo.$$.fragment,t),v(Bo.$$.fragment,t),v(No.$$.fragment,t),v(Ho.$$.fragment,t),v(Ro.$$.fragment,t),kd=!1},d(t){o(Z),t&&o(Zo),t&&o(A),E(no),t&&o(Bi),t&&o(ve),E(co),t&&o(Ni),t&&o(er),t&&o(Hi),t&&o(Ee),E(ho),t&&o(qi),t&&o(tr),t&&o(Ri),t&&o(or),t&&o(Wi),t&&o(Ke),t&&o(Gi),t&&o(be),E(fo),t&&o(Ui),t&&o(Qe),t&&o(Xi),t&&o(Ye),t&&o(Ki),E(mo,t),t&&o(Ji),t&&o(Ze),t&&o(Qi),E(uo,t),t&&o(Vi),t&&o(ye),E(_o),t&&o(Yi),t&&o(z),t&&o(Zi),t&&o(tt),t&&o(en),t&&o(T),t&&o(tn),t&&o(ke),E(vo),t&&o(on),t&&o(ee),t&&o(rn),t&&o(rt),t&&o(an),E(Eo,t),t&&o(ln),t&&o(at),t&&o(sn),E(bo,t),t&&o(nn),t&&o(rr),t&&o(dn),E(wo,t),t&&o(cn),t&&o(Te),E(yo),t&&o(hn),t&&o(st),t&&o(fn),t&&o(ar),t&&o(pn),t&&o(ge),E(ko),t&&o(mn),t&&o(nt),t&&o(un),t&&o(dt),t&&o(_n),E(To,t),t&&o(vn),t&&o(ct),t&&o(En),E(go,t),t&&o(bn),t&&o($e),E($o),t&&o(wn),t&&o(ft),t&&o(yn),t&&o(pt),t&&o(kn),t&&o(Oe),E(Oo),t&&o(Tn),t&&o(P),t&&o(gn),t&&o(ut),t&&o($n),E(Do,t),t&&o(Cn),t&&o(_t),t&&o(On),E(xo,t),t&&o(Dn),t&&o(lr),t&&o(xn),E(Ao,t),t&&o(An),t&&o(De),E(zo),t&&o(zn),t&&o(Et),t&&o(Pn),t&&o(sr),t&&o(Ln),t&&o(ir),t&&o(In),t&&o(b),t&&o(Sn),t&&o(nr),t&&o(Mn),t&&o(S),t&&o(jn),t&&o(dr),t&&o(Fn),t&&o(ce),t&&o(Bn),t&&o(Tt),t&&o(Nn),t&&o(g),t&&o(Hn),t&&o(gt),t&&o(qn),t&&o(D),t&&o(Rn),t&&o($t),t&&o(Wn),t&&o(cr),t&&o(Gn),t&&o(hr),t&&o(Un),t&&o(Ct),t&&o(Xn),t&&o(fr),t&&o(Kn),t&&o(pr),t&&o(Jn),t&&o(Se),E(Lo),t&&o(Qn),t&&o(Dt),t&&o(Vn),t&&o(Me),E(Io),t&&o(Yn),t&&o(M),t&&o(Zn),t&&o(At),t&&o(ed),t&&o(zt),t&&o(td),t&&o(Fe),E(So),t&&o(od),t&&o(Lt),t&&o(rd),t&&o(Be),E(Mo),t&&o(ad),t&&o(he),t&&o(ld),t&&o(St),t&&o(sd),t&&o(Mt),t&&o(id),t&&o(fe),t&&o(nd),E(Fo,t),t&&o(dd),t&&o(Ne),E(Bo),t&&o(cd),t&&o(Ft),t&&o(hd),t&&o(Bt),t&&o(fd),t&&o(Nt),t&&o(pd),t&&o(ur),t&&o(md),E(No,t),t&&o(ud),t&&o(qe),E(Ho),t&&o(_d),t&&o(j),t&&o(vd),t&&o(pe),t&&o(Ed),t&&o(me),t&&o(bd),t&&o(qt),t&&o(wd),t&&o(ue),t&&o(yd),E(Ro,t)}}}const vw={local:"migrating-from-previous-packages",sections:[{local:"migrating-from-transformers-v3x-to-v4x",sections:[{local:"1-autotokenizers-and-pipelines-now-use-fast-rust-tokenizers-by-default",sections:[{local:"how-to-obtain-the-same-behavior-as-v3x-in-v4x",title:"How to obtain the same behavior as v3.x in v4.x"}],title:"1. AutoTokenizers and pipelines now use fast (rust) tokenizers by default."},{local:"2-sentencepiece-is-removed-from-the-required-dependencies",sections:[{local:"how-to-obtain-the-same-behavior-as-v3x-in-v4x",title:"How to obtain the same behavior as v3.x in v4.x"}],title:"2. SentencePiece is removed from the required dependencies"},{local:"3-the-architecture-of-the-repo-has-been-updated-so-that-each-model-resides-in-its-folder",sections:[{local:"how-to-obtain-the-same-behavior-as-v3x-in-v4x",title:"How to obtain the same behavior as v3.x in v4.x"}],title:"3. The architecture of the repo has been updated so that each model resides in its folder"},{local:"4-switching-the-returndict-argument-to-true-by-default",sections:[{local:"how-to-obtain-the-same-behavior-as-v3x-in-v4x",title:"How to obtain the same behavior as v3.x in v4.x"}],title:"4. Switching the `return_dict` argument to `True` by default"},{local:"5-removed-some-deprecated-attributes",title:"5. Removed some deprecated attributes"}],title:"Migrating from transformers `v3.x` to `v4.x`"},{local:"migrating-from-pytorchtransformers-to-transformers",sections:[{local:"positional-order-of-some-models-keywords-inputs-attentionmask-tokentypeids-changed",title:"Positional order of some models' keywords inputs (`attention_mask`, `token_type_ids`...) changed"}],title:"Migrating from pytorch-transformers to \u{1F917} Transformers"},{local:"migrating-from-pytorchpretrainedbert",sections:[{local:"models-always-output-tuples",title:"Models always output `tuples`"},{local:"serialization",title:"Serialization"},{local:"optimizers-bertadam-openaiadam-are-now-adamw-schedules-are-standard-pytorch-schedules",title:"Optimizers: BertAdam & OpenAIAdam are now AdamW, schedules are standard PyTorch schedules"}],title:"Migrating from pytorch-pretrained-bert"}],title:"Migrating from previous packages"};function Ew(Ec,Z,Zo){let{fw:A}=Z;return Ec.$$set=F=>{"fw"in F&&Zo(0,A=F.fw)},[A]}class Tw extends hw{constructor(Z){super();fw(this,Z,Ew,_w,pw,{fw:0})}}export{Tw as default,vw as metadata};
