import{S as f0,i as c0,s as d0,e as a,k as h,w as d,t as i,L as u0,c as l,d as t,m as f,a as r,x as u,h as o,b as c,M as m0,J as s,g as p,y as m,K as v0,q as v,o as w,B as _}from"../chunks/vendor-e859c359.js";import{I as b}from"../chunks/IconCopyLink-5fae3b20.js";import{C as B}from"../chunks/CodeBlock-ce4317c2.js";import"../chunks/CopyButton-77addb3d.js";function w0(Yc){let F,ua,j,L,Lr,qt,Qc,Sr,Zc,Ln,ma,Jc,Sn,J,Le,Cr,Rt,Kc,Ur,ed,Cn,va,td,Un,K,Se,Gr,Wt,sd,Vr,ad,Gn,wa,ld,Vn,_a,ba,rd,Xt,Or,id,od,Hr,nd,On,ya,pd,Hn,Ce,zr,hd,fd,Br,cd,zn,ee,Ue,Fr,Yt,dd,Mr,ud,Bn,ga,md,Fn,M,qr,vd,wd,Rr,_d,bd,Wr,yd,Mn,Ea,gd,qn,y,Xr,Ed,Pd,Yr,kd,$d,Qr,jd,Dd,Zr,Ad,xd,Jr,Id,Td,Kr,Nd,Ld,ei,Sd,Cd,ti,Ud,Gd,si,Vd,Rn,te,Ge,ai,Qt,Od,li,Hd,Wn,se,Ve,ri,Zt,zd,ii,Bd,Xn,Pa,Fd,Yn,ka,Md,Qn,Jt,Zn,$a,qd,Jn,ja,Rd,Kn,Kt,ep,Da,Wd,tp,es,sp,Aa,Xd,ap,ts,lp,q,Yd,oi,Qd,Zd,ni,Jd,Kd,rp,xa,eu,ip,Ia,tu,op,ae,Oe,pi,ss,su,hi,au,np,as,ls,lu,ru,pp,He,iu,rs,ou,nu,hp,Ta,fi,pu,fp,D,hu,ci,fu,cu,di,du,uu,ui,mu,vu,cp,Na,wu,dp,La,_u,up,ze,mi,is,vi,bu,yu,Sa,gu,Eu,os,ns,wi,Pu,ku,Ca,$u,ju,ps,_i,Du,Au,Ua,xu,mp,Ga,Iu,vp,Be,Tu,bi,Nu,Lu,wp,Va,Su,_p,hs,bp,P,Cu,yi,Uu,Gu,gi,Vu,Ou,Ei,Hu,zu,Pi,Bu,Fu,ki,Mu,yp,le,Fe,$i,fs,qu,ji,Ru,gp,re,Me,Di,cs,Wu,Ai,Xu,Ep,Oa,Yu,Pp,E,xi,Qu,Zu,Ii,Ju,Ku,Ti,em,tm,Ni,sm,am,Li,lm,rm,Si,im,kp,Ha,om,$p,za,nm,jp,Ba,pm,Dp,ie,qe,Ci,ds,hm,Ui,fm,Ap,Re,Gi,cm,dm,Vi,um,xp,oe,We,Oi,us,mm,Hi,vm,Ip,R,zi,wm,_m,Fa,bm,ms,ym,gm,Bi,Em,Tp,ne,Xe,Fi,vs,Pm,Mi,km,Np,Ma,qi,$m,Lp,pe,Ye,Ri,ws,jm,Wi,Dm,Sp,qa,Xi,Am,Cp,Ra,xm,Up,he,Qe,Yi,_s,Im,Qi,Tm,Gp,Wa,Nm,Vp,fe,Ze,Zi,bs,Lm,Ji,Sm,Op,Xa,Cm,Hp,ce,Je,Ki,ys,Um,Ke,eo,Gm,Vm,to,Om,Hm,zp,Ya,zm,Bp,de,et,so,gs,Bm,ao,Fm,Fp,Qa,Mm,Mp,A,Es,qm,lo,Rm,Wm,Xm,Ps,Ym,ro,Qm,Zm,Jm,ks,Km,io,ev,tv,sv,oo,av,qp,Za,lv,Rp,Ja,Ka,k2,Wp,tt,rv,$s,iv,ov,Xp,el,nv,Yp,ue,st,no,js,pv,po,hv,Qp,tl,fv,Zp,sl,cv,Jp,x,ho,dv,uv,fo,mv,vv,Ds,wv,co,_v,bv,yv,uo,gv,Kp,al,Ev,eh,at,Pv,mo,kv,$v,th,ll,jv,sh,As,ah,lt,Dv,vo,Av,xv,lh,rt,wo,S,rl,Iv,Tv,il,Nv,Lv,ol,Sv,Cv,nl,Uv,Gv,C,U,pl,Vv,Ov,hl,Hv,zv,fl,Bv,Fv,cl,Mv,qv,G,dl,Rv,Wv,ul,Xv,Yv,ml,Qv,Zv,vl,Jv,Kv,V,wl,e1,t1,_l,s1,a1,bl,l1,r1,yl,i1,o1,O,gl,n1,p1,El,h1,f1,Pl,c1,d1,kl,u1,rh,it,m1,_o,v1,w1,ih,$l,_1,oh,jl,b1,nh,ot,y1,xs,g1,E1,ph,Dl,P1,hh,nt,Al,k1,Is,$1,j1,xl,D1,Ts,A1,fh,me,pt,bo,Ns,x1,yo,I1,ch,W,T1,go,N1,L1,Ls,S1,C1,dh,Il,U1,uh,ve,ht,Eo,Ss,G1,Po,V1,mh,Tl,O1,vh,Nl,H1,wh,Ll,z1,_h,ft,B1,ko,F1,M1,bh,we,ct,$o,Cs,q1,jo,R1,yh,X,W1,Do,X1,Y1,Ao,Q1,Z1,gh,Sl,J1,Eh,Cl,K1,Ph,Ul,ew,kh,Gl,tw,$h,dt,sw,xo,aw,lw,jh,Vl,rw,Dh,Us,Ah,Gs,iw,Io,ow,xh,Ol,nw,Ih,Vs,Th,Hl,pw,Nh,_e,ut,To,Os,hw,No,fw,Lh,mt,cw,zl,dw,uw,Sh,vt,mw,Lo,vw,ww,Ch,be,wt,So,Hs,_w,Co,bw,Uh,Bl,yw,Gh,Fl,gw,Vh,zs,Oh,Ml,Ew,Hh,_t,Pw,Bs,kw,$w,zh,ql,jw,Bh,I,Dw,Uo,Aw,xw,Go,Iw,Tw,Vo,Nw,Lw,Fh,Y,Sw,Oo,Cw,Uw,Ho,Gw,Vw,Mh,bt,Ow,zo,Hw,zw,qh,ye,yt,Bo,Fs,Bw,Fo,Fw,Rh,Rl,Mw,Wh,T,qw,Ms,Rw,Ww,Mo,Xw,Yw,qo,Qw,Zw,Xh,Wl,Jw,Yh,qs,Qh,gt,Kw,Ro,e_,t_,Zh,ge,Et,Wo,Rs,s_,Xo,a_,Jh,Xl,l_,Kh,Q,r_,Ws,i_,o_,Xs,n_,p_,ef,Ys,Qs,h_,f_,tf,Pt,c_,Zs,d_,u_,sf,Ee,kt,Yo,Js,m_,Qo,v_,af,Pe,Zo,w_,__,Jo,b_,y_,lf,$t,Ko,g_,E_,en,P_,rf,Yl,k_,of,Ks,ea,$_,j_,nf,jt,tn,D_,A_,Ql,x_,ta,sn,I_,T_,sa,N_,an,L_,S_,pf,aa,la,C_,U_,hf,Zl,G_,ff,$,ln,V_,O_,rn,H_,z_,ra,B_,on,F_,M_,q_,Jl,R_,nn,W_,X_,pn,Y_,cf,Kl,Q_,df,Dt,Z_,ia,J_,K_,uf,er,eb,mf,tr,tb,vf,sr,sb,wf,At,ab,oa,lb,rb,_f,ar,ib,bf,xt,hn,ke,lr,ob,nb,fn,pb,hb,rr,fb,cb,$e,je,ir,db,ub,cn,mb,vb,or,wb,_b,De,nr,bb,yb,dn,gb,Eb,pr,Pb,kb,Ae,hr,$b,jb,un,Db,Ab,fr,xb,yf,cr,Ib,gf,dr,Tb,Ef,ur,Nb,Pf,mr,Lb,kf,na,mn,Sb,Cb,$f,pa,jf,k,Ub,vn,Gb,Vb,wn,Ob,Hb,_n,zb,Bb,bn,Fb,Mb,yn,qb,Df,xe,It,gn,ha,Rb,En,Wb,Af,vr,Xb,xf,Tt,wr,Pn,Yb,Qb,Zb,_r,kn,Jb,Kb,If,Ie,Nt,$n,fa,e2,jn,t2,Tf,Te,s2,Dn,a2,l2,ca,r2,Nf,Ne,Lt,An,da,i2,xn,o2,Lf,br,n2,Sf,yr,p2,Cf;return qt=new b({}),Rt=new b({}),Wt=new b({}),Yt=new b({}),Qt=new b({}),Zt=new b({}),Jt=new B({props:{code:"nvidia-smi topo -m,",highlighted:'<span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> topo -m'}}),Kt=new B({props:{code:`        GPU0    GPU1    CPU Affinity    NUMA Affinity
GPU0     X      NV2     0-23            N/A
GPU1    NV2      X      0-23            N/A,`,highlighted:`        <span class="hljs-attribute">GPU0</span>    GPU1    CPU Affinity    NUMA Affinity
<span class="hljs-attribute">GPU0</span>     X      NV2     <span class="hljs-number">0</span>-<span class="hljs-number">23</span>            N/A
<span class="hljs-attribute">GPU1</span>    NV2      X      <span class="hljs-number">0</span>-<span class="hljs-number">23</span>            N/A`}}),es=new B({props:{code:`        GPU0    GPU1    CPU Affinity    NUMA Affinity
GPU0     X      PHB     0-11            N/A
GPU1    PHB      X      0-11            N/A,`,highlighted:`        <span class="hljs-attribute">GPU0</span>    GPU1    CPU Affinity    NUMA Affinity
<span class="hljs-attribute">GPU0</span>     X      PHB     <span class="hljs-number">0</span>-<span class="hljs-number">11</span>            N/A
<span class="hljs-attribute">GPU1</span>    PHB      X      <span class="hljs-number">0</span>-<span class="hljs-number">11</span>            N/A`}}),ts=new B({props:{code:`  X    = Self
  SYS  = Connection traversing PCIe as well as the SMP interconnect between NUMA nodes (e.g., QPI/UPI)
  NODE = Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node
  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge (typically the CPU)
  PXB  = Connection traversing multiple PCIe bridges (without traversing the PCIe Host Bridge)
  PIX  = Connection traversing at most a single PCIe bridge
  NV#  = Connection traversing a bonded set of # NVLinks,`,highlighted:`  X    = Self
  SYS  = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> SMP interconnect between NUMA nodes (e.g., QPI/UPI)
  NODE = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> interconnect between PCIe Host Bridges <span class="hljs-keyword">within</span> <span class="hljs-keyword">a</span> NUMA node
  PHB  = Connection traversing PCIe <span class="hljs-keyword">as</span> well <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> PCIe Host Bridge (typically <span class="hljs-keyword">the</span> CPU)
  PXB  = Connection traversing multiple PCIe bridges (<span class="hljs-keyword">without</span> traversing <span class="hljs-keyword">the</span> PCIe Host Bridge)
  PIX  = Connection traversing <span class="hljs-keyword">at</span> most <span class="hljs-keyword">a</span> single PCIe bridge
  NV<span class="hljs-comment">#  = Connection traversing a bonded set of # NVLinks</span>`}}),ss=new b({}),hs=new B({props:{code:`# DDP w/ NVLink

rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 python -m torch.distributed.launch \\
--nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py --model_name_or_path gpt2 \\
--dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 --do_train \\
--output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 101.9003, 'train_samples_per_second': 1.963, 'epoch': 0.69}

# DDP w/o NVLink

rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 NCCL_P2P_DISABLE=1 python -m torch.distributed.launch \\
--nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py --model_name_or_path gpt2 \\
--dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 --do_train
--output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 131.4367, 'train_samples_per_second': 1.522, 'epoch': 0.69},`,highlighted:`<span class="hljs-comment"># DDP w/ NVLink</span>

<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> <span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> \\
<span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> <span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> \\
<span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> <span class="hljs-built_in">--do_train</span> \\
<span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVLink</span>

<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> \\
<span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> <span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> \\
<span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> <span class="hljs-built_in">--do_train</span>
<span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),fs=new b({}),cs=new b({}),ds=new b({}),us=new b({}),vs=new b({}),ws=new b({}),_s=new b({}),bs=new b({}),ys=new b({}),gs=new b({}),js=new b({}),As=new B({props:{code:`export BS=16
python -m torch.distributed.launch \\
    --nproc_per_node 2 examples/pytorch/text-classification/run_glue.py \\
    --model_name_or_path bert-base-cased \\
    --task_name mrpc \\
    --do_train \\
    --do_eval \\
    --max_seq_length 128 \\
    --per_device_train_batch_size $BS \\
    --learning_rate 2e-5 \\
    --num_train_epochs 3.0 \\
    --output_dir /tmp/mrpc \\
    --overwrite_output_dir \\
    --fp16,`,highlighted:`export BS=<span class="hljs-number">16</span>
python -m torch<span class="hljs-selector-class">.distributed</span><span class="hljs-selector-class">.launch</span> \\
    <span class="hljs-attr">--nproc_per_node</span> <span class="hljs-number">2</span> examples/pytorch/text-classification/run_glue<span class="hljs-selector-class">.py</span> \\
    <span class="hljs-attr">--model_name_or_path</span> bert-base-cased \\
    <span class="hljs-attr">--task_name</span> mrpc \\
    <span class="hljs-attr">--do_train</span> \\
    <span class="hljs-attr">--do_eval</span> \\
    <span class="hljs-attr">--max_seq_length</span> <span class="hljs-number">128</span> \\
    <span class="hljs-attr">--per_device_train_batch_size</span> <span class="hljs-variable">$BS</span> \\
    <span class="hljs-attr">--learning_rate</span> <span class="hljs-number">2</span>e-<span class="hljs-number">5</span> \\
    <span class="hljs-attr">--num_train_epochs</span> <span class="hljs-number">3.0</span> \\
    <span class="hljs-attr">--output_dir</span> /tmp/mrpc \\
    <span class="hljs-attr">--overwrite_output_dir</span> \\
    <span class="hljs-attr">--fp16</span>`}}),Ns=new b({}),Ss=new b({}),Cs=new b({}),Us=new B({props:{code:`from torch.cuda.amp import autocast
with autocast(dtype=torch.bfloat16):
    loss, outputs = ...,`,highlighted:`<span class="hljs-keyword">from</span> torch.cuda.amp <span class="hljs-keyword">import</span> <span class="hljs-built_in">auto</span><span class="hljs-keyword">cast</span>
with <span class="hljs-built_in">auto</span><span class="hljs-keyword">cast</span>(dtype=torch.bfloat16):
    loss, outputs = ...`}}),Vs=new B({props:{code:`python -c 'import transformers; print(f"BF16 support is {transformers.file_utils.is_torch_bf16_available()}")',`,highlighted:'python -c &#x27;<span class="hljs-keyword">import</span> transformers; <span class="hljs-keyword">print</span>(f<span class="hljs-string">&quot;BF16 support is {transformers.file_utils.is_torch_bf16_available()}&quot;</span>)&#x27;'}}),Os=new b({}),Hs=new b({}),zs=new B({props:{code:`import torch
torch.backends.cuda.matmul.allow_tf32 = True,`,highlighted:`import torch
torch<span class="hljs-selector-class">.backends</span><span class="hljs-selector-class">.cuda</span><span class="hljs-selector-class">.matmul</span><span class="hljs-selector-class">.allow_tf32</span> = True`}}),Fs=new b({}),qs=new B({props:{code:"model.gradient_checkpointing_enable(),",highlighted:"model.gradient_checkpointing_enable()"}}),Rs=new b({}),Js=new b({}),pa=new B({props:{code:`
# DP
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 110.5948, 'train_samples_per_second': 1.808, 'epoch': 0.69}

# DDP w/ NVlink
rm -r /tmp/test-clm; CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 101.9003, 'train_samples_per_second': 1.963, 'epoch': 0.69}

# DDP w/o NVlink
rm -r /tmp/test-clm; NCCL_P2P_DISABLE=1 CUDA_VISIBLE_DEVICES=0,1 \\
python -m torch.distributed.launch --nproc_per_node 2 examples/pytorch/language-modeling/run_clm.py \\
--model_name_or_path gpt2 --dataset_name wikitext --dataset_config_name wikitext-2-raw-v1 \\
--do_train --output_dir /tmp/test-clm --per_device_train_batch_size 4 --max_steps 200

{'train_runtime': 131.4367, 'train_samples_per_second': 1.522, 'epoch': 0.69},`,highlighted:`
<span class="hljs-comment"># DP</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">110</span>.<span class="hljs-string">5948</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">808</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/ NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),ha=new b({}),fa=new b({}),da=new b({}),{c(){F=a("meta"),ua=h(),j=a("h1"),L=a("a"),Lr=a("span"),d(qt.$$.fragment),Qc=h(),Sr=a("span"),Zc=i("Performance and Scalability: How To Fit a Bigger Model and Train It Faster"),Ln=h(),ma=a("p"),Jc=i("For now the software sections of this document are mainly Pytorch-specific, but the guide can be extended to other frameworks in the future."),Sn=h(),J=a("h2"),Le=a("a"),Cr=a("span"),d(Rt.$$.fragment),Kc=h(),Ur=a("span"),ed=i("Quick notes"),Cn=h(),va=a("p"),td=i("This section gives brief ideas on how to make training faster and support bigger models. Later sections will expand, demonstrate and elucidate each of these."),Un=h(),K=a("h3"),Se=a("a"),Gr=a("span"),d(Wt.$$.fragment),sd=h(),Vr=a("span"),ad=i("Faster Training"),Gn=h(),wa=a("p"),ld=i("Hardware:"),Vn=h(),_a=a("ul"),ba=a("li"),rd=i("fast connectivity between GPUs"),Xt=a("ul"),Or=a("li"),id=i("intra-node: NVLink"),od=h(),Hr=a("li"),nd=i("inter-node: Infiniband / Intel OPA"),On=h(),ya=a("p"),pd=i("Software:"),Hn=h(),Ce=a("ul"),zr=a("li"),hd=i("Data Parallel / Distributed Data Parallel"),fd=h(),Br=a("li"),cd=i("fp16 (autocast caching)"),zn=h(),ee=a("h3"),Ue=a("a"),Fr=a("span"),d(Yt.$$.fragment),dd=h(),Mr=a("span"),ud=i("Bigger Models"),Bn=h(),ga=a("p"),md=i("Hardware:"),Fn=h(),M=a("ul"),qr=a("li"),vd=i("bigger GPUs"),wd=h(),Rr=a("li"),_d=i("more GPUs"),bd=h(),Wr=a("li"),yd=i("more CPU and NVMe (offloaded to by DeepSpeed)"),Mn=h(),Ea=a("p"),gd=i("Software:"),qn=h(),y=a("ul"),Xr=a("li"),Ed=i("Deepspeed ZeRO"),Pd=h(),Yr=a("li"),kd=i("Deepspeed ZeRO-Offload"),$d=h(),Qr=a("li"),jd=i("Megatron-LM 3D Parallelism"),Dd=h(),Zr=a("li"),Ad=i("Pipeline Parallelism"),xd=h(),Jr=a("li"),Id=i("Tensor Parallelism"),Td=h(),Kr=a("li"),Nd=i("Low-memory Optimizers"),Ld=h(),ei=a("li"),Sd=i("fp16/bf16 (smaller data/faster throughput)"),Cd=h(),ti=a("li"),Ud=i("tf32 (faster throughput)"),Gd=h(),si=a("li"),Vd=i("Gradient checkpointing"),Rn=h(),te=a("h2"),Ge=a("a"),ai=a("span"),d(Qt.$$.fragment),Od=h(),li=a("span"),Hd=i("Hardware"),Wn=h(),se=a("h3"),Ve=a("a"),ri=a("span"),d(Zt.$$.fragment),zd=h(),ii=a("span"),Bd=i("Multi-GPU Connectivity"),Xn=h(),Pa=a("p"),Fd=i("If you use multiple GPUs the way cards are inter-connected can have a huge impact on the total training time."),Yn=h(),ka=a("p"),Md=i("If the GPUs are on the same physical node, you can run:"),Qn=h(),d(Jt.$$.fragment),Zn=h(),$a=a("p"),qd=i("and it will tell you how the GPUs are inter-connected."),Jn=h(),ja=a("p"),Rd=i("On a machine with dual-GPU and which are connected with NVLink, you will most likely see something like:"),Kn=h(),d(Kt.$$.fragment),ep=h(),Da=a("p"),Wd=i("on a different machine w/o NVLink we may see:"),tp=h(),d(es.$$.fragment),sp=h(),Aa=a("p"),Xd=i("The report includes this legend:"),ap=h(),d(ts.$$.fragment),lp=h(),q=a("p"),Yd=i("So the first report "),oi=a("code"),Qd=i("NV2"),Zd=i(" tells us the GPUs are interconnected with 2 NVLinks, and the second report "),ni=a("code"),Jd=i("PHB"),Kd=i(" we have a typical consumer-level PCIe+Bridge setup."),rp=h(),xa=a("p"),eu=i("Check what type of connectivity you have on your setup. Some of these will make the communication between cards faster (e.g. NVLink), others slower (e.g. PHB)."),ip=h(),Ia=a("p"),tu=i("Depending on the type of scalability solution used, the connectivity speed could have a major or a minor impact. If the GPUs need to sync rarely, as in DDP, the impact of a slower connection will be less significant. If the GPUs need to send messages to each other often, as in ZeRO-DP, then faster connectivity becomes super important to achieve faster training."),op=h(),ae=a("h3"),Oe=a("a"),pi=a("span"),d(ss.$$.fragment),su=h(),hi=a("span"),au=i("NVlink"),np=h(),as=a("p"),ls=a("a"),lu=i("NVLink"),ru=i(" is a wire-based serial multi-lane near-range communications link developed by Nvidia."),pp=h(),He=a("p"),iu=i("Each new generation provides a faster bandwidth, e.g. here is a quote from "),rs=a("a"),ou=i("Nvidia Ampere GA102 GPU Architecture"),nu=i(":"),hp=h(),Ta=a("blockquote"),fi=a("p"),pu=i(`Third-Generation NVLink\xAE
GA102 GPUs utilize NVIDIA\u2019s third-generation NVLink interface, which includes four x4 links,
with each link providing 14.0625 GB/sec bandwidth in each direction between two GPUs. Four
links provide 56.25 GB/sec bandwidth in each direction, and 112.5 GB/sec total bandwidth
between two GPUs. Two RTX 3090 GPUs can be connected together for SLI using NVLink.
(Note that 3-Way and 4-Way SLI configurations are not supported.)`),fp=h(),D=a("p"),hu=i("So the higher "),ci=a("code"),fu=i("X"),cu=i(" you get in the report of "),di=a("code"),du=i("NVX"),uu=i(" in the output of "),ui=a("code"),mu=i("nvidia-smi topo -m"),vu=i(" the better. The generation will depend on your GPU architecture."),cp=h(),Na=a("p"),wu=i("Let\u2019s compare the execution of a gpt2 language model training over a small sample of wikitext."),dp=h(),La=a("p"),_u=i("The results are:"),up=h(),ze=a("table"),mi=a("thead"),is=a("tr"),vi=a("th"),bu=i("NVlink"),yu=h(),Sa=a("th"),gu=i("Time"),Eu=h(),os=a("tbody"),ns=a("tr"),wi=a("td"),Pu=i("Y"),ku=h(),Ca=a("td"),$u=i("101s"),ju=h(),ps=a("tr"),_i=a("td"),Du=i("N"),Au=h(),Ua=a("td"),xu=i("131s"),mp=h(),Ga=a("p"),Iu=i("You can see that NVLink completes the training ~23% faster."),vp=h(),Be=a("p"),Tu=i("In the second benchmark we use "),bi=a("code"),Nu=i("NCCL_P2P_DISABLE=1"),Lu=i(" to tell the GPUs not to use NVLink."),wp=h(),Va=a("p"),Su=i("Here is the full benchmark code and outputs:"),_p=h(),d(hs.$$.fragment),bp=h(),P=a("p"),Cu=i("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),yi=a("code"),Uu=i("NV2"),Gu=i(" in "),gi=a("code"),Vu=i("nvidia-smi topo -m"),Ou=i(`)
Software: `),Ei=a("code"),Hu=i("pytorch-1.8-to-be"),zu=i(" + "),Pi=a("code"),Bu=i("cuda-11.0"),Fu=i(" / "),ki=a("code"),Mu=i("transformers==4.3.0.dev0"),yp=h(),le=a("h2"),Fe=a("a"),$i=a("span"),d(fs.$$.fragment),qu=h(),ji=a("span"),Ru=i("Software"),gp=h(),re=a("h3"),Me=a("a"),Di=a("span"),d(cs.$$.fragment),Wu=h(),Ai=a("span"),Xu=i("Anatomy of Model's Memory"),Ep=h(),Oa=a("p"),Yu=i("The components on GPU memory are the following:"),Pp=h(),E=a("ol"),xi=a("li"),Qu=i("model weights"),Zu=h(),Ii=a("li"),Ju=i("optimizer states"),Ku=h(),Ti=a("li"),em=i("gradients"),tm=h(),Ni=a("li"),sm=i("forward activations saved for gradient computation"),am=h(),Li=a("li"),lm=i("temporary buffers"),rm=h(),Si=a("li"),im=i("functionality-specific memory"),kp=h(),Ha=a("p"),om=i("A typical model trained in mixed precision with AdamW requires 18 bytes per model parameter plus activation memory."),$p=h(),za=a("p"),nm=i("For inference there are no optimizer states and gradients, so we can subtract those. And thus we end up with 6 bytes per model parameter for mixed precision inference, plus activation memory."),jp=h(),Ba=a("p"),pm=i("Let\u2019s look at the details."),Dp=h(),ie=a("h4"),qe=a("a"),Ci=a("span"),d(ds.$$.fragment),hm=h(),Ui=a("span"),fm=i("Model Weights"),Ap=h(),Re=a("ul"),Gi=a("li"),cm=i("4 bytes * number of parameters for fp32 training"),dm=h(),Vi=a("li"),um=i("6 bytes * number of parameters for mixed precision training"),xp=h(),oe=a("h4"),We=a("a"),Oi=a("span"),d(us.$$.fragment),mm=h(),Hi=a("span"),vm=i("Optimizer States"),Ip=h(),R=a("ul"),zi=a("li"),wm=i("8 bytes * number of parameters for normal AdamW (maintains 2 states)"),_m=h(),Fa=a("li"),bm=i("2 bytes * number of parameters for 8-bit AdamW optimizers like "),ms=a("a"),ym=i("bitsandbytes"),gm=h(),Bi=a("li"),Em=i("4 bytes * number of parameters for optimizers like SGD (maintains only 1 state)"),Tp=h(),ne=a("h4"),Xe=a("a"),Fi=a("span"),d(vs.$$.fragment),Pm=h(),Mi=a("span"),km=i("Gradients"),Np=h(),Ma=a("ul"),qi=a("li"),$m=i("4 bytes * number of parameters for either fp32 or mixed precision training"),Lp=h(),pe=a("h4"),Ye=a("a"),Ri=a("span"),d(ws.$$.fragment),jm=h(),Wi=a("span"),Dm=i("Forward Activations"),Sp=h(),qa=a("ul"),Xi=a("li"),Am=i("size depends on many factors, the key ones being sequence length, hidden size and batch size."),Cp=h(),Ra=a("p"),xm=i("There are the input and output that are being passed and returned by the forward and the backward functions and the forward activations saved for gradient computation."),Up=h(),he=a("h4"),Qe=a("a"),Yi=a("span"),d(_s.$$.fragment),Im=h(),Qi=a("span"),Tm=i("Temporary Memory"),Gp=h(),Wa=a("p"),Nm=i("Additionally there are all kinds of temporary variables which get released once the calculation is done, but in the moment these could require additional memory and could push to OOM. Therefore when coding it\u2019s crucial to think strategically about such temporary variables and sometimes to explicitly free those as soon as they are no longer needed."),Vp=h(),fe=a("h4"),Ze=a("a"),Zi=a("span"),d(bs.$$.fragment),Lm=h(),Ji=a("span"),Sm=i("Functionality-specific memory"),Op=h(),Xa=a("p"),Cm=i("Then your software could have special memory needs. For example, when generating text using beam search, the software needs to maintain multiple copies of inputs and outputs."),Hp=h(),ce=a("h3"),Je=a("a"),Ki=a("span"),d(ys.$$.fragment),Um=h(),Ke=a("span"),eo=a("code"),Gm=i("forward"),Vm=i(" vs "),to=a("code"),Om=i("backward"),Hm=i(" Execution Speed"),zp=h(),Ya=a("p"),zm=i("For convolutions and linear layers there are 2x flops in the backward compared to the forward, which generally translates into ~2x slower (sometimes more, because sizes in the backward tend to be more awkward). Activations are usually bandwidth-limited, and it\u2019s typical for an activation to have to read more data in the backward than in the forward (e.g. activation forward reads once, writes once, activation backward reads twice, gradOutput and output of the forward, and writes once, gradInput)."),Bp=h(),de=a("h3"),et=a("a"),so=a("span"),d(gs.$$.fragment),Bm=h(),ao=a("span"),Fm=i("Floating Data Types"),Fp=h(),Qa=a("p"),Mm=i("Here are the commonly used floating point data types choice of which impacts both memory usage and throughput:"),Mp=h(),A=a("ul"),Es=a("li"),qm=i("fp32 ("),lo=a("code"),Rm=i("float32"),Wm=i(")"),Xm=h(),Ps=a("li"),Ym=i("fp16 ("),ro=a("code"),Qm=i("float16"),Zm=i(")"),Jm=h(),ks=a("li"),Km=i("bf16 ("),io=a("code"),ev=i("bfloat16"),tv=i(")"),sv=h(),oo=a("li"),av=i("tf32 (CUDA internal data type)"),qp=h(),Za=a("p"),lv=i("Here is a diagram that shows how these data types correlate to each other."),Rp=h(),Ja=a("p"),Ka=a("img"),Wp=h(),tt=a("p"),rv=i("(source: "),$s=a("a"),iv=i("NVIDIA Blog"),ov=i(")"),Xp=h(),el=a("p"),nv=i("While fp16 and fp32 have been around for quite some time, bf16 and tf32 are only available on the Ampere architecture GPUS. TPUs support bf16 as well."),Yp=h(),ue=a("h4"),st=a("a"),no=a("span"),d(js.$$.fragment),pv=h(),po=a("span"),hv=i("fp16"),Qp=h(),tl=a("p"),fv=i("AMP = Automatic Mixed Precision"),Zp=h(),sl=a("p"),cv=i("If we look at what\u2019s happening with FP16 training (mixed precision) we have:"),Jp=h(),x=a("ul"),ho=a("li"),dv=i("the model has two copies in memory: one in half-precision for the forward/backward computations and one in full precision - no memory saved here"),uv=h(),fo=a("li"),mv=i("the forward activations saved for gradient computation are in half-precision - memory is saved here"),vv=h(),Ds=a("li"),wv=i("the gradients are computed in half-precision "),co=a("em"),_v=i("but"),bv=i(" converted to full-precision for the update, no saving there"),yv=h(),uo=a("li"),gv=i("the optimizer states are in full precision as all the updates are done in full-precision"),Kp=h(),al=a("p"),Ev=i("So the savings only happen for the forward activations saved for the backward computation, and there is a slight overhead because the model weights are stored both in half- and full-precision."),eh=h(),at=a("p"),Pv=i("In \u{1F917} Transformers fp16 mixed precision is enabled by passing "),mo=a("code"),kv=i("--fp16"),$v=i(" to the \u{1F917} Trainer."),th=h(),ll=a("p"),jv=i("Now let\u2019s look at a simple text-classification fine-tuning on 2 GPUs (I\u2019m giving the command for reference):"),sh=h(),d(As.$$.fragment),ah=h(),lt=a("p"),Dv=i("Since the only savings we get are in the model activations saved for the backward passed, it\u2019s logical that the bigger those activations are, the bigger the saving will be. If we try different batch sizes, I indeed get (this is with "),vo=a("code"),Av=i("nvidia-smi"),xv=i(" so not completely reliable as said above but it will be a fair comparison):"),lh=h(),rt=a("table"),wo=a("thead"),S=a("tr"),rl=a("th"),Iv=i("batch size"),Tv=h(),il=a("th"),Nv=i("w/o \u2014fp16"),Lv=h(),ol=a("th"),Sv=i("w/ \u2014fp16"),Cv=h(),nl=a("th"),Uv=i("savings"),Gv=h(),C=a("tbody"),U=a("tr"),pl=a("td"),Vv=i("8"),Ov=h(),hl=a("td"),Hv=i("4247"),zv=h(),fl=a("td"),Bv=i("4163"),Fv=h(),cl=a("td"),Mv=i("84"),qv=h(),G=a("tr"),dl=a("td"),Rv=i("16"),Wv=h(),ul=a("td"),Xv=i("4971"),Yv=h(),ml=a("td"),Qv=i("4793"),Zv=h(),vl=a("td"),Jv=i("178"),Kv=h(),V=a("tr"),wl=a("td"),e1=i("32"),t1=h(),_l=a("td"),s1=i("6827"),a1=h(),bl=a("td"),l1=i("6207"),r1=h(),yl=a("td"),i1=i("620"),o1=h(),O=a("tr"),gl=a("td"),n1=i("64"),p1=h(),El=a("td"),h1=i("10037"),f1=h(),Pl=a("td"),c1=i("8061"),d1=h(),kl=a("td"),u1=i("1976"),rh=h(),it=a("p"),m1=i("So there is only a real memory saving if we train at a high batch size (and it\u2019s not half) and at batch sizes lower than 8, you actually get a bigger memory footprint (because of the overhead mentioned above). The gain for FP16 training is that in each of those cases, the training with the flag "),_o=a("code"),v1=i("--fp16"),w1=i(" is twice as fast, which does require every tensor to have every dimension be a multiple of 8 (examples pad the tensors to a sequence length that is a multiple of 8)."),ih=h(),$l=a("p"),_1=i("Summary: FP16 with apex or AMP will only give you some memory savings with a reasonably high batch size."),oh=h(),jl=a("p"),b1=i("Additionally, under mixed precision when possible, it\u2019s important that the batch size is a multiple of 8 to efficiently use tensor cores."),nh=h(),ot=a("p"),y1=i("Note that in some situations the speed up can be as big as 5x when using mixed precision. e.g. we have observed that while using "),xs=a("a"),g1=i("Megatron-Deepspeed"),E1=i("."),ph=h(),Dl=a("p"),P1=i("Some amazing tutorials to read on mixed precision:"),hh=h(),nt=a("ul"),Al=a("li"),k1=i("@sgugger wrote a great explanation of mixed precision "),Is=a("a"),$1=i("here"),j1=h(),xl=a("li"),D1=i("Aleksey Bilogur\u2019s "),Ts=a("a"),A1=i("A developer-friendly guide to mixed precision training with PyTorch"),fh=h(),me=a("h5"),pt=a("a"),bo=a("span"),d(Ns.$$.fragment),x1=h(),yo=a("span"),I1=i("fp16 caching"),ch=h(),W=a("p"),T1=i("pytorch "),go=a("code"),N1=i("autocast"),L1=i(" which performs AMP include a caching feature, which speed things up by caching fp16-converted values. Here is the full description from this "),Ls=a("a"),S1=i("comment"),C1=i(":"),dh=h(),Il=a("p"),U1=i("Autocast maintains a cache of the FP16 casts of model parameters (leaves). This helps streamline parameter reuse: if the same FP32 param is used in several different FP16list ops, like several matmuls, instead of re-casting the param to FP16 on entering each matmul, the cast will occur on the first matmul, the casted FP16 copy will be cached, and for all later matmuls the FP16 copy will be reused. The cache is maintained only within a particular outermost autocast context. When you exit the autocast context the cache is dropped. For recommended usage, in which autocast wraps the forward pass, and then you exit the context before calling backward(), this means the cache only lasts the duration of the forward pass each iteration, and will be rebuilt next iteration. (The cache of FP16-casted copies MUST be rebuilt each iteration. The FP32 parameters get updated by the optimizer, so the FP16 copies must be recreated, otherwise the FP16 values will be stale.)"),uh=h(),ve=a("h5"),ht=a("a"),Eo=a("span"),d(Ss.$$.fragment),G1=h(),Po=a("span"),V1=i("fp16 Inference"),mh=h(),Tl=a("p"),O1=i("While normally inference is done with fp16/amp as with training, it\u2019s also possible to use the full fp16 mode without using mixed precision. This is especially a good fit if the pretrained model weights are already in fp16. So a lot less memory is used: 2 bytes per parameter vs 6 bytes with mixed precision!"),vh=h(),Nl=a("p"),H1=i("How good the results this will deliver will depend on the model. If it can handle fp16 without overflows and accuracy issues, then it\u2019ll definitely better to use the full fp16 mode."),wh=h(),Ll=a("p"),z1=i("For example, LayerNorm has to be done in fp32 and recent pytorch (1.10+) has been fixed to do that regardless of the input types, but earlier pytorch versions accumulate in the input type which can be an issue."),_h=h(),ft=a("p"),B1=i("In \u{1F917} Transformers the full fp16 inference is enabled by passing "),ko=a("code"),F1=i("--fp16_full_eval"),M1=i(" to the \u{1F917} Trainer."),bh=h(),we=a("h4"),ct=a("a"),$o=a("span"),d(Cs.$$.fragment),q1=h(),jo=a("span"),R1=i("bf16"),yh=h(),X=a("p"),W1=i("If you own Ampere or newer hardware you can start using bf16 for your training and evaluation. While bf16 has a worse precision than fp16, it has a much much bigger dynamic range. Therefore, if in the past you were experiencing overflow issues while training the model, bf16 will prevent this from happening most of the time. Remember that in fp16 the biggest number you can have is "),Do=a("code"),X1=i("65535"),Y1=i(" and any number above that will overflow. A bf16 number can be as large as "),Ao=a("code"),Q1=i("3.39e+38"),Z1=i(" (!) which is about the same as fp32 - because both have 8-bits used for the numerical range."),gh=h(),Sl=a("p"),J1=i("Automatic Mixed Precision (AMP) is the same as with fp16, except it\u2019ll use bf16."),Eh=h(),Cl=a("p"),K1=i("Thanks to the fp32-like dynamic range with bf16 mixed precision loss scaling is no longer needed."),Ph=h(),Ul=a("p"),ew=i("If you have tried to finetune models pre-trained under bf16 mixed precision (e.g. T5) it\u2019s very likely that you have encountered overflow issues. Now you should be able to finetune those models without any issues."),kh=h(),Gl=a("p"),tw=i("That said, also be aware that if you pre-trained a model in bf16, it\u2019s likely to have overflow issues if someone tries to finetune it in fp16 down the road. So once started on the bf16-mode path it\u2019s best to remain on it and not switch to fp16."),$h=h(),dt=a("p"),sw=i("In \u{1F917} Transformers bf16 mixed precision is enabled by passing "),xo=a("code"),aw=i("--bf16"),lw=i(" to the \u{1F917} Trainer."),jh=h(),Vl=a("p"),rw=i("If you use your own trainer, this is just:"),Dh=h(),d(Us.$$.fragment),Ah=h(),Gs=a("p"),iw=i("If you need to switch a tensor to bf16, it\u2019s just: "),Io=a("code"),ow=i("t.to(dtype=torch.bfloat16)"),xh=h(),Ol=a("p"),nw=i("Here is how you can check if your setup supports bf16:"),Ih=h(),d(Vs.$$.fragment),Th=h(),Hl=a("p"),pw=i("On the other hand bf16 has a much worse precision than fp16, so there are certain situations where you\u2019d still want to use fp16 and not bf16."),Nh=h(),_e=a("h5"),ut=a("a"),To=a("span"),d(Os.$$.fragment),hw=h(),No=a("span"),fw=i("bf16 Inference"),Lh=h(),mt=a("p"),cw=i("Same as with fp16, you can do inference in either the mixed precision bf16 or using the full bf16 mode. The same caveats apply. For details see "),zl=a("a"),dw=i("fp16 Inference"),uw=i("."),Sh=h(),vt=a("p"),mw=i("In \u{1F917} Transformers the full bf16 inference is enabled by passing "),Lo=a("code"),vw=i("--bf16_full_eval"),ww=i(" to the \u{1F917} Trainer."),Ch=h(),be=a("h4"),wt=a("a"),So=a("span"),d(Hs.$$.fragment),_w=h(),Co=a("span"),bw=i("tf32"),Uh=h(),Bl=a("p"),yw=i("The Ampere hardware uses a magical data type called tf32. It has the same numerical range as fp32 (8-bits), but instead of 23 bits precision it has only 10 bits (same as fp16). In total it uses only 19 bits."),Gh=h(),Fl=a("p"),gw=i("It\u2019s magical in the sense that you can use the normal fp32 training and/or inference code and by enabling tf32 support you can get up to 3x throughput improvement. All you need to do is to add this to your code:"),Vh=h(),d(zs.$$.fragment),Oh=h(),Ml=a("p"),Ew=i("When this is done CUDA will automatically switch to using tf32 instead of fp32 where it\u2019s possible. This, of course, assumes that the used GPU is from the Ampere series."),Hh=h(),_t=a("p"),Pw=i("Like all cases with reduced precision this may or may not be satisfactory for your needs, so you have to experiment and see. According to "),Bs=a("a"),kw=i("NVIDIA research"),$w=i(" the majority of machine learning training shouldn\u2019t be impacted and showed the same perplexity and convergence as the fp32 training."),zh=h(),ql=a("p"),jw=i("If you\u2019re already using fp16 or bf16 mixed precision it may help with the throughput as well."),Bh=h(),I=a("p"),Dw=i("You can enable this mode in the \u{1F917} Trainer with "),Uo=a("code"),Aw=i("--tf32"),xw=i(", or disable it with "),Go=a("code"),Iw=i("--tf32 0"),Tw=i(" or "),Vo=a("code"),Nw=i("--no_tf32"),Lw=i(`.
By default the PyTorch default is used.`),Fh=h(),Y=a("p"),Sw=i("Note: tf32 mode is internal to CUDA and can\u2019t be accessed directly via "),Oo=a("code"),Cw=i("tensor.to(dtype=torch.tf32)"),Uw=i(" as "),Ho=a("code"),Gw=i("torch.tf32"),Vw=i(" doesn\u2019t exit."),Mh=h(),bt=a("p"),Ow=i("Note: you need "),zo=a("code"),Hw=i("torch>=1.7"),zw=i(" to enjoy this feature."),qh=h(),ye=a("h3"),yt=a("a"),Bo=a("span"),d(Fs.$$.fragment),Bw=h(),Fo=a("span"),Fw=i("Gradient Checkpointing"),Rh=h(),Rl=a("p"),Mw=i("One way to use significantly less GPU memory is to enabled \u201CGradient Checkpointing\u201D (also known as \u201Cactivation checkpointing\u201D). When enabled, a lot of memory can be freed at the cost of small decrease in the training speed due to recomputing parts of the graph during back-propagation."),Wh=h(),T=a("p"),qw=i("This technique was first shared in the paper: "),Ms=a("a"),Rw=i("Training Deep Nets with Sublinear Memory Cost"),Ww=i(". The paper will also give you the exact details on the savings, but it\u2019s in the ballpark of "),Mo=a("code"),Xw=i("O(sqrt(n))"),Yw=i(", where "),qo=a("code"),Qw=i("n"),Zw=i(" is the number of feed-forward layers."),Xh=h(),Wl=a("p"),Jw=i("To activate this feature in \u{1F917} Transformers for models that support it, use:"),Yh=h(),d(qs.$$.fragment),Qh=h(),gt=a("p"),Kw=i("or add "),Ro=a("code"),e_=i("--gradient_checkpointing"),t_=i(" to the Trainer arguments."),Zh=h(),ge=a("h3"),Et=a("a"),Wo=a("span"),d(Rs.$$.fragment),s_=h(),Xo=a("span"),a_=i("Batch sizes"),Jh=h(),Xl=a("p"),l_=i("One gets the most efficient performance when batch sizes and input/output neuron counts are divisible by a certain number, which typically starts at 8, but can be much higher as well. That number varies a lot depending on the specific hardware being used and the dtype of the model."),Kh=h(),Q=a("p"),r_=i("For example for fully connected layers (which correspond to GEMMs), NVIDIA provides recommendations for "),Ws=a("a"),i_=i("input/output neuron counts"),o_=i(" and "),Xs=a("a"),n_=i("batch size"),p_=i("."),ef=h(),Ys=a("p"),Qs=a("a"),h_=i("Tensor Core Requirements"),f_=i(" define the multiplier based on the dtype and the hardware. For example, for fp16 a multiple of 8 is recommended, but on A100 it\u2019s 64!"),tf=h(),Pt=a("p"),c_=i("For parameters that are small, there is also "),Zs=a("a"),d_=i("Dimension Quantization Effects"),u_=i(" to consider, this is where tiling happens and the right multiplier can have a significant speedup."),sf=h(),Ee=a("h3"),kt=a("a"),Yo=a("span"),d(Js.$$.fragment),m_=h(),Qo=a("span"),v_=i("DP vs DDP"),af=h(),Pe=a("p"),Zo=a("code"),w_=i("DistributedDataParallel"),__=i(" (DDP) is typically faster than "),Jo=a("code"),b_=i("DataParallel"),y_=i(" (DP), but it is not always the case:"),lf=h(),$t=a("ul"),Ko=a("li"),g_=i("while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),E_=h(),en=a("li"),P_=i("on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),rf=h(),Yl=a("p"),k_=i("Here are the main differences in the inter-GPU communication overhead between the two modes:"),of=h(),Ks=a("p"),ea=a("a"),$_=i("DDP"),j_=i(":"),nf=h(),jt=a("ul"),tn=a("li"),D_=i("At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),A_=h(),Ql=a("li"),x_=i("Then for each batch:"),ta=a("ol"),sn=a("li"),I_=i("each gpu consumes each own mini-batch of data directly"),T_=h(),sa=a("li"),N_=i("during "),an=a("code"),L_=i("backward"),S_=i(", once the local gradients are ready, they are then averaged across all processes"),pf=h(),aa=a("p"),la=a("a"),C_=i("DP"),U_=i(":"),hf=h(),Zl=a("p"),G_=i("For each batch:"),ff=h(),$=a("ol"),ln=a("li"),V_=i("gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),O_=h(),rn=a("li"),H_=i("replicates the up-to-date model from gpu 0 to each gpu"),z_=h(),ra=a("li"),B_=i("runs "),on=a("code"),F_=i("forward"),M_=i(" and sends output from each gpu to gpu 0, computes loss"),q_=h(),Jl=a("li"),R_=i("scatters loss from gpu 0 to all gpus, runs "),nn=a("code"),W_=i("backward"),X_=h(),pn=a("li"),Y_=i("sends gradients from each gpu to gpu 0 and averages those"),cf=h(),Kl=a("p"),Q_=i("The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),df=h(),Dt=a("p"),Z_=i("DP copies data within the process via python threads, whereas DDP copies data via "),ia=a("a"),J_=i("torch.distributed"),K_=i("."),uf=h(),er=a("p"),eb=i("Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),mf=h(),tr=a("p"),tb=i("You can use DDP across multiple machines, but this is not the case with DP."),vf=h(),sr=a("p"),sb=i("There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),wf=h(),At=a("p"),ab=i("If you want to go really deep into understanding these 2 modes, this "),oa=a("a"),lb=i("article"),rb=i(" is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),_f=h(),ar=a("p"),ib=i("Let\u2019s look at an actual benchmark:"),bf=h(),xt=a("table"),hn=a("thead"),ke=a("tr"),lr=a("th"),ob=i("Type"),nb=h(),fn=a("th"),pb=i("NVlink"),hb=h(),rr=a("th"),fb=i("Time"),cb=h(),$e=a("tbody"),je=a("tr"),ir=a("td"),db=i("2:DP"),ub=h(),cn=a("td"),mb=i("Y"),vb=h(),or=a("td"),wb=i("110s"),_b=h(),De=a("tr"),nr=a("td"),bb=i("2:DDP"),yb=h(),dn=a("td"),gb=i("Y"),Eb=h(),pr=a("td"),Pb=i("101s"),kb=h(),Ae=a("tr"),hr=a("td"),$b=i("2:DDP"),jb=h(),un=a("td"),Db=i("N"),Ab=h(),fr=a("td"),xb=i("131s"),yf=h(),cr=a("p"),Ib=i("Analysis:"),gf=h(),dr=a("p"),Tb=i("Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),Ef=h(),ur=a("p"),Nb=i("The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),Pf=h(),mr=a("p"),Lb=i("Here is the full benchmark code and outputs:"),kf=h(),na=a("p"),mn=a("code"),Sb=i("NCCL_P2P_DISABLE=1"),Cb=i(" was used to disable the NVLink feature on the corresponding benchmark."),$f=h(),d(pa.$$.fragment),jf=h(),k=a("p"),Ub=i("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),vn=a("code"),Gb=i("NV2"),Vb=i(" in "),wn=a("code"),Ob=i("nvidia-smi topo -m"),Hb=i(`)
Software: `),_n=a("code"),zb=i("pytorch-1.8-to-be"),Bb=i(" + "),bn=a("code"),Fb=i("cuda-11.0"),Mb=i(" / "),yn=a("code"),qb=i("transformers==4.3.0.dev0"),Df=h(),xe=a("h3"),It=a("a"),gn=a("span"),d(ha.$$.fragment),Rb=h(),En=a("span"),Wb=i("DataLoader"),Af=h(),vr=a("p"),Xb=i("One of the important requirements to reach great training speed is the ability to feed the GPU at the maximum speed it can handle. By default everything happens in the main process and it might not be able to read the data from disk fast enough, and thus create a bottleneck, leading to GPU under-utilization."),xf=h(),Tt=a("ul"),wr=a("li"),Pn=a("code"),Yb=i("DataLoader(pin_memory=True, ...)"),Qb=i(" which ensures that the data gets preloaded into the pinned memory on CPU and typically leads to much faster transfers from CPU to GPU memory."),Zb=h(),_r=a("li"),kn=a("code"),Jb=i("DataLoader(num_workers=4, ...)"),Kb=i(" - spawn several workers to pre-load data faster - during training watch the GPU utilization stats and if it\u2019s far from 100% experiment with raising the number of workers. Of course, the problem could be elsewhere so a very big number of workers won\u2019t necessarily lead to a better performance."),If=h(),Ie=a("h3"),Nt=a("a"),$n=a("span"),d(fa.$$.fragment),e2=h(),jn=a("span"),t2=i("Faster optimizer"),Tf=h(),Te=a("p"),s2=i("pytorch-nightly introduced "),Dn=a("code"),a2=i("torch.optim._multi_tensor"),l2=i(" which should significantly speed up the optimizers for situations with lots of small feature tensors. It should eventually become the default, but if you want to experiment with it sooner and don\u2019t mind using the bleed-edge, see: "),ca=a("a"),r2=i("https://github.com/huggingface/transformers/issues/9965"),Nf=h(),Ne=a("h2"),Lt=a("a"),An=a("span"),d(da.$$.fragment),i2=h(),xn=a("span"),o2=i("Contribute"),Lf=h(),br=a("p"),n2=i("This document is far from being complete and a lot more needs to be added, so if you have additions or corrections to make please don\u2019t hesitate to open a PR or if you aren\u2019t sure start an Issue and we can discuss the details there."),Sf=h(),yr=a("p"),p2=i("When making contributions that A is better than B, please try to include a reproducible benchmark and/or a link to the source of that information (unless it comes directly from you)."),this.h()},l(e){const n=u0('[data-svelte="svelte-1phssyn"]',document.head);F=l(n,"META",{name:!0,content:!0}),n.forEach(t),ua=f(e),j=l(e,"H1",{class:!0});var Uf=r(j);L=l(Uf,"A",{id:!0,class:!0,href:!0});var $2=r(L);Lr=l($2,"SPAN",{});var j2=r(Lr);u(qt.$$.fragment,j2),j2.forEach(t),$2.forEach(t),Qc=f(Uf),Sr=l(Uf,"SPAN",{});var D2=r(Sr);Zc=o(D2,"Performance and Scalability: How To Fit a Bigger Model and Train It Faster"),D2.forEach(t),Uf.forEach(t),Ln=f(e),ma=l(e,"P",{});var A2=r(ma);Jc=o(A2,"For now the software sections of this document are mainly Pytorch-specific, but the guide can be extended to other frameworks in the future."),A2.forEach(t),Sn=f(e),J=l(e,"H2",{class:!0});var Gf=r(J);Le=l(Gf,"A",{id:!0,class:!0,href:!0});var x2=r(Le);Cr=l(x2,"SPAN",{});var I2=r(Cr);u(Rt.$$.fragment,I2),I2.forEach(t),x2.forEach(t),Kc=f(Gf),Ur=l(Gf,"SPAN",{});var T2=r(Ur);ed=o(T2,"Quick notes"),T2.forEach(t),Gf.forEach(t),Cn=f(e),va=l(e,"P",{});var N2=r(va);td=o(N2,"This section gives brief ideas on how to make training faster and support bigger models. Later sections will expand, demonstrate and elucidate each of these."),N2.forEach(t),Un=f(e),K=l(e,"H3",{class:!0});var Vf=r(K);Se=l(Vf,"A",{id:!0,class:!0,href:!0});var L2=r(Se);Gr=l(L2,"SPAN",{});var S2=r(Gr);u(Wt.$$.fragment,S2),S2.forEach(t),L2.forEach(t),sd=f(Vf),Vr=l(Vf,"SPAN",{});var C2=r(Vr);ad=o(C2,"Faster Training"),C2.forEach(t),Vf.forEach(t),Gn=f(e),wa=l(e,"P",{});var U2=r(wa);ld=o(U2,"Hardware:"),U2.forEach(t),Vn=f(e),_a=l(e,"UL",{});var G2=r(_a);ba=l(G2,"LI",{});var h2=r(ba);rd=o(h2,"fast connectivity between GPUs"),Xt=l(h2,"UL",{});var Of=r(Xt);Or=l(Of,"LI",{});var V2=r(Or);id=o(V2,"intra-node: NVLink"),V2.forEach(t),od=f(Of),Hr=l(Of,"LI",{});var O2=r(Hr);nd=o(O2,"inter-node: Infiniband / Intel OPA"),O2.forEach(t),Of.forEach(t),h2.forEach(t),G2.forEach(t),On=f(e),ya=l(e,"P",{});var H2=r(ya);pd=o(H2,"Software:"),H2.forEach(t),Hn=f(e),Ce=l(e,"UL",{});var Hf=r(Ce);zr=l(Hf,"LI",{});var z2=r(zr);hd=o(z2,"Data Parallel / Distributed Data Parallel"),z2.forEach(t),fd=f(Hf),Br=l(Hf,"LI",{});var B2=r(Br);cd=o(B2,"fp16 (autocast caching)"),B2.forEach(t),Hf.forEach(t),zn=f(e),ee=l(e,"H3",{class:!0});var zf=r(ee);Ue=l(zf,"A",{id:!0,class:!0,href:!0});var F2=r(Ue);Fr=l(F2,"SPAN",{});var M2=r(Fr);u(Yt.$$.fragment,M2),M2.forEach(t),F2.forEach(t),dd=f(zf),Mr=l(zf,"SPAN",{});var q2=r(Mr);ud=o(q2,"Bigger Models"),q2.forEach(t),zf.forEach(t),Bn=f(e),ga=l(e,"P",{});var R2=r(ga);md=o(R2,"Hardware:"),R2.forEach(t),Fn=f(e),M=l(e,"UL",{});var gr=r(M);qr=l(gr,"LI",{});var W2=r(qr);vd=o(W2,"bigger GPUs"),W2.forEach(t),wd=f(gr),Rr=l(gr,"LI",{});var X2=r(Rr);_d=o(X2,"more GPUs"),X2.forEach(t),bd=f(gr),Wr=l(gr,"LI",{});var Y2=r(Wr);yd=o(Y2,"more CPU and NVMe (offloaded to by DeepSpeed)"),Y2.forEach(t),gr.forEach(t),Mn=f(e),Ea=l(e,"P",{});var Q2=r(Ea);gd=o(Q2,"Software:"),Q2.forEach(t),qn=f(e),y=l(e,"UL",{});var g=r(y);Xr=l(g,"LI",{});var Z2=r(Xr);Ed=o(Z2,"Deepspeed ZeRO"),Z2.forEach(t),Pd=f(g),Yr=l(g,"LI",{});var J2=r(Yr);kd=o(J2,"Deepspeed ZeRO-Offload"),J2.forEach(t),$d=f(g),Qr=l(g,"LI",{});var K2=r(Qr);jd=o(K2,"Megatron-LM 3D Parallelism"),K2.forEach(t),Dd=f(g),Zr=l(g,"LI",{});var ey=r(Zr);Ad=o(ey,"Pipeline Parallelism"),ey.forEach(t),xd=f(g),Jr=l(g,"LI",{});var ty=r(Jr);Id=o(ty,"Tensor Parallelism"),ty.forEach(t),Td=f(g),Kr=l(g,"LI",{});var sy=r(Kr);Nd=o(sy,"Low-memory Optimizers"),sy.forEach(t),Ld=f(g),ei=l(g,"LI",{});var ay=r(ei);Sd=o(ay,"fp16/bf16 (smaller data/faster throughput)"),ay.forEach(t),Cd=f(g),ti=l(g,"LI",{});var ly=r(ti);Ud=o(ly,"tf32 (faster throughput)"),ly.forEach(t),Gd=f(g),si=l(g,"LI",{});var ry=r(si);Vd=o(ry,"Gradient checkpointing"),ry.forEach(t),g.forEach(t),Rn=f(e),te=l(e,"H2",{class:!0});var Bf=r(te);Ge=l(Bf,"A",{id:!0,class:!0,href:!0});var iy=r(Ge);ai=l(iy,"SPAN",{});var oy=r(ai);u(Qt.$$.fragment,oy),oy.forEach(t),iy.forEach(t),Od=f(Bf),li=l(Bf,"SPAN",{});var ny=r(li);Hd=o(ny,"Hardware"),ny.forEach(t),Bf.forEach(t),Wn=f(e),se=l(e,"H3",{class:!0});var Ff=r(se);Ve=l(Ff,"A",{id:!0,class:!0,href:!0});var py=r(Ve);ri=l(py,"SPAN",{});var hy=r(ri);u(Zt.$$.fragment,hy),hy.forEach(t),py.forEach(t),zd=f(Ff),ii=l(Ff,"SPAN",{});var fy=r(ii);Bd=o(fy,"Multi-GPU Connectivity"),fy.forEach(t),Ff.forEach(t),Xn=f(e),Pa=l(e,"P",{});var cy=r(Pa);Fd=o(cy,"If you use multiple GPUs the way cards are inter-connected can have a huge impact on the total training time."),cy.forEach(t),Yn=f(e),ka=l(e,"P",{});var dy=r(ka);Md=o(dy,"If the GPUs are on the same physical node, you can run:"),dy.forEach(t),Qn=f(e),u(Jt.$$.fragment,e),Zn=f(e),$a=l(e,"P",{});var uy=r($a);qd=o(uy,"and it will tell you how the GPUs are inter-connected."),uy.forEach(t),Jn=f(e),ja=l(e,"P",{});var my=r(ja);Rd=o(my,"On a machine with dual-GPU and which are connected with NVLink, you will most likely see something like:"),my.forEach(t),Kn=f(e),u(Kt.$$.fragment,e),ep=f(e),Da=l(e,"P",{});var vy=r(Da);Wd=o(vy,"on a different machine w/o NVLink we may see:"),vy.forEach(t),tp=f(e),u(es.$$.fragment,e),sp=f(e),Aa=l(e,"P",{});var wy=r(Aa);Xd=o(wy,"The report includes this legend:"),wy.forEach(t),ap=f(e),u(ts.$$.fragment,e),lp=f(e),q=l(e,"P",{});var Er=r(q);Yd=o(Er,"So the first report "),oi=l(Er,"CODE",{});var _y=r(oi);Qd=o(_y,"NV2"),_y.forEach(t),Zd=o(Er," tells us the GPUs are interconnected with 2 NVLinks, and the second report "),ni=l(Er,"CODE",{});var by=r(ni);Jd=o(by,"PHB"),by.forEach(t),Kd=o(Er," we have a typical consumer-level PCIe+Bridge setup."),Er.forEach(t),rp=f(e),xa=l(e,"P",{});var yy=r(xa);eu=o(yy,"Check what type of connectivity you have on your setup. Some of these will make the communication between cards faster (e.g. NVLink), others slower (e.g. PHB)."),yy.forEach(t),ip=f(e),Ia=l(e,"P",{});var gy=r(Ia);tu=o(gy,"Depending on the type of scalability solution used, the connectivity speed could have a major or a minor impact. If the GPUs need to sync rarely, as in DDP, the impact of a slower connection will be less significant. If the GPUs need to send messages to each other often, as in ZeRO-DP, then faster connectivity becomes super important to achieve faster training."),gy.forEach(t),op=f(e),ae=l(e,"H3",{class:!0});var Mf=r(ae);Oe=l(Mf,"A",{id:!0,class:!0,href:!0});var Ey=r(Oe);pi=l(Ey,"SPAN",{});var Py=r(pi);u(ss.$$.fragment,Py),Py.forEach(t),Ey.forEach(t),su=f(Mf),hi=l(Mf,"SPAN",{});var ky=r(hi);au=o(ky,"NVlink"),ky.forEach(t),Mf.forEach(t),np=f(e),as=l(e,"P",{});var f2=r(as);ls=l(f2,"A",{href:!0,rel:!0});var $y=r(ls);lu=o($y,"NVLink"),$y.forEach(t),ru=o(f2," is a wire-based serial multi-lane near-range communications link developed by Nvidia."),f2.forEach(t),pp=f(e),He=l(e,"P",{});var qf=r(He);iu=o(qf,"Each new generation provides a faster bandwidth, e.g. here is a quote from "),rs=l(qf,"A",{href:!0,rel:!0});var jy=r(rs);ou=o(jy,"Nvidia Ampere GA102 GPU Architecture"),jy.forEach(t),nu=o(qf,":"),qf.forEach(t),hp=f(e),Ta=l(e,"BLOCKQUOTE",{});var Dy=r(Ta);fi=l(Dy,"P",{});var Ay=r(fi);pu=o(Ay,`Third-Generation NVLink\xAE
GA102 GPUs utilize NVIDIA\u2019s third-generation NVLink interface, which includes four x4 links,
with each link providing 14.0625 GB/sec bandwidth in each direction between two GPUs. Four
links provide 56.25 GB/sec bandwidth in each direction, and 112.5 GB/sec total bandwidth
between two GPUs. Two RTX 3090 GPUs can be connected together for SLI using NVLink.
(Note that 3-Way and 4-Way SLI configurations are not supported.)`),Ay.forEach(t),Dy.forEach(t),fp=f(e),D=l(e,"P",{});var St=r(D);hu=o(St,"So the higher "),ci=l(St,"CODE",{});var xy=r(ci);fu=o(xy,"X"),xy.forEach(t),cu=o(St," you get in the report of "),di=l(St,"CODE",{});var Iy=r(di);du=o(Iy,"NVX"),Iy.forEach(t),uu=o(St," in the output of "),ui=l(St,"CODE",{});var Ty=r(ui);mu=o(Ty,"nvidia-smi topo -m"),Ty.forEach(t),vu=o(St," the better. The generation will depend on your GPU architecture."),St.forEach(t),cp=f(e),Na=l(e,"P",{});var Ny=r(Na);wu=o(Ny,"Let\u2019s compare the execution of a gpt2 language model training over a small sample of wikitext."),Ny.forEach(t),dp=f(e),La=l(e,"P",{});var Ly=r(La);_u=o(Ly,"The results are:"),Ly.forEach(t),up=f(e),ze=l(e,"TABLE",{});var Rf=r(ze);mi=l(Rf,"THEAD",{});var Sy=r(mi);is=l(Sy,"TR",{});var Wf=r(is);vi=l(Wf,"TH",{});var Cy=r(vi);bu=o(Cy,"NVlink"),Cy.forEach(t),yu=f(Wf),Sa=l(Wf,"TH",{align:!0});var Uy=r(Sa);gu=o(Uy,"Time"),Uy.forEach(t),Wf.forEach(t),Sy.forEach(t),Eu=f(Rf),os=l(Rf,"TBODY",{});var Xf=r(os);ns=l(Xf,"TR",{});var Yf=r(ns);wi=l(Yf,"TD",{});var Gy=r(wi);Pu=o(Gy,"Y"),Gy.forEach(t),ku=f(Yf),Ca=l(Yf,"TD",{align:!0});var Vy=r(Ca);$u=o(Vy,"101s"),Vy.forEach(t),Yf.forEach(t),ju=f(Xf),ps=l(Xf,"TR",{});var Qf=r(ps);_i=l(Qf,"TD",{});var Oy=r(_i);Du=o(Oy,"N"),Oy.forEach(t),Au=f(Qf),Ua=l(Qf,"TD",{align:!0});var Hy=r(Ua);xu=o(Hy,"131s"),Hy.forEach(t),Qf.forEach(t),Xf.forEach(t),Rf.forEach(t),mp=f(e),Ga=l(e,"P",{});var zy=r(Ga);Iu=o(zy,"You can see that NVLink completes the training ~23% faster."),zy.forEach(t),vp=f(e),Be=l(e,"P",{});var Zf=r(Be);Tu=o(Zf,"In the second benchmark we use "),bi=l(Zf,"CODE",{});var By=r(bi);Nu=o(By,"NCCL_P2P_DISABLE=1"),By.forEach(t),Lu=o(Zf," to tell the GPUs not to use NVLink."),Zf.forEach(t),wp=f(e),Va=l(e,"P",{});var Fy=r(Va);Su=o(Fy,"Here is the full benchmark code and outputs:"),Fy.forEach(t),_p=f(e),u(hs.$$.fragment,e),bp=f(e),P=l(e,"P",{});var H=r(P);Cu=o(H,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),yi=l(H,"CODE",{});var My=r(yi);Uu=o(My,"NV2"),My.forEach(t),Gu=o(H," in "),gi=l(H,"CODE",{});var qy=r(gi);Vu=o(qy,"nvidia-smi topo -m"),qy.forEach(t),Ou=o(H,`)
Software: `),Ei=l(H,"CODE",{});var Ry=r(Ei);Hu=o(Ry,"pytorch-1.8-to-be"),Ry.forEach(t),zu=o(H," + "),Pi=l(H,"CODE",{});var Wy=r(Pi);Bu=o(Wy,"cuda-11.0"),Wy.forEach(t),Fu=o(H," / "),ki=l(H,"CODE",{});var Xy=r(ki);Mu=o(Xy,"transformers==4.3.0.dev0"),Xy.forEach(t),H.forEach(t),yp=f(e),le=l(e,"H2",{class:!0});var Jf=r(le);Fe=l(Jf,"A",{id:!0,class:!0,href:!0});var Yy=r(Fe);$i=l(Yy,"SPAN",{});var Qy=r($i);u(fs.$$.fragment,Qy),Qy.forEach(t),Yy.forEach(t),qu=f(Jf),ji=l(Jf,"SPAN",{});var Zy=r(ji);Ru=o(Zy,"Software"),Zy.forEach(t),Jf.forEach(t),gp=f(e),re=l(e,"H3",{class:!0});var Kf=r(re);Me=l(Kf,"A",{id:!0,class:!0,href:!0});var Jy=r(Me);Di=l(Jy,"SPAN",{});var Ky=r(Di);u(cs.$$.fragment,Ky),Ky.forEach(t),Jy.forEach(t),Wu=f(Kf),Ai=l(Kf,"SPAN",{});var e3=r(Ai);Xu=o(e3,"Anatomy of Model's Memory"),e3.forEach(t),Kf.forEach(t),Ep=f(e),Oa=l(e,"P",{});var t3=r(Oa);Yu=o(t3,"The components on GPU memory are the following:"),t3.forEach(t),Pp=f(e),E=l(e,"OL",{});var N=r(E);xi=l(N,"LI",{});var s3=r(xi);Qu=o(s3,"model weights"),s3.forEach(t),Zu=f(N),Ii=l(N,"LI",{});var a3=r(Ii);Ju=o(a3,"optimizer states"),a3.forEach(t),Ku=f(N),Ti=l(N,"LI",{});var l3=r(Ti);em=o(l3,"gradients"),l3.forEach(t),tm=f(N),Ni=l(N,"LI",{});var r3=r(Ni);sm=o(r3,"forward activations saved for gradient computation"),r3.forEach(t),am=f(N),Li=l(N,"LI",{});var i3=r(Li);lm=o(i3,"temporary buffers"),i3.forEach(t),rm=f(N),Si=l(N,"LI",{});var o3=r(Si);im=o(o3,"functionality-specific memory"),o3.forEach(t),N.forEach(t),kp=f(e),Ha=l(e,"P",{});var n3=r(Ha);om=o(n3,"A typical model trained in mixed precision with AdamW requires 18 bytes per model parameter plus activation memory."),n3.forEach(t),$p=f(e),za=l(e,"P",{});var p3=r(za);nm=o(p3,"For inference there are no optimizer states and gradients, so we can subtract those. And thus we end up with 6 bytes per model parameter for mixed precision inference, plus activation memory."),p3.forEach(t),jp=f(e),Ba=l(e,"P",{});var h3=r(Ba);pm=o(h3,"Let\u2019s look at the details."),h3.forEach(t),Dp=f(e),ie=l(e,"H4",{class:!0});var ec=r(ie);qe=l(ec,"A",{id:!0,class:!0,href:!0});var f3=r(qe);Ci=l(f3,"SPAN",{});var c3=r(Ci);u(ds.$$.fragment,c3),c3.forEach(t),f3.forEach(t),hm=f(ec),Ui=l(ec,"SPAN",{});var d3=r(Ui);fm=o(d3,"Model Weights"),d3.forEach(t),ec.forEach(t),Ap=f(e),Re=l(e,"UL",{});var tc=r(Re);Gi=l(tc,"LI",{});var u3=r(Gi);cm=o(u3,"4 bytes * number of parameters for fp32 training"),u3.forEach(t),dm=f(tc),Vi=l(tc,"LI",{});var m3=r(Vi);um=o(m3,"6 bytes * number of parameters for mixed precision training"),m3.forEach(t),tc.forEach(t),xp=f(e),oe=l(e,"H4",{class:!0});var sc=r(oe);We=l(sc,"A",{id:!0,class:!0,href:!0});var v3=r(We);Oi=l(v3,"SPAN",{});var w3=r(Oi);u(us.$$.fragment,w3),w3.forEach(t),v3.forEach(t),mm=f(sc),Hi=l(sc,"SPAN",{});var _3=r(Hi);vm=o(_3,"Optimizer States"),_3.forEach(t),sc.forEach(t),Ip=f(e),R=l(e,"UL",{});var Pr=r(R);zi=l(Pr,"LI",{});var b3=r(zi);wm=o(b3,"8 bytes * number of parameters for normal AdamW (maintains 2 states)"),b3.forEach(t),_m=f(Pr),Fa=l(Pr,"LI",{});var c2=r(Fa);bm=o(c2,"2 bytes * number of parameters for 8-bit AdamW optimizers like "),ms=l(c2,"A",{href:!0,rel:!0});var y3=r(ms);ym=o(y3,"bitsandbytes"),y3.forEach(t),c2.forEach(t),gm=f(Pr),Bi=l(Pr,"LI",{});var g3=r(Bi);Em=o(g3,"4 bytes * number of parameters for optimizers like SGD (maintains only 1 state)"),g3.forEach(t),Pr.forEach(t),Tp=f(e),ne=l(e,"H4",{class:!0});var ac=r(ne);Xe=l(ac,"A",{id:!0,class:!0,href:!0});var E3=r(Xe);Fi=l(E3,"SPAN",{});var P3=r(Fi);u(vs.$$.fragment,P3),P3.forEach(t),E3.forEach(t),Pm=f(ac),Mi=l(ac,"SPAN",{});var k3=r(Mi);km=o(k3,"Gradients"),k3.forEach(t),ac.forEach(t),Np=f(e),Ma=l(e,"UL",{});var $3=r(Ma);qi=l($3,"LI",{});var j3=r(qi);$m=o(j3,"4 bytes * number of parameters for either fp32 or mixed precision training"),j3.forEach(t),$3.forEach(t),Lp=f(e),pe=l(e,"H4",{class:!0});var lc=r(pe);Ye=l(lc,"A",{id:!0,class:!0,href:!0});var D3=r(Ye);Ri=l(D3,"SPAN",{});var A3=r(Ri);u(ws.$$.fragment,A3),A3.forEach(t),D3.forEach(t),jm=f(lc),Wi=l(lc,"SPAN",{});var x3=r(Wi);Dm=o(x3,"Forward Activations"),x3.forEach(t),lc.forEach(t),Sp=f(e),qa=l(e,"UL",{});var I3=r(qa);Xi=l(I3,"LI",{});var T3=r(Xi);Am=o(T3,"size depends on many factors, the key ones being sequence length, hidden size and batch size."),T3.forEach(t),I3.forEach(t),Cp=f(e),Ra=l(e,"P",{});var N3=r(Ra);xm=o(N3,"There are the input and output that are being passed and returned by the forward and the backward functions and the forward activations saved for gradient computation."),N3.forEach(t),Up=f(e),he=l(e,"H4",{class:!0});var rc=r(he);Qe=l(rc,"A",{id:!0,class:!0,href:!0});var L3=r(Qe);Yi=l(L3,"SPAN",{});var S3=r(Yi);u(_s.$$.fragment,S3),S3.forEach(t),L3.forEach(t),Im=f(rc),Qi=l(rc,"SPAN",{});var C3=r(Qi);Tm=o(C3,"Temporary Memory"),C3.forEach(t),rc.forEach(t),Gp=f(e),Wa=l(e,"P",{});var U3=r(Wa);Nm=o(U3,"Additionally there are all kinds of temporary variables which get released once the calculation is done, but in the moment these could require additional memory and could push to OOM. Therefore when coding it\u2019s crucial to think strategically about such temporary variables and sometimes to explicitly free those as soon as they are no longer needed."),U3.forEach(t),Vp=f(e),fe=l(e,"H4",{class:!0});var ic=r(fe);Ze=l(ic,"A",{id:!0,class:!0,href:!0});var G3=r(Ze);Zi=l(G3,"SPAN",{});var V3=r(Zi);u(bs.$$.fragment,V3),V3.forEach(t),G3.forEach(t),Lm=f(ic),Ji=l(ic,"SPAN",{});var O3=r(Ji);Sm=o(O3,"Functionality-specific memory"),O3.forEach(t),ic.forEach(t),Op=f(e),Xa=l(e,"P",{});var H3=r(Xa);Cm=o(H3,"Then your software could have special memory needs. For example, when generating text using beam search, the software needs to maintain multiple copies of inputs and outputs."),H3.forEach(t),Hp=f(e),ce=l(e,"H3",{class:!0});var oc=r(ce);Je=l(oc,"A",{id:!0,class:!0,href:!0});var z3=r(Je);Ki=l(z3,"SPAN",{});var B3=r(Ki);u(ys.$$.fragment,B3),B3.forEach(t),z3.forEach(t),Um=f(oc),Ke=l(oc,"SPAN",{});var In=r(Ke);eo=l(In,"CODE",{});var F3=r(eo);Gm=o(F3,"forward"),F3.forEach(t),Vm=o(In," vs "),to=l(In,"CODE",{});var M3=r(to);Om=o(M3,"backward"),M3.forEach(t),Hm=o(In," Execution Speed"),In.forEach(t),oc.forEach(t),zp=f(e),Ya=l(e,"P",{});var q3=r(Ya);zm=o(q3,"For convolutions and linear layers there are 2x flops in the backward compared to the forward, which generally translates into ~2x slower (sometimes more, because sizes in the backward tend to be more awkward). Activations are usually bandwidth-limited, and it\u2019s typical for an activation to have to read more data in the backward than in the forward (e.g. activation forward reads once, writes once, activation backward reads twice, gradOutput and output of the forward, and writes once, gradInput)."),q3.forEach(t),Bp=f(e),de=l(e,"H3",{class:!0});var nc=r(de);et=l(nc,"A",{id:!0,class:!0,href:!0});var R3=r(et);so=l(R3,"SPAN",{});var W3=r(so);u(gs.$$.fragment,W3),W3.forEach(t),R3.forEach(t),Bm=f(nc),ao=l(nc,"SPAN",{});var X3=r(ao);Fm=o(X3,"Floating Data Types"),X3.forEach(t),nc.forEach(t),Fp=f(e),Qa=l(e,"P",{});var Y3=r(Qa);Mm=o(Y3,"Here are the commonly used floating point data types choice of which impacts both memory usage and throughput:"),Y3.forEach(t),Mp=f(e),A=l(e,"UL",{});var Ct=r(A);Es=l(Ct,"LI",{});var pc=r(Es);qm=o(pc,"fp32 ("),lo=l(pc,"CODE",{});var Q3=r(lo);Rm=o(Q3,"float32"),Q3.forEach(t),Wm=o(pc,")"),pc.forEach(t),Xm=f(Ct),Ps=l(Ct,"LI",{});var hc=r(Ps);Ym=o(hc,"fp16 ("),ro=l(hc,"CODE",{});var Z3=r(ro);Qm=o(Z3,"float16"),Z3.forEach(t),Zm=o(hc,")"),hc.forEach(t),Jm=f(Ct),ks=l(Ct,"LI",{});var fc=r(ks);Km=o(fc,"bf16 ("),io=l(fc,"CODE",{});var J3=r(io);ev=o(J3,"bfloat16"),J3.forEach(t),tv=o(fc,")"),fc.forEach(t),sv=f(Ct),oo=l(Ct,"LI",{});var K3=r(oo);av=o(K3,"tf32 (CUDA internal data type)"),K3.forEach(t),Ct.forEach(t),qp=f(e),Za=l(e,"P",{});var eg=r(Za);lv=o(eg,"Here is a diagram that shows how these data types correlate to each other."),eg.forEach(t),Rp=f(e),Ja=l(e,"P",{});var tg=r(Ja);Ka=l(tg,"IMG",{src:!0,alt:!0}),tg.forEach(t),Wp=f(e),tt=l(e,"P",{});var cc=r(tt);rv=o(cc,"(source: "),$s=l(cc,"A",{href:!0,rel:!0});var sg=r($s);iv=o(sg,"NVIDIA Blog"),sg.forEach(t),ov=o(cc,")"),cc.forEach(t),Xp=f(e),el=l(e,"P",{});var ag=r(el);nv=o(ag,"While fp16 and fp32 have been around for quite some time, bf16 and tf32 are only available on the Ampere architecture GPUS. TPUs support bf16 as well."),ag.forEach(t),Yp=f(e),ue=l(e,"H4",{class:!0});var dc=r(ue);st=l(dc,"A",{id:!0,class:!0,href:!0});var lg=r(st);no=l(lg,"SPAN",{});var rg=r(no);u(js.$$.fragment,rg),rg.forEach(t),lg.forEach(t),pv=f(dc),po=l(dc,"SPAN",{});var ig=r(po);hv=o(ig,"fp16"),ig.forEach(t),dc.forEach(t),Qp=f(e),tl=l(e,"P",{});var og=r(tl);fv=o(og,"AMP = Automatic Mixed Precision"),og.forEach(t),Zp=f(e),sl=l(e,"P",{});var ng=r(sl);cv=o(ng,"If we look at what\u2019s happening with FP16 training (mixed precision) we have:"),ng.forEach(t),Jp=f(e),x=l(e,"UL",{});var Ut=r(x);ho=l(Ut,"LI",{});var pg=r(ho);dv=o(pg,"the model has two copies in memory: one in half-precision for the forward/backward computations and one in full precision - no memory saved here"),pg.forEach(t),uv=f(Ut),fo=l(Ut,"LI",{});var hg=r(fo);mv=o(hg,"the forward activations saved for gradient computation are in half-precision - memory is saved here"),hg.forEach(t),vv=f(Ut),Ds=l(Ut,"LI",{});var uc=r(Ds);wv=o(uc,"the gradients are computed in half-precision "),co=l(uc,"EM",{});var fg=r(co);_v=o(fg,"but"),fg.forEach(t),bv=o(uc," converted to full-precision for the update, no saving there"),uc.forEach(t),yv=f(Ut),uo=l(Ut,"LI",{});var cg=r(uo);gv=o(cg,"the optimizer states are in full precision as all the updates are done in full-precision"),cg.forEach(t),Ut.forEach(t),Kp=f(e),al=l(e,"P",{});var dg=r(al);Ev=o(dg,"So the savings only happen for the forward activations saved for the backward computation, and there is a slight overhead because the model weights are stored both in half- and full-precision."),dg.forEach(t),eh=f(e),at=l(e,"P",{});var mc=r(at);Pv=o(mc,"In \u{1F917} Transformers fp16 mixed precision is enabled by passing "),mo=l(mc,"CODE",{});var ug=r(mo);kv=o(ug,"--fp16"),ug.forEach(t),$v=o(mc," to the \u{1F917} Trainer."),mc.forEach(t),th=f(e),ll=l(e,"P",{});var mg=r(ll);jv=o(mg,"Now let\u2019s look at a simple text-classification fine-tuning on 2 GPUs (I\u2019m giving the command for reference):"),mg.forEach(t),sh=f(e),u(As.$$.fragment,e),ah=f(e),lt=l(e,"P",{});var vc=r(lt);Dv=o(vc,"Since the only savings we get are in the model activations saved for the backward passed, it\u2019s logical that the bigger those activations are, the bigger the saving will be. If we try different batch sizes, I indeed get (this is with "),vo=l(vc,"CODE",{});var vg=r(vo);Av=o(vg,"nvidia-smi"),vg.forEach(t),xv=o(vc," so not completely reliable as said above but it will be a fair comparison):"),vc.forEach(t),lh=f(e),rt=l(e,"TABLE",{});var wc=r(rt);wo=l(wc,"THEAD",{});var wg=r(wo);S=l(wg,"TR",{});var Gt=r(S);rl=l(Gt,"TH",{align:!0});var _g=r(rl);Iv=o(_g,"batch size"),_g.forEach(t),Tv=f(Gt),il=l(Gt,"TH",{align:!0});var bg=r(il);Nv=o(bg,"w/o \u2014fp16"),bg.forEach(t),Lv=f(Gt),ol=l(Gt,"TH",{align:!0});var yg=r(ol);Sv=o(yg,"w/ \u2014fp16"),yg.forEach(t),Cv=f(Gt),nl=l(Gt,"TH",{align:!0});var gg=r(nl);Uv=o(gg,"savings"),gg.forEach(t),Gt.forEach(t),wg.forEach(t),Gv=f(wc),C=l(wc,"TBODY",{});var Vt=r(C);U=l(Vt,"TR",{});var Ot=r(U);pl=l(Ot,"TD",{align:!0});var Eg=r(pl);Vv=o(Eg,"8"),Eg.forEach(t),Ov=f(Ot),hl=l(Ot,"TD",{align:!0});var Pg=r(hl);Hv=o(Pg,"4247"),Pg.forEach(t),zv=f(Ot),fl=l(Ot,"TD",{align:!0});var kg=r(fl);Bv=o(kg,"4163"),kg.forEach(t),Fv=f(Ot),cl=l(Ot,"TD",{align:!0});var $g=r(cl);Mv=o($g,"84"),$g.forEach(t),Ot.forEach(t),qv=f(Vt),G=l(Vt,"TR",{});var Ht=r(G);dl=l(Ht,"TD",{align:!0});var jg=r(dl);Rv=o(jg,"16"),jg.forEach(t),Wv=f(Ht),ul=l(Ht,"TD",{align:!0});var Dg=r(ul);Xv=o(Dg,"4971"),Dg.forEach(t),Yv=f(Ht),ml=l(Ht,"TD",{align:!0});var Ag=r(ml);Qv=o(Ag,"4793"),Ag.forEach(t),Zv=f(Ht),vl=l(Ht,"TD",{align:!0});var xg=r(vl);Jv=o(xg,"178"),xg.forEach(t),Ht.forEach(t),Kv=f(Vt),V=l(Vt,"TR",{});var zt=r(V);wl=l(zt,"TD",{align:!0});var Ig=r(wl);e1=o(Ig,"32"),Ig.forEach(t),t1=f(zt),_l=l(zt,"TD",{align:!0});var Tg=r(_l);s1=o(Tg,"6827"),Tg.forEach(t),a1=f(zt),bl=l(zt,"TD",{align:!0});var Ng=r(bl);l1=o(Ng,"6207"),Ng.forEach(t),r1=f(zt),yl=l(zt,"TD",{align:!0});var Lg=r(yl);i1=o(Lg,"620"),Lg.forEach(t),zt.forEach(t),o1=f(Vt),O=l(Vt,"TR",{});var Bt=r(O);gl=l(Bt,"TD",{align:!0});var Sg=r(gl);n1=o(Sg,"64"),Sg.forEach(t),p1=f(Bt),El=l(Bt,"TD",{align:!0});var Cg=r(El);h1=o(Cg,"10037"),Cg.forEach(t),f1=f(Bt),Pl=l(Bt,"TD",{align:!0});var Ug=r(Pl);c1=o(Ug,"8061"),Ug.forEach(t),d1=f(Bt),kl=l(Bt,"TD",{align:!0});var Gg=r(kl);u1=o(Gg,"1976"),Gg.forEach(t),Bt.forEach(t),Vt.forEach(t),wc.forEach(t),rh=f(e),it=l(e,"P",{});var _c=r(it);m1=o(_c,"So there is only a real memory saving if we train at a high batch size (and it\u2019s not half) and at batch sizes lower than 8, you actually get a bigger memory footprint (because of the overhead mentioned above). The gain for FP16 training is that in each of those cases, the training with the flag "),_o=l(_c,"CODE",{});var Vg=r(_o);v1=o(Vg,"--fp16"),Vg.forEach(t),w1=o(_c," is twice as fast, which does require every tensor to have every dimension be a multiple of 8 (examples pad the tensors to a sequence length that is a multiple of 8)."),_c.forEach(t),ih=f(e),$l=l(e,"P",{});var Og=r($l);_1=o(Og,"Summary: FP16 with apex or AMP will only give you some memory savings with a reasonably high batch size."),Og.forEach(t),oh=f(e),jl=l(e,"P",{});var Hg=r(jl);b1=o(Hg,"Additionally, under mixed precision when possible, it\u2019s important that the batch size is a multiple of 8 to efficiently use tensor cores."),Hg.forEach(t),nh=f(e),ot=l(e,"P",{});var bc=r(ot);y1=o(bc,"Note that in some situations the speed up can be as big as 5x when using mixed precision. e.g. we have observed that while using "),xs=l(bc,"A",{href:!0,rel:!0});var zg=r(xs);g1=o(zg,"Megatron-Deepspeed"),zg.forEach(t),E1=o(bc,"."),bc.forEach(t),ph=f(e),Dl=l(e,"P",{});var Bg=r(Dl);P1=o(Bg,"Some amazing tutorials to read on mixed precision:"),Bg.forEach(t),hh=f(e),nt=l(e,"UL",{});var yc=r(nt);Al=l(yc,"LI",{});var d2=r(Al);k1=o(d2,"@sgugger wrote a great explanation of mixed precision "),Is=l(d2,"A",{href:!0,rel:!0});var Fg=r(Is);$1=o(Fg,"here"),Fg.forEach(t),d2.forEach(t),j1=f(yc),xl=l(yc,"LI",{});var u2=r(xl);D1=o(u2,"Aleksey Bilogur\u2019s "),Ts=l(u2,"A",{href:!0,rel:!0});var Mg=r(Ts);A1=o(Mg,"A developer-friendly guide to mixed precision training with PyTorch"),Mg.forEach(t),u2.forEach(t),yc.forEach(t),fh=f(e),me=l(e,"H5",{class:!0});var gc=r(me);pt=l(gc,"A",{id:!0,class:!0,href:!0});var qg=r(pt);bo=l(qg,"SPAN",{});var Rg=r(bo);u(Ns.$$.fragment,Rg),Rg.forEach(t),qg.forEach(t),x1=f(gc),yo=l(gc,"SPAN",{});var Wg=r(yo);I1=o(Wg,"fp16 caching"),Wg.forEach(t),gc.forEach(t),ch=f(e),W=l(e,"P",{});var kr=r(W);T1=o(kr,"pytorch "),go=l(kr,"CODE",{});var Xg=r(go);N1=o(Xg,"autocast"),Xg.forEach(t),L1=o(kr," which performs AMP include a caching feature, which speed things up by caching fp16-converted values. Here is the full description from this "),Ls=l(kr,"A",{href:!0,rel:!0});var Yg=r(Ls);S1=o(Yg,"comment"),Yg.forEach(t),C1=o(kr,":"),kr.forEach(t),dh=f(e),Il=l(e,"P",{});var Qg=r(Il);U1=o(Qg,"Autocast maintains a cache of the FP16 casts of model parameters (leaves). This helps streamline parameter reuse: if the same FP32 param is used in several different FP16list ops, like several matmuls, instead of re-casting the param to FP16 on entering each matmul, the cast will occur on the first matmul, the casted FP16 copy will be cached, and for all later matmuls the FP16 copy will be reused. The cache is maintained only within a particular outermost autocast context. When you exit the autocast context the cache is dropped. For recommended usage, in which autocast wraps the forward pass, and then you exit the context before calling backward(), this means the cache only lasts the duration of the forward pass each iteration, and will be rebuilt next iteration. (The cache of FP16-casted copies MUST be rebuilt each iteration. The FP32 parameters get updated by the optimizer, so the FP16 copies must be recreated, otherwise the FP16 values will be stale.)"),Qg.forEach(t),uh=f(e),ve=l(e,"H5",{class:!0});var Ec=r(ve);ht=l(Ec,"A",{id:!0,class:!0,href:!0});var Zg=r(ht);Eo=l(Zg,"SPAN",{});var Jg=r(Eo);u(Ss.$$.fragment,Jg),Jg.forEach(t),Zg.forEach(t),G1=f(Ec),Po=l(Ec,"SPAN",{});var Kg=r(Po);V1=o(Kg,"fp16 Inference"),Kg.forEach(t),Ec.forEach(t),mh=f(e),Tl=l(e,"P",{});var eE=r(Tl);O1=o(eE,"While normally inference is done with fp16/amp as with training, it\u2019s also possible to use the full fp16 mode without using mixed precision. This is especially a good fit if the pretrained model weights are already in fp16. So a lot less memory is used: 2 bytes per parameter vs 6 bytes with mixed precision!"),eE.forEach(t),vh=f(e),Nl=l(e,"P",{});var tE=r(Nl);H1=o(tE,"How good the results this will deliver will depend on the model. If it can handle fp16 without overflows and accuracy issues, then it\u2019ll definitely better to use the full fp16 mode."),tE.forEach(t),wh=f(e),Ll=l(e,"P",{});var sE=r(Ll);z1=o(sE,"For example, LayerNorm has to be done in fp32 and recent pytorch (1.10+) has been fixed to do that regardless of the input types, but earlier pytorch versions accumulate in the input type which can be an issue."),sE.forEach(t),_h=f(e),ft=l(e,"P",{});var Pc=r(ft);B1=o(Pc,"In \u{1F917} Transformers the full fp16 inference is enabled by passing "),ko=l(Pc,"CODE",{});var aE=r(ko);F1=o(aE,"--fp16_full_eval"),aE.forEach(t),M1=o(Pc," to the \u{1F917} Trainer."),Pc.forEach(t),bh=f(e),we=l(e,"H4",{class:!0});var kc=r(we);ct=l(kc,"A",{id:!0,class:!0,href:!0});var lE=r(ct);$o=l(lE,"SPAN",{});var rE=r($o);u(Cs.$$.fragment,rE),rE.forEach(t),lE.forEach(t),q1=f(kc),jo=l(kc,"SPAN",{});var iE=r(jo);R1=o(iE,"bf16"),iE.forEach(t),kc.forEach(t),yh=f(e),X=l(e,"P",{});var $r=r(X);W1=o($r,"If you own Ampere or newer hardware you can start using bf16 for your training and evaluation. While bf16 has a worse precision than fp16, it has a much much bigger dynamic range. Therefore, if in the past you were experiencing overflow issues while training the model, bf16 will prevent this from happening most of the time. Remember that in fp16 the biggest number you can have is "),Do=l($r,"CODE",{});var oE=r(Do);X1=o(oE,"65535"),oE.forEach(t),Y1=o($r," and any number above that will overflow. A bf16 number can be as large as "),Ao=l($r,"CODE",{});var nE=r(Ao);Q1=o(nE,"3.39e+38"),nE.forEach(t),Z1=o($r," (!) which is about the same as fp32 - because both have 8-bits used for the numerical range."),$r.forEach(t),gh=f(e),Sl=l(e,"P",{});var pE=r(Sl);J1=o(pE,"Automatic Mixed Precision (AMP) is the same as with fp16, except it\u2019ll use bf16."),pE.forEach(t),Eh=f(e),Cl=l(e,"P",{});var hE=r(Cl);K1=o(hE,"Thanks to the fp32-like dynamic range with bf16 mixed precision loss scaling is no longer needed."),hE.forEach(t),Ph=f(e),Ul=l(e,"P",{});var fE=r(Ul);ew=o(fE,"If you have tried to finetune models pre-trained under bf16 mixed precision (e.g. T5) it\u2019s very likely that you have encountered overflow issues. Now you should be able to finetune those models without any issues."),fE.forEach(t),kh=f(e),Gl=l(e,"P",{});var cE=r(Gl);tw=o(cE,"That said, also be aware that if you pre-trained a model in bf16, it\u2019s likely to have overflow issues if someone tries to finetune it in fp16 down the road. So once started on the bf16-mode path it\u2019s best to remain on it and not switch to fp16."),cE.forEach(t),$h=f(e),dt=l(e,"P",{});var $c=r(dt);sw=o($c,"In \u{1F917} Transformers bf16 mixed precision is enabled by passing "),xo=l($c,"CODE",{});var dE=r(xo);aw=o(dE,"--bf16"),dE.forEach(t),lw=o($c," to the \u{1F917} Trainer."),$c.forEach(t),jh=f(e),Vl=l(e,"P",{});var uE=r(Vl);rw=o(uE,"If you use your own trainer, this is just:"),uE.forEach(t),Dh=f(e),u(Us.$$.fragment,e),Ah=f(e),Gs=l(e,"P",{});var m2=r(Gs);iw=o(m2,"If you need to switch a tensor to bf16, it\u2019s just: "),Io=l(m2,"CODE",{});var mE=r(Io);ow=o(mE,"t.to(dtype=torch.bfloat16)"),mE.forEach(t),m2.forEach(t),xh=f(e),Ol=l(e,"P",{});var vE=r(Ol);nw=o(vE,"Here is how you can check if your setup supports bf16:"),vE.forEach(t),Ih=f(e),u(Vs.$$.fragment,e),Th=f(e),Hl=l(e,"P",{});var wE=r(Hl);pw=o(wE,"On the other hand bf16 has a much worse precision than fp16, so there are certain situations where you\u2019d still want to use fp16 and not bf16."),wE.forEach(t),Nh=f(e),_e=l(e,"H5",{class:!0});var jc=r(_e);ut=l(jc,"A",{id:!0,class:!0,href:!0});var _E=r(ut);To=l(_E,"SPAN",{});var bE=r(To);u(Os.$$.fragment,bE),bE.forEach(t),_E.forEach(t),hw=f(jc),No=l(jc,"SPAN",{});var yE=r(No);fw=o(yE,"bf16 Inference"),yE.forEach(t),jc.forEach(t),Lh=f(e),mt=l(e,"P",{});var Dc=r(mt);cw=o(Dc,"Same as with fp16, you can do inference in either the mixed precision bf16 or using the full bf16 mode. The same caveats apply. For details see "),zl=l(Dc,"A",{href:!0});var gE=r(zl);dw=o(gE,"fp16 Inference"),gE.forEach(t),uw=o(Dc,"."),Dc.forEach(t),Sh=f(e),vt=l(e,"P",{});var Ac=r(vt);mw=o(Ac,"In \u{1F917} Transformers the full bf16 inference is enabled by passing "),Lo=l(Ac,"CODE",{});var EE=r(Lo);vw=o(EE,"--bf16_full_eval"),EE.forEach(t),ww=o(Ac," to the \u{1F917} Trainer."),Ac.forEach(t),Ch=f(e),be=l(e,"H4",{class:!0});var xc=r(be);wt=l(xc,"A",{id:!0,class:!0,href:!0});var PE=r(wt);So=l(PE,"SPAN",{});var kE=r(So);u(Hs.$$.fragment,kE),kE.forEach(t),PE.forEach(t),_w=f(xc),Co=l(xc,"SPAN",{});var $E=r(Co);bw=o($E,"tf32"),$E.forEach(t),xc.forEach(t),Uh=f(e),Bl=l(e,"P",{});var jE=r(Bl);yw=o(jE,"The Ampere hardware uses a magical data type called tf32. It has the same numerical range as fp32 (8-bits), but instead of 23 bits precision it has only 10 bits (same as fp16). In total it uses only 19 bits."),jE.forEach(t),Gh=f(e),Fl=l(e,"P",{});var DE=r(Fl);gw=o(DE,"It\u2019s magical in the sense that you can use the normal fp32 training and/or inference code and by enabling tf32 support you can get up to 3x throughput improvement. All you need to do is to add this to your code:"),DE.forEach(t),Vh=f(e),u(zs.$$.fragment,e),Oh=f(e),Ml=l(e,"P",{});var AE=r(Ml);Ew=o(AE,"When this is done CUDA will automatically switch to using tf32 instead of fp32 where it\u2019s possible. This, of course, assumes that the used GPU is from the Ampere series."),AE.forEach(t),Hh=f(e),_t=l(e,"P",{});var Ic=r(_t);Pw=o(Ic,"Like all cases with reduced precision this may or may not be satisfactory for your needs, so you have to experiment and see. According to "),Bs=l(Ic,"A",{href:!0,rel:!0});var xE=r(Bs);kw=o(xE,"NVIDIA research"),xE.forEach(t),$w=o(Ic," the majority of machine learning training shouldn\u2019t be impacted and showed the same perplexity and convergence as the fp32 training."),Ic.forEach(t),zh=f(e),ql=l(e,"P",{});var IE=r(ql);jw=o(IE,"If you\u2019re already using fp16 or bf16 mixed precision it may help with the throughput as well."),IE.forEach(t),Bh=f(e),I=l(e,"P",{});var Ft=r(I);Dw=o(Ft,"You can enable this mode in the \u{1F917} Trainer with "),Uo=l(Ft,"CODE",{});var TE=r(Uo);Aw=o(TE,"--tf32"),TE.forEach(t),xw=o(Ft,", or disable it with "),Go=l(Ft,"CODE",{});var NE=r(Go);Iw=o(NE,"--tf32 0"),NE.forEach(t),Tw=o(Ft," or "),Vo=l(Ft,"CODE",{});var LE=r(Vo);Nw=o(LE,"--no_tf32"),LE.forEach(t),Lw=o(Ft,`.
By default the PyTorch default is used.`),Ft.forEach(t),Fh=f(e),Y=l(e,"P",{});var jr=r(Y);Sw=o(jr,"Note: tf32 mode is internal to CUDA and can\u2019t be accessed directly via "),Oo=l(jr,"CODE",{});var SE=r(Oo);Cw=o(SE,"tensor.to(dtype=torch.tf32)"),SE.forEach(t),Uw=o(jr," as "),Ho=l(jr,"CODE",{});var CE=r(Ho);Gw=o(CE,"torch.tf32"),CE.forEach(t),Vw=o(jr," doesn\u2019t exit."),jr.forEach(t),Mh=f(e),bt=l(e,"P",{});var Tc=r(bt);Ow=o(Tc,"Note: you need "),zo=l(Tc,"CODE",{});var UE=r(zo);Hw=o(UE,"torch>=1.7"),UE.forEach(t),zw=o(Tc," to enjoy this feature."),Tc.forEach(t),qh=f(e),ye=l(e,"H3",{class:!0});var Nc=r(ye);yt=l(Nc,"A",{id:!0,class:!0,href:!0});var GE=r(yt);Bo=l(GE,"SPAN",{});var VE=r(Bo);u(Fs.$$.fragment,VE),VE.forEach(t),GE.forEach(t),Bw=f(Nc),Fo=l(Nc,"SPAN",{});var OE=r(Fo);Fw=o(OE,"Gradient Checkpointing"),OE.forEach(t),Nc.forEach(t),Rh=f(e),Rl=l(e,"P",{});var HE=r(Rl);Mw=o(HE,"One way to use significantly less GPU memory is to enabled \u201CGradient Checkpointing\u201D (also known as \u201Cactivation checkpointing\u201D). When enabled, a lot of memory can be freed at the cost of small decrease in the training speed due to recomputing parts of the graph during back-propagation."),HE.forEach(t),Wh=f(e),T=l(e,"P",{});var Mt=r(T);qw=o(Mt,"This technique was first shared in the paper: "),Ms=l(Mt,"A",{href:!0,rel:!0});var zE=r(Ms);Rw=o(zE,"Training Deep Nets with Sublinear Memory Cost"),zE.forEach(t),Ww=o(Mt,". The paper will also give you the exact details on the savings, but it\u2019s in the ballpark of "),Mo=l(Mt,"CODE",{});var BE=r(Mo);Xw=o(BE,"O(sqrt(n))"),BE.forEach(t),Yw=o(Mt,", where "),qo=l(Mt,"CODE",{});var FE=r(qo);Qw=o(FE,"n"),FE.forEach(t),Zw=o(Mt," is the number of feed-forward layers."),Mt.forEach(t),Xh=f(e),Wl=l(e,"P",{});var ME=r(Wl);Jw=o(ME,"To activate this feature in \u{1F917} Transformers for models that support it, use:"),ME.forEach(t),Yh=f(e),u(qs.$$.fragment,e),Qh=f(e),gt=l(e,"P",{});var Lc=r(gt);Kw=o(Lc,"or add "),Ro=l(Lc,"CODE",{});var qE=r(Ro);e_=o(qE,"--gradient_checkpointing"),qE.forEach(t),t_=o(Lc," to the Trainer arguments."),Lc.forEach(t),Zh=f(e),ge=l(e,"H3",{class:!0});var Sc=r(ge);Et=l(Sc,"A",{id:!0,class:!0,href:!0});var RE=r(Et);Wo=l(RE,"SPAN",{});var WE=r(Wo);u(Rs.$$.fragment,WE),WE.forEach(t),RE.forEach(t),s_=f(Sc),Xo=l(Sc,"SPAN",{});var XE=r(Xo);a_=o(XE,"Batch sizes"),XE.forEach(t),Sc.forEach(t),Jh=f(e),Xl=l(e,"P",{});var YE=r(Xl);l_=o(YE,"One gets the most efficient performance when batch sizes and input/output neuron counts are divisible by a certain number, which typically starts at 8, but can be much higher as well. That number varies a lot depending on the specific hardware being used and the dtype of the model."),YE.forEach(t),Kh=f(e),Q=l(e,"P",{});var Dr=r(Q);r_=o(Dr,"For example for fully connected layers (which correspond to GEMMs), NVIDIA provides recommendations for "),Ws=l(Dr,"A",{href:!0,rel:!0});var QE=r(Ws);i_=o(QE,"input/output neuron counts"),QE.forEach(t),o_=o(Dr," and "),Xs=l(Dr,"A",{href:!0,rel:!0});var ZE=r(Xs);n_=o(ZE,"batch size"),ZE.forEach(t),p_=o(Dr,"."),Dr.forEach(t),ef=f(e),Ys=l(e,"P",{});var v2=r(Ys);Qs=l(v2,"A",{href:!0,rel:!0});var JE=r(Qs);h_=o(JE,"Tensor Core Requirements"),JE.forEach(t),f_=o(v2," define the multiplier based on the dtype and the hardware. For example, for fp16 a multiple of 8 is recommended, but on A100 it\u2019s 64!"),v2.forEach(t),tf=f(e),Pt=l(e,"P",{});var Cc=r(Pt);c_=o(Cc,"For parameters that are small, there is also "),Zs=l(Cc,"A",{href:!0,rel:!0});var KE=r(Zs);d_=o(KE,"Dimension Quantization Effects"),KE.forEach(t),u_=o(Cc," to consider, this is where tiling happens and the right multiplier can have a significant speedup."),Cc.forEach(t),sf=f(e),Ee=l(e,"H3",{class:!0});var Uc=r(Ee);kt=l(Uc,"A",{id:!0,class:!0,href:!0});var e4=r(kt);Yo=l(e4,"SPAN",{});var t4=r(Yo);u(Js.$$.fragment,t4),t4.forEach(t),e4.forEach(t),m_=f(Uc),Qo=l(Uc,"SPAN",{});var s4=r(Qo);v_=o(s4,"DP vs DDP"),s4.forEach(t),Uc.forEach(t),af=f(e),Pe=l(e,"P",{});var Tn=r(Pe);Zo=l(Tn,"CODE",{});var a4=r(Zo);w_=o(a4,"DistributedDataParallel"),a4.forEach(t),__=o(Tn," (DDP) is typically faster than "),Jo=l(Tn,"CODE",{});var l4=r(Jo);b_=o(l4,"DataParallel"),l4.forEach(t),y_=o(Tn," (DP), but it is not always the case:"),Tn.forEach(t),lf=f(e),$t=l(e,"UL",{});var Gc=r($t);Ko=l(Gc,"LI",{});var r4=r(Ko);g_=o(r4,"while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),r4.forEach(t),E_=f(Gc),en=l(Gc,"LI",{});var i4=r(en);P_=o(i4,"on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),i4.forEach(t),Gc.forEach(t),rf=f(e),Yl=l(e,"P",{});var o4=r(Yl);k_=o(o4,"Here are the main differences in the inter-GPU communication overhead between the two modes:"),o4.forEach(t),of=f(e),Ks=l(e,"P",{});var w2=r(Ks);ea=l(w2,"A",{href:!0,rel:!0});var n4=r(ea);$_=o(n4,"DDP"),n4.forEach(t),j_=o(w2,":"),w2.forEach(t),nf=f(e),jt=l(e,"UL",{});var Vc=r(jt);tn=l(Vc,"LI",{});var p4=r(tn);D_=o(p4,"At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),p4.forEach(t),A_=f(Vc),Ql=l(Vc,"LI",{});var _2=r(Ql);x_=o(_2,"Then for each batch:"),ta=l(_2,"OL",{});var Oc=r(ta);sn=l(Oc,"LI",{});var h4=r(sn);I_=o(h4,"each gpu consumes each own mini-batch of data directly"),h4.forEach(t),T_=f(Oc),sa=l(Oc,"LI",{});var Hc=r(sa);N_=o(Hc,"during "),an=l(Hc,"CODE",{});var f4=r(an);L_=o(f4,"backward"),f4.forEach(t),S_=o(Hc,", once the local gradients are ready, they are then averaged across all processes"),Hc.forEach(t),Oc.forEach(t),_2.forEach(t),Vc.forEach(t),pf=f(e),aa=l(e,"P",{});var b2=r(aa);la=l(b2,"A",{href:!0,rel:!0});var c4=r(la);C_=o(c4,"DP"),c4.forEach(t),U_=o(b2,":"),b2.forEach(t),hf=f(e),Zl=l(e,"P",{});var d4=r(Zl);G_=o(d4,"For each batch:"),d4.forEach(t),ff=f(e),$=l(e,"OL",{});var Z=r($);ln=l(Z,"LI",{});var u4=r(ln);V_=o(u4,"gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),u4.forEach(t),O_=f(Z),rn=l(Z,"LI",{});var m4=r(rn);H_=o(m4,"replicates the up-to-date model from gpu 0 to each gpu"),m4.forEach(t),z_=f(Z),ra=l(Z,"LI",{});var zc=r(ra);B_=o(zc,"runs "),on=l(zc,"CODE",{});var v4=r(on);F_=o(v4,"forward"),v4.forEach(t),M_=o(zc," and sends output from each gpu to gpu 0, computes loss"),zc.forEach(t),q_=f(Z),Jl=l(Z,"LI",{});var y2=r(Jl);R_=o(y2,"scatters loss from gpu 0 to all gpus, runs "),nn=l(y2,"CODE",{});var w4=r(nn);W_=o(w4,"backward"),w4.forEach(t),y2.forEach(t),X_=f(Z),pn=l(Z,"LI",{});var _4=r(pn);Y_=o(_4,"sends gradients from each gpu to gpu 0 and averages those"),_4.forEach(t),Z.forEach(t),cf=f(e),Kl=l(e,"P",{});var b4=r(Kl);Q_=o(b4,"The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),b4.forEach(t),df=f(e),Dt=l(e,"P",{});var Bc=r(Dt);Z_=o(Bc,"DP copies data within the process via python threads, whereas DDP copies data via "),ia=l(Bc,"A",{href:!0,rel:!0});var y4=r(ia);J_=o(y4,"torch.distributed"),y4.forEach(t),K_=o(Bc,"."),Bc.forEach(t),uf=f(e),er=l(e,"P",{});var g4=r(er);eb=o(g4,"Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),g4.forEach(t),mf=f(e),tr=l(e,"P",{});var E4=r(tr);tb=o(E4,"You can use DDP across multiple machines, but this is not the case with DP."),E4.forEach(t),vf=f(e),sr=l(e,"P",{});var P4=r(sr);sb=o(P4,"There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),P4.forEach(t),wf=f(e),At=l(e,"P",{});var Fc=r(At);ab=o(Fc,"If you want to go really deep into understanding these 2 modes, this "),oa=l(Fc,"A",{href:!0,rel:!0});var k4=r(oa);lb=o(k4,"article"),k4.forEach(t),rb=o(Fc," is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),Fc.forEach(t),_f=f(e),ar=l(e,"P",{});var $4=r(ar);ib=o($4,"Let\u2019s look at an actual benchmark:"),$4.forEach(t),bf=f(e),xt=l(e,"TABLE",{});var Mc=r(xt);hn=l(Mc,"THEAD",{});var j4=r(hn);ke=l(j4,"TR",{});var Ar=r(ke);lr=l(Ar,"TH",{align:!0});var D4=r(lr);ob=o(D4,"Type"),D4.forEach(t),nb=f(Ar),fn=l(Ar,"TH",{});var A4=r(fn);pb=o(A4,"NVlink"),A4.forEach(t),hb=f(Ar),rr=l(Ar,"TH",{align:!0});var x4=r(rr);fb=o(x4,"Time"),x4.forEach(t),Ar.forEach(t),j4.forEach(t),cb=f(Mc),$e=l(Mc,"TBODY",{});var xr=r($e);je=l(xr,"TR",{});var Ir=r(je);ir=l(Ir,"TD",{align:!0});var I4=r(ir);db=o(I4,"2:DP"),I4.forEach(t),ub=f(Ir),cn=l(Ir,"TD",{});var T4=r(cn);mb=o(T4,"Y"),T4.forEach(t),vb=f(Ir),or=l(Ir,"TD",{align:!0});var N4=r(or);wb=o(N4,"110s"),N4.forEach(t),Ir.forEach(t),_b=f(xr),De=l(xr,"TR",{});var Tr=r(De);nr=l(Tr,"TD",{align:!0});var L4=r(nr);bb=o(L4,"2:DDP"),L4.forEach(t),yb=f(Tr),dn=l(Tr,"TD",{});var S4=r(dn);gb=o(S4,"Y"),S4.forEach(t),Eb=f(Tr),pr=l(Tr,"TD",{align:!0});var C4=r(pr);Pb=o(C4,"101s"),C4.forEach(t),Tr.forEach(t),kb=f(xr),Ae=l(xr,"TR",{});var Nr=r(Ae);hr=l(Nr,"TD",{align:!0});var U4=r(hr);$b=o(U4,"2:DDP"),U4.forEach(t),jb=f(Nr),un=l(Nr,"TD",{});var G4=r(un);Db=o(G4,"N"),G4.forEach(t),Ab=f(Nr),fr=l(Nr,"TD",{align:!0});var V4=r(fr);xb=o(V4,"131s"),V4.forEach(t),Nr.forEach(t),xr.forEach(t),Mc.forEach(t),yf=f(e),cr=l(e,"P",{});var O4=r(cr);Ib=o(O4,"Analysis:"),O4.forEach(t),gf=f(e),dr=l(e,"P",{});var H4=r(dr);Tb=o(H4,"Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),H4.forEach(t),Ef=f(e),ur=l(e,"P",{});var z4=r(ur);Nb=o(z4,"The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),z4.forEach(t),Pf=f(e),mr=l(e,"P",{});var B4=r(mr);Lb=o(B4,"Here is the full benchmark code and outputs:"),B4.forEach(t),kf=f(e),na=l(e,"P",{});var g2=r(na);mn=l(g2,"CODE",{});var F4=r(mn);Sb=o(F4,"NCCL_P2P_DISABLE=1"),F4.forEach(t),Cb=o(g2," was used to disable the NVLink feature on the corresponding benchmark."),g2.forEach(t),$f=f(e),u(pa.$$.fragment,e),jf=f(e),k=l(e,"P",{});var z=r(k);Ub=o(z,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),vn=l(z,"CODE",{});var M4=r(vn);Gb=o(M4,"NV2"),M4.forEach(t),Vb=o(z," in "),wn=l(z,"CODE",{});var q4=r(wn);Ob=o(q4,"nvidia-smi topo -m"),q4.forEach(t),Hb=o(z,`)
Software: `),_n=l(z,"CODE",{});var R4=r(_n);zb=o(R4,"pytorch-1.8-to-be"),R4.forEach(t),Bb=o(z," + "),bn=l(z,"CODE",{});var W4=r(bn);Fb=o(W4,"cuda-11.0"),W4.forEach(t),Mb=o(z," / "),yn=l(z,"CODE",{});var X4=r(yn);qb=o(X4,"transformers==4.3.0.dev0"),X4.forEach(t),z.forEach(t),Df=f(e),xe=l(e,"H3",{class:!0});var qc=r(xe);It=l(qc,"A",{id:!0,class:!0,href:!0});var Y4=r(It);gn=l(Y4,"SPAN",{});var Q4=r(gn);u(ha.$$.fragment,Q4),Q4.forEach(t),Y4.forEach(t),Rb=f(qc),En=l(qc,"SPAN",{});var Z4=r(En);Wb=o(Z4,"DataLoader"),Z4.forEach(t),qc.forEach(t),Af=f(e),vr=l(e,"P",{});var J4=r(vr);Xb=o(J4,"One of the important requirements to reach great training speed is the ability to feed the GPU at the maximum speed it can handle. By default everything happens in the main process and it might not be able to read the data from disk fast enough, and thus create a bottleneck, leading to GPU under-utilization."),J4.forEach(t),xf=f(e),Tt=l(e,"UL",{});var Rc=r(Tt);wr=l(Rc,"LI",{});var E2=r(wr);Pn=l(E2,"CODE",{});var K4=r(Pn);Yb=o(K4,"DataLoader(pin_memory=True, ...)"),K4.forEach(t),Qb=o(E2," which ensures that the data gets preloaded into the pinned memory on CPU and typically leads to much faster transfers from CPU to GPU memory."),E2.forEach(t),Zb=f(Rc),_r=l(Rc,"LI",{});var P2=r(_r);kn=l(P2,"CODE",{});var e0=r(kn);Jb=o(e0,"DataLoader(num_workers=4, ...)"),e0.forEach(t),Kb=o(P2," - spawn several workers to pre-load data faster - during training watch the GPU utilization stats and if it\u2019s far from 100% experiment with raising the number of workers. Of course, the problem could be elsewhere so a very big number of workers won\u2019t necessarily lead to a better performance."),P2.forEach(t),Rc.forEach(t),If=f(e),Ie=l(e,"H3",{class:!0});var Wc=r(Ie);Nt=l(Wc,"A",{id:!0,class:!0,href:!0});var t0=r(Nt);$n=l(t0,"SPAN",{});var s0=r($n);u(fa.$$.fragment,s0),s0.forEach(t),t0.forEach(t),e2=f(Wc),jn=l(Wc,"SPAN",{});var a0=r(jn);t2=o(a0,"Faster optimizer"),a0.forEach(t),Wc.forEach(t),Tf=f(e),Te=l(e,"P",{});var Nn=r(Te);s2=o(Nn,"pytorch-nightly introduced "),Dn=l(Nn,"CODE",{});var l0=r(Dn);a2=o(l0,"torch.optim._multi_tensor"),l0.forEach(t),l2=o(Nn," which should significantly speed up the optimizers for situations with lots of small feature tensors. It should eventually become the default, but if you want to experiment with it sooner and don\u2019t mind using the bleed-edge, see: "),ca=l(Nn,"A",{href:!0,rel:!0});var r0=r(ca);r2=o(r0,"https://github.com/huggingface/transformers/issues/9965"),r0.forEach(t),Nn.forEach(t),Nf=f(e),Ne=l(e,"H2",{class:!0});var Xc=r(Ne);Lt=l(Xc,"A",{id:!0,class:!0,href:!0});var i0=r(Lt);An=l(i0,"SPAN",{});var o0=r(An);u(da.$$.fragment,o0),o0.forEach(t),i0.forEach(t),i2=f(Xc),xn=l(Xc,"SPAN",{});var n0=r(xn);o2=o(n0,"Contribute"),n0.forEach(t),Xc.forEach(t),Lf=f(e),br=l(e,"P",{});var p0=r(br);n2=o(p0,"This document is far from being complete and a lot more needs to be added, so if you have additions or corrections to make please don\u2019t hesitate to open a PR or if you aren\u2019t sure start an Issue and we can discuss the details there."),p0.forEach(t),Sf=f(e),yr=l(e,"P",{});var h0=r(yr);p2=o(h0,"When making contributions that A is better than B, please try to include a reproducible benchmark and/or a link to the source of that information (unless it comes directly from you)."),h0.forEach(t),this.h()},h(){c(F,"name","hf:doc:metadata"),c(F,"content",JSON.stringify(_0)),c(L,"id","performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster"),c(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L,"href","#performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster"),c(j,"class","relative group"),c(Le,"id","quick-notes"),c(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Le,"href","#quick-notes"),c(J,"class","relative group"),c(Se,"id","faster-training"),c(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Se,"href","#faster-training"),c(K,"class","relative group"),c(Ue,"id","bigger-models"),c(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ue,"href","#bigger-models"),c(ee,"class","relative group"),c(Ge,"id","hardware"),c(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ge,"href","#hardware"),c(te,"class","relative group"),c(Ve,"id","multigpu-connectivity"),c(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ve,"href","#multigpu-connectivity"),c(se,"class","relative group"),c(Oe,"id","nvlink"),c(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oe,"href","#nvlink"),c(ae,"class","relative group"),c(ls,"href","https://en.wikipedia.org/wiki/NVLink"),c(ls,"rel","nofollow"),c(rs,"href","https://www.nvidia.com/content/dam/en-zz/Solutions/geforce/ampere/pdf/NVIDIA-ampere-GA102-GPU-Architecture-Whitepaper-V1.pdf"),c(rs,"rel","nofollow"),c(Sa,"align","right"),c(Ca,"align","right"),c(Ua,"align","right"),c(Fe,"id","software"),c(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fe,"href","#software"),c(le,"class","relative group"),c(Me,"id","anatomy-of-models-memory"),c(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Me,"href","#anatomy-of-models-memory"),c(re,"class","relative group"),c(qe,"id","model-weights"),c(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qe,"href","#model-weights"),c(ie,"class","relative group"),c(We,"id","optimizer-states"),c(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(We,"href","#optimizer-states"),c(oe,"class","relative group"),c(ms,"href","https://github.com/facebookresearch/bitsandbytes"),c(ms,"rel","nofollow"),c(Xe,"id","gradients"),c(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xe,"href","#gradients"),c(ne,"class","relative group"),c(Ye,"id","forward-activations"),c(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ye,"href","#forward-activations"),c(pe,"class","relative group"),c(Qe,"id","temporary-memory"),c(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qe,"href","#temporary-memory"),c(he,"class","relative group"),c(Ze,"id","functionalityspecific-memory"),c(Ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ze,"href","#functionalityspecific-memory"),c(fe,"class","relative group"),c(Je,"id","forward-vs-backward-execution-speed"),c(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Je,"href","#forward-vs-backward-execution-speed"),c(ce,"class","relative group"),c(et,"id","floating-data-types"),c(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(et,"href","#floating-data-types"),c(de,"class","relative group"),m0(Ka.src,k2="/docs/transformers/master/en/imgs/tf32-bf16-fp16-fp32.png")||c(Ka,"src",k2),c(Ka,"alt","data types"),c($s,"href","https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/"),c($s,"rel","nofollow"),c(st,"id","fp16"),c(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(st,"href","#fp16"),c(ue,"class","relative group"),c(rl,"align","right"),c(il,"align","right"),c(ol,"align","right"),c(nl,"align","right"),c(pl,"align","right"),c(hl,"align","right"),c(fl,"align","right"),c(cl,"align","right"),c(dl,"align","right"),c(ul,"align","right"),c(ml,"align","right"),c(vl,"align","right"),c(wl,"align","right"),c(_l,"align","right"),c(bl,"align","right"),c(yl,"align","right"),c(gl,"align","right"),c(El,"align","right"),c(Pl,"align","right"),c(kl,"align","right"),c(xs,"href","https://github.com/bigscience-workshop/Megatron-DeepSpeed"),c(xs,"rel","nofollow"),c(Is,"href","https://docs.fast.ai/callback.fp16.html#A-little-bit-of-theory"),c(Is,"rel","nofollow"),c(Ts,"href","https://spell.ml/blog/mixed-precision-training-with-pytorch-Xuk7YBEAACAASJam"),c(Ts,"rel","nofollow"),c(pt,"id","fp16-caching"),c(pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pt,"href","#fp16-caching"),c(me,"class","relative group"),c(Ls,"href","https://discuss.pytorch.org/t/autocast-and-torch-no-grad-unexpected-behaviour/93475/3"),c(Ls,"rel","nofollow"),c(ht,"id","fp16-inference"),c(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ht,"href","#fp16-inference"),c(ve,"class","relative group"),c(ct,"id","bf16"),c(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ct,"href","#bf16"),c(we,"class","relative group"),c(ut,"id","bf16-inference"),c(ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ut,"href","#bf16-inference"),c(_e,"class","relative group"),c(zl,"href","#fp16-inference"),c(wt,"id","tf32"),c(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wt,"href","#tf32"),c(be,"class","relative group"),c(Bs,"href","https://developer.nvidia.com/blog/accelerating-ai-training-with-tf32-tensor-cores/"),c(Bs,"rel","nofollow"),c(yt,"id","gradient-checkpointing"),c(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yt,"href","#gradient-checkpointing"),c(ye,"class","relative group"),c(Ms,"href","https://arxiv.org/abs/1604.06174"),c(Ms,"rel","nofollow"),c(Et,"id","batch-sizes"),c(Et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Et,"href","#batch-sizes"),c(ge,"class","relative group"),c(Ws,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#input-features"),c(Ws,"rel","nofollow"),c(Xs,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-fully-connected/index.html#batch-size"),c(Xs,"rel","nofollow"),c(Qs,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#requirements-tc"),c(Qs,"rel","nofollow"),c(Zs,"href","https://docs.nvidia.com/deeplearning/performance/dl-performance-matrix-multiplication/index.html#dim-quantization"),c(Zs,"rel","nofollow"),c(kt,"id","dp-vs-ddp"),c(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kt,"href","#dp-vs-ddp"),c(Ee,"class","relative group"),c(ea,"href","https://pytorch.org/docs/master/notes/ddp.html"),c(ea,"rel","nofollow"),c(la,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(la,"rel","nofollow"),c(ia,"href","https://pytorch.org/docs/master/distributed.html"),c(ia,"rel","nofollow"),c(oa,"href","https://www.telesens.co/2019/04/04/distributed-data-parallel-training-using-pytorch-on-aws/"),c(oa,"rel","nofollow"),c(lr,"align","left"),c(rr,"align","right"),c(ir,"align","left"),c(or,"align","right"),c(nr,"align","left"),c(pr,"align","right"),c(hr,"align","left"),c(fr,"align","right"),c(It,"id","dataloader"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#dataloader"),c(xe,"class","relative group"),c(Nt,"id","faster-optimizer"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#faster-optimizer"),c(Ie,"class","relative group"),c(ca,"href","https://github.com/huggingface/transformers/issues/9965"),c(ca,"rel","nofollow"),c(Lt,"id","contribute"),c(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lt,"href","#contribute"),c(Ne,"class","relative group")},m(e,n){s(document.head,F),p(e,ua,n),p(e,j,n),s(j,L),s(L,Lr),m(qt,Lr,null),s(j,Qc),s(j,Sr),s(Sr,Zc),p(e,Ln,n),p(e,ma,n),s(ma,Jc),p(e,Sn,n),p(e,J,n),s(J,Le),s(Le,Cr),m(Rt,Cr,null),s(J,Kc),s(J,Ur),s(Ur,ed),p(e,Cn,n),p(e,va,n),s(va,td),p(e,Un,n),p(e,K,n),s(K,Se),s(Se,Gr),m(Wt,Gr,null),s(K,sd),s(K,Vr),s(Vr,ad),p(e,Gn,n),p(e,wa,n),s(wa,ld),p(e,Vn,n),p(e,_a,n),s(_a,ba),s(ba,rd),s(ba,Xt),s(Xt,Or),s(Or,id),s(Xt,od),s(Xt,Hr),s(Hr,nd),p(e,On,n),p(e,ya,n),s(ya,pd),p(e,Hn,n),p(e,Ce,n),s(Ce,zr),s(zr,hd),s(Ce,fd),s(Ce,Br),s(Br,cd),p(e,zn,n),p(e,ee,n),s(ee,Ue),s(Ue,Fr),m(Yt,Fr,null),s(ee,dd),s(ee,Mr),s(Mr,ud),p(e,Bn,n),p(e,ga,n),s(ga,md),p(e,Fn,n),p(e,M,n),s(M,qr),s(qr,vd),s(M,wd),s(M,Rr),s(Rr,_d),s(M,bd),s(M,Wr),s(Wr,yd),p(e,Mn,n),p(e,Ea,n),s(Ea,gd),p(e,qn,n),p(e,y,n),s(y,Xr),s(Xr,Ed),s(y,Pd),s(y,Yr),s(Yr,kd),s(y,$d),s(y,Qr),s(Qr,jd),s(y,Dd),s(y,Zr),s(Zr,Ad),s(y,xd),s(y,Jr),s(Jr,Id),s(y,Td),s(y,Kr),s(Kr,Nd),s(y,Ld),s(y,ei),s(ei,Sd),s(y,Cd),s(y,ti),s(ti,Ud),s(y,Gd),s(y,si),s(si,Vd),p(e,Rn,n),p(e,te,n),s(te,Ge),s(Ge,ai),m(Qt,ai,null),s(te,Od),s(te,li),s(li,Hd),p(e,Wn,n),p(e,se,n),s(se,Ve),s(Ve,ri),m(Zt,ri,null),s(se,zd),s(se,ii),s(ii,Bd),p(e,Xn,n),p(e,Pa,n),s(Pa,Fd),p(e,Yn,n),p(e,ka,n),s(ka,Md),p(e,Qn,n),m(Jt,e,n),p(e,Zn,n),p(e,$a,n),s($a,qd),p(e,Jn,n),p(e,ja,n),s(ja,Rd),p(e,Kn,n),m(Kt,e,n),p(e,ep,n),p(e,Da,n),s(Da,Wd),p(e,tp,n),m(es,e,n),p(e,sp,n),p(e,Aa,n),s(Aa,Xd),p(e,ap,n),m(ts,e,n),p(e,lp,n),p(e,q,n),s(q,Yd),s(q,oi),s(oi,Qd),s(q,Zd),s(q,ni),s(ni,Jd),s(q,Kd),p(e,rp,n),p(e,xa,n),s(xa,eu),p(e,ip,n),p(e,Ia,n),s(Ia,tu),p(e,op,n),p(e,ae,n),s(ae,Oe),s(Oe,pi),m(ss,pi,null),s(ae,su),s(ae,hi),s(hi,au),p(e,np,n),p(e,as,n),s(as,ls),s(ls,lu),s(as,ru),p(e,pp,n),p(e,He,n),s(He,iu),s(He,rs),s(rs,ou),s(He,nu),p(e,hp,n),p(e,Ta,n),s(Ta,fi),s(fi,pu),p(e,fp,n),p(e,D,n),s(D,hu),s(D,ci),s(ci,fu),s(D,cu),s(D,di),s(di,du),s(D,uu),s(D,ui),s(ui,mu),s(D,vu),p(e,cp,n),p(e,Na,n),s(Na,wu),p(e,dp,n),p(e,La,n),s(La,_u),p(e,up,n),p(e,ze,n),s(ze,mi),s(mi,is),s(is,vi),s(vi,bu),s(is,yu),s(is,Sa),s(Sa,gu),s(ze,Eu),s(ze,os),s(os,ns),s(ns,wi),s(wi,Pu),s(ns,ku),s(ns,Ca),s(Ca,$u),s(os,ju),s(os,ps),s(ps,_i),s(_i,Du),s(ps,Au),s(ps,Ua),s(Ua,xu),p(e,mp,n),p(e,Ga,n),s(Ga,Iu),p(e,vp,n),p(e,Be,n),s(Be,Tu),s(Be,bi),s(bi,Nu),s(Be,Lu),p(e,wp,n),p(e,Va,n),s(Va,Su),p(e,_p,n),m(hs,e,n),p(e,bp,n),p(e,P,n),s(P,Cu),s(P,yi),s(yi,Uu),s(P,Gu),s(P,gi),s(gi,Vu),s(P,Ou),s(P,Ei),s(Ei,Hu),s(P,zu),s(P,Pi),s(Pi,Bu),s(P,Fu),s(P,ki),s(ki,Mu),p(e,yp,n),p(e,le,n),s(le,Fe),s(Fe,$i),m(fs,$i,null),s(le,qu),s(le,ji),s(ji,Ru),p(e,gp,n),p(e,re,n),s(re,Me),s(Me,Di),m(cs,Di,null),s(re,Wu),s(re,Ai),s(Ai,Xu),p(e,Ep,n),p(e,Oa,n),s(Oa,Yu),p(e,Pp,n),p(e,E,n),s(E,xi),s(xi,Qu),s(E,Zu),s(E,Ii),s(Ii,Ju),s(E,Ku),s(E,Ti),s(Ti,em),s(E,tm),s(E,Ni),s(Ni,sm),s(E,am),s(E,Li),s(Li,lm),s(E,rm),s(E,Si),s(Si,im),p(e,kp,n),p(e,Ha,n),s(Ha,om),p(e,$p,n),p(e,za,n),s(za,nm),p(e,jp,n),p(e,Ba,n),s(Ba,pm),p(e,Dp,n),p(e,ie,n),s(ie,qe),s(qe,Ci),m(ds,Ci,null),s(ie,hm),s(ie,Ui),s(Ui,fm),p(e,Ap,n),p(e,Re,n),s(Re,Gi),s(Gi,cm),s(Re,dm),s(Re,Vi),s(Vi,um),p(e,xp,n),p(e,oe,n),s(oe,We),s(We,Oi),m(us,Oi,null),s(oe,mm),s(oe,Hi),s(Hi,vm),p(e,Ip,n),p(e,R,n),s(R,zi),s(zi,wm),s(R,_m),s(R,Fa),s(Fa,bm),s(Fa,ms),s(ms,ym),s(R,gm),s(R,Bi),s(Bi,Em),p(e,Tp,n),p(e,ne,n),s(ne,Xe),s(Xe,Fi),m(vs,Fi,null),s(ne,Pm),s(ne,Mi),s(Mi,km),p(e,Np,n),p(e,Ma,n),s(Ma,qi),s(qi,$m),p(e,Lp,n),p(e,pe,n),s(pe,Ye),s(Ye,Ri),m(ws,Ri,null),s(pe,jm),s(pe,Wi),s(Wi,Dm),p(e,Sp,n),p(e,qa,n),s(qa,Xi),s(Xi,Am),p(e,Cp,n),p(e,Ra,n),s(Ra,xm),p(e,Up,n),p(e,he,n),s(he,Qe),s(Qe,Yi),m(_s,Yi,null),s(he,Im),s(he,Qi),s(Qi,Tm),p(e,Gp,n),p(e,Wa,n),s(Wa,Nm),p(e,Vp,n),p(e,fe,n),s(fe,Ze),s(Ze,Zi),m(bs,Zi,null),s(fe,Lm),s(fe,Ji),s(Ji,Sm),p(e,Op,n),p(e,Xa,n),s(Xa,Cm),p(e,Hp,n),p(e,ce,n),s(ce,Je),s(Je,Ki),m(ys,Ki,null),s(ce,Um),s(ce,Ke),s(Ke,eo),s(eo,Gm),s(Ke,Vm),s(Ke,to),s(to,Om),s(Ke,Hm),p(e,zp,n),p(e,Ya,n),s(Ya,zm),p(e,Bp,n),p(e,de,n),s(de,et),s(et,so),m(gs,so,null),s(de,Bm),s(de,ao),s(ao,Fm),p(e,Fp,n),p(e,Qa,n),s(Qa,Mm),p(e,Mp,n),p(e,A,n),s(A,Es),s(Es,qm),s(Es,lo),s(lo,Rm),s(Es,Wm),s(A,Xm),s(A,Ps),s(Ps,Ym),s(Ps,ro),s(ro,Qm),s(Ps,Zm),s(A,Jm),s(A,ks),s(ks,Km),s(ks,io),s(io,ev),s(ks,tv),s(A,sv),s(A,oo),s(oo,av),p(e,qp,n),p(e,Za,n),s(Za,lv),p(e,Rp,n),p(e,Ja,n),s(Ja,Ka),p(e,Wp,n),p(e,tt,n),s(tt,rv),s(tt,$s),s($s,iv),s(tt,ov),p(e,Xp,n),p(e,el,n),s(el,nv),p(e,Yp,n),p(e,ue,n),s(ue,st),s(st,no),m(js,no,null),s(ue,pv),s(ue,po),s(po,hv),p(e,Qp,n),p(e,tl,n),s(tl,fv),p(e,Zp,n),p(e,sl,n),s(sl,cv),p(e,Jp,n),p(e,x,n),s(x,ho),s(ho,dv),s(x,uv),s(x,fo),s(fo,mv),s(x,vv),s(x,Ds),s(Ds,wv),s(Ds,co),s(co,_v),s(Ds,bv),s(x,yv),s(x,uo),s(uo,gv),p(e,Kp,n),p(e,al,n),s(al,Ev),p(e,eh,n),p(e,at,n),s(at,Pv),s(at,mo),s(mo,kv),s(at,$v),p(e,th,n),p(e,ll,n),s(ll,jv),p(e,sh,n),m(As,e,n),p(e,ah,n),p(e,lt,n),s(lt,Dv),s(lt,vo),s(vo,Av),s(lt,xv),p(e,lh,n),p(e,rt,n),s(rt,wo),s(wo,S),s(S,rl),s(rl,Iv),s(S,Tv),s(S,il),s(il,Nv),s(S,Lv),s(S,ol),s(ol,Sv),s(S,Cv),s(S,nl),s(nl,Uv),s(rt,Gv),s(rt,C),s(C,U),s(U,pl),s(pl,Vv),s(U,Ov),s(U,hl),s(hl,Hv),s(U,zv),s(U,fl),s(fl,Bv),s(U,Fv),s(U,cl),s(cl,Mv),s(C,qv),s(C,G),s(G,dl),s(dl,Rv),s(G,Wv),s(G,ul),s(ul,Xv),s(G,Yv),s(G,ml),s(ml,Qv),s(G,Zv),s(G,vl),s(vl,Jv),s(C,Kv),s(C,V),s(V,wl),s(wl,e1),s(V,t1),s(V,_l),s(_l,s1),s(V,a1),s(V,bl),s(bl,l1),s(V,r1),s(V,yl),s(yl,i1),s(C,o1),s(C,O),s(O,gl),s(gl,n1),s(O,p1),s(O,El),s(El,h1),s(O,f1),s(O,Pl),s(Pl,c1),s(O,d1),s(O,kl),s(kl,u1),p(e,rh,n),p(e,it,n),s(it,m1),s(it,_o),s(_o,v1),s(it,w1),p(e,ih,n),p(e,$l,n),s($l,_1),p(e,oh,n),p(e,jl,n),s(jl,b1),p(e,nh,n),p(e,ot,n),s(ot,y1),s(ot,xs),s(xs,g1),s(ot,E1),p(e,ph,n),p(e,Dl,n),s(Dl,P1),p(e,hh,n),p(e,nt,n),s(nt,Al),s(Al,k1),s(Al,Is),s(Is,$1),s(nt,j1),s(nt,xl),s(xl,D1),s(xl,Ts),s(Ts,A1),p(e,fh,n),p(e,me,n),s(me,pt),s(pt,bo),m(Ns,bo,null),s(me,x1),s(me,yo),s(yo,I1),p(e,ch,n),p(e,W,n),s(W,T1),s(W,go),s(go,N1),s(W,L1),s(W,Ls),s(Ls,S1),s(W,C1),p(e,dh,n),p(e,Il,n),s(Il,U1),p(e,uh,n),p(e,ve,n),s(ve,ht),s(ht,Eo),m(Ss,Eo,null),s(ve,G1),s(ve,Po),s(Po,V1),p(e,mh,n),p(e,Tl,n),s(Tl,O1),p(e,vh,n),p(e,Nl,n),s(Nl,H1),p(e,wh,n),p(e,Ll,n),s(Ll,z1),p(e,_h,n),p(e,ft,n),s(ft,B1),s(ft,ko),s(ko,F1),s(ft,M1),p(e,bh,n),p(e,we,n),s(we,ct),s(ct,$o),m(Cs,$o,null),s(we,q1),s(we,jo),s(jo,R1),p(e,yh,n),p(e,X,n),s(X,W1),s(X,Do),s(Do,X1),s(X,Y1),s(X,Ao),s(Ao,Q1),s(X,Z1),p(e,gh,n),p(e,Sl,n),s(Sl,J1),p(e,Eh,n),p(e,Cl,n),s(Cl,K1),p(e,Ph,n),p(e,Ul,n),s(Ul,ew),p(e,kh,n),p(e,Gl,n),s(Gl,tw),p(e,$h,n),p(e,dt,n),s(dt,sw),s(dt,xo),s(xo,aw),s(dt,lw),p(e,jh,n),p(e,Vl,n),s(Vl,rw),p(e,Dh,n),m(Us,e,n),p(e,Ah,n),p(e,Gs,n),s(Gs,iw),s(Gs,Io),s(Io,ow),p(e,xh,n),p(e,Ol,n),s(Ol,nw),p(e,Ih,n),m(Vs,e,n),p(e,Th,n),p(e,Hl,n),s(Hl,pw),p(e,Nh,n),p(e,_e,n),s(_e,ut),s(ut,To),m(Os,To,null),s(_e,hw),s(_e,No),s(No,fw),p(e,Lh,n),p(e,mt,n),s(mt,cw),s(mt,zl),s(zl,dw),s(mt,uw),p(e,Sh,n),p(e,vt,n),s(vt,mw),s(vt,Lo),s(Lo,vw),s(vt,ww),p(e,Ch,n),p(e,be,n),s(be,wt),s(wt,So),m(Hs,So,null),s(be,_w),s(be,Co),s(Co,bw),p(e,Uh,n),p(e,Bl,n),s(Bl,yw),p(e,Gh,n),p(e,Fl,n),s(Fl,gw),p(e,Vh,n),m(zs,e,n),p(e,Oh,n),p(e,Ml,n),s(Ml,Ew),p(e,Hh,n),p(e,_t,n),s(_t,Pw),s(_t,Bs),s(Bs,kw),s(_t,$w),p(e,zh,n),p(e,ql,n),s(ql,jw),p(e,Bh,n),p(e,I,n),s(I,Dw),s(I,Uo),s(Uo,Aw),s(I,xw),s(I,Go),s(Go,Iw),s(I,Tw),s(I,Vo),s(Vo,Nw),s(I,Lw),p(e,Fh,n),p(e,Y,n),s(Y,Sw),s(Y,Oo),s(Oo,Cw),s(Y,Uw),s(Y,Ho),s(Ho,Gw),s(Y,Vw),p(e,Mh,n),p(e,bt,n),s(bt,Ow),s(bt,zo),s(zo,Hw),s(bt,zw),p(e,qh,n),p(e,ye,n),s(ye,yt),s(yt,Bo),m(Fs,Bo,null),s(ye,Bw),s(ye,Fo),s(Fo,Fw),p(e,Rh,n),p(e,Rl,n),s(Rl,Mw),p(e,Wh,n),p(e,T,n),s(T,qw),s(T,Ms),s(Ms,Rw),s(T,Ww),s(T,Mo),s(Mo,Xw),s(T,Yw),s(T,qo),s(qo,Qw),s(T,Zw),p(e,Xh,n),p(e,Wl,n),s(Wl,Jw),p(e,Yh,n),m(qs,e,n),p(e,Qh,n),p(e,gt,n),s(gt,Kw),s(gt,Ro),s(Ro,e_),s(gt,t_),p(e,Zh,n),p(e,ge,n),s(ge,Et),s(Et,Wo),m(Rs,Wo,null),s(ge,s_),s(ge,Xo),s(Xo,a_),p(e,Jh,n),p(e,Xl,n),s(Xl,l_),p(e,Kh,n),p(e,Q,n),s(Q,r_),s(Q,Ws),s(Ws,i_),s(Q,o_),s(Q,Xs),s(Xs,n_),s(Q,p_),p(e,ef,n),p(e,Ys,n),s(Ys,Qs),s(Qs,h_),s(Ys,f_),p(e,tf,n),p(e,Pt,n),s(Pt,c_),s(Pt,Zs),s(Zs,d_),s(Pt,u_),p(e,sf,n),p(e,Ee,n),s(Ee,kt),s(kt,Yo),m(Js,Yo,null),s(Ee,m_),s(Ee,Qo),s(Qo,v_),p(e,af,n),p(e,Pe,n),s(Pe,Zo),s(Zo,w_),s(Pe,__),s(Pe,Jo),s(Jo,b_),s(Pe,y_),p(e,lf,n),p(e,$t,n),s($t,Ko),s(Ko,g_),s($t,E_),s($t,en),s(en,P_),p(e,rf,n),p(e,Yl,n),s(Yl,k_),p(e,of,n),p(e,Ks,n),s(Ks,ea),s(ea,$_),s(Ks,j_),p(e,nf,n),p(e,jt,n),s(jt,tn),s(tn,D_),s(jt,A_),s(jt,Ql),s(Ql,x_),s(Ql,ta),s(ta,sn),s(sn,I_),s(ta,T_),s(ta,sa),s(sa,N_),s(sa,an),s(an,L_),s(sa,S_),p(e,pf,n),p(e,aa,n),s(aa,la),s(la,C_),s(aa,U_),p(e,hf,n),p(e,Zl,n),s(Zl,G_),p(e,ff,n),p(e,$,n),s($,ln),s(ln,V_),s($,O_),s($,rn),s(rn,H_),s($,z_),s($,ra),s(ra,B_),s(ra,on),s(on,F_),s(ra,M_),s($,q_),s($,Jl),s(Jl,R_),s(Jl,nn),s(nn,W_),s($,X_),s($,pn),s(pn,Y_),p(e,cf,n),p(e,Kl,n),s(Kl,Q_),p(e,df,n),p(e,Dt,n),s(Dt,Z_),s(Dt,ia),s(ia,J_),s(Dt,K_),p(e,uf,n),p(e,er,n),s(er,eb),p(e,mf,n),p(e,tr,n),s(tr,tb),p(e,vf,n),p(e,sr,n),s(sr,sb),p(e,wf,n),p(e,At,n),s(At,ab),s(At,oa),s(oa,lb),s(At,rb),p(e,_f,n),p(e,ar,n),s(ar,ib),p(e,bf,n),p(e,xt,n),s(xt,hn),s(hn,ke),s(ke,lr),s(lr,ob),s(ke,nb),s(ke,fn),s(fn,pb),s(ke,hb),s(ke,rr),s(rr,fb),s(xt,cb),s(xt,$e),s($e,je),s(je,ir),s(ir,db),s(je,ub),s(je,cn),s(cn,mb),s(je,vb),s(je,or),s(or,wb),s($e,_b),s($e,De),s(De,nr),s(nr,bb),s(De,yb),s(De,dn),s(dn,gb),s(De,Eb),s(De,pr),s(pr,Pb),s($e,kb),s($e,Ae),s(Ae,hr),s(hr,$b),s(Ae,jb),s(Ae,un),s(un,Db),s(Ae,Ab),s(Ae,fr),s(fr,xb),p(e,yf,n),p(e,cr,n),s(cr,Ib),p(e,gf,n),p(e,dr,n),s(dr,Tb),p(e,Ef,n),p(e,ur,n),s(ur,Nb),p(e,Pf,n),p(e,mr,n),s(mr,Lb),p(e,kf,n),p(e,na,n),s(na,mn),s(mn,Sb),s(na,Cb),p(e,$f,n),m(pa,e,n),p(e,jf,n),p(e,k,n),s(k,Ub),s(k,vn),s(vn,Gb),s(k,Vb),s(k,wn),s(wn,Ob),s(k,Hb),s(k,_n),s(_n,zb),s(k,Bb),s(k,bn),s(bn,Fb),s(k,Mb),s(k,yn),s(yn,qb),p(e,Df,n),p(e,xe,n),s(xe,It),s(It,gn),m(ha,gn,null),s(xe,Rb),s(xe,En),s(En,Wb),p(e,Af,n),p(e,vr,n),s(vr,Xb),p(e,xf,n),p(e,Tt,n),s(Tt,wr),s(wr,Pn),s(Pn,Yb),s(wr,Qb),s(Tt,Zb),s(Tt,_r),s(_r,kn),s(kn,Jb),s(_r,Kb),p(e,If,n),p(e,Ie,n),s(Ie,Nt),s(Nt,$n),m(fa,$n,null),s(Ie,e2),s(Ie,jn),s(jn,t2),p(e,Tf,n),p(e,Te,n),s(Te,s2),s(Te,Dn),s(Dn,a2),s(Te,l2),s(Te,ca),s(ca,r2),p(e,Nf,n),p(e,Ne,n),s(Ne,Lt),s(Lt,An),m(da,An,null),s(Ne,i2),s(Ne,xn),s(xn,o2),p(e,Lf,n),p(e,br,n),s(br,n2),p(e,Sf,n),p(e,yr,n),s(yr,p2),Cf=!0},p:v0,i(e){Cf||(v(qt.$$.fragment,e),v(Rt.$$.fragment,e),v(Wt.$$.fragment,e),v(Yt.$$.fragment,e),v(Qt.$$.fragment,e),v(Zt.$$.fragment,e),v(Jt.$$.fragment,e),v(Kt.$$.fragment,e),v(es.$$.fragment,e),v(ts.$$.fragment,e),v(ss.$$.fragment,e),v(hs.$$.fragment,e),v(fs.$$.fragment,e),v(cs.$$.fragment,e),v(ds.$$.fragment,e),v(us.$$.fragment,e),v(vs.$$.fragment,e),v(ws.$$.fragment,e),v(_s.$$.fragment,e),v(bs.$$.fragment,e),v(ys.$$.fragment,e),v(gs.$$.fragment,e),v(js.$$.fragment,e),v(As.$$.fragment,e),v(Ns.$$.fragment,e),v(Ss.$$.fragment,e),v(Cs.$$.fragment,e),v(Us.$$.fragment,e),v(Vs.$$.fragment,e),v(Os.$$.fragment,e),v(Hs.$$.fragment,e),v(zs.$$.fragment,e),v(Fs.$$.fragment,e),v(qs.$$.fragment,e),v(Rs.$$.fragment,e),v(Js.$$.fragment,e),v(pa.$$.fragment,e),v(ha.$$.fragment,e),v(fa.$$.fragment,e),v(da.$$.fragment,e),Cf=!0)},o(e){w(qt.$$.fragment,e),w(Rt.$$.fragment,e),w(Wt.$$.fragment,e),w(Yt.$$.fragment,e),w(Qt.$$.fragment,e),w(Zt.$$.fragment,e),w(Jt.$$.fragment,e),w(Kt.$$.fragment,e),w(es.$$.fragment,e),w(ts.$$.fragment,e),w(ss.$$.fragment,e),w(hs.$$.fragment,e),w(fs.$$.fragment,e),w(cs.$$.fragment,e),w(ds.$$.fragment,e),w(us.$$.fragment,e),w(vs.$$.fragment,e),w(ws.$$.fragment,e),w(_s.$$.fragment,e),w(bs.$$.fragment,e),w(ys.$$.fragment,e),w(gs.$$.fragment,e),w(js.$$.fragment,e),w(As.$$.fragment,e),w(Ns.$$.fragment,e),w(Ss.$$.fragment,e),w(Cs.$$.fragment,e),w(Us.$$.fragment,e),w(Vs.$$.fragment,e),w(Os.$$.fragment,e),w(Hs.$$.fragment,e),w(zs.$$.fragment,e),w(Fs.$$.fragment,e),w(qs.$$.fragment,e),w(Rs.$$.fragment,e),w(Js.$$.fragment,e),w(pa.$$.fragment,e),w(ha.$$.fragment,e),w(fa.$$.fragment,e),w(da.$$.fragment,e),Cf=!1},d(e){t(F),e&&t(ua),e&&t(j),_(qt),e&&t(Ln),e&&t(ma),e&&t(Sn),e&&t(J),_(Rt),e&&t(Cn),e&&t(va),e&&t(Un),e&&t(K),_(Wt),e&&t(Gn),e&&t(wa),e&&t(Vn),e&&t(_a),e&&t(On),e&&t(ya),e&&t(Hn),e&&t(Ce),e&&t(zn),e&&t(ee),_(Yt),e&&t(Bn),e&&t(ga),e&&t(Fn),e&&t(M),e&&t(Mn),e&&t(Ea),e&&t(qn),e&&t(y),e&&t(Rn),e&&t(te),_(Qt),e&&t(Wn),e&&t(se),_(Zt),e&&t(Xn),e&&t(Pa),e&&t(Yn),e&&t(ka),e&&t(Qn),_(Jt,e),e&&t(Zn),e&&t($a),e&&t(Jn),e&&t(ja),e&&t(Kn),_(Kt,e),e&&t(ep),e&&t(Da),e&&t(tp),_(es,e),e&&t(sp),e&&t(Aa),e&&t(ap),_(ts,e),e&&t(lp),e&&t(q),e&&t(rp),e&&t(xa),e&&t(ip),e&&t(Ia),e&&t(op),e&&t(ae),_(ss),e&&t(np),e&&t(as),e&&t(pp),e&&t(He),e&&t(hp),e&&t(Ta),e&&t(fp),e&&t(D),e&&t(cp),e&&t(Na),e&&t(dp),e&&t(La),e&&t(up),e&&t(ze),e&&t(mp),e&&t(Ga),e&&t(vp),e&&t(Be),e&&t(wp),e&&t(Va),e&&t(_p),_(hs,e),e&&t(bp),e&&t(P),e&&t(yp),e&&t(le),_(fs),e&&t(gp),e&&t(re),_(cs),e&&t(Ep),e&&t(Oa),e&&t(Pp),e&&t(E),e&&t(kp),e&&t(Ha),e&&t($p),e&&t(za),e&&t(jp),e&&t(Ba),e&&t(Dp),e&&t(ie),_(ds),e&&t(Ap),e&&t(Re),e&&t(xp),e&&t(oe),_(us),e&&t(Ip),e&&t(R),e&&t(Tp),e&&t(ne),_(vs),e&&t(Np),e&&t(Ma),e&&t(Lp),e&&t(pe),_(ws),e&&t(Sp),e&&t(qa),e&&t(Cp),e&&t(Ra),e&&t(Up),e&&t(he),_(_s),e&&t(Gp),e&&t(Wa),e&&t(Vp),e&&t(fe),_(bs),e&&t(Op),e&&t(Xa),e&&t(Hp),e&&t(ce),_(ys),e&&t(zp),e&&t(Ya),e&&t(Bp),e&&t(de),_(gs),e&&t(Fp),e&&t(Qa),e&&t(Mp),e&&t(A),e&&t(qp),e&&t(Za),e&&t(Rp),e&&t(Ja),e&&t(Wp),e&&t(tt),e&&t(Xp),e&&t(el),e&&t(Yp),e&&t(ue),_(js),e&&t(Qp),e&&t(tl),e&&t(Zp),e&&t(sl),e&&t(Jp),e&&t(x),e&&t(Kp),e&&t(al),e&&t(eh),e&&t(at),e&&t(th),e&&t(ll),e&&t(sh),_(As,e),e&&t(ah),e&&t(lt),e&&t(lh),e&&t(rt),e&&t(rh),e&&t(it),e&&t(ih),e&&t($l),e&&t(oh),e&&t(jl),e&&t(nh),e&&t(ot),e&&t(ph),e&&t(Dl),e&&t(hh),e&&t(nt),e&&t(fh),e&&t(me),_(Ns),e&&t(ch),e&&t(W),e&&t(dh),e&&t(Il),e&&t(uh),e&&t(ve),_(Ss),e&&t(mh),e&&t(Tl),e&&t(vh),e&&t(Nl),e&&t(wh),e&&t(Ll),e&&t(_h),e&&t(ft),e&&t(bh),e&&t(we),_(Cs),e&&t(yh),e&&t(X),e&&t(gh),e&&t(Sl),e&&t(Eh),e&&t(Cl),e&&t(Ph),e&&t(Ul),e&&t(kh),e&&t(Gl),e&&t($h),e&&t(dt),e&&t(jh),e&&t(Vl),e&&t(Dh),_(Us,e),e&&t(Ah),e&&t(Gs),e&&t(xh),e&&t(Ol),e&&t(Ih),_(Vs,e),e&&t(Th),e&&t(Hl),e&&t(Nh),e&&t(_e),_(Os),e&&t(Lh),e&&t(mt),e&&t(Sh),e&&t(vt),e&&t(Ch),e&&t(be),_(Hs),e&&t(Uh),e&&t(Bl),e&&t(Gh),e&&t(Fl),e&&t(Vh),_(zs,e),e&&t(Oh),e&&t(Ml),e&&t(Hh),e&&t(_t),e&&t(zh),e&&t(ql),e&&t(Bh),e&&t(I),e&&t(Fh),e&&t(Y),e&&t(Mh),e&&t(bt),e&&t(qh),e&&t(ye),_(Fs),e&&t(Rh),e&&t(Rl),e&&t(Wh),e&&t(T),e&&t(Xh),e&&t(Wl),e&&t(Yh),_(qs,e),e&&t(Qh),e&&t(gt),e&&t(Zh),e&&t(ge),_(Rs),e&&t(Jh),e&&t(Xl),e&&t(Kh),e&&t(Q),e&&t(ef),e&&t(Ys),e&&t(tf),e&&t(Pt),e&&t(sf),e&&t(Ee),_(Js),e&&t(af),e&&t(Pe),e&&t(lf),e&&t($t),e&&t(rf),e&&t(Yl),e&&t(of),e&&t(Ks),e&&t(nf),e&&t(jt),e&&t(pf),e&&t(aa),e&&t(hf),e&&t(Zl),e&&t(ff),e&&t($),e&&t(cf),e&&t(Kl),e&&t(df),e&&t(Dt),e&&t(uf),e&&t(er),e&&t(mf),e&&t(tr),e&&t(vf),e&&t(sr),e&&t(wf),e&&t(At),e&&t(_f),e&&t(ar),e&&t(bf),e&&t(xt),e&&t(yf),e&&t(cr),e&&t(gf),e&&t(dr),e&&t(Ef),e&&t(ur),e&&t(Pf),e&&t(mr),e&&t(kf),e&&t(na),e&&t($f),_(pa,e),e&&t(jf),e&&t(k),e&&t(Df),e&&t(xe),_(ha),e&&t(Af),e&&t(vr),e&&t(xf),e&&t(Tt),e&&t(If),e&&t(Ie),_(fa),e&&t(Tf),e&&t(Te),e&&t(Nf),e&&t(Ne),_(da),e&&t(Lf),e&&t(br),e&&t(Sf),e&&t(yr)}}}const _0={local:"performance-and-scalability-how-to-fit-a-bigger-model-and-train-it-faster",sections:[{local:"quick-notes",sections:[{local:"faster-training",title:"Faster Training"},{local:"bigger-models",title:"Bigger Models"}],title:"Quick notes"},{local:"hardware",sections:[{local:"multigpu-connectivity",title:"Multi-GPU Connectivity"},{local:"nvlink",title:"NVlink"}],title:"Hardware"},{local:"software",sections:[{local:"anatomy-of-models-memory",sections:[{local:"model-weights",title:"Model Weights"},{local:"optimizer-states",title:"Optimizer States"},{local:"gradients",title:"Gradients"},{local:"forward-activations",title:"Forward Activations"},{local:"temporary-memory",title:"Temporary Memory"},{local:"functionalityspecific-memory",title:"Functionality-specific memory"}],title:"Anatomy of Model's Memory"},{local:"forward-vs-backward-execution-speed",title:"`forward` vs `backward` Execution Speed"},{local:"floating-data-types",sections:[{local:"fp16",sections:[{local:"fp16-caching",title:"fp16 caching"},{local:"fp16-inference",title:"fp16 Inference"}],title:"fp16"},{local:"bf16",sections:[{local:"bf16-inference",title:"bf16 Inference"}],title:"bf16"},{local:"tf32",title:"tf32"}],title:"Floating Data Types"},{local:"gradient-checkpointing",title:"Gradient Checkpointing"},{local:"batch-sizes",title:"Batch sizes"},{local:"dp-vs-ddp",title:"DP vs DDP"},{local:"dataloader",title:"DataLoader"},{local:"faster-optimizer",title:"Faster optimizer"}],title:"Software"},{local:"contribute",title:"Contribute"}],title:"Performance and Scalability: How To Fit a Bigger Model and Train It Faster"};function b0(Yc,F,ua){let{fw:j}=F;return Yc.$$set=L=>{"fw"in L&&ua(0,j=L.fw)},[j]}class k0 extends f0{constructor(F){super();c0(this,F,b0,w0,d0,{fw:0})}}export{k0 as default,_0 as metadata};
