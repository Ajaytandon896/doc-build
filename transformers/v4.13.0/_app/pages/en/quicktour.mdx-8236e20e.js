import{S as kp,i as vp,s as $p,e as r,k as h,w as f,t as n,L as Tp,c as i,d as s,m,a as p,x as c,h as l,b as u,J as t,g as o,y as d,q as g,o as b,B as _}from"../../chunks/vendor-e859c359.js";import{T as Ir}from"../../chunks/Tip-edc75249.js";import{Y as yp}from"../../chunks/Youtube-ea771e89.js";import{I as ls}from"../../chunks/IconCopyLink-5fae3b20.js";import{C as lt}from"../../chunks/CodeBlock-ce4317c2.js";import{C as T}from"../../chunks/CodeBlockFw-cd1fa549.js";import"../../chunks/CopyButton-77addb3d.js";function Ep(H){let w,$;return{c(){w=r("p"),$=n(`All code examples presented in the documentation have a switch on the top left for Pytorch versus TensorFlow. If
not, the code is expected to work for both backends without any change needed.`)},l(j){w=i(j,"P",{});var y=p(w);$=l(y,`All code examples presented in the documentation have a switch on the top left for Pytorch versus TensorFlow. If
not, the code is expected to work for both backends without any change needed.`),y.forEach(s)},m(j,y){o(j,w,y),t(w,$)},d(j){j&&s(w)}}}function zp(H){let w,$,j,y,S;return{c(){w=r("p"),$=n("All \u{1F917} Transformers models (PyTorch or TensorFlow) return the activations of the model "),j=r("em"),y=n("before"),S=n(` the final activation
function (like SoftMax) since this final activation function is often fused with the loss.`)},l(v){w=i(v,"P",{});var E=p(w);$=l(E,"All \u{1F917} Transformers models (PyTorch or TensorFlow) return the activations of the model "),j=i(E,"EM",{});var D=p(j);y=l(D,"before"),D.forEach(s),S=l(E,` the final activation
function (like SoftMax) since this final activation function is often fused with the loss.`),E.forEach(s)},m(v,E){o(v,w,E),t(w,$),t(w,j),t(j,y),t(w,S)},d(v){v&&s(w)}}}function Ap(H){let w,$,j,y,S;return{c(){w=r("p"),$=n(`Pytorch model outputs are special dataclasses so that you can get autocompletion for their attributes in an IDE.
They also behave like a tuple or a dictionary (e.g., you can index with an integer, a slice or a string) in which
case the attributes not set (that have `),j=r("code"),y=n("None"),S=n(" values) are ignored.")},l(v){w=i(v,"P",{});var E=p(w);$=l(E,`Pytorch model outputs are special dataclasses so that you can get autocompletion for their attributes in an IDE.
They also behave like a tuple or a dictionary (e.g., you can index with an integer, a slice or a string) in which
case the attributes not set (that have `),j=i(E,"CODE",{});var D=p(j);y=l(D,"None"),D.forEach(s),S=l(E," values) are ignored."),E.forEach(s)},m(v,E){o(v,w,E),t(w,$),t(w,j),t(j,y),t(w,S)},d(v){v&&s(w)}}}function Fp(H){let w,$,j,y,S,v,E,D,Pn,Ot,os,Mn,Yt,rs,In,Ut,Z,Ht,G,X,ot,je,Nn,rt,Ln,Gt,ee,Wn,is,On,Yn,Rt,ye,Qt,ps,Un,Kt,k,it,Hn,Gn,pt,Rn,Qn,ht,Kn,Vn,mt,Jn,Zn,ke,Xn,ut,el,sl,tl,ft,al,nl,ct,ll,ol,dt,rl,Vt,se,il,hs,pl,hl,Jt,ms,ml,Zt,ve,Xt,$e,ea,us,ul,sa,Te,ta,fs,fl,aa,Ee,na,ze,cl,cs,dl,la,ds,gl,oa,B,bl,Ae,_l,wl,gs,jl,yl,ra,te,kl,Fe,vl,$l,ia,ae,Tl,bs,El,zl,pa,xe,ha,_s,Al,ma,F,Fl,ws,xl,ql,js,Sl,Cl,ys,Dl,Bl,ks,Pl,Ml,ua,qe,fa,P,Il,gt,Nl,Ll,bt,Wl,Ol,ca,Se,da,M,Yl,vs,Ul,Hl,$s,Gl,Rl,ga,Ts,ba,R,ne,_t,Ce,Ql,wt,Kl,_a,Es,Vl,wa,De,ja,le,Jl,jt,Zl,Xl,ya,Be,ka,Q,oe,yt,Pe,eo,kt,so,va,I,to,vt,ao,no,zs,lo,oo,$a,x,ro,$t,io,po,Tt,ho,mo,Et,uo,fo,zt,co,go,Ta,As,bo,Ea,Me,za,N,_o,Fs,wo,jo,xs,yo,ko,Aa,Ie,Fa,qs,vo,xa,Ne,qa,Ss,$o,Sa,Le,Ca,re,To,Cs,Eo,zo,Da,K,ie,At,We,Ao,Ft,Fo,Ba,pe,xo,xt,qo,So,Pa,Oe,Ma,he,Co,Ds,Do,Bo,Ia,Ye,Na,me,Po,qt,Mo,Io,La,ue,Wa,Bs,No,Oa,Ue,Ya,Ps,Lo,Ua,He,Ha,fe,Wo,St,Oo,Yo,Ga,Ge,Ra,z,Uo,Re,Ho,Go,Qe,Ro,Qo,Ms,Ko,Vo,Ct,Jo,Zo,Is,Xo,er,Qa,ce,Ka,Ns,sr,Va,Ke,Ja,de,tr,Dt,ar,nr,Za,Ls,lr,Xa,Ve,en,Ws,or,sn,Je,tn,Os,rr,an,Ze,nn,V,ge,Bt,Xe,ir,Pt,pr,ln,L,hr,Ys,mr,ur,Us,fr,cr,on,q,dr,Hs,gr,br,Gs,_r,wr,Rs,jr,yr,Qs,kr,vr,rn,es,pn,J,be,Mt,ss,$r,It,Tr,hn,_e,Er,Ks,zr,Ar,mn,W,Fr,Vs,xr,qr,Js,Sr,Cr,un,ts,fn,we,Dr,Nt,Br,Pr,cn,as,dn;return v=new ls({}),Z=new Ir({props:{$$slots:{default:[Ep]},$$scope:{ctx:H}}}),je=new ls({}),ye=new yp({props:{id:"tiZFewofSLM"}}),ve=new T({props:{pt:{code:"pip install torch",highlighted:"pip install torch"},tf:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}}),$e=new lt({props:{code:`from transformers import pipeline
classifier = pipeline('sentiment-analysis'),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>)`}}),Te=new lt({props:{code:"classifier('We are very happy to show you the \u{1F917} Transformers library.'),",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&#x27;We are very happy to show you the \u{1F917} Transformers library.&#x27;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998</span>}]`}}),Ee=new lt({props:{code:`results = classifier(["We are very happy to show you the \u{1F917} Transformers library.",
           "We hope you don't hate it."])
for result in results:
    print(f"label: {result['label']}, with score: {round(result['score'], 4)}"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>results = classifier([<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>,
<span class="hljs-meta">... </span>           <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;label: <span class="hljs-subst">{result[<span class="hljs-string">&#x27;label&#x27;</span>]}</span>, with score: <span class="hljs-subst">{<span class="hljs-built_in">round</span>(result[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}</span>&quot;</span>)
label: POSITIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.9998</span>
label: NEGATIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.5309</span>`}}),xe=new lt({props:{code:`classifier = pipeline('sentiment-analysis', model="nlptown/bert-base-multilingual-uncased-sentiment"),`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=<span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>)'}}),qe=new T({props:{pt:{code:"from transformers import AutoTokenizer, AutoModelForSequenceClassification",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification'},tf:{code:"from transformers import AutoTokenizer, TFAutoModelForSequenceClassification",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification'}}}),Se=new T({props:{pt:{code:`model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)
classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=model, tokenizer=tokenizer)`},tf:{code:`model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
# This model only exists in PyTorch, so we use the _from_pt_ flag to import that model in TensorFlow.
model = TFAutoModelForSequenceClassification.from_pretrained(model_name, from_pt=True)
tokenizer = AutoTokenizer.from_pretrained(model_name)
classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># This model only exists in PyTorch, so we use the _from_pt_ flag to import that model in TensorFlow.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name, from_pt=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>, model=model, tokenizer=tokenizer)`}}}),Ce=new ls({}),De=new yp({props:{id:"AhChOFRegn4"}}),Be=new T({props:{pt:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification
model_name = "distilbert-base-uncased-finetuned-sst-2-english"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`},tf:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification
model_name = "distilbert-base-uncased-finetuned-sst-2-english"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}}),Pe=new ls({}),Me=new lt({props:{code:'inputs = tokenizer("We are very happy to show you the \u{1F917} Transformers library."),',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)'}}),Ie=new lt({props:{code:"print(inputs),",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(inputs)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">2200</span>, <span class="hljs-number">3407</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">100</span>, <span class="hljs-number">19081</span>, <span class="hljs-number">3075</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),Ne=new T({props:{pt:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)`},tf:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>
<span class="hljs-meta">... </span>)`}}}),Le=new T({props:{pt:{code:`for key, value in pt_batch.items():
    print(f"{key}: {value.numpy().tolist()}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> pt_batch.items():
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{key}</span>: <span class="hljs-subst">{value.numpy().tolist()}</span>&quot;</span>)
input_ids: [[<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">2200</span>, <span class="hljs-number">3407</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">100</span>, <span class="hljs-number">19081</span>, <span class="hljs-number">3075</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">3246</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2123</span>, <span class="hljs-number">1005</span>, <span class="hljs-number">1056</span>, <span class="hljs-number">5223</span>, <span class="hljs-number">2009</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]
attention_mask: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]`},tf:{code:`for key, value in tf_batch.items():
    print(f"{key}: {value.numpy().tolist()}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> tf_batch.items():
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{key}</span>: <span class="hljs-subst">{value.numpy().tolist()}</span>&quot;</span>)
input_ids: [[<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">2200</span>, <span class="hljs-number">3407</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">100</span>, <span class="hljs-number">19081</span>, <span class="hljs-number">3075</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">3246</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2123</span>, <span class="hljs-number">1005</span>, <span class="hljs-number">1056</span>, <span class="hljs-number">5223</span>, <span class="hljs-number">2009</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]
attention_mask: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]`}}}),We=new ls({}),Oe=new T({props:{pt:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'},tf:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}}),Ye=new T({props:{pt:{code:"print(pt_outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_outputs)
SequenceClassifierOutput(loss=<span class="hljs-literal">None</span>, logits=tensor([[-<span class="hljs-number">4.0833</span>,  <span class="hljs-number">4.3364</span>],
        [ <span class="hljs-number">0.0818</span>, -<span class="hljs-number">0.0418</span>]], grad_fn=&lt;AddmmBackward&gt;), hidden_states=<span class="hljs-literal">None</span>, attentions=<span class="hljs-literal">None</span>)`},tf:{code:"print(tf_outputs)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf_outputs)
TFSequenceClassifierOutput(loss=<span class="hljs-literal">None</span>, logits=&lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=float32, numpy=
array([[-<span class="hljs-number">4.0833</span> ,  <span class="hljs-number">4.3364</span>  ],
       [ <span class="hljs-number">0.0818</span>, -<span class="hljs-number">0.0418</span>]], dtype=float32)&gt;, hidden_states=<span class="hljs-literal">None</span>, attentions=<span class="hljs-literal">None</span>)`}}}),ue=new Ir({props:{$$slots:{default:[zp]},$$scope:{ctx:H}}}),Ue=new T({props:{pt:{code:`from torch import nn
pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)`},tf:{code:`import tensorflow as tf
tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)`}}}),He=new T({props:{pt:{code:"print(pt_predictions)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">2.2043e-04</span>, <span class="hljs-number">9.9978e-01</span>],
        [<span class="hljs-number">5.3086e-01</span>, <span class="hljs-number">4.6914e-01</span>]], grad_fn=&lt;SoftmaxBackward&gt;)`},tf:{code:"print(tf_predictions)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf_predictions)
tf.Tensor(
[[<span class="hljs-number">2.2043e-04</span> <span class="hljs-number">9.9978e-01</span>]
 [<span class="hljs-number">5.3086e-01</span> <span class="hljs-number">4.6914e-01</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=float32)`}}}),Ge=new T({props:{pt:{code:`import torch
pt_outputs = pt_model(**pt_batch, labels = torch.tensor([1, 0]))
print(pt_outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch, labels = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_outputs)
SequenceClassifierOutput(loss=tensor(<span class="hljs-number">0.3167</span>, grad_fn=&lt;NllLossBackward&gt;), logits=tensor([[-<span class="hljs-number">4.0833</span>,  <span class="hljs-number">4.3364</span>],
        [ <span class="hljs-number">0.0818</span>, -<span class="hljs-number">0.0418</span>]], grad_fn=&lt;AddmmBackward&gt;), hidden_states=<span class="hljs-literal">None</span>, attentions=<span class="hljs-literal">None</span>)`},tf:{code:`import tensorflow as tf
tf_outputs = tf_model(tf_batch, labels = tf.constant([1, 0]))
print(tf_outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch, labels = tf.constant([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf_outputs)
TFSequenceClassifierOutput(loss=&lt;tf.Tensor: shape=(<span class="hljs-number">2</span>,), dtype=float32, numpy=array([<span class="hljs-number">2.2051e-04</span>, <span class="hljs-number">6.3326e-01</span>], dtype=float32)&gt;, logits=&lt;tf.Tensor: shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=float32, numpy=
array([[-<span class="hljs-number">4.0833</span> ,  <span class="hljs-number">4.3364</span>  ],
       [ <span class="hljs-number">0.0818</span>, -<span class="hljs-number">0.0418</span>]], dtype=float32)&gt;, hidden_states=<span class="hljs-literal">None</span>, attentions=<span class="hljs-literal">None</span>)`}}}),ce=new Ir({props:{$$slots:{default:[Ap]},$$scope:{ctx:H}}}),Ke=new T({props:{pt:{code:`pt_save_directory = './pt_save_pretrained'
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&#x27;./pt_save_pretrained&#x27;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`},tf:{code:`tf_save_directory = './tf_save_pretrained'
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&#x27;./tf_save_pretrained&#x27;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}}),Ve=new T({props:{pt:{code:"pip install tensorflow",highlighted:"pip install tensorflow"},tf:{code:"pip install torch",highlighted:"pip install torch"}}}),Je=new T({props:{pt:{code:`from transformers import TFAutoModel
tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModel.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModel.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`},tf:{code:`from transformers import AutoModel
tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModel.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModel.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}}),Ze=new T({props:{pt:{code:`pt_outputs = pt_model(**pt_batch, output_hidden_states=True, output_attentions=True)
all_hidden_states  = pt_outputs.hidden_states 
all_attentions = pt_outputs.attentions`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch, output_hidden_states=<span class="hljs-literal">True</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>all_hidden_states  = pt_outputs.hidden_states 
<span class="hljs-meta">&gt;&gt;&gt; </span>all_attentions = pt_outputs.attentions`},tf:{code:`tf_outputs = tf_model(tf_batch, output_hidden_states=True, output_attentions=True)
all_hidden_states =  tf_outputs.hidden_states
all_attentions = tf_outputs.attentions`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch, output_hidden_states=<span class="hljs-literal">True</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>all_hidden_states =  tf_outputs.hidden_states
<span class="hljs-meta">&gt;&gt;&gt; </span>all_attentions = tf_outputs.attentions`}}}),Xe=new ls({}),es=new T({props:{pt:{code:`from transformers import DistilBertTokenizer, DistilBertForSequenceClassification
model_name = "distilbert-base-uncased-finetuned-sst-2-english"
model = DistilBertForSequenceClassification.from_pretrained(model_name)
tokenizer = DistilBertTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer, DistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(model_name)`},tf:{code:`from transformers import DistilBertTokenizer, TFDistilBertForSequenceClassification
model_name = "distilbert-base-uncased-finetuned-sst-2-english"
model = TFDistilBertForSequenceClassification.from_pretrained(model_name)
tokenizer = DistilBertTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertTokenizer, TFDistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDistilBertForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(model_name)`}}}),ss=new ls({}),ts=new T({props:{pt:{code:`from transformers import DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification
config = DistilBertConfig(n_heads=8, dim=512, hidden_dim=4*512)
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')
model = DistilBertForSequenceClassification(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig(n_heads=<span class="hljs-number">8</span>, dim=<span class="hljs-number">512</span>, hidden_dim=<span class="hljs-number">4</span>*<span class="hljs-number">512</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification(config)`},tf:{code:`from transformers import DistilBertConfig, DistilBertTokenizer, TFDistilBertForSequenceClassification
config = DistilBertConfig(n_heads=8, dim=512, hidden_dim=4*512)
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')
model = TFDistilBertForSequenceClassification(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, TFDistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig(n_heads=<span class="hljs-number">8</span>, dim=<span class="hljs-number">512</span>, hidden_dim=<span class="hljs-number">4</span>*<span class="hljs-number">512</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDistilBertForSequenceClassification(config)`}}}),as=new T({props:{pt:{code:`from transformers import DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification
model_name = "distilbert-base-uncased"
model = DistilBertForSequenceClassification.from_pretrained(model_name, num_labels=10)
tokenizer = DistilBertTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(model_name, num_labels=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(model_name)`},tf:{code:`from transformers import DistilBertConfig, DistilBertTokenizer, TFDistilBertForSequenceClassification
model_name = "distilbert-base-uncased"
model = TFDistilBertForSequenceClassification.from_pretrained(model_name, num_labels=10)
tokenizer = DistilBertTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, TFDistilBertForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFDistilBertForSequenceClassification.from_pretrained(model_name, num_labels=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(model_name)`}}}),{c(){w=r("meta"),$=h(),j=r("h1"),y=r("a"),S=r("span"),f(v.$$.fragment),E=h(),D=r("span"),Pn=n("Quick tour"),Ot=h(),os=r("p"),Mn=n(`Let\u2019s have a quick look at the \u{1F917} Transformers library features. The library downloads pretrained models for Natural
Language Understanding (NLU) tasks, such as analyzing the sentiment of a text, and Natural Language Generation (NLG),
such as completing a prompt with new text or translating in another language.`),Yt=h(),rs=r("p"),In=n(`First we will see how to easily leverage the pipeline API to quickly use those pretrained models at inference. Then, we
will dig a little bit more and see how the library gives you access to those models and helps you preprocess your data.`),Ut=h(),f(Z.$$.fragment),Ht=h(),G=r("h2"),X=r("a"),ot=r("span"),f(je.$$.fragment),Nn=h(),rt=r("span"),Ln=n("Getting started on a task with a pipeline"),Gt=h(),ee=r("p"),Wn=n("The easiest way to use a pretrained model on a given task is to use "),is=r("a"),On=n("pipeline()"),Yn=n("."),Rt=h(),f(ye.$$.fragment),Qt=h(),ps=r("p"),Un=n("\u{1F917} Transformers provides the following tasks out of the box:"),Kt=h(),k=r("ul"),it=r("li"),Hn=n("Sentiment analysis: is a text positive or negative?"),Gn=h(),pt=r("li"),Rn=n("Text generation (in English): provide a prompt and the model will generate what follows."),Qn=h(),ht=r("li"),Kn=n("Name entity recognition (NER): in an input sentence, label each word with the entity it represents (person, place, etc.)"),Vn=h(),mt=r("li"),Jn=n("Question answering: provide the model with some context and a question, extract the answer from the context."),Zn=h(),ke=r("li"),Xn=n("Filling masked text: given a text with masked words (e.g., replaced by "),ut=r("code"),el=n("[MASK]"),sl=n("), fill the blanks."),tl=h(),ft=r("li"),al=n("Summarization: generate a summary of a long text."),nl=h(),ct=r("li"),ll=n("Translation: translate a text in another language."),ol=h(),dt=r("li"),rl=n("Feature extraction: return a tensor representation of the text."),Vt=h(),se=r("p"),il=n("Let\u2019s see how this work for sentiment analysis (the other tasks are all covered in the "),hs=r("a"),pl=n("task summary"),hl=n("):"),Jt=h(),ms=r("p"),ml=n("Install the following dependencies (if not already installed):"),Zt=h(),f(ve.$$.fragment),Xt=h(),f($e.$$.fragment),ea=h(),us=r("p"),ul=n(`When typing this command for the first time, a pretrained model and its tokenizer are downloaded and cached. We will
look at both later on, but as an introduction the tokenizer\u2019s job is to preprocess the text for the model, which is
then responsible for making predictions. The pipeline groups all of that together, and post-process the predictions to
make them readable. For instance:`),sa=h(),f(Te.$$.fragment),ta=h(),fs=r("p"),fl=n(`That\u2019s encouraging! You can use it on a list of sentences, which will be preprocessed then fed to the model, returning
a list of dictionaries like this one:`),aa=h(),f(Ee.$$.fragment),na=h(),ze=r("p"),cl=n("To use with a large dataset, look at "),cs=r("a"),dl=n("iterating over a pipeline"),la=h(),ds=r("p"),gl=n(`You can see the second sentence has been classified as negative (it needs to be positive or negative) but its score is
fairly neutral.`),oa=h(),B=r("p"),bl=n(`By default, the model downloaded for this pipeline is called \u201Cdistilbert-base-uncased-finetuned-sst-2-english\u201D. We can
look at its `),Ae=r("a"),_l=n("model page"),wl=n(` to get more
information about it. It uses the `),gs=r("a"),jl=n("DistilBERT architecture"),yl=n(` and has been fine-tuned on a
dataset called SST-2 for the sentiment analysis task.`),ra=h(),te=r("p"),kl=n(`Let\u2019s say we want to use another model; for instance, one that has been trained on French data. We can search through
the `),Fe=r("a"),vl=n("model hub"),$l=n(` that gathers models pretrained on a lot of data by research labs, but
also community models (usually fine-tuned versions of those big models on a specific dataset). Applying the tags
\u201CFrench\u201D and \u201Ctext-classification\u201D gives back a suggestion \u201Cnlptown/bert-base-multilingual-uncased-sentiment\u201D. Let\u2019s
see how we can use it.`),ia=h(),ae=r("p"),Tl=n("You can directly pass the name of the model to use to "),bs=r("a"),El=n("pipeline()"),zl=n(":"),pa=h(),f(xe.$$.fragment),ha=h(),_s=r("p"),Al=n(`This classifier can now deal with texts in English, French, but also Dutch, German, Italian and Spanish! You can also
replace that name by a local folder where you have saved a pretrained model (see below). You can also pass a model
object and its associated tokenizer.`),ma=h(),F=r("p"),Fl=n("We will need two classes for this. The first is "),ws=r("a"),xl=n("AutoTokenizer"),ql=n(", which we will use to download the tokenizer associated to the model we picked and instantiate it. The second is "),js=r("a"),Sl=n("AutoModelForSequenceClassification"),Cl=n(" (or "),ys=r("a"),Dl=n("TFAutoModelForSequenceClassification"),Bl=n(" if you are using TensorFlow), which we will use to download the model itself. Note that if we were using the library on an other task, the class of the model would change. The "),ks=r("a"),Pl=n("task summary"),Ml=n(" tutorial summarizes which class is used for which task."),ua=h(),f(qe.$$.fragment),fa=h(),P=r("p"),Il=n(`Now, to download the models and tokenizer we found previously, we just have to use the
`),gt=r("code"),Nl=n("from_pretrained()"),Ll=n(" method (feel free to replace "),bt=r("code"),Wl=n("model_name"),Ol=n(` by
any other model from the model hub):`),ca=h(),f(Se.$$.fragment),da=h(),M=r("p"),Yl=n(`If you don\u2019t find a model that has been pretrained on some data similar to yours, you will need to fine-tune a
pretrained model on your data. We provide `),vs=r("a"),Ul=n("example scripts"),Hl=n(` to do so. Once you\u2019re done, don\u2019t forget
to share your fine-tuned model on the hub with the community, using `),$s=r("a"),Gl=n("this tutorial"),Rl=n("."),ga=h(),Ts=r("a"),ba=h(),R=r("h2"),ne=r("a"),_t=r("span"),f(Ce.$$.fragment),Ql=h(),wt=r("span"),Kl=n("Under the hood: pretrained models"),_a=h(),Es=r("p"),Vl=n("Let\u2019s now see what happens beneath the hood when using those pipelines."),wa=h(),f(De.$$.fragment),ja=h(),le=r("p"),Jl=n("As we saw, the model and tokenizer are created using the "),jt=r("code"),Zl=n("from_pretrained"),Xl=n(" method:"),ya=h(),f(Be.$$.fragment),ka=h(),Q=r("h3"),oe=r("a"),yt=r("span"),f(Pe.$$.fragment),eo=h(),kt=r("span"),so=n("Using the tokenizer"),va=h(),I=r("p"),to=n(`We mentioned the tokenizer is responsible for the preprocessing of your texts. First, it will split a given text in
words (or part of words, punctuation symbols, etc.) usually called `),vt=r("em"),ao=n("tokens"),no=n(`. There are multiple rules that can govern
that process (you can learn more about them in the `),zs=r("a"),lo=n("tokenizer summary"),oo=n(`), which is why we need
to instantiate the tokenizer using the name of the model, to make sure we use the same rules as when the model was
pretrained.`),$a=h(),x=r("p"),ro=n("The second step is to convert those "),$t=r("em"),io=n("tokens"),po=n(` into numbers, to be able to build a tensor out of them and feed them to
the model. To do this, the tokenizer has a `),Tt=r("em"),ho=n("vocab"),mo=n(`, which is the part we download when we instantiate it with the
`),Et=r("code"),uo=n("from_pretrained"),fo=n(" method, since we need to use the same "),zt=r("em"),co=n("vocab"),go=n(" as when the model was pretrained."),Ta=h(),As=r("p"),bo=n("To apply these steps on a given text, we can just feed it to our tokenizer:"),Ea=h(),f(Me.$$.fragment),za=h(),N=r("p"),_o=n("This returns a dictionary string to list of ints. It contains the "),Fs=r("a"),wo=n("ids of the tokens"),jo=n(`, as
mentioned before, but also additional arguments that will be useful to the model. Here for instance, we also have an
`),xs=r("a"),yo=n("attention mask"),ko=n(" that the model will use to have a better understanding of the sequence:"),Aa=h(),f(Ie.$$.fragment),Fa=h(),qs=r("p"),vo=n(`You can pass a list of sentences directly to your tokenizer. If your goal is to send them through your model as a
batch, you probably want to pad them all to the same length, truncate them to the maximum length the model can accept
and get tensors back. You can specify all of that to the tokenizer:`),xa=h(),f(Ne.$$.fragment),qa=h(),Ss=r("p"),$o=n(`The padding is automatically applied on the side expected by the model (in this case, on the right), with the padding
token the model was pretrained with. The attention mask is also adapted to take the padding into account:`),Sa=h(),f(Le.$$.fragment),Ca=h(),re=r("p"),To=n("You can learn more about tokenizers "),Cs=r("a"),Eo=n("here"),zo=n("."),Da=h(),K=r("h3"),ie=r("a"),At=r("span"),f(We.$$.fragment),Ao=h(),Ft=r("span"),Fo=n("Using the model"),Ba=h(),pe=r("p"),xo=n(`Once your input has been preprocessed by the tokenizer, you can send it directly to the model. As we mentioned, it will
contain all the relevant information the model needs. If you\u2019re using a TensorFlow model, you can pass the dictionary
keys directly to tensors, for a PyTorch model, you need to unpack the dictionary by adding `),xt=r("code"),qo=n("**"),So=n("."),Pa=h(),f(Oe.$$.fragment),Ma=h(),he=r("p"),Co=n(`In \u{1F917} Transformers, all outputs are objects that contain the model\u2019s final activations along with other metadata. These
objects are described in greater detail `),Ds=r("a"),Do=n("here"),Bo=n(". For now, let\u2019s inspect the output ourselves:"),Ia=h(),f(Ye.$$.fragment),Na=h(),me=r("p"),Po=n("Notice how the output object has a "),qt=r("code"),Mo=n("logits"),Io=n(" attribute. You can use this to access the model\u2019s final activations."),La=h(),f(ue.$$.fragment),Wa=h(),Bs=r("p"),No=n("Let\u2019s apply the SoftMax activation to get predictions."),Oa=h(),f(Ue.$$.fragment),Ya=h(),Ps=r("p"),Lo=n("We can see we get the numbers from before:"),Ua=h(),f(He.$$.fragment),Ha=h(),fe=r("p"),Wo=n("If you provide the model with labels in addition to inputs, the model output object will also contain a "),St=r("code"),Oo=n("loss"),Yo=n(`
attribute:`),Ga=h(),f(Ge.$$.fragment),Ra=h(),z=r("p"),Uo=n("Models are standard "),Re=r("a"),Ho=n("torch.nn.Module"),Go=n(" or "),Qe=r("a"),Ro=n("tf.keras.Model"),Qo=n(" so you can use them in your usual training loop. \u{1F917} Transformers also provides a "),Ms=r("a"),Ko=n("Trainer"),Vo=n(" class to help with your training in PyTorch (taking care of things such as distributed training, mixed precision, etc.) whereas you can leverage the "),Ct=r("code"),Jo=n("fit()"),Zo=n(" method in Keras. See the "),Is=r("a"),Xo=n("training tutorial"),er=n(" for more details."),Qa=h(),f(ce.$$.fragment),Ka=h(),Ns=r("p"),sr=n("Once your model is fine-tuned, you can save it with its tokenizer in the following way:"),Va=h(),f(Ke.$$.fragment),Ja=h(),de=r("p"),tr=n("You can then load this model back using the "),Dt=r("code"),ar=n("AutoModel.from_pretrained()"),nr=n(` method by passing the
directory name instead of the model name. One cool feature of \u{1F917} Transformers is that you can easily switch between
PyTorch and TensorFlow: any model saved as before can be loaded back either in PyTorch or TensorFlow.`),Za=h(),Ls=r("p"),lr=n("If you would like to load your saved model in the other framework, first make sure it is installed:"),Xa=h(),f(Ve.$$.fragment),en=h(),Ws=r("p"),or=n("Then, use the corresponding Auto class to load it like this:"),sn=h(),f(Je.$$.fragment),tn=h(),Os=r("p"),rr=n("Lastly, you can also ask the model to return all hidden states and all attention weights if you need them:"),an=h(),f(Ze.$$.fragment),nn=h(),V=r("h3"),ge=r("a"),Bt=r("span"),f(Xe.$$.fragment),ir=h(),Pt=r("span"),pr=n("Accessing the code"),ln=h(),L=r("p"),hr=n("The "),Ys=r("a"),mr=n("AutoModel"),ur=n(" and "),Us=r("a"),fr=n("AutoTokenizer"),cr=n(` classes are just shortcuts that will automatically work with any
pretrained model. Behind the scenes, the library has one model class per combination of architecture plus class, so the
code is easy to access and tweak if you need to.`),on=h(),q=r("p"),dr=n(`In our previous example, the model was called \u201Cdistilbert-base-uncased-finetuned-sst-2-english\u201D, which means it\u2019s using
the `),Hs=r("a"),gr=n("DistilBERT"),br=n(" architecture. As "),Gs=r("a"),_r=n("AutoModelForSequenceClassification"),wr=n(" (or "),Rs=r("a"),jr=n("TFAutoModelForSequenceClassification"),yr=n(" if you are using TensorFlow) was used, the model automatically created is then a "),Qs=r("a"),kr=n("DistilBertForSequenceClassification"),vr=n(`. You can look at its documentation for all details relevant to that specific model, or browse the source code. This is how you would
directly instantiate model and tokenizer without the auto magic:`),rn=h(),f(es.$$.fragment),pn=h(),J=r("h3"),be=r("a"),Mt=r("span"),f(ss.$$.fragment),$r=h(),It=r("span"),Tr=n("Customizing the model"),hn=h(),_e=r("p"),Er=n(`If you want to change how the model itself is built, you can define a custom configuration class. Each architecture
comes with its own relevant configuration. For example, `),Ks=r("a"),zr=n("DistilBertConfig"),Ar=n(` allows you to specify
parameters such as the hidden dimension, dropout rate, etc for DistilBERT. If you do core modifications, like changing
the hidden size, you won\u2019t be able to use a pretrained model anymore and will need to train from scratch. You would
then instantiate the model directly from this configuration.`),mn=h(),W=r("p"),Fr=n(`Below, we load a predefined vocabulary for a tokenizer with the
`),Vs=r("a"),xr=n("from_pretrained()"),qr=n(` method. However, unlike the tokenizer, we wish to initialize
the model from scratch. Therefore, we instantiate the model from a configuration instead of using the
`),Js=r("a"),Sr=n("DistilBertForSequenceClassification.from_pretrained()"),Cr=n(" method."),un=h(),f(ts.$$.fragment),fn=h(),we=r("p"),Dr=n(`For something that only changes the head of the model (for instance, the number of labels), you can still use a
pretrained model for the body. For instance, let\u2019s define a classifier for 10 different labels using a pretrained body.
Instead of creating a new configuration with all the default values just to change the number of labels, we can instead
pass any argument a configuration would take to the `),Nt=r("code"),Br=n("from_pretrained"),Pr=n(` method and it will update the default
configuration appropriately:`),cn=h(),f(as.$$.fragment),this.h()},l(e){const a=Tp('[data-svelte="svelte-1phssyn"]',document.head);w=i(a,"META",{name:!0,content:!0}),a.forEach(s),$=m(e),j=i(e,"H1",{class:!0});var ns=p(j);y=i(ns,"A",{id:!0,class:!0,href:!0});var Lt=p(y);S=i(Lt,"SPAN",{});var Wt=p(S);c(v.$$.fragment,Wt),Wt.forEach(s),Lt.forEach(s),E=m(ns),D=i(ns,"SPAN",{});var Nr=p(D);Pn=l(Nr,"Quick tour"),Nr.forEach(s),ns.forEach(s),Ot=m(e),os=i(e,"P",{});var Lr=p(os);Mn=l(Lr,`Let\u2019s have a quick look at the \u{1F917} Transformers library features. The library downloads pretrained models for Natural
Language Understanding (NLU) tasks, such as analyzing the sentiment of a text, and Natural Language Generation (NLG),
such as completing a prompt with new text or translating in another language.`),Lr.forEach(s),Yt=m(e),rs=i(e,"P",{});var Wr=p(rs);In=l(Wr,`First we will see how to easily leverage the pipeline API to quickly use those pretrained models at inference. Then, we
will dig a little bit more and see how the library gives you access to those models and helps you preprocess your data.`),Wr.forEach(s),Ut=m(e),c(Z.$$.fragment,e),Ht=m(e),G=i(e,"H2",{class:!0});var gn=p(G);X=i(gn,"A",{id:!0,class:!0,href:!0});var Or=p(X);ot=i(Or,"SPAN",{});var Yr=p(ot);c(je.$$.fragment,Yr),Yr.forEach(s),Or.forEach(s),Nn=m(gn),rt=i(gn,"SPAN",{});var Ur=p(rt);Ln=l(Ur,"Getting started on a task with a pipeline"),Ur.forEach(s),gn.forEach(s),Gt=m(e),ee=i(e,"P",{});var bn=p(ee);Wn=l(bn,"The easiest way to use a pretrained model on a given task is to use "),is=i(bn,"A",{href:!0});var Hr=p(is);On=l(Hr,"pipeline()"),Hr.forEach(s),Yn=l(bn,"."),bn.forEach(s),Rt=m(e),c(ye.$$.fragment,e),Qt=m(e),ps=i(e,"P",{});var Gr=p(ps);Un=l(Gr,"\u{1F917} Transformers provides the following tasks out of the box:"),Gr.forEach(s),Kt=m(e),k=i(e,"UL",{});var A=p(k);it=i(A,"LI",{});var Rr=p(it);Hn=l(Rr,"Sentiment analysis: is a text positive or negative?"),Rr.forEach(s),Gn=m(A),pt=i(A,"LI",{});var Qr=p(pt);Rn=l(Qr,"Text generation (in English): provide a prompt and the model will generate what follows."),Qr.forEach(s),Qn=m(A),ht=i(A,"LI",{});var Kr=p(ht);Kn=l(Kr,"Name entity recognition (NER): in an input sentence, label each word with the entity it represents (person, place, etc.)"),Kr.forEach(s),Vn=m(A),mt=i(A,"LI",{});var Vr=p(mt);Jn=l(Vr,"Question answering: provide the model with some context and a question, extract the answer from the context."),Vr.forEach(s),Zn=m(A),ke=i(A,"LI",{});var _n=p(ke);Xn=l(_n,"Filling masked text: given a text with masked words (e.g., replaced by "),ut=i(_n,"CODE",{});var Jr=p(ut);el=l(Jr,"[MASK]"),Jr.forEach(s),sl=l(_n,"), fill the blanks."),_n.forEach(s),tl=m(A),ft=i(A,"LI",{});var Zr=p(ft);al=l(Zr,"Summarization: generate a summary of a long text."),Zr.forEach(s),nl=m(A),ct=i(A,"LI",{});var Xr=p(ct);ll=l(Xr,"Translation: translate a text in another language."),Xr.forEach(s),ol=m(A),dt=i(A,"LI",{});var ei=p(dt);rl=l(ei,"Feature extraction: return a tensor representation of the text."),ei.forEach(s),A.forEach(s),Vt=m(e),se=i(e,"P",{});var wn=p(se);il=l(wn,"Let\u2019s see how this work for sentiment analysis (the other tasks are all covered in the "),hs=i(wn,"A",{href:!0});var si=p(hs);pl=l(si,"task summary"),si.forEach(s),hl=l(wn,"):"),wn.forEach(s),Jt=m(e),ms=i(e,"P",{});var ti=p(ms);ml=l(ti,"Install the following dependencies (if not already installed):"),ti.forEach(s),Zt=m(e),c(ve.$$.fragment,e),Xt=m(e),c($e.$$.fragment,e),ea=m(e),us=i(e,"P",{});var ai=p(us);ul=l(ai,`When typing this command for the first time, a pretrained model and its tokenizer are downloaded and cached. We will
look at both later on, but as an introduction the tokenizer\u2019s job is to preprocess the text for the model, which is
then responsible for making predictions. The pipeline groups all of that together, and post-process the predictions to
make them readable. For instance:`),ai.forEach(s),sa=m(e),c(Te.$$.fragment,e),ta=m(e),fs=i(e,"P",{});var ni=p(fs);fl=l(ni,`That\u2019s encouraging! You can use it on a list of sentences, which will be preprocessed then fed to the model, returning
a list of dictionaries like this one:`),ni.forEach(s),aa=m(e),c(Ee.$$.fragment,e),na=m(e),ze=i(e,"P",{});var Mr=p(ze);cl=l(Mr,"To use with a large dataset, look at "),cs=i(Mr,"A",{href:!0});var li=p(cs);dl=l(li,"iterating over a pipeline"),li.forEach(s),Mr.forEach(s),la=m(e),ds=i(e,"P",{});var oi=p(ds);gl=l(oi,`You can see the second sentence has been classified as negative (it needs to be positive or negative) but its score is
fairly neutral.`),oi.forEach(s),oa=m(e),B=i(e,"P",{});var Zs=p(B);bl=l(Zs,`By default, the model downloaded for this pipeline is called \u201Cdistilbert-base-uncased-finetuned-sst-2-english\u201D. We can
look at its `),Ae=i(Zs,"A",{href:!0,rel:!0});var ri=p(Ae);_l=l(ri,"model page"),ri.forEach(s),wl=l(Zs,` to get more
information about it. It uses the `),gs=i(Zs,"A",{href:!0});var ii=p(gs);jl=l(ii,"DistilBERT architecture"),ii.forEach(s),yl=l(Zs,` and has been fine-tuned on a
dataset called SST-2 for the sentiment analysis task.`),Zs.forEach(s),ra=m(e),te=i(e,"P",{});var jn=p(te);kl=l(jn,`Let\u2019s say we want to use another model; for instance, one that has been trained on French data. We can search through
the `),Fe=i(jn,"A",{href:!0,rel:!0});var pi=p(Fe);vl=l(pi,"model hub"),pi.forEach(s),$l=l(jn,` that gathers models pretrained on a lot of data by research labs, but
also community models (usually fine-tuned versions of those big models on a specific dataset). Applying the tags
\u201CFrench\u201D and \u201Ctext-classification\u201D gives back a suggestion \u201Cnlptown/bert-base-multilingual-uncased-sentiment\u201D. Let\u2019s
see how we can use it.`),jn.forEach(s),ia=m(e),ae=i(e,"P",{});var yn=p(ae);Tl=l(yn,"You can directly pass the name of the model to use to "),bs=i(yn,"A",{href:!0});var hi=p(bs);El=l(hi,"pipeline()"),hi.forEach(s),zl=l(yn,":"),yn.forEach(s),pa=m(e),c(xe.$$.fragment,e),ha=m(e),_s=i(e,"P",{});var mi=p(_s);Al=l(mi,`This classifier can now deal with texts in English, French, but also Dutch, German, Italian and Spanish! You can also
replace that name by a local folder where you have saved a pretrained model (see below). You can also pass a model
object and its associated tokenizer.`),mi.forEach(s),ma=m(e),F=i(e,"P",{});var O=p(F);Fl=l(O,"We will need two classes for this. The first is "),ws=i(O,"A",{href:!0});var ui=p(ws);xl=l(ui,"AutoTokenizer"),ui.forEach(s),ql=l(O,", which we will use to download the tokenizer associated to the model we picked and instantiate it. The second is "),js=i(O,"A",{href:!0});var fi=p(js);Sl=l(fi,"AutoModelForSequenceClassification"),fi.forEach(s),Cl=l(O," (or "),ys=i(O,"A",{href:!0});var ci=p(ys);Dl=l(ci,"TFAutoModelForSequenceClassification"),ci.forEach(s),Bl=l(O," if you are using TensorFlow), which we will use to download the model itself. Note that if we were using the library on an other task, the class of the model would change. The "),ks=i(O,"A",{href:!0});var di=p(ks);Pl=l(di,"task summary"),di.forEach(s),Ml=l(O," tutorial summarizes which class is used for which task."),O.forEach(s),ua=m(e),c(qe.$$.fragment,e),fa=m(e),P=i(e,"P",{});var Xs=p(P);Il=l(Xs,`Now, to download the models and tokenizer we found previously, we just have to use the
`),gt=i(Xs,"CODE",{});var gi=p(gt);Nl=l(gi,"from_pretrained()"),gi.forEach(s),Ll=l(Xs," method (feel free to replace "),bt=i(Xs,"CODE",{});var bi=p(bt);Wl=l(bi,"model_name"),bi.forEach(s),Ol=l(Xs,` by
any other model from the model hub):`),Xs.forEach(s),ca=m(e),c(Se.$$.fragment,e),da=m(e),M=i(e,"P",{});var et=p(M);Yl=l(et,`If you don\u2019t find a model that has been pretrained on some data similar to yours, you will need to fine-tune a
pretrained model on your data. We provide `),vs=i(et,"A",{href:!0});var _i=p(vs);Ul=l(_i,"example scripts"),_i.forEach(s),Hl=l(et,` to do so. Once you\u2019re done, don\u2019t forget
to share your fine-tuned model on the hub with the community, using `),$s=i(et,"A",{href:!0});var wi=p($s);Gl=l(wi,"this tutorial"),wi.forEach(s),Rl=l(et,"."),et.forEach(s),ga=m(e),Ts=i(e,"A",{id:!0}),p(Ts).forEach(s),ba=m(e),R=i(e,"H2",{class:!0});var kn=p(R);ne=i(kn,"A",{id:!0,class:!0,href:!0});var ji=p(ne);_t=i(ji,"SPAN",{});var yi=p(_t);c(Ce.$$.fragment,yi),yi.forEach(s),ji.forEach(s),Ql=m(kn),wt=i(kn,"SPAN",{});var ki=p(wt);Kl=l(ki,"Under the hood: pretrained models"),ki.forEach(s),kn.forEach(s),_a=m(e),Es=i(e,"P",{});var vi=p(Es);Vl=l(vi,"Let\u2019s now see what happens beneath the hood when using those pipelines."),vi.forEach(s),wa=m(e),c(De.$$.fragment,e),ja=m(e),le=i(e,"P",{});var vn=p(le);Jl=l(vn,"As we saw, the model and tokenizer are created using the "),jt=i(vn,"CODE",{});var $i=p(jt);Zl=l($i,"from_pretrained"),$i.forEach(s),Xl=l(vn," method:"),vn.forEach(s),ya=m(e),c(Be.$$.fragment,e),ka=m(e),Q=i(e,"H3",{class:!0});var $n=p(Q);oe=i($n,"A",{id:!0,class:!0,href:!0});var Ti=p(oe);yt=i(Ti,"SPAN",{});var Ei=p(yt);c(Pe.$$.fragment,Ei),Ei.forEach(s),Ti.forEach(s),eo=m($n),kt=i($n,"SPAN",{});var zi=p(kt);so=l(zi,"Using the tokenizer"),zi.forEach(s),$n.forEach(s),va=m(e),I=i(e,"P",{});var st=p(I);to=l(st,`We mentioned the tokenizer is responsible for the preprocessing of your texts. First, it will split a given text in
words (or part of words, punctuation symbols, etc.) usually called `),vt=i(st,"EM",{});var Ai=p(vt);ao=l(Ai,"tokens"),Ai.forEach(s),no=l(st,`. There are multiple rules that can govern
that process (you can learn more about them in the `),zs=i(st,"A",{href:!0});var Fi=p(zs);lo=l(Fi,"tokenizer summary"),Fi.forEach(s),oo=l(st,`), which is why we need
to instantiate the tokenizer using the name of the model, to make sure we use the same rules as when the model was
pretrained.`),st.forEach(s),$a=m(e),x=i(e,"P",{});var Y=p(x);ro=l(Y,"The second step is to convert those "),$t=i(Y,"EM",{});var xi=p($t);io=l(xi,"tokens"),xi.forEach(s),po=l(Y,` into numbers, to be able to build a tensor out of them and feed them to
the model. To do this, the tokenizer has a `),Tt=i(Y,"EM",{});var qi=p(Tt);ho=l(qi,"vocab"),qi.forEach(s),mo=l(Y,`, which is the part we download when we instantiate it with the
`),Et=i(Y,"CODE",{});var Si=p(Et);uo=l(Si,"from_pretrained"),Si.forEach(s),fo=l(Y," method, since we need to use the same "),zt=i(Y,"EM",{});var Ci=p(zt);co=l(Ci,"vocab"),Ci.forEach(s),go=l(Y," as when the model was pretrained."),Y.forEach(s),Ta=m(e),As=i(e,"P",{});var Di=p(As);bo=l(Di,"To apply these steps on a given text, we can just feed it to our tokenizer:"),Di.forEach(s),Ea=m(e),c(Me.$$.fragment,e),za=m(e),N=i(e,"P",{});var tt=p(N);_o=l(tt,"This returns a dictionary string to list of ints. It contains the "),Fs=i(tt,"A",{href:!0});var Bi=p(Fs);wo=l(Bi,"ids of the tokens"),Bi.forEach(s),jo=l(tt,`, as
mentioned before, but also additional arguments that will be useful to the model. Here for instance, we also have an
`),xs=i(tt,"A",{href:!0});var Pi=p(xs);yo=l(Pi,"attention mask"),Pi.forEach(s),ko=l(tt," that the model will use to have a better understanding of the sequence:"),tt.forEach(s),Aa=m(e),c(Ie.$$.fragment,e),Fa=m(e),qs=i(e,"P",{});var Mi=p(qs);vo=l(Mi,`You can pass a list of sentences directly to your tokenizer. If your goal is to send them through your model as a
batch, you probably want to pad them all to the same length, truncate them to the maximum length the model can accept
and get tensors back. You can specify all of that to the tokenizer:`),Mi.forEach(s),xa=m(e),c(Ne.$$.fragment,e),qa=m(e),Ss=i(e,"P",{});var Ii=p(Ss);$o=l(Ii,`The padding is automatically applied on the side expected by the model (in this case, on the right), with the padding
token the model was pretrained with. The attention mask is also adapted to take the padding into account:`),Ii.forEach(s),Sa=m(e),c(Le.$$.fragment,e),Ca=m(e),re=i(e,"P",{});var Tn=p(re);To=l(Tn,"You can learn more about tokenizers "),Cs=i(Tn,"A",{href:!0});var Ni=p(Cs);Eo=l(Ni,"here"),Ni.forEach(s),zo=l(Tn,"."),Tn.forEach(s),Da=m(e),K=i(e,"H3",{class:!0});var En=p(K);ie=i(En,"A",{id:!0,class:!0,href:!0});var Li=p(ie);At=i(Li,"SPAN",{});var Wi=p(At);c(We.$$.fragment,Wi),Wi.forEach(s),Li.forEach(s),Ao=m(En),Ft=i(En,"SPAN",{});var Oi=p(Ft);Fo=l(Oi,"Using the model"),Oi.forEach(s),En.forEach(s),Ba=m(e),pe=i(e,"P",{});var zn=p(pe);xo=l(zn,`Once your input has been preprocessed by the tokenizer, you can send it directly to the model. As we mentioned, it will
contain all the relevant information the model needs. If you\u2019re using a TensorFlow model, you can pass the dictionary
keys directly to tensors, for a PyTorch model, you need to unpack the dictionary by adding `),xt=i(zn,"CODE",{});var Yi=p(xt);qo=l(Yi,"**"),Yi.forEach(s),So=l(zn,"."),zn.forEach(s),Pa=m(e),c(Oe.$$.fragment,e),Ma=m(e),he=i(e,"P",{});var An=p(he);Co=l(An,`In \u{1F917} Transformers, all outputs are objects that contain the model\u2019s final activations along with other metadata. These
objects are described in greater detail `),Ds=i(An,"A",{href:!0});var Ui=p(Ds);Do=l(Ui,"here"),Ui.forEach(s),Bo=l(An,". For now, let\u2019s inspect the output ourselves:"),An.forEach(s),Ia=m(e),c(Ye.$$.fragment,e),Na=m(e),me=i(e,"P",{});var Fn=p(me);Po=l(Fn,"Notice how the output object has a "),qt=i(Fn,"CODE",{});var Hi=p(qt);Mo=l(Hi,"logits"),Hi.forEach(s),Io=l(Fn," attribute. You can use this to access the model\u2019s final activations."),Fn.forEach(s),La=m(e),c(ue.$$.fragment,e),Wa=m(e),Bs=i(e,"P",{});var Gi=p(Bs);No=l(Gi,"Let\u2019s apply the SoftMax activation to get predictions."),Gi.forEach(s),Oa=m(e),c(Ue.$$.fragment,e),Ya=m(e),Ps=i(e,"P",{});var Ri=p(Ps);Lo=l(Ri,"We can see we get the numbers from before:"),Ri.forEach(s),Ua=m(e),c(He.$$.fragment,e),Ha=m(e),fe=i(e,"P",{});var xn=p(fe);Wo=l(xn,"If you provide the model with labels in addition to inputs, the model output object will also contain a "),St=i(xn,"CODE",{});var Qi=p(St);Oo=l(Qi,"loss"),Qi.forEach(s),Yo=l(xn,`
attribute:`),xn.forEach(s),Ga=m(e),c(Ge.$$.fragment,e),Ra=m(e),z=i(e,"P",{});var C=p(z);Uo=l(C,"Models are standard "),Re=i(C,"A",{href:!0,rel:!0});var Ki=p(Re);Ho=l(Ki,"torch.nn.Module"),Ki.forEach(s),Go=l(C," or "),Qe=i(C,"A",{href:!0,rel:!0});var Vi=p(Qe);Ro=l(Vi,"tf.keras.Model"),Vi.forEach(s),Qo=l(C," so you can use them in your usual training loop. \u{1F917} Transformers also provides a "),Ms=i(C,"A",{href:!0});var Ji=p(Ms);Ko=l(Ji,"Trainer"),Ji.forEach(s),Vo=l(C," class to help with your training in PyTorch (taking care of things such as distributed training, mixed precision, etc.) whereas you can leverage the "),Ct=i(C,"CODE",{});var Zi=p(Ct);Jo=l(Zi,"fit()"),Zi.forEach(s),Zo=l(C," method in Keras. See the "),Is=i(C,"A",{href:!0});var Xi=p(Is);Xo=l(Xi,"training tutorial"),Xi.forEach(s),er=l(C," for more details."),C.forEach(s),Qa=m(e),c(ce.$$.fragment,e),Ka=m(e),Ns=i(e,"P",{});var ep=p(Ns);sr=l(ep,"Once your model is fine-tuned, you can save it with its tokenizer in the following way:"),ep.forEach(s),Va=m(e),c(Ke.$$.fragment,e),Ja=m(e),de=i(e,"P",{});var qn=p(de);tr=l(qn,"You can then load this model back using the "),Dt=i(qn,"CODE",{});var sp=p(Dt);ar=l(sp,"AutoModel.from_pretrained()"),sp.forEach(s),nr=l(qn,` method by passing the
directory name instead of the model name. One cool feature of \u{1F917} Transformers is that you can easily switch between
PyTorch and TensorFlow: any model saved as before can be loaded back either in PyTorch or TensorFlow.`),qn.forEach(s),Za=m(e),Ls=i(e,"P",{});var tp=p(Ls);lr=l(tp,"If you would like to load your saved model in the other framework, first make sure it is installed:"),tp.forEach(s),Xa=m(e),c(Ve.$$.fragment,e),en=m(e),Ws=i(e,"P",{});var ap=p(Ws);or=l(ap,"Then, use the corresponding Auto class to load it like this:"),ap.forEach(s),sn=m(e),c(Je.$$.fragment,e),tn=m(e),Os=i(e,"P",{});var np=p(Os);rr=l(np,"Lastly, you can also ask the model to return all hidden states and all attention weights if you need them:"),np.forEach(s),an=m(e),c(Ze.$$.fragment,e),nn=m(e),V=i(e,"H3",{class:!0});var Sn=p(V);ge=i(Sn,"A",{id:!0,class:!0,href:!0});var lp=p(ge);Bt=i(lp,"SPAN",{});var op=p(Bt);c(Xe.$$.fragment,op),op.forEach(s),lp.forEach(s),ir=m(Sn),Pt=i(Sn,"SPAN",{});var rp=p(Pt);pr=l(rp,"Accessing the code"),rp.forEach(s),Sn.forEach(s),ln=m(e),L=i(e,"P",{});var at=p(L);hr=l(at,"The "),Ys=i(at,"A",{href:!0});var ip=p(Ys);mr=l(ip,"AutoModel"),ip.forEach(s),ur=l(at," and "),Us=i(at,"A",{href:!0});var pp=p(Us);fr=l(pp,"AutoTokenizer"),pp.forEach(s),cr=l(at,` classes are just shortcuts that will automatically work with any
pretrained model. Behind the scenes, the library has one model class per combination of architecture plus class, so the
code is easy to access and tweak if you need to.`),at.forEach(s),on=m(e),q=i(e,"P",{});var U=p(q);dr=l(U,`In our previous example, the model was called \u201Cdistilbert-base-uncased-finetuned-sst-2-english\u201D, which means it\u2019s using
the `),Hs=i(U,"A",{href:!0});var hp=p(Hs);gr=l(hp,"DistilBERT"),hp.forEach(s),br=l(U," architecture. As "),Gs=i(U,"A",{href:!0});var mp=p(Gs);_r=l(mp,"AutoModelForSequenceClassification"),mp.forEach(s),wr=l(U," (or "),Rs=i(U,"A",{href:!0});var up=p(Rs);jr=l(up,"TFAutoModelForSequenceClassification"),up.forEach(s),yr=l(U," if you are using TensorFlow) was used, the model automatically created is then a "),Qs=i(U,"A",{href:!0});var fp=p(Qs);kr=l(fp,"DistilBertForSequenceClassification"),fp.forEach(s),vr=l(U,`. You can look at its documentation for all details relevant to that specific model, or browse the source code. This is how you would
directly instantiate model and tokenizer without the auto magic:`),U.forEach(s),rn=m(e),c(es.$$.fragment,e),pn=m(e),J=i(e,"H3",{class:!0});var Cn=p(J);be=i(Cn,"A",{id:!0,class:!0,href:!0});var cp=p(be);Mt=i(cp,"SPAN",{});var dp=p(Mt);c(ss.$$.fragment,dp),dp.forEach(s),cp.forEach(s),$r=m(Cn),It=i(Cn,"SPAN",{});var gp=p(It);Tr=l(gp,"Customizing the model"),gp.forEach(s),Cn.forEach(s),hn=m(e),_e=i(e,"P",{});var Dn=p(_e);Er=l(Dn,`If you want to change how the model itself is built, you can define a custom configuration class. Each architecture
comes with its own relevant configuration. For example, `),Ks=i(Dn,"A",{href:!0});var bp=p(Ks);zr=l(bp,"DistilBertConfig"),bp.forEach(s),Ar=l(Dn,` allows you to specify
parameters such as the hidden dimension, dropout rate, etc for DistilBERT. If you do core modifications, like changing
the hidden size, you won\u2019t be able to use a pretrained model anymore and will need to train from scratch. You would
then instantiate the model directly from this configuration.`),Dn.forEach(s),mn=m(e),W=i(e,"P",{});var nt=p(W);Fr=l(nt,`Below, we load a predefined vocabulary for a tokenizer with the
`),Vs=i(nt,"A",{href:!0});var _p=p(Vs);xr=l(_p,"from_pretrained()"),_p.forEach(s),qr=l(nt,` method. However, unlike the tokenizer, we wish to initialize
the model from scratch. Therefore, we instantiate the model from a configuration instead of using the
`),Js=i(nt,"A",{href:!0});var wp=p(Js);Sr=l(wp,"DistilBertForSequenceClassification.from_pretrained()"),wp.forEach(s),Cr=l(nt," method."),nt.forEach(s),un=m(e),c(ts.$$.fragment,e),fn=m(e),we=i(e,"P",{});var Bn=p(we);Dr=l(Bn,`For something that only changes the head of the model (for instance, the number of labels), you can still use a
pretrained model for the body. For instance, let\u2019s define a classifier for 10 different labels using a pretrained body.
Instead of creating a new configuration with all the default values just to change the number of labels, we can instead
pass any argument a configuration would take to the `),Nt=i(Bn,"CODE",{});var jp=p(Nt);Br=l(jp,"from_pretrained"),jp.forEach(s),Pr=l(Bn,` method and it will update the default
configuration appropriately:`),Bn.forEach(s),cn=m(e),c(as.$$.fragment,e),this.h()},h(){u(w,"name","hf:doc:metadata"),u(w,"content",JSON.stringify(xp)),u(y,"id","quick-tour"),u(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(y,"href","#quick-tour"),u(j,"class","relative group"),u(X,"id","getting-started-on-a-task-with-a-pipeline"),u(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(X,"href","#getting-started-on-a-task-with-a-pipeline"),u(G,"class","relative group"),u(is,"href","/docs/transformers/master/en/main_classes/pipelines#transformers.pipeline"),u(hs,"href","task_summary"),u(cs,"href","main_classes/pipelines"),u(Ae,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),u(Ae,"rel","nofollow"),u(gs,"href","model_doc/distilbert"),u(Fe,"href","https://huggingface.co/models"),u(Fe,"rel","nofollow"),u(bs,"href","/docs/transformers/master/en/main_classes/pipelines#transformers.pipeline"),u(ws,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),u(js,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModelForSequenceClassification"),u(ys,"href","/docs/transformers/master/en/model_doc/auto#transformers.TFAutoModelForSequenceClassification"),u(ks,"href","task_summary"),u(vs,"href","examples"),u($s,"href","model_sharing"),u(Ts,"id","pretrained-model"),u(ne,"id","under-the-hood-pretrained-models"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#under-the-hood-pretrained-models"),u(R,"class","relative group"),u(oe,"id","using-the-tokenizer"),u(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(oe,"href","#using-the-tokenizer"),u(Q,"class","relative group"),u(zs,"href","tokenizer_summary"),u(Fs,"href","glossary#input-ids"),u(xs,"href","glossary#attention-mask"),u(Cs,"href","preprocessing"),u(ie,"id","using-the-model"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#using-the-model"),u(K,"class","relative group"),u(Ds,"href","main_classes/output"),u(Re,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),u(Re,"rel","nofollow"),u(Qe,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),u(Qe,"rel","nofollow"),u(Ms,"href","/docs/transformers/master/en/main_classes/trainer#transformers.Trainer"),u(Is,"href","training"),u(ge,"id","accessing-the-code"),u(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ge,"href","#accessing-the-code"),u(V,"class","relative group"),u(Ys,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),u(Us,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),u(Hs,"href","model_doc/distilbert"),u(Gs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModelForSequenceClassification"),u(Rs,"href","/docs/transformers/master/en/model_doc/auto#transformers.TFAutoModelForSequenceClassification"),u(Qs,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),u(be,"id","customizing-the-model"),u(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(be,"href","#customizing-the-model"),u(J,"class","relative group"),u(Ks,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),u(Vs,"href","/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained"),u(Js,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained")},m(e,a){t(document.head,w),o(e,$,a),o(e,j,a),t(j,y),t(y,S),d(v,S,null),t(j,E),t(j,D),t(D,Pn),o(e,Ot,a),o(e,os,a),t(os,Mn),o(e,Yt,a),o(e,rs,a),t(rs,In),o(e,Ut,a),d(Z,e,a),o(e,Ht,a),o(e,G,a),t(G,X),t(X,ot),d(je,ot,null),t(G,Nn),t(G,rt),t(rt,Ln),o(e,Gt,a),o(e,ee,a),t(ee,Wn),t(ee,is),t(is,On),t(ee,Yn),o(e,Rt,a),d(ye,e,a),o(e,Qt,a),o(e,ps,a),t(ps,Un),o(e,Kt,a),o(e,k,a),t(k,it),t(it,Hn),t(k,Gn),t(k,pt),t(pt,Rn),t(k,Qn),t(k,ht),t(ht,Kn),t(k,Vn),t(k,mt),t(mt,Jn),t(k,Zn),t(k,ke),t(ke,Xn),t(ke,ut),t(ut,el),t(ke,sl),t(k,tl),t(k,ft),t(ft,al),t(k,nl),t(k,ct),t(ct,ll),t(k,ol),t(k,dt),t(dt,rl),o(e,Vt,a),o(e,se,a),t(se,il),t(se,hs),t(hs,pl),t(se,hl),o(e,Jt,a),o(e,ms,a),t(ms,ml),o(e,Zt,a),d(ve,e,a),o(e,Xt,a),d($e,e,a),o(e,ea,a),o(e,us,a),t(us,ul),o(e,sa,a),d(Te,e,a),o(e,ta,a),o(e,fs,a),t(fs,fl),o(e,aa,a),d(Ee,e,a),o(e,na,a),o(e,ze,a),t(ze,cl),t(ze,cs),t(cs,dl),o(e,la,a),o(e,ds,a),t(ds,gl),o(e,oa,a),o(e,B,a),t(B,bl),t(B,Ae),t(Ae,_l),t(B,wl),t(B,gs),t(gs,jl),t(B,yl),o(e,ra,a),o(e,te,a),t(te,kl),t(te,Fe),t(Fe,vl),t(te,$l),o(e,ia,a),o(e,ae,a),t(ae,Tl),t(ae,bs),t(bs,El),t(ae,zl),o(e,pa,a),d(xe,e,a),o(e,ha,a),o(e,_s,a),t(_s,Al),o(e,ma,a),o(e,F,a),t(F,Fl),t(F,ws),t(ws,xl),t(F,ql),t(F,js),t(js,Sl),t(F,Cl),t(F,ys),t(ys,Dl),t(F,Bl),t(F,ks),t(ks,Pl),t(F,Ml),o(e,ua,a),d(qe,e,a),o(e,fa,a),o(e,P,a),t(P,Il),t(P,gt),t(gt,Nl),t(P,Ll),t(P,bt),t(bt,Wl),t(P,Ol),o(e,ca,a),d(Se,e,a),o(e,da,a),o(e,M,a),t(M,Yl),t(M,vs),t(vs,Ul),t(M,Hl),t(M,$s),t($s,Gl),t(M,Rl),o(e,ga,a),o(e,Ts,a),o(e,ba,a),o(e,R,a),t(R,ne),t(ne,_t),d(Ce,_t,null),t(R,Ql),t(R,wt),t(wt,Kl),o(e,_a,a),o(e,Es,a),t(Es,Vl),o(e,wa,a),d(De,e,a),o(e,ja,a),o(e,le,a),t(le,Jl),t(le,jt),t(jt,Zl),t(le,Xl),o(e,ya,a),d(Be,e,a),o(e,ka,a),o(e,Q,a),t(Q,oe),t(oe,yt),d(Pe,yt,null),t(Q,eo),t(Q,kt),t(kt,so),o(e,va,a),o(e,I,a),t(I,to),t(I,vt),t(vt,ao),t(I,no),t(I,zs),t(zs,lo),t(I,oo),o(e,$a,a),o(e,x,a),t(x,ro),t(x,$t),t($t,io),t(x,po),t(x,Tt),t(Tt,ho),t(x,mo),t(x,Et),t(Et,uo),t(x,fo),t(x,zt),t(zt,co),t(x,go),o(e,Ta,a),o(e,As,a),t(As,bo),o(e,Ea,a),d(Me,e,a),o(e,za,a),o(e,N,a),t(N,_o),t(N,Fs),t(Fs,wo),t(N,jo),t(N,xs),t(xs,yo),t(N,ko),o(e,Aa,a),d(Ie,e,a),o(e,Fa,a),o(e,qs,a),t(qs,vo),o(e,xa,a),d(Ne,e,a),o(e,qa,a),o(e,Ss,a),t(Ss,$o),o(e,Sa,a),d(Le,e,a),o(e,Ca,a),o(e,re,a),t(re,To),t(re,Cs),t(Cs,Eo),t(re,zo),o(e,Da,a),o(e,K,a),t(K,ie),t(ie,At),d(We,At,null),t(K,Ao),t(K,Ft),t(Ft,Fo),o(e,Ba,a),o(e,pe,a),t(pe,xo),t(pe,xt),t(xt,qo),t(pe,So),o(e,Pa,a),d(Oe,e,a),o(e,Ma,a),o(e,he,a),t(he,Co),t(he,Ds),t(Ds,Do),t(he,Bo),o(e,Ia,a),d(Ye,e,a),o(e,Na,a),o(e,me,a),t(me,Po),t(me,qt),t(qt,Mo),t(me,Io),o(e,La,a),d(ue,e,a),o(e,Wa,a),o(e,Bs,a),t(Bs,No),o(e,Oa,a),d(Ue,e,a),o(e,Ya,a),o(e,Ps,a),t(Ps,Lo),o(e,Ua,a),d(He,e,a),o(e,Ha,a),o(e,fe,a),t(fe,Wo),t(fe,St),t(St,Oo),t(fe,Yo),o(e,Ga,a),d(Ge,e,a),o(e,Ra,a),o(e,z,a),t(z,Uo),t(z,Re),t(Re,Ho),t(z,Go),t(z,Qe),t(Qe,Ro),t(z,Qo),t(z,Ms),t(Ms,Ko),t(z,Vo),t(z,Ct),t(Ct,Jo),t(z,Zo),t(z,Is),t(Is,Xo),t(z,er),o(e,Qa,a),d(ce,e,a),o(e,Ka,a),o(e,Ns,a),t(Ns,sr),o(e,Va,a),d(Ke,e,a),o(e,Ja,a),o(e,de,a),t(de,tr),t(de,Dt),t(Dt,ar),t(de,nr),o(e,Za,a),o(e,Ls,a),t(Ls,lr),o(e,Xa,a),d(Ve,e,a),o(e,en,a),o(e,Ws,a),t(Ws,or),o(e,sn,a),d(Je,e,a),o(e,tn,a),o(e,Os,a),t(Os,rr),o(e,an,a),d(Ze,e,a),o(e,nn,a),o(e,V,a),t(V,ge),t(ge,Bt),d(Xe,Bt,null),t(V,ir),t(V,Pt),t(Pt,pr),o(e,ln,a),o(e,L,a),t(L,hr),t(L,Ys),t(Ys,mr),t(L,ur),t(L,Us),t(Us,fr),t(L,cr),o(e,on,a),o(e,q,a),t(q,dr),t(q,Hs),t(Hs,gr),t(q,br),t(q,Gs),t(Gs,_r),t(q,wr),t(q,Rs),t(Rs,jr),t(q,yr),t(q,Qs),t(Qs,kr),t(q,vr),o(e,rn,a),d(es,e,a),o(e,pn,a),o(e,J,a),t(J,be),t(be,Mt),d(ss,Mt,null),t(J,$r),t(J,It),t(It,Tr),o(e,hn,a),o(e,_e,a),t(_e,Er),t(_e,Ks),t(Ks,zr),t(_e,Ar),o(e,mn,a),o(e,W,a),t(W,Fr),t(W,Vs),t(Vs,xr),t(W,qr),t(W,Js),t(Js,Sr),t(W,Cr),o(e,un,a),d(ts,e,a),o(e,fn,a),o(e,we,a),t(we,Dr),t(we,Nt),t(Nt,Br),t(we,Pr),o(e,cn,a),d(as,e,a),dn=!0},p(e,[a]){const ns={};a&2&&(ns.$$scope={dirty:a,ctx:e}),Z.$set(ns);const Lt={};a&2&&(Lt.$$scope={dirty:a,ctx:e}),ue.$set(Lt);const Wt={};a&2&&(Wt.$$scope={dirty:a,ctx:e}),ce.$set(Wt)},i(e){dn||(g(v.$$.fragment,e),g(Z.$$.fragment,e),g(je.$$.fragment,e),g(ye.$$.fragment,e),g(ve.$$.fragment,e),g($e.$$.fragment,e),g(Te.$$.fragment,e),g(Ee.$$.fragment,e),g(xe.$$.fragment,e),g(qe.$$.fragment,e),g(Se.$$.fragment,e),g(Ce.$$.fragment,e),g(De.$$.fragment,e),g(Be.$$.fragment,e),g(Pe.$$.fragment,e),g(Me.$$.fragment,e),g(Ie.$$.fragment,e),g(Ne.$$.fragment,e),g(Le.$$.fragment,e),g(We.$$.fragment,e),g(Oe.$$.fragment,e),g(Ye.$$.fragment,e),g(ue.$$.fragment,e),g(Ue.$$.fragment,e),g(He.$$.fragment,e),g(Ge.$$.fragment,e),g(ce.$$.fragment,e),g(Ke.$$.fragment,e),g(Ve.$$.fragment,e),g(Je.$$.fragment,e),g(Ze.$$.fragment,e),g(Xe.$$.fragment,e),g(es.$$.fragment,e),g(ss.$$.fragment,e),g(ts.$$.fragment,e),g(as.$$.fragment,e),dn=!0)},o(e){b(v.$$.fragment,e),b(Z.$$.fragment,e),b(je.$$.fragment,e),b(ye.$$.fragment,e),b(ve.$$.fragment,e),b($e.$$.fragment,e),b(Te.$$.fragment,e),b(Ee.$$.fragment,e),b(xe.$$.fragment,e),b(qe.$$.fragment,e),b(Se.$$.fragment,e),b(Ce.$$.fragment,e),b(De.$$.fragment,e),b(Be.$$.fragment,e),b(Pe.$$.fragment,e),b(Me.$$.fragment,e),b(Ie.$$.fragment,e),b(Ne.$$.fragment,e),b(Le.$$.fragment,e),b(We.$$.fragment,e),b(Oe.$$.fragment,e),b(Ye.$$.fragment,e),b(ue.$$.fragment,e),b(Ue.$$.fragment,e),b(He.$$.fragment,e),b(Ge.$$.fragment,e),b(ce.$$.fragment,e),b(Ke.$$.fragment,e),b(Ve.$$.fragment,e),b(Je.$$.fragment,e),b(Ze.$$.fragment,e),b(Xe.$$.fragment,e),b(es.$$.fragment,e),b(ss.$$.fragment,e),b(ts.$$.fragment,e),b(as.$$.fragment,e),dn=!1},d(e){s(w),e&&s($),e&&s(j),_(v),e&&s(Ot),e&&s(os),e&&s(Yt),e&&s(rs),e&&s(Ut),_(Z,e),e&&s(Ht),e&&s(G),_(je),e&&s(Gt),e&&s(ee),e&&s(Rt),_(ye,e),e&&s(Qt),e&&s(ps),e&&s(Kt),e&&s(k),e&&s(Vt),e&&s(se),e&&s(Jt),e&&s(ms),e&&s(Zt),_(ve,e),e&&s(Xt),_($e,e),e&&s(ea),e&&s(us),e&&s(sa),_(Te,e),e&&s(ta),e&&s(fs),e&&s(aa),_(Ee,e),e&&s(na),e&&s(ze),e&&s(la),e&&s(ds),e&&s(oa),e&&s(B),e&&s(ra),e&&s(te),e&&s(ia),e&&s(ae),e&&s(pa),_(xe,e),e&&s(ha),e&&s(_s),e&&s(ma),e&&s(F),e&&s(ua),_(qe,e),e&&s(fa),e&&s(P),e&&s(ca),_(Se,e),e&&s(da),e&&s(M),e&&s(ga),e&&s(Ts),e&&s(ba),e&&s(R),_(Ce),e&&s(_a),e&&s(Es),e&&s(wa),_(De,e),e&&s(ja),e&&s(le),e&&s(ya),_(Be,e),e&&s(ka),e&&s(Q),_(Pe),e&&s(va),e&&s(I),e&&s($a),e&&s(x),e&&s(Ta),e&&s(As),e&&s(Ea),_(Me,e),e&&s(za),e&&s(N),e&&s(Aa),_(Ie,e),e&&s(Fa),e&&s(qs),e&&s(xa),_(Ne,e),e&&s(qa),e&&s(Ss),e&&s(Sa),_(Le,e),e&&s(Ca),e&&s(re),e&&s(Da),e&&s(K),_(We),e&&s(Ba),e&&s(pe),e&&s(Pa),_(Oe,e),e&&s(Ma),e&&s(he),e&&s(Ia),_(Ye,e),e&&s(Na),e&&s(me),e&&s(La),_(ue,e),e&&s(Wa),e&&s(Bs),e&&s(Oa),_(Ue,e),e&&s(Ya),e&&s(Ps),e&&s(Ua),_(He,e),e&&s(Ha),e&&s(fe),e&&s(Ga),_(Ge,e),e&&s(Ra),e&&s(z),e&&s(Qa),_(ce,e),e&&s(Ka),e&&s(Ns),e&&s(Va),_(Ke,e),e&&s(Ja),e&&s(de),e&&s(Za),e&&s(Ls),e&&s(Xa),_(Ve,e),e&&s(en),e&&s(Ws),e&&s(sn),_(Je,e),e&&s(tn),e&&s(Os),e&&s(an),_(Ze,e),e&&s(nn),e&&s(V),_(Xe),e&&s(ln),e&&s(L),e&&s(on),e&&s(q),e&&s(rn),_(es,e),e&&s(pn),e&&s(J),_(ss),e&&s(hn),e&&s(_e),e&&s(mn),e&&s(W),e&&s(un),_(ts,e),e&&s(fn),e&&s(we),e&&s(cn),_(as,e)}}}const xp={local:"quick-tour",sections:[{local:"getting-started-on-a-task-with-a-pipeline",title:"Getting started on a task with a pipeline"},{local:"under-the-hood-pretrained-models",sections:[{local:"using-the-tokenizer",title:"Using the tokenizer"},{local:"using-the-model",title:"Using the model"},{local:"accessing-the-code",title:"Accessing the code"},{local:"customizing-the-model",title:"Customizing the model"}],title:"Under the hood: pretrained models"}],title:"Quick tour"};function qp(H,w,$){let{fw:j}=w;return H.$$set=y=>{"fw"in y&&$(0,j=y.fw)},[j]}class Np extends kp{constructor(w){super();vp(this,w,qp,Fp,$p,{fw:0})}}export{Np as default,xp as metadata};
