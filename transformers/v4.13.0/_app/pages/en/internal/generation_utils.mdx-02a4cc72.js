import{S as z_,i as F_,s as S_,e as r,k as l,w as f,t as a,L as O_,c as s,d as o,m as d,a as n,x as u,h as i,b as c,J as t,g as m,y as h,K as q_,q as g,o as _,B as v}from"../../../chunks/vendor-e859c359.js";import{D as b}from"../../../chunks/Docstring-ade913b3.js";import{C as D_}from"../../../chunks/CodeBlock-ce4317c2.js";import{I as $e}from"../../../chunks/IconCopyLink-5fae3b20.js";import"../../../chunks/CopyButton-77addb3d.js";function B_(wc){let ge,Wo,O,N,Ns,ft,Ec,Ws,Lc,Ba,T,Pc,Vo,Dc,zc,Mo,Fc,Sc,Co,Oc,qc,Go,Bc,Ic,Ho,Ac,Nc,jo,Wc,Vc,Ia,Ro,Mc,Aa,ke,Ce,Vs,ut,Cc,Ms,Gc,Na,q,Hc,Ko,jc,Rc,Uo,Kc,Uc,Yo,Yc,Xc,Wa,Xo,Jc,Va,ht,Ma,_e,Qc,Cs,Zc,el,Jo,tl,ol,Ca,B,Qo,Gs,rl,sl,nl,Zo,Hs,al,il,cl,er,js,ll,dl,pl,tr,Rs,ml,fl,Ga,y,ul,Ks,hl,gl,Us,_l,vl,Ys,bl,Tl,Xs,yl,$l,Js,kl,xl,Qs,wl,El,Ha,w,Ll,Zs,Pl,Dl,en,zl,Fl,tn,Sl,Ol,on,ql,Bl,ja,E,Il,rn,Al,Nl,sn,Wl,Vl,nn,Ml,Cl,an,Gl,Hl,Ra,gt,Ka,Ge,jl,cn,Rl,Kl,Ua,L,Ul,ln,Yl,Xl,dn,Jl,Ql,pn,Zl,ed,mn,td,od,Ya,or,rd,Xa,xe,He,fn,_t,sd,un,nd,Ja,we,vt,ad,hn,id,Qa,Ee,bt,cd,gn,ld,Za,W,Tt,dd,_n,pd,md,je,yt,fd,vn,ud,ei,Le,Re,bn,$t,hd,Tn,gd,ti,Pe,kt,_d,yn,vd,oi,De,xt,bd,$n,Td,ri,V,wt,yd,kn,$d,kd,Ke,Et,xd,xn,wd,si,ze,Ue,wn,Lt,Ed,En,Ld,ni,Fe,Pt,Pd,Ln,Dd,ai,Se,Dt,zd,Pn,Fd,ii,Oe,Ye,Dn,zt,Sd,zn,Od,ci,qe,Ft,qd,Fn,Bd,li,Be,St,Id,Sn,Ad,di,Ie,Xe,On,Ot,Nd,qn,Wd,pi,Je,Vd,rr,Md,Cd,mi,M,qt,Gd,Bn,Hd,jd,Qe,Bt,Rd,In,Kd,fi,C,It,Ud,$,Yd,sr,Xd,Jd,nr,Qd,Zd,An,ep,tp,Nn,Wn,op,rp,ar,sp,np,ir,ap,ip,cp,cr,At,ui,G,Nt,lp,Vn,dp,pp,Ze,Wt,mp,Mn,fp,hi,H,Vt,up,lr,dr,hp,gp,_p,Cn,gi,j,Mt,vp,pr,mr,bp,Tp,yp,Gn,_i,R,Ct,$p,fr,ur,kp,xp,wp,Hn,vi,K,Gt,Ep,hr,gr,Lp,Pp,Dp,jn,bi,U,Ht,zp,_r,vr,Fp,Sp,Op,Rn,Ti,Y,jt,qp,et,br,Bp,Ip,Rt,Ap,Np,Wp,Kn,yi,X,Kt,Vp,Tr,yr,Mp,Cp,Gp,Un,$i,J,Ut,Hp,tt,$r,jp,Rp,Yt,Kp,Up,Yp,Yn,ki,Q,Xt,Xp,ve,kr,Jp,Qp,xr,Zp,em,Jt,tm,om,rm,Xn,xi,Z,Qt,sm,wr,Er,nm,am,im,Jn,wi,ee,Zt,cm,ot,Lr,lm,dm,Qn,pm,mm,fm,Zn,Ei,te,eo,um,I,Pr,hm,gm,ea,_m,vm,ta,bm,Tm,oa,ym,$m,km,ra,Li,oe,to,xm,sa,wm,Em,rt,oo,Lm,na,Pm,Pi,re,ro,Dm,k,zm,Dr,Fm,Sm,zr,Om,qm,aa,Bm,Im,ia,ca,Am,Nm,Fr,Wm,Vm,Sr,Mm,Cm,Gm,Or,so,Di,se,no,Hm,la,jm,Rm,st,ao,Km,da,Um,zi,ne,io,Ym,qr,Br,Xm,Jm,Qm,pa,Fi,ae,co,Zm,Ir,Ar,ef,tf,of,ma,Si,ie,lo,rf,Nr,Wr,sf,nf,af,fa,Oi,ce,po,cf,Vr,Mr,lf,df,pf,ua,qi,le,mo,mf,nt,Cr,ff,uf,ha,hf,gf,_f,ga,Bi,de,fo,vf,Gr,Hr,bf,Tf,yf,_a,Ii,Ae,at,va,uo,$f,ba,kf,Ai,it,xf,jr,wf,Ef,Ni,pe,ho,Lf,Ta,Pf,Df,Rr,go,Wi,_o,Kr,vo,Vi,me,bo,zf,To,Ff,ya,Sf,Of,qf,Ur,yo,Mi,fe,$o,Bf,ko,If,$a,Af,Nf,Wf,Yr,xo,Ci,Ne,ct,ka,wo,Vf,xa,Mf,Gi,S,Eo,Cf,We,Gf,Xr,Hf,jf,Jr,Rf,Kf,Uf,Qr,Lo,Yf,Zr,Po,Hi,x,Do,Xf,es,ts,Jf,Qf,Zf,zo,eu,Fo,tu,ou,ru,os,su,So,nu,au,wa,iu,Ea,ji,Ve,lt,La,Oo,cu,Pa,lu,Ri,ue,qo,du,Da,pu,mu,rs,fu,Bo,uu,Ki,he,Io,hu,za,gu,_u,ss,vu,Ao,bu,Ui;return ft=new $e({}),ut=new $e({}),ht=new D_({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True),`,highlighted:`<span class="hljs-keyword">from</span> transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&#x27;gpt2&#x27;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&#x27;gpt2&#x27;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, <span class="hljs-attribute">return_tensors</span>=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, <span class="hljs-attribute">return_dict_in_generate</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">output_scores</span>=<span class="hljs-literal">True</span>)`}}),gt=new D_({props:{code:"generation_output[:2],",highlighted:'<span class="hljs-attribute">generation_output</span>[:<span class="hljs-number">2</span>]'}}),_t=new $e({}),vt=new b({props:{name:"class transformers.generation\\_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L56",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code>
with each tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),bt=new b({props:{name:"class transformers.generation\\_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L84",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor
of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer)
of shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),Tt=new b({props:{name:"class transformers.generation\\_flax\\_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_utils.py#L45",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),yt=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/flax/struct.py#L120"}}),$t=new $e({}),kt=new b({props:{name:"class transformers.generation\\_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L126",parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code>
with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),xt=new b({props:{name:"class transformers.generation\\_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L155",parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor
of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer)
of shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),wt=new b({props:{name:"class transformers.generation\\_flax\\_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_utils.py#L59",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),Et=new b({props:{name:"replace",anchor:"None",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/flax/struct.py#L120"}}),Lt=new $e({}),Pt=new b({props:{name:"class transformers.generation\\_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L198",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed beam scores for each vocabulary token at each generation step. Beam scores consisting of log
softmax scores for each vocabulary token and sum of log softmax of previously generated tokens in this beam
. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of
shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),Dt=new b({props:{name:"class transformers.generation\\_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L231",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed beam scores for each vocabulary token at each generation step. Beam scores consisting of log
softmax scores for each vocabulary token and sum of log softmax of previously generated tokens in this beam
. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer)
of shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),zt=new $e({}),Ft=new b({props:{name:"class transformers.generation\\_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L279",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed beam scores for each vocabulary token at each generation step. Beam scores consisting of log
softmax scores for each vocabulary token and sum of log softmax of previously generated tokens in this beam
. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of
shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),St=new b({props:{name:"class transformers.generation\\_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L311",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or
shorter if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed beam scores for each vocabulary token at each generation step. Beam scores consisting of log
softmax scores for each vocabulary token and sum of log softmax of previously generated tokens in this beam
. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer)
of shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),Ot=new $e({}),qt=new b({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L53"}}),Bt=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L56",parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),It=new b({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L75"}}),At=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L83",parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Nt=new b({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L64"}}),Wt=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L67",parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Vt=new b({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L99",parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Mt=new b({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L127",parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Ct=new b({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L147",parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this paper</a> for more details.`,name:"repetition_penalty"}]}}),Gt=new b({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L173",parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are
kept for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Ht=new b({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L216",parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),jt=new b({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L280",parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),Kt=new b({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L347",parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Ut=new b({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L475"}}),Xt=new b({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L502",parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for
more details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of
beams. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Qt=new b({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L562",parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Zt=new b({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L583",parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),eo=new b({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_logits_process.py#L608"}}),to=new b({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L52"}}),oo=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L55",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ro=new b({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L74"}}),so=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L82",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),no=new b({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L63"}}),ao=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L66",parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),io=new b({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L98",parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),co=new b({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L118",parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are
kept for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),lo=new b({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L160",parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),po=new b({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L196",parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),mo=new b({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L220",parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),fo=new b({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_flax_logits_process.py#L248",parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),uo=new $e({}),ho=new b({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L34"}}),go=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L37",parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),vo=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L112",parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),bo=new b({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L42",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}]}}),yo=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L55",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),$o=new b({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L89",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}]}}),xo=new b({props:{name:"\\_\\_call\\_\\_",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_stopping_criteria.py#L106",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),wo=new $e({}),Eo=new b({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L88"}}),Lo=new b({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L94",parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated
scores of all non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens
to be added to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Po=new b({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L106",parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a> for
details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>The generated
sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all
batches finished early due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),Do=new b({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_beam_search.py#L120",parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of
<code>BeamSearchScorer</code> will be allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of
beams. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Oo=new $e({}),qo=new b({props:{name:"transformers.top\\_k\\_top\\_p\\_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_utils.py#L2569",parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),Io=new b({props:{name:"transformers.tf\\_top\\_k\\_top\\_p\\_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/generation_tf_utils.py#L1543",parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),{c(){ge=r("meta"),Wo=l(),O=r("h1"),N=r("a"),Ns=r("span"),f(ft.$$.fragment),Ec=l(),Ws=r("span"),Lc=a("Utilities for Generation"),Ba=l(),T=r("p"),Pc=a("This page lists all the utility functions used by "),Vo=r("a"),Dc=a("generate()"),zc=a(`,
`),Mo=r("a"),Fc=a("greedy_search()"),Sc=a(`,
`),Co=r("a"),Oc=a("sample()"),qc=a(`,
`),Go=r("a"),Bc=a("beam_search()"),Ic=a(`,
`),Ho=r("a"),Ac=a("beam_sample()"),Nc=a(`, and
`),jo=r("a"),Wc=a("group_beam_search()"),Vc=a("."),Ia=l(),Ro=r("p"),Mc=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Aa=l(),ke=r("h2"),Ce=r("a"),Vs=r("span"),f(ut.$$.fragment),Cc=l(),Ms=r("span"),Gc=a("Generate Outputs"),Na=l(),q=r("p"),Hc=a("The output of "),Ko=r("a"),jc=a("generate()"),Rc=a(` is an instance of a subclass of
`),Uo=r("a"),Kc=a("ModelOutput"),Uc=a(`. This output is a data structure containing all the information returned
by `),Yo=r("a"),Yc=a("generate()"),Xc=a(", but that can also be used as tuple or dictionary."),Wa=l(),Xo=r("p"),Jc=a("Here\u2019s an example:"),Va=l(),f(ht.$$.fragment),Ma=l(),_e=r("p"),Qc=a("The "),Cs=r("code"),Zc=a("generation_output"),el=a(" object is a "),Jo=r("a"),tl=a("GreedySearchDecoderOnlyOutput"),ol=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ca=l(),B=r("ul"),Qo=r("li"),Gs=r("code"),rl=a("sequences"),sl=a(": the generated sequences of tokens"),nl=l(),Zo=r("li"),Hs=r("code"),al=a("scores"),il=a(" (optional): the prediction scores of the language modelling head, for each generation step"),cl=l(),er=r("li"),js=r("code"),ll=a("hidden_states"),dl=a(" (optional): the hidden states of the model, for each generation step"),pl=l(),tr=r("li"),Rs=r("code"),ml=a("attentions"),fl=a(" (optional): the attention weights of the model, for each generation step"),Ga=l(),y=r("p"),ul=a("Here we have the "),Ks=r("code"),hl=a("scores"),gl=a(" since we passed along "),Us=r("code"),_l=a("output_scores=True"),vl=a(", but we don\u2019t have "),Ys=r("code"),bl=a("hidden_states"),Tl=a(` and
`),Xs=r("code"),yl=a("attentions"),$l=a(" because we didn\u2019t pass "),Js=r("code"),kl=a("output_hidden_states=True"),xl=a(" or "),Qs=r("code"),wl=a("output_attentions=True"),El=a("."),Ha=l(),w=r("p"),Ll=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Zs=r("code"),Pl=a("None"),Dl=a(". Here for instance "),en=r("code"),zl=a("generation_output.scores"),Fl=a(` are all the generated prediction scores of the
language modeling head, and `),tn=r("code"),Sl=a("generation_output.attentions"),Ol=a(" is "),on=r("code"),ql=a("None"),Bl=a("."),ja=l(),E=r("p"),Il=a("When using our "),rn=r("code"),Al=a("generation_output"),Nl=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),sn=r("code"),Wl=a("None"),Vl=a(` values.
Here, for instance, it has two elements, `),nn=r("code"),Ml=a("loss"),Cl=a(" then "),an=r("code"),Gl=a("logits"),Hl=a(", so"),Ra=l(),f(gt.$$.fragment),Ka=l(),Ge=r("p"),jl=a("will return the tuple "),cn=r("code"),Rl=a("(generation_output.sequences, generation_output.scores)"),Kl=a(" for instance."),Ua=l(),L=r("p"),Ul=a("When using our "),ln=r("code"),Yl=a("generation_output"),Xl=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),dn=r("code"),Jl=a("None"),Ql=a(`
values. Here, for instance, it has two keys that are `),pn=r("code"),Zl=a("sequences"),ed=a(" and "),mn=r("code"),td=a("scores"),od=a("."),Ya=l(),or=r("p"),rd=a("We document here all output types."),Xa=l(),xe=r("h3"),He=r("a"),fn=r("span"),f(_t.$$.fragment),sd=l(),un=r("span"),nd=a("GreedySearchOutput"),Ja=l(),we=r("div"),f(vt.$$.fragment),ad=l(),hn=r("p"),id=a("Base class for outputs of decoder-only generation models using greedy search."),Qa=l(),Ee=r("div"),f(bt.$$.fragment),cd=l(),gn=r("p"),ld=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Za=l(),W=r("div"),f(Tt.$$.fragment),dd=l(),_n=r("p"),pd=a("Flax Base class for outputs of decoder-only generation models using greedy search."),md=l(),je=r("div"),f(yt.$$.fragment),fd=l(),vn=r("p"),ud=a("\u201CReturns a new object replacing the specified fields with new values."),ei=l(),Le=r("h3"),Re=r("a"),bn=r("span"),f($t.$$.fragment),hd=l(),Tn=r("span"),gd=a("SampleOutput"),ti=l(),Pe=r("div"),f(kt.$$.fragment),_d=l(),yn=r("p"),vd=a("Base class for outputs of decoder-only generation models using sampling."),oi=l(),De=r("div"),f(xt.$$.fragment),bd=l(),$n=r("p"),Td=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),ri=l(),V=r("div"),f(wt.$$.fragment),yd=l(),kn=r("p"),$d=a("Flax Base class for outputs of decoder-only generation models using sampling."),kd=l(),Ke=r("div"),f(Et.$$.fragment),xd=l(),xn=r("p"),wd=a("\u201CReturns a new object replacing the specified fields with new values."),si=l(),ze=r("h3"),Ue=r("a"),wn=r("span"),f(Lt.$$.fragment),Ed=l(),En=r("span"),Ld=a("BeamSearchOutput"),ni=l(),Fe=r("div"),f(Pt.$$.fragment),Pd=l(),Ln=r("p"),Dd=a("Base class for outputs of decoder-only generation models using beam search."),ai=l(),Se=r("div"),f(Dt.$$.fragment),zd=l(),Pn=r("p"),Fd=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),ii=l(),Oe=r("h3"),Ye=r("a"),Dn=r("span"),f(zt.$$.fragment),Sd=l(),zn=r("span"),Od=a("BeamSampleOutput"),ci=l(),qe=r("div"),f(Ft.$$.fragment),qd=l(),Fn=r("p"),Bd=a("Base class for outputs of decoder-only generation models using beam sample."),li=l(),Be=r("div"),f(St.$$.fragment),Id=l(),Sn=r("p"),Ad=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),di=l(),Ie=r("h2"),Xe=r("a"),On=r("span"),f(Ot.$$.fragment),Nd=l(),qn=r("span"),Wd=a("LogitsProcessor"),pi=l(),Je=r("p"),Vd=a("A "),rr=r("a"),Md=a("LogitsProcessor"),Cd=a(` can be used to modify the prediction scores of a language model head for
generation.`),mi=l(),M=r("div"),f(qt.$$.fragment),Gd=l(),Bn=r("p"),Hd=a("Abstract base class for all logit processors that can be applied during generation."),jd=l(),Qe=r("div"),f(Bt.$$.fragment),Rd=l(),In=r("p"),Kd=a("Torch method for processing logits."),fi=l(),C=r("div"),f(It.$$.fragment),Ud=l(),$=r("p"),Yd=a("This class can be used to create a list of "),sr=r("a"),Xd=a("LogitsProcessor"),Jd=a(` or
`),nr=r("a"),Qd=a("LogitsWarper"),Zd=a(" to subsequently process a "),An=r("code"),ep=a("scores"),tp=a(` input tensor. This class inherits from
list and adds a specific `),Nn=r("strong"),Wn=r("em"),op=a("call"),rp=a(" method to apply each "),ar=r("a"),sp=a("LogitsProcessor"),np=a(` or
`),ir=r("a"),ap=a("LogitsWarper"),ip=a(" to the inputs."),cp=l(),cr=r("div"),f(At.$$.fragment),ui=l(),G=r("div"),f(Nt.$$.fragment),lp=l(),Vn=r("p"),dp=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),pp=l(),Ze=r("div"),f(Wt.$$.fragment),mp=l(),Mn=r("p"),fp=a("Torch method for warping logits."),hi=l(),H=r("div"),f(Vt.$$.fragment),up=l(),lr=r("p"),dr=r("a"),hp=a("transformers.LogitsProcessor"),gp=a(" enforcing a min-length by setting EOS probability to 0."),_p=l(),Cn=r("div"),gi=l(),j=r("div"),f(Mt.$$.fragment),vp=l(),pr=r("p"),mr=r("a"),bp=a("transformers.LogitsWarper"),Tp=a(" for temperature (exponential scaling output probability distribution)."),yp=l(),Gn=r("div"),_i=l(),R=r("div"),f(Ct.$$.fragment),$p=l(),fr=r("p"),ur=r("a"),kp=a("transformers.LogitsProcessor"),xp=a(" enforcing an exponential penalty on repeated sequences."),wp=l(),Hn=r("div"),vi=l(),K=r("div"),f(Gt.$$.fragment),Ep=l(),hr=r("p"),gr=r("a"),Lp=a("transformers.LogitsWarper"),Pp=a(` that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <=
prob_cut_off.`),Dp=l(),jn=r("div"),bi=l(),U=r("div"),f(Ht.$$.fragment),zp=l(),_r=r("p"),vr=r("a"),Fp=a("transformers.LogitsWarper"),Sp=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Op=l(),Rn=r("div"),Ti=l(),Y=r("div"),f(jt.$$.fragment),qp=l(),et=r("p"),br=r("a"),Bp=a("transformers.LogitsProcessor"),Ip=a(" that enforces no repetition of n-grams. See "),Rt=r("a"),Ap=a("Fairseq"),Np=a("."),Wp=l(),Kn=r("div"),yi=l(),X=r("div"),f(Kt.$$.fragment),Vp=l(),Tr=r("p"),yr=r("a"),Mp=a("transformers.LogitsProcessor"),Cp=a(" that enforces that specified sequences will never be sampled."),Gp=l(),Un=r("div"),$i=l(),J=r("div"),f(Ut.$$.fragment),Hp=l(),tt=r("p"),$r=r("a"),jp=a("transformers.LogitsProcessor"),Rp=a(` that enforces constrained generation and is useful for prefix-conditioned
constrained generation. See `),Yt=r("a"),Kp=a("Autoregressive Entity Retrieval"),Up=a(` for more
information.`),Yp=l(),Yn=r("div"),ki=l(),Q=r("div"),f(Xt.$$.fragment),Xp=l(),ve=r("p"),kr=r("a"),Jp=a("transformers.LogitsProcessor"),Qp=a(` that enforces diverse beam search. Note that this logits processor is only
effective for `),xr=r("a"),Zp=a("transformers.PreTrainedModel.group_beam_search()"),em=a(". See "),Jt=r("a"),tm=a(`Diverse Beam Search: Decoding Diverse
Solutions from Neural Sequence Models`),om=a(" for more details."),rm=l(),Xn=r("div"),xi=l(),Z=r("div"),f(Qt.$$.fragment),sm=l(),wr=r("p"),Er=r("a"),nm=a("LogitsProcessor"),am=a(" that enforces the specified token as the first generated token."),im=l(),Jn=r("div"),wi=l(),ee=r("div"),f(Zt.$$.fragment),cm=l(),ot=r("p"),Lr=r("a"),lm=a("LogitsProcessor"),dm=a(` that enforces the specified token as the last generated token when
`),Qn=r("code"),pm=a("max_length"),mm=a(" is reached."),fm=l(),Zn=r("div"),Ei=l(),te=r("div"),f(eo.$$.fragment),um=l(),I=r("p"),Pr=r("a"),hm=a("LogitsProcessor"),gm=a(" that removes all "),ea=r("code"),_m=a("nan"),vm=a(" and "),ta=r("code"),bm=a("inf"),Tm=a(` values to avoid the generation
method to fail. Note that using the logits processor should only be used if necessary since it can slow down the
generation method. `),oa=r("code"),ym=a("max_length"),$m=a(" is reached."),km=l(),ra=r("div"),Li=l(),oe=r("div"),f(to.$$.fragment),xm=l(),sa=r("p"),wm=a("Abstract base class for all logit processors that can be applied during generation."),Em=l(),rt=r("div"),f(oo.$$.fragment),Lm=l(),na=r("p"),Pm=a("Flax method for processing logits."),Pi=l(),re=r("div"),f(ro.$$.fragment),Dm=l(),k=r("p"),zm=a("This class can be used to create a list of "),Dr=r("a"),Fm=a("FlaxLogitsProcessor"),Sm=a(` or
`),zr=r("a"),Om=a("FlaxLogitsWarper"),qm=a(" to subsequently process a "),aa=r("code"),Bm=a("scores"),Im=a(` input tensor. This class inherits
from list and adds a specific `),ia=r("strong"),ca=r("em"),Am=a("call"),Nm=a(" method to apply each "),Fr=r("a"),Wm=a("FlaxLogitsProcessor"),Vm=a(` or
`),Sr=r("a"),Mm=a("FlaxLogitsWarper"),Cm=a(" to the inputs."),Gm=l(),Or=r("div"),f(so.$$.fragment),Di=l(),se=r("div"),f(no.$$.fragment),Hm=l(),la=r("p"),jm=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Rm=l(),st=r("div"),f(ao.$$.fragment),Km=l(),da=r("p"),Um=a("Flax method for warping logits."),zi=l(),ne=r("div"),f(io.$$.fragment),Ym=l(),qr=r("p"),Br=r("a"),Xm=a("transformers.LogitsWarper"),Jm=a(" for temperature (exponential scaling output probability distribution)."),Qm=l(),pa=r("div"),Fi=l(),ae=r("div"),f(co.$$.fragment),Zm=l(),Ir=r("p"),Ar=r("a"),ef=a("transformers.LogitsWarper"),tf=a(` that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <=
prob_cut_off.`),of=l(),ma=r("div"),Si=l(),ie=r("div"),f(lo.$$.fragment),rf=l(),Nr=r("p"),Wr=r("a"),sf=a("transformers.LogitsWarper"),nf=a(" that performs top-k, i.e. restricting to the k highest probability elements."),af=l(),fa=r("div"),Oi=l(),ce=r("div"),f(po.$$.fragment),cf=l(),Vr=r("p"),Mr=r("a"),lf=a("FlaxLogitsProcessor"),df=a(" that enforces the specified token as the first generated token."),pf=l(),ua=r("div"),qi=l(),le=r("div"),f(mo.$$.fragment),mf=l(),nt=r("p"),Cr=r("a"),ff=a("FlaxLogitsProcessor"),uf=a(` that enforces the specified token as the last generated token when
`),ha=r("code"),hf=a("max_length"),gf=a(" is reached."),_f=l(),ga=r("div"),Bi=l(),de=r("div"),f(fo.$$.fragment),vf=l(),Gr=r("p"),Hr=r("a"),bf=a("transformers.FlaxLogitsProcessor"),Tf=a(" enforcing a min-length by setting EOS probability to 0."),yf=l(),_a=r("div"),Ii=l(),Ae=r("h2"),at=r("a"),va=r("span"),f(uo.$$.fragment),$f=l(),ba=r("span"),kf=a("StoppingCriteria"),Ai=l(),it=r("p"),xf=a("A "),jr=r("a"),wf=a("StoppingCriteria"),Ef=a(" can be used to change when to stop generation (other than EOS token)."),Ni=l(),pe=r("div"),f(ho.$$.fragment),Lf=l(),Ta=r("p"),Pf=a("Abstract base class for all stopping criteria that can be applied during generation."),Df=l(),Rr=r("div"),f(go.$$.fragment),Wi=l(),_o=r("div"),Kr=r("div"),f(vo.$$.fragment),Vi=l(),me=r("div"),f(bo.$$.fragment),zf=l(),To=r("p"),Ff=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),ya=r("code"),Sf=a("max_length"),Of=a(`.
Keep in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),qf=l(),Ur=r("div"),f(yo.$$.fragment),Mi=l(),fe=r("div"),f($o.$$.fragment),Bf=l(),ko=r("p"),If=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),$a=r("code"),Af=a("initial_time"),Nf=a("."),Wf=l(),Yr=r("div"),f(xo.$$.fragment),Ci=l(),Ne=r("h2"),ct=r("a"),ka=r("span"),f(wo.$$.fragment),Vf=l(),xa=r("span"),Mf=a("BeamSearch"),Gi=l(),S=r("div"),f(Eo.$$.fragment),Cf=l(),We=r("p"),Gf=a("Abstract base class for all beam scorers that are used for "),Xr=r("a"),Hf=a("beam_search()"),jf=a(` and
`),Jr=r("a"),Rf=a("beam_sample()"),Kf=a("."),Uf=l(),Qr=r("div"),f(Lo.$$.fragment),Yf=l(),Zr=r("div"),f(Po.$$.fragment),Hi=l(),x=r("div"),f(Do.$$.fragment),Xf=l(),es=r("p"),ts=r("a"),Jf=a("transformers.BeamScorer"),Qf=a(" implementing standard beam search decoding."),Zf=l(),zo=r("p"),eu=a("Adapted in part from "),Fo=r("a"),tu=a("Facebook\u2019s XLM beam search code"),ou=a("."),ru=l(),os=r("p"),su=a("Reference for the diverse beam search algorithm and implementation "),So=r("a"),nu=a("Ashwin Kalyan\u2019s DBS implementation"),au=l(),wa=r("div"),iu=l(),Ea=r("div"),ji=l(),Ve=r("h2"),lt=r("a"),La=r("span"),f(Oo.$$.fragment),cu=l(),Pa=r("span"),lu=a("Utilities"),Ri=l(),ue=r("div"),f(qo.$$.fragment),du=l(),Da=r("p"),pu=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),mu=l(),rs=r("p"),fu=a("From: "),Bo=r("a"),uu=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Ki=l(),he=r("div"),f(Io.$$.fragment),hu=l(),za=r("p"),gu=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),_u=l(),ss=r("p"),vu=a("From: "),Ao=r("a"),bu=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=O_('[data-svelte="svelte-1phssyn"]',document.head);ge=s(p,"META",{name:!0,content:!0}),p.forEach(o),Wo=d(e),O=s(e,"H1",{class:!0});var Yi=n(O);N=s(Yi,"A",{id:!0,class:!0,href:!0});var Vu=n(N);Ns=s(Vu,"SPAN",{});var Mu=n(Ns);u(ft.$$.fragment,Mu),Mu.forEach(o),Vu.forEach(o),Ec=d(Yi),Ws=s(Yi,"SPAN",{});var Cu=n(Ws);Lc=i(Cu,"Utilities for Generation"),Cu.forEach(o),Yi.forEach(o),Ba=d(e),T=s(e,"P",{});var P=n(T);Pc=i(P,"This page lists all the utility functions used by "),Vo=s(P,"A",{href:!0});var Gu=n(Vo);Dc=i(Gu,"generate()"),Gu.forEach(o),zc=i(P,`,
`),Mo=s(P,"A",{href:!0});var Hu=n(Mo);Fc=i(Hu,"greedy_search()"),Hu.forEach(o),Sc=i(P,`,
`),Co=s(P,"A",{href:!0});var ju=n(Co);Oc=i(ju,"sample()"),ju.forEach(o),qc=i(P,`,
`),Go=s(P,"A",{href:!0});var Ru=n(Go);Bc=i(Ru,"beam_search()"),Ru.forEach(o),Ic=i(P,`,
`),Ho=s(P,"A",{href:!0});var Ku=n(Ho);Ac=i(Ku,"beam_sample()"),Ku.forEach(o),Nc=i(P,`, and
`),jo=s(P,"A",{href:!0});var Uu=n(jo);Wc=i(Uu,"group_beam_search()"),Uu.forEach(o),Vc=i(P,"."),P.forEach(o),Ia=d(e),Ro=s(e,"P",{});var Yu=n(Ro);Mc=i(Yu,"Most of those are only useful if you are studying the code of the generate methods in the library."),Yu.forEach(o),Aa=d(e),ke=s(e,"H2",{class:!0});var Xi=n(ke);Ce=s(Xi,"A",{id:!0,class:!0,href:!0});var Xu=n(Ce);Vs=s(Xu,"SPAN",{});var Ju=n(Vs);u(ut.$$.fragment,Ju),Ju.forEach(o),Xu.forEach(o),Cc=d(Xi),Ms=s(Xi,"SPAN",{});var Qu=n(Ms);Gc=i(Qu,"Generate Outputs"),Qu.forEach(o),Xi.forEach(o),Na=d(e),q=s(e,"P",{});var dt=n(q);Hc=i(dt,"The output of "),Ko=s(dt,"A",{href:!0});var Zu=n(Ko);jc=i(Zu,"generate()"),Zu.forEach(o),Rc=i(dt,` is an instance of a subclass of
`),Uo=s(dt,"A",{href:!0});var eh=n(Uo);Kc=i(eh,"ModelOutput"),eh.forEach(o),Uc=i(dt,`. This output is a data structure containing all the information returned
by `),Yo=s(dt,"A",{href:!0});var th=n(Yo);Yc=i(th,"generate()"),th.forEach(o),Xc=i(dt,", but that can also be used as tuple or dictionary."),dt.forEach(o),Wa=d(e),Xo=s(e,"P",{});var oh=n(Xo);Jc=i(oh,"Here\u2019s an example:"),oh.forEach(o),Va=d(e),u(ht.$$.fragment,e),Ma=d(e),_e=s(e,"P",{});var ns=n(_e);Qc=i(ns,"The "),Cs=s(ns,"CODE",{});var rh=n(Cs);Zc=i(rh,"generation_output"),rh.forEach(o),el=i(ns," object is a "),Jo=s(ns,"A",{href:!0});var sh=n(Jo);tl=i(sh,"GreedySearchDecoderOnlyOutput"),sh.forEach(o),ol=i(ns,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),ns.forEach(o),Ca=d(e),B=s(e,"UL",{});var pt=n(B);Qo=s(pt,"LI",{});var Tu=n(Qo);Gs=s(Tu,"CODE",{});var nh=n(Gs);rl=i(nh,"sequences"),nh.forEach(o),sl=i(Tu,": the generated sequences of tokens"),Tu.forEach(o),nl=d(pt),Zo=s(pt,"LI",{});var yu=n(Zo);Hs=s(yu,"CODE",{});var ah=n(Hs);al=i(ah,"scores"),ah.forEach(o),il=i(yu," (optional): the prediction scores of the language modelling head, for each generation step"),yu.forEach(o),cl=d(pt),er=s(pt,"LI",{});var $u=n(er);js=s($u,"CODE",{});var ih=n(js);ll=i(ih,"hidden_states"),ih.forEach(o),dl=i($u," (optional): the hidden states of the model, for each generation step"),$u.forEach(o),pl=d(pt),tr=s(pt,"LI",{});var ku=n(tr);Rs=s(ku,"CODE",{});var ch=n(Rs);ml=i(ch,"attentions"),ch.forEach(o),fl=i(ku," (optional): the attention weights of the model, for each generation step"),ku.forEach(o),pt.forEach(o),Ga=d(e),y=s(e,"P",{});var D=n(y);ul=i(D,"Here we have the "),Ks=s(D,"CODE",{});var lh=n(Ks);hl=i(lh,"scores"),lh.forEach(o),gl=i(D," since we passed along "),Us=s(D,"CODE",{});var dh=n(Us);_l=i(dh,"output_scores=True"),dh.forEach(o),vl=i(D,", but we don\u2019t have "),Ys=s(D,"CODE",{});var ph=n(Ys);bl=i(ph,"hidden_states"),ph.forEach(o),Tl=i(D,` and
`),Xs=s(D,"CODE",{});var mh=n(Xs);yl=i(mh,"attentions"),mh.forEach(o),$l=i(D," because we didn\u2019t pass "),Js=s(D,"CODE",{});var fh=n(Js);kl=i(fh,"output_hidden_states=True"),fh.forEach(o),xl=i(D," or "),Qs=s(D,"CODE",{});var uh=n(Qs);wl=i(uh,"output_attentions=True"),uh.forEach(o),El=i(D,"."),D.forEach(o),Ha=d(e),w=s(e,"P",{});var be=n(w);Ll=i(be,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Zs=s(be,"CODE",{});var hh=n(Zs);Pl=i(hh,"None"),hh.forEach(o),Dl=i(be,". Here for instance "),en=s(be,"CODE",{});var gh=n(en);zl=i(gh,"generation_output.scores"),gh.forEach(o),Fl=i(be,` are all the generated prediction scores of the
language modeling head, and `),tn=s(be,"CODE",{});var _h=n(tn);Sl=i(_h,"generation_output.attentions"),_h.forEach(o),Ol=i(be," is "),on=s(be,"CODE",{});var vh=n(on);ql=i(vh,"None"),vh.forEach(o),Bl=i(be,"."),be.forEach(o),ja=d(e),E=s(e,"P",{});var Te=n(E);Il=i(Te,"When using our "),rn=s(Te,"CODE",{});var bh=n(rn);Al=i(bh,"generation_output"),bh.forEach(o),Nl=i(Te," object as a tuple, it only keeps the attributes that don\u2019t have "),sn=s(Te,"CODE",{});var Th=n(sn);Wl=i(Th,"None"),Th.forEach(o),Vl=i(Te,` values.
Here, for instance, it has two elements, `),nn=s(Te,"CODE",{});var yh=n(nn);Ml=i(yh,"loss"),yh.forEach(o),Cl=i(Te," then "),an=s(Te,"CODE",{});var $h=n(an);Gl=i($h,"logits"),$h.forEach(o),Hl=i(Te,", so"),Te.forEach(o),Ra=d(e),u(gt.$$.fragment,e),Ka=d(e),Ge=s(e,"P",{});var Ji=n(Ge);jl=i(Ji,"will return the tuple "),cn=s(Ji,"CODE",{});var kh=n(cn);Rl=i(kh,"(generation_output.sequences, generation_output.scores)"),kh.forEach(o),Kl=i(Ji," for instance."),Ji.forEach(o),Ua=d(e),L=s(e,"P",{});var ye=n(L);Ul=i(ye,"When using our "),ln=s(ye,"CODE",{});var xh=n(ln);Yl=i(xh,"generation_output"),xh.forEach(o),Xl=i(ye," object as a dictionary, it only keeps the attributes that don\u2019t have "),dn=s(ye,"CODE",{});var wh=n(dn);Jl=i(wh,"None"),wh.forEach(o),Ql=i(ye,`
values. Here, for instance, it has two keys that are `),pn=s(ye,"CODE",{});var Eh=n(pn);Zl=i(Eh,"sequences"),Eh.forEach(o),ed=i(ye," and "),mn=s(ye,"CODE",{});var Lh=n(mn);td=i(Lh,"scores"),Lh.forEach(o),od=i(ye,"."),ye.forEach(o),Ya=d(e),or=s(e,"P",{});var Ph=n(or);rd=i(Ph,"We document here all output types."),Ph.forEach(o),Xa=d(e),xe=s(e,"H3",{class:!0});var Qi=n(xe);He=s(Qi,"A",{id:!0,class:!0,href:!0});var Dh=n(He);fn=s(Dh,"SPAN",{});var zh=n(fn);u(_t.$$.fragment,zh),zh.forEach(o),Dh.forEach(o),sd=d(Qi),un=s(Qi,"SPAN",{});var Fh=n(un);nd=i(Fh,"GreedySearchOutput"),Fh.forEach(o),Qi.forEach(o),Ja=d(e),we=s(e,"DIV",{class:!0});var Zi=n(we);u(vt.$$.fragment,Zi),ad=d(Zi),hn=s(Zi,"P",{});var Sh=n(hn);id=i(Sh,"Base class for outputs of decoder-only generation models using greedy search."),Sh.forEach(o),Zi.forEach(o),Qa=d(e),Ee=s(e,"DIV",{class:!0});var ec=n(Ee);u(bt.$$.fragment,ec),cd=d(ec),gn=s(ec,"P",{});var Oh=n(gn);ld=i(Oh,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Oh.forEach(o),ec.forEach(o),Za=d(e),W=s(e,"DIV",{class:!0});var as=n(W);u(Tt.$$.fragment,as),dd=d(as),_n=s(as,"P",{});var qh=n(_n);pd=i(qh,"Flax Base class for outputs of decoder-only generation models using greedy search."),qh.forEach(o),md=d(as),je=s(as,"DIV",{class:!0});var tc=n(je);u(yt.$$.fragment,tc),fd=d(tc),vn=s(tc,"P",{});var Bh=n(vn);ud=i(Bh,"\u201CReturns a new object replacing the specified fields with new values."),Bh.forEach(o),tc.forEach(o),as.forEach(o),ei=d(e),Le=s(e,"H3",{class:!0});var oc=n(Le);Re=s(oc,"A",{id:!0,class:!0,href:!0});var Ih=n(Re);bn=s(Ih,"SPAN",{});var Ah=n(bn);u($t.$$.fragment,Ah),Ah.forEach(o),Ih.forEach(o),hd=d(oc),Tn=s(oc,"SPAN",{});var Nh=n(Tn);gd=i(Nh,"SampleOutput"),Nh.forEach(o),oc.forEach(o),ti=d(e),Pe=s(e,"DIV",{class:!0});var rc=n(Pe);u(kt.$$.fragment,rc),_d=d(rc),yn=s(rc,"P",{});var Wh=n(yn);vd=i(Wh,"Base class for outputs of decoder-only generation models using sampling."),Wh.forEach(o),rc.forEach(o),oi=d(e),De=s(e,"DIV",{class:!0});var sc=n(De);u(xt.$$.fragment,sc),bd=d(sc),$n=s(sc,"P",{});var Vh=n($n);Td=i(Vh,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Vh.forEach(o),sc.forEach(o),ri=d(e),V=s(e,"DIV",{class:!0});var is=n(V);u(wt.$$.fragment,is),yd=d(is),kn=s(is,"P",{});var Mh=n(kn);$d=i(Mh,"Flax Base class for outputs of decoder-only generation models using sampling."),Mh.forEach(o),kd=d(is),Ke=s(is,"DIV",{class:!0});var nc=n(Ke);u(Et.$$.fragment,nc),xd=d(nc),xn=s(nc,"P",{});var Ch=n(xn);wd=i(Ch,"\u201CReturns a new object replacing the specified fields with new values."),Ch.forEach(o),nc.forEach(o),is.forEach(o),si=d(e),ze=s(e,"H3",{class:!0});var ac=n(ze);Ue=s(ac,"A",{id:!0,class:!0,href:!0});var Gh=n(Ue);wn=s(Gh,"SPAN",{});var Hh=n(wn);u(Lt.$$.fragment,Hh),Hh.forEach(o),Gh.forEach(o),Ed=d(ac),En=s(ac,"SPAN",{});var jh=n(En);Ld=i(jh,"BeamSearchOutput"),jh.forEach(o),ac.forEach(o),ni=d(e),Fe=s(e,"DIV",{class:!0});var ic=n(Fe);u(Pt.$$.fragment,ic),Pd=d(ic),Ln=s(ic,"P",{});var Rh=n(Ln);Dd=i(Rh,"Base class for outputs of decoder-only generation models using beam search."),Rh.forEach(o),ic.forEach(o),ai=d(e),Se=s(e,"DIV",{class:!0});var cc=n(Se);u(Dt.$$.fragment,cc),zd=d(cc),Pn=s(cc,"P",{});var Kh=n(Pn);Fd=i(Kh,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Kh.forEach(o),cc.forEach(o),ii=d(e),Oe=s(e,"H3",{class:!0});var lc=n(Oe);Ye=s(lc,"A",{id:!0,class:!0,href:!0});var Uh=n(Ye);Dn=s(Uh,"SPAN",{});var Yh=n(Dn);u(zt.$$.fragment,Yh),Yh.forEach(o),Uh.forEach(o),Sd=d(lc),zn=s(lc,"SPAN",{});var Xh=n(zn);Od=i(Xh,"BeamSampleOutput"),Xh.forEach(o),lc.forEach(o),ci=d(e),qe=s(e,"DIV",{class:!0});var dc=n(qe);u(Ft.$$.fragment,dc),qd=d(dc),Fn=s(dc,"P",{});var Jh=n(Fn);Bd=i(Jh,"Base class for outputs of decoder-only generation models using beam sample."),Jh.forEach(o),dc.forEach(o),li=d(e),Be=s(e,"DIV",{class:!0});var pc=n(Be);u(St.$$.fragment,pc),Id=d(pc),Sn=s(pc,"P",{});var Qh=n(Sn);Ad=i(Qh,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Qh.forEach(o),pc.forEach(o),di=d(e),Ie=s(e,"H2",{class:!0});var mc=n(Ie);Xe=s(mc,"A",{id:!0,class:!0,href:!0});var Zh=n(Xe);On=s(Zh,"SPAN",{});var eg=n(On);u(Ot.$$.fragment,eg),eg.forEach(o),Zh.forEach(o),Nd=d(mc),qn=s(mc,"SPAN",{});var tg=n(qn);Wd=i(tg,"LogitsProcessor"),tg.forEach(o),mc.forEach(o),pi=d(e),Je=s(e,"P",{});var fc=n(Je);Vd=i(fc,"A "),rr=s(fc,"A",{href:!0});var og=n(rr);Md=i(og,"LogitsProcessor"),og.forEach(o),Cd=i(fc,` can be used to modify the prediction scores of a language model head for
generation.`),fc.forEach(o),mi=d(e),M=s(e,"DIV",{class:!0});var cs=n(M);u(qt.$$.fragment,cs),Gd=d(cs),Bn=s(cs,"P",{});var rg=n(Bn);Hd=i(rg,"Abstract base class for all logit processors that can be applied during generation."),rg.forEach(o),jd=d(cs),Qe=s(cs,"DIV",{class:!0});var uc=n(Qe);u(Bt.$$.fragment,uc),Rd=d(uc),In=s(uc,"P",{});var sg=n(In);Kd=i(sg,"Torch method for processing logits."),sg.forEach(o),uc.forEach(o),cs.forEach(o),fi=d(e),C=s(e,"DIV",{class:!0});var ls=n(C);u(It.$$.fragment,ls),Ud=d(ls),$=s(ls,"P",{});var z=n($);Yd=i(z,"This class can be used to create a list of "),sr=s(z,"A",{href:!0});var ng=n(sr);Xd=i(ng,"LogitsProcessor"),ng.forEach(o),Jd=i(z,` or
`),nr=s(z,"A",{href:!0});var ag=n(nr);Qd=i(ag,"LogitsWarper"),ag.forEach(o),Zd=i(z," to subsequently process a "),An=s(z,"CODE",{});var ig=n(An);ep=i(ig,"scores"),ig.forEach(o),tp=i(z,` input tensor. This class inherits from
list and adds a specific `),Nn=s(z,"STRONG",{});var cg=n(Nn);Wn=s(cg,"EM",{});var lg=n(Wn);op=i(lg,"call"),lg.forEach(o),cg.forEach(o),rp=i(z," method to apply each "),ar=s(z,"A",{href:!0});var dg=n(ar);sp=i(dg,"LogitsProcessor"),dg.forEach(o),np=i(z,` or
`),ir=s(z,"A",{href:!0});var pg=n(ir);ap=i(pg,"LogitsWarper"),pg.forEach(o),ip=i(z," to the inputs."),z.forEach(o),cp=d(ls),cr=s(ls,"DIV",{class:!0});var mg=n(cr);u(At.$$.fragment,mg),mg.forEach(o),ls.forEach(o),ui=d(e),G=s(e,"DIV",{class:!0});var ds=n(G);u(Nt.$$.fragment,ds),lp=d(ds),Vn=s(ds,"P",{});var fg=n(Vn);dp=i(fg,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),fg.forEach(o),pp=d(ds),Ze=s(ds,"DIV",{class:!0});var hc=n(Ze);u(Wt.$$.fragment,hc),mp=d(hc),Mn=s(hc,"P",{});var ug=n(Mn);fp=i(ug,"Torch method for warping logits."),ug.forEach(o),hc.forEach(o),ds.forEach(o),hi=d(e),H=s(e,"DIV",{class:!0});var ps=n(H);u(Vt.$$.fragment,ps),up=d(ps),lr=s(ps,"P",{});var xu=n(lr);dr=s(xu,"A",{href:!0});var hg=n(dr);hp=i(hg,"transformers.LogitsProcessor"),hg.forEach(o),gp=i(xu," enforcing a min-length by setting EOS probability to 0."),xu.forEach(o),_p=d(ps),Cn=s(ps,"DIV",{class:!0}),n(Cn).forEach(o),ps.forEach(o),gi=d(e),j=s(e,"DIV",{class:!0});var ms=n(j);u(Mt.$$.fragment,ms),vp=d(ms),pr=s(ms,"P",{});var wu=n(pr);mr=s(wu,"A",{href:!0});var gg=n(mr);bp=i(gg,"transformers.LogitsWarper"),gg.forEach(o),Tp=i(wu," for temperature (exponential scaling output probability distribution)."),wu.forEach(o),yp=d(ms),Gn=s(ms,"DIV",{class:!0}),n(Gn).forEach(o),ms.forEach(o),_i=d(e),R=s(e,"DIV",{class:!0});var fs=n(R);u(Ct.$$.fragment,fs),$p=d(fs),fr=s(fs,"P",{});var Eu=n(fr);ur=s(Eu,"A",{href:!0});var _g=n(ur);kp=i(_g,"transformers.LogitsProcessor"),_g.forEach(o),xp=i(Eu," enforcing an exponential penalty on repeated sequences."),Eu.forEach(o),wp=d(fs),Hn=s(fs,"DIV",{class:!0}),n(Hn).forEach(o),fs.forEach(o),vi=d(e),K=s(e,"DIV",{class:!0});var us=n(K);u(Gt.$$.fragment,us),Ep=d(us),hr=s(us,"P",{});var Lu=n(hr);gr=s(Lu,"A",{href:!0});var vg=n(gr);Lp=i(vg,"transformers.LogitsWarper"),vg.forEach(o),Pp=i(Lu,` that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <=
prob_cut_off.`),Lu.forEach(o),Dp=d(us),jn=s(us,"DIV",{class:!0}),n(jn).forEach(o),us.forEach(o),bi=d(e),U=s(e,"DIV",{class:!0});var hs=n(U);u(Ht.$$.fragment,hs),zp=d(hs),_r=s(hs,"P",{});var Pu=n(_r);vr=s(Pu,"A",{href:!0});var bg=n(vr);Fp=i(bg,"transformers.LogitsWarper"),bg.forEach(o),Sp=i(Pu," that performs top-k, i.e. restricting to the k highest probability elements."),Pu.forEach(o),Op=d(hs),Rn=s(hs,"DIV",{class:!0}),n(Rn).forEach(o),hs.forEach(o),Ti=d(e),Y=s(e,"DIV",{class:!0});var gs=n(Y);u(jt.$$.fragment,gs),qp=d(gs),et=s(gs,"P",{});var Fa=n(et);br=s(Fa,"A",{href:!0});var Tg=n(br);Bp=i(Tg,"transformers.LogitsProcessor"),Tg.forEach(o),Ip=i(Fa," that enforces no repetition of n-grams. See "),Rt=s(Fa,"A",{href:!0,rel:!0});var yg=n(Rt);Ap=i(yg,"Fairseq"),yg.forEach(o),Np=i(Fa,"."),Fa.forEach(o),Wp=d(gs),Kn=s(gs,"DIV",{class:!0}),n(Kn).forEach(o),gs.forEach(o),yi=d(e),X=s(e,"DIV",{class:!0});var _s=n(X);u(Kt.$$.fragment,_s),Vp=d(_s),Tr=s(_s,"P",{});var Du=n(Tr);yr=s(Du,"A",{href:!0});var $g=n(yr);Mp=i($g,"transformers.LogitsProcessor"),$g.forEach(o),Cp=i(Du," that enforces that specified sequences will never be sampled."),Du.forEach(o),Gp=d(_s),Un=s(_s,"DIV",{class:!0}),n(Un).forEach(o),_s.forEach(o),$i=d(e),J=s(e,"DIV",{class:!0});var vs=n(J);u(Ut.$$.fragment,vs),Hp=d(vs),tt=s(vs,"P",{});var Sa=n(tt);$r=s(Sa,"A",{href:!0});var kg=n($r);jp=i(kg,"transformers.LogitsProcessor"),kg.forEach(o),Rp=i(Sa,` that enforces constrained generation and is useful for prefix-conditioned
constrained generation. See `),Yt=s(Sa,"A",{href:!0,rel:!0});var xg=n(Yt);Kp=i(xg,"Autoregressive Entity Retrieval"),xg.forEach(o),Up=i(Sa,` for more
information.`),Sa.forEach(o),Yp=d(vs),Yn=s(vs,"DIV",{class:!0}),n(Yn).forEach(o),vs.forEach(o),ki=d(e),Q=s(e,"DIV",{class:!0});var bs=n(Q);u(Xt.$$.fragment,bs),Xp=d(bs),ve=s(bs,"P",{});var No=n(ve);kr=s(No,"A",{href:!0});var wg=n(kr);Jp=i(wg,"transformers.LogitsProcessor"),wg.forEach(o),Qp=i(No,` that enforces diverse beam search. Note that this logits processor is only
effective for `),xr=s(No,"A",{href:!0});var Eg=n(xr);Zp=i(Eg,"transformers.PreTrainedModel.group_beam_search()"),Eg.forEach(o),em=i(No,". See "),Jt=s(No,"A",{href:!0,rel:!0});var Lg=n(Jt);tm=i(Lg,`Diverse Beam Search: Decoding Diverse
Solutions from Neural Sequence Models`),Lg.forEach(o),om=i(No," for more details."),No.forEach(o),rm=d(bs),Xn=s(bs,"DIV",{class:!0}),n(Xn).forEach(o),bs.forEach(o),xi=d(e),Z=s(e,"DIV",{class:!0});var Ts=n(Z);u(Qt.$$.fragment,Ts),sm=d(Ts),wr=s(Ts,"P",{});var zu=n(wr);Er=s(zu,"A",{href:!0});var Pg=n(Er);nm=i(Pg,"LogitsProcessor"),Pg.forEach(o),am=i(zu," that enforces the specified token as the first generated token."),zu.forEach(o),im=d(Ts),Jn=s(Ts,"DIV",{class:!0}),n(Jn).forEach(o),Ts.forEach(o),wi=d(e),ee=s(e,"DIV",{class:!0});var ys=n(ee);u(Zt.$$.fragment,ys),cm=d(ys),ot=s(ys,"P",{});var Oa=n(ot);Lr=s(Oa,"A",{href:!0});var Dg=n(Lr);lm=i(Dg,"LogitsProcessor"),Dg.forEach(o),dm=i(Oa,` that enforces the specified token as the last generated token when
`),Qn=s(Oa,"CODE",{});var zg=n(Qn);pm=i(zg,"max_length"),zg.forEach(o),mm=i(Oa," is reached."),Oa.forEach(o),fm=d(ys),Zn=s(ys,"DIV",{class:!0}),n(Zn).forEach(o),ys.forEach(o),Ei=d(e),te=s(e,"DIV",{class:!0});var $s=n(te);u(eo.$$.fragment,$s),um=d($s),I=s($s,"P",{});var Me=n(I);Pr=s(Me,"A",{href:!0});var Fg=n(Pr);hm=i(Fg,"LogitsProcessor"),Fg.forEach(o),gm=i(Me," that removes all "),ea=s(Me,"CODE",{});var Sg=n(ea);_m=i(Sg,"nan"),Sg.forEach(o),vm=i(Me," and "),ta=s(Me,"CODE",{});var Og=n(ta);bm=i(Og,"inf"),Og.forEach(o),Tm=i(Me,` values to avoid the generation
method to fail. Note that using the logits processor should only be used if necessary since it can slow down the
generation method. `),oa=s(Me,"CODE",{});var qg=n(oa);ym=i(qg,"max_length"),qg.forEach(o),$m=i(Me," is reached."),Me.forEach(o),km=d($s),ra=s($s,"DIV",{class:!0}),n(ra).forEach(o),$s.forEach(o),Li=d(e),oe=s(e,"DIV",{class:!0});var ks=n(oe);u(to.$$.fragment,ks),xm=d(ks),sa=s(ks,"P",{});var Bg=n(sa);wm=i(Bg,"Abstract base class for all logit processors that can be applied during generation."),Bg.forEach(o),Em=d(ks),rt=s(ks,"DIV",{class:!0});var gc=n(rt);u(oo.$$.fragment,gc),Lm=d(gc),na=s(gc,"P",{});var Ig=n(na);Pm=i(Ig,"Flax method for processing logits."),Ig.forEach(o),gc.forEach(o),ks.forEach(o),Pi=d(e),re=s(e,"DIV",{class:!0});var xs=n(re);u(ro.$$.fragment,xs),Dm=d(xs),k=s(xs,"P",{});var F=n(k);zm=i(F,"This class can be used to create a list of "),Dr=s(F,"A",{href:!0});var Ag=n(Dr);Fm=i(Ag,"FlaxLogitsProcessor"),Ag.forEach(o),Sm=i(F,` or
`),zr=s(F,"A",{href:!0});var Ng=n(zr);Om=i(Ng,"FlaxLogitsWarper"),Ng.forEach(o),qm=i(F," to subsequently process a "),aa=s(F,"CODE",{});var Wg=n(aa);Bm=i(Wg,"scores"),Wg.forEach(o),Im=i(F,` input tensor. This class inherits
from list and adds a specific `),ia=s(F,"STRONG",{});var Vg=n(ia);ca=s(Vg,"EM",{});var Mg=n(ca);Am=i(Mg,"call"),Mg.forEach(o),Vg.forEach(o),Nm=i(F," method to apply each "),Fr=s(F,"A",{href:!0});var Cg=n(Fr);Wm=i(Cg,"FlaxLogitsProcessor"),Cg.forEach(o),Vm=i(F,` or
`),Sr=s(F,"A",{href:!0});var Gg=n(Sr);Mm=i(Gg,"FlaxLogitsWarper"),Gg.forEach(o),Cm=i(F," to the inputs."),F.forEach(o),Gm=d(xs),Or=s(xs,"DIV",{class:!0});var Hg=n(Or);u(so.$$.fragment,Hg),Hg.forEach(o),xs.forEach(o),Di=d(e),se=s(e,"DIV",{class:!0});var ws=n(se);u(no.$$.fragment,ws),Hm=d(ws),la=s(ws,"P",{});var jg=n(la);jm=i(jg,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),jg.forEach(o),Rm=d(ws),st=s(ws,"DIV",{class:!0});var _c=n(st);u(ao.$$.fragment,_c),Km=d(_c),da=s(_c,"P",{});var Rg=n(da);Um=i(Rg,"Flax method for warping logits."),Rg.forEach(o),_c.forEach(o),ws.forEach(o),zi=d(e),ne=s(e,"DIV",{class:!0});var Es=n(ne);u(io.$$.fragment,Es),Ym=d(Es),qr=s(Es,"P",{});var Fu=n(qr);Br=s(Fu,"A",{href:!0});var Kg=n(Br);Xm=i(Kg,"transformers.LogitsWarper"),Kg.forEach(o),Jm=i(Fu," for temperature (exponential scaling output probability distribution)."),Fu.forEach(o),Qm=d(Es),pa=s(Es,"DIV",{class:!0}),n(pa).forEach(o),Es.forEach(o),Fi=d(e),ae=s(e,"DIV",{class:!0});var Ls=n(ae);u(co.$$.fragment,Ls),Zm=d(Ls),Ir=s(Ls,"P",{});var Su=n(Ir);Ar=s(Su,"A",{href:!0});var Ug=n(Ar);ef=i(Ug,"transformers.LogitsWarper"),Ug.forEach(o),tf=i(Su,` that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <=
prob_cut_off.`),Su.forEach(o),of=d(Ls),ma=s(Ls,"DIV",{class:!0}),n(ma).forEach(o),Ls.forEach(o),Si=d(e),ie=s(e,"DIV",{class:!0});var Ps=n(ie);u(lo.$$.fragment,Ps),rf=d(Ps),Nr=s(Ps,"P",{});var Ou=n(Nr);Wr=s(Ou,"A",{href:!0});var Yg=n(Wr);sf=i(Yg,"transformers.LogitsWarper"),Yg.forEach(o),nf=i(Ou," that performs top-k, i.e. restricting to the k highest probability elements."),Ou.forEach(o),af=d(Ps),fa=s(Ps,"DIV",{class:!0}),n(fa).forEach(o),Ps.forEach(o),Oi=d(e),ce=s(e,"DIV",{class:!0});var Ds=n(ce);u(po.$$.fragment,Ds),cf=d(Ds),Vr=s(Ds,"P",{});var qu=n(Vr);Mr=s(qu,"A",{href:!0});var Xg=n(Mr);lf=i(Xg,"FlaxLogitsProcessor"),Xg.forEach(o),df=i(qu," that enforces the specified token as the first generated token."),qu.forEach(o),pf=d(Ds),ua=s(Ds,"DIV",{class:!0}),n(ua).forEach(o),Ds.forEach(o),qi=d(e),le=s(e,"DIV",{class:!0});var zs=n(le);u(mo.$$.fragment,zs),mf=d(zs),nt=s(zs,"P",{});var qa=n(nt);Cr=s(qa,"A",{href:!0});var Jg=n(Cr);ff=i(Jg,"FlaxLogitsProcessor"),Jg.forEach(o),uf=i(qa,` that enforces the specified token as the last generated token when
`),ha=s(qa,"CODE",{});var Qg=n(ha);hf=i(Qg,"max_length"),Qg.forEach(o),gf=i(qa," is reached."),qa.forEach(o),_f=d(zs),ga=s(zs,"DIV",{class:!0}),n(ga).forEach(o),zs.forEach(o),Bi=d(e),de=s(e,"DIV",{class:!0});var Fs=n(de);u(fo.$$.fragment,Fs),vf=d(Fs),Gr=s(Fs,"P",{});var Bu=n(Gr);Hr=s(Bu,"A",{href:!0});var Zg=n(Hr);bf=i(Zg,"transformers.FlaxLogitsProcessor"),Zg.forEach(o),Tf=i(Bu," enforcing a min-length by setting EOS probability to 0."),Bu.forEach(o),yf=d(Fs),_a=s(Fs,"DIV",{class:!0}),n(_a).forEach(o),Fs.forEach(o),Ii=d(e),Ae=s(e,"H2",{class:!0});var vc=n(Ae);at=s(vc,"A",{id:!0,class:!0,href:!0});var e_=n(at);va=s(e_,"SPAN",{});var t_=n(va);u(uo.$$.fragment,t_),t_.forEach(o),e_.forEach(o),$f=d(vc),ba=s(vc,"SPAN",{});var o_=n(ba);kf=i(o_,"StoppingCriteria"),o_.forEach(o),vc.forEach(o),Ai=d(e),it=s(e,"P",{});var bc=n(it);xf=i(bc,"A "),jr=s(bc,"A",{href:!0});var r_=n(jr);wf=i(r_,"StoppingCriteria"),r_.forEach(o),Ef=i(bc," can be used to change when to stop generation (other than EOS token)."),bc.forEach(o),Ni=d(e),pe=s(e,"DIV",{class:!0});var Ss=n(pe);u(ho.$$.fragment,Ss),Lf=d(Ss),Ta=s(Ss,"P",{});var s_=n(Ta);Pf=i(s_,"Abstract base class for all stopping criteria that can be applied during generation."),s_.forEach(o),Df=d(Ss),Rr=s(Ss,"DIV",{class:!0});var n_=n(Rr);u(go.$$.fragment,n_),n_.forEach(o),Ss.forEach(o),Wi=d(e),_o=s(e,"DIV",{class:!0});var a_=n(_o);Kr=s(a_,"DIV",{class:!0});var i_=n(Kr);u(vo.$$.fragment,i_),i_.forEach(o),a_.forEach(o),Vi=d(e),me=s(e,"DIV",{class:!0});var Os=n(me);u(bo.$$.fragment,Os),zf=d(Os),To=s(Os,"P",{});var Tc=n(To);Ff=i(Tc,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),ya=s(Tc,"CODE",{});var c_=n(ya);Sf=i(c_,"max_length"),c_.forEach(o),Of=i(Tc,`.
Keep in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Tc.forEach(o),qf=d(Os),Ur=s(Os,"DIV",{class:!0});var l_=n(Ur);u(yo.$$.fragment,l_),l_.forEach(o),Os.forEach(o),Mi=d(e),fe=s(e,"DIV",{class:!0});var qs=n(fe);u($o.$$.fragment,qs),Bf=d(qs),ko=s(qs,"P",{});var yc=n(ko);If=i(yc,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),$a=s(yc,"CODE",{});var d_=n($a);Af=i(d_,"initial_time"),d_.forEach(o),Nf=i(yc,"."),yc.forEach(o),Wf=d(qs),Yr=s(qs,"DIV",{class:!0});var p_=n(Yr);u(xo.$$.fragment,p_),p_.forEach(o),qs.forEach(o),Ci=d(e),Ne=s(e,"H2",{class:!0});var $c=n(Ne);ct=s($c,"A",{id:!0,class:!0,href:!0});var m_=n(ct);ka=s(m_,"SPAN",{});var f_=n(ka);u(wo.$$.fragment,f_),f_.forEach(o),m_.forEach(o),Vf=d($c),xa=s($c,"SPAN",{});var u_=n(xa);Mf=i(u_,"BeamSearch"),u_.forEach(o),$c.forEach(o),Gi=d(e),S=s(e,"DIV",{class:!0});var mt=n(S);u(Eo.$$.fragment,mt),Cf=d(mt),We=s(mt,"P",{});var Bs=n(We);Gf=i(Bs,"Abstract base class for all beam scorers that are used for "),Xr=s(Bs,"A",{href:!0});var h_=n(Xr);Hf=i(h_,"beam_search()"),h_.forEach(o),jf=i(Bs,` and
`),Jr=s(Bs,"A",{href:!0});var g_=n(Jr);Rf=i(g_,"beam_sample()"),g_.forEach(o),Kf=i(Bs,"."),Bs.forEach(o),Uf=d(mt),Qr=s(mt,"DIV",{class:!0});var __=n(Qr);u(Lo.$$.fragment,__),__.forEach(o),Yf=d(mt),Zr=s(mt,"DIV",{class:!0});var v_=n(Zr);u(Po.$$.fragment,v_),v_.forEach(o),mt.forEach(o),Hi=d(e),x=s(e,"DIV",{class:!0});var A=n(x);u(Do.$$.fragment,A),Xf=d(A),es=s(A,"P",{});var Iu=n(es);ts=s(Iu,"A",{href:!0});var b_=n(ts);Jf=i(b_,"transformers.BeamScorer"),b_.forEach(o),Qf=i(Iu," implementing standard beam search decoding."),Iu.forEach(o),Zf=d(A),zo=s(A,"P",{});var kc=n(zo);eu=i(kc,"Adapted in part from "),Fo=s(kc,"A",{href:!0,rel:!0});var T_=n(Fo);tu=i(T_,"Facebook\u2019s XLM beam search code"),T_.forEach(o),ou=i(kc,"."),kc.forEach(o),ru=d(A),os=s(A,"P",{});var Au=n(os);su=i(Au,"Reference for the diverse beam search algorithm and implementation "),So=s(Au,"A",{href:!0,rel:!0});var y_=n(So);nu=i(y_,"Ashwin Kalyan\u2019s DBS implementation"),y_.forEach(o),Au.forEach(o),au=d(A),wa=s(A,"DIV",{class:!0}),n(wa).forEach(o),iu=d(A),Ea=s(A,"DIV",{class:!0}),n(Ea).forEach(o),A.forEach(o),ji=d(e),Ve=s(e,"H2",{class:!0});var xc=n(Ve);lt=s(xc,"A",{id:!0,class:!0,href:!0});var $_=n(lt);La=s($_,"SPAN",{});var k_=n(La);u(Oo.$$.fragment,k_),k_.forEach(o),$_.forEach(o),cu=d(xc),Pa=s(xc,"SPAN",{});var x_=n(Pa);lu=i(x_,"Utilities"),x_.forEach(o),xc.forEach(o),Ri=d(e),ue=s(e,"DIV",{class:!0});var Is=n(ue);u(qo.$$.fragment,Is),du=d(Is),Da=s(Is,"P",{});var w_=n(Da);pu=i(w_,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),w_.forEach(o),mu=d(Is),rs=s(Is,"P",{});var Nu=n(rs);fu=i(Nu,"From: "),Bo=s(Nu,"A",{href:!0,rel:!0});var E_=n(Bo);uu=i(E_,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),E_.forEach(o),Nu.forEach(o),Is.forEach(o),Ki=d(e),he=s(e,"DIV",{class:!0});var As=n(he);u(Io.$$.fragment,As),hu=d(As),za=s(As,"P",{});var L_=n(za);gu=i(L_,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),L_.forEach(o),_u=d(As),ss=s(As,"P",{});var Wu=n(ss);vu=i(Wu,"From: "),Ao=s(Wu,"A",{href:!0,rel:!0});var P_=n(Ao);bu=i(P_,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),P_.forEach(o),Wu.forEach(o),As.forEach(o),this.h()},h(){c(ge,"name","hf:doc:metadata"),c(ge,"content",JSON.stringify(I_)),c(N,"id","utilities-for-generation"),c(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N,"href","#utilities-for-generation"),c(O,"class","relative group"),c(Vo,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),c(Mo,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.greedy_search"),c(Co,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.sample"),c(Go,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),c(Ho,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),c(jo,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),c(Ce,"id","generate-outputs"),c(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ce,"href","#generate-outputs"),c(ke,"class","relative group"),c(Ko,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),c(Uo,"href","/docs/transformers/master/en/main_classes/output#transformers.file_utils.ModelOutput"),c(Yo,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),c(Jo,"href","/docs/transformers/master/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),c(He,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),c(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(He,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),c(xe,"class","relative group"),c(we,"class","docstring"),c(Ee,"class","docstring"),c(je,"class","docstring"),c(W,"class","docstring"),c(Re,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),c(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Re,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),c(Le,"class","relative group"),c(Pe,"class","docstring"),c(De,"class","docstring"),c(Ke,"class","docstring"),c(V,"class","docstring"),c(Ue,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),c(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ue,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),c(ze,"class","relative group"),c(Fe,"class","docstring"),c(Se,"class","docstring"),c(Ye,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),c(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ye,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),c(Oe,"class","relative group"),c(qe,"class","docstring"),c(Be,"class","docstring"),c(Xe,"id","transformers.LogitsProcessor"),c(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xe,"href","#transformers.LogitsProcessor"),c(Ie,"class","relative group"),c(rr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Qe,"class","docstring"),c(M,"class","docstring"),c(sr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(nr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(ar,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(ir,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(cr,"class","docstring"),c(C,"class","docstring"),c(Ze,"class","docstring"),c(G,"class","docstring"),c(dr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Cn,"class","docstring"),c(H,"class","docstring"),c(mr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(Gn,"class","docstring"),c(j,"class","docstring"),c(ur,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Hn,"class","docstring"),c(R,"class","docstring"),c(gr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(jn,"class","docstring"),c(K,"class","docstring"),c(vr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(Rn,"class","docstring"),c(U,"class","docstring"),c(br,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Rt,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),c(Rt,"rel","nofollow"),c(Kn,"class","docstring"),c(Y,"class","docstring"),c(yr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Un,"class","docstring"),c(X,"class","docstring"),c($r,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Yt,"href","https://arxiv.org/abs/2010.00904"),c(Yt,"rel","nofollow"),c(Yn,"class","docstring"),c(J,"class","docstring"),c(kr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(xr,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.group_beam_search"),c(Jt,"href","https://arxiv.org/pdf/1610.02424.pdf"),c(Jt,"rel","nofollow"),c(Xn,"class","docstring"),c(Q,"class","docstring"),c(Er,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Jn,"class","docstring"),c(Z,"class","docstring"),c(Lr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(Zn,"class","docstring"),c(ee,"class","docstring"),c(Pr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsProcessor"),c(ra,"class","docstring"),c(te,"class","docstring"),c(rt,"class","docstring"),c(oe,"class","docstring"),c(Dr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),c(zr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),c(Fr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),c(Sr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsWarper"),c(Or,"class","docstring"),c(re,"class","docstring"),c(st,"class","docstring"),c(se,"class","docstring"),c(Br,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(pa,"class","docstring"),c(ne,"class","docstring"),c(Ar,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(ma,"class","docstring"),c(ae,"class","docstring"),c(Wr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.LogitsWarper"),c(fa,"class","docstring"),c(ie,"class","docstring"),c(Mr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),c(ua,"class","docstring"),c(ce,"class","docstring"),c(Cr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),c(ga,"class","docstring"),c(le,"class","docstring"),c(Hr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),c(_a,"class","docstring"),c(de,"class","docstring"),c(at,"id","transformers.StoppingCriteria"),c(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(at,"href","#transformers.StoppingCriteria"),c(Ae,"class","relative group"),c(jr,"href","/docs/transformers/master/en/internal/generation_utils#transformers.StoppingCriteria"),c(Rr,"class","docstring"),c(pe,"class","docstring"),c(Kr,"class","docstring"),c(_o,"class","docstring"),c(Ur,"class","docstring"),c(me,"class","docstring"),c(Yr,"class","docstring"),c(fe,"class","docstring"),c(ct,"id","transformers.BeamScorer"),c(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ct,"href","#transformers.BeamScorer"),c(Ne,"class","relative group"),c(Xr,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_search"),c(Jr,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.beam_sample"),c(Qr,"class","docstring"),c(Zr,"class","docstring"),c(S,"class","docstring"),c(ts,"href","/docs/transformers/master/en/internal/generation_utils#transformers.BeamScorer"),c(Fo,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),c(Fo,"rel","nofollow"),c(So,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),c(So,"rel","nofollow"),c(wa,"class","docstring"),c(Ea,"class","docstring"),c(x,"class","docstring"),c(lt,"id","transformers.top_k_top_p_filtering"),c(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lt,"href","#transformers.top_k_top_p_filtering"),c(Ve,"class","relative group"),c(Bo,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),c(Bo,"rel","nofollow"),c(ue,"class","docstring"),c(Ao,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),c(Ao,"rel","nofollow"),c(he,"class","docstring")},m(e,p){t(document.head,ge),m(e,Wo,p),m(e,O,p),t(O,N),t(N,Ns),h(ft,Ns,null),t(O,Ec),t(O,Ws),t(Ws,Lc),m(e,Ba,p),m(e,T,p),t(T,Pc),t(T,Vo),t(Vo,Dc),t(T,zc),t(T,Mo),t(Mo,Fc),t(T,Sc),t(T,Co),t(Co,Oc),t(T,qc),t(T,Go),t(Go,Bc),t(T,Ic),t(T,Ho),t(Ho,Ac),t(T,Nc),t(T,jo),t(jo,Wc),t(T,Vc),m(e,Ia,p),m(e,Ro,p),t(Ro,Mc),m(e,Aa,p),m(e,ke,p),t(ke,Ce),t(Ce,Vs),h(ut,Vs,null),t(ke,Cc),t(ke,Ms),t(Ms,Gc),m(e,Na,p),m(e,q,p),t(q,Hc),t(q,Ko),t(Ko,jc),t(q,Rc),t(q,Uo),t(Uo,Kc),t(q,Uc),t(q,Yo),t(Yo,Yc),t(q,Xc),m(e,Wa,p),m(e,Xo,p),t(Xo,Jc),m(e,Va,p),h(ht,e,p),m(e,Ma,p),m(e,_e,p),t(_e,Qc),t(_e,Cs),t(Cs,Zc),t(_e,el),t(_e,Jo),t(Jo,tl),t(_e,ol),m(e,Ca,p),m(e,B,p),t(B,Qo),t(Qo,Gs),t(Gs,rl),t(Qo,sl),t(B,nl),t(B,Zo),t(Zo,Hs),t(Hs,al),t(Zo,il),t(B,cl),t(B,er),t(er,js),t(js,ll),t(er,dl),t(B,pl),t(B,tr),t(tr,Rs),t(Rs,ml),t(tr,fl),m(e,Ga,p),m(e,y,p),t(y,ul),t(y,Ks),t(Ks,hl),t(y,gl),t(y,Us),t(Us,_l),t(y,vl),t(y,Ys),t(Ys,bl),t(y,Tl),t(y,Xs),t(Xs,yl),t(y,$l),t(y,Js),t(Js,kl),t(y,xl),t(y,Qs),t(Qs,wl),t(y,El),m(e,Ha,p),m(e,w,p),t(w,Ll),t(w,Zs),t(Zs,Pl),t(w,Dl),t(w,en),t(en,zl),t(w,Fl),t(w,tn),t(tn,Sl),t(w,Ol),t(w,on),t(on,ql),t(w,Bl),m(e,ja,p),m(e,E,p),t(E,Il),t(E,rn),t(rn,Al),t(E,Nl),t(E,sn),t(sn,Wl),t(E,Vl),t(E,nn),t(nn,Ml),t(E,Cl),t(E,an),t(an,Gl),t(E,Hl),m(e,Ra,p),h(gt,e,p),m(e,Ka,p),m(e,Ge,p),t(Ge,jl),t(Ge,cn),t(cn,Rl),t(Ge,Kl),m(e,Ua,p),m(e,L,p),t(L,Ul),t(L,ln),t(ln,Yl),t(L,Xl),t(L,dn),t(dn,Jl),t(L,Ql),t(L,pn),t(pn,Zl),t(L,ed),t(L,mn),t(mn,td),t(L,od),m(e,Ya,p),m(e,or,p),t(or,rd),m(e,Xa,p),m(e,xe,p),t(xe,He),t(He,fn),h(_t,fn,null),t(xe,sd),t(xe,un),t(un,nd),m(e,Ja,p),m(e,we,p),h(vt,we,null),t(we,ad),t(we,hn),t(hn,id),m(e,Qa,p),m(e,Ee,p),h(bt,Ee,null),t(Ee,cd),t(Ee,gn),t(gn,ld),m(e,Za,p),m(e,W,p),h(Tt,W,null),t(W,dd),t(W,_n),t(_n,pd),t(W,md),t(W,je),h(yt,je,null),t(je,fd),t(je,vn),t(vn,ud),m(e,ei,p),m(e,Le,p),t(Le,Re),t(Re,bn),h($t,bn,null),t(Le,hd),t(Le,Tn),t(Tn,gd),m(e,ti,p),m(e,Pe,p),h(kt,Pe,null),t(Pe,_d),t(Pe,yn),t(yn,vd),m(e,oi,p),m(e,De,p),h(xt,De,null),t(De,bd),t(De,$n),t($n,Td),m(e,ri,p),m(e,V,p),h(wt,V,null),t(V,yd),t(V,kn),t(kn,$d),t(V,kd),t(V,Ke),h(Et,Ke,null),t(Ke,xd),t(Ke,xn),t(xn,wd),m(e,si,p),m(e,ze,p),t(ze,Ue),t(Ue,wn),h(Lt,wn,null),t(ze,Ed),t(ze,En),t(En,Ld),m(e,ni,p),m(e,Fe,p),h(Pt,Fe,null),t(Fe,Pd),t(Fe,Ln),t(Ln,Dd),m(e,ai,p),m(e,Se,p),h(Dt,Se,null),t(Se,zd),t(Se,Pn),t(Pn,Fd),m(e,ii,p),m(e,Oe,p),t(Oe,Ye),t(Ye,Dn),h(zt,Dn,null),t(Oe,Sd),t(Oe,zn),t(zn,Od),m(e,ci,p),m(e,qe,p),h(Ft,qe,null),t(qe,qd),t(qe,Fn),t(Fn,Bd),m(e,li,p),m(e,Be,p),h(St,Be,null),t(Be,Id),t(Be,Sn),t(Sn,Ad),m(e,di,p),m(e,Ie,p),t(Ie,Xe),t(Xe,On),h(Ot,On,null),t(Ie,Nd),t(Ie,qn),t(qn,Wd),m(e,pi,p),m(e,Je,p),t(Je,Vd),t(Je,rr),t(rr,Md),t(Je,Cd),m(e,mi,p),m(e,M,p),h(qt,M,null),t(M,Gd),t(M,Bn),t(Bn,Hd),t(M,jd),t(M,Qe),h(Bt,Qe,null),t(Qe,Rd),t(Qe,In),t(In,Kd),m(e,fi,p),m(e,C,p),h(It,C,null),t(C,Ud),t(C,$),t($,Yd),t($,sr),t(sr,Xd),t($,Jd),t($,nr),t(nr,Qd),t($,Zd),t($,An),t(An,ep),t($,tp),t($,Nn),t(Nn,Wn),t(Wn,op),t($,rp),t($,ar),t(ar,sp),t($,np),t($,ir),t(ir,ap),t($,ip),t(C,cp),t(C,cr),h(At,cr,null),m(e,ui,p),m(e,G,p),h(Nt,G,null),t(G,lp),t(G,Vn),t(Vn,dp),t(G,pp),t(G,Ze),h(Wt,Ze,null),t(Ze,mp),t(Ze,Mn),t(Mn,fp),m(e,hi,p),m(e,H,p),h(Vt,H,null),t(H,up),t(H,lr),t(lr,dr),t(dr,hp),t(lr,gp),t(H,_p),t(H,Cn),m(e,gi,p),m(e,j,p),h(Mt,j,null),t(j,vp),t(j,pr),t(pr,mr),t(mr,bp),t(pr,Tp),t(j,yp),t(j,Gn),m(e,_i,p),m(e,R,p),h(Ct,R,null),t(R,$p),t(R,fr),t(fr,ur),t(ur,kp),t(fr,xp),t(R,wp),t(R,Hn),m(e,vi,p),m(e,K,p),h(Gt,K,null),t(K,Ep),t(K,hr),t(hr,gr),t(gr,Lp),t(hr,Pp),t(K,Dp),t(K,jn),m(e,bi,p),m(e,U,p),h(Ht,U,null),t(U,zp),t(U,_r),t(_r,vr),t(vr,Fp),t(_r,Sp),t(U,Op),t(U,Rn),m(e,Ti,p),m(e,Y,p),h(jt,Y,null),t(Y,qp),t(Y,et),t(et,br),t(br,Bp),t(et,Ip),t(et,Rt),t(Rt,Ap),t(et,Np),t(Y,Wp),t(Y,Kn),m(e,yi,p),m(e,X,p),h(Kt,X,null),t(X,Vp),t(X,Tr),t(Tr,yr),t(yr,Mp),t(Tr,Cp),t(X,Gp),t(X,Un),m(e,$i,p),m(e,J,p),h(Ut,J,null),t(J,Hp),t(J,tt),t(tt,$r),t($r,jp),t(tt,Rp),t(tt,Yt),t(Yt,Kp),t(tt,Up),t(J,Yp),t(J,Yn),m(e,ki,p),m(e,Q,p),h(Xt,Q,null),t(Q,Xp),t(Q,ve),t(ve,kr),t(kr,Jp),t(ve,Qp),t(ve,xr),t(xr,Zp),t(ve,em),t(ve,Jt),t(Jt,tm),t(ve,om),t(Q,rm),t(Q,Xn),m(e,xi,p),m(e,Z,p),h(Qt,Z,null),t(Z,sm),t(Z,wr),t(wr,Er),t(Er,nm),t(wr,am),t(Z,im),t(Z,Jn),m(e,wi,p),m(e,ee,p),h(Zt,ee,null),t(ee,cm),t(ee,ot),t(ot,Lr),t(Lr,lm),t(ot,dm),t(ot,Qn),t(Qn,pm),t(ot,mm),t(ee,fm),t(ee,Zn),m(e,Ei,p),m(e,te,p),h(eo,te,null),t(te,um),t(te,I),t(I,Pr),t(Pr,hm),t(I,gm),t(I,ea),t(ea,_m),t(I,vm),t(I,ta),t(ta,bm),t(I,Tm),t(I,oa),t(oa,ym),t(I,$m),t(te,km),t(te,ra),m(e,Li,p),m(e,oe,p),h(to,oe,null),t(oe,xm),t(oe,sa),t(sa,wm),t(oe,Em),t(oe,rt),h(oo,rt,null),t(rt,Lm),t(rt,na),t(na,Pm),m(e,Pi,p),m(e,re,p),h(ro,re,null),t(re,Dm),t(re,k),t(k,zm),t(k,Dr),t(Dr,Fm),t(k,Sm),t(k,zr),t(zr,Om),t(k,qm),t(k,aa),t(aa,Bm),t(k,Im),t(k,ia),t(ia,ca),t(ca,Am),t(k,Nm),t(k,Fr),t(Fr,Wm),t(k,Vm),t(k,Sr),t(Sr,Mm),t(k,Cm),t(re,Gm),t(re,Or),h(so,Or,null),m(e,Di,p),m(e,se,p),h(no,se,null),t(se,Hm),t(se,la),t(la,jm),t(se,Rm),t(se,st),h(ao,st,null),t(st,Km),t(st,da),t(da,Um),m(e,zi,p),m(e,ne,p),h(io,ne,null),t(ne,Ym),t(ne,qr),t(qr,Br),t(Br,Xm),t(qr,Jm),t(ne,Qm),t(ne,pa),m(e,Fi,p),m(e,ae,p),h(co,ae,null),t(ae,Zm),t(ae,Ir),t(Ir,Ar),t(Ar,ef),t(Ir,tf),t(ae,of),t(ae,ma),m(e,Si,p),m(e,ie,p),h(lo,ie,null),t(ie,rf),t(ie,Nr),t(Nr,Wr),t(Wr,sf),t(Nr,nf),t(ie,af),t(ie,fa),m(e,Oi,p),m(e,ce,p),h(po,ce,null),t(ce,cf),t(ce,Vr),t(Vr,Mr),t(Mr,lf),t(Vr,df),t(ce,pf),t(ce,ua),m(e,qi,p),m(e,le,p),h(mo,le,null),t(le,mf),t(le,nt),t(nt,Cr),t(Cr,ff),t(nt,uf),t(nt,ha),t(ha,hf),t(nt,gf),t(le,_f),t(le,ga),m(e,Bi,p),m(e,de,p),h(fo,de,null),t(de,vf),t(de,Gr),t(Gr,Hr),t(Hr,bf),t(Gr,Tf),t(de,yf),t(de,_a),m(e,Ii,p),m(e,Ae,p),t(Ae,at),t(at,va),h(uo,va,null),t(Ae,$f),t(Ae,ba),t(ba,kf),m(e,Ai,p),m(e,it,p),t(it,xf),t(it,jr),t(jr,wf),t(it,Ef),m(e,Ni,p),m(e,pe,p),h(ho,pe,null),t(pe,Lf),t(pe,Ta),t(Ta,Pf),t(pe,Df),t(pe,Rr),h(go,Rr,null),m(e,Wi,p),m(e,_o,p),t(_o,Kr),h(vo,Kr,null),m(e,Vi,p),m(e,me,p),h(bo,me,null),t(me,zf),t(me,To),t(To,Ff),t(To,ya),t(ya,Sf),t(To,Of),t(me,qf),t(me,Ur),h(yo,Ur,null),m(e,Mi,p),m(e,fe,p),h($o,fe,null),t(fe,Bf),t(fe,ko),t(ko,If),t(ko,$a),t($a,Af),t(ko,Nf),t(fe,Wf),t(fe,Yr),h(xo,Yr,null),m(e,Ci,p),m(e,Ne,p),t(Ne,ct),t(ct,ka),h(wo,ka,null),t(Ne,Vf),t(Ne,xa),t(xa,Mf),m(e,Gi,p),m(e,S,p),h(Eo,S,null),t(S,Cf),t(S,We),t(We,Gf),t(We,Xr),t(Xr,Hf),t(We,jf),t(We,Jr),t(Jr,Rf),t(We,Kf),t(S,Uf),t(S,Qr),h(Lo,Qr,null),t(S,Yf),t(S,Zr),h(Po,Zr,null),m(e,Hi,p),m(e,x,p),h(Do,x,null),t(x,Xf),t(x,es),t(es,ts),t(ts,Jf),t(es,Qf),t(x,Zf),t(x,zo),t(zo,eu),t(zo,Fo),t(Fo,tu),t(zo,ou),t(x,ru),t(x,os),t(os,su),t(os,So),t(So,nu),t(x,au),t(x,wa),t(x,iu),t(x,Ea),m(e,ji,p),m(e,Ve,p),t(Ve,lt),t(lt,La),h(Oo,La,null),t(Ve,cu),t(Ve,Pa),t(Pa,lu),m(e,Ri,p),m(e,ue,p),h(qo,ue,null),t(ue,du),t(ue,Da),t(Da,pu),t(ue,mu),t(ue,rs),t(rs,fu),t(rs,Bo),t(Bo,uu),m(e,Ki,p),m(e,he,p),h(Io,he,null),t(he,hu),t(he,za),t(za,gu),t(he,_u),t(he,ss),t(ss,vu),t(ss,Ao),t(Ao,bu),Ui=!0},p:q_,i(e){Ui||(g(ft.$$.fragment,e),g(ut.$$.fragment,e),g(ht.$$.fragment,e),g(gt.$$.fragment,e),g(_t.$$.fragment,e),g(vt.$$.fragment,e),g(bt.$$.fragment,e),g(Tt.$$.fragment,e),g(yt.$$.fragment,e),g($t.$$.fragment,e),g(kt.$$.fragment,e),g(xt.$$.fragment,e),g(wt.$$.fragment,e),g(Et.$$.fragment,e),g(Lt.$$.fragment,e),g(Pt.$$.fragment,e),g(Dt.$$.fragment,e),g(zt.$$.fragment,e),g(Ft.$$.fragment,e),g(St.$$.fragment,e),g(Ot.$$.fragment,e),g(qt.$$.fragment,e),g(Bt.$$.fragment,e),g(It.$$.fragment,e),g(At.$$.fragment,e),g(Nt.$$.fragment,e),g(Wt.$$.fragment,e),g(Vt.$$.fragment,e),g(Mt.$$.fragment,e),g(Ct.$$.fragment,e),g(Gt.$$.fragment,e),g(Ht.$$.fragment,e),g(jt.$$.fragment,e),g(Kt.$$.fragment,e),g(Ut.$$.fragment,e),g(Xt.$$.fragment,e),g(Qt.$$.fragment,e),g(Zt.$$.fragment,e),g(eo.$$.fragment,e),g(to.$$.fragment,e),g(oo.$$.fragment,e),g(ro.$$.fragment,e),g(so.$$.fragment,e),g(no.$$.fragment,e),g(ao.$$.fragment,e),g(io.$$.fragment,e),g(co.$$.fragment,e),g(lo.$$.fragment,e),g(po.$$.fragment,e),g(mo.$$.fragment,e),g(fo.$$.fragment,e),g(uo.$$.fragment,e),g(ho.$$.fragment,e),g(go.$$.fragment,e),g(vo.$$.fragment,e),g(bo.$$.fragment,e),g(yo.$$.fragment,e),g($o.$$.fragment,e),g(xo.$$.fragment,e),g(wo.$$.fragment,e),g(Eo.$$.fragment,e),g(Lo.$$.fragment,e),g(Po.$$.fragment,e),g(Do.$$.fragment,e),g(Oo.$$.fragment,e),g(qo.$$.fragment,e),g(Io.$$.fragment,e),Ui=!0)},o(e){_(ft.$$.fragment,e),_(ut.$$.fragment,e),_(ht.$$.fragment,e),_(gt.$$.fragment,e),_(_t.$$.fragment,e),_(vt.$$.fragment,e),_(bt.$$.fragment,e),_(Tt.$$.fragment,e),_(yt.$$.fragment,e),_($t.$$.fragment,e),_(kt.$$.fragment,e),_(xt.$$.fragment,e),_(wt.$$.fragment,e),_(Et.$$.fragment,e),_(Lt.$$.fragment,e),_(Pt.$$.fragment,e),_(Dt.$$.fragment,e),_(zt.$$.fragment,e),_(Ft.$$.fragment,e),_(St.$$.fragment,e),_(Ot.$$.fragment,e),_(qt.$$.fragment,e),_(Bt.$$.fragment,e),_(It.$$.fragment,e),_(At.$$.fragment,e),_(Nt.$$.fragment,e),_(Wt.$$.fragment,e),_(Vt.$$.fragment,e),_(Mt.$$.fragment,e),_(Ct.$$.fragment,e),_(Gt.$$.fragment,e),_(Ht.$$.fragment,e),_(jt.$$.fragment,e),_(Kt.$$.fragment,e),_(Ut.$$.fragment,e),_(Xt.$$.fragment,e),_(Qt.$$.fragment,e),_(Zt.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(oo.$$.fragment,e),_(ro.$$.fragment,e),_(so.$$.fragment,e),_(no.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(uo.$$.fragment,e),_(ho.$$.fragment,e),_(go.$$.fragment,e),_(vo.$$.fragment,e),_(bo.$$.fragment,e),_(yo.$$.fragment,e),_($o.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Eo.$$.fragment,e),_(Lo.$$.fragment,e),_(Po.$$.fragment,e),_(Do.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Io.$$.fragment,e),Ui=!1},d(e){o(ge),e&&o(Wo),e&&o(O),v(ft),e&&o(Ba),e&&o(T),e&&o(Ia),e&&o(Ro),e&&o(Aa),e&&o(ke),v(ut),e&&o(Na),e&&o(q),e&&o(Wa),e&&o(Xo),e&&o(Va),v(ht,e),e&&o(Ma),e&&o(_e),e&&o(Ca),e&&o(B),e&&o(Ga),e&&o(y),e&&o(Ha),e&&o(w),e&&o(ja),e&&o(E),e&&o(Ra),v(gt,e),e&&o(Ka),e&&o(Ge),e&&o(Ua),e&&o(L),e&&o(Ya),e&&o(or),e&&o(Xa),e&&o(xe),v(_t),e&&o(Ja),e&&o(we),v(vt),e&&o(Qa),e&&o(Ee),v(bt),e&&o(Za),e&&o(W),v(Tt),v(yt),e&&o(ei),e&&o(Le),v($t),e&&o(ti),e&&o(Pe),v(kt),e&&o(oi),e&&o(De),v(xt),e&&o(ri),e&&o(V),v(wt),v(Et),e&&o(si),e&&o(ze),v(Lt),e&&o(ni),e&&o(Fe),v(Pt),e&&o(ai),e&&o(Se),v(Dt),e&&o(ii),e&&o(Oe),v(zt),e&&o(ci),e&&o(qe),v(Ft),e&&o(li),e&&o(Be),v(St),e&&o(di),e&&o(Ie),v(Ot),e&&o(pi),e&&o(Je),e&&o(mi),e&&o(M),v(qt),v(Bt),e&&o(fi),e&&o(C),v(It),v(At),e&&o(ui),e&&o(G),v(Nt),v(Wt),e&&o(hi),e&&o(H),v(Vt),e&&o(gi),e&&o(j),v(Mt),e&&o(_i),e&&o(R),v(Ct),e&&o(vi),e&&o(K),v(Gt),e&&o(bi),e&&o(U),v(Ht),e&&o(Ti),e&&o(Y),v(jt),e&&o(yi),e&&o(X),v(Kt),e&&o($i),e&&o(J),v(Ut),e&&o(ki),e&&o(Q),v(Xt),e&&o(xi),e&&o(Z),v(Qt),e&&o(wi),e&&o(ee),v(Zt),e&&o(Ei),e&&o(te),v(eo),e&&o(Li),e&&o(oe),v(to),v(oo),e&&o(Pi),e&&o(re),v(ro),v(so),e&&o(Di),e&&o(se),v(no),v(ao),e&&o(zi),e&&o(ne),v(io),e&&o(Fi),e&&o(ae),v(co),e&&o(Si),e&&o(ie),v(lo),e&&o(Oi),e&&o(ce),v(po),e&&o(qi),e&&o(le),v(mo),e&&o(Bi),e&&o(de),v(fo),e&&o(Ii),e&&o(Ae),v(uo),e&&o(Ai),e&&o(it),e&&o(Ni),e&&o(pe),v(ho),v(go),e&&o(Wi),e&&o(_o),v(vo),e&&o(Vi),e&&o(me),v(bo),v(yo),e&&o(Mi),e&&o(fe),v($o),v(xo),e&&o(Ci),e&&o(Ne),v(wo),e&&o(Gi),e&&o(S),v(Eo),v(Lo),v(Po),e&&o(Hi),e&&o(x),v(Do),e&&o(ji),e&&o(Ve),v(Oo),e&&o(Ri),e&&o(ue),v(qo),e&&o(Ki),e&&o(he),v(Io)}}}const I_={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function A_(wc,ge,Wo){let{fw:O}=ge;return wc.$$set=N=>{"fw"in N&&Wo(0,O=N.fw)},[O]}class G_ extends z_{constructor(ge){super();F_(this,ge,A_,B_,S_,{fw:0})}}export{G_ as default,I_ as metadata};
