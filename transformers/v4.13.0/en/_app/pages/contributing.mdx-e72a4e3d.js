import{S as _y,i as Ey,s as ky,e as l,k as n,w as m,t as s,L as Py,c as a,d as o,m as h,a as i,x as y,h as r,b as d,J as e,g as f,y as v,K as Iy,q as g,o as w,B as b}from"../chunks/vendor-e859c359.js";import{I as C}from"../chunks/IconCopyLink-5fae3b20.js";import{C as $}from"../chunks/CodeBlock-ce4317c2.js";import"../chunks/CopyButton-77addb3d.js";function Oy(oi){let U,oo,A,M,Yo,Ke,si,Bo,ri,dl,so,li,cl,ro,ai,pl,$e,ii,Qe,ni,hi,ml,te,_e,zo,Ze,ui,Jo,fi,yl,lo,di,vl,x,Ko,ci,pi,Qo,mi,yi,Zo,vi,gi,Vo,wi,gl,T,bi,Ve,$i,_i,Xo,Ei,ki,es,Pi,Ii,wl,ao,ts,Oi,bl,oe,Ee,os,Xe,Si,ss,Ci,$l,io,Ai,_l,se,ke,rs,et,xi,ls,Ti,El,no,Li,kl,Pe,Di,as,Ni,qi,Pl,ho,Ri,Il,F,O,Wi,is,Gi,ji,ns,Hi,Mi,hs,Ui,Fi,us,Yi,Bi,zi,fs,Ji,Ki,tt,Qi,ds,Zi,Vi,Ol,uo,Xi,Sl,ot,Cl,fo,en,Al,st,xl,re,Ie,cs,rt,tn,ps,on,Tl,co,sn,Ll,Y,ms,rn,ln,ys,an,nn,vs,hn,Dl,po,un,Nl,L,fn,gs,dn,cn,ws,pn,mn,lt,yn,vn,ql,le,Oe,bs,at,gn,$s,wn,Rl,mo,bn,Wl,yo,_s,$n,Gl,B,Es,_n,En,ks,kn,Pn,Ps,In,jl,S,it,On,Is,Sn,Cn,An,nt,xn,Os,Tn,Ln,Dn,Ss,Nn,qn,Cs,Rn,Hl,vo,Wn,Ml,D,Gn,As,jn,Hn,xs,Mn,Un,ht,Fn,Yn,Ul,ae,Se,Ts,ut,Bn,Ls,zn,Fl,go,Jn,Yl,E,Kn,Ds,Qn,Zn,Ns,Vn,Xn,qs,eh,th,Rs,oh,sh,ft,rh,lh,Bl,wo,ah,zl,_,Ws,dt,ih,ct,nh,hh,uh,pt,Gs,fh,dh,mt,ch,ie,js,ph,mh,yt,yh,Ce,Hs,vh,gh,Ms,wh,bh,$h,P,Us,_h,Eh,vt,kh,ne,Ph,Fs,Ih,Oh,Ys,Sh,Ch,Ah,gt,xh,Bs,Th,Lh,Dh,wt,Nh,he,qh,zs,Rh,Wh,Js,Gh,jh,Hh,c,Ks,Mh,Uh,Qs,Fh,Yh,bt,Bh,ue,zh,Zs,Jh,Kh,Vs,Qh,Zh,Vh,$t,Xh,_t,eu,Xs,tu,ou,su,z,er,ru,lu,tr,au,iu,or,nu,hu,uu,Et,fu,Ae,sr,du,cu,rr,pu,mu,yu,kt,vu,lr,gu,wu,Pt,bu,ar,$u,_u,fe,Eu,ir,ku,Pu,nr,Iu,Ou,Su,It,Cu,de,Au,hr,xu,Tu,ur,Lu,Du,Nu,Ot,qu,St,Ru,Ct,Wu,Gu,ju,fr,Hu,Mu,At,Uu,dr,Fu,Yu,xt,Bu,cr,Tt,zu,pr,Ju,Ku,Qu,mr,yr,Zu,Jl,ce,xe,vr,Lt,Vu,gr,Xu,Kl,k,wr,ef,tf,br,of,sf,Dt,rf,$r,lf,af,nf,_r,hf,uf,bo,ff,pe,Nt,df,Er,cf,pf,mf,me,yf,kr,vf,gf,Pr,wf,bf,$f,qt,_f,Ir,Ef,kf,Pf,Rt,If,Or,Of,Sf,Ql,Wt,Cf,$o,Af,Zl,ye,Te,Sr,Gt,xf,Cr,Tf,Vl,J,Lf,jt,Df,Nf,Ht,qf,Rf,Xl,N,Wf,Ar,Gf,jf,xr,Hf,Mf,Tr,Uf,Ff,ea,Mt,ta,_o,Yf,oa,Ut,sa,q,Bf,Lr,zf,Jf,Dr,Kf,Qf,Nr,Zf,Vf,ra,Eo,Xf,la,K,ed,qr,td,od,Rr,sd,rd,aa,Ft,ia,Q,ld,Wr,ad,id,Gr,nd,hd,na,Z,ud,jr,fd,dd,Hr,cd,pd,ha,V,md,Mr,yd,vd,Ur,gd,wd,ua,Yt,fa,ve,Le,Fr,Bt,bd,Yr,$d,da,R,_d,Br,Ed,kd,zt,Pd,Id,Jt,Od,Sd,ca,ge,De,zr,Kt,Cd,Jr,Ad,pa,we,Ne,Kr,Qt,xd,Qr,Td,ma,X,Ld,Zr,Dd,Nd,Vr,qd,Rd,ya,ko,Xr,Wd,va,Po,Gd,ga,W,Io,Zt,jd,Hd,Md,el,Ud,Fd,qe,Yd,tl,Bd,zd,ol,Jd,Kd,Vt,Qd,sl,Zd,Vd,wa,Re,Xd,rl,ec,tc,ba,be,We,ll,Xt,oc,al,sc,$a,Oo,rc,_a,Ge,il,lc,ac,nl,ic,Ea,eo,ka;return Ke=new C({}),Ze=new C({}),Xe=new C({}),et=new C({}),ot=new $({props:{code:"transformers-cli env,",highlighted:'transformers-cli <span class="hljs-built_in">env</span>'}}),st=new $({props:{code:"python src/transformers/commands/transformers_cli.py env,",highlighted:'python src/transformers/commands/transformers_cli.py <span class="hljs-built_in">env</span>'}}),rt=new C({}),at=new C({}),ut=new C({}),mt=new $({props:{code:`$ git clone git@github.com:<your Github handle>/transformers.git
$ cd transformers
$ git remote add upstream https://github.com/huggingface/transformers.git,`,highlighted:`$ git <span class="hljs-built_in">clone</span> git@github.com:&lt;your Github handle&gt;/transformers.git
$ <span class="hljs-built_in">cd</span> transformers
$ git remote add upstream https://github.com/huggingface/transformers.git`}}),yt=new $({props:{code:"$ git checkout -b a-descriptive-name-for-my-changes,",highlighted:"$ git checkout -b a-descriptive-name-for-my-changes"}}),vt=new $({props:{code:'$ pip install -e ".[dev]",',highlighted:'$ pip install -e <span class="hljs-string">&quot;.[dev]&quot;</span>'}}),wt=new $({props:{code:`$ git clone https://github.com/huggingface/datasets
$ cd datasets
$ pip install -e .,`,highlighted:`$ git <span class="hljs-built_in">clone</span> https://github.com/huggingface/datasets
$ <span class="hljs-built_in">cd</span> datasets
$ pip install -e .`}}),bt=new $({props:{code:"$ make test,",highlighted:'$ make <span class="hljs-built_in">test</span>'}}),$t=new $({props:{code:"$ python -m pytest -n 3 --dist=loadfile -s -v ./tests/,",highlighted:"$ python -m pytest -n 3 --dist=loadfile -s -v ./tests/"}}),Et=new $({props:{code:"$ make style,",highlighted:"$ make style"}}),kt=new $({props:{code:"$ make quality,",highlighted:"$ make quality"}}),Pt=new $({props:{code:"$ make fixup,",highlighted:"$ make fixup"}}),It=new $({props:{code:"$ make docs,",highlighted:"$ make docs"}}),Ot=new $({props:{code:`$ git add modified_file.py
$ git commit,`,highlighted:`$ git add modified_file.py
$ git commit`}}),At=new $({props:{code:`$ git fetch upstream
$ git rebase upstream/master,`,highlighted:`$ git fetch upstream
$ git rebase upstream/master`}}),xt=new $({props:{code:"$ git push -u origin a-descriptive-name-for-my-changes,",highlighted:"$ git push -u origin a-descriptive-name-for-my-changes"}}),Lt=new C({}),Gt=new C({}),Mt=new $({props:{code:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/,",highlighted:"$ python -m pytest -n auto --dist=loadfile -s -v ./tests/"}}),Ut=new $({props:{code:`$ pip install -r examples/xxx/requirements.txt  # only needed the first time
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/,`,highlighted:`$ pip install -r examples/xxx/requirements.txt  <span class="hljs-comment"># only needed the first time</span>
$ python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),Ft=new $({props:{code:`$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/,`,highlighted:`$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./tests/
$ RUN_SLOW=<span class="hljs-built_in">yes</span> python -m pytest -n auto --dist=loadfile -s -v ./examples/`}}),Yt=new $({props:{code:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v,`,highlighted:`$ python -m unittest discover -s tests -t . -v
$ python -m unittest discover -s examples -t examples -v`}}),Bt=new C({}),Kt=new C({}),Qt=new C({}),Xt=new C({}),eo=new $({props:{code:`$ git checkout -b your-branch-for-syncing
$ git pull --squash --no-commit upstream master
$ git commit -m '<your message without GitHub references>'
$ git push --set-upstream origin your-branch-for-syncing,`,highlighted:`<span class="hljs-symbol">$</span> git checkout -b your-branch-<span class="hljs-keyword">for</span>-syncing
<span class="hljs-symbol">$</span> git pull --squash --<span class="hljs-keyword">no</span>-commit upstream master
<span class="hljs-symbol">$</span> git commit -m <span class="hljs-string">&#x27;&lt;your message without GitHub references&gt;&#x27;</span>
<span class="hljs-symbol">$</span> git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin your-branch-for-syncing</span>`}}),{c(){U=l("meta"),oo=n(),A=l("h1"),M=l("a"),Yo=l("span"),m(Ke.$$.fragment),si=n(),Bo=l("span"),ri=s("How to contribute to transformers?"),dl=n(),so=l("p"),li=s(`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),cl=n(),ro=l("p"),ai=s(`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),pl=n(),$e=l("p"),ii=s(`Whichever way you choose to contribute, please be mindful to respect our
`),Qe=l("a"),ni=s("code of conduct"),hi=s("."),ml=n(),te=l("h2"),_e=l("a"),zo=l("span"),m(Ze.$$.fragment),ui=n(),Jo=l("span"),fi=s("You can contribute in so many ways!"),yl=n(),lo=l("p"),di=s("There are 4 ways you can contribute to transformers:"),vl=n(),x=l("ul"),Ko=l("li"),ci=s("Fixing outstanding issues with the existing code;"),pi=n(),Qo=l("li"),mi=s("Implementing new models;"),yi=n(),Zo=l("li"),vi=s("Contributing to the examples or to the documentation;"),gi=n(),Vo=l("li"),wi=s("Submitting issues related to bugs or desired new features."),gl=n(),T=l("p"),bi=s("In particular there is a special "),Ve=l("a"),$i=s(`Good First
Issue`),_i=s(` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),Xo=l("code"),Ei=s("Good Second Issue"),ki=s(` label. These are
typically slightly more complicated than the Issues with just `),es=l("code"),Pi=s("Good First Issue"),Ii=s(` label. But if you
feel you know what you\u2019re doing, go for it.`),wl=n(),ao=l("p"),ts=l("em"),Oi=s("All are equally valuable to the community."),bl=n(),oe=l("h2"),Ee=l("a"),os=l("span"),m(Xe.$$.fragment),Si=n(),ss=l("span"),Ci=s("Submitting a new issue or feature request"),$l=n(),io=l("p"),Ai=s(`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),_l=n(),se=l("h3"),ke=l("a"),rs=l("span"),m(et.$$.fragment),xi=n(),ls=l("span"),Ti=s("Did you find a bug?"),El=n(),no=l("p"),Li=s(`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),kl=n(),Pe=l("p"),Di=s("First, we would really appreciate it if you could "),as=l("strong"),Ni=s(`make sure the bug was not
already reported`),qi=s(" (use the search bar on Github under Issues)."),Pl=n(),ho=l("p"),Ri=s("Did not find it? :( So we can act quickly on it, please follow these steps:"),Il=n(),F=l("ul"),O=l("li"),Wi=s("Include your "),is=l("strong"),Gi=s("OS type and version"),ji=s(", the versions of "),ns=l("strong"),Hi=s("Python"),Mi=s(", "),hs=l("strong"),Ui=s("PyTorch"),Fi=s(` and
`),us=l("strong"),Yi=s("Tensorflow"),Bi=s(" when applicable;"),zi=n(),fs=l("li"),Ji=s(`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),Ki=n(),tt=l("li"),Qi=s("Provide the "),ds=l("em"),Zi=s("full"),Vi=s(" traceback if an exception is raised."),Ol=n(),uo=l("p"),Xi=s("To get the OS and software versions automatically, you can run the following command:"),Sl=n(),m(ot.$$.fragment),Cl=n(),fo=l("p"),en=s("or from the root of the repository the following command:"),Al=n(),m(st.$$.fragment),xl=n(),re=l("h3"),Ie=l("a"),cs=l("span"),m(rt.$$.fragment),tn=n(),ps=l("span"),on=s("Do you want to implement a new model?"),Tl=n(),co=l("p"),sn=s("Awesome! Please provide the following information:"),Ll=n(),Y=l("ul"),ms=l("li"),rn=s("Short description of the model and link to the paper;"),ln=n(),ys=l("li"),an=s("Link to the implementation if it is open-source;"),nn=n(),vs=l("li"),hn=s("Link to the model weights if they are available."),Dl=n(),po=l("p"),un=s(`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),Nl=n(),L=l("p"),fn=s("We have added a "),gs=l("strong"),dn=s("detailed guide and templates"),cn=s(` to guide you in the process of adding a new model. You can find them
in the `),ws=l("code"),pn=s("templates"),mn=s("("),lt=l("a"),yn=s("https://github.com/huggingface/transformers/tree/master/templates"),vn=s(") folder."),ql=n(),le=l("h3"),Oe=l("a"),bs=l("span"),m(at.$$.fragment),gn=n(),$s=l("span"),wn=s("Do you want a new feature (that is not a model)?"),Rl=n(),mo=l("p"),bn=s("A world-class feature request addresses the following points:"),Wl=n(),yo=l("ol"),_s=l("li"),$n=s("Motivation first:"),Gl=n(),B=l("ul"),Es=l("li"),_n=s(`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),En=n(),ks=l("li"),kn=s(`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),Pn=n(),Ps=l("li"),In=s(`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),jl=n(),S=l("ol"),it=l("li"),On=s("Write a "),Is=l("em"),Sn=s("full paragraph"),Cn=s(" describing the feature;"),An=n(),nt=l("li"),xn=s("Provide a "),Os=l("strong"),Tn=s("code snippet"),Ln=s(" that demonstrates its future use;"),Dn=n(),Ss=l("li"),Nn=s("In case this is related to a paper, please attach a link;"),qn=n(),Cs=l("li"),Rn=s("Attach any additional information (drawings, screenshots, etc.) you think may help."),Hl=n(),vo=l("p"),Wn=s(`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),Ml=n(),D=l("p"),Gn=s("We have added "),As=l("strong"),jn=s("templates"),Hn=s(` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),xs=l("code"),Mn=s("templates"),Un=s("("),ht=l("a"),Fn=s("https://github.com/huggingface/transformers/tree/master/templates"),Yn=s(`)
folder.`),Ul=n(),ae=l("h2"),Se=l("a"),Ts=l("span"),m(ut.$$.fragment),Bn=n(),Ls=l("span"),zn=s("Start contributing! (Pull Requests)"),Fl=n(),go=l("p"),Jn=s(`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),Yl=n(),E=l("p"),Kn=s("You will need basic "),Ds=l("code"),Qn=s("git"),Zn=s(` proficiency to be able to contribute to
`),Ns=l("code"),Vn=s("transformers"),Xn=s(". "),qs=l("code"),eh=s("git"),th=s(` is not the easiest tool to use but it has the greatest
manual. Type `),Rs=l("code"),oh=s("git --help"),sh=s(" in a shell and enjoy. If you prefer books, "),ft=l("a"),rh=s(`Pro
Git`),lh=s(" is a very good reference."),Bl=n(),wo=l("p"),ah=s("Follow these steps to start contributing:"),zl=n(),_=l("ol"),Ws=l("li"),dt=l("p"),ih=s("Fork the "),ct=l("a"),nh=s("repository"),hh=s(` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),uh=n(),pt=l("li"),Gs=l("p"),fh=s("Clone your fork to your local disk, and add the base repository as a remote:"),dh=n(),m(mt.$$.fragment),ch=n(),ie=l("li"),js=l("p"),ph=s("Create a new branch to hold your development changes:"),mh=n(),m(yt.$$.fragment),yh=n(),Ce=l("p"),Hs=l("strong"),vh=s("Do not"),gh=s(" work on the "),Ms=l("code"),wh=s("master"),bh=s(" branch."),$h=n(),P=l("li"),Us=l("p"),_h=s("Set up a development environment by running the following command in a virtual environment:"),Eh=n(),m(vt.$$.fragment),kh=n(),ne=l("p"),Ph=s(`(If transformers was already installed in the virtual environment, remove
it with `),Fs=l("code"),Ih=s("pip uninstall transformers"),Oh=s(` before reinstalling it in editable
mode with the `),Ys=l("code"),Sh=s("-e"),Ch=s(" flag.)"),Ah=n(),gt=l("p"),xh=s("To run the full test suite, you might need the additional dependency on "),Bs=l("code"),Th=s("datasets"),Lh=s(` which requires a separate source
install:`),Dh=n(),m(wt.$$.fragment),Nh=n(),he=l("p"),qh=s("If you have already cloned that repo, you might need to "),zs=l("code"),Rh=s("git pull"),Wh=s(" to get the most recent changes in the "),Js=l("code"),Gh=s("datasets"),jh=s(`
library.`),Hh=n(),c=l("li"),Ks=l("p"),Mh=s("Develop the features on your branch."),Uh=n(),Qs=l("p"),Fh=s(`As you work on the features, you should make sure that the test suite
passes:`),Yh=n(),m(bt.$$.fragment),Bh=n(),ue=l("p"),zh=s("Note, that this command uses "),Zs=l("code"),Jh=s("-n auto"),Kh=s(" pytest flag, therefore, it will start as many parallel "),Vs=l("code"),Qh=s("pytest"),Zh=s(" processes as the number of your computer\u2019s CPU-cores, and if you have lots of those and a few GPUs and not a great amount of RAM, it\u2019s likely to overload your computer. Therefore, to run the test suite, you may want to consider using this command instead:"),Vh=n(),m($t.$$.fragment),Xh=n(),_t=l("p"),eu=s("Adjust the value of "),Xs=l("code"),tu=s("-n"),ou=s(" to fit the load your hardware can support."),su=n(),z=l("p"),er=l("code"),ru=s("transformers"),lu=s(" relies on "),tr=l("code"),au=s("black"),iu=s(" and "),or=l("code"),nu=s("isort"),hu=s(` to format its source code
consistently. After you make changes, format them with:`),uu=n(),m(Et.$$.fragment),fu=n(),Ae=l("p"),sr=l("code"),du=s("transformers"),cu=s(" also uses "),rr=l("code"),pu=s("flake8"),mu=s(` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),yu=n(),m(kt.$$.fragment),vu=n(),lr=l("p"),gu=s("You can do the automatic style corrections and code verifications that can\u2019t be automated in one go:"),wu=n(),m(Pt.$$.fragment),bu=n(),ar=l("p"),$u=s("This target is also optimized to only work with files modified by the PR you\u2019re working on."),_u=n(),fe=l("p"),Eu=s("If you\u2019re modifying documents under "),ir=l("code"),ku=s("docs/source"),Pu=s(`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements, by
running `),nr=l("code"),Iu=s("pip install .[tf,torch,docs]"),Ou=s(` once from the root of this repository
and then run:`),Su=n(),m(It.$$.fragment),Cu=n(),de=l("p"),Au=s("Once you\u2019re happy with your changes, add changed files using "),hr=l("code"),xu=s("git add"),Tu=s(` and
make a commit with `),ur=l("code"),Lu=s("git commit"),Du=s(" to record your changes locally:"),Nu=n(),m(Ot.$$.fragment),qu=n(),St=l("p"),Ru=s("Please write "),Ct=l("a"),Wu=s(`good commit
messages`),Gu=s("."),ju=n(),fr=l("p"),Hu=s(`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),Mu=n(),m(At.$$.fragment),Uu=n(),dr=l("p"),Fu=s("Push the changes to your account using:"),Yu=n(),m(xt.$$.fragment),Bu=n(),cr=l("li"),Tt=l("p"),zu=s("Once you are satisfied ("),pr=l("strong"),Ju=s("and the checklist below is happy too"),Ku=s(`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),Qu=n(),mr=l("li"),yr=l("p"),Zu=s(`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),Jl=n(),ce=l("h3"),xe=l("a"),vr=l("span"),m(Lt.$$.fragment),Vu=n(),gr=l("span"),Xu=s("Checklist"),Kl=n(),k=l("ol"),wr=l("li"),ef=s("The title of your pull request should be a summary of its contribution;"),tf=n(),br=l("li"),of=s(`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),sf=n(),Dt=l("li"),rf=s("To indicate a work in progress please prefix the title with "),$r=l("code"),lf=s("[WIP]"),af=s(`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),nf=n(),_r=l("li"),hf=s("Make sure existing tests pass;"),uf=n(),bo=l("li"),ff=s("Add high-coverage tests. No quality testing = no merge."),pe=l("ul"),Nt=l("li"),df=s(`If you are adding a new model, make sure that you use
`),Er=l("code"),cf=s("ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),pf=s(", which triggers the common tests."),mf=n(),me=l("li"),yf=s("If you are adding new "),kr=l("code"),vf=s("@slow"),gf=s(` tests, make sure they pass using
`),Pr=l("code"),wf=s("RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),bf=s("."),$f=n(),qt=l("li"),_f=s(`If you are adding a new tokenizer, write tests, and make sure
`),Ir=l("code"),Ef=s("RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),kf=s(` passes.
CircleCI does not run the slow tests, but github actions does every night!`),Pf=n(),Rt=l("li"),If=s("All public methods must have informative docstrings that work nicely with sphinx. See "),Or=l("code"),Of=s("modeling_bert.py"),Sf=s(` for an
example.`),Ql=n(),Wt=l("p"),Cf=s("See more about the checks run on a pull request in our "),$o=l("a"),Af=s("PR guide"),Zl=n(),ye=l("h3"),Te=l("a"),Sr=l("span"),m(Gt.$$.fragment),xf=n(),Cr=l("span"),Tf=s("Tests"),Vl=n(),J=l("p"),Lf=s(`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),jt=l("a"),Df=s("tests folder"),Nf=s(` and examples tests in the
`),Ht=l("a"),qf=s("examples folder"),Rf=s("."),Xl=n(),N=l("p"),Wf=s("We like "),Ar=l("code"),Gf=s("pytest"),jf=s(" and "),xr=l("code"),Hf=s("pytest-xdist"),Mf=s(` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Tr=l("code"),Uf=s("pytest"),Ff=s(" for the library:"),ea=n(),m(Mt.$$.fragment),ta=n(),_o=l("p"),Yf=s("and for the examples:"),oa=n(),m(Ut.$$.fragment),sa=n(),q=l("p"),Bf=s("In fact, that\u2019s how "),Lr=l("code"),zf=s("make test"),Jf=s(" and "),Dr=l("code"),Kf=s("make test-examples"),Qf=s(" are implemented (sans the "),Nr=l("code"),Zf=s("pip install"),Vf=s(" line)!"),ra=n(),Eo=l("p"),Xf=s(`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),la=n(),K=l("p"),ed=s("By default, slow tests are skipped. Set the "),qr=l("code"),td=s("RUN_SLOW"),od=s(` environment variable to
`),Rr=l("code"),sd=s("yes"),rd=s(` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),aa=n(),m(Ft.$$.fragment),ia=n(),Q=l("p"),ld=s("Likewise, set the "),Wr=l("code"),ad=s("RUN_CUSTOM_TOKENIZERS"),id=s(" environment variable to "),Gr=l("code"),nd=s("yes"),hd=s(` to run
tests for custom tokenizers, which don\u2019t run by default either.`),na=n(),Z=l("p"),ud=s("\u{1F917} Transformers uses "),jr=l("code"),fd=s("pytest"),dd=s(` as a test runner only. It doesn\u2019t use any
`),Hr=l("code"),cd=s("pytest"),pd=s("-specific features in the test suite itself."),ha=n(),V=l("p"),md=s("This means "),Mr=l("code"),yd=s("unittest"),vd=s(` is fully supported. Here\u2019s how to run tests with
`),Ur=l("code"),gd=s("unittest"),wd=s(":"),ua=n(),m(Yt.$$.fragment),fa=n(),ve=l("h3"),Le=l("a"),Fr=l("span"),m(Bt.$$.fragment),bd=n(),Yr=l("span"),$d=s("Style guide"),da=n(),R=l("p"),_d=s("For documentation strings, "),Br=l("code"),Ed=s("transformers"),kd=s(" follows the "),zt=l("a"),Pd=s("google style"),Id=s(`.
Check our `),Jt=l("a"),Od=s("documentation writing guide"),Sd=s(`
for more information.`),ca=n(),ge=l("h4"),De=l("a"),zr=l("span"),m(Kt.$$.fragment),Cd=n(),Jr=l("span"),Ad=s("This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"),pa=n(),we=l("h3"),Ne=l("a"),Kr=l("span"),m(Qt.$$.fragment),xd=n(),Qr=l("span"),Td=s("Develop on Windows"),ma=n(),X=l("p"),Ld=s("On windows, you need to configure git to transform Windows "),Zr=l("code"),Dd=s("CRLF"),Nd=s(" line endings to Linux "),Vr=l("code"),qd=s("LF"),Rd=s(" line endings:"),ya=n(),ko=l("p"),Xr=l("code"),Wd=s("git config core.autocrlf input"),va=n(),Po=l("p"),Gd=s("One way one can run the make command on Window is to pass by MSYS2:"),ga=n(),W=l("ol"),Io=l("li"),Zt=l("a"),jd=s("Download MSYS2"),Hd=s(", we assume to have it installed in C:\\msys64"),Md=n(),el=l("li"),Ud=s("Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),Fd=n(),qe=l("li"),Yd=s("Run in the shell: "),tl=l("code"),Bd=s("pacman -Syu"),zd=s(" and install make with "),ol=l("code"),Jd=s("pacman -S make"),Kd=n(),Vt=l("li"),Qd=s("Add "),sl=l("code"),Zd=s("C:\\msys64\\usr\\bin"),Vd=s(" to your PATH environment variable."),wa=n(),Re=l("p"),Xd=s("You can now use "),rl=l("code"),ec=s("make"),tc=s(" from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),ba=n(),be=l("h3"),We=l("a"),ll=l("span"),m(Xt.$$.fragment),oc=n(),al=l("span"),sc=s("Syncing forked master with upstream (HuggingFace) master"),$a=n(),Oo=l("p"),rc=s(`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnessary notifications to the developers involved in these PRs,
when syncing the master branch of a forked repository, please, follow these steps:`),_a=n(),Ge=l("ol"),il=l("li"),lc=s("When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked master."),ac=n(),nl=l("li"),ic=s("If a PR is absolutely necessary, use the following steps after checking out your branch:"),Ea=n(),m(eo.$$.fragment),this.h()},l(t){const u=Py('[data-svelte="svelte-1phssyn"]',document.head);U=a(u,"META",{name:!0,content:!0}),u.forEach(o),oo=h(t),A=a(t,"H1",{class:!0});var Pa=i(A);M=a(Pa,"A",{id:!0,class:!0,href:!0});var fc=i(M);Yo=a(fc,"SPAN",{});var dc=i(Yo);y(Ke.$$.fragment,dc),dc.forEach(o),fc.forEach(o),si=h(Pa),Bo=a(Pa,"SPAN",{});var cc=i(Bo);ri=r(cc,"How to contribute to transformers?"),cc.forEach(o),Pa.forEach(o),dl=h(t),so=a(t,"P",{});var pc=i(so);li=r(pc,`Everyone is welcome to contribute, and we value everybody\u2019s contribution. Code
is thus not the only way to help the community. Answering questions, helping
others, reaching out and improving the documentations are immensely valuable to
the community.`),pc.forEach(o),cl=h(t),ro=a(t,"P",{});var mc=i(ro);ai=r(mc,`It also helps us if you spread the word: reference the library from blog posts
on the awesome projects it made possible, shout out on Twitter every time it has
helped you, or simply star the repo to say \u201Cthank you\u201D.`),mc.forEach(o),pl=h(t),$e=a(t,"P",{});var Ia=i($e);ii=r(Ia,`Whichever way you choose to contribute, please be mindful to respect our
`),Qe=a(Ia,"A",{href:!0,rel:!0});var yc=i(Qe);ni=r(yc,"code of conduct"),yc.forEach(o),hi=r(Ia,"."),Ia.forEach(o),ml=h(t),te=a(t,"H2",{class:!0});var Oa=i(te);_e=a(Oa,"A",{id:!0,class:!0,href:!0});var vc=i(_e);zo=a(vc,"SPAN",{});var gc=i(zo);y(Ze.$$.fragment,gc),gc.forEach(o),vc.forEach(o),ui=h(Oa),Jo=a(Oa,"SPAN",{});var wc=i(Jo);fi=r(wc,"You can contribute in so many ways!"),wc.forEach(o),Oa.forEach(o),yl=h(t),lo=a(t,"P",{});var bc=i(lo);di=r(bc,"There are 4 ways you can contribute to transformers:"),bc.forEach(o),vl=h(t),x=a(t,"UL",{});var je=i(x);Ko=a(je,"LI",{});var $c=i(Ko);ci=r($c,"Fixing outstanding issues with the existing code;"),$c.forEach(o),pi=h(je),Qo=a(je,"LI",{});var _c=i(Qo);mi=r(_c,"Implementing new models;"),_c.forEach(o),yi=h(je),Zo=a(je,"LI",{});var Ec=i(Zo);vi=r(Ec,"Contributing to the examples or to the documentation;"),Ec.forEach(o),gi=h(je),Vo=a(je,"LI",{});var kc=i(Vo);wi=r(kc,"Submitting issues related to bugs or desired new features."),kc.forEach(o),je.forEach(o),gl=h(t),T=a(t,"P",{});var He=i(T);bi=r(He,"In particular there is a special "),Ve=a(He,"A",{href:!0,rel:!0});var Pc=i(Ve);$i=r(Pc,`Good First
Issue`),Pc.forEach(o),_i=r(He,` listing. It will give you a list of
open Issues that are open to anybody to work on. Just comment in the issue that you\u2019d like to work
on it. In that same listing you will also find some Issues with `),Xo=a(He,"CODE",{});var Ic=i(Xo);Ei=r(Ic,"Good Second Issue"),Ic.forEach(o),ki=r(He,` label. These are
typically slightly more complicated than the Issues with just `),es=a(He,"CODE",{});var Oc=i(es);Pi=r(Oc,"Good First Issue"),Oc.forEach(o),Ii=r(He,` label. But if you
feel you know what you\u2019re doing, go for it.`),He.forEach(o),wl=h(t),ao=a(t,"P",{});var Sc=i(ao);ts=a(Sc,"EM",{});var Cc=i(ts);Oi=r(Cc,"All are equally valuable to the community."),Cc.forEach(o),Sc.forEach(o),bl=h(t),oe=a(t,"H2",{class:!0});var Sa=i(oe);Ee=a(Sa,"A",{id:!0,class:!0,href:!0});var Ac=i(Ee);os=a(Ac,"SPAN",{});var xc=i(os);y(Xe.$$.fragment,xc),xc.forEach(o),Ac.forEach(o),Si=h(Sa),ss=a(Sa,"SPAN",{});var Tc=i(ss);Ci=r(Tc,"Submitting a new issue or feature request"),Tc.forEach(o),Sa.forEach(o),$l=h(t),io=a(t,"P",{});var Lc=i(io);Ai=r(Lc,`Do your best to follow these guidelines when submitting an issue or a feature
request. It will make it easier for us to come back to you quickly and with good
feedback.`),Lc.forEach(o),_l=h(t),se=a(t,"H3",{class:!0});var Ca=i(se);ke=a(Ca,"A",{id:!0,class:!0,href:!0});var Dc=i(ke);rs=a(Dc,"SPAN",{});var Nc=i(rs);y(et.$$.fragment,Nc),Nc.forEach(o),Dc.forEach(o),xi=h(Ca),ls=a(Ca,"SPAN",{});var qc=i(ls);Ti=r(qc,"Did you find a bug?"),qc.forEach(o),Ca.forEach(o),El=h(t),no=a(t,"P",{});var Rc=i(no);Li=r(Rc,`The \u{1F917} Transformers library is robust and reliable thanks to the users who notify us of
the problems they encounter. So thank you for reporting an issue.`),Rc.forEach(o),kl=h(t),Pe=a(t,"P",{});var Aa=i(Pe);Di=r(Aa,"First, we would really appreciate it if you could "),as=a(Aa,"STRONG",{});var Wc=i(as);Ni=r(Wc,`make sure the bug was not
already reported`),Wc.forEach(o),qi=r(Aa," (use the search bar on Github under Issues)."),Aa.forEach(o),Pl=h(t),ho=a(t,"P",{});var Gc=i(ho);Ri=r(Gc,"Did not find it? :( So we can act quickly on it, please follow these steps:"),Gc.forEach(o),Il=h(t),F=a(t,"UL",{});var So=i(F);O=a(So,"LI",{});var ee=i(O);Wi=r(ee,"Include your "),is=a(ee,"STRONG",{});var jc=i(is);Gi=r(jc,"OS type and version"),jc.forEach(o),ji=r(ee,", the versions of "),ns=a(ee,"STRONG",{});var Hc=i(ns);Hi=r(Hc,"Python"),Hc.forEach(o),Mi=r(ee,", "),hs=a(ee,"STRONG",{});var Mc=i(hs);Ui=r(Mc,"PyTorch"),Mc.forEach(o),Fi=r(ee,` and
`),us=a(ee,"STRONG",{});var Uc=i(us);Yi=r(Uc,"Tensorflow"),Uc.forEach(o),Bi=r(ee," when applicable;"),ee.forEach(o),zi=h(So),fs=a(So,"LI",{});var Fc=i(fs);Ji=r(Fc,`A short, self-contained, code snippet that allows us to reproduce the bug in
less than 30s;`),Fc.forEach(o),Ki=h(So),tt=a(So,"LI",{});var xa=i(tt);Qi=r(xa,"Provide the "),ds=a(xa,"EM",{});var Yc=i(ds);Zi=r(Yc,"full"),Yc.forEach(o),Vi=r(xa," traceback if an exception is raised."),xa.forEach(o),So.forEach(o),Ol=h(t),uo=a(t,"P",{});var Bc=i(uo);Xi=r(Bc,"To get the OS and software versions automatically, you can run the following command:"),Bc.forEach(o),Sl=h(t),y(ot.$$.fragment,t),Cl=h(t),fo=a(t,"P",{});var zc=i(fo);en=r(zc,"or from the root of the repository the following command:"),zc.forEach(o),Al=h(t),y(st.$$.fragment,t),xl=h(t),re=a(t,"H3",{class:!0});var Ta=i(re);Ie=a(Ta,"A",{id:!0,class:!0,href:!0});var Jc=i(Ie);cs=a(Jc,"SPAN",{});var Kc=i(cs);y(rt.$$.fragment,Kc),Kc.forEach(o),Jc.forEach(o),tn=h(Ta),ps=a(Ta,"SPAN",{});var Qc=i(ps);on=r(Qc,"Do you want to implement a new model?"),Qc.forEach(o),Ta.forEach(o),Tl=h(t),co=a(t,"P",{});var Zc=i(co);sn=r(Zc,"Awesome! Please provide the following information:"),Zc.forEach(o),Ll=h(t),Y=a(t,"UL",{});var Co=i(Y);ms=a(Co,"LI",{});var Vc=i(ms);rn=r(Vc,"Short description of the model and link to the paper;"),Vc.forEach(o),ln=h(Co),ys=a(Co,"LI",{});var Xc=i(ys);an=r(Xc,"Link to the implementation if it is open-source;"),Xc.forEach(o),nn=h(Co),vs=a(Co,"LI",{});var ep=i(vs);hn=r(ep,"Link to the model weights if they are available."),ep.forEach(o),Co.forEach(o),Dl=h(t),po=a(t,"P",{});var tp=i(po);un=r(tp,`If you are willing to contribute the model yourself, let us know so we can best
guide you.`),tp.forEach(o),Nl=h(t),L=a(t,"P",{});var Me=i(L);fn=r(Me,"We have added a "),gs=a(Me,"STRONG",{});var op=i(gs);dn=r(op,"detailed guide and templates"),op.forEach(o),cn=r(Me,` to guide you in the process of adding a new model. You can find them
in the `),ws=a(Me,"CODE",{});var sp=i(ws);pn=r(sp,"templates"),sp.forEach(o),mn=r(Me,"("),lt=a(Me,"A",{href:!0,rel:!0});var rp=i(lt);yn=r(rp,"https://github.com/huggingface/transformers/tree/master/templates"),rp.forEach(o),vn=r(Me,") folder."),Me.forEach(o),ql=h(t),le=a(t,"H3",{class:!0});var La=i(le);Oe=a(La,"A",{id:!0,class:!0,href:!0});var lp=i(Oe);bs=a(lp,"SPAN",{});var ap=i(bs);y(at.$$.fragment,ap),ap.forEach(o),lp.forEach(o),gn=h(La),$s=a(La,"SPAN",{});var ip=i($s);wn=r(ip,"Do you want a new feature (that is not a model)?"),ip.forEach(o),La.forEach(o),Rl=h(t),mo=a(t,"P",{});var np=i(mo);bn=r(np,"A world-class feature request addresses the following points:"),np.forEach(o),Wl=h(t),yo=a(t,"OL",{});var hp=i(yo);_s=a(hp,"LI",{});var up=i(_s);$n=r(up,"Motivation first:"),up.forEach(o),hp.forEach(o),Gl=h(t),B=a(t,"UL",{});var Ao=i(B);Es=a(Ao,"LI",{});var fp=i(Es);_n=r(fp,`Is it related to a problem/frustration with the library? If so, please explain
why. Providing a code snippet that demonstrates the problem is best.`),fp.forEach(o),En=h(Ao),ks=a(Ao,"LI",{});var dp=i(ks);kn=r(dp,`Is it related to something you would need for a project? We\u2019d love to hear
about it!`),dp.forEach(o),Pn=h(Ao),Ps=a(Ao,"LI",{});var cp=i(Ps);In=r(cp,`Is it something you worked on and think could benefit the community?
Awesome! Tell us what problem it solved for you.`),cp.forEach(o),Ao.forEach(o),jl=h(t),S=a(t,"OL",{start:!0});var Ue=i(S);it=a(Ue,"LI",{});var Da=i(it);On=r(Da,"Write a "),Is=a(Da,"EM",{});var pp=i(Is);Sn=r(pp,"full paragraph"),pp.forEach(o),Cn=r(Da," describing the feature;"),Da.forEach(o),An=h(Ue),nt=a(Ue,"LI",{});var Na=i(nt);xn=r(Na,"Provide a "),Os=a(Na,"STRONG",{});var mp=i(Os);Tn=r(mp,"code snippet"),mp.forEach(o),Ln=r(Na," that demonstrates its future use;"),Na.forEach(o),Dn=h(Ue),Ss=a(Ue,"LI",{});var yp=i(Ss);Nn=r(yp,"In case this is related to a paper, please attach a link;"),yp.forEach(o),qn=h(Ue),Cs=a(Ue,"LI",{});var vp=i(Cs);Rn=r(vp,"Attach any additional information (drawings, screenshots, etc.) you think may help."),vp.forEach(o),Ue.forEach(o),Hl=h(t),vo=a(t,"P",{});var gp=i(vo);Wn=r(gp,`If your issue is well written we\u2019re already 80% of the way there by the time you
post it.`),gp.forEach(o),Ml=h(t),D=a(t,"P",{});var Fe=i(D);Gn=r(Fe,"We have added "),As=a(Fe,"STRONG",{});var wp=i(As);jn=r(wp,"templates"),wp.forEach(o),Hn=r(Fe,` to guide you in the process of adding a new example script for training or testing the
models in the library. You can find them in the `),xs=a(Fe,"CODE",{});var bp=i(xs);Mn=r(bp,"templates"),bp.forEach(o),Un=r(Fe,"("),ht=a(Fe,"A",{href:!0,rel:!0});var $p=i(ht);Fn=r($p,"https://github.com/huggingface/transformers/tree/master/templates"),$p.forEach(o),Yn=r(Fe,`)
folder.`),Fe.forEach(o),Ul=h(t),ae=a(t,"H2",{class:!0});var qa=i(ae);Se=a(qa,"A",{id:!0,class:!0,href:!0});var _p=i(Se);Ts=a(_p,"SPAN",{});var Ep=i(Ts);y(ut.$$.fragment,Ep),Ep.forEach(o),_p.forEach(o),Bn=h(qa),Ls=a(qa,"SPAN",{});var kp=i(Ls);zn=r(kp,"Start contributing! (Pull Requests)"),kp.forEach(o),qa.forEach(o),Fl=h(t),go=a(t,"P",{});var Pp=i(go);Jn=r(Pp,`Before writing code, we strongly advise you to search through the existing PRs or
issues to make sure that nobody is already working on the same thing. If you are
unsure, it is always a good idea to open an issue to get some feedback.`),Pp.forEach(o),Yl=h(t),E=a(t,"P",{});var G=i(E);Kn=r(G,"You will need basic "),Ds=a(G,"CODE",{});var Ip=i(Ds);Qn=r(Ip,"git"),Ip.forEach(o),Zn=r(G,` proficiency to be able to contribute to
`),Ns=a(G,"CODE",{});var Op=i(Ns);Vn=r(Op,"transformers"),Op.forEach(o),Xn=r(G,". "),qs=a(G,"CODE",{});var Sp=i(qs);eh=r(Sp,"git"),Sp.forEach(o),th=r(G,` is not the easiest tool to use but it has the greatest
manual. Type `),Rs=a(G,"CODE",{});var Cp=i(Rs);oh=r(Cp,"git --help"),Cp.forEach(o),sh=r(G," in a shell and enjoy. If you prefer books, "),ft=a(G,"A",{href:!0,rel:!0});var Ap=i(ft);rh=r(Ap,`Pro
Git`),Ap.forEach(o),lh=r(G," is a very good reference."),G.forEach(o),Bl=h(t),wo=a(t,"P",{});var xp=i(wo);ah=r(xp,"Follow these steps to start contributing:"),xp.forEach(o),zl=h(t),_=a(t,"OL",{});var I=i(_);Ws=a(I,"LI",{});var Tp=i(Ws);dt=a(Tp,"P",{});var Ra=i(dt);ih=r(Ra,"Fork the "),ct=a(Ra,"A",{href:!0,rel:!0});var Lp=i(ct);nh=r(Lp,"repository"),Lp.forEach(o),hh=r(Ra,` by
clicking on the \u2018Fork\u2019 button on the repository\u2019s page. This creates a copy of the code
under your GitHub user account.`),Ra.forEach(o),Tp.forEach(o),uh=h(I),pt=a(I,"LI",{});var Wa=i(pt);Gs=a(Wa,"P",{});var Dp=i(Gs);fh=r(Dp,"Clone your fork to your local disk, and add the base repository as a remote:"),Dp.forEach(o),dh=h(Wa),y(mt.$$.fragment,Wa),Wa.forEach(o),ch=h(I),ie=a(I,"LI",{});var xo=i(ie);js=a(xo,"P",{});var Np=i(js);ph=r(Np,"Create a new branch to hold your development changes:"),Np.forEach(o),mh=h(xo),y(yt.$$.fragment,xo),yh=h(xo),Ce=a(xo,"P",{});var hl=i(Ce);Hs=a(hl,"STRONG",{});var qp=i(Hs);vh=r(qp,"Do not"),qp.forEach(o),gh=r(hl," work on the "),Ms=a(hl,"CODE",{});var Rp=i(Ms);wh=r(Rp,"master"),Rp.forEach(o),bh=r(hl," branch."),hl.forEach(o),xo.forEach(o),$h=h(I),P=a(I,"LI",{});var j=i(P);Us=a(j,"P",{});var Wp=i(Us);_h=r(Wp,"Set up a development environment by running the following command in a virtual environment:"),Wp.forEach(o),Eh=h(j),y(vt.$$.fragment,j),kh=h(j),ne=a(j,"P",{});var To=i(ne);Ph=r(To,`(If transformers was already installed in the virtual environment, remove
it with `),Fs=a(To,"CODE",{});var Gp=i(Fs);Ih=r(Gp,"pip uninstall transformers"),Gp.forEach(o),Oh=r(To,` before reinstalling it in editable
mode with the `),Ys=a(To,"CODE",{});var jp=i(Ys);Sh=r(jp,"-e"),jp.forEach(o),Ch=r(To," flag.)"),To.forEach(o),Ah=h(j),gt=a(j,"P",{});var Ga=i(gt);xh=r(Ga,"To run the full test suite, you might need the additional dependency on "),Bs=a(Ga,"CODE",{});var Hp=i(Bs);Th=r(Hp,"datasets"),Hp.forEach(o),Lh=r(Ga,` which requires a separate source
install:`),Ga.forEach(o),Dh=h(j),y(wt.$$.fragment,j),Nh=h(j),he=a(j,"P",{});var Lo=i(he);qh=r(Lo,"If you have already cloned that repo, you might need to "),zs=a(Lo,"CODE",{});var Mp=i(zs);Rh=r(Mp,"git pull"),Mp.forEach(o),Wh=r(Lo," to get the most recent changes in the "),Js=a(Lo,"CODE",{});var Up=i(Js);Gh=r(Up,"datasets"),Up.forEach(o),jh=r(Lo,`
library.`),Lo.forEach(o),j.forEach(o),Hh=h(I),c=a(I,"LI",{});var p=i(c);Ks=a(p,"P",{});var Fp=i(Ks);Mh=r(Fp,"Develop the features on your branch."),Fp.forEach(o),Uh=h(p),Qs=a(p,"P",{});var Yp=i(Qs);Fh=r(Yp,`As you work on the features, you should make sure that the test suite
passes:`),Yp.forEach(o),Yh=h(p),y(bt.$$.fragment,p),Bh=h(p),ue=a(p,"P",{});var Do=i(ue);zh=r(Do,"Note, that this command uses "),Zs=a(Do,"CODE",{});var Bp=i(Zs);Jh=r(Bp,"-n auto"),Bp.forEach(o),Kh=r(Do," pytest flag, therefore, it will start as many parallel "),Vs=a(Do,"CODE",{});var zp=i(Vs);Qh=r(zp,"pytest"),zp.forEach(o),Zh=r(Do," processes as the number of your computer\u2019s CPU-cores, and if you have lots of those and a few GPUs and not a great amount of RAM, it\u2019s likely to overload your computer. Therefore, to run the test suite, you may want to consider using this command instead:"),Do.forEach(o),Vh=h(p),y($t.$$.fragment,p),Xh=h(p),_t=a(p,"P",{});var ja=i(_t);eu=r(ja,"Adjust the value of "),Xs=a(ja,"CODE",{});var Jp=i(Xs);tu=r(Jp,"-n"),Jp.forEach(o),ou=r(ja," to fit the load your hardware can support."),ja.forEach(o),su=h(p),z=a(p,"P",{});var to=i(z);er=a(to,"CODE",{});var Kp=i(er);ru=r(Kp,"transformers"),Kp.forEach(o),lu=r(to," relies on "),tr=a(to,"CODE",{});var Qp=i(tr);au=r(Qp,"black"),Qp.forEach(o),iu=r(to," and "),or=a(to,"CODE",{});var Zp=i(or);nu=r(Zp,"isort"),Zp.forEach(o),hu=r(to,` to format its source code
consistently. After you make changes, format them with:`),to.forEach(o),uu=h(p),y(Et.$$.fragment,p),fu=h(p),Ae=a(p,"P",{});var ul=i(Ae);sr=a(ul,"CODE",{});var Vp=i(sr);du=r(Vp,"transformers"),Vp.forEach(o),cu=r(ul," also uses "),rr=a(ul,"CODE",{});var Xp=i(rr);pu=r(Xp,"flake8"),Xp.forEach(o),mu=r(ul,` and a few custom scripts to check for coding mistakes. Quality
control runs in CI, however you can also run the same checks with:`),ul.forEach(o),yu=h(p),y(kt.$$.fragment,p),vu=h(p),lr=a(p,"P",{});var em=i(lr);gu=r(em,"You can do the automatic style corrections and code verifications that can\u2019t be automated in one go:"),em.forEach(o),wu=h(p),y(Pt.$$.fragment,p),bu=h(p),ar=a(p,"P",{});var tm=i(ar);$u=r(tm,"This target is also optimized to only work with files modified by the PR you\u2019re working on."),tm.forEach(o),_u=h(p),fe=a(p,"P",{});var No=i(fe);Eu=r(No,"If you\u2019re modifying documents under "),ir=a(No,"CODE",{});var om=i(ir);ku=r(om,"docs/source"),om.forEach(o),Pu=r(No,`, make sure to validate that
they can still be built. This check also runs in CI. To run a local check
make sure you have installed the documentation builder requirements, by
running `),nr=a(No,"CODE",{});var sm=i(nr);Iu=r(sm,"pip install .[tf,torch,docs]"),sm.forEach(o),Ou=r(No,` once from the root of this repository
and then run:`),No.forEach(o),Su=h(p),y(It.$$.fragment,p),Cu=h(p),de=a(p,"P",{});var qo=i(de);Au=r(qo,"Once you\u2019re happy with your changes, add changed files using "),hr=a(qo,"CODE",{});var rm=i(hr);xu=r(rm,"git add"),rm.forEach(o),Tu=r(qo,` and
make a commit with `),ur=a(qo,"CODE",{});var lm=i(ur);Lu=r(lm,"git commit"),lm.forEach(o),Du=r(qo," to record your changes locally:"),qo.forEach(o),Nu=h(p),y(Ot.$$.fragment,p),qu=h(p),St=a(p,"P",{});var Ha=i(St);Ru=r(Ha,"Please write "),Ct=a(Ha,"A",{href:!0,rel:!0});var am=i(Ct);Wu=r(am,`good commit
messages`),am.forEach(o),Gu=r(Ha,"."),Ha.forEach(o),ju=h(p),fr=a(p,"P",{});var im=i(fr);Hu=r(im,`It is a good idea to sync your copy of the code with the original
repository regularly. This way you can quickly account for changes:`),im.forEach(o),Mu=h(p),y(At.$$.fragment,p),Uu=h(p),dr=a(p,"P",{});var nm=i(dr);Fu=r(nm,"Push the changes to your account using:"),nm.forEach(o),Yu=h(p),y(xt.$$.fragment,p),p.forEach(o),Bu=h(I),cr=a(I,"LI",{});var hm=i(cr);Tt=a(hm,"P",{});var Ma=i(Tt);zu=r(Ma,"Once you are satisfied ("),pr=a(Ma,"STRONG",{});var um=i(pr);Ju=r(um,"and the checklist below is happy too"),um.forEach(o),Ku=r(Ma,`), go to the
webpage of your fork on GitHub. Click on \u2018Pull request\u2019 to send your changes
to the project maintainers for review.`),Ma.forEach(o),hm.forEach(o),Qu=h(I),mr=a(I,"LI",{});var fm=i(mr);yr=a(fm,"P",{});var dm=i(yr);Zu=r(dm,`It\u2019s ok if maintainers ask you for changes. It happens to core contributors
too! So everyone can see the changes in the Pull request, work in your local
branch and push the changes to your fork. They will automatically appear in
the pull request.`),dm.forEach(o),fm.forEach(o),I.forEach(o),Jl=h(t),ce=a(t,"H3",{class:!0});var Ua=i(ce);xe=a(Ua,"A",{id:!0,class:!0,href:!0});var cm=i(xe);vr=a(cm,"SPAN",{});var pm=i(vr);y(Lt.$$.fragment,pm),pm.forEach(o),cm.forEach(o),Vu=h(Ua),gr=a(Ua,"SPAN",{});var mm=i(gr);Xu=r(mm,"Checklist"),mm.forEach(o),Ua.forEach(o),Kl=h(t),k=a(t,"OL",{});var H=i(k);wr=a(H,"LI",{});var ym=i(wr);ef=r(ym,"The title of your pull request should be a summary of its contribution;"),ym.forEach(o),tf=h(H),br=a(H,"LI",{});var vm=i(br);of=r(vm,`If your pull request addresses an issue, please mention the issue number in
the pull request description to make sure they are linked (and people
consulting the issue know you are working on it);`),vm.forEach(o),sf=h(H),Dt=a(H,"LI",{});var Fa=i(Dt);rf=r(Fa,"To indicate a work in progress please prefix the title with "),$r=a(Fa,"CODE",{});var gm=i($r);lf=r(gm,"[WIP]"),gm.forEach(o),af=r(Fa,`. These
are useful to avoid duplicated work, and to differentiate it from PRs ready
to be merged;`),Fa.forEach(o),nf=h(H),_r=a(H,"LI",{});var wm=i(_r);hf=r(wm,"Make sure existing tests pass;"),wm.forEach(o),uf=h(H),bo=a(H,"LI",{});var nc=i(bo);ff=r(nc,"Add high-coverage tests. No quality testing = no merge."),pe=a(nc,"UL",{});var Ro=i(pe);Nt=a(Ro,"LI",{});var Ya=i(Nt);df=r(Ya,`If you are adding a new model, make sure that you use
`),Er=a(Ya,"CODE",{});var bm=i(Er);cf=r(bm,"ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)"),bm.forEach(o),pf=r(Ya,", which triggers the common tests."),Ya.forEach(o),mf=h(Ro),me=a(Ro,"LI",{});var Wo=i(me);yf=r(Wo,"If you are adding new "),kr=a(Wo,"CODE",{});var $m=i(kr);vf=r($m,"@slow"),$m.forEach(o),gf=r(Wo,` tests, make sure they pass using
`),Pr=a(Wo,"CODE",{});var _m=i(Pr);wf=r(_m,"RUN_SLOW=1 python -m pytest tests/test_my_new_model.py"),_m.forEach(o),bf=r(Wo,"."),Wo.forEach(o),$f=h(Ro),qt=a(Ro,"LI",{});var Ba=i(qt);_f=r(Ba,`If you are adding a new tokenizer, write tests, and make sure
`),Ir=a(Ba,"CODE",{});var Em=i(Ir);Ef=r(Em,"RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py"),Em.forEach(o),kf=r(Ba,` passes.
CircleCI does not run the slow tests, but github actions does every night!`),Ba.forEach(o),Ro.forEach(o),nc.forEach(o),Pf=h(H),Rt=a(H,"LI",{});var za=i(Rt);If=r(za,"All public methods must have informative docstrings that work nicely with sphinx. See "),Or=a(za,"CODE",{});var km=i(Or);Of=r(km,"modeling_bert.py"),km.forEach(o),Sf=r(za,` for an
example.`),za.forEach(o),H.forEach(o),Ql=h(t),Wt=a(t,"P",{});var hc=i(Wt);Cf=r(hc,"See more about the checks run on a pull request in our "),$o=a(hc,"A",{href:!0});var Pm=i($o);Af=r(Pm,"PR guide"),Pm.forEach(o),hc.forEach(o),Zl=h(t),ye=a(t,"H3",{class:!0});var Ja=i(ye);Te=a(Ja,"A",{id:!0,class:!0,href:!0});var Im=i(Te);Sr=a(Im,"SPAN",{});var Om=i(Sr);y(Gt.$$.fragment,Om),Om.forEach(o),Im.forEach(o),xf=h(Ja),Cr=a(Ja,"SPAN",{});var Sm=i(Cr);Tf=r(Sm,"Tests"),Sm.forEach(o),Ja.forEach(o),Vl=h(t),J=a(t,"P",{});var Go=i(J);Lf=r(Go,`An extensive test suite is included to test the library behavior and several examples. Library tests can be found in
the `),jt=a(Go,"A",{href:!0,rel:!0});var Cm=i(jt);Df=r(Cm,"tests folder"),Cm.forEach(o),Nf=r(Go,` and examples tests in the
`),Ht=a(Go,"A",{href:!0,rel:!0});var Am=i(Ht);qf=r(Am,"examples folder"),Am.forEach(o),Rf=r(Go,"."),Go.forEach(o),Xl=h(t),N=a(t,"P",{});var Ye=i(N);Wf=r(Ye,"We like "),Ar=a(Ye,"CODE",{});var xm=i(Ar);Gf=r(xm,"pytest"),xm.forEach(o),jf=r(Ye," and "),xr=a(Ye,"CODE",{});var Tm=i(xr);Hf=r(Tm,"pytest-xdist"),Tm.forEach(o),Mf=r(Ye,` because it\u2019s faster. From the root of the
repository, here\u2019s how to run tests with `),Tr=a(Ye,"CODE",{});var Lm=i(Tr);Uf=r(Lm,"pytest"),Lm.forEach(o),Ff=r(Ye," for the library:"),Ye.forEach(o),ea=h(t),y(Mt.$$.fragment,t),ta=h(t),_o=a(t,"P",{});var Dm=i(_o);Yf=r(Dm,"and for the examples:"),Dm.forEach(o),oa=h(t),y(Ut.$$.fragment,t),sa=h(t),q=a(t,"P",{});var Be=i(q);Bf=r(Be,"In fact, that\u2019s how "),Lr=a(Be,"CODE",{});var Nm=i(Lr);zf=r(Nm,"make test"),Nm.forEach(o),Jf=r(Be," and "),Dr=a(Be,"CODE",{});var qm=i(Dr);Kf=r(qm,"make test-examples"),qm.forEach(o),Qf=r(Be," are implemented (sans the "),Nr=a(Be,"CODE",{});var Rm=i(Nr);Zf=r(Rm,"pip install"),Rm.forEach(o),Vf=r(Be," line)!"),Be.forEach(o),ra=h(t),Eo=a(t,"P",{});var Wm=i(Eo);Xf=r(Wm,`You can specify a smaller set of tests in order to test only the feature
you\u2019re working on.`),Wm.forEach(o),la=h(t),K=a(t,"P",{});var jo=i(K);ed=r(jo,"By default, slow tests are skipped. Set the "),qr=a(jo,"CODE",{});var Gm=i(qr);td=r(Gm,"RUN_SLOW"),Gm.forEach(o),od=r(jo,` environment variable to
`),Rr=a(jo,"CODE",{});var jm=i(Rr);sd=r(jm,"yes"),jm.forEach(o),rd=r(jo,` to run them. This will download many gigabytes of models \u2014 make sure you
have enough disk space and a good Internet connection, or a lot of patience!`),jo.forEach(o),aa=h(t),y(Ft.$$.fragment,t),ia=h(t),Q=a(t,"P",{});var Ho=i(Q);ld=r(Ho,"Likewise, set the "),Wr=a(Ho,"CODE",{});var Hm=i(Wr);ad=r(Hm,"RUN_CUSTOM_TOKENIZERS"),Hm.forEach(o),id=r(Ho," environment variable to "),Gr=a(Ho,"CODE",{});var Mm=i(Gr);nd=r(Mm,"yes"),Mm.forEach(o),hd=r(Ho,` to run
tests for custom tokenizers, which don\u2019t run by default either.`),Ho.forEach(o),na=h(t),Z=a(t,"P",{});var Mo=i(Z);ud=r(Mo,"\u{1F917} Transformers uses "),jr=a(Mo,"CODE",{});var Um=i(jr);fd=r(Um,"pytest"),Um.forEach(o),dd=r(Mo,` as a test runner only. It doesn\u2019t use any
`),Hr=a(Mo,"CODE",{});var Fm=i(Hr);cd=r(Fm,"pytest"),Fm.forEach(o),pd=r(Mo,"-specific features in the test suite itself."),Mo.forEach(o),ha=h(t),V=a(t,"P",{});var Uo=i(V);md=r(Uo,"This means "),Mr=a(Uo,"CODE",{});var Ym=i(Mr);yd=r(Ym,"unittest"),Ym.forEach(o),vd=r(Uo,` is fully supported. Here\u2019s how to run tests with
`),Ur=a(Uo,"CODE",{});var Bm=i(Ur);gd=r(Bm,"unittest"),Bm.forEach(o),wd=r(Uo,":"),Uo.forEach(o),ua=h(t),y(Yt.$$.fragment,t),fa=h(t),ve=a(t,"H3",{class:!0});var Ka=i(ve);Le=a(Ka,"A",{id:!0,class:!0,href:!0});var zm=i(Le);Fr=a(zm,"SPAN",{});var Jm=i(Fr);y(Bt.$$.fragment,Jm),Jm.forEach(o),zm.forEach(o),bd=h(Ka),Yr=a(Ka,"SPAN",{});var Km=i(Yr);$d=r(Km,"Style guide"),Km.forEach(o),Ka.forEach(o),da=h(t),R=a(t,"P",{});var ze=i(R);_d=r(ze,"For documentation strings, "),Br=a(ze,"CODE",{});var Qm=i(Br);Ed=r(Qm,"transformers"),Qm.forEach(o),kd=r(ze," follows the "),zt=a(ze,"A",{href:!0,rel:!0});var Zm=i(zt);Pd=r(Zm,"google style"),Zm.forEach(o),Id=r(ze,`.
Check our `),Jt=a(ze,"A",{href:!0,rel:!0});var Vm=i(Jt);Od=r(Vm,"documentation writing guide"),Vm.forEach(o),Sd=r(ze,`
for more information.`),ze.forEach(o),ca=h(t),ge=a(t,"H4",{class:!0});var Qa=i(ge);De=a(Qa,"A",{id:!0,class:!0,href:!0});var Xm=i(De);zr=a(Xm,"SPAN",{});var ey=i(zr);y(Kt.$$.fragment,ey),ey.forEach(o),Xm.forEach(o),Cd=h(Qa),Jr=a(Qa,"SPAN",{});var ty=i(Jr);Ad=r(ty,"This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"),ty.forEach(o),Qa.forEach(o),pa=h(t),we=a(t,"H3",{class:!0});var Za=i(we);Ne=a(Za,"A",{id:!0,class:!0,href:!0});var oy=i(Ne);Kr=a(oy,"SPAN",{});var sy=i(Kr);y(Qt.$$.fragment,sy),sy.forEach(o),oy.forEach(o),xd=h(Za),Qr=a(Za,"SPAN",{});var ry=i(Qr);Td=r(ry,"Develop on Windows"),ry.forEach(o),Za.forEach(o),ma=h(t),X=a(t,"P",{});var Fo=i(X);Ld=r(Fo,"On windows, you need to configure git to transform Windows "),Zr=a(Fo,"CODE",{});var ly=i(Zr);Dd=r(ly,"CRLF"),ly.forEach(o),Nd=r(Fo," line endings to Linux "),Vr=a(Fo,"CODE",{});var ay=i(Vr);qd=r(ay,"LF"),ay.forEach(o),Rd=r(Fo," line endings:"),Fo.forEach(o),ya=h(t),ko=a(t,"P",{});var iy=i(ko);Xr=a(iy,"CODE",{});var ny=i(Xr);Wd=r(ny,"git config core.autocrlf input"),ny.forEach(o),iy.forEach(o),va=h(t),Po=a(t,"P",{});var hy=i(Po);Gd=r(hy,"One way one can run the make command on Window is to pass by MSYS2:"),hy.forEach(o),ga=h(t),W=a(t,"OL",{});var Je=i(W);Io=a(Je,"LI",{});var uc=i(Io);Zt=a(uc,"A",{href:!0,rel:!0});var uy=i(Zt);jd=r(uy,"Download MSYS2"),uy.forEach(o),Hd=r(uc,", we assume to have it installed in C:\\msys64"),uc.forEach(o),Md=h(Je),el=a(Je,"LI",{});var fy=i(el);Ud=r(fy,"Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)"),fy.forEach(o),Fd=h(Je),qe=a(Je,"LI",{});var fl=i(qe);Yd=r(fl,"Run in the shell: "),tl=a(fl,"CODE",{});var dy=i(tl);Bd=r(dy,"pacman -Syu"),dy.forEach(o),zd=r(fl," and install make with "),ol=a(fl,"CODE",{});var cy=i(ol);Jd=r(cy,"pacman -S make"),cy.forEach(o),fl.forEach(o),Kd=h(Je),Vt=a(Je,"LI",{});var Va=i(Vt);Qd=r(Va,"Add "),sl=a(Va,"CODE",{});var py=i(sl);Zd=r(py,"C:\\msys64\\usr\\bin"),py.forEach(o),Vd=r(Va," to your PATH environment variable."),Va.forEach(o),Je.forEach(o),wa=h(t),Re=a(t,"P",{});var Xa=i(Re);Xd=r(Xa,"You can now use "),rl=a(Xa,"CODE",{});var my=i(rl);ec=r(my,"make"),my.forEach(o),tc=r(Xa," from any terminal (Powershell, cmd.exe, etc) \u{1F389}"),Xa.forEach(o),ba=h(t),be=a(t,"H3",{class:!0});var ei=i(be);We=a(ei,"A",{id:!0,class:!0,href:!0});var yy=i(We);ll=a(yy,"SPAN",{});var vy=i(ll);y(Xt.$$.fragment,vy),vy.forEach(o),yy.forEach(o),oc=h(ei),al=a(ei,"SPAN",{});var gy=i(al);sc=r(gy,"Syncing forked master with upstream (HuggingFace) master"),gy.forEach(o),ei.forEach(o),$a=h(t),Oo=a(t,"P",{});var wy=i(Oo);rc=r(wy,`To avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnessary notifications to the developers involved in these PRs,
when syncing the master branch of a forked repository, please, follow these steps:`),wy.forEach(o),_a=h(t),Ge=a(t,"OL",{});var ti=i(Ge);il=a(ti,"LI",{});var by=i(il);lc=r(by,"When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked master."),by.forEach(o),ac=h(ti),nl=a(ti,"LI",{});var $y=i(nl);ic=r($y,"If a PR is absolutely necessary, use the following steps after checking out your branch:"),$y.forEach(o),ti.forEach(o),Ea=h(t),y(eo.$$.fragment,t),this.h()},h(){d(U,"name","hf:doc:metadata"),d(U,"content",JSON.stringify(Sy)),d(M,"id","how-to-contribute-to-transformers"),d(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M,"href","#how-to-contribute-to-transformers"),d(A,"class","relative group"),d(Qe,"href","https://github.com/huggingface/transformers/blob/master/CODE_OF_CONDUCT.md"),d(Qe,"rel","nofollow"),d(_e,"id","you-can-contribute-in-so-many-ways"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#you-can-contribute-in-so-many-ways"),d(te,"class","relative group"),d(Ve,"href","https://github.com/huggingface/transformers/contribute"),d(Ve,"rel","nofollow"),d(Ee,"id","submitting-a-new-issue-or-feature-request"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#submitting-a-new-issue-or-feature-request"),d(oe,"class","relative group"),d(ke,"id","did-you-find-a-bug"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#did-you-find-a-bug"),d(se,"class","relative group"),d(Ie,"id","do-you-want-to-implement-a-new-model"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#do-you-want-to-implement-a-new-model"),d(re,"class","relative group"),d(lt,"href","https://github.com/huggingface/transformers/tree/master/templates"),d(lt,"rel","nofollow"),d(Oe,"id","do-you-want-a-new-feature-that-is-not-a-model"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#do-you-want-a-new-feature-that-is-not-a-model"),d(le,"class","relative group"),d(S,"start","2"),d(ht,"href","https://github.com/huggingface/transformers/tree/master/templates"),d(ht,"rel","nofollow"),d(Se,"id","start-contributing-pull-requests"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#start-contributing-pull-requests"),d(ae,"class","relative group"),d(ft,"href","https://git-scm.com/book/en/v2"),d(ft,"rel","nofollow"),d(ct,"href","https://github.com/huggingface/transformers"),d(ct,"rel","nofollow"),d(Ct,"href","https://chris.beams.io/posts/git-commit/"),d(Ct,"rel","nofollow"),d(xe,"id","checklist"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#checklist"),d(ce,"class","relative group"),d($o,"href","pr_checks"),d(Te,"id","tests"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#tests"),d(ye,"class","relative group"),d(jt,"href","https://github.com/huggingface/transformers/tree/master/tests"),d(jt,"rel","nofollow"),d(Ht,"href","https://github.com/huggingface/transformers/tree/master/examples"),d(Ht,"rel","nofollow"),d(Le,"id","style-guide"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#style-guide"),d(ve,"class","relative group"),d(zt,"href","https://google.github.io/styleguide/pyguide.html"),d(zt,"rel","nofollow"),d(Jt,"href","https://github.com/huggingface/transformers/tree/master/docs#writing-documentation---specification"),d(Jt,"rel","nofollow"),d(De,"id","this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd"),d(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(De,"href","#this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd"),d(ge,"class","relative group"),d(Ne,"id","develop-on-windows"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#develop-on-windows"),d(we,"class","relative group"),d(Zt,"href","https://www.msys2.org/"),d(Zt,"rel","nofollow"),d(We,"id","syncing-forked-master-with-upstream-huggingface-master"),d(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(We,"href","#syncing-forked-master-with-upstream-huggingface-master"),d(be,"class","relative group")},m(t,u){e(document.head,U),f(t,oo,u),f(t,A,u),e(A,M),e(M,Yo),v(Ke,Yo,null),e(A,si),e(A,Bo),e(Bo,ri),f(t,dl,u),f(t,so,u),e(so,li),f(t,cl,u),f(t,ro,u),e(ro,ai),f(t,pl,u),f(t,$e,u),e($e,ii),e($e,Qe),e(Qe,ni),e($e,hi),f(t,ml,u),f(t,te,u),e(te,_e),e(_e,zo),v(Ze,zo,null),e(te,ui),e(te,Jo),e(Jo,fi),f(t,yl,u),f(t,lo,u),e(lo,di),f(t,vl,u),f(t,x,u),e(x,Ko),e(Ko,ci),e(x,pi),e(x,Qo),e(Qo,mi),e(x,yi),e(x,Zo),e(Zo,vi),e(x,gi),e(x,Vo),e(Vo,wi),f(t,gl,u),f(t,T,u),e(T,bi),e(T,Ve),e(Ve,$i),e(T,_i),e(T,Xo),e(Xo,Ei),e(T,ki),e(T,es),e(es,Pi),e(T,Ii),f(t,wl,u),f(t,ao,u),e(ao,ts),e(ts,Oi),f(t,bl,u),f(t,oe,u),e(oe,Ee),e(Ee,os),v(Xe,os,null),e(oe,Si),e(oe,ss),e(ss,Ci),f(t,$l,u),f(t,io,u),e(io,Ai),f(t,_l,u),f(t,se,u),e(se,ke),e(ke,rs),v(et,rs,null),e(se,xi),e(se,ls),e(ls,Ti),f(t,El,u),f(t,no,u),e(no,Li),f(t,kl,u),f(t,Pe,u),e(Pe,Di),e(Pe,as),e(as,Ni),e(Pe,qi),f(t,Pl,u),f(t,ho,u),e(ho,Ri),f(t,Il,u),f(t,F,u),e(F,O),e(O,Wi),e(O,is),e(is,Gi),e(O,ji),e(O,ns),e(ns,Hi),e(O,Mi),e(O,hs),e(hs,Ui),e(O,Fi),e(O,us),e(us,Yi),e(O,Bi),e(F,zi),e(F,fs),e(fs,Ji),e(F,Ki),e(F,tt),e(tt,Qi),e(tt,ds),e(ds,Zi),e(tt,Vi),f(t,Ol,u),f(t,uo,u),e(uo,Xi),f(t,Sl,u),v(ot,t,u),f(t,Cl,u),f(t,fo,u),e(fo,en),f(t,Al,u),v(st,t,u),f(t,xl,u),f(t,re,u),e(re,Ie),e(Ie,cs),v(rt,cs,null),e(re,tn),e(re,ps),e(ps,on),f(t,Tl,u),f(t,co,u),e(co,sn),f(t,Ll,u),f(t,Y,u),e(Y,ms),e(ms,rn),e(Y,ln),e(Y,ys),e(ys,an),e(Y,nn),e(Y,vs),e(vs,hn),f(t,Dl,u),f(t,po,u),e(po,un),f(t,Nl,u),f(t,L,u),e(L,fn),e(L,gs),e(gs,dn),e(L,cn),e(L,ws),e(ws,pn),e(L,mn),e(L,lt),e(lt,yn),e(L,vn),f(t,ql,u),f(t,le,u),e(le,Oe),e(Oe,bs),v(at,bs,null),e(le,gn),e(le,$s),e($s,wn),f(t,Rl,u),f(t,mo,u),e(mo,bn),f(t,Wl,u),f(t,yo,u),e(yo,_s),e(_s,$n),f(t,Gl,u),f(t,B,u),e(B,Es),e(Es,_n),e(B,En),e(B,ks),e(ks,kn),e(B,Pn),e(B,Ps),e(Ps,In),f(t,jl,u),f(t,S,u),e(S,it),e(it,On),e(it,Is),e(Is,Sn),e(it,Cn),e(S,An),e(S,nt),e(nt,xn),e(nt,Os),e(Os,Tn),e(nt,Ln),e(S,Dn),e(S,Ss),e(Ss,Nn),e(S,qn),e(S,Cs),e(Cs,Rn),f(t,Hl,u),f(t,vo,u),e(vo,Wn),f(t,Ml,u),f(t,D,u),e(D,Gn),e(D,As),e(As,jn),e(D,Hn),e(D,xs),e(xs,Mn),e(D,Un),e(D,ht),e(ht,Fn),e(D,Yn),f(t,Ul,u),f(t,ae,u),e(ae,Se),e(Se,Ts),v(ut,Ts,null),e(ae,Bn),e(ae,Ls),e(Ls,zn),f(t,Fl,u),f(t,go,u),e(go,Jn),f(t,Yl,u),f(t,E,u),e(E,Kn),e(E,Ds),e(Ds,Qn),e(E,Zn),e(E,Ns),e(Ns,Vn),e(E,Xn),e(E,qs),e(qs,eh),e(E,th),e(E,Rs),e(Rs,oh),e(E,sh),e(E,ft),e(ft,rh),e(E,lh),f(t,Bl,u),f(t,wo,u),e(wo,ah),f(t,zl,u),f(t,_,u),e(_,Ws),e(Ws,dt),e(dt,ih),e(dt,ct),e(ct,nh),e(dt,hh),e(_,uh),e(_,pt),e(pt,Gs),e(Gs,fh),e(pt,dh),v(mt,pt,null),e(_,ch),e(_,ie),e(ie,js),e(js,ph),e(ie,mh),v(yt,ie,null),e(ie,yh),e(ie,Ce),e(Ce,Hs),e(Hs,vh),e(Ce,gh),e(Ce,Ms),e(Ms,wh),e(Ce,bh),e(_,$h),e(_,P),e(P,Us),e(Us,_h),e(P,Eh),v(vt,P,null),e(P,kh),e(P,ne),e(ne,Ph),e(ne,Fs),e(Fs,Ih),e(ne,Oh),e(ne,Ys),e(Ys,Sh),e(ne,Ch),e(P,Ah),e(P,gt),e(gt,xh),e(gt,Bs),e(Bs,Th),e(gt,Lh),e(P,Dh),v(wt,P,null),e(P,Nh),e(P,he),e(he,qh),e(he,zs),e(zs,Rh),e(he,Wh),e(he,Js),e(Js,Gh),e(he,jh),e(_,Hh),e(_,c),e(c,Ks),e(Ks,Mh),e(c,Uh),e(c,Qs),e(Qs,Fh),e(c,Yh),v(bt,c,null),e(c,Bh),e(c,ue),e(ue,zh),e(ue,Zs),e(Zs,Jh),e(ue,Kh),e(ue,Vs),e(Vs,Qh),e(ue,Zh),e(c,Vh),v($t,c,null),e(c,Xh),e(c,_t),e(_t,eu),e(_t,Xs),e(Xs,tu),e(_t,ou),e(c,su),e(c,z),e(z,er),e(er,ru),e(z,lu),e(z,tr),e(tr,au),e(z,iu),e(z,or),e(or,nu),e(z,hu),e(c,uu),v(Et,c,null),e(c,fu),e(c,Ae),e(Ae,sr),e(sr,du),e(Ae,cu),e(Ae,rr),e(rr,pu),e(Ae,mu),e(c,yu),v(kt,c,null),e(c,vu),e(c,lr),e(lr,gu),e(c,wu),v(Pt,c,null),e(c,bu),e(c,ar),e(ar,$u),e(c,_u),e(c,fe),e(fe,Eu),e(fe,ir),e(ir,ku),e(fe,Pu),e(fe,nr),e(nr,Iu),e(fe,Ou),e(c,Su),v(It,c,null),e(c,Cu),e(c,de),e(de,Au),e(de,hr),e(hr,xu),e(de,Tu),e(de,ur),e(ur,Lu),e(de,Du),e(c,Nu),v(Ot,c,null),e(c,qu),e(c,St),e(St,Ru),e(St,Ct),e(Ct,Wu),e(St,Gu),e(c,ju),e(c,fr),e(fr,Hu),e(c,Mu),v(At,c,null),e(c,Uu),e(c,dr),e(dr,Fu),e(c,Yu),v(xt,c,null),e(_,Bu),e(_,cr),e(cr,Tt),e(Tt,zu),e(Tt,pr),e(pr,Ju),e(Tt,Ku),e(_,Qu),e(_,mr),e(mr,yr),e(yr,Zu),f(t,Jl,u),f(t,ce,u),e(ce,xe),e(xe,vr),v(Lt,vr,null),e(ce,Vu),e(ce,gr),e(gr,Xu),f(t,Kl,u),f(t,k,u),e(k,wr),e(wr,ef),e(k,tf),e(k,br),e(br,of),e(k,sf),e(k,Dt),e(Dt,rf),e(Dt,$r),e($r,lf),e(Dt,af),e(k,nf),e(k,_r),e(_r,hf),e(k,uf),e(k,bo),e(bo,ff),e(bo,pe),e(pe,Nt),e(Nt,df),e(Nt,Er),e(Er,cf),e(Nt,pf),e(pe,mf),e(pe,me),e(me,yf),e(me,kr),e(kr,vf),e(me,gf),e(me,Pr),e(Pr,wf),e(me,bf),e(pe,$f),e(pe,qt),e(qt,_f),e(qt,Ir),e(Ir,Ef),e(qt,kf),e(k,Pf),e(k,Rt),e(Rt,If),e(Rt,Or),e(Or,Of),e(Rt,Sf),f(t,Ql,u),f(t,Wt,u),e(Wt,Cf),e(Wt,$o),e($o,Af),f(t,Zl,u),f(t,ye,u),e(ye,Te),e(Te,Sr),v(Gt,Sr,null),e(ye,xf),e(ye,Cr),e(Cr,Tf),f(t,Vl,u),f(t,J,u),e(J,Lf),e(J,jt),e(jt,Df),e(J,Nf),e(J,Ht),e(Ht,qf),e(J,Rf),f(t,Xl,u),f(t,N,u),e(N,Wf),e(N,Ar),e(Ar,Gf),e(N,jf),e(N,xr),e(xr,Hf),e(N,Mf),e(N,Tr),e(Tr,Uf),e(N,Ff),f(t,ea,u),v(Mt,t,u),f(t,ta,u),f(t,_o,u),e(_o,Yf),f(t,oa,u),v(Ut,t,u),f(t,sa,u),f(t,q,u),e(q,Bf),e(q,Lr),e(Lr,zf),e(q,Jf),e(q,Dr),e(Dr,Kf),e(q,Qf),e(q,Nr),e(Nr,Zf),e(q,Vf),f(t,ra,u),f(t,Eo,u),e(Eo,Xf),f(t,la,u),f(t,K,u),e(K,ed),e(K,qr),e(qr,td),e(K,od),e(K,Rr),e(Rr,sd),e(K,rd),f(t,aa,u),v(Ft,t,u),f(t,ia,u),f(t,Q,u),e(Q,ld),e(Q,Wr),e(Wr,ad),e(Q,id),e(Q,Gr),e(Gr,nd),e(Q,hd),f(t,na,u),f(t,Z,u),e(Z,ud),e(Z,jr),e(jr,fd),e(Z,dd),e(Z,Hr),e(Hr,cd),e(Z,pd),f(t,ha,u),f(t,V,u),e(V,md),e(V,Mr),e(Mr,yd),e(V,vd),e(V,Ur),e(Ur,gd),e(V,wd),f(t,ua,u),v(Yt,t,u),f(t,fa,u),f(t,ve,u),e(ve,Le),e(Le,Fr),v(Bt,Fr,null),e(ve,bd),e(ve,Yr),e(Yr,$d),f(t,da,u),f(t,R,u),e(R,_d),e(R,Br),e(Br,Ed),e(R,kd),e(R,zt),e(zt,Pd),e(R,Id),e(R,Jt),e(Jt,Od),e(R,Sd),f(t,ca,u),f(t,ge,u),e(ge,De),e(De,zr),v(Kt,zr,null),e(ge,Cd),e(ge,Jr),e(Jr,Ad),f(t,pa,u),f(t,we,u),e(we,Ne),e(Ne,Kr),v(Qt,Kr,null),e(we,xd),e(we,Qr),e(Qr,Td),f(t,ma,u),f(t,X,u),e(X,Ld),e(X,Zr),e(Zr,Dd),e(X,Nd),e(X,Vr),e(Vr,qd),e(X,Rd),f(t,ya,u),f(t,ko,u),e(ko,Xr),e(Xr,Wd),f(t,va,u),f(t,Po,u),e(Po,Gd),f(t,ga,u),f(t,W,u),e(W,Io),e(Io,Zt),e(Zt,jd),e(Io,Hd),e(W,Md),e(W,el),e(el,Ud),e(W,Fd),e(W,qe),e(qe,Yd),e(qe,tl),e(tl,Bd),e(qe,zd),e(qe,ol),e(ol,Jd),e(W,Kd),e(W,Vt),e(Vt,Qd),e(Vt,sl),e(sl,Zd),e(Vt,Vd),f(t,wa,u),f(t,Re,u),e(Re,Xd),e(Re,rl),e(rl,ec),e(Re,tc),f(t,ba,u),f(t,be,u),e(be,We),e(We,ll),v(Xt,ll,null),e(be,oc),e(be,al),e(al,sc),f(t,$a,u),f(t,Oo,u),e(Oo,rc),f(t,_a,u),f(t,Ge,u),e(Ge,il),e(il,lc),e(Ge,ac),e(Ge,nl),e(nl,ic),f(t,Ea,u),v(eo,t,u),ka=!0},p:Iy,i(t){ka||(g(Ke.$$.fragment,t),g(Ze.$$.fragment,t),g(Xe.$$.fragment,t),g(et.$$.fragment,t),g(ot.$$.fragment,t),g(st.$$.fragment,t),g(rt.$$.fragment,t),g(at.$$.fragment,t),g(ut.$$.fragment,t),g(mt.$$.fragment,t),g(yt.$$.fragment,t),g(vt.$$.fragment,t),g(wt.$$.fragment,t),g(bt.$$.fragment,t),g($t.$$.fragment,t),g(Et.$$.fragment,t),g(kt.$$.fragment,t),g(Pt.$$.fragment,t),g(It.$$.fragment,t),g(Ot.$$.fragment,t),g(At.$$.fragment,t),g(xt.$$.fragment,t),g(Lt.$$.fragment,t),g(Gt.$$.fragment,t),g(Mt.$$.fragment,t),g(Ut.$$.fragment,t),g(Ft.$$.fragment,t),g(Yt.$$.fragment,t),g(Bt.$$.fragment,t),g(Kt.$$.fragment,t),g(Qt.$$.fragment,t),g(Xt.$$.fragment,t),g(eo.$$.fragment,t),ka=!0)},o(t){w(Ke.$$.fragment,t),w(Ze.$$.fragment,t),w(Xe.$$.fragment,t),w(et.$$.fragment,t),w(ot.$$.fragment,t),w(st.$$.fragment,t),w(rt.$$.fragment,t),w(at.$$.fragment,t),w(ut.$$.fragment,t),w(mt.$$.fragment,t),w(yt.$$.fragment,t),w(vt.$$.fragment,t),w(wt.$$.fragment,t),w(bt.$$.fragment,t),w($t.$$.fragment,t),w(Et.$$.fragment,t),w(kt.$$.fragment,t),w(Pt.$$.fragment,t),w(It.$$.fragment,t),w(Ot.$$.fragment,t),w(At.$$.fragment,t),w(xt.$$.fragment,t),w(Lt.$$.fragment,t),w(Gt.$$.fragment,t),w(Mt.$$.fragment,t),w(Ut.$$.fragment,t),w(Ft.$$.fragment,t),w(Yt.$$.fragment,t),w(Bt.$$.fragment,t),w(Kt.$$.fragment,t),w(Qt.$$.fragment,t),w(Xt.$$.fragment,t),w(eo.$$.fragment,t),ka=!1},d(t){o(U),t&&o(oo),t&&o(A),b(Ke),t&&o(dl),t&&o(so),t&&o(cl),t&&o(ro),t&&o(pl),t&&o($e),t&&o(ml),t&&o(te),b(Ze),t&&o(yl),t&&o(lo),t&&o(vl),t&&o(x),t&&o(gl),t&&o(T),t&&o(wl),t&&o(ao),t&&o(bl),t&&o(oe),b(Xe),t&&o($l),t&&o(io),t&&o(_l),t&&o(se),b(et),t&&o(El),t&&o(no),t&&o(kl),t&&o(Pe),t&&o(Pl),t&&o(ho),t&&o(Il),t&&o(F),t&&o(Ol),t&&o(uo),t&&o(Sl),b(ot,t),t&&o(Cl),t&&o(fo),t&&o(Al),b(st,t),t&&o(xl),t&&o(re),b(rt),t&&o(Tl),t&&o(co),t&&o(Ll),t&&o(Y),t&&o(Dl),t&&o(po),t&&o(Nl),t&&o(L),t&&o(ql),t&&o(le),b(at),t&&o(Rl),t&&o(mo),t&&o(Wl),t&&o(yo),t&&o(Gl),t&&o(B),t&&o(jl),t&&o(S),t&&o(Hl),t&&o(vo),t&&o(Ml),t&&o(D),t&&o(Ul),t&&o(ae),b(ut),t&&o(Fl),t&&o(go),t&&o(Yl),t&&o(E),t&&o(Bl),t&&o(wo),t&&o(zl),t&&o(_),b(mt),b(yt),b(vt),b(wt),b(bt),b($t),b(Et),b(kt),b(Pt),b(It),b(Ot),b(At),b(xt),t&&o(Jl),t&&o(ce),b(Lt),t&&o(Kl),t&&o(k),t&&o(Ql),t&&o(Wt),t&&o(Zl),t&&o(ye),b(Gt),t&&o(Vl),t&&o(J),t&&o(Xl),t&&o(N),t&&o(ea),b(Mt,t),t&&o(ta),t&&o(_o),t&&o(oa),b(Ut,t),t&&o(sa),t&&o(q),t&&o(ra),t&&o(Eo),t&&o(la),t&&o(K),t&&o(aa),b(Ft,t),t&&o(ia),t&&o(Q),t&&o(na),t&&o(Z),t&&o(ha),t&&o(V),t&&o(ua),b(Yt,t),t&&o(fa),t&&o(ve),b(Bt),t&&o(da),t&&o(R),t&&o(ca),t&&o(ge),b(Kt),t&&o(pa),t&&o(we),b(Qt),t&&o(ma),t&&o(X),t&&o(ya),t&&o(ko),t&&o(va),t&&o(Po),t&&o(ga),t&&o(W),t&&o(wa),t&&o(Re),t&&o(ba),t&&o(be),b(Xt),t&&o($a),t&&o(Oo),t&&o(_a),t&&o(Ge),t&&o(Ea),b(eo,t)}}}const Sy={local:"how-to-contribute-to-transformers",sections:[{local:"you-can-contribute-in-so-many-ways",title:"You can contribute in so many ways!"},{local:"submitting-a-new-issue-or-feature-request",sections:[{local:"did-you-find-a-bug",title:"Did you find a bug?"},{local:"do-you-want-to-implement-a-new-model",title:"Do you want to implement a new model?"},{local:"do-you-want-a-new-feature-that-is-not-a-model",title:"Do you want a new feature (that is not a model)?"}],title:"Submitting a new issue or feature request"},{local:"start-contributing-pull-requests",sections:[{local:"checklist",title:"Checklist"},{local:"tests",title:"Tests"},{local:"style-guide",sections:[{local:"this-guide-was-heavily-inspired-by-the-awesome-scikitlearn-guide-to-contributinghttpsgithubcomscikitlearnscikitlearnblobmastercontributingmd",title:"This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)"}],title:"Style guide"},{local:"develop-on-windows",title:"Develop on Windows"},{local:"syncing-forked-master-with-upstream-huggingface-master",title:"Syncing forked master with upstream (HuggingFace) master"}],title:"Start contributing! (Pull Requests)"}],title:"How to contribute to transformers?"};function Cy(oi,U,oo){let{fw:A}=U;return oi.$$set=M=>{"fw"in M&&oo(0,A=M.fw)},[A]}class Dy extends _y{constructor(U){super();Ey(this,U,Cy,Oy,ky,{fw:0})}}export{Dy as default,Sy as metadata};
