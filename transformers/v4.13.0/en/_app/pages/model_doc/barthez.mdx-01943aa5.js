import{S as ir,i as lr,s as cr,e as n,k as c,w as _,t as o,L as hr,c as r,d as s,m as h,a,x as g,h as i,b as l,J as e,g as m,y as k,K as dr,q as v,o as z,B as b}from"../../chunks/vendor-e859c359.js";import{D as J}from"../../chunks/Docstring-ade913b3.js";import{I as at}from"../../chunks/IconCopyLink-5fae3b20.js";function mr(It){let E,ze,T,w,Se,K,St,Ce,Ct,ot,R,F,Ne,X,Nt,Oe,Ot,it,I,Ut,j,Mt,Vt,lt,be,Ht,ct,Te,Ue,Wt,ht,$,Jt,G,Kt,Xt,Q,jt,Gt,dt,P,S,Me,Y,Qt,Ve,Yt,mt,we,Z,Zt,ee,es,ts,ft,x,C,He,te,ss,We,ns,pt,f,se,rs,B,as,Be,os,is,ye,ls,cs,ne,hs,ds,ms,re,fs,Ee,ps,us,_s,ae,gs,oe,ks,Je,vs,zs,bs,Ts,A,ie,ws,Ke,Bs,ys,le,$e,Es,Xe,$s,As,Ae,qs,je,Ls,Rs,N,ce,Ps,Ge,xs,Ds,O,he,Fs,Qe,Is,Ss,U,de,Cs,me,Ns,Ye,Os,Us,ut,D,M,Ze,fe,Ms,et,Vs,_t,u,pe,Hs,y,Ws,qe,Js,Ks,Le,Xs,js,ue,Gs,Qs,Ys,_e,Zs,Re,en,tn,sn,q,ge,nn,tt,rn,an,ke,Pe,on,st,ln,cn,xe,hn,nt,dn,mn,V,ve,fn,rt,pn,gt;return K=new at({}),X=new at({}),Y=new at({}),te=new at({}),se=new J({props:{name:"class transformers.BarthezTokenizer",anchor:"transformers.BarthezTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez.py#L49",parametersDescription:[{anchor:"transformers.BarthezTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.BarthezTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.`,name:"bos_token"}]}}),ie=new J({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.BarthezTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez.py#L156",parametersDescription:[{anchor:"transformers.BarthezTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.BarthezTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ce=new J({props:{name:"convert_tokens_to_string",anchor:"transformers.BarthezTokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez.py#L272"}}),he=new J({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.BarthezTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez.py#L209",parametersDescription:[{anchor:"transformers.BarthezTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BarthezTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),de=new J({props:{name:"get_special_tokens_mask",anchor:"transformers.BarthezTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez.py#L182",parametersDescription:[{anchor:"transformers.BarthezTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BarthezTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.BarthezTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),fe=new at({}),pe=new J({props:{name:"class transformers.BarthezTokenizerFast",anchor:"transformers.BarthezTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez_fast.py#L59",parametersDescription:[{anchor:"transformers.BarthezTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.BarthezTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.`,name:"bos_token"}]}}),ge=new J({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.BarthezTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez_fast.py#L142",parametersDescription:[{anchor:"transformers.BarthezTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.BarthezTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ve=new J({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.BarthezTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/barthez/tokenization_barthez_fast.py#L168",parametersDescription:[{anchor:"transformers.BarthezTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.BarthezTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),{c(){E=n("meta"),ze=c(),T=n("h1"),w=n("a"),Se=n("span"),_(K.$$.fragment),St=c(),Ce=n("span"),Ct=o("BARThez"),ot=c(),R=n("h2"),F=n("a"),Ne=n("span"),_(X.$$.fragment),Nt=c(),Oe=n("span"),Ot=o("Overview"),it=c(),I=n("p"),Ut=o("The BARThez model was proposed in "),j=n("a"),Mt=o("BARThez: a Skilled Pretrained French Sequence-to-Sequence Model"),Vt=o(` by Moussa Kamal Eddine, Antoine J.-P. Tixier, Michalis Vazirgiannis on 23 Oct,
2020.`),lt=c(),be=n("p"),Ht=o("The abstract of the paper:"),ct=c(),Te=n("p"),Ue=n("em"),Wt=o(`Inductive transfer learning, enabled by self-supervised learning, have taken the entire Natural Language Processing
(NLP) field by storm, with models such as BERT and BART setting new state of the art on countless natural language
understanding tasks. While there are some notable exceptions, most of the available models and research have been
conducted for the English language. In this work, we introduce BARThez, the first BART model for the French language
(to the best of our knowledge). BARThez was pretrained on a very large monolingual French corpus from past research
that we adapted to suit BART\u2019s perturbation schemes. Unlike already existing BERT-based French language models such as
CamemBERT and FlauBERT, BARThez is particularly well-suited for generative tasks, since not only its encoder but also
its decoder is pretrained. In addition to discriminative tasks from the FLUE benchmark, we evaluate BARThez on a novel
summarization dataset, OrangeSum, that we release with this paper. We also continue the pretraining of an already
pretrained multilingual BART on BARThez\u2019s corpus, and we show that the resulting model, which we call mBARTHez,
provides a significant boost over vanilla BARThez, and is on par with or outperforms CamemBERT and FlauBERT.`),ht=c(),$=n("p"),Jt=o("This model was contributed by "),G=n("a"),Kt=o("moussakam"),Xt=o(". The Authors\u2019 code can be found "),Q=n("a"),jt=o("here"),Gt=o("."),dt=c(),P=n("h3"),S=n("a"),Me=n("span"),_(Y.$$.fragment),Qt=c(),Ve=n("span"),Yt=o("Examples"),mt=c(),we=n("ul"),Z=n("li"),Zt=o(`BARThez can be fine-tuned on sequence-to-sequence tasks in a similar way as BART, check:
`),ee=n("a"),es=o("examples/pytorch/summarization/"),ts=o("."),ft=c(),x=n("h2"),C=n("a"),He=n("span"),_(te.$$.fragment),ss=c(),We=n("span"),ns=o("BarthezTokenizer"),pt=c(),f=n("div"),_(se.$$.fragment),rs=c(),B=n("p"),as=o("Adapted from "),Be=n("a"),os=o("CamembertTokenizer"),is=o(" and "),ye=n("a"),ls=o("BartTokenizer"),cs=o(`. Construct a
BARThez tokenizer. Based on `),ne=n("a"),hs=o("SentencePiece"),ds=o("."),ms=c(),re=n("p"),fs=o("This tokenizer inherits from "),Ee=n("a"),ps=o("PreTrainedTokenizer"),us=o(` which contains most of the main methods.
Users should refer to this superclass for more information regarding those methods.`),_s=c(),ae=n("p"),gs=o(`Attributes:
sp`),oe=n("em"),ks=o("model ("),Je=n("code"),vs=o("SentencePieceProcessor"),zs=o(`):
The _SentencePiece`),bs=o(" processor that is used for every conversion (string, tokens and IDs)."),Ts=c(),A=n("div"),_(ie.$$.fragment),ws=c(),Ke=n("p"),Bs=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARThez sequence has the following format:`),ys=c(),le=n("ul"),$e=n("li"),Es=o("single sequence: "),Xe=n("code"),$s=o("<s> X </s>"),As=c(),Ae=n("li"),qs=o("pair of sequences: "),je=n("code"),Ls=o("<s> A </s></s> B </s>"),Rs=c(),N=n("div"),_(ce.$$.fragment),Ps=c(),Ge=n("p"),xs=o("Converts a sequence of tokens (strings for sub-words) in a single string."),Ds=c(),O=n("div"),_(he.$$.fragment),Fs=c(),Qe=n("p"),Is=o("Create a mask from the two sequences passed to be used in a sequence-pair classification task."),Ss=c(),U=n("div"),_(de.$$.fragment),Cs=c(),me=n("p"),Ns=o(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ye=n("code"),Os=o("prepare_for_model"),Us=o(" method."),ut=c(),D=n("h2"),M=n("a"),Ze=n("span"),_(fe.$$.fragment),Ms=c(),et=n("span"),Vs=o("BarthezTokenizerFast"),_t=c(),u=n("div"),_(pe.$$.fragment),Hs=c(),y=n("p"),Ws=o("Adapted from "),qe=n("a"),Js=o("CamembertTokenizer"),Ks=o(" and "),Le=n("a"),Xs=o("BartTokenizer"),js=o(`. Construct a \u201Cfast\u201D
BARThez tokenizer. Based on `),ue=n("a"),Gs=o("SentencePiece"),Qs=o("."),Ys=c(),_e=n("p"),Zs=o("This tokenizer inherits from "),Re=n("a"),en=o("PreTrainedTokenizerFast"),tn=o(` which contains most of the main
methods. Users should refer to this superclass for more information regarding those methods.`),sn=c(),q=n("div"),_(ge.$$.fragment),nn=c(),tt=n("p"),rn=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARThez sequence has the following format:`),an=c(),ke=n("ul"),Pe=n("li"),on=o("single sequence: "),st=n("code"),ln=o("<s> X </s>"),cn=c(),xe=n("li"),hn=o("pair of sequences: "),nt=n("code"),dn=o("<s> A </s></s> B </s>"),mn=c(),V=n("div"),_(ve.$$.fragment),fn=c(),rt=n("p"),pn=o("Create a mask from the two sequences passed to be used in a sequence-pair classification task."),this.h()},l(t){const d=hr('[data-svelte="svelte-1phssyn"]',document.head);E=r(d,"META",{name:!0,content:!0}),d.forEach(s),ze=h(t),T=r(t,"H1",{class:!0});var kt=a(T);w=r(kt,"A",{id:!0,class:!0,href:!0});var vn=a(w);Se=r(vn,"SPAN",{});var zn=a(Se);g(K.$$.fragment,zn),zn.forEach(s),vn.forEach(s),St=h(kt),Ce=r(kt,"SPAN",{});var bn=a(Ce);Ct=i(bn,"BARThez"),bn.forEach(s),kt.forEach(s),ot=h(t),R=r(t,"H2",{class:!0});var vt=a(R);F=r(vt,"A",{id:!0,class:!0,href:!0});var Tn=a(F);Ne=r(Tn,"SPAN",{});var wn=a(Ne);g(X.$$.fragment,wn),wn.forEach(s),Tn.forEach(s),Nt=h(vt),Oe=r(vt,"SPAN",{});var Bn=a(Oe);Ot=i(Bn,"Overview"),Bn.forEach(s),vt.forEach(s),it=h(t),I=r(t,"P",{});var zt=a(I);Ut=i(zt,"The BARThez model was proposed in "),j=r(zt,"A",{href:!0,rel:!0});var yn=a(j);Mt=i(yn,"BARThez: a Skilled Pretrained French Sequence-to-Sequence Model"),yn.forEach(s),Vt=i(zt,` by Moussa Kamal Eddine, Antoine J.-P. Tixier, Michalis Vazirgiannis on 23 Oct,
2020.`),zt.forEach(s),lt=h(t),be=r(t,"P",{});var En=a(be);Ht=i(En,"The abstract of the paper:"),En.forEach(s),ct=h(t),Te=r(t,"P",{});var $n=a(Te);Ue=r($n,"EM",{});var An=a(Ue);Wt=i(An,`Inductive transfer learning, enabled by self-supervised learning, have taken the entire Natural Language Processing
(NLP) field by storm, with models such as BERT and BART setting new state of the art on countless natural language
understanding tasks. While there are some notable exceptions, most of the available models and research have been
conducted for the English language. In this work, we introduce BARThez, the first BART model for the French language
(to the best of our knowledge). BARThez was pretrained on a very large monolingual French corpus from past research
that we adapted to suit BART\u2019s perturbation schemes. Unlike already existing BERT-based French language models such as
CamemBERT and FlauBERT, BARThez is particularly well-suited for generative tasks, since not only its encoder but also
its decoder is pretrained. In addition to discriminative tasks from the FLUE benchmark, we evaluate BARThez on a novel
summarization dataset, OrangeSum, that we release with this paper. We also continue the pretraining of an already
pretrained multilingual BART on BARThez\u2019s corpus, and we show that the resulting model, which we call mBARTHez,
provides a significant boost over vanilla BARThez, and is on par with or outperforms CamemBERT and FlauBERT.`),An.forEach(s),$n.forEach(s),ht=h(t),$=r(t,"P",{});var De=a($);Jt=i(De,"This model was contributed by "),G=r(De,"A",{href:!0,rel:!0});var qn=a(G);Kt=i(qn,"moussakam"),qn.forEach(s),Xt=i(De,". The Authors\u2019 code can be found "),Q=r(De,"A",{href:!0,rel:!0});var Ln=a(Q);jt=i(Ln,"here"),Ln.forEach(s),Gt=i(De,"."),De.forEach(s),dt=h(t),P=r(t,"H3",{class:!0});var bt=a(P);S=r(bt,"A",{id:!0,class:!0,href:!0});var Rn=a(S);Me=r(Rn,"SPAN",{});var Pn=a(Me);g(Y.$$.fragment,Pn),Pn.forEach(s),Rn.forEach(s),Qt=h(bt),Ve=r(bt,"SPAN",{});var xn=a(Ve);Yt=i(xn,"Examples"),xn.forEach(s),bt.forEach(s),mt=h(t),we=r(t,"UL",{});var Dn=a(we);Z=r(Dn,"LI",{});var Tt=a(Z);Zt=i(Tt,`BARThez can be fine-tuned on sequence-to-sequence tasks in a similar way as BART, check:
`),ee=r(Tt,"A",{href:!0,rel:!0});var Fn=a(ee);es=i(Fn,"examples/pytorch/summarization/"),Fn.forEach(s),ts=i(Tt,"."),Tt.forEach(s),Dn.forEach(s),ft=h(t),x=r(t,"H2",{class:!0});var wt=a(x);C=r(wt,"A",{id:!0,class:!0,href:!0});var In=a(C);He=r(In,"SPAN",{});var Sn=a(He);g(te.$$.fragment,Sn),Sn.forEach(s),In.forEach(s),ss=h(wt),We=r(wt,"SPAN",{});var Cn=a(We);ns=i(Cn,"BarthezTokenizer"),Cn.forEach(s),wt.forEach(s),pt=h(t),f=r(t,"DIV",{class:!0});var p=a(f);g(se.$$.fragment,p),rs=h(p),B=r(p,"P",{});var H=a(B);as=i(H,"Adapted from "),Be=r(H,"A",{href:!0});var Nn=a(Be);os=i(Nn,"CamembertTokenizer"),Nn.forEach(s),is=i(H," and "),ye=r(H,"A",{href:!0});var On=a(ye);ls=i(On,"BartTokenizer"),On.forEach(s),cs=i(H,`. Construct a
BARThez tokenizer. Based on `),ne=r(H,"A",{href:!0,rel:!0});var Un=a(ne);hs=i(Un,"SentencePiece"),Un.forEach(s),ds=i(H,"."),H.forEach(s),ms=h(p),re=r(p,"P",{});var Bt=a(re);fs=i(Bt,"This tokenizer inherits from "),Ee=r(Bt,"A",{href:!0});var Mn=a(Ee);ps=i(Mn,"PreTrainedTokenizer"),Mn.forEach(s),us=i(Bt,` which contains most of the main methods.
Users should refer to this superclass for more information regarding those methods.`),Bt.forEach(s),_s=h(p),ae=r(p,"P",{});var yt=a(ae);gs=i(yt,`Attributes:
sp`),oe=r(yt,"EM",{});var Et=a(oe);ks=i(Et,"model ("),Je=r(Et,"CODE",{});var Vn=a(Je);vs=i(Vn,"SentencePieceProcessor"),Vn.forEach(s),zs=i(Et,`):
The _SentencePiece`),Et.forEach(s),bs=i(yt," processor that is used for every conversion (string, tokens and IDs)."),yt.forEach(s),Ts=h(p),A=r(p,"DIV",{class:!0});var Fe=a(A);g(ie.$$.fragment,Fe),ws=h(Fe),Ke=r(Fe,"P",{});var Hn=a(Ke);Bs=i(Hn,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARThez sequence has the following format:`),Hn.forEach(s),ys=h(Fe),le=r(Fe,"UL",{});var $t=a(le);$e=r($t,"LI",{});var un=a($e);Es=i(un,"single sequence: "),Xe=r(un,"CODE",{});var Wn=a(Xe);$s=i(Wn,"<s> X </s>"),Wn.forEach(s),un.forEach(s),As=h($t),Ae=r($t,"LI",{});var _n=a(Ae);qs=i(_n,"pair of sequences: "),je=r(_n,"CODE",{});var Jn=a(je);Ls=i(Jn,"<s> A </s></s> B </s>"),Jn.forEach(s),_n.forEach(s),$t.forEach(s),Fe.forEach(s),Rs=h(p),N=r(p,"DIV",{class:!0});var At=a(N);g(ce.$$.fragment,At),Ps=h(At),Ge=r(At,"P",{});var Kn=a(Ge);xs=i(Kn,"Converts a sequence of tokens (strings for sub-words) in a single string."),Kn.forEach(s),At.forEach(s),Ds=h(p),O=r(p,"DIV",{class:!0});var qt=a(O);g(he.$$.fragment,qt),Fs=h(qt),Qe=r(qt,"P",{});var Xn=a(Qe);Is=i(Xn,"Create a mask from the two sequences passed to be used in a sequence-pair classification task."),Xn.forEach(s),qt.forEach(s),Ss=h(p),U=r(p,"DIV",{class:!0});var Lt=a(U);g(de.$$.fragment,Lt),Cs=h(Lt),me=r(Lt,"P",{});var Rt=a(me);Ns=i(Rt,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ye=r(Rt,"CODE",{});var jn=a(Ye);Os=i(jn,"prepare_for_model"),jn.forEach(s),Us=i(Rt," method."),Rt.forEach(s),Lt.forEach(s),p.forEach(s),ut=h(t),D=r(t,"H2",{class:!0});var Pt=a(D);M=r(Pt,"A",{id:!0,class:!0,href:!0});var Gn=a(M);Ze=r(Gn,"SPAN",{});var Qn=a(Ze);g(fe.$$.fragment,Qn),Qn.forEach(s),Gn.forEach(s),Ms=h(Pt),et=r(Pt,"SPAN",{});var Yn=a(et);Vs=i(Yn,"BarthezTokenizerFast"),Yn.forEach(s),Pt.forEach(s),_t=h(t),u=r(t,"DIV",{class:!0});var L=a(u);g(pe.$$.fragment,L),Hs=h(L),y=r(L,"P",{});var W=a(y);Ws=i(W,"Adapted from "),qe=r(W,"A",{href:!0});var Zn=a(qe);Js=i(Zn,"CamembertTokenizer"),Zn.forEach(s),Ks=i(W," and "),Le=r(W,"A",{href:!0});var er=a(Le);Xs=i(er,"BartTokenizer"),er.forEach(s),js=i(W,`. Construct a \u201Cfast\u201D
BARThez tokenizer. Based on `),ue=r(W,"A",{href:!0,rel:!0});var tr=a(ue);Gs=i(tr,"SentencePiece"),tr.forEach(s),Qs=i(W,"."),W.forEach(s),Ys=h(L),_e=r(L,"P",{});var xt=a(_e);Zs=i(xt,"This tokenizer inherits from "),Re=r(xt,"A",{href:!0});var sr=a(Re);en=i(sr,"PreTrainedTokenizerFast"),sr.forEach(s),tn=i(xt,` which contains most of the main
methods. Users should refer to this superclass for more information regarding those methods.`),xt.forEach(s),sn=h(L),q=r(L,"DIV",{class:!0});var Ie=a(q);g(ge.$$.fragment,Ie),nn=h(Ie),tt=r(Ie,"P",{});var nr=a(tt);rn=i(nr,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A BARThez sequence has the following format:`),nr.forEach(s),an=h(Ie),ke=r(Ie,"UL",{});var Dt=a(ke);Pe=r(Dt,"LI",{});var gn=a(Pe);on=i(gn,"single sequence: "),st=r(gn,"CODE",{});var rr=a(st);ln=i(rr,"<s> X </s>"),rr.forEach(s),gn.forEach(s),cn=h(Dt),xe=r(Dt,"LI",{});var kn=a(xe);hn=i(kn,"pair of sequences: "),nt=r(kn,"CODE",{});var ar=a(nt);dn=i(ar,"<s> A </s></s> B </s>"),ar.forEach(s),kn.forEach(s),Dt.forEach(s),Ie.forEach(s),mn=h(L),V=r(L,"DIV",{class:!0});var Ft=a(V);g(ve.$$.fragment,Ft),fn=h(Ft),rt=r(Ft,"P",{});var or=a(rt);pn=i(or,"Create a mask from the two sequences passed to be used in a sequence-pair classification task."),or.forEach(s),Ft.forEach(s),L.forEach(s),this.h()},h(){l(E,"name","hf:doc:metadata"),l(E,"content",JSON.stringify(fr)),l(w,"id","barthez"),l(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(w,"href","#barthez"),l(T,"class","relative group"),l(F,"id","overview"),l(F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(F,"href","#overview"),l(R,"class","relative group"),l(j,"href","https://arxiv.org/abs/2010.12321"),l(j,"rel","nofollow"),l(G,"href","https://huggingface.co/moussakam"),l(G,"rel","nofollow"),l(Q,"href","https://github.com/moussaKam/BARThez"),l(Q,"rel","nofollow"),l(S,"id","examples"),l(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(S,"href","#examples"),l(P,"class","relative group"),l(ee,"href","https://github.com/huggingface/transformers/tree/master/examples/pytorch/summarization/README.md"),l(ee,"rel","nofollow"),l(C,"id","transformers.BarthezTokenizer"),l(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(C,"href","#transformers.BarthezTokenizer"),l(x,"class","relative group"),l(Be,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),l(ye,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),l(ne,"href","https://github.com/google/sentencepiece"),l(ne,"rel","nofollow"),l(Ee,"href","/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(A,"class","docstring"),l(N,"class","docstring"),l(O,"class","docstring"),l(U,"class","docstring"),l(f,"class","docstring"),l(M,"id","transformers.BarthezTokenizerFast"),l(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(M,"href","#transformers.BarthezTokenizerFast"),l(D,"class","relative group"),l(qe,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),l(Le,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),l(ue,"href","https://github.com/google/sentencepiece"),l(ue,"rel","nofollow"),l(Re,"href","/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),l(q,"class","docstring"),l(V,"class","docstring"),l(u,"class","docstring")},m(t,d){e(document.head,E),m(t,ze,d),m(t,T,d),e(T,w),e(w,Se),k(K,Se,null),e(T,St),e(T,Ce),e(Ce,Ct),m(t,ot,d),m(t,R,d),e(R,F),e(F,Ne),k(X,Ne,null),e(R,Nt),e(R,Oe),e(Oe,Ot),m(t,it,d),m(t,I,d),e(I,Ut),e(I,j),e(j,Mt),e(I,Vt),m(t,lt,d),m(t,be,d),e(be,Ht),m(t,ct,d),m(t,Te,d),e(Te,Ue),e(Ue,Wt),m(t,ht,d),m(t,$,d),e($,Jt),e($,G),e(G,Kt),e($,Xt),e($,Q),e(Q,jt),e($,Gt),m(t,dt,d),m(t,P,d),e(P,S),e(S,Me),k(Y,Me,null),e(P,Qt),e(P,Ve),e(Ve,Yt),m(t,mt,d),m(t,we,d),e(we,Z),e(Z,Zt),e(Z,ee),e(ee,es),e(Z,ts),m(t,ft,d),m(t,x,d),e(x,C),e(C,He),k(te,He,null),e(x,ss),e(x,We),e(We,ns),m(t,pt,d),m(t,f,d),k(se,f,null),e(f,rs),e(f,B),e(B,as),e(B,Be),e(Be,os),e(B,is),e(B,ye),e(ye,ls),e(B,cs),e(B,ne),e(ne,hs),e(B,ds),e(f,ms),e(f,re),e(re,fs),e(re,Ee),e(Ee,ps),e(re,us),e(f,_s),e(f,ae),e(ae,gs),e(ae,oe),e(oe,ks),e(oe,Je),e(Je,vs),e(oe,zs),e(ae,bs),e(f,Ts),e(f,A),k(ie,A,null),e(A,ws),e(A,Ke),e(Ke,Bs),e(A,ys),e(A,le),e(le,$e),e($e,Es),e($e,Xe),e(Xe,$s),e(le,As),e(le,Ae),e(Ae,qs),e(Ae,je),e(je,Ls),e(f,Rs),e(f,N),k(ce,N,null),e(N,Ps),e(N,Ge),e(Ge,xs),e(f,Ds),e(f,O),k(he,O,null),e(O,Fs),e(O,Qe),e(Qe,Is),e(f,Ss),e(f,U),k(de,U,null),e(U,Cs),e(U,me),e(me,Ns),e(me,Ye),e(Ye,Os),e(me,Us),m(t,ut,d),m(t,D,d),e(D,M),e(M,Ze),k(fe,Ze,null),e(D,Ms),e(D,et),e(et,Vs),m(t,_t,d),m(t,u,d),k(pe,u,null),e(u,Hs),e(u,y),e(y,Ws),e(y,qe),e(qe,Js),e(y,Ks),e(y,Le),e(Le,Xs),e(y,js),e(y,ue),e(ue,Gs),e(y,Qs),e(u,Ys),e(u,_e),e(_e,Zs),e(_e,Re),e(Re,en),e(_e,tn),e(u,sn),e(u,q),k(ge,q,null),e(q,nn),e(q,tt),e(tt,rn),e(q,an),e(q,ke),e(ke,Pe),e(Pe,on),e(Pe,st),e(st,ln),e(ke,cn),e(ke,xe),e(xe,hn),e(xe,nt),e(nt,dn),e(u,mn),e(u,V),k(ve,V,null),e(V,fn),e(V,rt),e(rt,pn),gt=!0},p:dr,i(t){gt||(v(K.$$.fragment,t),v(X.$$.fragment,t),v(Y.$$.fragment,t),v(te.$$.fragment,t),v(se.$$.fragment,t),v(ie.$$.fragment,t),v(ce.$$.fragment,t),v(he.$$.fragment,t),v(de.$$.fragment,t),v(fe.$$.fragment,t),v(pe.$$.fragment,t),v(ge.$$.fragment,t),v(ve.$$.fragment,t),gt=!0)},o(t){z(K.$$.fragment,t),z(X.$$.fragment,t),z(Y.$$.fragment,t),z(te.$$.fragment,t),z(se.$$.fragment,t),z(ie.$$.fragment,t),z(ce.$$.fragment,t),z(he.$$.fragment,t),z(de.$$.fragment,t),z(fe.$$.fragment,t),z(pe.$$.fragment,t),z(ge.$$.fragment,t),z(ve.$$.fragment,t),gt=!1},d(t){s(E),t&&s(ze),t&&s(T),b(K),t&&s(ot),t&&s(R),b(X),t&&s(it),t&&s(I),t&&s(lt),t&&s(be),t&&s(ct),t&&s(Te),t&&s(ht),t&&s($),t&&s(dt),t&&s(P),b(Y),t&&s(mt),t&&s(we),t&&s(ft),t&&s(x),b(te),t&&s(pt),t&&s(f),b(se),b(ie),b(ce),b(he),b(de),t&&s(ut),t&&s(D),b(fe),t&&s(_t),t&&s(u),b(pe),b(ge),b(ve)}}}const fr={local:"barthez",sections:[{local:"overview",sections:[{local:"examples",title:"Examples"}],title:"Overview"},{local:"transformers.BarthezTokenizer",title:"BarthezTokenizer"},{local:"transformers.BarthezTokenizerFast",title:"BarthezTokenizerFast"}],title:"BARThez"};function pr(It,E,ze){let{fw:T}=E;return It.$$set=w=>{"fw"in w&&ze(0,T=w.fw)},[T]}class kr extends ir{constructor(E){super();lr(this,E,pr,mr,cr,{fw:0})}}export{kr as default,fr as metadata};
