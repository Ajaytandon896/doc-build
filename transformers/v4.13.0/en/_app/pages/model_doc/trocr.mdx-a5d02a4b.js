import{S as Pn,i as Mn,s as zn,e as s,k as l,w as _,t as o,M as Fn,c as n,d as r,m as c,a as i,x as v,h as a,b as d,F as e,g as m,y as T,q as C,o as b,B as w}from"../../chunks/vendor-68651a14.js";import{T as xn}from"../../chunks/Tip-3fbaa85f.js";import{D as Z}from"../../chunks/Docstring-d699e906.js";import{C as Ts}from"../../chunks/CodeBlock-b98730f5.js";import{I as jt}from"../../chunks/IconCopyLink-8ff17449.js";import"../../chunks/CopyButton-e88c769b.js";function An(be){let h,P,p,k,F,O,D,A;return{c(){h=s("p"),P=o(`This class method is simply calling AutoFeatureExtractor\u2019s
`),p=s("code"),k=o("from_pretrained"),F=o(` and TrOCRTokenizer\u2019s
`),O=s("code"),D=o("from_pretrained"),A=o(`. Please refer to the
docstrings of the methods above for more information.`)},l(y){h=n(y,"P",{});var g=i(h);P=a(g,`This class method is simply calling AutoFeatureExtractor\u2019s
`),p=n(g,"CODE",{});var E=i(p);k=a(E,"from_pretrained"),E.forEach(r),F=a(g,` and TrOCRTokenizer\u2019s
`),O=n(g,"CODE",{});var M=i(O);D=a(M,"from_pretrained"),M.forEach(r),A=a(g,`. Please refer to the
docstrings of the methods above for more information.`),g.forEach(r)},m(y,g){m(y,h,g),e(h,P),e(h,p),e(p,k),e(h,F),e(h,O),e(O,D),e(h,A)},d(y){y&&r(h)}}}function Ln(be){let h,P,p,k,F,O,D,A;return{c(){h=s("p"),P=o("This class method is simply calling "),p=s("code"),k=o("save_pretrained"),F=o(` and
`),O=s("code"),D=o("save_pretrained"),A=o(`. Please refer to the
docstrings of the methods above for more information.`)},l(y){h=n(y,"P",{});var g=i(h);P=a(g,"This class method is simply calling "),p=n(g,"CODE",{});var E=i(p);k=a(E,"save_pretrained"),E.forEach(r),F=a(g,` and
`),O=n(g,"CODE",{});var M=i(O);D=a(M,"save_pretrained"),M.forEach(r),A=a(g,`. Please refer to the
docstrings of the methods above for more information.`),g.forEach(r)},m(y,g){m(y,h,g),e(h,P),e(h,p),e(p,k),e(h,F),e(h,O),e(O,D),e(h,A)},d(y){y&&r(h)}}}function jn(be){let h,P,p,k,F,O,D,A,y,g,E,M,Dt,we,Nr,It,Wr,ar,N,Hr,ke,Br,Ur,Oe,Gr,Zr,sr,re,Jr,ot,Yr,Kr,nr,oe,Qr,Re,Xr,eo,ir,ae,to,$e,ro,oo,dr,at,ao,lr,se,I,so,ye,no,io,Ee,lo,co,xe,fo,mo,ho,Pe,po,st,uo,go,cr,J,ne,qt,Me,_o,Vt,vo,fr,W,To,nt,Co,bo,it,wo,ko,mr,$,Oo,dt,Ro,$o,lt,yo,Eo,ct,xo,Po,ft,Mo,zo,mt,Fo,Ao,hr,ht,St,Lo,pr,ze,ur,ie,jo,Fe,Do,Io,gr,Y,de,Nt,Ae,qo,Wt,Vo,_r,x,Le,So,K,No,pt,Wo,Ho,je,Bo,Uo,Go,Q,Zo,ut,Jo,Yo,gt,Ko,Qo,Xo,Ht,ea,ta,De,vr,X,le,Bt,Ie,ra,Ut,oa,Tr,u,qe,aa,Gt,sa,na,z,_t,ia,da,vt,la,ca,Tt,fa,ma,Ve,Zt,ha,pa,ua,Ct,ga,_a,va,ce,Se,Ta,q,Ca,Jt,ba,wa,bt,ka,Oa,Yt,Ra,$a,ya,H,Ne,Ea,We,xa,wt,Pa,Ma,za,fe,Fa,B,He,Aa,ee,La,Kt,ja,Da,kt,Ia,qa,Va,me,Sa,he,Be,Na,Ue,Wa,Ot,Ha,Ba,Ua,pe,Ge,Ga,Ze,Za,Rt,Ja,Ya,Ka,ue,Je,Qa,Qt,Xa,Cr,te,ge,Xt,Ye,es,er,ts,br,L,Ke,rs,V,os,$t,as,ss,tr,ns,is,yt,ds,ls,cs,Qe,fs,Xe,ms,hs,ps,U,et,us,rr,gs,_s,tt,wr;return O=new jt({}),we=new jt({}),Me=new jt({}),ze=new Ts({props:{code:`from transformers import TrOCRProcessor, VisionEncoderDecoderModel
import requests
from PIL import Image

processor = TrOCRProcessor.from_pretrained("microsoft/trocr-base-handwritten")
model = VisionEncoderDecoderModel.from_pretrained("microsoft/trocr-base-handwritten")

# load image from the IAM dataset
url = "https://fki.tic.heia-fr.ch/static/img/a01-122-02.jpg"
image = Image.open(requests.get(url, stream=True).raw).convert("RGB")

pixel_values = processor(image, return_tensors="pt").pixel_values
generated_ids = model.generate(pixel_values)

generated_text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0],`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrOCRProcessor, VisionEncoderDecoderModel</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">import</span> requests</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">processor = TrOCRProcessor.from_pretrained(<span class="hljs-string">&quot;microsoft/trocr-base-handwritten&quot;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">model = VisionEncoderDecoderModel.from_pretrained(<span class="hljs-string">&quot;microsoft/trocr-base-handwritten&quot;</span>)</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-comment"># load image from the IAM dataset</span></span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">url = <span class="hljs-string">&quot;https://fki.tic.heia-fr.ch/static/img/a01-122-02.jpg&quot;</span></span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw).convert(<span class="hljs-string">&quot;RGB&quot;</span>)</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">pixel_values = processor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).pixel_values</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">generated_ids = model.generate(pixel_values)</span>

<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">generated_text = processor.batch_decode(generated_ids, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]</span>`}}),Ae=new jt({}),Le=new Z({props:{name:"class transformers.TrOCRConfig",anchor:"transformers.TrOCRConfig",parameters:[{name:"vocab_size",val:" = 50265"},{name:"d_model",val:" = 1024"},{name:"decoder_layers",val:" = 12"},{name:"decoder_attention_heads",val:" = 16"},{name:"decoder_ffn_dim",val:" = 4096"},{name:"activation_function",val:" = 'gelu'"},{name:"max_position_embeddings",val:" = 512"},{name:"dropout",val:" = 0.1"},{name:"attention_dropout",val:" = 0.0"},{name:"activation_dropout",val:" = 0.0"},{name:"decoder_start_token_id",val:" = 2"},{name:"classifier_dropout",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"decoder_layerdrop",val:" = 0.0"},{name:"use_cache",val:" = False"},{name:"scale_embedding",val:" = False"},{name:"use_learned_position_embeddings",val:" = True"},{name:"layernorm_embedding",val:" = True"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/configuration_trocr.py#L29",parametersDescription:[{anchor:"transformers.TrOCRConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 50265) &#x2014;
Vocabulary size of the TrOCR model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a>.`,name:"vocab_size"},{anchor:"transformers.TrOCRConfig.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Dimensionality of the layers and the pooler layer.`,name:"d_model"},{anchor:"transformers.TrOCRConfig.decoder_layers",description:`<strong>decoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of decoder layers.`,name:"decoder_layers"},{anchor:"transformers.TrOCRConfig.decoder_attention_heads",description:`<strong>decoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"decoder_attention_heads"},{anchor:"transformers.TrOCRConfig.decoder_ffn_dim",description:`<strong>decoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"decoder_ffn_dim"},{anchor:"transformers.TrOCRConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.TrOCRConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.TrOCRConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, and pooler.`,name:"dropout"},{anchor:"transformers.TrOCRConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.TrOCRConfig.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.`,name:"activation_dropout"},{anchor:"transformers.TrOCRConfig.classifier_dropout",description:`<strong>classifier_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for classifier.`,name:"classifier_dropout"},{anchor:"transformers.TrOCRConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated<em>normal_initializer for initializing all weight matrices.
decoder_layerdrop &#x2014; (<code>float</code>, _optional</em>, defaults to 0.0):
The LayerDrop probability for the decoder. See the [LayerDrop paper](see
<a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>) for more details.`,name:"init_std"},{anchor:"transformers.TrOCRConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.TrOCRConfig.scale_embedding",description:`<strong>scale_embedding</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to scale the word embeddings by sqrt(d_model).`,name:"scale_embedding"},{anchor:"transformers.TrOCRConfig.use_learned_position_embeddings",description:`<strong>use_learned_position_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use learned position embeddings. If not, sinusoidal position embeddings will be used.`,name:"use_learned_position_embeddings"},{anchor:"transformers.TrOCRConfig.layernorm_embedding",description:`<strong>layernorm_embedding</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use a layernorm after the word + position embeddings.`,name:"layernorm_embedding"}]}}),De=new Ts({props:{code:`from transformers import TrOCRForCausalLM, TrOCRConfig

# Initializing a TrOCR-base style configuration
configuration = TrOCRConfig()

# Initializing a model from the TrOCR-base style configuration
model = TrOCRForCausalLM(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrOCRForCausalLM, TrOCRConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a TrOCR-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = TrOCRConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the TrOCR-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TrOCRForCausalLM(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Ie=new jt({}),qe=new Z({props:{name:"class transformers.TrOCRProcessor",anchor:"transformers.TrOCRProcessor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L27",parametersDescription:[{anchor:"transformers.TrOCRProcessor.feature_extractor",description:`<strong>feature_extractor</strong> (<a href="/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>) &#x2014;
An instance of <a href="/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. The feature extractor is a required input.`,name:"feature_extractor"},{anchor:"transformers.TrOCRProcessor.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer">RobertaTokenizer</a>) &#x2014;
An instance of <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer">RobertaTokenizer</a>. The tokenizer is a required input.`,name:"tokenizer"}]}}),Se=new Z({props:{name:"__call__",anchor:"transformers.TrOCRProcessor.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L109"}}),Ne=new Z({props:{name:"from_pretrained",anchor:"transformers.TrOCRProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L76",parametersDescription:[{anchor:"transformers.TrOCRProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<code>save_pretrained</code> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both <code>PreTrainedFeatureExtractor</code> and
<a href="/docs/transformers/master/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a></li>
</ul>`,name:"pretrained_model_name_or_path"}]}}),fe=new xn({props:{$$slots:{default:[An]},$$scope:{ctx:be}}}),He=new Z({props:{name:"save_pretrained",anchor:"transformers.TrOCRProcessor.save_pretrained",parameters:[{name:"save_directory",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L56",parametersDescription:[{anchor:"transformers.TrOCRProcessor.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"}]}}),me=new xn({props:{$$slots:{default:[Ln]},$$scope:{ctx:be}}}),Be=new Z({props:{name:"batch_decode",anchor:"transformers.TrOCRProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L119"}}),Ge=new Z({props:{name:"decode",anchor:"transformers.TrOCRProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L127"}}),Je=new Z({props:{name:"as_target_processor",anchor:"transformers.TrOCRProcessor.as_target_processor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/processing_trocr.py#L134"}}),Ye=new jt({}),Ke=new Z({props:{name:"class transformers.TrOCRForCausalLM",anchor:"transformers.TrOCRForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/modeling_trocr.py#L778",parametersDescription:[{anchor:"transformers.TrOCRForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),et=new Z({props:{name:"forward",anchor:"transformers.TrOCRForCausalLM.forward",parameters:[{name:"input_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"encoder_hidden_states",val:" = None"},{name:"encoder_attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"cross_attn_head_mask",val:" = None"},{name:"past_key_values",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/trocr/modeling_trocr.py#L809",parametersDescription:[{anchor:"transformers.TrOCRForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you
provide it.</p>
<p>Indices can be obtained using <code>TrOCRTokenizer</code>. See
<a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">transformers.PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">transformers.PreTrainedTokenizer.<strong>call</strong>()</a>
for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TrOCRForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.TrOCRForCausalLM.forward.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong>  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention
if the model is configured as a decoder.`,name:"encoder_hidden_states"},{anchor:"transformers.TrOCRForCausalLM.forward.encoder_attention_mask",description:`<strong>encoder_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used
in the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:`,name:"encoder_attention_mask"},{anchor:"transformers.TrOCRForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.TrOCRForCausalLM.forward.cross_attn_head_mask",description:`<strong>cross_attn_head_mask</strong> (<code>torch.Tensor</code> of shape <code>(decoder_layers, decoder_attention_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the cross-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"cross_attn_head_mask"},{anchor:"transformers.TrOCRForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) &#x2014;
Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2
tensors of shape <code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and 2 additional
tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>. The two
additional tensors are only required when the model is used as a decoder in a Sequence to Sequence
model.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and in the
cross-attention blocks) that can be used (see <code>past_key_values</code> input) to speed up sequential
decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code>
(those that don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code>
instead of all <code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.TrOCRForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should either be in <code>[0, ..., config.vocab_size]</code> or -100 (see <code>input_ids</code> docstring). Tokens with indices set to <code>-100</code> are
ignored (masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>.`,name:"labels"},{anchor:"transformers.TrOCRForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up
decoding (see <code>past_key_values</code>).</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>`,name:"use_cache"},{anchor:"transformers.TrOCRForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under
returned tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.TrOCRForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors
for more detail.`,name:"output_hidden_states"},{anchor:"transformers.TrOCRForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/master/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/master/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>CausalLMOutputWithCrossAttentions</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising
various elements depending on the configuration (<a
  href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"
>TrOCRConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer)
of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Cross attentions weights after the attention softmax, used to compute the weighted average in the
cross-attention heads.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> tuples of length <code>config.n_layers</code>, with each tuple containing the
cached key, value states of the self-attention and the cross-attention layers if model is used in
encoder-decoder setting. Only relevant if <code>config.is_decoder = True</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/master/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>CausalLMOutputWithCrossAttentions</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),tt=new Ts({props:{code:`from transformers import VisionEncoderDecoderModel, TrOCRForCausalLM, ViTModel, TrOCRConfig, ViTConfig

encoder = ViTModel(ViTConfig())
decoder = TrOCRForCausalLM(TrOCRConfig())

model = VisionEncoderDecoderModel(encoder=encoder, decoder=decoder),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> VisionEncoderDecoderModel, TrOCRForCausalLM, ViTModel, TrOCRConfig, ViTConfig

<span class="hljs-meta">&gt;&gt;&gt; </span>encoder = ViTModel(ViTConfig())
<span class="hljs-meta">&gt;&gt;&gt; </span>decoder = TrOCRForCausalLM(TrOCRConfig())

<span class="hljs-comment"># init vision2text model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = VisionEncoderDecoderModel(encoder=encoder, decoder=decoder)`}}),{c(){h=s("meta"),P=l(),p=s("h1"),k=s("a"),F=s("span"),_(O.$$.fragment),D=l(),A=s("span"),y=o("TrOCR"),g=l(),E=s("h2"),M=s("a"),Dt=s("span"),_(we.$$.fragment),Nr=l(),It=s("span"),Wr=o("Overview"),ar=l(),N=s("p"),Hr=o("The TrOCR model was proposed in "),ke=s("a"),Br=o("TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models"),Ur=o(` by Minghao Li, Tengchao Lv, Lei Cui, Yijuan Lu, Dinei Florencio, Cha Zhang,
Zhoujun Li, Furu Wei. TrOCR consists of an image Transformer encoder and an autoregressive text Transformer decoder to
perform `),Oe=s("a"),Gr=o("optical character recognition (OCR)"),Zr=o("."),sr=l(),re=s("p"),Jr=o("Please refer to the "),ot=s("a"),Yr=o("VisionEncoderDecoder"),Kr=o(" class on how to use this model."),nr=l(),oe=s("p"),Qr=o("This model was contributed by "),Re=s("a"),Xr=o("Niels Rogge"),eo=o("."),ir=l(),ae=s("p"),to=o("The original code can be found "),$e=s("a"),ro=o("here"),oo=o("."),dr=l(),at=s("p"),ao=o("Tips:"),lr=l(),se=s("ul"),I=s("li"),so=o(`TrOCR is pre-trained in 2 stages before being fine-tuned on downstream datasets. It achieves state-of-the-art results
on both printed (e.g. the `),ye=s("a"),no=o("SROIE dataset"),io=o(`) and handwritten (e.g. the
`),Ee=s("a"),lo=o("IAM Handwriting dataset"),co=o(`) text recognition tasks.
For more information, see the `),xe=s("a"),fo=o("official models"),mo=o("."),ho=l(),Pe=s("li"),po=o("TrOCR is always used within the "),st=s("a"),uo=o("VisionEncoderDecoder"),go=o(" framework."),cr=l(),J=s("h2"),ne=s("a"),qt=s("span"),_(Me.$$.fragment),_o=l(),Vt=s("span"),vo=o("Inference"),fr=l(),W=s("p"),To=o("TrOCR\u2019s "),nt=s("a"),Co=o("VisionEncoderDecoderModel"),bo=o(` model accepts images as input and makes use of
`),it=s("a"),wo=o("generate()"),ko=o(` to autoregressively generate text given the input
image.`),mr=l(),$=s("p"),Oo=o("The "),dt=s("a"),Ro=o("ViTFeatureExtractor"),$o=o(` class is responsible for preprocessing the input image and
`),lt=s("a"),yo=o("RobertaTokenizer"),Eo=o(` decodes the generated target tokens to the target string. The
`),ct=s("a"),xo=o("TrOCRProcessor"),Po=o(" wraps "),ft=s("a"),Mo=o("ViTFeatureExtractor"),zo=o(` and
`),mt=s("a"),Fo=o("RobertaTokenizer"),Ao=o(` into a single instance to both extract the input features and decode the
predicted token ids.`),hr=l(),ht=s("ul"),St=s("li"),Lo=o("Step-by-step Optical Character Recognition (OCR)"),pr=l(),_(ze.$$.fragment),ur=l(),ie=s("p"),jo=o("See the "),Fe=s("a"),Do=o("model hub"),Io=o(" to look for TrOCR checkpoints."),gr=l(),Y=s("h2"),de=s("a"),Nt=s("span"),_(Ae.$$.fragment),qo=l(),Wt=s("span"),Vo=o("TrOCRConfig"),_r=l(),x=s("div"),_(Le.$$.fragment),So=l(),K=s("p"),No=o("This is the configuration class to store the configuration of a "),pt=s("a"),Wo=o("TrOCRForCausalLM"),Ho=o(`. It is used
to instantiate an TrOCR model according to the specified arguments, defining the model architecture. Instantiating
a configuration with the defaults will yield a similar configuration to that of the TrOCR `),je=s("a"),Bo=o("microsoft/trocr-base"),Uo=o(" architecture."),Go=l(),Q=s("p"),Zo=o("Configuration objects inherit from "),ut=s("a"),Jo=o("PretrainedConfig"),Yo=o(` and can be used to control the model
outputs. Read the documentation from `),gt=s("a"),Ko=o("PretrainedConfig"),Qo=o(" for more information."),Xo=l(),Ht=s("p"),ea=o("Example:"),ta=l(),_(De.$$.fragment),vr=l(),X=s("h2"),le=s("a"),Bt=s("span"),_(Ie.$$.fragment),ra=l(),Ut=s("span"),oa=o("TrOCRProcessor"),Tr=l(),u=s("div"),_(qe.$$.fragment),aa=l(),Gt=s("p"),sa=o("Constructs a TrOCR processor which wraps a vision feature extractor and a TrOCR tokenizer into a single processor."),na=l(),z=s("p"),_t=s("a"),ia=o("TrOCRProcessor"),da=o(" offers all the functionalities of "),vt=s("a"),la=o("AutoFeatureExtractor"),ca=o(`
and `),Tt=s("a"),fa=o("RobertaTokenizer"),ma=o(". See the "),Ve=s("a"),Zt=s("strong"),ha=o("call"),pa=o("()"),ua=o(` and
`),Ct=s("a"),ga=o("decode()"),_a=o(" for more information."),va=l(),ce=s("div"),_(Se.$$.fragment),Ta=l(),q=s("p"),Ca=o(`When used in normal mode, this method forwards all its arguments to AutoFeatureExtractor\u2019s
`),Jt=s("code"),ba=o("__call__()"),wa=o(` and returns its output. If used in the context
`),bt=s("a"),ka=o("as_target_processor()"),Oa=o(` this method forwards all its arguments to
TrOCRTokenizer\u2019s `),Yt=s("code"),Ra=o("__call__"),$a=o(`. Please refer to the doctsring of the above two
methods for more information.`),ya=l(),H=s("div"),_(Ne.$$.fragment),Ea=l(),We=s("p"),xa=o("Instantiate a "),wt=s("a"),Pa=o("TrOCRProcessor"),Ma=o(" from a pretrained TrOCR processor."),za=l(),_(fe.$$.fragment),Fa=l(),B=s("div"),_(He.$$.fragment),Aa=l(),ee=s("p"),La=o("Save a TrOCR feature extractor object and TrOCR tokenizer object to the directory "),Kt=s("code"),ja=o("save_directory"),Da=o(`, so that
it can be re-loaded using the `),kt=s("a"),Ia=o("from_pretrained()"),qa=o(" class method."),Va=l(),_(me.$$.fragment),Sa=l(),he=s("div"),_(Be.$$.fragment),Na=l(),Ue=s("p"),Wa=o(`This method forwards all its arguments to TrOCRTokenizer\u2019s
`),Ot=s("a"),Ha=o("batch_decode()"),Ba=o(`. Please refer to the docstring of this method for more
information.`),Ua=l(),pe=s("div"),_(Ge.$$.fragment),Ga=l(),Ze=s("p"),Za=o("This method forwards all its arguments to TrOCRTokenizer\u2019s "),Rt=s("a"),Ja=o("decode()"),Ya=o(`.
Please refer to the docstring of this method for more information.`),Ka=l(),ue=s("div"),_(Je.$$.fragment),Qa=l(),Qt=s("p"),Xa=o("Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning TrOCR."),Cr=l(),te=s("h2"),ge=s("a"),Xt=s("span"),_(Ye.$$.fragment),es=l(),er=s("span"),ts=o("TrOCRForCausalLM"),br=l(),L=s("div"),_(Ke.$$.fragment),rs=l(),V=s("p"),os=o("The TrOCR Decoder with a language modeling head. Can be used as the decoder part of "),$t=s("a"),as=o("EncoderDecoderModel"),ss=o(" and "),tr=s("code"),ns=o("VisionEncoderDecoder"),is=o(`.
This model inherits from `),yt=s("a"),ds=o("PreTrainedModel"),ls=o(`. Check the superclass documentation for the generic
methods the library implements for all its model (such as downloading or saving, resizing the input embeddings,
pruning heads etc.)`),cs=l(),Qe=s("p"),fs=o("This model is also a PyTorch "),Xe=s("a"),ms=o("torch.nn.Module"),hs=o(`
subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to
general usage and behavior.`),ps=l(),U=s("div"),_(et.$$.fragment),us=l(),rr=s("p"),gs=o("Example:"),_s=l(),_(tt.$$.fragment),this.h()},l(t){const f=Fn('[data-svelte="svelte-1phssyn"]',document.head);h=n(f,"META",{name:!0,content:!0}),f.forEach(r),P=c(t),p=n(t,"H1",{class:!0});var rt=i(p);k=n(rt,"A",{id:!0,class:!0,href:!0});var or=i(k);F=n(or,"SPAN",{});var Cs=i(F);v(O.$$.fragment,Cs),Cs.forEach(r),or.forEach(r),D=c(rt),A=n(rt,"SPAN",{});var bs=i(A);y=a(bs,"TrOCR"),bs.forEach(r),rt.forEach(r),g=c(t),E=n(t,"H2",{class:!0});var kr=i(E);M=n(kr,"A",{id:!0,class:!0,href:!0});var ws=i(M);Dt=n(ws,"SPAN",{});var ks=i(Dt);v(we.$$.fragment,ks),ks.forEach(r),ws.forEach(r),Nr=c(kr),It=n(kr,"SPAN",{});var Os=i(It);Wr=a(Os,"Overview"),Os.forEach(r),kr.forEach(r),ar=c(t),N=n(t,"P",{});var Et=i(N);Hr=a(Et,"The TrOCR model was proposed in "),ke=n(Et,"A",{href:!0,rel:!0});var Rs=i(ke);Br=a(Rs,"TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models"),Rs.forEach(r),Ur=a(Et,` by Minghao Li, Tengchao Lv, Lei Cui, Yijuan Lu, Dinei Florencio, Cha Zhang,
Zhoujun Li, Furu Wei. TrOCR consists of an image Transformer encoder and an autoregressive text Transformer decoder to
perform `),Oe=n(Et,"A",{href:!0,rel:!0});var $s=i(Oe);Gr=a($s,"optical character recognition (OCR)"),$s.forEach(r),Zr=a(Et,"."),Et.forEach(r),sr=c(t),re=n(t,"P",{});var Or=i(re);Jr=a(Or,"Please refer to the "),ot=n(Or,"A",{href:!0});var ys=i(ot);Yr=a(ys,"VisionEncoderDecoder"),ys.forEach(r),Kr=a(Or," class on how to use this model."),Or.forEach(r),nr=c(t),oe=n(t,"P",{});var Rr=i(oe);Qr=a(Rr,"This model was contributed by "),Re=n(Rr,"A",{href:!0,rel:!0});var Es=i(Re);Xr=a(Es,"Niels Rogge"),Es.forEach(r),eo=a(Rr,"."),Rr.forEach(r),ir=c(t),ae=n(t,"P",{});var $r=i(ae);to=a($r,"The original code can be found "),$e=n($r,"A",{href:!0,rel:!0});var xs=i($e);ro=a(xs,"here"),xs.forEach(r),oo=a($r,"."),$r.forEach(r),dr=c(t),at=n(t,"P",{});var Ps=i(at);ao=a(Ps,"Tips:"),Ps.forEach(r),lr=c(t),se=n(t,"UL",{});var yr=i(se);I=n(yr,"LI",{});var _e=i(I);so=a(_e,`TrOCR is pre-trained in 2 stages before being fine-tuned on downstream datasets. It achieves state-of-the-art results
on both printed (e.g. the `),ye=n(_e,"A",{href:!0,rel:!0});var Ms=i(ye);no=a(Ms,"SROIE dataset"),Ms.forEach(r),io=a(_e,`) and handwritten (e.g. the
`),Ee=n(_e,"A",{href:!0,rel:!0});var zs=i(Ee);lo=a(zs,"IAM Handwriting dataset"),zs.forEach(r),co=a(_e,`) text recognition tasks.
For more information, see the `),xe=n(_e,"A",{href:!0,rel:!0});var Fs=i(xe);fo=a(Fs,"official models"),Fs.forEach(r),mo=a(_e,"."),_e.forEach(r),ho=c(yr),Pe=n(yr,"LI",{});var Er=i(Pe);po=a(Er,"TrOCR is always used within the "),st=n(Er,"A",{href:!0});var As=i(st);uo=a(As,"VisionEncoderDecoder"),As.forEach(r),go=a(Er," framework."),Er.forEach(r),yr.forEach(r),cr=c(t),J=n(t,"H2",{class:!0});var xr=i(J);ne=n(xr,"A",{id:!0,class:!0,href:!0});var Ls=i(ne);qt=n(Ls,"SPAN",{});var js=i(qt);v(Me.$$.fragment,js),js.forEach(r),Ls.forEach(r),_o=c(xr),Vt=n(xr,"SPAN",{});var Ds=i(Vt);vo=a(Ds,"Inference"),Ds.forEach(r),xr.forEach(r),fr=c(t),W=n(t,"P",{});var xt=i(W);To=a(xt,"TrOCR\u2019s "),nt=n(xt,"A",{href:!0});var Is=i(nt);Co=a(Is,"VisionEncoderDecoderModel"),Is.forEach(r),bo=a(xt,` model accepts images as input and makes use of
`),it=n(xt,"A",{href:!0});var qs=i(it);wo=a(qs,"generate()"),qs.forEach(r),ko=a(xt,` to autoregressively generate text given the input
image.`),xt.forEach(r),mr=c(t),$=n(t,"P",{});var j=i($);Oo=a(j,"The "),dt=n(j,"A",{href:!0});var Vs=i(dt);Ro=a(Vs,"ViTFeatureExtractor"),Vs.forEach(r),$o=a(j,` class is responsible for preprocessing the input image and
`),lt=n(j,"A",{href:!0});var Ss=i(lt);yo=a(Ss,"RobertaTokenizer"),Ss.forEach(r),Eo=a(j,` decodes the generated target tokens to the target string. The
`),ct=n(j,"A",{href:!0});var Ns=i(ct);xo=a(Ns,"TrOCRProcessor"),Ns.forEach(r),Po=a(j," wraps "),ft=n(j,"A",{href:!0});var Ws=i(ft);Mo=a(Ws,"ViTFeatureExtractor"),Ws.forEach(r),zo=a(j,` and
`),mt=n(j,"A",{href:!0});var Hs=i(mt);Fo=a(Hs,"RobertaTokenizer"),Hs.forEach(r),Ao=a(j,` into a single instance to both extract the input features and decode the
predicted token ids.`),j.forEach(r),hr=c(t),ht=n(t,"UL",{});var Bs=i(ht);St=n(Bs,"LI",{});var Us=i(St);Lo=a(Us,"Step-by-step Optical Character Recognition (OCR)"),Us.forEach(r),Bs.forEach(r),pr=c(t),v(ze.$$.fragment,t),ur=c(t),ie=n(t,"P",{});var Pr=i(ie);jo=a(Pr,"See the "),Fe=n(Pr,"A",{href:!0,rel:!0});var Gs=i(Fe);Do=a(Gs,"model hub"),Gs.forEach(r),Io=a(Pr," to look for TrOCR checkpoints."),Pr.forEach(r),gr=c(t),Y=n(t,"H2",{class:!0});var Mr=i(Y);de=n(Mr,"A",{id:!0,class:!0,href:!0});var Zs=i(de);Nt=n(Zs,"SPAN",{});var Js=i(Nt);v(Ae.$$.fragment,Js),Js.forEach(r),Zs.forEach(r),qo=c(Mr),Wt=n(Mr,"SPAN",{});var Ys=i(Wt);Vo=a(Ys,"TrOCRConfig"),Ys.forEach(r),Mr.forEach(r),_r=c(t),x=n(t,"DIV",{class:!0});var G=i(x);v(Le.$$.fragment,G),So=c(G),K=n(G,"P",{});var Pt=i(K);No=a(Pt,"This is the configuration class to store the configuration of a "),pt=n(Pt,"A",{href:!0});var Ks=i(pt);Wo=a(Ks,"TrOCRForCausalLM"),Ks.forEach(r),Ho=a(Pt,`. It is used
to instantiate an TrOCR model according to the specified arguments, defining the model architecture. Instantiating
a configuration with the defaults will yield a similar configuration to that of the TrOCR `),je=n(Pt,"A",{href:!0,rel:!0});var Qs=i(je);Bo=a(Qs,"microsoft/trocr-base"),Qs.forEach(r),Uo=a(Pt," architecture."),Pt.forEach(r),Go=c(G),Q=n(G,"P",{});var Mt=i(Q);Zo=a(Mt,"Configuration objects inherit from "),ut=n(Mt,"A",{href:!0});var Xs=i(ut);Jo=a(Xs,"PretrainedConfig"),Xs.forEach(r),Yo=a(Mt,` and can be used to control the model
outputs. Read the documentation from `),gt=n(Mt,"A",{href:!0});var en=i(gt);Ko=a(en,"PretrainedConfig"),en.forEach(r),Qo=a(Mt," for more information."),Mt.forEach(r),Xo=c(G),Ht=n(G,"P",{});var tn=i(Ht);ea=a(tn,"Example:"),tn.forEach(r),ta=c(G),v(De.$$.fragment,G),G.forEach(r),vr=c(t),X=n(t,"H2",{class:!0});var zr=i(X);le=n(zr,"A",{id:!0,class:!0,href:!0});var rn=i(le);Bt=n(rn,"SPAN",{});var on=i(Bt);v(Ie.$$.fragment,on),on.forEach(r),rn.forEach(r),ra=c(zr),Ut=n(zr,"SPAN",{});var an=i(Ut);oa=a(an,"TrOCRProcessor"),an.forEach(r),zr.forEach(r),Tr=c(t),u=n(t,"DIV",{class:!0});var R=i(u);v(qe.$$.fragment,R),aa=c(R),Gt=n(R,"P",{});var sn=i(Gt);sa=a(sn,"Constructs a TrOCR processor which wraps a vision feature extractor and a TrOCR tokenizer into a single processor."),sn.forEach(r),na=c(R),z=n(R,"P",{});var S=i(z);_t=n(S,"A",{href:!0});var nn=i(_t);ia=a(nn,"TrOCRProcessor"),nn.forEach(r),da=a(S," offers all the functionalities of "),vt=n(S,"A",{href:!0});var dn=i(vt);la=a(dn,"AutoFeatureExtractor"),dn.forEach(r),ca=a(S,`
and `),Tt=n(S,"A",{href:!0});var ln=i(Tt);fa=a(ln,"RobertaTokenizer"),ln.forEach(r),ma=a(S,". See the "),Ve=n(S,"A",{href:!0});var vs=i(Ve);Zt=n(vs,"STRONG",{});var cn=i(Zt);ha=a(cn,"call"),cn.forEach(r),pa=a(vs,"()"),vs.forEach(r),ua=a(S,` and
`),Ct=n(S,"A",{href:!0});var fn=i(Ct);ga=a(fn,"decode()"),fn.forEach(r),_a=a(S," for more information."),S.forEach(r),va=c(R),ce=n(R,"DIV",{class:!0});var Fr=i(ce);v(Se.$$.fragment,Fr),Ta=c(Fr),q=n(Fr,"P",{});var ve=i(q);Ca=a(ve,`When used in normal mode, this method forwards all its arguments to AutoFeatureExtractor\u2019s
`),Jt=n(ve,"CODE",{});var mn=i(Jt);ba=a(mn,"__call__()"),mn.forEach(r),wa=a(ve,` and returns its output. If used in the context
`),bt=n(ve,"A",{href:!0});var hn=i(bt);ka=a(hn,"as_target_processor()"),hn.forEach(r),Oa=a(ve,` this method forwards all its arguments to
TrOCRTokenizer\u2019s `),Yt=n(ve,"CODE",{});var pn=i(Yt);Ra=a(pn,"__call__"),pn.forEach(r),$a=a(ve,`. Please refer to the doctsring of the above two
methods for more information.`),ve.forEach(r),Fr.forEach(r),ya=c(R),H=n(R,"DIV",{class:!0});var zt=i(H);v(Ne.$$.fragment,zt),Ea=c(zt),We=n(zt,"P",{});var Ar=i(We);xa=a(Ar,"Instantiate a "),wt=n(Ar,"A",{href:!0});var un=i(wt);Pa=a(un,"TrOCRProcessor"),un.forEach(r),Ma=a(Ar," from a pretrained TrOCR processor."),Ar.forEach(r),za=c(zt),v(fe.$$.fragment,zt),zt.forEach(r),Fa=c(R),B=n(R,"DIV",{class:!0});var Ft=i(B);v(He.$$.fragment,Ft),Aa=c(Ft),ee=n(Ft,"P",{});var At=i(ee);La=a(At,"Save a TrOCR feature extractor object and TrOCR tokenizer object to the directory "),Kt=n(At,"CODE",{});var gn=i(Kt);ja=a(gn,"save_directory"),gn.forEach(r),Da=a(At,`, so that
it can be re-loaded using the `),kt=n(At,"A",{href:!0});var _n=i(kt);Ia=a(_n,"from_pretrained()"),_n.forEach(r),qa=a(At," class method."),At.forEach(r),Va=c(Ft),v(me.$$.fragment,Ft),Ft.forEach(r),Sa=c(R),he=n(R,"DIV",{class:!0});var Lr=i(he);v(Be.$$.fragment,Lr),Na=c(Lr),Ue=n(Lr,"P",{});var jr=i(Ue);Wa=a(jr,`This method forwards all its arguments to TrOCRTokenizer\u2019s
`),Ot=n(jr,"A",{href:!0});var vn=i(Ot);Ha=a(vn,"batch_decode()"),vn.forEach(r),Ba=a(jr,`. Please refer to the docstring of this method for more
information.`),jr.forEach(r),Lr.forEach(r),Ua=c(R),pe=n(R,"DIV",{class:!0});var Dr=i(pe);v(Ge.$$.fragment,Dr),Ga=c(Dr),Ze=n(Dr,"P",{});var Ir=i(Ze);Za=a(Ir,"This method forwards all its arguments to TrOCRTokenizer\u2019s "),Rt=n(Ir,"A",{href:!0});var Tn=i(Rt);Ja=a(Tn,"decode()"),Tn.forEach(r),Ya=a(Ir,`.
Please refer to the docstring of this method for more information.`),Ir.forEach(r),Dr.forEach(r),Ka=c(R),ue=n(R,"DIV",{class:!0});var qr=i(ue);v(Je.$$.fragment,qr),Qa=c(qr),Qt=n(qr,"P",{});var Cn=i(Qt);Xa=a(Cn,"Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning TrOCR."),Cn.forEach(r),qr.forEach(r),R.forEach(r),Cr=c(t),te=n(t,"H2",{class:!0});var Vr=i(te);ge=n(Vr,"A",{id:!0,class:!0,href:!0});var bn=i(ge);Xt=n(bn,"SPAN",{});var wn=i(Xt);v(Ye.$$.fragment,wn),wn.forEach(r),bn.forEach(r),es=c(Vr),er=n(Vr,"SPAN",{});var kn=i(er);ts=a(kn,"TrOCRForCausalLM"),kn.forEach(r),Vr.forEach(r),br=c(t),L=n(t,"DIV",{class:!0});var Te=i(L);v(Ke.$$.fragment,Te),rs=c(Te),V=n(Te,"P",{});var Ce=i(V);os=a(Ce,"The TrOCR Decoder with a language modeling head. Can be used as the decoder part of "),$t=n(Ce,"A",{href:!0});var On=i($t);as=a(On,"EncoderDecoderModel"),On.forEach(r),ss=a(Ce," and "),tr=n(Ce,"CODE",{});var Rn=i(tr);ns=a(Rn,"VisionEncoderDecoder"),Rn.forEach(r),is=a(Ce,`.
This model inherits from `),yt=n(Ce,"A",{href:!0});var $n=i(yt);ds=a($n,"PreTrainedModel"),$n.forEach(r),ls=a(Ce,`. Check the superclass documentation for the generic
methods the library implements for all its model (such as downloading or saving, resizing the input embeddings,
pruning heads etc.)`),Ce.forEach(r),cs=c(Te),Qe=n(Te,"P",{});var Sr=i(Qe);fs=a(Sr,"This model is also a PyTorch "),Xe=n(Sr,"A",{href:!0,rel:!0});var yn=i(Xe);ms=a(yn,"torch.nn.Module"),yn.forEach(r),hs=a(Sr,`
subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to
general usage and behavior.`),Sr.forEach(r),ps=c(Te),U=n(Te,"DIV",{class:!0});var Lt=i(U);v(et.$$.fragment,Lt),us=c(Lt),rr=n(Lt,"P",{});var En=i(rr);gs=a(En,"Example:"),En.forEach(r),_s=c(Lt),v(tt.$$.fragment,Lt),Lt.forEach(r),Te.forEach(r),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(Dn)),d(k,"id","trocr"),d(k,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k,"href","#trocr"),d(p,"class","relative group"),d(M,"id","overview"),d(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M,"href","#overview"),d(E,"class","relative group"),d(ke,"href","https://arxiv.org/abs/2109.10282"),d(ke,"rel","nofollow"),d(Oe,"href","https://en.wikipedia.org/wiki/Optical_character_recognition"),d(Oe,"rel","nofollow"),d(ot,"href","/docs/transformers/master/en/visionencoderdecoder"),d(Re,"href","https://huggingface.co/nielsr"),d(Re,"rel","nofollow"),d($e,"href","https://github.com/microsoft/unilm/tree/6f60612e7cc86a2a1ae85c47231507a587ab4e01/trocr"),d($e,"rel","nofollow"),d(ye,"href","https://paperswithcode.com/dataset/sroie"),d(ye,"rel","nofollow"),d(Ee,"href","https://fki.tic.heia-fr.ch/databases/iam-handwriting-database"),d(Ee,"rel","nofollow"),d(xe,"href","https://huggingface.co/models?other=trocr"),d(xe,"rel","nofollow"),d(st,"href","/docs/transformers/master/en/visionencoderdecoder"),d(ne,"id","inference"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#inference"),d(J,"class","relative group"),d(nt,"href","/docs/transformers/master/en/model_doc/visionencoderdecoder#transformers.VisionEncoderDecoderModel"),d(it,"href","/docs/transformers/master/en/main_classes/model#transformers.generation_utils.GenerationMixin.generate"),d(dt,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lt,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ct,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),d(ft,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(mt,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Fe,"href","https://huggingface.co/models?filter=trocr"),d(Fe,"rel","nofollow"),d(de,"id","transformers.TrOCRConfig"),d(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(de,"href","#transformers.TrOCRConfig"),d(Y,"class","relative group"),d(pt,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(je,"href","https://huggingface.co/microsoft/trocr-base"),d(je,"rel","nofollow"),d(ut,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),d(gt,"href","/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig"),d(x,"class","docstring"),d(le,"id","transformers.TrOCRProcessor"),d(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(le,"href","#transformers.TrOCRProcessor"),d(X,"class","relative group"),d(_t,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),d(vt,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor"),d(Tt,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ve,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor.__call__"),d(Ct,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor.decode"),d(bt,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor.as_target_processor"),d(ce,"class","docstring"),d(wt,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),d(H,"class","docstring"),d(kt,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor.from_pretrained"),d(B,"class","docstring"),d(Ot,"href","/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode"),d(he,"class","docstring"),d(Rt,"href","/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode"),d(pe,"class","docstring"),d(ue,"class","docstring"),d(u,"class","docstring"),d(ge,"id","transformers.TrOCRForCausalLM"),d(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ge,"href","#transformers.TrOCRForCausalLM"),d(te,"class","relative group"),d($t,"href","/docs/transformers/master/en/model_doc/encoderdecoder#transformers.EncoderDecoderModel"),d(yt,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel"),d(Xe,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Xe,"rel","nofollow"),d(U,"class","docstring"),d(L,"class","docstring")},m(t,f){e(document.head,h),m(t,P,f),m(t,p,f),e(p,k),e(k,F),T(O,F,null),e(p,D),e(p,A),e(A,y),m(t,g,f),m(t,E,f),e(E,M),e(M,Dt),T(we,Dt,null),e(E,Nr),e(E,It),e(It,Wr),m(t,ar,f),m(t,N,f),e(N,Hr),e(N,ke),e(ke,Br),e(N,Ur),e(N,Oe),e(Oe,Gr),e(N,Zr),m(t,sr,f),m(t,re,f),e(re,Jr),e(re,ot),e(ot,Yr),e(re,Kr),m(t,nr,f),m(t,oe,f),e(oe,Qr),e(oe,Re),e(Re,Xr),e(oe,eo),m(t,ir,f),m(t,ae,f),e(ae,to),e(ae,$e),e($e,ro),e(ae,oo),m(t,dr,f),m(t,at,f),e(at,ao),m(t,lr,f),m(t,se,f),e(se,I),e(I,so),e(I,ye),e(ye,no),e(I,io),e(I,Ee),e(Ee,lo),e(I,co),e(I,xe),e(xe,fo),e(I,mo),e(se,ho),e(se,Pe),e(Pe,po),e(Pe,st),e(st,uo),e(Pe,go),m(t,cr,f),m(t,J,f),e(J,ne),e(ne,qt),T(Me,qt,null),e(J,_o),e(J,Vt),e(Vt,vo),m(t,fr,f),m(t,W,f),e(W,To),e(W,nt),e(nt,Co),e(W,bo),e(W,it),e(it,wo),e(W,ko),m(t,mr,f),m(t,$,f),e($,Oo),e($,dt),e(dt,Ro),e($,$o),e($,lt),e(lt,yo),e($,Eo),e($,ct),e(ct,xo),e($,Po),e($,ft),e(ft,Mo),e($,zo),e($,mt),e(mt,Fo),e($,Ao),m(t,hr,f),m(t,ht,f),e(ht,St),e(St,Lo),m(t,pr,f),T(ze,t,f),m(t,ur,f),m(t,ie,f),e(ie,jo),e(ie,Fe),e(Fe,Do),e(ie,Io),m(t,gr,f),m(t,Y,f),e(Y,de),e(de,Nt),T(Ae,Nt,null),e(Y,qo),e(Y,Wt),e(Wt,Vo),m(t,_r,f),m(t,x,f),T(Le,x,null),e(x,So),e(x,K),e(K,No),e(K,pt),e(pt,Wo),e(K,Ho),e(K,je),e(je,Bo),e(K,Uo),e(x,Go),e(x,Q),e(Q,Zo),e(Q,ut),e(ut,Jo),e(Q,Yo),e(Q,gt),e(gt,Ko),e(Q,Qo),e(x,Xo),e(x,Ht),e(Ht,ea),e(x,ta),T(De,x,null),m(t,vr,f),m(t,X,f),e(X,le),e(le,Bt),T(Ie,Bt,null),e(X,ra),e(X,Ut),e(Ut,oa),m(t,Tr,f),m(t,u,f),T(qe,u,null),e(u,aa),e(u,Gt),e(Gt,sa),e(u,na),e(u,z),e(z,_t),e(_t,ia),e(z,da),e(z,vt),e(vt,la),e(z,ca),e(z,Tt),e(Tt,fa),e(z,ma),e(z,Ve),e(Ve,Zt),e(Zt,ha),e(Ve,pa),e(z,ua),e(z,Ct),e(Ct,ga),e(z,_a),e(u,va),e(u,ce),T(Se,ce,null),e(ce,Ta),e(ce,q),e(q,Ca),e(q,Jt),e(Jt,ba),e(q,wa),e(q,bt),e(bt,ka),e(q,Oa),e(q,Yt),e(Yt,Ra),e(q,$a),e(u,ya),e(u,H),T(Ne,H,null),e(H,Ea),e(H,We),e(We,xa),e(We,wt),e(wt,Pa),e(We,Ma),e(H,za),T(fe,H,null),e(u,Fa),e(u,B),T(He,B,null),e(B,Aa),e(B,ee),e(ee,La),e(ee,Kt),e(Kt,ja),e(ee,Da),e(ee,kt),e(kt,Ia),e(ee,qa),e(B,Va),T(me,B,null),e(u,Sa),e(u,he),T(Be,he,null),e(he,Na),e(he,Ue),e(Ue,Wa),e(Ue,Ot),e(Ot,Ha),e(Ue,Ba),e(u,Ua),e(u,pe),T(Ge,pe,null),e(pe,Ga),e(pe,Ze),e(Ze,Za),e(Ze,Rt),e(Rt,Ja),e(Ze,Ya),e(u,Ka),e(u,ue),T(Je,ue,null),e(ue,Qa),e(ue,Qt),e(Qt,Xa),m(t,Cr,f),m(t,te,f),e(te,ge),e(ge,Xt),T(Ye,Xt,null),e(te,es),e(te,er),e(er,ts),m(t,br,f),m(t,L,f),T(Ke,L,null),e(L,rs),e(L,V),e(V,os),e(V,$t),e($t,as),e(V,ss),e(V,tr),e(tr,ns),e(V,is),e(V,yt),e(yt,ds),e(V,ls),e(L,cs),e(L,Qe),e(Qe,fs),e(Qe,Xe),e(Xe,ms),e(Qe,hs),e(L,ps),e(L,U),T(et,U,null),e(U,us),e(U,rr),e(rr,gs),e(U,_s),T(tt,U,null),wr=!0},p(t,[f]){const rt={};f&2&&(rt.$$scope={dirty:f,ctx:t}),fe.$set(rt);const or={};f&2&&(or.$$scope={dirty:f,ctx:t}),me.$set(or)},i(t){wr||(C(O.$$.fragment,t),C(we.$$.fragment,t),C(Me.$$.fragment,t),C(ze.$$.fragment,t),C(Ae.$$.fragment,t),C(Le.$$.fragment,t),C(De.$$.fragment,t),C(Ie.$$.fragment,t),C(qe.$$.fragment,t),C(Se.$$.fragment,t),C(Ne.$$.fragment,t),C(fe.$$.fragment,t),C(He.$$.fragment,t),C(me.$$.fragment,t),C(Be.$$.fragment,t),C(Ge.$$.fragment,t),C(Je.$$.fragment,t),C(Ye.$$.fragment,t),C(Ke.$$.fragment,t),C(et.$$.fragment,t),C(tt.$$.fragment,t),wr=!0)},o(t){b(O.$$.fragment,t),b(we.$$.fragment,t),b(Me.$$.fragment,t),b(ze.$$.fragment,t),b(Ae.$$.fragment,t),b(Le.$$.fragment,t),b(De.$$.fragment,t),b(Ie.$$.fragment,t),b(qe.$$.fragment,t),b(Se.$$.fragment,t),b(Ne.$$.fragment,t),b(fe.$$.fragment,t),b(He.$$.fragment,t),b(me.$$.fragment,t),b(Be.$$.fragment,t),b(Ge.$$.fragment,t),b(Je.$$.fragment,t),b(Ye.$$.fragment,t),b(Ke.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),wr=!1},d(t){r(h),t&&r(P),t&&r(p),w(O),t&&r(g),t&&r(E),w(we),t&&r(ar),t&&r(N),t&&r(sr),t&&r(re),t&&r(nr),t&&r(oe),t&&r(ir),t&&r(ae),t&&r(dr),t&&r(at),t&&r(lr),t&&r(se),t&&r(cr),t&&r(J),w(Me),t&&r(fr),t&&r(W),t&&r(mr),t&&r($),t&&r(hr),t&&r(ht),t&&r(pr),w(ze,t),t&&r(ur),t&&r(ie),t&&r(gr),t&&r(Y),w(Ae),t&&r(_r),t&&r(x),w(Le),w(De),t&&r(vr),t&&r(X),w(Ie),t&&r(Tr),t&&r(u),w(qe),w(Se),w(Ne),w(fe),w(He),w(me),w(Be),w(Ge),w(Je),t&&r(Cr),t&&r(te),w(Ye),t&&r(br),t&&r(L),w(Ke),w(et),w(tt)}}}const Dn={local:"trocr",sections:[{local:"overview",title:"Overview"},{local:"inference",title:"Inference"},{local:"transformers.TrOCRConfig",title:"TrOCRConfig"},{local:"transformers.TrOCRProcessor",title:"TrOCRProcessor"},{local:"transformers.TrOCRForCausalLM",title:"TrOCRForCausalLM"}],title:"TrOCR"};function In(be,h,P){let{fw:p}=h;return be.$$set=k=>{"fw"in k&&P(0,p=k.fw)},[p]}class Bn extends Pn{constructor(h){super();Mn(this,h,In,jn,zn,{fw:0})}}export{Bn as default,Dn as metadata};
