import{S as Ze,i as st,s as at,e as p,k as r,w as es,t as n,U as P,M as et,c as o,d as a,m as h,a as m,x as ts,h as l,V as z,b as c,N as me,F as e,g as i,y as ns,L as tt,q as ls,o as is,B as ps}from"../chunks/vendor-68651a14.js";import{I as re}from"../chunks/IconCopyLink-8ff17449.js";import{C as he}from"../chunks/CodeBlock-b98730f5.js";import"../chunks/CopyButton-e88c769b.js";function nt(wa){let _,N,u,y,os,A,va,ms,ya,ks,$,xa,R,_a,ba,Ps,x,ka,zs,Xe='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X = (x_0, x_1, \\dots, x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Ts,Es,Fe='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>',$s,qs,Ne='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>PPL</mtext><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>exp</mi><mo>\u2061</mo><mrow><mo fence="true">{</mo><mrow><mo>\u2212</mo><mfrac><mn>1</mn><mi>t</mi></mfrac><munderover><mo>\u2211</mo><mi>i</mi><mi>t</mi></munderover><mi>log</mi><mo>\u2061</mo><msub><mi>p</mi><mi>\u03B8</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">\u2223</mi><msub><mi>x</mi><mrow><mo>&lt;</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\\text{PPL}(X) = \\exp \\left\\{ {-\\frac{1}{t}\\sum_i^t \\log p_\\theta (x_i|x_{&lt;i}) } \\right\\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">PPL</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0582em;vertical-align:-1.2777em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mord">\u2212</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7806em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">\u2211</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">\u03B8</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">\u2223</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span>',Ms,b,Pa,js,Re='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>\u2061</mo><msub><mi>p</mi><mi>\u03B8</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">\u2223</mi><msub><mi>x</mi><mrow><mo>&lt;</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\log p_\\theta (x_i|x_{&lt;i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">\u03B8</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">\u2223</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Ls,Cs,Je='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mo>&lt;</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{&lt;i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6079em;vertical-align:-0.1774em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span></span></span></span>',Gs,Is,q,za,S,Ta,Ea,Ws,T,M,rs,B,$a,hs,qa,As,J,Ma,Ss,j,ce,Bs,f,ja,U,La,Ca,Os,Ue='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>\u03B8</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mi mathvariant="normal">\u2223</mi><msub><mi>x</mi><mrow><mo>&lt;</mo><mi>t</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p_\\theta(x_t|x_{&lt;t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">\u03B8</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">\u2223</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">&lt;</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.1774em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Ds,Hs,Ve='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>',Xs,Fs,w,Ga,Ns,Ke='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>',Rs,Js,Qe='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Us,Vs,Ye='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>\u2212</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>',Ks,Qs,L,de,Ys,V,Ia,Zs,K,Wa,sa,C,ge,aa,Q,Aa,ea,E,G,cs,O,Sa,ds,Ba,ta,Y,Oa,na,D,la,Z,Da,ia,H,pa,g,Ha,gs,Xa,Fa,us,Na,Ra,fs,Ja,Ua,ws,Va,Ka,oa,X,ma,ss,Qa,ra,d,Ya,vs,Za,se,ys,ae,ee,xs,te,ne,_s,le,ie,bs,pe,oe,ha;return A=new re({}),B=new re({}),O=new re({}),D=new he({props:{code:`from transformers import GPT2LMHeadModel, GPT2TokenizerFast
device = 'cuda'
model_id = 'gpt2-large'
model = GPT2LMHeadModel.from_pretrained(model_id).to(device)
tokenizer = GPT2TokenizerFast.from_pretrained(model_id),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2LMHeadModel, GPT2TokenizerFast
device = <span class="hljs-string">&#x27;cuda&#x27;</span>
model_id = <span class="hljs-string">&#x27;gpt2-large&#x27;</span>
model = GPT2LMHeadModel.from_pretrained(model_id).to(device)
tokenizer = GPT2TokenizerFast.from_pretrained(model_id)`}}),H=new he({props:{code:`from datasets import load_dataset
test = load_dataset('wikitext', 'wikitext-2-raw-v1', split='test')
encodings = tokenizer('\\n\\n'.join(test['text']), return_tensors='pt'),`,highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
test = load_dataset(<span class="hljs-string">&#x27;wikitext&#x27;</span>, <span class="hljs-string">&#x27;wikitext-2-raw-v1&#x27;</span>, split=<span class="hljs-string">&#x27;test&#x27;</span>)
encodings = tokenizer(<span class="hljs-string">&#x27;\\n\\n&#x27;</span>.join(test[<span class="hljs-string">&#x27;text&#x27;</span>]), return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)`}}),X=new he({props:{code:`import torch
from tqdm import tqdm

max_length = model.config.n_positions
stride = 512

nlls = []
for i in tqdm(range(0, encodings.input_ids.size(1), stride)):
    begin_loc = max(i + stride - max_length, 0)
    end_loc = min(i + stride, encodings.input_ids.size(1))
    trg_len = end_loc - i    # may be different from stride on last loop
    input_ids = encodings.input_ids[:,begin_loc:end_loc].to(device)
    target_ids = input_ids.clone()
    target_ids[:,:-trg_len] = -100

    with torch.no_grad():
        outputs = model(input_ids, labels=target_ids)
        neg_log_likelihood = outputs[0] * trg_len

    nlls.append(neg_log_likelihood)

ppl = torch.exp(torch.stack(nlls).sum() / end_loc),`,highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm

max_length = model.config.n_positions
stride = <span class="hljs-number">512</span>

nlls = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, encodings.input_ids.size(<span class="hljs-number">1</span>), stride)):
    begin_loc = <span class="hljs-built_in">max</span>(i + stride - max_length, <span class="hljs-number">0</span>)
    end_loc = <span class="hljs-built_in">min</span>(i + stride, encodings.input_ids.size(<span class="hljs-number">1</span>))
    trg_len = end_loc - i    <span class="hljs-comment"># may be different from stride on last loop</span>
    input_ids = encodings.input_ids[:,begin_loc:end_loc].to(device)
    target_ids = input_ids.clone()
    target_ids[:,:-trg_len] = -<span class="hljs-number">100</span>

    <span class="hljs-keyword">with</span> torch.no_grad():
        outputs = model(input_ids, labels=target_ids)
        neg_log_likelihood = outputs[<span class="hljs-number">0</span>] * trg_len

    nlls.append(neg_log_likelihood)

ppl = torch.exp(torch.stack(nlls).<span class="hljs-built_in">sum</span>() / end_loc)`}}),{c(){_=p("meta"),N=r(),u=p("h1"),y=p("a"),os=p("span"),es(A.$$.fragment),va=r(),ms=p("span"),ya=n("Perplexity of fixed-length models"),ks=r(),$=p("p"),xa=n(`Perplexity (PPL) is one of the most common metrics for evaluating language models. Before diving in, we should note
that the metric applies specifically to classical language models (sometimes called autoregressive or causal language
models) and is not well defined for masked language models like BERT (see `),R=p("a"),_a=n("summary of the models"),ba=n(")."),Ps=r(),x=p("p"),ka=n(`Perplexity is defined as the exponentiated average negative log-likelihood of a sequence. If we have a tokenized
sequence `),zs=new P,Ts=n(", then the perplexity of "),Es=new P,$s=n(` is,
`),qs=new P,Ms=r(),b=p("p"),Pa=n("where "),js=new P,Ls=n(" is the log-likelihood of the ith token conditioned on the preceding tokens "),Cs=new P,Gs=n(" according to our model. Intuitively, it can be thought of as an evaluation of the model\u2019s ability to predict uniformly among the set of specified tokens in a corpus. Importantly, this means that the tokenization procedure has a direct impact on a model\u2019s perplexity which should always be taken into consideration when comparing different models."),Is=r(),q=p("p"),za=n(`This is also equivalent to the exponentiation of the cross-entropy between the data and model predictions. For more
intuition about perplexity and its relationship to Bits Per Character (BPC) and data compression, check out this
`),S=p("a"),Ta=n("fantastic blog post on The Gradient"),Ea=n("."),Ws=r(),T=p("h2"),M=p("a"),rs=p("span"),es(B.$$.fragment),$a=r(),hs=p("span"),qa=n("Calculating PPL with fixed-length models"),As=r(),J=p("p"),Ma=n(`If we weren\u2019t limited by a model\u2019s context size, we would evaluate the model\u2019s perplexity by autoregressively
factorizing a sequence and conditioning on the entire preceding subsequence at each step, as shown below.`),Ss=r(),j=p("img"),Bs=r(),f=p("p"),ja=n(`When working with approximate models, however, we typically have a constraint on the number of tokens the model can
process. The largest version of `),U=p("a"),La=n("GPT-2"),Ca=n(`, for example, has a fixed length of 1024 tokens, so we
cannot calculate `),Os=new P,Ds=n(" directly when "),Hs=new P,Xs=n(" is greater than 1024."),Fs=r(),w=p("p"),Ga=n(`Instead, the sequence is typically broken into subsequences equal to the model\u2019s maximum input size. If a model\u2019s max
input size is `),Ns=new P,Rs=n(", we then approximate the likelihood of a token "),Js=new P,Us=n(` by conditioning only on the
`),Vs=new P,Ks=n(` tokens that precede it rather than the entire context. When evaluating the model\u2019s perplexity of a
sequence, a tempting but suboptimal approach is to break the sequence into disjoint chunks and add up the decomposed
log-likelihoods of each segment independently.`),Qs=r(),L=p("img"),Ys=r(),V=p("p"),Ia=n(`This is quick to compute since the perplexity of each segment can be computed in one forward pass, but serves as a poor
approximation of the fully-factorized perplexity and will typically yield a higher (worse) PPL because the model will
have less context at most of the prediction steps.`),Zs=r(),K=p("p"),Wa=n(`Instead, the PPL of fixed-length models should be evaluated with a sliding-window strategy. This involves repeatedly
sliding the context window so that the model has more context when making each prediction.`),sa=r(),C=p("img"),aa=r(),Q=p("p"),Aa=n(`This is a closer approximation to the true decomposition of the sequence probability and will typically yield a more
favorable score. The downside is that it requires a separate forward pass for each token in the corpus. A good
practical compromise is to employ a strided sliding window, moving the context by larger strides rather than sliding by
1 token a time. This allows computation to proceed much faster while still giving the model a large context to make
predictions at each step.`),ea=r(),E=p("h2"),G=p("a"),cs=p("span"),es(O.$$.fragment),Sa=r(),ds=p("span"),Ba=n("Example: Calculating perplexity with GPT-2 in \u{1F917} Transformers"),ta=r(),Y=p("p"),Oa=n("Let\u2019s demonstrate this process with GPT-2."),na=r(),es(D.$$.fragment),la=r(),Z=p("p"),Da=n(`We\u2019ll load in the WikiText-2 dataset and evaluate the perplexity using a few different sliding-window strategies. Since
this dataset is small and we\u2019re just doing one forward pass over the set, we can just load and encode the entire
dataset in memory.`),ia=r(),es(H.$$.fragment),pa=r(),g=p("p"),Ha=n("With \u{1F917} Transformers, we can simply pass the "),gs=p("code"),Xa=n("input_ids"),Fa=n(" as the "),us=p("code"),Na=n("labels"),Ra=n(` to our model, and the average negative
log-likelihood for each token is returned as the loss. With our sliding window approach, however, there is overlap in
the tokens we pass to the model at each iteration. We don\u2019t want the log-likelihood for the tokens we\u2019re just treating
as context to be included in our loss, so we can set these targets to `),fs=p("code"),Ja=n("-100"),Ua=n(` so that they are ignored. The following
is an example of how we could do this with a stride of `),ws=p("code"),Va=n("512"),Ka=n(`. This means that the model will have at least 512 tokens
for context when calculating the conditional likelihood of any one token (provided there are 512 preceding tokens
available to condition on).`),oa=r(),es(X.$$.fragment),ma=r(),ss=p("p"),Qa=n(`Running this with the stride length equal to the max input length is equivalent to the suboptimal, non-sliding-window
strategy we discussed above. The smaller the stride, the more context the model will have in making each prediction,
and the better the reported perplexity will typically be.`),ra=r(),d=p("p"),Ya=n("When we run the above with "),vs=p("code"),Za=n("stride = 1024"),se=n(", i.e. no overlap, the resulting PPL is "),ys=p("code"),ae=n("19.64"),ee=n(`, which is about the same
as the `),xs=p("code"),te=n("19.93"),ne=n(" reported in the GPT-2 paper. By using "),_s=p("code"),le=n("stride = 512"),ie=n(` and thereby employing our striding window
strategy, this jumps down to `),bs=p("code"),pe=n("16.53"),oe=n(`. This is not only a more favorable score, but is calculated in a way that is
closer to the true autoregressive decomposition of a sequence likelihood.`),this.h()},l(s){const t=et('[data-svelte="svelte-1phssyn"]',document.head);_=o(t,"META",{name:!0,content:!0}),t.forEach(a),N=h(s),u=o(s,"H1",{class:!0});var ca=m(u);y=o(ca,"A",{id:!0,class:!0,href:!0});var ue=m(y);os=o(ue,"SPAN",{});var fe=m(os);ts(A.$$.fragment,fe),fe.forEach(a),ue.forEach(a),va=h(ca),ms=o(ca,"SPAN",{});var we=m(ms);ya=l(we,"Perplexity of fixed-length models"),we.forEach(a),ca.forEach(a),ks=h(s),$=o(s,"P",{});var da=m($);xa=l(da,`Perplexity (PPL) is one of the most common metrics for evaluating language models. Before diving in, we should note
that the metric applies specifically to classical language models (sometimes called autoregressive or causal language
models) and is not well defined for masked language models like BERT (see `),R=o(da,"A",{href:!0});var ve=m(R);_a=l(ve,"summary of the models"),ve.forEach(a),ba=l(da,")."),da.forEach(a),Ps=h(s),x=o(s,"P",{});var F=m(x);ka=l(F,`Perplexity is defined as the exponentiated average negative log-likelihood of a sequence. If we have a tokenized
sequence `),zs=z(F),Ts=l(F,", then the perplexity of "),Es=z(F),$s=l(F,` is,
`),qs=z(F),F.forEach(a),Ms=h(s),b=o(s,"P",{});var as=m(b);Pa=l(as,"where "),js=z(as),Ls=l(as," is the log-likelihood of the ith token conditioned on the preceding tokens "),Cs=z(as),Gs=l(as," according to our model. Intuitively, it can be thought of as an evaluation of the model\u2019s ability to predict uniformly among the set of specified tokens in a corpus. Importantly, this means that the tokenization procedure has a direct impact on a model\u2019s perplexity which should always be taken into consideration when comparing different models."),as.forEach(a),Is=h(s),q=o(s,"P",{});var ga=m(q);za=l(ga,`This is also equivalent to the exponentiation of the cross-entropy between the data and model predictions. For more
intuition about perplexity and its relationship to Bits Per Character (BPC) and data compression, check out this
`),S=o(ga,"A",{href:!0,rel:!0});var ye=m(S);Ta=l(ye,"fantastic blog post on The Gradient"),ye.forEach(a),Ea=l(ga,"."),ga.forEach(a),Ws=h(s),T=o(s,"H2",{class:!0});var ua=m(T);M=o(ua,"A",{id:!0,class:!0,href:!0});var xe=m(M);rs=o(xe,"SPAN",{});var _e=m(rs);ts(B.$$.fragment,_e),_e.forEach(a),xe.forEach(a),$a=h(ua),hs=o(ua,"SPAN",{});var be=m(hs);qa=l(be,"Calculating PPL with fixed-length models"),be.forEach(a),ua.forEach(a),As=h(s),J=o(s,"P",{});var ke=m(J);Ma=l(ke,`If we weren\u2019t limited by a model\u2019s context size, we would evaluate the model\u2019s perplexity by autoregressively
factorizing a sequence and conditioning on the entire preceding subsequence at each step, as shown below.`),ke.forEach(a),Ss=h(s),j=o(s,"IMG",{width:!0,alt:!0,src:!0}),Bs=h(s),f=o(s,"P",{});var I=m(f);ja=l(I,`When working with approximate models, however, we typically have a constraint on the number of tokens the model can
process. The largest version of `),U=o(I,"A",{href:!0});var Pe=m(U);La=l(Pe,"GPT-2"),Pe.forEach(a),Ca=l(I,`, for example, has a fixed length of 1024 tokens, so we
cannot calculate `),Os=z(I),Ds=l(I," directly when "),Hs=z(I),Xs=l(I," is greater than 1024."),I.forEach(a),Fs=h(s),w=o(s,"P",{});var W=m(w);Ga=l(W,`Instead, the sequence is typically broken into subsequences equal to the model\u2019s maximum input size. If a model\u2019s max
input size is `),Ns=z(W),Rs=l(W,", we then approximate the likelihood of a token "),Js=z(W),Us=l(W,` by conditioning only on the
`),Vs=z(W),Ks=l(W,` tokens that precede it rather than the entire context. When evaluating the model\u2019s perplexity of a
sequence, a tempting but suboptimal approach is to break the sequence into disjoint chunks and add up the decomposed
log-likelihoods of each segment independently.`),W.forEach(a),Qs=h(s),L=o(s,"IMG",{width:!0,alt:!0,src:!0}),Ys=h(s),V=o(s,"P",{});var ze=m(V);Ia=l(ze,`This is quick to compute since the perplexity of each segment can be computed in one forward pass, but serves as a poor
approximation of the fully-factorized perplexity and will typically yield a higher (worse) PPL because the model will
have less context at most of the prediction steps.`),ze.forEach(a),Zs=h(s),K=o(s,"P",{});var Te=m(K);Wa=l(Te,`Instead, the PPL of fixed-length models should be evaluated with a sliding-window strategy. This involves repeatedly
sliding the context window so that the model has more context when making each prediction.`),Te.forEach(a),sa=h(s),C=o(s,"IMG",{width:!0,alt:!0,src:!0}),aa=h(s),Q=o(s,"P",{});var Ee=m(Q);Aa=l(Ee,`This is a closer approximation to the true decomposition of the sequence probability and will typically yield a more
favorable score. The downside is that it requires a separate forward pass for each token in the corpus. A good
practical compromise is to employ a strided sliding window, moving the context by larger strides rather than sliding by
1 token a time. This allows computation to proceed much faster while still giving the model a large context to make
predictions at each step.`),Ee.forEach(a),ea=h(s),E=o(s,"H2",{class:!0});var fa=m(E);G=o(fa,"A",{id:!0,class:!0,href:!0});var $e=m(G);cs=o($e,"SPAN",{});var qe=m(cs);ts(O.$$.fragment,qe),qe.forEach(a),$e.forEach(a),Sa=h(fa),ds=o(fa,"SPAN",{});var Me=m(ds);Ba=l(Me,"Example: Calculating perplexity with GPT-2 in \u{1F917} Transformers"),Me.forEach(a),fa.forEach(a),ta=h(s),Y=o(s,"P",{});var je=m(Y);Oa=l(je,"Let\u2019s demonstrate this process with GPT-2."),je.forEach(a),na=h(s),ts(D.$$.fragment,s),la=h(s),Z=o(s,"P",{});var Le=m(Z);Da=l(Le,`We\u2019ll load in the WikiText-2 dataset and evaluate the perplexity using a few different sliding-window strategies. Since
this dataset is small and we\u2019re just doing one forward pass over the set, we can just load and encode the entire
dataset in memory.`),Le.forEach(a),ia=h(s),ts(H.$$.fragment,s),pa=h(s),g=o(s,"P",{});var k=m(g);Ha=l(k,"With \u{1F917} Transformers, we can simply pass the "),gs=o(k,"CODE",{});var Ce=m(gs);Xa=l(Ce,"input_ids"),Ce.forEach(a),Fa=l(k," as the "),us=o(k,"CODE",{});var Ge=m(us);Na=l(Ge,"labels"),Ge.forEach(a),Ra=l(k,` to our model, and the average negative
log-likelihood for each token is returned as the loss. With our sliding window approach, however, there is overlap in
the tokens we pass to the model at each iteration. We don\u2019t want the log-likelihood for the tokens we\u2019re just treating
as context to be included in our loss, so we can set these targets to `),fs=o(k,"CODE",{});var Ie=m(fs);Ja=l(Ie,"-100"),Ie.forEach(a),Ua=l(k,` so that they are ignored. The following
is an example of how we could do this with a stride of `),ws=o(k,"CODE",{});var We=m(ws);Va=l(We,"512"),We.forEach(a),Ka=l(k,`. This means that the model will have at least 512 tokens
for context when calculating the conditional likelihood of any one token (provided there are 512 preceding tokens
available to condition on).`),k.forEach(a),oa=h(s),ts(X.$$.fragment,s),ma=h(s),ss=o(s,"P",{});var Ae=m(ss);Qa=l(Ae,`Running this with the stride length equal to the max input length is equivalent to the suboptimal, non-sliding-window
strategy we discussed above. The smaller the stride, the more context the model will have in making each prediction,
and the better the reported perplexity will typically be.`),Ae.forEach(a),ra=h(s),d=o(s,"P",{});var v=m(d);Ya=l(v,"When we run the above with "),vs=o(v,"CODE",{});var Se=m(vs);Za=l(Se,"stride = 1024"),Se.forEach(a),se=l(v,", i.e. no overlap, the resulting PPL is "),ys=o(v,"CODE",{});var Be=m(ys);ae=l(Be,"19.64"),Be.forEach(a),ee=l(v,`, which is about the same
as the `),xs=o(v,"CODE",{});var Oe=m(xs);te=l(Oe,"19.93"),Oe.forEach(a),ne=l(v," reported in the GPT-2 paper. By using "),_s=o(v,"CODE",{});var De=m(_s);le=l(De,"stride = 512"),De.forEach(a),ie=l(v,` and thereby employing our striding window
strategy, this jumps down to `),bs=o(v,"CODE",{});var He=m(bs);pe=l(He,"16.53"),He.forEach(a),oe=l(v,`. This is not only a more favorable score, but is calculated in a way that is
closer to the true autoregressive decomposition of a sequence likelihood.`),v.forEach(a),this.h()},h(){c(_,"name","hf:doc:metadata"),c(_,"content",JSON.stringify(lt)),c(y,"id","perplexity-of-fixedlength-models"),c(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y,"href","#perplexity-of-fixedlength-models"),c(u,"class","relative group"),c(R,"href","model_summary"),zs.a=Ts,Es.a=$s,qs.a=null,js.a=Ls,Cs.a=Gs,c(S,"href","https://thegradient.pub/understanding-evaluation-metrics-for-language-models/"),c(S,"rel","nofollow"),c(M,"id","calculating-ppl-with-fixedlength-models"),c(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M,"href","#calculating-ppl-with-fixedlength-models"),c(T,"class","relative group"),c(j,"width","600"),c(j,"alt","Full decomposition of a sequence with unlimited context length"),me(j.src,ce="/docs/transformers/master/en/imgs/ppl_full.gif")||c(j,"src",ce),c(U,"href","model_doc/gpt2"),Os.a=Ds,Hs.a=Xs,Ns.a=Rs,Js.a=Us,Vs.a=Ks,c(L,"width","600"),c(L,"alt","Suboptimal PPL not taking advantage of full available context"),me(L.src,de="/docs/transformers/master/en/imgs/ppl_chunked.gif")||c(L,"src",de),c(C,"width","600"),c(C,"alt","Sliding window PPL taking advantage of all available context"),me(C.src,ge="/docs/transformers/master/en/imgs/ppl_sliding.gif")||c(C,"src",ge),c(G,"id","example-calculating-perplexity-with-gpt2-in-transformers"),c(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G,"href","#example-calculating-perplexity-with-gpt2-in-transformers"),c(E,"class","relative group")},m(s,t){e(document.head,_),i(s,N,t),i(s,u,t),e(u,y),e(y,os),ns(A,os,null),e(u,va),e(u,ms),e(ms,ya),i(s,ks,t),i(s,$,t),e($,xa),e($,R),e(R,_a),e($,ba),i(s,Ps,t),i(s,x,t),e(x,ka),zs.m(Xe,x),e(x,Ts),Es.m(Fe,x),e(x,$s),qs.m(Ne,x),i(s,Ms,t),i(s,b,t),e(b,Pa),js.m(Re,b),e(b,Ls),Cs.m(Je,b),e(b,Gs),i(s,Is,t),i(s,q,t),e(q,za),e(q,S),e(S,Ta),e(q,Ea),i(s,Ws,t),i(s,T,t),e(T,M),e(M,rs),ns(B,rs,null),e(T,$a),e(T,hs),e(hs,qa),i(s,As,t),i(s,J,t),e(J,Ma),i(s,Ss,t),i(s,j,t),i(s,Bs,t),i(s,f,t),e(f,ja),e(f,U),e(U,La),e(f,Ca),Os.m(Ue,f),e(f,Ds),Hs.m(Ve,f),e(f,Xs),i(s,Fs,t),i(s,w,t),e(w,Ga),Ns.m(Ke,w),e(w,Rs),Js.m(Qe,w),e(w,Us),Vs.m(Ye,w),e(w,Ks),i(s,Qs,t),i(s,L,t),i(s,Ys,t),i(s,V,t),e(V,Ia),i(s,Zs,t),i(s,K,t),e(K,Wa),i(s,sa,t),i(s,C,t),i(s,aa,t),i(s,Q,t),e(Q,Aa),i(s,ea,t),i(s,E,t),e(E,G),e(G,cs),ns(O,cs,null),e(E,Sa),e(E,ds),e(ds,Ba),i(s,ta,t),i(s,Y,t),e(Y,Oa),i(s,na,t),ns(D,s,t),i(s,la,t),i(s,Z,t),e(Z,Da),i(s,ia,t),ns(H,s,t),i(s,pa,t),i(s,g,t),e(g,Ha),e(g,gs),e(gs,Xa),e(g,Fa),e(g,us),e(us,Na),e(g,Ra),e(g,fs),e(fs,Ja),e(g,Ua),e(g,ws),e(ws,Va),e(g,Ka),i(s,oa,t),ns(X,s,t),i(s,ma,t),i(s,ss,t),e(ss,Qa),i(s,ra,t),i(s,d,t),e(d,Ya),e(d,vs),e(vs,Za),e(d,se),e(d,ys),e(ys,ae),e(d,ee),e(d,xs),e(xs,te),e(d,ne),e(d,_s),e(_s,le),e(d,ie),e(d,bs),e(bs,pe),e(d,oe),ha=!0},p:tt,i(s){ha||(ls(A.$$.fragment,s),ls(B.$$.fragment,s),ls(O.$$.fragment,s),ls(D.$$.fragment,s),ls(H.$$.fragment,s),ls(X.$$.fragment,s),ha=!0)},o(s){is(A.$$.fragment,s),is(B.$$.fragment,s),is(O.$$.fragment,s),is(D.$$.fragment,s),is(H.$$.fragment,s),is(X.$$.fragment,s),ha=!1},d(s){a(_),s&&a(N),s&&a(u),ps(A),s&&a(ks),s&&a($),s&&a(Ps),s&&a(x),s&&a(Ms),s&&a(b),s&&a(Is),s&&a(q),s&&a(Ws),s&&a(T),ps(B),s&&a(As),s&&a(J),s&&a(Ss),s&&a(j),s&&a(Bs),s&&a(f),s&&a(Fs),s&&a(w),s&&a(Qs),s&&a(L),s&&a(Ys),s&&a(V),s&&a(Zs),s&&a(K),s&&a(sa),s&&a(C),s&&a(aa),s&&a(Q),s&&a(ea),s&&a(E),ps(O),s&&a(ta),s&&a(Y),s&&a(na),ps(D,s),s&&a(la),s&&a(Z),s&&a(ia),ps(H,s),s&&a(pa),s&&a(g),s&&a(oa),ps(X,s),s&&a(ma),s&&a(ss),s&&a(ra),s&&a(d)}}}const lt={local:"perplexity-of-fixedlength-models",sections:[{local:"calculating-ppl-with-fixedlength-models",title:"Calculating PPL with fixed-length models"},{local:"example-calculating-perplexity-with-gpt2-in-transformers",title:"Example: Calculating perplexity with GPT-2 in \u{1F917} Transformers"}],title:"Perplexity of fixed-length models"};function it(wa,_,N){let{fw:u}=_;return wa.$$set=y=>{"fw"in y&&N(0,u=y.fw)},[u]}class ht extends Ze{constructor(_){super();st(this,_,it,nt,at,{fw:0})}}export{ht as default,lt as metadata};
