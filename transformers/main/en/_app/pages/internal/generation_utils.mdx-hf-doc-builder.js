import{S as fk,i as gk,s as hk,e as o,k as c,w as f,t as a,M as uk,c as n,d as r,m as l,a as s,x as g,h as i,b as d,G as t,g as p,y as h,q as u,o as _,B as b,v as _k,L as bk}from"../../chunks/vendor-hf-doc-builder.js";import{D as v}from"../../chunks/Docstring-hf-doc-builder.js";import{C as YT}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ie}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as vk}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function $k(bd){let w,He;return w=new YT({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(w.$$.fragment)},l(k){g(w.$$.fragment,k)},m(k,Ae){h(w,k,Ae),He=!0},p:bk,i(k){He||(u(w.$$.fragment,k),He=!0)},o(k){_(w.$$.fragment,k),He=!1},d(k){b(w,k)}}}function Tk(bd){let w,He,k,Ae,cc,sr,Rp,lc,Kp,vd,y,Up,Rn,Yp,Xp,Kn,Jp,Qp,Un,Zp,ef,Yn,tf,rf,Xn,of,nf,Jn,sf,af,Qn,cf,lf,$d,Zn,df,Td,Re,_t,dc,ar,mf,mc,pf,yd,V,ff,es,gf,hf,ts,uf,_f,rs,bf,vf,kd,os,$f,xd,ir,wd,Ce,Tf,pc,yf,kf,ns,xf,wf,Ld,M,ss,fc,Lf,Ef,Pf,as,gc,Ff,Df,Sf,is,hc,zf,Of,qf,cs,uc,Bf,If,Ed,x,Af,_c,Cf,Wf,bc,Nf,Vf,vc,Mf,Gf,$c,jf,Hf,Tc,Rf,Kf,yc,Uf,Yf,Pd,S,Xf,kc,Jf,Qf,xc,Zf,eg,wc,tg,rg,Lc,og,ng,Fd,z,sg,Ec,ag,ig,Pc,cg,lg,Fc,dg,mg,Dc,pg,fg,Dd,cr,Sd,bt,gg,Sc,hg,ug,zd,O,_g,zc,bg,vg,Oc,$g,Tg,qc,yg,kg,Bc,xg,wg,Od,ls,Lg,qd,Ke,vt,Ic,lr,Eg,Ac,Pg,Bd,Ue,dr,Fg,Cc,Dg,Id,Ye,mr,Sg,Wc,zg,Ad,R,pr,Og,Nc,qg,Bg,$t,fr,Ig,Vc,Ag,Cd,Xe,Tt,Mc,gr,Cg,Gc,Wg,Wd,Je,hr,Ng,jc,Vg,Nd,Qe,ur,Mg,Hc,Gg,Vd,K,_r,jg,Rc,Hg,Rg,yt,br,Kg,Kc,Ug,Md,Ze,kt,Uc,vr,Yg,Yc,Xg,Gd,et,$r,Jg,Xc,Qg,jd,tt,Tr,Zg,Jc,eh,Hd,rt,xt,Qc,yr,th,Zc,rh,Rd,ot,kr,oh,el,nh,Kd,nt,xr,sh,tl,ah,Ud,st,wt,rl,wr,ih,ol,ch,Yd,Lt,lh,ds,dh,mh,Xd,U,Lr,ph,nl,fh,gh,Et,Er,hh,sl,uh,Jd,Y,Pr,_h,L,bh,ms,vh,$h,ps,Th,yh,al,kh,xh,il,cl,wh,Lh,fs,Eh,Ph,gs,Fh,Dh,Sh,hs,Fr,Qd,X,Dr,zh,ll,Oh,qh,Pt,Sr,Bh,dl,Ih,Zd,J,zr,Ah,us,_s,Ch,Wh,Nh,bs,Or,em,Q,qr,Vh,vs,$s,Mh,Gh,jh,Ts,Br,tm,Z,Ir,Hh,ys,ks,Rh,Kh,Uh,xs,Ar,rm,ee,Cr,Yh,ws,Ls,Xh,Jh,Qh,Es,Wr,om,te,Nr,Zh,Ps,Fs,eu,tu,ru,Ds,Vr,nm,at,Mr,ou,Ss,Gr,sm,re,jr,nu,Ft,zs,su,au,Hr,iu,cu,lu,Os,Rr,am,oe,Kr,du,qs,Bs,mu,pu,fu,Is,Ur,im,ne,Yr,gu,Dt,As,hu,uu,Xr,_u,bu,vu,Cs,Jr,cm,se,Qr,$u,We,Ws,Tu,yu,Ns,ku,xu,Zr,wu,Lu,Eu,Vs,eo,lm,ae,to,Pu,Ms,Gs,Fu,Du,Su,js,ro,dm,ie,oo,zu,St,Hs,Ou,qu,ml,Bu,Iu,Au,Rs,no,mm,ce,so,Cu,G,Ks,Wu,Nu,pl,Vu,Mu,fl,Gu,ju,gl,Hu,Ru,Ku,Us,ao,pm,le,io,Uu,hl,Yu,Xu,zt,co,Ju,ul,Qu,fm,de,lo,Zu,A,e_,Ys,t_,r_,_l,o_,n_,bl,vl,s_,a_,Xs,i_,c_,l_,Js,mo,gm,me,po,d_,$l,m_,p_,Ot,fo,f_,Tl,g_,hm,pe,go,h_,Qs,Zs,u_,__,b_,ea,ho,um,fe,uo,v_,ta,ra,$_,T_,y_,oa,_o,_m,ge,bo,k_,na,sa,x_,w_,L_,aa,vo,bm,he,$o,E_,ia,ca,P_,F_,D_,la,To,vm,ue,yo,S_,da,ma,z_,O_,q_,pa,ko,$m,_e,xo,B_,qt,fa,I_,A_,wo,C_,W_,N_,ga,Lo,Tm,be,Eo,V_,ha,ua,M_,G_,j_,_a,Po,ym,ve,Fo,H_,ba,va,R_,K_,U_,$a,Do,km,$e,So,Y_,Bt,Ta,X_,J_,yl,Q_,Z_,eb,ya,zo,xm,Te,Oo,tb,kl,rb,ob,It,qo,nb,xl,sb,wm,ye,Bo,ab,E,ib,ka,cb,lb,xa,db,mb,wl,pb,fb,Ll,El,gb,hb,wa,ub,_b,La,bb,vb,$b,Ea,Io,Lm,ke,Ao,Tb,Pl,yb,kb,At,Co,xb,Fl,wb,Em,xe,Wo,Lb,Pa,Fa,Eb,Pb,Fb,Da,No,Pm,we,Vo,Db,Sa,za,Sb,zb,Ob,Oa,Mo,Fm,Le,Go,qb,qa,Ba,Bb,Ib,Ab,Ia,jo,Dm,Ee,Ho,Cb,Aa,Ca,Wb,Nb,Vb,Wa,Ro,Sm,Pe,Ko,Mb,Ct,Na,Gb,jb,Dl,Hb,Rb,Kb,Va,Uo,zm,Fe,Yo,Ub,Ma,Ga,Yb,Xb,Jb,ja,Xo,Om,it,Wt,Sl,Jo,Qb,zl,Zb,qm,Nt,ev,Ha,tv,rv,Bm,De,Qo,ov,Ol,nv,sv,Ra,Zo,Im,ct,en,av,Ka,tn,Am,Se,rn,iv,on,cv,ql,lv,dv,mv,Ua,nn,Cm,ze,sn,pv,an,fv,Bl,gv,hv,uv,Ya,cn,Wm,lt,Vt,Il,ln,_v,Al,bv,Nm,Mt,vv,Xa,$v,Tv,Vm,$,dn,yv,Cl,kv,xv,Wl,wv,Lv,Gt,Ev,Nl,Pv,Fv,jt,mn,Dv,Vl,Sv,zv,Ht,pn,Ov,Ml,qv,Bv,Rt,fn,Iv,Gl,Av,Cv,Kt,gn,Wv,hn,Nv,jl,Vv,Mv,Gv,Ut,un,jv,Hl,Hv,Rv,Yt,_n,Kv,Rl,Uv,Yv,Ne,bn,Xv,vn,Jv,Kl,Qv,Zv,e$,Ul,t$,Mm,dt,$n,r$,Ja,Qa,o$,n$,Gm,mt,Tn,s$,yn,a$,Za,i$,c$,jm,C,kn,l$,Yl,d$,m$,F,xn,p$,Xl,f$,g$,pt,h$,Jl,u$,_$,Ql,b$,v$,$$,Zl,ed,T$,y$,Oe,k$,td,x$,w$,rd,L$,E$,od,P$,F$,D$,nd,S$,z$,Xt,wn,O$,sd,q$,Hm,ft,Jt,ad,Ln,B$,id,I$,Rm,W,En,A$,gt,C$,ei,W$,N$,ti,V$,M$,G$,ri,Pn,j$,oi,Fn,Km,P,Dn,H$,ni,si,R$,K$,U$,Sn,Y$,zn,X$,J$,Q$,ai,Z$,On,eT,tT,ii,qn,rT,ci,Bn,Um,N,In,oT,li,di,nT,sT,aT,mi,An,iT,pi,Cn,Ym,ht,Qt,cd,Wn,cT,ld,lT,Xm,qe,Nn,dT,dd,mT,pT,fi,fT,Vn,gT,Jm,Be,Mn,hT,md,uT,_T,gi,bT,Gn,vT,Qm;return sr=new Ie({}),ar=new Ie({}),ir=new YT({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),cr=new YT({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),lr=new Ie({}),dr=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L69"}}),mr=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L97"}}),pr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L51"}}),fr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),gr=new Ie({}),hr=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L139"}}),ur=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L168"}}),_r=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L65"}}),br=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),vr=new Ie({}),$r=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L211"}}),Tr=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L246"}}),yr=new Ie({}),kr=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L297"}}),xr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L332"}}),wr=new Ie({}),Lr=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L51"}}),Er=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Pr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L73"}}),Fr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Dr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L62"}}),Sr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),zr=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L96"}}),Or=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L117"}}),qr=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L124"}}),Br=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L139"}}),Ir=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L144"}}),Ar=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L160"}}),Cr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L170"}}),Wr=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L193"}}),Nr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L209"}}),Vr=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L230"}}),Mr=new v({props:{name:"class transformers.TypicalLogitsWarper",anchor:"transformers.TypicalLogitsWarper",parameters:[{name:"mass",val:": float = 0.9"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L238"}}),Gr=new v({props:{name:"__call__",anchor:"transformers.TypicalLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L248"}}),jr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L309"}}),Rr=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L324"}}),Kr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L376"}}),Ur=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L418"}}),Yr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L504"}}),Jr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L521"}}),Qr=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L530"}}),eo=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L561"}}),to=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L590"}}),ro=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L602"}}),oo=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L611"}}),no=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L626"}}),so=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L635"}}),ao=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L642"}}),io=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L53"}}),co=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),lo=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L75"}}),mo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),po=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L64"}}),fo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),go=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L98"}}),ho=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L113"}}),uo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L147"}}),_o=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L169"}}),bo=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L118"}}),vo=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L139"}}),$o=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L201"}}),To=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L227"}}),yo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L287"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L364"}}),xo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L385"}}),Lo=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L424"}}),Eo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L237"}}),Po=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L279"}}),Fo=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L446"}}),Do=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L460"}}),So=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L476"}}),zo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L493"}}),Oo=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L50"}}),qo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Bo=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L72"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ao=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L61"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Wo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L95"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L110"}}),Vo=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L115"}}),Mo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L137"}}),Go=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L157"}}),jo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L178"}}),Ho=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L193"}}),Ro=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L205"}}),Ko=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L215"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L230"}}),Yo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L240"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L261"}}),Jo=new Ie({}),Qo=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L33"}}),Zo=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),en=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L110"}}),tn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),rn=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L41"}}),nn=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),sn=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L88"}}),cn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),ln=new Ie({}),dn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L5"}}),Gt=new vk({props:{anchor:"transformers.Constraint.example",$$slots:{default:[$k]},$$scope:{ctx:bd}}}),mn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),pn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),fn=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L60"}}),gn=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L104"}}),un=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L94"}}),_n=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L24"}}),bn=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),$n=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L129"}}),Tn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L261"}}),kn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L350"}}),xn=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L382"}}),wn=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L417"}}),Ln=new Ie({}),En=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L88"}}),Pn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Fn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),Dn=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L120"}}),qn=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L208"}}),Bn=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L302"}}),In=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L390"}}),An=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L486",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Cn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L768"}}),Wn=new Ie({}),Nn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L3370"}}),Mn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_utils.py#L3175"}}),{c(){w=o("meta"),He=c(),k=o("h1"),Ae=o("a"),cc=o("span"),f(sr.$$.fragment),Rp=c(),lc=o("span"),Kp=a("Utilities for Generation"),vd=c(),y=o("p"),Up=a("This page lists all the utility functions used by "),Rn=o("a"),Yp=a("generate()"),Xp=a(`,
`),Kn=o("a"),Jp=a("greedy_search()"),Qp=a(`,
`),Un=o("a"),Zp=a("sample()"),ef=a(`,
`),Yn=o("a"),tf=a("beam_search()"),rf=a(`,
`),Xn=o("a"),of=a("beam_sample()"),nf=a(`,
`),Jn=o("a"),sf=a("group_beam_search()"),af=a(`, and
`),Qn=o("a"),cf=a("constrained_beam_search()"),lf=a("."),$d=c(),Zn=o("p"),df=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Td=c(),Re=o("h2"),_t=o("a"),dc=o("span"),f(ar.$$.fragment),mf=c(),mc=o("span"),pf=a("Generate Outputs"),yd=c(),V=o("p"),ff=a("The output of "),es=o("a"),gf=a("generate()"),hf=a(` is an instance of a subclass of
`),ts=o("a"),uf=a("ModelOutput"),_f=a(`. This output is a data structure containing all the information returned
by `),rs=o("a"),bf=a("generate()"),vf=a(", but that can also be used as tuple or dictionary."),kd=c(),os=o("p"),$f=a("Here\u2019s an example:"),xd=c(),f(ir.$$.fragment),wd=c(),Ce=o("p"),Tf=a("The "),pc=o("code"),yf=a("generation_output"),kf=a(" object is a "),ns=o("a"),xf=a("GreedySearchDecoderOnlyOutput"),wf=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ld=c(),M=o("ul"),ss=o("li"),fc=o("code"),Lf=a("sequences"),Ef=a(": the generated sequences of tokens"),Pf=c(),as=o("li"),gc=o("code"),Ff=a("scores"),Df=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Sf=c(),is=o("li"),hc=o("code"),zf=a("hidden_states"),Of=a(" (optional): the hidden states of the model, for each generation step"),qf=c(),cs=o("li"),uc=o("code"),Bf=a("attentions"),If=a(" (optional): the attention weights of the model, for each generation step"),Ed=c(),x=o("p"),Af=a("Here we have the "),_c=o("code"),Cf=a("scores"),Wf=a(" since we passed along "),bc=o("code"),Nf=a("output_scores=True"),Vf=a(", but we don\u2019t have "),vc=o("code"),Mf=a("hidden_states"),Gf=a(` and
`),$c=o("code"),jf=a("attentions"),Hf=a(" because we didn\u2019t pass "),Tc=o("code"),Rf=a("output_hidden_states=True"),Kf=a(" or "),yc=o("code"),Uf=a("output_attentions=True"),Yf=a("."),Pd=c(),S=o("p"),Xf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),kc=o("code"),Jf=a("None"),Qf=a(". Here for instance "),xc=o("code"),Zf=a("generation_output.scores"),eg=a(` are all the generated prediction scores of the
language modeling head, and `),wc=o("code"),tg=a("generation_output.attentions"),rg=a(" is "),Lc=o("code"),og=a("None"),ng=a("."),Fd=c(),z=o("p"),sg=a("When using our "),Ec=o("code"),ag=a("generation_output"),ig=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),Pc=o("code"),cg=a("None"),lg=a(` values.
Here, for instance, it has two elements, `),Fc=o("code"),dg=a("loss"),mg=a(" then "),Dc=o("code"),pg=a("logits"),fg=a(", so"),Dd=c(),f(cr.$$.fragment),Sd=c(),bt=o("p"),gg=a("will return the tuple "),Sc=o("code"),hg=a("(generation_output.sequences, generation_output.scores)"),ug=a(" for instance."),zd=c(),O=o("p"),_g=a("When using our "),zc=o("code"),bg=a("generation_output"),vg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Oc=o("code"),$g=a("None"),Tg=a(`
values. Here, for instance, it has two keys that are `),qc=o("code"),yg=a("sequences"),kg=a(" and "),Bc=o("code"),xg=a("scores"),wg=a("."),Od=c(),ls=o("p"),Lg=a("We document here all output types."),qd=c(),Ke=o("h3"),vt=o("a"),Ic=o("span"),f(lr.$$.fragment),Eg=c(),Ac=o("span"),Pg=a("GreedySearchOutput"),Bd=c(),Ue=o("div"),f(dr.$$.fragment),Fg=c(),Cc=o("p"),Dg=a("Base class for outputs of decoder-only generation models using greedy search."),Id=c(),Ye=o("div"),f(mr.$$.fragment),Sg=c(),Wc=o("p"),zg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Ad=c(),R=o("div"),f(pr.$$.fragment),Og=c(),Nc=o("p"),qg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Bg=c(),$t=o("div"),f(fr.$$.fragment),Ig=c(),Vc=o("p"),Ag=a("\u201CReturns a new object replacing the specified fields with new values."),Cd=c(),Xe=o("h3"),Tt=o("a"),Mc=o("span"),f(gr.$$.fragment),Cg=c(),Gc=o("span"),Wg=a("SampleOutput"),Wd=c(),Je=o("div"),f(hr.$$.fragment),Ng=c(),jc=o("p"),Vg=a("Base class for outputs of decoder-only generation models using sampling."),Nd=c(),Qe=o("div"),f(ur.$$.fragment),Mg=c(),Hc=o("p"),Gg=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Vd=c(),K=o("div"),f(_r.$$.fragment),jg=c(),Rc=o("p"),Hg=a("Flax Base class for outputs of decoder-only generation models using sampling."),Rg=c(),yt=o("div"),f(br.$$.fragment),Kg=c(),Kc=o("p"),Ug=a("\u201CReturns a new object replacing the specified fields with new values."),Md=c(),Ze=o("h3"),kt=o("a"),Uc=o("span"),f(vr.$$.fragment),Yg=c(),Yc=o("span"),Xg=a("BeamSearchOutput"),Gd=c(),et=o("div"),f($r.$$.fragment),Jg=c(),Xc=o("p"),Qg=a("Base class for outputs of decoder-only generation models using beam search."),jd=c(),tt=o("div"),f(Tr.$$.fragment),Zg=c(),Jc=o("p"),eh=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Hd=c(),rt=o("h3"),xt=o("a"),Qc=o("span"),f(yr.$$.fragment),th=c(),Zc=o("span"),rh=a("BeamSampleOutput"),Rd=c(),ot=o("div"),f(kr.$$.fragment),oh=c(),el=o("p"),nh=a("Base class for outputs of decoder-only generation models using beam sample."),Kd=c(),nt=o("div"),f(xr.$$.fragment),sh=c(),tl=o("p"),ah=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Ud=c(),st=o("h2"),wt=o("a"),rl=o("span"),f(wr.$$.fragment),ih=c(),ol=o("span"),ch=a("LogitsProcessor"),Yd=c(),Lt=o("p"),lh=a("A "),ds=o("a"),dh=a("LogitsProcessor"),mh=a(` can be used to modify the prediction scores of a language model head for
generation.`),Xd=c(),U=o("div"),f(Lr.$$.fragment),ph=c(),nl=o("p"),fh=a("Abstract base class for all logit processors that can be applied during generation."),gh=c(),Et=o("div"),f(Er.$$.fragment),hh=c(),sl=o("p"),uh=a("Torch method for processing logits."),Jd=c(),Y=o("div"),f(Pr.$$.fragment),_h=c(),L=o("p"),bh=a("This class can be used to create a list of "),ms=o("a"),vh=a("LogitsProcessor"),$h=a(" or "),ps=o("a"),Th=a("LogitsWarper"),yh=a(` to subsequently process a
`),al=o("code"),kh=a("scores"),xh=a(" input tensor. This class inherits from list and adds a specific "),il=o("em"),cl=o("strong"),wh=a("call"),Lh=a(` method to apply each
`),fs=o("a"),Eh=a("LogitsProcessor"),Ph=a(" or "),gs=o("a"),Fh=a("LogitsWarper"),Dh=a(" to the inputs."),Sh=c(),hs=o("div"),f(Fr.$$.fragment),Qd=c(),X=o("div"),f(Dr.$$.fragment),zh=c(),ll=o("p"),Oh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),qh=c(),Pt=o("div"),f(Sr.$$.fragment),Bh=c(),dl=o("p"),Ih=a("Torch method for warping logits."),Zd=c(),J=o("div"),f(zr.$$.fragment),Ah=c(),us=o("p"),_s=o("a"),Ch=a("LogitsProcessor"),Wh=a(" enforcing a min-length by setting EOS probability to 0."),Nh=c(),bs=o("div"),f(Or.$$.fragment),em=c(),Q=o("div"),f(qr.$$.fragment),Vh=c(),vs=o("p"),$s=o("a"),Mh=a("LogitsWarper"),Gh=a(" for temperature (exponential scaling output probability distribution)."),jh=c(),Ts=o("div"),f(Br.$$.fragment),tm=c(),Z=o("div"),f(Ir.$$.fragment),Hh=c(),ys=o("p"),ks=o("a"),Rh=a("LogitsProcessor"),Kh=a(" enforcing an exponential penalty on repeated sequences."),Uh=c(),xs=o("div"),f(Ar.$$.fragment),rm=c(),ee=o("div"),f(Cr.$$.fragment),Yh=c(),ws=o("p"),Ls=o("a"),Xh=a("LogitsWarper"),Jh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Qh=c(),Es=o("div"),f(Wr.$$.fragment),om=c(),te=o("div"),f(Nr.$$.fragment),Zh=c(),Ps=o("p"),Fs=o("a"),eu=a("LogitsWarper"),tu=a(" that performs top-k, i.e. restricting to the k highest probability elements."),ru=c(),Ds=o("div"),f(Vr.$$.fragment),nm=c(),at=o("div"),f(Mr.$$.fragment),ou=c(),Ss=o("div"),f(Gr.$$.fragment),sm=c(),re=o("div"),f(jr.$$.fragment),nu=c(),Ft=o("p"),zs=o("a"),su=a("LogitsProcessor"),au=a(` that enforces no repetition of n-grams. See
`),Hr=o("a"),iu=a("Fairseq"),cu=a("."),lu=c(),Os=o("div"),f(Rr.$$.fragment),am=c(),oe=o("div"),f(Kr.$$.fragment),du=c(),qs=o("p"),Bs=o("a"),mu=a("LogitsProcessor"),pu=a(" that enforces that specified sequences will never be sampled."),fu=c(),Is=o("div"),f(Ur.$$.fragment),im=c(),ne=o("div"),f(Yr.$$.fragment),gu=c(),Dt=o("p"),As=o("a"),hu=a("LogitsProcessor"),uu=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Xr=o("a"),_u=a("Autoregressive Entity Retrieval"),bu=a(" for more information."),vu=c(),Cs=o("div"),f(Jr.$$.fragment),cm=c(),se=o("div"),f(Qr.$$.fragment),$u=c(),We=o("p"),Ws=o("a"),Tu=a("LogitsProcessor"),yu=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Ns=o("a"),ku=a("PreTrainedModel.group_beam_search()"),xu=a(". See "),Zr=o("a"),wu=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Lu=a(" for more details."),Eu=c(),Vs=o("div"),f(eo.$$.fragment),lm=c(),ae=o("div"),f(to.$$.fragment),Pu=c(),Ms=o("p"),Gs=o("a"),Fu=a("LogitsProcessor"),Du=a(" that enforces the specified token as the first generated token."),Su=c(),js=o("div"),f(ro.$$.fragment),dm=c(),ie=o("div"),f(oo.$$.fragment),zu=c(),St=o("p"),Hs=o("a"),Ou=a("LogitsProcessor"),qu=a(" that enforces the specified token as the last generated token when "),ml=o("code"),Bu=a("max_length"),Iu=a(" is reached."),Au=c(),Rs=o("div"),f(no.$$.fragment),mm=c(),ce=o("div"),f(so.$$.fragment),Cu=c(),G=o("p"),Ks=o("a"),Wu=a("LogitsProcessor"),Nu=a(" that removes all "),pl=o("code"),Vu=a("nan"),Mu=a(" and "),fl=o("code"),Gu=a("inf"),ju=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),gl=o("code"),Hu=a("max_length"),Ru=a(` is
reached.`),Ku=c(),Us=o("div"),f(ao.$$.fragment),pm=c(),le=o("div"),f(io.$$.fragment),Uu=c(),hl=o("p"),Yu=a("Abstract base class for all logit processors that can be applied during generation."),Xu=c(),zt=o("div"),f(co.$$.fragment),Ju=c(),ul=o("p"),Qu=a("TF method for processing logits."),fm=c(),de=o("div"),f(lo.$$.fragment),Zu=c(),A=o("p"),e_=a("This class can be used to create a list of "),Ys=o("a"),t_=a("TFLogitsProcessor"),r_=a(" to subsequently process a "),_l=o("code"),o_=a("scores"),n_=a(` input tensor.
This class inherits from list and adds a specific `),bl=o("em"),vl=o("strong"),s_=a("call"),a_=a(" method to apply each "),Xs=o("a"),i_=a("TFLogitsProcessor"),c_=a(` to the
inputs.`),l_=c(),Js=o("div"),f(mo.$$.fragment),gm=c(),me=o("div"),f(po.$$.fragment),d_=c(),$l=o("p"),m_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),p_=c(),Ot=o("div"),f(fo.$$.fragment),f_=c(),Tl=o("p"),g_=a("TF method for warping logits."),hm=c(),pe=o("div"),f(go.$$.fragment),h_=c(),Qs=o("p"),Zs=o("a"),u_=a("TFLogitsWarper"),__=a(" for temperature (exponential scaling output probability distribution)."),b_=c(),ea=o("div"),f(ho.$$.fragment),um=c(),fe=o("div"),f(uo.$$.fragment),v_=c(),ta=o("p"),ra=o("a"),$_=a("TFLogitsWarper"),T_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),y_=c(),oa=o("div"),f(_o.$$.fragment),_m=c(),ge=o("div"),f(bo.$$.fragment),k_=c(),na=o("p"),sa=o("a"),x_=a("TFLogitsWarper"),w_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),L_=c(),aa=o("div"),f(vo.$$.fragment),bm=c(),he=o("div"),f($o.$$.fragment),E_=c(),ia=o("p"),ca=o("a"),P_=a("TFLogitsProcessor"),F_=a(" enforcing a min-length by setting EOS probability to 0."),D_=c(),la=o("div"),f(To.$$.fragment),vm=c(),ue=o("div"),f(yo.$$.fragment),S_=c(),da=o("p"),ma=o("a"),z_=a("TFLogitsProcessor"),O_=a(" that enforces that specified sequences will never be sampled."),q_=c(),pa=o("div"),f(ko.$$.fragment),$m=c(),_e=o("div"),f(xo.$$.fragment),B_=c(),qt=o("p"),fa=o("a"),I_=a("TFLogitsProcessor"),A_=a(` that enforces no repetition of n-grams. See
`),wo=o("a"),C_=a("Fairseq"),W_=a("."),N_=c(),ga=o("div"),f(Lo.$$.fragment),Tm=c(),be=o("div"),f(Eo.$$.fragment),V_=c(),ha=o("p"),ua=o("a"),M_=a("TFLogitsProcessor"),G_=a(" enforcing an exponential penalty on repeated sequences."),j_=c(),_a=o("div"),f(Po.$$.fragment),ym=c(),ve=o("div"),f(Fo.$$.fragment),H_=c(),ba=o("p"),va=o("a"),R_=a("TFLogitsProcessor"),K_=a(" that enforces the specified token as the first generated token."),U_=c(),$a=o("div"),f(Do.$$.fragment),km=c(),$e=o("div"),f(So.$$.fragment),Y_=c(),Bt=o("p"),Ta=o("a"),X_=a("TFLogitsProcessor"),J_=a(" that enforces the specified token as the last generated token when "),yl=o("code"),Q_=a("max_length"),Z_=a(" is reached."),eb=c(),ya=o("div"),f(zo.$$.fragment),xm=c(),Te=o("div"),f(Oo.$$.fragment),tb=c(),kl=o("p"),rb=a("Abstract base class for all logit processors that can be applied during generation."),ob=c(),It=o("div"),f(qo.$$.fragment),nb=c(),xl=o("p"),sb=a("Flax method for processing logits."),wm=c(),ye=o("div"),f(Bo.$$.fragment),ab=c(),E=o("p"),ib=a("This class can be used to create a list of "),ka=o("a"),cb=a("FlaxLogitsProcessor"),lb=a(" or "),xa=o("a"),db=a("FlaxLogitsWarper"),mb=a(` to subsequently process
a `),wl=o("code"),pb=a("scores"),fb=a(" input tensor. This class inherits from list and adds a specific "),Ll=o("em"),El=o("strong"),gb=a("call"),hb=a(` method to apply each
`),wa=o("a"),ub=a("FlaxLogitsProcessor"),_b=a(" or "),La=o("a"),bb=a("FlaxLogitsWarper"),vb=a(" to the inputs."),$b=c(),Ea=o("div"),f(Io.$$.fragment),Lm=c(),ke=o("div"),f(Ao.$$.fragment),Tb=c(),Pl=o("p"),yb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),kb=c(),At=o("div"),f(Co.$$.fragment),xb=c(),Fl=o("p"),wb=a("Flax method for warping logits."),Em=c(),xe=o("div"),f(Wo.$$.fragment),Lb=c(),Pa=o("p"),Fa=o("a"),Eb=a("FlaxLogitsWarper"),Pb=a(" for temperature (exponential scaling output probability distribution)."),Fb=c(),Da=o("div"),f(No.$$.fragment),Pm=c(),we=o("div"),f(Vo.$$.fragment),Db=c(),Sa=o("p"),za=o("a"),Sb=a("FlaxLogitsWarper"),zb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Ob=c(),Oa=o("div"),f(Mo.$$.fragment),Fm=c(),Le=o("div"),f(Go.$$.fragment),qb=c(),qa=o("p"),Ba=o("a"),Bb=a("FlaxLogitsWarper"),Ib=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Ab=c(),Ia=o("div"),f(jo.$$.fragment),Dm=c(),Ee=o("div"),f(Ho.$$.fragment),Cb=c(),Aa=o("p"),Ca=o("a"),Wb=a("FlaxLogitsProcessor"),Nb=a(" that enforces the specified token as the first generated token."),Vb=c(),Wa=o("div"),f(Ro.$$.fragment),Sm=c(),Pe=o("div"),f(Ko.$$.fragment),Mb=c(),Ct=o("p"),Na=o("a"),Gb=a("FlaxLogitsProcessor"),jb=a(" that enforces the specified token as the last generated token when "),Dl=o("code"),Hb=a("max_length"),Rb=a(" is reached."),Kb=c(),Va=o("div"),f(Uo.$$.fragment),zm=c(),Fe=o("div"),f(Yo.$$.fragment),Ub=c(),Ma=o("p"),Ga=o("a"),Yb=a("FlaxLogitsProcessor"),Xb=a(" enforcing a min-length by setting EOS probability to 0."),Jb=c(),ja=o("div"),f(Xo.$$.fragment),Om=c(),it=o("h2"),Wt=o("a"),Sl=o("span"),f(Jo.$$.fragment),Qb=c(),zl=o("span"),Zb=a("StoppingCriteria"),qm=c(),Nt=o("p"),ev=a("A "),Ha=o("a"),tv=a("StoppingCriteria"),rv=a(" can be used to change when to stop generation (other than EOS token)."),Bm=c(),De=o("div"),f(Qo.$$.fragment),ov=c(),Ol=o("p"),nv=a("Abstract base class for all stopping criteria that can be applied during generation."),sv=c(),Ra=o("div"),f(Zo.$$.fragment),Im=c(),ct=o("div"),f(en.$$.fragment),av=c(),Ka=o("div"),f(tn.$$.fragment),Am=c(),Se=o("div"),f(rn.$$.fragment),iv=c(),on=o("p"),cv=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),ql=o("code"),lv=a("max_length"),dv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),mv=c(),Ua=o("div"),f(nn.$$.fragment),Cm=c(),ze=o("div"),f(sn.$$.fragment),pv=c(),an=o("p"),fv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Bl=o("code"),gv=a("initial_time"),hv=a("."),uv=c(),Ya=o("div"),f(cn.$$.fragment),Wm=c(),lt=o("h2"),Vt=o("a"),Il=o("span"),f(ln.$$.fragment),_v=c(),Al=o("span"),bv=a("Constraints"),Nm=c(),Mt=o("p"),vv=a("A "),Xa=o("a"),$v=a("Constraint"),Tv=a(" can be used to force the generation to include specific tokens or sequences in the output."),Vm=c(),$=o("div"),f(dn.$$.fragment),yv=c(),Cl=o("p"),kv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),xv=c(),Wl=o("p"),wv=a("All classes that inherit Constraint must follow the requirement that"),Lv=c(),f(Gt.$$.fragment),Ev=c(),Nl=o("p"),Pv=a("will always terminate (halt)."),Fv=c(),jt=o("div"),f(mn.$$.fragment),Dv=c(),Vl=o("p"),Sv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),zv=c(),Ht=o("div"),f(pn.$$.fragment),Ov=c(),Ml=o("p"),qv=a("Creates a new instance of this constraint."),Bv=c(),Rt=o("div"),f(fn.$$.fragment),Iv=c(),Gl=o("p"),Av=a("Reads in a token and returns whether it creates progress."),Cv=c(),Kt=o("div"),f(gn.$$.fragment),Wv=c(),hn=o("p"),Nv=a("Returns the number of remaining steps of "),jl=o("code"),Vv=a("advance()"),Mv=a(" in order to complete this constraint."),Gv=c(),Ut=o("div"),f(un.$$.fragment),jv=c(),Hl=o("p"),Hv=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Rv=c(),Yt=o("div"),f(_n.$$.fragment),Kv=c(),Rl=o("p"),Uv=a("Tests whether this constraint has been properly defined."),Yv=c(),Ne=o("div"),f(bn.$$.fragment),Xv=c(),vn=o("p"),Jv=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Kl=o("code"),Qv=a("does_advance(self, token_id: int)"),Zv=a("."),e$=c(),Ul=o("p"),t$=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Mm=c(),dt=o("div"),f($n.$$.fragment),r$=c(),Ja=o("p"),Qa=o("a"),o$=a("Constraint"),n$=a(" enforcing that an ordered sequence of tokens is included in the output."),Gm=c(),mt=o("div"),f(Tn.$$.fragment),s$=c(),yn=o("p"),a$=a("A special "),Za=o("a"),i$=a("Constraint"),c$=a(" that is fulfilled by fulfilling just one of several constraints."),jm=c(),C=o("div"),f(kn.$$.fragment),l$=c(),Yl=o("p"),d$=a("A class for beam scorers to track its progress through a list of constraints."),m$=c(),F=o("div"),f(xn.$$.fragment),p$=c(),Xl=o("p"),f$=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),g$=c(),pt=o("p"),h$=a("Given constraints "),Jl=o("code"),u$=a("c_i = {t_ij | j == # of tokens}"),_$=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ql=o("code"),b$=a("c_i"),v$=a(", we return:"),$$=c(),Zl=o("p"),ed=o("code"),T$=a("[t_k1 for k in indices of unfulfilled constraints]"),y$=c(),Oe=o("p"),k$=a(`If we are in the middle of a constraint, then we return:
`),td=o("code"),x$=a("[t_ij]"),w$=a(", where "),rd=o("code"),L$=a("i"),E$=a(" is the index of the inprogress constraint, "),od=o("code"),P$=a("j"),F$=a(" is the next step for the constraint."),D$=c(),nd=o("p"),S$=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),z$=c(),Xt=o("div"),f(wn.$$.fragment),O$=c(),sd=o("p"),q$=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Hm=c(),ft=o("h2"),Jt=o("a"),ad=o("span"),f(Ln.$$.fragment),B$=c(),id=o("span"),I$=a("BeamSearch"),Rm=c(),W=o("div"),f(En.$$.fragment),A$=c(),gt=o("p"),C$=a("Abstract base class for all beam scorers that are used for "),ei=o("a"),W$=a("beam_search()"),N$=a(` and
`),ti=o("a"),V$=a("beam_sample()"),M$=a("."),G$=c(),ri=o("div"),f(Pn.$$.fragment),j$=c(),oi=o("div"),f(Fn.$$.fragment),Km=c(),P=o("div"),f(Dn.$$.fragment),H$=c(),ni=o("p"),si=o("a"),R$=a("BeamScorer"),K$=a(" implementing standard beam search decoding."),U$=c(),Sn=o("p"),Y$=a("Adapted in part from "),zn=o("a"),X$=a(`Facebook\u2019s XLM beam search
code`),J$=a("."),Q$=c(),ai=o("p"),Z$=a("Reference for the diverse beam search algorithm and implementation "),On=o("a"),eT=a(`Ashwin Kalyan\u2019s DBS
implementation`),tT=c(),ii=o("div"),f(qn.$$.fragment),rT=c(),ci=o("div"),f(Bn.$$.fragment),Um=c(),N=o("div"),f(In.$$.fragment),oT=c(),li=o("p"),di=o("a"),nT=a("BeamScorer"),sT=a(" implementing constrained beam search decoding."),aT=c(),mi=o("div"),f(An.$$.fragment),iT=c(),pi=o("div"),f(Cn.$$.fragment),Ym=c(),ht=o("h2"),Qt=o("a"),cd=o("span"),f(Wn.$$.fragment),cT=c(),ld=o("span"),lT=a("Utilities"),Xm=c(),qe=o("div"),f(Nn.$$.fragment),dT=c(),dd=o("p"),mT=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),pT=c(),fi=o("p"),fT=a("From: "),Vn=o("a"),gT=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Jm=c(),Be=o("div"),f(Mn.$$.fragment),hT=c(),md=o("p"),uT=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),_T=c(),gi=o("p"),bT=a("From: "),Gn=o("a"),vT=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const m=uk('[data-svelte="svelte-1phssyn"]',document.head);w=n(m,"META",{name:!0,content:!0}),m.forEach(r),He=l(e),k=n(e,"H1",{class:!0});var jn=s(k);Ae=n(jn,"A",{id:!0,class:!0,href:!0});var XT=s(Ae);cc=n(XT,"SPAN",{});var JT=s(cc);g(sr.$$.fragment,JT),JT.forEach(r),XT.forEach(r),Rp=l(jn),lc=n(jn,"SPAN",{});var QT=s(lc);Kp=i(QT,"Utilities for Generation"),QT.forEach(r),jn.forEach(r),vd=l(e),y=n(e,"P",{});var D=s(y);Up=i(D,"This page lists all the utility functions used by "),Rn=n(D,"A",{href:!0});var ZT=s(Rn);Yp=i(ZT,"generate()"),ZT.forEach(r),Xp=i(D,`,
`),Kn=n(D,"A",{href:!0});var e1=s(Kn);Jp=i(e1,"greedy_search()"),e1.forEach(r),Qp=i(D,`,
`),Un=n(D,"A",{href:!0});var t1=s(Un);Zp=i(t1,"sample()"),t1.forEach(r),ef=i(D,`,
`),Yn=n(D,"A",{href:!0});var r1=s(Yn);tf=i(r1,"beam_search()"),r1.forEach(r),rf=i(D,`,
`),Xn=n(D,"A",{href:!0});var o1=s(Xn);of=i(o1,"beam_sample()"),o1.forEach(r),nf=i(D,`,
`),Jn=n(D,"A",{href:!0});var n1=s(Jn);sf=i(n1,"group_beam_search()"),n1.forEach(r),af=i(D,`, and
`),Qn=n(D,"A",{href:!0});var s1=s(Qn);cf=i(s1,"constrained_beam_search()"),s1.forEach(r),lf=i(D,"."),D.forEach(r),$d=l(e),Zn=n(e,"P",{});var a1=s(Zn);df=i(a1,"Most of those are only useful if you are studying the code of the generate methods in the library."),a1.forEach(r),Td=l(e),Re=n(e,"H2",{class:!0});var Zm=s(Re);_t=n(Zm,"A",{id:!0,class:!0,href:!0});var i1=s(_t);dc=n(i1,"SPAN",{});var c1=s(dc);g(ar.$$.fragment,c1),c1.forEach(r),i1.forEach(r),mf=l(Zm),mc=n(Zm,"SPAN",{});var l1=s(mc);pf=i(l1,"Generate Outputs"),l1.forEach(r),Zm.forEach(r),yd=l(e),V=n(e,"P",{});var Zt=s(V);ff=i(Zt,"The output of "),es=n(Zt,"A",{href:!0});var d1=s(es);gf=i(d1,"generate()"),d1.forEach(r),hf=i(Zt,` is an instance of a subclass of
`),ts=n(Zt,"A",{href:!0});var m1=s(ts);uf=i(m1,"ModelOutput"),m1.forEach(r),_f=i(Zt,`. This output is a data structure containing all the information returned
by `),rs=n(Zt,"A",{href:!0});var p1=s(rs);bf=i(p1,"generate()"),p1.forEach(r),vf=i(Zt,", but that can also be used as tuple or dictionary."),Zt.forEach(r),kd=l(e),os=n(e,"P",{});var f1=s(os);$f=i(f1,"Here\u2019s an example:"),f1.forEach(r),xd=l(e),g(ir.$$.fragment,e),wd=l(e),Ce=n(e,"P",{});var hi=s(Ce);Tf=i(hi,"The "),pc=n(hi,"CODE",{});var g1=s(pc);yf=i(g1,"generation_output"),g1.forEach(r),kf=i(hi," object is a "),ns=n(hi,"A",{href:!0});var h1=s(ns);xf=i(h1,"GreedySearchDecoderOnlyOutput"),h1.forEach(r),wf=i(hi,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),hi.forEach(r),Ld=l(e),M=n(e,"UL",{});var er=s(M);ss=n(er,"LI",{});var $T=s(ss);fc=n($T,"CODE",{});var u1=s(fc);Lf=i(u1,"sequences"),u1.forEach(r),Ef=i($T,": the generated sequences of tokens"),$T.forEach(r),Pf=l(er),as=n(er,"LI",{});var TT=s(as);gc=n(TT,"CODE",{});var _1=s(gc);Ff=i(_1,"scores"),_1.forEach(r),Df=i(TT," (optional): the prediction scores of the language modelling head, for each generation step"),TT.forEach(r),Sf=l(er),is=n(er,"LI",{});var yT=s(is);hc=n(yT,"CODE",{});var b1=s(hc);zf=i(b1,"hidden_states"),b1.forEach(r),Of=i(yT," (optional): the hidden states of the model, for each generation step"),yT.forEach(r),qf=l(er),cs=n(er,"LI",{});var kT=s(cs);uc=n(kT,"CODE",{});var v1=s(uc);Bf=i(v1,"attentions"),v1.forEach(r),If=i(kT," (optional): the attention weights of the model, for each generation step"),kT.forEach(r),er.forEach(r),Ed=l(e),x=n(e,"P",{});var q=s(x);Af=i(q,"Here we have the "),_c=n(q,"CODE",{});var $1=s(_c);Cf=i($1,"scores"),$1.forEach(r),Wf=i(q," since we passed along "),bc=n(q,"CODE",{});var T1=s(bc);Nf=i(T1,"output_scores=True"),T1.forEach(r),Vf=i(q,", but we don\u2019t have "),vc=n(q,"CODE",{});var y1=s(vc);Mf=i(y1,"hidden_states"),y1.forEach(r),Gf=i(q,` and
`),$c=n(q,"CODE",{});var k1=s($c);jf=i(k1,"attentions"),k1.forEach(r),Hf=i(q," because we didn\u2019t pass "),Tc=n(q,"CODE",{});var x1=s(Tc);Rf=i(x1,"output_hidden_states=True"),x1.forEach(r),Kf=i(q," or "),yc=n(q,"CODE",{});var w1=s(yc);Uf=i(w1,"output_attentions=True"),w1.forEach(r),Yf=i(q,"."),q.forEach(r),Pd=l(e),S=n(e,"P",{});var Ve=s(S);Xf=i(Ve,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),kc=n(Ve,"CODE",{});var L1=s(kc);Jf=i(L1,"None"),L1.forEach(r),Qf=i(Ve,". Here for instance "),xc=n(Ve,"CODE",{});var E1=s(xc);Zf=i(E1,"generation_output.scores"),E1.forEach(r),eg=i(Ve,` are all the generated prediction scores of the
language modeling head, and `),wc=n(Ve,"CODE",{});var P1=s(wc);tg=i(P1,"generation_output.attentions"),P1.forEach(r),rg=i(Ve," is "),Lc=n(Ve,"CODE",{});var F1=s(Lc);og=i(F1,"None"),F1.forEach(r),ng=i(Ve,"."),Ve.forEach(r),Fd=l(e),z=n(e,"P",{});var Me=s(z);sg=i(Me,"When using our "),Ec=n(Me,"CODE",{});var D1=s(Ec);ag=i(D1,"generation_output"),D1.forEach(r),ig=i(Me," object as a tuple, it only keeps the attributes that don\u2019t have "),Pc=n(Me,"CODE",{});var S1=s(Pc);cg=i(S1,"None"),S1.forEach(r),lg=i(Me,` values.
Here, for instance, it has two elements, `),Fc=n(Me,"CODE",{});var z1=s(Fc);dg=i(z1,"loss"),z1.forEach(r),mg=i(Me," then "),Dc=n(Me,"CODE",{});var O1=s(Dc);pg=i(O1,"logits"),O1.forEach(r),fg=i(Me,", so"),Me.forEach(r),Dd=l(e),g(cr.$$.fragment,e),Sd=l(e),bt=n(e,"P",{});var ep=s(bt);gg=i(ep,"will return the tuple "),Sc=n(ep,"CODE",{});var q1=s(Sc);hg=i(q1,"(generation_output.sequences, generation_output.scores)"),q1.forEach(r),ug=i(ep," for instance."),ep.forEach(r),zd=l(e),O=n(e,"P",{});var Ge=s(O);_g=i(Ge,"When using our "),zc=n(Ge,"CODE",{});var B1=s(zc);bg=i(B1,"generation_output"),B1.forEach(r),vg=i(Ge," object as a dictionary, it only keeps the attributes that don\u2019t have "),Oc=n(Ge,"CODE",{});var I1=s(Oc);$g=i(I1,"None"),I1.forEach(r),Tg=i(Ge,`
values. Here, for instance, it has two keys that are `),qc=n(Ge,"CODE",{});var A1=s(qc);yg=i(A1,"sequences"),A1.forEach(r),kg=i(Ge," and "),Bc=n(Ge,"CODE",{});var C1=s(Bc);xg=i(C1,"scores"),C1.forEach(r),wg=i(Ge,"."),Ge.forEach(r),Od=l(e),ls=n(e,"P",{});var W1=s(ls);Lg=i(W1,"We document here all output types."),W1.forEach(r),qd=l(e),Ke=n(e,"H3",{class:!0});var tp=s(Ke);vt=n(tp,"A",{id:!0,class:!0,href:!0});var N1=s(vt);Ic=n(N1,"SPAN",{});var V1=s(Ic);g(lr.$$.fragment,V1),V1.forEach(r),N1.forEach(r),Eg=l(tp),Ac=n(tp,"SPAN",{});var M1=s(Ac);Pg=i(M1,"GreedySearchOutput"),M1.forEach(r),tp.forEach(r),Bd=l(e),Ue=n(e,"DIV",{class:!0});var rp=s(Ue);g(dr.$$.fragment,rp),Fg=l(rp),Cc=n(rp,"P",{});var G1=s(Cc);Dg=i(G1,"Base class for outputs of decoder-only generation models using greedy search."),G1.forEach(r),rp.forEach(r),Id=l(e),Ye=n(e,"DIV",{class:!0});var op=s(Ye);g(mr.$$.fragment,op),Sg=l(op),Wc=n(op,"P",{});var j1=s(Wc);zg=i(j1,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),j1.forEach(r),op.forEach(r),Ad=l(e),R=n(e,"DIV",{class:!0});var ui=s(R);g(pr.$$.fragment,ui),Og=l(ui),Nc=n(ui,"P",{});var H1=s(Nc);qg=i(H1,"Flax Base class for outputs of decoder-only generation models using greedy search."),H1.forEach(r),Bg=l(ui),$t=n(ui,"DIV",{class:!0});var np=s($t);g(fr.$$.fragment,np),Ig=l(np),Vc=n(np,"P",{});var R1=s(Vc);Ag=i(R1,"\u201CReturns a new object replacing the specified fields with new values."),R1.forEach(r),np.forEach(r),ui.forEach(r),Cd=l(e),Xe=n(e,"H3",{class:!0});var sp=s(Xe);Tt=n(sp,"A",{id:!0,class:!0,href:!0});var K1=s(Tt);Mc=n(K1,"SPAN",{});var U1=s(Mc);g(gr.$$.fragment,U1),U1.forEach(r),K1.forEach(r),Cg=l(sp),Gc=n(sp,"SPAN",{});var Y1=s(Gc);Wg=i(Y1,"SampleOutput"),Y1.forEach(r),sp.forEach(r),Wd=l(e),Je=n(e,"DIV",{class:!0});var ap=s(Je);g(hr.$$.fragment,ap),Ng=l(ap),jc=n(ap,"P",{});var X1=s(jc);Vg=i(X1,"Base class for outputs of decoder-only generation models using sampling."),X1.forEach(r),ap.forEach(r),Nd=l(e),Qe=n(e,"DIV",{class:!0});var ip=s(Qe);g(ur.$$.fragment,ip),Mg=l(ip),Hc=n(ip,"P",{});var J1=s(Hc);Gg=i(J1,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),J1.forEach(r),ip.forEach(r),Vd=l(e),K=n(e,"DIV",{class:!0});var _i=s(K);g(_r.$$.fragment,_i),jg=l(_i),Rc=n(_i,"P",{});var Q1=s(Rc);Hg=i(Q1,"Flax Base class for outputs of decoder-only generation models using sampling."),Q1.forEach(r),Rg=l(_i),yt=n(_i,"DIV",{class:!0});var cp=s(yt);g(br.$$.fragment,cp),Kg=l(cp),Kc=n(cp,"P",{});var Z1=s(Kc);Ug=i(Z1,"\u201CReturns a new object replacing the specified fields with new values."),Z1.forEach(r),cp.forEach(r),_i.forEach(r),Md=l(e),Ze=n(e,"H3",{class:!0});var lp=s(Ze);kt=n(lp,"A",{id:!0,class:!0,href:!0});var e2=s(kt);Uc=n(e2,"SPAN",{});var t2=s(Uc);g(vr.$$.fragment,t2),t2.forEach(r),e2.forEach(r),Yg=l(lp),Yc=n(lp,"SPAN",{});var r2=s(Yc);Xg=i(r2,"BeamSearchOutput"),r2.forEach(r),lp.forEach(r),Gd=l(e),et=n(e,"DIV",{class:!0});var dp=s(et);g($r.$$.fragment,dp),Jg=l(dp),Xc=n(dp,"P",{});var o2=s(Xc);Qg=i(o2,"Base class for outputs of decoder-only generation models using beam search."),o2.forEach(r),dp.forEach(r),jd=l(e),tt=n(e,"DIV",{class:!0});var mp=s(tt);g(Tr.$$.fragment,mp),Zg=l(mp),Jc=n(mp,"P",{});var n2=s(Jc);eh=i(n2,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),n2.forEach(r),mp.forEach(r),Hd=l(e),rt=n(e,"H3",{class:!0});var pp=s(rt);xt=n(pp,"A",{id:!0,class:!0,href:!0});var s2=s(xt);Qc=n(s2,"SPAN",{});var a2=s(Qc);g(yr.$$.fragment,a2),a2.forEach(r),s2.forEach(r),th=l(pp),Zc=n(pp,"SPAN",{});var i2=s(Zc);rh=i(i2,"BeamSampleOutput"),i2.forEach(r),pp.forEach(r),Rd=l(e),ot=n(e,"DIV",{class:!0});var fp=s(ot);g(kr.$$.fragment,fp),oh=l(fp),el=n(fp,"P",{});var c2=s(el);nh=i(c2,"Base class for outputs of decoder-only generation models using beam sample."),c2.forEach(r),fp.forEach(r),Kd=l(e),nt=n(e,"DIV",{class:!0});var gp=s(nt);g(xr.$$.fragment,gp),sh=l(gp),tl=n(gp,"P",{});var l2=s(tl);ah=i(l2,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),l2.forEach(r),gp.forEach(r),Ud=l(e),st=n(e,"H2",{class:!0});var hp=s(st);wt=n(hp,"A",{id:!0,class:!0,href:!0});var d2=s(wt);rl=n(d2,"SPAN",{});var m2=s(rl);g(wr.$$.fragment,m2),m2.forEach(r),d2.forEach(r),ih=l(hp),ol=n(hp,"SPAN",{});var p2=s(ol);ch=i(p2,"LogitsProcessor"),p2.forEach(r),hp.forEach(r),Yd=l(e),Lt=n(e,"P",{});var up=s(Lt);lh=i(up,"A "),ds=n(up,"A",{href:!0});var f2=s(ds);dh=i(f2,"LogitsProcessor"),f2.forEach(r),mh=i(up,` can be used to modify the prediction scores of a language model head for
generation.`),up.forEach(r),Xd=l(e),U=n(e,"DIV",{class:!0});var bi=s(U);g(Lr.$$.fragment,bi),ph=l(bi),nl=n(bi,"P",{});var g2=s(nl);fh=i(g2,"Abstract base class for all logit processors that can be applied during generation."),g2.forEach(r),gh=l(bi),Et=n(bi,"DIV",{class:!0});var _p=s(Et);g(Er.$$.fragment,_p),hh=l(_p),sl=n(_p,"P",{});var h2=s(sl);uh=i(h2,"Torch method for processing logits."),h2.forEach(r),_p.forEach(r),bi.forEach(r),Jd=l(e),Y=n(e,"DIV",{class:!0});var vi=s(Y);g(Pr.$$.fragment,vi),_h=l(vi),L=n(vi,"P",{});var B=s(L);bh=i(B,"This class can be used to create a list of "),ms=n(B,"A",{href:!0});var u2=s(ms);vh=i(u2,"LogitsProcessor"),u2.forEach(r),$h=i(B," or "),ps=n(B,"A",{href:!0});var _2=s(ps);Th=i(_2,"LogitsWarper"),_2.forEach(r),yh=i(B,` to subsequently process a
`),al=n(B,"CODE",{});var b2=s(al);kh=i(b2,"scores"),b2.forEach(r),xh=i(B," input tensor. This class inherits from list and adds a specific "),il=n(B,"EM",{});var v2=s(il);cl=n(v2,"STRONG",{});var $2=s(cl);wh=i($2,"call"),$2.forEach(r),v2.forEach(r),Lh=i(B,` method to apply each
`),fs=n(B,"A",{href:!0});var T2=s(fs);Eh=i(T2,"LogitsProcessor"),T2.forEach(r),Ph=i(B," or "),gs=n(B,"A",{href:!0});var y2=s(gs);Fh=i(y2,"LogitsWarper"),y2.forEach(r),Dh=i(B," to the inputs."),B.forEach(r),Sh=l(vi),hs=n(vi,"DIV",{class:!0});var k2=s(hs);g(Fr.$$.fragment,k2),k2.forEach(r),vi.forEach(r),Qd=l(e),X=n(e,"DIV",{class:!0});var $i=s(X);g(Dr.$$.fragment,$i),zh=l($i),ll=n($i,"P",{});var x2=s(ll);Oh=i(x2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),x2.forEach(r),qh=l($i),Pt=n($i,"DIV",{class:!0});var bp=s(Pt);g(Sr.$$.fragment,bp),Bh=l(bp),dl=n(bp,"P",{});var w2=s(dl);Ih=i(w2,"Torch method for warping logits."),w2.forEach(r),bp.forEach(r),$i.forEach(r),Zd=l(e),J=n(e,"DIV",{class:!0});var Ti=s(J);g(zr.$$.fragment,Ti),Ah=l(Ti),us=n(Ti,"P",{});var xT=s(us);_s=n(xT,"A",{href:!0});var L2=s(_s);Ch=i(L2,"LogitsProcessor"),L2.forEach(r),Wh=i(xT," enforcing a min-length by setting EOS probability to 0."),xT.forEach(r),Nh=l(Ti),bs=n(Ti,"DIV",{class:!0});var E2=s(bs);g(Or.$$.fragment,E2),E2.forEach(r),Ti.forEach(r),em=l(e),Q=n(e,"DIV",{class:!0});var yi=s(Q);g(qr.$$.fragment,yi),Vh=l(yi),vs=n(yi,"P",{});var wT=s(vs);$s=n(wT,"A",{href:!0});var P2=s($s);Mh=i(P2,"LogitsWarper"),P2.forEach(r),Gh=i(wT," for temperature (exponential scaling output probability distribution)."),wT.forEach(r),jh=l(yi),Ts=n(yi,"DIV",{class:!0});var F2=s(Ts);g(Br.$$.fragment,F2),F2.forEach(r),yi.forEach(r),tm=l(e),Z=n(e,"DIV",{class:!0});var ki=s(Z);g(Ir.$$.fragment,ki),Hh=l(ki),ys=n(ki,"P",{});var LT=s(ys);ks=n(LT,"A",{href:!0});var D2=s(ks);Rh=i(D2,"LogitsProcessor"),D2.forEach(r),Kh=i(LT," enforcing an exponential penalty on repeated sequences."),LT.forEach(r),Uh=l(ki),xs=n(ki,"DIV",{class:!0});var S2=s(xs);g(Ar.$$.fragment,S2),S2.forEach(r),ki.forEach(r),rm=l(e),ee=n(e,"DIV",{class:!0});var xi=s(ee);g(Cr.$$.fragment,xi),Yh=l(xi),ws=n(xi,"P",{});var ET=s(ws);Ls=n(ET,"A",{href:!0});var z2=s(Ls);Xh=i(z2,"LogitsWarper"),z2.forEach(r),Jh=i(ET," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),ET.forEach(r),Qh=l(xi),Es=n(xi,"DIV",{class:!0});var O2=s(Es);g(Wr.$$.fragment,O2),O2.forEach(r),xi.forEach(r),om=l(e),te=n(e,"DIV",{class:!0});var wi=s(te);g(Nr.$$.fragment,wi),Zh=l(wi),Ps=n(wi,"P",{});var PT=s(Ps);Fs=n(PT,"A",{href:!0});var q2=s(Fs);eu=i(q2,"LogitsWarper"),q2.forEach(r),tu=i(PT," that performs top-k, i.e. restricting to the k highest probability elements."),PT.forEach(r),ru=l(wi),Ds=n(wi,"DIV",{class:!0});var B2=s(Ds);g(Vr.$$.fragment,B2),B2.forEach(r),wi.forEach(r),nm=l(e),at=n(e,"DIV",{class:!0});var vp=s(at);g(Mr.$$.fragment,vp),ou=l(vp),Ss=n(vp,"DIV",{class:!0});var I2=s(Ss);g(Gr.$$.fragment,I2),I2.forEach(r),vp.forEach(r),sm=l(e),re=n(e,"DIV",{class:!0});var Li=s(re);g(jr.$$.fragment,Li),nu=l(Li),Ft=n(Li,"P",{});var pd=s(Ft);zs=n(pd,"A",{href:!0});var A2=s(zs);su=i(A2,"LogitsProcessor"),A2.forEach(r),au=i(pd,` that enforces no repetition of n-grams. See
`),Hr=n(pd,"A",{href:!0,rel:!0});var C2=s(Hr);iu=i(C2,"Fairseq"),C2.forEach(r),cu=i(pd,"."),pd.forEach(r),lu=l(Li),Os=n(Li,"DIV",{class:!0});var W2=s(Os);g(Rr.$$.fragment,W2),W2.forEach(r),Li.forEach(r),am=l(e),oe=n(e,"DIV",{class:!0});var Ei=s(oe);g(Kr.$$.fragment,Ei),du=l(Ei),qs=n(Ei,"P",{});var FT=s(qs);Bs=n(FT,"A",{href:!0});var N2=s(Bs);mu=i(N2,"LogitsProcessor"),N2.forEach(r),pu=i(FT," that enforces that specified sequences will never be sampled."),FT.forEach(r),fu=l(Ei),Is=n(Ei,"DIV",{class:!0});var V2=s(Is);g(Ur.$$.fragment,V2),V2.forEach(r),Ei.forEach(r),im=l(e),ne=n(e,"DIV",{class:!0});var Pi=s(ne);g(Yr.$$.fragment,Pi),gu=l(Pi),Dt=n(Pi,"P",{});var fd=s(Dt);As=n(fd,"A",{href:!0});var M2=s(As);hu=i(M2,"LogitsProcessor"),M2.forEach(r),uu=i(fd,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Xr=n(fd,"A",{href:!0,rel:!0});var G2=s(Xr);_u=i(G2,"Autoregressive Entity Retrieval"),G2.forEach(r),bu=i(fd," for more information."),fd.forEach(r),vu=l(Pi),Cs=n(Pi,"DIV",{class:!0});var j2=s(Cs);g(Jr.$$.fragment,j2),j2.forEach(r),Pi.forEach(r),cm=l(e),se=n(e,"DIV",{class:!0});var Fi=s(se);g(Qr.$$.fragment,Fi),$u=l(Fi),We=n(Fi,"P",{});var Hn=s(We);Ws=n(Hn,"A",{href:!0});var H2=s(Ws);Tu=i(H2,"LogitsProcessor"),H2.forEach(r),yu=i(Hn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Ns=n(Hn,"A",{href:!0});var R2=s(Ns);ku=i(R2,"PreTrainedModel.group_beam_search()"),R2.forEach(r),xu=i(Hn,". See "),Zr=n(Hn,"A",{href:!0,rel:!0});var K2=s(Zr);wu=i(K2,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),K2.forEach(r),Lu=i(Hn," for more details."),Hn.forEach(r),Eu=l(Fi),Vs=n(Fi,"DIV",{class:!0});var U2=s(Vs);g(eo.$$.fragment,U2),U2.forEach(r),Fi.forEach(r),lm=l(e),ae=n(e,"DIV",{class:!0});var Di=s(ae);g(to.$$.fragment,Di),Pu=l(Di),Ms=n(Di,"P",{});var DT=s(Ms);Gs=n(DT,"A",{href:!0});var Y2=s(Gs);Fu=i(Y2,"LogitsProcessor"),Y2.forEach(r),Du=i(DT," that enforces the specified token as the first generated token."),DT.forEach(r),Su=l(Di),js=n(Di,"DIV",{class:!0});var X2=s(js);g(ro.$$.fragment,X2),X2.forEach(r),Di.forEach(r),dm=l(e),ie=n(e,"DIV",{class:!0});var Si=s(ie);g(oo.$$.fragment,Si),zu=l(Si),St=n(Si,"P",{});var gd=s(St);Hs=n(gd,"A",{href:!0});var J2=s(Hs);Ou=i(J2,"LogitsProcessor"),J2.forEach(r),qu=i(gd," that enforces the specified token as the last generated token when "),ml=n(gd,"CODE",{});var Q2=s(ml);Bu=i(Q2,"max_length"),Q2.forEach(r),Iu=i(gd," is reached."),gd.forEach(r),Au=l(Si),Rs=n(Si,"DIV",{class:!0});var Z2=s(Rs);g(no.$$.fragment,Z2),Z2.forEach(r),Si.forEach(r),mm=l(e),ce=n(e,"DIV",{class:!0});var zi=s(ce);g(so.$$.fragment,zi),Cu=l(zi),G=n(zi,"P",{});var ut=s(G);Ks=n(ut,"A",{href:!0});var ey=s(Ks);Wu=i(ey,"LogitsProcessor"),ey.forEach(r),Nu=i(ut," that removes all "),pl=n(ut,"CODE",{});var ty=s(pl);Vu=i(ty,"nan"),ty.forEach(r),Mu=i(ut," and "),fl=n(ut,"CODE",{});var ry=s(fl);Gu=i(ry,"inf"),ry.forEach(r),ju=i(ut,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),gl=n(ut,"CODE",{});var oy=s(gl);Hu=i(oy,"max_length"),oy.forEach(r),Ru=i(ut,` is
reached.`),ut.forEach(r),Ku=l(zi),Us=n(zi,"DIV",{class:!0});var ny=s(Us);g(ao.$$.fragment,ny),ny.forEach(r),zi.forEach(r),pm=l(e),le=n(e,"DIV",{class:!0});var Oi=s(le);g(io.$$.fragment,Oi),Uu=l(Oi),hl=n(Oi,"P",{});var sy=s(hl);Yu=i(sy,"Abstract base class for all logit processors that can be applied during generation."),sy.forEach(r),Xu=l(Oi),zt=n(Oi,"DIV",{class:!0});var $p=s(zt);g(co.$$.fragment,$p),Ju=l($p),ul=n($p,"P",{});var ay=s(ul);Qu=i(ay,"TF method for processing logits."),ay.forEach(r),$p.forEach(r),Oi.forEach(r),fm=l(e),de=n(e,"DIV",{class:!0});var qi=s(de);g(lo.$$.fragment,qi),Zu=l(qi),A=n(qi,"P",{});var je=s(A);e_=i(je,"This class can be used to create a list of "),Ys=n(je,"A",{href:!0});var iy=s(Ys);t_=i(iy,"TFLogitsProcessor"),iy.forEach(r),r_=i(je," to subsequently process a "),_l=n(je,"CODE",{});var cy=s(_l);o_=i(cy,"scores"),cy.forEach(r),n_=i(je,` input tensor.
This class inherits from list and adds a specific `),bl=n(je,"EM",{});var ly=s(bl);vl=n(ly,"STRONG",{});var dy=s(vl);s_=i(dy,"call"),dy.forEach(r),ly.forEach(r),a_=i(je," method to apply each "),Xs=n(je,"A",{href:!0});var my=s(Xs);i_=i(my,"TFLogitsProcessor"),my.forEach(r),c_=i(je,` to the
inputs.`),je.forEach(r),l_=l(qi),Js=n(qi,"DIV",{class:!0});var py=s(Js);g(mo.$$.fragment,py),py.forEach(r),qi.forEach(r),gm=l(e),me=n(e,"DIV",{class:!0});var Bi=s(me);g(po.$$.fragment,Bi),d_=l(Bi),$l=n(Bi,"P",{});var fy=s($l);m_=i(fy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),fy.forEach(r),p_=l(Bi),Ot=n(Bi,"DIV",{class:!0});var Tp=s(Ot);g(fo.$$.fragment,Tp),f_=l(Tp),Tl=n(Tp,"P",{});var gy=s(Tl);g_=i(gy,"TF method for warping logits."),gy.forEach(r),Tp.forEach(r),Bi.forEach(r),hm=l(e),pe=n(e,"DIV",{class:!0});var Ii=s(pe);g(go.$$.fragment,Ii),h_=l(Ii),Qs=n(Ii,"P",{});var ST=s(Qs);Zs=n(ST,"A",{href:!0});var hy=s(Zs);u_=i(hy,"TFLogitsWarper"),hy.forEach(r),__=i(ST," for temperature (exponential scaling output probability distribution)."),ST.forEach(r),b_=l(Ii),ea=n(Ii,"DIV",{class:!0});var uy=s(ea);g(ho.$$.fragment,uy),uy.forEach(r),Ii.forEach(r),um=l(e),fe=n(e,"DIV",{class:!0});var Ai=s(fe);g(uo.$$.fragment,Ai),v_=l(Ai),ta=n(Ai,"P",{});var zT=s(ta);ra=n(zT,"A",{href:!0});var _y=s(ra);$_=i(_y,"TFLogitsWarper"),_y.forEach(r),T_=i(zT," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),zT.forEach(r),y_=l(Ai),oa=n(Ai,"DIV",{class:!0});var by=s(oa);g(_o.$$.fragment,by),by.forEach(r),Ai.forEach(r),_m=l(e),ge=n(e,"DIV",{class:!0});var Ci=s(ge);g(bo.$$.fragment,Ci),k_=l(Ci),na=n(Ci,"P",{});var OT=s(na);sa=n(OT,"A",{href:!0});var vy=s(sa);x_=i(vy,"TFLogitsWarper"),vy.forEach(r),w_=i(OT," that performs top-k, i.e. restricting to the k highest probability elements."),OT.forEach(r),L_=l(Ci),aa=n(Ci,"DIV",{class:!0});var $y=s(aa);g(vo.$$.fragment,$y),$y.forEach(r),Ci.forEach(r),bm=l(e),he=n(e,"DIV",{class:!0});var Wi=s(he);g($o.$$.fragment,Wi),E_=l(Wi),ia=n(Wi,"P",{});var qT=s(ia);ca=n(qT,"A",{href:!0});var Ty=s(ca);P_=i(Ty,"TFLogitsProcessor"),Ty.forEach(r),F_=i(qT," enforcing a min-length by setting EOS probability to 0."),qT.forEach(r),D_=l(Wi),la=n(Wi,"DIV",{class:!0});var yy=s(la);g(To.$$.fragment,yy),yy.forEach(r),Wi.forEach(r),vm=l(e),ue=n(e,"DIV",{class:!0});var Ni=s(ue);g(yo.$$.fragment,Ni),S_=l(Ni),da=n(Ni,"P",{});var BT=s(da);ma=n(BT,"A",{href:!0});var ky=s(ma);z_=i(ky,"TFLogitsProcessor"),ky.forEach(r),O_=i(BT," that enforces that specified sequences will never be sampled."),BT.forEach(r),q_=l(Ni),pa=n(Ni,"DIV",{class:!0});var xy=s(pa);g(ko.$$.fragment,xy),xy.forEach(r),Ni.forEach(r),$m=l(e),_e=n(e,"DIV",{class:!0});var Vi=s(_e);g(xo.$$.fragment,Vi),B_=l(Vi),qt=n(Vi,"P",{});var hd=s(qt);fa=n(hd,"A",{href:!0});var wy=s(fa);I_=i(wy,"TFLogitsProcessor"),wy.forEach(r),A_=i(hd,` that enforces no repetition of n-grams. See
`),wo=n(hd,"A",{href:!0,rel:!0});var Ly=s(wo);C_=i(Ly,"Fairseq"),Ly.forEach(r),W_=i(hd,"."),hd.forEach(r),N_=l(Vi),ga=n(Vi,"DIV",{class:!0});var Ey=s(ga);g(Lo.$$.fragment,Ey),Ey.forEach(r),Vi.forEach(r),Tm=l(e),be=n(e,"DIV",{class:!0});var Mi=s(be);g(Eo.$$.fragment,Mi),V_=l(Mi),ha=n(Mi,"P",{});var IT=s(ha);ua=n(IT,"A",{href:!0});var Py=s(ua);M_=i(Py,"TFLogitsProcessor"),Py.forEach(r),G_=i(IT," enforcing an exponential penalty on repeated sequences."),IT.forEach(r),j_=l(Mi),_a=n(Mi,"DIV",{class:!0});var Fy=s(_a);g(Po.$$.fragment,Fy),Fy.forEach(r),Mi.forEach(r),ym=l(e),ve=n(e,"DIV",{class:!0});var Gi=s(ve);g(Fo.$$.fragment,Gi),H_=l(Gi),ba=n(Gi,"P",{});var AT=s(ba);va=n(AT,"A",{href:!0});var Dy=s(va);R_=i(Dy,"TFLogitsProcessor"),Dy.forEach(r),K_=i(AT," that enforces the specified token as the first generated token."),AT.forEach(r),U_=l(Gi),$a=n(Gi,"DIV",{class:!0});var Sy=s($a);g(Do.$$.fragment,Sy),Sy.forEach(r),Gi.forEach(r),km=l(e),$e=n(e,"DIV",{class:!0});var ji=s($e);g(So.$$.fragment,ji),Y_=l(ji),Bt=n(ji,"P",{});var ud=s(Bt);Ta=n(ud,"A",{href:!0});var zy=s(Ta);X_=i(zy,"TFLogitsProcessor"),zy.forEach(r),J_=i(ud," that enforces the specified token as the last generated token when "),yl=n(ud,"CODE",{});var Oy=s(yl);Q_=i(Oy,"max_length"),Oy.forEach(r),Z_=i(ud," is reached."),ud.forEach(r),eb=l(ji),ya=n(ji,"DIV",{class:!0});var qy=s(ya);g(zo.$$.fragment,qy),qy.forEach(r),ji.forEach(r),xm=l(e),Te=n(e,"DIV",{class:!0});var Hi=s(Te);g(Oo.$$.fragment,Hi),tb=l(Hi),kl=n(Hi,"P",{});var By=s(kl);rb=i(By,"Abstract base class for all logit processors that can be applied during generation."),By.forEach(r),ob=l(Hi),It=n(Hi,"DIV",{class:!0});var yp=s(It);g(qo.$$.fragment,yp),nb=l(yp),xl=n(yp,"P",{});var Iy=s(xl);sb=i(Iy,"Flax method for processing logits."),Iy.forEach(r),yp.forEach(r),Hi.forEach(r),wm=l(e),ye=n(e,"DIV",{class:!0});var Ri=s(ye);g(Bo.$$.fragment,Ri),ab=l(Ri),E=n(Ri,"P",{});var I=s(E);ib=i(I,"This class can be used to create a list of "),ka=n(I,"A",{href:!0});var Ay=s(ka);cb=i(Ay,"FlaxLogitsProcessor"),Ay.forEach(r),lb=i(I," or "),xa=n(I,"A",{href:!0});var Cy=s(xa);db=i(Cy,"FlaxLogitsWarper"),Cy.forEach(r),mb=i(I,` to subsequently process
a `),wl=n(I,"CODE",{});var Wy=s(wl);pb=i(Wy,"scores"),Wy.forEach(r),fb=i(I," input tensor. This class inherits from list and adds a specific "),Ll=n(I,"EM",{});var Ny=s(Ll);El=n(Ny,"STRONG",{});var Vy=s(El);gb=i(Vy,"call"),Vy.forEach(r),Ny.forEach(r),hb=i(I,` method to apply each
`),wa=n(I,"A",{href:!0});var My=s(wa);ub=i(My,"FlaxLogitsProcessor"),My.forEach(r),_b=i(I," or "),La=n(I,"A",{href:!0});var Gy=s(La);bb=i(Gy,"FlaxLogitsWarper"),Gy.forEach(r),vb=i(I," to the inputs."),I.forEach(r),$b=l(Ri),Ea=n(Ri,"DIV",{class:!0});var jy=s(Ea);g(Io.$$.fragment,jy),jy.forEach(r),Ri.forEach(r),Lm=l(e),ke=n(e,"DIV",{class:!0});var Ki=s(ke);g(Ao.$$.fragment,Ki),Tb=l(Ki),Pl=n(Ki,"P",{});var Hy=s(Pl);yb=i(Hy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Hy.forEach(r),kb=l(Ki),At=n(Ki,"DIV",{class:!0});var kp=s(At);g(Co.$$.fragment,kp),xb=l(kp),Fl=n(kp,"P",{});var Ry=s(Fl);wb=i(Ry,"Flax method for warping logits."),Ry.forEach(r),kp.forEach(r),Ki.forEach(r),Em=l(e),xe=n(e,"DIV",{class:!0});var Ui=s(xe);g(Wo.$$.fragment,Ui),Lb=l(Ui),Pa=n(Ui,"P",{});var CT=s(Pa);Fa=n(CT,"A",{href:!0});var Ky=s(Fa);Eb=i(Ky,"FlaxLogitsWarper"),Ky.forEach(r),Pb=i(CT," for temperature (exponential scaling output probability distribution)."),CT.forEach(r),Fb=l(Ui),Da=n(Ui,"DIV",{class:!0});var Uy=s(Da);g(No.$$.fragment,Uy),Uy.forEach(r),Ui.forEach(r),Pm=l(e),we=n(e,"DIV",{class:!0});var Yi=s(we);g(Vo.$$.fragment,Yi),Db=l(Yi),Sa=n(Yi,"P",{});var WT=s(Sa);za=n(WT,"A",{href:!0});var Yy=s(za);Sb=i(Yy,"FlaxLogitsWarper"),Yy.forEach(r),zb=i(WT," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),WT.forEach(r),Ob=l(Yi),Oa=n(Yi,"DIV",{class:!0});var Xy=s(Oa);g(Mo.$$.fragment,Xy),Xy.forEach(r),Yi.forEach(r),Fm=l(e),Le=n(e,"DIV",{class:!0});var Xi=s(Le);g(Go.$$.fragment,Xi),qb=l(Xi),qa=n(Xi,"P",{});var NT=s(qa);Ba=n(NT,"A",{href:!0});var Jy=s(Ba);Bb=i(Jy,"FlaxLogitsWarper"),Jy.forEach(r),Ib=i(NT," that performs top-k, i.e. restricting to the k highest probability elements."),NT.forEach(r),Ab=l(Xi),Ia=n(Xi,"DIV",{class:!0});var Qy=s(Ia);g(jo.$$.fragment,Qy),Qy.forEach(r),Xi.forEach(r),Dm=l(e),Ee=n(e,"DIV",{class:!0});var Ji=s(Ee);g(Ho.$$.fragment,Ji),Cb=l(Ji),Aa=n(Ji,"P",{});var VT=s(Aa);Ca=n(VT,"A",{href:!0});var Zy=s(Ca);Wb=i(Zy,"FlaxLogitsProcessor"),Zy.forEach(r),Nb=i(VT," that enforces the specified token as the first generated token."),VT.forEach(r),Vb=l(Ji),Wa=n(Ji,"DIV",{class:!0});var e0=s(Wa);g(Ro.$$.fragment,e0),e0.forEach(r),Ji.forEach(r),Sm=l(e),Pe=n(e,"DIV",{class:!0});var Qi=s(Pe);g(Ko.$$.fragment,Qi),Mb=l(Qi),Ct=n(Qi,"P",{});var _d=s(Ct);Na=n(_d,"A",{href:!0});var t0=s(Na);Gb=i(t0,"FlaxLogitsProcessor"),t0.forEach(r),jb=i(_d," that enforces the specified token as the last generated token when "),Dl=n(_d,"CODE",{});var r0=s(Dl);Hb=i(r0,"max_length"),r0.forEach(r),Rb=i(_d," is reached."),_d.forEach(r),Kb=l(Qi),Va=n(Qi,"DIV",{class:!0});var o0=s(Va);g(Uo.$$.fragment,o0),o0.forEach(r),Qi.forEach(r),zm=l(e),Fe=n(e,"DIV",{class:!0});var Zi=s(Fe);g(Yo.$$.fragment,Zi),Ub=l(Zi),Ma=n(Zi,"P",{});var MT=s(Ma);Ga=n(MT,"A",{href:!0});var n0=s(Ga);Yb=i(n0,"FlaxLogitsProcessor"),n0.forEach(r),Xb=i(MT," enforcing a min-length by setting EOS probability to 0."),MT.forEach(r),Jb=l(Zi),ja=n(Zi,"DIV",{class:!0});var s0=s(ja);g(Xo.$$.fragment,s0),s0.forEach(r),Zi.forEach(r),Om=l(e),it=n(e,"H2",{class:!0});var xp=s(it);Wt=n(xp,"A",{id:!0,class:!0,href:!0});var a0=s(Wt);Sl=n(a0,"SPAN",{});var i0=s(Sl);g(Jo.$$.fragment,i0),i0.forEach(r),a0.forEach(r),Qb=l(xp),zl=n(xp,"SPAN",{});var c0=s(zl);Zb=i(c0,"StoppingCriteria"),c0.forEach(r),xp.forEach(r),qm=l(e),Nt=n(e,"P",{});var wp=s(Nt);ev=i(wp,"A "),Ha=n(wp,"A",{href:!0});var l0=s(Ha);tv=i(l0,"StoppingCriteria"),l0.forEach(r),rv=i(wp," can be used to change when to stop generation (other than EOS token)."),wp.forEach(r),Bm=l(e),De=n(e,"DIV",{class:!0});var ec=s(De);g(Qo.$$.fragment,ec),ov=l(ec),Ol=n(ec,"P",{});var d0=s(Ol);nv=i(d0,"Abstract base class for all stopping criteria that can be applied during generation."),d0.forEach(r),sv=l(ec),Ra=n(ec,"DIV",{class:!0});var m0=s(Ra);g(Zo.$$.fragment,m0),m0.forEach(r),ec.forEach(r),Im=l(e),ct=n(e,"DIV",{class:!0});var Lp=s(ct);g(en.$$.fragment,Lp),av=l(Lp),Ka=n(Lp,"DIV",{class:!0});var p0=s(Ka);g(tn.$$.fragment,p0),p0.forEach(r),Lp.forEach(r),Am=l(e),Se=n(e,"DIV",{class:!0});var tc=s(Se);g(rn.$$.fragment,tc),iv=l(tc),on=n(tc,"P",{});var Ep=s(on);cv=i(Ep,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),ql=n(Ep,"CODE",{});var f0=s(ql);lv=i(f0,"max_length"),f0.forEach(r),dv=i(Ep,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Ep.forEach(r),mv=l(tc),Ua=n(tc,"DIV",{class:!0});var g0=s(Ua);g(nn.$$.fragment,g0),g0.forEach(r),tc.forEach(r),Cm=l(e),ze=n(e,"DIV",{class:!0});var rc=s(ze);g(sn.$$.fragment,rc),pv=l(rc),an=n(rc,"P",{});var Pp=s(an);fv=i(Pp,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Bl=n(Pp,"CODE",{});var h0=s(Bl);gv=i(h0,"initial_time"),h0.forEach(r),hv=i(Pp,"."),Pp.forEach(r),uv=l(rc),Ya=n(rc,"DIV",{class:!0});var u0=s(Ya);g(cn.$$.fragment,u0),u0.forEach(r),rc.forEach(r),Wm=l(e),lt=n(e,"H2",{class:!0});var Fp=s(lt);Vt=n(Fp,"A",{id:!0,class:!0,href:!0});var _0=s(Vt);Il=n(_0,"SPAN",{});var b0=s(Il);g(ln.$$.fragment,b0),b0.forEach(r),_0.forEach(r),_v=l(Fp),Al=n(Fp,"SPAN",{});var v0=s(Al);bv=i(v0,"Constraints"),v0.forEach(r),Fp.forEach(r),Nm=l(e),Mt=n(e,"P",{});var Dp=s(Mt);vv=i(Dp,"A "),Xa=n(Dp,"A",{href:!0});var $0=s(Xa);$v=i($0,"Constraint"),$0.forEach(r),Tv=i(Dp," can be used to force the generation to include specific tokens or sequences in the output."),Dp.forEach(r),Vm=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(dn.$$.fragment,T),yv=l(T),Cl=n(T,"P",{});var T0=s(Cl);kv=i(T0,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),T0.forEach(r),xv=l(T),Wl=n(T,"P",{});var y0=s(Wl);wv=i(y0,"All classes that inherit Constraint must follow the requirement that"),y0.forEach(r),Lv=l(T),g(Gt.$$.fragment,T),Ev=l(T),Nl=n(T,"P",{});var k0=s(Nl);Pv=i(k0,"will always terminate (halt)."),k0.forEach(r),Fv=l(T),jt=n(T,"DIV",{class:!0});var Sp=s(jt);g(mn.$$.fragment,Sp),Dv=l(Sp),Vl=n(Sp,"P",{});var x0=s(Vl);Sv=i(x0,"When called, returns the token that would take this constraint one step closer to being fulfilled."),x0.forEach(r),Sp.forEach(r),zv=l(T),Ht=n(T,"DIV",{class:!0});var zp=s(Ht);g(pn.$$.fragment,zp),Ov=l(zp),Ml=n(zp,"P",{});var w0=s(Ml);qv=i(w0,"Creates a new instance of this constraint."),w0.forEach(r),zp.forEach(r),Bv=l(T),Rt=n(T,"DIV",{class:!0});var Op=s(Rt);g(fn.$$.fragment,Op),Iv=l(Op),Gl=n(Op,"P",{});var L0=s(Gl);Av=i(L0,"Reads in a token and returns whether it creates progress."),L0.forEach(r),Op.forEach(r),Cv=l(T),Kt=n(T,"DIV",{class:!0});var qp=s(Kt);g(gn.$$.fragment,qp),Wv=l(qp),hn=n(qp,"P",{});var Bp=s(hn);Nv=i(Bp,"Returns the number of remaining steps of "),jl=n(Bp,"CODE",{});var E0=s(jl);Vv=i(E0,"advance()"),E0.forEach(r),Mv=i(Bp," in order to complete this constraint."),Bp.forEach(r),qp.forEach(r),Gv=l(T),Ut=n(T,"DIV",{class:!0});var Ip=s(Ut);g(un.$$.fragment,Ip),jv=l(Ip),Hl=n(Ip,"P",{});var P0=s(Hl);Hv=i(P0,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),P0.forEach(r),Ip.forEach(r),Rv=l(T),Yt=n(T,"DIV",{class:!0});var Ap=s(Yt);g(_n.$$.fragment,Ap),Kv=l(Ap),Rl=n(Ap,"P",{});var F0=s(Rl);Uv=i(F0,"Tests whether this constraint has been properly defined."),F0.forEach(r),Ap.forEach(r),Yv=l(T),Ne=n(T,"DIV",{class:!0});var oc=s(Ne);g(bn.$$.fragment,oc),Xv=l(oc),vn=n(oc,"P",{});var Cp=s(vn);Jv=i(Cp,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Kl=n(Cp,"CODE",{});var D0=s(Kl);Qv=i(D0,"does_advance(self, token_id: int)"),D0.forEach(r),Zv=i(Cp,"."),Cp.forEach(r),e$=l(oc),Ul=n(oc,"P",{});var S0=s(Ul);t$=i(S0,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),S0.forEach(r),oc.forEach(r),T.forEach(r),Mm=l(e),dt=n(e,"DIV",{class:!0});var Wp=s(dt);g($n.$$.fragment,Wp),r$=l(Wp),Ja=n(Wp,"P",{});var GT=s(Ja);Qa=n(GT,"A",{href:!0});var z0=s(Qa);o$=i(z0,"Constraint"),z0.forEach(r),n$=i(GT," enforcing that an ordered sequence of tokens is included in the output."),GT.forEach(r),Wp.forEach(r),Gm=l(e),mt=n(e,"DIV",{class:!0});var Np=s(mt);g(Tn.$$.fragment,Np),s$=l(Np),yn=n(Np,"P",{});var Vp=s(yn);a$=i(Vp,"A special "),Za=n(Vp,"A",{href:!0});var O0=s(Za);i$=i(O0,"Constraint"),O0.forEach(r),c$=i(Vp," that is fulfilled by fulfilling just one of several constraints."),Vp.forEach(r),Np.forEach(r),jm=l(e),C=n(e,"DIV",{class:!0});var tr=s(C);g(kn.$$.fragment,tr),l$=l(tr),Yl=n(tr,"P",{});var q0=s(Yl);d$=i(q0,"A class for beam scorers to track its progress through a list of constraints."),q0.forEach(r),m$=l(tr),F=n(tr,"DIV",{class:!0});var j=s(F);g(xn.$$.fragment,j),p$=l(j),Xl=n(j,"P",{});var B0=s(Xl);f$=i(B0,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),B0.forEach(r),g$=l(j),pt=n(j,"P",{});var nc=s(pt);h$=i(nc,"Given constraints "),Jl=n(nc,"CODE",{});var I0=s(Jl);u$=i(I0,"c_i = {t_ij | j == # of tokens}"),I0.forEach(r),_$=i(nc,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Ql=n(nc,"CODE",{});var A0=s(Ql);b$=i(A0,"c_i"),A0.forEach(r),v$=i(nc,", we return:"),nc.forEach(r),$$=l(j),Zl=n(j,"P",{});var C0=s(Zl);ed=n(C0,"CODE",{});var W0=s(ed);T$=i(W0,"[t_k1 for k in indices of unfulfilled constraints]"),W0.forEach(r),C0.forEach(r),y$=l(j),Oe=n(j,"P",{});var rr=s(Oe);k$=i(rr,`If we are in the middle of a constraint, then we return:
`),td=n(rr,"CODE",{});var N0=s(td);x$=i(N0,"[t_ij]"),N0.forEach(r),w$=i(rr,", where "),rd=n(rr,"CODE",{});var V0=s(rd);L$=i(V0,"i"),V0.forEach(r),E$=i(rr," is the index of the inprogress constraint, "),od=n(rr,"CODE",{});var M0=s(od);P$=i(M0,"j"),M0.forEach(r),F$=i(rr," is the next step for the constraint."),rr.forEach(r),D$=l(j),nd=n(j,"P",{});var G0=s(nd);S$=i(G0,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),G0.forEach(r),j.forEach(r),z$=l(tr),Xt=n(tr,"DIV",{class:!0});var Mp=s(Xt);g(wn.$$.fragment,Mp),O$=l(Mp),sd=n(Mp,"P",{});var j0=s(sd);q$=i(j0,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),j0.forEach(r),Mp.forEach(r),tr.forEach(r),Hm=l(e),ft=n(e,"H2",{class:!0});var Gp=s(ft);Jt=n(Gp,"A",{id:!0,class:!0,href:!0});var H0=s(Jt);ad=n(H0,"SPAN",{});var R0=s(ad);g(Ln.$$.fragment,R0),R0.forEach(r),H0.forEach(r),B$=l(Gp),id=n(Gp,"SPAN",{});var K0=s(id);I$=i(K0,"BeamSearch"),K0.forEach(r),Gp.forEach(r),Rm=l(e),W=n(e,"DIV",{class:!0});var or=s(W);g(En.$$.fragment,or),A$=l(or),gt=n(or,"P",{});var sc=s(gt);C$=i(sc,"Abstract base class for all beam scorers that are used for "),ei=n(sc,"A",{href:!0});var U0=s(ei);W$=i(U0,"beam_search()"),U0.forEach(r),N$=i(sc,` and
`),ti=n(sc,"A",{href:!0});var Y0=s(ti);V$=i(Y0,"beam_sample()"),Y0.forEach(r),M$=i(sc,"."),sc.forEach(r),G$=l(or),ri=n(or,"DIV",{class:!0});var X0=s(ri);g(Pn.$$.fragment,X0),X0.forEach(r),j$=l(or),oi=n(or,"DIV",{class:!0});var J0=s(oi);g(Fn.$$.fragment,J0),J0.forEach(r),or.forEach(r),Km=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g(Dn.$$.fragment,H),H$=l(H),ni=n(H,"P",{});var jT=s(ni);si=n(jT,"A",{href:!0});var Q0=s(si);R$=i(Q0,"BeamScorer"),Q0.forEach(r),K$=i(jT," implementing standard beam search decoding."),jT.forEach(r),U$=l(H),Sn=n(H,"P",{});var jp=s(Sn);Y$=i(jp,"Adapted in part from "),zn=n(jp,"A",{href:!0,rel:!0});var Z0=s(zn);X$=i(Z0,`Facebook\u2019s XLM beam search
code`),Z0.forEach(r),J$=i(jp,"."),jp.forEach(r),Q$=l(H),ai=n(H,"P",{});var HT=s(ai);Z$=i(HT,"Reference for the diverse beam search algorithm and implementation "),On=n(HT,"A",{href:!0,rel:!0});var ek=s(On);eT=i(ek,`Ashwin Kalyan\u2019s DBS
implementation`),ek.forEach(r),HT.forEach(r),tT=l(H),ii=n(H,"DIV",{class:!0});var tk=s(ii);g(qn.$$.fragment,tk),tk.forEach(r),rT=l(H),ci=n(H,"DIV",{class:!0});var rk=s(ci);g(Bn.$$.fragment,rk),rk.forEach(r),H.forEach(r),Um=l(e),N=n(e,"DIV",{class:!0});var nr=s(N);g(In.$$.fragment,nr),oT=l(nr),li=n(nr,"P",{});var RT=s(li);di=n(RT,"A",{href:!0});var ok=s(di);nT=i(ok,"BeamScorer"),ok.forEach(r),sT=i(RT," implementing constrained beam search decoding."),RT.forEach(r),aT=l(nr),mi=n(nr,"DIV",{class:!0});var nk=s(mi);g(An.$$.fragment,nk),nk.forEach(r),iT=l(nr),pi=n(nr,"DIV",{class:!0});var sk=s(pi);g(Cn.$$.fragment,sk),sk.forEach(r),nr.forEach(r),Ym=l(e),ht=n(e,"H2",{class:!0});var Hp=s(ht);Qt=n(Hp,"A",{id:!0,class:!0,href:!0});var ak=s(Qt);cd=n(ak,"SPAN",{});var ik=s(cd);g(Wn.$$.fragment,ik),ik.forEach(r),ak.forEach(r),cT=l(Hp),ld=n(Hp,"SPAN",{});var ck=s(ld);lT=i(ck,"Utilities"),ck.forEach(r),Hp.forEach(r),Xm=l(e),qe=n(e,"DIV",{class:!0});var ac=s(qe);g(Nn.$$.fragment,ac),dT=l(ac),dd=n(ac,"P",{});var lk=s(dd);mT=i(lk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),lk.forEach(r),pT=l(ac),fi=n(ac,"P",{});var KT=s(fi);fT=i(KT,"From: "),Vn=n(KT,"A",{href:!0,rel:!0});var dk=s(Vn);gT=i(dk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),dk.forEach(r),KT.forEach(r),ac.forEach(r),Jm=l(e),Be=n(e,"DIV",{class:!0});var ic=s(Be);g(Mn.$$.fragment,ic),hT=l(ic),md=n(ic,"P",{});var mk=s(md);uT=i(mk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),mk.forEach(r),_T=l(ic),gi=n(ic,"P",{});var UT=s(gi);bT=i(UT,"From: "),Gn=n(UT,"A",{href:!0,rel:!0});var pk=s(Gn);vT=i(pk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),pk.forEach(r),UT.forEach(r),ic.forEach(r),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(yk)),d(Ae,"id","utilities-for-generation"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Rn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Kn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Un,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Yn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Xn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Jn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Qn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(_t,"id","generate-outputs"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#generate-outputs"),d(Re,"class","relative group"),d(es,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(ts,"href","/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput"),d(rs,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(ns,"href","/docs/transformers/main/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ke,"class","relative group"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Xe,"class","relative group"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Ze,"class","relative group"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(rt,"class","relative group"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"id","transformers.LogitsProcessor"),d(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wt,"href","#transformers.LogitsProcessor"),d(st,"class","relative group"),d(ds,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ms,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(ps,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_s,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($s,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ks,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ls,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Hr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Hr,"rel","nofollow"),d(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(As,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Xr,"href","https://arxiv.org/abs/2010.00904"),d(Xr,"rel","nofollow"),d(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ws,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ns,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Zr,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Zr,"rel","nofollow"),d(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ks,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ys,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Xs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ca,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ma,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(wo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(wo,"rel","nofollow"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ua,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(va,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ta,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ka,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(xa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(wa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(La,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ba,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Na,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wt,"id","transformers.StoppingCriteria"),d(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wt,"href","#transformers.StoppingCriteria"),d(it,"class","relative group"),d(Ha,"href","/docs/transformers/main/en/internal/generation_utils#transformers.StoppingCriteria"),d(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vt,"id","transformers.Constraint"),d(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vt,"href","#transformers.Constraint"),d(lt,"class","relative group"),d(Xa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jt,"id","transformers.BeamScorer"),d(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jt,"href","#transformers.BeamScorer"),d(ft,"class","relative group"),d(ei,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(ti,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(ri,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(si,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(zn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(zn,"rel","nofollow"),d(On,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(On,"rel","nofollow"),d(ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(di,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qt,"id","transformers.top_k_top_p_filtering"),d(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qt,"href","#transformers.top_k_top_p_filtering"),d(ht,"class","relative group"),d(Vn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Vn,"rel","nofollow"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Gn,"rel","nofollow"),d(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,w),p(e,He,m),p(e,k,m),t(k,Ae),t(Ae,cc),h(sr,cc,null),t(k,Rp),t(k,lc),t(lc,Kp),p(e,vd,m),p(e,y,m),t(y,Up),t(y,Rn),t(Rn,Yp),t(y,Xp),t(y,Kn),t(Kn,Jp),t(y,Qp),t(y,Un),t(Un,Zp),t(y,ef),t(y,Yn),t(Yn,tf),t(y,rf),t(y,Xn),t(Xn,of),t(y,nf),t(y,Jn),t(Jn,sf),t(y,af),t(y,Qn),t(Qn,cf),t(y,lf),p(e,$d,m),p(e,Zn,m),t(Zn,df),p(e,Td,m),p(e,Re,m),t(Re,_t),t(_t,dc),h(ar,dc,null),t(Re,mf),t(Re,mc),t(mc,pf),p(e,yd,m),p(e,V,m),t(V,ff),t(V,es),t(es,gf),t(V,hf),t(V,ts),t(ts,uf),t(V,_f),t(V,rs),t(rs,bf),t(V,vf),p(e,kd,m),p(e,os,m),t(os,$f),p(e,xd,m),h(ir,e,m),p(e,wd,m),p(e,Ce,m),t(Ce,Tf),t(Ce,pc),t(pc,yf),t(Ce,kf),t(Ce,ns),t(ns,xf),t(Ce,wf),p(e,Ld,m),p(e,M,m),t(M,ss),t(ss,fc),t(fc,Lf),t(ss,Ef),t(M,Pf),t(M,as),t(as,gc),t(gc,Ff),t(as,Df),t(M,Sf),t(M,is),t(is,hc),t(hc,zf),t(is,Of),t(M,qf),t(M,cs),t(cs,uc),t(uc,Bf),t(cs,If),p(e,Ed,m),p(e,x,m),t(x,Af),t(x,_c),t(_c,Cf),t(x,Wf),t(x,bc),t(bc,Nf),t(x,Vf),t(x,vc),t(vc,Mf),t(x,Gf),t(x,$c),t($c,jf),t(x,Hf),t(x,Tc),t(Tc,Rf),t(x,Kf),t(x,yc),t(yc,Uf),t(x,Yf),p(e,Pd,m),p(e,S,m),t(S,Xf),t(S,kc),t(kc,Jf),t(S,Qf),t(S,xc),t(xc,Zf),t(S,eg),t(S,wc),t(wc,tg),t(S,rg),t(S,Lc),t(Lc,og),t(S,ng),p(e,Fd,m),p(e,z,m),t(z,sg),t(z,Ec),t(Ec,ag),t(z,ig),t(z,Pc),t(Pc,cg),t(z,lg),t(z,Fc),t(Fc,dg),t(z,mg),t(z,Dc),t(Dc,pg),t(z,fg),p(e,Dd,m),h(cr,e,m),p(e,Sd,m),p(e,bt,m),t(bt,gg),t(bt,Sc),t(Sc,hg),t(bt,ug),p(e,zd,m),p(e,O,m),t(O,_g),t(O,zc),t(zc,bg),t(O,vg),t(O,Oc),t(Oc,$g),t(O,Tg),t(O,qc),t(qc,yg),t(O,kg),t(O,Bc),t(Bc,xg),t(O,wg),p(e,Od,m),p(e,ls,m),t(ls,Lg),p(e,qd,m),p(e,Ke,m),t(Ke,vt),t(vt,Ic),h(lr,Ic,null),t(Ke,Eg),t(Ke,Ac),t(Ac,Pg),p(e,Bd,m),p(e,Ue,m),h(dr,Ue,null),t(Ue,Fg),t(Ue,Cc),t(Cc,Dg),p(e,Id,m),p(e,Ye,m),h(mr,Ye,null),t(Ye,Sg),t(Ye,Wc),t(Wc,zg),p(e,Ad,m),p(e,R,m),h(pr,R,null),t(R,Og),t(R,Nc),t(Nc,qg),t(R,Bg),t(R,$t),h(fr,$t,null),t($t,Ig),t($t,Vc),t(Vc,Ag),p(e,Cd,m),p(e,Xe,m),t(Xe,Tt),t(Tt,Mc),h(gr,Mc,null),t(Xe,Cg),t(Xe,Gc),t(Gc,Wg),p(e,Wd,m),p(e,Je,m),h(hr,Je,null),t(Je,Ng),t(Je,jc),t(jc,Vg),p(e,Nd,m),p(e,Qe,m),h(ur,Qe,null),t(Qe,Mg),t(Qe,Hc),t(Hc,Gg),p(e,Vd,m),p(e,K,m),h(_r,K,null),t(K,jg),t(K,Rc),t(Rc,Hg),t(K,Rg),t(K,yt),h(br,yt,null),t(yt,Kg),t(yt,Kc),t(Kc,Ug),p(e,Md,m),p(e,Ze,m),t(Ze,kt),t(kt,Uc),h(vr,Uc,null),t(Ze,Yg),t(Ze,Yc),t(Yc,Xg),p(e,Gd,m),p(e,et,m),h($r,et,null),t(et,Jg),t(et,Xc),t(Xc,Qg),p(e,jd,m),p(e,tt,m),h(Tr,tt,null),t(tt,Zg),t(tt,Jc),t(Jc,eh),p(e,Hd,m),p(e,rt,m),t(rt,xt),t(xt,Qc),h(yr,Qc,null),t(rt,th),t(rt,Zc),t(Zc,rh),p(e,Rd,m),p(e,ot,m),h(kr,ot,null),t(ot,oh),t(ot,el),t(el,nh),p(e,Kd,m),p(e,nt,m),h(xr,nt,null),t(nt,sh),t(nt,tl),t(tl,ah),p(e,Ud,m),p(e,st,m),t(st,wt),t(wt,rl),h(wr,rl,null),t(st,ih),t(st,ol),t(ol,ch),p(e,Yd,m),p(e,Lt,m),t(Lt,lh),t(Lt,ds),t(ds,dh),t(Lt,mh),p(e,Xd,m),p(e,U,m),h(Lr,U,null),t(U,ph),t(U,nl),t(nl,fh),t(U,gh),t(U,Et),h(Er,Et,null),t(Et,hh),t(Et,sl),t(sl,uh),p(e,Jd,m),p(e,Y,m),h(Pr,Y,null),t(Y,_h),t(Y,L),t(L,bh),t(L,ms),t(ms,vh),t(L,$h),t(L,ps),t(ps,Th),t(L,yh),t(L,al),t(al,kh),t(L,xh),t(L,il),t(il,cl),t(cl,wh),t(L,Lh),t(L,fs),t(fs,Eh),t(L,Ph),t(L,gs),t(gs,Fh),t(L,Dh),t(Y,Sh),t(Y,hs),h(Fr,hs,null),p(e,Qd,m),p(e,X,m),h(Dr,X,null),t(X,zh),t(X,ll),t(ll,Oh),t(X,qh),t(X,Pt),h(Sr,Pt,null),t(Pt,Bh),t(Pt,dl),t(dl,Ih),p(e,Zd,m),p(e,J,m),h(zr,J,null),t(J,Ah),t(J,us),t(us,_s),t(_s,Ch),t(us,Wh),t(J,Nh),t(J,bs),h(Or,bs,null),p(e,em,m),p(e,Q,m),h(qr,Q,null),t(Q,Vh),t(Q,vs),t(vs,$s),t($s,Mh),t(vs,Gh),t(Q,jh),t(Q,Ts),h(Br,Ts,null),p(e,tm,m),p(e,Z,m),h(Ir,Z,null),t(Z,Hh),t(Z,ys),t(ys,ks),t(ks,Rh),t(ys,Kh),t(Z,Uh),t(Z,xs),h(Ar,xs,null),p(e,rm,m),p(e,ee,m),h(Cr,ee,null),t(ee,Yh),t(ee,ws),t(ws,Ls),t(Ls,Xh),t(ws,Jh),t(ee,Qh),t(ee,Es),h(Wr,Es,null),p(e,om,m),p(e,te,m),h(Nr,te,null),t(te,Zh),t(te,Ps),t(Ps,Fs),t(Fs,eu),t(Ps,tu),t(te,ru),t(te,Ds),h(Vr,Ds,null),p(e,nm,m),p(e,at,m),h(Mr,at,null),t(at,ou),t(at,Ss),h(Gr,Ss,null),p(e,sm,m),p(e,re,m),h(jr,re,null),t(re,nu),t(re,Ft),t(Ft,zs),t(zs,su),t(Ft,au),t(Ft,Hr),t(Hr,iu),t(Ft,cu),t(re,lu),t(re,Os),h(Rr,Os,null),p(e,am,m),p(e,oe,m),h(Kr,oe,null),t(oe,du),t(oe,qs),t(qs,Bs),t(Bs,mu),t(qs,pu),t(oe,fu),t(oe,Is),h(Ur,Is,null),p(e,im,m),p(e,ne,m),h(Yr,ne,null),t(ne,gu),t(ne,Dt),t(Dt,As),t(As,hu),t(Dt,uu),t(Dt,Xr),t(Xr,_u),t(Dt,bu),t(ne,vu),t(ne,Cs),h(Jr,Cs,null),p(e,cm,m),p(e,se,m),h(Qr,se,null),t(se,$u),t(se,We),t(We,Ws),t(Ws,Tu),t(We,yu),t(We,Ns),t(Ns,ku),t(We,xu),t(We,Zr),t(Zr,wu),t(We,Lu),t(se,Eu),t(se,Vs),h(eo,Vs,null),p(e,lm,m),p(e,ae,m),h(to,ae,null),t(ae,Pu),t(ae,Ms),t(Ms,Gs),t(Gs,Fu),t(Ms,Du),t(ae,Su),t(ae,js),h(ro,js,null),p(e,dm,m),p(e,ie,m),h(oo,ie,null),t(ie,zu),t(ie,St),t(St,Hs),t(Hs,Ou),t(St,qu),t(St,ml),t(ml,Bu),t(St,Iu),t(ie,Au),t(ie,Rs),h(no,Rs,null),p(e,mm,m),p(e,ce,m),h(so,ce,null),t(ce,Cu),t(ce,G),t(G,Ks),t(Ks,Wu),t(G,Nu),t(G,pl),t(pl,Vu),t(G,Mu),t(G,fl),t(fl,Gu),t(G,ju),t(G,gl),t(gl,Hu),t(G,Ru),t(ce,Ku),t(ce,Us),h(ao,Us,null),p(e,pm,m),p(e,le,m),h(io,le,null),t(le,Uu),t(le,hl),t(hl,Yu),t(le,Xu),t(le,zt),h(co,zt,null),t(zt,Ju),t(zt,ul),t(ul,Qu),p(e,fm,m),p(e,de,m),h(lo,de,null),t(de,Zu),t(de,A),t(A,e_),t(A,Ys),t(Ys,t_),t(A,r_),t(A,_l),t(_l,o_),t(A,n_),t(A,bl),t(bl,vl),t(vl,s_),t(A,a_),t(A,Xs),t(Xs,i_),t(A,c_),t(de,l_),t(de,Js),h(mo,Js,null),p(e,gm,m),p(e,me,m),h(po,me,null),t(me,d_),t(me,$l),t($l,m_),t(me,p_),t(me,Ot),h(fo,Ot,null),t(Ot,f_),t(Ot,Tl),t(Tl,g_),p(e,hm,m),p(e,pe,m),h(go,pe,null),t(pe,h_),t(pe,Qs),t(Qs,Zs),t(Zs,u_),t(Qs,__),t(pe,b_),t(pe,ea),h(ho,ea,null),p(e,um,m),p(e,fe,m),h(uo,fe,null),t(fe,v_),t(fe,ta),t(ta,ra),t(ra,$_),t(ta,T_),t(fe,y_),t(fe,oa),h(_o,oa,null),p(e,_m,m),p(e,ge,m),h(bo,ge,null),t(ge,k_),t(ge,na),t(na,sa),t(sa,x_),t(na,w_),t(ge,L_),t(ge,aa),h(vo,aa,null),p(e,bm,m),p(e,he,m),h($o,he,null),t(he,E_),t(he,ia),t(ia,ca),t(ca,P_),t(ia,F_),t(he,D_),t(he,la),h(To,la,null),p(e,vm,m),p(e,ue,m),h(yo,ue,null),t(ue,S_),t(ue,da),t(da,ma),t(ma,z_),t(da,O_),t(ue,q_),t(ue,pa),h(ko,pa,null),p(e,$m,m),p(e,_e,m),h(xo,_e,null),t(_e,B_),t(_e,qt),t(qt,fa),t(fa,I_),t(qt,A_),t(qt,wo),t(wo,C_),t(qt,W_),t(_e,N_),t(_e,ga),h(Lo,ga,null),p(e,Tm,m),p(e,be,m),h(Eo,be,null),t(be,V_),t(be,ha),t(ha,ua),t(ua,M_),t(ha,G_),t(be,j_),t(be,_a),h(Po,_a,null),p(e,ym,m),p(e,ve,m),h(Fo,ve,null),t(ve,H_),t(ve,ba),t(ba,va),t(va,R_),t(ba,K_),t(ve,U_),t(ve,$a),h(Do,$a,null),p(e,km,m),p(e,$e,m),h(So,$e,null),t($e,Y_),t($e,Bt),t(Bt,Ta),t(Ta,X_),t(Bt,J_),t(Bt,yl),t(yl,Q_),t(Bt,Z_),t($e,eb),t($e,ya),h(zo,ya,null),p(e,xm,m),p(e,Te,m),h(Oo,Te,null),t(Te,tb),t(Te,kl),t(kl,rb),t(Te,ob),t(Te,It),h(qo,It,null),t(It,nb),t(It,xl),t(xl,sb),p(e,wm,m),p(e,ye,m),h(Bo,ye,null),t(ye,ab),t(ye,E),t(E,ib),t(E,ka),t(ka,cb),t(E,lb),t(E,xa),t(xa,db),t(E,mb),t(E,wl),t(wl,pb),t(E,fb),t(E,Ll),t(Ll,El),t(El,gb),t(E,hb),t(E,wa),t(wa,ub),t(E,_b),t(E,La),t(La,bb),t(E,vb),t(ye,$b),t(ye,Ea),h(Io,Ea,null),p(e,Lm,m),p(e,ke,m),h(Ao,ke,null),t(ke,Tb),t(ke,Pl),t(Pl,yb),t(ke,kb),t(ke,At),h(Co,At,null),t(At,xb),t(At,Fl),t(Fl,wb),p(e,Em,m),p(e,xe,m),h(Wo,xe,null),t(xe,Lb),t(xe,Pa),t(Pa,Fa),t(Fa,Eb),t(Pa,Pb),t(xe,Fb),t(xe,Da),h(No,Da,null),p(e,Pm,m),p(e,we,m),h(Vo,we,null),t(we,Db),t(we,Sa),t(Sa,za),t(za,Sb),t(Sa,zb),t(we,Ob),t(we,Oa),h(Mo,Oa,null),p(e,Fm,m),p(e,Le,m),h(Go,Le,null),t(Le,qb),t(Le,qa),t(qa,Ba),t(Ba,Bb),t(qa,Ib),t(Le,Ab),t(Le,Ia),h(jo,Ia,null),p(e,Dm,m),p(e,Ee,m),h(Ho,Ee,null),t(Ee,Cb),t(Ee,Aa),t(Aa,Ca),t(Ca,Wb),t(Aa,Nb),t(Ee,Vb),t(Ee,Wa),h(Ro,Wa,null),p(e,Sm,m),p(e,Pe,m),h(Ko,Pe,null),t(Pe,Mb),t(Pe,Ct),t(Ct,Na),t(Na,Gb),t(Ct,jb),t(Ct,Dl),t(Dl,Hb),t(Ct,Rb),t(Pe,Kb),t(Pe,Va),h(Uo,Va,null),p(e,zm,m),p(e,Fe,m),h(Yo,Fe,null),t(Fe,Ub),t(Fe,Ma),t(Ma,Ga),t(Ga,Yb),t(Ma,Xb),t(Fe,Jb),t(Fe,ja),h(Xo,ja,null),p(e,Om,m),p(e,it,m),t(it,Wt),t(Wt,Sl),h(Jo,Sl,null),t(it,Qb),t(it,zl),t(zl,Zb),p(e,qm,m),p(e,Nt,m),t(Nt,ev),t(Nt,Ha),t(Ha,tv),t(Nt,rv),p(e,Bm,m),p(e,De,m),h(Qo,De,null),t(De,ov),t(De,Ol),t(Ol,nv),t(De,sv),t(De,Ra),h(Zo,Ra,null),p(e,Im,m),p(e,ct,m),h(en,ct,null),t(ct,av),t(ct,Ka),h(tn,Ka,null),p(e,Am,m),p(e,Se,m),h(rn,Se,null),t(Se,iv),t(Se,on),t(on,cv),t(on,ql),t(ql,lv),t(on,dv),t(Se,mv),t(Se,Ua),h(nn,Ua,null),p(e,Cm,m),p(e,ze,m),h(sn,ze,null),t(ze,pv),t(ze,an),t(an,fv),t(an,Bl),t(Bl,gv),t(an,hv),t(ze,uv),t(ze,Ya),h(cn,Ya,null),p(e,Wm,m),p(e,lt,m),t(lt,Vt),t(Vt,Il),h(ln,Il,null),t(lt,_v),t(lt,Al),t(Al,bv),p(e,Nm,m),p(e,Mt,m),t(Mt,vv),t(Mt,Xa),t(Xa,$v),t(Mt,Tv),p(e,Vm,m),p(e,$,m),h(dn,$,null),t($,yv),t($,Cl),t(Cl,kv),t($,xv),t($,Wl),t(Wl,wv),t($,Lv),h(Gt,$,null),t($,Ev),t($,Nl),t(Nl,Pv),t($,Fv),t($,jt),h(mn,jt,null),t(jt,Dv),t(jt,Vl),t(Vl,Sv),t($,zv),t($,Ht),h(pn,Ht,null),t(Ht,Ov),t(Ht,Ml),t(Ml,qv),t($,Bv),t($,Rt),h(fn,Rt,null),t(Rt,Iv),t(Rt,Gl),t(Gl,Av),t($,Cv),t($,Kt),h(gn,Kt,null),t(Kt,Wv),t(Kt,hn),t(hn,Nv),t(hn,jl),t(jl,Vv),t(hn,Mv),t($,Gv),t($,Ut),h(un,Ut,null),t(Ut,jv),t(Ut,Hl),t(Hl,Hv),t($,Rv),t($,Yt),h(_n,Yt,null),t(Yt,Kv),t(Yt,Rl),t(Rl,Uv),t($,Yv),t($,Ne),h(bn,Ne,null),t(Ne,Xv),t(Ne,vn),t(vn,Jv),t(vn,Kl),t(Kl,Qv),t(vn,Zv),t(Ne,e$),t(Ne,Ul),t(Ul,t$),p(e,Mm,m),p(e,dt,m),h($n,dt,null),t(dt,r$),t(dt,Ja),t(Ja,Qa),t(Qa,o$),t(Ja,n$),p(e,Gm,m),p(e,mt,m),h(Tn,mt,null),t(mt,s$),t(mt,yn),t(yn,a$),t(yn,Za),t(Za,i$),t(yn,c$),p(e,jm,m),p(e,C,m),h(kn,C,null),t(C,l$),t(C,Yl),t(Yl,d$),t(C,m$),t(C,F),h(xn,F,null),t(F,p$),t(F,Xl),t(Xl,f$),t(F,g$),t(F,pt),t(pt,h$),t(pt,Jl),t(Jl,u$),t(pt,_$),t(pt,Ql),t(Ql,b$),t(pt,v$),t(F,$$),t(F,Zl),t(Zl,ed),t(ed,T$),t(F,y$),t(F,Oe),t(Oe,k$),t(Oe,td),t(td,x$),t(Oe,w$),t(Oe,rd),t(rd,L$),t(Oe,E$),t(Oe,od),t(od,P$),t(Oe,F$),t(F,D$),t(F,nd),t(nd,S$),t(C,z$),t(C,Xt),h(wn,Xt,null),t(Xt,O$),t(Xt,sd),t(sd,q$),p(e,Hm,m),p(e,ft,m),t(ft,Jt),t(Jt,ad),h(Ln,ad,null),t(ft,B$),t(ft,id),t(id,I$),p(e,Rm,m),p(e,W,m),h(En,W,null),t(W,A$),t(W,gt),t(gt,C$),t(gt,ei),t(ei,W$),t(gt,N$),t(gt,ti),t(ti,V$),t(gt,M$),t(W,G$),t(W,ri),h(Pn,ri,null),t(W,j$),t(W,oi),h(Fn,oi,null),p(e,Km,m),p(e,P,m),h(Dn,P,null),t(P,H$),t(P,ni),t(ni,si),t(si,R$),t(ni,K$),t(P,U$),t(P,Sn),t(Sn,Y$),t(Sn,zn),t(zn,X$),t(Sn,J$),t(P,Q$),t(P,ai),t(ai,Z$),t(ai,On),t(On,eT),t(P,tT),t(P,ii),h(qn,ii,null),t(P,rT),t(P,ci),h(Bn,ci,null),p(e,Um,m),p(e,N,m),h(In,N,null),t(N,oT),t(N,li),t(li,di),t(di,nT),t(li,sT),t(N,aT),t(N,mi),h(An,mi,null),t(N,iT),t(N,pi),h(Cn,pi,null),p(e,Ym,m),p(e,ht,m),t(ht,Qt),t(Qt,cd),h(Wn,cd,null),t(ht,cT),t(ht,ld),t(ld,lT),p(e,Xm,m),p(e,qe,m),h(Nn,qe,null),t(qe,dT),t(qe,dd),t(dd,mT),t(qe,pT),t(qe,fi),t(fi,fT),t(fi,Vn),t(Vn,gT),p(e,Jm,m),p(e,Be,m),h(Mn,Be,null),t(Be,hT),t(Be,md),t(md,uT),t(Be,_T),t(Be,gi),t(gi,bT),t(gi,Gn),t(Gn,vT),Qm=!0},p(e,[m]){const jn={};m&2&&(jn.$$scope={dirty:m,ctx:e}),Gt.$set(jn)},i(e){Qm||(u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(mr.$$.fragment,e),u(pr.$$.fragment,e),u(fr.$$.fragment,e),u(gr.$$.fragment,e),u(hr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(br.$$.fragment,e),u(vr.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(xr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(Sr.$$.fragment,e),u(zr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Ar.$$.fragment,e),u(Cr.$$.fragment,e),u(Wr.$$.fragment,e),u(Nr.$$.fragment,e),u(Vr.$$.fragment,e),u(Mr.$$.fragment,e),u(Gr.$$.fragment,e),u(jr.$$.fragment,e),u(Rr.$$.fragment,e),u(Kr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(mo.$$.fragment,e),u(po.$$.fragment,e),u(fo.$$.fragment,e),u(go.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(_o.$$.fragment,e),u(bo.$$.fragment,e),u(vo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(xo.$$.fragment,e),u(Lo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(zo.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Ao.$$.fragment,e),u(Co.$$.fragment,e),u(Wo.$$.fragment,e),u(No.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(rn.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(cn.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(Gt.$$.fragment,e),u(mn.$$.fragment,e),u(pn.$$.fragment,e),u(fn.$$.fragment,e),u(gn.$$.fragment,e),u(un.$$.fragment,e),u(_n.$$.fragment,e),u(bn.$$.fragment,e),u($n.$$.fragment,e),u(Tn.$$.fragment,e),u(kn.$$.fragment,e),u(xn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(En.$$.fragment,e),u(Pn.$$.fragment,e),u(Fn.$$.fragment,e),u(Dn.$$.fragment,e),u(qn.$$.fragment,e),u(Bn.$$.fragment,e),u(In.$$.fragment,e),u(An.$$.fragment,e),u(Cn.$$.fragment,e),u(Wn.$$.fragment,e),u(Nn.$$.fragment,e),u(Mn.$$.fragment,e),Qm=!0)},o(e){_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(mr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Ar.$$.fragment,e),_(Cr.$$.fragment,e),_(Wr.$$.fragment,e),_(Nr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(jr.$$.fragment,e),_(Rr.$$.fragment,e),_(Kr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(mo.$$.fragment,e),_(po.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(ho.$$.fragment,e),_(uo.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(Lo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(cn.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(Gt.$$.fragment,e),_(mn.$$.fragment,e),_(pn.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(_n.$$.fragment,e),_(bn.$$.fragment,e),_($n.$$.fragment,e),_(Tn.$$.fragment,e),_(kn.$$.fragment,e),_(xn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(qn.$$.fragment,e),_(Bn.$$.fragment,e),_(In.$$.fragment,e),_(An.$$.fragment,e),_(Cn.$$.fragment,e),_(Wn.$$.fragment,e),_(Nn.$$.fragment,e),_(Mn.$$.fragment,e),Qm=!1},d(e){r(w),e&&r(He),e&&r(k),b(sr),e&&r(vd),e&&r(y),e&&r($d),e&&r(Zn),e&&r(Td),e&&r(Re),b(ar),e&&r(yd),e&&r(V),e&&r(kd),e&&r(os),e&&r(xd),b(ir,e),e&&r(wd),e&&r(Ce),e&&r(Ld),e&&r(M),e&&r(Ed),e&&r(x),e&&r(Pd),e&&r(S),e&&r(Fd),e&&r(z),e&&r(Dd),b(cr,e),e&&r(Sd),e&&r(bt),e&&r(zd),e&&r(O),e&&r(Od),e&&r(ls),e&&r(qd),e&&r(Ke),b(lr),e&&r(Bd),e&&r(Ue),b(dr),e&&r(Id),e&&r(Ye),b(mr),e&&r(Ad),e&&r(R),b(pr),b(fr),e&&r(Cd),e&&r(Xe),b(gr),e&&r(Wd),e&&r(Je),b(hr),e&&r(Nd),e&&r(Qe),b(ur),e&&r(Vd),e&&r(K),b(_r),b(br),e&&r(Md),e&&r(Ze),b(vr),e&&r(Gd),e&&r(et),b($r),e&&r(jd),e&&r(tt),b(Tr),e&&r(Hd),e&&r(rt),b(yr),e&&r(Rd),e&&r(ot),b(kr),e&&r(Kd),e&&r(nt),b(xr),e&&r(Ud),e&&r(st),b(wr),e&&r(Yd),e&&r(Lt),e&&r(Xd),e&&r(U),b(Lr),b(Er),e&&r(Jd),e&&r(Y),b(Pr),b(Fr),e&&r(Qd),e&&r(X),b(Dr),b(Sr),e&&r(Zd),e&&r(J),b(zr),b(Or),e&&r(em),e&&r(Q),b(qr),b(Br),e&&r(tm),e&&r(Z),b(Ir),b(Ar),e&&r(rm),e&&r(ee),b(Cr),b(Wr),e&&r(om),e&&r(te),b(Nr),b(Vr),e&&r(nm),e&&r(at),b(Mr),b(Gr),e&&r(sm),e&&r(re),b(jr),b(Rr),e&&r(am),e&&r(oe),b(Kr),b(Ur),e&&r(im),e&&r(ne),b(Yr),b(Jr),e&&r(cm),e&&r(se),b(Qr),b(eo),e&&r(lm),e&&r(ae),b(to),b(ro),e&&r(dm),e&&r(ie),b(oo),b(no),e&&r(mm),e&&r(ce),b(so),b(ao),e&&r(pm),e&&r(le),b(io),b(co),e&&r(fm),e&&r(de),b(lo),b(mo),e&&r(gm),e&&r(me),b(po),b(fo),e&&r(hm),e&&r(pe),b(go),b(ho),e&&r(um),e&&r(fe),b(uo),b(_o),e&&r(_m),e&&r(ge),b(bo),b(vo),e&&r(bm),e&&r(he),b($o),b(To),e&&r(vm),e&&r(ue),b(yo),b(ko),e&&r($m),e&&r(_e),b(xo),b(Lo),e&&r(Tm),e&&r(be),b(Eo),b(Po),e&&r(ym),e&&r(ve),b(Fo),b(Do),e&&r(km),e&&r($e),b(So),b(zo),e&&r(xm),e&&r(Te),b(Oo),b(qo),e&&r(wm),e&&r(ye),b(Bo),b(Io),e&&r(Lm),e&&r(ke),b(Ao),b(Co),e&&r(Em),e&&r(xe),b(Wo),b(No),e&&r(Pm),e&&r(we),b(Vo),b(Mo),e&&r(Fm),e&&r(Le),b(Go),b(jo),e&&r(Dm),e&&r(Ee),b(Ho),b(Ro),e&&r(Sm),e&&r(Pe),b(Ko),b(Uo),e&&r(zm),e&&r(Fe),b(Yo),b(Xo),e&&r(Om),e&&r(it),b(Jo),e&&r(qm),e&&r(Nt),e&&r(Bm),e&&r(De),b(Qo),b(Zo),e&&r(Im),e&&r(ct),b(en),b(tn),e&&r(Am),e&&r(Se),b(rn),b(nn),e&&r(Cm),e&&r(ze),b(sn),b(cn),e&&r(Wm),e&&r(lt),b(ln),e&&r(Nm),e&&r(Mt),e&&r(Vm),e&&r($),b(dn),b(Gt),b(mn),b(pn),b(fn),b(gn),b(un),b(_n),b(bn),e&&r(Mm),e&&r(dt),b($n),e&&r(Gm),e&&r(mt),b(Tn),e&&r(jm),e&&r(C),b(kn),b(xn),b(wn),e&&r(Hm),e&&r(ft),b(Ln),e&&r(Rm),e&&r(W),b(En),b(Pn),b(Fn),e&&r(Km),e&&r(P),b(Dn),b(qn),b(Bn),e&&r(Um),e&&r(N),b(In),b(An),b(Cn),e&&r(Ym),e&&r(ht),b(Wn),e&&r(Xm),e&&r(qe),b(Nn),e&&r(Jm),e&&r(Be),b(Mn)}}}const yk={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function kk(bd){return _k(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fk extends fk{constructor(w){super();gk(this,w,kk,Tk,hk,{})}}export{Fk as default,yk as metadata};
