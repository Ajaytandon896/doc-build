import{S as xk,i as wk,s as Lk,e as o,k as c,w as f,t as a,M as Ek,c as n,d as r,m as l,a as s,x as g,h as i,b as d,G as t,g as p,y as u,q as h,o as _,B as b,v as Pk,L as Fk}from"../../chunks/vendor-hf-doc-builder.js";import{D as v}from"../../chunks/Docstring-hf-doc-builder.js";import{C as n1}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ae}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Dk}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Sk(kd){let w,Re;return w=new n1({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),{c(){f(w.$$.fragment)},l(k){g(w.$$.fragment,k)},m(k,Ce){u(w,k,Ce),Re=!0},p:Fk,i(k){Re||(h(w.$$.fragment,k),Re=!0)},o(k){_(w.$$.fragment,k),Re=!1},d(k){b(w,k)}}}function zk(kd){let w,Re,k,Ce,pc,ar,Xp,fc,Jp,xd,y,Qp,Un,Zp,ef,Yn,tf,rf,Xn,of,nf,Jn,sf,af,Qn,cf,lf,Zn,df,mf,es,pf,ff,wd,ts,gf,Ld,Ke,_t,gc,ir,uf,uc,hf,Ed,V,_f,rs,bf,vf,os,$f,Tf,ns,yf,kf,Pd,ss,xf,Fd,cr,Dd,We,wf,hc,Lf,Ef,as,Pf,Ff,Sd,M,is,_c,Df,Sf,zf,cs,bc,Of,qf,Bf,ls,vc,If,Af,Cf,ds,$c,Wf,Nf,zd,x,Vf,Tc,Mf,Gf,yc,jf,Hf,kc,Rf,Kf,xc,Uf,Yf,wc,Xf,Jf,Lc,Qf,Zf,Od,S,eg,Ec,tg,rg,Pc,og,ng,Fc,sg,ag,Dc,ig,cg,qd,z,lg,Sc,dg,mg,zc,pg,fg,Oc,gg,ug,qc,hg,_g,Bd,lr,Id,bt,bg,Bc,vg,$g,Ad,O,Tg,Ic,yg,kg,Ac,xg,wg,Cc,Lg,Eg,Wc,Pg,Fg,Cd,ms,Dg,Wd,Ue,vt,Nc,dr,Sg,Vc,zg,Nd,Ye,mr,Og,Mc,qg,Vd,Xe,pr,Bg,Gc,Ig,Md,R,fr,Ag,jc,Cg,Wg,$t,gr,Ng,Hc,Vg,Gd,Je,Tt,Rc,ur,Mg,Kc,Gg,jd,Qe,hr,jg,Uc,Hg,Hd,Ze,_r,Rg,Yc,Kg,Rd,K,br,Ug,Xc,Yg,Xg,yt,vr,Jg,Jc,Qg,Kd,et,kt,Qc,$r,Zg,Zc,eu,Ud,tt,Tr,tu,el,ru,Yd,rt,yr,ou,tl,nu,Xd,ot,xt,rl,kr,su,ol,au,Jd,nt,xr,iu,nl,cu,Qd,st,wr,lu,sl,du,Zd,at,wt,al,Lr,mu,il,pu,em,Lt,fu,ps,gu,uu,tm,U,Er,hu,cl,_u,bu,Et,Pr,vu,ll,$u,rm,Y,Fr,Tu,L,yu,fs,ku,xu,gs,wu,Lu,dl,Eu,Pu,ml,pl,Fu,Du,us,Su,zu,hs,Ou,qu,Bu,_s,Dr,om,X,Sr,Iu,fl,Au,Cu,Pt,zr,Wu,gl,Nu,nm,J,Or,Vu,bs,vs,Mu,Gu,ju,$s,qr,sm,Q,Br,Hu,Ts,ys,Ru,Ku,Uu,ks,Ir,am,Z,Ar,Yu,xs,ws,Xu,Ju,Qu,Ls,Cr,im,ee,Wr,Zu,Es,Ps,eh,th,rh,Fs,Nr,cm,te,Vr,oh,Ds,Ss,nh,sh,ah,zs,Mr,lm,re,Gr,ih,Ft,Os,ch,lh,jr,dh,mh,ph,qs,Hr,dm,oe,Rr,fh,Dt,Bs,gh,uh,Kr,hh,_h,bh,Is,Ur,mm,ne,Yr,vh,As,Cs,$h,Th,yh,Ws,Xr,pm,se,Jr,kh,St,Ns,xh,wh,Qr,Lh,Eh,Ph,Vs,Zr,fm,ae,eo,Fh,Ne,Ms,Dh,Sh,Gs,zh,Oh,to,qh,Bh,Ih,js,ro,gm,ie,oo,Ah,Hs,Rs,Ch,Wh,Nh,Ks,no,um,ce,so,Vh,zt,Us,Mh,Gh,ul,jh,Hh,Rh,Ys,ao,hm,le,io,Kh,G,Xs,Uh,Yh,hl,Xh,Jh,_l,Qh,Zh,bl,e_,t_,r_,Js,co,_m,de,lo,o_,vl,n_,s_,Ot,mo,a_,$l,i_,bm,me,po,c_,A,l_,Qs,d_,m_,Tl,p_,f_,yl,kl,g_,u_,Zs,h_,__,b_,ea,fo,vm,pe,go,v_,xl,$_,T_,qt,uo,y_,wl,k_,$m,fe,ho,x_,ta,ra,w_,L_,E_,oa,_o,Tm,ge,bo,P_,na,sa,F_,D_,S_,aa,vo,ym,ue,$o,z_,ia,ca,O_,q_,B_,la,To,km,he,yo,I_,da,ma,A_,C_,W_,pa,ko,xm,_e,xo,N_,fa,ga,V_,M_,G_,ua,wo,wm,be,Lo,j_,Bt,ha,H_,R_,Eo,K_,U_,Y_,_a,Po,Lm,ve,Fo,X_,ba,va,J_,Q_,Z_,$a,Do,Em,$e,So,eb,Ta,ya,tb,rb,ob,ka,zo,Pm,Te,Oo,nb,It,xa,sb,ab,Ll,ib,cb,lb,wa,qo,Fm,ye,Bo,db,El,mb,pb,At,Io,fb,Pl,gb,Dm,ke,Ao,ub,E,hb,La,_b,bb,Ea,vb,$b,Fl,Tb,yb,Dl,Sl,kb,xb,Pa,wb,Lb,Fa,Eb,Pb,Fb,Da,Co,Sm,xe,Wo,Db,zl,Sb,zb,Ct,No,Ob,Ol,qb,zm,we,Vo,Bb,Sa,za,Ib,Ab,Cb,Oa,Mo,Om,Le,Go,Wb,qa,Ba,Nb,Vb,Mb,Ia,jo,qm,Ee,Ho,Gb,Aa,Ca,jb,Hb,Rb,Wa,Ro,Bm,Pe,Ko,Kb,Na,Va,Ub,Yb,Xb,Ma,Uo,Im,Fe,Yo,Jb,Wt,Ga,Qb,Zb,ql,ev,tv,rv,ja,Xo,Am,De,Jo,ov,Ha,Ra,nv,sv,av,Ka,Qo,Cm,it,Nt,Bl,Zo,iv,Il,cv,Wm,Vt,lv,Ua,dv,mv,Nm,Se,en,pv,Al,fv,gv,Ya,tn,Vm,ct,rn,uv,Xa,on,Mm,ze,nn,hv,sn,_v,Cl,bv,vv,$v,Ja,an,Gm,Oe,cn,Tv,ln,yv,Wl,kv,xv,wv,Qa,dn,jm,lt,Mt,Nl,mn,Lv,Vl,Ev,Hm,Gt,Pv,Za,Fv,Dv,Rm,$,pn,Sv,Ml,zv,Ov,Gl,qv,Bv,jt,Iv,jl,Av,Cv,Ht,fn,Wv,Hl,Nv,Vv,Rt,gn,Mv,Rl,Gv,jv,Kt,un,Hv,Kl,Rv,Kv,Ut,hn,Uv,_n,Yv,Ul,Xv,Jv,Qv,Yt,bn,Zv,Yl,e$,t$,Xt,vn,r$,Xl,o$,n$,Ve,$n,s$,Tn,a$,Jl,i$,c$,l$,Ql,d$,Km,dt,yn,m$,ei,ti,p$,f$,Um,mt,kn,g$,xn,u$,ri,h$,_$,Ym,C,wn,b$,Zl,v$,$$,F,Ln,T$,ed,y$,k$,pt,x$,td,w$,L$,rd,E$,P$,F$,od,nd,D$,S$,qe,z$,sd,O$,q$,ad,B$,I$,id,A$,C$,W$,cd,N$,V$,Jt,En,M$,ld,G$,Xm,ft,Qt,dd,Pn,j$,md,H$,Jm,W,Fn,R$,gt,K$,oi,U$,Y$,ni,X$,J$,Q$,si,Dn,Z$,ai,Sn,Qm,P,zn,eT,ii,ci,tT,rT,oT,On,nT,qn,sT,aT,iT,li,cT,Bn,lT,dT,di,In,mT,mi,An,Zm,N,Cn,pT,pi,fi,fT,gT,uT,gi,Wn,hT,ui,Nn,ep,ut,Zt,pd,Vn,_T,fd,bT,tp,Be,Mn,vT,gd,$T,TT,hi,yT,Gn,kT,rp,Ie,jn,xT,ud,wT,LT,_i,ET,Hn,PT,op;return ar=new Ae({}),ir=new Ae({}),cr=new n1({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),lr=new n1({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),dr=new Ae({}),mr=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L72"}}),pr=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L100"}}),fr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L51"}}),gr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),ur=new Ae({}),hr=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L142"}}),_r=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for
each generated token), with each tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L171"}}),br=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L65"}}),vr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L108"}}),$r=new Ae({}),Tr=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L214"}}),yr=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L249"}}),kr=new Ae({}),xr=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>.`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, input_ids.shape[-1])</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L300"}}),wr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
Tuple of <code>torch.FloatTensor</code> with up to <code>max_new_tokens</code> elements (one element for each generated token),
with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>torch.LongTensor</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>torch.LongTensor</code> of shape
<code>(batch_size*num_return_sequences, max_length-1)</code>.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L335"}}),Lr=new Ae({}),Er=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L51"}}),Pr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Fr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L73"}}),Dr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Sr=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L62"}}),zr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Or=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L96"}}),qr=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L117"}}),Br=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L124"}}),Ir=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L139"}}),Ar=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L144"}}),Cr=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L160"}}),Wr=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L170"}}),Nr=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L193"}}),Vr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L209"}}),Mr=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L230"}}),Gr=new v({props:{name:"class transformers.TypicalLogitsWarper",anchor:"transformers.TypicalLogitsWarper",parameters:[{name:"mass",val:": float = 0.9"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TypicalLogitsWarper.mass",description:`<strong>mass</strong> (<code>float</code>) &#x2014;
Value of typical_p between 0 and 1 inclusive, defaults to 0.9.`,name:"mass"},{anchor:"transformers.TypicalLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TypicalLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L238"}}),Hr=new v({props:{name:"__call__",anchor:"transformers.TypicalLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L261"}}),Rr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L322"}}),Ur=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L337"}}),Yr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L389"}}),Xr=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L431"}}),Jr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L517"}}),Zr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L534"}}),eo=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L543"}}),ro=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L574"}}),oo=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L603"}}),no=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L615"}}),so=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L624"}}),ao=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L639"}}),io=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L648"}}),co=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L655"}}),lo=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L53"}}),mo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessor.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L56",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),po=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L75"}}),fo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsProcessorList.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L82",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),go=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L64"}}),uo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search.`,name:"scores"},{anchor:"transformers.TFLogitsWarper.__call__.cur_len",description:`<strong>cur_len</strong> (<code>int</code>) &#x2014;
The current length of valid input sequence tokens. In the TF implementation, the input_ids&#x2019; sequence length
is the maximum length generate can produce, and we need to know which of its tokens are valid.
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"cur_len"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L67",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ho=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L98"}}),_o=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L113"}}),bo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L147"}}),vo=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L169"}}),$o=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L118"}}),To=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L139"}}),yo=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L201"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L227"}}),xo=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L287"}}),wo=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L364"}}),Lo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L385"}}),Po=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L424"}}),Fo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L237"}}),Do=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L279"}}),So=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L446"}}),zo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L460"}}),Oo=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L476"}}),qo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L493"}}),Bo=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L50"}}),Io=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Ao=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L72"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Wo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L61"}}),No=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Vo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L95"}}),Mo=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L110"}}),Go=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the smallest set of most probable tokens with probabilities that add up to <code>top_p</code> or
higher are kept for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L115"}}),jo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L137"}}),Ho=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L157"}}),Ro=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L178"}}),Ko=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L193"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L205"}}),Yo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L215"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L230"}}),Jo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L240"}}),Qo=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L261"}}),Zo=new Ae({}),en=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L33"}}),tn=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),rn=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L110"}}),on=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),nn=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L41"}}),an=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),cn=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L88"}}),dn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),mn=new Ae({}),pn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L5"}}),jt=new Dk({props:{anchor:"transformers.Constraint.example",$$slots:{default:[Sk]},$$scope:{ctx:kd}}}),fn=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),gn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),un=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L60"}}),hn=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L104"}}),bn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L94"}}),vn=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L24"}}),$n=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),yn=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L129"}}),kn=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L261"}}),wn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L350"}}),Ln=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L382"}}),En=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L417"}}),Pn=new Ae({}),Fn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L88"}}),Dn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Sn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),zn=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L120"}}),In=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L208"}}),An=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"},{name:"beam_indices",val:": typing.Optional[torch.LongTensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L302"}}),Cn=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length that is used with beam-based generation. It is applied as an exponent to
the sequence length, which in turn is used to divide the score of the sequence. Since the score is the log
likelihood of the sequence (i.e. negative), <code>length_penalty</code> &gt; 0.0 promotes longer sequences, while
<code>length_penalty</code> &lt; 0.0 encourages shorter sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>~transformer.BeamSearchScorer.finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L390"}}),Wn=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L486",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),Nn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L768"}}),Vn=new Ae({}),Mn=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L3427"}}),jn=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_utils.py#L3268"}}),{c(){w=o("meta"),Re=c(),k=o("h1"),Ce=o("a"),pc=o("span"),f(ar.$$.fragment),Xp=c(),fc=o("span"),Jp=a("Utilities for Generation"),xd=c(),y=o("p"),Qp=a("This page lists all the utility functions used by "),Un=o("a"),Zp=a("generate()"),ef=a(`,
`),Yn=o("a"),tf=a("greedy_search()"),rf=a(`,
`),Xn=o("a"),of=a("sample()"),nf=a(`,
`),Jn=o("a"),sf=a("beam_search()"),af=a(`,
`),Qn=o("a"),cf=a("beam_sample()"),lf=a(`,
`),Zn=o("a"),df=a("group_beam_search()"),mf=a(`, and
`),es=o("a"),pf=a("constrained_beam_search()"),ff=a("."),wd=c(),ts=o("p"),gf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Ld=c(),Ke=o("h2"),_t=o("a"),gc=o("span"),f(ir.$$.fragment),uf=c(),uc=o("span"),hf=a("Generate Outputs"),Ed=c(),V=o("p"),_f=a("The output of "),rs=o("a"),bf=a("generate()"),vf=a(` is an instance of a subclass of
`),os=o("a"),$f=a("ModelOutput"),Tf=a(`. This output is a data structure containing all the information returned
by `),ns=o("a"),yf=a("generate()"),kf=a(", but that can also be used as tuple or dictionary."),Pd=c(),ss=o("p"),xf=a("Here\u2019s an example:"),Fd=c(),f(cr.$$.fragment),Dd=c(),We=o("p"),wf=a("The "),hc=o("code"),Lf=a("generation_output"),Ef=a(" object is a "),as=o("a"),Pf=a("GreedySearchDecoderOnlyOutput"),Ff=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Sd=c(),M=o("ul"),is=o("li"),_c=o("code"),Df=a("sequences"),Sf=a(": the generated sequences of tokens"),zf=c(),cs=o("li"),bc=o("code"),Of=a("scores"),qf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),Bf=c(),ls=o("li"),vc=o("code"),If=a("hidden_states"),Af=a(" (optional): the hidden states of the model, for each generation step"),Cf=c(),ds=o("li"),$c=o("code"),Wf=a("attentions"),Nf=a(" (optional): the attention weights of the model, for each generation step"),zd=c(),x=o("p"),Vf=a("Here we have the "),Tc=o("code"),Mf=a("scores"),Gf=a(" since we passed along "),yc=o("code"),jf=a("output_scores=True"),Hf=a(", but we don\u2019t have "),kc=o("code"),Rf=a("hidden_states"),Kf=a(` and
`),xc=o("code"),Uf=a("attentions"),Yf=a(" because we didn\u2019t pass "),wc=o("code"),Xf=a("output_hidden_states=True"),Jf=a(" or "),Lc=o("code"),Qf=a("output_attentions=True"),Zf=a("."),Od=c(),S=o("p"),eg=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ec=o("code"),tg=a("None"),rg=a(". Here for instance "),Pc=o("code"),og=a("generation_output.scores"),ng=a(` are all the generated prediction scores of the
language modeling head, and `),Fc=o("code"),sg=a("generation_output.attentions"),ag=a(" is "),Dc=o("code"),ig=a("None"),cg=a("."),qd=c(),z=o("p"),lg=a("When using our "),Sc=o("code"),dg=a("generation_output"),mg=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),zc=o("code"),pg=a("None"),fg=a(` values.
Here, for instance, it has two elements, `),Oc=o("code"),gg=a("loss"),ug=a(" then "),qc=o("code"),hg=a("logits"),_g=a(", so"),Bd=c(),f(lr.$$.fragment),Id=c(),bt=o("p"),bg=a("will return the tuple "),Bc=o("code"),vg=a("(generation_output.sequences, generation_output.scores)"),$g=a(" for instance."),Ad=c(),O=o("p"),Tg=a("When using our "),Ic=o("code"),yg=a("generation_output"),kg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Ac=o("code"),xg=a("None"),wg=a(`
values. Here, for instance, it has two keys that are `),Cc=o("code"),Lg=a("sequences"),Eg=a(" and "),Wc=o("code"),Pg=a("scores"),Fg=a("."),Cd=c(),ms=o("p"),Dg=a("We document here all output types."),Wd=c(),Ue=o("h3"),vt=o("a"),Nc=o("span"),f(dr.$$.fragment),Sg=c(),Vc=o("span"),zg=a("GreedySearchOutput"),Nd=c(),Ye=o("div"),f(mr.$$.fragment),Og=c(),Mc=o("p"),qg=a("Base class for outputs of decoder-only generation models using greedy search."),Vd=c(),Xe=o("div"),f(pr.$$.fragment),Bg=c(),Gc=o("p"),Ig=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Md=c(),R=o("div"),f(fr.$$.fragment),Ag=c(),jc=o("p"),Cg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Wg=c(),$t=o("div"),f(gr.$$.fragment),Ng=c(),Hc=o("p"),Vg=a("\u201CReturns a new object replacing the specified fields with new values."),Gd=c(),Je=o("h3"),Tt=o("a"),Rc=o("span"),f(ur.$$.fragment),Mg=c(),Kc=o("span"),Gg=a("SampleOutput"),jd=c(),Qe=o("div"),f(hr.$$.fragment),jg=c(),Uc=o("p"),Hg=a("Base class for outputs of decoder-only generation models using sampling."),Hd=c(),Ze=o("div"),f(_r.$$.fragment),Rg=c(),Yc=o("p"),Kg=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Rd=c(),K=o("div"),f(br.$$.fragment),Ug=c(),Xc=o("p"),Yg=a("Flax Base class for outputs of decoder-only generation models using sampling."),Xg=c(),yt=o("div"),f(vr.$$.fragment),Jg=c(),Jc=o("p"),Qg=a("\u201CReturns a new object replacing the specified fields with new values."),Kd=c(),et=o("h3"),kt=o("a"),Qc=o("span"),f($r.$$.fragment),Zg=c(),Zc=o("span"),eu=a("BeamSearchOutput"),Ud=c(),tt=o("div"),f(Tr.$$.fragment),tu=c(),el=o("p"),ru=a("Base class for outputs of decoder-only generation models using beam search."),Yd=c(),rt=o("div"),f(yr.$$.fragment),ou=c(),tl=o("p"),nu=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Xd=c(),ot=o("h3"),xt=o("a"),rl=o("span"),f(kr.$$.fragment),su=c(),ol=o("span"),au=a("BeamSampleOutput"),Jd=c(),nt=o("div"),f(xr.$$.fragment),iu=c(),nl=o("p"),cu=a("Base class for outputs of decoder-only generation models using beam sample."),Qd=c(),st=o("div"),f(wr.$$.fragment),lu=c(),sl=o("p"),du=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Zd=c(),at=o("h2"),wt=o("a"),al=o("span"),f(Lr.$$.fragment),mu=c(),il=o("span"),pu=a("LogitsProcessor"),em=c(),Lt=o("p"),fu=a("A "),ps=o("a"),gu=a("LogitsProcessor"),uu=a(` can be used to modify the prediction scores of a language model head for
generation.`),tm=c(),U=o("div"),f(Er.$$.fragment),hu=c(),cl=o("p"),_u=a("Abstract base class for all logit processors that can be applied during generation."),bu=c(),Et=o("div"),f(Pr.$$.fragment),vu=c(),ll=o("p"),$u=a("Torch method for processing logits."),rm=c(),Y=o("div"),f(Fr.$$.fragment),Tu=c(),L=o("p"),yu=a("This class can be used to create a list of "),fs=o("a"),ku=a("LogitsProcessor"),xu=a(" or "),gs=o("a"),wu=a("LogitsWarper"),Lu=a(` to subsequently process a
`),dl=o("code"),Eu=a("scores"),Pu=a(" input tensor. This class inherits from list and adds a specific "),ml=o("em"),pl=o("strong"),Fu=a("call"),Du=a(` method to apply each
`),us=o("a"),Su=a("LogitsProcessor"),zu=a(" or "),hs=o("a"),Ou=a("LogitsWarper"),qu=a(" to the inputs."),Bu=c(),_s=o("div"),f(Dr.$$.fragment),om=c(),X=o("div"),f(Sr.$$.fragment),Iu=c(),fl=o("p"),Au=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Cu=c(),Pt=o("div"),f(zr.$$.fragment),Wu=c(),gl=o("p"),Nu=a("Torch method for warping logits."),nm=c(),J=o("div"),f(Or.$$.fragment),Vu=c(),bs=o("p"),vs=o("a"),Mu=a("LogitsProcessor"),Gu=a(" enforcing a min-length by setting EOS probability to 0."),ju=c(),$s=o("div"),f(qr.$$.fragment),sm=c(),Q=o("div"),f(Br.$$.fragment),Hu=c(),Ts=o("p"),ys=o("a"),Ru=a("LogitsWarper"),Ku=a(" for temperature (exponential scaling output probability distribution)."),Uu=c(),ks=o("div"),f(Ir.$$.fragment),am=c(),Z=o("div"),f(Ar.$$.fragment),Yu=c(),xs=o("p"),ws=o("a"),Xu=a("LogitsProcessor"),Ju=a(" enforcing an exponential penalty on repeated sequences."),Qu=c(),Ls=o("div"),f(Cr.$$.fragment),im=c(),ee=o("div"),f(Wr.$$.fragment),Zu=c(),Es=o("p"),Ps=o("a"),eh=a("LogitsWarper"),th=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),rh=c(),Fs=o("div"),f(Nr.$$.fragment),cm=c(),te=o("div"),f(Vr.$$.fragment),oh=c(),Ds=o("p"),Ss=o("a"),nh=a("LogitsWarper"),sh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),ah=c(),zs=o("div"),f(Mr.$$.fragment),lm=c(),re=o("div"),f(Gr.$$.fragment),ih=c(),Ft=o("p"),Os=o("a"),ch=a("LogitsWarper"),lh=a(" that performs typical decoding. See "),jr=o("a"),dh=a(`Typical Decoding for Natural Language
Generation`),mh=a(" for more information."),ph=c(),qs=o("div"),f(Hr.$$.fragment),dm=c(),oe=o("div"),f(Rr.$$.fragment),fh=c(),Dt=o("p"),Bs=o("a"),gh=a("LogitsProcessor"),uh=a(` that enforces no repetition of n-grams. See
`),Kr=o("a"),hh=a("Fairseq"),_h=a("."),bh=c(),Is=o("div"),f(Ur.$$.fragment),mm=c(),ne=o("div"),f(Yr.$$.fragment),vh=c(),As=o("p"),Cs=o("a"),$h=a("LogitsProcessor"),Th=a(" that enforces that specified sequences will never be sampled."),yh=c(),Ws=o("div"),f(Xr.$$.fragment),pm=c(),se=o("div"),f(Jr.$$.fragment),kh=c(),St=o("p"),Ns=o("a"),xh=a("LogitsProcessor"),wh=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=o("a"),Lh=a("Autoregressive Entity Retrieval"),Eh=a(" for more information."),Ph=c(),Vs=o("div"),f(Zr.$$.fragment),fm=c(),ae=o("div"),f(eo.$$.fragment),Fh=c(),Ne=o("p"),Ms=o("a"),Dh=a("LogitsProcessor"),Sh=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Gs=o("a"),zh=a("PreTrainedModel.group_beam_search()"),Oh=a(". See "),to=o("a"),qh=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),Bh=a(" for more details."),Ih=c(),js=o("div"),f(ro.$$.fragment),gm=c(),ie=o("div"),f(oo.$$.fragment),Ah=c(),Hs=o("p"),Rs=o("a"),Ch=a("LogitsProcessor"),Wh=a(" that enforces the specified token as the first generated token."),Nh=c(),Ks=o("div"),f(no.$$.fragment),um=c(),ce=o("div"),f(so.$$.fragment),Vh=c(),zt=o("p"),Us=o("a"),Mh=a("LogitsProcessor"),Gh=a(" that enforces the specified token as the last generated token when "),ul=o("code"),jh=a("max_length"),Hh=a(" is reached."),Rh=c(),Ys=o("div"),f(ao.$$.fragment),hm=c(),le=o("div"),f(io.$$.fragment),Kh=c(),G=o("p"),Xs=o("a"),Uh=a("LogitsProcessor"),Yh=a(" that removes all "),hl=o("code"),Xh=a("nan"),Jh=a(" and "),_l=o("code"),Qh=a("inf"),Zh=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),bl=o("code"),e_=a("max_length"),t_=a(` is
reached.`),r_=c(),Js=o("div"),f(co.$$.fragment),_m=c(),de=o("div"),f(lo.$$.fragment),o_=c(),vl=o("p"),n_=a("Abstract base class for all logit processors that can be applied during generation."),s_=c(),Ot=o("div"),f(mo.$$.fragment),a_=c(),$l=o("p"),i_=a("TF method for processing logits."),bm=c(),me=o("div"),f(po.$$.fragment),c_=c(),A=o("p"),l_=a("This class can be used to create a list of "),Qs=o("a"),d_=a("TFLogitsProcessor"),m_=a(" to subsequently process a "),Tl=o("code"),p_=a("scores"),f_=a(` input tensor.
This class inherits from list and adds a specific `),yl=o("em"),kl=o("strong"),g_=a("call"),u_=a(" method to apply each "),Zs=o("a"),h_=a("TFLogitsProcessor"),__=a(` to the
inputs.`),b_=c(),ea=o("div"),f(fo.$$.fragment),vm=c(),pe=o("div"),f(go.$$.fragment),v_=c(),xl=o("p"),$_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),T_=c(),qt=o("div"),f(uo.$$.fragment),y_=c(),wl=o("p"),k_=a("TF method for warping logits."),$m=c(),fe=o("div"),f(ho.$$.fragment),x_=c(),ta=o("p"),ra=o("a"),w_=a("TFLogitsWarper"),L_=a(" for temperature (exponential scaling output probability distribution)."),E_=c(),oa=o("div"),f(_o.$$.fragment),Tm=c(),ge=o("div"),f(bo.$$.fragment),P_=c(),na=o("p"),sa=o("a"),F_=a("TFLogitsWarper"),D_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),S_=c(),aa=o("div"),f(vo.$$.fragment),ym=c(),ue=o("div"),f($o.$$.fragment),z_=c(),ia=o("p"),ca=o("a"),O_=a("TFLogitsWarper"),q_=a(" that performs top-k, i.e. restricting to the k highest probability elements."),B_=c(),la=o("div"),f(To.$$.fragment),km=c(),he=o("div"),f(yo.$$.fragment),I_=c(),da=o("p"),ma=o("a"),A_=a("TFLogitsProcessor"),C_=a(" enforcing a min-length by setting EOS probability to 0."),W_=c(),pa=o("div"),f(ko.$$.fragment),xm=c(),_e=o("div"),f(xo.$$.fragment),N_=c(),fa=o("p"),ga=o("a"),V_=a("TFLogitsProcessor"),M_=a(" that enforces that specified sequences will never be sampled."),G_=c(),ua=o("div"),f(wo.$$.fragment),wm=c(),be=o("div"),f(Lo.$$.fragment),j_=c(),Bt=o("p"),ha=o("a"),H_=a("TFLogitsProcessor"),R_=a(` that enforces no repetition of n-grams. See
`),Eo=o("a"),K_=a("Fairseq"),U_=a("."),Y_=c(),_a=o("div"),f(Po.$$.fragment),Lm=c(),ve=o("div"),f(Fo.$$.fragment),X_=c(),ba=o("p"),va=o("a"),J_=a("TFLogitsProcessor"),Q_=a(" enforcing an exponential penalty on repeated sequences."),Z_=c(),$a=o("div"),f(Do.$$.fragment),Em=c(),$e=o("div"),f(So.$$.fragment),eb=c(),Ta=o("p"),ya=o("a"),tb=a("TFLogitsProcessor"),rb=a(" that enforces the specified token as the first generated token."),ob=c(),ka=o("div"),f(zo.$$.fragment),Pm=c(),Te=o("div"),f(Oo.$$.fragment),nb=c(),It=o("p"),xa=o("a"),sb=a("TFLogitsProcessor"),ab=a(" that enforces the specified token as the last generated token when "),Ll=o("code"),ib=a("max_length"),cb=a(" is reached."),lb=c(),wa=o("div"),f(qo.$$.fragment),Fm=c(),ye=o("div"),f(Bo.$$.fragment),db=c(),El=o("p"),mb=a("Abstract base class for all logit processors that can be applied during generation."),pb=c(),At=o("div"),f(Io.$$.fragment),fb=c(),Pl=o("p"),gb=a("Flax method for processing logits."),Dm=c(),ke=o("div"),f(Ao.$$.fragment),ub=c(),E=o("p"),hb=a("This class can be used to create a list of "),La=o("a"),_b=a("FlaxLogitsProcessor"),bb=a(" or "),Ea=o("a"),vb=a("FlaxLogitsWarper"),$b=a(` to subsequently process
a `),Fl=o("code"),Tb=a("scores"),yb=a(" input tensor. This class inherits from list and adds a specific "),Dl=o("em"),Sl=o("strong"),kb=a("call"),xb=a(` method to apply each
`),Pa=o("a"),wb=a("FlaxLogitsProcessor"),Lb=a(" or "),Fa=o("a"),Eb=a("FlaxLogitsWarper"),Pb=a(" to the inputs."),Fb=c(),Da=o("div"),f(Co.$$.fragment),Sm=c(),xe=o("div"),f(Wo.$$.fragment),Db=c(),zl=o("p"),Sb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),zb=c(),Ct=o("div"),f(No.$$.fragment),Ob=c(),Ol=o("p"),qb=a("Flax method for warping logits."),zm=c(),we=o("div"),f(Vo.$$.fragment),Bb=c(),Sa=o("p"),za=o("a"),Ib=a("FlaxLogitsWarper"),Ab=a(" for temperature (exponential scaling output probability distribution)."),Cb=c(),Oa=o("div"),f(Mo.$$.fragment),Om=c(),Le=o("div"),f(Go.$$.fragment),Wb=c(),qa=o("p"),Ba=o("a"),Nb=a("FlaxLogitsWarper"),Vb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Mb=c(),Ia=o("div"),f(jo.$$.fragment),qm=c(),Ee=o("div"),f(Ho.$$.fragment),Gb=c(),Aa=o("p"),Ca=o("a"),jb=a("FlaxLogitsWarper"),Hb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Rb=c(),Wa=o("div"),f(Ro.$$.fragment),Bm=c(),Pe=o("div"),f(Ko.$$.fragment),Kb=c(),Na=o("p"),Va=o("a"),Ub=a("FlaxLogitsProcessor"),Yb=a(" that enforces the specified token as the first generated token."),Xb=c(),Ma=o("div"),f(Uo.$$.fragment),Im=c(),Fe=o("div"),f(Yo.$$.fragment),Jb=c(),Wt=o("p"),Ga=o("a"),Qb=a("FlaxLogitsProcessor"),Zb=a(" that enforces the specified token as the last generated token when "),ql=o("code"),ev=a("max_length"),tv=a(" is reached."),rv=c(),ja=o("div"),f(Xo.$$.fragment),Am=c(),De=o("div"),f(Jo.$$.fragment),ov=c(),Ha=o("p"),Ra=o("a"),nv=a("FlaxLogitsProcessor"),sv=a(" enforcing a min-length by setting EOS probability to 0."),av=c(),Ka=o("div"),f(Qo.$$.fragment),Cm=c(),it=o("h2"),Nt=o("a"),Bl=o("span"),f(Zo.$$.fragment),iv=c(),Il=o("span"),cv=a("StoppingCriteria"),Wm=c(),Vt=o("p"),lv=a("A "),Ua=o("a"),dv=a("StoppingCriteria"),mv=a(" can be used to change when to stop generation (other than EOS token)."),Nm=c(),Se=o("div"),f(en.$$.fragment),pv=c(),Al=o("p"),fv=a("Abstract base class for all stopping criteria that can be applied during generation."),gv=c(),Ya=o("div"),f(tn.$$.fragment),Vm=c(),ct=o("div"),f(rn.$$.fragment),uv=c(),Xa=o("div"),f(on.$$.fragment),Mm=c(),ze=o("div"),f(nn.$$.fragment),hv=c(),sn=o("p"),_v=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Cl=o("code"),bv=a("max_length"),vv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),$v=c(),Ja=o("div"),f(an.$$.fragment),Gm=c(),Oe=o("div"),f(cn.$$.fragment),Tv=c(),ln=o("p"),yv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Wl=o("code"),kv=a("initial_time"),xv=a("."),wv=c(),Qa=o("div"),f(dn.$$.fragment),jm=c(),lt=o("h2"),Mt=o("a"),Nl=o("span"),f(mn.$$.fragment),Lv=c(),Vl=o("span"),Ev=a("Constraints"),Hm=c(),Gt=o("p"),Pv=a("A "),Za=o("a"),Fv=a("Constraint"),Dv=a(" can be used to force the generation to include specific tokens or sequences in the output."),Rm=c(),$=o("div"),f(pn.$$.fragment),Sv=c(),Ml=o("p"),zv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Ov=c(),Gl=o("p"),qv=a("All classes that inherit Constraint must follow the requirement that"),Bv=c(),f(jt.$$.fragment),Iv=c(),jl=o("p"),Av=a("will always terminate (halt)."),Cv=c(),Ht=o("div"),f(fn.$$.fragment),Wv=c(),Hl=o("p"),Nv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Vv=c(),Rt=o("div"),f(gn.$$.fragment),Mv=c(),Rl=o("p"),Gv=a("Creates a new instance of this constraint."),jv=c(),Kt=o("div"),f(un.$$.fragment),Hv=c(),Kl=o("p"),Rv=a("Reads in a token and returns whether it creates progress."),Kv=c(),Ut=o("div"),f(hn.$$.fragment),Uv=c(),_n=o("p"),Yv=a("Returns the number of remaining steps of "),Ul=o("code"),Xv=a("advance()"),Jv=a(" in order to complete this constraint."),Qv=c(),Yt=o("div"),f(bn.$$.fragment),Zv=c(),Yl=o("p"),e$=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),t$=c(),Xt=o("div"),f(vn.$$.fragment),r$=c(),Xl=o("p"),o$=a("Tests whether this constraint has been properly defined."),n$=c(),Ve=o("div"),f($n.$$.fragment),s$=c(),Tn=o("p"),a$=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Jl=o("code"),i$=a("does_advance(self, token_id: int)"),c$=a("."),l$=c(),Ql=o("p"),d$=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Km=c(),dt=o("div"),f(yn.$$.fragment),m$=c(),ei=o("p"),ti=o("a"),p$=a("Constraint"),f$=a(" enforcing that an ordered sequence of tokens is included in the output."),Um=c(),mt=o("div"),f(kn.$$.fragment),g$=c(),xn=o("p"),u$=a("A special "),ri=o("a"),h$=a("Constraint"),_$=a(" that is fulfilled by fulfilling just one of several constraints."),Ym=c(),C=o("div"),f(wn.$$.fragment),b$=c(),Zl=o("p"),v$=a("A class for beam scorers to track its progress through a list of constraints."),$$=c(),F=o("div"),f(Ln.$$.fragment),T$=c(),ed=o("p"),y$=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),k$=c(),pt=o("p"),x$=a("Given constraints "),td=o("code"),w$=a("c_i = {t_ij | j == # of tokens}"),L$=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),rd=o("code"),E$=a("c_i"),P$=a(", we return:"),F$=c(),od=o("p"),nd=o("code"),D$=a("[t_k1 for k in indices of unfulfilled constraints]"),S$=c(),qe=o("p"),z$=a(`If we are in the middle of a constraint, then we return:
`),sd=o("code"),O$=a("[t_ij]"),q$=a(", where "),ad=o("code"),B$=a("i"),I$=a(" is the index of the inprogress constraint, "),id=o("code"),A$=a("j"),C$=a(" is the next step for the constraint."),W$=c(),cd=o("p"),N$=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),V$=c(),Jt=o("div"),f(En.$$.fragment),M$=c(),ld=o("p"),G$=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Xm=c(),ft=o("h2"),Qt=o("a"),dd=o("span"),f(Pn.$$.fragment),j$=c(),md=o("span"),H$=a("BeamSearch"),Jm=c(),W=o("div"),f(Fn.$$.fragment),R$=c(),gt=o("p"),K$=a("Abstract base class for all beam scorers that are used for "),oi=o("a"),U$=a("beam_search()"),Y$=a(` and
`),ni=o("a"),X$=a("beam_sample()"),J$=a("."),Q$=c(),si=o("div"),f(Dn.$$.fragment),Z$=c(),ai=o("div"),f(Sn.$$.fragment),Qm=c(),P=o("div"),f(zn.$$.fragment),eT=c(),ii=o("p"),ci=o("a"),tT=a("BeamScorer"),rT=a(" implementing standard beam search decoding."),oT=c(),On=o("p"),nT=a("Adapted in part from "),qn=o("a"),sT=a(`Facebook\u2019s XLM beam search
code`),aT=a("."),iT=c(),li=o("p"),cT=a("Reference for the diverse beam search algorithm and implementation "),Bn=o("a"),lT=a(`Ashwin Kalyan\u2019s DBS
implementation`),dT=c(),di=o("div"),f(In.$$.fragment),mT=c(),mi=o("div"),f(An.$$.fragment),Zm=c(),N=o("div"),f(Cn.$$.fragment),pT=c(),pi=o("p"),fi=o("a"),fT=a("BeamScorer"),gT=a(" implementing constrained beam search decoding."),uT=c(),gi=o("div"),f(Wn.$$.fragment),hT=c(),ui=o("div"),f(Nn.$$.fragment),ep=c(),ut=o("h2"),Zt=o("a"),pd=o("span"),f(Vn.$$.fragment),_T=c(),fd=o("span"),bT=a("Utilities"),tp=c(),Be=o("div"),f(Mn.$$.fragment),vT=c(),gd=o("p"),$T=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),TT=c(),hi=o("p"),yT=a("From: "),Gn=o("a"),kT=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),rp=c(),Ie=o("div"),f(jn.$$.fragment),xT=c(),ud=o("p"),wT=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),LT=c(),_i=o("p"),ET=a("From: "),Hn=o("a"),PT=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const m=Ek('[data-svelte="svelte-1phssyn"]',document.head);w=n(m,"META",{name:!0,content:!0}),m.forEach(r),Re=l(e),k=n(e,"H1",{class:!0});var Rn=s(k);Ce=n(Rn,"A",{id:!0,class:!0,href:!0});var s1=s(Ce);pc=n(s1,"SPAN",{});var a1=s(pc);g(ar.$$.fragment,a1),a1.forEach(r),s1.forEach(r),Xp=l(Rn),fc=n(Rn,"SPAN",{});var i1=s(fc);Jp=i(i1,"Utilities for Generation"),i1.forEach(r),Rn.forEach(r),xd=l(e),y=n(e,"P",{});var D=s(y);Qp=i(D,"This page lists all the utility functions used by "),Un=n(D,"A",{href:!0});var c1=s(Un);Zp=i(c1,"generate()"),c1.forEach(r),ef=i(D,`,
`),Yn=n(D,"A",{href:!0});var l1=s(Yn);tf=i(l1,"greedy_search()"),l1.forEach(r),rf=i(D,`,
`),Xn=n(D,"A",{href:!0});var d1=s(Xn);of=i(d1,"sample()"),d1.forEach(r),nf=i(D,`,
`),Jn=n(D,"A",{href:!0});var m1=s(Jn);sf=i(m1,"beam_search()"),m1.forEach(r),af=i(D,`,
`),Qn=n(D,"A",{href:!0});var p1=s(Qn);cf=i(p1,"beam_sample()"),p1.forEach(r),lf=i(D,`,
`),Zn=n(D,"A",{href:!0});var f1=s(Zn);df=i(f1,"group_beam_search()"),f1.forEach(r),mf=i(D,`, and
`),es=n(D,"A",{href:!0});var g1=s(es);pf=i(g1,"constrained_beam_search()"),g1.forEach(r),ff=i(D,"."),D.forEach(r),wd=l(e),ts=n(e,"P",{});var u1=s(ts);gf=i(u1,"Most of those are only useful if you are studying the code of the generate methods in the library."),u1.forEach(r),Ld=l(e),Ke=n(e,"H2",{class:!0});var np=s(Ke);_t=n(np,"A",{id:!0,class:!0,href:!0});var h1=s(_t);gc=n(h1,"SPAN",{});var _1=s(gc);g(ir.$$.fragment,_1),_1.forEach(r),h1.forEach(r),uf=l(np),uc=n(np,"SPAN",{});var b1=s(uc);hf=i(b1,"Generate Outputs"),b1.forEach(r),np.forEach(r),Ed=l(e),V=n(e,"P",{});var er=s(V);_f=i(er,"The output of "),rs=n(er,"A",{href:!0});var v1=s(rs);bf=i(v1,"generate()"),v1.forEach(r),vf=i(er,` is an instance of a subclass of
`),os=n(er,"A",{href:!0});var $1=s(os);$f=i($1,"ModelOutput"),$1.forEach(r),Tf=i(er,`. This output is a data structure containing all the information returned
by `),ns=n(er,"A",{href:!0});var T1=s(ns);yf=i(T1,"generate()"),T1.forEach(r),kf=i(er,", but that can also be used as tuple or dictionary."),er.forEach(r),Pd=l(e),ss=n(e,"P",{});var y1=s(ss);xf=i(y1,"Here\u2019s an example:"),y1.forEach(r),Fd=l(e),g(cr.$$.fragment,e),Dd=l(e),We=n(e,"P",{});var bi=s(We);wf=i(bi,"The "),hc=n(bi,"CODE",{});var k1=s(hc);Lf=i(k1,"generation_output"),k1.forEach(r),Ef=i(bi," object is a "),as=n(bi,"A",{href:!0});var x1=s(as);Pf=i(x1,"GreedySearchDecoderOnlyOutput"),x1.forEach(r),Ff=i(bi,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),bi.forEach(r),Sd=l(e),M=n(e,"UL",{});var tr=s(M);is=n(tr,"LI",{});var FT=s(is);_c=n(FT,"CODE",{});var w1=s(_c);Df=i(w1,"sequences"),w1.forEach(r),Sf=i(FT,": the generated sequences of tokens"),FT.forEach(r),zf=l(tr),cs=n(tr,"LI",{});var DT=s(cs);bc=n(DT,"CODE",{});var L1=s(bc);Of=i(L1,"scores"),L1.forEach(r),qf=i(DT," (optional): the prediction scores of the language modelling head, for each generation step"),DT.forEach(r),Bf=l(tr),ls=n(tr,"LI",{});var ST=s(ls);vc=n(ST,"CODE",{});var E1=s(vc);If=i(E1,"hidden_states"),E1.forEach(r),Af=i(ST," (optional): the hidden states of the model, for each generation step"),ST.forEach(r),Cf=l(tr),ds=n(tr,"LI",{});var zT=s(ds);$c=n(zT,"CODE",{});var P1=s($c);Wf=i(P1,"attentions"),P1.forEach(r),Nf=i(zT," (optional): the attention weights of the model, for each generation step"),zT.forEach(r),tr.forEach(r),zd=l(e),x=n(e,"P",{});var q=s(x);Vf=i(q,"Here we have the "),Tc=n(q,"CODE",{});var F1=s(Tc);Mf=i(F1,"scores"),F1.forEach(r),Gf=i(q," since we passed along "),yc=n(q,"CODE",{});var D1=s(yc);jf=i(D1,"output_scores=True"),D1.forEach(r),Hf=i(q,", but we don\u2019t have "),kc=n(q,"CODE",{});var S1=s(kc);Rf=i(S1,"hidden_states"),S1.forEach(r),Kf=i(q,` and
`),xc=n(q,"CODE",{});var z1=s(xc);Uf=i(z1,"attentions"),z1.forEach(r),Yf=i(q," because we didn\u2019t pass "),wc=n(q,"CODE",{});var O1=s(wc);Xf=i(O1,"output_hidden_states=True"),O1.forEach(r),Jf=i(q," or "),Lc=n(q,"CODE",{});var q1=s(Lc);Qf=i(q1,"output_attentions=True"),q1.forEach(r),Zf=i(q,"."),q.forEach(r),Od=l(e),S=n(e,"P",{});var Me=s(S);eg=i(Me,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),Ec=n(Me,"CODE",{});var B1=s(Ec);tg=i(B1,"None"),B1.forEach(r),rg=i(Me,". Here for instance "),Pc=n(Me,"CODE",{});var I1=s(Pc);og=i(I1,"generation_output.scores"),I1.forEach(r),ng=i(Me,` are all the generated prediction scores of the
language modeling head, and `),Fc=n(Me,"CODE",{});var A1=s(Fc);sg=i(A1,"generation_output.attentions"),A1.forEach(r),ag=i(Me," is "),Dc=n(Me,"CODE",{});var C1=s(Dc);ig=i(C1,"None"),C1.forEach(r),cg=i(Me,"."),Me.forEach(r),qd=l(e),z=n(e,"P",{});var Ge=s(z);lg=i(Ge,"When using our "),Sc=n(Ge,"CODE",{});var W1=s(Sc);dg=i(W1,"generation_output"),W1.forEach(r),mg=i(Ge," object as a tuple, it only keeps the attributes that don\u2019t have "),zc=n(Ge,"CODE",{});var N1=s(zc);pg=i(N1,"None"),N1.forEach(r),fg=i(Ge,` values.
Here, for instance, it has two elements, `),Oc=n(Ge,"CODE",{});var V1=s(Oc);gg=i(V1,"loss"),V1.forEach(r),ug=i(Ge," then "),qc=n(Ge,"CODE",{});var M1=s(qc);hg=i(M1,"logits"),M1.forEach(r),_g=i(Ge,", so"),Ge.forEach(r),Bd=l(e),g(lr.$$.fragment,e),Id=l(e),bt=n(e,"P",{});var sp=s(bt);bg=i(sp,"will return the tuple "),Bc=n(sp,"CODE",{});var G1=s(Bc);vg=i(G1,"(generation_output.sequences, generation_output.scores)"),G1.forEach(r),$g=i(sp," for instance."),sp.forEach(r),Ad=l(e),O=n(e,"P",{});var je=s(O);Tg=i(je,"When using our "),Ic=n(je,"CODE",{});var j1=s(Ic);yg=i(j1,"generation_output"),j1.forEach(r),kg=i(je," object as a dictionary, it only keeps the attributes that don\u2019t have "),Ac=n(je,"CODE",{});var H1=s(Ac);xg=i(H1,"None"),H1.forEach(r),wg=i(je,`
values. Here, for instance, it has two keys that are `),Cc=n(je,"CODE",{});var R1=s(Cc);Lg=i(R1,"sequences"),R1.forEach(r),Eg=i(je," and "),Wc=n(je,"CODE",{});var K1=s(Wc);Pg=i(K1,"scores"),K1.forEach(r),Fg=i(je,"."),je.forEach(r),Cd=l(e),ms=n(e,"P",{});var U1=s(ms);Dg=i(U1,"We document here all output types."),U1.forEach(r),Wd=l(e),Ue=n(e,"H3",{class:!0});var ap=s(Ue);vt=n(ap,"A",{id:!0,class:!0,href:!0});var Y1=s(vt);Nc=n(Y1,"SPAN",{});var X1=s(Nc);g(dr.$$.fragment,X1),X1.forEach(r),Y1.forEach(r),Sg=l(ap),Vc=n(ap,"SPAN",{});var J1=s(Vc);zg=i(J1,"GreedySearchOutput"),J1.forEach(r),ap.forEach(r),Nd=l(e),Ye=n(e,"DIV",{class:!0});var ip=s(Ye);g(mr.$$.fragment,ip),Og=l(ip),Mc=n(ip,"P",{});var Q1=s(Mc);qg=i(Q1,"Base class for outputs of decoder-only generation models using greedy search."),Q1.forEach(r),ip.forEach(r),Vd=l(e),Xe=n(e,"DIV",{class:!0});var cp=s(Xe);g(pr.$$.fragment,cp),Bg=l(cp),Gc=n(cp,"P",{});var Z1=s(Gc);Ig=i(Z1,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Z1.forEach(r),cp.forEach(r),Md=l(e),R=n(e,"DIV",{class:!0});var vi=s(R);g(fr.$$.fragment,vi),Ag=l(vi),jc=n(vi,"P",{});var e2=s(jc);Cg=i(e2,"Flax Base class for outputs of decoder-only generation models using greedy search."),e2.forEach(r),Wg=l(vi),$t=n(vi,"DIV",{class:!0});var lp=s($t);g(gr.$$.fragment,lp),Ng=l(lp),Hc=n(lp,"P",{});var t2=s(Hc);Vg=i(t2,"\u201CReturns a new object replacing the specified fields with new values."),t2.forEach(r),lp.forEach(r),vi.forEach(r),Gd=l(e),Je=n(e,"H3",{class:!0});var dp=s(Je);Tt=n(dp,"A",{id:!0,class:!0,href:!0});var r2=s(Tt);Rc=n(r2,"SPAN",{});var o2=s(Rc);g(ur.$$.fragment,o2),o2.forEach(r),r2.forEach(r),Mg=l(dp),Kc=n(dp,"SPAN",{});var n2=s(Kc);Gg=i(n2,"SampleOutput"),n2.forEach(r),dp.forEach(r),jd=l(e),Qe=n(e,"DIV",{class:!0});var mp=s(Qe);g(hr.$$.fragment,mp),jg=l(mp),Uc=n(mp,"P",{});var s2=s(Uc);Hg=i(s2,"Base class for outputs of decoder-only generation models using sampling."),s2.forEach(r),mp.forEach(r),Hd=l(e),Ze=n(e,"DIV",{class:!0});var pp=s(Ze);g(_r.$$.fragment,pp),Rg=l(pp),Yc=n(pp,"P",{});var a2=s(Yc);Kg=i(a2,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),a2.forEach(r),pp.forEach(r),Rd=l(e),K=n(e,"DIV",{class:!0});var $i=s(K);g(br.$$.fragment,$i),Ug=l($i),Xc=n($i,"P",{});var i2=s(Xc);Yg=i(i2,"Flax Base class for outputs of decoder-only generation models using sampling."),i2.forEach(r),Xg=l($i),yt=n($i,"DIV",{class:!0});var fp=s(yt);g(vr.$$.fragment,fp),Jg=l(fp),Jc=n(fp,"P",{});var c2=s(Jc);Qg=i(c2,"\u201CReturns a new object replacing the specified fields with new values."),c2.forEach(r),fp.forEach(r),$i.forEach(r),Kd=l(e),et=n(e,"H3",{class:!0});var gp=s(et);kt=n(gp,"A",{id:!0,class:!0,href:!0});var l2=s(kt);Qc=n(l2,"SPAN",{});var d2=s(Qc);g($r.$$.fragment,d2),d2.forEach(r),l2.forEach(r),Zg=l(gp),Zc=n(gp,"SPAN",{});var m2=s(Zc);eu=i(m2,"BeamSearchOutput"),m2.forEach(r),gp.forEach(r),Ud=l(e),tt=n(e,"DIV",{class:!0});var up=s(tt);g(Tr.$$.fragment,up),tu=l(up),el=n(up,"P",{});var p2=s(el);ru=i(p2,"Base class for outputs of decoder-only generation models using beam search."),p2.forEach(r),up.forEach(r),Yd=l(e),rt=n(e,"DIV",{class:!0});var hp=s(rt);g(yr.$$.fragment,hp),ou=l(hp),tl=n(hp,"P",{});var f2=s(tl);nu=i(f2,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),f2.forEach(r),hp.forEach(r),Xd=l(e),ot=n(e,"H3",{class:!0});var _p=s(ot);xt=n(_p,"A",{id:!0,class:!0,href:!0});var g2=s(xt);rl=n(g2,"SPAN",{});var u2=s(rl);g(kr.$$.fragment,u2),u2.forEach(r),g2.forEach(r),su=l(_p),ol=n(_p,"SPAN",{});var h2=s(ol);au=i(h2,"BeamSampleOutput"),h2.forEach(r),_p.forEach(r),Jd=l(e),nt=n(e,"DIV",{class:!0});var bp=s(nt);g(xr.$$.fragment,bp),iu=l(bp),nl=n(bp,"P",{});var _2=s(nl);cu=i(_2,"Base class for outputs of decoder-only generation models using beam sample."),_2.forEach(r),bp.forEach(r),Qd=l(e),st=n(e,"DIV",{class:!0});var vp=s(st);g(wr.$$.fragment,vp),lu=l(vp),sl=n(vp,"P",{});var b2=s(sl);du=i(b2,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),b2.forEach(r),vp.forEach(r),Zd=l(e),at=n(e,"H2",{class:!0});var $p=s(at);wt=n($p,"A",{id:!0,class:!0,href:!0});var v2=s(wt);al=n(v2,"SPAN",{});var $2=s(al);g(Lr.$$.fragment,$2),$2.forEach(r),v2.forEach(r),mu=l($p),il=n($p,"SPAN",{});var T2=s(il);pu=i(T2,"LogitsProcessor"),T2.forEach(r),$p.forEach(r),em=l(e),Lt=n(e,"P",{});var Tp=s(Lt);fu=i(Tp,"A "),ps=n(Tp,"A",{href:!0});var y2=s(ps);gu=i(y2,"LogitsProcessor"),y2.forEach(r),uu=i(Tp,` can be used to modify the prediction scores of a language model head for
generation.`),Tp.forEach(r),tm=l(e),U=n(e,"DIV",{class:!0});var Ti=s(U);g(Er.$$.fragment,Ti),hu=l(Ti),cl=n(Ti,"P",{});var k2=s(cl);_u=i(k2,"Abstract base class for all logit processors that can be applied during generation."),k2.forEach(r),bu=l(Ti),Et=n(Ti,"DIV",{class:!0});var yp=s(Et);g(Pr.$$.fragment,yp),vu=l(yp),ll=n(yp,"P",{});var x2=s(ll);$u=i(x2,"Torch method for processing logits."),x2.forEach(r),yp.forEach(r),Ti.forEach(r),rm=l(e),Y=n(e,"DIV",{class:!0});var yi=s(Y);g(Fr.$$.fragment,yi),Tu=l(yi),L=n(yi,"P",{});var B=s(L);yu=i(B,"This class can be used to create a list of "),fs=n(B,"A",{href:!0});var w2=s(fs);ku=i(w2,"LogitsProcessor"),w2.forEach(r),xu=i(B," or "),gs=n(B,"A",{href:!0});var L2=s(gs);wu=i(L2,"LogitsWarper"),L2.forEach(r),Lu=i(B,` to subsequently process a
`),dl=n(B,"CODE",{});var E2=s(dl);Eu=i(E2,"scores"),E2.forEach(r),Pu=i(B," input tensor. This class inherits from list and adds a specific "),ml=n(B,"EM",{});var P2=s(ml);pl=n(P2,"STRONG",{});var F2=s(pl);Fu=i(F2,"call"),F2.forEach(r),P2.forEach(r),Du=i(B,` method to apply each
`),us=n(B,"A",{href:!0});var D2=s(us);Su=i(D2,"LogitsProcessor"),D2.forEach(r),zu=i(B," or "),hs=n(B,"A",{href:!0});var S2=s(hs);Ou=i(S2,"LogitsWarper"),S2.forEach(r),qu=i(B," to the inputs."),B.forEach(r),Bu=l(yi),_s=n(yi,"DIV",{class:!0});var z2=s(_s);g(Dr.$$.fragment,z2),z2.forEach(r),yi.forEach(r),om=l(e),X=n(e,"DIV",{class:!0});var ki=s(X);g(Sr.$$.fragment,ki),Iu=l(ki),fl=n(ki,"P",{});var O2=s(fl);Au=i(O2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),O2.forEach(r),Cu=l(ki),Pt=n(ki,"DIV",{class:!0});var kp=s(Pt);g(zr.$$.fragment,kp),Wu=l(kp),gl=n(kp,"P",{});var q2=s(gl);Nu=i(q2,"Torch method for warping logits."),q2.forEach(r),kp.forEach(r),ki.forEach(r),nm=l(e),J=n(e,"DIV",{class:!0});var xi=s(J);g(Or.$$.fragment,xi),Vu=l(xi),bs=n(xi,"P",{});var OT=s(bs);vs=n(OT,"A",{href:!0});var B2=s(vs);Mu=i(B2,"LogitsProcessor"),B2.forEach(r),Gu=i(OT," enforcing a min-length by setting EOS probability to 0."),OT.forEach(r),ju=l(xi),$s=n(xi,"DIV",{class:!0});var I2=s($s);g(qr.$$.fragment,I2),I2.forEach(r),xi.forEach(r),sm=l(e),Q=n(e,"DIV",{class:!0});var wi=s(Q);g(Br.$$.fragment,wi),Hu=l(wi),Ts=n(wi,"P",{});var qT=s(Ts);ys=n(qT,"A",{href:!0});var A2=s(ys);Ru=i(A2,"LogitsWarper"),A2.forEach(r),Ku=i(qT," for temperature (exponential scaling output probability distribution)."),qT.forEach(r),Uu=l(wi),ks=n(wi,"DIV",{class:!0});var C2=s(ks);g(Ir.$$.fragment,C2),C2.forEach(r),wi.forEach(r),am=l(e),Z=n(e,"DIV",{class:!0});var Li=s(Z);g(Ar.$$.fragment,Li),Yu=l(Li),xs=n(Li,"P",{});var BT=s(xs);ws=n(BT,"A",{href:!0});var W2=s(ws);Xu=i(W2,"LogitsProcessor"),W2.forEach(r),Ju=i(BT," enforcing an exponential penalty on repeated sequences."),BT.forEach(r),Qu=l(Li),Ls=n(Li,"DIV",{class:!0});var N2=s(Ls);g(Cr.$$.fragment,N2),N2.forEach(r),Li.forEach(r),im=l(e),ee=n(e,"DIV",{class:!0});var Ei=s(ee);g(Wr.$$.fragment,Ei),Zu=l(Ei),Es=n(Ei,"P",{});var IT=s(Es);Ps=n(IT,"A",{href:!0});var V2=s(Ps);eh=i(V2,"LogitsWarper"),V2.forEach(r),th=i(IT," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),IT.forEach(r),rh=l(Ei),Fs=n(Ei,"DIV",{class:!0});var M2=s(Fs);g(Nr.$$.fragment,M2),M2.forEach(r),Ei.forEach(r),cm=l(e),te=n(e,"DIV",{class:!0});var Pi=s(te);g(Vr.$$.fragment,Pi),oh=l(Pi),Ds=n(Pi,"P",{});var AT=s(Ds);Ss=n(AT,"A",{href:!0});var G2=s(Ss);nh=i(G2,"LogitsWarper"),G2.forEach(r),sh=i(AT," that performs top-k, i.e. restricting to the k highest probability elements."),AT.forEach(r),ah=l(Pi),zs=n(Pi,"DIV",{class:!0});var j2=s(zs);g(Mr.$$.fragment,j2),j2.forEach(r),Pi.forEach(r),lm=l(e),re=n(e,"DIV",{class:!0});var Fi=s(re);g(Gr.$$.fragment,Fi),ih=l(Fi),Ft=n(Fi,"P",{});var hd=s(Ft);Os=n(hd,"A",{href:!0});var H2=s(Os);ch=i(H2,"LogitsWarper"),H2.forEach(r),lh=i(hd," that performs typical decoding. See "),jr=n(hd,"A",{href:!0,rel:!0});var R2=s(jr);dh=i(R2,`Typical Decoding for Natural Language
Generation`),R2.forEach(r),mh=i(hd," for more information."),hd.forEach(r),ph=l(Fi),qs=n(Fi,"DIV",{class:!0});var K2=s(qs);g(Hr.$$.fragment,K2),K2.forEach(r),Fi.forEach(r),dm=l(e),oe=n(e,"DIV",{class:!0});var Di=s(oe);g(Rr.$$.fragment,Di),fh=l(Di),Dt=n(Di,"P",{});var _d=s(Dt);Bs=n(_d,"A",{href:!0});var U2=s(Bs);gh=i(U2,"LogitsProcessor"),U2.forEach(r),uh=i(_d,` that enforces no repetition of n-grams. See
`),Kr=n(_d,"A",{href:!0,rel:!0});var Y2=s(Kr);hh=i(Y2,"Fairseq"),Y2.forEach(r),_h=i(_d,"."),_d.forEach(r),bh=l(Di),Is=n(Di,"DIV",{class:!0});var X2=s(Is);g(Ur.$$.fragment,X2),X2.forEach(r),Di.forEach(r),mm=l(e),ne=n(e,"DIV",{class:!0});var Si=s(ne);g(Yr.$$.fragment,Si),vh=l(Si),As=n(Si,"P",{});var CT=s(As);Cs=n(CT,"A",{href:!0});var J2=s(Cs);$h=i(J2,"LogitsProcessor"),J2.forEach(r),Th=i(CT," that enforces that specified sequences will never be sampled."),CT.forEach(r),yh=l(Si),Ws=n(Si,"DIV",{class:!0});var Q2=s(Ws);g(Xr.$$.fragment,Q2),Q2.forEach(r),Si.forEach(r),pm=l(e),se=n(e,"DIV",{class:!0});var zi=s(se);g(Jr.$$.fragment,zi),kh=l(zi),St=n(zi,"P",{});var bd=s(St);Ns=n(bd,"A",{href:!0});var Z2=s(Ns);xh=i(Z2,"LogitsProcessor"),Z2.forEach(r),wh=i(bd,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Qr=n(bd,"A",{href:!0,rel:!0});var ey=s(Qr);Lh=i(ey,"Autoregressive Entity Retrieval"),ey.forEach(r),Eh=i(bd," for more information."),bd.forEach(r),Ph=l(zi),Vs=n(zi,"DIV",{class:!0});var ty=s(Vs);g(Zr.$$.fragment,ty),ty.forEach(r),zi.forEach(r),fm=l(e),ae=n(e,"DIV",{class:!0});var Oi=s(ae);g(eo.$$.fragment,Oi),Fh=l(Oi),Ne=n(Oi,"P",{});var Kn=s(Ne);Ms=n(Kn,"A",{href:!0});var ry=s(Ms);Dh=i(ry,"LogitsProcessor"),ry.forEach(r),Sh=i(Kn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Gs=n(Kn,"A",{href:!0});var oy=s(Gs);zh=i(oy,"PreTrainedModel.group_beam_search()"),oy.forEach(r),Oh=i(Kn,". See "),to=n(Kn,"A",{href:!0,rel:!0});var ny=s(to);qh=i(ny,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),ny.forEach(r),Bh=i(Kn," for more details."),Kn.forEach(r),Ih=l(Oi),js=n(Oi,"DIV",{class:!0});var sy=s(js);g(ro.$$.fragment,sy),sy.forEach(r),Oi.forEach(r),gm=l(e),ie=n(e,"DIV",{class:!0});var qi=s(ie);g(oo.$$.fragment,qi),Ah=l(qi),Hs=n(qi,"P",{});var WT=s(Hs);Rs=n(WT,"A",{href:!0});var ay=s(Rs);Ch=i(ay,"LogitsProcessor"),ay.forEach(r),Wh=i(WT," that enforces the specified token as the first generated token."),WT.forEach(r),Nh=l(qi),Ks=n(qi,"DIV",{class:!0});var iy=s(Ks);g(no.$$.fragment,iy),iy.forEach(r),qi.forEach(r),um=l(e),ce=n(e,"DIV",{class:!0});var Bi=s(ce);g(so.$$.fragment,Bi),Vh=l(Bi),zt=n(Bi,"P",{});var vd=s(zt);Us=n(vd,"A",{href:!0});var cy=s(Us);Mh=i(cy,"LogitsProcessor"),cy.forEach(r),Gh=i(vd," that enforces the specified token as the last generated token when "),ul=n(vd,"CODE",{});var ly=s(ul);jh=i(ly,"max_length"),ly.forEach(r),Hh=i(vd," is reached."),vd.forEach(r),Rh=l(Bi),Ys=n(Bi,"DIV",{class:!0});var dy=s(Ys);g(ao.$$.fragment,dy),dy.forEach(r),Bi.forEach(r),hm=l(e),le=n(e,"DIV",{class:!0});var Ii=s(le);g(io.$$.fragment,Ii),Kh=l(Ii),G=n(Ii,"P",{});var ht=s(G);Xs=n(ht,"A",{href:!0});var my=s(Xs);Uh=i(my,"LogitsProcessor"),my.forEach(r),Yh=i(ht," that removes all "),hl=n(ht,"CODE",{});var py=s(hl);Xh=i(py,"nan"),py.forEach(r),Jh=i(ht," and "),_l=n(ht,"CODE",{});var fy=s(_l);Qh=i(fy,"inf"),fy.forEach(r),Zh=i(ht,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),bl=n(ht,"CODE",{});var gy=s(bl);e_=i(gy,"max_length"),gy.forEach(r),t_=i(ht,` is
reached.`),ht.forEach(r),r_=l(Ii),Js=n(Ii,"DIV",{class:!0});var uy=s(Js);g(co.$$.fragment,uy),uy.forEach(r),Ii.forEach(r),_m=l(e),de=n(e,"DIV",{class:!0});var Ai=s(de);g(lo.$$.fragment,Ai),o_=l(Ai),vl=n(Ai,"P",{});var hy=s(vl);n_=i(hy,"Abstract base class for all logit processors that can be applied during generation."),hy.forEach(r),s_=l(Ai),Ot=n(Ai,"DIV",{class:!0});var xp=s(Ot);g(mo.$$.fragment,xp),a_=l(xp),$l=n(xp,"P",{});var _y=s($l);i_=i(_y,"TF method for processing logits."),_y.forEach(r),xp.forEach(r),Ai.forEach(r),bm=l(e),me=n(e,"DIV",{class:!0});var Ci=s(me);g(po.$$.fragment,Ci),c_=l(Ci),A=n(Ci,"P",{});var He=s(A);l_=i(He,"This class can be used to create a list of "),Qs=n(He,"A",{href:!0});var by=s(Qs);d_=i(by,"TFLogitsProcessor"),by.forEach(r),m_=i(He," to subsequently process a "),Tl=n(He,"CODE",{});var vy=s(Tl);p_=i(vy,"scores"),vy.forEach(r),f_=i(He,` input tensor.
This class inherits from list and adds a specific `),yl=n(He,"EM",{});var $y=s(yl);kl=n($y,"STRONG",{});var Ty=s(kl);g_=i(Ty,"call"),Ty.forEach(r),$y.forEach(r),u_=i(He," method to apply each "),Zs=n(He,"A",{href:!0});var yy=s(Zs);h_=i(yy,"TFLogitsProcessor"),yy.forEach(r),__=i(He,` to the
inputs.`),He.forEach(r),b_=l(Ci),ea=n(Ci,"DIV",{class:!0});var ky=s(ea);g(fo.$$.fragment,ky),ky.forEach(r),Ci.forEach(r),vm=l(e),pe=n(e,"DIV",{class:!0});var Wi=s(pe);g(go.$$.fragment,Wi),v_=l(Wi),xl=n(Wi,"P",{});var xy=s(xl);$_=i(xy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),xy.forEach(r),T_=l(Wi),qt=n(Wi,"DIV",{class:!0});var wp=s(qt);g(uo.$$.fragment,wp),y_=l(wp),wl=n(wp,"P",{});var wy=s(wl);k_=i(wy,"TF method for warping logits."),wy.forEach(r),wp.forEach(r),Wi.forEach(r),$m=l(e),fe=n(e,"DIV",{class:!0});var Ni=s(fe);g(ho.$$.fragment,Ni),x_=l(Ni),ta=n(Ni,"P",{});var NT=s(ta);ra=n(NT,"A",{href:!0});var Ly=s(ra);w_=i(Ly,"TFLogitsWarper"),Ly.forEach(r),L_=i(NT," for temperature (exponential scaling output probability distribution)."),NT.forEach(r),E_=l(Ni),oa=n(Ni,"DIV",{class:!0});var Ey=s(oa);g(_o.$$.fragment,Ey),Ey.forEach(r),Ni.forEach(r),Tm=l(e),ge=n(e,"DIV",{class:!0});var Vi=s(ge);g(bo.$$.fragment,Vi),P_=l(Vi),na=n(Vi,"P",{});var VT=s(na);sa=n(VT,"A",{href:!0});var Py=s(sa);F_=i(Py,"TFLogitsWarper"),Py.forEach(r),D_=i(VT," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),VT.forEach(r),S_=l(Vi),aa=n(Vi,"DIV",{class:!0});var Fy=s(aa);g(vo.$$.fragment,Fy),Fy.forEach(r),Vi.forEach(r),ym=l(e),ue=n(e,"DIV",{class:!0});var Mi=s(ue);g($o.$$.fragment,Mi),z_=l(Mi),ia=n(Mi,"P",{});var MT=s(ia);ca=n(MT,"A",{href:!0});var Dy=s(ca);O_=i(Dy,"TFLogitsWarper"),Dy.forEach(r),q_=i(MT," that performs top-k, i.e. restricting to the k highest probability elements."),MT.forEach(r),B_=l(Mi),la=n(Mi,"DIV",{class:!0});var Sy=s(la);g(To.$$.fragment,Sy),Sy.forEach(r),Mi.forEach(r),km=l(e),he=n(e,"DIV",{class:!0});var Gi=s(he);g(yo.$$.fragment,Gi),I_=l(Gi),da=n(Gi,"P",{});var GT=s(da);ma=n(GT,"A",{href:!0});var zy=s(ma);A_=i(zy,"TFLogitsProcessor"),zy.forEach(r),C_=i(GT," enforcing a min-length by setting EOS probability to 0."),GT.forEach(r),W_=l(Gi),pa=n(Gi,"DIV",{class:!0});var Oy=s(pa);g(ko.$$.fragment,Oy),Oy.forEach(r),Gi.forEach(r),xm=l(e),_e=n(e,"DIV",{class:!0});var ji=s(_e);g(xo.$$.fragment,ji),N_=l(ji),fa=n(ji,"P",{});var jT=s(fa);ga=n(jT,"A",{href:!0});var qy=s(ga);V_=i(qy,"TFLogitsProcessor"),qy.forEach(r),M_=i(jT," that enforces that specified sequences will never be sampled."),jT.forEach(r),G_=l(ji),ua=n(ji,"DIV",{class:!0});var By=s(ua);g(wo.$$.fragment,By),By.forEach(r),ji.forEach(r),wm=l(e),be=n(e,"DIV",{class:!0});var Hi=s(be);g(Lo.$$.fragment,Hi),j_=l(Hi),Bt=n(Hi,"P",{});var $d=s(Bt);ha=n($d,"A",{href:!0});var Iy=s(ha);H_=i(Iy,"TFLogitsProcessor"),Iy.forEach(r),R_=i($d,` that enforces no repetition of n-grams. See
`),Eo=n($d,"A",{href:!0,rel:!0});var Ay=s(Eo);K_=i(Ay,"Fairseq"),Ay.forEach(r),U_=i($d,"."),$d.forEach(r),Y_=l(Hi),_a=n(Hi,"DIV",{class:!0});var Cy=s(_a);g(Po.$$.fragment,Cy),Cy.forEach(r),Hi.forEach(r),Lm=l(e),ve=n(e,"DIV",{class:!0});var Ri=s(ve);g(Fo.$$.fragment,Ri),X_=l(Ri),ba=n(Ri,"P",{});var HT=s(ba);va=n(HT,"A",{href:!0});var Wy=s(va);J_=i(Wy,"TFLogitsProcessor"),Wy.forEach(r),Q_=i(HT," enforcing an exponential penalty on repeated sequences."),HT.forEach(r),Z_=l(Ri),$a=n(Ri,"DIV",{class:!0});var Ny=s($a);g(Do.$$.fragment,Ny),Ny.forEach(r),Ri.forEach(r),Em=l(e),$e=n(e,"DIV",{class:!0});var Ki=s($e);g(So.$$.fragment,Ki),eb=l(Ki),Ta=n(Ki,"P",{});var RT=s(Ta);ya=n(RT,"A",{href:!0});var Vy=s(ya);tb=i(Vy,"TFLogitsProcessor"),Vy.forEach(r),rb=i(RT," that enforces the specified token as the first generated token."),RT.forEach(r),ob=l(Ki),ka=n(Ki,"DIV",{class:!0});var My=s(ka);g(zo.$$.fragment,My),My.forEach(r),Ki.forEach(r),Pm=l(e),Te=n(e,"DIV",{class:!0});var Ui=s(Te);g(Oo.$$.fragment,Ui),nb=l(Ui),It=n(Ui,"P",{});var Td=s(It);xa=n(Td,"A",{href:!0});var Gy=s(xa);sb=i(Gy,"TFLogitsProcessor"),Gy.forEach(r),ab=i(Td," that enforces the specified token as the last generated token when "),Ll=n(Td,"CODE",{});var jy=s(Ll);ib=i(jy,"max_length"),jy.forEach(r),cb=i(Td," is reached."),Td.forEach(r),lb=l(Ui),wa=n(Ui,"DIV",{class:!0});var Hy=s(wa);g(qo.$$.fragment,Hy),Hy.forEach(r),Ui.forEach(r),Fm=l(e),ye=n(e,"DIV",{class:!0});var Yi=s(ye);g(Bo.$$.fragment,Yi),db=l(Yi),El=n(Yi,"P",{});var Ry=s(El);mb=i(Ry,"Abstract base class for all logit processors that can be applied during generation."),Ry.forEach(r),pb=l(Yi),At=n(Yi,"DIV",{class:!0});var Lp=s(At);g(Io.$$.fragment,Lp),fb=l(Lp),Pl=n(Lp,"P",{});var Ky=s(Pl);gb=i(Ky,"Flax method for processing logits."),Ky.forEach(r),Lp.forEach(r),Yi.forEach(r),Dm=l(e),ke=n(e,"DIV",{class:!0});var Xi=s(ke);g(Ao.$$.fragment,Xi),ub=l(Xi),E=n(Xi,"P",{});var I=s(E);hb=i(I,"This class can be used to create a list of "),La=n(I,"A",{href:!0});var Uy=s(La);_b=i(Uy,"FlaxLogitsProcessor"),Uy.forEach(r),bb=i(I," or "),Ea=n(I,"A",{href:!0});var Yy=s(Ea);vb=i(Yy,"FlaxLogitsWarper"),Yy.forEach(r),$b=i(I,` to subsequently process
a `),Fl=n(I,"CODE",{});var Xy=s(Fl);Tb=i(Xy,"scores"),Xy.forEach(r),yb=i(I," input tensor. This class inherits from list and adds a specific "),Dl=n(I,"EM",{});var Jy=s(Dl);Sl=n(Jy,"STRONG",{});var Qy=s(Sl);kb=i(Qy,"call"),Qy.forEach(r),Jy.forEach(r),xb=i(I,` method to apply each
`),Pa=n(I,"A",{href:!0});var Zy=s(Pa);wb=i(Zy,"FlaxLogitsProcessor"),Zy.forEach(r),Lb=i(I," or "),Fa=n(I,"A",{href:!0});var e0=s(Fa);Eb=i(e0,"FlaxLogitsWarper"),e0.forEach(r),Pb=i(I," to the inputs."),I.forEach(r),Fb=l(Xi),Da=n(Xi,"DIV",{class:!0});var t0=s(Da);g(Co.$$.fragment,t0),t0.forEach(r),Xi.forEach(r),Sm=l(e),xe=n(e,"DIV",{class:!0});var Ji=s(xe);g(Wo.$$.fragment,Ji),Db=l(Ji),zl=n(Ji,"P",{});var r0=s(zl);Sb=i(r0,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),r0.forEach(r),zb=l(Ji),Ct=n(Ji,"DIV",{class:!0});var Ep=s(Ct);g(No.$$.fragment,Ep),Ob=l(Ep),Ol=n(Ep,"P",{});var o0=s(Ol);qb=i(o0,"Flax method for warping logits."),o0.forEach(r),Ep.forEach(r),Ji.forEach(r),zm=l(e),we=n(e,"DIV",{class:!0});var Qi=s(we);g(Vo.$$.fragment,Qi),Bb=l(Qi),Sa=n(Qi,"P",{});var KT=s(Sa);za=n(KT,"A",{href:!0});var n0=s(za);Ib=i(n0,"FlaxLogitsWarper"),n0.forEach(r),Ab=i(KT," for temperature (exponential scaling output probability distribution)."),KT.forEach(r),Cb=l(Qi),Oa=n(Qi,"DIV",{class:!0});var s0=s(Oa);g(Mo.$$.fragment,s0),s0.forEach(r),Qi.forEach(r),Om=l(e),Le=n(e,"DIV",{class:!0});var Zi=s(Le);g(Go.$$.fragment,Zi),Wb=l(Zi),qa=n(Zi,"P",{});var UT=s(qa);Ba=n(UT,"A",{href:!0});var a0=s(Ba);Nb=i(a0,"FlaxLogitsWarper"),a0.forEach(r),Vb=i(UT," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),UT.forEach(r),Mb=l(Zi),Ia=n(Zi,"DIV",{class:!0});var i0=s(Ia);g(jo.$$.fragment,i0),i0.forEach(r),Zi.forEach(r),qm=l(e),Ee=n(e,"DIV",{class:!0});var ec=s(Ee);g(Ho.$$.fragment,ec),Gb=l(ec),Aa=n(ec,"P",{});var YT=s(Aa);Ca=n(YT,"A",{href:!0});var c0=s(Ca);jb=i(c0,"FlaxLogitsWarper"),c0.forEach(r),Hb=i(YT," that performs top-k, i.e. restricting to the k highest probability elements."),YT.forEach(r),Rb=l(ec),Wa=n(ec,"DIV",{class:!0});var l0=s(Wa);g(Ro.$$.fragment,l0),l0.forEach(r),ec.forEach(r),Bm=l(e),Pe=n(e,"DIV",{class:!0});var tc=s(Pe);g(Ko.$$.fragment,tc),Kb=l(tc),Na=n(tc,"P",{});var XT=s(Na);Va=n(XT,"A",{href:!0});var d0=s(Va);Ub=i(d0,"FlaxLogitsProcessor"),d0.forEach(r),Yb=i(XT," that enforces the specified token as the first generated token."),XT.forEach(r),Xb=l(tc),Ma=n(tc,"DIV",{class:!0});var m0=s(Ma);g(Uo.$$.fragment,m0),m0.forEach(r),tc.forEach(r),Im=l(e),Fe=n(e,"DIV",{class:!0});var rc=s(Fe);g(Yo.$$.fragment,rc),Jb=l(rc),Wt=n(rc,"P",{});var yd=s(Wt);Ga=n(yd,"A",{href:!0});var p0=s(Ga);Qb=i(p0,"FlaxLogitsProcessor"),p0.forEach(r),Zb=i(yd," that enforces the specified token as the last generated token when "),ql=n(yd,"CODE",{});var f0=s(ql);ev=i(f0,"max_length"),f0.forEach(r),tv=i(yd," is reached."),yd.forEach(r),rv=l(rc),ja=n(rc,"DIV",{class:!0});var g0=s(ja);g(Xo.$$.fragment,g0),g0.forEach(r),rc.forEach(r),Am=l(e),De=n(e,"DIV",{class:!0});var oc=s(De);g(Jo.$$.fragment,oc),ov=l(oc),Ha=n(oc,"P",{});var JT=s(Ha);Ra=n(JT,"A",{href:!0});var u0=s(Ra);nv=i(u0,"FlaxLogitsProcessor"),u0.forEach(r),sv=i(JT," enforcing a min-length by setting EOS probability to 0."),JT.forEach(r),av=l(oc),Ka=n(oc,"DIV",{class:!0});var h0=s(Ka);g(Qo.$$.fragment,h0),h0.forEach(r),oc.forEach(r),Cm=l(e),it=n(e,"H2",{class:!0});var Pp=s(it);Nt=n(Pp,"A",{id:!0,class:!0,href:!0});var _0=s(Nt);Bl=n(_0,"SPAN",{});var b0=s(Bl);g(Zo.$$.fragment,b0),b0.forEach(r),_0.forEach(r),iv=l(Pp),Il=n(Pp,"SPAN",{});var v0=s(Il);cv=i(v0,"StoppingCriteria"),v0.forEach(r),Pp.forEach(r),Wm=l(e),Vt=n(e,"P",{});var Fp=s(Vt);lv=i(Fp,"A "),Ua=n(Fp,"A",{href:!0});var $0=s(Ua);dv=i($0,"StoppingCriteria"),$0.forEach(r),mv=i(Fp," can be used to change when to stop generation (other than EOS token)."),Fp.forEach(r),Nm=l(e),Se=n(e,"DIV",{class:!0});var nc=s(Se);g(en.$$.fragment,nc),pv=l(nc),Al=n(nc,"P",{});var T0=s(Al);fv=i(T0,"Abstract base class for all stopping criteria that can be applied during generation."),T0.forEach(r),gv=l(nc),Ya=n(nc,"DIV",{class:!0});var y0=s(Ya);g(tn.$$.fragment,y0),y0.forEach(r),nc.forEach(r),Vm=l(e),ct=n(e,"DIV",{class:!0});var Dp=s(ct);g(rn.$$.fragment,Dp),uv=l(Dp),Xa=n(Dp,"DIV",{class:!0});var k0=s(Xa);g(on.$$.fragment,k0),k0.forEach(r),Dp.forEach(r),Mm=l(e),ze=n(e,"DIV",{class:!0});var sc=s(ze);g(nn.$$.fragment,sc),hv=l(sc),sn=n(sc,"P",{});var Sp=s(sn);_v=i(Sp,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Cl=n(Sp,"CODE",{});var x0=s(Cl);bv=i(x0,"max_length"),x0.forEach(r),vv=i(Sp,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Sp.forEach(r),$v=l(sc),Ja=n(sc,"DIV",{class:!0});var w0=s(Ja);g(an.$$.fragment,w0),w0.forEach(r),sc.forEach(r),Gm=l(e),Oe=n(e,"DIV",{class:!0});var ac=s(Oe);g(cn.$$.fragment,ac),Tv=l(ac),ln=n(ac,"P",{});var zp=s(ln);yv=i(zp,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Wl=n(zp,"CODE",{});var L0=s(Wl);kv=i(L0,"initial_time"),L0.forEach(r),xv=i(zp,"."),zp.forEach(r),wv=l(ac),Qa=n(ac,"DIV",{class:!0});var E0=s(Qa);g(dn.$$.fragment,E0),E0.forEach(r),ac.forEach(r),jm=l(e),lt=n(e,"H2",{class:!0});var Op=s(lt);Mt=n(Op,"A",{id:!0,class:!0,href:!0});var P0=s(Mt);Nl=n(P0,"SPAN",{});var F0=s(Nl);g(mn.$$.fragment,F0),F0.forEach(r),P0.forEach(r),Lv=l(Op),Vl=n(Op,"SPAN",{});var D0=s(Vl);Ev=i(D0,"Constraints"),D0.forEach(r),Op.forEach(r),Hm=l(e),Gt=n(e,"P",{});var qp=s(Gt);Pv=i(qp,"A "),Za=n(qp,"A",{href:!0});var S0=s(Za);Fv=i(S0,"Constraint"),S0.forEach(r),Dv=i(qp," can be used to force the generation to include specific tokens or sequences in the output."),qp.forEach(r),Rm=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(pn.$$.fragment,T),Sv=l(T),Ml=n(T,"P",{});var z0=s(Ml);zv=i(z0,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),z0.forEach(r),Ov=l(T),Gl=n(T,"P",{});var O0=s(Gl);qv=i(O0,"All classes that inherit Constraint must follow the requirement that"),O0.forEach(r),Bv=l(T),g(jt.$$.fragment,T),Iv=l(T),jl=n(T,"P",{});var q0=s(jl);Av=i(q0,"will always terminate (halt)."),q0.forEach(r),Cv=l(T),Ht=n(T,"DIV",{class:!0});var Bp=s(Ht);g(fn.$$.fragment,Bp),Wv=l(Bp),Hl=n(Bp,"P",{});var B0=s(Hl);Nv=i(B0,"When called, returns the token that would take this constraint one step closer to being fulfilled."),B0.forEach(r),Bp.forEach(r),Vv=l(T),Rt=n(T,"DIV",{class:!0});var Ip=s(Rt);g(gn.$$.fragment,Ip),Mv=l(Ip),Rl=n(Ip,"P",{});var I0=s(Rl);Gv=i(I0,"Creates a new instance of this constraint."),I0.forEach(r),Ip.forEach(r),jv=l(T),Kt=n(T,"DIV",{class:!0});var Ap=s(Kt);g(un.$$.fragment,Ap),Hv=l(Ap),Kl=n(Ap,"P",{});var A0=s(Kl);Rv=i(A0,"Reads in a token and returns whether it creates progress."),A0.forEach(r),Ap.forEach(r),Kv=l(T),Ut=n(T,"DIV",{class:!0});var Cp=s(Ut);g(hn.$$.fragment,Cp),Uv=l(Cp),_n=n(Cp,"P",{});var Wp=s(_n);Yv=i(Wp,"Returns the number of remaining steps of "),Ul=n(Wp,"CODE",{});var C0=s(Ul);Xv=i(C0,"advance()"),C0.forEach(r),Jv=i(Wp," in order to complete this constraint."),Wp.forEach(r),Cp.forEach(r),Qv=l(T),Yt=n(T,"DIV",{class:!0});var Np=s(Yt);g(bn.$$.fragment,Np),Zv=l(Np),Yl=n(Np,"P",{});var W0=s(Yl);e$=i(W0,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),W0.forEach(r),Np.forEach(r),t$=l(T),Xt=n(T,"DIV",{class:!0});var Vp=s(Xt);g(vn.$$.fragment,Vp),r$=l(Vp),Xl=n(Vp,"P",{});var N0=s(Xl);o$=i(N0,"Tests whether this constraint has been properly defined."),N0.forEach(r),Vp.forEach(r),n$=l(T),Ve=n(T,"DIV",{class:!0});var ic=s(Ve);g($n.$$.fragment,ic),s$=l(ic),Tn=n(ic,"P",{});var Mp=s(Tn);a$=i(Mp,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Jl=n(Mp,"CODE",{});var V0=s(Jl);i$=i(V0,"does_advance(self, token_id: int)"),V0.forEach(r),c$=i(Mp,"."),Mp.forEach(r),l$=l(ic),Ql=n(ic,"P",{});var M0=s(Ql);d$=i(M0,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),M0.forEach(r),ic.forEach(r),T.forEach(r),Km=l(e),dt=n(e,"DIV",{class:!0});var Gp=s(dt);g(yn.$$.fragment,Gp),m$=l(Gp),ei=n(Gp,"P",{});var QT=s(ei);ti=n(QT,"A",{href:!0});var G0=s(ti);p$=i(G0,"Constraint"),G0.forEach(r),f$=i(QT," enforcing that an ordered sequence of tokens is included in the output."),QT.forEach(r),Gp.forEach(r),Um=l(e),mt=n(e,"DIV",{class:!0});var jp=s(mt);g(kn.$$.fragment,jp),g$=l(jp),xn=n(jp,"P",{});var Hp=s(xn);u$=i(Hp,"A special "),ri=n(Hp,"A",{href:!0});var j0=s(ri);h$=i(j0,"Constraint"),j0.forEach(r),_$=i(Hp," that is fulfilled by fulfilling just one of several constraints."),Hp.forEach(r),jp.forEach(r),Ym=l(e),C=n(e,"DIV",{class:!0});var rr=s(C);g(wn.$$.fragment,rr),b$=l(rr),Zl=n(rr,"P",{});var H0=s(Zl);v$=i(H0,"A class for beam scorers to track its progress through a list of constraints."),H0.forEach(r),$$=l(rr),F=n(rr,"DIV",{class:!0});var j=s(F);g(Ln.$$.fragment,j),T$=l(j),ed=n(j,"P",{});var R0=s(ed);y$=i(R0,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),R0.forEach(r),k$=l(j),pt=n(j,"P",{});var cc=s(pt);x$=i(cc,"Given constraints "),td=n(cc,"CODE",{});var K0=s(td);w$=i(K0,"c_i = {t_ij | j == # of tokens}"),K0.forEach(r),L$=i(cc,`, If we\u2019re not in the middle of progressing through a
specific constraint `),rd=n(cc,"CODE",{});var U0=s(rd);E$=i(U0,"c_i"),U0.forEach(r),P$=i(cc,", we return:"),cc.forEach(r),F$=l(j),od=n(j,"P",{});var Y0=s(od);nd=n(Y0,"CODE",{});var X0=s(nd);D$=i(X0,"[t_k1 for k in indices of unfulfilled constraints]"),X0.forEach(r),Y0.forEach(r),S$=l(j),qe=n(j,"P",{});var or=s(qe);z$=i(or,`If we are in the middle of a constraint, then we return:
`),sd=n(or,"CODE",{});var J0=s(sd);O$=i(J0,"[t_ij]"),J0.forEach(r),q$=i(or,", where "),ad=n(or,"CODE",{});var Q0=s(ad);B$=i(Q0,"i"),Q0.forEach(r),I$=i(or," is the index of the inprogress constraint, "),id=n(or,"CODE",{});var Z0=s(id);A$=i(Z0,"j"),Z0.forEach(r),C$=i(or," is the next step for the constraint."),or.forEach(r),W$=l(j),cd=n(j,"P",{});var ek=s(cd);N$=i(ek,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),ek.forEach(r),j.forEach(r),V$=l(rr),Jt=n(rr,"DIV",{class:!0});var Rp=s(Jt);g(En.$$.fragment,Rp),M$=l(Rp),ld=n(Rp,"P",{});var tk=s(ld);G$=i(tk,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),tk.forEach(r),Rp.forEach(r),rr.forEach(r),Xm=l(e),ft=n(e,"H2",{class:!0});var Kp=s(ft);Qt=n(Kp,"A",{id:!0,class:!0,href:!0});var rk=s(Qt);dd=n(rk,"SPAN",{});var ok=s(dd);g(Pn.$$.fragment,ok),ok.forEach(r),rk.forEach(r),j$=l(Kp),md=n(Kp,"SPAN",{});var nk=s(md);H$=i(nk,"BeamSearch"),nk.forEach(r),Kp.forEach(r),Jm=l(e),W=n(e,"DIV",{class:!0});var nr=s(W);g(Fn.$$.fragment,nr),R$=l(nr),gt=n(nr,"P",{});var lc=s(gt);K$=i(lc,"Abstract base class for all beam scorers that are used for "),oi=n(lc,"A",{href:!0});var sk=s(oi);U$=i(sk,"beam_search()"),sk.forEach(r),Y$=i(lc,` and
`),ni=n(lc,"A",{href:!0});var ak=s(ni);X$=i(ak,"beam_sample()"),ak.forEach(r),J$=i(lc,"."),lc.forEach(r),Q$=l(nr),si=n(nr,"DIV",{class:!0});var ik=s(si);g(Dn.$$.fragment,ik),ik.forEach(r),Z$=l(nr),ai=n(nr,"DIV",{class:!0});var ck=s(ai);g(Sn.$$.fragment,ck),ck.forEach(r),nr.forEach(r),Qm=l(e),P=n(e,"DIV",{class:!0});var H=s(P);g(zn.$$.fragment,H),eT=l(H),ii=n(H,"P",{});var ZT=s(ii);ci=n(ZT,"A",{href:!0});var lk=s(ci);tT=i(lk,"BeamScorer"),lk.forEach(r),rT=i(ZT," implementing standard beam search decoding."),ZT.forEach(r),oT=l(H),On=n(H,"P",{});var Up=s(On);nT=i(Up,"Adapted in part from "),qn=n(Up,"A",{href:!0,rel:!0});var dk=s(qn);sT=i(dk,`Facebook\u2019s XLM beam search
code`),dk.forEach(r),aT=i(Up,"."),Up.forEach(r),iT=l(H),li=n(H,"P",{});var e1=s(li);cT=i(e1,"Reference for the diverse beam search algorithm and implementation "),Bn=n(e1,"A",{href:!0,rel:!0});var mk=s(Bn);lT=i(mk,`Ashwin Kalyan\u2019s DBS
implementation`),mk.forEach(r),e1.forEach(r),dT=l(H),di=n(H,"DIV",{class:!0});var pk=s(di);g(In.$$.fragment,pk),pk.forEach(r),mT=l(H),mi=n(H,"DIV",{class:!0});var fk=s(mi);g(An.$$.fragment,fk),fk.forEach(r),H.forEach(r),Zm=l(e),N=n(e,"DIV",{class:!0});var sr=s(N);g(Cn.$$.fragment,sr),pT=l(sr),pi=n(sr,"P",{});var t1=s(pi);fi=n(t1,"A",{href:!0});var gk=s(fi);fT=i(gk,"BeamScorer"),gk.forEach(r),gT=i(t1," implementing constrained beam search decoding."),t1.forEach(r),uT=l(sr),gi=n(sr,"DIV",{class:!0});var uk=s(gi);g(Wn.$$.fragment,uk),uk.forEach(r),hT=l(sr),ui=n(sr,"DIV",{class:!0});var hk=s(ui);g(Nn.$$.fragment,hk),hk.forEach(r),sr.forEach(r),ep=l(e),ut=n(e,"H2",{class:!0});var Yp=s(ut);Zt=n(Yp,"A",{id:!0,class:!0,href:!0});var _k=s(Zt);pd=n(_k,"SPAN",{});var bk=s(pd);g(Vn.$$.fragment,bk),bk.forEach(r),_k.forEach(r),_T=l(Yp),fd=n(Yp,"SPAN",{});var vk=s(fd);bT=i(vk,"Utilities"),vk.forEach(r),Yp.forEach(r),tp=l(e),Be=n(e,"DIV",{class:!0});var dc=s(Be);g(Mn.$$.fragment,dc),vT=l(dc),gd=n(dc,"P",{});var $k=s(gd);$T=i($k,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),$k.forEach(r),TT=l(dc),hi=n(dc,"P",{});var r1=s(hi);yT=i(r1,"From: "),Gn=n(r1,"A",{href:!0,rel:!0});var Tk=s(Gn);kT=i(Tk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),Tk.forEach(r),r1.forEach(r),dc.forEach(r),rp=l(e),Ie=n(e,"DIV",{class:!0});var mc=s(Ie);g(jn.$$.fragment,mc),xT=l(mc),ud=n(mc,"P",{});var yk=s(ud);wT=i(yk,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),yk.forEach(r),LT=l(mc),_i=n(mc,"P",{});var o1=s(_i);ET=i(o1,"From: "),Hn=n(o1,"A",{href:!0,rel:!0});var kk=s(Hn);PT=i(kk,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),kk.forEach(r),o1.forEach(r),mc.forEach(r),this.h()},h(){d(w,"name","hf:doc:metadata"),d(w,"content",JSON.stringify(Ok)),d(Ce,"id","utilities-for-generation"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#utilities-for-generation"),d(k,"class","relative group"),d(Un,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Yn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Xn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(Jn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Qn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Zn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(es,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(_t,"id","generate-outputs"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#generate-outputs"),d(Ke,"class","relative group"),d(rs,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(os,"href","/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput"),d(ns,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(as,"href","/docs/transformers/main/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ue,"class","relative group"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Je,"class","relative group"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(et,"class","relative group"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(ot,"class","relative group"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wt,"id","transformers.LogitsProcessor"),d(wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wt,"href","#transformers.LogitsProcessor"),d(at,"class","relative group"),d(ps,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(us,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(hs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ys,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ws,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ps,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Os,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(jr,"href","https://arxiv.org/abs/2202.00666"),d(jr,"rel","nofollow"),d(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Kr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Kr,"rel","nofollow"),d(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ns,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Qr,"href","https://arxiv.org/abs/2010.00904"),d(Qr,"rel","nofollow"),d(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ms,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Gs,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(to,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(to,"rel","nofollow"),d(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Us,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ca,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ma,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ga,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Eo,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Eo,"rel","nofollow"),d(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(va,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ya,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ea,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Pa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ba,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Va,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ra,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nt,"id","transformers.StoppingCriteria"),d(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nt,"href","#transformers.StoppingCriteria"),d(it,"class","relative group"),d(Ua,"href","/docs/transformers/main/en/internal/generation_utils#transformers.StoppingCriteria"),d(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mt,"id","transformers.Constraint"),d(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mt,"href","#transformers.Constraint"),d(lt,"class","relative group"),d(Za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ti,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ri,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qt,"id","transformers.BeamScorer"),d(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qt,"href","#transformers.BeamScorer"),d(ft,"class","relative group"),d(oi,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(ni,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ci,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(qn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(qn,"rel","nofollow"),d(Bn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Bn,"rel","nofollow"),d(di,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fi,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zt,"id","transformers.top_k_top_p_filtering"),d(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zt,"href","#transformers.top_k_top_p_filtering"),d(ut,"class","relative group"),d(Gn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Gn,"rel","nofollow"),d(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Hn,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,w),p(e,Re,m),p(e,k,m),t(k,Ce),t(Ce,pc),u(ar,pc,null),t(k,Xp),t(k,fc),t(fc,Jp),p(e,xd,m),p(e,y,m),t(y,Qp),t(y,Un),t(Un,Zp),t(y,ef),t(y,Yn),t(Yn,tf),t(y,rf),t(y,Xn),t(Xn,of),t(y,nf),t(y,Jn),t(Jn,sf),t(y,af),t(y,Qn),t(Qn,cf),t(y,lf),t(y,Zn),t(Zn,df),t(y,mf),t(y,es),t(es,pf),t(y,ff),p(e,wd,m),p(e,ts,m),t(ts,gf),p(e,Ld,m),p(e,Ke,m),t(Ke,_t),t(_t,gc),u(ir,gc,null),t(Ke,uf),t(Ke,uc),t(uc,hf),p(e,Ed,m),p(e,V,m),t(V,_f),t(V,rs),t(rs,bf),t(V,vf),t(V,os),t(os,$f),t(V,Tf),t(V,ns),t(ns,yf),t(V,kf),p(e,Pd,m),p(e,ss,m),t(ss,xf),p(e,Fd,m),u(cr,e,m),p(e,Dd,m),p(e,We,m),t(We,wf),t(We,hc),t(hc,Lf),t(We,Ef),t(We,as),t(as,Pf),t(We,Ff),p(e,Sd,m),p(e,M,m),t(M,is),t(is,_c),t(_c,Df),t(is,Sf),t(M,zf),t(M,cs),t(cs,bc),t(bc,Of),t(cs,qf),t(M,Bf),t(M,ls),t(ls,vc),t(vc,If),t(ls,Af),t(M,Cf),t(M,ds),t(ds,$c),t($c,Wf),t(ds,Nf),p(e,zd,m),p(e,x,m),t(x,Vf),t(x,Tc),t(Tc,Mf),t(x,Gf),t(x,yc),t(yc,jf),t(x,Hf),t(x,kc),t(kc,Rf),t(x,Kf),t(x,xc),t(xc,Uf),t(x,Yf),t(x,wc),t(wc,Xf),t(x,Jf),t(x,Lc),t(Lc,Qf),t(x,Zf),p(e,Od,m),p(e,S,m),t(S,eg),t(S,Ec),t(Ec,tg),t(S,rg),t(S,Pc),t(Pc,og),t(S,ng),t(S,Fc),t(Fc,sg),t(S,ag),t(S,Dc),t(Dc,ig),t(S,cg),p(e,qd,m),p(e,z,m),t(z,lg),t(z,Sc),t(Sc,dg),t(z,mg),t(z,zc),t(zc,pg),t(z,fg),t(z,Oc),t(Oc,gg),t(z,ug),t(z,qc),t(qc,hg),t(z,_g),p(e,Bd,m),u(lr,e,m),p(e,Id,m),p(e,bt,m),t(bt,bg),t(bt,Bc),t(Bc,vg),t(bt,$g),p(e,Ad,m),p(e,O,m),t(O,Tg),t(O,Ic),t(Ic,yg),t(O,kg),t(O,Ac),t(Ac,xg),t(O,wg),t(O,Cc),t(Cc,Lg),t(O,Eg),t(O,Wc),t(Wc,Pg),t(O,Fg),p(e,Cd,m),p(e,ms,m),t(ms,Dg),p(e,Wd,m),p(e,Ue,m),t(Ue,vt),t(vt,Nc),u(dr,Nc,null),t(Ue,Sg),t(Ue,Vc),t(Vc,zg),p(e,Nd,m),p(e,Ye,m),u(mr,Ye,null),t(Ye,Og),t(Ye,Mc),t(Mc,qg),p(e,Vd,m),p(e,Xe,m),u(pr,Xe,null),t(Xe,Bg),t(Xe,Gc),t(Gc,Ig),p(e,Md,m),p(e,R,m),u(fr,R,null),t(R,Ag),t(R,jc),t(jc,Cg),t(R,Wg),t(R,$t),u(gr,$t,null),t($t,Ng),t($t,Hc),t(Hc,Vg),p(e,Gd,m),p(e,Je,m),t(Je,Tt),t(Tt,Rc),u(ur,Rc,null),t(Je,Mg),t(Je,Kc),t(Kc,Gg),p(e,jd,m),p(e,Qe,m),u(hr,Qe,null),t(Qe,jg),t(Qe,Uc),t(Uc,Hg),p(e,Hd,m),p(e,Ze,m),u(_r,Ze,null),t(Ze,Rg),t(Ze,Yc),t(Yc,Kg),p(e,Rd,m),p(e,K,m),u(br,K,null),t(K,Ug),t(K,Xc),t(Xc,Yg),t(K,Xg),t(K,yt),u(vr,yt,null),t(yt,Jg),t(yt,Jc),t(Jc,Qg),p(e,Kd,m),p(e,et,m),t(et,kt),t(kt,Qc),u($r,Qc,null),t(et,Zg),t(et,Zc),t(Zc,eu),p(e,Ud,m),p(e,tt,m),u(Tr,tt,null),t(tt,tu),t(tt,el),t(el,ru),p(e,Yd,m),p(e,rt,m),u(yr,rt,null),t(rt,ou),t(rt,tl),t(tl,nu),p(e,Xd,m),p(e,ot,m),t(ot,xt),t(xt,rl),u(kr,rl,null),t(ot,su),t(ot,ol),t(ol,au),p(e,Jd,m),p(e,nt,m),u(xr,nt,null),t(nt,iu),t(nt,nl),t(nl,cu),p(e,Qd,m),p(e,st,m),u(wr,st,null),t(st,lu),t(st,sl),t(sl,du),p(e,Zd,m),p(e,at,m),t(at,wt),t(wt,al),u(Lr,al,null),t(at,mu),t(at,il),t(il,pu),p(e,em,m),p(e,Lt,m),t(Lt,fu),t(Lt,ps),t(ps,gu),t(Lt,uu),p(e,tm,m),p(e,U,m),u(Er,U,null),t(U,hu),t(U,cl),t(cl,_u),t(U,bu),t(U,Et),u(Pr,Et,null),t(Et,vu),t(Et,ll),t(ll,$u),p(e,rm,m),p(e,Y,m),u(Fr,Y,null),t(Y,Tu),t(Y,L),t(L,yu),t(L,fs),t(fs,ku),t(L,xu),t(L,gs),t(gs,wu),t(L,Lu),t(L,dl),t(dl,Eu),t(L,Pu),t(L,ml),t(ml,pl),t(pl,Fu),t(L,Du),t(L,us),t(us,Su),t(L,zu),t(L,hs),t(hs,Ou),t(L,qu),t(Y,Bu),t(Y,_s),u(Dr,_s,null),p(e,om,m),p(e,X,m),u(Sr,X,null),t(X,Iu),t(X,fl),t(fl,Au),t(X,Cu),t(X,Pt),u(zr,Pt,null),t(Pt,Wu),t(Pt,gl),t(gl,Nu),p(e,nm,m),p(e,J,m),u(Or,J,null),t(J,Vu),t(J,bs),t(bs,vs),t(vs,Mu),t(bs,Gu),t(J,ju),t(J,$s),u(qr,$s,null),p(e,sm,m),p(e,Q,m),u(Br,Q,null),t(Q,Hu),t(Q,Ts),t(Ts,ys),t(ys,Ru),t(Ts,Ku),t(Q,Uu),t(Q,ks),u(Ir,ks,null),p(e,am,m),p(e,Z,m),u(Ar,Z,null),t(Z,Yu),t(Z,xs),t(xs,ws),t(ws,Xu),t(xs,Ju),t(Z,Qu),t(Z,Ls),u(Cr,Ls,null),p(e,im,m),p(e,ee,m),u(Wr,ee,null),t(ee,Zu),t(ee,Es),t(Es,Ps),t(Ps,eh),t(Es,th),t(ee,rh),t(ee,Fs),u(Nr,Fs,null),p(e,cm,m),p(e,te,m),u(Vr,te,null),t(te,oh),t(te,Ds),t(Ds,Ss),t(Ss,nh),t(Ds,sh),t(te,ah),t(te,zs),u(Mr,zs,null),p(e,lm,m),p(e,re,m),u(Gr,re,null),t(re,ih),t(re,Ft),t(Ft,Os),t(Os,ch),t(Ft,lh),t(Ft,jr),t(jr,dh),t(Ft,mh),t(re,ph),t(re,qs),u(Hr,qs,null),p(e,dm,m),p(e,oe,m),u(Rr,oe,null),t(oe,fh),t(oe,Dt),t(Dt,Bs),t(Bs,gh),t(Dt,uh),t(Dt,Kr),t(Kr,hh),t(Dt,_h),t(oe,bh),t(oe,Is),u(Ur,Is,null),p(e,mm,m),p(e,ne,m),u(Yr,ne,null),t(ne,vh),t(ne,As),t(As,Cs),t(Cs,$h),t(As,Th),t(ne,yh),t(ne,Ws),u(Xr,Ws,null),p(e,pm,m),p(e,se,m),u(Jr,se,null),t(se,kh),t(se,St),t(St,Ns),t(Ns,xh),t(St,wh),t(St,Qr),t(Qr,Lh),t(St,Eh),t(se,Ph),t(se,Vs),u(Zr,Vs,null),p(e,fm,m),p(e,ae,m),u(eo,ae,null),t(ae,Fh),t(ae,Ne),t(Ne,Ms),t(Ms,Dh),t(Ne,Sh),t(Ne,Gs),t(Gs,zh),t(Ne,Oh),t(Ne,to),t(to,qh),t(Ne,Bh),t(ae,Ih),t(ae,js),u(ro,js,null),p(e,gm,m),p(e,ie,m),u(oo,ie,null),t(ie,Ah),t(ie,Hs),t(Hs,Rs),t(Rs,Ch),t(Hs,Wh),t(ie,Nh),t(ie,Ks),u(no,Ks,null),p(e,um,m),p(e,ce,m),u(so,ce,null),t(ce,Vh),t(ce,zt),t(zt,Us),t(Us,Mh),t(zt,Gh),t(zt,ul),t(ul,jh),t(zt,Hh),t(ce,Rh),t(ce,Ys),u(ao,Ys,null),p(e,hm,m),p(e,le,m),u(io,le,null),t(le,Kh),t(le,G),t(G,Xs),t(Xs,Uh),t(G,Yh),t(G,hl),t(hl,Xh),t(G,Jh),t(G,_l),t(_l,Qh),t(G,Zh),t(G,bl),t(bl,e_),t(G,t_),t(le,r_),t(le,Js),u(co,Js,null),p(e,_m,m),p(e,de,m),u(lo,de,null),t(de,o_),t(de,vl),t(vl,n_),t(de,s_),t(de,Ot),u(mo,Ot,null),t(Ot,a_),t(Ot,$l),t($l,i_),p(e,bm,m),p(e,me,m),u(po,me,null),t(me,c_),t(me,A),t(A,l_),t(A,Qs),t(Qs,d_),t(A,m_),t(A,Tl),t(Tl,p_),t(A,f_),t(A,yl),t(yl,kl),t(kl,g_),t(A,u_),t(A,Zs),t(Zs,h_),t(A,__),t(me,b_),t(me,ea),u(fo,ea,null),p(e,vm,m),p(e,pe,m),u(go,pe,null),t(pe,v_),t(pe,xl),t(xl,$_),t(pe,T_),t(pe,qt),u(uo,qt,null),t(qt,y_),t(qt,wl),t(wl,k_),p(e,$m,m),p(e,fe,m),u(ho,fe,null),t(fe,x_),t(fe,ta),t(ta,ra),t(ra,w_),t(ta,L_),t(fe,E_),t(fe,oa),u(_o,oa,null),p(e,Tm,m),p(e,ge,m),u(bo,ge,null),t(ge,P_),t(ge,na),t(na,sa),t(sa,F_),t(na,D_),t(ge,S_),t(ge,aa),u(vo,aa,null),p(e,ym,m),p(e,ue,m),u($o,ue,null),t(ue,z_),t(ue,ia),t(ia,ca),t(ca,O_),t(ia,q_),t(ue,B_),t(ue,la),u(To,la,null),p(e,km,m),p(e,he,m),u(yo,he,null),t(he,I_),t(he,da),t(da,ma),t(ma,A_),t(da,C_),t(he,W_),t(he,pa),u(ko,pa,null),p(e,xm,m),p(e,_e,m),u(xo,_e,null),t(_e,N_),t(_e,fa),t(fa,ga),t(ga,V_),t(fa,M_),t(_e,G_),t(_e,ua),u(wo,ua,null),p(e,wm,m),p(e,be,m),u(Lo,be,null),t(be,j_),t(be,Bt),t(Bt,ha),t(ha,H_),t(Bt,R_),t(Bt,Eo),t(Eo,K_),t(Bt,U_),t(be,Y_),t(be,_a),u(Po,_a,null),p(e,Lm,m),p(e,ve,m),u(Fo,ve,null),t(ve,X_),t(ve,ba),t(ba,va),t(va,J_),t(ba,Q_),t(ve,Z_),t(ve,$a),u(Do,$a,null),p(e,Em,m),p(e,$e,m),u(So,$e,null),t($e,eb),t($e,Ta),t(Ta,ya),t(ya,tb),t(Ta,rb),t($e,ob),t($e,ka),u(zo,ka,null),p(e,Pm,m),p(e,Te,m),u(Oo,Te,null),t(Te,nb),t(Te,It),t(It,xa),t(xa,sb),t(It,ab),t(It,Ll),t(Ll,ib),t(It,cb),t(Te,lb),t(Te,wa),u(qo,wa,null),p(e,Fm,m),p(e,ye,m),u(Bo,ye,null),t(ye,db),t(ye,El),t(El,mb),t(ye,pb),t(ye,At),u(Io,At,null),t(At,fb),t(At,Pl),t(Pl,gb),p(e,Dm,m),p(e,ke,m),u(Ao,ke,null),t(ke,ub),t(ke,E),t(E,hb),t(E,La),t(La,_b),t(E,bb),t(E,Ea),t(Ea,vb),t(E,$b),t(E,Fl),t(Fl,Tb),t(E,yb),t(E,Dl),t(Dl,Sl),t(Sl,kb),t(E,xb),t(E,Pa),t(Pa,wb),t(E,Lb),t(E,Fa),t(Fa,Eb),t(E,Pb),t(ke,Fb),t(ke,Da),u(Co,Da,null),p(e,Sm,m),p(e,xe,m),u(Wo,xe,null),t(xe,Db),t(xe,zl),t(zl,Sb),t(xe,zb),t(xe,Ct),u(No,Ct,null),t(Ct,Ob),t(Ct,Ol),t(Ol,qb),p(e,zm,m),p(e,we,m),u(Vo,we,null),t(we,Bb),t(we,Sa),t(Sa,za),t(za,Ib),t(Sa,Ab),t(we,Cb),t(we,Oa),u(Mo,Oa,null),p(e,Om,m),p(e,Le,m),u(Go,Le,null),t(Le,Wb),t(Le,qa),t(qa,Ba),t(Ba,Nb),t(qa,Vb),t(Le,Mb),t(Le,Ia),u(jo,Ia,null),p(e,qm,m),p(e,Ee,m),u(Ho,Ee,null),t(Ee,Gb),t(Ee,Aa),t(Aa,Ca),t(Ca,jb),t(Aa,Hb),t(Ee,Rb),t(Ee,Wa),u(Ro,Wa,null),p(e,Bm,m),p(e,Pe,m),u(Ko,Pe,null),t(Pe,Kb),t(Pe,Na),t(Na,Va),t(Va,Ub),t(Na,Yb),t(Pe,Xb),t(Pe,Ma),u(Uo,Ma,null),p(e,Im,m),p(e,Fe,m),u(Yo,Fe,null),t(Fe,Jb),t(Fe,Wt),t(Wt,Ga),t(Ga,Qb),t(Wt,Zb),t(Wt,ql),t(ql,ev),t(Wt,tv),t(Fe,rv),t(Fe,ja),u(Xo,ja,null),p(e,Am,m),p(e,De,m),u(Jo,De,null),t(De,ov),t(De,Ha),t(Ha,Ra),t(Ra,nv),t(Ha,sv),t(De,av),t(De,Ka),u(Qo,Ka,null),p(e,Cm,m),p(e,it,m),t(it,Nt),t(Nt,Bl),u(Zo,Bl,null),t(it,iv),t(it,Il),t(Il,cv),p(e,Wm,m),p(e,Vt,m),t(Vt,lv),t(Vt,Ua),t(Ua,dv),t(Vt,mv),p(e,Nm,m),p(e,Se,m),u(en,Se,null),t(Se,pv),t(Se,Al),t(Al,fv),t(Se,gv),t(Se,Ya),u(tn,Ya,null),p(e,Vm,m),p(e,ct,m),u(rn,ct,null),t(ct,uv),t(ct,Xa),u(on,Xa,null),p(e,Mm,m),p(e,ze,m),u(nn,ze,null),t(ze,hv),t(ze,sn),t(sn,_v),t(sn,Cl),t(Cl,bv),t(sn,vv),t(ze,$v),t(ze,Ja),u(an,Ja,null),p(e,Gm,m),p(e,Oe,m),u(cn,Oe,null),t(Oe,Tv),t(Oe,ln),t(ln,yv),t(ln,Wl),t(Wl,kv),t(ln,xv),t(Oe,wv),t(Oe,Qa),u(dn,Qa,null),p(e,jm,m),p(e,lt,m),t(lt,Mt),t(Mt,Nl),u(mn,Nl,null),t(lt,Lv),t(lt,Vl),t(Vl,Ev),p(e,Hm,m),p(e,Gt,m),t(Gt,Pv),t(Gt,Za),t(Za,Fv),t(Gt,Dv),p(e,Rm,m),p(e,$,m),u(pn,$,null),t($,Sv),t($,Ml),t(Ml,zv),t($,Ov),t($,Gl),t(Gl,qv),t($,Bv),u(jt,$,null),t($,Iv),t($,jl),t(jl,Av),t($,Cv),t($,Ht),u(fn,Ht,null),t(Ht,Wv),t(Ht,Hl),t(Hl,Nv),t($,Vv),t($,Rt),u(gn,Rt,null),t(Rt,Mv),t(Rt,Rl),t(Rl,Gv),t($,jv),t($,Kt),u(un,Kt,null),t(Kt,Hv),t(Kt,Kl),t(Kl,Rv),t($,Kv),t($,Ut),u(hn,Ut,null),t(Ut,Uv),t(Ut,_n),t(_n,Yv),t(_n,Ul),t(Ul,Xv),t(_n,Jv),t($,Qv),t($,Yt),u(bn,Yt,null),t(Yt,Zv),t(Yt,Yl),t(Yl,e$),t($,t$),t($,Xt),u(vn,Xt,null),t(Xt,r$),t(Xt,Xl),t(Xl,o$),t($,n$),t($,Ve),u($n,Ve,null),t(Ve,s$),t(Ve,Tn),t(Tn,a$),t(Tn,Jl),t(Jl,i$),t(Tn,c$),t(Ve,l$),t(Ve,Ql),t(Ql,d$),p(e,Km,m),p(e,dt,m),u(yn,dt,null),t(dt,m$),t(dt,ei),t(ei,ti),t(ti,p$),t(ei,f$),p(e,Um,m),p(e,mt,m),u(kn,mt,null),t(mt,g$),t(mt,xn),t(xn,u$),t(xn,ri),t(ri,h$),t(xn,_$),p(e,Ym,m),p(e,C,m),u(wn,C,null),t(C,b$),t(C,Zl),t(Zl,v$),t(C,$$),t(C,F),u(Ln,F,null),t(F,T$),t(F,ed),t(ed,y$),t(F,k$),t(F,pt),t(pt,x$),t(pt,td),t(td,w$),t(pt,L$),t(pt,rd),t(rd,E$),t(pt,P$),t(F,F$),t(F,od),t(od,nd),t(nd,D$),t(F,S$),t(F,qe),t(qe,z$),t(qe,sd),t(sd,O$),t(qe,q$),t(qe,ad),t(ad,B$),t(qe,I$),t(qe,id),t(id,A$),t(qe,C$),t(F,W$),t(F,cd),t(cd,N$),t(C,V$),t(C,Jt),u(En,Jt,null),t(Jt,M$),t(Jt,ld),t(ld,G$),p(e,Xm,m),p(e,ft,m),t(ft,Qt),t(Qt,dd),u(Pn,dd,null),t(ft,j$),t(ft,md),t(md,H$),p(e,Jm,m),p(e,W,m),u(Fn,W,null),t(W,R$),t(W,gt),t(gt,K$),t(gt,oi),t(oi,U$),t(gt,Y$),t(gt,ni),t(ni,X$),t(gt,J$),t(W,Q$),t(W,si),u(Dn,si,null),t(W,Z$),t(W,ai),u(Sn,ai,null),p(e,Qm,m),p(e,P,m),u(zn,P,null),t(P,eT),t(P,ii),t(ii,ci),t(ci,tT),t(ii,rT),t(P,oT),t(P,On),t(On,nT),t(On,qn),t(qn,sT),t(On,aT),t(P,iT),t(P,li),t(li,cT),t(li,Bn),t(Bn,lT),t(P,dT),t(P,di),u(In,di,null),t(P,mT),t(P,mi),u(An,mi,null),p(e,Zm,m),p(e,N,m),u(Cn,N,null),t(N,pT),t(N,pi),t(pi,fi),t(fi,fT),t(pi,gT),t(N,uT),t(N,gi),u(Wn,gi,null),t(N,hT),t(N,ui),u(Nn,ui,null),p(e,ep,m),p(e,ut,m),t(ut,Zt),t(Zt,pd),u(Vn,pd,null),t(ut,_T),t(ut,fd),t(fd,bT),p(e,tp,m),p(e,Be,m),u(Mn,Be,null),t(Be,vT),t(Be,gd),t(gd,$T),t(Be,TT),t(Be,hi),t(hi,yT),t(hi,Gn),t(Gn,kT),p(e,rp,m),p(e,Ie,m),u(jn,Ie,null),t(Ie,xT),t(Ie,ud),t(ud,wT),t(Ie,LT),t(Ie,_i),t(_i,ET),t(_i,Hn),t(Hn,PT),op=!0},p(e,[m]){const Rn={};m&2&&(Rn.$$scope={dirty:m,ctx:e}),jt.$set(Rn)},i(e){op||(h(ar.$$.fragment,e),h(ir.$$.fragment,e),h(cr.$$.fragment,e),h(lr.$$.fragment,e),h(dr.$$.fragment,e),h(mr.$$.fragment,e),h(pr.$$.fragment,e),h(fr.$$.fragment,e),h(gr.$$.fragment,e),h(ur.$$.fragment,e),h(hr.$$.fragment,e),h(_r.$$.fragment,e),h(br.$$.fragment,e),h(vr.$$.fragment,e),h($r.$$.fragment,e),h(Tr.$$.fragment,e),h(yr.$$.fragment,e),h(kr.$$.fragment,e),h(xr.$$.fragment,e),h(wr.$$.fragment,e),h(Lr.$$.fragment,e),h(Er.$$.fragment,e),h(Pr.$$.fragment,e),h(Fr.$$.fragment,e),h(Dr.$$.fragment,e),h(Sr.$$.fragment,e),h(zr.$$.fragment,e),h(Or.$$.fragment,e),h(qr.$$.fragment,e),h(Br.$$.fragment,e),h(Ir.$$.fragment,e),h(Ar.$$.fragment,e),h(Cr.$$.fragment,e),h(Wr.$$.fragment,e),h(Nr.$$.fragment,e),h(Vr.$$.fragment,e),h(Mr.$$.fragment,e),h(Gr.$$.fragment,e),h(Hr.$$.fragment,e),h(Rr.$$.fragment,e),h(Ur.$$.fragment,e),h(Yr.$$.fragment,e),h(Xr.$$.fragment,e),h(Jr.$$.fragment,e),h(Zr.$$.fragment,e),h(eo.$$.fragment,e),h(ro.$$.fragment,e),h(oo.$$.fragment,e),h(no.$$.fragment,e),h(so.$$.fragment,e),h(ao.$$.fragment,e),h(io.$$.fragment,e),h(co.$$.fragment,e),h(lo.$$.fragment,e),h(mo.$$.fragment,e),h(po.$$.fragment,e),h(fo.$$.fragment,e),h(go.$$.fragment,e),h(uo.$$.fragment,e),h(ho.$$.fragment,e),h(_o.$$.fragment,e),h(bo.$$.fragment,e),h(vo.$$.fragment,e),h($o.$$.fragment,e),h(To.$$.fragment,e),h(yo.$$.fragment,e),h(ko.$$.fragment,e),h(xo.$$.fragment,e),h(wo.$$.fragment,e),h(Lo.$$.fragment,e),h(Po.$$.fragment,e),h(Fo.$$.fragment,e),h(Do.$$.fragment,e),h(So.$$.fragment,e),h(zo.$$.fragment,e),h(Oo.$$.fragment,e),h(qo.$$.fragment,e),h(Bo.$$.fragment,e),h(Io.$$.fragment,e),h(Ao.$$.fragment,e),h(Co.$$.fragment,e),h(Wo.$$.fragment,e),h(No.$$.fragment,e),h(Vo.$$.fragment,e),h(Mo.$$.fragment,e),h(Go.$$.fragment,e),h(jo.$$.fragment,e),h(Ho.$$.fragment,e),h(Ro.$$.fragment,e),h(Ko.$$.fragment,e),h(Uo.$$.fragment,e),h(Yo.$$.fragment,e),h(Xo.$$.fragment,e),h(Jo.$$.fragment,e),h(Qo.$$.fragment,e),h(Zo.$$.fragment,e),h(en.$$.fragment,e),h(tn.$$.fragment,e),h(rn.$$.fragment,e),h(on.$$.fragment,e),h(nn.$$.fragment,e),h(an.$$.fragment,e),h(cn.$$.fragment,e),h(dn.$$.fragment,e),h(mn.$$.fragment,e),h(pn.$$.fragment,e),h(jt.$$.fragment,e),h(fn.$$.fragment,e),h(gn.$$.fragment,e),h(un.$$.fragment,e),h(hn.$$.fragment,e),h(bn.$$.fragment,e),h(vn.$$.fragment,e),h($n.$$.fragment,e),h(yn.$$.fragment,e),h(kn.$$.fragment,e),h(wn.$$.fragment,e),h(Ln.$$.fragment,e),h(En.$$.fragment,e),h(Pn.$$.fragment,e),h(Fn.$$.fragment,e),h(Dn.$$.fragment,e),h(Sn.$$.fragment,e),h(zn.$$.fragment,e),h(In.$$.fragment,e),h(An.$$.fragment,e),h(Cn.$$.fragment,e),h(Wn.$$.fragment,e),h(Nn.$$.fragment,e),h(Vn.$$.fragment,e),h(Mn.$$.fragment,e),h(jn.$$.fragment,e),op=!0)},o(e){_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(mr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(ur.$$.fragment,e),_(hr.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Ar.$$.fragment,e),_(Cr.$$.fragment,e),_(Wr.$$.fragment,e),_(Nr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(Hr.$$.fragment,e),_(Rr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(mo.$$.fragment,e),_(po.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(uo.$$.fragment,e),_(ho.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(an.$$.fragment,e),_(cn.$$.fragment,e),_(dn.$$.fragment,e),_(mn.$$.fragment,e),_(pn.$$.fragment,e),_(jt.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(hn.$$.fragment,e),_(bn.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(In.$$.fragment,e),_(An.$$.fragment,e),_(Cn.$$.fragment,e),_(Wn.$$.fragment,e),_(Nn.$$.fragment,e),_(Vn.$$.fragment,e),_(Mn.$$.fragment,e),_(jn.$$.fragment,e),op=!1},d(e){r(w),e&&r(Re),e&&r(k),b(ar),e&&r(xd),e&&r(y),e&&r(wd),e&&r(ts),e&&r(Ld),e&&r(Ke),b(ir),e&&r(Ed),e&&r(V),e&&r(Pd),e&&r(ss),e&&r(Fd),b(cr,e),e&&r(Dd),e&&r(We),e&&r(Sd),e&&r(M),e&&r(zd),e&&r(x),e&&r(Od),e&&r(S),e&&r(qd),e&&r(z),e&&r(Bd),b(lr,e),e&&r(Id),e&&r(bt),e&&r(Ad),e&&r(O),e&&r(Cd),e&&r(ms),e&&r(Wd),e&&r(Ue),b(dr),e&&r(Nd),e&&r(Ye),b(mr),e&&r(Vd),e&&r(Xe),b(pr),e&&r(Md),e&&r(R),b(fr),b(gr),e&&r(Gd),e&&r(Je),b(ur),e&&r(jd),e&&r(Qe),b(hr),e&&r(Hd),e&&r(Ze),b(_r),e&&r(Rd),e&&r(K),b(br),b(vr),e&&r(Kd),e&&r(et),b($r),e&&r(Ud),e&&r(tt),b(Tr),e&&r(Yd),e&&r(rt),b(yr),e&&r(Xd),e&&r(ot),b(kr),e&&r(Jd),e&&r(nt),b(xr),e&&r(Qd),e&&r(st),b(wr),e&&r(Zd),e&&r(at),b(Lr),e&&r(em),e&&r(Lt),e&&r(tm),e&&r(U),b(Er),b(Pr),e&&r(rm),e&&r(Y),b(Fr),b(Dr),e&&r(om),e&&r(X),b(Sr),b(zr),e&&r(nm),e&&r(J),b(Or),b(qr),e&&r(sm),e&&r(Q),b(Br),b(Ir),e&&r(am),e&&r(Z),b(Ar),b(Cr),e&&r(im),e&&r(ee),b(Wr),b(Nr),e&&r(cm),e&&r(te),b(Vr),b(Mr),e&&r(lm),e&&r(re),b(Gr),b(Hr),e&&r(dm),e&&r(oe),b(Rr),b(Ur),e&&r(mm),e&&r(ne),b(Yr),b(Xr),e&&r(pm),e&&r(se),b(Jr),b(Zr),e&&r(fm),e&&r(ae),b(eo),b(ro),e&&r(gm),e&&r(ie),b(oo),b(no),e&&r(um),e&&r(ce),b(so),b(ao),e&&r(hm),e&&r(le),b(io),b(co),e&&r(_m),e&&r(de),b(lo),b(mo),e&&r(bm),e&&r(me),b(po),b(fo),e&&r(vm),e&&r(pe),b(go),b(uo),e&&r($m),e&&r(fe),b(ho),b(_o),e&&r(Tm),e&&r(ge),b(bo),b(vo),e&&r(ym),e&&r(ue),b($o),b(To),e&&r(km),e&&r(he),b(yo),b(ko),e&&r(xm),e&&r(_e),b(xo),b(wo),e&&r(wm),e&&r(be),b(Lo),b(Po),e&&r(Lm),e&&r(ve),b(Fo),b(Do),e&&r(Em),e&&r($e),b(So),b(zo),e&&r(Pm),e&&r(Te),b(Oo),b(qo),e&&r(Fm),e&&r(ye),b(Bo),b(Io),e&&r(Dm),e&&r(ke),b(Ao),b(Co),e&&r(Sm),e&&r(xe),b(Wo),b(No),e&&r(zm),e&&r(we),b(Vo),b(Mo),e&&r(Om),e&&r(Le),b(Go),b(jo),e&&r(qm),e&&r(Ee),b(Ho),b(Ro),e&&r(Bm),e&&r(Pe),b(Ko),b(Uo),e&&r(Im),e&&r(Fe),b(Yo),b(Xo),e&&r(Am),e&&r(De),b(Jo),b(Qo),e&&r(Cm),e&&r(it),b(Zo),e&&r(Wm),e&&r(Vt),e&&r(Nm),e&&r(Se),b(en),b(tn),e&&r(Vm),e&&r(ct),b(rn),b(on),e&&r(Mm),e&&r(ze),b(nn),b(an),e&&r(Gm),e&&r(Oe),b(cn),b(dn),e&&r(jm),e&&r(lt),b(mn),e&&r(Hm),e&&r(Gt),e&&r(Rm),e&&r($),b(pn),b(jt),b(fn),b(gn),b(un),b(hn),b(bn),b(vn),b($n),e&&r(Km),e&&r(dt),b(yn),e&&r(Um),e&&r(mt),b(kn),e&&r(Ym),e&&r(C),b(wn),b(Ln),b(En),e&&r(Xm),e&&r(ft),b(Pn),e&&r(Jm),e&&r(W),b(Fn),b(Dn),b(Sn),e&&r(Qm),e&&r(P),b(zn),b(In),b(An),e&&r(Zm),e&&r(N),b(Cn),b(Wn),b(Nn),e&&r(ep),e&&r(ut),b(Vn),e&&r(tp),e&&r(Be),b(Mn),e&&r(rp),e&&r(Ie),b(jn)}}}const Ok={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function qk(kd){return Pk(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nk extends xk{constructor(w){super();wk(this,w,qk,zk,Lk,{})}}export{Nk as default,Ok as metadata};
