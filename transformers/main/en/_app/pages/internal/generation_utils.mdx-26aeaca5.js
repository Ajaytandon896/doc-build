import{S as s4,i as a4,s as i4,e as o,k as c,w as f,t as a,M as c4,c as n,d as r,m as l,a as s,x as g,h as i,b as d,F as t,g as p,y as h,L as l4,q as u,o as _,B as b,v as d4}from"../../chunks/vendor-6b77c823.js";import{D as v}from"../../chunks/Docstring-1088f2fb.js";import{C as V2}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as qe}from"../../chunks/IconCopyLink-7a11ce68.js";function m4(M2){let Me,pd,Ge,gt,rc,rr,Wp,oc,Np,fd,y,Vp,Vn,Mp,Gp,Mn,jp,Hp,Gn,Rp,Kp,jn,Up,Yp,Hn,Xp,Jp,Rn,Qp,Zp,Kn,ef,tf,gd,Un,rf,hd,je,ht,nc,or,of,sc,nf,ud,W,sf,Yn,af,cf,Xn,lf,df,Jn,mf,pf,_d,Qn,ff,bd,nr,vd,Be,gf,ac,hf,uf,Zn,_f,bf,$d,N,es,ic,vf,$f,Tf,ts,cc,yf,kf,xf,rs,lc,wf,Lf,Ef,os,dc,Pf,Ff,Td,k,Df,mc,Sf,zf,pc,Of,qf,fc,Bf,If,gc,Cf,Af,hc,Wf,Nf,uc,Vf,Mf,yd,F,Gf,_c,jf,Hf,bc,Rf,Kf,vc,Uf,Yf,$c,Xf,Jf,kd,D,Qf,Tc,Zf,eg,yc,tg,rg,kc,og,ng,xc,sg,ag,xd,sr,wd,ut,ig,wc,cg,lg,Ld,S,dg,Lc,mg,pg,Ec,fg,gg,Pc,hg,ug,Fc,_g,bg,Ed,ns,vg,Pd,He,_t,Dc,ar,$g,Sc,Tg,Fd,Re,ir,yg,zc,kg,Dd,Ke,cr,xg,Oc,wg,Sd,j,lr,Lg,qc,Eg,Pg,bt,dr,Fg,Bc,Dg,zd,Ue,vt,Ic,mr,Sg,Cc,zg,Od,Ye,pr,Og,Ac,qg,qd,Xe,fr,Bg,Wc,Ig,Bd,H,gr,Cg,Nc,Ag,Wg,$t,hr,Ng,Vc,Vg,Id,Je,Tt,Mc,ur,Mg,Gc,Gg,Cd,Qe,_r,jg,jc,Hg,Ad,Ze,br,Rg,Hc,Kg,Wd,et,yt,Rc,vr,Ug,Kc,Yg,Nd,tt,$r,Xg,Uc,Jg,Vd,rt,Tr,Qg,Yc,Zg,Md,ot,kt,Xc,yr,eh,Jc,th,Gd,xt,rh,ss,oh,nh,jd,R,kr,sh,Qc,ah,ih,wt,xr,ch,Zc,lh,Hd,K,wr,dh,x,mh,as,ph,fh,is,gh,hh,el,uh,_h,tl,rl,bh,vh,cs,$h,Th,ls,yh,kh,xh,ds,Lr,Rd,U,Er,wh,ol,Lh,Eh,Lt,Pr,Ph,nl,Fh,Kd,Y,Fr,Dh,ms,ps,Sh,zh,Oh,fs,Dr,Ud,X,Sr,qh,gs,hs,Bh,Ih,Ch,us,zr,Yd,J,Or,Ah,_s,bs,Wh,Nh,Vh,vs,qr,Xd,Q,Br,Mh,$s,Ts,Gh,jh,Hh,ys,Ir,Jd,Z,Cr,Rh,ks,xs,Kh,Uh,Yh,ws,Ar,Qd,ee,Wr,Xh,Et,Ls,Jh,Qh,Nr,Zh,eu,tu,Es,Vr,Zd,te,Mr,ru,Ps,Fs,ou,nu,su,Ds,Gr,em,re,jr,au,Pt,Ss,iu,cu,Hr,lu,du,mu,zs,Rr,tm,oe,Kr,pu,Ie,Os,fu,gu,qs,hu,uu,Ur,_u,bu,vu,Bs,Yr,rm,ne,Xr,$u,Is,Cs,Tu,yu,ku,As,Jr,om,se,Qr,xu,Ft,Ws,wu,Lu,sl,Eu,Pu,Fu,Ns,Zr,nm,ae,eo,Du,V,Vs,Su,zu,al,Ou,qu,il,Bu,Iu,cl,Cu,Au,Wu,Ms,to,sm,ie,ro,Nu,ll,Vu,Mu,Dt,oo,Gu,dl,ju,am,ce,no,Hu,B,Ru,Gs,Ku,Uu,ml,Yu,Xu,pl,fl,Ju,Qu,js,Zu,e_,t_,Hs,so,im,le,ao,r_,gl,o_,n_,St,io,s_,hl,a_,cm,de,co,i_,Rs,Ks,c_,l_,d_,Us,lo,lm,me,mo,m_,Ys,Xs,p_,f_,g_,Js,po,dm,pe,fo,h_,Qs,Zs,u_,__,b_,ea,go,mm,fe,ho,v_,ta,ra,$_,T_,y_,oa,uo,pm,ge,_o,k_,na,sa,x_,w_,L_,aa,bo,fm,he,vo,E_,zt,ia,P_,F_,$o,D_,S_,z_,ca,To,gm,ue,yo,O_,la,da,q_,B_,I_,ma,ko,hm,_e,xo,C_,pa,fa,A_,W_,N_,ga,wo,um,be,Lo,V_,Ot,ha,M_,G_,ul,j_,H_,R_,ua,Eo,_m,ve,Po,K_,_l,U_,Y_,qt,Fo,X_,bl,J_,bm,$e,Do,Q_,w,Z_,_a,eb,tb,ba,rb,ob,vl,nb,sb,$l,Tl,ab,ib,va,cb,lb,$a,db,mb,pb,Ta,So,vm,Te,zo,fb,yl,gb,hb,Bt,Oo,ub,kl,_b,$m,ye,qo,bb,ya,ka,vb,$b,Tb,xa,Bo,Tm,ke,Io,yb,wa,La,kb,xb,wb,Ea,Co,ym,xe,Ao,Lb,Pa,Fa,Eb,Pb,Fb,Da,Wo,km,we,No,Db,Sa,za,Sb,zb,Ob,Oa,Vo,xm,Le,Mo,qb,It,qa,Bb,Ib,xl,Cb,Ab,Wb,Ba,Go,wm,Ee,jo,Nb,Ia,Ca,Vb,Mb,Gb,Aa,Ho,Lm,nt,Ct,wl,Ro,jb,Ll,Hb,Em,At,Rb,Wa,Kb,Ub,Pm,Pe,Ko,Yb,El,Xb,Jb,Na,Uo,Fm,st,Yo,Qb,Va,Xo,Dm,Fe,Jo,Zb,Qo,ev,Pl,tv,rv,ov,Ma,Zo,Sm,De,en,nv,tn,sv,Fl,av,iv,cv,Ga,rn,zm,at,Wt,Dl,on,lv,Sl,dv,Om,Nt,mv,ja,pv,fv,qm,$,nn,gv,zl,hv,uv,Ol,_v,bv,sn,vv,ql,$v,Tv,Vt,an,yv,Bl,kv,xv,Mt,cn,wv,Il,Lv,Ev,Gt,ln,Pv,Cl,Fv,Dv,jt,dn,Sv,mn,zv,Al,Ov,qv,Bv,Ht,pn,Iv,Wl,Cv,Av,Rt,fn,Wv,Nl,Nv,Vv,Ce,gn,Mv,hn,Gv,Vl,jv,Hv,Rv,Ml,Kv,Bm,it,un,Uv,Ha,Ra,Yv,Xv,Im,ct,_n,Jv,bn,Qv,Ka,Zv,e$,Cm,I,vn,t$,Gl,r$,o$,E,$n,n$,jl,s$,a$,lt,i$,Hl,c$,l$,Rl,d$,m$,p$,Kl,Ul,f$,g$,Se,h$,Yl,u$,_$,Xl,b$,v$,Jl,$$,T$,y$,Ql,k$,x$,Kt,Tn,w$,Zl,L$,Am,dt,Ut,ed,yn,E$,td,P$,Wm,C,kn,F$,mt,D$,Ua,S$,z$,Ya,O$,q$,B$,Xa,xn,I$,Ja,wn,Nm,L,Ln,C$,Qa,Za,A$,W$,N$,En,V$,Pn,M$,G$,j$,ei,H$,Fn,R$,K$,ti,Dn,U$,ri,Sn,Vm,A,zn,Y$,oi,ni,X$,J$,Q$,si,On,Z$,ai,qn,Mm,pt,Yt,rd,Bn,e2,od,t2,Gm,ze,In,r2,nd,o2,n2,ii,s2,Cn,a2,jm,Oe,An,i2,sd,c2,l2,ci,d2,Wn,m2,Hm;return rr=new qe({}),or=new qe({}),nr=new V2({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),sr=new V2({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),ar=new qe({}),ir=new v({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L62"}}),cr=new v({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L90"}}),lr=new v({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L44"}}),dr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L120"}}),mr=new qe({}),pr=new v({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L132"}}),fr=new v({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L161"}}),gr=new v({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_utils.py#L58"}}),hr=new v({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/flax/struct.py#L120"}}),ur=new qe({}),_r=new v({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L204"}}),br=new v({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L239"}}),vr=new qe({}),$r=new v({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L290"}}),Tr=new v({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L325"}}),yr=new qe({}),kr=new v({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L51"}}),xr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L54",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wr=new v({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L73"}}),Lr=new v({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L80",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Er=new v({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L62"}}),Pr=new v({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L65",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Fr=new v({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L96"}}),Dr=new v({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L117"}}),Sr=new v({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L124"}}),zr=new v({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L139"}}),Or=new v({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L144"}}),qr=new v({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L160"}}),Br=new v({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L170"}}),Ir=new v({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L193"}}),Cr=new v({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L212"}}),Ar=new v({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L233"}}),Wr=new v({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L312"}}),Vr=new v({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L327"}}),Mr=new v({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L379"}}),Gr=new v({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L421"}}),jr=new v({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L507"}}),Rr=new v({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L524"}}),Kr=new v({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L533"}}),Yr=new v({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L564"}}),Xr=new v({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L593"}}),Jr=new v({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L605"}}),Qr=new v({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L614"}}),Zr=new v({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L629"}}),eo=new v({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L638"}}),to=new v({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_logits_process.py#L645"}}),ro=new v({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L49"}}),oo=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L52",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),no=new v({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L71"}}),so=new v({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L78",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ao=new v({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L60"}}),io=new v({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L63",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),co=new v({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L94"}}),lo=new v({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L109"}}),mo=new v({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L143"}}),po=new v({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L165"}}),fo=new v({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L114"}}),go=new v({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L135"}}),ho=new v({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L197"}}),uo=new v({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L223"}}),_o=new v({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L281"}}),bo=new v({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L344"}}),vo=new v({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L362"}}),To=new v({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L401"}}),yo=new v({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L233"}}),ko=new v({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L273"}}),xo=new v({props:{name:"class transformers.TFForcedBOSTokenLogitsProcessor",anchor:"transformers.TFForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L418"}}),wo=new v({props:{name:"__call__",anchor:"transformers.TFForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L432"}}),Lo=new v({props:{name:"class transformers.TFForcedEOSTokenLogitsProcessor",anchor:"transformers.TFForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.TFForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L448"}}),Eo=new v({props:{name:"__call__",anchor:"transformers.TFForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_logits_process.py#L465"}}),Po=new v({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L50"}}),Fo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L53",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Do=new v({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L72"}}),So=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L79",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),zo=new v({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L61"}}),Oo=new v({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L64",returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),qo=new v({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L95"}}),Bo=new v({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L110"}}),Io=new v({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L115"}}),Co=new v({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L137"}}),Ao=new v({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L157"}}),Wo=new v({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L178"}}),No=new v({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L193"}}),Vo=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L205"}}),Mo=new v({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L215"}}),Go=new v({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L230"}}),jo=new v({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L240"}}),Ho=new v({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_flax_logits_process.py#L261"}}),Ro=new qe({}),Ko=new v({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L33"}}),Uo=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L36",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Yo=new v({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L110"}}),Xo=new v({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L111",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Jo=new v({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L41"}}),Zo=new v({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L54",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),en=new v({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L88"}}),rn=new v({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_stopping_criteria.py#L105",returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),on=new qe({}),nn=new v({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L5"}}),sn=new V2({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),an=new v({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),cn=new v({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),ln=new v({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L60"}}),dn=new v({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L104"}}),pn=new v({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L94"}}),fn=new v({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L24"}}),gn=new v({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),un=new v({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L129"}}),_n=new v({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L260"}}),vn=new v({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L349"}}),$n=new v({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L381"}}),Tn=new v({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_constraints.py#L416"}}),yn=new qe({}),kn=new v({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L88"}}),xn=new v({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L94",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),wn=new v({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L106",returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),Ln=new v({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L120"}}),Dn=new v({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L206"}}),Sn=new v({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L291"}}),zn=new v({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/main/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L356"}}),On=new v({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L450",returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),qn=new v({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_beam_search.py#L725"}}),Bn=new qe({}),In=new v({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_utils.py#L3315"}}),An=new v({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/generation_tf_utils.py#L3034"}}),{c(){Me=o("meta"),pd=c(),Ge=o("h1"),gt=o("a"),rc=o("span"),f(rr.$$.fragment),Wp=c(),oc=o("span"),Np=a("Utilities for Generation"),fd=c(),y=o("p"),Vp=a("This page lists all the utility functions used by "),Vn=o("a"),Mp=a("generate()"),Gp=a(`,
`),Mn=o("a"),jp=a("greedy_search()"),Hp=a(`,
`),Gn=o("a"),Rp=a("sample()"),Kp=a(`,
`),jn=o("a"),Up=a("beam_search()"),Yp=a(`,
`),Hn=o("a"),Xp=a("beam_sample()"),Jp=a(`,
`),Rn=o("a"),Qp=a("group_beam_search()"),Zp=a(`, and
`),Kn=o("a"),ef=a("constrained_beam_search()"),tf=a("."),gd=c(),Un=o("p"),rf=a("Most of those are only useful if you are studying the code of the generate methods in the library."),hd=c(),je=o("h2"),ht=o("a"),nc=o("span"),f(or.$$.fragment),of=c(),sc=o("span"),nf=a("Generate Outputs"),ud=c(),W=o("p"),sf=a("The output of "),Yn=o("a"),af=a("generate()"),cf=a(` is an instance of a subclass of
`),Xn=o("a"),lf=a("ModelOutput"),df=a(`. This output is a data structure containing all the information returned
by `),Jn=o("a"),mf=a("generate()"),pf=a(", but that can also be used as tuple or dictionary."),_d=c(),Qn=o("p"),ff=a("Here\u2019s an example:"),bd=c(),f(nr.$$.fragment),vd=c(),Be=o("p"),gf=a("The "),ac=o("code"),hf=a("generation_output"),uf=a(" object is a "),Zn=o("a"),_f=a("GreedySearchDecoderOnlyOutput"),bf=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),$d=c(),N=o("ul"),es=o("li"),ic=o("code"),vf=a("sequences"),$f=a(": the generated sequences of tokens"),Tf=c(),ts=o("li"),cc=o("code"),yf=a("scores"),kf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),xf=c(),rs=o("li"),lc=o("code"),wf=a("hidden_states"),Lf=a(" (optional): the hidden states of the model, for each generation step"),Ef=c(),os=o("li"),dc=o("code"),Pf=a("attentions"),Ff=a(" (optional): the attention weights of the model, for each generation step"),Td=c(),k=o("p"),Df=a("Here we have the "),mc=o("code"),Sf=a("scores"),zf=a(" since we passed along "),pc=o("code"),Of=a("output_scores=True"),qf=a(", but we don\u2019t have "),fc=o("code"),Bf=a("hidden_states"),If=a(` and
`),gc=o("code"),Cf=a("attentions"),Af=a(" because we didn\u2019t pass "),hc=o("code"),Wf=a("output_hidden_states=True"),Nf=a(" or "),uc=o("code"),Vf=a("output_attentions=True"),Mf=a("."),yd=c(),F=o("p"),Gf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),_c=o("code"),jf=a("None"),Hf=a(". Here for instance "),bc=o("code"),Rf=a("generation_output.scores"),Kf=a(` are all the generated prediction scores of the
language modeling head, and `),vc=o("code"),Uf=a("generation_output.attentions"),Yf=a(" is "),$c=o("code"),Xf=a("None"),Jf=a("."),kd=c(),D=o("p"),Qf=a("When using our "),Tc=o("code"),Zf=a("generation_output"),eg=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),yc=o("code"),tg=a("None"),rg=a(` values.
Here, for instance, it has two elements, `),kc=o("code"),og=a("loss"),ng=a(" then "),xc=o("code"),sg=a("logits"),ag=a(", so"),xd=c(),f(sr.$$.fragment),wd=c(),ut=o("p"),ig=a("will return the tuple "),wc=o("code"),cg=a("(generation_output.sequences, generation_output.scores)"),lg=a(" for instance."),Ld=c(),S=o("p"),dg=a("When using our "),Lc=o("code"),mg=a("generation_output"),pg=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),Ec=o("code"),fg=a("None"),gg=a(`
values. Here, for instance, it has two keys that are `),Pc=o("code"),hg=a("sequences"),ug=a(" and "),Fc=o("code"),_g=a("scores"),bg=a("."),Ed=c(),ns=o("p"),vg=a("We document here all output types."),Pd=c(),He=o("h3"),_t=o("a"),Dc=o("span"),f(ar.$$.fragment),$g=c(),Sc=o("span"),Tg=a("GreedySearchOutput"),Fd=c(),Re=o("div"),f(ir.$$.fragment),yg=c(),zc=o("p"),kg=a("Base class for outputs of decoder-only generation models using greedy search."),Dd=c(),Ke=o("div"),f(cr.$$.fragment),xg=c(),Oc=o("p"),wg=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Sd=c(),j=o("div"),f(lr.$$.fragment),Lg=c(),qc=o("p"),Eg=a("Flax Base class for outputs of decoder-only generation models using greedy search."),Pg=c(),bt=o("div"),f(dr.$$.fragment),Fg=c(),Bc=o("p"),Dg=a("\u201CReturns a new object replacing the specified fields with new values."),zd=c(),Ue=o("h3"),vt=o("a"),Ic=o("span"),f(mr.$$.fragment),Sg=c(),Cc=o("span"),zg=a("SampleOutput"),Od=c(),Ye=o("div"),f(pr.$$.fragment),Og=c(),Ac=o("p"),qg=a("Base class for outputs of decoder-only generation models using sampling."),qd=c(),Xe=o("div"),f(fr.$$.fragment),Bg=c(),Wc=o("p"),Ig=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Bd=c(),H=o("div"),f(gr.$$.fragment),Cg=c(),Nc=o("p"),Ag=a("Flax Base class for outputs of decoder-only generation models using sampling."),Wg=c(),$t=o("div"),f(hr.$$.fragment),Ng=c(),Vc=o("p"),Vg=a("\u201CReturns a new object replacing the specified fields with new values."),Id=c(),Je=o("h3"),Tt=o("a"),Mc=o("span"),f(ur.$$.fragment),Mg=c(),Gc=o("span"),Gg=a("BeamSearchOutput"),Cd=c(),Qe=o("div"),f(_r.$$.fragment),jg=c(),jc=o("p"),Hg=a("Base class for outputs of decoder-only generation models using beam search."),Ad=c(),Ze=o("div"),f(br.$$.fragment),Rg=c(),Hc=o("p"),Kg=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Wd=c(),et=o("h3"),yt=o("a"),Rc=o("span"),f(vr.$$.fragment),Ug=c(),Kc=o("span"),Yg=a("BeamSampleOutput"),Nd=c(),tt=o("div"),f($r.$$.fragment),Xg=c(),Uc=o("p"),Jg=a("Base class for outputs of decoder-only generation models using beam sample."),Vd=c(),rt=o("div"),f(Tr.$$.fragment),Qg=c(),Yc=o("p"),Zg=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),Md=c(),ot=o("h2"),kt=o("a"),Xc=o("span"),f(yr.$$.fragment),eh=c(),Jc=o("span"),th=a("LogitsProcessor"),Gd=c(),xt=o("p"),rh=a("A "),ss=o("a"),oh=a("LogitsProcessor"),nh=a(` can be used to modify the prediction scores of a language model head for
generation.`),jd=c(),R=o("div"),f(kr.$$.fragment),sh=c(),Qc=o("p"),ah=a("Abstract base class for all logit processors that can be applied during generation."),ih=c(),wt=o("div"),f(xr.$$.fragment),ch=c(),Zc=o("p"),lh=a("Torch method for processing logits."),Hd=c(),K=o("div"),f(wr.$$.fragment),dh=c(),x=o("p"),mh=a("This class can be used to create a list of "),as=o("a"),ph=a("LogitsProcessor"),fh=a(" or "),is=o("a"),gh=a("LogitsWarper"),hh=a(` to subsequently process a
`),el=o("code"),uh=a("scores"),_h=a(" input tensor. This class inherits from list and adds a specific "),tl=o("em"),rl=o("strong"),bh=a("call"),vh=a(` method to apply each
`),cs=o("a"),$h=a("LogitsProcessor"),Th=a(" or "),ls=o("a"),yh=a("LogitsWarper"),kh=a(" to the inputs."),xh=c(),ds=o("div"),f(Lr.$$.fragment),Rd=c(),U=o("div"),f(Er.$$.fragment),wh=c(),ol=o("p"),Lh=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Eh=c(),Lt=o("div"),f(Pr.$$.fragment),Ph=c(),nl=o("p"),Fh=a("Torch method for warping logits."),Kd=c(),Y=o("div"),f(Fr.$$.fragment),Dh=c(),ms=o("p"),ps=o("a"),Sh=a("LogitsProcessor"),zh=a(" enforcing a min-length by setting EOS probability to 0."),Oh=c(),fs=o("div"),f(Dr.$$.fragment),Ud=c(),X=o("div"),f(Sr.$$.fragment),qh=c(),gs=o("p"),hs=o("a"),Bh=a("LogitsWarper"),Ih=a(" for temperature (exponential scaling output probability distribution)."),Ch=c(),us=o("div"),f(zr.$$.fragment),Yd=c(),J=o("div"),f(Or.$$.fragment),Ah=c(),_s=o("p"),bs=o("a"),Wh=a("LogitsProcessor"),Nh=a(" enforcing an exponential penalty on repeated sequences."),Vh=c(),vs=o("div"),f(qr.$$.fragment),Xd=c(),Q=o("div"),f(Br.$$.fragment),Mh=c(),$s=o("p"),Ts=o("a"),Gh=a("LogitsWarper"),jh=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Hh=c(),ys=o("div"),f(Ir.$$.fragment),Jd=c(),Z=o("div"),f(Cr.$$.fragment),Rh=c(),ks=o("p"),xs=o("a"),Kh=a("LogitsWarper"),Uh=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Yh=c(),ws=o("div"),f(Ar.$$.fragment),Qd=c(),ee=o("div"),f(Wr.$$.fragment),Xh=c(),Et=o("p"),Ls=o("a"),Jh=a("LogitsProcessor"),Qh=a(` that enforces no repetition of n-grams. See
`),Nr=o("a"),Zh=a("Fairseq"),eu=a("."),tu=c(),Es=o("div"),f(Vr.$$.fragment),Zd=c(),te=o("div"),f(Mr.$$.fragment),ru=c(),Ps=o("p"),Fs=o("a"),ou=a("LogitsProcessor"),nu=a(" that enforces that specified sequences will never be sampled."),su=c(),Ds=o("div"),f(Gr.$$.fragment),em=c(),re=o("div"),f(jr.$$.fragment),au=c(),Pt=o("p"),Ss=o("a"),iu=a("LogitsProcessor"),cu=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Hr=o("a"),lu=a("Autoregressive Entity Retrieval"),du=a(" for more information."),mu=c(),zs=o("div"),f(Rr.$$.fragment),tm=c(),oe=o("div"),f(Kr.$$.fragment),pu=c(),Ie=o("p"),Os=o("a"),fu=a("LogitsProcessor"),gu=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),qs=o("a"),hu=a("PreTrainedModel.group_beam_search()"),uu=a(". See "),Ur=o("a"),_u=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),bu=a(" for more details."),vu=c(),Bs=o("div"),f(Yr.$$.fragment),rm=c(),ne=o("div"),f(Xr.$$.fragment),$u=c(),Is=o("p"),Cs=o("a"),Tu=a("LogitsProcessor"),yu=a(" that enforces the specified token as the first generated token."),ku=c(),As=o("div"),f(Jr.$$.fragment),om=c(),se=o("div"),f(Qr.$$.fragment),xu=c(),Ft=o("p"),Ws=o("a"),wu=a("LogitsProcessor"),Lu=a(" that enforces the specified token as the last generated token when "),sl=o("code"),Eu=a("max_length"),Pu=a(" is reached."),Fu=c(),Ns=o("div"),f(Zr.$$.fragment),nm=c(),ae=o("div"),f(eo.$$.fragment),Du=c(),V=o("p"),Vs=o("a"),Su=a("LogitsProcessor"),zu=a(" that removes all "),al=o("code"),Ou=a("nan"),qu=a(" and "),il=o("code"),Bu=a("inf"),Iu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),cl=o("code"),Cu=a("max_length"),Au=a(` is
reached.`),Wu=c(),Ms=o("div"),f(to.$$.fragment),sm=c(),ie=o("div"),f(ro.$$.fragment),Nu=c(),ll=o("p"),Vu=a("Abstract base class for all logit processors that can be applied during generation."),Mu=c(),Dt=o("div"),f(oo.$$.fragment),Gu=c(),dl=o("p"),ju=a("TF method for processing logits."),am=c(),ce=o("div"),f(no.$$.fragment),Hu=c(),B=o("p"),Ru=a("This class can be used to create a list of "),Gs=o("a"),Ku=a("TFLogitsProcessor"),Uu=a(" to subsequently process a "),ml=o("code"),Yu=a("scores"),Xu=a(` input tensor.
This class inherits from list and adds a specific `),pl=o("em"),fl=o("strong"),Ju=a("call"),Qu=a(" method to apply each "),js=o("a"),Zu=a("TFLogitsProcessor"),e_=a(` to the
inputs.`),t_=c(),Hs=o("div"),f(so.$$.fragment),im=c(),le=o("div"),f(ao.$$.fragment),r_=c(),gl=o("p"),o_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),n_=c(),St=o("div"),f(io.$$.fragment),s_=c(),hl=o("p"),a_=a("TF method for warping logits."),cm=c(),de=o("div"),f(co.$$.fragment),i_=c(),Rs=o("p"),Ks=o("a"),c_=a("TFLogitsWarper"),l_=a(" for temperature (exponential scaling output probability distribution)."),d_=c(),Us=o("div"),f(lo.$$.fragment),lm=c(),me=o("div"),f(mo.$$.fragment),m_=c(),Ys=o("p"),Xs=o("a"),p_=a("TFLogitsWarper"),f_=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),g_=c(),Js=o("div"),f(po.$$.fragment),dm=c(),pe=o("div"),f(fo.$$.fragment),h_=c(),Qs=o("p"),Zs=o("a"),u_=a("TFLogitsWarper"),__=a(" that performs top-k, i.e. restricting to the k highest probability elements."),b_=c(),ea=o("div"),f(go.$$.fragment),mm=c(),fe=o("div"),f(ho.$$.fragment),v_=c(),ta=o("p"),ra=o("a"),$_=a("TFLogitsProcessor"),T_=a(" enforcing a min-length by setting EOS probability to 0."),y_=c(),oa=o("div"),f(uo.$$.fragment),pm=c(),ge=o("div"),f(_o.$$.fragment),k_=c(),na=o("p"),sa=o("a"),x_=a("TFLogitsProcessor"),w_=a(" that enforces that specified sequences will never be sampled."),L_=c(),aa=o("div"),f(bo.$$.fragment),fm=c(),he=o("div"),f(vo.$$.fragment),E_=c(),zt=o("p"),ia=o("a"),P_=a("TFLogitsProcessor"),F_=a(` that enforces no repetition of n-grams. See
`),$o=o("a"),D_=a("Fairseq"),S_=a("."),z_=c(),ca=o("div"),f(To.$$.fragment),gm=c(),ue=o("div"),f(yo.$$.fragment),O_=c(),la=o("p"),da=o("a"),q_=a("TFLogitsProcessor"),B_=a(" enforcing an exponential penalty on repeated sequences."),I_=c(),ma=o("div"),f(ko.$$.fragment),hm=c(),_e=o("div"),f(xo.$$.fragment),C_=c(),pa=o("p"),fa=o("a"),A_=a("TFLogitsProcessor"),W_=a(" that enforces the specified token as the first generated token."),N_=c(),ga=o("div"),f(wo.$$.fragment),um=c(),be=o("div"),f(Lo.$$.fragment),V_=c(),Ot=o("p"),ha=o("a"),M_=a("TFLogitsProcessor"),G_=a(" that enforces the specified token as the last generated token when "),ul=o("code"),j_=a("max_length"),H_=a(" is reached."),R_=c(),ua=o("div"),f(Eo.$$.fragment),_m=c(),ve=o("div"),f(Po.$$.fragment),K_=c(),_l=o("p"),U_=a("Abstract base class for all logit processors that can be applied during generation."),Y_=c(),qt=o("div"),f(Fo.$$.fragment),X_=c(),bl=o("p"),J_=a("Flax method for processing logits."),bm=c(),$e=o("div"),f(Do.$$.fragment),Q_=c(),w=o("p"),Z_=a("This class can be used to create a list of "),_a=o("a"),eb=a("FlaxLogitsProcessor"),tb=a(" or "),ba=o("a"),rb=a("FlaxLogitsWarper"),ob=a(` to subsequently process
a `),vl=o("code"),nb=a("scores"),sb=a(" input tensor. This class inherits from list and adds a specific "),$l=o("em"),Tl=o("strong"),ab=a("call"),ib=a(` method to apply each
`),va=o("a"),cb=a("FlaxLogitsProcessor"),lb=a(" or "),$a=o("a"),db=a("FlaxLogitsWarper"),mb=a(" to the inputs."),pb=c(),Ta=o("div"),f(So.$$.fragment),vm=c(),Te=o("div"),f(zo.$$.fragment),fb=c(),yl=o("p"),gb=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),hb=c(),Bt=o("div"),f(Oo.$$.fragment),ub=c(),kl=o("p"),_b=a("Flax method for warping logits."),$m=c(),ye=o("div"),f(qo.$$.fragment),bb=c(),ya=o("p"),ka=o("a"),vb=a("FlaxLogitsWarper"),$b=a(" for temperature (exponential scaling output probability distribution)."),Tb=c(),xa=o("div"),f(Bo.$$.fragment),Tm=c(),ke=o("div"),f(Io.$$.fragment),yb=c(),wa=o("p"),La=o("a"),kb=a("FlaxLogitsWarper"),xb=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),wb=c(),Ea=o("div"),f(Co.$$.fragment),ym=c(),xe=o("div"),f(Ao.$$.fragment),Lb=c(),Pa=o("p"),Fa=o("a"),Eb=a("FlaxLogitsWarper"),Pb=a(" that performs top-k, i.e. restricting to the k highest probability elements."),Fb=c(),Da=o("div"),f(Wo.$$.fragment),km=c(),we=o("div"),f(No.$$.fragment),Db=c(),Sa=o("p"),za=o("a"),Sb=a("FlaxLogitsProcessor"),zb=a(" that enforces the specified token as the first generated token."),Ob=c(),Oa=o("div"),f(Vo.$$.fragment),xm=c(),Le=o("div"),f(Mo.$$.fragment),qb=c(),It=o("p"),qa=o("a"),Bb=a("FlaxLogitsProcessor"),Ib=a(" that enforces the specified token as the last generated token when "),xl=o("code"),Cb=a("max_length"),Ab=a(" is reached."),Wb=c(),Ba=o("div"),f(Go.$$.fragment),wm=c(),Ee=o("div"),f(jo.$$.fragment),Nb=c(),Ia=o("p"),Ca=o("a"),Vb=a("FlaxLogitsProcessor"),Mb=a(" enforcing a min-length by setting EOS probability to 0."),Gb=c(),Aa=o("div"),f(Ho.$$.fragment),Lm=c(),nt=o("h2"),Ct=o("a"),wl=o("span"),f(Ro.$$.fragment),jb=c(),Ll=o("span"),Hb=a("StoppingCriteria"),Em=c(),At=o("p"),Rb=a("A "),Wa=o("a"),Kb=a("StoppingCriteria"),Ub=a(" can be used to change when to stop generation (other than EOS token)."),Pm=c(),Pe=o("div"),f(Ko.$$.fragment),Yb=c(),El=o("p"),Xb=a("Abstract base class for all stopping criteria that can be applied during generation."),Jb=c(),Na=o("div"),f(Uo.$$.fragment),Fm=c(),st=o("div"),f(Yo.$$.fragment),Qb=c(),Va=o("div"),f(Xo.$$.fragment),Dm=c(),Fe=o("div"),f(Jo.$$.fragment),Zb=c(),Qo=o("p"),ev=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),Pl=o("code"),tv=a("max_length"),rv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),ov=c(),Ma=o("div"),f(Zo.$$.fragment),Sm=c(),De=o("div"),f(en.$$.fragment),nv=c(),tn=o("p"),sv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Fl=o("code"),av=a("initial_time"),iv=a("."),cv=c(),Ga=o("div"),f(rn.$$.fragment),zm=c(),at=o("h2"),Wt=o("a"),Dl=o("span"),f(on.$$.fragment),lv=c(),Sl=o("span"),dv=a("Constraints"),Om=c(),Nt=o("p"),mv=a("A "),ja=o("a"),pv=a("Constraint"),fv=a(" can be used to force the generation to include specific tokens or sequences in the output."),qm=c(),$=o("div"),f(nn.$$.fragment),gv=c(),zl=o("p"),hv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),uv=c(),Ol=o("p"),_v=a("All classes that inherit Constraint must follow the requirement that"),bv=c(),f(sn.$$.fragment),vv=c(),ql=o("p"),$v=a("will always terminate (halt)."),Tv=c(),Vt=o("div"),f(an.$$.fragment),yv=c(),Bl=o("p"),kv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),xv=c(),Mt=o("div"),f(cn.$$.fragment),wv=c(),Il=o("p"),Lv=a("Creates a new instance of this constraint."),Ev=c(),Gt=o("div"),f(ln.$$.fragment),Pv=c(),Cl=o("p"),Fv=a("Reads in a token and returns whether it creates progress."),Dv=c(),jt=o("div"),f(dn.$$.fragment),Sv=c(),mn=o("p"),zv=a("Returns the number of remaining steps of "),Al=o("code"),Ov=a("advance()"),qv=a(" in order to complete this constraint."),Bv=c(),Ht=o("div"),f(pn.$$.fragment),Iv=c(),Wl=o("p"),Cv=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Av=c(),Rt=o("div"),f(fn.$$.fragment),Wv=c(),Nl=o("p"),Nv=a("Tests whether this constraint has been properly defined."),Vv=c(),Ce=o("div"),f(gn.$$.fragment),Mv=c(),hn=o("p"),Gv=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Vl=o("code"),jv=a("does_advance(self, token_id: int)"),Hv=a("."),Rv=c(),Ml=o("p"),Kv=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Bm=c(),it=o("div"),f(un.$$.fragment),Uv=c(),Ha=o("p"),Ra=o("a"),Yv=a("Constraint"),Xv=a(" enforcing that an ordered sequence of tokens is included in the output."),Im=c(),ct=o("div"),f(_n.$$.fragment),Jv=c(),bn=o("p"),Qv=a("A special "),Ka=o("a"),Zv=a("Constraint"),e$=a(" that is fulfilled by fulfilling just one of several constraints."),Cm=c(),I=o("div"),f(vn.$$.fragment),t$=c(),Gl=o("p"),r$=a("A class for beam scorers to track its progress through a list of constraints."),o$=c(),E=o("div"),f($n.$$.fragment),n$=c(),jl=o("p"),s$=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),a$=c(),lt=o("p"),i$=a("Given constraints "),Hl=o("code"),c$=a("c_i = {t_ij | j == # of tokens}"),l$=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),Rl=o("code"),d$=a("c_i"),m$=a(", we return:"),p$=c(),Kl=o("p"),Ul=o("code"),f$=a("[t_k1 for k in indices of unfulfilled constraints]"),g$=c(),Se=o("p"),h$=a(`If we are in the middle of a constraint, then we return:
`),Yl=o("code"),u$=a("[t_ij]"),_$=a(", where "),Xl=o("code"),b$=a("i"),v$=a(" is the index of the inprogress constraint, "),Jl=o("code"),$$=a("j"),T$=a(" is the next step for the constraint."),y$=c(),Ql=o("p"),k$=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),x$=c(),Kt=o("div"),f(Tn.$$.fragment),w$=c(),Zl=o("p"),L$=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),Am=c(),dt=o("h2"),Ut=o("a"),ed=o("span"),f(yn.$$.fragment),E$=c(),td=o("span"),P$=a("BeamSearch"),Wm=c(),C=o("div"),f(kn.$$.fragment),F$=c(),mt=o("p"),D$=a("Abstract base class for all beam scorers that are used for "),Ua=o("a"),S$=a("beam_search()"),z$=a(` and
`),Ya=o("a"),O$=a("beam_sample()"),q$=a("."),B$=c(),Xa=o("div"),f(xn.$$.fragment),I$=c(),Ja=o("div"),f(wn.$$.fragment),Nm=c(),L=o("div"),f(Ln.$$.fragment),C$=c(),Qa=o("p"),Za=o("a"),A$=a("BeamScorer"),W$=a(" implementing standard beam search decoding."),N$=c(),En=o("p"),V$=a("Adapted in part from "),Pn=o("a"),M$=a(`Facebook\u2019s XLM beam search
code`),G$=a("."),j$=c(),ei=o("p"),H$=a("Reference for the diverse beam search algorithm and implementation "),Fn=o("a"),R$=a(`Ashwin Kalyan\u2019s DBS
implementation`),K$=c(),ti=o("div"),f(Dn.$$.fragment),U$=c(),ri=o("div"),f(Sn.$$.fragment),Vm=c(),A=o("div"),f(zn.$$.fragment),Y$=c(),oi=o("p"),ni=o("a"),X$=a("BeamScorer"),J$=a(" implementing constrained beam search decoding."),Q$=c(),si=o("div"),f(On.$$.fragment),Z$=c(),ai=o("div"),f(qn.$$.fragment),Mm=c(),pt=o("h2"),Yt=o("a"),rd=o("span"),f(Bn.$$.fragment),e2=c(),od=o("span"),t2=a("Utilities"),Gm=c(),ze=o("div"),f(In.$$.fragment),r2=c(),nd=o("p"),o2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),n2=c(),ii=o("p"),s2=a("From: "),Cn=o("a"),a2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),jm=c(),Oe=o("div"),f(An.$$.fragment),i2=c(),sd=o("p"),c2=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),l2=c(),ci=o("p"),d2=a("From: "),Wn=o("a"),m2=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const m=c4('[data-svelte="svelte-1phssyn"]',document.head);Me=n(m,"META",{name:!0,content:!0}),m.forEach(r),pd=l(e),Ge=n(e,"H1",{class:!0});var Rm=s(Ge);gt=n(Rm,"A",{id:!0,class:!0,href:!0});var G2=s(gt);rc=n(G2,"SPAN",{});var j2=s(rc);g(rr.$$.fragment,j2),j2.forEach(r),G2.forEach(r),Wp=l(Rm),oc=n(Rm,"SPAN",{});var H2=s(oc);Np=i(H2,"Utilities for Generation"),H2.forEach(r),Rm.forEach(r),fd=l(e),y=n(e,"P",{});var P=s(y);Vp=i(P,"This page lists all the utility functions used by "),Vn=n(P,"A",{href:!0});var R2=s(Vn);Mp=i(R2,"generate()"),R2.forEach(r),Gp=i(P,`,
`),Mn=n(P,"A",{href:!0});var K2=s(Mn);jp=i(K2,"greedy_search()"),K2.forEach(r),Hp=i(P,`,
`),Gn=n(P,"A",{href:!0});var U2=s(Gn);Rp=i(U2,"sample()"),U2.forEach(r),Kp=i(P,`,
`),jn=n(P,"A",{href:!0});var Y2=s(jn);Up=i(Y2,"beam_search()"),Y2.forEach(r),Yp=i(P,`,
`),Hn=n(P,"A",{href:!0});var X2=s(Hn);Xp=i(X2,"beam_sample()"),X2.forEach(r),Jp=i(P,`,
`),Rn=n(P,"A",{href:!0});var J2=s(Rn);Qp=i(J2,"group_beam_search()"),J2.forEach(r),Zp=i(P,`, and
`),Kn=n(P,"A",{href:!0});var Q2=s(Kn);ef=i(Q2,"constrained_beam_search()"),Q2.forEach(r),tf=i(P,"."),P.forEach(r),gd=l(e),Un=n(e,"P",{});var Z2=s(Un);rf=i(Z2,"Most of those are only useful if you are studying the code of the generate methods in the library."),Z2.forEach(r),hd=l(e),je=n(e,"H2",{class:!0});var Km=s(je);ht=n(Km,"A",{id:!0,class:!0,href:!0});var eT=s(ht);nc=n(eT,"SPAN",{});var tT=s(nc);g(or.$$.fragment,tT),tT.forEach(r),eT.forEach(r),of=l(Km),sc=n(Km,"SPAN",{});var rT=s(sc);nf=i(rT,"Generate Outputs"),rT.forEach(r),Km.forEach(r),ud=l(e),W=n(e,"P",{});var Xt=s(W);sf=i(Xt,"The output of "),Yn=n(Xt,"A",{href:!0});var oT=s(Yn);af=i(oT,"generate()"),oT.forEach(r),cf=i(Xt,` is an instance of a subclass of
`),Xn=n(Xt,"A",{href:!0});var nT=s(Xn);lf=i(nT,"ModelOutput"),nT.forEach(r),df=i(Xt,`. This output is a data structure containing all the information returned
by `),Jn=n(Xt,"A",{href:!0});var sT=s(Jn);mf=i(sT,"generate()"),sT.forEach(r),pf=i(Xt,", but that can also be used as tuple or dictionary."),Xt.forEach(r),_d=l(e),Qn=n(e,"P",{});var aT=s(Qn);ff=i(aT,"Here\u2019s an example:"),aT.forEach(r),bd=l(e),g(nr.$$.fragment,e),vd=l(e),Be=n(e,"P",{});var li=s(Be);gf=i(li,"The "),ac=n(li,"CODE",{});var iT=s(ac);hf=i(iT,"generation_output"),iT.forEach(r),uf=i(li," object is a "),Zn=n(li,"A",{href:!0});var cT=s(Zn);_f=i(cT,"GreedySearchDecoderOnlyOutput"),cT.forEach(r),bf=i(li,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),li.forEach(r),$d=l(e),N=n(e,"UL",{});var Jt=s(N);es=n(Jt,"LI",{});var p2=s(es);ic=n(p2,"CODE",{});var lT=s(ic);vf=i(lT,"sequences"),lT.forEach(r),$f=i(p2,": the generated sequences of tokens"),p2.forEach(r),Tf=l(Jt),ts=n(Jt,"LI",{});var f2=s(ts);cc=n(f2,"CODE",{});var dT=s(cc);yf=i(dT,"scores"),dT.forEach(r),kf=i(f2," (optional): the prediction scores of the language modelling head, for each generation step"),f2.forEach(r),xf=l(Jt),rs=n(Jt,"LI",{});var g2=s(rs);lc=n(g2,"CODE",{});var mT=s(lc);wf=i(mT,"hidden_states"),mT.forEach(r),Lf=i(g2," (optional): the hidden states of the model, for each generation step"),g2.forEach(r),Ef=l(Jt),os=n(Jt,"LI",{});var h2=s(os);dc=n(h2,"CODE",{});var pT=s(dc);Pf=i(pT,"attentions"),pT.forEach(r),Ff=i(h2," (optional): the attention weights of the model, for each generation step"),h2.forEach(r),Jt.forEach(r),Td=l(e),k=n(e,"P",{});var z=s(k);Df=i(z,"Here we have the "),mc=n(z,"CODE",{});var fT=s(mc);Sf=i(fT,"scores"),fT.forEach(r),zf=i(z," since we passed along "),pc=n(z,"CODE",{});var gT=s(pc);Of=i(gT,"output_scores=True"),gT.forEach(r),qf=i(z,", but we don\u2019t have "),fc=n(z,"CODE",{});var hT=s(fc);Bf=i(hT,"hidden_states"),hT.forEach(r),If=i(z,` and
`),gc=n(z,"CODE",{});var uT=s(gc);Cf=i(uT,"attentions"),uT.forEach(r),Af=i(z," because we didn\u2019t pass "),hc=n(z,"CODE",{});var _T=s(hc);Wf=i(_T,"output_hidden_states=True"),_T.forEach(r),Nf=i(z," or "),uc=n(z,"CODE",{});var bT=s(uc);Vf=i(bT,"output_attentions=True"),bT.forEach(r),Mf=i(z,"."),z.forEach(r),yd=l(e),F=n(e,"P",{});var Ae=s(F);Gf=i(Ae,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),_c=n(Ae,"CODE",{});var vT=s(_c);jf=i(vT,"None"),vT.forEach(r),Hf=i(Ae,". Here for instance "),bc=n(Ae,"CODE",{});var $T=s(bc);Rf=i($T,"generation_output.scores"),$T.forEach(r),Kf=i(Ae,` are all the generated prediction scores of the
language modeling head, and `),vc=n(Ae,"CODE",{});var TT=s(vc);Uf=i(TT,"generation_output.attentions"),TT.forEach(r),Yf=i(Ae," is "),$c=n(Ae,"CODE",{});var yT=s($c);Xf=i(yT,"None"),yT.forEach(r),Jf=i(Ae,"."),Ae.forEach(r),kd=l(e),D=n(e,"P",{});var We=s(D);Qf=i(We,"When using our "),Tc=n(We,"CODE",{});var kT=s(Tc);Zf=i(kT,"generation_output"),kT.forEach(r),eg=i(We," object as a tuple, it only keeps the attributes that don\u2019t have "),yc=n(We,"CODE",{});var xT=s(yc);tg=i(xT,"None"),xT.forEach(r),rg=i(We,` values.
Here, for instance, it has two elements, `),kc=n(We,"CODE",{});var wT=s(kc);og=i(wT,"loss"),wT.forEach(r),ng=i(We," then "),xc=n(We,"CODE",{});var LT=s(xc);sg=i(LT,"logits"),LT.forEach(r),ag=i(We,", so"),We.forEach(r),xd=l(e),g(sr.$$.fragment,e),wd=l(e),ut=n(e,"P",{});var Um=s(ut);ig=i(Um,"will return the tuple "),wc=n(Um,"CODE",{});var ET=s(wc);cg=i(ET,"(generation_output.sequences, generation_output.scores)"),ET.forEach(r),lg=i(Um," for instance."),Um.forEach(r),Ld=l(e),S=n(e,"P",{});var Ne=s(S);dg=i(Ne,"When using our "),Lc=n(Ne,"CODE",{});var PT=s(Lc);mg=i(PT,"generation_output"),PT.forEach(r),pg=i(Ne," object as a dictionary, it only keeps the attributes that don\u2019t have "),Ec=n(Ne,"CODE",{});var FT=s(Ec);fg=i(FT,"None"),FT.forEach(r),gg=i(Ne,`
values. Here, for instance, it has two keys that are `),Pc=n(Ne,"CODE",{});var DT=s(Pc);hg=i(DT,"sequences"),DT.forEach(r),ug=i(Ne," and "),Fc=n(Ne,"CODE",{});var ST=s(Fc);_g=i(ST,"scores"),ST.forEach(r),bg=i(Ne,"."),Ne.forEach(r),Ed=l(e),ns=n(e,"P",{});var zT=s(ns);vg=i(zT,"We document here all output types."),zT.forEach(r),Pd=l(e),He=n(e,"H3",{class:!0});var Ym=s(He);_t=n(Ym,"A",{id:!0,class:!0,href:!0});var OT=s(_t);Dc=n(OT,"SPAN",{});var qT=s(Dc);g(ar.$$.fragment,qT),qT.forEach(r),OT.forEach(r),$g=l(Ym),Sc=n(Ym,"SPAN",{});var BT=s(Sc);Tg=i(BT,"GreedySearchOutput"),BT.forEach(r),Ym.forEach(r),Fd=l(e),Re=n(e,"DIV",{class:!0});var Xm=s(Re);g(ir.$$.fragment,Xm),yg=l(Xm),zc=n(Xm,"P",{});var IT=s(zc);kg=i(IT,"Base class for outputs of decoder-only generation models using greedy search."),IT.forEach(r),Xm.forEach(r),Dd=l(e),Ke=n(e,"DIV",{class:!0});var Jm=s(Ke);g(cr.$$.fragment,Jm),xg=l(Jm),Oc=n(Jm,"P",{});var CT=s(Oc);wg=i(CT,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),CT.forEach(r),Jm.forEach(r),Sd=l(e),j=n(e,"DIV",{class:!0});var di=s(j);g(lr.$$.fragment,di),Lg=l(di),qc=n(di,"P",{});var AT=s(qc);Eg=i(AT,"Flax Base class for outputs of decoder-only generation models using greedy search."),AT.forEach(r),Pg=l(di),bt=n(di,"DIV",{class:!0});var Qm=s(bt);g(dr.$$.fragment,Qm),Fg=l(Qm),Bc=n(Qm,"P",{});var WT=s(Bc);Dg=i(WT,"\u201CReturns a new object replacing the specified fields with new values."),WT.forEach(r),Qm.forEach(r),di.forEach(r),zd=l(e),Ue=n(e,"H3",{class:!0});var Zm=s(Ue);vt=n(Zm,"A",{id:!0,class:!0,href:!0});var NT=s(vt);Ic=n(NT,"SPAN",{});var VT=s(Ic);g(mr.$$.fragment,VT),VT.forEach(r),NT.forEach(r),Sg=l(Zm),Cc=n(Zm,"SPAN",{});var MT=s(Cc);zg=i(MT,"SampleOutput"),MT.forEach(r),Zm.forEach(r),Od=l(e),Ye=n(e,"DIV",{class:!0});var ep=s(Ye);g(pr.$$.fragment,ep),Og=l(ep),Ac=n(ep,"P",{});var GT=s(Ac);qg=i(GT,"Base class for outputs of decoder-only generation models using sampling."),GT.forEach(r),ep.forEach(r),qd=l(e),Xe=n(e,"DIV",{class:!0});var tp=s(Xe);g(fr.$$.fragment,tp),Bg=l(tp),Wc=n(tp,"P",{});var jT=s(Wc);Ig=i(jT,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),jT.forEach(r),tp.forEach(r),Bd=l(e),H=n(e,"DIV",{class:!0});var mi=s(H);g(gr.$$.fragment,mi),Cg=l(mi),Nc=n(mi,"P",{});var HT=s(Nc);Ag=i(HT,"Flax Base class for outputs of decoder-only generation models using sampling."),HT.forEach(r),Wg=l(mi),$t=n(mi,"DIV",{class:!0});var rp=s($t);g(hr.$$.fragment,rp),Ng=l(rp),Vc=n(rp,"P",{});var RT=s(Vc);Vg=i(RT,"\u201CReturns a new object replacing the specified fields with new values."),RT.forEach(r),rp.forEach(r),mi.forEach(r),Id=l(e),Je=n(e,"H3",{class:!0});var op=s(Je);Tt=n(op,"A",{id:!0,class:!0,href:!0});var KT=s(Tt);Mc=n(KT,"SPAN",{});var UT=s(Mc);g(ur.$$.fragment,UT),UT.forEach(r),KT.forEach(r),Mg=l(op),Gc=n(op,"SPAN",{});var YT=s(Gc);Gg=i(YT,"BeamSearchOutput"),YT.forEach(r),op.forEach(r),Cd=l(e),Qe=n(e,"DIV",{class:!0});var np=s(Qe);g(_r.$$.fragment,np),jg=l(np),jc=n(np,"P",{});var XT=s(jc);Hg=i(XT,"Base class for outputs of decoder-only generation models using beam search."),XT.forEach(r),np.forEach(r),Ad=l(e),Ze=n(e,"DIV",{class:!0});var sp=s(Ze);g(br.$$.fragment,sp),Rg=l(sp),Hc=n(sp,"P",{});var JT=s(Hc);Kg=i(JT,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),JT.forEach(r),sp.forEach(r),Wd=l(e),et=n(e,"H3",{class:!0});var ap=s(et);yt=n(ap,"A",{id:!0,class:!0,href:!0});var QT=s(yt);Rc=n(QT,"SPAN",{});var ZT=s(Rc);g(vr.$$.fragment,ZT),ZT.forEach(r),QT.forEach(r),Ug=l(ap),Kc=n(ap,"SPAN",{});var e1=s(Kc);Yg=i(e1,"BeamSampleOutput"),e1.forEach(r),ap.forEach(r),Nd=l(e),tt=n(e,"DIV",{class:!0});var ip=s(tt);g($r.$$.fragment,ip),Xg=l(ip),Uc=n(ip,"P",{});var t1=s(Uc);Jg=i(t1,"Base class for outputs of decoder-only generation models using beam sample."),t1.forEach(r),ip.forEach(r),Vd=l(e),rt=n(e,"DIV",{class:!0});var cp=s(rt);g(Tr.$$.fragment,cp),Qg=l(cp),Yc=n(cp,"P",{});var r1=s(Yc);Zg=i(r1,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),r1.forEach(r),cp.forEach(r),Md=l(e),ot=n(e,"H2",{class:!0});var lp=s(ot);kt=n(lp,"A",{id:!0,class:!0,href:!0});var o1=s(kt);Xc=n(o1,"SPAN",{});var n1=s(Xc);g(yr.$$.fragment,n1),n1.forEach(r),o1.forEach(r),eh=l(lp),Jc=n(lp,"SPAN",{});var s1=s(Jc);th=i(s1,"LogitsProcessor"),s1.forEach(r),lp.forEach(r),Gd=l(e),xt=n(e,"P",{});var dp=s(xt);rh=i(dp,"A "),ss=n(dp,"A",{href:!0});var a1=s(ss);oh=i(a1,"LogitsProcessor"),a1.forEach(r),nh=i(dp,` can be used to modify the prediction scores of a language model head for
generation.`),dp.forEach(r),jd=l(e),R=n(e,"DIV",{class:!0});var pi=s(R);g(kr.$$.fragment,pi),sh=l(pi),Qc=n(pi,"P",{});var i1=s(Qc);ah=i(i1,"Abstract base class for all logit processors that can be applied during generation."),i1.forEach(r),ih=l(pi),wt=n(pi,"DIV",{class:!0});var mp=s(wt);g(xr.$$.fragment,mp),ch=l(mp),Zc=n(mp,"P",{});var c1=s(Zc);lh=i(c1,"Torch method for processing logits."),c1.forEach(r),mp.forEach(r),pi.forEach(r),Hd=l(e),K=n(e,"DIV",{class:!0});var fi=s(K);g(wr.$$.fragment,fi),dh=l(fi),x=n(fi,"P",{});var O=s(x);mh=i(O,"This class can be used to create a list of "),as=n(O,"A",{href:!0});var l1=s(as);ph=i(l1,"LogitsProcessor"),l1.forEach(r),fh=i(O," or "),is=n(O,"A",{href:!0});var d1=s(is);gh=i(d1,"LogitsWarper"),d1.forEach(r),hh=i(O,` to subsequently process a
`),el=n(O,"CODE",{});var m1=s(el);uh=i(m1,"scores"),m1.forEach(r),_h=i(O," input tensor. This class inherits from list and adds a specific "),tl=n(O,"EM",{});var p1=s(tl);rl=n(p1,"STRONG",{});var f1=s(rl);bh=i(f1,"call"),f1.forEach(r),p1.forEach(r),vh=i(O,` method to apply each
`),cs=n(O,"A",{href:!0});var g1=s(cs);$h=i(g1,"LogitsProcessor"),g1.forEach(r),Th=i(O," or "),ls=n(O,"A",{href:!0});var h1=s(ls);yh=i(h1,"LogitsWarper"),h1.forEach(r),kh=i(O," to the inputs."),O.forEach(r),xh=l(fi),ds=n(fi,"DIV",{class:!0});var u1=s(ds);g(Lr.$$.fragment,u1),u1.forEach(r),fi.forEach(r),Rd=l(e),U=n(e,"DIV",{class:!0});var gi=s(U);g(Er.$$.fragment,gi),wh=l(gi),ol=n(gi,"P",{});var _1=s(ol);Lh=i(_1,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),_1.forEach(r),Eh=l(gi),Lt=n(gi,"DIV",{class:!0});var pp=s(Lt);g(Pr.$$.fragment,pp),Ph=l(pp),nl=n(pp,"P",{});var b1=s(nl);Fh=i(b1,"Torch method for warping logits."),b1.forEach(r),pp.forEach(r),gi.forEach(r),Kd=l(e),Y=n(e,"DIV",{class:!0});var hi=s(Y);g(Fr.$$.fragment,hi),Dh=l(hi),ms=n(hi,"P",{});var u2=s(ms);ps=n(u2,"A",{href:!0});var v1=s(ps);Sh=i(v1,"LogitsProcessor"),v1.forEach(r),zh=i(u2," enforcing a min-length by setting EOS probability to 0."),u2.forEach(r),Oh=l(hi),fs=n(hi,"DIV",{class:!0});var $1=s(fs);g(Dr.$$.fragment,$1),$1.forEach(r),hi.forEach(r),Ud=l(e),X=n(e,"DIV",{class:!0});var ui=s(X);g(Sr.$$.fragment,ui),qh=l(ui),gs=n(ui,"P",{});var _2=s(gs);hs=n(_2,"A",{href:!0});var T1=s(hs);Bh=i(T1,"LogitsWarper"),T1.forEach(r),Ih=i(_2," for temperature (exponential scaling output probability distribution)."),_2.forEach(r),Ch=l(ui),us=n(ui,"DIV",{class:!0});var y1=s(us);g(zr.$$.fragment,y1),y1.forEach(r),ui.forEach(r),Yd=l(e),J=n(e,"DIV",{class:!0});var _i=s(J);g(Or.$$.fragment,_i),Ah=l(_i),_s=n(_i,"P",{});var b2=s(_s);bs=n(b2,"A",{href:!0});var k1=s(bs);Wh=i(k1,"LogitsProcessor"),k1.forEach(r),Nh=i(b2," enforcing an exponential penalty on repeated sequences."),b2.forEach(r),Vh=l(_i),vs=n(_i,"DIV",{class:!0});var x1=s(vs);g(qr.$$.fragment,x1),x1.forEach(r),_i.forEach(r),Xd=l(e),Q=n(e,"DIV",{class:!0});var bi=s(Q);g(Br.$$.fragment,bi),Mh=l(bi),$s=n(bi,"P",{});var v2=s($s);Ts=n(v2,"A",{href:!0});var w1=s(Ts);Gh=i(w1,"LogitsWarper"),w1.forEach(r),jh=i(v2," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),v2.forEach(r),Hh=l(bi),ys=n(bi,"DIV",{class:!0});var L1=s(ys);g(Ir.$$.fragment,L1),L1.forEach(r),bi.forEach(r),Jd=l(e),Z=n(e,"DIV",{class:!0});var vi=s(Z);g(Cr.$$.fragment,vi),Rh=l(vi),ks=n(vi,"P",{});var $2=s(ks);xs=n($2,"A",{href:!0});var E1=s(xs);Kh=i(E1,"LogitsWarper"),E1.forEach(r),Uh=i($2," that performs top-k, i.e. restricting to the k highest probability elements."),$2.forEach(r),Yh=l(vi),ws=n(vi,"DIV",{class:!0});var P1=s(ws);g(Ar.$$.fragment,P1),P1.forEach(r),vi.forEach(r),Qd=l(e),ee=n(e,"DIV",{class:!0});var $i=s(ee);g(Wr.$$.fragment,$i),Xh=l($i),Et=n($i,"P",{});var ad=s(Et);Ls=n(ad,"A",{href:!0});var F1=s(Ls);Jh=i(F1,"LogitsProcessor"),F1.forEach(r),Qh=i(ad,` that enforces no repetition of n-grams. See
`),Nr=n(ad,"A",{href:!0,rel:!0});var D1=s(Nr);Zh=i(D1,"Fairseq"),D1.forEach(r),eu=i(ad,"."),ad.forEach(r),tu=l($i),Es=n($i,"DIV",{class:!0});var S1=s(Es);g(Vr.$$.fragment,S1),S1.forEach(r),$i.forEach(r),Zd=l(e),te=n(e,"DIV",{class:!0});var Ti=s(te);g(Mr.$$.fragment,Ti),ru=l(Ti),Ps=n(Ti,"P",{});var T2=s(Ps);Fs=n(T2,"A",{href:!0});var z1=s(Fs);ou=i(z1,"LogitsProcessor"),z1.forEach(r),nu=i(T2," that enforces that specified sequences will never be sampled."),T2.forEach(r),su=l(Ti),Ds=n(Ti,"DIV",{class:!0});var O1=s(Ds);g(Gr.$$.fragment,O1),O1.forEach(r),Ti.forEach(r),em=l(e),re=n(e,"DIV",{class:!0});var yi=s(re);g(jr.$$.fragment,yi),au=l(yi),Pt=n(yi,"P",{});var id=s(Pt);Ss=n(id,"A",{href:!0});var q1=s(Ss);iu=i(q1,"LogitsProcessor"),q1.forEach(r),cu=i(id,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Hr=n(id,"A",{href:!0,rel:!0});var B1=s(Hr);lu=i(B1,"Autoregressive Entity Retrieval"),B1.forEach(r),du=i(id," for more information."),id.forEach(r),mu=l(yi),zs=n(yi,"DIV",{class:!0});var I1=s(zs);g(Rr.$$.fragment,I1),I1.forEach(r),yi.forEach(r),tm=l(e),oe=n(e,"DIV",{class:!0});var ki=s(oe);g(Kr.$$.fragment,ki),pu=l(ki),Ie=n(ki,"P",{});var Nn=s(Ie);Os=n(Nn,"A",{href:!0});var C1=s(Os);fu=i(C1,"LogitsProcessor"),C1.forEach(r),gu=i(Nn,` that enforces diverse beam search. Note that this logits processor is only effective for
`),qs=n(Nn,"A",{href:!0});var A1=s(qs);hu=i(A1,"PreTrainedModel.group_beam_search()"),A1.forEach(r),uu=i(Nn,". See "),Ur=n(Nn,"A",{href:!0,rel:!0});var W1=s(Ur);_u=i(W1,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),W1.forEach(r),bu=i(Nn," for more details."),Nn.forEach(r),vu=l(ki),Bs=n(ki,"DIV",{class:!0});var N1=s(Bs);g(Yr.$$.fragment,N1),N1.forEach(r),ki.forEach(r),rm=l(e),ne=n(e,"DIV",{class:!0});var xi=s(ne);g(Xr.$$.fragment,xi),$u=l(xi),Is=n(xi,"P",{});var y2=s(Is);Cs=n(y2,"A",{href:!0});var V1=s(Cs);Tu=i(V1,"LogitsProcessor"),V1.forEach(r),yu=i(y2," that enforces the specified token as the first generated token."),y2.forEach(r),ku=l(xi),As=n(xi,"DIV",{class:!0});var M1=s(As);g(Jr.$$.fragment,M1),M1.forEach(r),xi.forEach(r),om=l(e),se=n(e,"DIV",{class:!0});var wi=s(se);g(Qr.$$.fragment,wi),xu=l(wi),Ft=n(wi,"P",{});var cd=s(Ft);Ws=n(cd,"A",{href:!0});var G1=s(Ws);wu=i(G1,"LogitsProcessor"),G1.forEach(r),Lu=i(cd," that enforces the specified token as the last generated token when "),sl=n(cd,"CODE",{});var j1=s(sl);Eu=i(j1,"max_length"),j1.forEach(r),Pu=i(cd," is reached."),cd.forEach(r),Fu=l(wi),Ns=n(wi,"DIV",{class:!0});var H1=s(Ns);g(Zr.$$.fragment,H1),H1.forEach(r),wi.forEach(r),nm=l(e),ae=n(e,"DIV",{class:!0});var Li=s(ae);g(eo.$$.fragment,Li),Du=l(Li),V=n(Li,"P",{});var ft=s(V);Vs=n(ft,"A",{href:!0});var R1=s(Vs);Su=i(R1,"LogitsProcessor"),R1.forEach(r),zu=i(ft," that removes all "),al=n(ft,"CODE",{});var K1=s(al);Ou=i(K1,"nan"),K1.forEach(r),qu=i(ft," and "),il=n(ft,"CODE",{});var U1=s(il);Bu=i(U1,"inf"),U1.forEach(r),Iu=i(ft,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),cl=n(ft,"CODE",{});var Y1=s(cl);Cu=i(Y1,"max_length"),Y1.forEach(r),Au=i(ft,` is
reached.`),ft.forEach(r),Wu=l(Li),Ms=n(Li,"DIV",{class:!0});var X1=s(Ms);g(to.$$.fragment,X1),X1.forEach(r),Li.forEach(r),sm=l(e),ie=n(e,"DIV",{class:!0});var Ei=s(ie);g(ro.$$.fragment,Ei),Nu=l(Ei),ll=n(Ei,"P",{});var J1=s(ll);Vu=i(J1,"Abstract base class for all logit processors that can be applied during generation."),J1.forEach(r),Mu=l(Ei),Dt=n(Ei,"DIV",{class:!0});var fp=s(Dt);g(oo.$$.fragment,fp),Gu=l(fp),dl=n(fp,"P",{});var Q1=s(dl);ju=i(Q1,"TF method for processing logits."),Q1.forEach(r),fp.forEach(r),Ei.forEach(r),am=l(e),ce=n(e,"DIV",{class:!0});var Pi=s(ce);g(no.$$.fragment,Pi),Hu=l(Pi),B=n(Pi,"P",{});var Ve=s(B);Ru=i(Ve,"This class can be used to create a list of "),Gs=n(Ve,"A",{href:!0});var Z1=s(Gs);Ku=i(Z1,"TFLogitsProcessor"),Z1.forEach(r),Uu=i(Ve," to subsequently process a "),ml=n(Ve,"CODE",{});var ey=s(ml);Yu=i(ey,"scores"),ey.forEach(r),Xu=i(Ve,` input tensor.
This class inherits from list and adds a specific `),pl=n(Ve,"EM",{});var ty=s(pl);fl=n(ty,"STRONG",{});var ry=s(fl);Ju=i(ry,"call"),ry.forEach(r),ty.forEach(r),Qu=i(Ve," method to apply each "),js=n(Ve,"A",{href:!0});var oy=s(js);Zu=i(oy,"TFLogitsProcessor"),oy.forEach(r),e_=i(Ve,` to the
inputs.`),Ve.forEach(r),t_=l(Pi),Hs=n(Pi,"DIV",{class:!0});var ny=s(Hs);g(so.$$.fragment,ny),ny.forEach(r),Pi.forEach(r),im=l(e),le=n(e,"DIV",{class:!0});var Fi=s(le);g(ao.$$.fragment,Fi),r_=l(Fi),gl=n(Fi,"P",{});var sy=s(gl);o_=i(sy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),sy.forEach(r),n_=l(Fi),St=n(Fi,"DIV",{class:!0});var gp=s(St);g(io.$$.fragment,gp),s_=l(gp),hl=n(gp,"P",{});var ay=s(hl);a_=i(ay,"TF method for warping logits."),ay.forEach(r),gp.forEach(r),Fi.forEach(r),cm=l(e),de=n(e,"DIV",{class:!0});var Di=s(de);g(co.$$.fragment,Di),i_=l(Di),Rs=n(Di,"P",{});var k2=s(Rs);Ks=n(k2,"A",{href:!0});var iy=s(Ks);c_=i(iy,"TFLogitsWarper"),iy.forEach(r),l_=i(k2," for temperature (exponential scaling output probability distribution)."),k2.forEach(r),d_=l(Di),Us=n(Di,"DIV",{class:!0});var cy=s(Us);g(lo.$$.fragment,cy),cy.forEach(r),Di.forEach(r),lm=l(e),me=n(e,"DIV",{class:!0});var Si=s(me);g(mo.$$.fragment,Si),m_=l(Si),Ys=n(Si,"P",{});var x2=s(Ys);Xs=n(x2,"A",{href:!0});var ly=s(Xs);p_=i(ly,"TFLogitsWarper"),ly.forEach(r),f_=i(x2," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),x2.forEach(r),g_=l(Si),Js=n(Si,"DIV",{class:!0});var dy=s(Js);g(po.$$.fragment,dy),dy.forEach(r),Si.forEach(r),dm=l(e),pe=n(e,"DIV",{class:!0});var zi=s(pe);g(fo.$$.fragment,zi),h_=l(zi),Qs=n(zi,"P",{});var w2=s(Qs);Zs=n(w2,"A",{href:!0});var my=s(Zs);u_=i(my,"TFLogitsWarper"),my.forEach(r),__=i(w2," that performs top-k, i.e. restricting to the k highest probability elements."),w2.forEach(r),b_=l(zi),ea=n(zi,"DIV",{class:!0});var py=s(ea);g(go.$$.fragment,py),py.forEach(r),zi.forEach(r),mm=l(e),fe=n(e,"DIV",{class:!0});var Oi=s(fe);g(ho.$$.fragment,Oi),v_=l(Oi),ta=n(Oi,"P",{});var L2=s(ta);ra=n(L2,"A",{href:!0});var fy=s(ra);$_=i(fy,"TFLogitsProcessor"),fy.forEach(r),T_=i(L2," enforcing a min-length by setting EOS probability to 0."),L2.forEach(r),y_=l(Oi),oa=n(Oi,"DIV",{class:!0});var gy=s(oa);g(uo.$$.fragment,gy),gy.forEach(r),Oi.forEach(r),pm=l(e),ge=n(e,"DIV",{class:!0});var qi=s(ge);g(_o.$$.fragment,qi),k_=l(qi),na=n(qi,"P",{});var E2=s(na);sa=n(E2,"A",{href:!0});var hy=s(sa);x_=i(hy,"TFLogitsProcessor"),hy.forEach(r),w_=i(E2," that enforces that specified sequences will never be sampled."),E2.forEach(r),L_=l(qi),aa=n(qi,"DIV",{class:!0});var uy=s(aa);g(bo.$$.fragment,uy),uy.forEach(r),qi.forEach(r),fm=l(e),he=n(e,"DIV",{class:!0});var Bi=s(he);g(vo.$$.fragment,Bi),E_=l(Bi),zt=n(Bi,"P",{});var ld=s(zt);ia=n(ld,"A",{href:!0});var _y=s(ia);P_=i(_y,"TFLogitsProcessor"),_y.forEach(r),F_=i(ld,` that enforces no repetition of n-grams. See
`),$o=n(ld,"A",{href:!0,rel:!0});var by=s($o);D_=i(by,"Fairseq"),by.forEach(r),S_=i(ld,"."),ld.forEach(r),z_=l(Bi),ca=n(Bi,"DIV",{class:!0});var vy=s(ca);g(To.$$.fragment,vy),vy.forEach(r),Bi.forEach(r),gm=l(e),ue=n(e,"DIV",{class:!0});var Ii=s(ue);g(yo.$$.fragment,Ii),O_=l(Ii),la=n(Ii,"P",{});var P2=s(la);da=n(P2,"A",{href:!0});var $y=s(da);q_=i($y,"TFLogitsProcessor"),$y.forEach(r),B_=i(P2," enforcing an exponential penalty on repeated sequences."),P2.forEach(r),I_=l(Ii),ma=n(Ii,"DIV",{class:!0});var Ty=s(ma);g(ko.$$.fragment,Ty),Ty.forEach(r),Ii.forEach(r),hm=l(e),_e=n(e,"DIV",{class:!0});var Ci=s(_e);g(xo.$$.fragment,Ci),C_=l(Ci),pa=n(Ci,"P",{});var F2=s(pa);fa=n(F2,"A",{href:!0});var yy=s(fa);A_=i(yy,"TFLogitsProcessor"),yy.forEach(r),W_=i(F2," that enforces the specified token as the first generated token."),F2.forEach(r),N_=l(Ci),ga=n(Ci,"DIV",{class:!0});var ky=s(ga);g(wo.$$.fragment,ky),ky.forEach(r),Ci.forEach(r),um=l(e),be=n(e,"DIV",{class:!0});var Ai=s(be);g(Lo.$$.fragment,Ai),V_=l(Ai),Ot=n(Ai,"P",{});var dd=s(Ot);ha=n(dd,"A",{href:!0});var xy=s(ha);M_=i(xy,"TFLogitsProcessor"),xy.forEach(r),G_=i(dd," that enforces the specified token as the last generated token when "),ul=n(dd,"CODE",{});var wy=s(ul);j_=i(wy,"max_length"),wy.forEach(r),H_=i(dd," is reached."),dd.forEach(r),R_=l(Ai),ua=n(Ai,"DIV",{class:!0});var Ly=s(ua);g(Eo.$$.fragment,Ly),Ly.forEach(r),Ai.forEach(r),_m=l(e),ve=n(e,"DIV",{class:!0});var Wi=s(ve);g(Po.$$.fragment,Wi),K_=l(Wi),_l=n(Wi,"P",{});var Ey=s(_l);U_=i(Ey,"Abstract base class for all logit processors that can be applied during generation."),Ey.forEach(r),Y_=l(Wi),qt=n(Wi,"DIV",{class:!0});var hp=s(qt);g(Fo.$$.fragment,hp),X_=l(hp),bl=n(hp,"P",{});var Py=s(bl);J_=i(Py,"Flax method for processing logits."),Py.forEach(r),hp.forEach(r),Wi.forEach(r),bm=l(e),$e=n(e,"DIV",{class:!0});var Ni=s($e);g(Do.$$.fragment,Ni),Q_=l(Ni),w=n(Ni,"P",{});var q=s(w);Z_=i(q,"This class can be used to create a list of "),_a=n(q,"A",{href:!0});var Fy=s(_a);eb=i(Fy,"FlaxLogitsProcessor"),Fy.forEach(r),tb=i(q," or "),ba=n(q,"A",{href:!0});var Dy=s(ba);rb=i(Dy,"FlaxLogitsWarper"),Dy.forEach(r),ob=i(q,` to subsequently process
a `),vl=n(q,"CODE",{});var Sy=s(vl);nb=i(Sy,"scores"),Sy.forEach(r),sb=i(q," input tensor. This class inherits from list and adds a specific "),$l=n(q,"EM",{});var zy=s($l);Tl=n(zy,"STRONG",{});var Oy=s(Tl);ab=i(Oy,"call"),Oy.forEach(r),zy.forEach(r),ib=i(q,` method to apply each
`),va=n(q,"A",{href:!0});var qy=s(va);cb=i(qy,"FlaxLogitsProcessor"),qy.forEach(r),lb=i(q," or "),$a=n(q,"A",{href:!0});var By=s($a);db=i(By,"FlaxLogitsWarper"),By.forEach(r),mb=i(q," to the inputs."),q.forEach(r),pb=l(Ni),Ta=n(Ni,"DIV",{class:!0});var Iy=s(Ta);g(So.$$.fragment,Iy),Iy.forEach(r),Ni.forEach(r),vm=l(e),Te=n(e,"DIV",{class:!0});var Vi=s(Te);g(zo.$$.fragment,Vi),fb=l(Vi),yl=n(Vi,"P",{});var Cy=s(yl);gb=i(Cy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Cy.forEach(r),hb=l(Vi),Bt=n(Vi,"DIV",{class:!0});var up=s(Bt);g(Oo.$$.fragment,up),ub=l(up),kl=n(up,"P",{});var Ay=s(kl);_b=i(Ay,"Flax method for warping logits."),Ay.forEach(r),up.forEach(r),Vi.forEach(r),$m=l(e),ye=n(e,"DIV",{class:!0});var Mi=s(ye);g(qo.$$.fragment,Mi),bb=l(Mi),ya=n(Mi,"P",{});var D2=s(ya);ka=n(D2,"A",{href:!0});var Wy=s(ka);vb=i(Wy,"FlaxLogitsWarper"),Wy.forEach(r),$b=i(D2," for temperature (exponential scaling output probability distribution)."),D2.forEach(r),Tb=l(Mi),xa=n(Mi,"DIV",{class:!0});var Ny=s(xa);g(Bo.$$.fragment,Ny),Ny.forEach(r),Mi.forEach(r),Tm=l(e),ke=n(e,"DIV",{class:!0});var Gi=s(ke);g(Io.$$.fragment,Gi),yb=l(Gi),wa=n(Gi,"P",{});var S2=s(wa);La=n(S2,"A",{href:!0});var Vy=s(La);kb=i(Vy,"FlaxLogitsWarper"),Vy.forEach(r),xb=i(S2," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),S2.forEach(r),wb=l(Gi),Ea=n(Gi,"DIV",{class:!0});var My=s(Ea);g(Co.$$.fragment,My),My.forEach(r),Gi.forEach(r),ym=l(e),xe=n(e,"DIV",{class:!0});var ji=s(xe);g(Ao.$$.fragment,ji),Lb=l(ji),Pa=n(ji,"P",{});var z2=s(Pa);Fa=n(z2,"A",{href:!0});var Gy=s(Fa);Eb=i(Gy,"FlaxLogitsWarper"),Gy.forEach(r),Pb=i(z2," that performs top-k, i.e. restricting to the k highest probability elements."),z2.forEach(r),Fb=l(ji),Da=n(ji,"DIV",{class:!0});var jy=s(Da);g(Wo.$$.fragment,jy),jy.forEach(r),ji.forEach(r),km=l(e),we=n(e,"DIV",{class:!0});var Hi=s(we);g(No.$$.fragment,Hi),Db=l(Hi),Sa=n(Hi,"P",{});var O2=s(Sa);za=n(O2,"A",{href:!0});var Hy=s(za);Sb=i(Hy,"FlaxLogitsProcessor"),Hy.forEach(r),zb=i(O2," that enforces the specified token as the first generated token."),O2.forEach(r),Ob=l(Hi),Oa=n(Hi,"DIV",{class:!0});var Ry=s(Oa);g(Vo.$$.fragment,Ry),Ry.forEach(r),Hi.forEach(r),xm=l(e),Le=n(e,"DIV",{class:!0});var Ri=s(Le);g(Mo.$$.fragment,Ri),qb=l(Ri),It=n(Ri,"P",{});var md=s(It);qa=n(md,"A",{href:!0});var Ky=s(qa);Bb=i(Ky,"FlaxLogitsProcessor"),Ky.forEach(r),Ib=i(md," that enforces the specified token as the last generated token when "),xl=n(md,"CODE",{});var Uy=s(xl);Cb=i(Uy,"max_length"),Uy.forEach(r),Ab=i(md," is reached."),md.forEach(r),Wb=l(Ri),Ba=n(Ri,"DIV",{class:!0});var Yy=s(Ba);g(Go.$$.fragment,Yy),Yy.forEach(r),Ri.forEach(r),wm=l(e),Ee=n(e,"DIV",{class:!0});var Ki=s(Ee);g(jo.$$.fragment,Ki),Nb=l(Ki),Ia=n(Ki,"P",{});var q2=s(Ia);Ca=n(q2,"A",{href:!0});var Xy=s(Ca);Vb=i(Xy,"FlaxLogitsProcessor"),Xy.forEach(r),Mb=i(q2," enforcing a min-length by setting EOS probability to 0."),q2.forEach(r),Gb=l(Ki),Aa=n(Ki,"DIV",{class:!0});var Jy=s(Aa);g(Ho.$$.fragment,Jy),Jy.forEach(r),Ki.forEach(r),Lm=l(e),nt=n(e,"H2",{class:!0});var _p=s(nt);Ct=n(_p,"A",{id:!0,class:!0,href:!0});var Qy=s(Ct);wl=n(Qy,"SPAN",{});var Zy=s(wl);g(Ro.$$.fragment,Zy),Zy.forEach(r),Qy.forEach(r),jb=l(_p),Ll=n(_p,"SPAN",{});var e0=s(Ll);Hb=i(e0,"StoppingCriteria"),e0.forEach(r),_p.forEach(r),Em=l(e),At=n(e,"P",{});var bp=s(At);Rb=i(bp,"A "),Wa=n(bp,"A",{href:!0});var t0=s(Wa);Kb=i(t0,"StoppingCriteria"),t0.forEach(r),Ub=i(bp," can be used to change when to stop generation (other than EOS token)."),bp.forEach(r),Pm=l(e),Pe=n(e,"DIV",{class:!0});var Ui=s(Pe);g(Ko.$$.fragment,Ui),Yb=l(Ui),El=n(Ui,"P",{});var r0=s(El);Xb=i(r0,"Abstract base class for all stopping criteria that can be applied during generation."),r0.forEach(r),Jb=l(Ui),Na=n(Ui,"DIV",{class:!0});var o0=s(Na);g(Uo.$$.fragment,o0),o0.forEach(r),Ui.forEach(r),Fm=l(e),st=n(e,"DIV",{class:!0});var vp=s(st);g(Yo.$$.fragment,vp),Qb=l(vp),Va=n(vp,"DIV",{class:!0});var n0=s(Va);g(Xo.$$.fragment,n0),n0.forEach(r),vp.forEach(r),Dm=l(e),Fe=n(e,"DIV",{class:!0});var Yi=s(Fe);g(Jo.$$.fragment,Yi),Zb=l(Yi),Qo=n(Yi,"P",{});var $p=s(Qo);ev=i($p,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),Pl=n($p,"CODE",{});var s0=s(Pl);tv=i(s0,"max_length"),s0.forEach(r),rv=i($p,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),$p.forEach(r),ov=l(Yi),Ma=n(Yi,"DIV",{class:!0});var a0=s(Ma);g(Zo.$$.fragment,a0),a0.forEach(r),Yi.forEach(r),Sm=l(e),De=n(e,"DIV",{class:!0});var Xi=s(De);g(en.$$.fragment,Xi),nv=l(Xi),tn=n(Xi,"P",{});var Tp=s(tn);sv=i(Tp,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),Fl=n(Tp,"CODE",{});var i0=s(Fl);av=i(i0,"initial_time"),i0.forEach(r),iv=i(Tp,"."),Tp.forEach(r),cv=l(Xi),Ga=n(Xi,"DIV",{class:!0});var c0=s(Ga);g(rn.$$.fragment,c0),c0.forEach(r),Xi.forEach(r),zm=l(e),at=n(e,"H2",{class:!0});var yp=s(at);Wt=n(yp,"A",{id:!0,class:!0,href:!0});var l0=s(Wt);Dl=n(l0,"SPAN",{});var d0=s(Dl);g(on.$$.fragment,d0),d0.forEach(r),l0.forEach(r),lv=l(yp),Sl=n(yp,"SPAN",{});var m0=s(Sl);dv=i(m0,"Constraints"),m0.forEach(r),yp.forEach(r),Om=l(e),Nt=n(e,"P",{});var kp=s(Nt);mv=i(kp,"A "),ja=n(kp,"A",{href:!0});var p0=s(ja);pv=i(p0,"Constraint"),p0.forEach(r),fv=i(kp," can be used to force the generation to include specific tokens or sequences in the output."),kp.forEach(r),qm=l(e),$=n(e,"DIV",{class:!0});var T=s($);g(nn.$$.fragment,T),gv=l(T),zl=n(T,"P",{});var f0=s(zl);hv=i(f0,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),f0.forEach(r),uv=l(T),Ol=n(T,"P",{});var g0=s(Ol);_v=i(g0,"All classes that inherit Constraint must follow the requirement that"),g0.forEach(r),bv=l(T),g(sn.$$.fragment,T),vv=l(T),ql=n(T,"P",{});var h0=s(ql);$v=i(h0,"will always terminate (halt)."),h0.forEach(r),Tv=l(T),Vt=n(T,"DIV",{class:!0});var xp=s(Vt);g(an.$$.fragment,xp),yv=l(xp),Bl=n(xp,"P",{});var u0=s(Bl);kv=i(u0,"When called, returns the token that would take this constraint one step closer to being fulfilled."),u0.forEach(r),xp.forEach(r),xv=l(T),Mt=n(T,"DIV",{class:!0});var wp=s(Mt);g(cn.$$.fragment,wp),wv=l(wp),Il=n(wp,"P",{});var _0=s(Il);Lv=i(_0,"Creates a new instance of this constraint."),_0.forEach(r),wp.forEach(r),Ev=l(T),Gt=n(T,"DIV",{class:!0});var Lp=s(Gt);g(ln.$$.fragment,Lp),Pv=l(Lp),Cl=n(Lp,"P",{});var b0=s(Cl);Fv=i(b0,"Reads in a token and returns whether it creates progress."),b0.forEach(r),Lp.forEach(r),Dv=l(T),jt=n(T,"DIV",{class:!0});var Ep=s(jt);g(dn.$$.fragment,Ep),Sv=l(Ep),mn=n(Ep,"P",{});var Pp=s(mn);zv=i(Pp,"Returns the number of remaining steps of "),Al=n(Pp,"CODE",{});var v0=s(Al);Ov=i(v0,"advance()"),v0.forEach(r),qv=i(Pp," in order to complete this constraint."),Pp.forEach(r),Ep.forEach(r),Bv=l(T),Ht=n(T,"DIV",{class:!0});var Fp=s(Ht);g(pn.$$.fragment,Fp),Iv=l(Fp),Wl=n(Fp,"P",{});var $0=s(Wl);Cv=i($0,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),$0.forEach(r),Fp.forEach(r),Av=l(T),Rt=n(T,"DIV",{class:!0});var Dp=s(Rt);g(fn.$$.fragment,Dp),Wv=l(Dp),Nl=n(Dp,"P",{});var T0=s(Nl);Nv=i(T0,"Tests whether this constraint has been properly defined."),T0.forEach(r),Dp.forEach(r),Vv=l(T),Ce=n(T,"DIV",{class:!0});var Ji=s(Ce);g(gn.$$.fragment,Ji),Mv=l(Ji),hn=n(Ji,"P",{});var Sp=s(hn);Gv=i(Sp,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),Vl=n(Sp,"CODE",{});var y0=s(Vl);jv=i(y0,"does_advance(self, token_id: int)"),y0.forEach(r),Hv=i(Sp,"."),Sp.forEach(r),Rv=l(Ji),Ml=n(Ji,"P",{});var k0=s(Ml);Kv=i(k0,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),k0.forEach(r),Ji.forEach(r),T.forEach(r),Bm=l(e),it=n(e,"DIV",{class:!0});var zp=s(it);g(un.$$.fragment,zp),Uv=l(zp),Ha=n(zp,"P",{});var B2=s(Ha);Ra=n(B2,"A",{href:!0});var x0=s(Ra);Yv=i(x0,"Constraint"),x0.forEach(r),Xv=i(B2," enforcing that an ordered sequence of tokens is included in the output."),B2.forEach(r),zp.forEach(r),Im=l(e),ct=n(e,"DIV",{class:!0});var Op=s(ct);g(_n.$$.fragment,Op),Jv=l(Op),bn=n(Op,"P",{});var qp=s(bn);Qv=i(qp,"A special "),Ka=n(qp,"A",{href:!0});var w0=s(Ka);Zv=i(w0,"Constraint"),w0.forEach(r),e$=i(qp," that is fulfilled by fulfilling just one of several constraints."),qp.forEach(r),Op.forEach(r),Cm=l(e),I=n(e,"DIV",{class:!0});var Qt=s(I);g(vn.$$.fragment,Qt),t$=l(Qt),Gl=n(Qt,"P",{});var L0=s(Gl);r$=i(L0,"A class for beam scorers to track its progress through a list of constraints."),L0.forEach(r),o$=l(Qt),E=n(Qt,"DIV",{class:!0});var M=s(E);g($n.$$.fragment,M),n$=l(M),jl=n(M,"P",{});var E0=s(jl);s$=i(E0,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),E0.forEach(r),a$=l(M),lt=n(M,"P",{});var Qi=s(lt);i$=i(Qi,"Given constraints "),Hl=n(Qi,"CODE",{});var P0=s(Hl);c$=i(P0,"c_i = {t_ij | j == # of tokens}"),P0.forEach(r),l$=i(Qi,`, If we\u2019re not in the middle of progressing through a
specific constraint `),Rl=n(Qi,"CODE",{});var F0=s(Rl);d$=i(F0,"c_i"),F0.forEach(r),m$=i(Qi,", we return:"),Qi.forEach(r),p$=l(M),Kl=n(M,"P",{});var D0=s(Kl);Ul=n(D0,"CODE",{});var S0=s(Ul);f$=i(S0,"[t_k1 for k in indices of unfulfilled constraints]"),S0.forEach(r),D0.forEach(r),g$=l(M),Se=n(M,"P",{});var Zt=s(Se);h$=i(Zt,`If we are in the middle of a constraint, then we return:
`),Yl=n(Zt,"CODE",{});var z0=s(Yl);u$=i(z0,"[t_ij]"),z0.forEach(r),_$=i(Zt,", where "),Xl=n(Zt,"CODE",{});var O0=s(Xl);b$=i(O0,"i"),O0.forEach(r),v$=i(Zt," is the index of the inprogress constraint, "),Jl=n(Zt,"CODE",{});var q0=s(Jl);$$=i(q0,"j"),q0.forEach(r),T$=i(Zt," is the next step for the constraint."),Zt.forEach(r),y$=l(M),Ql=n(M,"P",{});var B0=s(Ql);k$=i(B0,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),B0.forEach(r),M.forEach(r),x$=l(Qt),Kt=n(Qt,"DIV",{class:!0});var Bp=s(Kt);g(Tn.$$.fragment,Bp),w$=l(Bp),Zl=n(Bp,"P",{});var I0=s(Zl);L$=i(I0,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),I0.forEach(r),Bp.forEach(r),Qt.forEach(r),Am=l(e),dt=n(e,"H2",{class:!0});var Ip=s(dt);Ut=n(Ip,"A",{id:!0,class:!0,href:!0});var C0=s(Ut);ed=n(C0,"SPAN",{});var A0=s(ed);g(yn.$$.fragment,A0),A0.forEach(r),C0.forEach(r),E$=l(Ip),td=n(Ip,"SPAN",{});var W0=s(td);P$=i(W0,"BeamSearch"),W0.forEach(r),Ip.forEach(r),Wm=l(e),C=n(e,"DIV",{class:!0});var er=s(C);g(kn.$$.fragment,er),F$=l(er),mt=n(er,"P",{});var Zi=s(mt);D$=i(Zi,"Abstract base class for all beam scorers that are used for "),Ua=n(Zi,"A",{href:!0});var N0=s(Ua);S$=i(N0,"beam_search()"),N0.forEach(r),z$=i(Zi,` and
`),Ya=n(Zi,"A",{href:!0});var V0=s(Ya);O$=i(V0,"beam_sample()"),V0.forEach(r),q$=i(Zi,"."),Zi.forEach(r),B$=l(er),Xa=n(er,"DIV",{class:!0});var M0=s(Xa);g(xn.$$.fragment,M0),M0.forEach(r),I$=l(er),Ja=n(er,"DIV",{class:!0});var G0=s(Ja);g(wn.$$.fragment,G0),G0.forEach(r),er.forEach(r),Nm=l(e),L=n(e,"DIV",{class:!0});var G=s(L);g(Ln.$$.fragment,G),C$=l(G),Qa=n(G,"P",{});var I2=s(Qa);Za=n(I2,"A",{href:!0});var j0=s(Za);A$=i(j0,"BeamScorer"),j0.forEach(r),W$=i(I2," implementing standard beam search decoding."),I2.forEach(r),N$=l(G),En=n(G,"P",{});var Cp=s(En);V$=i(Cp,"Adapted in part from "),Pn=n(Cp,"A",{href:!0,rel:!0});var H0=s(Pn);M$=i(H0,`Facebook\u2019s XLM beam search
code`),H0.forEach(r),G$=i(Cp,"."),Cp.forEach(r),j$=l(G),ei=n(G,"P",{});var C2=s(ei);H$=i(C2,"Reference for the diverse beam search algorithm and implementation "),Fn=n(C2,"A",{href:!0,rel:!0});var R0=s(Fn);R$=i(R0,`Ashwin Kalyan\u2019s DBS
implementation`),R0.forEach(r),C2.forEach(r),K$=l(G),ti=n(G,"DIV",{class:!0});var K0=s(ti);g(Dn.$$.fragment,K0),K0.forEach(r),U$=l(G),ri=n(G,"DIV",{class:!0});var U0=s(ri);g(Sn.$$.fragment,U0),U0.forEach(r),G.forEach(r),Vm=l(e),A=n(e,"DIV",{class:!0});var tr=s(A);g(zn.$$.fragment,tr),Y$=l(tr),oi=n(tr,"P",{});var A2=s(oi);ni=n(A2,"A",{href:!0});var Y0=s(ni);X$=i(Y0,"BeamScorer"),Y0.forEach(r),J$=i(A2," implementing constrained beam search decoding."),A2.forEach(r),Q$=l(tr),si=n(tr,"DIV",{class:!0});var X0=s(si);g(On.$$.fragment,X0),X0.forEach(r),Z$=l(tr),ai=n(tr,"DIV",{class:!0});var J0=s(ai);g(qn.$$.fragment,J0),J0.forEach(r),tr.forEach(r),Mm=l(e),pt=n(e,"H2",{class:!0});var Ap=s(pt);Yt=n(Ap,"A",{id:!0,class:!0,href:!0});var Q0=s(Yt);rd=n(Q0,"SPAN",{});var Z0=s(rd);g(Bn.$$.fragment,Z0),Z0.forEach(r),Q0.forEach(r),e2=l(Ap),od=n(Ap,"SPAN",{});var e4=s(od);t2=i(e4,"Utilities"),e4.forEach(r),Ap.forEach(r),Gm=l(e),ze=n(e,"DIV",{class:!0});var ec=s(ze);g(In.$$.fragment,ec),r2=l(ec),nd=n(ec,"P",{});var t4=s(nd);o2=i(t4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),t4.forEach(r),n2=l(ec),ii=n(ec,"P",{});var W2=s(ii);s2=i(W2,"From: "),Cn=n(W2,"A",{href:!0,rel:!0});var r4=s(Cn);a2=i(r4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),r4.forEach(r),W2.forEach(r),ec.forEach(r),jm=l(e),Oe=n(e,"DIV",{class:!0});var tc=s(Oe);g(An.$$.fragment,tc),i2=l(tc),sd=n(tc,"P",{});var o4=s(sd);c2=i(o4,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),o4.forEach(r),l2=l(tc),ci=n(tc,"P",{});var N2=s(ci);d2=i(N2,"From: "),Wn=n(N2,"A",{href:!0,rel:!0});var n4=s(Wn);m2=i(n4,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),n4.forEach(r),N2.forEach(r),tc.forEach(r),this.h()},h(){d(Me,"name","hf:doc:metadata"),d(Me,"content",JSON.stringify(p4)),d(gt,"id","utilities-for-generation"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#utilities-for-generation"),d(Ge,"class","relative group"),d(Vn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Mn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(Gn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(jn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Hn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Rn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Kn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(ht,"id","generate-outputs"),d(ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ht,"href","#generate-outputs"),d(je,"class","relative group"),d(Yn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Xn,"href","/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput"),d(Jn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Zn,"href","/docs/transformers/main/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(_t,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(He,"class","relative group"),d(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vt,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vt,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Ue,"class","relative group"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Je,"class","relative group"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yt,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yt,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(et,"class","relative group"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kt,"id","transformers.LogitsProcessor"),d(kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kt,"href","#transformers.LogitsProcessor"),d(ot,"class","relative group"),d(ss,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(as,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(is,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(cs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(ls,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ps,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ts,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsWarper"),d(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ls,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Nr,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Nr,"rel","nofollow"),d(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ss,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Hr,"href","https://arxiv.org/abs/2010.00904"),d(Hr,"rel","nofollow"),d(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Os,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(qs,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Ur,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Ur,"rel","nofollow"),d(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ws,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(js,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ks,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zs,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsWarper"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ra,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ia,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d($o,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d($o,"rel","nofollow"),d(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(da,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ha,"href","/docs/transformers/main/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_a,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ba,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(va,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d($a,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ka,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(La,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ca,"href","/docs/transformers/main/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"id","transformers.StoppingCriteria"),d(Ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ct,"href","#transformers.StoppingCriteria"),d(nt,"class","relative group"),d(Wa,"href","/docs/transformers/main/en/internal/generation_utils#transformers.StoppingCriteria"),d(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wt,"id","transformers.Constraint"),d(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wt,"href","#transformers.Constraint"),d(at,"class","relative group"),d(ja,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ra,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ka,"href","/docs/transformers/main/en/internal/generation_utils#transformers.Constraint"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ut,"id","transformers.BeamScorer"),d(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ut,"href","#transformers.BeamScorer"),d(dt,"class","relative group"),d(Ua,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Ya,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Za,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(Pn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Pn,"rel","nofollow"),d(Fn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(Fn,"rel","nofollow"),d(ti,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ri,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ni,"href","/docs/transformers/main/en/internal/generation_utils#transformers.BeamScorer"),d(si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ai,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yt,"id","transformers.top_k_top_p_filtering"),d(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yt,"href","#transformers.top_k_top_p_filtering"),d(pt,"class","relative group"),d(Cn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Cn,"rel","nofollow"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Wn,"rel","nofollow"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){t(document.head,Me),p(e,pd,m),p(e,Ge,m),t(Ge,gt),t(gt,rc),h(rr,rc,null),t(Ge,Wp),t(Ge,oc),t(oc,Np),p(e,fd,m),p(e,y,m),t(y,Vp),t(y,Vn),t(Vn,Mp),t(y,Gp),t(y,Mn),t(Mn,jp),t(y,Hp),t(y,Gn),t(Gn,Rp),t(y,Kp),t(y,jn),t(jn,Up),t(y,Yp),t(y,Hn),t(Hn,Xp),t(y,Jp),t(y,Rn),t(Rn,Qp),t(y,Zp),t(y,Kn),t(Kn,ef),t(y,tf),p(e,gd,m),p(e,Un,m),t(Un,rf),p(e,hd,m),p(e,je,m),t(je,ht),t(ht,nc),h(or,nc,null),t(je,of),t(je,sc),t(sc,nf),p(e,ud,m),p(e,W,m),t(W,sf),t(W,Yn),t(Yn,af),t(W,cf),t(W,Xn),t(Xn,lf),t(W,df),t(W,Jn),t(Jn,mf),t(W,pf),p(e,_d,m),p(e,Qn,m),t(Qn,ff),p(e,bd,m),h(nr,e,m),p(e,vd,m),p(e,Be,m),t(Be,gf),t(Be,ac),t(ac,hf),t(Be,uf),t(Be,Zn),t(Zn,_f),t(Be,bf),p(e,$d,m),p(e,N,m),t(N,es),t(es,ic),t(ic,vf),t(es,$f),t(N,Tf),t(N,ts),t(ts,cc),t(cc,yf),t(ts,kf),t(N,xf),t(N,rs),t(rs,lc),t(lc,wf),t(rs,Lf),t(N,Ef),t(N,os),t(os,dc),t(dc,Pf),t(os,Ff),p(e,Td,m),p(e,k,m),t(k,Df),t(k,mc),t(mc,Sf),t(k,zf),t(k,pc),t(pc,Of),t(k,qf),t(k,fc),t(fc,Bf),t(k,If),t(k,gc),t(gc,Cf),t(k,Af),t(k,hc),t(hc,Wf),t(k,Nf),t(k,uc),t(uc,Vf),t(k,Mf),p(e,yd,m),p(e,F,m),t(F,Gf),t(F,_c),t(_c,jf),t(F,Hf),t(F,bc),t(bc,Rf),t(F,Kf),t(F,vc),t(vc,Uf),t(F,Yf),t(F,$c),t($c,Xf),t(F,Jf),p(e,kd,m),p(e,D,m),t(D,Qf),t(D,Tc),t(Tc,Zf),t(D,eg),t(D,yc),t(yc,tg),t(D,rg),t(D,kc),t(kc,og),t(D,ng),t(D,xc),t(xc,sg),t(D,ag),p(e,xd,m),h(sr,e,m),p(e,wd,m),p(e,ut,m),t(ut,ig),t(ut,wc),t(wc,cg),t(ut,lg),p(e,Ld,m),p(e,S,m),t(S,dg),t(S,Lc),t(Lc,mg),t(S,pg),t(S,Ec),t(Ec,fg),t(S,gg),t(S,Pc),t(Pc,hg),t(S,ug),t(S,Fc),t(Fc,_g),t(S,bg),p(e,Ed,m),p(e,ns,m),t(ns,vg),p(e,Pd,m),p(e,He,m),t(He,_t),t(_t,Dc),h(ar,Dc,null),t(He,$g),t(He,Sc),t(Sc,Tg),p(e,Fd,m),p(e,Re,m),h(ir,Re,null),t(Re,yg),t(Re,zc),t(zc,kg),p(e,Dd,m),p(e,Ke,m),h(cr,Ke,null),t(Ke,xg),t(Ke,Oc),t(Oc,wg),p(e,Sd,m),p(e,j,m),h(lr,j,null),t(j,Lg),t(j,qc),t(qc,Eg),t(j,Pg),t(j,bt),h(dr,bt,null),t(bt,Fg),t(bt,Bc),t(Bc,Dg),p(e,zd,m),p(e,Ue,m),t(Ue,vt),t(vt,Ic),h(mr,Ic,null),t(Ue,Sg),t(Ue,Cc),t(Cc,zg),p(e,Od,m),p(e,Ye,m),h(pr,Ye,null),t(Ye,Og),t(Ye,Ac),t(Ac,qg),p(e,qd,m),p(e,Xe,m),h(fr,Xe,null),t(Xe,Bg),t(Xe,Wc),t(Wc,Ig),p(e,Bd,m),p(e,H,m),h(gr,H,null),t(H,Cg),t(H,Nc),t(Nc,Ag),t(H,Wg),t(H,$t),h(hr,$t,null),t($t,Ng),t($t,Vc),t(Vc,Vg),p(e,Id,m),p(e,Je,m),t(Je,Tt),t(Tt,Mc),h(ur,Mc,null),t(Je,Mg),t(Je,Gc),t(Gc,Gg),p(e,Cd,m),p(e,Qe,m),h(_r,Qe,null),t(Qe,jg),t(Qe,jc),t(jc,Hg),p(e,Ad,m),p(e,Ze,m),h(br,Ze,null),t(Ze,Rg),t(Ze,Hc),t(Hc,Kg),p(e,Wd,m),p(e,et,m),t(et,yt),t(yt,Rc),h(vr,Rc,null),t(et,Ug),t(et,Kc),t(Kc,Yg),p(e,Nd,m),p(e,tt,m),h($r,tt,null),t(tt,Xg),t(tt,Uc),t(Uc,Jg),p(e,Vd,m),p(e,rt,m),h(Tr,rt,null),t(rt,Qg),t(rt,Yc),t(Yc,Zg),p(e,Md,m),p(e,ot,m),t(ot,kt),t(kt,Xc),h(yr,Xc,null),t(ot,eh),t(ot,Jc),t(Jc,th),p(e,Gd,m),p(e,xt,m),t(xt,rh),t(xt,ss),t(ss,oh),t(xt,nh),p(e,jd,m),p(e,R,m),h(kr,R,null),t(R,sh),t(R,Qc),t(Qc,ah),t(R,ih),t(R,wt),h(xr,wt,null),t(wt,ch),t(wt,Zc),t(Zc,lh),p(e,Hd,m),p(e,K,m),h(wr,K,null),t(K,dh),t(K,x),t(x,mh),t(x,as),t(as,ph),t(x,fh),t(x,is),t(is,gh),t(x,hh),t(x,el),t(el,uh),t(x,_h),t(x,tl),t(tl,rl),t(rl,bh),t(x,vh),t(x,cs),t(cs,$h),t(x,Th),t(x,ls),t(ls,yh),t(x,kh),t(K,xh),t(K,ds),h(Lr,ds,null),p(e,Rd,m),p(e,U,m),h(Er,U,null),t(U,wh),t(U,ol),t(ol,Lh),t(U,Eh),t(U,Lt),h(Pr,Lt,null),t(Lt,Ph),t(Lt,nl),t(nl,Fh),p(e,Kd,m),p(e,Y,m),h(Fr,Y,null),t(Y,Dh),t(Y,ms),t(ms,ps),t(ps,Sh),t(ms,zh),t(Y,Oh),t(Y,fs),h(Dr,fs,null),p(e,Ud,m),p(e,X,m),h(Sr,X,null),t(X,qh),t(X,gs),t(gs,hs),t(hs,Bh),t(gs,Ih),t(X,Ch),t(X,us),h(zr,us,null),p(e,Yd,m),p(e,J,m),h(Or,J,null),t(J,Ah),t(J,_s),t(_s,bs),t(bs,Wh),t(_s,Nh),t(J,Vh),t(J,vs),h(qr,vs,null),p(e,Xd,m),p(e,Q,m),h(Br,Q,null),t(Q,Mh),t(Q,$s),t($s,Ts),t(Ts,Gh),t($s,jh),t(Q,Hh),t(Q,ys),h(Ir,ys,null),p(e,Jd,m),p(e,Z,m),h(Cr,Z,null),t(Z,Rh),t(Z,ks),t(ks,xs),t(xs,Kh),t(ks,Uh),t(Z,Yh),t(Z,ws),h(Ar,ws,null),p(e,Qd,m),p(e,ee,m),h(Wr,ee,null),t(ee,Xh),t(ee,Et),t(Et,Ls),t(Ls,Jh),t(Et,Qh),t(Et,Nr),t(Nr,Zh),t(Et,eu),t(ee,tu),t(ee,Es),h(Vr,Es,null),p(e,Zd,m),p(e,te,m),h(Mr,te,null),t(te,ru),t(te,Ps),t(Ps,Fs),t(Fs,ou),t(Ps,nu),t(te,su),t(te,Ds),h(Gr,Ds,null),p(e,em,m),p(e,re,m),h(jr,re,null),t(re,au),t(re,Pt),t(Pt,Ss),t(Ss,iu),t(Pt,cu),t(Pt,Hr),t(Hr,lu),t(Pt,du),t(re,mu),t(re,zs),h(Rr,zs,null),p(e,tm,m),p(e,oe,m),h(Kr,oe,null),t(oe,pu),t(oe,Ie),t(Ie,Os),t(Os,fu),t(Ie,gu),t(Ie,qs),t(qs,hu),t(Ie,uu),t(Ie,Ur),t(Ur,_u),t(Ie,bu),t(oe,vu),t(oe,Bs),h(Yr,Bs,null),p(e,rm,m),p(e,ne,m),h(Xr,ne,null),t(ne,$u),t(ne,Is),t(Is,Cs),t(Cs,Tu),t(Is,yu),t(ne,ku),t(ne,As),h(Jr,As,null),p(e,om,m),p(e,se,m),h(Qr,se,null),t(se,xu),t(se,Ft),t(Ft,Ws),t(Ws,wu),t(Ft,Lu),t(Ft,sl),t(sl,Eu),t(Ft,Pu),t(se,Fu),t(se,Ns),h(Zr,Ns,null),p(e,nm,m),p(e,ae,m),h(eo,ae,null),t(ae,Du),t(ae,V),t(V,Vs),t(Vs,Su),t(V,zu),t(V,al),t(al,Ou),t(V,qu),t(V,il),t(il,Bu),t(V,Iu),t(V,cl),t(cl,Cu),t(V,Au),t(ae,Wu),t(ae,Ms),h(to,Ms,null),p(e,sm,m),p(e,ie,m),h(ro,ie,null),t(ie,Nu),t(ie,ll),t(ll,Vu),t(ie,Mu),t(ie,Dt),h(oo,Dt,null),t(Dt,Gu),t(Dt,dl),t(dl,ju),p(e,am,m),p(e,ce,m),h(no,ce,null),t(ce,Hu),t(ce,B),t(B,Ru),t(B,Gs),t(Gs,Ku),t(B,Uu),t(B,ml),t(ml,Yu),t(B,Xu),t(B,pl),t(pl,fl),t(fl,Ju),t(B,Qu),t(B,js),t(js,Zu),t(B,e_),t(ce,t_),t(ce,Hs),h(so,Hs,null),p(e,im,m),p(e,le,m),h(ao,le,null),t(le,r_),t(le,gl),t(gl,o_),t(le,n_),t(le,St),h(io,St,null),t(St,s_),t(St,hl),t(hl,a_),p(e,cm,m),p(e,de,m),h(co,de,null),t(de,i_),t(de,Rs),t(Rs,Ks),t(Ks,c_),t(Rs,l_),t(de,d_),t(de,Us),h(lo,Us,null),p(e,lm,m),p(e,me,m),h(mo,me,null),t(me,m_),t(me,Ys),t(Ys,Xs),t(Xs,p_),t(Ys,f_),t(me,g_),t(me,Js),h(po,Js,null),p(e,dm,m),p(e,pe,m),h(fo,pe,null),t(pe,h_),t(pe,Qs),t(Qs,Zs),t(Zs,u_),t(Qs,__),t(pe,b_),t(pe,ea),h(go,ea,null),p(e,mm,m),p(e,fe,m),h(ho,fe,null),t(fe,v_),t(fe,ta),t(ta,ra),t(ra,$_),t(ta,T_),t(fe,y_),t(fe,oa),h(uo,oa,null),p(e,pm,m),p(e,ge,m),h(_o,ge,null),t(ge,k_),t(ge,na),t(na,sa),t(sa,x_),t(na,w_),t(ge,L_),t(ge,aa),h(bo,aa,null),p(e,fm,m),p(e,he,m),h(vo,he,null),t(he,E_),t(he,zt),t(zt,ia),t(ia,P_),t(zt,F_),t(zt,$o),t($o,D_),t(zt,S_),t(he,z_),t(he,ca),h(To,ca,null),p(e,gm,m),p(e,ue,m),h(yo,ue,null),t(ue,O_),t(ue,la),t(la,da),t(da,q_),t(la,B_),t(ue,I_),t(ue,ma),h(ko,ma,null),p(e,hm,m),p(e,_e,m),h(xo,_e,null),t(_e,C_),t(_e,pa),t(pa,fa),t(fa,A_),t(pa,W_),t(_e,N_),t(_e,ga),h(wo,ga,null),p(e,um,m),p(e,be,m),h(Lo,be,null),t(be,V_),t(be,Ot),t(Ot,ha),t(ha,M_),t(Ot,G_),t(Ot,ul),t(ul,j_),t(Ot,H_),t(be,R_),t(be,ua),h(Eo,ua,null),p(e,_m,m),p(e,ve,m),h(Po,ve,null),t(ve,K_),t(ve,_l),t(_l,U_),t(ve,Y_),t(ve,qt),h(Fo,qt,null),t(qt,X_),t(qt,bl),t(bl,J_),p(e,bm,m),p(e,$e,m),h(Do,$e,null),t($e,Q_),t($e,w),t(w,Z_),t(w,_a),t(_a,eb),t(w,tb),t(w,ba),t(ba,rb),t(w,ob),t(w,vl),t(vl,nb),t(w,sb),t(w,$l),t($l,Tl),t(Tl,ab),t(w,ib),t(w,va),t(va,cb),t(w,lb),t(w,$a),t($a,db),t(w,mb),t($e,pb),t($e,Ta),h(So,Ta,null),p(e,vm,m),p(e,Te,m),h(zo,Te,null),t(Te,fb),t(Te,yl),t(yl,gb),t(Te,hb),t(Te,Bt),h(Oo,Bt,null),t(Bt,ub),t(Bt,kl),t(kl,_b),p(e,$m,m),p(e,ye,m),h(qo,ye,null),t(ye,bb),t(ye,ya),t(ya,ka),t(ka,vb),t(ya,$b),t(ye,Tb),t(ye,xa),h(Bo,xa,null),p(e,Tm,m),p(e,ke,m),h(Io,ke,null),t(ke,yb),t(ke,wa),t(wa,La),t(La,kb),t(wa,xb),t(ke,wb),t(ke,Ea),h(Co,Ea,null),p(e,ym,m),p(e,xe,m),h(Ao,xe,null),t(xe,Lb),t(xe,Pa),t(Pa,Fa),t(Fa,Eb),t(Pa,Pb),t(xe,Fb),t(xe,Da),h(Wo,Da,null),p(e,km,m),p(e,we,m),h(No,we,null),t(we,Db),t(we,Sa),t(Sa,za),t(za,Sb),t(Sa,zb),t(we,Ob),t(we,Oa),h(Vo,Oa,null),p(e,xm,m),p(e,Le,m),h(Mo,Le,null),t(Le,qb),t(Le,It),t(It,qa),t(qa,Bb),t(It,Ib),t(It,xl),t(xl,Cb),t(It,Ab),t(Le,Wb),t(Le,Ba),h(Go,Ba,null),p(e,wm,m),p(e,Ee,m),h(jo,Ee,null),t(Ee,Nb),t(Ee,Ia),t(Ia,Ca),t(Ca,Vb),t(Ia,Mb),t(Ee,Gb),t(Ee,Aa),h(Ho,Aa,null),p(e,Lm,m),p(e,nt,m),t(nt,Ct),t(Ct,wl),h(Ro,wl,null),t(nt,jb),t(nt,Ll),t(Ll,Hb),p(e,Em,m),p(e,At,m),t(At,Rb),t(At,Wa),t(Wa,Kb),t(At,Ub),p(e,Pm,m),p(e,Pe,m),h(Ko,Pe,null),t(Pe,Yb),t(Pe,El),t(El,Xb),t(Pe,Jb),t(Pe,Na),h(Uo,Na,null),p(e,Fm,m),p(e,st,m),h(Yo,st,null),t(st,Qb),t(st,Va),h(Xo,Va,null),p(e,Dm,m),p(e,Fe,m),h(Jo,Fe,null),t(Fe,Zb),t(Fe,Qo),t(Qo,ev),t(Qo,Pl),t(Pl,tv),t(Qo,rv),t(Fe,ov),t(Fe,Ma),h(Zo,Ma,null),p(e,Sm,m),p(e,De,m),h(en,De,null),t(De,nv),t(De,tn),t(tn,sv),t(tn,Fl),t(Fl,av),t(tn,iv),t(De,cv),t(De,Ga),h(rn,Ga,null),p(e,zm,m),p(e,at,m),t(at,Wt),t(Wt,Dl),h(on,Dl,null),t(at,lv),t(at,Sl),t(Sl,dv),p(e,Om,m),p(e,Nt,m),t(Nt,mv),t(Nt,ja),t(ja,pv),t(Nt,fv),p(e,qm,m),p(e,$,m),h(nn,$,null),t($,gv),t($,zl),t(zl,hv),t($,uv),t($,Ol),t(Ol,_v),t($,bv),h(sn,$,null),t($,vv),t($,ql),t(ql,$v),t($,Tv),t($,Vt),h(an,Vt,null),t(Vt,yv),t(Vt,Bl),t(Bl,kv),t($,xv),t($,Mt),h(cn,Mt,null),t(Mt,wv),t(Mt,Il),t(Il,Lv),t($,Ev),t($,Gt),h(ln,Gt,null),t(Gt,Pv),t(Gt,Cl),t(Cl,Fv),t($,Dv),t($,jt),h(dn,jt,null),t(jt,Sv),t(jt,mn),t(mn,zv),t(mn,Al),t(Al,Ov),t(mn,qv),t($,Bv),t($,Ht),h(pn,Ht,null),t(Ht,Iv),t(Ht,Wl),t(Wl,Cv),t($,Av),t($,Rt),h(fn,Rt,null),t(Rt,Wv),t(Rt,Nl),t(Nl,Nv),t($,Vv),t($,Ce),h(gn,Ce,null),t(Ce,Mv),t(Ce,hn),t(hn,Gv),t(hn,Vl),t(Vl,jv),t(hn,Hv),t(Ce,Rv),t(Ce,Ml),t(Ml,Kv),p(e,Bm,m),p(e,it,m),h(un,it,null),t(it,Uv),t(it,Ha),t(Ha,Ra),t(Ra,Yv),t(Ha,Xv),p(e,Im,m),p(e,ct,m),h(_n,ct,null),t(ct,Jv),t(ct,bn),t(bn,Qv),t(bn,Ka),t(Ka,Zv),t(bn,e$),p(e,Cm,m),p(e,I,m),h(vn,I,null),t(I,t$),t(I,Gl),t(Gl,r$),t(I,o$),t(I,E),h($n,E,null),t(E,n$),t(E,jl),t(jl,s$),t(E,a$),t(E,lt),t(lt,i$),t(lt,Hl),t(Hl,c$),t(lt,l$),t(lt,Rl),t(Rl,d$),t(lt,m$),t(E,p$),t(E,Kl),t(Kl,Ul),t(Ul,f$),t(E,g$),t(E,Se),t(Se,h$),t(Se,Yl),t(Yl,u$),t(Se,_$),t(Se,Xl),t(Xl,b$),t(Se,v$),t(Se,Jl),t(Jl,$$),t(Se,T$),t(E,y$),t(E,Ql),t(Ql,k$),t(I,x$),t(I,Kt),h(Tn,Kt,null),t(Kt,w$),t(Kt,Zl),t(Zl,L$),p(e,Am,m),p(e,dt,m),t(dt,Ut),t(Ut,ed),h(yn,ed,null),t(dt,E$),t(dt,td),t(td,P$),p(e,Wm,m),p(e,C,m),h(kn,C,null),t(C,F$),t(C,mt),t(mt,D$),t(mt,Ua),t(Ua,S$),t(mt,z$),t(mt,Ya),t(Ya,O$),t(mt,q$),t(C,B$),t(C,Xa),h(xn,Xa,null),t(C,I$),t(C,Ja),h(wn,Ja,null),p(e,Nm,m),p(e,L,m),h(Ln,L,null),t(L,C$),t(L,Qa),t(Qa,Za),t(Za,A$),t(Qa,W$),t(L,N$),t(L,En),t(En,V$),t(En,Pn),t(Pn,M$),t(En,G$),t(L,j$),t(L,ei),t(ei,H$),t(ei,Fn),t(Fn,R$),t(L,K$),t(L,ti),h(Dn,ti,null),t(L,U$),t(L,ri),h(Sn,ri,null),p(e,Vm,m),p(e,A,m),h(zn,A,null),t(A,Y$),t(A,oi),t(oi,ni),t(ni,X$),t(oi,J$),t(A,Q$),t(A,si),h(On,si,null),t(A,Z$),t(A,ai),h(qn,ai,null),p(e,Mm,m),p(e,pt,m),t(pt,Yt),t(Yt,rd),h(Bn,rd,null),t(pt,e2),t(pt,od),t(od,t2),p(e,Gm,m),p(e,ze,m),h(In,ze,null),t(ze,r2),t(ze,nd),t(nd,o2),t(ze,n2),t(ze,ii),t(ii,s2),t(ii,Cn),t(Cn,a2),p(e,jm,m),p(e,Oe,m),h(An,Oe,null),t(Oe,i2),t(Oe,sd),t(sd,c2),t(Oe,l2),t(Oe,ci),t(ci,d2),t(ci,Wn),t(Wn,m2),Hm=!0},p:l4,i(e){Hm||(u(rr.$$.fragment,e),u(or.$$.fragment,e),u(nr.$$.fragment,e),u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(mr.$$.fragment,e),u(pr.$$.fragment,e),u(fr.$$.fragment,e),u(gr.$$.fragment,e),u(hr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(br.$$.fragment,e),u(vr.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(xr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(Sr.$$.fragment,e),u(zr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Cr.$$.fragment,e),u(Ar.$$.fragment,e),u(Wr.$$.fragment,e),u(Vr.$$.fragment,e),u(Mr.$$.fragment,e),u(Gr.$$.fragment,e),u(jr.$$.fragment,e),u(Rr.$$.fragment,e),u(Kr.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(mo.$$.fragment,e),u(po.$$.fragment,e),u(fo.$$.fragment,e),u(go.$$.fragment,e),u(ho.$$.fragment,e),u(uo.$$.fragment,e),u(_o.$$.fragment,e),u(bo.$$.fragment,e),u(vo.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(xo.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(So.$$.fragment,e),u(zo.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Co.$$.fragment,e),u(Ao.$$.fragment,e),u(Wo.$$.fragment,e),u(No.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ho.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Uo.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(rn.$$.fragment,e),u(on.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(an.$$.fragment,e),u(cn.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(pn.$$.fragment,e),u(fn.$$.fragment,e),u(gn.$$.fragment,e),u(un.$$.fragment,e),u(_n.$$.fragment,e),u(vn.$$.fragment,e),u($n.$$.fragment,e),u(Tn.$$.fragment,e),u(yn.$$.fragment,e),u(kn.$$.fragment,e),u(xn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(Dn.$$.fragment,e),u(Sn.$$.fragment,e),u(zn.$$.fragment,e),u(On.$$.fragment,e),u(qn.$$.fragment,e),u(Bn.$$.fragment,e),u(In.$$.fragment,e),u(An.$$.fragment,e),Hm=!0)},o(e){_(rr.$$.fragment,e),_(or.$$.fragment,e),_(nr.$$.fragment,e),_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(mr.$$.fragment,e),_(pr.$$.fragment,e),_(fr.$$.fragment,e),_(gr.$$.fragment,e),_(hr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(br.$$.fragment,e),_(vr.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(xr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(Sr.$$.fragment,e),_(zr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Cr.$$.fragment,e),_(Ar.$$.fragment,e),_(Wr.$$.fragment,e),_(Vr.$$.fragment,e),_(Mr.$$.fragment,e),_(Gr.$$.fragment,e),_(jr.$$.fragment,e),_(Rr.$$.fragment,e),_(Kr.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(mo.$$.fragment,e),_(po.$$.fragment,e),_(fo.$$.fragment,e),_(go.$$.fragment,e),_(ho.$$.fragment,e),_(uo.$$.fragment,e),_(_o.$$.fragment,e),_(bo.$$.fragment,e),_(vo.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(xo.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(So.$$.fragment,e),_(zo.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Co.$$.fragment,e),_(Ao.$$.fragment,e),_(Wo.$$.fragment,e),_(No.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ho.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Uo.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(rn.$$.fragment,e),_(on.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(an.$$.fragment,e),_(cn.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(pn.$$.fragment,e),_(fn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(_n.$$.fragment,e),_(vn.$$.fragment,e),_($n.$$.fragment,e),_(Tn.$$.fragment,e),_(yn.$$.fragment,e),_(kn.$$.fragment,e),_(xn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(Dn.$$.fragment,e),_(Sn.$$.fragment,e),_(zn.$$.fragment,e),_(On.$$.fragment,e),_(qn.$$.fragment,e),_(Bn.$$.fragment,e),_(In.$$.fragment,e),_(An.$$.fragment,e),Hm=!1},d(e){r(Me),e&&r(pd),e&&r(Ge),b(rr),e&&r(fd),e&&r(y),e&&r(gd),e&&r(Un),e&&r(hd),e&&r(je),b(or),e&&r(ud),e&&r(W),e&&r(_d),e&&r(Qn),e&&r(bd),b(nr,e),e&&r(vd),e&&r(Be),e&&r($d),e&&r(N),e&&r(Td),e&&r(k),e&&r(yd),e&&r(F),e&&r(kd),e&&r(D),e&&r(xd),b(sr,e),e&&r(wd),e&&r(ut),e&&r(Ld),e&&r(S),e&&r(Ed),e&&r(ns),e&&r(Pd),e&&r(He),b(ar),e&&r(Fd),e&&r(Re),b(ir),e&&r(Dd),e&&r(Ke),b(cr),e&&r(Sd),e&&r(j),b(lr),b(dr),e&&r(zd),e&&r(Ue),b(mr),e&&r(Od),e&&r(Ye),b(pr),e&&r(qd),e&&r(Xe),b(fr),e&&r(Bd),e&&r(H),b(gr),b(hr),e&&r(Id),e&&r(Je),b(ur),e&&r(Cd),e&&r(Qe),b(_r),e&&r(Ad),e&&r(Ze),b(br),e&&r(Wd),e&&r(et),b(vr),e&&r(Nd),e&&r(tt),b($r),e&&r(Vd),e&&r(rt),b(Tr),e&&r(Md),e&&r(ot),b(yr),e&&r(Gd),e&&r(xt),e&&r(jd),e&&r(R),b(kr),b(xr),e&&r(Hd),e&&r(K),b(wr),b(Lr),e&&r(Rd),e&&r(U),b(Er),b(Pr),e&&r(Kd),e&&r(Y),b(Fr),b(Dr),e&&r(Ud),e&&r(X),b(Sr),b(zr),e&&r(Yd),e&&r(J),b(Or),b(qr),e&&r(Xd),e&&r(Q),b(Br),b(Ir),e&&r(Jd),e&&r(Z),b(Cr),b(Ar),e&&r(Qd),e&&r(ee),b(Wr),b(Vr),e&&r(Zd),e&&r(te),b(Mr),b(Gr),e&&r(em),e&&r(re),b(jr),b(Rr),e&&r(tm),e&&r(oe),b(Kr),b(Yr),e&&r(rm),e&&r(ne),b(Xr),b(Jr),e&&r(om),e&&r(se),b(Qr),b(Zr),e&&r(nm),e&&r(ae),b(eo),b(to),e&&r(sm),e&&r(ie),b(ro),b(oo),e&&r(am),e&&r(ce),b(no),b(so),e&&r(im),e&&r(le),b(ao),b(io),e&&r(cm),e&&r(de),b(co),b(lo),e&&r(lm),e&&r(me),b(mo),b(po),e&&r(dm),e&&r(pe),b(fo),b(go),e&&r(mm),e&&r(fe),b(ho),b(uo),e&&r(pm),e&&r(ge),b(_o),b(bo),e&&r(fm),e&&r(he),b(vo),b(To),e&&r(gm),e&&r(ue),b(yo),b(ko),e&&r(hm),e&&r(_e),b(xo),b(wo),e&&r(um),e&&r(be),b(Lo),b(Eo),e&&r(_m),e&&r(ve),b(Po),b(Fo),e&&r(bm),e&&r($e),b(Do),b(So),e&&r(vm),e&&r(Te),b(zo),b(Oo),e&&r($m),e&&r(ye),b(qo),b(Bo),e&&r(Tm),e&&r(ke),b(Io),b(Co),e&&r(ym),e&&r(xe),b(Ao),b(Wo),e&&r(km),e&&r(we),b(No),b(Vo),e&&r(xm),e&&r(Le),b(Mo),b(Go),e&&r(wm),e&&r(Ee),b(jo),b(Ho),e&&r(Lm),e&&r(nt),b(Ro),e&&r(Em),e&&r(At),e&&r(Pm),e&&r(Pe),b(Ko),b(Uo),e&&r(Fm),e&&r(st),b(Yo),b(Xo),e&&r(Dm),e&&r(Fe),b(Jo),b(Zo),e&&r(Sm),e&&r(De),b(en),b(rn),e&&r(zm),e&&r(at),b(on),e&&r(Om),e&&r(Nt),e&&r(qm),e&&r($),b(nn),b(sn),b(an),b(cn),b(ln),b(dn),b(pn),b(fn),b(gn),e&&r(Bm),e&&r(it),b(un),e&&r(Im),e&&r(ct),b(_n),e&&r(Cm),e&&r(I),b(vn),b($n),b(Tn),e&&r(Am),e&&r(dt),b(yn),e&&r(Wm),e&&r(C),b(kn),b(xn),b(wn),e&&r(Nm),e&&r(L),b(Ln),b(Dn),b(Sn),e&&r(Vm),e&&r(A),b(zn),b(On),b(qn),e&&r(Mm),e&&r(pt),b(Bn),e&&r(Gm),e&&r(ze),b(In),e&&r(jm),e&&r(Oe),b(An)}}}const p4={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function f4(M2){return d4(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class b4 extends s4{constructor(Me){super();a4(this,Me,f4,m4,i4,{})}}export{b4 as default,p4 as metadata};
