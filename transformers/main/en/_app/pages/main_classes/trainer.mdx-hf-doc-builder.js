import{S as sM,i as lM,s as iM,e as n,k as i,w as h,t as a,M as dM,c as s,d as r,m as d,a as l,x as f,h as o,b as m,G as e,g as p,y as u,q as _,o as g,B as v,v as cM,L as pM}from"../../chunks/vendor-hf-doc-builder.js";import{T as rp}from"../../chunks/Tip-hf-doc-builder.js";import{D as k}from"../../chunks/Docstring-hf-doc-builder.js";import{C as S}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as W}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as mM}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function hM(Y){let E,O,T,D,z,P,C,G,ue,te,M,ne,se,re,le,B,Ze,_e,F,I,nt,ae,st,lt,ge,xo,So,Ke,Ae,No,ve,Io,Uo;return{c(){E=n("p"),O=a("The "),T=n("a"),D=a("Trainer"),z=a(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),P=i(),C=n("ul"),G=n("li"),ue=a("your model always return tuples or subclasses of "),te=n("a"),M=a("ModelOutput"),ne=a("."),se=i(),re=n("li"),le=a("your model can compute the loss if a "),B=n("code"),Ze=a("labels"),_e=a(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),F=i(),I=n("li"),nt=a("your model can accept multiple label arguments (use the "),ae=n("code"),st=a("label_names"),lt=a(" in your "),ge=n("a"),xo=a("TrainingArguments"),So=a(" to indicate their name to the "),Ke=n("a"),Ae=a("Trainer"),No=a(") but none of them should be named "),ve=n("code"),Io=a('"label"'),Uo=a("."),this.h()},l(Z){E=s(Z,"P",{});var V=l(E);O=o(V,"The "),T=s(V,"A",{href:!0});var Vl=l(T);D=o(Vl,"Trainer"),Vl.forEach(r),z=o(V,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),V.forEach(r),P=d(Z),C=s(Z,"UL",{});var be=l(C);G=s(be,"LI",{});var Zr=l(G);ue=o(Zr,"your model always return tuples or subclasses of "),te=s(Zr,"A",{href:!0});var Hl=l(te);M=o(Hl,"ModelOutput"),Hl.forEach(r),ne=o(Zr,"."),Zr.forEach(r),se=d(be),re=s(be,"LI",{});var rr=l(re);le=o(rr,"your model can compute the loss if a "),B=s(rr,"CODE",{});var N=l(B);Ze=o(N,"labels"),N.forEach(r),_e=o(rr,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),rr.forEach(r),F=d(be),I=s(be,"LI",{});var H=l(I);nt=o(H,"your model can accept multiple label arguments (use the "),ae=s(H,"CODE",{});var Kr=l(ae);st=o(Kr,"label_names"),Kr.forEach(r),lt=o(H," in your "),ge=s(H,"A",{href:!0});var Wl=l(ge);xo=o(Wl,"TrainingArguments"),Wl.forEach(r),So=o(H," to indicate their name to the "),Ke=s(H,"A",{href:!0});var Yl=l(Ke);Ae=o(Yl,"Trainer"),Yl.forEach(r),No=o(H,") but none of them should be named "),ve=s(H,"CODE",{});var Zl=l(ve);Io=o(Zl,'"label"'),Zl.forEach(r),Uo=o(H,"."),H.forEach(r),be.forEach(r),this.h()},h(){m(T,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(te,"href","/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput"),m(ge,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(Ke,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer")},m(Z,V){p(Z,E,V),e(E,O),e(E,T),e(T,D),e(E,z),p(Z,P,V),p(Z,C,V),e(C,G),e(G,ue),e(G,te),e(te,M),e(G,ne),e(C,se),e(C,re),e(re,le),e(re,B),e(B,Ze),e(re,_e),e(C,F),e(C,I),e(I,nt),e(I,ae),e(ae,st),e(I,lt),e(I,ge),e(ge,xo),e(I,So),e(I,Ke),e(Ke,Ae),e(I,No),e(I,ve),e(ve,Io),e(I,Uo)},d(Z){Z&&r(E),Z&&r(P),Z&&r(C)}}}function fM(Y){let E,O,T,D,z,P,C,G,ue,te,M,ne,se,re,le,B,Ze;return{c(){E=n("p"),O=a("To use this method, you need to have provided a "),T=n("code"),D=a("model_init"),z=a(" when initializing your "),P=n("a"),C=a("Trainer"),G=a(`: we need to
reinitialize the model at each new run. This is incompatible with the `),ue=n("code"),te=a("optimizers"),M=a(` argument, so you need to
subclass `),ne=n("a"),se=a("Trainer"),re=a(" and override the method "),le=n("a"),B=a("create_optimizer_and_scheduler()"),Ze=a(` for custom
optimizer/scheduler.`),this.h()},l(_e){E=s(_e,"P",{});var F=l(E);O=o(F,"To use this method, you need to have provided a "),T=s(F,"CODE",{});var I=l(T);D=o(I,"model_init"),I.forEach(r),z=o(F," when initializing your "),P=s(F,"A",{href:!0});var nt=l(P);C=o(nt,"Trainer"),nt.forEach(r),G=o(F,`: we need to
reinitialize the model at each new run. This is incompatible with the `),ue=s(F,"CODE",{});var ae=l(ue);te=o(ae,"optimizers"),ae.forEach(r),M=o(F,` argument, so you need to
subclass `),ne=s(F,"A",{href:!0});var st=l(ne);se=o(st,"Trainer"),st.forEach(r),re=o(F," and override the method "),le=s(F,"A",{href:!0});var lt=l(le);B=o(lt,"create_optimizer_and_scheduler()"),lt.forEach(r),Ze=o(F,` for custom
optimizer/scheduler.`),F.forEach(r),this.h()},h(){m(P,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(ne,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(le,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(_e,F){p(_e,E,F),e(E,O),e(E,T),e(T,D),e(E,z),e(E,P),e(P,C),e(E,G),e(E,ue),e(ue,te),e(E,M),e(E,ne),e(ne,se),e(E,re),e(E,le),e(le,B),e(E,Ze)},d(_e){_e&&r(E)}}}function uM(Y){let E,O,T,D,z;return D=new S({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB`,highlighted:`<span class="hljs-attr">init_mem_cpu_alloc_delta</span>   =     <span class="hljs-number">1301</span>MB
<span class="hljs-attr">init_mem_cpu_peaked_delta</span>  =      <span class="hljs-number">154</span>MB
<span class="hljs-attr">init_mem_gpu_alloc_delta</span>   =      <span class="hljs-number">230</span>MB
<span class="hljs-attr">init_mem_gpu_peaked_delta</span>  =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_cpu_alloc_delta</span>  =     <span class="hljs-number">1345</span>MB
<span class="hljs-attr">train_mem_cpu_peaked_delta</span> =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_gpu_alloc_delta</span>  =      <span class="hljs-number">693</span>MB
<span class="hljs-attr">train_mem_gpu_peaked_delta</span> =        <span class="hljs-number">7</span>MB`}}),{c(){E=n("p"),O=a("Now when this method is run, you will see a report that will include: :"),T=i(),h(D.$$.fragment)},l(P){E=s(P,"P",{});var C=l(E);O=o(C,"Now when this method is run, you will see a report that will include: :"),C.forEach(r),T=d(P),f(D.$$.fragment,P)},m(P,C){p(P,E,C),e(E,O),p(P,T,C),u(D,P,C),z=!0},p:pM,i(P){z||(_(D.$$.fragment,P),z=!0)},o(P){g(D.$$.fragment,P),z=!1},d(P){P&&r(E),P&&r(T),v(D,P)}}}function _M(Y){let E,O;return{c(){E=n("p"),O=a(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`)},l(T){E=s(T,"P",{});var D=l(E);O=o(D,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`),D.forEach(r)},m(T,D){p(T,E,D),e(E,O)},d(T){T&&r(E)}}}function gM(Y){let E,O;return{c(){E=n("p"),O=a(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(T){E=s(T,"P",{});var D=l(E);O=o(D,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),D.forEach(r)},m(T,D){p(T,E,D),e(E,O)},d(T){T&&r(E)}}}function vM(Y){let E,O;return{c(){E=n("p"),O=a("This integration is not supported anymore, we recommend you either use DeepSpeed or PyTorch FSDP.")},l(T){E=s(T,"P",{});var D=l(E);O=o(D,"This integration is not supported anymore, we recommend you either use DeepSpeed or PyTorch FSDP."),D.forEach(r)},m(T,D){p(T,E,D),e(E,O)},d(T){T&&r(E)}}}function bM(Y){let E,O,T,D,z;return{c(){E=n("p"),O=a(`We strongly recommend to install PyTorch >= 1.13 (nightly version at the time of writing) on your MacOS machine.
It has major fixes related to model correctness and performance improvements for transformer based models.
Please refer to `),T=n("a"),D=a("https://github.com/pytorch/pytorch/issues/82707"),z=a(" for more details."),this.h()},l(P){E=s(P,"P",{});var C=l(E);O=o(C,`We strongly recommend to install PyTorch >= 1.13 (nightly version at the time of writing) on your MacOS machine.
It has major fixes related to model correctness and performance improvements for transformer based models.
Please refer to `),T=s(C,"A",{href:!0,rel:!0});var G=l(T);D=o(G,"https://github.com/pytorch/pytorch/issues/82707"),G.forEach(r),z=o(C," for more details."),C.forEach(r),this.h()},h(){m(T,"href","https://github.com/pytorch/pytorch/issues/82707"),m(T,"rel","nofollow")},m(P,C){p(P,E,C),e(E,O),e(E,T),e(T,D),e(E,z)},d(P){P&&r(E)}}}function yM(Y){let E,O,T,D,z,P,C,G,ue,te,M,ne,se,re,le,B,Ze,_e,F,I,nt,ae,st,lt,ge,xo,So,Ke,Ae,No,ve,Io,Uo,Z,V,Vl,be,Zr,Hl,rr,N,H,Kr,Wl,Yl,Zl,Kl,ap,iw,dw,cw,Jl,op,pw,mw,hw,Ql,np,fw,uw,_w,it,sp,gw,vw,lp,bw,yw,ip,ww,Ew,$w,Xl,dp,Tw,kw,Dw,ei,cp,Pw,Aw,Ow,ti,pp,Cw,xw,Sw,ri,mp,Nw,Iw,Uw,ai,hp,Lw,Fw,zw,oi,fp,Rw,Gw,qw,ni,up,Mw,jw,ov,Jr,nv,Qr,Bw,si,Vw,Hw,sv,Lo,lv,dt,Ww,li,Yw,Zw,ii,Kw,Jw,iv,ar,Xr,_p,Fo,Qw,gp,Xw,dv,b,zo,eE,vp,tE,rE,bp,aE,oE,ye,ea,yp,nE,sE,di,lE,iE,dE,K,wp,cE,pE,Ep,mE,hE,$p,fE,uE,Tp,_E,gE,kp,vE,bE,Dp,yE,wE,EE,ci,Pp,$E,TE,kE,Oe,Ap,DE,PE,Op,AE,OE,Cp,CE,xE,xp,SE,NE,IE,Ce,Sp,UE,LE,Np,FE,zE,Ip,RE,GE,Up,qE,ME,jE,ta,Ro,BE,Go,VE,Lp,HE,WE,YE,ra,qo,ZE,Mo,KE,Fp,JE,QE,XE,ct,jo,e0,zp,t0,r0,Rp,a0,o0,aa,Bo,n0,Gp,s0,l0,pt,Vo,i0,qp,d0,c0,Ho,p0,Mp,m0,h0,f0,mt,Wo,u0,jp,_0,g0,Je,v0,Bp,b0,y0,Vp,w0,E0,Hp,$0,T0,k0,oa,Yo,D0,Wp,P0,A0,xe,Zo,O0,Yp,C0,x0,Ko,S0,Zp,N0,I0,U0,Kp,L0,F0,ht,Jo,z0,or,R0,Jp,G0,q0,Qp,M0,j0,B0,Xp,V0,H0,na,Qo,W0,Xo,Y0,pi,Z0,K0,J0,ft,en,Q0,tn,X0,em,e$,t$,r$,tm,a$,o$,sa,rn,n$,rm,s$,l$,ut,an,i$,on,d$,am,c$,p$,m$,om,h$,f$,Se,nn,u$,sn,_$,nm,g$,v$,b$,nr,y$,sm,w$,E$,lm,$$,T$,k$,im,D$,P$,_t,ln,A$,we,O$,dm,C$,x$,cm,S$,N$,pm,I$,U$,mm,L$,F$,z$,la,R$,ia,dn,G$,cn,q$,hm,M$,j$,B$,da,pn,V$,fm,H$,W$,ca,mn,Y$,hn,Z$,um,K$,J$,Q$,gt,fn,X$,un,eT,_m,tT,rT,aT,gm,oT,nT,A,_n,sT,vm,lT,iT,bm,dT,cT,ym,pT,mT,sr,hT,wm,fT,uT,Em,_T,gT,vT,pa,bT,$m,Tm,yT,wT,Qe,Ee,ET,km,$T,TT,Dm,kT,DT,Pm,PT,AT,Am,OT,CT,xT,lr,ST,Om,NT,IT,Cm,UT,LT,FT,mi,xm,zT,RT,GT,vt,Sm,qT,MT,Nm,jT,BT,Im,VT,HT,WT,Um,YT,ZT,Lm,KT,JT,gn,QT,Fm,XT,e3,t3,Xe,r3,zm,a3,o3,Rm,n3,s3,Gm,l3,i3,d3,oe,c3,hi,p3,m3,qm,h3,f3,Mm,u3,_3,jm,g3,v3,Bm,b3,y3,w3,U,E3,Vm,$3,T3,Hm,k3,D3,Wm,P3,A3,Ym,O3,C3,vn,x3,S3,Zm,N3,I3,Km,U3,L3,Jm,F3,z3,Qm,R3,G3,Xm,q3,M3,j3,$e,B3,fi,V3,H3,eh,W3,Y3,ui,Z3,K3,th,J3,Q3,X3,rh,e4,t4,ma,bn,r4,ah,a4,o4,ha,yn,n4,wn,s4,oh,l4,i4,d4,bt,En,c4,$n,p4,nh,m4,h4,f4,Tn,u4,sh,_4,g4,v4,J,kn,b4,lh,y4,w4,Dn,E4,ih,$4,T4,k4,fa,D4,Pn,P4,dh,A4,O4,C4,ir,dr,x4,ch,S4,N4,ph,I4,U4,L4,cr,F4,mh,z4,R4,hh,G4,q4,M4,pr,j4,fh,B4,V4,uh,H4,W4,Y4,yt,An,Z4,mr,K4,_h,J4,Q4,gh,X4,e5,t5,vh,r5,a5,wt,On,o5,hr,n5,bh,s5,l5,yh,i5,d5,c5,wh,p5,m5,ua,Cn,h5,et,f5,Eh,u5,_5,$h,g5,v5,Th,b5,y5,w5,_a,xn,E5,Sn,$5,kh,T5,k5,D5,Ne,Nn,P5,In,A5,Dh,O5,C5,x5,Ph,S5,N5,Un,I5,_i,U5,L5,F5,Et,Ln,z5,Fn,R5,Ah,G5,q5,M5,Oh,j5,B5,$t,zn,V5,Ch,H5,W5,xh,Y5,Z5,ga,Rn,K5,Gn,J5,Sh,Q5,X5,e6,va,qn,t6,Nh,r6,a6,Tt,Mn,o6,Ih,n6,s6,Uh,l6,cv,fr,ba,Lh,jn,i6,Fh,d6,pv,tt,Bn,c6,Ie,Vn,p6,zh,m6,h6,Hn,f6,Rh,u6,_6,g6,Gh,v6,b6,Q,Wn,y6,qh,w6,E6,Yn,$6,Mh,T6,k6,D6,ya,P6,Zn,A6,jh,O6,C6,x6,ur,_r,S6,Bh,N6,I6,Vh,U6,L6,F6,gr,z6,Hh,R6,G6,Wh,q6,M6,j6,vr,B6,Yh,V6,H6,Zh,W6,Y6,mv,br,wa,Kh,Kn,Z6,Jh,K6,hv,q,Jn,J6,ie,Qn,Q6,Qh,X6,e8,yr,t8,Xh,r8,a8,ef,o8,n8,s8,wr,l8,tf,i8,d8,rf,c8,p8,m8,Xn,h8,af,f8,u8,_8,Ea,es,g8,of,v8,b8,kt,ts,y8,nf,w8,E8,Er,$8,sf,T8,k8,lf,D8,P8,A8,$a,rs,O8,as,C8,df,x8,S8,N8,Ta,os,I8,cf,U8,L8,ka,ns,F8,pf,z8,fv,$r,Da,mf,ss,R8,hf,G8,uv,Tr,ls,q8,ff,M8,_v,kr,Pa,uf,is,j8,_f,B8,gv,de,V8,gi,H8,W8,gf,Y8,Z8,vi,K8,J8,vf,Q8,X8,vv,Aa,e7,bi,t7,r7,bv,Oa,yi,bf,a7,o7,n7,wi,yf,s7,l7,yv,Ue,i7,wf,d7,c7,Ef,p7,m7,Ei,h7,f7,wv,Ca,xa,$f,u7,_7,Tf,g7,v7,b7,$i,kf,y7,w7,Ev,Dr,Sa,Df,ds,E7,Pf,$7,$v,Le,T7,Ti,k7,D7,Af,P7,A7,Of,O7,C7,Tv,Dt,x7,Cf,S7,N7,ki,I7,U7,kv,Na,Di,xf,L7,F7,z7,Pi,Sf,R7,G7,Dv,Fe,q7,Ai,M7,j7,Nf,B7,V7,If,H7,W7,Pv,X,Y7,Oi,Z7,K7,Uf,J7,Q7,Lf,X7,ek,Ff,tk,rk,Ci,ak,ok,Av,xi,nk,Ov,cs,Cv,Si,sk,xv,ps,Sv,Ni,lk,Nv,ms,Iv,Ii,ik,Uv,Ui,dk,Lv,hs,Fv,Ia,ck,zf,pk,mk,zv,Pr,Ua,Rf,fs,hk,Gf,fk,Rv,ce,uk,Li,_k,gk,qf,vk,bk,Mf,yk,wk,jf,Ek,$k,Gv,Pt,Tk,us,kk,Dk,Bf,Pk,Ak,qv,Ar,La,Vf,_s,Ok,Hf,Ck,Mv,Fi,xk,jv,Fa,Sk,gs,Wf,Nk,Ik,Bv,vs,Vv,At,Uk,bs,Yf,Lk,Fk,ys,Zf,zk,Rk,Hv,ws,Wv,Es,Yv,za,Gk,zi,qk,Mk,Zv,Ri,jk,Kv,Gi,Bk,Jv,qi,Kf,Jf,Vk,Qv,Ra,Hk,Qf,Wk,Yk,Xv,Mi,Zk,e1,$s,t1,Ot,Kk,Xf,Jk,Qk,eu,Xk,eD,r1,ji,tD,a1,Ts,o1,Ct,rD,tu,aD,oD,ru,nD,sD,n1,xt,lD,au,iD,dD,ks,ou,cD,pD,s1,Ds,l1,Bi,mD,i1,Ps,d1,Vi,hD,c1,As,p1,Hi,fD,m1,Wi,nu,su,uD,h1,Ga,_D,lu,gD,vD,f1,Yi,Os,bD,iu,yD,wD,u1,Cs,_1,xs,du,ED,g1,Ss,v1,St,$D,cu,TD,kD,pu,DD,PD,b1,Zi,AD,y1,Ns,w1,Ki,OD,E1,qa,CD,mu,xD,SD,$1,Or,Ma,hu,Is,ND,fu,ID,T1,ja,UD,Ji,LD,FD,k1,pe,zD,Us,RD,GD,Ls,qD,MD,Fs,jD,BD,zs,VD,HD,D1,Ba,WD,Qi,YD,ZD,P1,Xi,A1,Cr,Va,uu,Rs,KD,_u,JD,O1,ed,QD,C1,Nt,XD,Gs,e9,t9,qs,r9,a9,x1,td,o9,S1,Ms,N1,rd,n9,I1,It,s9,gu,l9,i9,vu,d9,c9,U1,xr,Ha,bu,js,p9,yu,m9,L1,ad,h9,F1,ze,f9,wu,u9,_9,Eu,g9,v9,$u,b9,y9,z1,Ut,w9,Tu,E9,$9,ku,T9,k9,R1,Bs,G1,Wa,D9,Vs,P9,A9,q1,Sr,Ya,Du,Hs,O9,Pu,C9,M1,od,x9,j1,Ws,B1,Lt,S9,Au,N9,I9,Ou,U9,L9,V1,nd,F9,H1,Ys,W1,sd,z9,Y1,Za,R9,Cu,G9,q9,Z1,rt,xu,M9,j9,Su,B9,V9,Nu,H9,W9,K1,ld,Y9,J1,Zs,Q1,id,Z9,X1,Re,K9,Iu,J9,Q9,Uu,X9,eP,Lu,tP,rP,eb,Nr,Ka,Fu,Ks,aP,zu,oP,tb,Ft,nP,Ru,sP,lP,Gu,iP,dP,rb,dd,cP,ab,cd,pP,ob,Ja,mP,qu,hP,fP,nb,Js,sb,j,uP,Mu,_P,gP,ju,vP,bP,Bu,yP,wP,Vu,EP,$P,Hu,TP,kP,Wu,DP,PP,lb,pd,AP,ib,Ir,Qa,Yu,Qs,OP,Zu,CP,db,Xa,cb,Ge,xP,Xs,SP,NP,md,IP,UP,el,LP,FP,pb,qe,Ku,zP,RP,Ju,GP,qP,Qu,MP,jP,Xu,BP,mb,hd,VP,hb,tl,e_,HP,WP,fb,fd,YP,ub,rl,_b,zt,ZP,t_,KP,JP,r_,QP,XP,gb,al,vb,Rt,eA,a_,tA,rA,ol,aA,oA,bb,eo,nA,ud,sA,lA,yb,_d,iA,wb,nl,o_,dA,cA,Eb,sl,$b,gd,pA,Tb,ll,kb,il,n_,mA,hA,Db,dl,Pb,vd,fA,Ab,cl,Ob,bd,uA,Cb,to,_A,pl,gA,vA,xb,ml,s_,bA,yA,Sb,Gt,wA,l_,EA,$A,i_,TA,kA,Nb,ro,DA,d_,PA,AA,Ib,hl,Ub,yd,OA,Lb,Me,c_,CA,xA,p_,SA,NA,fl,IA,m_,UA,LA,FA,ul,zA,h_,RA,GA,Fb,_l,at,qA,f_,MA,jA,u_,BA,VA,__,HA,WA,zb,ao,YA,g_,ZA,KA,Rb,gl,Gb,Ur,v_,JA,QA,b_,XA,eO,qb,qt,tO,y_,rO,aO,w_,oO,nO,Mb,wd,sO,jb,me,E_,lO,iO,$_,dO,cO,vl,pO,T_,mO,hO,fO,Lr,uO,k_,_O,gO,D_,vO,bO,yO,P_,wO,Bb,Ed,EO,Vb,oo,Fr,$O,A_,TO,kO,O_,DO,PO,AO,Te,OO,C_,CO,xO,x_,SO,NO,S_,IO,UO,N_,LO,FO,Hb,zr,no,I_,bl,zO,U_,RO,Wb,so,GO,yl,qO,MO,Yb,wl,L_,jO,BO,Zb,El,F_,VO,HO,Kb,ee,z_,$l,WO,R_,YO,ZO,KO,Tl,$d,G_,JO,QO,XO,Rr,kl,eC,q_,tC,rC,aC,Dl,oC,M_,nC,sC,lC,Pl,iC,j_,dC,cC,pC,B_,Gr,mC,V_,hC,fC,H_,uC,_C,gC,W_,ot,vC,Y_,bC,yC,Z_,wC,EC,K_,$C,TC,kC,J_,qr,DC,Q_,PC,AC,X_,OC,CC,xC,Al,eg,SC,NC,Ol,ke,IC,tg,UC,LC,rg,FC,zC,ag,RC,GC,og,qC,MC,jC,Cl,BC,ng,VC,HC,Jb,Td,sg,WC,Qb,lo,xl,YC,Sl,ZC,KC,JC,Mr,QC,Nl,XC,ex,lg,tx,rx,Xb,jr,io,ig,Il,ax,dg,ox,ey,je,nx,cg,sx,lx,Ul,ix,dx,Ll,cx,px,ty,co,ry,kd,pg,mx,ay,Mt,mg,hx,fx,hg,ux,_x,fg,gx,oy,Br,ug,vx,bx,Fl,yx,wx,ny,Vr,_g,Ex,$x,gg,Tx,kx,sy,zl,ly,Dd,vg,Dx,iy,po,Rl,Px,bg,Ax,Ox,Cx,De,xx,yg,Sx,Nx,wg,Ix,Ux,Eg,Lx,Fx,$g,zx,Rx,dy,jt,Gx,Tg,qx,Mx,Gl,jx,Bx,cy,Pd,Vx,py,w,Hx,Ad,Wx,kg,Yx,Od,Zx,Dg,Kx,Cd,Jx,Pg,Qx,xd,Xx,Ag,eS,Sd,tS,Og,rS,Nd,aS,Cg,oS,Id,nS,xg,sS,Ud,lS,Sg,iS,Ld,dS,Ng,cS,Fd,pS,Ig,mS,zd,hS,Ug,fS,Rd,uS,Lg,_S,Gd,gS,Fg,vS,qd,bS,zg,yS,Md,wS,Rg,ES,jd,$S,Gg,TS,Bd,kS,qg,DS,Vd,PS,Mg,AS,Hd,OS,jg,CS,Wd,xS,Bg,SS,Yd,NS,Vg,IS,Zd,US,Hg,LS,Kd,FS,Wg,zS,my;return P=new W({}),Jr=new rp({props:{warning:!0,$$slots:{default:[hM]},$$scope:{ctx:Y}}}),Lo=new S({props:{code:`from torch import nn
from transformers import Trainer


class CustomTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        # forward pass
        outputs = model(**inputs)
        logits = outputs.get("logits")
        # compute custom loss (suppose one has 3 labels with different weights)
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([1.0, 2.0, 3.0]))
        loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))
        return (loss, outputs) if return_outputs else loss`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer


<span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        <span class="hljs-comment"># forward pass</span>
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&quot;logits&quot;</span>)
        <span class="hljs-comment"># compute custom loss (suppose one has 3 labels with different weights)</span>
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]))
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels), labels.view(-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),Fo=new W({}),zo=new k({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> provided by the library. You can still use
your own models defined as <code>torch.nn.Module</code> as long as they work the same way as the &#x1F917; Transformers
models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of <a href="/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the
<code>output_dir</code> set to a directory named <em>tmp_trainer</em> in the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>. Will
default to <a href="/docs/transformers/main/en/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/main/en/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in a
distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that is a
<code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer will
manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that internally
sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.train">train()</a> will start
from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a <a href="/docs/transformers/main/en/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return
a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>) &#x2014; A tuple
containing the optimizer and the scheduler to use. Will default to an instance of <a href="/docs/transformers/main/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your model
and a scheduler given by <a href="/docs/transformers/main/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"},{anchor:"transformers.Trainer.preprocess_logits_for_metrics",description:`<strong>preprocess_logits_for_metrics</strong> (<code>Callable[[torch.Tensor, torch.Tensor], torch.Tensor]</code>, <em>optional</em>) &#x2014;
A function that preprocess the logits right before caching them at each evaluation step. Must take two
tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
by this function will be reflected in the predictions received by <code>compute_metrics</code>.</p>
<p>Note that the labels (second parameter) will be <code>None</code> if the dataset does not have them.`,name:"preprocess_logits_for_metrics"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L223"}}),Ro=new k({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will instantiate a member of that class.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L668"}}),qo=new k({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2438"}}),jo=new k({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2505"}}),Bo=new k({props:{name:"compute_loss_context_manager",anchor:"transformers.Trainer.compute_loss_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2421"}}),Vo=new k({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1030"}}),Wo=new k({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1014"}}),Yo=new k({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1138"}}),Zo=new k({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2734",returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Jo=new k({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2863"}}),Qo=new k({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L3218",returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),en=new k({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted
by the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L916"}}),rn=new k({props:{name:"get_optimizer_cls_and_kwargs",anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs",parameters:[{name:"args",val:": TrainingArguments"}],parametersDescription:[{anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs.args",description:`<strong>args</strong> (<code>transformers.training_args.TrainingArguments</code>) &#x2014;
The training arguments for the training session.`,name:"args"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1078"}}),an=new k({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L966"}}),nn=new k({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L837"}}),ln=new k({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code> or <code>default_hp_space_ray()</code> or
<code>default_hp_space_sigopt()</code> depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the <code>evaluate</code>
method. Will default to <code>default_compute_objective()</code>.`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction",description:`<strong>direction</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should pick
<code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or several metrics.`,name:"direction"},{anchor:"transformers.Trainer.hyperparameter_search.backend",description:`<strong>backend</strong> (<code>str</code> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.`,name:"backend"},{anchor:"transformers.Trainer.hyperparameter_search.hp_name",description:`<strong>hp_name</strong> (<code>Callable[[&quot;optuna.Trial&quot;], str]]</code>, <em>optional</em>) &#x2014;
A function that defines the trial/run name. Will default to None.`,name:"hp_name"},{anchor:"transformers.Trainer.hyperparameter_search.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For more
information see:</p>
<ul>
<li>the documentation of
<a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2275",returnDescription:`
<p>All the information about the best run.</p>
`,returnType:`
<p><code>trainer_utils.BestRun</code></p>
`}}),la=new rp({props:{warning:!0,$$slots:{default:[fM]},$$scope:{ctx:Y}}}),dn=new k({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[{name:"at_init",val:": bool = False"}],parametersDescription:[{anchor:"transformers.Trainer.init_git_repo.at_init",description:`<strong>at_init</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether this function is called before any training or not. If <code>self.args.overwrite_output_dir</code> is
<code>True</code> and <code>at_init</code> is <code>True</code>, the path to the repo (which is <code>self.args.output_dir</code>) might be wiped
out.`,name:"at_init"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L3236"}}),pn=new k({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2537"}}),mn=new k({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2544"}}),fn=new k({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2370"}}),_n=new k({props:{name:"log_metrics",anchor:"transformers.Trainer.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],parametersDescription:[{anchor:"transformers.Trainer.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.Trainer.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_pt_utils.py#L878"}}),pa=new mM({props:{anchor:"transformers.Trainer.log_metrics.example",$$slots:{default:[uM]},$$scope:{ctx:Y}}}),bn=new k({props:{name:"metrics_format",anchor:"transformers.Trainer.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],parametersDescription:[{anchor:"transformers.Trainer.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_pt_utils.py#L852",returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),yn=new k({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1155"}}),En=new k({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L679",returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),kn=new k({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2803"}}),fa=new rp({props:{$$slots:{default:[_M]},$$scope:{ctx:Y}}}),An=new k({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L3419"}}),On=new k({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L3121",returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),Cn=new k({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>.`,name:"blocking"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L3360",returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url of
the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),xn=new k({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L695"}}),Nn=new k({props:{name:"save_metrics",anchor:"transformers.Trainer.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],parametersDescription:[{anchor:"transformers.Trainer.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.Trainer.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.Trainer.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_pt_utils.py#L968"}}),Ln=new k({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"},{name:"_internal_call",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2556"}}),zn=new k({props:{name:"save_state",anchor:"transformers.Trainer.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_pt_utils.py#L1006"}}),Rn=new k({props:{name:"torchdynamo_smart_context_manager",anchor:"transformers.Trainer.torchdynamo_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2432"}}),qn=new k({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[bool, str, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a
<code>bool</code> and equals <code>True</code>, load the last checkpoint in <em>args.output_dir</em> as saved by a previous instance
of <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present, training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L1427"}}),Mn=new k({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer.py#L2457",returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),jn=new W({}),Bn=new k({props:{name:"class transformers.Seq2SeqTrainer",anchor:"transformers.Seq2SeqTrainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_seq2seq.py#L30"}}),Vn=new k({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns
not accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_seq2seq.py#L31",returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),Wn=new k({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"},{name:"**gen_kwargs",val:""}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is a <a href="https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset" rel="nofollow">Dataset</a>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.
gen_kwargs &#x2014;
Additional <code>generate</code> specific kwargs.`,name:"num_beams"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_seq2seq.py#L81"}}),ya=new rp({props:{$$slots:{default:[gM]},$$scope:{ctx:Y}}}),Kn=new W({}),Jn=new k({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"use_mps_device",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": typing.Optional[int] = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": typing.Optional[bool] = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": typing.Optional[str] = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": typing.Optional[int] = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"fsdp",val:": str = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": typing.Optional[str] = None"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": typing.Optional[str] = None"},{name:"hub_strategy",val:": typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save'"},{name:"hub_token",val:": typing.Optional[str] = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": typing.Optional[str] = None"},{name:"push_to_hub_organization",val:": typing.Optional[str] = None"},{name:"push_to_hub_token",val:": typing.Optional[str] = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": typing.Optional[str] = None"},{name:"ray_scope",val:": typing.Optional[str] = 'last'"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L110"}}),Qn=new k({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1548"}}),es=new k({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1634"}}),ts=new k({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0 of node
rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1579"}}),rs=new k({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1643"}}),os=new k({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1658"}}),ns=new k({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py#L1664"}}),ss=new W({}),ls=new k({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"eval_delay",val:": typing.Optional[float] = 0"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": bool = True"},{name:"save_strategy",val:": typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"use_mps_device",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"data_seed",val:": typing.Optional[int] = None"},{name:"jit_mode_eval",val:": bool = False"},{name:"use_ipex",val:": bool = False"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": typing.Optional[bool] = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": typing.Optional[str] = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": typing.Optional[int] = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"fsdp",val:": str = ''"},{name:"fsdp_min_num_params",val:": int = 0"},{name:"fsdp_transformer_layer_cls_to_wrap",val:": typing.Optional[str] = None"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": typing.Optional[str] = None"},{name:"hub_strategy",val:": typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save'"},{name:"hub_token",val:": typing.Optional[str] = None"},{name:"hub_private_repo",val:": bool = False"},{name:"gradient_checkpointing",val:": bool = False"},{name:"include_inputs_for_metrics",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": typing.Optional[str] = None"},{name:"push_to_hub_organization",val:": typing.Optional[str] = None"},{name:"push_to_hub_token",val:": typing.Optional[str] = None"},{name:"mp_parameters",val:": str = ''"},{name:"auto_find_batch_size",val:": bool = False"},{name:"full_determinism",val:": bool = False"},{name:"torchdynamo",val:": typing.Optional[str] = None"},{name:"ray_scope",val:": typing.Optional[str] = 'last'"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.sortish_sampler",description:`<strong>sortish_sampler</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use a <em>sortish sampler</em> or not. Only possible if the underlying datasets are <em>Seq2SeqDataset</em>
for now but will become generally available in the near future.</p>
<p>It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness
for the training set.`,name:"sortish_sampler"},{anchor:"transformers.Seq2SeqTrainingArguments.predict_with_generate",description:`<strong>predict_with_generate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use generate to calculate generative metrics (ROUGE, BLEU).`,name:"predict_with_generate"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_max_length",description:`<strong>generation_max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>max_length</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>max_length</code> value of the model configuration.`,name:"generation_max_length"},{anchor:"transformers.Seq2SeqTrainingArguments.generation_num_beams",description:`<strong>generation_num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The <code>num_beams</code> to use on each evaluation loop when <code>predict_with_generate=True</code>. Will default to the
<code>num_beams</code> value of the model configuration.`,name:"generation_num_beams"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/training_args_seq2seq.py#L28"}}),is=new W({}),ds=new W({}),cs=new S({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),ps=new S({props:{code:"my_app.py ... --log_level warning --log_level_replica error",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),ms=new S({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),hs=new S({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),fs=new W({}),_s=new W({}),vs=new S({props:{code:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ...",highlighted:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ..."}}),ws=new S({props:{code:"accelerate launch --num_processes 2 trainer-program.py ...",highlighted:"accelerate launch --num_processes 2 trainer-program.py ..."}}),Es=new S({props:{code:"deepspeed --num_gpus 2 trainer-program.py ...",highlighted:"deepspeed --num_gpus 2 trainer-program.py ..."}}),$s=new S({props:{code:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ..."}}),Ts=new S({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ..."}}),Ds=new S({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ..."}}),Ps=new S({props:{code:"CUDA_VISIBLE_DEVICES= python trainer-program.py ...",highlighted:"CUDA_VISIBLE_DEVICES= python trainer-program.py ..."}}),As=new S({props:{code:`export CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`,highlighted:`<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`}}),Cs=new S({props:{code:"export CUDA_DEVICE_ORDER=PCI_BUS_ID",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID'}}),Ss=new S({props:{code:"export CUDA_DEVICE_ORDER=FASTEST_FIRST",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=FASTEST_FIRST'}}),Ns=new S({props:{code:"export CUDA_VISIBLE_DEVICES=1,0",highlighted:'<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=1,0'}}),Is=new W({}),Rs=new W({}),Ms=new S({props:{code:`pip install fairscale
pip install deepspeed`,highlighted:`pip install fairscale
pip install deepspeed`}}),js=new W({}),Bs=new S({props:{code:"which nvcc",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),Hs=new W({}),Ws=new S({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),Ys=new S({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),Zs=new S({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),Ks=new W({}),Js=new S({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),Qs=new W({}),Xa=new rp({props:{warning:!0,$$slots:{default:[vM]},$$scope:{ctx:Y}}}),rl=new S({props:{code:"pip install fairscale",highlighted:"pip install fairscale"}}),al=new S({props:{code:"pip install transformers[fairscale]",highlighted:"pip install transformers[fairscale]"}}),sl=new S({props:{code:"pip install fairscale --no-build-isolation .",highlighted:"pip install fairscale --no-build-isolation ."}}),ll=new S({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),dl=new S({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),cl=new S({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),hl=new S({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),gl=new S({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),bl=new W({}),Il=new W({}),co=new rp({props:{warning:!1,$$slots:{default:[bM]},$$scope:{ctx:Y}}}),zl=new S({props:{code:`export TASK_NAME=mrpc

python examples/pytorch/text-classification/run_glue.py \\
  --model_name_or_path bert-base-cased \\
  --task_name $TASK_NAME \\
  --do_train \\
  --do_eval \\
  --max_seq_length 128 \\
  --per_device_train_batch_size 32 \\
  --learning_rate 2e-5 \\
  --num_train_epochs 3 \\
  --output_dir /tmp/$TASK_NAME/ \\
  --use_mps_device \\
  --overwrite_output_dir`,highlighted:`<span class="hljs-built_in">export</span> TASK_NAME=mrpc

python examples/pytorch/text-classification/run_glue.py \\
  --model_name_or_path bert-base-cased \\
  --task_name <span class="hljs-variable">$TASK_NAME</span> \\
  --do_train \\
  --do_eval \\
  --max_seq_length 128 \\
  --per_device_train_batch_size 32 \\
  --learning_rate 2e-5 \\
  --num_train_epochs 3 \\
  --output_dir /tmp/<span class="hljs-variable">$TASK_NAME</span>/ \\
  --use_mps_device \\
  --overwrite_output_dir`}}),{c(){E=n("meta"),O=i(),T=n("h1"),D=n("a"),z=n("span"),h(P.$$.fragment),C=i(),G=n("span"),ue=a("Trainer"),te=i(),M=n("p"),ne=a("The "),se=n("a"),re=a("Trainer"),le=a(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),B=n("a"),Ze=a("example scripts"),_e=a("."),F=i(),I=n("p"),nt=a("Before instantiating your "),ae=n("a"),st=a("Trainer"),lt=a(", create a "),ge=n("a"),xo=a("TrainingArguments"),So=a(" to access all the points of customization during training."),Ke=i(),Ae=n("p"),No=a("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ve=n("a"),Io=a("NVIDIA Apex"),Uo=a(" and Native AMP for PyTorch."),Z=i(),V=n("p"),Vl=a("The "),be=n("a"),Zr=a("Trainer"),Hl=a(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),rr=i(),N=n("ul"),H=n("li"),Kr=n("strong"),Wl=a("get_train_dataloader"),Yl=a(" \u2014 Creates the training DataLoader."),Zl=i(),Kl=n("li"),ap=n("strong"),iw=a("get_eval_dataloader"),dw=a(" \u2014 Creates the evaluation DataLoader."),cw=i(),Jl=n("li"),op=n("strong"),pw=a("get_test_dataloader"),mw=a(" \u2014 Creates the test DataLoader."),hw=i(),Ql=n("li"),np=n("strong"),fw=a("log"),uw=a(" \u2014 Logs information on the various objects watching training."),_w=i(),it=n("li"),sp=n("strong"),gw=a("create_optimizer_and_scheduler"),vw=a(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),lp=n("code"),bw=a("create_optimizer"),yw=a(" and "),ip=n("code"),ww=a("create_scheduler"),Ew=a(` methods
separately.`),$w=i(),Xl=n("li"),dp=n("strong"),Tw=a("create_optimizer"),kw=a(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),Dw=i(),ei=n("li"),cp=n("strong"),Pw=a("create_scheduler"),Aw=a(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),Ow=i(),ti=n("li"),pp=n("strong"),Cw=a("compute_loss"),xw=a(" - Computes the loss on a batch of training inputs."),Sw=i(),ri=n("li"),mp=n("strong"),Nw=a("training_step"),Iw=a(" \u2014 Performs a training step."),Uw=i(),ai=n("li"),hp=n("strong"),Lw=a("prediction_step"),Fw=a(" \u2014 Performs an evaluation/test step."),zw=i(),oi=n("li"),fp=n("strong"),Rw=a("evaluate"),Gw=a(" \u2014 Runs an evaluation loop and returns metrics."),qw=i(),ni=n("li"),up=n("strong"),Mw=a("predict"),jw=a(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),ov=i(),h(Jr.$$.fragment),nv=i(),Qr=n("p"),Bw=a("Here is an example of how to customize "),si=n("a"),Vw=a("Trainer"),Hw=a(" to use a weighted loss (useful when you have an unbalanced training set):"),sv=i(),h(Lo.$$.fragment),lv=i(),dt=n("p"),Ww=a("Another way to customize the training loop behavior for the PyTorch "),li=n("a"),Yw=a("Trainer"),Zw=a(" is to use "),ii=n("a"),Kw=a("callbacks"),Jw=a(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),iv=i(),ar=n("h2"),Xr=n("a"),_p=n("span"),h(Fo.$$.fragment),Qw=i(),gp=n("span"),Xw=a("Trainer"),dv=i(),b=n("div"),h(zo.$$.fragment),eE=i(),vp=n("p"),tE=a("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),rE=i(),bp=n("p"),aE=a("Important attributes:"),oE=i(),ye=n("ul"),ea=n("li"),yp=n("strong"),nE=a("model"),sE=a(" \u2014 Always points to the core model. If using a transformers model, it will be a "),di=n("a"),lE=a("PreTrainedModel"),iE=a(`
subclass.`),dE=i(),K=n("li"),wp=n("strong"),cE=a("model_wrapped"),pE=a(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Ep=n("code"),mE=a("DeepSpeed"),hE=a(`,
the inner model is wrapped in `),$p=n("code"),fE=a("DeepSpeed"),uE=a(" and then again in "),Tp=n("code"),_E=a("torch.nn.DistributedDataParallel"),gE=a(`. If the inner
model hasn\u2019t been wrapped, then `),kp=n("code"),vE=a("self.model_wrapped"),bE=a(" is the same as "),Dp=n("code"),yE=a("self.model"),wE=a("."),EE=i(),ci=n("li"),Pp=n("strong"),$E=a("is_model_parallel"),TE=a(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),kE=i(),Oe=n("li"),Ap=n("strong"),DE=a("place_model_on_device"),PE=a(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Op=n("code"),AE=a("False"),OE=a(` if model parallel or deepspeed is used, or if the default
`),Cp=n("code"),CE=a("TrainingArguments.place_model_on_device"),xE=a(" is overridden to return "),xp=n("code"),SE=a("False"),NE=a(" ."),IE=i(),Ce=n("li"),Sp=n("strong"),UE=a("is_in_train"),LE=a(" \u2014 Whether or not a model is currently running "),Np=n("code"),FE=a("train"),zE=a(" (e.g. when "),Ip=n("code"),RE=a("evaluate"),GE=a(` is called while
in `),Up=n("code"),qE=a("train"),ME=a(")"),jE=i(),ta=n("div"),h(Ro.$$.fragment),BE=i(),Go=n("p"),VE=a("Add a callback to the current list of "),Lp=n("code"),HE=a("TrainerCallback"),WE=a("."),YE=i(),ra=n("div"),h(qo.$$.fragment),ZE=i(),Mo=n("p"),KE=a("A helper wrapper that creates an appropriate context manager for "),Fp=n("code"),JE=a("autocast"),QE=a(` while feeding it the desired
arguments, depending on the situation.`),XE=i(),ct=n("div"),h(jo.$$.fragment),e0=i(),zp=n("p"),t0=a("How the loss is computed by Trainer. By default, all models return the loss in the first element."),r0=i(),Rp=n("p"),a0=a("Subclass and override for custom behavior."),o0=i(),aa=n("div"),h(Bo.$$.fragment),n0=i(),Gp=n("p"),s0=a("A helper wrapper to group together context managers."),l0=i(),pt=n("div"),h(Vo.$$.fragment),i0=i(),qp=n("p"),d0=a("Setup the optimizer."),c0=i(),Ho=n("p"),p0=a(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Mp=n("code"),m0=a("optimizers"),h0=a(", or subclass and override this method in a subclass."),f0=i(),mt=n("div"),h(Wo.$$.fragment),u0=i(),jp=n("p"),_0=a("Setup the optimizer and the learning rate scheduler."),g0=i(),Je=n("p"),v0=a(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Bp=n("code"),b0=a("optimizers"),y0=a(", or subclass and override this method (or "),Vp=n("code"),w0=a("create_optimizer"),E0=a(` and/or
`),Hp=n("code"),$0=a("create_scheduler"),T0=a(") in a subclass."),k0=i(),oa=n("div"),h(Yo.$$.fragment),D0=i(),Wp=n("p"),P0=a(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),A0=i(),xe=n("div"),h(Zo.$$.fragment),O0=i(),Yp=n("p"),C0=a("Run evaluation and returns metrics."),x0=i(),Ko=n("p"),S0=a(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Zp=n("code"),N0=a("compute_metrics"),I0=a(" argument)."),U0=i(),Kp=n("p"),L0=a("You can also subclass and override this method to inject custom behavior."),F0=i(),ht=n("div"),h(Jo.$$.fragment),z0=i(),or=n("p"),R0=a("Prediction/evaluation loop, shared by "),Jp=n("code"),G0=a("Trainer.evaluate()"),q0=a(" and "),Qp=n("code"),M0=a("Trainer.predict()"),j0=a("."),B0=i(),Xp=n("p"),V0=a("Works both with or without labels."),H0=i(),na=n("div"),h(Qo.$$.fragment),W0=i(),Xo=n("p"),Y0=a("For models that inherit from "),pi=n("a"),Z0=a("PreTrainedModel"),K0=a(`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),J0=i(),ft=n("div"),h(en.$$.fragment),Q0=i(),tn=n("p"),X0=a("Returns the evaluation "),em=n("code"),e$=a("DataLoader"),t$=a("."),r$=i(),tm=n("p"),a$=a("Subclass and override this method if you want to inject some custom behavior."),o$=i(),sa=n("div"),h(rn.$$.fragment),n$=i(),rm=n("p"),s$=a("Returns the optimizer class and optimizer parameters based on the training arguments."),l$=i(),ut=n("div"),h(an.$$.fragment),i$=i(),on=n("p"),d$=a("Returns the test "),am=n("code"),c$=a("DataLoader"),p$=a("."),m$=i(),om=n("p"),h$=a("Subclass and override this method if you want to inject some custom behavior."),f$=i(),Se=n("div"),h(nn.$$.fragment),u$=i(),sn=n("p"),_$=a("Returns the training "),nm=n("code"),g$=a("DataLoader"),v$=a("."),b$=i(),nr=n("p"),y$=a("Will use no sampler if "),sm=n("code"),w$=a("train_dataset"),E$=a(" does not implement "),lm=n("code"),$$=a("__len__"),T$=a(`, a random sampler (adapted to distributed
training if necessary) otherwise.`),k$=i(),im=n("p"),D$=a("Subclass and override this method if you want to inject some custom behavior."),P$=i(),_t=n("div"),h(ln.$$.fragment),A$=i(),we=n("p"),O$=a("Launch an hyperparameter search using "),dm=n("code"),C$=a("optuna"),x$=a(" or "),cm=n("code"),S$=a("Ray Tune"),N$=a(" or "),pm=n("code"),I$=a("SigOpt"),U$=a(`. The optimized quantity is determined
by `),mm=n("code"),L$=a("compute_objective"),F$=a(`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),z$=i(),h(la.$$.fragment),R$=i(),ia=n("div"),h(dn.$$.fragment),G$=i(),cn=n("p"),q$=a("Initializes a git repo in "),hm=n("code"),M$=a("self.args.hub_model_id"),j$=a("."),B$=i(),da=n("div"),h(pn.$$.fragment),V$=i(),fm=n("p"),H$=a(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),W$=i(),ca=n("div"),h(mn.$$.fragment),Y$=i(),hn=n("p"),Z$=a(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),um=n("code"),K$=a("True"),J$=a(" for one process)."),Q$=i(),gt=n("div"),h(fn.$$.fragment),X$=i(),un=n("p"),eT=a("Log "),_m=n("code"),tT=a("logs"),rT=a(" on the various objects watching training."),aT=i(),gm=n("p"),oT=a("Subclass and override this method to inject custom behavior."),nT=i(),A=n("div"),h(_n.$$.fragment),sT=i(),vm=n("p"),lT=a("Log metrics in a specially formatted way"),iT=i(),bm=n("p"),dT=a("Under distributed environment this is done only for a process with rank 0."),cT=i(),ym=n("p"),pT=a("Notes on memory reports:"),mT=i(),sr=n("p"),hT=a("In order to get memory usage report you need to install "),wm=n("code"),fT=a("psutil"),uT=a(". You can do that with "),Em=n("code"),_T=a("pip install psutil"),gT=a("."),vT=i(),h(pa.$$.fragment),bT=i(),$m=n("p"),Tm=n("strong"),yT=a("Understanding the reports:"),wT=i(),Qe=n("ul"),Ee=n("li"),ET=a("the first segment, e.g., "),km=n("code"),$T=a("train__"),TT=a(", tells you which stage the metrics are for. Reports starting with "),Dm=n("code"),kT=a("init_"),DT=a(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Pm=n("code"),PT=a("__init__"),AT=a(" will be reported along with the "),Am=n("code"),OT=a("eval_"),CT=a(" metrics."),xT=i(),lr=n("li"),ST=a("the third segment, is either "),Om=n("code"),NT=a("cpu"),IT=a(" or "),Cm=n("code"),UT=a("gpu"),LT=a(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),FT=i(),mi=n("li"),xm=n("code"),zT=a("*_alloc_delta"),RT=a(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),GT=i(),vt=n("li"),Sm=n("code"),qT=a("*_peaked_delta"),MT=a(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Nm=n("code"),jT=a("alloc_delta"),BT=a(` +
`),Im=n("code"),VT=a("peaked_delta"),HT=a(" and you know how much memory was needed to complete that stage."),WT=i(),Um=n("p"),YT=a(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),ZT=i(),Lm=n("p"),KT=a(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),JT=i(),gn=n("p"),QT=a(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Fm=n("code"),XT=a("tracemalloc"),e3=a(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),t3=i(),Xe=n("p"),r3=a("The GPU allocated and peak memory reporting is done with "),zm=n("code"),a3=a("torch.cuda.memory_allocated()"),o3=a(` and
`),Rm=n("code"),n3=a("torch.cuda.max_memory_allocated()"),s3=a(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Gm=n("code"),l3=a("torch.cuda"),i3=a(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),d3=i(),oe=n("p"),c3=a("Note that this tracker doesn\u2019t account for memory allocations outside of "),hi=n("a"),p3=a("Trainer"),m3=a("\u2019s "),qm=n("code"),h3=a("__init__"),f3=a(", "),Mm=n("code"),u3=a("train"),_3=a(`,
`),jm=n("code"),g3=a("evaluate"),v3=a(" and "),Bm=n("code"),b3=a("predict"),y3=a(" calls."),w3=i(),U=n("p"),E3=a("Because "),Vm=n("code"),$3=a("evaluation"),T3=a(" calls may happen during "),Hm=n("code"),k3=a("train"),D3=a(`, we can\u2019t handle nested invocations because
`),Wm=n("code"),P3=a("torch.cuda.max_memory_allocated"),A3=a(" is a single counter, so if it gets reset by a nested eval call, "),Ym=n("code"),O3=a("train"),C3=a(`\u2019s tracker
will report incorrect info. If this `),vn=n("a"),x3=a("pytorch issue"),S3=a(` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Zm=n("code"),N3=a("train"),I3=a(", "),Km=n("code"),U3=a("evaluate"),L3=a(" and "),Jm=n("code"),F3=a("predict"),z3=a(" methods. Which means that if "),Qm=n("code"),R3=a("eval"),G3=a(" is called during "),Xm=n("code"),q3=a("train"),M3=a(`, it\u2019s the latter
that will account for its memory usage and that of the former.`),j3=i(),$e=n("p"),B3=a("This also means that if any other tool that is used along the "),fi=n("a"),V3=a("Trainer"),H3=a(` calls
`),eh=n("code"),W3=a("torch.cuda.reset_peak_memory_stats"),Y3=a(", the gpu peak memory stats could be invalid. And the "),ui=n("a"),Z3=a("Trainer"),K3=a(` will disrupt
the normal behavior of any such tools that rely on calling `),th=n("code"),J3=a("torch.cuda.reset_peak_memory_stats"),Q3=a(" themselves."),X3=i(),rh=n("p"),e4=a("For best performance you may want to consider turning the memory profiling off for production runs."),t4=i(),ma=n("div"),h(bn.$$.fragment),r4=i(),ah=n("p"),a4=a("Reformat Trainer metrics values to a human-readable format"),o4=i(),ha=n("div"),h(yn.$$.fragment),n4=i(),wn=n("p"),s4=a("Helper to get number of samples in a "),oh=n("code"),l4=a("DataLoader"),i4=a(` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),d4=i(),bt=n("div"),h(En.$$.fragment),c4=i(),$n=n("p"),p4=a("Remove a callback from the current list of "),nh=n("code"),m4=a("TrainerCallback"),h4=a(" and returns it."),f4=i(),Tn=n("p"),u4=a("If the callback is not found, returns "),sh=n("code"),_4=a("None"),g4=a(" (and no error is raised)."),v4=i(),J=n("div"),h(kn.$$.fragment),b4=i(),lh=n("p"),y4=a("Run prediction and returns predictions and potential metrics."),w4=i(),Dn=n("p"),E4=a(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),ih=n("code"),$4=a("evaluate()"),T4=a("."),k4=i(),h(fa.$$.fragment),D4=i(),Pn=n("p"),P4=a("Returns: "),dh=n("em"),A4=a("NamedTuple"),O4=a(" A namedtuple with the following keys:"),C4=i(),ir=n("ul"),dr=n("li"),x4=a("predictions ("),ch=n("code"),S4=a("np.ndarray"),N4=a("): The predictions on "),ph=n("code"),I4=a("test_dataset"),U4=a("."),L4=i(),cr=n("li"),F4=a("label_ids ("),mh=n("code"),z4=a("np.ndarray"),R4=a(", "),hh=n("em"),G4=a("optional"),q4=a("): The labels (if the dataset contained some)."),M4=i(),pr=n("li"),j4=a("metrics ("),fh=n("code"),B4=a("Dict[str, float]"),V4=a(", "),uh=n("em"),H4=a("optional"),W4=a(`): The potential dictionary of metrics (if the dataset contained
labels).`),Y4=i(),yt=n("div"),h(An.$$.fragment),Z4=i(),mr=n("p"),K4=a("Prediction/evaluation loop, shared by "),_h=n("code"),J4=a("Trainer.evaluate()"),Q4=a(" and "),gh=n("code"),X4=a("Trainer.predict()"),e5=a("."),t5=i(),vh=n("p"),r5=a("Works both with or without labels."),a5=i(),wt=n("div"),h(On.$$.fragment),o5=i(),hr=n("p"),n5=a("Perform an evaluation step on "),bh=n("code"),s5=a("model"),l5=a(" using "),yh=n("code"),i5=a("inputs"),d5=a("."),c5=i(),wh=n("p"),p5=a("Subclass and override to inject custom behavior."),m5=i(),ua=n("div"),h(Cn.$$.fragment),h5=i(),et=n("p"),f5=a("Upload "),Eh=n("em"),u5=a("self.model"),_5=a(" and "),$h=n("em"),g5=a("self.tokenizer"),v5=a(" to the \u{1F917} model hub on the repo "),Th=n("em"),b5=a("self.args.hub_model_id"),y5=a("."),w5=i(),_a=n("div"),h(xn.$$.fragment),E5=i(),Sn=n("p"),$5=a("Remove a callback from the current list of "),kh=n("code"),T5=a("TrainerCallback"),k5=a("."),D5=i(),Ne=n("div"),h(Nn.$$.fragment),P5=i(),In=n("p"),A5=a("Save metrics into a json file for that split, e.g. "),Dh=n("code"),O5=a("train_results.json"),C5=a("."),x5=i(),Ph=n("p"),S5=a("Under distributed environment this is done only for a process with rank 0."),N5=i(),Un=n("p"),I5=a("To understand the metrics please read the docstring of "),_i=n("a"),U5=a("log_metrics()"),L5=a(`. The only difference is that raw
unformatted numbers are saved in the current method.`),F5=i(),Et=n("div"),h(Ln.$$.fragment),z5=i(),Fn=n("p"),R5=a("Will save the model, so you can reload it using "),Ah=n("code"),G5=a("from_pretrained()"),q5=a("."),M5=i(),Oh=n("p"),j5=a("Will only save from the main process."),B5=i(),$t=n("div"),h(zn.$$.fragment),V5=i(),Ch=n("p"),H5=a("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),W5=i(),xh=n("p"),Y5=a("Under distributed environment this is done only for a process with rank 0."),Z5=i(),ga=n("div"),h(Rn.$$.fragment),K5=i(),Gn=n("p"),J5=a("A helper wrapper that creates an appropriate context manager for "),Sh=n("code"),Q5=a("torchdynamo"),X5=a("."),e6=i(),va=n("div"),h(qn.$$.fragment),t6=i(),Nh=n("p"),r6=a("Main training entry point."),a6=i(),Tt=n("div"),h(Mn.$$.fragment),o6=i(),Ih=n("p"),n6=a("Perform a training step on a batch of inputs."),s6=i(),Uh=n("p"),l6=a("Subclass and override to inject custom behavior."),cv=i(),fr=n("h2"),ba=n("a"),Lh=n("span"),h(jn.$$.fragment),i6=i(),Fh=n("span"),d6=a("Seq2SeqTrainer"),pv=i(),tt=n("div"),h(Bn.$$.fragment),c6=i(),Ie=n("div"),h(Vn.$$.fragment),p6=i(),zh=n("p"),m6=a("Run evaluation and returns metrics."),h6=i(),Hn=n("p"),f6=a(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Rh=n("code"),u6=a("compute_metrics"),_6=a(" argument)."),g6=i(),Gh=n("p"),v6=a("You can also subclass and override this method to inject custom behavior."),b6=i(),Q=n("div"),h(Wn.$$.fragment),y6=i(),qh=n("p"),w6=a("Run prediction and returns predictions and potential metrics."),E6=i(),Yn=n("p"),$6=a(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Mh=n("code"),T6=a("evaluate()"),k6=a("."),D6=i(),h(ya.$$.fragment),P6=i(),Zn=n("p"),A6=a("Returns: "),jh=n("em"),O6=a("NamedTuple"),C6=a(" A namedtuple with the following keys:"),x6=i(),ur=n("ul"),_r=n("li"),S6=a("predictions ("),Bh=n("code"),N6=a("np.ndarray"),I6=a("): The predictions on "),Vh=n("code"),U6=a("test_dataset"),L6=a("."),F6=i(),gr=n("li"),z6=a("label_ids ("),Hh=n("code"),R6=a("np.ndarray"),G6=a(", "),Wh=n("em"),q6=a("optional"),M6=a("): The labels (if the dataset contained some)."),j6=i(),vr=n("li"),B6=a("metrics ("),Yh=n("code"),V6=a("Dict[str, float]"),H6=a(", "),Zh=n("em"),W6=a("optional"),Y6=a(`): The potential dictionary of metrics (if the dataset contained
labels).`),mv=i(),br=n("h2"),wa=n("a"),Kh=n("span"),h(Kn.$$.fragment),Z6=i(),Jh=n("span"),K6=a("TrainingArguments"),hv=i(),q=n("div"),h(Jn.$$.fragment),J6=i(),ie=n("div"),h(Qn.$$.fragment),Q6=i(),Qh=n("p"),X6=a(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),e8=i(),yr=n("p"),t8=a("For the main process the log level defaults to "),Xh=n("code"),r8=a("logging.INFO"),a8=a(" unless overridden by "),ef=n("code"),o8=a("log_level"),n8=a(" argument."),s8=i(),wr=n("p"),l8=a("For the replica processes the log level defaults to "),tf=n("code"),i8=a("logging.WARNING"),d8=a(" unless overridden by "),rf=n("code"),c8=a("log_level_replica"),p8=a(`
argument.`),m8=i(),Xn=n("p"),h8=a("The choice between the main and replica process settings is made according to the return value of "),af=n("code"),f8=a("should_log"),u8=a("."),_8=i(),Ea=n("div"),h(es.$$.fragment),g8=i(),of=n("p"),v8=a("Get number of steps used for a linear warmup."),b8=i(),kt=n("div"),h(ts.$$.fragment),y8=i(),nf=n("p"),w8=a(`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),E8=i(),Er=n("p"),$8=a("One such use is for "),sf=n("code"),T8=a("datasets"),k8=a("\u2019s "),lf=n("code"),D8=a("map"),P8=a(` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),A8=i(),$a=n("div"),h(rs.$$.fragment),O8=i(),as=n("p"),C8=a("Serializes this instance while replace "),df=n("code"),x8=a("Enum"),S8=a(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),N8=i(),Ta=n("div"),h(os.$$.fragment),I8=i(),cf=n("p"),U8=a("Serializes this instance to a JSON string."),L8=i(),ka=n("div"),h(ns.$$.fragment),F8=i(),pf=n("p"),z8=a("Sanitized serialization to use with TensorBoard\u2019s hparams"),fv=i(),$r=n("h2"),Da=n("a"),mf=n("span"),h(ss.$$.fragment),R8=i(),hf=n("span"),G8=a("Seq2SeqTrainingArguments"),uv=i(),Tr=n("div"),h(ls.$$.fragment),q8=i(),ff=n("p"),M8=a("TrainingArguments(output_dir: str, overwrite_output_dir: bool = False, do_train: bool = False, do_eval: bool = False, do_predict: bool = False, evaluation_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018no\u2019, prediction_loss_only: bool = False, per_device_train_batch_size: int = 8, per_device_eval_batch_size: int = 8, per_gpu_train_batch_size: Union[int, NoneType] = None, per_gpu_eval_batch_size: Union[int, NoneType] = None, gradient_accumulation_steps: int = 1, eval_accumulation_steps: Union[int, NoneType] = None, eval_delay: Union[float, NoneType] = 0, learning_rate: float = 5e-05, weight_decay: float = 0.0, adam_beta1: float = 0.9, adam_beta2: float = 0.999, adam_epsilon: float = 1e-08, max_grad_norm: float = 1.0, num_train_epochs: float = 3.0, max_steps: int = -1, lr_scheduler_type: Union[transformers.trainer_utils.SchedulerType, str] = \u2018linear\u2019, warmup_ratio: float = 0.0, warmup_steps: int = 0, log_level: Union[str, NoneType] = \u2018passive\u2019, log_level_replica: Union[str, NoneType] = \u2018passive\u2019, log_on_each_node: bool = True, logging_dir: Union[str, NoneType] = None, logging_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, logging_first_step: bool = False, logging_steps: int = 500, logging_nan_inf_filter: bool = True, save_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, save_steps: int = 500, save_total_limit: Union[int, NoneType] = None, save_on_each_node: bool = False, no_cuda: bool = False, use_mps_device: bool = False, seed: int = 42, data_seed: Union[int, NoneType] = None, jit_mode_eval: bool = False, use_ipex: bool = False, bf16: bool = False, fp16: bool = False, fp16_opt_level: str = \u2018O1\u2019, half_precision_backend: str = \u2018auto\u2019, bf16_full_eval: bool = False, fp16_full_eval: bool = False, tf32: Union[bool, NoneType] = None, local_rank: int = -1, xpu_backend: Union[str, NoneType] = None, tpu_num_cores: Union[int, NoneType] = None, tpu_metrics_debug: bool = False, debug: str = \u201D, dataloader_drop_last: bool = False, eval_steps: Union[int, NoneType] = None, dataloader_num_workers: int = 0, past_index: int = -1, run_name: Union[str, NoneType] = None, disable_tqdm: Union[bool, NoneType] = None, remove_unused_columns: Union[bool, NoneType] = True, label_names: Union[List[str], NoneType] = None, load_best_model_at_end: Union[bool, NoneType] = False, metric_for_best_model: Union[str, NoneType] = None, greater_is_better: Union[bool, NoneType] = None, ignore_data_skip: bool = False, sharded_ddp: str = \u201D, fsdp: str = \u201D, fsdp_min_num_params: int = 0, fsdp_transformer_layer_cls_to_wrap: Union[str, NoneType] = None, deepspeed: Union[str, NoneType] = None, label_smoothing_factor: float = 0.0, optim: Union[transformers.training_args.OptimizerNames, str] = \u2018adamw_hf\u2019, adafactor: bool = False, group_by_length: bool = False, length_column_name: Union[str, NoneType] = \u2018length\u2019, report_to: Union[List[str], NoneType] = None, ddp_find_unused_parameters: Union[bool, NoneType] = None, ddp_bucket_cap_mb: Union[int, NoneType] = None, dataloader_pin_memory: bool = True, skip_memory_metrics: bool = True, use_legacy_prediction_loop: bool = False, push_to_hub: bool = False, resume_from_checkpoint: Union[str, NoneType] = None, hub_model_id: Union[str, NoneType] = None, hub_strategy: Union[transformers.trainer_utils.HubStrategy, str] = \u2018every_save\u2019, hub_token: Union[str, NoneType] = None, hub_private_repo: bool = False, gradient_checkpointing: bool = False, include_inputs_for_metrics: bool = False, fp16_backend: str = \u2018auto\u2019, push_to_hub_model_id: Union[str, NoneType] = None, push_to_hub_organization: Union[str, NoneType] = None, push_to_hub_token: Union[str, NoneType] = None, mp_parameters: str = \u201D, auto_find_batch_size: bool = False, full_determinism: bool = False, torchdynamo: Union[str, NoneType] = None, ray_scope: Union[str, NoneType] = \u2018last\u2019)"),_v=i(),kr=n("h2"),Pa=n("a"),uf=n("span"),h(is.$$.fragment),j8=i(),_f=n("span"),B8=a("Checkpoints"),gv=i(),de=n("p"),V8=a("By default, "),gi=n("a"),H8=a("Trainer"),W8=a(" will save all checkpoints in the "),gf=n("code"),Y8=a("output_dir"),Z8=a(` you set in the
`),vi=n("a"),K8=a("TrainingArguments"),J8=a(" you are using. Those will go in subfolder named "),vf=n("code"),Q8=a("checkpoint-xxx"),X8=a(` with xxx
being the step at which the training was at.`),vv=i(),Aa=n("p"),e7=a("Resuming training from a checkpoint can be done when calling "),bi=n("a"),t7=a("Trainer.train()"),r7=a(" with either:"),bv=i(),Oa=n("ul"),yi=n("li"),bf=n("code"),a7=a("resume_from_checkpoint=True"),o7=a(" which will resume training from the latest checkpoint"),n7=i(),wi=n("li"),yf=n("code"),s7=a("resume_from_checkpoint=checkpoint_dir"),l7=a(` which will resume training from the specific checkpoint in the directory
passed.`),yv=i(),Ue=n("p"),i7=a("In addition, you can easily save your checkpoints on the Model Hub when using "),wf=n("code"),d7=a("push_to_hub=True"),c7=a(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Ef=n("code"),p7=a("hub-strategy"),m7=a(" value of your "),Ei=n("a"),h7=a("TrainingArguments"),f7=a(" to either:"),wv=i(),Ca=n("ul"),xa=n("li"),$f=n("code"),u7=a('"checkpoint"'),_7=a(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Tf=n("code"),g7=a('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),v7=a("."),b7=i(),$i=n("li"),kf=n("code"),y7=a('"all_checkpoints"'),w7=a(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),Ev=i(),Dr=n("h2"),Sa=n("a"),Df=n("span"),h(ds.$$.fragment),E7=i(),Pf=n("span"),$7=a("Logging"),$v=i(),Le=n("p"),T7=a("By default "),Ti=n("a"),k7=a("Trainer"),D7=a(" will use "),Af=n("code"),P7=a("logging.INFO"),A7=a(" for the main process and "),Of=n("code"),O7=a("logging.WARNING"),C7=a(" for the replicas if any."),Tv=i(),Dt=n("p"),x7=a("These defaults can be overridden to use any of the 5 "),Cf=n("code"),S7=a("logging"),N7=a(" levels with "),ki=n("a"),I7=a("TrainingArguments"),U7=a(`\u2019s
arguments:`),kv=i(),Na=n("ul"),Di=n("li"),xf=n("code"),L7=a("log_level"),F7=a(" - for the main process"),z7=i(),Pi=n("li"),Sf=n("code"),R7=a("log_level_replica"),G7=a(" - for the replicas"),Dv=i(),Fe=n("p"),q7=a("Further, if "),Ai=n("a"),M7=a("TrainingArguments"),j7=a("\u2019s "),Nf=n("code"),B7=a("log_on_each_node"),V7=a(" is set to "),If=n("code"),H7=a("False"),W7=a(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Pv=i(),X=n("p"),Y7=a("Note that "),Oi=n("a"),Z7=a("Trainer"),K7=a(" is going to set "),Uf=n("code"),J7=a("transformers"),Q7=a(`\u2019s log level separately for each node in its
`),Lf=n("code"),X7=a("Trainer.__init__()"),ek=a(`. So you may want to set this sooner (see the next example) if you tap into other
`),Ff=n("code"),tk=a("transformers"),rk=a(" functionality before creating the "),Ci=n("a"),ak=a("Trainer"),ok=a(" object."),Av=i(),xi=n("p"),nk=a("Here is an example of how this can be used in an application:"),Ov=i(),h(cs.$$.fragment),Cv=i(),Si=n("p"),sk=a(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),xv=i(),h(ps.$$.fragment),Sv=i(),Ni=n("p"),lk=a(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),Nv=i(),h(ms.$$.fragment),Iv=i(),Ii=n("p"),ik=a(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),Uv=i(),Ui=n("p"),dk=a("If you need your application to be as quiet as possible you could do:"),Lv=i(),h(hs.$$.fragment),Fv=i(),Ia=n("p"),ck=a("(add "),zf=n("code"),pk=a("--log_on_each_node 0"),mk=a(" if on multi-node environment)"),zv=i(),Pr=n("h2"),Ua=n("a"),Rf=n("span"),h(fs.$$.fragment),hk=i(),Gf=n("span"),fk=a("Randomness"),Rv=i(),ce=n("p"),uk=a("When resuming from a checkpoint generated by "),Li=n("a"),_k=a("Trainer"),gk=a(` all efforts are made to restore the
`),qf=n("em"),vk=a("python"),bk=a(", "),Mf=n("em"),yk=a("numpy"),wk=a(" and "),jf=n("em"),Ek=a("pytorch"),$k=a(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Gv=i(),Pt=n("p"),Tk=a(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),us=n("a"),kk=a("Controlling sources of randomness"),Dk=a(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),Bf=n("code"),Pk=a("torch.backends.cudnn.deterministic"),Ak=a(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),qv=i(),Ar=n("h2"),La=n("a"),Vf=n("span"),h(_s.$$.fragment),Ok=i(),Hf=n("span"),Ck=a("Specific GPUs Selection"),Mv=i(),Fi=n("p"),xk=a("Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),jv=i(),Fa=n("p"),Sk=a("When using "),gs=n("a"),Wf=n("code"),Nk=a("DistributedDataParallel"),Ik=a(" to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),Bv=i(),h(vs.$$.fragment),Vv=i(),At=n("p"),Uk=a("if you have either "),bs=n("a"),Yf=n("code"),Lk=a("accelerate"),Fk=a(" or "),ys=n("a"),Zf=n("code"),zk=a("deepspeed"),Rk=a(" installed you can also accomplish the same by using one of:"),Hv=i(),h(ws.$$.fragment),Wv=i(),h(Es.$$.fragment),Yv=i(),za=n("p"),Gk=a("You don\u2019t need to use the Accelerate or "),zi=n("a"),qk=a("the Deepspeed integration"),Mk=a(" features to use these launchers."),Zv=i(),Ri=n("p"),jk=a("Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),Kv=i(),Gi=n("p"),Bk=a("The following environment variables help you control which GPUs to use and their order."),Jv=i(),qi=n("p"),Kf=n("strong"),Jf=n("code"),Vk=a("CUDA_VISIBLE_DEVICES"),Qv=i(),Ra=n("p"),Hk=a("If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Qf=n("code"),Wk=a("CUDA_VISIBLE_DEVICES"),Yk=a(" to a list of the GPUs to be used."),Xv=i(),Mi=n("p"),Zk=a("For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),e1=i(),h($s.$$.fragment),t1=i(),Ot=n("p"),Kk=a("So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Xf=n("code"),Jk=a("cuda:0"),Qk=a(" and "),eu=n("code"),Xk=a("cuda:1"),eD=a(" correspondingly."),r1=i(),ji=n("p"),tD=a("You can even change their order:"),a1=i(),h(Ts.$$.fragment),o1=i(),Ct=n("p"),rD=a("Here your physical GPUs 0 and 2 are mapped to "),tu=n("code"),aD=a("cuda:1"),oD=a(" and "),ru=n("code"),nD=a("cuda:0"),sD=a(" correspondingly."),n1=i(),xt=n("p"),lD=a("The above examples were all for "),au=n("code"),iD=a("DistributedDataParallel"),dD=a(" use pattern, but the same method works for "),ks=n("a"),ou=n("code"),cD=a("DataParallel"),pD=a(" as well:"),s1=i(),h(Ds.$$.fragment),l1=i(),Bi=n("p"),mD=a("To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),i1=i(),h(Ps.$$.fragment),d1=i(),Vi=n("p"),hD=a("As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),c1=i(),h(As.$$.fragment),p1=i(),Hi=n("p"),fD=a("but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),m1=i(),Wi=n("p"),nu=n("strong"),su=n("code"),uD=a("CUDA_DEVICE_ORDER"),h1=i(),Ga=n("p"),_D=a("There is an additional environment variable "),lu=n("code"),gD=a("CUDA_DEVICE_ORDER"),vD=a(" that controls how the physical devices are ordered. The two choices are:"),f1=i(),Yi=n("ol"),Os=n("li"),bD=a("ordered by PCIe bus IDs (matches "),iu=n("code"),yD=a("nvidia-smi"),wD=a("\u2019s order) - this is the default."),u1=i(),h(Cs.$$.fragment),_1=i(),xs=n("ol"),du=n("li"),ED=a("ordered by GPU compute capabilities"),g1=i(),h(Ss.$$.fragment),v1=i(),St=n("p"),$D=a("Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),cu=n("code"),TD=a("CUDA_DEVICE_ORDER=FASTEST_FIRST"),kD=a(" will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),pu=n("code"),DD=a("nvidia-smi"),PD=a(" will still report them in the PCIe order."),b1=i(),Zi=n("p"),AD=a("The other solution to swapping the order is to use:"),y1=i(),h(Ns.$$.fragment),w1=i(),Ki=n("p"),OD=a("In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),E1=i(),qa=n("p"),CD=a("Also if you do set this environment variable it\u2019s the best to set it in your "),mu=n("code"),xD=a("~/.bashrc"),SD=a(" file or some other startup config file and forget about it."),$1=i(),Or=n("h2"),Ma=n("a"),hu=n("span"),h(Is.$$.fragment),ND=i(),fu=n("span"),ID=a("Trainer Integrations"),T1=i(),ja=n("p"),UD=a("The "),Ji=n("a"),LD=a("Trainer"),FD=a(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),k1=i(),pe=n("p"),zD=a("Currently it supports third party solutions, "),Us=n("a"),RD=a("DeepSpeed"),GD=a(", "),Ls=n("a"),qD=a("PyTorch FSDP"),MD=a(" and "),Fs=n("a"),jD=a("FairScale"),BD=a(", which implement parts of the paper "),zs=n("a"),VD=a(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),HD=a("."),D1=i(),Ba=n("p"),WD=a("This provided support is new and experimental as of this writing. While the support for DeepSpeed and PyTorch FSDP is active and we welcome issues around it, we don\u2019t support the FairScale integration anymore since it has been integrated in PyTorch main (see the "),Qi=n("a"),YD=a("PyTorch FSDP integration"),ZD=a(")"),P1=i(),Xi=n("a"),A1=i(),Cr=n("h3"),Va=n("a"),uu=n("span"),h(Rs.$$.fragment),KD=i(),_u=n("span"),JD=a("CUDA Extension Installation Notes"),O1=i(),ed=n("p"),QD=a("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),C1=i(),Nt=n("p"),XD=a("While all installation issues should be dealt with through the corresponding GitHub Issues of "),Gs=n("a"),e9=a("FairScale"),t9=a(" and "),qs=n("a"),r9=a("Deepspeed"),a9=a(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),x1=i(),td=n("p"),o9=a("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),S1=i(),h(Ms.$$.fragment),N1=i(),rd=n("p"),n9=a("please, read the following notes first."),I1=i(),It=n("p"),s9=a("In these notes we give examples for what to do when "),gu=n("code"),l9=a("pytorch"),i9=a(" has been built with CUDA "),vu=n("code"),d9=a("10.2"),c9=a(`. If your situation is
different remember to adjust the version number to the one you are after.`),U1=i(),xr=n("h4"),Ha=n("a"),bu=n("span"),h(js.$$.fragment),p9=i(),yu=n("span"),m9=a("Possible problem #1"),L1=i(),ad=n("p"),h9=a(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),F1=i(),ze=n("p"),f9=a("For example, if you installed "),wu=n("code"),u9=a("pytorch"),_9=a(" with "),Eu=n("code"),g9=a("cudatoolkit==10.2"),v9=a(` in the Python environment, you also need to have
CUDA `),$u=n("code"),b9=a("10.2"),y9=a(" installed system-wide."),z1=i(),Ut=n("p"),w9=a("The exact location may vary from system to system, but "),Tu=n("code"),E9=a("/usr/local/cuda-10.2"),$9=a(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),ku=n("code"),T9=a("PATH"),k9=a(` environment variable, one can find the
installation location by doing:`),R1=i(),h(Bs.$$.fragment),G1=i(),Wa=n("p"),D9=a(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),Vs=n("a"),P9=a("ubuntu cuda 10.2 install"),A9=a("."),q1=i(),Sr=n("h4"),Ya=n("a"),Du=n("span"),h(Hs.$$.fragment),O9=i(),Pu=n("span"),C9=a("Possible problem #2"),M1=i(),od=n("p"),x9=a(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),j1=i(),h(Ws.$$.fragment),B1=i(),Lt=n("p"),S9=a("Now, in this situation you need to make sure that your "),Au=n("code"),N9=a("PATH"),I9=a(" and "),Ou=n("code"),U9=a("LD_LIBRARY_PATH"),L9=a(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),V1=i(),nd=n("p"),F9=a("First, you may look at their contents:"),H1=i(),h(Ys.$$.fragment),W1=i(),sd=n("p"),z9=a("so you get an idea of what is inside."),Y1=i(),Za=n("p"),R9=a("It\u2019s possible that "),Cu=n("code"),G9=a("LD_LIBRARY_PATH"),q9=a(" is empty."),Z1=i(),rt=n("p"),xu=n("code"),M9=a("PATH"),j9=a(" lists the locations of where executables can be found and "),Su=n("code"),B9=a("LD_LIBRARY_PATH"),V9=a(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Nu=n("code"),H9=a(":"),W9=a(` is used to separate multiple
entries.`),K1=i(),ld=n("p"),Y9=a(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),J1=i(),h(Zs.$$.fragment),Q1=i(),id=n("p"),Z9=a("Note that we aren\u2019t overwriting the existing values, but prepending instead."),X1=i(),Re=n("p"),K9=a(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Iu=n("code"),J9=a("lib64"),Q9=a(" sub-directory is where the various CUDA "),Uu=n("code"),X9=a(".so"),eP=a(" objects, like "),Lu=n("code"),tP=a("libcudart.so"),rP=a(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),eb=i(),Nr=n("h4"),Ka=n("a"),Fu=n("span"),h(Ks.$$.fragment),aP=i(),zu=n("span"),oP=a("Possible problem #3"),tb=i(),Ft=n("p"),nP=a("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Ru=n("code"),sP=a("gcc-9"),lP=a(` but it wants
`),Gu=n("code"),iP=a("gcc-7"),dP=a("."),rb=i(),dd=n("p"),cP=a("There are various ways to go about it."),ab=i(),cd=n("p"),pP=a("If you can install the latest CUDA toolkit it typically should support the newer compiler."),ob=i(),Ja=n("p"),mP=a(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),qu=n("code"),hP=a("gcc-7"),fP=a(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),nb=i(),h(Js.$$.fragment),sb=i(),j=n("p"),uP=a("Here, we are making a symlink to "),Mu=n("code"),_P=a("gcc-7"),gP=a(" from "),ju=n("code"),vP=a("/usr/local/cuda-10.2/bin/gcc"),bP=a(` and since
`),Bu=n("code"),yP=a("/usr/local/cuda-10.2/bin/"),wP=a(" should be in the "),Vu=n("code"),EP=a("PATH"),$P=a(` environment variable (see the previous problem\u2019s solution), it
should find `),Hu=n("code"),TP=a("gcc-7"),kP=a(" (and "),Wu=n("code"),DP=a("g++7"),PP=a(") and then the build will succeed."),lb=i(),pd=n("p"),AP=a("As always make sure to edit the paths in the example to match your situation."),ib=i(),Ir=n("h3"),Qa=n("a"),Yu=n("span"),h(Qs.$$.fragment),OP=i(),Zu=n("span"),CP=a("FairScale"),db=i(),h(Xa.$$.fragment),cb=i(),Ge=n("p"),xP=a("By integrating "),Xs=n("a"),SP=a("FairScale"),NP=a(" the "),md=n("a"),IP=a("Trainer"),UP=a(`
provides support for the following features from `),el=n("a"),LP=a("the ZeRO paper"),FP=a(":"),pb=i(),qe=n("ol"),Ku=n("li"),zP=a("Optimizer State Sharding"),RP=i(),Ju=n("li"),GP=a("Gradient Sharding"),qP=i(),Qu=n("li"),MP=a("Model Parameters Sharding (new and very experimental)"),jP=i(),Xu=n("li"),BP=a("CPU offload (new and very experimental)"),mb=i(),hd=n("p"),VP=a("You will need at least two GPUs to use this feature."),hb=i(),tl=n("p"),e_=n("strong"),HP=a("Installation"),WP=a(":"),fb=i(),fd=n("p"),YP=a("Install the library via pypi:"),ub=i(),h(rl.$$.fragment),_b=i(),zt=n("p"),ZP=a("or via "),t_=n("code"),KP=a("transformers"),JP=a("\u2019 "),r_=n("code"),QP=a("extras"),XP=a(":"),gb=i(),h(al.$$.fragment),vb=i(),Rt=n("p"),eA=a("(available starting from "),a_=n("code"),tA=a("transformers==4.6.0"),rA=a(") or find more details on "),ol=n("a"),aA=a("the FairScale\u2019s GitHub page"),oA=a("."),bb=i(),eo=n("p"),nA=a("If you\u2019re still struggling with the build, first make sure to read "),ud=n("a"),sA=a("CUDA Extension Installation Notes"),lA=a("."),yb=i(),_d=n("p"),iA=a("If it\u2019s still not resolved the build issue, here are a few more ideas."),wb=i(),nl=n("p"),o_=n("code"),dA=a("fairscale"),cA=a(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),Eb=i(),h(sl.$$.fragment),$b=i(),gd=n("p"),pA=a("or:"),Tb=i(),h(ll.$$.fragment),kb=i(),il=n("p"),n_=n("code"),mA=a("fairscale"),hA=a(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Db=i(),h(dl.$$.fragment),Pb=i(),vd=n("p"),fA=a("or:"),Ab=i(),h(cl.$$.fragment),Ob=i(),bd=n("p"),uA=a("Of course, adjust the urls to match the cuda version you use."),Cb=i(),to=n("p"),_A=a(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),pl=n("a"),gA=a("FairScale"),vA=a("."),xb=i(),ml=n("p"),s_=n("strong"),bA=a("Usage"),yA=a(":"),Sb=i(),Gt=n("p"),wA=a("To use the first version of Sharded data-parallelism, add "),l_=n("code"),EA=a("--sharded_ddp simple"),$A=a(` to the command line arguments, and
make sure you have added the distributed launcher `),i_=n("code"),TA=a("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),kA=a(" if you haven\u2019t been using it already."),Nb=i(),ro=n("p"),DA=a("For example here is how you could use it for "),d_=n("code"),PA=a("run_translation.py"),AA=a(" with 2 GPUs:"),Ib=i(),h(hl.$$.fragment),Ub=i(),yd=n("p"),OA=a("Notes:"),Lb=i(),Me=n("ul"),c_=n("li"),CA=a("This feature requires distributed training (so multiple GPUs)."),xA=i(),p_=n("li"),SA=a("It is not implemented for TPUs."),NA=i(),fl=n("li"),IA=a("It works with "),m_=n("code"),UA=a("--fp16"),LA=a(" too, to make things even faster."),FA=i(),ul=n("li"),zA=a("One of the main benefits of enabling "),h_=n("code"),RA=a("--sharded_ddp simple"),GA=a(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Fb=i(),_l=n("ol"),at=n("li"),qA=a("To use the second version of Sharded data-parallelism, add "),f_=n("code"),MA=a("--sharded_ddp zero_dp_2"),jA=a(" or "),u_=n("code"),BA=a("--sharded_ddp zero_dp_3"),VA=a(" to the command line arguments, and make sure you have added the distributed launcher "),__=n("code"),HA=a("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),WA=a(" if you haven\u2019t been using it already."),zb=i(),ao=n("p"),YA=a("For example here is how you could use it for "),g_=n("code"),ZA=a("run_translation.py"),KA=a(" with 2 GPUs:"),Rb=i(),h(gl.$$.fragment),Gb=i(),Ur=n("p"),v_=n("code"),JA=a("zero_dp_2"),QA=a(" is an optimized version of the simple wrapper, while "),b_=n("code"),XA=a("zero_dp_3"),eO=a(` fully shards model weights,
gradients and optimizer states.`),qb=i(),qt=n("p"),tO=a("Both are compatible with adding "),y_=n("code"),rO=a("cpu_offload"),aO=a(" to enable ZeRO-offload (activate it like this: "),w_=n("code"),oO=a('--sharded_ddp "zero_dp_2 cpu_offload"'),nO=a(")."),Mb=i(),wd=n("p"),sO=a("Notes:"),jb=i(),me=n("ul"),E_=n("li"),lO=a("This feature requires distributed training (so multiple GPUs)."),iO=i(),$_=n("li"),dO=a("It is not implemented for TPUs."),cO=i(),vl=n("li"),pO=a("It works with "),T_=n("code"),mO=a("--fp16"),hO=a(" too, to make things even faster."),fO=i(),Lr=n("li"),uO=a("The "),k_=n("code"),_O=a("cpu_offload"),gO=a(" additional option requires "),D_=n("code"),vO=a("--fp16"),bO=a("."),yO=i(),P_=n("li"),wO=a(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),Bb=i(),Ed=n("p"),EO=a("Known caveats:"),Vb=i(),oo=n("ul"),Fr=n("li"),$O=a("This feature is incompatible with "),A_=n("code"),TO=a("--predict_with_generate"),kO=a(" in the "),O_=n("em"),DO=a("run_translation.py"),PO=a(" script."),AO=i(),Te=n("li"),OO=a("Using "),C_=n("code"),CO=a("--sharded_ddp zero_dp_3"),xO=a(` requires wrapping each layer of the model in the special container
`),x_=n("code"),SO=a("FullyShardedDataParallelism"),NO=a(" of fairscale. It should be used with the option "),S_=n("code"),IO=a("auto_wrap"),UO=a(` if you are not
doing this yourself: `),N_=n("code"),LO=a('--sharded_ddp "zero_dp_3 auto_wrap"'),FO=a("."),Hb=i(),zr=n("h3"),no=n("a"),I_=n("span"),h(bl.$$.fragment),zO=i(),U_=n("span"),RO=a("PyTorch Fully Sharded Data parallel"),Wb=i(),so=n("p"),GO=a(`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),yl=n("a"),qO=a("Fully Sharded Data Parallel blog"),MO=a(`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),Yb=i(),wl=n("p"),L_=n("strong"),jO=a("Required PyTorch version for FSDP support"),BO=a(`: PyTorch Nightly (or 1.12.0 if you read this after it has been released)
as the model saving with FSDP activated is only available with recent fixes.`),Zb=i(),El=n("p"),F_=n("strong"),VO=a("Usage"),HO=a(":"),Kb=i(),ee=n("ul"),z_=n("li"),$l=n("p"),WO=a(`Make sure you have added the distributed launcher
`),R_=n("code"),YO=a("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),ZO=a(" if you haven\u2019t been using it already."),KO=i(),Tl=n("li"),$d=n("p"),G_=n("strong"),JO=a("Sharding Strategy"),QO=a(":"),XO=i(),Rr=n("ul"),kl=n("li"),eC=a(`FULL_SHARD : Shards optimizer states + gradients + model parameters across data parallel workers/GPUs.
For this, add `),q_=n("code"),tC=a("--fsdp full_shard"),rC=a(" to the command line arguments."),aC=i(),Dl=n("li"),oC=a(`SHARD_GRAD_OP : Shards optimizer states + gradients across data parallel workers/GPUs.
For this, add `),M_=n("code"),nC=a("--fsdp shard_grad_op"),sC=a(" to the command line arguments."),lC=i(),Pl=n("li"),iC=a("NO_SHARD : No sharding. For this, add "),j_=n("code"),dC=a("--fsdp no_shard"),cC=a(" to the command line arguments."),pC=i(),B_=n("li"),Gr=n("p"),mC=a(`To offload the parameters and gradients to the CPU,
add `),V_=n("code"),hC=a('--fsdp "full_shard offload"'),fC=a(" or "),H_=n("code"),uC=a('--fsdp "shard_grad_op offload"'),_C=a(" to the command line arguments."),gC=i(),W_=n("li"),ot=n("p"),vC=a("To automatically recursively wrap layers with FSDP using "),Y_=n("code"),bC=a("default_auto_wrap_policy"),yC=a(`,
add `),Z_=n("code"),wC=a('--fsdp "full_shard auto_wrap"'),EC=a(" or "),K_=n("code"),$C=a('--fsdp "shard_grad_op auto_wrap"'),TC=a(" to the command line arguments."),kC=i(),J_=n("li"),qr=n("p"),DC=a(`To enable both CPU offloading and auto wrapping,
add `),Q_=n("code"),PC=a('--fsdp "full_shard offload auto_wrap"'),AC=a(" or "),X_=n("code"),OC=a('--fsdp "shard_grad_op offload auto_wrap"'),CC=a(" to the command line arguments."),xC=i(),Al=n("li"),eg=n("p"),SC=a("If auto wrapping is enabled, you can either use transformer based auto wrap policy or size based auto wrap policy."),NC=i(),Ol=n("ul"),ke=n("li"),IC=a("For transformer based auto wrap policy, please add "),tg=n("code"),UC=a("--fsdp_transformer_layer_cls_to_wrap <value>"),LC=a(` to command line arguments.
This specifies the transformer layer class name (case-sensitive) to wrap ,e.g, `),rg=n("code"),FC=a("BertLayer"),zC=a(", "),ag=n("code"),RC=a("GPTJBlock"),GC=a(", "),og=n("code"),qC=a("T5Block"),MC=a(` \u2026
This is important because submodules that share weights (e.g., embedding layer) should not end up in different FSDP wrapped units.
Using this policy, wrapping happens for each block containing Multi-Head Attention followed by couple of MLP layers.
Remaining layers including the shared embeddings are conviniently wrapped in same outermost FSDP unit.
Therefore, use this for transformer based models.`),jC=i(),Cl=n("li"),BC=a("For size based auto wrap policy, please add "),ng=n("code"),VC=a("--fsdp_min_num_params <number>"),HC=a(` to command line arguments.
It specifies FSDP\u2019s minimum number of parameters for auto wrapping.`),Jb=i(),Td=n("p"),sg=n("strong"),WC=a("Few caveats to be aware of"),Qb=i(),lo=n("ul"),xl=n("li"),YC=a(`Mixed precision is currently not supported with FSDP as we wait for PyTorch to fix support for it.
More details in this `),Sl=n("a"),ZC=a("issues"),KC=a("."),JC=i(),Mr=n("li"),QC=a(`FSDP currently doesn\u2019t support multiple parameter groups.
More details mentioned in this `),Nl=n("a"),XC=a("issue"),ex=a(`
(`),lg=n("code"),tx=a("The original model parameters' .grads are not set, meaning that they cannot be optimized separately (which is why we cannot support multiple parameter groups)"),rx=a(")."),Xb=i(),jr=n("h3"),io=n("a"),ig=n("span"),h(Il.$$.fragment),ax=i(),dg=n("span"),ox=a("Using Trainer for accelerated PyTorch Training on Mac"),ey=i(),je=n("p"),nx=a(`With PyTorch v1.12 release, developers and researchers can take advantage of Apple silicon GPUs for significantly faster model training.
This unlocks the ability to perform machine learning workflows like prototyping and fine-tuning locally, right on Mac.
Apple\u2019s Metal Performance Shaders (MPS) as a backend for PyTorch enables this and can be used via the new `),cg=n("code"),sx=a('"mps"'),lx=a(` device.
This will map computational graphs and primitives on the MPS Graph framework and tuned kernels provided by MPS.
For more information please refer official documents `),Ul=n("a"),ix=a("Introducing Accelerated PyTorch Training on Mac"),dx=a(`
and `),Ll=n("a"),cx=a("MPS BACKEND"),px=a("."),ty=i(),h(co.$$.fragment),ry=i(),kd=n("p"),pg=n("strong"),mx=a("Benefits of Training and Inference using Apple Silicon Chips"),ay=i(),Mt=n("ol"),mg=n("li"),hx=a("Enables users to train larger networks or batch sizes locally"),fx=i(),hg=n("li"),ux=a(`Reduces data retrieval latency and provides the GPU with direct access to the full memory store due to unified memory architecture.
Therefore, improving end-to-end performance.`),_x=i(),fg=n("li"),gx=a("Reduces costs associated with cloud-based development or the need for additional local GPUs."),oy=i(),Br=n("p"),ug=n("strong"),vx=a("Pre-requisites"),bx=a(`: To install torch with mps support,
please follow this nice medium article `),Fl=n("a"),yx=a("GPU-Acceleration Comes to PyTorch on M1 Macs"),wx=a("."),ny=i(),Vr=n("p"),_g=n("strong"),Ex=a("Usage"),$x=a(`:
User has to just pass `),gg=n("code"),Tx=a("--use_mps_device"),kx=a(` argument.
For example, you can run the offical Glue text classififcation task (from the root folder) using Apple Silicon GPU with below command:`),sy=i(),h(zl.$$.fragment),ly=i(),Dd=n("p"),vg=n("strong"),Dx=a("A few caveats to be aware of"),iy=i(),po=n("ol"),Rl=n("li"),Px=a(`Some PyTorch operations have not been implemented in mps and will throw an error.
One way to get around that is to set the environment variable `),bg=n("code"),Ax=a("PYTORCH_ENABLE_MPS_FALLBACK=1"),Ox=a(`,
which will fallback to CPU for these operations. It still throws a UserWarning however.`),Cx=i(),De=n("li"),xx=a("Distributed setups "),yg=n("code"),Sx=a("gloo"),Nx=a(" and "),wg=n("code"),Ix=a("nccl"),Ux=a(" are not working with "),Eg=n("code"),Lx=a("mps"),Fx=a(` device.
This means that currently only single GPU of `),$g=n("code"),zx=a("mps"),Rx=a(" device type can be used."),dy=i(),jt=n("p"),Gx=a("Finally, please, remember that, \u{1F917} "),Tg=n("code"),qx=a("Trainer"),Mx=a(` only integrates MPS backend, therefore if you
have any problems or questions with regards to MPS backend usage, please,
file an issue with `),Gl=n("a"),jx=a("PyTorch GitHub"),Bx=a("."),cy=i(),Pd=n("p"),Vx=a("Sections that were moved:"),py=i(),w=n("p"),Hx=a("[ "),Ad=n("a"),Wx=a("DeepSpeed"),kg=n("a"),Yx=a(`
| `),Od=n("a"),Zx=a("Installation"),Dg=n("a"),Kx=a(`
| `),Cd=n("a"),Jx=a("Deployment with multiple GPUs"),Pg=n("a"),Qx=a(`
| `),xd=n("a"),Xx=a("Deployment with one GPU"),Ag=n("a"),eS=a(`
| `),Sd=n("a"),tS=a("Deployment in Notebooks"),Og=n("a"),rS=a(`
| `),Nd=n("a"),aS=a("Configuration"),Cg=n("a"),oS=a(`
| `),Id=n("a"),nS=a("Passing Configuration"),xg=n("a"),sS=a(`
| `),Ud=n("a"),lS=a("Shared Configuration"),Sg=n("a"),iS=a(`
| `),Ld=n("a"),dS=a("ZeRO"),Ng=n("a"),cS=a(`
| `),Fd=n("a"),pS=a("ZeRO-2 Config"),Ig=n("a"),mS=a(`
| `),zd=n("a"),hS=a("ZeRO-3 Config"),Ug=n("a"),fS=a(`
| `),Rd=n("a"),uS=a("NVMe Support"),Lg=n("a"),_S=a(`
| `),Gd=n("a"),gS=a("ZeRO-2 vs ZeRO-3 Performance"),Fg=n("a"),vS=a(`
| `),qd=n("a"),bS=a("ZeRO-2 Example"),zg=n("a"),yS=a(`
| `),Md=n("a"),wS=a("ZeRO-3 Example"),Rg=n("a"),ES=a(`
| `),jd=n("a"),$S=a("Optimizer"),Gg=n("a"),TS=a(`
| `),Bd=n("a"),kS=a("Scheduler"),qg=n("a"),DS=a(`
| `),Vd=n("a"),PS=a("fp32 Precision"),Mg=n("a"),AS=a(`
| `),Hd=n("a"),OS=a("Automatic Mixed Precision"),jg=n("a"),CS=a(`
| `),Wd=n("a"),xS=a("Batch Size"),Bg=n("a"),SS=a(`
| `),Yd=n("a"),NS=a("Gradient Accumulation"),Vg=n("a"),IS=a(`
| `),Zd=n("a"),US=a("Gradient Clipping"),Hg=n("a"),LS=a(`
| `),Kd=n("a"),FS=a("Getting The Model Weights Out"),Wg=n("a"),zS=a(`
]`),this.h()},l(t){const c=dM('[data-svelte="svelte-1phssyn"]',document.head);E=s(c,"META",{name:!0,content:!0}),c.forEach(r),O=d(t),T=s(t,"H1",{class:!0});var ql=l(T);D=s(ql,"A",{id:!0,class:!0,href:!0});var Yg=l(D);z=s(Yg,"SPAN",{});var Zg=l(z);f(P.$$.fragment,Zg),Zg.forEach(r),Yg.forEach(r),C=d(ql),G=s(ql,"SPAN",{});var Kg=l(G);ue=o(Kg,"Trainer"),Kg.forEach(r),ql.forEach(r),te=d(t),M=s(t,"P",{});var Hr=l(M);ne=o(Hr,"The "),se=s(Hr,"A",{href:!0});var Jg=l(se);re=o(Jg,"Trainer"),Jg.forEach(r),le=o(Hr," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),B=s(Hr,"A",{href:!0,rel:!0});var Qg=l(B);Ze=o(Qg,"example scripts"),Qg.forEach(r),_e=o(Hr,"."),Hr.forEach(r),F=d(t),I=s(t,"P",{});var Jd=l(I);nt=o(Jd,"Before instantiating your "),ae=s(Jd,"A",{href:!0});var cN=l(ae);st=o(cN,"Trainer"),cN.forEach(r),lt=o(Jd,", create a "),ge=s(Jd,"A",{href:!0});var pN=l(ge);xo=o(pN,"TrainingArguments"),pN.forEach(r),So=o(Jd," to access all the points of customization during training."),Jd.forEach(r),Ke=d(t),Ae=s(t,"P",{});var hy=l(Ae);No=o(hy,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),ve=s(hy,"A",{href:!0,rel:!0});var mN=l(ve);Io=o(mN,"NVIDIA Apex"),mN.forEach(r),Uo=o(hy," and Native AMP for PyTorch."),hy.forEach(r),Z=d(t),V=s(t,"P",{});var fy=l(V);Vl=o(fy,"The "),be=s(fy,"A",{href:!0});var hN=l(be);Zr=o(hN,"Trainer"),hN.forEach(r),Hl=o(fy," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),fy.forEach(r),rr=d(t),N=s(t,"UL",{});var L=l(N);H=s(L,"LI",{});var RS=l(H);Kr=s(RS,"STRONG",{});var fN=l(Kr);Wl=o(fN,"get_train_dataloader"),fN.forEach(r),Yl=o(RS," \u2014 Creates the training DataLoader."),RS.forEach(r),Zl=d(L),Kl=s(L,"LI",{});var GS=l(Kl);ap=s(GS,"STRONG",{});var uN=l(ap);iw=o(uN,"get_eval_dataloader"),uN.forEach(r),dw=o(GS," \u2014 Creates the evaluation DataLoader."),GS.forEach(r),cw=d(L),Jl=s(L,"LI",{});var qS=l(Jl);op=s(qS,"STRONG",{});var _N=l(op);pw=o(_N,"get_test_dataloader"),_N.forEach(r),mw=o(qS," \u2014 Creates the test DataLoader."),qS.forEach(r),hw=d(L),Ql=s(L,"LI",{});var MS=l(Ql);np=s(MS,"STRONG",{});var gN=l(np);fw=o(gN,"log"),gN.forEach(r),uw=o(MS," \u2014 Logs information on the various objects watching training."),MS.forEach(r),_w=d(L),it=s(L,"LI",{});var Ml=l(it);sp=s(Ml,"STRONG",{});var vN=l(sp);gw=o(vN,"create_optimizer_and_scheduler"),vN.forEach(r),vw=o(Ml,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),lp=s(Ml,"CODE",{});var bN=l(lp);bw=o(bN,"create_optimizer"),bN.forEach(r),yw=o(Ml," and "),ip=s(Ml,"CODE",{});var yN=l(ip);ww=o(yN,"create_scheduler"),yN.forEach(r),Ew=o(Ml,` methods
separately.`),Ml.forEach(r),$w=d(L),Xl=s(L,"LI",{});var jS=l(Xl);dp=s(jS,"STRONG",{});var wN=l(dp);Tw=o(wN,"create_optimizer"),wN.forEach(r),kw=o(jS," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),jS.forEach(r),Dw=d(L),ei=s(L,"LI",{});var BS=l(ei);cp=s(BS,"STRONG",{});var EN=l(cp);Pw=o(EN,"create_scheduler"),EN.forEach(r),Aw=o(BS," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),BS.forEach(r),Ow=d(L),ti=s(L,"LI",{});var VS=l(ti);pp=s(VS,"STRONG",{});var $N=l(pp);Cw=o($N,"compute_loss"),$N.forEach(r),xw=o(VS," - Computes the loss on a batch of training inputs."),VS.forEach(r),Sw=d(L),ri=s(L,"LI",{});var HS=l(ri);mp=s(HS,"STRONG",{});var TN=l(mp);Nw=o(TN,"training_step"),TN.forEach(r),Iw=o(HS," \u2014 Performs a training step."),HS.forEach(r),Uw=d(L),ai=s(L,"LI",{});var WS=l(ai);hp=s(WS,"STRONG",{});var kN=l(hp);Lw=o(kN,"prediction_step"),kN.forEach(r),Fw=o(WS," \u2014 Performs an evaluation/test step."),WS.forEach(r),zw=d(L),oi=s(L,"LI",{});var YS=l(oi);fp=s(YS,"STRONG",{});var DN=l(fp);Rw=o(DN,"evaluate"),DN.forEach(r),Gw=o(YS," \u2014 Runs an evaluation loop and returns metrics."),YS.forEach(r),qw=d(L),ni=s(L,"LI",{});var ZS=l(ni);up=s(ZS,"STRONG",{});var PN=l(up);Mw=o(PN,"predict"),PN.forEach(r),jw=o(ZS," \u2014 Returns predictions (with metrics if labels are available) on a test set."),ZS.forEach(r),L.forEach(r),ov=d(t),f(Jr.$$.fragment,t),nv=d(t),Qr=s(t,"P",{});var uy=l(Qr);Bw=o(uy,"Here is an example of how to customize "),si=s(uy,"A",{href:!0});var AN=l(si);Vw=o(AN,"Trainer"),AN.forEach(r),Hw=o(uy," to use a weighted loss (useful when you have an unbalanced training set):"),uy.forEach(r),sv=d(t),f(Lo.$$.fragment,t),lv=d(t),dt=s(t,"P",{});var Qd=l(dt);Ww=o(Qd,"Another way to customize the training loop behavior for the PyTorch "),li=s(Qd,"A",{href:!0});var ON=l(li);Yw=o(ON,"Trainer"),ON.forEach(r),Zw=o(Qd," is to use "),ii=s(Qd,"A",{href:!0});var CN=l(ii);Kw=o(CN,"callbacks"),CN.forEach(r),Jw=o(Qd," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),Qd.forEach(r),iv=d(t),ar=s(t,"H2",{class:!0});var _y=l(ar);Xr=s(_y,"A",{id:!0,class:!0,href:!0});var xN=l(Xr);_p=s(xN,"SPAN",{});var SN=l(_p);f(Fo.$$.fragment,SN),SN.forEach(r),xN.forEach(r),Qw=d(_y),gp=s(_y,"SPAN",{});var NN=l(gp);Xw=o(NN,"Trainer"),NN.forEach(r),_y.forEach(r),dv=d(t),b=s(t,"DIV",{class:!0});var y=l(b);f(zo.$$.fragment,y),eE=d(y),vp=s(y,"P",{});var IN=l(vp);tE=o(IN,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),IN.forEach(r),rE=d(y),bp=s(y,"P",{});var UN=l(bp);aE=o(UN,"Important attributes:"),UN.forEach(r),oE=d(y),ye=s(y,"UL",{});var Bt=l(ye);ea=s(Bt,"LI",{});var Xg=l(ea);yp=s(Xg,"STRONG",{});var LN=l(yp);nE=o(LN,"model"),LN.forEach(r),sE=o(Xg," \u2014 Always points to the core model. If using a transformers model, it will be a "),di=s(Xg,"A",{href:!0});var FN=l(di);lE=o(FN,"PreTrainedModel"),FN.forEach(r),iE=o(Xg,`
subclass.`),Xg.forEach(r),dE=d(Bt),K=s(Bt,"LI",{});var Pe=l(K);wp=s(Pe,"STRONG",{});var zN=l(wp);cE=o(zN,"model_wrapped"),zN.forEach(r),pE=o(Pe,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Ep=s(Pe,"CODE",{});var RN=l(Ep);mE=o(RN,"DeepSpeed"),RN.forEach(r),hE=o(Pe,`,
the inner model is wrapped in `),$p=s(Pe,"CODE",{});var GN=l($p);fE=o(GN,"DeepSpeed"),GN.forEach(r),uE=o(Pe," and then again in "),Tp=s(Pe,"CODE",{});var qN=l(Tp);_E=o(qN,"torch.nn.DistributedDataParallel"),qN.forEach(r),gE=o(Pe,`. If the inner
model hasn\u2019t been wrapped, then `),kp=s(Pe,"CODE",{});var MN=l(kp);vE=o(MN,"self.model_wrapped"),MN.forEach(r),bE=o(Pe," is the same as "),Dp=s(Pe,"CODE",{});var jN=l(Dp);yE=o(jN,"self.model"),jN.forEach(r),wE=o(Pe,"."),Pe.forEach(r),EE=d(Bt),ci=s(Bt,"LI",{});var KS=l(ci);Pp=s(KS,"STRONG",{});var BN=l(Pp);$E=o(BN,"is_model_parallel"),BN.forEach(r),TE=o(KS,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),KS.forEach(r),kE=d(Bt),Oe=s(Bt,"LI",{});var Wr=l(Oe);Ap=s(Wr,"STRONG",{});var VN=l(Ap);DE=o(VN,"place_model_on_device"),VN.forEach(r),PE=o(Wr,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Op=s(Wr,"CODE",{});var HN=l(Op);AE=o(HN,"False"),HN.forEach(r),OE=o(Wr,` if model parallel or deepspeed is used, or if the default
`),Cp=s(Wr,"CODE",{});var WN=l(Cp);CE=o(WN,"TrainingArguments.place_model_on_device"),WN.forEach(r),xE=o(Wr," is overridden to return "),xp=s(Wr,"CODE",{});var YN=l(xp);SE=o(YN,"False"),YN.forEach(r),NE=o(Wr," ."),Wr.forEach(r),IE=d(Bt),Ce=s(Bt,"LI",{});var Yr=l(Ce);Sp=s(Yr,"STRONG",{});var ZN=l(Sp);UE=o(ZN,"is_in_train"),ZN.forEach(r),LE=o(Yr," \u2014 Whether or not a model is currently running "),Np=s(Yr,"CODE",{});var KN=l(Np);FE=o(KN,"train"),KN.forEach(r),zE=o(Yr," (e.g. when "),Ip=s(Yr,"CODE",{});var JN=l(Ip);RE=o(JN,"evaluate"),JN.forEach(r),GE=o(Yr,` is called while
in `),Up=s(Yr,"CODE",{});var QN=l(Up);qE=o(QN,"train"),QN.forEach(r),ME=o(Yr,")"),Yr.forEach(r),Bt.forEach(r),jE=d(y),ta=s(y,"DIV",{class:!0});var gy=l(ta);f(Ro.$$.fragment,gy),BE=d(gy),Go=s(gy,"P",{});var vy=l(Go);VE=o(vy,"Add a callback to the current list of "),Lp=s(vy,"CODE",{});var XN=l(Lp);HE=o(XN,"TrainerCallback"),XN.forEach(r),WE=o(vy,"."),vy.forEach(r),gy.forEach(r),YE=d(y),ra=s(y,"DIV",{class:!0});var by=l(ra);f(qo.$$.fragment,by),ZE=d(by),Mo=s(by,"P",{});var yy=l(Mo);KE=o(yy,"A helper wrapper that creates an appropriate context manager for "),Fp=s(yy,"CODE",{});var eI=l(Fp);JE=o(eI,"autocast"),eI.forEach(r),QE=o(yy,` while feeding it the desired
arguments, depending on the situation.`),yy.forEach(r),by.forEach(r),XE=d(y),ct=s(y,"DIV",{class:!0});var Xd=l(ct);f(jo.$$.fragment,Xd),e0=d(Xd),zp=s(Xd,"P",{});var tI=l(zp);t0=o(tI,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),tI.forEach(r),r0=d(Xd),Rp=s(Xd,"P",{});var rI=l(Rp);a0=o(rI,"Subclass and override for custom behavior."),rI.forEach(r),Xd.forEach(r),o0=d(y),aa=s(y,"DIV",{class:!0});var wy=l(aa);f(Bo.$$.fragment,wy),n0=d(wy),Gp=s(wy,"P",{});var aI=l(Gp);s0=o(aI,"A helper wrapper to group together context managers."),aI.forEach(r),wy.forEach(r),l0=d(y),pt=s(y,"DIV",{class:!0});var ec=l(pt);f(Vo.$$.fragment,ec),i0=d(ec),qp=s(ec,"P",{});var oI=l(qp);d0=o(oI,"Setup the optimizer."),oI.forEach(r),c0=d(ec),Ho=s(ec,"P",{});var Ey=l(Ho);p0=o(Ey,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Mp=s(Ey,"CODE",{});var nI=l(Mp);m0=o(nI,"optimizers"),nI.forEach(r),h0=o(Ey,", or subclass and override this method in a subclass."),Ey.forEach(r),ec.forEach(r),f0=d(y),mt=s(y,"DIV",{class:!0});var tc=l(mt);f(Wo.$$.fragment,tc),u0=d(tc),jp=s(tc,"P",{});var sI=l(jp);_0=o(sI,"Setup the optimizer and the learning rate scheduler."),sI.forEach(r),g0=d(tc),Je=s(tc,"P",{});var mo=l(Je);v0=o(mo,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Bp=s(mo,"CODE",{});var lI=l(Bp);b0=o(lI,"optimizers"),lI.forEach(r),y0=o(mo,", or subclass and override this method (or "),Vp=s(mo,"CODE",{});var iI=l(Vp);w0=o(iI,"create_optimizer"),iI.forEach(r),E0=o(mo,` and/or
`),Hp=s(mo,"CODE",{});var dI=l(Hp);$0=o(dI,"create_scheduler"),dI.forEach(r),T0=o(mo,") in a subclass."),mo.forEach(r),tc.forEach(r),k0=d(y),oa=s(y,"DIV",{class:!0});var $y=l(oa);f(Yo.$$.fragment,$y),D0=d($y),Wp=s($y,"P",{});var cI=l(Wp);P0=o(cI,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),cI.forEach(r),$y.forEach(r),A0=d(y),xe=s(y,"DIV",{class:!0});var ho=l(xe);f(Zo.$$.fragment,ho),O0=d(ho),Yp=s(ho,"P",{});var pI=l(Yp);C0=o(pI,"Run evaluation and returns metrics."),pI.forEach(r),x0=d(ho),Ko=s(ho,"P",{});var Ty=l(Ko);S0=o(Ty,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Zp=s(Ty,"CODE",{});var mI=l(Zp);N0=o(mI,"compute_metrics"),mI.forEach(r),I0=o(Ty," argument)."),Ty.forEach(r),U0=d(ho),Kp=s(ho,"P",{});var hI=l(Kp);L0=o(hI,"You can also subclass and override this method to inject custom behavior."),hI.forEach(r),ho.forEach(r),F0=d(y),ht=s(y,"DIV",{class:!0});var rc=l(ht);f(Jo.$$.fragment,rc),z0=d(rc),or=s(rc,"P",{});var ac=l(or);R0=o(ac,"Prediction/evaluation loop, shared by "),Jp=s(ac,"CODE",{});var fI=l(Jp);G0=o(fI,"Trainer.evaluate()"),fI.forEach(r),q0=o(ac," and "),Qp=s(ac,"CODE",{});var uI=l(Qp);M0=o(uI,"Trainer.predict()"),uI.forEach(r),j0=o(ac,"."),ac.forEach(r),B0=d(rc),Xp=s(rc,"P",{});var _I=l(Xp);V0=o(_I,"Works both with or without labels."),_I.forEach(r),rc.forEach(r),H0=d(y),na=s(y,"DIV",{class:!0});var ky=l(na);f(Qo.$$.fragment,ky),W0=d(ky),Xo=s(ky,"P",{});var Dy=l(Xo);Y0=o(Dy,"For models that inherit from "),pi=s(Dy,"A",{href:!0});var gI=l(pi);Z0=o(gI,"PreTrainedModel"),gI.forEach(r),K0=o(Dy,`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),Dy.forEach(r),ky.forEach(r),J0=d(y),ft=s(y,"DIV",{class:!0});var oc=l(ft);f(en.$$.fragment,oc),Q0=d(oc),tn=s(oc,"P",{});var Py=l(tn);X0=o(Py,"Returns the evaluation "),em=s(Py,"CODE",{});var vI=l(em);e$=o(vI,"DataLoader"),vI.forEach(r),t$=o(Py,"."),Py.forEach(r),r$=d(oc),tm=s(oc,"P",{});var bI=l(tm);a$=o(bI,"Subclass and override this method if you want to inject some custom behavior."),bI.forEach(r),oc.forEach(r),o$=d(y),sa=s(y,"DIV",{class:!0});var Ay=l(sa);f(rn.$$.fragment,Ay),n$=d(Ay),rm=s(Ay,"P",{});var yI=l(rm);s$=o(yI,"Returns the optimizer class and optimizer parameters based on the training arguments."),yI.forEach(r),Ay.forEach(r),l$=d(y),ut=s(y,"DIV",{class:!0});var nc=l(ut);f(an.$$.fragment,nc),i$=d(nc),on=s(nc,"P",{});var Oy=l(on);d$=o(Oy,"Returns the test "),am=s(Oy,"CODE",{});var wI=l(am);c$=o(wI,"DataLoader"),wI.forEach(r),p$=o(Oy,"."),Oy.forEach(r),m$=d(nc),om=s(nc,"P",{});var EI=l(om);h$=o(EI,"Subclass and override this method if you want to inject some custom behavior."),EI.forEach(r),nc.forEach(r),f$=d(y),Se=s(y,"DIV",{class:!0});var fo=l(Se);f(nn.$$.fragment,fo),u$=d(fo),sn=s(fo,"P",{});var Cy=l(sn);_$=o(Cy,"Returns the training "),nm=s(Cy,"CODE",{});var $I=l(nm);g$=o($I,"DataLoader"),$I.forEach(r),v$=o(Cy,"."),Cy.forEach(r),b$=d(fo),nr=s(fo,"P",{});var sc=l(nr);y$=o(sc,"Will use no sampler if "),sm=s(sc,"CODE",{});var TI=l(sm);w$=o(TI,"train_dataset"),TI.forEach(r),E$=o(sc," does not implement "),lm=s(sc,"CODE",{});var kI=l(lm);$$=o(kI,"__len__"),kI.forEach(r),T$=o(sc,`, a random sampler (adapted to distributed
training if necessary) otherwise.`),sc.forEach(r),k$=d(fo),im=s(fo,"P",{});var DI=l(im);D$=o(DI,"Subclass and override this method if you want to inject some custom behavior."),DI.forEach(r),fo.forEach(r),P$=d(y),_t=s(y,"DIV",{class:!0});var lc=l(_t);f(ln.$$.fragment,lc),A$=d(lc),we=s(lc,"P",{});var Vt=l(we);O$=o(Vt,"Launch an hyperparameter search using "),dm=s(Vt,"CODE",{});var PI=l(dm);C$=o(PI,"optuna"),PI.forEach(r),x$=o(Vt," or "),cm=s(Vt,"CODE",{});var AI=l(cm);S$=o(AI,"Ray Tune"),AI.forEach(r),N$=o(Vt," or "),pm=s(Vt,"CODE",{});var OI=l(pm);I$=o(OI,"SigOpt"),OI.forEach(r),U$=o(Vt,`. The optimized quantity is determined
by `),mm=s(Vt,"CODE",{});var CI=l(mm);L$=o(CI,"compute_objective"),CI.forEach(r),F$=o(Vt,`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),Vt.forEach(r),z$=d(lc),f(la.$$.fragment,lc),lc.forEach(r),R$=d(y),ia=s(y,"DIV",{class:!0});var xy=l(ia);f(dn.$$.fragment,xy),G$=d(xy),cn=s(xy,"P",{});var Sy=l(cn);q$=o(Sy,"Initializes a git repo in "),hm=s(Sy,"CODE",{});var xI=l(hm);M$=o(xI,"self.args.hub_model_id"),xI.forEach(r),j$=o(Sy,"."),Sy.forEach(r),xy.forEach(r),B$=d(y),da=s(y,"DIV",{class:!0});var Ny=l(da);f(pn.$$.fragment,Ny),V$=d(Ny),fm=s(Ny,"P",{});var SI=l(fm);H$=o(SI,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),SI.forEach(r),Ny.forEach(r),W$=d(y),ca=s(y,"DIV",{class:!0});var Iy=l(ca);f(mn.$$.fragment,Iy),Y$=d(Iy),hn=s(Iy,"P",{});var Uy=l(hn);Z$=o(Uy,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),um=s(Uy,"CODE",{});var NI=l(um);K$=o(NI,"True"),NI.forEach(r),J$=o(Uy," for one process)."),Uy.forEach(r),Iy.forEach(r),Q$=d(y),gt=s(y,"DIV",{class:!0});var ic=l(gt);f(fn.$$.fragment,ic),X$=d(ic),un=s(ic,"P",{});var Ly=l(un);eT=o(Ly,"Log "),_m=s(Ly,"CODE",{});var II=l(_m);tT=o(II,"logs"),II.forEach(r),rT=o(Ly," on the various objects watching training."),Ly.forEach(r),aT=d(ic),gm=s(ic,"P",{});var UI=l(gm);oT=o(UI,"Subclass and override this method to inject custom behavior."),UI.forEach(r),ic.forEach(r),nT=d(y),A=s(y,"DIV",{class:!0});var x=l(A);f(_n.$$.fragment,x),sT=d(x),vm=s(x,"P",{});var LI=l(vm);lT=o(LI,"Log metrics in a specially formatted way"),LI.forEach(r),iT=d(x),bm=s(x,"P",{});var FI=l(bm);dT=o(FI,"Under distributed environment this is done only for a process with rank 0."),FI.forEach(r),cT=d(x),ym=s(x,"P",{});var zI=l(ym);pT=o(zI,"Notes on memory reports:"),zI.forEach(r),mT=d(x),sr=s(x,"P",{});var dc=l(sr);hT=o(dc,"In order to get memory usage report you need to install "),wm=s(dc,"CODE",{});var RI=l(wm);fT=o(RI,"psutil"),RI.forEach(r),uT=o(dc,". You can do that with "),Em=s(dc,"CODE",{});var GI=l(Em);_T=o(GI,"pip install psutil"),GI.forEach(r),gT=o(dc,"."),dc.forEach(r),vT=d(x),f(pa.$$.fragment,x),bT=d(x),$m=s(x,"P",{});var qI=l($m);Tm=s(qI,"STRONG",{});var MI=l(Tm);yT=o(MI,"Understanding the reports:"),MI.forEach(r),qI.forEach(r),wT=d(x),Qe=s(x,"UL",{});var uo=l(Qe);Ee=s(uo,"LI",{});var Ht=l(Ee);ET=o(Ht,"the first segment, e.g., "),km=s(Ht,"CODE",{});var jI=l(km);$T=o(jI,"train__"),jI.forEach(r),TT=o(Ht,", tells you which stage the metrics are for. Reports starting with "),Dm=s(Ht,"CODE",{});var BI=l(Dm);kT=o(BI,"init_"),BI.forEach(r),DT=o(Ht,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Pm=s(Ht,"CODE",{});var VI=l(Pm);PT=o(VI,"__init__"),VI.forEach(r),AT=o(Ht," will be reported along with the "),Am=s(Ht,"CODE",{});var HI=l(Am);OT=o(HI,"eval_"),HI.forEach(r),CT=o(Ht," metrics."),Ht.forEach(r),xT=d(uo),lr=s(uo,"LI",{});var cc=l(lr);ST=o(cc,"the third segment, is either "),Om=s(cc,"CODE",{});var WI=l(Om);NT=o(WI,"cpu"),WI.forEach(r),IT=o(cc," or "),Cm=s(cc,"CODE",{});var YI=l(Cm);UT=o(YI,"gpu"),YI.forEach(r),LT=o(cc,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),cc.forEach(r),FT=d(uo),mi=s(uo,"LI",{});var JS=l(mi);xm=s(JS,"CODE",{});var ZI=l(xm);zT=o(ZI,"*_alloc_delta"),ZI.forEach(r),RT=o(JS,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),JS.forEach(r),GT=d(uo),vt=s(uo,"LI",{});var jl=l(vt);Sm=s(jl,"CODE",{});var KI=l(Sm);qT=o(KI,"*_peaked_delta"),KI.forEach(r),MT=o(jl,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Nm=s(jl,"CODE",{});var JI=l(Nm);jT=o(JI,"alloc_delta"),JI.forEach(r),BT=o(jl,` +
`),Im=s(jl,"CODE",{});var QI=l(Im);VT=o(QI,"peaked_delta"),QI.forEach(r),HT=o(jl," and you know how much memory was needed to complete that stage."),jl.forEach(r),uo.forEach(r),WT=d(x),Um=s(x,"P",{});var XI=l(Um);YT=o(XI,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),XI.forEach(r),ZT=d(x),Lm=s(x,"P",{});var eU=l(Lm);KT=o(eU,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),eU.forEach(r),JT=d(x),gn=s(x,"P",{});var Fy=l(gn);QT=o(Fy,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Fm=s(Fy,"CODE",{});var tU=l(Fm);XT=o(tU,"tracemalloc"),tU.forEach(r),e3=o(Fy,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),Fy.forEach(r),t3=d(x),Xe=s(x,"P",{});var _o=l(Xe);r3=o(_o,"The GPU allocated and peak memory reporting is done with "),zm=s(_o,"CODE",{});var rU=l(zm);a3=o(rU,"torch.cuda.memory_allocated()"),rU.forEach(r),o3=o(_o,` and
`),Rm=s(_o,"CODE",{});var aU=l(Rm);n3=o(aU,"torch.cuda.max_memory_allocated()"),aU.forEach(r),s3=o(_o,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Gm=s(_o,"CODE",{});var oU=l(Gm);l3=o(oU,"torch.cuda"),oU.forEach(r),i3=o(_o,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),_o.forEach(r),d3=d(x),oe=s(x,"P",{});var Be=l(oe);c3=o(Be,"Note that this tracker doesn\u2019t account for memory allocations outside of "),hi=s(Be,"A",{href:!0});var nU=l(hi);p3=o(nU,"Trainer"),nU.forEach(r),m3=o(Be,"\u2019s "),qm=s(Be,"CODE",{});var sU=l(qm);h3=o(sU,"__init__"),sU.forEach(r),f3=o(Be,", "),Mm=s(Be,"CODE",{});var lU=l(Mm);u3=o(lU,"train"),lU.forEach(r),_3=o(Be,`,
`),jm=s(Be,"CODE",{});var iU=l(jm);g3=o(iU,"evaluate"),iU.forEach(r),v3=o(Be," and "),Bm=s(Be,"CODE",{});var dU=l(Bm);b3=o(dU,"predict"),dU.forEach(r),y3=o(Be," calls."),Be.forEach(r),w3=d(x),U=s(x,"P",{});var R=l(U);E3=o(R,"Because "),Vm=s(R,"CODE",{});var cU=l(Vm);$3=o(cU,"evaluation"),cU.forEach(r),T3=o(R," calls may happen during "),Hm=s(R,"CODE",{});var pU=l(Hm);k3=o(pU,"train"),pU.forEach(r),D3=o(R,`, we can\u2019t handle nested invocations because
`),Wm=s(R,"CODE",{});var mU=l(Wm);P3=o(mU,"torch.cuda.max_memory_allocated"),mU.forEach(r),A3=o(R," is a single counter, so if it gets reset by a nested eval call, "),Ym=s(R,"CODE",{});var hU=l(Ym);O3=o(hU,"train"),hU.forEach(r),C3=o(R,`\u2019s tracker
will report incorrect info. If this `),vn=s(R,"A",{href:!0,rel:!0});var fU=l(vn);x3=o(fU,"pytorch issue"),fU.forEach(r),S3=o(R,` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Zm=s(R,"CODE",{});var uU=l(Zm);N3=o(uU,"train"),uU.forEach(r),I3=o(R,", "),Km=s(R,"CODE",{});var _U=l(Km);U3=o(_U,"evaluate"),_U.forEach(r),L3=o(R," and "),Jm=s(R,"CODE",{});var gU=l(Jm);F3=o(gU,"predict"),gU.forEach(r),z3=o(R," methods. Which means that if "),Qm=s(R,"CODE",{});var vU=l(Qm);R3=o(vU,"eval"),vU.forEach(r),G3=o(R," is called during "),Xm=s(R,"CODE",{});var bU=l(Xm);q3=o(bU,"train"),bU.forEach(r),M3=o(R,`, it\u2019s the latter
that will account for its memory usage and that of the former.`),R.forEach(r),j3=d(x),$e=s(x,"P",{});var Wt=l($e);B3=o(Wt,"This also means that if any other tool that is used along the "),fi=s(Wt,"A",{href:!0});var yU=l(fi);V3=o(yU,"Trainer"),yU.forEach(r),H3=o(Wt,` calls
`),eh=s(Wt,"CODE",{});var wU=l(eh);W3=o(wU,"torch.cuda.reset_peak_memory_stats"),wU.forEach(r),Y3=o(Wt,", the gpu peak memory stats could be invalid. And the "),ui=s(Wt,"A",{href:!0});var EU=l(ui);Z3=o(EU,"Trainer"),EU.forEach(r),K3=o(Wt,` will disrupt
the normal behavior of any such tools that rely on calling `),th=s(Wt,"CODE",{});var $U=l(th);J3=o($U,"torch.cuda.reset_peak_memory_stats"),$U.forEach(r),Q3=o(Wt," themselves."),Wt.forEach(r),X3=d(x),rh=s(x,"P",{});var TU=l(rh);e4=o(TU,"For best performance you may want to consider turning the memory profiling off for production runs."),TU.forEach(r),x.forEach(r),t4=d(y),ma=s(y,"DIV",{class:!0});var zy=l(ma);f(bn.$$.fragment,zy),r4=d(zy),ah=s(zy,"P",{});var kU=l(ah);a4=o(kU,"Reformat Trainer metrics values to a human-readable format"),kU.forEach(r),zy.forEach(r),o4=d(y),ha=s(y,"DIV",{class:!0});var Ry=l(ha);f(yn.$$.fragment,Ry),n4=d(Ry),wn=s(Ry,"P",{});var Gy=l(wn);s4=o(Gy,"Helper to get number of samples in a "),oh=s(Gy,"CODE",{});var DU=l(oh);l4=o(DU,"DataLoader"),DU.forEach(r),i4=o(Gy,` by accessing its dataset. When
dataloader.dataset does not exist or has no length, estimates as best it can`),Gy.forEach(r),Ry.forEach(r),d4=d(y),bt=s(y,"DIV",{class:!0});var pc=l(bt);f(En.$$.fragment,pc),c4=d(pc),$n=s(pc,"P",{});var qy=l($n);p4=o(qy,"Remove a callback from the current list of "),nh=s(qy,"CODE",{});var PU=l(nh);m4=o(PU,"TrainerCallback"),PU.forEach(r),h4=o(qy," and returns it."),qy.forEach(r),f4=d(pc),Tn=s(pc,"P",{});var My=l(Tn);u4=o(My,"If the callback is not found, returns "),sh=s(My,"CODE",{});var AU=l(sh);_4=o(AU,"None"),AU.forEach(r),g4=o(My," (and no error is raised)."),My.forEach(r),pc.forEach(r),v4=d(y),J=s(y,"DIV",{class:!0});var Ve=l(J);f(kn.$$.fragment,Ve),b4=d(Ve),lh=s(Ve,"P",{});var OU=l(lh);y4=o(OU,"Run prediction and returns predictions and potential metrics."),OU.forEach(r),w4=d(Ve),Dn=s(Ve,"P",{});var jy=l(Dn);E4=o(jy,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),ih=s(jy,"CODE",{});var CU=l(ih);$4=o(CU,"evaluate()"),CU.forEach(r),T4=o(jy,"."),jy.forEach(r),k4=d(Ve),f(fa.$$.fragment,Ve),D4=d(Ve),Pn=s(Ve,"P",{});var By=l(Pn);P4=o(By,"Returns: "),dh=s(By,"EM",{});var xU=l(dh);A4=o(xU,"NamedTuple"),xU.forEach(r),O4=o(By," A namedtuple with the following keys:"),By.forEach(r),C4=d(Ve),ir=s(Ve,"UL",{});var mc=l(ir);dr=s(mc,"LI",{});var hc=l(dr);x4=o(hc,"predictions ("),ch=s(hc,"CODE",{});var SU=l(ch);S4=o(SU,"np.ndarray"),SU.forEach(r),N4=o(hc,"): The predictions on "),ph=s(hc,"CODE",{});var NU=l(ph);I4=o(NU,"test_dataset"),NU.forEach(r),U4=o(hc,"."),hc.forEach(r),L4=d(mc),cr=s(mc,"LI",{});var fc=l(cr);F4=o(fc,"label_ids ("),mh=s(fc,"CODE",{});var IU=l(mh);z4=o(IU,"np.ndarray"),IU.forEach(r),R4=o(fc,", "),hh=s(fc,"EM",{});var UU=l(hh);G4=o(UU,"optional"),UU.forEach(r),q4=o(fc,"): The labels (if the dataset contained some)."),fc.forEach(r),M4=d(mc),pr=s(mc,"LI",{});var uc=l(pr);j4=o(uc,"metrics ("),fh=s(uc,"CODE",{});var LU=l(fh);B4=o(LU,"Dict[str, float]"),LU.forEach(r),V4=o(uc,", "),uh=s(uc,"EM",{});var FU=l(uh);H4=o(FU,"optional"),FU.forEach(r),W4=o(uc,`): The potential dictionary of metrics (if the dataset contained
labels).`),uc.forEach(r),mc.forEach(r),Ve.forEach(r),Y4=d(y),yt=s(y,"DIV",{class:!0});var _c=l(yt);f(An.$$.fragment,_c),Z4=d(_c),mr=s(_c,"P",{});var gc=l(mr);K4=o(gc,"Prediction/evaluation loop, shared by "),_h=s(gc,"CODE",{});var zU=l(_h);J4=o(zU,"Trainer.evaluate()"),zU.forEach(r),Q4=o(gc," and "),gh=s(gc,"CODE",{});var RU=l(gh);X4=o(RU,"Trainer.predict()"),RU.forEach(r),e5=o(gc,"."),gc.forEach(r),t5=d(_c),vh=s(_c,"P",{});var GU=l(vh);r5=o(GU,"Works both with or without labels."),GU.forEach(r),_c.forEach(r),a5=d(y),wt=s(y,"DIV",{class:!0});var vc=l(wt);f(On.$$.fragment,vc),o5=d(vc),hr=s(vc,"P",{});var bc=l(hr);n5=o(bc,"Perform an evaluation step on "),bh=s(bc,"CODE",{});var qU=l(bh);s5=o(qU,"model"),qU.forEach(r),l5=o(bc," using "),yh=s(bc,"CODE",{});var MU=l(yh);i5=o(MU,"inputs"),MU.forEach(r),d5=o(bc,"."),bc.forEach(r),c5=d(vc),wh=s(vc,"P",{});var jU=l(wh);p5=o(jU,"Subclass and override to inject custom behavior."),jU.forEach(r),vc.forEach(r),m5=d(y),ua=s(y,"DIV",{class:!0});var Vy=l(ua);f(Cn.$$.fragment,Vy),h5=d(Vy),et=s(Vy,"P",{});var go=l(et);f5=o(go,"Upload "),Eh=s(go,"EM",{});var BU=l(Eh);u5=o(BU,"self.model"),BU.forEach(r),_5=o(go," and "),$h=s(go,"EM",{});var VU=l($h);g5=o(VU,"self.tokenizer"),VU.forEach(r),v5=o(go," to the \u{1F917} model hub on the repo "),Th=s(go,"EM",{});var HU=l(Th);b5=o(HU,"self.args.hub_model_id"),HU.forEach(r),y5=o(go,"."),go.forEach(r),Vy.forEach(r),w5=d(y),_a=s(y,"DIV",{class:!0});var Hy=l(_a);f(xn.$$.fragment,Hy),E5=d(Hy),Sn=s(Hy,"P",{});var Wy=l(Sn);$5=o(Wy,"Remove a callback from the current list of "),kh=s(Wy,"CODE",{});var WU=l(kh);T5=o(WU,"TrainerCallback"),WU.forEach(r),k5=o(Wy,"."),Wy.forEach(r),Hy.forEach(r),D5=d(y),Ne=s(y,"DIV",{class:!0});var vo=l(Ne);f(Nn.$$.fragment,vo),P5=d(vo),In=s(vo,"P",{});var Yy=l(In);A5=o(Yy,"Save metrics into a json file for that split, e.g. "),Dh=s(Yy,"CODE",{});var YU=l(Dh);O5=o(YU,"train_results.json"),YU.forEach(r),C5=o(Yy,"."),Yy.forEach(r),x5=d(vo),Ph=s(vo,"P",{});var ZU=l(Ph);S5=o(ZU,"Under distributed environment this is done only for a process with rank 0."),ZU.forEach(r),N5=d(vo),Un=s(vo,"P",{});var Zy=l(Un);I5=o(Zy,"To understand the metrics please read the docstring of "),_i=s(Zy,"A",{href:!0});var KU=l(_i);U5=o(KU,"log_metrics()"),KU.forEach(r),L5=o(Zy,`. The only difference is that raw
unformatted numbers are saved in the current method.`),Zy.forEach(r),vo.forEach(r),F5=d(y),Et=s(y,"DIV",{class:!0});var yc=l(Et);f(Ln.$$.fragment,yc),z5=d(yc),Fn=s(yc,"P",{});var Ky=l(Fn);R5=o(Ky,"Will save the model, so you can reload it using "),Ah=s(Ky,"CODE",{});var JU=l(Ah);G5=o(JU,"from_pretrained()"),JU.forEach(r),q5=o(Ky,"."),Ky.forEach(r),M5=d(yc),Oh=s(yc,"P",{});var QU=l(Oh);j5=o(QU,"Will only save from the main process."),QU.forEach(r),yc.forEach(r),B5=d(y),$t=s(y,"DIV",{class:!0});var wc=l($t);f(zn.$$.fragment,wc),V5=d(wc),Ch=s(wc,"P",{});var XU=l(Ch);H5=o(XU,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),XU.forEach(r),W5=d(wc),xh=s(wc,"P",{});var eL=l(xh);Y5=o(eL,"Under distributed environment this is done only for a process with rank 0."),eL.forEach(r),wc.forEach(r),Z5=d(y),ga=s(y,"DIV",{class:!0});var Jy=l(ga);f(Rn.$$.fragment,Jy),K5=d(Jy),Gn=s(Jy,"P",{});var Qy=l(Gn);J5=o(Qy,"A helper wrapper that creates an appropriate context manager for "),Sh=s(Qy,"CODE",{});var tL=l(Sh);Q5=o(tL,"torchdynamo"),tL.forEach(r),X5=o(Qy,"."),Qy.forEach(r),Jy.forEach(r),e6=d(y),va=s(y,"DIV",{class:!0});var Xy=l(va);f(qn.$$.fragment,Xy),t6=d(Xy),Nh=s(Xy,"P",{});var rL=l(Nh);r6=o(rL,"Main training entry point."),rL.forEach(r),Xy.forEach(r),a6=d(y),Tt=s(y,"DIV",{class:!0});var Ec=l(Tt);f(Mn.$$.fragment,Ec),o6=d(Ec),Ih=s(Ec,"P",{});var aL=l(Ih);n6=o(aL,"Perform a training step on a batch of inputs."),aL.forEach(r),s6=d(Ec),Uh=s(Ec,"P",{});var oL=l(Uh);l6=o(oL,"Subclass and override to inject custom behavior."),oL.forEach(r),Ec.forEach(r),y.forEach(r),cv=d(t),fr=s(t,"H2",{class:!0});var e2=l(fr);ba=s(e2,"A",{id:!0,class:!0,href:!0});var nL=l(ba);Lh=s(nL,"SPAN",{});var sL=l(Lh);f(jn.$$.fragment,sL),sL.forEach(r),nL.forEach(r),i6=d(e2),Fh=s(e2,"SPAN",{});var lL=l(Fh);d6=o(lL,"Seq2SeqTrainer"),lL.forEach(r),e2.forEach(r),pv=d(t),tt=s(t,"DIV",{class:!0});var $c=l(tt);f(Bn.$$.fragment,$c),c6=d($c),Ie=s($c,"DIV",{class:!0});var bo=l(Ie);f(Vn.$$.fragment,bo),p6=d(bo),zh=s(bo,"P",{});var iL=l(zh);m6=o(iL,"Run evaluation and returns metrics."),iL.forEach(r),h6=d(bo),Hn=s(bo,"P",{});var t2=l(Hn);f6=o(t2,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Rh=s(t2,"CODE",{});var dL=l(Rh);u6=o(dL,"compute_metrics"),dL.forEach(r),_6=o(t2," argument)."),t2.forEach(r),g6=d(bo),Gh=s(bo,"P",{});var cL=l(Gh);v6=o(cL,"You can also subclass and override this method to inject custom behavior."),cL.forEach(r),bo.forEach(r),b6=d($c),Q=s($c,"DIV",{class:!0});var He=l(Q);f(Wn.$$.fragment,He),y6=d(He),qh=s(He,"P",{});var pL=l(qh);w6=o(pL,"Run prediction and returns predictions and potential metrics."),pL.forEach(r),E6=d(He),Yn=s(He,"P",{});var r2=l(Yn);$6=o(r2,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Mh=s(r2,"CODE",{});var mL=l(Mh);T6=o(mL,"evaluate()"),mL.forEach(r),k6=o(r2,"."),r2.forEach(r),D6=d(He),f(ya.$$.fragment,He),P6=d(He),Zn=s(He,"P",{});var a2=l(Zn);A6=o(a2,"Returns: "),jh=s(a2,"EM",{});var hL=l(jh);O6=o(hL,"NamedTuple"),hL.forEach(r),C6=o(a2," A namedtuple with the following keys:"),a2.forEach(r),x6=d(He),ur=s(He,"UL",{});var Tc=l(ur);_r=s(Tc,"LI",{});var kc=l(_r);S6=o(kc,"predictions ("),Bh=s(kc,"CODE",{});var fL=l(Bh);N6=o(fL,"np.ndarray"),fL.forEach(r),I6=o(kc,"): The predictions on "),Vh=s(kc,"CODE",{});var uL=l(Vh);U6=o(uL,"test_dataset"),uL.forEach(r),L6=o(kc,"."),kc.forEach(r),F6=d(Tc),gr=s(Tc,"LI",{});var Dc=l(gr);z6=o(Dc,"label_ids ("),Hh=s(Dc,"CODE",{});var _L=l(Hh);R6=o(_L,"np.ndarray"),_L.forEach(r),G6=o(Dc,", "),Wh=s(Dc,"EM",{});var gL=l(Wh);q6=o(gL,"optional"),gL.forEach(r),M6=o(Dc,"): The labels (if the dataset contained some)."),Dc.forEach(r),j6=d(Tc),vr=s(Tc,"LI",{});var Pc=l(vr);B6=o(Pc,"metrics ("),Yh=s(Pc,"CODE",{});var vL=l(Yh);V6=o(vL,"Dict[str, float]"),vL.forEach(r),H6=o(Pc,", "),Zh=s(Pc,"EM",{});var bL=l(Zh);W6=o(bL,"optional"),bL.forEach(r),Y6=o(Pc,`): The potential dictionary of metrics (if the dataset contained
labels).`),Pc.forEach(r),Tc.forEach(r),He.forEach(r),$c.forEach(r),mv=d(t),br=s(t,"H2",{class:!0});var o2=l(br);wa=s(o2,"A",{id:!0,class:!0,href:!0});var yL=l(wa);Kh=s(yL,"SPAN",{});var wL=l(Kh);f(Kn.$$.fragment,wL),wL.forEach(r),yL.forEach(r),Z6=d(o2),Jh=s(o2,"SPAN",{});var EL=l(Jh);K6=o(EL,"TrainingArguments"),EL.forEach(r),o2.forEach(r),hv=d(t),q=s(t,"DIV",{class:!0});var he=l(q);f(Jn.$$.fragment,he),J6=d(he),ie=s(he,"DIV",{class:!0});var Yt=l(ie);f(Qn.$$.fragment,Yt),Q6=d(Yt),Qh=s(Yt,"P",{});var $L=l(Qh);X6=o($L,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),$L.forEach(r),e8=d(Yt),yr=s(Yt,"P",{});var Ac=l(yr);t8=o(Ac,"For the main process the log level defaults to "),Xh=s(Ac,"CODE",{});var TL=l(Xh);r8=o(TL,"logging.INFO"),TL.forEach(r),a8=o(Ac," unless overridden by "),ef=s(Ac,"CODE",{});var kL=l(ef);o8=o(kL,"log_level"),kL.forEach(r),n8=o(Ac," argument."),Ac.forEach(r),s8=d(Yt),wr=s(Yt,"P",{});var Oc=l(wr);l8=o(Oc,"For the replica processes the log level defaults to "),tf=s(Oc,"CODE",{});var DL=l(tf);i8=o(DL,"logging.WARNING"),DL.forEach(r),d8=o(Oc," unless overridden by "),rf=s(Oc,"CODE",{});var PL=l(rf);c8=o(PL,"log_level_replica"),PL.forEach(r),p8=o(Oc,`
argument.`),Oc.forEach(r),m8=d(Yt),Xn=s(Yt,"P",{});var n2=l(Xn);h8=o(n2,"The choice between the main and replica process settings is made according to the return value of "),af=s(n2,"CODE",{});var AL=l(af);f8=o(AL,"should_log"),AL.forEach(r),u8=o(n2,"."),n2.forEach(r),Yt.forEach(r),_8=d(he),Ea=s(he,"DIV",{class:!0});var s2=l(Ea);f(es.$$.fragment,s2),g8=d(s2),of=s(s2,"P",{});var OL=l(of);v8=o(OL,"Get number of steps used for a linear warmup."),OL.forEach(r),s2.forEach(r),b8=d(he),kt=s(he,"DIV",{class:!0});var Cc=l(kt);f(ts.$$.fragment,Cc),y8=d(Cc),nf=s(Cc,"P",{});var CL=l(nf);w8=o(CL,`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),CL.forEach(r),E8=d(Cc),Er=s(Cc,"P",{});var xc=l(Er);$8=o(xc,"One such use is for "),sf=s(xc,"CODE",{});var xL=l(sf);T8=o(xL,"datasets"),xL.forEach(r),k8=o(xc,"\u2019s "),lf=s(xc,"CODE",{});var SL=l(lf);D8=o(SL,"map"),SL.forEach(r),P8=o(xc,` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),xc.forEach(r),Cc.forEach(r),A8=d(he),$a=s(he,"DIV",{class:!0});var l2=l($a);f(rs.$$.fragment,l2),O8=d(l2),as=s(l2,"P",{});var i2=l(as);C8=o(i2,"Serializes this instance while replace "),df=s(i2,"CODE",{});var NL=l(df);x8=o(NL,"Enum"),NL.forEach(r),S8=o(i2,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),i2.forEach(r),l2.forEach(r),N8=d(he),Ta=s(he,"DIV",{class:!0});var d2=l(Ta);f(os.$$.fragment,d2),I8=d(d2),cf=s(d2,"P",{});var IL=l(cf);U8=o(IL,"Serializes this instance to a JSON string."),IL.forEach(r),d2.forEach(r),L8=d(he),ka=s(he,"DIV",{class:!0});var c2=l(ka);f(ns.$$.fragment,c2),F8=d(c2),pf=s(c2,"P",{});var UL=l(pf);z8=o(UL,"Sanitized serialization to use with TensorBoard\u2019s hparams"),UL.forEach(r),c2.forEach(r),he.forEach(r),fv=d(t),$r=s(t,"H2",{class:!0});var p2=l($r);Da=s(p2,"A",{id:!0,class:!0,href:!0});var LL=l(Da);mf=s(LL,"SPAN",{});var FL=l(mf);f(ss.$$.fragment,FL),FL.forEach(r),LL.forEach(r),R8=d(p2),hf=s(p2,"SPAN",{});var zL=l(hf);G8=o(zL,"Seq2SeqTrainingArguments"),zL.forEach(r),p2.forEach(r),uv=d(t),Tr=s(t,"DIV",{class:!0});var m2=l(Tr);f(ls.$$.fragment,m2),q8=d(m2),ff=s(m2,"P",{});var RL=l(ff);M8=o(RL,"TrainingArguments(output_dir: str, overwrite_output_dir: bool = False, do_train: bool = False, do_eval: bool = False, do_predict: bool = False, evaluation_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018no\u2019, prediction_loss_only: bool = False, per_device_train_batch_size: int = 8, per_device_eval_batch_size: int = 8, per_gpu_train_batch_size: Union[int, NoneType] = None, per_gpu_eval_batch_size: Union[int, NoneType] = None, gradient_accumulation_steps: int = 1, eval_accumulation_steps: Union[int, NoneType] = None, eval_delay: Union[float, NoneType] = 0, learning_rate: float = 5e-05, weight_decay: float = 0.0, adam_beta1: float = 0.9, adam_beta2: float = 0.999, adam_epsilon: float = 1e-08, max_grad_norm: float = 1.0, num_train_epochs: float = 3.0, max_steps: int = -1, lr_scheduler_type: Union[transformers.trainer_utils.SchedulerType, str] = \u2018linear\u2019, warmup_ratio: float = 0.0, warmup_steps: int = 0, log_level: Union[str, NoneType] = \u2018passive\u2019, log_level_replica: Union[str, NoneType] = \u2018passive\u2019, log_on_each_node: bool = True, logging_dir: Union[str, NoneType] = None, logging_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, logging_first_step: bool = False, logging_steps: int = 500, logging_nan_inf_filter: bool = True, save_strategy: Union[transformers.trainer_utils.IntervalStrategy, str] = \u2018steps\u2019, save_steps: int = 500, save_total_limit: Union[int, NoneType] = None, save_on_each_node: bool = False, no_cuda: bool = False, use_mps_device: bool = False, seed: int = 42, data_seed: Union[int, NoneType] = None, jit_mode_eval: bool = False, use_ipex: bool = False, bf16: bool = False, fp16: bool = False, fp16_opt_level: str = \u2018O1\u2019, half_precision_backend: str = \u2018auto\u2019, bf16_full_eval: bool = False, fp16_full_eval: bool = False, tf32: Union[bool, NoneType] = None, local_rank: int = -1, xpu_backend: Union[str, NoneType] = None, tpu_num_cores: Union[int, NoneType] = None, tpu_metrics_debug: bool = False, debug: str = \u201D, dataloader_drop_last: bool = False, eval_steps: Union[int, NoneType] = None, dataloader_num_workers: int = 0, past_index: int = -1, run_name: Union[str, NoneType] = None, disable_tqdm: Union[bool, NoneType] = None, remove_unused_columns: Union[bool, NoneType] = True, label_names: Union[List[str], NoneType] = None, load_best_model_at_end: Union[bool, NoneType] = False, metric_for_best_model: Union[str, NoneType] = None, greater_is_better: Union[bool, NoneType] = None, ignore_data_skip: bool = False, sharded_ddp: str = \u201D, fsdp: str = \u201D, fsdp_min_num_params: int = 0, fsdp_transformer_layer_cls_to_wrap: Union[str, NoneType] = None, deepspeed: Union[str, NoneType] = None, label_smoothing_factor: float = 0.0, optim: Union[transformers.training_args.OptimizerNames, str] = \u2018adamw_hf\u2019, adafactor: bool = False, group_by_length: bool = False, length_column_name: Union[str, NoneType] = \u2018length\u2019, report_to: Union[List[str], NoneType] = None, ddp_find_unused_parameters: Union[bool, NoneType] = None, ddp_bucket_cap_mb: Union[int, NoneType] = None, dataloader_pin_memory: bool = True, skip_memory_metrics: bool = True, use_legacy_prediction_loop: bool = False, push_to_hub: bool = False, resume_from_checkpoint: Union[str, NoneType] = None, hub_model_id: Union[str, NoneType] = None, hub_strategy: Union[transformers.trainer_utils.HubStrategy, str] = \u2018every_save\u2019, hub_token: Union[str, NoneType] = None, hub_private_repo: bool = False, gradient_checkpointing: bool = False, include_inputs_for_metrics: bool = False, fp16_backend: str = \u2018auto\u2019, push_to_hub_model_id: Union[str, NoneType] = None, push_to_hub_organization: Union[str, NoneType] = None, push_to_hub_token: Union[str, NoneType] = None, mp_parameters: str = \u201D, auto_find_batch_size: bool = False, full_determinism: bool = False, torchdynamo: Union[str, NoneType] = None, ray_scope: Union[str, NoneType] = \u2018last\u2019)"),RL.forEach(r),m2.forEach(r),_v=d(t),kr=s(t,"H2",{class:!0});var h2=l(kr);Pa=s(h2,"A",{id:!0,class:!0,href:!0});var GL=l(Pa);uf=s(GL,"SPAN",{});var qL=l(uf);f(is.$$.fragment,qL),qL.forEach(r),GL.forEach(r),j8=d(h2),_f=s(h2,"SPAN",{});var ML=l(_f);B8=o(ML,"Checkpoints"),ML.forEach(r),h2.forEach(r),gv=d(t),de=s(t,"P",{});var Zt=l(de);V8=o(Zt,"By default, "),gi=s(Zt,"A",{href:!0});var jL=l(gi);H8=o(jL,"Trainer"),jL.forEach(r),W8=o(Zt," will save all checkpoints in the "),gf=s(Zt,"CODE",{});var BL=l(gf);Y8=o(BL,"output_dir"),BL.forEach(r),Z8=o(Zt,` you set in the
`),vi=s(Zt,"A",{href:!0});var VL=l(vi);K8=o(VL,"TrainingArguments"),VL.forEach(r),J8=o(Zt," you are using. Those will go in subfolder named "),vf=s(Zt,"CODE",{});var HL=l(vf);Q8=o(HL,"checkpoint-xxx"),HL.forEach(r),X8=o(Zt,` with xxx
being the step at which the training was at.`),Zt.forEach(r),vv=d(t),Aa=s(t,"P",{});var f2=l(Aa);e7=o(f2,"Resuming training from a checkpoint can be done when calling "),bi=s(f2,"A",{href:!0});var WL=l(bi);t7=o(WL,"Trainer.train()"),WL.forEach(r),r7=o(f2," with either:"),f2.forEach(r),bv=d(t),Oa=s(t,"UL",{});var u2=l(Oa);yi=s(u2,"LI",{});var QS=l(yi);bf=s(QS,"CODE",{});var YL=l(bf);a7=o(YL,"resume_from_checkpoint=True"),YL.forEach(r),o7=o(QS," which will resume training from the latest checkpoint"),QS.forEach(r),n7=d(u2),wi=s(u2,"LI",{});var XS=l(wi);yf=s(XS,"CODE",{});var ZL=l(yf);s7=o(ZL,"resume_from_checkpoint=checkpoint_dir"),ZL.forEach(r),l7=o(XS,` which will resume training from the specific checkpoint in the directory
passed.`),XS.forEach(r),u2.forEach(r),yv=d(t),Ue=s(t,"P",{});var yo=l(Ue);i7=o(yo,"In addition, you can easily save your checkpoints on the Model Hub when using "),wf=s(yo,"CODE",{});var KL=l(wf);d7=o(KL,"push_to_hub=True"),KL.forEach(r),c7=o(yo,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Ef=s(yo,"CODE",{});var JL=l(Ef);p7=o(JL,"hub-strategy"),JL.forEach(r),m7=o(yo," value of your "),Ei=s(yo,"A",{href:!0});var QL=l(Ei);h7=o(QL,"TrainingArguments"),QL.forEach(r),f7=o(yo," to either:"),yo.forEach(r),wv=d(t),Ca=s(t,"UL",{});var _2=l(Ca);xa=s(_2,"LI",{});var ev=l(xa);$f=s(ev,"CODE",{});var XL=l($f);u7=o(XL,'"checkpoint"'),XL.forEach(r),_7=o(ev,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Tf=s(ev,"CODE",{});var eF=l(Tf);g7=o(eF,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),eF.forEach(r),v7=o(ev,"."),ev.forEach(r),b7=d(_2),$i=s(_2,"LI",{});var eN=l($i);kf=s(eN,"CODE",{});var tF=l(kf);y7=o(tF,'"all_checkpoints"'),tF.forEach(r),w7=o(eN,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),eN.forEach(r),_2.forEach(r),Ev=d(t),Dr=s(t,"H2",{class:!0});var g2=l(Dr);Sa=s(g2,"A",{id:!0,class:!0,href:!0});var rF=l(Sa);Df=s(rF,"SPAN",{});var aF=l(Df);f(ds.$$.fragment,aF),aF.forEach(r),rF.forEach(r),E7=d(g2),Pf=s(g2,"SPAN",{});var oF=l(Pf);$7=o(oF,"Logging"),oF.forEach(r),g2.forEach(r),$v=d(t),Le=s(t,"P",{});var wo=l(Le);T7=o(wo,"By default "),Ti=s(wo,"A",{href:!0});var nF=l(Ti);k7=o(nF,"Trainer"),nF.forEach(r),D7=o(wo," will use "),Af=s(wo,"CODE",{});var sF=l(Af);P7=o(sF,"logging.INFO"),sF.forEach(r),A7=o(wo," for the main process and "),Of=s(wo,"CODE",{});var lF=l(Of);O7=o(lF,"logging.WARNING"),lF.forEach(r),C7=o(wo," for the replicas if any."),wo.forEach(r),Tv=d(t),Dt=s(t,"P",{});var Sc=l(Dt);x7=o(Sc,"These defaults can be overridden to use any of the 5 "),Cf=s(Sc,"CODE",{});var iF=l(Cf);S7=o(iF,"logging"),iF.forEach(r),N7=o(Sc," levels with "),ki=s(Sc,"A",{href:!0});var dF=l(ki);I7=o(dF,"TrainingArguments"),dF.forEach(r),U7=o(Sc,`\u2019s
arguments:`),Sc.forEach(r),kv=d(t),Na=s(t,"UL",{});var v2=l(Na);Di=s(v2,"LI",{});var tN=l(Di);xf=s(tN,"CODE",{});var cF=l(xf);L7=o(cF,"log_level"),cF.forEach(r),F7=o(tN," - for the main process"),tN.forEach(r),z7=d(v2),Pi=s(v2,"LI",{});var rN=l(Pi);Sf=s(rN,"CODE",{});var pF=l(Sf);R7=o(pF,"log_level_replica"),pF.forEach(r),G7=o(rN," - for the replicas"),rN.forEach(r),v2.forEach(r),Dv=d(t),Fe=s(t,"P",{});var Eo=l(Fe);q7=o(Eo,"Further, if "),Ai=s(Eo,"A",{href:!0});var mF=l(Ai);M7=o(mF,"TrainingArguments"),mF.forEach(r),j7=o(Eo,"\u2019s "),Nf=s(Eo,"CODE",{});var hF=l(Nf);B7=o(hF,"log_on_each_node"),hF.forEach(r),V7=o(Eo," is set to "),If=s(Eo,"CODE",{});var fF=l(If);H7=o(fF,"False"),fF.forEach(r),W7=o(Eo,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Eo.forEach(r),Pv=d(t),X=s(t,"P",{});var We=l(X);Y7=o(We,"Note that "),Oi=s(We,"A",{href:!0});var uF=l(Oi);Z7=o(uF,"Trainer"),uF.forEach(r),K7=o(We," is going to set "),Uf=s(We,"CODE",{});var _F=l(Uf);J7=o(_F,"transformers"),_F.forEach(r),Q7=o(We,`\u2019s log level separately for each node in its
`),Lf=s(We,"CODE",{});var gF=l(Lf);X7=o(gF,"Trainer.__init__()"),gF.forEach(r),ek=o(We,`. So you may want to set this sooner (see the next example) if you tap into other
`),Ff=s(We,"CODE",{});var vF=l(Ff);tk=o(vF,"transformers"),vF.forEach(r),rk=o(We," functionality before creating the "),Ci=s(We,"A",{href:!0});var bF=l(Ci);ak=o(bF,"Trainer"),bF.forEach(r),ok=o(We," object."),We.forEach(r),Av=d(t),xi=s(t,"P",{});var yF=l(xi);nk=o(yF,"Here is an example of how this can be used in an application:"),yF.forEach(r),Ov=d(t),f(cs.$$.fragment,t),Cv=d(t),Si=s(t,"P",{});var wF=l(Si);sk=o(wF,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),wF.forEach(r),xv=d(t),f(ps.$$.fragment,t),Sv=d(t),Ni=s(t,"P",{});var EF=l(Ni);lk=o(EF,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),EF.forEach(r),Nv=d(t),f(ms.$$.fragment,t),Iv=d(t),Ii=s(t,"P",{});var $F=l(Ii);ik=o($F,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),$F.forEach(r),Uv=d(t),Ui=s(t,"P",{});var TF=l(Ui);dk=o(TF,"If you need your application to be as quiet as possible you could do:"),TF.forEach(r),Lv=d(t),f(hs.$$.fragment,t),Fv=d(t),Ia=s(t,"P",{});var b2=l(Ia);ck=o(b2,"(add "),zf=s(b2,"CODE",{});var kF=l(zf);pk=o(kF,"--log_on_each_node 0"),kF.forEach(r),mk=o(b2," if on multi-node environment)"),b2.forEach(r),zv=d(t),Pr=s(t,"H2",{class:!0});var y2=l(Pr);Ua=s(y2,"A",{id:!0,class:!0,href:!0});var DF=l(Ua);Rf=s(DF,"SPAN",{});var PF=l(Rf);f(fs.$$.fragment,PF),PF.forEach(r),DF.forEach(r),hk=d(y2),Gf=s(y2,"SPAN",{});var AF=l(Gf);fk=o(AF,"Randomness"),AF.forEach(r),y2.forEach(r),Rv=d(t),ce=s(t,"P",{});var Kt=l(ce);uk=o(Kt,"When resuming from a checkpoint generated by "),Li=s(Kt,"A",{href:!0});var OF=l(Li);_k=o(OF,"Trainer"),OF.forEach(r),gk=o(Kt,` all efforts are made to restore the
`),qf=s(Kt,"EM",{});var CF=l(qf);vk=o(CF,"python"),CF.forEach(r),bk=o(Kt,", "),Mf=s(Kt,"EM",{});var xF=l(Mf);yk=o(xF,"numpy"),xF.forEach(r),wk=o(Kt," and "),jf=s(Kt,"EM",{});var SF=l(jf);Ek=o(SF,"pytorch"),SF.forEach(r),$k=o(Kt,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Kt.forEach(r),Gv=d(t),Pt=s(t,"P",{});var Nc=l(Pt);Tk=o(Nc,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),us=s(Nc,"A",{href:!0,rel:!0});var NF=l(us);kk=o(NF,"Controlling sources of randomness"),NF.forEach(r),Dk=o(Nc,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),Bf=s(Nc,"CODE",{});var IF=l(Bf);Pk=o(IF,"torch.backends.cudnn.deterministic"),IF.forEach(r),Ak=o(Nc,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Nc.forEach(r),qv=d(t),Ar=s(t,"H2",{class:!0});var w2=l(Ar);La=s(w2,"A",{id:!0,class:!0,href:!0});var UF=l(La);Vf=s(UF,"SPAN",{});var LF=l(Vf);f(_s.$$.fragment,LF),LF.forEach(r),UF.forEach(r),Ok=d(w2),Hf=s(w2,"SPAN",{});var FF=l(Hf);Ck=o(FF,"Specific GPUs Selection"),FF.forEach(r),w2.forEach(r),Mv=d(t),Fi=s(t,"P",{});var zF=l(Fi);xk=o(zF,"Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),zF.forEach(r),jv=d(t),Fa=s(t,"P",{});var E2=l(Fa);Sk=o(E2,"When using "),gs=s(E2,"A",{href:!0,rel:!0});var RF=l(gs);Wf=s(RF,"CODE",{});var GF=l(Wf);Nk=o(GF,"DistributedDataParallel"),GF.forEach(r),RF.forEach(r),Ik=o(E2," to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),E2.forEach(r),Bv=d(t),f(vs.$$.fragment,t),Vv=d(t),At=s(t,"P",{});var Ic=l(At);Uk=o(Ic,"if you have either "),bs=s(Ic,"A",{href:!0,rel:!0});var qF=l(bs);Yf=s(qF,"CODE",{});var MF=l(Yf);Lk=o(MF,"accelerate"),MF.forEach(r),qF.forEach(r),Fk=o(Ic," or "),ys=s(Ic,"A",{href:!0,rel:!0});var jF=l(ys);Zf=s(jF,"CODE",{});var BF=l(Zf);zk=o(BF,"deepspeed"),BF.forEach(r),jF.forEach(r),Rk=o(Ic," installed you can also accomplish the same by using one of:"),Ic.forEach(r),Hv=d(t),f(ws.$$.fragment,t),Wv=d(t),f(Es.$$.fragment,t),Yv=d(t),za=s(t,"P",{});var $2=l(za);Gk=o($2,"You don\u2019t need to use the Accelerate or "),zi=s($2,"A",{href:!0});var VF=l(zi);qk=o(VF,"the Deepspeed integration"),VF.forEach(r),Mk=o($2," features to use these launchers."),$2.forEach(r),Zv=d(t),Ri=s(t,"P",{});var HF=l(Ri);jk=o(HF,"Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),HF.forEach(r),Kv=d(t),Gi=s(t,"P",{});var WF=l(Gi);Bk=o(WF,"The following environment variables help you control which GPUs to use and their order."),WF.forEach(r),Jv=d(t),qi=s(t,"P",{});var YF=l(qi);Kf=s(YF,"STRONG",{});var ZF=l(Kf);Jf=s(ZF,"CODE",{});var KF=l(Jf);Vk=o(KF,"CUDA_VISIBLE_DEVICES"),KF.forEach(r),ZF.forEach(r),YF.forEach(r),Qv=d(t),Ra=s(t,"P",{});var T2=l(Ra);Hk=o(T2,"If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),Qf=s(T2,"CODE",{});var JF=l(Qf);Wk=o(JF,"CUDA_VISIBLE_DEVICES"),JF.forEach(r),Yk=o(T2," to a list of the GPUs to be used."),T2.forEach(r),Xv=d(t),Mi=s(t,"P",{});var QF=l(Mi);Zk=o(QF,"For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),QF.forEach(r),e1=d(t),f($s.$$.fragment,t),t1=d(t),Ot=s(t,"P",{});var Uc=l(Ot);Kk=o(Uc,"So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),Xf=s(Uc,"CODE",{});var XF=l(Xf);Jk=o(XF,"cuda:0"),XF.forEach(r),Qk=o(Uc," and "),eu=s(Uc,"CODE",{});var ez=l(eu);Xk=o(ez,"cuda:1"),ez.forEach(r),eD=o(Uc," correspondingly."),Uc.forEach(r),r1=d(t),ji=s(t,"P",{});var tz=l(ji);tD=o(tz,"You can even change their order:"),tz.forEach(r),a1=d(t),f(Ts.$$.fragment,t),o1=d(t),Ct=s(t,"P",{});var Lc=l(Ct);rD=o(Lc,"Here your physical GPUs 0 and 2 are mapped to "),tu=s(Lc,"CODE",{});var rz=l(tu);aD=o(rz,"cuda:1"),rz.forEach(r),oD=o(Lc," and "),ru=s(Lc,"CODE",{});var az=l(ru);nD=o(az,"cuda:0"),az.forEach(r),sD=o(Lc," correspondingly."),Lc.forEach(r),n1=d(t),xt=s(t,"P",{});var Fc=l(xt);lD=o(Fc,"The above examples were all for "),au=s(Fc,"CODE",{});var oz=l(au);iD=o(oz,"DistributedDataParallel"),oz.forEach(r),dD=o(Fc," use pattern, but the same method works for "),ks=s(Fc,"A",{href:!0,rel:!0});var nz=l(ks);ou=s(nz,"CODE",{});var sz=l(ou);cD=o(sz,"DataParallel"),sz.forEach(r),nz.forEach(r),pD=o(Fc," as well:"),Fc.forEach(r),s1=d(t),f(Ds.$$.fragment,t),l1=d(t),Bi=s(t,"P",{});var lz=l(Bi);mD=o(lz,"To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),lz.forEach(r),i1=d(t),f(Ps.$$.fragment,t),d1=d(t),Vi=s(t,"P",{});var iz=l(Vi);hD=o(iz,"As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),iz.forEach(r),c1=d(t),f(As.$$.fragment,t),p1=d(t),Hi=s(t,"P",{});var dz=l(Hi);fD=o(dz,"but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),dz.forEach(r),m1=d(t),Wi=s(t,"P",{});var cz=l(Wi);nu=s(cz,"STRONG",{});var pz=l(nu);su=s(pz,"CODE",{});var mz=l(su);uD=o(mz,"CUDA_DEVICE_ORDER"),mz.forEach(r),pz.forEach(r),cz.forEach(r),h1=d(t),Ga=s(t,"P",{});var k2=l(Ga);_D=o(k2,"There is an additional environment variable "),lu=s(k2,"CODE",{});var hz=l(lu);gD=o(hz,"CUDA_DEVICE_ORDER"),hz.forEach(r),vD=o(k2," that controls how the physical devices are ordered. The two choices are:"),k2.forEach(r),f1=d(t),Yi=s(t,"OL",{});var fz=l(Yi);Os=s(fz,"LI",{});var D2=l(Os);bD=o(D2,"ordered by PCIe bus IDs (matches "),iu=s(D2,"CODE",{});var uz=l(iu);yD=o(uz,"nvidia-smi"),uz.forEach(r),wD=o(D2,"\u2019s order) - this is the default."),D2.forEach(r),fz.forEach(r),u1=d(t),f(Cs.$$.fragment,t),_1=d(t),xs=s(t,"OL",{start:!0});var _z=l(xs);du=s(_z,"LI",{});var gz=l(du);ED=o(gz,"ordered by GPU compute capabilities"),gz.forEach(r),_z.forEach(r),g1=d(t),f(Ss.$$.fragment,t),v1=d(t),St=s(t,"P",{});var zc=l(St);$D=o(zc,"Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),cu=s(zc,"CODE",{});var vz=l(cu);TD=o(vz,"CUDA_DEVICE_ORDER=FASTEST_FIRST"),vz.forEach(r),kD=o(zc," will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),pu=s(zc,"CODE",{});var bz=l(pu);DD=o(bz,"nvidia-smi"),bz.forEach(r),PD=o(zc," will still report them in the PCIe order."),zc.forEach(r),b1=d(t),Zi=s(t,"P",{});var yz=l(Zi);AD=o(yz,"The other solution to swapping the order is to use:"),yz.forEach(r),y1=d(t),f(Ns.$$.fragment,t),w1=d(t),Ki=s(t,"P",{});var wz=l(Ki);OD=o(wz,"In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),wz.forEach(r),E1=d(t),qa=s(t,"P",{});var P2=l(qa);CD=o(P2,"Also if you do set this environment variable it\u2019s the best to set it in your "),mu=s(P2,"CODE",{});var Ez=l(mu);xD=o(Ez,"~/.bashrc"),Ez.forEach(r),SD=o(P2," file or some other startup config file and forget about it."),P2.forEach(r),$1=d(t),Or=s(t,"H2",{class:!0});var A2=l(Or);Ma=s(A2,"A",{id:!0,class:!0,href:!0});var $z=l(Ma);hu=s($z,"SPAN",{});var Tz=l(hu);f(Is.$$.fragment,Tz),Tz.forEach(r),$z.forEach(r),ND=d(A2),fu=s(A2,"SPAN",{});var kz=l(fu);ID=o(kz,"Trainer Integrations"),kz.forEach(r),A2.forEach(r),T1=d(t),ja=s(t,"P",{});var O2=l(ja);UD=o(O2,"The "),Ji=s(O2,"A",{href:!0});var Dz=l(Ji);LD=o(Dz,"Trainer"),Dz.forEach(r),FD=o(O2,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),O2.forEach(r),k1=d(t),pe=s(t,"P",{});var Jt=l(pe);zD=o(Jt,"Currently it supports third party solutions, "),Us=s(Jt,"A",{href:!0,rel:!0});var Pz=l(Us);RD=o(Pz,"DeepSpeed"),Pz.forEach(r),GD=o(Jt,", "),Ls=s(Jt,"A",{href:!0,rel:!0});var Az=l(Ls);qD=o(Az,"PyTorch FSDP"),Az.forEach(r),MD=o(Jt," and "),Fs=s(Jt,"A",{href:!0,rel:!0});var Oz=l(Fs);jD=o(Oz,"FairScale"),Oz.forEach(r),BD=o(Jt,", which implement parts of the paper "),zs=s(Jt,"A",{href:!0,rel:!0});var Cz=l(zs);VD=o(Cz,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),Cz.forEach(r),HD=o(Jt,"."),Jt.forEach(r),D1=d(t),Ba=s(t,"P",{});var C2=l(Ba);WD=o(C2,"This provided support is new and experimental as of this writing. While the support for DeepSpeed and PyTorch FSDP is active and we welcome issues around it, we don\u2019t support the FairScale integration anymore since it has been integrated in PyTorch main (see the "),Qi=s(C2,"A",{href:!0});var xz=l(Qi);YD=o(xz,"PyTorch FSDP integration"),xz.forEach(r),ZD=o(C2,")"),C2.forEach(r),P1=d(t),Xi=s(t,"A",{id:!0}),l(Xi).forEach(r),A1=d(t),Cr=s(t,"H3",{class:!0});var x2=l(Cr);Va=s(x2,"A",{id:!0,class:!0,href:!0});var Sz=l(Va);uu=s(Sz,"SPAN",{});var Nz=l(uu);f(Rs.$$.fragment,Nz),Nz.forEach(r),Sz.forEach(r),KD=d(x2),_u=s(x2,"SPAN",{});var Iz=l(_u);JD=o(Iz,"CUDA Extension Installation Notes"),Iz.forEach(r),x2.forEach(r),O1=d(t),ed=s(t,"P",{});var Uz=l(ed);QD=o(Uz,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),Uz.forEach(r),C1=d(t),Nt=s(t,"P",{});var Rc=l(Nt);XD=o(Rc,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),Gs=s(Rc,"A",{href:!0,rel:!0});var Lz=l(Gs);e9=o(Lz,"FairScale"),Lz.forEach(r),t9=o(Rc," and "),qs=s(Rc,"A",{href:!0,rel:!0});var Fz=l(qs);r9=o(Fz,"Deepspeed"),Fz.forEach(r),a9=o(Rc,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),Rc.forEach(r),x1=d(t),td=s(t,"P",{});var zz=l(td);o9=o(zz,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),zz.forEach(r),S1=d(t),f(Ms.$$.fragment,t),N1=d(t),rd=s(t,"P",{});var Rz=l(rd);n9=o(Rz,"please, read the following notes first."),Rz.forEach(r),I1=d(t),It=s(t,"P",{});var Gc=l(It);s9=o(Gc,"In these notes we give examples for what to do when "),gu=s(Gc,"CODE",{});var Gz=l(gu);l9=o(Gz,"pytorch"),Gz.forEach(r),i9=o(Gc," has been built with CUDA "),vu=s(Gc,"CODE",{});var qz=l(vu);d9=o(qz,"10.2"),qz.forEach(r),c9=o(Gc,`. If your situation is
different remember to adjust the version number to the one you are after.`),Gc.forEach(r),U1=d(t),xr=s(t,"H4",{class:!0});var S2=l(xr);Ha=s(S2,"A",{id:!0,class:!0,href:!0});var Mz=l(Ha);bu=s(Mz,"SPAN",{});var jz=l(bu);f(js.$$.fragment,jz),jz.forEach(r),Mz.forEach(r),p9=d(S2),yu=s(S2,"SPAN",{});var Bz=l(yu);m9=o(Bz,"Possible problem #1"),Bz.forEach(r),S2.forEach(r),L1=d(t),ad=s(t,"P",{});var Vz=l(ad);h9=o(Vz,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),Vz.forEach(r),F1=d(t),ze=s(t,"P",{});var $o=l(ze);f9=o($o,"For example, if you installed "),wu=s($o,"CODE",{});var Hz=l(wu);u9=o(Hz,"pytorch"),Hz.forEach(r),_9=o($o," with "),Eu=s($o,"CODE",{});var Wz=l(Eu);g9=o(Wz,"cudatoolkit==10.2"),Wz.forEach(r),v9=o($o,` in the Python environment, you also need to have
CUDA `),$u=s($o,"CODE",{});var Yz=l($u);b9=o(Yz,"10.2"),Yz.forEach(r),y9=o($o," installed system-wide."),$o.forEach(r),z1=d(t),Ut=s(t,"P",{});var qc=l(Ut);w9=o(qc,"The exact location may vary from system to system, but "),Tu=s(qc,"CODE",{});var Zz=l(Tu);E9=o(Zz,"/usr/local/cuda-10.2"),Zz.forEach(r),$9=o(qc,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),ku=s(qc,"CODE",{});var Kz=l(ku);T9=o(Kz,"PATH"),Kz.forEach(r),k9=o(qc,` environment variable, one can find the
installation location by doing:`),qc.forEach(r),R1=d(t),f(Bs.$$.fragment,t),G1=d(t),Wa=s(t,"P",{});var N2=l(Wa);D9=o(N2,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),Vs=s(N2,"A",{href:!0,rel:!0});var Jz=l(Vs);P9=o(Jz,"ubuntu cuda 10.2 install"),Jz.forEach(r),A9=o(N2,"."),N2.forEach(r),q1=d(t),Sr=s(t,"H4",{class:!0});var I2=l(Sr);Ya=s(I2,"A",{id:!0,class:!0,href:!0});var Qz=l(Ya);Du=s(Qz,"SPAN",{});var Xz=l(Du);f(Hs.$$.fragment,Xz),Xz.forEach(r),Qz.forEach(r),O9=d(I2),Pu=s(I2,"SPAN",{});var eR=l(Pu);C9=o(eR,"Possible problem #2"),eR.forEach(r),I2.forEach(r),M1=d(t),od=s(t,"P",{});var tR=l(od);x9=o(tR,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),tR.forEach(r),j1=d(t),f(Ws.$$.fragment,t),B1=d(t),Lt=s(t,"P",{});var Mc=l(Lt);S9=o(Mc,"Now, in this situation you need to make sure that your "),Au=s(Mc,"CODE",{});var rR=l(Au);N9=o(rR,"PATH"),rR.forEach(r),I9=o(Mc," and "),Ou=s(Mc,"CODE",{});var aR=l(Ou);U9=o(aR,"LD_LIBRARY_PATH"),aR.forEach(r),L9=o(Mc,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Mc.forEach(r),V1=d(t),nd=s(t,"P",{});var oR=l(nd);F9=o(oR,"First, you may look at their contents:"),oR.forEach(r),H1=d(t),f(Ys.$$.fragment,t),W1=d(t),sd=s(t,"P",{});var nR=l(sd);z9=o(nR,"so you get an idea of what is inside."),nR.forEach(r),Y1=d(t),Za=s(t,"P",{});var U2=l(Za);R9=o(U2,"It\u2019s possible that "),Cu=s(U2,"CODE",{});var sR=l(Cu);G9=o(sR,"LD_LIBRARY_PATH"),sR.forEach(r),q9=o(U2," is empty."),U2.forEach(r),Z1=d(t),rt=s(t,"P",{});var Bl=l(rt);xu=s(Bl,"CODE",{});var lR=l(xu);M9=o(lR,"PATH"),lR.forEach(r),j9=o(Bl," lists the locations of where executables can be found and "),Su=s(Bl,"CODE",{});var iR=l(Su);B9=o(iR,"LD_LIBRARY_PATH"),iR.forEach(r),V9=o(Bl,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Nu=s(Bl,"CODE",{});var dR=l(Nu);H9=o(dR,":"),dR.forEach(r),W9=o(Bl,` is used to separate multiple
entries.`),Bl.forEach(r),K1=d(t),ld=s(t,"P",{});var cR=l(ld);Y9=o(cR,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),cR.forEach(r),J1=d(t),f(Zs.$$.fragment,t),Q1=d(t),id=s(t,"P",{});var pR=l(id);Z9=o(pR,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),pR.forEach(r),X1=d(t),Re=s(t,"P",{});var To=l(Re);K9=o(To,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),Iu=s(To,"CODE",{});var mR=l(Iu);J9=o(mR,"lib64"),mR.forEach(r),Q9=o(To," sub-directory is where the various CUDA "),Uu=s(To,"CODE",{});var hR=l(Uu);X9=o(hR,".so"),hR.forEach(r),eP=o(To," objects, like "),Lu=s(To,"CODE",{});var fR=l(Lu);tP=o(fR,"libcudart.so"),fR.forEach(r),rP=o(To,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),To.forEach(r),eb=d(t),Nr=s(t,"H4",{class:!0});var L2=l(Nr);Ka=s(L2,"A",{id:!0,class:!0,href:!0});var uR=l(Ka);Fu=s(uR,"SPAN",{});var _R=l(Fu);f(Ks.$$.fragment,_R),_R.forEach(r),uR.forEach(r),aP=d(L2),zu=s(L2,"SPAN",{});var gR=l(zu);oP=o(gR,"Possible problem #3"),gR.forEach(r),L2.forEach(r),tb=d(t),Ft=s(t,"P",{});var jc=l(Ft);nP=o(jc,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),Ru=s(jc,"CODE",{});var vR=l(Ru);sP=o(vR,"gcc-9"),vR.forEach(r),lP=o(jc,` but it wants
`),Gu=s(jc,"CODE",{});var bR=l(Gu);iP=o(bR,"gcc-7"),bR.forEach(r),dP=o(jc,"."),jc.forEach(r),rb=d(t),dd=s(t,"P",{});var yR=l(dd);cP=o(yR,"There are various ways to go about it."),yR.forEach(r),ab=d(t),cd=s(t,"P",{});var wR=l(cd);pP=o(wR,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),wR.forEach(r),ob=d(t),Ja=s(t,"P",{});var F2=l(Ja);mP=o(F2,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),qu=s(F2,"CODE",{});var ER=l(qu);hP=o(ER,"gcc-7"),ER.forEach(r),fP=o(F2,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),F2.forEach(r),nb=d(t),f(Js.$$.fragment,t),sb=d(t),j=s(t,"P",{});var fe=l(j);uP=o(fe,"Here, we are making a symlink to "),Mu=s(fe,"CODE",{});var $R=l(Mu);_P=o($R,"gcc-7"),$R.forEach(r),gP=o(fe," from "),ju=s(fe,"CODE",{});var TR=l(ju);vP=o(TR,"/usr/local/cuda-10.2/bin/gcc"),TR.forEach(r),bP=o(fe,` and since
`),Bu=s(fe,"CODE",{});var kR=l(Bu);yP=o(kR,"/usr/local/cuda-10.2/bin/"),kR.forEach(r),wP=o(fe," should be in the "),Vu=s(fe,"CODE",{});var DR=l(Vu);EP=o(DR,"PATH"),DR.forEach(r),$P=o(fe,` environment variable (see the previous problem\u2019s solution), it
should find `),Hu=s(fe,"CODE",{});var PR=l(Hu);TP=o(PR,"gcc-7"),PR.forEach(r),kP=o(fe," (and "),Wu=s(fe,"CODE",{});var AR=l(Wu);DP=o(AR,"g++7"),AR.forEach(r),PP=o(fe,") and then the build will succeed."),fe.forEach(r),lb=d(t),pd=s(t,"P",{});var OR=l(pd);AP=o(OR,"As always make sure to edit the paths in the example to match your situation."),OR.forEach(r),ib=d(t),Ir=s(t,"H3",{class:!0});var z2=l(Ir);Qa=s(z2,"A",{id:!0,class:!0,href:!0});var CR=l(Qa);Yu=s(CR,"SPAN",{});var xR=l(Yu);f(Qs.$$.fragment,xR),xR.forEach(r),CR.forEach(r),OP=d(z2),Zu=s(z2,"SPAN",{});var SR=l(Zu);CP=o(SR,"FairScale"),SR.forEach(r),z2.forEach(r),db=d(t),f(Xa.$$.fragment,t),cb=d(t),Ge=s(t,"P",{});var ko=l(Ge);xP=o(ko,"By integrating "),Xs=s(ko,"A",{href:!0,rel:!0});var NR=l(Xs);SP=o(NR,"FairScale"),NR.forEach(r),NP=o(ko," the "),md=s(ko,"A",{href:!0});var IR=l(md);IP=o(IR,"Trainer"),IR.forEach(r),UP=o(ko,`
provides support for the following features from `),el=s(ko,"A",{href:!0,rel:!0});var UR=l(el);LP=o(UR,"the ZeRO paper"),UR.forEach(r),FP=o(ko,":"),ko.forEach(r),pb=d(t),qe=s(t,"OL",{});var Do=l(qe);Ku=s(Do,"LI",{});var LR=l(Ku);zP=o(LR,"Optimizer State Sharding"),LR.forEach(r),RP=d(Do),Ju=s(Do,"LI",{});var FR=l(Ju);GP=o(FR,"Gradient Sharding"),FR.forEach(r),qP=d(Do),Qu=s(Do,"LI",{});var zR=l(Qu);MP=o(zR,"Model Parameters Sharding (new and very experimental)"),zR.forEach(r),jP=d(Do),Xu=s(Do,"LI",{});var RR=l(Xu);BP=o(RR,"CPU offload (new and very experimental)"),RR.forEach(r),Do.forEach(r),mb=d(t),hd=s(t,"P",{});var GR=l(hd);VP=o(GR,"You will need at least two GPUs to use this feature."),GR.forEach(r),hb=d(t),tl=s(t,"P",{});var aN=l(tl);e_=s(aN,"STRONG",{});var qR=l(e_);HP=o(qR,"Installation"),qR.forEach(r),WP=o(aN,":"),aN.forEach(r),fb=d(t),fd=s(t,"P",{});var MR=l(fd);YP=o(MR,"Install the library via pypi:"),MR.forEach(r),ub=d(t),f(rl.$$.fragment,t),_b=d(t),zt=s(t,"P",{});var Bc=l(zt);ZP=o(Bc,"or via "),t_=s(Bc,"CODE",{});var jR=l(t_);KP=o(jR,"transformers"),jR.forEach(r),JP=o(Bc,"\u2019 "),r_=s(Bc,"CODE",{});var BR=l(r_);QP=o(BR,"extras"),BR.forEach(r),XP=o(Bc,":"),Bc.forEach(r),gb=d(t),f(al.$$.fragment,t),vb=d(t),Rt=s(t,"P",{});var Vc=l(Rt);eA=o(Vc,"(available starting from "),a_=s(Vc,"CODE",{});var VR=l(a_);tA=o(VR,"transformers==4.6.0"),VR.forEach(r),rA=o(Vc,") or find more details on "),ol=s(Vc,"A",{href:!0,rel:!0});var HR=l(ol);aA=o(HR,"the FairScale\u2019s GitHub page"),HR.forEach(r),oA=o(Vc,"."),Vc.forEach(r),bb=d(t),eo=s(t,"P",{});var R2=l(eo);nA=o(R2,"If you\u2019re still struggling with the build, first make sure to read "),ud=s(R2,"A",{href:!0});var WR=l(ud);sA=o(WR,"CUDA Extension Installation Notes"),WR.forEach(r),lA=o(R2,"."),R2.forEach(r),yb=d(t),_d=s(t,"P",{});var YR=l(_d);iA=o(YR,"If it\u2019s still not resolved the build issue, here are a few more ideas."),YR.forEach(r),wb=d(t),nl=s(t,"P",{});var oN=l(nl);o_=s(oN,"CODE",{});var ZR=l(o_);dA=o(ZR,"fairscale"),ZR.forEach(r),cA=o(oN,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),oN.forEach(r),Eb=d(t),f(sl.$$.fragment,t),$b=d(t),gd=s(t,"P",{});var KR=l(gd);pA=o(KR,"or:"),KR.forEach(r),Tb=d(t),f(ll.$$.fragment,t),kb=d(t),il=s(t,"P",{});var nN=l(il);n_=s(nN,"CODE",{});var JR=l(n_);mA=o(JR,"fairscale"),JR.forEach(r),hA=o(nN," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),nN.forEach(r),Db=d(t),f(dl.$$.fragment,t),Pb=d(t),vd=s(t,"P",{});var QR=l(vd);fA=o(QR,"or:"),QR.forEach(r),Ab=d(t),f(cl.$$.fragment,t),Ob=d(t),bd=s(t,"P",{});var XR=l(bd);uA=o(XR,"Of course, adjust the urls to match the cuda version you use."),XR.forEach(r),Cb=d(t),to=s(t,"P",{});var G2=l(to);_A=o(G2,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),pl=s(G2,"A",{href:!0,rel:!0});var eG=l(pl);gA=o(eG,"FairScale"),eG.forEach(r),vA=o(G2,"."),G2.forEach(r),xb=d(t),ml=s(t,"P",{});var sN=l(ml);s_=s(sN,"STRONG",{});var tG=l(s_);bA=o(tG,"Usage"),tG.forEach(r),yA=o(sN,":"),sN.forEach(r),Sb=d(t),Gt=s(t,"P",{});var Hc=l(Gt);wA=o(Hc,"To use the first version of Sharded data-parallelism, add "),l_=s(Hc,"CODE",{});var rG=l(l_);EA=o(rG,"--sharded_ddp simple"),rG.forEach(r),$A=o(Hc,` to the command line arguments, and
make sure you have added the distributed launcher `),i_=s(Hc,"CODE",{});var aG=l(i_);TA=o(aG,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),aG.forEach(r),kA=o(Hc," if you haven\u2019t been using it already."),Hc.forEach(r),Nb=d(t),ro=s(t,"P",{});var q2=l(ro);DA=o(q2,"For example here is how you could use it for "),d_=s(q2,"CODE",{});var oG=l(d_);PA=o(oG,"run_translation.py"),oG.forEach(r),AA=o(q2," with 2 GPUs:"),q2.forEach(r),Ib=d(t),f(hl.$$.fragment,t),Ub=d(t),yd=s(t,"P",{});var nG=l(yd);OA=o(nG,"Notes:"),nG.forEach(r),Lb=d(t),Me=s(t,"UL",{});var Po=l(Me);c_=s(Po,"LI",{});var sG=l(c_);CA=o(sG,"This feature requires distributed training (so multiple GPUs)."),sG.forEach(r),xA=d(Po),p_=s(Po,"LI",{});var lG=l(p_);SA=o(lG,"It is not implemented for TPUs."),lG.forEach(r),NA=d(Po),fl=s(Po,"LI",{});var M2=l(fl);IA=o(M2,"It works with "),m_=s(M2,"CODE",{});var iG=l(m_);UA=o(iG,"--fp16"),iG.forEach(r),LA=o(M2," too, to make things even faster."),M2.forEach(r),FA=d(Po),ul=s(Po,"LI",{});var j2=l(ul);zA=o(j2,"One of the main benefits of enabling "),h_=s(j2,"CODE",{});var dG=l(h_);RA=o(dG,"--sharded_ddp simple"),dG.forEach(r),GA=o(j2,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),j2.forEach(r),Po.forEach(r),Fb=d(t),_l=s(t,"OL",{start:!0});var cG=l(_l);at=s(cG,"LI",{});var Ao=l(at);qA=o(Ao,"To use the second version of Sharded data-parallelism, add "),f_=s(Ao,"CODE",{});var pG=l(f_);MA=o(pG,"--sharded_ddp zero_dp_2"),pG.forEach(r),jA=o(Ao," or "),u_=s(Ao,"CODE",{});var mG=l(u_);BA=o(mG,"--sharded_ddp zero_dp_3"),mG.forEach(r),VA=o(Ao," to the command line arguments, and make sure you have added the distributed launcher "),__=s(Ao,"CODE",{});var hG=l(__);HA=o(hG,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),hG.forEach(r),WA=o(Ao," if you haven\u2019t been using it already."),Ao.forEach(r),cG.forEach(r),zb=d(t),ao=s(t,"P",{});var B2=l(ao);YA=o(B2,"For example here is how you could use it for "),g_=s(B2,"CODE",{});var fG=l(g_);ZA=o(fG,"run_translation.py"),fG.forEach(r),KA=o(B2," with 2 GPUs:"),B2.forEach(r),Rb=d(t),f(gl.$$.fragment,t),Gb=d(t),Ur=s(t,"P",{});var tv=l(Ur);v_=s(tv,"CODE",{});var uG=l(v_);JA=o(uG,"zero_dp_2"),uG.forEach(r),QA=o(tv," is an optimized version of the simple wrapper, while "),b_=s(tv,"CODE",{});var _G=l(b_);XA=o(_G,"zero_dp_3"),_G.forEach(r),eO=o(tv,` fully shards model weights,
gradients and optimizer states.`),tv.forEach(r),qb=d(t),qt=s(t,"P",{});var Wc=l(qt);tO=o(Wc,"Both are compatible with adding "),y_=s(Wc,"CODE",{});var gG=l(y_);rO=o(gG,"cpu_offload"),gG.forEach(r),aO=o(Wc," to enable ZeRO-offload (activate it like this: "),w_=s(Wc,"CODE",{});var vG=l(w_);oO=o(vG,'--sharded_ddp "zero_dp_2 cpu_offload"'),vG.forEach(r),nO=o(Wc,")."),Wc.forEach(r),Mb=d(t),wd=s(t,"P",{});var bG=l(wd);sO=o(bG,"Notes:"),bG.forEach(r),jb=d(t),me=s(t,"UL",{});var Qt=l(me);E_=s(Qt,"LI",{});var yG=l(E_);lO=o(yG,"This feature requires distributed training (so multiple GPUs)."),yG.forEach(r),iO=d(Qt),$_=s(Qt,"LI",{});var wG=l($_);dO=o(wG,"It is not implemented for TPUs."),wG.forEach(r),cO=d(Qt),vl=s(Qt,"LI",{});var V2=l(vl);pO=o(V2,"It works with "),T_=s(V2,"CODE",{});var EG=l(T_);mO=o(EG,"--fp16"),EG.forEach(r),hO=o(V2," too, to make things even faster."),V2.forEach(r),fO=d(Qt),Lr=s(Qt,"LI",{});var Yc=l(Lr);uO=o(Yc,"The "),k_=s(Yc,"CODE",{});var $G=l(k_);_O=o($G,"cpu_offload"),$G.forEach(r),gO=o(Yc," additional option requires "),D_=s(Yc,"CODE",{});var TG=l(D_);vO=o(TG,"--fp16"),TG.forEach(r),bO=o(Yc,"."),Yc.forEach(r),yO=d(Qt),P_=s(Qt,"LI",{});var kG=l(P_);wO=o(kG,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),kG.forEach(r),Qt.forEach(r),Bb=d(t),Ed=s(t,"P",{});var DG=l(Ed);EO=o(DG,"Known caveats:"),DG.forEach(r),Vb=d(t),oo=s(t,"UL",{});var H2=l(oo);Fr=s(H2,"LI",{});var Zc=l(Fr);$O=o(Zc,"This feature is incompatible with "),A_=s(Zc,"CODE",{});var PG=l(A_);TO=o(PG,"--predict_with_generate"),PG.forEach(r),kO=o(Zc," in the "),O_=s(Zc,"EM",{});var AG=l(O_);DO=o(AG,"run_translation.py"),AG.forEach(r),PO=o(Zc," script."),Zc.forEach(r),AO=d(H2),Te=s(H2,"LI",{});var Xt=l(Te);OO=o(Xt,"Using "),C_=s(Xt,"CODE",{});var OG=l(C_);CO=o(OG,"--sharded_ddp zero_dp_3"),OG.forEach(r),xO=o(Xt,` requires wrapping each layer of the model in the special container
`),x_=s(Xt,"CODE",{});var CG=l(x_);SO=o(CG,"FullyShardedDataParallelism"),CG.forEach(r),NO=o(Xt," of fairscale. It should be used with the option "),S_=s(Xt,"CODE",{});var xG=l(S_);IO=o(xG,"auto_wrap"),xG.forEach(r),UO=o(Xt,` if you are not
doing this yourself: `),N_=s(Xt,"CODE",{});var SG=l(N_);LO=o(SG,'--sharded_ddp "zero_dp_3 auto_wrap"'),SG.forEach(r),FO=o(Xt,"."),Xt.forEach(r),H2.forEach(r),Hb=d(t),zr=s(t,"H3",{class:!0});var W2=l(zr);no=s(W2,"A",{id:!0,class:!0,href:!0});var NG=l(no);I_=s(NG,"SPAN",{});var IG=l(I_);f(bl.$$.fragment,IG),IG.forEach(r),NG.forEach(r),zO=d(W2),U_=s(W2,"SPAN",{});var UG=l(U_);RO=o(UG,"PyTorch Fully Sharded Data parallel"),UG.forEach(r),W2.forEach(r),Wb=d(t),so=s(t,"P",{});var Y2=l(so);GO=o(Y2,`To accelerate training huge models on larger batch sizes, we can use a fully sharded data parallel model.
This type of data parallel paradigm enables fitting more data and larger models by sharding the optimizer states, gradients and parameters.
To read more about it and the benefits, check out the `),yl=s(Y2,"A",{href:!0,rel:!0});var LG=l(yl);qO=o(LG,"Fully Sharded Data Parallel blog"),LG.forEach(r),MO=o(Y2,`.
We have integrated the latest PyTorch\u2019s Fully Sharded Data Parallel (FSDP) training feature.
All you need to do is enable it through the config.`),Y2.forEach(r),Yb=d(t),wl=s(t,"P",{});var lN=l(wl);L_=s(lN,"STRONG",{});var FG=l(L_);jO=o(FG,"Required PyTorch version for FSDP support"),FG.forEach(r),BO=o(lN,`: PyTorch Nightly (or 1.12.0 if you read this after it has been released)
as the model saving with FSDP activated is only available with recent fixes.`),lN.forEach(r),Zb=d(t),El=s(t,"P",{});var iN=l(El);F_=s(iN,"STRONG",{});var zG=l(F_);VO=o(zG,"Usage"),zG.forEach(r),HO=o(iN,":"),iN.forEach(r),Kb=d(t),ee=s(t,"UL",{});var Ye=l(ee);z_=s(Ye,"LI",{});var RG=l(z_);$l=s(RG,"P",{});var Z2=l($l);WO=o(Z2,`Make sure you have added the distributed launcher
`),R_=s(Z2,"CODE",{});var GG=l(R_);YO=o(GG,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),GG.forEach(r),ZO=o(Z2," if you haven\u2019t been using it already."),Z2.forEach(r),RG.forEach(r),KO=d(Ye),Tl=s(Ye,"LI",{});var K2=l(Tl);$d=s(K2,"P",{});var dN=l($d);G_=s(dN,"STRONG",{});var qG=l(G_);JO=o(qG,"Sharding Strategy"),qG.forEach(r),QO=o(dN,":"),dN.forEach(r),XO=d(K2),Rr=s(K2,"UL",{});var Kc=l(Rr);kl=s(Kc,"LI",{});var J2=l(kl);eC=o(J2,`FULL_SHARD : Shards optimizer states + gradients + model parameters across data parallel workers/GPUs.
For this, add `),q_=s(J2,"CODE",{});var MG=l(q_);tC=o(MG,"--fsdp full_shard"),MG.forEach(r),rC=o(J2," to the command line arguments."),J2.forEach(r),aC=d(Kc),Dl=s(Kc,"LI",{});var Q2=l(Dl);oC=o(Q2,`SHARD_GRAD_OP : Shards optimizer states + gradients across data parallel workers/GPUs.
For this, add `),M_=s(Q2,"CODE",{});var jG=l(M_);nC=o(jG,"--fsdp shard_grad_op"),jG.forEach(r),sC=o(Q2," to the command line arguments."),Q2.forEach(r),lC=d(Kc),Pl=s(Kc,"LI",{});var X2=l(Pl);iC=o(X2,"NO_SHARD : No sharding. For this, add "),j_=s(X2,"CODE",{});var BG=l(j_);dC=o(BG,"--fsdp no_shard"),BG.forEach(r),cC=o(X2," to the command line arguments."),X2.forEach(r),Kc.forEach(r),K2.forEach(r),pC=d(Ye),B_=s(Ye,"LI",{});var VG=l(B_);Gr=s(VG,"P",{});var Jc=l(Gr);mC=o(Jc,`To offload the parameters and gradients to the CPU,
add `),V_=s(Jc,"CODE",{});var HG=l(V_);hC=o(HG,'--fsdp "full_shard offload"'),HG.forEach(r),fC=o(Jc," or "),H_=s(Jc,"CODE",{});var WG=l(H_);uC=o(WG,'--fsdp "shard_grad_op offload"'),WG.forEach(r),_C=o(Jc," to the command line arguments."),Jc.forEach(r),VG.forEach(r),gC=d(Ye),W_=s(Ye,"LI",{});var YG=l(W_);ot=s(YG,"P",{});var Oo=l(ot);vC=o(Oo,"To automatically recursively wrap layers with FSDP using "),Y_=s(Oo,"CODE",{});var ZG=l(Y_);bC=o(ZG,"default_auto_wrap_policy"),ZG.forEach(r),yC=o(Oo,`,
add `),Z_=s(Oo,"CODE",{});var KG=l(Z_);wC=o(KG,'--fsdp "full_shard auto_wrap"'),KG.forEach(r),EC=o(Oo," or "),K_=s(Oo,"CODE",{});var JG=l(K_);$C=o(JG,'--fsdp "shard_grad_op auto_wrap"'),JG.forEach(r),TC=o(Oo," to the command line arguments."),Oo.forEach(r),YG.forEach(r),kC=d(Ye),J_=s(Ye,"LI",{});var QG=l(J_);qr=s(QG,"P",{});var Qc=l(qr);DC=o(Qc,`To enable both CPU offloading and auto wrapping,
add `),Q_=s(Qc,"CODE",{});var XG=l(Q_);PC=o(XG,'--fsdp "full_shard offload auto_wrap"'),XG.forEach(r),AC=o(Qc," or "),X_=s(Qc,"CODE",{});var eq=l(X_);OC=o(eq,'--fsdp "shard_grad_op offload auto_wrap"'),eq.forEach(r),CC=o(Qc," to the command line arguments."),Qc.forEach(r),QG.forEach(r),xC=d(Ye),Al=s(Ye,"LI",{});var ew=l(Al);eg=s(ew,"P",{});var tq=l(eg);SC=o(tq,"If auto wrapping is enabled, you can either use transformer based auto wrap policy or size based auto wrap policy."),tq.forEach(r),NC=d(ew),Ol=s(ew,"UL",{});var tw=l(Ol);ke=s(tw,"LI",{});var er=l(ke);IC=o(er,"For transformer based auto wrap policy, please add "),tg=s(er,"CODE",{});var rq=l(tg);UC=o(rq,"--fsdp_transformer_layer_cls_to_wrap <value>"),rq.forEach(r),LC=o(er,` to command line arguments.
This specifies the transformer layer class name (case-sensitive) to wrap ,e.g, `),rg=s(er,"CODE",{});var aq=l(rg);FC=o(aq,"BertLayer"),aq.forEach(r),zC=o(er,", "),ag=s(er,"CODE",{});var oq=l(ag);RC=o(oq,"GPTJBlock"),oq.forEach(r),GC=o(er,", "),og=s(er,"CODE",{});var nq=l(og);qC=o(nq,"T5Block"),nq.forEach(r),MC=o(er,` \u2026
This is important because submodules that share weights (e.g., embedding layer) should not end up in different FSDP wrapped units.
Using this policy, wrapping happens for each block containing Multi-Head Attention followed by couple of MLP layers.
Remaining layers including the shared embeddings are conviniently wrapped in same outermost FSDP unit.
Therefore, use this for transformer based models.`),er.forEach(r),jC=d(tw),Cl=s(tw,"LI",{});var rw=l(Cl);BC=o(rw,"For size based auto wrap policy, please add "),ng=s(rw,"CODE",{});var sq=l(ng);VC=o(sq,"--fsdp_min_num_params <number>"),sq.forEach(r),HC=o(rw,` to command line arguments.
It specifies FSDP\u2019s minimum number of parameters for auto wrapping.`),rw.forEach(r),tw.forEach(r),ew.forEach(r),Ye.forEach(r),Jb=d(t),Td=s(t,"P",{});var lq=l(Td);sg=s(lq,"STRONG",{});var iq=l(sg);WC=o(iq,"Few caveats to be aware of"),iq.forEach(r),lq.forEach(r),Qb=d(t),lo=s(t,"UL",{});var aw=l(lo);xl=s(aw,"LI",{});var ow=l(xl);YC=o(ow,`Mixed precision is currently not supported with FSDP as we wait for PyTorch to fix support for it.
More details in this `),Sl=s(ow,"A",{href:!0,rel:!0});var dq=l(Sl);ZC=o(dq,"issues"),dq.forEach(r),KC=o(ow,"."),ow.forEach(r),JC=d(aw),Mr=s(aw,"LI",{});var Xc=l(Mr);QC=o(Xc,`FSDP currently doesn\u2019t support multiple parameter groups.
More details mentioned in this `),Nl=s(Xc,"A",{href:!0,rel:!0});var cq=l(Nl);XC=o(cq,"issue"),cq.forEach(r),ex=o(Xc,`
(`),lg=s(Xc,"CODE",{});var pq=l(lg);tx=o(pq,"The original model parameters' .grads are not set, meaning that they cannot be optimized separately (which is why we cannot support multiple parameter groups)"),pq.forEach(r),rx=o(Xc,")."),Xc.forEach(r),aw.forEach(r),Xb=d(t),jr=s(t,"H3",{class:!0});var nw=l(jr);io=s(nw,"A",{id:!0,class:!0,href:!0});var mq=l(io);ig=s(mq,"SPAN",{});var hq=l(ig);f(Il.$$.fragment,hq),hq.forEach(r),mq.forEach(r),ax=d(nw),dg=s(nw,"SPAN",{});var fq=l(dg);ox=o(fq,"Using Trainer for accelerated PyTorch Training on Mac"),fq.forEach(r),nw.forEach(r),ey=d(t),je=s(t,"P",{});var Co=l(je);nx=o(Co,`With PyTorch v1.12 release, developers and researchers can take advantage of Apple silicon GPUs for significantly faster model training.
This unlocks the ability to perform machine learning workflows like prototyping and fine-tuning locally, right on Mac.
Apple\u2019s Metal Performance Shaders (MPS) as a backend for PyTorch enables this and can be used via the new `),cg=s(Co,"CODE",{});var uq=l(cg);sx=o(uq,'"mps"'),uq.forEach(r),lx=o(Co,` device.
This will map computational graphs and primitives on the MPS Graph framework and tuned kernels provided by MPS.
For more information please refer official documents `),Ul=s(Co,"A",{href:!0,rel:!0});var _q=l(Ul);ix=o(_q,"Introducing Accelerated PyTorch Training on Mac"),_q.forEach(r),dx=o(Co,`
and `),Ll=s(Co,"A",{href:!0,rel:!0});var gq=l(Ll);cx=o(gq,"MPS BACKEND"),gq.forEach(r),px=o(Co,"."),Co.forEach(r),ty=d(t),f(co.$$.fragment,t),ry=d(t),kd=s(t,"P",{});var vq=l(kd);pg=s(vq,"STRONG",{});var bq=l(pg);mx=o(bq,"Benefits of Training and Inference using Apple Silicon Chips"),bq.forEach(r),vq.forEach(r),ay=d(t),Mt=s(t,"OL",{});var ep=l(Mt);mg=s(ep,"LI",{});var yq=l(mg);hx=o(yq,"Enables users to train larger networks or batch sizes locally"),yq.forEach(r),fx=d(ep),hg=s(ep,"LI",{});var wq=l(hg);ux=o(wq,`Reduces data retrieval latency and provides the GPU with direct access to the full memory store due to unified memory architecture.
Therefore, improving end-to-end performance.`),wq.forEach(r),_x=d(ep),fg=s(ep,"LI",{});var Eq=l(fg);gx=o(Eq,"Reduces costs associated with cloud-based development or the need for additional local GPUs."),Eq.forEach(r),ep.forEach(r),oy=d(t),Br=s(t,"P",{});var rv=l(Br);ug=s(rv,"STRONG",{});var $q=l(ug);vx=o($q,"Pre-requisites"),$q.forEach(r),bx=o(rv,`: To install torch with mps support,
please follow this nice medium article `),Fl=s(rv,"A",{href:!0,rel:!0});var Tq=l(Fl);yx=o(Tq,"GPU-Acceleration Comes to PyTorch on M1 Macs"),Tq.forEach(r),wx=o(rv,"."),rv.forEach(r),ny=d(t),Vr=s(t,"P",{});var av=l(Vr);_g=s(av,"STRONG",{});var kq=l(_g);Ex=o(kq,"Usage"),kq.forEach(r),$x=o(av,`:
User has to just pass `),gg=s(av,"CODE",{});var Dq=l(gg);Tx=o(Dq,"--use_mps_device"),Dq.forEach(r),kx=o(av,` argument.
For example, you can run the offical Glue text classififcation task (from the root folder) using Apple Silicon GPU with below command:`),av.forEach(r),sy=d(t),f(zl.$$.fragment,t),ly=d(t),Dd=s(t,"P",{});var Pq=l(Dd);vg=s(Pq,"STRONG",{});var Aq=l(vg);Dx=o(Aq,"A few caveats to be aware of"),Aq.forEach(r),Pq.forEach(r),iy=d(t),po=s(t,"OL",{});var sw=l(po);Rl=s(sw,"LI",{});var lw=l(Rl);Px=o(lw,`Some PyTorch operations have not been implemented in mps and will throw an error.
One way to get around that is to set the environment variable `),bg=s(lw,"CODE",{});var Oq=l(bg);Ax=o(Oq,"PYTORCH_ENABLE_MPS_FALLBACK=1"),Oq.forEach(r),Ox=o(lw,`,
which will fallback to CPU for these operations. It still throws a UserWarning however.`),lw.forEach(r),Cx=d(sw),De=s(sw,"LI",{});var tr=l(De);xx=o(tr,"Distributed setups "),yg=s(tr,"CODE",{});var Cq=l(yg);Sx=o(Cq,"gloo"),Cq.forEach(r),Nx=o(tr," and "),wg=s(tr,"CODE",{});var xq=l(wg);Ix=o(xq,"nccl"),xq.forEach(r),Ux=o(tr," are not working with "),Eg=s(tr,"CODE",{});var Sq=l(Eg);Lx=o(Sq,"mps"),Sq.forEach(r),Fx=o(tr,` device.
This means that currently only single GPU of `),$g=s(tr,"CODE",{});var Nq=l($g);zx=o(Nq,"mps"),Nq.forEach(r),Rx=o(tr," device type can be used."),tr.forEach(r),sw.forEach(r),dy=d(t),jt=s(t,"P",{});var tp=l(jt);Gx=o(tp,"Finally, please, remember that, \u{1F917} "),Tg=s(tp,"CODE",{});var Iq=l(Tg);qx=o(Iq,"Trainer"),Iq.forEach(r),Mx=o(tp,` only integrates MPS backend, therefore if you
have any problems or questions with regards to MPS backend usage, please,
file an issue with `),Gl=s(tp,"A",{href:!0,rel:!0});var Uq=l(Gl);jx=o(Uq,"PyTorch GitHub"),Uq.forEach(r),Bx=o(tp,"."),tp.forEach(r),cy=d(t),Pd=s(t,"P",{});var Lq=l(Pd);Vx=o(Lq,"Sections that were moved:"),Lq.forEach(r),py=d(t),w=s(t,"P",{});var $=l(w);Hx=o($,"[ "),Ad=s($,"A",{href:!0});var Fq=l(Ad);Wx=o(Fq,"DeepSpeed"),Fq.forEach(r),kg=s($,"A",{id:!0}),l(kg).forEach(r),Yx=o($,`
| `),Od=s($,"A",{href:!0});var zq=l(Od);Zx=o(zq,"Installation"),zq.forEach(r),Dg=s($,"A",{id:!0}),l(Dg).forEach(r),Kx=o($,`
| `),Cd=s($,"A",{href:!0});var Rq=l(Cd);Jx=o(Rq,"Deployment with multiple GPUs"),Rq.forEach(r),Pg=s($,"A",{id:!0}),l(Pg).forEach(r),Qx=o($,`
| `),xd=s($,"A",{href:!0});var Gq=l(xd);Xx=o(Gq,"Deployment with one GPU"),Gq.forEach(r),Ag=s($,"A",{id:!0}),l(Ag).forEach(r),eS=o($,`
| `),Sd=s($,"A",{href:!0});var qq=l(Sd);tS=o(qq,"Deployment in Notebooks"),qq.forEach(r),Og=s($,"A",{id:!0}),l(Og).forEach(r),rS=o($,`
| `),Nd=s($,"A",{href:!0});var Mq=l(Nd);aS=o(Mq,"Configuration"),Mq.forEach(r),Cg=s($,"A",{id:!0}),l(Cg).forEach(r),oS=o($,`
| `),Id=s($,"A",{href:!0});var jq=l(Id);nS=o(jq,"Passing Configuration"),jq.forEach(r),xg=s($,"A",{id:!0}),l(xg).forEach(r),sS=o($,`
| `),Ud=s($,"A",{href:!0});var Bq=l(Ud);lS=o(Bq,"Shared Configuration"),Bq.forEach(r),Sg=s($,"A",{id:!0}),l(Sg).forEach(r),iS=o($,`
| `),Ld=s($,"A",{href:!0});var Vq=l(Ld);dS=o(Vq,"ZeRO"),Vq.forEach(r),Ng=s($,"A",{id:!0}),l(Ng).forEach(r),cS=o($,`
| `),Fd=s($,"A",{href:!0});var Hq=l(Fd);pS=o(Hq,"ZeRO-2 Config"),Hq.forEach(r),Ig=s($,"A",{id:!0}),l(Ig).forEach(r),mS=o($,`
| `),zd=s($,"A",{href:!0});var Wq=l(zd);hS=o(Wq,"ZeRO-3 Config"),Wq.forEach(r),Ug=s($,"A",{id:!0}),l(Ug).forEach(r),fS=o($,`
| `),Rd=s($,"A",{href:!0});var Yq=l(Rd);uS=o(Yq,"NVMe Support"),Yq.forEach(r),Lg=s($,"A",{id:!0}),l(Lg).forEach(r),_S=o($,`
| `),Gd=s($,"A",{href:!0});var Zq=l(Gd);gS=o(Zq,"ZeRO-2 vs ZeRO-3 Performance"),Zq.forEach(r),Fg=s($,"A",{id:!0}),l(Fg).forEach(r),vS=o($,`
| `),qd=s($,"A",{href:!0});var Kq=l(qd);bS=o(Kq,"ZeRO-2 Example"),Kq.forEach(r),zg=s($,"A",{id:!0}),l(zg).forEach(r),yS=o($,`
| `),Md=s($,"A",{href:!0});var Jq=l(Md);wS=o(Jq,"ZeRO-3 Example"),Jq.forEach(r),Rg=s($,"A",{id:!0}),l(Rg).forEach(r),ES=o($,`
| `),jd=s($,"A",{href:!0});var Qq=l(jd);$S=o(Qq,"Optimizer"),Qq.forEach(r),Gg=s($,"A",{id:!0}),l(Gg).forEach(r),TS=o($,`
| `),Bd=s($,"A",{href:!0});var Xq=l(Bd);kS=o(Xq,"Scheduler"),Xq.forEach(r),qg=s($,"A",{id:!0}),l(qg).forEach(r),DS=o($,`
| `),Vd=s($,"A",{href:!0});var eM=l(Vd);PS=o(eM,"fp32 Precision"),eM.forEach(r),Mg=s($,"A",{id:!0}),l(Mg).forEach(r),AS=o($,`
| `),Hd=s($,"A",{href:!0});var tM=l(Hd);OS=o(tM,"Automatic Mixed Precision"),tM.forEach(r),jg=s($,"A",{id:!0}),l(jg).forEach(r),CS=o($,`
| `),Wd=s($,"A",{href:!0});var rM=l(Wd);xS=o(rM,"Batch Size"),rM.forEach(r),Bg=s($,"A",{id:!0}),l(Bg).forEach(r),SS=o($,`
| `),Yd=s($,"A",{href:!0});var aM=l(Yd);NS=o(aM,"Gradient Accumulation"),aM.forEach(r),Vg=s($,"A",{id:!0}),l(Vg).forEach(r),IS=o($,`
| `),Zd=s($,"A",{href:!0});var oM=l(Zd);US=o(oM,"Gradient Clipping"),oM.forEach(r),Hg=s($,"A",{id:!0}),l(Hg).forEach(r),LS=o($,`
| `),Kd=s($,"A",{href:!0});var nM=l(Kd);FS=o(nM,"Getting The Model Weights Out"),nM.forEach(r),Wg=s($,"A",{id:!0}),l(Wg).forEach(r),zS=o($,`
]`),$.forEach(r),this.h()},h(){m(E,"name","hf:doc:metadata"),m(E,"content",JSON.stringify(wM)),m(D,"id","trainer"),m(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(D,"href","#trainer"),m(T,"class","relative group"),m(se,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(B,"href","https://github.com/huggingface/transformers/tree/main/examples"),m(B,"rel","nofollow"),m(ae,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(ge,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(ve,"href","https://github.com/NVIDIA/apex"),m(ve,"rel","nofollow"),m(be,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(si,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(li,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(ii,"href","callback"),m(Xr,"id","transformers.Trainer"),m(Xr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Xr,"href","#transformers.Trainer"),m(ar,"class","relative group"),m(di,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),m(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(pi,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),m(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(hi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(vn,"href","https://github.com/pytorch/pytorch/issues/16266"),m(vn,"rel","nofollow"),m(fi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(ui,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(_i,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.log_metrics"),m(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(b,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ba,"id","transformers.Seq2SeqTrainer"),m(ba,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ba,"href","#transformers.Seq2SeqTrainer"),m(fr,"class","relative group"),m(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(wa,"id","transformers.TrainingArguments"),m(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(wa,"href","#transformers.TrainingArguments"),m(br,"class","relative group"),m(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Da,"id","transformers.Seq2SeqTrainingArguments"),m(Da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Da,"href","#transformers.Seq2SeqTrainingArguments"),m($r,"class","relative group"),m(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),m(Pa,"id","checkpoints"),m(Pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Pa,"href","#checkpoints"),m(kr,"class","relative group"),m(gi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(vi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(bi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer.train"),m(Ei,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(Sa,"id","logging"),m(Sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Sa,"href","#logging"),m(Dr,"class","relative group"),m(Ti,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(ki,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(Ai,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),m(Oi,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(Ci,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(Ua,"id","randomness"),m(Ua,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ua,"href","#randomness"),m(Pr,"class","relative group"),m(Li,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(us,"href","https://pytorch.org/docs/stable/notes/randomness"),m(us,"rel","nofollow"),m(La,"id","specific-gpus-selection"),m(La,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(La,"href","#specific-gpus-selection"),m(Ar,"class","relative group"),m(gs,"href","https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html"),m(gs,"rel","nofollow"),m(bs,"href","https://github.com/huggingface/accelerate"),m(bs,"rel","nofollow"),m(ys,"href","https://github.com/microsoft/DeepSpeed"),m(ys,"rel","nofollow"),m(zi,"href","Deepspeed"),m(ks,"href","https://pytorch.org/docs/stable/generated/torch.nn.DataParallel.html"),m(ks,"rel","nofollow"),m(xs,"start","2"),m(Ma,"id","trainer-integrations"),m(Ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ma,"href","#trainer-integrations"),m(Or,"class","relative group"),m(Ji,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(Us,"href","https://github.com/microsoft/DeepSpeed"),m(Us,"rel","nofollow"),m(Ls,"href","https://pytorch.org/docs/stable/fsdp.html"),m(Ls,"rel","nofollow"),m(Fs,"href","https://github.com/facebookresearch/fairscale/"),m(Fs,"rel","nofollow"),m(zs,"href","https://arxiv.org/abs/1910.02054"),m(zs,"rel","nofollow"),m(Qi,"href","#pytorch-fully-sharded-data-parallel"),m(Xi,"id","zero-install-notes"),m(Va,"id","cuda-extension-installation-notes"),m(Va,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Va,"href","#cuda-extension-installation-notes"),m(Cr,"class","relative group"),m(Gs,"href","https://github.com/facebookresearch/fairscale/issues"),m(Gs,"rel","nofollow"),m(qs,"href","https://github.com/microsoft/DeepSpeed/issues"),m(qs,"rel","nofollow"),m(Ha,"id","possible-problem-1"),m(Ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ha,"href","#possible-problem-1"),m(xr,"class","relative group"),m(Vs,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),m(Vs,"rel","nofollow"),m(Ya,"id","possible-problem-2"),m(Ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ya,"href","#possible-problem-2"),m(Sr,"class","relative group"),m(Ka,"id","possible-problem-3"),m(Ka,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ka,"href","#possible-problem-3"),m(Nr,"class","relative group"),m(Qa,"id","fairscale"),m(Qa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qa,"href","#fairscale"),m(Ir,"class","relative group"),m(Xs,"href","https://github.com/facebookresearch/fairscale/"),m(Xs,"rel","nofollow"),m(md,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),m(el,"href","https://arxiv.org/abs/1910.02054"),m(el,"rel","nofollow"),m(ol,"href","https://github.com/facebookresearch/fairscale/#installation"),m(ol,"rel","nofollow"),m(ud,"href","#zero-install-notes"),m(pl,"href","https://github.com/facebookresearch/fairscale/issues"),m(pl,"rel","nofollow"),m(_l,"start","3"),m(no,"id","pytorch-fully-sharded-data-parallel"),m(no,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(no,"href","#pytorch-fully-sharded-data-parallel"),m(zr,"class","relative group"),m(yl,"href","https://pytorch.org/blog/introducing-pytorch-fully-sharded-data-parallel-api/"),m(yl,"rel","nofollow"),m(Sl,"href","https://github.com/pytorch/pytorch/issues/75676"),m(Sl,"rel","nofollow"),m(Nl,"href","https://github.com/pytorch/pytorch/issues/76501"),m(Nl,"rel","nofollow"),m(io,"id","using-trainer-for-accelerated-pytorch-training-on-mac"),m(io,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(io,"href","#using-trainer-for-accelerated-pytorch-training-on-mac"),m(jr,"class","relative group"),m(Ul,"href","https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/"),m(Ul,"rel","nofollow"),m(Ll,"href","https://pytorch.org/docs/stable/notes/mps.html"),m(Ll,"rel","nofollow"),m(Fl,"href","https://medium.com/towards-data-science/gpu-acceleration-comes-to-pytorch-on-m1-macs-195c399efcc1"),m(Fl,"rel","nofollow"),m(Gl,"href","https://github.com/pytorch/pytorch/issues"),m(Gl,"rel","nofollow"),m(Ad,"href","./deepspeed#deepspeed-trainer-integration"),m(kg,"id","deepspeed"),m(Od,"href","./deepspeed#deepspeed-installation"),m(Dg,"id","installation"),m(Cd,"href","./deepspeed#deepspeed-multi-gpu"),m(Pg,"id","deployment-with-multiple-gpus"),m(xd,"href","./deepspeed#deepspeed-one-gpu"),m(Ag,"id","deployment-with-one-gpu"),m(Sd,"href","./deepspeed#deepspeed-notebook"),m(Og,"id","deployment-in-notebooks"),m(Nd,"href","./deepspeed#deepspeed-config"),m(Cg,"id","configuration"),m(Id,"href","./deepspeed#deepspeed-config-passing"),m(xg,"id","passing-configuration"),m(Ud,"href","./deepspeed#deepspeed-config-shared"),m(Sg,"id","shared-configuration"),m(Ld,"href","./deepspeed#deepspeed-zero"),m(Ng,"id","zero"),m(Fd,"href","./deepspeed#deepspeed-zero2-config"),m(Ig,"id","zero-2-config"),m(zd,"href","./deepspeed#deepspeed-zero3-config"),m(Ug,"id","zero-3-config"),m(Rd,"href","./deepspeed#deepspeed-nvme"),m(Lg,"id","nvme-support"),m(Gd,"href","./deepspeed#deepspeed-zero2-zero3-performance"),m(Fg,"id","zero-2-vs-zero-3-performance"),m(qd,"href","./deepspeed#deepspeed-zero2-example"),m(zg,"id","zero-2-example"),m(Md,"href","./deepspeed#deepspeed-zero3-example"),m(Rg,"id","zero-3-example"),m(jd,"href","./deepspeed#deepspeed-optimizer"),m(Gg,"id","optimizer"),m(Bd,"href","./deepspeed#deepspeed-scheduler"),m(qg,"id","scheduler"),m(Vd,"href","./deepspeed#deepspeed-fp32"),m(Mg,"id","fp32-precision"),m(Hd,"href","./deepspeed#deepspeed-amp"),m(jg,"id","automatic-mixed-precision"),m(Wd,"href","./deepspeed#deepspeed-bs"),m(Bg,"id","batch-size"),m(Yd,"href","./deepspeed#deepspeed-grad-acc"),m(Vg,"id","gradient-accumulation"),m(Zd,"href","./deepspeed#deepspeed-grad-clip"),m(Hg,"id","gradient-clipping"),m(Kd,"href","./deepspeed#deepspeed-weight-extraction"),m(Wg,"id","getting-the-model-weights-out")},m(t,c){e(document.head,E),p(t,O,c),p(t,T,c),e(T,D),e(D,z),u(P,z,null),e(T,C),e(T,G),e(G,ue),p(t,te,c),p(t,M,c),e(M,ne),e(M,se),e(se,re),e(M,le),e(M,B),e(B,Ze),e(M,_e),p(t,F,c),p(t,I,c),e(I,nt),e(I,ae),e(ae,st),e(I,lt),e(I,ge),e(ge,xo),e(I,So),p(t,Ke,c),p(t,Ae,c),e(Ae,No),e(Ae,ve),e(ve,Io),e(Ae,Uo),p(t,Z,c),p(t,V,c),e(V,Vl),e(V,be),e(be,Zr),e(V,Hl),p(t,rr,c),p(t,N,c),e(N,H),e(H,Kr),e(Kr,Wl),e(H,Yl),e(N,Zl),e(N,Kl),e(Kl,ap),e(ap,iw),e(Kl,dw),e(N,cw),e(N,Jl),e(Jl,op),e(op,pw),e(Jl,mw),e(N,hw),e(N,Ql),e(Ql,np),e(np,fw),e(Ql,uw),e(N,_w),e(N,it),e(it,sp),e(sp,gw),e(it,vw),e(it,lp),e(lp,bw),e(it,yw),e(it,ip),e(ip,ww),e(it,Ew),e(N,$w),e(N,Xl),e(Xl,dp),e(dp,Tw),e(Xl,kw),e(N,Dw),e(N,ei),e(ei,cp),e(cp,Pw),e(ei,Aw),e(N,Ow),e(N,ti),e(ti,pp),e(pp,Cw),e(ti,xw),e(N,Sw),e(N,ri),e(ri,mp),e(mp,Nw),e(ri,Iw),e(N,Uw),e(N,ai),e(ai,hp),e(hp,Lw),e(ai,Fw),e(N,zw),e(N,oi),e(oi,fp),e(fp,Rw),e(oi,Gw),e(N,qw),e(N,ni),e(ni,up),e(up,Mw),e(ni,jw),p(t,ov,c),u(Jr,t,c),p(t,nv,c),p(t,Qr,c),e(Qr,Bw),e(Qr,si),e(si,Vw),e(Qr,Hw),p(t,sv,c),u(Lo,t,c),p(t,lv,c),p(t,dt,c),e(dt,Ww),e(dt,li),e(li,Yw),e(dt,Zw),e(dt,ii),e(ii,Kw),e(dt,Jw),p(t,iv,c),p(t,ar,c),e(ar,Xr),e(Xr,_p),u(Fo,_p,null),e(ar,Qw),e(ar,gp),e(gp,Xw),p(t,dv,c),p(t,b,c),u(zo,b,null),e(b,eE),e(b,vp),e(vp,tE),e(b,rE),e(b,bp),e(bp,aE),e(b,oE),e(b,ye),e(ye,ea),e(ea,yp),e(yp,nE),e(ea,sE),e(ea,di),e(di,lE),e(ea,iE),e(ye,dE),e(ye,K),e(K,wp),e(wp,cE),e(K,pE),e(K,Ep),e(Ep,mE),e(K,hE),e(K,$p),e($p,fE),e(K,uE),e(K,Tp),e(Tp,_E),e(K,gE),e(K,kp),e(kp,vE),e(K,bE),e(K,Dp),e(Dp,yE),e(K,wE),e(ye,EE),e(ye,ci),e(ci,Pp),e(Pp,$E),e(ci,TE),e(ye,kE),e(ye,Oe),e(Oe,Ap),e(Ap,DE),e(Oe,PE),e(Oe,Op),e(Op,AE),e(Oe,OE),e(Oe,Cp),e(Cp,CE),e(Oe,xE),e(Oe,xp),e(xp,SE),e(Oe,NE),e(ye,IE),e(ye,Ce),e(Ce,Sp),e(Sp,UE),e(Ce,LE),e(Ce,Np),e(Np,FE),e(Ce,zE),e(Ce,Ip),e(Ip,RE),e(Ce,GE),e(Ce,Up),e(Up,qE),e(Ce,ME),e(b,jE),e(b,ta),u(Ro,ta,null),e(ta,BE),e(ta,Go),e(Go,VE),e(Go,Lp),e(Lp,HE),e(Go,WE),e(b,YE),e(b,ra),u(qo,ra,null),e(ra,ZE),e(ra,Mo),e(Mo,KE),e(Mo,Fp),e(Fp,JE),e(Mo,QE),e(b,XE),e(b,ct),u(jo,ct,null),e(ct,e0),e(ct,zp),e(zp,t0),e(ct,r0),e(ct,Rp),e(Rp,a0),e(b,o0),e(b,aa),u(Bo,aa,null),e(aa,n0),e(aa,Gp),e(Gp,s0),e(b,l0),e(b,pt),u(Vo,pt,null),e(pt,i0),e(pt,qp),e(qp,d0),e(pt,c0),e(pt,Ho),e(Ho,p0),e(Ho,Mp),e(Mp,m0),e(Ho,h0),e(b,f0),e(b,mt),u(Wo,mt,null),e(mt,u0),e(mt,jp),e(jp,_0),e(mt,g0),e(mt,Je),e(Je,v0),e(Je,Bp),e(Bp,b0),e(Je,y0),e(Je,Vp),e(Vp,w0),e(Je,E0),e(Je,Hp),e(Hp,$0),e(Je,T0),e(b,k0),e(b,oa),u(Yo,oa,null),e(oa,D0),e(oa,Wp),e(Wp,P0),e(b,A0),e(b,xe),u(Zo,xe,null),e(xe,O0),e(xe,Yp),e(Yp,C0),e(xe,x0),e(xe,Ko),e(Ko,S0),e(Ko,Zp),e(Zp,N0),e(Ko,I0),e(xe,U0),e(xe,Kp),e(Kp,L0),e(b,F0),e(b,ht),u(Jo,ht,null),e(ht,z0),e(ht,or),e(or,R0),e(or,Jp),e(Jp,G0),e(or,q0),e(or,Qp),e(Qp,M0),e(or,j0),e(ht,B0),e(ht,Xp),e(Xp,V0),e(b,H0),e(b,na),u(Qo,na,null),e(na,W0),e(na,Xo),e(Xo,Y0),e(Xo,pi),e(pi,Z0),e(Xo,K0),e(b,J0),e(b,ft),u(en,ft,null),e(ft,Q0),e(ft,tn),e(tn,X0),e(tn,em),e(em,e$),e(tn,t$),e(ft,r$),e(ft,tm),e(tm,a$),e(b,o$),e(b,sa),u(rn,sa,null),e(sa,n$),e(sa,rm),e(rm,s$),e(b,l$),e(b,ut),u(an,ut,null),e(ut,i$),e(ut,on),e(on,d$),e(on,am),e(am,c$),e(on,p$),e(ut,m$),e(ut,om),e(om,h$),e(b,f$),e(b,Se),u(nn,Se,null),e(Se,u$),e(Se,sn),e(sn,_$),e(sn,nm),e(nm,g$),e(sn,v$),e(Se,b$),e(Se,nr),e(nr,y$),e(nr,sm),e(sm,w$),e(nr,E$),e(nr,lm),e(lm,$$),e(nr,T$),e(Se,k$),e(Se,im),e(im,D$),e(b,P$),e(b,_t),u(ln,_t,null),e(_t,A$),e(_t,we),e(we,O$),e(we,dm),e(dm,C$),e(we,x$),e(we,cm),e(cm,S$),e(we,N$),e(we,pm),e(pm,I$),e(we,U$),e(we,mm),e(mm,L$),e(we,F$),e(_t,z$),u(la,_t,null),e(b,R$),e(b,ia),u(dn,ia,null),e(ia,G$),e(ia,cn),e(cn,q$),e(cn,hm),e(hm,M$),e(cn,j$),e(b,B$),e(b,da),u(pn,da,null),e(da,V$),e(da,fm),e(fm,H$),e(b,W$),e(b,ca),u(mn,ca,null),e(ca,Y$),e(ca,hn),e(hn,Z$),e(hn,um),e(um,K$),e(hn,J$),e(b,Q$),e(b,gt),u(fn,gt,null),e(gt,X$),e(gt,un),e(un,eT),e(un,_m),e(_m,tT),e(un,rT),e(gt,aT),e(gt,gm),e(gm,oT),e(b,nT),e(b,A),u(_n,A,null),e(A,sT),e(A,vm),e(vm,lT),e(A,iT),e(A,bm),e(bm,dT),e(A,cT),e(A,ym),e(ym,pT),e(A,mT),e(A,sr),e(sr,hT),e(sr,wm),e(wm,fT),e(sr,uT),e(sr,Em),e(Em,_T),e(sr,gT),e(A,vT),u(pa,A,null),e(A,bT),e(A,$m),e($m,Tm),e(Tm,yT),e(A,wT),e(A,Qe),e(Qe,Ee),e(Ee,ET),e(Ee,km),e(km,$T),e(Ee,TT),e(Ee,Dm),e(Dm,kT),e(Ee,DT),e(Ee,Pm),e(Pm,PT),e(Ee,AT),e(Ee,Am),e(Am,OT),e(Ee,CT),e(Qe,xT),e(Qe,lr),e(lr,ST),e(lr,Om),e(Om,NT),e(lr,IT),e(lr,Cm),e(Cm,UT),e(lr,LT),e(Qe,FT),e(Qe,mi),e(mi,xm),e(xm,zT),e(mi,RT),e(Qe,GT),e(Qe,vt),e(vt,Sm),e(Sm,qT),e(vt,MT),e(vt,Nm),e(Nm,jT),e(vt,BT),e(vt,Im),e(Im,VT),e(vt,HT),e(A,WT),e(A,Um),e(Um,YT),e(A,ZT),e(A,Lm),e(Lm,KT),e(A,JT),e(A,gn),e(gn,QT),e(gn,Fm),e(Fm,XT),e(gn,e3),e(A,t3),e(A,Xe),e(Xe,r3),e(Xe,zm),e(zm,a3),e(Xe,o3),e(Xe,Rm),e(Rm,n3),e(Xe,s3),e(Xe,Gm),e(Gm,l3),e(Xe,i3),e(A,d3),e(A,oe),e(oe,c3),e(oe,hi),e(hi,p3),e(oe,m3),e(oe,qm),e(qm,h3),e(oe,f3),e(oe,Mm),e(Mm,u3),e(oe,_3),e(oe,jm),e(jm,g3),e(oe,v3),e(oe,Bm),e(Bm,b3),e(oe,y3),e(A,w3),e(A,U),e(U,E3),e(U,Vm),e(Vm,$3),e(U,T3),e(U,Hm),e(Hm,k3),e(U,D3),e(U,Wm),e(Wm,P3),e(U,A3),e(U,Ym),e(Ym,O3),e(U,C3),e(U,vn),e(vn,x3),e(U,S3),e(U,Zm),e(Zm,N3),e(U,I3),e(U,Km),e(Km,U3),e(U,L3),e(U,Jm),e(Jm,F3),e(U,z3),e(U,Qm),e(Qm,R3),e(U,G3),e(U,Xm),e(Xm,q3),e(U,M3),e(A,j3),e(A,$e),e($e,B3),e($e,fi),e(fi,V3),e($e,H3),e($e,eh),e(eh,W3),e($e,Y3),e($e,ui),e(ui,Z3),e($e,K3),e($e,th),e(th,J3),e($e,Q3),e(A,X3),e(A,rh),e(rh,e4),e(b,t4),e(b,ma),u(bn,ma,null),e(ma,r4),e(ma,ah),e(ah,a4),e(b,o4),e(b,ha),u(yn,ha,null),e(ha,n4),e(ha,wn),e(wn,s4),e(wn,oh),e(oh,l4),e(wn,i4),e(b,d4),e(b,bt),u(En,bt,null),e(bt,c4),e(bt,$n),e($n,p4),e($n,nh),e(nh,m4),e($n,h4),e(bt,f4),e(bt,Tn),e(Tn,u4),e(Tn,sh),e(sh,_4),e(Tn,g4),e(b,v4),e(b,J),u(kn,J,null),e(J,b4),e(J,lh),e(lh,y4),e(J,w4),e(J,Dn),e(Dn,E4),e(Dn,ih),e(ih,$4),e(Dn,T4),e(J,k4),u(fa,J,null),e(J,D4),e(J,Pn),e(Pn,P4),e(Pn,dh),e(dh,A4),e(Pn,O4),e(J,C4),e(J,ir),e(ir,dr),e(dr,x4),e(dr,ch),e(ch,S4),e(dr,N4),e(dr,ph),e(ph,I4),e(dr,U4),e(ir,L4),e(ir,cr),e(cr,F4),e(cr,mh),e(mh,z4),e(cr,R4),e(cr,hh),e(hh,G4),e(cr,q4),e(ir,M4),e(ir,pr),e(pr,j4),e(pr,fh),e(fh,B4),e(pr,V4),e(pr,uh),e(uh,H4),e(pr,W4),e(b,Y4),e(b,yt),u(An,yt,null),e(yt,Z4),e(yt,mr),e(mr,K4),e(mr,_h),e(_h,J4),e(mr,Q4),e(mr,gh),e(gh,X4),e(mr,e5),e(yt,t5),e(yt,vh),e(vh,r5),e(b,a5),e(b,wt),u(On,wt,null),e(wt,o5),e(wt,hr),e(hr,n5),e(hr,bh),e(bh,s5),e(hr,l5),e(hr,yh),e(yh,i5),e(hr,d5),e(wt,c5),e(wt,wh),e(wh,p5),e(b,m5),e(b,ua),u(Cn,ua,null),e(ua,h5),e(ua,et),e(et,f5),e(et,Eh),e(Eh,u5),e(et,_5),e(et,$h),e($h,g5),e(et,v5),e(et,Th),e(Th,b5),e(et,y5),e(b,w5),e(b,_a),u(xn,_a,null),e(_a,E5),e(_a,Sn),e(Sn,$5),e(Sn,kh),e(kh,T5),e(Sn,k5),e(b,D5),e(b,Ne),u(Nn,Ne,null),e(Ne,P5),e(Ne,In),e(In,A5),e(In,Dh),e(Dh,O5),e(In,C5),e(Ne,x5),e(Ne,Ph),e(Ph,S5),e(Ne,N5),e(Ne,Un),e(Un,I5),e(Un,_i),e(_i,U5),e(Un,L5),e(b,F5),e(b,Et),u(Ln,Et,null),e(Et,z5),e(Et,Fn),e(Fn,R5),e(Fn,Ah),e(Ah,G5),e(Fn,q5),e(Et,M5),e(Et,Oh),e(Oh,j5),e(b,B5),e(b,$t),u(zn,$t,null),e($t,V5),e($t,Ch),e(Ch,H5),e($t,W5),e($t,xh),e(xh,Y5),e(b,Z5),e(b,ga),u(Rn,ga,null),e(ga,K5),e(ga,Gn),e(Gn,J5),e(Gn,Sh),e(Sh,Q5),e(Gn,X5),e(b,e6),e(b,va),u(qn,va,null),e(va,t6),e(va,Nh),e(Nh,r6),e(b,a6),e(b,Tt),u(Mn,Tt,null),e(Tt,o6),e(Tt,Ih),e(Ih,n6),e(Tt,s6),e(Tt,Uh),e(Uh,l6),p(t,cv,c),p(t,fr,c),e(fr,ba),e(ba,Lh),u(jn,Lh,null),e(fr,i6),e(fr,Fh),e(Fh,d6),p(t,pv,c),p(t,tt,c),u(Bn,tt,null),e(tt,c6),e(tt,Ie),u(Vn,Ie,null),e(Ie,p6),e(Ie,zh),e(zh,m6),e(Ie,h6),e(Ie,Hn),e(Hn,f6),e(Hn,Rh),e(Rh,u6),e(Hn,_6),e(Ie,g6),e(Ie,Gh),e(Gh,v6),e(tt,b6),e(tt,Q),u(Wn,Q,null),e(Q,y6),e(Q,qh),e(qh,w6),e(Q,E6),e(Q,Yn),e(Yn,$6),e(Yn,Mh),e(Mh,T6),e(Yn,k6),e(Q,D6),u(ya,Q,null),e(Q,P6),e(Q,Zn),e(Zn,A6),e(Zn,jh),e(jh,O6),e(Zn,C6),e(Q,x6),e(Q,ur),e(ur,_r),e(_r,S6),e(_r,Bh),e(Bh,N6),e(_r,I6),e(_r,Vh),e(Vh,U6),e(_r,L6),e(ur,F6),e(ur,gr),e(gr,z6),e(gr,Hh),e(Hh,R6),e(gr,G6),e(gr,Wh),e(Wh,q6),e(gr,M6),e(ur,j6),e(ur,vr),e(vr,B6),e(vr,Yh),e(Yh,V6),e(vr,H6),e(vr,Zh),e(Zh,W6),e(vr,Y6),p(t,mv,c),p(t,br,c),e(br,wa),e(wa,Kh),u(Kn,Kh,null),e(br,Z6),e(br,Jh),e(Jh,K6),p(t,hv,c),p(t,q,c),u(Jn,q,null),e(q,J6),e(q,ie),u(Qn,ie,null),e(ie,Q6),e(ie,Qh),e(Qh,X6),e(ie,e8),e(ie,yr),e(yr,t8),e(yr,Xh),e(Xh,r8),e(yr,a8),e(yr,ef),e(ef,o8),e(yr,n8),e(ie,s8),e(ie,wr),e(wr,l8),e(wr,tf),e(tf,i8),e(wr,d8),e(wr,rf),e(rf,c8),e(wr,p8),e(ie,m8),e(ie,Xn),e(Xn,h8),e(Xn,af),e(af,f8),e(Xn,u8),e(q,_8),e(q,Ea),u(es,Ea,null),e(Ea,g8),e(Ea,of),e(of,v8),e(q,b8),e(q,kt),u(ts,kt,null),e(kt,y8),e(kt,nf),e(nf,w8),e(kt,E8),e(kt,Er),e(Er,$8),e(Er,sf),e(sf,T8),e(Er,k8),e(Er,lf),e(lf,D8),e(Er,P8),e(q,A8),e(q,$a),u(rs,$a,null),e($a,O8),e($a,as),e(as,C8),e(as,df),e(df,x8),e(as,S8),e(q,N8),e(q,Ta),u(os,Ta,null),e(Ta,I8),e(Ta,cf),e(cf,U8),e(q,L8),e(q,ka),u(ns,ka,null),e(ka,F8),e(ka,pf),e(pf,z8),p(t,fv,c),p(t,$r,c),e($r,Da),e(Da,mf),u(ss,mf,null),e($r,R8),e($r,hf),e(hf,G8),p(t,uv,c),p(t,Tr,c),u(ls,Tr,null),e(Tr,q8),e(Tr,ff),e(ff,M8),p(t,_v,c),p(t,kr,c),e(kr,Pa),e(Pa,uf),u(is,uf,null),e(kr,j8),e(kr,_f),e(_f,B8),p(t,gv,c),p(t,de,c),e(de,V8),e(de,gi),e(gi,H8),e(de,W8),e(de,gf),e(gf,Y8),e(de,Z8),e(de,vi),e(vi,K8),e(de,J8),e(de,vf),e(vf,Q8),e(de,X8),p(t,vv,c),p(t,Aa,c),e(Aa,e7),e(Aa,bi),e(bi,t7),e(Aa,r7),p(t,bv,c),p(t,Oa,c),e(Oa,yi),e(yi,bf),e(bf,a7),e(yi,o7),e(Oa,n7),e(Oa,wi),e(wi,yf),e(yf,s7),e(wi,l7),p(t,yv,c),p(t,Ue,c),e(Ue,i7),e(Ue,wf),e(wf,d7),e(Ue,c7),e(Ue,Ef),e(Ef,p7),e(Ue,m7),e(Ue,Ei),e(Ei,h7),e(Ue,f7),p(t,wv,c),p(t,Ca,c),e(Ca,xa),e(xa,$f),e($f,u7),e(xa,_7),e(xa,Tf),e(Tf,g7),e(xa,v7),e(Ca,b7),e(Ca,$i),e($i,kf),e(kf,y7),e($i,w7),p(t,Ev,c),p(t,Dr,c),e(Dr,Sa),e(Sa,Df),u(ds,Df,null),e(Dr,E7),e(Dr,Pf),e(Pf,$7),p(t,$v,c),p(t,Le,c),e(Le,T7),e(Le,Ti),e(Ti,k7),e(Le,D7),e(Le,Af),e(Af,P7),e(Le,A7),e(Le,Of),e(Of,O7),e(Le,C7),p(t,Tv,c),p(t,Dt,c),e(Dt,x7),e(Dt,Cf),e(Cf,S7),e(Dt,N7),e(Dt,ki),e(ki,I7),e(Dt,U7),p(t,kv,c),p(t,Na,c),e(Na,Di),e(Di,xf),e(xf,L7),e(Di,F7),e(Na,z7),e(Na,Pi),e(Pi,Sf),e(Sf,R7),e(Pi,G7),p(t,Dv,c),p(t,Fe,c),e(Fe,q7),e(Fe,Ai),e(Ai,M7),e(Fe,j7),e(Fe,Nf),e(Nf,B7),e(Fe,V7),e(Fe,If),e(If,H7),e(Fe,W7),p(t,Pv,c),p(t,X,c),e(X,Y7),e(X,Oi),e(Oi,Z7),e(X,K7),e(X,Uf),e(Uf,J7),e(X,Q7),e(X,Lf),e(Lf,X7),e(X,ek),e(X,Ff),e(Ff,tk),e(X,rk),e(X,Ci),e(Ci,ak),e(X,ok),p(t,Av,c),p(t,xi,c),e(xi,nk),p(t,Ov,c),u(cs,t,c),p(t,Cv,c),p(t,Si,c),e(Si,sk),p(t,xv,c),u(ps,t,c),p(t,Sv,c),p(t,Ni,c),e(Ni,lk),p(t,Nv,c),u(ms,t,c),p(t,Iv,c),p(t,Ii,c),e(Ii,ik),p(t,Uv,c),p(t,Ui,c),e(Ui,dk),p(t,Lv,c),u(hs,t,c),p(t,Fv,c),p(t,Ia,c),e(Ia,ck),e(Ia,zf),e(zf,pk),e(Ia,mk),p(t,zv,c),p(t,Pr,c),e(Pr,Ua),e(Ua,Rf),u(fs,Rf,null),e(Pr,hk),e(Pr,Gf),e(Gf,fk),p(t,Rv,c),p(t,ce,c),e(ce,uk),e(ce,Li),e(Li,_k),e(ce,gk),e(ce,qf),e(qf,vk),e(ce,bk),e(ce,Mf),e(Mf,yk),e(ce,wk),e(ce,jf),e(jf,Ek),e(ce,$k),p(t,Gv,c),p(t,Pt,c),e(Pt,Tk),e(Pt,us),e(us,kk),e(Pt,Dk),e(Pt,Bf),e(Bf,Pk),e(Pt,Ak),p(t,qv,c),p(t,Ar,c),e(Ar,La),e(La,Vf),u(_s,Vf,null),e(Ar,Ok),e(Ar,Hf),e(Hf,Ck),p(t,Mv,c),p(t,Fi,c),e(Fi,xk),p(t,jv,c),p(t,Fa,c),e(Fa,Sk),e(Fa,gs),e(gs,Wf),e(Wf,Nk),e(Fa,Ik),p(t,Bv,c),u(vs,t,c),p(t,Vv,c),p(t,At,c),e(At,Uk),e(At,bs),e(bs,Yf),e(Yf,Lk),e(At,Fk),e(At,ys),e(ys,Zf),e(Zf,zk),e(At,Rk),p(t,Hv,c),u(ws,t,c),p(t,Wv,c),u(Es,t,c),p(t,Yv,c),p(t,za,c),e(za,Gk),e(za,zi),e(zi,qk),e(za,Mk),p(t,Zv,c),p(t,Ri,c),e(Ri,jk),p(t,Kv,c),p(t,Gi,c),e(Gi,Bk),p(t,Jv,c),p(t,qi,c),e(qi,Kf),e(Kf,Jf),e(Jf,Vk),p(t,Qv,c),p(t,Ra,c),e(Ra,Hk),e(Ra,Qf),e(Qf,Wk),e(Ra,Yk),p(t,Xv,c),p(t,Mi,c),e(Mi,Zk),p(t,e1,c),u($s,t,c),p(t,t1,c),p(t,Ot,c),e(Ot,Kk),e(Ot,Xf),e(Xf,Jk),e(Ot,Qk),e(Ot,eu),e(eu,Xk),e(Ot,eD),p(t,r1,c),p(t,ji,c),e(ji,tD),p(t,a1,c),u(Ts,t,c),p(t,o1,c),p(t,Ct,c),e(Ct,rD),e(Ct,tu),e(tu,aD),e(Ct,oD),e(Ct,ru),e(ru,nD),e(Ct,sD),p(t,n1,c),p(t,xt,c),e(xt,lD),e(xt,au),e(au,iD),e(xt,dD),e(xt,ks),e(ks,ou),e(ou,cD),e(xt,pD),p(t,s1,c),u(Ds,t,c),p(t,l1,c),p(t,Bi,c),e(Bi,mD),p(t,i1,c),u(Ps,t,c),p(t,d1,c),p(t,Vi,c),e(Vi,hD),p(t,c1,c),u(As,t,c),p(t,p1,c),p(t,Hi,c),e(Hi,fD),p(t,m1,c),p(t,Wi,c),e(Wi,nu),e(nu,su),e(su,uD),p(t,h1,c),p(t,Ga,c),e(Ga,_D),e(Ga,lu),e(lu,gD),e(Ga,vD),p(t,f1,c),p(t,Yi,c),e(Yi,Os),e(Os,bD),e(Os,iu),e(iu,yD),e(Os,wD),p(t,u1,c),u(Cs,t,c),p(t,_1,c),p(t,xs,c),e(xs,du),e(du,ED),p(t,g1,c),u(Ss,t,c),p(t,v1,c),p(t,St,c),e(St,$D),e(St,cu),e(cu,TD),e(St,kD),e(St,pu),e(pu,DD),e(St,PD),p(t,b1,c),p(t,Zi,c),e(Zi,AD),p(t,y1,c),u(Ns,t,c),p(t,w1,c),p(t,Ki,c),e(Ki,OD),p(t,E1,c),p(t,qa,c),e(qa,CD),e(qa,mu),e(mu,xD),e(qa,SD),p(t,$1,c),p(t,Or,c),e(Or,Ma),e(Ma,hu),u(Is,hu,null),e(Or,ND),e(Or,fu),e(fu,ID),p(t,T1,c),p(t,ja,c),e(ja,UD),e(ja,Ji),e(Ji,LD),e(ja,FD),p(t,k1,c),p(t,pe,c),e(pe,zD),e(pe,Us),e(Us,RD),e(pe,GD),e(pe,Ls),e(Ls,qD),e(pe,MD),e(pe,Fs),e(Fs,jD),e(pe,BD),e(pe,zs),e(zs,VD),e(pe,HD),p(t,D1,c),p(t,Ba,c),e(Ba,WD),e(Ba,Qi),e(Qi,YD),e(Ba,ZD),p(t,P1,c),p(t,Xi,c),p(t,A1,c),p(t,Cr,c),e(Cr,Va),e(Va,uu),u(Rs,uu,null),e(Cr,KD),e(Cr,_u),e(_u,JD),p(t,O1,c),p(t,ed,c),e(ed,QD),p(t,C1,c),p(t,Nt,c),e(Nt,XD),e(Nt,Gs),e(Gs,e9),e(Nt,t9),e(Nt,qs),e(qs,r9),e(Nt,a9),p(t,x1,c),p(t,td,c),e(td,o9),p(t,S1,c),u(Ms,t,c),p(t,N1,c),p(t,rd,c),e(rd,n9),p(t,I1,c),p(t,It,c),e(It,s9),e(It,gu),e(gu,l9),e(It,i9),e(It,vu),e(vu,d9),e(It,c9),p(t,U1,c),p(t,xr,c),e(xr,Ha),e(Ha,bu),u(js,bu,null),e(xr,p9),e(xr,yu),e(yu,m9),p(t,L1,c),p(t,ad,c),e(ad,h9),p(t,F1,c),p(t,ze,c),e(ze,f9),e(ze,wu),e(wu,u9),e(ze,_9),e(ze,Eu),e(Eu,g9),e(ze,v9),e(ze,$u),e($u,b9),e(ze,y9),p(t,z1,c),p(t,Ut,c),e(Ut,w9),e(Ut,Tu),e(Tu,E9),e(Ut,$9),e(Ut,ku),e(ku,T9),e(Ut,k9),p(t,R1,c),u(Bs,t,c),p(t,G1,c),p(t,Wa,c),e(Wa,D9),e(Wa,Vs),e(Vs,P9),e(Wa,A9),p(t,q1,c),p(t,Sr,c),e(Sr,Ya),e(Ya,Du),u(Hs,Du,null),e(Sr,O9),e(Sr,Pu),e(Pu,C9),p(t,M1,c),p(t,od,c),e(od,x9),p(t,j1,c),u(Ws,t,c),p(t,B1,c),p(t,Lt,c),e(Lt,S9),e(Lt,Au),e(Au,N9),e(Lt,I9),e(Lt,Ou),e(Ou,U9),e(Lt,L9),p(t,V1,c),p(t,nd,c),e(nd,F9),p(t,H1,c),u(Ys,t,c),p(t,W1,c),p(t,sd,c),e(sd,z9),p(t,Y1,c),p(t,Za,c),e(Za,R9),e(Za,Cu),e(Cu,G9),e(Za,q9),p(t,Z1,c),p(t,rt,c),e(rt,xu),e(xu,M9),e(rt,j9),e(rt,Su),e(Su,B9),e(rt,V9),e(rt,Nu),e(Nu,H9),e(rt,W9),p(t,K1,c),p(t,ld,c),e(ld,Y9),p(t,J1,c),u(Zs,t,c),p(t,Q1,c),p(t,id,c),e(id,Z9),p(t,X1,c),p(t,Re,c),e(Re,K9),e(Re,Iu),e(Iu,J9),e(Re,Q9),e(Re,Uu),e(Uu,X9),e(Re,eP),e(Re,Lu),e(Lu,tP),e(Re,rP),p(t,eb,c),p(t,Nr,c),e(Nr,Ka),e(Ka,Fu),u(Ks,Fu,null),e(Nr,aP),e(Nr,zu),e(zu,oP),p(t,tb,c),p(t,Ft,c),e(Ft,nP),e(Ft,Ru),e(Ru,sP),e(Ft,lP),e(Ft,Gu),e(Gu,iP),e(Ft,dP),p(t,rb,c),p(t,dd,c),e(dd,cP),p(t,ab,c),p(t,cd,c),e(cd,pP),p(t,ob,c),p(t,Ja,c),e(Ja,mP),e(Ja,qu),e(qu,hP),e(Ja,fP),p(t,nb,c),u(Js,t,c),p(t,sb,c),p(t,j,c),e(j,uP),e(j,Mu),e(Mu,_P),e(j,gP),e(j,ju),e(ju,vP),e(j,bP),e(j,Bu),e(Bu,yP),e(j,wP),e(j,Vu),e(Vu,EP),e(j,$P),e(j,Hu),e(Hu,TP),e(j,kP),e(j,Wu),e(Wu,DP),e(j,PP),p(t,lb,c),p(t,pd,c),e(pd,AP),p(t,ib,c),p(t,Ir,c),e(Ir,Qa),e(Qa,Yu),u(Qs,Yu,null),e(Ir,OP),e(Ir,Zu),e(Zu,CP),p(t,db,c),u(Xa,t,c),p(t,cb,c),p(t,Ge,c),e(Ge,xP),e(Ge,Xs),e(Xs,SP),e(Ge,NP),e(Ge,md),e(md,IP),e(Ge,UP),e(Ge,el),e(el,LP),e(Ge,FP),p(t,pb,c),p(t,qe,c),e(qe,Ku),e(Ku,zP),e(qe,RP),e(qe,Ju),e(Ju,GP),e(qe,qP),e(qe,Qu),e(Qu,MP),e(qe,jP),e(qe,Xu),e(Xu,BP),p(t,mb,c),p(t,hd,c),e(hd,VP),p(t,hb,c),p(t,tl,c),e(tl,e_),e(e_,HP),e(tl,WP),p(t,fb,c),p(t,fd,c),e(fd,YP),p(t,ub,c),u(rl,t,c),p(t,_b,c),p(t,zt,c),e(zt,ZP),e(zt,t_),e(t_,KP),e(zt,JP),e(zt,r_),e(r_,QP),e(zt,XP),p(t,gb,c),u(al,t,c),p(t,vb,c),p(t,Rt,c),e(Rt,eA),e(Rt,a_),e(a_,tA),e(Rt,rA),e(Rt,ol),e(ol,aA),e(Rt,oA),p(t,bb,c),p(t,eo,c),e(eo,nA),e(eo,ud),e(ud,sA),e(eo,lA),p(t,yb,c),p(t,_d,c),e(_d,iA),p(t,wb,c),p(t,nl,c),e(nl,o_),e(o_,dA),e(nl,cA),p(t,Eb,c),u(sl,t,c),p(t,$b,c),p(t,gd,c),e(gd,pA),p(t,Tb,c),u(ll,t,c),p(t,kb,c),p(t,il,c),e(il,n_),e(n_,mA),e(il,hA),p(t,Db,c),u(dl,t,c),p(t,Pb,c),p(t,vd,c),e(vd,fA),p(t,Ab,c),u(cl,t,c),p(t,Ob,c),p(t,bd,c),e(bd,uA),p(t,Cb,c),p(t,to,c),e(to,_A),e(to,pl),e(pl,gA),e(to,vA),p(t,xb,c),p(t,ml,c),e(ml,s_),e(s_,bA),e(ml,yA),p(t,Sb,c),p(t,Gt,c),e(Gt,wA),e(Gt,l_),e(l_,EA),e(Gt,$A),e(Gt,i_),e(i_,TA),e(Gt,kA),p(t,Nb,c),p(t,ro,c),e(ro,DA),e(ro,d_),e(d_,PA),e(ro,AA),p(t,Ib,c),u(hl,t,c),p(t,Ub,c),p(t,yd,c),e(yd,OA),p(t,Lb,c),p(t,Me,c),e(Me,c_),e(c_,CA),e(Me,xA),e(Me,p_),e(p_,SA),e(Me,NA),e(Me,fl),e(fl,IA),e(fl,m_),e(m_,UA),e(fl,LA),e(Me,FA),e(Me,ul),e(ul,zA),e(ul,h_),e(h_,RA),e(ul,GA),p(t,Fb,c),p(t,_l,c),e(_l,at),e(at,qA),e(at,f_),e(f_,MA),e(at,jA),e(at,u_),e(u_,BA),e(at,VA),e(at,__),e(__,HA),e(at,WA),p(t,zb,c),p(t,ao,c),e(ao,YA),e(ao,g_),e(g_,ZA),e(ao,KA),p(t,Rb,c),u(gl,t,c),p(t,Gb,c),p(t,Ur,c),e(Ur,v_),e(v_,JA),e(Ur,QA),e(Ur,b_),e(b_,XA),e(Ur,eO),p(t,qb,c),p(t,qt,c),e(qt,tO),e(qt,y_),e(y_,rO),e(qt,aO),e(qt,w_),e(w_,oO),e(qt,nO),p(t,Mb,c),p(t,wd,c),e(wd,sO),p(t,jb,c),p(t,me,c),e(me,E_),e(E_,lO),e(me,iO),e(me,$_),e($_,dO),e(me,cO),e(me,vl),e(vl,pO),e(vl,T_),e(T_,mO),e(vl,hO),e(me,fO),e(me,Lr),e(Lr,uO),e(Lr,k_),e(k_,_O),e(Lr,gO),e(Lr,D_),e(D_,vO),e(Lr,bO),e(me,yO),e(me,P_),e(P_,wO),p(t,Bb,c),p(t,Ed,c),e(Ed,EO),p(t,Vb,c),p(t,oo,c),e(oo,Fr),e(Fr,$O),e(Fr,A_),e(A_,TO),e(Fr,kO),e(Fr,O_),e(O_,DO),e(Fr,PO),e(oo,AO),e(oo,Te),e(Te,OO),e(Te,C_),e(C_,CO),e(Te,xO),e(Te,x_),e(x_,SO),e(Te,NO),e(Te,S_),e(S_,IO),e(Te,UO),e(Te,N_),e(N_,LO),e(Te,FO),p(t,Hb,c),p(t,zr,c),e(zr,no),e(no,I_),u(bl,I_,null),e(zr,zO),e(zr,U_),e(U_,RO),p(t,Wb,c),p(t,so,c),e(so,GO),e(so,yl),e(yl,qO),e(so,MO),p(t,Yb,c),p(t,wl,c),e(wl,L_),e(L_,jO),e(wl,BO),p(t,Zb,c),p(t,El,c),e(El,F_),e(F_,VO),e(El,HO),p(t,Kb,c),p(t,ee,c),e(ee,z_),e(z_,$l),e($l,WO),e($l,R_),e(R_,YO),e($l,ZO),e(ee,KO),e(ee,Tl),e(Tl,$d),e($d,G_),e(G_,JO),e($d,QO),e(Tl,XO),e(Tl,Rr),e(Rr,kl),e(kl,eC),e(kl,q_),e(q_,tC),e(kl,rC),e(Rr,aC),e(Rr,Dl),e(Dl,oC),e(Dl,M_),e(M_,nC),e(Dl,sC),e(Rr,lC),e(Rr,Pl),e(Pl,iC),e(Pl,j_),e(j_,dC),e(Pl,cC),e(ee,pC),e(ee,B_),e(B_,Gr),e(Gr,mC),e(Gr,V_),e(V_,hC),e(Gr,fC),e(Gr,H_),e(H_,uC),e(Gr,_C),e(ee,gC),e(ee,W_),e(W_,ot),e(ot,vC),e(ot,Y_),e(Y_,bC),e(ot,yC),e(ot,Z_),e(Z_,wC),e(ot,EC),e(ot,K_),e(K_,$C),e(ot,TC),e(ee,kC),e(ee,J_),e(J_,qr),e(qr,DC),e(qr,Q_),e(Q_,PC),e(qr,AC),e(qr,X_),e(X_,OC),e(qr,CC),e(ee,xC),e(ee,Al),e(Al,eg),e(eg,SC),e(Al,NC),e(Al,Ol),e(Ol,ke),e(ke,IC),e(ke,tg),e(tg,UC),e(ke,LC),e(ke,rg),e(rg,FC),e(ke,zC),e(ke,ag),e(ag,RC),e(ke,GC),e(ke,og),e(og,qC),e(ke,MC),e(Ol,jC),e(Ol,Cl),e(Cl,BC),e(Cl,ng),e(ng,VC),e(Cl,HC),p(t,Jb,c),p(t,Td,c),e(Td,sg),e(sg,WC),p(t,Qb,c),p(t,lo,c),e(lo,xl),e(xl,YC),e(xl,Sl),e(Sl,ZC),e(xl,KC),e(lo,JC),e(lo,Mr),e(Mr,QC),e(Mr,Nl),e(Nl,XC),e(Mr,ex),e(Mr,lg),e(lg,tx),e(Mr,rx),p(t,Xb,c),p(t,jr,c),e(jr,io),e(io,ig),u(Il,ig,null),e(jr,ax),e(jr,dg),e(dg,ox),p(t,ey,c),p(t,je,c),e(je,nx),e(je,cg),e(cg,sx),e(je,lx),e(je,Ul),e(Ul,ix),e(je,dx),e(je,Ll),e(Ll,cx),e(je,px),p(t,ty,c),u(co,t,c),p(t,ry,c),p(t,kd,c),e(kd,pg),e(pg,mx),p(t,ay,c),p(t,Mt,c),e(Mt,mg),e(mg,hx),e(Mt,fx),e(Mt,hg),e(hg,ux),e(Mt,_x),e(Mt,fg),e(fg,gx),p(t,oy,c),p(t,Br,c),e(Br,ug),e(ug,vx),e(Br,bx),e(Br,Fl),e(Fl,yx),e(Br,wx),p(t,ny,c),p(t,Vr,c),e(Vr,_g),e(_g,Ex),e(Vr,$x),e(Vr,gg),e(gg,Tx),e(Vr,kx),p(t,sy,c),u(zl,t,c),p(t,ly,c),p(t,Dd,c),e(Dd,vg),e(vg,Dx),p(t,iy,c),p(t,po,c),e(po,Rl),e(Rl,Px),e(Rl,bg),e(bg,Ax),e(Rl,Ox),e(po,Cx),e(po,De),e(De,xx),e(De,yg),e(yg,Sx),e(De,Nx),e(De,wg),e(wg,Ix),e(De,Ux),e(De,Eg),e(Eg,Lx),e(De,Fx),e(De,$g),e($g,zx),e(De,Rx),p(t,dy,c),p(t,jt,c),e(jt,Gx),e(jt,Tg),e(Tg,qx),e(jt,Mx),e(jt,Gl),e(Gl,jx),e(jt,Bx),p(t,cy,c),p(t,Pd,c),e(Pd,Vx),p(t,py,c),p(t,w,c),e(w,Hx),e(w,Ad),e(Ad,Wx),e(w,kg),e(w,Yx),e(w,Od),e(Od,Zx),e(w,Dg),e(w,Kx),e(w,Cd),e(Cd,Jx),e(w,Pg),e(w,Qx),e(w,xd),e(xd,Xx),e(w,Ag),e(w,eS),e(w,Sd),e(Sd,tS),e(w,Og),e(w,rS),e(w,Nd),e(Nd,aS),e(w,Cg),e(w,oS),e(w,Id),e(Id,nS),e(w,xg),e(w,sS),e(w,Ud),e(Ud,lS),e(w,Sg),e(w,iS),e(w,Ld),e(Ld,dS),e(w,Ng),e(w,cS),e(w,Fd),e(Fd,pS),e(w,Ig),e(w,mS),e(w,zd),e(zd,hS),e(w,Ug),e(w,fS),e(w,Rd),e(Rd,uS),e(w,Lg),e(w,_S),e(w,Gd),e(Gd,gS),e(w,Fg),e(w,vS),e(w,qd),e(qd,bS),e(w,zg),e(w,yS),e(w,Md),e(Md,wS),e(w,Rg),e(w,ES),e(w,jd),e(jd,$S),e(w,Gg),e(w,TS),e(w,Bd),e(Bd,kS),e(w,qg),e(w,DS),e(w,Vd),e(Vd,PS),e(w,Mg),e(w,AS),e(w,Hd),e(Hd,OS),e(w,jg),e(w,CS),e(w,Wd),e(Wd,xS),e(w,Bg),e(w,SS),e(w,Yd),e(Yd,NS),e(w,Vg),e(w,IS),e(w,Zd),e(Zd,US),e(w,Hg),e(w,LS),e(w,Kd),e(Kd,FS),e(w,Wg),e(w,zS),my=!0},p(t,[c]){const ql={};c&2&&(ql.$$scope={dirty:c,ctx:t}),Jr.$set(ql);const Yg={};c&2&&(Yg.$$scope={dirty:c,ctx:t}),la.$set(Yg);const Zg={};c&2&&(Zg.$$scope={dirty:c,ctx:t}),pa.$set(Zg);const Kg={};c&2&&(Kg.$$scope={dirty:c,ctx:t}),fa.$set(Kg);const Hr={};c&2&&(Hr.$$scope={dirty:c,ctx:t}),ya.$set(Hr);const Jg={};c&2&&(Jg.$$scope={dirty:c,ctx:t}),Xa.$set(Jg);const Qg={};c&2&&(Qg.$$scope={dirty:c,ctx:t}),co.$set(Qg)},i(t){my||(_(P.$$.fragment,t),_(Jr.$$.fragment,t),_(Lo.$$.fragment,t),_(Fo.$$.fragment,t),_(zo.$$.fragment,t),_(Ro.$$.fragment,t),_(qo.$$.fragment,t),_(jo.$$.fragment,t),_(Bo.$$.fragment,t),_(Vo.$$.fragment,t),_(Wo.$$.fragment,t),_(Yo.$$.fragment,t),_(Zo.$$.fragment,t),_(Jo.$$.fragment,t),_(Qo.$$.fragment,t),_(en.$$.fragment,t),_(rn.$$.fragment,t),_(an.$$.fragment,t),_(nn.$$.fragment,t),_(ln.$$.fragment,t),_(la.$$.fragment,t),_(dn.$$.fragment,t),_(pn.$$.fragment,t),_(mn.$$.fragment,t),_(fn.$$.fragment,t),_(_n.$$.fragment,t),_(pa.$$.fragment,t),_(bn.$$.fragment,t),_(yn.$$.fragment,t),_(En.$$.fragment,t),_(kn.$$.fragment,t),_(fa.$$.fragment,t),_(An.$$.fragment,t),_(On.$$.fragment,t),_(Cn.$$.fragment,t),_(xn.$$.fragment,t),_(Nn.$$.fragment,t),_(Ln.$$.fragment,t),_(zn.$$.fragment,t),_(Rn.$$.fragment,t),_(qn.$$.fragment,t),_(Mn.$$.fragment,t),_(jn.$$.fragment,t),_(Bn.$$.fragment,t),_(Vn.$$.fragment,t),_(Wn.$$.fragment,t),_(ya.$$.fragment,t),_(Kn.$$.fragment,t),_(Jn.$$.fragment,t),_(Qn.$$.fragment,t),_(es.$$.fragment,t),_(ts.$$.fragment,t),_(rs.$$.fragment,t),_(os.$$.fragment,t),_(ns.$$.fragment,t),_(ss.$$.fragment,t),_(ls.$$.fragment,t),_(is.$$.fragment,t),_(ds.$$.fragment,t),_(cs.$$.fragment,t),_(ps.$$.fragment,t),_(ms.$$.fragment,t),_(hs.$$.fragment,t),_(fs.$$.fragment,t),_(_s.$$.fragment,t),_(vs.$$.fragment,t),_(ws.$$.fragment,t),_(Es.$$.fragment,t),_($s.$$.fragment,t),_(Ts.$$.fragment,t),_(Ds.$$.fragment,t),_(Ps.$$.fragment,t),_(As.$$.fragment,t),_(Cs.$$.fragment,t),_(Ss.$$.fragment,t),_(Ns.$$.fragment,t),_(Is.$$.fragment,t),_(Rs.$$.fragment,t),_(Ms.$$.fragment,t),_(js.$$.fragment,t),_(Bs.$$.fragment,t),_(Hs.$$.fragment,t),_(Ws.$$.fragment,t),_(Ys.$$.fragment,t),_(Zs.$$.fragment,t),_(Ks.$$.fragment,t),_(Js.$$.fragment,t),_(Qs.$$.fragment,t),_(Xa.$$.fragment,t),_(rl.$$.fragment,t),_(al.$$.fragment,t),_(sl.$$.fragment,t),_(ll.$$.fragment,t),_(dl.$$.fragment,t),_(cl.$$.fragment,t),_(hl.$$.fragment,t),_(gl.$$.fragment,t),_(bl.$$.fragment,t),_(Il.$$.fragment,t),_(co.$$.fragment,t),_(zl.$$.fragment,t),my=!0)},o(t){g(P.$$.fragment,t),g(Jr.$$.fragment,t),g(Lo.$$.fragment,t),g(Fo.$$.fragment,t),g(zo.$$.fragment,t),g(Ro.$$.fragment,t),g(qo.$$.fragment,t),g(jo.$$.fragment,t),g(Bo.$$.fragment,t),g(Vo.$$.fragment,t),g(Wo.$$.fragment,t),g(Yo.$$.fragment,t),g(Zo.$$.fragment,t),g(Jo.$$.fragment,t),g(Qo.$$.fragment,t),g(en.$$.fragment,t),g(rn.$$.fragment,t),g(an.$$.fragment,t),g(nn.$$.fragment,t),g(ln.$$.fragment,t),g(la.$$.fragment,t),g(dn.$$.fragment,t),g(pn.$$.fragment,t),g(mn.$$.fragment,t),g(fn.$$.fragment,t),g(_n.$$.fragment,t),g(pa.$$.fragment,t),g(bn.$$.fragment,t),g(yn.$$.fragment,t),g(En.$$.fragment,t),g(kn.$$.fragment,t),g(fa.$$.fragment,t),g(An.$$.fragment,t),g(On.$$.fragment,t),g(Cn.$$.fragment,t),g(xn.$$.fragment,t),g(Nn.$$.fragment,t),g(Ln.$$.fragment,t),g(zn.$$.fragment,t),g(Rn.$$.fragment,t),g(qn.$$.fragment,t),g(Mn.$$.fragment,t),g(jn.$$.fragment,t),g(Bn.$$.fragment,t),g(Vn.$$.fragment,t),g(Wn.$$.fragment,t),g(ya.$$.fragment,t),g(Kn.$$.fragment,t),g(Jn.$$.fragment,t),g(Qn.$$.fragment,t),g(es.$$.fragment,t),g(ts.$$.fragment,t),g(rs.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(ss.$$.fragment,t),g(ls.$$.fragment,t),g(is.$$.fragment,t),g(ds.$$.fragment,t),g(cs.$$.fragment,t),g(ps.$$.fragment,t),g(ms.$$.fragment,t),g(hs.$$.fragment,t),g(fs.$$.fragment,t),g(_s.$$.fragment,t),g(vs.$$.fragment,t),g(ws.$$.fragment,t),g(Es.$$.fragment,t),g($s.$$.fragment,t),g(Ts.$$.fragment,t),g(Ds.$$.fragment,t),g(Ps.$$.fragment,t),g(As.$$.fragment,t),g(Cs.$$.fragment,t),g(Ss.$$.fragment,t),g(Ns.$$.fragment,t),g(Is.$$.fragment,t),g(Rs.$$.fragment,t),g(Ms.$$.fragment,t),g(js.$$.fragment,t),g(Bs.$$.fragment,t),g(Hs.$$.fragment,t),g(Ws.$$.fragment,t),g(Ys.$$.fragment,t),g(Zs.$$.fragment,t),g(Ks.$$.fragment,t),g(Js.$$.fragment,t),g(Qs.$$.fragment,t),g(Xa.$$.fragment,t),g(rl.$$.fragment,t),g(al.$$.fragment,t),g(sl.$$.fragment,t),g(ll.$$.fragment,t),g(dl.$$.fragment,t),g(cl.$$.fragment,t),g(hl.$$.fragment,t),g(gl.$$.fragment,t),g(bl.$$.fragment,t),g(Il.$$.fragment,t),g(co.$$.fragment,t),g(zl.$$.fragment,t),my=!1},d(t){r(E),t&&r(O),t&&r(T),v(P),t&&r(te),t&&r(M),t&&r(F),t&&r(I),t&&r(Ke),t&&r(Ae),t&&r(Z),t&&r(V),t&&r(rr),t&&r(N),t&&r(ov),v(Jr,t),t&&r(nv),t&&r(Qr),t&&r(sv),v(Lo,t),t&&r(lv),t&&r(dt),t&&r(iv),t&&r(ar),v(Fo),t&&r(dv),t&&r(b),v(zo),v(Ro),v(qo),v(jo),v(Bo),v(Vo),v(Wo),v(Yo),v(Zo),v(Jo),v(Qo),v(en),v(rn),v(an),v(nn),v(ln),v(la),v(dn),v(pn),v(mn),v(fn),v(_n),v(pa),v(bn),v(yn),v(En),v(kn),v(fa),v(An),v(On),v(Cn),v(xn),v(Nn),v(Ln),v(zn),v(Rn),v(qn),v(Mn),t&&r(cv),t&&r(fr),v(jn),t&&r(pv),t&&r(tt),v(Bn),v(Vn),v(Wn),v(ya),t&&r(mv),t&&r(br),v(Kn),t&&r(hv),t&&r(q),v(Jn),v(Qn),v(es),v(ts),v(rs),v(os),v(ns),t&&r(fv),t&&r($r),v(ss),t&&r(uv),t&&r(Tr),v(ls),t&&r(_v),t&&r(kr),v(is),t&&r(gv),t&&r(de),t&&r(vv),t&&r(Aa),t&&r(bv),t&&r(Oa),t&&r(yv),t&&r(Ue),t&&r(wv),t&&r(Ca),t&&r(Ev),t&&r(Dr),v(ds),t&&r($v),t&&r(Le),t&&r(Tv),t&&r(Dt),t&&r(kv),t&&r(Na),t&&r(Dv),t&&r(Fe),t&&r(Pv),t&&r(X),t&&r(Av),t&&r(xi),t&&r(Ov),v(cs,t),t&&r(Cv),t&&r(Si),t&&r(xv),v(ps,t),t&&r(Sv),t&&r(Ni),t&&r(Nv),v(ms,t),t&&r(Iv),t&&r(Ii),t&&r(Uv),t&&r(Ui),t&&r(Lv),v(hs,t),t&&r(Fv),t&&r(Ia),t&&r(zv),t&&r(Pr),v(fs),t&&r(Rv),t&&r(ce),t&&r(Gv),t&&r(Pt),t&&r(qv),t&&r(Ar),v(_s),t&&r(Mv),t&&r(Fi),t&&r(jv),t&&r(Fa),t&&r(Bv),v(vs,t),t&&r(Vv),t&&r(At),t&&r(Hv),v(ws,t),t&&r(Wv),v(Es,t),t&&r(Yv),t&&r(za),t&&r(Zv),t&&r(Ri),t&&r(Kv),t&&r(Gi),t&&r(Jv),t&&r(qi),t&&r(Qv),t&&r(Ra),t&&r(Xv),t&&r(Mi),t&&r(e1),v($s,t),t&&r(t1),t&&r(Ot),t&&r(r1),t&&r(ji),t&&r(a1),v(Ts,t),t&&r(o1),t&&r(Ct),t&&r(n1),t&&r(xt),t&&r(s1),v(Ds,t),t&&r(l1),t&&r(Bi),t&&r(i1),v(Ps,t),t&&r(d1),t&&r(Vi),t&&r(c1),v(As,t),t&&r(p1),t&&r(Hi),t&&r(m1),t&&r(Wi),t&&r(h1),t&&r(Ga),t&&r(f1),t&&r(Yi),t&&r(u1),v(Cs,t),t&&r(_1),t&&r(xs),t&&r(g1),v(Ss,t),t&&r(v1),t&&r(St),t&&r(b1),t&&r(Zi),t&&r(y1),v(Ns,t),t&&r(w1),t&&r(Ki),t&&r(E1),t&&r(qa),t&&r($1),t&&r(Or),v(Is),t&&r(T1),t&&r(ja),t&&r(k1),t&&r(pe),t&&r(D1),t&&r(Ba),t&&r(P1),t&&r(Xi),t&&r(A1),t&&r(Cr),v(Rs),t&&r(O1),t&&r(ed),t&&r(C1),t&&r(Nt),t&&r(x1),t&&r(td),t&&r(S1),v(Ms,t),t&&r(N1),t&&r(rd),t&&r(I1),t&&r(It),t&&r(U1),t&&r(xr),v(js),t&&r(L1),t&&r(ad),t&&r(F1),t&&r(ze),t&&r(z1),t&&r(Ut),t&&r(R1),v(Bs,t),t&&r(G1),t&&r(Wa),t&&r(q1),t&&r(Sr),v(Hs),t&&r(M1),t&&r(od),t&&r(j1),v(Ws,t),t&&r(B1),t&&r(Lt),t&&r(V1),t&&r(nd),t&&r(H1),v(Ys,t),t&&r(W1),t&&r(sd),t&&r(Y1),t&&r(Za),t&&r(Z1),t&&r(rt),t&&r(K1),t&&r(ld),t&&r(J1),v(Zs,t),t&&r(Q1),t&&r(id),t&&r(X1),t&&r(Re),t&&r(eb),t&&r(Nr),v(Ks),t&&r(tb),t&&r(Ft),t&&r(rb),t&&r(dd),t&&r(ab),t&&r(cd),t&&r(ob),t&&r(Ja),t&&r(nb),v(Js,t),t&&r(sb),t&&r(j),t&&r(lb),t&&r(pd),t&&r(ib),t&&r(Ir),v(Qs),t&&r(db),v(Xa,t),t&&r(cb),t&&r(Ge),t&&r(pb),t&&r(qe),t&&r(mb),t&&r(hd),t&&r(hb),t&&r(tl),t&&r(fb),t&&r(fd),t&&r(ub),v(rl,t),t&&r(_b),t&&r(zt),t&&r(gb),v(al,t),t&&r(vb),t&&r(Rt),t&&r(bb),t&&r(eo),t&&r(yb),t&&r(_d),t&&r(wb),t&&r(nl),t&&r(Eb),v(sl,t),t&&r($b),t&&r(gd),t&&r(Tb),v(ll,t),t&&r(kb),t&&r(il),t&&r(Db),v(dl,t),t&&r(Pb),t&&r(vd),t&&r(Ab),v(cl,t),t&&r(Ob),t&&r(bd),t&&r(Cb),t&&r(to),t&&r(xb),t&&r(ml),t&&r(Sb),t&&r(Gt),t&&r(Nb),t&&r(ro),t&&r(Ib),v(hl,t),t&&r(Ub),t&&r(yd),t&&r(Lb),t&&r(Me),t&&r(Fb),t&&r(_l),t&&r(zb),t&&r(ao),t&&r(Rb),v(gl,t),t&&r(Gb),t&&r(Ur),t&&r(qb),t&&r(qt),t&&r(Mb),t&&r(wd),t&&r(jb),t&&r(me),t&&r(Bb),t&&r(Ed),t&&r(Vb),t&&r(oo),t&&r(Hb),t&&r(zr),v(bl),t&&r(Wb),t&&r(so),t&&r(Yb),t&&r(wl),t&&r(Zb),t&&r(El),t&&r(Kb),t&&r(ee),t&&r(Jb),t&&r(Td),t&&r(Qb),t&&r(lo),t&&r(Xb),t&&r(jr),v(Il),t&&r(ey),t&&r(je),t&&r(ty),v(co,t),t&&r(ry),t&&r(kd),t&&r(ay),t&&r(Mt),t&&r(oy),t&&r(Br),t&&r(ny),t&&r(Vr),t&&r(sy),v(zl,t),t&&r(ly),t&&r(Dd),t&&r(iy),t&&r(po),t&&r(dy),t&&r(jt),t&&r(cy),t&&r(Pd),t&&r(py),t&&r(w)}}}const wM={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"specific-gpus-selection",title:"Specific GPUs Selection"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"},{local:"pytorch-fully-sharded-data-parallel",title:"PyTorch Fully Sharded Data parallel"},{local:"using-trainer-for-accelerated-pytorch-training-on-mac",title:"Using Trainer for accelerated PyTorch Training on Mac "}],title:"Trainer Integrations"}],title:"Trainer"};function EM(Y){return cM(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class OM extends sM{constructor(E){super();lM(this,E,EM,yM,iM,{})}}export{OM as default,wM as metadata};
