import{S as pk,i as hk,s as fk,e as r,k as l,w as g,t as s,M as uk,c as a,d as t,m as d,a as n,x as _,h as i,b as c,N as ck,G as e,g as h,y as b,q as v,o as y,B as w,v as gk,L as Ve}from"../../chunks/vendor-hf-doc-builder.js";import{T as um}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as U}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ee}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Xe}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function _k(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import AutoModel

model = AutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert".
model.push_to_hub("my-finetuned-bert")

# Push the model to an organization with the name "my-finetuned-bert".
model.push_to_hub("huggingface/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function bk(D){let f,T;return{c(){f=r("p"),T=s("Passing `use_auth_token=True\u201C is required when you want to use a private model.")},l($){f=a($,"P",{});var u=n(f);T=i(u,"Passing `use_auth_token=True\u201C is required when you want to use a private model."),u.forEach(t)},m($,u){h($,f,u),e(f,T)},d($){$&&t(f)}}}function vk(D){let f,T,$,u,k;return{c(){f=r("p"),T=s("Activate the special "),$=r("a"),u=s("\u201Coffline-mode\u201D"),k=s(` to
use this method in a firewalled environment.`),this.h()},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Activate the special "),$=a(x,"A",{href:!0,rel:!0});var le=n($);u=i(le,"\u201Coffline-mode\u201D"),le.forEach(t),k=i(x,` to
use this method in a firewalled environment.`),x.forEach(t),this.h()},h(){c($,"href","https://huggingface.co/transformers/installation.html#offline-mode"),c($,"rel","nofollow")},m(m,x){h(m,f,x),e(f,T),e(f,$),e($,u),e(f,k)},d(m){m&&t(f)}}}function yk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import BertConfig, BertModel

# Download model and configuration from huggingface.co and cache.
model = BertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = BertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = BertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./tf_model/my_tf_model_config.json")
model = BertModel.from_pretrained("./tf_model/my_tf_checkpoint.ckpt.index", from_tf=True, config=config)
# Loading from a Flax checkpoint file instead of a PyTorch model (slower)
model = BertModel.from_pretrained("bert-base-uncased", from_flax=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, BertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./tf_model/my_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;./tf_model/my_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Flax checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = BertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, from_flax=<span class="hljs-literal">True</span>)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function wk(D){let f,T;return{c(){f=r("p"),T=s("This API is experimental and may have some slight breaking changes in the next releases.")},l($){f=a($,"P",{});var u=n(f);T=i(u,"This API is experimental and may have some slight breaking changes in the next releases."),u.forEach(t)},m($,u){h($,f,u),e(f,T)},d($){$&&t(f)}}}function $k(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import TFAutoModel

model = TFAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert".
model.push_to_hub("my-finetuned-bert")

# Push the model to an organization with the name "my-finetuned-bert".
model.push_to_hub("huggingface/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function xk(D){let f,T,$,u,k;return{c(){f=r("p"),T=s("Passing "),$=r("code"),u=s("use_auth_token=True"),k=s(" is required when you want to use a private model.")},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Passing "),$=a(x,"CODE",{});var le=n($);u=i(le,"use_auth_token=True"),le.forEach(t),k=i(x," is required when you want to use a private model."),x.forEach(t)},m(m,x){h(m,f,x),e(f,T),e(f,$),e($,u),e(f,k)},d(m){m&&t(f)}}}function Tk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import BertConfig, TFBertModel

# Download model and configuration from huggingface.co and cache.
model = TFBertModel.from_pretrained("bert-base-uncased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = TFBertModel.from_pretrained("./test/saved_model/")
# Update configuration during loading.
model = TFBertModel.from_pretrained("bert-base-uncased", output_attentions=True)
assert model.config.output_attentions == True
# Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/my_pt_model_config.json")
model = TFBertModel.from_pretrained("./pt_model/my_pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, TFBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> model.config.output_attentions == <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a Pytorch model file instead of a TensorFlow checkpoint (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/my_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/my_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function kk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import FlaxAutoModel

model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Push the model to your namespace with the name "my-finetuned-bert".
model.push_to_hub("my-finetuned-bert")

# Push the model to an organization with the name "my-finetuned-bert".
model.push_to_hub("huggingface/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxAutoModel

model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the model to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the model to an organization with the name &quot;my-finetuned-bert&quot;.</span>
model.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function Pk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import BertConfig, FlaxBertModel

# Download model and configuration from huggingface.co and cache.
model = FlaxBertModel.from_pretrained("bert-base-cased")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model = FlaxBertModel.from_pretrained("./test/saved_model/")
# Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).
config = BertConfig.from_json_file("./pt_model/config.json")
model = FlaxBertModel.from_pretrained("./pt_model/pytorch_model.bin", from_pt=True, config=config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertConfig, FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a PyTorch model (slower, for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = BertConfig.from_json_file(<span class="hljs-string">&quot;./pt_model/config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;./pt_model/pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function Mk(D){let f,T;return{c(){f=r("p"),T=s("This API is experimental and may have some slight breaking changes in the next releases.")},l($){f=a($,"P",{});var u=n(f);T=i(u,"This API is experimental and may have some slight breaking changes in the next releases."),u.forEach(t)},m($,u){h($,f,u),e(f,T)},d($){$&&t(f)}}}function Ek(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision
model.params = model.to_bf16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_bf16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_bf16(model.params, mask)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function jk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import FlaxBertModel

# load model
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to cast these to float16
model.params = model.to_fp16(model.params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model = FlaxBertModel.from_pretrained("bert-base-cased")
flat_params = traverse_util.flatten_dict(model.params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
model.params = model.to_fp16(model.params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp16(model.params, mask)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function Fk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import FlaxBertModel

# Download model and configuration from huggingface.co
model = FlaxBertModel.from_pretrained("bert-base-cased")
# By default, the model params will be in fp32, to illustrate the use of this method,
# we'll first cast to fp16 and back to fp32
model.params = model.to_f16(model.params)
# now cast back to fp32
model.params = model.to_fp32(model.params)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxBertModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxBertModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_f16(model.params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model.params = model.to_fp32(model.params)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function Dk(D){let f,T,$,u,k;return u=new U({props:{code:`from transformers import {object_class}

{object} = {object_class}.from_pretrained("bert-base-cased")

# Push the {object} to your namespace with the name "my-finetuned-bert".
{object}.push_to_hub("my-finetuned-bert")

# Push the {object} to an organization with the name "my-finetuned-bert".
{object}.push_to_hub("huggingface/my-finetuned-bert")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> {object_class}

{<span class="hljs-built_in">object</span>} = {object_class}.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-comment"># Push the {object} to your namespace with the name &quot;my-finetuned-bert&quot;.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;my-finetuned-bert&quot;</span>)

<span class="hljs-comment"># Push the {object} to an organization with the name &quot;my-finetuned-bert&quot;.</span>
{<span class="hljs-built_in">object</span>}.push_to_hub(<span class="hljs-string">&quot;huggingface/my-finetuned-bert&quot;</span>)`}}),{c(){f=r("p"),T=s("Examples:"),$=l(),g(u.$$.fragment)},l(m){f=a(m,"P",{});var x=n(f);T=i(x,"Examples:"),x.forEach(t),$=d(m),_(u.$$.fragment,m)},m(m,x){h(m,f,x),e(f,T),h(m,$,x),b(u,m,x),k=!0},p:Ve,i(m){k||(v(u.$$.fragment,m),k=!0)},o(m){y(u.$$.fragment,m),k=!1},d(m){m&&t(f),m&&t($),w(u,m)}}}function qk(D){let f,T,$,u,k,m,x,le,Bp,gm,te,Gp,rn,Sp,Wp,an,Xp,Vp,nn,Rp,Hp,_m,Re,sn,Yp,Kp,ln,Jp,Zp,bm,ht,fs,Qp,eh,us,th,vm,O,oh,dn,rh,ah,gs,nh,sh,mn,ih,lh,cn,dh,mh,pn,ch,ph,ym,He,ft,_s,Go,hh,bs,fh,wm,j,So,uh,vs,gh,_h,hn,fn,bh,vh,yh,Wo,ys,wh,$h,ws,xh,Th,$s,kh,Ph,H,xs,ge,Ts,Mh,Eh,un,jh,Fh,gn,Dh,qh,Ah,Xo,_e,ks,zh,Ih,Ps,Ch,Lh,Ms,Uh,Oh,Nh,Ye,ut,Es,Bh,Gh,_n,Sh,Wh,Xh,gt,js,Vh,Rh,Fs,Hh,Yh,Kh,_t,Ds,Jh,Zh,qs,Qh,ef,tf,As,bt,zs,of,rf,Is,af,nf,sf,Cs,vt,Ls,lf,df,Us,mf,cf,pf,Os,S,Ns,hf,ff,Bs,uf,gf,Gs,_f,bf,Ss,vf,yf,Ws,wf,$f,xf,be,Vo,Tf,Ro,kf,Xs,Pf,Mf,Ef,yt,jf,A,Ho,Ff,Vs,Df,qf,Ke,Af,Rs,zf,If,Hs,Cf,Lf,Uf,Yo,Of,Ys,Nf,Bf,Gf,Ko,Sf,Ks,Wf,Xf,Vf,wt,Rf,$t,Hf,xt,Yf,Js,bn,Zs,Kf,Jf,Zf,Qs,Qf,eu,ei,tu,ou,Y,ti,ru,au,oi,nu,su,ri,iu,lu,ai,du,mu,ni,cu,pu,si,hu,fu,Tt,Jo,uu,ii,gu,_u,kt,Zo,bu,vn,vu,Qo,yu,wu,Pt,er,$u,li,xu,Tu,ve,tr,ku,di,Pu,Mu,mi,Eu,ju,ye,or,Fu,ci,Du,qu,pi,Au,zu,Mt,rr,Iu,hi,Cu,Lu,Et,ar,Uu,fi,Ou,Nu,jt,nr,Bu,ui,Gu,Su,we,sr,Wu,gi,Xu,Vu,Ft,Ru,$e,ir,Hu,lr,Yu,_i,Ku,Ju,Zu,dr,Qu,bi,eg,tg,og,Dt,mr,rg,cr,ag,vi,ng,sg,ig,qt,pr,lg,yi,dg,mg,xe,hr,cg,wi,pg,hg,fr,fg,$i,ug,gg,$m,yn,xm,Je,At,xi,ur,_g,Ti,bg,Tm,Te,vg,wn,yg,wg,gr,$g,xg,km,zt,Tg,ki,kg,Pg,Pm,_r,Mm,It,Mg,Pi,Eg,jg,Em,oe,Fg,Mi,Dg,qg,Ei,Ag,zg,ji,Ig,Cg,jm,br,Fm,Ct,Lg,Fi,Ug,Og,Dm,vr,qm,yr,Am,$n,Ng,zm,wr,Im,Lt,Bg,Di,Gg,Sg,Cm,Ze,Ut,qi,$r,Wg,Ai,Xg,Lm,re,Vg,zi,Rg,Hg,Ii,Yg,Kg,Ci,Jg,Zg,Um,xr,Om,ke,Qg,Li,e_,t_,Ui,o_,r_,Nm,Tr,Bm,Ot,a_,Oi,n_,s_,Gm,kr,Sm,xn,i_,Wm,Qe,Nt,Ni,Pr,l_,Tn,Bi,d_,m_,Xm,W,c_,Gi,p_,h_,Si,f_,u_,Wi,g_,__,Xi,b_,v_,Vm,kn,Pn,Gw,Rm,Mn,y_,Hm,En,w_,Ym,Mr,$_,Er,jn,Sw,Km,et,Bt,Vi,jr,x_,Ri,T_,Jm,Pe,Hi,k_,P_,Gt,M_,Yi,E_,j_,Ki,F_,D_,St,q_,Ji,A_,z_,Zi,I_,Zm,tt,Wt,Qi,Fr,C_,el,L_,Qm,Fn,U_,ec,Dr,tc,N,O_,tl,N_,B_,ol,G_,S_,rl,W_,X_,al,V_,R_,nl,H_,Y_,oc,qr,rc,ot,Xt,sl,Ar,K_,il,J_,ac,C,zr,Z_,Ir,Q_,ll,eb,tb,ob,Me,Cr,rb,dl,ab,nb,rt,sb,ml,ib,lb,cl,db,mb,cb,Vt,Lr,pb,pl,hb,fb,Rt,Ur,ub,at,gb,hl,_b,bb,Or,vb,yb,wb,Ht,Nr,$b,fl,xb,Tb,Yt,Br,kb,ul,Pb,Mb,Kt,Gr,Eb,gl,jb,Fb,Jt,Sr,Db,_l,qb,Ab,Zt,Wr,zb,nt,Ib,bl,Cb,Lb,Dn,Ub,Ob,nc,st,Qt,vl,Xr,Nb,yl,Bb,sc,M,Vr,Gb,wl,Sb,Wb,qn,An,Xb,Vb,Rb,Rr,$l,Hb,Yb,xl,Kb,Jb,Tl,Zb,Qb,it,Ee,kl,ev,tv,zn,ov,rv,In,av,nv,sv,eo,Pl,iv,lv,Ml,dv,mv,cv,X,El,pv,hv,jl,fv,uv,Fl,gv,_v,Dl,bv,vv,ql,yv,wv,$v,je,Hr,xv,Yr,Tv,Al,kv,Pv,Mv,to,Ev,oo,Kr,jv,zl,Fv,Dv,B,Jr,qv,Il,Av,zv,Zr,Iv,Cl,Cv,Lv,Uv,Qr,Ov,Ll,Nv,Bv,Gv,ro,Sv,ao,Wv,no,ea,Xv,Ul,Vv,Rv,so,ta,Hv,Ol,Yv,Kv,io,oa,Jv,Nl,Zv,Qv,lo,ra,ey,Bl,ty,oy,mo,aa,ry,Gl,ay,ny,co,na,sy,Sl,iy,ly,po,sa,dy,Wl,my,cy,ho,ia,py,K,hy,la,fy,uy,Xl,gy,_y,Vl,by,vy,Rl,yy,wy,$y,fo,da,xy,Hl,Ty,ky,Fe,ma,Py,ca,My,Yl,Ey,jy,Fy,pa,Dy,Kl,qy,Ay,zy,uo,ha,Iy,fa,Cy,Cn,Ly,Uy,Oy,go,ua,Ny,Jl,By,Gy,_o,ga,Sy,Zl,Wy,Xy,bo,_a,Vy,Ql,Ry,Hy,vo,ba,Yy,ed,Ky,Jy,yo,va,Zy,td,Qy,e1,wo,ya,t1,wa,o1,od,r1,a1,n1,$o,$a,s1,xa,i1,rd,l1,d1,ic,lt,xo,ad,Ta,m1,nd,c1,lc,de,ka,p1,Pa,h1,sd,f1,u1,g1,To,Ma,_1,id,b1,dc,dt,ko,ld,Ea,v1,dd,y1,mc,q,ja,w1,md,$1,x1,Ln,Un,T1,k1,P1,cd,M1,E1,mt,De,pd,j1,F1,On,D1,q1,Nn,A1,z1,I1,Po,hd,C1,L1,fd,U1,O1,N1,V,ud,B1,G1,gd,S1,W1,_d,X1,V1,bd,R1,H1,vd,Y1,K1,J1,qe,Fa,Z1,Da,Q1,yd,e2,t2,o2,Mo,r2,R,qa,a2,wd,n2,s2,Aa,i2,$d,l2,d2,m2,za,c2,xd,p2,h2,f2,Eo,u2,Ae,Ia,g2,Ca,_2,Td,b2,v2,y2,kd,w2,$2,ze,La,x2,Pd,T2,k2,jo,P2,Fo,Ua,M2,Oa,E2,Md,j2,F2,D2,ae,Na,q2,J,A2,Ed,z2,I2,jd,C2,L2,Fd,U2,O2,Dd,N2,B2,G2,qd,S2,W2,Do,X2,ne,Ba,V2,Z,R2,Ad,H2,Y2,zd,K2,J2,Id,Z2,Q2,Cd,ew,tw,ow,Ld,rw,aw,qo,nw,Ie,Ga,sw,Q,iw,Ud,lw,dw,Od,mw,cw,Nd,pw,hw,Bd,fw,uw,gw,Ao,cc,ct,zo,Gd,Sa,_w,Sd,bw,pc,me,Wa,vw,Wd,yw,ww,Ce,Xa,$w,Va,xw,Xd,Tw,kw,Pw,Io,hc,pt,Co,Vd,Ra,Mw,Rd,Ew,fc,ce,Ha,jw,Ya,Fw,Ka,Hd,Dw,qw,Aw,Yd,zw,uc;return m=new ee({}),Go=new ee({}),So=new P({props:{name:"class transformers.PreTrainedModel",anchor:"transformers.PreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L864"}}),Vo=new P({props:{name:"push_to_hub",anchor:"transformers.PreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": typing.Optional[bool] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"create_pr",val:": bool = False"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.PreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.PreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.PreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>).`,name:"max_shard_size"},{anchor:"transformers.PreTrainedModel.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/utils/hub.py#L661"}}),yt=new Xe({props:{anchor:"transformers.PreTrainedModel.push_to_hub.example",$$slots:{default:[_k]},$$scope:{ctx:D}}}),Ho=new P({props:{name:"from_pretrained",anchor:"transformers.PreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
<li>A path or url to a model folder containing a <em>flax checkpoint file</em> in <em>.msgpack</em> format (e.g,
<code>./flax_model/</code> containing <code>flax_model.msgpack</code>). In this case, <code>from_flax</code> should be set to
<code>True</code>.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.PreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.PreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.PreTrainedModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<code>Dict[str, torch.Tensor]</code>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.PreTrainedModel.from_pretrained.from_flax",description:`<strong>from_flax</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a Flax checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_flax"},{anchor:"transformers.PreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.PreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.PreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.PreTrainedModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.PreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.PreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.PreTrainedModel.from_pretrained._fast_init(bool,",description:`<strong>_fast_init(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to disable fast initialization.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>One should only disable <em>_fast_init</em> to ensure backwards compatibility with <code>transformers.__version__ &lt; 4.6.0</code> for seeded model initialization. This argument will be removed at the next major version. See
<a href="https://github.com/huggingface/transformers/pull/11471" rel="nofollow">pull request 11471</a> for more information.</p>

					</div>`,name:"_fast_init(bool,"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1605",parameterGroups:[{title:"Parameters for big model inference",parametersDescription:[{anchor:"transformers.PreTrainedModel.from_pretrained.low_cpu_mem_usage(bool,",description:`<strong>low_cpu_mem_usage(<code>bool</code>,</strong> <em>optional</em>) &#x2014;
Tries to not use more than 1x model size in CPU memory (including peak memory) while loading the model.
This is an experimental feature and a subject to change at any moment.`,name:"low_cpu_mem_usage(bool,"},{anchor:"transformers.PreTrainedModel.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"transformers.PreTrainedModel.from_pretrained.device_map",description:`<strong>device_map</strong> (<code>str</code> or <code>Dict[str, Union[int, str, torch.device]]</code>, <em>optional</em>) &#x2014;
A map that specifies where each submodule should go. It doesn&#x2019;t need to be refined to each
parameter/buffer name, once a given module name is inside, every submodule of it will be sent to the
same device.</p>
<p>To have Accelerate compute the most optimized <code>device_map</code> automatically, set <code>device_map=&quot;auto&quot;</code>. For
more information about each option see <a href="https://hf.co/docs/accelerate/main/big_modeling#designing-a-device-map" rel="nofollow">designing a device
map</a>.`,name:"device_map"},{anchor:"transformers.PreTrainedModel.from_pretrained.max_memory",description:`<strong>max_memory</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary device identifier to maximum memory. Will default to the maximum memory available for each
GPU and the available CPU RAM if unset.`,name:"max_memory"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_folder",description:`<strong>offload_folder</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
If the <code>device_map</code> contains any value <code>&quot;disk&quot;</code>, the folder where we will offload weights.`,name:"offload_folder"},{anchor:"transformers.PreTrainedModel.from_pretrained.offload_state_dict",description:`<strong>offload_state_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If <code>True</code>, will temporarily offload the CPU state dict to the hard drive to avoid getting out of CPU
RAM if the weight of the CPU state dict + the biggest shard of the checkpoint does not fit. Defaults to
<code>True</code> when there is some disk offload.`,name:"offload_state_dict"},{anchor:"transformers.PreTrainedModel.from_pretrained.load_in_8bit",description:`<strong>load_in_8bit</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, will convert the loaded model into mixed-8bit quantized model. To use this feature please
install <code>bitsandbytes</code> compiled with your CUDA version by running <code>pip install -i https://test.pypi.org/simple/ bitsandbytes-cudaXXX</code> where XXX is your CUDA version (e.g. 11.6 = 116).
Make also sure that you have enough GPU RAM to store half of the model size since the 8bit modules are
not compiled and adapted for CPUs.`,name:"load_in_8bit"},{anchor:"transformers.PreTrainedModel.from_pretrained.int8_threshold",description:`<strong>int8_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 6) &#x2014;
Works together with <code>load_in_8bit</code>. This corresponds to the outlier threshold for outlier detection as
described in <code>GPT3.int8() : 8-bit Matrix Multiplication for Transformers at Scale</code> paper. Any hidden
states value that is above this threshold will be considered an outlier and the operation on those
values will be done in fp16. Values are usually normally distributed, that is, most values are in the
range [-3.5, 3.5], but there are some exceptional systematic outliers that are very differently
distributed for large models. These outliers are often in the interval [-60, -6] or [6, 60]. Int8
quantization works well for values of magnitude ~5, but beyond that, there is a significant performance
penalty. A good default threshold is 6, but a lower threshold might be needed for more unstable models
(small models, fine-tuning).`,name:"int8_threshold"},{anchor:"transformers.PreTrainedModel.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"},{anchor:"transformers.PreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}]}}),wt=new um({props:{$$slots:{default:[bk]},$$scope:{ctx:D}}}),$t=new um({props:{$$slots:{default:[vk]},$$scope:{ctx:D}}}),xt=new Xe({props:{anchor:"transformers.PreTrainedModel.from_pretrained.example",$$slots:{default:[yk]},$$scope:{ctx:D}}}),Jo=new P({props:{name:"get_input_embeddings",anchor:"transformers.PreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1019",returnDescription:`
<p>A torch module mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),Zo=new P({props:{name:"get_memory_footprint",anchor:"transformers.PreTrainedModel.get_memory_footprint",parameters:[{name:"return_buffers",val:" = True"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.get_memory_footprint.return_buffers",description:`<strong>return_buffers</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to return the size of the buffer tensors in the computation of the memory footprint. Buffers
are tensors that do not require gradients and not registered as parameters. E.g. mean and std in batch
norm layers. Please see: <a href="https://discuss.pytorch.org/t/what-pytorch-means-by-buffers/120266/2" rel="nofollow">https://discuss.pytorch.org/t/what-pytorch-means-by-buffers/120266/2</a>`,name:"return_buffers"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1587"}}),er=new P({props:{name:"get_output_embeddings",anchor:"transformers.PreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1045",returnDescription:`
<p>A torch module mapping hidden states to vocabulary.</p>
`,returnType:`
<p><code>nn.Module</code></p>
`}}),tr=new P({props:{name:"gradient_checkpointing_disable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_disable",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1429"}}),or=new P({props:{name:"gradient_checkpointing_enable",anchor:"transformers.PreTrainedModel.gradient_checkpointing_enable",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1418"}}),rr=new P({props:{name:"init_weights",anchor:"transformers.PreTrainedModel.init_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1385"}}),ar=new P({props:{name:"post_init",anchor:"transformers.PreTrainedModel.post_init",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L938"}}),nr=new P({props:{name:"prune_heads",anchor:"transformers.PreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:": typing.Dict[int, typing.List[int]]"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1401"}}),sr=new P({props:{name:"register_for_auto_class",anchor:"transformers.PreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'AutoModel'"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;AutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L2575"}}),Ft=new um({props:{warning:!0,$$slots:{default:[wk]},$$scope:{ctx:D}}}),ir=new P({props:{name:"resize_token_embeddings",anchor:"transformers.PreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>torch.nn.Embedding</code> module of the model without doing anything.`,name:"new_num_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1176",returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>torch.nn.Embedding</code></p>
`}}),mr=new P({props:{name:"save_pretrained",anchor:"transformers.PreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"is_main_process",val:": bool = True"},{name:"state_dict",val:": typing.Optional[dict] = None"},{name:"save_function",val:": typing.Callable = <function save at 0x7f60628a04c0>"},{name:"push_to_hub",val:": bool = False"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.PreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.PreTrainedModel.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"},{anchor:"transformers.PreTrainedModel.save_pretrained.state_dict",description:`<strong>state_dict</strong> (nested dictionary of <code>torch.Tensor</code>) &#x2014;
The state dictionary of the model to save. Will default to <code>self.state_dict()</code>, but can be used to only
save parts of the model or if special precautions need to be taken when recovering the state dictionary
of a model (like when using model parallelism).`,name:"state_dict"},{anchor:"transformers.PreTrainedModel.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"},{anchor:"transformers.PreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.PreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1449"}}),pr=new P({props:{name:"set_input_embeddings",anchor:"transformers.PreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:": Module"}],parametersDescription:[{anchor:"transformers.PreTrainedModel.set_input_embeddings.value",description:"<strong>value</strong> (<code>nn.Module</code>) &#x2014; A module mapping vocabulary to hidden states.",name:"value"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1032"}}),hr=new P({props:{name:"tie_weights",anchor:"transformers.PreTrainedModel.tie_weights",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L1060"}}),ur=new ee({}),_r=new U({props:{code:`from transformers import AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained("bigscience/T0pp", low_cpu_mem_usage=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, low_cpu_mem_usage=<span class="hljs-literal">True</span>)`}}),br=new U({props:{code:`from transformers import AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained("bigscience/T0pp", device_map="auto")`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM

t0pp = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;bigscience/T0pp&quot;</span>, device_map=<span class="hljs-string">&quot;auto&quot;</span>)`}}),vr=new U({props:{code:"t0pp.hf_device_map",highlighted:"t0pp.hf_device_map"}}),yr=new U({props:{code:`{'shared': 0,
 'decoder.embed_tokens': 0,
 'encoder': 0,
 'decoder.block.0': 0,
 'decoder.block.1': 1,
 'decoder.block.2': 1,
 'decoder.block.3': 1,
 'decoder.block.4': 1,
 'decoder.block.5': 1,
 'decoder.block.6': 1,
 'decoder.block.7': 1,
 'decoder.block.8': 1,
 'decoder.block.9': 1,
 'decoder.block.10': 1,
 'decoder.block.11': 1,
 'decoder.block.12': 1,
 'decoder.block.13': 1,
 'decoder.block.14': 1,
 'decoder.block.15': 1,
 'decoder.block.16': 1,
 'decoder.block.17': 1,
 'decoder.block.18': 1,
 'decoder.block.19': 1,
 'decoder.block.20': 1,
 'decoder.block.21': 1,
 'decoder.block.22': 'cpu',
 'decoder.block.23': 'cpu',
 'decoder.final_layer_norm': 'cpu',
 'decoder.dropout': 'cpu',
 'lm_head': 'cpu'}`,highlighted:`{<span class="hljs-string">&#x27;shared&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.embed_tokens&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;encoder&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.0&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;decoder.block.1&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.2&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.3&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.4&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.5&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.6&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.7&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.8&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.9&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.10&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.11&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.12&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.13&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.14&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.15&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.16&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.17&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.18&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.19&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.20&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.21&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;decoder.block.22&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.block.23&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.final_layer_norm&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;decoder.dropout&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>,
 <span class="hljs-string">&#x27;lm_head&#x27;</span>: <span class="hljs-string">&#x27;cpu&#x27;</span>}`}}),wr=new U({props:{code:'device_map = {"shared": 0, "encoder": 0, "decoder": 1, "lm_head": 1}',highlighted:'device_map = {<span class="hljs-string">&quot;shared&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;encoder&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;decoder&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;lm_head&quot;</span>: <span class="hljs-number">1</span>}'}}),$r=new ee({}),xr=new U({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype=torch.float16)',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=torch.float16)'}}),Tr=new U({props:{code:'model = T5ForConditionalGeneration.from_pretrained("t5", torch_dtype="auto")',highlighted:'model = T5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>, torch_dtype=<span class="hljs-string">&quot;auto&quot;</span>)'}}),kr=new U({props:{code:`config = T5Config.from_pretrained("t5")
model = AutoModel.from_config(config)`,highlighted:`config = T5Config.from_pretrained(<span class="hljs-string">&quot;t5&quot;</span>)
model = AutoModel.from_config(config)`}}),Pr=new ee({}),jr=new ee({}),Fr=new ee({}),Dr=new U({props:{code:`model_name = "bigscience/bloom-2b5"
model_8bit = AutoModelForCausalLM.from_pretrained(model_name, device_map="auto", load_in_8bit=True)`,highlighted:`model_name = <span class="hljs-string">&quot;bigscience/bloom-2b5&quot;</span>
model_8bit = AutoModelForCausalLM.from_pretrained(model_name, device_map=<span class="hljs-string">&quot;auto&quot;</span>, load_in_8bit=<span class="hljs-literal">True</span>)`}}),qr=new U({props:{code:`max_memory_mapping = {0: "1GB", 1: "2GB"}
model_name = "bigscience/bloom-3b"
model_8bit = AutoModelForCausalLM.from_pretrained(
    model_name, device_map="auto", load_in_8bit=True, max_memory=max_memory_mapping
)`,highlighted:`max_memory_mapping = {<span class="hljs-number">0</span>: <span class="hljs-string">&quot;1GB&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;2GB&quot;</span>}
model_name = <span class="hljs-string">&quot;bigscience/bloom-3b&quot;</span>
model_8bit = AutoModelForCausalLM.from_pretrained(
    model_name, device_map=<span class="hljs-string">&quot;auto&quot;</span>, load_in_8bit=<span class="hljs-literal">True</span>, max_memory=max_memory_mapping
)`}}),Ar=new ee({}),zr=new P({props:{name:"class transformers.modeling_utils.ModuleUtilsMixin",anchor:"transformers.modeling_utils.ModuleUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L581"}}),Cr=new P({props:{name:"add_memory_hooks",anchor:"transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L612"}}),Lr=new P({props:{name:"estimate_tokens",anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.estimate_tokens.inputs",description:"<strong>inputs</strong> (<code>dict</code>) &#x2014; The model inputs.",name:"inputs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L816",returnDescription:`
<p>The total number of tokens.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Ur=new P({props:{name:"floating_point_ops",anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops",parameters:[{name:"input_dict",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"exclude_embeddings",val:": bool = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
The batch size for the forward pass.`,name:"batch_size"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.sequence_length",description:`<strong>sequence_length</strong> (<code>int</code>) &#x2014;
The number of tokens in each line of the batch.`,name:"sequence_length"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.floating_point_ops.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to count embedding and softmax operations.`,name:"exclude_embeddings"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L837",returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Nr=new P({props:{name:"get_extended_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask",parameters:[{name:"attention_mask",val:": Tensor"},{name:"input_shape",val:": typing.Tuple[int]"},{name:"device",val:": <property object at 0x7f6002af2270> = None"},{name:"dtype",val:": torch.float32 = None"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.Tensor</code>) &#x2014;
Mask with ones indicating tokens to attend to, zeros for tokens to ignore.`,name:"attention_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_extended_attention_mask.input_shape",description:`<strong>input_shape</strong> (<code>Tuple[int]</code>) &#x2014;
The shape of the input to the model.`,name:"input_shape"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L700",returnDescription:`
<p><code>torch.Tensor</code> The extended attention mask, with a the same dtype as <code>attention_mask.dtype</code>.</p>
`}}),Br=new P({props:{name:"get_head_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask",parameters:[{name:"head_mask",val:": typing.Optional[torch.Tensor]"},{name:"num_hidden_layers",val:": int"},{name:"is_attention_chunked",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.head_mask",description:`<strong>head_mask</strong> (<code>torch.Tensor</code> with shape <code>[num_heads]</code> or <code>[num_hidden_layers x num_heads]</code>, <em>optional</em>) &#x2014;
The mask indicating if we should keep the heads or not (1.0 for keep, 0.0 for discard).`,name:"head_mask"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.get_head_mask.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>) &#x2014;
The number of hidden layers in the model.
is_attention_chunked &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Whether or not the attentions scores are computed by chunks or not.`,name:"num_hidden_layers"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L752",returnDescription:`
<p><code>torch.Tensor</code> with shape <code>[num_hidden_layers x batch x num_heads x seq_length x seq_length]</code> or list with
<code>[None]</code> for each layer.</p>
`}}),Gr=new P({props:{name:"invert_attention_mask",anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask",parameters:[{name:"encoder_attention_mask",val:": Tensor"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.invert_attention_mask.encoder_attention_mask",description:"<strong>encoder_attention_mask</strong> (<code>torch.Tensor</code>) &#x2014; An attention mask.",name:"encoder_attention_mask"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L648",returnDescription:`
<p>The inverted attention mask.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Sr=new P({props:{name:"num_parameters",anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"transformers.modeling_utils.ModuleUtilsMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L790",returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Wr=new P({props:{name:"reset_memory_hooks_state",anchor:"transformers.modeling_utils.ModuleUtilsMixin.reset_memory_hooks_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L624"}}),Xr=new ee({}),Vr=new P({props:{name:"class transformers.TFPreTrainedModel",anchor:"transformers.TFPreTrainedModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L965"}}),Hr=new P({props:{name:"push_to_hub",anchor:"transformers.TFPreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": typing.Optional[bool] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"**model_card_kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"use_auth_token"},{anchor:"transformers.TFPreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>).
model_card_kwargs &#x2014;
Additional keyword arguments passed along to the <code>create_model_card()</code> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L2454"}}),to=new Xe({props:{anchor:"transformers.TFPreTrainedModel.push_to_hub.example",$$slots:{default:[$k]},$$scope:{ctx:D}}}),Kr=new P({props:{name:"compile",anchor:"transformers.TFPreTrainedModel.compile",parameters:[{name:"optimizer",val:" = 'rmsprop'"},{name:"loss",val:" = 'passthrough'"},{name:"metrics",val:" = None"},{name:"loss_weights",val:" = None"},{name:"weighted_metrics",val:" = None"},{name:"run_eagerly",val:" = None"},{name:"steps_per_execution",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1257"}}),Jr=new P({props:{name:"from_pretrained",anchor:"transformers.TFPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
<li><code>None</code> if you are both providing the configuration and state dictionary (resp. with keyword
arguments <code>config</code> and <code>state_dict</code>).</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.
from_pt &#x2014; (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>):
Load the model weights from a PyTorch state_dict save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).</li>
</ul>`,name:"config"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.
proxies &#x2014;
(<code>Dict[str, str], </code>optional<code>): A dictionary of proxy servers to use by protocol or endpoint, e.g., </code>{&#x2018;http&#x2019;: &#x2018;foo.bar:3128&#x2019;, &#x2018;http://hostname&#x2019;: &#x2018;foo.bar:4012&#x2019;}<code>. The proxies are used on each request. output_loading_info(</code>bool<code>, *optional*, defaults to </code>False\`): Whether ot not to also return a
dictionary containing missing keys, unexpected keys and error messages.`,name:"resume_download"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try doanloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"},{anchor:"transformers.TFPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L2030"}}),ro=new um({props:{$$slots:{default:[xk]},$$scope:{ctx:D}}}),ao=new Xe({props:{anchor:"transformers.TFPreTrainedModel.from_pretrained.example",$$slots:{default:[Tk]},$$scope:{ctx:D}}}),ea=new P({props:{name:"get_bias",anchor:"transformers.TFPreTrainedModel.get_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1655",returnDescription:`
<p>The weights representing the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),ta=new P({props:{name:"get_input_embeddings",anchor:"transformers.TFPreTrainedModel.get_input_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1077",returnDescription:`
<p>The embeddings layer mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),oa=new P({props:{name:"get_lm_head",anchor:"transformers.TFPreTrainedModel.get_lm_head",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1688",returnDescription:`
<p>The LM head layer if the model has one, None if not.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),ra=new P({props:{name:"get_output_embeddings",anchor:"transformers.TFPreTrainedModel.get_output_embeddings",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1595",returnDescription:`
<p>The new weights mapping vocabulary to hidden states.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),aa=new P({props:{name:"get_output_layer_with_bias",anchor:"transformers.TFPreTrainedModel.get_output_layer_with_bias",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1632",returnDescription:`
<p>The layer that handles the bias, None if not an LM model.</p>
`,returnType:`
<p><code>tf.keras.layers.Layer</code></p>
`}}),na=new P({props:{name:"get_prefix_bias_name",anchor:"transformers.TFPreTrainedModel.get_prefix_bias_name",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1645",returnDescription:`
<p>The _prefix name of the bias.</p>
`,returnType:`
<p><code>str</code></p>
`}}),sa=new P({props:{name:"load_repo_checkpoint",anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint",parameters:[{name:"repo_path_or_name",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.load_repo_checkpoint.repo_path_or_name",description:`<strong>repo_path_or_name</strong> (<code>str</code>) &#x2014;
Can either be a repository name for your {object} in the Hub or a path to a local folder (in which case
the repository will have the name of that local folder).`,name:"repo_path_or_name"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1104",returnDescription:`
<p>A dictionary of extra metadata from the checkpoint, most commonly an \u201Cepoch\u201D count.</p>
`,returnType:`
<p><code>dict</code></p>
`}}),ia=new P({props:{name:"prepare_tf_dataset",anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset",parameters:[{name:"dataset",val:": datasets.Dataset"},{name:"batch_size",val:": int = 8"},{name:"shuffle",val:": bool = True"},{name:"tokenizer",val:": typing.Optional[ForwardRef('PreTrainedTokenizerBase')] = None"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"drop_remainder",val:": typing.Optional[bool] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.dataset",description:`<strong>dataset</strong> (<code>Any</code>) &#x2014;
A [~<code>datasets.Dataset</code>] to be wrapped as a <code>tf.data.Dataset</code>.`,name:"dataset"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to 8) &#x2014;
The size of batches to return.`,name:"batch_size"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.shuffle",description:`<strong>shuffle</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to return samples from the dataset in random order. Usually <code>True</code> for training datasets and
<code>False</code> for validation/test datasets.`,name:"shuffle"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
A <code>PreTrainedTokenizer</code> that will be used to pad samples to create batches. Has no effect if a specific
<code>collate_fn</code> is passed instead.`,name:"tokenizer"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn",description:`<strong>collate_fn</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
A function that collates samples from the dataset into a single batch. Defaults to
<code>DefaultDataCollator</code> if no <code>tokenizer</code> is supplied or <code>DataCollatorWithPadding</code> if a <code>tokenizer</code> is
passed.`,name:"collate_fn"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
A dict of arguments to pass to the <code>collate_fn</code> alongside the list of samples.`,name:"collate_fn_args"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.drop_remainder",description:`<strong>drop_remainder</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to drop the final batch, if the batch_size does not evenly divide the dataset length. Defaults
to the same setting as <code>shuffle</code>.`,name:"drop_remainder"},{anchor:"transformers.TFPreTrainedModel.prepare_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to add prefetching to the end of the <code>tf.data</code> pipeline. This is almost always beneficial for
performance, but can be disabled in edge cases.`,name:"prefetch"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1158",returnDescription:`
<p>A <code>tf.data.Dataset</code> which is ready to pass to the Keras API.</p>
`,returnType:`
<p><code>Dataset</code></p>
`}}),da=new P({props:{name:"prune_heads",anchor:"transformers.TFPreTrainedModel.prune_heads",parameters:[{name:"heads_to_prune",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.prune_heads.heads_to_prune",description:`<strong>heads_to_prune</strong> (<code>Dict[int, List[int]]</code>) &#x2014;
Dictionary with keys being selected layer indices (<code>int</code>) and associated values being the list of heads
to prune in said layer (list of <code>int</code>). For instance {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on
layer 1 and heads 2 and 3 on layer 2.`,name:"heads_to_prune"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1897"}}),ma=new P({props:{name:"resize_token_embeddings",anchor:"transformers.TFPreTrainedModel.resize_token_embeddings",parameters:[{name:"new_num_tokens",val:" = None"}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.resize_token_embeddings.new_num_tokens",description:`<strong>new_num_tokens</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of new tokens in the embedding matrix. Increasing the size will add newly initialized
vectors at the end. Reducing the size will remove vectors from the end. If not provided or <code>None</code>, just
returns a pointer to the input tokens <code>tf.Variable</code> module of the model without doing anything.`,name:"new_num_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1697",returnDescription:`
<p>Pointer to the input tokens Embeddings Module of the model.</p>
`,returnType:`
<p><code>tf.Variable</code></p>
`}}),ha=new P({props:{name:"save_pretrained",anchor:"transformers.TFPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"saved_model",val:" = False"},{name:"version",val:" = 1"},{name:"push_to_hub",val:" = False"},{name:"max_shard_size",val:": typing.Union[int, str] = '10GB'"},{name:"create_pr",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.saved_model",description:`<strong>saved_model</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If the model has to be saved in saved model format as well or not.`,name:"saved_model"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.version",description:`<strong>version</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The version of the saved model. A saved model needs to be versioned in order to be properly loaded by
TensorFlow Serving as detailed in the official documentation
<a href="https://www.tensorflow.org/tfx/serving/serving_basic" rel="nofollow">https://www.tensorflow.org/tfx/serving/serving_basic</a>`,name:"version"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>`,name:"max_shard_size"},{anchor:"transformers.TFPreTrainedModel.save_pretrained.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.</p>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"create_pr"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1909"}}),ua=new P({props:{name:"serving",anchor:"transformers.TFPreTrainedModel.serving",parameters:[{name:"inputs",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving.inputs",description:`<strong>inputs</strong> (<code>Dict[str, tf.Tensor]</code>) &#x2014;
The input of the saved model as a dictionary of tensors.`,name:"inputs"}]}}),ga=new P({props:{name:"serving_output",anchor:"transformers.TFPreTrainedModel.serving_output",parameters:[{name:"output",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.serving_output.output",description:`<strong>output</strong> (<code>TFBaseModelOutput</code>) &#x2014;
The output returned by the model.`,name:"output"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1067"}}),_a=new P({props:{name:"set_bias",anchor:"transformers.TFPreTrainedModel.set_bias",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_bias.value",description:`<strong>value</strong> (<code>Dict[tf.Variable]</code>) &#x2014;
All the new bias attached to an LM head.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1672"}}),ba=new P({props:{name:"set_input_embeddings",anchor:"transformers.TFPreTrainedModel.set_input_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_input_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1575"}}),va=new P({props:{name:"set_output_embeddings",anchor:"transformers.TFPreTrainedModel.set_output_embeddings",parameters:[{name:"value",val:""}],parametersDescription:[{anchor:"transformers.TFPreTrainedModel.set_output_embeddings.value",description:`<strong>value</strong> (<code>tf.Variable</code>) &#x2014;
The new weights mapping hidden states to vocabulary.`,name:"value"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1615"}}),ya=new P({props:{name:"test_step",anchor:"transformers.TFPreTrainedModel.test_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1442"}}),$a=new P({props:{name:"train_step",anchor:"transformers.TFPreTrainedModel.train_step",parameters:[{name:"data",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L1337"}}),Ta=new ee({}),ka=new P({props:{name:"class transformers.modeling_tf_utils.TFModelUtilsMixin",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L90"}}),Ma=new P({props:{name:"num_parameters",anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"}],parametersDescription:[{anchor:"transformers.modeling_tf_utils.TFModelUtilsMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L95",returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Ea=new ee({}),ja=new P({props:{name:"class transformers.FlaxPreTrainedModel",anchor:"transformers.FlaxPreTrainedModel",parameters:[{name:"config",val:": PretrainedConfig"},{name:"module",val:": Module"},{name:"input_shape",val:": typing.Tuple = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"_do_init",val:": bool = True"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L157"}}),Fa=new P({props:{name:"push_to_hub",anchor:"transformers.FlaxPreTrainedModel.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": typing.Optional[bool] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"create_pr",val:": bool = False"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your model to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload model&quot;</code>.`,name:"commit_message"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"use_auth_token"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>).`,name:"max_shard_size"},{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/utils/hub.py#L661"}}),Mo=new Xe({props:{anchor:"transformers.FlaxPreTrainedModel.push_to_hub.example",$$slots:{default:[kk]},$$scope:{ctx:D}}}),qa=new P({props:{name:"from_pretrained",anchor:"transformers.FlaxPreTrainedModel.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>pt index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In this case,
<code>from_pt</code> should be set to <code>True</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.to_fp16">to_fp16()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.to_bf16">to_bf16()</a>.`,name:"dtype"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.config",description:`<strong>config</strong> (<code>Union[PretrainedConfig, str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>an instance of a class derived from <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>,</li>
<li>a string or path valid as input to <a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>.</li>
</ul>
<p>Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.ignore_mismatched_sizes",description:`<strong>ignore_mismatched_sizes</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to raise an error if some of the weights from the checkpoint do not have the same size
as the weights of the model (if for instance, you are instantiating a model with 10 labels from a
checkpoint with 3 labels).`,name:"ignore_mismatched_sizes"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co, you can
specify the folder name here.`,name:"subfolder"},{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L470"}}),Eo=new Xe({props:{anchor:"transformers.FlaxPreTrainedModel.from_pretrained.example",$$slots:{default:[Pk]},$$scope:{ctx:D}}}),Ia=new P({props:{name:"load_flax_sharded_weights",anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights",parameters:[{name:"shard_files",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.load_flax_sharded_weights.shard_files",description:`<strong>shard_files</strong> (<code>List[str]</code> &#x2014;
The list of shard files to load.`,name:"shard_files"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L423",returnDescription:`
<p>A nested dictionary of the model parameters, in the expected format for flax models : <code>&#123;'model': &#123;'params': &#123;'...'&#125;&#125;&#125;</code>.</p>
`,returnType:`
<p><code>Dict</code></p>
`}}),La=new P({props:{name:"register_for_auto_class",anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class",parameters:[{name:"auto_class",val:" = 'FlaxAutoModel'"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.register_for_auto_class.auto_class",description:`<strong>auto_class</strong> (<code>str</code> or <code>type</code>, <em>optional</em>, defaults to <code>&quot;FlaxAutoModel&quot;</code>) &#x2014;
The auto class to register this new model with.`,name:"auto_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L1029"}}),jo=new um({props:{warning:!0,$$slots:{default:[Mk]},$$scope:{ctx:D}}}),Ua=new P({props:{name:"save_pretrained",anchor:"transformers.FlaxPreTrainedModel.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:" = None"},{name:"push_to_hub",val:" = False"},{name:"max_shard_size",val:" = '10GB'"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your model to the Hugging Face model hub after saving it. You can specify the
repository you want to push to with <code>repo_id</code> (will default to the name of <code>save_directory</code> in your
namespace).`,name:"push_to_hub"},{anchor:"transformers.FlaxPreTrainedModel.save_pretrained.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size
lower than this size. If expressed as a string, needs to be digits followed by a unit (like <code>&quot;5MB&quot;</code>).</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If a single weight of the model is bigger than <code>max_shard_size</code>, it will be in its own checkpoint shard
which will be bigger than <code>max_shard_size</code>.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/main/en/main_classes/model#transformers.utils.PushToHubMixin.push_to_hub">push_to_hub()</a> method.`,name:"max_shard_size"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L932"}}),Na=new P({props:{name:"to_bf16",anchor:"transformers.FlaxPreTrainedModel.to_bf16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L318"}}),Do=new Xe({props:{anchor:"transformers.FlaxPreTrainedModel.to_bf16.example",$$slots:{default:[Ek]},$$scope:{ctx:D}}}),Ba=new P({props:{name:"to_fp16",anchor:"transformers.FlaxPreTrainedModel.to_fp16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L384"}}),qo=new Xe({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp16.example",$$slots:{default:[jk]},$$scope:{ctx:D}}}),Ga=new P({props:{name:"to_fp32",anchor:"transformers.FlaxPreTrainedModel.to_fp32",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"transformers.FlaxPreTrainedModel.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"transformers.FlaxPreTrainedModel.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_flax_utils.py#L357"}}),Ao=new Xe({props:{anchor:"transformers.FlaxPreTrainedModel.to_fp32.example",$$slots:{default:[Fk]},$$scope:{ctx:D}}}),Sa=new ee({}),Wa=new P({props:{name:"class transformers.utils.PushToHubMixin",anchor:"transformers.utils.PushToHubMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/utils/hub.py#L576"}}),Xa=new P({props:{name:"push_to_hub",anchor:"transformers.utils.PushToHubMixin.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"use_temp_dir",val:": typing.Optional[bool] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = '10GB'"},{name:"create_pr",val:": bool = False"},{name:"**deprecated_kwargs",val:""}],parametersDescription:[{anchor:"transformers.utils.PushToHubMixin.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The name of the repository you want to push your {object} to. It should contain your organization name
when pushing to a given organization.`,name:"repo_id"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_temp_dir",description:`<strong>use_temp_dir</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub.
Will default to <code>True</code> if there is no directory named like <code>repo_id</code>, <code>False</code> otherwise.`,name:"use_temp_dir"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload {object}&quot;</code>.`,name:"commit_message"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not the repository created should be private (requires a paying subscription).`,name:"private"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.use_auth_token",description:`<strong>use_auth_token</strong> (<code>bool</code> or <code>str</code>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>). Will default to <code>True</code> if <code>repo_url</code>
is not specified.`,name:"use_auth_token"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;10GB&quot;</code>) &#x2014;
Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard
will then be each of size lower than this size. If expressed as a string, needs to be digits followed
by a unit (like <code>&quot;5MB&quot;</code>).`,name:"max_shard_size"},{anchor:"transformers.utils.PushToHubMixin.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to create a PR with the uploaded files or directly commit.`,name:"create_pr"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/utils/hub.py#L661"}}),Io=new Xe({props:{anchor:"transformers.utils.PushToHubMixin.push_to_hub.example",$$slots:{default:[Dk]},$$scope:{ctx:D}}}),Ra=new ee({}),Ha=new P({props:{name:"transformers.modeling_utils.load_sharded_checkpoint",anchor:"transformers.modeling_utils.load_sharded_checkpoint",parameters:[{name:"model",val:""},{name:"folder",val:""},{name:"strict",val:" = True"}],parametersDescription:[{anchor:"transformers.modeling_utils.load_sharded_checkpoint.model",description:"<strong>model</strong> (<code>torch.nn.Module</code>) &#x2014; The model in which to load the checkpoint.",name:"model"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.folder",description:"<strong>folder</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014; A path to a folder containing the sharded checkpoint.",name:"folder"},{anchor:"transformers.modeling_utils.load_sharded_checkpoint.strict",description:"<strong>strict</strong> (<code>bool</code>, *optional<code>, defaults to </code>True`) &#x2014;\nWhether to strictly enforce that the keys in the model state dict match the keys in the sharded checkpoint.",name:"strict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_utils.py#L309",returnDescription:`
<p>A named tuple with <code>missing_keys</code> and <code>unexpected_keys</code> fields</p>
<ul>
<li><code>missing_keys</code> is a list of str containing the missing keys</li>
<li><code>unexpected_keys</code> is a list of str containing the unexpected keys</li>
</ul>
`,returnType:`
<p><code>NamedTuple</code></p>
`}}),{c(){f=r("meta"),T=l(),$=r("h1"),u=r("a"),k=r("span"),g(m.$$.fragment),x=l(),le=r("span"),Bp=s("Models"),gm=l(),te=r("p"),Gp=s("The base classes "),rn=r("a"),Sp=s("PreTrainedModel"),Wp=s(", "),an=r("a"),Xp=s("TFPreTrainedModel"),Vp=s(`, and
`),nn=r("a"),Rp=s("FlaxPreTrainedModel"),Hp=s(` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),_m=l(),Re=r("p"),sn=r("a"),Yp=s("PreTrainedModel"),Kp=s(" and "),ln=r("a"),Jp=s("TFPreTrainedModel"),Zp=s(` also implement a few methods which
are common among all the models to:`),bm=l(),ht=r("ul"),fs=r("li"),Qp=s("resize the input token embeddings when new tokens are added to the vocabulary"),eh=l(),us=r("li"),th=s("prune the attention heads of the model."),vm=l(),O=r("p"),oh=s("The other methods that are common to each model are defined in "),dn=r("a"),rh=s("ModuleUtilsMixin"),ah=s(`
(for the PyTorch models) and `),gs=r("code"),nh=s("TFModuleUtilsMixin"),sh=s(` (for the TensorFlow models) or
for text generation, `),mn=r("a"),ih=s("GenerationMixin"),lh=s(` (for the PyTorch models),
`),cn=r("a"),dh=s("TFGenerationMixin"),mh=s(` (for the TensorFlow models) and
`),pn=r("a"),ch=s("FlaxGenerationMixin"),ph=s(" (for the Flax/JAX models)."),ym=l(),He=r("h2"),ft=r("a"),_s=r("span"),g(Go.$$.fragment),hh=l(),bs=r("span"),fh=s("PreTrainedModel"),wm=l(),j=r("div"),g(So.$$.fragment),uh=l(),vs=r("p"),gh=s("Base class for all models."),_h=l(),hn=r("p"),fn=r("a"),bh=s("PreTrainedModel"),vh=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),yh=l(),Wo=r("ul"),ys=r("li"),wh=s("resize the input embeddings,"),$h=l(),ws=r("li"),xh=s("prune heads in the self-attention heads."),Th=l(),$s=r("p"),kh=s("Class attributes (overridden by derived classes):"),Ph=l(),H=r("ul"),xs=r("li"),ge=r("p"),Ts=r("strong"),Mh=s("config_class"),Eh=s(" ("),un=r("a"),jh=s("PretrainedConfig"),Fh=s(") \u2014 A subclass of "),gn=r("a"),Dh=s("PretrainedConfig"),qh=s(` to use as configuration class
for this model architecture.`),Ah=l(),Xo=r("li"),_e=r("p"),ks=r("strong"),zh=s("load_tf_weights"),Ih=s(" ("),Ps=r("code"),Ch=s("Callable"),Lh=s(") \u2014 A python "),Ms=r("em"),Uh=s("method"),Oh=s(` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),Nh=l(),Ye=r("ul"),ut=r("li"),Es=r("strong"),Bh=s("model"),Gh=s(" ("),_n=r("a"),Sh=s("PreTrainedModel"),Wh=s(") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),Xh=l(),gt=r("li"),js=r("strong"),Vh=s("config"),Rh=s(" ("),Fs=r("code"),Hh=s("PreTrainedConfig"),Yh=s(") \u2014 An instance of the configuration associated to the model."),Kh=l(),_t=r("li"),Ds=r("strong"),Jh=s("path"),Zh=s(" ("),qs=r("code"),Qh=s("str"),ef=s(") \u2014 A path to the TensorFlow checkpoint."),tf=l(),As=r("li"),bt=r("p"),zs=r("strong"),of=s("base_model_prefix"),rf=s(" ("),Is=r("code"),af=s("str"),nf=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),sf=l(),Cs=r("li"),vt=r("p"),Ls=r("strong"),lf=s("is_parallelizable"),df=s(" ("),Us=r("code"),mf=s("bool"),cf=s(") \u2014 A flag indicating whether this model supports model parallelization."),pf=l(),Os=r("li"),S=r("p"),Ns=r("strong"),hf=s("main_input_name"),ff=s(" ("),Bs=r("code"),uf=s("str"),gf=s(") \u2014 The name of the principal input to the model (often "),Gs=r("code"),_f=s("input_ids"),bf=s(` for NLP
models, `),Ss=r("code"),vf=s("pixel_values"),yf=s(" for vision models and "),Ws=r("code"),wf=s("input_values"),$f=s(" for speech models)."),xf=l(),be=r("div"),g(Vo.$$.fragment),Tf=l(),Ro=r("p"),kf=s(`Upload the model file to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Xs=r("code"),Pf=s("repo_path_or_name"),Mf=s("."),Ef=l(),g(yt.$$.fragment),jf=l(),A=r("div"),g(Ho.$$.fragment),Ff=l(),Vs=r("p"),Df=s("Instantiate a pretrained pytorch model from a pre-trained model configuration."),qf=l(),Ke=r("p"),Af=s("The model is set in evaluation mode by default using "),Rs=r("code"),zf=s("model.eval()"),If=s(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),Hs=r("code"),Cf=s("model.train()"),Lf=s("."),Uf=l(),Yo=r("p"),Of=s("The warning "),Ys=r("em"),Nf=s("Weights from XXX not initialized from pretrained model"),Bf=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Gf=l(),Ko=r("p"),Sf=s("The warning "),Ks=r("em"),Wf=s("Weights from XXX not used in YYY"),Xf=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Vf=l(),g(wt.$$.fragment),Rf=l(),g($t.$$.fragment),Hf=l(),g(xt.$$.fragment),Yf=l(),Js=r("ul"),bn=r("li"),Zs=r("code"),Kf=s("low_cpu_mem_usage"),Jf=s(" algorithm:"),Zf=l(),Qs=r("p"),Qf=s("This is an experimental function that loads the model using ~1x model size CPU memory"),eu=l(),ei=r("p"),tu=s("Here is how it works:"),ou=l(),Y=r("ol"),ti=r("li"),ru=s("save which state_dict keys we have"),au=l(),oi=r("li"),nu=s("drop state_dict before the model is created, since the latter takes 1x model size CPU memory"),su=l(),ri=r("li"),iu=s(`after the model has been instantiated switch to the meta device all params/buffers that
are going to be replaced from the loaded state_dict`),lu=l(),ai=r("li"),du=s("load state_dict 2nd time"),mu=l(),ni=r("li"),cu=s("replace the params/buffers from the state_dict"),pu=l(),si=r("p"),hu=s("Currently, it can\u2019t handle deepspeed ZeRO stage 3 and ignores loading errors"),fu=l(),Tt=r("div"),g(Jo.$$.fragment),uu=l(),ii=r("p"),gu=s("Returns the model\u2019s input embeddings."),_u=l(),kt=r("div"),g(Zo.$$.fragment),bu=l(),vn=r("p"),vu=s(`Get the memory footprint of a model. This will return the memory footprint of the current model in bytes.
Useful to benchmark the memory footprint of the current model and design some tests. Solution inspired from the
PyTorch discussions: `),Qo=r("a"),yu=s("https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2"),wu=l(),Pt=r("div"),g(er.$$.fragment),$u=l(),li=r("p"),xu=s("Returns the model\u2019s output embeddings."),Tu=l(),ve=r("div"),g(tr.$$.fragment),ku=l(),di=r("p"),Pu=s("Deactivates gradient checkpointing for the current model."),Mu=l(),mi=r("p"),Eu=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),ju=l(),ye=r("div"),g(or.$$.fragment),Fu=l(),ci=r("p"),Du=s("Activates gradient checkpointing for the current model."),qu=l(),pi=r("p"),Au=s(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),zu=l(),Mt=r("div"),g(rr.$$.fragment),Iu=l(),hi=r("p"),Cu=s("If needed prunes and maybe initializes weights."),Lu=l(),Et=r("div"),g(ar.$$.fragment),Uu=l(),fi=r("p"),Ou=s(`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Nu=l(),jt=r("div"),g(nr.$$.fragment),Bu=l(),ui=r("p"),Gu=s("Prunes heads of the base model."),Su=l(),we=r("div"),g(sr.$$.fragment),Wu=l(),gi=r("p"),Xu=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),Vu=l(),g(Ft.$$.fragment),Ru=l(),$e=r("div"),g(ir.$$.fragment),Hu=l(),lr=r("p"),Yu=s("Resizes input token embeddings matrix of the model if "),_i=r("code"),Ku=s("new_num_tokens != config.vocab_size"),Ju=s("."),Zu=l(),dr=r("p"),Qu=s("Takes care of tying weights embeddings afterwards if the model class has a "),bi=r("code"),eg=s("tie_weights()"),tg=s(" method."),og=l(),Dt=r("div"),g(mr.$$.fragment),rg=l(),cr=r("p"),ag=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),vi=r("code"),ng=s("[from_pretrained()](/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),sg=s(" class method."),ig=l(),qt=r("div"),g(pr.$$.fragment),lg=l(),yi=r("p"),dg=s("Set model\u2019s input embeddings."),mg=l(),xe=r("div"),g(hr.$$.fragment),cg=l(),wi=r("p"),pg=s("Tie the weights between the input embeddings and the output embeddings."),hg=l(),fr=r("p"),fg=s("If the "),$i=r("code"),ug=s("torchscript"),gg=s(` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),$m=l(),yn=r("a"),xm=l(),Je=r("h3"),At=r("a"),xi=r("span"),g(ur.$$.fragment),_g=l(),Ti=r("span"),bg=s("Large model loading"),Tm=l(),Te=r("p"),vg=s("In Transformers 4.20.0, the "),wn=r("a"),yg=s("from_pretrained()"),wg=s(" method has been reworked to accommodate large models using "),gr=r("a"),$g=s("Accelerate"),xg=s(". This requires Accelerate >= 0.9.0 and PyTorch >= 1.9.0. Instead of creating the full model, then loading the pretrained weights inside it (which takes twice the size of the model in RAM, one for the randomly initialized model, one for the weights), there is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded."),km=l(),zt=r("p"),Tg=s("This option can be activated with "),ki=r("code"),kg=s("low_cpu_mem_usage=True"),Pg=s(". The model is first created on the Meta device (with empty weights) and the state dict is then loaded inside it (shard by shard in the case of a sharded checkpoint). This way the maximum RAM used is the full size of the model only."),Pm=l(),g(_r.$$.fragment),Mm=l(),It=r("p"),Mg=s("Moreover, you can directly place the model on different devices if it doesn\u2019t fully fit in RAM (only works for inference for now). With "),Pi=r("code"),Eg=s('device_map="auto"'),jg=s(", Accelerate will determine where to put each layer to maximize the use of your fastest devices (GPUs) and offload the rest on the CPU, or even the hard drive if you don\u2019t have enough GPU RAM (or CPU RAM). Even if the model is split across several devices, it will run as you would normally expect."),Em=l(),oe=r("p"),Fg=s("When passing a "),Mi=r("code"),Dg=s("device_map"),qg=s(", "),Ei=r("code"),Ag=s("low_cpu_mem_usage"),zg=s(" is automatically set to "),ji=r("code"),Ig=s("True"),Cg=s(", so you don\u2019t need to specify it:"),jm=l(),g(br.$$.fragment),Fm=l(),Ct=r("p"),Lg=s("You can inspect how the model was split across devices by looking at its "),Fi=r("code"),Ug=s("hf_device_map"),Og=s(" attribute:"),Dm=l(),g(vr.$$.fragment),qm=l(),g(yr.$$.fragment),Am=l(),$n=r("p"),Ng=s("You can also write your own device map following the same format (a dictionary layer name to device). It should map all parameters of the model to a given device, but you don\u2019t have to detail where all the submosules of one layer go if that layer is entirely on the same device. For instance, the following device map would work properly for T0pp (as long as you have the GPU memory):"),zm=l(),g(wr.$$.fragment),Im=l(),Lt=r("p"),Bg=s("Another way to minimize the memory impact of your model is to instantiate it at a lower precision dtype (like "),Di=r("code"),Gg=s("torch.float16"),Sg=s(") or use direct quantization techniques as described below."),Cm=l(),Ze=r("h3"),Ut=r("a"),qi=r("span"),g($r.$$.fragment),Wg=l(),Ai=r("span"),Xg=s("Model Instantiation dtype"),Lm=l(),re=r("p"),Vg=s("Under Pytorch a model normally gets instantiated with "),zi=r("code"),Rg=s("torch.float32"),Hg=s(` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),Ii=r("code"),Yg=s("dtype"),Kg=s(" using "),Ci=r("code"),Jg=s("torch_dtype"),Zg=s(" argument:"),Um=l(),g(xr.$$.fragment),Om=l(),ke=r("p"),Qg=s("or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),Li=r("code"),e_=s('"auto"'),t_=s(`,
and then `),Ui=r("code"),o_=s("dtype"),r_=s(" will be automatically derived from the model\u2019s weights:"),Nm=l(),g(Tr.$$.fragment),Bm=l(),Ot=r("p"),a_=s("Models instantiated from scratch can also be told which "),Oi=r("code"),n_=s("dtype"),s_=s(" to use with:"),Gm=l(),g(kr.$$.fragment),Sm=l(),xn=r("p"),i_=s("Due to Pytorch design, this functionality is only available for floating dtypes."),Wm=l(),Qe=r("h3"),Nt=r("a"),Ni=r("span"),g(Pr.$$.fragment),l_=l(),Tn=r("span"),Bi=r("code"),d_=s("bitsandbytes"),m_=s(" integration for Int8 mixed-precision matrix decomposition"),Xm=l(),W=r("p"),c_=s("From the paper "),Gi=r("code"),p_=s("GPT3.int8() : 8-bit Matrix Multiplication for Transformers at Scale"),h_=s(`, we suport HuggingFace \u{1F917}  integration for all models in the Hub with few lines of code.
For models trained in  half-precision (aka, either `),Si=r("code"),f_=s("float16"),u_=s(" or "),Wi=r("code"),g_=s("bfloat16"),__=s(") or full precision. This method aims to reduce "),Xi=r("code"),b_=s("nn.Linear"),v_=s(` size by 2 (if trained in half precision) or by 4 if trained in full precision, without affecting too much quality by operating on the outliers in half-precision.
This technique is useful and works well for billion scale models (>1B parameters) therefore we advice you to use it only for models of that scale. This method has been tested for 2-billion to 176-billion scale models and supports only PyTorch models.`),Vm=l(),kn=r("p"),Pn=r("img"),Rm=l(),Mn=r("p"),y_=s(`Int8 mixed-precision matrix decomposition works by separating a matrix multiplication into two streams: (1) and systematic feature outlier stream matrix multiplied in fp16 (0.01%), (2) a regular stream of int8 matrix multiplication (99.9%). With this method, int8 inference with no predictive degradation is possible for very large models (>=176B parameters).
Values are usually normally distributed, that is, most values are in the range [-3.5, 3.5], but there are some exceptional systematic outliers that are very differently distributed for large models. These outliers are often in the interval [-60, -6] or [6, 60]. Int8 quantization works well for values of magnitude ~5, but beyond that, there is a significant performance penalty. A good default threshold is 6, but a lower threshold might be needed for more unstable models (small models, fine-tuning).`),Hm=l(),En=r("p"),w_=s("Note also that you would require a GPU to run mixed-8bit models as the kernels has been compiled for GPUs only. Make sure that you have enough GPU RAM to store the quarter (or half if your model is natively in half precision) of the model before using this feature."),Ym=l(),Mr=r("p"),$_=s("Below are some notes to help you use this module, or follow this demo on Google colab: "),Er=r("a"),jn=r("img"),Km=l(),et=r("h4"),Bt=r("a"),Vi=r("span"),g(jr.$$.fragment),x_=l(),Ri=r("span"),T_=s("Requirements"),Jm=l(),Pe=r("ul"),Hi=r("li"),k_=s("Make sure you run that on a NVIDIA GPU that supports 8-bit tensor cores (Turing or Ampere GPUs - e.g. T4, RTX20s RTX30s, A40-A100). Note that previous generations of NVIDIA GPUs do not support 8-bit tensor cores."),P_=l(),Gt=r("li"),M_=s("Install the correct version of "),Yi=r("code"),E_=s("bitsandbytes"),j_=s(` by running:
`),Ki=r("code"),F_=s("pip install -i https://test.pypi.org/simple/ bitsandbytes"),D_=l(),St=r("li"),q_=s("Install "),Ji=r("code"),A_=s("accelerate"),z_=s(`:
`),Zi=r("code"),I_=s("pip install accelerate"),Zm=l(),tt=r("h4"),Wt=r("a"),Qi=r("span"),g(Fr.$$.fragment),C_=l(),el=r("span"),L_=s("Running mixed-int8 models"),Qm=l(),Fn=r("p"),U_=s("After carefully installing the required libraries, the way to load your mixed 8-bit model is as follows:"),ec=l(),g(Dr.$$.fragment),tc=l(),N=r("p"),O_=s("The implementation supports multi-GPU setup thanks to "),tl=r("code"),N_=s("accelerate"),B_=s(" as backend. If you want to control the GPU memory you want to allocate for each GPU, you can use the "),ol=r("code"),G_=s("max_memory"),S_=s(` argument as follows:
(If allocating `),rl=r("code"),W_=s("1GB"),X_=s(" into GPU-0 and "),al=r("code"),V_=s("2GB"),R_=s(" into GPU-1, you can use "),nl=r("code"),H_=s('max_memory={0:"1GB", 1:"2GB"}'),Y_=s(")"),oc=l(),g(qr.$$.fragment),rc=l(),ot=r("h2"),Xt=r("a"),sl=r("span"),g(Ar.$$.fragment),K_=l(),il=r("span"),J_=s("ModuleUtilsMixin"),ac=l(),C=r("div"),g(zr.$$.fragment),Z_=l(),Ir=r("p"),Q_=s("A few utilities for "),ll=r("code"),eb=s("torch.nn.Modules"),tb=s(", to be used as a mixin."),ob=l(),Me=r("div"),g(Cr.$$.fragment),rb=l(),dl=r("p"),ab=s("Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),nb=l(),rt=r("p"),sb=s("Increase in memory consumption is stored in a "),ml=r("code"),ib=s("mem_rss_diff"),lb=s(` attribute for each module and can be reset to zero
with `),cl=r("code"),db=s("model.reset_memory_hooks_state()"),mb=s("."),cb=l(),Vt=r("div"),g(Lr.$$.fragment),pb=l(),pl=r("p"),hb=s("Helper function to estimate the total number of tokens from the model inputs."),fb=l(),Rt=r("div"),g(Ur.$$.fragment),ub=l(),at=r("p"),gb=s(`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),hl=r("code"),_b=s("12 * d_model << sequence_length"),bb=s(") as laid out in "),Or=r("a"),vb=s(`this
paper`),yb=s(` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),wb=l(),Ht=r("div"),g(Nr.$$.fragment),$b=l(),fl=r("p"),xb=s("Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),Tb=l(),Yt=r("div"),g(Br.$$.fragment),kb=l(),ul=r("p"),Pb=s("Prepare the head mask if needed."),Mb=l(),Kt=r("div"),g(Gr.$$.fragment),Eb=l(),gl=r("p"),jb=s("Invert an attention mask (e.g., switches 0. and 1.)."),Fb=l(),Jt=r("div"),g(Sr.$$.fragment),Db=l(),_l=r("p"),qb=s("Get number of (optionally, trainable or non-embeddings) parameters in the module."),Ab=l(),Zt=r("div"),g(Wr.$$.fragment),zb=l(),nt=r("p"),Ib=s("Reset the "),bl=r("code"),Cb=s("mem_rss_diff"),Lb=s(" attribute of each module (see "),Dn=r("a"),Ub=s("add_memory_hooks()"),Ob=s(")."),nc=l(),st=r("h2"),Qt=r("a"),vl=r("span"),g(Xr.$$.fragment),Nb=l(),yl=r("span"),Bb=s("TFPreTrainedModel"),sc=l(),M=r("div"),g(Vr.$$.fragment),Gb=l(),wl=r("p"),Sb=s("Base class for all TF models."),Wb=l(),qn=r("p"),An=r("a"),Xb=s("TFPreTrainedModel"),Vb=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Rb=l(),Rr=r("ul"),$l=r("li"),Hb=s("resize the input embeddings,"),Yb=l(),xl=r("li"),Kb=s("prune heads in the self-attention heads."),Jb=l(),Tl=r("p"),Zb=s("Class attributes (overridden by derived classes):"),Qb=l(),it=r("ul"),Ee=r("li"),kl=r("strong"),ev=s("config_class"),tv=s(" ("),zn=r("a"),ov=s("PretrainedConfig"),rv=s(") \u2014 A subclass of "),In=r("a"),av=s("PretrainedConfig"),nv=s(` to use as configuration class
for this model architecture.`),sv=l(),eo=r("li"),Pl=r("strong"),iv=s("base_model_prefix"),lv=s(" ("),Ml=r("code"),dv=s("str"),mv=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),cv=l(),X=r("li"),El=r("strong"),pv=s("main_input_name"),hv=s(" ("),jl=r("code"),fv=s("str"),uv=s(") \u2014 The name of the principal input to the model (often "),Fl=r("code"),gv=s("input_ids"),_v=s(` for NLP
models, `),Dl=r("code"),bv=s("pixel_values"),vv=s(" for vision models and "),ql=r("code"),yv=s("input_values"),wv=s(" for speech models)."),$v=l(),je=r("div"),g(Hr.$$.fragment),xv=l(),Yr=r("p"),Tv=s("Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),Al=r("code"),kv=s("repo_path_or_name"),Pv=s("."),Mv=l(),g(to.$$.fragment),Ev=l(),oo=r("div"),g(Kr.$$.fragment),jv=l(),zl=r("p"),Fv=s(`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),Dv=l(),B=r("div"),g(Jr.$$.fragment),qv=l(),Il=r("p"),Av=s("Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),zv=l(),Zr=r("p"),Iv=s("The warning "),Cl=r("em"),Cv=s("Weights from XXX not initialized from pretrained model"),Lv=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Uv=l(),Qr=r("p"),Ov=s("The warning "),Ll=r("em"),Nv=s("Weights from XXX not used in YYY"),Bv=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Gv=l(),g(ro.$$.fragment),Sv=l(),g(ao.$$.fragment),Wv=l(),no=r("div"),g(ea.$$.fragment),Xv=l(),Ul=r("p"),Vv=s("Dict of bias attached to an LM head. The key represents the name of the bias attribute."),Rv=l(),so=r("div"),g(ta.$$.fragment),Hv=l(),Ol=r("p"),Yv=s("Returns the model\u2019s input embeddings layer."),Kv=l(),io=r("div"),g(oa.$$.fragment),Jv=l(),Nl=r("p"),Zv=s("The LM Head layer. This method must be overwritten by all the models that have a lm head."),Qv=l(),lo=r("div"),g(ra.$$.fragment),ey=l(),Bl=r("p"),ty=s("Returns the model\u2019s output embeddings"),oy=l(),mo=r("div"),g(aa.$$.fragment),ry=l(),Gl=r("p"),ay=s(`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),ny=l(),co=r("div"),g(na.$$.fragment),sy=l(),Sl=r("p"),iy=s("Get the concatenated _prefix name of the bias from the model name to the parent layer"),ly=l(),po=r("div"),g(sa.$$.fragment),dy=l(),Wl=r("p"),my=s(`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),cy=l(),ho=r("div"),g(ia.$$.fragment),py=l(),K=r("p"),hy=s("Wraps a HuggingFace "),la=r("a"),fy=s("Dataset"),uy=s(" as a "),Xl=r("code"),gy=s("tf.data.Dataset"),_y=s(` with collation and batching. This method is
designed to create a \u201Cready-to-use\u201D dataset that can be passed directly to Keras methods like `),Vl=r("code"),by=s("fit()"),vy=s(` without
further modification. The method will drop columns from the dataset if they don\u2019t match input names for the
model. If you want to specify the column names to return rather than using the names that match this model, we
recommend using `),Rl=r("code"),yy=s("Dataset.to_tf_dataset()"),wy=s(" instead."),$y=l(),fo=r("div"),g(da.$$.fragment),xy=l(),Hl=r("p"),Ty=s("Prunes heads of the base model."),ky=l(),Fe=r("div"),g(ma.$$.fragment),Py=l(),ca=r("p"),My=s("Resizes input token embeddings matrix of the model if "),Yl=r("code"),Ey=s("new_num_tokens != config.vocab_size"),jy=s("."),Fy=l(),pa=r("p"),Dy=s("Takes care of tying weights embeddings afterwards if the model class has a "),Kl=r("code"),qy=s("tie_weights()"),Ay=s(" method."),zy=l(),uo=r("div"),g(ha.$$.fragment),Iy=l(),fa=r("p"),Cy=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Cn=r("a"),Ly=s("from_pretrained()"),Uy=s(" class method."),Oy=l(),go=r("div"),g(ua.$$.fragment),Ny=l(),Jl=r("p"),By=s("Method used for serving the model."),Gy=l(),_o=r("div"),g(ga.$$.fragment),Sy=l(),Zl=r("p"),Wy=s("Prepare the output of the saved model. Each model must implement this function."),Xy=l(),bo=r("div"),g(_a.$$.fragment),Vy=l(),Ql=r("p"),Ry=s("Set all the bias in the LM head."),Hy=l(),vo=r("div"),g(ba.$$.fragment),Yy=l(),ed=r("p"),Ky=s("Set model\u2019s input embeddings"),Jy=l(),yo=r("div"),g(va.$$.fragment),Zy=l(),td=r("p"),Qy=s("Set model\u2019s output embeddings"),e1=l(),wo=r("div"),g(ya.$$.fragment),t1=l(),wa=r("p"),o1=s("A modification of Keras\u2019s default "),od=r("code"),r1=s("train_step"),a1=s(` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),n1=l(),$o=r("div"),g($a.$$.fragment),s1=l(),xa=r("p"),i1=s("A modification of Keras\u2019s default "),rd=r("code"),l1=s("train_step"),d1=s(` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),ic=l(),lt=r("h2"),xo=r("a"),ad=r("span"),g(Ta.$$.fragment),m1=l(),nd=r("span"),c1=s("TFModelUtilsMixin"),lc=l(),de=r("div"),g(ka.$$.fragment),p1=l(),Pa=r("p"),h1=s("A few utilities for "),sd=r("code"),f1=s("tf.keras.Model"),u1=s(", to be used as a mixin."),g1=l(),To=r("div"),g(Ma.$$.fragment),_1=l(),id=r("p"),b1=s("Get the number of (optionally, trainable) parameters in the model."),dc=l(),dt=r("h2"),ko=r("a"),ld=r("span"),g(Ea.$$.fragment),v1=l(),dd=r("span"),y1=s("FlaxPreTrainedModel"),mc=l(),q=r("div"),g(ja.$$.fragment),w1=l(),md=r("p"),$1=s("Base class for all models."),x1=l(),Ln=r("p"),Un=r("a"),T1=s("FlaxPreTrainedModel"),k1=s(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),P1=l(),cd=r("p"),M1=s("Class attributes (overridden by derived classes):"),E1=l(),mt=r("ul"),De=r("li"),pd=r("strong"),j1=s("config_class"),F1=s(" ("),On=r("a"),D1=s("PretrainedConfig"),q1=s(") \u2014 A subclass of "),Nn=r("a"),A1=s("PretrainedConfig"),z1=s(` to use as configuration class
for this model architecture.`),I1=l(),Po=r("li"),hd=r("strong"),C1=s("base_model_prefix"),L1=s(" ("),fd=r("code"),U1=s("str"),O1=s(`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),N1=l(),V=r("li"),ud=r("strong"),B1=s("main_input_name"),G1=s(" ("),gd=r("code"),S1=s("str"),W1=s(") \u2014 The name of the principal input to the model (often "),_d=r("code"),X1=s("input_ids"),V1=s(` for NLP
models, `),bd=r("code"),R1=s("pixel_values"),H1=s(" for vision models and "),vd=r("code"),Y1=s("input_values"),K1=s(" for speech models)."),J1=l(),qe=r("div"),g(Fa.$$.fragment),Z1=l(),Da=r("p"),Q1=s(`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),yd=r("code"),e2=s("repo_path_or_name"),t2=s("."),o2=l(),g(Mo.$$.fragment),r2=l(),R=r("div"),g(qa.$$.fragment),a2=l(),wd=r("p"),n2=s("Instantiate a pretrained flax model from a pre-trained model configuration."),s2=l(),Aa=r("p"),i2=s("The warning "),$d=r("em"),l2=s("Weights from XXX not initialized from pretrained model"),d2=s(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),m2=l(),za=r("p"),c2=s("The warning "),xd=r("em"),p2=s("Weights from XXX not used in YYY"),h2=s(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),f2=l(),g(Eo.$$.fragment),u2=l(),Ae=r("div"),g(Ia.$$.fragment),g2=l(),Ca=r("p"),_2=s("This is the same as "),Td=r("code"),b2=s("flax.serialization.from_bytes"),v2=s(`
(https:lax.readthedocs.io/en/latest/_modules/flax/serialization.html#from_bytes) but for a sharded checkpoint.`),y2=l(),kd=r("p"),w2=s(`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),$2=l(),ze=r("div"),g(La.$$.fragment),x2=l(),Pd=r("p"),T2=s(`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),k2=l(),g(jo.$$.fragment),P2=l(),Fo=r("div"),g(Ua.$$.fragment),M2=l(),Oa=r("p"),E2=s(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Md=r("code"),j2=s("[from_pretrained()](/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),F2=s(" class method"),D2=l(),ae=r("div"),g(Na.$$.fragment),q2=l(),J=r("p"),A2=s("Cast the floating-point "),Ed=r("code"),z2=s("params"),I2=s(" to "),jd=r("code"),C2=s("jax.numpy.bfloat16"),L2=s(". This returns a new "),Fd=r("code"),U2=s("params"),O2=s(` tree and does not cast
the `),Dd=r("code"),N2=s("params"),B2=s(" in place."),G2=l(),qd=r("p"),S2=s(`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),W2=l(),g(Do.$$.fragment),X2=l(),ne=r("div"),g(Ba.$$.fragment),V2=l(),Z=r("p"),R2=s("Cast the floating-point "),Ad=r("code"),H2=s("parmas"),Y2=s(" to "),zd=r("code"),K2=s("jax.numpy.float16"),J2=s(". This returns a new "),Id=r("code"),Z2=s("params"),Q2=s(` tree and does not cast the
`),Cd=r("code"),ew=s("params"),tw=s(" in place."),ow=l(),Ld=r("p"),rw=s(`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),aw=l(),g(qo.$$.fragment),nw=l(),Ie=r("div"),g(Ga.$$.fragment),sw=l(),Q=r("p"),iw=s("Cast the floating-point "),Ud=r("code"),lw=s("parmas"),dw=s(" to "),Od=r("code"),mw=s("jax.numpy.float32"),cw=s(`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Nd=r("code"),pw=s("params"),hw=s(" tree and does not cast the "),Bd=r("code"),fw=s("params"),uw=s(" in place."),gw=l(),g(Ao.$$.fragment),cc=l(),ct=r("h2"),zo=r("a"),Gd=r("span"),g(Sa.$$.fragment),_w=l(),Sd=r("span"),bw=s("Pushing to the Hub"),pc=l(),me=r("div"),g(Wa.$$.fragment),vw=l(),Wd=r("p"),yw=s("A Mixin containing the functionality to push a model or tokenizer to the hub."),ww=l(),Ce=r("div"),g(Xa.$$.fragment),$w=l(),Va=r("p"),xw=s(`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Xd=r("code"),Tw=s("repo_path_or_name"),kw=s("."),Pw=l(),g(Io.$$.fragment),hc=l(),pt=r("h2"),Co=r("a"),Vd=r("span"),g(Ra.$$.fragment),Mw=l(),Rd=r("span"),Ew=s("Sharded checkpoints"),fc=l(),ce=r("div"),g(Ha.$$.fragment),jw=l(),Ya=r("p"),Fw=s(`This is the same as
`),Ka=r("a"),Hd=r("code"),Dw=s("torch.nn.Module.load_state_dict"),qw=s(`
but for a sharded checkpoint.`),Aw=l(),Yd=r("p"),zw=s(`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),this.h()},l(o){const p=uk('[data-svelte="svelte-1phssyn"]',document.head);f=a(p,"META",{name:!0,content:!0}),p.forEach(t),T=d(o),$=a(o,"H1",{class:!0});var Ja=n($);u=a(Ja,"A",{id:!0,class:!0,href:!0});var Kd=n(u);k=a(Kd,"SPAN",{});var Jd=n(k);_(m.$$.fragment,Jd),Jd.forEach(t),Kd.forEach(t),x=d(Ja),le=a(Ja,"SPAN",{});var Zd=n(le);Bp=i(Zd,"Models"),Zd.forEach(t),Ja.forEach(t),gm=d(o),te=a(o,"P",{});var pe=n(te);Gp=i(pe,"The base classes "),rn=a(pe,"A",{href:!0});var Qd=n(rn);Sp=i(Qd,"PreTrainedModel"),Qd.forEach(t),Wp=i(pe,", "),an=a(pe,"A",{href:!0});var em=n(an);Xp=i(em,"TFPreTrainedModel"),em.forEach(t),Vp=i(pe,`, and
`),nn=a(pe,"A",{href:!0});var tm=n(nn);Rp=i(tm,"FlaxPreTrainedModel"),tm.forEach(t),Hp=i(pe,` implement the common methods for loading/saving a model either from a local
file or directory, or from a pretrained model configuration provided by the library (downloaded from HuggingFace\u2019s AWS
S3 repository).`),pe.forEach(t),_m=d(o),Re=a(o,"P",{});var Lo=n(Re);sn=a(Lo,"A",{href:!0});var om=n(sn);Yp=i(om,"PreTrainedModel"),om.forEach(t),Kp=i(Lo," and "),ln=a(Lo,"A",{href:!0});var rm=n(ln);Jp=i(rm,"TFPreTrainedModel"),rm.forEach(t),Zp=i(Lo,` also implement a few methods which
are common among all the models to:`),Lo.forEach(t),bm=d(o),ht=a(o,"UL",{});var Za=n(ht);fs=a(Za,"LI",{});var am=n(fs);Qp=i(am,"resize the input token embeddings when new tokens are added to the vocabulary"),am.forEach(t),eh=d(Za),us=a(Za,"LI",{});var nm=n(us);th=i(nm,"prune the attention heads of the model."),nm.forEach(t),Za.forEach(t),vm=d(o),O=a(o,"P",{});var G=n(O);oh=i(G,"The other methods that are common to each model are defined in "),dn=a(G,"A",{href:!0});var Ww=n(dn);rh=i(Ww,"ModuleUtilsMixin"),Ww.forEach(t),ah=i(G,`
(for the PyTorch models) and `),gs=a(G,"CODE",{});var Xw=n(gs);nh=i(Xw,"TFModuleUtilsMixin"),Xw.forEach(t),sh=i(G,` (for the TensorFlow models) or
for text generation, `),mn=a(G,"A",{href:!0});var Vw=n(mn);ih=i(Vw,"GenerationMixin"),Vw.forEach(t),lh=i(G,` (for the PyTorch models),
`),cn=a(G,"A",{href:!0});var Rw=n(cn);dh=i(Rw,"TFGenerationMixin"),Rw.forEach(t),mh=i(G,` (for the TensorFlow models) and
`),pn=a(G,"A",{href:!0});var Hw=n(pn);ch=i(Hw,"FlaxGenerationMixin"),Hw.forEach(t),ph=i(G," (for the Flax/JAX models)."),G.forEach(t),ym=d(o),He=a(o,"H2",{class:!0});var gc=n(He);ft=a(gc,"A",{id:!0,class:!0,href:!0});var Yw=n(ft);_s=a(Yw,"SPAN",{});var Kw=n(_s);_(Go.$$.fragment,Kw),Kw.forEach(t),Yw.forEach(t),hh=d(gc),bs=a(gc,"SPAN",{});var Jw=n(bs);fh=i(Jw,"PreTrainedModel"),Jw.forEach(t),gc.forEach(t),wm=d(o),j=a(o,"DIV",{class:!0});var F=n(j);_(So.$$.fragment,F),uh=d(F),vs=a(F,"P",{});var Zw=n(vs);gh=i(Zw,"Base class for all models."),Zw.forEach(t),_h=d(F),hn=a(F,"P",{});var Iw=n(hn);fn=a(Iw,"A",{href:!0});var Qw=n(fn);bh=i(Qw,"PreTrainedModel"),Qw.forEach(t),vh=i(Iw,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Iw.forEach(t),yh=d(F),Wo=a(F,"UL",{});var _c=n(Wo);ys=a(_c,"LI",{});var e$=n(ys);wh=i(e$,"resize the input embeddings,"),e$.forEach(t),$h=d(_c),ws=a(_c,"LI",{});var t$=n(ws);xh=i(t$,"prune heads in the self-attention heads."),t$.forEach(t),_c.forEach(t),Th=d(F),$s=a(F,"P",{});var o$=n($s);kh=i(o$,"Class attributes (overridden by derived classes):"),o$.forEach(t),Ph=d(F),H=a(F,"UL",{});var Le=n(H);xs=a(Le,"LI",{});var r$=n(xs);ge=a(r$,"P",{});var Qa=n(ge);Ts=a(Qa,"STRONG",{});var a$=n(Ts);Mh=i(a$,"config_class"),a$.forEach(t),Eh=i(Qa," ("),un=a(Qa,"A",{href:!0});var n$=n(un);jh=i(n$,"PretrainedConfig"),n$.forEach(t),Fh=i(Qa,") \u2014 A subclass of "),gn=a(Qa,"A",{href:!0});var s$=n(gn);Dh=i(s$,"PretrainedConfig"),s$.forEach(t),qh=i(Qa,` to use as configuration class
for this model architecture.`),Qa.forEach(t),r$.forEach(t),Ah=d(Le),Xo=a(Le,"LI",{});var bc=n(Xo);_e=a(bc,"P",{});var en=n(_e);ks=a(en,"STRONG",{});var i$=n(ks);zh=i(i$,"load_tf_weights"),i$.forEach(t),Ih=i(en," ("),Ps=a(en,"CODE",{});var l$=n(Ps);Ch=i(l$,"Callable"),l$.forEach(t),Lh=i(en,") \u2014 A python "),Ms=a(en,"EM",{});var d$=n(Ms);Uh=i(d$,"method"),d$.forEach(t),Oh=i(en,` for loading a TensorFlow checkpoint in a PyTorch model,
taking as arguments:`),en.forEach(t),Nh=d(bc),Ye=a(bc,"UL",{});var Bn=n(Ye);ut=a(Bn,"LI",{});var sm=n(ut);Es=a(sm,"STRONG",{});var m$=n(Es);Bh=i(m$,"model"),m$.forEach(t),Gh=i(sm," ("),_n=a(sm,"A",{href:!0});var c$=n(_n);Sh=i(c$,"PreTrainedModel"),c$.forEach(t),Wh=i(sm,") \u2014 An instance of the model on which to load the TensorFlow checkpoint."),sm.forEach(t),Xh=d(Bn),gt=a(Bn,"LI",{});var im=n(gt);js=a(im,"STRONG",{});var p$=n(js);Vh=i(p$,"config"),p$.forEach(t),Rh=i(im," ("),Fs=a(im,"CODE",{});var h$=n(Fs);Hh=i(h$,"PreTrainedConfig"),h$.forEach(t),Yh=i(im,") \u2014 An instance of the configuration associated to the model."),im.forEach(t),Kh=d(Bn),_t=a(Bn,"LI",{});var lm=n(_t);Ds=a(lm,"STRONG",{});var f$=n(Ds);Jh=i(f$,"path"),f$.forEach(t),Zh=i(lm," ("),qs=a(lm,"CODE",{});var u$=n(qs);Qh=i(u$,"str"),u$.forEach(t),ef=i(lm,") \u2014 A path to the TensorFlow checkpoint."),lm.forEach(t),Bn.forEach(t),bc.forEach(t),tf=d(Le),As=a(Le,"LI",{});var g$=n(As);bt=a(g$,"P",{});var dm=n(bt);zs=a(dm,"STRONG",{});var _$=n(zs);of=i(_$,"base_model_prefix"),_$.forEach(t),rf=i(dm," ("),Is=a(dm,"CODE",{});var b$=n(Is);af=i(b$,"str"),b$.forEach(t),nf=i(dm,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),dm.forEach(t),g$.forEach(t),sf=d(Le),Cs=a(Le,"LI",{});var v$=n(Cs);vt=a(v$,"P",{});var mm=n(vt);Ls=a(mm,"STRONG",{});var y$=n(Ls);lf=i(y$,"is_parallelizable"),y$.forEach(t),df=i(mm," ("),Us=a(mm,"CODE",{});var w$=n(Us);mf=i(w$,"bool"),w$.forEach(t),cf=i(mm,") \u2014 A flag indicating whether this model supports model parallelization."),mm.forEach(t),v$.forEach(t),pf=d(Le),Os=a(Le,"LI",{});var $$=n(Os);S=a($$,"P",{});var he=n(S);Ns=a(he,"STRONG",{});var x$=n(Ns);hf=i(x$,"main_input_name"),x$.forEach(t),ff=i(he," ("),Bs=a(he,"CODE",{});var T$=n(Bs);uf=i(T$,"str"),T$.forEach(t),gf=i(he,") \u2014 The name of the principal input to the model (often "),Gs=a(he,"CODE",{});var k$=n(Gs);_f=i(k$,"input_ids"),k$.forEach(t),bf=i(he,` for NLP
models, `),Ss=a(he,"CODE",{});var P$=n(Ss);vf=i(P$,"pixel_values"),P$.forEach(t),yf=i(he," for vision models and "),Ws=a(he,"CODE",{});var M$=n(Ws);wf=i(M$,"input_values"),M$.forEach(t),$f=i(he," for speech models)."),he.forEach(t),$$.forEach(t),Le.forEach(t),xf=d(F),be=a(F,"DIV",{class:!0});var Gn=n(be);_(Vo.$$.fragment,Gn),Tf=d(Gn),Ro=a(Gn,"P",{});var vc=n(Ro);kf=i(vc,`Upload the model file to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Xs=a(vc,"CODE",{});var E$=n(Xs);Pf=i(E$,"repo_path_or_name"),E$.forEach(t),Mf=i(vc,"."),vc.forEach(t),Ef=d(Gn),_(yt.$$.fragment,Gn),Gn.forEach(t),jf=d(F),A=a(F,"DIV",{class:!0});var z=n(A);_(Ho.$$.fragment,z),Ff=d(z),Vs=a(z,"P",{});var j$=n(Vs);Df=i(j$,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),j$.forEach(t),qf=d(z),Ke=a(z,"P",{});var Sn=n(Ke);Af=i(Sn,"The model is set in evaluation mode by default using "),Rs=a(Sn,"CODE",{});var F$=n(Rs);zf=i(F$,"model.eval()"),F$.forEach(t),If=i(Sn,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),Hs=a(Sn,"CODE",{});var D$=n(Hs);Cf=i(D$,"model.train()"),D$.forEach(t),Lf=i(Sn,"."),Sn.forEach(t),Uf=d(z),Yo=a(z,"P",{});var yc=n(Yo);Of=i(yc,"The warning "),Ys=a(yc,"EM",{});var q$=n(Ys);Nf=i(q$,"Weights from XXX not initialized from pretrained model"),q$.forEach(t),Bf=i(yc,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),yc.forEach(t),Gf=d(z),Ko=a(z,"P",{});var wc=n(Ko);Sf=i(wc,"The warning "),Ks=a(wc,"EM",{});var A$=n(Ks);Wf=i(A$,"Weights from XXX not used in YYY"),A$.forEach(t),Xf=i(wc,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),wc.forEach(t),Vf=d(z),_(wt.$$.fragment,z),Rf=d(z),_($t.$$.fragment,z),Hf=d(z),_(xt.$$.fragment,z),Yf=d(z),Js=a(z,"UL",{});var z$=n(Js);bn=a(z$,"LI",{});var Cw=n(bn);Zs=a(Cw,"CODE",{});var I$=n(Zs);Kf=i(I$,"low_cpu_mem_usage"),I$.forEach(t),Jf=i(Cw," algorithm:"),Cw.forEach(t),z$.forEach(t),Zf=d(z),Qs=a(z,"P",{});var C$=n(Qs);Qf=i(C$,"This is an experimental function that loads the model using ~1x model size CPU memory"),C$.forEach(t),eu=d(z),ei=a(z,"P",{});var L$=n(ei);tu=i(L$,"Here is how it works:"),L$.forEach(t),ou=d(z),Y=a(z,"OL",{});var Ue=n(Y);ti=a(Ue,"LI",{});var U$=n(ti);ru=i(U$,"save which state_dict keys we have"),U$.forEach(t),au=d(Ue),oi=a(Ue,"LI",{});var O$=n(oi);nu=i(O$,"drop state_dict before the model is created, since the latter takes 1x model size CPU memory"),O$.forEach(t),su=d(Ue),ri=a(Ue,"LI",{});var N$=n(ri);iu=i(N$,`after the model has been instantiated switch to the meta device all params/buffers that
are going to be replaced from the loaded state_dict`),N$.forEach(t),lu=d(Ue),ai=a(Ue,"LI",{});var B$=n(ai);du=i(B$,"load state_dict 2nd time"),B$.forEach(t),mu=d(Ue),ni=a(Ue,"LI",{});var G$=n(ni);cu=i(G$,"replace the params/buffers from the state_dict"),G$.forEach(t),Ue.forEach(t),pu=d(z),si=a(z,"P",{});var S$=n(si);hu=i(S$,"Currently, it can\u2019t handle deepspeed ZeRO stage 3 and ignores loading errors"),S$.forEach(t),z.forEach(t),fu=d(F),Tt=a(F,"DIV",{class:!0});var $c=n(Tt);_(Jo.$$.fragment,$c),uu=d($c),ii=a($c,"P",{});var W$=n(ii);gu=i(W$,"Returns the model\u2019s input embeddings."),W$.forEach(t),$c.forEach(t),_u=d(F),kt=a(F,"DIV",{class:!0});var xc=n(kt);_(Zo.$$.fragment,xc),bu=d(xc),vn=a(xc,"P",{});var Lw=n(vn);vu=i(Lw,`Get the memory footprint of a model. This will return the memory footprint of the current model in bytes.
Useful to benchmark the memory footprint of the current model and design some tests. Solution inspired from the
PyTorch discussions: `),Qo=a(Lw,"A",{href:!0,rel:!0});var X$=n(Qo);yu=i(X$,"https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2"),X$.forEach(t),Lw.forEach(t),xc.forEach(t),wu=d(F),Pt=a(F,"DIV",{class:!0});var Tc=n(Pt);_(er.$$.fragment,Tc),$u=d(Tc),li=a(Tc,"P",{});var V$=n(li);xu=i(V$,"Returns the model\u2019s output embeddings."),V$.forEach(t),Tc.forEach(t),Tu=d(F),ve=a(F,"DIV",{class:!0});var Wn=n(ve);_(tr.$$.fragment,Wn),ku=d(Wn),di=a(Wn,"P",{});var R$=n(di);Pu=i(R$,"Deactivates gradient checkpointing for the current model."),R$.forEach(t),Mu=d(Wn),mi=a(Wn,"P",{});var H$=n(mi);Eu=i(H$,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),H$.forEach(t),Wn.forEach(t),ju=d(F),ye=a(F,"DIV",{class:!0});var Xn=n(ye);_(or.$$.fragment,Xn),Fu=d(Xn),ci=a(Xn,"P",{});var Y$=n(ci);Du=i(Y$,"Activates gradient checkpointing for the current model."),Y$.forEach(t),qu=d(Xn),pi=a(Xn,"P",{});var K$=n(pi);Au=i(K$,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),K$.forEach(t),Xn.forEach(t),zu=d(F),Mt=a(F,"DIV",{class:!0});var kc=n(Mt);_(rr.$$.fragment,kc),Iu=d(kc),hi=a(kc,"P",{});var J$=n(hi);Cu=i(J$,"If needed prunes and maybe initializes weights."),J$.forEach(t),kc.forEach(t),Lu=d(F),Et=a(F,"DIV",{class:!0});var Pc=n(Et);_(ar.$$.fragment,Pc),Uu=d(Pc),fi=a(Pc,"P",{});var Z$=n(fi);Ou=i(Z$,`A method executed at the end of each Transformer model initialization, to execute code that needs the model\u2019s
modules properly initialized (such as weight initialization).`),Z$.forEach(t),Pc.forEach(t),Nu=d(F),jt=a(F,"DIV",{class:!0});var Mc=n(jt);_(nr.$$.fragment,Mc),Bu=d(Mc),ui=a(Mc,"P",{});var Q$=n(ui);Gu=i(Q$,"Prunes heads of the base model."),Q$.forEach(t),Mc.forEach(t),Su=d(F),we=a(F,"DIV",{class:!0});var Vn=n(we);_(sr.$$.fragment,Vn),Wu=d(Vn),gi=a(Vn,"P",{});var ex=n(gi);Xu=i(ex,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),ex.forEach(t),Vu=d(Vn),_(Ft.$$.fragment,Vn),Vn.forEach(t),Ru=d(F),$e=a(F,"DIV",{class:!0});var Rn=n($e);_(ir.$$.fragment,Rn),Hu=d(Rn),lr=a(Rn,"P",{});var Ec=n(lr);Yu=i(Ec,"Resizes input token embeddings matrix of the model if "),_i=a(Ec,"CODE",{});var tx=n(_i);Ku=i(tx,"new_num_tokens != config.vocab_size"),tx.forEach(t),Ju=i(Ec,"."),Ec.forEach(t),Zu=d(Rn),dr=a(Rn,"P",{});var jc=n(dr);Qu=i(jc,"Takes care of tying weights embeddings afterwards if the model class has a "),bi=a(jc,"CODE",{});var ox=n(bi);eg=i(ox,"tie_weights()"),ox.forEach(t),tg=i(jc," method."),jc.forEach(t),Rn.forEach(t),og=d(F),Dt=a(F,"DIV",{class:!0});var Fc=n(Dt);_(mr.$$.fragment,Fc),rg=d(Fc),cr=a(Fc,"P",{});var Dc=n(cr);ag=i(Dc,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),vi=a(Dc,"CODE",{});var rx=n(vi);ng=i(rx,"[from_pretrained()](/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)"),rx.forEach(t),sg=i(Dc," class method."),Dc.forEach(t),Fc.forEach(t),ig=d(F),qt=a(F,"DIV",{class:!0});var qc=n(qt);_(pr.$$.fragment,qc),lg=d(qc),yi=a(qc,"P",{});var ax=n(yi);dg=i(ax,"Set model\u2019s input embeddings."),ax.forEach(t),qc.forEach(t),mg=d(F),xe=a(F,"DIV",{class:!0});var Hn=n(xe);_(hr.$$.fragment,Hn),cg=d(Hn),wi=a(Hn,"P",{});var nx=n(wi);pg=i(nx,"Tie the weights between the input embeddings and the output embeddings."),nx.forEach(t),hg=d(Hn),fr=a(Hn,"P",{});var Ac=n(fr);fg=i(Ac,"If the "),$i=a(Ac,"CODE",{});var sx=n($i);ug=i(sx,"torchscript"),sx.forEach(t),gg=i(Ac,` flag is set in the configuration, can\u2019t handle parameter sharing so we are cloning the
weights instead.`),Ac.forEach(t),Hn.forEach(t),F.forEach(t),$m=d(o),yn=a(o,"A",{id:!0}),n(yn).forEach(t),xm=d(o),Je=a(o,"H3",{class:!0});var zc=n(Je);At=a(zc,"A",{id:!0,class:!0,href:!0});var ix=n(At);xi=a(ix,"SPAN",{});var lx=n(xi);_(ur.$$.fragment,lx),lx.forEach(t),ix.forEach(t),_g=d(zc),Ti=a(zc,"SPAN",{});var dx=n(Ti);bg=i(dx,"Large model loading"),dx.forEach(t),zc.forEach(t),Tm=d(o),Te=a(o,"P",{});var Yn=n(Te);vg=i(Yn,"In Transformers 4.20.0, the "),wn=a(Yn,"A",{href:!0});var mx=n(wn);yg=i(mx,"from_pretrained()"),mx.forEach(t),wg=i(Yn," method has been reworked to accommodate large models using "),gr=a(Yn,"A",{href:!0,rel:!0});var cx=n(gr);$g=i(cx,"Accelerate"),cx.forEach(t),xg=i(Yn,". This requires Accelerate >= 0.9.0 and PyTorch >= 1.9.0. Instead of creating the full model, then loading the pretrained weights inside it (which takes twice the size of the model in RAM, one for the randomly initialized model, one for the weights), there is an option to create the model as an empty shell, then only materialize its parameters when the pretrained weights are loaded."),Yn.forEach(t),km=d(o),zt=a(o,"P",{});var Ic=n(zt);Tg=i(Ic,"This option can be activated with "),ki=a(Ic,"CODE",{});var px=n(ki);kg=i(px,"low_cpu_mem_usage=True"),px.forEach(t),Pg=i(Ic,". The model is first created on the Meta device (with empty weights) and the state dict is then loaded inside it (shard by shard in the case of a sharded checkpoint). This way the maximum RAM used is the full size of the model only."),Ic.forEach(t),Pm=d(o),_(_r.$$.fragment,o),Mm=d(o),It=a(o,"P",{});var Cc=n(It);Mg=i(Cc,"Moreover, you can directly place the model on different devices if it doesn\u2019t fully fit in RAM (only works for inference for now). With "),Pi=a(Cc,"CODE",{});var hx=n(Pi);Eg=i(hx,'device_map="auto"'),hx.forEach(t),jg=i(Cc,", Accelerate will determine where to put each layer to maximize the use of your fastest devices (GPUs) and offload the rest on the CPU, or even the hard drive if you don\u2019t have enough GPU RAM (or CPU RAM). Even if the model is split across several devices, it will run as you would normally expect."),Cc.forEach(t),Em=d(o),oe=a(o,"P",{});var Uo=n(oe);Fg=i(Uo,"When passing a "),Mi=a(Uo,"CODE",{});var fx=n(Mi);Dg=i(fx,"device_map"),fx.forEach(t),qg=i(Uo,", "),Ei=a(Uo,"CODE",{});var ux=n(Ei);Ag=i(ux,"low_cpu_mem_usage"),ux.forEach(t),zg=i(Uo," is automatically set to "),ji=a(Uo,"CODE",{});var gx=n(ji);Ig=i(gx,"True"),gx.forEach(t),Cg=i(Uo,", so you don\u2019t need to specify it:"),Uo.forEach(t),jm=d(o),_(br.$$.fragment,o),Fm=d(o),Ct=a(o,"P",{});var Lc=n(Ct);Lg=i(Lc,"You can inspect how the model was split across devices by looking at its "),Fi=a(Lc,"CODE",{});var _x=n(Fi);Ug=i(_x,"hf_device_map"),_x.forEach(t),Og=i(Lc," attribute:"),Lc.forEach(t),Dm=d(o),_(vr.$$.fragment,o),qm=d(o),_(yr.$$.fragment,o),Am=d(o),$n=a(o,"P",{});var bx=n($n);Ng=i(bx,"You can also write your own device map following the same format (a dictionary layer name to device). It should map all parameters of the model to a given device, but you don\u2019t have to detail where all the submosules of one layer go if that layer is entirely on the same device. For instance, the following device map would work properly for T0pp (as long as you have the GPU memory):"),bx.forEach(t),zm=d(o),_(wr.$$.fragment,o),Im=d(o),Lt=a(o,"P",{});var Uc=n(Lt);Bg=i(Uc,"Another way to minimize the memory impact of your model is to instantiate it at a lower precision dtype (like "),Di=a(Uc,"CODE",{});var vx=n(Di);Gg=i(vx,"torch.float16"),vx.forEach(t),Sg=i(Uc,") or use direct quantization techniques as described below."),Uc.forEach(t),Cm=d(o),Ze=a(o,"H3",{class:!0});var Oc=n(Ze);Ut=a(Oc,"A",{id:!0,class:!0,href:!0});var yx=n(Ut);qi=a(yx,"SPAN",{});var wx=n(qi);_($r.$$.fragment,wx),wx.forEach(t),yx.forEach(t),Wg=d(Oc),Ai=a(Oc,"SPAN",{});var $x=n(Ai);Xg=i($x,"Model Instantiation dtype"),$x.forEach(t),Oc.forEach(t),Lm=d(o),re=a(o,"P",{});var Oo=n(re);Vg=i(Oo,"Under Pytorch a model normally gets instantiated with "),zi=a(Oo,"CODE",{});var xx=n(zi);Rg=i(xx,"torch.float32"),xx.forEach(t),Hg=i(Oo,` format. This can be an issue if one tries to
load a model whose weights are in fp16, since it\u2019d require twice as much memory. To overcome this limitation, you can
either explicitly pass the desired `),Ii=a(Oo,"CODE",{});var Tx=n(Ii);Yg=i(Tx,"dtype"),Tx.forEach(t),Kg=i(Oo," using "),Ci=a(Oo,"CODE",{});var kx=n(Ci);Jg=i(kx,"torch_dtype"),kx.forEach(t),Zg=i(Oo," argument:"),Oo.forEach(t),Um=d(o),_(xr.$$.fragment,o),Om=d(o),ke=a(o,"P",{});var Kn=n(ke);Qg=i(Kn,"or, if you want the model to always load in the most optimal memory pattern, you can use the special value "),Li=a(Kn,"CODE",{});var Px=n(Li);e_=i(Px,'"auto"'),Px.forEach(t),t_=i(Kn,`,
and then `),Ui=a(Kn,"CODE",{});var Mx=n(Ui);o_=i(Mx,"dtype"),Mx.forEach(t),r_=i(Kn," will be automatically derived from the model\u2019s weights:"),Kn.forEach(t),Nm=d(o),_(Tr.$$.fragment,o),Bm=d(o),Ot=a(o,"P",{});var Nc=n(Ot);a_=i(Nc,"Models instantiated from scratch can also be told which "),Oi=a(Nc,"CODE",{});var Ex=n(Oi);n_=i(Ex,"dtype"),Ex.forEach(t),s_=i(Nc," to use with:"),Nc.forEach(t),Gm=d(o),_(kr.$$.fragment,o),Sm=d(o),xn=a(o,"P",{});var jx=n(xn);i_=i(jx,"Due to Pytorch design, this functionality is only available for floating dtypes."),jx.forEach(t),Wm=d(o),Qe=a(o,"H3",{class:!0});var Bc=n(Qe);Nt=a(Bc,"A",{id:!0,class:!0,href:!0});var Fx=n(Nt);Ni=a(Fx,"SPAN",{});var Dx=n(Ni);_(Pr.$$.fragment,Dx),Dx.forEach(t),Fx.forEach(t),l_=d(Bc),Tn=a(Bc,"SPAN",{});var Uw=n(Tn);Bi=a(Uw,"CODE",{});var qx=n(Bi);d_=i(qx,"bitsandbytes"),qx.forEach(t),m_=i(Uw," integration for Int8 mixed-precision matrix decomposition"),Uw.forEach(t),Bc.forEach(t),Xm=d(o),W=a(o,"P",{});var Oe=n(W);c_=i(Oe,"From the paper "),Gi=a(Oe,"CODE",{});var Ax=n(Gi);p_=i(Ax,"GPT3.int8() : 8-bit Matrix Multiplication for Transformers at Scale"),Ax.forEach(t),h_=i(Oe,`, we suport HuggingFace \u{1F917}  integration for all models in the Hub with few lines of code.
For models trained in  half-precision (aka, either `),Si=a(Oe,"CODE",{});var zx=n(Si);f_=i(zx,"float16"),zx.forEach(t),u_=i(Oe," or "),Wi=a(Oe,"CODE",{});var Ix=n(Wi);g_=i(Ix,"bfloat16"),Ix.forEach(t),__=i(Oe,") or full precision. This method aims to reduce "),Xi=a(Oe,"CODE",{});var Cx=n(Xi);b_=i(Cx,"nn.Linear"),Cx.forEach(t),v_=i(Oe,` size by 2 (if trained in half precision) or by 4 if trained in full precision, without affecting too much quality by operating on the outliers in half-precision.
This technique is useful and works well for billion scale models (>1B parameters) therefore we advice you to use it only for models of that scale. This method has been tested for 2-billion to 176-billion scale models and supports only PyTorch models.`),Oe.forEach(t),Vm=d(o),kn=a(o,"P",{});var Lx=n(kn);Pn=a(Lx,"IMG",{src:!0,alt:!0}),Lx.forEach(t),Rm=d(o),Mn=a(o,"P",{});var Ux=n(Mn);y_=i(Ux,`Int8 mixed-precision matrix decomposition works by separating a matrix multiplication into two streams: (1) and systematic feature outlier stream matrix multiplied in fp16 (0.01%), (2) a regular stream of int8 matrix multiplication (99.9%). With this method, int8 inference with no predictive degradation is possible for very large models (>=176B parameters).
Values are usually normally distributed, that is, most values are in the range [-3.5, 3.5], but there are some exceptional systematic outliers that are very differently distributed for large models. These outliers are often in the interval [-60, -6] or [6, 60]. Int8 quantization works well for values of magnitude ~5, but beyond that, there is a significant performance penalty. A good default threshold is 6, but a lower threshold might be needed for more unstable models (small models, fine-tuning).`),Ux.forEach(t),Hm=d(o),En=a(o,"P",{});var Ox=n(En);w_=i(Ox,"Note also that you would require a GPU to run mixed-8bit models as the kernels has been compiled for GPUs only. Make sure that you have enough GPU RAM to store the quarter (or half if your model is natively in half precision) of the model before using this feature."),Ox.forEach(t),Ym=d(o),Mr=a(o,"P",{});var Ow=n(Mr);$_=i(Ow,"Below are some notes to help you use this module, or follow this demo on Google colab: "),Er=a(Ow,"A",{href:!0,rel:!0});var Nx=n(Er);jn=a(Nx,"IMG",{src:!0,alt:!0}),Nx.forEach(t),Ow.forEach(t),Km=d(o),et=a(o,"H4",{class:!0});var Gc=n(et);Bt=a(Gc,"A",{id:!0,class:!0,href:!0});var Bx=n(Bt);Vi=a(Bx,"SPAN",{});var Gx=n(Vi);_(jr.$$.fragment,Gx),Gx.forEach(t),Bx.forEach(t),x_=d(Gc),Ri=a(Gc,"SPAN",{});var Sx=n(Ri);T_=i(Sx,"Requirements"),Sx.forEach(t),Gc.forEach(t),Jm=d(o),Pe=a(o,"UL",{});var Jn=n(Pe);Hi=a(Jn,"LI",{});var Wx=n(Hi);k_=i(Wx,"Make sure you run that on a NVIDIA GPU that supports 8-bit tensor cores (Turing or Ampere GPUs - e.g. T4, RTX20s RTX30s, A40-A100). Note that previous generations of NVIDIA GPUs do not support 8-bit tensor cores."),Wx.forEach(t),P_=d(Jn),Gt=a(Jn,"LI",{});var cm=n(Gt);M_=i(cm,"Install the correct version of "),Yi=a(cm,"CODE",{});var Xx=n(Yi);E_=i(Xx,"bitsandbytes"),Xx.forEach(t),j_=i(cm,` by running:
`),Ki=a(cm,"CODE",{});var Vx=n(Ki);F_=i(Vx,"pip install -i https://test.pypi.org/simple/ bitsandbytes"),Vx.forEach(t),cm.forEach(t),D_=d(Jn),St=a(Jn,"LI",{});var pm=n(St);q_=i(pm,"Install "),Ji=a(pm,"CODE",{});var Rx=n(Ji);A_=i(Rx,"accelerate"),Rx.forEach(t),z_=i(pm,`:
`),Zi=a(pm,"CODE",{});var Hx=n(Zi);I_=i(Hx,"pip install accelerate"),Hx.forEach(t),pm.forEach(t),Jn.forEach(t),Zm=d(o),tt=a(o,"H4",{class:!0});var Sc=n(tt);Wt=a(Sc,"A",{id:!0,class:!0,href:!0});var Yx=n(Wt);Qi=a(Yx,"SPAN",{});var Kx=n(Qi);_(Fr.$$.fragment,Kx),Kx.forEach(t),Yx.forEach(t),C_=d(Sc),el=a(Sc,"SPAN",{});var Jx=n(el);L_=i(Jx,"Running mixed-int8 models"),Jx.forEach(t),Sc.forEach(t),Qm=d(o),Fn=a(o,"P",{});var Zx=n(Fn);U_=i(Zx,"After carefully installing the required libraries, the way to load your mixed 8-bit model is as follows:"),Zx.forEach(t),ec=d(o),_(Dr.$$.fragment,o),tc=d(o),N=a(o,"P",{});var se=n(N);O_=i(se,"The implementation supports multi-GPU setup thanks to "),tl=a(se,"CODE",{});var Qx=n(tl);N_=i(Qx,"accelerate"),Qx.forEach(t),B_=i(se," as backend. If you want to control the GPU memory you want to allocate for each GPU, you can use the "),ol=a(se,"CODE",{});var eT=n(ol);G_=i(eT,"max_memory"),eT.forEach(t),S_=i(se,` argument as follows:
(If allocating `),rl=a(se,"CODE",{});var tT=n(rl);W_=i(tT,"1GB"),tT.forEach(t),X_=i(se," into GPU-0 and "),al=a(se,"CODE",{});var oT=n(al);V_=i(oT,"2GB"),oT.forEach(t),R_=i(se," into GPU-1, you can use "),nl=a(se,"CODE",{});var rT=n(nl);H_=i(rT,'max_memory={0:"1GB", 1:"2GB"}'),rT.forEach(t),Y_=i(se,")"),se.forEach(t),oc=d(o),_(qr.$$.fragment,o),rc=d(o),ot=a(o,"H2",{class:!0});var Wc=n(ot);Xt=a(Wc,"A",{id:!0,class:!0,href:!0});var aT=n(Xt);sl=a(aT,"SPAN",{});var nT=n(sl);_(Ar.$$.fragment,nT),nT.forEach(t),aT.forEach(t),K_=d(Wc),il=a(Wc,"SPAN",{});var sT=n(il);J_=i(sT,"ModuleUtilsMixin"),sT.forEach(t),Wc.forEach(t),ac=d(o),C=a(o,"DIV",{class:!0});var L=n(C);_(zr.$$.fragment,L),Z_=d(L),Ir=a(L,"P",{});var Xc=n(Ir);Q_=i(Xc,"A few utilities for "),ll=a(Xc,"CODE",{});var iT=n(ll);eb=i(iT,"torch.nn.Modules"),iT.forEach(t),tb=i(Xc,", to be used as a mixin."),Xc.forEach(t),ob=d(L),Me=a(L,"DIV",{class:!0});var Zn=n(Me);_(Cr.$$.fragment,Zn),rb=d(Zn),dl=a(Zn,"P",{});var lT=n(dl);ab=i(lT,"Add a memory hook before and after each sub-module forward pass to record increase in memory consumption."),lT.forEach(t),nb=d(Zn),rt=a(Zn,"P",{});var Qn=n(rt);sb=i(Qn,"Increase in memory consumption is stored in a "),ml=a(Qn,"CODE",{});var dT=n(ml);ib=i(dT,"mem_rss_diff"),dT.forEach(t),lb=i(Qn,` attribute for each module and can be reset to zero
with `),cl=a(Qn,"CODE",{});var mT=n(cl);db=i(mT,"model.reset_memory_hooks_state()"),mT.forEach(t),mb=i(Qn,"."),Qn.forEach(t),Zn.forEach(t),cb=d(L),Vt=a(L,"DIV",{class:!0});var Vc=n(Vt);_(Lr.$$.fragment,Vc),pb=d(Vc),pl=a(Vc,"P",{});var cT=n(pl);hb=i(cT,"Helper function to estimate the total number of tokens from the model inputs."),cT.forEach(t),Vc.forEach(t),fb=d(L),Rt=a(L,"DIV",{class:!0});var Rc=n(Rt);_(Ur.$$.fragment,Rc),ub=d(Rc),at=a(Rc,"P",{});var es=n(at);gb=i(es,`Get number of (optionally, non-embeddings) floating-point operations for the forward and backward passes of a
batch with this transformer model. Default approximation neglects the quadratic dependency on the number of
tokens (valid if `),hl=a(es,"CODE",{});var pT=n(hl);_b=i(pT,"12 * d_model << sequence_length"),pT.forEach(t),bb=i(es,") as laid out in "),Or=a(es,"A",{href:!0,rel:!0});var hT=n(Or);vb=i(hT,`this
paper`),hT.forEach(t),yb=i(es,` section 2.1. Should be overridden for transformers with parameter
re-use e.g. Albert or Universal Transformers, or if doing long-range modeling with very high sequence lengths.`),es.forEach(t),Rc.forEach(t),wb=d(L),Ht=a(L,"DIV",{class:!0});var Hc=n(Ht);_(Nr.$$.fragment,Hc),$b=d(Hc),fl=a(Hc,"P",{});var fT=n(fl);xb=i(fT,"Makes broadcastable attention and causal masks so that future and masked tokens are ignored."),fT.forEach(t),Hc.forEach(t),Tb=d(L),Yt=a(L,"DIV",{class:!0});var Yc=n(Yt);_(Br.$$.fragment,Yc),kb=d(Yc),ul=a(Yc,"P",{});var uT=n(ul);Pb=i(uT,"Prepare the head mask if needed."),uT.forEach(t),Yc.forEach(t),Mb=d(L),Kt=a(L,"DIV",{class:!0});var Kc=n(Kt);_(Gr.$$.fragment,Kc),Eb=d(Kc),gl=a(Kc,"P",{});var gT=n(gl);jb=i(gT,"Invert an attention mask (e.g., switches 0. and 1.)."),gT.forEach(t),Kc.forEach(t),Fb=d(L),Jt=a(L,"DIV",{class:!0});var Jc=n(Jt);_(Sr.$$.fragment,Jc),Db=d(Jc),_l=a(Jc,"P",{});var _T=n(_l);qb=i(_T,"Get number of (optionally, trainable or non-embeddings) parameters in the module."),_T.forEach(t),Jc.forEach(t),Ab=d(L),Zt=a(L,"DIV",{class:!0});var Zc=n(Zt);_(Wr.$$.fragment,Zc),zb=d(Zc),nt=a(Zc,"P",{});var ts=n(nt);Ib=i(ts,"Reset the "),bl=a(ts,"CODE",{});var bT=n(bl);Cb=i(bT,"mem_rss_diff"),bT.forEach(t),Lb=i(ts," attribute of each module (see "),Dn=a(ts,"A",{href:!0});var vT=n(Dn);Ub=i(vT,"add_memory_hooks()"),vT.forEach(t),Ob=i(ts,")."),ts.forEach(t),Zc.forEach(t),L.forEach(t),nc=d(o),st=a(o,"H2",{class:!0});var Qc=n(st);Qt=a(Qc,"A",{id:!0,class:!0,href:!0});var yT=n(Qt);vl=a(yT,"SPAN",{});var wT=n(vl);_(Xr.$$.fragment,wT),wT.forEach(t),yT.forEach(t),Nb=d(Qc),yl=a(Qc,"SPAN",{});var $T=n(yl);Bb=i($T,"TFPreTrainedModel"),$T.forEach(t),Qc.forEach(t),sc=d(o),M=a(o,"DIV",{class:!0});var E=n(M);_(Vr.$$.fragment,E),Gb=d(E),wl=a(E,"P",{});var xT=n(wl);Sb=i(xT,"Base class for all TF models."),xT.forEach(t),Wb=d(E),qn=a(E,"P",{});var Nw=n(qn);An=a(Nw,"A",{href:!0});var TT=n(An);Xb=i(TT,"TFPreTrainedModel"),TT.forEach(t),Vb=i(Nw,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models as well as a few methods common to all models to:`),Nw.forEach(t),Rb=d(E),Rr=a(E,"UL",{});var ep=n(Rr);$l=a(ep,"LI",{});var kT=n($l);Hb=i(kT,"resize the input embeddings,"),kT.forEach(t),Yb=d(ep),xl=a(ep,"LI",{});var PT=n(xl);Kb=i(PT,"prune heads in the self-attention heads."),PT.forEach(t),ep.forEach(t),Jb=d(E),Tl=a(E,"P",{});var MT=n(Tl);Zb=i(MT,"Class attributes (overridden by derived classes):"),MT.forEach(t),Qb=d(E),it=a(E,"UL",{});var os=n(it);Ee=a(os,"LI",{});var tn=n(Ee);kl=a(tn,"STRONG",{});var ET=n(kl);ev=i(ET,"config_class"),ET.forEach(t),tv=i(tn," ("),zn=a(tn,"A",{href:!0});var jT=n(zn);ov=i(jT,"PretrainedConfig"),jT.forEach(t),rv=i(tn,") \u2014 A subclass of "),In=a(tn,"A",{href:!0});var FT=n(In);av=i(FT,"PretrainedConfig"),FT.forEach(t),nv=i(tn,` to use as configuration class
for this model architecture.`),tn.forEach(t),sv=d(os),eo=a(os,"LI",{});var hm=n(eo);Pl=a(hm,"STRONG",{});var DT=n(Pl);iv=i(DT,"base_model_prefix"),DT.forEach(t),lv=i(hm," ("),Ml=a(hm,"CODE",{});var qT=n(Ml);dv=i(qT,"str"),qT.forEach(t),mv=i(hm,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),hm.forEach(t),cv=d(os),X=a(os,"LI",{});var fe=n(X);El=a(fe,"STRONG",{});var AT=n(El);pv=i(AT,"main_input_name"),AT.forEach(t),hv=i(fe," ("),jl=a(fe,"CODE",{});var zT=n(jl);fv=i(zT,"str"),zT.forEach(t),uv=i(fe,") \u2014 The name of the principal input to the model (often "),Fl=a(fe,"CODE",{});var IT=n(Fl);gv=i(IT,"input_ids"),IT.forEach(t),_v=i(fe,` for NLP
models, `),Dl=a(fe,"CODE",{});var CT=n(Dl);bv=i(CT,"pixel_values"),CT.forEach(t),vv=i(fe," for vision models and "),ql=a(fe,"CODE",{});var LT=n(ql);yv=i(LT,"input_values"),LT.forEach(t),wv=i(fe," for speech models)."),fe.forEach(t),os.forEach(t),$v=d(E),je=a(E,"DIV",{class:!0});var rs=n(je);_(Hr.$$.fragment,rs),xv=d(rs),Yr=a(rs,"P",{});var tp=n(Yr);Tv=i(tp,"Upload the model files to the \u{1F917} Model Hub while synchronizing a local clone of the repo in "),Al=a(tp,"CODE",{});var UT=n(Al);kv=i(UT,"repo_path_or_name"),UT.forEach(t),Pv=i(tp,"."),tp.forEach(t),Mv=d(rs),_(to.$$.fragment,rs),rs.forEach(t),Ev=d(E),oo=a(E,"DIV",{class:!0});var op=n(oo);_(Kr.$$.fragment,op),jv=d(op),zl=a(op,"P",{});var OT=n(zl);Fv=i(OT,`This is a thin wrapper that sets the model\u2019s loss output head as the loss if the user does not specify a loss
function themselves.`),OT.forEach(t),op.forEach(t),Dv=d(E),B=a(E,"DIV",{class:!0});var ie=n(B);_(Jr.$$.fragment,ie),qv=d(ie),Il=a(ie,"P",{});var NT=n(Il);Av=i(NT,"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration."),NT.forEach(t),zv=d(ie),Zr=a(ie,"P",{});var rp=n(Zr);Iv=i(rp,"The warning "),Cl=a(rp,"EM",{});var BT=n(Cl);Cv=i(BT,"Weights from XXX not initialized from pretrained model"),BT.forEach(t),Lv=i(rp,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),rp.forEach(t),Uv=d(ie),Qr=a(ie,"P",{});var ap=n(Qr);Ov=i(ap,"The warning "),Ll=a(ap,"EM",{});var GT=n(Ll);Nv=i(GT,"Weights from XXX not used in YYY"),GT.forEach(t),Bv=i(ap,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),ap.forEach(t),Gv=d(ie),_(ro.$$.fragment,ie),Sv=d(ie),_(ao.$$.fragment,ie),ie.forEach(t),Wv=d(E),no=a(E,"DIV",{class:!0});var np=n(no);_(ea.$$.fragment,np),Xv=d(np),Ul=a(np,"P",{});var ST=n(Ul);Vv=i(ST,"Dict of bias attached to an LM head. The key represents the name of the bias attribute."),ST.forEach(t),np.forEach(t),Rv=d(E),so=a(E,"DIV",{class:!0});var sp=n(so);_(ta.$$.fragment,sp),Hv=d(sp),Ol=a(sp,"P",{});var WT=n(Ol);Yv=i(WT,"Returns the model\u2019s input embeddings layer."),WT.forEach(t),sp.forEach(t),Kv=d(E),io=a(E,"DIV",{class:!0});var ip=n(io);_(oa.$$.fragment,ip),Jv=d(ip),Nl=a(ip,"P",{});var XT=n(Nl);Zv=i(XT,"The LM Head layer. This method must be overwritten by all the models that have a lm head."),XT.forEach(t),ip.forEach(t),Qv=d(E),lo=a(E,"DIV",{class:!0});var lp=n(lo);_(ra.$$.fragment,lp),ey=d(lp),Bl=a(lp,"P",{});var VT=n(Bl);ty=i(VT,"Returns the model\u2019s output embeddings"),VT.forEach(t),lp.forEach(t),oy=d(E),mo=a(E,"DIV",{class:!0});var dp=n(mo);_(aa.$$.fragment,dp),ry=d(dp),Gl=a(dp,"P",{});var RT=n(Gl);ay=i(RT,`Get the layer that handles a bias attribute in case the model has an LM head with weights tied to the
embeddings`),RT.forEach(t),dp.forEach(t),ny=d(E),co=a(E,"DIV",{class:!0});var mp=n(co);_(na.$$.fragment,mp),sy=d(mp),Sl=a(mp,"P",{});var HT=n(Sl);iy=i(HT,"Get the concatenated _prefix name of the bias from the model name to the parent layer"),HT.forEach(t),mp.forEach(t),ly=d(E),po=a(E,"DIV",{class:!0});var cp=n(po);_(sa.$$.fragment,cp),dy=d(cp),Wl=a(cp,"P",{});var YT=n(Wl);my=i(YT,`Loads a saved checkpoint (model weights and optimizer state) from a repo. Returns the current epoch count when
the checkpoint was made.`),YT.forEach(t),cp.forEach(t),cy=d(E),ho=a(E,"DIV",{class:!0});var pp=n(ho);_(ia.$$.fragment,pp),py=d(pp),K=a(pp,"P",{});var Ne=n(K);hy=i(Ne,"Wraps a HuggingFace "),la=a(Ne,"A",{href:!0,rel:!0});var KT=n(la);fy=i(KT,"Dataset"),KT.forEach(t),uy=i(Ne," as a "),Xl=a(Ne,"CODE",{});var JT=n(Xl);gy=i(JT,"tf.data.Dataset"),JT.forEach(t),_y=i(Ne,` with collation and batching. This method is
designed to create a \u201Cready-to-use\u201D dataset that can be passed directly to Keras methods like `),Vl=a(Ne,"CODE",{});var ZT=n(Vl);by=i(ZT,"fit()"),ZT.forEach(t),vy=i(Ne,` without
further modification. The method will drop columns from the dataset if they don\u2019t match input names for the
model. If you want to specify the column names to return rather than using the names that match this model, we
recommend using `),Rl=a(Ne,"CODE",{});var QT=n(Rl);yy=i(QT,"Dataset.to_tf_dataset()"),QT.forEach(t),wy=i(Ne," instead."),Ne.forEach(t),pp.forEach(t),$y=d(E),fo=a(E,"DIV",{class:!0});var hp=n(fo);_(da.$$.fragment,hp),xy=d(hp),Hl=a(hp,"P",{});var e0=n(Hl);Ty=i(e0,"Prunes heads of the base model."),e0.forEach(t),hp.forEach(t),ky=d(E),Fe=a(E,"DIV",{class:!0});var as=n(Fe);_(ma.$$.fragment,as),Py=d(as),ca=a(as,"P",{});var fp=n(ca);My=i(fp,"Resizes input token embeddings matrix of the model if "),Yl=a(fp,"CODE",{});var t0=n(Yl);Ey=i(t0,"new_num_tokens != config.vocab_size"),t0.forEach(t),jy=i(fp,"."),fp.forEach(t),Fy=d(as),pa=a(as,"P",{});var up=n(pa);Dy=i(up,"Takes care of tying weights embeddings afterwards if the model class has a "),Kl=a(up,"CODE",{});var o0=n(Kl);qy=i(o0,"tie_weights()"),o0.forEach(t),Ay=i(up," method."),up.forEach(t),as.forEach(t),zy=d(E),uo=a(E,"DIV",{class:!0});var gp=n(uo);_(ha.$$.fragment,gp),Iy=d(gp),fa=a(gp,"P",{});var _p=n(fa);Cy=i(_p,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Cn=a(_p,"A",{href:!0});var r0=n(Cn);Ly=i(r0,"from_pretrained()"),r0.forEach(t),Uy=i(_p," class method."),_p.forEach(t),gp.forEach(t),Oy=d(E),go=a(E,"DIV",{class:!0});var bp=n(go);_(ua.$$.fragment,bp),Ny=d(bp),Jl=a(bp,"P",{});var a0=n(Jl);By=i(a0,"Method used for serving the model."),a0.forEach(t),bp.forEach(t),Gy=d(E),_o=a(E,"DIV",{class:!0});var vp=n(_o);_(ga.$$.fragment,vp),Sy=d(vp),Zl=a(vp,"P",{});var n0=n(Zl);Wy=i(n0,"Prepare the output of the saved model. Each model must implement this function."),n0.forEach(t),vp.forEach(t),Xy=d(E),bo=a(E,"DIV",{class:!0});var yp=n(bo);_(_a.$$.fragment,yp),Vy=d(yp),Ql=a(yp,"P",{});var s0=n(Ql);Ry=i(s0,"Set all the bias in the LM head."),s0.forEach(t),yp.forEach(t),Hy=d(E),vo=a(E,"DIV",{class:!0});var wp=n(vo);_(ba.$$.fragment,wp),Yy=d(wp),ed=a(wp,"P",{});var i0=n(ed);Ky=i(i0,"Set model\u2019s input embeddings"),i0.forEach(t),wp.forEach(t),Jy=d(E),yo=a(E,"DIV",{class:!0});var $p=n(yo);_(va.$$.fragment,$p),Zy=d($p),td=a($p,"P",{});var l0=n(td);Qy=i(l0,"Set model\u2019s output embeddings"),l0.forEach(t),$p.forEach(t),e1=d(E),wo=a(E,"DIV",{class:!0});var xp=n(wo);_(ya.$$.fragment,xp),t1=d(xp),wa=a(xp,"P",{});var Tp=n(wa);o1=i(Tp,"A modification of Keras\u2019s default "),od=a(Tp,"CODE",{});var d0=n(od);r1=i(d0,"train_step"),d0.forEach(t),a1=i(Tp,` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),Tp.forEach(t),xp.forEach(t),n1=d(E),$o=a(E,"DIV",{class:!0});var kp=n($o);_($a.$$.fragment,kp),s1=d(kp),xa=a(kp,"P",{});var Pp=n(xa);i1=i(Pp,"A modification of Keras\u2019s default "),rd=a(Pp,"CODE",{});var m0=n(rd);l1=i(m0,"train_step"),m0.forEach(t),d1=i(Pp,` that correctly handles matching outputs to labels for our models
and supports directly training on the loss output head. In addition, it ensures input keys are copied to the
labels where appropriate. It will also copy label keys into the input dict when using the dummy loss, to ensure
that they are available to the model during the forward pass.`),Pp.forEach(t),kp.forEach(t),E.forEach(t),ic=d(o),lt=a(o,"H2",{class:!0});var Mp=n(lt);xo=a(Mp,"A",{id:!0,class:!0,href:!0});var c0=n(xo);ad=a(c0,"SPAN",{});var p0=n(ad);_(Ta.$$.fragment,p0),p0.forEach(t),c0.forEach(t),m1=d(Mp),nd=a(Mp,"SPAN",{});var h0=n(nd);c1=i(h0,"TFModelUtilsMixin"),h0.forEach(t),Mp.forEach(t),lc=d(o),de=a(o,"DIV",{class:!0});var ns=n(de);_(ka.$$.fragment,ns),p1=d(ns),Pa=a(ns,"P",{});var Ep=n(Pa);h1=i(Ep,"A few utilities for "),sd=a(Ep,"CODE",{});var f0=n(sd);f1=i(f0,"tf.keras.Model"),f0.forEach(t),u1=i(Ep,", to be used as a mixin."),Ep.forEach(t),g1=d(ns),To=a(ns,"DIV",{class:!0});var jp=n(To);_(Ma.$$.fragment,jp),_1=d(jp),id=a(jp,"P",{});var u0=n(id);b1=i(u0,"Get the number of (optionally, trainable) parameters in the model."),u0.forEach(t),jp.forEach(t),ns.forEach(t),dc=d(o),dt=a(o,"H2",{class:!0});var Fp=n(dt);ko=a(Fp,"A",{id:!0,class:!0,href:!0});var g0=n(ko);ld=a(g0,"SPAN",{});var _0=n(ld);_(Ea.$$.fragment,_0),_0.forEach(t),g0.forEach(t),v1=d(Fp),dd=a(Fp,"SPAN",{});var b0=n(dd);y1=i(b0,"FlaxPreTrainedModel"),b0.forEach(t),Fp.forEach(t),mc=d(o),q=a(o,"DIV",{class:!0});var I=n(q);_(ja.$$.fragment,I),w1=d(I),md=a(I,"P",{});var v0=n(md);$1=i(v0,"Base class for all models."),v0.forEach(t),x1=d(I),Ln=a(I,"P",{});var Bw=n(Ln);Un=a(Bw,"A",{href:!0});var y0=n(Un);T1=i(y0,"FlaxPreTrainedModel"),y0.forEach(t),k1=i(Bw,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),Bw.forEach(t),P1=d(I),cd=a(I,"P",{});var w0=n(cd);M1=i(w0,"Class attributes (overridden by derived classes):"),w0.forEach(t),E1=d(I),mt=a(I,"UL",{});var ss=n(mt);De=a(ss,"LI",{});var on=n(De);pd=a(on,"STRONG",{});var $0=n(pd);j1=i($0,"config_class"),$0.forEach(t),F1=i(on," ("),On=a(on,"A",{href:!0});var x0=n(On);D1=i(x0,"PretrainedConfig"),x0.forEach(t),q1=i(on,") \u2014 A subclass of "),Nn=a(on,"A",{href:!0});var T0=n(Nn);A1=i(T0,"PretrainedConfig"),T0.forEach(t),z1=i(on,` to use as configuration class
for this model architecture.`),on.forEach(t),I1=d(ss),Po=a(ss,"LI",{});var fm=n(Po);hd=a(fm,"STRONG",{});var k0=n(hd);C1=i(k0,"base_model_prefix"),k0.forEach(t),L1=i(fm," ("),fd=a(fm,"CODE",{});var P0=n(fd);U1=i(P0,"str"),P0.forEach(t),O1=i(fm,`) \u2014 A string indicating the attribute associated to the base model in derived
classes of the same architecture adding modules on top of the base model.`),fm.forEach(t),N1=d(ss),V=a(ss,"LI",{});var ue=n(V);ud=a(ue,"STRONG",{});var M0=n(ud);B1=i(M0,"main_input_name"),M0.forEach(t),G1=i(ue," ("),gd=a(ue,"CODE",{});var E0=n(gd);S1=i(E0,"str"),E0.forEach(t),W1=i(ue,") \u2014 The name of the principal input to the model (often "),_d=a(ue,"CODE",{});var j0=n(_d);X1=i(j0,"input_ids"),j0.forEach(t),V1=i(ue,` for NLP
models, `),bd=a(ue,"CODE",{});var F0=n(bd);R1=i(F0,"pixel_values"),F0.forEach(t),H1=i(ue," for vision models and "),vd=a(ue,"CODE",{});var D0=n(vd);Y1=i(D0,"input_values"),D0.forEach(t),K1=i(ue," for speech models)."),ue.forEach(t),ss.forEach(t),J1=d(I),qe=a(I,"DIV",{class:!0});var is=n(qe);_(Fa.$$.fragment,is),Z1=d(is),Da=a(is,"P",{});var Dp=n(Da);Q1=i(Dp,`Upload the model checkpoint to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),yd=a(Dp,"CODE",{});var q0=n(yd);e2=i(q0,"repo_path_or_name"),q0.forEach(t),t2=i(Dp,"."),Dp.forEach(t),o2=d(is),_(Mo.$$.fragment,is),is.forEach(t),r2=d(I),R=a(I,"DIV",{class:!0});var Be=n(R);_(qa.$$.fragment,Be),a2=d(Be),wd=a(Be,"P",{});var A0=n(wd);n2=i(A0,"Instantiate a pretrained flax model from a pre-trained model configuration."),A0.forEach(t),s2=d(Be),Aa=a(Be,"P",{});var qp=n(Aa);i2=i(qp,"The warning "),$d=a(qp,"EM",{});var z0=n($d);l2=i(z0,"Weights from XXX not initialized from pretrained model"),z0.forEach(t),d2=i(qp,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),qp.forEach(t),m2=d(Be),za=a(Be,"P",{});var Ap=n(za);c2=i(Ap,"The warning "),xd=a(Ap,"EM",{});var I0=n(xd);p2=i(I0,"Weights from XXX not used in YYY"),I0.forEach(t),h2=i(Ap,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Ap.forEach(t),f2=d(Be),_(Eo.$$.fragment,Be),Be.forEach(t),u2=d(I),Ae=a(I,"DIV",{class:!0});var ls=n(Ae);_(Ia.$$.fragment,ls),g2=d(ls),Ca=a(ls,"P",{});var zp=n(Ca);_2=i(zp,"This is the same as "),Td=a(zp,"CODE",{});var C0=n(Td);b2=i(C0,"flax.serialization.from_bytes"),C0.forEach(t),v2=i(zp,`
(https:lax.readthedocs.io/en/latest/_modules/flax/serialization.html#from_bytes) but for a sharded checkpoint.`),zp.forEach(t),y2=d(ls),kd=a(ls,"P",{});var L0=n(kd);w2=i(L0,`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),L0.forEach(t),ls.forEach(t),$2=d(I),ze=a(I,"DIV",{class:!0});var ds=n(ze);_(La.$$.fragment,ds),x2=d(ds),Pd=a(ds,"P",{});var U0=n(Pd);T2=i(U0,`Register this class with a given auto class. This should only be used for custom models as the ones in the
library are already mapped with an auto class.`),U0.forEach(t),k2=d(ds),_(jo.$$.fragment,ds),ds.forEach(t),P2=d(I),Fo=a(I,"DIV",{class:!0});var Ip=n(Fo);_(Ua.$$.fragment,Ip),M2=d(Ip),Oa=a(Ip,"P",{});var Cp=n(Oa);E2=i(Cp,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),Md=a(Cp,"CODE",{});var O0=n(Md);j2=i(O0,"[from_pretrained()](/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel.from_pretrained)"),O0.forEach(t),F2=i(Cp," class method"),Cp.forEach(t),Ip.forEach(t),D2=d(I),ae=a(I,"DIV",{class:!0});var No=n(ae);_(Na.$$.fragment,No),q2=d(No),J=a(No,"P",{});var Ge=n(J);A2=i(Ge,"Cast the floating-point "),Ed=a(Ge,"CODE",{});var N0=n(Ed);z2=i(N0,"params"),N0.forEach(t),I2=i(Ge," to "),jd=a(Ge,"CODE",{});var B0=n(jd);C2=i(B0,"jax.numpy.bfloat16"),B0.forEach(t),L2=i(Ge,". This returns a new "),Fd=a(Ge,"CODE",{});var G0=n(Fd);U2=i(G0,"params"),G0.forEach(t),O2=i(Ge,` tree and does not cast
the `),Dd=a(Ge,"CODE",{});var S0=n(Dd);N2=i(S0,"params"),S0.forEach(t),B2=i(Ge," in place."),Ge.forEach(t),G2=d(No),qd=a(No,"P",{});var W0=n(qd);S2=i(W0,`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),W0.forEach(t),W2=d(No),_(Do.$$.fragment,No),No.forEach(t),X2=d(I),ne=a(I,"DIV",{class:!0});var Bo=n(ne);_(Ba.$$.fragment,Bo),V2=d(Bo),Z=a(Bo,"P",{});var Se=n(Z);R2=i(Se,"Cast the floating-point "),Ad=a(Se,"CODE",{});var X0=n(Ad);H2=i(X0,"parmas"),X0.forEach(t),Y2=i(Se," to "),zd=a(Se,"CODE",{});var V0=n(zd);K2=i(V0,"jax.numpy.float16"),V0.forEach(t),J2=i(Se,". This returns a new "),Id=a(Se,"CODE",{});var R0=n(Id);Z2=i(R0,"params"),R0.forEach(t),Q2=i(Se,` tree and does not cast the
`),Cd=a(Se,"CODE",{});var H0=n(Cd);ew=i(H0,"params"),H0.forEach(t),tw=i(Se," in place."),Se.forEach(t),ow=d(Bo),Ld=a(Bo,"P",{});var Y0=n(Ld);rw=i(Y0,`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),Y0.forEach(t),aw=d(Bo),_(qo.$$.fragment,Bo),Bo.forEach(t),nw=d(I),Ie=a(I,"DIV",{class:!0});var ms=n(Ie);_(Ga.$$.fragment,ms),sw=d(ms),Q=a(ms,"P",{});var We=n(Q);iw=i(We,"Cast the floating-point "),Ud=a(We,"CODE",{});var K0=n(Ud);lw=i(K0,"parmas"),K0.forEach(t),dw=i(We," to "),Od=a(We,"CODE",{});var J0=n(Od);mw=i(J0,"jax.numpy.float32"),J0.forEach(t),cw=i(We,`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),Nd=a(We,"CODE",{});var Z0=n(Nd);pw=i(Z0,"params"),Z0.forEach(t),hw=i(We," tree and does not cast the "),Bd=a(We,"CODE",{});var Q0=n(Bd);fw=i(Q0,"params"),Q0.forEach(t),uw=i(We," in place."),We.forEach(t),gw=d(ms),_(Ao.$$.fragment,ms),ms.forEach(t),I.forEach(t),cc=d(o),ct=a(o,"H2",{class:!0});var Lp=n(ct);zo=a(Lp,"A",{id:!0,class:!0,href:!0});var ek=n(zo);Gd=a(ek,"SPAN",{});var tk=n(Gd);_(Sa.$$.fragment,tk),tk.forEach(t),ek.forEach(t),_w=d(Lp),Sd=a(Lp,"SPAN",{});var ok=n(Sd);bw=i(ok,"Pushing to the Hub"),ok.forEach(t),Lp.forEach(t),pc=d(o),me=a(o,"DIV",{class:!0});var cs=n(me);_(Wa.$$.fragment,cs),vw=d(cs),Wd=a(cs,"P",{});var rk=n(Wd);yw=i(rk,"A Mixin containing the functionality to push a model or tokenizer to the hub."),rk.forEach(t),ww=d(cs),Ce=a(cs,"DIV",{class:!0});var ps=n(Ce);_(Xa.$$.fragment,ps),$w=d(ps),Va=a(ps,"P",{});var Up=n(Va);xw=i(Up,`Upload the {object_files} to the \u{1F917} Model Hub while synchronizing a local clone of the repo in
`),Xd=a(Up,"CODE",{});var ak=n(Xd);Tw=i(ak,"repo_path_or_name"),ak.forEach(t),kw=i(Up,"."),Up.forEach(t),Pw=d(ps),_(Io.$$.fragment,ps),ps.forEach(t),cs.forEach(t),hc=d(o),pt=a(o,"H2",{class:!0});var Op=n(pt);Co=a(Op,"A",{id:!0,class:!0,href:!0});var nk=n(Co);Vd=a(nk,"SPAN",{});var sk=n(Vd);_(Ra.$$.fragment,sk),sk.forEach(t),nk.forEach(t),Mw=d(Op),Rd=a(Op,"SPAN",{});var ik=n(Rd);Ew=i(ik,"Sharded checkpoints"),ik.forEach(t),Op.forEach(t),fc=d(o),ce=a(o,"DIV",{class:!0});var hs=n(ce);_(Ha.$$.fragment,hs),jw=d(hs),Ya=a(hs,"P",{});var Np=n(Ya);Fw=i(Np,`This is the same as
`),Ka=a(Np,"A",{href:!0,rel:!0});var lk=n(Ka);Hd=a(lk,"CODE",{});var dk=n(Hd);Dw=i(dk,"torch.nn.Module.load_state_dict"),dk.forEach(t),lk.forEach(t),qw=i(Np,`
but for a sharded checkpoint.`),Np.forEach(t),Aw=d(hs),Yd=a(hs,"P",{});var mk=n(Yd);zw=i(mk,`This load is performed efficiently: each checkpoint shard is loaded one by one in RAM and deleted after being
loaded in the model.`),mk.forEach(t),hs.forEach(t),this.h()},h(){c(f,"name","hf:doc:metadata"),c(f,"content",JSON.stringify(Ak)),c(u,"id","models"),c(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u,"href","#models"),c($,"class","relative group"),c(rn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(an,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(nn,"href","/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel"),c(sn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(ln,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(dn,"href","/docs/transformers/main/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin"),c(mn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin"),c(cn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_tf_utils.TFGenerationMixin"),c(pn,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_flax_utils.FlaxGenerationMixin"),c(ft,"id","transformers.PreTrainedModel"),c(ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ft,"href","#transformers.PreTrainedModel"),c(He,"class","relative group"),c(fn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(un,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(gn,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(_n,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"href","https://discuss.pytorch.org/t/gpu-memory-that-model-uses/56822/2"),c(Qo,"rel","nofollow"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yn,"id","from_pretrained-torch-dtype"),c(At,"id","large-model-loading"),c(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(At,"href","#large-model-loading"),c(Je,"class","relative group"),c(wn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained"),c(gr,"href","https://huggingface.co/docs/accelerate/big_modeling"),c(gr,"rel","nofollow"),c(Ut,"id","model-instantiation-dtype"),c(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ut,"href","#model-instantiation-dtype"),c(Ze,"class","relative group"),c(Nt,"id","bitsandbytes-integration-for-int8-mixedprecision-matrix-decomposition"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#bitsandbytes-integration-for-int8-mixedprecision-matrix-decomposition"),c(Qe,"class","relative group"),ck(Pn.src,Gw="https://s3.amazonaws.com/moonup/production/uploads/1659861207959-62441d1d9fdefb55a0b7d12c.png")||c(Pn,"src",Gw),c(Pn,"alt","HFxbitsandbytes.png"),ck(jn.src,Sw="https://colab.research.google.com/assets/colab-badge.svg")||c(jn,"src",Sw),c(jn,"alt","Open In Google Colab"),c(Er,"href","https://colab.research.google.com/drive/1qOjXfQIAULfKvZqwCen8-MoWKGdSatZ4?usp=sharing"),c(Er,"rel","nofollow"),c(Bt,"id","requirements"),c(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bt,"href","#requirements"),c(et,"class","relative group"),c(Wt,"id","running-mixedint8-models"),c(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wt,"href","#running-mixedint8-models"),c(tt,"class","relative group"),c(Xt,"id","transformers.modeling_utils.ModuleUtilsMixin"),c(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xt,"href","#transformers.modeling_utils.ModuleUtilsMixin"),c(ot,"class","relative group"),c(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Or,"href","https://arxiv.org/pdf/2001.08361.pdf"),c(Or,"rel","nofollow"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dn,"href","/docs/transformers/main/en/main_classes/model#transformers.modeling_utils.ModuleUtilsMixin.add_memory_hooks"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qt,"id","transformers.TFPreTrainedModel"),c(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qt,"href","#transformers.TFPreTrainedModel"),c(st,"class","relative group"),c(An,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(zn,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(In,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(la,"href","https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),c(la,"rel","nofollow"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cn,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"id","transformers.modeling_tf_utils.TFModelUtilsMixin"),c(xo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xo,"href","#transformers.modeling_tf_utils.TFModelUtilsMixin"),c(lt,"class","relative group"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"id","transformers.FlaxPreTrainedModel"),c(ko,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ko,"href","#transformers.FlaxPreTrainedModel"),c(dt,"class","relative group"),c(Un,"href","/docs/transformers/main/en/main_classes/model#transformers.FlaxPreTrainedModel"),c(On,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(Nn,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),c(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"id","transformers.utils.PushToHubMixin"),c(zo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zo,"href","#transformers.utils.PushToHubMixin"),c(ct,"class","relative group"),c(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"id","transformers.modeling_utils.load_sharded_checkpoint"),c(Co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Co,"href","#transformers.modeling_utils.load_sharded_checkpoint"),c(pt,"class","relative group"),c(Ka,"href","https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=load_state_dict#torch.nn.Module.load_state_dict"),c(Ka,"rel","nofollow"),c(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,p){e(document.head,f),h(o,T,p),h(o,$,p),e($,u),e(u,k),b(m,k,null),e($,x),e($,le),e(le,Bp),h(o,gm,p),h(o,te,p),e(te,Gp),e(te,rn),e(rn,Sp),e(te,Wp),e(te,an),e(an,Xp),e(te,Vp),e(te,nn),e(nn,Rp),e(te,Hp),h(o,_m,p),h(o,Re,p),e(Re,sn),e(sn,Yp),e(Re,Kp),e(Re,ln),e(ln,Jp),e(Re,Zp),h(o,bm,p),h(o,ht,p),e(ht,fs),e(fs,Qp),e(ht,eh),e(ht,us),e(us,th),h(o,vm,p),h(o,O,p),e(O,oh),e(O,dn),e(dn,rh),e(O,ah),e(O,gs),e(gs,nh),e(O,sh),e(O,mn),e(mn,ih),e(O,lh),e(O,cn),e(cn,dh),e(O,mh),e(O,pn),e(pn,ch),e(O,ph),h(o,ym,p),h(o,He,p),e(He,ft),e(ft,_s),b(Go,_s,null),e(He,hh),e(He,bs),e(bs,fh),h(o,wm,p),h(o,j,p),b(So,j,null),e(j,uh),e(j,vs),e(vs,gh),e(j,_h),e(j,hn),e(hn,fn),e(fn,bh),e(hn,vh),e(j,yh),e(j,Wo),e(Wo,ys),e(ys,wh),e(Wo,$h),e(Wo,ws),e(ws,xh),e(j,Th),e(j,$s),e($s,kh),e(j,Ph),e(j,H),e(H,xs),e(xs,ge),e(ge,Ts),e(Ts,Mh),e(ge,Eh),e(ge,un),e(un,jh),e(ge,Fh),e(ge,gn),e(gn,Dh),e(ge,qh),e(H,Ah),e(H,Xo),e(Xo,_e),e(_e,ks),e(ks,zh),e(_e,Ih),e(_e,Ps),e(Ps,Ch),e(_e,Lh),e(_e,Ms),e(Ms,Uh),e(_e,Oh),e(Xo,Nh),e(Xo,Ye),e(Ye,ut),e(ut,Es),e(Es,Bh),e(ut,Gh),e(ut,_n),e(_n,Sh),e(ut,Wh),e(Ye,Xh),e(Ye,gt),e(gt,js),e(js,Vh),e(gt,Rh),e(gt,Fs),e(Fs,Hh),e(gt,Yh),e(Ye,Kh),e(Ye,_t),e(_t,Ds),e(Ds,Jh),e(_t,Zh),e(_t,qs),e(qs,Qh),e(_t,ef),e(H,tf),e(H,As),e(As,bt),e(bt,zs),e(zs,of),e(bt,rf),e(bt,Is),e(Is,af),e(bt,nf),e(H,sf),e(H,Cs),e(Cs,vt),e(vt,Ls),e(Ls,lf),e(vt,df),e(vt,Us),e(Us,mf),e(vt,cf),e(H,pf),e(H,Os),e(Os,S),e(S,Ns),e(Ns,hf),e(S,ff),e(S,Bs),e(Bs,uf),e(S,gf),e(S,Gs),e(Gs,_f),e(S,bf),e(S,Ss),e(Ss,vf),e(S,yf),e(S,Ws),e(Ws,wf),e(S,$f),e(j,xf),e(j,be),b(Vo,be,null),e(be,Tf),e(be,Ro),e(Ro,kf),e(Ro,Xs),e(Xs,Pf),e(Ro,Mf),e(be,Ef),b(yt,be,null),e(j,jf),e(j,A),b(Ho,A,null),e(A,Ff),e(A,Vs),e(Vs,Df),e(A,qf),e(A,Ke),e(Ke,Af),e(Ke,Rs),e(Rs,zf),e(Ke,If),e(Ke,Hs),e(Hs,Cf),e(Ke,Lf),e(A,Uf),e(A,Yo),e(Yo,Of),e(Yo,Ys),e(Ys,Nf),e(Yo,Bf),e(A,Gf),e(A,Ko),e(Ko,Sf),e(Ko,Ks),e(Ks,Wf),e(Ko,Xf),e(A,Vf),b(wt,A,null),e(A,Rf),b($t,A,null),e(A,Hf),b(xt,A,null),e(A,Yf),e(A,Js),e(Js,bn),e(bn,Zs),e(Zs,Kf),e(bn,Jf),e(A,Zf),e(A,Qs),e(Qs,Qf),e(A,eu),e(A,ei),e(ei,tu),e(A,ou),e(A,Y),e(Y,ti),e(ti,ru),e(Y,au),e(Y,oi),e(oi,nu),e(Y,su),e(Y,ri),e(ri,iu),e(Y,lu),e(Y,ai),e(ai,du),e(Y,mu),e(Y,ni),e(ni,cu),e(A,pu),e(A,si),e(si,hu),e(j,fu),e(j,Tt),b(Jo,Tt,null),e(Tt,uu),e(Tt,ii),e(ii,gu),e(j,_u),e(j,kt),b(Zo,kt,null),e(kt,bu),e(kt,vn),e(vn,vu),e(vn,Qo),e(Qo,yu),e(j,wu),e(j,Pt),b(er,Pt,null),e(Pt,$u),e(Pt,li),e(li,xu),e(j,Tu),e(j,ve),b(tr,ve,null),e(ve,ku),e(ve,di),e(di,Pu),e(ve,Mu),e(ve,mi),e(mi,Eu),e(j,ju),e(j,ye),b(or,ye,null),e(ye,Fu),e(ye,ci),e(ci,Du),e(ye,qu),e(ye,pi),e(pi,Au),e(j,zu),e(j,Mt),b(rr,Mt,null),e(Mt,Iu),e(Mt,hi),e(hi,Cu),e(j,Lu),e(j,Et),b(ar,Et,null),e(Et,Uu),e(Et,fi),e(fi,Ou),e(j,Nu),e(j,jt),b(nr,jt,null),e(jt,Bu),e(jt,ui),e(ui,Gu),e(j,Su),e(j,we),b(sr,we,null),e(we,Wu),e(we,gi),e(gi,Xu),e(we,Vu),b(Ft,we,null),e(j,Ru),e(j,$e),b(ir,$e,null),e($e,Hu),e($e,lr),e(lr,Yu),e(lr,_i),e(_i,Ku),e(lr,Ju),e($e,Zu),e($e,dr),e(dr,Qu),e(dr,bi),e(bi,eg),e(dr,tg),e(j,og),e(j,Dt),b(mr,Dt,null),e(Dt,rg),e(Dt,cr),e(cr,ag),e(cr,vi),e(vi,ng),e(cr,sg),e(j,ig),e(j,qt),b(pr,qt,null),e(qt,lg),e(qt,yi),e(yi,dg),e(j,mg),e(j,xe),b(hr,xe,null),e(xe,cg),e(xe,wi),e(wi,pg),e(xe,hg),e(xe,fr),e(fr,fg),e(fr,$i),e($i,ug),e(fr,gg),h(o,$m,p),h(o,yn,p),h(o,xm,p),h(o,Je,p),e(Je,At),e(At,xi),b(ur,xi,null),e(Je,_g),e(Je,Ti),e(Ti,bg),h(o,Tm,p),h(o,Te,p),e(Te,vg),e(Te,wn),e(wn,yg),e(Te,wg),e(Te,gr),e(gr,$g),e(Te,xg),h(o,km,p),h(o,zt,p),e(zt,Tg),e(zt,ki),e(ki,kg),e(zt,Pg),h(o,Pm,p),b(_r,o,p),h(o,Mm,p),h(o,It,p),e(It,Mg),e(It,Pi),e(Pi,Eg),e(It,jg),h(o,Em,p),h(o,oe,p),e(oe,Fg),e(oe,Mi),e(Mi,Dg),e(oe,qg),e(oe,Ei),e(Ei,Ag),e(oe,zg),e(oe,ji),e(ji,Ig),e(oe,Cg),h(o,jm,p),b(br,o,p),h(o,Fm,p),h(o,Ct,p),e(Ct,Lg),e(Ct,Fi),e(Fi,Ug),e(Ct,Og),h(o,Dm,p),b(vr,o,p),h(o,qm,p),b(yr,o,p),h(o,Am,p),h(o,$n,p),e($n,Ng),h(o,zm,p),b(wr,o,p),h(o,Im,p),h(o,Lt,p),e(Lt,Bg),e(Lt,Di),e(Di,Gg),e(Lt,Sg),h(o,Cm,p),h(o,Ze,p),e(Ze,Ut),e(Ut,qi),b($r,qi,null),e(Ze,Wg),e(Ze,Ai),e(Ai,Xg),h(o,Lm,p),h(o,re,p),e(re,Vg),e(re,zi),e(zi,Rg),e(re,Hg),e(re,Ii),e(Ii,Yg),e(re,Kg),e(re,Ci),e(Ci,Jg),e(re,Zg),h(o,Um,p),b(xr,o,p),h(o,Om,p),h(o,ke,p),e(ke,Qg),e(ke,Li),e(Li,e_),e(ke,t_),e(ke,Ui),e(Ui,o_),e(ke,r_),h(o,Nm,p),b(Tr,o,p),h(o,Bm,p),h(o,Ot,p),e(Ot,a_),e(Ot,Oi),e(Oi,n_),e(Ot,s_),h(o,Gm,p),b(kr,o,p),h(o,Sm,p),h(o,xn,p),e(xn,i_),h(o,Wm,p),h(o,Qe,p),e(Qe,Nt),e(Nt,Ni),b(Pr,Ni,null),e(Qe,l_),e(Qe,Tn),e(Tn,Bi),e(Bi,d_),e(Tn,m_),h(o,Xm,p),h(o,W,p),e(W,c_),e(W,Gi),e(Gi,p_),e(W,h_),e(W,Si),e(Si,f_),e(W,u_),e(W,Wi),e(Wi,g_),e(W,__),e(W,Xi),e(Xi,b_),e(W,v_),h(o,Vm,p),h(o,kn,p),e(kn,Pn),h(o,Rm,p),h(o,Mn,p),e(Mn,y_),h(o,Hm,p),h(o,En,p),e(En,w_),h(o,Ym,p),h(o,Mr,p),e(Mr,$_),e(Mr,Er),e(Er,jn),h(o,Km,p),h(o,et,p),e(et,Bt),e(Bt,Vi),b(jr,Vi,null),e(et,x_),e(et,Ri),e(Ri,T_),h(o,Jm,p),h(o,Pe,p),e(Pe,Hi),e(Hi,k_),e(Pe,P_),e(Pe,Gt),e(Gt,M_),e(Gt,Yi),e(Yi,E_),e(Gt,j_),e(Gt,Ki),e(Ki,F_),e(Pe,D_),e(Pe,St),e(St,q_),e(St,Ji),e(Ji,A_),e(St,z_),e(St,Zi),e(Zi,I_),h(o,Zm,p),h(o,tt,p),e(tt,Wt),e(Wt,Qi),b(Fr,Qi,null),e(tt,C_),e(tt,el),e(el,L_),h(o,Qm,p),h(o,Fn,p),e(Fn,U_),h(o,ec,p),b(Dr,o,p),h(o,tc,p),h(o,N,p),e(N,O_),e(N,tl),e(tl,N_),e(N,B_),e(N,ol),e(ol,G_),e(N,S_),e(N,rl),e(rl,W_),e(N,X_),e(N,al),e(al,V_),e(N,R_),e(N,nl),e(nl,H_),e(N,Y_),h(o,oc,p),b(qr,o,p),h(o,rc,p),h(o,ot,p),e(ot,Xt),e(Xt,sl),b(Ar,sl,null),e(ot,K_),e(ot,il),e(il,J_),h(o,ac,p),h(o,C,p),b(zr,C,null),e(C,Z_),e(C,Ir),e(Ir,Q_),e(Ir,ll),e(ll,eb),e(Ir,tb),e(C,ob),e(C,Me),b(Cr,Me,null),e(Me,rb),e(Me,dl),e(dl,ab),e(Me,nb),e(Me,rt),e(rt,sb),e(rt,ml),e(ml,ib),e(rt,lb),e(rt,cl),e(cl,db),e(rt,mb),e(C,cb),e(C,Vt),b(Lr,Vt,null),e(Vt,pb),e(Vt,pl),e(pl,hb),e(C,fb),e(C,Rt),b(Ur,Rt,null),e(Rt,ub),e(Rt,at),e(at,gb),e(at,hl),e(hl,_b),e(at,bb),e(at,Or),e(Or,vb),e(at,yb),e(C,wb),e(C,Ht),b(Nr,Ht,null),e(Ht,$b),e(Ht,fl),e(fl,xb),e(C,Tb),e(C,Yt),b(Br,Yt,null),e(Yt,kb),e(Yt,ul),e(ul,Pb),e(C,Mb),e(C,Kt),b(Gr,Kt,null),e(Kt,Eb),e(Kt,gl),e(gl,jb),e(C,Fb),e(C,Jt),b(Sr,Jt,null),e(Jt,Db),e(Jt,_l),e(_l,qb),e(C,Ab),e(C,Zt),b(Wr,Zt,null),e(Zt,zb),e(Zt,nt),e(nt,Ib),e(nt,bl),e(bl,Cb),e(nt,Lb),e(nt,Dn),e(Dn,Ub),e(nt,Ob),h(o,nc,p),h(o,st,p),e(st,Qt),e(Qt,vl),b(Xr,vl,null),e(st,Nb),e(st,yl),e(yl,Bb),h(o,sc,p),h(o,M,p),b(Vr,M,null),e(M,Gb),e(M,wl),e(wl,Sb),e(M,Wb),e(M,qn),e(qn,An),e(An,Xb),e(qn,Vb),e(M,Rb),e(M,Rr),e(Rr,$l),e($l,Hb),e(Rr,Yb),e(Rr,xl),e(xl,Kb),e(M,Jb),e(M,Tl),e(Tl,Zb),e(M,Qb),e(M,it),e(it,Ee),e(Ee,kl),e(kl,ev),e(Ee,tv),e(Ee,zn),e(zn,ov),e(Ee,rv),e(Ee,In),e(In,av),e(Ee,nv),e(it,sv),e(it,eo),e(eo,Pl),e(Pl,iv),e(eo,lv),e(eo,Ml),e(Ml,dv),e(eo,mv),e(it,cv),e(it,X),e(X,El),e(El,pv),e(X,hv),e(X,jl),e(jl,fv),e(X,uv),e(X,Fl),e(Fl,gv),e(X,_v),e(X,Dl),e(Dl,bv),e(X,vv),e(X,ql),e(ql,yv),e(X,wv),e(M,$v),e(M,je),b(Hr,je,null),e(je,xv),e(je,Yr),e(Yr,Tv),e(Yr,Al),e(Al,kv),e(Yr,Pv),e(je,Mv),b(to,je,null),e(M,Ev),e(M,oo),b(Kr,oo,null),e(oo,jv),e(oo,zl),e(zl,Fv),e(M,Dv),e(M,B),b(Jr,B,null),e(B,qv),e(B,Il),e(Il,Av),e(B,zv),e(B,Zr),e(Zr,Iv),e(Zr,Cl),e(Cl,Cv),e(Zr,Lv),e(B,Uv),e(B,Qr),e(Qr,Ov),e(Qr,Ll),e(Ll,Nv),e(Qr,Bv),e(B,Gv),b(ro,B,null),e(B,Sv),b(ao,B,null),e(M,Wv),e(M,no),b(ea,no,null),e(no,Xv),e(no,Ul),e(Ul,Vv),e(M,Rv),e(M,so),b(ta,so,null),e(so,Hv),e(so,Ol),e(Ol,Yv),e(M,Kv),e(M,io),b(oa,io,null),e(io,Jv),e(io,Nl),e(Nl,Zv),e(M,Qv),e(M,lo),b(ra,lo,null),e(lo,ey),e(lo,Bl),e(Bl,ty),e(M,oy),e(M,mo),b(aa,mo,null),e(mo,ry),e(mo,Gl),e(Gl,ay),e(M,ny),e(M,co),b(na,co,null),e(co,sy),e(co,Sl),e(Sl,iy),e(M,ly),e(M,po),b(sa,po,null),e(po,dy),e(po,Wl),e(Wl,my),e(M,cy),e(M,ho),b(ia,ho,null),e(ho,py),e(ho,K),e(K,hy),e(K,la),e(la,fy),e(K,uy),e(K,Xl),e(Xl,gy),e(K,_y),e(K,Vl),e(Vl,by),e(K,vy),e(K,Rl),e(Rl,yy),e(K,wy),e(M,$y),e(M,fo),b(da,fo,null),e(fo,xy),e(fo,Hl),e(Hl,Ty),e(M,ky),e(M,Fe),b(ma,Fe,null),e(Fe,Py),e(Fe,ca),e(ca,My),e(ca,Yl),e(Yl,Ey),e(ca,jy),e(Fe,Fy),e(Fe,pa),e(pa,Dy),e(pa,Kl),e(Kl,qy),e(pa,Ay),e(M,zy),e(M,uo),b(ha,uo,null),e(uo,Iy),e(uo,fa),e(fa,Cy),e(fa,Cn),e(Cn,Ly),e(fa,Uy),e(M,Oy),e(M,go),b(ua,go,null),e(go,Ny),e(go,Jl),e(Jl,By),e(M,Gy),e(M,_o),b(ga,_o,null),e(_o,Sy),e(_o,Zl),e(Zl,Wy),e(M,Xy),e(M,bo),b(_a,bo,null),e(bo,Vy),e(bo,Ql),e(Ql,Ry),e(M,Hy),e(M,vo),b(ba,vo,null),e(vo,Yy),e(vo,ed),e(ed,Ky),e(M,Jy),e(M,yo),b(va,yo,null),e(yo,Zy),e(yo,td),e(td,Qy),e(M,e1),e(M,wo),b(ya,wo,null),e(wo,t1),e(wo,wa),e(wa,o1),e(wa,od),e(od,r1),e(wa,a1),e(M,n1),e(M,$o),b($a,$o,null),e($o,s1),e($o,xa),e(xa,i1),e(xa,rd),e(rd,l1),e(xa,d1),h(o,ic,p),h(o,lt,p),e(lt,xo),e(xo,ad),b(Ta,ad,null),e(lt,m1),e(lt,nd),e(nd,c1),h(o,lc,p),h(o,de,p),b(ka,de,null),e(de,p1),e(de,Pa),e(Pa,h1),e(Pa,sd),e(sd,f1),e(Pa,u1),e(de,g1),e(de,To),b(Ma,To,null),e(To,_1),e(To,id),e(id,b1),h(o,dc,p),h(o,dt,p),e(dt,ko),e(ko,ld),b(Ea,ld,null),e(dt,v1),e(dt,dd),e(dd,y1),h(o,mc,p),h(o,q,p),b(ja,q,null),e(q,w1),e(q,md),e(md,$1),e(q,x1),e(q,Ln),e(Ln,Un),e(Un,T1),e(Ln,k1),e(q,P1),e(q,cd),e(cd,M1),e(q,E1),e(q,mt),e(mt,De),e(De,pd),e(pd,j1),e(De,F1),e(De,On),e(On,D1),e(De,q1),e(De,Nn),e(Nn,A1),e(De,z1),e(mt,I1),e(mt,Po),e(Po,hd),e(hd,C1),e(Po,L1),e(Po,fd),e(fd,U1),e(Po,O1),e(mt,N1),e(mt,V),e(V,ud),e(ud,B1),e(V,G1),e(V,gd),e(gd,S1),e(V,W1),e(V,_d),e(_d,X1),e(V,V1),e(V,bd),e(bd,R1),e(V,H1),e(V,vd),e(vd,Y1),e(V,K1),e(q,J1),e(q,qe),b(Fa,qe,null),e(qe,Z1),e(qe,Da),e(Da,Q1),e(Da,yd),e(yd,e2),e(Da,t2),e(qe,o2),b(Mo,qe,null),e(q,r2),e(q,R),b(qa,R,null),e(R,a2),e(R,wd),e(wd,n2),e(R,s2),e(R,Aa),e(Aa,i2),e(Aa,$d),e($d,l2),e(Aa,d2),e(R,m2),e(R,za),e(za,c2),e(za,xd),e(xd,p2),e(za,h2),e(R,f2),b(Eo,R,null),e(q,u2),e(q,Ae),b(Ia,Ae,null),e(Ae,g2),e(Ae,Ca),e(Ca,_2),e(Ca,Td),e(Td,b2),e(Ca,v2),e(Ae,y2),e(Ae,kd),e(kd,w2),e(q,$2),e(q,ze),b(La,ze,null),e(ze,x2),e(ze,Pd),e(Pd,T2),e(ze,k2),b(jo,ze,null),e(q,P2),e(q,Fo),b(Ua,Fo,null),e(Fo,M2),e(Fo,Oa),e(Oa,E2),e(Oa,Md),e(Md,j2),e(Oa,F2),e(q,D2),e(q,ae),b(Na,ae,null),e(ae,q2),e(ae,J),e(J,A2),e(J,Ed),e(Ed,z2),e(J,I2),e(J,jd),e(jd,C2),e(J,L2),e(J,Fd),e(Fd,U2),e(J,O2),e(J,Dd),e(Dd,N2),e(J,B2),e(ae,G2),e(ae,qd),e(qd,S2),e(ae,W2),b(Do,ae,null),e(q,X2),e(q,ne),b(Ba,ne,null),e(ne,V2),e(ne,Z),e(Z,R2),e(Z,Ad),e(Ad,H2),e(Z,Y2),e(Z,zd),e(zd,K2),e(Z,J2),e(Z,Id),e(Id,Z2),e(Z,Q2),e(Z,Cd),e(Cd,ew),e(Z,tw),e(ne,ow),e(ne,Ld),e(Ld,rw),e(ne,aw),b(qo,ne,null),e(q,nw),e(q,Ie),b(Ga,Ie,null),e(Ie,sw),e(Ie,Q),e(Q,iw),e(Q,Ud),e(Ud,lw),e(Q,dw),e(Q,Od),e(Od,mw),e(Q,cw),e(Q,Nd),e(Nd,pw),e(Q,hw),e(Q,Bd),e(Bd,fw),e(Q,uw),e(Ie,gw),b(Ao,Ie,null),h(o,cc,p),h(o,ct,p),e(ct,zo),e(zo,Gd),b(Sa,Gd,null),e(ct,_w),e(ct,Sd),e(Sd,bw),h(o,pc,p),h(o,me,p),b(Wa,me,null),e(me,vw),e(me,Wd),e(Wd,yw),e(me,ww),e(me,Ce),b(Xa,Ce,null),e(Ce,$w),e(Ce,Va),e(Va,xw),e(Va,Xd),e(Xd,Tw),e(Va,kw),e(Ce,Pw),b(Io,Ce,null),h(o,hc,p),h(o,pt,p),e(pt,Co),e(Co,Vd),b(Ra,Vd,null),e(pt,Mw),e(pt,Rd),e(Rd,Ew),h(o,fc,p),h(o,ce,p),b(Ha,ce,null),e(ce,jw),e(ce,Ya),e(Ya,Fw),e(Ya,Ka),e(Ka,Hd),e(Hd,Dw),e(Ya,qw),e(ce,Aw),e(ce,Yd),e(Yd,zw),uc=!0},p(o,[p]){const Ja={};p&2&&(Ja.$$scope={dirty:p,ctx:o}),yt.$set(Ja);const Kd={};p&2&&(Kd.$$scope={dirty:p,ctx:o}),wt.$set(Kd);const Jd={};p&2&&(Jd.$$scope={dirty:p,ctx:o}),$t.$set(Jd);const Zd={};p&2&&(Zd.$$scope={dirty:p,ctx:o}),xt.$set(Zd);const pe={};p&2&&(pe.$$scope={dirty:p,ctx:o}),Ft.$set(pe);const Qd={};p&2&&(Qd.$$scope={dirty:p,ctx:o}),to.$set(Qd);const em={};p&2&&(em.$$scope={dirty:p,ctx:o}),ro.$set(em);const tm={};p&2&&(tm.$$scope={dirty:p,ctx:o}),ao.$set(tm);const Lo={};p&2&&(Lo.$$scope={dirty:p,ctx:o}),Mo.$set(Lo);const om={};p&2&&(om.$$scope={dirty:p,ctx:o}),Eo.$set(om);const rm={};p&2&&(rm.$$scope={dirty:p,ctx:o}),jo.$set(rm);const Za={};p&2&&(Za.$$scope={dirty:p,ctx:o}),Do.$set(Za);const am={};p&2&&(am.$$scope={dirty:p,ctx:o}),qo.$set(am);const nm={};p&2&&(nm.$$scope={dirty:p,ctx:o}),Ao.$set(nm);const G={};p&2&&(G.$$scope={dirty:p,ctx:o}),Io.$set(G)},i(o){uc||(v(m.$$.fragment,o),v(Go.$$.fragment,o),v(So.$$.fragment,o),v(Vo.$$.fragment,o),v(yt.$$.fragment,o),v(Ho.$$.fragment,o),v(wt.$$.fragment,o),v($t.$$.fragment,o),v(xt.$$.fragment,o),v(Jo.$$.fragment,o),v(Zo.$$.fragment,o),v(er.$$.fragment,o),v(tr.$$.fragment,o),v(or.$$.fragment,o),v(rr.$$.fragment,o),v(ar.$$.fragment,o),v(nr.$$.fragment,o),v(sr.$$.fragment,o),v(Ft.$$.fragment,o),v(ir.$$.fragment,o),v(mr.$$.fragment,o),v(pr.$$.fragment,o),v(hr.$$.fragment,o),v(ur.$$.fragment,o),v(_r.$$.fragment,o),v(br.$$.fragment,o),v(vr.$$.fragment,o),v(yr.$$.fragment,o),v(wr.$$.fragment,o),v($r.$$.fragment,o),v(xr.$$.fragment,o),v(Tr.$$.fragment,o),v(kr.$$.fragment,o),v(Pr.$$.fragment,o),v(jr.$$.fragment,o),v(Fr.$$.fragment,o),v(Dr.$$.fragment,o),v(qr.$$.fragment,o),v(Ar.$$.fragment,o),v(zr.$$.fragment,o),v(Cr.$$.fragment,o),v(Lr.$$.fragment,o),v(Ur.$$.fragment,o),v(Nr.$$.fragment,o),v(Br.$$.fragment,o),v(Gr.$$.fragment,o),v(Sr.$$.fragment,o),v(Wr.$$.fragment,o),v(Xr.$$.fragment,o),v(Vr.$$.fragment,o),v(Hr.$$.fragment,o),v(to.$$.fragment,o),v(Kr.$$.fragment,o),v(Jr.$$.fragment,o),v(ro.$$.fragment,o),v(ao.$$.fragment,o),v(ea.$$.fragment,o),v(ta.$$.fragment,o),v(oa.$$.fragment,o),v(ra.$$.fragment,o),v(aa.$$.fragment,o),v(na.$$.fragment,o),v(sa.$$.fragment,o),v(ia.$$.fragment,o),v(da.$$.fragment,o),v(ma.$$.fragment,o),v(ha.$$.fragment,o),v(ua.$$.fragment,o),v(ga.$$.fragment,o),v(_a.$$.fragment,o),v(ba.$$.fragment,o),v(va.$$.fragment,o),v(ya.$$.fragment,o),v($a.$$.fragment,o),v(Ta.$$.fragment,o),v(ka.$$.fragment,o),v(Ma.$$.fragment,o),v(Ea.$$.fragment,o),v(ja.$$.fragment,o),v(Fa.$$.fragment,o),v(Mo.$$.fragment,o),v(qa.$$.fragment,o),v(Eo.$$.fragment,o),v(Ia.$$.fragment,o),v(La.$$.fragment,o),v(jo.$$.fragment,o),v(Ua.$$.fragment,o),v(Na.$$.fragment,o),v(Do.$$.fragment,o),v(Ba.$$.fragment,o),v(qo.$$.fragment,o),v(Ga.$$.fragment,o),v(Ao.$$.fragment,o),v(Sa.$$.fragment,o),v(Wa.$$.fragment,o),v(Xa.$$.fragment,o),v(Io.$$.fragment,o),v(Ra.$$.fragment,o),v(Ha.$$.fragment,o),uc=!0)},o(o){y(m.$$.fragment,o),y(Go.$$.fragment,o),y(So.$$.fragment,o),y(Vo.$$.fragment,o),y(yt.$$.fragment,o),y(Ho.$$.fragment,o),y(wt.$$.fragment,o),y($t.$$.fragment,o),y(xt.$$.fragment,o),y(Jo.$$.fragment,o),y(Zo.$$.fragment,o),y(er.$$.fragment,o),y(tr.$$.fragment,o),y(or.$$.fragment,o),y(rr.$$.fragment,o),y(ar.$$.fragment,o),y(nr.$$.fragment,o),y(sr.$$.fragment,o),y(Ft.$$.fragment,o),y(ir.$$.fragment,o),y(mr.$$.fragment,o),y(pr.$$.fragment,o),y(hr.$$.fragment,o),y(ur.$$.fragment,o),y(_r.$$.fragment,o),y(br.$$.fragment,o),y(vr.$$.fragment,o),y(yr.$$.fragment,o),y(wr.$$.fragment,o),y($r.$$.fragment,o),y(xr.$$.fragment,o),y(Tr.$$.fragment,o),y(kr.$$.fragment,o),y(Pr.$$.fragment,o),y(jr.$$.fragment,o),y(Fr.$$.fragment,o),y(Dr.$$.fragment,o),y(qr.$$.fragment,o),y(Ar.$$.fragment,o),y(zr.$$.fragment,o),y(Cr.$$.fragment,o),y(Lr.$$.fragment,o),y(Ur.$$.fragment,o),y(Nr.$$.fragment,o),y(Br.$$.fragment,o),y(Gr.$$.fragment,o),y(Sr.$$.fragment,o),y(Wr.$$.fragment,o),y(Xr.$$.fragment,o),y(Vr.$$.fragment,o),y(Hr.$$.fragment,o),y(to.$$.fragment,o),y(Kr.$$.fragment,o),y(Jr.$$.fragment,o),y(ro.$$.fragment,o),y(ao.$$.fragment,o),y(ea.$$.fragment,o),y(ta.$$.fragment,o),y(oa.$$.fragment,o),y(ra.$$.fragment,o),y(aa.$$.fragment,o),y(na.$$.fragment,o),y(sa.$$.fragment,o),y(ia.$$.fragment,o),y(da.$$.fragment,o),y(ma.$$.fragment,o),y(ha.$$.fragment,o),y(ua.$$.fragment,o),y(ga.$$.fragment,o),y(_a.$$.fragment,o),y(ba.$$.fragment,o),y(va.$$.fragment,o),y(ya.$$.fragment,o),y($a.$$.fragment,o),y(Ta.$$.fragment,o),y(ka.$$.fragment,o),y(Ma.$$.fragment,o),y(Ea.$$.fragment,o),y(ja.$$.fragment,o),y(Fa.$$.fragment,o),y(Mo.$$.fragment,o),y(qa.$$.fragment,o),y(Eo.$$.fragment,o),y(Ia.$$.fragment,o),y(La.$$.fragment,o),y(jo.$$.fragment,o),y(Ua.$$.fragment,o),y(Na.$$.fragment,o),y(Do.$$.fragment,o),y(Ba.$$.fragment,o),y(qo.$$.fragment,o),y(Ga.$$.fragment,o),y(Ao.$$.fragment,o),y(Sa.$$.fragment,o),y(Wa.$$.fragment,o),y(Xa.$$.fragment,o),y(Io.$$.fragment,o),y(Ra.$$.fragment,o),y(Ha.$$.fragment,o),uc=!1},d(o){t(f),o&&t(T),o&&t($),w(m),o&&t(gm),o&&t(te),o&&t(_m),o&&t(Re),o&&t(bm),o&&t(ht),o&&t(vm),o&&t(O),o&&t(ym),o&&t(He),w(Go),o&&t(wm),o&&t(j),w(So),w(Vo),w(yt),w(Ho),w(wt),w($t),w(xt),w(Jo),w(Zo),w(er),w(tr),w(or),w(rr),w(ar),w(nr),w(sr),w(Ft),w(ir),w(mr),w(pr),w(hr),o&&t($m),o&&t(yn),o&&t(xm),o&&t(Je),w(ur),o&&t(Tm),o&&t(Te),o&&t(km),o&&t(zt),o&&t(Pm),w(_r,o),o&&t(Mm),o&&t(It),o&&t(Em),o&&t(oe),o&&t(jm),w(br,o),o&&t(Fm),o&&t(Ct),o&&t(Dm),w(vr,o),o&&t(qm),w(yr,o),o&&t(Am),o&&t($n),o&&t(zm),w(wr,o),o&&t(Im),o&&t(Lt),o&&t(Cm),o&&t(Ze),w($r),o&&t(Lm),o&&t(re),o&&t(Um),w(xr,o),o&&t(Om),o&&t(ke),o&&t(Nm),w(Tr,o),o&&t(Bm),o&&t(Ot),o&&t(Gm),w(kr,o),o&&t(Sm),o&&t(xn),o&&t(Wm),o&&t(Qe),w(Pr),o&&t(Xm),o&&t(W),o&&t(Vm),o&&t(kn),o&&t(Rm),o&&t(Mn),o&&t(Hm),o&&t(En),o&&t(Ym),o&&t(Mr),o&&t(Km),o&&t(et),w(jr),o&&t(Jm),o&&t(Pe),o&&t(Zm),o&&t(tt),w(Fr),o&&t(Qm),o&&t(Fn),o&&t(ec),w(Dr,o),o&&t(tc),o&&t(N),o&&t(oc),w(qr,o),o&&t(rc),o&&t(ot),w(Ar),o&&t(ac),o&&t(C),w(zr),w(Cr),w(Lr),w(Ur),w(Nr),w(Br),w(Gr),w(Sr),w(Wr),o&&t(nc),o&&t(st),w(Xr),o&&t(sc),o&&t(M),w(Vr),w(Hr),w(to),w(Kr),w(Jr),w(ro),w(ao),w(ea),w(ta),w(oa),w(ra),w(aa),w(na),w(sa),w(ia),w(da),w(ma),w(ha),w(ua),w(ga),w(_a),w(ba),w(va),w(ya),w($a),o&&t(ic),o&&t(lt),w(Ta),o&&t(lc),o&&t(de),w(ka),w(Ma),o&&t(dc),o&&t(dt),w(Ea),o&&t(mc),o&&t(q),w(ja),w(Fa),w(Mo),w(qa),w(Eo),w(Ia),w(La),w(jo),w(Ua),w(Na),w(Do),w(Ba),w(qo),w(Ga),w(Ao),o&&t(cc),o&&t(ct),w(Sa),o&&t(pc),o&&t(me),w(Wa),w(Xa),w(Io),o&&t(hc),o&&t(pt),w(Ra),o&&t(fc),o&&t(ce),w(Ha)}}}const Ak={local:"models",sections:[{local:"transformers.PreTrainedModel",sections:[{local:"large-model-loading",title:"Large model loading"},{local:"model-instantiation-dtype",title:"Model Instantiation dtype"},{local:"bitsandbytes-integration-for-int8-mixedprecision-matrix-decomposition",sections:[{local:"requirements",title:"Requirements"},{local:"running-mixedint8-models",title:"Running mixed-int8 models"}],title:"`bitsandbytes` integration for Int8 mixed-precision matrix decomposition"}],title:"PreTrainedModel"},{local:"transformers.modeling_utils.ModuleUtilsMixin",title:"ModuleUtilsMixin"},{local:"transformers.TFPreTrainedModel",title:"TFPreTrainedModel"},{local:"transformers.modeling_tf_utils.TFModelUtilsMixin",title:"TFModelUtilsMixin"},{local:"transformers.FlaxPreTrainedModel",title:"FlaxPreTrainedModel"},{local:"transformers.utils.PushToHubMixin",title:"Pushing to the Hub"},{local:"transformers.modeling_utils.load_sharded_checkpoint",title:"Sharded checkpoints"}],title:"Models"};function zk(D){return gk(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bk extends pk{constructor(f){super();hk(this,f,zk,qk,fk,{})}}export{Bk as default,Ak as metadata};
