import{S as sg,i as lg,s as ig,e as o,k as c,w as u,t as a,M as cg,c as s,d as t,m as d,a as l,x as b,h as r,b as i,G as e,g as f,y as _,q as v,o as E,B as k,v as dg,L as mg}from"../../chunks/vendor-hf-doc-builder.js";import{T as fg}from"../../chunks/Tip-hf-doc-builder.js";import{D as w}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Lf}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Gn}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as hg}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function pg(ma){let A,z,D,x,W;return x=new Lf({props:{code:`class PrinterCallback(TrainerCallback):
    def on_log(self, args, state, control, logs=None, **kwargs):
        _ = logs.pop("total_flos", None)
        if state.is_local_process_zero:
            print(logs)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">PrinterCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_log</span>(<span class="hljs-params">self, args, state, control, logs=<span class="hljs-literal">None</span>, **kwargs</span>):
        _ = logs.pop(<span class="hljs-string">&quot;total_flos&quot;</span>, <span class="hljs-literal">None</span>)
        <span class="hljs-keyword">if</span> state.is_local_process_zero:
            <span class="hljs-built_in">print</span>(logs)`}}),{c(){A=o("p"),z=a("Example:"),D=c(),u(x.$$.fragment)},l(y){A=s(y,"P",{});var N=l(A);z=r(N,"Example:"),N.forEach(t),D=d(y),b(x.$$.fragment,y)},m(y,N){f(y,A,N),e(A,z),f(y,D,N),_(x,y,N),W=!0},p:mg,i(y){W||(v(x.$$.fragment,y),W=!0)},o(y){E(x.$$.fragment,y),W=!1},d(y){y&&t(A),y&&t(D),k(x,y)}}}function gg(ma){let A,z,D,x,W,y,N,ae;return{c(){A=o("p"),z=a(`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=o("code"),x=a("gradient_accumulation_steps=n"),W=a(`, then one update
step requires going through `),y=o("em"),N=a("n"),ae=a(" batches.")},l(re){A=s(re,"P",{});var j=l(A);z=r(j,`In all this class, one step is to be understood as one update step. When using gradient accumulation, one update
step may require several forward and backward passes: if you use `),D=s(j,"CODE",{});var G=l(D);x=r(G,"gradient_accumulation_steps=n"),G.forEach(t),W=r(j,`, then one update
step requires going through `),y=s(j,"EM",{});var fa=l(y);N=r(fa,"n"),fa.forEach(t),ae=r(j," batches."),j.forEach(t)},m(re,j){f(re,A,j),e(A,z),e(A,D),e(D,x),e(A,W),e(A,y),e(y,N),e(A,ae)},d(re){re&&t(A)}}}function ug(ma){let A,z,D,x,W,y,N,ae,re,j,G,fa,ha,ds,ms,Hn,B,fs,pa,hs,ps,ga,gs,us,ua,bs,_s,Jn,ke,vs,ba,Es,ks,Yn,O,_a,va,$s,Ts,Cs,Z,Ea,ws,ys,ka,As,Ls,$a,Ds,xs,Os,Ta,Ca,Ms,Ss,Is,$e,wa,Ps,Fs,at,Ws,Ns,js,Te,ya,zs,Bs,rt,Rs,Vs,Us,Ce,Aa,qs,Gs,nt,Hs,Js,Ys,we,La,Xs,Ks,ot,Qs,Zs,el,ye,Da,tl,al,st,rl,nl,Xn,S,ol,xa,sl,ll,Oa,il,cl,Ma,dl,ml,Sa,fl,hl,Ia,pl,gl,Kn,ne,Ae,fr,lt,ul,hr,bl,Qn,Le,_l,Pa,vl,El,Zn,H,it,kl,oe,$l,Fa,Tl,Cl,ct,wl,yl,Al,R,dt,Ll,pr,Dl,xl,L,Ol,gr,Ml,Sl,ur,Il,Pl,br,Fl,Wl,_r,Nl,jl,vr,zl,Bl,Er,Rl,Vl,kr,Ul,ql,$r,Gl,Hl,Tr,Jl,Yl,Xl,mt,Kl,ft,Ql,Zl,eo,se,ht,ei,pt,ti,Wa,ai,ri,to,le,gt,ni,ut,oi,Na,si,li,ao,ie,bt,ii,_t,ci,ja,di,mi,ro,J,vt,fi,Et,hi,za,pi,gi,ui,Y,bi,Ba,_i,vi,Cr,Ei,ki,Ra,$i,Ti,no,ce,kt,Ci,de,wi,Va,yi,Ai,$t,Li,Di,oo,X,Tt,xi,me,Oi,Ua,Mi,Si,Ct,Ii,Pi,Fi,V,wt,Wi,yt,Ni,wr,ji,zi,Bi,At,Ri,Lt,Vi,Ui,qi,h,Gi,yr,Hi,Ji,Ar,Yi,Xi,Lr,Ki,Qi,Dr,Zi,ec,xr,tc,ac,Or,rc,nc,Mr,oc,sc,Sr,lc,ic,Ir,cc,dc,Pr,mc,fc,Fr,hc,pc,Wr,gc,uc,Nr,bc,_c,jr,vc,Ec,zr,kc,$c,Br,Tc,Cc,Rr,wc,yc,Vr,Ac,Lc,Ur,Dc,xc,so,K,Dt,Oc,Q,Mc,qa,Sc,Ic,xt,Pc,Fc,qr,Wc,Nc,jc,ee,Ot,zc,Gr,Bc,Rc,p,Vc,Hr,Uc,qc,Jr,Gc,Hc,Yr,Jc,Yc,Xr,Xc,Kc,Ga,Qc,Zc,Kr,ed,td,Qr,ad,rd,Zr,nd,od,en,sd,ld,tn,id,cd,an,dd,md,rn,fd,hd,nn,pd,gd,on,ud,bd,sn,_d,vd,ln,Ed,kd,cn,$d,Td,dn,Cd,wd,mn,yd,Ad,lo,fe,Mt,Ld,he,Dd,Ha,xd,Od,St,Md,Sd,io,pe,It,Id,Pt,Pd,Ja,Fd,Wd,co,ge,De,fn,Ft,Nd,hn,jd,mo,g,Wt,zd,pn,Bd,Rd,Nt,Vd,gn,Ud,qd,Gd,P,Hd,un,Jd,Yd,bn,Xd,Kd,_n,Qd,Zd,vn,em,tm,En,am,rm,nm,xe,om,Oe,jt,sm,kn,lm,im,Me,zt,cm,$n,dm,mm,Se,Bt,fm,Tn,hm,pm,Ie,Rt,gm,Vt,um,Ya,bm,_m,vm,Pe,Ut,Em,Cn,km,$m,Fe,qt,Tm,wn,Cm,wm,We,Gt,ym,yn,Am,Lm,Ne,Ht,Dm,An,xm,Om,je,Jt,Mm,Ln,Sm,Im,ze,Yt,Pm,Dn,Fm,Wm,Be,Xt,Nm,xn,jm,zm,Re,Kt,Bm,On,Rm,Vm,Ve,Qt,Um,Mn,qm,fo,Ue,Gm,Xa,Hm,Jm,ho,Zt,po,qe,Ym,Sn,Xm,Km,go,ea,uo,ue,Ge,In,ta,Qm,Pn,Zm,bo,F,aa,ef,be,tf,Ka,af,rf,Qa,nf,of,sf,He,lf,Je,ra,cf,na,df,Fn,mf,ff,hf,Ye,oa,pf,sa,gf,Wn,uf,bf,_o,_e,Xe,Nn,la,_f,jn,vf,vo,ve,ia,Ef,Ee,kf,Za,$f,Tf,er,Cf,wf,Eo;return y=new Gn({}),lt=new Gn({}),it=new w({props:{name:"class transformers.integrations.CometCallback",anchor:"transformers.integrations.CometCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L692"}}),dt=new w({props:{name:"setup",anchor:"transformers.integrations.CometCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L703"}}),ht=new w({props:{name:"class transformers.DefaultFlowCallback",anchor:"transformers.DefaultFlowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L415"}}),gt=new w({props:{name:"class transformers.PrinterCallback",anchor:"transformers.PrinterCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L513"}}),bt=new w({props:{name:"class transformers.ProgressCallback",anchor:"transformers.ProgressCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L465"}}),vt=new w({props:{name:"class transformers.EarlyStoppingCallback",anchor:"transformers.EarlyStoppingCallback",parameters:[{name:"early_stopping_patience",val:": int = 1"},{name:"early_stopping_threshold",val:": typing.Optional[float] = 0.0"}],parametersDescription:[{anchor:"transformers.EarlyStoppingCallback.early_stopping_patience",description:`<strong>early_stopping_patience</strong> (<code>int</code>) &#x2014;
Use with <code>metric_for_best_model</code> to stop training when the specified metric worsens for
<code>early_stopping_patience</code> evaluation calls.`,name:"early_stopping_patience"},{anchor:"transformers.EarlyStoppingCallback.early_stopping_threshold(float,",description:`<strong>early_stopping_threshold(<code>float</code>,</strong> <em>optional</em>) &#x2014;
Use with TrainingArguments <code>metric_for_best_model</code> and <code>early_stopping_patience</code> to denote how much the
specified metric must improve to satisfy early stopping conditions. \``,name:"early_stopping_threshold(float,"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L524"}}),kt=new w({props:{name:"class transformers.integrations.TensorBoardCallback",anchor:"transformers.integrations.TensorBoardCallback",parameters:[{name:"tb_writer",val:" = None"}],parametersDescription:[{anchor:"transformers.integrations.TensorBoardCallback.tb_writer",description:`<strong>tb_writer</strong> (<code>SummaryWriter</code>, <em>optional</em>) &#x2014;
The writer to use. Will instantiate one if not set.`,name:"tb_writer"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L477"}}),Tt=new w({props:{name:"class transformers.integrations.WandbCallback",anchor:"transformers.integrations.WandbCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L566"}}),wt=new w({props:{name:"setup",anchor:"transformers.integrations.WandbCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L583"}}),Dt=new w({props:{name:"class transformers.integrations.MLflowCallback",anchor:"transformers.integrations.MLflowCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L792"}}),Ot=new w({props:{name:"setup",anchor:"transformers.integrations.MLflowCallback.setup",parameters:[{name:"args",val:""},{name:"state",val:""},{name:"model",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L811"}}),Mt=new w({props:{name:"class transformers.integrations.AzureMLCallback",anchor:"transformers.integrations.AzureMLCallback",parameters:[{name:"azureml_run",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L769"}}),It=new w({props:{name:"class transformers.integrations.CodeCarbonCallback",anchor:"transformers.integrations.CodeCarbonCallback",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/integrations.py#L999"}}),Ft=new Gn({}),Wt=new w({props:{name:"class transformers.TrainerCallback",anchor:"transformers.TrainerCallback",parameters:[],parametersDescription:[{anchor:"transformers.TrainerCallback.args",description:`<strong>args</strong> (<a href="/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>) &#x2014;
The training arguments used to instantiate the <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"args"},{anchor:"transformers.TrainerCallback.state",description:`<strong>state</strong> (<a href="/docs/transformers/main/en/main_classes/callback#transformers.TrainerState">TrainerState</a>) &#x2014;
The current state of the <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a>.`,name:"state"},{anchor:"transformers.TrainerCallback.control",description:`<strong>control</strong> (<a href="/docs/transformers/main/en/main_classes/callback#transformers.TrainerControl">TrainerControl</a>) &#x2014;
The object that is returned to the <a href="/docs/transformers/main/en/main_classes/trainer#transformers.Trainer">Trainer</a> and can be used to make some decisions.`,name:"control"},{anchor:"transformers.TrainerCallback.model",description:`<strong>model</strong> (<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>) &#x2014;
The model being trained.`,name:"model"},{anchor:"transformers.TrainerCallback.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>) &#x2014;
The tokenizer used for encoding the data.`,name:"tokenizer"},{anchor:"transformers.TrainerCallback.optimizer",description:`<strong>optimizer</strong> (<code>torch.optim.Optimizer</code>) &#x2014;
The optimizer used for the training steps.`,name:"optimizer"},{anchor:"transformers.TrainerCallback.lr_scheduler",description:`<strong>lr_scheduler</strong> (<code>torch.optim.lr_scheduler.LambdaLR</code>) &#x2014;
The scheduler used for setting the learning rate.`,name:"lr_scheduler"},{anchor:"transformers.TrainerCallback.train_dataloader",description:`<strong>train_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"train_dataloader"},{anchor:"transformers.TrainerCallback.eval_dataloader",description:`<strong>eval_dataloader</strong> (<code>torch.utils.data.DataLoader</code>, <em>optional</em>) &#x2014;
The current dataloader used for training.`,name:"eval_dataloader"},{anchor:"transformers.TrainerCallback.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics computed by the last evaluation phase.</p>
<p>Those are only accessible in the event <code>on_evaluate</code>.`,name:"metrics"},{anchor:"transformers.TrainerCallback.logs",description:`<strong>logs</strong>  (<code>Dict[str, float]</code>) &#x2014;
The values to log.</p>
<p>Those are only accessible in the event <code>on_log</code>.`,name:"logs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L159"}}),xe=new hg({props:{anchor:"transformers.TrainerCallback.example",$$slots:{default:[pg]},$$scope:{ctx:ma}}}),jt=new w({props:{name:"on_epoch_begin",anchor:"transformers.TrainerCallback.on_epoch_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L227"}}),zt=new w({props:{name:"on_epoch_end",anchor:"transformers.TrainerCallback.on_epoch_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L233"}}),Bt=new w({props:{name:"on_evaluate",anchor:"transformers.TrainerCallback.on_evaluate",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L259"}}),Rt=new w({props:{name:"on_init_end",anchor:"transformers.TrainerCallback.on_init_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L209"}}),Ut=new w({props:{name:"on_log",anchor:"transformers.TrainerCallback.on_log",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L277"}}),qt=new w({props:{name:"on_predict",anchor:"transformers.TrainerCallback.on_predict",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"metrics",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L265"}}),Gt=new w({props:{name:"on_prediction_step",anchor:"transformers.TrainerCallback.on_prediction_step",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L283"}}),Ht=new w({props:{name:"on_save",anchor:"transformers.TrainerCallback.on_save",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L271"}}),Jt=new w({props:{name:"on_step_begin",anchor:"transformers.TrainerCallback.on_step_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L239"}}),Yt=new w({props:{name:"on_step_end",anchor:"transformers.TrainerCallback.on_step_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L252"}}),Xt=new w({props:{name:"on_substep_end",anchor:"transformers.TrainerCallback.on_substep_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L246"}}),Kt=new w({props:{name:"on_train_begin",anchor:"transformers.TrainerCallback.on_train_begin",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L215"}}),Qt=new w({props:{name:"on_train_end",anchor:"transformers.TrainerCallback.on_train_end",parameters:[{name:"args",val:": TrainingArguments"},{name:"state",val:": TrainerState"},{name:"control",val:": TrainerControl"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L221"}}),Zt=new Lf({props:{code:`class MyCallback(TrainerCallback):
    "A callback that prints a message at the beginning of training"

    def on_train_begin(self, args, state, control, **kwargs):
        print("Starting training")


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  # We can either pass the callback class this way or an instance of it (MyCallback())
)`,highlighted:`<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallback</span>(<span class="hljs-title class_ inherited__">TrainerCallback</span>):
    <span class="hljs-string">&quot;A callback that prints a message at the beginning of training&quot;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">on_train_begin</span>(<span class="hljs-params">self, args, state, control, **kwargs</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting training&quot;</span>)


trainer = Trainer(
    model,
    args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    callbacks=[MyCallback],  <span class="hljs-comment"># We can either pass the callback class this way or an instance of it (MyCallback())</span>
)`}}),ea=new Lf({props:{code:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
# Alternatively, we can pass an instance of the callback class
trainer.add_callback(MyCallback())`,highlighted:`trainer = Trainer(...)
trainer.add_callback(MyCallback)
<span class="hljs-comment"># Alternatively, we can pass an instance of the callback class</span>
trainer.add_callback(MyCallback())`}}),ta=new Gn({}),aa=new w({props:{name:"class transformers.TrainerState",anchor:"transformers.TrainerState",parameters:[{name:"epoch",val:": typing.Optional[float] = None"},{name:"global_step",val:": int = 0"},{name:"max_steps",val:": int = 0"},{name:"num_train_epochs",val:": int = 0"},{name:"total_flos",val:": float = 0"},{name:"log_history",val:": typing.List[typing.Dict[str, float]] = None"},{name:"best_metric",val:": typing.Optional[float] = None"},{name:"best_model_checkpoint",val:": typing.Optional[str] = None"},{name:"is_local_process_zero",val:": bool = True"},{name:"is_world_process_zero",val:": bool = True"},{name:"is_hyper_param_search",val:": bool = False"},{name:"trial_name",val:": str = None"},{name:"trial_params",val:": typing.Dict[str, typing.Union[str, float, int, bool]] = None"}],parametersDescription:[{anchor:"transformers.TrainerState.epoch",description:`<strong>epoch</strong> (<code>float</code>, <em>optional</em>) &#x2014;
Only set during training, will represent the epoch the training is at (the decimal part being the
percentage of the current epoch completed).`,name:"epoch"},{anchor:"transformers.TrainerState.global_step",description:`<strong>global_step</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
During training, represents the number of update steps completed.`,name:"global_step"},{anchor:"transformers.TrainerState.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The number of update steps to do during the current training.`,name:"max_steps"},{anchor:"transformers.TrainerState.total_flos",description:`<strong>total_flos</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The total number of floating operations done by the model since the beginning of training (stored as floats
to avoid overflow).`,name:"total_flos"},{anchor:"transformers.TrainerState.log_history",description:`<strong>log_history</strong> (<code>List[Dict[str, float]]</code>, <em>optional</em>) &#x2014;
The list of logs done since the beginning of training.`,name:"log_history"},{anchor:"transformers.TrainerState.best_metric",description:`<strong>best_metric</strong> (<code>float</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the best metric encountered so far.`,name:"best_metric"},{anchor:"transformers.TrainerState.best_model_checkpoint",description:`<strong>best_model_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
When tracking the best model, the value of the name of the checkpoint for the best model encountered so
far.`,name:"best_model_checkpoint"},{anchor:"transformers.TrainerState.is_local_process_zero",description:`<strong>is_local_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on
several machines) main process.`,name:"is_local_process_zero"},{anchor:"transformers.TrainerState.is_world_process_zero",description:`<strong>is_world_process_zero</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be <code>True</code> for one process).`,name:"is_world_process_zero"},{anchor:"transformers.TrainerState.is_hyper_param_search",description:`<strong>is_hyper_param_search</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether we are in the process of a hyper parameter search using Trainer.hyperparameter_search. This will
impact the way data will be logged in TensorBoard.`,name:"is_hyper_param_search"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L35"}}),He=new fg({props:{$$slots:{default:[gg]},$$scope:{ctx:ma}}}),ra=new w({props:{name:"load_from_json",anchor:"transformers.TrainerState.load_from_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L101"}}),oa=new w({props:{name:"save_to_json",anchor:"transformers.TrainerState.save_to_json",parameters:[{name:"json_path",val:": str"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L95"}}),la=new Gn({}),ia=new w({props:{name:"class transformers.TrainerControl",anchor:"transformers.TrainerControl",parameters:[{name:"should_training_stop",val:": bool = False"},{name:"should_epoch_stop",val:": bool = False"},{name:"should_save",val:": bool = False"},{name:"should_evaluate",val:": bool = False"},{name:"should_log",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TrainerControl.should_training_stop",description:`<strong>should_training_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the training should be interrupted.</p>
<p>If <code>True</code>, this variable will not be set back to <code>False</code>. The training will just stop.`,name:"should_training_stop"},{anchor:"transformers.TrainerControl.should_epoch_stop",description:`<strong>should_epoch_stop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the current epoch should be interrupted.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next epoch.`,name:"should_epoch_stop"},{anchor:"transformers.TrainerControl.should_save",description:`<strong>should_save</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be saved at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_save"},{anchor:"transformers.TrainerControl.should_evaluate",description:`<strong>should_evaluate</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the model should be evaluated at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_evaluate"},{anchor:"transformers.TrainerControl.should_log",description:`<strong>should_log</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the logs should be reported at this step.</p>
<p>If <code>True</code>, this variable will be set back to <code>False</code> at the beginning of the next step.`,name:"should_log"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/trainer_callback.py#L110"}}),{c(){A=o("meta"),z=c(),D=o("h1"),x=o("a"),W=o("span"),u(y.$$.fragment),N=c(),ae=o("span"),re=a("Callbacks"),j=c(),G=o("p"),fa=a(`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),ha=o("a"),ds=a("Trainer"),ms=a(` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),Hn=c(),B=o("p"),fs=a("Callbacks are \u201Cread only\u201D pieces of code, apart from the "),pa=o("a"),hs=a("TrainerControl"),ps=a(` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),ga=o("a"),gs=a("Trainer"),us=a(" and override the methods you need (see "),ua=o("a"),bs=a("trainer"),_s=a(" for examples)."),Jn=c(),ke=o("p"),vs=a("By default a "),ba=o("a"),Es=a("Trainer"),ks=a(" will use the following callbacks:"),Yn=c(),O=o("ul"),_a=o("li"),va=o("a"),$s=a("DefaultFlowCallback"),Ts=a(" which handles the default behavior for logging, saving and evaluation."),Cs=c(),Z=o("li"),Ea=o("a"),ws=a("PrinterCallback"),ys=a(" or "),ka=o("a"),As=a("ProgressCallback"),Ls=a(` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),$a=o("a"),Ds=a("TrainingArguments"),xs=a(`, otherwise
it\u2019s the second one).`),Os=c(),Ta=o("li"),Ca=o("a"),Ms=a("TensorBoardCallback"),Ss=a(` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),Is=c(),$e=o("li"),wa=o("a"),Ps=a("WandbCallback"),Fs=a(" if "),at=o("a"),Ws=a("wandb"),Ns=a(" is installed."),js=c(),Te=o("li"),ya=o("a"),zs=a("CometCallback"),Bs=a(" if "),rt=o("a"),Rs=a("comet_ml"),Vs=a(" is installed."),Us=c(),Ce=o("li"),Aa=o("a"),qs=a("MLflowCallback"),Gs=a(" if "),nt=o("a"),Hs=a("mlflow"),Js=a(" is installed."),Ys=c(),we=o("li"),La=o("a"),Xs=a("AzureMLCallback"),Ks=a(" if "),ot=o("a"),Qs=a("azureml-sdk"),Zs=a(` is
installed.`),el=c(),ye=o("li"),Da=o("a"),tl=a("CodeCarbonCallback"),al=a(" if "),st=o("a"),rl=a("codecarbon"),nl=a(` is
installed.`),Xn=c(),S=o("p"),ol=a("The main class that implements callbacks is "),xa=o("a"),sl=a("TrainerCallback"),ll=a(`. It gets the
`),Oa=o("a"),il=a("TrainingArguments"),cl=a(" used to instantiate the "),Ma=o("a"),dl=a("Trainer"),ml=a(`, can access that
Trainer\u2019s internal state via `),Sa=o("a"),fl=a("TrainerState"),hl=a(`, and can take some actions on the training loop via
`),Ia=o("a"),pl=a("TrainerControl"),gl=a("."),Kn=c(),ne=o("h2"),Ae=o("a"),fr=o("span"),u(lt.$$.fragment),ul=c(),hr=o("span"),bl=a("Available Callbacks"),Qn=c(),Le=o("p"),_l=a("Here is the list of the available "),Pa=o("a"),vl=a("TrainerCallback"),El=a(" in the library:"),Zn=c(),H=o("div"),u(it.$$.fragment),kl=c(),oe=o("p"),$l=a("A "),Fa=o("a"),Tl=a("TrainerCallback"),Cl=a(" that sends the logs to "),ct=o("a"),wl=a("Comet ML"),yl=a("."),Al=c(),R=o("div"),u(dt.$$.fragment),Ll=c(),pr=o("p"),Dl=a("Setup the optional Comet.ml integration."),xl=c(),L=o("p"),Ol=a(`Environment:
COMET_MODE (`),gr=o("code"),Ml=a("str"),Sl=a(", "),ur=o("em"),Il=a("optional"),Pl=a(`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),br=o("code"),Fl=a("str"),Wl=a(", "),_r=o("em"),Nl=a("optional"),jl=a(`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),vr=o("code"),zl=a("str"),Bl=a(", "),Er=o("em"),Rl=a("optional"),Vl=a(`):
Folder to use for saving offline experiments when `),kr=o("code"),Ul=a("COMET_MODE"),ql=a(` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),$r=o("code"),Gl=a("str"),Hl=a(", "),Tr=o("em"),Jl=a("optional"),Yl=a(`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),Xl=c(),mt=o("p"),Kl=a(`For a number of configurable items in the environment, see
`),ft=o("a"),Ql=a("here"),Zl=a("."),eo=c(),se=o("div"),u(ht.$$.fragment),ei=c(),pt=o("p"),ti=a("A "),Wa=o("a"),ai=a("TrainerCallback"),ri=a(" that handles the default flow of the training loop for logs, evaluation and checkpoints."),to=c(),le=o("div"),u(gt.$$.fragment),ni=c(),ut=o("p"),oi=a("A bare "),Na=o("a"),si=a("TrainerCallback"),li=a(" that just prints the logs."),ao=c(),ie=o("div"),u(bt.$$.fragment),ii=c(),_t=o("p"),ci=a("A "),ja=o("a"),di=a("TrainerCallback"),mi=a(" that displays the progress of training or evaluation."),ro=c(),J=o("div"),u(vt.$$.fragment),fi=c(),Et=o("p"),hi=a("A "),za=o("a"),pi=a("TrainerCallback"),gi=a(" that handles early stopping."),ui=c(),Y=o("p"),bi=a("This callback depends on "),Ba=o("a"),_i=a("TrainingArguments"),vi=a(" argument "),Cr=o("em"),Ei=a("load_best_model_at_end"),ki=a(` functionality to set best_metric
in `),Ra=o("a"),$i=a("TrainerState"),Ti=a("."),no=c(),ce=o("div"),u(kt.$$.fragment),Ci=c(),de=o("p"),wi=a("A "),Va=o("a"),yi=a("TrainerCallback"),Ai=a(" that sends the logs to "),$t=o("a"),Li=a("TensorBoard"),Di=a("."),oo=c(),X=o("div"),u(Tt.$$.fragment),xi=c(),me=o("p"),Oi=a("A "),Ua=o("a"),Mi=a("TrainerCallback"),Si=a(" that sends the logs to "),Ct=o("a"),Ii=a("Weight and Biases"),Pi=a("."),Fi=c(),V=o("div"),u(wt.$$.fragment),Wi=c(),yt=o("p"),Ni=a("Setup the optional Weights & Biases ("),wr=o("em"),ji=a("wandb"),zi=a(") integration."),Bi=c(),At=o("p"),Ri=a(`One can subclass and override this method to customize the setup if needed. Find more information
`),Lt=o("a"),Vi=a("here"),Ui=a(`. You can also override the following environment
variables:`),qi=c(),h=o("p"),Gi=a(`Environment:
WANDB_LOG_MODEL (`),yr=o("code"),Hi=a("bool"),Ji=a(", "),Ar=o("em"),Yi=a("optional"),Xi=a(", defaults to "),Lr=o("code"),Ki=a("False"),Qi=a(`):
Whether or not to log model as artifact at the end of training. Use along with
`),Dr=o("em"),Zi=a("TrainingArguments.load_best_model_at_end"),ec=a(` to upload best model.
WANDB_WATCH (`),xr=o("code"),tc=a("str"),ac=a(", "),Or=o("em"),rc=a("optional"),nc=a(" defaults to "),Mr=o("code"),oc=a('"gradients"'),sc=a(`):
Can be `),Sr=o("code"),lc=a('"gradients"'),ic=a(", "),Ir=o("code"),cc=a('"all"'),dc=a(" or "),Pr=o("code"),mc=a('"false"'),fc=a(". Set to "),Fr=o("code"),hc=a('"false"'),pc=a(" to disable gradient logging or "),Wr=o("code"),gc=a('"all"'),uc=a(` to
log gradients and parameters.
WANDB_PROJECT (`),Nr=o("code"),bc=a("str"),_c=a(", "),jr=o("em"),vc=a("optional"),Ec=a(", defaults to "),zr=o("code"),kc=a('"huggingface"'),$c=a(`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Br=o("code"),Tc=a("bool"),Cc=a(", "),Rr=o("em"),wc=a("optional"),yc=a(", defaults to "),Vr=o("code"),Ac=a("False"),Lc=a(`):
Whether or not to disable wandb entirely. Set `),Ur=o("em"),Dc=a("WANDB_DISABLED=true"),xc=a(" to disable."),so=c(),K=o("div"),u(Dt.$$.fragment),Oc=c(),Q=o("p"),Mc=a("A "),qa=o("a"),Sc=a("TrainerCallback"),Ic=a(" that sends the logs to "),xt=o("a"),Pc=a("MLflow"),Fc=a(`. Can be disabled by setting
environment variable `),qr=o("code"),Wc=a("DISABLE_MLFLOW_INTEGRATION = TRUE"),Nc=a("."),jc=c(),ee=o("div"),u(Ot.$$.fragment),zc=c(),Gr=o("p"),Bc=a("Setup the optional MLflow integration."),Rc=c(),p=o("p"),Vc=a(`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Hr=o("code"),Uc=a("str"),qc=a(", "),Jr=o("em"),Gc=a("optional"),Hc=a(`):
Whether to use MLflow .log_artifact() facility to log artifacts. This only makes sense if logging to a
remote server, e.g. s3 or GCS. If set to `),Yr=o("code"),Jc=a("True"),Yc=a(" or "),Xr=o("em"),Xc=a("1"),Kc=a(`, will copy each saved checkpoint on each save in
`),Ga=o("a"),Qc=a("TrainingArguments"),Zc=a("\u2019s "),Kr=o("code"),ed=a("output_dir"),td=a(` to the local or remote artifact storage. Using it without a remote
storage will just copy the files to your artifact location.
MLFLOW_EXPERIMENT_NAME (`),Qr=o("code"),ad=a("str"),rd=a(", "),Zr=o("em"),nd=a("optional"),od=a(`):
Whether to use an MLflow experiment_name under which to launch the run. Default to \u201CNone\u201D which will
point to the \u201CDefault\u201D experiment in MLflow. Otherwise, it is a case sensitive name of the experiment
to be activated. If an experiment with this name does not exist, a new experiment with this name is
created.
MLFLOW_TAGS (`),en=o("code"),sd=a("str"),ld=a(", "),tn=o("em"),id=a("optional"),cd=a(`):
A string dump of a dictionary of key/value pair to be added to the MLflow run as tags. Example:
os.environ[\u2018MLFLOW_TAGS\u2019]=\u2019{\u201Crelease.candidate\u201D: \u201CRC1\u201D, \u201Crelease.version\u201D: \u201C2.2.0\u201D}\u2019
MLFLOW_NESTED_RUN (`),an=o("code"),dd=a("str"),md=a(", "),rn=o("em"),fd=a("optional"),hd=a(`):
Whether to use MLflow nested runs. If set to `),nn=o("code"),pd=a("True"),gd=a(" or "),on=o("em"),ud=a("1"),bd=a(`, will create a nested run inside the current
run.
MLFLOW_RUN_ID (`),sn=o("code"),_d=a("str"),vd=a(", "),ln=o("em"),Ed=a("optional"),kd=a(`):
Allow to reattach to an existing run which can be usefull when resuming training from a checkpoint.
When MLFLOW_RUN_ID environment variable is set, start_run attempts to resume a run with the specified
run ID and other parameters are ignored.
MLFLOW_FLATTEN_PARAMS (`),cn=o("code"),$d=a("str"),Td=a(", "),dn=o("em"),Cd=a("optional"),wd=a(`):
Whether to flatten the parameters dictionary before logging. Default to `),mn=o("code"),yd=a("False"),Ad=a("."),lo=c(),fe=o("div"),u(Mt.$$.fragment),Ld=c(),he=o("p"),Dd=a("A "),Ha=o("a"),xd=a("TrainerCallback"),Od=a(" that sends the logs to "),St=o("a"),Md=a("AzureML"),Sd=a("."),io=c(),pe=o("div"),u(It.$$.fragment),Id=c(),Pt=o("p"),Pd=a("A "),Ja=o("a"),Fd=a("TrainerCallback"),Wd=a(" that tracks the CO2 emission of training."),co=c(),ge=o("h2"),De=o("a"),fn=o("span"),u(Ft.$$.fragment),Nd=c(),hn=o("span"),jd=a("TrainerCallback"),mo=c(),g=o("div"),u(Wt.$$.fragment),zd=c(),pn=o("p"),Bd=a(`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),Rd=c(),Nt=o("p"),Vd=a("The "),gn=o("code"),Ud=a("control"),qd=a(` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),Gd=c(),P=o("p"),Hd=a("The argument "),un=o("code"),Jd=a("args"),Yd=a(", "),bn=o("code"),Xd=a("state"),Kd=a(" and "),_n=o("code"),Qd=a("control"),Zd=a(" are positionals for all events, all the others are grouped in "),vn=o("code"),em=a("kwargs"),tm=a(`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),En=o("code"),am=a("PrinterCallback"),rm=a("."),nm=c(),u(xe.$$.fragment),om=c(),Oe=o("div"),u(jt.$$.fragment),sm=c(),kn=o("p"),lm=a("Event called at the beginning of an epoch."),im=c(),Me=o("div"),u(zt.$$.fragment),cm=c(),$n=o("p"),dm=a("Event called at the end of an epoch."),mm=c(),Se=o("div"),u(Bt.$$.fragment),fm=c(),Tn=o("p"),hm=a("Event called after an evaluation phase."),pm=c(),Ie=o("div"),u(Rt.$$.fragment),gm=c(),Vt=o("p"),um=a("Event called at the end of the initialization of the "),Ya=o("a"),bm=a("Trainer"),_m=a("."),vm=c(),Pe=o("div"),u(Ut.$$.fragment),Em=c(),Cn=o("p"),km=a("Event called after logging the last logs."),$m=c(),Fe=o("div"),u(qt.$$.fragment),Tm=c(),wn=o("p"),Cm=a("Event called after a successful prediction."),wm=c(),We=o("div"),u(Gt.$$.fragment),ym=c(),yn=o("p"),Am=a("Event called after a prediction step."),Lm=c(),Ne=o("div"),u(Ht.$$.fragment),Dm=c(),An=o("p"),xm=a("Event called after a checkpoint save."),Om=c(),je=o("div"),u(Jt.$$.fragment),Mm=c(),Ln=o("p"),Sm=a(`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),Im=c(),ze=o("div"),u(Yt.$$.fragment),Pm=c(),Dn=o("p"),Fm=a(`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),Wm=c(),Be=o("div"),u(Xt.$$.fragment),Nm=c(),xn=o("p"),jm=a("Event called at the end of an substep during gradient accumulation."),zm=c(),Re=o("div"),u(Kt.$$.fragment),Bm=c(),On=o("p"),Rm=a("Event called at the beginning of training."),Vm=c(),Ve=o("div"),u(Qt.$$.fragment),Um=c(),Mn=o("p"),qm=a("Event called at the end of training."),fo=c(),Ue=o("p"),Gm=a("Here is an example of how to register a custom callback with the PyTorch "),Xa=o("a"),Hm=a("Trainer"),Jm=a(":"),ho=c(),u(Zt.$$.fragment),po=c(),qe=o("p"),Ym=a("Another way to register a callback is to call "),Sn=o("code"),Xm=a("trainer.add_callback()"),Km=a(" as follows:"),go=c(),u(ea.$$.fragment),uo=c(),ue=o("h2"),Ge=o("a"),In=o("span"),u(ta.$$.fragment),Qm=c(),Pn=o("span"),Zm=a("TrainerState"),bo=c(),F=o("div"),u(aa.$$.fragment),ef=c(),be=o("p"),tf=a("A class containing the "),Ka=o("a"),af=a("Trainer"),rf=a(` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Qa=o("a"),nf=a("TrainerCallback"),of=a("."),sf=c(),u(He.$$.fragment),lf=c(),Je=o("div"),u(ra.$$.fragment),cf=c(),na=o("p"),df=a("Create an instance from the content of "),Fn=o("code"),mf=a("json_path"),ff=a("."),hf=c(),Ye=o("div"),u(oa.$$.fragment),pf=c(),sa=o("p"),gf=a("Save the content of this instance in JSON format inside "),Wn=o("code"),uf=a("json_path"),bf=a("."),_o=c(),_e=o("h2"),Xe=o("a"),Nn=o("span"),u(la.$$.fragment),_f=c(),jn=o("span"),vf=a("TrainerControl"),vo=c(),ve=o("div"),u(ia.$$.fragment),Ef=c(),Ee=o("p"),kf=a("A class that handles the "),Za=o("a"),$f=a("Trainer"),Tf=a(" control flow. This class is used by the "),er=o("a"),Cf=a("TrainerCallback"),wf=a(` to activate some
switches in the training loop.`),this.h()},l(n){const m=cg('[data-svelte="svelte-1phssyn"]',document.head);A=s(m,"META",{name:!0,content:!0}),m.forEach(t),z=d(n),D=s(n,"H1",{class:!0});var ca=l(D);x=s(ca,"A",{id:!0,class:!0,href:!0});var zn=l(x);W=s(zn,"SPAN",{});var Df=l(W);b(y.$$.fragment,Df),Df.forEach(t),zn.forEach(t),N=d(ca),ae=s(ca,"SPAN",{});var xf=l(ae);re=r(xf,"Callbacks"),xf.forEach(t),ca.forEach(t),j=d(n),G=s(n,"P",{});var ko=l(G);fa=r(ko,`Callbacks are objects that can customize the behavior of the training loop in the PyTorch
`),ha=s(ko,"A",{href:!0});var Of=l(ha);ds=r(Of,"Trainer"),Of.forEach(t),ms=r(ko,` (this feature is not yet implemented in TensorFlow) that can inspect the training loop
state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early
stopping).`),ko.forEach(t),Hn=d(n),B=s(n,"P",{});var Ke=l(B);fs=r(Ke,"Callbacks are \u201Cread only\u201D pieces of code, apart from the "),pa=s(Ke,"A",{href:!0});var Mf=l(pa);hs=r(Mf,"TrainerControl"),Mf.forEach(t),ps=r(Ke,` object they return, they
cannot change anything in the training loop. For customizations that require changes in the training loop, you should
subclass `),ga=s(Ke,"A",{href:!0});var Sf=l(ga);gs=r(Sf,"Trainer"),Sf.forEach(t),us=r(Ke," and override the methods you need (see "),ua=s(Ke,"A",{href:!0});var If=l(ua);bs=r(If,"trainer"),If.forEach(t),_s=r(Ke," for examples)."),Ke.forEach(t),Jn=d(n),ke=s(n,"P",{});var $o=l(ke);vs=r($o,"By default a "),ba=s($o,"A",{href:!0});var Pf=l(ba);Es=r(Pf,"Trainer"),Pf.forEach(t),ks=r($o," will use the following callbacks:"),$o.forEach(t),Yn=d(n),O=s(n,"UL",{});var I=l(O);_a=s(I,"LI",{});var yf=l(_a);va=s(yf,"A",{href:!0});var Ff=l(va);$s=r(Ff,"DefaultFlowCallback"),Ff.forEach(t),Ts=r(yf," which handles the default behavior for logging, saving and evaluation."),yf.forEach(t),Cs=d(I),Z=s(I,"LI",{});var da=l(Z);Ea=s(da,"A",{href:!0});var Wf=l(Ea);ws=r(Wf,"PrinterCallback"),Wf.forEach(t),ys=r(da," or "),ka=s(da,"A",{href:!0});var Nf=l(ka);As=r(Nf,"ProgressCallback"),Nf.forEach(t),Ls=r(da,` to display progress and print the
logs (the first one is used if you deactivate tqdm through the `),$a=s(da,"A",{href:!0});var jf=l($a);Ds=r(jf,"TrainingArguments"),jf.forEach(t),xs=r(da,`, otherwise
it\u2019s the second one).`),da.forEach(t),Os=d(I),Ta=s(I,"LI",{});var Af=l(Ta);Ca=s(Af,"A",{href:!0});var zf=l(Ca);Ms=r(zf,"TensorBoardCallback"),zf.forEach(t),Ss=r(Af,` if tensorboard is accessible (either through PyTorch >= 1.4
or tensorboardX).`),Af.forEach(t),Is=d(I),$e=s(I,"LI",{});var Bn=l($e);wa=s(Bn,"A",{href:!0});var Bf=l(wa);Ps=r(Bf,"WandbCallback"),Bf.forEach(t),Fs=r(Bn," if "),at=s(Bn,"A",{href:!0,rel:!0});var Rf=l(at);Ws=r(Rf,"wandb"),Rf.forEach(t),Ns=r(Bn," is installed."),Bn.forEach(t),js=d(I),Te=s(I,"LI",{});var Rn=l(Te);ya=s(Rn,"A",{href:!0});var Vf=l(ya);zs=r(Vf,"CometCallback"),Vf.forEach(t),Bs=r(Rn," if "),rt=s(Rn,"A",{href:!0,rel:!0});var Uf=l(rt);Rs=r(Uf,"comet_ml"),Uf.forEach(t),Vs=r(Rn," is installed."),Rn.forEach(t),Us=d(I),Ce=s(I,"LI",{});var Vn=l(Ce);Aa=s(Vn,"A",{href:!0});var qf=l(Aa);qs=r(qf,"MLflowCallback"),qf.forEach(t),Gs=r(Vn," if "),nt=s(Vn,"A",{href:!0,rel:!0});var Gf=l(nt);Hs=r(Gf,"mlflow"),Gf.forEach(t),Js=r(Vn," is installed."),Vn.forEach(t),Ys=d(I),we=s(I,"LI",{});var Un=l(we);La=s(Un,"A",{href:!0});var Hf=l(La);Xs=r(Hf,"AzureMLCallback"),Hf.forEach(t),Ks=r(Un," if "),ot=s(Un,"A",{href:!0,rel:!0});var Jf=l(ot);Qs=r(Jf,"azureml-sdk"),Jf.forEach(t),Zs=r(Un,` is
installed.`),Un.forEach(t),el=d(I),ye=s(I,"LI",{});var qn=l(ye);Da=s(qn,"A",{href:!0});var Yf=l(Da);tl=r(Yf,"CodeCarbonCallback"),Yf.forEach(t),al=r(qn," if "),st=s(qn,"A",{href:!0,rel:!0});var Xf=l(st);rl=r(Xf,"codecarbon"),Xf.forEach(t),nl=r(qn,` is
installed.`),qn.forEach(t),I.forEach(t),Xn=d(n),S=s(n,"P",{});var U=l(S);ol=r(U,"The main class that implements callbacks is "),xa=s(U,"A",{href:!0});var Kf=l(xa);sl=r(Kf,"TrainerCallback"),Kf.forEach(t),ll=r(U,`. It gets the
`),Oa=s(U,"A",{href:!0});var Qf=l(Oa);il=r(Qf,"TrainingArguments"),Qf.forEach(t),cl=r(U," used to instantiate the "),Ma=s(U,"A",{href:!0});var Zf=l(Ma);dl=r(Zf,"Trainer"),Zf.forEach(t),ml=r(U,`, can access that
Trainer\u2019s internal state via `),Sa=s(U,"A",{href:!0});var eh=l(Sa);fl=r(eh,"TrainerState"),eh.forEach(t),hl=r(U,`, and can take some actions on the training loop via
`),Ia=s(U,"A",{href:!0});var th=l(Ia);pl=r(th,"TrainerControl"),th.forEach(t),gl=r(U,"."),U.forEach(t),Kn=d(n),ne=s(n,"H2",{class:!0});var To=l(ne);Ae=s(To,"A",{id:!0,class:!0,href:!0});var ah=l(Ae);fr=s(ah,"SPAN",{});var rh=l(fr);b(lt.$$.fragment,rh),rh.forEach(t),ah.forEach(t),ul=d(To),hr=s(To,"SPAN",{});var nh=l(hr);bl=r(nh,"Available Callbacks"),nh.forEach(t),To.forEach(t),Qn=d(n),Le=s(n,"P",{});var Co=l(Le);_l=r(Co,"Here is the list of the available "),Pa=s(Co,"A",{href:!0});var oh=l(Pa);vl=r(oh,"TrainerCallback"),oh.forEach(t),El=r(Co," in the library:"),Co.forEach(t),Zn=d(n),H=s(n,"DIV",{class:!0});var tr=l(H);b(it.$$.fragment,tr),kl=d(tr),oe=s(tr,"P",{});var ar=l(oe);$l=r(ar,"A "),Fa=s(ar,"A",{href:!0});var sh=l(Fa);Tl=r(sh,"TrainerCallback"),sh.forEach(t),Cl=r(ar," that sends the logs to "),ct=s(ar,"A",{href:!0,rel:!0});var lh=l(ct);wl=r(lh,"Comet ML"),lh.forEach(t),yl=r(ar,"."),ar.forEach(t),Al=d(tr),R=s(tr,"DIV",{class:!0});var Qe=l(R);b(dt.$$.fragment,Qe),Ll=d(Qe),pr=s(Qe,"P",{});var ih=l(pr);Dl=r(ih,"Setup the optional Comet.ml integration."),ih.forEach(t),xl=d(Qe),L=s(Qe,"P",{});var M=l(L);Ol=r(M,`Environment:
COMET_MODE (`),gr=s(M,"CODE",{});var ch=l(gr);Ml=r(ch,"str"),ch.forEach(t),Sl=r(M,", "),ur=s(M,"EM",{});var dh=l(ur);Il=r(dh,"optional"),dh.forEach(t),Pl=r(M,`):
Whether to create an online, offline experiment or disable Comet logging. Can be \u201COFFLINE\u201D, \u201CONLINE\u201D,
or \u201CDISABLED\u201D. Defaults to \u201CONLINE\u201D.
COMET_PROJECT_NAME (`),br=s(M,"CODE",{});var mh=l(br);Fl=r(mh,"str"),mh.forEach(t),Wl=r(M,", "),_r=s(M,"EM",{});var fh=l(_r);Nl=r(fh,"optional"),fh.forEach(t),jl=r(M,`):
Comet project name for experiments
COMET_OFFLINE_DIRECTORY (`),vr=s(M,"CODE",{});var hh=l(vr);zl=r(hh,"str"),hh.forEach(t),Bl=r(M,", "),Er=s(M,"EM",{});var ph=l(Er);Rl=r(ph,"optional"),ph.forEach(t),Vl=r(M,`):
Folder to use for saving offline experiments when `),kr=s(M,"CODE",{});var gh=l(kr);Ul=r(gh,"COMET_MODE"),gh.forEach(t),ql=r(M,` is \u201COFFLINE\u201D
COMET_LOG_ASSETS (`),$r=s(M,"CODE",{});var uh=l($r);Gl=r(uh,"str"),uh.forEach(t),Hl=r(M,", "),Tr=s(M,"EM",{});var bh=l(Tr);Jl=r(bh,"optional"),bh.forEach(t),Yl=r(M,`):
Whether or not to log training assets (tf event logs, checkpoints, etc), to Comet. Can be \u201CTRUE\u201D, or
\u201CFALSE\u201D. Defaults to \u201CTRUE\u201D.`),M.forEach(t),Xl=d(Qe),mt=s(Qe,"P",{});var wo=l(mt);Kl=r(wo,`For a number of configurable items in the environment, see
`),ft=s(wo,"A",{href:!0,rel:!0});var _h=l(ft);Ql=r(_h,"here"),_h.forEach(t),Zl=r(wo,"."),wo.forEach(t),Qe.forEach(t),tr.forEach(t),eo=d(n),se=s(n,"DIV",{class:!0});var yo=l(se);b(ht.$$.fragment,yo),ei=d(yo),pt=s(yo,"P",{});var Ao=l(pt);ti=r(Ao,"A "),Wa=s(Ao,"A",{href:!0});var vh=l(Wa);ai=r(vh,"TrainerCallback"),vh.forEach(t),ri=r(Ao," that handles the default flow of the training loop for logs, evaluation and checkpoints."),Ao.forEach(t),yo.forEach(t),to=d(n),le=s(n,"DIV",{class:!0});var Lo=l(le);b(gt.$$.fragment,Lo),ni=d(Lo),ut=s(Lo,"P",{});var Do=l(ut);oi=r(Do,"A bare "),Na=s(Do,"A",{href:!0});var Eh=l(Na);si=r(Eh,"TrainerCallback"),Eh.forEach(t),li=r(Do," that just prints the logs."),Do.forEach(t),Lo.forEach(t),ao=d(n),ie=s(n,"DIV",{class:!0});var xo=l(ie);b(bt.$$.fragment,xo),ii=d(xo),_t=s(xo,"P",{});var Oo=l(_t);ci=r(Oo,"A "),ja=s(Oo,"A",{href:!0});var kh=l(ja);di=r(kh,"TrainerCallback"),kh.forEach(t),mi=r(Oo," that displays the progress of training or evaluation."),Oo.forEach(t),xo.forEach(t),ro=d(n),J=s(n,"DIV",{class:!0});var rr=l(J);b(vt.$$.fragment,rr),fi=d(rr),Et=s(rr,"P",{});var Mo=l(Et);hi=r(Mo,"A "),za=s(Mo,"A",{href:!0});var $h=l(za);pi=r($h,"TrainerCallback"),$h.forEach(t),gi=r(Mo," that handles early stopping."),Mo.forEach(t),ui=d(rr),Y=s(rr,"P",{});var Ze=l(Y);bi=r(Ze,"This callback depends on "),Ba=s(Ze,"A",{href:!0});var Th=l(Ba);_i=r(Th,"TrainingArguments"),Th.forEach(t),vi=r(Ze," argument "),Cr=s(Ze,"EM",{});var Ch=l(Cr);Ei=r(Ch,"load_best_model_at_end"),Ch.forEach(t),ki=r(Ze,` functionality to set best_metric
in `),Ra=s(Ze,"A",{href:!0});var wh=l(Ra);$i=r(wh,"TrainerState"),wh.forEach(t),Ti=r(Ze,"."),Ze.forEach(t),rr.forEach(t),no=d(n),ce=s(n,"DIV",{class:!0});var So=l(ce);b(kt.$$.fragment,So),Ci=d(So),de=s(So,"P",{});var nr=l(de);wi=r(nr,"A "),Va=s(nr,"A",{href:!0});var yh=l(Va);yi=r(yh,"TrainerCallback"),yh.forEach(t),Ai=r(nr," that sends the logs to "),$t=s(nr,"A",{href:!0,rel:!0});var Ah=l($t);Li=r(Ah,"TensorBoard"),Ah.forEach(t),Di=r(nr,"."),nr.forEach(t),So.forEach(t),oo=d(n),X=s(n,"DIV",{class:!0});var or=l(X);b(Tt.$$.fragment,or),xi=d(or),me=s(or,"P",{});var sr=l(me);Oi=r(sr,"A "),Ua=s(sr,"A",{href:!0});var Lh=l(Ua);Mi=r(Lh,"TrainerCallback"),Lh.forEach(t),Si=r(sr," that sends the logs to "),Ct=s(sr,"A",{href:!0,rel:!0});var Dh=l(Ct);Ii=r(Dh,"Weight and Biases"),Dh.forEach(t),Pi=r(sr,"."),sr.forEach(t),Fi=d(or),V=s(or,"DIV",{class:!0});var et=l(V);b(wt.$$.fragment,et),Wi=d(et),yt=s(et,"P",{});var Io=l(yt);Ni=r(Io,"Setup the optional Weights & Biases ("),wr=s(Io,"EM",{});var xh=l(wr);ji=r(xh,"wandb"),xh.forEach(t),zi=r(Io,") integration."),Io.forEach(t),Bi=d(et),At=s(et,"P",{});var Po=l(At);Ri=r(Po,`One can subclass and override this method to customize the setup if needed. Find more information
`),Lt=s(Po,"A",{href:!0,rel:!0});var Oh=l(Lt);Vi=r(Oh,"here"),Oh.forEach(t),Ui=r(Po,`. You can also override the following environment
variables:`),Po.forEach(t),qi=d(et),h=s(et,"P",{});var $=l(h);Gi=r($,`Environment:
WANDB_LOG_MODEL (`),yr=s($,"CODE",{});var Mh=l(yr);Hi=r(Mh,"bool"),Mh.forEach(t),Ji=r($,", "),Ar=s($,"EM",{});var Sh=l(Ar);Yi=r(Sh,"optional"),Sh.forEach(t),Xi=r($,", defaults to "),Lr=s($,"CODE",{});var Ih=l(Lr);Ki=r(Ih,"False"),Ih.forEach(t),Qi=r($,`):
Whether or not to log model as artifact at the end of training. Use along with
`),Dr=s($,"EM",{});var Ph=l(Dr);Zi=r(Ph,"TrainingArguments.load_best_model_at_end"),Ph.forEach(t),ec=r($,` to upload best model.
WANDB_WATCH (`),xr=s($,"CODE",{});var Fh=l(xr);tc=r(Fh,"str"),Fh.forEach(t),ac=r($,", "),Or=s($,"EM",{});var Wh=l(Or);rc=r(Wh,"optional"),Wh.forEach(t),nc=r($," defaults to "),Mr=s($,"CODE",{});var Nh=l(Mr);oc=r(Nh,'"gradients"'),Nh.forEach(t),sc=r($,`):
Can be `),Sr=s($,"CODE",{});var jh=l(Sr);lc=r(jh,'"gradients"'),jh.forEach(t),ic=r($,", "),Ir=s($,"CODE",{});var zh=l(Ir);cc=r(zh,'"all"'),zh.forEach(t),dc=r($," or "),Pr=s($,"CODE",{});var Bh=l(Pr);mc=r(Bh,'"false"'),Bh.forEach(t),fc=r($,". Set to "),Fr=s($,"CODE",{});var Rh=l(Fr);hc=r(Rh,'"false"'),Rh.forEach(t),pc=r($," to disable gradient logging or "),Wr=s($,"CODE",{});var Vh=l(Wr);gc=r(Vh,'"all"'),Vh.forEach(t),uc=r($,` to
log gradients and parameters.
WANDB_PROJECT (`),Nr=s($,"CODE",{});var Uh=l(Nr);bc=r(Uh,"str"),Uh.forEach(t),_c=r($,", "),jr=s($,"EM",{});var qh=l(jr);vc=r(qh,"optional"),qh.forEach(t),Ec=r($,", defaults to "),zr=s($,"CODE",{});var Gh=l(zr);kc=r(Gh,'"huggingface"'),Gh.forEach(t),$c=r($,`):
Set this to a custom string to store results in a different project.
WANDB_DISABLED (`),Br=s($,"CODE",{});var Hh=l(Br);Tc=r(Hh,"bool"),Hh.forEach(t),Cc=r($,", "),Rr=s($,"EM",{});var Jh=l(Rr);wc=r(Jh,"optional"),Jh.forEach(t),yc=r($,", defaults to "),Vr=s($,"CODE",{});var Yh=l(Vr);Ac=r(Yh,"False"),Yh.forEach(t),Lc=r($,`):
Whether or not to disable wandb entirely. Set `),Ur=s($,"EM",{});var Xh=l(Ur);Dc=r(Xh,"WANDB_DISABLED=true"),Xh.forEach(t),xc=r($," to disable."),$.forEach(t),et.forEach(t),or.forEach(t),so=d(n),K=s(n,"DIV",{class:!0});var lr=l(K);b(Dt.$$.fragment,lr),Oc=d(lr),Q=s(lr,"P",{});var tt=l(Q);Mc=r(tt,"A "),qa=s(tt,"A",{href:!0});var Kh=l(qa);Sc=r(Kh,"TrainerCallback"),Kh.forEach(t),Ic=r(tt," that sends the logs to "),xt=s(tt,"A",{href:!0,rel:!0});var Qh=l(xt);Pc=r(Qh,"MLflow"),Qh.forEach(t),Fc=r(tt,`. Can be disabled by setting
environment variable `),qr=s(tt,"CODE",{});var Zh=l(qr);Wc=r(Zh,"DISABLE_MLFLOW_INTEGRATION = TRUE"),Zh.forEach(t),Nc=r(tt,"."),tt.forEach(t),jc=d(lr),ee=s(lr,"DIV",{class:!0});var ir=l(ee);b(Ot.$$.fragment,ir),zc=d(ir),Gr=s(ir,"P",{});var ep=l(Gr);Bc=r(ep,"Setup the optional MLflow integration."),ep.forEach(t),Rc=d(ir),p=s(ir,"P",{});var T=l(p);Vc=r(T,`Environment:
HF_MLFLOW_LOG_ARTIFACTS (`),Hr=s(T,"CODE",{});var tp=l(Hr);Uc=r(tp,"str"),tp.forEach(t),qc=r(T,", "),Jr=s(T,"EM",{});var ap=l(Jr);Gc=r(ap,"optional"),ap.forEach(t),Hc=r(T,`):
Whether to use MLflow .log_artifact() facility to log artifacts. This only makes sense if logging to a
remote server, e.g. s3 or GCS. If set to `),Yr=s(T,"CODE",{});var rp=l(Yr);Jc=r(rp,"True"),rp.forEach(t),Yc=r(T," or "),Xr=s(T,"EM",{});var np=l(Xr);Xc=r(np,"1"),np.forEach(t),Kc=r(T,`, will copy each saved checkpoint on each save in
`),Ga=s(T,"A",{href:!0});var op=l(Ga);Qc=r(op,"TrainingArguments"),op.forEach(t),Zc=r(T,"\u2019s "),Kr=s(T,"CODE",{});var sp=l(Kr);ed=r(sp,"output_dir"),sp.forEach(t),td=r(T,` to the local or remote artifact storage. Using it without a remote
storage will just copy the files to your artifact location.
MLFLOW_EXPERIMENT_NAME (`),Qr=s(T,"CODE",{});var lp=l(Qr);ad=r(lp,"str"),lp.forEach(t),rd=r(T,", "),Zr=s(T,"EM",{});var ip=l(Zr);nd=r(ip,"optional"),ip.forEach(t),od=r(T,`):
Whether to use an MLflow experiment_name under which to launch the run. Default to \u201CNone\u201D which will
point to the \u201CDefault\u201D experiment in MLflow. Otherwise, it is a case sensitive name of the experiment
to be activated. If an experiment with this name does not exist, a new experiment with this name is
created.
MLFLOW_TAGS (`),en=s(T,"CODE",{});var cp=l(en);sd=r(cp,"str"),cp.forEach(t),ld=r(T,", "),tn=s(T,"EM",{});var dp=l(tn);id=r(dp,"optional"),dp.forEach(t),cd=r(T,`):
A string dump of a dictionary of key/value pair to be added to the MLflow run as tags. Example:
os.environ[\u2018MLFLOW_TAGS\u2019]=\u2019{\u201Crelease.candidate\u201D: \u201CRC1\u201D, \u201Crelease.version\u201D: \u201C2.2.0\u201D}\u2019
MLFLOW_NESTED_RUN (`),an=s(T,"CODE",{});var mp=l(an);dd=r(mp,"str"),mp.forEach(t),md=r(T,", "),rn=s(T,"EM",{});var fp=l(rn);fd=r(fp,"optional"),fp.forEach(t),hd=r(T,`):
Whether to use MLflow nested runs. If set to `),nn=s(T,"CODE",{});var hp=l(nn);pd=r(hp,"True"),hp.forEach(t),gd=r(T," or "),on=s(T,"EM",{});var pp=l(on);ud=r(pp,"1"),pp.forEach(t),bd=r(T,`, will create a nested run inside the current
run.
MLFLOW_RUN_ID (`),sn=s(T,"CODE",{});var gp=l(sn);_d=r(gp,"str"),gp.forEach(t),vd=r(T,", "),ln=s(T,"EM",{});var up=l(ln);Ed=r(up,"optional"),up.forEach(t),kd=r(T,`):
Allow to reattach to an existing run which can be usefull when resuming training from a checkpoint.
When MLFLOW_RUN_ID environment variable is set, start_run attempts to resume a run with the specified
run ID and other parameters are ignored.
MLFLOW_FLATTEN_PARAMS (`),cn=s(T,"CODE",{});var bp=l(cn);$d=r(bp,"str"),bp.forEach(t),Td=r(T,", "),dn=s(T,"EM",{});var _p=l(dn);Cd=r(_p,"optional"),_p.forEach(t),wd=r(T,`):
Whether to flatten the parameters dictionary before logging. Default to `),mn=s(T,"CODE",{});var vp=l(mn);yd=r(vp,"False"),vp.forEach(t),Ad=r(T,"."),T.forEach(t),ir.forEach(t),lr.forEach(t),lo=d(n),fe=s(n,"DIV",{class:!0});var Fo=l(fe);b(Mt.$$.fragment,Fo),Ld=d(Fo),he=s(Fo,"P",{});var cr=l(he);Dd=r(cr,"A "),Ha=s(cr,"A",{href:!0});var Ep=l(Ha);xd=r(Ep,"TrainerCallback"),Ep.forEach(t),Od=r(cr," that sends the logs to "),St=s(cr,"A",{href:!0,rel:!0});var kp=l(St);Md=r(kp,"AzureML"),kp.forEach(t),Sd=r(cr,"."),cr.forEach(t),Fo.forEach(t),io=d(n),pe=s(n,"DIV",{class:!0});var Wo=l(pe);b(It.$$.fragment,Wo),Id=d(Wo),Pt=s(Wo,"P",{});var No=l(Pt);Pd=r(No,"A "),Ja=s(No,"A",{href:!0});var $p=l(Ja);Fd=r($p,"TrainerCallback"),$p.forEach(t),Wd=r(No," that tracks the CO2 emission of training."),No.forEach(t),Wo.forEach(t),co=d(n),ge=s(n,"H2",{class:!0});var jo=l(ge);De=s(jo,"A",{id:!0,class:!0,href:!0});var Tp=l(De);fn=s(Tp,"SPAN",{});var Cp=l(fn);b(Ft.$$.fragment,Cp),Cp.forEach(t),Tp.forEach(t),Nd=d(jo),hn=s(jo,"SPAN",{});var wp=l(hn);jd=r(wp,"TrainerCallback"),wp.forEach(t),jo.forEach(t),mo=d(n),g=s(n,"DIV",{class:!0});var C=l(g);b(Wt.$$.fragment,C),zd=d(C),pn=s(C,"P",{});var yp=l(pn);Bd=r(yp,`A class for objects that will inspect the state of the training loop at some events and take some decisions. At
each of those events the following arguments are available:`),yp.forEach(t),Rd=d(C),Nt=s(C,"P",{});var zo=l(Nt);Vd=r(zo,"The "),gn=s(zo,"CODE",{});var Ap=l(gn);Ud=r(Ap,"control"),Ap.forEach(t),qd=r(zo,` object is the only one that can be changed by the callback, in which case the event that changes it
should return the modified version.`),zo.forEach(t),Gd=d(C),P=s(C,"P",{});var q=l(P);Hd=r(q,"The argument "),un=s(q,"CODE",{});var Lp=l(un);Jd=r(Lp,"args"),Lp.forEach(t),Yd=r(q,", "),bn=s(q,"CODE",{});var Dp=l(bn);Xd=r(Dp,"state"),Dp.forEach(t),Kd=r(q," and "),_n=s(q,"CODE",{});var xp=l(_n);Qd=r(xp,"control"),xp.forEach(t),Zd=r(q," are positionals for all events, all the others are grouped in "),vn=s(q,"CODE",{});var Op=l(vn);em=r(Op,"kwargs"),Op.forEach(t),tm=r(q,`.
You can unpack the ones you need in the signature of the event using them. As an example, see the code of the
simple `),En=s(q,"CODE",{});var Mp=l(En);am=r(Mp,"PrinterCallback"),Mp.forEach(t),rm=r(q,"."),q.forEach(t),nm=d(C),b(xe.$$.fragment,C),om=d(C),Oe=s(C,"DIV",{class:!0});var Bo=l(Oe);b(jt.$$.fragment,Bo),sm=d(Bo),kn=s(Bo,"P",{});var Sp=l(kn);lm=r(Sp,"Event called at the beginning of an epoch."),Sp.forEach(t),Bo.forEach(t),im=d(C),Me=s(C,"DIV",{class:!0});var Ro=l(Me);b(zt.$$.fragment,Ro),cm=d(Ro),$n=s(Ro,"P",{});var Ip=l($n);dm=r(Ip,"Event called at the end of an epoch."),Ip.forEach(t),Ro.forEach(t),mm=d(C),Se=s(C,"DIV",{class:!0});var Vo=l(Se);b(Bt.$$.fragment,Vo),fm=d(Vo),Tn=s(Vo,"P",{});var Pp=l(Tn);hm=r(Pp,"Event called after an evaluation phase."),Pp.forEach(t),Vo.forEach(t),pm=d(C),Ie=s(C,"DIV",{class:!0});var Uo=l(Ie);b(Rt.$$.fragment,Uo),gm=d(Uo),Vt=s(Uo,"P",{});var qo=l(Vt);um=r(qo,"Event called at the end of the initialization of the "),Ya=s(qo,"A",{href:!0});var Fp=l(Ya);bm=r(Fp,"Trainer"),Fp.forEach(t),_m=r(qo,"."),qo.forEach(t),Uo.forEach(t),vm=d(C),Pe=s(C,"DIV",{class:!0});var Go=l(Pe);b(Ut.$$.fragment,Go),Em=d(Go),Cn=s(Go,"P",{});var Wp=l(Cn);km=r(Wp,"Event called after logging the last logs."),Wp.forEach(t),Go.forEach(t),$m=d(C),Fe=s(C,"DIV",{class:!0});var Ho=l(Fe);b(qt.$$.fragment,Ho),Tm=d(Ho),wn=s(Ho,"P",{});var Np=l(wn);Cm=r(Np,"Event called after a successful prediction."),Np.forEach(t),Ho.forEach(t),wm=d(C),We=s(C,"DIV",{class:!0});var Jo=l(We);b(Gt.$$.fragment,Jo),ym=d(Jo),yn=s(Jo,"P",{});var jp=l(yn);Am=r(jp,"Event called after a prediction step."),jp.forEach(t),Jo.forEach(t),Lm=d(C),Ne=s(C,"DIV",{class:!0});var Yo=l(Ne);b(Ht.$$.fragment,Yo),Dm=d(Yo),An=s(Yo,"P",{});var zp=l(An);xm=r(zp,"Event called after a checkpoint save."),zp.forEach(t),Yo.forEach(t),Om=d(C),je=s(C,"DIV",{class:!0});var Xo=l(je);b(Jt.$$.fragment,Xo),Mm=d(Xo),Ln=s(Xo,"P",{});var Bp=l(Ln);Sm=r(Bp,`Event called at the beginning of a training step. If using gradient accumulation, one training step might take
several inputs.`),Bp.forEach(t),Xo.forEach(t),Im=d(C),ze=s(C,"DIV",{class:!0});var Ko=l(ze);b(Yt.$$.fragment,Ko),Pm=d(Ko),Dn=s(Ko,"P",{});var Rp=l(Dn);Fm=r(Rp,`Event called at the end of a training step. If using gradient accumulation, one training step might take
several inputs.`),Rp.forEach(t),Ko.forEach(t),Wm=d(C),Be=s(C,"DIV",{class:!0});var Qo=l(Be);b(Xt.$$.fragment,Qo),Nm=d(Qo),xn=s(Qo,"P",{});var Vp=l(xn);jm=r(Vp,"Event called at the end of an substep during gradient accumulation."),Vp.forEach(t),Qo.forEach(t),zm=d(C),Re=s(C,"DIV",{class:!0});var Zo=l(Re);b(Kt.$$.fragment,Zo),Bm=d(Zo),On=s(Zo,"P",{});var Up=l(On);Rm=r(Up,"Event called at the beginning of training."),Up.forEach(t),Zo.forEach(t),Vm=d(C),Ve=s(C,"DIV",{class:!0});var es=l(Ve);b(Qt.$$.fragment,es),Um=d(es),Mn=s(es,"P",{});var qp=l(Mn);qm=r(qp,"Event called at the end of training."),qp.forEach(t),es.forEach(t),C.forEach(t),fo=d(n),Ue=s(n,"P",{});var ts=l(Ue);Gm=r(ts,"Here is an example of how to register a custom callback with the PyTorch "),Xa=s(ts,"A",{href:!0});var Gp=l(Xa);Hm=r(Gp,"Trainer"),Gp.forEach(t),Jm=r(ts,":"),ts.forEach(t),ho=d(n),b(Zt.$$.fragment,n),po=d(n),qe=s(n,"P",{});var as=l(qe);Ym=r(as,"Another way to register a callback is to call "),Sn=s(as,"CODE",{});var Hp=l(Sn);Xm=r(Hp,"trainer.add_callback()"),Hp.forEach(t),Km=r(as," as follows:"),as.forEach(t),go=d(n),b(ea.$$.fragment,n),uo=d(n),ue=s(n,"H2",{class:!0});var rs=l(ue);Ge=s(rs,"A",{id:!0,class:!0,href:!0});var Jp=l(Ge);In=s(Jp,"SPAN",{});var Yp=l(In);b(ta.$$.fragment,Yp),Yp.forEach(t),Jp.forEach(t),Qm=d(rs),Pn=s(rs,"SPAN",{});var Xp=l(Pn);Zm=r(Xp,"TrainerState"),Xp.forEach(t),rs.forEach(t),bo=d(n),F=s(n,"DIV",{class:!0});var te=l(F);b(aa.$$.fragment,te),ef=d(te),be=s(te,"P",{});var dr=l(be);tf=r(dr,"A class containing the "),Ka=s(dr,"A",{href:!0});var Kp=l(Ka);af=r(Kp,"Trainer"),Kp.forEach(t),rf=r(dr,` inner state that will be saved along the model and optimizer when checkpointing
and passed to the `),Qa=s(dr,"A",{href:!0});var Qp=l(Qa);nf=r(Qp,"TrainerCallback"),Qp.forEach(t),of=r(dr,"."),dr.forEach(t),sf=d(te),b(He.$$.fragment,te),lf=d(te),Je=s(te,"DIV",{class:!0});var ns=l(Je);b(ra.$$.fragment,ns),cf=d(ns),na=s(ns,"P",{});var os=l(na);df=r(os,"Create an instance from the content of "),Fn=s(os,"CODE",{});var Zp=l(Fn);mf=r(Zp,"json_path"),Zp.forEach(t),ff=r(os,"."),os.forEach(t),ns.forEach(t),hf=d(te),Ye=s(te,"DIV",{class:!0});var ss=l(Ye);b(oa.$$.fragment,ss),pf=d(ss),sa=s(ss,"P",{});var ls=l(sa);gf=r(ls,"Save the content of this instance in JSON format inside "),Wn=s(ls,"CODE",{});var eg=l(Wn);uf=r(eg,"json_path"),eg.forEach(t),bf=r(ls,"."),ls.forEach(t),ss.forEach(t),te.forEach(t),_o=d(n),_e=s(n,"H2",{class:!0});var is=l(_e);Xe=s(is,"A",{id:!0,class:!0,href:!0});var tg=l(Xe);Nn=s(tg,"SPAN",{});var ag=l(Nn);b(la.$$.fragment,ag),ag.forEach(t),tg.forEach(t),_f=d(is),jn=s(is,"SPAN",{});var rg=l(jn);vf=r(rg,"TrainerControl"),rg.forEach(t),is.forEach(t),vo=d(n),ve=s(n,"DIV",{class:!0});var cs=l(ve);b(ia.$$.fragment,cs),Ef=d(cs),Ee=s(cs,"P",{});var mr=l(Ee);kf=r(mr,"A class that handles the "),Za=s(mr,"A",{href:!0});var ng=l(Za);$f=r(ng,"Trainer"),ng.forEach(t),Tf=r(mr," control flow. This class is used by the "),er=s(mr,"A",{href:!0});var og=l(er);Cf=r(og,"TrainerCallback"),og.forEach(t),wf=r(mr,` to activate some
switches in the training loop.`),mr.forEach(t),cs.forEach(t),this.h()},h(){i(A,"name","hf:doc:metadata"),i(A,"content",JSON.stringify(bg)),i(x,"id","callbacks"),i(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(x,"href","#callbacks"),i(D,"class","relative group"),i(ha,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(pa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerControl"),i(ga,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(ua,"href","trainer"),i(ba,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(va,"href","/docs/transformers/main/en/main_classes/callback#transformers.DefaultFlowCallback"),i(Ea,"href","/docs/transformers/main/en/main_classes/callback#transformers.PrinterCallback"),i(ka,"href","/docs/transformers/main/en/main_classes/callback#transformers.ProgressCallback"),i($a,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),i(Ca,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.TensorBoardCallback"),i(wa,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.WandbCallback"),i(at,"href","https://www.wandb.com/"),i(at,"rel","nofollow"),i(ya,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.CometCallback"),i(rt,"href","https://www.comet.ml/site/"),i(rt,"rel","nofollow"),i(Aa,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.MLflowCallback"),i(nt,"href","https://www.mlflow.org/"),i(nt,"rel","nofollow"),i(La,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.AzureMLCallback"),i(ot,"href","https://pypi.org/project/azureml-sdk/"),i(ot,"rel","nofollow"),i(Da,"href","/docs/transformers/main/en/main_classes/callback#transformers.integrations.CodeCarbonCallback"),i(st,"href","https://pypi.org/project/codecarbon/"),i(st,"rel","nofollow"),i(xa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(Oa,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),i(Ma,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(Sa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerState"),i(Ia,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerControl"),i(Ae,"id","transformers.integrations.CometCallback"),i(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ae,"href","#transformers.integrations.CometCallback"),i(ne,"class","relative group"),i(Pa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(Fa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(ct,"href","https://www.comet.ml/site/"),i(ct,"rel","nofollow"),i(ft,"href","https://www.comet.ml/docs/python-sdk/advanced/#comet-configuration-variables"),i(ft,"rel","nofollow"),i(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Wa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Na,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ja,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(za,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(Ba,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),i(Ra,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerState"),i(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Va,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i($t,"href","https://www.tensorflow.org/tensorboard"),i($t,"rel","nofollow"),i(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ua,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(Ct,"href","https://www.wandb.com/"),i(Ct,"rel","nofollow"),i(Lt,"href","https://docs.wandb.ai/integrations/huggingface"),i(Lt,"rel","nofollow"),i(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(xt,"href","https://www.mlflow.org/"),i(xt,"rel","nofollow"),i(Ga,"href","/docs/transformers/main/en/main_classes/trainer#transformers.TrainingArguments"),i(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ha,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(St,"href","https://pypi.org/project/azureml-sdk/"),i(St,"rel","nofollow"),i(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ja,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(De,"id","transformers.TrainerCallback"),i(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(De,"href","#transformers.TrainerCallback"),i(ge,"class","relative group"),i(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ya,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Xa,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(Ge,"id","transformers.TrainerState"),i(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ge,"href","#transformers.TrainerState"),i(ue,"class","relative group"),i(Ka,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(Qa,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Xe,"id","transformers.TrainerControl"),i(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Xe,"href","#transformers.TrainerControl"),i(_e,"class","relative group"),i(Za,"href","/docs/transformers/main/en/main_classes/trainer#transformers.Trainer"),i(er,"href","/docs/transformers/main/en/main_classes/callback#transformers.TrainerCallback"),i(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(n,m){e(document.head,A),f(n,z,m),f(n,D,m),e(D,x),e(x,W),_(y,W,null),e(D,N),e(D,ae),e(ae,re),f(n,j,m),f(n,G,m),e(G,fa),e(G,ha),e(ha,ds),e(G,ms),f(n,Hn,m),f(n,B,m),e(B,fs),e(B,pa),e(pa,hs),e(B,ps),e(B,ga),e(ga,gs),e(B,us),e(B,ua),e(ua,bs),e(B,_s),f(n,Jn,m),f(n,ke,m),e(ke,vs),e(ke,ba),e(ba,Es),e(ke,ks),f(n,Yn,m),f(n,O,m),e(O,_a),e(_a,va),e(va,$s),e(_a,Ts),e(O,Cs),e(O,Z),e(Z,Ea),e(Ea,ws),e(Z,ys),e(Z,ka),e(ka,As),e(Z,Ls),e(Z,$a),e($a,Ds),e(Z,xs),e(O,Os),e(O,Ta),e(Ta,Ca),e(Ca,Ms),e(Ta,Ss),e(O,Is),e(O,$e),e($e,wa),e(wa,Ps),e($e,Fs),e($e,at),e(at,Ws),e($e,Ns),e(O,js),e(O,Te),e(Te,ya),e(ya,zs),e(Te,Bs),e(Te,rt),e(rt,Rs),e(Te,Vs),e(O,Us),e(O,Ce),e(Ce,Aa),e(Aa,qs),e(Ce,Gs),e(Ce,nt),e(nt,Hs),e(Ce,Js),e(O,Ys),e(O,we),e(we,La),e(La,Xs),e(we,Ks),e(we,ot),e(ot,Qs),e(we,Zs),e(O,el),e(O,ye),e(ye,Da),e(Da,tl),e(ye,al),e(ye,st),e(st,rl),e(ye,nl),f(n,Xn,m),f(n,S,m),e(S,ol),e(S,xa),e(xa,sl),e(S,ll),e(S,Oa),e(Oa,il),e(S,cl),e(S,Ma),e(Ma,dl),e(S,ml),e(S,Sa),e(Sa,fl),e(S,hl),e(S,Ia),e(Ia,pl),e(S,gl),f(n,Kn,m),f(n,ne,m),e(ne,Ae),e(Ae,fr),_(lt,fr,null),e(ne,ul),e(ne,hr),e(hr,bl),f(n,Qn,m),f(n,Le,m),e(Le,_l),e(Le,Pa),e(Pa,vl),e(Le,El),f(n,Zn,m),f(n,H,m),_(it,H,null),e(H,kl),e(H,oe),e(oe,$l),e(oe,Fa),e(Fa,Tl),e(oe,Cl),e(oe,ct),e(ct,wl),e(oe,yl),e(H,Al),e(H,R),_(dt,R,null),e(R,Ll),e(R,pr),e(pr,Dl),e(R,xl),e(R,L),e(L,Ol),e(L,gr),e(gr,Ml),e(L,Sl),e(L,ur),e(ur,Il),e(L,Pl),e(L,br),e(br,Fl),e(L,Wl),e(L,_r),e(_r,Nl),e(L,jl),e(L,vr),e(vr,zl),e(L,Bl),e(L,Er),e(Er,Rl),e(L,Vl),e(L,kr),e(kr,Ul),e(L,ql),e(L,$r),e($r,Gl),e(L,Hl),e(L,Tr),e(Tr,Jl),e(L,Yl),e(R,Xl),e(R,mt),e(mt,Kl),e(mt,ft),e(ft,Ql),e(mt,Zl),f(n,eo,m),f(n,se,m),_(ht,se,null),e(se,ei),e(se,pt),e(pt,ti),e(pt,Wa),e(Wa,ai),e(pt,ri),f(n,to,m),f(n,le,m),_(gt,le,null),e(le,ni),e(le,ut),e(ut,oi),e(ut,Na),e(Na,si),e(ut,li),f(n,ao,m),f(n,ie,m),_(bt,ie,null),e(ie,ii),e(ie,_t),e(_t,ci),e(_t,ja),e(ja,di),e(_t,mi),f(n,ro,m),f(n,J,m),_(vt,J,null),e(J,fi),e(J,Et),e(Et,hi),e(Et,za),e(za,pi),e(Et,gi),e(J,ui),e(J,Y),e(Y,bi),e(Y,Ba),e(Ba,_i),e(Y,vi),e(Y,Cr),e(Cr,Ei),e(Y,ki),e(Y,Ra),e(Ra,$i),e(Y,Ti),f(n,no,m),f(n,ce,m),_(kt,ce,null),e(ce,Ci),e(ce,de),e(de,wi),e(de,Va),e(Va,yi),e(de,Ai),e(de,$t),e($t,Li),e(de,Di),f(n,oo,m),f(n,X,m),_(Tt,X,null),e(X,xi),e(X,me),e(me,Oi),e(me,Ua),e(Ua,Mi),e(me,Si),e(me,Ct),e(Ct,Ii),e(me,Pi),e(X,Fi),e(X,V),_(wt,V,null),e(V,Wi),e(V,yt),e(yt,Ni),e(yt,wr),e(wr,ji),e(yt,zi),e(V,Bi),e(V,At),e(At,Ri),e(At,Lt),e(Lt,Vi),e(At,Ui),e(V,qi),e(V,h),e(h,Gi),e(h,yr),e(yr,Hi),e(h,Ji),e(h,Ar),e(Ar,Yi),e(h,Xi),e(h,Lr),e(Lr,Ki),e(h,Qi),e(h,Dr),e(Dr,Zi),e(h,ec),e(h,xr),e(xr,tc),e(h,ac),e(h,Or),e(Or,rc),e(h,nc),e(h,Mr),e(Mr,oc),e(h,sc),e(h,Sr),e(Sr,lc),e(h,ic),e(h,Ir),e(Ir,cc),e(h,dc),e(h,Pr),e(Pr,mc),e(h,fc),e(h,Fr),e(Fr,hc),e(h,pc),e(h,Wr),e(Wr,gc),e(h,uc),e(h,Nr),e(Nr,bc),e(h,_c),e(h,jr),e(jr,vc),e(h,Ec),e(h,zr),e(zr,kc),e(h,$c),e(h,Br),e(Br,Tc),e(h,Cc),e(h,Rr),e(Rr,wc),e(h,yc),e(h,Vr),e(Vr,Ac),e(h,Lc),e(h,Ur),e(Ur,Dc),e(h,xc),f(n,so,m),f(n,K,m),_(Dt,K,null),e(K,Oc),e(K,Q),e(Q,Mc),e(Q,qa),e(qa,Sc),e(Q,Ic),e(Q,xt),e(xt,Pc),e(Q,Fc),e(Q,qr),e(qr,Wc),e(Q,Nc),e(K,jc),e(K,ee),_(Ot,ee,null),e(ee,zc),e(ee,Gr),e(Gr,Bc),e(ee,Rc),e(ee,p),e(p,Vc),e(p,Hr),e(Hr,Uc),e(p,qc),e(p,Jr),e(Jr,Gc),e(p,Hc),e(p,Yr),e(Yr,Jc),e(p,Yc),e(p,Xr),e(Xr,Xc),e(p,Kc),e(p,Ga),e(Ga,Qc),e(p,Zc),e(p,Kr),e(Kr,ed),e(p,td),e(p,Qr),e(Qr,ad),e(p,rd),e(p,Zr),e(Zr,nd),e(p,od),e(p,en),e(en,sd),e(p,ld),e(p,tn),e(tn,id),e(p,cd),e(p,an),e(an,dd),e(p,md),e(p,rn),e(rn,fd),e(p,hd),e(p,nn),e(nn,pd),e(p,gd),e(p,on),e(on,ud),e(p,bd),e(p,sn),e(sn,_d),e(p,vd),e(p,ln),e(ln,Ed),e(p,kd),e(p,cn),e(cn,$d),e(p,Td),e(p,dn),e(dn,Cd),e(p,wd),e(p,mn),e(mn,yd),e(p,Ad),f(n,lo,m),f(n,fe,m),_(Mt,fe,null),e(fe,Ld),e(fe,he),e(he,Dd),e(he,Ha),e(Ha,xd),e(he,Od),e(he,St),e(St,Md),e(he,Sd),f(n,io,m),f(n,pe,m),_(It,pe,null),e(pe,Id),e(pe,Pt),e(Pt,Pd),e(Pt,Ja),e(Ja,Fd),e(Pt,Wd),f(n,co,m),f(n,ge,m),e(ge,De),e(De,fn),_(Ft,fn,null),e(ge,Nd),e(ge,hn),e(hn,jd),f(n,mo,m),f(n,g,m),_(Wt,g,null),e(g,zd),e(g,pn),e(pn,Bd),e(g,Rd),e(g,Nt),e(Nt,Vd),e(Nt,gn),e(gn,Ud),e(Nt,qd),e(g,Gd),e(g,P),e(P,Hd),e(P,un),e(un,Jd),e(P,Yd),e(P,bn),e(bn,Xd),e(P,Kd),e(P,_n),e(_n,Qd),e(P,Zd),e(P,vn),e(vn,em),e(P,tm),e(P,En),e(En,am),e(P,rm),e(g,nm),_(xe,g,null),e(g,om),e(g,Oe),_(jt,Oe,null),e(Oe,sm),e(Oe,kn),e(kn,lm),e(g,im),e(g,Me),_(zt,Me,null),e(Me,cm),e(Me,$n),e($n,dm),e(g,mm),e(g,Se),_(Bt,Se,null),e(Se,fm),e(Se,Tn),e(Tn,hm),e(g,pm),e(g,Ie),_(Rt,Ie,null),e(Ie,gm),e(Ie,Vt),e(Vt,um),e(Vt,Ya),e(Ya,bm),e(Vt,_m),e(g,vm),e(g,Pe),_(Ut,Pe,null),e(Pe,Em),e(Pe,Cn),e(Cn,km),e(g,$m),e(g,Fe),_(qt,Fe,null),e(Fe,Tm),e(Fe,wn),e(wn,Cm),e(g,wm),e(g,We),_(Gt,We,null),e(We,ym),e(We,yn),e(yn,Am),e(g,Lm),e(g,Ne),_(Ht,Ne,null),e(Ne,Dm),e(Ne,An),e(An,xm),e(g,Om),e(g,je),_(Jt,je,null),e(je,Mm),e(je,Ln),e(Ln,Sm),e(g,Im),e(g,ze),_(Yt,ze,null),e(ze,Pm),e(ze,Dn),e(Dn,Fm),e(g,Wm),e(g,Be),_(Xt,Be,null),e(Be,Nm),e(Be,xn),e(xn,jm),e(g,zm),e(g,Re),_(Kt,Re,null),e(Re,Bm),e(Re,On),e(On,Rm),e(g,Vm),e(g,Ve),_(Qt,Ve,null),e(Ve,Um),e(Ve,Mn),e(Mn,qm),f(n,fo,m),f(n,Ue,m),e(Ue,Gm),e(Ue,Xa),e(Xa,Hm),e(Ue,Jm),f(n,ho,m),_(Zt,n,m),f(n,po,m),f(n,qe,m),e(qe,Ym),e(qe,Sn),e(Sn,Xm),e(qe,Km),f(n,go,m),_(ea,n,m),f(n,uo,m),f(n,ue,m),e(ue,Ge),e(Ge,In),_(ta,In,null),e(ue,Qm),e(ue,Pn),e(Pn,Zm),f(n,bo,m),f(n,F,m),_(aa,F,null),e(F,ef),e(F,be),e(be,tf),e(be,Ka),e(Ka,af),e(be,rf),e(be,Qa),e(Qa,nf),e(be,of),e(F,sf),_(He,F,null),e(F,lf),e(F,Je),_(ra,Je,null),e(Je,cf),e(Je,na),e(na,df),e(na,Fn),e(Fn,mf),e(na,ff),e(F,hf),e(F,Ye),_(oa,Ye,null),e(Ye,pf),e(Ye,sa),e(sa,gf),e(sa,Wn),e(Wn,uf),e(sa,bf),f(n,_o,m),f(n,_e,m),e(_e,Xe),e(Xe,Nn),_(la,Nn,null),e(_e,_f),e(_e,jn),e(jn,vf),f(n,vo,m),f(n,ve,m),_(ia,ve,null),e(ve,Ef),e(ve,Ee),e(Ee,kf),e(Ee,Za),e(Za,$f),e(Ee,Tf),e(Ee,er),e(er,Cf),e(Ee,wf),Eo=!0},p(n,[m]){const ca={};m&2&&(ca.$$scope={dirty:m,ctx:n}),xe.$set(ca);const zn={};m&2&&(zn.$$scope={dirty:m,ctx:n}),He.$set(zn)},i(n){Eo||(v(y.$$.fragment,n),v(lt.$$.fragment,n),v(it.$$.fragment,n),v(dt.$$.fragment,n),v(ht.$$.fragment,n),v(gt.$$.fragment,n),v(bt.$$.fragment,n),v(vt.$$.fragment,n),v(kt.$$.fragment,n),v(Tt.$$.fragment,n),v(wt.$$.fragment,n),v(Dt.$$.fragment,n),v(Ot.$$.fragment,n),v(Mt.$$.fragment,n),v(It.$$.fragment,n),v(Ft.$$.fragment,n),v(Wt.$$.fragment,n),v(xe.$$.fragment,n),v(jt.$$.fragment,n),v(zt.$$.fragment,n),v(Bt.$$.fragment,n),v(Rt.$$.fragment,n),v(Ut.$$.fragment,n),v(qt.$$.fragment,n),v(Gt.$$.fragment,n),v(Ht.$$.fragment,n),v(Jt.$$.fragment,n),v(Yt.$$.fragment,n),v(Xt.$$.fragment,n),v(Kt.$$.fragment,n),v(Qt.$$.fragment,n),v(Zt.$$.fragment,n),v(ea.$$.fragment,n),v(ta.$$.fragment,n),v(aa.$$.fragment,n),v(He.$$.fragment,n),v(ra.$$.fragment,n),v(oa.$$.fragment,n),v(la.$$.fragment,n),v(ia.$$.fragment,n),Eo=!0)},o(n){E(y.$$.fragment,n),E(lt.$$.fragment,n),E(it.$$.fragment,n),E(dt.$$.fragment,n),E(ht.$$.fragment,n),E(gt.$$.fragment,n),E(bt.$$.fragment,n),E(vt.$$.fragment,n),E(kt.$$.fragment,n),E(Tt.$$.fragment,n),E(wt.$$.fragment,n),E(Dt.$$.fragment,n),E(Ot.$$.fragment,n),E(Mt.$$.fragment,n),E(It.$$.fragment,n),E(Ft.$$.fragment,n),E(Wt.$$.fragment,n),E(xe.$$.fragment,n),E(jt.$$.fragment,n),E(zt.$$.fragment,n),E(Bt.$$.fragment,n),E(Rt.$$.fragment,n),E(Ut.$$.fragment,n),E(qt.$$.fragment,n),E(Gt.$$.fragment,n),E(Ht.$$.fragment,n),E(Jt.$$.fragment,n),E(Yt.$$.fragment,n),E(Xt.$$.fragment,n),E(Kt.$$.fragment,n),E(Qt.$$.fragment,n),E(Zt.$$.fragment,n),E(ea.$$.fragment,n),E(ta.$$.fragment,n),E(aa.$$.fragment,n),E(He.$$.fragment,n),E(ra.$$.fragment,n),E(oa.$$.fragment,n),E(la.$$.fragment,n),E(ia.$$.fragment,n),Eo=!1},d(n){t(A),n&&t(z),n&&t(D),k(y),n&&t(j),n&&t(G),n&&t(Hn),n&&t(B),n&&t(Jn),n&&t(ke),n&&t(Yn),n&&t(O),n&&t(Xn),n&&t(S),n&&t(Kn),n&&t(ne),k(lt),n&&t(Qn),n&&t(Le),n&&t(Zn),n&&t(H),k(it),k(dt),n&&t(eo),n&&t(se),k(ht),n&&t(to),n&&t(le),k(gt),n&&t(ao),n&&t(ie),k(bt),n&&t(ro),n&&t(J),k(vt),n&&t(no),n&&t(ce),k(kt),n&&t(oo),n&&t(X),k(Tt),k(wt),n&&t(so),n&&t(K),k(Dt),k(Ot),n&&t(lo),n&&t(fe),k(Mt),n&&t(io),n&&t(pe),k(It),n&&t(co),n&&t(ge),k(Ft),n&&t(mo),n&&t(g),k(Wt),k(xe),k(jt),k(zt),k(Bt),k(Rt),k(Ut),k(qt),k(Gt),k(Ht),k(Jt),k(Yt),k(Xt),k(Kt),k(Qt),n&&t(fo),n&&t(Ue),n&&t(ho),k(Zt,n),n&&t(po),n&&t(qe),n&&t(go),k(ea,n),n&&t(uo),n&&t(ue),k(ta),n&&t(bo),n&&t(F),k(aa),k(He),k(ra),k(oa),n&&t(_o),n&&t(_e),k(la),n&&t(vo),n&&t(ve),k(ia)}}}const bg={local:"callbacks",sections:[{local:"transformers.integrations.CometCallback",title:"Available Callbacks"},{local:"transformers.TrainerCallback",title:"TrainerCallback"},{local:"transformers.TrainerState",title:"TrainerState"},{local:"transformers.TrainerControl",title:"TrainerControl"}],title:"Callbacks"};function _g(ma){return dg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wg extends sg{constructor(A){super();lg(this,A,_g,ug,ig,{})}}export{wg as default,bg as metadata};
