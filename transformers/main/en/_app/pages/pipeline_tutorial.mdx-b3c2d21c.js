import{S as $n,i as xn,s as yn,e as l,k as h,w as d,t,M as wn,c as r,d as a,m as c,a as o,x as g,h as n,b as f,N as jn,F as s,g as p,y as v,q as _,o as k,B as $}from"../chunks/vendor-4833417e.js";import{T as En}from"../chunks/Tip-fffd6df1.js";import{I as is}from"../chunks/IconCopyLink-4b81c553.js";import{C as F}from"../chunks/CodeBlock-6a3d1b46.js";import"../chunks/CopyButton-dacfbfaf.js";function bn(Be){let m,P,u,x,z;return{c(){m=l("p"),P=t("Take a look at the "),u=l("a"),x=t("pipeline()"),z=t(" documentation for a complete list of supported taska."),this.h()},l(j){m=r(j,"P",{});var T=o(m);P=n(T,"Take a look at the "),u=r(T,"A",{href:!0});var H=o(u);x=n(H,"pipeline()"),H.forEach(a),z=n(T," documentation for a complete list of supported taska."),T.forEach(a),this.h()},h(){f(u,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline")},m(j,T){p(j,m,T),s(m,P),s(m,u),s(u,x),s(m,z)},d(j){j&&a(m)}}}function An(Be){let m,P,u,x,z,j,T,H,Zs,os,E,ea,we,sa,aa,Z,ta,na,je,la,ra,ps,q,ee,ia,Ee,oa,pa,fa,Ge,ha,ca,se,ma,be,ua,da,fs,I,hs,C,O,Qe,ae,ga,Xe,va,cs,b,_a,Ae,ka,$a,Pe,xa,ya,Te,wa,ja,ms,qe,te,Ea,Me,ba,Aa,us,ne,ds,le,re,Pa,Se,Ta,qa,gs,ie,vs,Fe,Ma,_s,oe,ks,y,Sa,ze,Fa,za,Ye,Ca,La,Ce,Da,Na,Ze,Ha,Ia,$s,pe,xs,L,R,es,fe,Oa,ss,Ra,ys,w,Ua,Le,Wa,Ja,he,Ka,Va,as,Ba,Ga,De,Qa,Xa,ws,ce,js,U,Ya,Ne,Za,et,Es,me,bs,W,st,He,at,tt,As,ue,Ps,D,J,ts,de,nt,ns,lt,Ts,K,rt,Ie,it,ot,qs,A,pt,ge,ft,ht,ve,ct,mt,Oe,ut,dt,Ms,_e,Ss,V,gt,Re,vt,_t,Fs,ke,zs,N,B,ls,$e,kt,rs,$t,Cs,G,xt,Ue,yt,wt,Ls,We,jt,Ds,Je,Ke,Et,Ns,xe,Hs;return j=new is({}),I=new En({props:{$$slots:{default:[bn]},$$scope:{ctx:Be}}}),ae=new is({}),ne=new F({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>)`}}),ie=new F({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Iron-priests at the door to the east, and thirteen for the Lord Kings at the end of the mountain&#x27;</span>}]`}}),oe=new F({props:{code:`generator(
    [
        "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
        "Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne",
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&quot;Nine for Mortal Men, doomed to die, One for the Dark Lord on his dark throne&quot;</span>,
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),pe=new F({props:{code:`generator(
    "Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone",
    num_return_sequences=2,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>,
<span class="hljs-meta">... </span>    num_return_sequences=<span class="hljs-number">2</span>,
<span class="hljs-meta">... </span>)`}}),fe=new is({}),ce=new F({props:{code:`from transformers import AutoTokenizer, AutoModelForCausalLM

tokenizer = AutoTokenizer.from_pretrained("distilgpt2")
model = AutoModelForCausalLM.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),me=new F({props:{code:`from transformers import pipeline

generator = pipeline(task="text-generation", model=model, tokenizer=tokenizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>generator = pipeline(task=<span class="hljs-string">&quot;text-generation&quot;</span>, model=model, tokenizer=tokenizer)`}}),ue=new F({props:{code:'generator("Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generator(<span class="hljs-string">&quot;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone&quot;</span>)
[{<span class="hljs-string">&#x27;generated_text&#x27;</span>: <span class="hljs-string">&#x27;Three Rings for the Elven-kings under the sky, Seven for the Dwarf-lords in their halls of stone, Seven for the Dragon-lords (for them to rule in a world ruled by their rulers, and all who live within the realm&#x27;</span>}]`}}),de=new is({}),_e=new F({props:{code:`from transformers import pipeline

audio_classifier = pipeline(
    task="audio-classification", model="ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier = pipeline(
<span class="hljs-meta">... </span>    task=<span class="hljs-string">&quot;audio-classification&quot;</span>, model=<span class="hljs-string">&quot;ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition&quot;</span>
<span class="hljs-meta">... </span>)`}}),ke=new F({props:{code:'audio_classifier("jfk_moon_speech.wav")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>audio_classifier(<span class="hljs-string">&quot;jfk_moon_speech.wav&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;calm&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13856211304664612</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;disgust&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.13148026168346405</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;happy&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12635163962841034</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;angry&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12439591437578201</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;fearful&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.12404385954141617</span>}]`}}),$e=new is({}),xe=new F({props:{code:`from transformers import pipeline

vision_classifier = pipeline(task="image-classification")
vision_classifier(
    images="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg"
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier = pipeline(task=<span class="hljs-string">&quot;image-classification&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>vision_classifier(
<span class="hljs-meta">... </span>    images=<span class="hljs-string">&quot;https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg&quot;</span>
<span class="hljs-meta">... </span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;lynx, catamount&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.4403027892112732</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;cougar, puma, catamount, mountain lion, painter, panther, Felis concolor&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.03433405980467796</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;snow leopard, ounce, Panthera uncia&#x27;</span>,
  <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.032148055732250214</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;Egyptian cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.02353910356760025</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;tiger cat&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.023034192621707916</span>}]`}}),{c(){m=l("meta"),P=h(),u=l("h1"),x=l("a"),z=l("span"),d(j.$$.fragment),T=h(),H=l("span"),Zs=t("Pipelines for inference"),os=h(),E=l("p"),ea=t("The "),we=l("a"),sa=t("pipeline()"),aa=t(" makes it simple to use any model from the "),Z=l("a"),ta=t("Model Hub"),na=t(" for inference on a variety of tasks such as text generation, image segmentation and audio classification. Even if you don\u2019t have experience with a specific modality or understand the code powering the models, you can still use them with the "),je=l("a"),la=t("pipeline()"),ra=t("! This tutorial will teach you to:"),ps=h(),q=l("ul"),ee=l("li"),ia=t("Use a "),Ee=l("a"),oa=t("pipeline()"),pa=t(" for inference."),fa=h(),Ge=l("li"),ha=t("Use a specific tokenizer or model."),ca=h(),se=l("li"),ma=t("Use a "),be=l("a"),ua=t("pipeline()"),da=t(" for audio and vision tasks."),fs=h(),d(I.$$.fragment),hs=h(),C=l("h2"),O=l("a"),Qe=l("span"),d(ae.$$.fragment),ga=h(),Xe=l("span"),va=t("Pipeline usage"),cs=h(),b=l("p"),_a=t("While each task has an associated "),Ae=l("a"),ka=t("pipeline()"),$a=t(", it is simpler to use the general "),Pe=l("a"),xa=t("pipeline()"),ya=t(" abstraction which contains all the specific task pipelines. The "),Te=l("a"),wa=t("pipeline()"),ja=t(" automatically loads a default model and tokenizer capable of inference for your task."),ms=h(),qe=l("ol"),te=l("li"),Ea=t("Start by creating a "),Me=l("a"),ba=t("pipeline()"),Aa=t(" and specify an inference task:"),us=h(),d(ne.$$.fragment),ds=h(),le=l("ol"),re=l("li"),Pa=t("Pass your input text to the "),Se=l("a"),Ta=t("pipeline()"),qa=t(":"),gs=h(),d(ie.$$.fragment),vs=h(),Fe=l("p"),Ma=t("If you have more than one input, pass your input as a list:"),_s=h(),d(oe.$$.fragment),ks=h(),y=l("p"),Sa=t("Any additional parameters for your task can also be included in the "),ze=l("a"),Fa=t("pipeline()"),za=t(". The "),Ye=l("code"),Ca=t("text-generation"),La=t(" task has a "),Ce=l("a"),Da=t("generate()"),Na=t(" method with several parameters for controlling the output. For example, if you want to generate more than one output, set the "),Ze=l("code"),Ha=t("num_return_sequences"),Ia=t(" parameter:"),$s=h(),d(pe.$$.fragment),xs=h(),L=l("h3"),R=l("a"),es=l("span"),d(fe.$$.fragment),Oa=h(),ss=l("span"),Ra=t("Choose a model and tokenizer"),ys=h(),w=l("p"),Ua=t("The "),Le=l("a"),Wa=t("pipeline()"),Ja=t(" accepts any model from the "),he=l("a"),Ka=t("Model Hub"),Va=t(". There are tags on the Model Hub that allow you to filter for a model you\u2019d like to use for your task. Once you\u2019ve picked an appropriate model, load it with the corresponding "),as=l("code"),Ba=t("AutoModelFor"),Ga=t(" and [`AutoTokenizer\u2019] class. For example, load the "),De=l("a"),Qa=t("AutoModelForCausalLM"),Xa=t(" class for a causal language modeling task:"),ws=h(),d(ce.$$.fragment),js=h(),U=l("p"),Ya=t("Create a "),Ne=l("a"),Za=t("pipeline()"),et=t(" for your task, and specify the model and tokenizer you\u2019ve loaded:"),Es=h(),d(me.$$.fragment),bs=h(),W=l("p"),st=t("Pass your input text to the "),He=l("a"),at=t("pipeline()"),tt=t(" to generate some text:"),As=h(),d(ue.$$.fragment),Ps=h(),D=l("h2"),J=l("a"),ts=l("span"),d(de.$$.fragment),nt=h(),ns=l("span"),lt=t("Audio pipeline"),Ts=h(),K=l("p"),rt=t("The flexibility of the "),Ie=l("a"),it=t("pipeline()"),ot=t(" means it can also be extended to audio tasks."),qs=h(),A=l("p"),pt=t("For example, let\u2019s classify the emotion from a short clip of John F. Kennedy\u2019s famous "),ge=l("a"),ft=t("\u201CWe choose to go to the Moon\u201D"),ht=t(" speech. Find an "),ve=l("a"),ct=t("audio classification"),mt=t(" model on the Model Hub for emotion recognition and load it in the "),Oe=l("a"),ut=t("pipeline()"),dt=t(":"),Ms=h(),d(_e.$$.fragment),Ss=h(),V=l("p"),gt=t("Pass the audio file to the "),Re=l("a"),vt=t("pipeline()"),_t=t(":"),Fs=h(),d(ke.$$.fragment),zs=h(),N=l("h2"),B=l("a"),ls=l("span"),d($e.$$.fragment),kt=h(),rs=l("span"),$t=t("Vision pipeline"),Cs=h(),G=l("p"),xt=t("Finally, using a "),Ue=l("a"),yt=t("pipeline()"),wt=t(" for vision tasks is practically identical."),Ls=h(),We=l("p"),jt=t("Specify your vision task and pass your image to the classifier. The imaage can be a link or a local path to the image. For example, what species of cat is shown below?"),Ds=h(),Je=l("p"),Ke=l("img"),Ns=h(),d(xe.$$.fragment),this.h()},l(e){const i=wn('[data-svelte="svelte-1phssyn"]',document.head);m=r(i,"META",{name:!0,content:!0}),i.forEach(a),P=c(e),u=r(e,"H1",{class:!0});var ye=o(u);x=r(ye,"A",{id:!0,class:!0,href:!0});var bt=o(x);z=r(bt,"SPAN",{});var At=o(z);g(j.$$.fragment,At),At.forEach(a),bt.forEach(a),T=c(ye),H=r(ye,"SPAN",{});var Pt=o(H);Zs=n(Pt,"Pipelines for inference"),Pt.forEach(a),ye.forEach(a),os=c(e),E=r(e,"P",{});var Q=o(E);ea=n(Q,"The "),we=r(Q,"A",{href:!0});var Tt=o(we);sa=n(Tt,"pipeline()"),Tt.forEach(a),aa=n(Q," makes it simple to use any model from the "),Z=r(Q,"A",{href:!0,rel:!0});var qt=o(Z);ta=n(qt,"Model Hub"),qt.forEach(a),na=n(Q," for inference on a variety of tasks such as text generation, image segmentation and audio classification. Even if you don\u2019t have experience with a specific modality or understand the code powering the models, you can still use them with the "),je=r(Q,"A",{href:!0});var Mt=o(je);la=n(Mt,"pipeline()"),Mt.forEach(a),ra=n(Q,"! This tutorial will teach you to:"),Q.forEach(a),ps=c(e),q=r(e,"UL",{});var Ve=o(q);ee=r(Ve,"LI",{});var Is=o(ee);ia=n(Is,"Use a "),Ee=r(Is,"A",{href:!0});var St=o(Ee);oa=n(St,"pipeline()"),St.forEach(a),pa=n(Is," for inference."),Is.forEach(a),fa=c(Ve),Ge=r(Ve,"LI",{});var Ft=o(Ge);ha=n(Ft,"Use a specific tokenizer or model."),Ft.forEach(a),ca=c(Ve),se=r(Ve,"LI",{});var Os=o(se);ma=n(Os,"Use a "),be=r(Os,"A",{href:!0});var zt=o(be);ua=n(zt,"pipeline()"),zt.forEach(a),da=n(Os," for audio and vision tasks."),Os.forEach(a),Ve.forEach(a),fs=c(e),g(I.$$.fragment,e),hs=c(e),C=r(e,"H2",{class:!0});var Rs=o(C);O=r(Rs,"A",{id:!0,class:!0,href:!0});var Ct=o(O);Qe=r(Ct,"SPAN",{});var Lt=o(Qe);g(ae.$$.fragment,Lt),Lt.forEach(a),Ct.forEach(a),ga=c(Rs),Xe=r(Rs,"SPAN",{});var Dt=o(Xe);va=n(Dt,"Pipeline usage"),Dt.forEach(a),Rs.forEach(a),cs=c(e),b=r(e,"P",{});var X=o(b);_a=n(X,"While each task has an associated "),Ae=r(X,"A",{href:!0});var Nt=o(Ae);ka=n(Nt,"pipeline()"),Nt.forEach(a),$a=n(X,", it is simpler to use the general "),Pe=r(X,"A",{href:!0});var Ht=o(Pe);xa=n(Ht,"pipeline()"),Ht.forEach(a),ya=n(X," abstraction which contains all the specific task pipelines. The "),Te=r(X,"A",{href:!0});var It=o(Te);wa=n(It,"pipeline()"),It.forEach(a),ja=n(X," automatically loads a default model and tokenizer capable of inference for your task."),X.forEach(a),ms=c(e),qe=r(e,"OL",{});var Ot=o(qe);te=r(Ot,"LI",{});var Us=o(te);Ea=n(Us,"Start by creating a "),Me=r(Us,"A",{href:!0});var Rt=o(Me);ba=n(Rt,"pipeline()"),Rt.forEach(a),Aa=n(Us," and specify an inference task:"),Us.forEach(a),Ot.forEach(a),us=c(e),g(ne.$$.fragment,e),ds=c(e),le=r(e,"OL",{start:!0});var Ut=o(le);re=r(Ut,"LI",{});var Ws=o(re);Pa=n(Ws,"Pass your input text to the "),Se=r(Ws,"A",{href:!0});var Wt=o(Se);Ta=n(Wt,"pipeline()"),Wt.forEach(a),qa=n(Ws,":"),Ws.forEach(a),Ut.forEach(a),gs=c(e),g(ie.$$.fragment,e),vs=c(e),Fe=r(e,"P",{});var Jt=o(Fe);Ma=n(Jt,"If you have more than one input, pass your input as a list:"),Jt.forEach(a),_s=c(e),g(oe.$$.fragment,e),ks=c(e),y=r(e,"P",{});var M=o(y);Sa=n(M,"Any additional parameters for your task can also be included in the "),ze=r(M,"A",{href:!0});var Kt=o(ze);Fa=n(Kt,"pipeline()"),Kt.forEach(a),za=n(M,". The "),Ye=r(M,"CODE",{});var Vt=o(Ye);Ca=n(Vt,"text-generation"),Vt.forEach(a),La=n(M," task has a "),Ce=r(M,"A",{href:!0});var Bt=o(Ce);Da=n(Bt,"generate()"),Bt.forEach(a),Na=n(M," method with several parameters for controlling the output. For example, if you want to generate more than one output, set the "),Ze=r(M,"CODE",{});var Gt=o(Ze);Ha=n(Gt,"num_return_sequences"),Gt.forEach(a),Ia=n(M," parameter:"),M.forEach(a),$s=c(e),g(pe.$$.fragment,e),xs=c(e),L=r(e,"H3",{class:!0});var Js=o(L);R=r(Js,"A",{id:!0,class:!0,href:!0});var Qt=o(R);es=r(Qt,"SPAN",{});var Xt=o(es);g(fe.$$.fragment,Xt),Xt.forEach(a),Qt.forEach(a),Oa=c(Js),ss=r(Js,"SPAN",{});var Yt=o(ss);Ra=n(Yt,"Choose a model and tokenizer"),Yt.forEach(a),Js.forEach(a),ys=c(e),w=r(e,"P",{});var S=o(w);Ua=n(S,"The "),Le=r(S,"A",{href:!0});var Zt=o(Le);Wa=n(Zt,"pipeline()"),Zt.forEach(a),Ja=n(S," accepts any model from the "),he=r(S,"A",{href:!0,rel:!0});var en=o(he);Ka=n(en,"Model Hub"),en.forEach(a),Va=n(S,". There are tags on the Model Hub that allow you to filter for a model you\u2019d like to use for your task. Once you\u2019ve picked an appropriate model, load it with the corresponding "),as=r(S,"CODE",{});var sn=o(as);Ba=n(sn,"AutoModelFor"),sn.forEach(a),Ga=n(S," and [`AutoTokenizer\u2019] class. For example, load the "),De=r(S,"A",{href:!0});var an=o(De);Qa=n(an,"AutoModelForCausalLM"),an.forEach(a),Xa=n(S," class for a causal language modeling task:"),S.forEach(a),ws=c(e),g(ce.$$.fragment,e),js=c(e),U=r(e,"P",{});var Ks=o(U);Ya=n(Ks,"Create a "),Ne=r(Ks,"A",{href:!0});var tn=o(Ne);Za=n(tn,"pipeline()"),tn.forEach(a),et=n(Ks," for your task, and specify the model and tokenizer you\u2019ve loaded:"),Ks.forEach(a),Es=c(e),g(me.$$.fragment,e),bs=c(e),W=r(e,"P",{});var Vs=o(W);st=n(Vs,"Pass your input text to the "),He=r(Vs,"A",{href:!0});var nn=o(He);at=n(nn,"pipeline()"),nn.forEach(a),tt=n(Vs," to generate some text:"),Vs.forEach(a),As=c(e),g(ue.$$.fragment,e),Ps=c(e),D=r(e,"H2",{class:!0});var Bs=o(D);J=r(Bs,"A",{id:!0,class:!0,href:!0});var ln=o(J);ts=r(ln,"SPAN",{});var rn=o(ts);g(de.$$.fragment,rn),rn.forEach(a),ln.forEach(a),nt=c(Bs),ns=r(Bs,"SPAN",{});var on=o(ns);lt=n(on,"Audio pipeline"),on.forEach(a),Bs.forEach(a),Ts=c(e),K=r(e,"P",{});var Gs=o(K);rt=n(Gs,"The flexibility of the "),Ie=r(Gs,"A",{href:!0});var pn=o(Ie);it=n(pn,"pipeline()"),pn.forEach(a),ot=n(Gs," means it can also be extended to audio tasks."),Gs.forEach(a),qs=c(e),A=r(e,"P",{});var Y=o(A);pt=n(Y,"For example, let\u2019s classify the emotion from a short clip of John F. Kennedy\u2019s famous "),ge=r(Y,"A",{href:!0,rel:!0});var fn=o(ge);ft=n(fn,"\u201CWe choose to go to the Moon\u201D"),fn.forEach(a),ht=n(Y," speech. Find an "),ve=r(Y,"A",{href:!0,rel:!0});var hn=o(ve);ct=n(hn,"audio classification"),hn.forEach(a),mt=n(Y," model on the Model Hub for emotion recognition and load it in the "),Oe=r(Y,"A",{href:!0});var cn=o(Oe);ut=n(cn,"pipeline()"),cn.forEach(a),dt=n(Y,":"),Y.forEach(a),Ms=c(e),g(_e.$$.fragment,e),Ss=c(e),V=r(e,"P",{});var Qs=o(V);gt=n(Qs,"Pass the audio file to the "),Re=r(Qs,"A",{href:!0});var mn=o(Re);vt=n(mn,"pipeline()"),mn.forEach(a),_t=n(Qs,":"),Qs.forEach(a),Fs=c(e),g(ke.$$.fragment,e),zs=c(e),N=r(e,"H2",{class:!0});var Xs=o(N);B=r(Xs,"A",{id:!0,class:!0,href:!0});var un=o(B);ls=r(un,"SPAN",{});var dn=o(ls);g($e.$$.fragment,dn),dn.forEach(a),un.forEach(a),kt=c(Xs),rs=r(Xs,"SPAN",{});var gn=o(rs);$t=n(gn,"Vision pipeline"),gn.forEach(a),Xs.forEach(a),Cs=c(e),G=r(e,"P",{});var Ys=o(G);xt=n(Ys,"Finally, using a "),Ue=r(Ys,"A",{href:!0});var vn=o(Ue);yt=n(vn,"pipeline()"),vn.forEach(a),wt=n(Ys," for vision tasks is practically identical."),Ys.forEach(a),Ls=c(e),We=r(e,"P",{});var _n=o(We);jt=n(_n,"Specify your vision task and pass your image to the classifier. The imaage can be a link or a local path to the image. For example, what species of cat is shown below?"),_n.forEach(a),Ds=c(e),Je=r(e,"P",{});var kn=o(Je);Ke=r(kn,"IMG",{src:!0,alt:!0}),kn.forEach(a),Ns=c(e),g(xe.$$.fragment,e),this.h()},h(){f(m,"name","hf:doc:metadata"),f(m,"content",JSON.stringify(Pn)),f(x,"id","pipelines-for-inference"),f(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(x,"href","#pipelines-for-inference"),f(u,"class","relative group"),f(we,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Z,"href","https://huggingface.co/models"),f(Z,"rel","nofollow"),f(je,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Ee,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(be,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(O,"id","pipeline-usage"),f(O,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(O,"href","#pipeline-usage"),f(C,"class","relative group"),f(Ae,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Pe,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Te,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Me,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Se,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(le,"start","2"),f(ze,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Ce,"href","/docs/transformers/main/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),f(R,"id","choose-a-model-and-tokenizer"),f(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(R,"href","#choose-a-model-and-tokenizer"),f(L,"class","relative group"),f(Le,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(he,"href","https://huggingface.co/models"),f(he,"rel","nofollow"),f(De,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModelForCausalLM"),f(Ne,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(He,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(J,"id","audio-pipeline"),f(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(J,"href","#audio-pipeline"),f(D,"class","relative group"),f(Ie,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(ge,"href","https://en.wikipedia.org/wiki/We_choose_to_go_to_the_Moon"),f(ge,"rel","nofollow"),f(ve,"href","https://huggingface.co/models?pipeline_tag=audio-classification"),f(ve,"rel","nofollow"),f(Oe,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(Re,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),f(B,"id","vision-pipeline"),f(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(B,"href","#vision-pipeline"),f(N,"class","relative group"),f(Ue,"href","/docs/transformers/main/en/main_classes/pipelines#transformers.pipeline"),jn(Ke.src,Et="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/pipeline-cat-chonk.jpeg")||f(Ke,"src",Et),f(Ke,"alt","pipeline-cat-chonk")},m(e,i){s(document.head,m),p(e,P,i),p(e,u,i),s(u,x),s(x,z),v(j,z,null),s(u,T),s(u,H),s(H,Zs),p(e,os,i),p(e,E,i),s(E,ea),s(E,we),s(we,sa),s(E,aa),s(E,Z),s(Z,ta),s(E,na),s(E,je),s(je,la),s(E,ra),p(e,ps,i),p(e,q,i),s(q,ee),s(ee,ia),s(ee,Ee),s(Ee,oa),s(ee,pa),s(q,fa),s(q,Ge),s(Ge,ha),s(q,ca),s(q,se),s(se,ma),s(se,be),s(be,ua),s(se,da),p(e,fs,i),v(I,e,i),p(e,hs,i),p(e,C,i),s(C,O),s(O,Qe),v(ae,Qe,null),s(C,ga),s(C,Xe),s(Xe,va),p(e,cs,i),p(e,b,i),s(b,_a),s(b,Ae),s(Ae,ka),s(b,$a),s(b,Pe),s(Pe,xa),s(b,ya),s(b,Te),s(Te,wa),s(b,ja),p(e,ms,i),p(e,qe,i),s(qe,te),s(te,Ea),s(te,Me),s(Me,ba),s(te,Aa),p(e,us,i),v(ne,e,i),p(e,ds,i),p(e,le,i),s(le,re),s(re,Pa),s(re,Se),s(Se,Ta),s(re,qa),p(e,gs,i),v(ie,e,i),p(e,vs,i),p(e,Fe,i),s(Fe,Ma),p(e,_s,i),v(oe,e,i),p(e,ks,i),p(e,y,i),s(y,Sa),s(y,ze),s(ze,Fa),s(y,za),s(y,Ye),s(Ye,Ca),s(y,La),s(y,Ce),s(Ce,Da),s(y,Na),s(y,Ze),s(Ze,Ha),s(y,Ia),p(e,$s,i),v(pe,e,i),p(e,xs,i),p(e,L,i),s(L,R),s(R,es),v(fe,es,null),s(L,Oa),s(L,ss),s(ss,Ra),p(e,ys,i),p(e,w,i),s(w,Ua),s(w,Le),s(Le,Wa),s(w,Ja),s(w,he),s(he,Ka),s(w,Va),s(w,as),s(as,Ba),s(w,Ga),s(w,De),s(De,Qa),s(w,Xa),p(e,ws,i),v(ce,e,i),p(e,js,i),p(e,U,i),s(U,Ya),s(U,Ne),s(Ne,Za),s(U,et),p(e,Es,i),v(me,e,i),p(e,bs,i),p(e,W,i),s(W,st),s(W,He),s(He,at),s(W,tt),p(e,As,i),v(ue,e,i),p(e,Ps,i),p(e,D,i),s(D,J),s(J,ts),v(de,ts,null),s(D,nt),s(D,ns),s(ns,lt),p(e,Ts,i),p(e,K,i),s(K,rt),s(K,Ie),s(Ie,it),s(K,ot),p(e,qs,i),p(e,A,i),s(A,pt),s(A,ge),s(ge,ft),s(A,ht),s(A,ve),s(ve,ct),s(A,mt),s(A,Oe),s(Oe,ut),s(A,dt),p(e,Ms,i),v(_e,e,i),p(e,Ss,i),p(e,V,i),s(V,gt),s(V,Re),s(Re,vt),s(V,_t),p(e,Fs,i),v(ke,e,i),p(e,zs,i),p(e,N,i),s(N,B),s(B,ls),v($e,ls,null),s(N,kt),s(N,rs),s(rs,$t),p(e,Cs,i),p(e,G,i),s(G,xt),s(G,Ue),s(Ue,yt),s(G,wt),p(e,Ls,i),p(e,We,i),s(We,jt),p(e,Ds,i),p(e,Je,i),s(Je,Ke),p(e,Ns,i),v(xe,e,i),Hs=!0},p(e,[i]){const ye={};i&2&&(ye.$$scope={dirty:i,ctx:e}),I.$set(ye)},i(e){Hs||(_(j.$$.fragment,e),_(I.$$.fragment,e),_(ae.$$.fragment,e),_(ne.$$.fragment,e),_(ie.$$.fragment,e),_(oe.$$.fragment,e),_(pe.$$.fragment,e),_(fe.$$.fragment,e),_(ce.$$.fragment,e),_(me.$$.fragment,e),_(ue.$$.fragment,e),_(de.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_($e.$$.fragment,e),_(xe.$$.fragment,e),Hs=!0)},o(e){k(j.$$.fragment,e),k(I.$$.fragment,e),k(ae.$$.fragment,e),k(ne.$$.fragment,e),k(ie.$$.fragment,e),k(oe.$$.fragment,e),k(pe.$$.fragment,e),k(fe.$$.fragment,e),k(ce.$$.fragment,e),k(me.$$.fragment,e),k(ue.$$.fragment,e),k(de.$$.fragment,e),k(_e.$$.fragment,e),k(ke.$$.fragment,e),k($e.$$.fragment,e),k(xe.$$.fragment,e),Hs=!1},d(e){a(m),e&&a(P),e&&a(u),$(j),e&&a(os),e&&a(E),e&&a(ps),e&&a(q),e&&a(fs),$(I,e),e&&a(hs),e&&a(C),$(ae),e&&a(cs),e&&a(b),e&&a(ms),e&&a(qe),e&&a(us),$(ne,e),e&&a(ds),e&&a(le),e&&a(gs),$(ie,e),e&&a(vs),e&&a(Fe),e&&a(_s),$(oe,e),e&&a(ks),e&&a(y),e&&a($s),$(pe,e),e&&a(xs),e&&a(L),$(fe),e&&a(ys),e&&a(w),e&&a(ws),$(ce,e),e&&a(js),e&&a(U),e&&a(Es),$(me,e),e&&a(bs),e&&a(W),e&&a(As),$(ue,e),e&&a(Ps),e&&a(D),$(de),e&&a(Ts),e&&a(K),e&&a(qs),e&&a(A),e&&a(Ms),$(_e,e),e&&a(Ss),e&&a(V),e&&a(Fs),$(ke,e),e&&a(zs),e&&a(N),$($e),e&&a(Cs),e&&a(G),e&&a(Ls),e&&a(We),e&&a(Ds),e&&a(Je),e&&a(Ns),$(xe,e)}}}const Pn={local:"pipelines-for-inference",sections:[{local:"pipeline-usage",sections:[{local:"choose-a-model-and-tokenizer",title:"Choose a model and tokenizer"}],title:"Pipeline usage"},{local:"audio-pipeline",title:"Audio pipeline"},{local:"vision-pipeline",title:"Vision pipeline"}],title:"Pipelines for inference"};function Tn(Be,m,P){let{fw:u}=m;return Be.$$set=x=>{"fw"in x&&P(0,u=x.fw)},[u]}class Cn extends $n{constructor(m){super();xn(this,m,Tn,An,yn,{fw:0})}}export{Cn as default,Pn as metadata};
