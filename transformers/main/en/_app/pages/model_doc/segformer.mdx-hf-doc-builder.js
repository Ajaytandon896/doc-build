import{S as zg,i as qg,s as Lg,e as o,k as c,w,t as s,M as Og,c as a,d as t,m,a as n,x as S,h as i,b as l,N as Ng,G as e,g as _,y as $,q as T,o as F,B as y,v as Hg,L as Wr}from"../../chunks/vendor-hf-doc-builder.js";import{T as Nr}from"../../chunks/Tip-hf-doc-builder.js";import{D as j}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Rr}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as de}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Hr}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Wg(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerModel, SegformerConfig

# Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration
configuration = SegformerConfig()

# Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration
model = SegformerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerModel, SegformerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = SegformerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){f=o("p"),v=s("Example:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Rg(E){let f,v;return{c(){f=o("p"),v=s(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(u){f=a(u,"P",{});var p=n(f);v=i(p,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),p.forEach(t)},m(u,p){_(u,f,p),e(f,v)},d(u){u&&t(f)}}}function Bg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Ug(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=o("p"),v=s("Example:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Vg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Kg(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = SegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=o("p"),v=s("Example:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Gg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Yg(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation
from PIL import Image
import requests

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = SegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
logits = outputs.logits  # shape (batch_size, num_labels, height, width)
logits.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, SegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = SegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits  <span class="hljs-comment"># shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits.shape
(<span class="hljs-number">1</span>, <span class="hljs-number">150</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>)`}}),{c(){f=o("p"),v=s("Examples:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Examples:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Jg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Xg(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerModel
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerModel.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerModel.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>]`}}),{c(){f=o("p"),v=s("Example:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function Zg(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function Qg(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForImageClassification
import tensorflow as tf
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/mit-b0")
model = TFSegformerForImageClassification.from_pretrained("nvidia/mit-b0")

inputs = feature_extractor(image, return_tensors="tf")
logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = int(tf.math.argmax(logits, axis=-1))
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForImageClassification.from_pretrained(<span class="hljs-string">&quot;nvidia/mit-b0&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = <span class="hljs-built_in">int</span>(tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){f=o("p"),v=s("Example:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Example:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function ep(E){let f,v,u,p,b;return{c(){f=o("p"),v=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=o("code"),p=s("Module"),b=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(g,"CODE",{});var x=n(u);p=i(x,"Module"),x.forEach(t),b=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(t)},m(d,g){_(d,f,g),e(f,v),e(f,u),e(u,p),e(f,b)},d(d){d&&t(f)}}}function tp(E){let f,v,u,p,b;return p=new Rr({props:{code:`from transformers import SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = SegformerFeatureExtractor.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")
model = TFSegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-ade-512-512")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs, training=False)
# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits
logits.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> SegformerFeatureExtractor, TFSegformerForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = SegformerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFSegformerForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;nvidia/segformer-b0-finetuned-ade-512-512&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, training=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span>logits.shape
(<span class="hljs-number">1</span>, <span class="hljs-number">150</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>)`}}),{c(){f=o("p"),v=s("Examples:"),u=c(),w(p.$$.fragment)},l(d){f=a(d,"P",{});var g=n(f);v=i(g,"Examples:"),g.forEach(t),u=m(d),S(p.$$.fragment,d)},m(d,g){_(d,f,g),e(f,v),_(d,u,g),$(p,d,g),b=!0},p:Wr,i(d){b||(T(p.$$.fragment,d),b=!0)},o(d){F(p.$$.fragment,d),b=!1},d(d){d&&t(f),d&&t(u),y(p,d)}}}function rp(E){let f,v,u,p,b,d,g,x,xs,Sn,pe,Le,ra,yt,ks,oa,Ms,$n,Oe,Is,Et,js,Cs,Tn,Br,Ps,Fn,Ur,aa,As,yn,Ne,Ds,xt,zs,qs,En,kt,af,xn,G,Ls,Mt,Os,Ns,It,Hs,Ws,jt,Rs,Bs,kn,Vr,Us,Mn,M,W,Vs,Kr,Ks,Gs,Gr,Ys,Js,Yr,Xs,Zs,Ct,Qs,ei,ti,ue,ri,Pt,oi,ai,At,ni,si,ii,Dt,li,zt,di,ci,mi,qt,fi,Lt,hi,gi,pi,Ot,ui,na,_i,bi,vi,_e,wi,Jr,Si,$i,Nt,Ti,Fi,yi,k,Ei,Xr,xi,ki,sa,Mi,Ii,ia,ji,Ci,la,Pi,Ai,da,Di,zi,ca,qi,Li,Zr,Oi,Ni,ma,Hi,Wi,fa,Ri,Bi,Ui,Ht,Vi,Wt,Ki,Gi,In,He,ha,P,Qr,ga,Yi,Ji,pa,ua,Xi,Zi,_a,ba,Qi,el,eo,va,tl,rl,to,wa,ol,al,ro,Sa,nl,sl,A,D,oo,il,ll,$a,dl,cl,Ta,ml,fl,ao,hl,gl,no,pl,ul,so,_l,bl,z,io,vl,wl,Fa,Sl,$l,ya,Tl,Fl,lo,yl,El,co,xl,kl,mo,Ml,Il,q,fo,jl,Cl,Ea,Pl,Al,xa,Dl,zl,ho,ql,Ll,go,Ol,Nl,po,Hl,Wl,L,uo,Rl,Bl,ka,Ul,Vl,Ma,Kl,Gl,_o,Yl,Jl,bo,Xl,Zl,vo,Ql,ed,O,wo,td,rd,Ia,od,ad,ja,nd,sd,So,id,ld,$o,dd,cd,To,md,fd,N,Fo,hd,gd,Ca,pd,ud,Pa,_d,bd,yo,vd,wd,Eo,Sd,$d,xo,Td,jn,We,Fd,Rt,yd,Ed,Cn,be,Re,Aa,Bt,xd,Da,kd,Pn,R,Ut,Md,ve,Id,ko,jd,Cd,Vt,Pd,Ad,Dd,we,zd,Mo,qd,Ld,Io,Od,Nd,Hd,Be,An,Se,Ue,za,Kt,Wd,qa,Rd,Dn,B,Gt,Bd,La,Ud,Vd,Yt,Kd,jo,Gd,Yd,Jd,fe,Jt,Xd,Oa,Zd,Qd,Ve,zn,$e,Ke,Na,Xt,ec,Ha,tc,qn,ce,Zt,rc,Qt,oc,er,ac,nc,sc,Y,tr,ic,Te,lc,Co,dc,cc,Wa,mc,fc,hc,Ge,gc,Ye,Ln,Fe,Je,Ra,rr,pc,Ba,uc,On,ye,or,_c,Po,ar,Nn,Ee,Xe,Ua,nr,bc,Va,vc,Hn,U,sr,wc,Ka,Sc,$c,ir,Tc,lr,Fc,yc,Ec,J,dr,xc,xe,kc,Ao,Mc,Ic,Ga,jc,Cc,Pc,Ze,Ac,Qe,Wn,ke,et,Ya,cr,Dc,Ja,zc,Rn,me,mr,qc,fr,Lc,hr,Oc,Nc,Hc,X,gr,Wc,Me,Rc,Do,Bc,Uc,Xa,Vc,Kc,Gc,tt,Yc,rt,Bn,Ie,ot,Za,pr,Jc,Qa,Xc,Un,je,ur,Zc,zo,_r,Vn,Ce,at,en,br,Qc,tn,em,Kn,V,vr,tm,wr,rm,qo,om,am,nm,Sr,sm,$r,im,lm,dm,Z,Tr,cm,Pe,mm,Lo,fm,hm,rn,gm,pm,um,nt,_m,st,Gn,Ae,it,on,Fr,bm,an,vm,Yn,H,yr,wm,nn,Sm,$m,Er,Tm,Oo,Fm,ym,Em,xr,xm,kr,km,Mm,Im,Q,Mr,jm,De,Cm,No,Pm,Am,sn,Dm,zm,qm,lt,Lm,dt,Jn,ze,ct,ln,Ir,Om,dn,Nm,Xn,K,jr,Hm,Cr,Wm,Ho,Rm,Bm,Um,Pr,Vm,Ar,Km,Gm,Ym,ee,Dr,Jm,qe,Xm,Wo,Zm,Qm,cn,ef,tf,rf,mt,of,ft,Zn;return d=new de({}),yt=new de({}),Bt=new de({}),Ut=new j({props:{name:"class transformers.SegformerConfig",anchor:"transformers.SegformerConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"num_encoder_blocks",val:" = 4"},{name:"depths",val:" = [2, 2, 2, 2]"},{name:"sr_ratios",val:" = [8, 4, 2, 1]"},{name:"hidden_sizes",val:" = [32, 64, 160, 256]"},{name:"patch_sizes",val:" = [7, 3, 3, 3]"},{name:"strides",val:" = [4, 2, 2, 2]"},{name:"num_attention_heads",val:" = [1, 2, 5, 8]"},{name:"mlp_ratios",val:" = [4, 4, 4, 4]"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"classifier_dropout_prob",val:" = 0.1"},{name:"initializer_range",val:" = 0.02"},{name:"drop_path_rate",val:" = 0.1"},{name:"layer_norm_eps",val:" = 1e-06"},{name:"decoder_hidden_size",val:" = 256"},{name:"is_encoder_decoder",val:" = False"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.SegformerConfig.num_encoder_blocks",description:`<strong>num_encoder_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of encoder blocks (i.e. stages in the Mix Transformer encoder).`,name:"num_encoder_blocks"},{anchor:"transformers.SegformerConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [2, 2, 2, 2]) &#x2014;
The number of layers in each encoder block.`,name:"depths"},{anchor:"transformers.SegformerConfig.sr_ratios",description:`<strong>sr_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [8, 4, 2, 1]) &#x2014;
Sequence reduction ratios in each encoder block.`,name:"sr_ratios"},{anchor:"transformers.SegformerConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [32, 64, 160, 256]) &#x2014;
Dimension of each of the encoder blocks.`,name:"hidden_sizes"},{anchor:"transformers.SegformerConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [7, 3, 3, 3]) &#x2014;
Patch size before each encoder block.`,name:"patch_sizes"},{anchor:"transformers.SegformerConfig.strides",description:`<strong>strides</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 2, 2, 2]) &#x2014;
Stride before each encoder block.`,name:"strides"},{anchor:"transformers.SegformerConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [1, 2, 5, 8]) &#x2014;
Number of attention heads for each attention layer in each block of the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.SegformerConfig.mlp_ratios",description:`<strong>mlp_ratios</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [4, 4, 4, 4]) &#x2014;
Ratio of the size of the hidden layer compared to the size of the input layer of the Mix FFNs in the
encoder blocks.`,name:"mlp_ratios"},{anchor:"transformers.SegformerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.SegformerConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.SegformerConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.SegformerConfig.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability before the classification head.`,name:"classifier_dropout_prob"},{anchor:"transformers.SegformerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.SegformerConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for stochastic depth, used in the blocks of the Transformer encoder.`,name:"drop_path_rate"},{anchor:"transformers.SegformerConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.SegformerConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The dimension of the all-MLP decode head.`,name:"decoder_hidden_size"},{anchor:"transformers.SegformerConfig.semantic_loss_ignore_index",description:`<strong>semantic_loss_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to 255) &#x2014;
The index that is ignored by the loss function of the semantic segmentation model.`,name:"semantic_loss_ignore_index"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/configuration_segformer.py#L33"}}),Be=new Hr({props:{anchor:"transformers.SegformerConfig.example",$$slots:{default:[Wg]},$$scope:{ctx:E}}}),Kt=new de({}),Gt=new j({props:{name:"class transformers.SegformerFeatureExtractor",anchor:"transformers.SegformerFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 512"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"reduce_labels",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input based on a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.SegformerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 512) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to (size, size). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"size"},{anchor:"transformers.SegformerFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.SegformerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.SegformerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.SegformerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"},{anchor:"transformers.SegformerFeatureExtractor.reduce_labels",description:`<strong>reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0 is
used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k). The
background label will be replaced by 255.`,name:"reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/feature_extraction_segformer.py#L36"}}),Jt=new j({props:{name:"__call__",anchor:"transformers.SegformerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"segmentation_maps",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SegformerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is
the number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.SegformerFeatureExtractor.__call__.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
Optionally, the corresponding semantic segmentation maps with the pixel-wise annotations.`,name:"segmentation_maps"},{anchor:"transformers.SegformerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/feature_extraction_segformer.py#L89",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
<li><strong>labels</strong> \u2014 Optional labels to be fed to a model (when <code>segmentation_maps</code> are provided)</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),Ve=new Nr({props:{warning:!0,$$slots:{default:[Rg]},$$scope:{ctx:E}}}),Xt=new de({}),Zt=new j({props:{name:"class transformers.SegformerModel",anchor:"transformers.SegformerModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L511"}}),tr=new j({props:{name:"forward",anchor:"transformers.SegformerModel.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L530",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ge=new Nr({props:{$$slots:{default:[Bg]},$$scope:{ctx:E}}}),Ye=new Hr({props:{anchor:"transformers.SegformerModel.forward.example",$$slots:{default:[Ug]},$$scope:{ctx:E}}}),rr=new de({}),or=new j({props:{name:"class transformers.SegformerDecodeHead",anchor:"transformers.SegformerDecodeHead",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L684"}}),ar=new j({props:{name:"forward",anchor:"transformers.SegformerDecodeHead.forward",parameters:[{name:"encoder_hidden_states",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L709"}}),nr=new de({}),sr=new j({props:{name:"class transformers.SegformerForImageClassification",anchor:"transformers.SegformerForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L577"}}),dr=new j({props:{name:"forward",anchor:"transformers.SegformerForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForImageClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L590",returnDescription:`
<p>A <code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.segformer.modeling_segformer.SegFormerImageClassifierOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ze=new Nr({props:{$$slots:{default:[Vg]},$$scope:{ctx:E}}}),Qe=new Hr({props:{anchor:"transformers.SegformerForImageClassification.forward.example",$$slots:{default:[Kg]},$$scope:{ctx:E}}}),cr=new de({}),mr=new j({props:{name:"class transformers.SegformerForSemanticSegmentation",anchor:"transformers.SegformerForSemanticSegmentation",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L746"}}),gr=new j({props:{name:"forward",anchor:"transformers.SegformerForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:": FloatTensor"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.SegformerForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it. Pixel values can be obtained using
<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor">SegformerFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor.__call__">SegformerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.SegformerForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_segformer.py#L755",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput"
>transformers.modeling_outputs.SemanticSegmenterOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),tt=new Nr({props:{$$slots:{default:[Gg]},$$scope:{ctx:E}}}),rt=new Hr({props:{anchor:"transformers.SegformerForSemanticSegmentation.forward.example",$$slots:{default:[Yg]},$$scope:{ctx:E}}}),pr=new de({}),ur=new j({props:{name:"class transformers.TFSegformerDecodeHead",anchor:"transformers.TFSegformerDecodeHead",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L714"}}),_r=new j({props:{name:"call",anchor:"transformers.TFSegformerDecodeHead.call",parameters:[{name:"encoder_hidden_states",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L736"}}),br=new de({}),vr=new j({props:{name:"class transformers.TFSegformerModel",anchor:"transformers.TFSegformerModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L596"}}),Tr=new j({props:{name:"call",anchor:"transformers.TFSegformerModel.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"}],parametersDescription:[{anchor:"transformers.TFSegformerModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerModel.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerModel.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L604",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutput"
>transformers.modeling_tf_outputs.TFBaseModelOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),nt=new Nr({props:{$$slots:{default:[Jg]},$$scope:{ctx:E}}}),st=new Hr({props:{anchor:"transformers.TFSegformerModel.call.example",$$slots:{default:[Xg]},$$scope:{ctx:E}}}),Fr=new de({}),yr=new j({props:{name:"class transformers.TFSegformerForImageClassification",anchor:"transformers.TFSegformerForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L639"}}),Mr=new j({props:{name:"call",anchor:"transformers.TFSegformerForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForImageClassification.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForImageClassification.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L649",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),lt=new Nr({props:{$$slots:{default:[Zg]},$$scope:{ctx:E}}}),dt=new Hr({props:{anchor:"transformers.TFSegformerForImageClassification.call.example",$$slots:{default:[Qg]},$$scope:{ctx:E}}}),Ir=new de({}),jr=new j({props:{name:"class transformers.TFSegformerForSemanticSegmentation",anchor:"transformers.TFSegformerForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L774"}}),Dr=new j({props:{name:"call",anchor:"transformers.TFSegformerForSemanticSegmentation.call",parameters:[{name:"pixel_values",val:": Tensor"},{name:"labels",val:": typing.Optional[tensorflow.python.framework.ops.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.TFSegformerForSemanticSegmentation.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail. This argument can be used only in eager mode, in graph mode the value in the
config will be used instead.`,name:"output_attentions"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used in
eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.training",description:`<strong>training</strong> (<code>bool</code>, <em>optional</em>, defaults to \`False&#x201C;) &#x2014;
Whether or not to use the model in training mode (some modules like dropout modules have different
behaviors between training and evaluation).`,name:"training"},{anchor:"transformers.TFSegformerForSemanticSegmentation.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a (per-pixel) classification loss is computed
(Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/segformer/modeling_tf_segformer.py#L800",returnDescription:`
<p>A <code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"
>SegformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings, if the model has an embedding layer, + one for
the output of each layer) of shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_tf_outputs.TFSemanticSegmenterOutput</code> or <code>tuple(tf.Tensor)</code></p>
`}}),mt=new Nr({props:{$$slots:{default:[ep]},$$scope:{ctx:E}}}),ft=new Hr({props:{anchor:"transformers.TFSegformerForSemanticSegmentation.call.example",$$slots:{default:[tp]},$$scope:{ctx:E}}}),{c(){f=o("meta"),v=c(),u=o("h1"),p=o("a"),b=o("span"),w(d.$$.fragment),g=c(),x=o("span"),xs=s("SegFormer"),Sn=c(),pe=o("h2"),Le=o("a"),ra=o("span"),w(yt.$$.fragment),ks=c(),oa=o("span"),Ms=s("Overview"),$n=c(),Oe=o("p"),Is=s("The SegFormer model was proposed in "),Et=o("a"),js=s("SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),Cs=s(` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),Tn=c(),Br=o("p"),Ps=s("The abstract from the paper is the following:"),Fn=c(),Ur=o("p"),aa=o("em"),As=s(`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),yn=c(),Ne=o("p"),Ds=s("The figure below illustrates the architecture of SegFormer. Taken from the "),xt=o("a"),zs=s("original paper"),qs=s("."),En=c(),kt=o("img"),xn=c(),G=o("p"),Ls=s("This model was contributed by "),Mt=o("a"),Os=s("nielsr"),Ns=s(`. The TensorFlow version
of the model was contributed by `),It=o("a"),Hs=s("sayakpaul"),Ws=s(". The original code can be found "),jt=o("a"),Rs=s("here"),Bs=s("."),kn=c(),Vr=o("p"),Us=s("Tips:"),Mn=c(),M=o("ul"),W=o("li"),Vs=s(`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),Kr=o("a"),Ks=s("SegformerModel"),Gs=s(` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),Gr=o("a"),Ys=s("SegformerForSemanticSegmentation"),Js=s(` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),Yr=o("a"),Xs=s("SegformerForImageClassification"),Zs=s(` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),Ct=o("a"),Qs=s("hub"),ei=s("."),ti=c(),ue=o("li"),ri=s("The quickest way to get started with SegFormer is by checking the "),Pt=o("a"),oi=s("example notebooks"),ai=s(` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),At=o("a"),ni=s("blog post"),si=s(" introducing SegFormer and illustrating how it can be fine-tuned on custom data."),ii=c(),Dt=o("li"),li=s("TensorFlow users should refer to "),zt=o("a"),di=s("this repository"),ci=s(" that shows off-the-shelf inference and fine-tuning."),mi=c(),qt=o("li"),fi=s("One can also check out "),Lt=o("a"),hi=s("this interactive demo on Hugging Face Spaces"),gi=s(`
to try out a SegFormer model on custom images.`),pi=c(),Ot=o("li"),ui=s("SegFormer works on any input size, as it pads the input to be divisible by "),na=o("code"),_i=s("config.patch_sizes"),bi=s("."),vi=c(),_e=o("li"),wi=s("One can use "),Jr=o("a"),Si=s("SegformerFeatureExtractor"),$i=s(` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Nt=o("a"),Ti=s("here"),Fi=s(`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),yi=c(),k=o("li"),Ei=s("One additional thing to keep in mind is that one can initialize "),Xr=o("a"),xi=s("SegformerFeatureExtractor"),ki=s(` with
`),sa=o("code"),Mi=s("reduce_labels"),Ii=s(" set to "),ia=o("code"),ji=s("True"),Ci=s(" or "),la=o("code"),Pi=s("False"),Ai=s(`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),da=o("code"),Di=s("reduce_labels"),zi=s(` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),ca=o("em"),qi=s("ignore_index"),Li=s(` of the loss function
used by `),Zr=o("a"),Oi=s("SegformerForSemanticSegmentation"),Ni=s(`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),ma=o("code"),Hi=s("reduce_labels"),Wi=s(` should be set to
`),fa=o("code"),Ri=s("False"),Bi=s(", as loss should also be computed for the background class."),Ui=c(),Ht=o("li"),Vi=s(`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Wt=o("a"),Ki=s("original paper"),Gi=s(")."),In=c(),He=o("table"),ha=o("thead"),P=o("tr"),Qr=o("th"),ga=o("strong"),Yi=s("Model variant"),Ji=c(),pa=o("th"),ua=o("strong"),Xi=s("Depths"),Zi=c(),_a=o("th"),ba=o("strong"),Qi=s("Hidden sizes"),el=c(),eo=o("th"),va=o("strong"),tl=s("Decoder hidden size"),rl=c(),to=o("th"),wa=o("strong"),ol=s("Params (M)"),al=c(),ro=o("th"),Sa=o("strong"),nl=s("ImageNet-1k Top 1"),sl=c(),A=o("tbody"),D=o("tr"),oo=o("td"),il=s("MiT-b0"),ll=c(),$a=o("td"),dl=s("[2, 2, 2, 2]"),cl=c(),Ta=o("td"),ml=s("[32, 64, 160, 256]"),fl=c(),ao=o("td"),hl=s("256"),gl=c(),no=o("td"),pl=s("3.7"),ul=c(),so=o("td"),_l=s("70.5"),bl=c(),z=o("tr"),io=o("td"),vl=s("MiT-b1"),wl=c(),Fa=o("td"),Sl=s("[2, 2, 2, 2]"),$l=c(),ya=o("td"),Tl=s("[64, 128, 320, 512]"),Fl=c(),lo=o("td"),yl=s("256"),El=c(),co=o("td"),xl=s("14.0"),kl=c(),mo=o("td"),Ml=s("78.7"),Il=c(),q=o("tr"),fo=o("td"),jl=s("MiT-b2"),Cl=c(),Ea=o("td"),Pl=s("[3, 4, 6, 3]"),Al=c(),xa=o("td"),Dl=s("[64, 128, 320, 512]"),zl=c(),ho=o("td"),ql=s("768"),Ll=c(),go=o("td"),Ol=s("25.4"),Nl=c(),po=o("td"),Hl=s("81.6"),Wl=c(),L=o("tr"),uo=o("td"),Rl=s("MiT-b3"),Bl=c(),ka=o("td"),Ul=s("[3, 4, 18, 3]"),Vl=c(),Ma=o("td"),Kl=s("[64, 128, 320, 512]"),Gl=c(),_o=o("td"),Yl=s("768"),Jl=c(),bo=o("td"),Xl=s("45.2"),Zl=c(),vo=o("td"),Ql=s("83.1"),ed=c(),O=o("tr"),wo=o("td"),td=s("MiT-b4"),rd=c(),Ia=o("td"),od=s("[3, 8, 27, 3]"),ad=c(),ja=o("td"),nd=s("[64, 128, 320, 512]"),sd=c(),So=o("td"),id=s("768"),ld=c(),$o=o("td"),dd=s("62.6"),cd=c(),To=o("td"),md=s("83.6"),fd=c(),N=o("tr"),Fo=o("td"),hd=s("MiT-b5"),gd=c(),Ca=o("td"),pd=s("[3, 6, 40, 3]"),ud=c(),Pa=o("td"),_d=s("[64, 128, 320, 512]"),bd=c(),yo=o("td"),vd=s("768"),wd=c(),Eo=o("td"),Sd=s("82.0"),$d=c(),xo=o("td"),Td=s("83.8"),jn=c(),We=o("p"),Fd=s(`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Rt=o("a"),yd=s("paper"),Ed=s("."),Cn=c(),be=o("h2"),Re=o("a"),Aa=o("span"),w(Bt.$$.fragment),xd=c(),Da=o("span"),kd=s("SegformerConfig"),Pn=c(),R=o("div"),w(Ut.$$.fragment),Md=c(),ve=o("p"),Id=s("This is the configuration class to store the configuration of a "),ko=o("a"),jd=s("SegformerModel"),Cd=s(`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Vt=o("a"),Pd=s("nvidia/segformer-b0-finetuned-ade-512-512"),Ad=s(`
architecture.`),Dd=c(),we=o("p"),zd=s("Configuration objects inherit from "),Mo=o("a"),qd=s("PretrainedConfig"),Ld=s(` and can be used to control the model outputs. Read the
documentation from `),Io=o("a"),Od=s("PretrainedConfig"),Nd=s(" for more information."),Hd=c(),w(Be.$$.fragment),An=c(),Se=o("h2"),Ue=o("a"),za=o("span"),w(Kt.$$.fragment),Wd=c(),qa=o("span"),Rd=s("SegformerFeatureExtractor"),Dn=c(),B=o("div"),w(Gt.$$.fragment),Bd=c(),La=o("p"),Ud=s("Constructs a SegFormer feature extractor."),Vd=c(),Yt=o("p"),Kd=s("This feature extractor inherits from "),jo=o("a"),Gd=s("FeatureExtractionMixin"),Yd=s(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Jd=c(),fe=o("div"),w(Jt.$$.fragment),Xd=c(),Oa=o("p"),Zd=s("Main method to prepare for the model one or several image(s) and optional corresponding segmentation maps."),Qd=c(),w(Ve.$$.fragment),zn=c(),$e=o("h2"),Ke=o("a"),Na=o("span"),w(Xt.$$.fragment),ec=c(),Ha=o("span"),tc=s("SegformerModel"),qn=c(),ce=o("div"),w(Zt.$$.fragment),rc=c(),Qt=o("p"),oc=s(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),er=o("a"),ac=s("torch.nn.Module"),nc=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),sc=c(),Y=o("div"),w(tr.$$.fragment),ic=c(),Te=o("p"),lc=s("The "),Co=o("a"),dc=s("SegformerModel"),cc=s(" forward method, overrides the "),Wa=o("code"),mc=s("__call__"),fc=s(" special method."),hc=c(),w(Ge.$$.fragment),gc=c(),w(Ye.$$.fragment),Ln=c(),Fe=o("h2"),Je=o("a"),Ra=o("span"),w(rr.$$.fragment),pc=c(),Ba=o("span"),uc=s("SegformerDecodeHead"),On=c(),ye=o("div"),w(or.$$.fragment),_c=c(),Po=o("div"),w(ar.$$.fragment),Nn=c(),Ee=o("h2"),Xe=o("a"),Ua=o("span"),w(nr.$$.fragment),bc=c(),Va=o("span"),vc=s("SegformerForImageClassification"),Hn=c(),U=o("div"),w(sr.$$.fragment),wc=c(),Ka=o("p"),Sc=s(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),$c=c(),ir=o("p"),Tc=s("This model is a PyTorch "),lr=o("a"),Fc=s("torch.nn.Module"),yc=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ec=c(),J=o("div"),w(dr.$$.fragment),xc=c(),xe=o("p"),kc=s("The "),Ao=o("a"),Mc=s("SegformerForImageClassification"),Ic=s(" forward method, overrides the "),Ga=o("code"),jc=s("__call__"),Cc=s(" special method."),Pc=c(),w(Ze.$$.fragment),Ac=c(),w(Qe.$$.fragment),Wn=c(),ke=o("h2"),et=o("a"),Ya=o("span"),w(cr.$$.fragment),Dc=c(),Ja=o("span"),zc=s("SegformerForSemanticSegmentation"),Rn=c(),me=o("div"),w(mr.$$.fragment),qc=c(),fr=o("p"),Lc=s(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),hr=o("a"),Oc=s("torch.nn.Module"),Nc=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Hc=c(),X=o("div"),w(gr.$$.fragment),Wc=c(),Me=o("p"),Rc=s("The "),Do=o("a"),Bc=s("SegformerForSemanticSegmentation"),Uc=s(" forward method, overrides the "),Xa=o("code"),Vc=s("__call__"),Kc=s(" special method."),Gc=c(),w(tt.$$.fragment),Yc=c(),w(rt.$$.fragment),Bn=c(),Ie=o("h2"),ot=o("a"),Za=o("span"),w(pr.$$.fragment),Jc=c(),Qa=o("span"),Xc=s("TFSegformerDecodeHead"),Un=c(),je=o("div"),w(ur.$$.fragment),Zc=c(),zo=o("div"),w(_r.$$.fragment),Vn=c(),Ce=o("h2"),at=o("a"),en=o("span"),w(br.$$.fragment),Qc=c(),tn=o("span"),em=s("TFSegformerModel"),Kn=c(),V=o("div"),w(vr.$$.fragment),tm=c(),wr=o("p"),rm=s(`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),qo=o("a"),om=s("TFPreTrainedModel"),am=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),nm=c(),Sr=o("p"),sm=s("This model is also a "),$r=o("a"),im=s("tf.keras.Model"),lm=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),dm=c(),Z=o("div"),w(Tr.$$.fragment),cm=c(),Pe=o("p"),mm=s("The "),Lo=o("a"),fm=s("TFSegformerModel"),hm=s(" forward method, overrides the "),rn=o("code"),gm=s("__call__"),pm=s(" special method."),um=c(),w(nt.$$.fragment),_m=c(),w(st.$$.fragment),Gn=c(),Ae=o("h2"),it=o("a"),on=o("span"),w(Fr.$$.fragment),bm=c(),an=o("span"),vm=s("TFSegformerForImageClassification"),Yn=c(),H=o("div"),w(yr.$$.fragment),wm=c(),nn=o("p"),Sm=s(`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),$m=c(),Er=o("p"),Tm=s("This model inherits from "),Oo=o("a"),Fm=s("TFPreTrainedModel"),ym=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Em=c(),xr=o("p"),xm=s("This model is also a "),kr=o("a"),km=s("tf.keras.Model"),Mm=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Im=c(),Q=o("div"),w(Mr.$$.fragment),jm=c(),De=o("p"),Cm=s("The "),No=o("a"),Pm=s("TFSegformerForImageClassification"),Am=s(" forward method, overrides the "),sn=o("code"),Dm=s("__call__"),zm=s(" special method."),qm=c(),w(lt.$$.fragment),Lm=c(),w(dt.$$.fragment),Jn=c(),ze=o("h2"),ct=o("a"),ln=o("span"),w(Ir.$$.fragment),Om=c(),dn=o("span"),Nm=s("TFSegformerForSemanticSegmentation"),Xn=c(),K=o("div"),w(jr.$$.fragment),Hm=c(),Cr=o("p"),Wm=s(`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Ho=o("a"),Rm=s("TFPreTrainedModel"),Bm=s(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Um=c(),Pr=o("p"),Vm=s("This model is also a "),Ar=o("a"),Km=s("tf.keras.Model"),Gm=s(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ym=c(),ee=o("div"),w(Dr.$$.fragment),Jm=c(),qe=o("p"),Xm=s("The "),Wo=o("a"),Zm=s("TFSegformerForSemanticSegmentation"),Qm=s(" forward method, overrides the "),cn=o("code"),ef=s("__call__"),tf=s(" special method."),rf=c(),w(mt.$$.fragment),of=c(),w(ft.$$.fragment),this.h()},l(r){const h=Og('[data-svelte="svelte-1phssyn"]',document.head);f=a(h,"META",{name:!0,content:!0}),h.forEach(t),v=m(r),u=a(r,"H1",{class:!0});var zr=n(u);p=a(zr,"A",{id:!0,class:!0,href:!0});var mn=n(p);b=a(mn,"SPAN",{});var fn=n(b);S(d.$$.fragment,fn),fn.forEach(t),mn.forEach(t),g=m(zr),x=a(zr,"SPAN",{});var hn=n(x);xs=i(hn,"SegFormer"),hn.forEach(t),zr.forEach(t),Sn=m(r),pe=a(r,"H2",{class:!0});var qr=n(pe);Le=a(qr,"A",{id:!0,class:!0,href:!0});var gn=n(Le);ra=a(gn,"SPAN",{});var pn=n(ra);S(yt.$$.fragment,pn),pn.forEach(t),gn.forEach(t),ks=m(qr),oa=a(qr,"SPAN",{});var un=n(oa);Ms=i(un,"Overview"),un.forEach(t),qr.forEach(t),$n=m(r),Oe=a(r,"P",{});var Lr=n(Oe);Is=i(Lr,"The SegFormer model was proposed in "),Et=a(Lr,"A",{href:!0,rel:!0});var _n=n(Et);js=i(_n,"SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers"),_n.forEach(t),Cs=i(Lr,` by Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping
Luo. The model consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great
results on image segmentation benchmarks such as ADE20K and Cityscapes.`),Lr.forEach(t),Tn=m(r),Br=a(r,"P",{});var bn=n(Br);Ps=i(bn,"The abstract from the paper is the following:"),bn.forEach(t),Fn=m(r),Ur=a(r,"P",{});var vn=n(Ur);aa=a(vn,"EM",{});var wn=n(aa);As=i(wn,`We present SegFormer, a simple, efficient yet powerful semantic segmentation framework which unifies Transformers with
lightweight multilayer perception (MLP) decoders. SegFormer has two appealing features: 1) SegFormer comprises a novel
hierarchically structured Transformer encoder which outputs multiscale features. It does not need positional encoding,
thereby avoiding the interpolation of positional codes which leads to decreased performance when the testing resolution
differs from training. 2) SegFormer avoids complex decoders. The proposed MLP decoder aggregates information from
different layers, and thus combining both local attention and global attention to render powerful representations. We
show that this simple and lightweight design is the key to efficient segmentation on Transformers. We scale our
approach up to obtain a series of models from SegFormer-B0 to SegFormer-B5, reaching significantly better performance
and efficiency than previous counterparts. For example, SegFormer-B4 achieves 50.3% mIoU on ADE20K with 64M parameters,
being 5x smaller and 2.2% better than the previous best method. Our best model, SegFormer-B5, achieves 84.0% mIoU on
Cityscapes validation set and shows excellent zero-shot robustness on Cityscapes-C.`),wn.forEach(t),vn.forEach(t),yn=m(r),Ne=a(r,"P",{});var Or=n(Ne);Ds=i(Or,"The figure below illustrates the architecture of SegFormer. Taken from the "),xt=a(Or,"A",{href:!0,rel:!0});var nf=n(xt);zs=i(nf,"original paper"),nf.forEach(t),qs=i(Or,"."),Or.forEach(t),En=m(r),kt=a(r,"IMG",{width:!0,src:!0}),xn=m(r),G=a(r,"P",{});var ht=n(G);Ls=i(ht,"This model was contributed by "),Mt=a(ht,"A",{href:!0,rel:!0});var sf=n(Mt);Os=i(sf,"nielsr"),sf.forEach(t),Ns=i(ht,`. The TensorFlow version
of the model was contributed by `),It=a(ht,"A",{href:!0,rel:!0});var lf=n(It);Hs=i(lf,"sayakpaul"),lf.forEach(t),Ws=i(ht,". The original code can be found "),jt=a(ht,"A",{href:!0,rel:!0});var df=n(jt);Rs=i(df,"here"),df.forEach(t),Bs=i(ht,"."),ht.forEach(t),kn=m(r),Vr=a(r,"P",{});var cf=n(Vr);Us=i(cf,"Tips:"),cf.forEach(t),Mn=m(r),M=a(r,"UL",{});var C=n(M);W=a(C,"LI",{});var he=n(W);Vs=i(he,`SegFormer consists of a hierarchical Transformer encoder, and a lightweight all-MLP decoder head.
`),Kr=a(he,"A",{href:!0});var mf=n(Kr);Ks=i(mf,"SegformerModel"),mf.forEach(t),Gs=i(he,` is the hierarchical Transformer encoder (which in the paper is also referred to
as Mix Transformer or MiT). `),Gr=a(he,"A",{href:!0});var ff=n(Gr);Ys=i(ff,"SegformerForSemanticSegmentation"),ff.forEach(t),Js=i(he,` adds the all-MLP decoder head on
top to perform semantic segmentation of images. In addition, there\u2019s
`),Yr=a(he,"A",{href:!0});var hf=n(Yr);Xs=i(hf,"SegformerForImageClassification"),hf.forEach(t),Zs=i(he,` which can be used to - you guessed it - classify images. The
authors of SegFormer first pre-trained the Transformer encoder on ImageNet-1k to classify images. Next, they throw
away the classification head, and replace it by the all-MLP decode head. Next, they fine-tune the model altogether on
ADE20K, Cityscapes and COCO-stuff, which are important benchmarks for semantic segmentation. All checkpoints can be
found on the `),Ct=a(he,"A",{href:!0,rel:!0});var gf=n(Ct);Qs=i(gf,"hub"),gf.forEach(t),ei=i(he,"."),he.forEach(t),ti=m(C),ue=a(C,"LI",{});var Ro=n(ue);ri=i(Ro,"The quickest way to get started with SegFormer is by checking the "),Pt=a(Ro,"A",{href:!0,rel:!0});var pf=n(Pt);oi=i(pf,"example notebooks"),pf.forEach(t),ai=i(Ro,` (which showcase both inference and
fine-tuning on custom data). One can also check out the `),At=a(Ro,"A",{href:!0,rel:!0});var uf=n(At);ni=i(uf,"blog post"),uf.forEach(t),si=i(Ro," introducing SegFormer and illustrating how it can be fine-tuned on custom data."),Ro.forEach(t),ii=m(C),Dt=a(C,"LI",{});var Qn=n(Dt);li=i(Qn,"TensorFlow users should refer to "),zt=a(Qn,"A",{href:!0,rel:!0});var _f=n(zt);di=i(_f,"this repository"),_f.forEach(t),ci=i(Qn," that shows off-the-shelf inference and fine-tuning."),Qn.forEach(t),mi=m(C),qt=a(C,"LI",{});var es=n(qt);fi=i(es,"One can also check out "),Lt=a(es,"A",{href:!0,rel:!0});var bf=n(Lt);hi=i(bf,"this interactive demo on Hugging Face Spaces"),bf.forEach(t),gi=i(es,`
to try out a SegFormer model on custom images.`),es.forEach(t),pi=m(C),Ot=a(C,"LI",{});var ts=n(Ot);ui=i(ts,"SegFormer works on any input size, as it pads the input to be divisible by "),na=a(ts,"CODE",{});var vf=n(na);_i=i(vf,"config.patch_sizes"),vf.forEach(t),bi=i(ts,"."),ts.forEach(t),vi=m(C),_e=a(C,"LI",{});var Bo=n(_e);wi=i(Bo,"One can use "),Jr=a(Bo,"A",{href:!0});var wf=n(Jr);Si=i(wf,"SegformerFeatureExtractor"),wf.forEach(t),$i=i(Bo,` to prepare images and corresponding segmentation maps
for the model. Note that this feature extractor is fairly basic and does not include all data augmentations used in
the original paper. The original preprocessing pipelines (for the ADE20k dataset for instance) can be found `),Nt=a(Bo,"A",{href:!0,rel:!0});var Sf=n(Nt);Ti=i(Sf,"here"),Sf.forEach(t),Fi=i(Bo,`. The most
important preprocessing step is that images and segmentation maps are randomly cropped and padded to the same size,
such as 512x512 or 640x640, after which they are normalized.`),Bo.forEach(t),yi=m(C),k=a(C,"LI",{});var I=n(k);Ei=i(I,"One additional thing to keep in mind is that one can initialize "),Xr=a(I,"A",{href:!0});var $f=n(Xr);xi=i($f,"SegformerFeatureExtractor"),$f.forEach(t),ki=i(I,` with
`),sa=a(I,"CODE",{});var Tf=n(sa);Mi=i(Tf,"reduce_labels"),Tf.forEach(t),Ii=i(I," set to "),ia=a(I,"CODE",{});var Ff=n(ia);ji=i(Ff,"True"),Ff.forEach(t),Ci=i(I," or "),la=a(I,"CODE",{});var yf=n(la);Pi=i(yf,"False"),yf.forEach(t),Ai=i(I,`. In some datasets (like ADE20k), the 0 index is used in the annotated
segmentation maps for background. However, ADE20k doesn\u2019t include the \u201Cbackground\u201D class in its 150 labels.
Therefore, `),da=a(I,"CODE",{});var Ef=n(da);Di=i(Ef,"reduce_labels"),Ef.forEach(t),zi=i(I,` is used to reduce all labels by 1, and to make sure no loss is computed for the
background class (i.e. it replaces 0 in the annotated maps by 255, which is the `),ca=a(I,"EM",{});var xf=n(ca);qi=i(xf,"ignore_index"),xf.forEach(t),Li=i(I,` of the loss function
used by `),Zr=a(I,"A",{href:!0});var kf=n(Zr);Oi=i(kf,"SegformerForSemanticSegmentation"),kf.forEach(t),Ni=i(I,`). However, other datasets use the 0 index as
background class and include this class as part of all labels. In that case, `),ma=a(I,"CODE",{});var Mf=n(ma);Hi=i(Mf,"reduce_labels"),Mf.forEach(t),Wi=i(I,` should be set to
`),fa=a(I,"CODE",{});var If=n(fa);Ri=i(If,"False"),If.forEach(t),Bi=i(I,", as loss should also be computed for the background class."),I.forEach(t),Ui=m(C),Ht=a(C,"LI",{});var rs=n(Ht);Vi=i(rs,`As most models, SegFormer comes in different sizes, the details of which can be found in the table below
(taken from Table 7 of the `),Wt=a(rs,"A",{href:!0,rel:!0});var jf=n(Wt);Ki=i(jf,"original paper"),jf.forEach(t),Gi=i(rs,")."),rs.forEach(t),C.forEach(t),In=m(r),He=a(r,"TABLE",{});var os=n(He);ha=a(os,"THEAD",{});var Cf=n(ha);P=a(Cf,"TR",{});var te=n(P);Qr=a(te,"TH",{align:!0});var Pf=n(Qr);ga=a(Pf,"STRONG",{});var Af=n(ga);Yi=i(Af,"Model variant"),Af.forEach(t),Pf.forEach(t),Ji=m(te),pa=a(te,"TH",{});var Df=n(pa);ua=a(Df,"STRONG",{});var zf=n(ua);Xi=i(zf,"Depths"),zf.forEach(t),Df.forEach(t),Zi=m(te),_a=a(te,"TH",{});var qf=n(_a);ba=a(qf,"STRONG",{});var Lf=n(ba);Qi=i(Lf,"Hidden sizes"),Lf.forEach(t),qf.forEach(t),el=m(te),eo=a(te,"TH",{align:!0});var Of=n(eo);va=a(Of,"STRONG",{});var Nf=n(va);tl=i(Nf,"Decoder hidden size"),Nf.forEach(t),Of.forEach(t),rl=m(te),to=a(te,"TH",{align:!0});var Hf=n(to);wa=a(Hf,"STRONG",{});var Wf=n(wa);ol=i(Wf,"Params (M)"),Wf.forEach(t),Hf.forEach(t),al=m(te),ro=a(te,"TH",{align:!0});var Rf=n(ro);Sa=a(Rf,"STRONG",{});var Bf=n(Sa);nl=i(Bf,"ImageNet-1k Top 1"),Bf.forEach(t),Rf.forEach(t),te.forEach(t),Cf.forEach(t),sl=m(os),A=a(os,"TBODY",{});var re=n(A);D=a(re,"TR",{});var oe=n(D);oo=a(oe,"TD",{align:!0});var Uf=n(oo);il=i(Uf,"MiT-b0"),Uf.forEach(t),ll=m(oe),$a=a(oe,"TD",{});var Vf=n($a);dl=i(Vf,"[2, 2, 2, 2]"),Vf.forEach(t),cl=m(oe),Ta=a(oe,"TD",{});var Kf=n(Ta);ml=i(Kf,"[32, 64, 160, 256]"),Kf.forEach(t),fl=m(oe),ao=a(oe,"TD",{align:!0});var Gf=n(ao);hl=i(Gf,"256"),Gf.forEach(t),gl=m(oe),no=a(oe,"TD",{align:!0});var Yf=n(no);pl=i(Yf,"3.7"),Yf.forEach(t),ul=m(oe),so=a(oe,"TD",{align:!0});var Jf=n(so);_l=i(Jf,"70.5"),Jf.forEach(t),oe.forEach(t),bl=m(re),z=a(re,"TR",{});var ae=n(z);io=a(ae,"TD",{align:!0});var Xf=n(io);vl=i(Xf,"MiT-b1"),Xf.forEach(t),wl=m(ae),Fa=a(ae,"TD",{});var Zf=n(Fa);Sl=i(Zf,"[2, 2, 2, 2]"),Zf.forEach(t),$l=m(ae),ya=a(ae,"TD",{});var Qf=n(ya);Tl=i(Qf,"[64, 128, 320, 512]"),Qf.forEach(t),Fl=m(ae),lo=a(ae,"TD",{align:!0});var eh=n(lo);yl=i(eh,"256"),eh.forEach(t),El=m(ae),co=a(ae,"TD",{align:!0});var th=n(co);xl=i(th,"14.0"),th.forEach(t),kl=m(ae),mo=a(ae,"TD",{align:!0});var rh=n(mo);Ml=i(rh,"78.7"),rh.forEach(t),ae.forEach(t),Il=m(re),q=a(re,"TR",{});var ne=n(q);fo=a(ne,"TD",{align:!0});var oh=n(fo);jl=i(oh,"MiT-b2"),oh.forEach(t),Cl=m(ne),Ea=a(ne,"TD",{});var ah=n(Ea);Pl=i(ah,"[3, 4, 6, 3]"),ah.forEach(t),Al=m(ne),xa=a(ne,"TD",{});var nh=n(xa);Dl=i(nh,"[64, 128, 320, 512]"),nh.forEach(t),zl=m(ne),ho=a(ne,"TD",{align:!0});var sh=n(ho);ql=i(sh,"768"),sh.forEach(t),Ll=m(ne),go=a(ne,"TD",{align:!0});var ih=n(go);Ol=i(ih,"25.4"),ih.forEach(t),Nl=m(ne),po=a(ne,"TD",{align:!0});var lh=n(po);Hl=i(lh,"81.6"),lh.forEach(t),ne.forEach(t),Wl=m(re),L=a(re,"TR",{});var se=n(L);uo=a(se,"TD",{align:!0});var dh=n(uo);Rl=i(dh,"MiT-b3"),dh.forEach(t),Bl=m(se),ka=a(se,"TD",{});var ch=n(ka);Ul=i(ch,"[3, 4, 18, 3]"),ch.forEach(t),Vl=m(se),Ma=a(se,"TD",{});var mh=n(Ma);Kl=i(mh,"[64, 128, 320, 512]"),mh.forEach(t),Gl=m(se),_o=a(se,"TD",{align:!0});var fh=n(_o);Yl=i(fh,"768"),fh.forEach(t),Jl=m(se),bo=a(se,"TD",{align:!0});var hh=n(bo);Xl=i(hh,"45.2"),hh.forEach(t),Zl=m(se),vo=a(se,"TD",{align:!0});var gh=n(vo);Ql=i(gh,"83.1"),gh.forEach(t),se.forEach(t),ed=m(re),O=a(re,"TR",{});var ie=n(O);wo=a(ie,"TD",{align:!0});var ph=n(wo);td=i(ph,"MiT-b4"),ph.forEach(t),rd=m(ie),Ia=a(ie,"TD",{});var uh=n(Ia);od=i(uh,"[3, 8, 27, 3]"),uh.forEach(t),ad=m(ie),ja=a(ie,"TD",{});var _h=n(ja);nd=i(_h,"[64, 128, 320, 512]"),_h.forEach(t),sd=m(ie),So=a(ie,"TD",{align:!0});var bh=n(So);id=i(bh,"768"),bh.forEach(t),ld=m(ie),$o=a(ie,"TD",{align:!0});var vh=n($o);dd=i(vh,"62.6"),vh.forEach(t),cd=m(ie),To=a(ie,"TD",{align:!0});var wh=n(To);md=i(wh,"83.6"),wh.forEach(t),ie.forEach(t),fd=m(re),N=a(re,"TR",{});var le=n(N);Fo=a(le,"TD",{align:!0});var Sh=n(Fo);hd=i(Sh,"MiT-b5"),Sh.forEach(t),gd=m(le),Ca=a(le,"TD",{});var $h=n(Ca);pd=i($h,"[3, 6, 40, 3]"),$h.forEach(t),ud=m(le),Pa=a(le,"TD",{});var Th=n(Pa);_d=i(Th,"[64, 128, 320, 512]"),Th.forEach(t),bd=m(le),yo=a(le,"TD",{align:!0});var Fh=n(yo);vd=i(Fh,"768"),Fh.forEach(t),wd=m(le),Eo=a(le,"TD",{align:!0});var yh=n(Eo);Sd=i(yh,"82.0"),yh.forEach(t),$d=m(le),xo=a(le,"TD",{align:!0});var Eh=n(xo);Td=i(Eh,"83.8"),Eh.forEach(t),le.forEach(t),re.forEach(t),os.forEach(t),jn=m(r),We=a(r,"P",{});var as=n(We);Fd=i(as,`Note that MiT in the above table refers to the Mix Transformer encoder backbone introduced in SegFormer. For
SegFormer\u2019s results on the segmentation datasets like ADE20k, refer to the `),Rt=a(as,"A",{href:!0,rel:!0});var xh=n(Rt);yd=i(xh,"paper"),xh.forEach(t),Ed=i(as,"."),as.forEach(t),Cn=m(r),be=a(r,"H2",{class:!0});var ns=n(be);Re=a(ns,"A",{id:!0,class:!0,href:!0});var kh=n(Re);Aa=a(kh,"SPAN",{});var Mh=n(Aa);S(Bt.$$.fragment,Mh),Mh.forEach(t),kh.forEach(t),xd=m(ns),Da=a(ns,"SPAN",{});var Ih=n(Da);kd=i(Ih,"SegformerConfig"),Ih.forEach(t),ns.forEach(t),Pn=m(r),R=a(r,"DIV",{class:!0});var gt=n(R);S(Ut.$$.fragment,gt),Md=m(gt),ve=a(gt,"P",{});var Uo=n(ve);Id=i(Uo,"This is the configuration class to store the configuration of a "),ko=a(Uo,"A",{href:!0});var jh=n(ko);jd=i(jh,"SegformerModel"),jh.forEach(t),Cd=i(Uo,`. It is used to instantiate an
SegFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the SegFormer
`),Vt=a(Uo,"A",{href:!0,rel:!0});var Ch=n(Vt);Pd=i(Ch,"nvidia/segformer-b0-finetuned-ade-512-512"),Ch.forEach(t),Ad=i(Uo,`
architecture.`),Uo.forEach(t),Dd=m(gt),we=a(gt,"P",{});var Vo=n(we);zd=i(Vo,"Configuration objects inherit from "),Mo=a(Vo,"A",{href:!0});var Ph=n(Mo);qd=i(Ph,"PretrainedConfig"),Ph.forEach(t),Ld=i(Vo,` and can be used to control the model outputs. Read the
documentation from `),Io=a(Vo,"A",{href:!0});var Ah=n(Io);Od=i(Ah,"PretrainedConfig"),Ah.forEach(t),Nd=i(Vo," for more information."),Vo.forEach(t),Hd=m(gt),S(Be.$$.fragment,gt),gt.forEach(t),An=m(r),Se=a(r,"H2",{class:!0});var ss=n(Se);Ue=a(ss,"A",{id:!0,class:!0,href:!0});var Dh=n(Ue);za=a(Dh,"SPAN",{});var zh=n(za);S(Kt.$$.fragment,zh),zh.forEach(t),Dh.forEach(t),Wd=m(ss),qa=a(ss,"SPAN",{});var qh=n(qa);Rd=i(qh,"SegformerFeatureExtractor"),qh.forEach(t),ss.forEach(t),Dn=m(r),B=a(r,"DIV",{class:!0});var pt=n(B);S(Gt.$$.fragment,pt),Bd=m(pt),La=a(pt,"P",{});var Lh=n(La);Ud=i(Lh,"Constructs a SegFormer feature extractor."),Lh.forEach(t),Vd=m(pt),Yt=a(pt,"P",{});var is=n(Yt);Kd=i(is,"This feature extractor inherits from "),jo=a(is,"A",{href:!0});var Oh=n(jo);Gd=i(Oh,"FeatureExtractionMixin"),Oh.forEach(t),Yd=i(is,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),is.forEach(t),Jd=m(pt),fe=a(pt,"DIV",{class:!0});var Ko=n(fe);S(Jt.$$.fragment,Ko),Xd=m(Ko),Oa=a(Ko,"P",{});var Nh=n(Oa);Zd=i(Nh,"Main method to prepare for the model one or several image(s) and optional corresponding segmentation maps."),Nh.forEach(t),Qd=m(Ko),S(Ve.$$.fragment,Ko),Ko.forEach(t),pt.forEach(t),zn=m(r),$e=a(r,"H2",{class:!0});var ls=n($e);Ke=a(ls,"A",{id:!0,class:!0,href:!0});var Hh=n(Ke);Na=a(Hh,"SPAN",{});var Wh=n(Na);S(Xt.$$.fragment,Wh),Wh.forEach(t),Hh.forEach(t),ec=m(ls),Ha=a(ls,"SPAN",{});var Rh=n(Ha);tc=i(Rh,"SegformerModel"),Rh.forEach(t),ls.forEach(t),qn=m(r),ce=a(r,"DIV",{class:!0});var Go=n(ce);S(Zt.$$.fragment,Go),rc=m(Go),Qt=a(Go,"P",{});var ds=n(Qt);oc=i(ds,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),er=a(ds,"A",{href:!0,rel:!0});var Bh=n(er);ac=i(Bh,"torch.nn.Module"),Bh.forEach(t),nc=i(ds,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ds.forEach(t),sc=m(Go),Y=a(Go,"DIV",{class:!0});var ut=n(Y);S(tr.$$.fragment,ut),ic=m(ut),Te=a(ut,"P",{});var Yo=n(Te);lc=i(Yo,"The "),Co=a(Yo,"A",{href:!0});var Uh=n(Co);dc=i(Uh,"SegformerModel"),Uh.forEach(t),cc=i(Yo," forward method, overrides the "),Wa=a(Yo,"CODE",{});var Vh=n(Wa);mc=i(Vh,"__call__"),Vh.forEach(t),fc=i(Yo," special method."),Yo.forEach(t),hc=m(ut),S(Ge.$$.fragment,ut),gc=m(ut),S(Ye.$$.fragment,ut),ut.forEach(t),Go.forEach(t),Ln=m(r),Fe=a(r,"H2",{class:!0});var cs=n(Fe);Je=a(cs,"A",{id:!0,class:!0,href:!0});var Kh=n(Je);Ra=a(Kh,"SPAN",{});var Gh=n(Ra);S(rr.$$.fragment,Gh),Gh.forEach(t),Kh.forEach(t),pc=m(cs),Ba=a(cs,"SPAN",{});var Yh=n(Ba);uc=i(Yh,"SegformerDecodeHead"),Yh.forEach(t),cs.forEach(t),On=m(r),ye=a(r,"DIV",{class:!0});var ms=n(ye);S(or.$$.fragment,ms),_c=m(ms),Po=a(ms,"DIV",{class:!0});var Jh=n(Po);S(ar.$$.fragment,Jh),Jh.forEach(t),ms.forEach(t),Nn=m(r),Ee=a(r,"H2",{class:!0});var fs=n(Ee);Xe=a(fs,"A",{id:!0,class:!0,href:!0});var Xh=n(Xe);Ua=a(Xh,"SPAN",{});var Zh=n(Ua);S(nr.$$.fragment,Zh),Zh.forEach(t),Xh.forEach(t),bc=m(fs),Va=a(fs,"SPAN",{});var Qh=n(Va);vc=i(Qh,"SegformerForImageClassification"),Qh.forEach(t),fs.forEach(t),Hn=m(r),U=a(r,"DIV",{class:!0});var _t=n(U);S(sr.$$.fragment,_t),wc=m(_t),Ka=a(_t,"P",{});var eg=n(Ka);Sc=i(eg,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),eg.forEach(t),$c=m(_t),ir=a(_t,"P",{});var hs=n(ir);Tc=i(hs,"This model is a PyTorch "),lr=a(hs,"A",{href:!0,rel:!0});var tg=n(lr);Fc=i(tg,"torch.nn.Module"),tg.forEach(t),yc=i(hs,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),hs.forEach(t),Ec=m(_t),J=a(_t,"DIV",{class:!0});var bt=n(J);S(dr.$$.fragment,bt),xc=m(bt),xe=a(bt,"P",{});var Jo=n(xe);kc=i(Jo,"The "),Ao=a(Jo,"A",{href:!0});var rg=n(Ao);Mc=i(rg,"SegformerForImageClassification"),rg.forEach(t),Ic=i(Jo," forward method, overrides the "),Ga=a(Jo,"CODE",{});var og=n(Ga);jc=i(og,"__call__"),og.forEach(t),Cc=i(Jo," special method."),Jo.forEach(t),Pc=m(bt),S(Ze.$$.fragment,bt),Ac=m(bt),S(Qe.$$.fragment,bt),bt.forEach(t),_t.forEach(t),Wn=m(r),ke=a(r,"H2",{class:!0});var gs=n(ke);et=a(gs,"A",{id:!0,class:!0,href:!0});var ag=n(et);Ya=a(ag,"SPAN",{});var ng=n(Ya);S(cr.$$.fragment,ng),ng.forEach(t),ag.forEach(t),Dc=m(gs),Ja=a(gs,"SPAN",{});var sg=n(Ja);zc=i(sg,"SegformerForSemanticSegmentation"),sg.forEach(t),gs.forEach(t),Rn=m(r),me=a(r,"DIV",{class:!0});var Xo=n(me);S(mr.$$.fragment,Xo),qc=m(Xo),fr=a(Xo,"P",{});var ps=n(fr);Lc=i(ps,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model is a PyTorch `),hr=a(ps,"A",{href:!0,rel:!0});var ig=n(hr);Oc=i(ig,"torch.nn.Module"),ig.forEach(t),Nc=i(ps,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ps.forEach(t),Hc=m(Xo),X=a(Xo,"DIV",{class:!0});var vt=n(X);S(gr.$$.fragment,vt),Wc=m(vt),Me=a(vt,"P",{});var Zo=n(Me);Rc=i(Zo,"The "),Do=a(Zo,"A",{href:!0});var lg=n(Do);Bc=i(lg,"SegformerForSemanticSegmentation"),lg.forEach(t),Uc=i(Zo," forward method, overrides the "),Xa=a(Zo,"CODE",{});var dg=n(Xa);Vc=i(dg,"__call__"),dg.forEach(t),Kc=i(Zo," special method."),Zo.forEach(t),Gc=m(vt),S(tt.$$.fragment,vt),Yc=m(vt),S(rt.$$.fragment,vt),vt.forEach(t),Xo.forEach(t),Bn=m(r),Ie=a(r,"H2",{class:!0});var us=n(Ie);ot=a(us,"A",{id:!0,class:!0,href:!0});var cg=n(ot);Za=a(cg,"SPAN",{});var mg=n(Za);S(pr.$$.fragment,mg),mg.forEach(t),cg.forEach(t),Jc=m(us),Qa=a(us,"SPAN",{});var fg=n(Qa);Xc=i(fg,"TFSegformerDecodeHead"),fg.forEach(t),us.forEach(t),Un=m(r),je=a(r,"DIV",{class:!0});var _s=n(je);S(ur.$$.fragment,_s),Zc=m(_s),zo=a(_s,"DIV",{class:!0});var hg=n(zo);S(_r.$$.fragment,hg),hg.forEach(t),_s.forEach(t),Vn=m(r),Ce=a(r,"H2",{class:!0});var bs=n(Ce);at=a(bs,"A",{id:!0,class:!0,href:!0});var gg=n(at);en=a(gg,"SPAN",{});var pg=n(en);S(br.$$.fragment,pg),pg.forEach(t),gg.forEach(t),Qc=m(bs),tn=a(bs,"SPAN",{});var ug=n(tn);em=i(ug,"TFSegformerModel"),ug.forEach(t),bs.forEach(t),Kn=m(r),V=a(r,"DIV",{class:!0});var wt=n(V);S(vr.$$.fragment,wt),tm=m(wt),wr=a(wt,"P",{});var vs=n(wr);rm=i(vs,`The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.
This model inherits from `),qo=a(vs,"A",{href:!0});var _g=n(qo);om=i(_g,"TFPreTrainedModel"),_g.forEach(t),am=i(vs,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vs.forEach(t),nm=m(wt),Sr=a(wt,"P",{});var ws=n(Sr);sm=i(ws,"This model is also a "),$r=a(ws,"A",{href:!0,rel:!0});var bg=n($r);im=i(bg,"tf.keras.Model"),bg.forEach(t),lm=i(ws,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ws.forEach(t),dm=m(wt),Z=a(wt,"DIV",{class:!0});var St=n(Z);S(Tr.$$.fragment,St),cm=m(St),Pe=a(St,"P",{});var Qo=n(Pe);mm=i(Qo,"The "),Lo=a(Qo,"A",{href:!0});var vg=n(Lo);fm=i(vg,"TFSegformerModel"),vg.forEach(t),hm=i(Qo," forward method, overrides the "),rn=a(Qo,"CODE",{});var wg=n(rn);gm=i(wg,"__call__"),wg.forEach(t),pm=i(Qo," special method."),Qo.forEach(t),um=m(St),S(nt.$$.fragment,St),_m=m(St),S(st.$$.fragment,St),St.forEach(t),wt.forEach(t),Gn=m(r),Ae=a(r,"H2",{class:!0});var Ss=n(Ae);it=a(Ss,"A",{id:!0,class:!0,href:!0});var Sg=n(it);on=a(Sg,"SPAN",{});var $g=n(on);S(Fr.$$.fragment,$g),$g.forEach(t),Sg.forEach(t),bm=m(Ss),an=a(Ss,"SPAN",{});var Tg=n(an);vm=i(Tg,"TFSegformerForImageClassification"),Tg.forEach(t),Ss.forEach(t),Yn=m(r),H=a(r,"DIV",{class:!0});var ge=n(H);S(yr.$$.fragment,ge),wm=m(ge),nn=a(ge,"P",{});var Fg=n(nn);Sm=i(Fg,`SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden
states) e.g. for ImageNet.`),Fg.forEach(t),$m=m(ge),Er=a(ge,"P",{});var $s=n(Er);Tm=i($s,"This model inherits from "),Oo=a($s,"A",{href:!0});var yg=n(Oo);Fm=i(yg,"TFPreTrainedModel"),yg.forEach(t),ym=i($s,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),$s.forEach(t),Em=m(ge),xr=a(ge,"P",{});var Ts=n(xr);xm=i(Ts,"This model is also a "),kr=a(Ts,"A",{href:!0,rel:!0});var Eg=n(kr);km=i(Eg,"tf.keras.Model"),Eg.forEach(t),Mm=i(Ts,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ts.forEach(t),Im=m(ge),Q=a(ge,"DIV",{class:!0});var $t=n(Q);S(Mr.$$.fragment,$t),jm=m($t),De=a($t,"P",{});var ea=n(De);Cm=i(ea,"The "),No=a(ea,"A",{href:!0});var xg=n(No);Pm=i(xg,"TFSegformerForImageClassification"),xg.forEach(t),Am=i(ea," forward method, overrides the "),sn=a(ea,"CODE",{});var kg=n(sn);Dm=i(kg,"__call__"),kg.forEach(t),zm=i(ea," special method."),ea.forEach(t),qm=m($t),S(lt.$$.fragment,$t),Lm=m($t),S(dt.$$.fragment,$t),$t.forEach(t),ge.forEach(t),Jn=m(r),ze=a(r,"H2",{class:!0});var Fs=n(ze);ct=a(Fs,"A",{id:!0,class:!0,href:!0});var Mg=n(ct);ln=a(Mg,"SPAN",{});var Ig=n(ln);S(Ir.$$.fragment,Ig),Ig.forEach(t),Mg.forEach(t),Om=m(Fs),dn=a(Fs,"SPAN",{});var jg=n(dn);Nm=i(jg,"TFSegformerForSemanticSegmentation"),jg.forEach(t),Fs.forEach(t),Xn=m(r),K=a(r,"DIV",{class:!0});var Tt=n(K);S(jr.$$.fragment,Tt),Hm=m(Tt),Cr=a(Tt,"P",{});var ys=n(Cr);Wm=i(ys,`SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.
This model inherits from `),Ho=a(ys,"A",{href:!0});var Cg=n(Ho);Rm=i(Cg,"TFPreTrainedModel"),Cg.forEach(t),Bm=i(ys,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ys.forEach(t),Um=m(Tt),Pr=a(Tt,"P",{});var Es=n(Pr);Vm=i(Es,"This model is also a "),Ar=a(Es,"A",{href:!0,rel:!0});var Pg=n(Ar);Km=i(Pg,"tf.keras.Model"),Pg.forEach(t),Gm=i(Es,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Es.forEach(t),Ym=m(Tt),ee=a(Tt,"DIV",{class:!0});var Ft=n(ee);S(Dr.$$.fragment,Ft),Jm=m(Ft),qe=a(Ft,"P",{});var ta=n(qe);Xm=i(ta,"The "),Wo=a(ta,"A",{href:!0});var Ag=n(Wo);Zm=i(Ag,"TFSegformerForSemanticSegmentation"),Ag.forEach(t),Qm=i(ta," forward method, overrides the "),cn=a(ta,"CODE",{});var Dg=n(cn);ef=i(Dg,"__call__"),Dg.forEach(t),tf=i(ta," special method."),ta.forEach(t),rf=m(Ft),S(mt.$$.fragment,Ft),of=m(Ft),S(ft.$$.fragment,Ft),Ft.forEach(t),Tt.forEach(t),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(op)),l(p,"id","segformer"),l(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(p,"href","#segformer"),l(u,"class","relative group"),l(Le,"id","overview"),l(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Le,"href","#overview"),l(pe,"class","relative group"),l(Et,"href","https://arxiv.org/abs/2105.15203"),l(Et,"rel","nofollow"),l(xt,"href","https://arxiv.org/abs/2105.15203"),l(xt,"rel","nofollow"),l(kt,"width","600"),Ng(kt.src,af="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/segformer_architecture.png")||l(kt,"src",af),l(Mt,"href","https://huggingface.co/nielsr"),l(Mt,"rel","nofollow"),l(It,"href","https://huggingface.co/sayakpaul"),l(It,"rel","nofollow"),l(jt,"href","https://github.com/NVlabs/SegFormer"),l(jt,"rel","nofollow"),l(Kr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(Gr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Yr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(Ct,"href","https://huggingface.co/models?other=segformer"),l(Ct,"rel","nofollow"),l(Pt,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/SegFormer"),l(Pt,"rel","nofollow"),l(At,"href","https://huggingface.co/blog/fine-tune-segformer"),l(At,"rel","nofollow"),l(zt,"href","https://github.com/deep-diver/segformer-tf-transformers"),l(zt,"rel","nofollow"),l(Lt,"href","https://huggingface.co/spaces/chansung/segformer-tf-transformers"),l(Lt,"rel","nofollow"),l(Jr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),l(Nt,"href","https://github.com/NVlabs/SegFormer/blob/master/local_configs/_base_/datasets/ade20k_repeat.py"),l(Nt,"rel","nofollow"),l(Xr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),l(Zr,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(Wt,"href","https://arxiv.org/abs/2105.15203"),l(Wt,"rel","nofollow"),l(Qr,"align","center"),l(eo,"align","center"),l(to,"align","center"),l(ro,"align","center"),l(oo,"align","center"),l(ao,"align","center"),l(no,"align","center"),l(so,"align","center"),l(io,"align","center"),l(lo,"align","center"),l(co,"align","center"),l(mo,"align","center"),l(fo,"align","center"),l(ho,"align","center"),l(go,"align","center"),l(po,"align","center"),l(uo,"align","center"),l(_o,"align","center"),l(bo,"align","center"),l(vo,"align","center"),l(wo,"align","center"),l(So,"align","center"),l($o,"align","center"),l(To,"align","center"),l(Fo,"align","center"),l(yo,"align","center"),l(Eo,"align","center"),l(xo,"align","center"),l(Rt,"href","https://arxiv.org/abs/2105.15203"),l(Rt,"rel","nofollow"),l(Re,"id","transformers.SegformerConfig"),l(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Re,"href","#transformers.SegformerConfig"),l(be,"class","relative group"),l(ko,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(Vt,"href","https://huggingface.co/nvidia/segformer-b0-finetuned-ade-512-512"),l(Vt,"rel","nofollow"),l(Mo,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(Io,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ue,"id","transformers.SegformerFeatureExtractor"),l(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ue,"href","#transformers.SegformerFeatureExtractor"),l(Se,"class","relative group"),l(jo,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ke,"id","transformers.SegformerModel"),l(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ke,"href","#transformers.SegformerModel"),l($e,"class","relative group"),l(er,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(er,"rel","nofollow"),l(Co,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),l(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Je,"id","transformers.SegformerDecodeHead"),l(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Je,"href","#transformers.SegformerDecodeHead"),l(Fe,"class","relative group"),l(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Xe,"id","transformers.SegformerForImageClassification"),l(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Xe,"href","#transformers.SegformerForImageClassification"),l(Ee,"class","relative group"),l(lr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(lr,"rel","nofollow"),l(Ao,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),l(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(et,"id","transformers.SegformerForSemanticSegmentation"),l(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(et,"href","#transformers.SegformerForSemanticSegmentation"),l(ke,"class","relative group"),l(hr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(hr,"rel","nofollow"),l(Do,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),l(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ot,"id","transformers.TFSegformerDecodeHead"),l(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ot,"href","#transformers.TFSegformerDecodeHead"),l(Ie,"class","relative group"),l(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(at,"id","transformers.TFSegformerModel"),l(at,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(at,"href","#transformers.TFSegformerModel"),l(Ce,"class","relative group"),l(qo,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l($r,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l($r,"rel","nofollow"),l(Lo,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),l(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(it,"id","transformers.TFSegformerForImageClassification"),l(it,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(it,"href","#transformers.TFSegformerForImageClassification"),l(Ae,"class","relative group"),l(Oo,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l(kr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(kr,"rel","nofollow"),l(No,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),l(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ct,"id","transformers.TFSegformerForSemanticSegmentation"),l(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ct,"href","#transformers.TFSegformerForSemanticSegmentation"),l(ze,"class","relative group"),l(Ho,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),l(Ar,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Ar,"rel","nofollow"),l(Wo,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),l(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(r,h){e(document.head,f),_(r,v,h),_(r,u,h),e(u,p),e(p,b),$(d,b,null),e(u,g),e(u,x),e(x,xs),_(r,Sn,h),_(r,pe,h),e(pe,Le),e(Le,ra),$(yt,ra,null),e(pe,ks),e(pe,oa),e(oa,Ms),_(r,$n,h),_(r,Oe,h),e(Oe,Is),e(Oe,Et),e(Et,js),e(Oe,Cs),_(r,Tn,h),_(r,Br,h),e(Br,Ps),_(r,Fn,h),_(r,Ur,h),e(Ur,aa),e(aa,As),_(r,yn,h),_(r,Ne,h),e(Ne,Ds),e(Ne,xt),e(xt,zs),e(Ne,qs),_(r,En,h),_(r,kt,h),_(r,xn,h),_(r,G,h),e(G,Ls),e(G,Mt),e(Mt,Os),e(G,Ns),e(G,It),e(It,Hs),e(G,Ws),e(G,jt),e(jt,Rs),e(G,Bs),_(r,kn,h),_(r,Vr,h),e(Vr,Us),_(r,Mn,h),_(r,M,h),e(M,W),e(W,Vs),e(W,Kr),e(Kr,Ks),e(W,Gs),e(W,Gr),e(Gr,Ys),e(W,Js),e(W,Yr),e(Yr,Xs),e(W,Zs),e(W,Ct),e(Ct,Qs),e(W,ei),e(M,ti),e(M,ue),e(ue,ri),e(ue,Pt),e(Pt,oi),e(ue,ai),e(ue,At),e(At,ni),e(ue,si),e(M,ii),e(M,Dt),e(Dt,li),e(Dt,zt),e(zt,di),e(Dt,ci),e(M,mi),e(M,qt),e(qt,fi),e(qt,Lt),e(Lt,hi),e(qt,gi),e(M,pi),e(M,Ot),e(Ot,ui),e(Ot,na),e(na,_i),e(Ot,bi),e(M,vi),e(M,_e),e(_e,wi),e(_e,Jr),e(Jr,Si),e(_e,$i),e(_e,Nt),e(Nt,Ti),e(_e,Fi),e(M,yi),e(M,k),e(k,Ei),e(k,Xr),e(Xr,xi),e(k,ki),e(k,sa),e(sa,Mi),e(k,Ii),e(k,ia),e(ia,ji),e(k,Ci),e(k,la),e(la,Pi),e(k,Ai),e(k,da),e(da,Di),e(k,zi),e(k,ca),e(ca,qi),e(k,Li),e(k,Zr),e(Zr,Oi),e(k,Ni),e(k,ma),e(ma,Hi),e(k,Wi),e(k,fa),e(fa,Ri),e(k,Bi),e(M,Ui),e(M,Ht),e(Ht,Vi),e(Ht,Wt),e(Wt,Ki),e(Ht,Gi),_(r,In,h),_(r,He,h),e(He,ha),e(ha,P),e(P,Qr),e(Qr,ga),e(ga,Yi),e(P,Ji),e(P,pa),e(pa,ua),e(ua,Xi),e(P,Zi),e(P,_a),e(_a,ba),e(ba,Qi),e(P,el),e(P,eo),e(eo,va),e(va,tl),e(P,rl),e(P,to),e(to,wa),e(wa,ol),e(P,al),e(P,ro),e(ro,Sa),e(Sa,nl),e(He,sl),e(He,A),e(A,D),e(D,oo),e(oo,il),e(D,ll),e(D,$a),e($a,dl),e(D,cl),e(D,Ta),e(Ta,ml),e(D,fl),e(D,ao),e(ao,hl),e(D,gl),e(D,no),e(no,pl),e(D,ul),e(D,so),e(so,_l),e(A,bl),e(A,z),e(z,io),e(io,vl),e(z,wl),e(z,Fa),e(Fa,Sl),e(z,$l),e(z,ya),e(ya,Tl),e(z,Fl),e(z,lo),e(lo,yl),e(z,El),e(z,co),e(co,xl),e(z,kl),e(z,mo),e(mo,Ml),e(A,Il),e(A,q),e(q,fo),e(fo,jl),e(q,Cl),e(q,Ea),e(Ea,Pl),e(q,Al),e(q,xa),e(xa,Dl),e(q,zl),e(q,ho),e(ho,ql),e(q,Ll),e(q,go),e(go,Ol),e(q,Nl),e(q,po),e(po,Hl),e(A,Wl),e(A,L),e(L,uo),e(uo,Rl),e(L,Bl),e(L,ka),e(ka,Ul),e(L,Vl),e(L,Ma),e(Ma,Kl),e(L,Gl),e(L,_o),e(_o,Yl),e(L,Jl),e(L,bo),e(bo,Xl),e(L,Zl),e(L,vo),e(vo,Ql),e(A,ed),e(A,O),e(O,wo),e(wo,td),e(O,rd),e(O,Ia),e(Ia,od),e(O,ad),e(O,ja),e(ja,nd),e(O,sd),e(O,So),e(So,id),e(O,ld),e(O,$o),e($o,dd),e(O,cd),e(O,To),e(To,md),e(A,fd),e(A,N),e(N,Fo),e(Fo,hd),e(N,gd),e(N,Ca),e(Ca,pd),e(N,ud),e(N,Pa),e(Pa,_d),e(N,bd),e(N,yo),e(yo,vd),e(N,wd),e(N,Eo),e(Eo,Sd),e(N,$d),e(N,xo),e(xo,Td),_(r,jn,h),_(r,We,h),e(We,Fd),e(We,Rt),e(Rt,yd),e(We,Ed),_(r,Cn,h),_(r,be,h),e(be,Re),e(Re,Aa),$(Bt,Aa,null),e(be,xd),e(be,Da),e(Da,kd),_(r,Pn,h),_(r,R,h),$(Ut,R,null),e(R,Md),e(R,ve),e(ve,Id),e(ve,ko),e(ko,jd),e(ve,Cd),e(ve,Vt),e(Vt,Pd),e(ve,Ad),e(R,Dd),e(R,we),e(we,zd),e(we,Mo),e(Mo,qd),e(we,Ld),e(we,Io),e(Io,Od),e(we,Nd),e(R,Hd),$(Be,R,null),_(r,An,h),_(r,Se,h),e(Se,Ue),e(Ue,za),$(Kt,za,null),e(Se,Wd),e(Se,qa),e(qa,Rd),_(r,Dn,h),_(r,B,h),$(Gt,B,null),e(B,Bd),e(B,La),e(La,Ud),e(B,Vd),e(B,Yt),e(Yt,Kd),e(Yt,jo),e(jo,Gd),e(Yt,Yd),e(B,Jd),e(B,fe),$(Jt,fe,null),e(fe,Xd),e(fe,Oa),e(Oa,Zd),e(fe,Qd),$(Ve,fe,null),_(r,zn,h),_(r,$e,h),e($e,Ke),e(Ke,Na),$(Xt,Na,null),e($e,ec),e($e,Ha),e(Ha,tc),_(r,qn,h),_(r,ce,h),$(Zt,ce,null),e(ce,rc),e(ce,Qt),e(Qt,oc),e(Qt,er),e(er,ac),e(Qt,nc),e(ce,sc),e(ce,Y),$(tr,Y,null),e(Y,ic),e(Y,Te),e(Te,lc),e(Te,Co),e(Co,dc),e(Te,cc),e(Te,Wa),e(Wa,mc),e(Te,fc),e(Y,hc),$(Ge,Y,null),e(Y,gc),$(Ye,Y,null),_(r,Ln,h),_(r,Fe,h),e(Fe,Je),e(Je,Ra),$(rr,Ra,null),e(Fe,pc),e(Fe,Ba),e(Ba,uc),_(r,On,h),_(r,ye,h),$(or,ye,null),e(ye,_c),e(ye,Po),$(ar,Po,null),_(r,Nn,h),_(r,Ee,h),e(Ee,Xe),e(Xe,Ua),$(nr,Ua,null),e(Ee,bc),e(Ee,Va),e(Va,vc),_(r,Hn,h),_(r,U,h),$(sr,U,null),e(U,wc),e(U,Ka),e(Ka,Sc),e(U,$c),e(U,ir),e(ir,Tc),e(ir,lr),e(lr,Fc),e(ir,yc),e(U,Ec),e(U,J),$(dr,J,null),e(J,xc),e(J,xe),e(xe,kc),e(xe,Ao),e(Ao,Mc),e(xe,Ic),e(xe,Ga),e(Ga,jc),e(xe,Cc),e(J,Pc),$(Ze,J,null),e(J,Ac),$(Qe,J,null),_(r,Wn,h),_(r,ke,h),e(ke,et),e(et,Ya),$(cr,Ya,null),e(ke,Dc),e(ke,Ja),e(Ja,zc),_(r,Rn,h),_(r,me,h),$(mr,me,null),e(me,qc),e(me,fr),e(fr,Lc),e(fr,hr),e(hr,Oc),e(fr,Nc),e(me,Hc),e(me,X),$(gr,X,null),e(X,Wc),e(X,Me),e(Me,Rc),e(Me,Do),e(Do,Bc),e(Me,Uc),e(Me,Xa),e(Xa,Vc),e(Me,Kc),e(X,Gc),$(tt,X,null),e(X,Yc),$(rt,X,null),_(r,Bn,h),_(r,Ie,h),e(Ie,ot),e(ot,Za),$(pr,Za,null),e(Ie,Jc),e(Ie,Qa),e(Qa,Xc),_(r,Un,h),_(r,je,h),$(ur,je,null),e(je,Zc),e(je,zo),$(_r,zo,null),_(r,Vn,h),_(r,Ce,h),e(Ce,at),e(at,en),$(br,en,null),e(Ce,Qc),e(Ce,tn),e(tn,em),_(r,Kn,h),_(r,V,h),$(vr,V,null),e(V,tm),e(V,wr),e(wr,rm),e(wr,qo),e(qo,om),e(wr,am),e(V,nm),e(V,Sr),e(Sr,sm),e(Sr,$r),e($r,im),e(Sr,lm),e(V,dm),e(V,Z),$(Tr,Z,null),e(Z,cm),e(Z,Pe),e(Pe,mm),e(Pe,Lo),e(Lo,fm),e(Pe,hm),e(Pe,rn),e(rn,gm),e(Pe,pm),e(Z,um),$(nt,Z,null),e(Z,_m),$(st,Z,null),_(r,Gn,h),_(r,Ae,h),e(Ae,it),e(it,on),$(Fr,on,null),e(Ae,bm),e(Ae,an),e(an,vm),_(r,Yn,h),_(r,H,h),$(yr,H,null),e(H,wm),e(H,nn),e(nn,Sm),e(H,$m),e(H,Er),e(Er,Tm),e(Er,Oo),e(Oo,Fm),e(Er,ym),e(H,Em),e(H,xr),e(xr,xm),e(xr,kr),e(kr,km),e(xr,Mm),e(H,Im),e(H,Q),$(Mr,Q,null),e(Q,jm),e(Q,De),e(De,Cm),e(De,No),e(No,Pm),e(De,Am),e(De,sn),e(sn,Dm),e(De,zm),e(Q,qm),$(lt,Q,null),e(Q,Lm),$(dt,Q,null),_(r,Jn,h),_(r,ze,h),e(ze,ct),e(ct,ln),$(Ir,ln,null),e(ze,Om),e(ze,dn),e(dn,Nm),_(r,Xn,h),_(r,K,h),$(jr,K,null),e(K,Hm),e(K,Cr),e(Cr,Wm),e(Cr,Ho),e(Ho,Rm),e(Cr,Bm),e(K,Um),e(K,Pr),e(Pr,Vm),e(Pr,Ar),e(Ar,Km),e(Pr,Gm),e(K,Ym),e(K,ee),$(Dr,ee,null),e(ee,Jm),e(ee,qe),e(qe,Xm),e(qe,Wo),e(Wo,Zm),e(qe,Qm),e(qe,cn),e(cn,ef),e(qe,tf),e(ee,rf),$(mt,ee,null),e(ee,of),$(ft,ee,null),Zn=!0},p(r,[h]){const zr={};h&2&&(zr.$$scope={dirty:h,ctx:r}),Be.$set(zr);const mn={};h&2&&(mn.$$scope={dirty:h,ctx:r}),Ve.$set(mn);const fn={};h&2&&(fn.$$scope={dirty:h,ctx:r}),Ge.$set(fn);const hn={};h&2&&(hn.$$scope={dirty:h,ctx:r}),Ye.$set(hn);const qr={};h&2&&(qr.$$scope={dirty:h,ctx:r}),Ze.$set(qr);const gn={};h&2&&(gn.$$scope={dirty:h,ctx:r}),Qe.$set(gn);const pn={};h&2&&(pn.$$scope={dirty:h,ctx:r}),tt.$set(pn);const un={};h&2&&(un.$$scope={dirty:h,ctx:r}),rt.$set(un);const Lr={};h&2&&(Lr.$$scope={dirty:h,ctx:r}),nt.$set(Lr);const _n={};h&2&&(_n.$$scope={dirty:h,ctx:r}),st.$set(_n);const bn={};h&2&&(bn.$$scope={dirty:h,ctx:r}),lt.$set(bn);const vn={};h&2&&(vn.$$scope={dirty:h,ctx:r}),dt.$set(vn);const wn={};h&2&&(wn.$$scope={dirty:h,ctx:r}),mt.$set(wn);const Or={};h&2&&(Or.$$scope={dirty:h,ctx:r}),ft.$set(Or)},i(r){Zn||(T(d.$$.fragment,r),T(yt.$$.fragment,r),T(Bt.$$.fragment,r),T(Ut.$$.fragment,r),T(Be.$$.fragment,r),T(Kt.$$.fragment,r),T(Gt.$$.fragment,r),T(Jt.$$.fragment,r),T(Ve.$$.fragment,r),T(Xt.$$.fragment,r),T(Zt.$$.fragment,r),T(tr.$$.fragment,r),T(Ge.$$.fragment,r),T(Ye.$$.fragment,r),T(rr.$$.fragment,r),T(or.$$.fragment,r),T(ar.$$.fragment,r),T(nr.$$.fragment,r),T(sr.$$.fragment,r),T(dr.$$.fragment,r),T(Ze.$$.fragment,r),T(Qe.$$.fragment,r),T(cr.$$.fragment,r),T(mr.$$.fragment,r),T(gr.$$.fragment,r),T(tt.$$.fragment,r),T(rt.$$.fragment,r),T(pr.$$.fragment,r),T(ur.$$.fragment,r),T(_r.$$.fragment,r),T(br.$$.fragment,r),T(vr.$$.fragment,r),T(Tr.$$.fragment,r),T(nt.$$.fragment,r),T(st.$$.fragment,r),T(Fr.$$.fragment,r),T(yr.$$.fragment,r),T(Mr.$$.fragment,r),T(lt.$$.fragment,r),T(dt.$$.fragment,r),T(Ir.$$.fragment,r),T(jr.$$.fragment,r),T(Dr.$$.fragment,r),T(mt.$$.fragment,r),T(ft.$$.fragment,r),Zn=!0)},o(r){F(d.$$.fragment,r),F(yt.$$.fragment,r),F(Bt.$$.fragment,r),F(Ut.$$.fragment,r),F(Be.$$.fragment,r),F(Kt.$$.fragment,r),F(Gt.$$.fragment,r),F(Jt.$$.fragment,r),F(Ve.$$.fragment,r),F(Xt.$$.fragment,r),F(Zt.$$.fragment,r),F(tr.$$.fragment,r),F(Ge.$$.fragment,r),F(Ye.$$.fragment,r),F(rr.$$.fragment,r),F(or.$$.fragment,r),F(ar.$$.fragment,r),F(nr.$$.fragment,r),F(sr.$$.fragment,r),F(dr.$$.fragment,r),F(Ze.$$.fragment,r),F(Qe.$$.fragment,r),F(cr.$$.fragment,r),F(mr.$$.fragment,r),F(gr.$$.fragment,r),F(tt.$$.fragment,r),F(rt.$$.fragment,r),F(pr.$$.fragment,r),F(ur.$$.fragment,r),F(_r.$$.fragment,r),F(br.$$.fragment,r),F(vr.$$.fragment,r),F(Tr.$$.fragment,r),F(nt.$$.fragment,r),F(st.$$.fragment,r),F(Fr.$$.fragment,r),F(yr.$$.fragment,r),F(Mr.$$.fragment,r),F(lt.$$.fragment,r),F(dt.$$.fragment,r),F(Ir.$$.fragment,r),F(jr.$$.fragment,r),F(Dr.$$.fragment,r),F(mt.$$.fragment,r),F(ft.$$.fragment,r),Zn=!1},d(r){t(f),r&&t(v),r&&t(u),y(d),r&&t(Sn),r&&t(pe),y(yt),r&&t($n),r&&t(Oe),r&&t(Tn),r&&t(Br),r&&t(Fn),r&&t(Ur),r&&t(yn),r&&t(Ne),r&&t(En),r&&t(kt),r&&t(xn),r&&t(G),r&&t(kn),r&&t(Vr),r&&t(Mn),r&&t(M),r&&t(In),r&&t(He),r&&t(jn),r&&t(We),r&&t(Cn),r&&t(be),y(Bt),r&&t(Pn),r&&t(R),y(Ut),y(Be),r&&t(An),r&&t(Se),y(Kt),r&&t(Dn),r&&t(B),y(Gt),y(Jt),y(Ve),r&&t(zn),r&&t($e),y(Xt),r&&t(qn),r&&t(ce),y(Zt),y(tr),y(Ge),y(Ye),r&&t(Ln),r&&t(Fe),y(rr),r&&t(On),r&&t(ye),y(or),y(ar),r&&t(Nn),r&&t(Ee),y(nr),r&&t(Hn),r&&t(U),y(sr),y(dr),y(Ze),y(Qe),r&&t(Wn),r&&t(ke),y(cr),r&&t(Rn),r&&t(me),y(mr),y(gr),y(tt),y(rt),r&&t(Bn),r&&t(Ie),y(pr),r&&t(Un),r&&t(je),y(ur),y(_r),r&&t(Vn),r&&t(Ce),y(br),r&&t(Kn),r&&t(V),y(vr),y(Tr),y(nt),y(st),r&&t(Gn),r&&t(Ae),y(Fr),r&&t(Yn),r&&t(H),y(yr),y(Mr),y(lt),y(dt),r&&t(Jn),r&&t(ze),y(Ir),r&&t(Xn),r&&t(K),y(jr),y(Dr),y(mt),y(ft)}}}const op={local:"segformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.SegformerConfig",title:"SegformerConfig"},{local:"transformers.SegformerFeatureExtractor",title:"SegformerFeatureExtractor"},{local:"transformers.SegformerModel",title:"SegformerModel"},{local:"transformers.SegformerDecodeHead",title:"SegformerDecodeHead"},{local:"transformers.SegformerForImageClassification",title:"SegformerForImageClassification"},{local:"transformers.SegformerForSemanticSegmentation",title:"SegformerForSemanticSegmentation"},{local:"transformers.TFSegformerDecodeHead",title:"TFSegformerDecodeHead"},{local:"transformers.TFSegformerModel",title:"TFSegformerModel"},{local:"transformers.TFSegformerForImageClassification",title:"TFSegformerForImageClassification"},{local:"transformers.TFSegformerForSemanticSegmentation",title:"TFSegformerForSemanticSegmentation"}],title:"SegFormer"};function ap(E){return Hg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mp extends zg{constructor(f){super();qg(this,f,ap,rp,Lg,{})}}export{mp as default,op as metadata};
